
32F746Discovery_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007978  08023a00  08023a00  00033a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802b378  0802b378  0003b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802b380  0802b380  0003b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802b384  0802b384  0003b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000014c  20000000  0802b388  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002af30  2000014c  0802b4d4  0004014c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2002b07c  0802b4d4  0004b07c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0004014c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000226be  00000000  00000000  0004017c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000a15de  00000000  00000000  0006283a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000dd0a  00000000  00000000  00103e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003290  00000000  00000000  00111b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003f08  00000000  00000000  00114db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00027091  00000000  00000000  00118cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000134a5  00000000  00000000  0013fd51  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  001531f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a63c  00000000  00000000  001532e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000014c 	.word	0x2000014c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080239e8 	.word	0x080239e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000150 	.word	0x20000150
 800020c:	080239e8 	.word	0x080239e8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f092 0f00 	teq	r2, #0
 80004fa:	bf14      	ite	ne
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e720      	b.n	8000354 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aedc 	beq.w	8000302 <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6c1      	b.n	8000302 <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_ldivmod>:
 8000bd0:	b97b      	cbnz	r3, 8000bf2 <__aeabi_ldivmod+0x22>
 8000bd2:	b972      	cbnz	r2, 8000bf2 <__aeabi_ldivmod+0x22>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bfbe      	ittt	lt
 8000bd8:	2000      	movlt	r0, #0
 8000bda:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bde:	e006      	blt.n	8000bee <__aeabi_ldivmod+0x1e>
 8000be0:	bf08      	it	eq
 8000be2:	2800      	cmpeq	r0, #0
 8000be4:	bf1c      	itt	ne
 8000be6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bea:	f04f 30ff 	movne.w	r0, #4294967295
 8000bee:	f000 b9c5 	b.w	8000f7c <__aeabi_idiv0>
 8000bf2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	db09      	blt.n	8000c12 <__aeabi_ldivmod+0x42>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db1a      	blt.n	8000c38 <__aeabi_ldivmod+0x68>
 8000c02:	f000 f84d 	bl	8000ca0 <__udivmoddi4>
 8000c06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0e:	b004      	add	sp, #16
 8000c10:	4770      	bx	lr
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db1b      	blt.n	8000c54 <__aeabi_ldivmod+0x84>
 8000c1c:	f000 f840 	bl	8000ca0 <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	f000 f82f 	bl	8000ca0 <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4240      	negs	r0, r0
 8000c4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c52:	4770      	bx	lr
 8000c54:	4252      	negs	r2, r2
 8000c56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5a:	f000 f821 	bl	8000ca0 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_uldivmod>:
 8000c70:	b953      	cbnz	r3, 8000c88 <__aeabi_uldivmod+0x18>
 8000c72:	b94a      	cbnz	r2, 8000c88 <__aeabi_uldivmod+0x18>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	bf08      	it	eq
 8000c78:	2800      	cmpeq	r0, #0
 8000c7a:	bf1c      	itt	ne
 8000c7c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c80:	f04f 30ff 	movne.w	r0, #4294967295
 8000c84:	f000 b97a 	b.w	8000f7c <__aeabi_idiv0>
 8000c88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c90:	f000 f806 	bl	8000ca0 <__udivmoddi4>
 8000c94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9c:	b004      	add	sp, #16
 8000c9e:	4770      	bx	lr

08000ca0 <__udivmoddi4>:
 8000ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4604      	mov	r4, r0
 8000caa:	9e08      	ldr	r6, [sp, #32]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d151      	bne.n	8000d54 <__udivmoddi4+0xb4>
 8000cb0:	428a      	cmp	r2, r1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	d96d      	bls.n	8000d92 <__udivmoddi4+0xf2>
 8000cb6:	fab2 fe82 	clz	lr, r2
 8000cba:	f1be 0f00 	cmp.w	lr, #0
 8000cbe:	d00b      	beq.n	8000cd8 <__udivmoddi4+0x38>
 8000cc0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cc4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ccc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cd0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cd4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cd8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cdc:	0c25      	lsrs	r5, r4, #16
 8000cde:	fbbc f8fa 	udiv	r8, ip, sl
 8000ce2:	fa1f f987 	uxth.w	r9, r7
 8000ce6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cee:	fb08 f309 	mul.w	r3, r8, r9
 8000cf2:	42ab      	cmp	r3, r5
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x6c>
 8000cf6:	19ed      	adds	r5, r5, r7
 8000cf8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cfc:	f080 8123 	bcs.w	8000f46 <__udivmoddi4+0x2a6>
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	f240 8120 	bls.w	8000f46 <__udivmoddi4+0x2a6>
 8000d06:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0a:	443d      	add	r5, r7
 8000d0c:	1aed      	subs	r5, r5, r3
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d14:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb00 f909 	mul.w	r9, r0, r9
 8000d20:	45a1      	cmp	r9, r4
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x98>
 8000d24:	19e4      	adds	r4, r4, r7
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	f080 810a 	bcs.w	8000f42 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8107 	bls.w	8000f42 <__udivmoddi4+0x2a2>
 8000d34:	3802      	subs	r0, #2
 8000d36:	443c      	add	r4, r7
 8000d38:	eba4 0409 	sub.w	r4, r4, r9
 8000d3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d40:	2100      	movs	r1, #0
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d061      	beq.n	8000e0a <__udivmoddi4+0x16a>
 8000d46:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6034      	str	r4, [r6, #0]
 8000d4e:	6073      	str	r3, [r6, #4]
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0xc8>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d054      	beq.n	8000e06 <__udivmoddi4+0x166>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d62:	4608      	mov	r0, r1
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d68:	fab3 f183 	clz	r1, r3
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	f040 808e 	bne.w	8000e8e <__udivmoddi4+0x1ee>
 8000d72:	42ab      	cmp	r3, r5
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xdc>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80fa 	bhi.w	8000f70 <__udivmoddi4+0x2d0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	46ac      	mov	ip, r5
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d03f      	beq.n	8000e0a <__udivmoddi4+0x16a>
 8000d8a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	b912      	cbnz	r2, 8000d9a <__udivmoddi4+0xfa>
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d9a:	fab7 fe87 	clz	lr, r7
 8000d9e:	f1be 0f00 	cmp.w	lr, #0
 8000da2:	d134      	bne.n	8000e0e <__udivmoddi4+0x16e>
 8000da4:	1beb      	subs	r3, r5, r7
 8000da6:	0c3a      	lsrs	r2, r7, #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	2101      	movs	r1, #1
 8000dae:	fbb3 f8f2 	udiv	r8, r3, r2
 8000db2:	0c25      	lsrs	r5, r4, #16
 8000db4:	fb02 3318 	mls	r3, r2, r8, r3
 8000db8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbc:	fb0c f308 	mul.w	r3, ip, r8
 8000dc0:	42ab      	cmp	r3, r5
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x134>
 8000dc4:	19ed      	adds	r5, r5, r7
 8000dc6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x132>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	f200 80d1 	bhi.w	8000f74 <__udivmoddi4+0x2d4>
 8000dd2:	4680      	mov	r8, r0
 8000dd4:	1aed      	subs	r5, r5, r3
 8000dd6:	b2a3      	uxth	r3, r4
 8000dd8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ddc:	fb02 5510 	mls	r5, r2, r0, r5
 8000de0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000de4:	fb0c fc00 	mul.w	ip, ip, r0
 8000de8:	45a4      	cmp	ip, r4
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x15c>
 8000dec:	19e4      	adds	r4, r4, r7
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x15a>
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	f200 80b8 	bhi.w	8000f6a <__udivmoddi4+0x2ca>
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	eba4 040c 	sub.w	r4, r4, ip
 8000e00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e04:	e79d      	b.n	8000d42 <__udivmoddi4+0xa2>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	f1ce 0420 	rsb	r4, lr, #32
 8000e12:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e16:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e1a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e1e:	0c3a      	lsrs	r2, r7, #16
 8000e20:	fa25 f404 	lsr.w	r4, r5, r4
 8000e24:	ea48 0803 	orr.w	r8, r8, r3
 8000e28:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e30:	fb02 4411 	mls	r4, r2, r1, r4
 8000e34:	fa1f fc87 	uxth.w	ip, r7
 8000e38:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e3c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e46:	d909      	bls.n	8000e5c <__udivmoddi4+0x1bc>
 8000e48:	19ed      	adds	r5, r5, r7
 8000e4a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e4e:	f080 808a 	bcs.w	8000f66 <__udivmoddi4+0x2c6>
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	f240 8087 	bls.w	8000f66 <__udivmoddi4+0x2c6>
 8000e58:	3902      	subs	r1, #2
 8000e5a:	443d      	add	r5, r7
 8000e5c:	1aeb      	subs	r3, r5, r3
 8000e5e:	fa1f f588 	uxth.w	r5, r8
 8000e62:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e66:	fb02 3310 	mls	r3, r2, r0, r3
 8000e6a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e6e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x1e6>
 8000e76:	19ed      	adds	r5, r5, r7
 8000e78:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7c:	d26f      	bcs.n	8000f5e <__udivmoddi4+0x2be>
 8000e7e:	42ab      	cmp	r3, r5
 8000e80:	d96d      	bls.n	8000f5e <__udivmoddi4+0x2be>
 8000e82:	3802      	subs	r0, #2
 8000e84:	443d      	add	r5, r7
 8000e86:	1aeb      	subs	r3, r5, r3
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	e78f      	b.n	8000dae <__udivmoddi4+0x10e>
 8000e8e:	f1c1 0720 	rsb	r7, r1, #32
 8000e92:	fa22 f807 	lsr.w	r8, r2, r7
 8000e96:	408b      	lsls	r3, r1
 8000e98:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9c:	ea48 0303 	orr.w	r3, r8, r3
 8000ea0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ea4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eae:	fbb5 f9fc 	udiv	r9, r5, ip
 8000eb2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000eb6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eba:	fa1f f883 	uxth.w	r8, r3
 8000ebe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ec2:	fb09 f408 	mul.w	r4, r9, r8
 8000ec6:	42ac      	cmp	r4, r5
 8000ec8:	fa02 f201 	lsl.w	r2, r2, r1
 8000ecc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x244>
 8000ed2:	18ed      	adds	r5, r5, r3
 8000ed4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ed8:	d243      	bcs.n	8000f62 <__udivmoddi4+0x2c2>
 8000eda:	42ac      	cmp	r4, r5
 8000edc:	d941      	bls.n	8000f62 <__udivmoddi4+0x2c2>
 8000ede:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee2:	441d      	add	r5, r3
 8000ee4:	1b2d      	subs	r5, r5, r4
 8000ee6:	fa1f fe8e 	uxth.w	lr, lr
 8000eea:	fbb5 f0fc 	udiv	r0, r5, ip
 8000eee:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ef2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ef6:	fb00 f808 	mul.w	r8, r0, r8
 8000efa:	45a0      	cmp	r8, r4
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x26e>
 8000efe:	18e4      	adds	r4, r4, r3
 8000f00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f04:	d229      	bcs.n	8000f5a <__udivmoddi4+0x2ba>
 8000f06:	45a0      	cmp	r8, r4
 8000f08:	d927      	bls.n	8000f5a <__udivmoddi4+0x2ba>
 8000f0a:	3802      	subs	r0, #2
 8000f0c:	441c      	add	r4, r3
 8000f0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f12:	eba4 0408 	sub.w	r4, r4, r8
 8000f16:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1a:	454c      	cmp	r4, r9
 8000f1c:	46c6      	mov	lr, r8
 8000f1e:	464d      	mov	r5, r9
 8000f20:	d315      	bcc.n	8000f4e <__udivmoddi4+0x2ae>
 8000f22:	d012      	beq.n	8000f4a <__udivmoddi4+0x2aa>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x29c>
 8000f26:	ebba 030e 	subs.w	r3, sl, lr
 8000f2a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40cb      	lsrs	r3, r1
 8000f34:	431f      	orrs	r7, r3
 8000f36:	40cc      	lsrs	r4, r1
 8000f38:	6037      	str	r7, [r6, #0]
 8000f3a:	6074      	str	r4, [r6, #4]
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	4618      	mov	r0, r3
 8000f44:	e6f8      	b.n	8000d38 <__udivmoddi4+0x98>
 8000f46:	4690      	mov	r8, r2
 8000f48:	e6e0      	b.n	8000d0c <__udivmoddi4+0x6c>
 8000f4a:	45c2      	cmp	sl, r8
 8000f4c:	d2ea      	bcs.n	8000f24 <__udivmoddi4+0x284>
 8000f4e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f52:	eb69 0503 	sbc.w	r5, r9, r3
 8000f56:	3801      	subs	r0, #1
 8000f58:	e7e4      	b.n	8000f24 <__udivmoddi4+0x284>
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	e7d7      	b.n	8000f0e <__udivmoddi4+0x26e>
 8000f5e:	4640      	mov	r0, r8
 8000f60:	e791      	b.n	8000e86 <__udivmoddi4+0x1e6>
 8000f62:	4681      	mov	r9, r0
 8000f64:	e7be      	b.n	8000ee4 <__udivmoddi4+0x244>
 8000f66:	4601      	mov	r1, r0
 8000f68:	e778      	b.n	8000e5c <__udivmoddi4+0x1bc>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	443c      	add	r4, r7
 8000f6e:	e745      	b.n	8000dfc <__udivmoddi4+0x15c>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e708      	b.n	8000d86 <__udivmoddi4+0xe6>
 8000f74:	f1a8 0802 	sub.w	r8, r8, #2
 8000f78:	443d      	add	r5, r7
 8000f7a:	e72b      	b.n	8000dd4 <__udivmoddi4+0x134>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f86:	e003      	b.n	8000f90 <LoopCopyDataInit>

08000f88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f8e:	3104      	adds	r1, #4

08000f90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f98:	d3f6      	bcc.n	8000f88 <CopyDataInit>
  ldr  r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f9c:	e002      	b.n	8000fa4 <LoopFillZerobss>

08000f9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fa0:	f842 3b04 	str.w	r3, [r2], #4

08000fa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa8:	d3f9      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000faa:	f003 fc45 	bl	8004838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f020 fe69 	bl	8021c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f000 fd5b 	bl	8001a6c <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000fbc:	0802b388 	.word	0x0802b388
  ldr  r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc4:	2000014c 	.word	0x2000014c
  ldr  r2, =_sbss
 8000fc8:	2000014c 	.word	0x2000014c
  ldr  r3, = _ebss
 8000fcc:	2002b07c 	.word	0x2002b07c

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>

08000fd2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd2:	b570      	push	{r4, r5, r6, lr}
 8000fd4:	460e      	mov	r6, r1
 8000fd6:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	460c      	mov	r4, r1
 8000fda:	1ba3      	subs	r3, r4, r6
 8000fdc:	429d      	cmp	r5, r3
 8000fde:	dc01      	bgt.n	8000fe4 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000fe4:	f000 f9d0 	bl	8001388 <__io_getchar>
 8000fe8:	f804 0b01 	strb.w	r0, [r4], #1
 8000fec:	e7f5      	b.n	8000fda <_read+0x8>

08000fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fee:	b570      	push	{r4, r5, r6, lr}
 8000ff0:	460e      	mov	r6, r1
 8000ff2:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	1ba3      	subs	r3, r4, r6
 8000ff8:	429d      	cmp	r5, r3
 8000ffa:	dc01      	bgt.n	8001000 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001000:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001004:	f000 f9b0 	bl	8001368 <__io_putchar>
 8001008:	e7f5      	b.n	8000ff6 <_write+0x8>
	...

0800100c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800100c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <_sbrk+0x2c>)
{
 8001010:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	b909      	cbnz	r1, 800101a <_sbrk+0xe>
		heap_end = &end;
 8001016:	4909      	ldr	r1, [pc, #36]	; (800103c <_sbrk+0x30>)
 8001018:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800101a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800101c:	4669      	mov	r1, sp
 800101e:	4402      	add	r2, r0
 8001020:	428a      	cmp	r2, r1
 8001022:	d906      	bls.n	8001032 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001024:	f020 fe28 	bl	8021c78 <__errno>
 8001028:	230c      	movs	r3, #12
 800102a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001032:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001034:	bd08      	pop	{r3, pc}
 8001036:	bf00      	nop
 8001038:	20000510 	.word	0x20000510
 800103c:	2002b07c 	.word	0x2002b07c

08001040 <_close>:

int _close(int file)
{
	return -1;
}
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800104a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800104c:	604b      	str	r3, [r1, #4]
}
 800104e:	4770      	bx	lr

08001050 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001050:	2001      	movs	r0, #1
 8001052:	4770      	bx	lr

08001054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001054:	2000      	movs	r0, #0
 8001056:	4770      	bx	lr

08001058 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	2210      	movs	r2, #16
 800105c:	2100      	movs	r1, #0
 800105e:	4668      	mov	r0, sp

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001060:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001064:	f020 fe76 	bl	8021d54 <memset>
  hadc3.Instance = ADC3;
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_ADC3_Init+0x5c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_ADC3_Init+0x60>)
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_ADC3_Init+0x64>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 8001074:	2401      	movs	r4, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001076:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001078:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800107a:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800107c:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800107e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001082:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001084:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001086:	61c4      	str	r4, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001088:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800108e:	f003 fc33 	bl	80048f8 <HAL_ADC_Init>
 8001092:	b108      	cbz	r0, 8001098 <MX_ADC3_Init+0x40>
  {
    Error_Handler();
 8001094:	f000 fd4c 	bl	8001b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001098:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800109a:	4669      	mov	r1, sp
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC3_Init+0x5c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109e:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a2:	2300      	movs	r3, #0
 80010a4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010a6:	f003 fd61 	bl	8004b6c <HAL_ADC_ConfigChannel>
 80010aa:	b108      	cbz	r0, 80010b0 <MX_ADC3_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 fd40 	bl	8001b30 <Error_Handler>
  }

}
 80010b0:	b004      	add	sp, #16
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	20029bd8 	.word	0x20029bd8
 80010b8:	40012200 	.word	0x40012200
 80010bc:	0f000001 	.word	0x0f000001

080010c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c0:	b510      	push	{r4, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	2214      	movs	r2, #20
 80010c8:	2100      	movs	r1, #0
 80010ca:	a803      	add	r0, sp, #12
 80010cc:	f020 fe42 	bl	8021d54 <memset>
  if(adcHandle->Instance==ADC3)
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_ADC_MspInit+0x7c>)
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d12e      	bne.n	8001136 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010d8:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010dc:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010de:	a903      	add	r1, sp, #12
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010ec:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f6:	f042 0220 	orr.w	r2, r2, #32
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
 80010fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fe:	f002 0220 	and.w	r2, r2, #32
 8001102:	9201      	str	r2, [sp, #4]
 8001104:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800111a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800111e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001120:	f004 f970 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001124:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001126:	a903      	add	r1, sp, #12
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800112a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001132:	f004 f967 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001136:	b008      	add	sp, #32
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop
 800113c:	40012200 	.word	0x40012200
 8001140:	40021400 	.word	0x40021400
 8001144:	40020000 	.word	0x40020000

08001148 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001148:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <MX_CRC_Init+0x28>)
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_CRC_Init+0x2c>)
 800114e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001154:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001156:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001158:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800115a:	2301      	movs	r3, #1
 800115c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800115e:	f003 fe57 	bl	8004e10 <HAL_CRC_Init>
 8001162:	b118      	cbz	r0, 800116c <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 8001164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001168:	f000 bce2 	b.w	8001b30 <Error_Handler>
 800116c:	bd08      	pop	{r3, pc}
 800116e:	bf00      	nop
 8001170:	20029c20 	.word	0x20029c20
 8001174:	40023000 	.word	0x40023000

08001178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001178:	6802      	ldr	r2, [r0, #0]
{
 800117a:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_CRC_MspInit+0x28>)
 800117e:	429a      	cmp	r2, r3
 8001180:	d10b      	bne.n	800119a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001182:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800118a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800119a:	b002      	add	sp, #8
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023000 	.word	0x40023000

080011a4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011a4:	b508      	push	{r3, lr}

  hdcmi.Instance = DCMI;
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <MX_DCMI_Init+0x30>)
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_DCMI_Init+0x34>)
 80011aa:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011b0:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80011b2:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011b4:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011b6:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011b8:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011ba:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80011bc:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80011be:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80011c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80011c2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011c4:	f003 fec2 	bl	8004f4c <HAL_DCMI_Init>
 80011c8:	b118      	cbz	r0, 80011d2 <MX_DCMI_Init+0x2e>
  {
    Error_Handler();
  }

}
 80011ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011ce:	f000 bcaf 	b.w	8001b30 <Error_Handler>
 80011d2:	bd08      	pop	{r3, pc}
 80011d4:	20029c44 	.word	0x20029c44
 80011d8:	50050000 	.word	0x50050000

080011dc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	2214      	movs	r2, #20
 80011e4:	2100      	movs	r1, #0
 80011e6:	a807      	add	r0, sp, #28
 80011e8:	f020 fdb4 	bl	8021d54 <memset>
  if(dcmiHandle->Instance==DCMI)
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_DCMI_MspInit+0xf4>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d16b      	bne.n	80012cc <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011f8:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fa:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 80011fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	4835      	ldr	r0, [pc, #212]	; (80012d8 <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
 8001208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120a:	f002 0201 	and.w	r2, r2, #1
 800120e:	9201      	str	r2, [sp, #4]
 8001210:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	f042 0210 	orr.w	r2, r2, #16
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
 800121a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121c:	f002 0210 	and.w	r2, r2, #16
 8001220:	9202      	str	r2, [sp, #8]
 8001222:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001226:	f042 0208 	orr.w	r2, r2, #8
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
 800122c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122e:	f002 0208 	and.w	r2, r2, #8
 8001232:	9203      	str	r2, [sp, #12]
 8001234:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
 800123e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001240:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001244:	9204      	str	r2, [sp, #16]
 8001246:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800124a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
 8001250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001252:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001256:	9205      	str	r2, [sp, #20]
 8001258:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	9306      	str	r3, [sp, #24]
 800126c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800126e:	2360      	movs	r3, #96	; 0x60
 8001270:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001272:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f004 f8c6 	bl	8005404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001278:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800127a:	a907      	add	r1, sp, #28
 800127c:	4817      	ldr	r0, [pc, #92]	; (80012dc <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800127e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001286:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001288:	f004 f8bc 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800128c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001290:	a907      	add	r1, sp, #28
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001294:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800129c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800129e:	f004 f8b1 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012a2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a6:	a907      	add	r1, sp, #28
 80012a8:	480e      	ldr	r0, [pc, #56]	; (80012e4 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012aa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012b2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012b4:	f004 f8a6 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012b8:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	a907      	add	r1, sp, #28
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f004 f89c 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80012cc:	b00c      	add	sp, #48	; 0x30
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	50050000 	.word	0x50050000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40020000 	.word	0x40020000

080012ec <dmc_itoa>:

/**
 * C version 0.4 char* style "itoa":
 */
char * dmc_itoa(int64_t value, char* result, int base)
{
 80012ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f0:	461e      	mov	r6, r3
	// check that the base if valid
	if (base < 2 || base > 36)
 80012f2:	3b02      	subs	r3, #2
{
 80012f4:	4614      	mov	r4, r2
	if (base < 2 || base > 36)
 80012f6:	2b22      	cmp	r3, #34	; 0x22
 80012f8:	d904      	bls.n	8001304 <dmc_itoa+0x18>
	{
		*result = '\0';
 80012fa:	2300      	movs	r3, #0
 80012fc:	7013      	strb	r3, [r2, #0]
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
 80012fe:	4620      	mov	r0, r4
 8001300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001304:	4615      	mov	r5, r2
		value /= base;
 8001306:	46b0      	mov	r8, r6
 8001308:	ea4f 79e6 	mov.w	r9, r6, asr #31
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 800130c:	f8df a054 	ldr.w	sl, [pc, #84]	; 8001364 <dmc_itoa+0x78>
		tmp_value = value;
 8001310:	4607      	mov	r7, r0
		value /= base;
 8001312:	4642      	mov	r2, r8
 8001314:	464b      	mov	r3, r9
 8001316:	f7ff fc5b 	bl	8000bd0 <__aeabi_ldivmod>
				+ (tmp_value - value * base)];
 800131a:	fba6 2300 	umull	r2, r3, r6, r0
 800131e:	eb0a 0307 	add.w	r3, sl, r7
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 8001322:	46ae      	mov	lr, r5
 8001324:	1a9a      	subs	r2, r3, r2
 8001326:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 800132a:	f80e 3b01 	strb.w	r3, [lr], #1
	while (value);
 800132e:	ea50 0301 	orrs.w	r3, r0, r1
 8001332:	d115      	bne.n	8001360 <dmc_itoa+0x74>
	if (tmp_value < 0)
 8001334:	2f00      	cmp	r7, #0
		*ptr++ = '-';
 8001336:	bfbe      	ittt	lt
 8001338:	232d      	movlt	r3, #45	; 0x2d
 800133a:	f88e 3000 	strblt.w	r3, [lr]
 800133e:	f105 0e02 	addlt.w	lr, r5, #2
	*ptr-- = '\0';
 8001342:	2300      	movs	r3, #0
 8001344:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001348:	f88e 3000 	strb.w	r3, [lr]
 800134c:	4623      	mov	r3, r4
	while (ptr1 < ptr)
 800134e:	429a      	cmp	r2, r3
 8001350:	d9d5      	bls.n	80012fe <dmc_itoa+0x12>
		tmp_char = *ptr;
 8001352:	7811      	ldrb	r1, [r2, #0]
		*ptr-- = *ptr1;
 8001354:	7818      	ldrb	r0, [r3, #0]
 8001356:	f802 0901 	strb.w	r0, [r2], #-1
		*ptr1++ = tmp_char;
 800135a:	f803 1b01 	strb.w	r1, [r3], #1
 800135e:	e7f6      	b.n	800134e <dmc_itoa+0x62>
	while (value);
 8001360:	4675      	mov	r5, lr
 8001362:	e7d5      	b.n	8001310 <dmc_itoa+0x24>
 8001364:	0802a9ac 	.word	0x0802a9ac

08001368 <__io_putchar>:
	VprintUart3(fmt, argp);
	va_end(argp);
}

int __io_putchar(int ch)
{
 8001368:	b513      	push	{r0, r1, r4, lr}
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800136a:	a902      	add	r1, sp, #8
{
 800136c:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800136e:	230a      	movs	r3, #10
 8001370:	2201      	movs	r2, #1
	c[0] = ch & 0x00FF;
 8001372:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <__io_putchar+0x1c>)
 8001378:	f00a fa51 	bl	800b81e <HAL_UART_Transmit>
	return ch;
}
 800137c:	4620      	mov	r0, r4
 800137e:	b002      	add	sp, #8
 8001380:	bd10      	pop	{r4, pc}
 8001382:	bf00      	nop
 8001384:	2002a198 	.word	0x2002a198

08001388 <__io_getchar>:

int __io_getchar(void)
{
 8001388:	b513      	push	{r0, r1, r4, lr}
	HAL_StatusTypeDef Status = HAL_BUSY;
	uint8_t ch;
	// Remember RS485 TX_Enable
	while (Status != HAL_OK)
	{
		Status = HAL_UART_Receive(&huart1, &ch, 1, 10);
 800138a:	4c07      	ldr	r4, [pc, #28]	; (80013a8 <__io_getchar+0x20>)
 800138c:	230a      	movs	r3, #10
 800138e:	2201      	movs	r2, #1
 8001390:	f10d 0107 	add.w	r1, sp, #7
 8001394:	4620      	mov	r0, r4
 8001396:	f00a fa99 	bl	800b8cc <HAL_UART_Receive>
	while (Status != HAL_OK)
 800139a:	2800      	cmp	r0, #0
 800139c:	d1f6      	bne.n	800138c <__io_getchar+0x4>
	}
	return (ch);
}
 800139e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013a2:	b002      	add	sp, #8
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop
 80013a8:	2002a198 	.word	0x2002a198

080013ac <dmc_putc>:
	__io_putchar(v & 0xff);
}

void dmc_putc(char c)
{
	__io_putchar(c);
 80013ac:	f7ff bfdc 	b.w	8001368 <__io_putchar>

080013b0 <dmc_putcr>:
	__io_putchar('\n');
}

void dmc_putcr(void)
{
	__io_putchar('\n');
 80013b0:	200a      	movs	r0, #10
 80013b2:	f7ff bfd9 	b.w	8001368 <__io_putchar>

080013b6 <dmc_puts>:
}

void dmc_puts(char* str)
{
 80013b6:	b510      	push	{r4, lr}
 80013b8:	1e44      	subs	r4, r0, #1
	while (*str)
 80013ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80013be:	b900      	cbnz	r0, 80013c2 <dmc_puts+0xc>
	{
		__io_putchar(*str++);
	}
}
 80013c0:	bd10      	pop	{r4, pc}
		__io_putchar(*str++);
 80013c2:	f7ff ffd1 	bl	8001368 <__io_putchar>
 80013c6:	e7f8      	b.n	80013ba <dmc_puts+0x4>

080013c8 <dmc_putint>:
{
 80013c8:	b500      	push	{lr}
 80013ca:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 80013cc:	230a      	movs	r3, #10
 80013ce:	17c1      	asrs	r1, r0, #31
 80013d0:	466a      	mov	r2, sp
 80013d2:	f7ff ff8b 	bl	80012ec <dmc_itoa>
	dmc_puts(myStr);
 80013d6:	4668      	mov	r0, sp
 80013d8:	f7ff ffed 	bl	80013b6 <dmc_puts>
}
 80013dc:	b009      	add	sp, #36	; 0x24
 80013de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080013e4 <rnd>:

static unsigned long m_z=12434,m_w=33254;

unsigned long rnd()
{
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <rnd+0x2c>)
 80013e6:	f249 0169 	movw	r1, #36969	; 0x9069
 80013ea:	6813      	ldr	r3, [r2, #0]
 80013ec:	b298      	uxth	r0, r3
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	fb01 3000 	mla	r0, r1, r0, r3
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <rnd+0x30>)
{
 80013f6:	b510      	push	{r4, lr}
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 80013f8:	6010      	str	r0, [r2, #0]
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 80013fa:	f244 6450 	movw	r4, #18000	; 0x4650
 80013fe:	680a      	ldr	r2, [r1, #0]
 8001400:	b293      	uxth	r3, r2
 8001402:	0c12      	lsrs	r2, r2, #16
 8001404:	fb04 2303 	mla	r3, r4, r3, r2
 8001408:	600b      	str	r3, [r1, #0]
    return ((m_z <<16) + m_w);
}
 800140a:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 800140e:	bd10      	pop	{r4, pc}
 8001410:	20000088 	.word	0x20000088
 8001414:	20000084 	.word	0x20000084

08001418 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001418:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 800141a:	f001 f9ed 	bl	80027f8 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800141e:	f002 fd91 	bl	8003f44 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 8001422:	f001 fd2b 	bl	8002e7c <GRAPHICS_MainTask>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f00b fcbb 	bl	800cda2 <osDelay>
 800142c:	e7fb      	b.n	8001426 <StartDefaultTask+0xe>

0800142e <vApplicationIdleHook>:
 800142e:	4770      	bx	lr

08001430 <vApplicationStackOverflowHook>:
{
 8001430:	4770      	bx	lr

08001432 <vApplicationMallocFailedHook>:
{
 8001432:	4770      	bx	lr

08001434 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001434:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001436:	4d07      	ldr	r5, [pc, #28]	; (8001454 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 8001438:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	ac01      	add	r4, sp, #4
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001442:	2100      	movs	r1, #0
 8001444:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001446:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001448:	f00b fc91 	bl	800cd6e <osThreadCreate>
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <MX_FREERTOS_Init+0x24>)
 800144e:	6018      	str	r0, [r3, #0]
}
 8001450:	b007      	add	sp, #28
 8001452:	bd30      	pop	{r4, r5, pc}
 8001454:	08023a00 	.word	0x08023a00
 8001458:	20029c94 	.word	0x20029c94

0800145c <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 800145c:	4770      	bx	lr
	...

08001460 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001464:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	2214      	movs	r2, #20
 8001468:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800146a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 800172c <MX_GPIO_Init+0x2cc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	a80d      	add	r0, sp, #52	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001470:	4fa4      	ldr	r7, [pc, #656]	; (8001704 <MX_GPIO_Init+0x2a4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f020 fc6f 	bl	8021d54 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4ba4      	ldr	r3, [pc, #656]	; (8001708 <MX_GPIO_Init+0x2a8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001478:	4658      	mov	r0, fp
 800147a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001480:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8001730 <MX_GPIO_Init+0x2d0>
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800148e:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	631a      	str	r2, [r3, #48]	; 0x30
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	f002 0210 	and.w	r2, r2, #16
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014aa:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80014ae:	9203      	str	r2, [sp, #12]
 80014b0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b4:	f042 0202 	orr.w	r2, r2, #2
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
 80014ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014bc:	f002 0202 	and.w	r2, r2, #2
 80014c0:	9204      	str	r2, [sp, #16]
 80014c2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	f042 0208 	orr.w	r2, r2, #8
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
 80014cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ce:	f002 0208 	and.w	r2, r2, #8
 80014d2:	9205      	str	r2, [sp, #20]
 80014d4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d8:	f042 0204 	orr.w	r2, r2, #4
 80014dc:	631a      	str	r2, [r3, #48]	; 0x30
 80014de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e0:	f002 0204 	and.w	r2, r2, #4
 80014e4:	9206      	str	r2, [sp, #24]
 80014e6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
 80014f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f2:	f002 0201 	and.w	r2, r2, #1
 80014f6:	9207      	str	r2, [sp, #28]
 80014f8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001504:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001508:	9208      	str	r2, [sp, #32]
 800150a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
 8001514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001516:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800151a:	9209      	str	r2, [sp, #36]	; 0x24
 800151c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001528:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800152c:	920a      	str	r2, [sp, #40]	; 0x28
 800152e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001532:	f042 0220 	orr.w	r2, r2, #32
 8001536:	631a      	str	r2, [r3, #48]	; 0x30
 8001538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153a:	f002 0220 	and.w	r2, r2, #32
 800153e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	930c      	str	r3, [sp, #48]	; 0x30
 8001554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001556:	f004 f985 	bl	8005864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800155a:	4638      	mov	r0, r7
 800155c:	2200      	movs	r2, #0
 800155e:	210c      	movs	r1, #12
 8001560:	f004 f980 	bl	8005864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <MX_GPIO_Init+0x2ac>)
 8001566:	2201      	movs	r2, #1
 8001568:	2108      	movs	r1, #8
 800156a:	4618      	mov	r0, r3
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f004 f979 	bl	8005864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001572:	4638      	mov	r0, r7
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	f004 f973 	bl	8005864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800157e:	4650      	mov	r0, sl
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	f004 f96d 	bl	8005864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	21c8      	movs	r1, #200	; 0xc8
 800158e:	4860      	ldr	r0, [pc, #384]	; (8001710 <MX_GPIO_Init+0x2b0>)
 8001590:	f004 f968 	bl	8005864 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001594:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001596:	a90d      	add	r1, sp, #52	; 0x34
 8001598:	485e      	ldr	r0, [pc, #376]	; (8001714 <MX_GPIO_Init+0x2b4>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800159a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f003 ff30 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80015a4:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	a90d      	add	r1, sp, #52	; 0x34
 80015aa:	485b      	ldr	r0, [pc, #364]	; (8001718 <MX_GPIO_Init+0x2b8>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80015ac:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015b6:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f003 ff23 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80015be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015c2:	a90d      	add	r1, sp, #52	; 0x34
 80015c4:	4855      	ldr	r0, [pc, #340]	; (800171c <MX_GPIO_Init+0x2bc>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80015c6:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f003 ff1a 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <MX_GPIO_Init+0x2c0>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80015d2:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80015d4:	a90d      	add	r1, sp, #52	; 0x34
 80015d6:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d8:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80015da:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80015de:	f003 ff11 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015e2:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e4:	a90d      	add	r1, sp, #52	; 0x34
 80015e6:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015ea:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f003 ff08 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80015f4:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f8:	a90d      	add	r1, sp, #52	; 0x34
 80015fa:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80015fe:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001604:	f003 fefe 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001608:	4a46      	ldr	r2, [pc, #280]	; (8001724 <MX_GPIO_Init+0x2c4>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800160a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800160e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001612:	4610      	mov	r0, r2
 8001614:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001616:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800161a:	f003 fef3 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800161e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001620:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001624:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001626:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800162a:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800162e:	f003 fee9 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001632:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001634:	a90d      	add	r1, sp, #52	; 0x34
 8001636:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001638:	930d      	str	r3, [sp, #52]	; 0x34
 800163a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001640:	f003 fee0 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001644:	f248 0104 	movw	r1, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001648:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800164c:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800164e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001652:	f003 fed7 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800165a:	a90d      	add	r1, sp, #52	; 0x34
 800165c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001660:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001666:	f003 fecd 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800166a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800166e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001670:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001672:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001674:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001678:	f003 fec4 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001680:	a90d      	add	r1, sp, #52	; 0x34
 8001682:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001686:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_GPIO_Init+0x2c0>)
 800168a:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800168c:	f003 feba 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001690:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001692:	a90d      	add	r1, sp, #52	; 0x34
 8001694:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800169a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016a0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f003 feae 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016a8:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016aa:	a90d      	add	r1, sp, #52	; 0x34
 80016ac:	4818      	ldr	r0, [pc, #96]	; (8001710 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016ae:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b6:	f003 fea5 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80016bc:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	4610      	mov	r0, r2
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80016c6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016cc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f003 fe98 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80016d4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80016d6:	a90d      	add	r1, sp, #52	; 0x34
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80016da:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f003 fe90 	bl	8005404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80016e4:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	a90d      	add	r1, sp, #52	; 0x34
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80016ea:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016f4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f003 fe84 	bl	8005404 <HAL_GPIO_Init>

}
 80016fc:	b013      	add	sp, #76	; 0x4c
 80016fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000
 8001708:	40023800 	.word	0x40023800
 800170c:	40022800 	.word	0x40022800
 8001710:	40021800 	.word	0x40021800
 8001714:	40021000 	.word	0x40021000
 8001718:	40020400 	.word	0x40020400
 800171c:	40022400 	.word	0x40022400
 8001720:	10120000 	.word	0x10120000
 8001724:	40020800 	.word	0x40020800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40021c00 	.word	0x40021c00

08001734 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001734:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x50>)
 800173c:	4912      	ldr	r1, [pc, #72]	; (8001788 <MX_I2C1_Init+0x54>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001740:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800174c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001750:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001752:	f004 fe73 	bl	800643c <HAL_I2C_Init>
 8001756:	b108      	cbz	r0, 800175c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001758:	f000 f9ea 	bl	8001b30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175c:	2100      	movs	r1, #0
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <MX_I2C1_Init+0x4c>)
 8001760:	f005 f8d8 	bl	8006914 <HAL_I2CEx_ConfigAnalogFilter>
 8001764:	b108      	cbz	r0, 800176a <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8001766:	f000 f9e3 	bl	8001b30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176a:	2100      	movs	r1, #0
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_I2C1_Init+0x4c>)
 800176e:	f005 f917 	bl	80069a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001772:	b118      	cbz	r0, 800177c <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 8001774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001778:	f000 b9da 	b.w	8001b30 <Error_Handler>
 800177c:	bd08      	pop	{r3, pc}
 800177e:	bf00      	nop
 8001780:	20029ce4 	.word	0x20029ce4
 8001784:	00c0eaff 	.word	0x00c0eaff
 8001788:	40005400 	.word	0x40005400

0800178c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800178c:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00C0EAFF;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C3_Init+0x50>)
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <MX_I2C3_Init+0x54>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001796:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001798:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017a2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017aa:	f004 fe47 	bl	800643c <HAL_I2C_Init>
 80017ae:	b108      	cbz	r0, 80017b4 <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 80017b0:	f000 f9be 	bl	8001b30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_I2C3_Init+0x4c>)
 80017b8:	f005 f8ac 	bl	8006914 <HAL_I2CEx_ConfigAnalogFilter>
 80017bc:	b108      	cbz	r0, 80017c2 <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 80017be:	f000 f9b7 	bl	8001b30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_I2C3_Init+0x4c>)
 80017c6:	f005 f8eb 	bl	80069a0 <HAL_I2CEx_ConfigDigitalFilter>
 80017ca:	b118      	cbz	r0, 80017d4 <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 80017cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017d0:	f000 b9ae 	b.w	8001b30 <Error_Handler>
 80017d4:	bd08      	pop	{r3, pc}
 80017d6:	bf00      	nop
 80017d8:	20029c98 	.word	0x20029c98
 80017dc:	00c0eaff 	.word	0x00c0eaff
 80017e0:	40005c00 	.word	0x40005c00

080017e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	2214      	movs	r2, #20
{
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	2100      	movs	r1, #0
 80017ee:	eb0d 0002 	add.w	r0, sp, r2
 80017f2:	f020 faaf 	bl	8021d54 <memset>
  if(i2cHandle->Instance==I2C1)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	4a25      	ldr	r2, [pc, #148]	; (8001890 <HAL_I2C_MspInit+0xac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d121      	bne.n	8001842 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4c25      	ldr	r4, [pc, #148]	; (8001894 <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	a905      	add	r1, sp, #20
 8001802:	4825      	ldr	r0, [pc, #148]	; (8001898 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	6323      	str	r3, [r4, #48]	; 0x30
 800180c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001820:	2301      	movs	r3, #1
 8001822:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001824:	2304      	movs	r3, #4
 8001826:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f003 fdec 	bl	8005404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800182e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001832:	6423      	str	r3, [r4, #64]	; 0x40
 8001834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800183e:	b00a      	add	sp, #40	; 0x28
 8001840:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <HAL_I2C_MspInit+0xb8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d1fa      	bne.n	800183e <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001848:	4c12      	ldr	r4, [pc, #72]	; (8001894 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800184a:	a905      	add	r1, sp, #20
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	6323      	str	r3, [r4, #48]	; 0x30
 8001856:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	9303      	str	r3, [sp, #12]
 800185e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001860:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001864:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001872:	2304      	movs	r3, #4
 8001874:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001876:	f003 fdc5 	bl	8005404 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800187a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001880:	6423      	str	r3, [r4, #64]	; 0x40
 8001882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	9b04      	ldr	r3, [sp, #16]
}
 800188c:	e7d7      	b.n	800183e <HAL_I2C_MspInit+0x5a>
 800188e:	bf00      	nop
 8001890:	40005400 	.word	0x40005400
 8001894:	40023800 	.word	0x40023800
 8001898:	40020400 	.word	0x40020400
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	40021c00 	.word	0x40021c00

080018a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 80018a4:	6803      	ldr	r3, [r0, #0]
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_I2C_MspDeInit+0x3c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d10a      	bne.n	80018c2 <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018ac:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 80018b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <HAL_I2C_MspDeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80018be:	f003 bef5 	b.w	80056ac <HAL_GPIO_DeInit>
  else if(i2cHandle->Instance==I2C3)
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_I2C_MspDeInit+0x44>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d109      	bne.n	80018dc <HAL_I2C_MspDeInit+0x38>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80018c8:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80018cc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80018d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	e7f0      	b.n	80018be <HAL_I2C_MspDeInit+0x1a>
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40005c00 	.word	0x40005c00
 80018ec:	40021c00 	.word	0x40021c00

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f4:	2230      	movs	r2, #48	; 0x30
 80018f6:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f8:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018fc:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f020 fa29 	bl	8021d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001902:	2214      	movs	r2, #20
 8001904:	2100      	movs	r1, #0
 8001906:	a802      	add	r0, sp, #8
 8001908:	f020 fa24 	bl	8021d54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	2100      	movs	r1, #0
 800190e:	2284      	movs	r2, #132	; 0x84
 8001910:	a813      	add	r0, sp, #76	; 0x4c
 8001912:	f020 fa1f 	bl	8021d54 <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2400      	movs	r4, #0
  HAL_PWR_EnableBkUpAccess();
 8001918:	f005 fc64 	bl	80071e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <SystemClock_Config+0xe8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <SystemClock_Config+0xec>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800193a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001942:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001944:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800194c:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001950:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001956:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001958:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 800195a:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800195e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001960:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001962:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001964:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001966:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	f005 fd56 	bl	8007418 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800196c:	f005 fc42 	bl	80071f4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001972:	2106      	movs	r1, #6
 8001974:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001978:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197c:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800197e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001984:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001986:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001988:	f005 ff82 	bl	8007890 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198e:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001990:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001992:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001994:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001996:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001998:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800199a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800199e:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80019a0:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80019a2:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80019a4:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80019a6:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80019a8:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80019aa:	961c      	str	r6, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80019ac:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80019b2:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019b4:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80019ba:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019bc:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80019be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019c2:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80019c4:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019c6:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019c8:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80019ca:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80019cc:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f006 f895 	bl	8007afc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80019d2:	b034      	add	sp, #208	; 0xd0
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
 80019e0:	01b14868 	.word	0x01b14868

080019e4 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init()
{
 80019e4:	b508      	push	{r3, lr}
  BSP_TS_Init(480, 272);
 80019e6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80019ea:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80019ee:	f002 fe13 	bl	8004618 <BSP_TS_Init>

  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <TouchTimer_Init+0x24>)
 80019f4:	f008 fc38 	bl	800a268 <HAL_TIM_Base_Init>
 80019f8:	b100      	cbz	r0, 80019fc <TouchTimer_Init+0x18>
 80019fa:	e7fe      	b.n	80019fa <TouchTimer_Init+0x16>
  {
    while(1);
  }
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TouchTimer_Init+0x24>)
 80019fe:	f008 fac1 	bl	8009f84 <HAL_TIM_Base_Start_IT>
 8001a02:	b100      	cbz	r0, 8001a06 <TouchTimer_Init+0x22>
 8001a04:	e7fe      	b.n	8001a04 <TouchTimer_Init+0x20>
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	2002a098 	.word	0x2002a098

08001a0c <PollTouchScreen2>:
    while(1);
  }
}

void PollTouchScreen2(void)
{
 8001a0c:	b500      	push	{lr}
 8001a0e:	b08f      	sub	sp, #60	; 0x3c
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8001a10:	a803      	add	r0, sp, #12
 8001a12:	f002 fe59 	bl	80046c8 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <PollTouchScreen2+0x5c>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a18:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a1c:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a1e:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a22:	4291      	cmp	r1, r2
 8001a24:	d01c      	beq.n	8001a60 <PollTouchScreen2+0x54>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8001a26:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8001a2a:	b121      	cbz	r1, 8001a36 <PollTouchScreen2+0x2a>
 8001a2c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001a30:	b10a      	cbz	r2, 8001a36 <PollTouchScreen2+0x2a>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8001a32:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8001a34:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8001a36:	2200      	movs	r2, #0
    TS_State.x = prev_state.touchX[0];
 8001a38:	8858      	ldrh	r0, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8001a3a:	899b      	ldrh	r3, [r3, #12]
    TS_State.Layer = 0;
 8001a3c:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.y = prev_state.touchY[0];
 8001a40:	9301      	str	r3, [sp, #4]
    TS_State.x = prev_state.touchX[0];
 8001a42:	9000      	str	r0, [sp, #0]

    dmc_putint((uint16_t)TS_State.x);
 8001a44:	f7ff fcc0 	bl	80013c8 <dmc_putint>
    dmc_putc(' ');
 8001a48:	2020      	movs	r0, #32
 8001a4a:	f7ff fcaf 	bl	80013ac <dmc_putc>
    dmc_putint((uint16_t)TS_State.y);
 8001a4e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001a52:	f7ff fcb9 	bl	80013c8 <dmc_putint>
    dmc_putcr();
 8001a56:	f7ff fcab 	bl	80013b0 <dmc_putcr>

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8001a5a:	4668      	mov	r0, sp
 8001a5c:	f014 fbc4 	bl	80161e8 <GUI_TOUCH_StoreStateEx>

  }
}
 8001a60:	b00f      	add	sp, #60	; 0x3c
 8001a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a66:	bf00      	nop
 8001a68:	20000514 	.word	0x20000514

08001a6c <main>:
{
 8001a6c:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a72:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <main+0xa8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a82:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a8c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a92:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001a96:	f002 fef5 	bl	8004884 <HAL_Init>
  SystemClock_Config();
 8001a9a:	f7ff ff29 	bl	80018f0 <SystemClock_Config>
  MX_GPIO_Init();
 8001a9e:	f7ff fcdf 	bl	8001460 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001aa2:	f7ff fad9 	bl	8001058 <MX_ADC3_Init>
  MX_CRC_Init();
 8001aa6:	f7ff fb4f 	bl	8001148 <MX_CRC_Init>
  MX_DCMI_Init();
 8001aaa:	f7ff fb7b 	bl	80011a4 <MX_DCMI_Init>
  MX_GFXSIMULATOR_Init();
 8001aae:	f7ff fcd5 	bl	800145c <MX_GFXSIMULATOR_Init>
  MX_I2C1_Init();
 8001ab2:	f7ff fe3f 	bl	8001734 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001ab6:	f7ff fe69 	bl	800178c <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8001aba:	f000 f83b 	bl	8001b34 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001abe:	f000 f8c5 	bl	8001c4c <MX_RTC_Init>
  MX_SAI2_Init();
 8001ac2:	f000 f945 	bl	8001d50 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001ac6:	f000 f9dd 	bl	8001e84 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001aca:	f000 fa37 	bl	8001f3c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001ace:	f000 fa7d 	bl	8001fcc <MX_SPI2_Init>
  MX_TIM1_Init();
 8001ad2:	f000 fcaf 	bl	8002434 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ad6:	f000 fd1d 	bl	8002514 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ada:	f000 fb63 	bl	80021a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ade:	f000 fd67 	bl	80025b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001ae2:	f000 fb91 	bl	8002208 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001ae6:	f000 fdb1 	bl	800264c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001aea:	f000 fddb 	bl	80026a4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001aee:	f000 fdf7 	bl	80026e0 <MX_USART6_UART_Init>
  TouchTimer_Init();
 8001af2:	f7ff ff77 	bl	80019e4 <TouchTimer_Init>
  printf("Hi\n");
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <main+0xac>)
 8001af8:	f020 fa3c 	bl	8021f74 <puts>
  GRAPHICS_HW_Init();
 8001afc:	f002 fa00 	bl	8003f00 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8001b00:	f002 fa0b 	bl	8003f1a <GRAPHICS_Init>
  MX_FREERTOS_Init();
 8001b04:	f7ff fc96 	bl	8001434 <MX_FREERTOS_Init>
  osKernelStart();
 8001b08:	f00b f91d 	bl	800cd46 <osKernelStart>
    PollTouchScreen2();
 8001b0c:	f7ff ff7e 	bl	8001a0c <PollTouchScreen2>
 8001b10:	e7fc      	b.n	8001b0c <main+0xa0>
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	0802aa00 	.word	0x0802aa00

08001b1c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d101      	bne.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b24:	f002 bec4 	b.w	80048b0 <HAL_IncTick>
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40001000 	.word	0x40001000

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	4770      	bx	lr

08001b32 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001b32:	4770      	bx	lr

08001b34 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001b34:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8001b38:	23ff      	movs	r3, #255	; 0xff
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <MX_QUADSPI_Init+0x34>)
 8001b3c:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001b40:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8001b42:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001b44:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
 8001b46:	6082      	str	r2, [r0, #8]
  hqspi.Init.FlashSize = 1;
 8001b48:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b4a:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b4c:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b4e:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b50:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b52:	f005 fbad 	bl	80072b0 <HAL_QSPI_Init>
 8001b56:	b118      	cbz	r0, 8001b60 <MX_QUADSPI_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b5c:	f7ff bfe8 	b.w	8001b30 <Error_Handler>
 8001b60:	bd08      	pop	{r3, pc}
 8001b62:	bf00      	nop
 8001b64:	20029d30 	.word	0x20029d30
 8001b68:	a0001000 	.word	0xa0001000

08001b6c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	2214      	movs	r2, #20
{
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	2100      	movs	r1, #0
 8001b78:	eb0d 0002 	add.w	r0, sp, r2
 8001b7c:	f020 f8ea 	bl	8021d54 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001b80:	6822      	ldr	r2, [r4, #0]
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_QSPI_MspInit+0xcc>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d153      	bne.n	8001c30 <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <HAL_QSPI_MspInit+0xd0>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b8e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001b92:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001b96:	a905      	add	r1, sp, #20
 8001b98:	4829      	ldr	r0, [pc, #164]	; (8001c40 <HAL_QSPI_MspInit+0xd4>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b9a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba4:	f002 0202 	and.w	r2, r2, #2
 8001ba8:	9201      	str	r2, [sp, #4]
 8001baa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	f042 0210 	orr.w	r2, r2, #16
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb6:	f002 0210 	and.w	r2, r2, #16
 8001bba:	9202      	str	r2, [sp, #8]
 8001bbc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	f042 0202 	orr.w	r2, r2, #2
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc8:	f002 0202 	and.w	r2, r2, #2
 8001bcc:	9203      	str	r2, [sp, #12]
 8001bce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bd2:	f042 0208 	orr.w	r2, r2, #8
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001bda:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bde:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	9304      	str	r3, [sp, #16]
 8001be8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bea:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f003 fc0a 	bl	8005404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001bf0:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	a905      	add	r1, sp, #20
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001bf6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bf8:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bfc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f003 fbff 	bl	8005404 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	a905      	add	r1, sp, #20
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c14:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f003 fbf5 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1e:	a905      	add	r1, sp, #20
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c2a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f003 fbea 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001c30:	b00a      	add	sp, #40	; 0x28
 8001c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c36:	bf00      	nop
 8001c38:	a0001000 	.word	0xa0001000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020c00 	.word	0x40020c00

08001c4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001c50:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 8001c52:	2218      	movs	r2, #24
 8001c54:	2100      	movs	r1, #0
 8001c56:	a801      	add	r0, sp, #4
 8001c58:	f020 f87c 	bl	8021d54 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001c5c:	222c      	movs	r2, #44	; 0x2c
 8001c5e:	4621      	mov	r1, r4
 8001c60:	a807      	add	r0, sp, #28
  RTC_DateTypeDef sDate = {0};
 8001c62:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001c64:	f020 f876 	bl	8021d54 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c68:	4830      	ldr	r0, [pc, #192]	; (8001d2c <MX_RTC_Init+0xe0>)
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <MX_RTC_Init+0xe4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c6c:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c6e:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c70:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c72:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8001c76:	237f      	movs	r3, #127	; 0x7f
 8001c78:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c7a:	23ff      	movs	r3, #255	; 0xff
 8001c7c:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c7e:	f006 fc03 	bl	8008488 <HAL_RTC_Init>
 8001c82:	b108      	cbz	r0, 8001c88 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001c84:	f7ff ff54 	bl	8001b30 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	a901      	add	r1, sp, #4
 8001c8c:	4827      	ldr	r0, [pc, #156]	; (8001d2c <MX_RTC_Init+0xe0>)
  sTime.Hours = 0x0;
 8001c8e:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8001c92:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8001c96:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c9a:	9405      	str	r4, [sp, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c9c:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c9e:	f006 fc89 	bl	80085b4 <HAL_RTC_SetTime>
 8001ca2:	b108      	cbz	r0, 8001ca8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001ca4:	f7ff ff44 	bl	8001b30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ca8:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8001caa:	2400      	movs	r4, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cac:	4669      	mov	r1, sp
 8001cae:	481f      	ldr	r0, [pc, #124]	; (8001d2c <MX_RTC_Init+0xe0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cb0:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cb4:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8001cb8:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8001cbc:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cc0:	f006 fd5e 	bl	8008780 <HAL_RTC_SetDate>
 8001cc4:	b108      	cbz	r0, 8001cca <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001cc6:	f7ff ff33 	bl	8001b30 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001cca:	f88d 401c 	strb.w	r4, [sp, #28]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 8001cce:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Minutes = 0x0;
 8001cd2:	f88d 401d 	strb.w	r4, [sp, #29]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cd6:	a907      	add	r1, sp, #28
  sAlarm.AlarmTime.Seconds = 0x0;
 8001cd8:	f88d 401e 	strb.w	r4, [sp, #30]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cdc:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cde:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ce0:	940c      	str	r4, [sp, #48]	; 0x30
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ce2:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ce4:	940e      	str	r4, [sp, #56]	; 0x38
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ce6:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ce8:	2401      	movs	r4, #1
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cea:	4810      	ldr	r0, [pc, #64]	; (8001d2c <MX_RTC_Init+0xe0>)
 8001cec:	4622      	mov	r2, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cee:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_A;
 8001cf2:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cf4:	f006 fdfc 	bl	80088f0 <HAL_RTC_SetAlarm>
 8001cf8:	b108      	cbz	r0, 8001cfe <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8001cfa:	f7ff ff19 	bl	8001b30 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_B;
 8001cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d02:	2201      	movs	r2, #1
 8001d04:	a907      	add	r1, sp, #28
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <MX_RTC_Init+0xe0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d08:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_B;
 8001d0c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d0e:	f006 fdef 	bl	80088f0 <HAL_RTC_SetAlarm>
 8001d12:	b108      	cbz	r0, 8001d18 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001d14:	f7ff ff0c 	bl	8001b30 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_RTC_Init+0xe0>)
 8001d1e:	f006 ff4b 	bl	8008bb8 <HAL_RTCEx_SetTimeStamp>
 8001d22:	b108      	cbz	r0, 8001d28 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8001d24:	f7ff ff04 	bl	8001b30 <Error_Handler>
  }

}
 8001d28:	b012      	add	sp, #72	; 0x48
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	20029d7c 	.word	0x20029d7c
 8001d30:	40002800 	.word	0x40002800

08001d34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001d34:	6802      	ldr	r2, [r0, #0]
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HAL_RTC_MspInit+0x14>)
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d104      	bne.n	8001d46 <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_RTC_MspInit+0x18>)
 8001d3e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4770      	bx	lr
 8001d48:	40002800 	.word	0x40002800
 8001d4c:	40023800 	.word	0x40023800

08001d50 <MX_SAI2_Init>:

/* SAI2 init function */
void MX_SAI2_Init(void)
{

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d50:	481e      	ldr	r0, [pc, #120]	; (8001dcc <MX_SAI2_Init+0x7c>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d52:	2240      	movs	r2, #64	; 0x40
{
 8001d54:	b508      	push	{r3, lr}
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d56:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d58:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <MX_SAI2_Init+0x80>)
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_SAI2_Init+0x84>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001d5c:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d5e:	2208      	movs	r2, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d60:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d62:	2300      	movs	r3, #0
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001d64:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d66:	2201      	movs	r2, #1
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d68:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d6a:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d6c:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d6e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d70:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d72:	6103      	str	r3, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d74:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d76:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d78:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d7a:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d7c:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001d80:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d82:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d84:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d86:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001d88:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d8a:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001d8c:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001d8e:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001d90:	f006 ff6c 	bl	8008c6c <HAL_SAI_Init>
 8001d94:	b108      	cbz	r0, 8001d9a <MX_SAI2_Init+0x4a>
  {
    Error_Handler();
 8001d96:	f7ff fecb 	bl	8001b30 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <MX_SAI2_Init+0x88>)
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001d9c:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_SAI2_Init+0x8c>)
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001da2:	61c2      	str	r2, [r0, #28]
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001da4:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001da6:	2304      	movs	r3, #4
 8001da8:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001daa:	2300      	movs	r3, #0
 8001dac:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dae:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001db0:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001db2:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001db4:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001db6:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001db8:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001dba:	f006 ff57 	bl	8008c6c <HAL_SAI_Init>
 8001dbe:	b118      	cbz	r0, 8001dc8 <MX_SAI2_Init+0x78>
  {
    Error_Handler();
  }

}
 8001dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dc4:	f7ff beb4 	b.w	8001b30 <Error_Handler>
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop
 8001dcc:	20029e20 	.word	0x20029e20
 8001dd0:	0002ee00 	.word	0x0002ee00
 8001dd4:	40015c04 	.word	0x40015c04
 8001dd8:	20029d9c 	.word	0x20029d9c
 8001ddc:	40015c24 	.word	0x40015c24

08001de0 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001de0:	6802      	ldr	r2, [r0, #0]
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_SAI_MspInit+0x8c>)
 8001de4:	429a      	cmp	r2, r3
{
 8001de6:	b510      	push	{r4, lr}
 8001de8:	4604      	mov	r4, r0
 8001dea:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8001dec:	d11b      	bne.n	8001e26 <HAL_SAI_MspInit+0x46>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_SAI_MspInit+0x90>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	b94a      	cbnz	r2, 8001e08 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001df4:	491f      	ldr	r1, [pc, #124]	; (8001e74 <HAL_SAI_MspInit+0x94>)
 8001df6:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001dfc:	6448      	str	r0, [r1, #68]	; 0x44
 8001dfe:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e00:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001e04:	9101      	str	r1, [sp, #4]
 8001e06:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 8001e08:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e0a:	a903      	add	r1, sp, #12
 8001e0c:	481a      	ldr	r0, [pc, #104]	; (8001e78 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 8001e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e10:	23f0      	movs	r3, #240	; 0xf0
 8001e12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e22:	f003 faef 	bl	8005404 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_SAI_MspInit+0x9c>)
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d11c      	bne.n	8001e68 <HAL_SAI_MspInit+0x88>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_SAI_MspInit+0x90>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	b94a      	cbnz	r2, 8001e48 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e34:	490f      	ldr	r1, [pc, #60]	; (8001e74 <HAL_SAI_MspInit+0x94>)
 8001e36:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001e3c:	6448      	str	r0, [r1, #68]	; 0x44
 8001e3e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e40:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001e44:	9102      	str	r1, [sp, #8]
 8001e46:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 8001e48:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	a903      	add	r1, sp, #12
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 8001e4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e60:	230a      	movs	r3, #10
 8001e62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f003 face 	bl	8005404 <HAL_GPIO_Init>

    }
}
 8001e68:	b008      	add	sp, #32
 8001e6a:	bd10      	pop	{r4, pc}
 8001e6c:	40015c04 	.word	0x40015c04
 8001e70:	20000540 	.word	0x20000540
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40022000 	.word	0x40022000
 8001e7c:	40015c24 	.word	0x40015c24
 8001e80:	40021800 	.word	0x40021800

08001e84 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <MX_SDMMC1_SD_Init+0x18>)
 8001e86:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <MX_SDMMC1_SD_Init+0x1c>)
 8001e88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001e8e:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e90:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001e92:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e94:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001e96:	619a      	str	r2, [r3, #24]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20029ea4 	.word	0x20029ea4
 8001ea0:	40012c00 	.word	0x40012c00

08001ea4 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	2214      	movs	r2, #20
 8001eac:	2100      	movs	r1, #0
 8001eae:	a803      	add	r0, sp, #12
 8001eb0:	f01f ff50 	bl	8021d54 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_SD_MspInit+0x8c>)
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d136      	bne.n	8001f2a <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ebc:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ec0:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec8:	eb0d 0104 	add.w	r1, sp, r4
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eda:	9200      	str	r2, [sp, #0]
 8001edc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee0:	f042 0204 	orr.w	r2, r2, #4
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ee8:	f002 0204 	and.w	r2, r2, #4
 8001eec:	9201      	str	r2, [sp, #4]
 8001eee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef2:	f042 0208 	orr.w	r2, r2, #8
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f02:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001f08:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f0c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	f003 fa79 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f12:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f14:	eb0d 0104 	add.w	r1, sp, r4
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f24:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f003 fa6d 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001f2a:	b008      	add	sp, #32
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
 8001f2e:	bf00      	nop
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00

08001f3c <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001f3c:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <MX_SPDIFRX_Init+0x30>)
 8001f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f44:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001f4a:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001f4c:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001f4e:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001f50:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001f52:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001f54:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001f56:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001f58:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001f5a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001f5c:	f007 fd58 	bl	8009a10 <HAL_SPDIFRX_Init>
 8001f60:	b118      	cbz	r0, 8001f6a <MX_SPDIFRX_Init+0x2e>
  {
    Error_Handler();
  }

}
 8001f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f66:	f7ff bde3 	b.w	8001b30 <Error_Handler>
 8001f6a:	bd08      	pop	{r3, pc}
 8001f6c:	20029f28 	.word	0x20029f28

08001f70 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	2214      	movs	r2, #20
 8001f78:	2100      	movs	r1, #0
 8001f7a:	a803      	add	r0, sp, #12
 8001f7c:	f01f feea 	bl	8021d54 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f86:	d11d      	bne.n	8001fc4 <HAL_SPDIFRX_MspInit+0x54>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f88:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	a903      	add	r1, sp, #12
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_SPDIFRX_MspInit+0x58>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001f9e:	9201      	str	r2, [sp, #4]
 8001fa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa4:	f042 0208 	orr.w	r2, r2, #8
 8001fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f003 fa20 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001fc4:	b008      	add	sp, #32
 8001fc6:	bd10      	pop	{r4, pc}
 8001fc8:	40020c00 	.word	0x40020c00

08001fcc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fcc:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8001fce:	4810      	ldr	r0, [pc, #64]	; (8002010 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fd0:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fd4:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <MX_SPI2_Init+0x48>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fda:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fe0:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fe4:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8001fe8:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fea:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fec:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fee:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff0:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ff8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffa:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8001ffc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ffe:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002000:	f007 fd94 	bl	8009b2c <HAL_SPI_Init>
 8002004:	b118      	cbz	r0, 800200e <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 8002006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800200a:	f7ff bd91 	b.w	8001b30 <Error_Handler>
 800200e:	bd08      	pop	{r3, pc}
 8002010:	20029f74 	.word	0x20029f74
 8002014:	40003800 	.word	0x40003800

08002018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002018:	b530      	push	{r4, r5, lr}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	2214      	movs	r2, #20
 8002020:	2100      	movs	r1, #0
 8002022:	a803      	add	r0, sp, #12
 8002024:	f01f fe96 	bl	8021d54 <memset>
  if(spiHandle->Instance==SPI2)
 8002028:	6822      	ldr	r2, [r4, #0]
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_SPI_MspInit+0x80>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d131      	bne.n	8002094 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002030:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002034:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002036:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002038:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 800203a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800203c:	4817      	ldr	r0, [pc, #92]	; (800209c <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800203e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
 8002044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002046:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800204a:	9200      	str	r2, [sp, #0]
 800204c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800204e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800205c:	9201      	str	r2, [sp, #4]
 800205e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	f042 0202 	orr.w	r2, r2, #2
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800206a:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002072:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002078:	f003 f9c4 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800207c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	a903      	add	r1, sp, #12
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002084:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f003 f9b8 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002094:	b009      	add	sp, #36	; 0x24
 8002096:	bd30      	pop	{r4, r5, pc}
 8002098:	40003800 	.word	0x40003800
 800209c:	40022000 	.word	0x40022000
 80020a0:	40020400 	.word	0x40020400

080020a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_MspInit+0x3c>)
{
 80020a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020aa:	210f      	movs	r1, #15
 80020ac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
 80020b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80020bc:	9200      	str	r2, [sp, #0]
 80020be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020c6:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020c8:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020d4:	f002 fe26 	bl	8004d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d8:	b003      	add	sp, #12
 80020da:	f85d fb04 	ldr.w	pc, [sp], #4
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020e6:	4601      	mov	r1, r0
{
 80020e8:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80020ea:	2200      	movs	r2, #0
 80020ec:	2036      	movs	r0, #54	; 0x36
 80020ee:	f002 fe19 	bl	8004d24 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80020f2:	2036      	movs	r0, #54	; 0x36
 80020f4:	f002 fe5e 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020fa:	a901      	add	r1, sp, #4
 80020fc:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002100:	4c13      	ldr	r4, [pc, #76]	; (8002150 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002102:	f042 0210 	orr.w	r2, r2, #16
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002112:	f005 fcd5 	bl	8007ac0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002116:	f005 fcb3 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800211c:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800211e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002120:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002124:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_InitTick+0x74>)
 8002128:	fbb0 f0f3 	udiv	r0, r0, r3
 800212c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800212e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8002130:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002132:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002134:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002138:	f008 f896 	bl	800a268 <HAL_TIM_Base_Init>
 800213c:	b920      	cbnz	r0, 8002148 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800213e:	4620      	mov	r0, r4
 8002140:	f007 ff20 	bl	8009f84 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002144:	b008      	add	sp, #32
 8002146:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
 800214a:	e7fb      	b.n	8002144 <HAL_InitTick+0x60>
 800214c:	40023800 	.word	0x40023800
 8002150:	20029fd8 	.word	0x20029fd8
 8002154:	40001000 	.word	0x40001000
 8002158:	000f4240 	.word	0x000f4240

0800215c <NMI_Handler>:
 800215c:	4770      	bx	lr

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	e7fe      	b.n	800215e <HardFault_Handler>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	e7fe      	b.n	8002160 <MemManage_Handler>

08002162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler>

08002166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002166:	4770      	bx	lr

08002168 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002168:	4801      	ldr	r0, [pc, #4]	; (8002170 <TIM3_IRQHandler+0x8>)
 800216a:	f007 bf67 	b.w	800a03c <HAL_TIM_IRQHandler>
 800216e:	bf00      	nop
 8002170:	2002a098 	.word	0x2002a098

08002174 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002174:	4801      	ldr	r0, [pc, #4]	; (800217c <TIM6_DAC_IRQHandler+0x8>)
 8002176:	f007 bf61 	b.w	800a03c <HAL_TIM_IRQHandler>
 800217a:	bf00      	nop
 800217c:	20029fd8 	.word	0x20029fd8

08002180 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002180:	4801      	ldr	r0, [pc, #4]	; (8002188 <OTG_FS_IRQHandler+0x8>)
 8002182:	f003 bc8b 	b.w	8005a9c <HAL_HCD_IRQHandler>
 8002186:	bf00      	nop
 8002188:	2002abf8 	.word	0x2002abf8

0800218c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800218c:	4801      	ldr	r0, [pc, #4]	; (8002194 <LTDC_IRQHandler+0x8>)
 800218e:	f004 bdb9 	b.w	8006d04 <HAL_LTDC_IRQHandler>
 8002192:	bf00      	nop
 8002194:	2002a704 	.word	0x2002a704

08002198 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002198:	4801      	ldr	r0, [pc, #4]	; (80021a0 <DMA2D_IRQHandler+0x8>)
 800219a:	f003 b82f 	b.w	80051fc <HAL_DMA2D_IRQHandler>
 800219e:	bf00      	nop
 80021a0:	2002a7ac 	.word	0x2002a7ac

080021a4 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021a4:	b510      	push	{r4, lr}
 80021a6:	b088      	sub	sp, #32
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021a8:	2214      	movs	r2, #20
 80021aa:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021ae:	a803      	add	r0, sp, #12
 80021b0:	f01f fdd0 	bl	8021d54 <memset>

  htim3.Instance = TIM3;
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <MX_TIM3_Init+0x5c>)
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_TIM3_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	9400      	str	r4, [sp, #0]
 80021ba:	9401      	str	r4, [sp, #4]
 80021bc:	9402      	str	r4, [sp, #8]
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 80021c0:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c2:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 0;
 80021c6:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021ca:	f008 f84d 	bl	800a268 <HAL_TIM_Base_Init>
 80021ce:	b108      	cbz	r0, 80021d4 <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 80021d0:	f7ff fcae 	bl	8001b30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021d4:	2304      	movs	r3, #4
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80021d6:	a903      	add	r1, sp, #12
 80021d8:	4809      	ldr	r0, [pc, #36]	; (8002200 <MX_TIM3_Init+0x5c>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021da:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80021dc:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80021de:	f008 fee5 	bl	800afac <HAL_TIM_SlaveConfigSynchro>
 80021e2:	b108      	cbz	r0, 80021e8 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 80021e4:	f7ff fca4 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ea:	4669      	mov	r1, sp
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_TIM3_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f2:	f008 ff41 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 80021f6:	b108      	cbz	r0, 80021fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021f8:	f7ff fc9a 	bl	8001b30 <Error_Handler>
  }

}
 80021fc:	b008      	add	sp, #32
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	2002a098 	.word	0x2002a098
 8002204:	40000400 	.word	0x40000400

08002208 <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002208:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	2210      	movs	r2, #16
{
 800220c:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	2100      	movs	r1, #0
 8002210:	eb0d 0002 	add.w	r0, sp, r2
 8002214:	f01f fd9e 	bl	8021d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	2300      	movs	r3, #0

  htim8.Instance = TIM8;
 800221a:	4814      	ldr	r0, [pc, #80]	; (800226c <MX_TIM8_Init+0x64>)
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <MX_TIM8_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	9303      	str	r3, [sp, #12]
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 8002226:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002228:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 800222a:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	6183      	str	r3, [r0, #24]
  htim8.Init.Prescaler = 0;
 800222e:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002232:	f008 f819 	bl	800a268 <HAL_TIM_Base_Init>
 8002236:	b108      	cbz	r0, 800223c <MX_TIM8_Init+0x34>
  {
    Error_Handler();
 8002238:	f7ff fc7a 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002240:	a904      	add	r1, sp, #16
 8002242:	480a      	ldr	r0, [pc, #40]	; (800226c <MX_TIM8_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002244:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002246:	f008 faef 	bl	800a828 <HAL_TIM_ConfigClockSource>
 800224a:	b108      	cbz	r0, 8002250 <MX_TIM8_Init+0x48>
  {
    Error_Handler();
 800224c:	f7ff fc70 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002250:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002252:	a901      	add	r1, sp, #4
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_TIM8_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002256:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002258:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800225c:	f008 ff0c 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 8002260:	b108      	cbz	r0, 8002266 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 8002262:	f7ff fc65 	bl	8001b30 <Error_Handler>
  }

}
 8002266:	b009      	add	sp, #36	; 0x24
 8002268:	f85d fb04 	ldr.w	pc, [sp], #4
 800226c:	2002a018 	.word	0x2002a018
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8002274:	6803      	ldr	r3, [r0, #0]
{
 8002276:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 8002278:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_TIM_Base_MspInit+0xa8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10b      	bne.n	8002296 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_TIM_Base_MspInit+0xac>)
 8002280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002292:	b006      	add	sp, #24
 8002294:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d10b      	bne.n	80022b4 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800229c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
 80022b2:	e7ee      	b.n	8002292 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_TIM_Base_MspInit+0xb0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d113      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x6e>
      __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_TIM_Base_MspInit+0xac>)
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	f042 0202 	orr.w	r2, r2, #2
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
 80022c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c6:	f002 0202 	and.w	r2, r2, #2
 80022ca:	9202      	str	r2, [sp, #8]
 80022cc:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d0:	f042 0202 	orr.w	r2, r2, #2
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	9b03      	ldr	r3, [sp, #12]
 80022e0:	e7d7      	b.n	8002292 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM5)
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_TIM_Base_MspInit+0xb4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d10a      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_TIM_Base_MspInit+0xac>)
 80022ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ec:	f042 0208 	orr.w	r2, r2, #8
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	9304      	str	r3, [sp, #16]
 80022fa:	9b04      	ldr	r3, [sp, #16]
 80022fc:	e7c9      	b.n	8002292 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM8)
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_TIM_Base_MspInit+0xb8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d1c6      	bne.n	8002292 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_TIM_Base_MspInit+0xac>)
 8002306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002308:	f042 0202 	orr.w	r2, r2, #2
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	9305      	str	r3, [sp, #20]
 8002316:	9b05      	ldr	r3, [sp, #20]
}
 8002318:	e7bb      	b.n	8002292 <HAL_TIM_Base_MspInit+0x1e>
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40023800 	.word	0x40023800
 8002324:	40000400 	.word	0x40000400
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM12)
 8002330:	6802      	ldr	r2, [r0, #0]
{
 8002332:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM12)
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_TIM_PWM_MspInit+0x24>)
 8002336:	429a      	cmp	r2, r3
 8002338:	d10a      	bne.n	8002350 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800233a:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 800233e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002350:	b002      	add	sp, #8
 8002352:	4770      	bx	lr
 8002354:	40001800 	.word	0x40001800

08002358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002358:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	2214      	movs	r2, #20
{
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	2100      	movs	r1, #0
 8002362:	eb0d 0002 	add.w	r0, sp, r2
 8002366:	f01f fcf5 	bl	8021d54 <memset>
  if(timHandle->Instance==TIM1)
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <HAL_TIM_MspPostInit+0xc0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d116      	bne.n	80023a0 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_TIM_MspPostInit+0xc4>)
 8002374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800238a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800238e:	a905      	add	r1, sp, #20
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002394:	2301      	movs	r3, #1
 8002396:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002398:	f003 f834 	bl	8005404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800239c:	b00a      	add	sp, #40	; 0x28
 800239e:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d10d      	bne.n	80023c2 <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80023bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c0:	e7e3      	b.n	800238a <HAL_TIM_MspPostInit+0x32>
  else if(timHandle->Instance==TIM5)
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_TIM_MspPostInit+0xcc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d111      	bne.n	80023ec <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80023ca:	a905      	add	r1, sp, #20
 80023cc:	4816      	ldr	r0, [pc, #88]	; (8002428 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80023e0:	2301      	movs	r3, #1
 80023e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023e8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ea:	e7d5      	b.n	8002398 <HAL_TIM_MspPostInit+0x40>
  else if(timHandle->Instance==TIM12)
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_TIM_MspPostInit+0xd4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d1d4      	bne.n	800239c <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80023f4:	a905      	add	r1, sp, #20
 80023f6:	480e      	ldr	r0, [pc, #56]	; (8002430 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800240a:	2340      	movs	r3, #64	; 0x40
 800240c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002412:	2309      	movs	r3, #9
 8002414:	9309      	str	r3, [sp, #36]	; 0x24
 8002416:	e7bf      	b.n	8002398 <HAL_TIM_MspPostInit+0x40>
 8002418:	40010000 	.word	0x40010000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020000 	.word	0x40020000
 8002424:	40000c00 	.word	0x40000c00
 8002428:	40022000 	.word	0x40022000
 800242c:	40001800 	.word	0x40001800
 8002430:	40021c00 	.word	0x40021c00

08002434 <MX_TIM1_Init>:
{
 8002434:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	2210      	movs	r2, #16
{
 8002438:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243a:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243c:	2100      	movs	r1, #0
 800243e:	eb0d 0002 	add.w	r0, sp, r2
 8002442:	f01f fc87 	bl	8021d54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002446:	221c      	movs	r2, #28
 8002448:	4621      	mov	r1, r4
 800244a:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	9401      	str	r4, [sp, #4]
 800244e:	9402      	str	r4, [sp, #8]
 8002450:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	f01f fc7f 	bl	8021d54 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002456:	222c      	movs	r2, #44	; 0x2c
 8002458:	4621      	mov	r1, r4
 800245a:	a80f      	add	r0, sp, #60	; 0x3c
 800245c:	f01f fc7a 	bl	8021d54 <memset>
  htim1.Instance = TIM1;
 8002460:	482a      	ldr	r0, [pc, #168]	; (800250c <MX_TIM1_Init+0xd8>)
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002464:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 8002466:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800246a:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 0;
 800246e:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002472:	f007 fef9 	bl	800a268 <HAL_TIM_Base_Init>
 8002476:	b108      	cbz	r0, 800247c <MX_TIM1_Init+0x48>
    Error_Handler();
 8002478:	f7ff fb5a 	bl	8001b30 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002480:	a904      	add	r1, sp, #16
 8002482:	4822      	ldr	r0, [pc, #136]	; (800250c <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002484:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002486:	f008 f9cf 	bl	800a828 <HAL_TIM_ConfigClockSource>
 800248a:	b108      	cbz	r0, 8002490 <MX_TIM1_Init+0x5c>
    Error_Handler();
 800248c:	f7ff fb50 	bl	8001b30 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002490:	481e      	ldr	r0, [pc, #120]	; (800250c <MX_TIM1_Init+0xd8>)
 8002492:	f007 ff69 	bl	800a368 <HAL_TIM_PWM_Init>
 8002496:	b108      	cbz	r0, 800249c <MX_TIM1_Init+0x68>
    Error_Handler();
 8002498:	f7ff fb4a 	bl	8001b30 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249c:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800249e:	a901      	add	r1, sp, #4
 80024a0:	481a      	ldr	r0, [pc, #104]	; (800250c <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a2:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024a4:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a6:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a8:	f008 fde6 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	b108      	cbz	r0, 80024b2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 80024ae:	f7ff fb3f 	bl	8001b30 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b4:	2200      	movs	r2, #0
 80024b6:	a908      	add	r1, sp, #32
 80024b8:	4814      	ldr	r0, [pc, #80]	; (800250c <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ba:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 80024bc:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024be:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c2:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c4:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c6:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	f008 f82a 	bl	800a520 <HAL_TIM_PWM_ConfigChannel>
 80024cc:	b108      	cbz	r0, 80024d2 <MX_TIM1_Init+0x9e>
    Error_Handler();
 80024ce:	f7ff fb2f 	bl	8001b30 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d6:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d8:	a90f      	add	r1, sp, #60	; 0x3c
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024dc:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024e2:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e4:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e6:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e8:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ea:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ec:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024ee:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024f0:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024f2:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f4:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024f6:	f008 fe3b 	bl	800b170 <HAL_TIMEx_ConfigBreakDeadTime>
 80024fa:	b108      	cbz	r0, 8002500 <MX_TIM1_Init+0xcc>
    Error_Handler();
 80024fc:	f7ff fb18 	bl	8001b30 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <MX_TIM1_Init+0xd8>)
 8002502:	f7ff ff29 	bl	8002358 <HAL_TIM_MspPostInit>
}
 8002506:	b01a      	add	sp, #104	; 0x68
 8002508:	bd10      	pop	{r4, pc}
 800250a:	bf00      	nop
 800250c:	2002a0d8 	.word	0x2002a0d8
 8002510:	40010000 	.word	0x40010000

08002514 <MX_TIM2_Init>:
{
 8002514:	b510      	push	{r4, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002518:	2210      	movs	r2, #16
 800251a:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	a803      	add	r0, sp, #12
 8002520:	f01f fc18 	bl	8021d54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002524:	221c      	movs	r2, #28
 8002526:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252a:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252e:	9401      	str	r4, [sp, #4]
 8002530:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002532:	f01f fc0f 	bl	8021d54 <memset>
  htim2.Instance = TIM2;
 8002536:	481d      	ldr	r0, [pc, #116]	; (80025ac <MX_TIM2_Init+0x98>)
 8002538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 800253e:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	6184      	str	r4, [r0, #24]
  htim2.Init.Prescaler = 0;
 8002544:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002548:	f007 fe8e 	bl	800a268 <HAL_TIM_Base_Init>
 800254c:	b108      	cbz	r0, 8002552 <MX_TIM2_Init+0x3e>
    Error_Handler();
 800254e:	f7ff faef 	bl	8001b30 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002556:	a903      	add	r1, sp, #12
 8002558:	4814      	ldr	r0, [pc, #80]	; (80025ac <MX_TIM2_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800255c:	f008 f964 	bl	800a828 <HAL_TIM_ConfigClockSource>
 8002560:	b108      	cbz	r0, 8002566 <MX_TIM2_Init+0x52>
    Error_Handler();
 8002562:	f7ff fae5 	bl	8001b30 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002566:	4811      	ldr	r0, [pc, #68]	; (80025ac <MX_TIM2_Init+0x98>)
 8002568:	f007 fefe 	bl	800a368 <HAL_TIM_PWM_Init>
 800256c:	b108      	cbz	r0, 8002572 <MX_TIM2_Init+0x5e>
    Error_Handler();
 800256e:	f7ff fadf 	bl	8001b30 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002572:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002574:	4669      	mov	r1, sp
 8002576:	480d      	ldr	r0, [pc, #52]	; (80025ac <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002578:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800257c:	f008 fd7c 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	b108      	cbz	r0, 8002586 <MX_TIM2_Init+0x72>
    Error_Handler();
 8002582:	f7ff fad5 	bl	8001b30 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002588:	2200      	movs	r2, #0
 800258a:	a907      	add	r1, sp, #28
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <MX_TIM2_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800258e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002590:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002592:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002594:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002596:	f007 ffc3 	bl	800a520 <HAL_TIM_PWM_ConfigChannel>
 800259a:	b108      	cbz	r0, 80025a0 <MX_TIM2_Init+0x8c>
    Error_Handler();
 800259c:	f7ff fac8 	bl	8001b30 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <MX_TIM2_Init+0x98>)
 80025a2:	f7ff fed9 	bl	8002358 <HAL_TIM_MspPostInit>
}
 80025a6:	b00e      	add	sp, #56	; 0x38
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	bf00      	nop
 80025ac:	2002a118 	.word	0x2002a118

080025b0 <MX_TIM5_Init>:
{
 80025b0:	b510      	push	{r4, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b4:	2210      	movs	r2, #16
 80025b6:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ba:	a803      	add	r0, sp, #12
 80025bc:	f01f fbca 	bl	8021d54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c0:	221c      	movs	r2, #28
 80025c2:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c6:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	9401      	str	r4, [sp, #4]
 80025cc:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ce:	f01f fbc1 	bl	8021d54 <memset>
  htim5.Instance = TIM5;
 80025d2:	481c      	ldr	r0, [pc, #112]	; (8002644 <MX_TIM5_Init+0x94>)
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <MX_TIM5_Init+0x98>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 80025d8:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025da:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025dc:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 0;
 80025de:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025e2:	f007 fe41 	bl	800a268 <HAL_TIM_Base_Init>
 80025e6:	b108      	cbz	r0, 80025ec <MX_TIM5_Init+0x3c>
    Error_Handler();
 80025e8:	f7ff faa2 	bl	8001b30 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025f0:	a903      	add	r1, sp, #12
 80025f2:	4814      	ldr	r0, [pc, #80]	; (8002644 <MX_TIM5_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025f6:	f008 f917 	bl	800a828 <HAL_TIM_ConfigClockSource>
 80025fa:	b108      	cbz	r0, 8002600 <MX_TIM5_Init+0x50>
    Error_Handler();
 80025fc:	f7ff fa98 	bl	8001b30 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002600:	4810      	ldr	r0, [pc, #64]	; (8002644 <MX_TIM5_Init+0x94>)
 8002602:	f007 feb1 	bl	800a368 <HAL_TIM_PWM_Init>
 8002606:	b108      	cbz	r0, 800260c <MX_TIM5_Init+0x5c>
    Error_Handler();
 8002608:	f7ff fa92 	bl	8001b30 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800260c:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800260e:	4669      	mov	r1, sp
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_TIM5_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002612:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002614:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002616:	f008 fd2f 	bl	800b078 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	b108      	cbz	r0, 8002620 <MX_TIM5_Init+0x70>
    Error_Handler();
 800261c:	f7ff fa88 	bl	8001b30 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002620:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002622:	220c      	movs	r2, #12
 8002624:	a907      	add	r1, sp, #28
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <MX_TIM5_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002628:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 800262a:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002630:	f007 ff76 	bl	800a520 <HAL_TIM_PWM_ConfigChannel>
 8002634:	b108      	cbz	r0, 800263a <MX_TIM5_Init+0x8a>
    Error_Handler();
 8002636:	f7ff fa7b 	bl	8001b30 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 800263a:	4802      	ldr	r0, [pc, #8]	; (8002644 <MX_TIM5_Init+0x94>)
 800263c:	f7ff fe8c 	bl	8002358 <HAL_TIM_MspPostInit>
}
 8002640:	b00e      	add	sp, #56	; 0x38
 8002642:	bd10      	pop	{r4, pc}
 8002644:	2002a058 	.word	0x2002a058
 8002648:	40000c00 	.word	0x40000c00

0800264c <MX_TIM12_Init>:
{
 800264c:	b510      	push	{r4, lr}
 800264e:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002650:	221c      	movs	r2, #28
 8002652:	2100      	movs	r1, #0
  htim12.Init.Prescaler = 0;
 8002654:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002656:	a801      	add	r0, sp, #4
 8002658:	f01f fb7c 	bl	8021d54 <memset>
  htim12.Instance = TIM12;
 800265c:	480f      	ldr	r0, [pc, #60]	; (800269c <MX_TIM12_Init+0x50>)
  htim12.Init.Prescaler = 0;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_TIM12_Init+0x54>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	6084      	str	r4, [r0, #8]
  htim12.Init.Period = 0;
 8002662:	60c4      	str	r4, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	6104      	str	r4, [r0, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002666:	6184      	str	r4, [r0, #24]
  htim12.Init.Prescaler = 0;
 8002668:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800266c:	f007 fe7c 	bl	800a368 <HAL_TIM_PWM_Init>
 8002670:	b108      	cbz	r0, 8002676 <MX_TIM12_Init+0x2a>
    Error_Handler();
 8002672:	f7ff fa5d 	bl	8001b30 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002676:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002678:	2200      	movs	r2, #0
 800267a:	a901      	add	r1, sp, #4
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_TIM12_Init+0x50>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800267e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002680:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002682:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002684:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002686:	f007 ff4b 	bl	800a520 <HAL_TIM_PWM_ConfigChannel>
 800268a:	b108      	cbz	r0, 8002690 <MX_TIM12_Init+0x44>
    Error_Handler();
 800268c:	f7ff fa50 	bl	8001b30 <Error_Handler>
  HAL_TIM_MspPostInit(&htim12);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <MX_TIM12_Init+0x50>)
 8002692:	f7ff fe61 	bl	8002358 <HAL_TIM_MspPostInit>
}
 8002696:	b008      	add	sp, #32
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	2002a158 	.word	0x2002a158
 80026a0:	40001800 	.word	0x40001800

080026a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026a4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80026a6:	480c      	ldr	r0, [pc, #48]	; (80026d8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80026a8:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ae:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80026b0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026bc:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026c2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c6:	f009 f993 	bl	800b9f0 <HAL_UART_Init>
 80026ca:	b118      	cbz	r0, 80026d4 <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80026cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80026d0:	f7ff ba2e 	b.w	8001b30 <Error_Handler>
 80026d4:	bd08      	pop	{r3, pc}
 80026d6:	bf00      	nop
 80026d8:	2002a198 	.word	0x2002a198
 80026dc:	40011000 	.word	0x40011000

080026e0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80026e0:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 80026e2:	480c      	ldr	r0, [pc, #48]	; (8002714 <MX_USART6_UART_Init+0x34>)
  huart6.Init.BaudRate = 115200;
 80026e4:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MX_USART6_UART_Init+0x38>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026ea:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 80026ec:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026f0:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026f2:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026f4:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026f6:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026f8:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fe:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002700:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002702:	f009 f975 	bl	800b9f0 <HAL_UART_Init>
 8002706:	b118      	cbz	r0, 8002710 <MX_USART6_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800270c:	f7ff ba10 	b.w	8001b30 <Error_Handler>
 8002710:	bd08      	pop	{r3, pc}
 8002712:	bf00      	nop
 8002714:	2002a218 	.word	0x2002a218
 8002718:	40011400 	.word	0x40011400

0800271c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800271c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	2214      	movs	r2, #20
{
 8002720:	b08b      	sub	sp, #44	; 0x2c
 8002722:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	2100      	movs	r1, #0
 8002726:	eb0d 0002 	add.w	r0, sp, r2
 800272a:	f01f fb13 	bl	8021d54 <memset>
  if(uartHandle->Instance==USART1)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d133      	bne.n	800279e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800273a:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800273c:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 800273e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002740:	4829      	ldr	r0, [pc, #164]	; (80027e8 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002742:	f042 0210 	orr.w	r2, r2, #16
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
 8002748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274a:	f002 0210 	and.w	r2, r2, #16
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002754:	f042 0202 	orr.w	r2, r2, #2
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
 800275a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275c:	f002 0202 	and.w	r2, r2, #2
 8002760:	9201      	str	r2, [sp, #4]
 8002762:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800277e:	f002 fe41 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002782:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002786:	a905      	add	r1, sp, #20
 8002788:	4818      	ldr	r0, [pc, #96]	; (80027ec <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800278a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002794:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002796:	f002 fe35 	bl	8005404 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800279a:	b00b      	add	sp, #44	; 0x2c
 800279c:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART6)
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <HAL_UART_MspInit+0xd4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d1fa      	bne.n	800279a <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	a905      	add	r1, sp, #20
 80027a8:	4812      	ldr	r0, [pc, #72]	; (80027f4 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80027aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
 80027b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b4:	f002 0220 	and.w	r2, r2, #32
 80027b8:	9203      	str	r2, [sp, #12]
 80027ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027be:	f042 0204 	orr.w	r2, r2, #4
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	9304      	str	r3, [sp, #16]
 80027cc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027da:	2308      	movs	r3, #8
 80027dc:	9309      	str	r3, [sp, #36]	; 0x24
 80027de:	e7da      	b.n	8002796 <HAL_UART_MspInit+0x7a>
 80027e0:	40011000 	.word	0x40011000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40020800 	.word	0x40020800

080027f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80027f8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80027fa:	4903      	ldr	r1, [pc, #12]	; (8002808 <MX_FATFS_Init+0x10>)
 80027fc:	4803      	ldr	r0, [pc, #12]	; (800280c <MX_FATFS_Init+0x14>)
 80027fe:	f00a fa9f 	bl	800cd40 <FATFS_LinkDriver>
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <MX_FATFS_Init+0x18>)
 8002804:	7018      	strb	r0, [r3, #0]
 8002806:	bd08      	pop	{r3, pc}
 8002808:	2002a299 	.word	0x2002a299
 800280c:	0802aa04 	.word	0x0802aa04
 8002810:	2002a298 	.word	0x2002a298

08002814 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8002814:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8002816:	4613      	mov	r3, r2
 8002818:	460a      	mov	r2, r1
 800281a:	4601      	mov	r1, r0
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <BSP_SD_ReadBlocks_DMA+0x18>)
 800281e:	f006 fc7d 	bl	800911c <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8002822:	3000      	adds	r0, #0
 8002824:	bf18      	it	ne
 8002826:	2001      	movne	r0, #1
 8002828:	bd08      	pop	{r3, pc}
 800282a:	bf00      	nop
 800282c:	20029ea4 	.word	0x20029ea4

08002830 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8002830:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8002832:	4613      	mov	r3, r2
 8002834:	460a      	mov	r2, r1
 8002836:	4601      	mov	r1, r0
 8002838:	4803      	ldr	r0, [pc, #12]	; (8002848 <BSP_SD_WriteBlocks_DMA+0x18>)
 800283a:	f006 fcf1 	bl	8009220 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 800283e:	3000      	adds	r0, #0
 8002840:	bf18      	it	ne
 8002842:	2001      	movne	r0, #1
 8002844:	bd08      	pop	{r3, pc}
 8002846:	bf00      	nop
 8002848:	20029ea4 	.word	0x20029ea4

0800284c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800284c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800284e:	4803      	ldr	r0, [pc, #12]	; (800285c <BSP_SD_GetCardState+0x10>)
 8002850:	f007 f852 	bl	80098f8 <HAL_SD_GetCardState>
}
 8002854:	3804      	subs	r0, #4
 8002856:	bf18      	it	ne
 8002858:	2001      	movne	r0, #1
 800285a:	bd08      	pop	{r3, pc}
 800285c:	20029ea4 	.word	0x20029ea4

08002860 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8002860:	4601      	mov	r1, r0
 8002862:	4801      	ldr	r0, [pc, #4]	; (8002868 <BSP_SD_GetCardInfo+0x8>)
 8002864:	f006 bfac 	b.w	80097c0 <HAL_SD_GetCardInfo>
 8002868:	20029ea4 	.word	0x20029ea4

0800286c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800286c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800286e:	f000 f957 	bl	8002b20 <BSP_SD_ReadCpltCallback>
 8002872:	bd08      	pop	{r3, pc}

08002874 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8002874:	2301      	movs	r3, #1
{
 8002876:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8002878:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800287c:	f000 f81e 	bl	80028bc <BSP_PlatformIsDetected>
 8002880:	b908      	cbnz	r0, 8002886 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8002882:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8002886:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800288a:	b003      	add	sp, #12
 800288c:	f85d fb04 	ldr.w	pc, [sp], #4

08002890 <BSP_SD_Init>:
{
 8002890:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002892:	f7ff ffef 	bl	8002874 <BSP_SD_IsDetected>
 8002896:	2801      	cmp	r0, #1
 8002898:	d10c      	bne.n	80028b4 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <BSP_SD_Init+0x28>)
 800289c:	f006 ff2e 	bl	80096fc <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80028a0:	b948      	cbnz	r0, 80028b6 <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80028a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <BSP_SD_Init+0x28>)
 80028a8:	f006 ff9c 	bl	80097e4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80028ac:	3000      	adds	r0, #0
 80028ae:	bf18      	it	ne
 80028b0:	2001      	movne	r0, #1
 80028b2:	bd08      	pop	{r3, pc}
 80028b4:	2002      	movs	r0, #2
}
 80028b6:	bd08      	pop	{r3, pc}
 80028b8:	20029ea4 	.word	0x20029ea4

080028bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80028bc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80028be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c2:	4803      	ldr	r0, [pc, #12]	; (80028d0 <BSP_PlatformIsDetected+0x14>)
 80028c4:	f002 ffbc 	bl	8005840 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80028c8:	fab0 f080 	clz	r0, r0
 80028cc:	0940      	lsrs	r0, r0, #5
 80028ce:	bd08      	pop	{r3, pc}
 80028d0:	40020800 	.word	0x40020800

080028d4 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 80028d4:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80028d6:	2301      	movs	r3, #1
 80028d8:	4c05      	ldr	r4, [pc, #20]	; (80028f0 <SD_CheckStatus.isra.0+0x1c>)
 80028da:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80028dc:	f7ff ffb6 	bl	800284c <BSP_SD_GetCardState>
 80028e0:	4623      	mov	r3, r4
 80028e2:	b918      	cbnz	r0, 80028ec <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80028e4:	7822      	ldrb	r2, [r4, #0]
 80028e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ea:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80028ec:	7818      	ldrb	r0, [r3, #0]
}
 80028ee:	bd10      	pop	{r4, pc}
 80028f0:	2000008c 	.word	0x2000008c

080028f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80028f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
Stat = STA_NOINIT; 
 80028f6:	2301      	movs	r3, #1
 80028f8:	4c0e      	ldr	r4, [pc, #56]	; (8002934 <SD_initialize+0x40>)
 80028fa:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80028fc:	f00a fa28 	bl	800cd50 <osKernelRunning>
 8002900:	b1a0      	cbz	r0, 800292c <SD_initialize+0x38>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8002902:	f7ff ffc5 	bl	8002890 <BSP_SD_Init>
 8002906:	b910      	cbnz	r0, 800290e <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 8002908:	f7ff ffe4 	bl	80028d4 <SD_CheckStatus.isra.0>
 800290c:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800290e:	7823      	ldrb	r3, [r4, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d00b      	beq.n	800292c <SD_initialize+0x38>
 8002914:	4d08      	ldr	r5, [pc, #32]	; (8002938 <SD_initialize+0x44>)
 8002916:	682a      	ldr	r2, [r5, #0]
 8002918:	b942      	cbnz	r2, 800292c <SD_initialize+0x38>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <SD_initialize+0x48>)
 800291c:	c903      	ldmia	r1, {r0, r1}
 800291e:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8002922:	4611      	mov	r1, r2
 8002924:	4668      	mov	r0, sp
 8002926:	f00a faa9 	bl	800ce7c <osMessageCreate>
 800292a:	6028      	str	r0, [r5, #0]
    }
  }
  return Stat;
 800292c:	7820      	ldrb	r0, [r4, #0]
}
 800292e:	b003      	add	sp, #12
 8002930:	bd30      	pop	{r4, r5, pc}
 8002932:	bf00      	nop
 8002934:	2000008c 	.word	0x2000008c
 8002938:	20000544 	.word	0x20000544
 800293c:	08023a14 	.word	0x08023a14

08002940 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8002940:	f7ff bfc8 	b.w	80028d4 <SD_CheckStatus.isra.0>

08002944 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <SD_ioctl+0x4c>)
{
 8002946:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002948:	781b      	ldrb	r3, [r3, #0]
{
 800294a:	b088      	sub	sp, #32
 800294c:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800294e:	07db      	lsls	r3, r3, #31
 8002950:	d41b      	bmi.n	800298a <SD_ioctl+0x46>

  switch (cmd)
 8002952:	2903      	cmp	r1, #3
 8002954:	d803      	bhi.n	800295e <SD_ioctl+0x1a>
 8002956:	e8df f001 	tbb	[pc, r1]
 800295a:	0510      	.short	0x0510
 800295c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800295e:	2004      	movs	r0, #4
  }

  return res;
}
 8002960:	b008      	add	sp, #32
 8002962:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002964:	4668      	mov	r0, sp
 8002966:	f7ff ff7b 	bl	8002860 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800296a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	e004      	b.n	800297a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8002970:	4668      	mov	r0, sp
 8002972:	f7ff ff75 	bl	8002860 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002976:	9b07      	ldr	r3, [sp, #28]
 8002978:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800297a:	2000      	movs	r0, #0
 800297c:	e7f0      	b.n	8002960 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800297e:	4668      	mov	r0, sp
 8002980:	f7ff ff6e 	bl	8002860 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002984:	9b07      	ldr	r3, [sp, #28]
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	e7f0      	b.n	800296c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800298a:	2003      	movs	r0, #3
 800298c:	e7e8      	b.n	8002960 <SD_ioctl+0x1c>
 800298e:	bf00      	nop
 8002990:	2000008c 	.word	0x2000008c

08002994 <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8002994:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 8002996:	f00a f9e3 	bl	800cd60 <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 800299a:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 800299e:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 80029a0:	f00a f9de 	bl	800cd60 <osKernelSysTick>
 80029a4:	1b40      	subs	r0, r0, r5
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	d902      	bls.n	80029b0 <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 80029aa:	f04f 30ff 	mov.w	r0, #4294967295
 80029ae:	e003      	b.n	80029b8 <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80029b0:	f7ff ff4c 	bl	800284c <BSP_SD_GetCardState>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d1f3      	bne.n	80029a0 <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080029bc <SD_write>:
{
 80029bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c0:	b085      	sub	sp, #20
 80029c2:	460c      	mov	r4, r1
 80029c4:	4617      	mov	r7, r2
 80029c6:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80029c8:	f7ff ffe4 	bl	8002994 <SD_CheckStatusWithTimeout.constprop.2>
 80029cc:	2800      	cmp	r0, #0
 80029ce:	da03      	bge.n	80029d8 <SD_write+0x1c>
    return res;
 80029d0:	2001      	movs	r0, #1
} 
 80029d2:	b005      	add	sp, #20
 80029d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 80029d8:	07a3      	lsls	r3, r4, #30
 80029da:	d00a      	beq.n	80029f2 <SD_write+0x36>
 80029dc:	2500      	movs	r5, #0
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80029de:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002a74 <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80029e2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002a70 <SD_write+0xb4>
    for (i = 0; i < count; i++) {
 80029e6:	42b5      	cmp	r5, r6
 80029e8:	eb05 0107 	add.w	r1, r5, r7
 80029ec:	d123      	bne.n	8002a36 <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 80029ee:	2000      	movs	r0, #0
 80029f0:	e7ef      	b.n	80029d2 <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80029f2:	4632      	mov	r2, r6
 80029f4:	4639      	mov	r1, r7
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7ff ff1a 	bl	8002830 <BSP_SD_WriteBlocks_DMA>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d1e7      	bne.n	80029d0 <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <SD_write+0xb4>)
 8002a02:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a06:	a801      	add	r0, sp, #4
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	f00a fa63 	bl	800ced4 <osMessageGet>
      if (event.status == osEventMessage)
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d1dd      	bne.n	80029d0 <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 8002a14:	9b02      	ldr	r3, [sp, #8]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1da      	bne.n	80029d0 <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8002a1a:	f00a f9a1 	bl	800cd60 <osKernelSysTick>
 8002a1e:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 8002a22:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 8002a24:	f00a f99c 	bl	800cd60 <osKernelSysTick>
 8002a28:	4284      	cmp	r4, r0
 8002a2a:	d9d1      	bls.n	80029d0 <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002a2c:	f7ff ff0e 	bl	800284c <BSP_SD_GetCardState>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1f7      	bne.n	8002a24 <SD_write+0x68>
 8002a34:	e7cd      	b.n	80029d2 <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002a36:	2201      	movs	r2, #1
 8002a38:	480e      	ldr	r0, [pc, #56]	; (8002a74 <SD_write+0xb8>)
 8002a3a:	f7ff fef9 	bl	8002830 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d1c6      	bne.n	80029d0 <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a42:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a46:	f8d9 1000 	ldr.w	r1, [r9]
 8002a4a:	a801      	add	r0, sp, #4
 8002a4c:	f00a fa42 	bl	800ced4 <osMessageGet>
        if (event.status == osEventMessage) {
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d10a      	bne.n	8002a6c <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 8002a56:	9b02      	ldr	r3, [sp, #8]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d107      	bne.n	8002a6c <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002a5c:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002a5e:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	4641      	mov	r1, r8
 8002a68:	f01f f94f 	bl	8021d0a <memcpy>
    for (i = 0; i < count; i++) {
 8002a6c:	3501      	adds	r5, #1
 8002a6e:	e7ba      	b.n	80029e6 <SD_write+0x2a>
 8002a70:	20000544 	.word	0x20000544
 8002a74:	20000548 	.word	0x20000548

08002a78 <SD_read>:
{
 8002a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	460c      	mov	r4, r1
 8002a80:	4617      	mov	r7, r2
 8002a82:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002a84:	f7ff ff86 	bl	8002994 <SD_CheckStatusWithTimeout.constprop.2>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	da03      	bge.n	8002a94 <SD_read+0x1c>
    return res;
 8002a8c:	2001      	movs	r0, #1
} 
 8002a8e:	b005      	add	sp, #20
 8002a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8002a94:	07a3      	lsls	r3, r4, #30
 8002a96:	d00a      	beq.n	8002aae <SD_read+0x36>
 8002a98:	2500      	movs	r5, #0
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002a9a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002b1c <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a9e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002b18 <SD_read+0xa0>
    for (i = 0; i < count; i++) {
 8002aa2:	42b5      	cmp	r5, r6
 8002aa4:	eb05 0107 	add.w	r1, r5, r7
 8002aa8:	d118      	bne.n	8002adc <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e7ef      	b.n	8002a8e <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8002aae:	4632      	mov	r2, r6
 8002ab0:	4639      	mov	r1, r7
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f7ff feae 	bl	8002814 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d1e7      	bne.n	8002a8c <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <SD_read+0xa0>)
 8002abe:	f247 5230 	movw	r2, #30000	; 0x7530
 8002ac2:	a801      	add	r0, sp, #4
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	f00a fa05 	bl	800ced4 <osMessageGet>
      if (event.status == osEventMessage) {
 8002aca:	9b01      	ldr	r3, [sp, #4]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d1dd      	bne.n	8002a8c <SD_read+0x14>
    return res;
 8002ad0:	9802      	ldr	r0, [sp, #8]
 8002ad2:	f110 30ff 	adds.w	r0, r0, #4294967295
 8002ad6:	bf18      	it	ne
 8002ad8:	2001      	movne	r0, #1
 8002ada:	e7d8      	b.n	8002a8e <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002adc:	2201      	movs	r2, #1
 8002ade:	480f      	ldr	r0, [pc, #60]	; (8002b1c <SD_read+0xa4>)
 8002ae0:	f7ff fe98 	bl	8002814 <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1d1      	bne.n	8002a8c <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002ae8:	f247 5230 	movw	r2, #30000	; 0x7530
 8002aec:	f8d9 1000 	ldr.w	r1, [r9]
 8002af0:	a801      	add	r0, sp, #4
 8002af2:	f00a f9ef 	bl	800ced4 <osMessageGet>
        if (event.status == osEventMessage) {
 8002af6:	9b01      	ldr	r3, [sp, #4]
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d10a      	bne.n	8002b12 <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 8002afc:	9b02      	ldr	r3, [sp, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 8002b02:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002b04:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy(buff, scratch, BLOCKSIZE);
 8002b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	f01f f8fc 	bl	8021d0a <memcpy>
    for (i = 0; i < count; i++) {
 8002b12:	3501      	adds	r5, #1
 8002b14:	e7c5      	b.n	8002aa2 <SD_read+0x2a>
 8002b16:	bf00      	nop
 8002b18:	20000544 	.word	0x20000544
 8002b1c:	20000548 	.word	0x20000548

08002b20 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <BSP_SD_ReadCpltCallback+0x10>)
 8002b22:	f04f 32ff 	mov.w	r2, #4294967295
 8002b26:	2101      	movs	r1, #1
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	f00a b9ab 	b.w	800ce84 <osMessagePut>
 8002b2e:	bf00      	nop
 8002b30:	20000544 	.word	0x20000544

08002b34 <PollTouchScreen>:
  { 20,  0}
};


GUI_PID_STATE PollTouchScreen(void)
{
 8002b34:	b530      	push	{r4, r5, lr}
 8002b36:	b08f      	sub	sp, #60	; 0x3c
 8002b38:	4604      	mov	r4, r0
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8002b3a:	a803      	add	r0, sp, #12
 8002b3c:	466d      	mov	r5, sp
 8002b3e:	f001 fdc3 	bl	80046c8 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <PollTouchScreen+0x50>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002b44:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8002b48:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002b4a:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	d011      	beq.n	8002b76 <PollTouchScreen+0x42>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8002b52:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002b56:	b121      	cbz	r1, 8002b62 <PollTouchScreen+0x2e>
 8002b58:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002b5c:	b10a      	cbz	r2, 8002b62 <PollTouchScreen+0x2e>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8002b5e:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8002b60:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8002b62:	2200      	movs	r2, #0
//    dmc_putc(' ');
//    dmc_putint((uint16_t)TS_State.y);
//    dmc_putcr();

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002b64:	4628      	mov	r0, r5
    TS_State.Layer = 0;
 8002b66:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.x = prev_state.touchX[0];
 8002b6a:	885a      	ldrh	r2, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8002b6c:	899b      	ldrh	r3, [r3, #12]
    TS_State.x = prev_state.touchX[0];
 8002b6e:	9200      	str	r2, [sp, #0]
    TS_State.y = prev_state.touchY[0];
 8002b70:	9301      	str	r3, [sp, #4]
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002b72:	f013 fb39 	bl	80161e8 <GUI_TOUCH_StoreStateEx>

  }
  return TS_State;
 8002b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002b7e:	4620      	mov	r0, r4
 8002b80:	b00f      	add	sp, #60	; 0x3c
 8002b82:	bd30      	pop	{r4, r5, pc}
 8002b84:	20000748 	.word	0x20000748

08002b88 <InitNew>:

void InitNew(void)
{
 8002b88:	b508      	push	{r3, lr}
  GUI_Init();
 8002b8a:	f00f fe8f 	bl	80128ac <GUI_Init>

  GUI_SetBkColor(GUI_BLACK);
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f00f fcee 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002b94:	f00f fe0c 	bl	80127b0 <GUI_Clear>
  GUI_EnableAlpha(0);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f011 fc2b 	bl	80143f4 <GUI_EnableAlpha>
  GUI_SetTextMode(GUI_TM_NORMAL);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f00f fd94 	bl	80126cc <GUI_SetTextMode>
  GUI_SetColor(GUI_WHITE);
 8002ba4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002ba8:	f00f fcee 	bl	8012588 <GUI_SetColor>
  GUI_SetFont(GUI_FONT_32_1);
 8002bac:	4804      	ldr	r0, [pc, #16]	; (8002bc0 <InitNew+0x38>)
 8002bae:	f00f fd4d 	bl	801264c <GUI_SetFont>
  GUI_AA_SetFactor(6);
 8002bb2:	2006      	movs	r0, #6
 8002bb4:	f00d f9a4 	bl	800ff00 <GUI_AA_SetFactor>
  //  GUI_AA_EnableHiRes();
  GUI_AA_DisableHiRes();
}
 8002bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_AA_DisableHiRes();
 8002bbc:	f00d b9c4 	b.w	800ff48 <GUI_AA_DisableHiRes>
 8002bc0:	08024200 	.word	0x08024200
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <loop>:

void loop(void)
{
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
  GUI_Clear();
  GUI_SetColor(GUI_WHITE);
  I16 aY[460];
  int i;
  double step = 360.0/460.0;
  double angle = 0.0;
 8002bd0:	2400      	movs	r4, #0
  InitNew();
 8002bd2:	f7ff ffd9 	bl	8002b88 <InitNew>
  double angle = 0.0;
 8002bd6:	2500      	movs	r5, #0
  GUI_SetBkColor(GUI_BLACK);
 8002bd8:	2000      	movs	r0, #0
  for (i = 0; i < GUI_COUNTOF(aY); i++) {
 8002bda:	f04f 0b00 	mov.w	fp, #0
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 8002bde:	2600      	movs	r6, #0
 8002be0:	4f99      	ldr	r7, [pc, #612]	; (8002e48 <loop+0x280>)
 8002be2:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
  GUI_SetBkColor(GUI_BLACK);
 8002be6:	f00f fcc3 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002bea:	f00f fde1 	bl	80127b0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8002bee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002bf2:	f00f fcc9 	bl	8012588 <GUI_SetColor>
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 8002bf6:	f20f 2940 	addw	r9, pc, #576	; 0x240
 8002bfa:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	4620      	mov	r0, r4
 8002c04:	4629      	mov	r1, r5
 8002c06:	f7fd fb09 	bl	800021c <__adddf3>
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f7fd fcb7 	bl	8000580 <__aeabi_dmul>
 8002c12:	4632      	mov	r2, r6
 8002c14:	463b      	mov	r3, r7
 8002c16:	f7fd fddd 	bl	80007d4 <__aeabi_ddiv>
 8002c1a:	ec41 0b10 	vmov	d0, r0, r1
 8002c1e:	f01f fe17 	bl	8022850 <sin>
 8002c22:	2200      	movs	r2, #0
 8002c24:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <loop+0x284>)
 8002c26:	ec51 0b10 	vmov	r0, r1, d0
 8002c2a:	f7fd fca9 	bl	8000580 <__aeabi_dmul>
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <loop+0x288>)
 8002c32:	f7fd faf3 	bl	800021c <__adddf3>
 8002c36:	f7fd ff53 	bl	8000ae0 <__aeabi_d2iz>
 8002c3a:	f82a 001b 	strh.w	r0, [sl, fp, lsl #1]
  for (i = 0; i < GUI_COUNTOF(aY); i++) {
 8002c3e:	f10b 0b01 	add.w	fp, fp, #1
    angle += step;
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	a37e      	add	r3, pc, #504	; (adr r3, 8002e40 <loop+0x278>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fae6 	bl	800021c <__adddf3>
  for (i = 0; i < GUI_COUNTOF(aY); i++) {
 8002c50:	f5bb 7fe6 	cmp.w	fp, #460	; 0x1cc
    angle += step;
 8002c54:	4604      	mov	r4, r0
 8002c56:	460d      	mov	r5, r1
  for (i = 0; i < GUI_COUNTOF(aY); i++) {
 8002c58:	d1d1      	bne.n	8002bfe <loop+0x36>
  }
  GUI_SetColor(0xff306890);
 8002c5a:	487e      	ldr	r0, [pc, #504]	; (8002e54 <loop+0x28c>)
  GUI_SetPenSize(2);
 8002c5c:	2404      	movs	r4, #4
  GUI_SetColor(0xff306890);
 8002c5e:	f00f fc93 	bl	8012588 <GUI_SetColor>
  GUI_SetPenSize(2);
 8002c62:	2002      	movs	r0, #2
 8002c64:	f00f fc28 	bl	80124b8 <GUI_SetPenSize>
  for (uint16_t y = 4; y < 272; y += 44)
  {
    GUI_DrawHLine(y, 10, 470);
 8002c68:	4620      	mov	r0, r4
 8002c6a:	342c      	adds	r4, #44	; 0x2c
 8002c6c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8002c70:	210a      	movs	r1, #10
 8002c72:	f010 fa21 	bl	80130b8 <GUI_DrawHLine>
  for (uint16_t y = 4; y < 272; y += 44)
 8002c76:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
 8002c7a:	d1f5      	bne.n	8002c68 <loop+0xa0>
 8002c7c:	240a      	movs	r4, #10
  }
  for (uint16_t x = 10; x < 480; x += 46)
  {
    GUI_DrawVLine(x, 4, 268);
 8002c7e:	4620      	mov	r0, r4
 8002c80:	342e      	adds	r4, #46	; 0x2e
 8002c82:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8002c86:	2104      	movs	r1, #4
 8002c88:	f010 fa88 	bl	801319c <GUI_DrawVLine>
  for (uint16_t x = 10; x < 480; x += 46)
 8002c8c:	f5b4 7f01 	cmp.w	r4, #516	; 0x204
 8002c90:	d1f5      	bne.n	8002c7e <loop+0xb6>
  }
  GUI_SetPenSize(6);
 8002c92:	2006      	movs	r0, #6
  GUI_SetBkColor(GUI_GRAY);
  GUI_Clear();
  GUI_SetPenSize(1);

  int a0, a1;
  const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8002c94:	4c70      	ldr	r4, [pc, #448]	; (8002e58 <loop+0x290>)
  GUI_SetPenSize(6);
 8002c96:	f00f fc0f 	bl	80124b8 <GUI_SetPenSize>
  GUI_SetColor(0xff00ff40);
 8002c9a:	4870      	ldr	r0, [pc, #448]	; (8002e5c <loop+0x294>)
 8002c9c:	f00f fc74 	bl	8012588 <GUI_SetColor>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 69);
 8002ca0:	2345      	movs	r3, #69	; 0x45
 8002ca2:	220a      	movs	r2, #10
 8002ca4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002ca8:	4650      	mov	r0, sl
  const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8002caa:	ad06      	add	r5, sp, #24
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 69);
 8002cac:	f010 f978 	bl	8012fa0 <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 68);
 8002cb0:	2344      	movs	r3, #68	; 0x44
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002cb8:	4650      	mov	r0, sl
  const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8002cba:	af0c      	add	r7, sp, #48	; 0x30
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 68);
 8002cbc:	f010 f970 	bl	8012fa0 <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 67);
 8002cc0:	2343      	movs	r3, #67	; 0x43
 8002cc2:	220a      	movs	r2, #10
 8002cc4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002cc8:	4650      	mov	r0, sl
 8002cca:	f010 f969 	bl	8012fa0 <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 66);
 8002cce:	2342      	movs	r3, #66	; 0x42
 8002cd0:	220a      	movs	r2, #10
 8002cd2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002cd6:	4650      	mov	r0, sl
 8002cd8:	f010 f962 	bl	8012fa0 <GUI_DrawGraph>
  HAL_Delay(delay*4);
 8002cdc:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002ce0:	f001 fdf8 	bl	80048d4 <HAL_Delay>
  InitNew();
 8002ce4:	f7ff ff50 	bl	8002b88 <InitNew>
  GUI_SetBkColor(GUI_GRAY);
 8002ce8:	485d      	ldr	r0, [pc, #372]	; (8002e60 <loop+0x298>)
 8002cea:	f00f fc41 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002cee:	f00f fd5f 	bl	80127b0 <GUI_Clear>
  GUI_SetPenSize(1);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f00f fbe0 	bl	80124b8 <GUI_SetPenSize>
  const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8002cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
  const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8002d00:	3408      	adds	r4, #8
  const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8002d02:	e885 0003 	stmia.w	r5, {r0, r1}
  const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8002d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d08:	463d      	mov	r5, r7
 8002d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
      GUI_CYAN, GUI_MAGENTA, GUI_YELLOW };
  for (i = 0; i < GUI_COUNTOF(aValues); i++) {
 8002d10:	2400      	movs	r4, #0
  const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8002d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d16:	4626      	mov	r6, r4
 8002d18:	ad05      	add	r5, sp, #20
    a0 = (i == 0) ? 0 : aValues[i - 1];
    a1 = aValues[i];
    GUI_SetColor(aColors[i]);
    GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8002d1a:	46a1      	mov	r9, r4
    a1 = aValues[i];
 8002d1c:	f855 8f04 	ldr.w	r8, [r5, #4]!
    GUI_SetColor(aColors[i]);
 8002d20:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
  for (i = 0; i < GUI_COUNTOF(aValues); i++) {
 8002d24:	3401      	adds	r4, #1
    GUI_SetColor(aColors[i]);
 8002d26:	f00f fc2f 	bl	8012588 <GUI_SetColor>
    GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8002d2a:	4633      	mov	r3, r6
 8002d2c:	2278      	movs	r2, #120	; 0x78
 8002d2e:	2188      	movs	r1, #136	; 0x88
 8002d30:	2096      	movs	r0, #150	; 0x96
 8002d32:	e88d 0300 	stmia.w	sp, {r8, r9}
 8002d36:	f010 f9eb 	bl	8013110 <GUI_DrawPie>
  for (i = 0; i < GUI_COUNTOF(aValues); i++) {
 8002d3a:	2c06      	cmp	r4, #6
 8002d3c:	d179      	bne.n	8002e32 <loop+0x26a>
  }
  GUI_SetColor(GUI_WHITE);
 8002d3e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000

//  GUI_SelectLayer(0);
  GUI_SetBkColor(GUI_GREEN);
  GUI_Clear();
  GUI_SetColor(GUI_RED);
  for (i = 10; i <= 470; i += 10) {
 8002d42:	240a      	movs	r4, #10
  GUI_SetColor(GUI_WHITE);
 8002d44:	f00f fc20 	bl	8012588 <GUI_SetColor>
  GUI_DispStringHCenterAt("Pie", 320, 150);
 8002d48:	2296      	movs	r2, #150	; 0x96
 8002d4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d4e:	4845      	ldr	r0, [pc, #276]	; (8002e64 <loop+0x29c>)
 8002d50:	f010 f904 	bl	8012f5c <GUI_DispStringHCenterAt>
  HAL_Delay(delay);
 8002d54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d58:	f001 fdbc 	bl	80048d4 <HAL_Delay>
  InitNew();
 8002d5c:	f7ff ff14 	bl	8002b88 <InitNew>
  GUI_SetBkColor(GUI_GREEN);
 8002d60:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8002d64:	f00f fc04 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002d68:	f00f fd22 	bl	80127b0 <GUI_Clear>
  GUI_SetColor(GUI_RED);
 8002d6c:	20ff      	movs	r0, #255	; 0xff
 8002d6e:	f00f fc0b 	bl	8012588 <GUI_SetColor>
    GUI_DrawLine(i, 30, i, 60);
 8002d72:	4622      	mov	r2, r4
 8002d74:	4620      	mov	r0, r4
  for (i = 10; i <= 470; i += 10) {
 8002d76:	340a      	adds	r4, #10
    GUI_DrawLine(i, 30, i, 60);
 8002d78:	233c      	movs	r3, #60	; 0x3c
 8002d7a:	211e      	movs	r1, #30
 8002d7c:	f010 fd94 	bl	80138a8 <GUI_DrawLine>
  for (i = 10; i <= 470; i += 10) {
 8002d80:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002d84:	d1f5      	bne.n	8002d72 <loop+0x1aa>
 8002d86:	240a      	movs	r4, #10
//    HAL_Delay(20);
  };
  for (i = 10; i < 50; i += 3) {
    GUI_DrawCircle(80, 160, i);
 8002d88:	4622      	mov	r2, r4
  for (i = 10; i < 50; i += 3) {
 8002d8a:	3403      	adds	r4, #3
    GUI_DrawCircle(80, 160, i);
 8002d8c:	21a0      	movs	r1, #160	; 0xa0
 8002d8e:	2050      	movs	r0, #80	; 0x50
 8002d90:	f00f f980 	bl	8012094 <GUI_DrawCircle>
  for (i = 10; i < 50; i += 3) {
 8002d94:	2c34      	cmp	r4, #52	; 0x34
 8002d96:	d1f7      	bne.n	8002d88 <loop+0x1c0>
//    HAL_Delay(20);
  };
  GUI_SetColor(0x00FFFF00);
 8002d98:	24c8      	movs	r4, #200	; 0xc8
 8002d9a:	2500      	movs	r5, #0
  for (i = 0; i < 4; i += 1) {
    GUI_SetColor(0x000FFFF0 << i*0x6);
 8002d9c:	4e32      	ldr	r6, [pc, #200]	; (8002e68 <loop+0x2a0>)
  GUI_SetColor(0x00FFFF00);
 8002d9e:	4833      	ldr	r0, [pc, #204]	; (8002e6c <loop+0x2a4>)
 8002da0:	f00f fbf2 	bl	8012588 <GUI_SetColor>
    GUI_SetColor(0x000FFFF0 << i*0x6);
 8002da4:	fa06 f005 	lsl.w	r0, r6, r5
 8002da8:	3506      	adds	r5, #6
 8002daa:	f00f fbed 	bl	8012588 <GUI_SetColor>
    GUI_FillCircle(200+(i*15),150+(i*15),30);
 8002dae:	f1a4 0132 	sub.w	r1, r4, #50	; 0x32
 8002db2:	4620      	mov	r0, r4
 8002db4:	340f      	adds	r4, #15
 8002db6:	221e      	movs	r2, #30
 8002db8:	f00f fa0e 	bl	80121d8 <GUI_FillCircle>
  for (i = 0; i < 4; i += 1) {
 8002dbc:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8002dc0:	d1f0      	bne.n	8002da4 <loop+0x1dc>
//    HAL_Delay(20);
  };
  GUI_POINT aEnlargedPoints[GUI_COUNTOF(aPoints)];

  GUI_SetDrawMode(GUI_DM_XOR);
 8002dc2:	2001      	movs	r0, #1
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 8002dc4:	2405      	movs	r4, #5
  for (i = 1; i < 10; i++) {
    GUI_EnlargePolygon(aEnlargedPoints, aPoints, GUI_COUNTOF(aPoints), i * 5);
 8002dc6:	4d2a      	ldr	r5, [pc, #168]	; (8002e70 <loop+0x2a8>)
  GUI_SetDrawMode(GUI_DM_XOR);
 8002dc8:	f00f fc34 	bl	8012634 <GUI_SetDrawMode>
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 8002dcc:	236e      	movs	r3, #110	; 0x6e
 8002dce:	228c      	movs	r2, #140	; 0x8c
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4827      	ldr	r0, [pc, #156]	; (8002e70 <loop+0x2a8>)
 8002dd4:	f011 fe64 	bl	8014aa0 <GUI_FillPolygon>
    GUI_EnlargePolygon(aEnlargedPoints, aPoints, GUI_COUNTOF(aPoints), i * 5);
 8002dd8:	4623      	mov	r3, r4
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4629      	mov	r1, r5
 8002dde:	a803      	add	r0, sp, #12
 8002de0:	3405      	adds	r4, #5
 8002de2:	f011 ff17 	bl	8014c14 <GUI_EnlargePolygon>
    GUI_FillPolygon(aEnlargedPoints, GUI_COUNTOF(aPoints), 140, 110);
 8002de6:	236e      	movs	r3, #110	; 0x6e
 8002de8:	228c      	movs	r2, #140	; 0x8c
 8002dea:	2103      	movs	r1, #3
 8002dec:	a803      	add	r0, sp, #12
 8002dee:	f011 fe57 	bl	8014aa0 <GUI_FillPolygon>
  for (i = 1; i < 10; i++) {
 8002df2:	2c32      	cmp	r4, #50	; 0x32
 8002df4:	d1f0      	bne.n	8002dd8 <loop+0x210>
  };
  HAL_Delay(delay);
 8002df6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dfa:	f001 fd6b 	bl	80048d4 <HAL_Delay>

  GUI_SetBkColor(GUI_DARKBLUE);
 8002dfe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002e02:	f00f fbb5 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002e06:	f00f fcd3 	bl	80127b0 <GUI_Clear>
  GUI_SetColor(GUI_YELLOW);
 8002e0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e0e:	f00f fbbb 	bl	8012588 <GUI_SetColor>
  GUI_SetFont(&GUI_FontD80);
 8002e12:	4818      	ldr	r0, [pc, #96]	; (8002e74 <loop+0x2ac>)
 8002e14:	f00f fc1a 	bl	801264c <GUI_SetFont>
  GUI_DispStringAt("1234.456", 10, 100);
 8002e18:	2264      	movs	r2, #100	; 0x64
 8002e1a:	210a      	movs	r1, #10
 8002e1c:	4816      	ldr	r0, [pc, #88]	; (8002e78 <loop+0x2b0>)
 8002e1e:	f010 f889 	bl	8012f34 <GUI_DispStringAt>
  HAL_Delay(delay);
 8002e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e26:	f001 fd55 	bl	80048d4 <HAL_Delay>
//
//    GUI_DrawLine(240, 136, 240+x[i], 136+y[i]);
////    HAL_Delay(10);
//  }
//  HAL_Delay(delay);
}
 8002e2a:	f50d 7d79 	add.w	sp, sp, #996	; 0x3e4
 8002e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0 = (i == 0) ? 0 : aValues[i - 1];
 8002e32:	682e      	ldr	r6, [r5, #0]
 8002e34:	e772      	b.n	8002d1c <loop+0x154>
 8002e36:	bf00      	nop
 8002e38:	54442d18 	.word	0x54442d18
 8002e3c:	400921fb 	.word	0x400921fb
 8002e40:	642c8591 	.word	0x642c8591
 8002e44:	3fe90b21 	.word	0x3fe90b21
 8002e48:	40668000 	.word	0x40668000
 8002e4c:	c0510000 	.word	0xc0510000
 8002e50:	40510000 	.word	0x40510000
 8002e54:	ff306890 	.word	0xff306890
 8002e58:	08023a1c 	.word	0x08023a1c
 8002e5c:	ff00ff40 	.word	0xff00ff40
 8002e60:	00808080 	.word	0x00808080
 8002e64:	0802aa24 	.word	0x0802aa24
 8002e68:	000ffff0 	.word	0x000ffff0
 8002e6c:	00ffff00 	.word	0x00ffff00
 8002e70:	0802aa18 	.word	0x0802aa18
 8002e74:	080283b4 	.word	0x080283b4
 8002e78:	0802aa28 	.word	0x0802aa28

08002e7c <GRAPHICS_MainTask>:

//extern WM_HWIN CreateWindow(void);


void GRAPHICS_MainTask(void)
{
 8002e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t x1 = 0;
  uint32_t x2 = 0;
  uint32_t y1 = 0;
  uint32_t y2 = 0;
  uint8_t started = 0;
 8002e80:	2500      	movs	r5, #0
  GUI_Init();
 8002e82:	f00f fd13 	bl	80128ac <GUI_Init>
  InitNew();
 8002e86:	f7ff fe7f 	bl	8002b88 <InitNew>
  Shapes();
 8002e8a:	f000 f851 	bl	8002f30 <Shapes>
  HAL_Delay(delay*10);
 8002e8e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002e92:	f001 fd1f 	bl	80048d4 <HAL_Delay>
  uint32_t y1 = 0;
 8002e96:	46a9      	mov	r9, r5
  loop();
 8002e98:	f7ff fe96 	bl	8002bc8 <loop>
  uint32_t x1 = 0;
 8002e9c:	462e      	mov	r6, r5
  GUI_SetBkColor(GUI_BLACK);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f00f fb66 	bl	8012570 <GUI_SetBkColor>
  GUI_Clear();
 8002ea4:	f00f fc84 	bl	80127b0 <GUI_Clear>
  GUI_SetPenSize(11);
 8002ea8:	200b      	movs	r0, #11
 8002eaa:	f00f fb05 	bl	80124b8 <GUI_SetPenSize>
  uint8_t erasing = 0;

  while(1)
  {
//    loop();
    GUI_PID_STATE TS_State = PollTouchScreen();
 8002eae:	a801      	add	r0, sp, #4
 8002eb0:	f7ff fe40 	bl	8002b34 <PollTouchScreen>
      if (TS_State.Pressed)
 8002eb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002eb8:	b3a3      	cbz	r3, 8002f24 <GRAPHICS_MainTask+0xa8>
      {
        x2 = TS_State.x;
 8002eba:	9f01      	ldr	r7, [sp, #4]
        y2 = TS_State.y;
 8002ebc:	f8dd 8008 	ldr.w	r8, [sp, #8]
//            GUI_Clear();
//            started = 0;
//            erasing = 1;
//          }
//        }
        if ((started) && (!erasing))
 8002ec0:	b3a5      	cbz	r5, 8002f2c <GRAPHICS_MainTask+0xb0>
        {
          uint8_t r = rnd() % 255;
 8002ec2:	f7fe fa8f 	bl	80013e4 <rnd>
 8002ec6:	4604      	mov	r4, r0
          uint8_t g = rnd() % 255;
 8002ec8:	f7fe fa8c 	bl	80013e4 <rnd>
 8002ecc:	4682      	mov	sl, r0
          uint8_t b = rnd() % 255;
 8002ece:	f7fe fa89 	bl	80013e4 <rnd>
 8002ed2:	23ff      	movs	r3, #255	; 0xff
 8002ed4:	fbb0 f2f3 	udiv	r2, r0, r3
 8002ed8:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8002edc:	1a80      	subs	r0, r0, r2
          uint8_t g = rnd() % 255;
 8002ede:	fbba f2f3 	udiv	r2, sl, r3
          uint8_t r = rnd() % 255;
 8002ee2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ee6:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002eea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
          uint8_t g = rnd() % 255;
 8002eee:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t r = rnd() % 255;
 8002ef2:	1ae4      	subs	r4, r4, r3
          uint8_t g = rnd() % 255;
 8002ef4:	ebaa 0a02 	sub.w	sl, sl, r2
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002ef8:	0424      	lsls	r4, r4, #16
 8002efa:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 8002efe:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
          GUI_SetColor(color);
 8002f02:	4320      	orrs	r0, r4
 8002f04:	f00f fb40 	bl	8012588 <GUI_SetColor>
          GUI_AA_DrawLine(x1, y1, x2, y2);
 8002f08:	4643      	mov	r3, r8
 8002f0a:	463a      	mov	r2, r7
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f00d f840 	bl	800ff94 <GUI_AA_DrawLine>
      {
        started = 0;
        pressed = 0;
        erasing = 0;
      }
    GUI_MULTIBUF_End();
 8002f14:	f011 fe08 	bl	8014b28 <GUI_MULTIBUF_End>
    GUI_Delay(5);
 8002f18:	2005      	movs	r0, #5
 8002f1a:	f013 fa7d 	bl	8016418 <GUI_Delay>
  {
 8002f1e:	46c1      	mov	r9, r8
 8002f20:	463e      	mov	r6, r7
 8002f22:	e7c4      	b.n	8002eae <GRAPHICS_MainTask+0x32>
 8002f24:	46c8      	mov	r8, r9
 8002f26:	4637      	mov	r7, r6
        started = 0;
 8002f28:	461d      	mov	r5, r3
 8002f2a:	e7f3      	b.n	8002f14 <GRAPHICS_MainTask+0x98>
        started = 1;
 8002f2c:	2501      	movs	r5, #1
 8002f2e:	e7f1      	b.n	8002f14 <GRAPHICS_MainTask+0x98>

08002f30 <Shapes>:
//  GUI_RestoreUserAlpha(&AlphaState);
  GUI_EnableAlpha(0);
}

void Shapes(void)
{
 8002f30:	b507      	push	{r0, r1, r2, lr}
  //  GUI_SelectLayer(1);
    GUI_SetBkColor(GUI_DARKBLUE);
 8002f32:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002f36:	f00f fb1b 	bl	8012570 <GUI_SetBkColor>
    GUI_Clear();
 8002f3a:	f00f fc39 	bl	80127b0 <GUI_Clear>
    GUI_SetColor(GUI_YELLOW);
 8002f3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f42:	f00f fb21 	bl	8012588 <GUI_SetColor>
    GUI_AA_SetFactor(6);
 8002f46:	2006      	movs	r0, #6
 8002f48:	f00c ffda 	bl	800ff00 <GUI_AA_SetFactor>
    GUI_SetPenSize(30);
 8002f4c:	201e      	movs	r0, #30
 8002f4e:	f00f fab3 	bl	80124b8 <GUI_SetPenSize>
//    GUI_DrawPoint(15, 15);                            // OK
//    GUI_AA_DrawPoint(15, 15);                            // Does not exist!
//    GUI_DrawLine(120, 15, 420, 40);                   // OK
//    GUI_AA_DrawLine(120, 30, 420, 55);                // OK
    GUI_DrawRect(30, 38, 60, 63);                   // BUG PenSize wrong
 8002f52:	233f      	movs	r3, #63	; 0x3f
 8002f54:	223c      	movs	r2, #60	; 0x3c
 8002f56:	2126      	movs	r1, #38	; 0x26
 8002f58:	201e      	movs	r0, #30
 8002f5a:	f00d fed3 	bl	8010d04 <GUI_DrawRect>

//    GUI_FillRect(20, 38, 100, 63);

    GUI_DrawRoundedRect(150, 75, 225, 125, 15);     // BUG PenSize wrong
 8002f5e:	230f      	movs	r3, #15
 8002f60:	22e1      	movs	r2, #225	; 0xe1
 8002f62:	214b      	movs	r1, #75	; 0x4b
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2096      	movs	r0, #150	; 0x96
 8002f68:	237d      	movs	r3, #125	; 0x7d
 8002f6a:	f010 fe11 	bl	8013b90 <GUI_DrawRoundedRect>
//    GUI_AA_DrawRoundedRect(150, 75, 225, 125, 15);    // OK

//    GUI_FillRoundedRect(375, 75, 450, 125, 15);
//    GUI_AA_FillRoundedRect(375, 75, 450, 125, 15);

    GUI_DrawCircle(45, 150, 30);                   // BUG PenSize wrong
 8002f6e:	221e      	movs	r2, #30
 8002f70:	2196      	movs	r1, #150	; 0x96
 8002f72:	202d      	movs	r0, #45	; 0x2d
 8002f74:	f00f f88e 	bl	8012094 <GUI_DrawCircle>
    GUI_AA_DrawCircle(240, 136, 100);                   // BUG Outside Edges Clipped Off
 8002f78:	2264      	movs	r2, #100	; 0x64
 8002f7a:	2188      	movs	r1, #136	; 0x88
 8002f7c:	20f0      	movs	r0, #240	; 0xf0

//    GUI_FillEllipse(360, 225, 75, 34);
//    GUI_AA_FillEllipse(360, 225, 75, 34);

//    GUI_DispStringHCenterAt("Shapes", 195, 225);
}
 8002f7e:	b003      	add	sp, #12
 8002f80:	f85d eb04 	ldr.w	lr, [sp], #4
    GUI_AA_DrawCircle(240, 136, 100);                   // BUG Outside Edges Clipped Off
 8002f84:	f00c bd04 	b.w	800f990 <GUI_AA_DrawCircle>

08002f88 <GUI_X_Config>:
void GUI_X_Config(void)
{
  //	 Jack
  // 32 bit aligned memory area  //
  // Assign memory to emWin  //
  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8002f88:	f44f 31dc 	mov.w	r1, #112640	; 0x1b800
 8002f8c:	4801      	ldr	r0, [pc, #4]	; (8002f94 <GUI_X_Config+0xc>)
 8002f8e:	f00e be7f 	b.w	8011c90 <GUI_ALLOC_AssignMemory>
 8002f92:	bf00      	nop
 8002f94:	20000774 	.word	0x20000774

08002f98 <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8002f98:	b530      	push	{r4, r5, lr}
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8002f9a:	4c29      	ldr	r4, [pc, #164]	; (8003040 <MX_LCD_Init+0xa8>)
{ 
 8002f9c:	b08f      	sub	sp, #60	; 0x3c
/* Configure LTDC */

  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f9e:	2500      	movs	r5, #0
  HAL_LTDC_DeInit(&hltdc);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f003 fea1 	bl	8006ce8 <HAL_LTDC_DeInit>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <MX_LCD_Init+0xac>)
  hltdc.Init.TotalWidth = 565;
  hltdc.Init.TotalHeigh = 285;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fa8:	4620      	mov	r0, r4
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002faa:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002fac:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fae:	6125      	str	r5, [r4, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8002fb0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002fb4:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fb8:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fbc:	e884 0028 	stmia.w	r4, {r3, r5}
  hltdc.Init.HorizontalSync = 40;
 8002fc0:	2328      	movs	r3, #40	; 0x28
 8002fc2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8002fc4:	2309      	movs	r3, #9
 8002fc6:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002fc8:	2335      	movs	r3, #53	; 0x35
 8002fca:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002fcc:	230b      	movs	r3, #11
 8002fce:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002fd0:	f240 2315 	movw	r3, #533	; 0x215
 8002fd4:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002fd6:	f240 131b 	movw	r3, #283	; 0x11b
 8002fda:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002fdc:	f240 2335 	movw	r3, #565	; 0x235
 8002fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002fe2:	f240 131d 	movw	r3, #285	; 0x11d
 8002fe6:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fe8:	f003 fda4 	bl	8006b34 <HAL_LTDC_Init>
 8002fec:	b108      	cbz	r0, 8002ff2 <MX_LCD_Init+0x5a>
  {
    Error_Handler( );
 8002fee:	f7fe fd9f 	bl	8001b30 <Error_Handler>

  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 480;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 272;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002ff2:	2102      	movs	r1, #2
  pLayerCfg.WindowX1 = 480;
 8002ff4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8002ff8:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.ImageWidth = 480;
  pLayerCfg.ImageHeight = 272;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ffc:	4810      	ldr	r0, [pc, #64]	; (8003040 <MX_LCD_Init+0xa8>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002ffe:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 8003000:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8003002:	9202      	str	r2, [sp, #8]
  pLayerCfg.Alpha = 255;
 8003004:	9106      	str	r1, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003006:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.ImageWidth = 480;
 800300a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800300c:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800300e:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003010:	2107      	movs	r1, #7
  pLayerCfg.WindowX0 = 0;
 8003012:	9501      	str	r5, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003014:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003016:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 800301a:	9503      	str	r5, [sp, #12]
  pLayerCfg.FBStartAdress = 0xC0000000;
 800301c:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800301e:	a901      	add	r1, sp, #4
  pLayerCfg.WindowY1 = 272;
 8003020:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 8003022:	9507      	str	r5, [sp, #28]
  pLayerCfg.ImageHeight = 272;
 8003024:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003026:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800302a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800302e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003032:	f003 fec5 	bl	8006dc0 <HAL_LTDC_ConfigLayer>
 8003036:	b108      	cbz	r0, 800303c <MX_LCD_Init+0xa4>
  {
    Error_Handler( );
 8003038:	f7fe fd7a 	bl	8001b30 <Error_Handler>
  }

}
 800303c:	b00f      	add	sp, #60	; 0x3c
 800303e:	bd30      	pop	{r4, r5, pc}
 8003040:	2002a704 	.word	0x2002a704
 8003044:	40016800 	.word	0x40016800

08003048 <MX_FMC_Init>:
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003048:	4815      	ldr	r0, [pc, #84]	; (80030a0 <MX_FMC_Init+0x58>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800304a:	2210      	movs	r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <MX_FMC_Init+0x5c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800304e:	2104      	movs	r1, #4
{  
 8003050:	b500      	push	{lr}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003052:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003054:	2240      	movs	r2, #64	; 0x40
{  
 8003056:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003058:	6003      	str	r3, [r0, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800305a:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800305c:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003060:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003062:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003064:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003066:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800306a:	6043      	str	r3, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800306c:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800306e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003072:	6083      	str	r3, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003074:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003076:	2207      	movs	r2, #7
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003078:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800307a:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800307c:	2302      	movs	r3, #2
  SdramTiming.ExitSelfRefreshDelay = 7;
 800307e:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 8003080:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003082:	2203      	movs	r2, #3
  SdramTiming.SelfRefreshTime = 4;
 8003084:	9103      	str	r1, [sp, #12]
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003086:	4469      	add	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 8003088:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 800308a:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800308c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800308e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003090:	f006 fc74 	bl	800997c <HAL_SDRAM_Init>
 8003094:	b108      	cbz	r0, 800309a <MX_FMC_Init+0x52>
  {
    Error_Handler( );
 8003096:	f7fe fd4b 	bl	8001b30 <Error_Handler>
  }

}
 800309a:	b009      	add	sp, #36	; 0x24
 800309c:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a0:	2002a7ec 	.word	0x2002a7ec
 80030a4:	a0000140 	.word	0xa0000140

080030a8 <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 80030a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80030ac:	4c22      	ldr	r4, [pc, #136]	; (8003138 <MX_SDRAM_InitEx+0x90>)
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80030ae:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030b0:	4d22      	ldr	r5, [pc, #136]	; (800313c <MX_SDRAM_InitEx+0x94>)
  __IO uint32_t tmpmrd = 0;
 80030b2:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80030b6:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030b8:	4621      	mov	r1, r4
 80030ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030be:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80030c0:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 80030c4:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80030c6:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80030ca:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030ce:	f006 fc75 	bl	80099bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80030d2:	4630      	mov	r0, r6
 80030d4:	f001 fbfe 	bl	80048d4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80030d8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 80030da:	4621      	mov	r1, r4
 80030dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e0:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 80030e2:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80030e4:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80030e8:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 80030ec:	f006 fc66 	bl	80099bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80030f0:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80030f2:	4621      	mov	r1, r4
 80030f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030f8:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 80030fa:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80030fe:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8003102:	2308      	movs	r3, #8
 8003104:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003106:	f006 fc59 	bl	80099bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800310a:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800310e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003112:	4621      	mov	r1, r4
 8003114:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003116:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003118:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 800311a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800311c:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 8003120:	9b01      	ldr	r3, [sp, #4]
 8003122:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003124:	f006 fc4a 	bl	80099bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8003128:	f240 616f 	movw	r1, #1647	; 0x66f
 800312c:	4628      	mov	r0, r5
 800312e:	f006 fc5c 	bl	80099ea <HAL_SDRAM_ProgramRefreshRate>
}
 8003132:	b002      	add	sp, #8
 8003134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003138:	2001bf74 	.word	0x2001bf74
 800313c:	2002a7ec 	.word	0x2002a7ec

08003140 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8003140:	b508      	push	{r3, lr}
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8003142:	480d      	ldr	r0, [pc, #52]	; (8003178 <MX_DMA2D_Init+0x38>)
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <MX_DMA2D_Init+0x3c>)
 8003146:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003148:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 800314a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800314c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800314e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003150:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 8003152:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003154:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8003156:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003158:	f001 fffc 	bl	8005154 <HAL_DMA2D_Init>
 800315c:	b108      	cbz	r0, 8003162 <MX_DMA2D_Init+0x22>
  {
    Error_Handler( );
 800315e:	f7fe fce7 	bl	8001b30 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003162:	2101      	movs	r1, #1
 8003164:	4804      	ldr	r0, [pc, #16]	; (8003178 <MX_DMA2D_Init+0x38>)
 8003166:	f002 f8d3 	bl	8005310 <HAL_DMA2D_ConfigLayer>
 800316a:	b118      	cbz	r0, 8003174 <MX_DMA2D_Init+0x34>
  {
    Error_Handler( );
  }

}
 800316c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8003170:	f7fe bcde 	b.w	8001b30 <Error_Handler>
 8003174:	bd08      	pop	{r3, pc}
 8003176:	bf00      	nop
 8003178:	2002a7ac 	.word	0x2002a7ac
 800317c:	4002b000 	.word	0x4002b000

08003180 <HAL_LTDC_MspInit>:
/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 8003180:	6802      	ldr	r2, [r0, #0]
 8003182:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_LTDC_MspInit+0x104>)
 8003184:	429a      	cmp	r2, r3
{
 8003186:	b570      	push	{r4, r5, r6, lr}
 8003188:	b08c      	sub	sp, #48	; 0x30
  if(ltdcHandle->Instance==LTDC)
 800318a:	d178      	bne.n	800327e <HAL_LTDC_MspInit+0xfe>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800318c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003194:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003198:	a907      	add	r1, sp, #28
 800319a:	483b      	ldr	r0, [pc, #236]	; (8003288 <HAL_LTDC_MspInit+0x108>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800319c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
 80031a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80031a8:	9201      	str	r2, [sp, #4]
 80031aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	f042 0210 	orr.w	r2, r2, #16
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
 80031b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b6:	f002 0210 	and.w	r2, r2, #16
 80031ba:	9202      	str	r2, [sp, #8]
 80031bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
 80031c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80031cc:	9203      	str	r2, [sp, #12]
 80031ce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031da:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80031de:	9204      	str	r2, [sp, #16]
 80031e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80031f0:	9205      	str	r2, [sp, #20]
 80031f2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	9306      	str	r3, [sp, #24]
 8003206:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003208:	2310      	movs	r3, #16
 800320a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003210:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003212:	f002 f8f7 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003216:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800321a:	a907      	add	r1, sp, #28
 800321c:	481b      	ldr	r0, [pc, #108]	; (800328c <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800321e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003226:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003228:	f002 f8ec 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800322c:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800322e:	a907      	add	r1, sp, #28
 8003230:	4817      	ldr	r0, [pc, #92]	; (8003290 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003232:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800323a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800323c:	f002 f8e2 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003244:	a907      	add	r1, sp, #28
 8003246:	4813      	ldr	r0, [pc, #76]	; (8003294 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003248:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800324a:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800324e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003254:	f002 f8d6 	bl	8005404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003258:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800325c:	a907      	add	r1, sp, #28
 800325e:	480e      	ldr	r0, [pc, #56]	; (8003298 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003260:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003268:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800326a:	f002 f8cb 	bl	8005404 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800326e:	2058      	movs	r0, #88	; 0x58
 8003270:	4622      	mov	r2, r4
 8003272:	2105      	movs	r1, #5
 8003274:	f001 fd56 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003278:	2058      	movs	r0, #88	; 0x58
 800327a:	f001 fd9b 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800327e:	b00c      	add	sp, #48	; 0x30
 8003280:	bd70      	pop	{r4, r5, r6, pc}
 8003282:	bf00      	nop
 8003284:	40016800 	.word	0x40016800
 8003288:	40021000 	.word	0x40021000
 800328c:	40022400 	.word	0x40022400
 8003290:	40022800 	.word	0x40022800
 8003294:	40021800 	.word	0x40021800
 8003298:	40022000 	.word	0x40022000

0800329c <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800329c:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 800329e:	6802      	ldr	r2, [r0, #0]
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_LTDC_MspDeInit+0x50>)
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d120      	bne.n	80032e8 <HAL_LTDC_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_LTDC_MspDeInit+0x54>)
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 80032a8:	2110      	movs	r1, #16
 80032aa:	4812      	ldr	r0, [pc, #72]	; (80032f4 <HAL_LTDC_MspDeInit+0x58>)
    __HAL_RCC_LTDC_CLK_DISABLE();
 80032ac:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80032ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032b2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 80032b4:	f002 f9fa 	bl	80056ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80032b8:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80032bc:	480e      	ldr	r0, [pc, #56]	; (80032f8 <HAL_LTDC_MspDeInit+0x5c>)
 80032be:	f002 f9f5 	bl	80056ac <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80032c2:	21f7      	movs	r1, #247	; 0xf7
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <HAL_LTDC_MspDeInit+0x60>)
 80032c6:	f002 f9f1 	bl	80056ac <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 80032ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ce:	480c      	ldr	r0, [pc, #48]	; (8003300 <HAL_LTDC_MspDeInit+0x64>)
 80032d0:	f002 f9ec 	bl	80056ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 80032d4:	480b      	ldr	r0, [pc, #44]	; (8003304 <HAL_LTDC_MspDeInit+0x68>)
 80032d6:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 80032da:	f002 f9e7 	bl	80056ac <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80032de:	2058      	movs	r0, #88	; 0x58

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 80032e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80032e4:	f001 bd7a 	b.w	8004ddc <HAL_NVIC_DisableIRQ>
 80032e8:	bd08      	pop	{r3, pc}
 80032ea:	bf00      	nop
 80032ec:	40016800 	.word	0x40016800
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40022400 	.word	0x40022400
 80032fc:	40022800 	.word	0x40022800
 8003300:	40021800 	.word	0x40021800
 8003304:	40022000 	.word	0x40022000

08003308 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800330a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 800330c:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800330e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8003310:	2c00      	cmp	r4, #0
 8003312:	d14e      	bne.n	80033b2 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8003314:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800331a:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 800331c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003320:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003322:	4827      	ldr	r0, [pc, #156]	; (80033c0 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003330:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800333c:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003340:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003342:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003344:	f002 f85e 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003348:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800334c:	a901      	add	r1, sp, #4
 800334e:	481d      	ldr	r0, [pc, #116]	; (80033c4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003350:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003356:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003358:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800335a:	f002 f853 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800335e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003362:	a901      	add	r1, sp, #4
 8003364:	4818      	ldr	r0, [pc, #96]	; (80033c8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003366:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800336e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f002 f848 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003374:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003378:	a901      	add	r1, sp, #4
 800337a:	4814      	ldr	r0, [pc, #80]	; (80033cc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800337c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003384:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003386:	f002 f83d 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800338a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800338c:	a901      	add	r1, sp, #4
 800338e:	4810      	ldr	r0, [pc, #64]	; (80033d0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003390:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003396:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003398:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800339a:	f002 f833 	bl	8005404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800339e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033a0:	a901      	add	r1, sp, #4
 80033a2:	480c      	ldr	r0, [pc, #48]	; (80033d4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80033a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f002 f829 	bl	8005404 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80033b2:	b007      	add	sp, #28
 80033b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2001bf84 	.word	0x2001bf84
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40021800 	.word	0x40021800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021400 	.word	0x40021400
 80033d0:	40021c00 	.word	0x40021c00
 80033d4:	40020800 	.word	0x40020800

080033d8 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80033d8:	b507      	push	{r0, r1, r2, lr}
  if(dma2dHandle->Instance==DMA2D)
 80033da:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_DMA2D_MspInit+0x38>)
 80033dc:	6802      	ldr	r2, [r0, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d112      	bne.n	8003408 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033e2:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80033e6:	205a      	movs	r0, #90	; 0x5a
 80033e8:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80033f2:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80033fe:	f001 fc91 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003402:	205a      	movs	r0, #90	; 0x5a
 8003404:	f001 fcd6 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003408:	b003      	add	sp, #12
 800340a:	f85d fb04 	ldr.w	pc, [sp], #4
 800340e:	bf00      	nop
 8003410:	4002b000 	.word	0x4002b000

08003414 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 8003414:	2200      	movs	r2, #0
 8003416:	4b01      	ldr	r3, [pc, #4]	; (800341c <TransferComplete+0x8>)
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	4770      	bx	lr
 800341c:	2001bf88 	.word	0x2001bf88

08003420 <GetBufferSize>:
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <GetBufferSize+0x14>)
 8003422:	231c      	movs	r3, #28
 8003424:	fb03 2300 	mla	r3, r3, r0, r2
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	6918      	ldr	r0, [r3, #16]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4350      	muls	r0, r2
}
 8003430:	4358      	muls	r0, r3
 8003432:	4770      	bx	lr
 8003434:	2002198c 	.word	0x2002198c

08003438 <_DMA_ExecOperation>:
  if ( TransferInProgress == 0 )
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <_DMA_ExecOperation+0xc>)
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	2a00      	cmp	r2, #0
 800343e:	d1fc      	bne.n	800343a <_DMA_ExecOperation+0x2>
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2001bf88 	.word	0x2001bf88

08003448 <_DMA_ConvertColor>:
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	9d06      	ldr	r5, [sp, #24]
 800344c:	4617      	mov	r7, r2
 800344e:	461e      	mov	r6, r3
  _DMA_ExecOperation();
 8003450:	f7ff fff2 	bl	8003438 <_DMA_ExecOperation>
  TransferInProgress = 1;
 8003454:	2201      	movs	r2, #1
 8003456:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <_DMA_ConvertColor+0x40>)
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003458:	4c0c      	ldr	r4, [pc, #48]	; (800348c <_DMA_ConvertColor+0x44>)
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 800345a:	042d      	lsls	r5, r5, #16
  TransferInProgress = 1;
 800345c:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800345e:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003462:	4315      	orrs	r5, r2
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003464:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 8003466:	60e0      	str	r0, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8003468:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 800346a:	2100      	movs	r1, #0
 800346c:	6121      	str	r1, [r4, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 800346e:	6421      	str	r1, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8003470:	61e7      	str	r7, [r4, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 8003472:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003474:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347c:	4313      	orrs	r3, r2
 800347e:	6023      	str	r3, [r4, #0]
}
 8003480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _DMA_ExecOperation();
 8003484:	f7ff bfd8 	b.w	8003438 <_DMA_ExecOperation>
 8003488:	2001bf88 	.word	0x2001bf88
 800348c:	4002b000 	.word	0x4002b000

08003490 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8003490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003494:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003496:	4690      	mov	r8, r2
 8003498:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800349a:	4689      	mov	r9, r1
 800349c:	461d      	mov	r5, r3
 800349e:	9908      	ldr	r1, [sp, #32]

  _DMA_ExecOperation();
 80034a0:	f7ff ffca 	bl	8003438 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 80034a4:	2201      	movs	r2, #1
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <_DMA_DrawAlphaBitmap+0x50>)
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 80034a8:	b2ad      	uxth	r5, r5
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80034aa:	4c0e      	ldr	r4, [pc, #56]	; (80034e4 <_DMA_DrawAlphaBitmap+0x54>)
  TransferInProgress = 1;
 80034ac:	701a      	strb	r2, [r3, #0]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 80034ae:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80034b2:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <_DMA_DrawAlphaBitmap+0x58>)
 80034b4:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 80034b6:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 80034b8:	f8c4 900c 	str.w	r9, [r4, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 80034bc:	6160      	str	r0, [r4, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 80034be:	63e0      	str	r0, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 80034c0:	6121      	str	r1, [r4, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 80034c2:	61a7      	str	r7, [r4, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 80034c4:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 80034c6:	61e3      	str	r3, [r4, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 80034c8:	6266      	str	r6, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 80034ca:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 80034cc:	6465      	str	r5, [r4, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034d4:	4313      	orrs	r3, r2
 80034d6:	6023      	str	r3, [r4, #0]

_DMA_ExecOperation();  
}
 80034d8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
_DMA_ExecOperation();  
 80034dc:	f7ff bfac 	b.w	8003438 <_DMA_ExecOperation>
 80034e0:	2001bf88 	.word	0x2001bf88
 80034e4:	4002b000 	.word	0x4002b000
 80034e8:	00020200 	.word	0x00020200

080034ec <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
  OffLineDst = (BytesPerLineDst / 4) - xSize;
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 80034ee:	2400      	movs	r4, #0
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 80034f0:	b085      	sub	sp, #20
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 80034f2:	2704      	movs	r7, #4
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 80034f4:	9402      	str	r4, [sp, #8]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 80034f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 80034f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 80034fa:	fb95 f5f7 	sdiv	r5, r5, r7
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 80034fe:	fb94 f4f7 	sdiv	r4, r4, r7
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003502:	1aad      	subs	r5, r5, r2
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8003504:	1aa4      	subs	r4, r4, r2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8003506:	9501      	str	r5, [sp, #4]
 8003508:	9400      	str	r4, [sp, #0]
 800350a:	f7ff ffc1 	bl	8003490 <_DMA_DrawAlphaBitmap>
}
 800350e:	b005      	add	sp, #20
 8003510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003514 <GetPixelformat>:
  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8003514:	2801      	cmp	r0, #1
 8003516:	d835      	bhi.n	8003584 <GetPixelformat+0x70>
  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 8003518:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <GetPixelformat+0x90>)
 800351a:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <GetPixelformat+0x94>)
 800351c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003520:	4922      	ldr	r1, [pc, #136]	; (80035ac <GetPixelformat+0x98>)
 8003522:	4293      	cmp	r3, r2
 8003524:	bf18      	it	ne
 8003526:	428b      	cmpne	r3, r1
 8003528:	d02c      	beq.n	8003584 <GetPixelformat+0x70>
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <GetPixelformat+0x9c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d029      	beq.n	8003584 <GetPixelformat+0x70>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 8003530:	4a20      	ldr	r2, [pc, #128]	; (80035b4 <GetPixelformat+0xa0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d028      	beq.n	8003588 <GetPixelformat+0x74>
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <GetPixelformat+0xa4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d025      	beq.n	8003588 <GetPixelformat+0x74>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <GetPixelformat+0xa8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d024      	beq.n	800358c <GetPixelformat+0x78>
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <GetPixelformat+0xac>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d021      	beq.n	800358c <GetPixelformat+0x78>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 8003548:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <GetPixelformat+0xb0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d020      	beq.n	8003590 <GetPixelformat+0x7c>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <GetPixelformat+0xb4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01f      	beq.n	8003594 <GetPixelformat+0x80>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <GetPixelformat+0xb8>)
 8003556:	491e      	ldr	r1, [pc, #120]	; (80035d0 <GetPixelformat+0xbc>)
 8003558:	428b      	cmp	r3, r1
 800355a:	bf18      	it	ne
 800355c:	4293      	cmpne	r3, r2
 800355e:	491d      	ldr	r1, [pc, #116]	; (80035d4 <GetPixelformat+0xc0>)
 8003560:	bf0c      	ite	eq
 8003562:	2201      	moveq	r2, #1
 8003564:	2200      	movne	r2, #0
 8003566:	428b      	cmp	r3, r1
 8003568:	bf08      	it	eq
 800356a:	f042 0201 	orreq.w	r2, r2, #1
 800356e:	b99a      	cbnz	r2, 8003598 <GetPixelformat+0x84>
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <GetPixelformat+0xc4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d010      	beq.n	8003598 <GetPixelformat+0x84>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <GetPixelformat+0xc8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <GetPixelformat+0x88>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 800357c:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <GetPixelformat+0xcc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <GetPixelformat+0x8c>
 8003582:	e7fe      	b.n	8003582 <GetPixelformat+0x6e>
    return 0;
 8003584:	2000      	movs	r0, #0
 8003586:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 8003588:	2001      	movs	r0, #1
 800358a:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB565;
 800358c:	2002      	movs	r0, #2
 800358e:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8003590:	2003      	movs	r0, #3
 8003592:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8003594:	2004      	movs	r0, #4
 8003596:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 8003598:	2005      	movs	r0, #5
 800359a:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 800359c:	2006      	movs	r0, #6
 800359e:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL88;
 80035a0:	2007      	movs	r0, #7
} 
 80035a2:	4770      	bx	lr
 80035a4:	0802aa34 	.word	0x0802aa34
 80035a8:	08023bb8 	.word	0x08023bb8
 80035ac:	08023b28 	.word	0x08023b28
 80035b0:	08023b70 	.word	0x08023b70
 80035b4:	08023ba0 	.word	0x08023ba0
 80035b8:	08023b58 	.word	0x08023b58
 80035bc:	08023b40 	.word	0x08023b40
 80035c0:	08023b88 	.word	0x08023b88
 80035c4:	08023af8 	.word	0x08023af8
 80035c8:	08023b10 	.word	0x08023b10
 80035cc:	08023a80 	.word	0x08023a80
 80035d0:	08023a98 	.word	0x08023a98
 80035d4:	08023ab0 	.word	0x08023ab0
 80035d8:	08023ac8 	.word	0x08023ac8
 80035dc:	08023a68 	.word	0x08023a68
 80035e0:	08023ae0 	.word	0x08023ae0

080035e4 <DMA2D_CopyBuffer>:
{
 80035e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e8:	9d08      	ldr	r5, [sp, #32]
 80035ea:	468a      	mov	sl, r1
 80035ec:	4691      	mov	r9, r2
 80035ee:	461e      	mov	r6, r3
 80035f0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80035f4:	b2ad      	uxth	r5, r5
{
 80035f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  _DMA_ExecOperation();
 80035f8:	f7ff ff1e 	bl	8003438 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <DMA2D_CopyBuffer+0x50>)
 80035fe:	2201      	movs	r2, #1
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8003600:	4c0d      	ldr	r4, [pc, #52]	; (8003638 <DMA2D_CopyBuffer+0x54>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8003602:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  TransferInProgress = 1;	
 8003606:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8003608:	f7ff ff84 	bl	8003514 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003610:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       
 8003612:	f8c4 a00c 	str.w	sl, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8003616:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800361a:	f8c4 8010 	str.w	r8, [r4, #16]
  DMA2D->OOR     = OffLineDst; 
 800361e:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormat;  
 8003620:	61e0      	str	r0, [r4, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8003622:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6023      	str	r3, [r4, #0]
}
 800362c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_DMA_ExecOperation();
 8003630:	f7ff bf02 	b.w	8003438 <_DMA_ExecOperation>
 8003634:	2001bf88 	.word	0x2001bf88
 8003638:	4002b000 	.word	0x4002b000

0800363c <LCD_LL_CopyBuffer>:
{
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	4615      	mov	r5, r2
 8003642:	4606      	mov	r6, r0
  BufferSize = GetBufferSize(LayerIndex);
 8003644:	f7ff feec 	bl	8003420 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 8003648:	231c      	movs	r3, #28
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <LCD_LL_CopyBuffer+0x38>)
 800364c:	4373      	muls	r3, r6
 800364e:	58d7      	ldr	r7, [r2, r3]
 8003650:	18d4      	adds	r4, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8003652:	2300      	movs	r3, #0
 8003654:	fb00 7205 	mla	r2, r0, r5, r7
 8003658:	9302      	str	r3, [sp, #8]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	fb00 7101 	mla	r1, r0, r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	f7ff ffbc 	bl	80035e4 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800366c:	60a5      	str	r5, [r4, #8]
}
 800366e:	b005      	add	sp, #20
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	bf00      	nop
 8003674:	2002198c 	.word	0x2002198c

08003678 <LCD_LL_CopyRect>:
{
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4607      	mov	r7, r0
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800367e:	261c      	movs	r6, #28
{
 8003680:	469a      	mov	sl, r3
 8003682:	4614      	mov	r4, r2
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003684:	437e      	muls	r6, r7
  BufferSize = GetBufferSize(LayerIndex);
 8003686:	f7ff fecb 	bl	8003420 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <LCD_LL_CopyRect+0x58>)
{
 800368c:	ad08      	add	r5, sp, #32
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800368e:	199a      	adds	r2, r3, r6
 8003690:	599b      	ldr	r3, [r3, r6]
{
 8003692:	e895 0320 	ldmia.w	r5, {r5, r8, r9}
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003696:	68d6      	ldr	r6, [r2, #12]
 8003698:	f8d2 e014 	ldr.w	lr, [r2, #20]
 800369c:	6852      	ldr	r2, [r2, #4]
 800369e:	fb04 1406 	mla	r4, r4, r6, r1
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80036a2:	f8cd 9020 	str.w	r9, [sp, #32]
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80036a6:	4350      	muls	r0, r2
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80036a8:	fb05 a206 	mla	r2, r5, r6, sl
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80036ac:	eba6 0608 	sub.w	r6, r6, r8
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80036b0:	fb0e 3404 	mla	r4, lr, r4, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80036b4:	fb0e 3202 	mla	r2, lr, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80036b8:	2300      	movs	r3, #0
 80036ba:	1821      	adds	r1, r4, r0
 80036bc:	9609      	str	r6, [sp, #36]	; 0x24
 80036be:	930a      	str	r3, [sp, #40]	; 0x28
 80036c0:	4402      	add	r2, r0
 80036c2:	4643      	mov	r3, r8
 80036c4:	4638      	mov	r0, r7
}
 80036c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80036ca:	f7ff bf8b 	b.w	80035e4 <DMA2D_CopyBuffer>
 80036ce:	bf00      	nop
 80036d0:	2002198c 	.word	0x2002198c

080036d4 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 80036d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d8:	4607      	mov	r7, r0
 80036da:	4698      	mov	r8, r3
 80036dc:	4614      	mov	r4, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80036de:	f7ff fe9f 	bl	8003420 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80036e2:	231c      	movs	r3, #28
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <LCD_LL_DrawBitmap16bpp+0x64>)
{
 80036e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80036e8:	437b      	muls	r3, r7
{
 80036ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80036ee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80036f2:	eb02 0e03 	add.w	lr, r2, r3
 80036f6:	f8de 600c 	ldr.w	r6, [lr, #12]
 80036fa:	fb04 1406 	mla	r4, r4, r6, r1
 80036fe:	58d1      	ldr	r1, [r2, r3]
 8003700:	f8de 3014 	ldr.w	r3, [lr, #20]
  OffLineSrc = (BytesPerLine / 2) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8003704:	eba6 0609 	sub.w	r6, r6, r9
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003708:	f8de 2008 	ldr.w	r2, [lr, #8]
 800370c:	fb03 1404 	mla	r4, r3, r4, r1
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003710:	2302      	movs	r3, #2
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003712:	4641      	mov	r1, r8
 8003714:	960c      	str	r6, [sp, #48]	; 0x30
 8003716:	fb02 4200 	mla	r2, r2, r0, r4
 800371a:	4638      	mov	r0, r7
 800371c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003720:	fb95 f5f3 	sdiv	r5, r5, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003724:	464b      	mov	r3, r9
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8003726:	eba5 0509 	sub.w	r5, r5, r9
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800372a:	950b      	str	r5, [sp, #44]	; 0x2c
}
 800372c:	b001      	add	sp, #4
 800372e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8003732:	f7ff bf57 	b.w	80035e4 <DMA2D_CopyBuffer>
 8003736:	bf00      	nop
 8003738:	2002198c 	.word	0x2002198c

0800373c <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800373c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003740:	4681      	mov	r9, r0
 8003742:	469a      	mov	sl, r3
 8003744:	4617      	mov	r7, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8003746:	f7ff fe6b 	bl	8003420 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800374a:	221c      	movs	r2, #28
 800374c:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <LCD_LL_DrawBitmap32bpp+0x90>)
{
 800374e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003750:	fb02 f209 	mul.w	r2, r2, r9
{
 8003754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003758:	9c09      	ldr	r4, [sp, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800375a:	eb03 0e02 	add.w	lr, r3, r2
 800375e:	589a      	ldr	r2, [r3, r2]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8003760:	2304      	movs	r3, #4
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8003762:	b2a4      	uxth	r4, r4
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003764:	f8de 500c 	ldr.w	r5, [lr, #12]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8003768:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800376c:	fb07 1705 	mla	r7, r7, r5, r1
 8003770:	f8de 1014 	ldr.w	r1, [lr, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8003774:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003778:	fb01 2707 	mla	r7, r1, r7, r2
 800377c:	f8de 2008 	ldr.w	r2, [lr, #8]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8003780:	fb96 f6f3 	sdiv	r6, r6, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003784:	fb02 7700 	mla	r7, r2, r0, r7
  _DMA_ExecOperation();
 8003788:	f7ff fe56 	bl	8003438 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 800378c:	2201      	movs	r2, #1
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <LCD_LL_DrawBitmap32bpp+0x94>)
  PixelFormat = GetPixelformat(LayerIndex);
 8003790:	4648      	mov	r0, r9
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8003792:	eba6 0608 	sub.w	r6, r6, r8
  TransferInProgress = 1;	
 8003796:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8003798:	f7ff febc 	bl	8003514 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <LCD_LL_DrawBitmap32bpp+0x98>)
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <LCD_LL_DrawBitmap32bpp+0x9c>)
 80037a0:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 80037a2:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       
 80037a4:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80037a8:	63d7      	str	r7, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 80037aa:	6157      	str	r7, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 80037ac:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80037ae:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 80037b0:	6195      	str	r5, [r2, #24]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 80037b2:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 80037b4:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 80037b6:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80037b8:	6454      	str	r4, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	f043 0301 	orr.w	r3, r3, #1
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
}
 80037c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= DMA2D_CR_START;   
 80037c4:	6013      	str	r3, [r2, #0]
  _DMA_ExecOperation();
 80037c6:	f7ff be37 	b.w	8003438 <_DMA_ExecOperation>
 80037ca:	bf00      	nop
 80037cc:	2002198c 	.word	0x2002198c
 80037d0:	2001bf88 	.word	0x2001bf88
 80037d4:	4002b000 	.word	0x4002b000
 80037d8:	00020200 	.word	0x00020200

080037dc <_LCD_DrawBitmapAlpha>:
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 80037dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	4606      	mov	r6, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80037e2:	271c      	movs	r7, #28
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 80037e4:	4698      	mov	r8, r3
 80037e6:	9101      	str	r1, [sp, #4]
 80037e8:	4614      	mov	r4, r2
  PixelFormat = GetPixelformat(LayerIndex);
 80037ea:	f7ff fe93 	bl	8003514 <GetPixelformat>
 80037ee:	4683      	mov	fp, r0
  BufferSize = GetBufferSize(LayerIndex);
 80037f0:	4630      	mov	r0, r6
 80037f2:	f7ff fe15 	bl	8003420 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80037f6:	4377      	muls	r7, r6
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <_LCD_DrawBitmapAlpha+0x70>)
 80037fa:	9901      	ldr	r1, [sp, #4]
 80037fc:	eb02 0e07 	add.w	lr, r2, r7
 8003800:	59d2      	ldr	r2, [r2, r7]
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8003802:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003804:	f8de 600c 	ldr.w	r6, [lr, #12]
 8003808:	f8de 3014 	ldr.w	r3, [lr, #20]
 800380c:	fb04 1406 	mla	r4, r4, r6, r1
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8003810:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003814:	f8de 7008 	ldr.w	r7, [lr, #8]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8003818:	4641      	mov	r1, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800381a:	fb03 2404 	mla	r4, r3, r4, r2
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800381e:	2304      	movs	r3, #4
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8003820:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8003824:	eba6 0609 	sub.w	r6, r6, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8003828:	464a      	mov	r2, r9
 800382a:	fb07 4000 	mla	r0, r7, r0, r4
 800382e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003832:	960d      	str	r6, [sp, #52]	; 0x34
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8003834:	fb95 f5f3 	sdiv	r5, r5, r3
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8003838:	4653      	mov	r3, sl
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800383a:	eba5 0509 	sub.w	r5, r5, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800383e:	950c      	str	r5, [sp, #48]	; 0x30
}
 8003840:	b003      	add	sp, #12
 8003842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8003846:	f7ff be23 	b.w	8003490 <_DMA_DrawAlphaBitmap>
 800384a:	bf00      	nop
 800384c:	2002198c 	.word	0x2002198c

08003850 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8003850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	4681      	mov	r9, r0
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003856:	261c      	movs	r6, #28
{
 8003858:	469a      	mov	sl, r3
 800385a:	9101      	str	r1, [sp, #4]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800385c:	fb06 f609 	mul.w	r6, r6, r9
{
 8003860:	4614      	mov	r4, r2
  BufferSize = GetBufferSize(LayerIndex);
 8003862:	f7ff fddd 	bl	8003420 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003866:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <LCD_LL_DrawBitmap8bpp+0x84>)
 8003868:	9901      	ldr	r1, [sp, #4]
 800386a:	1993      	adds	r3, r2, r6
{
 800386c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003870:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8003872:	68dd      	ldr	r5, [r3, #12]
{
 8003874:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003878:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800387c:	fb04 1405 	mla	r4, r4, r5, r1
 8003880:	5991      	ldr	r1, [r2, r6]
 8003882:	695a      	ldr	r2, [r3, #20]
  OffLineSrc = BytesPerLine - xSize;
 8003884:	ebab 0608 	sub.w	r6, fp, r8
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8003888:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800388c:	fb02 1404 	mla	r4, r2, r4, r1
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	fb02 4400 	mla	r4, r2, r0, r4
  PixelFormat = GetPixelformat(LayerIndex);
 8003896:	4648      	mov	r0, r9
 8003898:	f7ff fe3c 	bl	8003514 <GetPixelformat>
  _DMA_ExecOperation();
 800389c:	f7ff fdcc 	bl	8003438 <_DMA_ExecOperation>
  TransferInProgress = 1;
 80038a0:	2201      	movs	r2, #1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <LCD_LL_DrawBitmap8bpp+0x88>)
 80038a4:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80038a6:	f44f 3381 	mov.w	r3, #66048	; 0x10200
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <LCD_LL_DrawBitmap8bpp+0x8c>)
 80038ac:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80038ae:	2305      	movs	r3, #5
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 80038b0:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80038b4:	63d4      	str	r4, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 80038b6:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 80038b8:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80038ba:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 80038bc:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 80038be:	6457      	str	r7, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6013      	str	r3, [r2, #0]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
}
 80038c8:	b003      	add	sp, #12
 80038ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_ExecOperation();	
 80038ce:	f7ff bdb3 	b.w	8003438 <_DMA_ExecOperation>
 80038d2:	bf00      	nop
 80038d4:	2002198c 	.word	0x2002198c
 80038d8:	2001bf88 	.word	0x2001bf88
 80038dc:	4002b000 	.word	0x4002b000

080038e0 <_DMA_Index2ColorBulk.isra.2>:
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80038e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038e2:	4614      	mov	r4, r2
 80038e4:	460d      	mov	r5, r1
 80038e6:	461a      	mov	r2, r3
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 80038e8:	2300      	movs	r3, #0
 80038ea:	9400      	str	r4, [sp, #0]
 80038ec:	f7ff fdac 	bl	8003448 <_DMA_ConvertColor>
 80038f0:	462b      	mov	r3, r5
 80038f2:	4621      	mov	r1, r4
  while (NumItems >= 4) {
 80038f4:	2903      	cmp	r1, #3
 80038f6:	f103 0310 	add.w	r3, r3, #16
 80038fa:	d80a      	bhi.n	8003912 <_DMA_Index2ColorBulk.isra.2+0x32>
 80038fc:	08a3      	lsrs	r3, r4, #2
 80038fe:	eb05 1103 	add.w	r1, r5, r3, lsl #4
 8003902:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
 8003906:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  while (NumItems--) {
 800390a:	42a1      	cmp	r1, r4
 800390c:	d143      	bne.n	8003996 <_DMA_Index2ColorBulk.isra.2+0xb6>
}
 800390e:	b002      	add	sp, #8
 8003910:	bd70      	pop	{r4, r5, r6, pc}
    Color = *(pColor + 0);
 8003912:	f853 2c10 	ldr.w	r2, [r3, #-16]
    NumItems -= 4;
 8003916:	3904      	subs	r1, #4
    Color = ((Color << 24) >>  8)  // Red
 8003918:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800391a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800391e:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8003922:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003926:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 8003928:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800392a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800392e:	4302      	orrs	r2, r0
    *(pColor + 0) = Color;
 8003930:	f843 2c10 	str.w	r2, [r3, #-16]
    Color = *(pColor + 1);
 8003934:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    Color = ((Color << 24) >>  8)  // Red
 8003938:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800393a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800393e:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8003942:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003946:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 8003948:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800394a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800394e:	4302      	orrs	r2, r0
    *(pColor + 1) = Color;
 8003950:	f843 2c0c 	str.w	r2, [r3, #-12]
    Color = *(pColor + 2);
 8003954:	f853 2c08 	ldr.w	r2, [r3, #-8]
    Color = ((Color << 24) >>  8)  // Red
 8003958:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800395a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800395e:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8003962:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003966:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 8003968:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800396a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800396e:	4302      	orrs	r2, r0
    *(pColor + 2) = Color;
 8003970:	f843 2c08 	str.w	r2, [r3, #-8]
    Color = *(pColor + 3);
 8003974:	f853 2c04 	ldr.w	r2, [r3, #-4]
    Color = ((Color << 24) >>  8)  // Red
 8003978:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800397a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800397e:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8003982:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003986:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 8003988:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800398a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800398e:	4302      	orrs	r2, r0
    *(pColor + 3) = Color;
 8003990:	f843 2c04 	str.w	r2, [r3, #-4]
 8003994:	e7ae      	b.n	80038f4 <_DMA_Index2ColorBulk.isra.2+0x14>
    Color = *pColor;
 8003996:	680b      	ldr	r3, [r1, #0]
    Color = ((Color << 24) >>  8)  // Red
 8003998:	0618      	lsls	r0, r3, #24
          | ((Color <<  8) >> 24)  // Blue
 800399a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800399e:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
          |  (Color & 0xFF00)      // Green
 80039a2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80039a6:	43db      	mvns	r3, r3
          | ((Color <<  8) >> 24)  // Blue
 80039a8:	4302      	orrs	r2, r0
          | (~Color & 0xFF000000); // Alpha
 80039aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80039ae:	4313      	orrs	r3, r2
    *pColor++ = Color;
 80039b0:	f841 3b04 	str.w	r3, [r1], #4
 80039b4:	e7a9      	b.n	800390a <_DMA_Index2ColorBulk.isra.2+0x2a>

080039b6 <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 80039b6:	2300      	movs	r3, #0
 80039b8:	f7ff bf92 	b.w	80038e0 <_DMA_Index2ColorBulk.isra.2>

080039bc <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 80039bc:	2304      	movs	r3, #4
 80039be:	f7ff bf8f 	b.w	80038e0 <_DMA_Index2ColorBulk.isra.2>

080039c2 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 80039c2:	2302      	movs	r3, #2
 80039c4:	f7ff bf8c 	b.w	80038e0 <_DMA_Index2ColorBulk.isra.2>

080039c8 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 80039c8:	2303      	movs	r3, #3
 80039ca:	f7ff bf89 	b.w	80038e0 <_DMA_Index2ColorBulk.isra.2>
	...

080039d0 <_DMA_Color2IndexBulk.isra.3>:
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80039d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039d2:	4606      	mov	r6, r0
 80039d4:	4d3d      	ldr	r5, [pc, #244]	; (8003acc <_DMA_Color2IndexBulk.isra.3+0xfc>)
 80039d6:	4617      	mov	r7, r2
  while (NumItems >= 4) {
 80039d8:	2f03      	cmp	r7, #3
 80039da:	f106 0610 	add.w	r6, r6, #16
 80039de:	f105 0510 	add.w	r5, r5, #16
 80039e2:	d811      	bhi.n	8003a08 <_DMA_Color2IndexBulk.isra.3+0x38>
 80039e4:	0894      	lsrs	r4, r2, #2
 80039e6:	4f3a      	ldr	r7, [pc, #232]	; (8003ad0 <_DMA_Color2IndexBulk.isra.3+0x100>)
 80039e8:	0125      	lsls	r5, r4, #4
 80039ea:	eba2 0484 	sub.w	r4, r2, r4, lsl #2
 80039ee:	442f      	add	r7, r5
 80039f0:	4428      	add	r0, r5
 80039f2:	eb07 0684 	add.w	r6, r7, r4, lsl #2
  while (NumItems--) {
 80039f6:	42b7      	cmp	r7, r6
 80039f8:	d154      	bne.n	8003aa4 <_DMA_Color2IndexBulk.isra.3+0xd4>
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 80039fa:	9200      	str	r2, [sp, #0]
 80039fc:	2200      	movs	r2, #0
 80039fe:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <_DMA_Color2IndexBulk.isra.3+0x100>)
 8003a00:	f7ff fd22 	bl	8003448 <_DMA_ConvertColor>
}
 8003a04:	b003      	add	sp, #12
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Color = *(pColorSrc + 0);
 8003a08:	f856 4c10 	ldr.w	r4, [r6, #-16]
    NumItems -= 4;
 8003a0c:	3f04      	subs	r7, #4
    Color = ((Color << 24) >>  8)  // Red
 8003a0e:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8003a12:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8003a16:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 8003a1a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003a1e:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8003a20:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8003a24:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8003a28:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 0) = Color;
 8003a2c:	f845 4c20 	str.w	r4, [r5, #-32]
    Color = *(pColorSrc + 1);
 8003a30:	f856 4c0c 	ldr.w	r4, [r6, #-12]
    Color = ((Color << 24) >>  8)  // Red
 8003a34:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8003a38:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8003a3c:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 8003a40:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003a44:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8003a46:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8003a4a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8003a4e:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 1) = Color;
 8003a52:	f845 4c1c 	str.w	r4, [r5, #-28]
    Color = *(pColorSrc + 2);
 8003a56:	f856 4c08 	ldr.w	r4, [r6, #-8]
    Color = ((Color << 24) >>  8)  // Red
 8003a5a:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8003a5e:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8003a62:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 8003a66:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003a6a:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8003a6c:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8003a70:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8003a74:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 2) = Color;
 8003a78:	f845 4c18 	str.w	r4, [r5, #-24]
    Color = *(pColorSrc + 3);
 8003a7c:	f856 4c04 	ldr.w	r4, [r6, #-4]
    Color = ((Color << 24) >>  8)  // Red
 8003a80:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8003a84:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8003a88:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 8003a8c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003a90:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8003a92:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8003a96:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8003a9a:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 3) = Color;
 8003a9e:	f845 4c14 	str.w	r4, [r5, #-20]
 8003aa2:	e799      	b.n	80039d8 <_DMA_Color2IndexBulk.isra.3+0x8>
    Color = *pColorSrc++;
 8003aa4:	f850 4b04 	ldr.w	r4, [r0], #4
    Color = ((Color << 24) >>  8)  // Red
 8003aa8:	ea4f 6e04 	mov.w	lr, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8003aac:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003ab0:	ea45 251e 	orr.w	r5, r5, lr, lsr #8
          |  (Color & 0xFF00)      // Green
 8003ab4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8003ab8:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8003aba:	ea45 050e 	orr.w	r5, r5, lr
          | (~Color & 0xFF000000); // Alpha
 8003abe:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8003ac2:	432c      	orrs	r4, r5
    *pColorDst++ = Color;
 8003ac4:	f847 4b04 	str.w	r4, [r7], #4
 8003ac8:	e795      	b.n	80039f6 <_DMA_Color2IndexBulk.isra.3+0x26>
 8003aca:	bf00      	nop
 8003acc:	2001bf9c 	.word	0x2001bf9c
 8003ad0:	2001bf8c 	.word	0x2001bf8c

08003ad4 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f7ff bf7b 	b.w	80039d0 <_DMA_Color2IndexBulk.isra.3>

08003ada <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8003ada:	2304      	movs	r3, #4
 8003adc:	f7ff bf78 	b.w	80039d0 <_DMA_Color2IndexBulk.isra.3>

08003ae0 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f7ff bf75 	b.w	80039d0 <_DMA_Color2IndexBulk.isra.3>

08003ae6 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	f7ff bf72 	b.w	80039d0 <_DMA_Color2IndexBulk.isra.3>

08003aec <LCD_LL_FillRect>:
{
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	9c08      	ldr	r4, [sp, #32]
 8003af2:	4681      	mov	r9, r0
 8003af4:	460e      	mov	r6, r1
 8003af6:	4617      	mov	r7, r2
 8003af8:	461d      	mov	r5, r3
 8003afa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8003afe:	f00e fbcf 	bl	80122a0 <GUI_GetDrawMode>
 8003b02:	2801      	cmp	r0, #1
 8003b04:	d111      	bne.n	8003b2a <LCD_LL_FillRect+0x3e>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2119      	movs	r1, #25
 8003b0a:	4648      	mov	r0, r9
 8003b0c:	f014 fcfa 	bl	8018504 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8003b10:	462a      	mov	r2, r5
 8003b12:	4639      	mov	r1, r7
 8003b14:	4630      	mov	r0, r6
 8003b16:	4623      	mov	r3, r4
 8003b18:	f013 fcd6 	bl	80174c8 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8003b1c:	4648      	mov	r0, r9
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <LCD_LL_FillRect+0xb4>)
 8003b20:	2119      	movs	r1, #25
}
 8003b22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8003b26:	f014 bced 	b.w	8018504 <LCD_SetDevFunc>
    BufferSize = GetBufferSize(LayerIndex);
 8003b2a:	4648      	mov	r0, r9
    xSize = x1 - x0 + 1;
 8003b2c:	1bad      	subs	r5, r5, r6
    BufferSize = GetBufferSize(LayerIndex);
 8003b2e:	f7ff fc77 	bl	8003420 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b32:	211c      	movs	r1, #28
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <LCD_LL_FillRect+0xb8>)
    ySize = y1 - y0 + 1;
 8003b36:	1be4      	subs	r4, r4, r7
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b38:	fb01 f109 	mul.w	r1, r1, r9
    xSize = x1 - x0 + 1;
 8003b3c:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 8003b3e:	3401      	adds	r4, #1
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b40:	eb02 0e01 	add.w	lr, r2, r1
 8003b44:	5851      	ldr	r1, [r2, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003b46:	b2a4      	uxth	r4, r4
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b48:	f8de 300c 	ldr.w	r3, [lr, #12]
 8003b4c:	f8de 2014 	ldr.w	r2, [lr, #20]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003b50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b54:	fb03 6607 	mla	r6, r3, r7, r6
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8003b58:	eba3 0a05 	sub.w	sl, r3, r5
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8003b5c:	fb02 1606 	mla	r6, r2, r6, r1
 8003b60:	f8de 2008 	ldr.w	r2, [lr, #8]
 8003b64:	fb02 6600 	mla	r6, r2, r0, r6
  _DMA_ExecOperation();
 8003b68:	f7ff fc66 	bl	8003438 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <LCD_LL_FillRect+0xbc>)
  PixelFormat = GetPixelformat(LayerIndex);
 8003b70:	4648      	mov	r0, r9
  TransferInProgress = 1;	
 8003b72:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8003b74:	f7ff fcce 	bl	8003514 <GetPixelformat>
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <LCD_LL_FillRect+0xc0>)
 8003b7a:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <LCD_LL_FillRect+0xc4>)
 8003b7c:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 8003b7e:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;                      
 8003b82:	63de      	str	r6, [r3, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 8003b84:	f8c3 a040 	str.w	sl, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 8003b88:	6358      	str	r0, [r3, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8003b8a:	645c      	str	r4, [r3, #68]	; 0x44
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	f042 0201 	orr.w	r2, r2, #1
}
 8003b96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 8003b9a:	601a      	str	r2, [r3, #0]
  _DMA_ExecOperation();
 8003b9c:	f7ff bc4c 	b.w	8003438 <_DMA_ExecOperation>
 8003ba0:	08003aed 	.word	0x08003aed
 8003ba4:	2002198c 	.word	0x2002198c
 8003ba8:	2001bf88 	.word	0x2001bf88
 8003bac:	4002b000 	.word	0x4002b000
 8003bb0:	00030200 	.word	0x00030200

08003bb4 <_Index2ColorBulk_M8888I_DMA2D>:
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f7ff be93 	b.w	80038e0 <_DMA_Index2ColorBulk.isra.2>

08003bba <_Color2IndexBulk_M8888I_DMA2D>:
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f7ff bf08 	b.w	80039d0 <_DMA_Color2IndexBulk.isra.3>

08003bc0 <DMA2D_Init>:
{
 8003bc0:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 8003bc2:	4809      	ldr	r0, [pc, #36]	; (8003be8 <DMA2D_Init+0x28>)
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <DMA2D_Init+0x2c>)
 8003bc6:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003bc8:	f001 fac4 	bl	8005154 <HAL_DMA2D_Init>
 8003bcc:	b108      	cbz	r0, 8003bd2 <DMA2D_Init+0x12>
    Error_Handler( );
 8003bce:	f7fd ffaf 	bl	8001b30 <Error_Handler>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4804      	ldr	r0, [pc, #16]	; (8003be8 <DMA2D_Init+0x28>)
 8003bd6:	f001 fb9b 	bl	8005310 <HAL_DMA2D_ConfigLayer>
 8003bda:	b118      	cbz	r0, 8003be4 <DMA2D_Init+0x24>
}
 8003bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8003be0:	f7fd bfa6 	b.w	8001b30 <Error_Handler>
 8003be4:	bd08      	pop	{r3, pc}
 8003be6:	bf00      	nop
 8003be8:	2002a7ac 	.word	0x2002a7ac
 8003bec:	08003415 	.word	0x08003415

08003bf0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	4c13      	ldr	r4, [pc, #76]	; (8003c44 <HAL_LTDC_LineEventCallback+0x54>)
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8003bf6:	2500      	movs	r5, #0
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8003bf8:	f04f 37ff 	mov.w	r7, #4294967295
    if (layer_prop[layer].pending_buffer >= 0) 
 8003bfc:	6861      	ldr	r1, [r4, #4]
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	db15      	blt.n	8003c2e <HAL_LTDC_LineEventCallback+0x3e>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8003c02:	68e2      	ldr	r2, [r4, #12]
 8003c04:	6923      	ldr	r3, [r4, #16]
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 8003c0a:	6822      	ldr	r2, [r4, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8003c0c:	434b      	muls	r3, r1
      Addr = layer_prop[layer].address + \
 8003c0e:	fb00 2303 	mla	r3, r0, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8003c12:	6832      	ldr	r2, [r6, #0]
 8003c14:	f102 0084 	add.w	r0, r2, #132	; 0x84
 8003c18:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 8003c1c:	6283      	str	r3, [r0, #40]	; 0x28
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8003c1e:	4628      	mov	r0, r5
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003c20:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8003c28:	f010 ffb4 	bl	8014b94 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 8003c2c:	6067      	str	r7, [r4, #4]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8003c2e:	3501      	adds	r5, #1
 8003c30:	341c      	adds	r4, #28
 8003c32:	2d03      	cmp	r5, #3
 8003c34:	d1e2      	bne.n	8003bfc <HAL_LTDC_LineEventCallback+0xc>
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003c36:	4630      	mov	r0, r6
 8003c38:	2100      	movs	r1, #0
}
 8003c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8003c3e:	f003 baa9 	b.w	8007194 <HAL_LTDC_ProgramLineEvent>
 8003c42:	bf00      	nop
 8003c44:	2002198c 	.word	0x2002198c

08003c48 <LCD_X_Config>:
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4951      	ldr	r1, [pc, #324]	; (8003d90 <LCD_X_Config+0x148>)
 8003c4c:	4851      	ldr	r0, [pc, #324]	; (8003d94 <LCD_X_Config+0x14c>)
 8003c4e:	461a      	mov	r2, r3
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8003c54:	f00e ffe4 	bl	8012c20 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f014 f97f 	bl	8017f5c <LCD_GetSwapXYEx>
 8003c5e:	4604      	mov	r4, r0
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d07d      	beq.n	8003d60 <LCD_X_Config+0x118>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8003c64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c68:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f014 fc97 	bl	80185a0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8003c72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c76:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003c7a:	2000      	movs	r0, #0
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8003c7c:	f014 fcc2 	bl	8018604 <LCD_SetVSizeEx>
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 8003c80:	2301      	movs	r3, #1
 8003c82:	2200      	movs	r2, #0
 8003c84:	4942      	ldr	r1, [pc, #264]	; (8003d90 <LCD_X_Config+0x148>)
 8003c86:	4843      	ldr	r0, [pc, #268]	; (8003d94 <LCD_X_Config+0x14c>)
 8003c88:	f00e ffca 	bl	8012c20 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f014 f965 	bl	8017f5c <LCD_GetSwapXYEx>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d070      	beq.n	8003d78 <LCD_X_Config+0x130>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 8003c96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f014 fc7e 	bl	80185a0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8003ca4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ca8:	f44f 7188 	mov.w	r1, #272	; 0x110
  } else {
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8003cac:	2001      	movs	r0, #1
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8003cae:	4d3a      	ldr	r5, [pc, #232]	; (8003d98 <LCD_X_Config+0x150>)
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8003cb0:	f014 fca8 	bl	8018604 <LCD_SetVSizeEx>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8003cb4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8003cb8:	2400      	movs	r4, #0
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8003cba:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8003de4 <LCD_X_Config+0x19c>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8003cbe:	602b      	str	r3, [r5, #0]
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8003cc0:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
    layer_prop[i].pending_buffer = -1;

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8003cc4:	4f35      	ldr	r7, [pc, #212]	; (8003d9c <LCD_X_Config+0x154>)
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8003cc6:	4e36      	ldr	r6, [pc, #216]	; (8003da0 <LCD_X_Config+0x158>)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8003cc8:	61eb      	str	r3, [r5, #28]
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8003cca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8003cce:	4620      	mov	r0, r4
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8003cd0:	61ab      	str	r3, [r5, #24]
    layer_prop[i].pending_buffer = -1;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	606b      	str	r3, [r5, #4]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8003cd8:	f014 f900 	bl	8017edc <LCD_GetBitsPerPixelEx>
 8003cdc:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8003cde:	463a      	mov	r2, r7
 8003ce0:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8003ce2:	6168      	str	r0, [r5, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f014 fc0d 	bl	8018504 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8003cea:	4632      	mov	r2, r6
 8003cec:	2123      	movs	r1, #35	; 0x23
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f014 fc08 	bl	8018504 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <LCD_X_Config+0x15c>)
 8003cf6:	2119      	movs	r1, #25
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f014 fc03 	bl	8018504 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <LCD_X_Config+0x160>)
 8003d00:	2125      	movs	r1, #37	; 0x25
 8003d02:	4620      	mov	r0, r4
 8003d04:	f014 fbfe 	bl	8018504 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <LCD_X_Config+0x164>)
 8003d0a:	2124      	movs	r1, #36	; 0x24
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f014 fbf9 	bl	8018504 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8003d12:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <LCD_X_Config+0x168>)
 8003d14:	2128      	movs	r1, #40	; 0x28
 8003d16:	4620      	mov	r0, r4
 8003d18:	f014 fbf4 	bl	8018504 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8003d1c:	4620      	mov	r0, r4
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8003d1e:	3401      	adds	r4, #1
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8003d20:	f855 1b1c 	ldr.w	r1, [r5], #28
 8003d24:	f014 fc56 	bl	80185d4 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8003d28:	2c03      	cmp	r4, #3
 8003d2a:	d1ce      	bne.n	8003cca <LCD_X_Config+0x82>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8003d2c:	4921      	ldr	r1, [pc, #132]	; (8003db4 <LCD_X_Config+0x16c>)
 8003d2e:	4822      	ldr	r0, [pc, #136]	; (8003db8 <LCD_X_Config+0x170>)
 8003d30:	f00c fd04 	bl	801073c <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8003d34:	4921      	ldr	r1, [pc, #132]	; (8003dbc <LCD_X_Config+0x174>)
 8003d36:	4822      	ldr	r0, [pc, #136]	; (8003dc0 <LCD_X_Config+0x178>)
 8003d38:	f00c ff92 	bl	8010c60 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8003d3c:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <LCD_X_Config+0x17c>)
 8003d3e:	4822      	ldr	r0, [pc, #136]	; (8003dc8 <LCD_X_Config+0x180>)
 8003d40:	f00c fdb8 	bl	80108b4 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8003d44:	4921      	ldr	r1, [pc, #132]	; (8003dcc <LCD_X_Config+0x184>)
 8003d46:	4822      	ldr	r0, [pc, #136]	; (8003dd0 <LCD_X_Config+0x188>)
 8003d48:	f00c ffb0 	bl	8010cac <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8003d4c:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <LCD_X_Config+0x18c>)
 8003d4e:	4822      	ldr	r0, [pc, #136]	; (8003dd8 <LCD_X_Config+0x190>)
 8003d50:	f00c fdd0 	bl	80108f4 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8003d54:	4921      	ldr	r1, [pc, #132]	; (8003ddc <LCD_X_Config+0x194>)
 8003d56:	4822      	ldr	r0, [pc, #136]	; (8003de0 <LCD_X_Config+0x198>)
	
//	LCD_SetDevFunc(0, LCD_DEVFUNC_READPIXEL, LCD_DEVFUNC_READPIXEL_CUSTOM);

}
 8003d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8003d5c:	f012 bdec 	b.w	8016938 <GUI_SetFuncDrawAlpha>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8003d60:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d64:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003d68:	f014 fc1a 	bl	80185a0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8003d6c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d70:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003d74:	4620      	mov	r0, r4
 8003d76:	e781      	b.n	8003c7c <LCD_X_Config+0x34>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 8003d78:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d7c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003d80:	2001      	movs	r0, #1
 8003d82:	f014 fc0d 	bl	80185a0 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8003d86:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003d8a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003d8e:	e78d      	b.n	8003cac <LCD_X_Config+0x64>
 8003d90:	08023b40 	.word	0x08023b40
 8003d94:	080241cc 	.word	0x080241cc
 8003d98:	2002198c 	.word	0x2002198c
 8003d9c:	0800363d 	.word	0x0800363d
 8003da0:	08003679 	.word	0x08003679
 8003da4:	08003aed 	.word	0x08003aed
 8003da8:	08003851 	.word	0x08003851
 8003dac:	080036d5 	.word	0x080036d5
 8003db0:	0800373d 	.word	0x0800373d
 8003db4:	080039c9 	.word	0x080039c9
 8003db8:	08003ae7 	.word	0x08003ae7
 8003dbc:	080039c3 	.word	0x080039c3
 8003dc0:	08003ae1 	.word	0x08003ae1
 8003dc4:	080039bd 	.word	0x080039bd
 8003dc8:	08003adb 	.word	0x08003adb
 8003dcc:	080039b7 	.word	0x080039b7
 8003dd0:	08003ad5 	.word	0x08003ad5
 8003dd4:	08003bb5 	.word	0x08003bb5
 8003dd8:	08003bbb 	.word	0x08003bbb
 8003ddc:	080037dd 	.word	0x080037dd
 8003de0:	080034ed 	.word	0x080034ed
 8003de4:	0802aa34 	.word	0x0802aa34

08003de8 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8003de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8003dea:	3903      	subs	r1, #3
{
 8003dec:	4604      	mov	r4, r0
 8003dee:	4615      	mov	r5, r2
  switch (Cmd) 
 8003df0:	290b      	cmp	r1, #11
 8003df2:	d87e      	bhi.n	8003ef2 <LCD_X_DisplayDriver+0x10a>
 8003df4:	e8df f001 	tbb	[pc, r1]
 8003df8:	2e272006 	.word	0x2e272006
 8003dfc:	5e34484e 	.word	0x5e34484e
 8003e00:	196e647d 	.word	0x196e647d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8003e04:	231c      	movs	r3, #28
 8003e06:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <LCD_X_DisplayDriver+0x110>)
 8003e08:	686d      	ldr	r5, [r5, #4]
 8003e0a:	4343      	muls	r3, r0
 8003e0c:	18d0      	adds	r0, r2, r3
 8003e0e:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8003e10:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8003e12:	68c1      	ldr	r1, [r0, #12]
 8003e14:	6940      	ldr	r0, [r0, #20]
 8003e16:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8003e18:	fb00 3101 	mla	r1, r0, r1, r3
 8003e1c:	4837      	ldr	r0, [pc, #220]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e1e:	f003 f98f 	bl	8007140 <HAL_LTDC_SetAddress>
 int r = 0;
 8003e22:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 8003e24:	4628      	mov	r0, r5
 8003e26:	b003      	add	sp, #12
 8003e28:	bd30      	pop	{r4, r5, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8003e2a:	231c      	movs	r3, #28
 8003e2c:	4a32      	ldr	r2, [pc, #200]	; (8003ef8 <LCD_X_DisplayDriver+0x110>)
 8003e2e:	fb03 2400 	mla	r4, r3, r0, r2
 8003e32:	682b      	ldr	r3, [r5, #0]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	e7f4      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	482f      	ldr	r0, [pc, #188]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e40:	f003 f87c 	bl	8006f3c <HAL_LTDC_ConfigCLUT>
 8003e44:	e7ed      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    __HAL_LTDC_ENABLE(&hltdc);
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	6993      	ldr	r3, [r2, #24]
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 8003e50:	6193      	str	r3, [r2, #24]
 8003e52:	e7e6      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	6993      	ldr	r3, [r2, #24]
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	e7f7      	b.n	8003e50 <LCD_X_DisplayDriver+0x68>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	01c4      	lsls	r4, r0, #7
 8003e64:	4a25      	ldr	r2, [pc, #148]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e66:	2b01      	cmp	r3, #1
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8003e68:	6813      	ldr	r3, [r2, #0]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8003e6a:	6812      	ldr	r2, [r2, #0]
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8003e6c:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8003e70:	5919      	ldr	r1, [r3, r4]
 8003e72:	bf0c      	ite	eq
 8003e74:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8003e78:	f021 0101 	bicne.w	r1, r1, #1
 8003e7c:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8003e7e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6253      	str	r3, [r2, #36]	; 0x24
 8003e86:	e7cc      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8003e88:	4603      	mov	r3, r0
 8003e8a:	ca06      	ldmia	r2, {r1, r2}
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003e8c:	481b      	ldr	r0, [pc, #108]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003e8e:	f003 f8e3 	bl	8007058 <HAL_LTDC_SetWindowPosition>
 8003e92:	e7c6      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8003e94:	aa01      	add	r2, sp, #4
 8003e96:	4669      	mov	r1, sp
 8003e98:	f010 ffc4 	bl	8014e24 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8003e9c:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <LCD_X_DisplayDriver+0x110>)
 8003e9e:	231c      	movs	r3, #28
 8003ea0:	fb03 2304 	mla	r3, r3, r4, r2
 8003ea4:	682a      	ldr	r2, [r5, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8003ea8:	686a      	ldr	r2, [r5, #4]
 8003eaa:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8003eac:	4623      	mov	r3, r4
 8003eae:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8003eb2:	e7eb      	b.n	8003e8c <LCD_X_DisplayDriver+0xa4>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6829      	ldr	r1, [r5, #0]
 8003eb8:	4810      	ldr	r0, [pc, #64]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003eba:	f003 f911 	bl	80070e0 <HAL_LTDC_SetAlpha>
 8003ebe:	e7b0      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8003ec0:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	480d      	ldr	r0, [pc, #52]	; (8003efc <LCD_X_DisplayDriver+0x114>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8003ec6:	b115      	cbz	r5, 8003ece <LCD_X_DisplayDriver+0xe6>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8003ec8:	f003 f880 	bl	8006fcc <HAL_LTDC_EnableColorKeying>
 8003ecc:	e7a9      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8003ece:	f003 f89f 	bl	8007010 <HAL_LTDC_DisableColorKeying>
 8003ed2:	e7a7      	b.n	8003e24 <LCD_X_DisplayDriver+0x3c>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8003ed4:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8003ed6:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8003ed8:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8003edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8003ee0:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8003ee4:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	4804      	ldr	r0, [pc, #16]	; (8003efc <LCD_X_DisplayDriver+0x114>)
 8003eea:	4319      	orrs	r1, r3
 8003eec:	f003 f800 	bl	8006ef0 <HAL_LTDC_ConfigColorKeying>
 8003ef0:	e797      	b.n	8003e22 <LCD_X_DisplayDriver+0x3a>
    r = -1;
 8003ef2:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 8003ef6:	e795      	b.n	8003e24 <LCD_X_DisplayDriver+0x3c>
 8003ef8:	2002198c 	.word	0x2002198c
 8003efc:	2002a704 	.word	0x2002a704

08003f00 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 8003f00:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 8003f02:	f7ff f8a1 	bl	8003048 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8003f06:	f7ff f8cf 	bl	80030a8 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 8003f0a:	f7ff f845 	bl	8002f98 <MX_LCD_Init>
  MX_DMA2D_Init();
 8003f0e:	f7ff f917 	bl	8003140 <MX_DMA2D_Init>
  DMA2D_Init();
 
}
 8003f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DMA2D_Init();
 8003f16:	f7ff be53 	b.w	8003bc0 <DMA2D_Init>

08003f1a <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
  /* Initialize the GUI */
  GUI_Init();
 8003f1a:	f00e bcc7 	b.w	80128ac <GUI_Init>
	...

08003f20 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8003f20:	2904      	cmp	r1, #4
 8003f22:	d00a      	beq.n	8003f3a <USBH_UserProcess+0x1a>
 8003f24:	2905      	cmp	r1, #5
 8003f26:	d004      	beq.n	8003f32 <USBH_UserProcess+0x12>
 8003f28:	2902      	cmp	r1, #2
 8003f2a:	d105      	bne.n	8003f38 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <USBH_UserProcess+0x20>)
 8003f2e:	7019      	strb	r1, [r3, #0]
  break;
 8003f30:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8003f32:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <USBH_UserProcess+0x20>)
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	e7fa      	b.n	8003f34 <USBH_UserProcess+0x14>
 8003f3e:	bf00      	nop
 8003f40:	200219e0 	.word	0x200219e0

08003f44 <MX_USB_HOST_Init>:
{
 8003f44:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8003f46:	2201      	movs	r2, #1
 8003f48:	490b      	ldr	r1, [pc, #44]	; (8003f78 <MX_USB_HOST_Init+0x34>)
 8003f4a:	480c      	ldr	r0, [pc, #48]	; (8003f7c <MX_USB_HOST_Init+0x38>)
 8003f4c:	f00a fe6a 	bl	800ec24 <USBH_Init>
 8003f50:	b108      	cbz	r0, 8003f56 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8003f52:	f7fd fded 	bl	8001b30 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8003f56:	490a      	ldr	r1, [pc, #40]	; (8003f80 <MX_USB_HOST_Init+0x3c>)
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <MX_USB_HOST_Init+0x38>)
 8003f5a:	f00a fe97 	bl	800ec8c <USBH_RegisterClass>
 8003f5e:	b108      	cbz	r0, 8003f64 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8003f60:	f7fd fde6 	bl	8001b30 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003f64:	4805      	ldr	r0, [pc, #20]	; (8003f7c <MX_USB_HOST_Init+0x38>)
 8003f66:	f00a fec3 	bl	800ecf0 <USBH_Start>
 8003f6a:	b118      	cbz	r0, 8003f74 <MX_USB_HOST_Init+0x30>
}
 8003f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003f70:	f7fd bdde 	b.w	8001b30 <Error_Handler>
 8003f74:	bd08      	pop	{r3, pc}
 8003f76:	bf00      	nop
 8003f78:	08003f21 	.word	0x08003f21
 8003f7c:	2002a820 	.word	0x2002a820
 8003f80:	200000c4 	.word	0x200000c4

08003f84 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8003f84:	6803      	ldr	r3, [r0, #0]
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003f8a:	b530      	push	{r4, r5, lr}
 8003f8c:	b089      	sub	sp, #36	; 0x24
  if(hcdHandle->Instance==USB_OTG_FS)
 8003f8e:	d132      	bne.n	8003ff6 <HAL_HCD_MspInit+0x72>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f90:	4c1a      	ldr	r4, [pc, #104]	; (8003ffc <HAL_HCD_MspInit+0x78>)
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	a903      	add	r1, sp, #12
 8003f96:	481a      	ldr	r0, [pc, #104]	; (8004000 <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003fac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003fb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003fba:	230a      	movs	r3, #10
 8003fbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbe:	f001 fa21 	bl	8005404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003fc4:	2043      	movs	r0, #67	; 0x43
 8003fc6:	462a      	mov	r2, r5
 8003fc8:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fce:	6363      	str	r3, [r4, #52]	; 0x34
 8003fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe0:	6463      	str	r3, [r4, #68]	; 0x44
 8003fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe8:	9302      	str	r3, [sp, #8]
 8003fea:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003fec:	f000 fe9a 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003ff0:	2043      	movs	r0, #67	; 0x43
 8003ff2:	f000 fedf 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003ff6:	b009      	add	sp, #36	; 0x24
 8003ff8:	bd30      	pop	{r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020000 	.word	0x40020000

08004004 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004004:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004008:	f00b b817 	b.w	800f03a <USBH_LL_IncTimer>

0800400c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800400c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004010:	f00b b829 	b.w	800f066 <USBH_LL_Connect>

08004014 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004014:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004018:	f00b b842 	b.w	800f0a0 <USBH_LL_Disconnect>

0800401c <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800401c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004020:	f00b b862 	b.w	800f0e8 <USBH_LL_NotifyURBChange>

08004024 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004024:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004028:	f00b b815 	b.w	800f056 <USBH_LL_PortEnabled>

0800402c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800402c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004030:	f00b b815 	b.w	800f05e <USBH_LL_PortDisabled>

08004034 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004034:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004036:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 800403a:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11c      	bne.n	800407a <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004040:	480f      	ldr	r0, [pc, #60]	; (8004080 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004046:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004048:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800404a:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 800404c:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004050:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004052:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 8004054:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004058:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800405a:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800405c:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800405e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004060:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004062:	f001 fc65 	bl	8005930 <HAL_HCD_Init>
 8004066:	b108      	cbz	r0, 800406c <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 8004068:	f7fd fd62 	bl	8001b30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800406c:	4804      	ldr	r0, [pc, #16]	; (8004080 <USBH_LL_Init+0x4c>)
 800406e:	f002 f861 	bl	8006134 <HAL_HCD_GetCurrentFrame>
 8004072:	4601      	mov	r1, r0
 8004074:	4620      	mov	r0, r4
 8004076:	f00a ffdd 	bl	800f034 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800407a:	2000      	movs	r0, #0
 800407c:	bd10      	pop	{r4, pc}
 800407e:	bf00      	nop
 8004080:	2002abf8 	.word	0x2002abf8

08004084 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004084:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004086:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800408a:	f002 f81d 	bl	80060c8 <HAL_HCD_Start>
 800408e:	2803      	cmp	r0, #3
 8004090:	bf9a      	itte	ls
 8004092:	4b02      	ldrls	r3, [pc, #8]	; (800409c <USBH_LL_Start+0x18>)
 8004094:	5c18      	ldrbls	r0, [r3, r0]
 8004096:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004098:	bd08      	pop	{r3, pc}
 800409a:	bf00      	nop
 800409c:	0802aa3f 	.word	0x0802aa3f

080040a0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80040a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80040a2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80040a6:	f002 f825 	bl	80060f4 <HAL_HCD_Stop>
 80040aa:	2803      	cmp	r0, #3
 80040ac:	bf9a      	itte	ls
 80040ae:	4b02      	ldrls	r3, [pc, #8]	; (80040b8 <USBH_LL_Stop+0x18>)
 80040b0:	5c18      	ldrbls	r0, [r3, r0]
 80040b2:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80040b4:	bd08      	pop	{r3, pc}
 80040b6:	bf00      	nop
 80040b8:	0802aa3f 	.word	0x0802aa3f

080040bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80040bc:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80040be:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80040c2:	f002 f83a 	bl	800613a <HAL_HCD_GetCurrentSpeed>
 80040c6:	2802      	cmp	r0, #2
 80040c8:	bf9a      	itte	ls
 80040ca:	4b02      	ldrls	r3, [pc, #8]	; (80040d4 <USBH_LL_GetSpeed+0x18>)
 80040cc:	5c18      	ldrbls	r0, [r3, r0]
 80040ce:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80040d0:	bd08      	pop	{r3, pc}
 80040d2:	bf00      	nop
 80040d4:	0802aa3c 	.word	0x0802aa3c

080040d8 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80040d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80040da:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80040de:	f002 f81b 	bl	8006118 <HAL_HCD_ResetPort>
 80040e2:	2803      	cmp	r0, #3
 80040e4:	bf9a      	itte	ls
 80040e6:	4b02      	ldrls	r3, [pc, #8]	; (80040f0 <USBH_LL_ResetPort+0x18>)
 80040e8:	5c18      	ldrbls	r0, [r3, r0]
 80040ea:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80040ec:	bd08      	pop	{r3, pc}
 80040ee:	bf00      	nop
 80040f0:	0802aa3f 	.word	0x0802aa3f

080040f4 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80040f4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80040f8:	f002 b817 	b.w	800612a <HAL_HCD_HC_GetXferCount>

080040fc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80040fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80040fe:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004102:	9402      	str	r4, [sp, #8]
 8004104:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004108:	9401      	str	r4, [sp, #4]
 800410a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800410e:	9400      	str	r4, [sp, #0]
 8004110:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004114:	f001 fbc0 	bl	8005898 <HAL_HCD_HC_Init>
 8004118:	2803      	cmp	r0, #3
 800411a:	bf96      	itet	ls
 800411c:	4b02      	ldrls	r3, [pc, #8]	; (8004128 <USBH_LL_OpenPipe+0x2c>)
 800411e:	2002      	movhi	r0, #2
 8004120:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004122:	b004      	add	sp, #16
 8004124:	bd10      	pop	{r4, pc}
 8004126:	bf00      	nop
 8004128:	0802aa3f 	.word	0x0802aa3f

0800412c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800412c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800412e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004132:	f001 fbea 	bl	800590a <HAL_HCD_HC_Halt>
 8004136:	2803      	cmp	r0, #3
 8004138:	bf9a      	itte	ls
 800413a:	4b02      	ldrls	r3, [pc, #8]	; (8004144 <USBH_LL_ClosePipe+0x18>)
 800413c:	5c18      	ldrbls	r0, [r3, r0]
 800413e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004140:	bd08      	pop	{r3, pc}
 8004142:	bf00      	nop
 8004144:	0802aa3f 	.word	0x0802aa3f

08004148 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800414a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800414e:	9403      	str	r4, [sp, #12]
 8004150:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004154:	9402      	str	r4, [sp, #8]
 8004156:	9c07      	ldr	r4, [sp, #28]
 8004158:	9401      	str	r4, [sp, #4]
 800415a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800415e:	9400      	str	r4, [sp, #0]
 8004160:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004164:	f001 fc38 	bl	80059d8 <HAL_HCD_HC_SubmitRequest>
 8004168:	2803      	cmp	r0, #3
 800416a:	bf96      	itet	ls
 800416c:	4b02      	ldrls	r3, [pc, #8]	; (8004178 <USBH_LL_SubmitURB+0x30>)
 800416e:	2002      	movhi	r0, #2
 8004170:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004172:	b004      	add	sp, #16
 8004174:	bd10      	pop	{r4, pc}
 8004176:	bf00      	nop
 8004178:	0802aa3f 	.word	0x0802aa3f

0800417c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800417c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004180:	f001 bfcd 	b.w	800611e <HAL_HCD_HC_GetURBState>

08004184 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004184:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004186:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d102      	bne.n	8004194 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800418e:	4608      	mov	r0, r1
 8004190:	f000 f816 	bl	80041c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004194:	20c8      	movs	r0, #200	; 0xc8
 8004196:	f000 fb9d 	bl	80048d4 <HAL_Delay>
  return USBH_OK;
}
 800419a:	2000      	movs	r0, #0
 800419c:	bd08      	pop	{r3, pc}

0800419e <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 800419e:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 80041a0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
  if(pHandle->hc[pipe].ep_is_in)
 80041a4:	fb03 0101 	mla	r1, r3, r1, r0
 80041a8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80041ac:	b11b      	cbz	r3, 80041b6 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80041ae:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80041b2:	2000      	movs	r0, #0
 80041b4:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80041b6:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80041ba:	e7fa      	b.n	80041b2 <USBH_LL_SetToggle+0x14>

080041bc <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80041bc:	f000 bb8a 	b.w	80048d4 <HAL_Delay>

080041c0 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80041c0:	fab0 f280 	clz	r2, r0
 80041c4:	2120      	movs	r1, #32
 80041c6:	4802      	ldr	r0, [pc, #8]	; (80041d0 <MX_DriverVbusFS+0x10>)
 80041c8:	0952      	lsrs	r2, r2, #5
 80041ca:	f001 bb4b 	b.w	8005864 <HAL_GPIO_WritePin>
 80041ce:	bf00      	nop
 80041d0:	40020c00 	.word	0x40020c00

080041d4 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80041d4:	2000      	movs	r0, #0
 80041d6:	4770      	bx	lr

080041d8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80041d8:	4770      	bx	lr
	...

080041dc <ft5336_ReadID>:
{
 80041dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80041de:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80041e0:	4c0f      	ldr	r4, [pc, #60]	; (8004220 <ft5336_ReadID+0x44>)
{
 80041e2:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 80041e4:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	b91b      	cbnz	r3, 80041f4 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80041ec:	f000 f9e8 	bl	80045c0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80041f0:	2301      	movs	r3, #1
 80041f2:	7023      	strb	r3, [r4, #0]
{
 80041f4:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80041f6:	b2ed      	uxtb	r5, r5
 80041f8:	3c01      	subs	r4, #1
 80041fa:	21a8      	movs	r1, #168	; 0xa8
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 f9f5 	bl	80045ec <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004202:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004206:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800420a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800420e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004210:	d103      	bne.n	800421a <ft5336_ReadID+0x3e>
  return (ucReadId);
 8004212:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004216:	b003      	add	sp, #12
 8004218:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800421a:	2b51      	cmp	r3, #81	; 0x51
 800421c:	d1ec      	bne.n	80041f8 <ft5336_ReadID+0x1c>
 800421e:	e7f8      	b.n	8004212 <ft5336_ReadID+0x36>
 8004220:	200219e4 	.word	0x200219e4

08004224 <ft5336_TS_DetectTouch>:
{
 8004224:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004226:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004228:	2102      	movs	r1, #2
 800422a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 800422c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004230:	f000 f9dc 	bl	80045ec <TS_IO_Read>
 8004234:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004238:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004248:	2b05      	cmp	r3, #5
 800424a:	d901      	bls.n	8004250 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 800424c:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004250:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004256:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800425a:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 800425c:	2200      	movs	r2, #0
 800425e:	709a      	strb	r2, [r3, #2]
}
 8004260:	b002      	add	sp, #8
 8004262:	bd10      	pop	{r4, pc}
 8004264:	200219e4 	.word	0x200219e4

08004268 <ft5336_TS_GetXY>:
{
 8004268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800426c:	4d29      	ldr	r5, [pc, #164]	; (8004314 <ft5336_TS_GetXY+0xac>)
{
 800426e:	4617      	mov	r7, r2
  volatile uint8_t ucReadData = 0;
 8004270:	2400      	movs	r4, #0
{
 8004272:	4689      	mov	r9, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004274:	78ab      	ldrb	r3, [r5, #2]
 8004276:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004278:	f88d 4007 	strb.w	r4, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800427c:	429a      	cmp	r2, r3
 800427e:	d941      	bls.n	8004304 <ft5336_TS_GetXY+0x9c>
 8004280:	2b09      	cmp	r3, #9
 8004282:	d842      	bhi.n	800430a <ft5336_TS_GetXY+0xa2>
 8004284:	4a24      	ldr	r2, [pc, #144]	; (8004318 <ft5336_TS_GetXY+0xb0>)
 8004286:	5cd1      	ldrb	r1, [r2, r3]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <ft5336_TS_GetXY+0xb4>)
 800428a:	f812 b003 	ldrb.w	fp, [r2, r3]
 800428e:	4a24      	ldr	r2, [pc, #144]	; (8004320 <ft5336_TS_GetXY+0xb8>)
 8004290:	f812 a003 	ldrb.w	sl, [r2, r3]
 8004294:	4a23      	ldr	r2, [pc, #140]	; (8004324 <ft5336_TS_GetXY+0xbc>)
 8004296:	5cd4      	ldrb	r4, [r2, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004298:	fa5f f880 	uxtb.w	r8, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800429c:	4e22      	ldr	r6, [pc, #136]	; (8004328 <ft5336_TS_GetXY+0xc0>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800429e:	4640      	mov	r0, r8
 80042a0:	f000 f9a4 	bl	80045ec <TS_IO_Read>
 80042a4:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80042a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80042ac:	4659      	mov	r1, fp
 80042ae:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80042b0:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80042b2:	f000 f99b 	bl	80045ec <TS_IO_Read>
 80042b6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80042ba:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80042bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80042c0:	4640      	mov	r0, r8
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80042c2:	8832      	ldrh	r2, [r6, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042ca:	4313      	orrs	r3, r2
    *X = coord;
 80042cc:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80042d0:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80042d2:	f000 f98b 	bl	80045ec <TS_IO_Read>
 80042d6:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80042da:	4621      	mov	r1, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80042dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80042e0:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80042e2:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80042e4:	f000 f982 	bl	80045ec <TS_IO_Read>
 80042e8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80042ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042f0:	8832      	ldrh	r2, [r6, #0]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80042f8:	4313      	orrs	r3, r2
 80042fa:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 80042fc:	803b      	strh	r3, [r7, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80042fe:	78ab      	ldrb	r3, [r5, #2]
 8004300:	3301      	adds	r3, #1
 8004302:	70ab      	strb	r3, [r5, #2]
}
 8004304:	b003      	add	sp, #12
 8004306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800430a:	46a2      	mov	sl, r4
 800430c:	46a3      	mov	fp, r4
 800430e:	4621      	mov	r1, r4
 8004310:	e7c2      	b.n	8004298 <ft5336_TS_GetXY+0x30>
 8004312:	bf00      	nop
 8004314:	200219e4 	.word	0x200219e4
 8004318:	0802aa43 	.word	0x0802aa43
 800431c:	0802aa4d 	.word	0x0802aa4d
 8004320:	0802aa57 	.word	0x0802aa57
 8004324:	0802aa61 	.word	0x0802aa61
 8004328:	200219e2 	.word	0x200219e2

0800432c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800432c:	2201      	movs	r2, #1
 800432e:	21a4      	movs	r1, #164	; 0xa4
 8004330:	b2c0      	uxtb	r0, r0
 8004332:	f000 b94b 	b.w	80045cc <TS_IO_Write>

08004336 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004336:	2200      	movs	r2, #0
 8004338:	21a4      	movs	r1, #164	; 0xa4
 800433a:	b2c0      	uxtb	r0, r0
 800433c:	f000 b946 	b.w	80045cc <TS_IO_Write>

08004340 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004340:	f7ff bff9 	b.w	8004336 <ft5336_TS_DisableIT>

08004344 <ft5336_Reset>:
 8004344:	4770      	bx	lr
	...

08004348 <ft5336_Init>:
{
 8004348:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 800434a:	4c05      	ldr	r4, [pc, #20]	; (8004360 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 800434c:	20c8      	movs	r0, #200	; 0xc8
 800434e:	f000 f961 	bl	8004614 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004352:	7823      	ldrb	r3, [r4, #0]
 8004354:	b91b      	cbnz	r3, 800435e <ft5336_Init+0x16>
    TS_IO_Init();
 8004356:	f000 f933 	bl	80045c0 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800435a:	2301      	movs	r3, #1
 800435c:	7023      	strb	r3, [r4, #0]
 800435e:	bd10      	pop	{r4, pc}
 8004360:	200219e4 	.word	0x200219e4

08004364 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8004364:	2300      	movs	r3, #0
{
 8004366:	b513      	push	{r0, r1, r4, lr}
 8004368:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800436a:	b2c0      	uxtb	r0, r0
 800436c:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800436e:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004372:	f000 f93b 	bl	80045ec <TS_IO_Read>
 8004376:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800437a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800437e:	6023      	str	r3, [r4, #0]
}
 8004380:	b002      	add	sp, #8
 8004382:	bd10      	pop	{r4, pc}

08004384 <ft5336_TS_GetTouchInfo>:
{
 8004384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004388:	461f      	mov	r7, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800438a:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 800438c:	2400      	movs	r4, #0
{
 800438e:	4690      	mov	r8, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004390:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8004392:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004396:	428b      	cmp	r3, r1
 8004398:	d92d      	bls.n	80043f6 <ft5336_TS_GetTouchInfo+0x72>
 800439a:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800439c:	b2c5      	uxtb	r5, r0
 800439e:	bf96      	itet	ls
 80043a0:	4a17      	ldrls	r2, [pc, #92]	; (8004400 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80043a2:	4623      	movhi	r3, r4
 80043a4:	4b17      	ldrls	r3, [pc, #92]	; (8004404 <ft5336_TS_GetTouchInfo+0x80>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80043a6:	4628      	mov	r0, r5
 80043a8:	bf97      	itett	ls
 80043aa:	5c56      	ldrbls	r6, [r2, r1]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80043ac:	4626      	movhi	r6, r4
 80043ae:	5c5b      	ldrbls	r3, [r3, r1]
 80043b0:	4a15      	ldrls	r2, [pc, #84]	; (8004408 <ft5336_TS_GetTouchInfo+0x84>)
 80043b2:	bf98      	it	ls
 80043b4:	5c54      	ldrbls	r4, [r2, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80043b6:	4619      	mov	r1, r3
 80043b8:	f000 f918 	bl	80045ec <TS_IO_Read>
 80043bc:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80043c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80043c4:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80043c6:	9b08      	ldr	r3, [sp, #32]
 80043c8:	0989      	lsrs	r1, r1, #6
 80043ca:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80043cc:	4631      	mov	r1, r6
 80043ce:	f000 f90d 	bl	80045ec <TS_IO_Read>
 80043d2:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80043d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80043da:	4621      	mov	r1, r4
 80043dc:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80043de:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80043e2:	f000 f903 	bl	80045ec <TS_IO_Read>
 80043e6:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80043ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80043ee:	0912      	lsrs	r2, r2, #4
 80043f0:	f002 0204 	and.w	r2, r2, #4
 80043f4:	603a      	str	r2, [r7, #0]
}
 80043f6:	b002      	add	sp, #8
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fc:	200219e4 	.word	0x200219e4
 8004400:	0802aa75 	.word	0x0802aa75
 8004404:	0802aa6b 	.word	0x0802aa6b
 8004408:	0802aa7f 	.word	0x0802aa7f

0800440c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004412:	f002 fa7b 	bl	800690c <HAL_I2C_GetState>
 8004416:	2800      	cmp	r0, #0
 8004418:	d154      	bne.n	80044c4 <I2Cx_Init+0xb8>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800441c:	2600      	movs	r6, #0
 800441e:	4c4a      	ldr	r4, [pc, #296]	; (8004548 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004420:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress1      = 0;
 8004422:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004424:	612e      	str	r6, [r5, #16]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004426:	bf0c      	ite	eq
 8004428:	4a48      	ldreq	r2, [pc, #288]	; (800454c <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800442a:	4a49      	ldrne	r2, [pc, #292]	; (8004550 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800442c:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress2      = 0;
 800442e:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004430:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004432:	4a48      	ldr	r2, [pc, #288]	; (8004554 <I2Cx_Init+0x148>)
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004434:	61ee      	str	r6, [r5, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004436:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004438:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800443c:	622e      	str	r6, [r5, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800443e:	60ea      	str	r2, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004440:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004442:	d141      	bne.n	80044c8 <I2Cx_Init+0xbc>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004448:	a905      	add	r1, sp, #20
 800444a:	4843      	ldr	r0, [pc, #268]	; (8004558 <I2Cx_Init+0x14c>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800444c:	6323      	str	r3, [r4, #48]	; 0x30
 800444e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004450:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800445e:	2312      	movs	r3, #18
 8004460:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004462:	2302      	movs	r3, #2
 8004464:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004466:	2304      	movs	r3, #4
 8004468:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800446a:	f000 ffcb 	bl	8005404 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800446e:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004472:	a905      	add	r1, sp, #20
 8004474:	4838      	ldr	r0, [pc, #224]	; (8004558 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004476:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004478:	f000 ffc4 	bl	8005404 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800447c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800447e:	4632      	mov	r2, r6
 8004480:	210f      	movs	r1, #15
 8004482:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004488:	6423      	str	r3, [r4, #64]	; 0x40
 800448a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800448c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004490:	9302      	str	r3, [sp, #8]
 8004492:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004494:	6a23      	ldr	r3, [r4, #32]
 8004496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800449a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800449c:	6a23      	ldr	r3, [r4, #32]
 800449e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044a2:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80044a4:	f000 fc3e 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80044a8:	2048      	movs	r0, #72	; 0x48
 80044aa:	f000 fc83 	bl	8004db4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80044ae:	2049      	movs	r0, #73	; 0x49
 80044b0:	4632      	mov	r2, r6
 80044b2:	210f      	movs	r1, #15
 80044b4:	f000 fc36 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80044b8:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80044ba:	f000 fc7b 	bl	8004db4 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80044be:	4628      	mov	r0, r5
 80044c0:	f001 ffbc 	bl	800643c <HAL_I2C_Init>
  }
}
 80044c4:	b00a      	add	sp, #40	; 0x28
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80044c8:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80044cc:	a905      	add	r1, sp, #20
 80044ce:	4823      	ldr	r0, [pc, #140]	; (800455c <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80044d0:	6323      	str	r3, [r4, #48]	; 0x30
 80044d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80044d4:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80044de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044e2:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80044e4:	2312      	movs	r3, #18
 80044e6:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80044e8:	2302      	movs	r3, #2
 80044ea:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80044ec:	2304      	movs	r3, #4
 80044ee:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80044f0:	f000 ff88 	bl	8005404 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80044f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80044f8:	a905      	add	r1, sp, #20
 80044fa:	4818      	ldr	r0, [pc, #96]	; (800455c <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80044fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80044fe:	f000 ff81 	bl	8005404 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004502:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004504:	4632      	mov	r2, r6
 8004506:	210f      	movs	r1, #15
 8004508:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800450a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800450e:	6423      	str	r3, [r4, #64]	; 0x40
 8004510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800451a:	6a23      	ldr	r3, [r4, #32]
 800451c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004520:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004522:	6a23      	ldr	r3, [r4, #32]
 8004524:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004528:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800452a:	f000 fbfb 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800452e:	201f      	movs	r0, #31
 8004530:	f000 fc40 	bl	8004db4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004534:	2020      	movs	r0, #32
 8004536:	4632      	mov	r2, r6
 8004538:	210f      	movs	r1, #15
 800453a:	f000 fbf3 	bl	8004d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800453e:	2020      	movs	r0, #32
 8004540:	e7bb      	b.n	80044ba <I2Cx_Init+0xae>
 8004542:	bf00      	nop
 8004544:	200219e8 	.word	0x200219e8
 8004548:	40023800 	.word	0x40023800
 800454c:	40005c00 	.word	0x40005c00
 8004550:	40005400 	.word	0x40005400
 8004554:	40912732 	.word	0x40912732
 8004558:	40021c00 	.word	0x40021c00
 800455c:	40020400 	.word	0x40020400

08004560 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004560:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004562:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8004566:	b085      	sub	sp, #20
 8004568:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800456a:	9402      	str	r4, [sp, #8]
 800456c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8004570:	9401      	str	r4, [sp, #4]
 8004572:	9c08      	ldr	r4, [sp, #32]
 8004574:	9400      	str	r4, [sp, #0]
 8004576:	f002 f901 	bl	800677c <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 800457a:	4604      	mov	r4, r0
 800457c:	b128      	cbz	r0, 800458a <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800457e:	4628      	mov	r0, r5
 8004580:	f002 f806 	bl	8006590 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004584:	4628      	mov	r0, r5
 8004586:	f7ff ff41 	bl	800440c <I2Cx_Init>
}
 800458a:	4620      	mov	r0, r4
 800458c:	b005      	add	sp, #20
 800458e:	bd30      	pop	{r4, r5, pc}

08004590 <I2Cx_WriteMultiple>:
{
 8004590:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004592:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8004596:	b085      	sub	sp, #20
 8004598:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800459a:	9402      	str	r4, [sp, #8]
 800459c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80045a0:	9401      	str	r4, [sp, #4]
 80045a2:	9c08      	ldr	r4, [sp, #32]
 80045a4:	9400      	str	r4, [sp, #0]
 80045a6:	f002 f827 	bl	80065f8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80045aa:	4604      	mov	r4, r0
 80045ac:	b128      	cbz	r0, 80045ba <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80045ae:	4628      	mov	r0, r5
 80045b0:	f001 ffee 	bl	8006590 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7ff ff29 	bl	800440c <I2Cx_Init>
}
 80045ba:	4620      	mov	r0, r4
 80045bc:	b005      	add	sp, #20
 80045be:	bd30      	pop	{r4, r5, pc}

080045c0 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <TS_IO_Init+0x8>)
 80045c2:	f7ff bf23 	b.w	800440c <I2Cx_Init>
 80045c6:	bf00      	nop
 80045c8:	200219e8 	.word	0x200219e8

080045cc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80045cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045ce:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80045d0:	2301      	movs	r3, #1
{
 80045d2:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80045d6:	460a      	mov	r2, r1
 80045d8:	4601      	mov	r1, r0
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	9400      	str	r4, [sp, #0]
 80045de:	4802      	ldr	r0, [pc, #8]	; (80045e8 <TS_IO_Write+0x1c>)
 80045e0:	f7ff ffd6 	bl	8004590 <I2Cx_WriteMultiple>
}
 80045e4:	b004      	add	sp, #16
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	200219e8 	.word	0x200219e8

080045ec <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80045ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	aa04      	add	r2, sp, #16
 80045f2:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80045f6:	2301      	movs	r3, #1
 80045f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80045fc:	460a      	mov	r2, r1
 80045fe:	4601      	mov	r1, r0
 8004600:	4803      	ldr	r0, [pc, #12]	; (8004610 <TS_IO_Read+0x24>)
 8004602:	f7ff ffad 	bl	8004560 <I2Cx_ReadMultiple>

  return read_value;
}
 8004606:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800460a:	b005      	add	sp, #20
 800460c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004610:	200219e8 	.word	0x200219e8

08004614 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004614:	f000 b95e 	b.w	80048d4 <HAL_Delay>

08004618 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <BSP_TS_Init+0x38>)
{
 800461a:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
 800461c:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800461e:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004622:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 8004624:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	2070      	movs	r0, #112	; 0x70
 800462e:	4798      	blx	r3
 8004630:	2851      	cmp	r0, #81	; 0x51
 8004632:	d10b      	bne.n	800464c <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 8004636:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 8004638:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
 800463a:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <BSP_TS_Init+0x48>)
 800463e:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004640:	4b08      	ldr	r3, [pc, #32]	; (8004664 <BSP_TS_Init+0x4c>)
 8004642:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004644:	68e3      	ldr	r3, [r4, #12]
 8004646:	4798      	blx	r3
  uint8_t status = TS_OK;
 8004648:	2000      	movs	r0, #0
 800464a:	bd10      	pop	{r4, pc}
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800464c:	2003      	movs	r0, #3
  }

  return status;
}
 800464e:	bd10      	pop	{r4, pc}
 8004650:	20021a66 	.word	0x20021a66
 8004654:	20021a68 	.word	0x20021a68
 8004658:	20000090 	.word	0x20000090
 800465c:	20021a60 	.word	0x20021a60
 8004660:	20021a34 	.word	0x20021a34
 8004664:	20021a64 	.word	0x20021a64

08004668 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004668:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 800466c:	a902      	add	r1, sp, #8
 800466e:	2400      	movs	r4, #0
{
 8004670:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004672:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 8004674:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004678:	f7ff fe74 	bl	8004364 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800467c:	9801      	ldr	r0, [sp, #4]
 800467e:	2818      	cmp	r0, #24
 8004680:	d017      	beq.n	80046b2 <BSP_TS_Get_GestureId+0x4a>
 8004682:	d809      	bhi.n	8004698 <BSP_TS_Get_GestureId+0x30>
 8004684:	2810      	cmp	r0, #16
 8004686:	d00f      	beq.n	80046a8 <BSP_TS_Get_GestureId+0x40>
 8004688:	2814      	cmp	r0, #20
 800468a:	d010      	beq.n	80046ae <BSP_TS_Get_GestureId+0x46>
 800468c:	b9b8      	cbnz	r0, 80046be <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 800468e:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004690:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8004692:	4620      	mov	r0, r4
 8004694:	b003      	add	sp, #12
 8004696:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8004698:	2840      	cmp	r0, #64	; 0x40
 800469a:	d00c      	beq.n	80046b6 <BSP_TS_Get_GestureId+0x4e>
 800469c:	2849      	cmp	r0, #73	; 0x49
 800469e:	d00c      	beq.n	80046ba <BSP_TS_Get_GestureId+0x52>
 80046a0:	281c      	cmp	r0, #28
 80046a2:	d10c      	bne.n	80046be <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80046a4:	2304      	movs	r3, #4
 80046a6:	e000      	b.n	80046aa <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80046a8:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80046aa:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 80046ac:	e7f1      	b.n	8004692 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80046ae:	2302      	movs	r3, #2
 80046b0:	e7fb      	b.n	80046aa <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e7f9      	b.n	80046aa <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80046b6:	2305      	movs	r3, #5
 80046b8:	e7f7      	b.n	80046aa <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80046ba:	2306      	movs	r3, #6
 80046bc:	e7f5      	b.n	80046aa <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 80046be:	2401      	movs	r4, #1
 80046c0:	e7e7      	b.n	8004692 <BSP_TS_Get_GestureId+0x2a>
 80046c2:	bf00      	nop
 80046c4:	20021a34 	.word	0x20021a34

080046c8 <BSP_TS_GetState>:
{
 80046c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046cc:	4d53      	ldr	r5, [pc, #332]	; (800481c <BSP_TS_GetState+0x154>)
{
 80046ce:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 80046d0:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046d2:	4e53      	ldr	r6, [pc, #332]	; (8004820 <BSP_TS_GetState+0x158>)
 80046d4:	682b      	ldr	r3, [r5, #0]
{
 80046d6:	4681      	mov	r9, r0
  uint32_t weight = 0;
 80046d8:	9405      	str	r4, [sp, #20]
 80046da:	46aa      	mov	sl, r5
  uint32_t area = 0;
 80046dc:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 80046de:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	7830      	ldrb	r0, [r6, #0]
 80046e4:	4798      	blx	r3
 80046e6:	9603      	str	r6, [sp, #12]
 80046e8:	f889 0000 	strb.w	r0, [r9]
  if(TS_State->touchDetected)
 80046ec:	b178      	cbz	r0, 800470e <BSP_TS_GetState+0x46>
 80046ee:	f109 0516 	add.w	r5, r9, #22
 80046f2:	f109 0602 	add.w	r6, r9, #2
 80046f6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80046fa:	af11      	add	r7, sp, #68	; 0x44
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80046fc:	f8df b130 	ldr.w	fp, [pc, #304]	; 8004830 <BSP_TS_GetState+0x168>
    for(index=0; index < TS_State->touchDetected; index++)
 8004700:	f899 3000 	ldrb.w	r3, [r9]
 8004704:	429c      	cmp	r4, r3
 8004706:	d305      	bcc.n	8004714 <BSP_TS_GetState+0x4c>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004708:	4648      	mov	r0, r9
 800470a:	f7ff ffad 	bl	8004668 <BSP_TS_Get_GestureId>
}
 800470e:	b015      	add	sp, #84	; 0x54
 8004710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004714:	f8da 3000 	ldr.w	r3, [sl]
 8004718:	463a      	mov	r2, r7
 800471a:	9803      	ldr	r0, [sp, #12]
 800471c:	4641      	mov	r1, r8
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	7800      	ldrb	r0, [r0, #0]
 8004722:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8004724:	4b3f      	ldr	r3, [pc, #252]	; (8004824 <BSP_TS_GetState+0x15c>)
 8004726:	a90b      	add	r1, sp, #44	; 0x2c
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004728:	f8df c108 	ldr.w	ip, [pc, #264]	; 8004834 <BSP_TS_GetState+0x16c>
      if(tsOrientation == TS_SWAP_NONE)
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	ab08      	add	r3, sp, #32
 8004730:	2a01      	cmp	r2, #1
        x[index] = brute_x[index];
 8004732:	bf01      	itttt	eq
 8004734:	f8b8 0000 	ldrheq.w	r0, [r8]
 8004738:	f823 0014 	strheq.w	r0, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 800473c:	8838      	ldrheq	r0, [r7, #0]
 800473e:	f821 0014 	strheq.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 8004742:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
 8004744:	bf42      	ittt	mi
 8004746:	f8b8 0000 	ldrhmi.w	r0, [r8]
 800474a:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 800474e:	f823 0014 	strhmi.w	r0, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 8004752:	0750      	lsls	r0, r2, #29
        y[index] = 4096 - brute_y[index];
 8004754:	bf42      	ittt	mi
 8004756:	8838      	ldrhmi	r0, [r7, #0]
 8004758:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 800475c:	f821 0014 	strhmi.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 8004760:	0712      	lsls	r2, r2, #28
        y[index] = brute_x[index];
 8004762:	bf42      	ittt	mi
 8004764:	f8b8 2000 	ldrhmi.w	r2, [r8]
 8004768:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 800476c:	883a      	ldrhmi	r2, [r7, #0]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800476e:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 8004772:	bf48      	it	mi
 8004774:	f823 2014 	strhmi.w	r2, [r3, r4, lsl #1]
 8004778:	00a2      	lsls	r2, r4, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800477a:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 800477e:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004782:	f852 000c 	ldr.w	r0, [r2, ip]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004786:	459e      	cmp	lr, r3
 8004788:	bf8c      	ite	hi
 800478a:	ebae 0303 	subhi.w	r3, lr, r3
 800478e:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004792:	4281      	cmp	r1, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004794:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004796:	bf8c      	ite	hi
 8004798:	1a08      	subhi	r0, r1, r0
 800479a:	1a40      	subls	r0, r0, r1
 800479c:	b280      	uxth	r0, r0
      if ((x_diff + y_diff) > 5)
 800479e:	4418      	add	r0, r3
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047a0:	9b03      	ldr	r3, [sp, #12]
      if ((x_diff + y_diff) > 5)
 80047a2:	2805      	cmp	r0, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047a4:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
 80047a6:	bfc4      	itt	gt
 80047a8:	f84b e002 	strgt.w	lr, [fp, r2]
        _y[index] = y[index];
 80047ac:	f84c 1002 	strgt.w	r1, [ip, r2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047b0:	2870      	cmp	r0, #112	; 0x70
 80047b2:	d115      	bne.n	80047e0 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
 80047b4:	f8a6 e000 	strh.w	lr, [r6]
        TS_State->touchY[index] = y[index];
 80047b8:	8171      	strh	r1, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80047ba:	ab07      	add	r3, sp, #28
 80047bc:	aa05      	add	r2, sp, #20
 80047be:	4621      	mov	r1, r4
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	ab06      	add	r3, sp, #24
 80047c4:	f7ff fdde 	bl	8004384 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80047c8:	9b05      	ldr	r3, [sp, #20]
 80047ca:	f805 3b01 	strb.w	r3, [r5], #1
      TS_State->touchArea[index]   = area;
 80047ce:	9b06      	ldr	r3, [sp, #24]
 80047d0:	726b      	strb	r3, [r5, #9]
      switch(event)
 80047d2:	9b07      	ldr	r3, [sp, #28]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d814      	bhi.n	8004802 <BSP_TS_GetState+0x13a>
 80047d8:	e8df f003 	tbb	[pc, r3]
 80047dc:	1d1b1911 	.word	0x1d1b1911
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80047e0:	4b11      	ldr	r3, [pc, #68]	; (8004828 <BSP_TS_GetState+0x160>)
 80047e2:	8819      	ldrh	r1, [r3, #0]
 80047e4:	f85b 3002 	ldr.w	r3, [fp, r2]
 80047e8:	434b      	muls	r3, r1
 80047ea:	0b1b      	lsrs	r3, r3, #12
 80047ec:	8033      	strh	r3, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <BSP_TS_GetState+0x164>)
 80047f0:	8819      	ldrh	r1, [r3, #0]
 80047f2:	f85c 3002 	ldr.w	r3, [ip, r2]
 80047f6:	434b      	muls	r3, r1
 80047f8:	0b1b      	lsrs	r3, r3, #12
 80047fa:	8173      	strh	r3, [r6, #10]
 80047fc:	e7dd      	b.n	80047ba <BSP_TS_GetState+0xf2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80047fe:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004800:	712b      	strb	r3, [r5, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8004802:	3401      	adds	r4, #1
 8004804:	3602      	adds	r6, #2
 8004806:	f108 0802 	add.w	r8, r8, #2
 800480a:	3702      	adds	r7, #2
 800480c:	e778      	b.n	8004700 <BSP_TS_GetState+0x38>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800480e:	2302      	movs	r3, #2
 8004810:	e7f6      	b.n	8004800 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004812:	2303      	movs	r3, #3
 8004814:	e7f4      	b.n	8004800 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004816:	2300      	movs	r3, #0
 8004818:	e7f2      	b.n	8004800 <BSP_TS_GetState+0x138>
 800481a:	bf00      	nop
 800481c:	20021a60 	.word	0x20021a60
 8004820:	20021a34 	.word	0x20021a34
 8004824:	20021a64 	.word	0x20021a64
 8004828:	20021a66 	.word	0x20021a66
 800482c:	20021a68 	.word	0x20021a68
 8004830:	20021a38 	.word	0x20021a38
 8004834:	20021a4c 	.word	0x20021a4c

08004838 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004838:	490f      	ldr	r1, [pc, #60]	; (8004878 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800483a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800483c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <SystemInit+0x44>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004852:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800485a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800485e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <SystemInit+0x48>)
 8004862:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800486a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800486c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800486e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004872:	608b      	str	r3, [r1, #8]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	e000ed00 	.word	0xe000ed00
 800487c:	40023800 	.word	0x40023800
 8004880:	24003010 	.word	0x24003010

08004884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004884:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8004886:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004888:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004890:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800489a:	f000 fa25 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fd fc20 	bl	80020e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048a4:	f7fd fbfe 	bl	80020a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80048a8:	2000      	movs	r0, #0
 80048aa:	bd08      	pop	{r3, pc}
 80048ac:	40023c00 	.word	0x40023c00

080048b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80048b0:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <HAL_IncTick+0x10>)
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <HAL_IncTick+0x14>)
 80048b4:	6811      	ldr	r1, [r2, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	440b      	add	r3, r1
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	2002aebc 	.word	0x2002aebc
 80048c4:	200000bc 	.word	0x200000bc

080048c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80048c8:	4b01      	ldr	r3, [pc, #4]	; (80048d0 <HAL_GetTick+0x8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2002aebc 	.word	0x2002aebc

080048d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80048d8:	f7ff fff6 	bl	80048c8 <HAL_GetTick>
 80048dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048de:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80048e0:	bf1e      	ittt	ne
 80048e2:	4b04      	ldrne	r3, [pc, #16]	; (80048f4 <HAL_Delay+0x20>)
 80048e4:	781b      	ldrbne	r3, [r3, #0]
 80048e6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048e8:	f7ff ffee 	bl	80048c8 <HAL_GetTick>
 80048ec:	1b40      	subs	r0, r0, r5
 80048ee:	4284      	cmp	r4, r0
 80048f0:	d8fa      	bhi.n	80048e8 <HAL_Delay+0x14>
  {
  }
}
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	200000bc 	.word	0x200000bc

080048f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048fa:	4604      	mov	r4, r0
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f000 812b 	beq.w	8004b58 <HAL_ADC_Init+0x260>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	4a95      	ldr	r2, [pc, #596]	; (8004b5c <HAL_ADC_Init+0x264>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00c      	beq.n	8004924 <HAL_ADC_Init+0x2c>
 800490a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800490e:	4293      	cmp	r3, r2
 8004910:	d008      	beq.n	8004924 <HAL_ADC_Init+0x2c>
 8004912:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_ADC_Init+0x2c>
 800491a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800491e:	4890      	ldr	r0, [pc, #576]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004920:	f7fd f907 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800492a:	d004      	beq.n	8004936 <HAL_ADC_Init+0x3e>
 800492c:	f240 114d 	movw	r1, #333	; 0x14d
 8004930:	488b      	ldr	r0, [pc, #556]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004932:	f7fd f8fe 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800493c:	d004      	beq.n	8004948 <HAL_ADC_Init+0x50>
 800493e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004942:	4887      	ldr	r0, [pc, #540]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004944:	f7fd f8f5 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d904      	bls.n	8004958 <HAL_ADC_Init+0x60>
 800494e:	f240 114f 	movw	r1, #335	; 0x14f
 8004952:	4883      	ldr	r0, [pc, #524]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004954:	f7fd f8ed 	bl	8001b32 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d904      	bls.n	8004968 <HAL_ADC_Init+0x70>
 800495e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004962:	487f      	ldr	r0, [pc, #508]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004964:	f7fd f8e5 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800496a:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 800496e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004972:	d011      	beq.n	8004998 <HAL_ADC_Init+0xa0>
 8004974:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8004978:	d00e      	beq.n	8004998 <HAL_ADC_Init+0xa0>
 800497a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800497e:	d00b      	beq.n	8004998 <HAL_ADC_Init+0xa0>
 8004980:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8004984:	d008      	beq.n	8004998 <HAL_ADC_Init+0xa0>
 8004986:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 800498a:	2b01      	cmp	r3, #1
 800498c:	d904      	bls.n	8004998 <HAL_ADC_Init+0xa0>
 800498e:	f240 1151 	movw	r1, #337	; 0x151
 8004992:	4873      	ldr	r0, [pc, #460]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004994:	f7fd f8cd 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004998:	68e3      	ldr	r3, [r4, #12]
 800499a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800499e:	d004      	beq.n	80049aa <HAL_ADC_Init+0xb2>
 80049a0:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80049a4:	486e      	ldr	r0, [pc, #440]	; (8004b60 <HAL_ADC_Init+0x268>)
 80049a6:	f7fd f8c4 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80049aa:	69e3      	ldr	r3, [r4, #28]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d904      	bls.n	80049bc <HAL_ADC_Init+0xc4>
 80049b2:	f240 1153 	movw	r1, #339	; 0x153
 80049b6:	486a      	ldr	r0, [pc, #424]	; (8004b60 <HAL_ADC_Init+0x268>)
 80049b8:	f7fd f8bb 	bl	8001b32 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80049bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d904      	bls.n	80049ce <HAL_ADC_Init+0xd6>
 80049c4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80049c8:	4865      	ldr	r0, [pc, #404]	; (8004b60 <HAL_ADC_Init+0x268>)
 80049ca:	f7fd f8b2 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80049ce:	6963      	ldr	r3, [r4, #20]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d904      	bls.n	80049de <HAL_ADC_Init+0xe6>
 80049d4:	f240 1155 	movw	r1, #341	; 0x155
 80049d8:	4861      	ldr	r0, [pc, #388]	; (8004b60 <HAL_ADC_Init+0x268>)
 80049da:	f7fd f8aa 	bl	8001b32 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80049de:	f894 3020 	ldrb.w	r3, [r4, #32]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d904      	bls.n	80049f0 <HAL_ADC_Init+0xf8>
 80049e6:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80049ea:	485d      	ldr	r0, [pc, #372]	; (8004b60 <HAL_ADC_Init+0x268>)
 80049ec:	f7fd f8a1 	bl	8001b32 <assert_failed>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049f2:	4b5c      	ldr	r3, [pc, #368]	; (8004b64 <HAL_ADC_Init+0x26c>)
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d008      	beq.n	8004a0a <HAL_ADC_Init+0x112>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80049f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049fa:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80049fe:	d004      	beq.n	8004a0a <HAL_ADC_Init+0x112>
 8004a00:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004a04:	4856      	ldr	r0, [pc, #344]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004a06:	f7fd f894 	bl	8001b32 <assert_failed>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a0a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004a0c:	b92d      	cbnz	r5, 8004a1a <HAL_ADC_Init+0x122>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7fc fb56 	bl	80010c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a14:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a16:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a1c:	06db      	lsls	r3, r3, #27
 8004a1e:	f100 8099 	bmi.w	8004b54 <HAL_ADC_Init+0x25c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a28:	f023 0302 	bic.w	r3, r3, #2
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004a32:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <HAL_ADC_Init+0x270>)
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004a3a:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	6861      	ldr	r1, [r4, #4]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a44:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a46:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a4e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a56:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a66:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a76:	493b      	ldr	r1, [pc, #236]	; (8004b64 <HAL_ADC_Init+0x26c>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a78:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a7c:	428a      	cmp	r2, r1
 8004a7e:	d05d      	beq.n	8004b3c <HAL_ADC_Init+0x244>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a80:	6899      	ldr	r1, [r3, #8]
 8004a82:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004a86:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a9e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aa0:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004aa2:	f022 0202 	bic.w	r2, r2, #2
 8004aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004aae:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ab0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d049      	beq.n	8004b4c <HAL_ADC_Init+0x254>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d904      	bls.n	8004aca <HAL_ADC_Init+0x1d2>
 8004ac0:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8004ac4:	4826      	ldr	r0, [pc, #152]	; (8004b60 <HAL_ADC_Init+0x268>)
 8004ac6:	f7fd f834 	bl	8001b32 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004aca:	6823      	ldr	r3, [r4, #0]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004acc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ace:	685a      	ldr	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ad0:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ae6:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8004ae8:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aea:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aec:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004af0:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004af2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004afe:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b12:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004b24:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004b26:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004b34:	2300      	movs	r3, #0
 8004b36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b4a:	e7a7      	b.n	8004a9c <HAL_ADC_Init+0x1a4>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b52:	e7c8      	b.n	8004ae6 <HAL_ADC_Init+0x1ee>
    tmp_hal_status = HAL_ERROR;
 8004b54:	2001      	movs	r0, #1
 8004b56:	e7ed      	b.n	8004b34 <HAL_ADC_Init+0x23c>
    return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
}
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	40012000 	.word	0x40012000
 8004b60:	0802aaa1 	.word	0x0802aaa1
 8004b64:	0f000001 	.word	0x0f000001
 8004b68:	40012300 	.word	0x40012300

08004b6c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8004b6c:	2300      	movs	r3, #0
{
 8004b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8004b70:	9301      	str	r3, [sp, #4]
{
 8004b72:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004b74:	680b      	ldr	r3, [r1, #0]
{
 8004b76:	460f      	mov	r7, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004b78:	2b12      	cmp	r3, #18
 8004b7a:	d907      	bls.n	8004b8c <HAL_ADC_ConfigChannel+0x20>
 8004b7c:	4a54      	ldr	r2, [pc, #336]	; (8004cd0 <HAL_ADC_ConfigChannel+0x164>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_ADC_ConfigChannel+0x20>
 8004b82:	f240 615c 	movw	r1, #1628	; 0x65c
 8004b86:	4853      	ldr	r0, [pc, #332]	; (8004cd4 <HAL_ADC_ConfigChannel+0x168>)
 8004b88:	f7fc ffd3 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	2b0f      	cmp	r3, #15
 8004b92:	d904      	bls.n	8004b9e <HAL_ADC_ConfigChannel+0x32>
 8004b94:	f240 615d 	movw	r1, #1629	; 0x65d
 8004b98:	484e      	ldr	r0, [pc, #312]	; (8004cd4 <HAL_ADC_ConfigChannel+0x168>)
 8004b9a:	f7fc ffca 	bl	8001b32 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b07      	cmp	r3, #7
 8004ba2:	d904      	bls.n	8004bae <HAL_ADC_ConfigChannel+0x42>
 8004ba4:	f240 615e 	movw	r1, #1630	; 0x65e
 8004ba8:	484a      	ldr	r0, [pc, #296]	; (8004cd4 <HAL_ADC_ConfigChannel+0x168>)
 8004baa:	f7fc ffc2 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hadc);
 8004bae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d070      	beq.n	8004c98 <HAL_ADC_ConfigChannel+0x12c>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004bb6:	683d      	ldr	r5, [r7, #0]
  __HAL_LOCK(hadc);
 8004bb8:	2301      	movs	r3, #1
 8004bba:	68ba      	ldr	r2, [r7, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004bbc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004bbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9)
 8004bc6:	d930      	bls.n	8004c2a <HAL_ADC_ConfigChannel+0xbe>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004bc8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004bcc:	f04f 0e07 	mov.w	lr, #7
 8004bd0:	68c1      	ldr	r1, [r0, #12]
 8004bd2:	3b1e      	subs	r3, #30
 8004bd4:	fa0e fe03 	lsl.w	lr, lr, r3
 8004bd8:	ea21 010e 	bic.w	r1, r1, lr
 8004bdc:	60c1      	str	r1, [r0, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bde:	493c      	ldr	r1, [pc, #240]	; (8004cd0 <HAL_ADC_ConfigChannel+0x164>)
 8004be0:	428d      	cmp	r5, r1
 8004be2:	d11d      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0xb4>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004be4:	68c3      	ldr	r3, [r0, #12]
 8004be6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bea:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	2a06      	cmp	r2, #6
 8004bf0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8004bf4:	d829      	bhi.n	8004c4a <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bf6:	4413      	add	r3, r2
 8004bf8:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004bfa:	1f59      	subs	r1, r3, #5
 8004bfc:	231f      	movs	r3, #31
 8004bfe:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c00:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c04:	ea27 0303 	bic.w	r3, r7, r3
 8004c08:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c0a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	6341      	str	r1, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c10:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_ADC_ConfigChannel+0x16c>)
 8004c12:	4298      	cmp	r0, r3
 8004c14:	d038      	beq.n	8004c88 <HAL_ADC_ConfigChannel+0x11c>
  __HAL_UNLOCK(hadc);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c20:	68c1      	ldr	r1, [r0, #12]
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	430b      	orrs	r3, r1
 8004c28:	e7df      	b.n	8004bea <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c2a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8004c2e:	f04f 0e07 	mov.w	lr, #7
 8004c32:	6901      	ldr	r1, [r0, #16]
 8004c34:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c3c:	ea21 010e 	bic.w	r1, r1, lr
 8004c40:	6101      	str	r1, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c42:	6901      	ldr	r1, [r0, #16]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6103      	str	r3, [r0, #16]
 8004c48:	e7d0      	b.n	8004bec <HAL_ADC_ConfigChannel+0x80>
  else if (sConfig->Rank < 13)
 8004c4a:	2a0c      	cmp	r2, #12
 8004c4c:	d80e      	bhi.n	8004c6c <HAL_ADC_ConfigChannel+0x100>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c4e:	4413      	add	r3, r2
 8004c50:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004c52:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8004c56:	231f      	movs	r3, #31
 8004c58:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c5a:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c5e:	ea21 0303 	bic.w	r3, r1, r3
 8004c62:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004c66:	431a      	orrs	r2, r3
 8004c68:	6302      	str	r2, [r0, #48]	; 0x30
 8004c6a:	e7d1      	b.n	8004c10 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c6c:	4413      	add	r3, r2
 8004c6e:	221f      	movs	r2, #31
 8004c70:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004c72:	3b41      	subs	r3, #65	; 0x41
 8004c74:	409a      	lsls	r2, r3
 8004c76:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c7a:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c7e:	62c2      	str	r2, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004c82:	4311      	orrs	r1, r2
 8004c84:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004c86:	e7c3      	b.n	8004c10 <HAL_ADC_ConfigChannel+0xa4>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c88:	2d12      	cmp	r5, #18
 8004c8a:	d107      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x130>
    ADC->CCR |= ADC_CCR_VBATE;
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <HAL_ADC_ConfigChannel+0x170>)
 8004c8e:	6853      	ldr	r3, [r2, #4]
 8004c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c94:	6053      	str	r3, [r2, #4]
 8004c96:	e7be      	b.n	8004c16 <HAL_ADC_ConfigChannel+0xaa>
  __HAL_LOCK(hadc);
 8004c98:	2002      	movs	r0, #2
 8004c9a:	e7bf      	b.n	8004c1c <HAL_ADC_ConfigChannel+0xb0>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_ADC_ConfigChannel+0x164>)
 8004c9e:	429d      	cmp	r5, r3
 8004ca0:	d001      	beq.n	8004ca6 <HAL_ADC_ConfigChannel+0x13a>
 8004ca2:	2d11      	cmp	r5, #17
 8004ca4:	d1b7      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0xaa>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ca6:	490d      	ldr	r1, [pc, #52]	; (8004cdc <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ca8:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004caa:	684a      	ldr	r2, [r1, #4]
 8004cac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004cb0:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cb2:	d1b0      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0xaa>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <HAL_ADC_ConfigChannel+0x174>)
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <HAL_ADC_ConfigChannel+0x178>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	4353      	muls	r3, r2
        counter--;
 8004cc2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004cc4:	9b01      	ldr	r3, [sp, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0a5      	beq.n	8004c16 <HAL_ADC_ConfigChannel+0xaa>
        counter--;
 8004cca:	9b01      	ldr	r3, [sp, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	e7f8      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x156>
 8004cd0:	10000012 	.word	0x10000012
 8004cd4:	0802aaa1 	.word	0x0802aaa1
 8004cd8:	40012000 	.word	0x40012000
 8004cdc:	40012300 	.word	0x40012300
 8004ce0:	200000b8 	.word	0x200000b8
 8004ce4:	000f4240 	.word	0x000f4240

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004ce8:	1ec3      	subs	r3, r0, #3
 8004cea:	2b04      	cmp	r3, #4
{
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004cf0:	d903      	bls.n	8004cfa <HAL_NVIC_SetPriorityGrouping+0x12>
 8004cf2:	2192      	movs	r1, #146	; 0x92
 8004cf4:	4809      	ldr	r0, [pc, #36]	; (8004d1c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8004cf6:	f7fc ff1c 	bl	8001b32 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cfc:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cfe:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d00:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004d14:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8004d16:	60d4      	str	r4, [r2, #12]
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	bf00      	nop
 8004d1c:	0802aadf 	.word	0x0802aadf
 8004d20:	e000ed00 	.word	0xe000ed00

08004d24 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004d24:	2a0f      	cmp	r2, #15
{ 
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	4604      	mov	r4, r0
 8004d2a:	460e      	mov	r6, r1
 8004d2c:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004d2e:	d903      	bls.n	8004d38 <HAL_NVIC_SetPriority+0x14>
 8004d30:	21aa      	movs	r1, #170	; 0xaa
 8004d32:	481d      	ldr	r0, [pc, #116]	; (8004da8 <HAL_NVIC_SetPriority+0x84>)
 8004d34:	f7fc fefd 	bl	8001b32 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004d38:	2e0f      	cmp	r6, #15
 8004d3a:	d903      	bls.n	8004d44 <HAL_NVIC_SetPriority+0x20>
 8004d3c:	21ab      	movs	r1, #171	; 0xab
 8004d3e:	481a      	ldr	r0, [pc, #104]	; (8004da8 <HAL_NVIC_SetPriority+0x84>)
 8004d40:	f7fc fef7 	bl	8001b32 <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_NVIC_SetPriority+0x88>)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d46:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d4e:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d52:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	bf28      	it	cs
 8004d58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d5a:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d5c:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d60:	bf8c      	ite	hi
 8004d62:	3903      	subhi	r1, #3
 8004d64:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 8004d66:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d68:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d6c:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d70:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d74:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d78:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d7c:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	ea42 0205 	orr.w	r2, r2, r5
 8004d84:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8004d88:	db07      	blt.n	8004d9a <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8a:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8004d94:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9a:	f004 040f 	and.w	r4, r4, #15
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_NVIC_SetPriority+0x8c>)
 8004da2:	551a      	strb	r2, [r3, r4]
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
 8004da6:	bf00      	nop
 8004da8:	0802aadf 	.word	0x0802aadf
 8004dac:	e000ed00 	.word	0xe000ed00
 8004db0:	e000ed14 	.word	0xe000ed14

08004db4 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004db4:	2800      	cmp	r0, #0
 8004db6:	da03      	bge.n	8004dc0 <HAL_NVIC_EnableIRQ+0xc>
 8004db8:	21be      	movs	r1, #190	; 0xbe
 8004dba:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <HAL_NVIC_EnableIRQ+0x20>)
 8004dbc:	f7fc beb9 	b.w	8001b32 <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc0:	0942      	lsrs	r2, r0, #5
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 001f 	and.w	r0, r0, #31
 8004dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8004dcc:	4b02      	ldr	r3, [pc, #8]	; (8004dd8 <HAL_NVIC_EnableIRQ+0x24>)
 8004dce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004dd2:	4770      	bx	lr
 8004dd4:	0802aadf 	.word	0x0802aadf
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	da03      	bge.n	8004de8 <HAL_NVIC_DisableIRQ+0xc>
 8004de0:	21ce      	movs	r1, #206	; 0xce
 8004de2:	4809      	ldr	r0, [pc, #36]	; (8004e08 <HAL_NVIC_DisableIRQ+0x2c>)
 8004de4:	f7fc bea5 	b.w	8001b32 <assert_failed>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de8:	0943      	lsrs	r3, r0, #5
 8004dea:	2201      	movs	r2, #1
 8004dec:	f000 001f 	and.w	r0, r0, #31
 8004df0:	3320      	adds	r3, #32
 8004df2:	fa02 f000 	lsl.w	r0, r2, r0
 8004df6:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <HAL_NVIC_DisableIRQ+0x30>)
 8004df8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004dfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	0802aadf 	.word	0x0802aadf
 8004e0c:	e000e100 	.word	0xe000e100

08004e10 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e10:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e12:	4604      	mov	r4, r0
 8004e14:	b908      	cbnz	r0, 8004e1a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
 8004e18:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <HAL_CRC_Init+0xd4>)
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d003      	beq.n	8004e2a <HAL_CRC_Init+0x1a>
 8004e22:	2170      	movs	r1, #112	; 0x70
 8004e24:	4830      	ldr	r0, [pc, #192]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004e26:	f7fc fe84 	bl	8001b32 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e2a:	7f63      	ldrb	r3, [r4, #29]
 8004e2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e30:	b91b      	cbnz	r3, 8004e3a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e32:	7722      	strb	r2, [r4, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7fc f99f 	bl	8001178 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8004e3e:	7923      	ldrb	r3, [r4, #4]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d903      	bls.n	8004e4c <HAL_CRC_Init+0x3c>
 8004e44:	217e      	movs	r1, #126	; 0x7e
 8004e46:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004e48:	f7fc fe73 	bl	8001b32 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e4c:	7923      	ldrb	r3, [r4, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d13e      	bne.n	8004ed0 <HAL_CRC_Init+0xc0>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	4a25      	ldr	r2, [pc, #148]	; (8004eec <HAL_CRC_Init+0xdc>)
 8004e56:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	f022 0218 	bic.w	r2, r2, #24
 8004e5e:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8004e60:	7963      	ldrb	r3, [r4, #5]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d903      	bls.n	8004e6e <HAL_CRC_Init+0x5e>
 8004e66:	2190      	movs	r1, #144	; 0x90
 8004e68:	481f      	ldr	r0, [pc, #124]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004e6a:	f7fc fe62 	bl	8001b32 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e6e:	7962      	ldrb	r2, [r4, #5]
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d134      	bne.n	8004ee0 <HAL_CRC_Init+0xd0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e76:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8004e7c:	6963      	ldr	r3, [r4, #20]
 8004e7e:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8004e82:	d003      	beq.n	8004e8c <HAL_CRC_Init+0x7c>
 8004e84:	219c      	movs	r1, #156	; 0x9c
 8004e86:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004e88:	f7fc fe53 	bl	8001b32 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	6961      	ldr	r1, [r4, #20]
 8004e90:	6893      	ldr	r3, [r2, #8]
 8004e92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e96:	430b      	orrs	r3, r1
 8004e98:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8004e9a:	69a3      	ldr	r3, [r4, #24]
 8004e9c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004ea0:	d003      	beq.n	8004eaa <HAL_CRC_Init+0x9a>
 8004ea2:	21a0      	movs	r1, #160	; 0xa0
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004ea6:	f7fc fe44 	bl	8001b32 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	69a1      	ldr	r1, [r4, #24]
 8004eae:	6893      	ldr	r3, [r2, #8]
 8004eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6093      	str	r3, [r2, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8004eb8:	6a23      	ldr	r3, [r4, #32]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d903      	bls.n	8004ec8 <HAL_CRC_Init+0xb8>
 8004ec0:	21a5      	movs	r1, #165	; 0xa5
 8004ec2:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <HAL_CRC_Init+0xd8>)
 8004ec4:	f7fc fe35 	bl	8001b32 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ec8:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8004eca:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8004ecc:	7763      	strb	r3, [r4, #29]
}
 8004ece:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004ed0:	68e2      	ldr	r2, [r4, #12]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	68a1      	ldr	r1, [r4, #8]
 8004ed6:	f000 f80b 	bl	8004ef0 <HAL_CRCEx_Polynomial_Set>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0c0      	beq.n	8004e60 <HAL_CRC_Init+0x50>
 8004ede:	e79a      	b.n	8004e16 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	e7ca      	b.n	8004e7a <HAL_CRC_Init+0x6a>
 8004ee4:	40023000 	.word	0x40023000
 8004ee8:	0802ab20 	.word	0x0802ab20
 8004eec:	04c11db7 	.word	0x04c11db7

08004ef0 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8004ef0:	f032 0318 	bics.w	r3, r2, #24
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460d      	mov	r5, r1
 8004efa:	4614      	mov	r4, r2
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8004efc:	d003      	beq.n	8004f06 <HAL_CRCEx_Polynomial_Set+0x16>
 8004efe:	215f      	movs	r1, #95	; 0x5f
 8004f00:	4811      	ldr	r0, [pc, #68]	; (8004f48 <HAL_CRCEx_Polynomial_Set+0x58>)
 8004f02:	f7fc fe16 	bl	8001b32 <assert_failed>
{
 8004f06:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f08:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004f0c:	d306      	bcc.n	8004f1c <HAL_CRCEx_Polynomial_Set+0x2c>
 8004f0e:	fa25 f203 	lsr.w	r2, r5, r3
 8004f12:	07d2      	lsls	r2, r2, #31
 8004f14:	d5f8      	bpl.n	8004f08 <HAL_CRCEx_Polynomial_Set+0x18>
  {
  }

  switch (PolyLength)
 8004f16:	2c08      	cmp	r4, #8
 8004f18:	d014      	beq.n	8004f44 <HAL_CRCEx_Polynomial_Set+0x54>
 8004f1a:	d809      	bhi.n	8004f30 <HAL_CRCEx_Polynomial_Set+0x40>
 8004f1c:	b974      	cbnz	r4, 8004f3c <HAL_CRCEx_Polynomial_Set+0x4c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f1e:	6833      	ldr	r3, [r6, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f20:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004f22:	615d      	str	r5, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	f022 0218 	bic.w	r2, r2, #24
 8004f2a:	4314      	orrs	r4, r2
 8004f2c:	609c      	str	r4, [r3, #8]
  }
  /* Return function status */
  return status;
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
  switch (PolyLength)
 8004f30:	2c10      	cmp	r4, #16
 8004f32:	d005      	beq.n	8004f40 <HAL_CRCEx_Polynomial_Set+0x50>
 8004f34:	2c18      	cmp	r4, #24
 8004f36:	d101      	bne.n	8004f3c <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f38:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f3a:	d9f0      	bls.n	8004f1e <HAL_CRCEx_Polynomial_Set+0x2e>
  switch (PolyLength)
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f40:	2b07      	cmp	r3, #7
 8004f42:	e7fa      	b.n	8004f3a <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f44:	2b0f      	cmp	r3, #15
 8004f46:	e7f8      	b.n	8004f3a <HAL_CRCEx_Polynomial_Set+0x4a>
 8004f48:	0802ab5e 	.word	0x0802ab5e

08004f4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8004f4c:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8004f4e:	4604      	mov	r4, r0
 8004f50:	2800      	cmp	r0, #0
 8004f52:	f000 80a2 	beq.w	800509a <HAL_DCMI_Init+0x14e>
  {
     return HAL_ERROR;
  }
  
  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 8004f56:	6802      	ldr	r2, [r0, #0]
 8004f58:	4b51      	ldr	r3, [pc, #324]	; (80050a0 <HAL_DCMI_Init+0x154>)
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d003      	beq.n	8004f66 <HAL_DCMI_Init+0x1a>
 8004f5e:	21ba      	movs	r1, #186	; 0xba
 8004f60:	4850      	ldr	r0, [pc, #320]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004f62:	f7fc fde6 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	f033 0320 	bics.w	r3, r3, #32
 8004f6c:	d003      	beq.n	8004f76 <HAL_DCMI_Init+0x2a>
 8004f6e:	21bb      	movs	r1, #187	; 0xbb
 8004f70:	484c      	ldr	r0, [pc, #304]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004f72:	f7fc fdde 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004f7c:	d003      	beq.n	8004f86 <HAL_DCMI_Init+0x3a>
 8004f7e:	21bc      	movs	r1, #188	; 0xbc
 8004f80:	4848      	ldr	r0, [pc, #288]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004f82:	f7fc fdd6 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8004f8c:	d003      	beq.n	8004f96 <HAL_DCMI_Init+0x4a>
 8004f8e:	21bd      	movs	r1, #189	; 0xbd
 8004f90:	4844      	ldr	r0, [pc, #272]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004f92:	f7fc fdce 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	f033 0310 	bics.w	r3, r3, #16
 8004f9c:	d003      	beq.n	8004fa6 <HAL_DCMI_Init+0x5a>
 8004f9e:	21be      	movs	r1, #190	; 0xbe
 8004fa0:	4840      	ldr	r0, [pc, #256]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004fa2:	f7fc fdc6 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8004fa6:	6963      	ldr	r3, [r4, #20]
 8004fa8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004fac:	d006      	beq.n	8004fbc <HAL_DCMI_Init+0x70>
 8004fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb2:	d003      	beq.n	8004fbc <HAL_DCMI_Init+0x70>
 8004fb4:	21bf      	movs	r1, #191	; 0xbf
 8004fb6:	483b      	ldr	r0, [pc, #236]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004fb8:	f7fc fdbb 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8004fc2:	d003      	beq.n	8004fcc <HAL_DCMI_Init+0x80>
 8004fc4:	21c0      	movs	r1, #192	; 0xc0
 8004fc6:	4837      	ldr	r0, [pc, #220]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004fc8:	f7fc fdb3 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8004fcc:	6a23      	ldr	r3, [r4, #32]
 8004fce:	f033 0308 	bics.w	r3, r3, #8
 8004fd2:	d003      	beq.n	8004fdc <HAL_DCMI_Init+0x90>
 8004fd4:	21c1      	movs	r1, #193	; 0xc1
 8004fd6:	4833      	ldr	r0, [pc, #204]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004fd8:	f7fc fdab 	bl	8001b32 <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8004fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fde:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8004fe2:	d003      	beq.n	8004fec <HAL_DCMI_Init+0xa0>
 8004fe4:	21c3      	movs	r1, #195	; 0xc3
 8004fe6:	482f      	ldr	r0, [pc, #188]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004fe8:	f7fc fda3 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8004fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fee:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8004ff2:	d003      	beq.n	8004ffc <HAL_DCMI_Init+0xb0>
 8004ff4:	21c4      	movs	r1, #196	; 0xc4
 8004ff6:	482b      	ldr	r0, [pc, #172]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8004ff8:	f7fc fd9b 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8004ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004ffe:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005002:	d003      	beq.n	800500c <HAL_DCMI_Init+0xc0>
 8005004:	21c5      	movs	r1, #197	; 0xc5
 8005006:	4827      	ldr	r0, [pc, #156]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8005008:	f7fc fd93 	bl	8001b32 <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 800500c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800500e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005012:	d003      	beq.n	800501c <HAL_DCMI_Init+0xd0>
 8005014:	21c6      	movs	r1, #198	; 0xc6
 8005016:	4823      	ldr	r0, [pc, #140]	; (80050a4 <HAL_DCMI_Init+0x158>)
 8005018:	f7fc fd8b 	bl	8001b32 <assert_failed>
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800501c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005020:	b913      	cbnz	r3, 8005028 <HAL_DCMI_Init+0xdc>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005022:	4620      	mov	r0, r4
 8005024:	f7fc f8da 	bl	80011dc <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005028:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800502a:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800502c:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800502e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005032:	4b1d      	ldr	r3, [pc, #116]	; (80050a8 <HAL_DCMI_Init+0x15c>)
 8005034:	6811      	ldr	r1, [r2, #0]
 8005036:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005038:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800503a:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800503c:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	6810      	ldr	r0, [r2, #0]
 8005042:	ea43 0301 	orr.w	r3, r3, r1
 8005046:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800504a:	6925      	ldr	r5, [r4, #16]
 800504c:	ea43 0305 	orr.w	r3, r3, r5
 8005050:	68a5      	ldr	r5, [r4, #8]
 8005052:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005056:	69a5      	ldr	r5, [r4, #24]
 8005058:	ea43 0305 	orr.w	r3, r3, r5
 800505c:	6a25      	ldr	r5, [r4, #32]
 800505e:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005062:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005064:	ea43 0305 	orr.w	r3, r3, r5
 8005068:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800506a:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800506e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005070:	ea43 0305 	orr.w	r3, r3, r5
 8005074:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005076:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800507a:	ea43 0300 	orr.w	r3, r3, r0
 800507e:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005080:	d101      	bne.n	8005086 <HAL_DCMI_Init+0x13a>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005082:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8005084:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005086:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005088:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800508a:	f043 031e 	orr.w	r3, r3, #30
 800508e:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005090:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005092:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005094:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8005098:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800509a:	2001      	movs	r0, #1
}
 800509c:	bd38      	pop	{r3, r4, r5, pc}
 800509e:	bf00      	nop
 80050a0:	50050000 	.word	0x50050000
 80050a4:	0802ab9f 	.word	0x0802ab9f
 80050a8:	ffe0f007 	.word	0xffe0f007

080050ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	4617      	mov	r7, r2
 80050b2:	4698      	mov	r8, r3

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 80050ba:	4604      	mov	r4, r0
 80050bc:	460d      	mov	r5, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80050be:	429a      	cmp	r2, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80050c2:	d904      	bls.n	80050ce <HAL_DMA_Start_IT+0x22>
 80050c4:	f240 11cd 	movw	r1, #461	; 0x1cd
 80050c8:	4820      	ldr	r0, [pc, #128]	; (800514c <HAL_DMA_Start_IT+0xa0>)
 80050ca:	f7fc fd32 	bl	8001b32 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050ce:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d037      	beq.n	8005146 <HAL_DMA_Start_IT+0x9a>
 80050d6:	2301      	movs	r3, #1
 80050d8:	2002      	movs	r0, #2
 80050da:	2100      	movs	r1, #0
 80050dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050e0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d12a      	bne.n	800513e <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ec:	6561      	str	r1, [r4, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050ee:	6821      	ldr	r1, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050f0:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050f2:	6808      	ldr	r0, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050f4:	2b40      	cmp	r3, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050f6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80050fa:	6008      	str	r0, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 80050fc:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005100:	d11a      	bne.n	8005138 <HAL_DMA_Start_IT+0x8c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005102:	608f      	str	r7, [r1, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005104:	60cd      	str	r5, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005106:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005108:	233f      	movs	r3, #63	; 0x3f
 800510a:	4093      	lsls	r3, r2
 800510c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800510e:	680b      	ldr	r3, [r1, #0]
 8005110:	f043 0316 	orr.w	r3, r3, #22
 8005114:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005116:	694b      	ldr	r3, [r1, #20]
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800511e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005120:	b11b      	cbz	r3, 800512a <HAL_DMA_Start_IT+0x7e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005122:	680b      	ldr	r3, [r1, #0]
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 800512a:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	600b      	str	r3, [r1, #0]
 8005134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005138:	608d      	str	r5, [r1, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800513a:	60cf      	str	r7, [r1, #12]
 800513c:	e7e3      	b.n	8005106 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);	  
 800513e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 8005146:	2002      	movs	r0, #2
}
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800514c:	0802abde 	.word	0x0802abde

08005150 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005150:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005152:	4770      	bx	lr

08005154 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005154:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005156:	4604      	mov	r4, r0
 8005158:	2800      	cmp	r0, #0
 800515a:	d046      	beq.n	80051ea <HAL_DMA2D_Init+0x96>
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 800515c:	6802      	ldr	r2, [r0, #0]
 800515e:	4b24      	ldr	r3, [pc, #144]	; (80051f0 <HAL_DMA2D_Init+0x9c>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d003      	beq.n	800516c <HAL_DMA2D_Init+0x18>
 8005164:	21f6      	movs	r1, #246	; 0xf6
 8005166:	4823      	ldr	r0, [pc, #140]	; (80051f4 <HAL_DMA2D_Init+0xa0>)
 8005168:	f7fc fce3 	bl	8001b32 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005172:	d003      	beq.n	800517c <HAL_DMA2D_Init+0x28>
 8005174:	21f7      	movs	r1, #247	; 0xf7
 8005176:	481f      	ldr	r0, [pc, #124]	; (80051f4 <HAL_DMA2D_Init+0xa0>)
 8005178:	f7fc fcdb 	bl	8001b32 <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d903      	bls.n	800518a <HAL_DMA2D_Init+0x36>
 8005182:	21f8      	movs	r1, #248	; 0xf8
 8005184:	481b      	ldr	r0, [pc, #108]	; (80051f4 <HAL_DMA2D_Init+0xa0>)
 8005186:	f7fc fcd4 	bl	8001b32 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d303      	bcc.n	800519a <HAL_DMA2D_Init+0x46>
 8005192:	21f9      	movs	r1, #249	; 0xf9
 8005194:	4817      	ldr	r0, [pc, #92]	; (80051f4 <HAL_DMA2D_Init+0xa0>)
 8005196:	f7fc fccc 	bl	8001b32 <assert_failed>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800519a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800519e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051a2:	b923      	cbnz	r3, 80051ae <HAL_DMA2D_Init+0x5a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80051a4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fe f915 	bl	80033d8 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051ae:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051b0:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051b2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80051b4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051c0:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051c2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80051c4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051c6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80051c8:	f023 0307 	bic.w	r3, r3, #7
 80051cc:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051ce:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80051d0:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80051d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80051d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80051dc:	430b      	orrs	r3, r1
 80051de:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80051e0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80051e2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80051e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80051e8:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	4002b000 	.word	0x4002b000
 80051f4:	0802ac1c 	.word	0x0802ac1c

080051f8 <HAL_DMA2D_LineEventCallback>:
 80051f8:	4770      	bx	lr

080051fa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80051fa:	4770      	bx	lr

080051fc <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80051fc:	6803      	ldr	r3, [r0, #0]
{
 80051fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005200:	685e      	ldr	r6, [r3, #4]
{
 8005202:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005204:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005206:	07f2      	lsls	r2, r6, #31
 8005208:	d514      	bpl.n	8005234 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800520a:	05e9      	lsls	r1, r5, #23
 800520c:	d512      	bpl.n	8005234 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005214:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005216:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800521e:	2201      	movs	r2, #1
 8005220:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005222:	2304      	movs	r3, #4
 8005224:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005228:	2300      	movs	r3, #0
 800522a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800522e:	6943      	ldr	r3, [r0, #20]
 8005230:	b103      	cbz	r3, 8005234 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8005232:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005234:	06b2      	lsls	r2, r6, #26
 8005236:	d516      	bpl.n	8005266 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005238:	04ab      	lsls	r3, r5, #18
 800523a:	d514      	bpl.n	8005266 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005244:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005246:	2220      	movs	r2, #32
 8005248:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800524a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800524c:	f043 0302 	orr.w	r3, r3, #2
 8005250:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005252:	2304      	movs	r3, #4
 8005254:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005258:	2300      	movs	r3, #0
 800525a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800525e:	6963      	ldr	r3, [r4, #20]
 8005260:	b10b      	cbz	r3, 8005266 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8005262:	4620      	mov	r0, r4
 8005264:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005266:	0730      	lsls	r0, r6, #28
 8005268:	d516      	bpl.n	8005298 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800526a:	0529      	lsls	r1, r5, #20
 800526c:	d514      	bpl.n	8005298 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005276:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005278:	2208      	movs	r2, #8
 800527a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800527c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005284:	2304      	movs	r3, #4
 8005286:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800528a:	2300      	movs	r3, #0
 800528c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005290:	6963      	ldr	r3, [r4, #20]
 8005292:	b10b      	cbz	r3, 8005298 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8005294:	4620      	mov	r0, r4
 8005296:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005298:	0772      	lsls	r2, r6, #29
 800529a:	d50b      	bpl.n	80052b4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800529c:	056b      	lsls	r3, r5, #21
 800529e:	d509      	bpl.n	80052b4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80052a0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80052a2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80052ac:	2204      	movs	r2, #4
 80052ae:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80052b0:	f7ff ffa2 	bl	80051f8 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80052b4:	07b0      	lsls	r0, r6, #30
 80052b6:	d514      	bpl.n	80052e2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80052b8:	05a9      	lsls	r1, r5, #22
 80052ba:	d512      	bpl.n	80052e2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80052c6:	2202      	movs	r2, #2
 80052c8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052cc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80052d4:	2300      	movs	r3, #0
 80052d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	b10b      	cbz	r3, 80052e2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80052de:	4620      	mov	r0, r4
 80052e0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80052e2:	06f2      	lsls	r2, r6, #27
 80052e4:	d513      	bpl.n	800530e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80052e6:	04eb      	lsls	r3, r5, #19
 80052e8:	d511      	bpl.n	800530e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80052ea:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80052ec:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80052f6:	2210      	movs	r2, #16
 80052f8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052fc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052fe:	2301      	movs	r3, #1
 8005300:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005304:	2300      	movs	r3, #0
 8005306:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800530a:	f7ff ff76 	bl	80051fa <HAL_DMA2D_CLUTLoadingCpltCallback>
 800530e:	bd70      	pop	{r4, r5, r6, pc}

08005310 <HAL_DMA2D_ConfigLayer>:
{
  DMA2D_LayerCfgTypeDef *pLayerCfg;
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005310:	2901      	cmp	r1, #1
{
 8005312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	460e      	mov	r6, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005318:	d904      	bls.n	8005324 <HAL_DMA2D_ConfigLayer+0x14>
 800531a:	f240 614a 	movw	r1, #1610	; 0x64a
 800531e:	4837      	ldr	r0, [pc, #220]	; (80053fc <HAL_DMA2D_ConfigLayer+0xec>)
 8005320:	f7fc fc07 	bl	8001b32 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8005324:	0135      	lsls	r5, r6, #4
 8005326:	1963      	adds	r3, r4, r5
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532e:	d304      	bcc.n	800533a <HAL_DMA2D_ConfigLayer+0x2a>
 8005330:	f240 614b 	movw	r1, #1611	; 0x64b
 8005334:	4831      	ldr	r0, [pc, #196]	; (80053fc <HAL_DMA2D_ConfigLayer+0xec>)
 8005336:	f7fc fbfc 	bl	8001b32 <assert_failed>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005340:	d014      	beq.n	800536c <HAL_DMA2D_ConfigLayer+0x5c>
  {
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8005342:	1963      	adds	r3, r4, r5
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b0a      	cmp	r3, #10
 8005348:	d904      	bls.n	8005354 <HAL_DMA2D_ConfigLayer+0x44>
 800534a:	f240 614e 	movw	r1, #1614	; 0x64e
 800534e:	482b      	ldr	r0, [pc, #172]	; (80053fc <HAL_DMA2D_ConfigLayer+0xec>)
 8005350:	f7fc fbef 	bl	8001b32 <assert_failed>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8005354:	6863      	ldr	r3, [r4, #4]
 8005356:	b14b      	cbz	r3, 800536c <HAL_DMA2D_ConfigLayer+0x5c>
    {
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8005358:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d904      	bls.n	800536c <HAL_DMA2D_ConfigLayer+0x5c>
 8005362:	f240 6151 	movw	r1, #1617	; 0x651
 8005366:	4825      	ldr	r0, [pc, #148]	; (80053fc <HAL_DMA2D_ConfigLayer+0xec>)
 8005368:	f7fc fbe3 	bl	8001b32 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800536c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005370:	2002      	movs	r0, #2
 8005372:	2b01      	cmp	r3, #1
 8005374:	d040      	beq.n	80053f8 <HAL_DMA2D_ConfigLayer+0xe8>
 8005376:	2301      	movs	r3, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005378:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800537c:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005400 <HAL_DMA2D_ConfigLayer+0xf0>
  __HAL_LOCK(hdma2d);
 8005380:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005384:	1963      	adds	r3, r4, r5
 8005386:	69df      	ldr	r7, [r3, #28]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800538c:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005390:	3f09      	subs	r7, #9
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	2f01      	cmp	r7, #1
 8005396:	d80f      	bhi.n	80053b8 <HAL_DMA2D_ConfigLayer+0xa8>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005398:	f000 417f 	and.w	r1, r0, #4278190080	; 0xff000000
 800539c:	430a      	orrs	r2, r1
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800539e:	b976      	cbnz	r6, 80053be <HAL_DMA2D_ConfigLayer+0xae>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053a2:	ea01 010e 	and.w	r1, r1, lr
 80053a6:	430a      	orrs	r2, r1
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80053aa:	69a2      	ldr	r2, [r4, #24]
 80053ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80053ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
 80053b6:	e010      	b.n	80053da <HAL_DMA2D_ConfigLayer+0xca>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053b8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053bc:	b1a6      	cbz	r6, 80053e8 <HAL_DMA2D_ConfigLayer+0xd8>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80053be:	69d9      	ldr	r1, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80053c0:	4425      	add	r5, r4

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053c2:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80053c4:	ea01 010e 	and.w	r1, r1, lr
 80053c8:	ea42 0201 	orr.w	r2, r2, r1
 80053cc:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80053ce:	69aa      	ldr	r2, [r5, #24]
 80053d0:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053d2:	d802      	bhi.n	80053da <HAL_DMA2D_ConfigLayer+0xca>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80053d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80053d8:	6218      	str	r0, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80053da:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80053dc:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80053de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80053e2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 80053e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053ea:	ea01 010e 	and.w	r1, r1, lr
 80053ee:	430a      	orrs	r2, r1
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80053f2:	69a2      	ldr	r2, [r4, #24]
 80053f4:	619a      	str	r2, [r3, #24]
 80053f6:	e7f0      	b.n	80053da <HAL_DMA2D_ConfigLayer+0xca>
}
 80053f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053fa:	bf00      	nop
 80053fc:	0802ac1c 	.word	0x0802ac1c
 8005400:	00fcfff0 	.word	0x00fcfff0

08005404 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005404:	4ba3      	ldr	r3, [pc, #652]	; (8005694 <HAL_GPIO_Init+0x290>)
 8005406:	4298      	cmp	r0, r3
{
 8005408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	4604      	mov	r4, r0
 800540e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005410:	d02b      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005416:	4298      	cmp	r0, r3
 8005418:	d027      	beq.n	800546a <HAL_GPIO_Init+0x66>
 800541a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541e:	4298      	cmp	r0, r3
 8005420:	d023      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005426:	4298      	cmp	r0, r3
 8005428:	d01f      	beq.n	800546a <HAL_GPIO_Init+0x66>
 800542a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542e:	4298      	cmp	r0, r3
 8005430:	d01b      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005436:	4298      	cmp	r0, r3
 8005438:	d017      	beq.n	800546a <HAL_GPIO_Init+0x66>
 800543a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543e:	4298      	cmp	r0, r3
 8005440:	d013      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005446:	4298      	cmp	r0, r3
 8005448:	d00f      	beq.n	800546a <HAL_GPIO_Init+0x66>
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	4298      	cmp	r0, r3
 8005450:	d00b      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	4298      	cmp	r0, r3
 8005458:	d007      	beq.n	800546a <HAL_GPIO_Init+0x66>
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	4298      	cmp	r0, r3
 8005460:	d003      	beq.n	800546a <HAL_GPIO_Init+0x66>
 8005462:	21b1      	movs	r1, #177	; 0xb1
 8005464:	488c      	ldr	r0, [pc, #560]	; (8005698 <HAL_GPIO_Init+0x294>)
 8005466:	f7fc fb64 	bl	8001b32 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800546a:	882b      	ldrh	r3, [r5, #0]
 800546c:	b91b      	cbnz	r3, 8005476 <HAL_GPIO_Init+0x72>
 800546e:	21b2      	movs	r1, #178	; 0xb2
 8005470:	4889      	ldr	r0, [pc, #548]	; (8005698 <HAL_GPIO_Init+0x294>)
 8005472:	f7fc fb5e 	bl	8001b32 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005476:	686b      	ldr	r3, [r5, #4]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d917      	bls.n	80054ac <HAL_GPIO_Init+0xa8>
 800547c:	f1a3 0211 	sub.w	r2, r3, #17
 8005480:	2a01      	cmp	r2, #1
 8005482:	d913      	bls.n	80054ac <HAL_GPIO_Init+0xa8>
 8005484:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005488:	4984      	ldr	r1, [pc, #528]	; (800569c <HAL_GPIO_Init+0x298>)
 800548a:	428a      	cmp	r2, r1
 800548c:	d00e      	beq.n	80054ac <HAL_GPIO_Init+0xa8>
 800548e:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8005492:	428b      	cmp	r3, r1
 8005494:	d00a      	beq.n	80054ac <HAL_GPIO_Init+0xa8>
 8005496:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800549a:	428a      	cmp	r2, r1
 800549c:	d006      	beq.n	80054ac <HAL_GPIO_Init+0xa8>
 800549e:	4a80      	ldr	r2, [pc, #512]	; (80056a0 <HAL_GPIO_Init+0x29c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0xa8>
 80054a4:	21b3      	movs	r1, #179	; 0xb3
 80054a6:	487c      	ldr	r0, [pc, #496]	; (8005698 <HAL_GPIO_Init+0x294>)
 80054a8:	f7fc fb43 	bl	8001b32 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80054ac:	68ab      	ldr	r3, [r5, #8]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d903      	bls.n	80054ba <HAL_GPIO_Init+0xb6>
 80054b2:	21b4      	movs	r1, #180	; 0xb4
 80054b4:	4878      	ldr	r0, [pc, #480]	; (8005698 <HAL_GPIO_Init+0x294>)
 80054b6:	f7fc fb3c 	bl	8001b32 <assert_failed>
{
 80054ba:	2600      	movs	r6, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054bc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80056a8 <HAL_GPIO_Init+0x2a4>
    ioposition = ((uint32_t)0x01) << position;
 80054c0:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054c2:	682a      	ldr	r2, [r5, #0]
    ioposition = ((uint32_t)0x01) << position;
 80054c4:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054c8:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 80054cc:	454f      	cmp	r7, r9
 80054ce:	f040 80c7 	bne.w	8005660 <HAL_GPIO_Init+0x25c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d2:	686a      	ldr	r2, [r5, #4]
 80054d4:	f022 0210 	bic.w	r2, r2, #16
 80054d8:	2a02      	cmp	r2, #2
 80054da:	d116      	bne.n	800550a <HAL_GPIO_Init+0x106>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80054dc:	692a      	ldr	r2, [r5, #16]
 80054de:	2a0f      	cmp	r2, #15
 80054e0:	d903      	bls.n	80054ea <HAL_GPIO_Init+0xe6>
 80054e2:	21c5      	movs	r1, #197	; 0xc5
 80054e4:	486c      	ldr	r0, [pc, #432]	; (8005698 <HAL_GPIO_Init+0x294>)
 80054e6:	f7fc fb24 	bl	8001b32 <assert_failed>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054ea:	f006 0207 	and.w	r2, r6, #7
        temp = GPIOx->AFR[position >> 3];
 80054ee:	08f1      	lsrs	r1, r6, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054f0:	0090      	lsls	r0, r2, #2
 80054f2:	220f      	movs	r2, #15
 80054f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80054f8:	4082      	lsls	r2, r0
        temp = GPIOx->AFR[position >> 3];
 80054fa:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054fc:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005500:	692a      	ldr	r2, [r5, #16]
 8005502:	4082      	lsls	r2, r0
 8005504:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8005508:	620a      	str	r2, [r1, #32]
 800550a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800550e:	f04f 0a03 	mov.w	sl, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005512:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005514:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp = GPIOx->MODER;
 8005518:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800551a:	f002 0103 	and.w	r1, r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800551e:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005522:	ea6f 0a0a 	mvn.w	sl, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005526:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800552a:	3a01      	subs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800552c:	ea00 000a 	and.w	r0, r0, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005530:	2a01      	cmp	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005532:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8005536:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005538:	d817      	bhi.n	800556a <HAL_GPIO_Init+0x166>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800553a:	68ea      	ldr	r2, [r5, #12]
 800553c:	2a03      	cmp	r2, #3
 800553e:	d903      	bls.n	8005548 <HAL_GPIO_Init+0x144>
 8005540:	21d9      	movs	r1, #217	; 0xd9
 8005542:	4855      	ldr	r0, [pc, #340]	; (8005698 <HAL_GPIO_Init+0x294>)
 8005544:	f7fc faf5 	bl	8001b32 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8005548:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800554a:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800554c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005550:	686b      	ldr	r3, [r5, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005552:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005556:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
 800555a:	430a      	orrs	r2, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800555c:	40b3      	lsls	r3, r6
        GPIOx->OSPEEDR = temp;
 800555e:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8005560:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005562:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005566:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8005568:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 800556a:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800556c:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800556e:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005572:	68ab      	ldr	r3, [r5, #8]
 8005574:	fa03 f30b 	lsl.w	r3, r3, fp
 8005578:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 800557c:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800557e:	00c3      	lsls	r3, r0, #3
 8005580:	d56e      	bpl.n	8005660 <HAL_GPIO_Init+0x25c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005582:	4b48      	ldr	r3, [pc, #288]	; (80056a4 <HAL_GPIO_Init+0x2a0>)
 8005584:	f026 0103 	bic.w	r1, r6, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005588:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800558c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005596:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800559a:	645a      	str	r2, [r3, #68]	; 0x44
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a2:	9301      	str	r3, [sp, #4]
 80055a4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80055a6:	f006 0303 	and.w	r3, r6, #3
        temp = SYSCFG->EXTICR[position >> 2];
 80055aa:	688a      	ldr	r2, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80055ac:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80055b0:	fa0c f30e 	lsl.w	r3, ip, lr
 80055b4:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055b8:	4b36      	ldr	r3, [pc, #216]	; (8005694 <HAL_GPIO_Init+0x290>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d057      	beq.n	800566e <HAL_GPIO_Init+0x26a>
 80055be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d055      	beq.n	8005672 <HAL_GPIO_Init+0x26e>
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	429c      	cmp	r4, r3
 80055cc:	d053      	beq.n	8005676 <HAL_GPIO_Init+0x272>
 80055ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d2:	429c      	cmp	r4, r3
 80055d4:	d051      	beq.n	800567a <HAL_GPIO_Init+0x276>
 80055d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055da:	429c      	cmp	r4, r3
 80055dc:	d04f      	beq.n	800567e <HAL_GPIO_Init+0x27a>
 80055de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d04d      	beq.n	8005682 <HAL_GPIO_Init+0x27e>
 80055e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ea:	429c      	cmp	r4, r3
 80055ec:	d04b      	beq.n	8005686 <HAL_GPIO_Init+0x282>
 80055ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055f2:	429c      	cmp	r4, r3
 80055f4:	d049      	beq.n	800568a <HAL_GPIO_Init+0x286>
 80055f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fa:	429c      	cmp	r4, r3
 80055fc:	d047      	beq.n	800568e <HAL_GPIO_Init+0x28a>
 80055fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005602:	429c      	cmp	r4, r3
 8005604:	bf14      	ite	ne
 8005606:	230a      	movne	r3, #10
 8005608:	2309      	moveq	r3, #9
 800560a:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800560e:	03c7      	lsls	r7, r0, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005610:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8005614:	608b      	str	r3, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
 8005616:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI->IMR;
 800561a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800561e:	bf54      	ite	pl
 8005620:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8005622:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005626:	0383      	lsls	r3, r0, #14
        EXTI->IMR = temp;
 8005628:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->EMR;
 800562c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
 8005630:	bf54      	ite	pl
 8005632:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8005634:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005638:	02c7      	lsls	r7, r0, #11
        EXTI->EMR = temp;
 800563a:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI->RTSR;
 800563e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8005642:	bf54      	ite	pl
 8005644:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8005646:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 800564a:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800564e:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR;
 8005650:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
 8005654:	bf54      	ite	pl
 8005656:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 8005658:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 800565c:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005660:	3601      	adds	r6, #1
 8005662:	2e10      	cmp	r6, #16
 8005664:	f47f af2c 	bne.w	80054c0 <HAL_GPIO_Init+0xbc>
      }
    }
  }
}
 8005668:	b003      	add	sp, #12
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800566e:	2300      	movs	r3, #0
 8005670:	e7cb      	b.n	800560a <HAL_GPIO_Init+0x206>
 8005672:	2301      	movs	r3, #1
 8005674:	e7c9      	b.n	800560a <HAL_GPIO_Init+0x206>
 8005676:	2302      	movs	r3, #2
 8005678:	e7c7      	b.n	800560a <HAL_GPIO_Init+0x206>
 800567a:	2303      	movs	r3, #3
 800567c:	e7c5      	b.n	800560a <HAL_GPIO_Init+0x206>
 800567e:	2304      	movs	r3, #4
 8005680:	e7c3      	b.n	800560a <HAL_GPIO_Init+0x206>
 8005682:	2305      	movs	r3, #5
 8005684:	e7c1      	b.n	800560a <HAL_GPIO_Init+0x206>
 8005686:	2306      	movs	r3, #6
 8005688:	e7bf      	b.n	800560a <HAL_GPIO_Init+0x206>
 800568a:	2307      	movs	r3, #7
 800568c:	e7bd      	b.n	800560a <HAL_GPIO_Init+0x206>
 800568e:	2308      	movs	r3, #8
 8005690:	e7bb      	b.n	800560a <HAL_GPIO_Init+0x206>
 8005692:	bf00      	nop
 8005694:	40020000 	.word	0x40020000
 8005698:	0802ac5c 	.word	0x0802ac5c
 800569c:	10110000 	.word	0x10110000
 80056a0:	10220000 	.word	0x10220000
 80056a4:	40023800 	.word	0x40023800
 80056a8:	40013c00 	.word	0x40013c00

080056ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80056b0:	4b5d      	ldr	r3, [pc, #372]	; (8005828 <HAL_GPIO_DeInit+0x17c>)
{
 80056b2:	4604      	mov	r4, r0
 80056b4:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80056b6:	4298      	cmp	r0, r3
 80056b8:	d02c      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056be:	4298      	cmp	r0, r3
 80056c0:	d028      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c6:	4298      	cmp	r0, r3
 80056c8:	d024      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ce:	4298      	cmp	r0, r3
 80056d0:	d020      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d6:	4298      	cmp	r0, r3
 80056d8:	d01c      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056de:	4298      	cmp	r0, r3
 80056e0:	d018      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e6:	4298      	cmp	r0, r3
 80056e8:	d014      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ee:	4298      	cmp	r0, r3
 80056f0:	d010      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	4298      	cmp	r0, r3
 80056f8:	d00c      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 80056fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fe:	4298      	cmp	r0, r3
 8005700:	d008      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 8005702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005706:	4298      	cmp	r0, r3
 8005708:	d004      	beq.n	8005714 <HAL_GPIO_DeInit+0x68>
 800570a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800570e:	4847      	ldr	r0, [pc, #284]	; (800582c <HAL_GPIO_DeInit+0x180>)
 8005710:	f7fc fa0f 	bl	8001b32 <assert_failed>
{
 8005714:	2200      	movs	r2, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005716:	4846      	ldr	r0, [pc, #280]	; (8005830 <HAL_GPIO_DeInit+0x184>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005718:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005834 <HAL_GPIO_DeInit+0x188>
 800571c:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005838 <HAL_GPIO_DeInit+0x18c>
 8005720:	f8df b118 	ldr.w	fp, [pc, #280]	; 800583c <HAL_GPIO_DeInit+0x190>
    ioposition = ((uint32_t)0x01) << position;
 8005724:	2301      	movs	r3, #1
 8005726:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 800572a:	ea0e 0108 	and.w	r1, lr, r8
    if(iocurrent == ioposition)
 800572e:	458e      	cmp	lr, r1
 8005730:	d163      	bne.n	80057fa <HAL_GPIO_DeInit+0x14e>
 8005732:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005736:	f002 0703 	and.w	r7, r2, #3
 800573a:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800573c:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <HAL_GPIO_DeInit+0x17c>)
 800573e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005742:	00bf      	lsls	r7, r7, #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005744:	429c      	cmp	r4, r3
 8005746:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800574a:	fa06 f607 	lsl.w	r6, r6, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 800574e:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005752:	ea0c 0c06 	and.w	ip, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005756:	d055      	beq.n	8005804 <HAL_GPIO_DeInit+0x158>
 8005758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575c:	429c      	cmp	r4, r3
 800575e:	d053      	beq.n	8005808 <HAL_GPIO_DeInit+0x15c>
 8005760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005764:	429c      	cmp	r4, r3
 8005766:	d051      	beq.n	800580c <HAL_GPIO_DeInit+0x160>
 8005768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576c:	429c      	cmp	r4, r3
 800576e:	d04f      	beq.n	8005810 <HAL_GPIO_DeInit+0x164>
 8005770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005774:	429c      	cmp	r4, r3
 8005776:	d04d      	beq.n	8005814 <HAL_GPIO_DeInit+0x168>
 8005778:	454c      	cmp	r4, r9
 800577a:	d04d      	beq.n	8005818 <HAL_GPIO_DeInit+0x16c>
 800577c:	4554      	cmp	r4, sl
 800577e:	d04d      	beq.n	800581c <HAL_GPIO_DeInit+0x170>
 8005780:	455c      	cmp	r4, fp
 8005782:	d04d      	beq.n	8005820 <HAL_GPIO_DeInit+0x174>
 8005784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005788:	429c      	cmp	r4, r3
 800578a:	d04b      	beq.n	8005824 <HAL_GPIO_DeInit+0x178>
 800578c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005790:	429c      	cmp	r4, r3
 8005792:	bf0c      	ite	eq
 8005794:	2309      	moveq	r3, #9
 8005796:	230a      	movne	r3, #10
 8005798:	40bb      	lsls	r3, r7
 800579a:	459c      	cmp	ip, r3
 800579c:	d110      	bne.n	80057c0 <HAL_GPIO_DeInit+0x114>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800579e:	68ab      	ldr	r3, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80057a0:	43c9      	mvns	r1, r1
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80057a2:	ea23 0606 	bic.w	r6, r3, r6
 80057a6:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80057a8:	6803      	ldr	r3, [r0, #0]
 80057aa:	400b      	ands	r3, r1
 80057ac:	6003      	str	r3, [r0, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80057ae:	6843      	ldr	r3, [r0, #4]
 80057b0:	400b      	ands	r3, r1
 80057b2:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80057b4:	6883      	ldr	r3, [r0, #8]
 80057b6:	400b      	ands	r3, r1
 80057b8:	6083      	str	r3, [r0, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80057ba:	68c3      	ldr	r3, [r0, #12]
 80057bc:	4019      	ands	r1, r3
 80057be:	60c1      	str	r1, [r0, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057c0:	0055      	lsls	r5, r2, #1
 80057c2:	2303      	movs	r3, #3
 80057c4:	6821      	ldr	r1, [r4, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057c6:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057ca:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057cc:	260f      	movs	r6, #15
 80057ce:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057d0:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057d2:	40be      	lsls	r6, r7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057d4:	4019      	ands	r1, r3
 80057d6:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057d8:	08d1      	lsrs	r1, r2, #3
 80057da:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80057de:	6a0d      	ldr	r5, [r1, #32]
 80057e0:	ea25 0606 	bic.w	r6, r5, r6
 80057e4:	620e      	str	r6, [r1, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057e6:	68a1      	ldr	r1, [r4, #8]
 80057e8:	4019      	ands	r1, r3
 80057ea:	60a1      	str	r1, [r4, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057ec:	6861      	ldr	r1, [r4, #4]
 80057ee:	ea21 010e 	bic.w	r1, r1, lr
 80057f2:	6061      	str	r1, [r4, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057f4:	68e1      	ldr	r1, [r4, #12]
 80057f6:	400b      	ands	r3, r1
 80057f8:	60e3      	str	r3, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80057fa:	3201      	adds	r2, #1
 80057fc:	2a10      	cmp	r2, #16
 80057fe:	d191      	bne.n	8005724 <HAL_GPIO_DeInit+0x78>
    }
  }
}
 8005800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005804:	2300      	movs	r3, #0
 8005806:	e7c7      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005808:	2301      	movs	r3, #1
 800580a:	e7c5      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 800580c:	2302      	movs	r3, #2
 800580e:	e7c3      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005810:	2303      	movs	r3, #3
 8005812:	e7c1      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005814:	2304      	movs	r3, #4
 8005816:	e7bf      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005818:	2305      	movs	r3, #5
 800581a:	e7bd      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 800581c:	2306      	movs	r3, #6
 800581e:	e7bb      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005820:	2307      	movs	r3, #7
 8005822:	e7b9      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005824:	2308      	movs	r3, #8
 8005826:	e7b7      	b.n	8005798 <HAL_GPIO_DeInit+0xec>
 8005828:	40020000 	.word	0x40020000
 800582c:	0802ac5c 	.word	0x0802ac5c
 8005830:	40013c00 	.word	0x40013c00
 8005834:	40021400 	.word	0x40021400
 8005838:	40021800 	.word	0x40021800
 800583c:	40021c00 	.word	0x40021c00

08005840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005844:	460c      	mov	r4, r1
 8005846:	b921      	cbnz	r1, 8005852 <HAL_GPIO_ReadPin+0x12>
 8005848:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800584c:	4804      	ldr	r0, [pc, #16]	; (8005860 <HAL_GPIO_ReadPin+0x20>)
 800584e:	f7fc f970 	bl	8001b32 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005852:	692b      	ldr	r3, [r5, #16]
 8005854:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005856:	bf14      	ite	ne
 8005858:	2001      	movne	r0, #1
 800585a:	2000      	moveq	r0, #0
 800585c:	bd38      	pop	{r3, r4, r5, pc}
 800585e:	bf00      	nop
 8005860:	0802ac5c 	.word	0x0802ac5c

08005864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4605      	mov	r5, r0
 8005868:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800586a:	460c      	mov	r4, r1
 800586c:	b921      	cbnz	r1, 8005878 <HAL_GPIO_WritePin+0x14>
 800586e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8005872:	4808      	ldr	r0, [pc, #32]	; (8005894 <HAL_GPIO_WritePin+0x30>)
 8005874:	f7fc f95d 	bl	8001b32 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005878:	2e01      	cmp	r6, #1
 800587a:	d906      	bls.n	800588a <HAL_GPIO_WritePin+0x26>
 800587c:	f240 119b 	movw	r1, #411	; 0x19b
 8005880:	4804      	ldr	r0, [pc, #16]	; (8005894 <HAL_GPIO_WritePin+0x30>)
 8005882:	f7fc f956 	bl	8001b32 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005886:	61ac      	str	r4, [r5, #24]
 8005888:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 800588a:	2e00      	cmp	r6, #0
 800588c:	d1fb      	bne.n	8005886 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800588e:	0424      	lsls	r4, r4, #16
 8005890:	e7f9      	b.n	8005886 <HAL_GPIO_WritePin+0x22>
 8005892:	bf00      	nop
 8005894:	0802ac5c 	.word	0x0802ac5c

08005898 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800589e:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 80058a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 80058a6:	2801      	cmp	r0, #1
{
 80058a8:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80058ac:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80058b0:	d029      	beq.n	8005906 <HAL_HCD_HC_Init+0x6e>
 80058b2:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 80058b4:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80058b6:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 80058ba:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 80058be:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80058c2:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 80058c6:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 80058ca:	bf08      	it	eq
 80058cc:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 80058ce:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80058d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 80058d6:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 80058da:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80058de:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80058e2:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 80058e6:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 80058ea:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 80058ee:	f8cd c008 	str.w	ip, [sp, #8]
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	e88d 4080 	stmia.w	sp, {r7, lr}
 80058f8:	f007 f826 	bl	800c948 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80058fc:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8005900:	b004      	add	sp, #16
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8005906:	2002      	movs	r0, #2
 8005908:	e7fa      	b.n	8005900 <HAL_HCD_HC_Init+0x68>

0800590a <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800590a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800590e:	2b01      	cmp	r3, #1
{
 8005910:	b510      	push	{r4, lr}
 8005912:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8005914:	d009      	beq.n	800592a <HAL_HCD_HC_Halt+0x20>
 8005916:	2301      	movs	r3, #1
 8005918:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800591c:	6800      	ldr	r0, [r0, #0]
 800591e:	f007 f8a1 	bl	800ca64 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005922:	2000      	movs	r0, #0
 8005924:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8005928:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800592a:	2002      	movs	r0, #2
}
 800592c:	bd10      	pop	{r4, pc}
	...

08005930 <HAL_HCD_Init>:
{
 8005930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8005934:	4607      	mov	r7, r0
{
 8005936:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8005938:	2800      	cmp	r0, #0
 800593a:	d047      	beq.n	80059cc <HAL_HCD_Init+0x9c>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800593c:	6803      	ldr	r3, [r0, #0]
 800593e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005942:	d006      	beq.n	8005952 <HAL_HCD_Init+0x22>
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <HAL_HCD_Init+0xa0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <HAL_HCD_Init+0x22>
 800594a:	217c      	movs	r1, #124	; 0x7c
 800594c:	4821      	ldr	r0, [pc, #132]	; (80059d4 <HAL_HCD_Init+0xa4>)
 800594e:	f7fc f8f0 	bl	8001b32 <assert_failed>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005952:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 8005956:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800595a:	b923      	cbnz	r3, 8005966 <HAL_HCD_Init+0x36>
    hhcd->Lock = HAL_UNLOCKED;
 800595c:	f887 22b8 	strb.w	r2, [r7, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8005960:	4638      	mov	r0, r7
 8005962:	f7fe fb0f 	bl	8003f84 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 8005966:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005968:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800596a:	466d      	mov	r5, sp
 800596c:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 8005970:	f854 0b10 	ldr.w	r0, [r4], #16
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005974:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8005976:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 800597a:	f006 fea8 	bl	800c6ce <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800597e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800598a:	e885 0003 	stmia.w	r5, {r0, r1}
 800598e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005992:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005994:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005996:	f006 fe59 	bl	800c64c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800599a:	f856 0b10 	ldr.w	r0, [r6], #16
 800599e:	2101      	movs	r1, #1
 80059a0:	f006 fe9b 	bl	800c6da <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80059a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80059a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80059aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059b4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80059b8:	6838      	ldr	r0, [r7, #0]
 80059ba:	f006 ff4d 	bl	800c858 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80059be:	2301      	movs	r3, #1
  return HAL_OK;
 80059c0:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 80059c2:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 80059c6:	b00a      	add	sp, #40	; 0x28
 80059c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80059cc:	2001      	movs	r0, #1
 80059ce:	e7fa      	b.n	80059c6 <HAL_HCD_Init+0x96>
 80059d0:	40040000 	.word	0x40040000
 80059d4:	0802ac9b 	.word	0x0802ac9b

080059d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80059d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80059da:	2428      	movs	r4, #40	; 0x28
{
 80059dc:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80059e0:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 80059e2:	fb04 0401 	mla	r4, r4, r1, r0
{
 80059e6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 80059ea:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80059ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 80059f2:	b96f      	cbnz	r7, 8005a10 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80059f4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80059f6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80059f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 80059fc:	d02b      	beq.n	8005a56 <HAL_HCD_HC_SubmitRequest+0x7e>
 80059fe:	42bb      	cmp	r3, r7
 8005a00:	d029      	beq.n	8005a56 <HAL_HCD_HC_SubmitRequest+0x7e>
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d131      	bne.n	8005a6a <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a06:	2328      	movs	r3, #40	; 0x28
 8005a08:	2200      	movs	r2, #0
 8005a0a:	fb03 0301 	mla	r3, r3, r1, r0
 8005a0e:	e02a      	b.n	8005a66 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a10:	f04f 0e02 	mov.w	lr, #2
 8005a14:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d826      	bhi.n	8005a6a <HAL_HCD_HC_SubmitRequest+0x92>
 8005a1c:	a401      	add	r4, pc, #4	; (adr r4, 8005a24 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8005a1e:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a07 	.word	0x08005a07
 8005a2c:	08005a57 	.word	0x08005a57
 8005a30:	08005a57 	.word	0x08005a57
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005a34:	2f01      	cmp	r7, #1
 8005a36:	d118      	bne.n	8005a6a <HAL_HCD_HC_SubmitRequest+0x92>
 8005a38:	b9ba      	cbnz	r2, 8005a6a <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 8005a3a:	b925      	cbnz	r5, 8005a46 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8005a3c:	2328      	movs	r3, #40	; 0x28
 8005a3e:	fb03 0301 	mla	r3, r3, r1, r0
 8005a42:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a46:	2328      	movs	r3, #40	; 0x28
 8005a48:	fb03 0301 	mla	r3, r3, r1, r0
 8005a4c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005a50:	b14a      	cbz	r2, 8005a66 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a52:	2202      	movs	r2, #2
 8005a54:	e007      	b.n	8005a66 <HAL_HCD_HC_SubmitRequest+0x8e>
 8005a56:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a58:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8005a5c:	b9d2      	cbnz	r2, 8005a94 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005a5e:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	d1f5      	bne.n	8005a52 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a6a:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a6c:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a6e:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a72:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a76:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a78:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8005a7a:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a7c:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8005a82:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8005a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a88:	7c02      	ldrb	r2, [r0, #16]
 8005a8a:	6800      	ldr	r0, [r0, #0]
}
 8005a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a90:	f007 b84c 	b.w	800cb2c <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005a94:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8005a98:	e7da      	b.n	8005a50 <HAL_HCD_HC_SubmitRequest+0x78>
 8005a9a:	bf00      	nop

08005a9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aa0:	6806      	ldr	r6, [r0, #0]
{
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f006 fe76 	bl	800c798 <USB_GetMode>
 8005aac:	2801      	cmp	r0, #1
 8005aae:	f040 80b0 	bne.w	8005c12 <HAL_HCD_IRQHandler+0x176>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	f006 fe6c 	bl	800c790 <USB_ReadInterrupts>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f000 80aa 	beq.w	8005c12 <HAL_HCD_IRQHandler+0x176>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005abe:	6820      	ldr	r0, [r4, #0]
 8005ac0:	f006 fe66 	bl	800c790 <USB_ReadInterrupts>
 8005ac4:	0287      	lsls	r7, r0, #10
 8005ac6:	d503      	bpl.n	8005ad0 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ace:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	f006 fe5d 	bl	800c790 <USB_ReadInterrupts>
 8005ad6:	02c5      	lsls	r5, r0, #11
 8005ad8:	d503      	bpl.n	8005ae2 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	f006 fe54 	bl	800c790 <USB_ReadInterrupts>
 8005ae8:	0140      	lsls	r0, r0, #5
 8005aea:	d503      	bpl.n	8005af4 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005af2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	f006 fe4b 	bl	800c790 <USB_ReadInterrupts>
 8005afa:	0781      	lsls	r1, r0, #30
 8005afc:	d502      	bpl.n	8005b04 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	2202      	movs	r2, #2
 8005b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	f006 fe43 	bl	800c790 <USB_ReadInterrupts>
 8005b0a:	0082      	lsls	r2, r0, #2
 8005b0c:	d510      	bpl.n	8005b30 <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b0e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8005b12:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b18:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8005b1c:	f7fe fa7a 	bl	8004014 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b20:	2101      	movs	r1, #1
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	f006 fe3c 	bl	800c7a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	f006 fe2d 	bl	800c790 <USB_ReadInterrupts>
 8005b36:	01c3      	lsls	r3, r0, #7
 8005b38:	d542      	bpl.n	8005bc0 <HAL_HCD_IRQHandler+0x124>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b3a:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b3c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8005b40:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8005b42:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8005b46:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b48:	9b05      	ldr	r3, [sp, #20]
 8005b4a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b4e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b50:	9b04      	ldr	r3, [sp, #16]
 8005b52:	079f      	lsls	r7, r3, #30
 8005b54:	d50d      	bpl.n	8005b72 <HAL_HCD_IRQHandler+0xd6>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	07d8      	lsls	r0, r3, #31
 8005b5a:	d506      	bpl.n	8005b6a <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8005b5c:	69ab      	ldr	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005b5e:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8005b60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b64:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8005b66:	f7fe fa51 	bl	800400c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005b6a:	9b05      	ldr	r3, [sp, #20]
 8005b6c:	f043 0302 	orr.w	r3, r3, #2
 8005b70:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	0719      	lsls	r1, r3, #28
 8005b76:	d519      	bpl.n	8005bac <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	f043 0308 	orr.w	r3, r3, #8
 8005b7e:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	075a      	lsls	r2, r3, #29
 8005b84:	d550      	bpl.n	8005c28 <HAL_HCD_IRQHandler+0x18c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005b86:	69a1      	ldr	r1, [r4, #24]
 8005b88:	2902      	cmp	r1, #2
 8005b8a:	d145      	bne.n	8005c18 <HAL_HCD_IRQHandler+0x17c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b8c:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b8e:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005b90:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b98:	bf18      	it	ne
 8005b9a:	2101      	movne	r1, #1
 8005b9c:	f006 fe00 	bl	800c7a0 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f7fe fa3f 	bl	8004024 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7fe fa30 	bl	800400c <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	069b      	lsls	r3, r3, #26
 8005bb0:	d503      	bpl.n	8005bba <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
 8005bb8:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005bba:	9b05      	ldr	r3, [sp, #20]
 8005bbc:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	f006 fde5 	bl	800c790 <USB_ReadInterrupts>
 8005bc6:	0707      	lsls	r7, r0, #28
 8005bc8:	d505      	bpl.n	8005bd6 <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7fe fa1a 	bl	8004004 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	2208      	movs	r2, #8
 8005bd4:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	f006 fdda 	bl	800c790 <USB_ReadInterrupts>
 8005bdc:	0185      	lsls	r5, r0, #6
 8005bde:	d512      	bpl.n	8005c06 <HAL_HCD_IRQHandler+0x16a>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005be0:	f04f 0a00 	mov.w	sl, #0
 8005be4:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005be8:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005bea:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bee:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	f006 ff32 	bl	800ca5a <USB_HC_ReadInterrupt>
 8005bf6:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	459a      	cmp	sl, r3
 8005bfc:	d323      	bcc.n	8005c46 <HAL_HCD_IRQHandler+0x1aa>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c04:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	f006 fdc2 	bl	800c790 <USB_ReadInterrupts>
 8005c0c:	06c3      	lsls	r3, r0, #27
 8005c0e:	f100 821e 	bmi.w	800604e <HAL_HCD_IRQHandler+0x5b2>
}
 8005c12:	b007      	add	sp, #28
 8005c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c18:	68e3      	ldr	r3, [r4, #12]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d1c0      	bne.n	8005ba0 <HAL_HCD_IRQHandler+0x104>
          USBx_HOST->HFIR = 60000U;
 8005c1e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005c22:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8005c26:	e7bb      	b.n	8005ba0 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7fe f9ff 	bl	800402c <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c2e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8005c32:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c38:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8005c3c:	6993      	ldr	r3, [r2, #24]
 8005c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c42:	6193      	str	r3, [r2, #24]
 8005c44:	e7b2      	b.n	8005bac <HAL_HCD_IRQHandler+0x110>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c46:	f00a 030f 	and.w	r3, sl, #15
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	07d8      	lsls	r0, r3, #31
 8005c52:	f140 808a 	bpl.w	8005d6a <HAL_HCD_IRQHandler+0x2ce>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c56:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5a:	fa5f f58a 	uxtb.w	r5, sl
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005c64:	f000 8104 	beq.w	8005e70 <HAL_HCD_IRQHandler+0x3d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c68:	016a      	lsls	r2, r5, #5
 8005c6a:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8005c6e:	18d6      	adds	r6, r2, r3
 8005c70:	68b1      	ldr	r1, [r6, #8]
 8005c72:	0749      	lsls	r1, r1, #29
 8005c74:	d513      	bpl.n	8005c9e <HAL_HCD_IRQHandler+0x202>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c76:	2104      	movs	r1, #4
 8005c78:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c7a:	68f1      	ldr	r1, [r6, #12]
 8005c7c:	f041 0102 	orr.w	r1, r1, #2
 8005c80:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005c82:	68b1      	ldr	r1, [r6, #8]
 8005c84:	0589      	lsls	r1, r1, #22
 8005c86:	d542      	bpl.n	8005d0e <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c88:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c94:	f006 fee6 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c9c:	e0c7      	b.n	8005e2e <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c9e:	68b1      	ldr	r1, [r6, #8]
 8005ca0:	0689      	lsls	r1, r1, #26
 8005ca2:	d502      	bpl.n	8005caa <HAL_HCD_IRQHandler+0x20e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	60b1      	str	r1, [r6, #8]
 8005ca8:	e7eb      	b.n	8005c82 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005caa:	68b1      	ldr	r1, [r6, #8]
 8005cac:	0709      	lsls	r1, r1, #28
 8005cae:	d515      	bpl.n	8005cdc <HAL_HCD_IRQHandler+0x240>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb0:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005cb2:	f04f 0e05 	mov.w	lr, #5
 8005cb6:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb8:	f041 0102 	orr.w	r1, r1, #2
 8005cbc:	9202      	str	r2, [sp, #8]
 8005cbe:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005cc0:	fb07 4105 	mla	r1, r7, r5, r4
 8005cc4:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cc8:	2110      	movs	r1, #16
 8005cca:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005ccc:	2108      	movs	r1, #8
 8005cce:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f006 fec7 	bl	800ca64 <USB_HC_Halt>
 8005cd6:	9a02      	ldr	r2, [sp, #8]
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	e7d2      	b.n	8005c82 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005cdc:	68b1      	ldr	r1, [r6, #8]
 8005cde:	0549      	lsls	r1, r1, #21
 8005ce0:	d5cf      	bpl.n	8005c82 <HAL_HCD_IRQHandler+0x1e6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ce2:	68f1      	ldr	r1, [r6, #12]
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	f041 0102 	orr.w	r1, r1, #2
 8005cea:	9202      	str	r2, [sp, #8]
 8005cec:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f006 feb8 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cf4:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005cf6:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005cf8:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cfa:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005cfc:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d00:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d02:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d0a:	60b1      	str	r1, [r6, #8]
 8005d0c:	e7b9      	b.n	8005c82 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005d0e:	68b1      	ldr	r1, [r6, #8]
 8005d10:	07c8      	lsls	r0, r1, #31
 8005d12:	d53d      	bpl.n	8005d90 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8005d14:	6921      	ldr	r1, [r4, #16]
 8005d16:	b149      	cbz	r1, 8005d2c <HAL_HCD_IRQHandler+0x290>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d18:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005d1a:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005d1e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005d22:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 8005d26:	1a09      	subs	r1, r1, r0
 8005d28:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d2c:	fb07 4e05 	mla	lr, r7, r5, r4
 8005d30:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d32:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d36:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d3a:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d3c:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8005d40:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8005d44:	d116      	bne.n	8005d74 <HAL_HCD_IRQHandler+0x2d8>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d46:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d48:	4629      	mov	r1, r5
 8005d4a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d52:	f006 fe87 	bl	800ca64 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d56:	2310      	movs	r3, #16
 8005d58:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d5a:	fb07 4505 	mla	r5, r7, r5, r4
 8005d5e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005d6a:	f10a 0a01 	add.w	sl, sl, #1
 8005d6e:	f108 0820 	add.w	r8, r8, #32
 8005d72:	e741      	b.n	8005bf8 <HAL_HCD_IRQHandler+0x15c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005d74:	2903      	cmp	r1, #3
 8005d76:	d1f0      	bne.n	8005d5a <HAL_HCD_IRQHandler+0x2be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d78:	58d1      	ldr	r1, [r2, r3]
 8005d7a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005d7e:	50d1      	str	r1, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d80:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005d82:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d86:	4629      	mov	r1, r5
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7fe f947 	bl	800401c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d8e:	e7e4      	b.n	8005d5a <HAL_HCD_IRQHandler+0x2be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d90:	68b1      	ldr	r1, [r6, #8]
 8005d92:	0789      	lsls	r1, r1, #30
 8005d94:	d536      	bpl.n	8005e04 <HAL_HCD_IRQHandler+0x368>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d96:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d98:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005d9c:	f021 0102 	bic.w	r1, r1, #2
 8005da0:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005da2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8005da6:	2901      	cmp	r1, #1
 8005da8:	d10c      	bne.n	8005dc4 <HAL_HCD_IRQHandler+0x328>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005daa:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005dae:	fb07 4305 	mla	r3, r7, r5, r4
 8005db2:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005db4:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005db8:	4620      	mov	r0, r4
 8005dba:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8005dbe:	f7fe f92d 	bl	800401c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005dc2:	e7d2      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005dc4:	2905      	cmp	r1, #5
 8005dc6:	d0f0      	beq.n	8005daa <HAL_HCD_IRQHandler+0x30e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dc8:	2906      	cmp	r1, #6
 8005dca:	d001      	beq.n	8005dd0 <HAL_HCD_IRQHandler+0x334>
 8005dcc:	2908      	cmp	r1, #8
 8005dce:	d114      	bne.n	8005dfa <HAL_HCD_IRQHandler+0x35e>
      hhcd->hc[ch_num].ErrCnt++;
 8005dd0:	fb07 4105 	mla	r1, r7, r5, r4
 8005dd4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005dd6:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005dd8:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8005dda:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ddc:	bf85      	ittet	hi
 8005dde:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005de0:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005de4:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005de8:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dec:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dee:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005df2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005df6:	50d1      	str	r1, [r2, r3]
 8005df8:	e7d9      	b.n	8005dae <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005dfa:	2903      	cmp	r1, #3
 8005dfc:	d1d7      	bne.n	8005dae <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005dfe:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8005e02:	e7f3      	b.n	8005dec <HAL_HCD_IRQHandler+0x350>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e04:	68b1      	ldr	r1, [r6, #8]
 8005e06:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8005e0a:	d012      	beq.n	8005e32 <HAL_HCD_IRQHandler+0x396>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e0e:	4629      	mov	r1, r5
 8005e10:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e12:	f043 0302 	orr.w	r3, r3, #2
 8005e16:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005e18:	fb07 4305 	mla	r3, r7, r5, r4
 8005e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e1e:	3201      	adds	r2, #1
 8005e20:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e22:	2206      	movs	r2, #6
 8005e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e28:	f006 fe1c 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	60b3      	str	r3, [r6, #8]
 8005e30:	e79b      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e32:	68b3      	ldr	r3, [r6, #8]
 8005e34:	06da      	lsls	r2, r3, #27
 8005e36:	d598      	bpl.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e38:	fb07 4205 	mla	r2, r7, r5, r4
 8005e3c:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d10a      	bne.n	8005e5a <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e44:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e46:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e48:	4629      	mov	r1, r5
 8005e4a:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e52:	f006 fe07 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e56:	2310      	movs	r3, #16
 8005e58:	e7e9      	b.n	8005e2e <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e5a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8005e5e:	d1fa      	bne.n	8005e56 <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e60:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f6      	bne.n	8005e56 <HAL_HCD_IRQHandler+0x3ba>
        hhcd->hc[ch_num].state = HC_NAK;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8005e6e:	e7ea      	b.n	8005e46 <HAL_HCD_IRQHandler+0x3aa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e70:	0169      	lsls	r1, r5, #5
 8005e72:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8005e76:	188e      	adds	r6, r1, r2
 8005e78:	68b3      	ldr	r3, [r6, #8]
 8005e7a:	f013 0e04 	ands.w	lr, r3, #4
 8005e7e:	d006      	beq.n	8005e8e <HAL_HCD_IRQHandler+0x3f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e80:	2304      	movs	r3, #4
 8005e82:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e84:	68f3      	ldr	r3, [r6, #12]
 8005e86:	f043 0302 	orr.w	r3, r3, #2
 8005e8a:	60f3      	str	r3, [r6, #12]
 8005e8c:	e76d      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e8e:	68b3      	ldr	r3, [r6, #8]
 8005e90:	f013 0320 	ands.w	r3, r3, #32
 8005e94:	d014      	beq.n	8005ec0 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e96:	2320      	movs	r3, #32
 8005e98:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005e9a:	fb07 4305 	mla	r3, r7, r5, r4
 8005e9e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8005ea2:	2a01      	cmp	r2, #1
 8005ea4:	f47f af61 	bne.w	8005d6a <HAL_HCD_IRQHandler+0x2ce>
      hhcd->hc[ch_num].do_ping = 0U;
 8005ea8:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eac:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005eae:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005eb2:	68f3      	ldr	r3, [r6, #12]
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eba:	f006 fdd3 	bl	800ca64 <USB_HC_Halt>
 8005ebe:	e754      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ec0:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8005ec4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8005ec8:	d011      	beq.n	8005eee <HAL_HCD_IRQHandler+0x452>
    hhcd->hc[ch_num].state = HC_NYET;
 8005eca:	fb07 4205 	mla	r2, r7, r5, r4
 8005ece:	2104      	movs	r1, #4
 8005ed0:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8005ed4:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ed6:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 8005ed8:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005edc:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ede:	68f3      	ldr	r3, [r6, #12]
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ee6:	f006 fdbd 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	e79f      	b.n	8005e2e <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005eee:	68b3      	ldr	r3, [r6, #8]
 8005ef0:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8005ef4:	d005      	beq.n	8005f02 <HAL_HCD_IRQHandler+0x466>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ef6:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef8:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005efa:	f043 0302 	orr.w	r3, r3, #2
 8005efe:	60f3      	str	r3, [r6, #12]
 8005f00:	e6c8      	b.n	8005c94 <HAL_HCD_IRQHandler+0x1f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f02:	68b3      	ldr	r3, [r6, #8]
 8005f04:	07db      	lsls	r3, r3, #31
 8005f06:	d511      	bpl.n	8005f2c <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f08:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f0a:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f0e:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f10:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f14:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 8005f18:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f1a:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f1c:	f006 fda2 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f20:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f22:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f24:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005f2a:	e71e      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f2c:	68b3      	ldr	r3, [r6, #8]
 8005f2e:	071b      	lsls	r3, r3, #28
 8005f30:	d50e      	bpl.n	8005f50 <HAL_HCD_IRQHandler+0x4b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f32:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f34:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 8005f36:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f3a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f3c:	68f3      	ldr	r3, [r6, #12]
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f44:	f006 fd8e 	bl	800ca64 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005f48:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f4a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8005f4e:	e70c      	b.n	8005d6a <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f50:	68b3      	ldr	r3, [r6, #8]
 8005f52:	06db      	lsls	r3, r3, #27
 8005f54:	d515      	bpl.n	8005f82 <HAL_HCD_IRQHandler+0x4e6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f56:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005f60:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f64:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005f68:	b92a      	cbnz	r2, 8005f76 <HAL_HCD_IRQHandler+0x4da>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005f6a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8005f6e:	b912      	cbnz	r2, 8005f76 <HAL_HCD_IRQHandler+0x4da>
        hhcd->hc[ch_num].do_ping = 1U;
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f76:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f78:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	60f3      	str	r3, [r6, #12]
 8005f80:	e767      	b.n	8005e52 <HAL_HCD_IRQHandler+0x3b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005f82:	68b3      	ldr	r3, [r6, #8]
 8005f84:	061b      	lsls	r3, r3, #24
 8005f86:	d50c      	bpl.n	8005fa2 <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f88:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f8a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f8c:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f96:	f006 fd65 	bl	800ca64 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f9a:	2306      	movs	r3, #6
 8005f9c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8005fa0:	e744      	b.n	8005e2c <HAL_HCD_IRQHandler+0x390>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005fa2:	68b3      	ldr	r3, [r6, #8]
 8005fa4:	055b      	lsls	r3, r3, #21
 8005fa6:	d50f      	bpl.n	8005fc8 <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fa8:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005faa:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005fac:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fb6:	f006 fd55 	bl	800ca64 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005fba:	2310      	movs	r3, #16
 8005fbc:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	e7c0      	b.n	8005f4a <HAL_HCD_IRQHandler+0x4ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fc8:	68b3      	ldr	r3, [r6, #8]
 8005fca:	0798      	lsls	r0, r3, #30
 8005fcc:	f57f aecd 	bpl.w	8005d6a <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fd0:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005fd2:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005fd6:	f023 0302 	bic.w	r3, r3, #2
 8005fda:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005fdc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d10e      	bne.n	8006002 <HAL_HCD_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005fe4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fe8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005fec:	3b02      	subs	r3, #2
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f63f aedd 	bhi.w	8005dae <HAL_HCD_IRQHandler+0x312>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ff4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005ff8:	f083 0301 	eor.w	r3, r3, #1
 8005ffc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8006000:	e6d5      	b.n	8005dae <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006002:	2b03      	cmp	r3, #3
 8006004:	d102      	bne.n	800600c <HAL_HCD_IRQHandler+0x570>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006006:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800600a:	e6d0      	b.n	8005dae <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800600c:	2b04      	cmp	r3, #4
 800600e:	d0fa      	beq.n	8006006 <HAL_HCD_IRQHandler+0x56a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006010:	2b05      	cmp	r3, #5
 8006012:	d102      	bne.n	800601a <HAL_HCD_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006014:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8006018:	e6c9      	b.n	8005dae <HAL_HCD_IRQHandler+0x312>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800601a:	2b06      	cmp	r3, #6
 800601c:	d002      	beq.n	8006024 <HAL_HCD_IRQHandler+0x588>
 800601e:	2b08      	cmp	r3, #8
 8006020:	f47f aec5 	bne.w	8005dae <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].ErrCnt++;
 8006024:	fb07 4005 	mla	r0, r7, r5, r4
 8006028:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800602a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800602c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 800602e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006030:	bf85      	ittet	hi
 8006032:	2304      	movhi	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006034:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006038:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800603c:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006040:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006042:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800604a:	508b      	str	r3, [r1, r2]
 800604c:	e6af      	b.n	8005dae <HAL_HCD_IRQHandler+0x312>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800604e:	6826      	ldr	r6, [r4, #0]
 8006050:	69b3      	ldr	r3, [r6, #24]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8006058:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800605a:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800605e:	2a02      	cmp	r2, #2
 8006060:	d129      	bne.n	80060b6 <HAL_HCD_IRQHandler+0x61a>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006062:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006066:	f1b8 0f00 	cmp.w	r8, #0
 800606a:	d024      	beq.n	80060b6 <HAL_HCD_IRQHandler+0x61a>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800606c:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006070:	2728      	movs	r7, #40	; 0x28
 8006072:	fb07 4705 	mla	r7, r7, r5, r4
 8006076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006078:	b1e9      	cbz	r1, 80060b6 <HAL_HCD_IRQHandler+0x61a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800607a:	4642      	mov	r2, r8
 800607c:	4630      	mov	r0, r6
 800607e:	f006 fb79 	bl	800c774 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006084:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006088:	4443      	add	r3, r8
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800608c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608e:	4443      	add	r3, r8
 8006090:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006092:	016b      	lsls	r3, r5, #5
 8006094:	199a      	adds	r2, r3, r6
 8006096:	6911      	ldr	r1, [r2, #16]
 8006098:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <HAL_HCD_IRQHandler+0x628>)
 800609a:	400a      	ands	r2, r1
 800609c:	b15a      	cbz	r2, 80060b6 <HAL_HCD_IRQHandler+0x61a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800609e:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060a0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060a8:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80060aa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	6993      	ldr	r3, [r2, #24]
 80060ba:	f043 0310 	orr.w	r3, r3, #16
 80060be:	6193      	str	r3, [r2, #24]
 80060c0:	e5a7      	b.n	8005c12 <HAL_HCD_IRQHandler+0x176>
 80060c2:	bf00      	nop
 80060c4:	1ff80000 	.word	0x1ff80000

080060c8 <HAL_HCD_Start>:
{
 80060c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80060ca:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 80060ce:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d00d      	beq.n	80060f0 <HAL_HCD_Start+0x28>
 80060d4:	2501      	movs	r5, #1
 80060d6:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	f006 faf1 	bl	800c6c2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80060e0:	4629      	mov	r1, r5
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	f006 fb97 	bl	800c816 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80060e8:	2000      	movs	r0, #0
 80060ea:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80060f0:	2002      	movs	r0, #2
}
 80060f2:	bd38      	pop	{r3, r4, r5, pc}

080060f4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80060f4:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80060f8:	2b01      	cmp	r3, #1
{
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80060fe:	d009      	beq.n	8006114 <HAL_HCD_Stop+0x20>
 8006100:	2301      	movs	r3, #1
 8006102:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006106:	6800      	ldr	r0, [r0, #0]
 8006108:	f006 fdc2 	bl	800cc90 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800610c:	2000      	movs	r0, #0
 800610e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8006112:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006114:	2002      	movs	r0, #2
}
 8006116:	bd10      	pop	{r4, pc}

08006118 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006118:	6800      	ldr	r0, [r0, #0]
 800611a:	f006 bb5e 	b.w	800c7da <USB_ResetPort>

0800611e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800611e:	2328      	movs	r3, #40	; 0x28
 8006120:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006124:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006128:	4770      	bx	lr

0800612a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 800612a:	2328      	movs	r3, #40	; 0x28
 800612c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006130:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006132:	4770      	bx	lr

08006134 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006134:	6800      	ldr	r0, [r0, #0]
 8006136:	f006 bc02 	b.w	800c93e <USB_GetCurrentFrame>

0800613a <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	f006 bbf4 	b.w	800c928 <USB_GetHostSpeed>

08006140 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	0791      	lsls	r1, r2, #30
 8006146:	d501      	bpl.n	800614c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006148:	2200      	movs	r2, #0
 800614a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	07d2      	lsls	r2, r2, #31
 8006150:	d403      	bmi.n	800615a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	619a      	str	r2, [r3, #24]
 800615a:	4770      	bx	lr

0800615c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	4616      	mov	r6, r2
 8006162:	461f      	mov	r7, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006164:	4a25      	ldr	r2, [pc, #148]	; (80061fc <I2C_TransferConfig+0xa0>)
{
 8006166:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006168:	6803      	ldr	r3, [r0, #0]
{
 800616a:	460c      	mov	r4, r1
 800616c:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800616e:	4293      	cmp	r3, r2
 8006170:	d010      	beq.n	8006194 <I2C_TransferConfig+0x38>
 8006172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006176:	4293      	cmp	r3, r2
 8006178:	d00c      	beq.n	8006194 <I2C_TransferConfig+0x38>
 800617a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800617e:	4293      	cmp	r3, r2
 8006180:	d008      	beq.n	8006194 <I2C_TransferConfig+0x38>
 8006182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <I2C_TransferConfig+0x38>
 800618a:	f641 01c1 	movw	r1, #6337	; 0x18c1
 800618e:	481c      	ldr	r0, [pc, #112]	; (8006200 <I2C_TransferConfig+0xa4>)
 8006190:	f7fb fccf 	bl	8001b32 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006194:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006198:	d007      	beq.n	80061aa <I2C_TransferConfig+0x4e>
 800619a:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800619e:	d004      	beq.n	80061aa <I2C_TransferConfig+0x4e>
 80061a0:	f641 01c2 	movw	r1, #6338	; 0x18c2
 80061a4:	4816      	ldr	r0, [pc, #88]	; (8006200 <I2C_TransferConfig+0xa4>)
 80061a6:	f7fb fcc4 	bl	8001b32 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80061aa:	4b16      	ldr	r3, [pc, #88]	; (8006204 <I2C_TransferConfig+0xa8>)
 80061ac:	429d      	cmp	r5, r3
 80061ae:	d00b      	beq.n	80061c8 <I2C_TransferConfig+0x6c>
 80061b0:	f425 6280 	bic.w	r2, r5, #1024	; 0x400
 80061b4:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d005      	beq.n	80061c8 <I2C_TransferConfig+0x6c>
 80061bc:	b125      	cbz	r5, 80061c8 <I2C_TransferConfig+0x6c>
 80061be:	f641 01c3 	movw	r1, #6339	; 0x18c3
 80061c2:	480f      	ldr	r0, [pc, #60]	; (8006200 <I2C_TransferConfig+0xa4>)
 80061c4:	f7fb fcb5 	bl	8001b32 <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80061c8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80061cc:	f8d8 1000 	ldr.w	r1, [r8]
 80061d0:	433b      	orrs	r3, r7
 80061d2:	684a      	ldr	r2, [r1, #4]
 80061d4:	432b      	orrs	r3, r5
 80061d6:	0d6d      	lsrs	r5, r5, #21
 80061d8:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 80061dc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80061e0:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 80061e4:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 80061e8:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 80061ec:	f045 0503 	orr.w	r5, r5, #3
 80061f0:	ea22 0505 	bic.w	r5, r2, r5
 80061f4:	432b      	orrs	r3, r5
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	40005400 	.word	0x40005400
 8006200:	0802acd9 	.word	0x0802acd9
 8006204:	80004000 	.word	0x80004000

08006208 <I2C_WaitOnFlagUntilTimeout>:
{
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	9f06      	ldr	r7, [sp, #24]
 800620e:	4604      	mov	r4, r0
 8006210:	4688      	mov	r8, r1
 8006212:	4616      	mov	r6, r2
 8006214:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	6993      	ldr	r3, [r2, #24]
 800621a:	ea38 0303 	bics.w	r3, r8, r3
 800621e:	bf0c      	ite	eq
 8006220:	2301      	moveq	r3, #1
 8006222:	2300      	movne	r3, #0
 8006224:	42b3      	cmp	r3, r6
 8006226:	d002      	beq.n	800622e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006228:	2000      	movs	r0, #0
}
 800622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800622e:	1c6b      	adds	r3, r5, #1
 8006230:	d0f2      	beq.n	8006218 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006232:	f7fe fb49 	bl	80048c8 <HAL_GetTick>
 8006236:	1bc0      	subs	r0, r0, r7
 8006238:	4285      	cmp	r5, r0
 800623a:	d301      	bcc.n	8006240 <I2C_WaitOnFlagUntilTimeout+0x38>
 800623c:	2d00      	cmp	r5, #0
 800623e:	d1ea      	bne.n	8006216 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006240:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006242:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006244:	f043 0320 	orr.w	r3, r3, #32
 8006248:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800624a:	2320      	movs	r3, #32
 800624c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006250:	2300      	movs	r3, #0
 8006252:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800625a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800625e <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800625e:	6803      	ldr	r3, [r0, #0]
{
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006264:	6998      	ldr	r0, [r3, #24]
{
 8006266:	460d      	mov	r5, r1
 8006268:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800626a:	f010 0010 	ands.w	r0, r0, #16
 800626e:	d116      	bne.n	800629e <I2C_IsAcknowledgeFailed+0x40>
 8006270:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8006272:	1c69      	adds	r1, r5, #1
 8006274:	d014      	beq.n	80062a0 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006276:	f7fe fb27 	bl	80048c8 <HAL_GetTick>
 800627a:	1b80      	subs	r0, r0, r6
 800627c:	4285      	cmp	r5, r0
 800627e:	d300      	bcc.n	8006282 <I2C_IsAcknowledgeFailed+0x24>
 8006280:	b96d      	cbnz	r5, 800629e <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006284:	f043 0320 	orr.w	r3, r3, #32
 8006288:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800628a:	2320      	movs	r3, #32
 800628c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006298:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800629c:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	068a      	lsls	r2, r1, #26
 80062a4:	d5e5      	bpl.n	8006272 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a6:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a8:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80062aa:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ac:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ae:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80062b0:	f7ff ff46 	bl	8006140 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80062b4:	6822      	ldr	r2, [r4, #0]
 80062b6:	6853      	ldr	r3, [r2, #4]
 80062b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80062bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80062c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80062d2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80062d6:	e7db      	b.n	8006290 <I2C_IsAcknowledgeFailed+0x32>

080062d8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	079b      	lsls	r3, r3, #30
 80062e6:	d501      	bpl.n	80062ec <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80062e8:	2000      	movs	r0, #0
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ec:	4632      	mov	r2, r6
 80062ee:	4629      	mov	r1, r5
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff ffb4 	bl	800625e <I2C_IsAcknowledgeFailed>
 80062f6:	b9a0      	cbnz	r0, 8006322 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80062f8:	1c6a      	adds	r2, r5, #1
 80062fa:	d0f1      	beq.n	80062e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fe fae4 	bl	80048c8 <HAL_GetTick>
 8006300:	1b80      	subs	r0, r0, r6
 8006302:	4285      	cmp	r5, r0
 8006304:	d301      	bcc.n	800630a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006306:	2d00      	cmp	r5, #0
 8006308:	d1ea      	bne.n	80062e0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006312:	2320      	movs	r3, #32
 8006314:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006318:	2300      	movs	r3, #0
 800631a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800631e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006322:	2001      	movs	r0, #1
}
 8006324:	bd70      	pop	{r4, r5, r6, pc}
	...

08006328 <I2C_RequestMemoryWrite>:
{
 8006328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <I2C_RequestMemoryWrite+0x60>)
{
 800632e:	4605      	mov	r5, r0
 8006330:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006332:	9300      	str	r3, [sp, #0]
{
 8006334:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800633a:	b2fa      	uxtb	r2, r7
 800633c:	f7ff ff0e 	bl	800615c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006340:	4632      	mov	r2, r6
 8006342:	9908      	ldr	r1, [sp, #32]
 8006344:	4628      	mov	r0, r5
 8006346:	f7ff ffc7 	bl	80062d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800634a:	b110      	cbz	r0, 8006352 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800634c:	2001      	movs	r0, #1
}
 800634e:	b003      	add	sp, #12
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006352:	2f01      	cmp	r7, #1
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	d10c      	bne.n	8006372 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006358:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800635a:	2200      	movs	r2, #0
 800635c:	2180      	movs	r1, #128	; 0x80
 800635e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006360:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	9600      	str	r6, [sp, #0]
 8006366:	f7ff ff4f 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800636a:	3000      	adds	r0, #0
 800636c:	bf18      	it	ne
 800636e:	2001      	movne	r0, #1
 8006370:	e7ed      	b.n	800634e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006372:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006374:	9908      	ldr	r1, [sp, #32]
 8006376:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006378:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800637a:	4632      	mov	r2, r6
 800637c:	f7ff ffac 	bl	80062d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006380:	2800      	cmp	r0, #0
 8006382:	d1e3      	bne.n	800634c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	e7e7      	b.n	8006358 <I2C_RequestMemoryWrite+0x30>
 8006388:	80002000 	.word	0x80002000

0800638c <I2C_RequestMemoryRead>:
{
 800638c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006390:	4b16      	ldr	r3, [pc, #88]	; (80063ec <I2C_RequestMemoryRead+0x60>)
{
 8006392:	4605      	mov	r5, r0
 8006394:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006396:	9300      	str	r3, [sp, #0]
{
 8006398:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800639a:	2300      	movs	r3, #0
 800639c:	b2fa      	uxtb	r2, r7
 800639e:	f7ff fedd 	bl	800615c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063a2:	4632      	mov	r2, r6
 80063a4:	9908      	ldr	r1, [sp, #32]
 80063a6:	4628      	mov	r0, r5
 80063a8:	f7ff ff96 	bl	80062d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ac:	b110      	cbz	r0, 80063b4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80063ae:	2001      	movs	r0, #1
}
 80063b0:	b003      	add	sp, #12
 80063b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b4:	2f01      	cmp	r7, #1
 80063b6:	682b      	ldr	r3, [r5, #0]
 80063b8:	d10c      	bne.n	80063d4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ba:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	2200      	movs	r2, #0
 80063be:	2140      	movs	r1, #64	; 0x40
 80063c0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063c2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063c4:	9b08      	ldr	r3, [sp, #32]
 80063c6:	9600      	str	r6, [sp, #0]
 80063c8:	f7ff ff1e 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80063cc:	3000      	adds	r0, #0
 80063ce:	bf18      	it	ne
 80063d0:	2001      	movne	r0, #1
 80063d2:	e7ed      	b.n	80063b0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063d4:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d6:	9908      	ldr	r1, [sp, #32]
 80063d8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063da:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063dc:	4632      	mov	r2, r6
 80063de:	f7ff ff7b 	bl	80062d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d1e3      	bne.n	80063ae <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	e7e7      	b.n	80063ba <I2C_RequestMemoryRead+0x2e>
 80063ea:	bf00      	nop
 80063ec:	80002000 	.word	0x80002000

080063f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4604      	mov	r4, r0
 80063f4:	460d      	mov	r5, r1
 80063f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	069b      	lsls	r3, r3, #26
 80063fe:	d501      	bpl.n	8006404 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006400:	2000      	movs	r0, #0
 8006402:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006404:	4632      	mov	r2, r6
 8006406:	4629      	mov	r1, r5
 8006408:	4620      	mov	r0, r4
 800640a:	f7ff ff28 	bl	800625e <I2C_IsAcknowledgeFailed>
 800640e:	b990      	cbnz	r0, 8006436 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006410:	f7fe fa5a 	bl	80048c8 <HAL_GetTick>
 8006414:	1b80      	subs	r0, r0, r6
 8006416:	4285      	cmp	r5, r0
 8006418:	d301      	bcc.n	800641e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800641a:	2d00      	cmp	r5, #0
 800641c:	d1ec      	bne.n	80063f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006426:	2320      	movs	r3, #32
 8006428:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	2300      	movs	r3, #0
 800642e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006432:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006436:	2001      	movs	r0, #1
}
 8006438:	bd70      	pop	{r4, r5, r6, pc}
	...

0800643c <HAL_I2C_Init>:
{
 800643c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800643e:	4604      	mov	r4, r0
 8006440:	2800      	cmp	r0, #0
 8006442:	f000 809e 	beq.w	8006582 <HAL_I2C_Init+0x146>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006446:	6803      	ldr	r3, [r0, #0]
 8006448:	4a4f      	ldr	r2, [pc, #316]	; (8006588 <HAL_I2C_Init+0x14c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d010      	beq.n	8006470 <HAL_I2C_Init+0x34>
 800644e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006452:	4293      	cmp	r3, r2
 8006454:	d00c      	beq.n	8006470 <HAL_I2C_Init+0x34>
 8006456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800645a:	4293      	cmp	r3, r2
 800645c:	d008      	beq.n	8006470 <HAL_I2C_Init+0x34>
 800645e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_I2C_Init+0x34>
 8006466:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800646a:	4848      	ldr	r0, [pc, #288]	; (800658c <HAL_I2C_Init+0x150>)
 800646c:	f7fb fb61 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006476:	d304      	bcc.n	8006482 <HAL_I2C_Init+0x46>
 8006478:	f240 11df 	movw	r1, #479	; 0x1df
 800647c:	4843      	ldr	r0, [pc, #268]	; (800658c <HAL_I2C_Init+0x150>)
 800647e:	f7fb fb58 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006482:	68e3      	ldr	r3, [r4, #12]
 8006484:	3b01      	subs	r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d904      	bls.n	8006494 <HAL_I2C_Init+0x58>
 800648a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800648e:	483f      	ldr	r0, [pc, #252]	; (800658c <HAL_I2C_Init+0x150>)
 8006490:	f7fb fb4f 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800649a:	d004      	beq.n	80064a6 <HAL_I2C_Init+0x6a>
 800649c:	f240 11e1 	movw	r1, #481	; 0x1e1
 80064a0:	483a      	ldr	r0, [pc, #232]	; (800658c <HAL_I2C_Init+0x150>)
 80064a2:	f7fb fb46 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80064a6:	6963      	ldr	r3, [r4, #20]
 80064a8:	2bff      	cmp	r3, #255	; 0xff
 80064aa:	d904      	bls.n	80064b6 <HAL_I2C_Init+0x7a>
 80064ac:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80064b0:	4836      	ldr	r0, [pc, #216]	; (800658c <HAL_I2C_Init+0x150>)
 80064b2:	f7fb fb3e 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80064b6:	69a3      	ldr	r3, [r4, #24]
 80064b8:	2b07      	cmp	r3, #7
 80064ba:	d904      	bls.n	80064c6 <HAL_I2C_Init+0x8a>
 80064bc:	f240 11e3 	movw	r1, #483	; 0x1e3
 80064c0:	4832      	ldr	r0, [pc, #200]	; (800658c <HAL_I2C_Init+0x150>)
 80064c2:	f7fb fb36 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80064c6:	69e3      	ldr	r3, [r4, #28]
 80064c8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80064cc:	d004      	beq.n	80064d8 <HAL_I2C_Init+0x9c>
 80064ce:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 80064d2:	482e      	ldr	r0, [pc, #184]	; (800658c <HAL_I2C_Init+0x150>)
 80064d4:	f7fb fb2d 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80064d8:	6a23      	ldr	r3, [r4, #32]
 80064da:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 80064de:	d004      	beq.n	80064ea <HAL_I2C_Init+0xae>
 80064e0:	f240 11e5 	movw	r1, #485	; 0x1e5
 80064e4:	4829      	ldr	r0, [pc, #164]	; (800658c <HAL_I2C_Init+0x150>)
 80064e6:	f7fb fb24 	bl	8001b32 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ea:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80064ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064f2:	b923      	cbnz	r3, 80064fe <HAL_I2C_Init+0xc2>
    hi2c->Lock = HAL_UNLOCKED;
 80064f4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7fb f973 	bl	80017e4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80064fe:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006500:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006502:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006506:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006518:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006520:	609a      	str	r2, [r3, #8]
 8006522:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006524:	d124      	bne.n	8006570 <HAL_I2C_Init+0x134>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800652a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800652c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800652e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006530:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006532:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800653a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006542:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006544:	6922      	ldr	r2, [r4, #16]
 8006546:	430a      	orrs	r2, r1
 8006548:	69a1      	ldr	r1, [r4, #24]
 800654a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800654e:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006550:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006552:	69e2      	ldr	r2, [r4, #28]
 8006554:	430a      	orrs	r2, r1
 8006556:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006560:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006562:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006564:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006568:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800656a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800656e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006570:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006574:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006576:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006578:	d1d8      	bne.n	800652c <HAL_I2C_Init+0xf0>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800657a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800657e:	605a      	str	r2, [r3, #4]
 8006580:	e7d4      	b.n	800652c <HAL_I2C_Init+0xf0>
    return HAL_ERROR;
 8006582:	2001      	movs	r0, #1
}
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	40005400 	.word	0x40005400
 800658c:	0802acd9 	.word	0x0802acd9

08006590 <HAL_I2C_DeInit>:
{
 8006590:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006592:	4604      	mov	r4, r0
 8006594:	b348      	cbz	r0, 80065ea <HAL_I2C_DeInit+0x5a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006596:	6803      	ldr	r3, [r0, #0]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <HAL_I2C_DeInit+0x60>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d010      	beq.n	80065c0 <HAL_I2C_DeInit+0x30>
 800659e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00c      	beq.n	80065c0 <HAL_I2C_DeInit+0x30>
 80065a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d008      	beq.n	80065c0 <HAL_I2C_DeInit+0x30>
 80065ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_I2C_DeInit+0x30>
 80065b6:	f240 214b 	movw	r1, #587	; 0x24b
 80065ba:	480e      	ldr	r0, [pc, #56]	; (80065f4 <HAL_I2C_DeInit+0x64>)
 80065bc:	f7fb fab9 	bl	8001b32 <assert_failed>
  __HAL_I2C_DISABLE(hi2c);
 80065c0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80065c2:	2324      	movs	r3, #36	; 0x24
  HAL_I2C_MspDeInit(hi2c);
 80065c4:	4620      	mov	r0, r4
  hi2c->State = HAL_I2C_STATE_BUSY;
 80065c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80065d2:	f7fb f967 	bl	80018a4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d6:	2000      	movs	r0, #0
 80065d8:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80065da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80065de:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80065e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
}
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop
 80065f0:	40005400 	.word	0x40005400
 80065f4:	0802acd9 	.word	0x0802acd9

080065f8 <HAL_I2C_Mem_Write>:
{
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80065fe:	3b01      	subs	r3, #1
{
 8006600:	b085      	sub	sp, #20
 8006602:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006604:	2b01      	cmp	r3, #1
{
 8006606:	460f      	mov	r7, r1
 8006608:	9203      	str	r2, [sp, #12]
 800660a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800660e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006612:	d904      	bls.n	800661e <HAL_I2C_Mem_Write+0x26>
 8006614:	f640 01ed 	movw	r1, #2285	; 0x8ed
 8006618:	4857      	ldr	r0, [pc, #348]	; (8006778 <HAL_I2C_Mem_Write+0x180>)
 800661a:	f7fb fa8a 	bl	8001b32 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800661e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006622:	2b20      	cmp	r3, #32
 8006624:	f040 80a5 	bne.w	8006772 <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 8006628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662a:	b113      	cbz	r3, 8006632 <HAL_I2C_Mem_Write+0x3a>
 800662c:	f1bb 0f00 	cmp.w	fp, #0
 8006630:	d106      	bne.n	8006640 <HAL_I2C_Mem_Write+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006636:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8006638:	2001      	movs	r0, #1
}
 800663a:	b005      	add	sp, #20
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006640:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006644:	2b01      	cmp	r3, #1
 8006646:	f000 8094 	beq.w	8006772 <HAL_I2C_Mem_Write+0x17a>
 800664a:	2501      	movs	r5, #1
 800664c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006650:	f7fe f93a 	bl	80048c8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006654:	2319      	movs	r3, #25
 8006656:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8006658:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800665a:	462a      	mov	r2, r5
 800665c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff fdd1 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8006666:	4681      	mov	r9, r0
 8006668:	2800      	cmp	r0, #0
 800666a:	d1e5      	bne.n	8006638 <HAL_I2C_Mem_Write+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800666c:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 800666e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006670:	9601      	str	r6, [sp, #4]
 8006672:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006674:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006678:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800667a:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800667e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006684:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006686:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8006688:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800668a:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 800668c:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006690:	9a03      	ldr	r2, [sp, #12]
 8006692:	f7ff fe49 	bl	8006328 <I2C_RequestMemoryWrite>
 8006696:	b110      	cbz	r0, 800669e <HAL_I2C_Mem_Write+0xa6>
      __HAL_UNLOCK(hi2c);
 8006698:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800669c:	e7cc      	b.n	8006638 <HAL_I2C_Mem_Write+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800669e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2bff      	cmp	r3, #255	; 0xff
 80066a4:	d955      	bls.n	8006752 <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ac:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066b0:	4639      	mov	r1, r7
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff fd52 	bl	800615c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b8:	4632      	mov	r2, r6
 80066ba:	4641      	mov	r1, r8
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff fe0b 	bl	80062d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d1b8      	bne.n	8006638 <HAL_I2C_Mem_Write+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	f813 1b01 	ldrb.w	r1, [r3], #1
 80066ce:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80066d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80066d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80066d6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80066d8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80066da:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80066dc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80066de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80066e2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b1ab      	cbz	r3, 8006714 <HAL_I2C_Mem_Write+0x11c>
 80066e8:	b9a2      	cbnz	r2, 8006714 <HAL_I2C_Mem_Write+0x11c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ea:	9600      	str	r6, [sp, #0]
 80066ec:	4643      	mov	r3, r8
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7ff fd89 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d19e      	bne.n	8006638 <HAL_I2C_Mem_Write+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2bff      	cmp	r3, #255	; 0xff
 8006700:	d92f      	bls.n	8006762 <HAL_I2C_Mem_Write+0x16a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006702:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006708:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800670a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800670c:	4639      	mov	r1, r7
 800670e:	4620      	mov	r0, r4
 8006710:	f7ff fd24 	bl	800615c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8006714:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1cd      	bne.n	80066b8 <HAL_I2C_Mem_Write+0xc0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671c:	4632      	mov	r2, r6
 800671e:	4641      	mov	r1, r8
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff fe65 	bl	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006726:	2800      	cmp	r0, #0
 8006728:	d186      	bne.n	8006638 <HAL_I2C_Mem_Write+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	2120      	movs	r1, #32
 800672e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8006736:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800673a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006744:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006748:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800674c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8006750:	e773      	b.n	800663a <HAL_I2C_Mem_Write+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8006752:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006758:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800675a:	b292      	uxth	r2, r2
 800675c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	e7a6      	b.n	80066b0 <HAL_I2C_Mem_Write+0xb8>
          hi2c->XferSize = hi2c->XferCount;
 8006762:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006768:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800676a:	b292      	uxth	r2, r2
 800676c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	e7cc      	b.n	800670c <HAL_I2C_Mem_Write+0x114>
    return HAL_BUSY;
 8006772:	2002      	movs	r0, #2
 8006774:	e761      	b.n	800663a <HAL_I2C_Mem_Write+0x42>
 8006776:	bf00      	nop
 8006778:	0802acd9 	.word	0x0802acd9

0800677c <HAL_I2C_Mem_Read>:
{
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006782:	3b01      	subs	r3, #1
{
 8006784:	b085      	sub	sp, #20
 8006786:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006788:	2b01      	cmp	r3, #1
{
 800678a:	460f      	mov	r7, r1
 800678c:	9203      	str	r2, [sp, #12]
 800678e:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8006792:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006796:	d904      	bls.n	80067a2 <HAL_I2C_Mem_Read+0x26>
 8006798:	f640 1174 	movw	r1, #2420	; 0x974
 800679c:	4859      	ldr	r0, [pc, #356]	; (8006904 <HAL_I2C_Mem_Read+0x188>)
 800679e:	f7fb f9c8 	bl	8001b32 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 80a9 	bne.w	80068fe <HAL_I2C_Mem_Read+0x182>
    if ((pData == NULL) || (Size == 0U))
 80067ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ae:	b113      	cbz	r3, 80067b6 <HAL_I2C_Mem_Read+0x3a>
 80067b0:	f1bb 0f00 	cmp.w	fp, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_I2C_Mem_Read+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ba:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80067bc:	2001      	movs	r0, #1
}
 80067be:	b005      	add	sp, #20
 80067c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80067c4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f000 8098 	beq.w	80068fe <HAL_I2C_Mem_Read+0x182>
 80067ce:	2501      	movs	r5, #1
 80067d0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80067d4:	f7fe f878 	bl	80048c8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067d8:	2319      	movs	r3, #25
 80067da:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80067dc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067de:	462a      	mov	r2, r5
 80067e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff fd0f 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 80067ea:	4681      	mov	r9, r0
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d1e5      	bne.n	80067bc <HAL_I2C_Mem_Read+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067f0:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80067f2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067f4:	9601      	str	r6, [sp, #4]
 80067f6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067fc:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067fe:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8006806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006808:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800680a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800680c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800680e:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 8006810:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006814:	9a03      	ldr	r2, [sp, #12]
 8006816:	f7ff fdb9 	bl	800638c <I2C_RequestMemoryRead>
 800681a:	b110      	cbz	r0, 8006822 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 800681c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8006820:	e7cc      	b.n	80067bc <HAL_I2C_Mem_Read+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006822:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2bff      	cmp	r3, #255	; 0xff
 8006828:	4b37      	ldr	r3, [pc, #220]	; (8006908 <HAL_I2C_Mem_Read+0x18c>)
 800682a:	d958      	bls.n	80068de <HAL_I2C_Mem_Read+0x162>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800682c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006834:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006836:	4639      	mov	r1, r7
 8006838:	4620      	mov	r0, r4
 800683a:	f7ff fc8f 	bl	800615c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800683e:	9600      	str	r6, [sp, #0]
 8006840:	4643      	mov	r3, r8
 8006842:	2200      	movs	r2, #0
 8006844:	2104      	movs	r1, #4
 8006846:	4620      	mov	r0, r4
 8006848:	f7ff fcde 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 800684c:	2800      	cmp	r0, #0
 800684e:	d1b5      	bne.n	80067bc <HAL_I2C_Mem_Read+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006856:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006858:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800685a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800685c:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800685e:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8006860:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006862:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006864:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006866:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006868:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800686a:	b29b      	uxth	r3, r3
 800686c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800686e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	b1ab      	cbz	r3, 80068a0 <HAL_I2C_Mem_Read+0x124>
 8006874:	b9a2      	cbnz	r2, 80068a0 <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006876:	9600      	str	r6, [sp, #0]
 8006878:	4643      	mov	r3, r8
 800687a:	2180      	movs	r1, #128	; 0x80
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff fcc3 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8006882:	2800      	cmp	r0, #0
 8006884:	d19a      	bne.n	80067bc <HAL_I2C_Mem_Read+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006886:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d92f      	bls.n	80068ee <HAL_I2C_Mem_Read+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800688e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006894:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006896:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006898:	4639      	mov	r1, r7
 800689a:	4620      	mov	r0, r4
 800689c:	f7ff fc5e 	bl	800615c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80068a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ca      	bne.n	800683e <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	4632      	mov	r2, r6
 80068aa:	4641      	mov	r1, r8
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7ff fd9f 	bl	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d182      	bne.n	80067bc <HAL_I2C_Mem_Read+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	2120      	movs	r1, #32
 80068ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80068c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80068c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80068d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80068d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80068dc:	e76f      	b.n	80067be <HAL_I2C_Mem_Read+0x42>
      hi2c->XferSize = hi2c->XferCount;
 80068de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80068e6:	b292      	uxth	r2, r2
 80068e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	e7a3      	b.n	8006836 <HAL_I2C_Mem_Read+0xba>
          hi2c->XferSize = hi2c->XferCount;
 80068ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068f4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80068f6:	b292      	uxth	r2, r2
 80068f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	e7cc      	b.n	8006898 <HAL_I2C_Mem_Read+0x11c>
    return HAL_BUSY;
 80068fe:	2002      	movs	r0, #2
 8006900:	e75d      	b.n	80067be <HAL_I2C_Mem_Read+0x42>
 8006902:	bf00      	nop
 8006904:	0802acd9 	.word	0x0802acd9
 8006908:	80002400 	.word	0x80002400

0800690c <HAL_I2C_GetState>:
  return hi2c->State;
 800690c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8006910:	4770      	bx	lr
	...

08006914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006914:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006916:	4a20      	ldr	r2, [pc, #128]	; (8006998 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
{
 8006918:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800691a:	6803      	ldr	r3, [r0, #0]
{
 800691c:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800691e:	4293      	cmp	r3, r2
 8006920:	d00f      	beq.n	8006942 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8006922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006926:	4293      	cmp	r3, r2
 8006928:	d00b      	beq.n	8006942 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800692a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692e:	4293      	cmp	r3, r2
 8006930:	d007      	beq.n	8006942 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8006932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800693a:	215f      	movs	r1, #95	; 0x5f
 800693c:	4817      	ldr	r0, [pc, #92]	; (800699c <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 800693e:	f7fb f8f8 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8006942:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8006946:	d003      	beq.n	8006950 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 8006948:	2160      	movs	r1, #96	; 0x60
 800694a:	4814      	ldr	r0, [pc, #80]	; (800699c <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 800694c:	f7fb f8f1 	bl	8001b32 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006950:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	2a20      	cmp	r2, #32
 8006958:	d11c      	bne.n	8006994 <HAL_I2CEx_ConfigAnalogFilter+0x80>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800695a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800695e:	2b01      	cmp	r3, #1
 8006960:	d018      	beq.n	8006994 <HAL_I2CEx_ConfigAnalogFilter+0x80>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006962:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006964:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006966:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	f021 0101 	bic.w	r1, r1, #1
 8006972:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006974:	6819      	ldr	r1, [r3, #0]
 8006976:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800697a:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800697c:	6819      	ldr	r1, [r3, #0]
 800697e:	430d      	orrs	r5, r1
 8006980:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	f041 0101 	orr.w	r1, r1, #1
 8006988:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800698a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800698e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8006992:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8006994:	2002      	movs	r0, #2
  }
}
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	40005400 	.word	0x40005400
 800699c:	0802ad17 	.word	0x0802ad17

080069a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
{
 80069a4:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80069a6:	6803      	ldr	r3, [r0, #0]
{
 80069a8:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80069ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80069b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80069be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80069c6:	218d      	movs	r1, #141	; 0x8d
 80069c8:	4816      	ldr	r0, [pc, #88]	; (8006a24 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 80069ca:	f7fb f8b2 	bl	8001b32 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80069ce:	2d0f      	cmp	r5, #15
 80069d0:	d903      	bls.n	80069da <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80069d2:	218e      	movs	r1, #142	; 0x8e
 80069d4:	4813      	ldr	r0, [pc, #76]	; (8006a24 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 80069d6:	f7fb f8ac 	bl	8001b32 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069da:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	2a20      	cmp	r2, #32
 80069e2:	d11b      	bne.n	8006a1c <HAL_I2CEx_ConfigDigitalFilter+0x7c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d017      	beq.n	8006a1c <HAL_I2CEx_ConfigDigitalFilter+0x7c>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ec:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ee:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	6819      	ldr	r1, [r3, #0]
 80069f8:	f021 0101 	bic.w	r1, r1, #1
 80069fc:	6019      	str	r1, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80069fe:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8006a00:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8006a04:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8006a08:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	f041 0101 	orr.w	r1, r1, #1
 8006a10:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a12:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a16:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8006a1c:	2002      	movs	r0, #2
  }
}
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	40005400 	.word	0x40005400
 8006a24:	0802ad17 	.word	0x0802ad17

08006a28 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a28:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a2a:	f04f 0c00 	mov.w	ip, #0
{
 8006a2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a32:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a34:	6804      	ldr	r4, [r0, #0]
 8006a36:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a38:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a3a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a3c:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a40:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a42:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a46:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a4a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a4e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a52:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a54:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a56:	68e0      	ldr	r0, [r4, #12]
 8006a58:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8006a5c:	4430      	add	r0, r6
 8006a5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a62:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a64:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a66:	68e0      	ldr	r0, [r4, #12]
 8006a68:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8006a6c:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a6e:	6898      	ldr	r0, [r3, #8]
 8006a70:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8006a74:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a76:	6888      	ldr	r0, [r1, #8]
 8006a78:	68e6      	ldr	r6, [r4, #12]
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8006a80:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a82:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a84:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006a88:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a8a:	6918      	ldr	r0, [r3, #16]
 8006a8c:	f020 0007 	bic.w	r0, r0, #7
 8006a90:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a92:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a94:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a96:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a9a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a9e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006aa2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8006aa6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8006aaa:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8006aae:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8006ab2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ab4:	6958      	ldr	r0, [r3, #20]
 8006ab6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8006aba:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006abc:	6948      	ldr	r0, [r1, #20]
 8006abe:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006ac0:	69d8      	ldr	r0, [r3, #28]
 8006ac2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8006ac6:	f020 0007 	bic.w	r0, r0, #7
 8006aca:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006acc:	6a08      	ldr	r0, [r1, #32]
 8006ace:	69cd      	ldr	r5, [r1, #28]
 8006ad0:	4305      	orrs	r5, r0
 8006ad2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ad4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ad6:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ad8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006adc:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ade:	b31e      	cbz	r6, 8006b28 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006ae0:	2e01      	cmp	r6, #1
 8006ae2:	d023      	beq.n	8006b2c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ae4:	1eb0      	subs	r0, r6, #2
 8006ae6:	2802      	cmp	r0, #2
 8006ae8:	d922      	bls.n	8006b30 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006aea:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006aec:	bf0c      	ite	eq
 8006aee:	2002      	moveq	r0, #2
 8006af0:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006af2:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006af4:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006af8:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8006afc:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006afe:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b02:	4345      	muls	r5, r0
 8006b04:	4378      	muls	r0, r7
 8006b06:	3003      	adds	r0, #3
 8006b08:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8006b0c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b10:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8006b14:	f020 0007 	bic.w	r0, r0, #7
 8006b18:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b1a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b1c:	58a3      	ldr	r3, [r4, r2]
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	50a3      	str	r3, [r4, r2]
 8006b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8006b28:	2004      	movs	r0, #4
 8006b2a:	e7e2      	b.n	8006af2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006b2c:	2003      	movs	r0, #3
 8006b2e:	e7e0      	b.n	8006af2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006b30:	2002      	movs	r0, #2
 8006b32:	e7de      	b.n	8006af2 <LTDC_SetConfig+0xca>

08006b34 <HAL_LTDC_Init>:
{
 8006b34:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8006b36:	4604      	mov	r4, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f000 80cd 	beq.w	8006cd8 <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 8006b3e:	6802      	ldr	r2, [r0, #0]
 8006b40:	4b66      	ldr	r3, [pc, #408]	; (8006cdc <HAL_LTDC_Init+0x1a8>)
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d003      	beq.n	8006b4e <HAL_LTDC_Init+0x1a>
 8006b46:	21ca      	movs	r1, #202	; 0xca
 8006b48:	4865      	ldr	r0, [pc, #404]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b4a:	f7fa fff2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b54:	d303      	bcc.n	8006b5e <HAL_LTDC_Init+0x2a>
 8006b56:	21cb      	movs	r1, #203	; 0xcb
 8006b58:	4861      	ldr	r0, [pc, #388]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b5a:	f7fa ffea 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8006b5e:	69a3      	ldr	r3, [r4, #24]
 8006b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b64:	d303      	bcc.n	8006b6e <HAL_LTDC_Init+0x3a>
 8006b66:	21cc      	movs	r1, #204	; 0xcc
 8006b68:	485d      	ldr	r0, [pc, #372]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b6a:	f7fa ffe2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8006b6e:	69e3      	ldr	r3, [r4, #28]
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b74:	d303      	bcc.n	8006b7e <HAL_LTDC_Init+0x4a>
 8006b76:	21cd      	movs	r1, #205	; 0xcd
 8006b78:	4859      	ldr	r0, [pc, #356]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b7a:	f7fa ffda 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 8006b7e:	6a23      	ldr	r3, [r4, #32]
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b84:	d303      	bcc.n	8006b8e <HAL_LTDC_Init+0x5a>
 8006b86:	21ce      	movs	r1, #206	; 0xce
 8006b88:	4855      	ldr	r0, [pc, #340]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b8a:	f7fa ffd2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 8006b8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b94:	d303      	bcc.n	8006b9e <HAL_LTDC_Init+0x6a>
 8006b96:	21cf      	movs	r1, #207	; 0xcf
 8006b98:	4851      	ldr	r0, [pc, #324]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006b9a:	f7fa ffca 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 8006b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba4:	d303      	bcc.n	8006bae <HAL_LTDC_Init+0x7a>
 8006ba6:	21d0      	movs	r1, #208	; 0xd0
 8006ba8:	484d      	ldr	r0, [pc, #308]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006baa:	f7fa ffc2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 8006bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d303      	bcc.n	8006bbe <HAL_LTDC_Init+0x8a>
 8006bb6:	21d1      	movs	r1, #209	; 0xd1
 8006bb8:	4849      	ldr	r0, [pc, #292]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006bba:	f7fa ffba 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 8006bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc4:	d303      	bcc.n	8006bce <HAL_LTDC_Init+0x9a>
 8006bc6:	21d2      	movs	r1, #210	; 0xd2
 8006bc8:	4845      	ldr	r0, [pc, #276]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006bca:	f7fa ffb2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	d003      	beq.n	8006bde <HAL_LTDC_Init+0xaa>
 8006bd6:	21d3      	movs	r1, #211	; 0xd3
 8006bd8:	4841      	ldr	r0, [pc, #260]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006bda:	f7fa ffaa 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8006bde:	68a3      	ldr	r3, [r4, #8]
 8006be0:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8006be4:	d003      	beq.n	8006bee <HAL_LTDC_Init+0xba>
 8006be6:	21d4      	movs	r1, #212	; 0xd4
 8006be8:	483d      	ldr	r0, [pc, #244]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006bea:	f7fa ffa2 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8006bee:	68e3      	ldr	r3, [r4, #12]
 8006bf0:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	d003      	beq.n	8006bfe <HAL_LTDC_Init+0xca>
 8006bf6:	21d5      	movs	r1, #213	; 0xd5
 8006bf8:	4839      	ldr	r0, [pc, #228]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006bfa:	f7fa ff9a 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8006c04:	d003      	beq.n	8006c0e <HAL_LTDC_Init+0xda>
 8006c06:	21d6      	movs	r1, #214	; 0xd6
 8006c08:	4835      	ldr	r0, [pc, #212]	; (8006ce0 <HAL_LTDC_Init+0x1ac>)
 8006c0a:	f7fa ff92 	bl	8001b32 <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c0e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8006c12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c16:	b923      	cbnz	r3, 8006c22 <HAL_LTDC_Init+0xee>
    hltdc->Lock = HAL_UNLOCKED;
 8006c18:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7fc faaf 	bl	8003180 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c22:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c24:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c26:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c34:	6862      	ldr	r2, [r4, #4]
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	4302      	orrs	r2, r0
 8006c3a:	68e0      	ldr	r0, [r4, #12]
 8006c3c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c3e:	6920      	ldr	r0, [r4, #16]
 8006c40:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c42:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c44:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c46:	4927      	ldr	r1, [pc, #156]	; (8006ce4 <HAL_LTDC_Init+0x1b0>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c48:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006c56:	69a0      	ldr	r0, [r4, #24]
 8006c58:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c5a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c5c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	400a      	ands	r2, r1
 8006c62:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006c6a:	6a20      	ldr	r0, [r4, #32]
 8006c6c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006c6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c70:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	400a      	ands	r2, r1
 8006c76:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006c80:	4302      	orrs	r2, r0
 8006c82:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	4011      	ands	r1, r2
 8006c88:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006c8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006c92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006c94:	430a      	orrs	r2, r1
 8006c96:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006c9a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c9e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ca2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ca6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006caa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006cb4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006cb8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbe:	f042 0206 	orr.w	r2, r2, #6
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ccc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006cce:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cd2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006cd8:	2001      	movs	r0, #1
}
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	40016800 	.word	0x40016800
 8006ce0:	0802ad58 	.word	0x0802ad58
 8006ce4:	f000f800 	.word	0xf000f800

08006ce8 <HAL_LTDC_DeInit>:
{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8006cec:	f7fc fad6 	bl	800329c <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 8006cf6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 8006cfa:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <HAL_LTDC_ErrorCallback>:
 8006d00:	4770      	bx	lr

08006d02 <HAL_LTDC_ReloadEventCallback>:
{
 8006d02:	4770      	bx	lr

08006d04 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006d04:	6803      	ldr	r3, [r0, #0]
{
 8006d06:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006d08:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8006d0a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006d0c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006d0e:	0772      	lsls	r2, r6, #29
 8006d10:	d514      	bpl.n	8006d3c <HAL_LTDC_IRQHandler+0x38>
 8006d12:	0769      	lsls	r1, r5, #29
 8006d14:	d512      	bpl.n	8006d3c <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d18:	f022 0204 	bic.w	r2, r2, #4
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006d1e:	2204      	movs	r2, #4
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006d22:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006d2e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d30:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006d34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006d38:	f7ff ffe2 	bl	8006d00 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006d3c:	07b2      	lsls	r2, r6, #30
 8006d3e:	d516      	bpl.n	8006d6e <HAL_LTDC_IRQHandler+0x6a>
 8006d40:	07ab      	lsls	r3, r5, #30
 8006d42:	d514      	bpl.n	8006d6e <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006d44:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8006d46:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	f022 0202 	bic.w	r2, r2, #2
 8006d4e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006d50:	2202      	movs	r2, #2
 8006d52:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006d54:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d5e:	2304      	movs	r3, #4
 8006d60:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006d64:	2300      	movs	r3, #0
 8006d66:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8006d6a:	f7ff ffc9 	bl	8006d00 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006d6e:	07f0      	lsls	r0, r6, #31
 8006d70:	d510      	bpl.n	8006d94 <HAL_LTDC_IRQHandler+0x90>
 8006d72:	07e9      	lsls	r1, r5, #31
 8006d74:	d50e      	bpl.n	8006d94 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006d76:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8006d78:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006d82:	2201      	movs	r2, #1
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8006d86:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8006d88:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006d8c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006d90:	f7fc ff2e 	bl	8003bf0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006d94:	0732      	lsls	r2, r6, #28
 8006d96:	d511      	bpl.n	8006dbc <HAL_LTDC_IRQHandler+0xb8>
 8006d98:	072b      	lsls	r3, r5, #28
 8006d9a:	d50f      	bpl.n	8006dbc <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006d9c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006d9e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da2:	f022 0208 	bic.w	r2, r2, #8
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006da8:	2208      	movs	r2, #8
 8006daa:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006db2:	2300      	movs	r3, #0
 8006db4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006db8:	f7ff ffa3 	bl	8006d02 <HAL_LTDC_ReloadEventCallback>
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006dc0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006dc0:	2a01      	cmp	r2, #1
{
 8006dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc6:	4607      	mov	r7, r0
 8006dc8:	460e      	mov	r6, r1
 8006dca:	4691      	mov	r9, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006dcc:	d904      	bls.n	8006dd8 <HAL_LTDC_ConfigLayer+0x18>
 8006dce:	f240 21fe 	movw	r1, #766	; 0x2fe
 8006dd2:	4846      	ldr	r0, [pc, #280]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006dd4:	f7fa fead 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8006dd8:	6833      	ldr	r3, [r6, #0]
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d304      	bcc.n	8006dea <HAL_LTDC_ConfigLayer+0x2a>
 8006de0:	f240 21ff 	movw	r1, #767	; 0x2ff
 8006de4:	4841      	ldr	r0, [pc, #260]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006de6:	f7fa fea4 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 8006dea:	6873      	ldr	r3, [r6, #4]
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df0:	d304      	bcc.n	8006dfc <HAL_LTDC_ConfigLayer+0x3c>
 8006df2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006df6:	483d      	ldr	r0, [pc, #244]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006df8:	f7fa fe9b 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8006dfc:	68b3      	ldr	r3, [r6, #8]
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d304      	bcc.n	8006e0e <HAL_LTDC_ConfigLayer+0x4e>
 8006e04:	f240 3101 	movw	r1, #769	; 0x301
 8006e08:	4838      	ldr	r0, [pc, #224]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e0a:	f7fa fe92 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8006e0e:	68f3      	ldr	r3, [r6, #12]
 8006e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e14:	d304      	bcc.n	8006e20 <HAL_LTDC_ConfigLayer+0x60>
 8006e16:	f240 3102 	movw	r1, #770	; 0x302
 8006e1a:	4834      	ldr	r0, [pc, #208]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e1c:	f7fa fe89 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8006e20:	6933      	ldr	r3, [r6, #16]
 8006e22:	2b07      	cmp	r3, #7
 8006e24:	d904      	bls.n	8006e30 <HAL_LTDC_ConfigLayer+0x70>
 8006e26:	f240 3103 	movw	r1, #771	; 0x303
 8006e2a:	4830      	ldr	r0, [pc, #192]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e2c:	f7fa fe81 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8006e30:	6973      	ldr	r3, [r6, #20]
 8006e32:	2bff      	cmp	r3, #255	; 0xff
 8006e34:	d904      	bls.n	8006e40 <HAL_LTDC_ConfigLayer+0x80>
 8006e36:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006e3a:	482c      	ldr	r0, [pc, #176]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e3c:	f7fa fe79 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8006e40:	69b3      	ldr	r3, [r6, #24]
 8006e42:	2bff      	cmp	r3, #255	; 0xff
 8006e44:	d904      	bls.n	8006e50 <HAL_LTDC_ConfigLayer+0x90>
 8006e46:	f240 3105 	movw	r1, #773	; 0x305
 8006e4a:	4828      	ldr	r0, [pc, #160]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e4c:	f7fa fe71 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8006e50:	69f3      	ldr	r3, [r6, #28]
 8006e52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5a:	d004      	beq.n	8006e66 <HAL_LTDC_ConfigLayer+0xa6>
 8006e5c:	f240 3106 	movw	r1, #774	; 0x306
 8006e60:	4822      	ldr	r0, [pc, #136]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e62:	f7fa fe66 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 8006e66:	6a33      	ldr	r3, [r6, #32]
 8006e68:	f023 0302 	bic.w	r3, r3, #2
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	d004      	beq.n	8006e7a <HAL_LTDC_ConfigLayer+0xba>
 8006e70:	f240 3107 	movw	r1, #775	; 0x307
 8006e74:	481d      	ldr	r0, [pc, #116]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e76:	f7fa fe5c 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 8006e7a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e80:	d304      	bcc.n	8006e8c <HAL_LTDC_ConfigLayer+0xcc>
 8006e82:	f44f 7142 	mov.w	r1, #776	; 0x308
 8006e86:	4819      	ldr	r0, [pc, #100]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e88:	f7fa fe53 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 8006e8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e92:	d304      	bcc.n	8006e9e <HAL_LTDC_ConfigLayer+0xde>
 8006e94:	f240 3109 	movw	r1, #777	; 0x309
 8006e98:	4814      	ldr	r0, [pc, #80]	; (8006eec <HAL_LTDC_ConfigLayer+0x12c>)
 8006e9a:	f7fa fe4a 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8006e9e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8006ea2:	2002      	movs	r0, #2
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d01f      	beq.n	8006ee8 <HAL_LTDC_ConfigLayer+0x128>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ea8:	2434      	movs	r4, #52	; 0x34
 8006eaa:	4635      	mov	r5, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006eac:	f887 00a1 	strb.w	r0, [r7, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8006eb0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006eb4:	fb04 7409 	mla	r4, r4, r9, r7
  __HAL_LOCK(hltdc);
 8006eb8:	f887 80a0 	strb.w	r8, [r7, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ebc:	3438      	adds	r4, #56	; 0x38
 8006ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eca:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ecc:	4638      	mov	r0, r7
 8006ece:	464a      	mov	r2, r9
 8006ed0:	4631      	mov	r1, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ed2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ed4:	f7ff fda8 	bl	8006a28 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ed8:	683b      	ldr	r3, [r7, #0]
  __HAL_UNLOCK(hltdc);
 8006eda:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006edc:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ee0:	f887 80a1 	strb.w	r8, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006ee4:	f887 00a0 	strb.w	r0, [r7, #160]	; 0xa0
}
 8006ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eec:	0802ad58 	.word	0x0802ad58

08006ef0 <HAL_LTDC_ConfigColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006ef0:	2a01      	cmp	r2, #1
{
 8006ef2:	b570      	push	{r4, r5, r6, lr}
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460e      	mov	r6, r1
 8006ef8:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006efa:	d904      	bls.n	8006f06 <HAL_LTDC_ConfigColorKeying+0x16>
 8006efc:	f44f 714c 	mov.w	r1, #816	; 0x330
 8006f00:	480d      	ldr	r0, [pc, #52]	; (8006f38 <HAL_LTDC_ConfigColorKeying+0x48>)
 8006f02:	f7fa fe16 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8006f06:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8006f0a:	2002      	movs	r0, #2
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d012      	beq.n	8006f36 <HAL_LTDC_ConfigColorKeying+0x46>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8006f10:	6821      	ldr	r1, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f12:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006f16:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8006f18:	f101 0384 	add.w	r3, r1, #132	; 0x84
 8006f1c:	eb03 12c5 	add.w	r2, r3, r5, lsl #7
 8006f20:	68d3      	ldr	r3, [r2, #12]
 8006f22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	60d3      	str	r3, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f28:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8006f2a:	60d6      	str	r6, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f2c:	624b      	str	r3, [r1, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f2e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006f32:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	0802ad58 	.word	0x0802ad58

08006f3c <HAL_LTDC_ConfigCLUT>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006f3c:	2b01      	cmp	r3, #1
{
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	4604      	mov	r4, r0
 8006f44:	460d      	mov	r5, r1
 8006f46:	4616      	mov	r6, r2
 8006f48:	4698      	mov	r8, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006f4a:	d904      	bls.n	8006f56 <HAL_LTDC_ConfigCLUT+0x1a>
 8006f4c:	f240 3159 	movw	r1, #857	; 0x359
 8006f50:	481d      	ldr	r0, [pc, #116]	; (8006fc8 <HAL_LTDC_ConfigCLUT+0x8c>)
 8006f52:	f7fa fdee 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8006f56:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8006f5a:	2002      	movs	r0, #2
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d014      	beq.n	8006f8a <HAL_LTDC_ConfigCLUT+0x4e>
 8006f60:	2301      	movs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8006f62:	ea4f 17c8 	mov.w	r7, r8, lsl #7
  for (counter = 0U; (counter < CLUTSize); counter++)
 8006f66:	2200      	movs	r2, #0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006f68:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 8006f6c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8006f70:	2334      	movs	r3, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f72:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8006f76:	fb03 4308 	mla	r3, r3, r8, r4
  for (counter = 0U; (counter < CLUTSize); counter++)
 8006f7a:	42b2      	cmp	r2, r6
 8006f7c:	d107      	bne.n	8006f8e <HAL_LTDC_ConfigCLUT+0x52>
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f7e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 8006f80:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f82:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006f86:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8006f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8006f8e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006f90:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8006f94:	2906      	cmp	r1, #6
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006f96:	bf05      	ittet	eq
 8006f98:	b2c1      	uxtbeq	r1, r0
 8006f9a:	fb0e fc02 	muleq.w	ip, lr, r2
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006f9e:	b281      	uxthne	r1, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006fa0:	ea41 010c 	orreq.w	r1, r1, ip
 8006fa4:	bf0c      	ite	eq
 8006fa6:	f400 4c7f 	andeq.w	ip, r0, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006faa:	ea41 6102 	orrne.w	r1, r1, r2, lsl #24
 8006fae:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006fb2:	bf08      	it	eq
 8006fb4:	ea41 010c 	orreq.w	r1, r1, ip
  for (counter = 0U; (counter < CLUTSize); counter++)
 8006fb8:	3201      	adds	r2, #1
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8006fba:	4301      	orrs	r1, r0
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	3084      	adds	r0, #132	; 0x84
 8006fc0:	4438      	add	r0, r7
 8006fc2:	6401      	str	r1, [r0, #64]	; 0x40
 8006fc4:	e7d9      	b.n	8006f7a <HAL_LTDC_ConfigCLUT+0x3e>
 8006fc6:	bf00      	nop
 8006fc8:	0802ad58 	.word	0x0802ad58

08006fcc <HAL_LTDC_EnableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006fcc:	2901      	cmp	r1, #1
{
 8006fce:	b538      	push	{r3, r4, r5, lr}
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8006fd4:	d904      	bls.n	8006fe0 <HAL_LTDC_EnableColorKeying+0x14>
 8006fd6:	f240 3187 	movw	r1, #903	; 0x387
 8006fda:	480c      	ldr	r0, [pc, #48]	; (800700c <HAL_LTDC_EnableColorKeying+0x40>)
 8006fdc:	f7fa fda9 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8006fe0:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d00f      	beq.n	800700a <HAL_LTDC_EnableColorKeying+0x3e>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fee:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006ff2:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8006ff6:	586b      	ldr	r3, [r5, r1]
 8006ff8:	4303      	orrs	r3, r0
  __HAL_UNLOCK(hltdc);
 8006ffa:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006ffc:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007002:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007006:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	0802ad58 	.word	0x0802ad58

08007010 <HAL_LTDC_DisableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007010:	2901      	cmp	r1, #1
{
 8007012:	b538      	push	{r3, r4, r5, lr}
 8007014:	4604      	mov	r4, r0
 8007016:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007018:	d904      	bls.n	8007024 <HAL_LTDC_DisableColorKeying+0x14>
 800701a:	f240 31aa 	movw	r1, #938	; 0x3aa
 800701e:	480d      	ldr	r0, [pc, #52]	; (8007054 <HAL_LTDC_DisableColorKeying+0x44>)
 8007020:	f7fa fd87 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8007024:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007028:	2002      	movs	r0, #2
 800702a:	2b01      	cmp	r3, #1
 800702c:	d010      	beq.n	8007050 <HAL_LTDC_DisableColorKeying+0x40>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007032:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007036:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007038:	f102 0184 	add.w	r1, r2, #132	; 0x84
 800703c:	586b      	ldr	r3, [r5, r1]
 800703e:	f023 0302 	bic.w	r3, r3, #2
 8007042:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007044:	2301      	movs	r3, #1
 8007046:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007048:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800704c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007050:	bd38      	pop	{r3, r4, r5, pc}
 8007052:	bf00      	nop
 8007054:	0802ad58 	.word	0x0802ad58

08007058 <HAL_LTDC_SetWindowPosition>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007058:	2b01      	cmp	r3, #1
{
 800705a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	4688      	mov	r8, r1
 8007062:	4617      	mov	r7, r2
 8007064:	461e      	mov	r6, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007066:	d904      	bls.n	8007072 <HAL_LTDC_SetWindowPosition+0x1a>
 8007068:	f240 4185 	movw	r1, #1157	; 0x485
 800706c:	481b      	ldr	r0, [pc, #108]	; (80070dc <HAL_LTDC_SetWindowPosition+0x84>)
 800706e:	f7fa fd60 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_CFBLL(X0));
 8007072:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8007076:	d304      	bcc.n	8007082 <HAL_LTDC_SetWindowPosition+0x2a>
 8007078:	f240 4186 	movw	r1, #1158	; 0x486
 800707c:	4817      	ldr	r0, [pc, #92]	; (80070dc <HAL_LTDC_SetWindowPosition+0x84>)
 800707e:	f7fa fd58 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(Y0));
 8007082:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8007086:	d304      	bcc.n	8007092 <HAL_LTDC_SetWindowPosition+0x3a>
 8007088:	f240 4187 	movw	r1, #1159	; 0x487
 800708c:	4813      	ldr	r0, [pc, #76]	; (80070dc <HAL_LTDC_SetWindowPosition+0x84>)
 800708e:	f7fa fd50 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8007092:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007096:	2002      	movs	r0, #2
 8007098:	2b01      	cmp	r3, #1
 800709a:	d01d      	beq.n	80070d8 <HAL_LTDC_SetWindowPosition+0x80>
  pLayerCfg->WindowX0 = X0;
 800709c:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 800709e:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070a0:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070a4:	4620      	mov	r0, r4
  pLayerCfg->WindowX0 = X0;
 80070a6:	4371      	muls	r1, r6
  __HAL_LOCK(hltdc);
 80070a8:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 80070ac:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80070ae:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80070b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070b2:	4421      	add	r1, r4
  pLayerCfg->WindowY0 = Y0;
 80070b4:	641f      	str	r7, [r3, #64]	; 0x40
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80070b6:	4442      	add	r2, r8
  pLayerCfg->WindowX0 = X0;
 80070b8:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80070be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80070c0:	4417      	add	r7, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070c2:	4632      	mov	r2, r6
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80070c4:	645f      	str	r7, [r3, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070c6:	f7ff fcaf 	bl	8006a28 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070ca:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80070cc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070ce:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80070d0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80070d4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80070d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070dc:	0802ad58 	.word	0x0802ad58

080070e0 <HAL_LTDC_SetAlpha>:
  assert_param(IS_LTDC_ALPHA(Alpha));
 80070e0:	29ff      	cmp	r1, #255	; 0xff
{
 80070e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	460f      	mov	r7, r1
 80070e8:	4616      	mov	r6, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 80070ea:	d904      	bls.n	80070f6 <HAL_LTDC_SetAlpha+0x16>
 80070ec:	f240 41e5 	movw	r1, #1253	; 0x4e5
 80070f0:	4812      	ldr	r0, [pc, #72]	; (800713c <HAL_LTDC_SetAlpha+0x5c>)
 80070f2:	f7fa fd1e 	bl	8001b32 <assert_failed>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80070f6:	2e01      	cmp	r6, #1
 80070f8:	d904      	bls.n	8007104 <HAL_LTDC_SetAlpha+0x24>
 80070fa:	f240 41e6 	movw	r1, #1254	; 0x4e6
 80070fe:	480f      	ldr	r0, [pc, #60]	; (800713c <HAL_LTDC_SetAlpha+0x5c>)
 8007100:	f7fa fd17 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8007104:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007108:	2002      	movs	r0, #2
 800710a:	2b01      	cmp	r3, #1
 800710c:	d015      	beq.n	800713a <HAL_LTDC_SetAlpha+0x5a>
  pLayerCfg->Alpha = Alpha;
 800710e:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007110:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007112:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007116:	4632      	mov	r2, r6
  pLayerCfg->Alpha = Alpha;
 8007118:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800711a:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 800711c:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8007120:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007122:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8007124:	64df      	str	r7, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007126:	4421      	add	r1, r4
 8007128:	f7ff fc7e 	bl	8006a28 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800712c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800712e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007130:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007132:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007136:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800713a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800713c:	0802ad58 	.word	0x0802ad58

08007140 <HAL_LTDC_SetAddress>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007140:	2a01      	cmp	r2, #1
{
 8007142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007144:	4604      	mov	r4, r0
 8007146:	460f      	mov	r7, r1
 8007148:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800714a:	d904      	bls.n	8007156 <HAL_LTDC_SetAddress+0x16>
 800714c:	f240 5111 	movw	r1, #1297	; 0x511
 8007150:	480f      	ldr	r0, [pc, #60]	; (8007190 <HAL_LTDC_SetAddress+0x50>)
 8007152:	f7fa fcee 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 8007156:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800715a:	2002      	movs	r0, #2
 800715c:	2b01      	cmp	r3, #1
 800715e:	d015      	beq.n	800718c <HAL_LTDC_SetAddress+0x4c>
  pLayerCfg->FBStartAdress = Address;
 8007160:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007162:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007164:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007168:	4632      	mov	r2, r6
  pLayerCfg->FBStartAdress = Address;
 800716a:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800716c:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 800716e:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8007172:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007174:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8007176:	65df      	str	r7, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007178:	4421      	add	r1, r4
 800717a:	f7ff fc55 	bl	8006a28 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800717e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007180:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007182:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007184:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007188:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800718e:	bf00      	nop
 8007190:	0802ad58 	.word	0x0802ad58

08007194 <HAL_LTDC_ProgramLineEvent>:
  assert_param(IS_LTDC_LIPOS(Line));
 8007194:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
{
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LIPOS(Line));
 800719e:	d304      	bcc.n	80071aa <HAL_LTDC_ProgramLineEvent+0x16>
 80071a0:	f240 5183 	movw	r1, #1411	; 0x583
 80071a4:	480d      	ldr	r0, [pc, #52]	; (80071dc <HAL_LTDC_ProgramLineEvent+0x48>)
 80071a6:	f7fa fcc4 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hltdc);
 80071aa:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80071ae:	2002      	movs	r0, #2
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d012      	beq.n	80071da <HAL_LTDC_ProgramLineEvent+0x46>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071b4:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071b6:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80071ba:	2000      	movs	r0, #0
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80071c4:	4a06      	ldr	r2, [pc, #24]	; (80071e0 <HAL_LTDC_ProgramLineEvent+0x4c>)
 80071c6:	6415      	str	r5, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80071c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80071d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 80071d2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 80071d6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	0802ad58 	.word	0x0802ad58
 80071e0:	40016800 	.word	0x40016800

080071e4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071e4:	4a02      	ldr	r2, [pc, #8]	; (80071f0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4770      	bx	lr
 80071f0:	40007000 	.word	0x40007000

080071f4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80071f4:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_PWREx_EnableOverDrive+0x68>)
{
 80071f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80071f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80071fa:	4c19      	ldr	r4, [pc, #100]	; (8007260 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80071fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007200:	641a      	str	r2, [r3, #64]	; 0x40
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007212:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007214:	f7fd fb58 	bl	80048c8 <HAL_GetTick>
 8007218:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800721a:	6863      	ldr	r3, [r4, #4]
 800721c:	03da      	lsls	r2, r3, #15
 800721e:	d50c      	bpl.n	800723a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007226:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007228:	f7fd fb4e 	bl	80048c8 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800722c:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800722e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007230:	6863      	ldr	r3, [r4, #4]
 8007232:	039b      	lsls	r3, r3, #14
 8007234:	d50a      	bpl.n	800724c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007236:	2000      	movs	r0, #0
 8007238:	e006      	b.n	8007248 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800723a:	f7fd fb45 	bl	80048c8 <HAL_GetTick>
 800723e:	1b40      	subs	r0, r0, r5
 8007240:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007244:	d9e9      	bls.n	800721a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007246:	2003      	movs	r0, #3
}
 8007248:	b003      	add	sp, #12
 800724a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800724c:	f7fd fb3c 	bl	80048c8 <HAL_GetTick>
 8007250:	1b40      	subs	r0, r0, r5
 8007252:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007256:	d9eb      	bls.n	8007230 <HAL_PWREx_EnableOverDrive+0x3c>
 8007258:	e7f5      	b.n	8007246 <HAL_PWREx_EnableOverDrive+0x52>
 800725a:	bf00      	nop
 800725c:	40023800 	.word	0x40023800
 8007260:	40007000 	.word	0x40007000

08007264 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8007264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007268:	9d06      	ldr	r5, [sp, #24]
 800726a:	4604      	mov	r4, r0
 800726c:	460f      	mov	r7, r1
 800726e:	4616      	mov	r6, r2
 8007270:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	688a      	ldr	r2, [r1, #8]
 8007276:	423a      	tst	r2, r7
 8007278:	bf14      	ite	ne
 800727a:	2201      	movne	r2, #1
 800727c:	2200      	moveq	r2, #0
 800727e:	42b2      	cmp	r2, r6
 8007280:	d102      	bne.n	8007288 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007282:	2000      	movs	r0, #0
}
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007288:	1c6b      	adds	r3, r5, #1
 800728a:	d0f3      	beq.n	8007274 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800728c:	b94d      	cbnz	r5, 80072a2 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800728e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007290:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007292:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007296:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	6463      	str	r3, [r4, #68]	; 0x44
 800729e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80072a2:	f7fd fb11 	bl	80048c8 <HAL_GetTick>
 80072a6:	eba0 0008 	sub.w	r0, r0, r8
 80072aa:	4285      	cmp	r5, r0
 80072ac:	d2e1      	bcs.n	8007272 <QSPI_WaitFlagStateUntilTimeout+0xe>
 80072ae:	e7ee      	b.n	800728e <QSPI_WaitFlagStateUntilTimeout+0x2a>

080072b0 <HAL_QSPI_Init>:
{
 80072b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80072b4:	f7fd fb08 	bl	80048c8 <HAL_GetTick>
 80072b8:	4605      	mov	r5, r0
  if(hqspi == NULL)
 80072ba:	2c00      	cmp	r4, #0
 80072bc:	f000 80a2 	beq.w	8007404 <HAL_QSPI_Init+0x154>
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 80072c0:	6822      	ldr	r2, [r4, #0]
 80072c2:	4b52      	ldr	r3, [pc, #328]	; (800740c <HAL_QSPI_Init+0x15c>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d004      	beq.n	80072d2 <HAL_QSPI_Init+0x22>
 80072c8:	f44f 7198 	mov.w	r1, #304	; 0x130
 80072cc:	4850      	ldr	r0, [pc, #320]	; (8007410 <HAL_QSPI_Init+0x160>)
 80072ce:	f7fa fc30 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	2bff      	cmp	r3, #255	; 0xff
 80072d6:	d904      	bls.n	80072e2 <HAL_QSPI_Init+0x32>
 80072d8:	f240 1131 	movw	r1, #305	; 0x131
 80072dc:	484c      	ldr	r0, [pc, #304]	; (8007410 <HAL_QSPI_Init+0x160>)
 80072de:	f7fa fc28 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	2b1f      	cmp	r3, #31
 80072e8:	d904      	bls.n	80072f4 <HAL_QSPI_Init+0x44>
 80072ea:	f44f 7199 	mov.w	r1, #306	; 0x132
 80072ee:	4848      	ldr	r0, [pc, #288]	; (8007410 <HAL_QSPI_Init+0x160>)
 80072f0:	f7fa fc1f 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 80072f4:	68e3      	ldr	r3, [r4, #12]
 80072f6:	f033 0310 	bics.w	r3, r3, #16
 80072fa:	d004      	beq.n	8007306 <HAL_QSPI_Init+0x56>
 80072fc:	f240 1133 	movw	r1, #307	; 0x133
 8007300:	4843      	ldr	r0, [pc, #268]	; (8007410 <HAL_QSPI_Init+0x160>)
 8007302:	f7fa fc16 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 8007306:	6923      	ldr	r3, [r4, #16]
 8007308:	2b1f      	cmp	r3, #31
 800730a:	d904      	bls.n	8007316 <HAL_QSPI_Init+0x66>
 800730c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007310:	483f      	ldr	r0, [pc, #252]	; (8007410 <HAL_QSPI_Init+0x160>)
 8007312:	f7fa fc0e 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 8007316:	6963      	ldr	r3, [r4, #20]
 8007318:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800731c:	d007      	beq.n	800732e <HAL_QSPI_Init+0x7e>
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d004      	beq.n	800732e <HAL_QSPI_Init+0x7e>
 8007324:	f240 1135 	movw	r1, #309	; 0x135
 8007328:	4839      	ldr	r0, [pc, #228]	; (8007410 <HAL_QSPI_Init+0x160>)
 800732a:	f7fa fc02 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 800732e:	69a3      	ldr	r3, [r4, #24]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d904      	bls.n	800733e <HAL_QSPI_Init+0x8e>
 8007334:	f44f 719b 	mov.w	r1, #310	; 0x136
 8007338:	4835      	ldr	r0, [pc, #212]	; (8007410 <HAL_QSPI_Init+0x160>)
 800733a:	f7fa fbfa 	bl	8001b32 <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 800733e:	6a23      	ldr	r3, [r4, #32]
 8007340:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007344:	d004      	beq.n	8007350 <HAL_QSPI_Init+0xa0>
 8007346:	f240 1137 	movw	r1, #311	; 0x137
 800734a:	4831      	ldr	r0, [pc, #196]	; (8007410 <HAL_QSPI_Init+0x160>)
 800734c:	f7fa fbf1 	bl	8001b32 <assert_failed>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 8007350:	6a23      	ldr	r3, [r4, #32]
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d008      	beq.n	8007368 <HAL_QSPI_Init+0xb8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 8007356:	69e3      	ldr	r3, [r4, #28]
 8007358:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800735c:	d004      	beq.n	8007368 <HAL_QSPI_Init+0xb8>
 800735e:	f240 113b 	movw	r1, #315	; 0x13b
 8007362:	482b      	ldr	r0, [pc, #172]	; (8007410 <HAL_QSPI_Init+0x160>)
 8007364:	f7fa fbe5 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hqspi);
 8007368:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800736c:	2b01      	cmp	r3, #1
 800736e:	d04b      	beq.n	8007408 <HAL_QSPI_Init+0x158>
 8007370:	2301      	movs	r3, #1
 8007372:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007376:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800737a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800737e:	b93b      	cbnz	r3, 8007390 <HAL_QSPI_Init+0xe0>
    hqspi->Lock = HAL_UNLOCKED;
 8007380:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007384:	4620      	mov	r0, r4
 8007386:	f7fa fbf1 	bl	8001b6c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800738a:	f241 3388 	movw	r3, #5000	; 0x1388
 800738e:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007390:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007392:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007394:	68a2      	ldr	r2, [r4, #8]
 8007396:	680b      	ldr	r3, [r1, #0]
 8007398:	3a01      	subs	r2, #1
 800739a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800739e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80073a2:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80073a4:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80073a6:	2120      	movs	r1, #32
 80073a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	462b      	mov	r3, r5
 80073ae:	f7ff ff59 	bl	8007264 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80073b2:	bb10      	cbnz	r0, 80073fa <HAL_QSPI_Init+0x14a>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	69e5      	ldr	r5, [r4, #28]
 80073b8:	68e3      	ldr	r3, [r4, #12]
 80073ba:	6811      	ldr	r1, [r2, #0]
 80073bc:	432b      	orrs	r3, r5
 80073be:	6a25      	ldr	r5, [r4, #32]
 80073c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80073c4:	432b      	orrs	r3, r5
 80073c6:	6865      	ldr	r5, [r4, #4]
 80073c8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80073cc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80073d0:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80073d2:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80073d4:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80073d6:	6963      	ldr	r3, [r4, #20]
 80073d8:	6855      	ldr	r5, [r2, #4]
 80073da:	430b      	orrs	r3, r1
 80073dc:	6921      	ldr	r1, [r4, #16]
 80073de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80073e2:	490c      	ldr	r1, [pc, #48]	; (8007414 <HAL_QSPI_Init+0x164>)
 80073e4:	4029      	ands	r1, r5
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80073f2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80073f4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80073f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80073fa:	2300      	movs	r3, #0
 80073fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007400:	b003      	add	sp, #12
 8007402:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007404:	2001      	movs	r0, #1
 8007406:	e7fb      	b.n	8007400 <HAL_QSPI_Init+0x150>
  __HAL_LOCK(hqspi);
 8007408:	2002      	movs	r0, #2
 800740a:	e7f9      	b.n	8007400 <HAL_QSPI_Init+0x150>
 800740c:	a0001000 	.word	0xa0001000
 8007410:	0802ad97 	.word	0x0802ad97
 8007414:	ffe0f8fe 	.word	0xffe0f8fe

08007418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800741c:	4604      	mov	r4, r0
 800741e:	b918      	cbnz	r0, 8007428 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8007420:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8007422:	b002      	add	sp, #8
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007428:	6803      	ldr	r3, [r0, #0]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d904      	bls.n	8007438 <HAL_RCC_OscConfig+0x20>
 800742e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007432:	48a5      	ldr	r0, [pc, #660]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007434:	f7fa fb7d 	bl	8001b32 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07d8      	lsls	r0, r3, #31
 800743c:	d418      	bmi.n	8007470 <HAL_RCC_OscConfig+0x58>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	0799      	lsls	r1, r3, #30
 8007442:	d472      	bmi.n	800752a <HAL_RCC_OscConfig+0x112>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	0719      	lsls	r1, r3, #28
 8007448:	f100 80c8 	bmi.w	80075dc <HAL_RCC_OscConfig+0x1c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	075a      	lsls	r2, r3, #29
 8007450:	f100 80f1 	bmi.w	8007636 <HAL_RCC_OscConfig+0x21e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007454:	69a3      	ldr	r3, [r4, #24]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d904      	bls.n	8007464 <HAL_RCC_OscConfig+0x4c>
 800745a:	f240 214b 	movw	r1, #587	; 0x24b
 800745e:	489a      	ldr	r0, [pc, #616]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007460:	f7fa fb67 	bl	8001b32 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007464:	69a2      	ldr	r2, [r4, #24]
 8007466:	2a00      	cmp	r2, #0
 8007468:	f040 8160 	bne.w	800772c <HAL_RCC_OscConfig+0x314>
  return HAL_OK;
 800746c:	2000      	movs	r0, #0
 800746e:	e7d8      	b.n	8007422 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007476:	d007      	beq.n	8007488 <HAL_RCC_OscConfig+0x70>
 8007478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800747c:	d004      	beq.n	8007488 <HAL_RCC_OscConfig+0x70>
 800747e:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8007482:	4891      	ldr	r0, [pc, #580]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007484:	f7fa fb55 	bl	8001b32 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007488:	4b90      	ldr	r3, [pc, #576]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	f002 020c 	and.w	r2, r2, #12
 8007490:	2a04      	cmp	r2, #4
 8007492:	d007      	beq.n	80074a4 <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	f002 020c 	and.w	r2, r2, #12
 800749a:	2a08      	cmp	r2, #8
 800749c:	d10a      	bne.n	80074b4 <HAL_RCC_OscConfig+0x9c>
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	025a      	lsls	r2, r3, #9
 80074a2:	d507      	bpl.n	80074b4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a4:	4b89      	ldr	r3, [pc, #548]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	039b      	lsls	r3, r3, #14
 80074aa:	d5c8      	bpl.n	800743e <HAL_RCC_OscConfig+0x26>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1c5      	bne.n	800743e <HAL_RCC_OscConfig+0x26>
 80074b2:	e7b5      	b.n	8007420 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	4d85      	ldr	r5, [pc, #532]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d111      	bne.n	80074e2 <HAL_RCC_OscConfig+0xca>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074c6:	f7fd f9ff 	bl	80048c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ca:	4d80      	ldr	r5, [pc, #512]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 80074cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ce:	682b      	ldr	r3, [r5, #0]
 80074d0:	039f      	lsls	r7, r3, #14
 80074d2:	d4b4      	bmi.n	800743e <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074d4:	f7fd f9f8 	bl	80048c8 <HAL_GetTick>
 80074d8:	1b80      	subs	r0, r0, r6
 80074da:	2864      	cmp	r0, #100	; 0x64
 80074dc:	d9f7      	bls.n	80074ce <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 80074de:	2003      	movs	r0, #3
 80074e0:	e79f      	b.n	8007422 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074e2:	b99b      	cbnz	r3, 800750c <HAL_RCC_OscConfig+0xf4>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074f4:	f7fd f9e8 	bl	80048c8 <HAL_GetTick>
 80074f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	0398      	lsls	r0, r3, #14
 80074fe:	d59e      	bpl.n	800743e <HAL_RCC_OscConfig+0x26>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007500:	f7fd f9e2 	bl	80048c8 <HAL_GetTick>
 8007504:	1b80      	subs	r0, r0, r6
 8007506:	2864      	cmp	r0, #100	; 0x64
 8007508:	d9f7      	bls.n	80074fa <HAL_RCC_OscConfig+0xe2>
 800750a:	e7e8      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	d103      	bne.n	800751c <HAL_RCC_OscConfig+0x104>
 8007514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	e7d0      	b.n	80074be <HAL_RCC_OscConfig+0xa6>
 800751c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007528:	e7cc      	b.n	80074c4 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800752a:	68e3      	ldr	r3, [r4, #12]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d904      	bls.n	800753a <HAL_RCC_OscConfig+0x122>
 8007530:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007534:	4864      	ldr	r0, [pc, #400]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007536:	f7fa fafc 	bl	8001b32 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	2b1f      	cmp	r3, #31
 800753e:	d904      	bls.n	800754a <HAL_RCC_OscConfig+0x132>
 8007540:	f240 119d 	movw	r1, #413	; 0x19d
 8007544:	4860      	ldr	r0, [pc, #384]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007546:	f7fa faf4 	bl	8001b32 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800754a:	4b60      	ldr	r3, [pc, #384]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	f012 0f0c 	tst.w	r2, #12
 8007552:	d007      	beq.n	8007564 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	f002 020c 	and.w	r2, r2, #12
 800755a:	2a08      	cmp	r2, #8
 800755c:	d112      	bne.n	8007584 <HAL_RCC_OscConfig+0x16c>
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	0259      	lsls	r1, r3, #9
 8007562:	d40f      	bmi.n	8007584 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007564:	4b59      	ldr	r3, [pc, #356]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	0792      	lsls	r2, r2, #30
 800756a:	d503      	bpl.n	8007574 <HAL_RCC_OscConfig+0x15c>
 800756c:	68e2      	ldr	r2, [r4, #12]
 800756e:	2a01      	cmp	r2, #1
 8007570:	f47f af56 	bne.w	8007420 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	6921      	ldr	r1, [r4, #16]
 8007578:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800757c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007580:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007582:	e75f      	b.n	8007444 <HAL_RCC_OscConfig+0x2c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007584:	68e3      	ldr	r3, [r4, #12]
 8007586:	4d51      	ldr	r5, [pc, #324]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 8007588:	b1bb      	cbz	r3, 80075ba <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007592:	f7fd f999 	bl	80048c8 <HAL_GetTick>
 8007596:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	079f      	lsls	r7, r3, #30
 800759c:	d507      	bpl.n	80075ae <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	6922      	ldr	r2, [r4, #16]
 80075a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80075a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	e74a      	b.n	8007444 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075ae:	f7fd f98b 	bl	80048c8 <HAL_GetTick>
 80075b2:	1b80      	subs	r0, r0, r6
 80075b4:	2802      	cmp	r0, #2
 80075b6:	d9ef      	bls.n	8007598 <HAL_RCC_OscConfig+0x180>
 80075b8:	e791      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 80075ba:	682b      	ldr	r3, [r5, #0]
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80075c2:	f7fd f981 	bl	80048c8 <HAL_GetTick>
 80075c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	0798      	lsls	r0, r3, #30
 80075cc:	f57f af3a 	bpl.w	8007444 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d0:	f7fd f97a 	bl	80048c8 <HAL_GetTick>
 80075d4:	1b80      	subs	r0, r0, r6
 80075d6:	2802      	cmp	r0, #2
 80075d8:	d9f6      	bls.n	80075c8 <HAL_RCC_OscConfig+0x1b0>
 80075da:	e780      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80075dc:	6963      	ldr	r3, [r4, #20]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d904      	bls.n	80075ec <HAL_RCC_OscConfig+0x1d4>
 80075e2:	f240 11dd 	movw	r1, #477	; 0x1dd
 80075e6:	4838      	ldr	r0, [pc, #224]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 80075e8:	f7fa faa3 	bl	8001b32 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075ec:	6963      	ldr	r3, [r4, #20]
 80075ee:	4d37      	ldr	r5, [pc, #220]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 80075f0:	b183      	cbz	r3, 8007614 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80075f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80075fa:	f7fd f965 	bl	80048c8 <HAL_GetTick>
 80075fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007600:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007602:	079b      	lsls	r3, r3, #30
 8007604:	f53f af22 	bmi.w	800744c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007608:	f7fd f95e 	bl	80048c8 <HAL_GetTick>
 800760c:	1b80      	subs	r0, r0, r6
 800760e:	2802      	cmp	r0, #2
 8007610:	d9f6      	bls.n	8007600 <HAL_RCC_OscConfig+0x1e8>
 8007612:	e764      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8007614:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800761c:	f7fd f954 	bl	80048c8 <HAL_GetTick>
 8007620:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007622:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007624:	079f      	lsls	r7, r3, #30
 8007626:	f57f af11 	bpl.w	800744c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800762a:	f7fd f94d 	bl	80048c8 <HAL_GetTick>
 800762e:	1b80      	subs	r0, r0, r6
 8007630:	2802      	cmp	r0, #2
 8007632:	d9f6      	bls.n	8007622 <HAL_RCC_OscConfig+0x20a>
 8007634:	e753      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d906      	bls.n	800764a <HAL_RCC_OscConfig+0x232>
 800763c:	2b05      	cmp	r3, #5
 800763e:	d004      	beq.n	800764a <HAL_RCC_OscConfig+0x232>
 8007640:	f240 2107 	movw	r1, #519	; 0x207
 8007644:	4820      	ldr	r0, [pc, #128]	; (80076c8 <HAL_RCC_OscConfig+0x2b0>)
 8007646:	f7fa fa74 	bl	8001b32 <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 800764c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764e:	00d5      	lsls	r5, r2, #3
 8007650:	d427      	bmi.n	80076a2 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8007654:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800765a:	641a      	str	r2, [r3, #64]	; 0x40
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007666:	4d1a      	ldr	r5, [pc, #104]	; (80076d0 <HAL_RCC_OscConfig+0x2b8>)
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	05d8      	lsls	r0, r3, #23
 800766c:	d51b      	bpl.n	80076a6 <HAL_RCC_OscConfig+0x28e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800766e:	68a3      	ldr	r3, [r4, #8]
 8007670:	4d16      	ldr	r5, [pc, #88]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 8007672:	2b01      	cmp	r3, #1
 8007674:	d12e      	bne.n	80076d4 <HAL_RCC_OscConfig+0x2bc>
 8007676:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800767e:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007682:	f7fd f921 	bl	80048c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007686:	4f11      	ldr	r7, [pc, #68]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
      tickstart = HAL_GetTick();
 8007688:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800768c:	079a      	lsls	r2, r3, #30
 800768e:	d546      	bpl.n	800771e <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8007690:	2e00      	cmp	r6, #0
 8007692:	f43f aedf 	beq.w	8007454 <HAL_RCC_OscConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007696:	4a0d      	ldr	r2, [pc, #52]	; (80076cc <HAL_RCC_OscConfig+0x2b4>)
 8007698:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800769a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800769e:	6413      	str	r3, [r2, #64]	; 0x40
 80076a0:	e6d8      	b.n	8007454 <HAL_RCC_OscConfig+0x3c>
  FlagStatus pwrclkchanged = RESET;
 80076a2:	2600      	movs	r6, #0
 80076a4:	e7df      	b.n	8007666 <HAL_RCC_OscConfig+0x24e>
      PWR->CR1 |= PWR_CR1_DBP;
 80076a6:	682b      	ldr	r3, [r5, #0]
 80076a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ac:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80076ae:	f7fd f90b 	bl	80048c8 <HAL_GetTick>
 80076b2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	05d9      	lsls	r1, r3, #23
 80076b8:	d4d9      	bmi.n	800766e <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076ba:	f7fd f905 	bl	80048c8 <HAL_GetTick>
 80076be:	1bc0      	subs	r0, r0, r7
 80076c0:	2864      	cmp	r0, #100	; 0x64
 80076c2:	d9f7      	bls.n	80076b4 <HAL_RCC_OscConfig+0x29c>
 80076c4:	e70b      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
 80076c6:	bf00      	nop
 80076c8:	0802add6 	.word	0x0802add6
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d4:	b9ab      	cbnz	r3, 8007702 <HAL_RCC_OscConfig+0x2ea>
 80076d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	672b      	str	r3, [r5, #112]	; 0x70
 80076e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80076e4:	f023 0304 	bic.w	r3, r3, #4
 80076e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80076ea:	f7fd f8ed 	bl	80048c8 <HAL_GetTick>
 80076ee:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80076f2:	079b      	lsls	r3, r3, #30
 80076f4:	d5cc      	bpl.n	8007690 <HAL_RCC_OscConfig+0x278>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076f6:	f7fd f8e7 	bl	80048c8 <HAL_GetTick>
 80076fa:	1bc0      	subs	r0, r0, r7
 80076fc:	4540      	cmp	r0, r8
 80076fe:	d9f7      	bls.n	80076f0 <HAL_RCC_OscConfig+0x2d8>
 8007700:	e6ed      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007702:	2b05      	cmp	r3, #5
 8007704:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007706:	d103      	bne.n	8007710 <HAL_RCC_OscConfig+0x2f8>
 8007708:	f043 0304 	orr.w	r3, r3, #4
 800770c:	672b      	str	r3, [r5, #112]	; 0x70
 800770e:	e7b2      	b.n	8007676 <HAL_RCC_OscConfig+0x25e>
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	672b      	str	r3, [r5, #112]	; 0x70
 8007716:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007718:	f023 0304 	bic.w	r3, r3, #4
 800771c:	e7ae      	b.n	800767c <HAL_RCC_OscConfig+0x264>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800771e:	f7fd f8d3 	bl	80048c8 <HAL_GetTick>
 8007722:	eba0 0008 	sub.w	r0, r0, r8
 8007726:	42a8      	cmp	r0, r5
 8007728:	d9af      	bls.n	800768a <HAL_RCC_OscConfig+0x272>
 800772a:	e6d8      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800772c:	4d3f      	ldr	r5, [pc, #252]	; (800782c <HAL_RCC_OscConfig+0x414>)
 800772e:	68ab      	ldr	r3, [r5, #8]
 8007730:	f003 030c 	and.w	r3, r3, #12
 8007734:	2b08      	cmp	r3, #8
 8007736:	f43f ae73 	beq.w	8007420 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800773a:	2a02      	cmp	r2, #2
 800773c:	d165      	bne.n	800780a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800773e:	69e3      	ldr	r3, [r4, #28]
 8007740:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8007744:	d004      	beq.n	8007750 <HAL_RCC_OscConfig+0x338>
 8007746:	f44f 7115 	mov.w	r1, #596	; 0x254
 800774a:	4839      	ldr	r0, [pc, #228]	; (8007830 <HAL_RCC_OscConfig+0x418>)
 800774c:	f7fa f9f1 	bl	8001b32 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007750:	6a23      	ldr	r3, [r4, #32]
 8007752:	3b02      	subs	r3, #2
 8007754:	2b3d      	cmp	r3, #61	; 0x3d
 8007756:	d904      	bls.n	8007762 <HAL_RCC_OscConfig+0x34a>
 8007758:	f240 2155 	movw	r1, #597	; 0x255
 800775c:	4834      	ldr	r0, [pc, #208]	; (8007830 <HAL_RCC_OscConfig+0x418>)
 800775e:	f7fa f9e8 	bl	8001b32 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007764:	3b32      	subs	r3, #50	; 0x32
 8007766:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800776a:	d904      	bls.n	8007776 <HAL_RCC_OscConfig+0x35e>
 800776c:	f240 2156 	movw	r1, #598	; 0x256
 8007770:	482f      	ldr	r0, [pc, #188]	; (8007830 <HAL_RCC_OscConfig+0x418>)
 8007772:	f7fa f9de 	bl	8001b32 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007776:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007778:	2a08      	cmp	r2, #8
 800777a:	d804      	bhi.n	8007786 <HAL_RCC_OscConfig+0x36e>
 800777c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8007780:	40d3      	lsrs	r3, r2
 8007782:	07d8      	lsls	r0, r3, #31
 8007784:	d404      	bmi.n	8007790 <HAL_RCC_OscConfig+0x378>
 8007786:	f240 2157 	movw	r1, #599	; 0x257
 800778a:	4829      	ldr	r0, [pc, #164]	; (8007830 <HAL_RCC_OscConfig+0x418>)
 800778c:	f7fa f9d1 	bl	8001b32 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007792:	3b02      	subs	r3, #2
 8007794:	2b0d      	cmp	r3, #13
 8007796:	d904      	bls.n	80077a2 <HAL_RCC_OscConfig+0x38a>
 8007798:	f44f 7116 	mov.w	r1, #600	; 0x258
 800779c:	4824      	ldr	r0, [pc, #144]	; (8007830 <HAL_RCC_OscConfig+0x418>)
 800779e:	f7fa f9c8 	bl	8001b32 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80077a2:	4d22      	ldr	r5, [pc, #136]	; (800782c <HAL_RCC_OscConfig+0x414>)
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80077ac:	f7fd f88c 	bl	80048c8 <HAL_GetTick>
 80077b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	0199      	lsls	r1, r3, #6
 80077b6:	d422      	bmi.n	80077fe <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077b8:	6a22      	ldr	r2, [r4, #32]
 80077ba:	69e3      	ldr	r3, [r4, #28]
 80077bc:	4313      	orrs	r3, r2
 80077be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80077c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80077ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80077ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077d0:	4c16      	ldr	r4, [pc, #88]	; (800782c <HAL_RCC_OscConfig+0x414>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077d2:	0852      	lsrs	r2, r2, #1
 80077d4:	3a01      	subs	r2, #1
 80077d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077da:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80077e4:	f7fd f870 	bl	80048c8 <HAL_GetTick>
 80077e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	019a      	lsls	r2, r3, #6
 80077ee:	f53f ae3d 	bmi.w	800746c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077f2:	f7fd f869 	bl	80048c8 <HAL_GetTick>
 80077f6:	1b40      	subs	r0, r0, r5
 80077f8:	2802      	cmp	r0, #2
 80077fa:	d9f6      	bls.n	80077ea <HAL_RCC_OscConfig+0x3d2>
 80077fc:	e66f      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077fe:	f7fd f863 	bl	80048c8 <HAL_GetTick>
 8007802:	1b80      	subs	r0, r0, r6
 8007804:	2802      	cmp	r0, #2
 8007806:	d9d4      	bls.n	80077b2 <HAL_RCC_OscConfig+0x39a>
 8007808:	e669      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007810:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007812:	f7fd f859 	bl	80048c8 <HAL_GetTick>
 8007816:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	019b      	lsls	r3, r3, #6
 800781c:	f57f ae26 	bpl.w	800746c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007820:	f7fd f852 	bl	80048c8 <HAL_GetTick>
 8007824:	1b00      	subs	r0, r0, r4
 8007826:	2802      	cmp	r0, #2
 8007828:	d9f6      	bls.n	8007818 <HAL_RCC_OscConfig+0x400>
 800782a:	e658      	b.n	80074de <HAL_RCC_OscConfig+0xc6>
 800782c:	40023800 	.word	0x40023800
 8007830:	0802add6 	.word	0x0802add6

08007834 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007834:	4913      	ldr	r1, [pc, #76]	; (8007884 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8007836:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007838:	688b      	ldr	r3, [r1, #8]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b04      	cmp	r3, #4
 8007840:	d003      	beq.n	800784a <HAL_RCC_GetSysClockFreq+0x16>
 8007842:	2b08      	cmp	r3, #8
 8007844:	d003      	beq.n	800784e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007846:	4810      	ldr	r0, [pc, #64]	; (8007888 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007848:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800784a:	4810      	ldr	r0, [pc, #64]	; (800788c <HAL_RCC_GetSysClockFreq+0x58>)
 800784c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800784e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007850:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007852:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007854:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007858:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007860:	bf1a      	itte	ne
 8007862:	480a      	ldrne	r0, [pc, #40]	; (800788c <HAL_RCC_GetSysClockFreq+0x58>)
 8007864:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007866:	4808      	ldreq	r0, [pc, #32]	; (8007888 <HAL_RCC_GetSysClockFreq+0x54>)
 8007868:	fba1 0100 	umull	r0, r1, r1, r0
 800786c:	f7f9 fa00 	bl	8000c70 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8007870:	4b04      	ldr	r3, [pc, #16]	; (8007884 <HAL_RCC_GetSysClockFreq+0x50>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007878:	3301      	adds	r3, #1
 800787a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800787c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007880:	bd08      	pop	{r3, pc}
 8007882:	bf00      	nop
 8007884:	40023800 	.word	0x40023800
 8007888:	00f42400 	.word	0x00f42400
 800788c:	017d7840 	.word	0x017d7840

08007890 <HAL_RCC_ClockConfig>:
{
 8007890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8007896:	4604      	mov	r4, r0
 8007898:	b910      	cbnz	r0, 80078a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800789a:	2001      	movs	r0, #1
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80078a0:	6803      	ldr	r3, [r0, #0]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	2b0e      	cmp	r3, #14
 80078a6:	d904      	bls.n	80078b2 <HAL_RCC_ClockConfig+0x22>
 80078a8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80078ac:	486f      	ldr	r0, [pc, #444]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 80078ae:	f7fa f940 	bl	8001b32 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80078b2:	2d0f      	cmp	r5, #15
 80078b4:	d904      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x30>
 80078b6:	f240 21cb 	movw	r1, #715	; 0x2cb
 80078ba:	486c      	ldr	r0, [pc, #432]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 80078bc:	f7fa f939 	bl	8001b32 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078c0:	4a6b      	ldr	r2, [pc, #428]	; (8007a70 <HAL_RCC_ClockConfig+0x1e0>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	429d      	cmp	r5, r3
 80078ca:	d83d      	bhi.n	8007948 <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	0796      	lsls	r6, r2, #30
 80078d0:	d445      	bmi.n	800795e <HAL_RCC_ClockConfig+0xce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	07d9      	lsls	r1, r3, #31
 80078d6:	d46f      	bmi.n	80079b8 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078d8:	4a65      	ldr	r2, [pc, #404]	; (8007a70 <HAL_RCC_ClockConfig+0x1e0>)
 80078da:	6813      	ldr	r3, [r2, #0]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	429d      	cmp	r5, r3
 80078e2:	f0c0 809d 	bcc.w	8007a20 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	075a      	lsls	r2, r3, #29
 80078ea:	f100 80a5 	bmi.w	8007a38 <HAL_RCC_ClockConfig+0x1a8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	071b      	lsls	r3, r3, #28
 80078f2:	d518      	bpl.n	8007926 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80078fa:	d00c      	beq.n	8007916 <HAL_RCC_ClockConfig+0x86>
 80078fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007900:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007904:	d007      	beq.n	8007916 <HAL_RCC_ClockConfig+0x86>
 8007906:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800790a:	d004      	beq.n	8007916 <HAL_RCC_ClockConfig+0x86>
 800790c:	f240 313a 	movw	r1, #826	; 0x33a
 8007910:	4856      	ldr	r0, [pc, #344]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 8007912:	f7fa f90e 	bl	8001b32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007916:	4a57      	ldr	r2, [pc, #348]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 8007918:	6921      	ldr	r1, [r4, #16]
 800791a:	6893      	ldr	r3, [r2, #8]
 800791c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007920:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007924:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007926:	f7ff ff85 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800792a:	4b52      	ldr	r3, [pc, #328]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 800792c:	4a52      	ldr	r2, [pc, #328]	; (8007a78 <HAL_RCC_ClockConfig+0x1e8>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007934:	5cd3      	ldrb	r3, [r2, r3]
 8007936:	40d8      	lsrs	r0, r3
 8007938:	4b50      	ldr	r3, [pc, #320]	; (8007a7c <HAL_RCC_ClockConfig+0x1ec>)
 800793a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800793c:	2000      	movs	r0, #0
 800793e:	f7fa fbd1 	bl	80020e4 <HAL_InitTick>
  return HAL_OK;
 8007942:	2000      	movs	r0, #0
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007948:	6813      	ldr	r3, [r2, #0]
 800794a:	f023 030f 	bic.w	r3, r3, #15
 800794e:	432b      	orrs	r3, r5
 8007950:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	f003 030f 	and.w	r3, r3, #15
 8007958:	429d      	cmp	r5, r3
 800795a:	d19e      	bne.n	800789a <HAL_RCC_ClockConfig+0xa>
 800795c:	e7b6      	b.n	80078cc <HAL_RCC_ClockConfig+0x3c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800795e:	f012 0f04 	tst.w	r2, #4
 8007962:	4b44      	ldr	r3, [pc, #272]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 8007964:	d003      	beq.n	800796e <HAL_RCC_ClockConfig+0xde>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800796c:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800796e:	0710      	lsls	r0, r2, #28
 8007970:	d503      	bpl.n	800797a <HAL_RCC_ClockConfig+0xea>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8007978:	609a      	str	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8007980:	d012      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x118>
 8007982:	f023 0220 	bic.w	r2, r3, #32
 8007986:	2a90      	cmp	r2, #144	; 0x90
 8007988:	d00e      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x118>
 800798a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800798e:	2aa0      	cmp	r2, #160	; 0xa0
 8007990:	d00a      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x118>
 8007992:	f023 0210 	bic.w	r2, r3, #16
 8007996:	2ac0      	cmp	r2, #192	; 0xc0
 8007998:	d006      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x118>
 800799a:	2bf0      	cmp	r3, #240	; 0xf0
 800799c:	d004      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x118>
 800799e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079a2:	4832      	ldr	r0, [pc, #200]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 80079a4:	f7fa f8c5 	bl	8001b32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a8:	4a32      	ldr	r2, [pc, #200]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 80079aa:	68a1      	ldr	r1, [r4, #8]
 80079ac:	6893      	ldr	r3, [r2, #8]
 80079ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079b2:	430b      	orrs	r3, r1
 80079b4:	6093      	str	r3, [r2, #8]
 80079b6:	e78c      	b.n	80078d2 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d904      	bls.n	80079c8 <HAL_RCC_ClockConfig+0x138>
 80079be:	f240 21f6 	movw	r1, #758	; 0x2f6
 80079c2:	482a      	ldr	r0, [pc, #168]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 80079c4:	f7fa f8b5 	bl	8001b32 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c8:	6861      	ldr	r1, [r4, #4]
 80079ca:	4b2a      	ldr	r3, [pc, #168]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 80079cc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ce:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079d0:	d11e      	bne.n	8007a10 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d6:	f43f af60 	beq.w	800789a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079da:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079dc:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079e0:	4e24      	ldr	r6, [pc, #144]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079e2:	f022 0203 	bic.w	r2, r2, #3
 80079e6:	430a      	orrs	r2, r1
 80079e8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80079ea:	f7fc ff6d 	bl	80048c8 <HAL_GetTick>
 80079ee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f0:	68b3      	ldr	r3, [r6, #8]
 80079f2:	6862      	ldr	r2, [r4, #4]
 80079f4:	f003 030c 	and.w	r3, r3, #12
 80079f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80079fc:	f43f af6c 	beq.w	80078d8 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a00:	f7fc ff62 	bl	80048c8 <HAL_GetTick>
 8007a04:	1bc0      	subs	r0, r0, r7
 8007a06:	4540      	cmp	r0, r8
 8007a08:	d9f2      	bls.n	80079f0 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007a0a:	2003      	movs	r0, #3
}
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a10:	2902      	cmp	r1, #2
 8007a12:	d102      	bne.n	8007a1a <HAL_RCC_ClockConfig+0x18a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a14:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007a18:	e7dd      	b.n	80079d6 <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a1a:	f012 0f02 	tst.w	r2, #2
 8007a1e:	e7da      	b.n	80079d6 <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a20:	6813      	ldr	r3, [r2, #0]
 8007a22:	f023 030f 	bic.w	r3, r3, #15
 8007a26:	432b      	orrs	r3, r5
 8007a28:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	429d      	cmp	r5, r3
 8007a32:	f47f af32 	bne.w	800789a <HAL_RCC_ClockConfig+0xa>
 8007a36:	e756      	b.n	80078e6 <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007a38:	68e3      	ldr	r3, [r4, #12]
 8007a3a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8007a3e:	d00c      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x1ca>
 8007a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a44:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007a48:	d007      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x1ca>
 8007a4a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007a4e:	d004      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x1ca>
 8007a50:	f240 3133 	movw	r1, #819	; 0x333
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <HAL_RCC_ClockConfig+0x1dc>)
 8007a56:	f7fa f86c 	bl	8001b32 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a5a:	4a06      	ldr	r2, [pc, #24]	; (8007a74 <HAL_RCC_ClockConfig+0x1e4>)
 8007a5c:	68e1      	ldr	r1, [r4, #12]
 8007a5e:	6893      	ldr	r3, [r2, #8]
 8007a60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007a64:	430b      	orrs	r3, r1
 8007a66:	6093      	str	r3, [r2, #8]
 8007a68:	e741      	b.n	80078ee <HAL_RCC_ClockConfig+0x5e>
 8007a6a:	bf00      	nop
 8007a6c:	0802add6 	.word	0x0802add6
 8007a70:	40023c00 	.word	0x40023c00
 8007a74:	40023800 	.word	0x40023800
 8007a78:	0802aa89 	.word	0x0802aa89
 8007a7c:	200000b8 	.word	0x200000b8

08007a80 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a80:	4b04      	ldr	r3, [pc, #16]	; (8007a94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007a82:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007a8a:	5cd3      	ldrb	r3, [r2, r3]
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a8e:	6810      	ldr	r0, [r2, #0]
}
 8007a90:	40d8      	lsrs	r0, r3
 8007a92:	4770      	bx	lr
 8007a94:	40023800 	.word	0x40023800
 8007a98:	0802aa99 	.word	0x0802aa99
 8007a9c:	200000b8 	.word	0x200000b8

08007aa0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007aa2:	4a05      	ldr	r2, [pc, #20]	; (8007ab8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	4a03      	ldr	r2, [pc, #12]	; (8007abc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007aae:	6810      	ldr	r0, [r2, #0]
}
 8007ab0:	40d8      	lsrs	r0, r3
 8007ab2:	4770      	bx	lr
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	0802aa99 	.word	0x0802aa99
 8007abc:	200000b8 	.word	0x200000b8

08007ac0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ac0:	230f      	movs	r3, #15
 8007ac2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	; (8007af4 <HAL_RCC_GetClockConfig+0x34>)
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	f002 0203 	and.w	r2, r2, #3
 8007acc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007ad4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8007adc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	08db      	lsrs	r3, r3, #3
 8007ae2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007ae6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ae8:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <HAL_RCC_GetClockConfig+0x38>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	600b      	str	r3, [r1, #0]
 8007af2:	4770      	bx	lr
 8007af4:	40023800 	.word	0x40023800
 8007af8:	40023c00 	.word	0x40023c00

08007afc <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007afc:	6803      	ldr	r3, [r0, #0]
 8007afe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007b02:	f023 0306 	bic.w	r3, r3, #6
{
 8007b06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b0a:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007b0c:	b91b      	cbnz	r3, 8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1a>
 8007b0e:	2174      	movs	r1, #116	; 0x74
 8007b10:	48b3      	ldr	r0, [pc, #716]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b12:	f7fa f80e 	bl	8001b32 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007b16:	6826      	ldr	r6, [r4, #0]
 8007b18:	f016 0601 	ands.w	r6, r6, #1
 8007b1c:	d013      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8007b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b20:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8007b24:	d003      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007b26:	217a      	movs	r1, #122	; 0x7a
 8007b28:	48ad      	ldr	r0, [pc, #692]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b2a:	f7fa f802 	bl	8001b32 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b2e:	4bad      	ldr	r3, [pc, #692]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007b36:	609a      	str	r2, [r3, #8]
 8007b38:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	4332      	orrs	r2, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007b3e:	fab6 f686 	clz	r6, r6
 8007b42:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b44:	609a      	str	r2, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b46:	6825      	ldr	r5, [r4, #0]
 8007b48:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8007b4c:	d01d      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8007b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b50:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 8007b54:	d006      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b5a:	d003      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007b5c:	218a      	movs	r1, #138	; 0x8a
 8007b5e:	48a0      	ldr	r0, [pc, #640]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007b60:	f7f9 ffe7 	bl	8001b32 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b64:	4a9f      	ldr	r2, [pc, #636]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007b66:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007b68:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b6c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b70:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8007b74:	bf08      	it	eq
 8007b76:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b78:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b7c:	bf16      	itet	ne
 8007b7e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8007b82:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b84:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	02d8      	lsls	r0, r3, #11
 8007b8e:	d51b      	bpl.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8007b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b92:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 8007b96:	d006      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8007b98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b9c:	d003      	beq.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8007b9e:	219e      	movs	r1, #158	; 0x9e
 8007ba0:	488f      	ldr	r0, [pc, #572]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007ba2:	f7f9 ffc6 	bl	8001b32 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ba6:	498f      	ldr	r1, [pc, #572]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007ba8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007baa:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bae:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bb2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007bb6:	ea43 0302 	orr.w	r3, r3, r2
 8007bba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bbe:	f000 82b3 	beq.w	8008128 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	bf08      	it	eq
 8007bc6:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007bc8:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8007bca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007bce:	bf18      	it	ne
 8007bd0:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bd2:	0699      	lsls	r1, r3, #26
 8007bd4:	d563      	bpl.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	d02d      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be2:	d02a      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007be4:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 8007be8:	4a7f      	ldr	r2, [pc, #508]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007bea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bee:	4290      	cmp	r0, r2
 8007bf0:	d023      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007bf2:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 8007bf6:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8007bfa:	4290      	cmp	r0, r2
 8007bfc:	d01d      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007bfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c02:	487a      	ldr	r0, [pc, #488]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c04:	4282      	cmp	r2, r0
 8007c06:	d018      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c08:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 8007c0c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 8007c10:	4283      	cmp	r3, r0
 8007c12:	d012      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c14:	4b76      	ldr	r3, [pc, #472]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00f      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c1a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d00b      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c22:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d007      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c2a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d003      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007c32:	21b9      	movs	r1, #185	; 0xb9
 8007c34:	486a      	ldr	r0, [pc, #424]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007c36:	f7f9 ff7c 	bl	8001b32 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c3a:	4b6a      	ldr	r3, [pc, #424]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c3c:	4f6d      	ldr	r7, [pc, #436]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c44:	641a      	str	r2, [r3, #64]	; 0x40
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c56:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c58:	f7fc fe36 	bl	80048c8 <HAL_GetTick>
 8007c5c:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	05da      	lsls	r2, r3, #23
 8007c62:	f140 8263 	bpl.w	800812c <HAL_RCCEx_PeriphCLKConfig+0x630>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c66:	4f5f      	ldr	r7, [pc, #380]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c6a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007c6e:	f040 8268 	bne.w	8008142 <HAL_RCCEx_PeriphCLKConfig+0x646>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c74:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007c78:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c7c:	4a59      	ldr	r2, [pc, #356]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c7e:	f040 8286 	bne.w	800818e <HAL_RCCEx_PeriphCLKConfig+0x692>
 8007c82:	6891      	ldr	r1, [r2, #8]
 8007c84:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8007c88:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8007c8c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8007c90:	4301      	orrs	r1, r0
 8007c92:	6091      	str	r1, [r2, #8]
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	06d9      	lsls	r1, r3, #27
 8007ca2:	d514      	bpl.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8007ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ca6:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8007caa:	d003      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007cac:	21f3      	movs	r1, #243	; 0xf3
 8007cae:	484c      	ldr	r0, [pc, #304]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007cb0:	f7f9 ff3f 	bl	8001b32 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cb4:	4b4b      	ldr	r3, [pc, #300]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cb6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007cc2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	045a      	lsls	r2, r3, #17
 8007cd2:	d513      	bpl.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8007cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd6:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007cda:	d006      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce0:	d003      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ce2:	21fd      	movs	r1, #253	; 0xfd
 8007ce4:	483e      	ldr	r0, [pc, #248]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007ce6:	f7f9 ff24 	bl	8001b32 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cea:	4a3e      	ldr	r2, [pc, #248]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007cec:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007cee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007cf2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	d514      	bpl.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8007d02:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007d04:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
 8007d08:	d007      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d10:	f240 1107 	movw	r1, #263	; 0x107
 8007d14:	4832      	ldr	r0, [pc, #200]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007d16:	f7f9 ff0c 	bl	8001b32 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d1a:	4a32      	ldr	r2, [pc, #200]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d1c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007d1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007d22:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007d26:	430b      	orrs	r3, r1
 8007d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	03df      	lsls	r7, r3, #15
 8007d30:	d514      	bpl.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8007d32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007d34:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 8007d38:	d007      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d3e:	d004      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007d40:	f240 1111 	movw	r1, #273	; 0x111
 8007d44:	4826      	ldr	r0, [pc, #152]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007d46:	f7f9 fef4 	bl	8001b32 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d4a:	4a26      	ldr	r2, [pc, #152]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d4c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007d4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007d52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d56:	430b      	orrs	r3, r1
 8007d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	0398      	lsls	r0, r3, #14
 8007d60:	d514      	bpl.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8007d62:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d64:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 8007d68:	d007      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d6e:	d004      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8007d70:	f240 111b 	movw	r1, #283	; 0x11b
 8007d74:	481a      	ldr	r0, [pc, #104]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007d76:	f7f9 fedc 	bl	8001b32 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007d7c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007d7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007d82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007d86:	430b      	orrs	r3, r1
 8007d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	0659      	lsls	r1, r3, #25
 8007d90:	d510      	bpl.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8007d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d904      	bls.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d98:	f240 1125 	movw	r1, #293	; 0x125
 8007d9c:	4810      	ldr	r0, [pc, #64]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007d9e:	f7f9 fec8 	bl	8001b32 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007da2:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007da4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007da6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	430b      	orrs	r3, r1
 8007db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	061a      	lsls	r2, r3, #24
 8007db8:	d51e      	bpl.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8007dba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007dbc:	f033 030c 	bics.w	r3, r3, #12
 8007dc0:	d004      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007dc2:	f240 112f 	movw	r1, #303	; 0x12f
 8007dc6:	4806      	ldr	r0, [pc, #24]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007dc8:	f7f9 feb3 	bl	8001b32 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dcc:	4a05      	ldr	r2, [pc, #20]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007dce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007dd4:	f023 030c 	bic.w	r3, r3, #12
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007dde:	e00b      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007de0:	0802ae14 	.word	0x0802ae14
 8007de4:	40023800 	.word	0x40023800
 8007de8:	00020300 	.word	0x00020300
 8007dec:	00080300 	.word	0x00080300
 8007df0:	00100300 	.word	0x00100300
 8007df4:	40007000 	.word	0x40007000
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	05db      	lsls	r3, r3, #23
 8007dfc:	d511      	bpl.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8007dfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e00:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007e04:	d004      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007e06:	f240 1139 	movw	r1, #313	; 0x139
 8007e0a:	48bd      	ldr	r0, [pc, #756]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007e0c:	f7f9 fe91 	bl	8001b32 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e10:	4abc      	ldr	r2, [pc, #752]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007e12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007e14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e18:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	059f      	lsls	r7, r3, #22
 8007e26:	d511      	bpl.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8007e28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e2a:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8007e2e:	d004      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007e30:	f240 1143 	movw	r1, #323	; 0x143
 8007e34:	48b2      	ldr	r0, [pc, #712]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007e36:	f7f9 fe7c 	bl	8001b32 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e3a:	4ab2      	ldr	r2, [pc, #712]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007e3c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e46:	430b      	orrs	r3, r1
 8007e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	0558      	lsls	r0, r3, #21
 8007e50:	d511      	bpl.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8007e52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007e54:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8007e58:	d004      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007e5a:	f240 114d 	movw	r1, #333	; 0x14d
 8007e5e:	48a8      	ldr	r0, [pc, #672]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007e60:	f7f9 fe67 	bl	8001b32 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e64:	4aa7      	ldr	r2, [pc, #668]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007e66:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007e68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e70:	430b      	orrs	r3, r1
 8007e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0519      	lsls	r1, r3, #20
 8007e7a:	d511      	bpl.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8007e7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e7e:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8007e82:	d004      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007e84:	f240 1157 	movw	r1, #343	; 0x157
 8007e88:	489d      	ldr	r0, [pc, #628]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007e8a:	f7f9 fe52 	bl	8001b32 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e8e:	4a9d      	ldr	r2, [pc, #628]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007e90:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007e96:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	04da      	lsls	r2, r3, #19
 8007ea4:	d511      	bpl.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8007ea6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007ea8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8007eac:	d004      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007eae:	f240 1161 	movw	r1, #353	; 0x161
 8007eb2:	4893      	ldr	r0, [pc, #588]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007eb4:	f7f9 fe3d 	bl	8001b32 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007eb8:	4a92      	ldr	r2, [pc, #584]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007eba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ebc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	049b      	lsls	r3, r3, #18
 8007ece:	d511      	bpl.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8007ed0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007ed2:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8007ed6:	d004      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007ed8:	f240 116b 	movw	r1, #363	; 0x16b
 8007edc:	4888      	ldr	r0, [pc, #544]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007ede:	f7f9 fe28 	bl	8001b32 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ee2:	4a88      	ldr	r2, [pc, #544]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007ee4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007ee6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007eea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	025f      	lsls	r7, r3, #9
 8007ef8:	d511      	bpl.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8007efa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007efc:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 8007f00:	d004      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007f02:	f240 1175 	movw	r1, #373	; 0x175
 8007f06:	487e      	ldr	r0, [pc, #504]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007f08:	f7f9 fe13 	bl	8001b32 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f0c:	4a7d      	ldr	r2, [pc, #500]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007f0e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007f10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	0298      	lsls	r0, r3, #10
 8007f22:	d515      	bpl.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8007f24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007f26:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 8007f2a:	d004      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8007f2c:	f240 117f 	movw	r1, #383	; 0x17f
 8007f30:	4873      	ldr	r0, [pc, #460]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007f32:	f7f9 fdfe 	bl	8001b32 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f36:	4973      	ldr	r1, [pc, #460]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007f38:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007f3a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8007f3e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f42:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
      pllsaiused = 1;
 8007f46:	bf08      	it	eq
 8007f48:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007f50:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 8007f52:	f013 0f08 	tst.w	r3, #8
 8007f56:	bf18      	it	ne
 8007f58:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f5a:	0359      	lsls	r1, r3, #13
 8007f5c:	d511      	bpl.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8007f5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007f60:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007f64:	d004      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8007f66:	f240 1197 	movw	r1, #407	; 0x197
 8007f6a:	4865      	ldr	r0, [pc, #404]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007f6c:	f7f9 fde1 	bl	8001b32 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f70:	4a64      	ldr	r2, [pc, #400]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007f72:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007f74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007f78:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	021a      	lsls	r2, r3, #8
 8007f86:	d513      	bpl.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007f88:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007f8c:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8007f90:	d004      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f92:	f240 11a1 	movw	r1, #417	; 0x1a1
 8007f96:	485a      	ldr	r0, [pc, #360]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007f98:	f7f9 fdcb 	bl	8001b32 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f9c:	4a59      	ldr	r2, [pc, #356]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007f9e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007fa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007faa:	430b      	orrs	r3, r1
 8007fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007fb0:	2e01      	cmp	r6, #1
 8007fb2:	f000 80f0 	beq.w	8008196 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fbc:	f000 80eb 	beq.w	8008196 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fc0:	2d01      	cmp	r5, #1
 8007fc2:	f040 80af 	bne.w	8008124 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fc6:	4d4f      	ldr	r5, [pc, #316]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fce:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fd0:	f7fc fc7a 	bl	80048c8 <HAL_GetTick>
 8007fd4:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd6:	682b      	ldr	r3, [r5, #0]
 8007fd8:	009f      	lsls	r7, r3, #2
 8007fda:	f100 81ad 	bmi.w	8008338 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        return HAL_TIMEOUT;
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8007fde:	6963      	ldr	r3, [r4, #20]
 8007fe0:	3b32      	subs	r3, #50	; 0x32
 8007fe2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8007fe6:	d904      	bls.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007fe8:	f240 2146 	movw	r1, #582	; 0x246
 8007fec:	4844      	ldr	r0, [pc, #272]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8007fee:	f7f9 fda0 	bl	8001b32 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	031d      	lsls	r5, r3, #12
 8007ff6:	d501      	bpl.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007ff8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007ffa:	b11a      	cbz	r2, 8008004 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007ffc:	02d8      	lsls	r0, r3, #11
 8007ffe:	d52f      	bpl.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x564>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008002:	bb6b      	cbnz	r3, 8008060 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8008004:	69a3      	ldr	r3, [r4, #24]
 8008006:	3b02      	subs	r3, #2
 8008008:	2b0d      	cmp	r3, #13
 800800a:	d904      	bls.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800800c:	f240 214d 	movw	r1, #589	; 0x24d
 8008010:	483b      	ldr	r0, [pc, #236]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008012:	f7f9 fd8e 	bl	8001b32 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8008016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008018:	3b01      	subs	r3, #1
 800801a:	2b1f      	cmp	r3, #31
 800801c:	d904      	bls.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800801e:	f240 214f 	movw	r1, #591	; 0x24f
 8008022:	4837      	ldr	r0, [pc, #220]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008024:	f7f9 fd85 	bl	8001b32 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008028:	4a36      	ldr	r2, [pc, #216]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800802a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800802e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008036:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800803a:	430b      	orrs	r3, r1
 800803c:	6961      	ldr	r1, [r4, #20]
 800803e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008042:	69a1      	ldr	r1, [r4, #24]
 8008044:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800804c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008050:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008052:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008056:	3901      	subs	r1, #1
 8008058:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800805c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	0299      	lsls	r1, r3, #10
 8008064:	d51d      	bpl.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008066:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800806c:	d119      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800806e:	6a23      	ldr	r3, [r4, #32]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d904      	bls.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008074:	f240 2162 	movw	r1, #610	; 0x262
 8008078:	4821      	ldr	r0, [pc, #132]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800807a:	f7f9 fd5a 	bl	8001b32 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800807e:	4a21      	ldr	r2, [pc, #132]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008080:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008084:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008088:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800808c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008090:	430b      	orrs	r3, r1
 8008092:	6961      	ldr	r1, [r4, #20]
 8008094:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008098:	6a21      	ldr	r1, [r4, #32]
 800809a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800809e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	071a      	lsls	r2, r3, #28
 80080a6:	d531      	bpl.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80080a8:	69e3      	ldr	r3, [r4, #28]
 80080aa:	3b02      	subs	r3, #2
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	d904      	bls.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80080b0:	f240 2171 	movw	r1, #625	; 0x271
 80080b4:	4812      	ldr	r0, [pc, #72]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80080b6:	f7f9 fd3c 	bl	8001b32 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80080ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080bc:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80080c0:	d004      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80080c2:	f240 2172 	movw	r1, #626	; 0x272
 80080c6:	480e      	ldr	r0, [pc, #56]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80080c8:	f7f9 fd33 	bl	8001b32 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80080ce:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080d6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80080da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080de:	430b      	orrs	r3, r1
 80080e0:	6961      	ldr	r1, [r4, #20]
 80080e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80080e6:	69e1      	ldr	r1, [r4, #28]
 80080e8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80080ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80080f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80080f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80080fa:	430b      	orrs	r3, r1
 80080fc:	e004      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80080fe:	bf00      	nop
 8008100:	0802ae14 	.word	0x0802ae14
 8008104:	40023800 	.word	0x40023800
 8008108:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800810c:	4c91      	ldr	r4, [pc, #580]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008114:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008116:	f7fc fbd7 	bl	80048c8 <HAL_GetTick>
 800811a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	f140 8111 	bpl.w	8008346 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008124:	2000      	movs	r0, #0
 8008126:	e009      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x640>
      plli2sused = 1;
 8008128:	2601      	movs	r6, #1
 800812a:	e54d      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800812c:	f7fc fbcc 	bl	80048c8 <HAL_GetTick>
 8008130:	eba0 0008 	sub.w	r0, r0, r8
 8008134:	2864      	cmp	r0, #100	; 0x64
 8008136:	f67f ad92 	bls.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x162>
        return HAL_TIMEOUT;
 800813a:	2003      	movs	r0, #3
}
 800813c:	b003      	add	sp, #12
 800813e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008142:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008144:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008148:	4293      	cmp	r3, r2
 800814a:	f43f ad92 	beq.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800814e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008150:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008156:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800815a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800815c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800815e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008162:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008164:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008168:	07db      	lsls	r3, r3, #31
 800816a:	f57f ad82 	bpl.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x176>
        tickstart = HAL_GetTick();
 800816e:	f7fc fbab 	bl	80048c8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008172:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008176:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800817a:	0798      	lsls	r0, r3, #30
 800817c:	f53f ad79 	bmi.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x176>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008180:	f7fc fba2 	bl	80048c8 <HAL_GetTick>
 8008184:	eba0 0008 	sub.w	r0, r0, r8
 8008188:	4548      	cmp	r0, r9
 800818a:	d9f5      	bls.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 800818c:	e7d5      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800818e:	6891      	ldr	r1, [r2, #8]
 8008190:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8008194:	e57d      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_PLLI2S_DISABLE();
 8008196:	4e6f      	ldr	r6, [pc, #444]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008198:	6833      	ldr	r3, [r6, #0]
 800819a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800819e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80081a0:	f7fc fb92 	bl	80048c8 <HAL_GetTick>
 80081a4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081a6:	6833      	ldr	r3, [r6, #0]
 80081a8:	011b      	lsls	r3, r3, #4
 80081aa:	f100 80be 	bmi.w	800832a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	3b32      	subs	r3, #50	; 0x32
 80081b2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80081b6:	d904      	bls.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80081b8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80081bc:	4866      	ldr	r0, [pc, #408]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 80081be:	f7f9 fcb8 	bl	8001b32 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07df      	lsls	r7, r3, #31
 80081c6:	d51c      	bpl.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x706>
 80081c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ca:	b9d3      	cbnz	r3, 8008202 <HAL_RCCEx_PeriphCLKConfig+0x706>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80081cc:	68a3      	ldr	r3, [r4, #8]
 80081ce:	3b02      	subs	r3, #2
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d904      	bls.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80081d4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80081d8:	485f      	ldr	r0, [pc, #380]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 80081da:	f7f9 fcaa 	bl	8001b32 <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081de:	4a5d      	ldr	r2, [pc, #372]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 80081e0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081e4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80081e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081ec:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6861      	ldr	r1, [r4, #4]
 80081f4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80081f8:	68a1      	ldr	r1, [r4, #8]
 80081fa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80081fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	031e      	lsls	r6, r3, #12
 8008206:	d503      	bpl.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008208:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800820a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800820e:	d005      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8008210:	02d8      	lsls	r0, r3, #11
 8008212:	d530      	bpl.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x77a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800821a:	d12c      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800821c:	68e3      	ldr	r3, [r4, #12]
 800821e:	3b02      	subs	r3, #2
 8008220:	2b0d      	cmp	r3, #13
 8008222:	d904      	bls.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x732>
 8008224:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8008228:	484b      	ldr	r0, [pc, #300]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 800822a:	f7f9 fc82 	bl	8001b32 <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800822e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008230:	3b01      	subs	r3, #1
 8008232:	2b1f      	cmp	r3, #31
 8008234:	d904      	bls.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8008236:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800823a:	4847      	ldr	r0, [pc, #284]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 800823c:	f7f9 fc79 	bl	8001b32 <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008240:	4a44      	ldr	r2, [pc, #272]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008242:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008246:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800824a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800824e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008252:	430b      	orrs	r3, r1
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800825a:	68e1      	ldr	r1, [r4, #12]
 800825c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008264:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8008268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800826a:	f021 011f 	bic.w	r1, r1, #31
 800826e:	3b01      	subs	r3, #1
 8008270:	430b      	orrs	r3, r1
 8008272:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	01d9      	lsls	r1, r3, #7
 800827a:	d519      	bpl.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	2b03      	cmp	r3, #3
 8008280:	d904      	bls.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008282:	f240 2107 	movw	r1, #519	; 0x207
 8008286:	4834      	ldr	r0, [pc, #208]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008288:	f7f9 fc53 	bl	8001b32 <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800828c:	4a31      	ldr	r2, [pc, #196]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 800828e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008292:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008296:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800829a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800829e:	430b      	orrs	r3, r1
 80082a0:	6861      	ldr	r1, [r4, #4]
 80082a2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80082a6:	6921      	ldr	r1, [r4, #16]
 80082a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80082ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	019a      	lsls	r2, r3, #6
 80082b4:	d527      	bpl.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d904      	bls.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 80082bc:	f240 2116 	movw	r1, #534	; 0x216
 80082c0:	4825      	ldr	r0, [pc, #148]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 80082c2:	f7f9 fc36 	bl	8001b32 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	3b02      	subs	r3, #2
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d904      	bls.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 80082ce:	f240 2117 	movw	r1, #535	; 0x217
 80082d2:	4821      	ldr	r0, [pc, #132]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 80082d4:	f7f9 fc2d 	bl	8001b32 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80082d8:	68e3      	ldr	r3, [r4, #12]
 80082da:	3b02      	subs	r3, #2
 80082dc:	2b0d      	cmp	r3, #13
 80082de:	d904      	bls.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 80082e0:	f44f 7106 	mov.w	r1, #536	; 0x218
 80082e4:	481c      	ldr	r0, [pc, #112]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 80082e6:	f7f9 fc24 	bl	8001b32 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80082f4:	68e2      	ldr	r2, [r4, #12]
 80082f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80082fa:	68a2      	ldr	r2, [r4, #8]
 80082fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008300:	4a14      	ldr	r2, [pc, #80]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008302:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008306:	4e13      	ldr	r6, [pc, #76]	; (8008354 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800830e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008310:	f7fc fada 	bl	80048c8 <HAL_GetTick>
 8008314:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008316:	6833      	ldr	r3, [r6, #0]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	f53f ae51 	bmi.w	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800831e:	f7fc fad3 	bl	80048c8 <HAL_GetTick>
 8008322:	1bc0      	subs	r0, r0, r7
 8008324:	2864      	cmp	r0, #100	; 0x64
 8008326:	d9f6      	bls.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008328:	e707      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800832a:	f7fc facd 	bl	80048c8 <HAL_GetTick>
 800832e:	1bc0      	subs	r0, r0, r7
 8008330:	2864      	cmp	r0, #100	; 0x64
 8008332:	f67f af38 	bls.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8008336:	e700      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008338:	f7fc fac6 	bl	80048c8 <HAL_GetTick>
 800833c:	1b80      	subs	r0, r0, r6
 800833e:	2864      	cmp	r0, #100	; 0x64
 8008340:	f67f ae49 	bls.w	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008344:	e6f9      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008346:	f7fc fabf 	bl	80048c8 <HAL_GetTick>
 800834a:	1b40      	subs	r0, r0, r5
 800834c:	2864      	cmp	r0, #100	; 0x64
 800834e:	f67f aee5 	bls.w	800811c <HAL_RCCEx_PeriphCLKConfig+0x620>
 8008352:	e6f2      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8008354:	40023800 	.word	0x40023800
 8008358:	0802ae14 	.word	0x0802ae14

0800835c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800835c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008360:	d12a      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008362:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008364:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008368:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 800836c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008370:	d032      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008372:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8008376:	d02d      	beq.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8008378:	2a00      	cmp	r2, #0
 800837a:	d148      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800837c:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800837e:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008380:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008382:	4a24      	ldr	r2, [pc, #144]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008384:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008388:	bf54      	ite	pl
 800838a:	4b23      	ldrpl	r3, [pc, #140]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800838c:	4b23      	ldrmi	r3, [pc, #140]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800838e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008392:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008396:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800839a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800839e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80083a0:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80083a4:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80083a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80083ac:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80083b0:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80083b2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80083b6:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80083b8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80083bc:	d127      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 80083be:	4b15      	ldr	r3, [pc, #84]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80083c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80083c4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 80083c8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80083cc:	d004      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80083ce:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80083d2:	e7d0      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083d4:	4812      	ldr	r0, [pc, #72]	; (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80083d6:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083d8:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083da:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083dc:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80083de:	4a0d      	ldr	r2, [pc, #52]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80083e4:	bf54      	ite	pl
 80083e6:	4b0c      	ldrpl	r3, [pc, #48]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80083e8:	4b0c      	ldrmi	r3, [pc, #48]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80083ea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80083ee:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80083f2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80083f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80083fa:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80083fc:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008400:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008404:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008408:	f003 031f 	and.w	r3, r3, #31
 800840c:	e7d0      	b.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 800840e:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800
 8008418:	00f42400 	.word	0x00f42400
 800841c:	017d7840 	.word	0x017d7840
 8008420:	00bb8000 	.word	0x00bb8000

08008424 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008424:	6802      	ldr	r2, [r0, #0]
{
 8008426:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008428:	68d3      	ldr	r3, [r2, #12]
{
 800842a:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800842c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008430:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008432:	f7fc fa49 	bl	80048c8 <HAL_GetTick>
 8008436:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	069b      	lsls	r3, r3, #26
 800843e:	d501      	bpl.n	8008444 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8008440:	2000      	movs	r0, #0
 8008442:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008444:	f7fc fa40 	bl	80048c8 <HAL_GetTick>
 8008448:	1b40      	subs	r0, r0, r5
 800844a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800844e:	d9f3      	bls.n	8008438 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8008450:	2003      	movs	r0, #3
}
 8008452:	bd38      	pop	{r3, r4, r5, pc}

08008454 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008454:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008456:	6803      	ldr	r3, [r0, #0]
{
 8008458:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	0652      	lsls	r2, r2, #25
 800845e:	d501      	bpl.n	8008464 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008460:	2000      	movs	r0, #0
 8008462:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008464:	f04f 32ff 	mov.w	r2, #4294967295
 8008468:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800846a:	f7fc fa2d 	bl	80048c8 <HAL_GetTick>
 800846e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	065b      	lsls	r3, r3, #25
 8008476:	d4f3      	bmi.n	8008460 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008478:	f7fc fa26 	bl	80048c8 <HAL_GetTick>
 800847c:	1b40      	subs	r0, r0, r5
 800847e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008482:	d9f5      	bls.n	8008470 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8008484:	2003      	movs	r0, #3
}
 8008486:	bd38      	pop	{r3, r4, r5, pc}

08008488 <HAL_RTC_Init>:
{
 8008488:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800848a:	4604      	mov	r4, r0
 800848c:	2800      	cmp	r0, #0
 800848e:	d050      	beq.n	8008532 <HAL_RTC_Init+0xaa>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008490:	6802      	ldr	r2, [r0, #0]
 8008492:	4b3c      	ldr	r3, [pc, #240]	; (8008584 <HAL_RTC_Init+0xfc>)
 8008494:	429a      	cmp	r2, r3
 8008496:	d003      	beq.n	80084a0 <HAL_RTC_Init+0x18>
 8008498:	21fb      	movs	r1, #251	; 0xfb
 800849a:	483b      	ldr	r0, [pc, #236]	; (8008588 <HAL_RTC_Init+0x100>)
 800849c:	f7f9 fb49 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80084a0:	6863      	ldr	r3, [r4, #4]
 80084a2:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80084a6:	d003      	beq.n	80084b0 <HAL_RTC_Init+0x28>
 80084a8:	21fc      	movs	r1, #252	; 0xfc
 80084aa:	4837      	ldr	r0, [pc, #220]	; (8008588 <HAL_RTC_Init+0x100>)
 80084ac:	f7f9 fb41 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	2b7f      	cmp	r3, #127	; 0x7f
 80084b4:	d903      	bls.n	80084be <HAL_RTC_Init+0x36>
 80084b6:	21fd      	movs	r1, #253	; 0xfd
 80084b8:	4833      	ldr	r0, [pc, #204]	; (8008588 <HAL_RTC_Init+0x100>)
 80084ba:	f7f9 fb3a 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80084be:	68e3      	ldr	r3, [r4, #12]
 80084c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c4:	d303      	bcc.n	80084ce <HAL_RTC_Init+0x46>
 80084c6:	21fe      	movs	r1, #254	; 0xfe
 80084c8:	482f      	ldr	r0, [pc, #188]	; (8008588 <HAL_RTC_Init+0x100>)
 80084ca:	f7f9 fb32 	bl	8001b32 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80084d4:	d003      	beq.n	80084de <HAL_RTC_Init+0x56>
 80084d6:	21ff      	movs	r1, #255	; 0xff
 80084d8:	482b      	ldr	r0, [pc, #172]	; (8008588 <HAL_RTC_Init+0x100>)
 80084da:	f7f9 fb2a 	bl	8001b32 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80084de:	6963      	ldr	r3, [r4, #20]
 80084e0:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 80084e4:	d004      	beq.n	80084f0 <HAL_RTC_Init+0x68>
 80084e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084ea:	4827      	ldr	r0, [pc, #156]	; (8008588 <HAL_RTC_Init+0x100>)
 80084ec:	f7f9 fb21 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80084f0:	69a3      	ldr	r3, [r4, #24]
 80084f2:	f033 0308 	bics.w	r3, r3, #8
 80084f6:	d004      	beq.n	8008502 <HAL_RTC_Init+0x7a>
 80084f8:	f240 1101 	movw	r1, #257	; 0x101
 80084fc:	4822      	ldr	r0, [pc, #136]	; (8008588 <HAL_RTC_Init+0x100>)
 80084fe:	f7f9 fb18 	bl	8001b32 <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008502:	7f63      	ldrb	r3, [r4, #29]
 8008504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008508:	b91b      	cbnz	r3, 8008512 <HAL_RTC_Init+0x8a>
    hrtc->Lock = HAL_UNLOCKED;
 800850a:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 800850c:	4620      	mov	r0, r4
 800850e:	f7f9 fc11 	bl	8001d34 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008512:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008514:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008516:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008518:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	625a      	str	r2, [r3, #36]	; 0x24
 800851e:	2253      	movs	r2, #83	; 0x53
 8008520:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008522:	f7ff ff97 	bl	8008454 <RTC_EnterInitMode>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	b128      	cbz	r0, 8008536 <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800852a:	22ff      	movs	r2, #255	; 0xff
 800852c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800852e:	2304      	movs	r3, #4
 8008530:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8008532:	2001      	movs	r0, #1
}
 8008534:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008536:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008538:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800853a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800853e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008542:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008544:	6862      	ldr	r2, [r4, #4]
 8008546:	6899      	ldr	r1, [r3, #8]
 8008548:	432a      	orrs	r2, r5
 800854a:	6965      	ldr	r5, [r4, #20]
 800854c:	432a      	orrs	r2, r5
 800854e:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008550:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008552:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008554:	68e2      	ldr	r2, [r4, #12]
 8008556:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800855e:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008560:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008568:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800856a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800856c:	f022 0208 	bic.w	r2, r2, #8
 8008570:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008574:	430a      	orrs	r2, r1
 8008576:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008578:	22ff      	movs	r2, #255	; 0xff
 800857a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800857c:	2301      	movs	r3, #1
 800857e:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8008580:	bd38      	pop	{r3, r4, r5, pc}
 8008582:	bf00      	nop
 8008584:	40002800 	.word	0x40002800
 8008588:	0802ae55 	.word	0x0802ae55

0800858c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800858c:	2300      	movs	r3, #0

  while(Value >= 10)
 800858e:	2809      	cmp	r0, #9
 8008590:	d803      	bhi.n	800859a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008592:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8008596:	b2c0      	uxtb	r0, r0
 8008598:	4770      	bx	lr
    Value -= 10;
 800859a:	380a      	subs	r0, #10
    bcdhigh++;
 800859c:	3301      	adds	r3, #1
    Value -= 10;
 800859e:	b2c0      	uxtb	r0, r0
 80085a0:	e7f5      	b.n	800858e <RTC_ByteToBcd2+0x2>

080085a2 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80085a2:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80085a4:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80085a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80085ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80085b0:	b2c0      	uxtb	r0, r0
 80085b2:	4770      	bx	lr

080085b4 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 80085b4:	2a01      	cmp	r2, #1
{
 80085b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b8:	4606      	mov	r6, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 80085be:	d904      	bls.n	80085ca <HAL_RTC_SetTime+0x16>
 80085c0:	f240 21db 	movw	r1, #731	; 0x2db
 80085c4:	486d      	ldr	r0, [pc, #436]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80085c6:	f7f9 fab4 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80085ca:	6923      	ldr	r3, [r4, #16]
 80085cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d0:	d007      	beq.n	80085e2 <HAL_RTC_SetTime+0x2e>
 80085d2:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80085d6:	d004      	beq.n	80085e2 <HAL_RTC_SetTime+0x2e>
 80085d8:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80085dc:	4867      	ldr	r0, [pc, #412]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80085de:	f7f9 faa8 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 80085e2:	6963      	ldr	r3, [r4, #20]
 80085e4:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 80085e8:	d004      	beq.n	80085f4 <HAL_RTC_SetTime+0x40>
 80085ea:	f240 21dd 	movw	r1, #733	; 0x2dd
 80085ee:	4863      	ldr	r0, [pc, #396]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80085f0:	f7f9 fa9f 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hrtc);
 80085f4:	7f33      	ldrb	r3, [r6, #28]
 80085f6:	2702      	movs	r7, #2
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d04f      	beq.n	800869c <HAL_RTC_SetTime+0xe8>
 80085fc:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80085fe:	7777      	strb	r7, [r6, #29]
  __HAL_LOCK(hrtc);
 8008600:	7733      	strb	r3, [r6, #28]
 8008602:	6833      	ldr	r3, [r6, #0]
 8008604:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008606:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8008608:	2d00      	cmp	r5, #0
 800860a:	d14f      	bne.n	80086ac <HAL_RTC_SetTime+0xf8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800860c:	065a      	lsls	r2, r3, #25
 800860e:	d547      	bpl.n	80086a0 <HAL_RTC_SetTime+0xec>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008610:	3801      	subs	r0, #1
 8008612:	280b      	cmp	r0, #11
 8008614:	d904      	bls.n	8008620 <HAL_RTC_SetTime+0x6c>
 8008616:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 800861a:	4858      	ldr	r0, [pc, #352]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 800861c:	f7f9 fa89 	bl	8001b32 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008620:	7b23      	ldrb	r3, [r4, #12]
 8008622:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8008626:	d004      	beq.n	8008632 <HAL_RTC_SetTime+0x7e>
 8008628:	f240 21e9 	movw	r1, #745	; 0x2e9
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800862c:	4853      	ldr	r0, [pc, #332]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 800862e:	f7f9 fa80 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008632:	7863      	ldrb	r3, [r4, #1]
 8008634:	2b3b      	cmp	r3, #59	; 0x3b
 8008636:	d904      	bls.n	8008642 <HAL_RTC_SetTime+0x8e>
 8008638:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800863c:	484f      	ldr	r0, [pc, #316]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 800863e:	f7f9 fa78 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008642:	78a3      	ldrb	r3, [r4, #2]
 8008644:	2b3b      	cmp	r3, #59	; 0x3b
 8008646:	d904      	bls.n	8008652 <HAL_RTC_SetTime+0x9e>
 8008648:	f240 21f1 	movw	r1, #753	; 0x2f1
 800864c:	484b      	ldr	r0, [pc, #300]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 800864e:	f7f9 fa70 	bl	8001b32 <assert_failed>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008652:	7820      	ldrb	r0, [r4, #0]
 8008654:	f7ff ff9a 	bl	800858c <RTC_ByteToBcd2>
 8008658:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800865a:	7860      	ldrb	r0, [r4, #1]
 800865c:	f7ff ff96 	bl	800858c <RTC_ByteToBcd2>
 8008660:	4605      	mov	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008662:	78a0      	ldrb	r0, [r4, #2]
 8008664:	f7ff ff92 	bl	800858c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008668:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800866a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800866e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008672:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008676:	6833      	ldr	r3, [r6, #0]
 8008678:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800867a:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800867c:	625a      	str	r2, [r3, #36]	; 0x24
 800867e:	2253      	movs	r2, #83	; 0x53
 8008680:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008682:	f7ff fee7 	bl	8008454 <RTC_EnterInitMode>
 8008686:	6833      	ldr	r3, [r6, #0]
 8008688:	4607      	mov	r7, r0
 800868a:	2800      	cmp	r0, #0
 800868c:	d04c      	beq.n	8008728 <HAL_RTC_SetTime+0x174>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800868e:	22ff      	movs	r2, #255	; 0xff
 8008690:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008692:	2304      	movs	r3, #4
 8008694:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8008696:	2300      	movs	r3, #0
 8008698:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 800869a:	2701      	movs	r7, #1
}
 800869c:	4638      	mov	r0, r7
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80086a0:	2817      	cmp	r0, #23
      sTime->TimeFormat = 0x00;
 80086a2:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80086a4:	d9c5      	bls.n	8008632 <HAL_RTC_SetTime+0x7e>
 80086a6:	f240 21ee 	movw	r1, #750	; 0x2ee
 80086aa:	e7bf      	b.n	800862c <HAL_RTC_SetTime+0x78>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086ac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80086b0:	d032      	beq.n	8008718 <HAL_RTC_SetTime+0x164>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80086b2:	f7ff ff76 	bl	80085a2 <RTC_Bcd2ToByte>
 80086b6:	3801      	subs	r0, #1
 80086b8:	b2c0      	uxtb	r0, r0
 80086ba:	280b      	cmp	r0, #11
 80086bc:	d904      	bls.n	80086c8 <HAL_RTC_SetTime+0x114>
 80086be:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80086c2:	482e      	ldr	r0, [pc, #184]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80086c4:	f7f9 fa35 	bl	8001b32 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80086c8:	7b23      	ldrb	r3, [r4, #12]
 80086ca:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80086ce:	d004      	beq.n	80086da <HAL_RTC_SetTime+0x126>
 80086d0:	f240 21fd 	movw	r1, #765	; 0x2fd
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80086d4:	4829      	ldr	r0, [pc, #164]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80086d6:	f7f9 fa2c 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80086da:	7860      	ldrb	r0, [r4, #1]
 80086dc:	f7ff ff61 	bl	80085a2 <RTC_Bcd2ToByte>
 80086e0:	283b      	cmp	r0, #59	; 0x3b
 80086e2:	d904      	bls.n	80086ee <HAL_RTC_SetTime+0x13a>
 80086e4:	f44f 7141 	mov.w	r1, #772	; 0x304
 80086e8:	4824      	ldr	r0, [pc, #144]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80086ea:	f7f9 fa22 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80086ee:	78a0      	ldrb	r0, [r4, #2]
 80086f0:	f7ff ff57 	bl	80085a2 <RTC_Bcd2ToByte>
 80086f4:	283b      	cmp	r0, #59	; 0x3b
 80086f6:	d904      	bls.n	8008702 <HAL_RTC_SetTime+0x14e>
 80086f8:	f240 3105 	movw	r1, #773	; 0x305
 80086fc:	481f      	ldr	r0, [pc, #124]	; (800877c <HAL_RTC_SetTime+0x1c8>)
 80086fe:	f7f9 fa18 	bl	8001b32 <assert_failed>
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008702:	7860      	ldrb	r0, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008704:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008706:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008708:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800870c:	78a5      	ldrb	r5, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800870e:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008710:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008712:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8008716:	e7ae      	b.n	8008676 <HAL_RTC_SetTime+0xc2>
      sTime->TimeFormat = 0x00;
 8008718:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800871a:	f7ff ff42 	bl	80085a2 <RTC_Bcd2ToByte>
 800871e:	2817      	cmp	r0, #23
 8008720:	d9db      	bls.n	80086da <HAL_RTC_SetTime+0x126>
 8008722:	f240 3102 	movw	r1, #770	; 0x302
 8008726:	e7d5      	b.n	80086d4 <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008728:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800872c:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800872e:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8008732:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800873a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	430a      	orrs	r2, r1
 8008740:	6961      	ldr	r1, [r4, #20]
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800874c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	069b      	lsls	r3, r3, #26
 8008752:	d40a      	bmi.n	800876a <HAL_RTC_SetTime+0x1b6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff fe65 	bl	8008424 <HAL_RTC_WaitForSynchro>
 800875a:	b130      	cbz	r0, 800876a <HAL_RTC_SetTime+0x1b6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800875c:	6833      	ldr	r3, [r6, #0]
 800875e:	22ff      	movs	r2, #255	; 0xff
 8008760:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008762:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8008764:	7737      	strb	r7, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008766:	7773      	strb	r3, [r6, #29]
 8008768:	e797      	b.n	800869a <HAL_RTC_SetTime+0xe6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800876a:	6833      	ldr	r3, [r6, #0]
 800876c:	22ff      	movs	r2, #255	; 0xff
 800876e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8008770:	2301      	movs	r3, #1
 8008772:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8008774:	2300      	movs	r3, #0
 8008776:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8008778:	e790      	b.n	800869c <HAL_RTC_SetTime+0xe8>
 800877a:	bf00      	nop
 800877c:	0802ae55 	.word	0x0802ae55

08008780 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 8008780:	2a01      	cmp	r2, #1
{
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	4605      	mov	r5, r0
 8008786:	460e      	mov	r6, r1
 8008788:	4614      	mov	r4, r2
  assert_param(IS_RTC_FORMAT(Format));
 800878a:	d904      	bls.n	8008796 <HAL_RTC_SetDate+0x16>
 800878c:	f240 318e 	movw	r1, #910	; 0x38e
 8008790:	4856      	ldr	r0, [pc, #344]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 8008792:	f7f9 f9ce 	bl	8001b32 <assert_failed>
 __HAL_LOCK(hrtc);
 8008796:	7f2b      	ldrb	r3, [r5, #28]
 8008798:	2b01      	cmp	r3, #1
 800879a:	f04f 0302 	mov.w	r3, #2
 800879e:	f000 80a2 	beq.w	80088e6 <HAL_RTC_SetDate+0x166>
 80087a2:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087a4:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 80087a6:	772a      	strb	r2, [r5, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80087a8:	b934      	cbnz	r4, 80087b8 <HAL_RTC_SetDate+0x38>
 80087aa:	7873      	ldrb	r3, [r6, #1]
 80087ac:	06da      	lsls	r2, r3, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087ae:	bf42      	ittt	mi
 80087b0:	f023 0310 	bicmi.w	r3, r3, #16
 80087b4:	330a      	addmi	r3, #10
 80087b6:	7073      	strbmi	r3, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80087b8:	7833      	ldrb	r3, [r6, #0]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	2b06      	cmp	r3, #6
 80087be:	d904      	bls.n	80087ca <HAL_RTC_SetDate+0x4a>
 80087c0:	f240 319a 	movw	r1, #922	; 0x39a
 80087c4:	4849      	ldr	r0, [pc, #292]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 80087c6:	f7f9 f9b4 	bl	8001b32 <assert_failed>
 80087ca:	78f0      	ldrb	r0, [r6, #3]
  if(Format == RTC_FORMAT_BIN)
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d13f      	bne.n	8008850 <HAL_RTC_SetDate+0xd0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80087d0:	2863      	cmp	r0, #99	; 0x63
 80087d2:	d904      	bls.n	80087de <HAL_RTC_SetDate+0x5e>
 80087d4:	f240 319e 	movw	r1, #926	; 0x39e
 80087d8:	4844      	ldr	r0, [pc, #272]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 80087da:	f7f9 f9aa 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80087de:	7873      	ldrb	r3, [r6, #1]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	2b0b      	cmp	r3, #11
 80087e4:	d904      	bls.n	80087f0 <HAL_RTC_SetDate+0x70>
 80087e6:	f240 319f 	movw	r1, #927	; 0x39f
 80087ea:	4840      	ldr	r0, [pc, #256]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 80087ec:	f7f9 f9a1 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80087f0:	78b3      	ldrb	r3, [r6, #2]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b1e      	cmp	r3, #30
 80087f6:	d904      	bls.n	8008802 <HAL_RTC_SetDate+0x82>
 80087f8:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80087fc:	483b      	ldr	r0, [pc, #236]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 80087fe:	f7f9 f998 	bl	8001b32 <assert_failed>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008802:	78f0      	ldrb	r0, [r6, #3]
 8008804:	f7ff fec2 	bl	800858c <RTC_ByteToBcd2>
 8008808:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800880a:	7870      	ldrb	r0, [r6, #1]
 800880c:	f7ff febe 	bl	800858c <RTC_ByteToBcd2>
 8008810:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008812:	78b0      	ldrb	r0, [r6, #2]
 8008814:	f7ff feba 	bl	800858c <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));
 8008818:	7833      	ldrb	r3, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800881a:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800881e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8008822:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800882a:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800882c:	625a      	str	r2, [r3, #36]	; 0x24
 800882e:	2253      	movs	r2, #83	; 0x53
 8008830:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008832:	f7ff fe0f 	bl	8008454 <RTC_EnterInitMode>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	4606      	mov	r6, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d034      	beq.n	80088a8 <HAL_RTC_SetDate+0x128>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800883e:	22ff      	movs	r2, #255	; 0xff
 8008840:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008842:	2304      	movs	r3, #4
 8008844:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8008846:	2300      	movs	r3, #0
 8008848:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800884a:	2601      	movs	r6, #1
}
 800884c:	4630      	mov	r0, r6
 800884e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008850:	f7ff fea7 	bl	80085a2 <RTC_Bcd2ToByte>
 8008854:	2863      	cmp	r0, #99	; 0x63
 8008856:	d904      	bls.n	8008862 <HAL_RTC_SetDate+0xe2>
 8008858:	f240 31a9 	movw	r1, #937	; 0x3a9
 800885c:	4823      	ldr	r0, [pc, #140]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 800885e:	f7f9 f968 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008862:	7870      	ldrb	r0, [r6, #1]
 8008864:	f7ff fe9d 	bl	80085a2 <RTC_Bcd2ToByte>
 8008868:	3801      	subs	r0, #1
 800886a:	b2c0      	uxtb	r0, r0
 800886c:	280b      	cmp	r0, #11
 800886e:	d904      	bls.n	800887a <HAL_RTC_SetDate+0xfa>
 8008870:	f240 31aa 	movw	r1, #938	; 0x3aa
 8008874:	481d      	ldr	r0, [pc, #116]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 8008876:	f7f9 f95c 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800887a:	78b0      	ldrb	r0, [r6, #2]
 800887c:	f7ff fe91 	bl	80085a2 <RTC_Bcd2ToByte>
 8008880:	3801      	subs	r0, #1
 8008882:	b2c0      	uxtb	r0, r0
 8008884:	281e      	cmp	r0, #30
 8008886:	d904      	bls.n	8008892 <HAL_RTC_SetDate+0x112>
 8008888:	f240 31ab 	movw	r1, #939	; 0x3ab
 800888c:	4817      	ldr	r0, [pc, #92]	; (80088ec <HAL_RTC_SetDate+0x16c>)
 800888e:	f7f9 f950 	bl	8001b32 <assert_failed>
                  (((uint32_t)sDate->Month) << 8) | \
 8008892:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008894:	78f4      	ldrb	r4, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8008896:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008898:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
                  ((uint32_t)sDate->Date) | \
 800889c:	78b4      	ldrb	r4, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800889e:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));
 80088a0:	7834      	ldrb	r4, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80088a2:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80088a6:	e7be      	b.n	8008826 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80088a8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80088ac:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80088b0:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088b8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	069b      	lsls	r3, r3, #26
 80088be:	d40a      	bmi.n	80088d6 <HAL_RTC_SetDate+0x156>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088c0:	4628      	mov	r0, r5
 80088c2:	f7ff fdaf 	bl	8008424 <HAL_RTC_WaitForSynchro>
 80088c6:	b130      	cbz	r0, 80088d6 <HAL_RTC_SetDate+0x156>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	22ff      	movs	r2, #255	; 0xff
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80088ce:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80088d0:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80088d2:	776b      	strb	r3, [r5, #29]
 80088d4:	e7b9      	b.n	800884a <HAL_RTC_SetDate+0xca>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088d6:	682b      	ldr	r3, [r5, #0]
 80088d8:	22ff      	movs	r2, #255	; 0xff
 80088da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80088dc:	2301      	movs	r3, #1
 80088de:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80088e0:	2300      	movs	r3, #0
 80088e2:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 80088e4:	e7b2      	b.n	800884c <HAL_RTC_SetDate+0xcc>
 __HAL_LOCK(hrtc);
 80088e6:	461e      	mov	r6, r3
 80088e8:	e7b0      	b.n	800884c <HAL_RTC_SetDate+0xcc>
 80088ea:	bf00      	nop
 80088ec:	0802ae55 	.word	0x0802ae55

080088f0 <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_FORMAT(Format));
 80088f0:	2a01      	cmp	r2, #1
{
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	4606      	mov	r6, r0
 80088f8:	460c      	mov	r4, r1
 80088fa:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 80088fc:	d904      	bls.n	8008908 <HAL_RTC_SetAlarm+0x18>
 80088fe:	f240 4134 	movw	r1, #1076	; 0x434
 8008902:	48ac      	ldr	r0, [pc, #688]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008904:	f7f9 f915 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008908:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	d007      	beq.n	8008920 <HAL_RTC_SetAlarm+0x30>
 8008910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008914:	d004      	beq.n	8008920 <HAL_RTC_SetAlarm+0x30>
 8008916:	f240 4135 	movw	r1, #1077	; 0x435
 800891a:	48a6      	ldr	r0, [pc, #664]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 800891c:	f7f9 f909 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008920:	69a3      	ldr	r3, [r4, #24]
 8008922:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 8008926:	d004      	beq.n	8008932 <HAL_RTC_SetAlarm+0x42>
 8008928:	f240 4136 	movw	r1, #1078	; 0x436
 800892c:	48a1      	ldr	r0, [pc, #644]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 800892e:	f7f9 f900 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008932:	6a23      	ldr	r3, [r4, #32]
 8008934:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8008938:	d004      	beq.n	8008944 <HAL_RTC_SetAlarm+0x54>
 800893a:	f240 4137 	movw	r1, #1079	; 0x437
 800893e:	489d      	ldr	r0, [pc, #628]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008940:	f7f9 f8f7 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894a:	d304      	bcc.n	8008956 <HAL_RTC_SetAlarm+0x66>
 800894c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8008950:	4898      	ldr	r0, [pc, #608]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008952:	f7f9 f8ee 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008956:	69e3      	ldr	r3, [r4, #28]
 8008958:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800895c:	d00d      	beq.n	800897a <HAL_RTC_SetAlarm+0x8a>
 800895e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008962:	d00a      	beq.n	800897a <HAL_RTC_SetAlarm+0x8a>
 8008964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008968:	d007      	beq.n	800897a <HAL_RTC_SetAlarm+0x8a>
 800896a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800896e:	d004      	beq.n	800897a <HAL_RTC_SetAlarm+0x8a>
 8008970:	f240 4139 	movw	r1, #1081	; 0x439
 8008974:	488f      	ldr	r0, [pc, #572]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008976:	f7f9 f8dc 	bl	8001b32 <assert_failed>
  __HAL_LOCK(hrtc);
 800897a:	7f33      	ldrb	r3, [r6, #28]
 800897c:	2002      	movs	r0, #2
 800897e:	2b01      	cmp	r3, #1
 8008980:	d07f      	beq.n	8008a82 <HAL_RTC_SetAlarm+0x192>
 8008982:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008984:	7770      	strb	r0, [r6, #29]
  __HAL_LOCK(hrtc);
 8008986:	7733      	strb	r3, [r6, #28]
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800898c:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800898e:	2d00      	cmp	r5, #0
 8008990:	f040 8084 	bne.w	8008a9c <HAL_RTC_SetAlarm+0x1ac>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008994:	065b      	lsls	r3, r3, #25
 8008996:	d576      	bpl.n	8008a86 <HAL_RTC_SetAlarm+0x196>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008998:	3801      	subs	r0, #1
 800899a:	280b      	cmp	r0, #11
 800899c:	d904      	bls.n	80089a8 <HAL_RTC_SetAlarm+0xb8>
 800899e:	f240 4144 	movw	r1, #1092	; 0x444
 80089a2:	4884      	ldr	r0, [pc, #528]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 80089a4:	f7f9 f8c5 	bl	8001b32 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80089a8:	7b23      	ldrb	r3, [r4, #12]
 80089aa:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80089ae:	d004      	beq.n	80089ba <HAL_RTC_SetAlarm+0xca>
 80089b0:	f240 4145 	movw	r1, #1093	; 0x445
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80089b4:	487f      	ldr	r0, [pc, #508]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 80089b6:	f7f9 f8bc 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80089ba:	7863      	ldrb	r3, [r4, #1]
 80089bc:	2b3b      	cmp	r3, #59	; 0x3b
 80089be:	d904      	bls.n	80089ca <HAL_RTC_SetAlarm+0xda>
 80089c0:	f240 414c 	movw	r1, #1100	; 0x44c
 80089c4:	487b      	ldr	r0, [pc, #492]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 80089c6:	f7f9 f8b4 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80089ca:	78a3      	ldrb	r3, [r4, #2]
 80089cc:	2b3b      	cmp	r3, #59	; 0x3b
 80089ce:	d904      	bls.n	80089da <HAL_RTC_SetAlarm+0xea>
 80089d0:	f240 414d 	movw	r1, #1101	; 0x44d
 80089d4:	4877      	ldr	r0, [pc, #476]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 80089d6:	f7f9 f8ac 	bl	8001b32 <assert_failed>
 80089da:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80089de:	6a22      	ldr	r2, [r4, #32]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80089e0:	3b01      	subs	r3, #1
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d155      	bne.n	8008a92 <HAL_RTC_SetAlarm+0x1a2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 80089e6:	2b1e      	cmp	r3, #30
 80089e8:	d904      	bls.n	80089f4 <HAL_RTC_SetAlarm+0x104>
 80089ea:	f240 4151 	movw	r1, #1105	; 0x451
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80089ee:	4871      	ldr	r0, [pc, #452]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 80089f0:	f7f9 f89f 	bl	8001b32 <assert_failed>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80089f4:	7820      	ldrb	r0, [r4, #0]
 80089f6:	f7ff fdc9 	bl	800858c <RTC_ByteToBcd2>
 80089fa:	4601      	mov	r1, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80089fc:	7860      	ldrb	r0, [r4, #1]
 80089fe:	f7ff fdc5 	bl	800858c <RTC_ByteToBcd2>
 8008a02:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008a04:	78a0      	ldrb	r0, [r4, #2]
 8008a06:	f7ff fdc1 	bl	800858c <RTC_ByteToBcd2>
 8008a0a:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008a0c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8008a10:	f7ff fdbc 	bl	800858c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a14:	69a5      	ldr	r5, [r4, #24]
 8008a16:	6a23      	ldr	r3, [r4, #32]
 8008a18:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008a1a:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008a1c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8008a20:	433d      	orrs	r5, r7
 8008a22:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8008a26:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8008a2a:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008a2e:	69e3      	ldr	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a30:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008a32:	6867      	ldr	r7, [r4, #4]
 8008a34:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	625a      	str	r2, [r3, #36]	; 0x24
 8008a3a:	2253      	movs	r2, #83	; 0x53
 8008a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008a3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008a40:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a44:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008a46:	f040 8097 	bne.w	8008b78 <HAL_RTC_SetAlarm+0x288>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008a4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a4e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a56:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008a58:	f7fb ff36 	bl	80048c8 <HAL_GetTick>
 8008a5c:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a5e:	6833      	ldr	r3, [r6, #0]
 8008a60:	68dc      	ldr	r4, [r3, #12]
 8008a62:	f014 0401 	ands.w	r4, r4, #1
 8008a66:	d077      	beq.n	8008b58 <HAL_RTC_SetAlarm+0x268>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a68:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a6a:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008a72:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hrtc);
 8008a78:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008a7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8008a7e:	7730      	strb	r0, [r6, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8008a80:	7773      	strb	r3, [r6, #29]
}
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008a86:	2817      	cmp	r0, #23
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008a88:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008a8a:	d996      	bls.n	80089ba <HAL_RTC_SetAlarm+0xca>
 8008a8c:	f240 414a 	movw	r1, #1098	; 0x44a
 8008a90:	e790      	b.n	80089b4 <HAL_RTC_SetAlarm+0xc4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8008a92:	2b06      	cmp	r3, #6
 8008a94:	d9ae      	bls.n	80089f4 <HAL_RTC_SetAlarm+0x104>
 8008a96:	f240 4155 	movw	r1, #1109	; 0x455
 8008a9a:	e7a8      	b.n	80089ee <HAL_RTC_SetAlarm+0xfe>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a9c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8008aa0:	d049      	beq.n	8008b36 <HAL_RTC_SetAlarm+0x246>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008aa2:	f7ff fd7e 	bl	80085a2 <RTC_Bcd2ToByte>
 8008aa6:	3801      	subs	r0, #1
 8008aa8:	b2c0      	uxtb	r0, r0
 8008aaa:	280b      	cmp	r0, #11
 8008aac:	d904      	bls.n	8008ab8 <HAL_RTC_SetAlarm+0x1c8>
 8008aae:	f240 4164 	movw	r1, #1124	; 0x464
 8008ab2:	4840      	ldr	r0, [pc, #256]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008ab4:	f7f9 f83d 	bl	8001b32 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008ab8:	7b23      	ldrb	r3, [r4, #12]
 8008aba:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8008abe:	d004      	beq.n	8008aca <HAL_RTC_SetAlarm+0x1da>
 8008ac0:	f240 4165 	movw	r1, #1125	; 0x465
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008ac4:	483b      	ldr	r0, [pc, #236]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008ac6:	f7f9 f834 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008aca:	7860      	ldrb	r0, [r4, #1]
 8008acc:	f7ff fd69 	bl	80085a2 <RTC_Bcd2ToByte>
 8008ad0:	283b      	cmp	r0, #59	; 0x3b
 8008ad2:	d904      	bls.n	8008ade <HAL_RTC_SetAlarm+0x1ee>
 8008ad4:	f240 416d 	movw	r1, #1133	; 0x46d
 8008ad8:	4836      	ldr	r0, [pc, #216]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008ada:	f7f9 f82a 	bl	8001b32 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008ade:	78a0      	ldrb	r0, [r4, #2]
 8008ae0:	f7ff fd5f 	bl	80085a2 <RTC_Bcd2ToByte>
 8008ae4:	283b      	cmp	r0, #59	; 0x3b
 8008ae6:	d904      	bls.n	8008af2 <HAL_RTC_SetAlarm+0x202>
 8008ae8:	f240 416e 	movw	r1, #1134	; 0x46e
 8008aec:	4831      	ldr	r0, [pc, #196]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008aee:	f7f9 f820 	bl	8001b32 <assert_failed>
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008af2:	6a23      	ldr	r3, [r4, #32]
 8008af4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8008af8:	bb2b      	cbnz	r3, 8008b46 <HAL_RTC_SetAlarm+0x256>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008afa:	f7ff fd52 	bl	80085a2 <RTC_Bcd2ToByte>
 8008afe:	3801      	subs	r0, #1
 8008b00:	b2c0      	uxtb	r0, r0
 8008b02:	281e      	cmp	r0, #30
 8008b04:	d904      	bls.n	8008b10 <HAL_RTC_SetAlarm+0x220>
 8008b06:	f240 4172 	movw	r1, #1138	; 0x472
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008b0a:	482a      	ldr	r0, [pc, #168]	; (8008bb4 <HAL_RTC_SetAlarm+0x2c4>)
 8008b0c:	f7f9 f811 	bl	8001b32 <assert_failed>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b10:	6a23      	ldr	r3, [r4, #32]
 8008b12:	69a5      	ldr	r5, [r4, #24]
 8008b14:	431d      	orrs	r5, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008b16:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b18:	431d      	orrs	r5, r3
 8008b1a:	7823      	ldrb	r3, [r4, #0]
 8008b1c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b20:	7863      	ldrb	r3, [r4, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b22:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008b26:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008b2c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008b30:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8008b34:	e77b      	b.n	8008a2e <HAL_RTC_SetAlarm+0x13e>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b36:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008b38:	f7ff fd33 	bl	80085a2 <RTC_Bcd2ToByte>
 8008b3c:	2817      	cmp	r0, #23
 8008b3e:	d9c4      	bls.n	8008aca <HAL_RTC_SetAlarm+0x1da>
 8008b40:	f240 416a 	movw	r1, #1130	; 0x46a
 8008b44:	e7be      	b.n	8008ac4 <HAL_RTC_SetAlarm+0x1d4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008b46:	f7ff fd2c 	bl	80085a2 <RTC_Bcd2ToByte>
 8008b4a:	3801      	subs	r0, #1
 8008b4c:	b2c0      	uxtb	r0, r0
 8008b4e:	2806      	cmp	r0, #6
 8008b50:	d9de      	bls.n	8008b10 <HAL_RTC_SetAlarm+0x220>
 8008b52:	f240 4176 	movw	r1, #1142	; 0x476
 8008b56:	e7d8      	b.n	8008b0a <HAL_RTC_SetAlarm+0x21a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b58:	f7fb feb6 	bl	80048c8 <HAL_GetTick>
 8008b5c:	eba0 0008 	sub.w	r0, r0, r8
 8008b60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008b64:	f67f af7b 	bls.w	8008a5e <HAL_RTC_SetAlarm+0x16e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b68:	6833      	ldr	r3, [r6, #0]
 8008b6a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b6c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b6e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b70:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8008b72:	7734      	strb	r4, [r6, #28]
        return HAL_TIMEOUT;
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008b78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b7c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b84:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8008b86:	f7fb fe9f 	bl	80048c8 <HAL_GetTick>
 8008b8a:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	68dc      	ldr	r4, [r3, #12]
 8008b90:	f014 0402 	ands.w	r4, r4, #2
 8008b94:	d005      	beq.n	8008ba2 <HAL_RTC_SetAlarm+0x2b2>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008b96:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008b98:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba0:	e767      	b.n	8008a72 <HAL_RTC_SetAlarm+0x182>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ba2:	f7fb fe91 	bl	80048c8 <HAL_GetTick>
 8008ba6:	eba0 0008 	sub.w	r0, r0, r8
 8008baa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008bae:	d9ed      	bls.n	8008b8c <HAL_RTC_SetAlarm+0x29c>
 8008bb0:	e7da      	b.n	8008b68 <HAL_RTC_SetAlarm+0x278>
 8008bb2:	bf00      	nop
 8008bb4:	0802ae55 	.word	0x0802ae55

08008bb8 <HAL_RTCEx_SetTimeStamp>:
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 8008bb8:	f031 0308 	bics.w	r3, r1, #8
{
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	460e      	mov	r6, r1
 8008bc2:	4615      	mov	r5, r2
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 8008bc4:	d003      	beq.n	8008bce <HAL_RTCEx_SetTimeStamp+0x16>
 8008bc6:	2192      	movs	r1, #146	; 0x92
 8008bc8:	4817      	ldr	r0, [pc, #92]	; (8008c28 <HAL_RTCEx_SetTimeStamp+0x70>)
 8008bca:	f7f8 ffb2 	bl	8001b32 <assert_failed>
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 8008bce:	f035 0302 	bics.w	r3, r5, #2
 8008bd2:	d005      	beq.n	8008be0 <HAL_RTCEx_SetTimeStamp+0x28>
 8008bd4:	2d04      	cmp	r5, #4
 8008bd6:	d003      	beq.n	8008be0 <HAL_RTCEx_SetTimeStamp+0x28>
 8008bd8:	2193      	movs	r1, #147	; 0x93
 8008bda:	4813      	ldr	r0, [pc, #76]	; (8008c28 <HAL_RTCEx_SetTimeStamp+0x70>)
 8008bdc:	f7f8 ffa9 	bl	8001b32 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008be0:	7f23      	ldrb	r3, [r4, #28]
 8008be2:	2002      	movs	r0, #2
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d01d      	beq.n	8008c24 <HAL_RTCEx_SetTimeStamp+0x6c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008be8:	6823      	ldr	r3, [r4, #0]

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bea:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bec:	7760      	strb	r0, [r4, #29]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bee:	2000      	movs	r0, #0
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008bf0:	6899      	ldr	r1, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8008bf4:	2253      	movs	r2, #83	; 0x53
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008bf6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008bfe:	f021 0108 	bic.w	r1, r1, #8
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c02:	f022 0206 	bic.w	r2, r2, #6
  tmpreg|= TimeStampEdge;
 8008c06:	4331      	orrs	r1, r6
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c0c:	4315      	orrs	r5, r2
 8008c0e:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c10:	6099      	str	r1, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c18:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c1a:	22ff      	movs	r2, #255	; 0xff
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8008c1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8008c20:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8008c22:	7763      	strb	r3, [r4, #29]

  return HAL_OK;
}
 8008c24:	bd70      	pop	{r4, r5, r6, pc}
 8008c26:	bf00      	nop
 8008c28:	0802ae93 	.word	0x0802ae93

08008c2c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008c2c:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008c2e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	f641 3358 	movw	r3, #7000	; 0x1b58
 8008c36:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8008c3a:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008c3c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8008c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c42:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008c44:	f112 32ff 	adds.w	r2, r2, #4294967295
 8008c48:	d207      	bcs.n	8008c5a <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008c4a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c52:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008c56:	2003      	movs	r0, #3
      break;
 8008c58:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008c5a:	680b      	ldr	r3, [r1, #0]
 8008c5c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008c60:	d1f0      	bne.n	8008c44 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008c62:	4618      	mov	r0, r3

  return status;
}
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	200000b8 	.word	0x200000b8

08008c6c <HAL_SAI_Init>:
{
 8008c6c:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8008c6e:	4604      	mov	r4, r0
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f000 81e0 	beq.w	8009036 <HAL_SAI_Init+0x3ca>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 8008c76:	6803      	ldr	r3, [r0, #0]
 8008c78:	4eba      	ldr	r6, [pc, #744]	; (8008f64 <HAL_SAI_Init+0x2f8>)
 8008c7a:	42b3      	cmp	r3, r6
 8008c7c:	d00e      	beq.n	8008c9c <HAL_SAI_Init+0x30>
 8008c7e:	4aba      	ldr	r2, [pc, #744]	; (8008f68 <HAL_SAI_Init+0x2fc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00b      	beq.n	8008c9c <HAL_SAI_Init+0x30>
 8008c84:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d007      	beq.n	8008c9c <HAL_SAI_Init+0x30>
 8008c8c:	3220      	adds	r2, #32
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d004      	beq.n	8008c9c <HAL_SAI_Init+0x30>
 8008c92:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8008c96:	48b5      	ldr	r0, [pc, #724]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008c98:	f7f8 ff4b 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 8008c9c:	69e3      	ldr	r3, [r4, #28]
 8008c9e:	4ab4      	ldr	r2, [pc, #720]	; (8008f70 <HAL_SAI_Init+0x304>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d021      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008ca4:	4ab3      	ldr	r2, [pc, #716]	; (8008f74 <HAL_SAI_Init+0x308>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d01e      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008caa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d01a      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cb2:	f64a 4244 	movw	r2, #44100	; 0xac44
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d016      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8008cbe:	d013      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cc0:	f245 6222 	movw	r2, #22050	; 0x5622
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00f      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cc8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008ccc:	d00c      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cce:	f642 3211 	movw	r2, #11025	; 0x2b11
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d008      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cd6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008cda:	d005      	beq.n	8008ce8 <HAL_SAI_Init+0x7c>
 8008cdc:	b123      	cbz	r3, 8008ce8 <HAL_SAI_Init+0x7c>
 8008cde:	f240 1173 	movw	r1, #371	; 0x173
 8008ce2:	48a2      	ldr	r0, [pc, #648]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008ce4:	f7f8 ff25 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8008ce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cea:	f033 0204 	bics.w	r2, r3, #4
 8008cee:	d006      	beq.n	8008cfe <HAL_SAI_Init+0x92>
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d004      	beq.n	8008cfe <HAL_SAI_Init+0x92>
 8008cf4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8008cf8:	489c      	ldr	r0, [pc, #624]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008cfa:	f7f8 ff1a 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8008cfe:	6863      	ldr	r3, [r4, #4]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d904      	bls.n	8008d0e <HAL_SAI_Init+0xa2>
 8008d04:	f240 1175 	movw	r1, #373	; 0x175
 8008d08:	4898      	ldr	r0, [pc, #608]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d0a:	f7f8 ff12 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8008d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d10:	f023 0220 	bic.w	r2, r3, #32
 8008d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d006      	beq.n	8008d2a <HAL_SAI_Init+0xbe>
 8008d1c:	2a80      	cmp	r2, #128	; 0x80
 8008d1e:	d004      	beq.n	8008d2a <HAL_SAI_Init+0xbe>
 8008d20:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8008d24:	4891      	ldr	r0, [pc, #580]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d26:	f7f8 ff04 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 8008d2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d2c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8008d30:	d004      	beq.n	8008d3c <HAL_SAI_Init+0xd0>
 8008d32:	f240 1177 	movw	r1, #375	; 0x177
 8008d36:	488d      	ldr	r0, [pc, #564]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d38:	f7f8 fefb 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8008d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d904      	bls.n	8008d4c <HAL_SAI_Init+0xe0>
 8008d42:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8008d46:	4889      	ldr	r0, [pc, #548]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d48:	f7f8 fef3 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8008d4c:	68a3      	ldr	r3, [r4, #8]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d904      	bls.n	8008d5c <HAL_SAI_Init+0xf0>
 8008d52:	f240 1179 	movw	r1, #377	; 0x179
 8008d56:	4885      	ldr	r0, [pc, #532]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d58:	f7f8 feeb 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8008d62:	d004      	beq.n	8008d6e <HAL_SAI_Init+0x102>
 8008d64:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8008d68:	4880      	ldr	r0, [pc, #512]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d6a:	f7f8 fee2 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8008d6e:	6963      	ldr	r3, [r4, #20]
 8008d70:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8008d74:	d004      	beq.n	8008d80 <HAL_SAI_Init+0x114>
 8008d76:	f240 117b 	movw	r1, #379	; 0x17b
 8008d7a:	487c      	ldr	r0, [pc, #496]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d7c:	f7f8 fed9 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 8008d80:	69a3      	ldr	r3, [r4, #24]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d904      	bls.n	8008d90 <HAL_SAI_Init+0x124>
 8008d86:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8008d8a:	4878      	ldr	r0, [pc, #480]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d8c:	f7f8 fed1 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8008d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d92:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008d96:	d004      	beq.n	8008da2 <HAL_SAI_Init+0x136>
 8008d98:	f240 117d 	movw	r1, #381	; 0x17d
 8008d9c:	4873      	ldr	r0, [pc, #460]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008d9e:	f7f8 fec8 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8008da2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008da4:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8008da8:	d00c      	beq.n	8008dc4 <HAL_SAI_Init+0x158>
 8008daa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008dae:	d009      	beq.n	8008dc4 <HAL_SAI_Init+0x158>
 8008db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008db4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008db8:	d004      	beq.n	8008dc4 <HAL_SAI_Init+0x158>
 8008dba:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8008dbe:	486b      	ldr	r0, [pc, #428]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008dc0:	f7f8 feb7 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8008dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dc6:	f033 0310 	bics.w	r3, r3, #16
 8008dca:	d004      	beq.n	8008dd6 <HAL_SAI_Init+0x16a>
 8008dcc:	f240 117f 	movw	r1, #383	; 0x17f
 8008dd0:	4866      	ldr	r0, [pc, #408]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008dd2:	f7f8 feae 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d904      	bls.n	8008de6 <HAL_SAI_Init+0x17a>
 8008ddc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008de0:	4862      	ldr	r0, [pc, #392]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008de2:	f7f8 fea6 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8008de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de8:	3b08      	subs	r3, #8
 8008dea:	2bf8      	cmp	r3, #248	; 0xf8
 8008dec:	d904      	bls.n	8008df8 <HAL_SAI_Init+0x18c>
 8008dee:	f240 1183 	movw	r1, #387	; 0x183
 8008df2:	485e      	ldr	r0, [pc, #376]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008df4:	f7f8 fe9d 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8008df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8008dfe:	d904      	bls.n	8008e0a <HAL_SAI_Init+0x19e>
 8008e00:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8008e04:	4859      	ldr	r0, [pc, #356]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e06:	f7f8 fe94 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 8008e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008e0c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008e10:	d004      	beq.n	8008e1c <HAL_SAI_Init+0x1b0>
 8008e12:	f240 1185 	movw	r1, #389	; 0x185
 8008e16:	4855      	ldr	r0, [pc, #340]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e18:	f7f8 fe8b 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8008e1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008e1e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8008e22:	d004      	beq.n	8008e2e <HAL_SAI_Init+0x1c2>
 8008e24:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8008e28:	4850      	ldr	r0, [pc, #320]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e2a:	f7f8 fe82 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8008e2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e30:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8008e34:	d004      	beq.n	8008e40 <HAL_SAI_Init+0x1d4>
 8008e36:	f240 1187 	movw	r1, #391	; 0x187
 8008e3a:	484c      	ldr	r0, [pc, #304]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e3c:	f7f8 fe79 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8008e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008e42:	2b18      	cmp	r3, #24
 8008e44:	d904      	bls.n	8008e50 <HAL_SAI_Init+0x1e4>
 8008e46:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8008e4a:	4848      	ldr	r0, [pc, #288]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e4c:	f7f8 fe71 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8008e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e52:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008e56:	d006      	beq.n	8008e66 <HAL_SAI_Init+0x1fa>
 8008e58:	2b80      	cmp	r3, #128	; 0x80
 8008e5a:	d004      	beq.n	8008e66 <HAL_SAI_Init+0x1fa>
 8008e5c:	f240 118b 	movw	r1, #395	; 0x18b
 8008e60:	4842      	ldr	r0, [pc, #264]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e62:	f7f8 fe66 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 8008e66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	2b0f      	cmp	r3, #15
 8008e6c:	d904      	bls.n	8008e78 <HAL_SAI_Init+0x20c>
 8008e6e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008e72:	483e      	ldr	r0, [pc, #248]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e74:	f7f8 fe5d 	bl	8001b32 <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 8008e78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7e:	d304      	bcc.n	8008e8a <HAL_SAI_Init+0x21e>
 8008e80:	f240 118d 	movw	r1, #397	; 0x18d
 8008e84:	4839      	ldr	r0, [pc, #228]	; (8008f6c <HAL_SAI_Init+0x300>)
 8008e86:	f7f8 fe54 	bl	8001b32 <assert_failed>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8008e8a:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8008e8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008e92:	b923      	cbnz	r3, 8008e9e <HAL_SAI_Init+0x232>
    hsai->Lock = HAL_UNLOCKED;
 8008e94:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7f8 ffa1 	bl	8001de0 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8008e9e:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8008ea0:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8008ea2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8008ea6:	f7ff fec1 	bl	8008c2c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	f000 80b1 	beq.w	8009014 <HAL_SAI_Init+0x3a8>
  uint32_t tmpregisterGCR = 0;
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2320      	moveq	r3, #32
 8008eb8:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8008eba:	68a2      	ldr	r2, [r4, #8]
 8008ebc:	2a02      	cmp	r2, #2
 8008ebe:	f000 80ad 	beq.w	800901c <HAL_SAI_Init+0x3b0>
 8008ec2:	2a03      	cmp	r2, #3
 8008ec4:	f000 80a8 	beq.w	8009018 <HAL_SAI_Init+0x3ac>
  uint32_t syncen_bits = 0;
 8008ec8:	2a01      	cmp	r2, #1
 8008eca:	bf0c      	ite	eq
 8008ecc:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8008ed0:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ed2:	6822      	ldr	r2, [r4, #0]
 8008ed4:	42b2      	cmp	r2, r6
 8008ed6:	d003      	beq.n	8008ee0 <HAL_SAI_Init+0x274>
 8008ed8:	4923      	ldr	r1, [pc, #140]	; (8008f68 <HAL_SAI_Init+0x2fc>)
 8008eda:	428a      	cmp	r2, r1
 8008edc:	f040 80a1 	bne.w	8009022 <HAL_SAI_Init+0x3b6>
    SAI1->GCR = tmpregisterGCR;
 8008ee0:	4925      	ldr	r1, [pc, #148]	; (8008f78 <HAL_SAI_Init+0x30c>)
    SAI2->GCR = tmpregisterGCR;
 8008ee2:	600b      	str	r3, [r1, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008ee4:	69e3      	ldr	r3, [r4, #28]
 8008ee6:	b313      	cbz	r3, 8008f2e <HAL_SAI_Init+0x2c2>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008ee8:	42b2      	cmp	r2, r6
 8008eea:	d003      	beq.n	8008ef4 <HAL_SAI_Init+0x288>
 8008eec:	4b1e      	ldr	r3, [pc, #120]	; (8008f68 <HAL_SAI_Init+0x2fc>)
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	f040 8099 	bne.w	8009026 <HAL_SAI_Init+0x3ba>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008ef4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008ef8:	f7ff fa30 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <HAL_SAI_Init+0x310>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d002      	beq.n	8008f0a <HAL_SAI_Init+0x29e>
 8008f04:	3220      	adds	r2, #32
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d103      	bne.n	8008f12 <HAL_SAI_Init+0x2a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008f0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008f0e:	f7ff fa25 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008f12:	220a      	movs	r2, #10
 8008f14:	69e3      	ldr	r3, [r4, #28]
 8008f16:	4350      	muls	r0, r2
 8008f18:	025b      	lsls	r3, r3, #9
 8008f1a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8008f1e:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8008f22:	fb02 0013 	mls	r0, r2, r3, r0
 8008f26:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8008f28:	bf08      	it	eq
 8008f2a:	3301      	addeq	r3, #1
 8008f2c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f2e:	6863      	ldr	r3, [r4, #4]
 8008f30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008f32:	f033 0102 	bics.w	r1, r3, #2
 8008f36:	d178      	bne.n	800902a <HAL_SAI_Init+0x3be>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008f38:	2a01      	cmp	r2, #1
 8008f3a:	bf18      	it	ne
 8008f3c:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f40:	6822      	ldr	r2, [r4, #0]
 8008f42:	480f      	ldr	r0, [pc, #60]	; (8008f80 <HAL_SAI_Init+0x314>)
 8008f44:	6816      	ldr	r6, [r2, #0]
 8008f46:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f48:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008f4a:	4333      	orrs	r3, r6
 8008f4c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f4e:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f50:	4333      	orrs	r3, r6
 8008f52:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008f54:	6810      	ldr	r0, [r2, #0]
 8008f56:	4333      	orrs	r3, r6
 8008f58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f5a:	4333      	orrs	r3, r6
 8008f5c:	6926      	ldr	r6, [r4, #16]
 8008f5e:	4333      	orrs	r3, r6
 8008f60:	e010      	b.n	8008f84 <HAL_SAI_Init+0x318>
 8008f62:	bf00      	nop
 8008f64:	40015804 	.word	0x40015804
 8008f68:	40015824 	.word	0x40015824
 8008f6c:	0802aed4 	.word	0x0802aed4
 8008f70:	0002ee00 	.word	0x0002ee00
 8008f74:	00017700 	.word	0x00017700
 8008f78:	40015800 	.word	0x40015800
 8008f7c:	40015c04 	.word	0x40015c04
 8008f80:	ff05c010 	.word	0xff05c010
 8008f84:	6966      	ldr	r6, [r4, #20]
 8008f86:	4333      	orrs	r3, r6
 8008f88:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008f8a:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f8c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008f90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f92:	432b      	orrs	r3, r5
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008f98:	6853      	ldr	r3, [r2, #4]
 8008f9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008f9e:	f023 030f 	bic.w	r3, r3, #15
 8008fa2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008fa4:	69a3      	ldr	r3, [r4, #24]
 8008fa6:	6851      	ldr	r1, [r2, #4]
 8008fa8:	4303      	orrs	r3, r0
 8008faa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008fac:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008fae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008fb4:	4b21      	ldr	r3, [pc, #132]	; (800903c <HAL_SAI_Init+0x3d0>)
 8008fb6:	6891      	ldr	r1, [r2, #8]
 8008fb8:	400b      	ands	r3, r1
 8008fba:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008fbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008fbe:	6891      	ldr	r1, [r2, #8]
 8008fc0:	4303      	orrs	r3, r0
 8008fc2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008fc4:	4303      	orrs	r3, r0
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008fca:	3901      	subs	r1, #1
 8008fcc:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008fce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008fd0:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008fd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008fd6:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008fd8:	68d3      	ldr	r3, [r2, #12]
 8008fda:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8008fde:	f023 030f 	bic.w	r3, r3, #15
 8008fe2:	041b      	lsls	r3, r3, #16
 8008fe4:	0c1b      	lsrs	r3, r3, #16
 8008fe6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008fea:	68d1      	ldr	r1, [r2, #12]
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008ff0:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008ff2:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008ff4:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008ffa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ffc:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008ffe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009002:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8009004:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009006:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800900a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 800900e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8009012:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009014:	2310      	movs	r3, #16
 8009016:	e750      	b.n	8008eba <HAL_SAI_Init+0x24e>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009018:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800901c:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8009020:	e757      	b.n	8008ed2 <HAL_SAI_Init+0x266>
    SAI2->GCR = tmpregisterGCR;
 8009022:	4907      	ldr	r1, [pc, #28]	; (8009040 <HAL_SAI_Init+0x3d4>)
 8009024:	e75d      	b.n	8008ee2 <HAL_SAI_Init+0x276>
    uint32_t freq = 0;
 8009026:	2000      	movs	r0, #0
 8009028:	e768      	b.n	8008efc <HAL_SAI_Init+0x290>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800902a:	2a01      	cmp	r2, #1
 800902c:	bf14      	ite	ne
 800902e:	2100      	movne	r1, #0
 8009030:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8009034:	e784      	b.n	8008f40 <HAL_SAI_Init+0x2d4>
    return HAL_ERROR;
 8009036:	2001      	movs	r0, #1
}
 8009038:	bd70      	pop	{r4, r5, r6, pc}
 800903a:	bf00      	nop
 800903c:	fff88000 	.word	0xfff88000
 8009040:	40015c00 	.word	0x40015c00

08009044 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009044:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800904a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800904e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009050:	4770      	bx	lr

08009052 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009056:	4605      	mov	r5, r0
 8009058:	b089      	sub	sp, #36	; 0x24
 800905a:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800905c:	f7fb fc34 	bl	80048c8 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8009060:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8009062:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009064:	2108      	movs	r1, #8
 8009066:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800906c:	f003 f8d2 	bl	800c214 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8009070:	4604      	mov	r4, r0
 8009072:	bb40      	cbnz	r0, 80090c6 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8009074:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009076:	6828      	ldr	r0, [r5, #0]
 8009078:	0409      	lsls	r1, r1, #16
 800907a:	f003 f9d5 	bl	800c428 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800907e:	4604      	mov	r4, r0
 8009080:	bb08      	cbnz	r0, 80090c6 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009082:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009086:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8009088:	a902      	add	r1, sp, #8
 800908a:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800908c:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800908e:	2308      	movs	r3, #8
 8009090:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009092:	2330      	movs	r3, #48	; 0x30
 8009094:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009096:	2302      	movs	r3, #2
 8009098:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800909a:	2301      	movs	r3, #1
 800909c:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 800909e:	f003 f86b 	bl	800c178 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090a2:	6828      	ldr	r0, [r5, #0]
 80090a4:	f003 f9f1 	bl	800c48a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 80090a8:	4604      	mov	r4, r0
 80090aa:	b960      	cbnz	r0, 80090c6 <SD_FindSCR+0x74>
 80090ac:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80090ae:	f240 482a 	movw	r8, #1066	; 0x42a
 80090b2:	6828      	ldr	r0, [r5, #0]
 80090b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80090b6:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80090ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80090bc:	d007      	beq.n	80090ce <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80090be:	0719      	lsls	r1, r3, #28
 80090c0:	d518      	bpl.n	80090f4 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80090c2:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80090c4:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 80090c6:	4620      	mov	r0, r4
 80090c8:	b009      	add	sp, #36	; 0x24
 80090ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	d507      	bpl.n	80090e2 <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80090d2:	f002 ff61 	bl	800bf98 <SDMMC_ReadFIFO>
 80090d6:	ab08      	add	r3, sp, #32
 80090d8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 80090dc:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80090de:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090e2:	f7fb fbf1 	bl	80048c8 <HAL_GetTick>
 80090e6:	eba0 0009 	sub.w	r0, r0, r9
 80090ea:	3001      	adds	r0, #1
 80090ec:	d1e1      	bne.n	80090b2 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80090ee:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80090f2:	e7e8      	b.n	80090c6 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80090f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80090f6:	079a      	lsls	r2, r3, #30
 80090f8:	d501      	bpl.n	80090fe <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80090fa:	2402      	movs	r4, #2
 80090fc:	e7e2      	b.n	80090c4 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80090fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009100:	069b      	lsls	r3, r3, #26
 8009102:	d501      	bpl.n	8009108 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009104:	2420      	movs	r4, #32
 8009106:	e7dd      	b.n	80090c4 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009108:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800910c:	6383      	str	r3, [r0, #56]	; 0x38
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009112:	6073      	str	r3, [r6, #4]
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009118:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800911a:	e7d4      	b.n	80090c6 <SD_FindSCR+0x74>

0800911c <HAL_SD_ReadBlocks_DMA>:
{
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	b086      	sub	sp, #24
 8009124:	4605      	mov	r5, r0
 8009126:	461f      	mov	r7, r3
  if(NULL == pData)
 8009128:	460a      	mov	r2, r1
 800912a:	b939      	cbnz	r1, 800913c <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800912c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800912e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009132:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009134:	2001      	movs	r0, #1
}
 8009136:	b006      	add	sp, #24
 8009138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800913c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009140:	b2c0      	uxtb	r0, r0
 8009142:	2801      	cmp	r0, #1
 8009144:	d166      	bne.n	8009214 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009146:	19f4      	adds	r4, r6, r7
 8009148:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800914a:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800914c:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800914e:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009150:	d904      	bls.n	800915c <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009152:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009154:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009158:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 800915a:	e7ec      	b.n	8009136 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 800915c:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800915e:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009160:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8009164:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009168:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800916a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800916c:	492a      	ldr	r1, [pc, #168]	; (8009218 <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800916e:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8009172:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009174:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8009176:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009178:	4928      	ldr	r1, [pc, #160]	; (800921c <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 800917a:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800917c:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009180:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009182:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8009186:	f7fb ff91 	bl	80050ac <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 800918a:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800918c:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 800918e:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 8009190:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009192:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 8009194:	f043 0308 	orr.w	r3, r3, #8
 8009198:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800919a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800919c:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091a2:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091a6:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 80091aa:	bf18      	it	ne
 80091ac:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091ae:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091b0:	2302      	movs	r3, #2
 80091b2:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 80091b8:	f002 ffde 	bl	800c178 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80091bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80091c0:	6828      	ldr	r0, [r5, #0]
 80091c2:	f003 f827 	bl	800c214 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80091c6:	b148      	cbz	r0, 80091dc <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80091d2:	4318      	orrs	r0, r3
 80091d4:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091d6:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80091da:	e7ab      	b.n	8009134 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 80091dc:	2f01      	cmp	r7, #1
 80091de:	d912      	bls.n	8009206 <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091e0:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80091e2:	4631      	mov	r1, r6
 80091e4:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80091e6:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80091e8:	f003 f844 	bl	800c274 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0a2      	beq.n	8009136 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80091fa:	4318      	orrs	r0, r3
 80091fc:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091fe:	2001      	movs	r0, #1
 8009200:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009204:	e797      	b.n	8009136 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009206:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009208:	4631      	mov	r1, r6
 800920a:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800920c:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800920e:	f003 f819 	bl	800c244 <SDMMC_CmdReadSingleBlock>
 8009212:	e7eb      	b.n	80091ec <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8009214:	2002      	movs	r0, #2
 8009216:	e78e      	b.n	8009136 <HAL_SD_ReadBlocks_DMA+0x1a>
 8009218:	0800931b 	.word	0x0800931b
 800921c:	08009921 	.word	0x08009921

08009220 <HAL_SD_WriteBlocks_DMA>:
{
 8009220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	b087      	sub	sp, #28
 8009226:	4615      	mov	r5, r2
 8009228:	461e      	mov	r6, r3
  if(NULL == pData)
 800922a:	460f      	mov	r7, r1
 800922c:	b931      	cbnz	r1, 800923c <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800922e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009234:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009236:	2001      	movs	r0, #1
}
 8009238:	b007      	add	sp, #28
 800923a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800923c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009240:	b2c0      	uxtb	r0, r0
 8009242:	2801      	cmp	r0, #1
 8009244:	d162      	bne.n	800930c <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009246:	18eb      	adds	r3, r5, r3
 8009248:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800924a:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800924c:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800924e:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009250:	d904      	bls.n	800925c <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009258:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800925a:	e7ed      	b.n	8009238 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 800925c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800925e:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009260:	492b      	ldr	r1, [pc, #172]	; (8009310 <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 8009262:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009266:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8009268:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800926a:	f043 031a 	orr.w	r3, r3, #26
 800926e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009272:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009274:	4927      	ldr	r1, [pc, #156]	; (8009314 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8009276:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009278:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800927a:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800927e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009280:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8009282:	bf18      	it	ne
 8009284:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009286:	f002 ffc5 	bl	800c214 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800928a:	b150      	cbz	r0, 80092a2 <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009296:	4318      	orrs	r0, r3
 8009298:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800929a:	2001      	movs	r0, #1
 800929c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80092a0:	e7ca      	b.n	8009238 <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 80092a2:	2e01      	cmp	r6, #1
 80092a4:	d90f      	bls.n	80092c6 <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80092a6:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80092a8:	4629      	mov	r1, r5
 80092aa:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80092ac:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80092ae:	f003 f811 	bl	800c2d4 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80092b2:	4605      	mov	r5, r0
 80092b4:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092b6:	b168      	cbz	r0, 80092d4 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80092b8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80092bc:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80092be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80092c0:	4305      	orrs	r5, r0
 80092c2:	63a5      	str	r5, [r4, #56]	; 0x38
 80092c4:	e7e9      	b.n	800929a <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80092c6:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80092c8:	4629      	mov	r1, r5
 80092ca:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80092cc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80092ce:	f002 ffe9 	bl	800c2a4 <SDMMC_CmdWriteSingleBlock>
 80092d2:	e7ee      	b.n	80092b2 <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 80092d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80092d6:	0276      	lsls	r6, r6, #9
 80092d8:	3280      	adds	r2, #128	; 0x80
 80092da:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 80092dc:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80092e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 80092e2:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80092e6:	08b3      	lsrs	r3, r6, #2
 80092e8:	f7fb fee0 	bl	80050ac <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092ec:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 80092f0:	4669      	mov	r1, sp
 80092f2:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80092f4:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092f6:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092f8:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092fc:	2390      	movs	r3, #144	; 0x90
 80092fe:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009300:	2301      	movs	r3, #1
 8009302:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8009304:	f002 ff38 	bl	800c178 <SDMMC_ConfigData>
    return HAL_OK;
 8009308:	4628      	mov	r0, r5
 800930a:	e795      	b.n	8009238 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 800930c:	2002      	movs	r0, #2
 800930e:	e793      	b.n	8009238 <HAL_SD_WriteBlocks_DMA+0x18>
 8009310:	08009045 	.word	0x08009045
 8009314:	08009921 	.word	0x08009921

08009318 <HAL_SD_ErrorCallback>:
 8009318:	4770      	bx	lr

0800931a <SD_DMAReceiveCplt>:
{
 800931a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800931c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800931e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009320:	2b82      	cmp	r3, #130	; 0x82
 8009322:	d109      	bne.n	8009338 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	f002 ffed 	bl	800c304 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800932a:	b128      	cbz	r0, 8009338 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 800932c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800932e:	4318      	orrs	r0, r3
 8009330:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff fff0 	bl	8009318 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009338:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 800933a:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	f022 0208 	bic.w	r2, r2, #8
 8009342:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009344:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800934a:	2301      	movs	r3, #1
 800934c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8009350:	f7f9 fa8c 	bl	800286c <HAL_SD_RxCpltCallback>
 8009354:	bd10      	pop	{r4, pc}

08009356 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8009356:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8009358:	0f9a      	lsrs	r2, r3, #30
 800935a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800935c:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8009360:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8009362:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8009366:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8009368:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800936c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800936e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009372:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8009374:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009376:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8009378:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800937a:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800937c:	0112      	lsls	r2, r2, #4
 800937e:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009380:	88ca      	ldrh	r2, [r1, #6]
{
 8009382:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009384:	b292      	uxth	r2, r2
 8009386:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800938a:	4322      	orrs	r2, r4
 800938c:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800938e:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8009392:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8009394:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8009398:	09d4      	lsrs	r4, r2, #7
 800939a:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800939c:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80093a0:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80093a2:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80093a6:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80093a8:	f3c2 1400 	ubfx	r4, r2, #4, #1
 80093ac:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80093ae:	2400      	movs	r4, #0
 80093b0:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80093b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80093b4:	2c00      	cmp	r4, #0
 80093b6:	f040 8083 	bne.w	80094c0 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80093ba:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 80093bc:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80093be:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 80093c2:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80093c6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 80093c8:	690a      	ldr	r2, [r1, #16]
 80093ca:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80093cc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 80093ce:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80093d0:	690b      	ldr	r3, [r1, #16]
 80093d2:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80093d6:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80093d8:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80093dc:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80093de:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80093e2:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80093e4:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80093e8:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80093ea:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80093ee:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80093f0:	0bd3      	lsrs	r3, r2, #15
 80093f2:	f003 0306 	and.w	r3, r3, #6
 80093f6:	760b      	strb	r3, [r1, #24]
 80093f8:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80093fc:	7e0c      	ldrb	r4, [r1, #24]
 80093fe:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009402:	4322      	orrs	r2, r4
 8009404:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009406:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009408:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800940a:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800940c:	3402      	adds	r4, #2
 800940e:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009410:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009412:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009414:	7a0d      	ldrb	r5, [r1, #8]
 8009416:	40ac      	lsls	r4, r5
 8009418:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800941a:	0a64      	lsrs	r4, r4, #9
 800941c:	4362      	muls	r2, r4
 800941e:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8009420:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009424:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009426:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800942a:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800942c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800942e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009432:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8009434:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009436:	7e8a      	ldrb	r2, [r1, #26]
 8009438:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800943c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009440:	4322      	orrs	r2, r4
 8009442:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009444:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8009446:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009448:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800944a:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800944e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8009450:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8009454:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8009456:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800945a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800945c:	0d9a      	lsrs	r2, r3, #22
 800945e:	f002 020c 	and.w	r2, r2, #12
 8009462:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009464:	7fca      	ldrb	r2, [r1, #31]
 8009466:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8009468:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800946a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800946c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8009470:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009474:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8009478:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800947c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8009480:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009484:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8009488:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800948c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8009490:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009494:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8009498:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800949c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80094a0:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80094a4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80094a8:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80094ac:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80094b0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80094b4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80094b8:	2301      	movs	r3, #1
 80094ba:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80094be:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094c0:	2c01      	cmp	r4, #1
 80094c2:	d11a      	bne.n	80094fa <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80094c4:	041b      	lsls	r3, r3, #16
 80094c6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80094ca:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80094cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 80094ce:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80094d0:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 80094d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80094d6:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80094d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80094dc:	690c      	ldr	r4, [r1, #16]
 80094de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80094e2:	4322      	orrs	r2, r4
 80094e4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	0292      	lsls	r2, r2, #10
 80094ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094ee:	6542      	str	r2, [r0, #84]	; 0x54
 80094f0:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80094f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094f6:	6582      	str	r2, [r0, #88]	; 0x58
 80094f8:	e794      	b.n	8009424 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80094fa:	6803      	ldr	r3, [r0, #0]
 80094fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009502:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009508:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800950a:	2301      	movs	r3, #1
 800950c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8009510:	4618      	mov	r0, r3
 8009512:	bd30      	pop	{r4, r5, pc}

08009514 <HAL_SD_InitCard>:
{
 8009514:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009516:	2376      	movs	r3, #118	; 0x76
{
 8009518:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800951a:	2500      	movs	r5, #0
{
 800951c:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800951e:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 8009520:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009522:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009524:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009526:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009528:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800952a:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 800952c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009530:	ab07      	add	r3, sp, #28
 8009532:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800953a:	f002 fcd1 	bl	800bee0 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	6843      	ldr	r3, [r0, #4]
 8009542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009546:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8009548:	f002 fd29 	bl	800bf9e <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800954c:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800954e:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8009550:	6853      	ldr	r3, [r2, #4]
 8009552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009556:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8009558:	f7fb f9bc 	bl	80048d4 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800955c:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800955e:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009560:	f002 ff02 	bl	800c368 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009564:	4606      	mov	r6, r0
 8009566:	b968      	cbnz	r0, 8009584 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	f002 ff25 	bl	800c3b8 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800956e:	b380      	cbz	r0, 80095d2 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009570:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009574:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	42ab      	cmp	r3, r5
 800957c:	9206      	str	r2, [sp, #24]
 800957e:	d108      	bne.n	8009592 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009580:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8009584:	2001      	movs	r0, #1
 8009586:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800958a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800958c:	430e      	orrs	r6, r1
 800958e:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8009590:	e083      	b.n	800969a <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009592:	2100      	movs	r1, #0
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	f002 ff47 	bl	800c428 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800959a:	4601      	mov	r1, r0
 800959c:	b110      	cbz	r0, 80095a4 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800959e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80095a2:	e7ef      	b.n	8009584 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	f002 ff57 	bl	800c458 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80095aa:	4601      	mov	r1, r0
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d1f6      	bne.n	800959e <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095b0:	6820      	ldr	r0, [r4, #0]
 80095b2:	f002 fd3d 	bl	800c030 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80095b6:	2800      	cmp	r0, #0
 80095b8:	dadd      	bge.n	8009576 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 80095ba:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095bc:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 80095be:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80095c0:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80095c2:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80095c6:	f002 fcee 	bl	800bfa6 <SDMMC_GetPowerState>
 80095ca:	bb20      	cbnz	r0, 8009616 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095cc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80095d0:	e06d      	b.n	80096ae <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095d2:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80095d4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095d8:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	1c5a      	adds	r2, r3, #1
 80095de:	42ab      	cmp	r3, r5
 80095e0:	9206      	str	r2, [sp, #24]
 80095e2:	d0cd      	beq.n	8009580 <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095e4:	2100      	movs	r1, #0
 80095e6:	6820      	ldr	r0, [r4, #0]
 80095e8:	f002 ff1e 	bl	800c428 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80095ec:	4606      	mov	r6, r0
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1c8      	bne.n	8009584 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80095f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	f002 ff2e 	bl	800c458 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80095fc:	4606      	mov	r6, r0
 80095fe:	2800      	cmp	r0, #0
 8009600:	d1c0      	bne.n	8009584 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009602:	4601      	mov	r1, r0
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	f002 fd13 	bl	800c030 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800960a:	2800      	cmp	r0, #0
 800960c:	dae5      	bge.n	80095da <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800960e:	0043      	lsls	r3, r0, #1
 8009610:	d5d3      	bpl.n	80095ba <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009612:	2301      	movs	r3, #1
 8009614:	e7d2      	b.n	80095bc <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009618:	2b03      	cmp	r3, #3
 800961a:	d01a      	beq.n	8009652 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	f002 ff4c 	bl	800c4ba <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009622:	4605      	mov	r5, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d142      	bne.n	80096ae <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009628:	4601      	mov	r1, r0
 800962a:	6820      	ldr	r0, [r4, #0]
 800962c:	f002 fd00 	bl	800c030 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009630:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009632:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	f002 fcfb 	bl	800c030 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800963a:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800963c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800963e:	6820      	ldr	r0, [r4, #0]
 8009640:	f002 fcf6 	bl	800c030 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009644:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009646:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	f002 fcf1 	bl	800c030 <SDMMC_GetResponse>
 800964e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009654:	2b03      	cmp	r3, #3
 8009656:	d122      	bne.n	800969e <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009658:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800965a:	2b03      	cmp	r3, #3
 800965c:	d12e      	bne.n	80096bc <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800965e:	2104      	movs	r1, #4
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	f002 fce5 	bl	800c030 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8009666:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8009668:	0d00      	lsrs	r0, r0, #20
 800966a:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800966c:	4620      	mov	r0, r4
 800966e:	f7ff fe72 	bl	8009356 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8009672:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009674:	2300      	movs	r3, #0
 8009676:	6820      	ldr	r0, [r4, #0]
 8009678:	0412      	lsls	r2, r2, #16
 800967a:	f002 fe5d 	bl	800c338 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800967e:	4605      	mov	r5, r0
 8009680:	b9a8      	cbnz	r0, 80096ae <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8009682:	f104 0310 	add.w	r3, r4, #16
 8009686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800968a:	1d23      	adds	r3, r4, #4
 800968c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009694:	f002 fc24 	bl	800bee0 <SDMMC_Init>
  return HAL_OK;
 8009698:	4628      	mov	r0, r5
}
 800969a:	b018      	add	sp, #96	; 0x60
 800969c:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800969e:	f10d 0116 	add.w	r1, sp, #22
 80096a2:	6820      	ldr	r0, [r4, #0]
 80096a4:	f002 ff34 	bl	800c510 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80096a8:	4605      	mov	r5, r0
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0d4      	beq.n	8009658 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 80096ae:	2001      	movs	r0, #1
 80096b0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80096b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096b6:	431d      	orrs	r5, r3
 80096b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80096ba:	e7ee      	b.n	800969a <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 80096bc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096c0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80096c2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096c4:	0409      	lsls	r1, r1, #16
 80096c6:	f002 ff0d 	bl	800c4e4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ca:	4605      	mov	r5, r0
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d1ee      	bne.n	80096ae <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096d0:	4601      	mov	r1, r0
 80096d2:	6820      	ldr	r0, [r4, #0]
 80096d4:	f002 fcac 	bl	800c030 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096d8:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096da:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096dc:	6820      	ldr	r0, [r4, #0]
 80096de:	f002 fca7 	bl	800c030 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096e2:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096e4:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	f002 fca2 	bl	800c030 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096ec:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096ee:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	f002 fc9d 	bl	800c030 <SDMMC_GetResponse>
 80096f6:	6720      	str	r0, [r4, #112]	; 0x70
 80096f8:	e7b1      	b.n	800965e <HAL_SD_InitCard+0x14a>
	...

080096fc <HAL_SD_Init>:
{
 80096fc:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80096fe:	4604      	mov	r4, r0
 8009700:	2800      	cmp	r0, #0
 8009702:	d056      	beq.n	80097b2 <HAL_SD_Init+0xb6>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8009704:	6802      	ldr	r2, [r0, #0]
 8009706:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <HAL_SD_Init+0xbc>)
 8009708:	429a      	cmp	r2, r3
 800970a:	d004      	beq.n	8009716 <HAL_SD_Init+0x1a>
 800970c:	f240 1155 	movw	r1, #341	; 0x155
 8009710:	482a      	ldr	r0, [pc, #168]	; (80097bc <HAL_SD_Init+0xc0>)
 8009712:	f7f8 fa0e 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8009716:	6863      	ldr	r3, [r4, #4]
 8009718:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800971c:	d004      	beq.n	8009728 <HAL_SD_Init+0x2c>
 800971e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8009722:	4826      	ldr	r0, [pc, #152]	; (80097bc <HAL_SD_Init+0xc0>)
 8009724:	f7f8 fa05 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800972e:	d004      	beq.n	800973a <HAL_SD_Init+0x3e>
 8009730:	f240 1157 	movw	r1, #343	; 0x157
 8009734:	4821      	ldr	r0, [pc, #132]	; (80097bc <HAL_SD_Init+0xc0>)
 8009736:	f7f8 f9fc 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009740:	d004      	beq.n	800974c <HAL_SD_Init+0x50>
 8009742:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009746:	481d      	ldr	r0, [pc, #116]	; (80097bc <HAL_SD_Init+0xc0>)
 8009748:	f7f8 f9f3 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8009752:	d007      	beq.n	8009764 <HAL_SD_Init+0x68>
 8009754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009758:	d004      	beq.n	8009764 <HAL_SD_Init+0x68>
 800975a:	f240 1159 	movw	r1, #345	; 0x159
 800975e:	4817      	ldr	r0, [pc, #92]	; (80097bc <HAL_SD_Init+0xc0>)
 8009760:	f7f8 f9e7 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8009764:	6963      	ldr	r3, [r4, #20]
 8009766:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800976a:	d004      	beq.n	8009776 <HAL_SD_Init+0x7a>
 800976c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8009770:	4812      	ldr	r0, [pc, #72]	; (80097bc <HAL_SD_Init+0xc0>)
 8009772:	f7f8 f9de 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8009776:	69a3      	ldr	r3, [r4, #24]
 8009778:	2bff      	cmp	r3, #255	; 0xff
 800977a:	d904      	bls.n	8009786 <HAL_SD_Init+0x8a>
 800977c:	f240 115b 	movw	r1, #347	; 0x15b
 8009780:	480e      	ldr	r0, [pc, #56]	; (80097bc <HAL_SD_Init+0xc0>)
 8009782:	f7f8 f9d6 	bl	8001b32 <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 8009786:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800978a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800978e:	b91b      	cbnz	r3, 8009798 <HAL_SD_Init+0x9c>
    hsd->Lock = HAL_UNLOCKED;
 8009790:	7722      	strb	r2, [r4, #28]
    HAL_SD_MspInit(hsd);
 8009792:	4620      	mov	r0, r4
 8009794:	f7f8 fb86 	bl	8001ea4 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8009798:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800979a:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800979c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80097a0:	f7ff feb8 	bl	8009514 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80097a4:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 80097a6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80097a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80097aa:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80097ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80097b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80097b2:	2001      	movs	r0, #1
}
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00
 80097bc:	0802af12 	.word	0x0802af12

080097c0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80097c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80097c2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097c4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80097c6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80097ca:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80097ce:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80097d2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80097d6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097d8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80097da:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 80097de:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097e0:	61cb      	str	r3, [r1, #28]
}
 80097e2:	4770      	bx	lr

080097e4 <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 80097e4:	f431 6300 	bics.w	r3, r1, #2048	; 0x800
{
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	b08a      	sub	sp, #40	; 0x28
 80097ee:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 80097f0:	d007      	beq.n	8009802 <HAL_SD_ConfigWideBusOperation+0x1e>
 80097f2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80097f6:	d004      	beq.n	8009802 <HAL_SD_ConfigWideBusOperation+0x1e>
 80097f8:	f640 01b6 	movw	r1, #2230	; 0x8b6
 80097fc:	483d      	ldr	r0, [pc, #244]	; (80098f4 <HAL_SD_ConfigWideBusOperation+0x110>)
 80097fe:	f7f8 f998 	bl	8001b32 <assert_failed>
  hsd->State = HAL_SD_STATE_BUSY;
 8009802:	2303      	movs	r3, #3
 8009804:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009808:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800980a:	2b03      	cmp	r3, #3
 800980c:	d002      	beq.n	8009814 <HAL_SD_ConfigWideBusOperation+0x30>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800980e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009812:	d103      	bne.n	800981c <HAL_SD_ConfigWideBusOperation+0x38>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981a:	e04f      	b.n	80098bc <HAL_SD_ConfigWideBusOperation+0xd8>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800981c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009820:	d128      	bne.n	8009874 <HAL_SD_ConfigWideBusOperation+0x90>
  uint32_t scr[2] = {0, 0};
 8009822:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009824:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 8009826:	9104      	str	r1, [sp, #16]
 8009828:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800982a:	f002 fc01 	bl	800c030 <SDMMC_GetResponse>
 800982e:	0180      	lsls	r0, r0, #6
 8009830:	d43b      	bmi.n	80098aa <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 8009832:	a904      	add	r1, sp, #16
 8009834:	4620      	mov	r0, r4
 8009836:	f7ff fc0c 	bl	8009052 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800983a:	b960      	cbnz	r0, 8009856 <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	0359      	lsls	r1, r3, #13
 8009840:	d536      	bpl.n	80098b0 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8009842:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009844:	6820      	ldr	r0, [r4, #0]
 8009846:	0409      	lsls	r1, r1, #16
 8009848:	f002 fdee 	bl	800c428 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800984c:	b918      	cbnz	r0, 8009856 <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800984e:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8009850:	6820      	ldr	r0, [r4, #0]
 8009852:	f002 fee1 	bl	800c618 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8009856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009858:	4318      	orrs	r0, r3
 800985a:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800985c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800985e:	2e00      	cmp	r6, #0
 8009860:	d02e      	beq.n	80098c0 <HAL_SD_ConfigWideBusOperation+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8009868:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800986c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8009870:	b00a      	add	sp, #40	; 0x28
 8009872:	bd70      	pop	{r4, r5, r6, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009874:	b9fd      	cbnz	r5, 80098b6 <HAL_SD_ConfigWideBusOperation+0xd2>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009876:	4629      	mov	r1, r5
 8009878:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800987a:	9504      	str	r5, [sp, #16]
 800987c:	9505      	str	r5, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800987e:	f002 fbd7 	bl	800c030 <SDMMC_GetResponse>
 8009882:	0182      	lsls	r2, r0, #6
 8009884:	d411      	bmi.n	80098aa <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 8009886:	a904      	add	r1, sp, #16
 8009888:	4620      	mov	r0, r4
 800988a:	f7ff fbe2 	bl	8009052 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800988e:	2800      	cmp	r0, #0
 8009890:	d1e1      	bne.n	8009856 <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009892:	9b05      	ldr	r3, [sp, #20]
 8009894:	03db      	lsls	r3, r3, #15
 8009896:	d50b      	bpl.n	80098b0 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8009898:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	0409      	lsls	r1, r1, #16
 800989e:	f002 fdc3 	bl	800c428 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1d7      	bne.n	8009856 <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80098a6:	4629      	mov	r1, r5
 80098a8:	e7d2      	b.n	8009850 <HAL_SD_ConfigWideBusOperation+0x6c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80098ae:	e7d2      	b.n	8009856 <HAL_SD_ConfigWideBusOperation+0x72>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80098b4:	e7cf      	b.n	8009856 <HAL_SD_ConfigWideBusOperation+0x72>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80098be:	e7cd      	b.n	800985c <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80098c0:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80098c2:	9507      	str	r5, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80098c4:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80098ca:	68e3      	ldr	r3, [r4, #12]
 80098cc:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80098d2:	69a3      	ldr	r3, [r4, #24]
 80098d4:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 80098d6:	ab0a      	add	r3, sp, #40	; 0x28
 80098d8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80098dc:	ab04      	add	r3, sp, #16
 80098de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80098e2:	6820      	ldr	r0, [r4, #0]
 80098e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098e6:	f002 fafb 	bl	800bee0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 80098ea:	2301      	movs	r3, #1
  return HAL_OK;
 80098ec:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 80098ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80098f2:	e7bd      	b.n	8009870 <HAL_SD_ConfigWideBusOperation+0x8c>
 80098f4:	0802af12 	.word	0x0802af12

080098f8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80098f8:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80098fa:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80098fc:	0409      	lsls	r1, r1, #16
{
 80098fe:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8009900:	6800      	ldr	r0, [r0, #0]
 8009902:	f002 fe59 	bl	800c5b8 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8009906:	4601      	mov	r1, r0
 8009908:	b928      	cbnz	r0, 8009916 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	f002 fb90 	bl	800c030 <SDMMC_GetResponse>
  return cardstate;
 8009910:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8009914:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8009916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8009918:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800991a:	4319      	orrs	r1, r3
 800991c:	63a1      	str	r1, [r4, #56]	; 0x38
 800991e:	e7f7      	b.n	8009910 <HAL_SD_GetCardState+0x18>

08009920 <SD_DMAError>:
{
 8009920:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009922:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009924:	f7fb fc14 	bl	8005150 <HAL_DMA_GetError>
 8009928:	2802      	cmp	r0, #2
 800992a:	d026      	beq.n	800997a <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800992c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800992e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009930:	2b01      	cmp	r3, #1
 8009932:	d003      	beq.n	800993c <SD_DMAError+0x1c>
 8009934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009938:	2b01      	cmp	r3, #1
 800993a:	d11b      	bne.n	8009974 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 8009942:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009948:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800994c:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800994e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009954:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009956:	f7ff ffcf 	bl	80098f8 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800995a:	3805      	subs	r0, #5
 800995c:	b2c0      	uxtb	r0, r0
 800995e:	2801      	cmp	r0, #1
 8009960:	d805      	bhi.n	800996e <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009962:	6820      	ldr	r0, [r4, #0]
 8009964:	f002 fcce 	bl	800c304 <SDMMC_CmdStopTransfer>
 8009968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800996a:	4318      	orrs	r0, r3
 800996c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800996e:	2301      	movs	r3, #1
 8009970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff fccf 	bl	8009318 <HAL_SD_ErrorCallback>
 800997a:	bd10      	pop	{r4, pc}

0800997c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009980:	4604      	mov	r4, r0
 8009982:	b1c8      	cbz	r0, 80099b8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009984:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009988:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800998c:	b91b      	cbnz	r3, 8009996 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800998e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009992:	f7f9 fcb9 	bl	8003308 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009996:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009998:	1d21      	adds	r1, r4, #4
 800999a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800999c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80099a0:	f002 f8a4 	bl	800baec <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80099a4:	6862      	ldr	r2, [r4, #4]
 80099a6:	4629      	mov	r1, r5
 80099a8:	6820      	ldr	r0, [r4, #0]
 80099aa:	f002 f94d 	bl	800bc48 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099ae:	2301      	movs	r3, #1
  
  return HAL_OK;
 80099b0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80099b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80099b8:	2001      	movs	r0, #1
}
 80099ba:	bd38      	pop	{r3, r4, r5, pc}

080099bc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099c0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 80099c4:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099c6:	b2c0      	uxtb	r0, r0
 80099c8:	2802      	cmp	r0, #2
 80099ca:	d00d      	beq.n	80099e8 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099cc:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099ce:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099d4:	f002 f9d6 	bl	800bd84 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099d8:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80099da:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099dc:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80099de:	bf0c      	ite	eq
 80099e0:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80099e2:	2301      	movne	r3, #1
 80099e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80099e8:	bd38      	pop	{r3, r4, r5, pc}

080099ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80099ea:	b510      	push	{r4, lr}
 80099ec:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80099ee:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80099f2:	b2c0      	uxtb	r0, r0
 80099f4:	2802      	cmp	r0, #2
 80099f6:	d009      	beq.n	8009a0c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099f8:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80099fa:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009a00:	f002 fa08 	bl	800be14 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a04:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8009a06:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009a0c:	bd10      	pop	{r4, pc}
	...

08009a10 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009a10:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009a12:	4604      	mov	r4, r0
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f000 8085 	beq.w	8009b24 <HAL_SPDIFRX_Init+0x114>
  {
    return HAL_ERROR;
  }

  /* Check the SPDIFRX parameters */
  assert_param(IS_STEREO_MODE(hspdif->Init.StereoMode));
 8009a1a:	6983      	ldr	r3, [r0, #24]
 8009a1c:	f033 0308 	bics.w	r3, r3, #8
 8009a20:	d003      	beq.n	8009a2a <HAL_SPDIFRX_Init+0x1a>
 8009a22:	21f7      	movs	r1, #247	; 0xf7
 8009a24:	4840      	ldr	r0, [pc, #256]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a26:	f7f8 f884 	bl	8001b32 <assert_failed>
  assert_param(IS_SPDIFRX_INPUT_SELECT(hspdif->Init.InputSelection));
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8009a30:	d003      	beq.n	8009a3a <HAL_SPDIFRX_Init+0x2a>
 8009a32:	21f8      	movs	r1, #248	; 0xf8
 8009a34:	483c      	ldr	r0, [pc, #240]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a36:	f7f8 f87c 	bl	8001b32 <assert_failed>
  assert_param(IS_SPDIFRX_MAX_RETRIES(hspdif->Init.Retries));
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8009a40:	d003      	beq.n	8009a4a <HAL_SPDIFRX_Init+0x3a>
 8009a42:	21f9      	movs	r1, #249	; 0xf9
 8009a44:	4838      	ldr	r0, [pc, #224]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a46:	f7f8 f874 	bl	8001b32 <assert_failed>
  assert_param(IS_SPDIFRX_WAIT_FOR_ACTIVITY(hspdif->Init.WaitForActivity));
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009a50:	d003      	beq.n	8009a5a <HAL_SPDIFRX_Init+0x4a>
 8009a52:	21fa      	movs	r1, #250	; 0xfa
 8009a54:	4834      	ldr	r0, [pc, #208]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a56:	f7f8 f86c 	bl	8001b32 <assert_failed>
  assert_param(IS_SPDIFRX_CHANNEL(hspdif->Init.ChannelSelection));
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8009a60:	d003      	beq.n	8009a6a <HAL_SPDIFRX_Init+0x5a>
 8009a62:	21fb      	movs	r1, #251	; 0xfb
 8009a64:	4830      	ldr	r0, [pc, #192]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a66:	f7f8 f864 	bl	8001b32 <assert_failed>
  assert_param(IS_SPDIFRX_DATA_FORMAT(hspdif->Init.DataFormat));
 8009a6a:	6963      	ldr	r3, [r4, #20]
 8009a6c:	f033 0210 	bics.w	r2, r3, #16
 8009a70:	d005      	beq.n	8009a7e <HAL_SPDIFRX_Init+0x6e>
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d003      	beq.n	8009a7e <HAL_SPDIFRX_Init+0x6e>
 8009a76:	21fc      	movs	r1, #252	; 0xfc
 8009a78:	482b      	ldr	r0, [pc, #172]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a7a:	f7f8 f85a 	bl	8001b32 <assert_failed>
  assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
 8009a7e:	69e3      	ldr	r3, [r4, #28]
 8009a80:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009a84:	d003      	beq.n	8009a8e <HAL_SPDIFRX_Init+0x7e>
 8009a86:	21fd      	movs	r1, #253	; 0xfd
 8009a88:	4827      	ldr	r0, [pc, #156]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a8a:	f7f8 f852 	bl	8001b32 <assert_failed>
  assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
 8009a8e:	6a23      	ldr	r3, [r4, #32]
 8009a90:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8009a94:	d003      	beq.n	8009a9e <HAL_SPDIFRX_Init+0x8e>
 8009a96:	21fe      	movs	r1, #254	; 0xfe
 8009a98:	4823      	ldr	r0, [pc, #140]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009a9a:	f7f8 f84a 	bl	8001b32 <assert_failed>
  assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
 8009a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aa0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009aa4:	d003      	beq.n	8009aae <HAL_SPDIFRX_Init+0x9e>
 8009aa6:	21ff      	movs	r1, #255	; 0xff
 8009aa8:	481f      	ldr	r0, [pc, #124]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009aaa:	f7f8 f842 	bl	8001b32 <assert_failed>
  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
 8009aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ab0:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8009ab4:	d004      	beq.n	8009ac0 <HAL_SPDIFRX_Init+0xb0>
 8009ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009aba:	481b      	ldr	r0, [pc, #108]	; (8009b28 <HAL_SPDIFRX_Init+0x118>)
 8009abc:	f7f8 f839 	bl	8001b32 <assert_failed>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009ac0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ac4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ac8:	b923      	cbnz	r3, 8009ad4 <HAL_SPDIFRX_Init+0xc4>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009aca:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7f8 fa4e 	bl	8001f70 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009ad4:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009ad6:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009ad8:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8009ade:	680b      	ldr	r3, [r1, #0]
 8009ae0:	f023 0303 	bic.w	r3, r3, #3
 8009ae4:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8009ae6:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8009ae8:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8009aea:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 8009aec:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009aee:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8009af2:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8009af4:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009af6:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 8009afa:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8009afc:	6920      	ldr	r0, [r4, #16]
 8009afe:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8009b00:	6960      	ldr	r0, [r4, #20]
 8009b02:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8009b04:	69e0      	ldr	r0, [r4, #28]
 8009b06:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8009b08:	6a20      	ldr	r0, [r4, #32]
 8009b0a:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8009b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b0e:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8009b10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009b12:	4303      	orrs	r3, r0
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b14:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8009b16:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8009b18:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b1a:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009b1c:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 8009b22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009b24:	2001      	movs	r0, #1
}
 8009b26:	bd10      	pop	{r4, pc}
 8009b28:	0802af4f 	.word	0x0802af4f

08009b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b2e:	4604      	mov	r4, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f000 80e5 	beq.w	8009d00 <HAL_SPI_Init+0x1d4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	4a72      	ldr	r2, [pc, #456]	; (8009d04 <HAL_SPI_Init+0x1d8>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d018      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b3e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d014      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d010      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00c      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b56:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d008      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <HAL_SPI_Init+0x44>
 8009b66:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009b6a:	4867      	ldr	r0, [pc, #412]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009b6c:	f7f7 ffe1 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	b13b      	cbz	r3, 8009b84 <HAL_SPI_Init+0x58>
 8009b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b78:	d004      	beq.n	8009b84 <HAL_SPI_Init+0x58>
 8009b7a:	f240 1145 	movw	r1, #325	; 0x145
 8009b7e:	4862      	ldr	r0, [pc, #392]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009b80:	f7f7 ffd7 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009b84:	68a3      	ldr	r3, [r4, #8]
 8009b86:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8009b8a:	d007      	beq.n	8009b9c <HAL_SPI_Init+0x70>
 8009b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b90:	d004      	beq.n	8009b9c <HAL_SPI_Init+0x70>
 8009b92:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009b96:	485c      	ldr	r0, [pc, #368]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009b98:	f7f7 ffcb 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009b9c:	68e3      	ldr	r3, [r4, #12]
 8009b9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009ba2:	d018      	beq.n	8009bd6 <HAL_SPI_Init+0xaa>
 8009ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ba8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009bac:	d013      	beq.n	8009bd6 <HAL_SPI_Init+0xaa>
 8009bae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009bb2:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 8009bb6:	d00e      	beq.n	8009bd6 <HAL_SPI_Init+0xaa>
 8009bb8:	f423 6210 	bic.w	r2, r3, #2304	; 0x900
 8009bbc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009bc0:	d009      	beq.n	8009bd6 <HAL_SPI_Init+0xaa>
 8009bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bca:	d004      	beq.n	8009bd6 <HAL_SPI_Init+0xaa>
 8009bcc:	f240 1147 	movw	r1, #327	; 0x147
 8009bd0:	484d      	ldr	r0, [pc, #308]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009bd2:	f7f7 ffae 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009bd6:	69a3      	ldr	r3, [r4, #24]
 8009bd8:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8009bdc:	d007      	beq.n	8009bee <HAL_SPI_Init+0xc2>
 8009bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009be2:	d004      	beq.n	8009bee <HAL_SPI_Init+0xc2>
 8009be4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009be8:	4847      	ldr	r0, [pc, #284]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009bea:	f7f7 ffa2 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8009bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bf0:	f033 0308 	bics.w	r3, r3, #8
 8009bf4:	d004      	beq.n	8009c00 <HAL_SPI_Init+0xd4>
 8009bf6:	f240 1149 	movw	r1, #329	; 0x149
 8009bfa:	4843      	ldr	r0, [pc, #268]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009bfc:	f7f7 ff99 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009c00:	69e3      	ldr	r3, [r4, #28]
 8009c02:	f033 0318 	bics.w	r3, r3, #24
 8009c06:	d006      	beq.n	8009c16 <HAL_SPI_Init+0xea>
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d004      	beq.n	8009c16 <HAL_SPI_Init+0xea>
 8009c0c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009c10:	483d      	ldr	r0, [pc, #244]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009c12:	f7f7 ff8e 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009c16:	6a23      	ldr	r3, [r4, #32]
 8009c18:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009c1c:	d004      	beq.n	8009c28 <HAL_SPI_Init+0xfc>
 8009c1e:	f240 114b 	movw	r1, #331	; 0x14b
 8009c22:	4839      	ldr	r0, [pc, #228]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009c24:	f7f7 ff85 	bl	8001b32 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c2a:	f033 0310 	bics.w	r3, r3, #16
 8009c2e:	d004      	beq.n	8009c3a <HAL_SPI_Init+0x10e>
 8009c30:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8009c34:	4834      	ldr	r0, [pc, #208]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009c36:	f7f7 ff7c 	bl	8001b32 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3c:	b983      	cbnz	r3, 8009c60 <HAL_SPI_Init+0x134>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	f033 0302 	bics.w	r3, r3, #2
 8009c44:	d004      	beq.n	8009c50 <HAL_SPI_Init+0x124>
 8009c46:	f240 114f 	movw	r1, #335	; 0x14f
 8009c4a:	482f      	ldr	r0, [pc, #188]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009c4c:	f7f7 ff71 	bl	8001b32 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009c50:	6963      	ldr	r3, [r4, #20]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d904      	bls.n	8009c60 <HAL_SPI_Init+0x134>
 8009c56:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8009c5a:	482b      	ldr	r0, [pc, #172]	; (8009d08 <HAL_SPI_Init+0x1dc>)
 8009c5c:	f7f7 ff69 	bl	8001b32 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c64:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009c68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009c6c:	b923      	cbnz	r3, 8009c78 <HAL_SPI_Init+0x14c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c6e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7f8 f9d0 	bl	8002018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c78:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c7a:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c7c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009c7e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009c82:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c84:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8009c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c8c:	600b      	str	r3, [r1, #0]
 8009c8e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c92:	d932      	bls.n	8009cfa <HAL_SPI_Init+0x1ce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c94:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c96:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c9a:	bf18      	it	ne
 8009c9c:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ca0:	b92b      	cbnz	r3, 8009cae <HAL_SPI_Init+0x182>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ca2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009ca6:	bf8c      	ite	hi
 8009ca8:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009caa:	2301      	movls	r3, #1
 8009cac:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009cae:	68a6      	ldr	r6, [r4, #8]
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	69a5      	ldr	r5, [r4, #24]
 8009cb4:	4333      	orrs	r3, r6
 8009cb6:	6926      	ldr	r6, [r4, #16]
 8009cb8:	4333      	orrs	r3, r6
 8009cba:	6966      	ldr	r6, [r4, #20]
 8009cbc:	4333      	orrs	r3, r6
 8009cbe:	69e6      	ldr	r6, [r4, #28]
 8009cc0:	4333      	orrs	r3, r6
 8009cc2:	6a26      	ldr	r6, [r4, #32]
 8009cc4:	4333      	orrs	r3, r6
 8009cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cc8:	4333      	orrs	r3, r6
 8009cca:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009cce:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009cd0:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009cd2:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009cd6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	432a      	orrs	r2, r5
 8009ce2:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ce4:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009ce6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ce8:	69cb      	ldr	r3, [r1, #28]
 8009cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cee:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8009cf0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cf2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009cf4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cfa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009cfe:	e7cc      	b.n	8009c9a <HAL_SPI_Init+0x16e>
    return HAL_ERROR;
 8009d00:	2001      	movs	r0, #1
}
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	40013000 	.word	0x40013000
 8009d08:	0802af91 	.word	0x0802af91

08009d0c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d0c:	6a03      	ldr	r3, [r0, #32]
 8009d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8009d12:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d18:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d1a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d1c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8009d20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8009d2a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d2c:	688d      	ldr	r5, [r1, #8]
 8009d2e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d32:	4d09      	ldr	r5, [pc, #36]	; (8009d58 <TIM_OC5_SetConfig+0x4c>)
 8009d34:	42a8      	cmp	r0, r5
 8009d36:	d003      	beq.n	8009d40 <TIM_OC5_SetConfig+0x34>
 8009d38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d3c:	42a8      	cmp	r0, r5
 8009d3e:	d104      	bne.n	8009d4a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d40:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d44:	694d      	ldr	r5, [r1, #20]
 8009d46:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d4a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d4c:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d4e:	684b      	ldr	r3, [r1, #4]
 8009d50:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d52:	6202      	str	r2, [r0, #32]
 8009d54:	bd30      	pop	{r4, r5, pc}
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000

08009d5c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d5c:	6a03      	ldr	r3, [r0, #32]
 8009d5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8009d62:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d66:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d68:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d6c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d7e:	688d      	ldr	r5, [r1, #8]
 8009d80:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d84:	4d08      	ldr	r5, [pc, #32]	; (8009da8 <TIM_OC6_SetConfig+0x4c>)
 8009d86:	42a8      	cmp	r0, r5
 8009d88:	d003      	beq.n	8009d92 <TIM_OC6_SetConfig+0x36>
 8009d8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d8e:	42a8      	cmp	r0, r5
 8009d90:	d104      	bne.n	8009d9c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d92:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d96:	694d      	ldr	r5, [r1, #20]
 8009d98:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d9e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009da0:	684b      	ldr	r3, [r1, #4]
 8009da2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da4:	6202      	str	r2, [r0, #32]
 8009da6:	bd30      	pop	{r4, r5, pc}
 8009da8:	40010000 	.word	0x40010000

08009dac <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dac:	6a03      	ldr	r3, [r0, #32]
 8009dae:	f023 0301 	bic.w	r3, r3, #1
{
 8009db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009db6:	6203      	str	r3, [r0, #32]
{
 8009db8:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8009dba:	6a05      	ldr	r5, [r0, #32]
{
 8009dbc:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8009dbe:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009dc2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8009dc4:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx |= OC_Config->OCMode;
 8009dc8:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dce:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009dd2:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 8009dd4:	688b      	ldr	r3, [r1, #8]
 8009dd6:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <TIM_OC1_SetConfig+0xa8>)
 8009dda:	4298      	cmp	r0, r3
 8009ddc:	d003      	beq.n	8009de6 <TIM_OC1_SetConfig+0x3a>
 8009dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de2:	4298      	cmp	r0, r3
 8009de4:	d12e      	bne.n	8009e44 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009de6:	68f3      	ldr	r3, [r6, #12]
 8009de8:	f033 0308 	bics.w	r3, r3, #8
 8009dec:	d004      	beq.n	8009df8 <TIM_OC1_SetConfig+0x4c>
 8009dee:	f241 7176 	movw	r1, #6006	; 0x1776
 8009df2:	4819      	ldr	r0, [pc, #100]	; (8009e58 <TIM_OC1_SetConfig+0xac>)
 8009df4:	f7f7 fe9d 	bl	8001b32 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 8009df8:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dfa:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8009dfe:	431d      	orrs	r5, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e00:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <TIM_OC1_SetConfig+0xa8>)
 8009e02:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e04:	f025 0504 	bic.w	r5, r5, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e08:	d003      	beq.n	8009e12 <TIM_OC1_SetConfig+0x66>
 8009e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e0e:	429c      	cmp	r4, r3
 8009e10:	d118      	bne.n	8009e44 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009e12:	69b3      	ldr	r3, [r6, #24]
 8009e14:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009e18:	d004      	beq.n	8009e24 <TIM_OC1_SetConfig+0x78>
 8009e1a:	f241 7183 	movw	r1, #6019	; 0x1783
 8009e1e:	480e      	ldr	r0, [pc, #56]	; (8009e58 <TIM_OC1_SetConfig+0xac>)
 8009e20:	f7f7 fe87 	bl	8001b32 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e24:	6973      	ldr	r3, [r6, #20]
 8009e26:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8009e2a:	d004      	beq.n	8009e36 <TIM_OC1_SetConfig+0x8a>
 8009e2c:	f241 7184 	movw	r1, #6020	; 0x1784
 8009e30:	4809      	ldr	r0, [pc, #36]	; (8009e58 <TIM_OC1_SetConfig+0xac>)
 8009e32:	f7f7 fe7e 	bl	8001b32 <assert_failed>
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e36:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e38:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e3c:	69b2      	ldr	r2, [r6, #24]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	ea43 0808 	orr.w	r8, r3, r8
  TIMx->CCR1 = OC_Config->Pulse;
 8009e44:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8009e46:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009e4a:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8009e4c:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8009e4e:	6225      	str	r5, [r4, #32]
 8009e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e54:	40010000 	.word	0x40010000
 8009e58:	0802afcf 	.word	0x0802afcf

08009e5c <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e5c:	6a03      	ldr	r3, [r0, #32]
 8009e5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8009e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e66:	6203      	str	r3, [r0, #32]
{
 8009e68:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8009e6a:	6a05      	ldr	r5, [r0, #32]
{
 8009e6c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 8009e6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009e72:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8009e74:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8009e78:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e7e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009e82:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e84:	688b      	ldr	r3, [r1, #8]
 8009e86:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <TIM_OC3_SetConfig+0xac>)
 8009e8c:	4298      	cmp	r0, r3
 8009e8e:	d003      	beq.n	8009e98 <TIM_OC3_SetConfig+0x3c>
 8009e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e94:	4298      	cmp	r0, r3
 8009e96:	d12f      	bne.n	8009ef8 <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009e98:	68f3      	ldr	r3, [r6, #12]
 8009e9a:	f033 0308 	bics.w	r3, r3, #8
 8009e9e:	d004      	beq.n	8009eaa <TIM_OC3_SetConfig+0x4e>
 8009ea0:	f641 010c 	movw	r1, #6156	; 0x180c
 8009ea4:	4819      	ldr	r0, [pc, #100]	; (8009f0c <TIM_OC3_SetConfig+0xb0>)
 8009ea6:	f7f7 fe44 	bl	8001b32 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eaa:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009eac:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eb0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eb4:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <TIM_OC3_SetConfig+0xac>)
 8009eb6:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eb8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebc:	d003      	beq.n	8009ec6 <TIM_OC3_SetConfig+0x6a>
 8009ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ec2:	429c      	cmp	r4, r3
 8009ec4:	d118      	bne.n	8009ef8 <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009ec6:	69b3      	ldr	r3, [r6, #24]
 8009ec8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009ecc:	d004      	beq.n	8009ed8 <TIM_OC3_SetConfig+0x7c>
 8009ece:	f641 0119 	movw	r1, #6169	; 0x1819
 8009ed2:	480e      	ldr	r0, [pc, #56]	; (8009f0c <TIM_OC3_SetConfig+0xb0>)
 8009ed4:	f7f7 fe2d 	bl	8001b32 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009ed8:	6973      	ldr	r3, [r6, #20]
 8009eda:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8009ede:	d004      	beq.n	8009eea <TIM_OC3_SetConfig+0x8e>
 8009ee0:	f641 011a 	movw	r1, #6170	; 0x181a
 8009ee4:	4809      	ldr	r0, [pc, #36]	; (8009f0c <TIM_OC3_SetConfig+0xb0>)
 8009ee6:	f7f7 fe24 	bl	8001b32 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009eea:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eec:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ef0:	69b2      	ldr	r2, [r6, #24]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 8009ef8:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 8009efa:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009efe:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009f00:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8009f02:	6225      	str	r5, [r4, #32]
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	0802afcf 	.word	0x0802afcf

08009f10 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f10:	6a03      	ldr	r3, [r0, #32]
 8009f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8009f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f1a:	6203      	str	r3, [r0, #32]
{
 8009f1c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 8009f1e:	6a05      	ldr	r5, [r0, #32]
{
 8009f20:	460f      	mov	r7, r1
  tmpcr2 =  TIMx->CR2;
 8009f22:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009f26:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8009f28:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f2c:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f32:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f36:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f3a:	688b      	ldr	r3, [r1, #8]
 8009f3c:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <TIM_OC4_SetConfig+0x6c>)
 8009f42:	4298      	cmp	r0, r3
 8009f44:	d003      	beq.n	8009f4e <TIM_OC4_SetConfig+0x3e>
 8009f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f4a:	4298      	cmp	r0, r3
 8009f4c:	d10d      	bne.n	8009f6a <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8009f54:	d004      	beq.n	8009f60 <TIM_OC4_SetConfig+0x50>
 8009f56:	f641 0158 	movw	r1, #6232	; 0x1858
 8009f5a:	4809      	ldr	r0, [pc, #36]	; (8009f80 <TIM_OC4_SetConfig+0x70>)
 8009f5c:	f7f7 fde9 	bl	8001b32 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f60:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8009f6a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8009f6c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009f70:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8009f72:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8009f74:	6225      	str	r5, [r4, #32]
 8009f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7a:	bf00      	nop
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	0802afcf 	.word	0x0802afcf

08009f84 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009f84:	6803      	ldr	r3, [r0, #0]
 8009f86:	4a28      	ldr	r2, [pc, #160]	; (800a028 <HAL_TIM_Base_Start_IT+0xa4>)
 8009f88:	4293      	cmp	r3, r2
{
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009f8e:	d037      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f94:	d034      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009f96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d030      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d02c      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d028      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d024      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d020      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fbe:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d01c      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fc6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d018      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d014      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d010      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fde:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00c      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d008      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d004      	beq.n	800a000 <HAL_TIM_Base_Start_IT+0x7c>
 8009ff6:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8009ffa:	480c      	ldr	r0, [pc, #48]	; (800a02c <HAL_TIM_Base_Start_IT+0xa8>)
 8009ffc:	f7f7 fd99 	bl	8001b32 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a00a:	4a09      	ldr	r2, [pc, #36]	; (800a030 <HAL_TIM_Base_Start_IT+0xac>)
 800a00c:	6899      	ldr	r1, [r3, #8]
 800a00e:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a010:	2a06      	cmp	r2, #6
 800a012:	d006      	beq.n	800a022 <HAL_TIM_Base_Start_IT+0x9e>
 800a014:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a018:	d003      	beq.n	800a022 <HAL_TIM_Base_Start_IT+0x9e>
    __HAL_TIM_ENABLE(htim);
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f042 0201 	orr.w	r2, r2, #1
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	2000      	movs	r0, #0
 800a024:	bd10      	pop	{r4, pc}
 800a026:	bf00      	nop
 800a028:	40010000 	.word	0x40010000
 800a02c:	0802afcf 	.word	0x0802afcf
 800a030:	00010007 	.word	0x00010007

0800a034 <HAL_TIM_OC_DelayElapsedCallback>:
 800a034:	4770      	bx	lr

0800a036 <HAL_TIM_IC_CaptureCallback>:
 800a036:	4770      	bx	lr

0800a038 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a038:	4770      	bx	lr

0800a03a <HAL_TIM_TriggerCallback>:
 800a03a:	4770      	bx	lr

0800a03c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a03c:	6803      	ldr	r3, [r0, #0]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	0791      	lsls	r1, r2, #30
{
 800a042:	b510      	push	{r4, lr}
 800a044:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a046:	d50f      	bpl.n	800a068 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	0792      	lsls	r2, r2, #30
 800a04c:	d50c      	bpl.n	800a068 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a04e:	f06f 0202 	mvn.w	r2, #2
 800a052:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a054:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a056:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a058:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a05a:	0799      	lsls	r1, r3, #30
 800a05c:	f000 8085 	beq.w	800a16a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800a060:	f7ff ffe9 	bl	800a036 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a064:	2300      	movs	r3, #0
 800a066:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	0752      	lsls	r2, r2, #29
 800a06e:	d510      	bpl.n	800a092 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	0750      	lsls	r0, r2, #29
 800a074:	d50d      	bpl.n	800a092 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a076:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800a07a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a07e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a080:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a082:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a084:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a088:	d075      	beq.n	800a176 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a08a:	f7ff ffd4 	bl	800a036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a08e:	2300      	movs	r3, #0
 800a090:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	691a      	ldr	r2, [r3, #16]
 800a096:	0711      	lsls	r1, r2, #28
 800a098:	d50f      	bpl.n	800a0ba <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	0712      	lsls	r2, r2, #28
 800a09e:	d50c      	bpl.n	800a0ba <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800a0a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0a8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0ae:	079b      	lsls	r3, r3, #30
 800a0b0:	d067      	beq.n	800a182 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b2:	f7ff ffc0 	bl	800a036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	06d0      	lsls	r0, r2, #27
 800a0c0:	d510      	bpl.n	800a0e4 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	06d1      	lsls	r1, r2, #27
 800a0c6:	d50d      	bpl.n	800a0e4 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800a0cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0d0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a0da:	d058      	beq.n	800a18e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800a0dc:	f7ff ffab 	bl	800a036 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	07d2      	lsls	r2, r2, #31
 800a0ea:	d508      	bpl.n	800a0fe <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	07d0      	lsls	r0, r2, #31
 800a0f0:	d505      	bpl.n	800a0fe <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0f2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0fa:	f7f7 fd0f 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	691a      	ldr	r2, [r3, #16]
 800a102:	0611      	lsls	r1, r2, #24
 800a104:	d508      	bpl.n	800a118 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	0612      	lsls	r2, r2, #24
 800a10a:	d505      	bpl.n	800a118 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a10c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800a110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a112:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a114:	f001 f8e3 	bl	800b2de <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	05d0      	lsls	r0, r2, #23
 800a11e:	d508      	bpl.n	800a132 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	0611      	lsls	r1, r2, #24
 800a124:	d505      	bpl.n	800a132 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a126:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800a12a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a12c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a12e:	f001 f8d7 	bl	800b2e0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	691a      	ldr	r2, [r3, #16]
 800a136:	0652      	lsls	r2, r2, #25
 800a138:	d508      	bpl.n	800a14c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	0650      	lsls	r0, r2, #25
 800a13e:	d505      	bpl.n	800a14c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a140:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800a144:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a146:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a148:	f7ff ff77 	bl	800a03a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	691a      	ldr	r2, [r3, #16]
 800a150:	0691      	lsls	r1, r2, #26
 800a152:	d522      	bpl.n	800a19a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	0692      	lsls	r2, r2, #26
 800a158:	d51f      	bpl.n	800a19a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a15a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800a15e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a160:	611a      	str	r2, [r3, #16]
}
 800a162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a166:	f001 b8b9 	b.w	800b2dc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	f7ff ff63 	bl	800a034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff ff62 	bl	800a038 <HAL_TIM_PWM_PulseFinishedCallback>
 800a174:	e776      	b.n	800a064 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a176:	f7ff ff5d 	bl	800a034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17a:	4620      	mov	r0, r4
 800a17c:	f7ff ff5c 	bl	800a038 <HAL_TIM_PWM_PulseFinishedCallback>
 800a180:	e785      	b.n	800a08e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a182:	f7ff ff57 	bl	800a034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff ff56 	bl	800a038 <HAL_TIM_PWM_PulseFinishedCallback>
 800a18c:	e793      	b.n	800a0b6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18e:	f7ff ff51 	bl	800a034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff ff50 	bl	800a038 <HAL_TIM_PWM_PulseFinishedCallback>
 800a198:	e7a2      	b.n	800a0e0 <HAL_TIM_IRQHandler+0xa4>
 800a19a:	bd10      	pop	{r4, pc}

0800a19c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a19c:	4a30      	ldr	r2, [pc, #192]	; (800a260 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800a19e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1a0:	4290      	cmp	r0, r2
 800a1a2:	d012      	beq.n	800a1ca <TIM_Base_SetConfig+0x2e>
 800a1a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a1a8:	d00f      	beq.n	800a1ca <TIM_Base_SetConfig+0x2e>
 800a1aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a1ae:	4290      	cmp	r0, r2
 800a1b0:	d00b      	beq.n	800a1ca <TIM_Base_SetConfig+0x2e>
 800a1b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1b6:	4290      	cmp	r0, r2
 800a1b8:	d007      	beq.n	800a1ca <TIM_Base_SetConfig+0x2e>
 800a1ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1be:	4290      	cmp	r0, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_Base_SetConfig+0x2e>
 800a1c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a1c6:	4290      	cmp	r0, r2
 800a1c8:	d119      	bne.n	800a1fe <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800a1ca:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a1d0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1d2:	4a23      	ldr	r2, [pc, #140]	; (800a260 <TIM_Base_SetConfig+0xc4>)
 800a1d4:	4290      	cmp	r0, r2
 800a1d6:	d029      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a1dc:	d026      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a1e2:	4290      	cmp	r0, r2
 800a1e4:	d022      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1ea:	4290      	cmp	r0, r2
 800a1ec:	d01e      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1f2:	4290      	cmp	r0, r2
 800a1f4:	d01a      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a1fa:	4290      	cmp	r0, r2
 800a1fc:	d016      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a1fe:	4a19      	ldr	r2, [pc, #100]	; (800a264 <TIM_Base_SetConfig+0xc8>)
 800a200:	4290      	cmp	r0, r2
 800a202:	d013      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a204:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a208:	4290      	cmp	r0, r2
 800a20a:	d00f      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a20c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a210:	4290      	cmp	r0, r2
 800a212:	d00b      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a214:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a218:	4290      	cmp	r0, r2
 800a21a:	d007      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a21c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a220:	4290      	cmp	r0, r2
 800a222:	d003      	beq.n	800a22c <TIM_Base_SetConfig+0x90>
 800a224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a228:	4290      	cmp	r0, r2
 800a22a:	d103      	bne.n	800a234 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800a22c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a230:	68ca      	ldr	r2, [r1, #12]
 800a232:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a234:	694a      	ldr	r2, [r1, #20]
 800a236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a23a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a23c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a23e:	688b      	ldr	r3, [r1, #8]
 800a240:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a242:	680b      	ldr	r3, [r1, #0]
 800a244:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <TIM_Base_SetConfig+0xc4>)
 800a248:	4298      	cmp	r0, r3
 800a24a:	d003      	beq.n	800a254 <TIM_Base_SetConfig+0xb8>
 800a24c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a250:	4298      	cmp	r0, r3
 800a252:	d101      	bne.n	800a258 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800a254:	690b      	ldr	r3, [r1, #16]
 800a256:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a258:	2301      	movs	r3, #1
 800a25a:	6143      	str	r3, [r0, #20]
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40010000 	.word	0x40010000
 800a264:	40014000 	.word	0x40014000

0800a268 <HAL_TIM_Base_Init>:
{
 800a268:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a26a:	4604      	mov	r4, r0
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d075      	beq.n	800a35c <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a270:	6803      	ldr	r3, [r0, #0]
 800a272:	4a3b      	ldr	r2, [pc, #236]	; (800a360 <HAL_TIM_Base_Init+0xf8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d037      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27c:	d034      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a27e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a282:	4293      	cmp	r3, r2
 800a284:	d030      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d02c      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a28e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a292:	4293      	cmp	r3, r2
 800a294:	d028      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a296:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d024      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a29e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d020      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2a6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d01c      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2ae:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d018      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d014      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d010      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2c6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00c      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d008      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIM_Base_Init+0x80>
 800a2de:	f240 110d 	movw	r1, #269	; 0x10d
 800a2e2:	4820      	ldr	r0, [pc, #128]	; (800a364 <HAL_TIM_Base_Init+0xfc>)
 800a2e4:	f7f7 fc25 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	f033 0210 	bics.w	r2, r3, #16
 800a2ee:	d00a      	beq.n	800a306 <HAL_TIM_Base_Init+0x9e>
 800a2f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a2f4:	2a20      	cmp	r2, #32
 800a2f6:	d006      	beq.n	800a306 <HAL_TIM_Base_Init+0x9e>
 800a2f8:	2b40      	cmp	r3, #64	; 0x40
 800a2fa:	d004      	beq.n	800a306 <HAL_TIM_Base_Init+0x9e>
 800a2fc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800a300:	4818      	ldr	r0, [pc, #96]	; (800a364 <HAL_TIM_Base_Init+0xfc>)
 800a302:	f7f7 fc16 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a30c:	d007      	beq.n	800a31e <HAL_TIM_Base_Init+0xb6>
 800a30e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a312:	d004      	beq.n	800a31e <HAL_TIM_Base_Init+0xb6>
 800a314:	f240 110f 	movw	r1, #271	; 0x10f
 800a318:	4812      	ldr	r0, [pc, #72]	; (800a364 <HAL_TIM_Base_Init+0xfc>)
 800a31a:	f7f7 fc0a 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a31e:	69a3      	ldr	r3, [r4, #24]
 800a320:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a324:	d004      	beq.n	800a330 <HAL_TIM_Base_Init+0xc8>
 800a326:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a32a:	480e      	ldr	r0, [pc, #56]	; (800a364 <HAL_TIM_Base_Init+0xfc>)
 800a32c:	f7f7 fc01 	bl	8001b32 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a330:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a334:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a338:	b923      	cbnz	r3, 800a344 <HAL_TIM_Base_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800a33a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a33e:	4620      	mov	r0, r4
 800a340:	f7f7 ff98 	bl	8002274 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a344:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a346:	6820      	ldr	r0, [r4, #0]
 800a348:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800a34a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a34e:	f7ff ff25 	bl	800a19c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800a352:	2301      	movs	r3, #1
  return HAL_OK;
 800a354:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a35a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a35c:	2001      	movs	r0, #1
}
 800a35e:	bd10      	pop	{r4, pc}
 800a360:	40010000 	.word	0x40010000
 800a364:	0802afcf 	.word	0x0802afcf

0800a368 <HAL_TIM_PWM_Init>:
{
 800a368:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a36a:	4604      	mov	r4, r0
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d075      	beq.n	800a45c <HAL_TIM_PWM_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a370:	6803      	ldr	r3, [r0, #0]
 800a372:	4a3b      	ldr	r2, [pc, #236]	; (800a460 <HAL_TIM_PWM_Init+0xf8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d037      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37c:	d034      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a37e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a382:	4293      	cmp	r3, r2
 800a384:	d030      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a386:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d02c      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a38e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a392:	4293      	cmp	r3, r2
 800a394:	d028      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d024      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a39e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d020      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3a6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d01c      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3ae:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d018      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d014      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d010      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3c6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d008      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d004      	beq.n	800a3e8 <HAL_TIM_PWM_Init+0x80>
 800a3de:	f240 419a 	movw	r1, #1178	; 0x49a
 800a3e2:	4820      	ldr	r0, [pc, #128]	; (800a464 <HAL_TIM_PWM_Init+0xfc>)
 800a3e4:	f7f7 fba5 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a3e8:	68a3      	ldr	r3, [r4, #8]
 800a3ea:	f033 0210 	bics.w	r2, r3, #16
 800a3ee:	d00a      	beq.n	800a406 <HAL_TIM_PWM_Init+0x9e>
 800a3f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a3f4:	2a20      	cmp	r2, #32
 800a3f6:	d006      	beq.n	800a406 <HAL_TIM_PWM_Init+0x9e>
 800a3f8:	2b40      	cmp	r3, #64	; 0x40
 800a3fa:	d004      	beq.n	800a406 <HAL_TIM_PWM_Init+0x9e>
 800a3fc:	f240 419b 	movw	r1, #1179	; 0x49b
 800a400:	4818      	ldr	r0, [pc, #96]	; (800a464 <HAL_TIM_PWM_Init+0xfc>)
 800a402:	f7f7 fb96 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800a40c:	d007      	beq.n	800a41e <HAL_TIM_PWM_Init+0xb6>
 800a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a412:	d004      	beq.n	800a41e <HAL_TIM_PWM_Init+0xb6>
 800a414:	f240 419c 	movw	r1, #1180	; 0x49c
 800a418:	4812      	ldr	r0, [pc, #72]	; (800a464 <HAL_TIM_PWM_Init+0xfc>)
 800a41a:	f7f7 fb8a 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a41e:	69a3      	ldr	r3, [r4, #24]
 800a420:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a424:	d004      	beq.n	800a430 <HAL_TIM_PWM_Init+0xc8>
 800a426:	f240 419d 	movw	r1, #1181	; 0x49d
 800a42a:	480e      	ldr	r0, [pc, #56]	; (800a464 <HAL_TIM_PWM_Init+0xfc>)
 800a42c:	f7f7 fb81 	bl	8001b32 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a430:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800a434:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a438:	b923      	cbnz	r3, 800a444 <HAL_TIM_PWM_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800a43a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800a43e:	4620      	mov	r0, r4
 800a440:	f7f7 ff76 	bl	8002330 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a444:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a446:	6820      	ldr	r0, [r4, #0]
 800a448:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800a44a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a44e:	f7ff fea5 	bl	800a19c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800a452:	2301      	movs	r3, #1
  return HAL_OK;
 800a454:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a45a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a45c:	2001      	movs	r0, #1
}
 800a45e:	bd10      	pop	{r4, pc}
 800a460:	40010000 	.word	0x40010000
 800a464:	0802afcf 	.word	0x0802afcf

0800a468 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a468:	6a03      	ldr	r3, [r0, #32]
 800a46a:	f023 0310 	bic.w	r3, r3, #16
{
 800a46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a472:	6203      	str	r3, [r0, #32]
{
 800a474:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a476:	6a05      	ldr	r5, [r0, #32]
{
 800a478:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800a47a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a47e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800a480:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a484:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a48a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a48e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a492:	688b      	ldr	r3, [r1, #8]
 800a494:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a498:	4b1f      	ldr	r3, [pc, #124]	; (800a518 <TIM_OC2_SetConfig+0xb0>)
 800a49a:	4298      	cmp	r0, r3
 800a49c:	d003      	beq.n	800a4a6 <TIM_OC2_SetConfig+0x3e>
 800a49e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	d12f      	bne.n	800a506 <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a4a6:	68f3      	ldr	r3, [r6, #12]
 800a4a8:	f033 0308 	bics.w	r3, r3, #8
 800a4ac:	d004      	beq.n	800a4b8 <TIM_OC2_SetConfig+0x50>
 800a4ae:	f241 71c1 	movw	r1, #6081	; 0x17c1
 800a4b2:	481a      	ldr	r0, [pc, #104]	; (800a51c <TIM_OC2_SetConfig+0xb4>)
 800a4b4:	f7f7 fb3d 	bl	8001b32 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4b8:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4ba:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4be:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4c2:	4b15      	ldr	r3, [pc, #84]	; (800a518 <TIM_OC2_SetConfig+0xb0>)
 800a4c4:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4c6:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ca:	d003      	beq.n	800a4d4 <TIM_OC2_SetConfig+0x6c>
 800a4cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	d118      	bne.n	800a506 <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a4d4:	69b3      	ldr	r3, [r6, #24]
 800a4d6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a4da:	d004      	beq.n	800a4e6 <TIM_OC2_SetConfig+0x7e>
 800a4dc:	f241 71cf 	movw	r1, #6095	; 0x17cf
 800a4e0:	480e      	ldr	r0, [pc, #56]	; (800a51c <TIM_OC2_SetConfig+0xb4>)
 800a4e2:	f7f7 fb26 	bl	8001b32 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a4e6:	6973      	ldr	r3, [r6, #20]
 800a4e8:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a4ec:	d004      	beq.n	800a4f8 <TIM_OC2_SetConfig+0x90>
 800a4ee:	f241 71d0 	movw	r1, #6096	; 0x17d0
 800a4f2:	480a      	ldr	r0, [pc, #40]	; (800a51c <TIM_OC2_SetConfig+0xb4>)
 800a4f4:	f7f7 fb1d 	bl	8001b32 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4f8:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4fa:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4fe:	69b2      	ldr	r2, [r6, #24]
 800a500:	4313      	orrs	r3, r2
 800a502:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800a506:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a508:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a50c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a50e:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a510:	6225      	str	r5, [r4, #32]
 800a512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a516:	bf00      	nop
 800a518:	40010000 	.word	0x40010000
 800a51c:	0802afcf 	.word	0x0802afcf

0800a520 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800a520:	2a14      	cmp	r2, #20
{
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	460d      	mov	r5, r1
 800a528:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 800a52a:	f200 8165 	bhi.w	800a7f8 <HAL_TIM_PWM_ConfigChannel+0x2d8>
 800a52e:	4bb5      	ldr	r3, [pc, #724]	; (800a804 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800a530:	40d3      	lsrs	r3, r2
 800a532:	07db      	lsls	r3, r3, #31
 800a534:	d404      	bmi.n	800a540 <HAL_TIM_PWM_ConfigChannel+0x20>
 800a536:	f640 6113 	movw	r1, #3603	; 0xe13
 800a53a:	48b3      	ldr	r0, [pc, #716]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a53c:	f7f7 faf9 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	f023 0210 	bic.w	r2, r3, #16
 800a546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a54a:	f023 0310 	bic.w	r3, r3, #16
 800a54e:	2b60      	cmp	r3, #96	; 0x60
 800a550:	d007      	beq.n	800a562 <HAL_TIM_PWM_ConfigChannel+0x42>
 800a552:	4bae      	ldr	r3, [pc, #696]	; (800a80c <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 800a554:	429a      	cmp	r2, r3
 800a556:	d004      	beq.n	800a562 <HAL_TIM_PWM_ConfigChannel+0x42>
 800a558:	f640 6114 	movw	r1, #3604	; 0xe14
 800a55c:	48aa      	ldr	r0, [pc, #680]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a55e:	f7f7 fae8 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a562:	68ab      	ldr	r3, [r5, #8]
 800a564:	f033 0302 	bics.w	r3, r3, #2
 800a568:	d004      	beq.n	800a574 <HAL_TIM_PWM_ConfigChannel+0x54>
 800a56a:	f640 6115 	movw	r1, #3605	; 0xe15
 800a56e:	48a6      	ldr	r0, [pc, #664]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a570:	f7f7 fadf 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a574:	692b      	ldr	r3, [r5, #16]
 800a576:	f033 0304 	bics.w	r3, r3, #4
 800a57a:	d004      	beq.n	800a586 <HAL_TIM_PWM_ConfigChannel+0x66>
 800a57c:	f640 6116 	movw	r1, #3606	; 0xe16
 800a580:	48a1      	ldr	r0, [pc, #644]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a582:	f7f7 fad6 	bl	8001b32 <assert_failed>
  __HAL_LOCK(htim);
 800a586:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a58a:	2002      	movs	r0, #2
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	f000 8137 	beq.w	800a800 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800a592:	2301      	movs	r3, #1
  switch (Channel)
 800a594:	2e08      	cmp	r6, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800a596:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a59a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800a59e:	f000 80bf 	beq.w	800a720 <HAL_TIM_PWM_ConfigChannel+0x200>
 800a5a2:	d80b      	bhi.n	800a5bc <HAL_TIM_PWM_ConfigChannel+0x9c>
 800a5a4:	2e00      	cmp	r6, #0
 800a5a6:	d03f      	beq.n	800a628 <HAL_TIM_PWM_ConfigChannel+0x108>
 800a5a8:	2e04      	cmp	r6, #4
 800a5aa:	f000 8083 	beq.w	800a6b4 <HAL_TIM_PWM_ConfigChannel+0x194>
  htim->State = HAL_TIM_STATE_READY;
 800a5ae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a5b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a5b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a5b6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800a5bc:	2e10      	cmp	r6, #16
 800a5be:	f000 80dd 	beq.w	800a77c <HAL_TIM_PWM_ConfigChannel+0x25c>
 800a5c2:	2e14      	cmp	r6, #20
 800a5c4:	f000 80f9 	beq.w	800a7ba <HAL_TIM_PWM_ConfigChannel+0x29a>
 800a5c8:	2e0c      	cmp	r6, #12
 800a5ca:	d1f0      	bne.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	4a90      	ldr	r2, [pc, #576]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d017      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d8:	d014      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d010      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d00c      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d008      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d004      	beq.n	800a604 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800a5fa:	f640 6155 	movw	r1, #3669	; 0xe55
 800a5fe:	4882      	ldr	r0, [pc, #520]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a600:	f7f7 fa97 	bl	8001b32 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a604:	4629      	mov	r1, r5
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	f7ff fc82 	bl	8009f10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a60c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a60e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a616:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a618:	69da      	ldr	r2, [r3, #28]
 800a61a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a620:	69da      	ldr	r2, [r3, #28]
 800a622:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a626:	e0a7      	b.n	800a778 <HAL_TIM_PWM_ConfigChannel+0x258>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	4a79      	ldr	r2, [pc, #484]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d02f      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a634:	d02c      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a636:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d028      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a63e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a642:	4293      	cmp	r3, r2
 800a644:	d024      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d020      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a64e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a652:	4293      	cmp	r3, r2
 800a654:	d01c      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a656:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d018      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a65e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a662:	4293      	cmp	r3, r2
 800a664:	d014      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d010      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a66e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a672:	4293      	cmp	r3, r2
 800a674:	d00c      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d008      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a67e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a682:	4293      	cmp	r3, r2
 800a684:	d004      	beq.n	800a690 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a686:	f640 6122 	movw	r1, #3618	; 0xe22
 800a68a:	485f      	ldr	r0, [pc, #380]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a68c:	f7f7 fa51 	bl	8001b32 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a690:	4629      	mov	r1, r5
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	f7ff fb8a 	bl	8009dac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a698:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a69a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	f042 0208 	orr.w	r2, r2, #8
 800a6a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	f022 0204 	bic.w	r2, r2, #4
 800a6aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6b0:	619a      	str	r2, [r3, #24]
      break;
 800a6b2:	e77c      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	4a56      	ldr	r2, [pc, #344]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d01f      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c0:	d01c      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d018      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d014      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d010      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d00c      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d008      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d004      	beq.n	800a6fc <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800a6f2:	f640 6133 	movw	r1, #3635	; 0xe33
 800a6f6:	4844      	ldr	r0, [pc, #272]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a6f8:	f7f7 fa1b 	bl	8001b32 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	6820      	ldr	r0, [r4, #0]
 800a700:	f7ff feb2 	bl	800a468 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a704:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a706:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a708:	699a      	ldr	r2, [r3, #24]
 800a70a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a70e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a710:	699a      	ldr	r2, [r3, #24]
 800a712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a71e:	e7c7      	b.n	800a6b0 <HAL_TIM_PWM_ConfigChannel+0x190>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	4a3b      	ldr	r2, [pc, #236]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d017      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72c:	d014      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a72e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a732:	4293      	cmp	r3, r2
 800a734:	d010      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00c      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a73e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a742:	4293      	cmp	r3, r2
 800a744:	d008      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a746:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d004      	beq.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x238>
 800a74e:	f640 6144 	movw	r1, #3652	; 0xe44
 800a752:	482d      	ldr	r0, [pc, #180]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a754:	f7f7 f9ed 	bl	8001b32 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a758:	4629      	mov	r1, r5
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	f7ff fb7e 	bl	8009e5c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a760:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a762:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a764:	69da      	ldr	r2, [r3, #28]
 800a766:	f042 0208 	orr.w	r2, r2, #8
 800a76a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a76c:	69da      	ldr	r2, [r3, #28]
 800a76e:	f022 0204 	bic.w	r2, r2, #4
 800a772:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a774:	69da      	ldr	r2, [r3, #28]
 800a776:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a778:	61da      	str	r2, [r3, #28]
      break;
 800a77a:	e718      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	4a24      	ldr	r2, [pc, #144]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d008      	beq.n	800a796 <HAL_TIM_PWM_ConfigChannel+0x276>
 800a784:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a788:	4293      	cmp	r3, r2
 800a78a:	d004      	beq.n	800a796 <HAL_TIM_PWM_ConfigChannel+0x276>
 800a78c:	f640 6166 	movw	r1, #3686	; 0xe66
 800a790:	481d      	ldr	r0, [pc, #116]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a792:	f7f7 f9ce 	bl	8001b32 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a796:	4629      	mov	r1, r5
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	f7ff fab7 	bl	8009d0c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a79e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7a0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7a4:	f042 0208 	orr.w	r2, r2, #8
 800a7a8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ac:	f022 0204 	bic.w	r2, r2, #4
 800a7b0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7b8:	e6f9      	b.n	800a5ae <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	4a14      	ldr	r2, [pc, #80]	; (800a810 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d008      	beq.n	800a7d4 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800a7c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800a7ca:	f640 6177 	movw	r1, #3703	; 0xe77
 800a7ce:	480e      	ldr	r0, [pc, #56]	; (800a808 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800a7d0:	f7f7 f9af 	bl	8001b32 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	6820      	ldr	r0, [r4, #0]
 800a7d8:	f7ff fac0 	bl	8009d5c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7dc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7de:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a7f6:	e7de      	b.n	800a7b6 <HAL_TIM_PWM_ConfigChannel+0x296>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a7f8:	2a3c      	cmp	r2, #60	; 0x3c
 800a7fa:	f47f ae9c 	bne.w	800a536 <HAL_TIM_PWM_ConfigChannel+0x16>
 800a7fe:	e69f      	b.n	800a540 <HAL_TIM_PWM_ConfigChannel+0x20>
}
 800a800:	bd70      	pop	{r4, r5, r6, pc}
 800a802:	bf00      	nop
 800a804:	00111111 	.word	0x00111111
 800a808:	0802afcf 	.word	0x0802afcf
 800a80c:	00010040 	.word	0x00010040
 800a810:	40010000 	.word	0x40010000

0800a814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a814:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a816:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800a818:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a81a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a81e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a822:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a824:	6083      	str	r3, [r0, #8]
 800a826:	bd10      	pop	{r4, pc}

0800a828 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a82c:	2b01      	cmp	r3, #1
{
 800a82e:	b570      	push	{r4, r5, r6, lr}
 800a830:	4605      	mov	r5, r0
 800a832:	460c      	mov	r4, r1
 800a834:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800a838:	d029      	beq.n	800a88e <HAL_TIM_ConfigClockSource+0x66>
 800a83a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800a840:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a844:	680b      	ldr	r3, [r1, #0]
 800a846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a84a:	d00c      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x3e>
 800a84c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a850:	d009      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x3e>
 800a852:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a856:	d006      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x3e>
 800a858:	2b40      	cmp	r3, #64	; 0x40
 800a85a:	d004      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x3e>
 800a85c:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800a860:	48bb      	ldr	r0, [pc, #748]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a862:	f7f7 f966 	bl	8001b32 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 800a866:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a868:	4aba      	ldr	r2, [pc, #744]	; (800ab54 <HAL_TIM_ConfigClockSource+0x32c>)
  tmpsmcr = htim->Instance->SMCR;
 800a86a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a86c:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800a86e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	2a40      	cmp	r2, #64	; 0x40
 800a874:	f000 81bc 	beq.w	800abf0 <HAL_TIM_ConfigClockSource+0x3c8>
 800a878:	d833      	bhi.n	800a8e2 <HAL_TIM_ConfigClockSource+0xba>
 800a87a:	2a10      	cmp	r2, #16
 800a87c:	d00c      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x70>
 800a87e:	d807      	bhi.n	800a890 <HAL_TIM_ConfigClockSource+0x68>
 800a880:	b152      	cbz	r2, 800a898 <HAL_TIM_ConfigClockSource+0x70>
  htim->State = HAL_TIM_STATE_READY;
 800a882:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a884:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a886:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a88a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 800a88e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800a890:	2a20      	cmp	r2, #32
 800a892:	d001      	beq.n	800a898 <HAL_TIM_ConfigClockSource+0x70>
 800a894:	2a30      	cmp	r2, #48	; 0x30
 800a896:	d1f4      	bne.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a898:	4aaf      	ldr	r2, [pc, #700]	; (800ab58 <HAL_TIM_ConfigClockSource+0x330>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d017      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a2:	d014      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a8a4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d010      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a8ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00c      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a8b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d008      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a8bc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d004      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0xa6>
 800a8c4:	f241 2168 	movw	r1, #4712	; 0x1268
 800a8c8:	48a1      	ldr	r0, [pc, #644]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a8ca:	f7f7 f932 	bl	8001b32 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8ce:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8d0:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800a8d2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8d4:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8dc:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800a8de:	608b      	str	r3, [r1, #8]
 800a8e0:	e7cf      	b.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800a8e2:	2a70      	cmp	r2, #112	; 0x70
 800a8e4:	f000 80e6 	beq.w	800aab4 <HAL_TIM_ConfigClockSource+0x28c>
 800a8e8:	d84e      	bhi.n	800a988 <HAL_TIM_ConfigClockSource+0x160>
 800a8ea:	2a50      	cmp	r2, #80	; 0x50
 800a8ec:	f000 8136 	beq.w	800ab5c <HAL_TIM_ConfigClockSource+0x334>
 800a8f0:	2a60      	cmp	r2, #96	; 0x60
 800a8f2:	d1c6      	bne.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a8f4:	4a98      	ldr	r2, [pc, #608]	; (800ab58 <HAL_TIM_ConfigClockSource+0x330>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d017      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fe:	d014      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a900:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a904:	4293      	cmp	r3, r2
 800a906:	d010      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a908:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00c      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a914:	4293      	cmp	r3, r2
 800a916:	d008      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a918:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d004      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x102>
 800a920:	f241 2145 	movw	r1, #4677	; 0x1245
 800a924:	488a      	ldr	r0, [pc, #552]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a926:	f7f7 f904 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a92a:	6863      	ldr	r3, [r4, #4]
 800a92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a930:	d009      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x11e>
 800a932:	f033 0202 	bics.w	r2, r3, #2
 800a936:	d006      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x11e>
 800a938:	2b0a      	cmp	r3, #10
 800a93a:	d004      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x11e>
 800a93c:	f241 2148 	movw	r1, #4680	; 0x1248
 800a940:	4883      	ldr	r0, [pc, #524]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a942:	f7f7 f8f6 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a946:	68e3      	ldr	r3, [r4, #12]
 800a948:	2b0f      	cmp	r3, #15
 800a94a:	d904      	bls.n	800a956 <HAL_TIM_ConfigClockSource+0x12e>
 800a94c:	f241 2149 	movw	r1, #4681	; 0x1249
 800a950:	487f      	ldr	r0, [pc, #508]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a952:	f7f7 f8ee 	bl	8001b32 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a956:	682b      	ldr	r3, [r5, #0]
 800a958:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a95a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a95c:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a95e:	f020 0010 	bic.w	r0, r0, #16
 800a962:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a964:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a966:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a968:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a96c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a970:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a974:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a978:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a97a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800a97c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a97e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a982:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800a986:	e131      	b.n	800abec <HAL_TIM_ConfigClockSource+0x3c4>
  switch (sClockSourceConfig->ClockSource)
 800a988:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a98c:	d048      	beq.n	800aa20 <HAL_TIM_ConfigClockSource+0x1f8>
 800a98e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a992:	f47f af76 	bne.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a996:	4a70      	ldr	r2, [pc, #448]	; (800ab58 <HAL_TIM_ConfigClockSource+0x330>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d017      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a0:	d014      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a9a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d010      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a9aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00c      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a9b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d008      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a9ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d004      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x1a4>
 800a9c2:	f241 2121 	movw	r1, #4641	; 0x1221
 800a9c6:	4862      	ldr	r0, [pc, #392]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a9c8:	f7f7 f8b3 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a9cc:	68a3      	ldr	r3, [r4, #8]
 800a9ce:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a9d2:	d004      	beq.n	800a9de <HAL_TIM_ConfigClockSource+0x1b6>
 800a9d4:	f241 2124 	movw	r1, #4644	; 0x1224
 800a9d8:	485d      	ldr	r0, [pc, #372]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a9da:	f7f7 f8aa 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9e4:	d009      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1d2>
 800a9e6:	f033 0202 	bics.w	r2, r3, #2
 800a9ea:	d006      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1d2>
 800a9ec:	2b0a      	cmp	r3, #10
 800a9ee:	d004      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0x1d2>
 800a9f0:	f241 2125 	movw	r1, #4645	; 0x1225
 800a9f4:	4856      	ldr	r0, [pc, #344]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800a9f6:	f7f7 f89c 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a9fa:	68e3      	ldr	r3, [r4, #12]
 800a9fc:	2b0f      	cmp	r3, #15
 800a9fe:	d904      	bls.n	800aa0a <HAL_TIM_ConfigClockSource+0x1e2>
 800aa00:	f241 2126 	movw	r1, #4646	; 0x1226
 800aa04:	4852      	ldr	r0, [pc, #328]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800aa06:	f7f7 f894 	bl	8001b32 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	6862      	ldr	r2, [r4, #4]
 800aa0e:	68a1      	ldr	r1, [r4, #8]
 800aa10:	6828      	ldr	r0, [r5, #0]
 800aa12:	f7ff feff 	bl	800a814 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa16:	682a      	ldr	r2, [r5, #0]
 800aa18:	6893      	ldr	r3, [r2, #8]
 800aa1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa1e:	e095      	b.n	800ab4c <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aa20:	4a4d      	ldr	r2, [pc, #308]	; (800ab58 <HAL_TIM_ConfigClockSource+0x330>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	f43f af2d 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2c:	f43f af29 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa30:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aa34:	4293      	cmp	r3, r2
 800aa36:	f43f af24 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	f43f af1f 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	f43f af1a 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa52:	4293      	cmp	r3, r2
 800aa54:	f43f af15 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	f43f af10 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa62:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800aa66:	4293      	cmp	r3, r2
 800aa68:	f43f af0b 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa6c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800aa70:	4293      	cmp	r3, r2
 800aa72:	f43f af06 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	f43f af01 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa84:	4293      	cmp	r3, r2
 800aa86:	f43f aefc 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa8a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	f43f aef7 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	f43f aef2 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aa9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	f43f aeed 	beq.w	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800aaa8:	f241 2102 	movw	r1, #4610	; 0x1202
 800aaac:	4828      	ldr	r0, [pc, #160]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800aaae:	f7f7 f840 	bl	8001b32 <assert_failed>
 800aab2:	e6e6      	b.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800aab4:	4a28      	ldr	r2, [pc, #160]	; (800ab58 <HAL_TIM_ConfigClockSource+0x330>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d01f      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aaba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aabe:	d01c      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aac0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d018      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aac8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aacc:	4293      	cmp	r3, r2
 800aace:	d014      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aad0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d010      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aad8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00c      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aae0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d008      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aae8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d004      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x2d2>
 800aaf0:	f241 2109 	movw	r1, #4617	; 0x1209
 800aaf4:	4816      	ldr	r0, [pc, #88]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800aaf6:	f7f7 f81c 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ab00:	d004      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x2e4>
 800ab02:	f241 210c 	movw	r1, #4620	; 0x120c
 800ab06:	4812      	ldr	r0, [pc, #72]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800ab08:	f7f7 f813 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab12:	d009      	beq.n	800ab28 <HAL_TIM_ConfigClockSource+0x300>
 800ab14:	f033 0202 	bics.w	r2, r3, #2
 800ab18:	d006      	beq.n	800ab28 <HAL_TIM_ConfigClockSource+0x300>
 800ab1a:	2b0a      	cmp	r3, #10
 800ab1c:	d004      	beq.n	800ab28 <HAL_TIM_ConfigClockSource+0x300>
 800ab1e:	f241 210d 	movw	r1, #4621	; 0x120d
 800ab22:	480b      	ldr	r0, [pc, #44]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800ab24:	f7f7 f805 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ab28:	68e3      	ldr	r3, [r4, #12]
 800ab2a:	2b0f      	cmp	r3, #15
 800ab2c:	d904      	bls.n	800ab38 <HAL_TIM_ConfigClockSource+0x310>
 800ab2e:	f241 210e 	movw	r1, #4622	; 0x120e
 800ab32:	4807      	ldr	r0, [pc, #28]	; (800ab50 <HAL_TIM_ConfigClockSource+0x328>)
 800ab34:	f7f6 fffd 	bl	8001b32 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ab38:	68e3      	ldr	r3, [r4, #12]
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	68a1      	ldr	r1, [r4, #8]
 800ab3e:	6828      	ldr	r0, [r5, #0]
 800ab40:	f7ff fe68 	bl	800a814 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab44:	682a      	ldr	r2, [r5, #0]
 800ab46:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab4c:	6093      	str	r3, [r2, #8]
      break;
 800ab4e:	e698      	b.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
 800ab50:	0802afcf 	.word	0x0802afcf
 800ab54:	fffe0088 	.word	0xfffe0088
 800ab58:	40010000 	.word	0x40010000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ab5c:	4a49      	ldr	r2, [pc, #292]	; (800ac84 <HAL_TIM_ConfigClockSource+0x45c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d017      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab66:	d014      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab68:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d010      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00c      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d008      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab80:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d004      	beq.n	800ab92 <HAL_TIM_ConfigClockSource+0x36a>
 800ab88:	f241 2135 	movw	r1, #4661	; 0x1235
 800ab8c:	483e      	ldr	r0, [pc, #248]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800ab8e:	f7f6 ffd0 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ab92:	6863      	ldr	r3, [r4, #4]
 800ab94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab98:	d009      	beq.n	800abae <HAL_TIM_ConfigClockSource+0x386>
 800ab9a:	f033 0202 	bics.w	r2, r3, #2
 800ab9e:	d006      	beq.n	800abae <HAL_TIM_ConfigClockSource+0x386>
 800aba0:	2b0a      	cmp	r3, #10
 800aba2:	d004      	beq.n	800abae <HAL_TIM_ConfigClockSource+0x386>
 800aba4:	f241 2138 	movw	r1, #4664	; 0x1238
 800aba8:	4837      	ldr	r0, [pc, #220]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800abaa:	f7f6 ffc2 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d904      	bls.n	800abbe <HAL_TIM_ConfigClockSource+0x396>
 800abb4:	f241 2139 	movw	r1, #4665	; 0x1239
 800abb8:	4833      	ldr	r0, [pc, #204]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800abba:	f7f6 ffba 	bl	8001b32 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abbe:	682b      	ldr	r3, [r5, #0]
 800abc0:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800abc2:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc4:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc6:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abc8:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abcc:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800abd0:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abd2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abd4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abda:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800abde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abe0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800abe2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800abe4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abe8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800abec:	609a      	str	r2, [r3, #8]
 800abee:	e648      	b.n	800a882 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800abf0:	4a24      	ldr	r2, [pc, #144]	; (800ac84 <HAL_TIM_ConfigClockSource+0x45c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d017      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800abf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abfa:	d014      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800abfc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d010      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800ac04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00c      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800ac0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d008      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800ac14:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d004      	beq.n	800ac26 <HAL_TIM_ConfigClockSource+0x3fe>
 800ac1c:	f241 2155 	movw	r1, #4693	; 0x1255
 800ac20:	4819      	ldr	r0, [pc, #100]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800ac22:	f7f6 ff86 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ac26:	6863      	ldr	r3, [r4, #4]
 800ac28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2c:	d009      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x41a>
 800ac2e:	f033 0202 	bics.w	r2, r3, #2
 800ac32:	d006      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x41a>
 800ac34:	2b0a      	cmp	r3, #10
 800ac36:	d004      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x41a>
 800ac38:	f241 2158 	movw	r1, #4696	; 0x1258
 800ac3c:	4812      	ldr	r0, [pc, #72]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800ac3e:	f7f6 ff78 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ac42:	68e3      	ldr	r3, [r4, #12]
 800ac44:	2b0f      	cmp	r3, #15
 800ac46:	d904      	bls.n	800ac52 <HAL_TIM_ConfigClockSource+0x42a>
 800ac48:	f241 2159 	movw	r1, #4697	; 0x1259
 800ac4c:	480e      	ldr	r0, [pc, #56]	; (800ac88 <HAL_TIM_ConfigClockSource+0x460>)
 800ac4e:	f7f6 ff70 	bl	8001b32 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac52:	682b      	ldr	r3, [r5, #0]
 800ac54:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800ac56:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac58:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac5a:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac5c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac60:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800ac64:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac66:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac68:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac6e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ac72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac74:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800ac76:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800ac80:	e7b4      	b.n	800abec <HAL_TIM_ConfigClockSource+0x3c4>
 800ac82:	bf00      	nop
 800ac84:	40010000 	.word	0x40010000
 800ac88:	0802afcf 	.word	0x0802afcf

0800ac8c <TIM_SlaveTimer_SetConfig>:
{
 800ac8c:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800ac8e:	6803      	ldr	r3, [r0, #0]
{
 800ac90:	460c      	mov	r4, r1
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ac92:	6849      	ldr	r1, [r1, #4]
{
 800ac94:	4605      	mov	r5, r0
  tmpsmcr = htim->Instance->SMCR;
 800ac96:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ac98:	6820      	ldr	r0, [r4, #0]
  switch (sSlaveConfig->InputTrigger)
 800ac9a:	2930      	cmp	r1, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800aca0:	ea42 0201 	orr.w	r2, r2, r1
  tmpsmcr &= ~TIM_SMCR_SMS;
 800aca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aca8:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800acac:	ea42 0200 	orr.w	r2, r2, r0
  htim->Instance->SMCR = tmpsmcr;
 800acb0:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800acb2:	d005      	beq.n	800acc0 <TIM_SlaveTimer_SetConfig+0x34>
 800acb4:	d828      	bhi.n	800ad08 <TIM_SlaveTimer_SetConfig+0x7c>
 800acb6:	2910      	cmp	r1, #16
 800acb8:	d002      	beq.n	800acc0 <TIM_SlaveTimer_SetConfig+0x34>
 800acba:	2920      	cmp	r1, #32
 800acbc:	d000      	beq.n	800acc0 <TIM_SlaveTimer_SetConfig+0x34>
 800acbe:	bb49      	cbnz	r1, 800ad14 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800acc0:	4ab8      	ldr	r2, [pc, #736]	; (800afa4 <TIM_SlaveTimer_SetConfig+0x318>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d026      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acca:	d023      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800accc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d01f      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acd8:	4293      	cmp	r3, r2
 800acda:	d01b      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d017      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800ace4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ace8:	4293      	cmp	r3, r2
 800acea:	d013      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00f      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acf4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00b      	beq.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
 800acfc:	f641 1144 	movw	r1, #6468	; 0x1944
 800ad00:	48a9      	ldr	r0, [pc, #676]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ad02:	f7f6 ff16 	bl	8001b32 <assert_failed>
 800ad06:	e005      	b.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800ad08:	2950      	cmp	r1, #80	; 0x50
 800ad0a:	f000 80a1 	beq.w	800ae50 <TIM_SlaveTimer_SetConfig+0x1c4>
 800ad0e:	d803      	bhi.n	800ad18 <TIM_SlaveTimer_SetConfig+0x8c>
 800ad10:	2940      	cmp	r1, #64	; 0x40
 800ad12:	d04f      	beq.n	800adb4 <TIM_SlaveTimer_SetConfig+0x128>
  return HAL_OK;
 800ad14:	2000      	movs	r0, #0
}
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800ad18:	2960      	cmp	r1, #96	; 0x60
 800ad1a:	f000 80f3 	beq.w	800af04 <TIM_SlaveTimer_SetConfig+0x278>
 800ad1e:	2970      	cmp	r1, #112	; 0x70
 800ad20:	d1f8      	bne.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ad22:	4aa0      	ldr	r2, [pc, #640]	; (800afa4 <TIM_SlaveTimer_SetConfig+0x318>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d01f      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d01c      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d018      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d014      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d010      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad46:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d00c      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad4e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d008      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <TIM_SlaveTimer_SetConfig+0xdc>
 800ad5e:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800ad62:	4891      	ldr	r0, [pc, #580]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ad64:	f7f6 fee5 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800ad68:	68e3      	ldr	r3, [r4, #12]
 800ad6a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ad6e:	d004      	beq.n	800ad7a <TIM_SlaveTimer_SetConfig+0xee>
 800ad70:	f641 01fd 	movw	r1, #6397	; 0x18fd
 800ad74:	488c      	ldr	r0, [pc, #560]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ad76:	f7f6 fedc 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad80:	d009      	beq.n	800ad96 <TIM_SlaveTimer_SetConfig+0x10a>
 800ad82:	f033 0202 	bics.w	r2, r3, #2
 800ad86:	d006      	beq.n	800ad96 <TIM_SlaveTimer_SetConfig+0x10a>
 800ad88:	2b0a      	cmp	r3, #10
 800ad8a:	d004      	beq.n	800ad96 <TIM_SlaveTimer_SetConfig+0x10a>
 800ad8c:	f641 01fe 	movw	r1, #6398	; 0x18fe
 800ad90:	4885      	ldr	r0, [pc, #532]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ad92:	f7f6 fece 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ad96:	6923      	ldr	r3, [r4, #16]
 800ad98:	2b0f      	cmp	r3, #15
 800ad9a:	d904      	bls.n	800ada6 <TIM_SlaveTimer_SetConfig+0x11a>
 800ad9c:	f641 01ff 	movw	r1, #6399	; 0x18ff
 800ada0:	4881      	ldr	r0, [pc, #516]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ada2:	f7f6 fec6 	bl	8001b32 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	68a2      	ldr	r2, [r4, #8]
 800adaa:	68e1      	ldr	r1, [r4, #12]
 800adac:	6828      	ldr	r0, [r5, #0]
 800adae:	f7ff fd31 	bl	800a814 <TIM_ETR_SetConfig>
 800adb2:	e7af      	b.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800adb4:	4a7b      	ldr	r2, [pc, #492]	; (800afa4 <TIM_SlaveTimer_SetConfig+0x318>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02f      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800adba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adbe:	d02c      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800adc0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d028      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800adc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adcc:	4293      	cmp	r3, r2
 800adce:	d024      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800add0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800add4:	4293      	cmp	r3, r2
 800add6:	d020      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800add8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800addc:	4293      	cmp	r3, r2
 800adde:	d01c      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800ade0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d018      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800ade8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adec:	4293      	cmp	r3, r2
 800adee:	d014      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800adf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d010      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800adf8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00c      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800ae00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d008      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800ae08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d004      	beq.n	800ae1a <TIM_SlaveTimer_SetConfig+0x18e>
 800ae10:	f641 110b 	movw	r1, #6411	; 0x190b
 800ae14:	4864      	ldr	r0, [pc, #400]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ae16:	f7f6 fe8c 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	2b0f      	cmp	r3, #15
 800ae1e:	d904      	bls.n	800ae2a <TIM_SlaveTimer_SetConfig+0x19e>
 800ae20:	f641 110c 	movw	r1, #6412	; 0x190c
 800ae24:	4860      	ldr	r0, [pc, #384]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800ae26:	f7f6 fe84 	bl	8001b32 <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	2b05      	cmp	r3, #5
 800ae2e:	f000 80b6 	beq.w	800af9e <TIM_SlaveTimer_SetConfig+0x312>
      tmpccer = htim->Instance->CCER;
 800ae32:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae34:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800ae36:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ae38:	6a1a      	ldr	r2, [r3, #32]
 800ae3a:	f022 0201 	bic.w	r2, r2, #1
 800ae3e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ae40:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae46:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ae4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae4c:	6219      	str	r1, [r3, #32]
 800ae4e:	e761      	b.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ae50:	4a54      	ldr	r2, [pc, #336]	; (800afa4 <TIM_SlaveTimer_SetConfig+0x318>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d02f      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5a:	d02c      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae5c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d028      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d024      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d020      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae74:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d01c      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae7c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d018      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d014      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d010      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae94:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d00c      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800ae9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d008      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800aea4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d004      	beq.n	800aeb6 <TIM_SlaveTimer_SetConfig+0x22a>
 800aeac:	f641 1125 	movw	r1, #6437	; 0x1925
 800aeb0:	483d      	ldr	r0, [pc, #244]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800aeb2:	f7f6 fe3e 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aebc:	d009      	beq.n	800aed2 <TIM_SlaveTimer_SetConfig+0x246>
 800aebe:	f033 0202 	bics.w	r2, r3, #2
 800aec2:	d006      	beq.n	800aed2 <TIM_SlaveTimer_SetConfig+0x246>
 800aec4:	2b0a      	cmp	r3, #10
 800aec6:	d004      	beq.n	800aed2 <TIM_SlaveTimer_SetConfig+0x246>
 800aec8:	f641 1126 	movw	r1, #6438	; 0x1926
 800aecc:	4836      	ldr	r0, [pc, #216]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800aece:	f7f6 fe30 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	2b0f      	cmp	r3, #15
 800aed6:	d904      	bls.n	800aee2 <TIM_SlaveTimer_SetConfig+0x256>
 800aed8:	f641 1127 	movw	r1, #6439	; 0x1927
 800aedc:	4832      	ldr	r0, [pc, #200]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800aede:	f7f6 fe28 	bl	8001b32 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800aee6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee8:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeea:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeec:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aef0:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800aef4:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aef6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aefa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aefe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800af02:	e7a2      	b.n	800ae4a <TIM_SlaveTimer_SetConfig+0x1be>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800af04:	4a27      	ldr	r2, [pc, #156]	; (800afa4 <TIM_SlaveTimer_SetConfig+0x318>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d01f      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0e:	d01c      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af10:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800af14:	4293      	cmp	r3, r2
 800af16:	d018      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d014      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af24:	4293      	cmp	r3, r2
 800af26:	d010      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af28:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00c      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af30:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800af34:	4293      	cmp	r3, r2
 800af36:	d008      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af38:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d004      	beq.n	800af4a <TIM_SlaveTimer_SetConfig+0x2be>
 800af40:	f641 1133 	movw	r1, #6451	; 0x1933
 800af44:	4818      	ldr	r0, [pc, #96]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800af46:	f7f6 fdf4 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800af4a:	68a3      	ldr	r3, [r4, #8]
 800af4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af50:	d009      	beq.n	800af66 <TIM_SlaveTimer_SetConfig+0x2da>
 800af52:	f033 0202 	bics.w	r2, r3, #2
 800af56:	d006      	beq.n	800af66 <TIM_SlaveTimer_SetConfig+0x2da>
 800af58:	2b0a      	cmp	r3, #10
 800af5a:	d004      	beq.n	800af66 <TIM_SlaveTimer_SetConfig+0x2da>
 800af5c:	f641 1134 	movw	r1, #6452	; 0x1934
 800af60:	4811      	ldr	r0, [pc, #68]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800af62:	f7f6 fde6 	bl	8001b32 <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	2b0f      	cmp	r3, #15
 800af6a:	d904      	bls.n	800af76 <TIM_SlaveTimer_SetConfig+0x2ea>
 800af6c:	f641 1135 	movw	r1, #6453	; 0x1935
 800af70:	480d      	ldr	r0, [pc, #52]	; (800afa8 <TIM_SlaveTimer_SetConfig+0x31c>)
 800af72:	f7f6 fdde 	bl	8001b32 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af7a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af7c:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af7e:	f020 0010 	bic.w	r0, r0, #16
 800af82:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af84:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800af86:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af88:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af90:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800af94:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800af98:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800af9a:	621a      	str	r2, [r3, #32]
 800af9c:	e6ba      	b.n	800ad14 <TIM_SlaveTimer_SetConfig+0x88>
        return HAL_ERROR;
 800af9e:	2001      	movs	r0, #1
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	bf00      	nop
 800afa4:	40010000 	.word	0x40010000
 800afa8:	0802afcf 	.word	0x0802afcf

0800afac <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800afac:	6803      	ldr	r3, [r0, #0]
 800afae:	4a30      	ldr	r2, [pc, #192]	; (800b070 <HAL_TIM_SlaveConfigSynchro+0xc4>)
 800afb0:	4293      	cmp	r3, r2
{
 800afb2:	b570      	push	{r4, r5, r6, lr}
 800afb4:	4604      	mov	r4, r0
 800afb6:	460e      	mov	r6, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800afb8:	d01f      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afbe:	d01c      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afc0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d018      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800afcc:	4293      	cmp	r3, r2
 800afce:	d014      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d010      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800afdc:	4293      	cmp	r3, r2
 800afde:	d00c      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afe0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d008      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800afe8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <HAL_TIM_SlaveConfigSynchro+0x4e>
 800aff0:	f241 21a7 	movw	r1, #4775	; 0x12a7
 800aff4:	481f      	ldr	r0, [pc, #124]	; (800b074 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800aff6:	f7f6 fd9c 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800affa:	6833      	ldr	r3, [r6, #0]
 800affc:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800b000:	d007      	beq.n	800b012 <HAL_TIM_SlaveConfigSynchro+0x66>
 800b002:	3b04      	subs	r3, #4
 800b004:	2b03      	cmp	r3, #3
 800b006:	d904      	bls.n	800b012 <HAL_TIM_SlaveConfigSynchro+0x66>
 800b008:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800b00c:	4819      	ldr	r0, [pc, #100]	; (800b074 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800b00e:	f7f6 fd90 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800b012:	6873      	ldr	r3, [r6, #4]
 800b014:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b018:	d006      	beq.n	800b028 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b01a:	2b40      	cmp	r3, #64	; 0x40
 800b01c:	d004      	beq.n	800b028 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b01e:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800b022:	4814      	ldr	r0, [pc, #80]	; (800b074 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800b024:	f7f6 fd85 	bl	8001b32 <assert_failed>
  __HAL_LOCK(htim);
 800b028:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b02c:	2002      	movs	r0, #2
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d01d      	beq.n	800b06e <HAL_TIM_SlaveConfigSynchro+0xc2>
 800b032:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b034:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b038:	4631      	mov	r1, r6
 800b03a:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800b03c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b040:	f7ff fe24 	bl	800ac8c <TIM_SlaveTimer_SetConfig>
 800b044:	b130      	cbz	r0, 800b054 <HAL_TIM_SlaveConfigSynchro+0xa8>
    __HAL_UNLOCK(htim);
 800b046:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 800b048:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800b04c:	4628      	mov	r0, r5
    __HAL_UNLOCK(htim);
 800b04e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800b052:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	68da      	ldr	r2, [r3, #12]
 800b058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b05c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b05e:	68da      	ldr	r2, [r3, #12]
 800b060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b064:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800b066:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b06a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	40010000 	.word	0x40010000
 800b074:	0802afcf 	.word	0x0802afcf

0800b078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b07a:	4a3b      	ldr	r2, [pc, #236]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
{
 800b07c:	4605      	mov	r5, r0
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b07e:	6803      	ldr	r3, [r0, #0]
{
 800b080:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800b082:	4293      	cmp	r3, r2
 800b084:	d01f      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b08a:	d01c      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b08c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b090:	4293      	cmp	r3, r2
 800b092:	d018      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b098:	4293      	cmp	r3, r2
 800b09a:	d014      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b09c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d010      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b0a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d00c      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b0ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d008      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b0b4:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d004      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800b0bc:	f240 6163 	movw	r1, #1635	; 0x663
 800b0c0:	482a      	ldr	r0, [pc, #168]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0c2:	f7f6 fd36 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b0c6:	6833      	ldr	r3, [r6, #0]
 800b0c8:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b0cc:	d006      	beq.n	800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b0ce:	2b40      	cmp	r3, #64	; 0x40
 800b0d0:	d004      	beq.n	800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b0d2:	f240 6164 	movw	r1, #1636	; 0x664
 800b0d6:	4825      	ldr	r0, [pc, #148]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0d8:	f7f6 fd2b 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b0dc:	68b3      	ldr	r3, [r6, #8]
 800b0de:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800b0e2:	d004      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800b0e4:	f240 6165 	movw	r1, #1637	; 0x665
 800b0e8:	4820      	ldr	r0, [pc, #128]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0ea:	f7f6 fd22 	bl	8001b32 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b0f2:	2002      	movs	r0, #2
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d035      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xec>
 800b0f8:	2301      	movs	r3, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0fa:	4a1b      	ldr	r2, [pc, #108]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b0fc:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b100:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 800b104:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b106:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800b108:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800b10a:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b10c:	d003      	beq.n	800b116 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800b10e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b112:	4293      	cmp	r3, r2
 800b114:	d115      	bne.n	800b142 <HAL_TIMEx_MasterConfigSynchronization+0xca>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800b116:	6873      	ldr	r3, [r6, #4]
 800b118:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 800b11c:	d00d      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b11e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b122:	d00a      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b128:	d007      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b12a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b12e:	d004      	beq.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b130:	f240 6177 	movw	r1, #1655	; 0x677
 800b134:	480d      	ldr	r0, [pc, #52]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b136:	f7f6 fcfc 	bl	8001b32 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b13a:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b13e:	6873      	ldr	r3, [r6, #4]
 800b140:	431c      	orrs	r4, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b142:	6833      	ldr	r3, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800b144:	f024 0470 	bic.w	r4, r4, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b148:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800b14c:	2000      	movs	r0, #0
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b14e:	431c      	orrs	r4, r3
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b150:	68b3      	ldr	r3, [r6, #8]
 800b152:	431f      	orrs	r7, r3
  htim->Instance->CR2 = tmpcr2;
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	605c      	str	r4, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800b158:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800b15a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b15c:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800b160:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d

  return HAL_OK;
}
 800b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b166:	bf00      	nop
 800b168:	40010000 	.word	0x40010000
 800b16c:	0802b00d 	.word	0x0802b00d

0800b170 <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b170:	6803      	ldr	r3, [r0, #0]
 800b172:	4a58      	ldr	r2, [pc, #352]	; (800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 800b174:	4293      	cmp	r3, r2
{
 800b176:	b570      	push	{r4, r5, r6, lr}
 800b178:	4605      	mov	r5, r0
 800b17a:	460e      	mov	r6, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b17c:	d008      	beq.n	800b190 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800b17e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b182:	4293      	cmp	r3, r2
 800b184:	d004      	beq.n	800b190 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800b186:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800b18a:	4853      	ldr	r0, [pc, #332]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b18c:	f7f6 fcd1 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b190:	6833      	ldr	r3, [r6, #0]
 800b192:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800b196:	d004      	beq.n	800b1a2 <HAL_TIMEx_ConfigBreakDeadTime+0x32>
 800b198:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800b19c:	484e      	ldr	r0, [pc, #312]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b19e:	f7f6 fcc8 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b1a2:	6873      	ldr	r3, [r6, #4]
 800b1a4:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800b1a8:	d004      	beq.n	800b1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800b1aa:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800b1ae:	484a      	ldr	r0, [pc, #296]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b1b0:	f7f6 fcbf 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b1b4:	68b3      	ldr	r3, [r6, #8]
 800b1b6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b1ba:	d004      	beq.n	800b1c6 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800b1bc:	f240 61a9 	movw	r1, #1705	; 0x6a9
 800b1c0:	4845      	ldr	r0, [pc, #276]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b1c2:	f7f6 fcb6 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b1c6:	68f3      	ldr	r3, [r6, #12]
 800b1c8:	2bff      	cmp	r3, #255	; 0xff
 800b1ca:	d904      	bls.n	800b1d6 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800b1cc:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800b1d0:	4841      	ldr	r0, [pc, #260]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b1d2:	f7f6 fcae 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b1d6:	6933      	ldr	r3, [r6, #16]
 800b1d8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b1dc:	d004      	beq.n	800b1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 800b1de:	f240 61ab 	movw	r1, #1707	; 0x6ab
 800b1e2:	483d      	ldr	r0, [pc, #244]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b1e4:	f7f6 fca5 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b1e8:	6973      	ldr	r3, [r6, #20]
 800b1ea:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800b1ee:	d004      	beq.n	800b1fa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800b1f0:	f240 61ac 	movw	r1, #1708	; 0x6ac
 800b1f4:	4838      	ldr	r0, [pc, #224]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b1f6:	f7f6 fc9c 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800b1fa:	69b3      	ldr	r3, [r6, #24]
 800b1fc:	2b0f      	cmp	r3, #15
 800b1fe:	d904      	bls.n	800b20a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800b200:	f240 61ad 	movw	r1, #1709	; 0x6ad
 800b204:	4834      	ldr	r0, [pc, #208]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b206:	f7f6 fc94 	bl	8001b32 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b20a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b20c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800b210:	d004      	beq.n	800b21c <HAL_TIMEx_ConfigBreakDeadTime+0xac>
 800b212:	f240 61ae 	movw	r1, #1710	; 0x6ae
 800b216:	4830      	ldr	r0, [pc, #192]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b218:	f7f6 fc8b 	bl	8001b32 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b21c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d055      	beq.n	800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 800b224:	2301      	movs	r3, #1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b226:	4a2b      	ldr	r2, [pc, #172]	; (800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
  __HAL_LOCK(htim);
 800b228:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b22c:	68f3      	ldr	r3, [r6, #12]
 800b22e:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 800b232:	68b3      	ldr	r3, [r6, #8]
 800b234:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b236:	6873      	ldr	r3, [r6, #4]
 800b238:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800b23c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b23e:	6833      	ldr	r3, [r6, #0]
 800b240:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800b244:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b246:	6933      	ldr	r3, [r6, #16]
 800b248:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800b24c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b24e:	6973      	ldr	r3, [r6, #20]
 800b250:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800b254:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b256:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b258:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800b25c:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b25e:	69b3      	ldr	r3, [r6, #24]
 800b260:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 800b264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d003      	beq.n	800b276 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800b26e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b272:	4293      	cmp	r3, r2
 800b274:	d126      	bne.n	800b2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x154>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800b276:	69f3      	ldr	r3, [r6, #28]
 800b278:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800b27c:	d004      	beq.n	800b288 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800b27e:	f240 61c3 	movw	r1, #1731	; 0x6c3
 800b282:	4815      	ldr	r0, [pc, #84]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b284:	f7f6 fc55 	bl	8001b32 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800b288:	6a33      	ldr	r3, [r6, #32]
 800b28a:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800b28e:	d004      	beq.n	800b29a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b290:	f240 61c4 	movw	r1, #1732	; 0x6c4
 800b294:	4810      	ldr	r0, [pc, #64]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b296:	f7f6 fc4c 	bl	8001b32 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800b29a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b29c:	2b0f      	cmp	r3, #15
 800b29e:	d904      	bls.n	800b2aa <HAL_TIMEx_ConfigBreakDeadTime+0x13a>
 800b2a0:	f240 61c5 	movw	r1, #1733	; 0x6c5
 800b2a4:	480c      	ldr	r0, [pc, #48]	; (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800b2a6:	f7f6 fc44 	bl	8001b32 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b2ac:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800b2b0:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2b4:	69f3      	ldr	r3, [r6, #28]
 800b2b6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800b2ba:	431c      	orrs	r4, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2bc:	6a33      	ldr	r3, [r6, #32]
 800b2be:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800b2c2:	431c      	orrs	r4, r3
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2c4:	682b      	ldr	r3, [r5, #0]

  __HAL_UNLOCK(htim);
 800b2c6:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 800b2c8:	645c      	str	r4, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800b2ca:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

  return HAL_OK;
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800b2d0:	2002      	movs	r0, #2
}
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	0802b00d 	.word	0x0802b00d

0800b2dc <HAL_TIMEx_CommutCallback>:
 800b2dc:	4770      	bx	lr

0800b2de <HAL_TIMEx_BreakCallback>:
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2e0:	4770      	bx	lr
	...

0800b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e4:	b538      	push	{r3, r4, r5, lr}
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b2e6:	6842      	ldr	r2, [r0, #4]
{
 800b2e8:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b2ea:	4baf      	ldr	r3, [pc, #700]	; (800b5a8 <UART_SetConfig+0x2c4>)
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d904      	bls.n	800b2fa <UART_SetConfig+0x16>
 800b2f0:	f640 2151 	movw	r1, #2641	; 0xa51
 800b2f4:	48ad      	ldr	r0, [pc, #692]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b2f6:	f7f6 fc1c 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b2fa:	68a3      	ldr	r3, [r4, #8]
 800b2fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b300:	d007      	beq.n	800b312 <UART_SetConfig+0x2e>
 800b302:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b306:	d004      	beq.n	800b312 <UART_SetConfig+0x2e>
 800b308:	f640 2152 	movw	r1, #2642	; 0xa52
 800b30c:	48a7      	ldr	r0, [pc, #668]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b30e:	f7f6 fc10 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b318:	d004      	beq.n	800b324 <UART_SetConfig+0x40>
 800b31a:	f640 2153 	movw	r1, #2643	; 0xa53
 800b31e:	48a3      	ldr	r0, [pc, #652]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b320:	f7f6 fc07 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800b324:	6a23      	ldr	r3, [r4, #32]
 800b326:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800b32a:	d004      	beq.n	800b336 <UART_SetConfig+0x52>
 800b32c:	f640 2154 	movw	r1, #2644	; 0xa54
 800b330:	489e      	ldr	r0, [pc, #632]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b332:	f7f6 fbfe 	bl	8001b32 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b336:	6923      	ldr	r3, [r4, #16]
 800b338:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800b33c:	d007      	beq.n	800b34e <UART_SetConfig+0x6a>
 800b33e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b342:	d004      	beq.n	800b34e <UART_SetConfig+0x6a>
 800b344:	f640 2156 	movw	r1, #2646	; 0xa56
 800b348:	4898      	ldr	r0, [pc, #608]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b34a:	f7f6 fbf2 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b34e:	6963      	ldr	r3, [r4, #20]
 800b350:	f033 020c 	bics.w	r2, r3, #12
 800b354:	d100      	bne.n	800b358 <UART_SetConfig+0x74>
 800b356:	b923      	cbnz	r3, 800b362 <UART_SetConfig+0x7e>
 800b358:	f640 2157 	movw	r1, #2647	; 0xa57
 800b35c:	4893      	ldr	r0, [pc, #588]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b35e:	f7f6 fbe8 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b362:	69a3      	ldr	r3, [r4, #24]
 800b364:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800b368:	d004      	beq.n	800b374 <UART_SetConfig+0x90>
 800b36a:	f640 2158 	movw	r1, #2648	; 0xa58
 800b36e:	488f      	ldr	r0, [pc, #572]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b370:	f7f6 fbdf 	bl	8001b32 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b374:	69e3      	ldr	r3, [r4, #28]
 800b376:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b37a:	d004      	beq.n	800b386 <UART_SetConfig+0xa2>
 800b37c:	f640 2159 	movw	r1, #2649	; 0xa59
 800b380:	488a      	ldr	r0, [pc, #552]	; (800b5ac <UART_SetConfig+0x2c8>)
 800b382:	f7f6 fbd6 	bl	8001b32 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b386:	6920      	ldr	r0, [r4, #16]
 800b388:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b38a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b38c:	4301      	orrs	r1, r0
 800b38e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b390:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b392:	69e2      	ldr	r2, [r4, #28]
 800b394:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b396:	4886      	ldr	r0, [pc, #536]	; (800b5b0 <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b398:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b39a:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800b39c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b39e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3a0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3a2:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3a4:	6859      	ldr	r1, [r3, #4]
 800b3a6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800b3aa:	4301      	orrs	r1, r0
 800b3ac:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ae:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3b0:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800b3b2:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3b4:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800b3b8:	4301      	orrs	r1, r0
 800b3ba:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3bc:	497d      	ldr	r1, [pc, #500]	; (800b5b4 <UART_SetConfig+0x2d0>)
 800b3be:	428b      	cmp	r3, r1
 800b3c0:	d117      	bne.n	800b3f2 <UART_SetConfig+0x10e>
 800b3c2:	4b7d      	ldr	r3, [pc, #500]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b3c4:	497d      	ldr	r1, [pc, #500]	; (800b5bc <UART_SetConfig+0x2d8>)
 800b3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ca:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b3d2:	5ccb      	ldrb	r3, [r1, r3]
 800b3d4:	d12b      	bne.n	800b42e <UART_SetConfig+0x14a>
  {
    switch (clocksource)
 800b3d6:	2b08      	cmp	r3, #8
 800b3d8:	f200 8114 	bhi.w	800b604 <UART_SetConfig+0x320>
 800b3dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b3e0:	00780103 	.word	0x00780103
 800b3e4:	01120117 	.word	0x01120117
 800b3e8:	011200e0 	.word	0x011200e0
 800b3ec:	01120112 	.word	0x01120112
 800b3f0:	003e      	.short	0x003e
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3f2:	4973      	ldr	r1, [pc, #460]	; (800b5c0 <UART_SetConfig+0x2dc>)
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	d106      	bne.n	800b406 <UART_SetConfig+0x122>
 800b3f8:	4b6f      	ldr	r3, [pc, #444]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b3fa:	4972      	ldr	r1, [pc, #456]	; (800b5c4 <UART_SetConfig+0x2e0>)
 800b3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b400:	f003 030c 	and.w	r3, r3, #12
 800b404:	e7e3      	b.n	800b3ce <UART_SetConfig+0xea>
 800b406:	4970      	ldr	r1, [pc, #448]	; (800b5c8 <UART_SetConfig+0x2e4>)
 800b408:	428b      	cmp	r3, r1
 800b40a:	d12c      	bne.n	800b466 <UART_SetConfig+0x182>
 800b40c:	4b6a      	ldr	r3, [pc, #424]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b416:	2b10      	cmp	r3, #16
 800b418:	f000 80bf 	beq.w	800b59a <UART_SetConfig+0x2b6>
 800b41c:	d815      	bhi.n	800b44a <UART_SetConfig+0x166>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 80de 	beq.w	800b5e0 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b424:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b428:	f000 80ec 	beq.w	800b604 <UART_SetConfig+0x320>
 800b42c:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800b42e:	2b08      	cmp	r3, #8
 800b430:	f200 80e8 	bhi.w	800b604 <UART_SetConfig+0x320>
 800b434:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b438:	0094008e 	.word	0x0094008e
 800b43c:	00e60097 	.word	0x00e60097
 800b440:	00e600a9 	.word	0x00e600a9
 800b444:	00e600e6 	.word	0x00e600e6
 800b448:	00ac      	.short	0x00ac
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b44a:	2b20      	cmp	r3, #32
 800b44c:	f000 80dc 	beq.w	800b608 <UART_SetConfig+0x324>
 800b450:	2b30      	cmp	r3, #48	; 0x30
 800b452:	d1e7      	bne.n	800b424 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b454:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b458:	f040 809a 	bne.w	800b590 <UART_SetConfig+0x2ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	0858      	lsrs	r0, r3, #1
 800b460:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800b464:	e0d9      	b.n	800b61a <UART_SetConfig+0x336>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b466:	4959      	ldr	r1, [pc, #356]	; (800b5cc <UART_SetConfig+0x2e8>)
 800b468:	428b      	cmp	r3, r1
 800b46a:	d10d      	bne.n	800b488 <UART_SetConfig+0x1a4>
 800b46c:	4b52      	ldr	r3, [pc, #328]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b476:	2b40      	cmp	r3, #64	; 0x40
 800b478:	f000 808f 	beq.w	800b59a <UART_SetConfig+0x2b6>
 800b47c:	d9cf      	bls.n	800b41e <UART_SetConfig+0x13a>
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	f000 80c2 	beq.w	800b608 <UART_SetConfig+0x324>
 800b484:	2bc0      	cmp	r3, #192	; 0xc0
 800b486:	e7e4      	b.n	800b452 <UART_SetConfig+0x16e>
 800b488:	4951      	ldr	r1, [pc, #324]	; (800b5d0 <UART_SetConfig+0x2ec>)
 800b48a:	428b      	cmp	r3, r1
 800b48c:	d10f      	bne.n	800b4ae <UART_SetConfig+0x1ca>
 800b48e:	4b4a      	ldr	r3, [pc, #296]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49c:	d07d      	beq.n	800b59a <UART_SetConfig+0x2b6>
 800b49e:	d9be      	bls.n	800b41e <UART_SetConfig+0x13a>
 800b4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a4:	f000 80b0 	beq.w	800b608 <UART_SetConfig+0x324>
 800b4a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4ac:	e7d1      	b.n	800b452 <UART_SetConfig+0x16e>
 800b4ae:	4949      	ldr	r1, [pc, #292]	; (800b5d4 <UART_SetConfig+0x2f0>)
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	d117      	bne.n	800b4e4 <UART_SetConfig+0x200>
 800b4b4:	4b40      	ldr	r3, [pc, #256]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c2:	d06a      	beq.n	800b59a <UART_SetConfig+0x2b6>
 800b4c4:	d807      	bhi.n	800b4d6 <UART_SetConfig+0x1f2>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1ac      	bne.n	800b424 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b4ce:	d147      	bne.n	800b560 <UART_SetConfig+0x27c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b4d0:	f7fc fae6 	bl	8007aa0 <HAL_RCC_GetPCLK2Freq>
 800b4d4:	e089      	b.n	800b5ea <UART_SetConfig+0x306>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4da:	f000 8095 	beq.w	800b608 <UART_SetConfig+0x324>
 800b4de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4e2:	e7b6      	b.n	800b452 <UART_SetConfig+0x16e>
 800b4e4:	493c      	ldr	r1, [pc, #240]	; (800b5d8 <UART_SetConfig+0x2f4>)
 800b4e6:	428b      	cmp	r3, r1
 800b4e8:	d116      	bne.n	800b518 <UART_SetConfig+0x234>
 800b4ea:	4b33      	ldr	r3, [pc, #204]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4f8:	d04f      	beq.n	800b59a <UART_SetConfig+0x2b6>
 800b4fa:	d806      	bhi.n	800b50a <UART_SetConfig+0x226>
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d06f      	beq.n	800b5e0 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b500:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b504:	d17e      	bne.n	800b604 <UART_SetConfig+0x320>
 800b506:	2310      	movs	r3, #16
 800b508:	e765      	b.n	800b3d6 <UART_SetConfig+0xf2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b50a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50e:	d07b      	beq.n	800b608 <UART_SetConfig+0x324>
 800b510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b514:	d09e      	beq.n	800b454 <UART_SetConfig+0x170>
 800b516:	e7f3      	b.n	800b500 <UART_SetConfig+0x21c>
 800b518:	4930      	ldr	r1, [pc, #192]	; (800b5dc <UART_SetConfig+0x2f8>)
 800b51a:	428b      	cmp	r3, r1
 800b51c:	d172      	bne.n	800b604 <UART_SetConfig+0x320>
 800b51e:	4b26      	ldr	r3, [pc, #152]	; (800b5b8 <UART_SetConfig+0x2d4>)
 800b520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b52c:	d035      	beq.n	800b59a <UART_SetConfig+0x2b6>
 800b52e:	d9e5      	bls.n	800b4fc <UART_SetConfig+0x218>
 800b530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b534:	d068      	beq.n	800b608 <UART_SetConfig+0x324>
 800b536:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b53a:	e7eb      	b.n	800b514 <UART_SetConfig+0x230>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b53c:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b540:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	4318      	orrs	r0, r3
 800b548:	60d0      	str	r0, [r2, #12]
 800b54a:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b54c:	2300      	movs	r3, #0
 800b54e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800b550:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800b552:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b554:	f7fc fa94 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b55e:	e008      	b.n	800b572 <UART_SetConfig+0x28e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b560:	f7fc fa9e 	bl	8007aa0 <HAL_RCC_GetPCLK2Freq>
 800b564:	e7f8      	b.n	800b558 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b566:	6863      	ldr	r3, [r4, #4]
 800b568:	0858      	lsrs	r0, r3, #1
 800b56a:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800b56e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b572:	fbb0 f0f3 	udiv	r0, r0, r3
 800b576:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b578:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b57c:	f1a0 0210 	sub.w	r2, r0, #16
 800b580:	429a      	cmp	r2, r3
 800b582:	d83f      	bhi.n	800b604 <UART_SetConfig+0x320>
      huart->Instance->BRR = usartdiv;
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	60d8      	str	r0, [r3, #12]
 800b588:	e7df      	b.n	800b54a <UART_SetConfig+0x266>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b58a:	f7fc f953 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800b58e:	e7e3      	b.n	800b558 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b590:	6863      	ldr	r3, [r4, #4]
 800b592:	0858      	lsrs	r0, r3, #1
 800b594:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800b598:	e7eb      	b.n	800b572 <UART_SetConfig+0x28e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b59a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b59e:	d1f4      	bne.n	800b58a <UART_SetConfig+0x2a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b5a0:	f7fc f948 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800b5a4:	e021      	b.n	800b5ea <UART_SetConfig+0x306>
 800b5a6:	bf00      	nop
 800b5a8:	019bfcc0 	.word	0x019bfcc0
 800b5ac:	0802b05f 	.word	0x0802b05f
 800b5b0:	efff69f3 	.word	0xefff69f3
 800b5b4:	40011000 	.word	0x40011000
 800b5b8:	40023800 	.word	0x40023800
 800b5bc:	0802b04e 	.word	0x0802b04e
 800b5c0:	40004400 	.word	0x40004400
 800b5c4:	0802b052 	.word	0x0802b052
 800b5c8:	40004800 	.word	0x40004800
 800b5cc:	40004c00 	.word	0x40004c00
 800b5d0:	40005000 	.word	0x40005000
 800b5d4:	40011400 	.word	0x40011400
 800b5d8:	40007800 	.word	0x40007800
 800b5dc:	40007c00 	.word	0x40007c00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5e0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b5e4:	d1b6      	bne.n	800b554 <UART_SetConfig+0x270>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b5e6:	f7fc fa4b 	bl	8007a80 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	0853      	lsrs	r3, r2, #1
 800b5ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b5f2:	fbb0 f0f2 	udiv	r0, r0, r2
 800b5f6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5f8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b5fc:	f1a0 0210 	sub.w	r2, r0, #16
 800b600:	429a      	cmp	r2, r3
 800b602:	d99b      	bls.n	800b53c <UART_SetConfig+0x258>
      ret = HAL_ERROR;
 800b604:	2001      	movs	r0, #1
 800b606:	e7a1      	b.n	800b54c <UART_SetConfig+0x268>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b608:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b60c:	d1ab      	bne.n	800b566 <UART_SetConfig+0x282>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b60e:	6863      	ldr	r3, [r4, #4]
 800b610:	0858      	lsrs	r0, r3, #1
 800b612:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800b616:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b61a:	fbb0 f0f3 	udiv	r0, r0, r3
 800b61e:	e7ea      	b.n	800b5f6 <UART_SetConfig+0x312>

0800b620 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b622:	2bff      	cmp	r3, #255	; 0xff
{
 800b624:	b510      	push	{r4, lr}
 800b626:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800b628:	d904      	bls.n	800b634 <UART_AdvFeatureConfig+0x14>
 800b62a:	f640 21d2 	movw	r1, #2770	; 0xad2
 800b62e:	4862      	ldr	r0, [pc, #392]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b630:	f7f6 fa7f 	bl	8001b32 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b636:	07d8      	lsls	r0, r3, #31
 800b638:	d50f      	bpl.n	800b65a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800b63a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b63c:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800b640:	d004      	beq.n	800b64c <UART_AdvFeatureConfig+0x2c>
 800b642:	f640 21d7 	movw	r1, #2775	; 0xad7
 800b646:	485c      	ldr	r0, [pc, #368]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b648:	f7f6 fa73 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b650:	6853      	ldr	r3, [r2, #4]
 800b652:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b656:	430b      	orrs	r3, r1
 800b658:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b65c:	0799      	lsls	r1, r3, #30
 800b65e:	d50f      	bpl.n	800b680 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800b660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b662:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800b666:	d004      	beq.n	800b672 <UART_AdvFeatureConfig+0x52>
 800b668:	f640 21de 	movw	r1, #2782	; 0xade
 800b66c:	4852      	ldr	r0, [pc, #328]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b66e:	f7f6 fa60 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b672:	6822      	ldr	r2, [r4, #0]
 800b674:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b676:	6853      	ldr	r3, [r2, #4]
 800b678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b67c:	430b      	orrs	r3, r1
 800b67e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b682:	075a      	lsls	r2, r3, #29
 800b684:	d50f      	bpl.n	800b6a6 <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800b686:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b688:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800b68c:	d004      	beq.n	800b698 <UART_AdvFeatureConfig+0x78>
 800b68e:	f640 21e5 	movw	r1, #2789	; 0xae5
 800b692:	4849      	ldr	r0, [pc, #292]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b694:	f7f6 fa4d 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b698:	6822      	ldr	r2, [r4, #0]
 800b69a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b69c:	6853      	ldr	r3, [r2, #4]
 800b69e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a8:	071b      	lsls	r3, r3, #28
 800b6aa:	d50f      	bpl.n	800b6cc <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800b6ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ae:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800b6b2:	d004      	beq.n	800b6be <UART_AdvFeatureConfig+0x9e>
 800b6b4:	f640 21ec 	movw	r1, #2796	; 0xaec
 800b6b8:	483f      	ldr	r0, [pc, #252]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b6ba:	f7f6 fa3a 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6be:	6822      	ldr	r2, [r4, #0]
 800b6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c2:	6853      	ldr	r3, [r2, #4]
 800b6c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6ce:	06d8      	lsls	r0, r3, #27
 800b6d0:	d50f      	bpl.n	800b6f2 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800b6d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6d4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800b6d8:	d004      	beq.n	800b6e4 <UART_AdvFeatureConfig+0xc4>
 800b6da:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800b6de:	4836      	ldr	r0, [pc, #216]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b6e0:	f7f6 fa27 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6e4:	6822      	ldr	r2, [r4, #0]
 800b6e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6e8:	6893      	ldr	r3, [r2, #8]
 800b6ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f4:	0699      	lsls	r1, r3, #26
 800b6f6:	d50f      	bpl.n	800b718 <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800b6f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6fa:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800b6fe:	d004      	beq.n	800b70a <UART_AdvFeatureConfig+0xea>
 800b700:	f640 21fa 	movw	r1, #2810	; 0xafa
 800b704:	482c      	ldr	r0, [pc, #176]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b706:	f7f6 fa14 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b70a:	6822      	ldr	r2, [r4, #0]
 800b70c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b70e:	6893      	ldr	r3, [r2, #8]
 800b710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b714:	430b      	orrs	r3, r1
 800b716:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71a:	065a      	lsls	r2, r3, #25
 800b71c:	d538      	bpl.n	800b790 <UART_AdvFeatureConfig+0x170>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	4a26      	ldr	r2, [pc, #152]	; (800b7bc <UART_AdvFeatureConfig+0x19c>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d010      	beq.n	800b748 <UART_AdvFeatureConfig+0x128>
 800b726:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d00c      	beq.n	800b748 <UART_AdvFeatureConfig+0x128>
 800b72e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b732:	4293      	cmp	r3, r2
 800b734:	d008      	beq.n	800b748 <UART_AdvFeatureConfig+0x128>
 800b736:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d004      	beq.n	800b748 <UART_AdvFeatureConfig+0x128>
 800b73e:	f640 3101 	movw	r1, #2817	; 0xb01
 800b742:	481d      	ldr	r0, [pc, #116]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b744:	f7f6 f9f5 	bl	8001b32 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800b748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b74a:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800b74e:	d004      	beq.n	800b75a <UART_AdvFeatureConfig+0x13a>
 800b750:	f640 3102 	movw	r1, #2818	; 0xb02
 800b754:	4818      	ldr	r0, [pc, #96]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b756:	f7f6 f9ec 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b75a:	6821      	ldr	r1, [r4, #0]
 800b75c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b75e:	684b      	ldr	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b760:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b764:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b768:	ea43 0302 	orr.w	r3, r3, r2
 800b76c:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b76e:	d10f      	bne.n	800b790 <UART_AdvFeatureConfig+0x170>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800b770:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b772:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800b776:	d004      	beq.n	800b782 <UART_AdvFeatureConfig+0x162>
 800b778:	f640 3107 	movw	r1, #2823	; 0xb07
 800b77c:	480e      	ldr	r0, [pc, #56]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b77e:	f7f6 f9d8 	bl	8001b32 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b782:	6822      	ldr	r2, [r4, #0]
 800b784:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b786:	6853      	ldr	r3, [r2, #4]
 800b788:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b78c:	430b      	orrs	r3, r1
 800b78e:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b792:	061b      	lsls	r3, r3, #24
 800b794:	d50f      	bpl.n	800b7b6 <UART_AdvFeatureConfig+0x196>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800b796:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b798:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800b79c:	d004      	beq.n	800b7a8 <UART_AdvFeatureConfig+0x188>
 800b79e:	f640 310f 	movw	r1, #2831	; 0xb0f
 800b7a2:	4805      	ldr	r0, [pc, #20]	; (800b7b8 <UART_AdvFeatureConfig+0x198>)
 800b7a4:	f7f6 f9c5 	bl	8001b32 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7a8:	6822      	ldr	r2, [r4, #0]
 800b7aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7ac:	6853      	ldr	r3, [r2, #4]
 800b7ae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	6053      	str	r3, [r2, #4]
 800b7b6:	bd10      	pop	{r4, pc}
 800b7b8:	0802b05f 	.word	0x0802b05f
 800b7bc:	40011000 	.word	0x40011000

0800b7c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c4:	9d06      	ldr	r5, [sp, #24]
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	4616      	mov	r6, r2
 800b7cc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ce:	6821      	ldr	r1, [r4, #0]
 800b7d0:	69ca      	ldr	r2, [r1, #28]
 800b7d2:	ea37 0302 	bics.w	r3, r7, r2
 800b7d6:	bf0c      	ite	eq
 800b7d8:	2201      	moveq	r2, #1
 800b7da:	2200      	movne	r2, #0
 800b7dc:	42b2      	cmp	r2, r6
 800b7de:	d002      	beq.n	800b7e6 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800b7e0:	2000      	movs	r0, #0
}
 800b7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800b7e6:	1c6b      	adds	r3, r5, #1
 800b7e8:	d0f2      	beq.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7ea:	f7f9 f86d 	bl	80048c8 <HAL_GetTick>
 800b7ee:	eba0 0008 	sub.w	r0, r0, r8
 800b7f2:	4285      	cmp	r5, r0
 800b7f4:	d301      	bcc.n	800b7fa <UART_WaitOnFlagUntilTimeout+0x3a>
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	d1e9      	bne.n	800b7ce <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7fa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800b7fc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b804:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	f022 0201 	bic.w	r2, r2, #1
 800b80c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800b80e:	2320      	movs	r3, #32
 800b810:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b812:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800b814:	2300      	movs	r3, #0
 800b816:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b81e <HAL_UART_Transmit>:
{
 800b81e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b822:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800b824:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800b826:	4604      	mov	r4, r0
 800b828:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800b82a:	2b20      	cmp	r3, #32
{
 800b82c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b82e:	d14b      	bne.n	800b8c8 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800b830:	2900      	cmp	r1, #0
 800b832:	d047      	beq.n	800b8c4 <HAL_UART_Transmit+0xa6>
 800b834:	2a00      	cmp	r2, #0
 800b836:	d045      	beq.n	800b8c4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800b838:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d043      	beq.n	800b8c8 <HAL_UART_Transmit+0xaa>
 800b840:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b842:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b844:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b848:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b84a:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b84c:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800b84e:	f7f9 f83b 	bl	80048c8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b852:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800b854:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800b856:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800b85e:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b862:	d103      	bne.n	800b86c <HAL_UART_Transmit+0x4e>
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	b90b      	cbnz	r3, 800b86c <HAL_UART_Transmit+0x4e>
 800b868:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800b86a:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800b86c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b870:	463b      	mov	r3, r7
 800b872:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800b876:	b292      	uxth	r2, r2
 800b878:	b94a      	cbnz	r2, 800b88e <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b87a:	2140      	movs	r1, #64	; 0x40
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff ff9f 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b882:	b950      	cbnz	r0, 800b89a <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800b884:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800b886:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800b88a:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800b88c:	e006      	b.n	800b89c <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b88e:	2200      	movs	r2, #0
 800b890:	2180      	movs	r1, #128	; 0x80
 800b892:	4620      	mov	r0, r4
 800b894:	f7ff ff94 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b898:	b118      	cbz	r0, 800b8a2 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800b89a:	2003      	movs	r0, #3
}
 800b89c:	b003      	add	sp, #12
 800b89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800b8a4:	b95e      	cbnz	r6, 800b8be <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8a6:	f835 3b02 	ldrh.w	r3, [r5], #2
 800b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8ae:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800b8b0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800b8bc:	e7d6      	b.n	800b86c <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8be:	f816 3b01 	ldrb.w	r3, [r6], #1
 800b8c2:	e7f4      	b.n	800b8ae <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	e7e9      	b.n	800b89c <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 800b8c8:	2002      	movs	r0, #2
 800b8ca:	e7e7      	b.n	800b89c <HAL_UART_Transmit+0x7e>

0800b8cc <HAL_UART_Receive>:
{
 800b8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8d2:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8d8:	2b20      	cmp	r3, #32
{
 800b8da:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8dc:	d163      	bne.n	800b9a6 <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 800b8de:	2900      	cmp	r1, #0
 800b8e0:	d05f      	beq.n	800b9a2 <HAL_UART_Receive+0xd6>
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	d05d      	beq.n	800b9a2 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 800b8e6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d05b      	beq.n	800b9a6 <HAL_UART_Receive+0xda>
 800b8ee:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f0:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800b8f2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8f6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f8:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8fa:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800b8fc:	f7f8 ffe4 	bl	80048c8 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800b900:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800b902:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 800b904:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800b908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800b90c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800b910:	d11b      	bne.n	800b94a <HAL_UART_Receive+0x7e>
 800b912:	6922      	ldr	r2, [r4, #16]
 800b914:	b9ba      	cbnz	r2, 800b946 <HAL_UART_Receive+0x7a>
 800b916:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b91a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b91e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800b922:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b926:	d121      	bne.n	800b96c <HAL_UART_Receive+0xa0>
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	b9fb      	cbnz	r3, 800b96c <HAL_UART_Receive+0xa0>
 800b92c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800b92e:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 800b930:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800b934:	b280      	uxth	r0, r0
 800b936:	b9d8      	cbnz	r0, 800b970 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 800b938:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800b93a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 800b93e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800b940:	b003      	add	sp, #12
 800b942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800b946:	22ff      	movs	r2, #255	; 0xff
 800b948:	e7e7      	b.n	800b91a <HAL_UART_Receive+0x4e>
 800b94a:	b923      	cbnz	r3, 800b956 <HAL_UART_Receive+0x8a>
 800b94c:	6922      	ldr	r2, [r4, #16]
 800b94e:	2a00      	cmp	r2, #0
 800b950:	d0f9      	beq.n	800b946 <HAL_UART_Receive+0x7a>
 800b952:	227f      	movs	r2, #127	; 0x7f
 800b954:	e7e1      	b.n	800b91a <HAL_UART_Receive+0x4e>
 800b956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b95a:	d104      	bne.n	800b966 <HAL_UART_Receive+0x9a>
 800b95c:	6922      	ldr	r2, [r4, #16]
 800b95e:	2a00      	cmp	r2, #0
 800b960:	d0f7      	beq.n	800b952 <HAL_UART_Receive+0x86>
 800b962:	223f      	movs	r2, #63	; 0x3f
 800b964:	e7d9      	b.n	800b91a <HAL_UART_Receive+0x4e>
 800b966:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 800b96a:	e7d8      	b.n	800b91e <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 800b96c:	2600      	movs	r6, #0
 800b96e:	e7df      	b.n	800b930 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b970:	f8cd 9000 	str.w	r9, [sp]
 800b974:	4643      	mov	r3, r8
 800b976:	2200      	movs	r2, #0
 800b978:	2120      	movs	r1, #32
 800b97a:	4620      	mov	r0, r4
 800b97c:	f7ff ff20 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b980:	b998      	cbnz	r0, 800b9aa <HAL_UART_Receive+0xde>
 800b982:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b986:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800b988:	b945      	cbnz	r5, 800b99c <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b98a:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800b98e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800b992:	3b01      	subs	r3, #1
 800b994:	b29b      	uxth	r3, r3
 800b996:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800b99a:	e7c9      	b.n	800b930 <HAL_UART_Receive+0x64>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b99c:	f805 3b01 	strb.w	r3, [r5], #1
 800b9a0:	e7f5      	b.n	800b98e <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	e7cc      	b.n	800b940 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800b9a6:	2002      	movs	r0, #2
 800b9a8:	e7ca      	b.n	800b940 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800b9aa:	2003      	movs	r0, #3
 800b9ac:	e7c8      	b.n	800b940 <HAL_UART_Receive+0x74>

0800b9ae <UART_CheckIdleState>:
{
 800b9ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9b0:	2500      	movs	r5, #0
{
 800b9b2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9b4:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800b9b6:	f7f8 ff87 	bl	80048c8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9ba:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800b9bc:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	0712      	lsls	r2, r2, #28
 800b9c2:	d407      	bmi.n	800b9d4 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800b9c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800b9c6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b9c8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800b9ca:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800b9ce:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800b9d0:	b003      	add	sp, #12
 800b9d2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9d4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800b9d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9dc:	4620      	mov	r0, r4
 800b9de:	9200      	str	r2, [sp, #0]
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	f7ff feed 	bl	800b7c0 <UART_WaitOnFlagUntilTimeout>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0ec      	beq.n	800b9c4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800b9ea:	2003      	movs	r0, #3
 800b9ec:	e7f0      	b.n	800b9d0 <UART_CheckIdleState+0x22>
	...

0800b9f0 <HAL_UART_Init>:
{
 800b9f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d071      	beq.n	800badc <HAL_UART_Init+0xec>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b9f8:	6981      	ldr	r1, [r0, #24]
 800b9fa:	6803      	ldr	r3, [r0, #0]
 800b9fc:	4a38      	ldr	r2, [pc, #224]	; (800bae0 <HAL_UART_Init+0xf0>)
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	d04c      	beq.n	800ba9c <HAL_UART_Init+0xac>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d020      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba06:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d01c      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d018      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d014      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d010      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba26:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d00c      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba2e:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d008      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d004      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800ba3e:	f44f 7195 	mov.w	r1, #298	; 0x12a
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ba42:	4828      	ldr	r0, [pc, #160]	; (800bae4 <HAL_UART_Init+0xf4>)
 800ba44:	f7f6 f875 	bl	8001b32 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ba48:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ba4a:	b923      	cbnz	r3, 800ba56 <HAL_UART_Init+0x66>
    huart->Lock = HAL_UNLOCKED;
 800ba4c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7f6 fe63 	bl	800271c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800ba56:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ba58:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba5a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800ba5c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800ba5e:	6813      	ldr	r3, [r2, #0]
 800ba60:	f023 0301 	bic.w	r3, r3, #1
 800ba64:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba66:	f7ff fc3d 	bl	800b2e4 <UART_SetConfig>
 800ba6a:	2801      	cmp	r0, #1
 800ba6c:	d036      	beq.n	800badc <HAL_UART_Init+0xec>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba70:	b113      	cbz	r3, 800ba78 <HAL_UART_Init+0x88>
    UART_AdvFeatureConfig(huart);
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7ff fdd4 	bl	800b620 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba78:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800ba7a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba84:	689a      	ldr	r2, [r3, #8]
 800ba86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba8a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	f042 0201 	orr.w	r2, r2, #1
}
 800ba92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800ba96:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ba98:	f7ff bf89 	b.w	800b9ae <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d0d3      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800baa0:	4a11      	ldr	r2, [pc, #68]	; (800bae8 <HAL_UART_Init+0xf8>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d0d0      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800baa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baaa:	4293      	cmp	r3, r2
 800baac:	d0cc      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800baae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d0c8      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800bab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baba:	4293      	cmp	r3, r2
 800babc:	d0c4      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800babe:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d0c0      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800bac6:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800baca:	4293      	cmp	r3, r2
 800bacc:	d0bc      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800bace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d0b8      	beq.n	800ba48 <HAL_UART_Init+0x58>
 800bad6:	f240 112f 	movw	r1, #303	; 0x12f
 800bada:	e7b2      	b.n	800ba42 <HAL_UART_Init+0x52>
}
 800badc:	2001      	movs	r0, #1
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	40011000 	.word	0x40011000
 800bae4:	0802b05f 	.word	0x0802b05f
 800bae8:	40004400 	.word	0x40004400

0800baec <FMC_SDRAM_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800baec:	4b54      	ldr	r3, [pc, #336]	; (800bc40 <FMC_SDRAM_Init+0x154>)
 800baee:	4298      	cmp	r0, r3
{
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	4605      	mov	r5, r0
 800baf6:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800baf8:	d004      	beq.n	800bb04 <FMC_SDRAM_Init+0x18>
 800bafa:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800bafe:	4851      	ldr	r0, [pc, #324]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb00:	f7f6 f817 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d904      	bls.n	800bb14 <FMC_SDRAM_Init+0x28>
 800bb0a:	f240 21ed 	movw	r1, #749	; 0x2ed
 800bb0e:	484d      	ldr	r0, [pc, #308]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb10:	f7f6 f80f 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800bb14:	6863      	ldr	r3, [r4, #4]
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d904      	bls.n	800bb24 <FMC_SDRAM_Init+0x38>
 800bb1a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bb1e:	4849      	ldr	r0, [pc, #292]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb20:	f7f6 f807 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800bb24:	68a3      	ldr	r3, [r4, #8]
 800bb26:	f033 0204 	bics.w	r2, r3, #4
 800bb2a:	d006      	beq.n	800bb3a <FMC_SDRAM_Init+0x4e>
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d004      	beq.n	800bb3a <FMC_SDRAM_Init+0x4e>
 800bb30:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bb34:	4843      	ldr	r0, [pc, #268]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb36:	f7f5 fffc 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800bb3a:	68e3      	ldr	r3, [r4, #12]
 800bb3c:	f033 0210 	bics.w	r2, r3, #16
 800bb40:	d006      	beq.n	800bb50 <FMC_SDRAM_Init+0x64>
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d004      	beq.n	800bb50 <FMC_SDRAM_Init+0x64>
 800bb46:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800bb4a:	483e      	ldr	r0, [pc, #248]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb4c:	f7f5 fff1 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800bb56:	d004      	beq.n	800bb62 <FMC_SDRAM_Init+0x76>
 800bb58:	f240 21f1 	movw	r1, #753	; 0x2f1
 800bb5c:	4839      	ldr	r0, [pc, #228]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb5e:	f7f5 ffe8 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb68:	2a80      	cmp	r2, #128	; 0x80
 800bb6a:	d007      	beq.n	800bb7c <FMC_SDRAM_Init+0x90>
 800bb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb70:	d004      	beq.n	800bb7c <FMC_SDRAM_Init+0x90>
 800bb72:	f240 21f2 	movw	r1, #754	; 0x2f2
 800bb76:	4833      	ldr	r0, [pc, #204]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb78:	f7f5 ffdb 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800bb7c:	69a3      	ldr	r3, [r4, #24]
 800bb7e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800bb82:	d004      	beq.n	800bb8e <FMC_SDRAM_Init+0xa2>
 800bb84:	f240 21f3 	movw	r1, #755	; 0x2f3
 800bb88:	482e      	ldr	r0, [pc, #184]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bb8a:	f7f5 ffd2 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800bb8e:	69e3      	ldr	r3, [r4, #28]
 800bb90:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800bb94:	d007      	beq.n	800bba6 <FMC_SDRAM_Init+0xba>
 800bb96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb9a:	d004      	beq.n	800bba6 <FMC_SDRAM_Init+0xba>
 800bb9c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800bba0:	4828      	ldr	r0, [pc, #160]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bba2:	f7f5 ffc6 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800bba6:	6a23      	ldr	r3, [r4, #32]
 800bba8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bbac:	d004      	beq.n	800bbb8 <FMC_SDRAM_Init+0xcc>
 800bbae:	f240 21f5 	movw	r1, #757	; 0x2f5
 800bbb2:	4824      	ldr	r0, [pc, #144]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bbb4:	f7f5 ffbd 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 800bbb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbba:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800bbbe:	d007      	beq.n	800bbd0 <FMC_SDRAM_Init+0xe4>
 800bbc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbc4:	d004      	beq.n	800bbd0 <FMC_SDRAM_Init+0xe4>
 800bbc6:	f240 21f6 	movw	r1, #758	; 0x2f6
 800bbca:	481e      	ldr	r0, [pc, #120]	; (800bc44 <FMC_SDRAM_Init+0x158>)
 800bbcc:	f7f5 ffb1 	bl	8001b32 <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	1d22      	adds	r2, r4, #4
 800bbd4:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	69a0      	ldr	r0, [r4, #24]
 800bbdc:	69e7      	ldr	r7, [r4, #28]
 800bbde:	6a26      	ldr	r6, [r4, #32]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bbe0:	6829      	ldr	r1, [r5, #0]
 800bbe2:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800bbe4:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bbe8:	d014      	beq.n	800bc14 <FMC_SDRAM_Init+0x128>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbea:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bbec:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                        Init->RowBitsNumber      |\
 800bbf0:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bbf4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
                        Init->MemoryDataWidth    |\
 800bbf8:	ea42 020c 	orr.w	r2, r2, ip
                        Init->InternalBankNumber |\
 800bbfc:	ea42 020e 	orr.w	r2, r2, lr
                        Init->CASLatency         |\
 800bc00:	ea42 0300 	orr.w	r3, r2, r0
                        Init->WriteProtection    |\
 800bc04:	433b      	orrs	r3, r7
                        Init->SDClockPeriod      |\
 800bc06:	4333      	orrs	r3, r6
                        Init->ReadBurst          |\
 800bc08:	4323      	orrs	r3, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc0a:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bc0c:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bc14:	433e      	orrs	r6, r7
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc16:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bc18:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                        Init->ReadBurst          |\
 800bc1c:	4334      	orrs	r4, r6
                       Init->RowBitsNumber       |\
 800bc1e:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bc22:	430c      	orrs	r4, r1
                       Init->MemoryDataWidth     |\
 800bc24:	ea42 020c 	orr.w	r2, r2, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bc28:	6869      	ldr	r1, [r5, #4]
                       Init->InternalBankNumber  |\
 800bc2a:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bc2e:	602c      	str	r4, [r5, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bc30:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                       Init->CASLatency          |\
 800bc34:	4302      	orrs	r2, r0
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bc36:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc3a:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bc3c:	606a      	str	r2, [r5, #4]
 800bc3e:	e7e6      	b.n	800bc0e <FMC_SDRAM_Init+0x122>
 800bc40:	a0000140 	.word	0xa0000140
 800bc44:	0802b09e 	.word	0x0802b09e

0800bc48 <FMC_SDRAM_Timing_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800bc48:	4b4c      	ldr	r3, [pc, #304]	; (800bd7c <FMC_SDRAM_Timing_Init+0x134>)
 800bc4a:	4298      	cmp	r0, r3
{
 800bc4c:	b570      	push	{r4, r5, r6, lr}
 800bc4e:	4605      	mov	r5, r0
 800bc50:	460c      	mov	r4, r1
 800bc52:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800bc54:	d004      	beq.n	800bc60 <FMC_SDRAM_Timing_Init+0x18>
 800bc56:	f240 313d 	movw	r1, #829	; 0x33d
 800bc5a:	4849      	ldr	r0, [pc, #292]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bc5c:	f7f5 ff69 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	2b0f      	cmp	r3, #15
 800bc66:	d904      	bls.n	800bc72 <FMC_SDRAM_Timing_Init+0x2a>
 800bc68:	f240 313e 	movw	r1, #830	; 0x33e
 800bc6c:	4844      	ldr	r0, [pc, #272]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bc6e:	f7f5 ff60 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800bc72:	6863      	ldr	r3, [r4, #4]
 800bc74:	3b01      	subs	r3, #1
 800bc76:	2b0f      	cmp	r3, #15
 800bc78:	d904      	bls.n	800bc84 <FMC_SDRAM_Timing_Init+0x3c>
 800bc7a:	f240 313f 	movw	r1, #831	; 0x33f
 800bc7e:	4840      	ldr	r0, [pc, #256]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bc80:	f7f5 ff57 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800bc84:	68a3      	ldr	r3, [r4, #8]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	2b0f      	cmp	r3, #15
 800bc8a:	d904      	bls.n	800bc96 <FMC_SDRAM_Timing_Init+0x4e>
 800bc8c:	f44f 7150 	mov.w	r1, #832	; 0x340
 800bc90:	483b      	ldr	r0, [pc, #236]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bc92:	f7f5 ff4e 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800bc96:	68e3      	ldr	r3, [r4, #12]
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	2b0f      	cmp	r3, #15
 800bc9c:	d904      	bls.n	800bca8 <FMC_SDRAM_Timing_Init+0x60>
 800bc9e:	f240 3141 	movw	r1, #833	; 0x341
 800bca2:	4837      	ldr	r0, [pc, #220]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bca4:	f7f5 ff45 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	2b0f      	cmp	r3, #15
 800bcae:	d904      	bls.n	800bcba <FMC_SDRAM_Timing_Init+0x72>
 800bcb0:	f240 3142 	movw	r1, #834	; 0x342
 800bcb4:	4832      	ldr	r0, [pc, #200]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bcb6:	f7f5 ff3c 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800bcba:	6963      	ldr	r3, [r4, #20]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	2b0f      	cmp	r3, #15
 800bcc0:	d904      	bls.n	800bccc <FMC_SDRAM_Timing_Init+0x84>
 800bcc2:	f240 3143 	movw	r1, #835	; 0x343
 800bcc6:	482e      	ldr	r0, [pc, #184]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bcc8:	f7f5 ff33 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800bccc:	69a3      	ldr	r3, [r4, #24]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	2b0f      	cmp	r3, #15
 800bcd2:	d904      	bls.n	800bcde <FMC_SDRAM_Timing_Init+0x96>
 800bcd4:	f44f 7151 	mov.w	r1, #836	; 0x344
 800bcd8:	4829      	ldr	r0, [pc, #164]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bcda:	f7f5 ff2a 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800bcde:	2e01      	cmp	r6, #1
 800bce0:	d925      	bls.n	800bd2e <FMC_SDRAM_Timing_Init+0xe6>
 800bce2:	f240 3145 	movw	r1, #837	; 0x345
 800bce6:	4826      	ldr	r0, [pc, #152]	; (800bd80 <FMC_SDRAM_Timing_Init+0x138>)
 800bce8:	f7f5 ff23 	bl	8001b32 <assert_failed>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bcec:	6863      	ldr	r3, [r4, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bcee:	68aa      	ldr	r2, [r5, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bcf0:	1e59      	subs	r1, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bcf2:	68a3      	ldr	r3, [r4, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bcf4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bcfc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd00:	6821      	ldr	r1, [r4, #0]
 800bd02:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bd04:	430b      	orrs	r3, r1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bd06:	68e1      	ldr	r1, [r4, #12]
 800bd08:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bd0a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bd0e:	6921      	ldr	r1, [r4, #16]
 800bd10:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bd12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800bd16:	6961      	ldr	r1, [r4, #20]
 800bd18:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bd1a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800bd1e:	69a1      	ldr	r1, [r4, #24]
 800bd20:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bd26:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bd28:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
  if (Bank != FMC_SDRAM_BANK2) 
 800bd2e:	d1dd      	bne.n	800bcec <FMC_SDRAM_Timing_Init+0xa4>
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bd30:	68e2      	ldr	r2, [r4, #12]
                        (((Timing->RPDelay)-1) << 20)); 
 800bd32:	6963      	ldr	r3, [r4, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bd34:	1e50      	subs	r0, r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bd36:	68a9      	ldr	r1, [r5, #8]
                        (((Timing->RPDelay)-1) << 20)); 
 800bd38:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bd3a:	6863      	ldr	r3, [r4, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bd3c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
                        (((Timing->RPDelay)-1) << 20)); 
 800bd40:	0512      	lsls	r2, r2, #20
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bd42:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bd46:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bd4a:	1e58      	subs	r0, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bd4c:	68a3      	ldr	r3, [r4, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bd4e:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bd50:	68e9      	ldr	r1, [r5, #12]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bd52:	3b01      	subs	r3, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bd54:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bd58:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bd5a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd5e:	6820      	ldr	r0, [r4, #0]
 800bd60:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bd62:	4303      	orrs	r3, r0
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bd64:	6920      	ldr	r0, [r4, #16]
 800bd66:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bd68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800bd6c:	69a0      	ldr	r0, [r4, #24]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bd6e:	60aa      	str	r2, [r5, #8]
                       (((Timing->RCDDelay)-1) << 24));   
 800bd70:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd72:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bd76:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bd78:	60eb      	str	r3, [r5, #12]
 800bd7a:	e7d6      	b.n	800bd2a <FMC_SDRAM_Timing_Init+0xe2>
 800bd7c:	a0000140 	.word	0xa0000140
 800bd80:	0802b09e 	.word	0x0802b09e

0800bd84 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 800bd84:	2300      	movs	r3, #0
{
 800bd86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpr = 0;
 800bd88:	9301      	str	r3, [sp, #4]
{
 800bd8a:	4605      	mov	r5, r0
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800bd8c:	4b1f      	ldr	r3, [pc, #124]	; (800be0c <FMC_SDRAM_SendCommand+0x88>)
{
 800bd8e:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800bd90:	4298      	cmp	r0, r3
 800bd92:	d004      	beq.n	800bd9e <FMC_SDRAM_SendCommand+0x1a>
 800bd94:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 800bd98:	481d      	ldr	r0, [pc, #116]	; (800be10 <FMC_SDRAM_SendCommand+0x8c>)
 800bd9a:	f7f5 feca 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	2b06      	cmp	r3, #6
 800bda2:	d904      	bls.n	800bdae <FMC_SDRAM_SendCommand+0x2a>
 800bda4:	f240 31d1 	movw	r1, #977	; 0x3d1
 800bda8:	4819      	ldr	r0, [pc, #100]	; (800be10 <FMC_SDRAM_SendCommand+0x8c>)
 800bdaa:	f7f5 fec2 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800bdae:	6863      	ldr	r3, [r4, #4]
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d008      	beq.n	800bdc6 <FMC_SDRAM_SendCommand+0x42>
 800bdb4:	f023 0310 	bic.w	r3, r3, #16
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d004      	beq.n	800bdc6 <FMC_SDRAM_SendCommand+0x42>
 800bdbc:	f240 31d2 	movw	r1, #978	; 0x3d2
 800bdc0:	4813      	ldr	r0, [pc, #76]	; (800be10 <FMC_SDRAM_SendCommand+0x8c>)
 800bdc2:	f7f5 feb6 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	2b0f      	cmp	r3, #15
 800bdcc:	d904      	bls.n	800bdd8 <FMC_SDRAM_SendCommand+0x54>
 800bdce:	f240 31d3 	movw	r1, #979	; 0x3d3
 800bdd2:	480f      	ldr	r0, [pc, #60]	; (800be10 <FMC_SDRAM_SendCommand+0x8c>)
 800bdd4:	f7f5 fead 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 800bdd8:	68e3      	ldr	r3, [r4, #12]
 800bdda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdde:	d304      	bcc.n	800bdea <FMC_SDRAM_SendCommand+0x66>
 800bde0:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800bde4:	480a      	ldr	r0, [pc, #40]	; (800be10 <FMC_SDRAM_SendCommand+0x8c>)
 800bde6:	f7f5 fea4 	bl	8001b32 <assert_failed>
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800bdea:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bdec:	e894 000c 	ldmia.w	r4, {r2, r3}
 800bdf0:	4313      	orrs	r3, r2
                    ((Command->ModeRegisterDefinition) << 9)
 800bdf2:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bdf4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bdf8:	68a2      	ldr	r2, [r4, #8]
 800bdfa:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bdfc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800be00:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	612b      	str	r3, [r5, #16]
}
 800be06:	b003      	add	sp, #12
 800be08:	bd30      	pop	{r4, r5, pc}
 800be0a:	bf00      	nop
 800be0c:	a0000140 	.word	0xa0000140
 800be10:	0802b09e 	.word	0x0802b09e

0800be14 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be14:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800be16:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <FMC_SDRAM_ProgramRefreshRate+0x34>)
{
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800be1c:	4298      	cmp	r0, r3
 800be1e:	d004      	beq.n	800be2a <FMC_SDRAM_ProgramRefreshRate+0x16>
 800be20:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800be24:	4809      	ldr	r0, [pc, #36]	; (800be4c <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800be26:	f7f5 fe84 	bl	8001b32 <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800be2a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800be2e:	d304      	bcc.n	800be3a <FMC_SDRAM_ProgramRefreshRate+0x26>
 800be30:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 800be34:	4805      	ldr	r0, [pc, #20]	; (800be4c <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800be36:	f7f5 fe7c 	bl	8001b32 <assert_failed>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800be3a:	6961      	ldr	r1, [r4, #20]
  
  return HAL_OK;   
}
 800be3c:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800be3e:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800be42:	6161      	str	r1, [r4, #20]
}
 800be44:	bd38      	pop	{r3, r4, r5, pc}
 800be46:	bf00      	nop
 800be48:	a0000140 	.word	0xa0000140
 800be4c:	0802b09e 	.word	0x0802b09e

0800be50 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800be50:	4b11      	ldr	r3, [pc, #68]	; (800be98 <SDMMC_GetCmdResp2+0x48>)
 800be52:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	fbb3 f2f2 	udiv	r2, r3, r2
 800be5c:	f241 3388 	movw	r3, #5000	; 0x1388
 800be60:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800be62:	f113 33ff 	adds.w	r3, r3, #4294967295
 800be66:	d314      	bcc.n	800be92 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800be68:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800be6a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800be6e:	d0f8      	beq.n	800be62 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800be72:	075b      	lsls	r3, r3, #29
 800be74:	d503      	bpl.n	800be7e <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be76:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be78:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800be80:	f013 0301 	ands.w	r3, r3, #1
 800be84:	d001      	beq.n	800be8a <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be86:	2301      	movs	r3, #1
 800be88:	e7f6      	b.n	800be78 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800be8a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800be8e:	6382      	str	r2, [r0, #56]	; 0x38
 800be90:	e7f3      	b.n	800be7a <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800be92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be96:	e7f0      	b.n	800be7a <SDMMC_GetCmdResp2+0x2a>
 800be98:	200000b8 	.word	0x200000b8

0800be9c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800be9c:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <SDMMC_GetCmdResp3+0x40>)
 800be9e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bea8:	f241 3388 	movw	r3, #5000	; 0x1388
 800beac:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800beae:	f113 33ff 	adds.w	r3, r3, #4294967295
 800beb2:	d30f      	bcc.n	800bed4 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800beb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800beb6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800beba:	d0f8      	beq.n	800beae <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bebc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bebe:	f013 0304 	ands.w	r3, r3, #4
 800bec2:	d003      	beq.n	800becc <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bec4:	2304      	movs	r3, #4
 800bec6:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800bec8:	4618      	mov	r0, r3
 800beca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800becc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bed0:	6382      	str	r2, [r0, #56]	; 0x38
 800bed2:	e7f9      	b.n	800bec8 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800bed4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	200000b8 	.word	0x200000b8

0800bee0 <SDMMC_Init>:
{
 800bee0:	b084      	sub	sp, #16
 800bee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee6:	4605      	mov	r5, r0
 800bee8:	a809      	add	r0, sp, #36	; 0x24
 800beea:	460c      	mov	r4, r1
 800beec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800bef0:	4b27      	ldr	r3, [pc, #156]	; (800bf90 <SDMMC_Init+0xb0>)
 800bef2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bef6:	429d      	cmp	r5, r3
 800bef8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800befc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bf00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bf02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bf04:	d003      	beq.n	800bf0e <SDMMC_Init+0x2e>
 800bf06:	21d8      	movs	r1, #216	; 0xd8
 800bf08:	4822      	ldr	r0, [pc, #136]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf0a:	f7f5 fe12 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 800bf0e:	f434 5300 	bics.w	r3, r4, #8192	; 0x2000
 800bf12:	d003      	beq.n	800bf1c <SDMMC_Init+0x3c>
 800bf14:	21d9      	movs	r1, #217	; 0xd9
 800bf16:	481f      	ldr	r0, [pc, #124]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf18:	f7f5 fe0b 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 800bf1c:	f43a 6380 	bics.w	r3, sl, #1024	; 0x400
 800bf20:	d003      	beq.n	800bf2a <SDMMC_Init+0x4a>
 800bf22:	21da      	movs	r1, #218	; 0xda
 800bf24:	481b      	ldr	r0, [pc, #108]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf26:	f7f5 fe04 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800bf2a:	f439 7300 	bics.w	r3, r9, #512	; 0x200
 800bf2e:	d003      	beq.n	800bf38 <SDMMC_Init+0x58>
 800bf30:	21db      	movs	r1, #219	; 0xdb
 800bf32:	4818      	ldr	r0, [pc, #96]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf34:	f7f5 fdfd 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800bf38:	f438 6300 	bics.w	r3, r8, #2048	; 0x800
 800bf3c:	d006      	beq.n	800bf4c <SDMMC_Init+0x6c>
 800bf3e:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 800bf42:	d003      	beq.n	800bf4c <SDMMC_Init+0x6c>
 800bf44:	21dc      	movs	r1, #220	; 0xdc
 800bf46:	4813      	ldr	r0, [pc, #76]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf48:	f7f5 fdf3 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800bf4c:	f437 4380 	bics.w	r3, r7, #16384	; 0x4000
 800bf50:	d003      	beq.n	800bf5a <SDMMC_Init+0x7a>
 800bf52:	21dd      	movs	r1, #221	; 0xdd
 800bf54:	480f      	ldr	r0, [pc, #60]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf56:	f7f5 fdec 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800bf5a:	2eff      	cmp	r6, #255	; 0xff
 800bf5c:	d903      	bls.n	800bf66 <SDMMC_Init+0x86>
 800bf5e:	21de      	movs	r1, #222	; 0xde
 800bf60:	480c      	ldr	r0, [pc, #48]	; (800bf94 <SDMMC_Init+0xb4>)
 800bf62:	f7f5 fde6 	bl	8001b32 <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800bf66:	ea44 030a 	orr.w	r3, r4, sl
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf6a:	686a      	ldr	r2, [r5, #4]
}
 800bf6c:	2000      	movs	r0, #0
             Init.ClockBypass         |\
 800bf6e:	ea43 0309 	orr.w	r3, r3, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf72:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockPowerSave      |\
 800bf76:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf7a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.BusWide             |\
 800bf7e:	433b      	orrs	r3, r7
             Init.HardwareFlowControl |\
 800bf80:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf82:	4313      	orrs	r3, r2
 800bf84:	606b      	str	r3, [r5, #4]
}
 800bf86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8a:	b004      	add	sp, #16
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	40012c00 	.word	0x40012c00
 800bf94:	0802b0db 	.word	0x0802b0db

0800bf98 <SDMMC_ReadFIFO>:
 800bf98:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800bf9c:	4770      	bx	lr

0800bf9e <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	6003      	str	r3, [r0, #0]
}
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	4770      	bx	lr

0800bfa6 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bfa6:	6800      	ldr	r0, [r0, #0]
}
 800bfa8:	f000 0003 	and.w	r0, r0, #3
 800bfac:	4770      	bx	lr
	...

0800bfb0 <SDMMC_SendCommand>:
{
 800bfb0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800bfb2:	684b      	ldr	r3, [r1, #4]
{
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800bfb8:	2b3f      	cmp	r3, #63	; 0x3f
 800bfba:	d904      	bls.n	800bfc6 <SDMMC_SendCommand+0x16>
 800bfbc:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800bfc0:	481a      	ldr	r0, [pc, #104]	; (800c02c <SDMMC_SendCommand+0x7c>)
 800bfc2:	f7f5 fdb6 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800bfc6:	68a3      	ldr	r3, [r4, #8]
 800bfc8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800bfcc:	d006      	beq.n	800bfdc <SDMMC_SendCommand+0x2c>
 800bfce:	2bc0      	cmp	r3, #192	; 0xc0
 800bfd0:	d004      	beq.n	800bfdc <SDMMC_SendCommand+0x2c>
 800bfd2:	f240 1165 	movw	r1, #357	; 0x165
 800bfd6:	4815      	ldr	r0, [pc, #84]	; (800c02c <SDMMC_SendCommand+0x7c>)
 800bfd8:	f7f5 fdab 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800bfdc:	68e3      	ldr	r3, [r4, #12]
 800bfde:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800bfe2:	d007      	beq.n	800bff4 <SDMMC_SendCommand+0x44>
 800bfe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfe8:	d004      	beq.n	800bff4 <SDMMC_SendCommand+0x44>
 800bfea:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800bfee:	480f      	ldr	r0, [pc, #60]	; (800c02c <SDMMC_SendCommand+0x7c>)
 800bff0:	f7f5 fd9f 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800bff4:	6923      	ldr	r3, [r4, #16]
 800bff6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bffa:	d004      	beq.n	800c006 <SDMMC_SendCommand+0x56>
 800bffc:	f240 1167 	movw	r1, #359	; 0x167
 800c000:	480a      	ldr	r0, [pc, #40]	; (800c02c <SDMMC_SendCommand+0x7c>)
 800c002:	f7f5 fd96 	bl	8001b32 <assert_failed>
  SDMMCx->ARG = Command->Argument;
 800c006:	6823      	ldr	r3, [r4, #0]
}
 800c008:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c00a:	68a1      	ldr	r1, [r4, #8]
  SDMMCx->ARG = Command->Argument;
 800c00c:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c00e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c010:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c012:	430b      	orrs	r3, r1
                       Command->Response         |\
 800c014:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c016:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->Response         |\
 800c01a:	430b      	orrs	r3, r1
                       Command->WaitForInterrupt |\
 800c01c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c01e:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 800c022:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c024:	4313      	orrs	r3, r2
 800c026:	60eb      	str	r3, [r5, #12]
}
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	0802b0db 	.word	0x0802b0db

0800c030 <SDMMC_GetResponse>:
  __IO uint32_t tmp = 0;
 800c030:	2300      	movs	r3, #0
{
 800c032:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmp = 0;
 800c034:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 800c036:	f031 030c 	bics.w	r3, r1, #12
{
 800c03a:	4604      	mov	r4, r0
 800c03c:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_RESP(Response));
 800c03e:	d004      	beq.n	800c04a <SDMMC_GetResponse+0x1a>
 800c040:	f240 1193 	movw	r1, #403	; 0x193
 800c044:	4804      	ldr	r0, [pc, #16]	; (800c058 <SDMMC_GetResponse+0x28>)
 800c046:	f7f5 fd74 	bl	8001b32 <assert_failed>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800c04a:	3414      	adds	r4, #20
 800c04c:	442c      	add	r4, r5
 800c04e:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800c050:	9b01      	ldr	r3, [sp, #4]
 800c052:	6818      	ldr	r0, [r3, #0]
}  
 800c054:	b003      	add	sp, #12
 800c056:	bd30      	pop	{r4, r5, pc}
 800c058:	0802b0db 	.word	0x0802b0db

0800c05c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800c05c:	4b44      	ldr	r3, [pc, #272]	; (800c170 <SDMMC_GetCmdResp1+0x114>)
{
 800c05e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800c066:	fbb3 f3f4 	udiv	r3, r3, r4
 800c06a:	435a      	muls	r2, r3
    if (count-- == 0)
 800c06c:	2a00      	cmp	r2, #0
 800c06e:	d049      	beq.n	800c104 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c072:	3a01      	subs	r2, #1
 800c074:	f013 0f45 	tst.w	r3, #69	; 0x45
 800c078:	d0f8      	beq.n	800c06c <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c07a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c07c:	075c      	lsls	r4, r3, #29
 800c07e:	d503      	bpl.n	800c088 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c080:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c082:	6383      	str	r3, [r0, #56]	; 0x38
}
 800c084:	4618      	mov	r0, r3
 800c086:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c088:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c08a:	f013 0301 	ands.w	r3, r3, #1
 800c08e:	d001      	beq.n	800c094 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c090:	2301      	movs	r3, #1
 800c092:	e7f6      	b.n	800c082 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c094:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	4291      	cmp	r1, r2
 800c09a:	d136      	bne.n	800c10a <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c09c:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0a0:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c0a2:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c0a4:	f7ff ffc4 	bl	800c030 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0a8:	4b32      	ldr	r3, [pc, #200]	; (800c174 <SDMMC_GetCmdResp1+0x118>)
 800c0aa:	4003      	ands	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0e9      	beq.n	800c084 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	db2c      	blt.n	800c10e <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0b4:	0042      	lsls	r2, r0, #1
 800c0b6:	d42d      	bmi.n	800c114 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0b8:	0084      	lsls	r4, r0, #2
 800c0ba:	d42d      	bmi.n	800c118 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0bc:	00c1      	lsls	r1, r0, #3
 800c0be:	d42d      	bmi.n	800c11c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c0c0:	0102      	lsls	r2, r0, #4
 800c0c2:	d42e      	bmi.n	800c122 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c0c4:	0144      	lsls	r4, r0, #5
 800c0c6:	d42f      	bmi.n	800c128 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c0c8:	01c1      	lsls	r1, r0, #7
 800c0ca:	d430      	bmi.n	800c12e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0cc:	0202      	lsls	r2, r0, #8
 800c0ce:	d431      	bmi.n	800c134 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0d0:	0244      	lsls	r4, r0, #9
 800c0d2:	d432      	bmi.n	800c13a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0d4:	0281      	lsls	r1, r0, #10
 800c0d6:	d433      	bmi.n	800c140 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0d8:	02c2      	lsls	r2, r0, #11
 800c0da:	d434      	bmi.n	800c146 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0dc:	0344      	lsls	r4, r0, #13
 800c0de:	d435      	bmi.n	800c14c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0e0:	0381      	lsls	r1, r0, #14
 800c0e2:	d436      	bmi.n	800c152 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0e4:	03c2      	lsls	r2, r0, #15
 800c0e6:	d437      	bmi.n	800c158 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0e8:	0404      	lsls	r4, r0, #16
 800c0ea:	d438      	bmi.n	800c15e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0ec:	0441      	lsls	r1, r0, #17
 800c0ee:	d439      	bmi.n	800c164 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0f0:	0482      	lsls	r2, r0, #18
 800c0f2:	d43a      	bmi.n	800c16a <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0f4:	f010 0f08 	tst.w	r0, #8
 800c0f8:	bf14      	ite	ne
 800c0fa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800c0fe:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800c102:	e7bf      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800c104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c108:	e7bc      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e7ba      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c10e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c112:	e7b7      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c114:	2340      	movs	r3, #64	; 0x40
 800c116:	e7b5      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c118:	2380      	movs	r3, #128	; 0x80
 800c11a:	e7b3      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c120:	e7b0      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c122:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c126:	e7ad      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c12c:	e7aa      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c12e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c132:	e7a7      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c138:	e7a4      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c13a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c13e:	e7a1      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c144:	e79e      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 800c146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c14a:	e79b      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c14c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c150:	e798      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c152:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c156:	e795      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c158:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c15c:	e792      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c15e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c162:	e78f      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c164:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c168:	e78c      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 800c16a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c16e:	e789      	b.n	800c084 <SDMMC_GetCmdResp1+0x28>
 800c170:	200000b8 	.word	0x200000b8
 800c174:	fdffe008 	.word	0xfdffe008

0800c178 <SDMMC_ConfigData>:
{
 800c178:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800c17a:	684b      	ldr	r3, [r1, #4]
{
 800c17c:	4605      	mov	r5, r0
 800c17e:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800c180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c184:	d304      	bcc.n	800c190 <SDMMC_ConfigData+0x18>
 800c186:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800c18a:	4821      	ldr	r0, [pc, #132]	; (800c210 <SDMMC_ConfigData+0x98>)
 800c18c:	f7f5 fcd1 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800c190:	68a3      	ldr	r3, [r4, #8]
 800c192:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 800c196:	f023 0110 	bic.w	r1, r3, #16
 800c19a:	d00c      	beq.n	800c1b6 <SDMMC_ConfigData+0x3e>
 800c19c:	2a40      	cmp	r2, #64	; 0x40
 800c19e:	d00a      	beq.n	800c1b6 <SDMMC_ConfigData+0x3e>
 800c1a0:	2a80      	cmp	r2, #128	; 0x80
 800c1a2:	d008      	beq.n	800c1b6 <SDMMC_ConfigData+0x3e>
 800c1a4:	29c0      	cmp	r1, #192	; 0xc0
 800c1a6:	d006      	beq.n	800c1b6 <SDMMC_ConfigData+0x3e>
 800c1a8:	2be0      	cmp	r3, #224	; 0xe0
 800c1aa:	d004      	beq.n	800c1b6 <SDMMC_ConfigData+0x3e>
 800c1ac:	f240 11a9 	movw	r1, #425	; 0x1a9
 800c1b0:	4817      	ldr	r0, [pc, #92]	; (800c210 <SDMMC_ConfigData+0x98>)
 800c1b2:	f7f5 fcbe 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800c1b6:	68e3      	ldr	r3, [r4, #12]
 800c1b8:	f033 0302 	bics.w	r3, r3, #2
 800c1bc:	d004      	beq.n	800c1c8 <SDMMC_ConfigData+0x50>
 800c1be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c1c2:	4813      	ldr	r0, [pc, #76]	; (800c210 <SDMMC_ConfigData+0x98>)
 800c1c4:	f7f5 fcb5 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	f033 0304 	bics.w	r3, r3, #4
 800c1ce:	d004      	beq.n	800c1da <SDMMC_ConfigData+0x62>
 800c1d0:	f240 11ab 	movw	r1, #427	; 0x1ab
 800c1d4:	480e      	ldr	r0, [pc, #56]	; (800c210 <SDMMC_ConfigData+0x98>)
 800c1d6:	f7f5 fcac 	bl	8001b32 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800c1da:	6963      	ldr	r3, [r4, #20]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d904      	bls.n	800c1ea <SDMMC_ConfigData+0x72>
 800c1e0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800c1e4:	480a      	ldr	r0, [pc, #40]	; (800c210 <SDMMC_ConfigData+0x98>)
 800c1e6:	f7f5 fca4 	bl	8001b32 <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1ea:	6823      	ldr	r3, [r4, #0]
}
 800c1ec:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1ee:	68e1      	ldr	r1, [r4, #12]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1f0:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1f6:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1f8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1fa:	430b      	orrs	r3, r1
                       Data->TransferDir   |\
 800c1fc:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1fe:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 800c202:	430b      	orrs	r3, r1
                       Data->TransferMode  |\
 800c204:	6961      	ldr	r1, [r4, #20]
 800c206:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c208:	4313      	orrs	r3, r2
 800c20a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800c20c:	bd38      	pop	{r3, r4, r5, pc}
 800c20e:	bf00      	nop
 800c210:	0802b0db 	.word	0x0802b0db

0800c214 <SDMMC_CmdBlockLength>:
{
 800c214:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c216:	2340      	movs	r3, #64	; 0x40
{
 800c218:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c21a:	2410      	movs	r4, #16
{
 800c21c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c21e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c220:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c222:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c224:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c226:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c228:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c22c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c22e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c230:	f7ff febe 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c234:	f241 3288 	movw	r2, #5000	; 0x1388
 800c238:	4621      	mov	r1, r4
 800c23a:	4628      	mov	r0, r5
 800c23c:	f7ff ff0e 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c240:	b007      	add	sp, #28
 800c242:	bd30      	pop	{r4, r5, pc}

0800c244 <SDMMC_CmdReadSingleBlock>:
{
 800c244:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c246:	2340      	movs	r3, #64	; 0x40
{
 800c248:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c24a:	2411      	movs	r4, #17
{
 800c24c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c24e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c250:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c252:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c254:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c256:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c258:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c25c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c25e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c260:	f7ff fea6 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c264:	f241 3288 	movw	r2, #5000	; 0x1388
 800c268:	4621      	mov	r1, r4
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7ff fef6 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c270:	b007      	add	sp, #28
 800c272:	bd30      	pop	{r4, r5, pc}

0800c274 <SDMMC_CmdReadMultiBlock>:
{
 800c274:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c276:	2340      	movs	r3, #64	; 0x40
{
 800c278:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c27a:	2412      	movs	r4, #18
{
 800c27c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c27e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c280:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c282:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c284:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c286:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c288:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c28c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c28e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c290:	f7ff fe8e 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c294:	f241 3288 	movw	r2, #5000	; 0x1388
 800c298:	4621      	mov	r1, r4
 800c29a:	4628      	mov	r0, r5
 800c29c:	f7ff fede 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c2a0:	b007      	add	sp, #28
 800c2a2:	bd30      	pop	{r4, r5, pc}

0800c2a4 <SDMMC_CmdWriteSingleBlock>:
{
 800c2a4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2a6:	2340      	movs	r3, #64	; 0x40
{
 800c2a8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2aa:	2418      	movs	r4, #24
{
 800c2ac:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2b0:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2b2:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2bc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2be:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2c0:	f7ff fe76 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f7ff fec6 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c2d0:	b007      	add	sp, #28
 800c2d2:	bd30      	pop	{r4, r5, pc}

0800c2d4 <SDMMC_CmdWriteMultiBlock>:
{
 800c2d4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2d6:	2340      	movs	r3, #64	; 0x40
{
 800c2d8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c2da:	2419      	movs	r4, #25
{
 800c2dc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e0:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2e2:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c2ec:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2ee:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2f0:	f7ff fe5e 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c2f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f7ff feae 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c300:	b007      	add	sp, #28
 800c302:	bd30      	pop	{r4, r5, pc}

0800c304 <SDMMC_CmdStopTransfer>:
{
 800c304:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800c306:	2300      	movs	r3, #0
{
 800c308:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c30a:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c30c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800c30e:	9301      	str	r3, [sp, #4]
{
 800c310:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c312:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c314:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c318:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c31a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c31e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c320:	f7ff fe46 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800c324:	4a03      	ldr	r2, [pc, #12]	; (800c334 <SDMMC_CmdStopTransfer+0x30>)
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f7ff fe97 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c32e:	b007      	add	sp, #28
 800c330:	bd30      	pop	{r4, r5, pc}
 800c332:	bf00      	nop
 800c334:	05f5e100 	.word	0x05f5e100

0800c338 <SDMMC_CmdSelDesel>:
{
 800c338:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c33a:	2340      	movs	r3, #64	; 0x40
{
 800c33c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c33e:	2407      	movs	r4, #7
{
 800c340:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c342:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c344:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c346:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c348:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c34a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c34c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c350:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c352:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c354:	f7ff fe2c 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c358:	f241 3288 	movw	r2, #5000	; 0x1388
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f7ff fe7c 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c364:	b007      	add	sp, #28
 800c366:	bd30      	pop	{r4, r5, pc}

0800c368 <SDMMC_CmdGoIdleState>:
{
 800c368:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800c36a:	2300      	movs	r3, #0
{
 800c36c:	b086      	sub	sp, #24
 800c36e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800c370:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c372:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c374:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c376:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c378:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c37e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c380:	f7ff fe16 	bl	800bfb0 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c384:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <SDMMC_CmdGoIdleState+0x4c>)
 800c386:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c390:	f241 3388 	movw	r3, #5000	; 0x1388
 800c394:	4353      	muls	r3, r2
    if (count-- == 0)
 800c396:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c39a:	d308      	bcc.n	800c3ae <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c39c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c39e:	0612      	lsls	r2, r2, #24
 800c3a0:	d5f9      	bpl.n	800c396 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c3a2:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800c3a6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c3a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c3aa:	b006      	add	sp, #24
 800c3ac:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800c3ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800c3b2:	e7fa      	b.n	800c3aa <SDMMC_CmdGoIdleState+0x42>
 800c3b4:	200000b8 	.word	0x200000b8

0800c3b8 <SDMMC_CmdOperCond>:
{
 800c3b8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c3ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 800c3be:	b086      	sub	sp, #24
 800c3c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c3c2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3c4:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3c8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ca:	2340      	movs	r3, #64	; 0x40
 800c3cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3d6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3d8:	f7ff fdea 	bl	800bfb0 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c3dc:	4b11      	ldr	r3, [pc, #68]	; (800c424 <SDMMC_CmdOperCond+0x6c>)
 800c3de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c3e8:	f241 3388 	movw	r3, #5000	; 0x1388
 800c3ec:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800c3ee:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c3f2:	d314      	bcc.n	800c41e <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c3f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c3f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c3fa:	d0f8      	beq.n	800c3ee <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c3fe:	f012 0204 	ands.w	r2, r2, #4
 800c402:	d004      	beq.n	800c40e <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c404:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c406:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c408:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c40a:	b006      	add	sp, #24
 800c40c:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c40e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c410:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800c414:	d0f9      	beq.n	800c40a <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c416:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800c418:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c41a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c41c:	e7f5      	b.n	800c40a <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800c41e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c422:	e7f2      	b.n	800c40a <SDMMC_CmdOperCond+0x52>
 800c424:	200000b8 	.word	0x200000b8

0800c428 <SDMMC_CmdAppCommand>:
{
 800c428:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c42a:	2340      	movs	r3, #64	; 0x40
{
 800c42c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c42e:	2437      	movs	r4, #55	; 0x37
{
 800c430:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c432:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c434:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c436:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c438:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c43a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c440:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c442:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c444:	f7ff fdb4 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c448:	f241 3288 	movw	r2, #5000	; 0x1388
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f7ff fe04 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c454:	b007      	add	sp, #28
 800c456:	bd30      	pop	{r4, r5, pc}

0800c458 <SDMMC_CmdAppOperCommand>:
{
 800c458:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c45a:	2329      	movs	r3, #41	; 0x29
{
 800c45c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800c45e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 800c462:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c464:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c466:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800c468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c46c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c46e:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800c470:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c472:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c474:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c47c:	f7ff fd98 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c480:	4620      	mov	r0, r4
 800c482:	f7ff fd0b 	bl	800be9c <SDMMC_GetCmdResp3>
}
 800c486:	b006      	add	sp, #24
 800c488:	bd10      	pop	{r4, pc}

0800c48a <SDMMC_CmdSendSCR>:
{
 800c48a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800c48c:	2300      	movs	r3, #0
{
 800c48e:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c490:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c492:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800c494:	9301      	str	r3, [sp, #4]
{
 800c496:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c498:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c49e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4a2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c4a4:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4a6:	f7ff fd83 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c4aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fdd3 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c4b6:	b007      	add	sp, #28
 800c4b8:	bd30      	pop	{r4, r5, pc}

0800c4ba <SDMMC_CmdSendCID>:
{
 800c4ba:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800c4bc:	2300      	movs	r3, #0
{
 800c4be:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4c0:	2202      	movs	r2, #2
{
 800c4c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800c4c4:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4c8:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4ca:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4cc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4d2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4d4:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4d6:	f7ff fd6b 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f7ff fcb8 	bl	800be50 <SDMMC_GetCmdResp2>
}
 800c4e0:	b006      	add	sp, #24
 800c4e2:	bd10      	pop	{r4, pc}

0800c4e4 <SDMMC_CmdSendCSD>:
{
 800c4e4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c4e6:	2309      	movs	r3, #9
{
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c4ec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4ee:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c4f0:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4f4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4fe:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c500:	f7ff fd56 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c504:	4620      	mov	r0, r4
 800c506:	f7ff fca3 	bl	800be50 <SDMMC_GetCmdResp2>
}
 800c50a:	b006      	add	sp, #24
 800c50c:	bd10      	pop	{r4, pc}
	...

0800c510 <SDMMC_CmdSetRelAdd>:
{
 800c510:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800c512:	2300      	movs	r3, #0
{
 800c514:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c516:	2203      	movs	r2, #3
{
 800c518:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800c51a:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c51c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c51e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c520:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c522:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c524:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c528:	9203      	str	r2, [sp, #12]
{
 800c52a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c52e:	f7ff fd3f 	bl	800bfb0 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c532:	4b20      	ldr	r3, [pc, #128]	; (800c5b4 <SDMMC_CmdSetRelAdd+0xa4>)
 800c534:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c53e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c542:	4353      	muls	r3, r2
    if (count-- == 0)
 800c544:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c548:	d32b      	bcc.n	800c5a2 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c54a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c54c:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c550:	d0f8      	beq.n	800c544 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c554:	075a      	lsls	r2, r3, #29
 800c556:	d503      	bpl.n	800c560 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c558:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c55a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800c55c:	b007      	add	sp, #28
 800c55e:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c562:	f011 0101 	ands.w	r1, r1, #1
 800c566:	d001      	beq.n	800c56c <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c568:	2001      	movs	r0, #1
 800c56a:	e7f6      	b.n	800c55a <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c56c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b03      	cmp	r3, #3
 800c572:	d119      	bne.n	800c5a8 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c574:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c578:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c57a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c57c:	f7ff fd58 	bl	800c030 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c580:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 800c584:	d103      	bne.n	800c58e <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c586:	0c00      	lsrs	r0, r0, #16
 800c588:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800c58a:	4618      	mov	r0, r3
 800c58c:	e7e6      	b.n	800c55c <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c58e:	0443      	lsls	r3, r0, #17
 800c590:	d40c      	bmi.n	800c5ac <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c592:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800c596:	bf14      	ite	ne
 800c598:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c59c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c5a0:	e7dc      	b.n	800c55c <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800c5a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c5a6:	e7d9      	b.n	800c55c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5a8:	2001      	movs	r0, #1
 800c5aa:	e7d7      	b.n	800c55c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c5b0:	e7d4      	b.n	800c55c <SDMMC_CmdSetRelAdd+0x4c>
 800c5b2:	bf00      	nop
 800c5b4:	200000b8 	.word	0x200000b8

0800c5b8 <SDMMC_CmdSendStatus>:
{
 800c5b8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ba:	2340      	movs	r3, #64	; 0x40
{
 800c5bc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c5be:	240d      	movs	r4, #13
{
 800c5c0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5c2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5c4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c5c6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c5d0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5d2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5d4:	f7ff fcec 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f7ff fd3c 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c5e4:	b007      	add	sp, #28
 800c5e6:	bd30      	pop	{r4, r5, pc}

0800c5e8 <SDMMC_CmdSwitch>:
{
 800c5e8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ea:	2340      	movs	r3, #64	; 0x40
{
 800c5ec:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c5ee:	2406      	movs	r4, #6
{
 800c5f0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5f4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 800c5f6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5fa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800c600:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c602:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c604:	f7ff fcd4 	bl	800bfb0 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800c608:	f241 3288 	movw	r2, #5000	; 0x1388
 800c60c:	4621      	mov	r1, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	f7ff fd24 	bl	800c05c <SDMMC_GetCmdResp1>
}
 800c614:	b007      	add	sp, #28
 800c616:	bd30      	pop	{r4, r5, pc}

0800c618 <SDMMC_CmdBusWidth>:
 800c618:	f7ff bfe6 	b.w	800c5e8 <SDMMC_CmdSwitch>

0800c61c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c61c:	4b0a      	ldr	r3, [pc, #40]	; (800c648 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c61e:	3b01      	subs	r3, #1
 800c620:	d101      	bne.n	800c626 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800c622:	2003      	movs	r0, #3
 800c624:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c626:	6902      	ldr	r2, [r0, #16]
 800c628:	2a00      	cmp	r2, #0
 800c62a:	daf8      	bge.n	800c61e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c62c:	6903      	ldr	r3, [r0, #16]
 800c62e:	4a06      	ldr	r2, [pc, #24]	; (800c648 <USB_CoreReset+0x2c>)
 800c630:	f043 0301 	orr.w	r3, r3, #1
 800c634:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800c636:	3a01      	subs	r2, #1
 800c638:	d0f3      	beq.n	800c622 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c63a:	6903      	ldr	r3, [r0, #16]
 800c63c:	f013 0301 	ands.w	r3, r3, #1
 800c640:	d1f9      	bne.n	800c636 <USB_CoreReset+0x1a>

  return HAL_OK;
 800c642:	4618      	mov	r0, r3
}
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	00030d41 	.word	0x00030d41

0800c64c <USB_CoreInit>:
{
 800c64c:	b084      	sub	sp, #16
 800c64e:	b538      	push	{r3, r4, r5, lr}
 800c650:	ad05      	add	r5, sp, #20
 800c652:	4604      	mov	r4, r0
 800c654:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d126      	bne.n	800c6ac <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c65e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c664:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c666:	68c3      	ldr	r3, [r0, #12]
 800c668:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c66c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c670:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c672:	68c3      	ldr	r3, [r0, #12]
 800c674:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c678:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800c67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d103      	bne.n	800c688 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c680:	68c3      	ldr	r3, [r0, #12]
 800c682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c686:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800c688:	4620      	mov	r0, r4
 800c68a:	f7ff ffc7 	bl	800c61c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800c68e:	9b08      	ldr	r3, [sp, #32]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d107      	bne.n	800c6a4 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c694:	68a3      	ldr	r3, [r4, #8]
 800c696:	f043 0306 	orr.w	r3, r3, #6
 800c69a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	f043 0320 	orr.w	r3, r3, #32
 800c6a2:	60a3      	str	r3, [r4, #8]
}
 800c6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6a8:	b004      	add	sp, #16
 800c6aa:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c6ac:	68c3      	ldr	r3, [r0, #12]
 800c6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800c6b4:	f7ff ffb2 	bl	800c61c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c6ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6be:	63a3      	str	r3, [r4, #56]	; 0x38
 800c6c0:	e7e5      	b.n	800c68e <USB_CoreInit+0x42>

0800c6c2 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c6c2:	6883      	ldr	r3, [r0, #8]
 800c6c4:	f043 0301 	orr.w	r3, r3, #1
 800c6c8:	6083      	str	r3, [r0, #8]
}
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	4770      	bx	lr

0800c6ce <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6ce:	6883      	ldr	r3, [r0, #8]
 800c6d0:	f023 0301 	bic.w	r3, r3, #1
 800c6d4:	6083      	str	r3, [r0, #8]
}
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	4770      	bx	lr

0800c6da <USB_SetCurrentMode>:
{
 800c6da:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6dc:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c6de:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c6e4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800c6e6:	d108      	bne.n	800c6fa <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c6e8:	68c3      	ldr	r3, [r0, #12]
 800c6ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6ee:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800c6f0:	2032      	movs	r0, #50	; 0x32
 800c6f2:	f7f8 f8ef 	bl	80048d4 <HAL_Delay>
  return HAL_OK;
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800c6fa:	b919      	cbnz	r1, 800c704 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6fc:	68c3      	ldr	r3, [r0, #12]
 800c6fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c702:	e7f4      	b.n	800c6ee <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800c704:	2001      	movs	r0, #1
}
 800c706:	bd08      	pop	{r3, pc}

0800c708 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c708:	0189      	lsls	r1, r1, #6
 800c70a:	4a07      	ldr	r2, [pc, #28]	; (800c728 <USB_FlushTxFifo+0x20>)
 800c70c:	f041 0120 	orr.w	r1, r1, #32
 800c710:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800c712:	3a01      	subs	r2, #1
 800c714:	d005      	beq.n	800c722 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c716:	6903      	ldr	r3, [r0, #16]
 800c718:	f013 0320 	ands.w	r3, r3, #32
 800c71c:	d1f9      	bne.n	800c712 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800c71e:	4618      	mov	r0, r3
 800c720:	4770      	bx	lr
      return HAL_TIMEOUT;
 800c722:	2003      	movs	r0, #3
}
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	00030d41 	.word	0x00030d41

0800c72c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c72c:	2310      	movs	r3, #16
 800c72e:	4a06      	ldr	r2, [pc, #24]	; (800c748 <USB_FlushRxFifo+0x1c>)
 800c730:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800c732:	3a01      	subs	r2, #1
 800c734:	d005      	beq.n	800c742 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c736:	6903      	ldr	r3, [r0, #16]
 800c738:	f013 0310 	ands.w	r3, r3, #16
 800c73c:	d1f9      	bne.n	800c732 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800c73e:	4618      	mov	r0, r3
 800c740:	4770      	bx	lr
      return HAL_TIMEOUT;
 800c742:	2003      	movs	r0, #3
}
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	00030d41 	.word	0x00030d41

0800c74c <USB_WritePacket>:
{
 800c74c:	b510      	push	{r4, lr}
 800c74e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800c752:	b94c      	cbnz	r4, 800c768 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800c754:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800c756:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800c75a:	f023 0303 	bic.w	r3, r3, #3
 800c75e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c762:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800c764:	4299      	cmp	r1, r3
 800c766:	d101      	bne.n	800c76c <USB_WritePacket+0x20>
}
 800c768:	2000      	movs	r0, #0
 800c76a:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800c76c:	f851 2b04 	ldr.w	r2, [r1], #4
 800c770:	6002      	str	r2, [r0, #0]
 800c772:	e7f7      	b.n	800c764 <USB_WritePacket+0x18>

0800c774 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c774:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800c776:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800c77a:	f022 0203 	bic.w	r2, r2, #3
 800c77e:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 800c780:	4291      	cmp	r1, r2
 800c782:	d101      	bne.n	800c788 <USB_ReadPacket+0x14>
}
 800c784:	4608      	mov	r0, r1
 800c786:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800c788:	6803      	ldr	r3, [r0, #0]
 800c78a:	f841 3b04 	str.w	r3, [r1], #4
 800c78e:	e7f7      	b.n	800c780 <USB_ReadPacket+0xc>

0800c790 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800c790:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800c792:	6980      	ldr	r0, [r0, #24]
}
 800c794:	4010      	ands	r0, r2
 800c796:	4770      	bx	lr

0800c798 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800c798:	6940      	ldr	r0, [r0, #20]
}
 800c79a:	f000 0001 	and.w	r0, r0, #1
 800c79e:	4770      	bx	lr

0800c7a0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c7a0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 800c7a4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c7a6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800c7aa:	f023 0303 	bic.w	r3, r3, #3
{
 800c7ae:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c7b0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c7b4:	f001 0303 	and.w	r3, r1, #3
 800c7b8:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800c7bc:	ea43 0304 	orr.w	r3, r3, r4
 800c7c0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800c7c4:	d104      	bne.n	800c7d0 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 800c7c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800c7ca:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 800c7d0:	2902      	cmp	r1, #2
 800c7d2:	d1fb      	bne.n	800c7cc <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 800c7d4:	f241 7370 	movw	r3, #6000	; 0x1770
 800c7d8:	e7f7      	b.n	800c7ca <USB_InitFSLSPClkSel+0x2a>

0800c7da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c7da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800c7dc:	2500      	movs	r5, #0
{
 800c7de:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 800c7e0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800c7e2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800c7e6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c7e8:	9b01      	ldr	r3, [sp, #4]
 800c7ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c7ee:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c7f0:	9b01      	ldr	r3, [sp, #4]
 800c7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800c7fa:	2064      	movs	r0, #100	; 0x64
 800c7fc:	f7f8 f86a 	bl	80048d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c800:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800c802:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c808:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800c80c:	f7f8 f862 	bl	80048d4 <HAL_Delay>

  return HAL_OK;
}
 800c810:	4628      	mov	r0, r5
 800c812:	b003      	add	sp, #12
 800c814:	bd30      	pop	{r4, r5, pc}

0800c816 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c816:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800c81c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800c820:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c822:	9b01      	ldr	r3, [sp, #4]
 800c824:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c828:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c82a:	9b01      	ldr	r3, [sp, #4]
 800c82c:	04da      	lsls	r2, r3, #19
 800c82e:	d406      	bmi.n	800c83e <USB_DriveVbus+0x28>
 800c830:	2901      	cmp	r1, #1
 800c832:	d104      	bne.n	800c83e <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c83a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c83e:	9b01      	ldr	r3, [sp, #4]
 800c840:	04db      	lsls	r3, r3, #19
 800c842:	d505      	bpl.n	800c850 <USB_DriveVbus+0x3a>
 800c844:	b921      	cbnz	r1, 800c850 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c846:	9b01      	ldr	r3, [sp, #4]
 800c848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c84c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800c850:	2000      	movs	r0, #0
 800c852:	b002      	add	sp, #8
 800c854:	4770      	bx	lr
	...

0800c858 <USB_HostInit>:
{
 800c858:	b084      	sub	sp, #16
 800c85a:	b538      	push	{r3, r4, r5, lr}
 800c85c:	4604      	mov	r4, r0
 800c85e:	a805      	add	r0, sp, #20
 800c860:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c86a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c86c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c870:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c872:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c874:	05da      	lsls	r2, r3, #23
 800c876:	d53f      	bpl.n	800c8f8 <USB_HostInit+0xa0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800c878:	9b07      	ldr	r3, [sp, #28]
 800c87a:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c87c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800c880:	d13c      	bne.n	800c8fc <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c882:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c886:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c88a:	2110      	movs	r1, #16
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7ff ff3b 	bl	800c708 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c892:	4620      	mov	r0, r4
 800c894:	f7ff ff4a 	bl	800c72c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800c898:	2300      	movs	r3, #0
 800c89a:	9906      	ldr	r1, [sp, #24]
 800c89c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800c8a4:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 800c8a6:	428b      	cmp	r3, r1
 800c8a8:	d12b      	bne.n	800c902 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7ff ffb2 	bl	800c816 <USB_DriveVbus>
  HAL_Delay(200U);
 800c8b2:	20c8      	movs	r0, #200	; 0xc8
 800c8b4:	f7f8 f80e 	bl	80048d4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c8c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8c4:	05db      	lsls	r3, r3, #23
 800c8c6:	d521      	bpl.n	800c90c <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 800c8c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8cc:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c8ce:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800c8d2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c8d4:	4b11      	ldr	r3, [pc, #68]	; (800c91c <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c8d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800c8da:	9b08      	ldr	r3, [sp, #32]
 800c8dc:	b91b      	cbnz	r3, 800c8e6 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8de:	69a3      	ldr	r3, [r4, #24]
 800c8e0:	f043 0310 	orr.w	r3, r3, #16
 800c8e4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c8e6:	69a2      	ldr	r2, [r4, #24]
}
 800c8e8:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c8ea:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <USB_HostInit+0xc8>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	61a3      	str	r3, [r4, #24]
}
 800c8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8f4:	b004      	add	sp, #16
 800c8f6:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c8f8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800c8fc:	f023 0304 	bic.w	r3, r3, #4
 800c900:	e7c1      	b.n	800c886 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c902:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c904:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800c906:	60d5      	str	r5, [r2, #12]
 800c908:	3220      	adds	r2, #32
 800c90a:	e7cc      	b.n	800c8a6 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 800c90c:	2380      	movs	r3, #128	; 0x80
 800c90e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c910:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800c914:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c916:	4b03      	ldr	r3, [pc, #12]	; (800c924 <USB_HostInit+0xcc>)
 800c918:	e7dd      	b.n	800c8d6 <USB_HostInit+0x7e>
 800c91a:	bf00      	nop
 800c91c:	00e00300 	.word	0x00e00300
 800c920:	a3200008 	.word	0xa3200008
 800c924:	004000e0 	.word	0x004000e0

0800c928 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c928:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800c92a:	2300      	movs	r3, #0
 800c92c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800c92e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800c932:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c934:	9801      	ldr	r0, [sp, #4]
}
 800c936:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800c93a:	b002      	add	sp, #8
 800c93c:	4770      	bx	lr

0800c93e <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c93e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800c942:	6880      	ldr	r0, [r0, #8]
}
 800c944:	b280      	uxth	r0, r0
 800c946:	4770      	bx	lr

0800c948 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c94c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 800c950:	4605      	mov	r5, r0
 800c952:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 800c95e:	fa4f f882 	sxtb.w	r8, r2
 800c962:	60a0      	str	r0, [r4, #8]
 800c964:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 800c968:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c96c:	2e03      	cmp	r6, #3
 800c96e:	d870      	bhi.n	800ca52 <USB_HC_Init+0x10a>
 800c970:	e8df f006 	tbb	[pc, r6]
 800c974:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c978:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c97c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c980:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800c982:	da03      	bge.n	800c98c <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c984:	68e1      	ldr	r1, [r4, #12]
 800c986:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800c98a:	e005      	b.n	800c998 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c98c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800c98e:	05c9      	lsls	r1, r1, #23
 800c990:	d546      	bpl.n	800ca20 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c992:	68e1      	ldr	r1, [r4, #12]
 800c994:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 800c998:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c99a:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c99c:	2101      	movs	r1, #1
 800c99e:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800c9a2:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c9a6:	fa01 f10e 	lsl.w	r1, r1, lr
 800c9aa:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 800c9ae:	bfb4      	ite	lt
 800c9b0:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 800c9b4:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c9b6:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c9ba:	69a9      	ldr	r1, [r5, #24]
 800c9bc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800c9c0:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9c2:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9c4:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9c8:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 800c9ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9ce:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9d2:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9d6:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 800c9da:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9dc:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 800c9e0:	bf0c      	ite	eq
 800c9e2:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800c9e6:	2100      	movne	r1, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 800c9ec:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9ee:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800c9f2:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9f6:	ea43 0304 	orr.w	r3, r3, r4
 800c9fa:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9fe:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800ca02:	d128      	bne.n	800ca56 <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ca04:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800ca08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca0c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 800ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca14:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800ca18:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca1c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ca1e:	dbb1      	blt.n	800c984 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ca20:	2101      	movs	r1, #1
 800ca22:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800ca26:	fa01 f10e 	lsl.w	r1, r1, lr
 800ca2a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 800ca2c:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ca2e:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 800ca32:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ca34:	69a9      	ldr	r1, [r5, #24]
 800ca36:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800ca3a:	61a9      	str	r1, [r5, #24]
 800ca3c:	e7c1      	b.n	800c9c2 <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca3e:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800ca42:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca46:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800ca48:	daea      	bge.n	800ca20 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ca4a:	68e1      	ldr	r1, [r4, #12]
 800ca4c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ca50:	e7a2      	b.n	800c998 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 800ca52:	2001      	movs	r0, #1
 800ca54:	e7a2      	b.n	800c99c <USB_HC_Init+0x54>
}
 800ca56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca5a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ca5a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ca5e:	6940      	ldr	r0, [r0, #20]
}
 800ca60:	b280      	uxth	r0, r0
 800ca62:	4770      	bx	lr

0800ca64 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ca64:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ca68:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800ca6c:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ca70:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ca74:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800ca78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca7c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ca80:	d11e      	bne.n	800cac0 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ca84:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ca88:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca8c:	d137      	bne.n	800cafe <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ca8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca92:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca96:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800ca9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca9e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800caa2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800caa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caaa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800caae:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 800cab2:	3b01      	subs	r3, #1
 800cab4:	d002      	beq.n	800cabc <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cab6:	6811      	ldr	r1, [r2, #0]
 800cab8:	2900      	cmp	r1, #0
 800caba:	dbfa      	blt.n	800cab2 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800cabc:	2000      	movs	r0, #0
 800cabe:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cac0:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800cac4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cac8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cacc:	d117      	bne.n	800cafe <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cad2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cad6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800cada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cade:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cae2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800cae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800caee:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800caf2:	3b01      	subs	r3, #1
 800caf4:	d0e2      	beq.n	800cabc <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800caf6:	6811      	ldr	r1, [r2, #0]
 800caf8:	2900      	cmp	r1, #0
 800cafa:	dbfa      	blt.n	800caf2 <USB_HC_Halt+0x8e>
 800cafc:	e7de      	b.n	800cabc <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cafe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb02:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800cb06:	e7d9      	b.n	800cabc <USB_HC_Halt+0x58>

0800cb08 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb08:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800cb0c:	4a06      	ldr	r2, [pc, #24]	; (800cb28 <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 800cb0e:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb10:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cb14:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cb18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cb1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cb20:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	80080000 	.word	0x80080000

0800cb2c <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800cb2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cb2e:	05db      	lsls	r3, r3, #23
{
 800cb30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cb34:	4616      	mov	r6, r2
 800cb36:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cb38:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800cb3a:	d517      	bpl.n	800cb6c <USB_HC_StartXfer+0x40>
 800cb3c:	790d      	ldrb	r5, [r1, #4]
 800cb3e:	b9ad      	cbnz	r5, 800cb6c <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800cb40:	b94e      	cbnz	r6, 800cb56 <USB_HC_StartXfer+0x2a>
 800cb42:	794b      	ldrb	r3, [r1, #5]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d111      	bne.n	800cb6c <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 800cb48:	4611      	mov	r1, r2
 800cb4a:	f7ff ffdd 	bl	800cb08 <USB_DoPing>
}
 800cb4e:	2000      	movs	r0, #0
 800cb50:	b002      	add	sp, #8
 800cb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 800cb56:	2e01      	cmp	r6, #1
 800cb58:	d108      	bne.n	800cb6c <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800cb5a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800cb5e:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 800cb62:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800cb66:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800cb6a:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 800cb6c:	6908      	ldr	r0, [r1, #16]
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d066      	beq.n	800cc40 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cb72:	890b      	ldrh	r3, [r1, #8]
 800cb74:	3801      	subs	r0, #1
 800cb76:	4418      	add	r0, r3
 800cb78:	fbb0 f0f3 	udiv	r0, r0, r3
 800cb7c:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 800cb7e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800cb82:	d903      	bls.n	800cb8c <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cb84:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 800cb86:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cb8a:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 800cb8c:	78cf      	ldrb	r7, [r1, #3]
 800cb8e:	b117      	cbz	r7, 800cb96 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cb90:	890b      	ldrh	r3, [r1, #8]
 800cb92:	4343      	muls	r3, r0
 800cb94:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cb96:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb9a:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 800cb9e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cba0:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cba4:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cba8:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cbac:	ea4e 0e08 	orr.w	lr, lr, r8
 800cbb0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800cc8c <USB_HC_StartXfer+0x160>
 800cbb4:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 800cbb8:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cbbc:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 800cbc0:	b116      	cbz	r6, 800cbc8 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cbc2:	68c8      	ldr	r0, [r1, #12]
 800cbc4:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cbc8:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 800cbcc:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cbd0:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cbd4:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cbd6:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cbda:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cbdc:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cbe0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800cbe4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800cbe8:	ea40 000c 	orr.w	r0, r0, ip
 800cbec:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cbf0:	4825      	ldr	r0, [pc, #148]	; (800cc88 <USB_HC_StartXfer+0x15c>)
 800cbf2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800cbf6:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cbfa:	f8d0 c000 	ldr.w	ip, [r0]
 800cbfe:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 800cc02:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cc06:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 800cc0a:	b1df      	cbz	r7, 800cc44 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cc0c:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cc10:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cc14:	f8d0 c000 	ldr.w	ip, [r0]
 800cc18:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 800cc1c:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cc20:	6800      	ldr	r0, [r0, #0]
 800cc22:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800cc26:	2e00      	cmp	r6, #0
 800cc28:	d191      	bne.n	800cb4e <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800cc2a:	2f00      	cmp	r7, #0
 800cc2c:	d18f      	bne.n	800cb4e <USB_HC_StartXfer+0x22>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d08d      	beq.n	800cb4e <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 800cc32:	79c8      	ldrb	r0, [r1, #7]
 800cc34:	2803      	cmp	r0, #3
 800cc36:	d813      	bhi.n	800cc60 <USB_HC_StartXfer+0x134>
 800cc38:	e8df f000 	tbb	[pc, r0]
 800cc3c:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 800cc40:	2001      	movs	r0, #1
 800cc42:	e7a3      	b.n	800cb8c <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cc44:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800cc48:	e7e2      	b.n	800cc10 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cc4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc4c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cc4e:	b280      	uxth	r0, r0
 800cc50:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800cc54:	4285      	cmp	r5, r0
 800cc56:	d903      	bls.n	800cc60 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cc58:	69a0      	ldr	r0, [r4, #24]
 800cc5a:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cc5e:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cc60:	2000      	movs	r0, #0
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	9000      	str	r0, [sp, #0]
 800cc66:	4620      	mov	r0, r4
 800cc68:	68c9      	ldr	r1, [r1, #12]
 800cc6a:	f7ff fd6f 	bl	800c74c <USB_WritePacket>
 800cc6e:	e76e      	b.n	800cb4e <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cc70:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc74:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cc76:	b280      	uxth	r0, r0
 800cc78:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800cc7c:	4285      	cmp	r5, r0
 800cc7e:	d9ef      	bls.n	800cc60 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cc80:	69a0      	ldr	r0, [r4, #24]
 800cc82:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800cc86:	e7ea      	b.n	800cc5e <USB_HC_StartXfer+0x132>
 800cc88:	20021a6c 	.word	0x20021a6c
 800cc8c:	1ff80000 	.word	0x1ff80000

0800cc90 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc90:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cc92:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc94:	f023 0301 	bic.w	r3, r3, #1
{
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc9c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cc9e:	f7ff fd33 	bl	800c708 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cca2:	4620      	mov	r0, r4
 800cca4:	f7ff fd42 	bl	800c72c <USB_FlushRxFifo>
 800cca8:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800ccac:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800ccb0:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800ccb2:	6811      	ldr	r1, [r2, #0]
 800ccb4:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ccb8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800ccbc:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800ccc0:	4290      	cmp	r0, r2
 800ccc2:	d1f6      	bne.n	800ccb2 <USB_StopHost+0x22>
 800ccc4:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800ccc6:	6819      	ldr	r1, [r3, #0]
 800ccc8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cccc:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800ccd0:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ccd8:	d802      	bhi.n	800cce0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ccda:	6819      	ldr	r1, [r3, #0]
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	dbf8      	blt.n	800ccd2 <USB_StopHost+0x42>
 800cce0:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d1ef      	bne.n	800ccc6 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cce6:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800ccea:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ccec:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ccf0:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	60a3      	str	r3, [r4, #8]
}
 800ccfa:	bd10      	pop	{r4, pc}

0800ccfc <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800ccfc:	4b0f      	ldr	r3, [pc, #60]	; (800cd3c <FATFS_LinkDriverEx+0x40>)
{
 800ccfe:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800cd00:	7a5d      	ldrb	r5, [r3, #9]
 800cd02:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800cd06:	b9b5      	cbnz	r5, 800cd36 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cd08:	7a5d      	ldrb	r5, [r3, #9]
 800cd0a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800cd0c:	7a5d      	ldrb	r5, [r3, #9]
 800cd0e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800cd12:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800cd14:	7a58      	ldrb	r0, [r3, #9]
 800cd16:	4418      	add	r0, r3
 800cd18:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800cd1a:	7a5a      	ldrb	r2, [r3, #9]
 800cd1c:	b2d2      	uxtb	r2, r2
 800cd1e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800cd20:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800cd22:	b2c0      	uxtb	r0, r0
 800cd24:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800cd26:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800cd28:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800cd2a:	4620      	mov	r0, r4
    path[1] = ':';
 800cd2c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800cd2e:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800cd30:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800cd32:	708b      	strb	r3, [r1, #2]
 800cd34:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800cd36:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800cd38:	bd30      	pop	{r4, r5, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20021a70 	.word	0x20021a70

0800cd40 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7ff bfdb 	b.w	800ccfc <FATFS_LinkDriverEx>

0800cd46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cd46:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800cd48:	f001 f9b2 	bl	800e0b0 <vTaskStartScheduler>
  
  return osOK;
}
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	bd08      	pop	{r3, pc}

0800cd50 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cd50:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cd52:	f001 fc43 	bl	800e5dc <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800cd56:	f110 30ff 	adds.w	r0, r0, #4294967295
 800cd5a:	bf18      	it	ne
 800cd5c:	2001      	movne	r0, #1
 800cd5e:	bd08      	pop	{r3, pc}

0800cd60 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd60:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800cd64:	b10b      	cbz	r3, 800cd6a <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800cd66:	f001 b9f1 	b.w	800e14c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800cd6a:	f001 b9e9 	b.w	800e140 <xTaskGetTickCount>

0800cd6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cd6e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd70:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800cd74:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd76:	8a02      	ldrh	r2, [r0, #16]
{
 800cd78:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800cd7a:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd7c:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800cd80:	bf14      	ite	ne
 800cd82:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd84:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cd86:	a803      	add	r0, sp, #12
 800cd88:	9400      	str	r4, [sp, #0]
 800cd8a:	9001      	str	r0, [sp, #4]
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f001 f8b7 	bl	800df00 <xTaskCreate>
 800cd92:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cd94:	bf0c      	ite	eq
 800cd96:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800cd98:	2000      	movne	r0, #0
}
 800cd9a:	b005      	add	sp, #20
 800cd9c:	bd30      	pop	{r4, r5, pc}

0800cd9e <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800cd9e:	f001 bc17 	b.w	800e5d0 <xTaskGetCurrentTaskHandle>

0800cda2 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cda2:	2800      	cmp	r0, #0
 800cda4:	bf08      	it	eq
 800cda6:	2001      	moveq	r0, #1
{
 800cda8:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cdaa:	f001 fae5 	bl	800e378 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cdae:	2000      	movs	r0, #0
 800cdb0:	bd08      	pop	{r3, pc}

0800cdb2 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800cdb2:	2001      	movs	r0, #1
 800cdb4:	f000 bd72 	b.w	800d89c <xQueueCreateMutex>

0800cdb8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cdb8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cdba:	2400      	movs	r4, #0
 800cdbc:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800cdbe:	b1e0      	cbz	r0, 800cdfa <osMutexWait+0x42>
 800cdc0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800cdc4:	b1a3      	cbz	r3, 800cdf0 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cdc6:	aa01      	add	r2, sp, #4
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f000 ffb3 	bl	800dd34 <xQueueReceiveFromISR>
 800cdce:	2801      	cmp	r0, #1
 800cdd0:	d002      	beq.n	800cdd8 <osMutexWait+0x20>
      return osErrorOS;
 800cdd2:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800cdd4:	b002      	add	sp, #8
 800cdd6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	b13b      	cbz	r3, 800cdec <osMutexWait+0x34>
 800cddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde0:	4b07      	ldr	r3, [pc, #28]	; (800ce00 <osMutexWait+0x48>)
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	f3bf 8f6f 	isb	sy
  return osOK;
 800cdec:	2000      	movs	r0, #0
 800cdee:	e7f1      	b.n	800cdd4 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cdf0:	f000 fed8 	bl	800dba4 <xQueueSemaphoreTake>
 800cdf4:	2801      	cmp	r0, #1
 800cdf6:	d1ec      	bne.n	800cdd2 <osMutexWait+0x1a>
 800cdf8:	e7f8      	b.n	800cdec <osMutexWait+0x34>
    return osErrorParameter;
 800cdfa:	2080      	movs	r0, #128	; 0x80
 800cdfc:	e7ea      	b.n	800cdd4 <osMutexWait+0x1c>
 800cdfe:	bf00      	nop
 800ce00:	e000ed04 	.word	0xe000ed04

0800ce04 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ce04:	2901      	cmp	r1, #1
{ 
 800ce06:	4608      	mov	r0, r1
 800ce08:	b510      	push	{r4, lr}
  if (count == 1) {
 800ce0a:	d10c      	bne.n	800ce26 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	2100      	movs	r1, #0
 800ce10:	f000 fc40 	bl	800d694 <xQueueGenericCreate>
 800ce14:	4604      	mov	r4, r0
 800ce16:	b120      	cbz	r0, 800ce22 <osSemaphoreCreate+0x1e>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	f000 fc7f 	bl	800d720 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800ce22:	4620      	mov	r0, r4
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800ce2a:	f000 bc56 	b.w	800d6da <xQueueCreateCountingSemaphore>
	...

0800ce30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ce30:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800ce32:	2400      	movs	r4, #0
 800ce34:	9401      	str	r4, [sp, #4]
 800ce36:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800ce3a:	b193      	cbz	r3, 800ce62 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ce3c:	a901      	add	r1, sp, #4
 800ce3e:	f000 fda9 	bl	800d994 <xQueueGiveFromISR>
 800ce42:	2801      	cmp	r0, #1
 800ce44:	d113      	bne.n	800ce6e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	b913      	cbnz	r3, 800ce50 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800ce4a:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800ce50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce54:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <osSemaphoreRelease+0x44>)
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	e7f3      	b.n	800ce4a <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ce62:	461a      	mov	r2, r3
 800ce64:	4619      	mov	r1, r3
 800ce66:	f000 fc5b 	bl	800d720 <xQueueGenericSend>
 800ce6a:	2801      	cmp	r0, #1
 800ce6c:	d0ed      	beq.n	800ce4a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800ce6e:	20ff      	movs	r0, #255	; 0xff
 800ce70:	e7ec      	b.n	800ce4c <osSemaphoreRelease+0x1c>
 800ce72:	bf00      	nop
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <osMutexRelease>:
 800ce78:	f7ff bfda 	b.w	800ce30 <osSemaphoreRelease>

0800ce7c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	c803      	ldmia	r0, {r0, r1}
 800ce80:	f000 bc08 	b.w	800d694 <xQueueGenericCreate>

0800ce84 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ce84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800ce86:	2400      	movs	r4, #0
{
 800ce88:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ce8a:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800ce8c:	42a2      	cmp	r2, r4
 800ce8e:	bf08      	it	eq
 800ce90:	2201      	moveq	r2, #1
 800ce92:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800ce96:	b1ab      	cbz	r3, 800cec4 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ce98:	4623      	mov	r3, r4
 800ce9a:	aa03      	add	r2, sp, #12
 800ce9c:	a901      	add	r1, sp, #4
 800ce9e:	f000 fd0f 	bl	800d8c0 <xQueueGenericSendFromISR>
 800cea2:	2801      	cmp	r0, #1
 800cea4:	d002      	beq.n	800ceac <osMessagePut+0x28>
      return osErrorOS;
 800cea6:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800cea8:	b004      	add	sp, #16
 800ceaa:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	b13b      	cbz	r3, 800cec0 <osMessagePut+0x3c>
 800ceb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb4:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <osMessagePut+0x4c>)
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
  return osOK;
 800cec0:	2000      	movs	r0, #0
 800cec2:	e7f1      	b.n	800cea8 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cec4:	a901      	add	r1, sp, #4
 800cec6:	f000 fc2b 	bl	800d720 <xQueueGenericSend>
 800ceca:	2801      	cmp	r0, #1
 800cecc:	d1eb      	bne.n	800cea6 <osMessagePut+0x22>
 800cece:	e7f7      	b.n	800cec0 <osMessagePut+0x3c>
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800ced6:	2600      	movs	r6, #0
{
 800ced8:	b085      	sub	sp, #20
 800ceda:	4604      	mov	r4, r0
 800cedc:	4617      	mov	r7, r2
 800cede:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800cee0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800cee2:	9602      	str	r6, [sp, #8]
 800cee4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800cee6:	b911      	cbnz	r1, 800ceee <osMessageGet+0x1a>
    event.status = osErrorParameter;
 800cee8:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	e016      	b.n	800cf1c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800ceee:	9600      	str	r6, [sp, #0]
 800cef0:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800cef4:	b1cb      	cbz	r3, 800cf2a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cef6:	466a      	mov	r2, sp
 800cef8:	a902      	add	r1, sp, #8
 800cefa:	f000 ff1b 	bl	800dd34 <xQueueReceiveFromISR>
 800cefe:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800cf00:	bf0a      	itet	eq
 800cf02:	2310      	moveq	r3, #16
      event.status = osOK;
 800cf04:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 800cf06:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800cf08:	9b00      	ldr	r3, [sp, #0]
 800cf0a:	b13b      	cbz	r3, 800cf1c <osMessageGet+0x48>
 800cf0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf10:	4b0c      	ldr	r3, [pc, #48]	; (800cf44 <osMessageGet+0x70>)
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800cf1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cf24:	4620      	mov	r0, r4
 800cf26:	b005      	add	sp, #20
 800cf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cf2a:	a902      	add	r1, sp, #8
 800cf2c:	f000 fd90 	bl	800da50 <xQueueReceive>
 800cf30:	2801      	cmp	r0, #1
 800cf32:	d101      	bne.n	800cf38 <osMessageGet+0x64>
      event.status = osEventMessage;
 800cf34:	2310      	movs	r3, #16
 800cf36:	e7d8      	b.n	800ceea <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	bf0c      	ite	eq
 800cf3c:	2300      	moveq	r3, #0
 800cf3e:	2340      	movne	r3, #64	; 0x40
 800cf40:	e7d3      	b.n	800ceea <osMessageGet+0x16>
 800cf42:	bf00      	nop
 800cf44:	e000ed04 	.word	0xe000ed04

0800cf48 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf48:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <prvInsertBlockIntoFreeList+0x40>)
{
 800cf4a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	4282      	cmp	r2, r0
 800cf50:	d318      	bcc.n	800cf84 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf52:	685c      	ldr	r4, [r3, #4]
 800cf54:	1919      	adds	r1, r3, r4
 800cf56:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf58:	bf01      	itttt	eq
 800cf5a:	6841      	ldreq	r1, [r0, #4]
 800cf5c:	4618      	moveq	r0, r3
 800cf5e:	1909      	addeq	r1, r1, r4
 800cf60:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf62:	6844      	ldr	r4, [r0, #4]
 800cf64:	1901      	adds	r1, r0, r4
 800cf66:	428a      	cmp	r2, r1
 800cf68:	d107      	bne.n	800cf7a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf6a:	4908      	ldr	r1, [pc, #32]	; (800cf8c <prvInsertBlockIntoFreeList+0x44>)
 800cf6c:	6809      	ldr	r1, [r1, #0]
 800cf6e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf70:	bf1f      	itttt	ne
 800cf72:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf74:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf76:	1909      	addne	r1, r1, r4
 800cf78:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf7a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf7c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf7e:	bf18      	it	ne
 800cf80:	6018      	strne	r0, [r3, #0]
 800cf82:	bd10      	pop	{r4, pc}
 800cf84:	4613      	mov	r3, r2
 800cf86:	e7e1      	b.n	800cf4c <prvInsertBlockIntoFreeList+0x4>
 800cf88:	20029a8c 	.word	0x20029a8c
 800cf8c:	20021a7c 	.word	0x20021a7c

0800cf90 <pvPortMalloc>:
{
 800cf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf94:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800cf96:	f001 f8cb 	bl	800e130 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800cf9a:	4941      	ldr	r1, [pc, #260]	; (800d0a0 <pvPortMalloc+0x110>)
 800cf9c:	4d41      	ldr	r5, [pc, #260]	; (800d0a4 <pvPortMalloc+0x114>)
 800cf9e:	680b      	ldr	r3, [r1, #0]
 800cfa0:	bb0b      	cbnz	r3, 800cfe6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800cfa2:	4a41      	ldr	r2, [pc, #260]	; (800d0a8 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cfa4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfa6:	4e41      	ldr	r6, [pc, #260]	; (800d0ac <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfa8:	bf1b      	ittet	ne
 800cfaa:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfac:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cfb0:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfb4:	f020 0007 	bicne.w	r0, r0, #7
 800cfb8:	bf1c      	itt	ne
 800cfba:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfbc:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800cfbe:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfc0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfc2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfc4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800cfc6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfc8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800cfcc:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800cfce:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfd0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800cfd2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfd4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfd6:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfd8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfda:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfdc:	4b35      	ldr	r3, [pc, #212]	; (800d0b4 <pvPortMalloc+0x124>)
 800cfde:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfe4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfe6:	682f      	ldr	r7, [r5, #0]
 800cfe8:	4227      	tst	r7, r4
 800cfea:	d116      	bne.n	800d01a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d042      	beq.n	800d076 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800cff0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cff4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cff6:	bf1c      	itt	ne
 800cff8:	f023 0307 	bicne.w	r3, r3, #7
 800cffc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cffe:	b163      	cbz	r3, 800d01a <pvPortMalloc+0x8a>
 800d000:	4a2c      	ldr	r2, [pc, #176]	; (800d0b4 <pvPortMalloc+0x124>)
 800d002:	6816      	ldr	r6, [r2, #0]
 800d004:	4690      	mov	r8, r2
 800d006:	42b3      	cmp	r3, r6
 800d008:	d807      	bhi.n	800d01a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800d00a:	4a28      	ldr	r2, [pc, #160]	; (800d0ac <pvPortMalloc+0x11c>)
 800d00c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00e:	6868      	ldr	r0, [r5, #4]
 800d010:	4283      	cmp	r3, r0
 800d012:	d804      	bhi.n	800d01e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800d014:	6809      	ldr	r1, [r1, #0]
 800d016:	428d      	cmp	r5, r1
 800d018:	d107      	bne.n	800d02a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800d01a:	2400      	movs	r4, #0
 800d01c:	e02b      	b.n	800d076 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01e:	682c      	ldr	r4, [r5, #0]
 800d020:	2c00      	cmp	r4, #0
 800d022:	d0f7      	beq.n	800d014 <pvPortMalloc+0x84>
 800d024:	462a      	mov	r2, r5
 800d026:	4625      	mov	r5, r4
 800d028:	e7f1      	b.n	800d00e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d02a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d02c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d02e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d030:	1ac2      	subs	r2, r0, r3
 800d032:	2a10      	cmp	r2, #16
 800d034:	d911      	bls.n	800d05a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d036:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d038:	0741      	lsls	r1, r0, #29
 800d03a:	d00a      	beq.n	800d052 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	b672      	cpsid	i
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	b662      	cpsie	i
 800d050:	e7fe      	b.n	800d050 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d052:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d054:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d056:	f7ff ff77 	bl	800cf48 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d05a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d05c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d05e:	4914      	ldr	r1, [pc, #80]	; (800d0b0 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d060:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d062:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d064:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800d066:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d068:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d06c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d06e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d070:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d072:	bf38      	it	cc
 800d074:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 800d076:	f001 f905 	bl	800e284 <xTaskResumeAll>
		if( pvReturn == NULL )
 800d07a:	b90c      	cbnz	r4, 800d080 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 800d07c:	f7f4 f9d9 	bl	8001432 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d080:	0763      	lsls	r3, r4, #29
 800d082:	d00a      	beq.n	800d09a <pvPortMalloc+0x10a>
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	b672      	cpsid	i
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	b662      	cpsie	i
 800d098:	e7fe      	b.n	800d098 <pvPortMalloc+0x108>
}
 800d09a:	4620      	mov	r0, r4
 800d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a0:	20021a7c 	.word	0x20021a7c
 800d0a4:	20029a80 	.word	0x20029a80
 800d0a8:	20021a80 	.word	0x20021a80
 800d0ac:	20029a8c 	.word	0x20029a8c
 800d0b0:	20029a88 	.word	0x20029a88
 800d0b4:	20029a84 	.word	0x20029a84

0800d0b8 <vPortFree>:
{
 800d0b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d032      	beq.n	800d126 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0c0:	4a19      	ldr	r2, [pc, #100]	; (800d128 <vPortFree+0x70>)
 800d0c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d0c6:	6812      	ldr	r2, [r2, #0]
 800d0c8:	4213      	tst	r3, r2
 800d0ca:	d10a      	bne.n	800d0e2 <vPortFree+0x2a>
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	b672      	cpsid	i
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	b662      	cpsie	i
 800d0e0:	e7fe      	b.n	800d0e0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0e2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d0e6:	b151      	cbz	r1, 800d0fe <vPortFree+0x46>
 800d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ec:	b672      	cpsid	i
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	b662      	cpsie	i
 800d0fc:	e7fe      	b.n	800d0fc <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0fe:	ea23 0302 	bic.w	r3, r3, r2
 800d102:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d106:	f001 f813 	bl	800e130 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d10a:	4a08      	ldr	r2, [pc, #32]	; (800d12c <vPortFree+0x74>)
 800d10c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d110:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d114:	6811      	ldr	r1, [r2, #0]
 800d116:	440b      	add	r3, r1
 800d118:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d11a:	f7ff ff15 	bl	800cf48 <prvInsertBlockIntoFreeList>
}
 800d11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800d122:	f001 b8af 	b.w	800e284 <xTaskResumeAll>
 800d126:	bd10      	pop	{r4, pc}
 800d128:	20029a80 	.word	0x20029a80
 800d12c:	20029a84 	.word	0x20029a84

0800d130 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d130:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d134:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d138:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d13a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d13c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d13e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d140:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d142:	6003      	str	r3, [r0, #0]
 800d144:	4770      	bx	lr

0800d146 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d146:	2300      	movs	r3, #0
 800d148:	6103      	str	r3, [r0, #16]
 800d14a:	4770      	bx	lr

0800d14c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d14c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d14e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d150:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d152:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d158:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d15a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d15c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d15e:	3301      	adds	r3, #1
 800d160:	6003      	str	r3, [r0, #0]
 800d162:	4770      	bx	lr

0800d164 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d164:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d166:	1c53      	adds	r3, r2, #1
{
 800d168:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800d16a:	d10a      	bne.n	800d182 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d16c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d172:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d174:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d176:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800d178:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d17a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d17c:	3301      	adds	r3, #1
 800d17e:	6003      	str	r3, [r0, #0]
 800d180:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d182:	f100 0308 	add.w	r3, r0, #8
 800d186:	685c      	ldr	r4, [r3, #4]
 800d188:	6825      	ldr	r5, [r4, #0]
 800d18a:	42aa      	cmp	r2, r5
 800d18c:	d3ef      	bcc.n	800d16e <vListInsert+0xa>
 800d18e:	4623      	mov	r3, r4
 800d190:	e7f9      	b.n	800d186 <vListInsert+0x22>

0800d192 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d192:	6841      	ldr	r1, [r0, #4]
 800d194:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d196:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d198:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d19a:	6882      	ldr	r2, [r0, #8]
 800d19c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d19e:	6859      	ldr	r1, [r3, #4]
 800d1a0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d1a2:	bf08      	it	eq
 800d1a4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	3a01      	subs	r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1b0:	6818      	ldr	r0, [r3, #0]
}
 800d1b2:	4770      	bx	lr

0800d1b4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800d1b4:	2300      	movs	r3, #0
{
 800d1b6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d1b8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1ba:	4b0f      	ldr	r3, [pc, #60]	; (800d1f8 <prvTaskExitError+0x44>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	d00a      	beq.n	800d1d8 <prvTaskExitError+0x24>
 800d1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c6:	b672      	cpsid	i
 800d1c8:	f383 8811 	msr	BASEPRI, r3
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	b662      	cpsie	i
 800d1d6:	e7fe      	b.n	800d1d6 <prvTaskExitError+0x22>
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	b672      	cpsid	i
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1ec:	9b01      	ldr	r3, [sp, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0fc      	beq.n	800d1ec <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1f2:	b002      	add	sp, #8
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	200000c0 	.word	0x200000c0

0800d1fc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1fc:	4808      	ldr	r0, [pc, #32]	; (800d220 <prvPortStartFirstTask+0x24>)
 800d1fe:	6800      	ldr	r0, [r0, #0]
 800d200:	6800      	ldr	r0, [r0, #0]
 800d202:	f380 8808 	msr	MSP, r0
 800d206:	f04f 0000 	mov.w	r0, #0
 800d20a:	f380 8814 	msr	CONTROL, r0
 800d20e:	b662      	cpsie	i
 800d210:	b661      	cpsie	f
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	df00      	svc	0
 800d21c:	bf00      	nop
 800d21e:	0000      	.short	0x0000
 800d220:	e000ed08 	.word	0xe000ed08

0800d224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d234 <vPortEnableVFP+0x10>
 800d228:	6801      	ldr	r1, [r0, #0]
 800d22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d22e:	6001      	str	r1, [r0, #0]
 800d230:	4770      	bx	lr
 800d232:	0000      	.short	0x0000
 800d234:	e000ed88 	.word	0xe000ed88

0800d238 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d23c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d240:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d244:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d246:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d248:	4b03      	ldr	r3, [pc, #12]	; (800d258 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d24a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d24c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d24e:	f06f 0302 	mvn.w	r3, #2
 800d252:	6203      	str	r3, [r0, #32]
}
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	0800d1b5 	.word	0x0800d1b5
 800d25c:	00000000 	.word	0x00000000

0800d260 <SVC_Handler>:
	__asm volatile (
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <pxCurrentTCBConst2>)
 800d262:	6819      	ldr	r1, [r3, #0]
 800d264:	6808      	ldr	r0, [r1, #0]
 800d266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26a:	f380 8809 	msr	PSP, r0
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f04f 0000 	mov.w	r0, #0
 800d276:	f380 8811 	msr	BASEPRI, r0
 800d27a:	4770      	bx	lr
 800d27c:	f3af 8000 	nop.w

0800d280 <pxCurrentTCBConst2>:
 800d280:	20029a9c 	.word	0x20029a9c

0800d284 <vPortEnterCritical>:
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	b672      	cpsid	i
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	b662      	cpsie	i
	uxCriticalNesting++;
 800d298:	4a0b      	ldr	r2, [pc, #44]	; (800d2c8 <vPortEnterCritical+0x44>)
 800d29a:	6813      	ldr	r3, [r2, #0]
 800d29c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d29e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d2a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d2a2:	d10f      	bne.n	800d2c4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2a4:	4b09      	ldr	r3, [pc, #36]	; (800d2cc <vPortEnterCritical+0x48>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2ac:	d00a      	beq.n	800d2c4 <vPortEnterCritical+0x40>
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	b672      	cpsid	i
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	b662      	cpsie	i
 800d2c2:	e7fe      	b.n	800d2c2 <vPortEnterCritical+0x3e>
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	200000c0 	.word	0x200000c0
 800d2cc:	e000ed04 	.word	0xe000ed04

0800d2d0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d2d0:	4a09      	ldr	r2, [pc, #36]	; (800d2f8 <vPortExitCritical+0x28>)
 800d2d2:	6813      	ldr	r3, [r2, #0]
 800d2d4:	b953      	cbnz	r3, 800d2ec <vPortExitCritical+0x1c>
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	b672      	cpsid	i
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	b662      	cpsie	i
 800d2ea:	e7fe      	b.n	800d2ea <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2f0:	b90b      	cbnz	r3, 800d2f6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	4770      	bx	lr
 800d2f8:	200000c0 	.word	0x200000c0
 800d2fc:	00000000 	.word	0x00000000

0800d300 <PendSV_Handler>:
	__asm volatile
 800d300:	f3ef 8009 	mrs	r0, PSP
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	4b15      	ldr	r3, [pc, #84]	; (800d360 <pxCurrentTCBConst>)
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	f01e 0f10 	tst.w	lr, #16
 800d310:	bf08      	it	eq
 800d312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31a:	6010      	str	r0, [r2, #0]
 800d31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d324:	b672      	cpsid	i
 800d326:	f380 8811 	msr	BASEPRI, r0
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	b662      	cpsie	i
 800d334:	f001 f846 	bl	800e3c4 <vTaskSwitchContext>
 800d338:	f04f 0000 	mov.w	r0, #0
 800d33c:	f380 8811 	msr	BASEPRI, r0
 800d340:	bc09      	pop	{r0, r3}
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	6808      	ldr	r0, [r1, #0]
 800d346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	f01e 0f10 	tst.w	lr, #16
 800d34e:	bf08      	it	eq
 800d350:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d354:	f380 8809 	msr	PSP, r0
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop

0800d360 <pxCurrentTCBConst>:
 800d360:	20029a9c 	.word	0x20029a9c

0800d364 <SysTick_Handler>:
{
 800d364:	b508      	push	{r3, lr}
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36a:	b672      	cpsid	i
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800d37a:	f000 feef 	bl	800e15c <xTaskIncrementTick>
 800d37e:	b118      	cbz	r0, 800d388 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d384:	4b02      	ldr	r3, [pc, #8]	; (800d390 <SysTick_Handler+0x2c>)
 800d386:	601a      	str	r2, [r3, #0]
	__asm volatile
 800d388:	2300      	movs	r3, #0
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	bd08      	pop	{r3, pc}
 800d390:	e000ed04 	.word	0xe000ed04

0800d394 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d394:	2300      	movs	r3, #0
 800d396:	4a08      	ldr	r2, [pc, #32]	; (800d3b8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d398:	4908      	ldr	r1, [pc, #32]	; (800d3bc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d39a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d39c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d39e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <vPortSetupTimerInterrupt+0x2c>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3aa:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <vPortSetupTimerInterrupt+0x30>)
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3b0:	2307      	movs	r3, #7
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	4770      	bx	lr
 800d3b6:	bf00      	nop
 800d3b8:	e000e010 	.word	0xe000e010
 800d3bc:	e000e018 	.word	0xe000e018
 800d3c0:	200000b8 	.word	0x200000b8
 800d3c4:	e000e014 	.word	0xe000e014

0800d3c8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3c8:	4b2c      	ldr	r3, [pc, #176]	; (800d47c <xPortStartScheduler+0xb4>)
{
 800d3ca:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3cc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3ce:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3d0:	b2d2      	uxtb	r2, r2
 800d3d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3d4:	22ff      	movs	r2, #255	; 0xff
 800d3d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3d8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3da:	4a29      	ldr	r2, [pc, #164]	; (800d480 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d3e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3ec:	2207      	movs	r2, #7
 800d3ee:	4b25      	ldr	r3, [pc, #148]	; (800d484 <xPortStartScheduler+0xbc>)
 800d3f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d3f6:	1e54      	subs	r4, r2, #1
 800d3f8:	0600      	lsls	r0, r0, #24
 800d3fa:	d40f      	bmi.n	800d41c <xPortStartScheduler+0x54>
 800d3fc:	b101      	cbz	r1, 800d400 <xPortStartScheduler+0x38>
 800d3fe:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	2a03      	cmp	r2, #3
 800d404:	d013      	beq.n	800d42e <xPortStartScheduler+0x66>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40a:	b672      	cpsid	i
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	b662      	cpsie	i
 800d41a:	e7fe      	b.n	800d41a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d41c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d420:	2101      	movs	r1, #1
 800d422:	0052      	lsls	r2, r2, #1
 800d424:	b2d2      	uxtb	r2, r2
 800d426:	f88d 2003 	strb.w	r2, [sp, #3]
 800d42a:	4622      	mov	r2, r4
 800d42c:	e7e1      	b.n	800d3f2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d42e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800d430:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d432:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d436:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d438:	9b01      	ldr	r3, [sp, #4]
 800d43a:	4a10      	ldr	r2, [pc, #64]	; (800d47c <xPortStartScheduler+0xb4>)
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d440:	4b11      	ldr	r3, [pc, #68]	; (800d488 <xPortStartScheduler+0xc0>)
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800d448:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800d450:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800d452:	f7ff ff9f 	bl	800d394 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d456:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <xPortStartScheduler+0xc4>)
 800d458:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800d45a:	f7ff fee3 	bl	800d224 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d45e:	4a0c      	ldr	r2, [pc, #48]	; (800d490 <xPortStartScheduler+0xc8>)
 800d460:	6813      	ldr	r3, [r2, #0]
 800d462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d466:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800d468:	f7ff fec8 	bl	800d1fc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d46c:	f000 ffaa 	bl	800e3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800d470:	f7ff fea0 	bl	800d1b4 <prvTaskExitError>
}
 800d474:	4620      	mov	r0, r4
 800d476:	b002      	add	sp, #8
 800d478:	bd10      	pop	{r4, pc}
 800d47a:	bf00      	nop
 800d47c:	e000e400 	.word	0xe000e400
 800d480:	20029a94 	.word	0x20029a94
 800d484:	20029a98 	.word	0x20029a98
 800d488:	e000ed20 	.word	0xe000ed20
 800d48c:	200000c0 	.word	0x200000c0
 800d490:	e000ef34 	.word	0xe000ef34

0800d494 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d494:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d498:	2b0f      	cmp	r3, #15
 800d49a:	d910      	bls.n	800d4be <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d49c:	4a12      	ldr	r2, [pc, #72]	; (800d4e8 <vPortValidateInterruptPriority+0x54>)
 800d49e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4a0:	4a12      	ldr	r2, [pc, #72]	; (800d4ec <vPortValidateInterruptPriority+0x58>)
 800d4a2:	7812      	ldrb	r2, [r2, #0]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d90a      	bls.n	800d4be <vPortValidateInterruptPriority+0x2a>
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	b672      	cpsid	i
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	b662      	cpsie	i
 800d4bc:	e7fe      	b.n	800d4bc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <vPortValidateInterruptPriority+0x5c>)
 800d4c0:	4a0c      	ldr	r2, [pc, #48]	; (800d4f4 <vPortValidateInterruptPriority+0x60>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	6812      	ldr	r2, [r2, #0]
 800d4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d90a      	bls.n	800d4e4 <vPortValidateInterruptPriority+0x50>
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	b672      	cpsid	i
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	b662      	cpsie	i
 800d4e2:	e7fe      	b.n	800d4e2 <vPortValidateInterruptPriority+0x4e>
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	e000e3f0 	.word	0xe000e3f0
 800d4ec:	20029a94 	.word	0x20029a94
 800d4f0:	e000ed0c 	.word	0xe000ed0c
 800d4f4:	20029a98 	.word	0x20029a98

0800d4f8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4fc:	f7ff fec2 	bl	800d284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d500:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d502:	f7ff fee5 	bl	800d2d0 <vPortExitCritical>

	return xReturn;
}
 800d506:	fab4 f084 	clz	r0, r4
 800d50a:	0940      	lsrs	r0, r0, #5
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <prvCopyDataToQueue>:
{
 800d50e:	b570      	push	{r4, r5, r6, lr}
 800d510:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d512:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d514:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d516:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d518:	b942      	cbnz	r2, 800d52c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d51a:	6805      	ldr	r5, [r0, #0]
 800d51c:	b99d      	cbnz	r5, 800d546 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d51e:	6840      	ldr	r0, [r0, #4]
 800d520:	f001 f8c0 	bl	800e6a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800d524:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d526:	3601      	adds	r6, #1
 800d528:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800d52a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d52c:	b96d      	cbnz	r5, 800d54a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d52e:	6880      	ldr	r0, [r0, #8]
 800d530:	f014 fbeb 	bl	8021d0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d534:	68a3      	ldr	r3, [r4, #8]
 800d536:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d538:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d53a:	6862      	ldr	r2, [r4, #4]
 800d53c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d53e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d540:	d301      	bcc.n	800d546 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800d546:	2000      	movs	r0, #0
 800d548:	e7ed      	b.n	800d526 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d54a:	68c0      	ldr	r0, [r0, #12]
 800d54c:	f014 fbdd 	bl	8021d0a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d552:	68e2      	ldr	r2, [r4, #12]
 800d554:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d556:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d558:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d55a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d55c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d55e:	bf3e      	ittt	cc
 800d560:	6862      	ldrcc	r2, [r4, #4]
 800d562:	189b      	addcc	r3, r3, r2
 800d564:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d566:	2d02      	cmp	r5, #2
 800d568:	d1ed      	bne.n	800d546 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d56a:	b10e      	cbz	r6, 800d570 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d56c:	3e01      	subs	r6, #1
 800d56e:	e7ea      	b.n	800d546 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d570:	4630      	mov	r0, r6
 800d572:	e7d8      	b.n	800d526 <prvCopyDataToQueue+0x18>

0800d574 <prvCopyDataFromQueue>:
{
 800d574:	4603      	mov	r3, r0
 800d576:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800d57a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d57c:	b162      	cbz	r2, 800d598 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d57e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d580:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d582:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d584:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d586:	60d9      	str	r1, [r3, #12]
}
 800d588:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d58c:	bf24      	itt	cs
 800d58e:	6819      	ldrcs	r1, [r3, #0]
 800d590:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d592:	68d9      	ldr	r1, [r3, #12]
 800d594:	f014 bbb9 	b.w	8021d0a <memcpy>
}
 800d598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <prvUnlockQueue>:
{
 800d59e:	b570      	push	{r4, r5, r6, lr}
 800d5a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d5a2:	f7ff fe6f 	bl	800d284 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d5a6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d5ae:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	dc14      	bgt.n	800d5de <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d5b4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5b6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d5be:	f7ff fe87 	bl	800d2d0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d5c2:	f7ff fe5f 	bl	800d284 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d5c6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d5ca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	dc12      	bgt.n	800d5f6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d5d0:	23ff      	movs	r3, #255	; 0xff
 800d5d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800d5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d5da:	f7ff be79 	b.w	800d2d0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d0e7      	beq.n	800d5b4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f000 ff5d 	bl	800e4a4 <xTaskRemoveFromEventList>
 800d5ea:	b108      	cbz	r0, 800d5f0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d5ec:	f000 ffea 	bl	800e5c4 <vTaskMissedYield>
 800d5f0:	3d01      	subs	r5, #1
 800d5f2:	b26d      	sxtb	r5, r5
 800d5f4:	e7dc      	b.n	800d5b0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5f6:	6923      	ldr	r3, [r4, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0e9      	beq.n	800d5d0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f000 ff51 	bl	800e4a4 <xTaskRemoveFromEventList>
 800d602:	b108      	cbz	r0, 800d608 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d604:	f000 ffde 	bl	800e5c4 <vTaskMissedYield>
 800d608:	3d01      	subs	r5, #1
 800d60a:	b26d      	sxtb	r5, r5
 800d60c:	e7de      	b.n	800d5cc <prvUnlockQueue+0x2e>
	...

0800d610 <xQueueGenericReset>:
{
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d614:	4604      	mov	r4, r0
 800d616:	b950      	cbnz	r0, 800d62e <xQueueGenericReset+0x1e>
 800d618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61c:	b672      	cpsid	i
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	b662      	cpsie	i
 800d62c:	e7fe      	b.n	800d62c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800d62e:	f7ff fe29 	bl	800d284 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d632:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d636:	6822      	ldr	r2, [r4, #0]
 800d638:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d63a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d63c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d63e:	1a1b      	subs	r3, r3, r0
 800d640:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d642:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d644:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d646:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d648:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d64a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d64c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d650:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800d654:	b995      	cbnz	r5, 800d67c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d656:	6923      	ldr	r3, [r4, #16]
 800d658:	b163      	cbz	r3, 800d674 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d65a:	f104 0010 	add.w	r0, r4, #16
 800d65e:	f000 ff21 	bl	800e4a4 <xTaskRemoveFromEventList>
 800d662:	b138      	cbz	r0, 800d674 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d668:	4b09      	ldr	r3, [pc, #36]	; (800d690 <xQueueGenericReset+0x80>)
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d674:	f7ff fe2c 	bl	800d2d0 <vPortExitCritical>
}
 800d678:	2001      	movs	r0, #1
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d67c:	f104 0010 	add.w	r0, r4, #16
 800d680:	f7ff fd56 	bl	800d130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d684:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d688:	f7ff fd52 	bl	800d130 <vListInitialise>
 800d68c:	e7f2      	b.n	800d674 <xQueueGenericReset+0x64>
 800d68e:	bf00      	nop
 800d690:	e000ed04 	.word	0xe000ed04

0800d694 <xQueueGenericCreate>:
	{
 800d694:	b570      	push	{r4, r5, r6, lr}
 800d696:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d698:	4606      	mov	r6, r0
 800d69a:	b950      	cbnz	r0, 800d6b2 <xQueueGenericCreate+0x1e>
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	b672      	cpsid	i
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	b662      	cpsie	i
 800d6b0:	e7fe      	b.n	800d6b0 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d6b4:	3048      	adds	r0, #72	; 0x48
 800d6b6:	f7ff fc6b 	bl	800cf90 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	b138      	cbz	r0, 800d6ce <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d6be:	b945      	cbnz	r5, 800d6d2 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6c0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800d6c2:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6c4:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800d6c6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff ffa1 	bl	800d610 <xQueueGenericReset>
	}
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d6d2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d6d6:	6003      	str	r3, [r0, #0]
 800d6d8:	e7f3      	b.n	800d6c2 <xQueueGenericCreate+0x2e>

0800d6da <xQueueCreateCountingSemaphore>:
	{
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d6de:	b950      	cbnz	r0, 800d6f6 <xQueueCreateCountingSemaphore+0x1c>
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	b672      	cpsid	i
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	b662      	cpsie	i
 800d6f4:	e7fe      	b.n	800d6f4 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d6f6:	4288      	cmp	r0, r1
 800d6f8:	d20a      	bcs.n	800d710 <xQueueCreateCountingSemaphore+0x36>
 800d6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fe:	b672      	cpsid	i
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	b662      	cpsie	i
 800d70e:	e7fe      	b.n	800d70e <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d710:	2202      	movs	r2, #2
 800d712:	2100      	movs	r1, #0
 800d714:	f7ff ffbe 	bl	800d694 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d718:	b100      	cbz	r0, 800d71c <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d71a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800d71c:	bd10      	pop	{r4, pc}
	...

0800d720 <xQueueGenericSend>:
{
 800d720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d724:	4689      	mov	r9, r1
 800d726:	9201      	str	r2, [sp, #4]
 800d728:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800d72a:	4604      	mov	r4, r0
 800d72c:	b950      	cbnz	r0, 800d744 <xQueueGenericSend+0x24>
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	b672      	cpsid	i
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	b662      	cpsie	i
 800d742:	e7fe      	b.n	800d742 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d744:	2900      	cmp	r1, #0
 800d746:	f040 808c 	bne.w	800d862 <xQueueGenericSend+0x142>
 800d74a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 8088 	beq.w	800d862 <xQueueGenericSend+0x142>
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	b672      	cpsid	i
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	b662      	cpsie	i
 800d766:	e7fe      	b.n	800d766 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d768:	9e01      	ldr	r6, [sp, #4]
 800d76a:	2e00      	cmp	r6, #0
 800d76c:	f000 8084 	beq.w	800d878 <xQueueGenericSend+0x158>
 800d770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d774:	b672      	cpsid	i
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	b662      	cpsie	i
 800d784:	e7fe      	b.n	800d784 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d786:	9d01      	ldr	r5, [sp, #4]
 800d788:	b91d      	cbnz	r5, 800d792 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800d78a:	f7ff fda1 	bl	800d2d0 <vPortExitCritical>
			return errQUEUE_FULL;
 800d78e:	2000      	movs	r0, #0
 800d790:	e058      	b.n	800d844 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 800d792:	b916      	cbnz	r6, 800d79a <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d794:	a802      	add	r0, sp, #8
 800d796:	f000 fec9 	bl	800e52c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d79a:	f7ff fd99 	bl	800d2d0 <vPortExitCritical>
		vTaskSuspendAll();
 800d79e:	f000 fcc7 	bl	800e130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7a2:	f7ff fd6f 	bl	800d284 <vPortEnterCritical>
 800d7a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d7aa:	2bff      	cmp	r3, #255	; 0xff
 800d7ac:	d101      	bne.n	800d7b2 <xQueueGenericSend+0x92>
 800d7ae:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800d7b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d7b6:	2bff      	cmp	r3, #255	; 0xff
 800d7b8:	d101      	bne.n	800d7be <xQueueGenericSend+0x9e>
 800d7ba:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800d7be:	f7ff fd87 	bl	800d2d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7c2:	a901      	add	r1, sp, #4
 800d7c4:	a802      	add	r0, sp, #8
 800d7c6:	f000 febd 	bl	800e544 <xTaskCheckForTimeOut>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d143      	bne.n	800d856 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7ce:	f7ff fd59 	bl	800d284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7d2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d7d4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d7d6:	f7ff fd7b 	bl	800d2d0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7da:	42ae      	cmp	r6, r5
 800d7dc:	d135      	bne.n	800d84a <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7de:	9901      	ldr	r1, [sp, #4]
 800d7e0:	f104 0010 	add.w	r0, r4, #16
 800d7e4:	f000 fe42 	bl	800e46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7ff fed8 	bl	800d59e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d7ee:	f000 fd49 	bl	800e284 <xTaskResumeAll>
 800d7f2:	b938      	cbnz	r0, 800d804 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800d7f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7f8:	f8ca 3000 	str.w	r3, [sl]
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800d806:	f7ff fd3d 	bl	800d284 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d80a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d80c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d80e:	429a      	cmp	r2, r3
 800d810:	d301      	bcc.n	800d816 <xQueueGenericSend+0xf6>
 800d812:	2f02      	cmp	r7, #2
 800d814:	d1b7      	bne.n	800d786 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d816:	463a      	mov	r2, r7
 800d818:	4649      	mov	r1, r9
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7ff fe77 	bl	800d50e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d822:	b11b      	cbz	r3, 800d82c <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d824:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d828:	f000 fe3c 	bl	800e4a4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d82c:	b138      	cbz	r0, 800d83e <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 800d82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d832:	4b19      	ldr	r3, [pc, #100]	; (800d898 <xQueueGenericSend+0x178>)
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d83e:	f7ff fd47 	bl	800d2d0 <vPortExitCritical>
				return pdPASS;
 800d842:	2001      	movs	r0, #1
}
 800d844:	b004      	add	sp, #16
 800d846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff fea7 	bl	800d59e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d850:	f000 fd18 	bl	800e284 <xTaskResumeAll>
 800d854:	e7d6      	b.n	800d804 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800d856:	4620      	mov	r0, r4
 800d858:	f7ff fea1 	bl	800d59e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d85c:	f000 fd12 	bl	800e284 <xTaskResumeAll>
 800d860:	e795      	b.n	800d78e <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d862:	2f02      	cmp	r7, #2
 800d864:	d102      	bne.n	800d86c <xQueueGenericSend+0x14c>
 800d866:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d10a      	bne.n	800d882 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d86c:	f000 feb6 	bl	800e5dc <xTaskGetSchedulerState>
 800d870:	2800      	cmp	r0, #0
 800d872:	f43f af79 	beq.w	800d768 <xQueueGenericSend+0x48>
 800d876:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800d878:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800d87c:	f8df a018 	ldr.w	sl, [pc, #24]	; 800d898 <xQueueGenericSend+0x178>
 800d880:	e7c1      	b.n	800d806 <xQueueGenericSend+0xe6>
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	b672      	cpsid	i
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	b662      	cpsie	i
 800d896:	e7fe      	b.n	800d896 <xQueueGenericSend+0x176>
 800d898:	e000ed04 	.word	0xe000ed04

0800d89c <xQueueCreateMutex>:
	{
 800d89c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d89e:	4602      	mov	r2, r0
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	f7ff fef6 	bl	800d694 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	b138      	cbz	r0, 800d8bc <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8b0:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d8b2:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8b4:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d8b6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8b8:	f7ff ff32 	bl	800d720 <xQueueGenericSend>
	}
 800d8bc:	4620      	mov	r0, r4
 800d8be:	bd10      	pop	{r4, pc}

0800d8c0 <xQueueGenericSendFromISR>:
{
 800d8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8c4:	4688      	mov	r8, r1
 800d8c6:	4691      	mov	r9, r2
 800d8c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	b950      	cbnz	r0, 800d8e4 <xQueueGenericSendFromISR+0x24>
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	b672      	cpsid	i
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	b662      	cpsie	i
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e4:	bb19      	cbnz	r1, 800d92e <xQueueGenericSendFromISR+0x6e>
 800d8e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d8e8:	b30b      	cbz	r3, 800d92e <xQueueGenericSendFromISR+0x6e>
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	b672      	cpsid	i
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	b662      	cpsie	i
 800d8fe:	e7fe      	b.n	800d8fe <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d900:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d904:	f000 fdce 	bl	800e4a4 <xTaskRemoveFromEventList>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d036      	beq.n	800d97a <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800d90c:	f1b9 0f00 	cmp.w	r9, #0
 800d910:	d033      	beq.n	800d97a <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d912:	2001      	movs	r0, #1
 800d914:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800d918:	f386 8811 	msr	BASEPRI, r6
}
 800d91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d920:	3501      	adds	r5, #1
 800d922:	b26d      	sxtb	r5, r5
 800d924:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800d928:	e027      	b.n	800d97a <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800d92a:	2000      	movs	r0, #0
 800d92c:	e7f4      	b.n	800d918 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d92e:	2f02      	cmp	r7, #2
 800d930:	d102      	bne.n	800d938 <xQueueGenericSendFromISR+0x78>
 800d932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d934:	2b01      	cmp	r3, #1
 800d936:	d122      	bne.n	800d97e <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d938:	f7ff fdac 	bl	800d494 <vPortValidateInterruptPriority>
	__asm volatile
 800d93c:	f3ef 8611 	mrs	r6, BASEPRI
 800d940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d944:	b672      	cpsid	i
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d956:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d958:	429a      	cmp	r2, r3
 800d95a:	d301      	bcc.n	800d960 <xQueueGenericSendFromISR+0xa0>
 800d95c:	2f02      	cmp	r7, #2
 800d95e:	d1e4      	bne.n	800d92a <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d960:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d964:	463a      	mov	r2, r7
 800d966:	4641      	mov	r1, r8
 800d968:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d96a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d96c:	f7ff fdcf 	bl	800d50e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d970:	1c6b      	adds	r3, r5, #1
 800d972:	d1d5      	bne.n	800d920 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1c2      	bne.n	800d900 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 800d97a:	2001      	movs	r0, #1
 800d97c:	e7cc      	b.n	800d918 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	b672      	cpsid	i
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	b662      	cpsie	i
 800d992:	e7fe      	b.n	800d992 <xQueueGenericSendFromISR+0xd2>

0800d994 <xQueueGiveFromISR>:
{
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d998:	4604      	mov	r4, r0
 800d99a:	b950      	cbnz	r0, 800d9b2 <xQueueGiveFromISR+0x1e>
 800d99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a0:	b672      	cpsid	i
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	b662      	cpsie	i
 800d9b0:	e7fe      	b.n	800d9b0 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d9b4:	b153      	cbz	r3, 800d9cc <xQueueGiveFromISR+0x38>
 800d9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ba:	b672      	cpsid	i
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	b662      	cpsie	i
 800d9ca:	e7fe      	b.n	800d9ca <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d9cc:	6803      	ldr	r3, [r0, #0]
 800d9ce:	b913      	cbnz	r3, 800d9d6 <xQueueGiveFromISR+0x42>
 800d9d0:	6843      	ldr	r3, [r0, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d130      	bne.n	800da38 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9d6:	f7ff fd5d 	bl	800d494 <vPortValidateInterruptPriority>
	__asm volatile
 800d9da:	f3ef 8611 	mrs	r6, BASEPRI
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	b672      	cpsid	i
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d9f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d301      	bcc.n	800d9fe <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	e014      	b.n	800da28 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d9fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da02:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800da04:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da06:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800da08:	1c5a      	adds	r2, r3, #1
 800da0a:	d110      	bne.n	800da2e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da0e:	b90b      	cbnz	r3, 800da14 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800da10:	2001      	movs	r0, #1
 800da12:	e009      	b.n	800da28 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da18:	f000 fd44 	bl	800e4a4 <xTaskRemoveFromEventList>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d0f7      	beq.n	800da10 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800da20:	2d00      	cmp	r5, #0
 800da22:	d0f5      	beq.n	800da10 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da24:	2001      	movs	r0, #1
 800da26:	6028      	str	r0, [r5, #0]
	__asm volatile
 800da28:	f386 8811 	msr	BASEPRI, r6
}
 800da2c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da2e:	3301      	adds	r3, #1
 800da30:	b25b      	sxtb	r3, r3
 800da32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da36:	e7eb      	b.n	800da10 <xQueueGiveFromISR+0x7c>
	__asm volatile
 800da38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3c:	b672      	cpsid	i
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	b662      	cpsie	i
 800da4c:	e7fe      	b.n	800da4c <xQueueGiveFromISR+0xb8>
	...

0800da50 <xQueueReceive>:
{
 800da50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da54:	b085      	sub	sp, #20
 800da56:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 800da58:	4604      	mov	r4, r0
{
 800da5a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800da5c:	b950      	cbnz	r0, 800da74 <xQueueReceive+0x24>
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	b672      	cpsid	i
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	b662      	cpsie	i
 800da72:	e7fe      	b.n	800da72 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da74:	2900      	cmp	r1, #0
 800da76:	f040 808a 	bne.w	800db8e <xQueueReceive+0x13e>
 800da7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f000 8086 	beq.w	800db8e <xQueueReceive+0x13e>
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	e7fe      	b.n	800da96 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da98:	9e01      	ldr	r6, [sp, #4]
 800da9a:	2e00      	cmp	r6, #0
 800da9c:	d07c      	beq.n	800db98 <xQueueReceive+0x148>
 800da9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa2:	b672      	cpsid	i
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	b662      	cpsie	i
 800dab2:	e7fe      	b.n	800dab2 <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dab4:	9d01      	ldr	r5, [sp, #4]
 800dab6:	b91d      	cbnz	r5, 800dac0 <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 800dab8:	f7ff fc0a 	bl	800d2d0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800dabc:	2000      	movs	r0, #0
 800dabe:	e052      	b.n	800db66 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800dac0:	b916      	cbnz	r6, 800dac8 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dac2:	a802      	add	r0, sp, #8
 800dac4:	f000 fd32 	bl	800e52c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dac8:	f7ff fc02 	bl	800d2d0 <vPortExitCritical>
		vTaskSuspendAll();
 800dacc:	f000 fb30 	bl	800e130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dad0:	f7ff fbd8 	bl	800d284 <vPortEnterCritical>
 800dad4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dad8:	2bff      	cmp	r3, #255	; 0xff
 800dada:	d101      	bne.n	800dae0 <xQueueReceive+0x90>
 800dadc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800dae0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dae4:	2bff      	cmp	r3, #255	; 0xff
 800dae6:	d101      	bne.n	800daec <xQueueReceive+0x9c>
 800dae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800daec:	f7ff fbf0 	bl	800d2d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daf0:	a901      	add	r1, sp, #4
 800daf2:	a802      	add	r0, sp, #8
 800daf4:	f000 fd26 	bl	800e544 <xTaskCheckForTimeOut>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d13d      	bne.n	800db78 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dafc:	4620      	mov	r0, r4
 800dafe:	f7ff fcfb 	bl	800d4f8 <prvIsQueueEmpty>
 800db02:	b398      	cbz	r0, 800db6c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db04:	9901      	ldr	r1, [sp, #4]
 800db06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db0a:	f000 fcaf 	bl	800e46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db0e:	4620      	mov	r0, r4
 800db10:	f7ff fd45 	bl	800d59e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db14:	f000 fbb6 	bl	800e284 <xTaskResumeAll>
 800db18:	b938      	cbnz	r0, 800db2a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800db1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db1e:	f8c9 3000 	str.w	r3, [r9]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800db2c:	f7ff fbaa 	bl	800d284 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db32:	2d00      	cmp	r5, #0
 800db34:	d0be      	beq.n	800dab4 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db36:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db38:	4641      	mov	r1, r8
 800db3a:	4620      	mov	r0, r4
 800db3c:	f7ff fd1a 	bl	800d574 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db40:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db42:	6923      	ldr	r3, [r4, #16]
 800db44:	b163      	cbz	r3, 800db60 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db46:	f104 0010 	add.w	r0, r4, #16
 800db4a:	f000 fcab 	bl	800e4a4 <xTaskRemoveFromEventList>
 800db4e:	b138      	cbz	r0, 800db60 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800db50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db54:	4b12      	ldr	r3, [pc, #72]	; (800dba0 <xQueueReceive+0x150>)
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800db60:	f7ff fbb6 	bl	800d2d0 <vPortExitCritical>
				return pdPASS;
 800db64:	2001      	movs	r0, #1
}
 800db66:	b005      	add	sp, #20
 800db68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff fd16 	bl	800d59e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db72:	f000 fb87 	bl	800e284 <xTaskResumeAll>
 800db76:	e7d8      	b.n	800db2a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800db78:	4620      	mov	r0, r4
 800db7a:	f7ff fd10 	bl	800d59e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db7e:	f000 fb81 	bl	800e284 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db82:	4620      	mov	r0, r4
 800db84:	f7ff fcb8 	bl	800d4f8 <prvIsQueueEmpty>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d0ce      	beq.n	800db2a <xQueueReceive+0xda>
 800db8c:	e796      	b.n	800dabc <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db8e:	f000 fd25 	bl	800e5dc <xTaskGetSchedulerState>
 800db92:	2800      	cmp	r0, #0
 800db94:	d080      	beq.n	800da98 <xQueueReceive+0x48>
 800db96:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800db98:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800db9a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800dba0 <xQueueReceive+0x150>
 800db9e:	e7c5      	b.n	800db2c <xQueueReceive+0xdc>
 800dba0:	e000ed04 	.word	0xe000ed04

0800dba4 <xQueueSemaphoreTake>:
{
 800dba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800dba8:	4604      	mov	r4, r0
{
 800dbaa:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dbac:	b950      	cbnz	r0, 800dbc4 <xQueueSemaphoreTake+0x20>
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	b672      	cpsid	i
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	b662      	cpsie	i
 800dbc2:	e7fe      	b.n	800dbc2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dbc4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dbc6:	b155      	cbz	r5, 800dbde <xQueueSemaphoreTake+0x3a>
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	b672      	cpsid	i
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	b662      	cpsie	i
 800dbdc:	e7fe      	b.n	800dbdc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbde:	f000 fcfd 	bl	800e5dc <xTaskGetSchedulerState>
 800dbe2:	b918      	cbnz	r0, 800dbec <xQueueSemaphoreTake+0x48>
 800dbe4:	9d01      	ldr	r5, [sp, #4]
 800dbe6:	2d00      	cmp	r5, #0
 800dbe8:	f040 8097 	bne.w	800dd1a <xQueueSemaphoreTake+0x176>
 800dbec:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800dbee:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800dbf0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800dd30 <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 800dbf4:	f7ff fb46 	bl	800d284 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dbf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dbfa:	b1e3      	cbz	r3, 800dc36 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	b913      	cbnz	r3, 800dc0a <xQueueSemaphoreTake+0x66>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800dc04:	f000 fdfe 	bl	800e804 <pvTaskIncrementMutexHeldCount>
 800dc08:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	b163      	cbz	r3, 800dc28 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc0e:	f104 0010 	add.w	r0, r4, #16
 800dc12:	f000 fc47 	bl	800e4a4 <xTaskRemoveFromEventList>
 800dc16:	b138      	cbz	r0, 800dc28 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 800dc18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc1c:	4b44      	ldr	r3, [pc, #272]	; (800dd30 <xQueueSemaphoreTake+0x18c>)
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800dc28:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800dc2a:	f7ff fb51 	bl	800d2d0 <vPortExitCritical>
}
 800dc2e:	4628      	mov	r0, r5
 800dc30:	b004      	add	sp, #16
 800dc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc36:	9b01      	ldr	r3, [sp, #4]
 800dc38:	b973      	cbnz	r3, 800dc58 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dc3a:	b155      	cbz	r5, 800dc52 <xQueueSemaphoreTake+0xae>
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	b672      	cpsid	i
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	b662      	cpsie	i
 800dc50:	e7fe      	b.n	800dc50 <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 800dc52:	f7ff fb3d 	bl	800d2d0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800dc56:	e7ea      	b.n	800dc2e <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dc58:	b916      	cbnz	r6, 800dc60 <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc5a:	a802      	add	r0, sp, #8
 800dc5c:	f000 fc66 	bl	800e52c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dc60:	f7ff fb36 	bl	800d2d0 <vPortExitCritical>
		vTaskSuspendAll();
 800dc64:	f000 fa64 	bl	800e130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc68:	f7ff fb0c 	bl	800d284 <vPortEnterCritical>
 800dc6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc70:	2bff      	cmp	r3, #255	; 0xff
 800dc72:	d101      	bne.n	800dc78 <xQueueSemaphoreTake+0xd4>
 800dc74:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800dc78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc7c:	2bff      	cmp	r3, #255	; 0xff
 800dc7e:	d101      	bne.n	800dc84 <xQueueSemaphoreTake+0xe0>
 800dc80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dc84:	f7ff fb24 	bl	800d2d0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc88:	a901      	add	r1, sp, #4
 800dc8a:	a802      	add	r0, sp, #8
 800dc8c:	f000 fc5a 	bl	800e544 <xTaskCheckForTimeOut>
 800dc90:	bb40      	cbnz	r0, 800dce4 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7ff fc30 	bl	800d4f8 <prvIsQueueEmpty>
 800dc98:	b1f0      	cbz	r0, 800dcd8 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc9a:	6823      	ldr	r3, [r4, #0]
 800dc9c:	b93b      	cbnz	r3, 800dcae <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 800dc9e:	f7ff faf1 	bl	800d284 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dca2:	6860      	ldr	r0, [r4, #4]
 800dca4:	f000 fcaa 	bl	800e5fc <xTaskPriorityInherit>
 800dca8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800dcaa:	f7ff fb11 	bl	800d2d0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcae:	9901      	ldr	r1, [sp, #4]
 800dcb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dcb4:	f000 fbda 	bl	800e46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f7ff fc70 	bl	800d59e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcbe:	f000 fae1 	bl	800e284 <xTaskResumeAll>
 800dcc2:	b938      	cbnz	r0, 800dcd4 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 800dcc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcc8:	f8c8 3000 	str.w	r3, [r8]
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	f3bf 8f6f 	isb	sy
 800dcd4:	2601      	movs	r6, #1
 800dcd6:	e78d      	b.n	800dbf4 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7ff fc60 	bl	800d59e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcde:	f000 fad1 	bl	800e284 <xTaskResumeAll>
 800dce2:	e7f7      	b.n	800dcd4 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 800dce4:	4620      	mov	r0, r4
 800dce6:	f7ff fc5a 	bl	800d59e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcea:	f000 facb 	bl	800e284 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f7ff fc02 	bl	800d4f8 <prvIsQueueEmpty>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d0ed      	beq.n	800dcd4 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 800dcf8:	2d00      	cmp	r5, #0
 800dcfa:	d098      	beq.n	800dc2e <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 800dcfc:	f7ff fac2 	bl	800d284 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800dd00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd02:	b119      	cbz	r1, 800dd0c <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dd04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dd06:	6819      	ldr	r1, [r3, #0]
 800dd08:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800dd0c:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 800dd0e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800dd10:	f000 fd1c 	bl	800e74c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800dd14:	f7ff fadc 	bl	800d2d0 <vPortExitCritical>
 800dd18:	e789      	b.n	800dc2e <xQueueSemaphoreTake+0x8a>
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	b672      	cpsid	i
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	b662      	cpsie	i
 800dd2e:	e7fe      	b.n	800dd2e <xQueueSemaphoreTake+0x18a>
 800dd30:	e000ed04 	.word	0xe000ed04

0800dd34 <xQueueReceiveFromISR>:
{
 800dd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd38:	4689      	mov	r9, r1
 800dd3a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800dd3c:	4605      	mov	r5, r0
 800dd3e:	b950      	cbnz	r0, 800dd56 <xQueueReceiveFromISR+0x22>
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	b672      	cpsid	i
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	b662      	cpsie	i
 800dd54:	e7fe      	b.n	800dd54 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd56:	bb81      	cbnz	r1, 800ddba <xQueueReceiveFromISR+0x86>
 800dd58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd5a:	b373      	cbz	r3, 800ddba <xQueueReceiveFromISR+0x86>
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	b672      	cpsid	i
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	b662      	cpsie	i
 800dd70:	e7fe      	b.n	800dd70 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd72:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd76:	4649      	mov	r1, r9
 800dd78:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd7a:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd7c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd7e:	f7ff fbf9 	bl	800d574 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd82:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800dd84:	1c73      	adds	r3, r6, #1
 800dd86:	d113      	bne.n	800ddb0 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd88:	692b      	ldr	r3, [r5, #16]
 800dd8a:	b90b      	cbnz	r3, 800dd90 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	e00b      	b.n	800dda8 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd90:	f105 0010 	add.w	r0, r5, #16
 800dd94:	f000 fb86 	bl	800e4a4 <xTaskRemoveFromEventList>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d0f7      	beq.n	800dd8c <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 800dd9c:	f1b8 0f00 	cmp.w	r8, #0
 800dda0:	d0f4      	beq.n	800dd8c <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dda2:	2001      	movs	r0, #1
 800dda4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800dda8:	f387 8811 	msr	BASEPRI, r7
}
 800ddac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ddb0:	3601      	adds	r6, #1
 800ddb2:	b276      	sxtb	r6, r6
 800ddb4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800ddb8:	e7e8      	b.n	800dd8c <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddba:	f7ff fb6b 	bl	800d494 <vPortValidateInterruptPriority>
	__asm volatile
 800ddbe:	f3ef 8711 	mrs	r7, BASEPRI
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	b672      	cpsid	i
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddd6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddd8:	2c00      	cmp	r4, #0
 800ddda:	d1ca      	bne.n	800dd72 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 800dddc:	4620      	mov	r0, r4
 800ddde:	e7e3      	b.n	800dda8 <xQueueReceiveFromISR+0x74>

0800dde0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dde0:	4a06      	ldr	r2, [pc, #24]	; (800ddfc <prvResetNextTaskUnblockTime+0x1c>)
 800dde2:	6813      	ldr	r3, [r2, #0]
 800dde4:	6819      	ldr	r1, [r3, #0]
 800dde6:	4b06      	ldr	r3, [pc, #24]	; (800de00 <prvResetNextTaskUnblockTime+0x20>)
 800dde8:	b919      	cbnz	r1, 800ddf2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ddea:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ddf2:	6812      	ldr	r2, [r2, #0]
 800ddf4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ddf6:	68d2      	ldr	r2, [r2, #12]
 800ddf8:	6852      	ldr	r2, [r2, #4]
 800ddfa:	e7f8      	b.n	800ddee <prvResetNextTaskUnblockTime+0xe>
 800ddfc:	20029aa0 	.word	0x20029aa0
 800de00:	20029b78 	.word	0x20029b78

0800de04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de06:	4b1b      	ldr	r3, [pc, #108]	; (800de74 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800de08:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de0a:	4e1b      	ldr	r6, [pc, #108]	; (800de78 <prvAddCurrentTaskToDelayedList+0x74>)
{
 800de0c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800de0e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de10:	6830      	ldr	r0, [r6, #0]
 800de12:	3004      	adds	r0, #4
 800de14:	f7ff f9bd 	bl	800d192 <uxListRemove>
 800de18:	4633      	mov	r3, r6
 800de1a:	b940      	cbnz	r0, 800de2e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800de1c:	6831      	ldr	r1, [r6, #0]
 800de1e:	2001      	movs	r0, #1
 800de20:	4e16      	ldr	r6, [pc, #88]	; (800de7c <prvAddCurrentTaskToDelayedList+0x78>)
 800de22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800de24:	6832      	ldr	r2, [r6, #0]
 800de26:	4088      	lsls	r0, r1
 800de28:	ea22 0200 	bic.w	r2, r2, r0
 800de2c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de2e:	1c62      	adds	r2, r4, #1
 800de30:	d107      	bne.n	800de42 <prvAddCurrentTaskToDelayedList+0x3e>
 800de32:	b137      	cbz	r7, 800de42 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de34:	6819      	ldr	r1, [r3, #0]
 800de36:	4812      	ldr	r0, [pc, #72]	; (800de80 <prvAddCurrentTaskToDelayedList+0x7c>)
 800de38:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de3e:	f7ff b985 	b.w	800d14c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de42:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de44:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800de46:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de48:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800de4a:	d907      	bls.n	800de5c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de4c:	4a0d      	ldr	r2, [pc, #52]	; (800de84 <prvAddCurrentTaskToDelayedList+0x80>)
 800de4e:	6810      	ldr	r0, [r2, #0]
 800de50:	6819      	ldr	r1, [r3, #0]
}
 800de52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de56:	3104      	adds	r1, #4
 800de58:	f7ff b984 	b.w	800d164 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de5c:	4a0a      	ldr	r2, [pc, #40]	; (800de88 <prvAddCurrentTaskToDelayedList+0x84>)
 800de5e:	6810      	ldr	r0, [r2, #0]
 800de60:	6819      	ldr	r1, [r3, #0]
 800de62:	3104      	adds	r1, #4
 800de64:	f7ff f97e 	bl	800d164 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de68:	4b08      	ldr	r3, [pc, #32]	; (800de8c <prvAddCurrentTaskToDelayedList+0x88>)
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	4294      	cmp	r4, r2
 800de6e:	d200      	bcs.n	800de72 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800de70:	601c      	str	r4, [r3, #0]
 800de72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de74:	20029bc0 	.word	0x20029bc0
 800de78:	20029a9c 	.word	0x20029a9c
 800de7c:	20029b48 	.word	0x20029b48
 800de80:	20029b98 	.word	0x20029b98
 800de84:	20029aa4 	.word	0x20029aa4
 800de88:	20029aa0 	.word	0x20029aa0
 800de8c:	20029b78 	.word	0x20029b78

0800de90 <prvIdleTask>:
{
 800de90:	b580      	push	{r7, lr}
				taskYIELD();
 800de92:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800defc <prvIdleTask+0x6c>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800de96:	4f15      	ldr	r7, [pc, #84]	; (800deec <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de98:	4c15      	ldr	r4, [pc, #84]	; (800def0 <prvIdleTask+0x60>)
				--uxCurrentNumberOfTasks;
 800de9a:	4e16      	ldr	r6, [pc, #88]	; (800def4 <prvIdleTask+0x64>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	b973      	cbnz	r3, 800debe <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dea0:	4b15      	ldr	r3, [pc, #84]	; (800def8 <prvIdleTask+0x68>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d907      	bls.n	800deb8 <prvIdleTask+0x28>
				taskYIELD();
 800dea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800deac:	f8c8 3000 	str.w	r3, [r8]
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800deb8:	f7f3 fab9 	bl	800142e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800debc:	e7ec      	b.n	800de98 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800debe:	f7ff f9e1 	bl	800d284 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dec6:	1d28      	adds	r0, r5, #4
 800dec8:	f7ff f963 	bl	800d192 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800decc:	6833      	ldr	r3, [r6, #0]
 800dece:	3b01      	subs	r3, #1
 800ded0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	3b01      	subs	r3, #1
 800ded6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ded8:	f7ff f9fa 	bl	800d2d0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800dedc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800dede:	f7ff f8eb 	bl	800d0b8 <vPortFree>
			vPortFree( pxTCB );
 800dee2:	4628      	mov	r0, r5
 800dee4:	f7ff f8e8 	bl	800d0b8 <vPortFree>
 800dee8:	e7d8      	b.n	800de9c <prvIdleTask+0xc>
 800deea:	bf00      	nop
 800deec:	20029bac 	.word	0x20029bac
 800def0:	20029b38 	.word	0x20029b38
 800def4:	20029b34 	.word	0x20029b34
 800def8:	20029aa8 	.word	0x20029aa8
 800defc:	e000ed04 	.word	0xe000ed04

0800df00 <xTaskCreate>:
	{
 800df00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df04:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800df08:	4680      	mov	r8, r0
 800df0a:	460d      	mov	r5, r1
 800df0c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0e:	4650      	mov	r0, sl
	{
 800df10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df12:	f7ff f83d 	bl	800cf90 <pvPortMalloc>
			if( pxStack != NULL )
 800df16:	4607      	mov	r7, r0
 800df18:	2800      	cmp	r0, #0
 800df1a:	f000 809e 	beq.w	800e05a <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800df1e:	2058      	movs	r0, #88	; 0x58
 800df20:	f7ff f836 	bl	800cf90 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800df24:	4604      	mov	r4, r0
 800df26:	2800      	cmp	r0, #0
 800df28:	f000 8094 	beq.w	800e054 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df2c:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 800df2e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df30:	21a5      	movs	r1, #165	; 0xa5
 800df32:	4638      	mov	r0, r7
 800df34:	f013 ff0e 	bl	8021d54 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800df38:	f1aa 0a04 	sub.w	sl, sl, #4
 800df3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df3e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800df42:	449a      	add	sl, r3
 800df44:	1e6b      	subs	r3, r5, #1
 800df46:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800df48:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df4c:	7859      	ldrb	r1, [r3, #1]
 800df4e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800df52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800df56:	b109      	cbz	r1, 800df5c <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df58:	42ab      	cmp	r3, r5
 800df5a:	d1f7      	bne.n	800df4c <xTaskCreate+0x4c>
 800df5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df5e:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df62:	1d27      	adds	r7, r4, #4
 800df64:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df66:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df6a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800df6c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800df70:	bf28      	it	cs
 800df72:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800df74:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800df76:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df78:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df7c:	f7ff f8e3 	bl	800d146 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df80:	f104 0018 	add.w	r0, r4, #24
 800df84:	f7ff f8df 	bl	800d146 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800df88:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df8c:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df8e:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df90:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df92:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df94:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df96:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 800df98:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df9c:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfa0:	f7ff f94a 	bl	800d238 <pxPortInitialiseStack>
 800dfa4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800dfa6:	b106      	cbz	r6, 800dfaa <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfa8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800dfaa:	f7ff f96b 	bl	800d284 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800dfae:	4b32      	ldr	r3, [pc, #200]	; (800e078 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 800dfb0:	4e32      	ldr	r6, [pc, #200]	; (800e07c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800e0a8 <xTaskCreate+0x1a8>
 800dfb8:	3201      	adds	r2, #1
 800dfba:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800dfbc:	6835      	ldr	r5, [r6, #0]
 800dfbe:	2d00      	cmp	r5, #0
 800dfc0:	d14e      	bne.n	800e060 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 800dfc2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d11d      	bne.n	800e006 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfca:	eb08 0005 	add.w	r0, r8, r5
 800dfce:	3514      	adds	r5, #20
 800dfd0:	f7ff f8ae 	bl	800d130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfd4:	2d8c      	cmp	r5, #140	; 0x8c
 800dfd6:	d1f8      	bne.n	800dfca <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 800dfd8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800e0ac <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 800dfdc:	4d28      	ldr	r5, [pc, #160]	; (800e080 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 800dfde:	4648      	mov	r0, r9
 800dfe0:	f7ff f8a6 	bl	800d130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7ff f8a3 	bl	800d130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dfea:	4826      	ldr	r0, [pc, #152]	; (800e084 <xTaskCreate+0x184>)
 800dfec:	f7ff f8a0 	bl	800d130 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dff0:	4825      	ldr	r0, [pc, #148]	; (800e088 <xTaskCreate+0x188>)
 800dff2:	f7ff f89d 	bl	800d130 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dff6:	4825      	ldr	r0, [pc, #148]	; (800e08c <xTaskCreate+0x18c>)
 800dff8:	f7ff f89a 	bl	800d130 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dffc:	4b24      	ldr	r3, [pc, #144]	; (800e090 <xTaskCreate+0x190>)
 800dffe:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e002:	4b24      	ldr	r3, [pc, #144]	; (800e094 <xTaskCreate+0x194>)
 800e004:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e006:	4a24      	ldr	r2, [pc, #144]	; (800e098 <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 800e008:	2501      	movs	r5, #1
 800e00a:	4924      	ldr	r1, [pc, #144]	; (800e09c <xTaskCreate+0x19c>)
		uxTaskNumber++;
 800e00c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e00e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800e010:	3301      	adds	r3, #1
 800e012:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e014:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e016:	fa05 f302 	lsl.w	r3, r5, r2
 800e01a:	4303      	orrs	r3, r0
 800e01c:	2014      	movs	r0, #20
 800e01e:	600b      	str	r3, [r1, #0]
 800e020:	4639      	mov	r1, r7
 800e022:	fb00 8002 	mla	r0, r0, r2, r8
 800e026:	f7ff f891 	bl	800d14c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e02a:	f7ff f951 	bl	800d2d0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e02e:	4b1c      	ldr	r3, [pc, #112]	; (800e0a0 <xTaskCreate+0x1a0>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	b163      	cbz	r3, 800e04e <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e034:	6833      	ldr	r3, [r6, #0]
 800e036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e038:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d207      	bcs.n	800e04e <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 800e03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e042:	4b18      	ldr	r3, [pc, #96]	; (800e0a4 <xTaskCreate+0x1a4>)
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	f3bf 8f6f 	isb	sy
	}
 800e04e:	4628      	mov	r0, r5
 800e050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800e054:	4638      	mov	r0, r7
 800e056:	f7ff f82f 	bl	800d0b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e05a:	f04f 35ff 	mov.w	r5, #4294967295
 800e05e:	e7f6      	b.n	800e04e <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 800e060:	4b0f      	ldr	r3, [pc, #60]	; (800e0a0 <xTaskCreate+0x1a0>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1ce      	bne.n	800e006 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e068:	6833      	ldr	r3, [r6, #0]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e06e:	429a      	cmp	r2, r3
 800e070:	d8c9      	bhi.n	800e006 <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 800e072:	6034      	str	r4, [r6, #0]
 800e074:	e7c7      	b.n	800e006 <xTaskCreate+0x106>
 800e076:	bf00      	nop
 800e078:	20029b34 	.word	0x20029b34
 800e07c:	20029a9c 	.word	0x20029a9c
 800e080:	20029b60 	.word	0x20029b60
 800e084:	20029b80 	.word	0x20029b80
 800e088:	20029bac 	.word	0x20029bac
 800e08c:	20029b98 	.word	0x20029b98
 800e090:	20029aa0 	.word	0x20029aa0
 800e094:	20029aa4 	.word	0x20029aa4
 800e098:	20029b44 	.word	0x20029b44
 800e09c:	20029b48 	.word	0x20029b48
 800e0a0:	20029b94 	.word	0x20029b94
 800e0a4:	e000ed04 	.word	0xe000ed04
 800e0a8:	20029aa8 	.word	0x20029aa8
 800e0ac:	20029b4c 	.word	0x20029b4c

0800e0b0 <vTaskStartScheduler>:
{
 800e0b0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800e0b2:	4b19      	ldr	r3, [pc, #100]	; (800e118 <vTaskStartScheduler+0x68>)
 800e0b4:	2400      	movs	r4, #0
 800e0b6:	2280      	movs	r2, #128	; 0x80
 800e0b8:	4918      	ldr	r1, [pc, #96]	; (800e11c <vTaskStartScheduler+0x6c>)
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	4623      	mov	r3, r4
 800e0be:	9400      	str	r4, [sp, #0]
 800e0c0:	4817      	ldr	r0, [pc, #92]	; (800e120 <vTaskStartScheduler+0x70>)
 800e0c2:	f7ff ff1d 	bl	800df00 <xTaskCreate>
	if( xReturn == pdPASS )
 800e0c6:	2801      	cmp	r0, #1
 800e0c8:	d116      	bne.n	800e0f8 <vTaskStartScheduler+0x48>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ce:	b672      	cpsid	i
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800e0de:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e2:	4b10      	ldr	r3, [pc, #64]	; (800e124 <vTaskStartScheduler+0x74>)
 800e0e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0e6:	4b10      	ldr	r3, [pc, #64]	; (800e128 <vTaskStartScheduler+0x78>)
 800e0e8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e0ea:	4b10      	ldr	r3, [pc, #64]	; (800e12c <vTaskStartScheduler+0x7c>)
 800e0ec:	601c      	str	r4, [r3, #0]
}
 800e0ee:	b002      	add	sp, #8
 800e0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e0f4:	f7ff b968 	b.w	800d3c8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d10a      	bne.n	800e112 <vTaskStartScheduler+0x62>
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	b672      	cpsid	i
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	b662      	cpsie	i
 800e110:	e7fe      	b.n	800e110 <vTaskStartScheduler+0x60>
}
 800e112:	b002      	add	sp, #8
 800e114:	bd10      	pop	{r4, pc}
 800e116:	bf00      	nop
 800e118:	20029b74 	.word	0x20029b74
 800e11c:	0802b11a 	.word	0x0802b11a
 800e120:	0800de91 	.word	0x0800de91
 800e124:	20029b78 	.word	0x20029b78
 800e128:	20029b94 	.word	0x20029b94
 800e12c:	20029bc0 	.word	0x20029bc0

0800e130 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e130:	4a02      	ldr	r2, [pc, #8]	; (800e13c <vTaskSuspendAll+0xc>)
 800e132:	6813      	ldr	r3, [r2, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20029b40 	.word	0x20029b40

0800e140 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e140:	4b01      	ldr	r3, [pc, #4]	; (800e148 <xTaskGetTickCount+0x8>)
 800e142:	6818      	ldr	r0, [r3, #0]
}
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	20029bc0 	.word	0x20029bc0

0800e14c <xTaskGetTickCountFromISR>:
{
 800e14c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e14e:	f7ff f9a1 	bl	800d494 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800e152:	4b01      	ldr	r3, [pc, #4]	; (800e158 <xTaskGetTickCountFromISR+0xc>)
 800e154:	6818      	ldr	r0, [r3, #0]
}
 800e156:	bd08      	pop	{r3, pc}
 800e158:	20029bc0 	.word	0x20029bc0

0800e15c <xTaskIncrementTick>:
{
 800e15c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e160:	4b3d      	ldr	r3, [pc, #244]	; (800e258 <xTaskIncrementTick+0xfc>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d155      	bne.n	800e214 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e168:	4b3c      	ldr	r3, [pc, #240]	; (800e25c <xTaskIncrementTick+0x100>)
 800e16a:	681c      	ldr	r4, [r3, #0]
 800e16c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e16e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e170:	b9cc      	cbnz	r4, 800e1a6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e172:	4b3b      	ldr	r3, [pc, #236]	; (800e260 <xTaskIncrementTick+0x104>)
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	b152      	cbz	r2, 800e190 <xTaskIncrementTick+0x34>
 800e17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17e:	b672      	cpsid	i
 800e180:	f383 8811 	msr	BASEPRI, r3
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	b662      	cpsie	i
 800e18e:	e7fe      	b.n	800e18e <xTaskIncrementTick+0x32>
 800e190:	4a34      	ldr	r2, [pc, #208]	; (800e264 <xTaskIncrementTick+0x108>)
 800e192:	6819      	ldr	r1, [r3, #0]
 800e194:	6810      	ldr	r0, [r2, #0]
 800e196:	6018      	str	r0, [r3, #0]
 800e198:	6011      	str	r1, [r2, #0]
 800e19a:	4a33      	ldr	r2, [pc, #204]	; (800e268 <xTaskIncrementTick+0x10c>)
 800e19c:	6813      	ldr	r3, [r2, #0]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	6013      	str	r3, [r2, #0]
 800e1a2:	f7ff fe1d 	bl	800dde0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1a6:	4d31      	ldr	r5, [pc, #196]	; (800e26c <xTaskIncrementTick+0x110>)
 800e1a8:	f04f 0b00 	mov.w	fp, #0
 800e1ac:	4f30      	ldr	r7, [pc, #192]	; (800e270 <xTaskIncrementTick+0x114>)
 800e1ae:	682b      	ldr	r3, [r5, #0]
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	d33e      	bcc.n	800e232 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800e260 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 800e1b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800e280 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1bc:	f8d8 2000 	ldr.w	r2, [r8]
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	bb72      	cbnz	r2, 800e222 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c8:	602a      	str	r2, [r5, #0]
					break;
 800e1ca:	e032      	b.n	800e232 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1cc:	f106 0a04 	add.w	sl, r6, #4
 800e1d0:	4650      	mov	r0, sl
 800e1d2:	f7fe ffde 	bl	800d192 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800e1d8:	b119      	cbz	r1, 800e1e2 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1da:	f106 0018 	add.w	r0, r6, #24
 800e1de:	f7fe ffd8 	bl	800d192 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1e2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	f8d9 3000 	ldr.w	r3, [r9]
 800e1ea:	f04f 0e14 	mov.w	lr, #20
 800e1ee:	fa02 f100 	lsl.w	r1, r2, r0
 800e1f2:	4319      	orrs	r1, r3
 800e1f4:	4b1f      	ldr	r3, [pc, #124]	; (800e274 <xTaskIncrementTick+0x118>)
 800e1f6:	f8c9 1000 	str.w	r1, [r9]
 800e1fa:	4651      	mov	r1, sl
 800e1fc:	fb0e 3000 	mla	r0, lr, r0, r3
 800e200:	f7fe ffa4 	bl	800d14c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800e208:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e20a:	4291      	cmp	r1, r2
 800e20c:	bf28      	it	cs
 800e20e:	f04f 0b01 	movcs.w	fp, #1
 800e212:	e7d3      	b.n	800e1bc <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800e214:	4a18      	ldr	r2, [pc, #96]	; (800e278 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e216:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800e21a:	6813      	ldr	r3, [r2, #0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	e011      	b.n	800e246 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e222:	f8d8 2000 	ldr.w	r2, [r8]
 800e226:	68d2      	ldr	r2, [r2, #12]
 800e228:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e22a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800e22c:	428c      	cmp	r4, r1
 800e22e:	d2cd      	bcs.n	800e1cc <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 800e230:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	4b0f      	ldr	r3, [pc, #60]	; (800e274 <xTaskIncrementTick+0x118>)
 800e236:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e238:	2214      	movs	r2, #20
 800e23a:	434a      	muls	r2, r1
 800e23c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800e23e:	2a02      	cmp	r2, #2
 800e240:	bf28      	it	cs
 800e242:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800e246:	4a0d      	ldr	r2, [pc, #52]	; (800e27c <xTaskIncrementTick+0x120>)
 800e248:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800e24a:	2a00      	cmp	r2, #0
 800e24c:	bf18      	it	ne
 800e24e:	f04f 0b01 	movne.w	fp, #1
}
 800e252:	4658      	mov	r0, fp
 800e254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e258:	20029b40 	.word	0x20029b40
 800e25c:	20029bc0 	.word	0x20029bc0
 800e260:	20029aa0 	.word	0x20029aa0
 800e264:	20029aa4 	.word	0x20029aa4
 800e268:	20029b7c 	.word	0x20029b7c
 800e26c:	20029b78 	.word	0x20029b78
 800e270:	20029a9c 	.word	0x20029a9c
 800e274:	20029aa8 	.word	0x20029aa8
 800e278:	20029b3c 	.word	0x20029b3c
 800e27c:	20029bc4 	.word	0x20029bc4
 800e280:	20029b48 	.word	0x20029b48

0800e284 <xTaskResumeAll>:
{
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800e288:	4c32      	ldr	r4, [pc, #200]	; (800e354 <xTaskResumeAll+0xd0>)
 800e28a:	6823      	ldr	r3, [r4, #0]
 800e28c:	b953      	cbnz	r3, 800e2a4 <xTaskResumeAll+0x20>
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	b672      	cpsid	i
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	b662      	cpsie	i
 800e2a2:	e7fe      	b.n	800e2a2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800e2a4:	f7fe ffee 	bl	800d284 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e2a8:	6823      	ldr	r3, [r4, #0]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2ae:	6824      	ldr	r4, [r4, #0]
 800e2b0:	b12c      	cbz	r4, 800e2be <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800e2b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e2b4:	f7ff f80c 	bl	800d2d0 <vPortExitCritical>
}
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2be:	4b26      	ldr	r3, [pc, #152]	; (800e358 <xTaskResumeAll+0xd4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f5      	beq.n	800e2b2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800e370 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800e2ca:	4f24      	ldr	r7, [pc, #144]	; (800e35c <xTaskResumeAll+0xd8>)
 800e2cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e374 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2d0:	f8d9 3000 	ldr.w	r3, [r9]
 800e2d4:	b9e3      	cbnz	r3, 800e310 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800e2d6:	b10c      	cbz	r4, 800e2dc <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800e2d8:	f7ff fd82 	bl	800dde0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e2dc:	4d20      	ldr	r5, [pc, #128]	; (800e360 <xTaskResumeAll+0xdc>)
 800e2de:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e2e0:	b144      	cbz	r4, 800e2f4 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800e2e2:	4e20      	ldr	r6, [pc, #128]	; (800e364 <xTaskResumeAll+0xe0>)
 800e2e4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e2e6:	f7ff ff39 	bl	800e15c <xTaskIncrementTick>
 800e2ea:	b100      	cbz	r0, 800e2ee <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800e2ec:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e2ee:	3c01      	subs	r4, #1
 800e2f0:	d1f9      	bne.n	800e2e6 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800e2f2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e2f4:	4b1b      	ldr	r3, [pc, #108]	; (800e364 <xTaskResumeAll+0xe0>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0da      	beq.n	800e2b2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e300:	4b19      	ldr	r3, [pc, #100]	; (800e368 <xTaskResumeAll+0xe4>)
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e30c:	2401      	movs	r4, #1
 800e30e:	e7d1      	b.n	800e2b4 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e310:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800e314:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e316:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e318:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e31a:	f104 0018 	add.w	r0, r4, #24
 800e31e:	f7fe ff38 	bl	800d192 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e322:	4630      	mov	r0, r6
 800e324:	f7fe ff35 	bl	800d192 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e328:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	2014      	movs	r0, #20
 800e32e:	fa05 f302 	lsl.w	r3, r5, r2
 800e332:	fb00 8002 	mla	r0, r0, r2, r8
 800e336:	430b      	orrs	r3, r1
 800e338:	4631      	mov	r1, r6
 800e33a:	603b      	str	r3, [r7, #0]
 800e33c:	f7fe ff06 	bl	800d14c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <xTaskResumeAll+0xe8>)
 800e342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e348:	429a      	cmp	r2, r3
 800e34a:	d3c1      	bcc.n	800e2d0 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800e34c:	4b05      	ldr	r3, [pc, #20]	; (800e364 <xTaskResumeAll+0xe0>)
 800e34e:	601d      	str	r5, [r3, #0]
 800e350:	e7be      	b.n	800e2d0 <xTaskResumeAll+0x4c>
 800e352:	bf00      	nop
 800e354:	20029b40 	.word	0x20029b40
 800e358:	20029b34 	.word	0x20029b34
 800e35c:	20029b48 	.word	0x20029b48
 800e360:	20029b3c 	.word	0x20029b3c
 800e364:	20029bc4 	.word	0x20029bc4
 800e368:	e000ed04 	.word	0xe000ed04
 800e36c:	20029a9c 	.word	0x20029a9c
 800e370:	20029b80 	.word	0x20029b80
 800e374:	20029aa8 	.word	0x20029aa8

0800e378 <vTaskDelay>:
	{
 800e378:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e37a:	b940      	cbnz	r0, 800e38e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800e37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e380:	4b0e      	ldr	r3, [pc, #56]	; (800e3bc <vTaskDelay+0x44>)
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e38e:	4b0c      	ldr	r3, [pc, #48]	; (800e3c0 <vTaskDelay+0x48>)
 800e390:	6819      	ldr	r1, [r3, #0]
 800e392:	b151      	cbz	r1, 800e3aa <vTaskDelay+0x32>
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	b672      	cpsid	i
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	b662      	cpsie	i
 800e3a8:	e7fe      	b.n	800e3a8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e3aa:	f7ff fec1 	bl	800e130 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3ae:	f7ff fd29 	bl	800de04 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e3b2:	f7ff ff67 	bl	800e284 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d0e0      	beq.n	800e37c <vTaskDelay+0x4>
 800e3ba:	bd08      	pop	{r3, pc}
 800e3bc:	e000ed04 	.word	0xe000ed04
 800e3c0:	20029b40 	.word	0x20029b40

0800e3c4 <vTaskSwitchContext>:
{
 800e3c4:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3c6:	4b24      	ldr	r3, [pc, #144]	; (800e458 <vTaskSwitchContext+0x94>)
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	4b24      	ldr	r3, [pc, #144]	; (800e45c <vTaskSwitchContext+0x98>)
 800e3cc:	b112      	cbz	r2, 800e3d4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800e3d4:	4c22      	ldr	r4, [pc, #136]	; (800e460 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800e3d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800e3e2:	d10b      	bne.n	800e3fc <vTaskSwitchContext+0x38>
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800e3ea:	d107      	bne.n	800e3fc <vTaskSwitchContext+0x38>
 800e3ec:	689a      	ldr	r2, [r3, #8]
 800e3ee:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800e3f2:	d103      	bne.n	800e3fc <vTaskSwitchContext+0x38>
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800e3fa:	d004      	beq.n	800e406 <vTaskSwitchContext+0x42>
 800e3fc:	6820      	ldr	r0, [r4, #0]
 800e3fe:	6821      	ldr	r1, [r4, #0]
 800e400:	3134      	adds	r1, #52	; 0x34
 800e402:	f7f3 f815 	bl	8001430 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e406:	4b17      	ldr	r3, [pc, #92]	; (800e464 <vTaskSwitchContext+0xa0>)
 800e408:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e40a:	fab3 f383 	clz	r3, r3
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2214      	movs	r2, #20
 800e412:	4915      	ldr	r1, [pc, #84]	; (800e468 <vTaskSwitchContext+0xa4>)
 800e414:	f1c3 031f 	rsb	r3, r3, #31
 800e418:	435a      	muls	r2, r3
 800e41a:	588d      	ldr	r5, [r1, r2]
 800e41c:	1888      	adds	r0, r1, r2
 800e41e:	b955      	cbnz	r5, 800e436 <vTaskSwitchContext+0x72>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	b672      	cpsid	i
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	b662      	cpsie	i
 800e434:	e7fe      	b.n	800e434 <vTaskSwitchContext+0x70>
 800e436:	6845      	ldr	r5, [r0, #4]
 800e438:	3208      	adds	r2, #8
 800e43a:	686d      	ldr	r5, [r5, #4]
 800e43c:	440a      	add	r2, r1
 800e43e:	4295      	cmp	r5, r2
 800e440:	6045      	str	r5, [r0, #4]
 800e442:	bf04      	itt	eq
 800e444:	686a      	ldreq	r2, [r5, #4]
 800e446:	6042      	streq	r2, [r0, #4]
 800e448:	2214      	movs	r2, #20
 800e44a:	fb02 1303 	mla	r3, r2, r3, r1
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	6023      	str	r3, [r4, #0]
 800e454:	bd38      	pop	{r3, r4, r5, pc}
 800e456:	bf00      	nop
 800e458:	20029b40 	.word	0x20029b40
 800e45c:	20029bc4 	.word	0x20029bc4
 800e460:	20029a9c 	.word	0x20029a9c
 800e464:	20029b48 	.word	0x20029b48
 800e468:	20029aa8 	.word	0x20029aa8

0800e46c <vTaskPlaceOnEventList>:
{
 800e46c:	b510      	push	{r4, lr}
 800e46e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e470:	b950      	cbnz	r0, 800e488 <vTaskPlaceOnEventList+0x1c>
 800e472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e476:	b672      	cpsid	i
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	b662      	cpsie	i
 800e486:	e7fe      	b.n	800e486 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <vTaskPlaceOnEventList+0x34>)
 800e48a:	6819      	ldr	r1, [r3, #0]
 800e48c:	3118      	adds	r1, #24
 800e48e:	f7fe fe69 	bl	800d164 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e492:	4620      	mov	r0, r4
 800e494:	2101      	movs	r1, #1
}
 800e496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e49a:	f7ff bcb3 	b.w	800de04 <prvAddCurrentTaskToDelayedList>
 800e49e:	bf00      	nop
 800e4a0:	20029a9c 	.word	0x20029a9c

0800e4a4 <xTaskRemoveFromEventList>:
{
 800e4a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e4a6:	68c3      	ldr	r3, [r0, #12]
 800e4a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e4aa:	b954      	cbnz	r4, 800e4c2 <xTaskRemoveFromEventList+0x1e>
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	b672      	cpsid	i
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	b662      	cpsie	i
 800e4c0:	e7fe      	b.n	800e4c0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e4c2:	f104 0518 	add.w	r5, r4, #24
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f7fe fe63 	bl	800d192 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4cc:	4b11      	ldr	r3, [pc, #68]	; (800e514 <xTaskRemoveFromEventList+0x70>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	b9db      	cbnz	r3, 800e50a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4d2:	1d25      	adds	r5, r4, #4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f7fe fe5c 	bl	800d192 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e4da:	490f      	ldr	r1, [pc, #60]	; (800e518 <xTaskRemoveFromEventList+0x74>)
 800e4dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e4de:	2301      	movs	r3, #1
 800e4e0:	6808      	ldr	r0, [r1, #0]
 800e4e2:	4093      	lsls	r3, r2
 800e4e4:	4303      	orrs	r3, r0
 800e4e6:	2014      	movs	r0, #20
 800e4e8:	600b      	str	r3, [r1, #0]
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	4b0b      	ldr	r3, [pc, #44]	; (800e51c <xTaskRemoveFromEventList+0x78>)
 800e4ee:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4f2:	f7fe fe2b 	bl	800d14c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4f6:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <xTaskRemoveFromEventList+0x7c>)
 800e4f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d906      	bls.n	800e510 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800e502:	2001      	movs	r0, #1
 800e504:	4b07      	ldr	r3, [pc, #28]	; (800e524 <xTaskRemoveFromEventList+0x80>)
 800e506:	6018      	str	r0, [r3, #0]
 800e508:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e50a:	4629      	mov	r1, r5
 800e50c:	4806      	ldr	r0, [pc, #24]	; (800e528 <xTaskRemoveFromEventList+0x84>)
 800e50e:	e7f0      	b.n	800e4f2 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800e510:	2000      	movs	r0, #0
}
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	20029b40 	.word	0x20029b40
 800e518:	20029b48 	.word	0x20029b48
 800e51c:	20029aa8 	.word	0x20029aa8
 800e520:	20029a9c 	.word	0x20029a9c
 800e524:	20029bc4 	.word	0x20029bc4
 800e528:	20029b80 	.word	0x20029b80

0800e52c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e52c:	4b03      	ldr	r3, [pc, #12]	; (800e53c <vTaskInternalSetTimeOutState+0x10>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e532:	4b03      	ldr	r3, [pc, #12]	; (800e540 <vTaskInternalSetTimeOutState+0x14>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6043      	str	r3, [r0, #4]
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop
 800e53c:	20029b7c 	.word	0x20029b7c
 800e540:	20029bc0 	.word	0x20029bc0

0800e544 <xTaskCheckForTimeOut>:
{
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e548:	4605      	mov	r5, r0
 800e54a:	b950      	cbnz	r0, 800e562 <xTaskCheckForTimeOut+0x1e>
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	b672      	cpsid	i
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	b662      	cpsie	i
 800e560:	e7fe      	b.n	800e560 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800e562:	b951      	cbnz	r1, 800e57a <xTaskCheckForTimeOut+0x36>
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	b672      	cpsid	i
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	b662      	cpsie	i
 800e578:	e7fe      	b.n	800e578 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800e57a:	f7fe fe83 	bl	800d284 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e57e:	4b0f      	ldr	r3, [pc, #60]	; (800e5bc <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e580:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800e582:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	1c58      	adds	r0, r3, #1
 800e588:	d00e      	beq.n	800e5a8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e58a:	480d      	ldr	r0, [pc, #52]	; (800e5c0 <xTaskCheckForTimeOut+0x7c>)
 800e58c:	682e      	ldr	r6, [r5, #0]
 800e58e:	6800      	ldr	r0, [r0, #0]
 800e590:	4286      	cmp	r6, r0
 800e592:	d001      	beq.n	800e598 <xTaskCheckForTimeOut+0x54>
 800e594:	428a      	cmp	r2, r1
 800e596:	d20e      	bcs.n	800e5b6 <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e598:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d209      	bcs.n	800e5b2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800e59e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e5a0:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e5a2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e5a4:	f7ff ffc2 	bl	800e52c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e5a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e5aa:	f7fe fe91 	bl	800d2d0 <vPortExitCritical>
}
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e5b6:	2401      	movs	r4, #1
 800e5b8:	e7f7      	b.n	800e5aa <xTaskCheckForTimeOut+0x66>
 800e5ba:	bf00      	nop
 800e5bc:	20029bc0 	.word	0x20029bc0
 800e5c0:	20029b7c 	.word	0x20029b7c

0800e5c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	4b01      	ldr	r3, [pc, #4]	; (800e5cc <vTaskMissedYield+0x8>)
 800e5c8:	601a      	str	r2, [r3, #0]
 800e5ca:	4770      	bx	lr
 800e5cc:	20029bc4 	.word	0x20029bc4

0800e5d0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e5d0:	4b01      	ldr	r3, [pc, #4]	; (800e5d8 <xTaskGetCurrentTaskHandle+0x8>)
 800e5d2:	6818      	ldr	r0, [r3, #0]
	}
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	20029a9c 	.word	0x20029a9c

0800e5dc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e5dc:	4b05      	ldr	r3, [pc, #20]	; (800e5f4 <xTaskGetSchedulerState+0x18>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	b133      	cbz	r3, 800e5f0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5e2:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <xTaskGetSchedulerState+0x1c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800e5e8:	bf0c      	ite	eq
 800e5ea:	2002      	moveq	r0, #2
 800e5ec:	2000      	movne	r0, #0
 800e5ee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5f0:	2001      	movs	r0, #1
	}
 800e5f2:	4770      	bx	lr
 800e5f4:	20029b94 	.word	0x20029b94
 800e5f8:	20029b40 	.word	0x20029b40

0800e5fc <xTaskPriorityInherit>:
	{
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800e600:	4604      	mov	r4, r0
 800e602:	2800      	cmp	r0, #0
 800e604:	d041      	beq.n	800e68a <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e606:	4a24      	ldr	r2, [pc, #144]	; (800e698 <xTaskPriorityInherit+0x9c>)
 800e608:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e60a:	6811      	ldr	r1, [r2, #0]
 800e60c:	4617      	mov	r7, r2
 800e60e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e610:	428b      	cmp	r3, r1
 800e612:	d231      	bcs.n	800e678 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e614:	6982      	ldr	r2, [r0, #24]
 800e616:	2a00      	cmp	r2, #0
 800e618:	db04      	blt.n	800e624 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e61e:	f1c2 0207 	rsb	r2, r2, #7
 800e622:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e624:	4d1d      	ldr	r5, [pc, #116]	; (800e69c <xTaskPriorityInherit+0xa0>)
 800e626:	2614      	movs	r6, #20
 800e628:	6962      	ldr	r2, [r4, #20]
 800e62a:	fb06 5303 	mla	r3, r6, r3, r5
 800e62e:	429a      	cmp	r2, r3
 800e630:	d12d      	bne.n	800e68e <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e632:	f104 0804 	add.w	r8, r4, #4
 800e636:	4640      	mov	r0, r8
 800e638:	f7fe fdab 	bl	800d192 <uxListRemove>
 800e63c:	4b18      	ldr	r3, [pc, #96]	; (800e6a0 <xTaskPriorityInherit+0xa4>)
 800e63e:	b948      	cbnz	r0, 800e654 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e640:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e642:	4346      	muls	r6, r0
 800e644:	59aa      	ldr	r2, [r5, r6]
 800e646:	b92a      	cbnz	r2, 800e654 <xTaskPriorityInherit+0x58>
 800e648:	2101      	movs	r1, #1
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	4081      	lsls	r1, r0
 800e64e:	ea22 0201 	bic.w	r2, r2, r1
 800e652:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e654:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e656:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e658:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e65a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e65c:	2401      	movs	r4, #1
 800e65e:	fa04 f002 	lsl.w	r0, r4, r2
 800e662:	4308      	orrs	r0, r1
 800e664:	4641      	mov	r1, r8
 800e666:	6018      	str	r0, [r3, #0]
 800e668:	2014      	movs	r0, #20
 800e66a:	fb00 5002 	mla	r0, r0, r2, r5
 800e66e:	f7fe fd6d 	bl	800d14c <vListInsertEnd>
				xReturn = pdTRUE;
 800e672:	2001      	movs	r0, #1
	}
 800e674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e678:	6813      	ldr	r3, [r2, #0]
 800e67a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e67c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e67e:	42a0      	cmp	r0, r4
 800e680:	bf2c      	ite	cs
 800e682:	2000      	movcs	r0, #0
 800e684:	2001      	movcc	r0, #1
 800e686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 800e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e692:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e694:	e7ed      	b.n	800e672 <xTaskPriorityInherit+0x76>
 800e696:	bf00      	nop
 800e698:	20029a9c 	.word	0x20029a9c
 800e69c:	20029aa8 	.word	0x20029aa8
 800e6a0:	20029b48 	.word	0x20029b48

0800e6a4 <xTaskPriorityDisinherit>:
	{
 800e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	b908      	cbnz	r0, 800e6ae <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e6ae:	4b24      	ldr	r3, [pc, #144]	; (800e740 <xTaskPriorityDisinherit+0x9c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	4298      	cmp	r0, r3
 800e6b4:	d00a      	beq.n	800e6cc <xTaskPriorityDisinherit+0x28>
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	b672      	cpsid	i
 800e6bc:	f383 8811 	msr	BASEPRI, r3
 800e6c0:	f3bf 8f6f 	isb	sy
 800e6c4:	f3bf 8f4f 	dsb	sy
 800e6c8:	b662      	cpsie	i
 800e6ca:	e7fe      	b.n	800e6ca <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800e6ce:	b953      	cbnz	r3, 800e6e6 <xTaskPriorityDisinherit+0x42>
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	b672      	cpsid	i
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	b662      	cpsie	i
 800e6e4:	e7fe      	b.n	800e6e4 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e6e8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800e6ec:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6ee:	4291      	cmp	r1, r2
 800e6f0:	d0db      	beq.n	800e6aa <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1d9      	bne.n	800e6aa <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6f6:	1d05      	adds	r5, r0, #4
 800e6f8:	4e12      	ldr	r6, [pc, #72]	; (800e744 <xTaskPriorityDisinherit+0xa0>)
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f7fe fd49 	bl	800d192 <uxListRemove>
 800e700:	4a11      	ldr	r2, [pc, #68]	; (800e748 <xTaskPriorityDisinherit+0xa4>)
 800e702:	b950      	cbnz	r0, 800e71a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e704:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e706:	2114      	movs	r1, #20
 800e708:	4379      	muls	r1, r7
 800e70a:	5873      	ldr	r3, [r6, r1]
 800e70c:	b92b      	cbnz	r3, 800e71a <xTaskPriorityDisinherit+0x76>
 800e70e:	2001      	movs	r0, #1
 800e710:	6813      	ldr	r3, [r2, #0]
 800e712:	40b8      	lsls	r0, r7
 800e714:	ea23 0300 	bic.w	r3, r3, r0
 800e718:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e71a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e71c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e720:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e722:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e724:	2401      	movs	r4, #1
 800e726:	6811      	ldr	r1, [r2, #0]
 800e728:	fa04 f003 	lsl.w	r0, r4, r3
 800e72c:	4308      	orrs	r0, r1
 800e72e:	4629      	mov	r1, r5
 800e730:	6010      	str	r0, [r2, #0]
 800e732:	2014      	movs	r0, #20
 800e734:	fb00 6003 	mla	r0, r0, r3, r6
 800e738:	f7fe fd08 	bl	800d14c <vListInsertEnd>
					xReturn = pdTRUE;
 800e73c:	4620      	mov	r0, r4
	}
 800e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e740:	20029a9c 	.word	0x20029a9c
 800e744:	20029aa8 	.word	0x20029aa8
 800e748:	20029b48 	.word	0x20029b48

0800e74c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e74e:	4604      	mov	r4, r0
 800e750:	2800      	cmp	r0, #0
 800e752:	d04f      	beq.n	800e7f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 800e754:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800e756:	b952      	cbnz	r2, 800e76e <vTaskPriorityDisinheritAfterTimeout+0x22>
 800e758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75c:	b672      	cpsid	i
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	b662      	cpsie	i
 800e76c:	e7fe      	b.n	800e76c <vTaskPriorityDisinheritAfterTimeout+0x20>
 800e76e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e770:	4299      	cmp	r1, r3
 800e772:	bf38      	it	cc
 800e774:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e778:	428b      	cmp	r3, r1
 800e77a:	d03b      	beq.n	800e7f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e77c:	2a01      	cmp	r2, #1
 800e77e:	d139      	bne.n	800e7f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 800e780:	4a1d      	ldr	r2, [pc, #116]	; (800e7f8 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800e782:	6812      	ldr	r2, [r2, #0]
 800e784:	4290      	cmp	r0, r2
 800e786:	d10a      	bne.n	800e79e <vTaskPriorityDisinheritAfterTimeout+0x52>
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	b672      	cpsid	i
 800e78e:	f383 8811 	msr	BASEPRI, r3
 800e792:	f3bf 8f6f 	isb	sy
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	b662      	cpsie	i
 800e79c:	e7fe      	b.n	800e79c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e79e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7a0:	2614      	movs	r6, #20
 800e7a2:	4d16      	ldr	r5, [pc, #88]	; (800e7fc <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7a4:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800e7a6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7a8:	fb06 5303 	mla	r3, r6, r3, r5
 800e7ac:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ae:	bfa4      	itt	ge
 800e7b0:	f1c1 0107 	rsbge	r1, r1, #7
 800e7b4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d11c      	bne.n	800e7f4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ba:	1d07      	adds	r7, r0, #4
 800e7bc:	4638      	mov	r0, r7
 800e7be:	f7fe fce8 	bl	800d192 <uxListRemove>
 800e7c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7c4:	4c0e      	ldr	r4, [pc, #56]	; (800e800 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800e7c6:	b940      	cbnz	r0, 800e7da <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e7c8:	4356      	muls	r6, r2
 800e7ca:	59ab      	ldr	r3, [r5, r6]
 800e7cc:	b92b      	cbnz	r3, 800e7da <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	4091      	lsls	r1, r2
 800e7d4:	ea23 0301 	bic.w	r3, r3, r1
 800e7d8:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800e7da:	2301      	movs	r3, #1
 800e7dc:	6821      	ldr	r1, [r4, #0]
 800e7de:	2014      	movs	r0, #20
 800e7e0:	4093      	lsls	r3, r2
 800e7e2:	fb00 5002 	mla	r0, r0, r2, r5
 800e7e6:	430b      	orrs	r3, r1
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	6023      	str	r3, [r4, #0]
	}
 800e7ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800e7f0:	f7fe bcac 	b.w	800d14c <vListInsertEnd>
 800e7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20029a9c 	.word	0x20029a9c
 800e7fc:	20029aa8 	.word	0x20029aa8
 800e800:	20029b48 	.word	0x20029b48

0800e804 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e804:	4b04      	ldr	r3, [pc, #16]	; (800e818 <pvTaskIncrementMutexHeldCount+0x14>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	b11a      	cbz	r2, 800e812 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e80a:	6819      	ldr	r1, [r3, #0]
 800e80c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800e80e:	3201      	adds	r2, #1
 800e810:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800e812:	6818      	ldr	r0, [r3, #0]
	}
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	20029a9c 	.word	0x20029a9c

0800e81c <GUI_X_GetTime>:
1 ms.
*/

int GUI_X_GetTime(void)
{
  return ((int) osKernelSysTick());
 800e81c:	f7fe baa0 	b.w	800cd60 <osKernelSysTick>

0800e820 <GUI_X_Delay>:
}

void GUI_X_Delay(int ms)
{
  osDelay( ms );
 800e820:	f7fe babf 	b.w	800cda2 <osDelay>

0800e824 <GUI_X_Init>:
 800e824:	4770      	bx	lr
	...

0800e828 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 800e828:	b513      	push	{r0, r1, r4, lr}
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 800e82a:	2400      	movs	r4, #0
 800e82c:	a802      	add	r0, sp, #8
 800e82e:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800e832:	f7fe fabe 	bl	800cdb2 <osMutexCreate>
 800e836:	4b06      	ldr	r3, [pc, #24]	; (800e850 <GUI_X_InitOS+0x28>)
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800e838:	2101      	movs	r1, #1
  osMutex = osMutexCreate(osMutex(MUTEX));
 800e83a:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(SEM);
 800e83c:	a802      	add	r0, sp, #8
 800e83e:	f840 4d04 	str.w	r4, [r0, #-4]!
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800e842:	f7fe fadf 	bl	800ce04 <osSemaphoreCreate>
 800e846:	4b03      	ldr	r3, [pc, #12]	; (800e854 <GUI_X_InitOS+0x2c>)
 800e848:	6018      	str	r0, [r3, #0]
}
 800e84a:	b002      	add	sp, #8
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop
 800e850:	20029bc8 	.word	0x20029bc8
 800e854:	20029bcc 	.word	0x20029bcc

0800e858 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
  osMutexRelease(osMutex);
 800e858:	4b01      	ldr	r3, [pc, #4]	; (800e860 <GUI_X_Unlock+0x8>)
 800e85a:	6818      	ldr	r0, [r3, #0]
 800e85c:	f7fe bb0c 	b.w	800ce78 <osMutexRelease>
 800e860:	20029bc8 	.word	0x20029bc8

0800e864 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
  osMutexWait(osMutex , osWaitForever) ;
 800e864:	4b02      	ldr	r3, [pc, #8]	; (800e870 <GUI_X_Lock+0xc>)
 800e866:	f04f 31ff 	mov.w	r1, #4294967295
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	f7fe baa4 	b.w	800cdb8 <osMutexWait>
 800e870:	20029bc8 	.word	0x20029bc8

0800e874 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
  return ((U32) osThreadGetId());
 800e874:	f7fe ba93 	b.w	800cd9e <osThreadGetId>

0800e878 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 800e878:	2000      	movs	r0, #0
 800e87a:	4770      	bx	lr

0800e87c <USBH_CDC_InterfaceDeInit>:
{
 800e87c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e87e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800e882:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e884:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800e886:	7821      	ldrb	r1, [r4, #0]
 800e888:	b139      	cbz	r1, 800e89a <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e88a:	f000 fed3 	bl	800f634 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800e88e:	7821      	ldrb	r1, [r4, #0]
 800e890:	4628      	mov	r0, r5
 800e892:	f000 feeb 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e896:	2300      	movs	r3, #0
 800e898:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800e89a:	7b21      	ldrb	r1, [r4, #12]
 800e89c:	b141      	cbz	r1, 800e8b0 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 fec8 	bl	800f634 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800e8a4:	7b21      	ldrb	r1, [r4, #12]
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f000 fee0 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 800e8b0:	7b61      	ldrb	r1, [r4, #13]
 800e8b2:	b141      	cbz	r1, 800e8c6 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	f000 febd 	bl	800f634 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800e8ba:	7b61      	ldrb	r1, [r4, #13]
 800e8bc:	4628      	mov	r0, r5
 800e8be:	f000 fed5 	bl	800f66c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800e8c6:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800e8ca:	69d8      	ldr	r0, [r3, #28]
 800e8cc:	b128      	cbz	r0, 800e8da <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800e8ce:	f013 fa05 	bl	8021cdc <free>
    phost->pActiveClass->pData = 0U;
 800e8d2:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	61da      	str	r2, [r3, #28]
}
 800e8da:	2000      	movs	r0, #0
 800e8dc:	bd38      	pop	{r3, r4, r5, pc}

0800e8de <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost,
 800e8de:	2202      	movs	r2, #2
 800e8e0:	2301      	movs	r3, #1
{
 800e8e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 800e8e4:	4611      	mov	r1, r2
{
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800e8ea:	f000 f9e5 	bl	800ecb8 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800e8ee:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 800e8f0:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 800e8f2:	d102      	bne.n	800e8fa <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800e8f4:	2002      	movs	r0, #2
}
 800e8f6:	b005      	add	sp, #20
 800e8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f000 f9d2 	bl	800eca6 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800e902:	2050      	movs	r0, #80	; 0x50
 800e904:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 800e908:	f013 f9e0 	bl	8021ccc <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e90c:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800e90e:	4604      	mov	r4, r0
 800e910:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e912:	fb03 5606 	mla	r6, r3, r6, r5
 800e916:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800e91a:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e91c:	bf44      	itt	mi
 800e91e:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e920:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e924:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e926:	bf48      	it	mi
 800e928:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e92a:	4628      	mov	r0, r5
 800e92c:	f000 fe87 	bl	800f63e <USBH_AllocPipe>
 800e930:	4601      	mov	r1, r0
 800e932:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 800e934:	8960      	ldrh	r0, [r4, #10]
 800e936:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800e93a:	9002      	str	r0, [sp, #8]
 800e93c:	2003      	movs	r0, #3
 800e93e:	7862      	ldrb	r2, [r4, #1]
 800e940:	9001      	str	r0, [sp, #4]
 800e942:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800e946:	9000      	str	r0, [sp, #0]
 800e948:	4628      	mov	r0, r5
 800e94a:	f000 fe64 	bl	800f616 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e94e:	2200      	movs	r2, #0
 800e950:	7821      	ldrb	r1, [r4, #0]
 800e952:	4628      	mov	r0, r5
 800e954:	f7f5 fc23 	bl	800419e <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800e958:	2300      	movs	r3, #0
 800e95a:	210a      	movs	r1, #10
 800e95c:	4628      	mov	r0, r5
 800e95e:	461a      	mov	r2, r3
 800e960:	f000 f9aa 	bl	800ecb8 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800e964:	28ff      	cmp	r0, #255	; 0xff
 800e966:	d0c5      	beq.n	800e8f4 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e968:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 800e96a:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e96c:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e970:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e974:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e978:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e97c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e980:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e984:	bf0d      	iteet	eq
 800e986:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e988:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e98a:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e98c:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e98e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e992:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e996:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e998:	bf08      	it	eq
 800e99a:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e99c:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e99e:	bf1a      	itte	ne
 800e9a0:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e9a2:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e9a4:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e9a6:	f000 fe4a 	bl	800f63e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e9aa:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e9ac:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f000 fe45 	bl	800f63e <USBH_AllocPipe>
 800e9b4:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800e9b6:	8b20      	ldrh	r0, [r4, #24]
 800e9b8:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800e9bc:	9002      	str	r0, [sp, #8]
 800e9be:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800e9c2:	7ba2      	ldrb	r2, [r4, #14]
 800e9c4:	7b61      	ldrb	r1, [r4, #13]
 800e9c6:	9601      	str	r6, [sp, #4]
 800e9c8:	9000      	str	r0, [sp, #0]
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f000 fe23 	bl	800f616 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 800e9d0:	8b60      	ldrh	r0, [r4, #26]
 800e9d2:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 800e9d4:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800e9d6:	9002      	str	r0, [sp, #8]
 800e9d8:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800e9dc:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800e9e0:	7be2      	ldrb	r2, [r4, #15]
 800e9e2:	7b21      	ldrb	r1, [r4, #12]
 800e9e4:	9000      	str	r0, [sp, #0]
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 fe15 	bl	800f616 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	7b61      	ldrb	r1, [r4, #13]
 800e9f0:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 800e9f2:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e9f6:	f7f5 fbd2 	bl	800419e <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	7b21      	ldrb	r1, [r4, #12]
 800e9fe:	4628      	mov	r0, r5
 800ea00:	f7f5 fbcd 	bl	800419e <USBH_LL_SetToggle>
      status = USBH_OK;
 800ea04:	4630      	mov	r0, r6
 800ea06:	e776      	b.n	800e8f6 <USBH_CDC_InterfaceInit+0x18>

0800ea08 <USBH_CDC_ClassRequest>:
{
 800ea08:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ea0a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea0e:	2207      	movs	r2, #7
{
 800ea10:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ea12:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea14:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea16:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea18:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea1a:	2321      	movs	r3, #33	; 0x21

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea1c:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea1e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea20:	2300      	movs	r3, #0
 800ea22:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ea24:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea26:	f000 fb6a 	bl	800f0fe <USBH_CtlReq>
  if(status == USBH_OK)
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b920      	cbnz	r0, 800ea38 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ea2e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800ea32:	2102      	movs	r1, #2
 800ea34:	4620      	mov	r0, r4
 800ea36:	4798      	blx	r3
}
 800ea38:	4628      	mov	r0, r5
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}

0800ea3c <USBH_CDC_TransmitCallback>:
 800ea3c:	4770      	bx	lr

0800ea3e <USBH_CDC_ReceiveCallback>:
 800ea3e:	4770      	bx	lr

0800ea40 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ea40:	4770      	bx	lr

0800ea42 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ea42:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800ea46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ea48:	69dc      	ldr	r4, [r3, #28]
{
 800ea4a:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800ea4c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800ea50:	2b04      	cmp	r3, #4
 800ea52:	d817      	bhi.n	800ea84 <USBH_CDC_Process+0x42>
 800ea54:	e8df f003 	tbb	[pc, r3]
 800ea58:	42180603 	.word	0x42180603
 800ea5c:	ba          	.byte	0xba
 800ea5d:	00          	.byte	0x00
    status = USBH_OK;
 800ea5e:	2000      	movs	r0, #0
}
 800ea60:	b003      	add	sp, #12
 800ea62:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ea64:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ea66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea68:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ea6a:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ea6c:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea6e:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ea70:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea72:	2300      	movs	r3, #0
 800ea74:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ea76:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea78:	f000 fb41 	bl	800f0fe <USBH_CtlReq>
    if(req_status == USBH_OK)
 800ea7c:	bb50      	cbnz	r0, 800ead4 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ea7e:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 800ea80:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea84:	2001      	movs	r0, #1
 800ea86:	e7eb      	b.n	800ea60 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea88:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea8a:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea8c:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea90:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea92:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea94:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea96:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ea9c:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea9e:	f000 fb2e 	bl	800f0fe <USBH_CtlReq>
    if(req_status == USBH_OK)
 800eaa2:	b9b8      	cbnz	r0, 800ead4 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eaa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800eaa6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaa8:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE;
 800eaac:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800eab6:	4291      	cmp	r1, r2
 800eab8:	d1e4      	bne.n	800ea84 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eaba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eabe:	795a      	ldrb	r2, [r3, #5]
 800eac0:	4291      	cmp	r1, r2
 800eac2:	d1df      	bne.n	800ea84 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eac4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d1db      	bne.n	800ea84 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 800eacc:	4628      	mov	r0, r5
 800eace:	f7ff ffb7 	bl	800ea40 <USBH_CDC_LineCodingChanged>
 800ead2:	e7d7      	b.n	800ea84 <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 800ead4:	2801      	cmp	r0, #1
 800ead6:	d0d5      	beq.n	800ea84 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 800ead8:	2304      	movs	r3, #4
 800eada:	e7d1      	b.n	800ea80 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 800eadc:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800eae0:	2901      	cmp	r1, #1
 800eae2:	d02b      	beq.n	800eb3c <USBH_CDC_Process+0xfa>
 800eae4:	2902      	cmp	r1, #2
 800eae6:	d038      	beq.n	800eb5a <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800eae8:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800eaec:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800eaee:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800eaf2:	2b03      	cmp	r3, #3
 800eaf4:	d059      	beq.n	800ebaa <USBH_CDC_Process+0x168>
 800eaf6:	2b04      	cmp	r3, #4
 800eaf8:	d1c4      	bne.n	800ea84 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800eafa:	7b21      	ldrb	r1, [r4, #12]
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7f5 fb3d 	bl	800417c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800eb02:	2801      	cmp	r0, #1
 800eb04:	d1be      	bne.n	800ea84 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800eb06:	7b21      	ldrb	r1, [r4, #12]
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7f5 faf3 	bl	80040f4 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800eb0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb10:	4298      	cmp	r0, r3
 800eb12:	d054      	beq.n	800ebbe <USBH_CDC_Process+0x17c>
 800eb14:	8b62      	ldrh	r2, [r4, #26]
 800eb16:	4290      	cmp	r0, r2
 800eb18:	d951      	bls.n	800ebbe <USBH_CDC_Process+0x17c>
        CDC_Handle->RxDataLength -= length ;
 800eb1a:	1a1b      	subs	r3, r3, r0
 800eb1c:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800eb1e:	6a23      	ldr	r3, [r4, #32]
 800eb20:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eb22:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 800eb24:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eb26:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eb2a:	2104      	movs	r1, #4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eb32:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb36:	f7fe f9a5 	bl	800ce84 <osMessagePut>
 800eb3a:	e7a3      	b.n	800ea84 <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb3e:	8b22      	ldrh	r2, [r4, #24]
 800eb40:	7b63      	ldrb	r3, [r4, #13]
 800eb42:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800eb44:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 800eb46:	69e1      	ldr	r1, [r4, #28]
 800eb48:	bf98      	it	ls
 800eb4a:	b282      	uxthls	r2, r0
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	f000 fd3a 	bl	800f5c6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800eb52:	2302      	movs	r3, #2
 800eb54:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800eb58:	e7c6      	b.n	800eae8 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800eb5a:	7b61      	ldrb	r1, [r4, #13]
 800eb5c:	f7f5 fb0e 	bl	800417c <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 800eb60:	2801      	cmp	r0, #1
 800eb62:	d11f      	bne.n	800eba4 <USBH_CDC_Process+0x162>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb66:	8b22      	ldrh	r2, [r4, #24]
 800eb68:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800eb6a:	bf89      	itett	hi
 800eb6c:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800eb6e:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800eb70:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800eb72:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 800eb74:	bf92      	itee	ls
 800eb76:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800eb78:	189b      	addhi	r3, r3, r2
 800eb7a:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 800eb7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb7e:	b11b      	cbz	r3, 800eb88 <USBH_CDC_Process+0x146>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eb80:	2301      	movs	r3, #1
 800eb82:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800eb86:	e004      	b.n	800eb92 <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800eb88:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7ff ff55 	bl	800ea3c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eb92:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb94:	2200      	movs	r2, #0
 800eb96:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eb9a:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb9e:	f7fe f971 	bl	800ce84 <osMessagePut>
 800eba2:	e7a1      	b.n	800eae8 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 800eba4:	2802      	cmp	r0, #2
 800eba6:	d19f      	bne.n	800eae8 <USBH_CDC_Process+0xa6>
 800eba8:	e7ea      	b.n	800eb80 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 800ebaa:	7b23      	ldrb	r3, [r4, #12]
 800ebac:	4628      	mov	r0, r5
 800ebae:	8b62      	ldrh	r2, [r4, #26]
 800ebb0:	6a21      	ldr	r1, [r4, #32]
 800ebb2:	f000 fd20 	bl	800f5f6 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ebb6:	2304      	movs	r3, #4
 800ebb8:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800ebbc:	e762      	b.n	800ea84 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800ebbe:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 800ebc0:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 800ebc2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800ebc6:	f7ff ff3a 	bl	800ea3e <USBH_CDC_ReceiveCallback>
 800ebca:	e7ae      	b.n	800eb2a <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800ebcc:	2100      	movs	r1, #0
 800ebce:	f000 fcb4 	bl	800f53a <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f47f af56 	bne.w	800ea84 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800ebd8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800ebdc:	e752      	b.n	800ea84 <USBH_CDC_Process+0x42>

0800ebde <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ebde:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800ebe2:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d1fb      	bne.n	800ebe8 <DeInitStateMachine+0xa>
 800ebf0:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800ebf4:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ebfe:	4291      	cmp	r1, r2
 800ec00:	d1fb      	bne.n	800ebfa <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800ec02:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ec04:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800ec06:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800ec08:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800ec0a:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800ec0c:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800ec10:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ec12:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800ec14:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ec16:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800ec1a:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 800ec1e:	2000      	movs	r0, #0
 800ec20:	4770      	bx	lr
	...

0800ec24 <USBH_Init>:
{
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	460c      	mov	r4, r1
 800ec28:	b088      	sub	sp, #32
  if(phost == NULL)
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	b348      	cbz	r0, 800ec82 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 800ec2e:	2300      	movs	r3, #0
  phost->id = id;
 800ec30:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800ec34:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800ec38:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800ec3c:	f7ff ffcf 	bl	800ebde <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800ec40:	b10c      	cbz	r4, 800ec46 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 800ec42:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ec46:	4c10      	ldr	r4, [pc, #64]	; (800ec88 <USBH_Init+0x64>)
 800ec48:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ec4a:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ec4c:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ec50:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ec52:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe f90f 	bl	800ce7c <osMessageCreate>
 800ec5e:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ec62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ec66:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ec68:	4629      	mov	r1, r5
 800ec6a:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ec6c:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ec6e:	f7fe f87e 	bl	800cd6e <osThreadCreate>
 800ec72:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7f5 f9dc 	bl	8004034 <USBH_LL_Init>
  return USBH_OK;
 800ec7c:	2000      	movs	r0, #0
}
 800ec7e:	b008      	add	sp, #32
 800ec80:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800ec82:	2002      	movs	r0, #2
 800ec84:	e7fb      	b.n	800ec7e <USBH_Init+0x5a>
 800ec86:	bf00      	nop
 800ec88:	08023a4c 	.word	0x08023a4c

0800ec8c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800ec8c:	b149      	cbz	r1, 800eca2 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ec8e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800ec92:	b933      	cbnz	r3, 800eca2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ec94:	2201      	movs	r2, #1
 800ec96:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800ec9a:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 800ec9e:	4618      	mov	r0, r3
 800eca0:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eca2:	2002      	movs	r0, #2
  }

  return status;
}
 800eca4:	4770      	bx	lr

0800eca6 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800eca6:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800ecaa:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800ecac:	bf86      	itte	hi
 800ecae:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800ecb2:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ecb4:	2002      	movls	r0, #2
  }
  return status;
}
 800ecb6:	4770      	bx	lr

0800ecb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
 800ecba:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ecbc:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800ecc0:	b2e5      	uxtb	r5, r4
 800ecc2:	428e      	cmp	r6, r1
 800ecc4:	d001      	beq.n	800ecca <USBH_FindInterface+0x12>
 800ecc6:	29ff      	cmp	r1, #255	; 0xff
 800ecc8:	d10b      	bne.n	800ece2 <USBH_FindInterface+0x2a>
 800ecca:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 800ecce:	4296      	cmp	r6, r2
 800ecd0:	d001      	beq.n	800ecd6 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ecd2:	2aff      	cmp	r2, #255	; 0xff
 800ecd4:	d105      	bne.n	800ece2 <USBH_FindInterface+0x2a>
 800ecd6:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800ecda:	429e      	cmp	r6, r3
 800ecdc:	d006      	beq.n	800ecec <USBH_FindInterface+0x34>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ecde:	2bff      	cmp	r3, #255	; 0xff
 800ece0:	d004      	beq.n	800ecec <USBH_FindInterface+0x34>
 800ece2:	3401      	adds	r4, #1
 800ece4:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ece6:	2c02      	cmp	r4, #2
 800ece8:	d1e8      	bne.n	800ecbc <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800ecea:	25ff      	movs	r5, #255	; 0xff
}
 800ecec:	4628      	mov	r0, r5
 800ecee:	bd70      	pop	{r4, r5, r6, pc}

0800ecf0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800ecf0:	b510      	push	{r4, lr}
 800ecf2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ecf4:	f7f5 f9c6 	bl	8004084 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7f5 fa42 	bl	8004184 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800ed00:	2000      	movs	r0, #0
 800ed02:	bd10      	pop	{r4, pc}

0800ed04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ed04:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ed06:	2302      	movs	r3, #2
{
 800ed08:	b087      	sub	sp, #28
 800ed0a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ed0c:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800ed10:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800ed14:	b933      	cbnz	r3, 800ed24 <USBH_Process+0x20>
 800ed16:	7802      	ldrb	r2, [r0, #0]
 800ed18:	b122      	cbz	r2, 800ed24 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800ed1a:	7802      	ldrb	r2, [r0, #0]
 800ed1c:	2a03      	cmp	r2, #3
 800ed1e:	d001      	beq.n	800ed24 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 800ed20:	2203      	movs	r2, #3
 800ed22:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 800ed24:	7822      	ldrb	r2, [r4, #0]
 800ed26:	2a0b      	cmp	r2, #11
 800ed28:	d820      	bhi.n	800ed6c <USBH_Process+0x68>
 800ed2a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ed2e:	000c      	.short	0x000c
 800ed30:	00270022 	.word	0x00270022
 800ed34:	001f0164 	.word	0x001f0164
 800ed38:	0149005b 	.word	0x0149005b
 800ed3c:	010f0104 	.word	0x010f0104
 800ed40:	0128011c 	.word	0x0128011c
 800ed44:	015b      	.short	0x015b
    if (phost->device.is_connected)
 800ed46:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800ed4a:	b17b      	cbz	r3, 800ed6c <USBH_Process+0x68>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ed4c:	2501      	movs	r5, #1
      USBH_Delay(200U);
 800ed4e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ed50:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 800ed52:	f7f5 fa33 	bl	80041bc <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800ed56:	4620      	mov	r0, r4
 800ed58:	f7f5 f9be 	bl	80040d8 <USBH_LL_ResetPort>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	4629      	mov	r1, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ed60:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed64:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800ed68:	f7fe f88c 	bl	800ce84 <osMessagePut>
}
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	b007      	add	sp, #28
 800ed70:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d1fa      	bne.n	800ed6c <USBH_Process+0x68>
      phost->gState = HOST_DEV_ATTACHED;
 800ed76:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 800ed78:	7023      	strb	r3, [r4, #0]
 800ed7a:	e7f7      	b.n	800ed6c <USBH_Process+0x68>
    USBH_Delay(100U);
 800ed7c:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 800ed7e:	2500      	movs	r5, #0
    USBH_Delay(100U);
 800ed80:	f7f5 fa1c 	bl	80041bc <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7f5 f999 	bl	80040bc <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800ed8a:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ed8c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ed90:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 800ed92:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 fc52 	bl	800f63e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800ed9a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ed9c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 fc4d 	bl	800f63e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800eda4:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800eda6:	4601      	mov	r1, r0
 800eda8:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800edaa:	9202      	str	r2, [sp, #8]
 800edac:	4620      	mov	r0, r4
 800edae:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800edb2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800edb6:	9200      	str	r2, [sp, #0]
 800edb8:	2280      	movs	r2, #128	; 0x80
 800edba:	9501      	str	r5, [sp, #4]
 800edbc:	f000 fc2b 	bl	800f616 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800edc0:	79a2      	ldrb	r2, [r4, #6]
 800edc2:	7961      	ldrb	r1, [r4, #5]
 800edc4:	4620      	mov	r0, r4
 800edc6:	9202      	str	r2, [sp, #8]
 800edc8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800edcc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800edd0:	9200      	str	r2, [sp, #0]
 800edd2:	462a      	mov	r2, r5
 800edd4:	9501      	str	r5, [sp, #4]
 800edd6:	f000 fc1e 	bl	800f616 <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800edda:	2101      	movs	r1, #1
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eddc:	462a      	mov	r2, r5
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800edde:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800ede2:	e7bf      	b.n	800ed64 <USBH_Process+0x60>
  switch (phost->EnumState)
 800ede4:	7863      	ldrb	r3, [r4, #1]
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	d8c0      	bhi.n	800ed6c <USBH_Process+0x68>
 800edea:	e8df f003 	tbb	[pc, r3]
 800edee:	2a04      	.short	0x2a04
 800edf0:	584e4533 	.word	0x584e4533
 800edf4:	8373      	.short	0x8373
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800edf6:	2108      	movs	r1, #8
 800edf8:	4620      	mov	r0, r4
 800edfa:	f000 fa77 	bl	800f2ec <USBH_Get_DevDesc>
 800edfe:	4605      	mov	r5, r0
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d1b3      	bne.n	800ed6c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ee04:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee06:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 800ee0a:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ee0c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800ee0e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee12:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800ee14:	9202      	str	r2, [sp, #8]
 800ee16:	4620      	mov	r0, r4
 800ee18:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800ee1c:	9501      	str	r5, [sp, #4]
 800ee1e:	9200      	str	r2, [sp, #0]
 800ee20:	2280      	movs	r2, #128	; 0x80
 800ee22:	f000 fbf8 	bl	800f616 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800ee26:	79a2      	ldrb	r2, [r4, #6]
 800ee28:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	9202      	str	r2, [sp, #8]
 800ee30:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800ee34:	7961      	ldrb	r1, [r4, #5]
 800ee36:	9200      	str	r2, [sp, #0]
 800ee38:	462a      	mov	r2, r5
 800ee3a:	9501      	str	r5, [sp, #4]
 800ee3c:	f000 fbeb 	bl	800f616 <USBH_OpenPipe>
 800ee40:	e794      	b.n	800ed6c <USBH_Process+0x68>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800ee42:	2112      	movs	r1, #18
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fa51 	bl	800f2ec <USBH_Get_DevDesc>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d18e      	bne.n	800ed6c <USBH_Process+0x68>
      phost->EnumState = ENUM_SET_ADDR;
 800ee4e:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ee50:	7063      	strb	r3, [r4, #1]
 800ee52:	e78b      	b.n	800ed6c <USBH_Process+0x68>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800ee54:	2101      	movs	r1, #1
 800ee56:	4620      	mov	r0, r4
 800ee58:	f000 fb45 	bl	800f4e6 <USBH_SetAddress>
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d184      	bne.n	800ed6c <USBH_Process+0x68>
      USBH_Delay(2U);
 800ee62:	2002      	movs	r0, #2
 800ee64:	f7f5 f9aa 	bl	80041bc <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800ee68:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800ee6a:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 800ee6c:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 800ee6e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800ee70:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800ee74:	79a2      	ldrb	r2, [r4, #6]
 800ee76:	e7cd      	b.n	800ee14 <USBH_Process+0x110>
    if ( USBH_Get_CfgDesc(phost,
 800ee78:	2109      	movs	r1, #9
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 fa7e 	bl	800f37c <USBH_Get_CfgDesc>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	f47f af73 	bne.w	800ed6c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ee86:	2304      	movs	r3, #4
 800ee88:	e7e2      	b.n	800ee50 <USBH_Process+0x14c>
    if (USBH_Get_CfgDesc(phost,
 800ee8a:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 fa74 	bl	800f37c <USBH_Get_CfgDesc>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f47f af69 	bne.w	800ed6c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ee9a:	2305      	movs	r3, #5
 800ee9c:	e7d8      	b.n	800ee50 <USBH_Process+0x14c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800ee9e:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800eea2:	b179      	cbz	r1, 800eec4 <USBH_Process+0x1c0>
      if ( USBH_Get_StringDesc(phost,
 800eea4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800eea8:	23ff      	movs	r3, #255	; 0xff
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 faf4 	bl	800f498 <USBH_Get_StringDesc>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	f47f af5a 	bne.w	800ed6c <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eeb8:	2306      	movs	r3, #6
 800eeba:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eebc:	2105      	movs	r1, #5
 800eebe:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800eec2:	e74f      	b.n	800ed64 <USBH_Process+0x60>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800eec4:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eec6:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eec8:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eeca:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eecc:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eed0:	4619      	mov	r1, r3
 800eed2:	e747      	b.n	800ed64 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 800eed4:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800eed8:	b151      	cbz	r1, 800eef0 <USBH_Process+0x1ec>
      if ( USBH_Get_StringDesc(phost,
 800eeda:	23ff      	movs	r3, #255	; 0xff
 800eedc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800eee0:	4620      	mov	r0, r4
 800eee2:	f000 fad9 	bl	800f498 <USBH_Get_StringDesc>
 800eee6:	2800      	cmp	r0, #0
 800eee8:	f47f af40 	bne.w	800ed6c <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eeec:	2307      	movs	r3, #7
 800eeee:	e7af      	b.n	800ee50 <USBH_Process+0x14c>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eef0:	2307      	movs	r3, #7
 800eef2:	e7e8      	b.n	800eec6 <USBH_Process+0x1c2>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800eef4:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800eef8:	b189      	cbz	r1, 800ef1e <USBH_Process+0x21a>
      if ( USBH_Get_StringDesc(phost,
 800eefa:	23ff      	movs	r3, #255	; 0xff
 800eefc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800ef00:	4620      	mov	r0, r4
 800ef02:	f000 fac9 	bl	800f498 <USBH_Get_StringDesc>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	f47f af30 	bne.w	800ed6c <USBH_Process+0x68>
      phost->device.current_interface = 0U;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800ef12:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d10b      	bne.n	800ef32 <USBH_Process+0x22e>
        phost->gState  = HOST_SET_CONFIGURATION;
 800ef1a:	2308      	movs	r3, #8
 800ef1c:	e72c      	b.n	800ed78 <USBH_Process+0x74>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef1e:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef20:	460a      	mov	r2, r1
 800ef22:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef26:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	f7fd ffaa 	bl	800ce84 <osMessagePut>
 800ef30:	e7ec      	b.n	800ef0c <USBH_Process+0x208>
        phost->gState  = HOST_INPUT;
 800ef32:	2307      	movs	r3, #7
 800ef34:	e720      	b.n	800ed78 <USBH_Process+0x74>
      if(phost->pUser != NULL)
 800ef36:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f43f af16 	beq.w	800ed6c <USBH_Process+0x68>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ef40:	2101      	movs	r1, #1
 800ef42:	4620      	mov	r0, r4
 800ef44:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ef46:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 800ef48:	7023      	strb	r3, [r4, #0]
 800ef4a:	e035      	b.n	800efb8 <USBH_Process+0x2b4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ef4c:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fad6 	bl	800f502 <USBH_SetCfg>
 800ef56:	b908      	cbnz	r0, 800ef5c <USBH_Process+0x258>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800ef58:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 800ef5a:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef5c:	2101      	movs	r1, #1
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef5e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef62:	2200      	movs	r2, #0
 800ef64:	e6fe      	b.n	800ed64 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ef66:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800ef6a:	069b      	lsls	r3, r3, #26
 800ef6c:	d505      	bpl.n	800ef7a <USBH_Process+0x276>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ef6e:	2101      	movs	r1, #1
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 fad4 	bl	800f51e <USBH_SetFeature>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d1f0      	bne.n	800ef5c <USBH_Process+0x258>
      phost->gState  = HOST_CHECK_CLASS;
 800ef7a:	230a      	movs	r3, #10
 800ef7c:	e7ed      	b.n	800ef5a <USBH_Process+0x256>
    if(phost->ClassNumber == 0U)
 800ef7e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800ef82:	b1cb      	cbz	r3, 800efb8 <USBH_Process+0x2b4>
      phost->pActiveClass = NULL;
 800ef84:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ef86:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 800ef8a:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ef8e:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800ef92:	7919      	ldrb	r1, [r3, #4]
 800ef94:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800ef96:	bf08      	it	eq
 800ef98:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800ef9c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800efa0:	b163      	cbz	r3, 800efbc <USBH_Process+0x2b8>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	4620      	mov	r0, r4
 800efa6:	4798      	blx	r3
 800efa8:	b940      	cbnz	r0, 800efbc <USBH_Process+0x2b8>
          phost->gState  = HOST_CLASS_REQUEST;
 800efaa:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800efac:	2103      	movs	r1, #3
 800efae:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 800efb0:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800efb2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800efb6:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800efb8:	2105      	movs	r1, #5
 800efba:	e7d0      	b.n	800ef5e <USBH_Process+0x25a>
        phost->gState  = HOST_ABORT_STATE;
 800efbc:	230d      	movs	r3, #13
 800efbe:	e7c3      	b.n	800ef48 <USBH_Process+0x244>
    if(phost->pActiveClass != NULL)
 800efc0:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 800efc4:	b15a      	cbz	r2, 800efde <USBH_Process+0x2da>
      status = phost->pActiveClass->Requests(phost);
 800efc6:	6913      	ldr	r3, [r2, #16]
 800efc8:	4620      	mov	r0, r4
 800efca:	4798      	blx	r3
 800efcc:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800efd0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f47f aec9 	bne.w	800ed6c <USBH_Process+0x68>
        phost->gState  = HOST_CLASS;
 800efda:	230b      	movs	r3, #11
 800efdc:	e6cc      	b.n	800ed78 <USBH_Process+0x74>
      phost->gState  = HOST_ABORT_STATE;
 800efde:	230d      	movs	r3, #13
 800efe0:	7023      	strb	r3, [r4, #0]
 800efe2:	e76b      	b.n	800eebc <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 800efe4:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f43f aebf 	beq.w	800ed6c <USBH_Process+0x68>
      phost->pActiveClass->BgndProcess(phost);
 800efee:	695b      	ldr	r3, [r3, #20]
 800eff0:	4620      	mov	r0, r4
 800eff2:	4798      	blx	r3
 800eff4:	e6ba      	b.n	800ed6c <USBH_Process+0x68>
    DeInitStateMachine(phost);
 800eff6:	4620      	mov	r0, r4
 800eff8:	f7ff fdf1 	bl	800ebde <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800effc:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800f000:	2b00      	cmp	r3, #0
 800f002:	f43f aeb3 	beq.w	800ed6c <USBH_Process+0x68>
      phost->pActiveClass->DeInit(phost);
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	4620      	mov	r0, r4
 800f00a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800f00c:	2300      	movs	r3, #0
 800f00e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800f012:	e6ab      	b.n	800ed6c <USBH_Process+0x68>

0800f014 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f016:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f018:	f04f 32ff 	mov.w	r2, #4294967295
 800f01c:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 800f020:	a801      	add	r0, sp, #4
 800f022:	f7fd ff57 	bl	800ced4 <osMessageGet>
    if(event.status == osEventMessage)
 800f026:	9b01      	ldr	r3, [sp, #4]
 800f028:	2b10      	cmp	r3, #16
 800f02a:	d1f5      	bne.n	800f018 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f02c:	4620      	mov	r0, r4
 800f02e:	f7ff fe69 	bl	800ed04 <USBH_Process>
 800f032:	e7f1      	b.n	800f018 <USBH_Process_OS+0x4>

0800f034 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800f034:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 800f038:	4770      	bx	lr

0800f03a <USBH_LL_IncTimer>:
  phost->Timer ++;
 800f03a:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 800f03e:	3201      	adds	r2, #1
 800f040:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800f044:	7802      	ldrb	r2, [r0, #0]
 800f046:	2a0b      	cmp	r2, #11
 800f048:	d104      	bne.n	800f054 <USBH_LL_IncTimer+0x1a>
 800f04a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800f04e:	b10b      	cbz	r3, 800f054 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800f050:	699b      	ldr	r3, [r3, #24]
 800f052:	4718      	bx	r3
 800f054:	4770      	bx	lr

0800f056 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800f056:	2301      	movs	r3, #1
 800f058:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800f05c:	4770      	bx	lr

0800f05e <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800f05e:	2300      	movs	r3, #0
 800f060:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800f064:	4770      	bx	lr

0800f066 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 800f066:	7803      	ldrb	r3, [r0, #0]
{
 800f068:	b510      	push	{r4, lr}
 800f06a:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 800f06c:	b98b      	cbnz	r3, 800f092 <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 800f06e:	2301      	movs	r3, #1
 800f070:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 800f074:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800f078:	b10b      	cbz	r3, 800f07e <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 800f07a:	2104      	movs	r1, #4
 800f07c:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f07e:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f080:	2200      	movs	r2, #0
 800f082:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f086:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f08a:	f7fd fefb 	bl	800ce84 <osMessagePut>
}
 800f08e:	2000      	movs	r0, #0
 800f090:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 800f092:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800f096:	2b01      	cmp	r3, #1
 800f098:	d1f1      	bne.n	800f07e <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 800f09a:	2302      	movs	r3, #2
 800f09c:	7003      	strb	r3, [r0, #0]
 800f09e:	e7ee      	b.n	800f07e <USBH_LL_Connect+0x18>

0800f0a0 <USBH_LL_Disconnect>:
{
 800f0a0:	b510      	push	{r4, lr}
 800f0a2:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 800f0a4:	f7f4 fffc 	bl	80040a0 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800f0a8:	7921      	ldrb	r1, [r4, #4]
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f000 fade 	bl	800f66c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800f0b0:	7961      	ldrb	r1, [r4, #5]
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 fada 	bl	800f66c <USBH_FreePipe>
  phost->device.is_connected = 0U;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 800f0be:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800f0c2:	b113      	cbz	r3, 800f0ca <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f0c4:	2105      	movs	r1, #5
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4798      	blx	r3
  USBH_LL_Start(phost);
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f7f4 ffda 	bl	8004084 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 800f0d0:	2303      	movs	r3, #3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f0d2:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0d4:	2200      	movs	r2, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 800f0d6:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f0d8:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0dc:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800f0e0:	f7fd fed0 	bl	800ce84 <osMessagePut>
}
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	bd10      	pop	{r4, pc}

0800f0e8 <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f0e8:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0ea:	2200      	movs	r2, #0
{
 800f0ec:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f0ee:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0f2:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 800f0f6:	f7fd fec5 	bl	800ce84 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	bd08      	pop	{r3, pc}

0800f0fe <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800f0fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800f100:	7885      	ldrb	r5, [r0, #2]
{
 800f102:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800f104:	2d01      	cmp	r5, #1
 800f106:	d003      	beq.n	800f110 <USBH_CtlReq+0x12>
 800f108:	2d02      	cmp	r5, #2
 800f10a:	d00f      	beq.n	800f12c <USBH_CtlReq+0x2e>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800f10c:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800f10e:	e057      	b.n	800f1c0 <USBH_CtlReq+0xc2>
    phost->RequestState = CMD_WAIT;
 800f110:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800f112:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 800f114:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 800f116:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 800f118:	7083      	strb	r3, [r0, #2]
          phost->Control.state = CTRL_STATUS_IN;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f11a:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f122:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f126:	f7fd fead 	bl	800ce84 <osMessagePut>
 800f12a:	e7ef      	b.n	800f10c <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 800f12c:	7e03      	ldrb	r3, [r0, #24]
 800f12e:	2101      	movs	r1, #1
 800f130:	3b01      	subs	r3, #1
 800f132:	2b0a      	cmp	r3, #10
 800f134:	d8ea      	bhi.n	800f10c <USBH_CtlReq+0xe>
 800f136:	e8df f003 	tbb	[pc, r3]
 800f13a:	0e06      	.short	0x0e06
 800f13c:	50452f25 	.word	0x50452f25
 800f140:	a1967a70 	.word	0xa1967a70
 800f144:	ab          	.byte	0xab
 800f145:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f146:	7942      	ldrb	r2, [r0, #5]
 800f148:	f100 0110 	add.w	r1, r0, #16
 800f14c:	f000 fa03 	bl	800f556 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 800f150:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800f152:	7623      	strb	r3, [r4, #24]
 800f154:	e7da      	b.n	800f10c <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f156:	7941      	ldrb	r1, [r0, #5]
 800f158:	f7f5 f810 	bl	800417c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800f15c:	2801      	cmp	r0, #1
 800f15e:	d10c      	bne.n	800f17a <USBH_CtlReq+0x7c>
      if (phost->Control.setup.b.wLength.w != 0U)
 800f160:	8ae2      	ldrh	r2, [r4, #22]
 800f162:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800f166:	b122      	cbz	r2, 800f172 <USBH_CtlReq+0x74>
        if (direction == USB_D2H)
 800f168:	2b00      	cmp	r3, #0
 800f16a:	da44      	bge.n	800f1f6 <USBH_CtlReq+0xf8>
          phost->Control.state = CTRL_DATA_IN;
 800f16c:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 800f16e:	7623      	strb	r3, [r4, #24]
 800f170:	e7d3      	b.n	800f11a <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 800f172:	2b00      	cmp	r3, #0
 800f174:	da36      	bge.n	800f1e4 <USBH_CtlReq+0xe6>
#endif
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800f176:	2309      	movs	r3, #9
 800f178:	e7f9      	b.n	800f16e <USBH_CtlReq+0x70>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f17a:	2804      	cmp	r0, #4
 800f17c:	d06d      	beq.n	800f25a <USBH_CtlReq+0x15c>
 800f17e:	2802      	cmp	r0, #2
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 800f180:	d1c4      	bne.n	800f10c <USBH_CtlReq+0xe>
 800f182:	e06a      	b.n	800f25a <USBH_CtlReq+0x15c>
    phost->Control.timer = (uint16_t)phost->Timer;
 800f184:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 800f188:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 800f18a:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800f18c:	6881      	ldr	r1, [r0, #8]
 800f18e:	7903      	ldrb	r3, [r0, #4]
 800f190:	f000 fa09 	bl	800f5a6 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800f194:	2304      	movs	r3, #4
 800f196:	e7dc      	b.n	800f152 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800f198:	7901      	ldrb	r1, [r0, #4]
 800f19a:	f7f4 ffef 	bl	800417c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800f19e:	2801      	cmp	r0, #1
 800f1a0:	d0e9      	beq.n	800f176 <USBH_CtlReq+0x78>
    if  (URB_Status == USBH_URB_STALL)
 800f1a2:	2805      	cmp	r0, #5
 800f1a4:	d172      	bne.n	800f28c <USBH_CtlReq+0x18e>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1a6:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1ae:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1b2:	f7fd fe67 	bl	800ce84 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800f1b6:	2301      	movs	r3, #1
      status = USBH_NOT_SUPPORTED;
 800f1b8:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 800f1ba:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	7623      	strb	r3, [r4, #24]
}
 800f1c0:	b003      	add	sp, #12
 800f1c2:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 800f1c4:	7943      	ldrb	r3, [r0, #5]
 800f1c6:	8982      	ldrh	r2, [r0, #12]
 800f1c8:	9100      	str	r1, [sp, #0]
 800f1ca:	6881      	ldr	r1, [r0, #8]
 800f1cc:	f000 f9d4 	bl	800f578 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800f1d0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800f1d4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f1d6:	2306      	movs	r3, #6
 800f1d8:	e7bb      	b.n	800f152 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800f1da:	7941      	ldrb	r1, [r0, #5]
 800f1dc:	f7f4 ffce 	bl	800417c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800f1e0:	2801      	cmp	r0, #1
 800f1e2:	d101      	bne.n	800f1e8 <USBH_CtlReq+0xea>
          phost->Control.state = CTRL_STATUS_IN;
 800f1e4:	2307      	movs	r3, #7
 800f1e6:	e7c2      	b.n	800f16e <USBH_CtlReq+0x70>
    else if  (URB_Status == USBH_URB_STALL)
 800f1e8:	2805      	cmp	r0, #5
 800f1ea:	d102      	bne.n	800f1f2 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_STALLED;
 800f1ec:	230c      	movs	r3, #12
 800f1ee:	7623      	strb	r3, [r4, #24]
 800f1f0:	e7d9      	b.n	800f1a6 <USBH_CtlReq+0xa8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f1f2:	2802      	cmp	r0, #2
 800f1f4:	d101      	bne.n	800f1fa <USBH_CtlReq+0xfc>
      phost->Control.state = CTRL_DATA_OUT;
 800f1f6:	2305      	movs	r3, #5
 800f1f8:	e7b9      	b.n	800f16e <USBH_CtlReq+0x70>
      if (URB_Status == USBH_URB_ERROR)
 800f1fa:	2804      	cmp	r0, #4
 800f1fc:	d186      	bne.n	800f10c <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800f1fe:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f200:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f202:	2200      	movs	r2, #0
 800f204:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 800f208:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f20a:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f20e:	f7fd fe39 	bl	800ce84 <osMessagePut>
        phost->RequestState = CMD_SEND;
 800f212:	2301      	movs	r3, #1
        status = USBH_FAIL;
 800f214:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800f216:	70a3      	strb	r3, [r4, #2]
 800f218:	e7d2      	b.n	800f1c0 <USBH_CtlReq+0xc2>
    USBH_CtlReceiveData (phost,
 800f21a:	2200      	movs	r2, #0
 800f21c:	7903      	ldrb	r3, [r0, #4]
 800f21e:	4611      	mov	r1, r2
 800f220:	f000 f9c1 	bl	800f5a6 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800f224:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800f228:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f22a:	2308      	movs	r3, #8
 800f22c:	e791      	b.n	800f152 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800f22e:	7901      	ldrb	r1, [r0, #4]
 800f230:	f7f4 ffa4 	bl	800417c <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800f234:	2801      	cmp	r0, #1
 800f236:	d10e      	bne.n	800f256 <USBH_CtlReq+0x158>
      phost->Control.state = CTRL_COMPLETE;
 800f238:	230d      	movs	r3, #13
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f23a:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 800f242:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f244:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f248:	f7fd fe1c 	bl	800ce84 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800f24c:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800f24e:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 800f250:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800f252:	7620      	strb	r0, [r4, #24]
 800f254:	e7b4      	b.n	800f1c0 <USBH_CtlReq+0xc2>
    else if (URB_Status == USBH_URB_ERROR)
 800f256:	2804      	cmp	r0, #4
 800f258:	d101      	bne.n	800f25e <USBH_CtlReq+0x160>
      {
        phost->Control.state = CTRL_ERROR;
 800f25a:	230b      	movs	r3, #11
 800f25c:	e787      	b.n	800f16e <USBH_CtlReq+0x70>
      if(URB_Status == USBH_URB_STALL)
 800f25e:	2805      	cmp	r0, #5
 800f260:	f47f af54 	bne.w	800f10c <USBH_CtlReq+0xe>
 800f264:	e79f      	b.n	800f1a6 <USBH_CtlReq+0xa8>
    USBH_CtlSendData (phost,
 800f266:	2200      	movs	r2, #0
 800f268:	7943      	ldrb	r3, [r0, #5]
 800f26a:	9100      	str	r1, [sp, #0]
 800f26c:	4611      	mov	r1, r2
 800f26e:	f000 f983 	bl	800f578 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800f272:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800f276:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f278:	230a      	movs	r3, #10
 800f27a:	e76a      	b.n	800f152 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800f27c:	7941      	ldrb	r1, [r0, #5]
 800f27e:	f7f4 ff7d 	bl	800417c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800f282:	2801      	cmp	r0, #1
 800f284:	d0d8      	beq.n	800f238 <USBH_CtlReq+0x13a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800f286:	2802      	cmp	r0, #2
 800f288:	f43f af75 	beq.w	800f176 <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_ERROR)
 800f28c:	2804      	cmp	r0, #4
 800f28e:	e777      	b.n	800f180 <USBH_CtlReq+0x82>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f290:	7e43      	ldrb	r3, [r0, #25]
 800f292:	3301      	adds	r3, #1
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b02      	cmp	r3, #2
 800f298:	7643      	strb	r3, [r0, #25]
 800f29a:	d805      	bhi.n	800f2a8 <USBH_CtlReq+0x1aa>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800f29c:	f7f4 ff00 	bl	80040a0 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800f2a4:	70a3      	strb	r3, [r4, #2]
 800f2a6:	e731      	b.n	800f10c <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f2a8:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800f2ac:	2106      	movs	r1, #6
 800f2ae:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	7663      	strb	r3, [r4, #25]
 800f2b4:	e7ad      	b.n	800f212 <USBH_CtlReq+0x114>

0800f2b6 <USBH_GetDescriptor>:
{
 800f2b6:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800f2b8:	7884      	ldrb	r4, [r0, #2]
{
 800f2ba:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800f2be:	2c01      	cmp	r4, #1
 800f2c0:	d10f      	bne.n	800f2e2 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f2c2:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 800f2c6:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f2c8:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 800f2ca:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f2cc:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f2ce:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f2d2:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f2d4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f2d8:	bf0c      	ite	eq
 800f2da:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800f2de:	2200      	movne	r2, #0
 800f2e0:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	4619      	mov	r1, r3
}
 800f2e6:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800f2e8:	f7ff bf09 	b.w	800f0fe <USBH_CtlReq>

0800f2ec <USBH_Get_DevDesc>:
{
 800f2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800f2ee:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	9100      	str	r1, [sp, #0]
 800f2f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2fa:	2100      	movs	r1, #0
{
 800f2fc:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800f2fe:	f7ff ffda 	bl	800f2b6 <USBH_GetDescriptor>
 800f302:	bbc8      	cbnz	r0, 800f378 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f304:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 800f308:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f30a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800f30e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800f312:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800f316:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800f31a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800f31e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800f322:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800f326:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800f32a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800f32e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800f332:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800f336:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800f33a:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 800f33e:	d91b      	bls.n	800f378 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 800f340:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800f344:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800f348:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800f34c:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800f350:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800f354:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800f358:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800f35c:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800f360:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800f364:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800f368:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800f36c:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800f370:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800f374:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800f378:	b003      	add	sp, #12
 800f37a:	bd30      	pop	{r4, r5, pc}

0800f37c <USBH_Get_CfgDesc>:
{
 800f37c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 800f380:	f100 051c 	add.w	r5, r0, #28
{
 800f384:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 800f386:	9100      	str	r1, [sp, #0]
 800f388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f38c:	462b      	mov	r3, r5
 800f38e:	2100      	movs	r1, #0
{
 800f390:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800f392:	f7ff ff90 	bl	800f2b6 <USBH_GetDescriptor>
 800f396:	bb48      	cbnz	r0, 800f3ec <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800f398:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f39a:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800f39c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800f3a0:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800f3a4:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800f3a6:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800f3aa:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800f3ae:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f3b2:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800f3b6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f3ba:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800f3be:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800f3c2:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800f3c6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f3ca:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800f3ce:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800f3d2:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f3d6:	d909      	bls.n	800f3ec <USBH_Get_CfgDesc+0x70>
 800f3d8:	4627      	mov	r7, r4
 800f3da:	462b      	mov	r3, r5
 800f3dc:	4606      	mov	r6, r0
 800f3de:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f3e0:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f3e4:	2e02      	cmp	r6, #2
 800f3e6:	d001      	beq.n	800f3ec <USBH_Get_CfgDesc+0x70>
 800f3e8:	4596      	cmp	lr, r2
 800f3ea:	d802      	bhi.n	800f3f2 <USBH_Get_CfgDesc+0x76>
}
 800f3ec:	b003      	add	sp, #12
 800f3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f3f2:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f3f4:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f3f6:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f3f8:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f3fa:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f3fc:	2904      	cmp	r1, #4
 800f3fe:	d1f1      	bne.n	800f3e4 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800f400:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f402:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800f406:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800f40a:	7859      	ldrb	r1, [r3, #1]
 800f40c:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800f410:	7899      	ldrb	r1, [r3, #2]
 800f412:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800f416:	78d9      	ldrb	r1, [r3, #3]
 800f418:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800f41c:	7919      	ldrb	r1, [r3, #4]
 800f41e:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800f422:	7959      	ldrb	r1, [r3, #5]
 800f424:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800f428:	7999      	ldrb	r1, [r3, #6]
 800f42a:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800f42e:	79d9      	ldrb	r1, [r3, #7]
 800f430:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800f434:	7a19      	ldrb	r1, [r3, #8]
 800f436:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
        ep_ix = 0U;
 800f43a:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f43c:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 800f440:	428d      	cmp	r5, r1
 800f442:	d802      	bhi.n	800f44a <USBH_Get_CfgDesc+0xce>
 800f444:	3601      	adds	r6, #1
 800f446:	371a      	adds	r7, #26
 800f448:	e7cc      	b.n	800f3e4 <USBH_Get_CfgDesc+0x68>
 800f44a:	4596      	cmp	lr, r2
 800f44c:	d9fa      	bls.n	800f444 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f44e:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f450:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f452:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f454:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f456:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f458:	2d05      	cmp	r5, #5
 800f45a:	d1ef      	bne.n	800f43c <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800f45c:	1c4d      	adds	r5, r1, #1
 800f45e:	f893 9000 	ldrb.w	r9, [r3]
 800f462:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 800f466:	4421      	add	r1, r4
 800f468:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800f46c:	f893 9001 	ldrb.w	r9, [r3, #1]
 800f470:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800f474:	f893 9002 	ldrb.w	r9, [r3, #2]
 800f478:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800f47c:	f893 9003 	ldrb.w	r9, [r3, #3]
 800f480:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800f484:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800f488:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800f48c:	f893 9006 	ldrb.w	r9, [r3, #6]
 800f490:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 800f494:	b2e9      	uxtb	r1, r5
 800f496:	e7d1      	b.n	800f43c <USBH_Get_CfgDesc+0xc0>

0800f498 <USBH_Get_StringDesc>:
{
 800f498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800f49a:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800f49e:	4614      	mov	r4, r2
 800f4a0:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800f4a8:	462b      	mov	r3, r5
 800f4aa:	2100      	movs	r1, #0
{
 800f4ac:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 800f4ae:	f7ff ff02 	bl	800f2b6 <USBH_GetDescriptor>
 800f4b2:	b978      	cbnz	r0, 800f4d4 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f4b4:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800f4b8:	2b03      	cmp	r3, #3
 800f4ba:	d10b      	bne.n	800f4d4 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f4bc:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 800f4c0:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f4c2:	3b02      	subs	r3, #2
 800f4c4:	42bb      	cmp	r3, r7
 800f4c6:	bf28      	it	cs
 800f4c8:	463b      	movcs	r3, r7
 800f4ca:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d803      	bhi.n	800f4d8 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	7023      	strb	r3, [r4, #0]
}
 800f4d4:	b003      	add	sp, #12
 800f4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800f4d8:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800f4da:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800f4dc:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f4de:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 800f4e0:	f804 1b01 	strb.w	r1, [r4], #1
 800f4e4:	e7f2      	b.n	800f4cc <USBH_Get_StringDesc+0x34>

0800f4e6 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800f4e6:	7883      	ldrb	r3, [r0, #2]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d106      	bne.n	800f4fa <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f4ec:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f4ee:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f4f0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f4f2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f4f4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800f4f6:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4f8:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	f7ff bdfe 	b.w	800f0fe <USBH_CtlReq>

0800f502 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 800f502:	7883      	ldrb	r3, [r0, #2]
 800f504:	2b01      	cmp	r3, #1
 800f506:	d106      	bne.n	800f516 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f508:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f50a:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f50c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f50e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f510:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800f512:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f514:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800f516:	2200      	movs	r2, #0
 800f518:	4611      	mov	r1, r2
 800f51a:	f7ff bdf0 	b.w	800f0fe <USBH_CtlReq>

0800f51e <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 800f51e:	7883      	ldrb	r3, [r0, #2]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d106      	bne.n	800f532 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f524:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f526:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 800f528:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f52a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f52c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800f52e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f530:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800f532:	2200      	movs	r2, #0
 800f534:	4611      	mov	r1, r2
 800f536:	f7ff bde2 	b.w	800f0fe <USBH_CtlReq>

0800f53a <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800f53a:	7883      	ldrb	r3, [r0, #2]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d106      	bne.n	800f54e <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f540:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f542:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f544:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 800f546:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f548:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f54a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0U;
 800f54c:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800f54e:	2200      	movs	r2, #0
 800f550:	4611      	mov	r1, r2
 800f552:	f7ff bdd4 	b.w	800f0fe <USBH_CtlReq>

0800f556 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800f556:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f558:	2308      	movs	r3, #8
{
 800f55a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f55c:	2400      	movs	r4, #0
{
 800f55e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f560:	9302      	str	r3, [sp, #8]
 800f562:	9101      	str	r1, [sp, #4]
 800f564:	4623      	mov	r3, r4
 800f566:	9403      	str	r4, [sp, #12]
 800f568:	4622      	mov	r2, r4
 800f56a:	9400      	str	r4, [sp, #0]
 800f56c:	4629      	mov	r1, r5
 800f56e:	f7f4 fdeb 	bl	8004148 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800f572:	4620      	mov	r0, r4
 800f574:	b005      	add	sp, #20
 800f576:	bd30      	pop	{r4, r5, pc}

0800f578 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800f578:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f57a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800f57e:	b085      	sub	sp, #20
 800f580:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f582:	2d00      	cmp	r5, #0
{
 800f584:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f588:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800f58a:	bf18      	it	ne
 800f58c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f58e:	9101      	str	r1, [sp, #4]
 800f590:	4621      	mov	r1, r4
 800f592:	9303      	str	r3, [sp, #12]
 800f594:	2301      	movs	r3, #1
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	2300      	movs	r3, #0
 800f59a:	461a      	mov	r2, r3
 800f59c:	f7f4 fdd4 	bl	8004148 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	b005      	add	sp, #20
 800f5a4:	bd30      	pop	{r4, r5, pc}

0800f5a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800f5a6:	b530      	push	{r4, r5, lr}
 800f5a8:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f5aa:	2400      	movs	r4, #0
{
 800f5ac:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f5ae:	9202      	str	r2, [sp, #8]
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	9101      	str	r1, [sp, #4]
 800f5b4:	4623      	mov	r3, r4
 800f5b6:	9403      	str	r4, [sp, #12]
 800f5b8:	4629      	mov	r1, r5
 800f5ba:	9200      	str	r2, [sp, #0]
 800f5bc:	f7f4 fdc4 	bl	8004148 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	b005      	add	sp, #20
 800f5c4:	bd30      	pop	{r4, r5, pc}

0800f5c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800f5c6:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f5c8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800f5cc:	b085      	sub	sp, #20
 800f5ce:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 800f5d0:	2d00      	cmp	r5, #0
{
 800f5d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f5d6:	9202      	str	r2, [sp, #8]
 800f5d8:	f04f 0200 	mov.w	r2, #0
    do_ping = 0U;
 800f5dc:	bf18      	it	ne
 800f5de:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f5e0:	9101      	str	r1, [sp, #4]
 800f5e2:	4621      	mov	r1, r4
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	f7f4 fdac 	bl	8004148 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	b005      	add	sp, #20
 800f5f4:	bd30      	pop	{r4, r5, pc}

0800f5f6 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800f5f6:	b530      	push	{r4, r5, lr}
 800f5f8:	b085      	sub	sp, #20
 800f5fa:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f5fc:	2400      	movs	r4, #0
 800f5fe:	2302      	movs	r3, #2
 800f600:	9202      	str	r2, [sp, #8]
 800f602:	2201      	movs	r2, #1
 800f604:	9101      	str	r1, [sp, #4]
 800f606:	4629      	mov	r1, r5
 800f608:	9403      	str	r4, [sp, #12]
 800f60a:	9200      	str	r2, [sp, #0]
 800f60c:	f7f4 fd9c 	bl	8004148 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 800f610:	4620      	mov	r0, r4
 800f612:	b005      	add	sp, #20
 800f614:	bd30      	pop	{r4, r5, pc}

0800f616 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800f616:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 800f618:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800f61c:	9402      	str	r4, [sp, #8]
 800f61e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800f622:	9401      	str	r4, [sp, #4]
 800f624:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800f628:	9400      	str	r4, [sp, #0]
 800f62a:	f7f4 fd67 	bl	80040fc <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 800f62e:	2000      	movs	r0, #0
 800f630:	b004      	add	sp, #16
 800f632:	bd10      	pop	{r4, pc}

0800f634 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800f634:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 800f636:	f7f4 fd79 	bl	800412c <USBH_LL_ClosePipe>

  return USBH_OK;

}
 800f63a:	2000      	movs	r0, #0
 800f63c:	bd08      	pop	{r3, pc}

0800f63e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f63e:	b530      	push	{r4, r5, lr}
 800f640:	2300      	movs	r3, #0
 800f642:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f646:	f854 5b04 	ldr.w	r5, [r4], #4
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	042d      	lsls	r5, r5, #16
 800f64e:	d407      	bmi.n	800f660 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800f650:	33e0      	adds	r3, #224	; 0xe0
 800f652:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 800f656:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800f658:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 800f65c:	b2d0      	uxtb	r0, r2
 800f65e:	bd30      	pop	{r4, r5, pc}
 800f660:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800f662:	2b0b      	cmp	r3, #11
 800f664:	d1ef      	bne.n	800f646 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 800f666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f66a:	e7f7      	b.n	800f65c <USBH_AllocPipe+0x1e>

0800f66c <USBH_FreePipe>:
   if(idx < 11U)
 800f66c:	290a      	cmp	r1, #10
 800f66e:	bf9f      	itttt	ls
 800f670:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 800f674:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 800f678:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800f67c:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 800f680:	2000      	movs	r0, #0
 800f682:	4770      	bx	lr

0800f684 <GL_FillCircleAA_HiRes>:
 800f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f688:	4607      	mov	r7, r0
 800f68a:	b083      	sub	sp, #12
 800f68c:	4616      	mov	r6, r2
 800f68e:	1a80      	subs	r0, r0, r2
 800f690:	9101      	str	r1, [sp, #4]
 800f692:	18b9      	adds	r1, r7, r2
 800f694:	f000 fba0 	bl	800fdd8 <GUI_AA_Init_HiRes>
 800f698:	2e00      	cmp	r6, #0
 800f69a:	9a01      	ldr	r2, [sp, #4]
 800f69c:	fb06 f506 	mul.w	r5, r6, r6
 800f6a0:	bfb4      	ite	lt
 800f6a2:	1c73      	addlt	r3, r6, #1
 800f6a4:	4633      	movge	r3, r6
 800f6a6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800f778 <GL_FillCircleAA_HiRes+0xf4>
 800f6aa:	ebc6 0802 	rsb	r8, r6, r2
 800f6ae:	eb05 0563 	add.w	r5, r5, r3, asr #1
 800f6b2:	18b3      	adds	r3, r6, r2
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	f8d9 3000 	ldr.w	r3, [r9]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	b153      	cbz	r3, 800f6d6 <GL_FillCircleAA_HiRes+0x52>
 800f6c0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f6c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f6c8:	4291      	cmp	r1, r2
 800f6ca:	bfa8      	it	ge
 800f6cc:	4611      	movge	r1, r2
 800f6ce:	4598      	cmp	r8, r3
 800f6d0:	bfb8      	it	lt
 800f6d2:	4698      	movlt	r8, r3
 800f6d4:	9100      	str	r1, [sp, #0]
 800f6d6:	2e01      	cmp	r6, #1
 800f6d8:	dd4b      	ble.n	800f772 <GL_FillCircleAA_HiRes+0xee>
 800f6da:	9b01      	ldr	r3, [sp, #4]
 800f6dc:	4634      	mov	r4, r6
 800f6de:	f04f 0b01 	mov.w	fp, #1
 800f6e2:	f103 3aff 	add.w	sl, r3, #4294967295
 800f6e6:	45c2      	cmp	sl, r8
 800f6e8:	db15      	blt.n	800f716 <GL_FillCircleAA_HiRes+0x92>
 800f6ea:	9b00      	ldr	r3, [sp, #0]
 800f6ec:	459a      	cmp	sl, r3
 800f6ee:	dc12      	bgt.n	800f716 <GL_FillCircleAA_HiRes+0x92>
 800f6f0:	fb0b f20b 	mul.w	r2, fp, fp
 800f6f4:	fb04 2304 	mla	r3, r4, r4, r2
 800f6f8:	429d      	cmp	r5, r3
 800f6fa:	da04      	bge.n	800f706 <GL_FillCircleAA_HiRes+0x82>
 800f6fc:	3c01      	subs	r4, #1
 800f6fe:	fb04 2304 	mla	r3, r4, r4, r2
 800f702:	429d      	cmp	r5, r3
 800f704:	dbfa      	blt.n	800f6fc <GL_FillCircleAA_HiRes+0x78>
 800f706:	f8d9 3000 	ldr.w	r3, [r9]
 800f70a:	193a      	adds	r2, r7, r4
 800f70c:	4651      	mov	r1, sl
 800f70e:	1b38      	subs	r0, r7, r4
 800f710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4798      	blx	r3
 800f716:	f10b 0b01 	add.w	fp, fp, #1
 800f71a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f71e:	455e      	cmp	r6, fp
 800f720:	d1e1      	bne.n	800f6e6 <GL_FillCircleAA_HiRes+0x62>
 800f722:	f8dd a004 	ldr.w	sl, [sp, #4]
 800f726:	4634      	mov	r4, r6
 800f728:	f04f 0b00 	mov.w	fp, #0
 800f72c:	45d0      	cmp	r8, sl
 800f72e:	dc15      	bgt.n	800f75c <GL_FillCircleAA_HiRes+0xd8>
 800f730:	9b00      	ldr	r3, [sp, #0]
 800f732:	4553      	cmp	r3, sl
 800f734:	db12      	blt.n	800f75c <GL_FillCircleAA_HiRes+0xd8>
 800f736:	fb0b f20b 	mul.w	r2, fp, fp
 800f73a:	fb04 2304 	mla	r3, r4, r4, r2
 800f73e:	429d      	cmp	r5, r3
 800f740:	da04      	bge.n	800f74c <GL_FillCircleAA_HiRes+0xc8>
 800f742:	3c01      	subs	r4, #1
 800f744:	fb04 2304 	mla	r3, r4, r4, r2
 800f748:	429d      	cmp	r5, r3
 800f74a:	dbfa      	blt.n	800f742 <GL_FillCircleAA_HiRes+0xbe>
 800f74c:	f8d9 3000 	ldr.w	r3, [r9]
 800f750:	193a      	adds	r2, r7, r4
 800f752:	4651      	mov	r1, sl
 800f754:	1b38      	subs	r0, r7, r4
 800f756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4798      	blx	r3
 800f75c:	f10b 0b01 	add.w	fp, fp, #1
 800f760:	f10a 0a01 	add.w	sl, sl, #1
 800f764:	455e      	cmp	r6, fp
 800f766:	d1e1      	bne.n	800f72c <GL_FillCircleAA_HiRes+0xa8>
 800f768:	b003      	add	sp, #12
 800f76a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76e:	f000 bc01 	b.w	800ff74 <GUI_AA_Exit>
 800f772:	2e00      	cmp	r6, #0
 800f774:	ddf8      	ble.n	800f768 <GL_FillCircleAA_HiRes+0xe4>
 800f776:	e7d4      	b.n	800f722 <GL_FillCircleAA_HiRes+0x9e>
 800f778:	20000018 	.word	0x20000018

0800f77c <GL_DrawCircleAA_HiRes>:
 800f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f780:	b08b      	sub	sp, #44	; 0x2c
 800f782:	4614      	mov	r4, r2
 800f784:	4605      	mov	r5, r0
 800f786:	9106      	str	r1, [sp, #24]
 800f788:	9007      	str	r0, [sp, #28]
 800f78a:	f002 fe89 	bl	80124a0 <GUI_GetPenSize>
 800f78e:	4b7f      	ldr	r3, [pc, #508]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f790:	1b2a      	subs	r2, r5, r4
 800f792:	1929      	adds	r1, r5, r4
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f79a:	fb00 f003 	mul.w	r0, r0, r3
 800f79e:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800f7a2:	4401      	add	r1, r0
 800f7a4:	1a10      	subs	r0, r2, r0
 800f7a6:	f000 fb17 	bl	800fdd8 <GUI_AA_Init_HiRes>
 800f7aa:	f002 fe79 	bl	80124a0 <GUI_GetPenSize>
 800f7ae:	4b77      	ldr	r3, [pc, #476]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	fb00 f005 	mul.w	r0, r0, r5
 800f7bc:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 800f7c0:	eb04 0255 	add.w	r2, r4, r5, lsr #1
 800f7c4:	2a00      	cmp	r2, #0
 800f7c6:	eba2 0505 	sub.w	r5, r2, r5
 800f7ca:	9201      	str	r2, [sp, #4]
 800f7cc:	fb02 f602 	mul.w	r6, r2, r2
 800f7d0:	bfb8      	it	lt
 800f7d2:	3201      	addlt	r2, #1
 800f7d4:	9901      	ldr	r1, [sp, #4]
 800f7d6:	2d00      	cmp	r5, #0
 800f7d8:	eb06 0662 	add.w	r6, r6, r2, asr #1
 800f7dc:	9a06      	ldr	r2, [sp, #24]
 800f7de:	46a8      	mov	r8, r5
 800f7e0:	fb05 f905 	mul.w	r9, r5, r5
 800f7e4:	eba2 0001 	sub.w	r0, r2, r1
 800f7e8:	eba2 0405 	sub.w	r4, r2, r5
 800f7ec:	4411      	add	r1, r2
 800f7ee:	bfb8      	it	lt
 800f7f0:	f105 0801 	addlt.w	r8, r5, #1
 800f7f4:	442a      	add	r2, r5
 800f7f6:	9003      	str	r0, [sp, #12]
 800f7f8:	eb09 0868 	add.w	r8, r9, r8, asr #1
 800f7fc:	9102      	str	r1, [sp, #8]
 800f7fe:	9404      	str	r4, [sp, #16]
 800f800:	9205      	str	r2, [sp, #20]
 800f802:	b15b      	cbz	r3, 800f81c <GL_DrawCircleAA_HiRes+0xa0>
 800f804:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f808:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f80c:	4291      	cmp	r1, r2
 800f80e:	bfa8      	it	ge
 800f810:	4611      	movge	r1, r2
 800f812:	4298      	cmp	r0, r3
 800f814:	bfb8      	it	lt
 800f816:	4618      	movlt	r0, r3
 800f818:	9102      	str	r1, [sp, #8]
 800f81a:	9003      	str	r0, [sp, #12]
 800f81c:	9b01      	ldr	r3, [sp, #4]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	f340 80b1 	ble.w	800f986 <GL_DrawCircleAA_HiRes+0x20a>
 800f824:	461c      	mov	r4, r3
 800f826:	9b06      	ldr	r3, [sp, #24]
 800f828:	462f      	mov	r7, r5
 800f82a:	9508      	str	r5, [sp, #32]
 800f82c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f830:	f103 3aff 	add.w	sl, r3, #4294967295
 800f834:	f04f 0b01 	mov.w	fp, #1
 800f838:	9d07      	ldr	r5, [sp, #28]
 800f83a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f83e:	45ca      	cmp	sl, r9
 800f840:	db18      	blt.n	800f874 <GL_DrawCircleAA_HiRes+0xf8>
 800f842:	9b02      	ldr	r3, [sp, #8]
 800f844:	459a      	cmp	sl, r3
 800f846:	dc15      	bgt.n	800f874 <GL_DrawCircleAA_HiRes+0xf8>
 800f848:	9b04      	ldr	r3, [sp, #16]
 800f84a:	4553      	cmp	r3, sl
 800f84c:	dd76      	ble.n	800f93c <GL_DrawCircleAA_HiRes+0x1c0>
 800f84e:	fb0b f20b 	mul.w	r2, fp, fp
 800f852:	fb04 2304 	mla	r3, r4, r4, r2
 800f856:	429e      	cmp	r6, r3
 800f858:	da04      	bge.n	800f864 <GL_DrawCircleAA_HiRes+0xe8>
 800f85a:	3c01      	subs	r4, #1
 800f85c:	fb04 2304 	mla	r3, r4, r4, r2
 800f860:	429e      	cmp	r6, r3
 800f862:	dbfa      	blt.n	800f85a <GL_DrawCircleAA_HiRes+0xde>
 800f864:	4b49      	ldr	r3, [pc, #292]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f866:	192a      	adds	r2, r5, r4
 800f868:	4651      	mov	r1, sl
 800f86a:	1b28      	subs	r0, r5, r4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	4798      	blx	r3
 800f874:	f10b 0b01 	add.w	fp, fp, #1
 800f878:	9b01      	ldr	r3, [sp, #4]
 800f87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f87e:	455b      	cmp	r3, fp
 800f880:	d1dd      	bne.n	800f83e <GL_DrawCircleAA_HiRes+0xc2>
 800f882:	9d08      	ldr	r5, [sp, #32]
 800f884:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f888:	461c      	mov	r4, r3
 800f88a:	9f06      	ldr	r7, [sp, #24]
 800f88c:	f04f 0a00 	mov.w	sl, #0
 800f890:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	42bb      	cmp	r3, r7
 800f898:	dc1a      	bgt.n	800f8d0 <GL_DrawCircleAA_HiRes+0x154>
 800f89a:	9b02      	ldr	r3, [sp, #8]
 800f89c:	42bb      	cmp	r3, r7
 800f89e:	db17      	blt.n	800f8d0 <GL_DrawCircleAA_HiRes+0x154>
 800f8a0:	9b05      	ldr	r3, [sp, #20]
 800f8a2:	42bb      	cmp	r3, r7
 800f8a4:	da1f      	bge.n	800f8e6 <GL_DrawCircleAA_HiRes+0x16a>
 800f8a6:	fb0a f20a 	mul.w	r2, sl, sl
 800f8aa:	fb04 2304 	mla	r3, r4, r4, r2
 800f8ae:	429e      	cmp	r6, r3
 800f8b0:	da04      	bge.n	800f8bc <GL_DrawCircleAA_HiRes+0x140>
 800f8b2:	3c01      	subs	r4, #1
 800f8b4:	fb04 2304 	mla	r3, r4, r4, r2
 800f8b8:	429e      	cmp	r6, r3
 800f8ba:	dbfa      	blt.n	800f8b2 <GL_DrawCircleAA_HiRes+0x136>
 800f8bc:	4b33      	ldr	r3, [pc, #204]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f8be:	eb0b 0204 	add.w	r2, fp, r4
 800f8c2:	4639      	mov	r1, r7
 800f8c4:	ebc4 000b 	rsb	r0, r4, fp
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4798      	blx	r3
 800f8d0:	f10a 0a01 	add.w	sl, sl, #1
 800f8d4:	9b01      	ldr	r3, [sp, #4]
 800f8d6:	3701      	adds	r7, #1
 800f8d8:	4553      	cmp	r3, sl
 800f8da:	d1db      	bne.n	800f894 <GL_DrawCircleAA_HiRes+0x118>
 800f8dc:	b00b      	add	sp, #44	; 0x2c
 800f8de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e2:	f000 bb47 	b.w	800ff74 <GUI_AA_Exit>
 800f8e6:	fb0a f30a 	mul.w	r3, sl, sl
 800f8ea:	fb04 3204 	mla	r2, r4, r4, r3
 800f8ee:	4296      	cmp	r6, r2
 800f8f0:	da0b      	bge.n	800f90a <GL_DrawCircleAA_HiRes+0x18e>
 800f8f2:	3c01      	subs	r4, #1
 800f8f4:	fb04 3204 	mla	r2, r4, r4, r3
 800f8f8:	4296      	cmp	r6, r2
 800f8fa:	dbfa      	blt.n	800f8f2 <GL_DrawCircleAA_HiRes+0x176>
 800f8fc:	eb09 0203 	add.w	r2, r9, r3
 800f900:	4590      	cmp	r8, r2
 800f902:	da06      	bge.n	800f912 <GL_DrawCircleAA_HiRes+0x196>
 800f904:	3d01      	subs	r5, #1
 800f906:	fb05 f905 	mul.w	r9, r5, r5
 800f90a:	eb09 0203 	add.w	r2, r9, r3
 800f90e:	4590      	cmp	r8, r2
 800f910:	dbf8      	blt.n	800f904 <GL_DrawCircleAA_HiRes+0x188>
 800f912:	4b1e      	ldr	r3, [pc, #120]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f914:	ebc5 020b 	rsb	r2, r5, fp
 800f918:	4639      	mov	r1, r7
 800f91a:	ebc4 000b 	rsb	r0, r4, fp
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4798      	blx	r3
 800f926:	4b19      	ldr	r3, [pc, #100]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f928:	eb0b 0204 	add.w	r2, fp, r4
 800f92c:	4639      	mov	r1, r7
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	eb0b 0005 	add.w	r0, fp, r5
 800f934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4798      	blx	r3
 800f93a:	e7c9      	b.n	800f8d0 <GL_DrawCircleAA_HiRes+0x154>
 800f93c:	fb0b f30b 	mul.w	r3, fp, fp
 800f940:	fb04 3204 	mla	r2, r4, r4, r3
 800f944:	4296      	cmp	r6, r2
 800f946:	da09      	bge.n	800f95c <GL_DrawCircleAA_HiRes+0x1e0>
 800f948:	3c01      	subs	r4, #1
 800f94a:	fb04 3204 	mla	r2, r4, r4, r3
 800f94e:	4296      	cmp	r6, r2
 800f950:	dbfa      	blt.n	800f948 <GL_DrawCircleAA_HiRes+0x1cc>
 800f952:	fb07 3207 	mla	r2, r7, r7, r3
 800f956:	4590      	cmp	r8, r2
 800f958:	da04      	bge.n	800f964 <GL_DrawCircleAA_HiRes+0x1e8>
 800f95a:	3f01      	subs	r7, #1
 800f95c:	fb07 3207 	mla	r2, r7, r7, r3
 800f960:	4590      	cmp	r8, r2
 800f962:	dbfa      	blt.n	800f95a <GL_DrawCircleAA_HiRes+0x1de>
 800f964:	4b09      	ldr	r3, [pc, #36]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f966:	1bea      	subs	r2, r5, r7
 800f968:	4651      	mov	r1, sl
 800f96a:	1b28      	subs	r0, r5, r4
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	4798      	blx	r3
 800f974:	4b05      	ldr	r3, [pc, #20]	; (800f98c <GL_DrawCircleAA_HiRes+0x210>)
 800f976:	192a      	adds	r2, r5, r4
 800f978:	4651      	mov	r1, sl
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	19e8      	adds	r0, r5, r7
 800f97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4798      	blx	r3
 800f984:	e776      	b.n	800f874 <GL_DrawCircleAA_HiRes+0xf8>
 800f986:	2b00      	cmp	r3, #0
 800f988:	dda8      	ble.n	800f8dc <GL_DrawCircleAA_HiRes+0x160>
 800f98a:	e77d      	b.n	800f888 <GL_DrawCircleAA_HiRes+0x10c>
 800f98c:	20000018 	.word	0x20000018

0800f990 <GUI_AA_DrawCircle>:
 800f990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f994:	4f30      	ldr	r7, [pc, #192]	; (800fa58 <GUI_AA_DrawCircle+0xc8>)
 800f996:	b083      	sub	sp, #12
 800f998:	4605      	mov	r5, r0
 800f99a:	460c      	mov	r4, r1
 800f99c:	4616      	mov	r6, r2
 800f99e:	f006 fc61 	bl	8016264 <GUI_Lock>
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800fa5c <GUI_AA_DrawCircle+0xcc>
 800f9a8:	b1db      	cbz	r3, 800f9e2 <GUI_AA_DrawCircle+0x52>
 800f9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9b4:	4415      	add	r5, r2
 800f9b6:	441c      	add	r4, r3
 800f9b8:	f00d fdc6 	bl	801d548 <WM__InitIVRSearch>
 800f9bc:	b188      	cbz	r0, 800f9e2 <GUI_AA_DrawCircle+0x52>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	4798      	blx	r3
 800f9c8:	4680      	mov	r8, r0
 800f9ca:	f00d fc93 	bl	801d2f4 <WM__GetNextIVR>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d1f5      	bne.n	800f9be <GUI_AA_DrawCircle+0x2e>
 800f9d2:	f1b8 0f00 	cmp.w	r8, #0
 800f9d6:	d104      	bne.n	800f9e2 <GUI_AA_DrawCircle+0x52>
 800f9d8:	f006 fc3a 	bl	8016250 <GUI_Unlock>
 800f9dc:	b003      	add	sp, #12
 800f9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9e2:	f00e ff89 	bl	801e8f8 <WM__GetOrgX_AA>
 800f9e6:	4405      	add	r5, r0
 800f9e8:	f00e ff94 	bl	801e914 <WM__GetOrgY_AA>
 800f9ec:	f8d9 3000 	ldr.w	r3, [r9]
 800f9f0:	4404      	add	r4, r0
 800f9f2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800f9f6:	b332      	cbz	r2, 800fa46 <GUI_AA_DrawCircle+0xb6>
 800f9f8:	1ba8      	subs	r0, r5, r6
 800f9fa:	f000 faad 	bl	800ff58 <GUI_AA_HiRes2Pixel>
 800f9fe:	f8ad 0000 	strh.w	r0, [sp]
 800fa02:	19a8      	adds	r0, r5, r6
 800fa04:	f000 faa8 	bl	800ff58 <GUI_AA_HiRes2Pixel>
 800fa08:	f8ad 0004 	strh.w	r0, [sp, #4]
 800fa0c:	1ba0      	subs	r0, r4, r6
 800fa0e:	f000 faa3 	bl	800ff58 <GUI_AA_HiRes2Pixel>
 800fa12:	f8ad 0002 	strh.w	r0, [sp, #2]
 800fa16:	19a0      	adds	r0, r4, r6
 800fa18:	f000 fa9e 	bl	800ff58 <GUI_AA_HiRes2Pixel>
 800fa1c:	f8ad 0006 	strh.w	r0, [sp, #6]
 800fa20:	4668      	mov	r0, sp
 800fa22:	f00d fd91 	bl	801d548 <WM__InitIVRSearch>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0d6      	beq.n	800f9d8 <GUI_AA_DrawCircle+0x48>
 800fa2a:	4632      	mov	r2, r6
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f7ff fea4 	bl	800f77c <GL_DrawCircleAA_HiRes>
 800fa34:	f00d fc5e 	bl	801d2f4 <WM__GetNextIVR>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d1f6      	bne.n	800fa2a <GUI_AA_DrawCircle+0x9a>
 800fa3c:	f006 fc08 	bl	8016250 <GUI_Unlock>
 800fa40:	b003      	add	sp, #12
 800fa42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa46:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fa4a:	fb03 f505 	mul.w	r5, r3, r5
 800fa4e:	fb03 f404 	mul.w	r4, r3, r4
 800fa52:	fb03 f606 	mul.w	r6, r3, r6
 800fa56:	e7cf      	b.n	800f9f8 <GUI_AA_DrawCircle+0x68>
 800fa58:	20000168 	.word	0x20000168
 800fa5c:	20000018 	.word	0x20000018

0800fa60 <_FlushLine>:
 800fa60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	f8df a110 	ldr.w	sl, [pc, #272]	; 800fb78 <_FlushLine+0x118>
 800fa68:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800fb88 <_FlushLine+0x128>
 800fa6c:	f8da 1008 	ldr.w	r1, [sl, #8]
 800fa70:	f8d9 3000 	ldr.w	r3, [r9]
 800fa74:	e89a 0014 	ldmia.w	sl, {r2, r4}
 800fa78:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 800fa7c:	1aa4      	subs	r4, r4, r2
 800fa7e:	fb15 f505 	smulbb	r5, r5, r5
 800fa82:	428c      	cmp	r4, r1
 800fa84:	bfa8      	it	ge
 800fa86:	f101 34ff 	addge.w	r4, r1, #4294967295
 800fa8a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fa8c:	2900      	cmp	r1, #0
 800fa8e:	d06f      	beq.n	800fb70 <_FlushLine+0x110>
 800fa90:	f8da 100c 	ldr.w	r1, [sl, #12]
 800fa94:	4b38      	ldr	r3, [pc, #224]	; (800fb78 <_FlushLine+0x118>)
 800fa96:	ebc2 0e01 	rsb	lr, r2, r1
 800fa9a:	6918      	ldr	r0, [r3, #16]
 800fa9c:	4574      	cmp	r4, lr
 800fa9e:	db32      	blt.n	800fb06 <_FlushLine+0xa6>
 800faa0:	ea4f 0865 	mov.w	r8, r5, asr #1
 800faa4:	270f      	movs	r7, #15
 800faa6:	e004      	b.n	800fab2 <_FlushLine+0x52>
 800faa8:	f10e 0601 	add.w	r6, lr, #1
 800faac:	42b4      	cmp	r4, r6
 800faae:	46b6      	mov	lr, r6
 800fab0:	db29      	blt.n	800fb06 <_FlushLine+0xa6>
 800fab2:	f810 300e 	ldrb.w	r3, [r0, lr]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d0f6      	beq.n	800faa8 <_FlushLine+0x48>
 800faba:	429d      	cmp	r5, r3
 800fabc:	d136      	bne.n	800fb2c <_FlushLine+0xcc>
 800fabe:	4574      	cmp	r4, lr
 800fac0:	f10e 0601 	add.w	r6, lr, #1
 800fac4:	dd46      	ble.n	800fb54 <_FlushLine+0xf4>
 800fac6:	5d83      	ldrb	r3, [r0, r6]
 800fac8:	4430      	add	r0, r6
 800faca:	429d      	cmp	r5, r3
 800facc:	d142      	bne.n	800fb54 <_FlushLine+0xf4>
 800face:	4673      	mov	r3, lr
 800fad0:	e003      	b.n	800fada <_FlushLine+0x7a>
 800fad2:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800fad6:	428d      	cmp	r5, r1
 800fad8:	d13a      	bne.n	800fb50 <_FlushLine+0xf0>
 800fada:	3301      	adds	r3, #1
 800fadc:	429c      	cmp	r4, r3
 800fade:	d1f8      	bne.n	800fad2 <_FlushLine+0x72>
 800fae0:	4623      	mov	r3, r4
 800fae2:	f8da 6018 	ldr.w	r6, [sl, #24]
 800fae6:	eb0e 0002 	add.w	r0, lr, r2
 800faea:	f8da 1014 	ldr.w	r1, [sl, #20]
 800faee:	441a      	add	r2, r3
 800faf0:	f8d6 b000 	ldr.w	fp, [r6]
 800faf4:	1c5e      	adds	r6, r3, #1
 800faf6:	47d8      	blx	fp
 800faf8:	f8da 0010 	ldr.w	r0, [sl, #16]
 800fafc:	42b4      	cmp	r4, r6
 800fafe:	f8da 2000 	ldr.w	r2, [sl]
 800fb02:	46b6      	mov	lr, r6
 800fb04:	dad5      	bge.n	800fab2 <_FlushLine+0x52>
 800fb06:	f8da 301c 	ldr.w	r3, [sl, #28]
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	4c1b      	ldr	r4, [pc, #108]	; (800fb7c <_FlushLine+0x11c>)
 800fb0e:	1a9a      	subs	r2, r3, r2
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	3201      	adds	r2, #1
 800fb14:	4798      	blx	r3
 800fb16:	4b1a      	ldr	r3, [pc, #104]	; (800fb80 <_FlushLine+0x120>)
 800fb18:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800fb1c:	f8ca 3014 	str.w	r3, [sl, #20]
 800fb20:	f8ca 3004 	str.w	r3, [sl, #4]
 800fb24:	f8ca 200c 	str.w	r2, [sl, #12]
 800fb28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2c:	fb17 8303 	smlabb	r3, r7, r3, r8
 800fb30:	eb0e 0002 	add.w	r0, lr, r2
 800fb34:	f8da 1014 	ldr.w	r1, [sl, #20]
 800fb38:	f10e 0601 	add.w	r6, lr, #1
 800fb3c:	fb93 f2f5 	sdiv	r2, r3, r5
 800fb40:	b2d2      	uxtb	r2, r2
 800fb42:	f008 f87f 	bl	8017c44 <LCD_SetPixelAA4_Trans>
 800fb46:	f8da 0010 	ldr.w	r0, [sl, #16]
 800fb4a:	f8da 2000 	ldr.w	r2, [sl]
 800fb4e:	e7ad      	b.n	800faac <_FlushLine+0x4c>
 800fb50:	4573      	cmp	r3, lr
 800fb52:	d1c6      	bne.n	800fae2 <_FlushLine+0x82>
 800fb54:	f8d9 3000 	ldr.w	r3, [r9]
 800fb58:	eb0e 0002 	add.w	r0, lr, r2
 800fb5c:	f8da 1014 	ldr.w	r1, [sl, #20]
 800fb60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	4798      	blx	r3
 800fb66:	f8da 0010 	ldr.w	r0, [sl, #16]
 800fb6a:	f8da 2000 	ldr.w	r2, [sl]
 800fb6e:	e79d      	b.n	800faac <_FlushLine+0x4c>
 800fb70:	4904      	ldr	r1, [pc, #16]	; (800fb84 <_FlushLine+0x124>)
 800fb72:	66d9      	str	r1, [r3, #108]	; 0x6c
 800fb74:	e78c      	b.n	800fa90 <_FlushLine+0x30>
 800fb76:	bf00      	nop
 800fb78:	20000170 	.word	0x20000170
 800fb7c:	20000050 	.word	0x20000050
 800fb80:	ffffc001 	.word	0xffffc001
 800fb84:	08017c45 	.word	0x08017c45
 800fb88:	20000018 	.word	0x20000018

0800fb8c <_OnExit>:
 800fb8c:	b510      	push	{r4, lr}
 800fb8e:	4c03      	ldr	r4, [pc, #12]	; (800fb9c <_OnExit+0x10>)
 800fb90:	6a20      	ldr	r0, [r4, #32]
 800fb92:	f001 fdaf 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 800fb96:	2300      	movs	r3, #0
 800fb98:	6223      	str	r3, [r4, #32]
 800fb9a:	bd10      	pop	{r4, pc}
 800fb9c:	20000170 	.word	0x20000170

0800fba0 <_DrawHLine>:
 800fba0:	4282      	cmp	r2, r0
 800fba2:	db7a      	blt.n	800fc9a <_DrawHLine+0xfa>
 800fba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba8:	4d41      	ldr	r5, [pc, #260]	; (800fcb0 <_DrawHLine+0x110>)
 800fbaa:	4614      	mov	r4, r2
 800fbac:	4680      	mov	r8, r0
 800fbae:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800fcb4 <_DrawHLine+0x114>
 800fbb2:	682a      	ldr	r2, [r5, #0]
 800fbb4:	460e      	mov	r6, r1
 800fbb6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fbba:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
 800fbbe:	fb91 f2f0 	sdiv	r2, r1, r0
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d008      	beq.n	800fbd8 <_DrawHLine+0x38>
 800fbc6:	f7ff ff4b 	bl	800fa60 <_FlushLine>
 800fbca:	682b      	ldr	r3, [r5, #0]
 800fbcc:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 800fbd0:	fb96 f6f0 	sdiv	r6, r6, r0
 800fbd4:	f8c9 6014 	str.w	r6, [r9, #20]
 800fbd8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800fbdc:	4935      	ldr	r1, [pc, #212]	; (800fcb4 <_DrawHLine+0x114>)
 800fbde:	f8d9 7000 	ldr.w	r7, [r9]
 800fbe2:	fb98 f3f0 	sdiv	r3, r8, r0
 800fbe6:	fb94 f6f0 	sdiv	r6, r4, r0
 800fbea:	4293      	cmp	r3, r2
 800fbec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800fbf0:	bfb8      	it	lt
 800fbf2:	60cb      	strlt	r3, [r1, #12]
 800fbf4:	4296      	cmp	r6, r2
 800fbf6:	492f      	ldr	r1, [pc, #188]	; (800fcb4 <_DrawHLine+0x114>)
 800fbf8:	4a2e      	ldr	r2, [pc, #184]	; (800fcb4 <_DrawHLine+0x114>)
 800fbfa:	bfc8      	it	gt
 800fbfc:	604e      	strgt	r6, [r1, #4]
 800fbfe:	42bb      	cmp	r3, r7
 800fc00:	69d2      	ldr	r2, [r2, #28]
 800fc02:	da41      	bge.n	800fc88 <_DrawHLine+0xe8>
 800fc04:	4296      	cmp	r6, r2
 800fc06:	fb00 f807 	mul.w	r8, r0, r7
 800fc0a:	dc3f      	bgt.n	800fc8c <_DrawHLine+0xec>
 800fc0c:	4544      	cmp	r4, r8
 800fc0e:	db42      	blt.n	800fc96 <_DrawHLine+0xf6>
 800fc10:	fb98 f3f0 	sdiv	r3, r8, r0
 800fc14:	fb94 f6f0 	sdiv	r6, r4, r0
 800fc18:	f8d9 9010 	ldr.w	r9, [r9, #16]
 800fc1c:	ebc7 0c03 	rsb	ip, r7, r3
 800fc20:	1af2      	subs	r2, r6, r3
 800fc22:	eb09 010c 	add.w	r1, r9, ip
 800fc26:	d039      	beq.n	800fc9c <_DrawHLine+0xfc>
 800fc28:	3301      	adds	r3, #1
 800fc2a:	f819 a00c 	ldrb.w	sl, [r9, ip]
 800fc2e:	2a01      	cmp	r2, #1
 800fc30:	f101 0e01 	add.w	lr, r1, #1
 800fc34:	fb13 f300 	smulbb	r3, r3, r0
 800fc38:	ebc8 0003 	rsb	r0, r8, r3
 800fc3c:	4450      	add	r0, sl
 800fc3e:	f809 000c 	strb.w	r0, [r9, ip]
 800fc42:	dd0e      	ble.n	800fc62 <_DrawHLine+0xc2>
 800fc44:	eb01 0c02 	add.w	ip, r1, r2
 800fc48:	4673      	mov	r3, lr
 800fc4a:	6828      	ldr	r0, [r5, #0]
 800fc4c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fc50:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 800fc54:	4563      	cmp	r3, ip
 800fc56:	4401      	add	r1, r0
 800fc58:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fc5c:	d1f5      	bne.n	800fc4a <_DrawHLine+0xaa>
 800fc5e:	3a01      	subs	r2, #1
 800fc60:	4496      	add	lr, r2
 800fc62:	682b      	ldr	r3, [r5, #0]
 800fc64:	2f00      	cmp	r7, #0
 800fc66:	f104 0401 	add.w	r4, r4, #1
 800fc6a:	f89e 1000 	ldrb.w	r1, [lr]
 800fc6e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fc72:	bfb8      	it	lt
 800fc74:	f106 36ff 	addlt.w	r6, r6, #4294967295
 800fc78:	fb13 f306 	smulbb	r3, r3, r6
 800fc7c:	1ae3      	subs	r3, r4, r3
 800fc7e:	440b      	add	r3, r1
 800fc80:	f88e 3000 	strb.w	r3, [lr]
 800fc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc88:	4296      	cmp	r6, r2
 800fc8a:	ddc5      	ble.n	800fc18 <_DrawHLine+0x78>
 800fc8c:	fb02 0200 	mla	r2, r2, r0, r0
 800fc90:	1e54      	subs	r4, r2, #1
 800fc92:	4544      	cmp	r4, r8
 800fc94:	dabc      	bge.n	800fc10 <_DrawHLine+0x70>
 800fc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9a:	4770      	bx	lr
 800fc9c:	1c60      	adds	r0, r4, #1
 800fc9e:	f819 300c 	ldrb.w	r3, [r9, ip]
 800fca2:	ebc8 0000 	rsb	r0, r8, r0
 800fca6:	4418      	add	r0, r3
 800fca8:	f809 000c 	strb.w	r0, [r9, ip]
 800fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb0:	20000018 	.word	0x20000018
 800fcb4:	20000170 	.word	0x20000170

0800fcb8 <GUI_AA_Init>:
 800fcb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcbc:	4c3d      	ldr	r4, [pc, #244]	; (800fdb4 <GUI_AA_Init+0xfc>)
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	460d      	mov	r5, r1
 800fcc2:	6a27      	ldr	r7, [r4, #32]
 800fcc4:	2f00      	cmp	r7, #0
 800fcc6:	d058      	beq.n	800fd7a <GUI_AA_Init+0xc2>
 800fcc8:	f04f 0800 	mov.w	r8, #0
 800fccc:	4b3a      	ldr	r3, [pc, #232]	; (800fdb8 <GUI_AA_Init+0x100>)
 800fcce:	68a1      	ldr	r1, [r4, #8]
 800fcd0:	6818      	ldr	r0, [r3, #0]
 800fcd2:	42b0      	cmp	r0, r6
 800fcd4:	bfb8      	it	lt
 800fcd6:	4630      	movlt	r0, r6
 800fcd8:	1a2b      	subs	r3, r5, r0
 800fcda:	428b      	cmp	r3, r1
 800fcdc:	db01      	blt.n	800fce2 <GUI_AA_Init+0x2a>
 800fcde:	4401      	add	r1, r0
 800fce0:	1e4d      	subs	r5, r1, #1
 800fce2:	4285      	cmp	r5, r0
 800fce4:	da46      	bge.n	800fd74 <GUI_AA_Init+0xbc>
 800fce6:	f04f 0801 	mov.w	r8, #1
 800fcea:	4605      	mov	r5, r0
 800fcec:	4642      	mov	r2, r8
 800fcee:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800fdd0 <GUI_AA_Init+0x118>
 800fcf2:	4932      	ldr	r1, [pc, #200]	; (800fdbc <GUI_AA_Init+0x104>)
 800fcf4:	f8d9 e000 	ldr.w	lr, [r9]
 800fcf8:	4e31      	ldr	r6, [pc, #196]	; (800fdc0 <GUI_AA_Init+0x108>)
 800fcfa:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 800fcfe:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 800fdd4 <GUI_AA_Init+0x11c>
 800fd02:	6020      	str	r0, [r4, #0]
 800fd04:	61e5      	str	r5, [r4, #28]
 800fd06:	680d      	ldr	r5, [r1, #0]
 800fd08:	6127      	str	r7, [r4, #16]
 800fd0a:	61a3      	str	r3, [r4, #24]
 800fd0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fd10:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 800fd14:	e886 0003 	stmia.w	r6, {r0, r1}
 800fd18:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	2100      	movs	r1, #0
 800fd20:	f643 77ff 	movw	r7, #16383	; 0x3fff
 800fd24:	47a8      	blx	r5
 800fd26:	f8d9 5000 	ldr.w	r5, [r9]
 800fd2a:	f106 0e08 	add.w	lr, r6, #8
 800fd2e:	4e25      	ldr	r6, [pc, #148]	; (800fdc4 <GUI_AA_Init+0x10c>)
 800fd30:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 800fd34:	4640      	mov	r0, r8
 800fd36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd3a:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 800fd3e:	3201      	adds	r2, #1
 800fd40:	3301      	adds	r3, #1
 800fd42:	f8c5 e014 	str.w	lr, [r5, #20]
 800fd46:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fd4a:	fb12 f201 	smulbb	r2, r2, r1
 800fd4e:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 800fd52:	fb13 f301 	smulbb	r3, r3, r1
 800fd56:	fb1c f501 	smulbb	r5, ip, r1
 800fd5a:	3a01      	subs	r2, #1
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	6166      	str	r6, [r4, #20]
 800fd60:	fb1e f101 	smulbb	r1, lr, r1
 800fd64:	6066      	str	r6, [r4, #4]
 800fd66:	8722      	strh	r2, [r4, #56]	; 0x38
 800fd68:	8763      	strh	r3, [r4, #58]	; 0x3a
 800fd6a:	86a5      	strh	r5, [r4, #52]	; 0x34
 800fd6c:	86e1      	strh	r1, [r4, #54]	; 0x36
 800fd6e:	60e7      	str	r7, [r4, #12]
 800fd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd74:	1a2a      	subs	r2, r5, r0
 800fd76:	3201      	adds	r2, #1
 800fd78:	e7b9      	b.n	800fcee <GUI_AA_Init+0x36>
 800fd7a:	4b13      	ldr	r3, [pc, #76]	; (800fdc8 <GUI_AA_Init+0x110>)
 800fd7c:	6818      	ldr	r0, [r3, #0]
 800fd7e:	60a0      	str	r0, [r4, #8]
 800fd80:	b198      	cbz	r0, 800fdaa <GUI_AA_Init+0xf2>
 800fd82:	f001 fcc1 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 800fd86:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800fdb4 <GUI_AA_Init+0xfc>
 800fd8a:	6220      	str	r0, [r4, #32]
 800fd8c:	b150      	cbz	r0, 800fda4 <GUI_AA_Init+0xec>
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <GUI_AA_Init+0x114>)
 800fd90:	4648      	mov	r0, r9
 800fd92:	f04f 0800 	mov.w	r8, #0
 800fd96:	f840 3f24 	str.w	r3, [r0, #36]!
 800fd9a:	f002 fe4d 	bl	8012a38 <GUI__RegisterExit>
 800fd9e:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800fda2:	e793      	b.n	800fccc <GUI_AA_Init+0x14>
 800fda4:	f04f 0801 	mov.w	r8, #1
 800fda8:	e790      	b.n	800fccc <GUI_AA_Init+0x14>
 800fdaa:	f008 f987 	bl	80180bc <LCD_GetVXSizeMax>
 800fdae:	60a0      	str	r0, [r4, #8]
 800fdb0:	e7e7      	b.n	800fd82 <GUI_AA_Init+0xca>
 800fdb2:	bf00      	nop
 800fdb4:	20000170 	.word	0x20000170
 800fdb8:	2002af90 	.word	0x2002af90
 800fdbc:	20000050 	.word	0x20000050
 800fdc0:	2000019c 	.word	0x2000019c
 800fdc4:	ffffc001 	.word	0xffffc001
 800fdc8:	2002afd8 	.word	0x2002afd8
 800fdcc:	0800fb8d 	.word	0x0800fb8d
 800fdd0:	20000018 	.word	0x20000018
 800fdd4:	0800fba1 	.word	0x0800fba1

0800fdd8 <GUI_AA_Init_HiRes>:
 800fdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fddc:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800fef8 <GUI_AA_Init_HiRes+0x120>
 800fde0:	4c3e      	ldr	r4, [pc, #248]	; (800fedc <GUI_AA_Init_HiRes+0x104>)
 800fde2:	f8d9 3000 	ldr.w	r3, [r9]
 800fde6:	6a27      	ldr	r7, [r4, #32]
 800fde8:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 800fdec:	fb90 f6f5 	sdiv	r6, r0, r5
 800fdf0:	fb91 f5f5 	sdiv	r5, r1, r5
 800fdf4:	2f00      	cmp	r7, #0
 800fdf6:	d051      	beq.n	800fe9c <GUI_AA_Init_HiRes+0xc4>
 800fdf8:	f04f 0800 	mov.w	r8, #0
 800fdfc:	4a38      	ldr	r2, [pc, #224]	; (800fee0 <GUI_AA_Init_HiRes+0x108>)
 800fdfe:	68a1      	ldr	r1, [r4, #8]
 800fe00:	6810      	ldr	r0, [r2, #0]
 800fe02:	42b0      	cmp	r0, r6
 800fe04:	bfb8      	it	lt
 800fe06:	4630      	movlt	r0, r6
 800fe08:	1a2a      	subs	r2, r5, r0
 800fe0a:	428a      	cmp	r2, r1
 800fe0c:	db01      	blt.n	800fe12 <GUI_AA_Init_HiRes+0x3a>
 800fe0e:	4401      	add	r1, r0
 800fe10:	1e4d      	subs	r5, r1, #1
 800fe12:	42a8      	cmp	r0, r5
 800fe14:	dd3f      	ble.n	800fe96 <GUI_AA_Init_HiRes+0xbe>
 800fe16:	f04f 0801 	mov.w	r8, #1
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	4642      	mov	r2, r8
 800fe1e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800fe20:	6020      	str	r0, [r4, #0]
 800fe22:	4830      	ldr	r0, [pc, #192]	; (800fee4 <GUI_AA_Init_HiRes+0x10c>)
 800fe24:	4e30      	ldr	r6, [pc, #192]	; (800fee8 <GUI_AA_Init_HiRes+0x110>)
 800fe26:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 800fefc <GUI_AA_Init_HiRes+0x124>
 800fe2a:	61e5      	str	r5, [r4, #28]
 800fe2c:	61a1      	str	r1, [r4, #24]
 800fe2e:	6805      	ldr	r5, [r0, #0]
 800fe30:	6127      	str	r7, [r4, #16]
 800fe32:	c903      	ldmia	r1, {r0, r1}
 800fe34:	665e      	str	r6, [r3, #100]	; 0x64
 800fe36:	e886 0003 	stmia.w	r6, {r0, r1}
 800fe3a:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 800fe3e:	4638      	mov	r0, r7
 800fe40:	2100      	movs	r1, #0
 800fe42:	4f2a      	ldr	r7, [pc, #168]	; (800feec <GUI_AA_Init_HiRes+0x114>)
 800fe44:	47a8      	blx	r5
 800fe46:	f8d9 5000 	ldr.w	r5, [r9]
 800fe4a:	f106 0e08 	add.w	lr, r6, #8
 800fe4e:	f643 76ff 	movw	r6, #16383	; 0x3fff
 800fe52:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 800fe56:	4640      	mov	r0, r8
 800fe58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe5c:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 800fe60:	3201      	adds	r2, #1
 800fe62:	3301      	adds	r3, #1
 800fe64:	f8c5 e014 	str.w	lr, [r5, #20]
 800fe68:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800fe6c:	fb12 f201 	smulbb	r2, r2, r1
 800fe70:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 800fe74:	fb13 f301 	smulbb	r3, r3, r1
 800fe78:	fb1c f501 	smulbb	r5, ip, r1
 800fe7c:	3a01      	subs	r2, #1
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	6167      	str	r7, [r4, #20]
 800fe82:	fb1e f101 	smulbb	r1, lr, r1
 800fe86:	6067      	str	r7, [r4, #4]
 800fe88:	8722      	strh	r2, [r4, #56]	; 0x38
 800fe8a:	8763      	strh	r3, [r4, #58]	; 0x3a
 800fe8c:	86a5      	strh	r5, [r4, #52]	; 0x34
 800fe8e:	86e1      	strh	r1, [r4, #54]	; 0x36
 800fe90:	60e6      	str	r6, [r4, #12]
 800fe92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe96:	1a2a      	subs	r2, r5, r0
 800fe98:	3201      	adds	r2, #1
 800fe9a:	e7c0      	b.n	800fe1e <GUI_AA_Init_HiRes+0x46>
 800fe9c:	4b14      	ldr	r3, [pc, #80]	; (800fef0 <GUI_AA_Init_HiRes+0x118>)
 800fe9e:	6818      	ldr	r0, [r3, #0]
 800fea0:	60a0      	str	r0, [r4, #8]
 800fea2:	b1b8      	cbz	r0, 800fed4 <GUI_AA_Init_HiRes+0xfc>
 800fea4:	f001 fc30 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 800fea8:	f8df a030 	ldr.w	sl, [pc, #48]	; 800fedc <GUI_AA_Init_HiRes+0x104>
 800feac:	6220      	str	r0, [r4, #32]
 800feae:	b160      	cbz	r0, 800feca <GUI_AA_Init_HiRes+0xf2>
 800feb0:	4b10      	ldr	r3, [pc, #64]	; (800fef4 <GUI_AA_Init_HiRes+0x11c>)
 800feb2:	4650      	mov	r0, sl
 800feb4:	f04f 0800 	mov.w	r8, #0
 800feb8:	f840 3f24 	str.w	r3, [r0, #36]!
 800febc:	f002 fdbc 	bl	8012a38 <GUI__RegisterExit>
 800fec0:	f8da 7020 	ldr.w	r7, [sl, #32]
 800fec4:	f8d9 3000 	ldr.w	r3, [r9]
 800fec8:	e798      	b.n	800fdfc <GUI_AA_Init_HiRes+0x24>
 800feca:	f8d9 3000 	ldr.w	r3, [r9]
 800fece:	f04f 0801 	mov.w	r8, #1
 800fed2:	e793      	b.n	800fdfc <GUI_AA_Init_HiRes+0x24>
 800fed4:	f008 f8f2 	bl	80180bc <LCD_GetVXSizeMax>
 800fed8:	60a0      	str	r0, [r4, #8]
 800feda:	e7e3      	b.n	800fea4 <GUI_AA_Init_HiRes+0xcc>
 800fedc:	20000170 	.word	0x20000170
 800fee0:	2002af90 	.word	0x2002af90
 800fee4:	20000050 	.word	0x20000050
 800fee8:	2000019c 	.word	0x2000019c
 800feec:	ffffc001 	.word	0xffffc001
 800fef0:	2002afd8 	.word	0x2002afd8
 800fef4:	0800fb8d 	.word	0x0800fb8d
 800fef8:	20000018 	.word	0x20000018
 800fefc:	0800fba1 	.word	0x0800fba1

0800ff00 <GUI_AA_SetFactor>:
 800ff00:	4b0f      	ldr	r3, [pc, #60]	; (800ff40 <GUI_AA_SetFactor+0x40>)
 800ff02:	b4f0      	push	{r4, r5, r6, r7}
 800ff04:	681c      	ldr	r4, [r3, #0]
 800ff06:	b2c6      	uxtb	r6, r0
 800ff08:	4d0e      	ldr	r5, [pc, #56]	; (800ff44 <GUI_AA_SetFactor+0x44>)
 800ff0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff0e:	b2b1      	uxth	r1, r6
 800ff10:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ff14:	3201      	adds	r2, #1
 800ff16:	8920      	ldrh	r0, [r4, #8]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	8967      	ldrh	r7, [r4, #10]
 800ff1c:	fb12 f201 	smulbb	r2, r2, r1
 800ff20:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
 800ff24:	fb13 f301 	smulbb	r3, r3, r1
 800ff28:	fb10 f001 	smulbb	r0, r0, r1
 800ff2c:	3a01      	subs	r2, #1
 800ff2e:	fb17 f101 	smulbb	r1, r7, r1
 800ff32:	3b01      	subs	r3, #1
 800ff34:	872a      	strh	r2, [r5, #56]	; 0x38
 800ff36:	86a8      	strh	r0, [r5, #52]	; 0x34
 800ff38:	86e9      	strh	r1, [r5, #54]	; 0x36
 800ff3a:	876b      	strh	r3, [r5, #58]	; 0x3a
 800ff3c:	bcf0      	pop	{r4, r5, r6, r7}
 800ff3e:	4770      	bx	lr
 800ff40:	20000018 	.word	0x20000018
 800ff44:	20000170 	.word	0x20000170

0800ff48 <GUI_AA_DisableHiRes>:
 800ff48:	4b02      	ldr	r3, [pc, #8]	; (800ff54 <GUI_AA_DisableHiRes+0xc>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800ff52:	4770      	bx	lr
 800ff54:	20000018 	.word	0x20000018

0800ff58 <GUI_AA_HiRes2Pixel>:
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <GUI_AA_HiRes2Pixel+0x18>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ff60:	b90b      	cbnz	r3, 800ff66 <GUI_AA_HiRes2Pixel+0xe>
 800ff62:	b200      	sxth	r0, r0
 800ff64:	4770      	bx	lr
 800ff66:	fb90 f0f3 	sdiv	r0, r0, r3
 800ff6a:	b200      	sxth	r0, r0
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	20000018 	.word	0x20000018

0800ff74 <GUI_AA_Exit>:
 800ff74:	b508      	push	{r3, lr}
 800ff76:	f7ff fd73 	bl	800fa60 <_FlushLine>
 800ff7a:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <GUI_AA_Exit+0x18>)
 800ff7c:	4a04      	ldr	r2, [pc, #16]	; (800ff90 <GUI_AA_Exit+0x1c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6991      	ldr	r1, [r2, #24]
 800ff82:	f103 0208 	add.w	r2, r3, #8
 800ff86:	6659      	str	r1, [r3, #100]	; 0x64
 800ff88:	615a      	str	r2, [r3, #20]
 800ff8a:	bd08      	pop	{r3, pc}
 800ff8c:	20000018 	.word	0x20000018
 800ff90:	20000170 	.word	0x20000170

0800ff94 <GUI_AA_DrawLine>:
 800ff94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff98:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8010110 <GUI_AA_DrawLine+0x17c>
 800ff9c:	b087      	sub	sp, #28
 800ff9e:	4698      	mov	r8, r3
 800ffa0:	4606      	mov	r6, r0
 800ffa2:	460d      	mov	r5, r1
 800ffa4:	4692      	mov	sl, r2
 800ffa6:	f006 f95d 	bl	8016264 <GUI_Lock>
 800ffaa:	f8d9 3000 	ldr.w	r3, [r9]
 800ffae:	b15b      	cbz	r3, 800ffc8 <GUI_AA_DrawLine+0x34>
 800ffb0:	4f56      	ldr	r7, [pc, #344]	; (801010c <GUI_AA_DrawLine+0x178>)
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffba:	4416      	add	r6, r2
 800ffbc:	441d      	add	r5, r3
 800ffbe:	f00d fac3 	bl	801d548 <WM__InitIVRSearch>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f040 808d 	bne.w	80100e2 <GUI_AA_DrawLine+0x14e>
 800ffc8:	f00e fc96 	bl	801e8f8 <WM__GetOrgX_AA>
 800ffcc:	4683      	mov	fp, r0
 800ffce:	f00e fca1 	bl	801e914 <WM__GetOrgY_AA>
 800ffd2:	4607      	mov	r7, r0
 800ffd4:	f00e fc90 	bl	801e8f8 <WM__GetOrgX_AA>
 800ffd8:	4681      	mov	r9, r0
 800ffda:	f00e fc9b 	bl	801e914 <WM__GetOrgY_AA>
 800ffde:	4604      	mov	r4, r0
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	f00d fab1 	bl	801d548 <WM__InitIVRSearch>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	f000 808a 	beq.w	8010100 <GUI_AA_DrawLine+0x16c>
 800ffec:	eb0a 0209 	add.w	r2, sl, r9
 800fff0:	eb0b 0306 	add.w	r3, fp, r6
 800fff4:	4610      	mov	r0, r2
 800fff6:	9203      	str	r2, [sp, #12]
 800fff8:	197a      	adds	r2, r7, r5
 800fffa:	4f44      	ldr	r7, [pc, #272]	; (801010c <GUI_AA_DrawLine+0x178>)
 800fffc:	4283      	cmp	r3, r0
 800fffe:	9301      	str	r3, [sp, #4]
 8010000:	9202      	str	r2, [sp, #8]
 8010002:	eb08 0204 	add.w	r2, r8, r4
 8010006:	46bb      	mov	fp, r7
 8010008:	9204      	str	r2, [sp, #16]
 801000a:	461a      	mov	r2, r3
 801000c:	bfa8      	it	ge
 801000e:	4602      	movge	r2, r0
 8010010:	4283      	cmp	r3, r0
 8010012:	9205      	str	r2, [sp, #20]
 8010014:	461a      	mov	r2, r3
 8010016:	bfb8      	it	lt
 8010018:	4602      	movlt	r2, r0
 801001a:	9200      	str	r2, [sp, #0]
 801001c:	e02e      	b.n	801007c <GUI_AA_DrawLine+0xe8>
 801001e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010022:	fb9c f0f1 	sdiv	r0, ip, r1
 8010026:	fb9e f1f1 	sdiv	r1, lr, r1
 801002a:	f7ff fe45 	bl	800fcb8 <GUI_AA_Init>
 801002e:	4620      	mov	r0, r4
 8010030:	f002 fa42 	bl	80124b8 <GUI_SetPenSize>
 8010034:	4633      	mov	r3, r6
 8010036:	4642      	mov	r2, r8
 8010038:	4651      	mov	r1, sl
 801003a:	4648      	mov	r0, r9
 801003c:	f003 fadc 	bl	80135f8 <GL_DrawLine>
 8010040:	f7ff ff98 	bl	800ff74 <GUI_AA_Exit>
 8010044:	b987      	cbnz	r7, 8010068 <GUI_AA_DrawLine+0xd4>
 8010046:	f8db 3000 	ldr.w	r3, [fp]
 801004a:	4651      	mov	r1, sl
 801004c:	4648      	mov	r0, r9
 801004e:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 8010052:	fb14 f405 	smulbb	r4, r4, r5
 8010056:	1064      	asrs	r4, r4, #1
 8010058:	4622      	mov	r2, r4
 801005a:	f7ff fb13 	bl	800f684 <GL_FillCircleAA_HiRes>
 801005e:	4622      	mov	r2, r4
 8010060:	4631      	mov	r1, r6
 8010062:	4640      	mov	r0, r8
 8010064:	f7ff fb0e 	bl	800f684 <GL_FillCircleAA_HiRes>
 8010068:	4628      	mov	r0, r5
 801006a:	f002 fa25 	bl	80124b8 <GUI_SetPenSize>
 801006e:	4638      	mov	r0, r7
 8010070:	f002 fa30 	bl	80124d4 <GUI_SetPenShape>
 8010074:	f00d f93e 	bl	801d2f4 <WM__GetNextIVR>
 8010078:	2800      	cmp	r0, #0
 801007a:	d041      	beq.n	8010100 <GUI_AA_DrawLine+0x16c>
 801007c:	f002 fa10 	bl	80124a0 <GUI_GetPenSize>
 8010080:	f8db 3000 	ldr.w	r3, [fp]
 8010084:	4605      	mov	r5, r0
 8010086:	2001      	movs	r0, #1
 8010088:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 801008c:	9e04      	ldr	r6, [sp, #16]
 801008e:	fb14 f405 	smulbb	r4, r4, r5
 8010092:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010096:	f8dd a008 	ldr.w	sl, [sp, #8]
 801009a:	b2e4      	uxtb	r4, r4
 801009c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80100a0:	f002 fa18 	bl	80124d4 <GUI_SetPenShape>
 80100a4:	9905      	ldr	r1, [sp, #20]
 80100a6:	9a00      	ldr	r2, [sp, #0]
 80100a8:	4607      	mov	r7, r0
 80100aa:	f8db 3000 	ldr.w	r3, [fp]
 80100ae:	ebc4 0c01 	rsb	ip, r4, r1
 80100b2:	eb04 0e02 	add.w	lr, r4, r2
 80100b6:	1b48      	subs	r0, r1, r5
 80100b8:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80100bc:	9900      	ldr	r1, [sp, #0]
 80100be:	4429      	add	r1, r5
 80100c0:	2a00      	cmp	r2, #0
 80100c2:	d1ac      	bne.n	801001e <GUI_AA_DrawLine+0x8a>
 80100c4:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 80100c8:	9b01      	ldr	r3, [sp, #4]
 80100ca:	fb06 f903 	mul.w	r9, r6, r3
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	fb06 f803 	mul.w	r8, r6, r3
 80100d4:	9b02      	ldr	r3, [sp, #8]
 80100d6:	fb06 fa03 	mul.w	sl, r6, r3
 80100da:	9b04      	ldr	r3, [sp, #16]
 80100dc:	fb06 f603 	mul.w	r6, r6, r3
 80100e0:	e7a3      	b.n	801002a <GUI_AA_DrawLine+0x96>
 80100e2:	f8d9 4000 	ldr.w	r4, [r9]
 80100e6:	4643      	mov	r3, r8
 80100e8:	4652      	mov	r2, sl
 80100ea:	4629      	mov	r1, r5
 80100ec:	4630      	mov	r0, r6
 80100ee:	47a0      	blx	r4
 80100f0:	4604      	mov	r4, r0
 80100f2:	f00d f8ff 	bl	801d2f4 <WM__GetNextIVR>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d1f3      	bne.n	80100e2 <GUI_AA_DrawLine+0x14e>
 80100fa:	2c00      	cmp	r4, #0
 80100fc:	f47f af64 	bne.w	800ffc8 <GUI_AA_DrawLine+0x34>
 8010100:	b007      	add	sp, #28
 8010102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010106:	f006 b8a3 	b.w	8016250 <GUI_Unlock>
 801010a:	bf00      	nop
 801010c:	20000018 	.word	0x20000018
 8010110:	200001ac 	.word	0x200001ac

08010114 <_Color2Index_1616I>:
 8010114:	4b06      	ldr	r3, [pc, #24]	; (8010130 <_Color2Index_1616I+0x1c>)
 8010116:	b510      	push	{r4, lr}
 8010118:	4604      	mov	r4, r0
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010120:	4798      	blx	r3
 8010122:	4b04      	ldr	r3, [pc, #16]	; (8010134 <_Color2Index_1616I+0x20>)
 8010124:	0e24      	lsrs	r4, r4, #24
 8010126:	5d1b      	ldrb	r3, [r3, r4]
 8010128:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801012c:	bd10      	pop	{r4, pc}
 801012e:	bf00      	nop
 8010130:	0802a808 	.word	0x0802a808
 8010134:	08023ee4 	.word	0x08023ee4

08010138 <_Index2Color_1616I>:
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <_Index2Color_1616I+0x18>)
 801013a:	b510      	push	{r4, lr}
 801013c:	4604      	mov	r4, r0
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	b2c0      	uxtb	r0, r0
 8010142:	4798      	blx	r3
 8010144:	4b03      	ldr	r3, [pc, #12]	; (8010154 <_Index2Color_1616I+0x1c>)
 8010146:	0924      	lsrs	r4, r4, #4
 8010148:	5d1b      	ldrb	r3, [r3, r4]
 801014a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801014e:	bd10      	pop	{r4, pc}
 8010150:	0802a808 	.word	0x0802a808
 8010154:	08024044 	.word	0x08024044

08010158 <_GetIndexMask_1616I>:
 8010158:	20ff      	movs	r0, #255	; 0xff
 801015a:	4770      	bx	lr

0801015c <_Color2IndexBulk_1616I>:
 801015c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010160:	4c0b      	ldr	r4, [pc, #44]	; (8010190 <_Color2IndexBulk_1616I+0x34>)
 8010162:	4605      	mov	r5, r0
 8010164:	4689      	mov	r9, r1
 8010166:	4692      	mov	sl, r2
 8010168:	4698      	mov	r8, r3
 801016a:	6827      	ldr	r7, [r4, #0]
 801016c:	4e09      	ldr	r6, [pc, #36]	; (8010194 <_Color2IndexBulk_1616I+0x38>)
 801016e:	f855 4b04 	ldr.w	r4, [r5], #4
 8010172:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8010176:	0e24      	lsrs	r4, r4, #24
 8010178:	47b8      	blx	r7
 801017a:	f1ba 0a01 	subs.w	sl, sl, #1
 801017e:	5d33      	ldrb	r3, [r6, r4]
 8010180:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8010184:	f889 0000 	strb.w	r0, [r9]
 8010188:	44c1      	add	r9, r8
 801018a:	d1f0      	bne.n	801016e <_Color2IndexBulk_1616I+0x12>
 801018c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010190:	0802a808 	.word	0x0802a808
 8010194:	08023ee4 	.word	0x08023ee4

08010198 <_Index2ColorBulk_1616I>:
 8010198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801019c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 80101a0:	4c0e      	ldr	r4, [pc, #56]	; (80101dc <_Index2ColorBulk_1616I+0x44>)
 80101a2:	f102 39ff 	add.w	r9, r2, #4294967295
 80101a6:	f1c3 0800 	rsb	r8, r3, #0
 80101aa:	4492      	add	sl, r2
 80101ac:	6867      	ldr	r7, [r4, #4]
 80101ae:	fb03 0509 	mla	r5, r3, r9, r0
 80101b2:	4e0b      	ldr	r6, [pc, #44]	; (80101e0 <_Index2ColorBulk_1616I+0x48>)
 80101b4:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 80101b8:	e001      	b.n	80101be <_Index2ColorBulk_1616I+0x26>
 80101ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80101be:	782c      	ldrb	r4, [r5, #0]
 80101c0:	4445      	add	r5, r8
 80101c2:	4620      	mov	r0, r4
 80101c4:	0924      	lsrs	r4, r4, #4
 80101c6:	47b8      	blx	r7
 80101c8:	5d32      	ldrb	r2, [r6, r4]
 80101ca:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80101ce:	f84a 0904 	str.w	r0, [sl], #-4
 80101d2:	f1b9 0f00 	cmp.w	r9, #0
 80101d6:	d1f0      	bne.n	80101ba <_Index2ColorBulk_1616I+0x22>
 80101d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101dc:	0802a808 	.word	0x0802a808
 80101e0:	08024044 	.word	0x08024044

080101e4 <_Color2Index_822216>:
 80101e4:	b430      	push	{r4, r5}
 80101e6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80101ea:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80101ee:	4d0e      	ldr	r5, [pc, #56]	; (8010228 <_Color2Index_822216+0x44>)
 80101f0:	0e01      	lsrs	r1, r0, #24
 80101f2:	b2c2      	uxtb	r2, r0
 80101f4:	429c      	cmp	r4, r3
 80101f6:	fba5 1001 	umull	r1, r0, r5, r1
 80101fa:	ea4f 1010 	mov.w	r0, r0, lsr #4
 80101fe:	d106      	bne.n	801020e <_Color2Index_822216+0x2a>
 8010200:	42a2      	cmp	r2, r4
 8010202:	d104      	bne.n	801020e <_Color2Index_822216+0x2a>
 8010204:	0100      	lsls	r0, r0, #4
 8010206:	bc30      	pop	{r4, r5}
 8010208:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 801020c:	4770      	bx	lr
 801020e:	09d1      	lsrs	r1, r2, #7
 8010210:	09da      	lsrs	r2, r3, #7
 8010212:	09e4      	lsrs	r4, r4, #7
 8010214:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010218:	f042 0208 	orr.w	r2, r2, #8
 801021c:	ea42 1300 	orr.w	r3, r2, r0, lsl #4
 8010220:	ea43 0044 	orr.w	r0, r3, r4, lsl #1
 8010224:	bc30      	pop	{r4, r5}
 8010226:	4770      	bx	lr
 8010228:	f0f0f0f1 	.word	0xf0f0f0f1

0801022c <_Index2Color_822216>:
 801022c:	0703      	lsls	r3, r0, #28
 801022e:	d516      	bpl.n	801025e <_Index2Color_822216+0x32>
 8010230:	f000 0201 	and.w	r2, r0, #1
 8010234:	4b13      	ldr	r3, [pc, #76]	; (8010284 <_Index2Color_822216+0x58>)
 8010236:	2a00      	cmp	r2, #0
 8010238:	bf06      	itte	eq
 801023a:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 801023e:	f04f 22ff 	moveq.w	r2, #4278255360	; 0xff00ff00
 8010242:	f46f 027f 	mvnne.w	r2, #16711680	; 0xff0000
 8010246:	f010 0f02 	tst.w	r0, #2
 801024a:	bf18      	it	ne
 801024c:	4613      	movne	r3, r2
 801024e:	f010 0f04 	tst.w	r0, #4
 8010252:	bf0c      	ite	eq
 8010254:	2000      	moveq	r0, #0
 8010256:	f44f 007f 	movne.w	r0, #16711680	; 0xff0000
 801025a:	4318      	orrs	r0, r3
 801025c:	4770      	bx	lr
 801025e:	f000 0107 	and.w	r1, r0, #7
 8010262:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8010266:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 801026a:	0849      	lsrs	r1, r1, #1
 801026c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8010270:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010274:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 8010278:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 801027c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	ff0000ff 	.word	0xff0000ff

08010288 <_GetIndexMask_822216>:
 8010288:	20ff      	movs	r0, #255	; 0xff
 801028a:	4770      	bx	lr

0801028c <_Color2Index_84444>:
 801028c:	4603      	mov	r3, r0
 801028e:	0f80      	lsrs	r0, r0, #30
 8010290:	d017      	beq.n	80102c2 <_Color2Index_84444+0x36>
 8010292:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010296:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801029a:	b2db      	uxtb	r3, r3
 801029c:	4291      	cmp	r1, r2
 801029e:	d105      	bne.n	80102ac <_Color2Index_84444+0x20>
 80102a0:	428b      	cmp	r3, r1
 80102a2:	d103      	bne.n	80102ac <_Color2Index_84444+0x20>
 80102a4:	0912      	lsrs	r2, r2, #4
 80102a6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80102aa:	4770      	bx	lr
 80102ac:	099b      	lsrs	r3, r3, #6
 80102ae:	0992      	lsrs	r2, r2, #6
 80102b0:	0989      	lsrs	r1, r1, #6
 80102b2:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80102b6:	0180      	lsls	r0, r0, #6
 80102b8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80102bc:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 80102c0:	4318      	orrs	r0, r3
 80102c2:	4770      	bx	lr

080102c4 <_GetIndexMask_84444>:
 80102c4:	20ff      	movs	r0, #255	; 0xff
 80102c6:	4770      	bx	lr

080102c8 <_Index2Color_84444>:
 80102c8:	283f      	cmp	r0, #63	; 0x3f
 80102ca:	d804      	bhi.n	80102d6 <_Index2Color_84444+0xe>
 80102cc:	280f      	cmp	r0, #15
 80102ce:	d826      	bhi.n	801031e <_Index2Color_84444+0x56>
 80102d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80102d4:	4770      	bx	lr
 80102d6:	f3c0 0281 	ubfx	r2, r0, #2, #2
 80102da:	f3c0 1301 	ubfx	r3, r0, #4, #2
 80102de:	f000 0103 	and.w	r1, r0, #3
 80102e2:	0980      	lsrs	r0, r0, #6
 80102e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80102e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80102ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80102f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80102f4:	b410      	push	{r4}
 80102f6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80102fa:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 80102fe:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010302:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8010306:	b2e4      	uxtb	r4, r4
 8010308:	b2d2      	uxtb	r2, r2
 801030a:	b2c8      	uxtb	r0, r1
 801030c:	061b      	lsls	r3, r3, #24
 801030e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8010312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010316:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801031a:	4310      	orrs	r0, r2
 801031c:	4770      	bx	lr
 801031e:	f000 030f 	and.w	r3, r0, #15
 8010322:	0900      	lsrs	r0, r0, #4
 8010324:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010328:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801032c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010330:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8010334:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 8010338:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop

08010340 <LCD_Color2Index_8666>:
 8010340:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010344:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010348:	b2c0      	uxtb	r0, r0
 801034a:	4299      	cmp	r1, r3
 801034c:	b410      	push	{r4}
 801034e:	d10a      	bne.n	8010366 <LCD_Color2Index_8666+0x26>
 8010350:	4288      	cmp	r0, r1
 8010352:	d108      	bne.n	8010366 <LCD_Color2Index_8666+0x26>
 8010354:	3308      	adds	r3, #8
 8010356:	4814      	ldr	r0, [pc, #80]	; (80103a8 <LCD_Color2Index_8666+0x68>)
 8010358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801035c:	fba0 3003 	umull	r3, r0, r0, r3
 8010360:	0900      	lsrs	r0, r0, #4
 8010362:	3078      	adds	r0, #120	; 0x78
 8010364:	4770      	bx	lr
 8010366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801036a:	4c10      	ldr	r4, [pc, #64]	; (80103ac <LCD_Color2Index_8666+0x6c>)
 801036c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010370:	307f      	adds	r0, #127	; 0x7f
 8010372:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010376:	327f      	adds	r2, #127	; 0x7f
 8010378:	fba4 3000 	umull	r3, r0, r4, r0
 801037c:	317f      	adds	r1, #127	; 0x7f
 801037e:	fba4 3202 	umull	r3, r2, r4, r2
 8010382:	fba4 3101 	umull	r3, r1, r4, r1
 8010386:	09c0      	lsrs	r0, r0, #7
 8010388:	09d2      	lsrs	r2, r2, #7
 801038a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801038e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8010392:	09c9      	lsrs	r1, r1, #7
 8010394:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8010398:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801039c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80103a0:	286b      	cmp	r0, #107	; 0x6b
 80103a2:	bf88      	it	hi
 80103a4:	3028      	addhi	r0, #40	; 0x28
 80103a6:	4770      	bx	lr
 80103a8:	f0f0f0f1 	.word	0xf0f0f0f1
 80103ac:	80808081 	.word	0x80808081

080103b0 <_GetIndexMask_8666>:
 80103b0:	20ff      	movs	r0, #255	; 0xff
 80103b2:	4770      	bx	lr

080103b4 <LCD_Index2Color_8666>:
 80103b4:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80103b8:	2b0f      	cmp	r3, #15
 80103ba:	b410      	push	{r4}
 80103bc:	d92d      	bls.n	801041a <LCD_Index2Color_8666+0x66>
 80103be:	286b      	cmp	r0, #107	; 0x6b
 80103c0:	d827      	bhi.n	8010412 <LCD_Index2Color_8666+0x5e>
 80103c2:	491e      	ldr	r1, [pc, #120]	; (801043c <LCD_Index2Color_8666+0x88>)
 80103c4:	4b1e      	ldr	r3, [pc, #120]	; (8010440 <LCD_Index2Color_8666+0x8c>)
 80103c6:	fba1 4200 	umull	r4, r2, r1, r0
 80103ca:	fba3 4300 	umull	r4, r3, r3, r0
 80103ce:	0892      	lsrs	r2, r2, #2
 80103d0:	08db      	lsrs	r3, r3, #3
 80103d2:	fba1 4102 	umull	r4, r1, r1, r2
 80103d6:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80103da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80103de:	0889      	lsrs	r1, r1, #2
 80103e0:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 80103e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80103ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80103f0:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 80103f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80103f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80103fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010400:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8010404:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8010408:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 801040c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8010410:	4770      	bx	lr
 8010412:	2893      	cmp	r0, #147	; 0x93
 8010414:	d90e      	bls.n	8010434 <LCD_Index2Color_8666+0x80>
 8010416:	3828      	subs	r0, #40	; 0x28
 8010418:	e7d3      	b.n	80103c2 <LCD_Index2Color_8666+0xe>
 801041a:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 801041e:	4b09      	ldr	r3, [pc, #36]	; (8010444 <LCD_Index2Color_8666+0x90>)
 8010420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010424:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8010428:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 801042c:	4403      	add	r3, r0
 801042e:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 8010432:	4770      	bx	lr
 8010434:	2000      	movs	r0, #0
 8010436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801043a:	4770      	bx	lr
 801043c:	aaaaaaab 	.word	0xaaaaaaab
 8010440:	38e38e39 	.word	0x38e38e39
 8010444:	f8000008 	.word	0xf8000008

08010448 <_GetIndexMask_8666_1>:
 8010448:	20ff      	movs	r0, #255	; 0xff
 801044a:	4770      	bx	lr

0801044c <_Color2Index_8666_1>:
 801044c:	b410      	push	{r4}
 801044e:	b170      	cbz	r0, 801046e <_Color2Index_8666_1+0x22>
 8010450:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010454:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010458:	b2c0      	uxtb	r0, r0
 801045a:	4299      	cmp	r1, r3
 801045c:	d10a      	bne.n	8010474 <_Color2Index_8666_1+0x28>
 801045e:	4288      	cmp	r0, r1
 8010460:	d108      	bne.n	8010474 <_Color2Index_8666_1+0x28>
 8010462:	3308      	adds	r3, #8
 8010464:	4815      	ldr	r0, [pc, #84]	; (80104bc <_Color2Index_8666_1+0x70>)
 8010466:	fba0 3003 	umull	r3, r0, r0, r3
 801046a:	0900      	lsrs	r0, r0, #4
 801046c:	3078      	adds	r0, #120	; 0x78
 801046e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010478:	4c11      	ldr	r4, [pc, #68]	; (80104c0 <_Color2Index_8666_1+0x74>)
 801047a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801047e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010482:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 8010486:	f102 007f 	add.w	r0, r2, #127	; 0x7f
 801048a:	317f      	adds	r1, #127	; 0x7f
 801048c:	fba4 2303 	umull	r2, r3, r4, r3
 8010490:	fba4 2000 	umull	r2, r0, r4, r0
 8010494:	fba4 2101 	umull	r2, r1, r4, r1
 8010498:	09db      	lsrs	r3, r3, #7
 801049a:	09c0      	lsrs	r0, r0, #7
 801049c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104a0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80104a4:	09c9      	lsrs	r1, r1, #7
 80104a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80104aa:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80104ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80104b2:	286b      	cmp	r0, #107	; 0x6b
 80104b4:	bf94      	ite	ls
 80104b6:	300c      	addls	r0, #12
 80104b8:	301c      	addhi	r0, #28
 80104ba:	4770      	bx	lr
 80104bc:	f0f0f0f1 	.word	0xf0f0f0f1
 80104c0:	80808081 	.word	0x80808081

080104c4 <_Index2Color_8666_1>:
 80104c4:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80104c8:	2b0f      	cmp	r3, #15
 80104ca:	d932      	bls.n	8010532 <_Index2Color_8666_1+0x6e>
 80104cc:	f1a0 030c 	sub.w	r3, r0, #12
 80104d0:	2be7      	cmp	r3, #231	; 0xe7
 80104d2:	d82b      	bhi.n	801052c <_Index2Color_8666_1+0x68>
 80104d4:	2877      	cmp	r0, #119	; 0x77
 80104d6:	4a1c      	ldr	r2, [pc, #112]	; (8010548 <_Index2Color_8666_1+0x84>)
 80104d8:	bf88      	it	hi
 80104da:	f1a0 031c 	subhi.w	r3, r0, #28
 80104de:	481b      	ldr	r0, [pc, #108]	; (801054c <_Index2Color_8666_1+0x88>)
 80104e0:	b410      	push	{r4}
 80104e2:	fba0 4103 	umull	r4, r1, r0, r3
 80104e6:	fba2 4203 	umull	r4, r2, r2, r3
 80104ea:	0889      	lsrs	r1, r1, #2
 80104ec:	08d2      	lsrs	r2, r2, #3
 80104ee:	fba0 4001 	umull	r4, r0, r0, r1
 80104f2:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80104f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80104fa:	0880      	lsrs	r0, r0, #2
 80104fc:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8010500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801050c:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 8010510:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8010514:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010518:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801051c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8010520:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8010524:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8010528:	4618      	mov	r0, r3
 801052a:	4770      	bx	lr
 801052c:	2300      	movs	r3, #0
 801052e:	4618      	mov	r0, r3
 8010530:	4770      	bx	lr
 8010532:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 8010536:	4b06      	ldr	r3, [pc, #24]	; (8010550 <_Index2Color_8666_1+0x8c>)
 8010538:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801053c:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8010540:	4403      	add	r3, r0
 8010542:	4618      	mov	r0, r3
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	38e38e39 	.word	0x38e38e39
 801054c:	aaaaaaab 	.word	0xaaaaaaab
 8010550:	f8000008 	.word	0xf8000008

08010554 <_Color2Index_88666I>:
 8010554:	b510      	push	{r4, lr}
 8010556:	4604      	mov	r4, r0
 8010558:	4b04      	ldr	r3, [pc, #16]	; (801056c <_Color2Index_88666I+0x18>)
 801055a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801055e:	0c24      	lsrs	r4, r4, #16
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4798      	blx	r3
 8010564:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010568:	4320      	orrs	r0, r4
 801056a:	bd10      	pop	{r4, pc}
 801056c:	08023ab0 	.word	0x08023ab0

08010570 <_Index2Color_88666I>:
 8010570:	b510      	push	{r4, lr}
 8010572:	4604      	mov	r4, r0
 8010574:	4b04      	ldr	r3, [pc, #16]	; (8010588 <_Index2Color_88666I+0x18>)
 8010576:	b2c0      	uxtb	r0, r0
 8010578:	0424      	lsls	r4, r4, #16
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	4798      	blx	r3
 801057e:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8010582:	4320      	orrs	r0, r4
 8010584:	bd10      	pop	{r4, pc}
 8010586:	bf00      	nop
 8010588:	08023ab0 	.word	0x08023ab0

0801058c <_GetIndexMask_88666I>:
 801058c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <_Color2IndexBulk_88666I>:
 8010594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010598:	4c0b      	ldr	r4, [pc, #44]	; (80105c8 <_Color2IndexBulk_88666I+0x34>)
 801059a:	4606      	mov	r6, r0
 801059c:	4689      	mov	r9, r1
 801059e:	4615      	mov	r5, r2
 80105a0:	4698      	mov	r8, r3
 80105a2:	6827      	ldr	r7, [r4, #0]
 80105a4:	f856 4b04 	ldr.w	r4, [r6], #4
 80105a8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80105ac:	0c24      	lsrs	r4, r4, #16
 80105ae:	47b8      	blx	r7
 80105b0:	3d01      	subs	r5, #1
 80105b2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80105b6:	ea40 0004 	orr.w	r0, r0, r4
 80105ba:	f8a9 0000 	strh.w	r0, [r9]
 80105be:	44c1      	add	r9, r8
 80105c0:	d1f0      	bne.n	80105a4 <_Color2IndexBulk_88666I+0x10>
 80105c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c6:	bf00      	nop
 80105c8:	08023ab0 	.word	0x08023ab0

080105cc <_Index2ColorBulk_88666I>:
 80105cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d0:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 80105d4:	4c0d      	ldr	r4, [pc, #52]	; (801060c <_Index2ColorBulk_88666I+0x40>)
 80105d6:	f102 38ff 	add.w	r8, r2, #4294967295
 80105da:	425f      	negs	r7, r3
 80105dc:	4491      	add	r9, r2
 80105de:	6866      	ldr	r6, [r4, #4]
 80105e0:	fb03 0508 	mla	r5, r3, r8, r0
 80105e4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80105e8:	e001      	b.n	80105ee <_Index2ColorBulk_88666I+0x22>
 80105ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80105ee:	882c      	ldrh	r4, [r5, #0]
 80105f0:	443d      	add	r5, r7
 80105f2:	b2e0      	uxtb	r0, r4
 80105f4:	0424      	lsls	r4, r4, #16
 80105f6:	47b0      	blx	r6
 80105f8:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80105fc:	4320      	orrs	r0, r4
 80105fe:	f849 0904 	str.w	r0, [r9], #-4
 8010602:	f1b8 0f00 	cmp.w	r8, #0
 8010606:	d1f0      	bne.n	80105ea <_Index2ColorBulk_88666I+0x1e>
 8010608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801060c:	08023ab0 	.word	0x08023ab0

08010610 <_Color2Index_M1555I>:
 8010610:	4909      	ldr	r1, [pc, #36]	; (8010638 <_Color2Index_M1555I+0x28>)
 8010612:	b2c2      	uxtb	r2, r0
 8010614:	0fc3      	lsrs	r3, r0, #31
 8010616:	5c8a      	ldrb	r2, [r1, r2]
 8010618:	b410      	push	{r4}
 801061a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801061e:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8010622:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8010626:	5d0c      	ldrb	r4, [r1, r4]
 8010628:	5c08      	ldrb	r0, [r1, r0]
 801062a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801062e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010632:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8010636:	4770      	bx	lr
 8010638:	08023de4 	.word	0x08023de4

0801063c <_Index2Color_M1555I>:
 801063c:	490a      	ldr	r1, [pc, #40]	; (8010668 <_Index2Color_M1555I+0x2c>)
 801063e:	f000 021f 	and.w	r2, r0, #31
 8010642:	f340 33c0 	sbfx	r3, r0, #15, #1
 8010646:	5c8a      	ldrb	r2, [r1, r2]
 8010648:	b410      	push	{r4}
 801064a:	f3c0 1444 	ubfx	r4, r0, #5, #5
 801064e:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 8010652:	f3c0 2084 	ubfx	r0, r0, #10, #5
 8010656:	5d0c      	ldrb	r4, [r1, r4]
 8010658:	5c08      	ldrb	r0, [r1, r0]
 801065a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 801065e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010662:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8010666:	4770      	bx	lr
 8010668:	08024024 	.word	0x08024024

0801066c <_GetIndexMask_M1555I>:
 801066c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop

08010674 <_Color2IndexBulk_M1555I>:
 8010674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010676:	4f14      	ldr	r7, [pc, #80]	; (80106c8 <_Color2IndexBulk_M1555I+0x54>)
 8010678:	f8d7 e000 	ldr.w	lr, [r7]
 801067c:	f1be 0f00 	cmp.w	lr, #0
 8010680:	d003      	beq.n	801068a <_Color2IndexBulk_M1555I+0x16>
 8010682:	46f4      	mov	ip, lr
 8010684:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010688:	4760      	bx	ip
 801068a:	4606      	mov	r6, r0
 801068c:	460c      	mov	r4, r1
 801068e:	4615      	mov	r5, r2
 8010690:	461f      	mov	r7, r3
 8010692:	480e      	ldr	r0, [pc, #56]	; (80106cc <_Color2IndexBulk_M1555I+0x58>)
 8010694:	f856 2b04 	ldr.w	r2, [r6], #4
 8010698:	3d01      	subs	r5, #1
 801069a:	fa5f fe82 	uxtb.w	lr, r2
 801069e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80106a2:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80106a6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80106aa:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80106ae:	f810 200c 	ldrb.w	r2, [r0, ip]
 80106b2:	5c41      	ldrb	r1, [r0, r1]
 80106b4:	eb02 228e 	add.w	r2, r2, lr, lsl #10
 80106b8:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 80106bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80106c0:	8023      	strh	r3, [r4, #0]
 80106c2:	443c      	add	r4, r7
 80106c4:	d1e6      	bne.n	8010694 <_Color2IndexBulk_M1555I+0x20>
 80106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c8:	200001b0 	.word	0x200001b0
 80106cc:	08023de4 	.word	0x08023de4

080106d0 <_Index2ColorBulk_M1555I>:
 80106d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d4:	4c17      	ldr	r4, [pc, #92]	; (8010734 <_Index2ColorBulk_M1555I+0x64>)
 80106d6:	6864      	ldr	r4, [r4, #4]
 80106d8:	b11c      	cbz	r4, 80106e2 <_Index2ColorBulk_M1555I+0x12>
 80106da:	46a4      	mov	ip, r4
 80106dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106e0:	4760      	bx	ip
 80106e2:	468c      	mov	ip, r1
 80106e4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80106e8:	4680      	mov	r8, r0
 80106ea:	1e56      	subs	r6, r2, #1
 80106ec:	4411      	add	r1, r2
 80106ee:	f1c3 0e00 	rsb	lr, r3, #0
 80106f2:	4811      	ldr	r0, [pc, #68]	; (8010738 <_Index2ColorBulk_M1555I+0x68>)
 80106f4:	fb03 8306 	mla	r3, r3, r6, r8
 80106f8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80106fc:	e000      	b.n	8010700 <_Index2ColorBulk_M1555I+0x30>
 80106fe:	3e01      	subs	r6, #1
 8010700:	881d      	ldrh	r5, [r3, #0]
 8010702:	4473      	add	r3, lr
 8010704:	f005 041f 	and.w	r4, r5, #31
 8010708:	f345 37c0 	sbfx	r7, r5, #15, #1
 801070c:	f3c5 1244 	ubfx	r2, r5, #5, #5
 8010710:	f3c5 2584 	ubfx	r5, r5, #10, #5
 8010714:	5d04      	ldrb	r4, [r0, r4]
 8010716:	5c82      	ldrb	r2, [r0, r2]
 8010718:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 801071c:	5d45      	ldrb	r5, [r0, r5]
 801071e:	eb04 2202 	add.w	r2, r4, r2, lsl #8
 8010722:	eb02 4205 	add.w	r2, r2, r5, lsl #16
 8010726:	f841 2904 	str.w	r2, [r1], #-4
 801072a:	2e00      	cmp	r6, #0
 801072c:	d1e7      	bne.n	80106fe <_Index2ColorBulk_M1555I+0x2e>
 801072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010732:	bf00      	nop
 8010734:	200001b0 	.word	0x200001b0
 8010738:	08024024 	.word	0x08024024

0801073c <GUICC_M1555I_SetCustColorConv>:
 801073c:	4b01      	ldr	r3, [pc, #4]	; (8010744 <GUICC_M1555I_SetCustColorConv+0x8>)
 801073e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010742:	4770      	bx	lr
 8010744:	200001b0 	.word	0x200001b0

08010748 <_Color2Index_M4444I>:
 8010748:	b510      	push	{r4, lr}
 801074a:	b2c2      	uxtb	r2, r0
 801074c:	4b0e      	ldr	r3, [pc, #56]	; (8010788 <_Color2Index_M4444I+0x40>)
 801074e:	0e04      	lsrs	r4, r0, #24
 8010750:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010754:	3208      	adds	r2, #8
 8010756:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801075a:	3408      	adds	r4, #8
 801075c:	3108      	adds	r1, #8
 801075e:	fba3 e202 	umull	lr, r2, r3, r2
 8010762:	3008      	adds	r0, #8
 8010764:	fba3 e404 	umull	lr, r4, r3, r4
 8010768:	fba3 e101 	umull	lr, r1, r3, r1
 801076c:	0912      	lsrs	r2, r2, #4
 801076e:	0924      	lsrs	r4, r4, #4
 8010770:	fba3 0300 	umull	r0, r3, r3, r0
 8010774:	0909      	lsrs	r1, r1, #4
 8010776:	eb02 3004 	add.w	r0, r2, r4, lsl #12
 801077a:	f023 030f 	bic.w	r3, r3, #15
 801077e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8010782:	4418      	add	r0, r3
 8010784:	bd10      	pop	{r4, pc}
 8010786:	bf00      	nop
 8010788:	f0f0f0f1 	.word	0xf0f0f0f1

0801078c <_Index2Color_M4444I>:
 801078c:	490b      	ldr	r1, [pc, #44]	; (80107bc <_Index2Color_M4444I+0x30>)
 801078e:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8010792:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8010796:	5c8a      	ldrb	r2, [r1, r2]
 8010798:	5ccb      	ldrb	r3, [r1, r3]
 801079a:	0412      	lsls	r2, r2, #16
 801079c:	b410      	push	{r4}
 801079e:	f000 040f 	and.w	r4, r0, #15
 80107a2:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 80107a6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80107aa:	5d0c      	ldrb	r4, [r1, r4]
 80107ac:	5c08      	ldrb	r0, [r1, r0]
 80107ae:	4423      	add	r3, r4
 80107b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107b4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	08024044 	.word	0x08024044

080107c0 <_GetIndexMask_M4444I>:
 80107c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80107c4:	4770      	bx	lr
 80107c6:	bf00      	nop

080107c8 <_Color2IndexBulk_M4444I>:
 80107c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107ca:	4f1d      	ldr	r7, [pc, #116]	; (8010840 <_Color2IndexBulk_M4444I+0x78>)
 80107cc:	f8d7 e000 	ldr.w	lr, [r7]
 80107d0:	f1be 0f00 	cmp.w	lr, #0
 80107d4:	d003      	beq.n	80107de <_Color2IndexBulk_M4444I+0x16>
 80107d6:	46f4      	mov	ip, lr
 80107d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80107dc:	4760      	bx	ip
 80107de:	4606      	mov	r6, r0
 80107e0:	460c      	mov	r4, r1
 80107e2:	4615      	mov	r5, r2
 80107e4:	461f      	mov	r7, r3
 80107e6:	4817      	ldr	r0, [pc, #92]	; (8010844 <_Color2IndexBulk_M4444I+0x7c>)
 80107e8:	f856 3b04 	ldr.w	r3, [r6], #4
 80107ec:	3d01      	subs	r5, #1
 80107ee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80107f2:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 80107f6:	b2d9      	uxtb	r1, r3
 80107f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80107fc:	f10c 0308 	add.w	r3, ip, #8
 8010800:	f10e 0e08 	add.w	lr, lr, #8
 8010804:	f101 0108 	add.w	r1, r1, #8
 8010808:	f102 0208 	add.w	r2, r2, #8
 801080c:	fba0 c303 	umull	ip, r3, r0, r3
 8010810:	fba0 c101 	umull	ip, r1, r0, r1
 8010814:	fba0 ce0e 	umull	ip, lr, r0, lr
 8010818:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801081c:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8010820:	fba0 c202 	umull	ip, r2, r0, r2
 8010824:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010828:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 801082c:	f022 020f 	bic.w	r2, r2, #15
 8010830:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8010834:	4413      	add	r3, r2
 8010836:	8023      	strh	r3, [r4, #0]
 8010838:	443c      	add	r4, r7
 801083a:	d1d5      	bne.n	80107e8 <_Color2IndexBulk_M4444I+0x20>
 801083c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801083e:	bf00      	nop
 8010840:	200001b8 	.word	0x200001b8
 8010844:	f0f0f0f1 	.word	0xf0f0f0f1

08010848 <_Index2ColorBulk_M4444I>:
 8010848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801084c:	4c17      	ldr	r4, [pc, #92]	; (80108ac <_Index2ColorBulk_M4444I+0x64>)
 801084e:	6864      	ldr	r4, [r4, #4]
 8010850:	b11c      	cbz	r4, 801085a <_Index2ColorBulk_M4444I+0x12>
 8010852:	46a4      	mov	ip, r4
 8010854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010858:	4760      	bx	ip
 801085a:	468c      	mov	ip, r1
 801085c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8010860:	4680      	mov	r8, r0
 8010862:	1e50      	subs	r0, r2, #1
 8010864:	4411      	add	r1, r2
 8010866:	f1c3 0e00 	rsb	lr, r3, #0
 801086a:	4e11      	ldr	r6, [pc, #68]	; (80108b0 <_Index2ColorBulk_M4444I+0x68>)
 801086c:	fb03 8300 	mla	r3, r3, r0, r8
 8010870:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8010874:	e000      	b.n	8010878 <_Index2ColorBulk_M4444I+0x30>
 8010876:	3801      	subs	r0, #1
 8010878:	881a      	ldrh	r2, [r3, #0]
 801087a:	4473      	add	r3, lr
 801087c:	0b17      	lsrs	r7, r2, #12
 801087e:	f002 040f 	and.w	r4, r2, #15
 8010882:	f3c2 2c03 	ubfx	ip, r2, #8, #4
 8010886:	f3c2 1503 	ubfx	r5, r2, #4, #4
 801088a:	5df7      	ldrb	r7, [r6, r7]
 801088c:	5d34      	ldrb	r4, [r6, r4]
 801088e:	f816 200c 	ldrb.w	r2, [r6, ip]
 8010892:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8010896:	5d75      	ldrb	r5, [r6, r5]
 8010898:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 801089c:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80108a0:	f841 2904 	str.w	r2, [r1], #-4
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d1e6      	bne.n	8010876 <_Index2ColorBulk_M4444I+0x2e>
 80108a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ac:	200001b8 	.word	0x200001b8
 80108b0:	08024044 	.word	0x08024044

080108b4 <GUICC_M4444I_SetCustColorConv>:
 80108b4:	4b01      	ldr	r3, [pc, #4]	; (80108bc <GUICC_M4444I_SetCustColorConv+0x8>)
 80108b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80108ba:	4770      	bx	lr
 80108bc:	200001b8 	.word	0x200001b8

080108c0 <_Color2Index_M8888I>:
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop

080108c4 <_GetIndexMask_M8888I>:
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop

080108cc <_Color2IndexBulk_M8888I>:
 80108cc:	b410      	push	{r4}
 80108ce:	f850 4b04 	ldr.w	r4, [r0], #4
 80108d2:	3a01      	subs	r2, #1
 80108d4:	600c      	str	r4, [r1, #0]
 80108d6:	4419      	add	r1, r3
 80108d8:	d1f9      	bne.n	80108ce <_Color2IndexBulk_M8888I+0x2>
 80108da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <_Index2ColorBulk_M8888I>:
 80108e0:	b410      	push	{r4}
 80108e2:	6804      	ldr	r4, [r0, #0]
 80108e4:	3a01      	subs	r2, #1
 80108e6:	4418      	add	r0, r3
 80108e8:	f841 4b04 	str.w	r4, [r1], #4
 80108ec:	d1f9      	bne.n	80108e2 <_Index2ColorBulk_M8888I+0x2>
 80108ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <GUICC_M8888I_SetCustColorConv>:
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop

080108f8 <LCD_Index2Color_565>:
 80108f8:	b430      	push	{r4, r5}
 80108fa:	4909      	ldr	r1, [pc, #36]	; (8010920 <LCD_Index2Color_565+0x28>)
 80108fc:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8010900:	f000 051f 	and.w	r5, r0, #31
 8010904:	4c07      	ldr	r4, [pc, #28]	; (8010924 <LCD_Index2Color_565+0x2c>)
 8010906:	f3c0 1245 	ubfx	r2, r0, #5, #6
 801090a:	5ccb      	ldrb	r3, [r1, r3]
 801090c:	5d48      	ldrb	r0, [r1, r5]
 801090e:	5ca2      	ldrb	r2, [r4, r2]
 8010910:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8010914:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8010918:	bc30      	pop	{r4, r5}
 801091a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801091e:	4770      	bx	lr
 8010920:	08024024 	.word	0x08024024
 8010924:	08023fe4 	.word	0x08023fe4

08010928 <_Color2Index_565>:
 8010928:	b410      	push	{r4}
 801092a:	4a08      	ldr	r2, [pc, #32]	; (801094c <_Color2Index_565+0x24>)
 801092c:	b2c4      	uxtb	r4, r0
 801092e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010932:	4907      	ldr	r1, [pc, #28]	; (8010950 <_Color2Index_565+0x28>)
 8010934:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010938:	5cd3      	ldrb	r3, [r2, r3]
 801093a:	5d12      	ldrb	r2, [r2, r4]
 801093c:	5c08      	ldrb	r0, [r1, r0]
 801093e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8010942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010946:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 801094a:	4770      	bx	lr
 801094c:	08023de4 	.word	0x08023de4
 8010950:	08023ce4 	.word	0x08023ce4

08010954 <_GetIndexMask_565>:
 8010954:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop

0801095c <_Color2IndexBulk>:
 801095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095e:	f8df c034 	ldr.w	ip, [pc, #52]	; 8010994 <_Color2IndexBulk+0x38>
 8010962:	4f0b      	ldr	r7, [pc, #44]	; (8010990 <_Color2IndexBulk+0x34>)
 8010964:	f850 4b04 	ldr.w	r4, [r0], #4
 8010968:	3a01      	subs	r2, #1
 801096a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801096e:	fa5f fe84 	uxtb.w	lr, r4
 8010972:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8010976:	5d7d      	ldrb	r5, [r7, r5]
 8010978:	f817 400e 	ldrb.w	r4, [r7, lr]
 801097c:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8010980:	eb05 24c4 	add.w	r4, r5, r4, lsl #11
 8010984:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8010988:	800c      	strh	r4, [r1, #0]
 801098a:	4419      	add	r1, r3
 801098c:	d1ea      	bne.n	8010964 <_Color2IndexBulk+0x8>
 801098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010990:	08023de4 	.word	0x08023de4
 8010994:	08023ce4 	.word	0x08023ce4

08010998 <_Index2ColorBulk>:
 8010998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801099a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 801099e:	1e56      	subs	r6, r2, #1
 80109a0:	4f10      	ldr	r7, [pc, #64]	; (80109e4 <_Index2ColorBulk+0x4c>)
 80109a2:	f1c3 0c00 	rsb	ip, r3, #0
 80109a6:	4414      	add	r4, r2
 80109a8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80109e8 <_Index2ColorBulk+0x50>
 80109ac:	fb03 0006 	mla	r0, r3, r6, r0
 80109b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109b4:	e000      	b.n	80109b8 <_Index2ColorBulk+0x20>
 80109b6:	3e01      	subs	r6, #1
 80109b8:	8802      	ldrh	r2, [r0, #0]
 80109ba:	4460      	add	r0, ip
 80109bc:	0ad3      	lsrs	r3, r2, #11
 80109be:	f002 041f 	and.w	r4, r2, #31
 80109c2:	f3c2 1545 	ubfx	r5, r2, #5, #6
 80109c6:	5d3a      	ldrb	r2, [r7, r4]
 80109c8:	5cfc      	ldrb	r4, [r7, r3]
 80109ca:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80109ce:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 80109d2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80109d6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80109da:	f841 2904 	str.w	r2, [r1], #-4
 80109de:	2e00      	cmp	r6, #0
 80109e0:	d1e9      	bne.n	80109b6 <_Index2ColorBulk+0x1e>
 80109e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109e4:	08024024 	.word	0x08024024
 80109e8:	08023fe4 	.word	0x08023fe4

080109ec <_Color2Index_888>:
 80109ec:	0403      	lsls	r3, r0, #16
 80109ee:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80109f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80109f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80109fa:	4313      	orrs	r3, r2
 80109fc:	4318      	orrs	r0, r3
 80109fe:	4770      	bx	lr

08010a00 <_GetIndexMask_888>:
 8010a00:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop

08010a08 <_Color2IndexBulk>:
 8010a08:	b470      	push	{r4, r5, r6}
 8010a0a:	f850 4b04 	ldr.w	r4, [r0], #4
 8010a0e:	3a01      	subs	r2, #1
 8010a10:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8010a14:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8010a18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010a1c:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8010a20:	ea45 0506 	orr.w	r5, r5, r6
 8010a24:	ea44 0405 	orr.w	r4, r4, r5
 8010a28:	600c      	str	r4, [r1, #0]
 8010a2a:	4419      	add	r1, r3
 8010a2c:	d1ed      	bne.n	8010a0a <_Color2IndexBulk+0x2>
 8010a2e:	bc70      	pop	{r4, r5, r6}
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop

08010a34 <_Index2ColorBulk>:
 8010a34:	b470      	push	{r4, r5, r6}
 8010a36:	6804      	ldr	r4, [r0, #0]
 8010a38:	3a01      	subs	r2, #1
 8010a3a:	4418      	add	r0, r3
 8010a3c:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8010a40:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8010a44:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010a48:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8010a4c:	ea45 0506 	orr.w	r5, r5, r6
 8010a50:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8010a54:	ea44 0405 	orr.w	r4, r4, r5
 8010a58:	f841 4b04 	str.w	r4, [r1], #4
 8010a5c:	d1eb      	bne.n	8010a36 <_Index2ColorBulk+0x2>
 8010a5e:	bc70      	pop	{r4, r5, r6}
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop

08010a64 <_Color2Index_8888>:
 8010a64:	43c3      	mvns	r3, r0
 8010a66:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010a6a:	0402      	lsls	r2, r0, #16
 8010a6c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010a70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a74:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8010a78:	430b      	orrs	r3, r1
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	4318      	orrs	r0, r3
 8010a7e:	4770      	bx	lr

08010a80 <_GetIndexMask_8888>:
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop

08010a88 <_Color2IndexBulk>:
 8010a88:	b4f0      	push	{r4, r5, r6, r7}
 8010a8a:	f850 4b04 	ldr.w	r4, [r0], #4
 8010a8e:	3a01      	subs	r2, #1
 8010a90:	ea6f 0504 	mvn.w	r5, r4
 8010a94:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8010a98:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8010a9c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010aa0:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8010aa4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8010aa8:	ea45 0507 	orr.w	r5, r5, r7
 8010aac:	ea45 0506 	orr.w	r5, r5, r6
 8010ab0:	ea44 0405 	orr.w	r4, r4, r5
 8010ab4:	600c      	str	r4, [r1, #0]
 8010ab6:	4419      	add	r1, r3
 8010ab8:	d1e7      	bne.n	8010a8a <_Color2IndexBulk+0x2>
 8010aba:	bcf0      	pop	{r4, r5, r6, r7}
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop

08010ac0 <_Index2ColorBulk>:
 8010ac0:	b4f0      	push	{r4, r5, r6, r7}
 8010ac2:	6804      	ldr	r4, [r0, #0]
 8010ac4:	3a01      	subs	r2, #1
 8010ac6:	4418      	add	r0, r3
 8010ac8:	ea6f 0504 	mvn.w	r5, r4
 8010acc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8010ad0:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8010ad4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010ad8:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8010adc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8010ae0:	ea45 0507 	orr.w	r5, r5, r7
 8010ae4:	ea45 0506 	orr.w	r5, r5, r6
 8010ae8:	ea44 0405 	orr.w	r4, r4, r5
 8010aec:	f841 4b04 	str.w	r4, [r1], #4
 8010af0:	d1e7      	bne.n	8010ac2 <_Index2ColorBulk+0x2>
 8010af2:	bcf0      	pop	{r4, r5, r6, r7}
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop

08010af8 <LCD_Index2Color_8888>:
 8010af8:	43c3      	mvns	r3, r0
 8010afa:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010afe:	0402      	lsls	r2, r0, #16
 8010b00:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010b04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010b08:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8010b0c:	430b      	orrs	r3, r1
 8010b0e:	4313      	orrs	r3, r2
 8010b10:	4318      	orrs	r0, r3
 8010b12:	4770      	bx	lr

08010b14 <LCD_Index2Color_888>:
 8010b14:	0403      	lsls	r3, r0, #16
 8010b16:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010b1a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b22:	4313      	orrs	r3, r2
 8010b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b28:	4318      	orrs	r0, r3
 8010b2a:	4770      	bx	lr

08010b2c <LCD_Index2Color_M565>:
 8010b2c:	490a      	ldr	r1, [pc, #40]	; (8010b58 <LCD_Index2Color_M565+0x2c>)
 8010b2e:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8010b32:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8010b36:	f000 001f 	and.w	r0, r0, #31
 8010b3a:	5c8a      	ldrb	r2, [r1, r2]
 8010b3c:	5c08      	ldrb	r0, [r1, r0]
 8010b3e:	0412      	lsls	r2, r2, #16
 8010b40:	b410      	push	{r4}
 8010b42:	4c06      	ldr	r4, [pc, #24]	; (8010b5c <LCD_Index2Color_M565+0x30>)
 8010b44:	5ce3      	ldrb	r3, [r4, r3]
 8010b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b4a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8010b4e:	4418      	add	r0, r3
 8010b50:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	08024024 	.word	0x08024024
 8010b5c:	08023fe4 	.word	0x08023fe4

08010b60 <_Color2Index_M565>:
 8010b60:	4a08      	ldr	r2, [pc, #32]	; (8010b84 <_Color2Index_M565+0x24>)
 8010b62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b66:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010b6a:	b2c0      	uxtb	r0, r0
 8010b6c:	5cd3      	ldrb	r3, [r2, r3]
 8010b6e:	5c10      	ldrb	r0, [r2, r0]
 8010b70:	02db      	lsls	r3, r3, #11
 8010b72:	b410      	push	{r4}
 8010b74:	4c04      	ldr	r4, [pc, #16]	; (8010b88 <_Color2Index_M565+0x28>)
 8010b76:	5c61      	ldrb	r1, [r4, r1]
 8010b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010b80:	4418      	add	r0, r3
 8010b82:	4770      	bx	lr
 8010b84:	08023de4 	.word	0x08023de4
 8010b88:	08023ce4 	.word	0x08023ce4

08010b8c <_GetIndexMask_M565>:
 8010b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop

08010b94 <_Color2IndexBulk>:
 8010b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b96:	4f13      	ldr	r7, [pc, #76]	; (8010be4 <_Color2IndexBulk+0x50>)
 8010b98:	f8d7 e000 	ldr.w	lr, [r7]
 8010b9c:	f1be 0f00 	cmp.w	lr, #0
 8010ba0:	d003      	beq.n	8010baa <_Color2IndexBulk+0x16>
 8010ba2:	46f4      	mov	ip, lr
 8010ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ba8:	4760      	bx	ip
 8010baa:	4606      	mov	r6, r0
 8010bac:	460c      	mov	r4, r1
 8010bae:	4615      	mov	r5, r2
 8010bb0:	461f      	mov	r7, r3
 8010bb2:	f8df e038 	ldr.w	lr, [pc, #56]	; 8010bec <_Color2IndexBulk+0x58>
 8010bb6:	480c      	ldr	r0, [pc, #48]	; (8010be8 <_Color2IndexBulk+0x54>)
 8010bb8:	f856 3b04 	ldr.w	r3, [r6], #4
 8010bbc:	3d01      	subs	r5, #1
 8010bbe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010bc2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8010bc6:	b2d9      	uxtb	r1, r3
 8010bc8:	5c82      	ldrb	r2, [r0, r2]
 8010bca:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8010bce:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8010bd2:	5c41      	ldrb	r1, [r0, r1]
 8010bd4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8010bd8:	440b      	add	r3, r1
 8010bda:	8023      	strh	r3, [r4, #0]
 8010bdc:	443c      	add	r4, r7
 8010bde:	d1eb      	bne.n	8010bb8 <_Color2IndexBulk+0x24>
 8010be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010be2:	bf00      	nop
 8010be4:	200001c0 	.word	0x200001c0
 8010be8:	08023de4 	.word	0x08023de4
 8010bec:	08023ce4 	.word	0x08023ce4

08010bf0 <_Index2ColorBulk>:
 8010bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf4:	4c17      	ldr	r4, [pc, #92]	; (8010c54 <_Index2ColorBulk+0x64>)
 8010bf6:	6864      	ldr	r4, [r4, #4]
 8010bf8:	b11c      	cbz	r4, 8010c02 <_Index2ColorBulk+0x12>
 8010bfa:	46a4      	mov	ip, r4
 8010bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	4760      	bx	ip
 8010c02:	468c      	mov	ip, r1
 8010c04:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8010c08:	4680      	mov	r8, r0
 8010c0a:	1e50      	subs	r0, r2, #1
 8010c0c:	4411      	add	r1, r2
 8010c0e:	f1c3 0e00 	rsb	lr, r3, #0
 8010c12:	4e11      	ldr	r6, [pc, #68]	; (8010c58 <_Index2ColorBulk+0x68>)
 8010c14:	fb03 8300 	mla	r3, r3, r0, r8
 8010c18:	4f10      	ldr	r7, [pc, #64]	; (8010c5c <_Index2ColorBulk+0x6c>)
 8010c1a:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8010c1e:	e000      	b.n	8010c22 <_Index2ColorBulk+0x32>
 8010c20:	3801      	subs	r0, #1
 8010c22:	881a      	ldrh	r2, [r3, #0]
 8010c24:	4473      	add	r3, lr
 8010c26:	f002 041f 	and.w	r4, r2, #31
 8010c2a:	ea4f 2cd2 	mov.w	ip, r2, lsr #11
 8010c2e:	f3c2 1545 	ubfx	r5, r2, #5, #6
 8010c32:	5d34      	ldrb	r4, [r6, r4]
 8010c34:	f816 200c 	ldrb.w	r2, [r6, ip]
 8010c38:	5d7d      	ldrb	r5, [r7, r5]
 8010c3a:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8010c3e:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8010c42:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8010c46:	f841 2904 	str.w	r2, [r1], #-4
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	d1e8      	bne.n	8010c20 <_Index2ColorBulk+0x30>
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	bf00      	nop
 8010c54:	200001c0 	.word	0x200001c0
 8010c58:	08024024 	.word	0x08024024
 8010c5c:	08023fe4 	.word	0x08023fe4

08010c60 <GUICC_M565_SetCustColorConv>:
 8010c60:	4b01      	ldr	r3, [pc, #4]	; (8010c68 <GUICC_M565_SetCustColorConv+0x8>)
 8010c62:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c66:	4770      	bx	lr
 8010c68:	200001c0 	.word	0x200001c0

08010c6c <_Color2Index_M888>:
 8010c6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop

08010c74 <_GetIndexMask_M888>:
 8010c74:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <_Color2IndexBulk>:
 8010c7c:	b410      	push	{r4}
 8010c7e:	f850 4b04 	ldr.w	r4, [r0], #4
 8010c82:	3a01      	subs	r2, #1
 8010c84:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8010c88:	600c      	str	r4, [r1, #0]
 8010c8a:	4419      	add	r1, r3
 8010c8c:	d1f7      	bne.n	8010c7e <_Color2IndexBulk+0x2>
 8010c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <_Index2ColorBulk>:
 8010c94:	b410      	push	{r4}
 8010c96:	6804      	ldr	r4, [r0, #0]
 8010c98:	3a01      	subs	r2, #1
 8010c9a:	4418      	add	r0, r3
 8010c9c:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8010ca0:	f841 4b04 	str.w	r4, [r1], #4
 8010ca4:	d1f7      	bne.n	8010c96 <_Index2ColorBulk+0x2>
 8010ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <GUICC_M888_SetCustColorConv>:
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <_Color2Index_M8888>:
 8010cb0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <_GetIndexMask_M8888>:
 8010cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop

08010cc0 <_Color2IndexBulk>:
 8010cc0:	b410      	push	{r4}
 8010cc2:	f850 4b04 	ldr.w	r4, [r0], #4
 8010cc6:	3a01      	subs	r2, #1
 8010cc8:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8010ccc:	600c      	str	r4, [r1, #0]
 8010cce:	4419      	add	r1, r3
 8010cd0:	d1f7      	bne.n	8010cc2 <_Color2IndexBulk+0x2>
 8010cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <_Index2ColorBulk>:
 8010cd8:	b410      	push	{r4}
 8010cda:	6804      	ldr	r4, [r0, #0]
 8010cdc:	3a01      	subs	r2, #1
 8010cde:	4418      	add	r0, r3
 8010ce0:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8010ce4:	f841 4b04 	str.w	r4, [r1], #4
 8010ce8:	d1f7      	bne.n	8010cda <_Index2ColorBulk+0x2>
 8010cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <_Index2Color_M8888>:
 8010cf0:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop

08010cf8 <LCD_Index2Color_M8888I>:
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop

08010cfc <LCD_Index2Color_M888>:
 8010cfc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <GUI_DrawRect>:
 8010d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d08:	b082      	sub	sp, #8
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	4689      	mov	r9, r1
 8010d0e:	4692      	mov	sl, r2
 8010d10:	4698      	mov	r8, r3
 8010d12:	f005 faa7 	bl	8016264 <GUI_Lock>
 8010d16:	4b1e      	ldr	r3, [pc, #120]	; (8010d90 <GUI_DrawRect+0x8c>)
 8010d18:	4668      	mov	r0, sp
 8010d1a:	681f      	ldr	r7, [r3, #0]
 8010d1c:	7e3e      	ldrb	r6, [r7, #24]
 8010d1e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8010d20:	3e01      	subs	r6, #1
 8010d22:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 8010d24:	442c      	add	r4, r5
 8010d26:	4455      	add	r5, sl
 8010d28:	b2b2      	uxth	r2, r6
 8010d2a:	44b9      	add	r9, r7
 8010d2c:	44b8      	add	r8, r7
 8010d2e:	1aa6      	subs	r6, r4, r2
 8010d30:	1951      	adds	r1, r2, r5
 8010d32:	ebc2 0309 	rsb	r3, r2, r9
 8010d36:	4442      	add	r2, r8
 8010d38:	f8ad 6000 	strh.w	r6, [sp]
 8010d3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010d40:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010d44:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010d48:	f00c fbfe 	bl	801d548 <WM__InitIVRSearch>
 8010d4c:	b1d8      	cbz	r0, 8010d86 <GUI_DrawRect+0x82>
 8010d4e:	f109 0701 	add.w	r7, r9, #1
 8010d52:	f108 36ff 	add.w	r6, r8, #4294967295
 8010d56:	462a      	mov	r2, r5
 8010d58:	4649      	mov	r1, r9
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	f006 fb64 	bl	8017428 <LCD_DrawHLine>
 8010d60:	462a      	mov	r2, r5
 8010d62:	4641      	mov	r1, r8
 8010d64:	4620      	mov	r0, r4
 8010d66:	f006 fb5f 	bl	8017428 <LCD_DrawHLine>
 8010d6a:	4632      	mov	r2, r6
 8010d6c:	4639      	mov	r1, r7
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f006 fb82 	bl	8017478 <LCD_DrawVLine>
 8010d74:	4632      	mov	r2, r6
 8010d76:	4639      	mov	r1, r7
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f006 fb7d 	bl	8017478 <LCD_DrawVLine>
 8010d7e:	f00c fab9 	bl	801d2f4 <WM__GetNextIVR>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d1e7      	bne.n	8010d56 <GUI_DrawRect+0x52>
 8010d86:	f005 fa63 	bl	8016250 <GUI_Unlock>
 8010d8a:	b002      	add	sp, #8
 8010d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d90:	20000018 	.word	0x20000018

08010d94 <_AddFreeMemory>:
 8010d94:	4bc0      	ldr	r3, [pc, #768]	; (8011098 <_AddFreeMemory+0x304>)
 8010d96:	68da      	ldr	r2, [r3, #12]
 8010d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9a:	3a01      	subs	r2, #1
 8010d9c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8010d9e:	180d      	adds	r5, r1, r0
 8010da0:	4422      	add	r2, r4
 8010da2:	42aa      	cmp	r2, r5
 8010da4:	d303      	bcc.n	8010dae <_AddFreeMemory+0x1a>
 8010da6:	580a      	ldr	r2, [r1, r0]
 8010da8:	2a00      	cmp	r2, #0
 8010daa:	f000 80a1 	beq.w	8010ef0 <_AddFreeMemory+0x15c>
 8010dae:	428c      	cmp	r4, r1
 8010db0:	d205      	bcs.n	8010dbe <_AddFreeMemory+0x2a>
 8010db2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8010db6:	1a8a      	subs	r2, r1, r2
 8010db8:	6814      	ldr	r4, [r2, #0]
 8010dba:	2c00      	cmp	r4, #0
 8010dbc:	d04a      	beq.n	8010e54 <_AddFreeMemory+0xc0>
 8010dbe:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8010dc2:	4ab5      	ldr	r2, [pc, #724]	; (8011098 <_AddFreeMemory+0x304>)
 8010dc4:	42a0      	cmp	r0, r4
 8010dc6:	f080 811e 	bcs.w	8011006 <_AddFreeMemory+0x272>
 8010dca:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8010dce:	42a0      	cmp	r0, r4
 8010dd0:	f080 811b 	bcs.w	801100a <_AddFreeMemory+0x276>
 8010dd4:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8010dd8:	42a0      	cmp	r0, r4
 8010dda:	f080 8118 	bcs.w	801100e <_AddFreeMemory+0x27a>
 8010dde:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 8010de2:	42a0      	cmp	r0, r4
 8010de4:	f080 8115 	bcs.w	8011012 <_AddFreeMemory+0x27e>
 8010de8:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8010dec:	42a0      	cmp	r0, r4
 8010dee:	f080 8112 	bcs.w	8011016 <_AddFreeMemory+0x282>
 8010df2:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8010df6:	42a0      	cmp	r0, r4
 8010df8:	f080 810f 	bcs.w	801101a <_AddFreeMemory+0x286>
 8010dfc:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8010e00:	42a0      	cmp	r0, r4
 8010e02:	f080 810c 	bcs.w	801101e <_AddFreeMemory+0x28a>
 8010e06:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8010e0a:	42a0      	cmp	r0, r4
 8010e0c:	f080 8109 	bcs.w	8011022 <_AddFreeMemory+0x28e>
 8010e10:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8010e12:	42a0      	cmp	r0, r4
 8010e14:	f080 8107 	bcs.w	8011026 <_AddFreeMemory+0x292>
 8010e18:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010e1a:	4290      	cmp	r0, r2
 8010e1c:	f080 8105 	bcs.w	801102a <_AddFreeMemory+0x296>
 8010e20:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8010e22:	4a9d      	ldr	r2, [pc, #628]	; (8011098 <_AddFreeMemory+0x304>)
 8010e24:	42a0      	cmp	r0, r4
 8010e26:	f080 8102 	bcs.w	801102e <_AddFreeMemory+0x29a>
 8010e2a:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8010e2c:	42a0      	cmp	r0, r4
 8010e2e:	f080 8100 	bcs.w	8011032 <_AddFreeMemory+0x29e>
 8010e32:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8010e34:	42a0      	cmp	r0, r4
 8010e36:	f080 80fe 	bcs.w	8011036 <_AddFreeMemory+0x2a2>
 8010e3a:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8010e3c:	42a0      	cmp	r0, r4
 8010e3e:	f080 80fc 	bcs.w	801103a <_AddFreeMemory+0x2a6>
 8010e42:	6c94      	ldr	r4, [r2, #72]	; 0x48
 8010e44:	42a0      	cmp	r0, r4
 8010e46:	f080 80fa 	bcs.w	801103e <_AddFreeMemory+0x2aa>
 8010e4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010e4c:	4290      	cmp	r0, r2
 8010e4e:	f080 80a6 	bcs.w	8010f9e <_AddFreeMemory+0x20a>
 8010e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e54:	6851      	ldr	r1, [r2, #4]
 8010e56:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8010e5a:	4408      	add	r0, r1
 8010e5c:	4c8e      	ldr	r4, [pc, #568]	; (8011098 <_AddFreeMemory+0x304>)
 8010e5e:	42a9      	cmp	r1, r5
 8010e60:	f080 80f9 	bcs.w	8011056 <_AddFreeMemory+0x2c2>
 8010e64:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8010e68:	42a9      	cmp	r1, r5
 8010e6a:	f080 8106 	bcs.w	801107a <_AddFreeMemory+0x2e6>
 8010e6e:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8010e72:	42a9      	cmp	r1, r5
 8010e74:	f080 80ff 	bcs.w	8011076 <_AddFreeMemory+0x2e2>
 8010e78:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010e7c:	42a9      	cmp	r1, r5
 8010e7e:	f080 80f8 	bcs.w	8011072 <_AddFreeMemory+0x2de>
 8010e82:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8010e86:	42a9      	cmp	r1, r5
 8010e88:	f080 80fc 	bcs.w	8011084 <_AddFreeMemory+0x2f0>
 8010e8c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8010e90:	42a9      	cmp	r1, r5
 8010e92:	f080 80ff 	bcs.w	8011094 <_AddFreeMemory+0x300>
 8010e96:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8010e9a:	42a9      	cmp	r1, r5
 8010e9c:	f080 80f8 	bcs.w	8011090 <_AddFreeMemory+0x2fc>
 8010ea0:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8010ea4:	42a1      	cmp	r1, r4
 8010ea6:	f080 80f1 	bcs.w	801108c <_AddFreeMemory+0x2f8>
 8010eaa:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8010eac:	4c7a      	ldr	r4, [pc, #488]	; (8011098 <_AddFreeMemory+0x304>)
 8010eae:	42a9      	cmp	r1, r5
 8010eb0:	f080 80ea 	bcs.w	8011088 <_AddFreeMemory+0x2f4>
 8010eb4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8010eb6:	42a9      	cmp	r1, r5
 8010eb8:	f080 8113 	bcs.w	80110e2 <_AddFreeMemory+0x34e>
 8010ebc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8010ebe:	42a9      	cmp	r1, r5
 8010ec0:	f080 810d 	bcs.w	80110de <_AddFreeMemory+0x34a>
 8010ec4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8010ec6:	42a9      	cmp	r1, r5
 8010ec8:	f080 8107 	bcs.w	80110da <_AddFreeMemory+0x346>
 8010ecc:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8010ece:	42a9      	cmp	r1, r5
 8010ed0:	f080 8101 	bcs.w	80110d6 <_AddFreeMemory+0x342>
 8010ed4:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8010ed6:	42a9      	cmp	r1, r5
 8010ed8:	f080 80fb 	bcs.w	80110d2 <_AddFreeMemory+0x33e>
 8010edc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8010ede:	42a9      	cmp	r1, r5
 8010ee0:	f080 8104 	bcs.w	80110ec <_AddFreeMemory+0x358>
 8010ee4:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8010ee6:	42a1      	cmp	r1, r4
 8010ee8:	f080 8081 	bcs.w	8010fee <_AddFreeMemory+0x25a>
 8010eec:	4611      	mov	r1, r2
 8010eee:	e766      	b.n	8010dbe <_AddFreeMemory+0x2a>
 8010ef0:	686a      	ldr	r2, [r5, #4]
 8010ef2:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8010ef6:	4410      	add	r0, r2
 8010ef8:	42b2      	cmp	r2, r6
 8010efa:	f080 80ae 	bcs.w	801105a <_AddFreeMemory+0x2c6>
 8010efe:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8010f02:	42b2      	cmp	r2, r6
 8010f04:	f080 80b2 	bcs.w	801106c <_AddFreeMemory+0x2d8>
 8010f08:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8010f0c:	42b2      	cmp	r2, r6
 8010f0e:	f080 80aa 	bcs.w	8011066 <_AddFreeMemory+0x2d2>
 8010f12:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8010f16:	42b2      	cmp	r2, r6
 8010f18:	f080 80a2 	bcs.w	8011060 <_AddFreeMemory+0x2cc>
 8010f1c:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8010f20:	42b2      	cmp	r2, r6
 8010f22:	f080 80ac 	bcs.w	801107e <_AddFreeMemory+0x2ea>
 8010f26:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8010f2a:	42b2      	cmp	r2, r6
 8010f2c:	f080 80bf 	bcs.w	80110ae <_AddFreeMemory+0x31a>
 8010f30:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8010f34:	42b2      	cmp	r2, r6
 8010f36:	f080 80b7 	bcs.w	80110a8 <_AddFreeMemory+0x314>
 8010f3a:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8010f3e:	42b2      	cmp	r2, r6
 8010f40:	f080 80af 	bcs.w	80110a2 <_AddFreeMemory+0x30e>
 8010f44:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8010f46:	42ba      	cmp	r2, r7
 8010f48:	f080 80a8 	bcs.w	801109c <_AddFreeMemory+0x308>
 8010f4c:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8010f4e:	42ba      	cmp	r2, r7
 8010f50:	f080 80b9 	bcs.w	80110c6 <_AddFreeMemory+0x332>
 8010f54:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8010f56:	42ba      	cmp	r2, r7
 8010f58:	f080 80b2 	bcs.w	80110c0 <_AddFreeMemory+0x32c>
 8010f5c:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8010f5e:	42ba      	cmp	r2, r7
 8010f60:	f080 80ab 	bcs.w	80110ba <_AddFreeMemory+0x326>
 8010f64:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8010f66:	42ba      	cmp	r2, r7
 8010f68:	f080 80a4 	bcs.w	80110b4 <_AddFreeMemory+0x320>
 8010f6c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8010f6e:	42ba      	cmp	r2, r7
 8010f70:	f080 80ac 	bcs.w	80110cc <_AddFreeMemory+0x338>
 8010f74:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8010f76:	42ba      	cmp	r2, r7
 8010f78:	f080 80b5 	bcs.w	80110e6 <_AddFreeMemory+0x352>
 8010f7c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8010f7e:	42b2      	cmp	r2, r6
 8010f80:	f4ff af15 	bcc.w	8010dae <_AddFreeMemory+0x1a>
 8010f84:	f04f 0e00 	mov.w	lr, #0
 8010f88:	681e      	ldr	r6, [r3, #0]
 8010f8a:	68af      	ldr	r7, [r5, #8]
 8010f8c:	1ab2      	subs	r2, r6, r2
 8010f8e:	68ed      	ldr	r5, [r5, #12]
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	b107      	cbz	r7, 8010f96 <_AddFreeMemory+0x202>
 8010f94:	607d      	str	r5, [r7, #4]
 8010f96:	2d00      	cmp	r5, #0
 8010f98:	d058      	beq.n	801104c <_AddFreeMemory+0x2b8>
 8010f9a:	602f      	str	r7, [r5, #0]
 8010f9c:	e707      	b.n	8010dae <_AddFreeMemory+0x1a>
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	3208      	adds	r2, #8
 8010fa2:	2700      	movs	r7, #0
 8010fa4:	180d      	adds	r5, r1, r0
 8010fa6:	f101 0608 	add.w	r6, r1, #8
 8010faa:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8010fae:	6864      	ldr	r4, [r4, #4]
 8010fb0:	6048      	str	r0, [r1, #4]
 8010fb2:	608c      	str	r4, [r1, #8]
 8010fb4:	6109      	str	r1, [r1, #16]
 8010fb6:	600f      	str	r7, [r1, #0]
 8010fb8:	f845 0c04 	str.w	r0, [r5, #-4]
 8010fbc:	b104      	cbz	r4, 8010fc0 <_AddFreeMemory+0x22c>
 8010fbe:	6066      	str	r6, [r4, #4]
 8010fc0:	681d      	ldr	r5, [r3, #0]
 8010fc2:	2700      	movs	r7, #0
 8010fc4:	608c      	str	r4, [r1, #8]
 8010fc6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010fca:	60cf      	str	r7, [r1, #12]
 8010fcc:	1941      	adds	r1, r0, r5
 8010fce:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8010fd2:	6056      	str	r6, [r2, #4]
 8010fd4:	6019      	str	r1, [r3, #0]
 8010fd6:	4a30      	ldr	r2, [pc, #192]	; (8011098 <_AddFreeMemory+0x304>)
 8010fd8:	2c00      	cmp	r4, #0
 8010fda:	f47f af3a 	bne.w	8010e52 <_AddFreeMemory+0xbe>
 8010fde:	68d3      	ldr	r3, [r2, #12]
 8010fe0:	6894      	ldr	r4, [r2, #8]
 8010fe2:	1a59      	subs	r1, r3, r1
 8010fe4:	42a1      	cmp	r1, r4
 8010fe6:	f67f af34 	bls.w	8010e52 <_AddFreeMemory+0xbe>
 8010fea:	6091      	str	r1, [r2, #8]
 8010fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fee:	2600      	movs	r6, #0
 8010ff0:	681c      	ldr	r4, [r3, #0]
 8010ff2:	6895      	ldr	r5, [r2, #8]
 8010ff4:	1a61      	subs	r1, r4, r1
 8010ff6:	68d4      	ldr	r4, [r2, #12]
 8010ff8:	6019      	str	r1, [r3, #0]
 8010ffa:	b105      	cbz	r5, 8010ffe <_AddFreeMemory+0x26a>
 8010ffc:	606c      	str	r4, [r5, #4]
 8010ffe:	b304      	cbz	r4, 8011042 <_AddFreeMemory+0x2ae>
 8011000:	6025      	str	r5, [r4, #0]
 8011002:	4611      	mov	r1, r2
 8011004:	e6db      	b.n	8010dbe <_AddFreeMemory+0x2a>
 8011006:	220f      	movs	r2, #15
 8011008:	e7ca      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801100a:	220e      	movs	r2, #14
 801100c:	e7c8      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801100e:	220d      	movs	r2, #13
 8011010:	e7c6      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011012:	220c      	movs	r2, #12
 8011014:	e7c4      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011016:	220b      	movs	r2, #11
 8011018:	e7c2      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801101a:	220a      	movs	r2, #10
 801101c:	e7c0      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801101e:	2209      	movs	r2, #9
 8011020:	e7be      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011022:	2208      	movs	r2, #8
 8011024:	e7bc      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011026:	2207      	movs	r2, #7
 8011028:	e7ba      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801102a:	2206      	movs	r2, #6
 801102c:	e7b8      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801102e:	2205      	movs	r2, #5
 8011030:	e7b6      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011032:	2204      	movs	r2, #4
 8011034:	e7b4      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011036:	2203      	movs	r2, #3
 8011038:	e7b2      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801103a:	2202      	movs	r2, #2
 801103c:	e7b0      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 801103e:	2201      	movs	r2, #1
 8011040:	e7ae      	b.n	8010fa0 <_AddFreeMemory+0x20c>
 8011042:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011046:	4611      	mov	r1, r2
 8011048:	6475      	str	r5, [r6, #68]	; 0x44
 801104a:	e6b8      	b.n	8010dbe <_AddFreeMemory+0x2a>
 801104c:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8011050:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 8011054:	e6ab      	b.n	8010dae <_AddFreeMemory+0x1a>
 8011056:	260f      	movs	r6, #15
 8011058:	e7ca      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 801105a:	f04f 0e0f 	mov.w	lr, #15
 801105e:	e793      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 8011060:	f04f 0e0c 	mov.w	lr, #12
 8011064:	e790      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 8011066:	f04f 0e0d 	mov.w	lr, #13
 801106a:	e78d      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 801106c:	f04f 0e0e 	mov.w	lr, #14
 8011070:	e78a      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 8011072:	260c      	movs	r6, #12
 8011074:	e7bc      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 8011076:	260d      	movs	r6, #13
 8011078:	e7ba      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 801107a:	260e      	movs	r6, #14
 801107c:	e7b8      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 801107e:	f04f 0e0b 	mov.w	lr, #11
 8011082:	e781      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 8011084:	260b      	movs	r6, #11
 8011086:	e7b3      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 8011088:	2607      	movs	r6, #7
 801108a:	e7b1      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 801108c:	2608      	movs	r6, #8
 801108e:	e7af      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 8011090:	2609      	movs	r6, #9
 8011092:	e7ad      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 8011094:	260a      	movs	r6, #10
 8011096:	e7ab      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 8011098:	2002aec0 	.word	0x2002aec0
 801109c:	f04f 0e07 	mov.w	lr, #7
 80110a0:	e772      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110a2:	f04f 0e08 	mov.w	lr, #8
 80110a6:	e76f      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110a8:	f04f 0e09 	mov.w	lr, #9
 80110ac:	e76c      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110ae:	f04f 0e0a 	mov.w	lr, #10
 80110b2:	e769      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110b4:	f04f 0e03 	mov.w	lr, #3
 80110b8:	e766      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110ba:	f04f 0e04 	mov.w	lr, #4
 80110be:	e763      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110c0:	f04f 0e05 	mov.w	lr, #5
 80110c4:	e760      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110c6:	f04f 0e06 	mov.w	lr, #6
 80110ca:	e75d      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110cc:	f04f 0e02 	mov.w	lr, #2
 80110d0:	e75a      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110d2:	2602      	movs	r6, #2
 80110d4:	e78c      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 80110d6:	2603      	movs	r6, #3
 80110d8:	e78a      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 80110da:	2604      	movs	r6, #4
 80110dc:	e788      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 80110de:	2605      	movs	r6, #5
 80110e0:	e786      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 80110e2:	2606      	movs	r6, #6
 80110e4:	e784      	b.n	8010ff0 <_AddFreeMemory+0x25c>
 80110e6:	f04f 0e01 	mov.w	lr, #1
 80110ea:	e74d      	b.n	8010f88 <_AddFreeMemory+0x1f4>
 80110ec:	2601      	movs	r6, #1
 80110ee:	e77f      	b.n	8010ff0 <_AddFreeMemory+0x25c>

080110f0 <_RemoveHoles>:
 80110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801129c <_RemoveHoles+0x1ac>
 80110f8:	b083      	sub	sp, #12
 80110fa:	4682      	mov	sl, r0
 80110fc:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8011100:	46c1      	mov	r9, r8
 8011102:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8011106:	3f01      	subs	r7, #1
 8011108:	685e      	ldr	r6, [r3, #4]
 801110a:	441f      	add	r7, r3
 801110c:	681d      	ldr	r5, [r3, #0]
 801110e:	b135      	cbz	r5, 801111e <_RemoveHoles+0x2e>
 8011110:	4433      	add	r3, r6
 8011112:	429f      	cmp	r7, r3
 8011114:	d906      	bls.n	8011124 <_RemoveHoles+0x34>
 8011116:	e893 0060 	ldmia.w	r3, {r5, r6}
 801111a:	2d00      	cmp	r5, #0
 801111c:	d1f8      	bne.n	8011110 <_RemoveHoles+0x20>
 801111e:	1999      	adds	r1, r3, r6
 8011120:	428f      	cmp	r7, r1
 8011122:	d803      	bhi.n	801112c <_RemoveHoles+0x3c>
 8011124:	2001      	movs	r0, #1
 8011126:	b003      	add	sp, #12
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	599d      	ldr	r5, [r3, r6]
 801112e:	684c      	ldr	r4, [r1, #4]
 8011130:	b155      	cbz	r5, 8011148 <_RemoveHoles+0x58>
 8011132:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8011136:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 801113a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801113e:	2801      	cmp	r0, #1
 8011140:	d005      	beq.n	801114e <_RemoveHoles+0x5e>
 8011142:	4626      	mov	r6, r4
 8011144:	460b      	mov	r3, r1
 8011146:	e7e2      	b.n	801110e <_RemoveHoles+0x1e>
 8011148:	4626      	mov	r6, r4
 801114a:	460b      	mov	r3, r1
 801114c:	e7e7      	b.n	801111e <_RemoveHoles+0x2e>
 801114e:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 8011152:	f8d9 b02c 	ldr.w	fp, [r9, #44]	; 0x2c
 8011156:	42b0      	cmp	r0, r6
 8011158:	d973      	bls.n	8011242 <_RemoveHoles+0x152>
 801115a:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 801115e:	42b0      	cmp	r0, r6
 8011160:	d975      	bls.n	801124e <_RemoveHoles+0x15e>
 8011162:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 8011166:	42b0      	cmp	r0, r6
 8011168:	d974      	bls.n	8011254 <_RemoveHoles+0x164>
 801116a:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 801116e:	42b0      	cmp	r0, r6
 8011170:	d96a      	bls.n	8011248 <_RemoveHoles+0x158>
 8011172:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8011176:	42b0      	cmp	r0, r6
 8011178:	d978      	bls.n	801126c <_RemoveHoles+0x17c>
 801117a:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 801117e:	4286      	cmp	r6, r0
 8011180:	d26e      	bcs.n	8011260 <_RemoveHoles+0x170>
 8011182:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8011186:	4286      	cmp	r6, r0
 8011188:	d26d      	bcs.n	8011266 <_RemoveHoles+0x176>
 801118a:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 801118e:	4286      	cmp	r6, r0
 8011190:	d263      	bcs.n	801125a <_RemoveHoles+0x16a>
 8011192:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 8011196:	4286      	cmp	r6, r0
 8011198:	d274      	bcs.n	8011284 <_RemoveHoles+0x194>
 801119a:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 801119e:	4286      	cmp	r6, r0
 80111a0:	d273      	bcs.n	801128a <_RemoveHoles+0x19a>
 80111a2:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 80111a6:	4286      	cmp	r6, r0
 80111a8:	d266      	bcs.n	8011278 <_RemoveHoles+0x188>
 80111aa:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 80111ae:	4286      	cmp	r6, r0
 80111b0:	d265      	bcs.n	801127e <_RemoveHoles+0x18e>
 80111b2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80111b6:	4286      	cmp	r6, r0
 80111b8:	d25b      	bcs.n	8011272 <_RemoveHoles+0x182>
 80111ba:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80111be:	4286      	cmp	r6, r0
 80111c0:	d269      	bcs.n	8011296 <_RemoveHoles+0x1a6>
 80111c2:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 80111c6:	4286      	cmp	r6, r0
 80111c8:	d21f      	bcs.n	801120a <_RemoveHoles+0x11a>
 80111ca:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 80111ce:	4286      	cmp	r6, r0
 80111d0:	d25e      	bcs.n	8011290 <_RemoveHoles+0x1a0>
 80111d2:	6053      	str	r3, [r2, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	4622      	mov	r2, r4
 80111d8:	f010 fda2 	bl	8021d20 <memmove>
 80111dc:	455d      	cmp	r5, fp
 80111de:	4603      	mov	r3, r0
 80111e0:	d00b      	beq.n	80111fa <_RemoveHoles+0x10a>
 80111e2:	441c      	add	r4, r3
 80111e4:	4630      	mov	r0, r6
 80111e6:	4621      	mov	r1, r4
 80111e8:	f7ff fdd4 	bl	8010d94 <_AddFreeMemory>
 80111ec:	f1ba 0f00 	cmp.w	sl, #0
 80111f0:	d001      	beq.n	80111f6 <_RemoveHoles+0x106>
 80111f2:	4550      	cmp	r0, sl
 80111f4:	d207      	bcs.n	8011206 <_RemoveHoles+0x116>
 80111f6:	4623      	mov	r3, r4
 80111f8:	e78b      	b.n	8011112 <_RemoveHoles+0x22>
 80111fa:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80111fe:	1b92      	subs	r2, r2, r6
 8011200:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8011204:	e7ed      	b.n	80111e2 <_RemoveHoles+0xf2>
 8011206:	2000      	movs	r0, #0
 8011208:	e78d      	b.n	8011126 <_RemoveHoles+0x36>
 801120a:	2001      	movs	r0, #1
 801120c:	9001      	str	r0, [sp, #4]
 801120e:	f8d8 0000 	ldr.w	r0, [r8]
 8011212:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8011216:	1b80      	subs	r0, r0, r6
 8011218:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801121c:	f8c8 0000 	str.w	r0, [r8]
 8011220:	f1be 0f00 	cmp.w	lr, #0
 8011224:	d001      	beq.n	801122a <_RemoveHoles+0x13a>
 8011226:	f8ce c004 	str.w	ip, [lr, #4]
 801122a:	f1bc 0f00 	cmp.w	ip, #0
 801122e:	d002      	beq.n	8011236 <_RemoveHoles+0x146>
 8011230:	f8cc e000 	str.w	lr, [ip]
 8011234:	e7cd      	b.n	80111d2 <_RemoveHoles+0xe2>
 8011236:	9801      	ldr	r0, [sp, #4]
 8011238:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 801123c:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 8011240:	e7c7      	b.n	80111d2 <_RemoveHoles+0xe2>
 8011242:	200f      	movs	r0, #15
 8011244:	9001      	str	r0, [sp, #4]
 8011246:	e7e2      	b.n	801120e <_RemoveHoles+0x11e>
 8011248:	200c      	movs	r0, #12
 801124a:	9001      	str	r0, [sp, #4]
 801124c:	e7df      	b.n	801120e <_RemoveHoles+0x11e>
 801124e:	200e      	movs	r0, #14
 8011250:	9001      	str	r0, [sp, #4]
 8011252:	e7dc      	b.n	801120e <_RemoveHoles+0x11e>
 8011254:	200d      	movs	r0, #13
 8011256:	9001      	str	r0, [sp, #4]
 8011258:	e7d9      	b.n	801120e <_RemoveHoles+0x11e>
 801125a:	2008      	movs	r0, #8
 801125c:	9001      	str	r0, [sp, #4]
 801125e:	e7d6      	b.n	801120e <_RemoveHoles+0x11e>
 8011260:	200a      	movs	r0, #10
 8011262:	9001      	str	r0, [sp, #4]
 8011264:	e7d3      	b.n	801120e <_RemoveHoles+0x11e>
 8011266:	2009      	movs	r0, #9
 8011268:	9001      	str	r0, [sp, #4]
 801126a:	e7d0      	b.n	801120e <_RemoveHoles+0x11e>
 801126c:	200b      	movs	r0, #11
 801126e:	9001      	str	r0, [sp, #4]
 8011270:	e7cd      	b.n	801120e <_RemoveHoles+0x11e>
 8011272:	2003      	movs	r0, #3
 8011274:	9001      	str	r0, [sp, #4]
 8011276:	e7ca      	b.n	801120e <_RemoveHoles+0x11e>
 8011278:	2005      	movs	r0, #5
 801127a:	9001      	str	r0, [sp, #4]
 801127c:	e7c7      	b.n	801120e <_RemoveHoles+0x11e>
 801127e:	2004      	movs	r0, #4
 8011280:	9001      	str	r0, [sp, #4]
 8011282:	e7c4      	b.n	801120e <_RemoveHoles+0x11e>
 8011284:	2007      	movs	r0, #7
 8011286:	9001      	str	r0, [sp, #4]
 8011288:	e7c1      	b.n	801120e <_RemoveHoles+0x11e>
 801128a:	2006      	movs	r0, #6
 801128c:	9001      	str	r0, [sp, #4]
 801128e:	e7be      	b.n	801120e <_RemoveHoles+0x11e>
 8011290:	2000      	movs	r0, #0
 8011292:	9001      	str	r0, [sp, #4]
 8011294:	e7bb      	b.n	801120e <_RemoveHoles+0x11e>
 8011296:	2002      	movs	r0, #2
 8011298:	9001      	str	r0, [sp, #4]
 801129a:	e7b8      	b.n	801120e <_RemoveHoles+0x11e>
 801129c:	2002aec0 	.word	0x2002aec0

080112a0 <_EnlargeBlocks>:
 80112a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	4d33      	ldr	r5, [pc, #204]	; (8011374 <_EnlargeBlocks+0xd4>)
 80112a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80112a8:	b973      	cbnz	r3, 80112c8 <_EnlargeBlocks+0x28>
 80112aa:	4b33      	ldr	r3, [pc, #204]	; (8011378 <_EnlargeBlocks+0xd8>)
 80112ac:	689c      	ldr	r4, [r3, #8]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	3408      	adds	r4, #8
 80112b2:	fbb3 f4f4 	udiv	r4, r3, r4
 80112b6:	3402      	adds	r4, #2
 80112b8:	00e0      	lsls	r0, r4, #3
 80112ba:	f000 f861 	bl	8011380 <_Alloc>
 80112be:	4680      	mov	r8, r0
 80112c0:	b960      	cbnz	r0, 80112dc <_EnlargeBlocks+0x3c>
 80112c2:	2001      	movs	r0, #1
 80112c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c8:	692b      	ldr	r3, [r5, #16]
 80112ca:	1d1c      	adds	r4, r3, #4
 80112cc:	eb04 04d3 	add.w	r4, r4, r3, lsr #3
 80112d0:	00e0      	lsls	r0, r4, #3
 80112d2:	f000 f855 	bl	8011380 <_Alloc>
 80112d6:	4680      	mov	r8, r0
 80112d8:	2800      	cmp	r0, #0
 80112da:	d0f2      	beq.n	80112c2 <_EnlargeBlocks+0x22>
 80112dc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80112de:	692a      	ldr	r2, [r5, #16]
 80112e0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80112e4:	4b25      	ldr	r3, [pc, #148]	; (801137c <_EnlargeBlocks+0xdc>)
 80112e6:	00d2      	lsls	r2, r2, #3
 80112e8:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 80112ea:	6846      	ldr	r6, [r0, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3608      	adds	r6, #8
 80112f0:	4630      	mov	r0, r6
 80112f2:	4798      	blx	r3
 80112f4:	6928      	ldr	r0, [r5, #16]
 80112f6:	1e61      	subs	r1, r4, #1
 80112f8:	636e      	str	r6, [r5, #52]	; 0x34
 80112fa:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80112fe:	4288      	cmp	r0, r1
 8011300:	d236      	bcs.n	8011370 <_EnlargeBlocks+0xd0>
 8011302:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 8011306:	4603      	mov	r3, r0
 8011308:	3301      	adds	r3, #1
 801130a:	3208      	adds	r2, #8
 801130c:	428b      	cmp	r3, r1
 801130e:	f842 3c04 	str.w	r3, [r2, #-4]
 8011312:	d1f9      	bne.n	8011308 <_EnlargeBlocks+0x68>
 8011314:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8011318:	2600      	movs	r6, #0
 801131a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011374 <_EnlargeBlocks+0xd4>
 801131e:	604e      	str	r6, [r1, #4]
 8011320:	686b      	ldr	r3, [r5, #4]
 8011322:	6268      	str	r0, [r5, #36]	; 0x24
 8011324:	1a18      	subs	r0, r3, r0
 8011326:	612c      	str	r4, [r5, #16]
 8011328:	4404      	add	r4, r0
 801132a:	606c      	str	r4, [r5, #4]
 801132c:	b1ef      	cbz	r7, 801136a <_EnlargeBlocks+0xca>
 801132e:	f004 ff99 	bl	8016264 <GUI_Lock>
 8011332:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8011336:	00fc      	lsls	r4, r7, #3
 8011338:	4423      	add	r3, r4
 801133a:	6859      	ldr	r1, [r3, #4]
 801133c:	6848      	ldr	r0, [r1, #4]
 801133e:	f7ff fd29 	bl	8010d94 <_AddFreeMemory>
 8011342:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011346:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801134a:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 801134e:	3301      	adds	r3, #1
 8011350:	4414      	add	r4, r2
 8011352:	f8c8 3004 	str.w	r3, [r8, #4]
 8011356:	6061      	str	r1, [r4, #4]
 8011358:	f802 6037 	strb.w	r6, [r2, r7, lsl #3]
 801135c:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 8011360:	f004 ff76 	bl	8016250 <GUI_Unlock>
 8011364:	4630      	mov	r0, r6
 8011366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136a:	4638      	mov	r0, r7
 801136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011370:	4601      	mov	r1, r0
 8011372:	e7cf      	b.n	8011314 <_EnlargeBlocks+0x74>
 8011374:	2002aec0 	.word	0x2002aec0
 8011378:	200001c8 	.word	0x200001c8
 801137c:	2000004c 	.word	0x2000004c

08011380 <_Alloc>:
 8011380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011384:	4cc1      	ldr	r4, [pc, #772]	; (801168c <_Alloc+0x30c>)
 8011386:	4605      	mov	r5, r0
 8011388:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801138c:	2b00      	cmp	r3, #0
 801138e:	f000 80f7 	beq.w	8011580 <_Alloc+0x200>
 8011392:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011394:	4285      	cmp	r5, r0
 8011396:	d302      	bcc.n	801139e <_Alloc+0x1e>
 8011398:	1ce8      	adds	r0, r5, #3
 801139a:	f020 0003 	bic.w	r0, r0, #3
 801139e:	f100 060c 	add.w	r6, r0, #12
 80113a2:	6823      	ldr	r3, [r4, #0]
 80113a4:	4db9      	ldr	r5, [pc, #740]	; (801168c <_Alloc+0x30c>)
 80113a6:	42b3      	cmp	r3, r6
 80113a8:	d202      	bcs.n	80113b0 <_Alloc+0x30>
 80113aa:	2000      	movs	r0, #0
 80113ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b0:	686b      	ldr	r3, [r5, #4]
 80113b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80113b4:	4293      	cmp	r3, r2
 80113b6:	f240 8156 	bls.w	8011666 <_Alloc+0x2e6>
 80113ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80113bc:	3b01      	subs	r3, #1
 80113be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80113c0:	2101      	movs	r1, #1
 80113c2:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80113c6:	6063      	str	r3, [r4, #4]
 80113c8:	eb02 0308 	add.w	r3, r2, r8
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	6263      	str	r3, [r4, #36]	; 0x24
 80113d0:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 80113d4:	2d00      	cmp	r5, #0
 80113d6:	d0e8      	beq.n	80113aa <_Alloc+0x2a>
 80113d8:	4fac      	ldr	r7, [pc, #688]	; (801168c <_Alloc+0x30c>)
 80113da:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 80113de:	4576      	cmp	r6, lr
 80113e0:	f080 8123 	bcs.w	801162a <_Alloc+0x2aa>
 80113e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80113e8:	429e      	cmp	r6, r3
 80113ea:	f080 8120 	bcs.w	801162e <_Alloc+0x2ae>
 80113ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113f2:	429e      	cmp	r6, r3
 80113f4:	f080 811d 	bcs.w	8011632 <_Alloc+0x2b2>
 80113f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113fc:	429e      	cmp	r6, r3
 80113fe:	f080 811c 	bcs.w	801163a <_Alloc+0x2ba>
 8011402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011406:	429e      	cmp	r6, r3
 8011408:	f080 8115 	bcs.w	8011636 <_Alloc+0x2b6>
 801140c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011410:	429e      	cmp	r6, r3
 8011412:	f080 8116 	bcs.w	8011642 <_Alloc+0x2c2>
 8011416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801141a:	429e      	cmp	r6, r3
 801141c:	f080 810f 	bcs.w	801163e <_Alloc+0x2be>
 8011420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011424:	429e      	cmp	r6, r3
 8011426:	f080 8110 	bcs.w	801164a <_Alloc+0x2ca>
 801142a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801142c:	429e      	cmp	r6, r3
 801142e:	f080 810a 	bcs.w	8011646 <_Alloc+0x2c6>
 8011432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011434:	429e      	cmp	r6, r3
 8011436:	f080 810c 	bcs.w	8011652 <_Alloc+0x2d2>
 801143a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801143c:	429e      	cmp	r6, r3
 801143e:	f080 8106 	bcs.w	801164e <_Alloc+0x2ce>
 8011442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011444:	429e      	cmp	r6, r3
 8011446:	f080 8106 	bcs.w	8011656 <_Alloc+0x2d6>
 801144a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801144c:	429e      	cmp	r6, r3
 801144e:	f080 8104 	bcs.w	801165a <_Alloc+0x2da>
 8011452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011454:	429e      	cmp	r6, r3
 8011456:	f080 8104 	bcs.w	8011662 <_Alloc+0x2e2>
 801145a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801145c:	429e      	cmp	r6, r3
 801145e:	f080 80fe 	bcs.w	801165e <_Alloc+0x2de>
 8011462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011464:	429e      	cmp	r6, r3
 8011466:	f04f 33ff 	mov.w	r3, #4294967295
 801146a:	bf28      	it	cs
 801146c:	2300      	movcs	r3, #0
 801146e:	2b0f      	cmp	r3, #15
 8011470:	d811      	bhi.n	8011496 <_Alloc+0x116>
 8011472:	2100      	movs	r1, #0
 8011474:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 8011478:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801147a:	b92b      	cbnz	r3, 8011488 <_Alloc+0x108>
 801147c:	e007      	b.n	801148e <_Alloc+0x10e>
 801147e:	685a      	ldr	r2, [r3, #4]
 8011480:	4296      	cmp	r6, r2
 8011482:	d91c      	bls.n	80114be <_Alloc+0x13e>
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	b113      	cbz	r3, 801148e <_Alloc+0x10e>
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1f7      	bne.n	801147e <_Alloc+0xfe>
 801148e:	3101      	adds	r1, #1
 8011490:	3008      	adds	r0, #8
 8011492:	2910      	cmp	r1, #16
 8011494:	d1f0      	bne.n	8011478 <_Alloc+0xf8>
 8011496:	4630      	mov	r0, r6
 8011498:	f7ff fe2a 	bl	80110f0 <_RemoveHoles>
 801149c:	2800      	cmp	r0, #0
 801149e:	d09c      	beq.n	80113da <_Alloc+0x5a>
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	2100      	movs	r1, #0
 80114a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80114a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114a8:	3301      	adds	r3, #1
 80114aa:	4490      	add	r8, r2
 80114ac:	4608      	mov	r0, r1
 80114ae:	6063      	str	r3, [r4, #4]
 80114b0:	f8c8 6004 	str.w	r6, [r8, #4]
 80114b4:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 80114b8:	6265      	str	r5, [r4, #36]	; 0x24
 80114ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80114c0:	1b97      	subs	r7, r2, r6
 80114c2:	f101 000c 	add.w	r0, r1, #12
 80114c6:	4287      	cmp	r7, r0
 80114c8:	bf2c      	ite	cs
 80114ca:	4630      	movcs	r0, r6
 80114cc:	4610      	movcc	r0, r2
 80114ce:	4596      	cmp	lr, r2
 80114d0:	f240 80f5 	bls.w	80116be <_Alloc+0x33e>
 80114d4:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 80114d8:	4e6c      	ldr	r6, [pc, #432]	; (801168c <_Alloc+0x30c>)
 80114da:	42ba      	cmp	r2, r7
 80114dc:	f080 80f1 	bcs.w	80116c2 <_Alloc+0x342>
 80114e0:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 80114e4:	42ba      	cmp	r2, r7
 80114e6:	f080 80e8 	bcs.w	80116ba <_Alloc+0x33a>
 80114ea:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 80114ee:	42ba      	cmp	r2, r7
 80114f0:	f080 80d0 	bcs.w	8011694 <_Alloc+0x314>
 80114f4:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 80114f8:	42ba      	cmp	r2, r7
 80114fa:	f080 80d8 	bcs.w	80116ae <_Alloc+0x32e>
 80114fe:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8011502:	4297      	cmp	r7, r2
 8011504:	f240 80df 	bls.w	80116c6 <_Alloc+0x346>
 8011508:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 801150c:	4297      	cmp	r7, r2
 801150e:	f240 80de 	bls.w	80116ce <_Alloc+0x34e>
 8011512:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8011516:	4297      	cmp	r7, r2
 8011518:	f240 80d7 	bls.w	80116ca <_Alloc+0x34a>
 801151c:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 801151e:	4297      	cmp	r7, r2
 8011520:	f240 80e5 	bls.w	80116ee <_Alloc+0x36e>
 8011524:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8011526:	4296      	cmp	r6, r2
 8011528:	f240 80df 	bls.w	80116ea <_Alloc+0x36a>
 801152c:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801152e:	4f57      	ldr	r7, [pc, #348]	; (801168c <_Alloc+0x30c>)
 8011530:	4296      	cmp	r6, r2
 8011532:	f240 80d8 	bls.w	80116e6 <_Alloc+0x366>
 8011536:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8011538:	4296      	cmp	r6, r2
 801153a:	f240 80d2 	bls.w	80116e2 <_Alloc+0x362>
 801153e:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8011540:	42b2      	cmp	r2, r6
 8011542:	f080 80cc 	bcs.w	80116de <_Alloc+0x35e>
 8011546:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8011548:	4296      	cmp	r6, r2
 801154a:	f240 80c6 	bls.w	80116da <_Alloc+0x35a>
 801154e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8011550:	42b2      	cmp	r2, r6
 8011552:	f080 80c0 	bcs.w	80116d6 <_Alloc+0x356>
 8011556:	4291      	cmp	r1, r2
 8011558:	f240 80bb 	bls.w	80116d2 <_Alloc+0x352>
 801155c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801155e:	2600      	movs	r6, #0
 8011560:	1819      	adds	r1, r3, r0
 8011562:	4290      	cmp	r0, r2
 8011564:	44a0      	add	r8, r4
 8011566:	f8c8 3004 	str.w	r3, [r8, #4]
 801156a:	601d      	str	r5, [r3, #0]
 801156c:	6058      	str	r0, [r3, #4]
 801156e:	611b      	str	r3, [r3, #16]
 8011570:	609e      	str	r6, [r3, #8]
 8011572:	f841 0c04 	str.w	r0, [r1, #-4]
 8011576:	f2c0 8082 	blt.w	801167e <_Alloc+0x2fe>
 801157a:	4628      	mov	r0, r5
 801157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011580:	4b43      	ldr	r3, [pc, #268]	; (8011690 <_Alloc+0x310>)
 8011582:	2101      	movs	r1, #1
 8011584:	689a      	ldr	r2, [r3, #8]
 8011586:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801158a:	6858      	ldr	r0, [r3, #4]
 801158c:	b90a      	cbnz	r2, 8011592 <_Alloc+0x212>
 801158e:	0882      	lsrs	r2, r0, #2
 8011590:	609a      	str	r2, [r3, #8]
 8011592:	275a      	movs	r7, #90	; 0x5a
 8011594:	2210      	movs	r2, #16
 8011596:	2620      	movs	r6, #32
 8011598:	f04f 0e40 	mov.w	lr, #64	; 0x40
 801159c:	6227      	str	r7, [r4, #32]
 801159e:	2780      	movs	r7, #128	; 0x80
 80115a0:	6422      	str	r2, [r4, #64]	; 0x40
 80115a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115a6:	64a6      	str	r6, [r4, #72]	; 0x48
 80115a8:	f44f 7600 	mov.w	r6, #512	; 0x200
 80115ac:	6819      	ldr	r1, [r3, #0]
 80115ae:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 80115b2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80115b6:	65a7      	str	r7, [r4, #88]	; 0x58
 80115b8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80115bc:	6622      	str	r2, [r4, #96]	; 0x60
 80115be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80115c2:	66a6      	str	r6, [r4, #104]	; 0x68
 80115c4:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80115c8:	f1a1 0314 	sub.w	r3, r1, #20
 80115cc:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
 80115d0:	67a7      	str	r7, [r4, #120]	; 0x78
 80115d2:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 80115d6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 80115da:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 80115de:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80115e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80115e6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80115ea:	4403      	add	r3, r0
 80115ec:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
 80115f0:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80115f4:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 80115f8:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80115fc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8011600:	2202      	movs	r2, #2
 8011602:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8011606:	2601      	movs	r6, #1
 8011608:	63a1      	str	r1, [r4, #56]	; 0x38
 801160a:	6363      	str	r3, [r4, #52]	; 0x34
 801160c:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 8011610:	6122      	str	r2, [r4, #16]
 8011612:	60e0      	str	r0, [r4, #12]
 8011614:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 8011618:	605e      	str	r6, [r3, #4]
 801161a:	6266      	str	r6, [r4, #36]	; 0x24
 801161c:	6066      	str	r6, [r4, #4]
 801161e:	f7ff fbb9 	bl	8010d94 <_AddFreeMemory>
 8011622:	f7ff fe3d 	bl	80112a0 <_EnlargeBlocks>
 8011626:	6326      	str	r6, [r4, #48]	; 0x30
 8011628:	e6b3      	b.n	8011392 <_Alloc+0x12>
 801162a:	210f      	movs	r1, #15
 801162c:	e722      	b.n	8011474 <_Alloc+0xf4>
 801162e:	210e      	movs	r1, #14
 8011630:	e720      	b.n	8011474 <_Alloc+0xf4>
 8011632:	210d      	movs	r1, #13
 8011634:	e71e      	b.n	8011474 <_Alloc+0xf4>
 8011636:	210b      	movs	r1, #11
 8011638:	e71c      	b.n	8011474 <_Alloc+0xf4>
 801163a:	210c      	movs	r1, #12
 801163c:	e71a      	b.n	8011474 <_Alloc+0xf4>
 801163e:	2109      	movs	r1, #9
 8011640:	e718      	b.n	8011474 <_Alloc+0xf4>
 8011642:	210a      	movs	r1, #10
 8011644:	e716      	b.n	8011474 <_Alloc+0xf4>
 8011646:	2107      	movs	r1, #7
 8011648:	e714      	b.n	8011474 <_Alloc+0xf4>
 801164a:	2108      	movs	r1, #8
 801164c:	e712      	b.n	8011474 <_Alloc+0xf4>
 801164e:	2105      	movs	r1, #5
 8011650:	e710      	b.n	8011474 <_Alloc+0xf4>
 8011652:	2106      	movs	r1, #6
 8011654:	e70e      	b.n	8011474 <_Alloc+0xf4>
 8011656:	2104      	movs	r1, #4
 8011658:	e70c      	b.n	8011474 <_Alloc+0xf4>
 801165a:	2103      	movs	r1, #3
 801165c:	e70a      	b.n	8011474 <_Alloc+0xf4>
 801165e:	2101      	movs	r1, #1
 8011660:	e708      	b.n	8011474 <_Alloc+0xf4>
 8011662:	2102      	movs	r1, #2
 8011664:	e706      	b.n	8011474 <_Alloc+0xf4>
 8011666:	3a01      	subs	r2, #1
 8011668:	632a      	str	r2, [r5, #48]	; 0x30
 801166a:	f7ff fe19 	bl	80112a0 <_EnlargeBlocks>
 801166e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011670:	3301      	adds	r3, #1
 8011672:	632b      	str	r3, [r5, #48]	; 0x30
 8011674:	2800      	cmp	r0, #0
 8011676:	f47f ae98 	bne.w	80113aa <_Alloc+0x2a>
 801167a:	686b      	ldr	r3, [r5, #4]
 801167c:	e69d      	b.n	80113ba <_Alloc+0x3a>
 801167e:	1a10      	subs	r0, r2, r0
 8011680:	f7ff fb88 	bl	8010d94 <_AddFreeMemory>
 8011684:	4628      	mov	r0, r5
 8011686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801168a:	bf00      	nop
 801168c:	2002aec0 	.word	0x2002aec0
 8011690:	200001c8 	.word	0x200001c8
 8011694:	210c      	movs	r1, #12
 8011696:	6826      	ldr	r6, [r4, #0]
 8011698:	689f      	ldr	r7, [r3, #8]
 801169a:	ebc2 0e06 	rsb	lr, r2, r6
 801169e:	68de      	ldr	r6, [r3, #12]
 80116a0:	f8c4 e000 	str.w	lr, [r4]
 80116a4:	b107      	cbz	r7, 80116a8 <_Alloc+0x328>
 80116a6:	607e      	str	r6, [r7, #4]
 80116a8:	b11e      	cbz	r6, 80116b2 <_Alloc+0x332>
 80116aa:	6037      	str	r7, [r6, #0]
 80116ac:	e756      	b.n	801155c <_Alloc+0x1dc>
 80116ae:	210b      	movs	r1, #11
 80116b0:	e7f1      	b.n	8011696 <_Alloc+0x316>
 80116b2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80116b6:	644f      	str	r7, [r1, #68]	; 0x44
 80116b8:	e750      	b.n	801155c <_Alloc+0x1dc>
 80116ba:	210d      	movs	r1, #13
 80116bc:	e7eb      	b.n	8011696 <_Alloc+0x316>
 80116be:	210f      	movs	r1, #15
 80116c0:	e7e9      	b.n	8011696 <_Alloc+0x316>
 80116c2:	210e      	movs	r1, #14
 80116c4:	e7e7      	b.n	8011696 <_Alloc+0x316>
 80116c6:	210a      	movs	r1, #10
 80116c8:	e7e5      	b.n	8011696 <_Alloc+0x316>
 80116ca:	2108      	movs	r1, #8
 80116cc:	e7e3      	b.n	8011696 <_Alloc+0x316>
 80116ce:	2109      	movs	r1, #9
 80116d0:	e7e1      	b.n	8011696 <_Alloc+0x316>
 80116d2:	2100      	movs	r1, #0
 80116d4:	e7df      	b.n	8011696 <_Alloc+0x316>
 80116d6:	2101      	movs	r1, #1
 80116d8:	e7dd      	b.n	8011696 <_Alloc+0x316>
 80116da:	2102      	movs	r1, #2
 80116dc:	e7db      	b.n	8011696 <_Alloc+0x316>
 80116de:	2103      	movs	r1, #3
 80116e0:	e7d9      	b.n	8011696 <_Alloc+0x316>
 80116e2:	2104      	movs	r1, #4
 80116e4:	e7d7      	b.n	8011696 <_Alloc+0x316>
 80116e6:	2105      	movs	r1, #5
 80116e8:	e7d5      	b.n	8011696 <_Alloc+0x316>
 80116ea:	2106      	movs	r1, #6
 80116ec:	e7d3      	b.n	8011696 <_Alloc+0x316>
 80116ee:	2107      	movs	r1, #7
 80116f0:	e7d1      	b.n	8011696 <_Alloc+0x316>
 80116f2:	bf00      	nop

080116f4 <GUI_ALLOC_FreeFixedBlock>:
 80116f4:	b128      	cbz	r0, 8011702 <GUI_ALLOC_FreeFixedBlock+0xe>
 80116f6:	4a03      	ldr	r2, [pc, #12]	; (8011704 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80116f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80116fa:	6003      	str	r3, [r0, #0]
 80116fc:	b103      	cbz	r3, 8011700 <GUI_ALLOC_FreeFixedBlock+0xc>
 80116fe:	6058      	str	r0, [r3, #4]
 8011700:	63d0      	str	r0, [r2, #60]	; 0x3c
 8011702:	4770      	bx	lr
 8011704:	2002aec0 	.word	0x2002aec0

08011708 <GUI_ALLOC_GetFixedBlock>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	4e8b      	ldr	r6, [pc, #556]	; (8011938 <GUI_ALLOC_GetFixedBlock+0x230>)
 801170c:	4604      	mov	r4, r0
 801170e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8011712:	2b00      	cmp	r3, #0
 8011714:	d02f      	beq.n	8011776 <GUI_ALLOC_GetFixedBlock+0x6e>
 8011716:	3403      	adds	r4, #3
 8011718:	6c35      	ldr	r5, [r6, #64]	; 0x40
 801171a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801171c:	f024 0403 	bic.w	r4, r4, #3
 8011720:	3404      	adds	r4, #4
 8011722:	42a5      	cmp	r5, r4
 8011724:	bf38      	it	cc
 8011726:	4625      	movcc	r5, r4
 8011728:	b162      	cbz	r2, 8011744 <GUI_ALLOC_GetFixedBlock+0x3c>
 801172a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801172e:	4614      	mov	r4, r2
 8011730:	429d      	cmp	r5, r3
 8011732:	d104      	bne.n	801173e <GUI_ALLOC_GetFixedBlock+0x36>
 8011734:	e014      	b.n	8011760 <GUI_ALLOC_GetFixedBlock+0x58>
 8011736:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801173a:	429d      	cmp	r5, r3
 801173c:	d010      	beq.n	8011760 <GUI_ALLOC_GetFixedBlock+0x58>
 801173e:	6824      	ldr	r4, [r4, #0]
 8011740:	2c00      	cmp	r4, #0
 8011742:	d1f8      	bne.n	8011736 <GUI_ALLOC_GetFixedBlock+0x2e>
 8011744:	68f3      	ldr	r3, [r6, #12]
 8011746:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8011748:	441c      	add	r4, r3
 801174a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801174e:	1a61      	subs	r1, r4, r1
 8011750:	680b      	ldr	r3, [r1, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d168      	bne.n	8011828 <GUI_ALLOC_GetFixedBlock+0x120>
 8011756:	684b      	ldr	r3, [r1, #4]
 8011758:	429d      	cmp	r5, r3
 801175a:	dd6f      	ble.n	801183c <GUI_ALLOC_GetFixedBlock+0x134>
 801175c:	2400      	movs	r4, #0
 801175e:	e008      	b.n	8011772 <GUI_ALLOC_GetFixedBlock+0x6a>
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	b10b      	cbz	r3, 8011768 <GUI_ALLOC_GetFixedBlock+0x60>
 8011764:	6861      	ldr	r1, [r4, #4]
 8011766:	6059      	str	r1, [r3, #4]
 8011768:	6861      	ldr	r1, [r4, #4]
 801176a:	b101      	cbz	r1, 801176e <GUI_ALLOC_GetFixedBlock+0x66>
 801176c:	600b      	str	r3, [r1, #0]
 801176e:	42a2      	cmp	r2, r4
 8011770:	d056      	beq.n	8011820 <GUI_ALLOC_GetFixedBlock+0x118>
 8011772:	4620      	mov	r0, r4
 8011774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011776:	4b71      	ldr	r3, [pc, #452]	; (801193c <GUI_ALLOC_GetFixedBlock+0x234>)
 8011778:	2101      	movs	r1, #1
 801177a:	689a      	ldr	r2, [r3, #8]
 801177c:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 8011780:	6858      	ldr	r0, [r3, #4]
 8011782:	b90a      	cbnz	r2, 8011788 <GUI_ALLOC_GetFixedBlock+0x80>
 8011784:	0882      	lsrs	r2, r0, #2
 8011786:	609a      	str	r2, [r3, #8]
 8011788:	275a      	movs	r7, #90	; 0x5a
 801178a:	2210      	movs	r2, #16
 801178c:	2520      	movs	r5, #32
 801178e:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8011792:	6237      	str	r7, [r6, #32]
 8011794:	2780      	movs	r7, #128	; 0x80
 8011796:	6432      	str	r2, [r6, #64]	; 0x40
 8011798:	f44f 7280 	mov.w	r2, #256	; 0x100
 801179c:	64b5      	str	r5, [r6, #72]	; 0x48
 801179e:	f44f 7500 	mov.w	r5, #512	; 0x200
 80117a2:	6819      	ldr	r1, [r3, #0]
 80117a4:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 80117a8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80117ac:	65b7      	str	r7, [r6, #88]	; 0x58
 80117ae:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80117b2:	6632      	str	r2, [r6, #96]	; 0x60
 80117b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80117b8:	66b5      	str	r5, [r6, #104]	; 0x68
 80117ba:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 80117be:	f1a1 0314 	sub.w	r3, r1, #20
 80117c2:	f8c6 e070 	str.w	lr, [r6, #112]	; 0x70
 80117c6:	67b7      	str	r7, [r6, #120]	; 0x78
 80117c8:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 80117cc:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
 80117d0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 80117d4:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
 80117d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80117dc:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80117e0:	4403      	add	r3, r0
 80117e2:	f8c6 e090 	str.w	lr, [r6, #144]	; 0x90
 80117e6:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 80117ea:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
 80117ee:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 80117f2:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
 80117f6:	2202      	movs	r2, #2
 80117f8:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
 80117fc:	2501      	movs	r5, #1
 80117fe:	63b1      	str	r1, [r6, #56]	; 0x38
 8011800:	6373      	str	r3, [r6, #52]	; 0x34
 8011802:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 8011806:	6132      	str	r2, [r6, #16]
 8011808:	60f0      	str	r0, [r6, #12]
 801180a:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 801180e:	605d      	str	r5, [r3, #4]
 8011810:	6275      	str	r5, [r6, #36]	; 0x24
 8011812:	6075      	str	r5, [r6, #4]
 8011814:	f7ff fabe 	bl	8010d94 <_AddFreeMemory>
 8011818:	f7ff fd42 	bl	80112a0 <_EnlargeBlocks>
 801181c:	6335      	str	r5, [r6, #48]	; 0x30
 801181e:	e77a      	b.n	8011716 <GUI_ALLOC_GetFixedBlock+0xe>
 8011820:	6823      	ldr	r3, [r4, #0]
 8011822:	4620      	mov	r0, r4
 8011824:	63f3      	str	r3, [r6, #60]	; 0x3c
 8011826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011828:	2000      	movs	r0, #0
 801182a:	f7ff fc61 	bl	80110f0 <_RemoveHoles>
 801182e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8011832:	1a61      	subs	r1, r4, r1
 8011834:	680b      	ldr	r3, [r1, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d190      	bne.n	801175c <GUI_ALLOC_GetFixedBlock+0x54>
 801183a:	e78c      	b.n	8011756 <GUI_ALLOC_GetFixedBlock+0x4e>
 801183c:	1b58      	subs	r0, r3, r5
 801183e:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 8011842:	4a3d      	ldr	r2, [pc, #244]	; (8011938 <GUI_ALLOC_GetFixedBlock+0x230>)
 8011844:	1d04      	adds	r4, r0, #4
 8011846:	42bb      	cmp	r3, r7
 8011848:	440c      	add	r4, r1
 801184a:	d272      	bcs.n	8011932 <GUI_ALLOC_GetFixedBlock+0x22a>
 801184c:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 8011850:	42bb      	cmp	r3, r7
 8011852:	d26c      	bcs.n	801192e <GUI_ALLOC_GetFixedBlock+0x226>
 8011854:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 8011858:	42bb      	cmp	r3, r7
 801185a:	d266      	bcs.n	801192a <GUI_ALLOC_GetFixedBlock+0x222>
 801185c:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8011860:	42bb      	cmp	r3, r7
 8011862:	d260      	bcs.n	8011926 <GUI_ALLOC_GetFixedBlock+0x21e>
 8011864:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 8011868:	429f      	cmp	r7, r3
 801186a:	d95a      	bls.n	8011922 <GUI_ALLOC_GetFixedBlock+0x21a>
 801186c:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 8011870:	42bb      	cmp	r3, r7
 8011872:	d254      	bcs.n	801191e <GUI_ALLOC_GetFixedBlock+0x216>
 8011874:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8011878:	42bb      	cmp	r3, r7
 801187a:	d24e      	bcs.n	801191a <GUI_ALLOC_GetFixedBlock+0x212>
 801187c:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 8011880:	42bb      	cmp	r3, r7
 8011882:	d248      	bcs.n	8011916 <GUI_ALLOC_GetFixedBlock+0x20e>
 8011884:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8011886:	4293      	cmp	r3, r2
 8011888:	d243      	bcs.n	8011912 <GUI_ALLOC_GetFixedBlock+0x20a>
 801188a:	6f37      	ldr	r7, [r6, #112]	; 0x70
 801188c:	4a2a      	ldr	r2, [pc, #168]	; (8011938 <GUI_ALLOC_GetFixedBlock+0x230>)
 801188e:	42bb      	cmp	r3, r7
 8011890:	d23d      	bcs.n	801190e <GUI_ALLOC_GetFixedBlock+0x206>
 8011892:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8011894:	42bb      	cmp	r3, r7
 8011896:	d238      	bcs.n	801190a <GUI_ALLOC_GetFixedBlock+0x202>
 8011898:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801189a:	42bb      	cmp	r3, r7
 801189c:	d233      	bcs.n	8011906 <GUI_ALLOC_GetFixedBlock+0x1fe>
 801189e:	6d97      	ldr	r7, [r2, #88]	; 0x58
 80118a0:	42bb      	cmp	r3, r7
 80118a2:	d22e      	bcs.n	8011902 <GUI_ALLOC_GetFixedBlock+0x1fa>
 80118a4:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80118a6:	42bb      	cmp	r3, r7
 80118a8:	d229      	bcs.n	80118fe <GUI_ALLOC_GetFixedBlock+0x1f6>
 80118aa:	6c97      	ldr	r7, [r2, #72]	; 0x48
 80118ac:	42bb      	cmp	r3, r7
 80118ae:	d224      	bcs.n	80118fa <GUI_ALLOC_GetFixedBlock+0x1f2>
 80118b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d20c      	bcs.n	80118d0 <GUI_ALLOC_GetFixedBlock+0x1c8>
 80118b6:	68f2      	ldr	r2, [r6, #12]
 80118b8:	6973      	ldr	r3, [r6, #20]
 80118ba:	1b52      	subs	r2, r2, r5
 80118bc:	442b      	add	r3, r5
 80118be:	60f2      	str	r2, [r6, #12]
 80118c0:	6173      	str	r3, [r6, #20]
 80118c2:	b910      	cbnz	r0, 80118ca <GUI_ALLOC_GetFixedBlock+0x1c2>
 80118c4:	f844 5c04 	str.w	r5, [r4, #-4]
 80118c8:	e753      	b.n	8011772 <GUI_ALLOC_GetFixedBlock+0x6a>
 80118ca:	f7ff fa63 	bl	8010d94 <_AddFreeMemory>
 80118ce:	e7f9      	b.n	80118c4 <GUI_ALLOC_GetFixedBlock+0x1bc>
 80118d0:	2200      	movs	r2, #0
 80118d2:	6837      	ldr	r7, [r6, #0]
 80118d4:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80118d8:	1aff      	subs	r7, r7, r3
 80118da:	68cb      	ldr	r3, [r1, #12]
 80118dc:	6037      	str	r7, [r6, #0]
 80118de:	f1be 0f00 	cmp.w	lr, #0
 80118e2:	d001      	beq.n	80118e8 <GUI_ALLOC_GetFixedBlock+0x1e0>
 80118e4:	f8ce 3004 	str.w	r3, [lr, #4]
 80118e8:	b113      	cbz	r3, 80118f0 <GUI_ALLOC_GetFixedBlock+0x1e8>
 80118ea:	f8c3 e000 	str.w	lr, [r3]
 80118ee:	e7e2      	b.n	80118b6 <GUI_ALLOC_GetFixedBlock+0x1ae>
 80118f0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80118f4:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 80118f8:	e7dd      	b.n	80118b6 <GUI_ALLOC_GetFixedBlock+0x1ae>
 80118fa:	2201      	movs	r2, #1
 80118fc:	e7e9      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 80118fe:	2202      	movs	r2, #2
 8011900:	e7e7      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011902:	2203      	movs	r2, #3
 8011904:	e7e5      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011906:	2204      	movs	r2, #4
 8011908:	e7e3      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801190a:	2205      	movs	r2, #5
 801190c:	e7e1      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801190e:	2206      	movs	r2, #6
 8011910:	e7df      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011912:	2207      	movs	r2, #7
 8011914:	e7dd      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011916:	2208      	movs	r2, #8
 8011918:	e7db      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801191a:	2209      	movs	r2, #9
 801191c:	e7d9      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801191e:	220a      	movs	r2, #10
 8011920:	e7d7      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011922:	220b      	movs	r2, #11
 8011924:	e7d5      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011926:	220c      	movs	r2, #12
 8011928:	e7d3      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801192a:	220d      	movs	r2, #13
 801192c:	e7d1      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801192e:	220e      	movs	r2, #14
 8011930:	e7cf      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011932:	220f      	movs	r2, #15
 8011934:	e7cd      	b.n	80118d2 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8011936:	bf00      	nop
 8011938:	2002aec0 	.word	0x2002aec0
 801193c:	200001c8 	.word	0x200001c8

08011940 <GUI_ALLOC_AllocNoInit>:
 8011940:	b900      	cbnz	r0, 8011944 <GUI_ALLOC_AllocNoInit+0x4>
 8011942:	4770      	bx	lr
 8011944:	b510      	push	{r4, lr}
 8011946:	4604      	mov	r4, r0
 8011948:	f004 fc8c 	bl	8016264 <GUI_Lock>
 801194c:	4620      	mov	r0, r4
 801194e:	f7ff fd17 	bl	8011380 <_Alloc>
 8011952:	4604      	mov	r4, r0
 8011954:	f004 fc7c 	bl	8016250 <GUI_Unlock>
 8011958:	4620      	mov	r0, r4
 801195a:	bd10      	pop	{r4, pc}

0801195c <GUI_ALLOC_h2p>:
 801195c:	4b03      	ldr	r3, [pc, #12]	; (801196c <GUI_ALLOC_h2p+0x10>)
 801195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011960:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011964:	6840      	ldr	r0, [r0, #4]
 8011966:	3008      	adds	r0, #8
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	2002aec0 	.word	0x2002aec0

08011970 <GUI_ALLOC_LockH>:
 8011970:	4a08      	ldr	r2, [pc, #32]	; (8011994 <GUI_ALLOC_LockH+0x24>)
 8011972:	69d1      	ldr	r1, [r2, #28]
 8011974:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011976:	3101      	adds	r1, #1
 8011978:	b410      	push	{r4}
 801197a:	61d1      	str	r1, [r2, #28]
 801197c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8011980:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8011984:	3201      	adds	r2, #1
 8011986:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 801198a:	6860      	ldr	r0, [r4, #4]
 801198c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011990:	3008      	adds	r0, #8
 8011992:	4770      	bx	lr
 8011994:	2002aec0 	.word	0x2002aec0

08011998 <GUI_ALLOC_UnlockH>:
 8011998:	6803      	ldr	r3, [r0, #0]
 801199a:	4a0b      	ldr	r2, [pc, #44]	; (80119c8 <GUI_ALLOC_UnlockH+0x30>)
 801199c:	b430      	push	{r4, r5}
 801199e:	4604      	mov	r4, r0
 80119a0:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80119a4:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80119a6:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 80119aa:	2b01      	cmp	r3, #1
 80119ac:	d903      	bls.n	80119b6 <GUI_ALLOC_UnlockH+0x1e>
 80119ae:	69d1      	ldr	r1, [r2, #28]
 80119b0:	b109      	cbz	r1, 80119b6 <GUI_ALLOC_UnlockH+0x1e>
 80119b2:	3901      	subs	r1, #1
 80119b4:	61d1      	str	r1, [r2, #28]
 80119b6:	2200      	movs	r2, #0
 80119b8:	3b01      	subs	r3, #1
 80119ba:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 80119be:	4610      	mov	r0, r2
 80119c0:	6022      	str	r2, [r4, #0]
 80119c2:	bc30      	pop	{r4, r5}
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	2002aec0 	.word	0x2002aec0

080119cc <GUI_ALLOC_GetMaxSize>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	4c4a      	ldr	r4, [pc, #296]	; (8011af8 <GUI_ALLOC_GetMaxSize+0x12c>)
 80119d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d03d      	beq.n	8011a54 <GUI_ALLOC_GetMaxSize+0x88>
 80119d8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80119dc:	4a46      	ldr	r2, [pc, #280]	; (8011af8 <GUI_ALLOC_GetMaxSize+0x12c>)
 80119de:	bb3b      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119e0:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 80119e4:	bb23      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119e6:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80119ea:	bb0b      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119ec:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80119f0:	b9f3      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119f2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80119f6:	b9db      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119f8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80119fc:	b9c3      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 80119fe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8011a02:	b9ab      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a04:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8011a08:	b993      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a0a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8011a0c:	b983      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a0e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8011a10:	b973      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011a14:	b963      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a16:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011a18:	b953      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a1a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8011a1c:	b943      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8011a20:	b933      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a22:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011a24:	b923      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a26:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011a28:	b913      	cbnz	r3, 8011a30 <GUI_ALLOC_GetMaxSize+0x64>
 8011a2a:	f06f 000b 	mvn.w	r0, #11
 8011a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0f9      	beq.n	8011a2a <GUI_ALLOC_GetMaxSize+0x5e>
 8011a36:	2200      	movs	r2, #0
 8011a38:	e001      	b.n	8011a3e <GUI_ALLOC_GetMaxSize+0x72>
 8011a3a:	689b      	ldr	r3, [r3, #8]
 8011a3c:	b143      	cbz	r3, 8011a50 <GUI_ALLOC_GetMaxSize+0x84>
 8011a3e:	6859      	ldr	r1, [r3, #4]
 8011a40:	4610      	mov	r0, r2
 8011a42:	4291      	cmp	r1, r2
 8011a44:	d901      	bls.n	8011a4a <GUI_ALLOC_GetMaxSize+0x7e>
 8011a46:	460a      	mov	r2, r1
 8011a48:	4608      	mov	r0, r1
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1f4      	bne.n	8011a3a <GUI_ALLOC_GetMaxSize+0x6e>
 8011a50:	380c      	subs	r0, #12
 8011a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a54:	4b29      	ldr	r3, [pc, #164]	; (8011afc <GUI_ALLOC_GetMaxSize+0x130>)
 8011a56:	2101      	movs	r1, #1
 8011a58:	689a      	ldr	r2, [r3, #8]
 8011a5a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8011a5e:	6858      	ldr	r0, [r3, #4]
 8011a60:	b90a      	cbnz	r2, 8011a66 <GUI_ALLOC_GetMaxSize+0x9a>
 8011a62:	0882      	lsrs	r2, r0, #2
 8011a64:	609a      	str	r2, [r3, #8]
 8011a66:	265a      	movs	r6, #90	; 0x5a
 8011a68:	2210      	movs	r2, #16
 8011a6a:	2520      	movs	r5, #32
 8011a6c:	2740      	movs	r7, #64	; 0x40
 8011a6e:	6226      	str	r6, [r4, #32]
 8011a70:	2680      	movs	r6, #128	; 0x80
 8011a72:	6422      	str	r2, [r4, #64]	; 0x40
 8011a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a78:	64a5      	str	r5, [r4, #72]	; 0x48
 8011a7a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011a7e:	6819      	ldr	r1, [r3, #0]
 8011a80:	6527      	str	r7, [r4, #80]	; 0x50
 8011a82:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8011a86:	65a6      	str	r6, [r4, #88]	; 0x58
 8011a88:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8011a8c:	6622      	str	r2, [r4, #96]	; 0x60
 8011a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011a92:	66a5      	str	r5, [r4, #104]	; 0x68
 8011a94:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8011a98:	f1a1 0314 	sub.w	r3, r1, #20
 8011a9c:	6727      	str	r7, [r4, #112]	; 0x70
 8011a9e:	67a6      	str	r6, [r4, #120]	; 0x78
 8011aa0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8011aa4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8011aa8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8011aac:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8011ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011ab4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8011ab8:	4403      	add	r3, r0
 8011aba:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8011abe:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8011ac2:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8011ac6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8011aca:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8011ace:	2202      	movs	r2, #2
 8011ad0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8011ad4:	2501      	movs	r5, #1
 8011ad6:	63a1      	str	r1, [r4, #56]	; 0x38
 8011ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8011ada:	6122      	str	r2, [r4, #16]
 8011adc:	60e0      	str	r0, [r4, #12]
 8011ade:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8011ae2:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8011ae6:	605d      	str	r5, [r3, #4]
 8011ae8:	6265      	str	r5, [r4, #36]	; 0x24
 8011aea:	6065      	str	r5, [r4, #4]
 8011aec:	f7ff f952 	bl	8010d94 <_AddFreeMemory>
 8011af0:	f7ff fbd6 	bl	80112a0 <_EnlargeBlocks>
 8011af4:	6325      	str	r5, [r4, #48]	; 0x30
 8011af6:	e76f      	b.n	80119d8 <GUI_ALLOC_GetMaxSize+0xc>
 8011af8:	2002aec0 	.word	0x2002aec0
 8011afc:	200001c8 	.word	0x200001c8

08011b00 <GUI_ALLOC_RequestSize>:
 8011b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b02:	4c58      	ldr	r4, [pc, #352]	; (8011c64 <GUI_ALLOC_RequestSize+0x164>)
 8011b04:	f004 fbae 	bl	8016264 <GUI_Lock>
 8011b08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d057      	beq.n	8011bc0 <GUI_ALLOC_RequestSize+0xc0>
 8011b10:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8011b14:	4a53      	ldr	r2, [pc, #332]	; (8011c64 <GUI_ALLOC_RequestSize+0x164>)
 8011b16:	bb9b      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b18:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8011b1c:	bb83      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b1e:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8011b22:	bb6b      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b24:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8011b28:	bb53      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8011b2e:	bb3b      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b30:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8011b34:	bb23      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8011b3a:	bb0b      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b3c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8011b40:	b9f3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b42:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8011b44:	b9e3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b46:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8011b48:	b9d3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011b4c:	b9c3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011b50:	b9b3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b52:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8011b54:	b9a3      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b56:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8011b58:	b993      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011b5c:	b983      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b5e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011b60:	b973      	cbnz	r3, 8011b80 <GUI_ALLOC_RequestSize+0x80>
 8011b62:	f06f 030b 	mvn.w	r3, #11
 8011b66:	4940      	ldr	r1, [pc, #256]	; (8011c68 <GUI_ALLOC_RequestSize+0x168>)
 8011b68:	17da      	asrs	r2, r3, #31
 8011b6a:	fb81 1303 	smull	r1, r3, r1, r3
 8011b6e:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8011b72:	6a24      	ldr	r4, [r4, #32]
 8011b74:	fb04 f403 	mul.w	r4, r4, r3
 8011b78:	f004 fb6a 	bl	8016250 <GUI_Unlock>
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d0f5      	beq.n	8011b72 <GUI_ALLOC_RequestSize+0x72>
 8011b86:	2200      	movs	r2, #0
 8011b88:	e001      	b.n	8011b8e <GUI_ALLOC_RequestSize+0x8e>
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	b143      	cbz	r3, 8011ba0 <GUI_ALLOC_RequestSize+0xa0>
 8011b8e:	6859      	ldr	r1, [r3, #4]
 8011b90:	4610      	mov	r0, r2
 8011b92:	4291      	cmp	r1, r2
 8011b94:	d901      	bls.n	8011b9a <GUI_ALLOC_RequestSize+0x9a>
 8011b96:	460a      	mov	r2, r1
 8011b98:	4608      	mov	r0, r1
 8011b9a:	689b      	ldr	r3, [r3, #8]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1f4      	bne.n	8011b8a <GUI_ALLOC_RequestSize+0x8a>
 8011ba0:	380c      	subs	r0, #12
 8011ba2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	d8dd      	bhi.n	8011b66 <GUI_ALLOC_RequestSize+0x66>
 8011baa:	6a22      	ldr	r2, [r4, #32]
 8011bac:	4b2e      	ldr	r3, [pc, #184]	; (8011c68 <GUI_ALLOC_RequestSize+0x168>)
 8011bae:	fb02 f000 	mul.w	r0, r2, r0
 8011bb2:	fba3 2300 	umull	r2, r3, r3, r0
 8011bb6:	095c      	lsrs	r4, r3, #5
 8011bb8:	f004 fb4a 	bl	8016250 <GUI_Unlock>
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bc0:	4b2a      	ldr	r3, [pc, #168]	; (8011c6c <GUI_ALLOC_RequestSize+0x16c>)
 8011bc2:	2101      	movs	r1, #1
 8011bc4:	689a      	ldr	r2, [r3, #8]
 8011bc6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8011bca:	6858      	ldr	r0, [r3, #4]
 8011bcc:	b90a      	cbnz	r2, 8011bd2 <GUI_ALLOC_RequestSize+0xd2>
 8011bce:	0882      	lsrs	r2, r0, #2
 8011bd0:	609a      	str	r2, [r3, #8]
 8011bd2:	265a      	movs	r6, #90	; 0x5a
 8011bd4:	2210      	movs	r2, #16
 8011bd6:	2520      	movs	r5, #32
 8011bd8:	2740      	movs	r7, #64	; 0x40
 8011bda:	6226      	str	r6, [r4, #32]
 8011bdc:	2680      	movs	r6, #128	; 0x80
 8011bde:	6422      	str	r2, [r4, #64]	; 0x40
 8011be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011be4:	64a5      	str	r5, [r4, #72]	; 0x48
 8011be6:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011bea:	6819      	ldr	r1, [r3, #0]
 8011bec:	6527      	str	r7, [r4, #80]	; 0x50
 8011bee:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8011bf2:	65a6      	str	r6, [r4, #88]	; 0x58
 8011bf4:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8011bf8:	6622      	str	r2, [r4, #96]	; 0x60
 8011bfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011bfe:	66a5      	str	r5, [r4, #104]	; 0x68
 8011c00:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8011c04:	f1a1 0314 	sub.w	r3, r1, #20
 8011c08:	6727      	str	r7, [r4, #112]	; 0x70
 8011c0a:	67a6      	str	r6, [r4, #120]	; 0x78
 8011c0c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8011c10:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8011c14:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8011c18:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8011c1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011c20:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8011c24:	4403      	add	r3, r0
 8011c26:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8011c2a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8011c2e:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8011c32:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8011c36:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8011c3a:	2202      	movs	r2, #2
 8011c3c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8011c40:	2501      	movs	r5, #1
 8011c42:	63a1      	str	r1, [r4, #56]	; 0x38
 8011c44:	6363      	str	r3, [r4, #52]	; 0x34
 8011c46:	6122      	str	r2, [r4, #16]
 8011c48:	60e0      	str	r0, [r4, #12]
 8011c4a:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8011c4e:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8011c52:	605d      	str	r5, [r3, #4]
 8011c54:	6265      	str	r5, [r4, #36]	; 0x24
 8011c56:	6065      	str	r5, [r4, #4]
 8011c58:	f7ff f89c 	bl	8010d94 <_AddFreeMemory>
 8011c5c:	f7ff fb20 	bl	80112a0 <_EnlargeBlocks>
 8011c60:	6325      	str	r5, [r4, #48]	; 0x30
 8011c62:	e755      	b.n	8011b10 <GUI_ALLOC_RequestSize+0x10>
 8011c64:	2002aec0 	.word	0x2002aec0
 8011c68:	51eb851f 	.word	0x51eb851f
 8011c6c:	200001c8 	.word	0x200001c8

08011c70 <GUI_ALLOC_Lock>:
 8011c70:	4a02      	ldr	r2, [pc, #8]	; (8011c7c <GUI_ALLOC_Lock+0xc>)
 8011c72:	6993      	ldr	r3, [r2, #24]
 8011c74:	3301      	adds	r3, #1
 8011c76:	6193      	str	r3, [r2, #24]
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	2002aec0 	.word	0x2002aec0

08011c80 <GUI_ALLOC_Unlock>:
 8011c80:	4a02      	ldr	r2, [pc, #8]	; (8011c8c <GUI_ALLOC_Unlock+0xc>)
 8011c82:	6993      	ldr	r3, [r2, #24]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	6193      	str	r3, [r2, #24]
 8011c88:	4770      	bx	lr
 8011c8a:	bf00      	nop
 8011c8c:	2002aec0 	.word	0x2002aec0

08011c90 <GUI_ALLOC_AssignMemory>:
 8011c90:	f021 0103 	bic.w	r1, r1, #3
 8011c94:	4b01      	ldr	r3, [pc, #4]	; (8011c9c <GUI_ALLOC_AssignMemory+0xc>)
 8011c96:	e883 0003 	stmia.w	r3, {r0, r1}
 8011c9a:	4770      	bx	lr
 8011c9c:	200001c8 	.word	0x200001c8

08011ca0 <GUI_ALLOC_Free>:
 8011ca0:	b900      	cbnz	r0, 8011ca4 <GUI_ALLOC_Free+0x4>
 8011ca2:	4770      	bx	lr
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	4c0d      	ldr	r4, [pc, #52]	; (8011cdc <GUI_ALLOC_Free+0x3c>)
 8011ca8:	4605      	mov	r5, r0
 8011caa:	f004 fadb 	bl	8016264 <GUI_Lock>
 8011cae:	00ee      	lsls	r6, r5, #3
 8011cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cb2:	4433      	add	r3, r6
 8011cb4:	6859      	ldr	r1, [r3, #4]
 8011cb6:	6848      	ldr	r0, [r1, #4]
 8011cb8:	f7ff f86c 	bl	8010d94 <_AddFreeMemory>
 8011cbc:	6863      	ldr	r3, [r4, #4]
 8011cbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	4416      	add	r6, r2
 8011cc8:	6063      	str	r3, [r4, #4]
 8011cca:	6070      	str	r0, [r6, #4]
 8011ccc:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 8011cd0:	6265      	str	r5, [r4, #36]	; 0x24
 8011cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cd6:	f004 babb 	b.w	8016250 <GUI_Unlock>
 8011cda:	bf00      	nop
 8011cdc:	2002aec0 	.word	0x2002aec0

08011ce0 <GUI_ALLOC_AllocZero>:
 8011ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce2:	4605      	mov	r5, r0
 8011ce4:	f004 fabe 	bl	8016264 <GUI_Lock>
 8011ce8:	b925      	cbnz	r5, 8011cf4 <GUI_ALLOC_AllocZero+0x14>
 8011cea:	2400      	movs	r4, #0
 8011cec:	f004 fab0 	bl	8016250 <GUI_Unlock>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cf4:	f004 fab6 	bl	8016264 <GUI_Lock>
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f7ff fb41 	bl	8011380 <_Alloc>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	f004 faa6 	bl	8016250 <GUI_Unlock>
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	d0f0      	beq.n	8011cea <GUI_ALLOC_AllocZero+0xa>
 8011d08:	4e14      	ldr	r6, [pc, #80]	; (8011d5c <GUI_ALLOC_AllocZero+0x7c>)
 8011d0a:	462a      	mov	r2, r5
 8011d0c:	4f14      	ldr	r7, [pc, #80]	; (8011d60 <GUI_ALLOC_AllocZero+0x80>)
 8011d0e:	2100      	movs	r1, #0
 8011d10:	69f0      	ldr	r0, [r6, #28]
 8011d12:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011d14:	3001      	adds	r0, #1
 8011d16:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011d1a:	61f0      	str	r0, [r6, #28]
 8011d1c:	f813 0034 	ldrb.w	r0, [r3, r4, lsl #3]
 8011d20:	3001      	adds	r0, #1
 8011d22:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 8011d26:	686d      	ldr	r5, [r5, #4]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	f105 0008 	add.w	r0, r5, #8
 8011d2e:	4798      	blx	r3
 8011d30:	6829      	ldr	r1, [r5, #0]
 8011d32:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8011d34:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d901      	bls.n	8011d40 <GUI_ALLOC_AllocZero+0x60>
 8011d3c:	69f0      	ldr	r0, [r6, #28]
 8011d3e:	b930      	cbnz	r0, 8011d4e <GUI_ALLOC_AllocZero+0x6e>
 8011d40:	3b01      	subs	r3, #1
 8011d42:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8011d46:	f004 fa83 	bl	8016250 <GUI_Unlock>
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d4e:	3801      	subs	r0, #1
 8011d50:	3b01      	subs	r3, #1
 8011d52:	61f0      	str	r0, [r6, #28]
 8011d54:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8011d58:	e7f5      	b.n	8011d46 <GUI_ALLOC_AllocZero+0x66>
 8011d5a:	bf00      	nop
 8011d5c:	2002aec0 	.word	0x2002aec0
 8011d60:	20000050 	.word	0x20000050

08011d64 <GUIPROP_DispChar>:
 8011d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d68:	4d3a      	ldr	r5, [pc, #232]	; (8011e54 <GUIPROP_DispChar+0xf0>)
 8011d6a:	b089      	sub	sp, #36	; 0x24
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	69da      	ldr	r2, [r3, #28]
 8011d70:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8011d74:	69d3      	ldr	r3, [r2, #28]
 8011d76:	b143      	cbz	r3, 8011d8a <GUIPROP_DispChar+0x26>
 8011d78:	881a      	ldrh	r2, [r3, #0]
 8011d7a:	4290      	cmp	r0, r2
 8011d7c:	d302      	bcc.n	8011d84 <GUIPROP_DispChar+0x20>
 8011d7e:	8859      	ldrh	r1, [r3, #2]
 8011d80:	4281      	cmp	r1, r0
 8011d82:	d205      	bcs.n	8011d90 <GUIPROP_DispChar+0x2c>
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1f6      	bne.n	8011d78 <GUIPROP_DispChar+0x14>
 8011d8a:	b009      	add	sp, #36	; 0x24
 8011d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d90:	1a84      	subs	r4, r0, r2
 8011d92:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8011d96:	4648      	mov	r0, r9
 8011d98:	eb08 06c4 	add.w	r6, r8, r4, lsl #3
 8011d9c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8011da0:	f005 fb0a 	bl	80173b8 <LCD_SetDrawMode>
 8011da4:	4682      	mov	sl, r0
 8011da6:	6828      	ldr	r0, [r5, #0]
 8011da8:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 8011dac:	f04f 0e01 	mov.w	lr, #1
 8011db0:	69c7      	ldr	r7, [r0, #28]
 8011db2:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 8011db6:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8011dba:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8011dbe:	7e3b      	ldrb	r3, [r7, #24]
 8011dc0:	9007      	str	r0, [sp, #28]
 8011dc2:	f8cd c014 	str.w	ip, [sp, #20]
 8011dc6:	6870      	ldr	r0, [r6, #4]
 8011dc8:	f8cd b00c 	str.w	fp, [sp, #12]
 8011dcc:	9004      	str	r0, [sp, #16]
 8011dce:	f8cd e008 	str.w	lr, [sp, #8]
 8011dd2:	f897 e01b 	ldrb.w	lr, [r7, #27]
 8011dd6:	9807      	ldr	r0, [sp, #28]
 8011dd8:	f8cd e004 	str.w	lr, [sp, #4]
 8011ddc:	7ebf      	ldrb	r7, [r7, #26]
 8011dde:	9700      	str	r7, [sp, #0]
 8011de0:	f005 fcb0 	bl	8017744 <LCD_DrawBitmap>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	69da      	ldr	r2, [r3, #28]
 8011de8:	7e53      	ldrb	r3, [r2, #25]
 8011dea:	7e17      	ldrb	r7, [r2, #24]
 8011dec:	42bb      	cmp	r3, r7
 8011dee:	d923      	bls.n	8011e38 <GUIPROP_DispChar+0xd4>
 8011df0:	f1b9 0f02 	cmp.w	r9, #2
 8011df4:	9307      	str	r3, [sp, #28]
 8011df6:	d01f      	beq.n	8011e38 <GUIPROP_DispChar+0xd4>
 8011df8:	f892 b01b 	ldrb.w	fp, [r2, #27]
 8011dfc:	f000 fa44 	bl	8012288 <GUI_GetColor>
 8011e00:	4681      	mov	r9, r0
 8011e02:	f000 fa35 	bl	8012270 <GUI_GetBkColor>
 8011e06:	f000 fbbf 	bl	8012588 <GUI_SetColor>
 8011e0a:	4b12      	ldr	r3, [pc, #72]	; (8011e54 <GUIPROP_DispChar+0xf0>)
 8011e0c:	f818 e034 	ldrb.w	lr, [r8, r4, lsl #3]
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	9b07      	ldr	r3, [sp, #28]
 8011e14:	69c1      	ldr	r1, [r0, #28]
 8011e16:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	; 0x22
 8011e1a:	7eca      	ldrb	r2, [r1, #27]
 8011e1c:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8011e20:	4620      	mov	r0, r4
 8011e22:	fb0e 4202 	mla	r2, lr, r2, r4
 8011e26:	fb0b 1303 	mla	r3, fp, r3, r1
 8011e2a:	fb0b 1107 	mla	r1, fp, r7, r1
 8011e2e:	f005 fb4b 	bl	80174c8 <LCD_FillRect>
 8011e32:	4648      	mov	r0, r9
 8011e34:	f000 fba8 	bl	8012588 <GUI_SetColor>
 8011e38:	4650      	mov	r0, sl
 8011e3a:	f005 fabd 	bl	80173b8 <LCD_SetDrawMode>
 8011e3e:	682b      	ldr	r3, [r5, #0]
 8011e40:	7871      	ldrb	r1, [r6, #1]
 8011e42:	69d8      	ldr	r0, [r3, #28]
 8011e44:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8011e46:	7e80      	ldrb	r0, [r0, #26]
 8011e48:	fb00 2201 	mla	r2, r0, r1, r2
 8011e4c:	845a      	strh	r2, [r3, #34]	; 0x22
 8011e4e:	b009      	add	sp, #36	; 0x24
 8011e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e54:	20000018 	.word	0x20000018

08011e58 <GUIPROP_GetCharDistX>:
 8011e58:	4b11      	ldr	r3, [pc, #68]	; (8011ea0 <GUIPROP_GetCharDistX+0x48>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	b470      	push	{r4, r5, r6}
 8011e5e:	69dd      	ldr	r5, [r3, #28]
 8011e60:	69eb      	ldr	r3, [r5, #28]
 8011e62:	b143      	cbz	r3, 8011e76 <GUIPROP_GetCharDistX+0x1e>
 8011e64:	881a      	ldrh	r2, [r3, #0]
 8011e66:	4290      	cmp	r0, r2
 8011e68:	d302      	bcc.n	8011e70 <GUIPROP_GetCharDistX+0x18>
 8011e6a:	885c      	ldrh	r4, [r3, #2]
 8011e6c:	4284      	cmp	r4, r0
 8011e6e:	d205      	bcs.n	8011e7c <GUIPROP_GetCharDistX+0x24>
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d1f6      	bne.n	8011e64 <GUIPROP_GetCharDistX+0xc>
 8011e76:	4618      	mov	r0, r3
 8011e78:	bc70      	pop	{r4, r5, r6}
 8011e7a:	4770      	bx	lr
 8011e7c:	1a82      	subs	r2, r0, r2
 8011e7e:	685e      	ldr	r6, [r3, #4]
 8011e80:	7eac      	ldrb	r4, [r5, #26]
 8011e82:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8011e86:	785b      	ldrb	r3, [r3, #1]
 8011e88:	fb13 f004 	smulbb	r0, r3, r4
 8011e8c:	2900      	cmp	r1, #0
 8011e8e:	d0f3      	beq.n	8011e78 <GUIPROP_GetCharDistX+0x20>
 8011e90:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 8011e94:	fb14 f303 	smulbb	r3, r4, r3
 8011e98:	bc70      	pop	{r4, r5, r6}
 8011e9a:	600b      	str	r3, [r1, #0]
 8011e9c:	4770      	bx	lr
 8011e9e:	bf00      	nop
 8011ea0:	20000018 	.word	0x20000018

08011ea4 <GUIPROP_GetFontInfo>:
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	800b      	strh	r3, [r1, #0]
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop

08011eac <GUIPROP_IsInFont>:
 8011eac:	69c0      	ldr	r0, [r0, #28]
 8011eae:	b150      	cbz	r0, 8011ec6 <GUIPROP_IsInFont+0x1a>
 8011eb0:	8803      	ldrh	r3, [r0, #0]
 8011eb2:	428b      	cmp	r3, r1
 8011eb4:	d802      	bhi.n	8011ebc <GUIPROP_IsInFont+0x10>
 8011eb6:	8843      	ldrh	r3, [r0, #2]
 8011eb8:	428b      	cmp	r3, r1
 8011eba:	d203      	bcs.n	8011ec4 <GUIPROP_IsInFont+0x18>
 8011ebc:	6880      	ldr	r0, [r0, #8]
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	d1f6      	bne.n	8011eb0 <GUIPROP_IsInFont+0x4>
 8011ec2:	4770      	bx	lr
 8011ec4:	2001      	movs	r0, #1
 8011ec6:	4770      	bx	lr

08011ec8 <GL_DrawCircle>:
 8011ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	f240 23c3 	movw	r3, #707	; 0x2c3
 8011ed0:	4692      	mov	sl, r2
 8011ed2:	b089      	sub	sp, #36	; 0x24
 8011ed4:	4a6d      	ldr	r2, [pc, #436]	; (801208c <GL_DrawCircle+0x1c4>)
 8011ed6:	fb03 f30a 	mul.w	r3, r3, sl
 8011eda:	4680      	mov	r8, r0
 8011edc:	9104      	str	r1, [sp, #16]
 8011ede:	f1ba 0f00 	cmp.w	sl, #0
 8011ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8011ee6:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8011eea:	bfb4      	ite	lt
 8011eec:	f10a 0001 	addlt.w	r0, sl, #1
 8011ef0:	4650      	movge	r0, sl
 8011ef2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011ef6:	fb0a f60a 	mul.w	r6, sl, sl
 8011efa:	4d65      	ldr	r5, [pc, #404]	; (8012090 <GL_DrawCircle+0x1c8>)
 8011efc:	3301      	adds	r3, #1
 8011efe:	9c04      	ldr	r4, [sp, #16]
 8011f00:	9305      	str	r3, [sp, #20]
 8011f02:	eb0a 0308 	add.w	r3, sl, r8
 8011f06:	4621      	mov	r1, r4
 8011f08:	eb0a 0b04 	add.w	fp, sl, r4
 8011f0c:	461f      	mov	r7, r3
 8011f0e:	eb06 0360 	add.w	r3, r6, r0, asr #1
 8011f12:	9306      	str	r3, [sp, #24]
 8011f14:	4638      	mov	r0, r7
 8011f16:	682b      	ldr	r3, [r5, #0]
 8011f18:	46b9      	mov	r9, r7
 8011f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	4798      	blx	r3
 8011f20:	682b      	ldr	r3, [r5, #0]
 8011f22:	4621      	mov	r1, r4
 8011f24:	ebca 0008 	rsb	r0, sl, r8
 8011f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	4798      	blx	r3
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	4659      	mov	r1, fp
 8011f32:	4640      	mov	r0, r8
 8011f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4798      	blx	r3
 8011f3a:	682b      	ldr	r3, [r5, #0]
 8011f3c:	ebca 0104 	rsb	r1, sl, r4
 8011f40:	4640      	mov	r0, r8
 8011f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	4798      	blx	r3
 8011f48:	9b05      	ldr	r3, [sp, #20]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f340 809b 	ble.w	8012086 <GL_DrawCircle+0x1be>
 8011f50:	4633      	mov	r3, r6
 8011f52:	2401      	movs	r4, #1
 8011f54:	4656      	mov	r6, sl
 8011f56:	462f      	mov	r7, r5
 8011f58:	46c2      	mov	sl, r8
 8011f5a:	46c8      	mov	r8, r9
 8011f5c:	e046      	b.n	8011fec <GL_DrawCircle+0x124>
 8011f5e:	ebc4 030a 	rsb	r3, r4, sl
 8011f62:	eb04 090a 	add.w	r9, r4, sl
 8011f66:	9301      	str	r3, [sp, #4]
 8011f68:	9b04      	ldr	r3, [sp, #16]
 8011f6a:	191a      	adds	r2, r3, r4
 8011f6c:	1b1b      	subs	r3, r3, r4
 8011f6e:	9202      	str	r2, [sp, #8]
 8011f70:	9303      	str	r3, [sp, #12]
 8011f72:	682b      	ldr	r3, [r5, #0]
 8011f74:	4659      	mov	r1, fp
 8011f76:	4648      	mov	r0, r9
 8011f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	4798      	blx	r3
 8011f7e:	682b      	ldr	r3, [r5, #0]
 8011f80:	4659      	mov	r1, fp
 8011f82:	9801      	ldr	r0, [sp, #4]
 8011f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	4798      	blx	r3
 8011f8a:	682b      	ldr	r3, [r5, #0]
 8011f8c:	9902      	ldr	r1, [sp, #8]
 8011f8e:	4640      	mov	r0, r8
 8011f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	4798      	blx	r3
 8011f96:	682b      	ldr	r3, [r5, #0]
 8011f98:	9903      	ldr	r1, [sp, #12]
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	4798      	blx	r3
 8011fa2:	b1ee      	cbz	r6, 8011fe0 <GL_DrawCircle+0x118>
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	4648      	mov	r0, r9
 8011fa8:	9a04      	ldr	r2, [sp, #16]
 8011faa:	ebc6 090a 	rsb	r9, r6, sl
 8011fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fb0:	1b92      	subs	r2, r2, r6
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	9207      	str	r2, [sp, #28]
 8011fb8:	4798      	blx	r3
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	9a07      	ldr	r2, [sp, #28]
 8011fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fc0:	4611      	mov	r1, r2
 8011fc2:	9801      	ldr	r0, [sp, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	4798      	blx	r3
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	9902      	ldr	r1, [sp, #8]
 8011fcc:	4648      	mov	r0, r9
 8011fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	4798      	blx	r3
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	4648      	mov	r0, r9
 8011fd8:	9903      	ldr	r1, [sp, #12]
 8011fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	4798      	blx	r3
 8011fe0:	3401      	adds	r4, #1
 8011fe2:	9b05      	ldr	r3, [sp, #20]
 8011fe4:	42a3      	cmp	r3, r4
 8011fe6:	db4e      	blt.n	8012086 <GL_DrawCircle+0x1be>
 8011fe8:	fb06 f306 	mul.w	r3, r6, r6
 8011fec:	fb04 3304 	mla	r3, r4, r4, r3
 8011ff0:	9a06      	ldr	r2, [sp, #24]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	dab3      	bge.n	8011f5e <GL_DrawCircle+0x96>
 8011ff6:	ebc4 020a 	rsb	r2, r4, sl
 8011ffa:	682b      	ldr	r3, [r5, #0]
 8011ffc:	eb04 090a 	add.w	r9, r4, sl
 8012000:	4659      	mov	r1, fp
 8012002:	9201      	str	r2, [sp, #4]
 8012004:	9a04      	ldr	r2, [sp, #16]
 8012006:	4648      	mov	r0, r9
 8012008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801200a:	18a2      	adds	r2, r4, r2
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	9202      	str	r2, [sp, #8]
 8012010:	4798      	blx	r3
 8012012:	682b      	ldr	r3, [r5, #0]
 8012014:	4659      	mov	r1, fp
 8012016:	9a04      	ldr	r2, [sp, #16]
 8012018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801201a:	1b12      	subs	r2, r2, r4
 801201c:	9801      	ldr	r0, [sp, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	9203      	str	r2, [sp, #12]
 8012022:	4798      	blx	r3
 8012024:	682b      	ldr	r3, [r5, #0]
 8012026:	4640      	mov	r0, r8
 8012028:	9902      	ldr	r1, [sp, #8]
 801202a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	4798      	blx	r3
 8012030:	682b      	ldr	r3, [r5, #0]
 8012032:	4640      	mov	r0, r8
 8012034:	9903      	ldr	r1, [sp, #12]
 8012036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	4798      	blx	r3
 801203c:	b1e6      	cbz	r6, 8012078 <GL_DrawCircle+0x1b0>
 801203e:	9a04      	ldr	r2, [sp, #16]
 8012040:	4648      	mov	r0, r9
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	ebc6 0b0a 	rsb	fp, r6, sl
 8012048:	ebc6 0802 	rsb	r8, r6, r2
 801204c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801204e:	4641      	mov	r1, r8
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	4798      	blx	r3
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	4641      	mov	r1, r8
 8012058:	9801      	ldr	r0, [sp, #4]
 801205a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	4798      	blx	r3
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	4658      	mov	r0, fp
 8012064:	9902      	ldr	r1, [sp, #8]
 8012066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	4798      	blx	r3
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	4658      	mov	r0, fp
 8012070:	9903      	ldr	r1, [sp, #12]
 8012072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	4798      	blx	r3
 8012078:	3e01      	subs	r6, #1
 801207a:	9b04      	ldr	r3, [sp, #16]
 801207c:	eb06 080a 	add.w	r8, r6, sl
 8012080:	eb06 0b03 	add.w	fp, r6, r3
 8012084:	e775      	b.n	8011f72 <GL_DrawCircle+0xaa>
 8012086:	b009      	add	sp, #36	; 0x24
 8012088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208c:	10624dd3 	.word	0x10624dd3
 8012090:	20000018 	.word	0x20000018

08012094 <GUI_DrawCircle>:
 8012094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012096:	b083      	sub	sp, #12
 8012098:	4605      	mov	r5, r0
 801209a:	460c      	mov	r4, r1
 801209c:	4616      	mov	r6, r2
 801209e:	f004 f8e1 	bl	8016264 <GUI_Lock>
 80120a2:	4b13      	ldr	r3, [pc, #76]	; (80120f0 <GUI_DrawCircle+0x5c>)
 80120a4:	b2b7      	uxth	r7, r6
 80120a6:	4668      	mov	r0, sp
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120ae:	4415      	add	r5, r2
 80120b0:	441c      	add	r4, r3
 80120b2:	b2aa      	uxth	r2, r5
 80120b4:	b2a3      	uxth	r3, r4
 80120b6:	ebc7 0e02 	rsb	lr, r7, r2
 80120ba:	443a      	add	r2, r7
 80120bc:	1bd9      	subs	r1, r3, r7
 80120be:	443b      	add	r3, r7
 80120c0:	f8ad e000 	strh.w	lr, [sp]
 80120c4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80120c8:	f8ad 1002 	strh.w	r1, [sp, #2]
 80120cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120d0:	f00b fa3a 	bl	801d548 <WM__InitIVRSearch>
 80120d4:	b140      	cbz	r0, 80120e8 <GUI_DrawCircle+0x54>
 80120d6:	4632      	mov	r2, r6
 80120d8:	4621      	mov	r1, r4
 80120da:	4628      	mov	r0, r5
 80120dc:	f7ff fef4 	bl	8011ec8 <GL_DrawCircle>
 80120e0:	f00b f908 	bl	801d2f4 <WM__GetNextIVR>
 80120e4:	2800      	cmp	r0, #0
 80120e6:	d1f6      	bne.n	80120d6 <GUI_DrawCircle+0x42>
 80120e8:	f004 f8b2 	bl	8016250 <GUI_Unlock>
 80120ec:	b003      	add	sp, #12
 80120ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f0:	20000018 	.word	0x20000018

080120f4 <GL_FillCircle>:
 80120f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	f240 23c3 	movw	r3, #707	; 0x2c3
 80120fc:	4615      	mov	r5, r2
 80120fe:	4a34      	ldr	r2, [pc, #208]	; (80121d0 <GL_FillCircle+0xdc>)
 8012100:	b085      	sub	sp, #20
 8012102:	fb03 f305 	mul.w	r3, r3, r5
 8012106:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80121d4 <GL_FillCircle+0xe0>
 801210a:	9001      	str	r0, [sp, #4]
 801210c:	2d00      	cmp	r5, #0
 801210e:	fb82 2803 	smull	r2, r8, r2, r3
 8012112:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8012116:	bfb4      	ite	lt
 8012118:	1c6c      	addlt	r4, r5, #1
 801211a:	462c      	movge	r4, r5
 801211c:	ebc3 18a8 	rsb	r8, r3, r8, asr #6
 8012120:	9b01      	ldr	r3, [sp, #4]
 8012122:	fb05 fb05 	mul.w	fp, r5, r5
 8012126:	4689      	mov	r9, r1
 8012128:	18ee      	adds	r6, r5, r3
 801212a:	1b5f      	subs	r7, r3, r5
 801212c:	f8da 3000 	ldr.w	r3, [sl]
 8012130:	f108 0801 	add.w	r8, r8, #1
 8012134:	eb0b 0464 	add.w	r4, fp, r4, asr #1
 8012138:	4632      	mov	r2, r6
 801213a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801213c:	4638      	mov	r0, r7
 801213e:	9400      	str	r4, [sp, #0]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4798      	blx	r3
 8012144:	f1b8 0f00 	cmp.w	r8, #0
 8012148:	dd3f      	ble.n	80121ca <GL_FillCircle+0xd6>
 801214a:	9b01      	ldr	r3, [sp, #4]
 801214c:	2401      	movs	r4, #1
 801214e:	191a      	adds	r2, r3, r4
 8012150:	3b01      	subs	r3, #1
 8012152:	9202      	str	r2, [sp, #8]
 8012154:	9303      	str	r3, [sp, #12]
 8012156:	e01a      	b.n	801218e <GL_FillCircle+0x9a>
 8012158:	3d01      	subs	r5, #1
 801215a:	9b01      	ldr	r3, [sp, #4]
 801215c:	18ee      	adds	r6, r5, r3
 801215e:	1b5f      	subs	r7, r3, r5
 8012160:	f8da 3000 	ldr.w	r3, [sl]
 8012164:	eb09 0104 	add.w	r1, r9, r4
 8012168:	4632      	mov	r2, r6
 801216a:	4638      	mov	r0, r7
 801216c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801216e:	fb05 fb05 	mul.w	fp, r5, r5
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4798      	blx	r3
 8012176:	f8da 3000 	ldr.w	r3, [sl]
 801217a:	ebc4 0109 	rsb	r1, r4, r9
 801217e:	3401      	adds	r4, #1
 8012180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012182:	4632      	mov	r2, r6
 8012184:	4638      	mov	r0, r7
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4798      	blx	r3
 801218a:	45a0      	cmp	r8, r4
 801218c:	db1d      	blt.n	80121ca <GL_FillCircle+0xd6>
 801218e:	fb04 bb04 	mla	fp, r4, r4, fp
 8012192:	9b00      	ldr	r3, [sp, #0]
 8012194:	455b      	cmp	r3, fp
 8012196:	dae3      	bge.n	8012160 <GL_FillCircle+0x6c>
 8012198:	45a8      	cmp	r8, r5
 801219a:	dadd      	bge.n	8012158 <GL_FillCircle+0x64>
 801219c:	9a02      	ldr	r2, [sp, #8]
 801219e:	eb09 0105 	add.w	r1, r9, r5
 80121a2:	f8da 3000 	ldr.w	r3, [sl]
 80121a6:	1b16      	subs	r6, r2, r4
 80121a8:	9a03      	ldr	r2, [sp, #12]
 80121aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121ac:	1917      	adds	r7, r2, r4
 80121ae:	4630      	mov	r0, r6
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	463a      	mov	r2, r7
 80121b4:	4798      	blx	r3
 80121b6:	f8da 3000 	ldr.w	r3, [sl]
 80121ba:	463a      	mov	r2, r7
 80121bc:	4630      	mov	r0, r6
 80121be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121c0:	ebc5 0109 	rsb	r1, r5, r9
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4798      	blx	r3
 80121c8:	e7c6      	b.n	8012158 <GL_FillCircle+0x64>
 80121ca:	b005      	add	sp, #20
 80121cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d0:	10624dd3 	.word	0x10624dd3
 80121d4:	20000018 	.word	0x20000018

080121d8 <GUI_FillCircle>:
 80121d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121dc:	4604      	mov	r4, r0
 80121de:	460d      	mov	r5, r1
 80121e0:	4616      	mov	r6, r2
 80121e2:	f004 f83f 	bl	8016264 <GUI_Lock>
 80121e6:	4b0c      	ldr	r3, [pc, #48]	; (8012218 <GUI_FillCircle+0x40>)
 80121e8:	2000      	movs	r0, #0
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80121ee:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 80121f2:	f00b f9a9 	bl	801d548 <WM__InitIVRSearch>
 80121f6:	b150      	cbz	r0, 801220e <GUI_FillCircle+0x36>
 80121f8:	4445      	add	r5, r8
 80121fa:	443c      	add	r4, r7
 80121fc:	4632      	mov	r2, r6
 80121fe:	4629      	mov	r1, r5
 8012200:	4620      	mov	r0, r4
 8012202:	f7ff ff77 	bl	80120f4 <GL_FillCircle>
 8012206:	f00b f875 	bl	801d2f4 <WM__GetNextIVR>
 801220a:	2800      	cmp	r0, #0
 801220c:	d1f6      	bne.n	80121fc <GUI_FillCircle+0x24>
 801220e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012212:	f004 b81d 	b.w	8016250 <GUI_Unlock>
 8012216:	bf00      	nop
 8012218:	20000018 	.word	0x20000018

0801221c <GUI_CalcColorDist>:
 801221c:	b2c3      	uxtb	r3, r0
 801221e:	b2ca      	uxtb	r2, r1
 8012220:	1a9a      	subs	r2, r3, r2
 8012222:	b292      	uxth	r2, r2
 8012224:	b410      	push	{r4}
 8012226:	b214      	sxth	r4, r2
 8012228:	2c00      	cmp	r4, #0
 801222a:	db1e      	blt.n	801226a <GUI_CalcColorDist+0x4e>
 801222c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012230:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012234:	1a9b      	subs	r3, r3, r2
 8012236:	b29b      	uxth	r3, r3
 8012238:	b21a      	sxth	r2, r3
 801223a:	2a00      	cmp	r2, #0
 801223c:	db12      	blt.n	8012264 <GUI_CalcColorDist+0x48>
 801223e:	0c09      	lsrs	r1, r1, #16
 8012240:	fb02 f202 	mul.w	r2, r2, r2
 8012244:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8012248:	fb04 2004 	mla	r0, r4, r4, r2
 801224c:	b289      	uxth	r1, r1
 801224e:	b20c      	sxth	r4, r1
 8012250:	2c00      	cmp	r4, #0
 8012252:	da01      	bge.n	8012258 <GUI_CalcColorDist+0x3c>
 8012254:	4249      	negs	r1, r1
 8012256:	b20c      	sxth	r4, r1
 8012258:	b2a1      	uxth	r1, r4
 801225a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801225e:	fb01 0001 	mla	r0, r1, r1, r0
 8012262:	4770      	bx	lr
 8012264:	425b      	negs	r3, r3
 8012266:	b21a      	sxth	r2, r3
 8012268:	e7e9      	b.n	801223e <GUI_CalcColorDist+0x22>
 801226a:	4252      	negs	r2, r2
 801226c:	b214      	sxth	r4, r2
 801226e:	e7dd      	b.n	801222c <GUI_CalcColorDist+0x10>

08012270 <GUI_GetBkColor>:
 8012270:	b510      	push	{r4, lr}
 8012272:	f003 fff7 	bl	8016264 <GUI_Lock>
 8012276:	f005 fde1 	bl	8017e3c <LCD_GetBkColorIndex>
 801227a:	f005 fc8d 	bl	8017b98 <LCD_Index2Color>
 801227e:	4604      	mov	r4, r0
 8012280:	f003 ffe6 	bl	8016250 <GUI_Unlock>
 8012284:	4620      	mov	r0, r4
 8012286:	bd10      	pop	{r4, pc}

08012288 <GUI_GetColor>:
 8012288:	b510      	push	{r4, lr}
 801228a:	f003 ffeb 	bl	8016264 <GUI_Lock>
 801228e:	f005 fddd 	bl	8017e4c <LCD_GetColorIndex>
 8012292:	f005 fc81 	bl	8017b98 <LCD_Index2Color>
 8012296:	4604      	mov	r4, r0
 8012298:	f003 ffda 	bl	8016250 <GUI_Unlock>
 801229c:	4620      	mov	r0, r4
 801229e:	bd10      	pop	{r4, pc}

080122a0 <GUI_GetDrawMode>:
 80122a0:	b510      	push	{r4, lr}
 80122a2:	f003 ffdf 	bl	8016264 <GUI_Lock>
 80122a6:	4b03      	ldr	r3, [pc, #12]	; (80122b4 <GUI_GetDrawMode+0x14>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	7c1c      	ldrb	r4, [r3, #16]
 80122ac:	f003 ffd0 	bl	8016250 <GUI_Unlock>
 80122b0:	4620      	mov	r0, r4
 80122b2:	bd10      	pop	{r4, pc}
 80122b4:	20000018 	.word	0x20000018

080122b8 <GUI_GetOrg>:
 80122b8:	b538      	push	{r3, r4, r5, lr}
 80122ba:	4605      	mov	r5, r0
 80122bc:	460c      	mov	r4, r1
 80122be:	f003 ffd1 	bl	8016264 <GUI_Lock>
 80122c2:	4a06      	ldr	r2, [pc, #24]	; (80122dc <GUI_GetOrg+0x24>)
 80122c4:	4b06      	ldr	r3, [pc, #24]	; (80122e0 <GUI_GetOrg+0x28>)
 80122c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80122ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122ce:	602a      	str	r2, [r5, #0]
 80122d0:	6023      	str	r3, [r4, #0]
 80122d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122d6:	f003 bfbb 	b.w	8016250 <GUI_Unlock>
 80122da:	bf00      	nop
 80122dc:	2002afa8 	.word	0x2002afa8
 80122e0:	2002af98 	.word	0x2002af98

080122e4 <GUI_GetVersionString>:
 80122e4:	4b04      	ldr	r3, [pc, #16]	; (80122f8 <GUI_GetVersionString+0x14>)
 80122e6:	2234      	movs	r2, #52	; 0x34
 80122e8:	2035      	movs	r0, #53	; 0x35
 80122ea:	2161      	movs	r1, #97	; 0x61
 80122ec:	709a      	strb	r2, [r3, #2]
 80122ee:	7018      	strb	r0, [r3, #0]
 80122f0:	4618      	mov	r0, r3
 80122f2:	7119      	strb	r1, [r3, #4]
 80122f4:	70da      	strb	r2, [r3, #3]
 80122f6:	4770      	bx	lr
 80122f8:	20000000 	.word	0x20000000

080122fc <GUI_MergeRect>:
 80122fc:	b358      	cbz	r0, 8012356 <GUI_MergeRect+0x5a>
 80122fe:	b311      	cbz	r1, 8012346 <GUI_MergeRect+0x4a>
 8012300:	b30a      	cbz	r2, 8012346 <GUI_MergeRect+0x4a>
 8012302:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012308:	f9b2 5000 	ldrsh.w	r5, [r2]
 801230c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012310:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012314:	429d      	cmp	r5, r3
 8012316:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801231a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801231e:	bfa8      	it	ge
 8012320:	461d      	movge	r5, r3
 8012322:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8012326:	4574      	cmp	r4, lr
 8012328:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801232c:	bfa8      	it	ge
 801232e:	4674      	movge	r4, lr
 8012330:	42ba      	cmp	r2, r7
 8012332:	8005      	strh	r5, [r0, #0]
 8012334:	bfb8      	it	lt
 8012336:	463a      	movlt	r2, r7
 8012338:	42b3      	cmp	r3, r6
 801233a:	8044      	strh	r4, [r0, #2]
 801233c:	bfb8      	it	lt
 801233e:	4633      	movlt	r3, r6
 8012340:	8082      	strh	r2, [r0, #4]
 8012342:	80c3      	strh	r3, [r0, #6]
 8012344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012346:	2900      	cmp	r1, #0
 8012348:	bf08      	it	eq
 801234a:	4611      	moveq	r1, r2
 801234c:	680a      	ldr	r2, [r1, #0]
 801234e:	684b      	ldr	r3, [r1, #4]
 8012350:	6002      	str	r2, [r0, #0]
 8012352:	6043      	str	r3, [r0, #4]
 8012354:	4770      	bx	lr
 8012356:	4770      	bx	lr

08012358 <GUI_MoveRect>:
 8012358:	b178      	cbz	r0, 801237a <GUI_MoveRect+0x22>
 801235a:	b289      	uxth	r1, r1
 801235c:	88c3      	ldrh	r3, [r0, #6]
 801235e:	b292      	uxth	r2, r2
 8012360:	b470      	push	{r4, r5, r6}
 8012362:	8806      	ldrh	r6, [r0, #0]
 8012364:	8844      	ldrh	r4, [r0, #2]
 8012366:	8885      	ldrh	r5, [r0, #4]
 8012368:	440e      	add	r6, r1
 801236a:	4414      	add	r4, r2
 801236c:	441a      	add	r2, r3
 801236e:	4429      	add	r1, r5
 8012370:	8006      	strh	r6, [r0, #0]
 8012372:	8044      	strh	r4, [r0, #2]
 8012374:	8081      	strh	r1, [r0, #4]
 8012376:	80c2      	strh	r2, [r0, #6]
 8012378:	bc70      	pop	{r4, r5, r6}
 801237a:	4770      	bx	lr

0801237c <GUI_Exec>:
 801237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012380:	2500      	movs	r5, #0
 8012382:	4f12      	ldr	r7, [pc, #72]	; (80123cc <GUI_Exec+0x50>)
 8012384:	4e12      	ldr	r6, [pc, #72]	; (80123d0 <GUI_Exec+0x54>)
 8012386:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80123d4 <GUI_Exec+0x58>
 801238a:	683c      	ldr	r4, [r7, #0]
 801238c:	b11c      	cbz	r4, 8012396 <GUI_Exec+0x1a>
 801238e:	47a0      	blx	r4
 8012390:	1c04      	adds	r4, r0, #0
 8012392:	bf18      	it	ne
 8012394:	2401      	movne	r4, #1
 8012396:	f00b f9ff 	bl	801d798 <WM_Exec>
 801239a:	6833      	ldr	r3, [r6, #0]
 801239c:	2800      	cmp	r0, #0
 801239e:	bf18      	it	ne
 80123a0:	2401      	movne	r4, #1
 80123a2:	b14b      	cbz	r3, 80123b8 <GUI_Exec+0x3c>
 80123a4:	4798      	blx	r3
 80123a6:	b138      	cbz	r0, 80123b8 <GUI_Exec+0x3c>
 80123a8:	f8d8 3000 	ldr.w	r3, [r8]
 80123ac:	b113      	cbz	r3, 80123b4 <GUI_Exec+0x38>
 80123ae:	2401      	movs	r4, #1
 80123b0:	4798      	blx	r3
 80123b2:	b13c      	cbz	r4, 80123c4 <GUI_Exec+0x48>
 80123b4:	2501      	movs	r5, #1
 80123b6:	e7e8      	b.n	801238a <GUI_Exec+0xe>
 80123b8:	f8d8 3000 	ldr.w	r3, [r8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1f7      	bne.n	80123b0 <GUI_Exec+0x34>
 80123c0:	2c00      	cmp	r4, #0
 80123c2:	d1f7      	bne.n	80123b4 <GUI_Exec+0x38>
 80123c4:	4628      	mov	r0, r5
 80123c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ca:	bf00      	nop
 80123cc:	2002afa4 	.word	0x2002afa4
 80123d0:	2002afcc 	.word	0x2002afcc
 80123d4:	2002afc4 	.word	0x2002afc4

080123d8 <GUI_GetBitmapPixelIndex>:
 80123d8:	2800      	cmp	r0, #0
 80123da:	d050      	beq.n	801247e <GUI_GetBitmapPixelIndex+0xa6>
 80123dc:	88c3      	ldrh	r3, [r0, #6]
 80123de:	3b01      	subs	r3, #1
 80123e0:	b510      	push	{r4, lr}
 80123e2:	8884      	ldrh	r4, [r0, #4]
 80123e4:	6880      	ldr	r0, [r0, #8]
 80123e6:	2b1f      	cmp	r3, #31
 80123e8:	d847      	bhi.n	801247a <GUI_GetBitmapPixelIndex+0xa2>
 80123ea:	e8df f003 	tbb	[pc, r3]
 80123ee:	2316      	.short	0x2316
 80123f0:	46463146 	.word	0x46463146
 80123f4:	46463c46 	.word	0x46463c46
 80123f8:	46464646 	.word	0x46464646
 80123fc:	46464046 	.word	0x46464046
 8012400:	46464646 	.word	0x46464646
 8012404:	46464646 	.word	0x46464646
 8012408:	46464646 	.word	0x46464646
 801240c:	1046      	.short	0x1046
 801240e:	10a3      	asrs	r3, r4, #2
 8012410:	fb02 1103 	mla	r1, r2, r3, r1
 8012414:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8012418:	bd10      	pop	{r4, pc}
 801241a:	fb02 f204 	mul.w	r2, r2, r4
 801241e:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 8012422:	43c8      	mvns	r0, r1
 8012424:	5ca3      	ldrb	r3, [r4, r2]
 8012426:	f000 0007 	and.w	r0, r0, #7
 801242a:	fa23 f000 	lsr.w	r0, r3, r0
 801242e:	f000 0001 	and.w	r0, r0, #1
 8012432:	bd10      	pop	{r4, pc}
 8012434:	fb02 f204 	mul.w	r2, r2, r4
 8012438:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 801243c:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 8012440:	5ca3      	ldrb	r3, [r4, r2]
 8012442:	f000 0006 	and.w	r0, r0, #6
 8012446:	fa23 f000 	lsr.w	r0, r3, r0
 801244a:	f000 0003 	and.w	r0, r0, #3
 801244e:	bd10      	pop	{r4, pc}
 8012450:	fb02 f204 	mul.w	r2, r2, r4
 8012454:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 8012458:	07cb      	lsls	r3, r1, #31
 801245a:	5ca0      	ldrb	r0, [r4, r2]
 801245c:	bf4c      	ite	mi
 801245e:	f000 000f 	andmi.w	r0, r0, #15
 8012462:	0900      	lsrpl	r0, r0, #4
 8012464:	bd10      	pop	{r4, pc}
 8012466:	fb02 0404 	mla	r4, r2, r4, r0
 801246a:	5c60      	ldrb	r0, [r4, r1]
 801246c:	bd10      	pop	{r4, pc}
 801246e:	1063      	asrs	r3, r4, #1
 8012470:	fb02 1103 	mla	r1, r2, r3, r1
 8012474:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8012478:	bd10      	pop	{r4, pc}
 801247a:	2000      	movs	r0, #0
 801247c:	bd10      	pop	{r4, pc}
 801247e:	4770      	bx	lr

08012480 <GUI_GotoXY>:
 8012480:	b538      	push	{r3, r4, r5, lr}
 8012482:	4605      	mov	r5, r0
 8012484:	460c      	mov	r4, r1
 8012486:	f003 feed 	bl	8016264 <GUI_Lock>
 801248a:	4b04      	ldr	r3, [pc, #16]	; (801249c <GUI_GotoXY+0x1c>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	845d      	strh	r5, [r3, #34]	; 0x22
 8012490:	849c      	strh	r4, [r3, #36]	; 0x24
 8012492:	f003 fedd 	bl	8016250 <GUI_Unlock>
 8012496:	2000      	movs	r0, #0
 8012498:	bd38      	pop	{r3, r4, r5, pc}
 801249a:	bf00      	nop
 801249c:	20000018 	.word	0x20000018

080124a0 <GUI_GetPenSize>:
 80124a0:	b510      	push	{r4, lr}
 80124a2:	f003 fedf 	bl	8016264 <GUI_Lock>
 80124a6:	4b03      	ldr	r3, [pc, #12]	; (80124b4 <GUI_GetPenSize+0x14>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	7e1c      	ldrb	r4, [r3, #24]
 80124ac:	f003 fed0 	bl	8016250 <GUI_Unlock>
 80124b0:	4620      	mov	r0, r4
 80124b2:	bd10      	pop	{r4, pc}
 80124b4:	20000018 	.word	0x20000018

080124b8 <GUI_SetPenSize>:
 80124b8:	b538      	push	{r3, r4, r5, lr}
 80124ba:	4605      	mov	r5, r0
 80124bc:	f003 fed2 	bl	8016264 <GUI_Lock>
 80124c0:	4b03      	ldr	r3, [pc, #12]	; (80124d0 <GUI_SetPenSize+0x18>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	7e1c      	ldrb	r4, [r3, #24]
 80124c6:	761d      	strb	r5, [r3, #24]
 80124c8:	f003 fec2 	bl	8016250 <GUI_Unlock>
 80124cc:	4620      	mov	r0, r4
 80124ce:	bd38      	pop	{r3, r4, r5, pc}
 80124d0:	20000018 	.word	0x20000018

080124d4 <GUI_SetPenShape>:
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	4605      	mov	r5, r0
 80124d8:	f003 fec4 	bl	8016264 <GUI_Lock>
 80124dc:	4b03      	ldr	r3, [pc, #12]	; (80124ec <GUI_SetPenShape+0x18>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	7e5c      	ldrb	r4, [r3, #25]
 80124e2:	765d      	strb	r5, [r3, #25]
 80124e4:	f003 feb4 	bl	8016250 <GUI_Unlock>
 80124e8:	4620      	mov	r0, r4
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	20000018 	.word	0x20000018

080124f0 <GUI_RectsIntersect>:
 80124f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80124f4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	dc14      	bgt.n	8012526 <GUI_RectsIntersect+0x36>
 80124fc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8012500:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012504:	429a      	cmp	r2, r3
 8012506:	dc0e      	bgt.n	8012526 <GUI_RectsIntersect+0x36>
 8012508:	f9b0 2000 	ldrsh.w	r2, [r0]
 801250c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012510:	429a      	cmp	r2, r3
 8012512:	dc08      	bgt.n	8012526 <GUI_RectsIntersect+0x36>
 8012514:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8012518:	f9b1 3000 	ldrsh.w	r3, [r1]
 801251c:	4283      	cmp	r3, r0
 801251e:	bfcc      	ite	gt
 8012520:	2000      	movgt	r0, #0
 8012522:	2001      	movle	r0, #1
 8012524:	4770      	bx	lr
 8012526:	2000      	movs	r0, #0
 8012528:	4770      	bx	lr
 801252a:	bf00      	nop

0801252c <GUI_SaveContext_W>:
 801252c:	b508      	push	{r3, lr}
 801252e:	4b03      	ldr	r3, [pc, #12]	; (801253c <GUI_SaveContext_W+0x10>)
 8012530:	2274      	movs	r2, #116	; 0x74
 8012532:	6819      	ldr	r1, [r3, #0]
 8012534:	f00f fbe9 	bl	8021d0a <memcpy>
 8012538:	bd08      	pop	{r3, pc}
 801253a:	bf00      	nop
 801253c:	20000018 	.word	0x20000018

08012540 <GUI_RestoreContext>:
 8012540:	b508      	push	{r3, lr}
 8012542:	4b03      	ldr	r3, [pc, #12]	; (8012550 <GUI_RestoreContext+0x10>)
 8012544:	4601      	mov	r1, r0
 8012546:	2274      	movs	r2, #116	; 0x74
 8012548:	6818      	ldr	r0, [r3, #0]
 801254a:	f00f fbde 	bl	8021d0a <memcpy>
 801254e:	bd08      	pop	{r3, pc}
 8012550:	20000018 	.word	0x20000018

08012554 <GUI_SelectLCD>:
 8012554:	b508      	push	{r3, lr}
 8012556:	f003 fe85 	bl	8016264 <GUI_Lock>
 801255a:	f005 ff97 	bl	801848c <LCD_SelectLCD>
 801255e:	f006 f86b 	bl	8018638 <LCD_UpdateColorIndices>
 8012562:	f00b fa65 	bl	801da30 <WM_Activate>
 8012566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801256a:	f003 be71 	b.w	8016250 <GUI_Unlock>
 801256e:	bf00      	nop

08012570 <GUI_SetBkColor>:
 8012570:	b510      	push	{r4, lr}
 8012572:	4604      	mov	r4, r0
 8012574:	f003 fe76 	bl	8016264 <GUI_Lock>
 8012578:	4620      	mov	r0, r4
 801257a:	f005 fb33 	bl	8017be4 <LCD_SetBkColor>
 801257e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012582:	f003 be65 	b.w	8016250 <GUI_Unlock>
 8012586:	bf00      	nop

08012588 <GUI_SetColor>:
 8012588:	b510      	push	{r4, lr}
 801258a:	4604      	mov	r4, r0
 801258c:	f003 fe6a 	bl	8016264 <GUI_Lock>
 8012590:	4620      	mov	r0, r4
 8012592:	f005 fb2d 	bl	8017bf0 <LCD_SetColor>
 8012596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801259a:	f003 be59 	b.w	8016250 <GUI_Unlock>
 801259e:	bf00      	nop

080125a0 <GL_SetDefault>:
 80125a0:	4b20      	ldr	r3, [pc, #128]	; (8012624 <GL_SetDefault+0x84>)
 80125a2:	b570      	push	{r4, r5, r6, lr}
 80125a4:	681e      	ldr	r6, [r3, #0]
 80125a6:	f003 fe5d 	bl	8016264 <GUI_Lock>
 80125aa:	4c1f      	ldr	r4, [pc, #124]	; (8012628 <GL_SetDefault+0x88>)
 80125ac:	2500      	movs	r5, #0
 80125ae:	4630      	mov	r0, r6
 80125b0:	f005 fb18 	bl	8017be4 <LCD_SetBkColor>
 80125b4:	f003 fe4c 	bl	8016250 <GUI_Unlock>
 80125b8:	4b1c      	ldr	r3, [pc, #112]	; (801262c <GL_SetDefault+0x8c>)
 80125ba:	681e      	ldr	r6, [r3, #0]
 80125bc:	f003 fe52 	bl	8016264 <GUI_Lock>
 80125c0:	4630      	mov	r0, r6
 80125c2:	f005 fb15 	bl	8017bf0 <LCD_SetColor>
 80125c6:	f003 fe43 	bl	8016250 <GUI_Unlock>
 80125ca:	f003 fe4b 	bl	8016264 <GUI_Lock>
 80125ce:	2201      	movs	r2, #1
 80125d0:	6823      	ldr	r3, [r4, #0]
 80125d2:	761a      	strb	r2, [r3, #24]
 80125d4:	f003 fe3c 	bl	8016250 <GUI_Unlock>
 80125d8:	f003 fe44 	bl	8016264 <GUI_Lock>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	859d      	strh	r5, [r3, #44]	; 0x2c
 80125e0:	f003 fe36 	bl	8016250 <GUI_Unlock>
 80125e4:	f003 fe3e 	bl	8016264 <GUI_Lock>
 80125e8:	6823      	ldr	r3, [r4, #0]
 80125ea:	855d      	strh	r5, [r3, #42]	; 0x2a
 80125ec:	f003 fe30 	bl	8016250 <GUI_Unlock>
 80125f0:	f003 fe38 	bl	8016264 <GUI_Lock>
 80125f4:	4628      	mov	r0, r5
 80125f6:	f004 fedf 	bl	80173b8 <LCD_SetDrawMode>
 80125fa:	f003 fe29 	bl	8016250 <GUI_Unlock>
 80125fe:	4b0c      	ldr	r3, [pc, #48]	; (8012630 <GL_SetDefault+0x90>)
 8012600:	681d      	ldr	r5, [r3, #0]
 8012602:	f003 fe2f 	bl	8016264 <GUI_Lock>
 8012606:	6823      	ldr	r3, [r4, #0]
 8012608:	b105      	cbz	r5, 801260c <GL_SetDefault+0x6c>
 801260a:	61dd      	str	r5, [r3, #28]
 801260c:	f003 fe20 	bl	8016250 <GUI_Unlock>
 8012610:	f003 fe28 	bl	8016264 <GUI_Lock>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	2200      	movs	r2, #0
 8012618:	769a      	strb	r2, [r3, #26]
 801261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801261e:	f003 be17 	b.w	8016250 <GUI_Unlock>
 8012622:	bf00      	nop
 8012624:	20000014 	.word	0x20000014
 8012628:	20000018 	.word	0x20000018
 801262c:	20000010 	.word	0x20000010
 8012630:	2000000c 	.word	0x2000000c

08012634 <GUI_SetDrawMode>:
 8012634:	b510      	push	{r4, lr}
 8012636:	4604      	mov	r4, r0
 8012638:	f003 fe14 	bl	8016264 <GUI_Lock>
 801263c:	4620      	mov	r0, r4
 801263e:	f004 febb 	bl	80173b8 <LCD_SetDrawMode>
 8012642:	4604      	mov	r4, r0
 8012644:	f003 fe04 	bl	8016250 <GUI_Unlock>
 8012648:	4620      	mov	r0, r4
 801264a:	bd10      	pop	{r4, pc}

0801264c <GUI_SetFont>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	4604      	mov	r4, r0
 8012650:	f003 fe08 	bl	8016264 <GUI_Lock>
 8012654:	4b04      	ldr	r3, [pc, #16]	; (8012668 <GUI_SetFont+0x1c>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	69dd      	ldr	r5, [r3, #28]
 801265a:	b104      	cbz	r4, 801265e <GUI_SetFont+0x12>
 801265c:	61dc      	str	r4, [r3, #28]
 801265e:	f003 fdf7 	bl	8016250 <GUI_Unlock>
 8012662:	4628      	mov	r0, r5
 8012664:	bd38      	pop	{r3, r4, r5, pc}
 8012666:	bf00      	nop
 8012668:	20000018 	.word	0x20000018

0801266c <GUI_SetOrg>:
 801266c:	b570      	push	{r4, r5, r6, lr}
 801266e:	4605      	mov	r5, r0
 8012670:	460c      	mov	r4, r1
 8012672:	f003 fdf7 	bl	8016264 <GUI_Lock>
 8012676:	4a09      	ldr	r2, [pc, #36]	; (801269c <GUI_SetOrg+0x30>)
 8012678:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <GUI_SetOrg+0x34>)
 801267a:	4629      	mov	r1, r5
 801267c:	6810      	ldr	r0, [r2, #0]
 801267e:	4622      	mov	r2, r4
 8012680:	4e08      	ldr	r6, [pc, #32]	; (80126a4 <GUI_SetOrg+0x38>)
 8012682:	7c40      	ldrb	r0, [r0, #17]
 8012684:	8035      	strh	r5, [r6, #0]
 8012686:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801268a:	4d07      	ldr	r5, [pc, #28]	; (80126a8 <GUI_SetOrg+0x3c>)
 801268c:	68c3      	ldr	r3, [r0, #12]
 801268e:	802c      	strh	r4, [r5, #0]
 8012690:	6a1b      	ldr	r3, [r3, #32]
 8012692:	4798      	blx	r3
 8012694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012698:	f003 bdda 	b.w	8016250 <GUI_Unlock>
 801269c:	20000018 	.word	0x20000018
 80126a0:	2002afd0 	.word	0x2002afd0
 80126a4:	2002afa8 	.word	0x2002afa8
 80126a8:	2002af98 	.word	0x2002af98

080126ac <GUI_SetTextAlign>:
 80126ac:	b538      	push	{r3, r4, r5, lr}
 80126ae:	4605      	mov	r5, r0
 80126b0:	f003 fdd8 	bl	8016264 <GUI_Lock>
 80126b4:	4b04      	ldr	r3, [pc, #16]	; (80126c8 <GUI_SetTextAlign+0x1c>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80126bc:	859d      	strh	r5, [r3, #44]	; 0x2c
 80126be:	f003 fdc7 	bl	8016250 <GUI_Unlock>
 80126c2:	4620      	mov	r0, r4
 80126c4:	bd38      	pop	{r3, r4, r5, pc}
 80126c6:	bf00      	nop
 80126c8:	20000018 	.word	0x20000018

080126cc <GUI_SetTextMode>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4605      	mov	r5, r0
 80126d0:	f003 fdc8 	bl	8016264 <GUI_Lock>
 80126d4:	4b04      	ldr	r3, [pc, #16]	; (80126e8 <GUI_SetTextMode+0x1c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 80126dc:	855d      	strh	r5, [r3, #42]	; 0x2a
 80126de:	f003 fdb7 	bl	8016250 <GUI_Unlock>
 80126e2:	4620      	mov	r0, r4
 80126e4:	bd38      	pop	{r3, r4, r5, pc}
 80126e6:	bf00      	nop
 80126e8:	20000018 	.word	0x20000018

080126ec <_InitContext>:
 80126ec:	b538      	push	{r3, r4, r5, lr}
 80126ee:	4d19      	ldr	r5, [pc, #100]	; (8012754 <_InitContext+0x68>)
 80126f0:	4604      	mov	r4, r0
 80126f2:	4a19      	ldr	r2, [pc, #100]	; (8012758 <_InitContext+0x6c>)
 80126f4:	f100 0108 	add.w	r1, r0, #8
 80126f8:	692b      	ldr	r3, [r5, #16]
 80126fa:	6702      	str	r2, [r0, #112]	; 0x70
 80126fc:	1d1a      	adds	r2, r3, #4
 80126fe:	f103 0008 	add.w	r0, r3, #8
 8012702:	639b      	str	r3, [r3, #56]	; 0x38
 8012704:	63da      	str	r2, [r3, #60]	; 0x3c
 8012706:	641b      	str	r3, [r3, #64]	; 0x40
 8012708:	4a14      	ldr	r2, [pc, #80]	; (801275c <_InitContext+0x70>)
 801270a:	6160      	str	r0, [r4, #20]
 801270c:	7c5b      	ldrb	r3, [r3, #17]
 801270e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012712:	68c3      	ldr	r3, [r0, #12]
 8012714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012716:	4798      	blx	r3
 8012718:	692b      	ldr	r3, [r5, #16]
 801271a:	2201      	movs	r2, #1
 801271c:	6869      	ldr	r1, [r5, #4]
 801271e:	3308      	adds	r3, #8
 8012720:	480f      	ldr	r0, [pc, #60]	; (8012760 <_InitContext+0x74>)
 8012722:	61e1      	str	r1, [r4, #28]
 8012724:	6163      	str	r3, [r4, #20]
 8012726:	7622      	strb	r2, [r4, #24]
 8012728:	76e2      	strb	r2, [r4, #27]
 801272a:	6660      	str	r0, [r4, #100]	; 0x64
 801272c:	f00b faf6 	bl	801dd1c <WM_GetDesktopWindow>
 8012730:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012734:	2203      	movs	r2, #3
 8012736:	64a0      	str	r0, [r4, #72]	; 0x48
 8012738:	6323      	str	r3, [r4, #48]	; 0x30
 801273a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 801273e:	6363      	str	r3, [r4, #52]	; 0x34
 8012740:	68e8      	ldr	r0, [r5, #12]
 8012742:	f005 fa4f 	bl	8017be4 <LCD_SetBkColor>
 8012746:	68a8      	ldr	r0, [r5, #8]
 8012748:	f005 fa52 	bl	8017bf0 <LCD_SetColor>
 801274c:	4b05      	ldr	r3, [pc, #20]	; (8012764 <_InitContext+0x78>)
 801274e:	4a06      	ldr	r2, [pc, #24]	; (8012768 <_InitContext+0x7c>)
 8012750:	601a      	str	r2, [r3, #0]
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	20000008 	.word	0x20000008
 8012758:	2000025c 	.word	0x2000025c
 801275c:	2002afd0 	.word	0x2002afd0
 8012760:	08023bd0 	.word	0x08023bd0
 8012764:	2002afc8 	.word	0x2002afc8
 8012768:	08023cd4 	.word	0x08023cd4

0801276c <_OnExit>:
 801276c:	b570      	push	{r4, r5, r6, lr}
 801276e:	2400      	movs	r4, #0
 8012770:	4d09      	ldr	r5, [pc, #36]	; (8012798 <_OnExit+0x2c>)
 8012772:	4e0a      	ldr	r6, [pc, #40]	; (801279c <_OnExit+0x30>)
 8012774:	2274      	movs	r2, #116	; 0x74
 8012776:	4621      	mov	r1, r4
 8012778:	4628      	mov	r0, r5
 801277a:	6833      	ldr	r3, [r6, #0]
 801277c:	67ec      	str	r4, [r5, #124]	; 0x7c
 801277e:	4798      	blx	r3
 8012780:	6833      	ldr	r3, [r6, #0]
 8012782:	4621      	mov	r1, r4
 8012784:	2208      	movs	r2, #8
 8012786:	4806      	ldr	r0, [pc, #24]	; (80127a0 <_OnExit+0x34>)
 8012788:	4798      	blx	r3
 801278a:	4906      	ldr	r1, [pc, #24]	; (80127a4 <_OnExit+0x38>)
 801278c:	4a06      	ldr	r2, [pc, #24]	; (80127a8 <_OnExit+0x3c>)
 801278e:	4b07      	ldr	r3, [pc, #28]	; (80127ac <_OnExit+0x40>)
 8012790:	610d      	str	r5, [r1, #16]
 8012792:	7014      	strb	r4, [r2, #0]
 8012794:	601c      	str	r4, [r3, #0]
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	200001dc 	.word	0x200001dc
 801279c:	20000050 	.word	0x20000050
 80127a0:	2002afd0 	.word	0x2002afd0
 80127a4:	20000008 	.word	0x20000008
 80127a8:	2002afb8 	.word	0x2002afb8
 80127ac:	2002af94 	.word	0x2002af94

080127b0 <GUI_Clear>:
 80127b0:	2100      	movs	r1, #0
 80127b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b6:	4608      	mov	r0, r1
 80127b8:	b082      	sub	sp, #8
 80127ba:	f7ff fe61 	bl	8012480 <GUI_GotoXY>
 80127be:	4f18      	ldr	r7, [pc, #96]	; (8012820 <GUI_Clear+0x70>)
 80127c0:	f003 fd50 	bl	8016264 <GUI_Lock>
 80127c4:	2004      	movs	r0, #4
 80127c6:	f004 fdf7 	bl	80173b8 <LCD_SetDrawMode>
 80127ca:	4b16      	ldr	r3, [pc, #88]	; (8012824 <GUI_Clear+0x74>)
 80127cc:	f643 76ff 	movw	r6, #16383	; 0x3fff
 80127d0:	463d      	mov	r5, r7
 80127d2:	691b      	ldr	r3, [r3, #16]
 80127d4:	4680      	mov	r8, r0
 80127d6:	4634      	mov	r4, r6
 80127d8:	4668      	mov	r0, sp
 80127da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127de:	4417      	add	r7, r2
 80127e0:	4416      	add	r6, r2
 80127e2:	441d      	add	r5, r3
 80127e4:	441c      	add	r4, r3
 80127e6:	f8ad 7000 	strh.w	r7, [sp]
 80127ea:	f8ad 6004 	strh.w	r6, [sp, #4]
 80127ee:	f8ad 5002 	strh.w	r5, [sp, #2]
 80127f2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80127f6:	f00a fea7 	bl	801d548 <WM__InitIVRSearch>
 80127fa:	b148      	cbz	r0, 8012810 <GUI_Clear+0x60>
 80127fc:	4623      	mov	r3, r4
 80127fe:	4632      	mov	r2, r6
 8012800:	4629      	mov	r1, r5
 8012802:	4638      	mov	r0, r7
 8012804:	f004 fe60 	bl	80174c8 <LCD_FillRect>
 8012808:	f00a fd74 	bl	801d2f4 <WM__GetNextIVR>
 801280c:	2800      	cmp	r0, #0
 801280e:	d1f5      	bne.n	80127fc <GUI_Clear+0x4c>
 8012810:	4640      	mov	r0, r8
 8012812:	f004 fdd1 	bl	80173b8 <LCD_SetDrawMode>
 8012816:	f003 fd1b 	bl	8016250 <GUI_Unlock>
 801281a:	b002      	add	sp, #8
 801281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012820:	ffffc001 	.word	0xffffc001
 8012824:	20000008 	.word	0x20000008

08012828 <GUI__Config>:
 8012828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801282a:	4e1c      	ldr	r6, [pc, #112]	; (801289c <GUI__Config+0x74>)
 801282c:	b085      	sub	sp, #20
 801282e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8012830:	b10b      	cbz	r3, 8012836 <GUI__Config+0xe>
 8012832:	b005      	add	sp, #20
 8012834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012836:	4b1a      	ldr	r3, [pc, #104]	; (80128a0 <GUI__Config+0x78>)
 8012838:	466f      	mov	r7, sp
 801283a:	ad04      	add	r5, sp, #16
 801283c:	f04f 0e01 	mov.w	lr, #1
 8012840:	f106 0480 	add.w	r4, r6, #128	; 0x80
 8012844:	f8c6 e07c 	str.w	lr, [r6, #124]	; 0x7c
 8012848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801284a:	c707      	stmia	r7!, {r0, r1, r2}
 801284c:	0c19      	lsrs	r1, r3, #16
 801284e:	f815 2d10 	ldrb.w	r2, [r5, #-16]!
 8012852:	f827 3b02 	strh.w	r3, [r7], #2
 8012856:	7039      	strb	r1, [r7, #0]
 8012858:	f804 2b01 	strb.w	r2, [r4], #1
 801285c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012860:	2a00      	cmp	r2, #0
 8012862:	d1f9      	bne.n	8012858 <GUI__Config+0x30>
 8012864:	f7ff fd3e 	bl	80122e4 <GUI_GetVersionString>
 8012868:	4623      	mov	r3, r4
 801286a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801286e:	4619      	mov	r1, r3
 8012870:	f803 2b01 	strb.w	r2, [r3], #1
 8012874:	7802      	ldrb	r2, [r0, #0]
 8012876:	2a00      	cmp	r2, #0
 8012878:	d1f7      	bne.n	801286a <GUI__Config+0x42>
 801287a:	704a      	strb	r2, [r1, #1]
 801287c:	f7f0 fb84 	bl	8002f88 <GUI_X_Config>
 8012880:	f003 fd3e 	bl	8016300 <GUITASK_Init>
 8012884:	f7f1 f9e0 	bl	8003c48 <LCD_X_Config>
 8012888:	4b06      	ldr	r3, [pc, #24]	; (80128a4 <GUI__Config+0x7c>)
 801288a:	4807      	ldr	r0, [pc, #28]	; (80128a8 <GUI__Config+0x80>)
 801288c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 8012890:	b005      	add	sp, #20
 8012892:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012896:	f000 b8cf 	b.w	8012a38 <GUI__RegisterExit>
 801289a:	bf00      	nop
 801289c:	200001dc 	.word	0x200001dc
 80128a0:	08023bd8 	.word	0x08023bd8
 80128a4:	0801276d 	.word	0x0801276d
 80128a8:	20000270 	.word	0x20000270

080128ac <GUI_Init>:
 80128ac:	b590      	push	{r4, r7, lr}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4a54      	ldr	r2, [pc, #336]	; (8012a04 <GUI_Init+0x158>)
 80128b4:	4b53      	ldr	r3, [pc, #332]	; (8012a04 <GUI_Init+0x158>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f023 0301 	bic.w	r3, r3, #1
 80128bc:	6013      	str	r3, [r2, #0]
 80128be:	4b52      	ldr	r3, [pc, #328]	; (8012a08 <GUI_Init+0x15c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80128c6:	f240 4249 	movw	r2, #1097	; 0x449
 80128ca:	4293      	cmp	r3, r2
 80128cc:	bf0c      	ite	eq
 80128ce:	2301      	moveq	r3, #1
 80128d0:	2300      	movne	r3, #0
 80128d2:	b2da      	uxtb	r2, r3
 80128d4:	4b4c      	ldr	r3, [pc, #304]	; (8012a08 <GUI_Init+0x15c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80128dc:	f240 4151 	movw	r1, #1105	; 0x451
 80128e0:	428b      	cmp	r3, r1
 80128e2:	bf0c      	ite	eq
 80128e4:	2301      	moveq	r3, #1
 80128e6:	2300      	movne	r3, #0
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	4313      	orrs	r3, r2
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	4619      	mov	r1, r3
 80128f0:	4b45      	ldr	r3, [pc, #276]	; (8012a08 <GUI_Init+0x15c>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80128f8:	f240 4252 	movw	r2, #1106	; 0x452
 80128fc:	4293      	cmp	r3, r2
 80128fe:	bf0c      	ite	eq
 8012900:	2301      	moveq	r3, #1
 8012902:	2300      	movne	r3, #0
 8012904:	b2db      	uxtb	r3, r3
 8012906:	430b      	orrs	r3, r1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d010      	beq.n	801292e <GUI_Init+0x82>
 801290c:	4b3f      	ldr	r3, [pc, #252]	; (8012a0c <GUI_Init+0x160>)
 801290e:	2201      	movs	r2, #1
 8012910:	601a      	str	r2, [r3, #0]
 8012912:	bf00      	nop
 8012914:	4b3d      	ldr	r3, [pc, #244]	; (8012a0c <GUI_Init+0x160>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d1fb      	bne.n	8012914 <GUI_Init+0x68>
 801291c:	4b3c      	ldr	r3, [pc, #240]	; (8012a10 <GUI_Init+0x164>)
 801291e:	4a3d      	ldr	r2, [pc, #244]	; (8012a14 <GUI_Init+0x168>)
 8012920:	601a      	str	r2, [r3, #0]
 8012922:	4b3b      	ldr	r3, [pc, #236]	; (8012a10 <GUI_Init+0x164>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a3c      	ldr	r2, [pc, #240]	; (8012a18 <GUI_Init+0x16c>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d018      	beq.n	801295e <GUI_Init+0xb2>
 801292c:	e7fe      	b.n	801292c <GUI_Init+0x80>
 801292e:	4b3b      	ldr	r3, [pc, #236]	; (8012a1c <GUI_Init+0x170>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012936:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801293a:	d110      	bne.n	801295e <GUI_Init+0xb2>
 801293c:	4b38      	ldr	r3, [pc, #224]	; (8012a20 <GUI_Init+0x174>)
 801293e:	2201      	movs	r2, #1
 8012940:	601a      	str	r2, [r3, #0]
 8012942:	bf00      	nop
 8012944:	4b36      	ldr	r3, [pc, #216]	; (8012a20 <GUI_Init+0x174>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d1fb      	bne.n	8012944 <GUI_Init+0x98>
 801294c:	4b35      	ldr	r3, [pc, #212]	; (8012a24 <GUI_Init+0x178>)
 801294e:	4a31      	ldr	r2, [pc, #196]	; (8012a14 <GUI_Init+0x168>)
 8012950:	601a      	str	r2, [r3, #0]
 8012952:	4b34      	ldr	r3, [pc, #208]	; (8012a24 <GUI_Init+0x178>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a30      	ldr	r2, [pc, #192]	; (8012a18 <GUI_Init+0x16c>)
 8012958:	4293      	cmp	r3, r2
 801295a:	d000      	beq.n	801295e <GUI_Init+0xb2>
 801295c:	e7fe      	b.n	801295c <GUI_Init+0xb0>
 801295e:	f7ff ff63 	bl	8012828 <GUI__Config>
 8012962:	4b31      	ldr	r3, [pc, #196]	; (8012a28 <GUI_Init+0x17c>)
 8012964:	222e      	movs	r2, #46	; 0x2e
 8012966:	701a      	strb	r2, [r3, #0]
 8012968:	f7fb ff5c 	bl	800e824 <GUI_X_Init>
 801296c:	482f      	ldr	r0, [pc, #188]	; (8012a2c <GUI_Init+0x180>)
 801296e:	f7ff febd 	bl	80126ec <_InitContext>
 8012972:	f005 f87b 	bl	8017a6c <emWin_LCD_Init>
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	f005 fbc0 	bl	80180fc <LCD_GetXSizeDisplay>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	bf0c      	ite	eq
 8012982:	2301      	moveq	r3, #1
 8012984:	2300      	movne	r3, #0
 8012986:	b2dc      	uxtb	r4, r3
 8012988:	f005 fbbe 	bl	8018108 <LCD_GetYSizeDisplay>
 801298c:	4603      	mov	r3, r0
 801298e:	2b00      	cmp	r3, #0
 8012990:	bf0c      	ite	eq
 8012992:	2301      	moveq	r3, #1
 8012994:	2300      	movne	r3, #0
 8012996:	b2db      	uxtb	r3, r3
 8012998:	4323      	orrs	r3, r4
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d009      	beq.n	80129b4 <GUI_Init+0x108>
 80129a0:	f005 fb58 	bl	8018054 <LCD_GetXSizeMax>
 80129a4:	4604      	mov	r4, r0
 80129a6:	f005 fb6f 	bl	8018088 <LCD_GetYSizeMax>
 80129aa:	4603      	mov	r3, r0
 80129ac:	4619      	mov	r1, r3
 80129ae:	4620      	mov	r0, r4
 80129b0:	f005 fb9e 	bl	80180f0 <LCD_SetDisplaySize>
 80129b4:	2100      	movs	r1, #0
 80129b6:	2000      	movs	r0, #0
 80129b8:	f7ff fe58 	bl	801266c <GUI_SetOrg>
 80129bc:	f00b f880 	bl	801dac0 <WM_Init>
 80129c0:	f003 fcd8 	bl	8016374 <GUITASK_CopyContext>
 80129c4:	4b1a      	ldr	r3, [pc, #104]	; (8012a30 <GUI_Init+0x184>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d012      	beq.n	80129f2 <GUI_Init+0x146>
 80129cc:	e00d      	b.n	80129ea <GUI_Init+0x13e>
 80129ce:	4b18      	ldr	r3, [pc, #96]	; (8012a30 <GUI_Init+0x184>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d003      	beq.n	80129e0 <GUI_Init+0x134>
 80129d8:	4b15      	ldr	r3, [pc, #84]	; (8012a30 <GUI_Init+0x184>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	4798      	blx	r3
 80129e0:	4b13      	ldr	r3, [pc, #76]	; (8012a30 <GUI_Init+0x184>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	4a12      	ldr	r2, [pc, #72]	; (8012a30 <GUI_Init+0x184>)
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	4b11      	ldr	r3, [pc, #68]	; (8012a30 <GUI_Init+0x184>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1ed      	bne.n	80129ce <GUI_Init+0x122>
 80129f2:	4b10      	ldr	r3, [pc, #64]	; (8012a34 <GUI_Init+0x188>)
 80129f4:	2201      	movs	r2, #1
 80129f6:	701a      	strb	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	4618      	mov	r0, r3
 80129fc:	370c      	adds	r7, #12
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd90      	pop	{r4, r7, pc}
 8012a02:	bf00      	nop
 8012a04:	e0002000 	.word	0xe0002000
 8012a08:	e0042000 	.word	0xe0042000
 8012a0c:	40023008 	.word	0x40023008
 8012a10:	40023000 	.word	0x40023000
 8012a14:	f407a5c2 	.word	0xf407a5c2
 8012a18:	b5e8b5cd 	.word	0xb5e8b5cd
 8012a1c:	5c001000 	.word	0x5c001000
 8012a20:	58024c08 	.word	0x58024c08
 8012a24:	58024c00 	.word	0x58024c00
 8012a28:	2002af88 	.word	0x2002af88
 8012a2c:	200001dc 	.word	0x200001dc
 8012a30:	20000254 	.word	0x20000254
 8012a34:	2002afb0 	.word	0x2002afb0

08012a38 <GUI__RegisterExit>:
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	4b06      	ldr	r3, [pc, #24]	; (8012a5c <GUI__RegisterExit+0x24>)
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	605a      	str	r2, [r3, #4]
 8012a48:	4a04      	ldr	r2, [pc, #16]	; (8012a5c <GUI__RegisterExit+0x24>)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6013      	str	r3, [r2, #0]
 8012a4e:	bf00      	nop
 8012a50:	370c      	adds	r7, #12
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	20000250 	.word	0x20000250

08012a60 <GUI_DCACHE_Clear>:
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	4b05      	ldr	r3, [pc, #20]	; (8012a80 <GUI_DCACHE_Clear+0x20>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d003      	beq.n	8012a78 <GUI_DCACHE_Clear+0x18>
 8012a70:	4b03      	ldr	r3, [pc, #12]	; (8012a80 <GUI_DCACHE_Clear+0x20>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	4798      	blx	r3
 8012a78:	bf00      	nop
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	2002af94 	.word	0x2002af94

08012a84 <GUI_DEVICE__GetpDevice>:
 8012a84:	2801      	cmp	r0, #1
 8012a86:	dc10      	bgt.n	8012aaa <GUI_DEVICE__GetpDevice+0x26>
 8012a88:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <GUI_DEVICE__GetpDevice+0x2c>)
 8012a8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012a8e:	b168      	cbz	r0, 8012aac <GUI_DEVICE__GetpDevice+0x28>
 8012a90:	68c3      	ldr	r3, [r0, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4299      	cmp	r1, r3
 8012a96:	d104      	bne.n	8012aa2 <GUI_DEVICE__GetpDevice+0x1e>
 8012a98:	e009      	b.n	8012aae <GUI_DEVICE__GetpDevice+0x2a>
 8012a9a:	68c3      	ldr	r3, [r0, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	428b      	cmp	r3, r1
 8012aa0:	d004      	beq.n	8012aac <GUI_DEVICE__GetpDevice+0x28>
 8012aa2:	6800      	ldr	r0, [r0, #0]
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	d1f8      	bne.n	8012a9a <GUI_DEVICE__GetpDevice+0x16>
 8012aa8:	4770      	bx	lr
 8012aaa:	2000      	movs	r0, #0
 8012aac:	4770      	bx	lr
 8012aae:	4770      	bx	lr
 8012ab0:	2002afd0 	.word	0x2002afd0

08012ab4 <GUI_DEVICE__GetpDriver>:
 8012ab4:	2801      	cmp	r0, #1
 8012ab6:	dc0e      	bgt.n	8012ad6 <GUI_DEVICE__GetpDriver+0x22>
 8012ab8:	4b08      	ldr	r3, [pc, #32]	; (8012adc <GUI_DEVICE__GetpDriver+0x28>)
 8012aba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012abe:	b158      	cbz	r0, 8012ad8 <GUI_DEVICE__GetpDriver+0x24>
 8012ac0:	68c3      	ldr	r3, [r0, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	b91b      	cbnz	r3, 8012ace <GUI_DEVICE__GetpDriver+0x1a>
 8012ac6:	e008      	b.n	8012ada <GUI_DEVICE__GetpDriver+0x26>
 8012ac8:	68c3      	ldr	r3, [r0, #12]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	b123      	cbz	r3, 8012ad8 <GUI_DEVICE__GetpDriver+0x24>
 8012ace:	6800      	ldr	r0, [r0, #0]
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d1f9      	bne.n	8012ac8 <GUI_DEVICE__GetpDriver+0x14>
 8012ad4:	4770      	bx	lr
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	4770      	bx	lr
 8012ada:	4770      	bx	lr
 8012adc:	2002afd0 	.word	0x2002afd0

08012ae0 <GUI_DEVICE_Delete>:
 8012ae0:	f7fe be08 	b.w	80116f4 <GUI_ALLOC_FreeFixedBlock>

08012ae4 <GUI_DEVICE_Create>:
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	dc17      	bgt.n	8012b18 <GUI_DEVICE_Create+0x34>
 8012ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aec:	4607      	mov	r7, r0
 8012aee:	201c      	movs	r0, #28
 8012af0:	4690      	mov	r8, r2
 8012af2:	460d      	mov	r5, r1
 8012af4:	461e      	mov	r6, r3
 8012af6:	f7fe fe07 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8012afa:	4604      	mov	r4, r0
 8012afc:	b1d0      	cbz	r0, 8012b34 <GUI_DEVICE_Create+0x50>
 8012afe:	b16d      	cbz	r5, 8012b1c <GUI_DEVICE_Create+0x38>
 8012b00:	6105      	str	r5, [r0, #16]
 8012b02:	2300      	movs	r3, #0
 8012b04:	4620      	mov	r0, r4
 8012b06:	61a6      	str	r6, [r4, #24]
 8012b08:	f8a4 8014 	strh.w	r8, [r4, #20]
 8012b0c:	60e7      	str	r7, [r4, #12]
 8012b0e:	6023      	str	r3, [r4, #0]
 8012b10:	6063      	str	r3, [r4, #4]
 8012b12:	60a3      	str	r3, [r4, #8]
 8012b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b18:	2000      	movs	r0, #0
 8012b1a:	4770      	bx	lr
 8012b1c:	4b07      	ldr	r3, [pc, #28]	; (8012b3c <GUI_DEVICE_Create+0x58>)
 8012b1e:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8012b22:	b90a      	cbnz	r2, 8012b28 <GUI_DEVICE_Create+0x44>
 8012b24:	e7ed      	b.n	8012b02 <GUI_DEVICE_Create+0x1e>
 8012b26:	461a      	mov	r2, r3
 8012b28:	6813      	ldr	r3, [r2, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d1fb      	bne.n	8012b26 <GUI_DEVICE_Create+0x42>
 8012b2e:	6913      	ldr	r3, [r2, #16]
 8012b30:	6123      	str	r3, [r4, #16]
 8012b32:	e7e6      	b.n	8012b02 <GUI_DEVICE_Create+0x1e>
 8012b34:	2000      	movs	r0, #0
 8012b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b3a:	bf00      	nop
 8012b3c:	2002afd0 	.word	0x2002afd0

08012b40 <GUI_DEVICE_Unlink>:
 8012b40:	4a0f      	ldr	r2, [pc, #60]	; (8012b80 <GUI_DEVICE_Unlink+0x40>)
 8012b42:	6981      	ldr	r1, [r0, #24]
 8012b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b48:	4298      	cmp	r0, r3
 8012b4a:	d00a      	beq.n	8012b62 <GUI_DEVICE_Unlink+0x22>
 8012b4c:	6842      	ldr	r2, [r0, #4]
 8012b4e:	b10a      	cbz	r2, 8012b54 <GUI_DEVICE_Unlink+0x14>
 8012b50:	6803      	ldr	r3, [r0, #0]
 8012b52:	6013      	str	r3, [r2, #0]
 8012b54:	6803      	ldr	r3, [r0, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <GUI_DEVICE_Unlink+0x1a>
 8012b58:	605a      	str	r2, [r3, #4]
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	6003      	str	r3, [r0, #0]
 8012b5e:	6043      	str	r3, [r0, #4]
 8012b60:	4770      	bx	lr
 8012b62:	6803      	ldr	r3, [r0, #0]
 8012b64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012b68:	b12b      	cbz	r3, 8012b76 <GUI_DEVICE_Unlink+0x36>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	605a      	str	r2, [r3, #4]
 8012b6e:	6842      	ldr	r2, [r0, #4]
 8012b70:	2a00      	cmp	r2, #0
 8012b72:	d1ee      	bne.n	8012b52 <GUI_DEVICE_Unlink+0x12>
 8012b74:	e7f0      	b.n	8012b58 <GUI_DEVICE_Unlink+0x18>
 8012b76:	6842      	ldr	r2, [r0, #4]
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	d1ea      	bne.n	8012b52 <GUI_DEVICE_Unlink+0x12>
 8012b7c:	e7ed      	b.n	8012b5a <GUI_DEVICE_Unlink+0x1a>
 8012b7e:	bf00      	nop
 8012b80:	2002afd0 	.word	0x2002afd0

08012b84 <GUI_DEVICE_Link>:
 8012b84:	2800      	cmp	r0, #0
 8012b86:	d03d      	beq.n	8012c04 <GUI_DEVICE_Link+0x80>
 8012b88:	b470      	push	{r4, r5, r6}
 8012b8a:	6984      	ldr	r4, [r0, #24]
 8012b8c:	2c01      	cmp	r4, #1
 8012b8e:	dd03      	ble.n	8012b98 <GUI_DEVICE_Link+0x14>
 8012b90:	2301      	movs	r3, #1
 8012b92:	4618      	mov	r0, r3
 8012b94:	bc70      	pop	{r4, r5, r6}
 8012b96:	4770      	bx	lr
 8012b98:	4b1f      	ldr	r3, [pc, #124]	; (8012c18 <GUI_DEVICE_Link+0x94>)
 8012b9a:	781a      	ldrb	r2, [r3, #0]
 8012b9c:	4294      	cmp	r4, r2
 8012b9e:	da21      	bge.n	8012be4 <GUI_DEVICE_Link+0x60>
 8012ba0:	4d1e      	ldr	r5, [pc, #120]	; (8012c1c <GUI_DEVICE_Link+0x98>)
 8012ba2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8012ba6:	b90b      	cbnz	r3, 8012bac <GUI_DEVICE_Link+0x28>
 8012ba8:	e032      	b.n	8012c10 <GUI_DEVICE_Link+0x8c>
 8012baa:	4613      	mov	r3, r2
 8012bac:	685a      	ldr	r2, [r3, #4]
 8012bae:	2a00      	cmp	r2, #0
 8012bb0:	d1fb      	bne.n	8012baa <GUI_DEVICE_Link+0x26>
 8012bb2:	68c2      	ldr	r2, [r0, #12]
 8012bb4:	6811      	ldr	r1, [r2, #0]
 8012bb6:	e002      	b.n	8012bbe <GUI_DEVICE_Link+0x3a>
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d0e8      	beq.n	8012b90 <GUI_DEVICE_Link+0xc>
 8012bbe:	68da      	ldr	r2, [r3, #12]
 8012bc0:	6812      	ldr	r2, [r2, #0]
 8012bc2:	4291      	cmp	r1, r2
 8012bc4:	dbf8      	blt.n	8012bb8 <GUI_DEVICE_Link+0x34>
 8012bc6:	d010      	beq.n	8012bea <GUI_DEVICE_Link+0x66>
 8012bc8:	685a      	ldr	r2, [r3, #4]
 8012bca:	b1f2      	cbz	r2, 8012c0a <GUI_DEVICE_Link+0x86>
 8012bcc:	6010      	str	r0, [r2, #0]
 8012bce:	6042      	str	r2, [r0, #4]
 8012bd0:	4298      	cmp	r0, r3
 8012bd2:	bf14      	ite	ne
 8012bd4:	461a      	movne	r2, r3
 8012bd6:	2200      	moveq	r2, #0
 8012bd8:	6058      	str	r0, [r3, #4]
 8012bda:	2300      	movs	r3, #0
 8012bdc:	6002      	str	r2, [r0, #0]
 8012bde:	4618      	mov	r0, r3
 8012be0:	bc70      	pop	{r4, r5, r6}
 8012be2:	4770      	bx	lr
 8012be4:	1c62      	adds	r2, r4, #1
 8012be6:	701a      	strb	r2, [r3, #0]
 8012be8:	e7da      	b.n	8012ba0 <GUI_DEVICE_Link+0x1c>
 8012bea:	8a82      	ldrh	r2, [r0, #20]
 8012bec:	2a01      	cmp	r2, #1
 8012bee:	d1eb      	bne.n	8012bc8 <GUI_DEVICE_Link+0x44>
 8012bf0:	e004      	b.n	8012bfc <GUI_DEVICE_Link+0x78>
 8012bf2:	68d6      	ldr	r6, [r2, #12]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	6832      	ldr	r2, [r6, #0]
 8012bf8:	4291      	cmp	r1, r2
 8012bfa:	dce5      	bgt.n	8012bc8 <GUI_DEVICE_Link+0x44>
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	2a00      	cmp	r2, #0
 8012c00:	d1f7      	bne.n	8012bf2 <GUI_DEVICE_Link+0x6e>
 8012c02:	e7e1      	b.n	8012bc8 <GUI_DEVICE_Link+0x44>
 8012c04:	2301      	movs	r3, #1
 8012c06:	4618      	mov	r0, r3
 8012c08:	4770      	bx	lr
 8012c0a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8012c0e:	e7df      	b.n	8012bd0 <GUI_DEVICE_Link+0x4c>
 8012c10:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8012c14:	e7bd      	b.n	8012b92 <GUI_DEVICE_Link+0xe>
 8012c16:	bf00      	nop
 8012c18:	2002af82 	.word	0x2002af82
 8012c1c:	2002afd0 	.word	0x2002afd0

08012c20 <GUI_DEVICE_CreateAndLink>:
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	dc3b      	bgt.n	8012c9c <GUI_DEVICE_CreateAndLink+0x7c>
 8012c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c28:	4681      	mov	r9, r0
 8012c2a:	201c      	movs	r0, #28
 8012c2c:	4690      	mov	r8, r2
 8012c2e:	460f      	mov	r7, r1
 8012c30:	461e      	mov	r6, r3
 8012c32:	f7fe fd69 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8012c36:	4605      	mov	r5, r0
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d07f      	beq.n	8012d3c <GUI_DEVICE_CreateAndLink+0x11c>
 8012c3c:	4a41      	ldr	r2, [pc, #260]	; (8012d44 <GUI_DEVICE_CreateAndLink+0x124>)
 8012c3e:	2f00      	cmp	r7, #0
 8012c40:	d031      	beq.n	8012ca6 <GUI_DEVICE_CreateAndLink+0x86>
 8012c42:	2300      	movs	r3, #0
 8012c44:	f8df e104 	ldr.w	lr, [pc, #260]	; 8012d4c <GUI_DEVICE_CreateAndLink+0x12c>
 8012c48:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8012c4c:	6003      	str	r3, [r0, #0]
 8012c4e:	f89e 1000 	ldrb.w	r1, [lr]
 8012c52:	6107      	str	r7, [r0, #16]
 8012c54:	428e      	cmp	r6, r1
 8012c56:	6186      	str	r6, [r0, #24]
 8012c58:	f8a0 8014 	strh.w	r8, [r0, #20]
 8012c5c:	f8c0 900c 	str.w	r9, [r0, #12]
 8012c60:	6043      	str	r3, [r0, #4]
 8012c62:	6083      	str	r3, [r0, #8]
 8012c64:	db02      	blt.n	8012c6c <GUI_DEVICE_CreateAndLink+0x4c>
 8012c66:	1c73      	adds	r3, r6, #1
 8012c68:	f88e 3000 	strb.w	r3, [lr]
 8012c6c:	2c00      	cmp	r4, #0
 8012c6e:	d05d      	beq.n	8012d2c <GUI_DEVICE_CreateAndLink+0x10c>
 8012c70:	4621      	mov	r1, r4
 8012c72:	684c      	ldr	r4, [r1, #4]
 8012c74:	2c00      	cmp	r4, #0
 8012c76:	d1fb      	bne.n	8012c70 <GUI_DEVICE_CreateAndLink+0x50>
 8012c78:	f8d9 0000 	ldr.w	r0, [r9]
 8012c7c:	68cb      	ldr	r3, [r1, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4283      	cmp	r3, r0
 8012c82:	dd2c      	ble.n	8012cde <GUI_DEVICE_CreateAndLink+0xbe>
 8012c84:	6809      	ldr	r1, [r1, #0]
 8012c86:	2900      	cmp	r1, #0
 8012c88:	d1f8      	bne.n	8012c7c <GUI_DEVICE_CreateAndLink+0x5c>
 8012c8a:	b948      	cbnz	r0, 8012ca0 <GUI_DEVICE_CreateAndLink+0x80>
 8012c8c:	4b2e      	ldr	r3, [pc, #184]	; (8012d48 <GUI_DEVICE_CreateAndLink+0x128>)
 8012c8e:	3616      	adds	r6, #22
 8012c90:	4628      	mov	r0, r5
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8012c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	4770      	bx	lr
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ca6:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8012caa:	2900      	cmp	r1, #0
 8012cac:	d030      	beq.n	8012d10 <GUI_DEVICE_CreateAndLink+0xf0>
 8012cae:	4608      	mov	r0, r1
 8012cb0:	e000      	b.n	8012cb4 <GUI_DEVICE_CreateAndLink+0x94>
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	6803      	ldr	r3, [r0, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1fb      	bne.n	8012cb2 <GUI_DEVICE_CreateAndLink+0x92>
 8012cba:	6900      	ldr	r0, [r0, #16]
 8012cbc:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8012d4c <GUI_DEVICE_CreateAndLink+0x12c>
 8012cc0:	602b      	str	r3, [r5, #0]
 8012cc2:	6128      	str	r0, [r5, #16]
 8012cc4:	f89e 0000 	ldrb.w	r0, [lr]
 8012cc8:	61ae      	str	r6, [r5, #24]
 8012cca:	4286      	cmp	r6, r0
 8012ccc:	f8a5 8014 	strh.w	r8, [r5, #20]
 8012cd0:	f8c5 900c 	str.w	r9, [r5, #12]
 8012cd4:	606b      	str	r3, [r5, #4]
 8012cd6:	60ab      	str	r3, [r5, #8]
 8012cd8:	dbcb      	blt.n	8012c72 <GUI_DEVICE_CreateAndLink+0x52>
 8012cda:	460c      	mov	r4, r1
 8012cdc:	e7c3      	b.n	8012c66 <GUI_DEVICE_CreateAndLink+0x46>
 8012cde:	d00a      	beq.n	8012cf6 <GUI_DEVICE_CreateAndLink+0xd6>
 8012ce0:	684b      	ldr	r3, [r1, #4]
 8012ce2:	b343      	cbz	r3, 8012d36 <GUI_DEVICE_CreateAndLink+0x116>
 8012ce4:	601d      	str	r5, [r3, #0]
 8012ce6:	606b      	str	r3, [r5, #4]
 8012ce8:	428d      	cmp	r5, r1
 8012cea:	bf14      	ite	ne
 8012cec:	460b      	movne	r3, r1
 8012cee:	2300      	moveq	r3, #0
 8012cf0:	604d      	str	r5, [r1, #4]
 8012cf2:	602b      	str	r3, [r5, #0]
 8012cf4:	e7c9      	b.n	8012c8a <GUI_DEVICE_CreateAndLink+0x6a>
 8012cf6:	f1b8 0f01 	cmp.w	r8, #1
 8012cfa:	d1f1      	bne.n	8012ce0 <GUI_DEVICE_CreateAndLink+0xc0>
 8012cfc:	e004      	b.n	8012d08 <GUI_DEVICE_CreateAndLink+0xe8>
 8012cfe:	68dc      	ldr	r4, [r3, #12]
 8012d00:	4619      	mov	r1, r3
 8012d02:	6823      	ldr	r3, [r4, #0]
 8012d04:	4283      	cmp	r3, r0
 8012d06:	dbeb      	blt.n	8012ce0 <GUI_DEVICE_CreateAndLink+0xc0>
 8012d08:	680b      	ldr	r3, [r1, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d1f7      	bne.n	8012cfe <GUI_DEVICE_CreateAndLink+0xde>
 8012d0e:	e7e7      	b.n	8012ce0 <GUI_DEVICE_CreateAndLink+0xc0>
 8012d10:	f8df e038 	ldr.w	lr, [pc, #56]	; 8012d4c <GUI_DEVICE_CreateAndLink+0x12c>
 8012d14:	6001      	str	r1, [r0, #0]
 8012d16:	f89e 3000 	ldrb.w	r3, [lr]
 8012d1a:	6186      	str	r6, [r0, #24]
 8012d1c:	429e      	cmp	r6, r3
 8012d1e:	f8a0 8014 	strh.w	r8, [r0, #20]
 8012d22:	f8c0 900c 	str.w	r9, [r0, #12]
 8012d26:	6041      	str	r1, [r0, #4]
 8012d28:	6081      	str	r1, [r0, #8]
 8012d2a:	dad6      	bge.n	8012cda <GUI_DEVICE_CreateAndLink+0xba>
 8012d2c:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8012d30:	f8d9 0000 	ldr.w	r0, [r9]
 8012d34:	e7a9      	b.n	8012c8a <GUI_DEVICE_CreateAndLink+0x6a>
 8012d36:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8012d3a:	e7d5      	b.n	8012ce8 <GUI_DEVICE_CreateAndLink+0xc8>
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d42:	bf00      	nop
 8012d44:	2002afd0 	.word	0x2002afd0
 8012d48:	20000018 	.word	0x20000018
 8012d4c:	2002af82 	.word	0x2002af82

08012d50 <GUI_DEVICE_UnlinkTaskDevices>:
 8012d50:	2000      	movs	r0, #0
 8012d52:	4770      	bx	lr

08012d54 <GUI_DEVICE_LinkDevices>:
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d04d      	beq.n	8012df4 <GUI_DEVICE_LinkDevices+0xa0>
 8012d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5c:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8012dfc <GUI_DEVICE_LinkDevices+0xa8>
 8012d60:	4f25      	ldr	r7, [pc, #148]	; (8012df8 <GUI_DEVICE_LinkDevices+0xa4>)
 8012d62:	f89e 6000 	ldrb.w	r6, [lr]
 8012d66:	46bc      	mov	ip, r7
 8012d68:	e001      	b.n	8012d6e <GUI_DEVICE_LinkDevices+0x1a>
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	b33d      	cbz	r5, 8012dbe <GUI_DEVICE_LinkDevices+0x6a>
 8012d6e:	6984      	ldr	r4, [r0, #24]
 8012d70:	6805      	ldr	r5, [r0, #0]
 8012d72:	2c01      	cmp	r4, #1
 8012d74:	dcf9      	bgt.n	8012d6a <GUI_DEVICE_LinkDevices+0x16>
 8012d76:	42b4      	cmp	r4, r6
 8012d78:	db01      	blt.n	8012d7e <GUI_DEVICE_LinkDevices+0x2a>
 8012d7a:	1c66      	adds	r6, r4, #1
 8012d7c:	b2f6      	uxtb	r6, r6
 8012d7e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8012d82:	b90b      	cbnz	r3, 8012d88 <GUI_DEVICE_LinkDevices+0x34>
 8012d84:	e033      	b.n	8012dee <GUI_DEVICE_LinkDevices+0x9a>
 8012d86:	4613      	mov	r3, r2
 8012d88:	685a      	ldr	r2, [r3, #4]
 8012d8a:	2a00      	cmp	r2, #0
 8012d8c:	d1fb      	bne.n	8012d86 <GUI_DEVICE_LinkDevices+0x32>
 8012d8e:	68c2      	ldr	r2, [r0, #12]
 8012d90:	6811      	ldr	r1, [r2, #0]
 8012d92:	e002      	b.n	8012d9a <GUI_DEVICE_LinkDevices+0x46>
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d0e7      	beq.n	8012d6a <GUI_DEVICE_LinkDevices+0x16>
 8012d9a:	68da      	ldr	r2, [r3, #12]
 8012d9c:	6812      	ldr	r2, [r2, #0]
 8012d9e:	428a      	cmp	r2, r1
 8012da0:	dcf8      	bgt.n	8012d94 <GUI_DEVICE_LinkDevices+0x40>
 8012da2:	d010      	beq.n	8012dc6 <GUI_DEVICE_LinkDevices+0x72>
 8012da4:	685a      	ldr	r2, [r3, #4]
 8012da6:	b1a2      	cbz	r2, 8012dd2 <GUI_DEVICE_LinkDevices+0x7e>
 8012da8:	6010      	str	r0, [r2, #0]
 8012daa:	6042      	str	r2, [r0, #4]
 8012dac:	4298      	cmp	r0, r3
 8012dae:	bf14      	ite	ne
 8012db0:	461a      	movne	r2, r3
 8012db2:	2200      	moveq	r2, #0
 8012db4:	6058      	str	r0, [r3, #4]
 8012db6:	6002      	str	r2, [r0, #0]
 8012db8:	4628      	mov	r0, r5
 8012dba:	2d00      	cmp	r5, #0
 8012dbc:	d1d7      	bne.n	8012d6e <GUI_DEVICE_LinkDevices+0x1a>
 8012dbe:	f88e 6000 	strb.w	r6, [lr]
 8012dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc6:	8a82      	ldrh	r2, [r0, #20]
 8012dc8:	2a01      	cmp	r2, #1
 8012dca:	d00c      	beq.n	8012de6 <GUI_DEVICE_LinkDevices+0x92>
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	2a00      	cmp	r2, #0
 8012dd0:	d1ea      	bne.n	8012da8 <GUI_DEVICE_LinkDevices+0x54>
 8012dd2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8012dd6:	e7e9      	b.n	8012dac <GUI_DEVICE_LinkDevices+0x58>
 8012dd8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8012ddc:	4613      	mov	r3, r2
 8012dde:	f8d8 2000 	ldr.w	r2, [r8]
 8012de2:	428a      	cmp	r2, r1
 8012de4:	dbde      	blt.n	8012da4 <GUI_DEVICE_LinkDevices+0x50>
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	2a00      	cmp	r2, #0
 8012dea:	d1f5      	bne.n	8012dd8 <GUI_DEVICE_LinkDevices+0x84>
 8012dec:	e7da      	b.n	8012da4 <GUI_DEVICE_LinkDevices+0x50>
 8012dee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8012df2:	e7ba      	b.n	8012d6a <GUI_DEVICE_LinkDevices+0x16>
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	2002afd0 	.word	0x2002afd0
 8012dfc:	2002af82 	.word	0x2002af82

08012e00 <GUI_DispString.part.0>:
 8012e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e04:	4d4a      	ldr	r5, [pc, #296]	; (8012f30 <GUI_DispString.part.0+0x130>)
 8012e06:	b083      	sub	sp, #12
 8012e08:	4604      	mov	r4, r0
 8012e0a:	f003 fa2b 	bl	8016264 <GUI_Lock>
 8012e0e:	f00c fb2b 	bl	801f468 <GUI_GetFontDistY>
 8012e12:	682b      	ldr	r3, [r5, #0]
 8012e14:	4606      	mov	r6, r0
 8012e16:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 8012e1a:	f00c fb01 	bl	801f420 <GUI_GetYAdjust>
 8012e1e:	682b      	ldr	r3, [r5, #0]
 8012e20:	fa1f f980 	uxth.w	r9, r0
 8012e24:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012e26:	ebc9 0202 	rsb	r2, r9, r2
 8012e2a:	b212      	sxth	r2, r2
 8012e2c:	849a      	strh	r2, [r3, #36]	; 0x24
 8012e2e:	7821      	ldrb	r1, [r4, #0]
 8012e30:	2900      	cmp	r1, #0
 8012e32:	d04f      	beq.n	8012ed4 <GUI_DispString.part.0+0xd4>
 8012e34:	b2b6      	uxth	r6, r6
 8012e36:	462f      	mov	r7, r5
 8012e38:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	f00c fb97 	bl	801f570 <GUI__GetLineNumChars>
 8012e42:	4601      	mov	r1, r0
 8012e44:	4683      	mov	fp, r0
 8012e46:	4620      	mov	r0, r4
 8012e48:	f00c fbba 	bl	801f5c0 <GUI__GetLineDistX>
 8012e4c:	6829      	ldr	r1, [r5, #0]
 8012e4e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8012e50:	f003 0303 	and.w	r3, r3, #3
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d05a      	beq.n	8012f0e <GUI_DispString.part.0+0x10e>
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	d05c      	beq.n	8012f16 <GUI_DispString.part.0+0x116>
 8012e5c:	fa1f fa80 	uxth.w	sl, r0
 8012e60:	f04f 0e00 	mov.w	lr, #0
 8012e64:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8012e66:	f10a 3cff 	add.w	ip, sl, #4294967295
 8012e6a:	f9b1 2024 	ldrsh.w	r2, [r1, #36]	; 0x24
 8012e6e:	ebce 0303 	rsb	r3, lr, r3
 8012e72:	f8ad 2002 	strh.w	r2, [sp, #2]
 8012e76:	3a01      	subs	r2, #1
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	18b0      	adds	r0, r6, r2
 8012e7c:	466a      	mov	r2, sp
 8012e7e:	fa0f fe83 	sxth.w	lr, r3
 8012e82:	4463      	add	r3, ip
 8012e84:	f8ad 0006 	strh.w	r0, [sp, #6]
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f8a1 e022 	strh.w	lr, [r1, #34]	; 0x22
 8012e8e:	4659      	mov	r1, fp
 8012e90:	f8ad e000 	strh.w	lr, [sp]
 8012e94:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012e98:	f00c fbd2 	bl	801f640 <GUI__DispLine>
 8012e9c:	682b      	ldr	r3, [r5, #0]
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012ea4:	4659      	mov	r1, fp
 8012ea6:	849a      	strh	r2, [r3, #36]	; 0x24
 8012ea8:	f003 fb0a 	bl	80164c0 <GUI_UC__NumChars2NumBytes>
 8012eac:	5c23      	ldrb	r3, [r4, r0]
 8012eae:	4404      	add	r4, r0
 8012eb0:	2b0a      	cmp	r3, #10
 8012eb2:	d01b      	beq.n	8012eec <GUI_DispString.part.0+0xec>
 8012eb4:	2b0d      	cmp	r3, #13
 8012eb6:	d019      	beq.n	8012eec <GUI_DispString.part.0+0xec>
 8012eb8:	f8bd 0000 	ldrh.w	r0, [sp]
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	4482      	add	sl, r0
 8012ec0:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8012ec4:	7822      	ldrb	r2, [r4, #0]
 8012ec6:	b11a      	cbz	r2, 8012ed0 <GUI_DispString.part.0+0xd0>
 8012ec8:	7862      	ldrb	r2, [r4, #1]
 8012eca:	3401      	adds	r4, #1
 8012ecc:	2a00      	cmp	r2, #0
 8012ece:	d1b3      	bne.n	8012e38 <GUI_DispString.part.0+0x38>
 8012ed0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8012ed4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8012ed6:	4491      	add	r9, r2
 8012ed8:	f021 0203 	bic.w	r2, r1, #3
 8012edc:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
 8012ee0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012ee2:	f003 f9b5 	bl	8016250 <GUI_Unlock>
 8012ee6:	b003      	add	sp, #12
 8012ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eec:	682b      	ldr	r3, [r5, #0]
 8012eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8012ef0:	f002 0203 	and.w	r2, r2, #3
 8012ef4:	3a01      	subs	r2, #1
 8012ef6:	2a01      	cmp	r2, #1
 8012ef8:	d816      	bhi.n	8012f28 <GUI_DispString.part.0+0x128>
 8012efa:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 8012efe:	7822      	ldrb	r2, [r4, #0]
 8012f00:	2a0a      	cmp	r2, #10
 8012f02:	d1e0      	bne.n	8012ec6 <GUI_DispString.part.0+0xc6>
 8012f04:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012f06:	4432      	add	r2, r6
 8012f08:	849a      	strh	r2, [r3, #36]	; 0x24
 8012f0a:	7822      	ldrb	r2, [r4, #0]
 8012f0c:	e7db      	b.n	8012ec6 <GUI_DispString.part.0+0xc6>
 8012f0e:	fa1f fe80 	uxth.w	lr, r0
 8012f12:	46f2      	mov	sl, lr
 8012f14:	e7a6      	b.n	8012e64 <GUI_DispString.part.0+0x64>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	4603      	mov	r3, r0
 8012f1a:	fa1f fa80 	uxth.w	sl, r0
 8012f1e:	bfb8      	it	lt
 8012f20:	1c43      	addlt	r3, r0, #1
 8012f22:	f3c3 0e4f 	ubfx	lr, r3, #1, #16
 8012f26:	e79d      	b.n	8012e64 <GUI_DispString.part.0+0x64>
 8012f28:	8c1a      	ldrh	r2, [r3, #32]
 8012f2a:	845a      	strh	r2, [r3, #34]	; 0x22
 8012f2c:	e7e7      	b.n	8012efe <GUI_DispString.part.0+0xfe>
 8012f2e:	bf00      	nop
 8012f30:	20000018 	.word	0x20000018

08012f34 <GUI_DispStringAt>:
 8012f34:	b570      	push	{r4, r5, r6, lr}
 8012f36:	460e      	mov	r6, r1
 8012f38:	4615      	mov	r5, r2
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	f003 f992 	bl	8016264 <GUI_Lock>
 8012f40:	4b05      	ldr	r3, [pc, #20]	; (8012f58 <GUI_DispStringAt+0x24>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	845e      	strh	r6, [r3, #34]	; 0x22
 8012f46:	849d      	strh	r5, [r3, #36]	; 0x24
 8012f48:	b114      	cbz	r4, 8012f50 <GUI_DispStringAt+0x1c>
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f7ff ff58 	bl	8012e00 <GUI_DispString.part.0>
 8012f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f54:	f003 b97c 	b.w	8016250 <GUI_Unlock>
 8012f58:	20000018 	.word	0x20000018

08012f5c <GUI_DispStringHCenterAt>:
 8012f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f60:	4c0e      	ldr	r4, [pc, #56]	; (8012f9c <GUI_DispStringHCenterAt+0x40>)
 8012f62:	4605      	mov	r5, r0
 8012f64:	4688      	mov	r8, r1
 8012f66:	4617      	mov	r7, r2
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8012f6e:	f040 0002 	orr.w	r0, r0, #2
 8012f72:	f7ff fb9b 	bl	80126ac <GUI_SetTextAlign>
 8012f76:	4606      	mov	r6, r0
 8012f78:	f003 f974 	bl	8016264 <GUI_Lock>
 8012f7c:	6823      	ldr	r3, [r4, #0]
 8012f7e:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 8012f82:	849f      	strh	r7, [r3, #36]	; 0x24
 8012f84:	b115      	cbz	r5, 8012f8c <GUI_DispStringHCenterAt+0x30>
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7ff ff3a 	bl	8012e00 <GUI_DispString.part.0>
 8012f8c:	f003 f960 	bl	8016250 <GUI_Unlock>
 8012f90:	4630      	mov	r0, r6
 8012f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f96:	f7ff bb89 	b.w	80126ac <GUI_SetTextAlign>
 8012f9a:	bf00      	nop
 8012f9c:	20000018 	.word	0x20000018

08012fa0 <GUI_DrawGraph>:
 8012fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa4:	b085      	sub	sp, #20
 8012fa6:	461c      	mov	r4, r3
 8012fa8:	4616      	mov	r6, r2
 8012faa:	9003      	str	r0, [sp, #12]
 8012fac:	9101      	str	r1, [sp, #4]
 8012fae:	f003 f959 	bl	8016264 <GUI_Lock>
 8012fb2:	4b40      	ldr	r3, [pc, #256]	; (80130b4 <GUI_DrawGraph+0x114>)
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	6819      	ldr	r1, [r3, #0]
 8012fb8:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 8012fba:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8012fbc:	f00a fac4 	bl	801d548 <WM__InitIVRSearch>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d05f      	beq.n	8013084 <GUI_DrawGraph+0xe4>
 8012fc4:	eb07 0b06 	add.w	fp, r7, r6
 8012fc8:	eb05 0a04 	add.w	sl, r5, r4
 8012fcc:	4b39      	ldr	r3, [pc, #228]	; (80130b4 <GUI_DrawGraph+0x114>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	6959      	ldr	r1, [r3, #20]
 8012fd2:	2900      	cmp	r1, #0
 8012fd4:	d067      	beq.n	80130a6 <GUI_DrawGraph+0x106>
 8012fd6:	9801      	ldr	r0, [sp, #4]
 8012fd8:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012fdc:	4458      	add	r0, fp
 8012fde:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012fe2:	45ab      	cmp	fp, r5
 8012fe4:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8012fe8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012fec:	f100 31ff 	add.w	r1, r0, #4294967295
 8012ff0:	bfb4      	ite	lt
 8012ff2:	ebcb 0205 	rsblt	r2, fp, r5
 8012ff6:	2200      	movge	r2, #0
 8012ff8:	42b9      	cmp	r1, r7
 8012ffa:	dd52      	ble.n	80130a2 <GUI_DrawGraph+0x102>
 8012ffc:	ebcb 0707 	rsb	r7, fp, r7
 8013000:	3701      	adds	r7, #1
 8013002:	4297      	cmp	r7, r2
 8013004:	dd3a      	ble.n	801307c <GUI_DrawGraph+0xdc>
 8013006:	9803      	ldr	r0, [sp, #12]
 8013008:	1c51      	adds	r1, r2, #1
 801300a:	f930 e012 	ldrsh.w	lr, [r0, r2, lsl #1]
 801300e:	428f      	cmp	r7, r1
 8013010:	eb00 0642 	add.w	r6, r0, r2, lsl #1
 8013014:	44d6      	add	lr, sl
 8013016:	dd31      	ble.n	801307c <GUI_DrawGraph+0xdc>
 8013018:	f10b 0501 	add.w	r5, fp, #1
 801301c:	445f      	add	r7, fp
 801301e:	f8cd b008 	str.w	fp, [sp, #8]
 8013022:	469b      	mov	fp, r3
 8013024:	4415      	add	r5, r2
 8013026:	e005      	b.n	8013034 <GUI_DrawGraph+0x94>
 8013028:	4544      	cmp	r4, r8
 801302a:	da08      	bge.n	801303e <GUI_DrawGraph+0x9e>
 801302c:	3501      	adds	r5, #1
 801302e:	46a6      	mov	lr, r4
 8013030:	42af      	cmp	r7, r5
 8013032:	d021      	beq.n	8013078 <GUI_DrawGraph+0xd8>
 8013034:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
 8013038:	45c6      	cmp	lr, r8
 801303a:	4454      	add	r4, sl
 801303c:	dbf4      	blt.n	8013028 <GUI_DrawGraph+0x88>
 801303e:	45de      	cmp	lr, fp
 8013040:	dd01      	ble.n	8013046 <GUI_DrawGraph+0xa6>
 8013042:	455c      	cmp	r4, fp
 8013044:	dcf2      	bgt.n	801302c <GUI_DrawGraph+0x8c>
 8013046:	eb14 090e 	adds.w	r9, r4, lr
 801304a:	4671      	mov	r1, lr
 801304c:	f105 30ff 	add.w	r0, r5, #4294967295
 8013050:	4672      	mov	r2, lr
 8013052:	bf48      	it	mi
 8013054:	f109 0901 	addmi.w	r9, r9, #1
 8013058:	4574      	cmp	r4, lr
 801305a:	ea4f 0969 	mov.w	r9, r9, asr #1
 801305e:	db16      	blt.n	801308e <GUI_DrawGraph+0xee>
 8013060:	464a      	mov	r2, r9
 8013062:	f004 fa09 	bl	8017478 <LCD_DrawVLine>
 8013066:	4628      	mov	r0, r5
 8013068:	3501      	adds	r5, #1
 801306a:	4622      	mov	r2, r4
 801306c:	4649      	mov	r1, r9
 801306e:	f004 fa03 	bl	8017478 <LCD_DrawVLine>
 8013072:	42af      	cmp	r7, r5
 8013074:	46a6      	mov	lr, r4
 8013076:	d1dd      	bne.n	8013034 <GUI_DrawGraph+0x94>
 8013078:	f8dd b008 	ldr.w	fp, [sp, #8]
 801307c:	f00a f93a 	bl	801d2f4 <WM__GetNextIVR>
 8013080:	2800      	cmp	r0, #0
 8013082:	d1a3      	bne.n	8012fcc <GUI_DrawGraph+0x2c>
 8013084:	b005      	add	sp, #20
 8013086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308a:	f003 b8e1 	b.w	8016250 <GUI_Unlock>
 801308e:	4649      	mov	r1, r9
 8013090:	1e68      	subs	r0, r5, #1
 8013092:	f004 f9f1 	bl	8017478 <LCD_DrawVLine>
 8013096:	464a      	mov	r2, r9
 8013098:	4621      	mov	r1, r4
 801309a:	4628      	mov	r0, r5
 801309c:	f004 f9ec 	bl	8017478 <LCD_DrawVLine>
 80130a0:	e7c4      	b.n	801302c <GUI_DrawGraph+0x8c>
 80130a2:	9f01      	ldr	r7, [sp, #4]
 80130a4:	e7ad      	b.n	8013002 <GUI_DrawGraph+0x62>
 80130a6:	f04f 33ff 	mov.w	r3, #4294967295
 80130aa:	460a      	mov	r2, r1
 80130ac:	9f01      	ldr	r7, [sp, #4]
 80130ae:	4698      	mov	r8, r3
 80130b0:	e7a7      	b.n	8013002 <GUI_DrawGraph+0x62>
 80130b2:	bf00      	nop
 80130b4:	20000018 	.word	0x20000018

080130b8 <GUI_DrawHLine>:
 80130b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ba:	4f14      	ldr	r7, [pc, #80]	; (801310c <GUI_DrawHLine+0x54>)
 80130bc:	b083      	sub	sp, #12
 80130be:	4606      	mov	r6, r0
 80130c0:	460d      	mov	r5, r1
 80130c2:	4614      	mov	r4, r2
 80130c4:	f003 f8ce 	bl	8016264 <GUI_Lock>
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	4668      	mov	r0, sp
 80130cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80130ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130d0:	440e      	add	r6, r1
 80130d2:	4415      	add	r5, r2
 80130d4:	4414      	add	r4, r2
 80130d6:	b233      	sxth	r3, r6
 80130d8:	f8ad 5000 	strh.w	r5, [sp]
 80130dc:	f8ad 4004 	strh.w	r4, [sp, #4]
 80130e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80130e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80130e8:	f00a fa2e 	bl	801d548 <WM__InitIVRSearch>
 80130ec:	b150      	cbz	r0, 8013104 <GUI_DrawHLine+0x4c>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	4622      	mov	r2, r4
 80130f2:	4631      	mov	r1, r6
 80130f4:	4628      	mov	r0, r5
 80130f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4798      	blx	r3
 80130fc:	f00a f8fa 	bl	801d2f4 <WM__GetNextIVR>
 8013100:	2800      	cmp	r0, #0
 8013102:	d1f4      	bne.n	80130ee <GUI_DrawHLine+0x36>
 8013104:	f003 f8a4 	bl	8016250 <GUI_Unlock>
 8013108:	b003      	add	sp, #12
 801310a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801310c:	20000018 	.word	0x20000018

08013110 <GUI_DrawPie>:
 8013110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013114:	b082      	sub	sp, #8
 8013116:	4605      	mov	r5, r0
 8013118:	4698      	mov	r8, r3
 801311a:	460f      	mov	r7, r1
 801311c:	4614      	mov	r4, r2
 801311e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8013122:	f003 f89f 	bl	8016264 <GUI_Lock>
 8013126:	4b14      	ldr	r3, [pc, #80]	; (8013178 <GUI_DrawPie+0x68>)
 8013128:	2000      	movs	r0, #0
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801312e:	f8d3 a050 	ldr.w	sl, [r3, #80]	; 0x50
 8013132:	f00a fa09 	bl	801d548 <WM__InitIVRSearch>
 8013136:	b1c8      	cbz	r0, 801316c <GUI_DrawPie+0x5c>
 8013138:	4457      	add	r7, sl
 801313a:	442e      	add	r6, r5
 801313c:	fa5f fa84 	uxtb.w	sl, r4
 8013140:	0864      	lsrs	r4, r4, #1
 8013142:	f7ff f9ad 	bl	80124a0 <GUI_GetPenSize>
 8013146:	4605      	mov	r5, r0
 8013148:	4650      	mov	r0, sl
 801314a:	f7ff f9b5 	bl	80124b8 <GUI_SetPenSize>
 801314e:	4623      	mov	r3, r4
 8013150:	4622      	mov	r2, r4
 8013152:	4639      	mov	r1, r7
 8013154:	4630      	mov	r0, r6
 8013156:	e88d 0300 	stmia.w	sp, {r8, r9}
 801315a:	f00c f8d9 	bl	801f310 <GL_DrawArc>
 801315e:	4628      	mov	r0, r5
 8013160:	f7ff f9aa 	bl	80124b8 <GUI_SetPenSize>
 8013164:	f00a f8c6 	bl	801d2f4 <WM__GetNextIVR>
 8013168:	2800      	cmp	r0, #0
 801316a:	d1ea      	bne.n	8013142 <GUI_DrawPie+0x32>
 801316c:	b002      	add	sp, #8
 801316e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013172:	f003 b86d 	b.w	8016250 <GUI_Unlock>
 8013176:	bf00      	nop
 8013178:	20000018 	.word	0x20000018

0801317c <GL_DrawPoint>:
 801317c:	4b06      	ldr	r3, [pc, #24]	; (8013198 <GL_DrawPoint+0x1c>)
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	7e13      	ldrb	r3, [r2, #24]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d005      	beq.n	8013192 <GL_DrawPoint+0x16>
 8013186:	1e5a      	subs	r2, r3, #1
 8013188:	bf48      	it	mi
 801318a:	461a      	movmi	r2, r3
 801318c:	1052      	asrs	r2, r2, #1
 801318e:	f7fe bfb1 	b.w	80120f4 <GL_FillCircle>
 8013192:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	4718      	bx	r3
 8013198:	20000018 	.word	0x20000018

0801319c <GUI_DrawVLine>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	4606      	mov	r6, r0
 80131a2:	4614      	mov	r4, r2
 80131a4:	460d      	mov	r5, r1
 80131a6:	f003 f85d 	bl	8016264 <GUI_Lock>
 80131aa:	4b10      	ldr	r3, [pc, #64]	; (80131ec <GUI_DrawVLine+0x50>)
 80131ac:	4668      	mov	r0, sp
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80131b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80131b4:	441e      	add	r6, r3
 80131b6:	4415      	add	r5, r2
 80131b8:	4414      	add	r4, r2
 80131ba:	b233      	sxth	r3, r6
 80131bc:	f8ad 5002 	strh.w	r5, [sp, #2]
 80131c0:	f8ad 4006 	strh.w	r4, [sp, #6]
 80131c4:	f8ad 3000 	strh.w	r3, [sp]
 80131c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80131cc:	f00a f9bc 	bl	801d548 <WM__InitIVRSearch>
 80131d0:	b140      	cbz	r0, 80131e4 <GUI_DrawVLine+0x48>
 80131d2:	4622      	mov	r2, r4
 80131d4:	4629      	mov	r1, r5
 80131d6:	4630      	mov	r0, r6
 80131d8:	f004 f94e 	bl	8017478 <LCD_DrawVLine>
 80131dc:	f00a f88a 	bl	801d2f4 <WM__GetNextIVR>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d1f6      	bne.n	80131d2 <GUI_DrawVLine+0x36>
 80131e4:	f003 f834 	bl	8016250 <GUI_Unlock>
 80131e8:	b002      	add	sp, #8
 80131ea:	bd70      	pop	{r4, r5, r6, pc}
 80131ec:	20000018 	.word	0x20000018

080131f0 <GL_DrawLine1Ex>:
 80131f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f4:	1a16      	subs	r6, r2, r0
 80131f6:	1a5d      	subs	r5, r3, r1
 80131f8:	b085      	sub	sp, #20
 80131fa:	469e      	mov	lr, r3
 80131fc:	ea56 0305 	orrs.w	r3, r6, r5
 8013200:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8013204:	d079      	beq.n	80132fa <GL_DrawLine1Ex+0x10a>
 8013206:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 801320a:	4607      	mov	r7, r0
 801320c:	ea85 74e5 	eor.w	r4, r5, r5, asr #31
 8013210:	4689      	mov	r9, r1
 8013212:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 8013216:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
 801321a:	429c      	cmp	r4, r3
 801321c:	dc2f      	bgt.n	801327e <GL_DrawLine1Ex+0x8e>
 801321e:	461c      	mov	r4, r3
 8013220:	2300      	movs	r3, #0
 8013222:	42a6      	cmp	r6, r4
 8013224:	9301      	str	r3, [sp, #4]
 8013226:	d038      	beq.n	801329a <GL_DrawLine1Ex+0xaa>
 8013228:	4639      	mov	r1, r7
 801322a:	f04f 33ff 	mov.w	r3, #4294967295
 801322e:	426d      	negs	r5, r5
 8013230:	4617      	mov	r7, r2
 8013232:	4274      	negs	r4, r6
 8013234:	460a      	mov	r2, r1
 8013236:	46f1      	mov	r9, lr
 8013238:	9303      	str	r3, [sp, #12]
 801323a:	f8db 1000 	ldr.w	r1, [fp]
 801323e:	bb95      	cbnz	r5, 80132a6 <GL_DrawLine1Ex+0xb6>
 8013240:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8013550 <GL_DrawLine1Ex+0x360>
 8013244:	4608      	mov	r0, r1
 8013246:	9b01      	ldr	r3, [sp, #4]
 8013248:	f8d8 e000 	ldr.w	lr, [r8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 80d1 	beq.w	80133f4 <GL_DrawLine1Ex+0x204>
 8013252:	f89e 301a 	ldrb.w	r3, [lr, #26]
 8013256:	2b00      	cmp	r3, #0
 8013258:	f000 81c4 	beq.w	80135e4 <GL_DrawLine1Ex+0x3f4>
 801325c:	2c00      	cmp	r4, #0
 801325e:	f2c0 81c8 	blt.w	80135f2 <GL_DrawLine1Ex+0x402>
 8013262:	46aa      	mov	sl, r5
 8013264:	4eb6      	ldr	r6, [pc, #728]	; (8013540 <GL_DrawLine1Ex+0x350>)
 8013266:	4672      	mov	r2, lr
 8013268:	3b01      	subs	r3, #1
 801326a:	1c45      	adds	r5, r0, #1
 801326c:	2b03      	cmp	r3, #3
 801326e:	f200 8134 	bhi.w	80134da <GL_DrawLine1Ex+0x2ea>
 8013272:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013276:	014c      	.short	0x014c
 8013278:	01580141 	.word	0x01580141
 801327c:	0121      	.short	0x0121
 801327e:	463b      	mov	r3, r7
 8013280:	4630      	mov	r0, r6
 8013282:	462e      	mov	r6, r5
 8013284:	4611      	mov	r1, r2
 8013286:	464f      	mov	r7, r9
 8013288:	4699      	mov	r9, r3
 801328a:	42a6      	cmp	r6, r4
 801328c:	f04f 0301 	mov.w	r3, #1
 8013290:	4672      	mov	r2, lr
 8013292:	4605      	mov	r5, r0
 8013294:	468e      	mov	lr, r1
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	d1c6      	bne.n	8013228 <GL_DrawLine1Ex+0x38>
 801329a:	2301      	movs	r3, #1
 801329c:	f8db 1000 	ldr.w	r1, [fp]
 80132a0:	9303      	str	r3, [sp, #12]
 80132a2:	2d00      	cmp	r5, #0
 80132a4:	d0cc      	beq.n	8013240 <GL_DrawLine1Ex+0x50>
 80132a6:	2c00      	cmp	r4, #0
 80132a8:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8013550 <GL_DrawLine1Ex+0x360>
 80132ac:	4626      	mov	r6, r4
 80132ae:	f8d8 0000 	ldr.w	r0, [r8]
 80132b2:	bfb8      	it	lt
 80132b4:	1c66      	addlt	r6, r4, #1
 80132b6:	2d00      	cmp	r5, #0
 80132b8:	ea4f 0666 	mov.w	r6, r6, asr #1
 80132bc:	7e82      	ldrb	r2, [r0, #26]
 80132be:	bfb8      	it	lt
 80132c0:	4276      	neglt	r6, r6
 80132c2:	b9fa      	cbnz	r2, 8013304 <GL_DrawLine1Ex+0x114>
 80132c4:	2c00      	cmp	r4, #0
 80132c6:	db15      	blt.n	80132f4 <GL_DrawLine1Ex+0x104>
 80132c8:	9b01      	ldr	r3, [sp, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f000 8151 	beq.w	8013572 <GL_DrawLine1Ex+0x382>
 80132d0:	4692      	mov	sl, r2
 80132d2:	4603      	mov	r3, r0
 80132d4:	e001      	b.n	80132da <GL_DrawLine1Ex+0xea>
 80132d6:	f8d8 3000 	ldr.w	r3, [r8]
 80132da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80132dc:	eb0a 0107 	add.w	r1, sl, r7
 80132e0:	f10a 0a01 	add.w	sl, sl, #1
 80132e4:	685b      	ldr	r3, [r3, #4]
 80132e6:	fb96 f0f4 	sdiv	r0, r6, r4
 80132ea:	4448      	add	r0, r9
 80132ec:	442e      	add	r6, r5
 80132ee:	4798      	blx	r3
 80132f0:	4554      	cmp	r4, sl
 80132f2:	daf0      	bge.n	80132d6 <GL_DrawLine1Ex+0xe6>
 80132f4:	b005      	add	sp, #20
 80132f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fa:	b005      	add	sp, #20
 80132fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013300:	f7ff bf3c 	b.w	801317c <GL_DrawPoint>
 8013304:	1c5a      	adds	r2, r3, #1
 8013306:	f000 812c 	beq.w	8013562 <GL_DrawLine1Ex+0x372>
 801330a:	2c00      	cmp	r4, #0
 801330c:	db51      	blt.n	80133b2 <GL_DrawLine1Ex+0x1c2>
 801330e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013312:	f04f 0a00 	mov.w	sl, #0
 8013316:	46c1      	mov	r9, r8
 8013318:	4698      	mov	r8, r3
 801331a:	4441      	add	r1, r8
 801331c:	f8cb 1000 	str.w	r1, [fp]
 8013320:	7e82      	ldrb	r2, [r0, #26]
 8013322:	3a01      	subs	r2, #1
 8013324:	2a03      	cmp	r2, #3
 8013326:	d815      	bhi.n	8013354 <GL_DrawLine1Ex+0x164>
 8013328:	e8df f002 	tbb	[pc, r2]
 801332c:	022b4955 	.word	0x022b4955
 8013330:	4b84      	ldr	r3, [pc, #528]	; (8013544 <GL_DrawLine1Ex+0x354>)
 8013332:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8013336:	fb83 3201 	smull	r3, r2, r3, r1
 801333a:	ebce 02a2 	rsb	r2, lr, r2, asr #2
 801333e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013342:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 8013346:	2a0b      	cmp	r2, #11
 8013348:	dd12      	ble.n	8013370 <GL_DrawLine1Ex+0x180>
 801334a:	f022 0204 	bic.w	r2, r2, #4
 801334e:	3a10      	subs	r2, #16
 8013350:	2a01      	cmp	r2, #1
 8013352:	d90d      	bls.n	8013370 <GL_DrawLine1Ex+0x180>
 8013354:	9b02      	ldr	r3, [sp, #8]
 8013356:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8013358:	fb96 f1f4 	sdiv	r1, r6, r4
 801335c:	4419      	add	r1, r3
 801335e:	9b01      	ldr	r3, [sp, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	f040 80f7 	bne.w	8013554 <GL_DrawLine1Ex+0x364>
 8013366:	4638      	mov	r0, r7
 8013368:	6852      	ldr	r2, [r2, #4]
 801336a:	4790      	blx	r2
 801336c:	f8db 1000 	ldr.w	r1, [fp]
 8013370:	f10a 0a01 	add.w	sl, sl, #1
 8013374:	3701      	adds	r7, #1
 8013376:	442e      	add	r6, r5
 8013378:	4554      	cmp	r4, sl
 801337a:	db15      	blt.n	80133a8 <GL_DrawLine1Ex+0x1b8>
 801337c:	f8d9 0000 	ldr.w	r0, [r9]
 8013380:	e7cb      	b.n	801331a <GL_DrawLine1Ex+0x12a>
 8013382:	4b6f      	ldr	r3, [pc, #444]	; (8013540 <GL_DrawLine1Ex+0x350>)
 8013384:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8013388:	fb83 3201 	smull	r3, r2, r3, r1
 801338c:	ebce 02e2 	rsb	r2, lr, r2, asr #3
 8013390:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013394:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
 8013398:	2a0b      	cmp	r2, #11
 801339a:	dcd8      	bgt.n	801334e <GL_DrawLine1Ex+0x15e>
 801339c:	f10a 0a01 	add.w	sl, sl, #1
 80133a0:	3701      	adds	r7, #1
 80133a2:	442e      	add	r6, r5
 80133a4:	4554      	cmp	r4, sl
 80133a6:	dae9      	bge.n	801337c <GL_DrawLine1Ex+0x18c>
 80133a8:	9a03      	ldr	r2, [sp, #12]
 80133aa:	4643      	mov	r3, r8
 80133ac:	3201      	adds	r2, #1
 80133ae:	f000 80de 	beq.w	801356e <GL_DrawLine1Ex+0x37e>
 80133b2:	1acb      	subs	r3, r1, r3
 80133b4:	f8cb 3000 	str.w	r3, [fp]
 80133b8:	b005      	add	sp, #20
 80133ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133be:	4a62      	ldr	r2, [pc, #392]	; (8013548 <GL_DrawLine1Ex+0x358>)
 80133c0:	400a      	ands	r2, r1
 80133c2:	2a00      	cmp	r2, #0
 80133c4:	f2c0 80e7 	blt.w	8013596 <GL_DrawLine1Ex+0x3a6>
 80133c8:	2a01      	cmp	r2, #1
 80133ca:	bfcc      	ite	gt
 80133cc:	2200      	movgt	r2, #0
 80133ce:	2201      	movle	r2, #1
 80133d0:	2a00      	cmp	r2, #0
 80133d2:	d1cd      	bne.n	8013370 <GL_DrawLine1Ex+0x180>
 80133d4:	e7be      	b.n	8013354 <GL_DrawLine1Ex+0x164>
 80133d6:	f101 0e06 	add.w	lr, r1, #6
 80133da:	4a5c      	ldr	r2, [pc, #368]	; (801354c <GL_DrawLine1Ex+0x35c>)
 80133dc:	ea0e 0202 	and.w	r2, lr, r2
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	f2c0 80dd 	blt.w	80135a0 <GL_DrawLine1Ex+0x3b0>
 80133e6:	2a0b      	cmp	r2, #11
 80133e8:	bfcc      	ite	gt
 80133ea:	2200      	movgt	r2, #0
 80133ec:	2201      	movle	r2, #1
 80133ee:	2a00      	cmp	r2, #0
 80133f0:	d1be      	bne.n	8013370 <GL_DrawLine1Ex+0x180>
 80133f2:	e7af      	b.n	8013354 <GL_DrawLine1Ex+0x164>
 80133f4:	f89e 301a 	ldrb.w	r3, [lr, #26]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 80ea 	beq.w	80135d2 <GL_DrawLine1Ex+0x3e2>
 80133fe:	2c00      	cmp	r4, #0
 8013400:	f2c0 80f7 	blt.w	80135f2 <GL_DrawLine1Ex+0x402>
 8013404:	f8dd a004 	ldr.w	sl, [sp, #4]
 8013408:	4672      	mov	r2, lr
 801340a:	4e4e      	ldr	r6, [pc, #312]	; (8013544 <GL_DrawLine1Ex+0x354>)
 801340c:	3b01      	subs	r3, #1
 801340e:	1c45      	adds	r5, r0, #1
 8013410:	2b03      	cmp	r3, #3
 8013412:	d813      	bhi.n	801343c <GL_DrawLine1Ex+0x24c>
 8013414:	e8df f003 	tbb	[pc, r3]
 8013418:	02213743 	.word	0x02213743
 801341c:	fb86 3100 	smull	r3, r1, r6, r0
 8013420:	17c3      	asrs	r3, r0, #31
 8013422:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8013426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801342a:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 801342e:	2b0b      	cmp	r3, #11
 8013430:	dd0a      	ble.n	8013448 <GL_DrawLine1Ex+0x258>
 8013432:	f023 0304 	bic.w	r3, r3, #4
 8013436:	3b10      	subs	r3, #16
 8013438:	2b01      	cmp	r3, #1
 801343a:	d905      	bls.n	8013448 <GL_DrawLine1Ex+0x258>
 801343c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801343e:	4649      	mov	r1, r9
 8013440:	eb07 000a 	add.w	r0, r7, sl
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	4798      	blx	r3
 8013448:	f10a 0a01 	add.w	sl, sl, #1
 801344c:	4554      	cmp	r4, sl
 801344e:	db14      	blt.n	801347a <GL_DrawLine1Ex+0x28a>
 8013450:	f8d8 2000 	ldr.w	r2, [r8]
 8013454:	4628      	mov	r0, r5
 8013456:	7e93      	ldrb	r3, [r2, #26]
 8013458:	e7d8      	b.n	801340c <GL_DrawLine1Ex+0x21c>
 801345a:	4b39      	ldr	r3, [pc, #228]	; (8013540 <GL_DrawLine1Ex+0x350>)
 801345c:	fb83 3100 	smull	r3, r1, r3, r0
 8013460:	17c3      	asrs	r3, r0, #31
 8013462:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8013466:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801346a:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 801346e:	2b0b      	cmp	r3, #11
 8013470:	dce1      	bgt.n	8013436 <GL_DrawLine1Ex+0x246>
 8013472:	f10a 0a01 	add.w	sl, sl, #1
 8013476:	4554      	cmp	r4, sl
 8013478:	daea      	bge.n	8013450 <GL_DrawLine1Ex+0x260>
 801347a:	1e69      	subs	r1, r5, #1
 801347c:	f8cb 1000 	str.w	r1, [fp]
 8013480:	b005      	add	sp, #20
 8013482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013486:	4b30      	ldr	r3, [pc, #192]	; (8013548 <GL_DrawLine1Ex+0x358>)
 8013488:	4003      	ands	r3, r0
 801348a:	2b00      	cmp	r3, #0
 801348c:	f2c0 8097 	blt.w	80135be <GL_DrawLine1Ex+0x3ce>
 8013490:	2b01      	cmp	r3, #1
 8013492:	bfcc      	ite	gt
 8013494:	2300      	movgt	r3, #0
 8013496:	2301      	movle	r3, #1
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1d5      	bne.n	8013448 <GL_DrawLine1Ex+0x258>
 801349c:	e7ce      	b.n	801343c <GL_DrawLine1Ex+0x24c>
 801349e:	1d69      	adds	r1, r5, #5
 80134a0:	4b2a      	ldr	r3, [pc, #168]	; (801354c <GL_DrawLine1Ex+0x35c>)
 80134a2:	400b      	ands	r3, r1
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	f2c0 808f 	blt.w	80135c8 <GL_DrawLine1Ex+0x3d8>
 80134aa:	2b0b      	cmp	r3, #11
 80134ac:	bfcc      	ite	gt
 80134ae:	2300      	movgt	r3, #0
 80134b0:	2301      	movle	r3, #1
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d1c8      	bne.n	8013448 <GL_DrawLine1Ex+0x258>
 80134b6:	e7c1      	b.n	801343c <GL_DrawLine1Ex+0x24c>
 80134b8:	4b22      	ldr	r3, [pc, #136]	; (8013544 <GL_DrawLine1Ex+0x354>)
 80134ba:	fb83 3100 	smull	r3, r1, r3, r0
 80134be:	17c3      	asrs	r3, r0, #31
 80134c0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80134c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80134c8:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 80134cc:	2b0b      	cmp	r3, #11
 80134ce:	dd0a      	ble.n	80134e6 <GL_DrawLine1Ex+0x2f6>
 80134d0:	f023 0304 	bic.w	r3, r3, #4
 80134d4:	3b10      	subs	r3, #16
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d905      	bls.n	80134e6 <GL_DrawLine1Ex+0x2f6>
 80134da:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80134dc:	eb0a 0107 	add.w	r1, sl, r7
 80134e0:	4648      	mov	r0, r9
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	4798      	blx	r3
 80134e6:	f10a 0a01 	add.w	sl, sl, #1
 80134ea:	4554      	cmp	r4, sl
 80134ec:	dbc5      	blt.n	801347a <GL_DrawLine1Ex+0x28a>
 80134ee:	f8d8 2000 	ldr.w	r2, [r8]
 80134f2:	4628      	mov	r0, r5
 80134f4:	7e93      	ldrb	r3, [r2, #26]
 80134f6:	e6b7      	b.n	8013268 <GL_DrawLine1Ex+0x78>
 80134f8:	4b13      	ldr	r3, [pc, #76]	; (8013548 <GL_DrawLine1Ex+0x358>)
 80134fa:	4003      	ands	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	db54      	blt.n	80135aa <GL_DrawLine1Ex+0x3ba>
 8013500:	2b01      	cmp	r3, #1
 8013502:	bfcc      	ite	gt
 8013504:	2300      	movgt	r3, #0
 8013506:	2301      	movle	r3, #1
 8013508:	2b00      	cmp	r3, #0
 801350a:	d1ec      	bne.n	80134e6 <GL_DrawLine1Ex+0x2f6>
 801350c:	e7e5      	b.n	80134da <GL_DrawLine1Ex+0x2ea>
 801350e:	1d69      	adds	r1, r5, #5
 8013510:	4b0e      	ldr	r3, [pc, #56]	; (801354c <GL_DrawLine1Ex+0x35c>)
 8013512:	400b      	ands	r3, r1
 8013514:	2b00      	cmp	r3, #0
 8013516:	db4d      	blt.n	80135b4 <GL_DrawLine1Ex+0x3c4>
 8013518:	2b0b      	cmp	r3, #11
 801351a:	bfcc      	ite	gt
 801351c:	2300      	movgt	r3, #0
 801351e:	2301      	movle	r3, #1
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1e0      	bne.n	80134e6 <GL_DrawLine1Ex+0x2f6>
 8013524:	e7d9      	b.n	80134da <GL_DrawLine1Ex+0x2ea>
 8013526:	fb86 3100 	smull	r3, r1, r6, r0
 801352a:	17c3      	asrs	r3, r0, #31
 801352c:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8013530:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013534:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 8013538:	2b0b      	cmp	r3, #11
 801353a:	dccb      	bgt.n	80134d4 <GL_DrawLine1Ex+0x2e4>
 801353c:	e7d3      	b.n	80134e6 <GL_DrawLine1Ex+0x2f6>
 801353e:	bf00      	nop
 8013540:	66666667 	.word	0x66666667
 8013544:	2aaaaaab 	.word	0x2aaaaaab
 8013548:	80000003 	.word	0x80000003
 801354c:	8000000f 	.word	0x8000000f
 8013550:	20000018 	.word	0x20000018
 8013554:	4608      	mov	r0, r1
 8013556:	6852      	ldr	r2, [r2, #4]
 8013558:	4639      	mov	r1, r7
 801355a:	4790      	blx	r2
 801355c:	f8db 1000 	ldr.w	r1, [fp]
 8013560:	e706      	b.n	8013370 <GL_DrawLine1Ex+0x180>
 8013562:	4421      	add	r1, r4
 8013564:	2c00      	cmp	r4, #0
 8013566:	f8cb 1000 	str.w	r1, [fp]
 801356a:	f6bf aed0 	bge.w	801330e <GL_DrawLine1Ex+0x11e>
 801356e:	4421      	add	r1, r4
 8013570:	e71f      	b.n	80133b2 <GL_DrawLine1Ex+0x1c2>
 8013572:	469a      	mov	sl, r3
 8013574:	e001      	b.n	801357a <GL_DrawLine1Ex+0x38a>
 8013576:	f8d8 0000 	ldr.w	r0, [r8]
 801357a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801357c:	eb0a 0007 	add.w	r0, sl, r7
 8013580:	f10a 0a01 	add.w	sl, sl, #1
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	fb96 f1f4 	sdiv	r1, r6, r4
 801358a:	4449      	add	r1, r9
 801358c:	442e      	add	r6, r5
 801358e:	4798      	blx	r3
 8013590:	4554      	cmp	r4, sl
 8013592:	daf0      	bge.n	8013576 <GL_DrawLine1Ex+0x386>
 8013594:	e6ae      	b.n	80132f4 <GL_DrawLine1Ex+0x104>
 8013596:	3a01      	subs	r2, #1
 8013598:	f062 0203 	orn	r2, r2, #3
 801359c:	3201      	adds	r2, #1
 801359e:	e713      	b.n	80133c8 <GL_DrawLine1Ex+0x1d8>
 80135a0:	3a01      	subs	r2, #1
 80135a2:	f062 020f 	orn	r2, r2, #15
 80135a6:	3201      	adds	r2, #1
 80135a8:	e71d      	b.n	80133e6 <GL_DrawLine1Ex+0x1f6>
 80135aa:	3b01      	subs	r3, #1
 80135ac:	f063 0303 	orn	r3, r3, #3
 80135b0:	3301      	adds	r3, #1
 80135b2:	e7a5      	b.n	8013500 <GL_DrawLine1Ex+0x310>
 80135b4:	3b01      	subs	r3, #1
 80135b6:	f063 030f 	orn	r3, r3, #15
 80135ba:	3301      	adds	r3, #1
 80135bc:	e7ac      	b.n	8013518 <GL_DrawLine1Ex+0x328>
 80135be:	3b01      	subs	r3, #1
 80135c0:	f063 0303 	orn	r3, r3, #3
 80135c4:	3301      	adds	r3, #1
 80135c6:	e763      	b.n	8013490 <GL_DrawLine1Ex+0x2a0>
 80135c8:	3b01      	subs	r3, #1
 80135ca:	f063 030f 	orn	r3, r3, #15
 80135ce:	3301      	adds	r3, #1
 80135d0:	e76b      	b.n	80134aa <GL_DrawLine1Ex+0x2ba>
 80135d2:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 80135d6:	4649      	mov	r1, r9
 80135d8:	4638      	mov	r0, r7
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	b005      	add	sp, #20
 80135de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e2:	4718      	bx	r3
 80135e4:	4639      	mov	r1, r7
 80135e6:	4648      	mov	r0, r9
 80135e8:	b005      	add	sp, #20
 80135ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ee:	f003 bf43 	b.w	8017478 <LCD_DrawVLine>
 80135f2:	460d      	mov	r5, r1
 80135f4:	e741      	b.n	801347a <GL_DrawLine1Ex+0x28a>
 80135f6:	bf00      	nop

080135f8 <GL_DrawLine>:
 80135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fc:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80138a4 <GL_DrawLine+0x2ac>
 8013600:	b089      	sub	sp, #36	; 0x24
 8013602:	f04f 0c00 	mov.w	ip, #0
 8013606:	f8d9 4000 	ldr.w	r4, [r9]
 801360a:	f8cd c00c 	str.w	ip, [sp, #12]
 801360e:	7e24      	ldrb	r4, [r4, #24]
 8013610:	2c01      	cmp	r4, #1
 8013612:	f000 813b 	beq.w	801388c <GL_DrawLine+0x294>
 8013616:	461e      	mov	r6, r3
 8013618:	ebc2 0e00 	rsb	lr, r2, r0
 801361c:	1acb      	subs	r3, r1, r3
 801361e:	4615      	mov	r5, r2
 8013620:	4607      	mov	r7, r0
 8013622:	4688      	mov	r8, r1
 8013624:	ea5e 0203 	orrs.w	r2, lr, r3
 8013628:	d102      	bne.n	8013630 <GL_DrawLine+0x38>
 801362a:	b009      	add	sp, #36	; 0x24
 801362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013630:	f1be 0f00 	cmp.w	lr, #0
 8013634:	f104 34ff 	add.w	r4, r4, #4294967295
 8013638:	f2c0 8109 	blt.w	801384e <GL_DrawLine+0x256>
 801363c:	4660      	mov	r0, ip
 801363e:	2202      	movs	r2, #2
 8013640:	2b00      	cmp	r3, #0
 8013642:	f2c0 8101 	blt.w	8013848 <GL_DrawLine+0x250>
 8013646:	459e      	cmp	lr, r3
 8013648:	f2c0 80f4 	blt.w	8013834 <GL_DrawLine+0x23c>
 801364c:	ea4f 026e 	mov.w	r2, lr, asr #1
 8013650:	4993      	ldr	r1, [pc, #588]	; (80138a0 <GL_DrawLine+0x2a8>)
 8013652:	eb02 2383 	add.w	r3, r2, r3, lsl #10
 8013656:	fb93 f3fe 	sdiv	r3, r3, lr
 801365a:	119a      	asrs	r2, r3, #6
 801365c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8013660:	eb01 0c42 	add.w	ip, r1, r2, lsl #1
 8013664:	f1c3 0e10 	rsb	lr, r3, #16
 8013668:	f9bc c024 	ldrsh.w	ip, [ip, #36]	; 0x24
 801366c:	f1be 0f10 	cmp.w	lr, #16
 8013670:	fb0e fc0c 	mul.w	ip, lr, ip
 8013674:	d005      	beq.n	8013682 <GL_DrawLine+0x8a>
 8013676:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801367a:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 801367e:	fb03 cc02 	mla	ip, r3, r2, ip
 8013682:	f11c 0308 	adds.w	r3, ip, #8
 8013686:	bf48      	it	mi
 8013688:	f10c 0317 	addmi.w	r3, ip, #23
 801368c:	0742      	lsls	r2, r0, #29
 801368e:	ea4f 1323 	mov.w	r3, r3, asr #4
 8013692:	bf48      	it	mi
 8013694:	f5c3 6380 	rsbmi	r3, r3, #1024	; 0x400
 8013698:	07c2      	lsls	r2, r0, #31
 801369a:	bf48      	it	mi
 801369c:	f5c3 6300 	rsbmi	r3, r3, #2048	; 0x800
 80136a0:	0782      	lsls	r2, r0, #30
 80136a2:	bf48      	it	mi
 80136a4:	f5c3 5380 	rsbmi	r3, r3, #4096	; 0x1000
 80136a8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80136ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80136b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80136b4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80136b8:	f300 80b7 	bgt.w	801382a <GL_DrawLine+0x232>
 80136bc:	f04f 0c00 	mov.w	ip, #0
 80136c0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80136c4:	4876      	ldr	r0, [pc, #472]	; (80138a0 <GL_DrawLine+0x2a8>)
 80136c6:	bfc8      	it	gt
 80136c8:	f5c2 6200 	rsbgt	r2, r2, #2048	; 0x800
 80136cc:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
 80136d0:	1192      	asrs	r2, r2, #6
 80136d2:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 80136d6:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 80136da:	fa1f fe8e 	uxth.w	lr, lr
 80136de:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 80136e2:	fb0e fa0a 	mul.w	sl, lr, sl
 80136e6:	d008      	beq.n	80136fa <GL_DrawLine+0x102>
 80136e8:	2a10      	cmp	r2, #16
 80136ea:	d006      	beq.n	80136fa <GL_DrawLine+0x102>
 80136ec:	3201      	adds	r2, #1
 80136ee:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 80136f2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80136f6:	fb0e aa02 	mla	sl, lr, r2, sl
 80136fa:	f10a 0020 	add.w	r0, sl, #32
 80136fe:	0980      	lsrs	r0, r0, #6
 8013700:	f1bc 0f00 	cmp.w	ip, #0
 8013704:	d000      	beq.n	8013708 <GL_DrawLine+0x110>
 8013706:	4240      	negs	r0, r0
 8013708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801370c:	fb00 f004 	mul.w	r0, r0, r4
 8013710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013714:	f340 8095 	ble.w	8013842 <GL_DrawLine+0x24a>
 8013718:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801371c:	f04f 0e01 	mov.w	lr, #1
 8013720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013724:	f8df a178 	ldr.w	sl, [pc, #376]	; 80138a0 <GL_DrawLine+0x2a8>
 8013728:	bfc8      	it	gt
 801372a:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 801372e:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 8013732:	119a      	asrs	r2, r3, #6
 8013734:	f1cc 0c40 	rsb	ip, ip, #64	; 0x40
 8013738:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 801373c:	fa1f f18c 	uxth.w	r1, ip
 8013740:	2940      	cmp	r1, #64	; 0x40
 8013742:	fb01 f303 	mul.w	r3, r1, r3
 8013746:	d008      	beq.n	801375a <GL_DrawLine+0x162>
 8013748:	2a10      	cmp	r2, #16
 801374a:	d006      	beq.n	801375a <GL_DrawLine+0x162>
 801374c:	3201      	adds	r2, #1
 801374e:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 8013752:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 8013756:	fb01 3302 	mla	r3, r1, r2, r3
 801375a:	3320      	adds	r3, #32
 801375c:	099b      	lsrs	r3, r3, #6
 801375e:	f1be 0f00 	cmp.w	lr, #0
 8013762:	d000      	beq.n	8013766 <GL_DrawLine+0x16e>
 8013764:	425b      	negs	r3, r3
 8013766:	2800      	cmp	r0, #0
 8013768:	fb03 f404 	mul.w	r4, r3, r4
 801376c:	f2c0 8089 	blt.w	8013882 <GL_DrawLine+0x28a>
 8013770:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8013774:	1280      	asrs	r0, r0, #10
 8013776:	2c00      	cmp	r4, #0
 8013778:	f2c0 808d 	blt.w	8013896 <GL_DrawLine+0x29e>
 801377c:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8013780:	12a4      	asrs	r4, r4, #10
 8013782:	2800      	cmp	r0, #0
 8013784:	dd72      	ble.n	801386c <GL_DrawLine+0x274>
 8013786:	f100 0c01 	add.w	ip, r0, #1
 801378a:	1040      	asrs	r0, r0, #1
 801378c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8013790:	2c00      	cmp	r4, #0
 8013792:	dd61      	ble.n	8013858 <GL_DrawLine+0x260>
 8013794:	1c61      	adds	r1, r4, #1
 8013796:	1064      	asrs	r4, r4, #1
 8013798:	1049      	asrs	r1, r1, #1
 801379a:	fa1f fa8c 	uxth.w	sl, ip
 801379e:	2300      	movs	r3, #0
 80137a0:	fa1f fb87 	uxth.w	fp, r7
 80137a4:	b280      	uxth	r0, r0
 80137a6:	461a      	mov	r2, r3
 80137a8:	eb0b 0e0a 	add.w	lr, fp, sl
 80137ac:	fa1f fc85 	uxth.w	ip, r5
 80137b0:	b289      	uxth	r1, r1
 80137b2:	ebc0 0b0b 	rsb	fp, r0, fp
 80137b6:	b2a4      	uxth	r4, r4
 80137b8:	ebc0 000c 	rsb	r0, r0, ip
 80137bc:	f8ad e010 	strh.w	lr, [sp, #16]
 80137c0:	44d4      	add	ip, sl
 80137c2:	fa1f fe86 	uxth.w	lr, r6
 80137c6:	f8ad b014 	strh.w	fp, [sp, #20]
 80137ca:	fa1f fa88 	uxth.w	sl, r8
 80137ce:	f8ad 0018 	strh.w	r0, [sp, #24]
 80137d2:	a804      	add	r0, sp, #16
 80137d4:	f8ad c01c 	strh.w	ip, [sp, #28]
 80137d8:	eb0a 0b01 	add.w	fp, sl, r1
 80137dc:	ebc4 0a0a 	rsb	sl, r4, sl
 80137e0:	ebc4 040e 	rsb	r4, r4, lr
 80137e4:	448e      	add	lr, r1
 80137e6:	2104      	movs	r1, #4
 80137e8:	f8ad b012 	strh.w	fp, [sp, #18]
 80137ec:	f8ad 401a 	strh.w	r4, [sp, #26]
 80137f0:	f8ad a016 	strh.w	sl, [sp, #22]
 80137f4:	f8ad e01e 	strh.w	lr, [sp, #30]
 80137f8:	f000 fe5c 	bl	80144b4 <GL_FillPolygon>
 80137fc:	f8d9 3000 	ldr.w	r3, [r9]
 8013800:	4c28      	ldr	r4, [pc, #160]	; (80138a4 <GL_DrawLine+0x2ac>)
 8013802:	7e5b      	ldrb	r3, [r3, #25]
 8013804:	2b00      	cmp	r3, #0
 8013806:	f47f af10 	bne.w	801362a <GL_DrawLine+0x32>
 801380a:	4641      	mov	r1, r8
 801380c:	4638      	mov	r0, r7
 801380e:	f7ff fcb5 	bl	801317c <GL_DrawPoint>
 8013812:	6823      	ldr	r3, [r4, #0]
 8013814:	7e5b      	ldrb	r3, [r3, #25]
 8013816:	2b00      	cmp	r3, #0
 8013818:	f47f af07 	bne.w	801362a <GL_DrawLine+0x32>
 801381c:	4631      	mov	r1, r6
 801381e:	4628      	mov	r0, r5
 8013820:	f7ff fcac 	bl	801317c <GL_DrawPoint>
 8013824:	b009      	add	sp, #36	; 0x24
 8013826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 801382e:	f04f 0c01 	mov.w	ip, #1
 8013832:	e745      	b.n	80136c0 <GL_DrawLine+0xc8>
 8013834:	4672      	mov	r2, lr
 8013836:	f040 0004 	orr.w	r0, r0, #4
 801383a:	469e      	mov	lr, r3
 801383c:	b2c0      	uxtb	r0, r0
 801383e:	4613      	mov	r3, r2
 8013840:	e704      	b.n	801364c <GL_DrawLine+0x54>
 8013842:	f04f 0e00 	mov.w	lr, #0
 8013846:	e76b      	b.n	8013720 <GL_DrawLine+0x128>
 8013848:	425b      	negs	r3, r3
 801384a:	4610      	mov	r0, r2
 801384c:	e6fb      	b.n	8013646 <GL_DrawLine+0x4e>
 801384e:	f1ce 0e00 	rsb	lr, lr, #0
 8013852:	2203      	movs	r2, #3
 8013854:	2001      	movs	r0, #1
 8013856:	e6f3      	b.n	8013640 <GL_DrawLine+0x48>
 8013858:	4621      	mov	r1, r4
 801385a:	bfb8      	it	lt
 801385c:	1c61      	addlt	r1, r4, #1
 801385e:	1e63      	subs	r3, r4, #1
 8013860:	ea4f 0161 	mov.w	r1, r1, asr #1
 8013864:	bf48      	it	mi
 8013866:	4623      	movmi	r3, r4
 8013868:	105c      	asrs	r4, r3, #1
 801386a:	e796      	b.n	801379a <GL_DrawLine+0x1a2>
 801386c:	4684      	mov	ip, r0
 801386e:	bfb8      	it	lt
 8013870:	f100 0c01 	addlt.w	ip, r0, #1
 8013874:	1e43      	subs	r3, r0, #1
 8013876:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 801387a:	bf48      	it	mi
 801387c:	4603      	movmi	r3, r0
 801387e:	1058      	asrs	r0, r3, #1
 8013880:	e786      	b.n	8013790 <GL_DrawLine+0x198>
 8013882:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8013886:	1280      	asrs	r0, r0, #10
 8013888:	4240      	negs	r0, r0
 801388a:	e774      	b.n	8013776 <GL_DrawLine+0x17e>
 801388c:	ac03      	add	r4, sp, #12
 801388e:	9400      	str	r4, [sp, #0]
 8013890:	f7ff fcae 	bl	80131f0 <GL_DrawLine1Ex>
 8013894:	e6c9      	b.n	801362a <GL_DrawLine+0x32>
 8013896:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 801389a:	12a4      	asrs	r4, r4, #10
 801389c:	4264      	negs	r4, r4
 801389e:	e770      	b.n	8013782 <GL_DrawLine+0x18a>
 80138a0:	08023be8 	.word	0x08023be8
 80138a4:	20000018 	.word	0x20000018

080138a8 <GUI_DrawLine>:
 80138a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ac:	4eb6      	ldr	r6, [pc, #728]	; (8013b88 <GUI_DrawLine+0x2e0>)
 80138ae:	b08f      	sub	sp, #60	; 0x3c
 80138b0:	4680      	mov	r8, r0
 80138b2:	468a      	mov	sl, r1
 80138b4:	4617      	mov	r7, r2
 80138b6:	4699      	mov	r9, r3
 80138b8:	f002 fcd4 	bl	8016264 <GUI_Lock>
 80138bc:	6834      	ldr	r4, [r6, #0]
 80138be:	2000      	movs	r0, #0
 80138c0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80138c2:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80138c4:	f009 fe40 	bl	801d548 <WM__InitIVRSearch>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	f000 8121 	beq.w	8013b10 <GUI_DrawLine+0x268>
 80138ce:	eb04 0209 	add.w	r2, r4, r9
 80138d2:	eb04 030a 	add.w	r3, r4, sl
 80138d6:	eb05 0108 	add.w	r1, r5, r8
 80138da:	19e8      	adds	r0, r5, r7
 80138dc:	9303      	str	r3, [sp, #12]
 80138de:	1a9b      	subs	r3, r3, r2
 80138e0:	ebc0 0901 	rsb	r9, r0, r1
 80138e4:	9102      	str	r1, [sp, #8]
 80138e6:	9307      	str	r3, [sp, #28]
 80138e8:	4619      	mov	r1, r3
 80138ea:	425b      	negs	r3, r3
 80138ec:	9205      	str	r2, [sp, #20]
 80138ee:	9004      	str	r0, [sp, #16]
 80138f0:	ea49 0801 	orr.w	r8, r9, r1
 80138f4:	ea13 0321 	ands.w	r3, r3, r1, asr #32
 80138f8:	bf38      	it	cc
 80138fa:	460b      	movcc	r3, r1
 80138fc:	4fa3      	ldr	r7, [pc, #652]	; (8013b8c <GUI_DrawLine+0x2e4>)
 80138fe:	9306      	str	r3, [sp, #24]
 8013900:	e004      	b.n	801390c <GUI_DrawLine+0x64>
 8013902:	f009 fcf7 	bl	801d2f4 <WM__GetNextIVR>
 8013906:	2800      	cmp	r0, #0
 8013908:	f000 8102 	beq.w	8013b10 <GUI_DrawLine+0x268>
 801390c:	6832      	ldr	r2, [r6, #0]
 801390e:	2300      	movs	r3, #0
 8013910:	7e11      	ldrb	r1, [r2, #24]
 8013912:	9309      	str	r3, [sp, #36]	; 0x24
 8013914:	2901      	cmp	r1, #1
 8013916:	f000 812f 	beq.w	8013b78 <GUI_DrawLine+0x2d0>
 801391a:	f1b8 0f00 	cmp.w	r8, #0
 801391e:	d0f0      	beq.n	8013902 <GUI_DrawLine+0x5a>
 8013920:	f1b9 0f00 	cmp.w	r9, #0
 8013924:	f101 31ff 	add.w	r1, r1, #4294967295
 8013928:	f2c0 8121 	blt.w	8013b6e <GUI_DrawLine+0x2c6>
 801392c:	464c      	mov	r4, r9
 801392e:	2202      	movs	r2, #2
 8013930:	9807      	ldr	r0, [sp, #28]
 8013932:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 8013936:	bf28      	it	cs
 8013938:	4613      	movcs	r3, r2
 801393a:	9806      	ldr	r0, [sp, #24]
 801393c:	4284      	cmp	r4, r0
 801393e:	f280 80f0 	bge.w	8013b22 <GUI_DrawLine+0x27a>
 8013942:	f043 0304 	orr.w	r3, r3, #4
 8013946:	4622      	mov	r2, r4
 8013948:	4604      	mov	r4, r0
 801394a:	b2db      	uxtb	r3, r3
 801394c:	1060      	asrs	r0, r4, #1
 801394e:	eb00 2282 	add.w	r2, r0, r2, lsl #10
 8013952:	fb92 f2f4 	sdiv	r2, r2, r4
 8013956:	1194      	asrs	r4, r2, #6
 8013958:	f3c2 0283 	ubfx	r2, r2, #2, #4
 801395c:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8013960:	f1c2 0510 	rsb	r5, r2, #16
 8013964:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8013968:	2d10      	cmp	r5, #16
 801396a:	fb05 f000 	mul.w	r0, r5, r0
 801396e:	d006      	beq.n	801397e <GUI_DrawLine+0xd6>
 8013970:	4d86      	ldr	r5, [pc, #536]	; (8013b8c <GUI_DrawLine+0x2e4>)
 8013972:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8013976:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
 801397a:	fb02 0004 	mla	r0, r2, r4, r0
 801397e:	f110 0408 	adds.w	r4, r0, #8
 8013982:	bf48      	it	mi
 8013984:	f100 0417 	addmi.w	r4, r0, #23
 8013988:	0758      	lsls	r0, r3, #29
 801398a:	ea4f 1424 	mov.w	r4, r4, asr #4
 801398e:	bf48      	it	mi
 8013990:	f5c4 6480 	rsbmi	r4, r4, #1024	; 0x400
 8013994:	07da      	lsls	r2, r3, #31
 8013996:	bf48      	it	mi
 8013998:	f5c4 6400 	rsbmi	r4, r4, #2048	; 0x800
 801399c:	079b      	lsls	r3, r3, #30
 801399e:	bf48      	it	mi
 80139a0:	f5c4 5480 	rsbmi	r4, r4, #4096	; 0x1000
 80139a4:	f504 6300 	add.w	r3, r4, #2048	; 0x800
 80139a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80139ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80139b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139b4:	f340 80b3 	ble.w	8013b1e <GUI_DrawLine+0x276>
 80139b8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80139bc:	2201      	movs	r2, #1
 80139be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139c2:	bfc8      	it	gt
 80139c4:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 80139c8:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80139cc:	119b      	asrs	r3, r3, #6
 80139ce:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80139d2:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 80139d6:	b2ad      	uxth	r5, r5
 80139d8:	2d40      	cmp	r5, #64	; 0x40
 80139da:	fb05 f000 	mul.w	r0, r5, r0
 80139de:	d008      	beq.n	80139f2 <GUI_DrawLine+0x14a>
 80139e0:	2b10      	cmp	r3, #16
 80139e2:	d006      	beq.n	80139f2 <GUI_DrawLine+0x14a>
 80139e4:	3301      	adds	r3, #1
 80139e6:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80139ea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80139ee:	fb05 0003 	mla	r0, r5, r3, r0
 80139f2:	3020      	adds	r0, #32
 80139f4:	0980      	lsrs	r0, r0, #6
 80139f6:	b102      	cbz	r2, 80139fa <GUI_DrawLine+0x152>
 80139f8:	4240      	negs	r0, r0
 80139fa:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80139fe:	fb00 f001 	mul.w	r0, r0, r1
 8013a02:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8013a06:	f340 8088 	ble.w	8013b1a <GUI_DrawLine+0x272>
 8013a0a:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8013a14:	bfc8      	it	gt
 8013a16:	f5c4 6400 	rsbgt	r4, r4, #2048	; 0x800
 8013a1a:	f004 053f 	and.w	r5, r4, #63	; 0x3f
 8013a1e:	11a4      	asrs	r4, r4, #6
 8013a20:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8013a24:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8013a28:	b2ad      	uxth	r5, r5
 8013a2a:	2d40      	cmp	r5, #64	; 0x40
 8013a2c:	fb05 f303 	mul.w	r3, r5, r3
 8013a30:	d008      	beq.n	8013a44 <GUI_DrawLine+0x19c>
 8013a32:	2c10      	cmp	r4, #16
 8013a34:	d006      	beq.n	8013a44 <GUI_DrawLine+0x19c>
 8013a36:	3401      	adds	r4, #1
 8013a38:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8013a3c:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
 8013a40:	fb05 3304 	mla	r3, r5, r4, r3
 8013a44:	3320      	adds	r3, #32
 8013a46:	099b      	lsrs	r3, r3, #6
 8013a48:	b102      	cbz	r2, 8013a4c <GUI_DrawLine+0x1a4>
 8013a4a:	425b      	negs	r3, r3
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	fb03 f101 	mul.w	r1, r3, r1
 8013a52:	db7e      	blt.n	8013b52 <GUI_DrawLine+0x2aa>
 8013a54:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8013a5e:	f2c0 8081 	blt.w	8013b64 <GUI_DrawLine+0x2bc>
 8013a62:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8013a66:	1289      	asrs	r1, r1, #10
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	dd5c      	ble.n	8013b26 <GUI_DrawLine+0x27e>
 8013a6c:	1c45      	adds	r5, r0, #1
 8013a6e:	2900      	cmp	r1, #0
 8013a70:	ea4f 0060 	mov.w	r0, r0, asr #1
 8013a74:	ea4f 0565 	mov.w	r5, r5, asr #1
 8013a78:	dd61      	ble.n	8013b3e <GUI_DrawLine+0x296>
 8013a7a:	1c4c      	adds	r4, r1, #1
 8013a7c:	1049      	asrs	r1, r1, #1
 8013a7e:	1064      	asrs	r4, r4, #1
 8013a80:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8013a84:	b2ad      	uxth	r5, r5
 8013a86:	b280      	uxth	r0, r0
 8013a88:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8013a8c:	eb0a 0e05 	add.w	lr, sl, r5
 8013a90:	b289      	uxth	r1, r1
 8013a92:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8013a96:	ebc0 0a0a 	rsb	sl, r0, sl
 8013a9a:	b2a4      	uxth	r4, r4
 8013a9c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8013aa0:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	ebc0 000b 	rsb	r0, r0, fp
 8013aaa:	445d      	add	r5, fp
 8013aac:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 8013ab0:	eb0c 0b04 	add.w	fp, ip, r4
 8013ab4:	ebc1 0a0e 	rsb	sl, r1, lr
 8013ab8:	ebc1 0c0c 	rsb	ip, r1, ip
 8013abc:	44a6      	add	lr, r4
 8013abe:	461a      	mov	r2, r3
 8013ac0:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8013ac4:	2104      	movs	r1, #4
 8013ac6:	a80a      	add	r0, sp, #40	; 0x28
 8013ac8:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
 8013acc:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8013ad0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 8013ad4:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
 8013ad8:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
 8013adc:	f000 fcea 	bl	80144b4 <GL_FillPolygon>
 8013ae0:	6833      	ldr	r3, [r6, #0]
 8013ae2:	7e5b      	ldrb	r3, [r3, #25]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	f47f af0c 	bne.w	8013902 <GUI_DrawLine+0x5a>
 8013aea:	9903      	ldr	r1, [sp, #12]
 8013aec:	9802      	ldr	r0, [sp, #8]
 8013aee:	f7ff fb45 	bl	801317c <GL_DrawPoint>
 8013af2:	4b25      	ldr	r3, [pc, #148]	; (8013b88 <GUI_DrawLine+0x2e0>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	7e5b      	ldrb	r3, [r3, #25]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f47f af02 	bne.w	8013902 <GUI_DrawLine+0x5a>
 8013afe:	9905      	ldr	r1, [sp, #20]
 8013b00:	9804      	ldr	r0, [sp, #16]
 8013b02:	f7ff fb3b 	bl	801317c <GL_DrawPoint>
 8013b06:	f009 fbf5 	bl	801d2f4 <WM__GetNextIVR>
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	f47f aefe 	bne.w	801390c <GUI_DrawLine+0x64>
 8013b10:	f002 fb9e 	bl	8016250 <GUI_Unlock>
 8013b14:	b00f      	add	sp, #60	; 0x3c
 8013b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	e778      	b.n	8013a10 <GUI_DrawLine+0x168>
 8013b1e:	2200      	movs	r2, #0
 8013b20:	e74d      	b.n	80139be <GUI_DrawLine+0x116>
 8013b22:	4602      	mov	r2, r0
 8013b24:	e712      	b.n	801394c <GUI_DrawLine+0xa4>
 8013b26:	4605      	mov	r5, r0
 8013b28:	bfb8      	it	lt
 8013b2a:	1c45      	addlt	r5, r0, #1
 8013b2c:	1e43      	subs	r3, r0, #1
 8013b2e:	ea4f 0565 	mov.w	r5, r5, asr #1
 8013b32:	bf48      	it	mi
 8013b34:	4603      	movmi	r3, r0
 8013b36:	2900      	cmp	r1, #0
 8013b38:	ea4f 0063 	mov.w	r0, r3, asr #1
 8013b3c:	dc9d      	bgt.n	8013a7a <GUI_DrawLine+0x1d2>
 8013b3e:	460c      	mov	r4, r1
 8013b40:	bfb8      	it	lt
 8013b42:	1c4c      	addlt	r4, r1, #1
 8013b44:	1e4b      	subs	r3, r1, #1
 8013b46:	ea4f 0464 	mov.w	r4, r4, asr #1
 8013b4a:	bf48      	it	mi
 8013b4c:	460b      	movmi	r3, r1
 8013b4e:	1059      	asrs	r1, r3, #1
 8013b50:	e796      	b.n	8013a80 <GUI_DrawLine+0x1d8>
 8013b52:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8013b56:	2900      	cmp	r1, #0
 8013b58:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8013b5c:	f1c0 0000 	rsb	r0, r0, #0
 8013b60:	f6bf af7f 	bge.w	8013a62 <GUI_DrawLine+0x1ba>
 8013b64:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
 8013b68:	1289      	asrs	r1, r1, #10
 8013b6a:	4249      	negs	r1, r1
 8013b6c:	e77c      	b.n	8013a68 <GUI_DrawLine+0x1c0>
 8013b6e:	f1c9 0400 	rsb	r4, r9, #0
 8013b72:	2203      	movs	r2, #3
 8013b74:	2301      	movs	r3, #1
 8013b76:	e6db      	b.n	8013930 <GUI_DrawLine+0x88>
 8013b78:	a809      	add	r0, sp, #36	; 0x24
 8013b7a:	a903      	add	r1, sp, #12
 8013b7c:	c90e      	ldmia	r1, {r1, r2, r3}
 8013b7e:	9000      	str	r0, [sp, #0]
 8013b80:	9802      	ldr	r0, [sp, #8]
 8013b82:	f7ff fb35 	bl	80131f0 <GL_DrawLine1Ex>
 8013b86:	e6bc      	b.n	8013902 <GUI_DrawLine+0x5a>
 8013b88:	20000018 	.word	0x20000018
 8013b8c:	08023be8 	.word	0x08023be8

08013b90 <GUI_DrawRoundedRect>:
 8013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b94:	b091      	sub	sp, #68	; 0x44
 8013b96:	4681      	mov	r9, r0
 8013b98:	461e      	mov	r6, r3
 8013b9a:	460f      	mov	r7, r1
 8013b9c:	4690      	mov	r8, r2
 8013b9e:	f002 fb61 	bl	8016264 <GUI_Lock>
 8013ba2:	4b5c      	ldr	r3, [pc, #368]	; (8013d14 <GUI_DrawRoundedRect+0x184>)
 8013ba4:	a80e      	add	r0, sp, #56	; 0x38
 8013ba6:	681c      	ldr	r4, [r3, #0]
 8013ba8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013baa:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8013bac:	eb05 0309 	add.w	r3, r5, r9
 8013bb0:	eb05 0208 	add.w	r2, r5, r8
 8013bb4:	19e1      	adds	r1, r4, r7
 8013bb6:	4434      	add	r4, r6
 8013bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bba:	920c      	str	r2, [sp, #48]	; 0x30
 8013bbc:	9106      	str	r1, [sp, #24]
 8013bbe:	9409      	str	r4, [sp, #36]	; 0x24
 8013bc0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013bc4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8013bc8:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 8013bcc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8013bd0:	f009 fcba 	bl	801d548 <WM__InitIVRSearch>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	f000 8098 	beq.w	8013d0a <GUI_DrawRoundedRect+0x17a>
 8013bda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013bdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013bde:	9906      	ldr	r1, [sp, #24]
 8013be0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013be2:	1b03      	subs	r3, r0, r4
 8013be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013be6:	3301      	adds	r3, #1
 8013be8:	1a52      	subs	r2, r2, r1
 8013bea:	4429      	add	r1, r5
 8013bec:	930a      	str	r3, [sp, #40]	; 0x28
 8013bee:	006d      	lsls	r5, r5, #1
 8013bf0:	1c4b      	adds	r3, r1, #1
 8013bf2:	3201      	adds	r2, #1
 8013bf4:	9102      	str	r1, [sp, #8]
 8013bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8013bf8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013bfa:	9207      	str	r2, [sp, #28]
 8013bfc:	fb03 f303 	mul.w	r3, r3, r3
 8013c00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c02:	9508      	str	r5, [sp, #32]
 8013c04:	9305      	str	r3, [sp, #20]
 8013c06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013c08:	18e3      	adds	r3, r4, r3
 8013c0a:	9303      	str	r3, [sp, #12]
 8013c0c:	1a83      	subs	r3, r0, r2
 8013c0e:	9304      	str	r3, [sp, #16]
 8013c10:	9b07      	ldr	r3, [sp, #28]
 8013c12:	9a08      	ldr	r2, [sp, #32]
 8013c14:	4619      	mov	r1, r3
 8013c16:	4291      	cmp	r1, r2
 8013c18:	db73      	blt.n	8013d02 <GUI_DrawRoundedRect+0x172>
 8013c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	4291      	cmp	r1, r2
 8013c20:	db6f      	blt.n	8013d02 <GUI_DrawRoundedRect+0x172>
 8013c22:	9b06      	ldr	r3, [sp, #24]
 8013c24:	9a02      	ldr	r2, [sp, #8]
 8013c26:	4293      	cmp	r3, r2
 8013c28:	dc4b      	bgt.n	8013cc2 <GUI_DrawRoundedRect+0x132>
 8013c2a:	461d      	mov	r5, r3
 8013c2c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8013c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c30:	f04f 34ff 	mov.w	r4, #4294967295
 8013c34:	1b9b      	subs	r3, r3, r6
 8013c36:	9301      	str	r3, [sp, #4]
 8013c38:	e01a      	b.n	8013c70 <GUI_DrawRoundedRect+0xe0>
 8013c3a:	ebc4 0409 	rsb	r4, r4, r9
 8013c3e:	4642      	mov	r2, r8
 8013c40:	f003 fbf2 	bl	8017428 <LCD_DrawHLine>
 8013c44:	464a      	mov	r2, r9
 8013c46:	3401      	adds	r4, #1
 8013c48:	4629      	mov	r1, r5
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f003 fbec 	bl	8017428 <LCD_DrawHLine>
 8013c50:	4642      	mov	r2, r8
 8013c52:	4651      	mov	r1, sl
 8013c54:	4658      	mov	r0, fp
 8013c56:	f003 fbe7 	bl	8017428 <LCD_DrawHLine>
 8013c5a:	464a      	mov	r2, r9
 8013c5c:	4651      	mov	r1, sl
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f003 fbe2 	bl	8017428 <LCD_DrawHLine>
 8013c64:	3501      	adds	r5, #1
 8013c66:	9b02      	ldr	r3, [sp, #8]
 8013c68:	3e01      	subs	r6, #1
 8013c6a:	463c      	mov	r4, r7
 8013c6c:	429d      	cmp	r5, r3
 8013c6e:	dc2c      	bgt.n	8013cca <GUI_DrawRoundedRect+0x13a>
 8013c70:	9b05      	ldr	r3, [sp, #20]
 8013c72:	fb06 3016 	mls	r0, r6, r6, r3
 8013c76:	9b01      	ldr	r3, [sp, #4]
 8013c78:	eb03 0a06 	add.w	sl, r3, r6
 8013c7c:	f003 fa00 	bl	8017080 <GUI__sqrt32>
 8013c80:	9b03      	ldr	r3, [sp, #12]
 8013c82:	1b04      	subs	r4, r0, r4
 8013c84:	4607      	mov	r7, r0
 8013c86:	4629      	mov	r1, r5
 8013c88:	ebc0 0b03 	rsb	fp, r0, r3
 8013c8c:	2c01      	cmp	r4, #1
 8013c8e:	9b04      	ldr	r3, [sp, #16]
 8013c90:	eb0b 0804 	add.w	r8, fp, r4
 8013c94:	eb00 0903 	add.w	r9, r0, r3
 8013c98:	4658      	mov	r0, fp
 8013c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c9e:	dccc      	bgt.n	8013c3a <GUI_DrawRoundedRect+0xaa>
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	4658      	mov	r0, fp
 8013ca4:	f003 fb8e 	bl	80173c4 <LCD_DrawPixel>
 8013ca8:	4629      	mov	r1, r5
 8013caa:	4648      	mov	r0, r9
 8013cac:	f003 fb8a 	bl	80173c4 <LCD_DrawPixel>
 8013cb0:	4651      	mov	r1, sl
 8013cb2:	4658      	mov	r0, fp
 8013cb4:	f003 fb86 	bl	80173c4 <LCD_DrawPixel>
 8013cb8:	4651      	mov	r1, sl
 8013cba:	4648      	mov	r0, r9
 8013cbc:	f003 fb82 	bl	80173c4 <LCD_DrawPixel>
 8013cc0:	e7d0      	b.n	8013c64 <GUI_DrawRoundedRect+0xd4>
 8013cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013cc6:	1a9b      	subs	r3, r3, r2
 8013cc8:	9301      	str	r3, [sp, #4]
 8013cca:	9b03      	ldr	r3, [sp, #12]
 8013ccc:	9906      	ldr	r1, [sp, #24]
 8013cce:	1c5c      	adds	r4, r3, #1
 8013cd0:	9b04      	ldr	r3, [sp, #16]
 8013cd2:	1e5d      	subs	r5, r3, #1
 8013cd4:	9b01      	ldr	r3, [sp, #4]
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	462a      	mov	r2, r5
 8013cda:	f103 3bff 	add.w	fp, r3, #4294967295
 8013cde:	f003 fba3 	bl	8017428 <LCD_DrawHLine>
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	462a      	mov	r2, r5
 8013ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ce8:	f003 fb9e 	bl	8017428 <LCD_DrawHLine>
 8013cec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8013cee:	465a      	mov	r2, fp
 8013cf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	f003 fbc0 	bl	8017478 <LCD_DrawVLine>
 8013cf8:	465a      	mov	r2, fp
 8013cfa:	4621      	mov	r1, r4
 8013cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013cfe:	f003 fbbb 	bl	8017478 <LCD_DrawVLine>
 8013d02:	f009 faf7 	bl	801d2f4 <WM__GetNextIVR>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d182      	bne.n	8013c10 <GUI_DrawRoundedRect+0x80>
 8013d0a:	f002 faa1 	bl	8016250 <GUI_Unlock>
 8013d0e:	b011      	add	sp, #68	; 0x44
 8013d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d14:	20000018 	.word	0x20000018

08013d18 <_Color2Index>:
 8013d18:	4b02      	ldr	r3, [pc, #8]	; (8013d24 <_Color2Index+0xc>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4718      	bx	r3
 8013d24:	20000278 	.word	0x20000278

08013d28 <_Index2Color>:
 8013d28:	4b02      	ldr	r3, [pc, #8]	; (8013d34 <_Index2Color+0xc>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	691b      	ldr	r3, [r3, #16]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	4718      	bx	r3
 8013d34:	20000278 	.word	0x20000278

08013d38 <_GetIndexMask>:
 8013d38:	4b02      	ldr	r3, [pc, #8]	; (8013d44 <_GetIndexMask+0xc>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	691b      	ldr	r3, [r3, #16]
 8013d40:	689b      	ldr	r3, [r3, #8]
 8013d42:	4718      	bx	r3
 8013d44:	20000278 	.word	0x20000278

08013d48 <_DrawHLine>:
 8013d48:	6800      	ldr	r0, [r0, #0]
 8013d4a:	b130      	cbz	r0, 8013d5a <_DrawHLine+0x12>
 8013d4c:	b410      	push	{r4}
 8013d4e:	68c4      	ldr	r4, [r0, #12]
 8013d50:	68a4      	ldr	r4, [r4, #8]
 8013d52:	46a4      	mov	ip, r4
 8013d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d58:	4760      	bx	ip
 8013d5a:	4770      	bx	lr

08013d5c <_DrawVLine>:
 8013d5c:	6800      	ldr	r0, [r0, #0]
 8013d5e:	b130      	cbz	r0, 8013d6e <_DrawVLine+0x12>
 8013d60:	b410      	push	{r4}
 8013d62:	68c4      	ldr	r4, [r0, #12]
 8013d64:	68e4      	ldr	r4, [r4, #12]
 8013d66:	46a4      	mov	ip, r4
 8013d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d6c:	4760      	bx	ip
 8013d6e:	4770      	bx	lr

08013d70 <_FillRect>:
 8013d70:	6800      	ldr	r0, [r0, #0]
 8013d72:	b430      	push	{r4, r5}
 8013d74:	b120      	cbz	r0, 8013d80 <_FillRect+0x10>
 8013d76:	68c5      	ldr	r5, [r0, #12]
 8013d78:	692c      	ldr	r4, [r5, #16]
 8013d7a:	46a4      	mov	ip, r4
 8013d7c:	bc30      	pop	{r4, r5}
 8013d7e:	4760      	bx	ip
 8013d80:	bc30      	pop	{r4, r5}
 8013d82:	4770      	bx	lr

08013d84 <_GetPixelIndex>:
 8013d84:	6800      	ldr	r0, [r0, #0]
 8013d86:	b110      	cbz	r0, 8013d8e <_GetPixelIndex+0xa>
 8013d88:	68c3      	ldr	r3, [r0, #12]
 8013d8a:	695b      	ldr	r3, [r3, #20]
 8013d8c:	4718      	bx	r3
 8013d8e:	4770      	bx	lr

08013d90 <_SetPixelIndex>:
 8013d90:	6800      	ldr	r0, [r0, #0]
 8013d92:	b130      	cbz	r0, 8013da2 <_SetPixelIndex+0x12>
 8013d94:	b410      	push	{r4}
 8013d96:	68c4      	ldr	r4, [r0, #12]
 8013d98:	69a4      	ldr	r4, [r4, #24]
 8013d9a:	46a4      	mov	ip, r4
 8013d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013da0:	4760      	bx	ip
 8013da2:	4770      	bx	lr

08013da4 <_XorPixel>:
 8013da4:	6800      	ldr	r0, [r0, #0]
 8013da6:	b110      	cbz	r0, 8013dae <_XorPixel+0xa>
 8013da8:	68c3      	ldr	r3, [r0, #12]
 8013daa:	69db      	ldr	r3, [r3, #28]
 8013dac:	4718      	bx	r3
 8013dae:	4770      	bx	lr

08013db0 <_GetDevData>:
 8013db0:	6800      	ldr	r0, [r0, #0]
 8013db2:	b110      	cbz	r0, 8013dba <_GetDevData+0xa>
 8013db4:	68c3      	ldr	r3, [r0, #12]
 8013db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db8:	4718      	bx	r3
 8013dba:	4770      	bx	lr

08013dbc <_SetOrg>:
 8013dbc:	6800      	ldr	r0, [r0, #0]
 8013dbe:	b110      	cbz	r0, 8013dc6 <_SetOrg+0xa>
 8013dc0:	68c3      	ldr	r3, [r0, #12]
 8013dc2:	6a1b      	ldr	r3, [r3, #32]
 8013dc4:	4718      	bx	r3
 8013dc6:	4770      	bx	lr

08013dc8 <_GetDevFunc>:
 8013dc8:	6803      	ldr	r3, [r0, #0]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	6003      	str	r3, [r0, #0]
 8013dce:	b113      	cbz	r3, 8013dd6 <_GetDevFunc+0xe>
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd4:	4718      	bx	r3
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop

08013ddc <_GetDevProp>:
 8013ddc:	6800      	ldr	r0, [r0, #0]
 8013dde:	b110      	cbz	r0, 8013de6 <_GetDevProp+0xa>
 8013de0:	68c3      	ldr	r3, [r0, #12]
 8013de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013de4:	4718      	bx	r3
 8013de6:	4770      	bx	lr

08013de8 <_GetRect>:
 8013de8:	6800      	ldr	r0, [r0, #0]
 8013dea:	b110      	cbz	r0, 8013df2 <_GetRect+0xa>
 8013dec:	68c3      	ldr	r3, [r0, #12]
 8013dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013df0:	4718      	bx	r3
 8013df2:	4770      	bx	lr

08013df4 <_OnExit>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	4c05      	ldr	r4, [pc, #20]	; (8013e0c <_OnExit+0x18>)
 8013df8:	2500      	movs	r5, #0
 8013dfa:	6820      	ldr	r0, [r4, #0]
 8013dfc:	f7fd fc7a 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8013e00:	6860      	ldr	r0, [r4, #4]
 8013e02:	6025      	str	r5, [r4, #0]
 8013e04:	f7fd fc76 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8013e08:	6065      	str	r5, [r4, #4]
 8013e0a:	bd38      	pop	{r3, r4, r5, pc}
 8013e0c:	20000278 	.word	0x20000278

08013e10 <_Color2IndexBulk>:
 8013e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e14:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8013ea8 <_Color2IndexBulk+0x98>
 8013e18:	f8d8 5000 	ldr.w	r5, [r8]
 8013e1c:	682d      	ldr	r5, [r5, #0]
 8013e1e:	692d      	ldr	r5, [r5, #16]
 8013e20:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8013e24:	f1be 0f00 	cmp.w	lr, #0
 8013e28:	d003      	beq.n	8013e32 <_Color2IndexBulk+0x22>
 8013e2a:	46f4      	mov	ip, lr
 8013e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e30:	4760      	bx	ip
 8013e32:	2b02      	cmp	r3, #2
 8013e34:	4607      	mov	r7, r0
 8013e36:	4614      	mov	r4, r2
 8013e38:	d025      	beq.n	8013e86 <_Color2IndexBulk+0x76>
 8013e3a:	2b04      	cmp	r3, #4
 8013e3c:	d013      	beq.n	8013e66 <_Color2IndexBulk+0x56>
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d001      	beq.n	8013e46 <_Color2IndexBulk+0x36>
 8013e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e46:	1e4e      	subs	r6, r1, #1
 8013e48:	e003      	b.n	8013e52 <_Color2IndexBulk+0x42>
 8013e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	691d      	ldr	r5, [r3, #16]
 8013e52:	682b      	ldr	r3, [r5, #0]
 8013e54:	f857 0b04 	ldr.w	r0, [r7], #4
 8013e58:	4798      	blx	r3
 8013e5a:	3c01      	subs	r4, #1
 8013e5c:	f806 0f01 	strb.w	r0, [r6, #1]!
 8013e60:	d1f3      	bne.n	8013e4a <_Color2IndexBulk+0x3a>
 8013e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e66:	1f0e      	subs	r6, r1, #4
 8013e68:	e003      	b.n	8013e72 <_Color2IndexBulk+0x62>
 8013e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	691d      	ldr	r5, [r3, #16]
 8013e72:	682b      	ldr	r3, [r5, #0]
 8013e74:	f857 0b04 	ldr.w	r0, [r7], #4
 8013e78:	4798      	blx	r3
 8013e7a:	3c01      	subs	r4, #1
 8013e7c:	f846 0f04 	str.w	r0, [r6, #4]!
 8013e80:	d1f3      	bne.n	8013e6a <_Color2IndexBulk+0x5a>
 8013e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e86:	1e8e      	subs	r6, r1, #2
 8013e88:	e003      	b.n	8013e92 <_Color2IndexBulk+0x82>
 8013e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	691d      	ldr	r5, [r3, #16]
 8013e92:	682b      	ldr	r3, [r5, #0]
 8013e94:	f857 0b04 	ldr.w	r0, [r7], #4
 8013e98:	4798      	blx	r3
 8013e9a:	3c01      	subs	r4, #1
 8013e9c:	f826 0f02 	strh.w	r0, [r6, #2]!
 8013ea0:	d1f3      	bne.n	8013e8a <_Color2IndexBulk+0x7a>
 8013ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea6:	bf00      	nop
 8013ea8:	20000278 	.word	0x20000278

08013eac <_Index2ColorBulk>:
 8013eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8013f44 <_Index2ColorBulk+0x98>
 8013eb4:	f8d8 5000 	ldr.w	r5, [r8]
 8013eb8:	682d      	ldr	r5, [r5, #0]
 8013eba:	692d      	ldr	r5, [r5, #16]
 8013ebc:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8013ec0:	f1be 0f00 	cmp.w	lr, #0
 8013ec4:	d003      	beq.n	8013ece <_Index2ColorBulk+0x22>
 8013ec6:	46f4      	mov	ip, lr
 8013ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ecc:	4760      	bx	ip
 8013ece:	2b02      	cmp	r3, #2
 8013ed0:	4607      	mov	r7, r0
 8013ed2:	4614      	mov	r4, r2
 8013ed4:	d025      	beq.n	8013f22 <_Index2ColorBulk+0x76>
 8013ed6:	2b04      	cmp	r3, #4
 8013ed8:	d013      	beq.n	8013f02 <_Index2ColorBulk+0x56>
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d001      	beq.n	8013ee2 <_Index2ColorBulk+0x36>
 8013ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee2:	1f0e      	subs	r6, r1, #4
 8013ee4:	e003      	b.n	8013eee <_Index2ColorBulk+0x42>
 8013ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	691d      	ldr	r5, [r3, #16]
 8013eee:	686b      	ldr	r3, [r5, #4]
 8013ef0:	f817 0b01 	ldrb.w	r0, [r7], #1
 8013ef4:	4798      	blx	r3
 8013ef6:	3c01      	subs	r4, #1
 8013ef8:	f846 0f04 	str.w	r0, [r6, #4]!
 8013efc:	d1f3      	bne.n	8013ee6 <_Index2ColorBulk+0x3a>
 8013efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f02:	1f0e      	subs	r6, r1, #4
 8013f04:	e003      	b.n	8013f0e <_Index2ColorBulk+0x62>
 8013f06:	f8d8 3000 	ldr.w	r3, [r8]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	691d      	ldr	r5, [r3, #16]
 8013f0e:	686b      	ldr	r3, [r5, #4]
 8013f10:	f857 0b04 	ldr.w	r0, [r7], #4
 8013f14:	4798      	blx	r3
 8013f16:	3c01      	subs	r4, #1
 8013f18:	f846 0f04 	str.w	r0, [r6, #4]!
 8013f1c:	d1f3      	bne.n	8013f06 <_Index2ColorBulk+0x5a>
 8013f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f22:	1f0e      	subs	r6, r1, #4
 8013f24:	e003      	b.n	8013f2e <_Index2ColorBulk+0x82>
 8013f26:	f8d8 3000 	ldr.w	r3, [r8]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	691d      	ldr	r5, [r3, #16]
 8013f2e:	686b      	ldr	r3, [r5, #4]
 8013f30:	f837 0b02 	ldrh.w	r0, [r7], #2
 8013f34:	4798      	blx	r3
 8013f36:	3c01      	subs	r4, #1
 8013f38:	f846 0f04 	str.w	r0, [r6, #4]!
 8013f3c:	d1f3      	bne.n	8013f26 <_Index2ColorBulk+0x7a>
 8013f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f42:	bf00      	nop
 8013f44:	20000278 	.word	0x20000278

08013f48 <_SetBkColor>:
 8013f48:	4b20      	ldr	r3, [pc, #128]	; (8013fcc <_SetBkColor+0x84>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f50:	7c1b      	ldrb	r3, [r3, #16]
 8013f52:	4606      	mov	r6, r0
 8013f54:	4d1e      	ldr	r5, [pc, #120]	; (8013fd0 <_SetBkColor+0x88>)
 8013f56:	075b      	lsls	r3, r3, #29
 8013f58:	d42e      	bmi.n	8013fb8 <_SetBkColor+0x70>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	682c      	ldr	r4, [r5, #0]
 8013f5e:	6068      	str	r0, [r5, #4]
 8013f60:	0e24      	lsrs	r4, r4, #24
 8013f62:	4f1c      	ldr	r7, [pc, #112]	; (8013fd4 <_SetBkColor+0x8c>)
 8013f64:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8013f68:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	d01b      	beq.n	8013fa8 <_SetBkColor+0x60>
 8013f70:	b333      	cbz	r3, 8013fc0 <_SetBkColor+0x78>
 8013f72:	68ab      	ldr	r3, [r5, #8]
 8013f74:	2bfe      	cmp	r3, #254	; 0xfe
 8013f76:	d808      	bhi.n	8013f8a <_SetBkColor+0x42>
 8013f78:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013f7c:	4a16      	ldr	r2, [pc, #88]	; (8013fd8 <_SetBkColor+0x90>)
 8013f7e:	fb04 f303 	mul.w	r3, r4, r3
 8013f82:	fba2 2303 	umull	r2, r3, r2, r3
 8013f86:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8013f8a:	68eb      	ldr	r3, [r5, #12]
 8013f8c:	4d10      	ldr	r5, [pc, #64]	; (8013fd0 <_SetBkColor+0x88>)
 8013f8e:	42a3      	cmp	r3, r4
 8013f90:	d003      	beq.n	8013f9a <_SetBkColor+0x52>
 8013f92:	b2e0      	uxtb	r0, r4
 8013f94:	f000 ffe2 	bl	8014f5c <GUI_SetAlpha>
 8013f98:	60ec      	str	r4, [r5, #12]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa6:	4718      	bx	r3
 8013fa8:	2b01      	cmp	r3, #1
 8013faa:	d1e2      	bne.n	8013f72 <_SetBkColor+0x2a>
 8013fac:	6838      	ldr	r0, [r7, #0]
 8013fae:	f7fe fdc7 	bl	8012b40 <GUI_DEVICE_Unlink>
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	60bb      	str	r3, [r7, #8]
 8013fb6:	e7dc      	b.n	8013f72 <_SetBkColor+0x2a>
 8013fb8:	4604      	mov	r4, r0
 8013fba:	6028      	str	r0, [r5, #0]
 8013fbc:	686b      	ldr	r3, [r5, #4]
 8013fbe:	e7cf      	b.n	8013f60 <_SetBkColor+0x18>
 8013fc0:	6838      	ldr	r0, [r7, #0]
 8013fc2:	f7fe fddf 	bl	8012b84 <GUI_DEVICE_Link>
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	60bb      	str	r3, [r7, #8]
 8013fca:	e7d2      	b.n	8013f72 <_SetBkColor+0x2a>
 8013fcc:	20000018 	.word	0x20000018
 8013fd0:	2000001c 	.word	0x2000001c
 8013fd4:	20000278 	.word	0x20000278
 8013fd8:	80808081 	.word	0x80808081

08013fdc <_SetColor>:
 8013fdc:	4b20      	ldr	r3, [pc, #128]	; (8014060 <_SetColor+0x84>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	7c1b      	ldrb	r3, [r3, #16]
 8013fe6:	4606      	mov	r6, r0
 8013fe8:	4d1e      	ldr	r5, [pc, #120]	; (8014064 <_SetColor+0x88>)
 8013fea:	075b      	lsls	r3, r3, #29
 8013fec:	d42e      	bmi.n	801404c <_SetColor+0x70>
 8013fee:	4604      	mov	r4, r0
 8013ff0:	686b      	ldr	r3, [r5, #4]
 8013ff2:	6028      	str	r0, [r5, #0]
 8013ff4:	0e24      	lsrs	r4, r4, #24
 8013ff6:	4f1c      	ldr	r7, [pc, #112]	; (8014068 <_SetColor+0x8c>)
 8013ff8:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8013ffc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	d01b      	beq.n	801403c <_SetColor+0x60>
 8014004:	b333      	cbz	r3, 8014054 <_SetColor+0x78>
 8014006:	68ab      	ldr	r3, [r5, #8]
 8014008:	2bfe      	cmp	r3, #254	; 0xfe
 801400a:	d808      	bhi.n	801401e <_SetColor+0x42>
 801400c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014010:	4a16      	ldr	r2, [pc, #88]	; (801406c <_SetColor+0x90>)
 8014012:	fb04 f303 	mul.w	r3, r4, r3
 8014016:	fba2 2303 	umull	r2, r3, r2, r3
 801401a:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 801401e:	68eb      	ldr	r3, [r5, #12]
 8014020:	4d10      	ldr	r5, [pc, #64]	; (8014064 <_SetColor+0x88>)
 8014022:	42a3      	cmp	r3, r4
 8014024:	d003      	beq.n	801402e <_SetColor+0x52>
 8014026:	b2e0      	uxtb	r0, r4
 8014028:	f000 ff98 	bl	8014f5c <GUI_SetAlpha>
 801402c:	60ec      	str	r4, [r5, #12]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801403a:	4718      	bx	r3
 801403c:	2b01      	cmp	r3, #1
 801403e:	d1e2      	bne.n	8014006 <_SetColor+0x2a>
 8014040:	6838      	ldr	r0, [r7, #0]
 8014042:	f7fe fd7d 	bl	8012b40 <GUI_DEVICE_Unlink>
 8014046:	2300      	movs	r3, #0
 8014048:	60bb      	str	r3, [r7, #8]
 801404a:	e7dc      	b.n	8014006 <_SetColor+0x2a>
 801404c:	4603      	mov	r3, r0
 801404e:	6068      	str	r0, [r5, #4]
 8014050:	682c      	ldr	r4, [r5, #0]
 8014052:	e7cf      	b.n	8013ff4 <_SetColor+0x18>
 8014054:	6838      	ldr	r0, [r7, #0]
 8014056:	f7fe fd95 	bl	8012b84 <GUI_DEVICE_Link>
 801405a:	2301      	movs	r3, #1
 801405c:	60bb      	str	r3, [r7, #8]
 801405e:	e7d2      	b.n	8014006 <_SetColor+0x2a>
 8014060:	20000018 	.word	0x20000018
 8014064:	2000001c 	.word	0x2000001c
 8014068:	20000278 	.word	0x20000278
 801406c:	80808081 	.word	0x80808081

08014070 <_SetDrawMode>:
 8014070:	4b21      	ldr	r3, [pc, #132]	; (80140f8 <_SetDrawMode+0x88>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014078:	7c1b      	ldrb	r3, [r3, #16]
 801407a:	4606      	mov	r6, r0
 801407c:	4f1f      	ldr	r7, [pc, #124]	; (80140fc <_SetDrawMode+0x8c>)
 801407e:	4043      	eors	r3, r0
 8014080:	075b      	lsls	r3, r3, #29
 8014082:	d52f      	bpl.n	80140e4 <_SetDrawMode+0x74>
 8014084:	e897 0014 	ldmia.w	r7, {r2, r4}
 8014088:	4613      	mov	r3, r2
 801408a:	607a      	str	r2, [r7, #4]
 801408c:	603c      	str	r4, [r7, #0]
 801408e:	0e24      	lsrs	r4, r4, #24
 8014090:	4d1b      	ldr	r5, [pc, #108]	; (8014100 <_SetDrawMode+0x90>)
 8014092:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8014096:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 801409a:	68ab      	ldr	r3, [r5, #8]
 801409c:	d01a      	beq.n	80140d4 <_SetDrawMode+0x64>
 801409e:	b323      	cbz	r3, 80140ea <_SetDrawMode+0x7a>
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	2bfe      	cmp	r3, #254	; 0xfe
 80140a4:	d808      	bhi.n	80140b8 <_SetDrawMode+0x48>
 80140a6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80140aa:	4a16      	ldr	r2, [pc, #88]	; (8014104 <_SetDrawMode+0x94>)
 80140ac:	fb04 f303 	mul.w	r3, r4, r3
 80140b0:	fba2 2303 	umull	r2, r3, r2, r3
 80140b4:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	4f10      	ldr	r7, [pc, #64]	; (80140fc <_SetDrawMode+0x8c>)
 80140bc:	42a3      	cmp	r3, r4
 80140be:	d003      	beq.n	80140c8 <_SetDrawMode+0x58>
 80140c0:	b2e0      	uxtb	r0, r4
 80140c2:	f000 ff4b 	bl	8014f5c <GUI_SetAlpha>
 80140c6:	60fc      	str	r4, [r7, #12]
 80140c8:	68eb      	ldr	r3, [r5, #12]
 80140ca:	4630      	mov	r0, r6
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140d2:	4718      	bx	r3
 80140d4:	2b01      	cmp	r3, #1
 80140d6:	d1e3      	bne.n	80140a0 <_SetDrawMode+0x30>
 80140d8:	6828      	ldr	r0, [r5, #0]
 80140da:	f7fe fd31 	bl	8012b40 <GUI_DEVICE_Unlink>
 80140de:	2300      	movs	r3, #0
 80140e0:	60ab      	str	r3, [r5, #8]
 80140e2:	e7dd      	b.n	80140a0 <_SetDrawMode+0x30>
 80140e4:	683c      	ldr	r4, [r7, #0]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	e7d1      	b.n	801408e <_SetDrawMode+0x1e>
 80140ea:	6828      	ldr	r0, [r5, #0]
 80140ec:	f7fe fd4a 	bl	8012b84 <GUI_DEVICE_Link>
 80140f0:	2301      	movs	r3, #1
 80140f2:	60ab      	str	r3, [r5, #8]
 80140f4:	e7d4      	b.n	80140a0 <_SetDrawMode+0x30>
 80140f6:	bf00      	nop
 80140f8:	20000018 	.word	0x20000018
 80140fc:	2000001c 	.word	0x2000001c
 8014100:	20000278 	.word	0x20000278
 8014104:	80808081 	.word	0x80808081

08014108 <_DrawBitmap>:
 8014108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801410c:	b091      	sub	sp, #68	; 0x44
 801410e:	4607      	mov	r7, r0
 8014110:	4689      	mov	r9, r1
 8014112:	4698      	mov	r8, r3
 8014114:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8014116:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014118:	2c01      	cmp	r4, #1
 801411a:	9208      	str	r2, [sp, #32]
 801411c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014120:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8014124:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8014126:	9007      	str	r0, [sp, #28]
 8014128:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801412c:	d017      	beq.n	801415e <_DrawBitmap+0x56>
 801412e:	6838      	ldr	r0, [r7, #0]
 8014130:	2800      	cmp	r0, #0
 8014132:	f000 8120 	beq.w	8014376 <_DrawBitmap+0x26e>
 8014136:	9e07      	ldr	r6, [sp, #28]
 8014138:	4643      	mov	r3, r8
 801413a:	68c7      	ldr	r7, [r0, #12]
 801413c:	4649      	mov	r1, r9
 801413e:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8014142:	961e      	str	r6, [sp, #120]	; 0x78
 8014144:	951d      	str	r5, [sp, #116]	; 0x74
 8014146:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 801414a:	941b      	str	r4, [sp, #108]	; 0x6c
 801414c:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8014150:	687c      	ldr	r4, [r7, #4]
 8014152:	9a08      	ldr	r2, [sp, #32]
 8014154:	46a4      	mov	ip, r4
 8014156:	b011      	add	sp, #68	; 0x44
 8014158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	4760      	bx	ip
 801415e:	48a1      	ldr	r0, [pc, #644]	; (80143e4 <_DrawBitmap+0x2dc>)
 8014160:	6800      	ldr	r0, [r0, #0]
 8014162:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8014164:	4576      	cmp	r6, lr
 8014166:	9609      	str	r6, [sp, #36]	; 0x24
 8014168:	d1e1      	bne.n	801412e <_DrawBitmap+0x26>
 801416a:	7c06      	ldrb	r6, [r0, #16]
 801416c:	960b      	str	r6, [sp, #44]	; 0x2c
 801416e:	2e00      	cmp	r6, #0
 8014170:	d1dd      	bne.n	801412e <_DrawBitmap+0x26>
 8014172:	f04f 0e02 	mov.w	lr, #2
 8014176:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014178:	f880 e010 	strb.w	lr, [r0, #16]
 801417c:	6838      	ldr	r0, [r7, #0]
 801417e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8014182:	9605      	str	r6, [sp, #20]
 8014184:	9e07      	ldr	r6, [sp, #28]
 8014186:	9503      	str	r5, [sp, #12]
 8014188:	9604      	str	r6, [sp, #16]
 801418a:	f8cd b008 	str.w	fp, [sp, #8]
 801418e:	9401      	str	r4, [sp, #4]
 8014190:	f8cd a000 	str.w	sl, [sp]
 8014194:	f8de 6004 	ldr.w	r6, [lr, #4]
 8014198:	47b0      	blx	r6
 801419a:	4b92      	ldr	r3, [pc, #584]	; (80143e4 <_DrawBitmap+0x2dc>)
 801419c:	4a92      	ldr	r2, [pc, #584]	; (80143e8 <_DrawBitmap+0x2e0>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80141a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80141a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80141a8:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80141ac:	6816      	ldr	r6, [r2, #0]
 80141ae:	4b8e      	ldr	r3, [pc, #568]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141b0:	f8d0 e000 	ldr.w	lr, [r0]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	6006      	str	r6, [r0, #0]
 80141b8:	488b      	ldr	r0, [pc, #556]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141ba:	f8c2 e000 	str.w	lr, [r2]
 80141be:	f8c0 c000 	str.w	ip, [r0]
 80141c2:	eb01 6013 	add.w	r0, r1, r3, lsr #24
 80141c6:	4a88      	ldr	r2, [pc, #544]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141c8:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 80141cc:	6053      	str	r3, [r2, #4]
 80141ce:	4b87      	ldr	r3, [pc, #540]	; (80143ec <_DrawBitmap+0x2e4>)
 80141d0:	930a      	str	r3, [sp, #40]	; 0x28
 80141d2:	689b      	ldr	r3, [r3, #8]
 80141d4:	f000 80eb 	beq.w	80143ae <_DrawBitmap+0x2a6>
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f000 80fa 	beq.w	80143d2 <_DrawBitmap+0x2ca>
 80141de:	4b82      	ldr	r3, [pc, #520]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	2bfe      	cmp	r3, #254	; 0xfe
 80141e4:	d808      	bhi.n	80141f8 <_DrawBitmap+0xf0>
 80141e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80141ea:	4a81      	ldr	r2, [pc, #516]	; (80143f0 <_DrawBitmap+0x2e8>)
 80141ec:	fb01 f303 	mul.w	r3, r1, r3
 80141f0:	fba2 2303 	umull	r2, r3, r2, r3
 80141f4:	eba1 11d3 	sub.w	r1, r1, r3, lsr #7
 80141f8:	4b7b      	ldr	r3, [pc, #492]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141fa:	4c7b      	ldr	r4, [pc, #492]	; (80143e8 <_DrawBitmap+0x2e0>)
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	428b      	cmp	r3, r1
 8014200:	d005      	beq.n	801420e <_DrawBitmap+0x106>
 8014202:	b2c8      	uxtb	r0, r1
 8014204:	910b      	str	r1, [sp, #44]	; 0x2c
 8014206:	f000 fea9 	bl	8014f5c <GUI_SetAlpha>
 801420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801420c:	60e1      	str	r1, [r4, #12]
 801420e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014210:	6858      	ldr	r0, [r3, #4]
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	4619      	mov	r1, r3
 8014216:	4b75      	ldr	r3, [pc, #468]	; (80143ec <_DrawBitmap+0x2e4>)
 8014218:	2800      	cmp	r0, #0
 801421a:	d078      	beq.n	801430e <_DrawBitmap+0x206>
 801421c:	691f      	ldr	r7, [r3, #16]
 801421e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014222:	9e08      	ldr	r6, [sp, #32]
 8014224:	45bb      	cmp	fp, r7
 8014226:	9108      	str	r1, [sp, #32]
 8014228:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801422c:	bfd4      	ite	le
 801422e:	465f      	movle	r7, fp
 8014230:	ea4f 08c7 	movgt.w	r8, r7, lsl #3
 8014234:	1f3b      	subs	r3, r7, #4
 8014236:	1e7a      	subs	r2, r7, #1
 8014238:	089b      	lsrs	r3, r3, #2
 801423a:	920d      	str	r2, [sp, #52]	; 0x34
 801423c:	eb0a 0206 	add.w	r2, sl, r6
 8014240:	3301      	adds	r3, #1
 8014242:	920b      	str	r2, [sp, #44]	; 0x2c
 8014244:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014248:	930e      	str	r3, [sp, #56]	; 0x38
 801424a:	ebca 0307 	rsb	r3, sl, r7
 801424e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014250:	e043      	b.n	80142da <_DrawBitmap+0x1d2>
 8014252:	f1a5 0e04 	sub.w	lr, r5, #4
 8014256:	4601      	mov	r1, r0
 8014258:	2200      	movs	r2, #0
 801425a:	9c08      	ldr	r4, [sp, #32]
 801425c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8014260:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8014264:	3201      	adds	r2, #1
 8014266:	43db      	mvns	r3, r3
 8014268:	4562      	cmp	r2, ip
 801426a:	f841 3b04 	str.w	r3, [r1], #4
 801426e:	d3f7      	bcc.n	8014260 <_DrawBitmap+0x158>
 8014270:	45ba      	cmp	sl, r7
 8014272:	9408      	str	r4, [sp, #32]
 8014274:	eb05 020a 	add.w	r2, r5, sl
 8014278:	eb00 030a 	add.w	r3, r0, sl
 801427c:	d012      	beq.n	80142a4 <_DrawBitmap+0x19c>
 801427e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8014282:	7811      	ldrb	r1, [r2, #0]
 8014284:	f1be 0f01 	cmp.w	lr, #1
 8014288:	ea6f 0101 	mvn.w	r1, r1
 801428c:	7019      	strb	r1, [r3, #0]
 801428e:	d009      	beq.n	80142a4 <_DrawBitmap+0x19c>
 8014290:	7851      	ldrb	r1, [r2, #1]
 8014292:	f1be 0f02 	cmp.w	lr, #2
 8014296:	ea6f 0101 	mvn.w	r1, r1
 801429a:	7059      	strb	r1, [r3, #1]
 801429c:	d002      	beq.n	80142a4 <_DrawBitmap+0x19c>
 801429e:	7892      	ldrb	r2, [r2, #2]
 80142a0:	43d2      	mvns	r2, r2
 80142a2:	709a      	strb	r2, [r3, #2]
 80142a4:	9c08      	ldr	r4, [sp, #32]
 80142a6:	4643      	mov	r3, r8
 80142a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142aa:	445d      	add	r5, fp
 80142ac:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80142b0:	9907      	ldr	r1, [sp, #28]
 80142b2:	9003      	str	r0, [sp, #12]
 80142b4:	4620      	mov	r0, r4
 80142b6:	2401      	movs	r4, #1
 80142b8:	9205      	str	r2, [sp, #20]
 80142ba:	9104      	str	r1, [sp, #16]
 80142bc:	4632      	mov	r2, r6
 80142be:	f8cd b008 	str.w	fp, [sp, #8]
 80142c2:	9401      	str	r4, [sp, #4]
 80142c4:	9400      	str	r4, [sp, #0]
 80142c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142c8:	f8de 9004 	ldr.w	r9, [lr, #4]
 80142cc:	47c8      	blx	r9
 80142ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142d0:	429e      	cmp	r6, r3
 80142d2:	d01c      	beq.n	801430e <_DrawBitmap+0x206>
 80142d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142d6:	4426      	add	r6, r4
 80142d8:	6858      	ldr	r0, [r3, #4]
 80142da:	1d2b      	adds	r3, r5, #4
 80142dc:	1d02      	adds	r2, r0, #4
 80142de:	4295      	cmp	r5, r2
 80142e0:	bf38      	it	cc
 80142e2:	4298      	cmpcc	r0, r3
 80142e4:	bf2c      	ite	cs
 80142e6:	2301      	movcs	r3, #1
 80142e8:	2300      	movcc	r3, #0
 80142ea:	2f06      	cmp	r7, #6
 80142ec:	bf94      	ite	ls
 80142ee:	2300      	movls	r3, #0
 80142f0:	f003 0301 	andhi.w	r3, r3, #1
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d041      	beq.n	801437c <_DrawBitmap+0x274>
 80142f8:	ea40 0305 	orr.w	r3, r0, r5
 80142fc:	079b      	lsls	r3, r3, #30
 80142fe:	d13d      	bne.n	801437c <_DrawBitmap+0x274>
 8014300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014302:	2b02      	cmp	r3, #2
 8014304:	d8a5      	bhi.n	8014252 <_DrawBitmap+0x14a>
 8014306:	4603      	mov	r3, r0
 8014308:	462a      	mov	r2, r5
 801430a:	46be      	mov	lr, r7
 801430c:	e7b9      	b.n	8014282 <_DrawBitmap+0x17a>
 801430e:	4b35      	ldr	r3, [pc, #212]	; (80143e4 <_DrawBitmap+0x2dc>)
 8014310:	4a35      	ldr	r2, [pc, #212]	; (80143e8 <_DrawBitmap+0x2e0>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	6851      	ldr	r1, [r2, #4]
 8014316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014318:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801431a:	0e0c      	lsrs	r4, r1, #24
 801431c:	6810      	ldr	r0, [r2, #0]
 801431e:	4b32      	ldr	r3, [pc, #200]	; (80143e8 <_DrawBitmap+0x2e0>)
 8014320:	682e      	ldr	r6, [r5, #0]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	6028      	str	r0, [r5, #0]
 8014326:	4830      	ldr	r0, [pc, #192]	; (80143e8 <_DrawBitmap+0x2e0>)
 8014328:	6016      	str	r6, [r2, #0]
 801432a:	6001      	str	r1, [r0, #0]
 801432c:	eb04 6113 	add.w	r1, r4, r3, lsr #24
 8014330:	6043      	str	r3, [r0, #4]
 8014332:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 8014336:	d02f      	beq.n	8014398 <_DrawBitmap+0x290>
 8014338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801433a:	4d2c      	ldr	r5, [pc, #176]	; (80143ec <_DrawBitmap+0x2e4>)
 801433c:	689b      	ldr	r3, [r3, #8]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d041      	beq.n	80143c6 <_DrawBitmap+0x2be>
 8014342:	4b29      	ldr	r3, [pc, #164]	; (80143e8 <_DrawBitmap+0x2e0>)
 8014344:	689b      	ldr	r3, [r3, #8]
 8014346:	2bfe      	cmp	r3, #254	; 0xfe
 8014348:	d808      	bhi.n	801435c <_DrawBitmap+0x254>
 801434a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801434e:	4a28      	ldr	r2, [pc, #160]	; (80143f0 <_DrawBitmap+0x2e8>)
 8014350:	fb04 f303 	mul.w	r3, r4, r3
 8014354:	fba2 2303 	umull	r2, r3, r2, r3
 8014358:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 801435c:	4b22      	ldr	r3, [pc, #136]	; (80143e8 <_DrawBitmap+0x2e0>)
 801435e:	4d22      	ldr	r5, [pc, #136]	; (80143e8 <_DrawBitmap+0x2e0>)
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	42a3      	cmp	r3, r4
 8014364:	d003      	beq.n	801436e <_DrawBitmap+0x266>
 8014366:	b2e0      	uxtb	r0, r4
 8014368:	f000 fdf8 	bl	8014f5c <GUI_SetAlpha>
 801436c:	60ec      	str	r4, [r5, #12]
 801436e:	4b1d      	ldr	r3, [pc, #116]	; (80143e4 <_DrawBitmap+0x2dc>)
 8014370:	2200      	movs	r2, #0
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	741a      	strb	r2, [r3, #16]
 8014376:	b011      	add	sp, #68	; 0x44
 8014378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437c:	1e41      	subs	r1, r0, #1
 801437e:	eb05 0e07 	add.w	lr, r5, r7
 8014382:	462a      	mov	r2, r5
 8014384:	9c08      	ldr	r4, [sp, #32]
 8014386:	f812 3b01 	ldrb.w	r3, [r2], #1
 801438a:	43db      	mvns	r3, r3
 801438c:	4572      	cmp	r2, lr
 801438e:	f801 3f01 	strb.w	r3, [r1, #1]!
 8014392:	d1f8      	bne.n	8014386 <_DrawBitmap+0x27e>
 8014394:	9408      	str	r4, [sp, #32]
 8014396:	e785      	b.n	80142a4 <_DrawBitmap+0x19c>
 8014398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801439a:	4d14      	ldr	r5, [pc, #80]	; (80143ec <_DrawBitmap+0x2e4>)
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d1cf      	bne.n	8014342 <_DrawBitmap+0x23a>
 80143a2:	6828      	ldr	r0, [r5, #0]
 80143a4:	f7fe fbcc 	bl	8012b40 <GUI_DEVICE_Unlink>
 80143a8:	2300      	movs	r3, #0
 80143aa:	60ab      	str	r3, [r5, #8]
 80143ac:	e7c9      	b.n	8014342 <_DrawBitmap+0x23a>
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	f47f af15 	bne.w	80141de <_DrawBitmap+0xd6>
 80143b4:	4c0d      	ldr	r4, [pc, #52]	; (80143ec <_DrawBitmap+0x2e4>)
 80143b6:	910c      	str	r1, [sp, #48]	; 0x30
 80143b8:	6820      	ldr	r0, [r4, #0]
 80143ba:	f7fe fbc1 	bl	8012b40 <GUI_DEVICE_Unlink>
 80143be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80143c2:	60a2      	str	r2, [r4, #8]
 80143c4:	e70b      	b.n	80141de <_DrawBitmap+0xd6>
 80143c6:	6828      	ldr	r0, [r5, #0]
 80143c8:	f7fe fbdc 	bl	8012b84 <GUI_DEVICE_Link>
 80143cc:	2301      	movs	r3, #1
 80143ce:	60ab      	str	r3, [r5, #8]
 80143d0:	e7b7      	b.n	8014342 <_DrawBitmap+0x23a>
 80143d2:	4e06      	ldr	r6, [pc, #24]	; (80143ec <_DrawBitmap+0x2e4>)
 80143d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80143d6:	6830      	ldr	r0, [r6, #0]
 80143d8:	f7fe fbd4 	bl	8012b84 <GUI_DEVICE_Link>
 80143dc:	60b4      	str	r4, [r6, #8]
 80143de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80143e0:	e6fd      	b.n	80141de <_DrawBitmap+0xd6>
 80143e2:	bf00      	nop
 80143e4:	20000018 	.word	0x20000018
 80143e8:	2000001c 	.word	0x2000001c
 80143ec:	20000278 	.word	0x20000278
 80143f0:	80808081 	.word	0x80808081

080143f4 <GUI_EnableAlpha>:
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f6:	4c27      	ldr	r4, [pc, #156]	; (8014494 <GUI_EnableAlpha+0xa0>)
 80143f8:	4606      	mov	r6, r0
 80143fa:	f001 ff33 	bl	8016264 <GUI_Lock>
 80143fe:	6825      	ldr	r5, [r4, #0]
 8014400:	b345      	cbz	r5, 8014454 <GUI_EnableAlpha+0x60>
 8014402:	b13e      	cbz	r6, 8014414 <GUI_EnableAlpha+0x20>
 8014404:	68e4      	ldr	r4, [r4, #12]
 8014406:	4b23      	ldr	r3, [pc, #140]	; (8014494 <GUI_EnableAlpha+0xa0>)
 8014408:	b1bc      	cbz	r4, 801443a <GUI_EnableAlpha+0x46>
 801440a:	2401      	movs	r4, #1
 801440c:	f001 ff20 	bl	8016250 <GUI_Unlock>
 8014410:	4620      	mov	r0, r4
 8014412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014414:	68e3      	ldr	r3, [r4, #12]
 8014416:	4a1f      	ldr	r2, [pc, #124]	; (8014494 <GUI_EnableAlpha+0xa0>)
 8014418:	b153      	cbz	r3, 8014430 <GUI_EnableAlpha+0x3c>
 801441a:	491f      	ldr	r1, [pc, #124]	; (8014498 <GUI_EnableAlpha+0xa4>)
 801441c:	2401      	movs	r4, #1
 801441e:	7f10      	ldrb	r0, [r2, #28]
 8014420:	60d6      	str	r6, [r2, #12]
 8014422:	600b      	str	r3, [r1, #0]
 8014424:	f000 fd9a 	bl	8014f5c <GUI_SetAlpha>
 8014428:	f001 ff12 	bl	8016250 <GUI_Unlock>
 801442c:	4620      	mov	r0, r4
 801442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014430:	4634      	mov	r4, r6
 8014432:	f001 ff0d 	bl	8016250 <GUI_Unlock>
 8014436:	4620      	mov	r0, r4
 8014438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801443a:	4917      	ldr	r1, [pc, #92]	; (8014498 <GUI_EnableAlpha+0xa4>)
 801443c:	4817      	ldr	r0, [pc, #92]	; (801449c <GUI_EnableAlpha+0xa8>)
 801443e:	4a18      	ldr	r2, [pc, #96]	; (80144a0 <GUI_EnableAlpha+0xac>)
 8014440:	680f      	ldr	r7, [r1, #0]
 8014442:	6805      	ldr	r5, [r0, #0]
 8014444:	4e17      	ldr	r6, [pc, #92]	; (80144a4 <GUI_EnableAlpha+0xb0>)
 8014446:	6810      	ldr	r0, [r2, #0]
 8014448:	4a17      	ldr	r2, [pc, #92]	; (80144a8 <GUI_EnableAlpha+0xb4>)
 801444a:	60df      	str	r7, [r3, #12]
 801444c:	600e      	str	r6, [r1, #0]
 801444e:	6015      	str	r5, [r2, #0]
 8014450:	6050      	str	r0, [r2, #4]
 8014452:	e7db      	b.n	801440c <GUI_EnableAlpha+0x18>
 8014454:	4b15      	ldr	r3, [pc, #84]	; (80144ac <GUI_EnableAlpha+0xb8>)
 8014456:	4620      	mov	r0, r4
 8014458:	f840 3f14 	str.w	r3, [r0, #20]!
 801445c:	f7fe faec 	bl	8012a38 <GUI__RegisterExit>
 8014460:	2001      	movs	r0, #1
 8014462:	f000 fd7b 	bl	8014f5c <GUI_SetAlpha>
 8014466:	4603      	mov	r3, r0
 8014468:	b2c0      	uxtb	r0, r0
 801446a:	61e3      	str	r3, [r4, #28]
 801446c:	f000 fd76 	bl	8014f5c <GUI_SetAlpha>
 8014470:	490f      	ldr	r1, [pc, #60]	; (80144b0 <GUI_EnableAlpha+0xbc>)
 8014472:	462b      	mov	r3, r5
 8014474:	462a      	mov	r2, r5
 8014476:	f101 0018 	add.w	r0, r1, #24
 801447a:	f7fe fb33 	bl	8012ae4 <GUI_DEVICE_Create>
 801447e:	6020      	str	r0, [r4, #0]
 8014480:	f003 fe1c 	bl	80180bc <LCD_GetVXSizeMax>
 8014484:	3007      	adds	r0, #7
 8014486:	08c3      	lsrs	r3, r0, #3
 8014488:	4618      	mov	r0, r3
 801448a:	6123      	str	r3, [r4, #16]
 801448c:	f7fd f93c 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8014490:	6060      	str	r0, [r4, #4]
 8014492:	e7b6      	b.n	8014402 <GUI_EnableAlpha+0xe>
 8014494:	20000278 	.word	0x20000278
 8014498:	20000054 	.word	0x20000054
 801449c:	20000010 	.word	0x20000010
 80144a0:	20000014 	.word	0x20000014
 80144a4:	08023c7c 	.word	0x08023c7c
 80144a8:	2000001c 	.word	0x2000001c
 80144ac:	08013df5 	.word	0x08013df5
 80144b0:	08023c30 	.word	0x08023c30

080144b4 <GL_FillPolygon>:
 80144b4:	2900      	cmp	r1, #0
 80144b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ba:	b087      	sub	sp, #28
 80144bc:	f340 82e4 	ble.w	8014a88 <GL_FillPolygon+0x5d4>
 80144c0:	4c1e      	ldr	r4, [pc, #120]	; (801453c <GL_FillPolygon+0x88>)
 80144c2:	4605      	mov	r5, r0
 80144c4:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
 80144c8:	4627      	mov	r7, r4
 80144ca:	f643 74ff 	movw	r4, #16383	; 0x3fff
 80144ce:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 80144d2:	3504      	adds	r5, #4
 80144d4:	42b4      	cmp	r4, r6
 80144d6:	bfa8      	it	ge
 80144d8:	4634      	movge	r4, r6
 80144da:	42b7      	cmp	r7, r6
 80144dc:	bfb8      	it	lt
 80144de:	4637      	movlt	r7, r6
 80144e0:	45ae      	cmp	lr, r5
 80144e2:	d1f4      	bne.n	80144ce <GL_FillPolygon+0x1a>
 80144e4:	9704      	str	r7, [sp, #16]
 80144e6:	4d16      	ldr	r5, [pc, #88]	; (8014540 <GL_FillPolygon+0x8c>)
 80144e8:	682d      	ldr	r5, [r5, #0]
 80144ea:	696d      	ldr	r5, [r5, #20]
 80144ec:	b175      	cbz	r5, 801450c <GL_FillPolygon+0x58>
 80144ee:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80144f2:	9f04      	ldr	r7, [sp, #16]
 80144f4:	1af6      	subs	r6, r6, r3
 80144f6:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 80144fa:	42b7      	cmp	r7, r6
 80144fc:	eba5 0503 	sub.w	r5, r5, r3
 8014500:	bfa8      	it	ge
 8014502:	4637      	movge	r7, r6
 8014504:	42ac      	cmp	r4, r5
 8014506:	bfb8      	it	lt
 8014508:	462c      	movlt	r4, r5
 801450a:	9704      	str	r7, [sp, #16]
 801450c:	9d04      	ldr	r5, [sp, #16]
 801450e:	42ac      	cmp	r4, r5
 8014510:	f300 8269 	bgt.w	80149e6 <GL_FillPolygon+0x532>
 8014514:	4693      	mov	fp, r2
 8014516:	4606      	mov	r6, r0
 8014518:	1e4d      	subs	r5, r1, #1
 801451a:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8014544 <GL_FillPolygon+0x90>
 801451e:	468a      	mov	sl, r1
 8014520:	9305      	str	r3, [sp, #20]
 8014522:	2200      	movs	r2, #0
 8014524:	4b07      	ldr	r3, [pc, #28]	; (8014544 <GL_FillPolygon+0x90>)
 8014526:	4592      	cmp	sl, r2
 8014528:	601a      	str	r2, [r3, #0]
 801452a:	f340 8257 	ble.w	80149dc <GL_FillPolygon+0x528>
 801452e:	9b05      	ldr	r3, [sp, #20]
 8014530:	f8cd b00c 	str.w	fp, [sp, #12]
 8014534:	4423      	add	r3, r4
 8014536:	9302      	str	r3, [sp, #8]
 8014538:	e0eb      	b.n	8014712 <GL_FillPolygon+0x25e>
 801453a:	bf00      	nop
 801453c:	ffffc001 	.word	0xffffc001
 8014540:	20000018 	.word	0x20000018
 8014544:	20000298 	.word	0x20000298
 8014548:	45a6      	cmp	lr, r4
 801454a:	f000 80de 	beq.w	801470a <GL_FillPolygon+0x256>
 801454e:	db01      	blt.n	8014554 <GL_FillPolygon+0xa0>
 8014550:	42a0      	cmp	r0, r4
 8014552:	dd05      	ble.n	8014560 <GL_FillPolygon+0xac>
 8014554:	42a0      	cmp	r0, r4
 8014556:	f2c0 80d8 	blt.w	801470a <GL_FillPolygon+0x256>
 801455a:	45a6      	cmp	lr, r4
 801455c:	f300 80d5 	bgt.w	801470a <GL_FillPolygon+0x256>
 8014560:	4570      	cmp	r0, lr
 8014562:	f300 8243 	bgt.w	80149ec <GL_FillPolygon+0x538>
 8014566:	45a6      	cmp	lr, r4
 8014568:	f2c0 80cf 	blt.w	801470a <GL_FillPolygon+0x256>
 801456c:	42a0      	cmp	r0, r4
 801456e:	f300 80cc 	bgt.w	801470a <GL_FillPolygon+0x256>
 8014572:	f936 b022 	ldrsh.w	fp, [r6, r2, lsl #2]
 8014576:	f9bc 3000 	ldrsh.w	r3, [ip]
 801457a:	ebcb 0203 	rsb	r2, fp, r3
 801457e:	ebc8 0304 	rsb	r3, r8, r4
 8014582:	ebc8 0e0e 	rsb	lr, r8, lr
 8014586:	fb03 f302 	mul.w	r3, r3, r2
 801458a:	2b00      	cmp	r3, #0
 801458c:	f340 8258 	ble.w	8014a40 <GL_FillPolygon+0x58c>
 8014590:	eb03 016e 	add.w	r1, r3, lr, asr #1
 8014594:	4bdf      	ldr	r3, [pc, #892]	; (8014914 <GL_FillPolygon+0x460>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	2b0b      	cmp	r3, #11
 801459a:	f300 80b6 	bgt.w	801470a <GL_FillPolygon+0x256>
 801459e:	2b00      	cmp	r3, #0
 80145a0:	fb91 f1fe 	sdiv	r1, r1, lr
 80145a4:	eb01 020b 	add.w	r2, r1, fp
 80145a8:	9201      	str	r2, [sp, #4]
 80145aa:	f340 8236 	ble.w	8014a1a <GL_FillPolygon+0x566>
 80145ae:	1e58      	subs	r0, r3, #1
 80145b0:	4611      	mov	r1, r2
 80145b2:	0042      	lsls	r2, r0, #1
 80145b4:	eb09 0e02 	add.w	lr, r9, r2
 80145b8:	f9be c004 	ldrsh.w	ip, [lr, #4]
 80145bc:	4561      	cmp	r1, ip
 80145be:	f300 824f 	bgt.w	8014a60 <GL_FillPolygon+0x5ac>
 80145c2:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 80145c6:	f8a8 c004 	strh.w	ip, [r8, #4]
 80145ca:	2800      	cmp	r0, #0
 80145cc:	f000 8225 	beq.w	8014a1a <GL_FillPolygon+0x566>
 80145d0:	1e98      	subs	r0, r3, #2
 80145d2:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80145d6:	eb09 0c0b 	add.w	ip, r9, fp
 80145da:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 80145de:	4541      	cmp	r1, r8
 80145e0:	f300 808c 	bgt.w	80146fc <GL_FillPolygon+0x248>
 80145e4:	f8ae 8004 	strh.w	r8, [lr, #4]
 80145e8:	2800      	cmp	r0, #0
 80145ea:	f000 8216 	beq.w	8014a1a <GL_FillPolygon+0x566>
 80145ee:	1ed8      	subs	r0, r3, #3
 80145f0:	0042      	lsls	r2, r0, #1
 80145f2:	eb09 0802 	add.w	r8, r9, r2
 80145f6:	f9b8 e004 	ldrsh.w	lr, [r8, #4]
 80145fa:	4571      	cmp	r1, lr
 80145fc:	f300 822e 	bgt.w	8014a5c <GL_FillPolygon+0x5a8>
 8014600:	f8ac e004 	strh.w	lr, [ip, #4]
 8014604:	2800      	cmp	r0, #0
 8014606:	f000 8208 	beq.w	8014a1a <GL_FillPolygon+0x566>
 801460a:	f1a3 0c04 	sub.w	ip, r3, #4
 801460e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8014612:	eb09 000e 	add.w	r0, r9, lr
 8014616:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801461a:	4281      	cmp	r1, r0
 801461c:	dc6e      	bgt.n	80146fc <GL_FillPolygon+0x248>
 801461e:	f8a8 0004 	strh.w	r0, [r8, #4]
 8014622:	f1bc 0f00 	cmp.w	ip, #0
 8014626:	f000 81f8 	beq.w	8014a1a <GL_FillPolygon+0x566>
 801462a:	1f58      	subs	r0, r3, #5
 801462c:	49b9      	ldr	r1, [pc, #740]	; (8014914 <GL_FillPolygon+0x460>)
 801462e:	0042      	lsls	r2, r0, #1
 8014630:	eb01 0802 	add.w	r8, r1, r2
 8014634:	9901      	ldr	r1, [sp, #4]
 8014636:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 801463a:	4559      	cmp	r1, fp
 801463c:	f300 8218 	bgt.w	8014a70 <GL_FillPolygon+0x5bc>
 8014640:	44ce      	add	lr, r9
 8014642:	f8ae b004 	strh.w	fp, [lr, #4]
 8014646:	2800      	cmp	r0, #0
 8014648:	f000 81e7 	beq.w	8014a1a <GL_FillPolygon+0x566>
 801464c:	1f98      	subs	r0, r3, #6
 801464e:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8014652:	eb09 0e0b 	add.w	lr, r9, fp
 8014656:	f9be c004 	ldrsh.w	ip, [lr, #4]
 801465a:	4561      	cmp	r1, ip
 801465c:	dc4e      	bgt.n	80146fc <GL_FillPolygon+0x248>
 801465e:	f8a8 c004 	strh.w	ip, [r8, #4]
 8014662:	2800      	cmp	r0, #0
 8014664:	f000 81d9 	beq.w	8014a1a <GL_FillPolygon+0x566>
 8014668:	1fd8      	subs	r0, r3, #7
 801466a:	0042      	lsls	r2, r0, #1
 801466c:	eb09 0c02 	add.w	ip, r9, r2
 8014670:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 8014674:	4541      	cmp	r1, r8
 8014676:	f300 81f1 	bgt.w	8014a5c <GL_FillPolygon+0x5a8>
 801467a:	f8ae 8004 	strh.w	r8, [lr, #4]
 801467e:	2800      	cmp	r0, #0
 8014680:	f000 81cb 	beq.w	8014a1a <GL_FillPolygon+0x566>
 8014684:	f1a3 0008 	sub.w	r0, r3, #8
 8014688:	ea4f 0840 	mov.w	r8, r0, lsl #1
 801468c:	eb09 0e08 	add.w	lr, r9, r8
 8014690:	f9be b004 	ldrsh.w	fp, [lr, #4]
 8014694:	4559      	cmp	r1, fp
 8014696:	dc31      	bgt.n	80146fc <GL_FillPolygon+0x248>
 8014698:	f8ac b004 	strh.w	fp, [ip, #4]
 801469c:	2800      	cmp	r0, #0
 801469e:	f000 81bc 	beq.w	8014a1a <GL_FillPolygon+0x566>
 80146a2:	f1a3 0009 	sub.w	r0, r3, #9
 80146a6:	0042      	lsls	r2, r0, #1
 80146a8:	eb09 0c02 	add.w	ip, r9, r2
 80146ac:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 80146b0:	4561      	cmp	r1, ip
 80146b2:	f300 81db 	bgt.w	8014a6c <GL_FillPolygon+0x5b8>
 80146b6:	f8ae c004 	strh.w	ip, [lr, #4]
 80146ba:	2800      	cmp	r0, #0
 80146bc:	f000 81ad 	beq.w	8014a1a <GL_FillPolygon+0x566>
 80146c0:	f1a3 000a 	sub.w	r0, r3, #10
 80146c4:	4993      	ldr	r1, [pc, #588]	; (8014914 <GL_FillPolygon+0x460>)
 80146c6:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80146ca:	eb01 0e0c 	add.w	lr, r1, ip
 80146ce:	9901      	ldr	r1, [sp, #4]
 80146d0:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 80146d4:	4541      	cmp	r1, r8
 80146d6:	dc11      	bgt.n	80146fc <GL_FillPolygon+0x248>
 80146d8:	444a      	add	r2, r9
 80146da:	f8a2 8004 	strh.w	r8, [r2, #4]
 80146de:	2800      	cmp	r0, #0
 80146e0:	f000 819b 	beq.w	8014a1a <GL_FillPolygon+0x566>
 80146e4:	f1a3 000b 	sub.w	r0, r3, #11
 80146e8:	0042      	lsls	r2, r0, #1
 80146ea:	eb09 0002 	add.w	r0, r9, r2
 80146ee:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80146f2:	4281      	cmp	r1, r0
 80146f4:	f300 81b8 	bgt.w	8014a68 <GL_FillPolygon+0x5b4>
 80146f8:	f8ae 0004 	strh.w	r0, [lr, #4]
 80146fc:	4885      	ldr	r0, [pc, #532]	; (8014914 <GL_FillPolygon+0x460>)
 80146fe:	3301      	adds	r3, #1
 8014700:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8014704:	4402      	add	r2, r0
 8014706:	6003      	str	r3, [r0, #0]
 8014708:	8091      	strh	r1, [r2, #4]
 801470a:	45ba      	cmp	sl, r7
 801470c:	463a      	mov	r2, r7
 801470e:	f340 80ef 	ble.w	80148f0 <GL_FillPolygon+0x43c>
 8014712:	42aa      	cmp	r2, r5
 8014714:	f102 0701 	add.w	r7, r2, #1
 8014718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 801471c:	4613      	mov	r3, r2
 801471e:	bfac      	ite	ge
 8014720:	f04f 0c00 	movge.w	ip, #0
 8014724:	ea4f 0c87 	movlt.w	ip, r7, lsl #2
 8014728:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 801472c:	44b4      	add	ip, r6
 801472e:	42a0      	cmp	r0, r4
 8014730:	4680      	mov	r8, r0
 8014732:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014736:	f47f af07 	bne.w	8014548 <GL_FillPolygon+0x94>
 801473a:	45a6      	cmp	lr, r4
 801473c:	f000 816f 	beq.w	8014a1e <GL_FillPolygon+0x56a>
 8014740:	2d00      	cmp	r5, #0
 8014742:	dde2      	ble.n	801470a <GL_FillPolygon+0x256>
 8014744:	2100      	movs	r1, #0
 8014746:	b15b      	cbz	r3, 8014760 <GL_FillPolygon+0x2ac>
 8014748:	3b01      	subs	r3, #1
 801474a:	3101      	adds	r1, #1
 801474c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8014750:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8014754:	42a0      	cmp	r0, r4
 8014756:	d10b      	bne.n	8014770 <GL_FillPolygon+0x2bc>
 8014758:	42a9      	cmp	r1, r5
 801475a:	d0d6      	beq.n	801470a <GL_FillPolygon+0x256>
 801475c:	2b00      	cmp	r3, #0
 801475e:	d1f3      	bne.n	8014748 <GL_FillPolygon+0x294>
 8014760:	462b      	mov	r3, r5
 8014762:	3101      	adds	r1, #1
 8014764:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8014768:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801476c:	42a0      	cmp	r0, r4
 801476e:	d0f3      	beq.n	8014758 <GL_FillPolygon+0x2a4>
 8014770:	1b00      	subs	r0, r0, r4
 8014772:	ebc4 0e0e 	rsb	lr, r4, lr
 8014776:	f936 2022 	ldrsh.w	r2, [r6, r2, lsl #2]
 801477a:	ea90 0f0e 	teq	r0, lr
 801477e:	f140 8142 	bpl.w	8014a06 <GL_FillPolygon+0x552>
 8014782:	4b64      	ldr	r3, [pc, #400]	; (8014914 <GL_FillPolygon+0x460>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b0b      	cmp	r3, #11
 8014788:	dcbf      	bgt.n	801470a <GL_FillPolygon+0x256>
 801478a:	2b00      	cmp	r3, #0
 801478c:	f340 815d 	ble.w	8014a4a <GL_FillPolygon+0x596>
 8014790:	1e58      	subs	r0, r3, #1
 8014792:	0041      	lsls	r1, r0, #1
 8014794:	eb09 0c01 	add.w	ip, r9, r1
 8014798:	f9bc e004 	ldrsh.w	lr, [ip, #4]
 801479c:	4572      	cmp	r2, lr
 801479e:	f300 816a 	bgt.w	8014a76 <GL_FillPolygon+0x5c2>
 80147a2:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 80147a6:	f8a8 e004 	strh.w	lr, [r8, #4]
 80147aa:	2800      	cmp	r0, #0
 80147ac:	f000 814d 	beq.w	8014a4a <GL_FillPolygon+0x596>
 80147b0:	1e98      	subs	r0, r3, #2
 80147b2:	ea4f 0840 	mov.w	r8, r0, lsl #1
 80147b6:	eb09 0e08 	add.w	lr, r9, r8
 80147ba:	f9be b004 	ldrsh.w	fp, [lr, #4]
 80147be:	455a      	cmp	r2, fp
 80147c0:	f300 808d 	bgt.w	80148de <GL_FillPolygon+0x42a>
 80147c4:	f8ac b004 	strh.w	fp, [ip, #4]
 80147c8:	2800      	cmp	r0, #0
 80147ca:	f000 813e 	beq.w	8014a4a <GL_FillPolygon+0x596>
 80147ce:	1ed8      	subs	r0, r3, #3
 80147d0:	0041      	lsls	r1, r0, #1
 80147d2:	eb09 0c01 	add.w	ip, r9, r1
 80147d6:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 80147da:	4562      	cmp	r2, ip
 80147dc:	f300 8152 	bgt.w	8014a84 <GL_FillPolygon+0x5d0>
 80147e0:	f8ae c004 	strh.w	ip, [lr, #4]
 80147e4:	2800      	cmp	r0, #0
 80147e6:	f000 8130 	beq.w	8014a4a <GL_FillPolygon+0x596>
 80147ea:	f1a3 0804 	sub.w	r8, r3, #4
 80147ee:	4849      	ldr	r0, [pc, #292]	; (8014914 <GL_FillPolygon+0x460>)
 80147f0:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80147f4:	eb00 0e0b 	add.w	lr, r0, fp
 80147f8:	f9be c004 	ldrsh.w	ip, [lr, #4]
 80147fc:	4562      	cmp	r2, ip
 80147fe:	dc6e      	bgt.n	80148de <GL_FillPolygon+0x42a>
 8014800:	4449      	add	r1, r9
 8014802:	f8a1 c004 	strh.w	ip, [r1, #4]
 8014806:	f1b8 0f00 	cmp.w	r8, #0
 801480a:	f000 811e 	beq.w	8014a4a <GL_FillPolygon+0x596>
 801480e:	1f58      	subs	r0, r3, #5
 8014810:	0041      	lsls	r1, r0, #1
 8014812:	eb09 0c01 	add.w	ip, r9, r1
 8014816:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 801481a:	4542      	cmp	r2, r8
 801481c:	f300 8122 	bgt.w	8014a64 <GL_FillPolygon+0x5b0>
 8014820:	f8ae 8004 	strh.w	r8, [lr, #4]
 8014824:	2800      	cmp	r0, #0
 8014826:	f000 8110 	beq.w	8014a4a <GL_FillPolygon+0x596>
 801482a:	1f98      	subs	r0, r3, #6
 801482c:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8014830:	eb09 0e0b 	add.w	lr, r9, fp
 8014834:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 8014838:	4542      	cmp	r2, r8
 801483a:	dc50      	bgt.n	80148de <GL_FillPolygon+0x42a>
 801483c:	f8ac 8004 	strh.w	r8, [ip, #4]
 8014840:	2800      	cmp	r0, #0
 8014842:	f000 8102 	beq.w	8014a4a <GL_FillPolygon+0x596>
 8014846:	1fd8      	subs	r0, r3, #7
 8014848:	0041      	lsls	r1, r0, #1
 801484a:	eb09 0801 	add.w	r8, r9, r1
 801484e:	f9b8 c004 	ldrsh.w	ip, [r8, #4]
 8014852:	4562      	cmp	r2, ip
 8014854:	f300 8106 	bgt.w	8014a64 <GL_FillPolygon+0x5b0>
 8014858:	f8ae c004 	strh.w	ip, [lr, #4]
 801485c:	2800      	cmp	r0, #0
 801485e:	f000 80f4 	beq.w	8014a4a <GL_FillPolygon+0x596>
 8014862:	f1a3 0c08 	sub.w	ip, r3, #8
 8014866:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 801486a:	eb09 000e 	add.w	r0, r9, lr
 801486e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8014872:	4282      	cmp	r2, r0
 8014874:	dc33      	bgt.n	80148de <GL_FillPolygon+0x42a>
 8014876:	f8a8 0004 	strh.w	r0, [r8, #4]
 801487a:	f1bc 0f00 	cmp.w	ip, #0
 801487e:	f000 80e4 	beq.w	8014a4a <GL_FillPolygon+0x596>
 8014882:	f1a3 0009 	sub.w	r0, r3, #9
 8014886:	0041      	lsls	r1, r0, #1
 8014888:	9001      	str	r0, [sp, #4]
 801488a:	4822      	ldr	r0, [pc, #136]	; (8014914 <GL_FillPolygon+0x460>)
 801488c:	eb00 0801 	add.w	r8, r0, r1
 8014890:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 8014894:	455a      	cmp	r2, fp
 8014896:	f300 80f0 	bgt.w	8014a7a <GL_FillPolygon+0x5c6>
 801489a:	44ce      	add	lr, r9
 801489c:	9801      	ldr	r0, [sp, #4]
 801489e:	f8ae b004 	strh.w	fp, [lr, #4]
 80148a2:	2800      	cmp	r0, #0
 80148a4:	f000 80d1 	beq.w	8014a4a <GL_FillPolygon+0x596>
 80148a8:	f1a3 000a 	sub.w	r0, r3, #10
 80148ac:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80148b0:	eb09 0e0c 	add.w	lr, r9, ip
 80148b4:	f9be b004 	ldrsh.w	fp, [lr, #4]
 80148b8:	455a      	cmp	r2, fp
 80148ba:	dc10      	bgt.n	80148de <GL_FillPolygon+0x42a>
 80148bc:	f8a8 b004 	strh.w	fp, [r8, #4]
 80148c0:	2800      	cmp	r0, #0
 80148c2:	f000 80c2 	beq.w	8014a4a <GL_FillPolygon+0x596>
 80148c6:	f1a3 010b 	sub.w	r1, r3, #11
 80148ca:	0049      	lsls	r1, r1, #1
 80148cc:	eb09 0001 	add.w	r0, r9, r1
 80148d0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80148d4:	4282      	cmp	r2, r0
 80148d6:	f300 80d3 	bgt.w	8014a80 <GL_FillPolygon+0x5cc>
 80148da:	f8ae 0004 	strh.w	r0, [lr, #4]
 80148de:	480d      	ldr	r0, [pc, #52]	; (8014914 <GL_FillPolygon+0x460>)
 80148e0:	3301      	adds	r3, #1
 80148e2:	45ba      	cmp	sl, r7
 80148e4:	4401      	add	r1, r0
 80148e6:	6003      	str	r3, [r0, #0]
 80148e8:	808a      	strh	r2, [r1, #4]
 80148ea:	463a      	mov	r2, r7
 80148ec:	f73f af11 	bgt.w	8014712 <GL_FillPolygon+0x25e>
 80148f0:	4b08      	ldr	r3, [pc, #32]	; (8014914 <GL_FillPolygon+0x460>)
 80148f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	dd6f      	ble.n	80149dc <GL_FillPolygon+0x528>
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
 8014902:	d06b      	beq.n	80149dc <GL_FillPolygon+0x528>
 8014904:	4b04      	ldr	r3, [pc, #16]	; (8014918 <GL_FillPolygon+0x464>)
 8014906:	4458      	add	r0, fp
 8014908:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	9f02      	ldr	r7, [sp, #8]
 8014910:	e004      	b.n	801491c <GL_FillPolygon+0x468>
 8014912:	bf00      	nop
 8014914:	20000298 	.word	0x20000298
 8014918:	20000018 	.word	0x20000018
 801491c:	445a      	add	r2, fp
 801491e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014920:	4639      	mov	r1, r7
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	4798      	blx	r3
 8014926:	f8d9 3000 	ldr.w	r3, [r9]
 801492a:	2b02      	cmp	r3, #2
 801492c:	dd56      	ble.n	80149dc <GL_FillPolygon+0x528>
 801492e:	2b03      	cmp	r3, #3
 8014930:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 8014934:	d052      	beq.n	80149dc <GL_FillPolygon+0x528>
 8014936:	4b57      	ldr	r3, [pc, #348]	; (8014a94 <GL_FillPolygon+0x5e0>)
 8014938:	4458      	add	r0, fp
 801493a:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
 801493e:	4639      	mov	r1, r7
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	445a      	add	r2, fp
 8014944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	4798      	blx	r3
 801494a:	f8d9 3000 	ldr.w	r3, [r9]
 801494e:	2b04      	cmp	r3, #4
 8014950:	dd44      	ble.n	80149dc <GL_FillPolygon+0x528>
 8014952:	2b05      	cmp	r3, #5
 8014954:	f9b9 000c 	ldrsh.w	r0, [r9, #12]
 8014958:	d040      	beq.n	80149dc <GL_FillPolygon+0x528>
 801495a:	4b4e      	ldr	r3, [pc, #312]	; (8014a94 <GL_FillPolygon+0x5e0>)
 801495c:	4458      	add	r0, fp
 801495e:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8014962:	4639      	mov	r1, r7
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	445a      	add	r2, fp
 8014968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	4798      	blx	r3
 801496e:	f8d9 3000 	ldr.w	r3, [r9]
 8014972:	2b06      	cmp	r3, #6
 8014974:	dd32      	ble.n	80149dc <GL_FillPolygon+0x528>
 8014976:	2b07      	cmp	r3, #7
 8014978:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
 801497c:	d02e      	beq.n	80149dc <GL_FillPolygon+0x528>
 801497e:	4b45      	ldr	r3, [pc, #276]	; (8014a94 <GL_FillPolygon+0x5e0>)
 8014980:	4458      	add	r0, fp
 8014982:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
 8014986:	4639      	mov	r1, r7
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	445a      	add	r2, fp
 801498c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	4798      	blx	r3
 8014992:	f8d9 3000 	ldr.w	r3, [r9]
 8014996:	2b08      	cmp	r3, #8
 8014998:	dd20      	ble.n	80149dc <GL_FillPolygon+0x528>
 801499a:	4a3f      	ldr	r2, [pc, #252]	; (8014a98 <GL_FillPolygon+0x5e4>)
 801499c:	2b09      	cmp	r3, #9
 801499e:	f9b2 0014 	ldrsh.w	r0, [r2, #20]
 80149a2:	d01b      	beq.n	80149dc <GL_FillPolygon+0x528>
 80149a4:	4b3b      	ldr	r3, [pc, #236]	; (8014a94 <GL_FillPolygon+0x5e0>)
 80149a6:	4458      	add	r0, fp
 80149a8:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 80149ac:	4639      	mov	r1, r7
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	445a      	add	r2, fp
 80149b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	4798      	blx	r3
 80149b8:	f8d9 3000 	ldr.w	r3, [r9]
 80149bc:	2b0a      	cmp	r3, #10
 80149be:	dd0d      	ble.n	80149dc <GL_FillPolygon+0x528>
 80149c0:	2b0b      	cmp	r3, #11
 80149c2:	f9b9 0018 	ldrsh.w	r0, [r9, #24]
 80149c6:	d009      	beq.n	80149dc <GL_FillPolygon+0x528>
 80149c8:	4b32      	ldr	r3, [pc, #200]	; (8014a94 <GL_FillPolygon+0x5e0>)
 80149ca:	4639      	mov	r1, r7
 80149cc:	f9b9 201a 	ldrsh.w	r2, [r9, #26]
 80149d0:	4458      	add	r0, fp
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	445a      	add	r2, fp
 80149d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4798      	blx	r3
 80149dc:	3401      	adds	r4, #1
 80149de:	9b04      	ldr	r3, [sp, #16]
 80149e0:	42a3      	cmp	r3, r4
 80149e2:	f6bf ad9e 	bge.w	8014522 <GL_FillPolygon+0x6e>
 80149e6:	b007      	add	sp, #28
 80149e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ec:	42a0      	cmp	r0, r4
 80149ee:	f6ff ae8c 	blt.w	801470a <GL_FillPolygon+0x256>
 80149f2:	45a6      	cmp	lr, r4
 80149f4:	f73f ae89 	bgt.w	801470a <GL_FillPolygon+0x256>
 80149f8:	46f0      	mov	r8, lr
 80149fa:	f9bc b000 	ldrsh.w	fp, [ip]
 80149fe:	f936 3022 	ldrsh.w	r3, [r6, r2, lsl #2]
 8014a02:	4686      	mov	lr, r0
 8014a04:	e5b9      	b.n	801457a <GL_FillPolygon+0xc6>
 8014a06:	4b23      	ldr	r3, [pc, #140]	; (8014a94 <GL_FillPolygon+0x5e0>)
 8014a08:	9903      	ldr	r1, [sp, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	440a      	add	r2, r1
 8014a0e:	9902      	ldr	r1, [sp, #8]
 8014a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a12:	4610      	mov	r0, r2
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	4798      	blx	r3
 8014a18:	e677      	b.n	801470a <GL_FillPolygon+0x256>
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	e66e      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a1e:	f9bc 3000 	ldrsh.w	r3, [ip]
 8014a22:	9803      	ldr	r0, [sp, #12]
 8014a24:	f936 1022 	ldrsh.w	r1, [r6, r2, lsl #2]
 8014a28:	4401      	add	r1, r0
 8014a2a:	1818      	adds	r0, r3, r0
 8014a2c:	4b19      	ldr	r3, [pc, #100]	; (8014a94 <GL_FillPolygon+0x5e0>)
 8014a2e:	4281      	cmp	r1, r0
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	db0c      	blt.n	8014a4e <GL_FillPolygon+0x59a>
 8014a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a36:	460a      	mov	r2, r1
 8014a38:	9902      	ldr	r1, [sp, #8]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4798      	blx	r3
 8014a3e:	e664      	b.n	801470a <GL_FillPolygon+0x256>
 8014a40:	ea4f 016e 	mov.w	r1, lr, asr #1
 8014a44:	3901      	subs	r1, #1
 8014a46:	1a59      	subs	r1, r3, r1
 8014a48:	e5a4      	b.n	8014594 <GL_FillPolygon+0xe0>
 8014a4a:	2100      	movs	r1, #0
 8014a4c:	e747      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a50:	4602      	mov	r2, r0
 8014a52:	4608      	mov	r0, r1
 8014a54:	9902      	ldr	r1, [sp, #8]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	4798      	blx	r3
 8014a5a:	e656      	b.n	801470a <GL_FillPolygon+0x256>
 8014a5c:	465a      	mov	r2, fp
 8014a5e:	e64d      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a60:	005a      	lsls	r2, r3, #1
 8014a62:	e64b      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a64:	4659      	mov	r1, fp
 8014a66:	e73a      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a68:	4662      	mov	r2, ip
 8014a6a:	e647      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a6c:	4642      	mov	r2, r8
 8014a6e:	e645      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a70:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8014a74:	e642      	b.n	80146fc <GL_FillPolygon+0x248>
 8014a76:	0059      	lsls	r1, r3, #1
 8014a78:	e731      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a7a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8014a7e:	e72e      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a80:	4661      	mov	r1, ip
 8014a82:	e72c      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a84:	4641      	mov	r1, r8
 8014a86:	e72a      	b.n	80148de <GL_FillPolygon+0x42a>
 8014a88:	4c04      	ldr	r4, [pc, #16]	; (8014a9c <GL_FillPolygon+0x5e8>)
 8014a8a:	9404      	str	r4, [sp, #16]
 8014a8c:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8014a90:	e529      	b.n	80144e6 <GL_FillPolygon+0x32>
 8014a92:	bf00      	nop
 8014a94:	20000018 	.word	0x20000018
 8014a98:	20000298 	.word	0x20000298
 8014a9c:	ffffc001 	.word	0xffffc001

08014aa0 <GUI_FillPolygon>:
 8014aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014aa4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8014b20 <GUI_FillPolygon+0x80>
 8014aa8:	b084      	sub	sp, #16
 8014aaa:	4607      	mov	r7, r0
 8014aac:	4688      	mov	r8, r1
 8014aae:	4615      	mov	r5, r2
 8014ab0:	461c      	mov	r4, r3
 8014ab2:	f001 fbd7 	bl	8016264 <GUI_Lock>
 8014ab6:	f8d9 1000 	ldr.w	r1, [r9]
 8014aba:	2000      	movs	r0, #0
 8014abc:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 8014ac0:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 8014ac2:	f008 fd41 	bl	801d548 <WM__InitIVRSearch>
 8014ac6:	b328      	cbz	r0, 8014b14 <GUI_FillPolygon+0x74>
 8014ac8:	4455      	add	r5, sl
 8014aca:	4426      	add	r6, r4
 8014acc:	f8df a054 	ldr.w	sl, [pc, #84]	; 8014b24 <GUI_FillPolygon+0x84>
 8014ad0:	e005      	b.n	8014ade <GUI_FillPolygon+0x3e>
 8014ad2:	9803      	ldr	r0, [sp, #12]
 8014ad4:	9600      	str	r6, [sp, #0]
 8014ad6:	47a0      	blx	r4
 8014ad8:	f008 fc0c 	bl	801d2f4 <WM__GetNextIVR>
 8014adc:	b1d0      	cbz	r0, 8014b14 <GUI_FillPolygon+0x74>
 8014ade:	f8d9 3000 	ldr.w	r3, [r9]
 8014ae2:	2111      	movs	r1, #17
 8014ae4:	a803      	add	r0, sp, #12
 8014ae6:	7c5b      	ldrb	r3, [r3, #17]
 8014ae8:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 8014aec:	68e3      	ldr	r3, [r4, #12]
 8014aee:	9403      	str	r4, [sp, #12]
 8014af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014af2:	4798      	blx	r3
 8014af4:	462b      	mov	r3, r5
 8014af6:	4604      	mov	r4, r0
 8014af8:	4642      	mov	r2, r8
 8014afa:	4639      	mov	r1, r7
 8014afc:	2800      	cmp	r0, #0
 8014afe:	d1e8      	bne.n	8014ad2 <GUI_FillPolygon+0x32>
 8014b00:	4633      	mov	r3, r6
 8014b02:	462a      	mov	r2, r5
 8014b04:	4641      	mov	r1, r8
 8014b06:	4638      	mov	r0, r7
 8014b08:	f7ff fcd4 	bl	80144b4 <GL_FillPolygon>
 8014b0c:	f008 fbf2 	bl	801d2f4 <WM__GetNextIVR>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d1e4      	bne.n	8014ade <GUI_FillPolygon+0x3e>
 8014b14:	f001 fb9c 	bl	8016250 <GUI_Unlock>
 8014b18:	b004      	add	sp, #16
 8014b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b1e:	bf00      	nop
 8014b20:	20000018 	.word	0x20000018
 8014b24:	2002afd0 	.word	0x2002afd0

08014b28 <GUI_MULTIBUF_End>:
 8014b28:	4a17      	ldr	r2, [pc, #92]	; (8014b88 <GUI_MULTIBUF_End+0x60>)
 8014b2a:	4b18      	ldr	r3, [pc, #96]	; (8014b8c <GUI_MULTIBUF_End+0x64>)
 8014b2c:	6811      	ldr	r1, [r2, #0]
 8014b2e:	6a1a      	ldr	r2, [r3, #32]
 8014b30:	b570      	push	{r4, r5, r6, lr}
 8014b32:	2a00      	cmp	r2, #0
 8014b34:	7c4d      	ldrb	r5, [r1, #17]
 8014b36:	4a16      	ldr	r2, [pc, #88]	; (8014b90 <GUI_MULTIBUF_End+0x68>)
 8014b38:	b082      	sub	sp, #8
 8014b3a:	bf0c      	ite	eq
 8014b3c:	462c      	moveq	r4, r5
 8014b3e:	2400      	movne	r4, #0
 8014b40:	5712      	ldrsb	r2, [r2, r4]
 8014b42:	2a01      	cmp	r2, #1
 8014b44:	dd05      	ble.n	8014b52 <GUI_MULTIBUF_End+0x2a>
 8014b46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b4a:	6923      	ldr	r3, [r4, #16]
 8014b4c:	3b01      	subs	r3, #1
 8014b4e:	6123      	str	r3, [r4, #16]
 8014b50:	b10b      	cbz	r3, 8014b56 <GUI_MULTIBUF_End+0x2e>
 8014b52:	b002      	add	sp, #8
 8014b54:	bd70      	pop	{r4, r5, r6, pc}
 8014b56:	2001      	movs	r0, #1
 8014b58:	40a8      	lsls	r0, r5
 8014b5a:	f7fd ff81 	bl	8012a60 <GUI_DCACHE_Clear>
 8014b5e:	68a6      	ldr	r6, [r4, #8]
 8014b60:	4628      	mov	r0, r5
 8014b62:	61a6      	str	r6, [r4, #24]
 8014b64:	f7fd ffa6 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8014b68:	9001      	str	r0, [sp, #4]
 8014b6a:	2800      	cmp	r0, #0
 8014b6c:	d0f1      	beq.n	8014b52 <GUI_MULTIBUF_End+0x2a>
 8014b6e:	68c3      	ldr	r3, [r0, #12]
 8014b70:	2122      	movs	r1, #34	; 0x22
 8014b72:	a801      	add	r0, sp, #4
 8014b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b76:	4798      	blx	r3
 8014b78:	4603      	mov	r3, r0
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d0e9      	beq.n	8014b52 <GUI_MULTIBUF_End+0x2a>
 8014b7e:	4631      	mov	r1, r6
 8014b80:	9801      	ldr	r0, [sp, #4]
 8014b82:	4798      	blx	r3
 8014b84:	b002      	add	sp, #8
 8014b86:	bd70      	pop	{r4, r5, r6, pc}
 8014b88:	20000018 	.word	0x20000018
 8014b8c:	200002b4 	.word	0x200002b4
 8014b90:	2002af80 	.word	0x2002af80

08014b94 <GUI_MULTIBUF_ConfirmEx>:
 8014b94:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <GUI_MULTIBUF_ConfirmEx+0x28>)
 8014b96:	6a1a      	ldr	r2, [r3, #32]
 8014b98:	2a00      	cmp	r2, #0
 8014b9a:	bf18      	it	ne
 8014b9c:	2000      	movne	r0, #0
 8014b9e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8014ba2:	b410      	push	{r4}
 8014ba4:	6994      	ldr	r4, [r2, #24]
 8014ba6:	2c00      	cmp	r4, #0
 8014ba8:	db04      	blt.n	8014bb4 <GUI_MULTIBUF_ConfirmEx+0x20>
 8014baa:	f04f 34ff 	mov.w	r4, #4294967295
 8014bae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8014bb2:	6194      	str	r4, [r2, #24]
 8014bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	200002b4 	.word	0x200002b4

08014bc0 <GUI_StoreKey>:
 8014bc0:	4b02      	ldr	r3, [pc, #8]	; (8014bcc <GUI_StoreKey+0xc>)
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	b902      	cbnz	r2, 8014bc8 <GUI_StoreKey+0x8>
 8014bc6:	6018      	str	r0, [r3, #0]
 8014bc8:	f001 bc98 	b.w	80164fc <GUI_SignalEvent>
 8014bcc:	200002e0 	.word	0x200002e0

08014bd0 <GUI_PollKeyMsg>:
 8014bd0:	b510      	push	{r4, lr}
 8014bd2:	f001 fb47 	bl	8016264 <GUI_Lock>
 8014bd6:	4a0d      	ldr	r2, [pc, #52]	; (8014c0c <GUI_PollKeyMsg+0x3c>)
 8014bd8:	6813      	ldr	r3, [r2, #0]
 8014bda:	6851      	ldr	r1, [r2, #4]
 8014bdc:	428b      	cmp	r3, r1
 8014bde:	d00f      	beq.n	8014c00 <GUI_PollKeyMsg+0x30>
 8014be0:	4c0b      	ldr	r4, [pc, #44]	; (8014c10 <GUI_PollKeyMsg+0x40>)
 8014be2:	42a3      	cmp	r3, r4
 8014be4:	f04f 0401 	mov.w	r4, #1
 8014be8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014bec:	bf14      	ite	ne
 8014bee:	3308      	addne	r3, #8
 8014bf0:	3b50      	subeq	r3, #80	; 0x50
 8014bf2:	6013      	str	r3, [r2, #0]
 8014bf4:	f009 f952 	bl	801de9c <WM_OnKey>
 8014bf8:	f001 fb2a 	bl	8016250 <GUI_Unlock>
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	bd10      	pop	{r4, pc}
 8014c00:	2400      	movs	r4, #0
 8014c02:	f001 fb25 	bl	8016250 <GUI_Unlock>
 8014c06:	4620      	mov	r0, r4
 8014c08:	bd10      	pop	{r4, pc}
 8014c0a:	bf00      	nop
 8014c0c:	2000002c 	.word	0x2000002c
 8014c10:	20000334 	.word	0x20000334

08014c14 <GUI_EnlargePolygon>:
 8014c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c18:	2a00      	cmp	r2, #0
 8014c1a:	ed2d 8b06 	vpush	{d8-d10}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	9301      	str	r3, [sp, #4]
 8014c22:	f340 80f0 	ble.w	8014e06 <GUI_EnlargePolygon+0x1f2>
 8014c26:	ee0a 3a90 	vmov	s21, r3
 8014c2a:	2600      	movs	r6, #0
 8014c2c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014c30:	4614      	mov	r4, r2
 8014c32:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8014c36:	460d      	mov	r5, r1
 8014c38:	4681      	mov	r9, r0
 8014c3a:	4637      	mov	r7, r6
 8014c3c:	468a      	mov	sl, r1
 8014c3e:	4690      	mov	r8, r2
 8014c40:	f108 31ff 	add.w	r1, r8, #4294967295
 8014c44:	fb04 6717 	mls	r7, r4, r7, r6
 8014c48:	3601      	adds	r6, #1
 8014c4a:	f10a 0a04 	add.w	sl, sl, #4
 8014c4e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8014c52:	f935 3027 	ldrsh.w	r3, [r5, r7, lsl #2]
 8014c56:	f109 0904 	add.w	r9, r9, #4
 8014c5a:	fbb1 f2f4 	udiv	r2, r1, r4
 8014c5e:	fb04 1112 	mls	r1, r4, r2, r1
 8014c62:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014c66:	f935 c021 	ldrsh.w	ip, [r5, r1, lsl #2]
 8014c6a:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8014c6e:	ebcc 0303 	rsb	r3, ip, r3
 8014c72:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8014c76:	ee08 3a10 	vmov	s16, r3
 8014c7a:	ebce 0302 	rsb	r3, lr, r2
 8014c7e:	ee09 3a10 	vmov	s18, r3
 8014c82:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014c86:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8014c8a:	fbb8 f1f4 	udiv	r1, r8, r4
 8014c8e:	fbb6 f7f4 	udiv	r7, r6, r4
 8014c92:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014c96:	fb04 6017 	mls	r0, r4, r7, r6
 8014c9a:	fb04 8111 	mls	r1, r4, r1, r8
 8014c9e:	f108 0801 	add.w	r8, r8, #1
 8014ca2:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8014ca6:	eb05 0e81 	add.w	lr, r5, r1, lsl #2
 8014caa:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014cae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014cb2:	f935 3020 	ldrsh.w	r3, [r5, r0, lsl #2]
 8014cb6:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8014cba:	f935 1021 	ldrsh.w	r1, [r5, r1, lsl #2]
 8014cbe:	1a12      	subs	r2, r2, r0
 8014cc0:	1a5b      	subs	r3, r3, r1
 8014cc2:	ee17 0a90 	vmov	r0, s15
 8014cc6:	ee07 2a90 	vmov	s15, r2
 8014cca:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8014cce:	ee07 3a90 	vmov	s15, r3
 8014cd2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8014cd6:	f7eb fbff 	bl	80004d8 <__aeabi_f2d>
 8014cda:	ec41 0b10 	vmov	d0, r0, r1
 8014cde:	f00d fdff 	bl	80228e0 <sqrt>
 8014ce2:	ec51 0b10 	vmov	r0, r1, d0
 8014ce6:	f7eb ff23 	bl	8000b30 <__aeabi_d2f>
 8014cea:	ee07 0a90 	vmov	s15, r0
 8014cee:	ee29 6aa9 	vmul.f32	s12, s19, s19
 8014cf2:	eec9 6a27 	vdiv.f32	s13, s18, s15
 8014cf6:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8014cfa:	eea8 6aa8 	vfma.f32	s12, s17, s17
 8014cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d06:	ee16 0a10 	vmov	r0, s12
 8014d0a:	bf88      	it	hi
 8014d0c:	eeb0 9a66 	vmovhi.f32	s18, s13
 8014d10:	bf88      	it	hi
 8014d12:	eeb0 8a47 	vmovhi.f32	s16, s14
 8014d16:	f7eb fbdf 	bl	80004d8 <__aeabi_f2d>
 8014d1a:	ec41 0b10 	vmov	d0, r0, r1
 8014d1e:	f00d fddf 	bl	80228e0 <sqrt>
 8014d22:	ec51 0b10 	vmov	r0, r1, d0
 8014d26:	f7eb ff03 	bl	8000b30 <__aeabi_d2f>
 8014d2a:	ee07 0a90 	vmov	s15, r0
 8014d2e:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8014d32:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8014d36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3e:	bf88      	it	hi
 8014d40:	eef0 9a66 	vmovhi.f32	s19, s13
 8014d44:	ee39 9a89 	vadd.f32	s18, s19, s18
 8014d48:	bf88      	it	hi
 8014d4a:	eef0 8a47 	vmovhi.f32	s17, s14
 8014d4e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014d52:	ee38 8a88 	vadd.f32	s16, s17, s16
 8014d56:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014d5a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8014d5e:	ee17 0a90 	vmov	r0, s15
 8014d62:	f7eb fbb9 	bl	80004d8 <__aeabi_f2d>
 8014d66:	ec41 0b10 	vmov	d0, r0, r1
 8014d6a:	f00d fdb9 	bl	80228e0 <sqrt>
 8014d6e:	ec51 0b10 	vmov	r0, r1, d0
 8014d72:	f7eb fedd 	bl	8000b30 <__aeabi_d2f>
 8014d76:	ee07 0a90 	vmov	s15, r0
 8014d7a:	f83a 2c04 	ldrh.w	r2, [sl, #-4]
 8014d7e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d86:	eec9 6a07 	vdiv.f32	s13, s18, s14
 8014d8a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8014d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d92:	bf88      	it	hi
 8014d94:	eeb0 9a66 	vmovhi.f32	s18, s13
 8014d98:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8014d9c:	bf88      	it	hi
 8014d9e:	eeb0 8a67 	vmovhi.f32	s16, s15
 8014da2:	ee79 7a0a 	vadd.f32	s15, s18, s20
 8014da6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8014daa:	ee39 9a4a 	vsub.f32	s18, s18, s20
 8014dae:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8014db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014db6:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 8014dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dbe:	ee17 3a90 	vmov	r3, s15
 8014dc2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014dc6:	ee78 7a0a 	vadd.f32	s15, s16, s20
 8014dca:	ee19 1a10 	vmov	r1, s18
 8014dce:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8014dd2:	bfd8      	it	le
 8014dd4:	460b      	movle	r3, r1
 8014dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dde:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8014de2:	4413      	add	r3, r2
 8014de4:	f829 3c04 	strh.w	r3, [r9, #-4]
 8014de8:	ee17 3a90 	vmov	r3, s15
 8014dec:	ee18 1a10 	vmov	r1, s16
 8014df0:	f83a 2c02 	ldrh.w	r2, [sl, #-2]
 8014df4:	bfd8      	it	le
 8014df6:	460b      	movle	r3, r1
 8014df8:	42b4      	cmp	r4, r6
 8014dfa:	eba2 0303 	sub.w	r3, r2, r3
 8014dfe:	f829 3c02 	strh.w	r3, [r9, #-2]
 8014e02:	f47f af1d 	bne.w	8014c40 <GUI_EnlargePolygon+0x2c>
 8014e06:	b002      	add	sp, #8
 8014e08:	ecbd 8b06 	vpop	{d8-d10}
 8014e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014e10 <GUI_GetCursorLayer>:
 8014e10:	2801      	cmp	r0, #1
 8014e12:	d901      	bls.n	8014e18 <GUI_GetCursorLayer+0x8>
 8014e14:	2000      	movs	r0, #0
 8014e16:	4770      	bx	lr
 8014e18:	4b01      	ldr	r3, [pc, #4]	; (8014e20 <GUI_GetCursorLayer+0x10>)
 8014e1a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8014e1e:	4770      	bx	lr
 8014e20:	20000340 	.word	0x20000340

08014e24 <GUI_GetLayerPosEx>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	4604      	mov	r4, r0
 8014e28:	460e      	mov	r6, r1
 8014e2a:	4615      	mov	r5, r2
 8014e2c:	f001 fa1a 	bl	8016264 <GUI_Lock>
 8014e30:	4620      	mov	r0, r4
 8014e32:	4631      	mov	r1, r6
 8014e34:	462a      	mov	r2, r5
 8014e36:	f003 fb4b 	bl	80184d0 <LCD_GetPosEx>
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	b110      	cbz	r0, 8014e44 <GUI_GetLayerPosEx+0x20>
 8014e3e:	2300      	movs	r3, #0
 8014e40:	6033      	str	r3, [r6, #0]
 8014e42:	602b      	str	r3, [r5, #0]
 8014e44:	f001 fa04 	bl	8016250 <GUI_Unlock>
 8014e48:	4620      	mov	r0, r4
 8014e4a:	bd70      	pop	{r4, r5, r6, pc}

08014e4c <GUI_SelectLayer>:
 8014e4c:	b570      	push	{r4, r5, r6, lr}
 8014e4e:	4d0d      	ldr	r5, [pc, #52]	; (8014e84 <GUI_SelectLayer+0x38>)
 8014e50:	4604      	mov	r4, r0
 8014e52:	682b      	ldr	r3, [r5, #0]
 8014e54:	7c5e      	ldrb	r6, [r3, #17]
 8014e56:	f001 fa05 	bl	8016264 <GUI_Lock>
 8014e5a:	2c01      	cmp	r4, #1
 8014e5c:	d903      	bls.n	8014e66 <GUI_SelectLayer+0x1a>
 8014e5e:	f001 f9f7 	bl	8016250 <GUI_Unlock>
 8014e62:	4630      	mov	r0, r6
 8014e64:	bd70      	pop	{r4, r5, r6, pc}
 8014e66:	4620      	mov	r0, r4
 8014e68:	f7fd fe24 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d0f6      	beq.n	8014e5e <GUI_SelectLayer+0x12>
 8014e70:	682b      	ldr	r3, [r5, #0]
 8014e72:	745c      	strb	r4, [r3, #17]
 8014e74:	f7fd fb6e 	bl	8012554 <GUI_SelectLCD>
 8014e78:	4b03      	ldr	r3, [pc, #12]	; (8014e88 <GUI_SelectLayer+0x3c>)
 8014e7a:	601c      	str	r4, [r3, #0]
 8014e7c:	f001 f9e8 	bl	8016250 <GUI_Unlock>
 8014e80:	4630      	mov	r0, r6
 8014e82:	bd70      	pop	{r4, r5, r6, pc}
 8014e84:	20000018 	.word	0x20000018
 8014e88:	2002b014 	.word	0x2002b014

08014e8c <GUI_SetLayerPosEx>:
 8014e8c:	b570      	push	{r4, r5, r6, lr}
 8014e8e:	4604      	mov	r4, r0
 8014e90:	460d      	mov	r5, r1
 8014e92:	4616      	mov	r6, r2
 8014e94:	f001 f9e6 	bl	8016264 <GUI_Lock>
 8014e98:	4629      	mov	r1, r5
 8014e9a:	4620      	mov	r0, r4
 8014e9c:	4632      	mov	r2, r6
 8014e9e:	f003 fb65 	bl	801856c <LCD_SetPosEx>
 8014ea2:	4604      	mov	r4, r0
 8014ea4:	f001 f9d4 	bl	8016250 <GUI_Unlock>
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}

08014eac <_Color2Index>:
 8014eac:	4a04      	ldr	r2, [pc, #16]	; (8014ec0 <_Color2Index+0x14>)
 8014eae:	4b05      	ldr	r3, [pc, #20]	; (8014ec4 <_Color2Index+0x18>)
 8014eb0:	6812      	ldr	r2, [r2, #0]
 8014eb2:	7c52      	ldrb	r2, [r2, #17]
 8014eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	691b      	ldr	r3, [r3, #16]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	4718      	bx	r3
 8014ec0:	20000018 	.word	0x20000018
 8014ec4:	20000348 	.word	0x20000348

08014ec8 <_Index2Color>:
 8014ec8:	4a04      	ldr	r2, [pc, #16]	; (8014edc <_Index2Color+0x14>)
 8014eca:	4b05      	ldr	r3, [pc, #20]	; (8014ee0 <_Index2Color+0x18>)
 8014ecc:	6812      	ldr	r2, [r2, #0]
 8014ece:	7c52      	ldrb	r2, [r2, #17]
 8014ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	691b      	ldr	r3, [r3, #16]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	4718      	bx	r3
 8014edc:	20000018 	.word	0x20000018
 8014ee0:	20000348 	.word	0x20000348

08014ee4 <_GetIndexMask>:
 8014ee4:	4a04      	ldr	r2, [pc, #16]	; (8014ef8 <_GetIndexMask+0x14>)
 8014ee6:	4b05      	ldr	r3, [pc, #20]	; (8014efc <_GetIndexMask+0x18>)
 8014ee8:	6812      	ldr	r2, [r2, #0]
 8014eea:	7c52      	ldrb	r2, [r2, #17]
 8014eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	691b      	ldr	r3, [r3, #16]
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	4718      	bx	r3
 8014ef8:	20000018 	.word	0x20000018
 8014efc:	20000348 	.word	0x20000348

08014f00 <_GetPixelIndex>:
 8014f00:	6800      	ldr	r0, [r0, #0]
 8014f02:	68c3      	ldr	r3, [r0, #12]
 8014f04:	695b      	ldr	r3, [r3, #20]
 8014f06:	4718      	bx	r3

08014f08 <_GetDevData>:
 8014f08:	2000      	movs	r0, #0
 8014f0a:	4770      	bx	lr

08014f0c <_SetOrg>:
 8014f0c:	6800      	ldr	r0, [r0, #0]
 8014f0e:	b110      	cbz	r0, 8014f16 <_SetOrg+0xa>
 8014f10:	68c3      	ldr	r3, [r0, #12]
 8014f12:	6a1b      	ldr	r3, [r3, #32]
 8014f14:	4718      	bx	r3
 8014f16:	4770      	bx	lr

08014f18 <_GetDevFunc>:
 8014f18:	b510      	push	{r4, lr}
 8014f1a:	6803      	ldr	r3, [r0, #0]
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	9301      	str	r3, [sp, #4]
 8014f20:	b163      	cbz	r3, 8014f3c <_GetDevFunc+0x24>
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	9301      	str	r3, [sp, #4]
 8014f26:	b14b      	cbz	r3, 8014f3c <_GetDevFunc+0x24>
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	a801      	add	r0, sp, #4
 8014f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f30:	4798      	blx	r3
 8014f32:	b108      	cbz	r0, 8014f38 <_GetDevFunc+0x20>
 8014f34:	9b01      	ldr	r3, [sp, #4]
 8014f36:	6023      	str	r3, [r4, #0]
 8014f38:	b002      	add	sp, #8
 8014f3a:	bd10      	pop	{r4, pc}
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e7fb      	b.n	8014f38 <_GetDevFunc+0x20>

08014f40 <_GetDevProp>:
 8014f40:	6800      	ldr	r0, [r0, #0]
 8014f42:	b110      	cbz	r0, 8014f4a <_GetDevProp+0xa>
 8014f44:	68c3      	ldr	r3, [r0, #12]
 8014f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f48:	4718      	bx	r3
 8014f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f4e:	4770      	bx	lr

08014f50 <_GetRect>:
 8014f50:	6800      	ldr	r0, [r0, #0]
 8014f52:	b110      	cbz	r0, 8014f5a <_GetRect+0xa>
 8014f54:	68c3      	ldr	r3, [r0, #12]
 8014f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f58:	4718      	bx	r3
 8014f5a:	4770      	bx	lr

08014f5c <GUI_SetAlpha>:
 8014f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f60:	4f44      	ldr	r7, [pc, #272]	; (8015074 <GUI_SetAlpha+0x118>)
 8014f62:	4605      	mov	r5, r0
 8014f64:	4b44      	ldr	r3, [pc, #272]	; (8015078 <GUI_SetAlpha+0x11c>)
 8014f66:	683a      	ldr	r2, [r7, #0]
 8014f68:	2dff      	cmp	r5, #255	; 0xff
 8014f6a:	4e44      	ldr	r6, [pc, #272]	; (801507c <GUI_SetAlpha+0x120>)
 8014f6c:	7c50      	ldrb	r0, [r2, #17]
 8014f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f72:	699c      	ldr	r4, [r3, #24]
 8014f74:	f816 8004 	ldrb.w	r8, [r6, r4]
 8014f78:	d00c      	beq.n	8014f94 <GUI_SetAlpha+0x38>
 8014f7a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 801508c <GUI_SetAlpha+0x130>
 8014f7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014f82:	b1bb      	cbz	r3, 8014fb4 <GUI_SetAlpha+0x58>
 8014f84:	2105      	movs	r1, #5
 8014f86:	f7fd fd7d 	bl	8012a84 <GUI_DEVICE__GetpDevice>
 8014f8a:	b350      	cbz	r0, 8014fe2 <GUI_SetAlpha+0x86>
 8014f8c:	5535      	strb	r5, [r6, r4]
 8014f8e:	4640      	mov	r0, r8
 8014f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f94:	2105      	movs	r1, #5
 8014f96:	f7fd fd75 	bl	8012a84 <GUI_DEVICE__GetpDevice>
 8014f9a:	4607      	mov	r7, r0
 8014f9c:	2800      	cmp	r0, #0
 8014f9e:	d0f6      	beq.n	8014f8e <GUI_SetAlpha+0x32>
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	f005 fd7f 	bl	801aaa4 <GUI_MEMDEV__SetAlphaCallback>
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	f7fd fdca 	bl	8012b40 <GUI_DEVICE_Unlink>
 8014fac:	5535      	strb	r5, [r6, r4]
 8014fae:	4640      	mov	r0, r8
 8014fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb4:	4b32      	ldr	r3, [pc, #200]	; (8015080 <GUI_SetAlpha+0x124>)
 8014fb6:	4648      	mov	r0, r9
 8014fb8:	f840 3f0c 	str.w	r3, [r0, #12]!
 8014fbc:	f7fd fd3c 	bl	8012a38 <GUI__RegisterExit>
 8014fc0:	f003 f87c 	bl	80180bc <LCD_GetVXSizeMax>
 8014fc4:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8014fc8:	4650      	mov	r0, sl
 8014fca:	f7fc fb9d 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8014fce:	f8c9 0008 	str.w	r0, [r9, #8]
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	d0db      	beq.n	8014f8e <GUI_SetAlpha+0x32>
 8014fd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014fda:	b173      	cbz	r3, 8014ffa <GUI_SetAlpha+0x9e>
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	7c58      	ldrb	r0, [r3, #17]
 8014fe0:	e7d0      	b.n	8014f84 <GUI_SetAlpha+0x28>
 8014fe2:	4828      	ldr	r0, [pc, #160]	; (8015084 <GUI_SetAlpha+0x128>)
 8014fe4:	f005 fd5e 	bl	801aaa4 <GUI_MEMDEV__SetAlphaCallback>
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	7c5b      	ldrb	r3, [r3, #17]
 8014fec:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d0cb      	beq.n	8014f8c <GUI_SetAlpha+0x30>
 8014ff4:	f7fd fdc6 	bl	8012b84 <GUI_DEVICE_Link>
 8014ff8:	e7c8      	b.n	8014f8c <GUI_SetAlpha+0x30>
 8014ffa:	4650      	mov	r0, sl
 8014ffc:	f7fc fb84 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8015000:	f8c9 0014 	str.w	r0, [r9, #20]
 8015004:	b388      	cbz	r0, 801506a <GUI_SetAlpha+0x10e>
 8015006:	f8d9 3000 	ldr.w	r3, [r9]
 801500a:	b31b      	cbz	r3, 8015054 <GUI_SetAlpha+0xf8>
 801500c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8015010:	f8df a078 	ldr.w	sl, [pc, #120]	; 801508c <GUI_SetAlpha+0x130>
 8015014:	2a00      	cmp	r2, #0
 8015016:	d1e1      	bne.n	8014fdc <GUI_SetAlpha+0x80>
 8015018:	491b      	ldr	r1, [pc, #108]	; (8015088 <GUI_SetAlpha+0x12c>)
 801501a:	2301      	movs	r3, #1
 801501c:	f101 0018 	add.w	r0, r1, #24
 8015020:	f7fd fd60 	bl	8012ae4 <GUI_DEVICE_Create>
 8015024:	f8ca 0004 	str.w	r0, [sl, #4]
 8015028:	2800      	cmp	r0, #0
 801502a:	d1d7      	bne.n	8014fdc <GUI_SetAlpha+0x80>
 801502c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8015030:	f7fc fb60 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8015034:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015038:	f7fc fb5c 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 801503c:	f8d9 0000 	ldr.w	r0, [r9]
 8015040:	b108      	cbz	r0, 8015046 <GUI_SetAlpha+0xea>
 8015042:	f7fd fd4d 	bl	8012ae0 <GUI_DEVICE_Delete>
 8015046:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801504a:	2800      	cmp	r0, #0
 801504c:	d09f      	beq.n	8014f8e <GUI_SetAlpha+0x32>
 801504e:	f7fd fd47 	bl	8012ae0 <GUI_DEVICE_Delete>
 8015052:	e79c      	b.n	8014f8e <GUI_SetAlpha+0x32>
 8015054:	490c      	ldr	r1, [pc, #48]	; (8015088 <GUI_SetAlpha+0x12c>)
 8015056:	461a      	mov	r2, r3
 8015058:	f101 0018 	add.w	r0, r1, #24
 801505c:	f7fd fd42 	bl	8012ae4 <GUI_DEVICE_Create>
 8015060:	f8c9 0000 	str.w	r0, [r9]
 8015064:	2800      	cmp	r0, #0
 8015066:	d1d1      	bne.n	801500c <GUI_SetAlpha+0xb0>
 8015068:	e7e0      	b.n	801502c <GUI_SetAlpha+0xd0>
 801506a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801506e:	f7fc fb41 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8015072:	e78c      	b.n	8014f8e <GUI_SetAlpha+0x32>
 8015074:	20000018 	.word	0x20000018
 8015078:	2002afd0 	.word	0x2002afd0
 801507c:	20000034 	.word	0x20000034
 8015080:	08015091 	.word	0x08015091
 8015084:	08014f5d 	.word	0x08014f5d
 8015088:	08023c88 	.word	0x08023c88
 801508c:	20000348 	.word	0x20000348

08015090 <_OnExit>:
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4c0b      	ldr	r4, [pc, #44]	; (80150c0 <_OnExit+0x30>)
 8015094:	2500      	movs	r5, #0
 8015096:	68a0      	ldr	r0, [r4, #8]
 8015098:	f7fc fb2c 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 801509c:	6960      	ldr	r0, [r4, #20]
 801509e:	60a5      	str	r5, [r4, #8]
 80150a0:	f7fc fb28 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 80150a4:	6820      	ldr	r0, [r4, #0]
 80150a6:	6165      	str	r5, [r4, #20]
 80150a8:	b110      	cbz	r0, 80150b0 <_OnExit+0x20>
 80150aa:	f7fd fd19 	bl	8012ae0 <GUI_DEVICE_Delete>
 80150ae:	6025      	str	r5, [r4, #0]
 80150b0:	6860      	ldr	r0, [r4, #4]
 80150b2:	4c03      	ldr	r4, [pc, #12]	; (80150c0 <_OnExit+0x30>)
 80150b4:	b118      	cbz	r0, 80150be <_OnExit+0x2e>
 80150b6:	f7fd fd13 	bl	8012ae0 <GUI_DEVICE_Delete>
 80150ba:	2300      	movs	r3, #0
 80150bc:	6063      	str	r3, [r4, #4]
 80150be:	bd38      	pop	{r3, r4, r5, pc}
 80150c0:	20000348 	.word	0x20000348

080150c4 <_ReadRectFromMemdev>:
 80150c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c8:	4c27      	ldr	r4, [pc, #156]	; (8015168 <_ReadRectFromMemdev+0xa4>)
 80150ca:	461e      	mov	r6, r3
 80150cc:	b085      	sub	sp, #20
 80150ce:	4615      	mov	r5, r2
 80150d0:	6823      	ldr	r3, [r4, #0]
 80150d2:	4689      	mov	r9, r1
 80150d4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80150d8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80150da:	f005 fdeb 	bl	801acb4 <GUI_MEMDEV_GetXPos>
 80150de:	6823      	ldr	r3, [r4, #0]
 80150e0:	4607      	mov	r7, r0
 80150e2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80150e4:	f005 fe08 	bl	801acf8 <GUI_MEMDEV_GetYPos>
 80150e8:	6823      	ldr	r3, [r4, #0]
 80150ea:	4680      	mov	r8, r0
 80150ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80150ee:	f005 fe25 	bl	801ad3c <GUI_MEMDEV_GetXSize>
 80150f2:	45a8      	cmp	r8, r5
 80150f4:	dc2e      	bgt.n	8015154 <_ReadRectFromMemdev+0x90>
 80150f6:	454f      	cmp	r7, r9
 80150f8:	dc2c      	bgt.n	8015154 <_ReadRectFromMemdev+0x90>
 80150fa:	6823      	ldr	r3, [r4, #0]
 80150fc:	4683      	mov	fp, r0
 80150fe:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015100:	f004 fcdc 	bl	8019abc <GUI_MEMDEV_GetBitsPerPixel>
 8015104:	2808      	cmp	r0, #8
 8015106:	9001      	str	r0, [sp, #4]
 8015108:	dd27      	ble.n	801515a <_ReadRectFromMemdev+0x96>
 801510a:	2810      	cmp	r0, #16
 801510c:	dc28      	bgt.n	8015160 <_ReadRectFromMemdev+0x9c>
 801510e:	2302      	movs	r3, #2
 8015110:	461a      	mov	r2, r3
 8015112:	6820      	ldr	r0, [r4, #0]
 8015114:	ebc8 0505 	rsb	r5, r8, r5
 8015118:	ebc7 0709 	rsb	r7, r7, r9
 801511c:	ebc9 0606 	rsb	r6, r9, r6
 8015120:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015122:	9303      	str	r3, [sp, #12]
 8015124:	3601      	adds	r6, #1
 8015126:	9202      	str	r2, [sp, #8]
 8015128:	f005 fdac 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 801512c:	4c0f      	ldr	r4, [pc, #60]	; (801516c <_ReadRectFromMemdev+0xa8>)
 801512e:	fb0b 7105 	mla	r1, fp, r5, r7
 8015132:	9b03      	ldr	r3, [sp, #12]
 8015134:	9a02      	ldr	r2, [sp, #8]
 8015136:	fb03 0101 	mla	r1, r3, r1, r0
 801513a:	6824      	ldr	r4, [r4, #0]
 801513c:	fb06 f202 	mul.w	r2, r6, r2
 8015140:	4650      	mov	r0, sl
 8015142:	47a0      	blx	r4
 8015144:	9a01      	ldr	r2, [sp, #4]
 8015146:	4631      	mov	r1, r6
 8015148:	4650      	mov	r0, sl
 801514a:	b005      	add	sp, #20
 801514c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	f001 bda0 	b.w	8016c94 <GUI__ExpandPixelIndices>
 8015154:	b005      	add	sp, #20
 8015156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801515a:	2301      	movs	r3, #1
 801515c:	461a      	mov	r2, r3
 801515e:	e7d8      	b.n	8015112 <_ReadRectFromMemdev+0x4e>
 8015160:	2304      	movs	r3, #4
 8015162:	461a      	mov	r2, r3
 8015164:	e7d5      	b.n	8015112 <_ReadRectFromMemdev+0x4e>
 8015166:	bf00      	nop
 8015168:	20000018 	.word	0x20000018
 801516c:	2000004c 	.word	0x2000004c

08015170 <_GetLine>:
 8015170:	6800      	ldr	r0, [r0, #0]
 8015172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015176:	68c5      	ldr	r5, [r0, #12]
 8015178:	461f      	mov	r7, r3
 801517a:	b084      	sub	sp, #16
 801517c:	460c      	mov	r4, r1
 801517e:	682b      	ldr	r3, [r5, #0]
 8015180:	4691      	mov	r9, r2
 8015182:	9003      	str	r0, [sp, #12]
 8015184:	2b04      	cmp	r3, #4
 8015186:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015188:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801518c:	d03d      	beq.n	801520a <_GetLine+0x9a>
 801518e:	eb01 0a07 	add.w	sl, r1, r7
 8015192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015194:	2101      	movs	r1, #1
 8015196:	a803      	add	r0, sp, #12
 8015198:	4798      	blx	r3
 801519a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801519e:	4605      	mov	r5, r0
 80151a0:	b9f0      	cbnz	r0, 80151e0 <_GetLine+0x70>
 80151a2:	429c      	cmp	r4, r3
 80151a4:	dc0b      	bgt.n	80151be <_GetLine+0x4e>
 80151a6:	4635      	mov	r5, r6
 80151a8:	9803      	ldr	r0, [sp, #12]
 80151aa:	4621      	mov	r1, r4
 80151ac:	3401      	adds	r4, #1
 80151ae:	464a      	mov	r2, r9
 80151b0:	68c3      	ldr	r3, [r0, #12]
 80151b2:	695b      	ldr	r3, [r3, #20]
 80151b4:	4798      	blx	r3
 80151b6:	4554      	cmp	r4, sl
 80151b8:	f845 0b04 	str.w	r0, [r5], #4
 80151bc:	d1f4      	bne.n	80151a8 <_GetLine+0x38>
 80151be:	2f00      	cmp	r7, #0
 80151c0:	dd0b      	ble.n	80151da <_GetLine+0x6a>
 80151c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151c4:	3e04      	subs	r6, #4
 80151c6:	2400      	movs	r4, #0
 80151c8:	1f1d      	subs	r5, r3, #4
 80151ca:	3401      	adds	r4, #1
 80151cc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80151d0:	47c0      	blx	r8
 80151d2:	f845 0f04 	str.w	r0, [r5, #4]!
 80151d6:	42a7      	cmp	r7, r4
 80151d8:	d1f7      	bne.n	80151ca <_GetLine+0x5a>
 80151da:	b004      	add	sp, #16
 80151dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e0:	4621      	mov	r1, r4
 80151e2:	464a      	mov	r2, r9
 80151e4:	9803      	ldr	r0, [sp, #12]
 80151e6:	9601      	str	r6, [sp, #4]
 80151e8:	f8cd 9000 	str.w	r9, [sp]
 80151ec:	47a8      	blx	r5
 80151ee:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <_GetLine+0xa8>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	7c58      	ldrb	r0, [r3, #17]
 80151f4:	f002 fe72 	bl	8017edc <LCD_GetBitsPerPixelEx>
 80151f8:	4639      	mov	r1, r7
 80151fa:	2818      	cmp	r0, #24
 80151fc:	bf14      	ite	ne
 80151fe:	4602      	movne	r2, r0
 8015200:	2220      	moveq	r2, #32
 8015202:	4630      	mov	r0, r6
 8015204:	f001 fd46 	bl	8016c94 <GUI__ExpandPixelIndices>
 8015208:	e7d9      	b.n	80151be <_GetLine+0x4e>
 801520a:	19cb      	adds	r3, r1, r7
 801520c:	9601      	str	r6, [sp, #4]
 801520e:	9200      	str	r2, [sp, #0]
 8015210:	3b01      	subs	r3, #1
 8015212:	f7ff ff57 	bl	80150c4 <_ReadRectFromMemdev>
 8015216:	e7d2      	b.n	80151be <_GetLine+0x4e>
 8015218:	20000018 	.word	0x20000018

0801521c <_Color2IndexBulk>:
 801521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015220:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80152cc <_Color2IndexBulk+0xb0>
 8015224:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80152d0 <_Color2IndexBulk+0xb4>
 8015228:	f8d9 5000 	ldr.w	r5, [r9]
 801522c:	7c6d      	ldrb	r5, [r5, #17]
 801522e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8015232:	682d      	ldr	r5, [r5, #0]
 8015234:	692d      	ldr	r5, [r5, #16]
 8015236:	692e      	ldr	r6, [r5, #16]
 8015238:	b11e      	cbz	r6, 8015242 <_Color2IndexBulk+0x26>
 801523a:	46b4      	mov	ip, r6
 801523c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015240:	4760      	bx	ip
 8015242:	2b02      	cmp	r3, #2
 8015244:	4607      	mov	r7, r0
 8015246:	468e      	mov	lr, r1
 8015248:	4614      	mov	r4, r2
 801524a:	d02b      	beq.n	80152a4 <_Color2IndexBulk+0x88>
 801524c:	2b04      	cmp	r3, #4
 801524e:	d016      	beq.n	801527e <_Color2IndexBulk+0x62>
 8015250:	2b01      	cmp	r3, #1
 8015252:	d001      	beq.n	8015258 <_Color2IndexBulk+0x3c>
 8015254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015258:	1e4e      	subs	r6, r1, #1
 801525a:	e006      	b.n	801526a <_Color2IndexBulk+0x4e>
 801525c:	f8d9 3000 	ldr.w	r3, [r9]
 8015260:	7c5b      	ldrb	r3, [r3, #17]
 8015262:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	691d      	ldr	r5, [r3, #16]
 801526a:	682b      	ldr	r3, [r5, #0]
 801526c:	f857 0b04 	ldr.w	r0, [r7], #4
 8015270:	4798      	blx	r3
 8015272:	3c01      	subs	r4, #1
 8015274:	f806 0f01 	strb.w	r0, [r6, #1]!
 8015278:	d1f0      	bne.n	801525c <_Color2IndexBulk+0x40>
 801527a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801527e:	1f0e      	subs	r6, r1, #4
 8015280:	e006      	b.n	8015290 <_Color2IndexBulk+0x74>
 8015282:	f8d9 3000 	ldr.w	r3, [r9]
 8015286:	7c5b      	ldrb	r3, [r3, #17]
 8015288:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	691d      	ldr	r5, [r3, #16]
 8015290:	682b      	ldr	r3, [r5, #0]
 8015292:	f857 0b04 	ldr.w	r0, [r7], #4
 8015296:	4798      	blx	r3
 8015298:	3c01      	subs	r4, #1
 801529a:	f846 0f04 	str.w	r0, [r6, #4]!
 801529e:	d1f0      	bne.n	8015282 <_Color2IndexBulk+0x66>
 80152a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152a4:	1e8e      	subs	r6, r1, #2
 80152a6:	e006      	b.n	80152b6 <_Color2IndexBulk+0x9a>
 80152a8:	f8d9 3000 	ldr.w	r3, [r9]
 80152ac:	7c5b      	ldrb	r3, [r3, #17]
 80152ae:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	691d      	ldr	r5, [r3, #16]
 80152b6:	682b      	ldr	r3, [r5, #0]
 80152b8:	f857 0b04 	ldr.w	r0, [r7], #4
 80152bc:	4798      	blx	r3
 80152be:	3c01      	subs	r4, #1
 80152c0:	f826 0f02 	strh.w	r0, [r6, #2]!
 80152c4:	d1f0      	bne.n	80152a8 <_Color2IndexBulk+0x8c>
 80152c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ca:	bf00      	nop
 80152cc:	20000018 	.word	0x20000018
 80152d0:	20000348 	.word	0x20000348

080152d4 <_Index2ColorBulk>:
 80152d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152d8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8015384 <_Index2ColorBulk+0xb0>
 80152dc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8015388 <_Index2ColorBulk+0xb4>
 80152e0:	f8d9 5000 	ldr.w	r5, [r9]
 80152e4:	7c6d      	ldrb	r5, [r5, #17]
 80152e6:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80152ea:	682d      	ldr	r5, [r5, #0]
 80152ec:	692d      	ldr	r5, [r5, #16]
 80152ee:	696e      	ldr	r6, [r5, #20]
 80152f0:	b11e      	cbz	r6, 80152fa <_Index2ColorBulk+0x26>
 80152f2:	46b4      	mov	ip, r6
 80152f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f8:	4760      	bx	ip
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	4607      	mov	r7, r0
 80152fe:	468e      	mov	lr, r1
 8015300:	4614      	mov	r4, r2
 8015302:	d02b      	beq.n	801535c <_Index2ColorBulk+0x88>
 8015304:	2b04      	cmp	r3, #4
 8015306:	d016      	beq.n	8015336 <_Index2ColorBulk+0x62>
 8015308:	2b01      	cmp	r3, #1
 801530a:	d001      	beq.n	8015310 <_Index2ColorBulk+0x3c>
 801530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015310:	1f0e      	subs	r6, r1, #4
 8015312:	e006      	b.n	8015322 <_Index2ColorBulk+0x4e>
 8015314:	f8d9 3000 	ldr.w	r3, [r9]
 8015318:	7c5b      	ldrb	r3, [r3, #17]
 801531a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	691d      	ldr	r5, [r3, #16]
 8015322:	686b      	ldr	r3, [r5, #4]
 8015324:	f817 0b01 	ldrb.w	r0, [r7], #1
 8015328:	4798      	blx	r3
 801532a:	3c01      	subs	r4, #1
 801532c:	f846 0f04 	str.w	r0, [r6, #4]!
 8015330:	d1f0      	bne.n	8015314 <_Index2ColorBulk+0x40>
 8015332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015336:	1f0e      	subs	r6, r1, #4
 8015338:	e006      	b.n	8015348 <_Index2ColorBulk+0x74>
 801533a:	f8d9 3000 	ldr.w	r3, [r9]
 801533e:	7c5b      	ldrb	r3, [r3, #17]
 8015340:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	691d      	ldr	r5, [r3, #16]
 8015348:	686b      	ldr	r3, [r5, #4]
 801534a:	f857 0b04 	ldr.w	r0, [r7], #4
 801534e:	4798      	blx	r3
 8015350:	3c01      	subs	r4, #1
 8015352:	f846 0f04 	str.w	r0, [r6, #4]!
 8015356:	d1f0      	bne.n	801533a <_Index2ColorBulk+0x66>
 8015358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801535c:	1f0e      	subs	r6, r1, #4
 801535e:	e006      	b.n	801536e <_Index2ColorBulk+0x9a>
 8015360:	f8d9 3000 	ldr.w	r3, [r9]
 8015364:	7c5b      	ldrb	r3, [r3, #17]
 8015366:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	691d      	ldr	r5, [r3, #16]
 801536e:	686b      	ldr	r3, [r5, #4]
 8015370:	f837 0b02 	ldrh.w	r0, [r7], #2
 8015374:	4798      	blx	r3
 8015376:	3c01      	subs	r4, #1
 8015378:	f846 0f04 	str.w	r0, [r6, #4]!
 801537c:	d1f0      	bne.n	8015360 <_Index2ColorBulk+0x8c>
 801537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015382:	bf00      	nop
 8015384:	20000018 	.word	0x20000018
 8015388:	20000348 	.word	0x20000348

0801538c <_SetPixelIndex>:
 801538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015390:	6804      	ldr	r4, [r0, #0]
 8015392:	4698      	mov	r8, r3
 8015394:	460e      	mov	r6, r1
 8015396:	4617      	mov	r7, r2
 8015398:	68e3      	ldr	r3, [r4, #12]
 801539a:	4620      	mov	r0, r4
 801539c:	695b      	ldr	r3, [r3, #20]
 801539e:	4798      	blx	r3
 80153a0:	6923      	ldr	r3, [r4, #16]
 80153a2:	685b      	ldr	r3, [r3, #4]
 80153a4:	4798      	blx	r3
 80153a6:	6922      	ldr	r2, [r4, #16]
 80153a8:	4605      	mov	r5, r0
 80153aa:	4640      	mov	r0, r8
 80153ac:	6853      	ldr	r3, [r2, #4]
 80153ae:	4798      	blx	r3
 80153b0:	4b1a      	ldr	r3, [pc, #104]	; (801541c <_SetPixelIndex+0x90>)
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	b30b      	cbz	r3, 80153fa <_SetPixelIndex+0x6e>
 80153b6:	4602      	mov	r2, r0
 80153b8:	4819      	ldr	r0, [pc, #100]	; (8015420 <_SetPixelIndex+0x94>)
 80153ba:	491a      	ldr	r1, [pc, #104]	; (8015424 <_SetPixelIndex+0x98>)
 80153bc:	6800      	ldr	r0, [r0, #0]
 80153be:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 80153c2:	0e12      	lsrs	r2, r2, #24
 80153c4:	7c40      	ldrb	r0, [r0, #17]
 80153c6:	2aff      	cmp	r2, #255	; 0xff
 80153c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80153cc:	4816      	ldr	r0, [pc, #88]	; (8015428 <_SetPixelIndex+0x9c>)
 80153ce:	6989      	ldr	r1, [r1, #24]
 80153d0:	5c40      	ldrb	r0, [r0, r1]
 80153d2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80153d6:	d003      	beq.n	80153e0 <_SetPixelIndex+0x54>
 80153d8:	4b14      	ldr	r3, [pc, #80]	; (801542c <_SetPixelIndex+0xa0>)
 80153da:	4629      	mov	r1, r5
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	4798      	blx	r3
 80153e0:	6923      	ldr	r3, [r4, #16]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4798      	blx	r3
 80153e6:	68e5      	ldr	r5, [r4, #12]
 80153e8:	4603      	mov	r3, r0
 80153ea:	463a      	mov	r2, r7
 80153ec:	69ad      	ldr	r5, [r5, #24]
 80153ee:	4631      	mov	r1, r6
 80153f0:	4620      	mov	r0, r4
 80153f2:	46ac      	mov	ip, r5
 80153f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153f8:	4760      	bx	ip
 80153fa:	4a09      	ldr	r2, [pc, #36]	; (8015420 <_SetPixelIndex+0x94>)
 80153fc:	4629      	mov	r1, r5
 80153fe:	4b09      	ldr	r3, [pc, #36]	; (8015424 <_SetPixelIndex+0x98>)
 8015400:	6812      	ldr	r2, [r2, #0]
 8015402:	4d09      	ldr	r5, [pc, #36]	; (8015428 <_SetPixelIndex+0x9c>)
 8015404:	7c52      	ldrb	r2, [r2, #17]
 8015406:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801540a:	4b08      	ldr	r3, [pc, #32]	; (801542c <_SetPixelIndex+0xa0>)
 801540c:	6992      	ldr	r2, [r2, #24]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	5caa      	ldrb	r2, [r5, r2]
 8015412:	4798      	blx	r3
 8015414:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8015418:	e7e2      	b.n	80153e0 <_SetPixelIndex+0x54>
 801541a:	bf00      	nop
 801541c:	2002afb8 	.word	0x2002afb8
 8015420:	20000018 	.word	0x20000018
 8015424:	2002afd0 	.word	0x2002afd0
 8015428:	20000034 	.word	0x20000034
 801542c:	20000044 	.word	0x20000044

08015430 <_XorPixel>:
 8015430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015434:	4604      	mov	r4, r0
 8015436:	6800      	ldr	r0, [r0, #0]
 8015438:	460d      	mov	r5, r1
 801543a:	4617      	mov	r7, r2
 801543c:	68c3      	ldr	r3, [r0, #12]
 801543e:	695b      	ldr	r3, [r3, #20]
 8015440:	4798      	blx	r3
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	4606      	mov	r6, r0
 8015446:	691b      	ldr	r3, [r3, #16]
 8015448:	689b      	ldr	r3, [r3, #8]
 801544a:	4798      	blx	r3
 801544c:	463a      	mov	r2, r7
 801544e:	ea80 0306 	eor.w	r3, r0, r6
 8015452:	4629      	mov	r1, r5
 8015454:	4620      	mov	r0, r4
 8015456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801545a:	f7ff bf97 	b.w	801538c <_SetPixelIndex>
 801545e:	bf00      	nop

08015460 <_DrawHLine>:
 8015460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015464:	6806      	ldr	r6, [r0, #0]
 8015466:	1a5b      	subs	r3, r3, r1
 8015468:	4c60      	ldr	r4, [pc, #384]	; (80155ec <_DrawHLine+0x18c>)
 801546a:	b091      	sub	sp, #68	; 0x44
 801546c:	6937      	ldr	r7, [r6, #16]
 801546e:	1c5d      	adds	r5, r3, #1
 8015470:	68a6      	ldr	r6, [r4, #8]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	9606      	str	r6, [sp, #24]
 8015476:	683f      	ldr	r7, [r7, #0]
 8015478:	9302      	str	r3, [sp, #8]
 801547a:	462b      	mov	r3, r5
 801547c:	6966      	ldr	r6, [r4, #20]
 801547e:	900d      	str	r0, [sp, #52]	; 0x34
 8015480:	9601      	str	r6, [sp, #4]
 8015482:	9e06      	ldr	r6, [sp, #24]
 8015484:	910e      	str	r1, [sp, #56]	; 0x38
 8015486:	9600      	str	r6, [sp, #0]
 8015488:	4e59      	ldr	r6, [pc, #356]	; (80155f0 <_DrawHLine+0x190>)
 801548a:	920f      	str	r2, [sp, #60]	; 0x3c
 801548c:	f7ff fe70 	bl	8015170 <_GetLine>
 8015490:	6833      	ldr	r3, [r6, #0]
 8015492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015494:	6818      	ldr	r0, [r3, #0]
 8015496:	f002 fb7f 	bl	8017b98 <LCD_Index2Color>
 801549a:	2d00      	cmp	r5, #0
 801549c:	900b      	str	r0, [sp, #44]	; 0x2c
 801549e:	dd48      	ble.n	8015532 <_DrawHLine+0xd2>
 80154a0:	0e03      	lsrs	r3, r0, #24
 80154a2:	b2d9      	uxtb	r1, r3
 80154a4:	2bff      	cmp	r3, #255	; 0xff
 80154a6:	9108      	str	r1, [sp, #32]
 80154a8:	d068      	beq.n	801557c <_DrawHLine+0x11c>
 80154aa:	4b52      	ldr	r3, [pc, #328]	; (80155f4 <_DrawHLine+0x194>)
 80154ac:	f04f 0a00 	mov.w	sl, #0
 80154b0:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8015600 <_DrawHLine+0x1a0>
 80154b4:	9306      	str	r3, [sp, #24]
 80154b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154b8:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80155fc <_DrawHLine+0x19c>
 80154bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80154c0:	9507      	str	r5, [sp, #28]
 80154c2:	970a      	str	r7, [sp, #40]	; 0x28
 80154c4:	930c      	str	r3, [sp, #48]	; 0x30
 80154c6:	4b4c      	ldr	r3, [pc, #304]	; (80155f8 <_DrawHLine+0x198>)
 80154c8:	9309      	str	r3, [sp, #36]	; 0x24
 80154ca:	e018      	b.n	80154fe <_DrawHLine+0x9e>
 80154cc:	6830      	ldr	r0, [r6, #0]
 80154ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80154d0:	7c40      	ldrb	r0, [r0, #17]
 80154d2:	f8d9 3000 	ldr.w	r3, [r9]
 80154d6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80154da:	9d06      	ldr	r5, [sp, #24]
 80154dc:	6980      	ldr	r0, [r0, #24]
 80154de:	5c28      	ldrb	r0, [r5, r0]
 80154e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80154e2:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 80154e6:	4798      	blx	r3
 80154e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154ea:	f10a 0a01 	add.w	sl, sl, #1
 80154ee:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80154f2:	4798      	blx	r3
 80154f4:	9b07      	ldr	r3, [sp, #28]
 80154f6:	f848 0007 	str.w	r0, [r8, r7]
 80154fa:	459a      	cmp	sl, r3
 80154fc:	d018      	beq.n	8015530 <_DrawHLine+0xd0>
 80154fe:	6961      	ldr	r1, [r4, #20]
 8015500:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8015504:	f89b 3000 	ldrb.w	r3, [fp]
 8015508:	9a08      	ldr	r2, [sp, #32]
 801550a:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1dc      	bne.n	80154cc <_DrawHLine+0x6c>
 8015512:	6832      	ldr	r2, [r6, #0]
 8015514:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015516:	7c52      	ldrb	r2, [r2, #17]
 8015518:	f8d9 3000 	ldr.w	r3, [r9]
 801551c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8015520:	9d06      	ldr	r5, [sp, #24]
 8015522:	6992      	ldr	r2, [r2, #24]
 8015524:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015526:	5caa      	ldrb	r2, [r5, r2]
 8015528:	4798      	blx	r3
 801552a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801552e:	e7db      	b.n	80154e8 <_DrawHLine+0x88>
 8015530:	461d      	mov	r5, r3
 8015532:	6833      	ldr	r3, [r6, #0]
 8015534:	7c58      	ldrb	r0, [r3, #17]
 8015536:	f002 fcd1 	bl	8017edc <LCD_GetBitsPerPixelEx>
 801553a:	2818      	cmp	r0, #24
 801553c:	bf14      	ite	ne
 801553e:	4606      	movne	r6, r0
 8015540:	2620      	moveq	r6, #32
 8015542:	4629      	mov	r1, r5
 8015544:	68a0      	ldr	r0, [r4, #8]
 8015546:	4632      	mov	r2, r6
 8015548:	f001 fa0a 	bl	8016960 <GUI__CompactPixelIndices>
 801554c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801554e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8015552:	f04f 0e01 	mov.w	lr, #1
 8015556:	6818      	ldr	r0, [r3, #0]
 8015558:	2400      	movs	r4, #0
 801555a:	462b      	mov	r3, r5
 801555c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801555e:	68c7      	ldr	r7, [r0, #12]
 8015560:	f8cd c00c 	str.w	ip, [sp, #12]
 8015564:	9601      	str	r6, [sp, #4]
 8015566:	9405      	str	r4, [sp, #20]
 8015568:	9404      	str	r4, [sp, #16]
 801556a:	9402      	str	r4, [sp, #8]
 801556c:	f8cd e000 	str.w	lr, [sp]
 8015570:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015572:	687c      	ldr	r4, [r7, #4]
 8015574:	47a0      	blx	r4
 8015576:	b011      	add	sp, #68	; 0x44
 8015578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801557c:	4b1d      	ldr	r3, [pc, #116]	; (80155f4 <_DrawHLine+0x194>)
 801557e:	f04f 0900 	mov.w	r9, #0
 8015582:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8015600 <_DrawHLine+0x1a0>
 8015586:	9306      	str	r3, [sp, #24]
 8015588:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 801558c:	9707      	str	r7, [sp, #28]
 801558e:	9308      	str	r3, [sp, #32]
 8015590:	4b19      	ldr	r3, [pc, #100]	; (80155f8 <_DrawHLine+0x198>)
 8015592:	469a      	mov	sl, r3
 8015594:	e012      	b.n	80155bc <_DrawHLine+0x15c>
 8015596:	6833      	ldr	r3, [r6, #0]
 8015598:	9a06      	ldr	r2, [sp, #24]
 801559a:	7c5b      	ldrb	r3, [r3, #17]
 801559c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80155a0:	699b      	ldr	r3, [r3, #24]
 80155a2:	5cd0      	ldrb	r0, [r2, r3]
 80155a4:	9b08      	ldr	r3, [sp, #32]
 80155a6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80155aa:	f109 0901 	add.w	r9, r9, #1
 80155ae:	9b07      	ldr	r3, [sp, #28]
 80155b0:	68a7      	ldr	r7, [r4, #8]
 80155b2:	4798      	blx	r3
 80155b4:	45a9      	cmp	r9, r5
 80155b6:	f847 0008 	str.w	r0, [r7, r8]
 80155ba:	d0ba      	beq.n	8015532 <_DrawHLine+0xd2>
 80155bc:	6962      	ldr	r2, [r4, #20]
 80155be:	ea4f 0889 	mov.w	r8, r9, lsl #2
 80155c2:	f89b 3000 	ldrb.w	r3, [fp]
 80155c6:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d1e3      	bne.n	8015596 <_DrawHLine+0x136>
 80155ce:	6832      	ldr	r2, [r6, #0]
 80155d0:	9f06      	ldr	r7, [sp, #24]
 80155d2:	7c52      	ldrb	r2, [r2, #17]
 80155d4:	4b09      	ldr	r3, [pc, #36]	; (80155fc <_DrawHLine+0x19c>)
 80155d6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	6992      	ldr	r2, [r2, #24]
 80155de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80155e0:	5cba      	ldrb	r2, [r7, r2]
 80155e2:	4798      	blx	r3
 80155e4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80155e8:	e7df      	b.n	80155aa <_DrawHLine+0x14a>
 80155ea:	bf00      	nop
 80155ec:	20000348 	.word	0x20000348
 80155f0:	20000018 	.word	0x20000018
 80155f4:	20000034 	.word	0x20000034
 80155f8:	2002afd0 	.word	0x2002afd0
 80155fc:	20000044 	.word	0x20000044
 8015600:	2002afb8 	.word	0x2002afb8

08015604 <_FillRect>:
 8015604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015608:	9d06      	ldr	r5, [sp, #24]
 801560a:	42aa      	cmp	r2, r5
 801560c:	dc0c      	bgt.n	8015628 <_FillRect+0x24>
 801560e:	4614      	mov	r4, r2
 8015610:	4680      	mov	r8, r0
 8015612:	460f      	mov	r7, r1
 8015614:	461e      	mov	r6, r3
 8015616:	4622      	mov	r2, r4
 8015618:	3401      	adds	r4, #1
 801561a:	4633      	mov	r3, r6
 801561c:	4639      	mov	r1, r7
 801561e:	4640      	mov	r0, r8
 8015620:	f7ff ff1e 	bl	8015460 <_DrawHLine>
 8015624:	42a5      	cmp	r5, r4
 8015626:	daf6      	bge.n	8015616 <_FillRect+0x12>
 8015628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801562c <_DrawVLine>:
 801562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015630:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80157cc <_DrawVLine+0x1a0>
 8015634:	460e      	mov	r6, r1
 8015636:	4699      	mov	r9, r3
 8015638:	b085      	sub	sp, #20
 801563a:	f8d8 1000 	ldr.w	r1, [r8]
 801563e:	4607      	mov	r7, r0
 8015640:	4614      	mov	r4, r2
 8015642:	7c0b      	ldrb	r3, [r1, #16]
 8015644:	07db      	lsls	r3, r3, #31
 8015646:	d456      	bmi.n	80156f6 <_DrawVLine+0xca>
 8015648:	454a      	cmp	r2, r9
 801564a:	dc56      	bgt.n	80156fa <_DrawVLine+0xce>
 801564c:	4b5b      	ldr	r3, [pc, #364]	; (80157bc <_DrawVLine+0x190>)
 801564e:	4682      	mov	sl, r0
 8015650:	9301      	str	r3, [sp, #4]
 8015652:	4b5b      	ldr	r3, [pc, #364]	; (80157c0 <_DrawVLine+0x194>)
 8015654:	9302      	str	r3, [sp, #8]
 8015656:	4b5b      	ldr	r3, [pc, #364]	; (80157c4 <_DrawVLine+0x198>)
 8015658:	9303      	str	r3, [sp, #12]
 801565a:	e023      	b.n	80156a4 <_DrawVLine+0x78>
 801565c:	f8d8 0000 	ldr.w	r0, [r8]
 8015660:	2bff      	cmp	r3, #255	; 0xff
 8015662:	9f03      	ldr	r7, [sp, #12]
 8015664:	461a      	mov	r2, r3
 8015666:	7c40      	ldrb	r0, [r0, #17]
 8015668:	4659      	mov	r1, fp
 801566a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801566e:	9f02      	ldr	r7, [sp, #8]
 8015670:	6980      	ldr	r0, [r0, #24]
 8015672:	5c38      	ldrb	r0, [r7, r0]
 8015674:	ea4e 6700 	orr.w	r7, lr, r0, lsl #24
 8015678:	4638      	mov	r0, r7
 801567a:	d003      	beq.n	8015684 <_DrawVLine+0x58>
 801567c:	4b52      	ldr	r3, [pc, #328]	; (80157c8 <_DrawVLine+0x19c>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	4798      	blx	r3
 8015682:	4607      	mov	r7, r0
 8015684:	692b      	ldr	r3, [r5, #16]
 8015686:	4638      	mov	r0, r7
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	4798      	blx	r3
 801568c:	68e9      	ldr	r1, [r5, #12]
 801568e:	4622      	mov	r2, r4
 8015690:	3401      	adds	r4, #1
 8015692:	4603      	mov	r3, r0
 8015694:	698f      	ldr	r7, [r1, #24]
 8015696:	4628      	mov	r0, r5
 8015698:	4631      	mov	r1, r6
 801569a:	47b8      	blx	r7
 801569c:	45a1      	cmp	r9, r4
 801569e:	db2c      	blt.n	80156fa <_DrawVLine+0xce>
 80156a0:	f8d8 1000 	ldr.w	r1, [r8]
 80156a4:	f8da 5000 	ldr.w	r5, [sl]
 80156a8:	4622      	mov	r2, r4
 80156aa:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 80156ac:	4631      	mov	r1, r6
 80156ae:	68eb      	ldr	r3, [r5, #12]
 80156b0:	4628      	mov	r0, r5
 80156b2:	683f      	ldr	r7, [r7, #0]
 80156b4:	695b      	ldr	r3, [r3, #20]
 80156b6:	4798      	blx	r3
 80156b8:	692b      	ldr	r3, [r5, #16]
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	4798      	blx	r3
 80156be:	692b      	ldr	r3, [r5, #16]
 80156c0:	4683      	mov	fp, r0
 80156c2:	4638      	mov	r0, r7
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	4798      	blx	r3
 80156c8:	9a01      	ldr	r2, [sp, #4]
 80156ca:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 80156ce:	0e03      	lsrs	r3, r0, #24
 80156d0:	7812      	ldrb	r2, [r2, #0]
 80156d2:	2a00      	cmp	r2, #0
 80156d4:	d1c2      	bne.n	801565c <_DrawVLine+0x30>
 80156d6:	f8d8 2000 	ldr.w	r2, [r8]
 80156da:	4659      	mov	r1, fp
 80156dc:	9f03      	ldr	r7, [sp, #12]
 80156de:	7c52      	ldrb	r2, [r2, #17]
 80156e0:	4b39      	ldr	r3, [pc, #228]	; (80157c8 <_DrawVLine+0x19c>)
 80156e2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80156e6:	9f02      	ldr	r7, [sp, #8]
 80156e8:	6992      	ldr	r2, [r2, #24]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	5cba      	ldrb	r2, [r7, r2]
 80156ee:	4798      	blx	r3
 80156f0:	f040 477f 	orr.w	r7, r0, #4278190080	; 0xff000000
 80156f4:	e7c6      	b.n	8015684 <_DrawVLine+0x58>
 80156f6:	454a      	cmp	r2, r9
 80156f8:	dd02      	ble.n	8015700 <_DrawVLine+0xd4>
 80156fa:	b005      	add	sp, #20
 80156fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015700:	4b2e      	ldr	r3, [pc, #184]	; (80157bc <_DrawVLine+0x190>)
 8015702:	9600      	str	r6, [sp, #0]
 8015704:	9301      	str	r3, [sp, #4]
 8015706:	4b2e      	ldr	r3, [pc, #184]	; (80157c0 <_DrawVLine+0x194>)
 8015708:	9302      	str	r3, [sp, #8]
 801570a:	4b2e      	ldr	r3, [pc, #184]	; (80157c4 <_DrawVLine+0x198>)
 801570c:	9303      	str	r3, [sp, #12]
 801570e:	e022      	b.n	8015756 <_DrawVLine+0x12a>
 8015710:	f8d8 0000 	ldr.w	r0, [r8]
 8015714:	2bff      	cmp	r3, #255	; 0xff
 8015716:	9e03      	ldr	r6, [sp, #12]
 8015718:	461a      	mov	r2, r3
 801571a:	7c40      	ldrb	r0, [r0, #17]
 801571c:	4651      	mov	r1, sl
 801571e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8015722:	9e02      	ldr	r6, [sp, #8]
 8015724:	6980      	ldr	r0, [r0, #24]
 8015726:	5c30      	ldrb	r0, [r6, r0]
 8015728:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 801572c:	4670      	mov	r0, lr
 801572e:	d003      	beq.n	8015738 <_DrawVLine+0x10c>
 8015730:	4b25      	ldr	r3, [pc, #148]	; (80157c8 <_DrawVLine+0x19c>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	4798      	blx	r3
 8015736:	4686      	mov	lr, r0
 8015738:	692b      	ldr	r3, [r5, #16]
 801573a:	4670      	mov	r0, lr
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	4798      	blx	r3
 8015740:	68e9      	ldr	r1, [r5, #12]
 8015742:	4622      	mov	r2, r4
 8015744:	3401      	adds	r4, #1
 8015746:	4603      	mov	r3, r0
 8015748:	f8d1 b018 	ldr.w	fp, [r1, #24]
 801574c:	4628      	mov	r0, r5
 801574e:	9900      	ldr	r1, [sp, #0]
 8015750:	47d8      	blx	fp
 8015752:	45a1      	cmp	r9, r4
 8015754:	dbd1      	blt.n	80156fa <_DrawVLine+0xce>
 8015756:	6838      	ldr	r0, [r7, #0]
 8015758:	4622      	mov	r2, r4
 801575a:	9900      	ldr	r1, [sp, #0]
 801575c:	68c3      	ldr	r3, [r0, #12]
 801575e:	695b      	ldr	r3, [r3, #20]
 8015760:	4798      	blx	r3
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	4683      	mov	fp, r0
 8015766:	691b      	ldr	r3, [r3, #16]
 8015768:	689b      	ldr	r3, [r3, #8]
 801576a:	4798      	blx	r3
 801576c:	683d      	ldr	r5, [r7, #0]
 801576e:	4622      	mov	r2, r4
 8015770:	9900      	ldr	r1, [sp, #0]
 8015772:	68eb      	ldr	r3, [r5, #12]
 8015774:	ea8b 0b00 	eor.w	fp, fp, r0
 8015778:	4628      	mov	r0, r5
 801577a:	695b      	ldr	r3, [r3, #20]
 801577c:	4798      	blx	r3
 801577e:	692b      	ldr	r3, [r5, #16]
 8015780:	685b      	ldr	r3, [r3, #4]
 8015782:	4798      	blx	r3
 8015784:	692b      	ldr	r3, [r5, #16]
 8015786:	4682      	mov	sl, r0
 8015788:	4658      	mov	r0, fp
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	4798      	blx	r3
 801578e:	9a01      	ldr	r2, [sp, #4]
 8015790:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8015794:	0e03      	lsrs	r3, r0, #24
 8015796:	7812      	ldrb	r2, [r2, #0]
 8015798:	2a00      	cmp	r2, #0
 801579a:	d1b9      	bne.n	8015710 <_DrawVLine+0xe4>
 801579c:	f8d8 2000 	ldr.w	r2, [r8]
 80157a0:	4651      	mov	r1, sl
 80157a2:	9e03      	ldr	r6, [sp, #12]
 80157a4:	7c52      	ldrb	r2, [r2, #17]
 80157a6:	4b08      	ldr	r3, [pc, #32]	; (80157c8 <_DrawVLine+0x19c>)
 80157a8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80157ac:	9e02      	ldr	r6, [sp, #8]
 80157ae:	6992      	ldr	r2, [r2, #24]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	5cb2      	ldrb	r2, [r6, r2]
 80157b4:	4798      	blx	r3
 80157b6:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 80157ba:	e7bd      	b.n	8015738 <_DrawVLine+0x10c>
 80157bc:	2002afb8 	.word	0x2002afb8
 80157c0:	20000034 	.word	0x20000034
 80157c4:	2002afd0 	.word	0x2002afd0
 80157c8:	20000044 	.word	0x20000044
 80157cc:	20000018 	.word	0x20000018

080157d0 <_DrawBitmap>:
 80157d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d4:	b093      	sub	sp, #76	; 0x4c
 80157d6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80157d8:	2c00      	cmp	r4, #0
 80157da:	dd32      	ble.n	8015842 <_DrawBitmap+0x72>
 80157dc:	930c      	str	r3, [sp, #48]	; 0x30
 80157de:	2300      	movs	r3, #0
 80157e0:	920e      	str	r2, [sp, #56]	; 0x38
 80157e2:	461a      	mov	r2, r3
 80157e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80157e6:	9110      	str	r1, [sp, #64]	; 0x40
 80157e8:	3b01      	subs	r3, #1
 80157ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80157ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80157ee:	2b1f      	cmp	r3, #31
 80157f0:	d821      	bhi.n	8015836 <_DrawBitmap+0x66>
 80157f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80157f6:	0029      	.short	0x0029
 80157f8:	002001fb 	.word	0x002001fb
 80157fc:	00200223 	.word	0x00200223
 8015800:	00200020 	.word	0x00200020
 8015804:	0020024b 	.word	0x0020024b
 8015808:	00200020 	.word	0x00200020
 801580c:	00200020 	.word	0x00200020
 8015810:	00200020 	.word	0x00200020
 8015814:	00200193 	.word	0x00200193
 8015818:	00200020 	.word	0x00200020
 801581c:	00200020 	.word	0x00200020
 8015820:	00200020 	.word	0x00200020
 8015824:	00200020 	.word	0x00200020
 8015828:	00200020 	.word	0x00200020
 801582c:	00200020 	.word	0x00200020
 8015830:	00200020 	.word	0x00200020
 8015834:	0271      	.short	0x0271
 8015836:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015838:	3201      	adds	r2, #1
 801583a:	4401      	add	r1, r0
 801583c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801583e:	4290      	cmp	r0, r2
 8015840:	dcd5      	bgt.n	80157ee <_DrawBitmap+0x1e>
 8015842:	b013      	add	sp, #76	; 0x4c
 8015844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015848:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801584a:	9209      	str	r2, [sp, #36]	; 0x24
 801584c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801584e:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8015b18 <_DrawBitmap+0x348>
 8015852:	4413      	add	r3, r2
 8015854:	4fab      	ldr	r7, [pc, #684]	; (8015b04 <_DrawBitmap+0x334>)
 8015856:	911f      	str	r1, [sp, #124]	; 0x7c
 8015858:	9310      	str	r3, [sp, #64]	; 0x40
 801585a:	f8db 3000 	ldr.w	r3, [fp]
 801585e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015860:	7c1b      	ldrb	r3, [r3, #16]
 8015862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015864:	f003 0303 	and.w	r3, r3, #3
 8015868:	440a      	add	r2, r1
 801586a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801586c:	2b02      	cmp	r3, #2
 801586e:	920d      	str	r2, [sp, #52]	; 0x34
 8015870:	684e      	ldr	r6, [r1, #4]
 8015872:	f000 80dc 	beq.w	8015a2e <_DrawBitmap+0x25e>
 8015876:	2b03      	cmp	r3, #3
 8015878:	f000 8093 	beq.w	80159a2 <_DrawBitmap+0x1d2>
 801587c:	2b01      	cmp	r3, #1
 801587e:	f000 8090 	beq.w	80159a2 <_DrawBitmap+0x1d2>
 8015882:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015884:	f04f 0a00 	mov.w	sl, #0
 8015888:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801588a:	6801      	ldr	r1, [r0, #0]
 801588c:	462b      	mov	r3, r5
 801588e:	690c      	ldr	r4, [r1, #16]
 8015890:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015892:	e894 0110 	ldmia.w	r4, {r4, r8}
 8015896:	f8cd 8008 	str.w	r8, [sp, #8]
 801589a:	9408      	str	r4, [sp, #32]
 801589c:	697c      	ldr	r4, [r7, #20]
 801589e:	9401      	str	r4, [sp, #4]
 80158a0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80158a2:	9407      	str	r4, [sp, #28]
 80158a4:	68bc      	ldr	r4, [r7, #8]
 80158a6:	9400      	str	r4, [sp, #0]
 80158a8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80158aa:	f8d4 9000 	ldr.w	r9, [r4]
 80158ae:	f7ff fc5f 	bl	8015170 <_GetLine>
 80158b2:	4648      	mov	r0, r9
 80158b4:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8015b14 <_DrawBitmap+0x344>
 80158b8:	47c0      	blx	r8
 80158ba:	900a      	str	r0, [sp, #40]	; 0x28
 80158bc:	4630      	mov	r0, r6
 80158be:	47c0      	blx	r8
 80158c0:	9c07      	ldr	r4, [sp, #28]
 80158c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80158c4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80158c6:	9507      	str	r5, [sp, #28]
 80158c8:	e023      	b.n	8015912 <_DrawBitmap+0x142>
 80158ca:	0e03      	lsrs	r3, r0, #24
 80158cc:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 80158d0:	4d8d      	ldr	r5, [pc, #564]	; (8015b08 <_DrawBitmap+0x338>)
 80158d2:	7c50      	ldrb	r0, [r2, #17]
 80158d4:	2bff      	cmp	r3, #255	; 0xff
 80158d6:	461a      	mov	r2, r3
 80158d8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80158dc:	4d8b      	ldr	r5, [pc, #556]	; (8015b0c <_DrawBitmap+0x33c>)
 80158de:	6980      	ldr	r0, [r0, #24]
 80158e0:	5c28      	ldrb	r0, [r5, r0]
 80158e2:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 80158e6:	4670      	mov	r0, lr
 80158e8:	d003      	beq.n	80158f2 <_DrawBitmap+0x122>
 80158ea:	f8d9 3000 	ldr.w	r3, [r9]
 80158ee:	4798      	blx	r3
 80158f0:	4686      	mov	lr, r0
 80158f2:	3401      	adds	r4, #1
 80158f4:	4670      	mov	r0, lr
 80158f6:	9b08      	ldr	r3, [sp, #32]
 80158f8:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80158fc:	4798      	blx	r3
 80158fe:	2c08      	cmp	r4, #8
 8015900:	f848 000a 	str.w	r0, [r8, sl]
 8015904:	f10a 0a04 	add.w	sl, sl, #4
 8015908:	d021      	beq.n	801594e <_DrawBitmap+0x17e>
 801590a:	9b07      	ldr	r3, [sp, #28]
 801590c:	3b01      	subs	r3, #1
 801590e:	9307      	str	r3, [sp, #28]
 8015910:	d023      	beq.n	801595a <_DrawBitmap+0x18a>
 8015912:	2380      	movs	r3, #128	; 0x80
 8015914:	7831      	ldrb	r1, [r6, #0]
 8015916:	697a      	ldr	r2, [r7, #20]
 8015918:	4123      	asrs	r3, r4
 801591a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801591c:	4219      	tst	r1, r3
 801591e:	4b7c      	ldr	r3, [pc, #496]	; (8015b10 <_DrawBitmap+0x340>)
 8015920:	f852 100a 	ldr.w	r1, [r2, sl]
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015928:	bf08      	it	eq
 801592a:	4610      	moveq	r0, r2
 801592c:	f8db 2000 	ldr.w	r2, [fp]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d1ca      	bne.n	80158ca <_DrawBitmap+0xfa>
 8015934:	7c52      	ldrb	r2, [r2, #17]
 8015936:	4d74      	ldr	r5, [pc, #464]	; (8015b08 <_DrawBitmap+0x338>)
 8015938:	f8d9 3000 	ldr.w	r3, [r9]
 801593c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8015940:	4d72      	ldr	r5, [pc, #456]	; (8015b0c <_DrawBitmap+0x33c>)
 8015942:	6992      	ldr	r2, [r2, #24]
 8015944:	5caa      	ldrb	r2, [r5, r2]
 8015946:	4798      	blx	r3
 8015948:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 801594c:	e7d1      	b.n	80158f2 <_DrawBitmap+0x122>
 801594e:	9b07      	ldr	r3, [sp, #28]
 8015950:	3601      	adds	r6, #1
 8015952:	2400      	movs	r4, #0
 8015954:	3b01      	subs	r3, #1
 8015956:	9307      	str	r3, [sp, #28]
 8015958:	d1db      	bne.n	8015912 <_DrawBitmap+0x142>
 801595a:	461d      	mov	r5, r3
 801595c:	f8db 3000 	ldr.w	r3, [fp]
 8015960:	7c58      	ldrb	r0, [r3, #17]
 8015962:	f002 fabb 	bl	8017edc <LCD_GetBitsPerPixelEx>
 8015966:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801596a:	2818      	cmp	r0, #24
 801596c:	bf14      	ite	ne
 801596e:	4606      	movne	r6, r0
 8015970:	2620      	moveq	r6, #32
 8015972:	68b8      	ldr	r0, [r7, #8]
 8015974:	4641      	mov	r1, r8
 8015976:	4632      	mov	r2, r6
 8015978:	f000 fff2 	bl	8016960 <GUI__CompactPixelIndices>
 801597c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801597e:	f04f 0c01 	mov.w	ip, #1
 8015982:	4643      	mov	r3, r8
 8015984:	6810      	ldr	r0, [r2, #0]
 8015986:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015988:	68c4      	ldr	r4, [r0, #12]
 801598a:	9601      	str	r6, [sp, #4]
 801598c:	9505      	str	r5, [sp, #20]
 801598e:	9504      	str	r5, [sp, #16]
 8015990:	9502      	str	r5, [sp, #8]
 8015992:	68bd      	ldr	r5, [r7, #8]
 8015994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015996:	9503      	str	r5, [sp, #12]
 8015998:	f8cd c000 	str.w	ip, [sp]
 801599c:	6864      	ldr	r4, [r4, #4]
 801599e:	47a0      	blx	r4
 80159a0:	e039      	b.n	8015a16 <_DrawBitmap+0x246>
 80159a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159a4:	f04f 0980 	mov.w	r9, #128	; 0x80
 80159a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80159aa:	691b      	ldr	r3, [r3, #16]
 80159ac:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80159ae:	689b      	ldr	r3, [r3, #8]
 80159b0:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 80159b4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80159b6:	4798      	blx	r3
 80159b8:	f8cd b020 	str.w	fp, [sp, #32]
 80159bc:	9007      	str	r0, [sp, #28]
 80159be:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80159c2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80159c6:	e005      	b.n	80159d4 <_DrawBitmap+0x204>
 80159c8:	2c08      	cmp	r4, #8
 80159ca:	f106 0601 	add.w	r6, r6, #1
 80159ce:	d01a      	beq.n	8015a06 <_DrawBitmap+0x236>
 80159d0:	3d01      	subs	r5, #1
 80159d2:	d01e      	beq.n	8015a12 <_DrawBitmap+0x242>
 80159d4:	fa49 f304 	asr.w	r3, r9, r4
 80159d8:	f898 2000 	ldrb.w	r2, [r8]
 80159dc:	3401      	adds	r4, #1
 80159de:	421a      	tst	r2, r3
 80159e0:	d0f2      	beq.n	80159c8 <_DrawBitmap+0x1f8>
 80159e2:	f8db 0000 	ldr.w	r0, [fp]
 80159e6:	4631      	mov	r1, r6
 80159e8:	4652      	mov	r2, sl
 80159ea:	68c3      	ldr	r3, [r0, #12]
 80159ec:	695b      	ldr	r3, [r3, #20]
 80159ee:	4798      	blx	r3
 80159f0:	9b07      	ldr	r3, [sp, #28]
 80159f2:	4631      	mov	r1, r6
 80159f4:	4652      	mov	r2, sl
 80159f6:	4043      	eors	r3, r0
 80159f8:	4658      	mov	r0, fp
 80159fa:	f7ff fcc7 	bl	801538c <_SetPixelIndex>
 80159fe:	2c08      	cmp	r4, #8
 8015a00:	f106 0601 	add.w	r6, r6, #1
 8015a04:	d1e4      	bne.n	80159d0 <_DrawBitmap+0x200>
 8015a06:	3d01      	subs	r5, #1
 8015a08:	f108 0801 	add.w	r8, r8, #1
 8015a0c:	f04f 0400 	mov.w	r4, #0
 8015a10:	d1e0      	bne.n	80159d4 <_DrawBitmap+0x204>
 8015a12:	f8dd b020 	ldr.w	fp, [sp, #32]
 8015a16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015a18:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a1c:	440a      	add	r2, r1
 8015a1e:	3301      	adds	r3, #1
 8015a20:	921f      	str	r2, [sp, #124]	; 0x7c
 8015a22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015a24:	9309      	str	r3, [sp, #36]	; 0x24
 8015a26:	429a      	cmp	r2, r3
 8015a28:	f73f af17 	bgt.w	801585a <_DrawBitmap+0x8a>
 8015a2c:	e709      	b.n	8015842 <_DrawBitmap+0x72>
 8015a2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015a30:	697c      	ldr	r4, [r7, #20]
 8015a32:	6801      	ldr	r1, [r0, #0]
 8015a34:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8015a38:	690d      	ldr	r5, [r1, #16]
 8015a3a:	4673      	mov	r3, lr
 8015a3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015a3e:	e895 0120 	ldmia.w	r5, {r5, r8}
 8015a42:	9401      	str	r4, [sp, #4]
 8015a44:	f8cd 8008 	str.w	r8, [sp, #8]
 8015a48:	68bc      	ldr	r4, [r7, #8]
 8015a4a:	9507      	str	r5, [sp, #28]
 8015a4c:	4675      	mov	r5, lr
 8015a4e:	9400      	str	r4, [sp, #0]
 8015a50:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015a52:	f7ff fb8d 	bl	8015170 <_GetLine>
 8015a56:	4630      	mov	r0, r6
 8015a58:	2600      	movs	r6, #0
 8015a5a:	47c0      	blx	r8
 8015a5c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8015a60:	0e03      	lsrs	r3, r0, #24
 8015a62:	4681      	mov	r9, r0
 8015a64:	9308      	str	r3, [sp, #32]
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	930a      	str	r3, [sp, #40]	; 0x28
 8015a6a:	e006      	b.n	8015a7a <_DrawBitmap+0x2aa>
 8015a6c:	3401      	adds	r4, #1
 8015a6e:	3604      	adds	r6, #4
 8015a70:	2c08      	cmp	r4, #8
 8015a72:	d031      	beq.n	8015ad8 <_DrawBitmap+0x308>
 8015a74:	3d01      	subs	r5, #1
 8015a76:	f43f af71 	beq.w	801595c <_DrawBitmap+0x18c>
 8015a7a:	2380      	movs	r3, #128	; 0x80
 8015a7c:	f898 2000 	ldrb.w	r2, [r8]
 8015a80:	4123      	asrs	r3, r4
 8015a82:	421a      	tst	r2, r3
 8015a84:	d0f2      	beq.n	8015a6c <_DrawBitmap+0x29c>
 8015a86:	4a22      	ldr	r2, [pc, #136]	; (8015b10 <_DrawBitmap+0x340>)
 8015a88:	f029 4c7f 	bic.w	ip, r9, #4278190080	; 0xff000000
 8015a8c:	6979      	ldr	r1, [r7, #20]
 8015a8e:	7812      	ldrb	r2, [r2, #0]
 8015a90:	5989      	ldr	r1, [r1, r6]
 8015a92:	b32a      	cbz	r2, 8015ae0 <_DrawBitmap+0x310>
 8015a94:	f8db 0000 	ldr.w	r0, [fp]
 8015a98:	4b1b      	ldr	r3, [pc, #108]	; (8015b08 <_DrawBitmap+0x338>)
 8015a9a:	7c40      	ldrb	r0, [r0, #17]
 8015a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a9e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015aa2:	4b1a      	ldr	r3, [pc, #104]	; (8015b0c <_DrawBitmap+0x33c>)
 8015aa4:	6980      	ldr	r0, [r0, #24]
 8015aa6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8015b14 <_DrawBitmap+0x344>
 8015aaa:	5c18      	ldrb	r0, [r3, r0]
 8015aac:	ea4c 6300 	orr.w	r3, ip, r0, lsl #24
 8015ab0:	9808      	ldr	r0, [sp, #32]
 8015ab2:	28ff      	cmp	r0, #255	; 0xff
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	d003      	beq.n	8015ac0 <_DrawBitmap+0x2f0>
 8015ab8:	f8de 3000 	ldr.w	r3, [lr]
 8015abc:	4798      	blx	r3
 8015abe:	4603      	mov	r3, r0
 8015ac0:	3401      	adds	r4, #1
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	9b07      	ldr	r3, [sp, #28]
 8015ac6:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015aca:	4798      	blx	r3
 8015acc:	2c08      	cmp	r4, #8
 8015ace:	f84a 0006 	str.w	r0, [sl, r6]
 8015ad2:	f106 0604 	add.w	r6, r6, #4
 8015ad6:	d1cd      	bne.n	8015a74 <_DrawBitmap+0x2a4>
 8015ad8:	f108 0801 	add.w	r8, r8, #1
 8015adc:	2400      	movs	r4, #0
 8015ade:	e7c9      	b.n	8015a74 <_DrawBitmap+0x2a4>
 8015ae0:	f8db 2000 	ldr.w	r2, [fp]
 8015ae4:	4648      	mov	r0, r9
 8015ae6:	4b0b      	ldr	r3, [pc, #44]	; (8015b14 <_DrawBitmap+0x344>)
 8015ae8:	7c52      	ldrb	r2, [r2, #17]
 8015aea:	f8d3 c000 	ldr.w	ip, [r3]
 8015aee:	4b06      	ldr	r3, [pc, #24]	; (8015b08 <_DrawBitmap+0x338>)
 8015af0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015af4:	4b05      	ldr	r3, [pc, #20]	; (8015b0c <_DrawBitmap+0x33c>)
 8015af6:	6992      	ldr	r2, [r2, #24]
 8015af8:	5c9a      	ldrb	r2, [r3, r2]
 8015afa:	47e0      	blx	ip
 8015afc:	f040 437f 	orr.w	r3, r0, #4278190080	; 0xff000000
 8015b00:	e7de      	b.n	8015ac0 <_DrawBitmap+0x2f0>
 8015b02:	bf00      	nop
 8015b04:	20000348 	.word	0x20000348
 8015b08:	2002afd0 	.word	0x2002afd0
 8015b0c:	20000034 	.word	0x20000034
 8015b10:	2002afb8 	.word	0x2002afb8
 8015b14:	20000044 	.word	0x20000044
 8015b18:	20000018 	.word	0x20000018
 8015b1c:	4ba2      	ldr	r3, [pc, #648]	; (8015da8 <_DrawBitmap+0x5d8>)
 8015b1e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8015db4 <_DrawBitmap+0x5e4>
 8015b22:	930d      	str	r3, [sp, #52]	; 0x34
 8015b24:	f8df b290 	ldr.w	fp, [pc, #656]	; 8015db8 <_DrawBitmap+0x5e8>
 8015b28:	46ca      	mov	sl, r9
 8015b2a:	4ba0      	ldr	r3, [pc, #640]	; (8015dac <_DrawBitmap+0x5dc>)
 8015b2c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8015dbc <_DrawBitmap+0x5ec>
 8015b30:	9209      	str	r2, [sp, #36]	; 0x24
 8015b32:	911f      	str	r1, [sp, #124]	; 0x7c
 8015b34:	9308      	str	r3, [sp, #32]
 8015b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b3c:	6802      	ldr	r2, [r0, #0]
 8015b3e:	440b      	add	r3, r1
 8015b40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b42:	6916      	ldr	r6, [r2, #16]
 8015b44:	461d      	mov	r5, r3
 8015b46:	694c      	ldr	r4, [r1, #20]
 8015b48:	6877      	ldr	r7, [r6, #4]
 8015b4a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8015b4e:	462a      	mov	r2, r5
 8015b50:	688d      	ldr	r5, [r1, #8]
 8015b52:	6836      	ldr	r6, [r6, #0]
 8015b54:	9311      	str	r3, [sp, #68]	; 0x44
 8015b56:	4673      	mov	r3, lr
 8015b58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015b5a:	9702      	str	r7, [sp, #8]
 8015b5c:	9401      	str	r4, [sp, #4]
 8015b5e:	4674      	mov	r4, lr
 8015b60:	9500      	str	r5, [sp, #0]
 8015b62:	970a      	str	r7, [sp, #40]	; 0x28
 8015b64:	960b      	str	r6, [sp, #44]	; 0x2c
 8015b66:	f7ff fb03 	bl	8015170 <_GetLine>
 8015b6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b6c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8015b6e:	694e      	ldr	r6, [r1, #20]
 8015b70:	688d      	ldr	r5, [r1, #8]
 8015b72:	9407      	str	r4, [sp, #28]
 8015b74:	e01d      	b.n	8015bb2 <_DrawBitmap+0x3e2>
 8015b76:	f8db 0000 	ldr.w	r0, [fp]
 8015b7a:	2bff      	cmp	r3, #255	; 0xff
 8015b7c:	9c08      	ldr	r4, [sp, #32]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	7c40      	ldrb	r0, [r0, #17]
 8015b82:	4649      	mov	r1, r9
 8015b84:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015b88:	6980      	ldr	r0, [r0, #24]
 8015b8a:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8015b8e:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8015b92:	4670      	mov	r0, lr
 8015b94:	d003      	beq.n	8015b9e <_DrawBitmap+0x3ce>
 8015b96:	4b86      	ldr	r3, [pc, #536]	; (8015db0 <_DrawBitmap+0x5e0>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4798      	blx	r3
 8015b9c:	4686      	mov	lr, r0
 8015b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ba0:	4670      	mov	r0, lr
 8015ba2:	4798      	blx	r3
 8015ba4:	9b07      	ldr	r3, [sp, #28]
 8015ba6:	f845 0b04 	str.w	r0, [r5], #4
 8015baa:	3b01      	subs	r3, #1
 8015bac:	9307      	str	r3, [sp, #28]
 8015bae:	f000 8107 	beq.w	8015dc0 <_DrawBitmap+0x5f0>
 8015bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb4:	f837 0b02 	ldrh.w	r0, [r7], #2
 8015bb8:	f856 9b04 	ldr.w	r9, [r6], #4
 8015bbc:	4798      	blx	r3
 8015bbe:	f898 2000 	ldrb.w	r2, [r8]
 8015bc2:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8015bc6:	0e03      	lsrs	r3, r0, #24
 8015bc8:	2a00      	cmp	r2, #0
 8015bca:	d1d4      	bne.n	8015b76 <_DrawBitmap+0x3a6>
 8015bcc:	f8db 2000 	ldr.w	r2, [fp]
 8015bd0:	4649      	mov	r1, r9
 8015bd2:	9c08      	ldr	r4, [sp, #32]
 8015bd4:	7c52      	ldrb	r2, [r2, #17]
 8015bd6:	4b76      	ldr	r3, [pc, #472]	; (8015db0 <_DrawBitmap+0x5e0>)
 8015bd8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	6992      	ldr	r2, [r2, #24]
 8015be0:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8015be4:	4798      	blx	r3
 8015be6:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8015bea:	e7d8      	b.n	8015b9e <_DrawBitmap+0x3ce>
 8015bec:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8015db8 <_DrawBitmap+0x5e8>
 8015bf0:	27c0      	movs	r7, #192	; 0xc0
 8015bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8015bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015bf8:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015bfc:	4413      	add	r3, r2
 8015bfe:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8015c02:	911f      	str	r1, [sp, #124]	; 0x7c
 8015c04:	9308      	str	r3, [sp, #32]
 8015c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c0e:	7c1b      	ldrb	r3, [r3, #16]
 8015c10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015c12:	eb01 0800 	add.w	r8, r1, r0
 8015c16:	f013 0303 	ands.w	r3, r3, #3
 8015c1a:	7816      	ldrb	r6, [r2, #0]
 8015c1c:	f000 8263 	beq.w	80160e6 <_DrawBitmap+0x916>
 8015c20:	2b02      	cmp	r3, #2
 8015c22:	f000 8166 	beq.w	8015ef2 <_DrawBitmap+0x722>
 8015c26:	4613      	mov	r3, r2
 8015c28:	460a      	mov	r2, r1
 8015c2a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015c2c:	3201      	adds	r2, #1
 8015c2e:	440b      	add	r3, r1
 8015c30:	9209      	str	r2, [sp, #36]	; 0x24
 8015c32:	931f      	str	r3, [sp, #124]	; 0x7c
 8015c34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c36:	4293      	cmp	r3, r2
 8015c38:	dce5      	bgt.n	8015c06 <_DrawBitmap+0x436>
 8015c3a:	e602      	b.n	8015842 <_DrawBitmap+0x72>
 8015c3c:	f8df b178 	ldr.w	fp, [pc, #376]	; 8015db8 <_DrawBitmap+0x5e8>
 8015c40:	27f0      	movs	r7, #240	; 0xf0
 8015c42:	9209      	str	r2, [sp, #36]	; 0x24
 8015c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015c48:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015c4c:	4413      	add	r3, r2
 8015c4e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8015c52:	911f      	str	r1, [sp, #124]	; 0x7c
 8015c54:	9308      	str	r3, [sp, #32]
 8015c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c5e:	7c1b      	ldrb	r3, [r3, #16]
 8015c60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015c62:	eb01 0800 	add.w	r8, r1, r0
 8015c66:	f013 0303 	ands.w	r3, r3, #3
 8015c6a:	7816      	ldrb	r6, [r2, #0]
 8015c6c:	f000 81f3 	beq.w	8016056 <_DrawBitmap+0x886>
 8015c70:	2b02      	cmp	r3, #2
 8015c72:	f000 8197 	beq.w	8015fa4 <_DrawBitmap+0x7d4>
 8015c76:	4613      	mov	r3, r2
 8015c78:	460a      	mov	r2, r1
 8015c7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015c7c:	3201      	adds	r2, #1
 8015c7e:	440b      	add	r3, r1
 8015c80:	9209      	str	r2, [sp, #36]	; 0x24
 8015c82:	931f      	str	r3, [sp, #124]	; 0x7c
 8015c84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015c86:	4293      	cmp	r3, r2
 8015c88:	dce5      	bgt.n	8015c56 <_DrawBitmap+0x486>
 8015c8a:	e5da      	b.n	8015842 <_DrawBitmap+0x72>
 8015c8c:	f8df b128 	ldr.w	fp, [pc, #296]	; 8015db8 <_DrawBitmap+0x5e8>
 8015c90:	4692      	mov	sl, r2
 8015c92:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8015c96:	f8cd b01c 	str.w	fp, [sp, #28]
 8015c9a:	468b      	mov	fp, r1
 8015c9c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8015ca0:	911f      	str	r1, [sp, #124]	; 0x7c
 8015ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ca4:	ebcb 0603 	rsb	r6, fp, r3
 8015ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015caa:	eb0b 0503 	add.w	r5, fp, r3
 8015cae:	9b07      	ldr	r3, [sp, #28]
 8015cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	eb0a 0702 	add.w	r7, sl, r2
 8015cb8:	7c1b      	ldrb	r3, [r3, #16]
 8015cba:	f013 0303 	ands.w	r3, r3, #3
 8015cbe:	f000 8104 	beq.w	8015eca <_DrawBitmap+0x6fa>
 8015cc2:	2b02      	cmp	r3, #2
 8015cc4:	f000 80de 	beq.w	8015e84 <_DrawBitmap+0x6b4>
 8015cc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015cca:	f10a 0a01 	add.w	sl, sl, #1
 8015cce:	449b      	add	fp, r3
 8015cd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015cd2:	4553      	cmp	r3, sl
 8015cd4:	dce5      	bgt.n	8015ca2 <_DrawBitmap+0x4d2>
 8015cd6:	e5b4      	b.n	8015842 <_DrawBitmap+0x72>
 8015cd8:	4b33      	ldr	r3, [pc, #204]	; (8015da8 <_DrawBitmap+0x5d8>)
 8015cda:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8015db4 <_DrawBitmap+0x5e4>
 8015cde:	930d      	str	r3, [sp, #52]	; 0x34
 8015ce0:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8015db8 <_DrawBitmap+0x5e8>
 8015ce4:	46ca      	mov	sl, r9
 8015ce6:	4b31      	ldr	r3, [pc, #196]	; (8015dac <_DrawBitmap+0x5dc>)
 8015ce8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015dbc <_DrawBitmap+0x5ec>
 8015cec:	9209      	str	r2, [sp, #36]	; 0x24
 8015cee:	911f      	str	r1, [sp, #124]	; 0x7c
 8015cf0:	9308      	str	r3, [sp, #32]
 8015cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cf4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cf8:	6802      	ldr	r2, [r0, #0]
 8015cfa:	440b      	add	r3, r1
 8015cfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015cfe:	6916      	ldr	r6, [r2, #16]
 8015d00:	461d      	mov	r5, r3
 8015d02:	694c      	ldr	r4, [r1, #20]
 8015d04:	6877      	ldr	r7, [r6, #4]
 8015d06:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8015d0a:	462a      	mov	r2, r5
 8015d0c:	688d      	ldr	r5, [r1, #8]
 8015d0e:	6836      	ldr	r6, [r6, #0]
 8015d10:	9311      	str	r3, [sp, #68]	; 0x44
 8015d12:	4673      	mov	r3, lr
 8015d14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015d16:	9702      	str	r7, [sp, #8]
 8015d18:	9401      	str	r4, [sp, #4]
 8015d1a:	4674      	mov	r4, lr
 8015d1c:	9500      	str	r5, [sp, #0]
 8015d1e:	970a      	str	r7, [sp, #40]	; 0x28
 8015d20:	960b      	str	r6, [sp, #44]	; 0x2c
 8015d22:	f7ff fa25 	bl	8015170 <_GetLine>
 8015d26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015d28:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8015d2a:	694e      	ldr	r6, [r1, #20]
 8015d2c:	688d      	ldr	r5, [r1, #8]
 8015d2e:	9407      	str	r4, [sp, #28]
 8015d30:	e01c      	b.n	8015d6c <_DrawBitmap+0x59c>
 8015d32:	f8db 0000 	ldr.w	r0, [fp]
 8015d36:	2bff      	cmp	r3, #255	; 0xff
 8015d38:	9c08      	ldr	r4, [sp, #32]
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	7c40      	ldrb	r0, [r0, #17]
 8015d3e:	4649      	mov	r1, r9
 8015d40:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015d44:	6980      	ldr	r0, [r0, #24]
 8015d46:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8015d4a:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8015d4e:	4670      	mov	r0, lr
 8015d50:	d003      	beq.n	8015d5a <_DrawBitmap+0x58a>
 8015d52:	4b17      	ldr	r3, [pc, #92]	; (8015db0 <_DrawBitmap+0x5e0>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	4798      	blx	r3
 8015d58:	4686      	mov	lr, r0
 8015d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d5c:	4670      	mov	r0, lr
 8015d5e:	4798      	blx	r3
 8015d60:	9b07      	ldr	r3, [sp, #28]
 8015d62:	f845 0b04 	str.w	r0, [r5], #4
 8015d66:	3b01      	subs	r3, #1
 8015d68:	9307      	str	r3, [sp, #28]
 8015d6a:	d05a      	beq.n	8015e22 <_DrawBitmap+0x652>
 8015d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d6e:	f857 0b04 	ldr.w	r0, [r7], #4
 8015d72:	f856 9b04 	ldr.w	r9, [r6], #4
 8015d76:	4798      	blx	r3
 8015d78:	f898 2000 	ldrb.w	r2, [r8]
 8015d7c:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8015d80:	0e03      	lsrs	r3, r0, #24
 8015d82:	2a00      	cmp	r2, #0
 8015d84:	d1d5      	bne.n	8015d32 <_DrawBitmap+0x562>
 8015d86:	f8db 2000 	ldr.w	r2, [fp]
 8015d8a:	4649      	mov	r1, r9
 8015d8c:	9c08      	ldr	r4, [sp, #32]
 8015d8e:	7c52      	ldrb	r2, [r2, #17]
 8015d90:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <_DrawBitmap+0x5e0>)
 8015d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	6992      	ldr	r2, [r2, #24]
 8015d9a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8015d9e:	4798      	blx	r3
 8015da0:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8015da4:	e7d9      	b.n	8015d5a <_DrawBitmap+0x58a>
 8015da6:	bf00      	nop
 8015da8:	20000348 	.word	0x20000348
 8015dac:	2002afd0 	.word	0x2002afd0
 8015db0:	20000044 	.word	0x20000044
 8015db4:	20000034 	.word	0x20000034
 8015db8:	20000018 	.word	0x20000018
 8015dbc:	2002afb8 	.word	0x2002afb8
 8015dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dc2:	2601      	movs	r6, #1
 8015dc4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015dc6:	3201      	adds	r2, #1
 8015dc8:	f8db 3000 	ldr.w	r3, [fp]
 8015dcc:	4617      	mov	r7, r2
 8015dce:	9209      	str	r2, [sp, #36]	; 0x24
 8015dd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015dd2:	7c58      	ldrb	r0, [r3, #17]
 8015dd4:	440a      	add	r2, r1
 8015dd6:	921f      	str	r2, [sp, #124]	; 0x7c
 8015dd8:	f002 f880 	bl	8017edc <LCD_GetBitsPerPixelEx>
 8015ddc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015dde:	2818      	cmp	r0, #24
 8015de0:	bf14      	ite	ne
 8015de2:	4604      	movne	r4, r0
 8015de4:	2420      	moveq	r4, #32
 8015de6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8015dea:	4622      	mov	r2, r4
 8015dec:	68a8      	ldr	r0, [r5, #8]
 8015dee:	4649      	mov	r1, r9
 8015df0:	f000 fdb6 	bl	8016960 <GUI__CompactPixelIndices>
 8015df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015df6:	68a9      	ldr	r1, [r5, #8]
 8015df8:	464b      	mov	r3, r9
 8015dfa:	6810      	ldr	r0, [r2, #0]
 8015dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015dfe:	68c5      	ldr	r5, [r0, #12]
 8015e00:	9401      	str	r4, [sp, #4]
 8015e02:	2400      	movs	r4, #0
 8015e04:	9103      	str	r1, [sp, #12]
 8015e06:	9405      	str	r4, [sp, #20]
 8015e08:	9404      	str	r4, [sp, #16]
 8015e0a:	9402      	str	r4, [sp, #8]
 8015e0c:	9600      	str	r6, [sp, #0]
 8015e0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015e10:	686c      	ldr	r4, [r5, #4]
 8015e12:	47a0      	blx	r4
 8015e14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015e16:	42bb      	cmp	r3, r7
 8015e18:	f73f ae8d 	bgt.w	8015b36 <_DrawBitmap+0x366>
 8015e1c:	b013      	add	sp, #76	; 0x4c
 8015e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e24:	2601      	movs	r6, #1
 8015e26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015e28:	3201      	adds	r2, #1
 8015e2a:	f8db 3000 	ldr.w	r3, [fp]
 8015e2e:	4617      	mov	r7, r2
 8015e30:	9209      	str	r2, [sp, #36]	; 0x24
 8015e32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015e34:	7c58      	ldrb	r0, [r3, #17]
 8015e36:	440a      	add	r2, r1
 8015e38:	921f      	str	r2, [sp, #124]	; 0x7c
 8015e3a:	f002 f84f 	bl	8017edc <LCD_GetBitsPerPixelEx>
 8015e3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015e40:	2818      	cmp	r0, #24
 8015e42:	bf14      	ite	ne
 8015e44:	4604      	movne	r4, r0
 8015e46:	2420      	moveq	r4, #32
 8015e48:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8015e4c:	4622      	mov	r2, r4
 8015e4e:	68a8      	ldr	r0, [r5, #8]
 8015e50:	4649      	mov	r1, r9
 8015e52:	f000 fd85 	bl	8016960 <GUI__CompactPixelIndices>
 8015e56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e58:	68a9      	ldr	r1, [r5, #8]
 8015e5a:	464b      	mov	r3, r9
 8015e5c:	6810      	ldr	r0, [r2, #0]
 8015e5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e60:	68c5      	ldr	r5, [r0, #12]
 8015e62:	9401      	str	r4, [sp, #4]
 8015e64:	2400      	movs	r4, #0
 8015e66:	9103      	str	r1, [sp, #12]
 8015e68:	9405      	str	r4, [sp, #20]
 8015e6a:	9404      	str	r4, [sp, #16]
 8015e6c:	9402      	str	r4, [sp, #8]
 8015e6e:	9600      	str	r6, [sp, #0]
 8015e70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015e72:	686c      	ldr	r4, [r5, #4]
 8015e74:	47a0      	blx	r4
 8015e76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015e78:	42bb      	cmp	r3, r7
 8015e7a:	f73f af3a 	bgt.w	8015cf2 <_DrawBitmap+0x522>
 8015e7e:	b013      	add	sp, #76	; 0x4c
 8015e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e86:	f1b8 0f00 	cmp.w	r8, #0
 8015e8a:	f000 8184 	beq.w	8016196 <_DrawBitmap+0x9c6>
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	dd10      	ble.n	8015eb4 <_DrawBitmap+0x6e4>
 8015e92:	465c      	mov	r4, fp
 8015e94:	e001      	b.n	8015e9a <_DrawBitmap+0x6ca>
 8015e96:	42ac      	cmp	r4, r5
 8015e98:	d00c      	beq.n	8015eb4 <_DrawBitmap+0x6e4>
 8015e9a:	1931      	adds	r1, r6, r4
 8015e9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d0f8      	beq.n	8015e96 <_DrawBitmap+0x6c6>
 8015ea4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015ea8:	463a      	mov	r2, r7
 8015eaa:	4648      	mov	r0, r9
 8015eac:	f7ff fa6e 	bl	801538c <_SetPixelIndex>
 8015eb0:	42ac      	cmp	r4, r5
 8015eb2:	d1f2      	bne.n	8015e9a <_DrawBitmap+0x6ca>
 8015eb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015eb6:	f10a 0a01 	add.w	sl, sl, #1
 8015eba:	449b      	add	fp, r3
 8015ebc:	1af6      	subs	r6, r6, r3
 8015ebe:	441d      	add	r5, r3
 8015ec0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015ec2:	4553      	cmp	r3, sl
 8015ec4:	f73f aef3 	bgt.w	8015cae <_DrawBitmap+0x4de>
 8015ec8:	e4bb      	b.n	8015842 <_DrawBitmap+0x72>
 8015eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ecc:	f1b8 0f00 	cmp.w	r8, #0
 8015ed0:	f000 8153 	beq.w	801617a <_DrawBitmap+0x9aa>
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	dded      	ble.n	8015eb4 <_DrawBitmap+0x6e4>
 8015ed8:	465c      	mov	r4, fp
 8015eda:	7823      	ldrb	r3, [r4, #0]
 8015edc:	19a1      	adds	r1, r4, r6
 8015ede:	3401      	adds	r4, #1
 8015ee0:	463a      	mov	r2, r7
 8015ee2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015ee6:	4648      	mov	r0, r9
 8015ee8:	f7ff fa50 	bl	801538c <_SetPixelIndex>
 8015eec:	42ac      	cmp	r4, r5
 8015eee:	d1f4      	bne.n	8015eda <_DrawBitmap+0x70a>
 8015ef0:	e7e0      	b.n	8015eb4 <_DrawBitmap+0x6e4>
 8015ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ef4:	4692      	mov	sl, r2
 8015ef6:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015ef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015efa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015efe:	b933      	cbnz	r3, 8015f0e <_DrawBitmap+0x73e>
 8015f00:	e03b      	b.n	8015f7a <_DrawBitmap+0x7aa>
 8015f02:	2c04      	cmp	r4, #4
 8015f04:	f109 0901 	add.w	r9, r9, #1
 8015f08:	d018      	beq.n	8015f3c <_DrawBitmap+0x76c>
 8015f0a:	3d01      	subs	r5, #1
 8015f0c:	d01e      	beq.n	8015f4c <_DrawBitmap+0x77c>
 8015f0e:	f1c4 0303 	rsb	r3, r4, #3
 8015f12:	3401      	adds	r4, #1
 8015f14:	005a      	lsls	r2, r3, #1
 8015f16:	f1c2 0306 	rsb	r3, r2, #6
 8015f1a:	fa47 f303 	asr.w	r3, r7, r3
 8015f1e:	4033      	ands	r3, r6
 8015f20:	40d3      	lsrs	r3, r2
 8015f22:	d0ee      	beq.n	8015f02 <_DrawBitmap+0x732>
 8015f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015f26:	4649      	mov	r1, r9
 8015f28:	4658      	mov	r0, fp
 8015f2a:	f109 0901 	add.w	r9, r9, #1
 8015f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f32:	4642      	mov	r2, r8
 8015f34:	f7ff fa2a 	bl	801538c <_SetPixelIndex>
 8015f38:	2c04      	cmp	r4, #4
 8015f3a:	d1e6      	bne.n	8015f0a <_DrawBitmap+0x73a>
 8015f3c:	3d01      	subs	r5, #1
 8015f3e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8015f42:	f04f 0400 	mov.w	r4, #0
 8015f46:	f10a 0a01 	add.w	sl, sl, #1
 8015f4a:	d1e0      	bne.n	8015f0e <_DrawBitmap+0x73e>
 8015f4c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015f4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f52:	440a      	add	r2, r1
 8015f54:	3301      	adds	r3, #1
 8015f56:	921f      	str	r2, [sp, #124]	; 0x7c
 8015f58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	f73f ae52 	bgt.w	8015c06 <_DrawBitmap+0x436>
 8015f62:	e46e      	b.n	8015842 <_DrawBitmap+0x72>
 8015f64:	4649      	mov	r1, r9
 8015f66:	4642      	mov	r2, r8
 8015f68:	4658      	mov	r0, fp
 8015f6a:	f109 0901 	add.w	r9, r9, #1
 8015f6e:	f7ff fa0d 	bl	801538c <_SetPixelIndex>
 8015f72:	2c04      	cmp	r4, #4
 8015f74:	d010      	beq.n	8015f98 <_DrawBitmap+0x7c8>
 8015f76:	3d01      	subs	r5, #1
 8015f78:	d0e8      	beq.n	8015f4c <_DrawBitmap+0x77c>
 8015f7a:	f1c4 0303 	rsb	r3, r4, #3
 8015f7e:	3401      	adds	r4, #1
 8015f80:	005a      	lsls	r2, r3, #1
 8015f82:	f1c2 0306 	rsb	r3, r2, #6
 8015f86:	fa47 f303 	asr.w	r3, r7, r3
 8015f8a:	4033      	ands	r3, r6
 8015f8c:	40d3      	lsrs	r3, r2
 8015f8e:	d1e9      	bne.n	8015f64 <_DrawBitmap+0x794>
 8015f90:	2c04      	cmp	r4, #4
 8015f92:	f109 0901 	add.w	r9, r9, #1
 8015f96:	d1ee      	bne.n	8015f76 <_DrawBitmap+0x7a6>
 8015f98:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8015f9c:	2400      	movs	r4, #0
 8015f9e:	f10a 0a01 	add.w	sl, sl, #1
 8015fa2:	e7e8      	b.n	8015f76 <_DrawBitmap+0x7a6>
 8015fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015fa6:	4692      	mov	sl, r2
 8015fa8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015fac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fb0:	b933      	cbnz	r3, 8015fc0 <_DrawBitmap+0x7f0>
 8015fb2:	e03b      	b.n	801602c <_DrawBitmap+0x85c>
 8015fb4:	2c02      	cmp	r4, #2
 8015fb6:	f109 0901 	add.w	r9, r9, #1
 8015fba:	d018      	beq.n	8015fee <_DrawBitmap+0x81e>
 8015fbc:	3d01      	subs	r5, #1
 8015fbe:	d01e      	beq.n	8015ffe <_DrawBitmap+0x82e>
 8015fc0:	f1c4 0301 	rsb	r3, r4, #1
 8015fc4:	3401      	adds	r4, #1
 8015fc6:	009a      	lsls	r2, r3, #2
 8015fc8:	f1c2 0304 	rsb	r3, r2, #4
 8015fcc:	fa47 f303 	asr.w	r3, r7, r3
 8015fd0:	4033      	ands	r3, r6
 8015fd2:	40d3      	lsrs	r3, r2
 8015fd4:	d0ee      	beq.n	8015fb4 <_DrawBitmap+0x7e4>
 8015fd6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015fd8:	4649      	mov	r1, r9
 8015fda:	4658      	mov	r0, fp
 8015fdc:	f109 0901 	add.w	r9, r9, #1
 8015fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015fe4:	4642      	mov	r2, r8
 8015fe6:	f7ff f9d1 	bl	801538c <_SetPixelIndex>
 8015fea:	2c02      	cmp	r4, #2
 8015fec:	d1e6      	bne.n	8015fbc <_DrawBitmap+0x7ec>
 8015fee:	3d01      	subs	r5, #1
 8015ff0:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8015ff4:	f04f 0400 	mov.w	r4, #0
 8015ff8:	f10a 0a01 	add.w	sl, sl, #1
 8015ffc:	d1e0      	bne.n	8015fc0 <_DrawBitmap+0x7f0>
 8015ffe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016000:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016004:	440a      	add	r2, r1
 8016006:	3301      	adds	r3, #1
 8016008:	921f      	str	r2, [sp, #124]	; 0x7c
 801600a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801600c:	9309      	str	r3, [sp, #36]	; 0x24
 801600e:	429a      	cmp	r2, r3
 8016010:	f73f ae21 	bgt.w	8015c56 <_DrawBitmap+0x486>
 8016014:	e415      	b.n	8015842 <_DrawBitmap+0x72>
 8016016:	4649      	mov	r1, r9
 8016018:	4642      	mov	r2, r8
 801601a:	4658      	mov	r0, fp
 801601c:	f109 0901 	add.w	r9, r9, #1
 8016020:	f7ff f9b4 	bl	801538c <_SetPixelIndex>
 8016024:	2c02      	cmp	r4, #2
 8016026:	d010      	beq.n	801604a <_DrawBitmap+0x87a>
 8016028:	3d01      	subs	r5, #1
 801602a:	d0e8      	beq.n	8015ffe <_DrawBitmap+0x82e>
 801602c:	f1c4 0301 	rsb	r3, r4, #1
 8016030:	3401      	adds	r4, #1
 8016032:	009a      	lsls	r2, r3, #2
 8016034:	f1c2 0304 	rsb	r3, r2, #4
 8016038:	fa47 f303 	asr.w	r3, r7, r3
 801603c:	4033      	ands	r3, r6
 801603e:	40d3      	lsrs	r3, r2
 8016040:	d1e9      	bne.n	8016016 <_DrawBitmap+0x846>
 8016042:	2c02      	cmp	r4, #2
 8016044:	f109 0901 	add.w	r9, r9, #1
 8016048:	d1ee      	bne.n	8016028 <_DrawBitmap+0x858>
 801604a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801604e:	2400      	movs	r4, #0
 8016050:	f10a 0a01 	add.w	sl, sl, #1
 8016054:	e7e8      	b.n	8016028 <_DrawBitmap+0x858>
 8016056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016058:	4692      	mov	sl, r2
 801605a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801605c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016060:	9c08      	ldr	r4, [sp, #32]
 8016062:	b35b      	cbz	r3, 80160bc <_DrawBitmap+0x8ec>
 8016064:	9607      	str	r6, [sp, #28]
 8016066:	e002      	b.n	801606e <_DrawBitmap+0x89e>
 8016068:	f1b9 0901 	subs.w	r9, r9, #1
 801606c:	d0c7      	beq.n	8015ffe <_DrawBitmap+0x82e>
 801606e:	f1c5 0301 	rsb	r3, r5, #1
 8016072:	9e07      	ldr	r6, [sp, #28]
 8016074:	3501      	adds	r5, #1
 8016076:	4621      	mov	r1, r4
 8016078:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801607c:	4642      	mov	r2, r8
 801607e:	4658      	mov	r0, fp
 8016080:	3401      	adds	r4, #1
 8016082:	f1ce 0304 	rsb	r3, lr, #4
 8016086:	fa47 f303 	asr.w	r3, r7, r3
 801608a:	4033      	ands	r3, r6
 801608c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801608e:	fa23 f30e 	lsr.w	r3, r3, lr
 8016092:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016096:	f7ff f979 	bl	801538c <_SetPixelIndex>
 801609a:	2d02      	cmp	r5, #2
 801609c:	d1e4      	bne.n	8016068 <_DrawBitmap+0x898>
 801609e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80160a2:	2500      	movs	r5, #0
 80160a4:	f10a 0a01 	add.w	sl, sl, #1
 80160a8:	9307      	str	r3, [sp, #28]
 80160aa:	e7dd      	b.n	8016068 <_DrawBitmap+0x898>
 80160ac:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80160b0:	2500      	movs	r5, #0
 80160b2:	f10a 0a01 	add.w	sl, sl, #1
 80160b6:	f1b9 0901 	subs.w	r9, r9, #1
 80160ba:	d0a0      	beq.n	8015ffe <_DrawBitmap+0x82e>
 80160bc:	f1c5 0e01 	rsb	lr, r5, #1
 80160c0:	3501      	adds	r5, #1
 80160c2:	4621      	mov	r1, r4
 80160c4:	4642      	mov	r2, r8
 80160c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80160ca:	4658      	mov	r0, fp
 80160cc:	3401      	adds	r4, #1
 80160ce:	f1ce 0304 	rsb	r3, lr, #4
 80160d2:	fa47 f303 	asr.w	r3, r7, r3
 80160d6:	4033      	ands	r3, r6
 80160d8:	fa23 f30e 	lsr.w	r3, r3, lr
 80160dc:	f7ff f956 	bl	801538c <_SetPixelIndex>
 80160e0:	2d02      	cmp	r5, #2
 80160e2:	d1e8      	bne.n	80160b6 <_DrawBitmap+0x8e6>
 80160e4:	e7e2      	b.n	80160ac <_DrawBitmap+0x8dc>
 80160e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160e8:	4692      	mov	sl, r2
 80160ea:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80160ec:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80160f0:	9c08      	ldr	r4, [sp, #32]
 80160f2:	b36b      	cbz	r3, 8016150 <_DrawBitmap+0x980>
 80160f4:	9607      	str	r6, [sp, #28]
 80160f6:	e003      	b.n	8016100 <_DrawBitmap+0x930>
 80160f8:	f1b9 0901 	subs.w	r9, r9, #1
 80160fc:	f43f af26 	beq.w	8015f4c <_DrawBitmap+0x77c>
 8016100:	f1c5 0303 	rsb	r3, r5, #3
 8016104:	9e07      	ldr	r6, [sp, #28]
 8016106:	3501      	adds	r5, #1
 8016108:	4621      	mov	r1, r4
 801610a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 801610e:	4642      	mov	r2, r8
 8016110:	4658      	mov	r0, fp
 8016112:	3401      	adds	r4, #1
 8016114:	f1ce 0306 	rsb	r3, lr, #6
 8016118:	fa47 f303 	asr.w	r3, r7, r3
 801611c:	4033      	ands	r3, r6
 801611e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8016120:	fa23 f30e 	lsr.w	r3, r3, lr
 8016124:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8016128:	f7ff f930 	bl	801538c <_SetPixelIndex>
 801612c:	2d04      	cmp	r5, #4
 801612e:	d1e3      	bne.n	80160f8 <_DrawBitmap+0x928>
 8016130:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016134:	2500      	movs	r5, #0
 8016136:	f10a 0a01 	add.w	sl, sl, #1
 801613a:	9307      	str	r3, [sp, #28]
 801613c:	e7dc      	b.n	80160f8 <_DrawBitmap+0x928>
 801613e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8016142:	2500      	movs	r5, #0
 8016144:	f10a 0a01 	add.w	sl, sl, #1
 8016148:	f1b9 0901 	subs.w	r9, r9, #1
 801614c:	f43f aefe 	beq.w	8015f4c <_DrawBitmap+0x77c>
 8016150:	f1c5 0e03 	rsb	lr, r5, #3
 8016154:	3501      	adds	r5, #1
 8016156:	4621      	mov	r1, r4
 8016158:	4642      	mov	r2, r8
 801615a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801615e:	4658      	mov	r0, fp
 8016160:	3401      	adds	r4, #1
 8016162:	f1ce 0306 	rsb	r3, lr, #6
 8016166:	fa47 f303 	asr.w	r3, r7, r3
 801616a:	4033      	ands	r3, r6
 801616c:	fa23 f30e 	lsr.w	r3, r3, lr
 8016170:	f7ff f90c 	bl	801538c <_SetPixelIndex>
 8016174:	2d04      	cmp	r5, #4
 8016176:	d1e7      	bne.n	8016148 <_DrawBitmap+0x978>
 8016178:	e7e1      	b.n	801613e <_DrawBitmap+0x96e>
 801617a:	2b00      	cmp	r3, #0
 801617c:	f77f ae9a 	ble.w	8015eb4 <_DrawBitmap+0x6e4>
 8016180:	465c      	mov	r4, fp
 8016182:	7823      	ldrb	r3, [r4, #0]
 8016184:	19a1      	adds	r1, r4, r6
 8016186:	3401      	adds	r4, #1
 8016188:	463a      	mov	r2, r7
 801618a:	4648      	mov	r0, r9
 801618c:	f7ff f8fe 	bl	801538c <_SetPixelIndex>
 8016190:	42ac      	cmp	r4, r5
 8016192:	d1f6      	bne.n	8016182 <_DrawBitmap+0x9b2>
 8016194:	e68e      	b.n	8015eb4 <_DrawBitmap+0x6e4>
 8016196:	2b00      	cmp	r3, #0
 8016198:	f77f ae8c 	ble.w	8015eb4 <_DrawBitmap+0x6e4>
 801619c:	465c      	mov	r4, fp
 801619e:	e002      	b.n	80161a6 <_DrawBitmap+0x9d6>
 80161a0:	42ac      	cmp	r4, r5
 80161a2:	f43f ae87 	beq.w	8015eb4 <_DrawBitmap+0x6e4>
 80161a6:	1931      	adds	r1, r6, r4
 80161a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d0f7      	beq.n	80161a0 <_DrawBitmap+0x9d0>
 80161b0:	463a      	mov	r2, r7
 80161b2:	4648      	mov	r0, r9
 80161b4:	f7ff f8ea 	bl	801538c <_SetPixelIndex>
 80161b8:	e7f2      	b.n	80161a0 <_DrawBitmap+0x9d0>
 80161ba:	bf00      	nop

080161bc <GUI__AlphaPreserveTrans>:
 80161bc:	4b09      	ldr	r3, [pc, #36]	; (80161e4 <GUI__AlphaPreserveTrans+0x28>)
 80161be:	b510      	push	{r4, lr}
 80161c0:	781c      	ldrb	r4, [r3, #0]
 80161c2:	b938      	cbnz	r0, 80161d4 <GUI__AlphaPreserveTrans+0x18>
 80161c4:	4602      	mov	r2, r0
 80161c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80161ca:	701a      	strb	r2, [r3, #0]
 80161cc:	f001 fd86 	bl	8017cdc <LCD_AA_SetOrMask>
 80161d0:	4620      	mov	r0, r4
 80161d2:	bd10      	pop	{r4, pc}
 80161d4:	2201      	movs	r2, #1
 80161d6:	2000      	movs	r0, #0
 80161d8:	701a      	strb	r2, [r3, #0]
 80161da:	f001 fd7f 	bl	8017cdc <LCD_AA_SetOrMask>
 80161de:	4620      	mov	r0, r4
 80161e0:	bd10      	pop	{r4, pc}
 80161e2:	bf00      	nop
 80161e4:	2002afb8 	.word	0x2002afb8

080161e8 <GUI_TOUCH_StoreStateEx>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	4c13      	ldr	r4, [pc, #76]	; (8016238 <GUI_TOUCH_StoreStateEx+0x50>)
 80161ec:	b084      	sub	sp, #16
 80161ee:	220c      	movs	r2, #12
 80161f0:	4606      	mov	r6, r0
 80161f2:	4621      	mov	r1, r4
 80161f4:	f00b fd7a 	bl	8021cec <memcmp>
 80161f8:	b178      	cbz	r0, 801621a <GUI_TOUCH_StoreStateEx+0x32>
 80161fa:	68e3      	ldr	r3, [r4, #12]
 80161fc:	b1a3      	cbz	r3, 8016228 <GUI_TOUCH_StoreStateEx+0x40>
 80161fe:	ad01      	add	r5, sp, #4
 8016200:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016204:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8016208:	a902      	add	r1, sp, #8
 801620a:	4628      	mov	r0, r5
 801620c:	4798      	blx	r3
 801620e:	4603      	mov	r3, r0
 8016210:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016218:	b10b      	cbz	r3, 801621e <GUI_TOUCH_StoreStateEx+0x36>
 801621a:	b004      	add	sp, #16
 801621c:	bd70      	pop	{r4, r5, r6, pc}
 801621e:	4628      	mov	r0, r5
 8016220:	f009 fbd8 	bl	801f9d4 <GUI_PID_StoreState>
 8016224:	b004      	add	sp, #16
 8016226:	bd70      	pop	{r4, r5, r6, pc}
 8016228:	4630      	mov	r0, r6
 801622a:	f009 fbd3 	bl	801f9d4 <GUI_PID_StoreState>
 801622e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016232:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016236:	e7f0      	b.n	801621a <GUI_TOUCH_StoreStateEx+0x32>
 8016238:	20000360 	.word	0x20000360

0801623c <_OnExit>:
 801623c:	b510      	push	{r4, lr}
 801623e:	4c03      	ldr	r4, [pc, #12]	; (801624c <_OnExit+0x10>)
 8016240:	6820      	ldr	r0, [r4, #0]
 8016242:	f7fb fa57 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8016246:	2300      	movs	r3, #0
 8016248:	6023      	str	r3, [r4, #0]
 801624a:	bd10      	pop	{r4, pc}
 801624c:	20000370 	.word	0x20000370

08016250 <GUI_Unlock>:
 8016250:	4a03      	ldr	r2, [pc, #12]	; (8016260 <GUI_Unlock+0x10>)
 8016252:	6853      	ldr	r3, [r2, #4]
 8016254:	3b01      	subs	r3, #1
 8016256:	6053      	str	r3, [r2, #4]
 8016258:	b103      	cbz	r3, 801625c <GUI_Unlock+0xc>
 801625a:	4770      	bx	lr
 801625c:	f7f8 bafc 	b.w	800e858 <GUI_X_Unlock>
 8016260:	20000370 	.word	0x20000370

08016264 <GUI_Lock>:
 8016264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016268:	4d22      	ldr	r5, [pc, #136]	; (80162f4 <GUI_Lock+0x90>)
 801626a:	686b      	ldr	r3, [r5, #4]
 801626c:	b123      	cbz	r3, 8016278 <GUI_Lock+0x14>
 801626e:	f7f8 fb01 	bl	800e874 <GUI_X_GetTaskId>
 8016272:	68ab      	ldr	r3, [r5, #8]
 8016274:	4298      	cmp	r0, r3
 8016276:	d004      	beq.n	8016282 <GUI_Lock+0x1e>
 8016278:	f7f8 faf4 	bl	800e864 <GUI_X_Lock>
 801627c:	f7f8 fafa 	bl	800e874 <GUI_X_GetTaskId>
 8016280:	60a8      	str	r0, [r5, #8]
 8016282:	686b      	ldr	r3, [r5, #4]
 8016284:	3301      	adds	r3, #1
 8016286:	2b01      	cmp	r3, #1
 8016288:	606b      	str	r3, [r5, #4]
 801628a:	d001      	beq.n	8016290 <GUI_Lock+0x2c>
 801628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016290:	4f19      	ldr	r7, [pc, #100]	; (80162f8 <GUI_Lock+0x94>)
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	dd28      	ble.n	80162ea <GUI_Lock+0x86>
 8016298:	2400      	movs	r4, #0
 801629a:	4626      	mov	r6, r4
 801629c:	e005      	b.n	80162aa <GUI_Lock+0x46>
 801629e:	b33a      	cbz	r2, 80162f0 <GUI_Lock+0x8c>
 80162a0:	3601      	adds	r6, #1
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	347c      	adds	r4, #124	; 0x7c
 80162a6:	429e      	cmp	r6, r3
 80162a8:	da1f      	bge.n	80162ea <GUI_Lock+0x86>
 80162aa:	f7f8 fae3 	bl	800e874 <GUI_X_GetTaskId>
 80162ae:	682b      	ldr	r3, [r5, #0]
 80162b0:	591a      	ldr	r2, [r3, r4]
 80162b2:	4423      	add	r3, r4
 80162b4:	4290      	cmp	r0, r2
 80162b6:	d1f2      	bne.n	801629e <GUI_Lock+0x3a>
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	42b3      	cmp	r3, r6
 80162bc:	d0e6      	beq.n	801628c <GUI_Lock+0x28>
 80162be:	2b00      	cmp	r3, #0
 80162c0:	db10      	blt.n	80162e4 <GUI_Lock+0x80>
 80162c2:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80162c6:	682a      	ldr	r2, [r5, #0]
 80162c8:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80162cc:	f7fc fd40 	bl	8012d50 <GUI_DEVICE_UnlinkTaskDevices>
 80162d0:	682a      	ldr	r2, [r5, #0]
 80162d2:	4b0a      	ldr	r3, [pc, #40]	; (80162fc <GUI_Lock+0x98>)
 80162d4:	4414      	add	r4, r2
 80162d6:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 80162da:	1d22      	adds	r2, r4, #4
 80162dc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80162de:	601a      	str	r2, [r3, #0]
 80162e0:	f7fc fd38 	bl	8012d54 <GUI_DEVICE_LinkDevices>
 80162e4:	607e      	str	r6, [r7, #4]
 80162e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ea:	2400      	movs	r4, #0
 80162ec:	4626      	mov	r6, r4
 80162ee:	e7e3      	b.n	80162b8 <GUI_Lock+0x54>
 80162f0:	6018      	str	r0, [r3, #0]
 80162f2:	e7e1      	b.n	80162b8 <GUI_Lock+0x54>
 80162f4:	20000370 	.word	0x20000370
 80162f8:	20000038 	.word	0x20000038
 80162fc:	20000018 	.word	0x20000018

08016300 <GUITASK_Init>:
 8016300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016302:	4f18      	ldr	r7, [pc, #96]	; (8016364 <GUITASK_Init+0x64>)
 8016304:	4b18      	ldr	r3, [pc, #96]	; (8016368 <GUITASK_Init+0x68>)
 8016306:	4638      	mov	r0, r7
 8016308:	4e18      	ldr	r6, [pc, #96]	; (801636c <GUITASK_Init+0x6c>)
 801630a:	f840 3f0c 	str.w	r3, [r0, #12]!
 801630e:	f7fc fb93 	bl	8012a38 <GUI__RegisterExit>
 8016312:	6834      	ldr	r4, [r6, #0]
 8016314:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8016318:	00a4      	lsls	r4, r4, #2
 801631a:	4620      	mov	r0, r4
 801631c:	f7fb f9f4 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016320:	4b13      	ldr	r3, [pc, #76]	; (8016370 <GUITASK_Init+0x70>)
 8016322:	4622      	mov	r2, r4
 8016324:	2100      	movs	r1, #0
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	6038      	str	r0, [r7, #0]
 801632a:	4798      	blx	r3
 801632c:	f04f 33ff 	mov.w	r3, #4294967295
 8016330:	6073      	str	r3, [r6, #4]
 8016332:	f7f8 fa79 	bl	800e828 <GUI_X_InitOS>
 8016336:	6833      	ldr	r3, [r6, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	dd0f      	ble.n	801635c <GUITASK_Init+0x5c>
 801633c:	2400      	movs	r4, #0
 801633e:	4625      	mov	r5, r4
 8016340:	e003      	b.n	801634a <GUITASK_Init+0x4a>
 8016342:	b162      	cbz	r2, 801635e <GUITASK_Init+0x5e>
 8016344:	6833      	ldr	r3, [r6, #0]
 8016346:	429d      	cmp	r5, r3
 8016348:	da08      	bge.n	801635c <GUITASK_Init+0x5c>
 801634a:	f7f8 fa93 	bl	800e874 <GUI_X_GetTaskId>
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	3501      	adds	r5, #1
 8016352:	591a      	ldr	r2, [r3, r4]
 8016354:	4423      	add	r3, r4
 8016356:	347c      	adds	r4, #124	; 0x7c
 8016358:	4290      	cmp	r0, r2
 801635a:	d1f2      	bne.n	8016342 <GUITASK_Init+0x42>
 801635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801635e:	6018      	str	r0, [r3, #0]
 8016360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016362:	bf00      	nop
 8016364:	20000370 	.word	0x20000370
 8016368:	0801623d 	.word	0x0801623d
 801636c:	20000038 	.word	0x20000038
 8016370:	20000050 	.word	0x20000050

08016374 <GUITASK_CopyContext>:
 8016374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016378:	4f24      	ldr	r7, [pc, #144]	; (801640c <GUITASK_CopyContext+0x98>)
 801637a:	683d      	ldr	r5, [r7, #0]
 801637c:	2d00      	cmp	r5, #0
 801637e:	dd3f      	ble.n	8016400 <GUITASK_CopyContext+0x8c>
 8016380:	4e23      	ldr	r6, [pc, #140]	; (8016410 <GUITASK_CopyContext+0x9c>)
 8016382:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8016386:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8016414 <GUITASK_CopyContext+0xa0>
 801638a:	f04f 0a00 	mov.w	sl, #0
 801638e:	6834      	ldr	r4, [r6, #0]
 8016390:	f8d8 9000 	ldr.w	r9, [r8]
 8016394:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8016398:	340c      	adds	r4, #12
 801639a:	350c      	adds	r5, #12
 801639c:	f1a4 0308 	sub.w	r3, r4, #8
 80163a0:	2274      	movs	r2, #116	; 0x74
 80163a2:	4649      	mov	r1, r9
 80163a4:	4618      	mov	r0, r3
 80163a6:	f00b fcb0 	bl	8021d0a <memcpy>
 80163aa:	1f22      	subs	r2, r4, #4
 80163ac:	6320      	str	r0, [r4, #48]	; 0x30
 80163ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80163b0:	f844 ac0c 	str.w	sl, [r4, #-12]
 80163b4:	6362      	str	r2, [r4, #52]	; 0x34
 80163b6:	60e4      	str	r4, [r4, #12]
 80163b8:	347c      	adds	r4, #124	; 0x7c
 80163ba:	42a5      	cmp	r5, r4
 80163bc:	d1ee      	bne.n	801639c <GUITASK_CopyContext+0x28>
 80163be:	2400      	movs	r4, #0
 80163c0:	4625      	mov	r5, r4
 80163c2:	e003      	b.n	80163cc <GUITASK_CopyContext+0x58>
 80163c4:	b182      	cbz	r2, 80163e8 <GUITASK_CopyContext+0x74>
 80163c6:	683a      	ldr	r2, [r7, #0]
 80163c8:	4295      	cmp	r5, r2
 80163ca:	da13      	bge.n	80163f4 <GUITASK_CopyContext+0x80>
 80163cc:	f7f8 fa52 	bl	800e874 <GUI_X_GetTaskId>
 80163d0:	6833      	ldr	r3, [r6, #0]
 80163d2:	3501      	adds	r5, #1
 80163d4:	591a      	ldr	r2, [r3, r4]
 80163d6:	1919      	adds	r1, r3, r4
 80163d8:	347c      	adds	r4, #124	; 0x7c
 80163da:	4290      	cmp	r0, r2
 80163dc:	d1f2      	bne.n	80163c4 <GUITASK_CopyContext+0x50>
 80163de:	3104      	adds	r1, #4
 80163e0:	f8c8 1000 	str.w	r1, [r8]
 80163e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163e8:	6008      	str	r0, [r1, #0]
 80163ea:	3104      	adds	r1, #4
 80163ec:	f8c8 1000 	str.w	r1, [r8]
 80163f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f4:	4619      	mov	r1, r3
 80163f6:	3104      	adds	r1, #4
 80163f8:	f8c8 1000 	str.w	r1, [r8]
 80163fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016400:	4b03      	ldr	r3, [pc, #12]	; (8016410 <GUITASK_CopyContext+0x9c>)
 8016402:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8016414 <GUITASK_CopyContext+0xa0>
 8016406:	6819      	ldr	r1, [r3, #0]
 8016408:	e7e9      	b.n	80163de <GUITASK_CopyContext+0x6a>
 801640a:	bf00      	nop
 801640c:	20000038 	.word	0x20000038
 8016410:	20000370 	.word	0x20000370
 8016414:	20000018 	.word	0x20000018

08016418 <GUI_Delay>:
 8016418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801641c:	4607      	mov	r7, r0
 801641e:	f7f8 f9fd 	bl	800e81c <GUI_X_GetTime>
 8016422:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8016490 <GUI_Delay+0x78>
 8016426:	4407      	add	r7, r0
 8016428:	f7f8 f9f8 	bl	800e81c <GUI_X_GetTime>
 801642c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8016494 <GUI_Delay+0x7c>
 8016430:	1a3e      	subs	r6, r7, r0
 8016432:	2e00      	cmp	r6, #0
 8016434:	dd22      	ble.n	801647c <GUI_Delay+0x64>
 8016436:	f7fb ffa1 	bl	801237c <GUI_Exec>
 801643a:	f8d9 3000 	ldr.w	r3, [r9]
 801643e:	429e      	cmp	r6, r3
 8016440:	bfa8      	it	ge
 8016442:	461e      	movge	r6, r3
 8016444:	f7ff ff0e 	bl	8016264 <GUI_Lock>
 8016448:	f8d8 4000 	ldr.w	r4, [r8]
 801644c:	f7fb fc10 	bl	8011c70 <GUI_ALLOC_Lock>
 8016450:	b1b4      	cbz	r4, 8016480 <GUI_Delay+0x68>
 8016452:	4625      	mov	r5, r4
 8016454:	f7ff fefc 	bl	8016250 <GUI_Unlock>
 8016458:	3d01      	subs	r5, #1
 801645a:	d1fb      	bne.n	8016454 <GUI_Delay+0x3c>
 801645c:	4630      	mov	r0, r6
 801645e:	f7f8 f9df 	bl	800e820 <GUI_X_Delay>
 8016462:	f7ff feff 	bl	8016264 <GUI_Lock>
 8016466:	3c01      	subs	r4, #1
 8016468:	d1fb      	bne.n	8016462 <GUI_Delay+0x4a>
 801646a:	f7fb fc09 	bl	8011c80 <GUI_ALLOC_Unlock>
 801646e:	f7ff feef 	bl	8016250 <GUI_Unlock>
 8016472:	f7f8 f9d3 	bl	800e81c <GUI_X_GetTime>
 8016476:	1a3e      	subs	r6, r7, r0
 8016478:	2e00      	cmp	r6, #0
 801647a:	dcdc      	bgt.n	8016436 <GUI_Delay+0x1e>
 801647c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016480:	4630      	mov	r0, r6
 8016482:	f7f8 f9cd 	bl	800e820 <GUI_X_Delay>
 8016486:	f7fb fbfb 	bl	8011c80 <GUI_ALLOC_Unlock>
 801648a:	f7ff fee1 	bl	8016250 <GUI_Unlock>
 801648e:	e7f0      	b.n	8016472 <GUI_Delay+0x5a>
 8016490:	20000040 	.word	0x20000040
 8016494:	20000374 	.word	0x20000374

08016498 <GUI_UC__GetCharCodeInc>:
 8016498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801649a:	4e08      	ldr	r6, [pc, #32]	; (80164bc <GUI_UC__GetCharCodeInc+0x24>)
 801649c:	4605      	mov	r5, r0
 801649e:	6804      	ldr	r4, [r0, #0]
 80164a0:	6833      	ldr	r3, [r6, #0]
 80164a2:	4620      	mov	r0, r4
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	4798      	blx	r3
 80164a8:	6833      	ldr	r3, [r6, #0]
 80164aa:	4607      	mov	r7, r0
 80164ac:	4620      	mov	r0, r4
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	4798      	blx	r3
 80164b2:	4404      	add	r4, r0
 80164b4:	4638      	mov	r0, r7
 80164b6:	602c      	str	r4, [r5, #0]
 80164b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ba:	bf00      	nop
 80164bc:	2002afc8 	.word	0x2002afc8

080164c0 <GUI_UC__NumChars2NumBytes>:
 80164c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164c2:	b169      	cbz	r1, 80164e0 <GUI_UC__NumChars2NumBytes+0x20>
 80164c4:	4605      	mov	r5, r0
 80164c6:	460c      	mov	r4, r1
 80164c8:	2600      	movs	r6, #0
 80164ca:	4f06      	ldr	r7, [pc, #24]	; (80164e4 <GUI_UC__NumChars2NumBytes+0x24>)
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	4628      	mov	r0, r5
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	4798      	blx	r3
 80164d4:	3c01      	subs	r4, #1
 80164d6:	4405      	add	r5, r0
 80164d8:	4406      	add	r6, r0
 80164da:	d1f7      	bne.n	80164cc <GUI_UC__NumChars2NumBytes+0xc>
 80164dc:	4630      	mov	r0, r6
 80164de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164e0:	460e      	mov	r6, r1
 80164e2:	e7fb      	b.n	80164dc <GUI_UC__NumChars2NumBytes+0x1c>
 80164e4:	2002afc8 	.word	0x2002afc8

080164e8 <_GetCharCode>:
 80164e8:	7800      	ldrb	r0, [r0, #0]
 80164ea:	4770      	bx	lr

080164ec <_GetCharSize>:
 80164ec:	2001      	movs	r0, #1
 80164ee:	4770      	bx	lr

080164f0 <_CalcSizeOfChar>:
 80164f0:	2001      	movs	r0, #1
 80164f2:	4770      	bx	lr

080164f4 <_Encode>:
 80164f4:	7001      	strb	r1, [r0, #0]
 80164f6:	2001      	movs	r0, #1
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop

080164fc <GUI_SignalEvent>:
 80164fc:	4b02      	ldr	r3, [pc, #8]	; (8016508 <GUI_SignalEvent+0xc>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	b103      	cbz	r3, 8016504 <GUI_SignalEvent+0x8>
 8016502:	4718      	bx	r3
 8016504:	4770      	bx	lr
 8016506:	bf00      	nop
 8016508:	20000384 	.word	0x20000384

0801650c <GUI__MixColorsBulk>:
 801650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016510:	b087      	sub	sp, #28
 8016512:	4692      	mov	sl, r2
 8016514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016516:	9001      	str	r0, [sp, #4]
 8016518:	9102      	str	r1, [sp, #8]
 801651a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801651c:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8016520:	2a00      	cmp	r2, #0
 8016522:	d035      	beq.n	8016590 <GUI__MixColorsBulk+0x84>
 8016524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016526:	2100      	movs	r1, #0
 8016528:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8016598 <GUI__MixColorsBulk+0x8c>
 801652c:	0092      	lsls	r2, r2, #2
 801652e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 801659c <GUI__MixColorsBulk+0x90>
 8016532:	9103      	str	r1, [sp, #12]
 8016534:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016538:	9205      	str	r2, [sp, #20]
 801653a:	9304      	str	r3, [sp, #16]
 801653c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801653e:	4657      	mov	r7, sl
 8016540:	9e02      	ldr	r6, [sp, #8]
 8016542:	9d01      	ldr	r5, [sp, #4]
 8016544:	f855 0b04 	ldr.w	r0, [r5], #4
 8016548:	f8db 3000 	ldr.w	r3, [fp]
 801654c:	0e02      	lsrs	r2, r0, #24
 801654e:	f856 1b04 	ldr.w	r1, [r6], #4
 8016552:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8016556:	fb09 f202 	mul.w	r2, r9, r2
 801655a:	fba8 e202 	umull	lr, r2, r8, r2
 801655e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8016562:	4798      	blx	r3
 8016564:	3c01      	subs	r4, #1
 8016566:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801656a:	f847 0b04 	str.w	r0, [r7], #4
 801656e:	d1e9      	bne.n	8016544 <GUI__MixColorsBulk+0x38>
 8016570:	9a01      	ldr	r2, [sp, #4]
 8016572:	9905      	ldr	r1, [sp, #20]
 8016574:	4610      	mov	r0, r2
 8016576:	9a02      	ldr	r2, [sp, #8]
 8016578:	448a      	add	sl, r1
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	4408      	add	r0, r1
 801657e:	9904      	ldr	r1, [sp, #16]
 8016580:	3301      	adds	r3, #1
 8016582:	440a      	add	r2, r1
 8016584:	9001      	str	r0, [sp, #4]
 8016586:	9303      	str	r3, [sp, #12]
 8016588:	9202      	str	r2, [sp, #8]
 801658a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801658c:	429a      	cmp	r2, r3
 801658e:	d1d5      	bne.n	801653c <GUI__MixColorsBulk+0x30>
 8016590:	b007      	add	sp, #28
 8016592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016596:	bf00      	nop
 8016598:	20000044 	.word	0x20000044
 801659c:	80808081 	.word	0x80808081

080165a0 <GUI__MixColors>:
 80165a0:	0e0b      	lsrs	r3, r1, #24
 80165a2:	ea4f 6310 	mov.w	r3, r0, lsr #24
 80165a6:	b4f0      	push	{r4, r5, r6, r7}
 80165a8:	bf08      	it	eq
 80165aa:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 80165ae:	4c11      	ldr	r4, [pc, #68]	; (80165f4 <GUI__MixColors+0x54>)
 80165b0:	fb02 f203 	mul.w	r2, r2, r3
 80165b4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80165b8:	0a0d      	lsrs	r5, r1, #8
 80165ba:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 80165be:	fba4 1202 	umull	r1, r2, r4, r2
 80165c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80165c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80165ca:	09d2      	lsrs	r2, r2, #7
 80165cc:	f040 7480 	orr.w	r4, r0, #16777216	; 0x1000000
 80165d0:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 80165d4:	fb02 f106 	mul.w	r1, r2, r6
 80165d8:	fb07 f005 	mul.w	r0, r7, r5
 80165dc:	fb07 1103 	mla	r1, r7, r3, r1
 80165e0:	fb02 0004 	mla	r0, r2, r4, r0
 80165e4:	0a09      	lsrs	r1, r1, #8
 80165e6:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 80165ea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80165ee:	bcf0      	pop	{r4, r5, r6, r7}
 80165f0:	4308      	orrs	r0, r1
 80165f2:	4770      	bx	lr
 80165f4:	80808081 	.word	0x80808081

080165f8 <_OnExit>:
 80165f8:	b510      	push	{r4, lr}
 80165fa:	4c08      	ldr	r4, [pc, #32]	; (801661c <_OnExit+0x24>)
 80165fc:	6820      	ldr	r0, [r4, #0]
 80165fe:	f7fb f879 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8016602:	6860      	ldr	r0, [r4, #4]
 8016604:	f7fb f876 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8016608:	68a0      	ldr	r0, [r4, #8]
 801660a:	f7fb f873 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 801660e:	2300      	movs	r3, #0
 8016610:	60a3      	str	r3, [r4, #8]
 8016612:	6063      	str	r3, [r4, #4]
 8016614:	6023      	str	r3, [r4, #0]
 8016616:	60e3      	str	r3, [r4, #12]
 8016618:	6123      	str	r3, [r4, #16]
 801661a:	bd10      	pop	{r4, pc}
 801661c:	2000038c 	.word	0x2000038c

08016620 <GUI__DoAlphaBlending>:
 8016620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016624:	b08f      	sub	sp, #60	; 0x3c
 8016626:	2400      	movs	r4, #0
 8016628:	461f      	mov	r7, r3
 801662a:	4693      	mov	fp, r2
 801662c:	9005      	str	r0, [sp, #20]
 801662e:	4893      	ldr	r0, [pc, #588]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016630:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016632:	6900      	ldr	r0, [r0, #16]
 8016634:	9107      	str	r1, [sp, #28]
 8016636:	601c      	str	r4, [r3, #0]
 8016638:	2800      	cmp	r0, #0
 801663a:	f000 80f1 	beq.w	8016820 <GUI__DoAlphaBlending+0x200>
 801663e:	4b8f      	ldr	r3, [pc, #572]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016640:	68dc      	ldr	r4, [r3, #12]
 8016642:	461d      	mov	r5, r3
 8016644:	b92c      	cbnz	r4, 8016652 <GUI__DoAlphaBlending+0x32>
 8016646:	4b8e      	ldr	r3, [pc, #568]	; (8016880 <GUI__DoAlphaBlending+0x260>)
 8016648:	681c      	ldr	r4, [r3, #0]
 801664a:	60ec      	str	r4, [r5, #12]
 801664c:	2c00      	cmp	r4, #0
 801664e:	f000 80f1 	beq.w	8016834 <GUI__DoAlphaBlending+0x214>
 8016652:	4b8a      	ldr	r3, [pc, #552]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016654:	4d89      	ldr	r5, [pc, #548]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	9302      	str	r3, [sp, #8]
 801665a:	2b00      	cmp	r3, #0
 801665c:	f000 80fd 	beq.w	801685a <GUI__DoAlphaBlending+0x23a>
 8016660:	4b86      	ldr	r3, [pc, #536]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016662:	4d86      	ldr	r5, [pc, #536]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016664:	685b      	ldr	r3, [r3, #4]
 8016666:	9303      	str	r3, [sp, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	f000 80e8 	beq.w	801683e <GUI__DoAlphaBlending+0x21e>
 801666e:	42a7      	cmp	r7, r4
 8016670:	4b84      	ldr	r3, [pc, #528]	; (8016884 <GUI__DoAlphaBlending+0x264>)
 8016672:	4a85      	ldr	r2, [pc, #532]	; (8016888 <GUI__DoAlphaBlending+0x268>)
 8016674:	f04f 0600 	mov.w	r6, #0
 8016678:	bfa8      	it	ge
 801667a:	4627      	movge	r7, r4
 801667c:	6819      	ldr	r1, [r3, #0]
 801667e:	9b05      	ldr	r3, [sp, #20]
 8016680:	4634      	mov	r4, r6
 8016682:	7c48      	ldrb	r0, [r1, #17]
 8016684:	46ba      	mov	sl, r7
 8016686:	443b      	add	r3, r7
 8016688:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801668c:	930c      	str	r3, [sp, #48]	; 0x30
 801668e:	3b01      	subs	r3, #1
 8016690:	9208      	str	r2, [sp, #32]
 8016692:	9309      	str	r3, [sp, #36]	; 0x24
 8016694:	6913      	ldr	r3, [r2, #16]
 8016696:	930d      	str	r3, [sp, #52]	; 0x34
 8016698:	f001 fcb2 	bl	8018000 <GUI_GetBitsPerPixelEx>
 801669c:	4b79      	ldr	r3, [pc, #484]	; (8016884 <GUI__DoAlphaBlending+0x264>)
 801669e:	9004      	str	r0, [sp, #16]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	7c58      	ldrb	r0, [r3, #17]
 80166a4:	f001 fcc6 	bl	8018034 <GUI_GetpfIndex2ColorEx>
 80166a8:	4b78      	ldr	r3, [pc, #480]	; (801688c <GUI__DoAlphaBlending+0x26c>)
 80166aa:	4a79      	ldr	r2, [pc, #484]	; (8016890 <GUI__DoAlphaBlending+0x270>)
 80166ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80166ae:	4290      	cmp	r0, r2
 80166b0:	bf18      	it	ne
 80166b2:	4298      	cmpne	r0, r3
 80166b4:	bf14      	ite	ne
 80166b6:	2301      	movne	r3, #1
 80166b8:	2300      	moveq	r3, #0
 80166ba:	930a      	str	r3, [sp, #40]	; 0x28
 80166bc:	465f      	mov	r7, fp
 80166be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80166c0:	f857 0b04 	ldr.w	r0, [r7], #4
 80166c4:	4798      	blx	r3
 80166c6:	4681      	mov	r9, r0
 80166c8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80166cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80166d0:	d047      	beq.n	8016762 <GUI__DoAlphaBlending+0x142>
 80166d2:	2c00      	cmp	r4, #0
 80166d4:	d12b      	bne.n	801672e <GUI__DoAlphaBlending+0x10e>
 80166d6:	4b6b      	ldr	r3, [pc, #428]	; (8016884 <GUI__DoAlphaBlending+0x264>)
 80166d8:	9a05      	ldr	r2, [sp, #20]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	1995      	adds	r5, r2, r6
 80166de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80166e2:	42ab      	cmp	r3, r5
 80166e4:	dd59      	ble.n	801679a <GUI__DoAlphaBlending+0x17a>
 80166e6:	1b5a      	subs	r2, r3, r5
 80166e8:	461d      	mov	r5, r3
 80166ea:	4614      	mov	r4, r2
 80166ec:	9206      	str	r2, [sp, #24]
 80166ee:	9802      	ldr	r0, [sp, #8]
 80166f0:	4434      	add	r4, r6
 80166f2:	9b08      	ldr	r3, [sp, #32]
 80166f4:	9907      	ldr	r1, [sp, #28]
 80166f6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80166fa:	9301      	str	r3, [sp, #4]
 80166fc:	4628      	mov	r0, r5
 80166fe:	460b      	mov	r3, r1
 8016700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016702:	9400      	str	r4, [sp, #0]
 8016704:	f001 fe92 	bl	801842c <GUI_ReadRectEx>
 8016708:	9b04      	ldr	r3, [sp, #16]
 801670a:	2b17      	cmp	r3, #23
 801670c:	dd7e      	ble.n	801680c <GUI__DoAlphaBlending+0x1ec>
 801670e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016710:	2b00      	cmp	r3, #0
 8016712:	d044      	beq.n	801679e <GUI__DoAlphaBlending+0x17e>
 8016714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016716:	9606      	str	r6, [sp, #24]
 8016718:	1b5d      	subs	r5, r3, r5
 801671a:	462e      	mov	r6, r5
 801671c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801671e:	6820      	ldr	r0, [r4, #0]
 8016720:	47a8      	blx	r5
 8016722:	3e01      	subs	r6, #1
 8016724:	f844 0b04 	str.w	r0, [r4], #4
 8016728:	d1f9      	bne.n	801671e <GUI__DoAlphaBlending+0xfe>
 801672a:	9e06      	ldr	r6, [sp, #24]
 801672c:	2401      	movs	r4, #1
 801672e:	4b53      	ldr	r3, [pc, #332]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016730:	69dd      	ldr	r5, [r3, #28]
 8016732:	2d00      	cmp	r5, #0
 8016734:	d138      	bne.n	80167a8 <GUI__DoAlphaBlending+0x188>
 8016736:	fa5f f288 	uxtb.w	r2, r8
 801673a:	f1b8 0f00 	cmp.w	r8, #0
 801673e:	d11a      	bne.n	8016776 <GUI__DoAlphaBlending+0x156>
 8016740:	9b02      	ldr	r3, [sp, #8]
 8016742:	9a03      	ldr	r2, [sp, #12]
 8016744:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8016748:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801674c:	f1ba 0a01 	subs.w	sl, sl, #1
 8016750:	f106 0601 	add.w	r6, r6, #1
 8016754:	46bb      	mov	fp, r7
 8016756:	d1b1      	bne.n	80166bc <GUI__DoAlphaBlending+0x9c>
 8016758:	9c03      	ldr	r4, [sp, #12]
 801675a:	4620      	mov	r0, r4
 801675c:	b00f      	add	sp, #60	; 0x3c
 801675e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016762:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016764:	9a03      	ldr	r2, [sp, #12]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 801676c:	f043 0301 	orr.w	r3, r3, #1
 8016770:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016772:	6013      	str	r3, [r2, #0]
 8016774:	e7ea      	b.n	801674c <GUI__DoAlphaBlending+0x12c>
 8016776:	9902      	ldr	r1, [sp, #8]
 8016778:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 801677c:	4b45      	ldr	r3, [pc, #276]	; (8016894 <GUI__DoAlphaBlending+0x274>)
 801677e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	4798      	blx	r3
 8016786:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016788:	9a03      	ldr	r2, [sp, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8016790:	f043 0301 	orr.w	r3, r3, #1
 8016794:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016796:	6013      	str	r3, [r2, #0]
 8016798:	e7d8      	b.n	801674c <GUI__DoAlphaBlending+0x12c>
 801679a:	9406      	str	r4, [sp, #24]
 801679c:	e7a7      	b.n	80166ee <GUI__DoAlphaBlending+0xce>
 801679e:	4b37      	ldr	r3, [pc, #220]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 80167a0:	2401      	movs	r4, #1
 80167a2:	69dd      	ldr	r5, [r3, #28]
 80167a4:	2d00      	cmp	r5, #0
 80167a6:	d0c6      	beq.n	8016736 <GUI__DoAlphaBlending+0x116>
 80167a8:	00b6      	lsls	r6, r6, #2
 80167aa:	9a02      	ldr	r2, [sp, #8]
 80167ac:	4653      	mov	r3, sl
 80167ae:	4658      	mov	r0, fp
 80167b0:	4432      	add	r2, r6
 80167b2:	4657      	mov	r7, sl
 80167b4:	4614      	mov	r4, r2
 80167b6:	9a03      	ldr	r2, [sp, #12]
 80167b8:	4416      	add	r6, r2
 80167ba:	4621      	mov	r1, r4
 80167bc:	4632      	mov	r2, r6
 80167be:	47a8      	blx	r5
 80167c0:	f1ab 0204 	sub.w	r2, fp, #4
 80167c4:	e008      	b.n	80167d8 <GUI__DoAlphaBlending+0x1b8>
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	3f01      	subs	r7, #1
 80167ca:	f104 0404 	add.w	r4, r4, #4
 80167ce:	f106 0604 	add.w	r6, r6, #4
 80167d2:	f846 3c04 	str.w	r3, [r6, #-4]
 80167d6:	d00e      	beq.n	80167f6 <GUI__DoAlphaBlending+0x1d6>
 80167d8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80167dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80167e0:	d0f1      	beq.n	80167c6 <GUI__DoAlphaBlending+0x1a6>
 80167e2:	6821      	ldr	r1, [r4, #0]
 80167e4:	3604      	adds	r6, #4
 80167e6:	3404      	adds	r4, #4
 80167e8:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80167ec:	bf08      	it	eq
 80167ee:	f846 3c04 	streq.w	r3, [r6, #-4]
 80167f2:	3f01      	subs	r7, #1
 80167f4:	d1f0      	bne.n	80167d8 <GUI__DoAlphaBlending+0x1b8>
 80167f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167f8:	9c03      	ldr	r4, [sp, #12]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80167fe:	4620      	mov	r0, r4
 8016800:	f043 0301 	orr.w	r3, r3, #1
 8016804:	6013      	str	r3, [r2, #0]
 8016806:	b00f      	add	sp, #60	; 0x3c
 8016808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680c:	461a      	mov	r2, r3
 801680e:	9b06      	ldr	r3, [sp, #24]
 8016810:	4620      	mov	r0, r4
 8016812:	2401      	movs	r4, #1
 8016814:	ebc3 010a 	rsb	r1, r3, sl
 8016818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801681a:	f000 faaf 	bl	8016d7c <GUI__ExpandPixelIndicesEx>
 801681e:	e786      	b.n	801672e <GUI__DoAlphaBlending+0x10e>
 8016820:	4a1d      	ldr	r2, [pc, #116]	; (8016898 <GUI__DoAlphaBlending+0x278>)
 8016822:	2301      	movs	r3, #1
 8016824:	4815      	ldr	r0, [pc, #84]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 8016826:	f840 2f14 	str.w	r2, [r0, #20]!
 801682a:	4a14      	ldr	r2, [pc, #80]	; (801687c <GUI__DoAlphaBlending+0x25c>)
 801682c:	6113      	str	r3, [r2, #16]
 801682e:	f7fc f903 	bl	8012a38 <GUI__RegisterExit>
 8016832:	e704      	b.n	801663e <GUI__DoAlphaBlending+0x1e>
 8016834:	f001 fc42 	bl	80180bc <LCD_GetVXSizeMax>
 8016838:	4604      	mov	r4, r0
 801683a:	60e8      	str	r0, [r5, #12]
 801683c:	e709      	b.n	8016652 <GUI__DoAlphaBlending+0x32>
 801683e:	68e8      	ldr	r0, [r5, #12]
 8016840:	0080      	lsls	r0, r0, #2
 8016842:	f7fa ff61 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016846:	9003      	str	r0, [sp, #12]
 8016848:	6068      	str	r0, [r5, #4]
 801684a:	2800      	cmp	r0, #0
 801684c:	f47f af0f 	bne.w	801666e <GUI__DoAlphaBlending+0x4e>
 8016850:	2400      	movs	r4, #0
 8016852:	4620      	mov	r0, r4
 8016854:	b00f      	add	sp, #60	; 0x3c
 8016856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801685a:	00a0      	lsls	r0, r4, #2
 801685c:	f7fa ff54 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016860:	6028      	str	r0, [r5, #0]
 8016862:	b108      	cbz	r0, 8016868 <GUI__DoAlphaBlending+0x248>
 8016864:	9002      	str	r0, [sp, #8]
 8016866:	e6fb      	b.n	8016660 <GUI__DoAlphaBlending+0x40>
 8016868:	686c      	ldr	r4, [r5, #4]
 801686a:	2c00      	cmp	r4, #0
 801686c:	d1f0      	bne.n	8016850 <GUI__DoAlphaBlending+0x230>
 801686e:	68e8      	ldr	r0, [r5, #12]
 8016870:	0080      	lsls	r0, r0, #2
 8016872:	f7fa ff49 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016876:	6068      	str	r0, [r5, #4]
 8016878:	e76f      	b.n	801675a <GUI__DoAlphaBlending+0x13a>
 801687a:	bf00      	nop
 801687c:	2000038c 	.word	0x2000038c
 8016880:	2002afd8 	.word	0x2002afd8
 8016884:	20000018 	.word	0x20000018
 8016888:	2002afd0 	.word	0x2002afd0
 801688c:	08010cfd 	.word	0x08010cfd
 8016890:	08010cf9 	.word	0x08010cf9
 8016894:	20000044 	.word	0x20000044
 8016898:	080165f9 	.word	0x080165f9

0801689c <GUI__AllocAlphaBuffer>:
 801689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801689e:	b083      	sub	sp, #12
 80168a0:	b9c0      	cbnz	r0, 80168d4 <GUI__AllocAlphaBuffer+0x38>
 80168a2:	4c22      	ldr	r4, [pc, #136]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168a4:	4605      	mov	r5, r0
 80168a6:	6923      	ldr	r3, [r4, #16]
 80168a8:	b1cb      	cbz	r3, 80168de <GUI__AllocAlphaBuffer+0x42>
 80168aa:	68e0      	ldr	r0, [r4, #12]
 80168ac:	4e1f      	ldr	r6, [pc, #124]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168ae:	b918      	cbnz	r0, 80168b8 <GUI__AllocAlphaBuffer+0x1c>
 80168b0:	4b1f      	ldr	r3, [pc, #124]	; (8016930 <GUI__AllocAlphaBuffer+0x94>)
 80168b2:	6818      	ldr	r0, [r3, #0]
 80168b4:	60f0      	str	r0, [r6, #12]
 80168b6:	b1d8      	cbz	r0, 80168f0 <GUI__AllocAlphaBuffer+0x54>
 80168b8:	6823      	ldr	r3, [r4, #0]
 80168ba:	4f1c      	ldr	r7, [pc, #112]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168bc:	b32b      	cbz	r3, 801690a <GUI__AllocAlphaBuffer+0x6e>
 80168be:	2600      	movs	r6, #0
 80168c0:	6863      	ldr	r3, [r4, #4]
 80168c2:	4f1a      	ldr	r7, [pc, #104]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168c4:	b1c3      	cbz	r3, 80168f8 <GUI__AllocAlphaBuffer+0x5c>
 80168c6:	b115      	cbz	r5, 80168ce <GUI__AllocAlphaBuffer+0x32>
 80168c8:	68a3      	ldr	r3, [r4, #8]
 80168ca:	4c18      	ldr	r4, [pc, #96]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168cc:	b32b      	cbz	r3, 801691a <GUI__AllocAlphaBuffer+0x7e>
 80168ce:	4630      	mov	r0, r6
 80168d0:	b003      	add	sp, #12
 80168d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168d4:	4c15      	ldr	r4, [pc, #84]	; (801692c <GUI__AllocAlphaBuffer+0x90>)
 80168d6:	ad01      	add	r5, sp, #4
 80168d8:	6923      	ldr	r3, [r4, #16]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d1e5      	bne.n	80168aa <GUI__AllocAlphaBuffer+0xe>
 80168de:	4a15      	ldr	r2, [pc, #84]	; (8016934 <GUI__AllocAlphaBuffer+0x98>)
 80168e0:	4620      	mov	r0, r4
 80168e2:	2301      	movs	r3, #1
 80168e4:	f840 2f14 	str.w	r2, [r0, #20]!
 80168e8:	6123      	str	r3, [r4, #16]
 80168ea:	f7fc f8a5 	bl	8012a38 <GUI__RegisterExit>
 80168ee:	e7dc      	b.n	80168aa <GUI__AllocAlphaBuffer+0xe>
 80168f0:	f001 fbe4 	bl	80180bc <LCD_GetVXSizeMax>
 80168f4:	60f0      	str	r0, [r6, #12]
 80168f6:	e7df      	b.n	80168b8 <GUI__AllocAlphaBuffer+0x1c>
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	0080      	lsls	r0, r0, #2
 80168fc:	f7fa ff04 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016900:	2800      	cmp	r0, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	bf08      	it	eq
 8016906:	2601      	moveq	r6, #1
 8016908:	e7dd      	b.n	80168c6 <GUI__AllocAlphaBuffer+0x2a>
 801690a:	0080      	lsls	r0, r0, #2
 801690c:	f7fa fefc 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016910:	fab0 f680 	clz	r6, r0
 8016914:	6038      	str	r0, [r7, #0]
 8016916:	0976      	lsrs	r6, r6, #5
 8016918:	e7d2      	b.n	80168c0 <GUI__AllocAlphaBuffer+0x24>
 801691a:	68e0      	ldr	r0, [r4, #12]
 801691c:	0080      	lsls	r0, r0, #2
 801691e:	f7fa fef3 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8016922:	2800      	cmp	r0, #0
 8016924:	60a0      	str	r0, [r4, #8]
 8016926:	bf08      	it	eq
 8016928:	2601      	moveq	r6, #1
 801692a:	e7d0      	b.n	80168ce <GUI__AllocAlphaBuffer+0x32>
 801692c:	2000038c 	.word	0x2000038c
 8016930:	2002afd8 	.word	0x2002afd8
 8016934:	080165f9 	.word	0x080165f9

08016938 <GUI_SetFuncDrawAlpha>:
 8016938:	b410      	push	{r4}
 801693a:	b118      	cbz	r0, 8016944 <GUI_SetFuncDrawAlpha+0xc>
 801693c:	b111      	cbz	r1, 8016944 <GUI_SetFuncDrawAlpha+0xc>
 801693e:	4603      	mov	r3, r0
 8016940:	2000      	movs	r0, #0
 8016942:	e002      	b.n	801694a <GUI_SetFuncDrawAlpha+0x12>
 8016944:	2100      	movs	r1, #0
 8016946:	2001      	movs	r0, #1
 8016948:	460b      	mov	r3, r1
 801694a:	4c03      	ldr	r4, [pc, #12]	; (8016958 <GUI_SetFuncDrawAlpha+0x20>)
 801694c:	4a03      	ldr	r2, [pc, #12]	; (801695c <GUI_SetFuncDrawAlpha+0x24>)
 801694e:	6021      	str	r1, [r4, #0]
 8016950:	6013      	str	r3, [r2, #0]
 8016952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016956:	4770      	bx	lr
 8016958:	2002afe0 	.word	0x2002afe0
 801695c:	2002afe4 	.word	0x2002afe4

08016960 <GUI__CompactPixelIndices>:
 8016960:	2a08      	cmp	r2, #8
 8016962:	b410      	push	{r4}
 8016964:	dd0e      	ble.n	8016984 <GUI__CompactPixelIndices+0x24>
 8016966:	2a10      	cmp	r2, #16
 8016968:	dc1c      	bgt.n	80169a4 <GUI__CompactPixelIndices+0x44>
 801696a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801696e:	4603      	mov	r3, r0
 8016970:	f850 2b04 	ldr.w	r2, [r0], #4
 8016974:	f823 2b02 	strh.w	r2, [r3], #2
 8016978:	4299      	cmp	r1, r3
 801697a:	d1f9      	bne.n	8016970 <GUI__CompactPixelIndices+0x10>
 801697c:	2001      	movs	r0, #1
 801697e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	2a02      	cmp	r2, #2
 8016986:	d011      	beq.n	80169ac <GUI__CompactPixelIndices+0x4c>
 8016988:	2a04      	cmp	r2, #4
 801698a:	f000 809a 	beq.w	8016ac2 <GUI__CompactPixelIndices+0x162>
 801698e:	2a01      	cmp	r2, #1
 8016990:	d03f      	beq.n	8016a12 <GUI__CompactPixelIndices+0xb2>
 8016992:	4401      	add	r1, r0
 8016994:	4603      	mov	r3, r0
 8016996:	f850 2b04 	ldr.w	r2, [r0], #4
 801699a:	f803 2b01 	strb.w	r2, [r3], #1
 801699e:	4299      	cmp	r1, r3
 80169a0:	d1f9      	bne.n	8016996 <GUI__CompactPixelIndices+0x36>
 80169a2:	e7eb      	b.n	801697c <GUI__CompactPixelIndices+0x1c>
 80169a4:	2000      	movs	r0, #0
 80169a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169aa:	4770      	bx	lr
 80169ac:	f100 0210 	add.w	r2, r0, #16
 80169b0:	f852 3c10 	ldr.w	r3, [r2, #-16]
 80169b4:	2901      	cmp	r1, #1
 80169b6:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80169ba:	b2db      	uxtb	r3, r3
 80169bc:	d026      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 80169be:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80169c2:	2902      	cmp	r1, #2
 80169c4:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80169c8:	f004 0430 	and.w	r4, r4, #48	; 0x30
 80169cc:	ea43 0304 	orr.w	r3, r3, r4
 80169d0:	d01c      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 80169d2:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80169d6:	2903      	cmp	r1, #3
 80169d8:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80169dc:	f004 040c 	and.w	r4, r4, #12
 80169e0:	ea43 0304 	orr.w	r3, r3, r4
 80169e4:	d012      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 80169e6:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80169ea:	3904      	subs	r1, #4
 80169ec:	f102 0210 	add.w	r2, r2, #16
 80169f0:	f004 0403 	and.w	r4, r4, #3
 80169f4:	ea43 0304 	orr.w	r3, r3, r4
 80169f8:	f800 3b01 	strb.w	r3, [r0], #1
 80169fc:	d0be      	beq.n	801697c <GUI__CompactPixelIndices+0x1c>
 80169fe:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8016a02:	2901      	cmp	r1, #1
 8016a04:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	d1d8      	bne.n	80169be <GUI__CompactPixelIndices+0x5e>
 8016a0c:	7003      	strb	r3, [r0, #0]
 8016a0e:	2001      	movs	r0, #1
 8016a10:	e7b5      	b.n	801697e <GUI__CompactPixelIndices+0x1e>
 8016a12:	f100 0220 	add.w	r2, r0, #32
 8016a16:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8016a1a:	2901      	cmp	r1, #1
 8016a1c:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8016a20:	b2db      	uxtb	r3, r3
 8016a22:	d0f3      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a24:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 8016a28:	2902      	cmp	r1, #2
 8016a2a:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8016a2e:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8016a32:	ea43 0304 	orr.w	r3, r3, r4
 8016a36:	d0e9      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a38:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8016a3c:	2903      	cmp	r1, #3
 8016a3e:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8016a42:	f004 0420 	and.w	r4, r4, #32
 8016a46:	ea43 0304 	orr.w	r3, r3, r4
 8016a4a:	d0df      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a4c:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8016a50:	2904      	cmp	r1, #4
 8016a52:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8016a56:	f004 0410 	and.w	r4, r4, #16
 8016a5a:	ea43 0304 	orr.w	r3, r3, r4
 8016a5e:	d0d5      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a60:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8016a64:	2905      	cmp	r1, #5
 8016a66:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016a6a:	f004 0408 	and.w	r4, r4, #8
 8016a6e:	ea43 0304 	orr.w	r3, r3, r4
 8016a72:	d0cb      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a74:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8016a78:	2906      	cmp	r1, #6
 8016a7a:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8016a7e:	f004 0404 	and.w	r4, r4, #4
 8016a82:	ea43 0304 	orr.w	r3, r3, r4
 8016a86:	d0c1      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016a88:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8016a8c:	3907      	subs	r1, #7
 8016a8e:	f102 0220 	add.w	r2, r2, #32
 8016a92:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8016a96:	f004 0402 	and.w	r4, r4, #2
 8016a9a:	ea43 0304 	orr.w	r3, r3, r4
 8016a9e:	d0b5      	beq.n	8016a0c <GUI__CompactPixelIndices+0xac>
 8016aa0:	f852 4c24 	ldr.w	r4, [r2, #-36]
 8016aa4:	2901      	cmp	r1, #1
 8016aa6:	f004 0401 	and.w	r4, r4, #1
 8016aaa:	ea43 0304 	orr.w	r3, r3, r4
 8016aae:	f800 3b01 	strb.w	r3, [r0], #1
 8016ab2:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8016ab6:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	d1b2      	bne.n	8016a24 <GUI__CompactPixelIndices+0xc4>
 8016abe:	7003      	strb	r3, [r0, #0]
 8016ac0:	e7a5      	b.n	8016a0e <GUI__CompactPixelIndices+0xae>
 8016ac2:	f100 0408 	add.w	r4, r0, #8
 8016ac6:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8016aca:	2901      	cmp	r1, #1
 8016acc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	d013      	beq.n	8016afc <GUI__CompactPixelIndices+0x19c>
 8016ad4:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8016ad8:	3902      	subs	r1, #2
 8016ada:	f104 0408 	add.w	r4, r4, #8
 8016ade:	f002 020f 	and.w	r2, r2, #15
 8016ae2:	ea43 0302 	orr.w	r3, r3, r2
 8016ae6:	f800 3b01 	strb.w	r3, [r0], #1
 8016aea:	f43f af47 	beq.w	801697c <GUI__CompactPixelIndices+0x1c>
 8016aee:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8016af2:	2901      	cmp	r1, #1
 8016af4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	d1eb      	bne.n	8016ad4 <GUI__CompactPixelIndices+0x174>
 8016afc:	7003      	strb	r3, [r0, #0]
 8016afe:	4608      	mov	r0, r1
 8016b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop

08016b08 <GUI__CompactPixelIndicesEx>:
 8016b08:	2a08      	cmp	r2, #8
 8016b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b0e:	460c      	mov	r4, r1
 8016b10:	4605      	mov	r5, r0
 8016b12:	681f      	ldr	r7, [r3, #0]
 8016b14:	dd0c      	ble.n	8016b30 <GUI__CompactPixelIndicesEx+0x28>
 8016b16:	2a10      	cmp	r2, #16
 8016b18:	dc21      	bgt.n	8016b5e <GUI__CompactPixelIndicesEx+0x56>
 8016b1a:	691e      	ldr	r6, [r3, #16]
 8016b1c:	2e00      	cmp	r6, #0
 8016b1e:	f000 8091 	beq.w	8016c44 <GUI__CompactPixelIndicesEx+0x13c>
 8016b22:	4622      	mov	r2, r4
 8016b24:	4629      	mov	r1, r5
 8016b26:	2302      	movs	r3, #2
 8016b28:	47b0      	blx	r6
 8016b2a:	2001      	movs	r0, #1
 8016b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b30:	3a01      	subs	r2, #1
 8016b32:	2a07      	cmp	r2, #7
 8016b34:	d810      	bhi.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>
 8016b36:	e8df f002 	tbb	[pc, r2]
 8016b3a:	5104      	.short	0x5104
 8016b3c:	0f0f770f 	.word	0x0f0f770f
 8016b40:	9a0f      	.short	0x9a0f
 8016b42:	f100 0820 	add.w	r8, r0, #32
 8016b46:	f858 0c20 	ldr.w	r0, [r8, #-32]
 8016b4a:	47b8      	blx	r7
 8016b4c:	2c01      	cmp	r4, #1
 8016b4e:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8016b52:	b2c6      	uxtb	r6, r0
 8016b54:	d106      	bne.n	8016b64 <GUI__CompactPixelIndicesEx+0x5c>
 8016b56:	702e      	strb	r6, [r5, #0]
 8016b58:	2001      	movs	r0, #1
 8016b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b5e:	2000      	movs	r0, #0
 8016b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b64:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 8016b68:	47b8      	blx	r7
 8016b6a:	2c02      	cmp	r4, #2
 8016b6c:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8016b70:	b2c6      	uxtb	r6, r0
 8016b72:	d0f0      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016b74:	f858 0c18 	ldr.w	r0, [r8, #-24]
 8016b78:	47b8      	blx	r7
 8016b7a:	2c03      	cmp	r4, #3
 8016b7c:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8016b80:	b2c6      	uxtb	r6, r0
 8016b82:	d0e8      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016b84:	f858 0c14 	ldr.w	r0, [r8, #-20]
 8016b88:	47b8      	blx	r7
 8016b8a:	2c04      	cmp	r4, #4
 8016b8c:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8016b90:	b2c6      	uxtb	r6, r0
 8016b92:	d0e0      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016b94:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8016b98:	47b8      	blx	r7
 8016b9a:	2c05      	cmp	r4, #5
 8016b9c:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8016ba0:	b2c6      	uxtb	r6, r0
 8016ba2:	d0d8      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016ba4:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8016ba8:	47b8      	blx	r7
 8016baa:	2c06      	cmp	r4, #6
 8016bac:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8016bb0:	b2c6      	uxtb	r6, r0
 8016bb2:	d0d0      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016bb4:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8016bb8:	47b8      	blx	r7
 8016bba:	2c07      	cmp	r4, #7
 8016bbc:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 8016bc0:	b2c6      	uxtb	r6, r0
 8016bc2:	d0c8      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016bc4:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8016bc8:	f108 0820 	add.w	r8, r8, #32
 8016bcc:	47b8      	blx	r7
 8016bce:	3c08      	subs	r4, #8
 8016bd0:	ea40 0006 	orr.w	r0, r0, r6
 8016bd4:	f805 0b01 	strb.w	r0, [r5], #1
 8016bd8:	d1b5      	bne.n	8016b46 <GUI__CompactPixelIndicesEx+0x3e>
 8016bda:	e7bd      	b.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>
 8016bdc:	f100 0810 	add.w	r8, r0, #16
 8016be0:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8016be4:	47b8      	blx	r7
 8016be6:	2c01      	cmp	r4, #1
 8016be8:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8016bec:	b2c6      	uxtb	r6, r0
 8016bee:	d0b2      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016bf0:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8016bf4:	47b8      	blx	r7
 8016bf6:	2c02      	cmp	r4, #2
 8016bf8:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8016bfc:	b2c6      	uxtb	r6, r0
 8016bfe:	d0aa      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016c00:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8016c04:	47b8      	blx	r7
 8016c06:	2c03      	cmp	r4, #3
 8016c08:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8016c0c:	b2c6      	uxtb	r6, r0
 8016c0e:	d0a2      	beq.n	8016b56 <GUI__CompactPixelIndicesEx+0x4e>
 8016c10:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8016c14:	f108 0810 	add.w	r8, r8, #16
 8016c18:	47b8      	blx	r7
 8016c1a:	3c04      	subs	r4, #4
 8016c1c:	ea40 0006 	orr.w	r0, r0, r6
 8016c20:	f805 0b01 	strb.w	r0, [r5], #1
 8016c24:	d1dc      	bne.n	8016be0 <GUI__CompactPixelIndicesEx+0xd8>
 8016c26:	e797      	b.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>
 8016c28:	f100 0808 	add.w	r8, r0, #8
 8016c2c:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8016c30:	47b8      	blx	r7
 8016c32:	2c01      	cmp	r4, #1
 8016c34:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016c38:	b2c6      	uxtb	r6, r0
 8016c3a:	d10c      	bne.n	8016c56 <GUI__CompactPixelIndicesEx+0x14e>
 8016c3c:	702e      	strb	r6, [r5, #0]
 8016c3e:	4620      	mov	r0, r4
 8016c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c44:	1e86      	subs	r6, r0, #2
 8016c46:	f855 0b04 	ldr.w	r0, [r5], #4
 8016c4a:	47b8      	blx	r7
 8016c4c:	3c01      	subs	r4, #1
 8016c4e:	f826 0f02 	strh.w	r0, [r6, #2]!
 8016c52:	d1f8      	bne.n	8016c46 <GUI__CompactPixelIndicesEx+0x13e>
 8016c54:	e780      	b.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>
 8016c56:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8016c5a:	f108 0808 	add.w	r8, r8, #8
 8016c5e:	47b8      	blx	r7
 8016c60:	3c02      	subs	r4, #2
 8016c62:	ea40 0006 	orr.w	r0, r0, r6
 8016c66:	f805 0b01 	strb.w	r0, [r5], #1
 8016c6a:	d1df      	bne.n	8016c2c <GUI__CompactPixelIndicesEx+0x124>
 8016c6c:	e774      	b.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>
 8016c6e:	691e      	ldr	r6, [r3, #16]
 8016c70:	b13e      	cbz	r6, 8016c82 <GUI__CompactPixelIndicesEx+0x17a>
 8016c72:	4628      	mov	r0, r5
 8016c74:	4622      	mov	r2, r4
 8016c76:	2301      	movs	r3, #1
 8016c78:	4629      	mov	r1, r5
 8016c7a:	47b0      	blx	r6
 8016c7c:	2001      	movs	r0, #1
 8016c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c82:	1e6e      	subs	r6, r5, #1
 8016c84:	f855 0b04 	ldr.w	r0, [r5], #4
 8016c88:	47b8      	blx	r7
 8016c8a:	3c01      	subs	r4, #1
 8016c8c:	f806 0f01 	strb.w	r0, [r6, #1]!
 8016c90:	d1f8      	bne.n	8016c84 <GUI__CompactPixelIndicesEx+0x17c>
 8016c92:	e761      	b.n	8016b58 <GUI__CompactPixelIndicesEx+0x50>

08016c94 <GUI__ExpandPixelIndices>:
 8016c94:	2a08      	cmp	r2, #8
 8016c96:	dd0c      	ble.n	8016cb2 <GUI__ExpandPixelIndices+0x1e>
 8016c98:	2a10      	cmp	r2, #16
 8016c9a:	dc31      	bgt.n	8016d00 <GUI__ExpandPixelIndices+0x6c>
 8016c9c:	0049      	lsls	r1, r1, #1
 8016c9e:	4408      	add	r0, r1
 8016ca0:	1843      	adds	r3, r0, r1
 8016ca2:	1a41      	subs	r1, r0, r1
 8016ca4:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 8016ca8:	4288      	cmp	r0, r1
 8016caa:	f843 2d04 	str.w	r2, [r3, #-4]!
 8016cae:	d1f9      	bne.n	8016ca4 <GUI__ExpandPixelIndices+0x10>
 8016cb0:	4770      	bx	lr
 8016cb2:	3a01      	subs	r2, #1
 8016cb4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8016cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cba:	2a07      	cmp	r2, #7
 8016cbc:	d81f      	bhi.n	8016cfe <GUI__ExpandPixelIndices+0x6a>
 8016cbe:	e8df f002 	tbb	[pc, r2]
 8016cc2:	0443      	.short	0x0443
 8016cc4:	20202929 	.word	0x20202929
 8016cc8:	2020      	.short	0x2020
 8016cca:	1e4a      	subs	r2, r1, #1
 8016ccc:	424c      	negs	r4, r1
 8016cce:	f04f 0e03 	mov.w	lr, #3
 8016cd2:	eb00 00a2 	add.w	r0, r0, r2, asr #2
 8016cd6:	ea04 010e 	and.w	r1, r4, lr
 8016cda:	e000      	b.n	8016cde <GUI__ExpandPixelIndices+0x4a>
 8016cdc:	3a01      	subs	r2, #1
 8016cde:	004e      	lsls	r6, r1, #1
 8016ce0:	7804      	ldrb	r4, [r0, #0]
 8016ce2:	3101      	adds	r1, #1
 8016ce4:	fa0e f506 	lsl.w	r5, lr, r6
 8016ce8:	f021 0703 	bic.w	r7, r1, #3
 8016cec:	eba0 00a1 	sub.w	r0, r0, r1, asr #2
 8016cf0:	402c      	ands	r4, r5
 8016cf2:	4139      	asrs	r1, r7
 8016cf4:	4134      	asrs	r4, r6
 8016cf6:	f843 4d04 	str.w	r4, [r3, #-4]!
 8016cfa:	2a00      	cmp	r2, #0
 8016cfc:	d1ee      	bne.n	8016cdc <GUI__ExpandPixelIndices+0x48>
 8016cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d00:	4770      	bx	lr
 8016d02:	4408      	add	r0, r1
 8016d04:	1a41      	subs	r1, r0, r1
 8016d06:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 8016d0a:	4288      	cmp	r0, r1
 8016d0c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8016d10:	d1f9      	bne.n	8016d06 <GUI__ExpandPixelIndices+0x72>
 8016d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d14:	1e4a      	subs	r2, r1, #1
 8016d16:	f04f 0e0f 	mov.w	lr, #15
 8016d1a:	f001 0101 	and.w	r1, r1, #1
 8016d1e:	eb00 0062 	add.w	r0, r0, r2, asr #1
 8016d22:	e000      	b.n	8016d26 <GUI__ExpandPixelIndices+0x92>
 8016d24:	3a01      	subs	r2, #1
 8016d26:	008e      	lsls	r6, r1, #2
 8016d28:	7804      	ldrb	r4, [r0, #0]
 8016d2a:	3101      	adds	r1, #1
 8016d2c:	fa0e f506 	lsl.w	r5, lr, r6
 8016d30:	f021 0701 	bic.w	r7, r1, #1
 8016d34:	eba0 0061 	sub.w	r0, r0, r1, asr #1
 8016d38:	402c      	ands	r4, r5
 8016d3a:	4139      	asrs	r1, r7
 8016d3c:	4134      	asrs	r4, r6
 8016d3e:	f843 4d04 	str.w	r4, [r3, #-4]!
 8016d42:	2a00      	cmp	r2, #0
 8016d44:	d1ee      	bne.n	8016d24 <GUI__ExpandPixelIndices+0x90>
 8016d46:	e7da      	b.n	8016cfe <GUI__ExpandPixelIndices+0x6a>
 8016d48:	424c      	negs	r4, r1
 8016d4a:	1e4a      	subs	r2, r1, #1
 8016d4c:	2701      	movs	r7, #1
 8016d4e:	f004 0407 	and.w	r4, r4, #7
 8016d52:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 8016d56:	e000      	b.n	8016d5a <GUI__ExpandPixelIndices+0xc6>
 8016d58:	3a01      	subs	r2, #1
 8016d5a:	7806      	ldrb	r6, [r0, #0]
 8016d5c:	fa07 f104 	lsl.w	r1, r7, r4
 8016d60:	1c65      	adds	r5, r4, #1
 8016d62:	4031      	ands	r1, r6
 8016d64:	f025 0607 	bic.w	r6, r5, #7
 8016d68:	eba0 00e5 	sub.w	r0, r0, r5, asr #3
 8016d6c:	4121      	asrs	r1, r4
 8016d6e:	fa45 f406 	asr.w	r4, r5, r6
 8016d72:	f843 1d04 	str.w	r1, [r3, #-4]!
 8016d76:	2a00      	cmp	r2, #0
 8016d78:	d1ee      	bne.n	8016d58 <GUI__ExpandPixelIndices+0xc4>
 8016d7a:	e7c0      	b.n	8016cfe <GUI__ExpandPixelIndices+0x6a>

08016d7c <GUI__ExpandPixelIndicesEx>:
 8016d7c:	2900      	cmp	r1, #0
 8016d7e:	dd2a      	ble.n	8016dd6 <GUI__ExpandPixelIndicesEx+0x5a>
 8016d80:	2a08      	cmp	r2, #8
 8016d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	685d      	ldr	r5, [r3, #4]
 8016d8a:	dd03      	ble.n	8016d94 <GUI__ExpandPixelIndicesEx+0x18>
 8016d8c:	2a10      	cmp	r2, #16
 8016d8e:	dd0c      	ble.n	8016daa <GUI__ExpandPixelIndicesEx+0x2e>
 8016d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d94:	1e53      	subs	r3, r2, #1
 8016d96:	2b07      	cmp	r3, #7
 8016d98:	d805      	bhi.n	8016da6 <GUI__ExpandPixelIndicesEx+0x2a>
 8016d9a:	e8df f003 	tbb	[pc, r3]
 8016d9e:	512a      	.short	0x512a
 8016da0:	04047b04 	.word	0x04047b04
 8016da4:	1d04      	.short	0x1d04
 8016da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016daa:	695e      	ldr	r6, [r3, #20]
 8016dac:	b136      	cbz	r6, 8016dbc <GUI__ExpandPixelIndicesEx+0x40>
 8016dae:	460a      	mov	r2, r1
 8016db0:	46b4      	mov	ip, r6
 8016db2:	4621      	mov	r1, r4
 8016db4:	2302      	movs	r3, #2
 8016db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dba:	4760      	bx	ip
 8016dbc:	0049      	lsls	r1, r1, #1
 8016dbe:	440c      	add	r4, r1
 8016dc0:	1866      	adds	r6, r4, r1
 8016dc2:	1a67      	subs	r7, r4, r1
 8016dc4:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 8016dc8:	47a8      	blx	r5
 8016dca:	f846 0d04 	str.w	r0, [r6, #-4]!
 8016dce:	42bc      	cmp	r4, r7
 8016dd0:	d1f8      	bne.n	8016dc4 <GUI__ExpandPixelIndicesEx+0x48>
 8016dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dd6:	4770      	bx	lr
 8016dd8:	1866      	adds	r6, r4, r1
 8016dda:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8016dde:	1a77      	subs	r7, r6, r1
 8016de0:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8016de4:	47a8      	blx	r5
 8016de6:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016dea:	42be      	cmp	r6, r7
 8016dec:	d1f8      	bne.n	8016de0 <GUI__ExpandPixelIndicesEx+0x64>
 8016dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016df2:	1e4f      	subs	r7, r1, #1
 8016df4:	2680      	movs	r6, #128	; 0x80
 8016df6:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8016dfa:	10fb      	asrs	r3, r7, #3
 8016dfc:	f007 0807 	and.w	r8, r7, #7
 8016e00:	448a      	add	sl, r1
 8016e02:	fa46 f608 	asr.w	r6, r6, r8
 8016e06:	1e59      	subs	r1, r3, #1
 8016e08:	f814 9003 	ldrb.w	r9, [r4, r3]
 8016e0c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8016e10:	b2f6      	uxtb	r6, r6
 8016e12:	440c      	add	r4, r1
 8016e14:	ea06 0009 	and.w	r0, r6, r9
 8016e18:	f1c8 0307 	rsb	r3, r8, #7
 8016e1c:	0076      	lsls	r6, r6, #1
 8016e1e:	4118      	asrs	r0, r3
 8016e20:	47a8      	blx	r5
 8016e22:	f84a 0904 	str.w	r0, [sl], #-4
 8016e26:	f1b8 0f00 	cmp.w	r8, #0
 8016e2a:	d15f      	bne.n	8016eec <GUI__ExpandPixelIndicesEx+0x170>
 8016e2c:	f894 9000 	ldrb.w	r9, [r4]
 8016e30:	2601      	movs	r6, #1
 8016e32:	3c01      	subs	r4, #1
 8016e34:	f04f 0807 	mov.w	r8, #7
 8016e38:	2f00      	cmp	r7, #0
 8016e3a:	d0b4      	beq.n	8016da6 <GUI__ExpandPixelIndicesEx+0x2a>
 8016e3c:	3f01      	subs	r7, #1
 8016e3e:	e7e9      	b.n	8016e14 <GUI__ExpandPixelIndicesEx+0x98>
 8016e40:	1e4f      	subs	r7, r1, #1
 8016e42:	26c0      	movs	r6, #192	; 0xc0
 8016e44:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8016e48:	f007 0903 	and.w	r9, r7, #3
 8016e4c:	10bb      	asrs	r3, r7, #2
 8016e4e:	448a      	add	sl, r1
 8016e50:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8016e54:	1e59      	subs	r1, r3, #1
 8016e56:	f814 8003 	ldrb.w	r8, [r4, r3]
 8016e5a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8016e5e:	4106      	asrs	r6, r0
 8016e60:	440c      	add	r4, r1
 8016e62:	b2f6      	uxtb	r6, r6
 8016e64:	ea06 0308 	and.w	r3, r6, r8
 8016e68:	f1c0 0006 	rsb	r0, r0, #6
 8016e6c:	00b6      	lsls	r6, r6, #2
 8016e6e:	fa43 f000 	asr.w	r0, r3, r0
 8016e72:	47a8      	blx	r5
 8016e74:	f84a 0904 	str.w	r0, [sl], #-4
 8016e78:	f1b9 0f00 	cmp.w	r9, #0
 8016e7c:	d13e      	bne.n	8016efc <GUI__ExpandPixelIndicesEx+0x180>
 8016e7e:	2603      	movs	r6, #3
 8016e80:	f894 8000 	ldrb.w	r8, [r4]
 8016e84:	3c01      	subs	r4, #1
 8016e86:	46b1      	mov	r9, r6
 8016e88:	2f00      	cmp	r7, #0
 8016e8a:	d08c      	beq.n	8016da6 <GUI__ExpandPixelIndicesEx+0x2a>
 8016e8c:	3f01      	subs	r7, #1
 8016e8e:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8016e92:	e7e7      	b.n	8016e64 <GUI__ExpandPixelIndicesEx+0xe8>
 8016e94:	1e4f      	subs	r7, r1, #1
 8016e96:	26f0      	movs	r6, #240	; 0xf0
 8016e98:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8016e9c:	f007 0901 	and.w	r9, r7, #1
 8016ea0:	107b      	asrs	r3, r7, #1
 8016ea2:	448a      	add	sl, r1
 8016ea4:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8016ea8:	1e59      	subs	r1, r3, #1
 8016eaa:	f814 8003 	ldrb.w	r8, [r4, r3]
 8016eae:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8016eb2:	4106      	asrs	r6, r0
 8016eb4:	440c      	add	r4, r1
 8016eb6:	b2f6      	uxtb	r6, r6
 8016eb8:	ea06 0308 	and.w	r3, r6, r8
 8016ebc:	f1c0 0004 	rsb	r0, r0, #4
 8016ec0:	0136      	lsls	r6, r6, #4
 8016ec2:	fa43 f000 	asr.w	r0, r3, r0
 8016ec6:	47a8      	blx	r5
 8016ec8:	f84a 0904 	str.w	r0, [sl], #-4
 8016ecc:	f1b9 0f00 	cmp.w	r9, #0
 8016ed0:	d110      	bne.n	8016ef4 <GUI__ExpandPixelIndicesEx+0x178>
 8016ed2:	f894 8000 	ldrb.w	r8, [r4]
 8016ed6:	260f      	movs	r6, #15
 8016ed8:	3c01      	subs	r4, #1
 8016eda:	f04f 0901 	mov.w	r9, #1
 8016ede:	2f00      	cmp	r7, #0
 8016ee0:	f43f af61 	beq.w	8016da6 <GUI__ExpandPixelIndicesEx+0x2a>
 8016ee4:	3f01      	subs	r7, #1
 8016ee6:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8016eea:	e7e5      	b.n	8016eb8 <GUI__ExpandPixelIndicesEx+0x13c>
 8016eec:	f108 38ff 	add.w	r8, r8, #4294967295
 8016ef0:	b2f6      	uxtb	r6, r6
 8016ef2:	e7a1      	b.n	8016e38 <GUI__ExpandPixelIndicesEx+0xbc>
 8016ef4:	b2f6      	uxtb	r6, r6
 8016ef6:	f04f 0900 	mov.w	r9, #0
 8016efa:	e7f0      	b.n	8016ede <GUI__ExpandPixelIndicesEx+0x162>
 8016efc:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f00:	b2f6      	uxtb	r6, r6
 8016f02:	e7c1      	b.n	8016e88 <GUI__ExpandPixelIndicesEx+0x10c>

08016f04 <GUI__IntersectRect>:
 8016f04:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016f08:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016f12:	bfb8      	it	lt
 8016f14:	8003      	strhlt	r3, [r0, #0]
 8016f16:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016f20:	bfb8      	it	lt
 8016f22:	8043      	strhlt	r3, [r0, #2]
 8016f24:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016f2e:	bfc8      	it	gt
 8016f30:	8083      	strhgt	r3, [r0, #4]
 8016f32:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	bfc8      	it	gt
 8016f3a:	80c3      	strhgt	r3, [r0, #6]
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop

08016f40 <GUI__IntersectRects>:
 8016f40:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f46:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016f4a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016f4e:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016f52:	42a3      	cmp	r3, r4
 8016f54:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8016f58:	bfb8      	it	lt
 8016f5a:	4623      	movlt	r3, r4
 8016f5c:	45ae      	cmp	lr, r5
 8016f5e:	4674      	mov	r4, lr
 8016f60:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8016f64:	bfb8      	it	lt
 8016f66:	462c      	movlt	r4, r5
 8016f68:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016f6c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016f70:	4639      	mov	r1, r7
 8016f72:	42af      	cmp	r7, r5
 8016f74:	8003      	strh	r3, [r0, #0]
 8016f76:	8044      	strh	r4, [r0, #2]
 8016f78:	bfa8      	it	ge
 8016f7a:	4629      	movge	r1, r5
 8016f7c:	42b2      	cmp	r2, r6
 8016f7e:	bfa8      	it	ge
 8016f80:	4632      	movge	r2, r6
 8016f82:	8081      	strh	r1, [r0, #4]
 8016f84:	4294      	cmp	r4, r2
 8016f86:	bfd8      	it	le
 8016f88:	428b      	cmple	r3, r1
 8016f8a:	80c2      	strh	r2, [r0, #6]
 8016f8c:	bfcc      	ite	gt
 8016f8e:	2301      	movgt	r3, #1
 8016f90:	2300      	movle	r3, #0
 8016f92:	f083 0001 	eor.w	r0, r3, #1
 8016f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f98 <GUI__memset>:
 8016f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f9a:	4606      	mov	r6, r0
 8016f9c:	b14a      	cbz	r2, 8016fb2 <GUI__memset+0x1a>
 8016f9e:	0784      	lsls	r4, r0, #30
 8016fa0:	b2c9      	uxtb	r1, r1
 8016fa2:	d008      	beq.n	8016fb6 <GUI__memset+0x1e>
 8016fa4:	e001      	b.n	8016faa <GUI__memset+0x12>
 8016fa6:	0783      	lsls	r3, r0, #30
 8016fa8:	d005      	beq.n	8016fb6 <GUI__memset+0x1e>
 8016faa:	3a01      	subs	r2, #1
 8016fac:	f800 1b01 	strb.w	r1, [r0], #1
 8016fb0:	d1f9      	bne.n	8016fa6 <GUI__memset+0xe>
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb6:	0897      	lsrs	r7, r2, #2
 8016fb8:	463b      	mov	r3, r7
 8016fba:	b34f      	cbz	r7, 8017010 <GUI__memset+0x78>
 8016fbc:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 8016fc0:	2f03      	cmp	r7, #3
 8016fc2:	f002 0203 	and.w	r2, r2, #3
 8016fc6:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8016fca:	d915      	bls.n	8016ff8 <GUI__memset+0x60>
 8016fcc:	f100 0310 	add.w	r3, r0, #16
 8016fd0:	463d      	mov	r5, r7
 8016fd2:	3d04      	subs	r5, #4
 8016fd4:	f843 4c10 	str.w	r4, [r3, #-16]
 8016fd8:	f843 4c0c 	str.w	r4, [r3, #-12]
 8016fdc:	3310      	adds	r3, #16
 8016fde:	2d03      	cmp	r5, #3
 8016fe0:	f843 4c18 	str.w	r4, [r3, #-24]
 8016fe4:	f843 4c14 	str.w	r4, [r3, #-20]
 8016fe8:	dcf3      	bgt.n	8016fd2 <GUI__memset+0x3a>
 8016fea:	3f04      	subs	r7, #4
 8016fec:	08bb      	lsrs	r3, r7, #2
 8016fee:	1c5d      	adds	r5, r3, #1
 8016ff0:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 8016ff4:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8016ff8:	b143      	cbz	r3, 801700c <GUI__memset+0x74>
 8016ffa:	2b01      	cmp	r3, #1
 8016ffc:	6004      	str	r4, [r0, #0]
 8016ffe:	d003      	beq.n	8017008 <GUI__memset+0x70>
 8017000:	2b02      	cmp	r3, #2
 8017002:	6044      	str	r4, [r0, #4]
 8017004:	bf18      	it	ne
 8017006:	6084      	strne	r4, [r0, #8]
 8017008:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801700c:	2a00      	cmp	r2, #0
 801700e:	d0d0      	beq.n	8016fb2 <GUI__memset+0x1a>
 8017010:	f00a fea0 	bl	8021d54 <memset>
 8017014:	4630      	mov	r0, r6
 8017016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017018 <GUI__memset16>:
 8017018:	b470      	push	{r4, r5, r6}
 801701a:	0784      	lsls	r4, r0, #30
 801701c:	d502      	bpl.n	8017024 <GUI__memset16+0xc>
 801701e:	8001      	strh	r1, [r0, #0]
 8017020:	3a01      	subs	r2, #1
 8017022:	3002      	adds	r0, #2
 8017024:	0856      	lsrs	r6, r2, #1
 8017026:	d00d      	beq.n	8017044 <GUI__memset16+0x2c>
 8017028:	2e03      	cmp	r6, #3
 801702a:	4633      	mov	r3, r6
 801702c:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8017030:	d80d      	bhi.n	801704e <GUI__memset16+0x36>
 8017032:	2b01      	cmp	r3, #1
 8017034:	6004      	str	r4, [r0, #0]
 8017036:	d003      	beq.n	8017040 <GUI__memset16+0x28>
 8017038:	2b02      	cmp	r3, #2
 801703a:	6044      	str	r4, [r0, #4]
 801703c:	bf18      	it	ne
 801703e:	6084      	strne	r4, [r0, #8]
 8017040:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8017044:	07d3      	lsls	r3, r2, #31
 8017046:	bc70      	pop	{r4, r5, r6}
 8017048:	bf48      	it	mi
 801704a:	8001      	strhmi	r1, [r0, #0]
 801704c:	4770      	bx	lr
 801704e:	f100 0310 	add.w	r3, r0, #16
 8017052:	4635      	mov	r5, r6
 8017054:	3d04      	subs	r5, #4
 8017056:	f843 4c10 	str.w	r4, [r3, #-16]
 801705a:	f843 4c0c 	str.w	r4, [r3, #-12]
 801705e:	3310      	adds	r3, #16
 8017060:	2d03      	cmp	r5, #3
 8017062:	f843 4c18 	str.w	r4, [r3, #-24]
 8017066:	f843 4c14 	str.w	r4, [r3, #-20]
 801706a:	dcf3      	bgt.n	8017054 <GUI__memset16+0x3c>
 801706c:	3e04      	subs	r6, #4
 801706e:	08b3      	lsrs	r3, r6, #2
 8017070:	1c5d      	adds	r5, r3, #1
 8017072:	ebb6 0383 	subs.w	r3, r6, r3, lsl #2
 8017076:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 801707a:	d1da      	bne.n	8017032 <GUI__memset16+0x1a>
 801707c:	e7e2      	b.n	8017044 <GUI__memset16+0x2c>
 801707e:	bf00      	nop

08017080 <GUI__sqrt32>:
 8017080:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8017084:	bf2b      	itete	cs
 8017086:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 801708a:	2300      	movcc	r3, #0
 801708c:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8017090:	2200      	movcc	r2, #0
 8017092:	085b      	lsrs	r3, r3, #1
 8017094:	1a80      	subs	r0, r0, r2
 8017096:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 801709a:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 801709e:	4290      	cmp	r0, r2
 80170a0:	bf2c      	ite	cs
 80170a2:	460b      	movcs	r3, r1
 80170a4:	2200      	movcc	r2, #0
 80170a6:	085b      	lsrs	r3, r3, #1
 80170a8:	1a82      	subs	r2, r0, r2
 80170aa:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 80170ae:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 80170b2:	428a      	cmp	r2, r1
 80170b4:	bf2c      	ite	cs
 80170b6:	4603      	movcs	r3, r0
 80170b8:	2100      	movcc	r1, #0
 80170ba:	085b      	lsrs	r3, r3, #1
 80170bc:	1a50      	subs	r0, r2, r1
 80170be:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 80170c2:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 80170c6:	4290      	cmp	r0, r2
 80170c8:	bf2c      	ite	cs
 80170ca:	460b      	movcs	r3, r1
 80170cc:	2200      	movcc	r2, #0
 80170ce:	085b      	lsrs	r3, r3, #1
 80170d0:	1a81      	subs	r1, r0, r2
 80170d2:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 80170d6:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 80170da:	4291      	cmp	r1, r2
 80170dc:	bf2c      	ite	cs
 80170de:	4603      	movcs	r3, r0
 80170e0:	2200      	movcc	r2, #0
 80170e2:	085b      	lsrs	r3, r3, #1
 80170e4:	1a8a      	subs	r2, r1, r2
 80170e6:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 80170ea:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 80170ee:	428a      	cmp	r2, r1
 80170f0:	bf2c      	ite	cs
 80170f2:	4603      	movcs	r3, r0
 80170f4:	2100      	movcc	r1, #0
 80170f6:	085b      	lsrs	r3, r3, #1
 80170f8:	1a50      	subs	r0, r2, r1
 80170fa:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 80170fe:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 8017102:	4290      	cmp	r0, r2
 8017104:	bf2c      	ite	cs
 8017106:	460b      	movcs	r3, r1
 8017108:	2200      	movcc	r2, #0
 801710a:	085b      	lsrs	r3, r3, #1
 801710c:	1a81      	subs	r1, r0, r2
 801710e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8017112:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8017116:	4291      	cmp	r1, r2
 8017118:	bf2c      	ite	cs
 801711a:	4603      	movcs	r3, r0
 801711c:	2200      	movcc	r2, #0
 801711e:	085b      	lsrs	r3, r3, #1
 8017120:	1a8a      	subs	r2, r1, r2
 8017122:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8017126:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 801712a:	428a      	cmp	r2, r1
 801712c:	bf2c      	ite	cs
 801712e:	4603      	movcs	r3, r0
 8017130:	2100      	movcc	r1, #0
 8017132:	085b      	lsrs	r3, r3, #1
 8017134:	1a50      	subs	r0, r2, r1
 8017136:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 801713a:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 801713e:	4290      	cmp	r0, r2
 8017140:	bf2c      	ite	cs
 8017142:	460b      	movcs	r3, r1
 8017144:	2200      	movcc	r2, #0
 8017146:	085b      	lsrs	r3, r3, #1
 8017148:	1a81      	subs	r1, r0, r2
 801714a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 801714e:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8017152:	4291      	cmp	r1, r2
 8017154:	bf2c      	ite	cs
 8017156:	4603      	movcs	r3, r0
 8017158:	2200      	movcc	r2, #0
 801715a:	085b      	lsrs	r3, r3, #1
 801715c:	1a8a      	subs	r2, r1, r2
 801715e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8017162:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8017166:	428a      	cmp	r2, r1
 8017168:	bf2c      	ite	cs
 801716a:	4603      	movcs	r3, r0
 801716c:	2100      	movcc	r1, #0
 801716e:	085b      	lsrs	r3, r3, #1
 8017170:	1a50      	subs	r0, r2, r1
 8017172:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8017176:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801717a:	4290      	cmp	r0, r2
 801717c:	bf2c      	ite	cs
 801717e:	460b      	movcs	r3, r1
 8017180:	2200      	movcc	r2, #0
 8017182:	085b      	lsrs	r3, r3, #1
 8017184:	1a81      	subs	r1, r0, r2
 8017186:	f103 0210 	add.w	r2, r3, #16
 801718a:	f103 0020 	add.w	r0, r3, #32
 801718e:	4291      	cmp	r1, r2
 8017190:	bf2c      	ite	cs
 8017192:	4603      	movcs	r3, r0
 8017194:	2200      	movcc	r2, #0
 8017196:	085b      	lsrs	r3, r3, #1
 8017198:	1a8a      	subs	r2, r1, r2
 801719a:	1d19      	adds	r1, r3, #4
 801719c:	f103 0008 	add.w	r0, r3, #8
 80171a0:	428a      	cmp	r2, r1
 80171a2:	bf2c      	ite	cs
 80171a4:	4603      	movcs	r3, r0
 80171a6:	2100      	movcc	r1, #0
 80171a8:	085b      	lsrs	r3, r3, #1
 80171aa:	1a52      	subs	r2, r2, r1
 80171ac:	1c58      	adds	r0, r3, #1
 80171ae:	1c99      	adds	r1, r3, #2
 80171b0:	4290      	cmp	r0, r2
 80171b2:	bf94      	ite	ls
 80171b4:	4608      	movls	r0, r1
 80171b6:	4618      	movhi	r0, r3
 80171b8:	0840      	lsrs	r0, r0, #1
 80171ba:	4770      	bx	lr

080171bc <GUI__SinHQ>:
 80171bc:	2800      	cmp	r0, #0
 80171be:	b4f0      	push	{r4, r5, r6, r7}
 80171c0:	db3f      	blt.n	8017242 <GUI__SinHQ+0x86>
 80171c2:	f04f 36ff 	mov.w	r6, #4294967295
 80171c6:	2101      	movs	r1, #1
 80171c8:	4b20      	ldr	r3, [pc, #128]	; (801724c <GUI__SinHQ+0x90>)
 80171ca:	17c5      	asrs	r5, r0, #31
 80171cc:	4c20      	ldr	r4, [pc, #128]	; (8017250 <GUI__SinHQ+0x94>)
 80171ce:	fb83 2300 	smull	r2, r3, r3, r0
 80171d2:	4a20      	ldr	r2, [pc, #128]	; (8017254 <GUI__SinHQ+0x98>)
 80171d4:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 80171d8:	fb04 0313 	mls	r3, r4, r3, r0
 80171dc:	4293      	cmp	r3, r2
 80171de:	dd04      	ble.n	80171ea <GUI__SinHQ+0x2e>
 80171e0:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 80171e4:	4631      	mov	r1, r6
 80171e6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80171ea:	4a1b      	ldr	r2, [pc, #108]	; (8017258 <GUI__SinHQ+0x9c>)
 80171ec:	4293      	cmp	r3, r2
 80171ee:	dd03      	ble.n	80171f8 <GUI__SinHQ+0x3c>
 80171f0:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 80171f4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80171f8:	4c18      	ldr	r4, [pc, #96]	; (801725c <GUI__SinHQ+0xa0>)
 80171fa:	17da      	asrs	r2, r3, #31
 80171fc:	fb84 5003 	smull	r5, r0, r4, r3
 8017200:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 8017204:	2a5a      	cmp	r2, #90	; 0x5a
 8017206:	d015      	beq.n	8017234 <GUI__SinHQ+0x78>
 8017208:	1c57      	adds	r7, r2, #1
 801720a:	4d15      	ldr	r5, [pc, #84]	; (8017260 <GUI__SinHQ+0xa4>)
 801720c:	4e15      	ldr	r6, [pc, #84]	; (8017264 <GUI__SinHQ+0xa8>)
 801720e:	2901      	cmp	r1, #1
 8017210:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8017214:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8017218:	fb06 3202 	mla	r2, r6, r2, r3
 801721c:	eba5 0300 	sub.w	r3, r5, r0
 8017220:	fb02 f203 	mul.w	r2, r2, r3
 8017224:	fba4 2302 	umull	r2, r3, r4, r2
 8017228:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 801722c:	bcf0      	pop	{r4, r5, r6, r7}
 801722e:	bf18      	it	ne
 8017230:	4240      	negne	r0, r0
 8017232:	4770      	bx	lr
 8017234:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8017238:	2901      	cmp	r1, #1
 801723a:	bcf0      	pop	{r4, r5, r6, r7}
 801723c:	bf18      	it	ne
 801723e:	4240      	negne	r0, r0
 8017240:	4770      	bx	lr
 8017242:	4240      	negs	r0, r0
 8017244:	2601      	movs	r6, #1
 8017246:	f04f 31ff 	mov.w	r1, #4294967295
 801724a:	e7bd      	b.n	80171c8 <GUI__SinHQ+0xc>
 801724c:	5d34edef 	.word	0x5d34edef
 8017250:	00057e40 	.word	0x00057e40
 8017254:	0002bf20 	.word	0x0002bf20
 8017258:	00015f90 	.word	0x00015f90
 801725c:	10624dd3 	.word	0x10624dd3
 8017260:	08024054 	.word	0x08024054
 8017264:	fffffc18 	.word	0xfffffc18

08017268 <GUI__CosHQ>:
 8017268:	4a24      	ldr	r2, [pc, #144]	; (80172fc <GUI__CosHQ+0x94>)
 801726a:	4402      	add	r2, r0
 801726c:	2a00      	cmp	r2, #0
 801726e:	b4f0      	push	{r4, r5, r6, r7}
 8017270:	db3f      	blt.n	80172f2 <GUI__CosHQ+0x8a>
 8017272:	f04f 36ff 	mov.w	r6, #4294967295
 8017276:	2101      	movs	r1, #1
 8017278:	4b21      	ldr	r3, [pc, #132]	; (8017300 <GUI__CosHQ+0x98>)
 801727a:	17d5      	asrs	r5, r2, #31
 801727c:	4c21      	ldr	r4, [pc, #132]	; (8017304 <GUI__CosHQ+0x9c>)
 801727e:	fb83 0302 	smull	r0, r3, r3, r2
 8017282:	4821      	ldr	r0, [pc, #132]	; (8017308 <GUI__CosHQ+0xa0>)
 8017284:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 8017288:	fb04 2313 	mls	r3, r4, r3, r2
 801728c:	4283      	cmp	r3, r0
 801728e:	dd04      	ble.n	801729a <GUI__CosHQ+0x32>
 8017290:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 8017294:	4631      	mov	r1, r6
 8017296:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 801729a:	4a18      	ldr	r2, [pc, #96]	; (80172fc <GUI__CosHQ+0x94>)
 801729c:	4293      	cmp	r3, r2
 801729e:	dd03      	ble.n	80172a8 <GUI__CosHQ+0x40>
 80172a0:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 80172a4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80172a8:	4c18      	ldr	r4, [pc, #96]	; (801730c <GUI__CosHQ+0xa4>)
 80172aa:	17da      	asrs	r2, r3, #31
 80172ac:	fb84 5003 	smull	r5, r0, r4, r3
 80172b0:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 80172b4:	2a5a      	cmp	r2, #90	; 0x5a
 80172b6:	d015      	beq.n	80172e4 <GUI__CosHQ+0x7c>
 80172b8:	1c57      	adds	r7, r2, #1
 80172ba:	4d15      	ldr	r5, [pc, #84]	; (8017310 <GUI__CosHQ+0xa8>)
 80172bc:	4e15      	ldr	r6, [pc, #84]	; (8017314 <GUI__CosHQ+0xac>)
 80172be:	2901      	cmp	r1, #1
 80172c0:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 80172c4:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 80172c8:	fb06 3202 	mla	r2, r6, r2, r3
 80172cc:	eba5 0300 	sub.w	r3, r5, r0
 80172d0:	fb02 f203 	mul.w	r2, r2, r3
 80172d4:	fba4 2302 	umull	r2, r3, r4, r2
 80172d8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 80172dc:	bcf0      	pop	{r4, r5, r6, r7}
 80172de:	bf18      	it	ne
 80172e0:	4240      	negne	r0, r0
 80172e2:	4770      	bx	lr
 80172e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80172e8:	2901      	cmp	r1, #1
 80172ea:	bcf0      	pop	{r4, r5, r6, r7}
 80172ec:	bf18      	it	ne
 80172ee:	4240      	negne	r0, r0
 80172f0:	4770      	bx	lr
 80172f2:	4252      	negs	r2, r2
 80172f4:	2601      	movs	r6, #1
 80172f6:	f04f 31ff 	mov.w	r1, #4294967295
 80172fa:	e7bd      	b.n	8017278 <GUI__CosHQ+0x10>
 80172fc:	00015f90 	.word	0x00015f90
 8017300:	5d34edef 	.word	0x5d34edef
 8017304:	00057e40 	.word	0x00057e40
 8017308:	0002bf20 	.word	0x0002bf20
 801730c:	10624dd3 	.word	0x10624dd3
 8017310:	08024054 	.word	0x08024054
 8017314:	fffffc18 	.word	0xfffffc18

08017318 <_SetBkColor>:
 8017318:	b538      	push	{r3, r4, r5, lr}
 801731a:	4c0b      	ldr	r4, [pc, #44]	; (8017348 <_SetBkColor+0x30>)
 801731c:	6822      	ldr	r2, [r4, #0]
 801731e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8017320:	4281      	cmp	r1, r0
 8017322:	d00d      	beq.n	8017340 <_SetBkColor+0x28>
 8017324:	7c55      	ldrb	r5, [r2, #17]
 8017326:	4909      	ldr	r1, [pc, #36]	; (801734c <_SetBkColor+0x34>)
 8017328:	6350      	str	r0, [r2, #52]	; 0x34
 801732a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	4798      	blx	r3
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	7c1a      	ldrb	r2, [r3, #16]
 8017338:	0752      	lsls	r2, r2, #29
 801733a:	d402      	bmi.n	8017342 <_SetBkColor+0x2a>
 801733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801733e:	6018      	str	r0, [r3, #0]
 8017340:	bd38      	pop	{r3, r4, r5, pc}
 8017342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017344:	6018      	str	r0, [r3, #0]
 8017346:	bd38      	pop	{r3, r4, r5, pc}
 8017348:	20000018 	.word	0x20000018
 801734c:	2002afd0 	.word	0x2002afd0

08017350 <_SetColor>:
 8017350:	b538      	push	{r3, r4, r5, lr}
 8017352:	4c0b      	ldr	r4, [pc, #44]	; (8017380 <_SetColor+0x30>)
 8017354:	6822      	ldr	r2, [r4, #0]
 8017356:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017358:	4281      	cmp	r1, r0
 801735a:	d00d      	beq.n	8017378 <_SetColor+0x28>
 801735c:	7c55      	ldrb	r5, [r2, #17]
 801735e:	4909      	ldr	r1, [pc, #36]	; (8017384 <_SetColor+0x34>)
 8017360:	6310      	str	r0, [r2, #48]	; 0x30
 8017362:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8017366:	691b      	ldr	r3, [r3, #16]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	4798      	blx	r3
 801736c:	6823      	ldr	r3, [r4, #0]
 801736e:	7c1a      	ldrb	r2, [r3, #16]
 8017370:	0752      	lsls	r2, r2, #29
 8017372:	d402      	bmi.n	801737a <_SetColor+0x2a>
 8017374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017376:	6018      	str	r0, [r3, #0]
 8017378:	bd38      	pop	{r3, r4, r5, pc}
 801737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801737c:	6018      	str	r0, [r3, #0]
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	20000018 	.word	0x20000018
 8017384:	2002afd0 	.word	0x2002afd0

08017388 <_SetDrawMode>:
 8017388:	4b0a      	ldr	r3, [pc, #40]	; (80173b4 <_SetDrawMode+0x2c>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	7c1a      	ldrb	r2, [r3, #16]
 801738e:	ea82 0100 	eor.w	r1, r2, r0
 8017392:	0749      	lsls	r1, r1, #29
 8017394:	d50a      	bpl.n	80173ac <_SetDrawMode+0x24>
 8017396:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017398:	b470      	push	{r4, r5, r6}
 801739a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801739c:	680e      	ldr	r6, [r1, #0]
 801739e:	6825      	ldr	r5, [r4, #0]
 80173a0:	6026      	str	r6, [r4, #0]
 80173a2:	600d      	str	r5, [r1, #0]
 80173a4:	7418      	strb	r0, [r3, #16]
 80173a6:	4610      	mov	r0, r2
 80173a8:	bc70      	pop	{r4, r5, r6}
 80173aa:	4770      	bx	lr
 80173ac:	7418      	strb	r0, [r3, #16]
 80173ae:	4610      	mov	r0, r2
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	20000018 	.word	0x20000018

080173b8 <LCD_SetDrawMode>:
 80173b8:	4b01      	ldr	r3, [pc, #4]	; (80173c0 <LCD_SetDrawMode+0x8>)
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	689b      	ldr	r3, [r3, #8]
 80173be:	4718      	bx	r3
 80173c0:	20000054 	.word	0x20000054

080173c4 <LCD_DrawPixel>:
 80173c4:	4b16      	ldr	r3, [pc, #88]	; (8017420 <LCD_DrawPixel+0x5c>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80173cc:	428a      	cmp	r2, r1
 80173ce:	dc1c      	bgt.n	801740a <LCD_DrawPixel+0x46>
 80173d0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80173d4:	4291      	cmp	r1, r2
 80173d6:	dc18      	bgt.n	801740a <LCD_DrawPixel+0x46>
 80173d8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80173dc:	4282      	cmp	r2, r0
 80173de:	dc14      	bgt.n	801740a <LCD_DrawPixel+0x46>
 80173e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80173e4:	4290      	cmp	r0, r2
 80173e6:	dc10      	bgt.n	801740a <LCD_DrawPixel+0x46>
 80173e8:	b430      	push	{r4, r5}
 80173ea:	7c1a      	ldrb	r2, [r3, #16]
 80173ec:	07d2      	lsls	r2, r2, #31
 80173ee:	d40d      	bmi.n	801740c <LCD_DrawPixel+0x48>
 80173f0:	7c5d      	ldrb	r5, [r3, #17]
 80173f2:	460a      	mov	r2, r1
 80173f4:	4c0b      	ldr	r4, [pc, #44]	; (8017424 <LCD_DrawPixel+0x60>)
 80173f6:	4601      	mov	r1, r0
 80173f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173fa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	68c4      	ldr	r4, [r0, #12]
 8017402:	69a4      	ldr	r4, [r4, #24]
 8017404:	46a4      	mov	ip, r4
 8017406:	bc30      	pop	{r4, r5}
 8017408:	4760      	bx	ip
 801740a:	4770      	bx	lr
 801740c:	7c5c      	ldrb	r4, [r3, #17]
 801740e:	460a      	mov	r2, r1
 8017410:	4b04      	ldr	r3, [pc, #16]	; (8017424 <LCD_DrawPixel+0x60>)
 8017412:	4601      	mov	r1, r0
 8017414:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017418:	68c3      	ldr	r3, [r0, #12]
 801741a:	bc30      	pop	{r4, r5}
 801741c:	69db      	ldr	r3, [r3, #28]
 801741e:	4718      	bx	r3
 8017420:	20000018 	.word	0x20000018
 8017424:	2002afd0 	.word	0x2002afd0

08017428 <LCD_DrawHLine>:
 8017428:	4b11      	ldr	r3, [pc, #68]	; (8017470 <LCD_DrawHLine+0x48>)
 801742a:	b430      	push	{r4, r5}
 801742c:	681c      	ldr	r4, [r3, #0]
 801742e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017432:	428b      	cmp	r3, r1
 8017434:	dc0f      	bgt.n	8017456 <LCD_DrawHLine+0x2e>
 8017436:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801743a:	4299      	cmp	r1, r3
 801743c:	dc0b      	bgt.n	8017456 <LCD_DrawHLine+0x2e>
 801743e:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8017442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017446:	42a8      	cmp	r0, r5
 8017448:	bfb8      	it	lt
 801744a:	4628      	movlt	r0, r5
 801744c:	4293      	cmp	r3, r2
 801744e:	bfa8      	it	ge
 8017450:	4613      	movge	r3, r2
 8017452:	4298      	cmp	r0, r3
 8017454:	dd01      	ble.n	801745a <LCD_DrawHLine+0x32>
 8017456:	bc30      	pop	{r4, r5}
 8017458:	4770      	bx	lr
 801745a:	7c65      	ldrb	r5, [r4, #17]
 801745c:	460a      	mov	r2, r1
 801745e:	4c05      	ldr	r4, [pc, #20]	; (8017474 <LCD_DrawHLine+0x4c>)
 8017460:	4601      	mov	r1, r0
 8017462:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8017466:	68c4      	ldr	r4, [r0, #12]
 8017468:	68a4      	ldr	r4, [r4, #8]
 801746a:	46a4      	mov	ip, r4
 801746c:	bc30      	pop	{r4, r5}
 801746e:	4760      	bx	ip
 8017470:	20000018 	.word	0x20000018
 8017474:	2002afd0 	.word	0x2002afd0

08017478 <LCD_DrawVLine>:
 8017478:	4b11      	ldr	r3, [pc, #68]	; (80174c0 <LCD_DrawVLine+0x48>)
 801747a:	b430      	push	{r4, r5}
 801747c:	681c      	ldr	r4, [r3, #0]
 801747e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017482:	4283      	cmp	r3, r0
 8017484:	dc0f      	bgt.n	80174a6 <LCD_DrawVLine+0x2e>
 8017486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801748a:	4298      	cmp	r0, r3
 801748c:	dc0b      	bgt.n	80174a6 <LCD_DrawVLine+0x2e>
 801748e:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8017492:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017496:	42a9      	cmp	r1, r5
 8017498:	bfb8      	it	lt
 801749a:	4629      	movlt	r1, r5
 801749c:	4293      	cmp	r3, r2
 801749e:	bfa8      	it	ge
 80174a0:	4613      	movge	r3, r2
 80174a2:	4299      	cmp	r1, r3
 80174a4:	dd01      	ble.n	80174aa <LCD_DrawVLine+0x32>
 80174a6:	bc30      	pop	{r4, r5}
 80174a8:	4770      	bx	lr
 80174aa:	7c65      	ldrb	r5, [r4, #17]
 80174ac:	460a      	mov	r2, r1
 80174ae:	4c05      	ldr	r4, [pc, #20]	; (80174c4 <LCD_DrawVLine+0x4c>)
 80174b0:	4601      	mov	r1, r0
 80174b2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80174b6:	68c4      	ldr	r4, [r0, #12]
 80174b8:	68e4      	ldr	r4, [r4, #12]
 80174ba:	46a4      	mov	ip, r4
 80174bc:	bc30      	pop	{r4, r5}
 80174be:	4760      	bx	ip
 80174c0:	20000018 	.word	0x20000018
 80174c4:	2002afd0 	.word	0x2002afd0

080174c8 <LCD_FillRect>:
 80174c8:	b570      	push	{r4, r5, r6, lr}
 80174ca:	4c15      	ldr	r4, [pc, #84]	; (8017520 <LCD_FillRect+0x58>)
 80174cc:	b082      	sub	sp, #8
 80174ce:	6824      	ldr	r4, [r4, #0]
 80174d0:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80174d4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80174d8:	42a8      	cmp	r0, r5
 80174da:	bfb8      	it	lt
 80174dc:	4628      	movlt	r0, r5
 80174de:	42b2      	cmp	r2, r6
 80174e0:	bfa8      	it	ge
 80174e2:	4632      	movge	r2, r6
 80174e4:	4282      	cmp	r2, r0
 80174e6:	db0b      	blt.n	8017500 <LCD_FillRect+0x38>
 80174e8:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80174ec:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80174f0:	42b1      	cmp	r1, r6
 80174f2:	bfb8      	it	lt
 80174f4:	4631      	movlt	r1, r6
 80174f6:	429d      	cmp	r5, r3
 80174f8:	bfa8      	it	ge
 80174fa:	461d      	movge	r5, r3
 80174fc:	42a9      	cmp	r1, r5
 80174fe:	dd01      	ble.n	8017504 <LCD_FillRect+0x3c>
 8017500:	b002      	add	sp, #8
 8017502:	bd70      	pop	{r4, r5, r6, pc}
 8017504:	7c66      	ldrb	r6, [r4, #17]
 8017506:	4613      	mov	r3, r2
 8017508:	4c06      	ldr	r4, [pc, #24]	; (8017524 <LCD_FillRect+0x5c>)
 801750a:	460a      	mov	r2, r1
 801750c:	4601      	mov	r1, r0
 801750e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8017512:	68c4      	ldr	r4, [r0, #12]
 8017514:	9500      	str	r5, [sp, #0]
 8017516:	6924      	ldr	r4, [r4, #16]
 8017518:	47a0      	blx	r4
 801751a:	b002      	add	sp, #8
 801751c:	bd70      	pop	{r4, r5, r6, pc}
 801751e:	bf00      	nop
 8017520:	20000018 	.word	0x20000018
 8017524:	2002afd0 	.word	0x2002afd0

08017528 <LCD__DrawBitmap_1bpp>:
 8017528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801752c:	b091      	sub	sp, #68	; 0x44
 801752e:	4c82      	ldr	r4, [pc, #520]	; (8017738 <LCD__DrawBitmap_1bpp+0x210>)
 8017530:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017532:	6824      	ldr	r4, [r4, #0]
 8017534:	462e      	mov	r6, r5
 8017536:	950e      	str	r5, [sp, #56]	; 0x38
 8017538:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801753a:	900f      	str	r0, [sp, #60]	; 0x3c
 801753c:	950c      	str	r5, [sp, #48]	; 0x30
 801753e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8017540:	9205      	str	r2, [sp, #20]
 8017542:	9506      	str	r5, [sp, #24]
 8017544:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8017546:	930d      	str	r3, [sp, #52]	; 0x34
 8017548:	9508      	str	r5, [sp, #32]
 801754a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801754e:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 8017552:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8017554:	b12c      	cbz	r4, 8017562 <LCD__DrawBitmap_1bpp+0x3a>
 8017556:	6824      	ldr	r4, [r4, #0]
 8017558:	46a4      	mov	ip, r4
 801755a:	b011      	add	sp, #68	; 0x44
 801755c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017560:	4760      	bx	ip
 8017562:	ea4a 0306 	orr.w	r3, sl, r6
 8017566:	4689      	mov	r9, r1
 8017568:	2b01      	cmp	r3, #1
 801756a:	f000 8092 	beq.w	8017692 <LCD__DrawBitmap_1bpp+0x16a>
 801756e:	f1ce 0308 	rsb	r3, lr, #8
 8017572:	9302      	str	r3, [sp, #8]
 8017574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017576:	2b00      	cmp	r3, #0
 8017578:	f340 8088 	ble.w	801768c <LCD__DrawBitmap_1bpp+0x164>
 801757c:	4b6f      	ldr	r3, [pc, #444]	; (801773c <LCD__DrawBitmap_1bpp+0x214>)
 801757e:	46a0      	mov	r8, r4
 8017580:	46f1      	mov	r9, lr
 8017582:	940a      	str	r4, [sp, #40]	; 0x28
 8017584:	6818      	ldr	r0, [r3, #0]
 8017586:	9104      	str	r1, [sp, #16]
 8017588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801758a:	9904      	ldr	r1, [sp, #16]
 801758c:	1853      	adds	r3, r2, r1
 801758e:	461a      	mov	r2, r3
 8017590:	930b      	str	r3, [sp, #44]	; 0x2c
 8017592:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017596:	3a01      	subs	r2, #1
 8017598:	4293      	cmp	r3, r2
 801759a:	9209      	str	r2, [sp, #36]	; 0x24
 801759c:	dc69      	bgt.n	8017672 <LCD__DrawBitmap_1bpp+0x14a>
 801759e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80175a2:	428b      	cmp	r3, r1
 80175a4:	db65      	blt.n	8017672 <LCD__DrawBitmap_1bpp+0x14a>
 80175a6:	9b05      	ldr	r3, [sp, #20]
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	dd62      	ble.n	8017672 <LCD__DrawBitmap_1bpp+0x14a>
 80175ac:	2600      	movs	r6, #0
 80175ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175b0:	9f06      	ldr	r7, [sp, #24]
 80175b2:	eb03 040a 	add.w	r4, r3, sl
 80175b6:	4635      	mov	r5, r6
 80175b8:	9707      	str	r7, [sp, #28]
 80175ba:	e04d      	b.n	8017658 <LCD__DrawBitmap_1bpp+0x130>
 80175bc:	ebc9 0606 	rsb	r6, r9, r6
 80175c0:	9b02      	ldr	r3, [sp, #8]
 80175c2:	fa48 f203 	asr.w	r2, r8, r3
 80175c6:	fa08 f809 	lsl.w	r8, r8, r9
 80175ca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80175ce:	fa5f f888 	uxtb.w	r8, r8
 80175d2:	d102      	bne.n	80175da <LCD__DrawBitmap_1bpp+0xb2>
 80175d4:	7c03      	ldrb	r3, [r0, #16]
 80175d6:	079b      	lsls	r3, r3, #30
 80175d8:	d439      	bmi.n	801764e <LCD__DrawBitmap_1bpp+0x126>
 80175da:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80175de:	f8dc 3000 	ldr.w	r3, [ip]
 80175e2:	9303      	str	r3, [sp, #12]
 80175e4:	9b08      	ldr	r3, [sp, #32]
 80175e6:	b10b      	cbz	r3, 80175ec <LCD__DrawBitmap_1bpp+0xc4>
 80175e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80175ec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80175f0:	f104 3eff 	add.w	lr, r4, #4294967295
 80175f4:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 80175f8:	4299      	cmp	r1, r3
 80175fa:	f8cc 2000 	str.w	r2, [ip]
 80175fe:	bfb8      	it	lt
 8017600:	4619      	movlt	r1, r3
 8017602:	45de      	cmp	lr, fp
 8017604:	4673      	mov	r3, lr
 8017606:	bfa8      	it	ge
 8017608:	465b      	movge	r3, fp
 801760a:	428b      	cmp	r3, r1
 801760c:	db1c      	blt.n	8017648 <LCD__DrawBitmap_1bpp+0x120>
 801760e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017612:	9f04      	ldr	r7, [sp, #16]
 8017614:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8017618:	42ba      	cmp	r2, r7
 801761a:	bfb8      	it	lt
 801761c:	463a      	movlt	r2, r7
 801761e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017620:	45be      	cmp	lr, r7
 8017622:	bfa8      	it	ge
 8017624:	46be      	movge	lr, r7
 8017626:	4572      	cmp	r2, lr
 8017628:	dc0e      	bgt.n	8017648 <LCD__DrawBitmap_1bpp+0x120>
 801762a:	7c40      	ldrb	r0, [r0, #17]
 801762c:	4f44      	ldr	r7, [pc, #272]	; (8017740 <LCD__DrawBitmap_1bpp+0x218>)
 801762e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8017632:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017636:	f8cd e000 	str.w	lr, [sp]
 801763a:	f8dc b010 	ldr.w	fp, [ip, #16]
 801763e:	47d8      	blx	fp
 8017640:	4b3e      	ldr	r3, [pc, #248]	; (801773c <LCD__DrawBitmap_1bpp+0x214>)
 8017642:	6818      	ldr	r0, [r3, #0]
 8017644:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8017648:	9b03      	ldr	r3, [sp, #12]
 801764a:	f8cc 3000 	str.w	r3, [ip]
 801764e:	3501      	adds	r5, #1
 8017650:	9b05      	ldr	r3, [sp, #20]
 8017652:	4454      	add	r4, sl
 8017654:	42ab      	cmp	r3, r5
 8017656:	d00c      	beq.n	8017672 <LCD__DrawBitmap_1bpp+0x14a>
 8017658:	ebca 0104 	rsb	r1, sl, r4
 801765c:	2e00      	cmp	r6, #0
 801765e:	d1ad      	bne.n	80175bc <LCD__DrawBitmap_1bpp+0x94>
 8017660:	9a07      	ldr	r2, [sp, #28]
 8017662:	9e02      	ldr	r6, [sp, #8]
 8017664:	4613      	mov	r3, r2
 8017666:	f892 8000 	ldrb.w	r8, [r2]
 801766a:	3301      	adds	r3, #1
 801766c:	9307      	str	r3, [sp, #28]
 801766e:	4633      	mov	r3, r6
 8017670:	e7a7      	b.n	80175c2 <LCD__DrawBitmap_1bpp+0x9a>
 8017672:	9a06      	ldr	r2, [sp, #24]
 8017674:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017678:	440a      	add	r2, r1
 801767a:	3301      	adds	r3, #1
 801767c:	9206      	str	r2, [sp, #24]
 801767e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017680:	930a      	str	r3, [sp, #40]	; 0x28
 8017682:	9204      	str	r2, [sp, #16]
 8017684:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017686:	429a      	cmp	r2, r3
 8017688:	f47f af7e 	bne.w	8017588 <LCD__DrawBitmap_1bpp+0x60>
 801768c:	b011      	add	sp, #68	; 0x44
 801768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017692:	4b2a      	ldr	r3, [pc, #168]	; (801773c <LCD__DrawBitmap_1bpp+0x214>)
 8017694:	6818      	ldr	r0, [r3, #0]
 8017696:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801769a:	1a53      	subs	r3, r2, r1
 801769c:	2b00      	cmp	r3, #0
 801769e:	dd46      	ble.n	801772e <LCD__DrawBitmap_1bpp+0x206>
 80176a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80176a2:	1acc      	subs	r4, r1, r3
 80176a4:	2c00      	cmp	r4, #0
 80176a6:	ddf1      	ble.n	801768c <LCD__DrawBitmap_1bpp+0x164>
 80176a8:	9e06      	ldr	r6, [sp, #24]
 80176aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80176ac:	fb01 6303 	mla	r3, r1, r3, r6
 80176b0:	9306      	str	r3, [sp, #24]
 80176b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176b4:	444b      	add	r3, r9
 80176b6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 80176ba:	3b01      	subs	r3, #1
 80176bc:	1a5b      	subs	r3, r3, r1
 80176be:	2b00      	cmp	r3, #0
 80176c0:	dd02      	ble.n	80176c8 <LCD__DrawBitmap_1bpp+0x1a0>
 80176c2:	1ae4      	subs	r4, r4, r3
 80176c4:	2c00      	cmp	r4, #0
 80176c6:	dde1      	ble.n	801768c <LCD__DrawBitmap_1bpp+0x164>
 80176c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80176ca:	9e05      	ldr	r6, [sp, #20]
 80176cc:	198b      	adds	r3, r1, r6
 80176ce:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80176d2:	3b01      	subs	r3, #1
 80176d4:	1a5b      	subs	r3, r3, r1
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	dd01      	ble.n	80176de <LCD__DrawBitmap_1bpp+0x1b6>
 80176da:	1af3      	subs	r3, r6, r3
 80176dc:	9305      	str	r3, [sp, #20]
 80176de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176e0:	1b59      	subs	r1, r3, r5
 80176e2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80176e6:	4299      	cmp	r1, r3
 80176e8:	da0d      	bge.n	8017706 <LCD__DrawBitmap_1bpp+0x1de>
 80176ea:	1a5b      	subs	r3, r3, r1
 80176ec:	9f05      	ldr	r7, [sp, #20]
 80176ee:	441d      	add	r5, r3
 80176f0:	f023 0607 	bic.w	r6, r3, #7
 80176f4:	1afb      	subs	r3, r7, r3
 80176f6:	4431      	add	r1, r6
 80176f8:	9305      	str	r3, [sp, #20]
 80176fa:	9b06      	ldr	r3, [sp, #24]
 80176fc:	eb03 03e5 	add.w	r3, r3, r5, asr #3
 8017700:	f005 0507 	and.w	r5, r5, #7
 8017704:	9306      	str	r3, [sp, #24]
 8017706:	9b05      	ldr	r3, [sp, #20]
 8017708:	2b00      	cmp	r3, #0
 801770a:	ddbf      	ble.n	801768c <LCD__DrawBitmap_1bpp+0x164>
 801770c:	7c46      	ldrb	r6, [r0, #17]
 801770e:	480c      	ldr	r0, [pc, #48]	; (8017740 <LCD__DrawBitmap_1bpp+0x218>)
 8017710:	9f08      	ldr	r7, [sp, #32]
 8017712:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8017716:	68c6      	ldr	r6, [r0, #12]
 8017718:	951e      	str	r5, [sp, #120]	; 0x78
 801771a:	9d06      	ldr	r5, [sp, #24]
 801771c:	971f      	str	r7, [sp, #124]	; 0x7c
 801771e:	951d      	str	r5, [sp, #116]	; 0x74
 8017720:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017722:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8017726:	951c      	str	r5, [sp, #112]	; 0x70
 8017728:	941a      	str	r4, [sp, #104]	; 0x68
 801772a:	6874      	ldr	r4, [r6, #4]
 801772c:	e714      	b.n	8017558 <LCD__DrawBitmap_1bpp+0x30>
 801772e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017730:	460a      	mov	r2, r1
 8017732:	4623      	mov	r3, r4
 8017734:	e7be      	b.n	80176b4 <LCD__DrawBitmap_1bpp+0x18c>
 8017736:	bf00      	nop
 8017738:	2002af8c 	.word	0x2002af8c
 801773c:	20000018 	.word	0x20000018
 8017740:	2002afd0 	.word	0x2002afd0

08017744 <LCD_DrawBitmap>:
 8017744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017748:	4cb6      	ldr	r4, [pc, #728]	; (8017a24 <LCD_DrawBitmap+0x2e0>)
 801774a:	b091      	sub	sp, #68	; 0x44
 801774c:	f8d4 e000 	ldr.w	lr, [r4]
 8017750:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017752:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017754:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8017756:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8017758:	900f      	str	r0, [sp, #60]	; 0x3c
 801775a:	9205      	str	r2, [sp, #20]
 801775c:	930c      	str	r3, [sp, #48]	; 0x30
 801775e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8017762:	950d      	str	r5, [sp, #52]	; 0x34
 8017764:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8017768:	960e      	str	r6, [sp, #56]	; 0x38
 801776a:	9707      	str	r7, [sp, #28]
 801776c:	9408      	str	r4, [sp, #32]
 801776e:	f1be 0f00 	cmp.w	lr, #0
 8017772:	d006      	beq.n	8017782 <LCD_DrawBitmap+0x3e>
 8017774:	f8de 4000 	ldr.w	r4, [lr]
 8017778:	46a4      	mov	ip, r4
 801777a:	b011      	add	sp, #68	; 0x44
 801777c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017780:	4760      	bx	ip
 8017782:	ea4a 0305 	orr.w	r3, sl, r5
 8017786:	4689      	mov	r9, r1
 8017788:	2b01      	cmp	r3, #1
 801778a:	f000 8093 	beq.w	80178b4 <LCD_DrawBitmap+0x170>
 801778e:	f1cc 0308 	rsb	r3, ip, #8
 8017792:	9302      	str	r3, [sp, #8]
 8017794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017796:	2b00      	cmp	r3, #0
 8017798:	f340 8089 	ble.w	80178ae <LCD_DrawBitmap+0x16a>
 801779c:	4ba2      	ldr	r3, [pc, #648]	; (8017a28 <LCD_DrawBitmap+0x2e4>)
 801779e:	46f0      	mov	r8, lr
 80177a0:	46e1      	mov	r9, ip
 80177a2:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80177a6:	6818      	ldr	r0, [r3, #0]
 80177a8:	9104      	str	r1, [sp, #16]
 80177aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177ac:	9904      	ldr	r1, [sp, #16]
 80177ae:	1853      	adds	r3, r2, r1
 80177b0:	461a      	mov	r2, r3
 80177b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80177b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80177b8:	3a01      	subs	r2, #1
 80177ba:	4293      	cmp	r3, r2
 80177bc:	9209      	str	r2, [sp, #36]	; 0x24
 80177be:	dc69      	bgt.n	8017894 <LCD_DrawBitmap+0x150>
 80177c0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80177c4:	428b      	cmp	r3, r1
 80177c6:	db65      	blt.n	8017894 <LCD_DrawBitmap+0x150>
 80177c8:	9b05      	ldr	r3, [sp, #20]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	dd62      	ble.n	8017894 <LCD_DrawBitmap+0x150>
 80177ce:	2600      	movs	r6, #0
 80177d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177d2:	9f07      	ldr	r7, [sp, #28]
 80177d4:	eb03 040a 	add.w	r4, r3, sl
 80177d8:	4635      	mov	r5, r6
 80177da:	9706      	str	r7, [sp, #24]
 80177dc:	e04d      	b.n	801787a <LCD_DrawBitmap+0x136>
 80177de:	ebc9 0606 	rsb	r6, r9, r6
 80177e2:	9b02      	ldr	r3, [sp, #8]
 80177e4:	fa48 f203 	asr.w	r2, r8, r3
 80177e8:	fa08 f809 	lsl.w	r8, r8, r9
 80177ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80177f0:	fa5f f888 	uxtb.w	r8, r8
 80177f4:	d102      	bne.n	80177fc <LCD_DrawBitmap+0xb8>
 80177f6:	7c03      	ldrb	r3, [r0, #16]
 80177f8:	079b      	lsls	r3, r3, #30
 80177fa:	d439      	bmi.n	8017870 <LCD_DrawBitmap+0x12c>
 80177fc:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8017800:	f8dc 3000 	ldr.w	r3, [ip]
 8017804:	9303      	str	r3, [sp, #12]
 8017806:	9b08      	ldr	r3, [sp, #32]
 8017808:	b10b      	cbz	r3, 801780e <LCD_DrawBitmap+0xca>
 801780a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801780e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017812:	f104 3eff 	add.w	lr, r4, #4294967295
 8017816:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 801781a:	4299      	cmp	r1, r3
 801781c:	f8cc 2000 	str.w	r2, [ip]
 8017820:	bfb8      	it	lt
 8017822:	4619      	movlt	r1, r3
 8017824:	45de      	cmp	lr, fp
 8017826:	4673      	mov	r3, lr
 8017828:	bfa8      	it	ge
 801782a:	465b      	movge	r3, fp
 801782c:	428b      	cmp	r3, r1
 801782e:	db1c      	blt.n	801786a <LCD_DrawBitmap+0x126>
 8017830:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017834:	9f04      	ldr	r7, [sp, #16]
 8017836:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801783a:	42ba      	cmp	r2, r7
 801783c:	bfb8      	it	lt
 801783e:	463a      	movlt	r2, r7
 8017840:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017842:	45be      	cmp	lr, r7
 8017844:	bfa8      	it	ge
 8017846:	46be      	movge	lr, r7
 8017848:	4572      	cmp	r2, lr
 801784a:	dc0e      	bgt.n	801786a <LCD_DrawBitmap+0x126>
 801784c:	7c40      	ldrb	r0, [r0, #17]
 801784e:	4f77      	ldr	r7, [pc, #476]	; (8017a2c <LCD_DrawBitmap+0x2e8>)
 8017850:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8017854:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017858:	f8cd e000 	str.w	lr, [sp]
 801785c:	f8dc b010 	ldr.w	fp, [ip, #16]
 8017860:	47d8      	blx	fp
 8017862:	4b71      	ldr	r3, [pc, #452]	; (8017a28 <LCD_DrawBitmap+0x2e4>)
 8017864:	6818      	ldr	r0, [r3, #0]
 8017866:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801786a:	9b03      	ldr	r3, [sp, #12]
 801786c:	f8cc 3000 	str.w	r3, [ip]
 8017870:	3501      	adds	r5, #1
 8017872:	9b05      	ldr	r3, [sp, #20]
 8017874:	4454      	add	r4, sl
 8017876:	42ab      	cmp	r3, r5
 8017878:	d00c      	beq.n	8017894 <LCD_DrawBitmap+0x150>
 801787a:	ebca 0104 	rsb	r1, sl, r4
 801787e:	2e00      	cmp	r6, #0
 8017880:	d1ad      	bne.n	80177de <LCD_DrawBitmap+0x9a>
 8017882:	9a06      	ldr	r2, [sp, #24]
 8017884:	9e02      	ldr	r6, [sp, #8]
 8017886:	4613      	mov	r3, r2
 8017888:	f892 8000 	ldrb.w	r8, [r2]
 801788c:	3301      	adds	r3, #1
 801788e:	9306      	str	r3, [sp, #24]
 8017890:	4633      	mov	r3, r6
 8017892:	e7a7      	b.n	80177e4 <LCD_DrawBitmap+0xa0>
 8017894:	9a07      	ldr	r2, [sp, #28]
 8017896:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801789a:	440a      	add	r2, r1
 801789c:	3301      	adds	r3, #1
 801789e:	9207      	str	r2, [sp, #28]
 80178a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80178a2:	930a      	str	r3, [sp, #40]	; 0x28
 80178a4:	9204      	str	r2, [sp, #16]
 80178a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80178a8:	429a      	cmp	r2, r3
 80178aa:	f47f af7e 	bne.w	80177aa <LCD_DrawBitmap+0x66>
 80178ae:	b011      	add	sp, #68	; 0x44
 80178b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b4:	4b5c      	ldr	r3, [pc, #368]	; (8017a28 <LCD_DrawBitmap+0x2e4>)
 80178b6:	6819      	ldr	r1, [r3, #0]
 80178b8:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80178bc:	ebc9 0302 	rsb	r3, r9, r2
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	f340 80c1 	ble.w	8017a48 <LCD_DrawBitmap+0x304>
 80178c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80178c8:	1ac4      	subs	r4, r0, r3
 80178ca:	2c00      	cmp	r4, #0
 80178cc:	ddef      	ble.n	80178ae <LCD_DrawBitmap+0x16a>
 80178ce:	fb06 7303 	mla	r3, r6, r3, r7
 80178d2:	9307      	str	r3, [sp, #28]
 80178d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178d6:	444b      	add	r3, r9
 80178d8:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 80178dc:	3b01      	subs	r3, #1
 80178de:	1a1b      	subs	r3, r3, r0
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	dd02      	ble.n	80178ea <LCD_DrawBitmap+0x1a6>
 80178e4:	1ae4      	subs	r4, r4, r3
 80178e6:	2c00      	cmp	r4, #0
 80178e8:	dde1      	ble.n	80178ae <LCD_DrawBitmap+0x16a>
 80178ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80178ec:	9d05      	ldr	r5, [sp, #20]
 80178ee:	1943      	adds	r3, r0, r5
 80178f0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80178f4:	3b01      	subs	r3, #1
 80178f6:	1a1b      	subs	r3, r3, r0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	dd01      	ble.n	8017900 <LCD_DrawBitmap+0x1bc>
 80178fc:	1aeb      	subs	r3, r5, r3
 80178fe:	9305      	str	r3, [sp, #20]
 8017900:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8017904:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017906:	429d      	cmp	r5, r3
 8017908:	db15      	blt.n	8017936 <LCD_DrawBitmap+0x1f2>
 801790a:	2500      	movs	r5, #0
 801790c:	9b05      	ldr	r3, [sp, #20]
 801790e:	2b00      	cmp	r3, #0
 8017910:	ddcd      	ble.n	80178ae <LCD_DrawBitmap+0x16a>
 8017912:	7c4e      	ldrb	r6, [r1, #17]
 8017914:	4845      	ldr	r0, [pc, #276]	; (8017a2c <LCD_DrawBitmap+0x2e8>)
 8017916:	9f08      	ldr	r7, [sp, #32]
 8017918:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801791c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801791e:	68c6      	ldr	r6, [r0, #12]
 8017920:	951e      	str	r5, [sp, #120]	; 0x78
 8017922:	9d07      	ldr	r5, [sp, #28]
 8017924:	971f      	str	r7, [sp, #124]	; 0x7c
 8017926:	951d      	str	r5, [sp, #116]	; 0x74
 8017928:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801792a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 801792e:	951c      	str	r5, [sp, #112]	; 0x70
 8017930:	941a      	str	r4, [sp, #104]	; 0x68
 8017932:	6874      	ldr	r4, [r6, #4]
 8017934:	e720      	b.n	8017778 <LCD_DrawBitmap+0x34>
 8017936:	9e05      	ldr	r6, [sp, #20]
 8017938:	1b5d      	subs	r5, r3, r5
 801793a:	f10c 30ff 	add.w	r0, ip, #4294967295
 801793e:	1b76      	subs	r6, r6, r5
 8017940:	9605      	str	r6, [sp, #20]
 8017942:	281f      	cmp	r0, #31
 8017944:	d8e2      	bhi.n	801790c <LCD_DrawBitmap+0x1c8>
 8017946:	a601      	add	r6, pc, #4	; (adr r6, 801794c <LCD_DrawBitmap+0x208>)
 8017948:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 801794c:	08017a31 	.word	0x08017a31
 8017950:	08017a0d 	.word	0x08017a0d
 8017954:	0801790d 	.word	0x0801790d
 8017958:	080179f5 	.word	0x080179f5
 801795c:	0801790d 	.word	0x0801790d
 8017960:	0801790d 	.word	0x0801790d
 8017964:	0801790d 	.word	0x0801790d
 8017968:	080179e9 	.word	0x080179e9
 801796c:	0801790d 	.word	0x0801790d
 8017970:	0801790d 	.word	0x0801790d
 8017974:	0801790d 	.word	0x0801790d
 8017978:	0801790d 	.word	0x0801790d
 801797c:	0801790d 	.word	0x0801790d
 8017980:	0801790d 	.word	0x0801790d
 8017984:	0801790d 	.word	0x0801790d
 8017988:	080179db 	.word	0x080179db
 801798c:	0801790d 	.word	0x0801790d
 8017990:	0801790d 	.word	0x0801790d
 8017994:	0801790d 	.word	0x0801790d
 8017998:	0801790d 	.word	0x0801790d
 801799c:	0801790d 	.word	0x0801790d
 80179a0:	0801790d 	.word	0x0801790d
 80179a4:	0801790d 	.word	0x0801790d
 80179a8:	080179cd 	.word	0x080179cd
 80179ac:	0801790d 	.word	0x0801790d
 80179b0:	0801790d 	.word	0x0801790d
 80179b4:	0801790d 	.word	0x0801790d
 80179b8:	0801790d 	.word	0x0801790d
 80179bc:	0801790d 	.word	0x0801790d
 80179c0:	0801790d 	.word	0x0801790d
 80179c4:	0801790d 	.word	0x0801790d
 80179c8:	080179cd 	.word	0x080179cd
 80179cc:	9807      	ldr	r0, [sp, #28]
 80179ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80179d0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80179d4:	2500      	movs	r5, #0
 80179d6:	9007      	str	r0, [sp, #28]
 80179d8:	e798      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 80179da:	9807      	ldr	r0, [sp, #28]
 80179dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80179de:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 80179e2:	2500      	movs	r5, #0
 80179e4:	9007      	str	r0, [sp, #28]
 80179e6:	e791      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 80179e8:	9807      	ldr	r0, [sp, #28]
 80179ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80179ec:	4428      	add	r0, r5
 80179ee:	2500      	movs	r5, #0
 80179f0:	9007      	str	r0, [sp, #28]
 80179f2:	e78b      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 80179f4:	9807      	ldr	r0, [sp, #28]
 80179f6:	f025 0301 	bic.w	r3, r5, #1
 80179fa:	eb00 0065 	add.w	r0, r0, r5, asr #1
 80179fe:	f005 0501 	and.w	r5, r5, #1
 8017a02:	9007      	str	r0, [sp, #28]
 8017a04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017a06:	4418      	add	r0, r3
 8017a08:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a0a:	e77f      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 8017a0c:	9807      	ldr	r0, [sp, #28]
 8017a0e:	f025 0303 	bic.w	r3, r5, #3
 8017a12:	eb00 00a5 	add.w	r0, r0, r5, asr #2
 8017a16:	f005 0503 	and.w	r5, r5, #3
 8017a1a:	9007      	str	r0, [sp, #28]
 8017a1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017a1e:	4418      	add	r0, r3
 8017a20:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a22:	e773      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 8017a24:	2002af8c 	.word	0x2002af8c
 8017a28:	20000018 	.word	0x20000018
 8017a2c:	2002afd0 	.word	0x2002afd0
 8017a30:	9807      	ldr	r0, [sp, #28]
 8017a32:	f025 0307 	bic.w	r3, r5, #7
 8017a36:	eb00 00e5 	add.w	r0, r0, r5, asr #3
 8017a3a:	f005 0507 	and.w	r5, r5, #7
 8017a3e:	9007      	str	r0, [sp, #28]
 8017a40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017a42:	4418      	add	r0, r3
 8017a44:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a46:	e761      	b.n	801790c <LCD_DrawBitmap+0x1c8>
 8017a48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a4a:	464a      	mov	r2, r9
 8017a4c:	4623      	mov	r3, r4
 8017a4e:	e742      	b.n	80178d6 <LCD_DrawBitmap+0x192>

08017a50 <LCD_SetClipRectMax>:
 8017a50:	4a04      	ldr	r2, [pc, #16]	; (8017a64 <LCD_SetClipRectMax+0x14>)
 8017a52:	4b05      	ldr	r3, [pc, #20]	; (8017a68 <LCD_SetClipRectMax+0x18>)
 8017a54:	6811      	ldr	r1, [r2, #0]
 8017a56:	7c4a      	ldrb	r2, [r1, #17]
 8017a58:	3108      	adds	r1, #8
 8017a5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017a5e:	68c3      	ldr	r3, [r0, #12]
 8017a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a62:	4718      	bx	r3
 8017a64:	20000018 	.word	0x20000018
 8017a68:	2002afd0 	.word	0x2002afd0

08017a6c <emWin_LCD_Init>:
 8017a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a70:	4e3e      	ldr	r6, [pc, #248]	; (8017b6c <emWin_LCD_Init+0x100>)
 8017a72:	b084      	sub	sp, #16
 8017a74:	4f3e      	ldr	r7, [pc, #248]	; (8017b70 <emWin_LCD_Init+0x104>)
 8017a76:	6831      	ldr	r1, [r6, #0]
 8017a78:	7c4b      	ldrb	r3, [r1, #17]
 8017a7a:	3108      	adds	r1, #8
 8017a7c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8017a80:	68c3      	ldr	r3, [r0, #12]
 8017a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a84:	4798      	blx	r3
 8017a86:	f000 f93f 	bl	8017d08 <LCD_InitColors>
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	d15c      	bne.n	8017b4a <emWin_LCD_Init+0xde>
 8017a90:	4605      	mov	r5, r0
 8017a92:	4628      	mov	r0, r5
 8017a94:	3501      	adds	r5, #1
 8017a96:	f7fb f80d 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017a9a:	210c      	movs	r1, #12
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	eb0d 0001 	add.w	r0, sp, r1
 8017aa2:	9303      	str	r3, [sp, #12]
 8017aa4:	b143      	cbz	r3, 8017ab8 <emWin_LCD_Init+0x4c>
 8017aa6:	68db      	ldr	r3, [r3, #12]
 8017aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aaa:	4798      	blx	r3
 8017aac:	4603      	mov	r3, r0
 8017aae:	2800      	cmp	r0, #0
 8017ab0:	d05a      	beq.n	8017b68 <emWin_LCD_Init+0xfc>
 8017ab2:	9803      	ldr	r0, [sp, #12]
 8017ab4:	4798      	blx	r3
 8017ab6:	4304      	orrs	r4, r0
 8017ab8:	2d02      	cmp	r5, #2
 8017aba:	d1ea      	bne.n	8017a92 <emWin_LCD_Init+0x26>
 8017abc:	2c00      	cmp	r4, #0
 8017abe:	d144      	bne.n	8017b4a <emWin_LCD_Init+0xde>
 8017ac0:	f000 f97c 	bl	8017dbc <LCD_InitLUT>
 8017ac4:	4a2b      	ldr	r2, [pc, #172]	; (8017b74 <emWin_LCD_Init+0x108>)
 8017ac6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8017aca:	6812      	ldr	r2, [r2, #0]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d038      	beq.n	8017b42 <emWin_LCD_Init+0xd6>
 8017ad0:	2401      	movs	r4, #1
 8017ad2:	4d29      	ldr	r5, [pc, #164]	; (8017b78 <emWin_LCD_Init+0x10c>)
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f7fa ffed 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017ada:	4603      	mov	r3, r0
 8017adc:	4620      	mov	r0, r4
 8017ade:	3c01      	subs	r4, #1
 8017ae0:	9303      	str	r3, [sp, #12]
 8017ae2:	b363      	cbz	r3, 8017b3e <emWin_LCD_Init+0xd2>
 8017ae4:	f7fd f9b2 	bl	8014e4c <GUI_SelectLayer>
 8017ae8:	682b      	ldr	r3, [r5, #0]
 8017aea:	2004      	movs	r0, #4
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	4798      	blx	r3
 8017af0:	6830      	ldr	r0, [r6, #0]
 8017af2:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8017af6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8017afa:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017afe:	4563      	cmp	r3, ip
 8017b00:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8017b04:	bfa8      	it	ge
 8017b06:	4663      	movge	r3, ip
 8017b08:	428b      	cmp	r3, r1
 8017b0a:	db0a      	blt.n	8017b22 <emWin_LCD_Init+0xb6>
 8017b0c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8017b10:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017b14:	45e6      	cmp	lr, ip
 8017b16:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8017b1a:	bfa8      	it	ge
 8017b1c:	46e6      	movge	lr, ip
 8017b1e:	4596      	cmp	lr, r2
 8017b20:	da17      	bge.n	8017b52 <emWin_LCD_Init+0xe6>
 8017b22:	682b      	ldr	r3, [r5, #0]
 8017b24:	2000      	movs	r0, #0
 8017b26:	689b      	ldr	r3, [r3, #8]
 8017b28:	4798      	blx	r3
 8017b2a:	9b03      	ldr	r3, [sp, #12]
 8017b2c:	210e      	movs	r1, #14
 8017b2e:	a803      	add	r0, sp, #12
 8017b30:	68db      	ldr	r3, [r3, #12]
 8017b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b34:	4798      	blx	r3
 8017b36:	4603      	mov	r3, r0
 8017b38:	b108      	cbz	r0, 8017b3e <emWin_LCD_Init+0xd2>
 8017b3a:	9803      	ldr	r0, [sp, #12]
 8017b3c:	4798      	blx	r3
 8017b3e:	1c63      	adds	r3, r4, #1
 8017b40:	d1c8      	bne.n	8017ad4 <emWin_LCD_Init+0x68>
 8017b42:	2000      	movs	r0, #0
 8017b44:	b004      	add	sp, #16
 8017b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	b004      	add	sp, #16
 8017b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b52:	7c40      	ldrb	r0, [r0, #17]
 8017b54:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8017b58:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017b5c:	f8cd e000 	str.w	lr, [sp]
 8017b60:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8017b64:	47c0      	blx	r8
 8017b66:	e7dc      	b.n	8017b22 <emWin_LCD_Init+0xb6>
 8017b68:	2001      	movs	r0, #1
 8017b6a:	e7ef      	b.n	8017b4c <emWin_LCD_Init+0xe0>
 8017b6c:	20000018 	.word	0x20000018
 8017b70:	2002afd0 	.word	0x2002afd0
 8017b74:	20000014 	.word	0x20000014
 8017b78:	20000054 	.word	0x20000054

08017b7c <LCD_Color2Index>:
 8017b7c:	4a04      	ldr	r2, [pc, #16]	; (8017b90 <LCD_Color2Index+0x14>)
 8017b7e:	4b05      	ldr	r3, [pc, #20]	; (8017b94 <LCD_Color2Index+0x18>)
 8017b80:	6812      	ldr	r2, [r2, #0]
 8017b82:	7c52      	ldrb	r2, [r2, #17]
 8017b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b88:	691b      	ldr	r3, [r3, #16]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4718      	bx	r3
 8017b8e:	bf00      	nop
 8017b90:	20000018 	.word	0x20000018
 8017b94:	2002afd0 	.word	0x2002afd0

08017b98 <LCD_Index2Color>:
 8017b98:	4a04      	ldr	r2, [pc, #16]	; (8017bac <LCD_Index2Color+0x14>)
 8017b9a:	4b05      	ldr	r3, [pc, #20]	; (8017bb0 <LCD_Index2Color+0x18>)
 8017b9c:	6812      	ldr	r2, [r2, #0]
 8017b9e:	7c52      	ldrb	r2, [r2, #17]
 8017ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ba4:	691b      	ldr	r3, [r3, #16]
 8017ba6:	685b      	ldr	r3, [r3, #4]
 8017ba8:	4718      	bx	r3
 8017baa:	bf00      	nop
 8017bac:	20000018 	.word	0x20000018
 8017bb0:	2002afd0 	.word	0x2002afd0

08017bb4 <LCD_SetColorIndex>:
 8017bb4:	4b04      	ldr	r3, [pc, #16]	; (8017bc8 <LCD_SetColorIndex+0x14>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	7c1a      	ldrb	r2, [r3, #16]
 8017bba:	0752      	lsls	r2, r2, #29
 8017bbc:	bf4c      	ite	mi
 8017bbe:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8017bc0:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8017bc2:	6018      	str	r0, [r3, #0]
 8017bc4:	4770      	bx	lr
 8017bc6:	bf00      	nop
 8017bc8:	20000018 	.word	0x20000018

08017bcc <LCD_SetBkColorIndex>:
 8017bcc:	4b04      	ldr	r3, [pc, #16]	; (8017be0 <LCD_SetBkColorIndex+0x14>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	7c1a      	ldrb	r2, [r3, #16]
 8017bd2:	0752      	lsls	r2, r2, #29
 8017bd4:	bf4c      	ite	mi
 8017bd6:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8017bd8:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8017bda:	6018      	str	r0, [r3, #0]
 8017bdc:	4770      	bx	lr
 8017bde:	bf00      	nop
 8017be0:	20000018 	.word	0x20000018

08017be4 <LCD_SetBkColor>:
 8017be4:	4b01      	ldr	r3, [pc, #4]	; (8017bec <LCD_SetBkColor+0x8>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	4718      	bx	r3
 8017bec:	20000054 	.word	0x20000054

08017bf0 <LCD_SetColor>:
 8017bf0:	4b01      	ldr	r3, [pc, #4]	; (8017bf8 <LCD_SetColor+0x8>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	4718      	bx	r3
 8017bf8:	20000054 	.word	0x20000054

08017bfc <LCD_AA_MixColors16>:
 8017bfc:	b508      	push	{r3, lr}
 8017bfe:	0e0b      	lsrs	r3, r1, #24
 8017c00:	d103      	bne.n	8017c0a <LCD_AA_MixColors16+0xe>
 8017c02:	0e03      	lsrs	r3, r0, #24
 8017c04:	2bff      	cmp	r3, #255	; 0xff
 8017c06:	d00f      	beq.n	8017c28 <LCD_AA_MixColors16+0x2c>
 8017c08:	b14b      	cbz	r3, 8017c1e <LCD_AA_MixColors16+0x22>
 8017c0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017c0e:	4b0b      	ldr	r3, [pc, #44]	; (8017c3c <LCD_AA_MixColors16+0x40>)
 8017c10:	b2d2      	uxtb	r2, r2
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	4798      	blx	r3
 8017c16:	4b0a      	ldr	r3, [pc, #40]	; (8017c40 <LCD_AA_MixColors16+0x44>)
 8017c18:	685a      	ldr	r2, [r3, #4]
 8017c1a:	4310      	orrs	r0, r2
 8017c1c:	bd08      	pop	{r3, pc}
 8017c1e:	4b08      	ldr	r3, [pc, #32]	; (8017c40 <LCD_AA_MixColors16+0x44>)
 8017c20:	685a      	ldr	r2, [r3, #4]
 8017c22:	ea41 0002 	orr.w	r0, r1, r2
 8017c26:	bd08      	pop	{r3, pc}
 8017c28:	4b05      	ldr	r3, [pc, #20]	; (8017c40 <LCD_AA_MixColors16+0x44>)
 8017c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8017c2e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	4318      	orrs	r0, r3
 8017c36:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8017c3a:	bd08      	pop	{r3, pc}
 8017c3c:	20000044 	.word	0x20000044
 8017c40:	20000058 	.word	0x20000058

08017c44 <LCD_SetPixelAA4_Trans>:
 8017c44:	2a00      	cmp	r2, #0
 8017c46:	d039      	beq.n	8017cbc <LCD_SetPixelAA4_Trans+0x78>
 8017c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4c:	4f20      	ldr	r7, [pc, #128]	; (8017cd0 <LCD_SetPixelAA4_Trans+0x8c>)
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8017c54:	42a1      	cmp	r1, r4
 8017c56:	db2f      	blt.n	8017cb8 <LCD_SetPixelAA4_Trans+0x74>
 8017c58:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8017c5c:	42a1      	cmp	r1, r4
 8017c5e:	dc2b      	bgt.n	8017cb8 <LCD_SetPixelAA4_Trans+0x74>
 8017c60:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8017c64:	42a0      	cmp	r0, r4
 8017c66:	db27      	blt.n	8017cb8 <LCD_SetPixelAA4_Trans+0x74>
 8017c68:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017c6c:	42a0      	cmp	r0, r4
 8017c6e:	dc23      	bgt.n	8017cb8 <LCD_SetPixelAA4_Trans+0x74>
 8017c70:	2a0e      	cmp	r2, #14
 8017c72:	d824      	bhi.n	8017cbe <LCD_SetPixelAA4_Trans+0x7a>
 8017c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c76:	460d      	mov	r5, r1
 8017c78:	4606      	mov	r6, r0
 8017c7a:	4614      	mov	r4, r2
 8017c7c:	6818      	ldr	r0, [r3, #0]
 8017c7e:	f7ff ff8b 	bl	8017b98 <LCD_Index2Color>
 8017c82:	4629      	mov	r1, r5
 8017c84:	4680      	mov	r8, r0
 8017c86:	4630      	mov	r0, r6
 8017c88:	f000 fab8 	bl	80181fc <LCD_GetPixelColor>
 8017c8c:	4b11      	ldr	r3, [pc, #68]	; (8017cd4 <LCD_SetPixelAA4_Trans+0x90>)
 8017c8e:	4601      	mov	r1, r0
 8017c90:	4622      	mov	r2, r4
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	4640      	mov	r0, r8
 8017c96:	4798      	blx	r3
 8017c98:	4c0f      	ldr	r4, [pc, #60]	; (8017cd8 <LCD_SetPixelAA4_Trans+0x94>)
 8017c9a:	f7ff ff6f 	bl	8017b7c <LCD_Color2Index>
 8017c9e:	683a      	ldr	r2, [r7, #0]
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	4631      	mov	r1, r6
 8017ca4:	7c50      	ldrb	r0, [r2, #17]
 8017ca6:	462a      	mov	r2, r5
 8017ca8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017cac:	68c4      	ldr	r4, [r0, #12]
 8017cae:	69a4      	ldr	r4, [r4, #24]
 8017cb0:	46a4      	mov	ip, r4
 8017cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb6:	4760      	bx	ip
 8017cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cbc:	4770      	bx	lr
 8017cbe:	7c5d      	ldrb	r5, [r3, #17]
 8017cc0:	460a      	mov	r2, r1
 8017cc2:	4c05      	ldr	r4, [pc, #20]	; (8017cd8 <LCD_SetPixelAA4_Trans+0x94>)
 8017cc4:	4601      	mov	r1, r0
 8017cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cc8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	e7ed      	b.n	8017cac <LCD_SetPixelAA4_Trans+0x68>
 8017cd0:	20000018 	.word	0x20000018
 8017cd4:	20000058 	.word	0x20000058
 8017cd8:	2002afd0 	.word	0x2002afd0

08017cdc <LCD_AA_SetOrMask>:
 8017cdc:	4b02      	ldr	r3, [pc, #8]	; (8017ce8 <LCD_AA_SetOrMask+0xc>)
 8017cde:	685a      	ldr	r2, [r3, #4]
 8017ce0:	6058      	str	r0, [r3, #4]
 8017ce2:	4610      	mov	r0, r2
 8017ce4:	4770      	bx	lr
 8017ce6:	bf00      	nop
 8017ce8:	20000058 	.word	0x20000058

08017cec <_OnExit>:
 8017cec:	b510      	push	{r4, lr}
 8017cee:	4c04      	ldr	r4, [pc, #16]	; (8017d00 <_OnExit+0x14>)
 8017cf0:	6820      	ldr	r0, [r4, #0]
 8017cf2:	f7f9 fcff 	bl	80116f4 <GUI_ALLOC_FreeFixedBlock>
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	4a02      	ldr	r2, [pc, #8]	; (8017d04 <_OnExit+0x18>)
 8017cfa:	6023      	str	r3, [r4, #0]
 8017cfc:	6013      	str	r3, [r2, #0]
 8017cfe:	bd10      	pop	{r4, pc}
 8017d00:	2002afe8 	.word	0x2002afe8
 8017d04:	200003ac 	.word	0x200003ac

08017d08 <LCD_InitColors>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4d0b      	ldr	r5, [pc, #44]	; (8017d38 <LCD_InitColors+0x30>)
 8017d0c:	682c      	ldr	r4, [r5, #0]
 8017d0e:	b10c      	cbz	r4, 8017d14 <LCD_InitColors+0xc>
 8017d10:	2000      	movs	r0, #0
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	4b09      	ldr	r3, [pc, #36]	; (8017d3c <LCD_InitColors+0x34>)
 8017d16:	6818      	ldr	r0, [r3, #0]
 8017d18:	0080      	lsls	r0, r0, #2
 8017d1a:	f7f9 fcf5 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8017d1e:	6028      	str	r0, [r5, #0]
 8017d20:	b138      	cbz	r0, 8017d32 <LCD_InitColors+0x2a>
 8017d22:	4b07      	ldr	r3, [pc, #28]	; (8017d40 <LCD_InitColors+0x38>)
 8017d24:	4807      	ldr	r0, [pc, #28]	; (8017d44 <LCD_InitColors+0x3c>)
 8017d26:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d2a:	f7fa fe85 	bl	8012a38 <GUI__RegisterExit>
 8017d2e:	4620      	mov	r0, r4
 8017d30:	bd38      	pop	{r3, r4, r5, pc}
 8017d32:	2001      	movs	r0, #1
 8017d34:	bd38      	pop	{r3, r4, r5, pc}
 8017d36:	bf00      	nop
 8017d38:	2002afe8 	.word	0x2002afe8
 8017d3c:	20000070 	.word	0x20000070
 8017d40:	08017ced 	.word	0x08017ced
 8017d44:	200003ac 	.word	0x200003ac

08017d48 <LCD_GetpPalConvTableBM>:
 8017d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d4c:	b360      	cbz	r0, 8017da8 <LCD_GetpPalConvTableBM+0x60>
 8017d4e:	6885      	ldr	r5, [r0, #8]
 8017d50:	b365      	cbz	r5, 8017dac <LCD_GetpPalConvTableBM+0x64>
 8017d52:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8017db8 <LCD_GetpPalConvTableBM+0x70>
 8017d56:	f8d8 6000 	ldr.w	r6, [r8]
 8017d5a:	b306      	cbz	r6, 8017d9e <LCD_GetpPalConvTableBM+0x56>
 8017d5c:	6807      	ldr	r7, [r0, #0]
 8017d5e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8017d62:	dc1f      	bgt.n	8017da4 <LCD_GetpPalConvTableBM+0x5c>
 8017d64:	4b12      	ldr	r3, [pc, #72]	; (8017db0 <LCD_GetpPalConvTableBM+0x68>)
 8017d66:	4681      	mov	r9, r0
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	429f      	cmp	r7, r3
 8017d6c:	bfa8      	it	ge
 8017d6e:	461f      	movge	r7, r3
 8017d70:	2f00      	cmp	r7, #0
 8017d72:	dd0d      	ble.n	8017d90 <LCD_GetpPalConvTableBM+0x48>
 8017d74:	3d04      	subs	r5, #4
 8017d76:	2400      	movs	r4, #0
 8017d78:	e001      	b.n	8017d7e <LCD_GetpPalConvTableBM+0x36>
 8017d7a:	f8d8 6000 	ldr.w	r6, [r8]
 8017d7e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017d82:	f7ff fefb 	bl	8017b7c <LCD_Color2Index>
 8017d86:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8017d8a:	3401      	adds	r4, #1
 8017d8c:	42bc      	cmp	r4, r7
 8017d8e:	d1f4      	bne.n	8017d7a <LCD_GetpPalConvTableBM+0x32>
 8017d90:	4b08      	ldr	r3, [pc, #32]	; (8017db4 <LCD_GetpPalConvTableBM+0x6c>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	b10b      	cbz	r3, 8017d9a <LCD_GetpPalConvTableBM+0x52>
 8017d96:	4648      	mov	r0, r9
 8017d98:	4798      	blx	r3
 8017d9a:	f8d8 6000 	ldr.w	r6, [r8]
 8017d9e:	4630      	mov	r0, r6
 8017da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017da4:	2600      	movs	r6, #0
 8017da6:	e7fa      	b.n	8017d9e <LCD_GetpPalConvTableBM+0x56>
 8017da8:	4606      	mov	r6, r0
 8017daa:	e7f8      	b.n	8017d9e <LCD_GetpPalConvTableBM+0x56>
 8017dac:	462e      	mov	r6, r5
 8017dae:	e7f6      	b.n	8017d9e <LCD_GetpPalConvTableBM+0x56>
 8017db0:	20000070 	.word	0x20000070
 8017db4:	200003ac 	.word	0x200003ac
 8017db8:	2002afe8 	.word	0x2002afe8

08017dbc <LCD_InitLUT>:
 8017dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dc0:	f000 f9dc 	bl	801817c <LCD_GetNumLayers>
 8017dc4:	f1b0 0900 	subs.w	r9, r0, #0
 8017dc8:	dd2f      	ble.n	8017e2a <LCD_InitLUT+0x6e>
 8017dca:	2500      	movs	r5, #0
 8017dcc:	4f18      	ldr	r7, [pc, #96]	; (8017e30 <LCD_InitLUT+0x74>)
 8017dce:	f8df b068 	ldr.w	fp, [pc, #104]	; 8017e38 <LCD_InitLUT+0x7c>
 8017dd2:	4628      	mov	r0, r5
 8017dd4:	f7fa fe6e 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017dd8:	b320      	cbz	r0, 8017e24 <LCD_InitLUT+0x68>
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	4628      	mov	r0, r5
 8017dde:	f893 8011 	ldrb.w	r8, [r3, #17]
 8017de2:	745d      	strb	r5, [r3, #17]
 8017de4:	f000 f87a 	bl	8017edc <LCD_GetBitsPerPixelEx>
 8017de8:	2808      	cmp	r0, #8
 8017dea:	dc18      	bgt.n	8017e1e <LCD_InitLUT+0x62>
 8017dec:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8017df0:	4a10      	ldr	r2, [pc, #64]	; (8017e34 <LCD_InitLUT+0x78>)
 8017df2:	691b      	ldr	r3, [r3, #16]
 8017df4:	4293      	cmp	r3, r2
 8017df6:	d012      	beq.n	8017e1e <LCD_InitLUT+0x62>
 8017df8:	4628      	mov	r0, r5
 8017dfa:	f000 f87f 	bl	8017efc <LCD_GetNumColorsEx>
 8017dfe:	1e06      	subs	r6, r0, #0
 8017e00:	dd0d      	ble.n	8017e1e <LCD_InitLUT+0x62>
 8017e02:	2400      	movs	r4, #0
 8017e04:	fa5f fa84 	uxtb.w	sl, r4
 8017e08:	3401      	adds	r4, #1
 8017e0a:	4650      	mov	r0, sl
 8017e0c:	f7ff fec4 	bl	8017b98 <LCD_Index2Color>
 8017e10:	4651      	mov	r1, sl
 8017e12:	4602      	mov	r2, r0
 8017e14:	4628      	mov	r0, r5
 8017e16:	f000 fb8f 	bl	8018538 <LCD_SetLUTEntryEx>
 8017e1a:	42a6      	cmp	r6, r4
 8017e1c:	d1f2      	bne.n	8017e04 <LCD_InitLUT+0x48>
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	f883 8011 	strb.w	r8, [r3, #17]
 8017e24:	3501      	adds	r5, #1
 8017e26:	45a9      	cmp	r9, r5
 8017e28:	d1d3      	bne.n	8017dd2 <LCD_InitLUT+0x16>
 8017e2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e2e:	bf00      	nop
 8017e30:	20000018 	.word	0x20000018
 8017e34:	0802a820 	.word	0x0802a820
 8017e38:	2002afd0 	.word	0x2002afd0

08017e3c <LCD_GetBkColorIndex>:
 8017e3c:	4b02      	ldr	r3, [pc, #8]	; (8017e48 <LCD_GetBkColorIndex+0xc>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e42:	6818      	ldr	r0, [r3, #0]
 8017e44:	4770      	bx	lr
 8017e46:	bf00      	nop
 8017e48:	20000018 	.word	0x20000018

08017e4c <LCD_GetColorIndex>:
 8017e4c:	4b02      	ldr	r3, [pc, #8]	; (8017e58 <LCD_GetColorIndex+0xc>)
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e52:	6818      	ldr	r0, [r3, #0]
 8017e54:	4770      	bx	lr
 8017e56:	bf00      	nop
 8017e58:	20000018 	.word	0x20000018

08017e5c <LCD_GetXSizeEx>:
 8017e5c:	2801      	cmp	r0, #1
 8017e5e:	dd01      	ble.n	8017e64 <LCD_GetXSizeEx+0x8>
 8017e60:	2000      	movs	r0, #0
 8017e62:	4770      	bx	lr
 8017e64:	b510      	push	{r4, lr}
 8017e66:	f7fa fe25 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017e6a:	b128      	cbz	r0, 8017e78 <LCD_GetXSizeEx+0x1c>
 8017e6c:	68c3      	ldr	r3, [r0, #12]
 8017e6e:	2101      	movs	r1, #1
 8017e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e76:	4718      	bx	r3
 8017e78:	2000      	movs	r0, #0
 8017e7a:	bd10      	pop	{r4, pc}

08017e7c <LCD_GetYSizeEx>:
 8017e7c:	2801      	cmp	r0, #1
 8017e7e:	dd01      	ble.n	8017e84 <LCD_GetYSizeEx+0x8>
 8017e80:	2000      	movs	r0, #0
 8017e82:	4770      	bx	lr
 8017e84:	b510      	push	{r4, lr}
 8017e86:	f7fa fe15 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017e8a:	b128      	cbz	r0, 8017e98 <LCD_GetYSizeEx+0x1c>
 8017e8c:	68c3      	ldr	r3, [r0, #12]
 8017e8e:	2102      	movs	r1, #2
 8017e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e96:	4718      	bx	r3
 8017e98:	2000      	movs	r0, #0
 8017e9a:	bd10      	pop	{r4, pc}

08017e9c <LCD_GetVXSizeEx>:
 8017e9c:	2801      	cmp	r0, #1
 8017e9e:	dd01      	ble.n	8017ea4 <LCD_GetVXSizeEx+0x8>
 8017ea0:	2000      	movs	r0, #0
 8017ea2:	4770      	bx	lr
 8017ea4:	b510      	push	{r4, lr}
 8017ea6:	f7fa fe05 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017eaa:	b128      	cbz	r0, 8017eb8 <LCD_GetVXSizeEx+0x1c>
 8017eac:	68c3      	ldr	r3, [r0, #12]
 8017eae:	2103      	movs	r1, #3
 8017eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eb6:	4718      	bx	r3
 8017eb8:	2000      	movs	r0, #0
 8017eba:	bd10      	pop	{r4, pc}

08017ebc <LCD_GetVYSizeEx>:
 8017ebc:	2801      	cmp	r0, #1
 8017ebe:	dd01      	ble.n	8017ec4 <LCD_GetVYSizeEx+0x8>
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	4770      	bx	lr
 8017ec4:	b510      	push	{r4, lr}
 8017ec6:	f7fa fdf5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017eca:	b128      	cbz	r0, 8017ed8 <LCD_GetVYSizeEx+0x1c>
 8017ecc:	68c3      	ldr	r3, [r0, #12]
 8017ece:	2104      	movs	r1, #4
 8017ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ed6:	4718      	bx	r3
 8017ed8:	2000      	movs	r0, #0
 8017eda:	bd10      	pop	{r4, pc}

08017edc <LCD_GetBitsPerPixelEx>:
 8017edc:	2801      	cmp	r0, #1
 8017ede:	dd01      	ble.n	8017ee4 <LCD_GetBitsPerPixelEx+0x8>
 8017ee0:	2000      	movs	r0, #0
 8017ee2:	4770      	bx	lr
 8017ee4:	b510      	push	{r4, lr}
 8017ee6:	f7fa fde5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017eea:	b128      	cbz	r0, 8017ef8 <LCD_GetBitsPerPixelEx+0x1c>
 8017eec:	68c3      	ldr	r3, [r0, #12]
 8017eee:	2108      	movs	r1, #8
 8017ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ef6:	4718      	bx	r3
 8017ef8:	2000      	movs	r0, #0
 8017efa:	bd10      	pop	{r4, pc}

08017efc <LCD_GetNumColorsEx>:
 8017efc:	2801      	cmp	r0, #1
 8017efe:	dd01      	ble.n	8017f04 <LCD_GetNumColorsEx+0x8>
 8017f00:	2000      	movs	r0, #0
 8017f02:	4770      	bx	lr
 8017f04:	b510      	push	{r4, lr}
 8017f06:	f7fa fdd5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017f0a:	b128      	cbz	r0, 8017f18 <LCD_GetNumColorsEx+0x1c>
 8017f0c:	68c3      	ldr	r3, [r0, #12]
 8017f0e:	2109      	movs	r1, #9
 8017f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f16:	4718      	bx	r3
 8017f18:	2000      	movs	r0, #0
 8017f1a:	bd10      	pop	{r4, pc}

08017f1c <LCD_GetMirrorXEx>:
 8017f1c:	2801      	cmp	r0, #1
 8017f1e:	dd01      	ble.n	8017f24 <LCD_GetMirrorXEx+0x8>
 8017f20:	2000      	movs	r0, #0
 8017f22:	4770      	bx	lr
 8017f24:	b510      	push	{r4, lr}
 8017f26:	f7fa fdc5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017f2a:	b128      	cbz	r0, 8017f38 <LCD_GetMirrorXEx+0x1c>
 8017f2c:	68c3      	ldr	r3, [r0, #12]
 8017f2e:	210c      	movs	r1, #12
 8017f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f36:	4718      	bx	r3
 8017f38:	2000      	movs	r0, #0
 8017f3a:	bd10      	pop	{r4, pc}

08017f3c <LCD_GetMirrorYEx>:
 8017f3c:	2801      	cmp	r0, #1
 8017f3e:	dd01      	ble.n	8017f44 <LCD_GetMirrorYEx+0x8>
 8017f40:	2000      	movs	r0, #0
 8017f42:	4770      	bx	lr
 8017f44:	b510      	push	{r4, lr}
 8017f46:	f7fa fdb5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017f4a:	b128      	cbz	r0, 8017f58 <LCD_GetMirrorYEx+0x1c>
 8017f4c:	68c3      	ldr	r3, [r0, #12]
 8017f4e:	210d      	movs	r1, #13
 8017f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f56:	4718      	bx	r3
 8017f58:	2000      	movs	r0, #0
 8017f5a:	bd10      	pop	{r4, pc}

08017f5c <LCD_GetSwapXYEx>:
 8017f5c:	2801      	cmp	r0, #1
 8017f5e:	dd01      	ble.n	8017f64 <LCD_GetSwapXYEx+0x8>
 8017f60:	2000      	movs	r0, #0
 8017f62:	4770      	bx	lr
 8017f64:	b510      	push	{r4, lr}
 8017f66:	f7fa fda5 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017f6a:	b128      	cbz	r0, 8017f78 <LCD_GetSwapXYEx+0x1c>
 8017f6c:	68c3      	ldr	r3, [r0, #12]
 8017f6e:	210e      	movs	r1, #14
 8017f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f76:	4718      	bx	r3
 8017f78:	2000      	movs	r0, #0
 8017f7a:	bd10      	pop	{r4, pc}

08017f7c <LCD_GetXSize>:
 8017f7c:	4b09      	ldr	r3, [pc, #36]	; (8017fa4 <LCD_GetXSize+0x28>)
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	7c58      	ldrb	r0, [r3, #17]
 8017f82:	2801      	cmp	r0, #1
 8017f84:	dd01      	ble.n	8017f8a <LCD_GetXSize+0xe>
 8017f86:	2000      	movs	r0, #0
 8017f88:	4770      	bx	lr
 8017f8a:	b510      	push	{r4, lr}
 8017f8c:	f7fa fd92 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017f90:	b128      	cbz	r0, 8017f9e <LCD_GetXSize+0x22>
 8017f92:	68c3      	ldr	r3, [r0, #12]
 8017f94:	2101      	movs	r1, #1
 8017f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f9c:	4718      	bx	r3
 8017f9e:	2000      	movs	r0, #0
 8017fa0:	bd10      	pop	{r4, pc}
 8017fa2:	bf00      	nop
 8017fa4:	20000018 	.word	0x20000018

08017fa8 <LCD_GetYSize>:
 8017fa8:	4b09      	ldr	r3, [pc, #36]	; (8017fd0 <LCD_GetYSize+0x28>)
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	7c58      	ldrb	r0, [r3, #17]
 8017fae:	2801      	cmp	r0, #1
 8017fb0:	dd01      	ble.n	8017fb6 <LCD_GetYSize+0xe>
 8017fb2:	2000      	movs	r0, #0
 8017fb4:	4770      	bx	lr
 8017fb6:	b510      	push	{r4, lr}
 8017fb8:	f7fa fd7c 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017fbc:	b128      	cbz	r0, 8017fca <LCD_GetYSize+0x22>
 8017fbe:	68c3      	ldr	r3, [r0, #12]
 8017fc0:	2102      	movs	r1, #2
 8017fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fc8:	4718      	bx	r3
 8017fca:	2000      	movs	r0, #0
 8017fcc:	bd10      	pop	{r4, pc}
 8017fce:	bf00      	nop
 8017fd0:	20000018 	.word	0x20000018

08017fd4 <LCD_GetNumColors>:
 8017fd4:	4b09      	ldr	r3, [pc, #36]	; (8017ffc <LCD_GetNumColors+0x28>)
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	7c58      	ldrb	r0, [r3, #17]
 8017fda:	2801      	cmp	r0, #1
 8017fdc:	dd01      	ble.n	8017fe2 <LCD_GetNumColors+0xe>
 8017fde:	2000      	movs	r0, #0
 8017fe0:	4770      	bx	lr
 8017fe2:	b510      	push	{r4, lr}
 8017fe4:	f7fa fd66 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8017fe8:	b128      	cbz	r0, 8017ff6 <LCD_GetNumColors+0x22>
 8017fea:	68c3      	ldr	r3, [r0, #12]
 8017fec:	2109      	movs	r1, #9
 8017fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ff4:	4718      	bx	r3
 8017ff6:	2000      	movs	r0, #0
 8017ff8:	bd10      	pop	{r4, pc}
 8017ffa:	bf00      	nop
 8017ffc:	20000018 	.word	0x20000018

08018000 <GUI_GetBitsPerPixelEx>:
 8018000:	4b03      	ldr	r3, [pc, #12]	; (8018010 <GUI_GetBitsPerPixelEx+0x10>)
 8018002:	2108      	movs	r1, #8
 8018004:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018008:	68c3      	ldr	r3, [r0, #12]
 801800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801800c:	4718      	bx	r3
 801800e:	bf00      	nop
 8018010:	2002afd0 	.word	0x2002afd0

08018014 <LCD_GetPalette>:
 8018014:	4b06      	ldr	r3, [pc, #24]	; (8018030 <LCD_GetPalette+0x1c>)
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	b510      	push	{r4, lr}
 801801a:	7c58      	ldrb	r0, [r3, #17]
 801801c:	f7fa fd4a 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018020:	b128      	cbz	r0, 801802e <LCD_GetPalette+0x1a>
 8018022:	68c3      	ldr	r3, [r0, #12]
 8018024:	2102      	movs	r1, #2
 8018026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801802c:	4718      	bx	r3
 801802e:	bd10      	pop	{r4, pc}
 8018030:	20000018 	.word	0x20000018

08018034 <GUI_GetpfIndex2ColorEx>:
 8018034:	4b02      	ldr	r3, [pc, #8]	; (8018040 <GUI_GetpfIndex2ColorEx+0xc>)
 8018036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801803a:	691b      	ldr	r3, [r3, #16]
 801803c:	6858      	ldr	r0, [r3, #4]
 801803e:	4770      	bx	lr
 8018040:	2002afd0 	.word	0x2002afd0

08018044 <GUI_GetpfColor2IndexEx>:
 8018044:	4b02      	ldr	r3, [pc, #8]	; (8018050 <GUI_GetpfColor2IndexEx+0xc>)
 8018046:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801804a:	691b      	ldr	r3, [r3, #16]
 801804c:	6818      	ldr	r0, [r3, #0]
 801804e:	4770      	bx	lr
 8018050:	2002afd0 	.word	0x2002afd0

08018054 <LCD_GetXSizeMax>:
 8018054:	b538      	push	{r3, r4, r5, lr}
 8018056:	2501      	movs	r5, #1
 8018058:	2400      	movs	r4, #0
 801805a:	4628      	mov	r0, r5
 801805c:	f7fa fd2a 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018060:	2101      	movs	r1, #1
 8018062:	b178      	cbz	r0, 8018084 <LCD_GetXSizeMax+0x30>
 8018064:	68c3      	ldr	r3, [r0, #12]
 8018066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018068:	4798      	blx	r3
 801806a:	4284      	cmp	r4, r0
 801806c:	bfb8      	it	lt
 801806e:	4604      	movlt	r4, r0
 8018070:	b90d      	cbnz	r5, 8018076 <LCD_GetXSizeMax+0x22>
 8018072:	4620      	mov	r0, r4
 8018074:	bd38      	pop	{r3, r4, r5, pc}
 8018076:	2500      	movs	r5, #0
 8018078:	4628      	mov	r0, r5
 801807a:	f7fa fd1b 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 801807e:	2101      	movs	r1, #1
 8018080:	2800      	cmp	r0, #0
 8018082:	d1ef      	bne.n	8018064 <LCD_GetXSizeMax+0x10>
 8018084:	e7f1      	b.n	801806a <LCD_GetXSizeMax+0x16>
 8018086:	bf00      	nop

08018088 <LCD_GetYSizeMax>:
 8018088:	b538      	push	{r3, r4, r5, lr}
 801808a:	2501      	movs	r5, #1
 801808c:	2400      	movs	r4, #0
 801808e:	4628      	mov	r0, r5
 8018090:	f7fa fd10 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018094:	2102      	movs	r1, #2
 8018096:	b178      	cbz	r0, 80180b8 <LCD_GetYSizeMax+0x30>
 8018098:	68c3      	ldr	r3, [r0, #12]
 801809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801809c:	4798      	blx	r3
 801809e:	4284      	cmp	r4, r0
 80180a0:	bfb8      	it	lt
 80180a2:	4604      	movlt	r4, r0
 80180a4:	b90d      	cbnz	r5, 80180aa <LCD_GetYSizeMax+0x22>
 80180a6:	4620      	mov	r0, r4
 80180a8:	bd38      	pop	{r3, r4, r5, pc}
 80180aa:	2500      	movs	r5, #0
 80180ac:	4628      	mov	r0, r5
 80180ae:	f7fa fd01 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80180b2:	2102      	movs	r1, #2
 80180b4:	2800      	cmp	r0, #0
 80180b6:	d1ef      	bne.n	8018098 <LCD_GetYSizeMax+0x10>
 80180b8:	e7f1      	b.n	801809e <LCD_GetYSizeMax+0x16>
 80180ba:	bf00      	nop

080180bc <LCD_GetVXSizeMax>:
 80180bc:	b538      	push	{r3, r4, r5, lr}
 80180be:	2501      	movs	r5, #1
 80180c0:	2400      	movs	r4, #0
 80180c2:	4628      	mov	r0, r5
 80180c4:	f7fa fcf6 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80180c8:	2103      	movs	r1, #3
 80180ca:	b178      	cbz	r0, 80180ec <LCD_GetVXSizeMax+0x30>
 80180cc:	68c3      	ldr	r3, [r0, #12]
 80180ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180d0:	4798      	blx	r3
 80180d2:	4284      	cmp	r4, r0
 80180d4:	bfb8      	it	lt
 80180d6:	4604      	movlt	r4, r0
 80180d8:	b90d      	cbnz	r5, 80180de <LCD_GetVXSizeMax+0x22>
 80180da:	4620      	mov	r0, r4
 80180dc:	bd38      	pop	{r3, r4, r5, pc}
 80180de:	2500      	movs	r5, #0
 80180e0:	4628      	mov	r0, r5
 80180e2:	f7fa fce7 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80180e6:	2103      	movs	r1, #3
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d1ef      	bne.n	80180cc <LCD_GetVXSizeMax+0x10>
 80180ec:	e7f1      	b.n	80180d2 <LCD_GetVXSizeMax+0x16>
 80180ee:	bf00      	nop

080180f0 <LCD_SetDisplaySize>:
 80180f0:	4b01      	ldr	r3, [pc, #4]	; (80180f8 <LCD_SetDisplaySize+0x8>)
 80180f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80180f6:	4770      	bx	lr
 80180f8:	200003b8 	.word	0x200003b8

080180fc <LCD_GetXSizeDisplay>:
 80180fc:	4b01      	ldr	r3, [pc, #4]	; (8018104 <LCD_GetXSizeDisplay+0x8>)
 80180fe:	6818      	ldr	r0, [r3, #0]
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	200003b8 	.word	0x200003b8

08018108 <LCD_GetYSizeDisplay>:
 8018108:	4b01      	ldr	r3, [pc, #4]	; (8018110 <LCD_GetYSizeDisplay+0x8>)
 801810a:	6858      	ldr	r0, [r3, #4]
 801810c:	4770      	bx	lr
 801810e:	bf00      	nop
 8018110:	200003b8 	.word	0x200003b8

08018114 <LCD__GetBPPDevice>:
 8018114:	b1b8      	cbz	r0, 8018146 <LCD__GetBPPDevice+0x32>
 8018116:	f030 0301 	bics.w	r3, r0, #1
 801811a:	d015      	beq.n	8018148 <LCD__GetBPPDevice+0x34>
 801811c:	f030 0303 	bics.w	r3, r0, #3
 8018120:	d101      	bne.n	8018126 <LCD__GetBPPDevice+0x12>
 8018122:	2008      	movs	r0, #8
 8018124:	4770      	bx	lr
 8018126:	f030 0307 	bics.w	r3, r0, #7
 801812a:	d0fa      	beq.n	8018122 <LCD__GetBPPDevice+0xe>
 801812c:	f030 030f 	bics.w	r3, r0, #15
 8018130:	d0f7      	beq.n	8018122 <LCD__GetBPPDevice+0xe>
 8018132:	f030 031f 	bics.w	r3, r0, #31
 8018136:	d0f4      	beq.n	8018122 <LCD__GetBPPDevice+0xe>
 8018138:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801813c:	d0f1      	beq.n	8018122 <LCD__GetBPPDevice+0xe>
 801813e:	4b0b      	ldr	r3, [pc, #44]	; (801816c <LCD__GetBPPDevice+0x58>)
 8018140:	4003      	ands	r3, r0
 8018142:	b91b      	cbnz	r3, 801814c <LCD__GetBPPDevice+0x38>
 8018144:	2010      	movs	r0, #16
 8018146:	4770      	bx	lr
 8018148:	2001      	movs	r0, #1
 801814a:	4770      	bx	lr
 801814c:	4b08      	ldr	r3, [pc, #32]	; (8018170 <LCD__GetBPPDevice+0x5c>)
 801814e:	4003      	ands	r3, r0
 8018150:	2b00      	cmp	r3, #0
 8018152:	d0f7      	beq.n	8018144 <LCD__GetBPPDevice+0x30>
 8018154:	4b07      	ldr	r3, [pc, #28]	; (8018174 <LCD__GetBPPDevice+0x60>)
 8018156:	4003      	ands	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d0f3      	beq.n	8018144 <LCD__GetBPPDevice+0x30>
 801815c:	4b06      	ldr	r3, [pc, #24]	; (8018178 <LCD__GetBPPDevice+0x64>)
 801815e:	4003      	ands	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	bf0c      	ite	eq
 8018164:	2010      	moveq	r0, #16
 8018166:	2020      	movne	r0, #32
 8018168:	4770      	bx	lr
 801816a:	bf00      	nop
 801816c:	fffffe00 	.word	0xfffffe00
 8018170:	fffff000 	.word	0xfffff000
 8018174:	ffff8000 	.word	0xffff8000
 8018178:	ffff0000 	.word	0xffff0000

0801817c <LCD_GetNumLayers>:
 801817c:	b510      	push	{r4, lr}
 801817e:	2000      	movs	r0, #0
 8018180:	f7fa fc98 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018184:	1c04      	adds	r4, r0, #0
 8018186:	f04f 0001 	mov.w	r0, #1
 801818a:	bf18      	it	ne
 801818c:	2401      	movne	r4, #1
 801818e:	f7fa fc91 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018192:	b100      	cbz	r0, 8018196 <LCD_GetNumLayers+0x1a>
 8018194:	3401      	adds	r4, #1
 8018196:	4620      	mov	r0, r4
 8018198:	bd10      	pop	{r4, pc}
 801819a:	bf00      	nop

0801819c <LCD_GetPixelIndex>:
 801819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801819e:	4e15      	ldr	r6, [pc, #84]	; (80181f4 <LCD_GetPixelIndex+0x58>)
 80181a0:	4604      	mov	r4, r0
 80181a2:	4d15      	ldr	r5, [pc, #84]	; (80181f8 <LCD_GetPixelIndex+0x5c>)
 80181a4:	b083      	sub	sp, #12
 80181a6:	6833      	ldr	r3, [r6, #0]
 80181a8:	460f      	mov	r7, r1
 80181aa:	4669      	mov	r1, sp
 80181ac:	7c5b      	ldrb	r3, [r3, #17]
 80181ae:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80181b2:	68c3      	ldr	r3, [r0, #12]
 80181b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b6:	4798      	blx	r3
 80181b8:	f9bd 3000 	ldrsh.w	r3, [sp]
 80181bc:	42a3      	cmp	r3, r4
 80181be:	dc0b      	bgt.n	80181d8 <LCD_GetPixelIndex+0x3c>
 80181c0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80181c4:	429c      	cmp	r4, r3
 80181c6:	dc07      	bgt.n	80181d8 <LCD_GetPixelIndex+0x3c>
 80181c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80181cc:	42bb      	cmp	r3, r7
 80181ce:	dc03      	bgt.n	80181d8 <LCD_GetPixelIndex+0x3c>
 80181d0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80181d4:	429f      	cmp	r7, r3
 80181d6:	dd02      	ble.n	80181de <LCD_GetPixelIndex+0x42>
 80181d8:	2000      	movs	r0, #0
 80181da:	b003      	add	sp, #12
 80181dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181de:	6833      	ldr	r3, [r6, #0]
 80181e0:	463a      	mov	r2, r7
 80181e2:	4621      	mov	r1, r4
 80181e4:	7c5b      	ldrb	r3, [r3, #17]
 80181e6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80181ea:	68c3      	ldr	r3, [r0, #12]
 80181ec:	695b      	ldr	r3, [r3, #20]
 80181ee:	4798      	blx	r3
 80181f0:	e7f3      	b.n	80181da <LCD_GetPixelIndex+0x3e>
 80181f2:	bf00      	nop
 80181f4:	20000018 	.word	0x20000018
 80181f8:	2002afd0 	.word	0x2002afd0

080181fc <LCD_GetPixelColor>:
 80181fc:	b508      	push	{r3, lr}
 80181fe:	f7ff ffcd 	bl	801819c <LCD_GetPixelIndex>
 8018202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018206:	f7ff bcc7 	b.w	8017b98 <LCD_Index2Color>
 801820a:	bf00      	nop

0801820c <LCD_ReadRectEx>:
 801820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018210:	b085      	sub	sp, #20
 8018212:	4617      	mov	r7, r2
 8018214:	469a      	mov	sl, r3
 8018216:	4681      	mov	r9, r0
 8018218:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801821a:	460e      	mov	r6, r1
 801821c:	68e2      	ldr	r2, [r4, #12]
 801821e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018220:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8018222:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8018226:	b17b      	cbz	r3, 8018248 <LCD_ReadRectEx+0x3c>
 8018228:	2101      	movs	r1, #1
 801822a:	a80f      	add	r0, sp, #60	; 0x3c
 801822c:	4798      	blx	r3
 801822e:	4605      	mov	r5, r0
 8018230:	b150      	cbz	r0, 8018248 <LCD_ReadRectEx+0x3c>
 8018232:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018234:	463b      	mov	r3, r7
 8018236:	9401      	str	r4, [sp, #4]
 8018238:	4632      	mov	r2, r6
 801823a:	f8cd a000 	str.w	sl, [sp]
 801823e:	4649      	mov	r1, r9
 8018240:	47a8      	blx	r5
 8018242:	b005      	add	sp, #20
 8018244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018248:	4b77      	ldr	r3, [pc, #476]	; (8018428 <LCD_ReadRectEx+0x21c>)
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	7c58      	ldrb	r0, [r3, #17]
 801824e:	f7ff fed7 	bl	8018000 <GUI_GetBitsPerPixelEx>
 8018252:	2808      	cmp	r0, #8
 8018254:	dc30      	bgt.n	80182b8 <LCD_ReadRectEx+0xac>
 8018256:	2301      	movs	r3, #1
 8018258:	4556      	cmp	r6, sl
 801825a:	dcf2      	bgt.n	8018242 <LCD_ReadRectEx+0x36>
 801825c:	2b02      	cmp	r3, #2
 801825e:	d00a      	beq.n	8018276 <LCD_ReadRectEx+0x6a>
 8018260:	2b04      	cmp	r3, #4
 8018262:	d01b      	beq.n	801829c <LCD_ReadRectEx+0x90>
 8018264:	2b01      	cmp	r3, #1
 8018266:	d02c      	beq.n	80182c2 <LCD_ReadRectEx+0xb6>
 8018268:	3601      	adds	r6, #1
 801826a:	45b2      	cmp	sl, r6
 801826c:	daf6      	bge.n	801825c <LCD_ReadRectEx+0x50>
 801826e:	e7e8      	b.n	8018242 <LCD_ReadRectEx+0x36>
 8018270:	3601      	adds	r6, #1
 8018272:	4556      	cmp	r6, sl
 8018274:	dce5      	bgt.n	8018242 <LCD_ReadRectEx+0x36>
 8018276:	45b9      	cmp	r9, r7
 8018278:	dcfa      	bgt.n	8018270 <LCD_ReadRectEx+0x64>
 801827a:	464d      	mov	r5, r9
 801827c:	4629      	mov	r1, r5
 801827e:	3501      	adds	r5, #1
 8018280:	4632      	mov	r2, r6
 8018282:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018284:	47c0      	blx	r8
 8018286:	42af      	cmp	r7, r5
 8018288:	f824 0b02 	strh.w	r0, [r4], #2
 801828c:	daf6      	bge.n	801827c <LCD_ReadRectEx+0x70>
 801828e:	3601      	adds	r6, #1
 8018290:	45b2      	cmp	sl, r6
 8018292:	daf0      	bge.n	8018276 <LCD_ReadRectEx+0x6a>
 8018294:	e7d5      	b.n	8018242 <LCD_ReadRectEx+0x36>
 8018296:	3601      	adds	r6, #1
 8018298:	45b2      	cmp	sl, r6
 801829a:	dbd2      	blt.n	8018242 <LCD_ReadRectEx+0x36>
 801829c:	45b9      	cmp	r9, r7
 801829e:	f300 80ba 	bgt.w	8018416 <LCD_ReadRectEx+0x20a>
 80182a2:	464d      	mov	r5, r9
 80182a4:	4629      	mov	r1, r5
 80182a6:	3501      	adds	r5, #1
 80182a8:	4632      	mov	r2, r6
 80182aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80182ac:	47c0      	blx	r8
 80182ae:	42af      	cmp	r7, r5
 80182b0:	f844 0b04 	str.w	r0, [r4], #4
 80182b4:	daf6      	bge.n	80182a4 <LCD_ReadRectEx+0x98>
 80182b6:	e7ee      	b.n	8018296 <LCD_ReadRectEx+0x8a>
 80182b8:	2811      	cmp	r0, #17
 80182ba:	bfb4      	ite	lt
 80182bc:	2302      	movlt	r3, #2
 80182be:	2304      	movge	r3, #4
 80182c0:	e7ca      	b.n	8018258 <LCD_ReadRectEx+0x4c>
 80182c2:	1e43      	subs	r3, r0, #1
 80182c4:	2500      	movs	r5, #0
 80182c6:	f8cd a008 	str.w	sl, [sp, #8]
 80182ca:	9303      	str	r3, [sp, #12]
 80182cc:	9b03      	ldr	r3, [sp, #12]
 80182ce:	2b07      	cmp	r3, #7
 80182d0:	f200 809b 	bhi.w	801840a <LCD_ReadRectEx+0x1fe>
 80182d4:	e8df f003 	tbb	[pc, r3]
 80182d8:	18186d44 	.word	0x18186d44
 80182dc:	04040404 	.word	0x04040404
 80182e0:	45b9      	cmp	r9, r7
 80182e2:	dc38      	bgt.n	8018356 <LCD_ReadRectEx+0x14a>
 80182e4:	4643      	mov	r3, r8
 80182e6:	46cb      	mov	fp, r9
 80182e8:	46a8      	mov	r8, r5
 80182ea:	461d      	mov	r5, r3
 80182ec:	4659      	mov	r1, fp
 80182ee:	f10b 0b01 	add.w	fp, fp, #1
 80182f2:	4632      	mov	r2, r6
 80182f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80182f6:	47a8      	blx	r5
 80182f8:	455f      	cmp	r7, fp
 80182fa:	f804 0b01 	strb.w	r0, [r4], #1
 80182fe:	daf5      	bge.n	80182ec <LCD_ReadRectEx+0xe0>
 8018300:	462b      	mov	r3, r5
 8018302:	4645      	mov	r5, r8
 8018304:	4698      	mov	r8, r3
 8018306:	e026      	b.n	8018356 <LCD_ReadRectEx+0x14a>
 8018308:	45b9      	cmp	r9, r7
 801830a:	dc24      	bgt.n	8018356 <LCD_ReadRectEx+0x14a>
 801830c:	940e      	str	r4, [sp, #56]	; 0x38
 801830e:	46ca      	mov	sl, r9
 8018310:	4644      	mov	r4, r8
 8018312:	f04f 0b0f 	mov.w	fp, #15
 8018316:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801831a:	4651      	mov	r1, sl
 801831c:	4632      	mov	r2, r6
 801831e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018320:	f10a 0a01 	add.w	sl, sl, #1
 8018324:	47a0      	blx	r4
 8018326:	f898 1000 	ldrb.w	r1, [r8]
 801832a:	00ab      	lsls	r3, r5, #2
 801832c:	4557      	cmp	r7, sl
 801832e:	f1c3 0204 	rsb	r2, r3, #4
 8018332:	fa0b f303 	lsl.w	r3, fp, r3
 8018336:	fa00 f002 	lsl.w	r0, r0, r2
 801833a:	ea03 0301 	and.w	r3, r3, r1
 801833e:	ea43 0300 	orr.w	r3, r3, r0
 8018342:	f888 3000 	strb.w	r3, [r8]
 8018346:	44a8      	add	r8, r5
 8018348:	f085 0501 	eor.w	r5, r5, #1
 801834c:	dae5      	bge.n	801831a <LCD_ReadRectEx+0x10e>
 801834e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8018352:	46a0      	mov	r8, r4
 8018354:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018356:	3601      	adds	r6, #1
 8018358:	9b02      	ldr	r3, [sp, #8]
 801835a:	42b3      	cmp	r3, r6
 801835c:	dab6      	bge.n	80182cc <LCD_ReadRectEx+0xc0>
 801835e:	e770      	b.n	8018242 <LCD_ReadRectEx+0x36>
 8018360:	46a3      	mov	fp, r4
 8018362:	4644      	mov	r4, r8
 8018364:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018368:	45b9      	cmp	r9, r7
 801836a:	dc59      	bgt.n	8018420 <LCD_ReadRectEx+0x214>
 801836c:	46ca      	mov	sl, r9
 801836e:	4651      	mov	r1, sl
 8018370:	4632      	mov	r2, r6
 8018372:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018374:	f10a 0a01 	add.w	sl, sl, #1
 8018378:	47a0      	blx	r4
 801837a:	f64f 727f 	movw	r2, #65407	; 0xff7f
 801837e:	f89b e000 	ldrb.w	lr, [fp]
 8018382:	f1c5 0307 	rsb	r3, r5, #7
 8018386:	fa42 f105 	asr.w	r1, r2, r5
 801838a:	1c6a      	adds	r2, r5, #1
 801838c:	4098      	lsls	r0, r3
 801838e:	4557      	cmp	r7, sl
 8018390:	ea0e 0101 	and.w	r1, lr, r1
 8018394:	f022 0507 	bic.w	r5, r2, #7
 8018398:	ea40 0001 	orr.w	r0, r0, r1
 801839c:	fa42 f505 	asr.w	r5, r2, r5
 80183a0:	f88b 0000 	strb.w	r0, [fp]
 80183a4:	eb0b 0be2 	add.w	fp, fp, r2, asr #3
 80183a8:	dae1      	bge.n	801836e <LCD_ReadRectEx+0x162>
 80183aa:	3601      	adds	r6, #1
 80183ac:	45b0      	cmp	r8, r6
 80183ae:	dadb      	bge.n	8018368 <LCD_ReadRectEx+0x15c>
 80183b0:	e747      	b.n	8018242 <LCD_ReadRectEx+0x36>
 80183b2:	940e      	str	r4, [sp, #56]	; 0x38
 80183b4:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 80183b8:	4644      	mov	r4, r8
 80183ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80183be:	45b9      	cmp	r9, r7
 80183c0:	dcc5      	bgt.n	801834e <LCD_ReadRectEx+0x142>
 80183c2:	46ca      	mov	sl, r9
 80183c4:	4651      	mov	r1, sl
 80183c6:	4632      	mov	r2, r6
 80183c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80183ca:	f10a 0a01 	add.w	sl, sl, #1
 80183ce:	47a0      	blx	r4
 80183d0:	1c6a      	adds	r2, r5, #1
 80183d2:	006d      	lsls	r5, r5, #1
 80183d4:	f898 1000 	ldrb.w	r1, [r8]
 80183d8:	4557      	cmp	r7, sl
 80183da:	f1c5 0306 	rsb	r3, r5, #6
 80183de:	fa4b f505 	asr.w	r5, fp, r5
 80183e2:	fa00 f003 	lsl.w	r0, r0, r3
 80183e6:	ea05 0501 	and.w	r5, r5, r1
 80183ea:	f022 0303 	bic.w	r3, r2, #3
 80183ee:	ea40 0005 	orr.w	r0, r0, r5
 80183f2:	fa42 f503 	asr.w	r5, r2, r3
 80183f6:	f888 0000 	strb.w	r0, [r8]
 80183fa:	eb08 08a2 	add.w	r8, r8, r2, asr #2
 80183fe:	dae1      	bge.n	80183c4 <LCD_ReadRectEx+0x1b8>
 8018400:	3601      	adds	r6, #1
 8018402:	9b02      	ldr	r3, [sp, #8]
 8018404:	42b3      	cmp	r3, r6
 8018406:	dada      	bge.n	80183be <LCD_ReadRectEx+0x1b2>
 8018408:	e71b      	b.n	8018242 <LCD_ReadRectEx+0x36>
 801840a:	3601      	adds	r6, #1
 801840c:	9b02      	ldr	r3, [sp, #8]
 801840e:	429e      	cmp	r6, r3
 8018410:	f77f af5c 	ble.w	80182cc <LCD_ReadRectEx+0xc0>
 8018414:	e715      	b.n	8018242 <LCD_ReadRectEx+0x36>
 8018416:	3601      	adds	r6, #1
 8018418:	4556      	cmp	r6, sl
 801841a:	f77f af3f 	ble.w	801829c <LCD_ReadRectEx+0x90>
 801841e:	e710      	b.n	8018242 <LCD_ReadRectEx+0x36>
 8018420:	46a0      	mov	r8, r4
 8018422:	465c      	mov	r4, fp
 8018424:	e797      	b.n	8018356 <LCD_ReadRectEx+0x14a>
 8018426:	bf00      	nop
 8018428:	20000018 	.word	0x20000018

0801842c <GUI_ReadRectEx>:
 801842c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801842e:	4c16      	ldr	r4, [pc, #88]	; (8018488 <GUI_ReadRectEx+0x5c>)
 8018430:	9f05      	ldr	r7, [sp, #20]
 8018432:	6825      	ldr	r5, [r4, #0]
 8018434:	9c06      	ldr	r4, [sp, #24]
 8018436:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801843a:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801843e:	4570      	cmp	r0, lr
 8018440:	bfb8      	it	lt
 8018442:	4670      	movlt	r0, lr
 8018444:	42b2      	cmp	r2, r6
 8018446:	bfa8      	it	ge
 8018448:	4632      	movge	r2, r6
 801844a:	4290      	cmp	r0, r2
 801844c:	dc1a      	bgt.n	8018484 <GUI_ReadRectEx+0x58>
 801844e:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 8018452:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8018456:	42b1      	cmp	r1, r6
 8018458:	bfb8      	it	lt
 801845a:	4631      	movlt	r1, r6
 801845c:	42ab      	cmp	r3, r5
 801845e:	bfa8      	it	ge
 8018460:	462b      	movge	r3, r5
 8018462:	428b      	cmp	r3, r1
 8018464:	da03      	bge.n	801846e <GUI_ReadRectEx+0x42>
 8018466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018468:	6825      	ldr	r5, [r4, #0]
 801846a:	b12d      	cbz	r5, 8018478 <GUI_ReadRectEx+0x4c>
 801846c:	462c      	mov	r4, r5
 801846e:	68e5      	ldr	r5, [r4, #12]
 8018470:	682d      	ldr	r5, [r5, #0]
 8018472:	f035 0504 	bics.w	r5, r5, #4
 8018476:	d1f7      	bne.n	8018468 <GUI_ReadRectEx+0x3c>
 8018478:	9406      	str	r4, [sp, #24]
 801847a:	9705      	str	r7, [sp, #20]
 801847c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018480:	f7ff bec4 	b.w	801820c <LCD_ReadRectEx>
 8018484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018486:	bf00      	nop
 8018488:	20000018 	.word	0x20000018

0801848c <LCD_SelectLCD>:
 801848c:	b510      	push	{r4, lr}
 801848e:	4c0e      	ldr	r4, [pc, #56]	; (80184c8 <LCD_SelectLCD+0x3c>)
 8018490:	4b0e      	ldr	r3, [pc, #56]	; (80184cc <LCD_SelectLCD+0x40>)
 8018492:	6822      	ldr	r2, [r4, #0]
 8018494:	7c51      	ldrb	r1, [r2, #17]
 8018496:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801849a:	b138      	cbz	r0, 80184ac <LCD_SelectLCD+0x20>
 801849c:	68c3      	ldr	r3, [r0, #12]
 801849e:	b113      	cbz	r3, 80184a6 <LCD_SelectLCD+0x1a>
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b04      	cmp	r3, #4
 80184a4:	d00b      	beq.n	80184be <LCD_SelectLCD+0x32>
 80184a6:	6800      	ldr	r0, [r0, #0]
 80184a8:	2800      	cmp	r0, #0
 80184aa:	d1f7      	bne.n	801849c <LCD_SelectLCD+0x10>
 80184ac:	2100      	movs	r1, #0
 80184ae:	f102 0308 	add.w	r3, r2, #8
 80184b2:	6611      	str	r1, [r2, #96]	; 0x60
 80184b4:	6153      	str	r3, [r2, #20]
 80184b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184ba:	f7ff bac9 	b.w	8017a50 <LCD_SetClipRectMax>
 80184be:	f7fa fb3f 	bl	8012b40 <GUI_DEVICE_Unlink>
 80184c2:	6822      	ldr	r2, [r4, #0]
 80184c4:	e7f2      	b.n	80184ac <LCD_SelectLCD+0x20>
 80184c6:	bf00      	nop
 80184c8:	20000018 	.word	0x20000018
 80184cc:	2002afd0 	.word	0x2002afd0

080184d0 <LCD_GetPosEx>:
 80184d0:	b530      	push	{r4, r5, lr}
 80184d2:	b083      	sub	sp, #12
 80184d4:	460c      	mov	r4, r1
 80184d6:	4615      	mov	r5, r2
 80184d8:	f7fa faec 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80184dc:	9001      	str	r0, [sp, #4]
 80184de:	b170      	cbz	r0, 80184fe <LCD_GetPosEx+0x2e>
 80184e0:	68c3      	ldr	r3, [r0, #12]
 80184e2:	2104      	movs	r1, #4
 80184e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184e6:	eb0d 0001 	add.w	r0, sp, r1
 80184ea:	4798      	blx	r3
 80184ec:	4603      	mov	r3, r0
 80184ee:	b130      	cbz	r0, 80184fe <LCD_GetPosEx+0x2e>
 80184f0:	9801      	ldr	r0, [sp, #4]
 80184f2:	462a      	mov	r2, r5
 80184f4:	4621      	mov	r1, r4
 80184f6:	4798      	blx	r3
 80184f8:	2000      	movs	r0, #0
 80184fa:	b003      	add	sp, #12
 80184fc:	bd30      	pop	{r4, r5, pc}
 80184fe:	2001      	movs	r0, #1
 8018500:	b003      	add	sp, #12
 8018502:	bd30      	pop	{r4, r5, pc}

08018504 <LCD_SetDevFunc>:
 8018504:	b530      	push	{r4, r5, lr}
 8018506:	b083      	sub	sp, #12
 8018508:	460c      	mov	r4, r1
 801850a:	4615      	mov	r5, r2
 801850c:	f7fa fad2 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018510:	9001      	str	r0, [sp, #4]
 8018512:	b168      	cbz	r0, 8018530 <LCD_SetDevFunc+0x2c>
 8018514:	68c3      	ldr	r3, [r0, #12]
 8018516:	2116      	movs	r1, #22
 8018518:	a801      	add	r0, sp, #4
 801851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801851c:	4798      	blx	r3
 801851e:	4603      	mov	r3, r0
 8018520:	b130      	cbz	r0, 8018530 <LCD_SetDevFunc+0x2c>
 8018522:	9801      	ldr	r0, [sp, #4]
 8018524:	462a      	mov	r2, r5
 8018526:	4621      	mov	r1, r4
 8018528:	4798      	blx	r3
 801852a:	2000      	movs	r0, #0
 801852c:	b003      	add	sp, #12
 801852e:	bd30      	pop	{r4, r5, pc}
 8018530:	2001      	movs	r0, #1
 8018532:	b003      	add	sp, #12
 8018534:	bd30      	pop	{r4, r5, pc}
 8018536:	bf00      	nop

08018538 <LCD_SetLUTEntryEx>:
 8018538:	b530      	push	{r4, r5, lr}
 801853a:	b083      	sub	sp, #12
 801853c:	460c      	mov	r4, r1
 801853e:	4615      	mov	r5, r2
 8018540:	f7fa fab8 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018544:	9001      	str	r0, [sp, #4]
 8018546:	b168      	cbz	r0, 8018564 <LCD_SetLUTEntryEx+0x2c>
 8018548:	68c3      	ldr	r3, [r0, #12]
 801854a:	2110      	movs	r1, #16
 801854c:	a801      	add	r0, sp, #4
 801854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018550:	4798      	blx	r3
 8018552:	4603      	mov	r3, r0
 8018554:	b130      	cbz	r0, 8018564 <LCD_SetLUTEntryEx+0x2c>
 8018556:	9801      	ldr	r0, [sp, #4]
 8018558:	462a      	mov	r2, r5
 801855a:	4621      	mov	r1, r4
 801855c:	4798      	blx	r3
 801855e:	2000      	movs	r0, #0
 8018560:	b003      	add	sp, #12
 8018562:	bd30      	pop	{r4, r5, pc}
 8018564:	2001      	movs	r0, #1
 8018566:	b003      	add	sp, #12
 8018568:	bd30      	pop	{r4, r5, pc}
 801856a:	bf00      	nop

0801856c <LCD_SetPosEx>:
 801856c:	b530      	push	{r4, r5, lr}
 801856e:	b083      	sub	sp, #12
 8018570:	460c      	mov	r4, r1
 8018572:	4615      	mov	r5, r2
 8018574:	f7fa fa9e 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018578:	9001      	str	r0, [sp, #4]
 801857a:	b168      	cbz	r0, 8018598 <LCD_SetPosEx+0x2c>
 801857c:	68c3      	ldr	r3, [r0, #12]
 801857e:	2103      	movs	r1, #3
 8018580:	a801      	add	r0, sp, #4
 8018582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018584:	4798      	blx	r3
 8018586:	4603      	mov	r3, r0
 8018588:	b130      	cbz	r0, 8018598 <LCD_SetPosEx+0x2c>
 801858a:	9801      	ldr	r0, [sp, #4]
 801858c:	462a      	mov	r2, r5
 801858e:	4621      	mov	r1, r4
 8018590:	4798      	blx	r3
 8018592:	2000      	movs	r0, #0
 8018594:	b003      	add	sp, #12
 8018596:	bd30      	pop	{r4, r5, pc}
 8018598:	2001      	movs	r0, #1
 801859a:	b003      	add	sp, #12
 801859c:	bd30      	pop	{r4, r5, pc}
 801859e:	bf00      	nop

080185a0 <LCD_SetSizeEx>:
 80185a0:	b530      	push	{r4, r5, lr}
 80185a2:	b083      	sub	sp, #12
 80185a4:	460c      	mov	r4, r1
 80185a6:	4615      	mov	r5, r2
 80185a8:	f7fa fa84 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80185ac:	9001      	str	r0, [sp, #4]
 80185ae:	b168      	cbz	r0, 80185cc <LCD_SetSizeEx+0x2c>
 80185b0:	68c3      	ldr	r3, [r0, #12]
 80185b2:	210b      	movs	r1, #11
 80185b4:	a801      	add	r0, sp, #4
 80185b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b8:	4798      	blx	r3
 80185ba:	4603      	mov	r3, r0
 80185bc:	b130      	cbz	r0, 80185cc <LCD_SetSizeEx+0x2c>
 80185be:	9801      	ldr	r0, [sp, #4]
 80185c0:	462a      	mov	r2, r5
 80185c2:	4621      	mov	r1, r4
 80185c4:	4798      	blx	r3
 80185c6:	2000      	movs	r0, #0
 80185c8:	b003      	add	sp, #12
 80185ca:	bd30      	pop	{r4, r5, pc}
 80185cc:	2001      	movs	r0, #1
 80185ce:	b003      	add	sp, #12
 80185d0:	bd30      	pop	{r4, r5, pc}
 80185d2:	bf00      	nop

080185d4 <LCD_SetVRAMAddrEx>:
 80185d4:	b510      	push	{r4, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	460c      	mov	r4, r1
 80185da:	f7fa fa6b 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 80185de:	9001      	str	r0, [sp, #4]
 80185e0:	b160      	cbz	r0, 80185fc <LCD_SetVRAMAddrEx+0x28>
 80185e2:	68c3      	ldr	r3, [r0, #12]
 80185e4:	2109      	movs	r1, #9
 80185e6:	a801      	add	r0, sp, #4
 80185e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ea:	4798      	blx	r3
 80185ec:	4603      	mov	r3, r0
 80185ee:	b128      	cbz	r0, 80185fc <LCD_SetVRAMAddrEx+0x28>
 80185f0:	9801      	ldr	r0, [sp, #4]
 80185f2:	4621      	mov	r1, r4
 80185f4:	4798      	blx	r3
 80185f6:	2000      	movs	r0, #0
 80185f8:	b002      	add	sp, #8
 80185fa:	bd10      	pop	{r4, pc}
 80185fc:	2001      	movs	r0, #1
 80185fe:	b002      	add	sp, #8
 8018600:	bd10      	pop	{r4, pc}
 8018602:	bf00      	nop

08018604 <LCD_SetVSizeEx>:
 8018604:	b530      	push	{r4, r5, lr}
 8018606:	b083      	sub	sp, #12
 8018608:	460c      	mov	r4, r1
 801860a:	4615      	mov	r5, r2
 801860c:	f7fa fa52 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8018610:	9001      	str	r0, [sp, #4]
 8018612:	b168      	cbz	r0, 8018630 <LCD_SetVSizeEx+0x2c>
 8018614:	68c3      	ldr	r3, [r0, #12]
 8018616:	210a      	movs	r1, #10
 8018618:	a801      	add	r0, sp, #4
 801861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801861c:	4798      	blx	r3
 801861e:	4603      	mov	r3, r0
 8018620:	b130      	cbz	r0, 8018630 <LCD_SetVSizeEx+0x2c>
 8018622:	9801      	ldr	r0, [sp, #4]
 8018624:	462a      	mov	r2, r5
 8018626:	4621      	mov	r1, r4
 8018628:	4798      	blx	r3
 801862a:	2000      	movs	r0, #0
 801862c:	b003      	add	sp, #12
 801862e:	bd30      	pop	{r4, r5, pc}
 8018630:	2001      	movs	r0, #1
 8018632:	b003      	add	sp, #12
 8018634:	bd30      	pop	{r4, r5, pc}
 8018636:	bf00      	nop

08018638 <LCD_UpdateColorIndices>:
 8018638:	b510      	push	{r4, lr}
 801863a:	4c07      	ldr	r4, [pc, #28]	; (8018658 <LCD_UpdateColorIndices+0x20>)
 801863c:	6823      	ldr	r3, [r4, #0]
 801863e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018640:	f7ff fa9c 	bl	8017b7c <LCD_Color2Index>
 8018644:	f7ff fab6 	bl	8017bb4 <LCD_SetColorIndex>
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801864c:	f7ff fa96 	bl	8017b7c <LCD_Color2Index>
 8018650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018654:	f7ff baba 	b.w	8017bcc <LCD_SetBkColorIndex>
 8018658:	20000018 	.word	0x20000018

0801865c <_GetRect>:
 801865c:	6883      	ldr	r3, [r0, #8]
 801865e:	2000      	movs	r0, #0
 8018660:	699a      	ldr	r2, [r3, #24]
 8018662:	69db      	ldr	r3, [r3, #28]
 8018664:	3a01      	subs	r2, #1
 8018666:	8008      	strh	r0, [r1, #0]
 8018668:	3b01      	subs	r3, #1
 801866a:	8048      	strh	r0, [r1, #2]
 801866c:	808a      	strh	r2, [r1, #4]
 801866e:	80cb      	strh	r3, [r1, #6]
 8018670:	4770      	bx	lr
 8018672:	bf00      	nop

08018674 <_SetPixelIndex>:
 8018674:	b410      	push	{r4}
 8018676:	6884      	ldr	r4, [r0, #8]
 8018678:	6a20      	ldr	r0, [r4, #32]
 801867a:	6824      	ldr	r4, [r4, #0]
 801867c:	fb00 1202 	mla	r2, r0, r2, r1
 8018680:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8018684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018688:	4770      	bx	lr
 801868a:	bf00      	nop

0801868c <_GetPixelIndex>:
 801868c:	6880      	ldr	r0, [r0, #8]
 801868e:	6a03      	ldr	r3, [r0, #32]
 8018690:	6800      	ldr	r0, [r0, #0]
 8018692:	fb03 1202 	mla	r2, r3, r2, r1
 8018696:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 801869a:	4770      	bx	lr

0801869c <_XorPixel>:
 801869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801869e:	4614      	mov	r4, r2
 80186a0:	6882      	ldr	r2, [r0, #8]
 80186a2:	460f      	mov	r7, r1
 80186a4:	4606      	mov	r6, r0
 80186a6:	6a13      	ldr	r3, [r2, #32]
 80186a8:	6900      	ldr	r0, [r0, #16]
 80186aa:	6811      	ldr	r1, [r2, #0]
 80186ac:	fb03 7304 	mla	r3, r3, r4, r7
 80186b0:	6882      	ldr	r2, [r0, #8]
 80186b2:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 80186b6:	4790      	blx	r2
 80186b8:	68b3      	ldr	r3, [r6, #8]
 80186ba:	4068      	eors	r0, r5
 80186bc:	6a19      	ldr	r1, [r3, #32]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	fb01 7404 	mla	r4, r1, r4, r7
 80186c4:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 80186c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186ca:	bf00      	nop

080186cc <_GetDevProp>:
 80186cc:	3901      	subs	r1, #1
 80186ce:	6883      	ldr	r3, [r0, #8]
 80186d0:	290d      	cmp	r1, #13
 80186d2:	d816      	bhi.n	8018702 <_GetDevProp+0x36>
 80186d4:	e8df f001 	tbb	[pc, r1]
 80186d8:	0d13110f 	.word	0x0d13110f
 80186dc:	0b151515 	.word	0x0b151515
 80186e0:	07090907 	.word	0x07090907
 80186e4:	0707      	.short	0x0707
 80186e6:	2000      	movs	r0, #0
 80186e8:	4770      	bx	lr
 80186ea:	2001      	movs	r0, #1
 80186ec:	4770      	bx	lr
 80186ee:	2010      	movs	r0, #16
 80186f0:	4770      	bx	lr
 80186f2:	69d8      	ldr	r0, [r3, #28]
 80186f4:	4770      	bx	lr
 80186f6:	6918      	ldr	r0, [r3, #16]
 80186f8:	4770      	bx	lr
 80186fa:	6958      	ldr	r0, [r3, #20]
 80186fc:	4770      	bx	lr
 80186fe:	6998      	ldr	r0, [r3, #24]
 8018700:	4770      	bx	lr
 8018702:	f04f 30ff 	mov.w	r0, #4294967295
 8018706:	4770      	bx	lr

08018708 <_GetDevData>:
 8018708:	2901      	cmp	r1, #1
 801870a:	4802      	ldr	r0, [pc, #8]	; (8018714 <_GetDevData+0xc>)
 801870c:	bf18      	it	ne
 801870e:	2000      	movne	r0, #0
 8018710:	4770      	bx	lr
 8018712:	bf00      	nop
 8018714:	0802a77c 	.word	0x0802a77c

08018718 <_ReadRect>:
 8018718:	1a5b      	subs	r3, r3, r1
 801871a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801871e:	1e5e      	subs	r6, r3, #1
 8018720:	6880      	ldr	r0, [r0, #8]
 8018722:	b085      	sub	sp, #20
 8018724:	f103 0e01 	add.w	lr, r3, #1
 8018728:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	0876      	lsrs	r6, r6, #1
 8018730:	f8d0 c000 	ldr.w	ip, [r0]
 8018734:	fb09 1702 	mla	r7, r9, r2, r1
 8018738:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801873a:	3601      	adds	r6, #1
 801873c:	9303      	str	r3, [sp, #12]
 801873e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8018742:	eb0c 0547 	add.w	r5, ip, r7, lsl #1
 8018746:	9301      	str	r3, [sp, #4]
 8018748:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801874c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8018750:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8018754:	9302      	str	r3, [sp, #8]
 8018756:	1d0b      	adds	r3, r1, #4
 8018758:	1d28      	adds	r0, r5, #4
 801875a:	42ab      	cmp	r3, r5
 801875c:	bf8c      	ite	hi
 801875e:	2300      	movhi	r3, #0
 8018760:	2301      	movls	r3, #1
 8018762:	4281      	cmp	r1, r0
 8018764:	bf28      	it	cs
 8018766:	f043 0301 	orrcs.w	r3, r3, #1
 801876a:	b36b      	cbz	r3, 80187c8 <_ReadRect+0xb0>
 801876c:	ea41 0305 	orr.w	r3, r1, r5
 8018770:	f1be 0f0c 	cmp.w	lr, #12
 8018774:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8018778:	bf94      	ite	ls
 801877a:	2000      	movls	r0, #0
 801877c:	2001      	movhi	r0, #1
 801877e:	2b00      	cmp	r3, #0
 8018780:	bf18      	it	ne
 8018782:	2000      	movne	r0, #0
 8018784:	b300      	cbz	r0, 80187c8 <_ReadRect+0xb0>
 8018786:	1f2c      	subs	r4, r5, #4
 8018788:	4608      	mov	r0, r1
 801878a:	2300      	movs	r3, #0
 801878c:	4693      	mov	fp, r2
 801878e:	3301      	adds	r3, #1
 8018790:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8018794:	429e      	cmp	r6, r3
 8018796:	f840 2b04 	str.w	r2, [r0], #4
 801879a:	d8f8      	bhi.n	801878e <_ReadRect+0x76>
 801879c:	45d6      	cmp	lr, sl
 801879e:	465a      	mov	r2, fp
 80187a0:	eb07 030a 	add.w	r3, r7, sl
 80187a4:	d003      	beq.n	80187ae <_ReadRect+0x96>
 80187a6:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 80187aa:	f821 3008 	strh.w	r3, [r1, r8]
 80187ae:	9b01      	ldr	r3, [sp, #4]
 80187b0:	3201      	adds	r2, #1
 80187b2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80187b4:	444f      	add	r7, r9
 80187b6:	4419      	add	r1, r3
 80187b8:	9b02      	ldr	r3, [sp, #8]
 80187ba:	441d      	add	r5, r3
 80187bc:	1e53      	subs	r3, r2, #1
 80187be:	4298      	cmp	r0, r3
 80187c0:	dcc9      	bgt.n	8018756 <_ReadRect+0x3e>
 80187c2:	b005      	add	sp, #20
 80187c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187c8:	9803      	ldr	r0, [sp, #12]
 80187ca:	1e8b      	subs	r3, r1, #2
 80187cc:	eb01 0b00 	add.w	fp, r1, r0
 80187d0:	4628      	mov	r0, r5
 80187d2:	f830 4b02 	ldrh.w	r4, [r0], #2
 80187d6:	f823 4f02 	strh.w	r4, [r3, #2]!
 80187da:	455b      	cmp	r3, fp
 80187dc:	d1f9      	bne.n	80187d2 <_ReadRect+0xba>
 80187de:	e7e6      	b.n	80187ae <_ReadRect+0x96>

080187e0 <_GetDevFunc>:
 80187e0:	3901      	subs	r1, #1
 80187e2:	2928      	cmp	r1, #40	; 0x28
 80187e4:	d84a      	bhi.n	801887c <_GetDevFunc+0x9c>
 80187e6:	e8df f001 	tbb	[pc, r1]
 80187ea:	1d1f      	.short	0x1d1f
 80187ec:	1749191b 	.word	0x1749191b
 80187f0:	47154949 	.word	0x47154949
 80187f4:	41494345 	.word	0x41494345
 80187f8:	4949493f 	.word	0x4949493f
 80187fc:	37393b3d 	.word	0x37393b3d
 8018800:	49334949 	.word	0x49334949
 8018804:	49494949 	.word	0x49494949
 8018808:	2b2d2f49 	.word	0x2b2d2f49
 801880c:	49234927 	.word	0x49234927
 8018810:	4949      	.short	0x4949
 8018812:	21          	.byte	0x21
 8018813:	00          	.byte	0x00
 8018814:	481a      	ldr	r0, [pc, #104]	; (8018880 <_GetDevFunc+0xa0>)
 8018816:	4770      	bx	lr
 8018818:	481a      	ldr	r0, [pc, #104]	; (8018884 <_GetDevFunc+0xa4>)
 801881a:	4770      	bx	lr
 801881c:	481a      	ldr	r0, [pc, #104]	; (8018888 <_GetDevFunc+0xa8>)
 801881e:	4770      	bx	lr
 8018820:	481a      	ldr	r0, [pc, #104]	; (801888c <_GetDevFunc+0xac>)
 8018822:	4770      	bx	lr
 8018824:	481a      	ldr	r0, [pc, #104]	; (8018890 <_GetDevFunc+0xb0>)
 8018826:	4770      	bx	lr
 8018828:	481a      	ldr	r0, [pc, #104]	; (8018894 <_GetDevFunc+0xb4>)
 801882a:	4770      	bx	lr
 801882c:	481a      	ldr	r0, [pc, #104]	; (8018898 <_GetDevFunc+0xb8>)
 801882e:	4770      	bx	lr
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	689b      	ldr	r3, [r3, #8]
 8018834:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8018836:	4770      	bx	lr
 8018838:	6803      	ldr	r3, [r0, #0]
 801883a:	689b      	ldr	r3, [r3, #8]
 801883c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801883e:	4770      	bx	lr
 8018840:	4816      	ldr	r0, [pc, #88]	; (801889c <_GetDevFunc+0xbc>)
 8018842:	4770      	bx	lr
 8018844:	4816      	ldr	r0, [pc, #88]	; (80188a0 <_GetDevFunc+0xc0>)
 8018846:	4770      	bx	lr
 8018848:	6803      	ldr	r3, [r0, #0]
 801884a:	689b      	ldr	r3, [r3, #8]
 801884c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801884e:	4770      	bx	lr
 8018850:	6803      	ldr	r3, [r0, #0]
 8018852:	689b      	ldr	r3, [r3, #8]
 8018854:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018856:	4770      	bx	lr
 8018858:	4812      	ldr	r0, [pc, #72]	; (80188a4 <_GetDevFunc+0xc4>)
 801885a:	4770      	bx	lr
 801885c:	4812      	ldr	r0, [pc, #72]	; (80188a8 <_GetDevFunc+0xc8>)
 801885e:	4770      	bx	lr
 8018860:	4812      	ldr	r0, [pc, #72]	; (80188ac <_GetDevFunc+0xcc>)
 8018862:	4770      	bx	lr
 8018864:	4812      	ldr	r0, [pc, #72]	; (80188b0 <_GetDevFunc+0xd0>)
 8018866:	4770      	bx	lr
 8018868:	4812      	ldr	r0, [pc, #72]	; (80188b4 <_GetDevFunc+0xd4>)
 801886a:	4770      	bx	lr
 801886c:	4812      	ldr	r0, [pc, #72]	; (80188b8 <_GetDevFunc+0xd8>)
 801886e:	4770      	bx	lr
 8018870:	4812      	ldr	r0, [pc, #72]	; (80188bc <_GetDevFunc+0xdc>)
 8018872:	4770      	bx	lr
 8018874:	4812      	ldr	r0, [pc, #72]	; (80188c0 <_GetDevFunc+0xe0>)
 8018876:	4770      	bx	lr
 8018878:	4812      	ldr	r0, [pc, #72]	; (80188c4 <_GetDevFunc+0xe4>)
 801887a:	4770      	bx	lr
 801887c:	2000      	movs	r0, #0
 801887e:	4770      	bx	lr
 8018880:	08019505 	.word	0x08019505
 8018884:	080194c5 	.word	0x080194c5
 8018888:	08019419 	.word	0x08019419
 801888c:	080196cd 	.word	0x080196cd
 8018890:	08019485 	.word	0x08019485
 8018894:	08018719 	.word	0x08018719
 8018898:	080193ed 	.word	0x080193ed
 801889c:	08019449 	.word	0x08019449
 80188a0:	08019649 	.word	0x08019649
 80188a4:	080195d9 	.word	0x080195d9
 80188a8:	080188c9 	.word	0x080188c9
 80188ac:	080188e1 	.word	0x080188e1
 80188b0:	080188f9 	.word	0x080188f9
 80188b4:	08018911 	.word	0x08018911
 80188b8:	0801891d 	.word	0x0801891d
 80188bc:	080193bd 	.word	0x080193bd
 80188c0:	0801957d 	.word	0x0801957d
 80188c4:	08019545 	.word	0x08019545

080188c8 <_SetChroma>:
 80188c8:	b500      	push	{lr}
 80188ca:	b083      	sub	sp, #12
 80188cc:	6980      	ldr	r0, [r0, #24]
 80188ce:	9100      	str	r1, [sp, #0]
 80188d0:	210d      	movs	r1, #13
 80188d2:	9201      	str	r2, [sp, #4]
 80188d4:	466a      	mov	r2, sp
 80188d6:	f7eb fa87 	bl	8003de8 <LCD_X_DisplayDriver>
 80188da:	b003      	add	sp, #12
 80188dc:	f85d fb04 	ldr.w	pc, [sp], #4

080188e0 <_SetChromaMode>:
 80188e0:	b500      	push	{lr}
 80188e2:	b083      	sub	sp, #12
 80188e4:	6980      	ldr	r0, [r0, #24]
 80188e6:	aa02      	add	r2, sp, #8
 80188e8:	f842 1d04 	str.w	r1, [r2, #-4]!
 80188ec:	210c      	movs	r1, #12
 80188ee:	f7eb fa7b 	bl	8003de8 <LCD_X_DisplayDriver>
 80188f2:	b003      	add	sp, #12
 80188f4:	f85d fb04 	ldr.w	pc, [sp], #4

080188f8 <_SetAlphaMode>:
 80188f8:	b500      	push	{lr}
 80188fa:	b083      	sub	sp, #12
 80188fc:	6980      	ldr	r0, [r0, #24]
 80188fe:	aa02      	add	r2, sp, #8
 8018900:	f842 1d04 	str.w	r1, [r2, #-4]!
 8018904:	210b      	movs	r1, #11
 8018906:	f7eb fa6f 	bl	8003de8 <LCD_X_DisplayDriver>
 801890a:	b003      	add	sp, #12
 801890c:	f85d fb04 	ldr.w	pc, [sp], #4

08018910 <_Off>:
 8018910:	6980      	ldr	r0, [r0, #24]
 8018912:	2200      	movs	r2, #0
 8018914:	2106      	movs	r1, #6
 8018916:	f7eb ba67 	b.w	8003de8 <LCD_X_DisplayDriver>
 801891a:	bf00      	nop

0801891c <_On>:
 801891c:	6980      	ldr	r0, [r0, #24]
 801891e:	2200      	movs	r2, #0
 8018920:	2105      	movs	r1, #5
 8018922:	f7eb ba61 	b.w	8003de8 <LCD_X_DisplayDriver>
 8018926:	bf00      	nop

08018928 <_SetOrg>:
 8018928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801892c:	2300      	movs	r3, #0
 801892e:	b083      	sub	sp, #12
 8018930:	4604      	mov	r4, r0
 8018932:	6980      	ldr	r0, [r0, #24]
 8018934:	460f      	mov	r7, r1
 8018936:	4690      	mov	r8, r2
 8018938:	9301      	str	r3, [sp, #4]
 801893a:	9300      	str	r3, [sp, #0]
 801893c:	68a6      	ldr	r6, [r4, #8]
 801893e:	f7ff faed 	bl	8017f1c <LCD_GetMirrorXEx>
 8018942:	4605      	mov	r5, r0
 8018944:	69a0      	ldr	r0, [r4, #24]
 8018946:	f7ff faf9 	bl	8017f3c <LCD_GetMirrorYEx>
 801894a:	4681      	mov	r9, r0
 801894c:	69a0      	ldr	r0, [r4, #24]
 801894e:	f7ff fb05 	bl	8017f5c <LCD_GetSwapXYEx>
 8018952:	0080      	lsls	r0, r0, #2
 8018954:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 8018958:	4328      	orrs	r0, r5
 801895a:	2807      	cmp	r0, #7
 801895c:	d810      	bhi.n	8018980 <_SetOrg+0x58>
 801895e:	e8df f000 	tbb	[pc, r0]
 8018962:	1a17      	.short	0x1a17
 8018964:	3a362a22 	.word	0x3a362a22
 8018968:	0442      	.short	0x0442
 801896a:	69f2      	ldr	r2, [r6, #28]
 801896c:	6970      	ldr	r0, [r6, #20]
 801896e:	69b3      	ldr	r3, [r6, #24]
 8018970:	6931      	ldr	r1, [r6, #16]
 8018972:	1a12      	subs	r2, r2, r0
 8018974:	1a59      	subs	r1, r3, r1
 8018976:	ebc8 0202 	rsb	r2, r8, r2
 801897a:	1bcf      	subs	r7, r1, r7
 801897c:	e88d 0084 	stmia.w	sp, {r2, r7}
 8018980:	466a      	mov	r2, sp
 8018982:	2103      	movs	r1, #3
 8018984:	69a0      	ldr	r0, [r4, #24]
 8018986:	f7eb fa2f 	bl	8003de8 <LCD_X_DisplayDriver>
 801898a:	b003      	add	sp, #12
 801898c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018990:	e88d 0180 	stmia.w	sp, {r7, r8}
 8018994:	e7f4      	b.n	8018980 <_SetOrg+0x58>
 8018996:	69b3      	ldr	r3, [r6, #24]
 8018998:	6931      	ldr	r1, [r6, #16]
 801899a:	f8cd 8004 	str.w	r8, [sp, #4]
 801899e:	1a59      	subs	r1, r3, r1
 80189a0:	1bcf      	subs	r7, r1, r7
 80189a2:	9700      	str	r7, [sp, #0]
 80189a4:	e7ec      	b.n	8018980 <_SetOrg+0x58>
 80189a6:	69f3      	ldr	r3, [r6, #28]
 80189a8:	6972      	ldr	r2, [r6, #20]
 80189aa:	9700      	str	r7, [sp, #0]
 80189ac:	1a9a      	subs	r2, r3, r2
 80189ae:	ebc8 0202 	rsb	r2, r8, r2
 80189b2:	9201      	str	r2, [sp, #4]
 80189b4:	e7e4      	b.n	8018980 <_SetOrg+0x58>
 80189b6:	69b1      	ldr	r1, [r6, #24]
 80189b8:	6930      	ldr	r0, [r6, #16]
 80189ba:	69f3      	ldr	r3, [r6, #28]
 80189bc:	6972      	ldr	r2, [r6, #20]
 80189be:	1a09      	subs	r1, r1, r0
 80189c0:	1a9a      	subs	r2, r3, r2
 80189c2:	1bcf      	subs	r7, r1, r7
 80189c4:	ebc8 0202 	rsb	r2, r8, r2
 80189c8:	9700      	str	r7, [sp, #0]
 80189ca:	9201      	str	r2, [sp, #4]
 80189cc:	e7d8      	b.n	8018980 <_SetOrg+0x58>
 80189ce:	f8cd 8000 	str.w	r8, [sp]
 80189d2:	9701      	str	r7, [sp, #4]
 80189d4:	e7d4      	b.n	8018980 <_SetOrg+0x58>
 80189d6:	69f3      	ldr	r3, [r6, #28]
 80189d8:	6972      	ldr	r2, [r6, #20]
 80189da:	9701      	str	r7, [sp, #4]
 80189dc:	1a9a      	subs	r2, r3, r2
 80189de:	ebc8 0202 	rsb	r2, r8, r2
 80189e2:	9200      	str	r2, [sp, #0]
 80189e4:	e7cc      	b.n	8018980 <_SetOrg+0x58>
 80189e6:	69b3      	ldr	r3, [r6, #24]
 80189e8:	6931      	ldr	r1, [r6, #16]
 80189ea:	f8cd 8000 	str.w	r8, [sp]
 80189ee:	1a59      	subs	r1, r3, r1
 80189f0:	1bcf      	subs	r7, r1, r7
 80189f2:	9701      	str	r7, [sp, #4]
 80189f4:	e7c4      	b.n	8018980 <_SetOrg+0x58>
 80189f6:	bf00      	nop

080189f8 <_FillRect>:
 80189f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189fc:	6887      	ldr	r7, [r0, #8]
 80189fe:	b087      	sub	sp, #28
 8018a00:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8018a02:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018a04:	b156      	cbz	r6, 8018a1c <_FillRect+0x24>
 8018a06:	4d99      	ldr	r5, [pc, #612]	; (8018c6c <_FillRect+0x274>)
 8018a08:	6980      	ldr	r0, [r0, #24]
 8018a0a:	682d      	ldr	r5, [r5, #0]
 8018a0c:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8018a0e:	682d      	ldr	r5, [r5, #0]
 8018a10:	e88d 0030 	stmia.w	sp, {r4, r5}
 8018a14:	47b0      	blx	r6
 8018a16:	b007      	add	sp, #28
 8018a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a1c:	469c      	mov	ip, r3
 8018a1e:	6a3b      	ldr	r3, [r7, #32]
 8018a20:	460d      	mov	r5, r1
 8018a22:	4992      	ldr	r1, [pc, #584]	; (8018c6c <_FillRect+0x274>)
 8018a24:	105b      	asrs	r3, r3, #1
 8018a26:	4696      	mov	lr, r2
 8018a28:	1aa2      	subs	r2, r4, r2
 8018a2a:	ebc5 0c0c 	rsb	ip, r5, ip
 8018a2e:	4618      	mov	r0, r3
 8018a30:	680b      	ldr	r3, [r1, #0]
 8018a32:	4614      	mov	r4, r2
 8018a34:	9203      	str	r2, [sp, #12]
 8018a36:	7c19      	ldrb	r1, [r3, #16]
 8018a38:	086a      	lsrs	r2, r5, #1
 8018a3a:	1c66      	adds	r6, r4, #1
 8018a3c:	683c      	ldr	r4, [r7, #0]
 8018a3e:	fb00 2e0e 	mla	lr, r0, lr, r2
 8018a42:	07c9      	lsls	r1, r1, #31
 8018a44:	9002      	str	r0, [sp, #8]
 8018a46:	4630      	mov	r0, r6
 8018a48:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 8018a4c:	f10c 0401 	add.w	r4, ip, #1
 8018a50:	d550      	bpl.n	8018af4 <_FillRect+0xfc>
 8018a52:	f015 0701 	ands.w	r7, r5, #1
 8018a56:	d012      	beq.n	8018a7e <_FillRect+0x86>
 8018a58:	2e00      	cmp	r6, #0
 8018a5a:	f000 8102 	beq.w	8018c62 <_FillRect+0x26a>
 8018a5e:	9902      	ldr	r1, [sp, #8]
 8018a60:	4635      	mov	r5, r6
 8018a62:	4613      	mov	r3, r2
 8018a64:	008f      	lsls	r7, r1, #2
 8018a66:	681c      	ldr	r4, [r3, #0]
 8018a68:	3d01      	subs	r5, #1
 8018a6a:	4981      	ldr	r1, [pc, #516]	; (8018c70 <_FillRect+0x278>)
 8018a6c:	ea81 0104 	eor.w	r1, r1, r4
 8018a70:	6019      	str	r1, [r3, #0]
 8018a72:	443b      	add	r3, r7
 8018a74:	d1f7      	bne.n	8018a66 <_FillRect+0x6e>
 8018a76:	fb07 2706 	mla	r7, r7, r6, r2
 8018a7a:	3204      	adds	r2, #4
 8018a7c:	4664      	mov	r4, ip
 8018a7e:	2c01      	cmp	r4, #1
 8018a80:	dd28      	ble.n	8018ad4 <_FillRect+0xdc>
 8018a82:	2e00      	cmp	r6, #0
 8018a84:	f000 80e5 	beq.w	8018c52 <_FillRect+0x25a>
 8018a88:	9b02      	ldr	r3, [sp, #8]
 8018a8a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8018a8e:	9b03      	ldr	r3, [sp, #12]
 8018a90:	fb0c f903 	mul.w	r9, ip, r3
 8018a94:	f1cc 0800 	rsb	r8, ip, #0
 8018a98:	eb02 0709 	add.w	r7, r2, r9
 8018a9c:	463b      	mov	r3, r7
 8018a9e:	4637      	mov	r7, r6
 8018aa0:	469e      	mov	lr, r3
 8018aa2:	3f01      	subs	r7, #1
 8018aa4:	4675      	mov	r5, lr
 8018aa6:	4621      	mov	r1, r4
 8018aa8:	682b      	ldr	r3, [r5, #0]
 8018aaa:	3902      	subs	r1, #2
 8018aac:	43db      	mvns	r3, r3
 8018aae:	2901      	cmp	r1, #1
 8018ab0:	f845 3b04 	str.w	r3, [r5], #4
 8018ab4:	dcf8      	bgt.n	8018aa8 <_FillRect+0xb0>
 8018ab6:	ebcc 0e0e 	rsb	lr, ip, lr
 8018aba:	2f00      	cmp	r7, #0
 8018abc:	d1f1      	bne.n	8018aa2 <_FillRect+0xaa>
 8018abe:	1ea3      	subs	r3, r4, #2
 8018ac0:	9903      	ldr	r1, [sp, #12]
 8018ac2:	085b      	lsrs	r3, r3, #1
 8018ac4:	fb08 9801 	mla	r8, r8, r1, r9
 8018ac8:	3301      	adds	r3, #1
 8018aca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8018ace:	441a      	add	r2, r3
 8018ad0:	f004 0401 	and.w	r4, r4, #1
 8018ad4:	2c01      	cmp	r4, #1
 8018ad6:	d19e      	bne.n	8018a16 <_FillRect+0x1e>
 8018ad8:	2e00      	cmp	r6, #0
 8018ada:	d09c      	beq.n	8018a16 <_FillRect+0x1e>
 8018adc:	9b02      	ldr	r3, [sp, #8]
 8018ade:	009c      	lsls	r4, r3, #2
 8018ae0:	6811      	ldr	r1, [r2, #0]
 8018ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ae6:	3801      	subs	r0, #1
 8018ae8:	ea83 0301 	eor.w	r3, r3, r1
 8018aec:	6013      	str	r3, [r2, #0]
 8018aee:	4422      	add	r2, r4
 8018af0:	d1f6      	bne.n	8018ae0 <_FillRect+0xe8>
 8018af2:	e790      	b.n	8018a16 <_FillRect+0x1e>
 8018af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018af6:	f015 0501 	ands.w	r5, r5, #1
 8018afa:	f8d3 e000 	ldr.w	lr, [r3]
 8018afe:	d014      	beq.n	8018b2a <_FillRect+0x132>
 8018b00:	2e00      	cmp	r6, #0
 8018b02:	f000 80aa 	beq.w	8018c5a <_FillRect+0x262>
 8018b06:	9b02      	ldr	r3, [sp, #8]
 8018b08:	4637      	mov	r7, r6
 8018b0a:	4614      	mov	r4, r2
 8018b0c:	0099      	lsls	r1, r3, #2
 8018b0e:	ea4f 430e 	mov.w	r3, lr, lsl #16
 8018b12:	8825      	ldrh	r5, [r4, #0]
 8018b14:	3f01      	subs	r7, #1
 8018b16:	ea45 0503 	orr.w	r5, r5, r3
 8018b1a:	6025      	str	r5, [r4, #0]
 8018b1c:	440c      	add	r4, r1
 8018b1e:	d1f8      	bne.n	8018b12 <_FillRect+0x11a>
 8018b20:	fb01 2506 	mla	r5, r1, r6, r2
 8018b24:	3204      	adds	r2, #4
 8018b26:	4664      	mov	r4, ip
 8018b28:	e001      	b.n	8018b2e <_FillRect+0x136>
 8018b2a:	ea4f 430e 	mov.w	r3, lr, lsl #16
 8018b2e:	2c0f      	cmp	r4, #15
 8018b30:	4473      	add	r3, lr
 8018b32:	dd39      	ble.n	8018ba8 <_FillRect+0x1b0>
 8018b34:	f1a4 0810 	sub.w	r8, r4, #16
 8018b38:	2e00      	cmp	r6, #0
 8018b3a:	f000 8094 	beq.w	8018c66 <_FillRect+0x26e>
 8018b3e:	9902      	ldr	r1, [sp, #8]
 8018b40:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8018b44:	9903      	ldr	r1, [sp, #12]
 8018b46:	fb01 fa09 	mul.w	sl, r1, r9
 8018b4a:	f1c9 0b00 	rsb	fp, r9, #0
 8018b4e:	f10a 0720 	add.w	r7, sl, #32
 8018b52:	4417      	add	r7, r2
 8018b54:	4639      	mov	r1, r7
 8018b56:	4637      	mov	r7, r6
 8018b58:	468c      	mov	ip, r1
 8018b5a:	3f01      	subs	r7, #1
 8018b5c:	4661      	mov	r1, ip
 8018b5e:	4645      	mov	r5, r8
 8018b60:	3d10      	subs	r5, #16
 8018b62:	f841 3c20 	str.w	r3, [r1, #-32]
 8018b66:	f841 3c1c 	str.w	r3, [r1, #-28]
 8018b6a:	f101 0120 	add.w	r1, r1, #32
 8018b6e:	f841 3c38 	str.w	r3, [r1, #-56]
 8018b72:	f841 3c34 	str.w	r3, [r1, #-52]
 8018b76:	f841 3c30 	str.w	r3, [r1, #-48]
 8018b7a:	f841 3c2c 	str.w	r3, [r1, #-44]
 8018b7e:	f841 3c28 	str.w	r3, [r1, #-40]
 8018b82:	f841 3c24 	str.w	r3, [r1, #-36]
 8018b86:	d5eb      	bpl.n	8018b60 <_FillRect+0x168>
 8018b88:	ebc9 0c0c 	rsb	ip, r9, ip
 8018b8c:	2f00      	cmp	r7, #0
 8018b8e:	d1e4      	bne.n	8018b5a <_FillRect+0x162>
 8018b90:	ea4f 1118 	mov.w	r1, r8, lsr #4
 8018b94:	9d03      	ldr	r5, [sp, #12]
 8018b96:	3101      	adds	r1, #1
 8018b98:	fb05 aa0b 	mla	sl, r5, fp, sl
 8018b9c:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 8018ba0:	440a      	add	r2, r1
 8018ba2:	f004 040f 	and.w	r4, r4, #15
 8018ba6:	4615      	mov	r5, r2
 8018ba8:	2c01      	cmp	r4, #1
 8018baa:	dd3f      	ble.n	8018c2c <_FillRect+0x234>
 8018bac:	2e00      	cmp	r6, #0
 8018bae:	d052      	beq.n	8018c56 <_FillRect+0x25e>
 8018bb0:	9902      	ldr	r1, [sp, #8]
 8018bb2:	1ea7      	subs	r7, r4, #2
 8018bb4:	f1a4 0b04 	sub.w	fp, r4, #4
 8018bb8:	f1a4 0a06 	sub.w	sl, r4, #6
 8018bbc:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8018bc0:	9903      	ldr	r1, [sp, #12]
 8018bc2:	f1a4 0908 	sub.w	r9, r4, #8
 8018bc6:	f1a4 080a 	sub.w	r8, r4, #10
 8018bca:	fb01 f10c 	mul.w	r1, r1, ip
 8018bce:	f1cc 0500 	rsb	r5, ip, #0
 8018bd2:	9105      	str	r1, [sp, #20]
 8018bd4:	1851      	adds	r1, r2, r1
 8018bd6:	9504      	str	r5, [sp, #16]
 8018bd8:	4635      	mov	r5, r6
 8018bda:	2f01      	cmp	r7, #1
 8018bdc:	f105 35ff 	add.w	r5, r5, #4294967295
 8018be0:	600b      	str	r3, [r1, #0]
 8018be2:	dd13      	ble.n	8018c0c <_FillRect+0x214>
 8018be4:	f1bb 0f01 	cmp.w	fp, #1
 8018be8:	604b      	str	r3, [r1, #4]
 8018bea:	dd0f      	ble.n	8018c0c <_FillRect+0x214>
 8018bec:	f1ba 0f01 	cmp.w	sl, #1
 8018bf0:	608b      	str	r3, [r1, #8]
 8018bf2:	dd0b      	ble.n	8018c0c <_FillRect+0x214>
 8018bf4:	f1b9 0f01 	cmp.w	r9, #1
 8018bf8:	60cb      	str	r3, [r1, #12]
 8018bfa:	dd07      	ble.n	8018c0c <_FillRect+0x214>
 8018bfc:	f1b8 0f01 	cmp.w	r8, #1
 8018c00:	610b      	str	r3, [r1, #16]
 8018c02:	dd03      	ble.n	8018c0c <_FillRect+0x214>
 8018c04:	2c0d      	cmp	r4, #13
 8018c06:	614b      	str	r3, [r1, #20]
 8018c08:	dd00      	ble.n	8018c0c <_FillRect+0x214>
 8018c0a:	618b      	str	r3, [r1, #24]
 8018c0c:	ebcc 0101 	rsb	r1, ip, r1
 8018c10:	2d00      	cmp	r5, #0
 8018c12:	d1e2      	bne.n	8018bda <_FillRect+0x1e2>
 8018c14:	087b      	lsrs	r3, r7, #1
 8018c16:	9904      	ldr	r1, [sp, #16]
 8018c18:	9d03      	ldr	r5, [sp, #12]
 8018c1a:	9f05      	ldr	r7, [sp, #20]
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	fb05 7101 	mla	r1, r5, r1, r7
 8018c22:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018c26:	441a      	add	r2, r3
 8018c28:	f004 0401 	and.w	r4, r4, #1
 8018c2c:	2c01      	cmp	r4, #1
 8018c2e:	f47f aef2 	bne.w	8018a16 <_FillRect+0x1e>
 8018c32:	2e00      	cmp	r6, #0
 8018c34:	f43f aeef 	beq.w	8018a16 <_FillRect+0x1e>
 8018c38:	9b02      	ldr	r3, [sp, #8]
 8018c3a:	0099      	lsls	r1, r3, #2
 8018c3c:	6814      	ldr	r4, [r2, #0]
 8018c3e:	3801      	subs	r0, #1
 8018c40:	4b0b      	ldr	r3, [pc, #44]	; (8018c70 <_FillRect+0x278>)
 8018c42:	ea03 0304 	and.w	r3, r3, r4
 8018c46:	ea4e 0303 	orr.w	r3, lr, r3
 8018c4a:	6013      	str	r3, [r2, #0]
 8018c4c:	440a      	add	r2, r1
 8018c4e:	d1f5      	bne.n	8018c3c <_FillRect+0x244>
 8018c50:	e6e1      	b.n	8018a16 <_FillRect+0x1e>
 8018c52:	463a      	mov	r2, r7
 8018c54:	e73c      	b.n	8018ad0 <_FillRect+0xd8>
 8018c56:	462a      	mov	r2, r5
 8018c58:	e7e6      	b.n	8018c28 <_FillRect+0x230>
 8018c5a:	4615      	mov	r5, r2
 8018c5c:	ea4f 430e 	mov.w	r3, lr, lsl #16
 8018c60:	e760      	b.n	8018b24 <_FillRect+0x12c>
 8018c62:	4617      	mov	r7, r2
 8018c64:	e709      	b.n	8018a7a <_FillRect+0x82>
 8018c66:	462a      	mov	r2, r5
 8018c68:	e79b      	b.n	8018ba2 <_FillRect+0x1aa>
 8018c6a:	bf00      	nop
 8018c6c:	20000018 	.word	0x20000018
 8018c70:	ffff0000 	.word	0xffff0000

08018c74 <_DrawHLine>:
 8018c74:	b500      	push	{lr}
 8018c76:	b083      	sub	sp, #12
 8018c78:	9200      	str	r2, [sp, #0]
 8018c7a:	f7ff febd 	bl	80189f8 <_FillRect>
 8018c7e:	b003      	add	sp, #12
 8018c80:	f85d fb04 	ldr.w	pc, [sp], #4

08018c84 <_DrawVLine>:
 8018c84:	b500      	push	{lr}
 8018c86:	b083      	sub	sp, #12
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	f7ff feb4 	bl	80189f8 <_FillRect>
 8018c90:	b003      	add	sp, #12
 8018c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8018c96:	bf00      	nop

08018c98 <_DrawBitmap>:
 8018c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	b08b      	sub	sp, #44	; 0x2c
 8018c9e:	460c      	mov	r4, r1
 8018ca0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018ca2:	9002      	str	r0, [sp, #8]
 8018ca4:	9303      	str	r3, [sp, #12]
 8018ca6:	1e69      	subs	r1, r5, #1
 8018ca8:	6883      	ldr	r3, [r0, #8]
 8018caa:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018cac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018cae:	9000      	str	r0, [sp, #0]
 8018cb0:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018cb2:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8018cb6:	9001      	str	r0, [sp, #4]
 8018cb8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8018cba:	290f      	cmp	r1, #15
 8018cbc:	d837      	bhi.n	8018d2e <_DrawBitmap+0x96>
 8018cbe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8018cc2:	0039      	.short	0x0039
 8018cc4:	003600ab 	.word	0x003600ab
 8018cc8:	003600f7 	.word	0x003600f7
 8018ccc:	00360036 	.word	0x00360036
 8018cd0:	00360144 	.word	0x00360144
 8018cd4:	00360036 	.word	0x00360036
 8018cd8:	00360036 	.word	0x00360036
 8018cdc:	00360036 	.word	0x00360036
 8018ce0:	0010      	.short	0x0010
 8018ce2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8018ce4:	b12d      	cbz	r5, 8018cf2 <_DrawBitmap+0x5a>
 8018ce6:	49be      	ldr	r1, [pc, #760]	; (8018fe0 <_DrawBitmap+0x348>)
 8018ce8:	6809      	ldr	r1, [r1, #0]
 8018cea:	7c09      	ldrb	r1, [r1, #16]
 8018cec:	07c9      	lsls	r1, r1, #31
 8018cee:	f140 8354 	bpl.w	801939a <_DrawBitmap+0x702>
 8018cf2:	2e00      	cmp	r6, #0
 8018cf4:	dd1b      	ble.n	8018d2e <_DrawBitmap+0x96>
 8018cf6:	4615      	mov	r5, r2
 8018cf8:	9a03      	ldr	r2, [sp, #12]
 8018cfa:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8018fe4 <_DrawBitmap+0x34c>
 8018cfe:	0057      	lsls	r7, r2, #1
 8018d00:	442e      	add	r6, r5
 8018d02:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018d06:	f8dd 9000 	ldr.w	r9, [sp]
 8018d0a:	e001      	b.n	8018d10 <_DrawBitmap+0x78>
 8018d0c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8018d10:	6a18      	ldr	r0, [r3, #32]
 8018d12:	4641      	mov	r1, r8
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	463a      	mov	r2, r7
 8018d18:	fb00 4005 	mla	r0, r0, r5, r4
 8018d1c:	3501      	adds	r5, #1
 8018d1e:	44c8      	add	r8, r9
 8018d20:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8018d24:	f8da 3000 	ldr.w	r3, [sl]
 8018d28:	4798      	blx	r3
 8018d2a:	42b5      	cmp	r5, r6
 8018d2c:	d1ee      	bne.n	8018d0c <_DrawBitmap+0x74>
 8018d2e:	b00b      	add	sp, #44	; 0x2c
 8018d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d34:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8018d36:	b12f      	cbz	r7, 8018d44 <_DrawBitmap+0xac>
 8018d38:	49a9      	ldr	r1, [pc, #676]	; (8018fe0 <_DrawBitmap+0x348>)
 8018d3a:	6809      	ldr	r1, [r1, #0]
 8018d3c:	7c09      	ldrb	r1, [r1, #16]
 8018d3e:	07c9      	lsls	r1, r1, #31
 8018d40:	f140 831a 	bpl.w	8019378 <_DrawBitmap+0x6e0>
 8018d44:	2e00      	cmp	r6, #0
 8018d46:	ddf2      	ble.n	8018d2e <_DrawBitmap+0x96>
 8018d48:	9901      	ldr	r1, [sp, #4]
 8018d4a:	4699      	mov	r9, r3
 8018d4c:	4613      	mov	r3, r2
 8018d4e:	18b2      	adds	r2, r6, r2
 8018d50:	1860      	adds	r0, r4, r1
 8018d52:	f1c1 0108 	rsb	r1, r1, #8
 8018d56:	9204      	str	r2, [sp, #16]
 8018d58:	469a      	mov	sl, r3
 8018d5a:	4aa1      	ldr	r2, [pc, #644]	; (8018fe0 <_DrawBitmap+0x348>)
 8018d5c:	464e      	mov	r6, r9
 8018d5e:	9108      	str	r1, [sp, #32]
 8018d60:	4629      	mov	r1, r5
 8018d62:	f8df b284 	ldr.w	fp, [pc, #644]	; 8018fe8 <_DrawBitmap+0x350>
 8018d66:	4613      	mov	r3, r2
 8018d68:	9005      	str	r0, [sp, #20]
 8018d6a:	9206      	str	r2, [sp, #24]
 8018d6c:	9507      	str	r5, [sp, #28]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	f898 2000 	ldrb.w	r2, [r8]
 8018d74:	7c1b      	ldrb	r3, [r3, #16]
 8018d76:	f81b 4002 	ldrb.w	r4, [fp, r2]
 8018d7a:	f003 0303 	and.w	r3, r3, #3
 8018d7e:	9a01      	ldr	r2, [sp, #4]
 8018d80:	6a35      	ldr	r5, [r6, #32]
 8018d82:	4114      	asrs	r4, r2
 8018d84:	2b02      	cmp	r3, #2
 8018d86:	9a05      	ldr	r2, [sp, #20]
 8018d88:	6848      	ldr	r0, [r1, #4]
 8018d8a:	fb05 250a 	mla	r5, r5, sl, r2
 8018d8e:	f000 81b4 	beq.w	80190fa <_DrawBitmap+0x462>
 8018d92:	2b03      	cmp	r3, #3
 8018d94:	f000 8191 	beq.w	80190ba <_DrawBitmap+0x422>
 8018d98:	2b01      	cmp	r3, #1
 8018d9a:	f000 818e 	beq.w	80190ba <_DrawBitmap+0x422>
 8018d9e:	6833      	ldr	r3, [r6, #0]
 8018da0:	462a      	mov	r2, r5
 8018da2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8018da6:	46c1      	mov	r9, r8
 8018da8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018dac:	469a      	mov	sl, r3
 8018dae:	4665      	mov	r5, ip
 8018db0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018db4:	680e      	ldr	r6, [r1, #0]
 8018db6:	4694      	mov	ip, r2
 8018db8:	4575      	cmp	r5, lr
 8018dba:	462f      	mov	r7, r5
 8018dbc:	eb0a 024c 	add.w	r2, sl, ip, lsl #1
 8018dc0:	bf28      	it	cs
 8018dc2:	4677      	movcs	r7, lr
 8018dc4:	463b      	mov	r3, r7
 8018dc6:	f014 0f01 	tst.w	r4, #1
 8018dca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018dce:	bf0c      	ite	eq
 8018dd0:	4631      	moveq	r1, r6
 8018dd2:	4601      	movne	r1, r0
 8018dd4:	3b01      	subs	r3, #1
 8018dd6:	f822 1b02 	strh.w	r1, [r2], #2
 8018dda:	d1f4      	bne.n	8018dc6 <_DrawBitmap+0x12e>
 8018ddc:	ebbe 0e07 	subs.w	lr, lr, r7
 8018de0:	44bc      	add	ip, r7
 8018de2:	eba5 0507 	sub.w	r5, r5, r7
 8018de6:	d107      	bne.n	8018df8 <_DrawBitmap+0x160>
 8018de8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018dec:	f04f 0e08 	mov.w	lr, #8
 8018df0:	f109 0901 	add.w	r9, r9, #1
 8018df4:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8018df8:	2d00      	cmp	r5, #0
 8018dfa:	d1dd      	bne.n	8018db8 <_DrawBitmap+0x120>
 8018dfc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8018e00:	9b00      	ldr	r3, [sp, #0]
 8018e02:	f10a 0a01 	add.w	sl, sl, #1
 8018e06:	4498      	add	r8, r3
 8018e08:	9b04      	ldr	r3, [sp, #16]
 8018e0a:	459a      	cmp	sl, r3
 8018e0c:	d08f      	beq.n	8018d2e <_DrawBitmap+0x96>
 8018e0e:	9b02      	ldr	r3, [sp, #8]
 8018e10:	9907      	ldr	r1, [sp, #28]
 8018e12:	689e      	ldr	r6, [r3, #8]
 8018e14:	9b06      	ldr	r3, [sp, #24]
 8018e16:	e7aa      	b.n	8018d6e <_DrawBitmap+0xd6>
 8018e18:	2e00      	cmp	r6, #0
 8018e1a:	dd88      	ble.n	8018d2e <_DrawBitmap+0x96>
 8018e1c:	9901      	ldr	r1, [sp, #4]
 8018e1e:	eb06 0b02 	add.w	fp, r6, r2
 8018e22:	486f      	ldr	r0, [pc, #444]	; (8018fe0 <_DrawBitmap+0x348>)
 8018e24:	1861      	adds	r1, r4, r1
 8018e26:	9f03      	ldr	r7, [sp, #12]
 8018e28:	6800      	ldr	r0, [r0, #0]
 8018e2a:	460c      	mov	r4, r1
 8018e2c:	9104      	str	r1, [sp, #16]
 8018e2e:	21c0      	movs	r1, #192	; 0xc0
 8018e30:	9002      	str	r0, [sp, #8]
 8018e32:	4427      	add	r7, r4
 8018e34:	9802      	ldr	r0, [sp, #8]
 8018e36:	7c04      	ldrb	r4, [r0, #16]
 8018e38:	f898 0000 	ldrb.w	r0, [r8]
 8018e3c:	f014 0403 	ands.w	r4, r4, #3
 8018e40:	f000 809f 	beq.w	8018f82 <_DrawBitmap+0x2ea>
 8018e44:	2c02      	cmp	r4, #2
 8018e46:	d12d      	bne.n	8018ea4 <_DrawBitmap+0x20c>
 8018e48:	2d00      	cmp	r5, #0
 8018e4a:	f000 816e 	beq.w	801912a <_DrawBitmap+0x492>
 8018e4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018e52:	46c2      	mov	sl, r8
 8018e54:	f8dd c010 	ldr.w	ip, [sp, #16]
 8018e58:	4691      	mov	r9, r2
 8018e5a:	e001      	b.n	8018e60 <_DrawBitmap+0x1c8>
 8018e5c:	4567      	cmp	r7, ip
 8018e5e:	d020      	beq.n	8018ea2 <_DrawBitmap+0x20a>
 8018e60:	f1ce 0603 	rsb	r6, lr, #3
 8018e64:	f10e 0e01 	add.w	lr, lr, #1
 8018e68:	0076      	lsls	r6, r6, #1
 8018e6a:	f1c6 0406 	rsb	r4, r6, #6
 8018e6e:	fa41 f404 	asr.w	r4, r1, r4
 8018e72:	4004      	ands	r4, r0
 8018e74:	40f4      	lsrs	r4, r6
 8018e76:	d007      	beq.n	8018e88 <_DrawBitmap+0x1f0>
 8018e78:	6a1e      	ldr	r6, [r3, #32]
 8018e7a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8018e7e:	fb06 c609 	mla	r6, r6, r9, ip
 8018e82:	681a      	ldr	r2, [r3, #0]
 8018e84:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 8018e88:	f1be 0f04 	cmp.w	lr, #4
 8018e8c:	f10c 0c01 	add.w	ip, ip, #1
 8018e90:	d1e4      	bne.n	8018e5c <_DrawBitmap+0x1c4>
 8018e92:	4567      	cmp	r7, ip
 8018e94:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8018e98:	f04f 0e00 	mov.w	lr, #0
 8018e9c:	f10a 0a01 	add.w	sl, sl, #1
 8018ea0:	d1de      	bne.n	8018e60 <_DrawBitmap+0x1c8>
 8018ea2:	464a      	mov	r2, r9
 8018ea4:	3201      	adds	r2, #1
 8018ea6:	9800      	ldr	r0, [sp, #0]
 8018ea8:	455a      	cmp	r2, fp
 8018eaa:	4480      	add	r8, r0
 8018eac:	d1c2      	bne.n	8018e34 <_DrawBitmap+0x19c>
 8018eae:	e73e      	b.n	8018d2e <_DrawBitmap+0x96>
 8018eb0:	2e00      	cmp	r6, #0
 8018eb2:	f77f af3c 	ble.w	8018d2e <_DrawBitmap+0x96>
 8018eb6:	9901      	ldr	r1, [sp, #4]
 8018eb8:	eb06 0b02 	add.w	fp, r6, r2
 8018ebc:	4848      	ldr	r0, [pc, #288]	; (8018fe0 <_DrawBitmap+0x348>)
 8018ebe:	1861      	adds	r1, r4, r1
 8018ec0:	9f03      	ldr	r7, [sp, #12]
 8018ec2:	6800      	ldr	r0, [r0, #0]
 8018ec4:	460c      	mov	r4, r1
 8018ec6:	9104      	str	r1, [sp, #16]
 8018ec8:	21f0      	movs	r1, #240	; 0xf0
 8018eca:	9002      	str	r0, [sp, #8]
 8018ecc:	4427      	add	r7, r4
 8018ece:	9802      	ldr	r0, [sp, #8]
 8018ed0:	7c04      	ldrb	r4, [r0, #16]
 8018ed2:	f898 0000 	ldrb.w	r0, [r8]
 8018ed6:	f014 0403 	ands.w	r4, r4, #3
 8018eda:	f000 80a3 	beq.w	8019024 <_DrawBitmap+0x38c>
 8018ede:	2c02      	cmp	r4, #2
 8018ee0:	d12d      	bne.n	8018f3e <_DrawBitmap+0x2a6>
 8018ee2:	2d00      	cmp	r5, #0
 8018ee4:	f000 814a 	beq.w	801917c <_DrawBitmap+0x4e4>
 8018ee8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018eec:	46c2      	mov	sl, r8
 8018eee:	f8dd c010 	ldr.w	ip, [sp, #16]
 8018ef2:	4691      	mov	r9, r2
 8018ef4:	e001      	b.n	8018efa <_DrawBitmap+0x262>
 8018ef6:	4567      	cmp	r7, ip
 8018ef8:	d020      	beq.n	8018f3c <_DrawBitmap+0x2a4>
 8018efa:	f1ce 0601 	rsb	r6, lr, #1
 8018efe:	f10e 0e01 	add.w	lr, lr, #1
 8018f02:	00b6      	lsls	r6, r6, #2
 8018f04:	f1c6 0404 	rsb	r4, r6, #4
 8018f08:	fa41 f404 	asr.w	r4, r1, r4
 8018f0c:	4004      	ands	r4, r0
 8018f0e:	40f4      	lsrs	r4, r6
 8018f10:	d007      	beq.n	8018f22 <_DrawBitmap+0x28a>
 8018f12:	6a1e      	ldr	r6, [r3, #32]
 8018f14:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8018f18:	fb06 c609 	mla	r6, r6, r9, ip
 8018f1c:	681a      	ldr	r2, [r3, #0]
 8018f1e:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 8018f22:	f1be 0f02 	cmp.w	lr, #2
 8018f26:	f10c 0c01 	add.w	ip, ip, #1
 8018f2a:	d1e4      	bne.n	8018ef6 <_DrawBitmap+0x25e>
 8018f2c:	4567      	cmp	r7, ip
 8018f2e:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8018f32:	f04f 0e00 	mov.w	lr, #0
 8018f36:	f10a 0a01 	add.w	sl, sl, #1
 8018f3a:	d1de      	bne.n	8018efa <_DrawBitmap+0x262>
 8018f3c:	464a      	mov	r2, r9
 8018f3e:	3201      	adds	r2, #1
 8018f40:	9800      	ldr	r0, [sp, #0]
 8018f42:	455a      	cmp	r2, fp
 8018f44:	4480      	add	r8, r0
 8018f46:	d1c2      	bne.n	8018ece <_DrawBitmap+0x236>
 8018f48:	e6f1      	b.n	8018d2e <_DrawBitmap+0x96>
 8018f4a:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8018f4c:	2f00      	cmp	r7, #0
 8018f4e:	f000 813e 	beq.w	80191ce <_DrawBitmap+0x536>
 8018f52:	4923      	ldr	r1, [pc, #140]	; (8018fe0 <_DrawBitmap+0x348>)
 8018f54:	6809      	ldr	r1, [r1, #0]
 8018f56:	7c09      	ldrb	r1, [r1, #16]
 8018f58:	0788      	lsls	r0, r1, #30
 8018f5a:	f100 8138 	bmi.w	80191ce <_DrawBitmap+0x536>
 8018f5e:	2d00      	cmp	r5, #0
 8018f60:	f000 8135 	beq.w	80191ce <_DrawBitmap+0x536>
 8018f64:	9b02      	ldr	r3, [sp, #8]
 8018f66:	46bc      	mov	ip, r7
 8018f68:	9900      	ldr	r1, [sp, #0]
 8018f6a:	6998      	ldr	r0, [r3, #24]
 8018f6c:	4643      	mov	r3, r8
 8018f6e:	9116      	str	r1, [sp, #88]	; 0x58
 8018f70:	4621      	mov	r1, r4
 8018f72:	9c03      	ldr	r4, [sp, #12]
 8018f74:	9517      	str	r5, [sp, #92]	; 0x5c
 8018f76:	9615      	str	r6, [sp, #84]	; 0x54
 8018f78:	9414      	str	r4, [sp, #80]	; 0x50
 8018f7a:	b00b      	add	sp, #44	; 0x2c
 8018f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f80:	4760      	bx	ip
 8018f82:	6a1c      	ldr	r4, [r3, #32]
 8018f84:	46c1      	mov	r9, r8
 8018f86:	681e      	ldr	r6, [r3, #0]
 8018f88:	fb04 fa02 	mul.w	sl, r4, r2
 8018f8c:	9c04      	ldr	r4, [sp, #16]
 8018f8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018f92:	eb04 0c0a 	add.w	ip, r4, sl
 8018f96:	44ba      	add	sl, r7
 8018f98:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8018f9c:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 8018fa0:	b91d      	cbnz	r5, 8018faa <_DrawBitmap+0x312>
 8018fa2:	e02c      	b.n	8018ffe <_DrawBitmap+0x366>
 8018fa4:	45d4      	cmp	ip, sl
 8018fa6:	f43f af7d 	beq.w	8018ea4 <_DrawBitmap+0x20c>
 8018faa:	f1ce 0403 	rsb	r4, lr, #3
 8018fae:	f10e 0e01 	add.w	lr, lr, #1
 8018fb2:	0066      	lsls	r6, r4, #1
 8018fb4:	f1be 0f04 	cmp.w	lr, #4
 8018fb8:	f1c6 0406 	rsb	r4, r6, #6
 8018fbc:	fa41 f404 	asr.w	r4, r1, r4
 8018fc0:	ea04 0400 	and.w	r4, r4, r0
 8018fc4:	fa24 f406 	lsr.w	r4, r4, r6
 8018fc8:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8018fcc:	f82c 4b02 	strh.w	r4, [ip], #2
 8018fd0:	d1e8      	bne.n	8018fa4 <_DrawBitmap+0x30c>
 8018fd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018fd6:	f04f 0e00 	mov.w	lr, #0
 8018fda:	f109 0901 	add.w	r9, r9, #1
 8018fde:	e7e1      	b.n	8018fa4 <_DrawBitmap+0x30c>
 8018fe0:	20000018 	.word	0x20000018
 8018fe4:	2000004c 	.word	0x2000004c
 8018fe8:	0802a838 	.word	0x0802a838
 8018fec:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018ff0:	f04f 0e00 	mov.w	lr, #0
 8018ff4:	f109 0901 	add.w	r9, r9, #1
 8018ff8:	45d4      	cmp	ip, sl
 8018ffa:	f43f af53 	beq.w	8018ea4 <_DrawBitmap+0x20c>
 8018ffe:	f1ce 0403 	rsb	r4, lr, #3
 8019002:	f10e 0e01 	add.w	lr, lr, #1
 8019006:	0066      	lsls	r6, r4, #1
 8019008:	f1be 0f04 	cmp.w	lr, #4
 801900c:	f1c6 0406 	rsb	r4, r6, #6
 8019010:	fa41 f404 	asr.w	r4, r1, r4
 8019014:	ea04 0400 	and.w	r4, r4, r0
 8019018:	fa24 f406 	lsr.w	r4, r4, r6
 801901c:	f82c 4b02 	strh.w	r4, [ip], #2
 8019020:	d1ea      	bne.n	8018ff8 <_DrawBitmap+0x360>
 8019022:	e7e3      	b.n	8018fec <_DrawBitmap+0x354>
 8019024:	6a1c      	ldr	r4, [r3, #32]
 8019026:	46c1      	mov	r9, r8
 8019028:	681e      	ldr	r6, [r3, #0]
 801902a:	fb04 fa02 	mul.w	sl, r4, r2
 801902e:	9c04      	ldr	r4, [sp, #16]
 8019030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019034:	eb04 0c0a 	add.w	ip, r4, sl
 8019038:	44ba      	add	sl, r7
 801903a:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 801903e:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 8019042:	b91d      	cbnz	r5, 801904c <_DrawBitmap+0x3b4>
 8019044:	e026      	b.n	8019094 <_DrawBitmap+0x3fc>
 8019046:	45d4      	cmp	ip, sl
 8019048:	f43f af79 	beq.w	8018f3e <_DrawBitmap+0x2a6>
 801904c:	f1ce 0401 	rsb	r4, lr, #1
 8019050:	f10e 0e01 	add.w	lr, lr, #1
 8019054:	00a6      	lsls	r6, r4, #2
 8019056:	f1be 0f02 	cmp.w	lr, #2
 801905a:	f1c6 0404 	rsb	r4, r6, #4
 801905e:	fa41 f404 	asr.w	r4, r1, r4
 8019062:	ea04 0400 	and.w	r4, r4, r0
 8019066:	fa24 f406 	lsr.w	r4, r4, r6
 801906a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801906e:	f82c 4b02 	strh.w	r4, [ip], #2
 8019072:	d1e8      	bne.n	8019046 <_DrawBitmap+0x3ae>
 8019074:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019078:	f04f 0e00 	mov.w	lr, #0
 801907c:	f109 0901 	add.w	r9, r9, #1
 8019080:	e7e1      	b.n	8019046 <_DrawBitmap+0x3ae>
 8019082:	f899 0001 	ldrb.w	r0, [r9, #1]
 8019086:	f04f 0e00 	mov.w	lr, #0
 801908a:	f109 0901 	add.w	r9, r9, #1
 801908e:	45d4      	cmp	ip, sl
 8019090:	f43f af55 	beq.w	8018f3e <_DrawBitmap+0x2a6>
 8019094:	f1ce 0401 	rsb	r4, lr, #1
 8019098:	f10e 0e01 	add.w	lr, lr, #1
 801909c:	00a6      	lsls	r6, r4, #2
 801909e:	f1be 0f02 	cmp.w	lr, #2
 80190a2:	f1c6 0404 	rsb	r4, r6, #4
 80190a6:	fa41 f404 	asr.w	r4, r1, r4
 80190aa:	ea04 0400 	and.w	r4, r4, r0
 80190ae:	fa24 f406 	lsr.w	r4, r4, r6
 80190b2:	f82c 4b02 	strh.w	r4, [ip], #2
 80190b6:	d1ea      	bne.n	801908e <_DrawBitmap+0x3f6>
 80190b8:	e7e3      	b.n	8019082 <_DrawBitmap+0x3ea>
 80190ba:	9b02      	ldr	r3, [sp, #8]
 80190bc:	691b      	ldr	r3, [r3, #16]
 80190be:	689b      	ldr	r3, [r3, #8]
 80190c0:	4798      	blx	r3
 80190c2:	9b03      	ldr	r3, [sp, #12]
 80190c4:	4641      	mov	r1, r8
 80190c6:	eb03 0e05 	add.w	lr, r3, r5
 80190ca:	006d      	lsls	r5, r5, #1
 80190cc:	9b08      	ldr	r3, [sp, #32]
 80190ce:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 80190d2:	f014 0f01 	tst.w	r4, #1
 80190d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80190da:	d003      	beq.n	80190e4 <_DrawBitmap+0x44c>
 80190dc:	6837      	ldr	r7, [r6, #0]
 80190de:	5bea      	ldrh	r2, [r5, r7]
 80190e0:	4042      	eors	r2, r0
 80190e2:	53ea      	strh	r2, [r5, r7]
 80190e4:	3b01      	subs	r3, #1
 80190e6:	d104      	bne.n	80190f2 <_DrawBitmap+0x45a>
 80190e8:	784a      	ldrb	r2, [r1, #1]
 80190ea:	2308      	movs	r3, #8
 80190ec:	3101      	adds	r1, #1
 80190ee:	f81b 4002 	ldrb.w	r4, [fp, r2]
 80190f2:	3502      	adds	r5, #2
 80190f4:	4575      	cmp	r5, lr
 80190f6:	d1ec      	bne.n	80190d2 <_DrawBitmap+0x43a>
 80190f8:	e682      	b.n	8018e00 <_DrawBitmap+0x168>
 80190fa:	9b03      	ldr	r3, [sp, #12]
 80190fc:	4641      	mov	r1, r8
 80190fe:	9a08      	ldr	r2, [sp, #32]
 8019100:	195f      	adds	r7, r3, r5
 8019102:	006d      	lsls	r5, r5, #1
 8019104:	007f      	lsls	r7, r7, #1
 8019106:	f014 0f01 	tst.w	r4, #1
 801910a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801910e:	d001      	beq.n	8019114 <_DrawBitmap+0x47c>
 8019110:	6833      	ldr	r3, [r6, #0]
 8019112:	5358      	strh	r0, [r3, r5]
 8019114:	3a01      	subs	r2, #1
 8019116:	d104      	bne.n	8019122 <_DrawBitmap+0x48a>
 8019118:	784b      	ldrb	r3, [r1, #1]
 801911a:	2208      	movs	r2, #8
 801911c:	3101      	adds	r1, #1
 801911e:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8019122:	3502      	adds	r5, #2
 8019124:	42af      	cmp	r7, r5
 8019126:	d1ee      	bne.n	8019106 <_DrawBitmap+0x46e>
 8019128:	e66a      	b.n	8018e00 <_DrawBitmap+0x168>
 801912a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801912e:	46c2      	mov	sl, r8
 8019130:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019134:	46ae      	mov	lr, r5
 8019136:	e001      	b.n	801913c <_DrawBitmap+0x4a4>
 8019138:	454f      	cmp	r7, r9
 801913a:	d01d      	beq.n	8019178 <_DrawBitmap+0x4e0>
 801913c:	f1cc 0603 	rsb	r6, ip, #3
 8019140:	f10c 0c01 	add.w	ip, ip, #1
 8019144:	0076      	lsls	r6, r6, #1
 8019146:	f1c6 0406 	rsb	r4, r6, #6
 801914a:	fa41 f404 	asr.w	r4, r1, r4
 801914e:	4004      	ands	r4, r0
 8019150:	40f4      	lsrs	r4, r6
 8019152:	d005      	beq.n	8019160 <_DrawBitmap+0x4c8>
 8019154:	6a1e      	ldr	r6, [r3, #32]
 8019156:	681d      	ldr	r5, [r3, #0]
 8019158:	fb06 9602 	mla	r6, r6, r2, r9
 801915c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8019160:	f1bc 0f04 	cmp.w	ip, #4
 8019164:	f109 0901 	add.w	r9, r9, #1
 8019168:	d1e6      	bne.n	8019138 <_DrawBitmap+0x4a0>
 801916a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801916e:	f04f 0c00 	mov.w	ip, #0
 8019172:	f10a 0a01 	add.w	sl, sl, #1
 8019176:	e7df      	b.n	8019138 <_DrawBitmap+0x4a0>
 8019178:	4675      	mov	r5, lr
 801917a:	e693      	b.n	8018ea4 <_DrawBitmap+0x20c>
 801917c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8019180:	46c2      	mov	sl, r8
 8019182:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8019186:	46ae      	mov	lr, r5
 8019188:	e001      	b.n	801918e <_DrawBitmap+0x4f6>
 801918a:	454f      	cmp	r7, r9
 801918c:	d01d      	beq.n	80191ca <_DrawBitmap+0x532>
 801918e:	f1cc 0601 	rsb	r6, ip, #1
 8019192:	f10c 0c01 	add.w	ip, ip, #1
 8019196:	00b6      	lsls	r6, r6, #2
 8019198:	f1c6 0404 	rsb	r4, r6, #4
 801919c:	fa41 f404 	asr.w	r4, r1, r4
 80191a0:	4004      	ands	r4, r0
 80191a2:	40f4      	lsrs	r4, r6
 80191a4:	d005      	beq.n	80191b2 <_DrawBitmap+0x51a>
 80191a6:	6a1e      	ldr	r6, [r3, #32]
 80191a8:	681d      	ldr	r5, [r3, #0]
 80191aa:	fb06 9602 	mla	r6, r6, r2, r9
 80191ae:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80191b2:	f1bc 0f02 	cmp.w	ip, #2
 80191b6:	f109 0901 	add.w	r9, r9, #1
 80191ba:	d1e6      	bne.n	801918a <_DrawBitmap+0x4f2>
 80191bc:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80191c0:	f04f 0c00 	mov.w	ip, #0
 80191c4:	f10a 0a01 	add.w	sl, sl, #1
 80191c8:	e7df      	b.n	801918a <_DrawBitmap+0x4f2>
 80191ca:	4675      	mov	r5, lr
 80191cc:	e6b7      	b.n	8018f3e <_DrawBitmap+0x2a6>
 80191ce:	2e00      	cmp	r6, #0
 80191d0:	f77f adad 	ble.w	8018d2e <_DrawBitmap+0x96>
 80191d4:	9803      	ldr	r0, [sp, #12]
 80191d6:	4416      	add	r6, r2
 80191d8:	4f77      	ldr	r7, [pc, #476]	; (80193b8 <_DrawBitmap+0x720>)
 80191da:	f1a0 0108 	sub.w	r1, r0, #8
 80191de:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 80191e2:	f8d7 e000 	ldr.w	lr, [r7]
 80191e6:	08c8      	lsrs	r0, r1, #3
 80191e8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80191ec:	f8cd a014 	str.w	sl, [sp, #20]
 80191f0:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 80191f4:	1c47      	adds	r7, r0, #1
 80191f6:	eba1 0bc0 	sub.w	fp, r1, r0, lsl #3
 80191fa:	f10c 0020 	add.w	r0, ip, #32
 80191fe:	f8dd c000 	ldr.w	ip, [sp]
 8019202:	f8cd b018 	str.w	fp, [sp, #24]
 8019206:	9004      	str	r0, [sp, #16]
 8019208:	00f8      	lsls	r0, r7, #3
 801920a:	9001      	str	r0, [sp, #4]
 801920c:	0138      	lsls	r0, r7, #4
 801920e:	9002      	str	r0, [sp, #8]
 8019210:	b1f5      	cbz	r5, 8019250 <_DrawBitmap+0x5b8>
 8019212:	6a18      	ldr	r0, [r3, #32]
 8019214:	f89e a010 	ldrb.w	sl, [lr, #16]
 8019218:	681f      	ldr	r7, [r3, #0]
 801921a:	fb00 4102 	mla	r1, r0, r2, r4
 801921e:	f01a 0a03 	ands.w	sl, sl, #3
 8019222:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8019226:	d01a      	beq.n	801925e <_DrawBitmap+0x5c6>
 8019228:	f1ba 0f02 	cmp.w	sl, #2
 801922c:	d110      	bne.n	8019250 <_DrawBitmap+0x5b8>
 801922e:	f1b9 0f00 	cmp.w	r9, #0
 8019232:	dd0d      	ble.n	8019250 <_DrawBitmap+0x5b8>
 8019234:	9805      	ldr	r0, [sp, #20]
 8019236:	f108 37ff 	add.w	r7, r8, #4294967295
 801923a:	eb01 0a00 	add.w	sl, r1, r0
 801923e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8019242:	b110      	cbz	r0, 801924a <_DrawBitmap+0x5b2>
 8019244:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019248:	8008      	strh	r0, [r1, #0]
 801924a:	3102      	adds	r1, #2
 801924c:	4551      	cmp	r1, sl
 801924e:	d1f6      	bne.n	801923e <_DrawBitmap+0x5a6>
 8019250:	3201      	adds	r2, #1
 8019252:	44e0      	add	r8, ip
 8019254:	42b2      	cmp	r2, r6
 8019256:	d1db      	bne.n	8019210 <_DrawBitmap+0x578>
 8019258:	b00b      	add	sp, #44	; 0x2c
 801925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801925e:	f1b9 0f07 	cmp.w	r9, #7
 8019262:	f340 8086 	ble.w	8019372 <_DrawBitmap+0x6da>
 8019266:	f101 0010 	add.w	r0, r1, #16
 801926a:	f108 0708 	add.w	r7, r8, #8
 801926e:	469a      	mov	sl, r3
 8019270:	9000      	str	r0, [sp, #0]
 8019272:	9804      	ldr	r0, [sp, #16]
 8019274:	eb00 0b01 	add.w	fp, r0, r1
 8019278:	9800      	ldr	r0, [sp, #0]
 801927a:	f817 3c08 	ldrb.w	r3, [r7, #-8]
 801927e:	3010      	adds	r0, #16
 8019280:	3708      	adds	r7, #8
 8019282:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019286:	f820 3c20 	strh.w	r3, [r0, #-32]
 801928a:	f817 3c0f 	ldrb.w	r3, [r7, #-15]
 801928e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019292:	f820 3c1e 	strh.w	r3, [r0, #-30]
 8019296:	f817 3c0e 	ldrb.w	r3, [r7, #-14]
 801929a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801929e:	f820 3c1c 	strh.w	r3, [r0, #-28]
 80192a2:	f817 3c0d 	ldrb.w	r3, [r7, #-13]
 80192a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80192aa:	f820 3c1a 	strh.w	r3, [r0, #-26]
 80192ae:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
 80192b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80192b6:	f820 3c18 	strh.w	r3, [r0, #-24]
 80192ba:	f817 3c0b 	ldrb.w	r3, [r7, #-11]
 80192be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80192c2:	f820 3c16 	strh.w	r3, [r0, #-22]
 80192c6:	f817 3c0a 	ldrb.w	r3, [r7, #-10]
 80192ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80192ce:	f820 3c14 	strh.w	r3, [r0, #-20]
 80192d2:	f817 3c09 	ldrb.w	r3, [r7, #-9]
 80192d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80192da:	f820 3c12 	strh.w	r3, [r0, #-18]
 80192de:	4583      	cmp	fp, r0
 80192e0:	d1cb      	bne.n	801927a <_DrawBitmap+0x5e2>
 80192e2:	9802      	ldr	r0, [sp, #8]
 80192e4:	4653      	mov	r3, sl
 80192e6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80192ea:	4401      	add	r1, r0
 80192ec:	9801      	ldr	r0, [sp, #4]
 80192ee:	4440      	add	r0, r8
 80192f0:	f1ba 0f03 	cmp.w	sl, #3
 80192f4:	dd21      	ble.n	801933a <_DrawBitmap+0x6a2>
 80192f6:	7807      	ldrb	r7, [r0, #0]
 80192f8:	f1aa 0a04 	sub.w	sl, sl, #4
 80192fc:	f855 b027 	ldr.w	fp, [r5, r7, lsl #2]
 8019300:	ea4f 079a 	mov.w	r7, sl, lsr #2
 8019304:	f8a1 b000 	strh.w	fp, [r1]
 8019308:	ebaa 0a87 	sub.w	sl, sl, r7, lsl #2
 801930c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019310:	3701      	adds	r7, #1
 8019312:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8019316:	f8a1 b002 	strh.w	fp, [r1, #2]
 801931a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801931e:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8019322:	f8a1 b004 	strh.w	fp, [r1, #4]
 8019326:	f890 b003 	ldrb.w	fp, [r0, #3]
 801932a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801932e:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8019332:	f8a1 b006 	strh.w	fp, [r1, #6]
 8019336:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801933a:	f1ba 0f00 	cmp.w	sl, #0
 801933e:	d087      	beq.n	8019250 <_DrawBitmap+0x5b8>
 8019340:	7807      	ldrb	r7, [r0, #0]
 8019342:	f1ba 0f01 	cmp.w	sl, #1
 8019346:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801934a:	800f      	strh	r7, [r1, #0]
 801934c:	d080      	beq.n	8019250 <_DrawBitmap+0x5b8>
 801934e:	7847      	ldrb	r7, [r0, #1]
 8019350:	f1ba 0f02 	cmp.w	sl, #2
 8019354:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8019358:	804f      	strh	r7, [r1, #2]
 801935a:	f43f af79 	beq.w	8019250 <_DrawBitmap+0x5b8>
 801935e:	7880      	ldrb	r0, [r0, #2]
 8019360:	3201      	adds	r2, #1
 8019362:	44e0      	add	r8, ip
 8019364:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8019368:	42b2      	cmp	r2, r6
 801936a:	8088      	strh	r0, [r1, #4]
 801936c:	f47f af50 	bne.w	8019210 <_DrawBitmap+0x578>
 8019370:	e772      	b.n	8019258 <_DrawBitmap+0x5c0>
 8019372:	46ca      	mov	sl, r9
 8019374:	4640      	mov	r0, r8
 8019376:	e7bb      	b.n	80192f0 <_DrawBitmap+0x658>
 8019378:	9b02      	ldr	r3, [sp, #8]
 801937a:	46bc      	mov	ip, r7
 801937c:	9900      	ldr	r1, [sp, #0]
 801937e:	6998      	ldr	r0, [r3, #24]
 8019380:	4643      	mov	r3, r8
 8019382:	9117      	str	r1, [sp, #92]	; 0x5c
 8019384:	4621      	mov	r1, r4
 8019386:	9c03      	ldr	r4, [sp, #12]
 8019388:	9518      	str	r5, [sp, #96]	; 0x60
 801938a:	9415      	str	r4, [sp, #84]	; 0x54
 801938c:	9c01      	ldr	r4, [sp, #4]
 801938e:	9616      	str	r6, [sp, #88]	; 0x58
 8019390:	9414      	str	r4, [sp, #80]	; 0x50
 8019392:	b00b      	add	sp, #44	; 0x2c
 8019394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019398:	4760      	bx	ip
 801939a:	9b02      	ldr	r3, [sp, #8]
 801939c:	46ac      	mov	ip, r5
 801939e:	9900      	ldr	r1, [sp, #0]
 80193a0:	6998      	ldr	r0, [r3, #24]
 80193a2:	4643      	mov	r3, r8
 80193a4:	9116      	str	r1, [sp, #88]	; 0x58
 80193a6:	9903      	ldr	r1, [sp, #12]
 80193a8:	9615      	str	r6, [sp, #84]	; 0x54
 80193aa:	9114      	str	r1, [sp, #80]	; 0x50
 80193ac:	4621      	mov	r1, r4
 80193ae:	b00b      	add	sp, #44	; 0x2c
 80193b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b4:	4760      	bx	ip
 80193b6:	bf00      	nop
 80193b8:	20000018 	.word	0x20000018

080193bc <_Init>:
 80193bc:	b538      	push	{r3, r4, r5, lr}
 80193be:	6884      	ldr	r4, [r0, #8]
 80193c0:	4605      	mov	r5, r0
 80193c2:	b14c      	cbz	r4, 80193d8 <_Init+0x1c>
 80193c4:	69a8      	ldr	r0, [r5, #24]
 80193c6:	2200      	movs	r2, #0
 80193c8:	2101      	movs	r1, #1
 80193ca:	f7ea fd0d 	bl	8003de8 <LCD_X_DisplayDriver>
 80193ce:	2c00      	cmp	r4, #0
 80193d0:	bf08      	it	eq
 80193d2:	f040 0001 	orreq.w	r0, r0, #1
 80193d6:	bd38      	pop	{r3, r4, r5, pc}
 80193d8:	2050      	movs	r0, #80	; 0x50
 80193da:	f7f8 f995 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 80193de:	4621      	mov	r1, r4
 80193e0:	60a8      	str	r0, [r5, #8]
 80193e2:	2250      	movs	r2, #80	; 0x50
 80193e4:	f7fd fdd8 	bl	8016f98 <GUI__memset>
 80193e8:	68ac      	ldr	r4, [r5, #8]
 80193ea:	e7eb      	b.n	80193c4 <_Init+0x8>

080193ec <_SetVRAM_BufferPTR>:
 80193ec:	b570      	push	{r4, r5, r6, lr}
 80193ee:	6884      	ldr	r4, [r0, #8]
 80193f0:	460d      	mov	r5, r1
 80193f2:	b11c      	cbz	r4, 80193fc <_SetVRAM_BufferPTR+0x10>
 80193f4:	682b      	ldr	r3, [r5, #0]
 80193f6:	60a5      	str	r5, [r4, #8]
 80193f8:	6023      	str	r3, [r4, #0]
 80193fa:	bd70      	pop	{r4, r5, r6, pc}
 80193fc:	4606      	mov	r6, r0
 80193fe:	2050      	movs	r0, #80	; 0x50
 8019400:	f7f8 f982 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019404:	4621      	mov	r1, r4
 8019406:	60b0      	str	r0, [r6, #8]
 8019408:	2250      	movs	r2, #80	; 0x50
 801940a:	f7fd fdc5 	bl	8016f98 <GUI__memset>
 801940e:	68b4      	ldr	r4, [r6, #8]
 8019410:	2c00      	cmp	r4, #0
 8019412:	d1ef      	bne.n	80193f4 <_SetVRAM_BufferPTR+0x8>
 8019414:	bd70      	pop	{r4, r5, r6, pc}
 8019416:	bf00      	nop

08019418 <_GetPos>:
 8019418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801941a:	6884      	ldr	r4, [r0, #8]
 801941c:	460f      	mov	r7, r1
 801941e:	4616      	mov	r6, r2
 8019420:	b124      	cbz	r4, 801942c <_GetPos+0x14>
 8019422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019424:	603b      	str	r3, [r7, #0]
 8019426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019428:	6033      	str	r3, [r6, #0]
 801942a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801942c:	4605      	mov	r5, r0
 801942e:	2050      	movs	r0, #80	; 0x50
 8019430:	f7f8 f96a 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019434:	4621      	mov	r1, r4
 8019436:	60a8      	str	r0, [r5, #8]
 8019438:	2250      	movs	r2, #80	; 0x50
 801943a:	f7fd fdad 	bl	8016f98 <GUI__memset>
 801943e:	68ac      	ldr	r4, [r5, #8]
 8019440:	2c00      	cmp	r4, #0
 8019442:	d1ee      	bne.n	8019422 <_GetPos+0xa>
 8019444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019446:	bf00      	nop

08019448 <_ShowBuffer>:
 8019448:	b570      	push	{r4, r5, r6, lr}
 801944a:	2300      	movs	r3, #0
 801944c:	b082      	sub	sp, #8
 801944e:	6885      	ldr	r5, [r0, #8]
 8019450:	4604      	mov	r4, r0
 8019452:	460e      	mov	r6, r1
 8019454:	9301      	str	r3, [sp, #4]
 8019456:	b145      	cbz	r5, 801946a <_ShowBuffer+0x22>
 8019458:	aa02      	add	r2, sp, #8
 801945a:	210e      	movs	r1, #14
 801945c:	69a0      	ldr	r0, [r4, #24]
 801945e:	f842 6d04 	str.w	r6, [r2, #-4]!
 8019462:	f7ea fcc1 	bl	8003de8 <LCD_X_DisplayDriver>
 8019466:	b002      	add	sp, #8
 8019468:	bd70      	pop	{r4, r5, r6, pc}
 801946a:	2050      	movs	r0, #80	; 0x50
 801946c:	f7f8 f94c 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019470:	4629      	mov	r1, r5
 8019472:	60a0      	str	r0, [r4, #8]
 8019474:	2250      	movs	r2, #80	; 0x50
 8019476:	f7fd fd8f 	bl	8016f98 <GUI__memset>
 801947a:	68a3      	ldr	r3, [r4, #8]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d1eb      	bne.n	8019458 <_ShowBuffer+0x10>
 8019480:	b002      	add	sp, #8
 8019482:	bd70      	pop	{r4, r5, r6, pc}

08019484 <_SetAlpha>:
 8019484:	b570      	push	{r4, r5, r6, lr}
 8019486:	2300      	movs	r3, #0
 8019488:	b082      	sub	sp, #8
 801948a:	6884      	ldr	r4, [r0, #8]
 801948c:	4605      	mov	r5, r0
 801948e:	460e      	mov	r6, r1
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	b14c      	cbz	r4, 80194a8 <_SetAlpha+0x24>
 8019494:	aa02      	add	r2, sp, #8
 8019496:	210a      	movs	r1, #10
 8019498:	62e6      	str	r6, [r4, #44]	; 0x2c
 801949a:	69a8      	ldr	r0, [r5, #24]
 801949c:	f842 6d04 	str.w	r6, [r2, #-4]!
 80194a0:	f7ea fca2 	bl	8003de8 <LCD_X_DisplayDriver>
 80194a4:	b002      	add	sp, #8
 80194a6:	bd70      	pop	{r4, r5, r6, pc}
 80194a8:	2050      	movs	r0, #80	; 0x50
 80194aa:	f7f8 f92d 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 80194ae:	4621      	mov	r1, r4
 80194b0:	60a8      	str	r0, [r5, #8]
 80194b2:	2250      	movs	r2, #80	; 0x50
 80194b4:	f7fd fd70 	bl	8016f98 <GUI__memset>
 80194b8:	68ac      	ldr	r4, [r5, #8]
 80194ba:	2c00      	cmp	r4, #0
 80194bc:	d1ea      	bne.n	8019494 <_SetAlpha+0x10>
 80194be:	b002      	add	sp, #8
 80194c0:	bd70      	pop	{r4, r5, r6, pc}
 80194c2:	bf00      	nop

080194c4 <_SetVis>:
 80194c4:	b570      	push	{r4, r5, r6, lr}
 80194c6:	2300      	movs	r3, #0
 80194c8:	b082      	sub	sp, #8
 80194ca:	6884      	ldr	r4, [r0, #8]
 80194cc:	4605      	mov	r5, r0
 80194ce:	460e      	mov	r6, r1
 80194d0:	9301      	str	r3, [sp, #4]
 80194d2:	b14c      	cbz	r4, 80194e8 <_SetVis+0x24>
 80194d4:	aa02      	add	r2, sp, #8
 80194d6:	2109      	movs	r1, #9
 80194d8:	6326      	str	r6, [r4, #48]	; 0x30
 80194da:	69a8      	ldr	r0, [r5, #24]
 80194dc:	f842 6d04 	str.w	r6, [r2, #-4]!
 80194e0:	f7ea fc82 	bl	8003de8 <LCD_X_DisplayDriver>
 80194e4:	b002      	add	sp, #8
 80194e6:	bd70      	pop	{r4, r5, r6, pc}
 80194e8:	2050      	movs	r0, #80	; 0x50
 80194ea:	f7f8 f90d 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 80194ee:	4621      	mov	r1, r4
 80194f0:	60a8      	str	r0, [r5, #8]
 80194f2:	2250      	movs	r2, #80	; 0x50
 80194f4:	f7fd fd50 	bl	8016f98 <GUI__memset>
 80194f8:	68ac      	ldr	r4, [r5, #8]
 80194fa:	2c00      	cmp	r4, #0
 80194fc:	d1ea      	bne.n	80194d4 <_SetVis+0x10>
 80194fe:	b002      	add	sp, #8
 8019500:	bd70      	pop	{r4, r5, r6, pc}
 8019502:	bf00      	nop

08019504 <_SetVRAMAddr>:
 8019504:	b570      	push	{r4, r5, r6, lr}
 8019506:	2300      	movs	r3, #0
 8019508:	b082      	sub	sp, #8
 801950a:	6884      	ldr	r4, [r0, #8]
 801950c:	4606      	mov	r6, r0
 801950e:	460d      	mov	r5, r1
 8019510:	9301      	str	r3, [sp, #4]
 8019512:	b154      	cbz	r4, 801952a <_SetVRAMAddr+0x26>
 8019514:	aa02      	add	r2, sp, #8
 8019516:	2102      	movs	r1, #2
 8019518:	6025      	str	r5, [r4, #0]
 801951a:	6065      	str	r5, [r4, #4]
 801951c:	69b0      	ldr	r0, [r6, #24]
 801951e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019522:	f7ea fc61 	bl	8003de8 <LCD_X_DisplayDriver>
 8019526:	b002      	add	sp, #8
 8019528:	bd70      	pop	{r4, r5, r6, pc}
 801952a:	2050      	movs	r0, #80	; 0x50
 801952c:	f7f8 f8ec 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019530:	4621      	mov	r1, r4
 8019532:	60b0      	str	r0, [r6, #8]
 8019534:	2250      	movs	r2, #80	; 0x50
 8019536:	f7fd fd2f 	bl	8016f98 <GUI__memset>
 801953a:	68b4      	ldr	r4, [r6, #8]
 801953c:	2c00      	cmp	r4, #0
 801953e:	d1e9      	bne.n	8019514 <_SetVRAMAddr+0x10>
 8019540:	b002      	add	sp, #8
 8019542:	bd70      	pop	{r4, r5, r6, pc}

08019544 <_SetVSize>:
 8019544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019546:	6884      	ldr	r4, [r0, #8]
 8019548:	4605      	mov	r5, r0
 801954a:	460e      	mov	r6, r1
 801954c:	4617      	mov	r7, r2
 801954e:	b14c      	cbz	r4, 8019564 <_SetVSize+0x20>
 8019550:	69a8      	ldr	r0, [r5, #24]
 8019552:	f7fe fd03 	bl	8017f5c <LCD_GetSwapXYEx>
 8019556:	61a6      	str	r6, [r4, #24]
 8019558:	61e7      	str	r7, [r4, #28]
 801955a:	b908      	cbnz	r0, 8019560 <_SetVSize+0x1c>
 801955c:	6226      	str	r6, [r4, #32]
 801955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019560:	6227      	str	r7, [r4, #32]
 8019562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019564:	2050      	movs	r0, #80	; 0x50
 8019566:	f7f8 f8cf 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 801956a:	4621      	mov	r1, r4
 801956c:	60a8      	str	r0, [r5, #8]
 801956e:	2250      	movs	r2, #80	; 0x50
 8019570:	f7fd fd12 	bl	8016f98 <GUI__memset>
 8019574:	68ac      	ldr	r4, [r5, #8]
 8019576:	2c00      	cmp	r4, #0
 8019578:	d1ea      	bne.n	8019550 <_SetVSize+0xc>
 801957a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801957c <_SetSize>:
 801957c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801957e:	2300      	movs	r3, #0
 8019580:	b083      	sub	sp, #12
 8019582:	6884      	ldr	r4, [r0, #8]
 8019584:	4605      	mov	r5, r0
 8019586:	460f      	mov	r7, r1
 8019588:	4616      	mov	r6, r2
 801958a:	9301      	str	r3, [sp, #4]
 801958c:	9300      	str	r3, [sp, #0]
 801958e:	b1ac      	cbz	r4, 80195bc <_SetSize+0x40>
 8019590:	6a23      	ldr	r3, [r4, #32]
 8019592:	b153      	cbz	r3, 80195aa <_SetSize+0x2e>
 8019594:	466a      	mov	r2, sp
 8019596:	2107      	movs	r1, #7
 8019598:	6127      	str	r7, [r4, #16]
 801959a:	6166      	str	r6, [r4, #20]
 801959c:	69a8      	ldr	r0, [r5, #24]
 801959e:	9700      	str	r7, [sp, #0]
 80195a0:	9601      	str	r6, [sp, #4]
 80195a2:	f7ea fc21 	bl	8003de8 <LCD_X_DisplayDriver>
 80195a6:	b003      	add	sp, #12
 80195a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195aa:	69a8      	ldr	r0, [r5, #24]
 80195ac:	f7fe fcd6 	bl	8017f5c <LCD_GetSwapXYEx>
 80195b0:	2800      	cmp	r0, #0
 80195b2:	bf0c      	ite	eq
 80195b4:	4638      	moveq	r0, r7
 80195b6:	4630      	movne	r0, r6
 80195b8:	6220      	str	r0, [r4, #32]
 80195ba:	e7eb      	b.n	8019594 <_SetSize+0x18>
 80195bc:	2050      	movs	r0, #80	; 0x50
 80195be:	f7f8 f8a3 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 80195c2:	4621      	mov	r1, r4
 80195c4:	60a8      	str	r0, [r5, #8]
 80195c6:	2250      	movs	r2, #80	; 0x50
 80195c8:	f7fd fce6 	bl	8016f98 <GUI__memset>
 80195cc:	68ac      	ldr	r4, [r5, #8]
 80195ce:	2c00      	cmp	r4, #0
 80195d0:	d1de      	bne.n	8019590 <_SetSize+0x14>
 80195d2:	b003      	add	sp, #12
 80195d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195d6:	bf00      	nop

080195d8 <_SetDevFunc>:
 80195d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195da:	6885      	ldr	r5, [r0, #8]
 80195dc:	460c      	mov	r4, r1
 80195de:	4617      	mov	r7, r2
 80195e0:	b325      	cbz	r5, 801962c <_SetDevFunc+0x54>
 80195e2:	1ee3      	subs	r3, r4, #3
 80195e4:	2b22      	cmp	r3, #34	; 0x22
 80195e6:	d814      	bhi.n	8019612 <_SetDevFunc+0x3a>
 80195e8:	e8df f003 	tbb	[pc, r3]
 80195ec:	13131316 	.word	0x13131316
 80195f0:	13131313 	.word	0x13131313
 80195f4:	13131313 	.word	0x13131313
 80195f8:	13131313 	.word	0x13131313
 80195fc:	13131313 	.word	0x13131313
 8019600:	13181313 	.word	0x13181313
 8019604:	13131313 	.word	0x13131313
 8019608:	131c1a13 	.word	0x131c1a13
 801960c:	121e      	.short	0x121e
 801960e:	14          	.byte	0x14
 801960f:	00          	.byte	0x00
 8019610:	64ef      	str	r7, [r5, #76]	; 0x4c
 8019612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019614:	642f      	str	r7, [r5, #64]	; 0x40
 8019616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019618:	64af      	str	r7, [r5, #72]	; 0x48
 801961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801961c:	636f      	str	r7, [r5, #52]	; 0x34
 801961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019620:	63ef      	str	r7, [r5, #60]	; 0x3c
 8019622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019624:	63af      	str	r7, [r5, #56]	; 0x38
 8019626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019628:	646f      	str	r7, [r5, #68]	; 0x44
 801962a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801962c:	4606      	mov	r6, r0
 801962e:	2050      	movs	r0, #80	; 0x50
 8019630:	f7f8 f86a 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019634:	4629      	mov	r1, r5
 8019636:	60b0      	str	r0, [r6, #8]
 8019638:	2250      	movs	r2, #80	; 0x50
 801963a:	f7fd fcad 	bl	8016f98 <GUI__memset>
 801963e:	68b5      	ldr	r5, [r6, #8]
 8019640:	2d00      	cmp	r5, #0
 8019642:	d1ce      	bne.n	80195e2 <_SetDevFunc+0xa>
 8019644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019646:	bf00      	nop

08019648 <_CopyBuffer>:
 8019648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801964c:	6884      	ldr	r4, [r0, #8]
 801964e:	4605      	mov	r5, r0
 8019650:	460e      	mov	r6, r1
 8019652:	4617      	mov	r7, r2
 8019654:	b33c      	cbz	r4, 80196a6 <_CopyBuffer+0x5e>
 8019656:	42be      	cmp	r6, r7
 8019658:	d01d      	beq.n	8019696 <_CopyBuffer+0x4e>
 801965a:	b1e4      	cbz	r4, 8019696 <_CopyBuffer+0x4e>
 801965c:	68eb      	ldr	r3, [r5, #12]
 801965e:	2108      	movs	r1, #8
 8019660:	4628      	mov	r0, r5
 8019662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019664:	4798      	blx	r3
 8019666:	69a1      	ldr	r1, [r4, #24]
 8019668:	6963      	ldr	r3, [r4, #20]
 801966a:	68a2      	ldr	r2, [r4, #8]
 801966c:	fb03 f301 	mul.w	r3, r3, r1
 8019670:	fb00 f003 	mul.w	r0, r0, r3
 8019674:	08c3      	lsrs	r3, r0, #3
 8019676:	b182      	cbz	r2, 801969a <_CopyBuffer+0x52>
 8019678:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 801967c:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 8019680:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8019684:	f1b8 0f00 	cmp.w	r8, #0
 8019688:	d017      	beq.n	80196ba <_CopyBuffer+0x72>
 801968a:	463a      	mov	r2, r7
 801968c:	4631      	mov	r1, r6
 801968e:	69a8      	ldr	r0, [r5, #24]
 8019690:	47c0      	blx	r8
 8019692:	f8c4 9000 	str.w	r9, [r4]
 8019696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801969a:	6862      	ldr	r2, [r4, #4]
 801969c:	fb03 2106 	mla	r1, r3, r6, r2
 80196a0:	fb03 2907 	mla	r9, r3, r7, r2
 80196a4:	e7ec      	b.n	8019680 <_CopyBuffer+0x38>
 80196a6:	2050      	movs	r0, #80	; 0x50
 80196a8:	f7f8 f82e 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 80196ac:	4621      	mov	r1, r4
 80196ae:	60a8      	str	r0, [r5, #8]
 80196b0:	2250      	movs	r2, #80	; 0x50
 80196b2:	f7fd fc71 	bl	8016f98 <GUI__memset>
 80196b6:	68ac      	ldr	r4, [r5, #8]
 80196b8:	e7cd      	b.n	8019656 <_CopyBuffer+0xe>
 80196ba:	4d03      	ldr	r5, [pc, #12]	; (80196c8 <_CopyBuffer+0x80>)
 80196bc:	461a      	mov	r2, r3
 80196be:	4648      	mov	r0, r9
 80196c0:	682b      	ldr	r3, [r5, #0]
 80196c2:	4798      	blx	r3
 80196c4:	e7e5      	b.n	8019692 <_CopyBuffer+0x4a>
 80196c6:	bf00      	nop
 80196c8:	2000004c 	.word	0x2000004c

080196cc <_SetPos>:
 80196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d0:	2300      	movs	r3, #0
 80196d2:	b089      	sub	sp, #36	; 0x24
 80196d4:	6884      	ldr	r4, [r0, #8]
 80196d6:	4605      	mov	r5, r0
 80196d8:	460f      	mov	r7, r1
 80196da:	4616      	mov	r6, r2
 80196dc:	9303      	str	r3, [sp, #12]
 80196de:	9302      	str	r3, [sp, #8]
 80196e0:	9304      	str	r3, [sp, #16]
 80196e2:	9305      	str	r3, [sp, #20]
 80196e4:	9306      	str	r3, [sp, #24]
 80196e6:	9307      	str	r3, [sp, #28]
 80196e8:	2c00      	cmp	r4, #0
 80196ea:	d046      	beq.n	801977a <_SetPos+0xae>
 80196ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80196ee:	b133      	cbz	r3, 80196fe <_SetPos+0x32>
 80196f0:	4632      	mov	r2, r6
 80196f2:	4639      	mov	r1, r7
 80196f4:	69a8      	ldr	r0, [r5, #24]
 80196f6:	4798      	blx	r3
 80196f8:	b009      	add	sp, #36	; 0x24
 80196fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fe:	6267      	str	r7, [r4, #36]	; 0x24
 8019700:	62a6      	str	r6, [r4, #40]	; 0x28
 8019702:	f7fe fcfb 	bl	80180fc <LCD_GetXSizeDisplay>
 8019706:	4681      	mov	r9, r0
 8019708:	f7fe fcfe 	bl	8018108 <LCD_GetYSizeDisplay>
 801970c:	68eb      	ldr	r3, [r5, #12]
 801970e:	4682      	mov	sl, r0
 8019710:	2108      	movs	r1, #8
 8019712:	4628      	mov	r0, r5
 8019714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019716:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801971a:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801971e:	4798      	blx	r3
 8019720:	1dc2      	adds	r2, r0, #7
 8019722:	bf48      	it	mi
 8019724:	f100 020e 	addmi.w	r2, r0, #14
 8019728:	2f00      	cmp	r7, #0
 801972a:	ea4f 02e2 	mov.w	r2, r2, asr #3
 801972e:	9206      	str	r2, [sp, #24]
 8019730:	db4b      	blt.n	80197ca <_SetPos+0xfe>
 8019732:	eb07 030b 	add.w	r3, r7, fp
 8019736:	9702      	str	r7, [sp, #8]
 8019738:	4599      	cmp	r9, r3
 801973a:	db2c      	blt.n	8019796 <_SetPos+0xca>
 801973c:	f8cd b010 	str.w	fp, [sp, #16]
 8019740:	2e00      	cmp	r6, #0
 8019742:	db4c      	blt.n	80197de <_SetPos+0x112>
 8019744:	eb06 0308 	add.w	r3, r6, r8
 8019748:	9603      	str	r6, [sp, #12]
 801974a:	459a      	cmp	sl, r3
 801974c:	db39      	blt.n	80197c2 <_SetPos+0xf6>
 801974e:	4641      	mov	r1, r8
 8019750:	f8cd 8014 	str.w	r8, [sp, #20]
 8019754:	9b04      	ldr	r3, [sp, #16]
 8019756:	2b00      	cmp	r3, #0
 8019758:	dd21      	ble.n	801979e <_SetPos+0xd2>
 801975a:	2900      	cmp	r1, #0
 801975c:	dd1f      	ble.n	801979e <_SetPos+0xd2>
 801975e:	9b02      	ldr	r3, [sp, #8]
 8019760:	4599      	cmp	r9, r3
 8019762:	dd1c      	ble.n	801979e <_SetPos+0xd2>
 8019764:	45b2      	cmp	sl, r6
 8019766:	dd1a      	ble.n	801979e <_SetPos+0xd2>
 8019768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801976a:	2b00      	cmp	r3, #0
 801976c:	d044      	beq.n	80197f8 <_SetPos+0x12c>
 801976e:	aa02      	add	r2, sp, #8
 8019770:	69a8      	ldr	r0, [r5, #24]
 8019772:	2108      	movs	r1, #8
 8019774:	f7ea fb38 	bl	8003de8 <LCD_X_DisplayDriver>
 8019778:	e7be      	b.n	80196f8 <_SetPos+0x2c>
 801977a:	2050      	movs	r0, #80	; 0x50
 801977c:	f7f7 ffc4 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019780:	4621      	mov	r1, r4
 8019782:	60a8      	str	r0, [r5, #8]
 8019784:	2250      	movs	r2, #80	; 0x50
 8019786:	f7fd fc07 	bl	8016f98 <GUI__memset>
 801978a:	68ac      	ldr	r4, [r5, #8]
 801978c:	2c00      	cmp	r4, #0
 801978e:	d1ad      	bne.n	80196ec <_SetPos+0x20>
 8019790:	b009      	add	sp, #36	; 0x24
 8019792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019796:	ebc7 0709 	rsb	r7, r7, r9
 801979a:	9704      	str	r7, [sp, #16]
 801979c:	e7d0      	b.n	8019740 <_SetPos+0x74>
 801979e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80197a0:	2b01      	cmp	r3, #1
 80197a2:	d1a9      	bne.n	80196f8 <_SetPos+0x2c>
 80197a4:	2300      	movs	r3, #0
 80197a6:	68ac      	ldr	r4, [r5, #8]
 80197a8:	9301      	str	r3, [sp, #4]
 80197aa:	2c00      	cmp	r4, #0
 80197ac:	d031      	beq.n	8019812 <_SetPos+0x146>
 80197ae:	2300      	movs	r3, #0
 80197b0:	aa08      	add	r2, sp, #32
 80197b2:	69a8      	ldr	r0, [r5, #24]
 80197b4:	2109      	movs	r1, #9
 80197b6:	6323      	str	r3, [r4, #48]	; 0x30
 80197b8:	f842 3d1c 	str.w	r3, [r2, #-28]!
 80197bc:	f7ea fb14 	bl	8003de8 <LCD_X_DisplayDriver>
 80197c0:	e79a      	b.n	80196f8 <_SetPos+0x2c>
 80197c2:	ebc6 010a 	rsb	r1, r6, sl
 80197c6:	9105      	str	r1, [sp, #20]
 80197c8:	e7c4      	b.n	8019754 <_SetPos+0x88>
 80197ca:	9b07      	ldr	r3, [sp, #28]
 80197cc:	eb07 010b 	add.w	r1, r7, fp
 80197d0:	fb02 3717 	mls	r7, r2, r7, r3
 80197d4:	2300      	movs	r3, #0
 80197d6:	9104      	str	r1, [sp, #16]
 80197d8:	9707      	str	r7, [sp, #28]
 80197da:	9302      	str	r3, [sp, #8]
 80197dc:	e7b0      	b.n	8019740 <_SetPos+0x74>
 80197de:	fb02 f206 	mul.w	r2, r2, r6
 80197e2:	9b07      	ldr	r3, [sp, #28]
 80197e4:	eb06 0108 	add.w	r1, r6, r8
 80197e8:	2000      	movs	r0, #0
 80197ea:	fb0b 3312 	mls	r3, fp, r2, r3
 80197ee:	9105      	str	r1, [sp, #20]
 80197f0:	4606      	mov	r6, r0
 80197f2:	9307      	str	r3, [sp, #28]
 80197f4:	9003      	str	r0, [sp, #12]
 80197f6:	e7ad      	b.n	8019754 <_SetPos+0x88>
 80197f8:	68ac      	ldr	r4, [r5, #8]
 80197fa:	9301      	str	r3, [sp, #4]
 80197fc:	b1b4      	cbz	r4, 801982c <_SetPos+0x160>
 80197fe:	2301      	movs	r3, #1
 8019800:	aa08      	add	r2, sp, #32
 8019802:	69a8      	ldr	r0, [r5, #24]
 8019804:	2109      	movs	r1, #9
 8019806:	6323      	str	r3, [r4, #48]	; 0x30
 8019808:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801980c:	f7ea faec 	bl	8003de8 <LCD_X_DisplayDriver>
 8019810:	e7ad      	b.n	801976e <_SetPos+0xa2>
 8019812:	2050      	movs	r0, #80	; 0x50
 8019814:	f7f7 ff78 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019818:	4621      	mov	r1, r4
 801981a:	60a8      	str	r0, [r5, #8]
 801981c:	2250      	movs	r2, #80	; 0x50
 801981e:	f7fd fbbb 	bl	8016f98 <GUI__memset>
 8019822:	68ac      	ldr	r4, [r5, #8]
 8019824:	2c00      	cmp	r4, #0
 8019826:	f43f af67 	beq.w	80196f8 <_SetPos+0x2c>
 801982a:	e7c0      	b.n	80197ae <_SetPos+0xe2>
 801982c:	2050      	movs	r0, #80	; 0x50
 801982e:	f7f7 ff6b 	bl	8011708 <GUI_ALLOC_GetFixedBlock>
 8019832:	4621      	mov	r1, r4
 8019834:	60a8      	str	r0, [r5, #8]
 8019836:	2250      	movs	r2, #80	; 0x50
 8019838:	f7fd fbae 	bl	8016f98 <GUI__memset>
 801983c:	68ac      	ldr	r4, [r5, #8]
 801983e:	2c00      	cmp	r4, #0
 8019840:	d095      	beq.n	801976e <_SetPos+0xa2>
 8019842:	e7dc      	b.n	80197fe <_SetPos+0x132>

08019844 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 8019844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019848:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8019944 <GUI_MEMDEV_CopyToLCDAt.part.0+0x100>
 801984c:	b084      	sub	sp, #16
 801984e:	460c      	mov	r4, r1
 8019850:	4615      	mov	r5, r2
 8019852:	4606      	mov	r6, r0
 8019854:	f7fc fd06 	bl	8016264 <GUI_Lock>
 8019858:	2000      	movs	r0, #0
 801985a:	f7f8 feeb 	bl	8012634 <GUI_SetDrawMode>
 801985e:	f8d8 3000 	ldr.w	r3, [r8]
 8019862:	4681      	mov	r9, r0
 8019864:	4630      	mov	r0, r6
 8019866:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8019868:	f7f8 f882 	bl	8011970 <GUI_ALLOC_LockH>
 801986c:	6803      	ldr	r3, [r0, #0]
 801986e:	9000      	str	r0, [sp, #0]
 8019870:	6998      	ldr	r0, [r3, #24]
 8019872:	f7fb faeb 	bl	8014e4c <GUI_SelectLayer>
 8019876:	4b32      	ldr	r3, [pc, #200]	; (8019940 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>)
 8019878:	4682      	mov	sl, r0
 801987a:	429c      	cmp	r4, r3
 801987c:	9b00      	ldr	r3, [sp, #0]
 801987e:	d053      	beq.n	8019928 <GUI_MEMDEV_CopyToLCDAt.part.0+0xe4>
 8019880:	891a      	ldrh	r2, [r3, #8]
 8019882:	895b      	ldrh	r3, [r3, #10]
 8019884:	3a01      	subs	r2, #1
 8019886:	f8ad 4008 	strh.w	r4, [sp, #8]
 801988a:	3b01      	subs	r3, #1
 801988c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8019890:	4422      	add	r2, r4
 8019892:	442b      	add	r3, r5
 8019894:	f8ad 200c 	strh.w	r2, [sp, #12]
 8019898:	f8ad 300e 	strh.w	r3, [sp, #14]
 801989c:	f004 f8c8 	bl	801da30 <WM_Activate>
 80198a0:	4668      	mov	r0, sp
 80198a2:	f7f8 f879 	bl	8011998 <GUI_ALLOC_UnlockH>
 80198a6:	a802      	add	r0, sp, #8
 80198a8:	f003 fe4e 	bl	801d548 <WM__InitIVRSearch>
 80198ac:	bb48      	cbnz	r0, 8019902 <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 80198ae:	4650      	mov	r0, sl
 80198b0:	f7fb facc 	bl	8014e4c <GUI_SelectLayer>
 80198b4:	f7fc fcd6 	bl	8016264 <GUI_Lock>
 80198b8:	2f00      	cmp	r7, #0
 80198ba:	d03d      	beq.n	8019938 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf4>
 80198bc:	f8d8 3000 	ldr.w	r3, [r8]
 80198c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80198c2:	bbb3      	cbnz	r3, 8019932 <GUI_MEMDEV_CopyToLCDAt.part.0+0xee>
 80198c4:	f004 f8bc 	bl	801da40 <WM_Deactivate>
 80198c8:	4638      	mov	r0, r7
 80198ca:	f7f8 f851 	bl	8011970 <GUI_ALLOC_LockH>
 80198ce:	ac04      	add	r4, sp, #16
 80198d0:	f8d8 3000 	ldr.w	r3, [r8]
 80198d4:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80198d8:	661f      	str	r7, [r3, #96]	; 0x60
 80198da:	6800      	ldr	r0, [r0, #0]
 80198dc:	f7f9 f952 	bl	8012b84 <GUI_DEVICE_Link>
 80198e0:	4620      	mov	r0, r4
 80198e2:	f7f8 f859 	bl	8011998 <GUI_ALLOC_UnlockH>
 80198e6:	f7fe fea7 	bl	8018638 <LCD_UpdateColorIndices>
 80198ea:	f7fe f8b1 	bl	8017a50 <LCD_SetClipRectMax>
 80198ee:	f7fc fcaf 	bl	8016250 <GUI_Unlock>
 80198f2:	4648      	mov	r0, r9
 80198f4:	f7f8 fe9e 	bl	8012634 <GUI_SetDrawMode>
 80198f8:	f7fc fcaa 	bl	8016250 <GUI_Unlock>
 80198fc:	b004      	add	sp, #16
 80198fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019902:	462a      	mov	r2, r5
 8019904:	4621      	mov	r1, r4
 8019906:	4630      	mov	r0, r6
 8019908:	f001 fbd0 	bl	801b0ac <GUI_MEMDEV__WriteToActiveOpaque>
 801990c:	f003 fcf2 	bl	801d2f4 <WM__GetNextIVR>
 8019910:	2800      	cmp	r0, #0
 8019912:	d0cc      	beq.n	80198ae <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 8019914:	462a      	mov	r2, r5
 8019916:	4621      	mov	r1, r4
 8019918:	4630      	mov	r0, r6
 801991a:	f001 fbc7 	bl	801b0ac <GUI_MEMDEV__WriteToActiveOpaque>
 801991e:	f003 fce9 	bl	801d2f4 <WM__GetNextIVR>
 8019922:	2800      	cmp	r0, #0
 8019924:	d1ed      	bne.n	8019902 <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 8019926:	e7c2      	b.n	80198ae <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 8019928:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801992c:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8019930:	e7a6      	b.n	8019880 <GUI_MEMDEV_CopyToLCDAt.part.0+0x3c>
 8019932:	f7f8 fe0f 	bl	8012554 <GUI_SelectLCD>
 8019936:	e7c5      	b.n	80198c4 <GUI_MEMDEV_CopyToLCDAt.part.0+0x80>
 8019938:	f7f8 fe0c 	bl	8012554 <GUI_SelectLCD>
 801993c:	e7d7      	b.n	80198ee <GUI_MEMDEV_CopyToLCDAt.part.0+0xaa>
 801993e:	bf00      	nop
 8019940:	fffff001 	.word	0xfffff001
 8019944:	20000018 	.word	0x20000018

08019948 <GUI_MEMDEV__WriteToActiveAt>:
 8019948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801994c:	b082      	sub	sp, #8
 801994e:	460f      	mov	r7, r1
 8019950:	4690      	mov	r8, r2
 8019952:	4606      	mov	r6, r0
 8019954:	f7f8 f80c 	bl	8011970 <GUI_ALLOC_LockH>
 8019958:	4603      	mov	r3, r0
 801995a:	ac02      	add	r4, sp, #8
 801995c:	2116      	movs	r1, #22
 801995e:	681d      	ldr	r5, [r3, #0]
 8019960:	2000      	movs	r0, #0
 8019962:	f844 3d04 	str.w	r3, [r4, #-4]!
 8019966:	68eb      	ldr	r3, [r5, #12]
 8019968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801996a:	4798      	blx	r3
 801996c:	4605      	mov	r5, r0
 801996e:	4620      	mov	r0, r4
 8019970:	f7f8 f812 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019974:	b11d      	cbz	r5, 801997e <GUI_MEMDEV__WriteToActiveAt+0x36>
 8019976:	4642      	mov	r2, r8
 8019978:	4639      	mov	r1, r7
 801997a:	4630      	mov	r0, r6
 801997c:	47a8      	blx	r5
 801997e:	b002      	add	sp, #8
 8019980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019984 <GUI_MEMDEV__CreateFixed>:
 8019984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019988:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8019ab8 <GUI_MEMDEV__CreateFixed+0x134>
 801998c:	b087      	sub	sp, #28
 801998e:	4682      	mov	sl, r0
 8019990:	468b      	mov	fp, r1
 8019992:	f8d8 0000 	ldr.w	r0, [r8]
 8019996:	4617      	mov	r7, r2
 8019998:	461e      	mov	r6, r3
 801999a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801999c:	7c43      	ldrb	r3, [r0, #17]
 801999e:	2200      	movs	r2, #0
 80199a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80199a2:	f7f9 f89f 	bl	8012ae4 <GUI_DEVICE_Create>
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d04d      	beq.n	8019a46 <GUI_MEMDEV__CreateFixed+0xc2>
 80199aa:	6903      	ldr	r3, [r0, #16]
 80199ac:	4605      	mov	r5, r0
 80199ae:	689b      	ldr	r3, [r3, #8]
 80199b0:	4798      	blx	r3
 80199b2:	f7fe fbaf 	bl	8018114 <LCD__GetBPPDevice>
 80199b6:	fb00 f407 	mul.w	r4, r0, r7
 80199ba:	4681      	mov	r9, r0
 80199bc:	f7f8 f8a0 	bl	8011b00 <GUI_ALLOC_RequestSize>
 80199c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199c2:	3407      	adds	r4, #7
 80199c4:	f013 0301 	ands.w	r3, r3, #1
 80199c8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 80199cc:	d03f      	beq.n	8019a4e <GUI_MEMDEV__CreateFixed+0xca>
 80199ce:	2e00      	cmp	r6, #0
 80199d0:	dd2c      	ble.n	8019a2c <GUI_MEMDEV__CreateFixed+0xa8>
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d042      	beq.n	8019a5c <GUI_MEMDEV__CreateFixed+0xd8>
 80199d6:	fb04 f006 	mul.w	r0, r4, r6
 80199da:	3018      	adds	r0, #24
 80199dc:	f7f7 ffb0 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 80199e0:	4602      	mov	r2, r0
 80199e2:	b368      	cbz	r0, 8019a40 <GUI_MEMDEV__CreateFixed+0xbc>
 80199e4:	2300      	movs	r3, #0
 80199e6:	9302      	str	r3, [sp, #8]
 80199e8:	4610      	mov	r0, r2
 80199ea:	9203      	str	r2, [sp, #12]
 80199ec:	f7f7 ffc0 	bl	8011970 <GUI_ALLOC_LockH>
 80199f0:	9a02      	ldr	r2, [sp, #8]
 80199f2:	4603      	mov	r3, r0
 80199f4:	a806      	add	r0, sp, #24
 80199f6:	f8a3 a004 	strh.w	sl, [r3, #4]
 80199fa:	f8a3 b006 	strh.w	fp, [r3, #6]
 80199fe:	811f      	strh	r7, [r3, #8]
 8019a00:	815e      	strh	r6, [r3, #10]
 8019a02:	60dc      	str	r4, [r3, #12]
 8019a04:	f8c3 9010 	str.w	r9, [r3, #16]
 8019a08:	615a      	str	r2, [r3, #20]
 8019a0a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8019a0e:	601d      	str	r5, [r3, #0]
 8019a10:	f7f7 ffc2 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019a16:	f8d8 3000 	ldr.w	r3, [r8]
 8019a1a:	612a      	str	r2, [r5, #16]
 8019a1c:	9a03      	ldr	r2, [sp, #12]
 8019a1e:	4610      	mov	r0, r2
 8019a20:	60aa      	str	r2, [r5, #8]
 8019a22:	7c5b      	ldrb	r3, [r3, #17]
 8019a24:	61ab      	str	r3, [r5, #24]
 8019a26:	b007      	add	sp, #28
 8019a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2c:	2c00      	cmp	r4, #0
 8019a2e:	d134      	bne.n	8019a9a <GUI_MEMDEV__CreateFixed+0x116>
 8019a30:	4620      	mov	r0, r4
 8019a32:	4276      	negs	r6, r6
 8019a34:	4286      	cmp	r6, r0
 8019a36:	bfa8      	it	ge
 8019a38:	4606      	movge	r6, r0
 8019a3a:	b393      	cbz	r3, 8019aa2 <GUI_MEMDEV__CreateFixed+0x11e>
 8019a3c:	2e00      	cmp	r6, #0
 8019a3e:	dcca      	bgt.n	80199d6 <GUI_MEMDEV__CreateFixed+0x52>
 8019a40:	4628      	mov	r0, r5
 8019a42:	f7f9 f84d 	bl	8012ae0 <GUI_DEVICE_Delete>
 8019a46:	2000      	movs	r0, #0
 8019a48:	b007      	add	sp, #28
 8019a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	bfb8      	it	lt
 8019a52:	3003      	addlt	r0, #3
 8019a54:	1080      	asrs	r0, r0, #2
 8019a56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019a5a:	e7b8      	b.n	80199ce <GUI_MEMDEV__CreateFixed+0x4a>
 8019a5c:	9300      	str	r3, [sp, #0]
 8019a5e:	463a      	mov	r2, r7
 8019a60:	4633      	mov	r3, r6
 8019a62:	4659      	mov	r1, fp
 8019a64:	4650      	mov	r0, sl
 8019a66:	f001 faf1 	bl	801b04c <GUI_USAGE_BM_Create>
 8019a6a:	9002      	str	r0, [sp, #8]
 8019a6c:	fb04 f006 	mul.w	r0, r4, r6
 8019a70:	3018      	adds	r0, #24
 8019a72:	f7f8 f935 	bl	8011ce0 <GUI_ALLOC_AllocZero>
 8019a76:	4602      	mov	r2, r0
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	d1b5      	bne.n	80199e8 <GUI_MEMDEV__CreateFixed+0x64>
 8019a7c:	4628      	mov	r0, r5
 8019a7e:	9203      	str	r2, [sp, #12]
 8019a80:	f7f9 f82e 	bl	8012ae0 <GUI_DEVICE_Delete>
 8019a84:	9b02      	ldr	r3, [sp, #8]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d0dd      	beq.n	8019a46 <GUI_MEMDEV__CreateFixed+0xc2>
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f7f8 f908 	bl	8011ca0 <GUI_ALLOC_Free>
 8019a90:	9a03      	ldr	r2, [sp, #12]
 8019a92:	4610      	mov	r0, r2
 8019a94:	b007      	add	sp, #28
 8019a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a9a:	3818      	subs	r0, #24
 8019a9c:	fbb0 f0f4 	udiv	r0, r0, r4
 8019aa0:	e7c7      	b.n	8019a32 <GUI_MEMDEV__CreateFixed+0xae>
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	463a      	mov	r2, r7
 8019aa6:	4633      	mov	r3, r6
 8019aa8:	4659      	mov	r1, fp
 8019aaa:	4650      	mov	r0, sl
 8019aac:	f001 face 	bl	801b04c <GUI_USAGE_BM_Create>
 8019ab0:	2e00      	cmp	r6, #0
 8019ab2:	9002      	str	r0, [sp, #8]
 8019ab4:	dcda      	bgt.n	8019a6c <GUI_MEMDEV__CreateFixed+0xe8>
 8019ab6:	e7c3      	b.n	8019a40 <GUI_MEMDEV__CreateFixed+0xbc>
 8019ab8:	20000018 	.word	0x20000018

08019abc <GUI_MEMDEV_GetBitsPerPixel>:
 8019abc:	b530      	push	{r4, r5, lr}
 8019abe:	4604      	mov	r4, r0
 8019ac0:	b083      	sub	sp, #12
 8019ac2:	b198      	cbz	r0, 8019aec <GUI_MEMDEV_GetBitsPerPixel+0x30>
 8019ac4:	f7fc fbce 	bl	8016264 <GUI_Lock>
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f7f7 ff51 	bl	8011970 <GUI_ALLOC_LockH>
 8019ace:	6803      	ldr	r3, [r0, #0]
 8019ad0:	ad02      	add	r5, sp, #8
 8019ad2:	691b      	ldr	r3, [r3, #16]
 8019ad4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019ad8:	689b      	ldr	r3, [r3, #8]
 8019ada:	4798      	blx	r3
 8019adc:	f7fe fb1a 	bl	8018114 <LCD__GetBPPDevice>
 8019ae0:	4604      	mov	r4, r0
 8019ae2:	4628      	mov	r0, r5
 8019ae4:	f7f7 ff58 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019ae8:	f7fc fbb2 	bl	8016250 <GUI_Unlock>
 8019aec:	4620      	mov	r0, r4
 8019aee:	b003      	add	sp, #12
 8019af0:	bd30      	pop	{r4, r5, pc}
 8019af2:	bf00      	nop

08019af4 <GUI_MEMDEV_Delete>:
 8019af4:	b900      	cbnz	r0, 8019af8 <GUI_MEMDEV_Delete+0x4>
 8019af6:	4770      	bx	lr
 8019af8:	b510      	push	{r4, lr}
 8019afa:	b082      	sub	sp, #8
 8019afc:	4604      	mov	r4, r0
 8019afe:	f7fc fbb1 	bl	8016264 <GUI_Lock>
 8019b02:	4b10      	ldr	r3, [pc, #64]	; (8019b44 <GUI_MEMDEV_Delete+0x50>)
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b08:	429c      	cmp	r4, r3
 8019b0a:	d017      	beq.n	8019b3c <GUI_MEMDEV_Delete+0x48>
 8019b0c:	4620      	mov	r0, r4
 8019b0e:	f7f7 ff2f 	bl	8011970 <GUI_ALLOC_LockH>
 8019b12:	6943      	ldr	r3, [r0, #20]
 8019b14:	9001      	str	r0, [sp, #4]
 8019b16:	b963      	cbnz	r3, 8019b32 <GUI_MEMDEV_Delete+0x3e>
 8019b18:	6800      	ldr	r0, [r0, #0]
 8019b1a:	f7f8 ffe1 	bl	8012ae0 <GUI_DEVICE_Delete>
 8019b1e:	a801      	add	r0, sp, #4
 8019b20:	f7f7 ff3a 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019b24:	4620      	mov	r0, r4
 8019b26:	f7f8 f8bb 	bl	8011ca0 <GUI_ALLOC_Free>
 8019b2a:	f7fc fb91 	bl	8016250 <GUI_Unlock>
 8019b2e:	b002      	add	sp, #8
 8019b30:	bd10      	pop	{r4, pc}
 8019b32:	4618      	mov	r0, r3
 8019b34:	f001 f9a2 	bl	801ae7c <GUI_USAGE_DecUseCnt>
 8019b38:	9801      	ldr	r0, [sp, #4]
 8019b3a:	e7ed      	b.n	8019b18 <GUI_MEMDEV_Delete+0x24>
 8019b3c:	f7f8 fd0a 	bl	8012554 <GUI_SelectLCD>
 8019b40:	e7e4      	b.n	8019b0c <GUI_MEMDEV_Delete+0x18>
 8019b42:	bf00      	nop
 8019b44:	20000018 	.word	0x20000018

08019b48 <GUI_MEMDEV_CreateEx>:
 8019b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b4c:	b085      	sub	sp, #20
 8019b4e:	4606      	mov	r6, r0
 8019b50:	4690      	mov	r8, r2
 8019b52:	4699      	mov	r9, r3
 8019b54:	460f      	mov	r7, r1
 8019b56:	f7fc fb85 	bl	8016264 <GUI_Lock>
 8019b5a:	4a1c      	ldr	r2, [pc, #112]	; (8019bcc <GUI_MEMDEV_CreateEx+0x84>)
 8019b5c:	4b1c      	ldr	r3, [pc, #112]	; (8019bd0 <GUI_MEMDEV_CreateEx+0x88>)
 8019b5e:	6812      	ldr	r2, [r2, #0]
 8019b60:	7c50      	ldrb	r0, [r2, #17]
 8019b62:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8019b66:	e001      	b.n	8019b6c <GUI_MEMDEV_CreateEx+0x24>
 8019b68:	6824      	ldr	r4, [r4, #0]
 8019b6a:	b1fc      	cbz	r4, 8019bac <GUI_MEMDEV_CreateEx+0x64>
 8019b6c:	68e3      	ldr	r3, [r4, #12]
 8019b6e:	681a      	ldr	r2, [r3, #0]
 8019b70:	2a04      	cmp	r2, #4
 8019b72:	d1f9      	bne.n	8019b68 <GUI_MEMDEV_CreateEx+0x20>
 8019b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b76:	2101      	movs	r1, #1
 8019b78:	4620      	mov	r0, r4
 8019b7a:	4798      	blx	r3
 8019b7c:	4605      	mov	r5, r0
 8019b7e:	b1d8      	cbz	r0, 8019bb8 <GUI_MEMDEV_CreateEx+0x70>
 8019b80:	6924      	ldr	r4, [r4, #16]
 8019b82:	68a3      	ldr	r3, [r4, #8]
 8019b84:	4798      	blx	r3
 8019b86:	3001      	adds	r0, #1
 8019b88:	d018      	beq.n	8019bbc <GUI_MEMDEV_CreateEx+0x74>
 8019b8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b8c:	464b      	mov	r3, r9
 8019b8e:	9402      	str	r4, [sp, #8]
 8019b90:	4642      	mov	r2, r8
 8019b92:	9100      	str	r1, [sp, #0]
 8019b94:	4630      	mov	r0, r6
 8019b96:	9501      	str	r5, [sp, #4]
 8019b98:	4639      	mov	r1, r7
 8019b9a:	f7ff fef3 	bl	8019984 <GUI_MEMDEV__CreateFixed>
 8019b9e:	4604      	mov	r4, r0
 8019ba0:	f7fc fb56 	bl	8016250 <GUI_Unlock>
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	b005      	add	sp, #20
 8019ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bac:	f7f8 ff82 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8019bb0:	4604      	mov	r4, r0
 8019bb2:	b148      	cbz	r0, 8019bc8 <GUI_MEMDEV_CreateEx+0x80>
 8019bb4:	68c3      	ldr	r3, [r0, #12]
 8019bb6:	e7dd      	b.n	8019b74 <GUI_MEMDEV_CreateEx+0x2c>
 8019bb8:	4604      	mov	r4, r0
 8019bba:	e7f1      	b.n	8019ba0 <GUI_MEMDEV_CreateEx+0x58>
 8019bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bbe:	4c05      	ldr	r4, [pc, #20]	; (8019bd4 <GUI_MEMDEV_CreateEx+0x8c>)
 8019bc0:	f043 0301 	orr.w	r3, r3, #1
 8019bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8019bc6:	e7e0      	b.n	8019b8a <GUI_MEMDEV_CreateEx+0x42>
 8019bc8:	4620      	mov	r0, r4
 8019bca:	e7ec      	b.n	8019ba6 <GUI_MEMDEV_CreateEx+0x5e>
 8019bcc:	20000018 	.word	0x20000018
 8019bd0:	2002afd0 	.word	0x2002afd0
 8019bd4:	08023b28 	.word	0x08023b28

08019bd8 <GUI_MEMDEV_Select>:
 8019bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bda:	4f16      	ldr	r7, [pc, #88]	; (8019c34 <GUI_MEMDEV_Select+0x5c>)
 8019bdc:	b083      	sub	sp, #12
 8019bde:	4604      	mov	r4, r0
 8019be0:	f7fc fb40 	bl	8016264 <GUI_Lock>
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8019be8:	b1e4      	cbz	r4, 8019c24 <GUI_MEMDEV_Select+0x4c>
 8019bea:	b9c6      	cbnz	r6, 8019c1e <GUI_MEMDEV_Select+0x46>
 8019bec:	f003 ff28 	bl	801da40 <WM_Deactivate>
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f7f7 febd 	bl	8011970 <GUI_ALLOC_LockH>
 8019bf6:	ad02      	add	r5, sp, #8
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019bfe:	661c      	str	r4, [r3, #96]	; 0x60
 8019c00:	6800      	ldr	r0, [r0, #0]
 8019c02:	f7f8 ffbf 	bl	8012b84 <GUI_DEVICE_Link>
 8019c06:	4628      	mov	r0, r5
 8019c08:	f7f7 fec6 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019c0c:	f7fe fd14 	bl	8018638 <LCD_UpdateColorIndices>
 8019c10:	f7fd ff1e 	bl	8017a50 <LCD_SetClipRectMax>
 8019c14:	f7fc fb1c 	bl	8016250 <GUI_Unlock>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	b003      	add	sp, #12
 8019c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c1e:	f7f8 fc99 	bl	8012554 <GUI_SelectLCD>
 8019c22:	e7e3      	b.n	8019bec <GUI_MEMDEV_Select+0x14>
 8019c24:	f7f8 fc96 	bl	8012554 <GUI_SelectLCD>
 8019c28:	f7fc fb12 	bl	8016250 <GUI_Unlock>
 8019c2c:	4630      	mov	r0, r6
 8019c2e:	b003      	add	sp, #12
 8019c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c32:	bf00      	nop
 8019c34:	20000018 	.word	0x20000018

08019c38 <GUI_MEMDEV_CopyToLCD>:
 8019c38:	b900      	cbnz	r0, 8019c3c <GUI_MEMDEV_CopyToLCD+0x4>
 8019c3a:	4770      	bx	lr
 8019c3c:	4a01      	ldr	r2, [pc, #4]	; (8019c44 <GUI_MEMDEV_CopyToLCD+0xc>)
 8019c3e:	4611      	mov	r1, r2
 8019c40:	f7ff be00 	b.w	8019844 <GUI_MEMDEV_CopyToLCDAt.part.0>
 8019c44:	fffff001 	.word	0xfffff001

08019c48 <_GetDevData>:
 8019c48:	2901      	cmp	r1, #1
 8019c4a:	4802      	ldr	r0, [pc, #8]	; (8019c54 <_GetDevData+0xc>)
 8019c4c:	bf18      	it	ne
 8019c4e:	2000      	movne	r0, #0
 8019c50:	4770      	bx	lr
 8019c52:	bf00      	nop
 8019c54:	0802a77c 	.word	0x0802a77c

08019c58 <_GetDevFunc>:
 8019c58:	2916      	cmp	r1, #22
 8019c5a:	4802      	ldr	r0, [pc, #8]	; (8019c64 <_GetDevFunc+0xc>)
 8019c5c:	bf18      	it	ne
 8019c5e:	2000      	movne	r0, #0
 8019c60:	4770      	bx	lr
 8019c62:	bf00      	nop
 8019c64:	0801b0ad 	.word	0x0801b0ad

08019c68 <_SetOrg>:
 8019c68:	6800      	ldr	r0, [r0, #0]
 8019c6a:	b110      	cbz	r0, 8019c72 <_SetOrg+0xa>
 8019c6c:	68c3      	ldr	r3, [r0, #12]
 8019c6e:	6a1b      	ldr	r3, [r3, #32]
 8019c70:	4718      	bx	r3
 8019c72:	4770      	bx	lr

08019c74 <_GetRect>:
 8019c74:	b570      	push	{r4, r5, r6, lr}
 8019c76:	b082      	sub	sp, #8
 8019c78:	6880      	ldr	r0, [r0, #8]
 8019c7a:	460d      	mov	r5, r1
 8019c7c:	f7f7 fe78 	bl	8011970 <GUI_ALLOC_LockH>
 8019c80:	4602      	mov	r2, r0
 8019c82:	a802      	add	r0, sp, #8
 8019c84:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8019c88:	8914      	ldrh	r4, [r2, #8]
 8019c8a:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8019c8e:	8953      	ldrh	r3, [r2, #10]
 8019c90:	4434      	add	r4, r6
 8019c92:	802e      	strh	r6, [r5, #0]
 8019c94:	440b      	add	r3, r1
 8019c96:	3c01      	subs	r4, #1
 8019c98:	8069      	strh	r1, [r5, #2]
 8019c9a:	3b01      	subs	r3, #1
 8019c9c:	80ac      	strh	r4, [r5, #4]
 8019c9e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8019ca2:	80eb      	strh	r3, [r5, #6]
 8019ca4:	f7f7 fe78 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019ca8:	b002      	add	sp, #8
 8019caa:	bd70      	pop	{r4, r5, r6, pc}

08019cac <_DrawBitmap>:
 8019cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb0:	b095      	sub	sp, #84	; 0x54
 8019cb2:	460c      	mov	r4, r1
 8019cb4:	920b      	str	r2, [sp, #44]	; 0x2c
 8019cb6:	4aaa      	ldr	r2, [pc, #680]	; (8019f60 <_DrawBitmap+0x2b4>)
 8019cb8:	900d      	str	r0, [sp, #52]	; 0x34
 8019cba:	6812      	ldr	r2, [r2, #0]
 8019cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8019cbe:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8019cc0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8019cc2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8019cc6:	f7f7 fe53 	bl	8011970 <GUI_ALLOC_LockH>
 8019cca:	6942      	ldr	r2, [r0, #20]
 8019ccc:	9011      	str	r0, [sp, #68]	; 0x44
 8019cce:	2a00      	cmp	r2, #0
 8019cd0:	f040 80b3 	bne.w	8019e3a <_DrawBitmap+0x18e>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	4610      	mov	r0, r2
 8019cd8:	68db      	ldr	r3, [r3, #12]
 8019cda:	9012      	str	r0, [sp, #72]	; 0x48
 8019cdc:	a811      	add	r0, sp, #68	; 0x44
 8019cde:	9307      	str	r3, [sp, #28]
 8019ce0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019ce2:	18e3      	adds	r3, r4, r3
 8019ce4:	9308      	str	r3, [sp, #32]
 8019ce6:	f7f7 fe57 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019cea:	4b9d      	ldr	r3, [pc, #628]	; (8019f60 <_DrawBitmap+0x2b4>)
 8019cec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	b120      	cbz	r0, 8019cfc <_DrawBitmap+0x50>
 8019cf2:	7c1a      	ldrb	r2, [r3, #16]
 8019cf4:	4c9a      	ldr	r4, [pc, #616]	; (8019f60 <_DrawBitmap+0x2b4>)
 8019cf6:	0791      	lsls	r1, r2, #30
 8019cf8:	f000 80d4 	beq.w	8019ea4 <_DrawBitmap+0x1f8>
 8019cfc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8019cfe:	f7f7 fe37 	bl	8011970 <GUI_ALLOC_LockH>
 8019d02:	4604      	mov	r4, r0
 8019d04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019d06:	a814      	add	r0, sp, #80	; 0x50
 8019d08:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019d0c:	68e3      	ldr	r3, [r4, #12]
 8019d0e:	1a8a      	subs	r2, r1, r2
 8019d10:	f9b4 b004 	ldrsh.w	fp, [r4, #4]
 8019d14:	f840 4d04 	str.w	r4, [r0, #-4]!
 8019d18:	fb03 f302 	mul.w	r3, r3, r2
 8019d1c:	9a08      	ldr	r2, [sp, #32]
 8019d1e:	3318      	adds	r3, #24
 8019d20:	ebcb 0b02 	rsb	fp, fp, r2
 8019d24:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8019d28:	18e3      	adds	r3, r4, r3
 8019d2a:	9302      	str	r3, [sp, #8]
 8019d2c:	f7f7 fe34 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019d30:	2d10      	cmp	r5, #16
 8019d32:	f000 8087 	beq.w	8019e44 <_DrawBitmap+0x198>
 8019d36:	2d17      	cmp	r5, #23
 8019d38:	dd45      	ble.n	8019dc6 <_DrawBitmap+0x11a>
 8019d3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f340 84b9 	ble.w	801a6b4 <_DrawBitmap+0xa08>
 8019d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019d44:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019d48:	f1a3 0a04 	sub.w	sl, r3, #4
 8019d4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019d4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019d50:	eb03 0b09 	add.w	fp, r3, r9
 8019d54:	f8cd b00c 	str.w	fp, [sp, #12]
 8019d58:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8019d5c:	f11a 0f04 	cmn.w	sl, #4
 8019d60:	d01f      	beq.n	8019da2 <_DrawBitmap+0xf6>
 8019d62:	9f02      	ldr	r7, [sp, #8]
 8019d64:	b1ef      	cbz	r7, 8019da2 <_DrawBitmap+0xf6>
 8019d66:	2e00      	cmp	r6, #0
 8019d68:	d059      	beq.n	8019e1e <_DrawBitmap+0x172>
 8019d6a:	68b0      	ldr	r0, [r6, #8]
 8019d6c:	464a      	mov	r2, r9
 8019d6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019d70:	46d0      	mov	r8, sl
 8019d72:	6844      	ldr	r4, [r0, #4]
 8019d74:	4630      	mov	r0, r6
 8019d76:	462b      	mov	r3, r5
 8019d78:	9908      	ldr	r1, [sp, #32]
 8019d7a:	47a0      	blx	r4
 8019d7c:	9c08      	ldr	r4, [sp, #32]
 8019d7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019d82:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	4798      	blx	r3
 8019d8a:	68b3      	ldr	r3, [r6, #8]
 8019d8c:	4621      	mov	r1, r4
 8019d8e:	f827 0b02 	strh.w	r0, [r7], #2
 8019d92:	464a      	mov	r2, r9
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4630      	mov	r0, r6
 8019d98:	3401      	adds	r4, #1
 8019d9a:	4798      	blx	r3
 8019d9c:	3d01      	subs	r5, #1
 8019d9e:	d1ee      	bne.n	8019d7e <_DrawBitmap+0xd2>
 8019da0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019da2:	9b02      	ldr	r3, [sp, #8]
 8019da4:	f109 0901 	add.w	r9, r9, #1
 8019da8:	9a07      	ldr	r2, [sp, #28]
 8019daa:	4413      	add	r3, r2
 8019dac:	9302      	str	r3, [sp, #8]
 8019dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019db0:	449a      	add	sl, r3
 8019db2:	9b03      	ldr	r3, [sp, #12]
 8019db4:	4599      	cmp	r9, r3
 8019db6:	d1d1      	bne.n	8019d5c <_DrawBitmap+0xb0>
 8019db8:	b116      	cbz	r6, 8019dc0 <_DrawBitmap+0x114>
 8019dba:	a812      	add	r0, sp, #72	; 0x48
 8019dbc:	f7f7 fdec 	bl	8011998 <GUI_ALLOC_UnlockH>
 8019dc0:	b015      	add	sp, #84	; 0x54
 8019dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc6:	2d08      	cmp	r5, #8
 8019dc8:	d075      	beq.n	8019eb6 <_DrawBitmap+0x20a>
 8019dca:	4b66      	ldr	r3, [pc, #408]	; (8019f64 <_DrawBitmap+0x2b8>)
 8019dcc:	f1b9 0f00 	cmp.w	r9, #0
 8019dd0:	bf08      	it	eq
 8019dd2:	4699      	moveq	r9, r3
 8019dd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f340 812f 	ble.w	801a03a <_DrawBitmap+0x38e>
 8019ddc:	461c      	mov	r4, r3
 8019dde:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019de2:	0052      	lsls	r2, r2, #1
 8019de4:	9807      	ldr	r0, [sp, #28]
 8019de6:	009b      	lsls	r3, r3, #2
 8019de8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8019dea:	9206      	str	r2, [sp, #24]
 8019dec:	9303      	str	r3, [sp, #12]
 8019dee:	2300      	movs	r3, #0
 8019df0:	9a02      	ldr	r2, [sp, #8]
 8019df2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8019df4:	2d02      	cmp	r5, #2
 8019df6:	f000 8127 	beq.w	801a048 <_DrawBitmap+0x39c>
 8019dfa:	2d04      	cmp	r5, #4
 8019dfc:	f000 81fd 	beq.w	801a1fa <_DrawBitmap+0x54e>
 8019e00:	2d01      	cmp	r5, #1
 8019e02:	f000 8337 	beq.w	801a474 <_DrawBitmap+0x7c8>
 8019e06:	3301      	adds	r3, #1
 8019e08:	4431      	add	r1, r6
 8019e0a:	4402      	add	r2, r0
 8019e0c:	429c      	cmp	r4, r3
 8019e0e:	dcf1      	bgt.n	8019df4 <_DrawBitmap+0x148>
 8019e10:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8019e14:	46de      	mov	lr, fp
 8019e16:	f1be 0f00 	cmp.w	lr, #0
 8019e1a:	d1ce      	bne.n	8019dba <_DrawBitmap+0x10e>
 8019e1c:	e7d0      	b.n	8019dc0 <_DrawBitmap+0x114>
 8019e1e:	463d      	mov	r5, r7
 8019e20:	4656      	mov	r6, sl
 8019e22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019e24:	f8db 3010 	ldr.w	r3, [fp, #16]
 8019e28:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	4798      	blx	r3
 8019e30:	3c01      	subs	r4, #1
 8019e32:	f825 0b02 	strh.w	r0, [r5], #2
 8019e36:	d1f5      	bne.n	8019e24 <_DrawBitmap+0x178>
 8019e38:	e7b2      	b.n	8019da0 <_DrawBitmap+0xf4>
 8019e3a:	4610      	mov	r0, r2
 8019e3c:	f7f7 fd98 	bl	8011970 <GUI_ALLOC_LockH>
 8019e40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e42:	e749      	b.n	8019cd8 <_DrawBitmap+0x2c>
 8019e44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019e46:	2d00      	cmp	r5, #0
 8019e48:	f000 8426 	beq.w	801a698 <_DrawBitmap+0x9ec>
 8019e4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	ddb3      	ble.n	8019dba <_DrawBitmap+0x10e>
 8019e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e54:	2400      	movs	r4, #0
 8019e56:	4f44      	ldr	r7, [pc, #272]	; (8019f68 <_DrawBitmap+0x2bc>)
 8019e58:	005e      	lsls	r6, r3, #1
 8019e5a:	46a0      	mov	r8, r4
 8019e5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019e60:	9603      	str	r6, [sp, #12]
 8019e62:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8019e66:	9e02      	ldr	r6, [sp, #8]
 8019e68:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8019e6c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8019e6e:	b184      	cbz	r4, 8019e92 <_DrawBitmap+0x1e6>
 8019e70:	4621      	mov	r1, r4
 8019e72:	9a03      	ldr	r2, [sp, #12]
 8019e74:	4630      	mov	r0, r6
 8019e76:	b166      	cbz	r6, 8019e92 <_DrawBitmap+0x1e6>
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	4798      	blx	r3
 8019e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e7e:	4628      	mov	r0, r5
 8019e80:	9908      	ldr	r1, [sp, #32]
 8019e82:	eb03 0208 	add.w	r2, r3, r8
 8019e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e88:	b115      	cbz	r5, 8019e90 <_DrawBitmap+0x1e4>
 8019e8a:	68ad      	ldr	r5, [r5, #8]
 8019e8c:	686d      	ldr	r5, [r5, #4]
 8019e8e:	47a8      	blx	r5
 8019e90:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019e92:	f108 0801 	add.w	r8, r8, #1
 8019e96:	4454      	add	r4, sl
 8019e98:	445e      	add	r6, fp
 8019e9a:	45c1      	cmp	r9, r8
 8019e9c:	dce7      	bgt.n	8019e6e <_DrawBitmap+0x1c2>
 8019e9e:	2d00      	cmp	r5, #0
 8019ea0:	d18b      	bne.n	8019dba <_DrawBitmap+0x10e>
 8019ea2:	e78d      	b.n	8019dc0 <_DrawBitmap+0x114>
 8019ea4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ea8:	9300      	str	r3, [sp, #0]
 8019eaa:	9908      	ldr	r1, [sp, #32]
 8019eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019eae:	f000 ffff 	bl	801aeb0 <GUI_USAGE_AddRect>
 8019eb2:	6823      	ldr	r3, [r4, #0]
 8019eb4:	e722      	b.n	8019cfc <_DrawBitmap+0x50>
 8019eb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	f340 8404 	ble.w	801a6c6 <_DrawBitmap+0xa1a>
 8019ebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ec2:	3b01      	subs	r3, #1
 8019ec4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019ec6:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8019eca:	9303      	str	r3, [sp, #12]
 8019ecc:	9b02      	ldr	r3, [sp, #8]
 8019ece:	4658      	mov	r0, fp
 8019ed0:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8019ed4:	46a9      	mov	r9, r5
 8019ed6:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 8019eda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019edc:	442b      	add	r3, r5
 8019ede:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8019ee0:	9304      	str	r3, [sp, #16]
 8019ee2:	9b03      	ldr	r3, [sp, #12]
 8019ee4:	1c59      	adds	r1, r3, #1
 8019ee6:	4b1e      	ldr	r3, [pc, #120]	; (8019f60 <_DrawBitmap+0x2b4>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	7c1b      	ldrb	r3, [r3, #16]
 8019eec:	2d00      	cmp	r5, #0
 8019eee:	d048      	beq.n	8019f82 <_DrawBitmap+0x2d6>
 8019ef0:	f013 0303 	ands.w	r3, r3, #3
 8019ef4:	d03a      	beq.n	8019f6c <_DrawBitmap+0x2c0>
 8019ef6:	2b02      	cmp	r3, #2
 8019ef8:	d11e      	bne.n	8019f38 <_DrawBitmap+0x28c>
 8019efa:	f1bb 0f00 	cmp.w	fp, #0
 8019efe:	d063      	beq.n	8019fc8 <_DrawBitmap+0x31c>
 8019f00:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8019f04:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019f08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019f0a:	9c08      	ldr	r4, [sp, #32]
 8019f0c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019f10:	4621      	mov	r1, r4
 8019f12:	464a      	mov	r2, r9
 8019f14:	3401      	adds	r4, #1
 8019f16:	4658      	mov	r0, fp
 8019f18:	b13b      	cbz	r3, 8019f2a <_DrawBitmap+0x27e>
 8019f1a:	f855 e023 	ldr.w	lr, [r5, r3, lsl #2]
 8019f1e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8019f22:	f8a8 e000 	strh.w	lr, [r8]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	4798      	blx	r3
 8019f2a:	3f01      	subs	r7, #1
 8019f2c:	f108 0802 	add.w	r8, r8, #2
 8019f30:	d1ec      	bne.n	8019f0c <_DrawBitmap+0x260>
 8019f32:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8019f36:	4658      	mov	r0, fp
 8019f38:	9b02      	ldr	r3, [sp, #8]
 8019f3a:	f109 0901 	add.w	r9, r9, #1
 8019f3e:	9a07      	ldr	r2, [sp, #28]
 8019f40:	4619      	mov	r1, r3
 8019f42:	9b03      	ldr	r3, [sp, #12]
 8019f44:	4416      	add	r6, r2
 8019f46:	4411      	add	r1, r2
 8019f48:	9102      	str	r1, [sp, #8]
 8019f4a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019f4c:	440b      	add	r3, r1
 8019f4e:	9303      	str	r3, [sp, #12]
 8019f50:	9b04      	ldr	r3, [sp, #16]
 8019f52:	454b      	cmp	r3, r9
 8019f54:	d1c5      	bne.n	8019ee2 <_DrawBitmap+0x236>
 8019f56:	2800      	cmp	r0, #0
 8019f58:	f47f af2f 	bne.w	8019dba <_DrawBitmap+0x10e>
 8019f5c:	e730      	b.n	8019dc0 <_DrawBitmap+0x114>
 8019f5e:	bf00      	nop
 8019f60:	20000018 	.word	0x20000018
 8019f64:	0802a7b0 	.word	0x0802a7b0
 8019f68:	2000004c 	.word	0x2000004c
 8019f6c:	9a03      	ldr	r2, [sp, #12]
 8019f6e:	9b02      	ldr	r3, [sp, #8]
 8019f70:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8019f74:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8019f78:	f823 1b02 	strh.w	r1, [r3], #2
 8019f7c:	42b3      	cmp	r3, r6
 8019f7e:	d1f7      	bne.n	8019f70 <_DrawBitmap+0x2c4>
 8019f80:	e7da      	b.n	8019f38 <_DrawBitmap+0x28c>
 8019f82:	f013 0303 	ands.w	r3, r3, #3
 8019f86:	f000 8365 	beq.w	801a654 <_DrawBitmap+0x9a8>
 8019f8a:	2b02      	cmp	r3, #2
 8019f8c:	d1d4      	bne.n	8019f38 <_DrawBitmap+0x28c>
 8019f8e:	f1bb 0f00 	cmp.w	fp, #0
 8019f92:	f000 8377 	beq.w	801a684 <_DrawBitmap+0x9d8>
 8019f96:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8019f9a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8019f9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019fa0:	9c08      	ldr	r4, [sp, #32]
 8019fa2:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8019fa6:	4621      	mov	r1, r4
 8019fa8:	464a      	mov	r2, r9
 8019faa:	3401      	adds	r4, #1
 8019fac:	4658      	mov	r0, fp
 8019fae:	b133      	cbz	r3, 8019fbe <_DrawBitmap+0x312>
 8019fb0:	f8db e008 	ldr.w	lr, [fp, #8]
 8019fb4:	f8a8 3000 	strh.w	r3, [r8]
 8019fb8:	f8de 3000 	ldr.w	r3, [lr]
 8019fbc:	4798      	blx	r3
 8019fbe:	3f01      	subs	r7, #1
 8019fc0:	f108 0802 	add.w	r8, r8, #2
 8019fc4:	d1ed      	bne.n	8019fa2 <_DrawBitmap+0x2f6>
 8019fc6:	e7b4      	b.n	8019f32 <_DrawBitmap+0x286>
 8019fc8:	9903      	ldr	r1, [sp, #12]
 8019fca:	9b02      	ldr	r3, [sp, #8]
 8019fcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019fd0:	b112      	cbz	r2, 8019fd8 <_DrawBitmap+0x32c>
 8019fd2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019fd6:	801a      	strh	r2, [r3, #0]
 8019fd8:	3302      	adds	r3, #2
 8019fda:	429e      	cmp	r6, r3
 8019fdc:	d1f6      	bne.n	8019fcc <_DrawBitmap+0x320>
 8019fde:	e7aa      	b.n	8019f36 <_DrawBitmap+0x28a>
 8019fe0:	4642      	mov	r2, r8
 8019fe2:	9b03      	ldr	r3, [sp, #12]
 8019fe4:	f014 0f01 	tst.w	r4, #1
 8019fe8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019fec:	d003      	beq.n	8019ff6 <_DrawBitmap+0x34a>
 8019fee:	8819      	ldrh	r1, [r3, #0]
 8019ff0:	ea8a 0101 	eor.w	r1, sl, r1
 8019ff4:	8019      	strh	r1, [r3, #0]
 8019ff6:	3a01      	subs	r2, #1
 8019ff8:	f103 0302 	add.w	r3, r3, #2
 8019ffc:	d1f2      	bne.n	8019fe4 <_DrawBitmap+0x338>
 8019ffe:	9b03      	ldr	r3, [sp, #12]
 801a000:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801a004:	9303      	str	r3, [sp, #12]
 801a006:	f1b9 0f00 	cmp.w	r9, #0
 801a00a:	f040 82c4 	bne.w	801a596 <_DrawBitmap+0x8ea>
 801a00e:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 801a012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a014:	a811      	add	r0, sp, #68	; 0x44
 801a016:	9a07      	ldr	r2, [sp, #28]
 801a018:	3301      	adds	r3, #1
 801a01a:	461c      	mov	r4, r3
 801a01c:	930a      	str	r3, [sp, #40]	; 0x28
 801a01e:	9b02      	ldr	r3, [sp, #8]
 801a020:	4413      	add	r3, r2
 801a022:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a024:	9302      	str	r3, [sp, #8]
 801a026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a028:	4413      	add	r3, r2
 801a02a:	930c      	str	r3, [sp, #48]	; 0x30
 801a02c:	f7f7 fcb4 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a030:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a032:	461a      	mov	r2, r3
 801a034:	42a2      	cmp	r2, r4
 801a036:	f300 8228 	bgt.w	801a48a <_DrawBitmap+0x7de>
 801a03a:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 801a03e:	f1be 0f00 	cmp.w	lr, #0
 801a042:	f47f aeba 	bne.w	8019dba <_DrawBitmap+0x10e>
 801a046:	e6bb      	b.n	8019dc0 <_DrawBitmap+0x114>
 801a048:	930a      	str	r3, [sp, #40]	; 0x28
 801a04a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a04c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801a050:	f1c3 0304 	rsb	r3, r3, #4
 801a054:	9202      	str	r2, [sp, #8]
 801a056:	46da      	mov	sl, fp
 801a058:	46cb      	mov	fp, r9
 801a05a:	b2db      	uxtb	r3, r3
 801a05c:	9121      	str	r1, [sp, #132]	; 0x84
 801a05e:	930c      	str	r3, [sp, #48]	; 0x30
 801a060:	46d6      	mov	lr, sl
 801a062:	4657      	mov	r7, sl
 801a064:	4ba3      	ldr	r3, [pc, #652]	; (801a2f4 <_DrawBitmap+0x648>)
 801a066:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	7814      	ldrb	r4, [r2, #0]
 801a06c:	7c1b      	ldrb	r3, [r3, #16]
 801a06e:	9a06      	ldr	r2, [sp, #24]
 801a070:	f003 0303 	and.w	r3, r3, #3
 801a074:	4094      	lsls	r4, r2
 801a076:	2b01      	cmp	r3, #1
 801a078:	b2e4      	uxtb	r4, r4
 801a07a:	f000 809e 	beq.w	801a1ba <_DrawBitmap+0x50e>
 801a07e:	d37c      	bcc.n	801a17a <_DrawBitmap+0x4ce>
 801a080:	2b02      	cmp	r3, #2
 801a082:	d167      	bne.n	801a154 <_DrawBitmap+0x4a8>
 801a084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a088:	9303      	str	r3, [sp, #12]
 801a08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a08c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801a090:	9305      	str	r3, [sp, #20]
 801a092:	9b08      	ldr	r3, [sp, #32]
 801a094:	9d02      	ldr	r5, [sp, #8]
 801a096:	9304      	str	r3, [sp, #16]
 801a098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a09a:	eb03 0a02 	add.w	sl, r3, r2
 801a09e:	9a03      	ldr	r2, [sp, #12]
 801a0a0:	9b03      	ldr	r3, [sp, #12]
 801a0a2:	4591      	cmp	r9, r2
 801a0a4:	bfc8      	it	gt
 801a0a6:	fa5f f982 	uxtbgt.w	r9, r2
 801a0aa:	ebc9 0303 	rsb	r3, r9, r3
 801a0ae:	f109 39ff 	add.w	r9, r9, #4294967295
 801a0b2:	9303      	str	r3, [sp, #12]
 801a0b4:	b34f      	cbz	r7, 801a10a <_DrawBitmap+0x45e>
 801a0b6:	fa5f f989 	uxtb.w	r9, r9
 801a0ba:	9e04      	ldr	r6, [sp, #16]
 801a0bc:	f109 0801 	add.w	r8, r9, #1
 801a0c0:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 801a0c4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801a0c8:	4631      	mov	r1, r6
 801a0ca:	ea4f 1394 	mov.w	r3, r4, lsr #6
 801a0ce:	f106 0601 	add.w	r6, r6, #1
 801a0d2:	4652      	mov	r2, sl
 801a0d4:	4638      	mov	r0, r7
 801a0d6:	d006      	beq.n	801a0e6 <_DrawBitmap+0x43a>
 801a0d8:	f85b e023 	ldr.w	lr, [fp, r3, lsl #2]
 801a0dc:	68bb      	ldr	r3, [r7, #8]
 801a0de:	f8a5 e000 	strh.w	lr, [r5]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	4798      	blx	r3
 801a0e6:	3502      	adds	r5, #2
 801a0e8:	00a4      	lsls	r4, r4, #2
 801a0ea:	4545      	cmp	r5, r8
 801a0ec:	b2e4      	uxtb	r4, r4
 801a0ee:	d1e9      	bne.n	801a0c4 <_DrawBitmap+0x418>
 801a0f0:	9b04      	ldr	r3, [sp, #16]
 801a0f2:	3301      	adds	r3, #1
 801a0f4:	444b      	add	r3, r9
 801a0f6:	9304      	str	r3, [sp, #16]
 801a0f8:	9b03      	ldr	r3, [sp, #12]
 801a0fa:	b1d3      	cbz	r3, 801a132 <_DrawBitmap+0x486>
 801a0fc:	9b05      	ldr	r3, [sp, #20]
 801a0fe:	f04f 0904 	mov.w	r9, #4
 801a102:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801a106:	9305      	str	r3, [sp, #20]
 801a108:	e7c9      	b.n	801a09e <_DrawBitmap+0x3f2>
 801a10a:	fa5f f989 	uxtb.w	r9, r9
 801a10e:	f109 0101 	add.w	r1, r9, #1
 801a112:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 801a116:	00a3      	lsls	r3, r4, #2
 801a118:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801a11c:	ea4f 1294 	mov.w	r2, r4, lsr #6
 801a120:	b2dc      	uxtb	r4, r3
 801a122:	d002      	beq.n	801a12a <_DrawBitmap+0x47e>
 801a124:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 801a128:	802b      	strh	r3, [r5, #0]
 801a12a:	3502      	adds	r5, #2
 801a12c:	42a9      	cmp	r1, r5
 801a12e:	d1f2      	bne.n	801a116 <_DrawBitmap+0x46a>
 801a130:	e7de      	b.n	801a0f0 <_DrawBitmap+0x444>
 801a132:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a134:	46be      	mov	lr, r7
 801a136:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a138:	9920      	ldr	r1, [sp, #128]	; 0x80
 801a13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a13c:	440a      	add	r2, r1
 801a13e:	9907      	ldr	r1, [sp, #28]
 801a140:	3301      	adds	r3, #1
 801a142:	9221      	str	r2, [sp, #132]	; 0x84
 801a144:	9a02      	ldr	r2, [sp, #8]
 801a146:	930a      	str	r3, [sp, #40]	; 0x28
 801a148:	440a      	add	r2, r1
 801a14a:	9202      	str	r2, [sp, #8]
 801a14c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a14e:	429a      	cmp	r2, r3
 801a150:	dc88      	bgt.n	801a064 <_DrawBitmap+0x3b8>
 801a152:	e660      	b.n	8019e16 <_DrawBitmap+0x16a>
 801a154:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a156:	46ba      	mov	sl, r7
 801a158:	9920      	ldr	r1, [sp, #128]	; 0x80
 801a15a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a15c:	440a      	add	r2, r1
 801a15e:	9907      	ldr	r1, [sp, #28]
 801a160:	3301      	adds	r3, #1
 801a162:	9221      	str	r2, [sp, #132]	; 0x84
 801a164:	9a02      	ldr	r2, [sp, #8]
 801a166:	930a      	str	r3, [sp, #40]	; 0x28
 801a168:	440a      	add	r2, r1
 801a16a:	9202      	str	r2, [sp, #8]
 801a16c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a16e:	429a      	cmp	r2, r3
 801a170:	f73f af76 	bgt.w	801a060 <_DrawBitmap+0x3b4>
 801a174:	46bb      	mov	fp, r7
 801a176:	46de      	mov	lr, fp
 801a178:	e64d      	b.n	8019e16 <_DrawBitmap+0x16a>
 801a17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a17c:	9e02      	ldr	r6, [sp, #8]
 801a17e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a180:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 801a184:	42ab      	cmp	r3, r5
 801a186:	bfc8      	it	gt
 801a188:	b2eb      	uxtbgt	r3, r5
 801a18a:	1e58      	subs	r0, r3, #1
 801a18c:	1aed      	subs	r5, r5, r3
 801a18e:	1eb3      	subs	r3, r6, #2
 801a190:	b2c0      	uxtb	r0, r0
 801a192:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 801a196:	09a2      	lsrs	r2, r4, #6
 801a198:	00a4      	lsls	r4, r4, #2
 801a19a:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 801a19e:	b2e4      	uxtb	r4, r4
 801a1a0:	f823 2f02 	strh.w	r2, [r3, #2]!
 801a1a4:	4299      	cmp	r1, r3
 801a1a6:	d1f6      	bne.n	801a196 <_DrawBitmap+0x4ea>
 801a1a8:	3001      	adds	r0, #1
 801a1aa:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a1ae:	2d00      	cmp	r5, #0
 801a1b0:	d0c1      	beq.n	801a136 <_DrawBitmap+0x48a>
 801a1b2:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801a1b6:	2304      	movs	r3, #4
 801a1b8:	e7e4      	b.n	801a184 <_DrawBitmap+0x4d8>
 801a1ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a1bc:	9b02      	ldr	r3, [sp, #8]
 801a1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1c0:	460a      	mov	r2, r1
 801a1c2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801a1c4:	4282      	cmp	r2, r0
 801a1c6:	bfc8      	it	gt
 801a1c8:	b2c2      	uxtbgt	r2, r0
 801a1ca:	1e51      	subs	r1, r2, #1
 801a1cc:	1a80      	subs	r0, r0, r2
 801a1ce:	b2c9      	uxtb	r1, r1
 801a1d0:	3101      	adds	r1, #1
 801a1d2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801a1d6:	00a2      	lsls	r2, r4, #2
 801a1d8:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801a1dc:	b2d4      	uxtb	r4, r2
 801a1de:	d003      	beq.n	801a1e8 <_DrawBitmap+0x53c>
 801a1e0:	881a      	ldrh	r2, [r3, #0]
 801a1e2:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 801a1e6:	801a      	strh	r2, [r3, #0]
 801a1e8:	3302      	adds	r3, #2
 801a1ea:	428b      	cmp	r3, r1
 801a1ec:	d1f3      	bne.n	801a1d6 <_DrawBitmap+0x52a>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	d0a1      	beq.n	801a136 <_DrawBitmap+0x48a>
 801a1f2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 801a1f6:	2204      	movs	r2, #4
 801a1f8:	e7e4      	b.n	801a1c4 <_DrawBitmap+0x518>
 801a1fa:	9121      	str	r1, [sp, #132]	; 0x84
 801a1fc:	46ca      	mov	sl, r9
 801a1fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 801a200:	930a      	str	r3, [sp, #40]	; 0x28
 801a202:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801a206:	f1c1 0302 	rsb	r3, r1, #2
 801a20a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 801a20e:	b2d9      	uxtb	r1, r3
 801a210:	465f      	mov	r7, fp
 801a212:	4613      	mov	r3, r2
 801a214:	9106      	str	r1, [sp, #24]
 801a216:	3302      	adds	r3, #2
 801a218:	46be      	mov	lr, r7
 801a21a:	46cb      	mov	fp, r9
 801a21c:	9302      	str	r3, [sp, #8]
 801a21e:	4b35      	ldr	r3, [pc, #212]	; (801a2f4 <_DrawBitmap+0x648>)
 801a220:	9a02      	ldr	r2, [sp, #8]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	f1a2 0802 	sub.w	r8, r2, #2
 801a228:	9903      	ldr	r1, [sp, #12]
 801a22a:	7c1b      	ldrb	r3, [r3, #16]
 801a22c:	f89b 2000 	ldrb.w	r2, [fp]
 801a230:	f003 0303 	and.w	r3, r3, #3
 801a234:	408a      	lsls	r2, r1
 801a236:	2b01      	cmp	r3, #1
 801a238:	b2d4      	uxtb	r4, r2
 801a23a:	f000 80cb 	beq.w	801a3d4 <_DrawBitmap+0x728>
 801a23e:	f0c0 8096 	bcc.w	801a36e <_DrawBitmap+0x6c2>
 801a242:	2b02      	cmp	r3, #2
 801a244:	f040 8083 	bne.w	801a34e <_DrawBitmap+0x6a2>
 801a248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a24c:	440b      	add	r3, r1
 801a24e:	4619      	mov	r1, r3
 801a250:	9305      	str	r3, [sp, #20]
 801a252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a254:	2b00      	cmp	r3, #0
 801a256:	f000 80e1 	beq.w	801a41c <_DrawBitmap+0x770>
 801a25a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 801a25e:	f040 8202 	bne.w	801a666 <_DrawBitmap+0x9ba>
 801a262:	9b08      	ldr	r3, [sp, #32]
 801a264:	f10b 0601 	add.w	r6, fp, #1
 801a268:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a26c:	1c59      	adds	r1, r3, #1
 801a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a270:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a274:	3b01      	subs	r3, #1
 801a276:	2b01      	cmp	r3, #1
 801a278:	dd4c      	ble.n	801a314 <_DrawBitmap+0x668>
 801a27a:	3b02      	subs	r3, #2
 801a27c:	2f00      	cmp	r7, #0
 801a27e:	f000 80d1 	beq.w	801a424 <_DrawBitmap+0x778>
 801a282:	9304      	str	r3, [sp, #16]
 801a284:	085b      	lsrs	r3, r3, #1
 801a286:	1c8a      	adds	r2, r1, #2
 801a288:	f108 0904 	add.w	r9, r8, #4
 801a28c:	930c      	str	r3, [sp, #48]	; 0x30
 801a28e:	005b      	lsls	r3, r3, #1
 801a290:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801a294:	460d      	mov	r5, r1
 801a296:	930d      	str	r3, [sp, #52]	; 0x34
 801a298:	18d3      	adds	r3, r2, r3
 801a29a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 801a29e:	920e      	str	r2, [sp, #56]	; 0x38
 801a2a0:	469b      	mov	fp, r3
 801a2a2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a2a6:	e01a      	b.n	801a2de <_DrawBitmap+0x632>
 801a2a8:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	f829 ec04 	strh.w	lr, [r9, #-4]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	4798      	blx	r3
 801a2b6:	f014 040f 	ands.w	r4, r4, #15
 801a2ba:	d009      	beq.n	801a2d0 <_DrawBitmap+0x624>
 801a2bc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801a2c0:	4642      	mov	r2, r8
 801a2c2:	1c69      	adds	r1, r5, #1
 801a2c4:	4638      	mov	r0, r7
 801a2c6:	f829 3c02 	strh.w	r3, [r9, #-2]
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	4798      	blx	r3
 801a2d0:	3502      	adds	r5, #2
 801a2d2:	f109 0904 	add.w	r9, r9, #4
 801a2d6:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801a2da:	455d      	cmp	r5, fp
 801a2dc:	d00c      	beq.n	801a2f8 <_DrawBitmap+0x64c>
 801a2de:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801a2e2:	ea4f 1314 	mov.w	r3, r4, lsr #4
 801a2e6:	4629      	mov	r1, r5
 801a2e8:	4642      	mov	r2, r8
 801a2ea:	4638      	mov	r0, r7
 801a2ec:	d1dc      	bne.n	801a2a8 <_DrawBitmap+0x5fc>
 801a2ee:	2c00      	cmp	r4, #0
 801a2f0:	d0ee      	beq.n	801a2d0 <_DrawBitmap+0x624>
 801a2f2:	e7e3      	b.n	801a2bc <_DrawBitmap+0x610>
 801a2f4:	20000018 	.word	0x20000018
 801a2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a2fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a2fe:	1c5a      	adds	r2, r3, #1
 801a300:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 801a304:	4401      	add	r1, r0
 801a306:	9804      	ldr	r0, [sp, #16]
 801a308:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 801a30c:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801a310:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801a314:	b15b      	cbz	r3, 801a32e <_DrawBitmap+0x682>
 801a316:	0924      	lsrs	r4, r4, #4
 801a318:	d009      	beq.n	801a32e <_DrawBitmap+0x682>
 801a31a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801a31e:	f8a8 3000 	strh.w	r3, [r8]
 801a322:	b127      	cbz	r7, 801a32e <_DrawBitmap+0x682>
 801a324:	68bb      	ldr	r3, [r7, #8]
 801a326:	4638      	mov	r0, r7
 801a328:	9a05      	ldr	r2, [sp, #20]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	4798      	blx	r3
 801a32e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a330:	46be      	mov	lr, r7
 801a332:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a334:	9907      	ldr	r1, [sp, #28]
 801a336:	4493      	add	fp, r2
 801a338:	9a02      	ldr	r2, [sp, #8]
 801a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a33c:	440a      	add	r2, r1
 801a33e:	3301      	adds	r3, #1
 801a340:	9202      	str	r2, [sp, #8]
 801a342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a344:	930a      	str	r3, [sp, #40]	; 0x28
 801a346:	4293      	cmp	r3, r2
 801a348:	f6ff af69 	blt.w	801a21e <_DrawBitmap+0x572>
 801a34c:	e563      	b.n	8019e16 <_DrawBitmap+0x16a>
 801a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a350:	46d9      	mov	r9, fp
 801a352:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a354:	3301      	adds	r3, #1
 801a356:	461a      	mov	r2, r3
 801a358:	930a      	str	r3, [sp, #40]	; 0x28
 801a35a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a35c:	428a      	cmp	r2, r1
 801a35e:	4499      	add	r9, r3
 801a360:	9b07      	ldr	r3, [sp, #28]
 801a362:	4443      	add	r3, r8
 801a364:	f6ff af57 	blt.w	801a216 <_DrawBitmap+0x56a>
 801a368:	46bb      	mov	fp, r7
 801a36a:	46de      	mov	lr, fp
 801a36c:	e553      	b.n	8019e16 <_DrawBitmap+0x16a>
 801a36e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a370:	2b00      	cmp	r3, #0
 801a372:	d050      	beq.n	801a416 <_DrawBitmap+0x76a>
 801a374:	0924      	lsrs	r4, r4, #4
 801a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a378:	f10b 0201 	add.w	r2, fp, #1
 801a37c:	1e5d      	subs	r5, r3, #1
 801a37e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801a382:	f8a8 3000 	strh.w	r3, [r8]
 801a386:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a38a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a38e:	2d01      	cmp	r5, #1
 801a390:	dd18      	ble.n	801a3c4 <_DrawBitmap+0x718>
 801a392:	106e      	asrs	r6, r5, #1
 801a394:	f108 0304 	add.w	r3, r8, #4
 801a398:	f005 0501 	and.w	r5, r5, #1
 801a39c:	1990      	adds	r0, r2, r6
 801a39e:	4684      	mov	ip, r0
 801a3a0:	0921      	lsrs	r1, r4, #4
 801a3a2:	f004 040f 	and.w	r4, r4, #15
 801a3a6:	3304      	adds	r3, #4
 801a3a8:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
 801a3ac:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801a3b0:	f823 0c08 	strh.w	r0, [r3, #-8]
 801a3b4:	f823 1c06 	strh.w	r1, [r3, #-6]
 801a3b8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801a3bc:	4562      	cmp	r2, ip
 801a3be:	d1ef      	bne.n	801a3a0 <_DrawBitmap+0x6f4>
 801a3c0:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 801a3c4:	2d00      	cmp	r5, #0
 801a3c6:	d0b4      	beq.n	801a332 <_DrawBitmap+0x686>
 801a3c8:	0924      	lsrs	r4, r4, #4
 801a3ca:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801a3ce:	f8a8 3000 	strh.w	r3, [r8]
 801a3d2:	e7ae      	b.n	801a332 <_DrawBitmap+0x686>
 801a3d4:	9b06      	ldr	r3, [sp, #24]
 801a3d6:	4658      	mov	r0, fp
 801a3d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a3da:	428b      	cmp	r3, r1
 801a3dc:	bfc8      	it	gt
 801a3de:	b2cb      	uxtbgt	r3, r1
 801a3e0:	1e5a      	subs	r2, r3, #1
 801a3e2:	1ac9      	subs	r1, r1, r3
 801a3e4:	b2d2      	uxtb	r2, r2
 801a3e6:	3201      	adds	r2, #1
 801a3e8:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 801a3ec:	0123      	lsls	r3, r4, #4
 801a3ee:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801a3f2:	b2dc      	uxtb	r4, r3
 801a3f4:	d005      	beq.n	801a402 <_DrawBitmap+0x756>
 801a3f6:	f8b8 3000 	ldrh.w	r3, [r8]
 801a3fa:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 801a3fe:	f8a8 3000 	strh.w	r3, [r8]
 801a402:	f108 0802 	add.w	r8, r8, #2
 801a406:	4590      	cmp	r8, r2
 801a408:	d1f0      	bne.n	801a3ec <_DrawBitmap+0x740>
 801a40a:	2900      	cmp	r1, #0
 801a40c:	d091      	beq.n	801a332 <_DrawBitmap+0x686>
 801a40e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801a412:	2302      	movs	r3, #2
 801a414:	e7e1      	b.n	801a3da <_DrawBitmap+0x72e>
 801a416:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a418:	465a      	mov	r2, fp
 801a41a:	e7b8      	b.n	801a38e <_DrawBitmap+0x6e2>
 801a41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a41e:	465e      	mov	r6, fp
 801a420:	9908      	ldr	r1, [sp, #32]
 801a422:	e728      	b.n	801a276 <_DrawBitmap+0x5ca>
 801a424:	461a      	mov	r2, r3
 801a426:	9304      	str	r3, [sp, #16]
 801a428:	f108 0304 	add.w	r3, r8, #4
 801a42c:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 801a430:	f10e 0c01 	add.w	ip, lr, #1
 801a434:	eb06 000c 	add.w	r0, r6, ip
 801a438:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801a43c:	ea4f 1214 	mov.w	r2, r4, lsr #4
 801a440:	d003      	beq.n	801a44a <_DrawBitmap+0x79e>
 801a442:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801a446:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a44a:	f014 040f 	ands.w	r4, r4, #15
 801a44e:	d003      	beq.n	801a458 <_DrawBitmap+0x7ac>
 801a450:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
 801a454:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a458:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801a45c:	3304      	adds	r3, #4
 801a45e:	42b0      	cmp	r0, r6
 801a460:	d1ea      	bne.n	801a438 <_DrawBitmap+0x78c>
 801a462:	3102      	adds	r1, #2
 801a464:	9b04      	ldr	r3, [sp, #16]
 801a466:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 801a46a:	eba3 034e 	sub.w	r3, r3, lr, lsl #1
 801a46e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 801a472:	e74f      	b.n	801a314 <_DrawBitmap+0x668>
 801a474:	930a      	str	r3, [sp, #40]	; 0x28
 801a476:	460b      	mov	r3, r1
 801a478:	46ca      	mov	sl, r9
 801a47a:	9202      	str	r2, [sp, #8]
 801a47c:	3301      	adds	r3, #1
 801a47e:	9121      	str	r1, [sp, #132]	; 0x84
 801a480:	930c      	str	r3, [sp, #48]	; 0x30
 801a482:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a484:	f1c3 0308 	rsb	r3, r3, #8
 801a488:	930e      	str	r3, [sp, #56]	; 0x38
 801a48a:	4b92      	ldr	r3, [pc, #584]	; (801a6d4 <_DrawBitmap+0xa28>)
 801a48c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	440a      	add	r2, r1
 801a494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a496:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a498:	9204      	str	r2, [sp, #16]
 801a49a:	f7f7 fa69 	bl	8011970 <GUI_ALLOC_LockH>
 801a49e:	4b8d      	ldr	r3, [pc, #564]	; (801a6d4 <_DrawBitmap+0xa28>)
 801a4a0:	f104 38ff 	add.w	r8, r4, #4294967295
 801a4a4:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	498b      	ldr	r1, [pc, #556]	; (801a6d8 <_DrawBitmap+0xa2c>)
 801a4ac:	7c1b      	ldrb	r3, [r3, #16]
 801a4ae:	5c8c      	ldrb	r4, [r1, r2]
 801a4b0:	f003 0303 	and.w	r3, r3, #3
 801a4b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801a4b6:	9011      	str	r0, [sp, #68]	; 0x44
 801a4b8:	2b02      	cmp	r3, #2
 801a4ba:	fa44 f402 	asr.w	r4, r4, r2
 801a4be:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801a4c2:	d072      	beq.n	801a5aa <_DrawBitmap+0x8fe>
 801a4c4:	2b03      	cmp	r3, #3
 801a4c6:	d01f      	beq.n	801a508 <_DrawBitmap+0x85c>
 801a4c8:	2b01      	cmp	r3, #1
 801a4ca:	d01d      	beq.n	801a508 <_DrawBitmap+0x85c>
 801a4cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a4ce:	9e02      	ldr	r6, [sp, #8]
 801a4d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a4d2:	42a8      	cmp	r0, r5
 801a4d4:	4631      	mov	r1, r6
 801a4d6:	bf28      	it	cs
 801a4d8:	4628      	movcs	r0, r5
 801a4da:	1a2d      	subs	r5, r5, r0
 801a4dc:	4602      	mov	r2, r0
 801a4de:	f004 0301 	and.w	r3, r4, #1
 801a4e2:	3a01      	subs	r2, #1
 801a4e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a4e8:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801a4ec:	f821 3b02 	strh.w	r3, [r1], #2
 801a4f0:	d1f5      	bne.n	801a4de <_DrawBitmap+0x832>
 801a4f2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801a4f6:	2d00      	cmp	r5, #0
 801a4f8:	f43f ad8b 	beq.w	801a012 <_DrawBitmap+0x366>
 801a4fc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 801a500:	2008      	movs	r0, #8
 801a502:	4a75      	ldr	r2, [pc, #468]	; (801a6d8 <_DrawBitmap+0xa2c>)
 801a504:	5cd4      	ldrb	r4, [r2, r3]
 801a506:	e7e4      	b.n	801a4d2 <_DrawBitmap+0x826>
 801a508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a50c:	9205      	str	r2, [sp, #20]
 801a50e:	9a02      	ldr	r2, [sp, #8]
 801a510:	691b      	ldr	r3, [r3, #16]
 801a512:	9203      	str	r2, [sp, #12]
 801a514:	9a08      	ldr	r2, [sp, #32]
 801a516:	689b      	ldr	r3, [r3, #8]
 801a518:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a51c:	9206      	str	r2, [sp, #24]
 801a51e:	4798      	blx	r3
 801a520:	b283      	uxth	r3, r0
 801a522:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801a526:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801a52a:	469a      	mov	sl, r3
 801a52c:	45c8      	cmp	r8, r9
 801a52e:	bf28      	it	cs
 801a530:	46c8      	movcs	r8, r9
 801a532:	ebc8 0909 	rsb	r9, r8, r9
 801a536:	f1bb 0f00 	cmp.w	fp, #0
 801a53a:	f43f ad51 	beq.w	8019fe0 <_DrawBitmap+0x334>
 801a53e:	4645      	mov	r5, r8
 801a540:	9e03      	ldr	r6, [sp, #12]
 801a542:	9f06      	ldr	r7, [sp, #24]
 801a544:	e005      	b.n	801a552 <_DrawBitmap+0x8a6>
 801a546:	3d01      	subs	r5, #1
 801a548:	f106 0602 	add.w	r6, r6, #2
 801a54c:	f107 0701 	add.w	r7, r7, #1
 801a550:	d016      	beq.n	801a580 <_DrawBitmap+0x8d4>
 801a552:	f014 0f01 	tst.w	r4, #1
 801a556:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a55a:	d0f4      	beq.n	801a546 <_DrawBitmap+0x89a>
 801a55c:	f8db 3008 	ldr.w	r3, [fp, #8]
 801a560:	4639      	mov	r1, r7
 801a562:	9a04      	ldr	r2, [sp, #16]
 801a564:	4658      	mov	r0, fp
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	3602      	adds	r6, #2
 801a56a:	4798      	blx	r3
 801a56c:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 801a570:	3d01      	subs	r5, #1
 801a572:	f107 0701 	add.w	r7, r7, #1
 801a576:	ea8a 0303 	eor.w	r3, sl, r3
 801a57a:	f826 3c02 	strh.w	r3, [r6, #-2]
 801a57e:	d1e8      	bne.n	801a552 <_DrawBitmap+0x8a6>
 801a580:	9b03      	ldr	r3, [sp, #12]
 801a582:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801a586:	9303      	str	r3, [sp, #12]
 801a588:	9b06      	ldr	r3, [sp, #24]
 801a58a:	4443      	add	r3, r8
 801a58c:	9306      	str	r3, [sp, #24]
 801a58e:	f1b9 0f00 	cmp.w	r9, #0
 801a592:	f43f ad3c 	beq.w	801a00e <_DrawBitmap+0x362>
 801a596:	9b05      	ldr	r3, [sp, #20]
 801a598:	f04f 0808 	mov.w	r8, #8
 801a59c:	4a4e      	ldr	r2, [pc, #312]	; (801a6d8 <_DrawBitmap+0xa2c>)
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	5cd4      	ldrb	r4, [r2, r3]
 801a5a2:	9b05      	ldr	r3, [sp, #20]
 801a5a4:	3301      	adds	r3, #1
 801a5a6:	9305      	str	r3, [sp, #20]
 801a5a8:	e7c0      	b.n	801a52c <_DrawBitmap+0x880>
 801a5aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a5ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a5ae:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801a5b2:	42bd      	cmp	r5, r7
 801a5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a5b8:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801a5bc:	4698      	mov	r8, r3
 801a5be:	bf28      	it	cs
 801a5c0:	463d      	movcs	r5, r7
 801a5c2:	9e02      	ldr	r6, [sp, #8]
 801a5c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a5c8:	f8dd a010 	ldr.w	sl, [sp, #16]
 801a5cc:	1b7f      	subs	r7, r7, r5
 801a5ce:	f1bb 0f00 	cmp.w	fp, #0
 801a5d2:	d02b      	beq.n	801a62c <_DrawBitmap+0x980>
 801a5d4:	b944      	cbnz	r4, 801a5e8 <_DrawBitmap+0x93c>
 801a5d6:	e036      	b.n	801a646 <_DrawBitmap+0x99a>
 801a5d8:	3d01      	subs	r5, #1
 801a5da:	f109 0901 	add.w	r9, r9, #1
 801a5de:	f106 0602 	add.w	r6, r6, #2
 801a5e2:	d012      	beq.n	801a60a <_DrawBitmap+0x95e>
 801a5e4:	0864      	lsrs	r4, r4, #1
 801a5e6:	d02e      	beq.n	801a646 <_DrawBitmap+0x99a>
 801a5e8:	07e2      	lsls	r2, r4, #31
 801a5ea:	d5f5      	bpl.n	801a5d8 <_DrawBitmap+0x92c>
 801a5ec:	f8db 3008 	ldr.w	r3, [fp, #8]
 801a5f0:	4649      	mov	r1, r9
 801a5f2:	4652      	mov	r2, sl
 801a5f4:	4658      	mov	r0, fp
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	f109 0901 	add.w	r9, r9, #1
 801a5fc:	4798      	blx	r3
 801a5fe:	3d01      	subs	r5, #1
 801a600:	f8a6 8000 	strh.w	r8, [r6]
 801a604:	f106 0602 	add.w	r6, r6, #2
 801a608:	d1ec      	bne.n	801a5e4 <_DrawBitmap+0x938>
 801a60a:	2f00      	cmp	r7, #0
 801a60c:	f43f acff 	beq.w	801a00e <_DrawBitmap+0x362>
 801a610:	9a03      	ldr	r2, [sp, #12]
 801a612:	2508      	movs	r5, #8
 801a614:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a618:	42bd      	cmp	r5, r7
 801a61a:	9203      	str	r2, [sp, #12]
 801a61c:	bf28      	it	cs
 801a61e:	463d      	movcs	r5, r7
 801a620:	4a2d      	ldr	r2, [pc, #180]	; (801a6d8 <_DrawBitmap+0xa2c>)
 801a622:	1b7f      	subs	r7, r7, r5
 801a624:	5cd4      	ldrb	r4, [r2, r3]
 801a626:	f1bb 0f00 	cmp.w	fp, #0
 801a62a:	d1d3      	bne.n	801a5d4 <_DrawBitmap+0x928>
 801a62c:	b914      	cbnz	r4, 801a634 <_DrawBitmap+0x988>
 801a62e:	e00e      	b.n	801a64e <_DrawBitmap+0x9a2>
 801a630:	0864      	lsrs	r4, r4, #1
 801a632:	d00c      	beq.n	801a64e <_DrawBitmap+0x9a2>
 801a634:	07e3      	lsls	r3, r4, #31
 801a636:	f106 0602 	add.w	r6, r6, #2
 801a63a:	bf48      	it	mi
 801a63c:	f826 8c02 	strhmi.w	r8, [r6, #-2]
 801a640:	3d01      	subs	r5, #1
 801a642:	d1f5      	bne.n	801a630 <_DrawBitmap+0x984>
 801a644:	e7e1      	b.n	801a60a <_DrawBitmap+0x95e>
 801a646:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801a64a:	44a9      	add	r9, r5
 801a64c:	e7dd      	b.n	801a60a <_DrawBitmap+0x95e>
 801a64e:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801a652:	e7da      	b.n	801a60a <_DrawBitmap+0x95e>
 801a654:	4b21      	ldr	r3, [pc, #132]	; (801a6dc <_DrawBitmap+0xa30>)
 801a656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	9802      	ldr	r0, [sp, #8]
 801a65c:	4798      	blx	r3
 801a65e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801a662:	4658      	mov	r0, fp
 801a664:	e468      	b.n	8019f38 <_DrawBitmap+0x28c>
 801a666:	0924      	lsrs	r4, r4, #4
 801a668:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801a66c:	f8a8 3000 	strh.w	r3, [r8]
 801a670:	2f00      	cmp	r7, #0
 801a672:	f43f adf6 	beq.w	801a262 <_DrawBitmap+0x5b6>
 801a676:	68bb      	ldr	r3, [r7, #8]
 801a678:	460a      	mov	r2, r1
 801a67a:	4638      	mov	r0, r7
 801a67c:	9908      	ldr	r1, [sp, #32]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	4798      	blx	r3
 801a682:	e5ee      	b.n	801a262 <_DrawBitmap+0x5b6>
 801a684:	9903      	ldr	r1, [sp, #12]
 801a686:	9b02      	ldr	r3, [sp, #8]
 801a688:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a68c:	b102      	cbz	r2, 801a690 <_DrawBitmap+0x9e4>
 801a68e:	801a      	strh	r2, [r3, #0]
 801a690:	3302      	adds	r3, #2
 801a692:	42b3      	cmp	r3, r6
 801a694:	d1f8      	bne.n	801a688 <_DrawBitmap+0x9dc>
 801a696:	e44e      	b.n	8019f36 <_DrawBitmap+0x28a>
 801a698:	4b11      	ldr	r3, [pc, #68]	; (801a6e0 <_DrawBitmap+0xa34>)
 801a69a:	681c      	ldr	r4, [r3, #0]
 801a69c:	b16c      	cbz	r4, 801a6ba <_DrawBitmap+0xa0e>
 801a69e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a6a0:	9a07      	ldr	r2, [sp, #28]
 801a6a2:	9301      	str	r3, [sp, #4]
 801a6a4:	9200      	str	r2, [sp, #0]
 801a6a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a6a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6aa:	9921      	ldr	r1, [sp, #132]	; 0x84
 801a6ac:	9802      	ldr	r0, [sp, #8]
 801a6ae:	47a0      	blx	r4
 801a6b0:	f7ff bb86 	b.w	8019dc0 <_DrawBitmap+0x114>
 801a6b4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a6b6:	f7ff bb7f 	b.w	8019db8 <_DrawBitmap+0x10c>
 801a6ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	f77f ab7f 	ble.w	8019dc0 <_DrawBitmap+0x114>
 801a6c2:	f7ff bbc6 	b.w	8019e52 <_DrawBitmap+0x1a6>
 801a6c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	f47f ab76 	bne.w	8019dba <_DrawBitmap+0x10e>
 801a6ce:	f7ff bb77 	b.w	8019dc0 <_DrawBitmap+0x114>
 801a6d2:	bf00      	nop
 801a6d4:	20000018 	.word	0x20000018
 801a6d8:	0802a838 	.word	0x0802a838
 801a6dc:	2000004c 	.word	0x2000004c
 801a6e0:	200003c0 	.word	0x200003c0

0801a6e4 <_GetDevProp>:
 801a6e4:	2908      	cmp	r1, #8
 801a6e6:	d101      	bne.n	801a6ec <_GetDevProp+0x8>
 801a6e8:	2010      	movs	r0, #16
 801a6ea:	4770      	bx	lr
 801a6ec:	6800      	ldr	r0, [r0, #0]
 801a6ee:	b110      	cbz	r0, 801a6f6 <_GetDevProp+0x12>
 801a6f0:	68c3      	ldr	r3, [r0, #12]
 801a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6f4:	4718      	bx	r3
 801a6f6:	f04f 30ff 	mov.w	r0, #4294967295
 801a6fa:	4770      	bx	lr

0801a6fc <_GetPixelIndex>:
 801a6fc:	4b0e      	ldr	r3, [pc, #56]	; (801a738 <_GetPixelIndex+0x3c>)
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a704:	b082      	sub	sp, #8
 801a706:	460e      	mov	r6, r1
 801a708:	4614      	mov	r4, r2
 801a70a:	f7f7 f931 	bl	8011970 <GUI_ALLOC_LockH>
 801a70e:	4605      	mov	r5, r0
 801a710:	a802      	add	r0, sp, #8
 801a712:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801a716:	68eb      	ldr	r3, [r5, #12]
 801a718:	1aa2      	subs	r2, r4, r2
 801a71a:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 801a71e:	f840 5d04 	str.w	r5, [r0, #-4]!
 801a722:	fb03 f302 	mul.w	r3, r3, r2
 801a726:	1b34      	subs	r4, r6, r4
 801a728:	3318      	adds	r3, #24
 801a72a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801a72e:	f7f7 f933 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a732:	5b28      	ldrh	r0, [r5, r4]
 801a734:	b002      	add	sp, #8
 801a736:	bd70      	pop	{r4, r5, r6, pc}
 801a738:	20000018 	.word	0x20000018

0801a73c <_SetPixelIndex>:
 801a73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a740:	4c1b      	ldr	r4, [pc, #108]	; (801a7b0 <_SetPixelIndex+0x74>)
 801a742:	4699      	mov	r9, r3
 801a744:	b083      	sub	sp, #12
 801a746:	460f      	mov	r7, r1
 801a748:	6823      	ldr	r3, [r4, #0]
 801a74a:	4690      	mov	r8, r2
 801a74c:	ae02      	add	r6, sp, #8
 801a74e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a750:	f7f7 f90e 	bl	8011970 <GUI_ALLOC_LockH>
 801a754:	6823      	ldr	r3, [r4, #0]
 801a756:	9000      	str	r0, [sp, #0]
 801a758:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a75a:	f7f7 f909 	bl	8011970 <GUI_ALLOC_LockH>
 801a75e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a762:	68c1      	ldr	r1, [r0, #12]
 801a764:	4605      	mov	r5, r0
 801a766:	ebc2 0208 	rsb	r2, r2, r8
 801a76a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a76e:	f846 0d04 	str.w	r0, [r6, #-4]!
 801a772:	4630      	mov	r0, r6
 801a774:	fb01 f202 	mul.w	r2, r1, r2
 801a778:	1b3c      	subs	r4, r7, r4
 801a77a:	3218      	adds	r2, #24
 801a77c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801a780:	f7f7 f90a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a784:	9b00      	ldr	r3, [sp, #0]
 801a786:	f825 9004 	strh.w	r9, [r5, r4]
 801a78a:	6958      	ldr	r0, [r3, #20]
 801a78c:	b150      	cbz	r0, 801a7a4 <_SetPixelIndex+0x68>
 801a78e:	f7f7 f8ef 	bl	8011970 <GUI_ALLOC_LockH>
 801a792:	9001      	str	r0, [sp, #4]
 801a794:	6883      	ldr	r3, [r0, #8]
 801a796:	4642      	mov	r2, r8
 801a798:	4639      	mov	r1, r7
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4798      	blx	r3
 801a79e:	4630      	mov	r0, r6
 801a7a0:	f7f7 f8fa 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a7a4:	4668      	mov	r0, sp
 801a7a6:	f7f7 f8f7 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a7aa:	b003      	add	sp, #12
 801a7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7b0:	20000018 	.word	0x20000018

0801a7b4 <_XorPixel>:
 801a7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7b8:	4c1e      	ldr	r4, [pc, #120]	; (801a834 <_XorPixel+0x80>)
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	4681      	mov	r9, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	6823      	ldr	r3, [r4, #0]
 801a7c2:	4690      	mov	r8, r2
 801a7c4:	ae02      	add	r6, sp, #8
 801a7c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a7c8:	f7f7 f8d2 	bl	8011970 <GUI_ALLOC_LockH>
 801a7cc:	6823      	ldr	r3, [r4, #0]
 801a7ce:	9000      	str	r0, [sp, #0]
 801a7d0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a7d2:	f7f7 f8cd 	bl	8011970 <GUI_ALLOC_LockH>
 801a7d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a7da:	68c2      	ldr	r2, [r0, #12]
 801a7dc:	4605      	mov	r5, r0
 801a7de:	ebc3 0308 	rsb	r3, r3, r8
 801a7e2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a7e6:	f846 0d04 	str.w	r0, [r6, #-4]!
 801a7ea:	4630      	mov	r0, r6
 801a7ec:	fb02 f303 	mul.w	r3, r2, r3
 801a7f0:	1b3c      	subs	r4, r7, r4
 801a7f2:	3318      	adds	r3, #24
 801a7f4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801a7f8:	f7f7 f8ce 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a7fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a800:	689b      	ldr	r3, [r3, #8]
 801a802:	4798      	blx	r3
 801a804:	5b2b      	ldrh	r3, [r5, r4]
 801a806:	9a00      	ldr	r2, [sp, #0]
 801a808:	4043      	eors	r3, r0
 801a80a:	6950      	ldr	r0, [r2, #20]
 801a80c:	532b      	strh	r3, [r5, r4]
 801a80e:	b150      	cbz	r0, 801a826 <_XorPixel+0x72>
 801a810:	f7f7 f8ae 	bl	8011970 <GUI_ALLOC_LockH>
 801a814:	9001      	str	r0, [sp, #4]
 801a816:	6883      	ldr	r3, [r0, #8]
 801a818:	4642      	mov	r2, r8
 801a81a:	4639      	mov	r1, r7
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	4798      	blx	r3
 801a820:	4630      	mov	r0, r6
 801a822:	f7f7 f8b9 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a826:	4668      	mov	r0, sp
 801a828:	f7f7 f8b6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a82c:	b003      	add	sp, #12
 801a82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a832:	bf00      	nop
 801a834:	20000018 	.word	0x20000018

0801a838 <_FillRect>:
 801a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83c:	4f5a      	ldr	r7, [pc, #360]	; (801a9a8 <_FillRect+0x170>)
 801a83e:	4689      	mov	r9, r1
 801a840:	4615      	mov	r5, r2
 801a842:	b089      	sub	sp, #36	; 0x24
 801a844:	683a      	ldr	r2, [r7, #0]
 801a846:	ebc9 0303 	rsb	r3, r9, r3
 801a84a:	4683      	mov	fp, r0
 801a84c:	f10d 0820 	add.w	r8, sp, #32
 801a850:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801a852:	461c      	mov	r4, r3
 801a854:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801a856:	f8d1 a000 	ldr.w	sl, [r1]
 801a85a:	1c66      	adds	r6, r4, #1
 801a85c:	9305      	str	r3, [sp, #20]
 801a85e:	f7f7 f887 	bl	8011970 <GUI_ALLOC_LockH>
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	9006      	str	r0, [sp, #24]
 801a866:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a868:	f7f7 f882 	bl	8011970 <GUI_ALLOC_LockH>
 801a86c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a870:	68c2      	ldr	r2, [r0, #12]
 801a872:	4601      	mov	r1, r0
 801a874:	1aeb      	subs	r3, r5, r3
 801a876:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a87a:	f848 0d04 	str.w	r0, [r8, #-4]!
 801a87e:	4640      	mov	r0, r8
 801a880:	fb02 f303 	mul.w	r3, r2, r3
 801a884:	ebc4 0409 	rsb	r4, r4, r9
 801a888:	3318      	adds	r3, #24
 801a88a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a88e:	18cc      	adds	r4, r1, r3
 801a890:	f7f7 f882 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a894:	9b06      	ldr	r3, [sp, #24]
 801a896:	6958      	ldr	r0, [r3, #20]
 801a898:	68db      	ldr	r3, [r3, #12]
 801a89a:	9302      	str	r3, [sp, #8]
 801a89c:	2800      	cmp	r0, #0
 801a89e:	d16f      	bne.n	801a980 <_FillRect+0x148>
 801a8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a8a2:	429d      	cmp	r5, r3
 801a8a4:	dc5e      	bgt.n	801a964 <_FillRect+0x12c>
 801a8a6:	fa1f f38a 	uxth.w	r3, sl
 801a8aa:	9304      	str	r3, [sp, #16]
 801a8ac:	683b      	ldr	r3, [r7, #0]
 801a8ae:	7c1b      	ldrb	r3, [r3, #16]
 801a8b0:	07db      	lsls	r3, r3, #31
 801a8b2:	d55d      	bpl.n	801a970 <_FillRect+0x138>
 801a8b4:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a8b8:	689b      	ldr	r3, [r3, #8]
 801a8ba:	4798      	blx	r3
 801a8bc:	f3c4 0340 	ubfx	r3, r4, #1, #1
 801a8c0:	b280      	uxth	r0, r0
 801a8c2:	42b3      	cmp	r3, r6
 801a8c4:	bf28      	it	cs
 801a8c6:	4633      	movcs	r3, r6
 801a8c8:	2e03      	cmp	r6, #3
 801a8ca:	bf98      	it	ls
 801a8cc:	4633      	movls	r3, r6
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d054      	beq.n	801a97c <_FillRect+0x144>
 801a8d2:	8822      	ldrh	r2, [r4, #0]
 801a8d4:	46a4      	mov	ip, r4
 801a8d6:	2b01      	cmp	r3, #1
 801a8d8:	ea82 0200 	eor.w	r2, r2, r0
 801a8dc:	f82c 2b02 	strh.w	r2, [ip], #2
 801a8e0:	d00c      	beq.n	801a8fc <_FillRect+0xc4>
 801a8e2:	8862      	ldrh	r2, [r4, #2]
 801a8e4:	2b03      	cmp	r3, #3
 801a8e6:	f104 0c04 	add.w	ip, r4, #4
 801a8ea:	ea82 0200 	eor.w	r2, r2, r0
 801a8ee:	8062      	strh	r2, [r4, #2]
 801a8f0:	d104      	bne.n	801a8fc <_FillRect+0xc4>
 801a8f2:	88a2      	ldrh	r2, [r4, #4]
 801a8f4:	f104 0c06 	add.w	ip, r4, #6
 801a8f8:	4042      	eors	r2, r0
 801a8fa:	80a2      	strh	r2, [r4, #4]
 801a8fc:	42b3      	cmp	r3, r6
 801a8fe:	d02b      	beq.n	801a958 <_FillRect+0x120>
 801a900:	ebc3 0a06 	rsb	sl, r3, r6
 801a904:	f1aa 0e02 	sub.w	lr, sl, #2
 801a908:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 801a90c:	f10e 0e01 	add.w	lr, lr, #1
 801a910:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801a914:	9203      	str	r2, [sp, #12]
 801a916:	9a05      	ldr	r2, [sp, #20]
 801a918:	4293      	cmp	r3, r2
 801a91a:	d018      	beq.n	801a94e <_FillRect+0x116>
 801a91c:	f04f 0900 	mov.w	r9, #0
 801a920:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a924:	4649      	mov	r1, r9
 801a926:	f360 090f 	bfi	r9, r0, #0, #16
 801a92a:	f1a3 0804 	sub.w	r8, r3, #4
 801a92e:	f360 491f 	bfi	r9, r0, #16, #16
 801a932:	f858 2f04 	ldr.w	r2, [r8, #4]!
 801a936:	3101      	adds	r1, #1
 801a938:	ea89 0202 	eor.w	r2, r9, r2
 801a93c:	458e      	cmp	lr, r1
 801a93e:	f843 2b04 	str.w	r2, [r3], #4
 801a942:	d8f6      	bhi.n	801a932 <_FillRect+0xfa>
 801a944:	9a03      	ldr	r2, [sp, #12]
 801a946:	4592      	cmp	sl, r2
 801a948:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 801a94c:	d004      	beq.n	801a958 <_FillRect+0x120>
 801a94e:	f8bc 3000 	ldrh.w	r3, [ip]
 801a952:	4058      	eors	r0, r3
 801a954:	f8ac 0000 	strh.w	r0, [ip]
 801a958:	9b02      	ldr	r3, [sp, #8]
 801a95a:	3501      	adds	r5, #1
 801a95c:	441c      	add	r4, r3
 801a95e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a960:	42ab      	cmp	r3, r5
 801a962:	daa3      	bge.n	801a8ac <_FillRect+0x74>
 801a964:	a806      	add	r0, sp, #24
 801a966:	f7f7 f817 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a96a:	b009      	add	sp, #36	; 0x24
 801a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a970:	4632      	mov	r2, r6
 801a972:	9904      	ldr	r1, [sp, #16]
 801a974:	4620      	mov	r0, r4
 801a976:	f7fc fb4f 	bl	8017018 <GUI__memset16>
 801a97a:	e7ed      	b.n	801a958 <_FillRect+0x120>
 801a97c:	46a4      	mov	ip, r4
 801a97e:	e7bf      	b.n	801a900 <_FillRect+0xc8>
 801a980:	f7f6 fff6 	bl	8011970 <GUI_ALLOC_LockH>
 801a984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a986:	4649      	mov	r1, r9
 801a988:	462a      	mov	r2, r5
 801a98a:	ebc5 0e03 	rsb	lr, r5, r3
 801a98e:	4633      	mov	r3, r6
 801a990:	9007      	str	r0, [sp, #28]
 801a992:	f10e 0e01 	add.w	lr, lr, #1
 801a996:	f8cd e000 	str.w	lr, [sp]
 801a99a:	f000 fa89 	bl	801aeb0 <GUI_USAGE_AddRect>
 801a99e:	4640      	mov	r0, r8
 801a9a0:	f7f6 fffa 	bl	8011998 <GUI_ALLOC_UnlockH>
 801a9a4:	e77c      	b.n	801a8a0 <_FillRect+0x68>
 801a9a6:	bf00      	nop
 801a9a8:	20000018 	.word	0x20000018

0801a9ac <_DrawHLine>:
 801a9ac:	b500      	push	{lr}
 801a9ae:	b083      	sub	sp, #12
 801a9b0:	9200      	str	r2, [sp, #0]
 801a9b2:	f7ff ff41 	bl	801a838 <_FillRect>
 801a9b6:	b003      	add	sp, #12
 801a9b8:	f85d fb04 	ldr.w	pc, [sp], #4

0801a9bc <_DrawVLine>:
 801a9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9c0:	4f37      	ldr	r7, [pc, #220]	; (801aaa0 <_DrawVLine+0xe4>)
 801a9c2:	4615      	mov	r5, r2
 801a9c4:	b085      	sub	sp, #20
 801a9c6:	4681      	mov	r9, r0
 801a9c8:	683a      	ldr	r2, [r7, #0]
 801a9ca:	461e      	mov	r6, r3
 801a9cc:	4688      	mov	r8, r1
 801a9ce:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801a9d0:	f7f6 ffce 	bl	8011970 <GUI_ALLOC_LockH>
 801a9d4:	6943      	ldr	r3, [r0, #20]
 801a9d6:	9001      	str	r0, [sp, #4]
 801a9d8:	4618      	mov	r0, r3
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d13d      	bne.n	801aa5a <_DrawVLine+0x9e>
 801a9de:	683b      	ldr	r3, [r7, #0]
 801a9e0:	9002      	str	r0, [sp, #8]
 801a9e2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801a9e4:	f7f6 ffc4 	bl	8011970 <GUI_ALLOC_LockH>
 801a9e8:	4602      	mov	r2, r0
 801a9ea:	a804      	add	r0, sp, #16
 801a9ec:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 801a9f0:	68d3      	ldr	r3, [r2, #12]
 801a9f2:	1b2c      	subs	r4, r5, r4
 801a9f4:	f840 2d04 	str.w	r2, [r0, #-4]!
 801a9f8:	fb03 f304 	mul.w	r3, r3, r4
 801a9fc:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 801aa00:	3318      	adds	r3, #24
 801aa02:	ebc4 0408 	rsb	r4, r4, r8
 801aa06:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801aa0a:	18d4      	adds	r4, r2, r3
 801aa0c:	f7f6 ffc4 	bl	8011998 <GUI_ALLOC_UnlockH>
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	7c1a      	ldrb	r2, [r3, #16]
 801aa14:	07d2      	lsls	r2, r2, #31
 801aa16:	d423      	bmi.n	801aa60 <_DrawVLine+0xa4>
 801aa18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801aa1a:	9802      	ldr	r0, [sp, #8]
 801aa1c:	9b01      	ldr	r3, [sp, #4]
 801aa1e:	6812      	ldr	r2, [r2, #0]
 801aa20:	68df      	ldr	r7, [r3, #12]
 801aa22:	2800      	cmp	r0, #0
 801aa24:	d034      	beq.n	801aa90 <_DrawVLine+0xd4>
 801aa26:	fa1f f982 	uxth.w	r9, r2
 801aa2a:	e000      	b.n	801aa2e <_DrawVLine+0x72>
 801aa2c:	9802      	ldr	r0, [sp, #8]
 801aa2e:	6883      	ldr	r3, [r0, #8]
 801aa30:	462a      	mov	r2, r5
 801aa32:	3501      	adds	r5, #1
 801aa34:	4641      	mov	r1, r8
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	4798      	blx	r3
 801aa3a:	42ae      	cmp	r6, r5
 801aa3c:	f8a4 9000 	strh.w	r9, [r4]
 801aa40:	443c      	add	r4, r7
 801aa42:	daf3      	bge.n	801aa2c <_DrawVLine+0x70>
 801aa44:	a801      	add	r0, sp, #4
 801aa46:	f7f6 ffa7 	bl	8011998 <GUI_ALLOC_UnlockH>
 801aa4a:	9b02      	ldr	r3, [sp, #8]
 801aa4c:	b113      	cbz	r3, 801aa54 <_DrawVLine+0x98>
 801aa4e:	a802      	add	r0, sp, #8
 801aa50:	f7f6 ffa2 	bl	8011998 <GUI_ALLOC_UnlockH>
 801aa54:	b005      	add	sp, #20
 801aa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa5a:	f7f6 ff89 	bl	8011970 <GUI_ALLOC_LockH>
 801aa5e:	e7be      	b.n	801a9de <_DrawVLine+0x22>
 801aa60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aa64:	689b      	ldr	r3, [r3, #8]
 801aa66:	4798      	blx	r3
 801aa68:	b287      	uxth	r7, r0
 801aa6a:	9b02      	ldr	r3, [sp, #8]
 801aa6c:	462a      	mov	r2, r5
 801aa6e:	4641      	mov	r1, r8
 801aa70:	3501      	adds	r5, #1
 801aa72:	4618      	mov	r0, r3
 801aa74:	b113      	cbz	r3, 801aa7c <_DrawVLine+0xc0>
 801aa76:	689b      	ldr	r3, [r3, #8]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	4798      	blx	r3
 801aa7c:	8823      	ldrh	r3, [r4, #0]
 801aa7e:	42b5      	cmp	r5, r6
 801aa80:	9a01      	ldr	r2, [sp, #4]
 801aa82:	ea83 0307 	eor.w	r3, r3, r7
 801aa86:	68d2      	ldr	r2, [r2, #12]
 801aa88:	8023      	strh	r3, [r4, #0]
 801aa8a:	4414      	add	r4, r2
 801aa8c:	dded      	ble.n	801aa6a <_DrawVLine+0xae>
 801aa8e:	e7d9      	b.n	801aa44 <_DrawVLine+0x88>
 801aa90:	1b73      	subs	r3, r6, r5
 801aa92:	b292      	uxth	r2, r2
 801aa94:	3301      	adds	r3, #1
 801aa96:	3b01      	subs	r3, #1
 801aa98:	8022      	strh	r2, [r4, #0]
 801aa9a:	443c      	add	r4, r7
 801aa9c:	d1fb      	bne.n	801aa96 <_DrawVLine+0xda>
 801aa9e:	e7d1      	b.n	801aa44 <_DrawVLine+0x88>
 801aaa0:	20000018 	.word	0x20000018

0801aaa4 <GUI_MEMDEV__SetAlphaCallback>:
 801aaa4:	4b01      	ldr	r3, [pc, #4]	; (801aaac <GUI_MEMDEV__SetAlphaCallback+0x8>)
 801aaa6:	6018      	str	r0, [r3, #0]
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	200003c4 	.word	0x200003c4

0801aab0 <GUI_MEMDEV_Draw>:
 801aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	b087      	sub	sp, #28
 801aab6:	4604      	mov	r4, r0
 801aab8:	4692      	mov	sl, r2
 801aaba:	461d      	mov	r5, r3
 801aabc:	4689      	mov	r9, r1
 801aabe:	f7fb fbd1 	bl	8016264 <GUI_Lock>
 801aac2:	4b57      	ldr	r3, [pc, #348]	; (801ac20 <GUI_MEMDEV_Draw+0x170>)
 801aac4:	681a      	ldr	r2, [r3, #0]
 801aac6:	4b57      	ldr	r3, [pc, #348]	; (801ac24 <GUI_MEMDEV_Draw+0x174>)
 801aac8:	7c57      	ldrb	r7, [r2, #17]
 801aaca:	57db      	ldrsb	r3, [r3, r7]
 801aacc:	4638      	mov	r0, r7
 801aace:	2b01      	cmp	r3, #1
 801aad0:	f340 809a 	ble.w	801ac08 <GUI_MEMDEV_Draw+0x158>
 801aad4:	f7fd f9c2 	bl	8017e5c <LCD_GetXSizeEx>
 801aad8:	4606      	mov	r6, r0
 801aada:	4638      	mov	r0, r7
 801aadc:	f7fd f9ce 	bl	8017e7c <LCD_GetYSizeEx>
 801aae0:	4607      	mov	r7, r0
 801aae2:	2c00      	cmp	r4, #0
 801aae4:	f000 808d 	beq.w	801ac02 <GUI_MEMDEV_Draw+0x152>
 801aae8:	a905      	add	r1, sp, #20
 801aaea:	a804      	add	r0, sp, #16
 801aaec:	f7f7 fbe4 	bl	80122b8 <GUI_GetOrg>
 801aaf0:	9a04      	ldr	r2, [sp, #16]
 801aaf2:	9b05      	ldr	r3, [sp, #20]
 801aaf4:	4416      	add	r6, r2
 801aaf6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801aafa:	441f      	add	r7, r3
 801aafc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ab00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ab04:	3e01      	subs	r6, #1
 801ab06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab0a:	3f01      	subs	r7, #1
 801ab0c:	4611      	mov	r1, r2
 801ab0e:	9202      	str	r2, [sp, #8]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801ab16:	9303      	str	r3, [sp, #12]
 801ab18:	4296      	cmp	r6, r2
 801ab1a:	bfd4      	ite	le
 801ab1c:	ebc1 0106 	rsble	r1, r1, r6
 801ab20:	ebc1 0102 	rsbgt	r1, r1, r2
 801ab24:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ab28:	4602      	mov	r2, r0
 801ab2a:	460e      	mov	r6, r1
 801ab2c:	429f      	cmp	r7, r3
 801ab2e:	bfd4      	ite	le
 801ab30:	ebc2 0207 	rsble	r2, r2, r7
 801ab34:	ebc2 0203 	rsbgt	r2, r2, r3
 801ab38:	3601      	adds	r6, #1
 801ab3a:	4617      	mov	r7, r2
 801ab3c:	3701      	adds	r7, #1
 801ab3e:	b905      	cbnz	r5, 801ab42 <GUI_MEMDEV_Draw+0x92>
 801ab40:	427d      	negs	r5, r7
 801ab42:	2e00      	cmp	r6, #0
 801ab44:	dd4f      	ble.n	801abe6 <GUI_MEMDEV_Draw+0x136>
 801ab46:	2f00      	cmp	r7, #0
 801ab48:	dd4d      	ble.n	801abe6 <GUI_MEMDEV_Draw+0x136>
 801ab4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab4c:	4632      	mov	r2, r6
 801ab4e:	9903      	ldr	r1, [sp, #12]
 801ab50:	9300      	str	r3, [sp, #0]
 801ab52:	462b      	mov	r3, r5
 801ab54:	9802      	ldr	r0, [sp, #8]
 801ab56:	f7fe fff7 	bl	8019b48 <GUI_MEMDEV_CreateEx>
 801ab5a:	4680      	mov	r8, r0
 801ab5c:	2800      	cmp	r0, #0
 801ab5e:	d048      	beq.n	801abf2 <GUI_MEMDEV_Draw+0x142>
 801ab60:	f000 f90e 	bl	801ad80 <GUI_MEMDEV_GetYSize>
 801ab64:	4287      	cmp	r7, r0
 801ab66:	4606      	mov	r6, r0
 801ab68:	d004      	beq.n	801ab74 <GUI_MEMDEV_Draw+0xc4>
 801ab6a:	4b2d      	ldr	r3, [pc, #180]	; (801ac20 <GUI_MEMDEV_Draw+0x170>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801ab70:	2800      	cmp	r0, #0
 801ab72:	d151      	bne.n	801ac18 <GUI_MEMDEV_Draw+0x168>
 801ab74:	4640      	mov	r0, r8
 801ab76:	463d      	mov	r5, r7
 801ab78:	2400      	movs	r4, #0
 801ab7a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801ac28 <GUI_MEMDEV_Draw+0x178>
 801ab7e:	f7ff f82b 	bl	8019bd8 <GUI_MEMDEV_Select>
 801ab82:	e00e      	b.n	801aba2 <GUI_MEMDEV_Draw+0xf2>
 801ab84:	1bad      	subs	r5, r5, r6
 801ab86:	b9ac      	cbnz	r4, 801abb4 <GUI_MEMDEV_Draw+0x104>
 801ab88:	4650      	mov	r0, sl
 801ab8a:	4434      	add	r4, r6
 801ab8c:	47c8      	blx	r9
 801ab8e:	f8db 3000 	ldr.w	r3, [fp]
 801ab92:	20ff      	movs	r0, #255	; 0xff
 801ab94:	b103      	cbz	r3, 801ab98 <GUI_MEMDEV_Draw+0xe8>
 801ab96:	4798      	blx	r3
 801ab98:	4640      	mov	r0, r8
 801ab9a:	f7ff f84d 	bl	8019c38 <GUI_MEMDEV_CopyToLCD>
 801ab9e:	42a7      	cmp	r7, r4
 801aba0:	dd12      	ble.n	801abc8 <GUI_MEMDEV_Draw+0x118>
 801aba2:	42ae      	cmp	r6, r5
 801aba4:	ddee      	ble.n	801ab84 <GUI_MEMDEV_Draw+0xd4>
 801aba6:	4629      	mov	r1, r5
 801aba8:	4640      	mov	r0, r8
 801abaa:	f000 f90b 	bl	801adc4 <GUI_MEMDEV_ReduceYSize>
 801abae:	1bad      	subs	r5, r5, r6
 801abb0:	2c00      	cmp	r4, #0
 801abb2:	d0e9      	beq.n	801ab88 <GUI_MEMDEV_Draw+0xd8>
 801abb4:	9b03      	ldr	r3, [sp, #12]
 801abb6:	4640      	mov	r0, r8
 801abb8:	9902      	ldr	r1, [sp, #8]
 801abba:	191a      	adds	r2, r3, r4
 801abbc:	f000 f922 	bl	801ae04 <GUI_MEMDEV_SetOrg>
 801abc0:	4640      	mov	r0, r8
 801abc2:	f000 f833 	bl	801ac2c <GUI_MEMDEV_Clear>
 801abc6:	e7df      	b.n	801ab88 <GUI_MEMDEV_Draw+0xd8>
 801abc8:	4640      	mov	r0, r8
 801abca:	f7fe ff93 	bl	8019af4 <GUI_MEMDEV_Delete>
 801abce:	2000      	movs	r0, #0
 801abd0:	f7ff f802 	bl	8019bd8 <GUI_MEMDEV_Select>
 801abd4:	42b7      	cmp	r7, r6
 801abd6:	d006      	beq.n	801abe6 <GUI_MEMDEV_Draw+0x136>
 801abd8:	4b11      	ldr	r3, [pc, #68]	; (801ac20 <GUI_MEMDEV_Draw+0x170>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801abde:	b110      	cbz	r0, 801abe6 <GUI_MEMDEV_Draw+0x136>
 801abe0:	2133      	movs	r1, #51	; 0x33
 801abe2:	f003 ff1d 	bl	801ea20 <WM__SendMessageNoPara>
 801abe6:	f7fb fb33 	bl	8016250 <GUI_Unlock>
 801abea:	2000      	movs	r0, #0
 801abec:	b007      	add	sp, #28
 801abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf2:	4650      	mov	r0, sl
 801abf4:	47c8      	blx	r9
 801abf6:	f7fb fb2b 	bl	8016250 <GUI_Unlock>
 801abfa:	2001      	movs	r0, #1
 801abfc:	b007      	add	sp, #28
 801abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac02:	9403      	str	r4, [sp, #12]
 801ac04:	9402      	str	r4, [sp, #8]
 801ac06:	e79a      	b.n	801ab3e <GUI_MEMDEV_Draw+0x8e>
 801ac08:	f7fd f948 	bl	8017e9c <LCD_GetVXSizeEx>
 801ac0c:	4606      	mov	r6, r0
 801ac0e:	4638      	mov	r0, r7
 801ac10:	f7fd f954 	bl	8017ebc <LCD_GetVYSizeEx>
 801ac14:	4607      	mov	r7, r0
 801ac16:	e764      	b.n	801aae2 <GUI_MEMDEV_Draw+0x32>
 801ac18:	2132      	movs	r1, #50	; 0x32
 801ac1a:	f003 ff01 	bl	801ea20 <WM__SendMessageNoPara>
 801ac1e:	e7a9      	b.n	801ab74 <GUI_MEMDEV_Draw+0xc4>
 801ac20:	20000018 	.word	0x20000018
 801ac24:	2002af80 	.word	0x2002af80
 801ac28:	200003c4 	.word	0x200003c4

0801ac2c <GUI_MEMDEV_Clear>:
 801ac2c:	b510      	push	{r4, lr}
 801ac2e:	b082      	sub	sp, #8
 801ac30:	b928      	cbnz	r0, 801ac3e <GUI_MEMDEV_Clear+0x12>
 801ac32:	4b13      	ldr	r3, [pc, #76]	; (801ac80 <GUI_MEMDEV_Clear+0x54>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ac38:	b914      	cbnz	r4, 801ac40 <GUI_MEMDEV_Clear+0x14>
 801ac3a:	b002      	add	sp, #8
 801ac3c:	bd10      	pop	{r4, pc}
 801ac3e:	4604      	mov	r4, r0
 801ac40:	f7fb fb10 	bl	8016264 <GUI_Lock>
 801ac44:	4620      	mov	r0, r4
 801ac46:	f7f6 fe93 	bl	8011970 <GUI_ALLOC_LockH>
 801ac4a:	ab02      	add	r3, sp, #8
 801ac4c:	6944      	ldr	r4, [r0, #20]
 801ac4e:	f843 0d08 	str.w	r0, [r3, #-8]!
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7f6 fea0 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ac58:	b91c      	cbnz	r4, 801ac62 <GUI_MEMDEV_Clear+0x36>
 801ac5a:	f7fb faf9 	bl	8016250 <GUI_Unlock>
 801ac5e:	b002      	add	sp, #8
 801ac60:	bd10      	pop	{r4, pc}
 801ac62:	4620      	mov	r0, r4
 801ac64:	ac02      	add	r4, sp, #8
 801ac66:	f7f6 fe83 	bl	8011970 <GUI_ALLOC_LockH>
 801ac6a:	6882      	ldr	r2, [r0, #8]
 801ac6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801ac70:	6893      	ldr	r3, [r2, #8]
 801ac72:	4798      	blx	r3
 801ac74:	4620      	mov	r0, r4
 801ac76:	f7f6 fe8f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ac7a:	f7fb fae9 	bl	8016250 <GUI_Unlock>
 801ac7e:	e7ee      	b.n	801ac5e <GUI_MEMDEV_Clear+0x32>
 801ac80:	20000018 	.word	0x20000018

0801ac84 <GUI_MEMDEV_GetDataPtr>:
 801ac84:	b1a0      	cbz	r0, 801acb0 <GUI_MEMDEV_GetDataPtr+0x2c>
 801ac86:	b510      	push	{r4, lr}
 801ac88:	4604      	mov	r4, r0
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	f7fb faea 	bl	8016264 <GUI_Lock>
 801ac90:	4620      	mov	r0, r4
 801ac92:	f7f6 fe6d 	bl	8011970 <GUI_ALLOC_LockH>
 801ac96:	ab02      	add	r3, sp, #8
 801ac98:	f100 0418 	add.w	r4, r0, #24
 801ac9c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7f6 fe79 	bl	8011998 <GUI_ALLOC_UnlockH>
 801aca6:	f7fb fad3 	bl	8016250 <GUI_Unlock>
 801acaa:	4620      	mov	r0, r4
 801acac:	b002      	add	sp, #8
 801acae:	bd10      	pop	{r4, pc}
 801acb0:	4770      	bx	lr
 801acb2:	bf00      	nop

0801acb4 <GUI_MEMDEV_GetXPos>:
 801acb4:	b510      	push	{r4, lr}
 801acb6:	4604      	mov	r4, r0
 801acb8:	b082      	sub	sp, #8
 801acba:	f7fb fad3 	bl	8016264 <GUI_Lock>
 801acbe:	b17c      	cbz	r4, 801ace0 <GUI_MEMDEV_GetXPos+0x2c>
 801acc0:	4620      	mov	r0, r4
 801acc2:	f7f6 fe55 	bl	8011970 <GUI_ALLOC_LockH>
 801acc6:	ab02      	add	r3, sp, #8
 801acc8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801accc:	f843 0d04 	str.w	r0, [r3, #-4]!
 801acd0:	4618      	mov	r0, r3
 801acd2:	f7f6 fe61 	bl	8011998 <GUI_ALLOC_UnlockH>
 801acd6:	f7fb fabb 	bl	8016250 <GUI_Unlock>
 801acda:	4620      	mov	r0, r4
 801acdc:	b002      	add	sp, #8
 801acde:	bd10      	pop	{r4, pc}
 801ace0:	4b04      	ldr	r3, [pc, #16]	; (801acf4 <GUI_MEMDEV_GetXPos+0x40>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ace6:	2c00      	cmp	r4, #0
 801ace8:	d1ea      	bne.n	801acc0 <GUI_MEMDEV_GetXPos+0xc>
 801acea:	f7fb fab1 	bl	8016250 <GUI_Unlock>
 801acee:	4620      	mov	r0, r4
 801acf0:	b002      	add	sp, #8
 801acf2:	bd10      	pop	{r4, pc}
 801acf4:	20000018 	.word	0x20000018

0801acf8 <GUI_MEMDEV_GetYPos>:
 801acf8:	b510      	push	{r4, lr}
 801acfa:	4604      	mov	r4, r0
 801acfc:	b082      	sub	sp, #8
 801acfe:	f7fb fab1 	bl	8016264 <GUI_Lock>
 801ad02:	b17c      	cbz	r4, 801ad24 <GUI_MEMDEV_GetYPos+0x2c>
 801ad04:	4620      	mov	r0, r4
 801ad06:	f7f6 fe33 	bl	8011970 <GUI_ALLOC_LockH>
 801ad0a:	ab02      	add	r3, sp, #8
 801ad0c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801ad10:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7f6 fe3f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ad1a:	f7fb fa99 	bl	8016250 <GUI_Unlock>
 801ad1e:	4620      	mov	r0, r4
 801ad20:	b002      	add	sp, #8
 801ad22:	bd10      	pop	{r4, pc}
 801ad24:	4b04      	ldr	r3, [pc, #16]	; (801ad38 <GUI_MEMDEV_GetYPos+0x40>)
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ad2a:	2c00      	cmp	r4, #0
 801ad2c:	d1ea      	bne.n	801ad04 <GUI_MEMDEV_GetYPos+0xc>
 801ad2e:	f7fb fa8f 	bl	8016250 <GUI_Unlock>
 801ad32:	4620      	mov	r0, r4
 801ad34:	b002      	add	sp, #8
 801ad36:	bd10      	pop	{r4, pc}
 801ad38:	20000018 	.word	0x20000018

0801ad3c <GUI_MEMDEV_GetXSize>:
 801ad3c:	b510      	push	{r4, lr}
 801ad3e:	4604      	mov	r4, r0
 801ad40:	b082      	sub	sp, #8
 801ad42:	f7fb fa8f 	bl	8016264 <GUI_Lock>
 801ad46:	b17c      	cbz	r4, 801ad68 <GUI_MEMDEV_GetXSize+0x2c>
 801ad48:	4620      	mov	r0, r4
 801ad4a:	f7f6 fe11 	bl	8011970 <GUI_ALLOC_LockH>
 801ad4e:	ab02      	add	r3, sp, #8
 801ad50:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 801ad54:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7f6 fe1d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ad5e:	f7fb fa77 	bl	8016250 <GUI_Unlock>
 801ad62:	4620      	mov	r0, r4
 801ad64:	b002      	add	sp, #8
 801ad66:	bd10      	pop	{r4, pc}
 801ad68:	4b04      	ldr	r3, [pc, #16]	; (801ad7c <GUI_MEMDEV_GetXSize+0x40>)
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ad6e:	2c00      	cmp	r4, #0
 801ad70:	d1ea      	bne.n	801ad48 <GUI_MEMDEV_GetXSize+0xc>
 801ad72:	f7fb fa6d 	bl	8016250 <GUI_Unlock>
 801ad76:	4620      	mov	r0, r4
 801ad78:	b002      	add	sp, #8
 801ad7a:	bd10      	pop	{r4, pc}
 801ad7c:	20000018 	.word	0x20000018

0801ad80 <GUI_MEMDEV_GetYSize>:
 801ad80:	b510      	push	{r4, lr}
 801ad82:	4604      	mov	r4, r0
 801ad84:	b082      	sub	sp, #8
 801ad86:	f7fb fa6d 	bl	8016264 <GUI_Lock>
 801ad8a:	b17c      	cbz	r4, 801adac <GUI_MEMDEV_GetYSize+0x2c>
 801ad8c:	4620      	mov	r0, r4
 801ad8e:	f7f6 fdef 	bl	8011970 <GUI_ALLOC_LockH>
 801ad92:	ab02      	add	r3, sp, #8
 801ad94:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801ad98:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f7f6 fdfb 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ada2:	f7fb fa55 	bl	8016250 <GUI_Unlock>
 801ada6:	4620      	mov	r0, r4
 801ada8:	b002      	add	sp, #8
 801adaa:	bd10      	pop	{r4, pc}
 801adac:	4b04      	ldr	r3, [pc, #16]	; (801adc0 <GUI_MEMDEV_GetYSize+0x40>)
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801adb2:	2c00      	cmp	r4, #0
 801adb4:	d1ea      	bne.n	801ad8c <GUI_MEMDEV_GetYSize+0xc>
 801adb6:	f7fb fa4b 	bl	8016250 <GUI_Unlock>
 801adba:	4620      	mov	r0, r4
 801adbc:	b002      	add	sp, #8
 801adbe:	bd10      	pop	{r4, pc}
 801adc0:	20000018 	.word	0x20000018

0801adc4 <GUI_MEMDEV_ReduceYSize>:
 801adc4:	b530      	push	{r4, r5, lr}
 801adc6:	460d      	mov	r5, r1
 801adc8:	b083      	sub	sp, #12
 801adca:	b928      	cbnz	r0, 801add8 <GUI_MEMDEV_ReduceYSize+0x14>
 801adcc:	4b0c      	ldr	r3, [pc, #48]	; (801ae00 <GUI_MEMDEV_ReduceYSize+0x3c>)
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801add2:	b914      	cbnz	r4, 801adda <GUI_MEMDEV_ReduceYSize+0x16>
 801add4:	b003      	add	sp, #12
 801add6:	bd30      	pop	{r4, r5, pc}
 801add8:	4604      	mov	r4, r0
 801adda:	f7fb fa43 	bl	8016264 <GUI_Lock>
 801adde:	4620      	mov	r0, r4
 801ade0:	f7f6 fdc6 	bl	8011970 <GUI_ALLOC_LockH>
 801ade4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ade8:	9001      	str	r0, [sp, #4]
 801adea:	42ab      	cmp	r3, r5
 801adec:	bfc8      	it	gt
 801adee:	8145      	strhgt	r5, [r0, #10]
 801adf0:	a801      	add	r0, sp, #4
 801adf2:	f7f6 fdd1 	bl	8011998 <GUI_ALLOC_UnlockH>
 801adf6:	f7fb fa2b 	bl	8016250 <GUI_Unlock>
 801adfa:	b003      	add	sp, #12
 801adfc:	bd30      	pop	{r4, r5, pc}
 801adfe:	bf00      	nop
 801ae00:	20000018 	.word	0x20000018

0801ae04 <GUI_MEMDEV_SetOrg>:
 801ae04:	b570      	push	{r4, r5, r6, lr}
 801ae06:	460d      	mov	r5, r1
 801ae08:	b082      	sub	sp, #8
 801ae0a:	4616      	mov	r6, r2
 801ae0c:	b928      	cbnz	r0, 801ae1a <GUI_MEMDEV_SetOrg+0x16>
 801ae0e:	4b1a      	ldr	r3, [pc, #104]	; (801ae78 <GUI_MEMDEV_SetOrg+0x74>)
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801ae14:	b914      	cbnz	r4, 801ae1c <GUI_MEMDEV_SetOrg+0x18>
 801ae16:	b002      	add	sp, #8
 801ae18:	bd70      	pop	{r4, r5, r6, pc}
 801ae1a:	4604      	mov	r4, r0
 801ae1c:	b236      	sxth	r6, r6
 801ae1e:	b22d      	sxth	r5, r5
 801ae20:	f7fb fa20 	bl	8016264 <GUI_Lock>
 801ae24:	4620      	mov	r0, r4
 801ae26:	f7f6 fda3 	bl	8011970 <GUI_ALLOC_LockH>
 801ae2a:	80c6      	strh	r6, [r0, #6]
 801ae2c:	8085      	strh	r5, [r0, #4]
 801ae2e:	9000      	str	r0, [sp, #0]
 801ae30:	f7fc fe0e 	bl	8017a50 <LCD_SetClipRectMax>
 801ae34:	9b00      	ldr	r3, [sp, #0]
 801ae36:	6958      	ldr	r0, [r3, #20]
 801ae38:	b930      	cbnz	r0, 801ae48 <GUI_MEMDEV_SetOrg+0x44>
 801ae3a:	4668      	mov	r0, sp
 801ae3c:	f7f6 fdac 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ae40:	f7fb fa06 	bl	8016250 <GUI_Unlock>
 801ae44:	b002      	add	sp, #8
 801ae46:	bd70      	pop	{r4, r5, r6, pc}
 801ae48:	f7f6 fd92 	bl	8011970 <GUI_ALLOC_LockH>
 801ae4c:	9b00      	ldr	r3, [sp, #0]
 801ae4e:	9001      	str	r0, [sp, #4]
 801ae50:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ae54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801ae58:	8082      	strh	r2, [r0, #4]
 801ae5a:	80c3      	strh	r3, [r0, #6]
 801ae5c:	b113      	cbz	r3, 801ae64 <GUI_MEMDEV_SetOrg+0x60>
 801ae5e:	b10a      	cbz	r2, 801ae64 <GUI_MEMDEV_SetOrg+0x60>
 801ae60:	8005      	strh	r5, [r0, #0]
 801ae62:	8046      	strh	r6, [r0, #2]
 801ae64:	a801      	add	r0, sp, #4
 801ae66:	f7f6 fd97 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ae6a:	4668      	mov	r0, sp
 801ae6c:	f7f6 fd94 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ae70:	f7fb f9ee 	bl	8016250 <GUI_Unlock>
 801ae74:	e7e6      	b.n	801ae44 <GUI_MEMDEV_SetOrg+0x40>
 801ae76:	bf00      	nop
 801ae78:	20000018 	.word	0x20000018

0801ae7c <GUI_USAGE_DecUseCnt>:
 801ae7c:	b530      	push	{r4, r5, lr}
 801ae7e:	4605      	mov	r5, r0
 801ae80:	b083      	sub	sp, #12
 801ae82:	f7fb f9ef 	bl	8016264 <GUI_Lock>
 801ae86:	4628      	mov	r0, r5
 801ae88:	f7f6 fd72 	bl	8011970 <GUI_ALLOC_LockH>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	a802      	add	r0, sp, #8
 801ae90:	899c      	ldrh	r4, [r3, #12]
 801ae92:	f840 3d04 	str.w	r3, [r0, #-4]!
 801ae96:	3c01      	subs	r4, #1
 801ae98:	b224      	sxth	r4, r4
 801ae9a:	819c      	strh	r4, [r3, #12]
 801ae9c:	f7f6 fd7c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801aea0:	b914      	cbnz	r4, 801aea8 <GUI_USAGE_DecUseCnt+0x2c>
 801aea2:	4628      	mov	r0, r5
 801aea4:	f7f6 fefc 	bl	8011ca0 <GUI_ALLOC_Free>
 801aea8:	f7fb f9d2 	bl	8016250 <GUI_Unlock>
 801aeac:	b003      	add	sp, #12
 801aeae:	bd30      	pop	{r4, r5, pc}

0801aeb0 <GUI_USAGE_AddRect>:
 801aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aeb4:	9c08      	ldr	r4, [sp, #32]
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	4689      	mov	r9, r1
 801aeba:	4698      	mov	r8, r3
 801aebc:	68a9      	ldr	r1, [r5, #8]
 801aebe:	4643      	mov	r3, r8
 801aec0:	4628      	mov	r0, r5
 801aec2:	1c56      	adds	r6, r2, #1
 801aec4:	684f      	ldr	r7, [r1, #4]
 801aec6:	4649      	mov	r1, r9
 801aec8:	47b8      	blx	r7
 801aeca:	3c01      	subs	r4, #1
 801aecc:	4632      	mov	r2, r6
 801aece:	d1f5      	bne.n	801aebc <GUI_USAGE_AddRect+0xc>
 801aed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801aed4 <GUI_USAGE_BM_AddPixel>:
 801aed4:	b430      	push	{r4, r5}
 801aed6:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801aeda:	2580      	movs	r5, #128	; 0x80
 801aedc:	6903      	ldr	r3, [r0, #16]
 801aede:	1b12      	subs	r2, r2, r4
 801aee0:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aee4:	fb03 f302 	mul.w	r3, r3, r2
 801aee8:	1b09      	subs	r1, r1, r4
 801aeea:	3314      	adds	r3, #20
 801aeec:	f001 0207 	and.w	r2, r1, #7
 801aef0:	eb03 01e1 	add.w	r1, r3, r1, asr #3
 801aef4:	4115      	asrs	r5, r2
 801aef6:	5c43      	ldrb	r3, [r0, r1]
 801aef8:	432b      	orrs	r3, r5
 801aefa:	bc30      	pop	{r4, r5}
 801aefc:	5443      	strb	r3, [r0, r1]
 801aefe:	4770      	bx	lr

0801af00 <GUI_USAGE_BM_GetNextDirty>:
 801af00:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801af04:	4293      	cmp	r3, r2
 801af06:	dd3b      	ble.n	801af80 <GUI_USAGE_BM_GetNextDirty+0x80>
 801af08:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af0c:	b4f0      	push	{r4, r5, r6, r7}
 801af0e:	680d      	ldr	r5, [r1, #0]
 801af10:	429d      	cmp	r5, r3
 801af12:	da32      	bge.n	801af7a <GUI_USAGE_BM_GetNextDirty+0x7a>
 801af14:	10ee      	asrs	r6, r5, #3
 801af16:	6907      	ldr	r7, [r0, #16]
 801af18:	1e5c      	subs	r4, r3, #1
 801af1a:	f005 0307 	and.w	r3, r5, #7
 801af1e:	fb07 6202 	mla	r2, r7, r2, r6
 801af22:	ebc6 06e4 	rsb	r6, r6, r4, asr #3
 801af26:	3214      	adds	r2, #20
 801af28:	5c84      	ldrb	r4, [r0, r2]
 801af2a:	3201      	adds	r2, #1
 801af2c:	fa04 f303 	lsl.w	r3, r4, r3
 801af30:	4410      	add	r0, r2
 801af32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801af36:	d108      	bne.n	801af4a <GUI_USAGE_BM_GetNextDirty+0x4a>
 801af38:	b326      	cbz	r6, 801af84 <GUI_USAGE_BM_GetNextDirty+0x84>
 801af3a:	3508      	adds	r5, #8
 801af3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801af40:	3e01      	subs	r6, #1
 801af42:	f025 0507 	bic.w	r5, r5, #7
 801af46:	2b00      	cmp	r3, #0
 801af48:	d0f6      	beq.n	801af38 <GUI_USAGE_BM_GetNextDirty+0x38>
 801af4a:	061c      	lsls	r4, r3, #24
 801af4c:	d434      	bmi.n	801afb8 <GUI_USAGE_BM_GetNextDirty+0xb8>
 801af4e:	005b      	lsls	r3, r3, #1
 801af50:	3501      	adds	r5, #1
 801af52:	b2db      	uxtb	r3, r3
 801af54:	061a      	lsls	r2, r3, #24
 801af56:	d5fa      	bpl.n	801af4e <GUI_USAGE_BM_GetNextDirty+0x4e>
 801af58:	065f      	lsls	r7, r3, #25
 801af5a:	462a      	mov	r2, r5
 801af5c:	d504      	bpl.n	801af68 <GUI_USAGE_BM_GetNextDirty+0x68>
 801af5e:	005b      	lsls	r3, r3, #1
 801af60:	3201      	adds	r2, #1
 801af62:	b2db      	uxtb	r3, r3
 801af64:	065c      	lsls	r4, r3, #25
 801af66:	d4fa      	bmi.n	801af5e <GUI_USAGE_BM_GetNextDirty+0x5e>
 801af68:	f002 0307 	and.w	r3, r2, #7
 801af6c:	2b07      	cmp	r3, #7
 801af6e:	d00c      	beq.n	801af8a <GUI_USAGE_BM_GetNextDirty+0x8a>
 801af70:	1b56      	subs	r6, r2, r5
 801af72:	600d      	str	r5, [r1, #0]
 801af74:	1c70      	adds	r0, r6, #1
 801af76:	bcf0      	pop	{r4, r5, r6, r7}
 801af78:	4770      	bx	lr
 801af7a:	2000      	movs	r0, #0
 801af7c:	bcf0      	pop	{r4, r5, r6, r7}
 801af7e:	4770      	bx	lr
 801af80:	2000      	movs	r0, #0
 801af82:	4770      	bx	lr
 801af84:	4630      	mov	r0, r6
 801af86:	bcf0      	pop	{r4, r5, r6, r7}
 801af88:	4770      	bx	lr
 801af8a:	2e00      	cmp	r6, #0
 801af8c:	ddf0      	ble.n	801af70 <GUI_USAGE_BM_GetNextDirty+0x70>
 801af8e:	7804      	ldrb	r4, [r0, #0]
 801af90:	1c47      	adds	r7, r0, #1
 801af92:	2cff      	cmp	r4, #255	; 0xff
 801af94:	d10d      	bne.n	801afb2 <GUI_USAGE_BM_GetNextDirty+0xb2>
 801af96:	1983      	adds	r3, r0, r6
 801af98:	e003      	b.n	801afa2 <GUI_USAGE_BM_GetNextDirty+0xa2>
 801af9a:	f817 4b01 	ldrb.w	r4, [r7], #1
 801af9e:	2cff      	cmp	r4, #255	; 0xff
 801afa0:	d107      	bne.n	801afb2 <GUI_USAGE_BM_GetNextDirty+0xb2>
 801afa2:	42bb      	cmp	r3, r7
 801afa4:	f102 0208 	add.w	r2, r2, #8
 801afa8:	d1f7      	bne.n	801af9a <GUI_USAGE_BM_GetNextDirty+0x9a>
 801afaa:	e7e1      	b.n	801af70 <GUI_USAGE_BM_GetNextDirty+0x70>
 801afac:	0064      	lsls	r4, r4, #1
 801afae:	3201      	adds	r2, #1
 801afb0:	b2e4      	uxtb	r4, r4
 801afb2:	0623      	lsls	r3, r4, #24
 801afb4:	d4fa      	bmi.n	801afac <GUI_USAGE_BM_GetNextDirty+0xac>
 801afb6:	e7db      	b.n	801af70 <GUI_USAGE_BM_GetNextDirty+0x70>
 801afb8:	2bff      	cmp	r3, #255	; 0xff
 801afba:	d1cd      	bne.n	801af58 <GUI_USAGE_BM_GetNextDirty+0x58>
 801afbc:	1dea      	adds	r2, r5, #7
 801afbe:	e7d3      	b.n	801af68 <GUI_USAGE_BM_GetNextDirty+0x68>

0801afc0 <_GUI_USAGE_BM_Delete>:
 801afc0:	f7f6 be6e 	b.w	8011ca0 <GUI_ALLOC_Free>

0801afc4 <GUI_USAGE_BM_Clear>:
 801afc4:	4603      	mov	r3, r0
 801afc6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801afca:	2100      	movs	r1, #0
 801afcc:	3014      	adds	r0, #20
 801afce:	691b      	ldr	r3, [r3, #16]
 801afd0:	fb03 f202 	mul.w	r2, r3, r2
 801afd4:	f006 bebe 	b.w	8021d54 <memset>

0801afd8 <GUI_USAGE_BM_AddHLine>:
 801afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afda:	f9b0 4000 	ldrsh.w	r4, [r0]
 801afde:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801afe2:	1b0c      	subs	r4, r1, r4
 801afe4:	42ac      	cmp	r4, r5
 801afe6:	da2a      	bge.n	801b03e <GUI_USAGE_BM_AddHLine+0x66>
 801afe8:	4423      	add	r3, r4
 801afea:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801afee:	10e7      	asrs	r7, r4, #3
 801aff0:	21ff      	movs	r1, #255	; 0xff
 801aff2:	3b01      	subs	r3, #1
 801aff4:	1b55      	subs	r5, r2, r5
 801aff6:	6902      	ldr	r2, [r0, #16]
 801aff8:	f004 0407 	and.w	r4, r4, #7
 801affc:	43de      	mvns	r6, r3
 801affe:	fb02 7505 	mla	r5, r2, r5, r7
 801b002:	fa41 f404 	asr.w	r4, r1, r4
 801b006:	f006 0607 	and.w	r6, r6, #7
 801b00a:	ebd7 02e3 	rsbs	r2, r7, r3, asr #3
 801b00e:	f105 0514 	add.w	r5, r5, #20
 801b012:	b2e4      	uxtb	r4, r4
 801b014:	fa01 f606 	lsl.w	r6, r1, r6
 801b018:	eb00 0e05 	add.w	lr, r0, r5
 801b01c:	b2f6      	uxtb	r6, r6
 801b01e:	d00f      	beq.n	801b040 <GUI_USAGE_BM_AddHLine+0x68>
 801b020:	5d43      	ldrb	r3, [r0, r5]
 801b022:	3a01      	subs	r2, #1
 801b024:	f10e 0701 	add.w	r7, lr, #1
 801b028:	431c      	orrs	r4, r3
 801b02a:	2a00      	cmp	r2, #0
 801b02c:	5544      	strb	r4, [r0, r5]
 801b02e:	dd03      	ble.n	801b038 <GUI_USAGE_BM_AddHLine+0x60>
 801b030:	4638      	mov	r0, r7
 801b032:	4417      	add	r7, r2
 801b034:	f006 fe8e 	bl	8021d54 <memset>
 801b038:	783c      	ldrb	r4, [r7, #0]
 801b03a:	4334      	orrs	r4, r6
 801b03c:	703c      	strb	r4, [r7, #0]
 801b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b040:	5d43      	ldrb	r3, [r0, r5]
 801b042:	4034      	ands	r4, r6
 801b044:	431c      	orrs	r4, r3
 801b046:	5544      	strb	r4, [r0, r5]
 801b048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b04a:	bf00      	nop

0801b04c <GUI_USAGE_BM_Create>:
 801b04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b050:	f102 040f 	add.w	r4, r2, #15
 801b054:	4680      	mov	r8, r0
 801b056:	b083      	sub	sp, #12
 801b058:	4691      	mov	r9, r2
 801b05a:	1124      	asrs	r4, r4, #4
 801b05c:	461e      	mov	r6, r3
 801b05e:	460f      	mov	r7, r1
 801b060:	0064      	lsls	r4, r4, #1
 801b062:	fb03 f004 	mul.w	r0, r3, r4
 801b066:	3014      	adds	r0, #20
 801b068:	f7f6 fe3a 	bl	8011ce0 <GUI_ALLOC_AllocZero>
 801b06c:	4605      	mov	r5, r0
 801b06e:	b1b8      	cbz	r0, 801b0a0 <GUI_USAGE_BM_Create+0x54>
 801b070:	f7fb f8f8 	bl	8016264 <GUI_Lock>
 801b074:	4628      	mov	r0, r5
 801b076:	f7f6 fc7b 	bl	8011970 <GUI_ALLOC_LockH>
 801b07a:	2301      	movs	r3, #1
 801b07c:	4601      	mov	r1, r0
 801b07e:	4a0a      	ldr	r2, [pc, #40]	; (801b0a8 <GUI_USAGE_BM_Create+0x5c>)
 801b080:	a802      	add	r0, sp, #8
 801b082:	f8a1 9004 	strh.w	r9, [r1, #4]
 801b086:	f840 1d04 	str.w	r1, [r0, #-4]!
 801b08a:	80ce      	strh	r6, [r1, #6]
 801b08c:	610c      	str	r4, [r1, #16]
 801b08e:	f8a1 8000 	strh.w	r8, [r1]
 801b092:	804f      	strh	r7, [r1, #2]
 801b094:	608a      	str	r2, [r1, #8]
 801b096:	818b      	strh	r3, [r1, #12]
 801b098:	f7f6 fc7e 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b09c:	f7fb f8d8 	bl	8016250 <GUI_Unlock>
 801b0a0:	4628      	mov	r0, r5
 801b0a2:	b003      	add	sp, #12
 801b0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0a8:	0802a7f0 	.word	0x0802a7f0

0801b0ac <GUI_MEMDEV__WriteToActiveOpaque>:
 801b0ac:	b900      	cbnz	r0, 801b0b0 <GUI_MEMDEV__WriteToActiveOpaque+0x4>
 801b0ae:	4770      	bx	lr
 801b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b4:	b0a3      	sub	sp, #140	; 0x8c
 801b0b6:	468b      	mov	fp, r1
 801b0b8:	4692      	mov	sl, r2
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	f7f6 fc58 	bl	8011970 <GUI_ALLOC_LockH>
 801b0c0:	ab22      	add	r3, sp, #136	; 0x88
 801b0c2:	6945      	ldr	r5, [r0, #20]
 801b0c4:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7f6 fc65 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f7fe fcf4 	bl	8019abc <GUI_MEMDEV_GetBitsPerPixel>
 801b0d4:	2808      	cmp	r0, #8
 801b0d6:	4681      	mov	r9, r0
 801b0d8:	dd40      	ble.n	801b15c <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801b0da:	2d00      	cmp	r5, #0
 801b0dc:	d13e      	bne.n	801b15c <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801b0de:	4620      	mov	r0, r4
 801b0e0:	f7f6 fc46 	bl	8011970 <GUI_ALLOC_LockH>
 801b0e4:	aa22      	add	r2, sp, #136	; 0x88
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b0ec:	f842 0d10 	str.w	r0, [r2, #-16]!
 801b0f0:	4610      	mov	r0, r2
 801b0f2:	920d      	str	r2, [sp, #52]	; 0x34
 801b0f4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801b0f8:	910a      	str	r1, [sp, #40]	; 0x28
 801b0fa:	9209      	str	r2, [sp, #36]	; 0x24
 801b0fc:	6819      	ldr	r1, [r3, #0]
 801b0fe:	68da      	ldr	r2, [r3, #12]
 801b100:	690e      	ldr	r6, [r1, #16]
 801b102:	930b      	str	r3, [sp, #44]	; 0x2c
 801b104:	920e      	str	r2, [sp, #56]	; 0x38
 801b106:	f7f6 fc47 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b10a:	4892      	ldr	r0, [pc, #584]	; (801b354 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801b10c:	4992      	ldr	r1, [pc, #584]	; (801b358 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>)
 801b10e:	6800      	ldr	r0, [r0, #0]
 801b110:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801b114:	7c40      	ldrb	r0, [r0, #17]
 801b116:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b11a:	690d      	ldr	r5, [r1, #16]
 801b11c:	682b      	ldr	r3, [r5, #0]
 801b11e:	930c      	str	r3, [sp, #48]	; 0x30
 801b120:	f7fc ff6e 	bl	8018000 <GUI_GetBitsPerPixelEx>
 801b124:	2808      	cmp	r0, #8
 801b126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b128:	d914      	bls.n	801b154 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801b12a:	2810      	cmp	r0, #16
 801b12c:	bf8b      	itete	hi
 801b12e:	2220      	movhi	r2, #32
 801b130:	2210      	movls	r2, #16
 801b132:	2704      	movhi	r7, #4
 801b134:	2702      	movls	r7, #2
 801b136:	920b      	str	r2, [sp, #44]	; 0x2c
 801b138:	42ae      	cmp	r6, r5
 801b13a:	f000 82f8 	beq.w	801b72e <GUI_MEMDEV__WriteToActiveOpaque+0x682>
 801b13e:	f1b9 0f20 	cmp.w	r9, #32
 801b142:	f000 81b3 	beq.w	801b4ac <GUI_MEMDEV__WriteToActiveOpaque+0x400>
 801b146:	f1b9 0f10 	cmp.w	r9, #16
 801b14a:	f000 8145 	beq.w	801b3d8 <GUI_MEMDEV__WriteToActiveOpaque+0x32c>
 801b14e:	b023      	add	sp, #140	; 0x8c
 801b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b154:	2208      	movs	r2, #8
 801b156:	2701      	movs	r7, #1
 801b158:	920b      	str	r2, [sp, #44]	; 0x2c
 801b15a:	e7ed      	b.n	801b138 <GUI_MEMDEV__WriteToActiveOpaque+0x8c>
 801b15c:	2100      	movs	r1, #0
 801b15e:	2301      	movs	r3, #1
 801b160:	4620      	mov	r0, r4
 801b162:	4e7c      	ldr	r6, [pc, #496]	; (801b354 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801b164:	9120      	str	r1, [sp, #128]	; 0x80
 801b166:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801b16a:	910b      	str	r1, [sp, #44]	; 0x2c
 801b16c:	9321      	str	r3, [sp, #132]	; 0x84
 801b16e:	930a      	str	r3, [sp, #40]	; 0x28
 801b170:	f7f6 fbfe 	bl	8011970 <GUI_ALLOC_LockH>
 801b174:	4607      	mov	r7, r0
 801b176:	6830      	ldr	r0, [r6, #0]
 801b178:	683a      	ldr	r2, [r7, #0]
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801b180:	6912      	ldr	r2, [r2, #16]
 801b182:	9313      	str	r3, [sp, #76]	; 0x4c
 801b184:	9114      	str	r1, [sp, #80]	; 0x50
 801b186:	693b      	ldr	r3, [r7, #16]
 801b188:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801b18c:	7c40      	ldrb	r0, [r0, #17]
 801b18e:	9309      	str	r3, [sp, #36]	; 0x24
 801b190:	9116      	str	r1, [sp, #88]	; 0x58
 801b192:	f848 7d14 	str.w	r7, [r8, #-20]!
 801b196:	6855      	ldr	r5, [r2, #4]
 801b198:	f8d7 9014 	ldr.w	r9, [r7, #20]
 801b19c:	f7fc ff30 	bl	8018000 <GUI_GetBitsPerPixelEx>
 801b1a0:	6832      	ldr	r2, [r6, #0]
 801b1a2:	900e      	str	r0, [sp, #56]	; 0x38
 801b1a4:	7c50      	ldrb	r0, [r2, #17]
 801b1a6:	f7fc ff45 	bl	8018034 <GUI_GetpfIndex2ColorEx>
 801b1aa:	4607      	mov	r7, r0
 801b1ac:	4640      	mov	r0, r8
 801b1ae:	f7f6 fbf3 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b1b6:	2a08      	cmp	r2, #8
 801b1b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1ba:	f240 809d 	bls.w	801b2f8 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 801b1be:	2a10      	cmp	r2, #16
 801b1c0:	4613      	mov	r3, r2
 801b1c2:	910a      	str	r1, [sp, #40]	; 0x28
 801b1c4:	bf8c      	ite	hi
 801b1c6:	2304      	movhi	r3, #4
 801b1c8:	2302      	movls	r3, #2
 801b1ca:	930c      	str	r3, [sp, #48]	; 0x30
 801b1cc:	42bd      	cmp	r5, r7
 801b1ce:	f000 81c1 	beq.w	801b554 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801b1d2:	6833      	ldr	r3, [r6, #0]
 801b1d4:	7c58      	ldrb	r0, [r3, #17]
 801b1d6:	f7fc ff35 	bl	8018044 <GUI_GetpfColor2IndexEx>
 801b1da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b1dc:	4606      	mov	r6, r0
 801b1de:	0098      	lsls	r0, r3, #2
 801b1e0:	f7f6 fbae 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 801b1e4:	9010      	str	r0, [sp, #64]	; 0x40
 801b1e6:	2800      	cmp	r0, #0
 801b1e8:	d0b1      	beq.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	f7ff fd4a 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 801b1f0:	4604      	mov	r4, r0
 801b1f2:	f1b9 0f00 	cmp.w	r9, #0
 801b1f6:	f000 8088 	beq.w	801b30a <GUI_MEMDEV__WriteToActiveOpaque+0x25e>
 801b1fa:	4648      	mov	r0, r9
 801b1fc:	f7f6 fbb8 	bl	8011970 <GUI_ALLOC_LockH>
 801b200:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b202:	901e      	str	r0, [sp, #120]	; 0x78
 801b204:	2b00      	cmp	r3, #0
 801b206:	f340 81a1 	ble.w	801b54c <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801b20a:	2300      	movs	r3, #0
 801b20c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b210:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b214:	930b      	str	r3, [sp, #44]	; 0x2c
 801b216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b218:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801b21c:	18e3      	adds	r3, r4, r3
 801b21e:	9315      	str	r3, [sp, #84]	; 0x54
 801b220:	ab1f      	add	r3, sp, #124	; 0x7c
 801b222:	4619      	mov	r1, r3
 801b224:	930f      	str	r3, [sp, #60]	; 0x3c
 801b226:	6883      	ldr	r3, [r0, #8]
 801b228:	2200      	movs	r2, #0
 801b22a:	695b      	ldr	r3, [r3, #20]
 801b22c:	921f      	str	r2, [sp, #124]	; 0x7c
 801b22e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b230:	4798      	blx	r3
 801b232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b234:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b236:	4604      	mov	r4, r0
 801b238:	1a9b      	subs	r3, r3, r2
 801b23a:	930e      	str	r3, [sp, #56]	; 0x38
 801b23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b23e:	4283      	cmp	r3, r0
 801b240:	f000 80f6 	beq.w	801b430 <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 801b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b246:	2b01      	cmp	r3, #1
 801b248:	f000 8088 	beq.w	801b35c <GUI_MEMDEV__WriteToActiveOpaque+0x2b0>
 801b24c:	2800      	cmp	r0, #0
 801b24e:	d042      	beq.n	801b2d6 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801b250:	ab1c      	add	r3, sp, #112	; 0x70
 801b252:	9311      	str	r3, [sp, #68]	; 0x44
 801b254:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b256:	f7f6 fb8b 	bl	8011970 <GUI_ALLOC_LockH>
 801b25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b25c:	4607      	mov	r7, r0
 801b25e:	901c      	str	r0, [sp, #112]	; 0x70
 801b260:	2b08      	cmp	r3, #8
 801b262:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b264:	d965      	bls.n	801b332 <GUI_MEMDEV__WriteToActiveOpaque+0x286>
 801b266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b268:	46a3      	mov	fp, r4
 801b26a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b26c:	4682      	mov	sl, r0
 801b26e:	fb02 1903 	mla	r9, r2, r3, r1
 801b272:	f839 0b02 	ldrh.w	r0, [r9], #2
 801b276:	47a8      	blx	r5
 801b278:	47b0      	blx	r6
 801b27a:	f1bb 0b01 	subs.w	fp, fp, #1
 801b27e:	f84a 0b04 	str.w	r0, [sl], #4
 801b282:	d1f6      	bne.n	801b272 <GUI_MEMDEV__WriteToActiveOpaque+0x1c6>
 801b284:	f1b8 0f1f 	cmp.w	r8, #31
 801b288:	d804      	bhi.n	801b294 <GUI_MEMDEV__WriteToActiveOpaque+0x1e8>
 801b28a:	4638      	mov	r0, r7
 801b28c:	4642      	mov	r2, r8
 801b28e:	4621      	mov	r1, r4
 801b290:	f7fb fb66 	bl	8016960 <GUI__CompactPixelIndices>
 801b294:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b296:	2301      	movs	r3, #1
 801b298:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b29a:	4622      	mov	r2, r4
 801b29c:	9105      	str	r1, [sp, #20]
 801b29e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b2a0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801b2a2:	4408      	add	r0, r1
 801b2a4:	2100      	movs	r1, #0
 801b2a6:	9301      	str	r3, [sp, #4]
 801b2a8:	9300      	str	r3, [sp, #0]
 801b2aa:	9103      	str	r1, [sp, #12]
 801b2ac:	f8cd 8008 	str.w	r8, [sp, #8]
 801b2b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b2b2:	9704      	str	r7, [sp, #16]
 801b2b4:	f7fc fa46 	bl	8017744 <LCD_DrawBitmap>
 801b2b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b2ba:	f7f6 fb6d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b2be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b2c0:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b2c2:	441c      	add	r4, r3
 801b2c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b2c6:	6883      	ldr	r3, [r0, #8]
 801b2c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b2ca:	941f      	str	r4, [sp, #124]	; 0x7c
 801b2cc:	695b      	ldr	r3, [r3, #20]
 801b2ce:	4798      	blx	r3
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	d1be      	bne.n	801b254 <GUI_MEMDEV__WriteToActiveOpaque+0x1a8>
 801b2d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b2d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801b2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2dc:	440a      	add	r2, r1
 801b2de:	3301      	adds	r3, #1
 801b2e0:	9215      	str	r2, [sp, #84]	; 0x54
 801b2e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2e6:	3201      	adds	r2, #1
 801b2e8:	920d      	str	r2, [sp, #52]	; 0x34
 801b2ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	f000 812d 	beq.w	801b54c <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801b2f2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b2f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b2f6:	e796      	b.n	801b226 <GUI_MEMDEV__WriteToActiveOpaque+0x17a>
 801b2f8:	2a01      	cmp	r2, #1
 801b2fa:	d103      	bne.n	801b304 <GUI_MEMDEV__WriteToActiveOpaque+0x258>
 801b2fc:	ab20      	add	r3, sp, #128	; 0x80
 801b2fe:	920c      	str	r2, [sp, #48]	; 0x30
 801b300:	930a      	str	r3, [sp, #40]	; 0x28
 801b302:	e763      	b.n	801b1cc <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801b304:	930c      	str	r3, [sp, #48]	; 0x30
 801b306:	910a      	str	r1, [sp, #40]	; 0x28
 801b308:	e760      	b.n	801b1cc <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801b30a:	2501      	movs	r5, #1
 801b30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b30e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b310:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b312:	9305      	str	r3, [sp, #20]
 801b314:	9004      	str	r0, [sp, #16]
 801b316:	4658      	mov	r0, fp
 801b318:	9203      	str	r2, [sp, #12]
 801b31a:	9102      	str	r1, [sp, #8]
 801b31c:	4651      	mov	r1, sl
 801b31e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b322:	9501      	str	r5, [sp, #4]
 801b324:	9500      	str	r5, [sp, #0]
 801b326:	f7fc fa0d 	bl	8017744 <LCD_DrawBitmap>
 801b32a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b32c:	f7f6 fcb8 	bl	8011ca0 <GUI_ALLOC_Free>
 801b330:	e70d      	b.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b334:	46a2      	mov	sl, r4
 801b336:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b338:	4681      	mov	r9, r0
 801b33a:	fb02 1b03 	mla	fp, r2, r3, r1
 801b33e:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801b342:	47a8      	blx	r5
 801b344:	47b0      	blx	r6
 801b346:	f1ba 0a01 	subs.w	sl, sl, #1
 801b34a:	f849 0b04 	str.w	r0, [r9], #4
 801b34e:	d1f6      	bne.n	801b33e <GUI_MEMDEV__WriteToActiveOpaque+0x292>
 801b350:	e798      	b.n	801b284 <GUI_MEMDEV__WriteToActiveOpaque+0x1d8>
 801b352:	bf00      	nop
 801b354:	20000018 	.word	0x20000018
 801b358:	2002afd0 	.word	0x2002afd0
 801b35c:	2800      	cmp	r0, #0
 801b35e:	d0ba      	beq.n	801b2d6 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801b360:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 801b364:	9619      	str	r6, [sp, #100]	; 0x64
 801b366:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b368:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b36a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b36e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801b372:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 801b376:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801b37a:	9517      	str	r5, [sp, #92]	; 0x5c
 801b37c:	9211      	str	r2, [sp, #68]	; 0x44
 801b37e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801b382:	4622      	mov	r2, r4
 801b384:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b386:	2301      	movs	r3, #1
 801b388:	f00e 0007 	and.w	r0, lr, #7
 801b38c:	4649      	mov	r1, r9
 801b38e:	9503      	str	r5, [sp, #12]
 801b390:	2501      	movs	r5, #1
 801b392:	9006      	str	r0, [sp, #24]
 801b394:	eb0a 000e 	add.w	r0, sl, lr
 801b398:	f1be 0f00 	cmp.w	lr, #0
 801b39c:	9605      	str	r6, [sp, #20]
 801b39e:	9502      	str	r5, [sp, #8]
 801b3a0:	bfb8      	it	lt
 801b3a2:	f10e 0e07 	addlt.w	lr, lr, #7
 801b3a6:	9501      	str	r5, [sp, #4]
 801b3a8:	9500      	str	r5, [sp, #0]
 801b3aa:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801b3ae:	f8cd e010 	str.w	lr, [sp, #16]
 801b3b2:	f7fc f8b9 	bl	8017528 <LCD__DrawBitmap_1bpp>
 801b3b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b3b8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b3ba:	463a      	mov	r2, r7
 801b3bc:	441c      	add	r4, r3
 801b3be:	4659      	mov	r1, fp
 801b3c0:	6883      	ldr	r3, [r0, #8]
 801b3c2:	941f      	str	r4, [sp, #124]	; 0x7c
 801b3c4:	695b      	ldr	r3, [r3, #20]
 801b3c6:	4798      	blx	r3
 801b3c8:	4604      	mov	r4, r0
 801b3ca:	2800      	cmp	r0, #0
 801b3cc:	d1d7      	bne.n	801b37e <GUI_MEMDEV__WriteToActiveOpaque+0x2d2>
 801b3ce:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801b3d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b3d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801b3d6:	e77e      	b.n	801b2d6 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801b3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3da:	fb03 f007 	mul.w	r0, r3, r7
 801b3de:	f7f6 faaf 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 801b3e2:	9010      	str	r0, [sp, #64]	; 0x40
 801b3e4:	2800      	cmp	r0, #0
 801b3e6:	f43f aeb2 	beq.w	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b3ea:	f7f6 fac1 	bl	8011970 <GUI_ALLOC_LockH>
 801b3ee:	9020      	str	r0, [sp, #128]	; 0x80
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7f6 fabd 	bl	8011970 <GUI_ALLOC_LockH>
 801b3f6:	f100 0318 	add.w	r3, r0, #24
 801b3fa:	901e      	str	r0, [sp, #120]	; 0x78
 801b3fc:	930e      	str	r3, [sp, #56]	; 0x38
 801b3fe:	692b      	ldr	r3, [r5, #16]
 801b400:	2b00      	cmp	r3, #0
 801b402:	f000 81a6 	beq.w	801b752 <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801b406:	6973      	ldr	r3, [r6, #20]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	f000 81a2 	beq.w	801b752 <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801b40e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801b412:	0080      	lsls	r0, r0, #2
 801b414:	f7f6 fa94 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 801b418:	9011      	str	r0, [sp, #68]	; 0x44
 801b41a:	2800      	cmp	r0, #0
 801b41c:	f040 81ba 	bne.w	801b794 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 801b420:	901f      	str	r0, [sp, #124]	; 0x7c
 801b422:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b424:	f7f6 fab8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b428:	a820      	add	r0, sp, #128	; 0x80
 801b42a:	f7f6 fab5 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b42e:	e77c      	b.n	801b32a <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801b430:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b432:	f7f6 fa9d 	bl	8011970 <GUI_ALLOC_LockH>
 801b436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b438:	4681      	mov	r9, r0
 801b43a:	901c      	str	r0, [sp, #112]	; 0x70
 801b43c:	2b08      	cmp	r3, #8
 801b43e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801b440:	4604      	mov	r4, r0
 801b442:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801b446:	d928      	bls.n	801b49a <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801b448:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801b44c:	47a8      	blx	r5
 801b44e:	47b0      	blx	r6
 801b450:	3f01      	subs	r7, #1
 801b452:	f844 0b04 	str.w	r0, [r4], #4
 801b456:	d1f7      	bne.n	801b448 <GUI_MEMDEV__WriteToActiveOpaque+0x39c>
 801b458:	f1b8 0f1f 	cmp.w	r8, #31
 801b45c:	d804      	bhi.n	801b468 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801b45e:	4648      	mov	r0, r9
 801b460:	4642      	mov	r2, r8
 801b462:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b464:	f7fb fa7c 	bl	8016960 <GUI__CompactPixelIndices>
 801b468:	ab22      	add	r3, sp, #136	; 0x88
 801b46a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b46c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b46e:	461a      	mov	r2, r3
 801b470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b472:	9305      	str	r3, [sp, #20]
 801b474:	2300      	movs	r3, #0
 801b476:	9303      	str	r3, [sp, #12]
 801b478:	2301      	movs	r3, #1
 801b47a:	f852 ed18 	ldr.w	lr, [r2, #-24]!
 801b47e:	f8cd 8008 	str.w	r8, [sp, #8]
 801b482:	4617      	mov	r7, r2
 801b484:	9301      	str	r3, [sp, #4]
 801b486:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b488:	9300      	str	r3, [sp, #0]
 801b48a:	f8cd e010 	str.w	lr, [sp, #16]
 801b48e:	f7fc f959 	bl	8017744 <LCD_DrawBitmap>
 801b492:	4638      	mov	r0, r7
 801b494:	f7f6 fa80 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b498:	e71d      	b.n	801b2d6 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801b49a:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801b49e:	47a8      	blx	r5
 801b4a0:	47b0      	blx	r6
 801b4a2:	3f01      	subs	r7, #1
 801b4a4:	f844 0b04 	str.w	r0, [r4], #4
 801b4a8:	d1f7      	bne.n	801b49a <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801b4aa:	e7d5      	b.n	801b458 <GUI_MEMDEV__WriteToActiveOpaque+0x3ac>
 801b4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4ae:	fb07 f003 	mul.w	r0, r7, r3
 801b4b2:	f7f6 fa45 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 801b4b6:	900e      	str	r0, [sp, #56]	; 0x38
 801b4b8:	2800      	cmp	r0, #0
 801b4ba:	f43f ae48 	beq.w	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b4be:	f7f6 fa57 	bl	8011970 <GUI_ALLOC_LockH>
 801b4c2:	9020      	str	r0, [sp, #128]	; 0x80
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f7f6 fa53 	bl	8011970 <GUI_ALLOC_LockH>
 801b4ca:	901e      	str	r0, [sp, #120]	; 0x78
 801b4cc:	692c      	ldr	r4, [r5, #16]
 801b4ce:	f100 0818 	add.w	r8, r0, #24
 801b4d2:	2c00      	cmp	r4, #0
 801b4d4:	f000 80eb 	beq.w	801b6ae <GUI_MEMDEV__WriteToActiveOpaque+0x602>
 801b4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b4da:	465c      	mov	r4, fp
 801b4dc:	2601      	movs	r6, #1
 801b4de:	950a      	str	r5, [sp, #40]	; 0x28
 801b4e0:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801b4e4:	4693      	mov	fp, r2
 801b4e6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801b4ea:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b4ee:	e017      	b.n	801b520 <GUI_MEMDEV__WriteToActiveOpaque+0x474>
 801b4f0:	2f04      	cmp	r7, #4
 801b4f2:	d021      	beq.n	801b538 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 801b4f4:	2f01      	cmp	r7, #1
 801b4f6:	d015      	beq.n	801b524 <GUI_MEMDEV__WriteToActiveOpaque+0x478>
 801b4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4fa:	2000      	movs	r0, #0
 801b4fc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b4fe:	4651      	mov	r1, sl
 801b500:	9302      	str	r3, [sp, #8]
 801b502:	2301      	movs	r3, #1
 801b504:	9005      	str	r0, [sp, #20]
 801b506:	465a      	mov	r2, fp
 801b508:	9003      	str	r0, [sp, #12]
 801b50a:	4620      	mov	r0, r4
 801b50c:	9601      	str	r6, [sp, #4]
 801b50e:	449a      	add	sl, r3
 801b510:	9600      	str	r6, [sp, #0]
 801b512:	9504      	str	r5, [sp, #16]
 801b514:	f7fc f916 	bl	8017744 <LCD_DrawBitmap>
 801b518:	f1b9 0901 	subs.w	r9, r9, #1
 801b51c:	f000 80e8 	beq.w	801b6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801b520:	2f02      	cmp	r7, #2
 801b522:	d1e5      	bne.n	801b4f0 <GUI_MEMDEV__WriteToActiveOpaque+0x444>
 801b524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b526:	4640      	mov	r0, r8
 801b528:	463b      	mov	r3, r7
 801b52a:	465a      	mov	r2, fp
 801b52c:	44a8      	add	r8, r5
 801b52e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b530:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b532:	692d      	ldr	r5, [r5, #16]
 801b534:	47a8      	blx	r5
 801b536:	e7df      	b.n	801b4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801b538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b53a:	4640      	mov	r0, r8
 801b53c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b53e:	465a      	mov	r2, fp
 801b540:	4498      	add	r8, r3
 801b542:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b544:	463b      	mov	r3, r7
 801b546:	692d      	ldr	r5, [r5, #16]
 801b548:	47a8      	blx	r5
 801b54a:	e7d5      	b.n	801b4f8 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801b54c:	a81e      	add	r0, sp, #120	; 0x78
 801b54e:	f7f6 fa23 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b552:	e6ea      	b.n	801b32a <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801b554:	4620      	mov	r0, r4
 801b556:	f7ff fb95 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 801b55a:	4680      	mov	r8, r0
 801b55c:	f1b9 0f00 	cmp.w	r9, #0
 801b560:	f000 80d4 	beq.w	801b70c <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801b564:	4648      	mov	r0, r9
 801b566:	f7f6 fa03 	bl	8011970 <GUI_ALLOC_LockH>
 801b56a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b56c:	901e      	str	r0, [sp, #120]	; 0x78
 801b56e:	2b00      	cmp	r3, #0
 801b570:	f340 80c8 	ble.w	801b704 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801b574:	2600      	movs	r6, #0
 801b576:	ab1f      	add	r3, sp, #124	; 0x7c
 801b578:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b57c:	2501      	movs	r5, #1
 801b57e:	46b1      	mov	r9, r6
 801b580:	46da      	mov	sl, fp
 801b582:	461f      	mov	r7, r3
 801b584:	6883      	ldr	r3, [r0, #8]
 801b586:	4632      	mov	r2, r6
 801b588:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 801b58c:	4639      	mov	r1, r7
 801b58e:	695b      	ldr	r3, [r3, #20]
 801b590:	4798      	blx	r3
 801b592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b594:	4604      	mov	r4, r0
 801b596:	4283      	cmp	r3, r0
 801b598:	d031      	beq.n	801b5fe <GUI_MEMDEV__WriteToActiveOpaque+0x552>
 801b59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b59c:	2b01      	cmp	r3, #1
 801b59e:	d057      	beq.n	801b650 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 801b5a0:	b320      	cbz	r0, 801b5ec <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801b5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5a4:	960b      	str	r6, [sp, #44]	; 0x2c
 801b5a6:	eb03 0b06 	add.w	fp, r3, r6
 801b5aa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b5ac:	2301      	movs	r3, #1
 801b5ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b5b2:	fb01 8e00 	mla	lr, r1, r0, r8
 801b5b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b5b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801b5ba:	4450      	add	r0, sl
 801b5bc:	9205      	str	r2, [sp, #20]
 801b5be:	4622      	mov	r2, r4
 801b5c0:	9103      	str	r1, [sp, #12]
 801b5c2:	4659      	mov	r1, fp
 801b5c4:	f8cd e010 	str.w	lr, [sp, #16]
 801b5c8:	9602      	str	r6, [sp, #8]
 801b5ca:	9501      	str	r5, [sp, #4]
 801b5cc:	9500      	str	r5, [sp, #0]
 801b5ce:	f7fc f8b9 	bl	8017744 <LCD_DrawBitmap>
 801b5d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b5d4:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b5d6:	4639      	mov	r1, r7
 801b5d8:	441c      	add	r4, r3
 801b5da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5dc:	6883      	ldr	r3, [r0, #8]
 801b5de:	941f      	str	r4, [sp, #124]	; 0x7c
 801b5e0:	695b      	ldr	r3, [r3, #20]
 801b5e2:	4798      	blx	r3
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	2800      	cmp	r0, #0
 801b5e8:	d1df      	bne.n	801b5aa <GUI_MEMDEV__WriteToActiveOpaque+0x4fe>
 801b5ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b5ee:	3601      	adds	r6, #1
 801b5f0:	4498      	add	r8, r3
 801b5f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b5f4:	42b3      	cmp	r3, r6
 801b5f6:	f340 8085 	ble.w	801b704 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801b5fa:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b5fc:	e7c2      	b.n	801b584 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 801b5fe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801b602:	46b3      	mov	fp, r6
 801b604:	4698      	mov	r8, r3
 801b606:	e000      	b.n	801b60a <GUI_MEMDEV__WriteToActiveOpaque+0x55e>
 801b608:	46a3      	mov	fp, r4
 801b60a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b60c:	f10b 0401 	add.w	r4, fp, #1
 801b610:	4639      	mov	r1, r7
 801b612:	6883      	ldr	r3, [r0, #8]
 801b614:	4622      	mov	r2, r4
 801b616:	695b      	ldr	r3, [r3, #20]
 801b618:	4798      	blx	r3
 801b61a:	4580      	cmp	r8, r0
 801b61c:	d0f4      	beq.n	801b608 <GUI_MEMDEV__WriteToActiveOpaque+0x55c>
 801b61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b620:	ebc6 030b 	rsb	r3, r6, fp
 801b624:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801b628:	4650      	mov	r0, sl
 801b62a:	9205      	str	r2, [sp, #20]
 801b62c:	3301      	adds	r3, #1
 801b62e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b630:	f8cd 8010 	str.w	r8, [sp, #16]
 801b634:	1991      	adds	r1, r2, r6
 801b636:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b63a:	9603      	str	r6, [sp, #12]
 801b63c:	9202      	str	r2, [sp, #8]
 801b63e:	9501      	str	r5, [sp, #4]
 801b640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b642:	fb06 8803 	mla	r8, r6, r3, r8
 801b646:	9500      	str	r5, [sp, #0]
 801b648:	4626      	mov	r6, r4
 801b64a:	f7fc f87b 	bl	8017744 <LCD_DrawBitmap>
 801b64e:	e7d0      	b.n	801b5f2 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801b650:	2800      	cmp	r0, #0
 801b652:	d0cb      	beq.n	801b5ec <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801b654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b656:	960b      	str	r6, [sp, #44]	; 0x2c
 801b658:	eb03 0b06 	add.w	fp, r3, r6
 801b65c:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801b660:	4622      	mov	r2, r4
 801b662:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b664:	2301      	movs	r3, #1
 801b666:	f00e 0007 	and.w	r0, lr, #7
 801b66a:	4659      	mov	r1, fp
 801b66c:	9605      	str	r6, [sp, #20]
 801b66e:	9006      	str	r0, [sp, #24]
 801b670:	eb0a 000e 	add.w	r0, sl, lr
 801b674:	f1be 0f00 	cmp.w	lr, #0
 801b678:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b67a:	9502      	str	r5, [sp, #8]
 801b67c:	bfb8      	it	lt
 801b67e:	f10e 0e07 	addlt.w	lr, lr, #7
 801b682:	9603      	str	r6, [sp, #12]
 801b684:	9501      	str	r5, [sp, #4]
 801b686:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801b68a:	9500      	str	r5, [sp, #0]
 801b68c:	f8cd e010 	str.w	lr, [sp, #16]
 801b690:	f7fb ff4a 	bl	8017528 <LCD__DrawBitmap_1bpp>
 801b694:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b696:	981e      	ldr	r0, [sp, #120]	; 0x78
 801b698:	4639      	mov	r1, r7
 801b69a:	441c      	add	r4, r3
 801b69c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b69e:	6883      	ldr	r3, [r0, #8]
 801b6a0:	941f      	str	r4, [sp, #124]	; 0x7c
 801b6a2:	695b      	ldr	r3, [r3, #20]
 801b6a4:	4798      	blx	r3
 801b6a6:	4604      	mov	r4, r0
 801b6a8:	2800      	cmp	r0, #0
 801b6aa:	d1d7      	bne.n	801b65c <GUI_MEMDEV__WriteToActiveOpaque+0x5b0>
 801b6ac:	e79d      	b.n	801b5ea <GUI_MEMDEV__WriteToActiveOpaque+0x53e>
 801b6ae:	46a1      	mov	r9, r4
 801b6b0:	2501      	movs	r5, #1
 801b6b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b6b4:	2301      	movs	r3, #1
 801b6b6:	2f02      	cmp	r7, #2
 801b6b8:	4651      	mov	r1, sl
 801b6ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b6bc:	4658      	mov	r0, fp
 801b6be:	eb0a 0e03 	add.w	lr, sl, r3
 801b6c2:	f000 81a9 	beq.w	801ba18 <GUI_MEMDEV__WriteToActiveOpaque+0x96c>
 801b6c6:	2f04      	cmp	r7, #4
 801b6c8:	f000 817d 	beq.w	801b9c6 <GUI_MEMDEV__WriteToActiveOpaque+0x91a>
 801b6cc:	429f      	cmp	r7, r3
 801b6ce:	f000 8152 	beq.w	801b976 <GUI_MEMDEV__WriteToActiveOpaque+0x8ca>
 801b6d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b6d4:	46f2      	mov	sl, lr
 801b6d6:	f8cd 9014 	str.w	r9, [sp, #20]
 801b6da:	9402      	str	r4, [sp, #8]
 801b6dc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801b6de:	f8cd 900c 	str.w	r9, [sp, #12]
 801b6e2:	9501      	str	r5, [sp, #4]
 801b6e4:	9500      	str	r5, [sp, #0]
 801b6e6:	9404      	str	r4, [sp, #16]
 801b6e8:	f7fc f82c 	bl	8017744 <LCD_DrawBitmap>
 801b6ec:	3e01      	subs	r6, #1
 801b6ee:	d1e1      	bne.n	801b6b4 <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 801b6f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b6f2:	f7f6 f951 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b6f6:	a820      	add	r0, sp, #128	; 0x80
 801b6f8:	f7f6 f94e 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b6fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b6fe:	f7f6 facf 	bl	8011ca0 <GUI_ALLOC_Free>
 801b702:	e524      	b.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b704:	a81e      	add	r0, sp, #120	; 0x78
 801b706:	f7f6 f947 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b70a:	e520      	b.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b70c:	2401      	movs	r4, #1
 801b70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b712:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b714:	9305      	str	r3, [sp, #20]
 801b716:	9004      	str	r0, [sp, #16]
 801b718:	4658      	mov	r0, fp
 801b71a:	9203      	str	r2, [sp, #12]
 801b71c:	9102      	str	r1, [sp, #8]
 801b71e:	4651      	mov	r1, sl
 801b720:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b722:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b724:	9401      	str	r4, [sp, #4]
 801b726:	9400      	str	r4, [sp, #0]
 801b728:	f7fc f80c 	bl	8017744 <LCD_DrawBitmap>
 801b72c:	e50f      	b.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b72e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b730:	2401      	movs	r4, #1
 801b732:	3318      	adds	r3, #24
 801b734:	2500      	movs	r5, #0
 801b736:	9203      	str	r2, [sp, #12]
 801b738:	4651      	mov	r1, sl
 801b73a:	9304      	str	r3, [sp, #16]
 801b73c:	4658      	mov	r0, fp
 801b73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b740:	f8cd 9008 	str.w	r9, [sp, #8]
 801b744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b746:	9505      	str	r5, [sp, #20]
 801b748:	9401      	str	r4, [sp, #4]
 801b74a:	9400      	str	r4, [sp, #0]
 801b74c:	f7fb fffa 	bl	8017744 <LCD_DrawBitmap>
 801b750:	e4fd      	b.n	801b14e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801b752:	2501      	movs	r5, #1
 801b754:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b758:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b75a:	2301      	movs	r3, #1
 801b75c:	2f02      	cmp	r7, #2
 801b75e:	4651      	mov	r1, sl
 801b760:	464a      	mov	r2, r9
 801b762:	4658      	mov	r0, fp
 801b764:	eb0a 0e03 	add.w	lr, sl, r3
 801b768:	f000 80d4 	beq.w	801b914 <GUI_MEMDEV__WriteToActiveOpaque+0x868>
 801b76c:	2f04      	cmp	r7, #4
 801b76e:	f000 80a0 	beq.w	801b8b2 <GUI_MEMDEV__WriteToActiveOpaque+0x806>
 801b772:	429f      	cmp	r7, r3
 801b774:	d06d      	beq.n	801b852 <GUI_MEMDEV__WriteToActiveOpaque+0x7a6>
 801b776:	2400      	movs	r4, #0
 801b778:	9501      	str	r5, [sp, #4]
 801b77a:	9500      	str	r5, [sp, #0]
 801b77c:	46f2      	mov	sl, lr
 801b77e:	9405      	str	r4, [sp, #20]
 801b780:	9403      	str	r4, [sp, #12]
 801b782:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b784:	9402      	str	r4, [sp, #8]
 801b786:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801b788:	9404      	str	r4, [sp, #16]
 801b78a:	f7fb ffdb 	bl	8017744 <LCD_DrawBitmap>
 801b78e:	3e01      	subs	r6, #1
 801b790:	d1e3      	bne.n	801b75a <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 801b792:	e646      	b.n	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b794:	f7f6 f8ec 	bl	8011970 <GUI_ALLOC_LockH>
 801b798:	901f      	str	r0, [sp, #124]	; 0x7c
 801b79a:	2800      	cmp	r0, #0
 801b79c:	f43f ae41 	beq.w	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b7a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7a2:	2401      	movs	r4, #1
 801b7a4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b7a8:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801b7ac:	4690      	mov	r8, r2
 801b7ae:	950c      	str	r5, [sp, #48]	; 0x30
 801b7b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801b7b4:	46b1      	mov	r9, r6
 801b7b6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801b7ba:	e017      	b.n	801b7ec <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 801b7bc:	2f04      	cmp	r7, #4
 801b7be:	d02e      	beq.n	801b81e <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 801b7c0:	2f01      	cmp	r7, #1
 801b7c2:	d028      	beq.n	801b816 <GUI_MEMDEV__WriteToActiveOpaque+0x76a>
 801b7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7c6:	2000      	movs	r0, #0
 801b7c8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b7ca:	4651      	mov	r1, sl
 801b7cc:	9302      	str	r3, [sp, #8]
 801b7ce:	2301      	movs	r3, #1
 801b7d0:	9005      	str	r0, [sp, #20]
 801b7d2:	4642      	mov	r2, r8
 801b7d4:	9003      	str	r0, [sp, #12]
 801b7d6:	449a      	add	sl, r3
 801b7d8:	9401      	str	r4, [sp, #4]
 801b7da:	9400      	str	r4, [sp, #0]
 801b7dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b7de:	9504      	str	r5, [sp, #16]
 801b7e0:	f7fb ffb0 	bl	8017744 <LCD_DrawBitmap>
 801b7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e6:	3b01      	subs	r3, #1
 801b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ea:	d02b      	beq.n	801b844 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 801b7ec:	2f02      	cmp	r7, #2
 801b7ee:	d1e5      	bne.n	801b7bc <GUI_MEMDEV__WriteToActiveOpaque+0x710>
 801b7f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b7f2:	461e      	mov	r6, r3
 801b7f4:	463b      	mov	r3, r7
 801b7f6:	4642      	mov	r2, r8
 801b7f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801b7fa:	4658      	mov	r0, fp
 801b7fc:	f8d9 5014 	ldr.w	r5, [r9, #20]
 801b800:	47a8      	blx	r5
 801b802:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b804:	4631      	mov	r1, r6
 801b806:	463b      	mov	r3, r7
 801b808:	44ab      	add	fp, r5
 801b80a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b80c:	4642      	mov	r2, r8
 801b80e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b810:	692d      	ldr	r5, [r5, #16]
 801b812:	47a8      	blx	r5
 801b814:	e7d6      	b.n	801b7c4 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801b816:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b818:	461e      	mov	r6, r3
 801b81a:	2302      	movs	r3, #2
 801b81c:	e7eb      	b.n	801b7f6 <GUI_MEMDEV__WriteToActiveOpaque+0x74a>
 801b81e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b820:	4642      	mov	r2, r8
 801b822:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b824:	4658      	mov	r0, fp
 801b826:	461d      	mov	r5, r3
 801b828:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801b82a:	2302      	movs	r3, #2
 801b82c:	44b3      	add	fp, r6
 801b82e:	f8d9 6014 	ldr.w	r6, [r9, #20]
 801b832:	47b0      	blx	r6
 801b834:	4629      	mov	r1, r5
 801b836:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b838:	463b      	mov	r3, r7
 801b83a:	4642      	mov	r2, r8
 801b83c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b83e:	692d      	ldr	r5, [r5, #16]
 801b840:	47a8      	blx	r5
 801b842:	e7bf      	b.n	801b7c4 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801b844:	a81f      	add	r0, sp, #124	; 0x7c
 801b846:	f7f6 f8a7 	bl	8011998 <GUI_ALLOC_UnlockH>
 801b84a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b84c:	f7f6 fa28 	bl	8011ca0 <GUI_ALLOC_Free>
 801b850:	e5e7      	b.n	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b854:	4644      	mov	r4, r8
 801b856:	9609      	str	r6, [sp, #36]	; 0x24
 801b858:	005d      	lsls	r5, r3, #1
 801b85a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b85c:	950c      	str	r5, [sp, #48]	; 0x30
 801b85e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b860:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b864:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b868:	f838 0b02 	ldrh.w	r0, [r8], #2
 801b86c:	47a0      	blx	r4
 801b86e:	47b0      	blx	r6
 801b870:	f1b9 0901 	subs.w	r9, r9, #1
 801b874:	f805 0b01 	strb.w	r0, [r5], #1
 801b878:	d1f6      	bne.n	801b868 <GUI_MEMDEV__WriteToActiveOpaque+0x7bc>
 801b87a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b87c:	2301      	movs	r3, #1
 801b87e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b880:	4651      	mov	r1, sl
 801b882:	46ae      	mov	lr, r5
 801b884:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b886:	9002      	str	r0, [sp, #8]
 801b888:	4658      	mov	r0, fp
 801b88a:	44ae      	add	lr, r5
 801b88c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b88e:	f8cd 9014 	str.w	r9, [sp, #20]
 801b892:	449a      	add	sl, r3
 801b894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b896:	f8cd 900c 	str.w	r9, [sp, #12]
 801b89a:	9701      	str	r7, [sp, #4]
 801b89c:	9700      	str	r7, [sp, #0]
 801b89e:	9504      	str	r5, [sp, #16]
 801b8a0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b8a4:	f7fb ff4e 	bl	8017744 <LCD_DrawBitmap>
 801b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8aa:	3b01      	subs	r3, #1
 801b8ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b8ae:	d1d6      	bne.n	801b85e <GUI_MEMDEV__WriteToActiveOpaque+0x7b2>
 801b8b0:	e5b7      	b.n	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8b4:	2501      	movs	r5, #1
 801b8b6:	9609      	str	r6, [sp, #36]	; 0x24
 801b8b8:	4644      	mov	r4, r8
 801b8ba:	005e      	lsls	r6, r3, #1
 801b8bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b8be:	960c      	str	r6, [sp, #48]	; 0x30
 801b8c0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b8c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b8c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b8ca:	f838 0b02 	ldrh.w	r0, [r8], #2
 801b8ce:	47a0      	blx	r4
 801b8d0:	47b8      	blx	r7
 801b8d2:	f1b9 0901 	subs.w	r9, r9, #1
 801b8d6:	f846 0b04 	str.w	r0, [r6], #4
 801b8da:	d1f6      	bne.n	801b8ca <GUI_MEMDEV__WriteToActiveOpaque+0x81e>
 801b8dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b8de:	2301      	movs	r3, #1
 801b8e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b8e2:	4651      	mov	r1, sl
 801b8e4:	46b6      	mov	lr, r6
 801b8e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b8e8:	9002      	str	r0, [sp, #8]
 801b8ea:	4658      	mov	r0, fp
 801b8ec:	44b6      	add	lr, r6
 801b8ee:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b8f0:	f8cd 9014 	str.w	r9, [sp, #20]
 801b8f4:	449a      	add	sl, r3
 801b8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8f8:	f8cd 900c 	str.w	r9, [sp, #12]
 801b8fc:	9501      	str	r5, [sp, #4]
 801b8fe:	9500      	str	r5, [sp, #0]
 801b900:	9604      	str	r6, [sp, #16]
 801b902:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b906:	f7fb ff1d 	bl	8017744 <LCD_DrawBitmap>
 801b90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b90c:	3b01      	subs	r3, #1
 801b90e:	9309      	str	r3, [sp, #36]	; 0x24
 801b910:	d1d6      	bne.n	801b8c0 <GUI_MEMDEV__WriteToActiveOpaque+0x814>
 801b912:	e586      	b.n	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b916:	2501      	movs	r5, #1
 801b918:	9609      	str	r6, [sp, #36]	; 0x24
 801b91a:	4644      	mov	r4, r8
 801b91c:	005e      	lsls	r6, r3, #1
 801b91e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b920:	960c      	str	r6, [sp, #48]	; 0x30
 801b922:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b924:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b928:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b92c:	f838 0b02 	ldrh.w	r0, [r8], #2
 801b930:	47a0      	blx	r4
 801b932:	47b8      	blx	r7
 801b934:	f1b9 0901 	subs.w	r9, r9, #1
 801b938:	f826 0b02 	strh.w	r0, [r6], #2
 801b93c:	d1f6      	bne.n	801b92c <GUI_MEMDEV__WriteToActiveOpaque+0x880>
 801b93e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b940:	2301      	movs	r3, #1
 801b942:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b944:	4651      	mov	r1, sl
 801b946:	46b6      	mov	lr, r6
 801b948:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b94a:	9002      	str	r0, [sp, #8]
 801b94c:	4658      	mov	r0, fp
 801b94e:	44b6      	add	lr, r6
 801b950:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b952:	f8cd 9014 	str.w	r9, [sp, #20]
 801b956:	449a      	add	sl, r3
 801b958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b95a:	f8cd 900c 	str.w	r9, [sp, #12]
 801b95e:	9501      	str	r5, [sp, #4]
 801b960:	9500      	str	r5, [sp, #0]
 801b962:	9604      	str	r6, [sp, #16]
 801b964:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801b968:	f7fb feec 	bl	8017744 <LCD_DrawBitmap>
 801b96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b96e:	3b01      	subs	r3, #1
 801b970:	9309      	str	r3, [sp, #36]	; 0x24
 801b972:	d1d6      	bne.n	801b922 <GUI_MEMDEV__WriteToActiveOpaque+0x876>
 801b974:	e555      	b.n	801b422 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801b976:	0095      	lsls	r5, r2, #2
 801b978:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b97a:	9609      	str	r6, [sp, #36]	; 0x24
 801b97c:	950c      	str	r5, [sp, #48]	; 0x30
 801b97e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b980:	4646      	mov	r6, r8
 801b982:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b986:	f856 0b04 	ldr.w	r0, [r6], #4
 801b98a:	47a0      	blx	r4
 801b98c:	f1b9 0901 	subs.w	r9, r9, #1
 801b990:	f805 0b01 	strb.w	r0, [r5], #1
 801b994:	d1f7      	bne.n	801b986 <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 801b996:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b998:	2301      	movs	r3, #1
 801b99a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b99c:	4651      	mov	r1, sl
 801b99e:	9002      	str	r0, [sp, #8]
 801b9a0:	4658      	mov	r0, fp
 801b9a2:	f8cd 9014 	str.w	r9, [sp, #20]
 801b9a6:	449a      	add	sl, r3
 801b9a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b9aa:	f8cd 900c 	str.w	r9, [sp, #12]
 801b9ae:	9701      	str	r7, [sp, #4]
 801b9b0:	9700      	str	r7, [sp, #0]
 801b9b2:	9604      	str	r6, [sp, #16]
 801b9b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b9b6:	f7fb fec5 	bl	8017744 <LCD_DrawBitmap>
 801b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9bc:	44a8      	add	r8, r5
 801b9be:	3b01      	subs	r3, #1
 801b9c0:	9309      	str	r3, [sp, #36]	; 0x24
 801b9c2:	d1dc      	bne.n	801b97e <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 801b9c4:	e694      	b.n	801b6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801b9c6:	9609      	str	r6, [sp, #36]	; 0x24
 801b9c8:	2501      	movs	r5, #1
 801b9ca:	0096      	lsls	r6, r2, #2
 801b9cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b9ce:	960c      	str	r6, [sp, #48]	; 0x30
 801b9d0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b9d2:	4647      	mov	r7, r8
 801b9d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801b9d8:	f857 0b04 	ldr.w	r0, [r7], #4
 801b9dc:	47a0      	blx	r4
 801b9de:	f1b9 0901 	subs.w	r9, r9, #1
 801b9e2:	f846 0b04 	str.w	r0, [r6], #4
 801b9e6:	d1f7      	bne.n	801b9d8 <GUI_MEMDEV__WriteToActiveOpaque+0x92c>
 801b9e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b9ea:	2301      	movs	r3, #1
 801b9ec:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801b9ee:	4651      	mov	r1, sl
 801b9f0:	9002      	str	r0, [sp, #8]
 801b9f2:	4658      	mov	r0, fp
 801b9f4:	f8cd 9014 	str.w	r9, [sp, #20]
 801b9f8:	449a      	add	sl, r3
 801b9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b9fc:	f8cd 900c 	str.w	r9, [sp, #12]
 801ba00:	9501      	str	r5, [sp, #4]
 801ba02:	9500      	str	r5, [sp, #0]
 801ba04:	9704      	str	r7, [sp, #16]
 801ba06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ba08:	f7fb fe9c 	bl	8017744 <LCD_DrawBitmap>
 801ba0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba0e:	44b0      	add	r8, r6
 801ba10:	3b01      	subs	r3, #1
 801ba12:	9309      	str	r3, [sp, #36]	; 0x24
 801ba14:	d1dc      	bne.n	801b9d0 <GUI_MEMDEV__WriteToActiveOpaque+0x924>
 801ba16:	e66b      	b.n	801b6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801ba18:	9609      	str	r6, [sp, #36]	; 0x24
 801ba1a:	2501      	movs	r5, #1
 801ba1c:	0096      	lsls	r6, r2, #2
 801ba1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ba20:	960c      	str	r6, [sp, #48]	; 0x30
 801ba22:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801ba24:	4647      	mov	r7, r8
 801ba26:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ba2a:	f857 0b04 	ldr.w	r0, [r7], #4
 801ba2e:	47a0      	blx	r4
 801ba30:	f1b9 0901 	subs.w	r9, r9, #1
 801ba34:	f826 0b02 	strh.w	r0, [r6], #2
 801ba38:	d1f7      	bne.n	801ba2a <GUI_MEMDEV__WriteToActiveOpaque+0x97e>
 801ba3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ba3c:	2301      	movs	r3, #1
 801ba3e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801ba40:	4651      	mov	r1, sl
 801ba42:	9002      	str	r0, [sp, #8]
 801ba44:	4658      	mov	r0, fp
 801ba46:	f8cd 9014 	str.w	r9, [sp, #20]
 801ba4a:	449a      	add	sl, r3
 801ba4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba4e:	f8cd 900c 	str.w	r9, [sp, #12]
 801ba52:	9501      	str	r5, [sp, #4]
 801ba54:	9500      	str	r5, [sp, #0]
 801ba56:	9704      	str	r7, [sp, #16]
 801ba58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ba5a:	f7fb fe73 	bl	8017744 <LCD_DrawBitmap>
 801ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba60:	44b0      	add	r8, r6
 801ba62:	3b01      	subs	r3, #1
 801ba64:	9309      	str	r3, [sp, #36]	; 0x24
 801ba66:	d1dc      	bne.n	801ba22 <GUI_MEMDEV__WriteToActiveOpaque+0x976>
 801ba68:	e642      	b.n	801b6f0 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801ba6a:	bf00      	nop

0801ba6c <_OnExit>:
 801ba6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba70:	2400      	movs	r4, #0
 801ba72:	4e18      	ldr	r6, [pc, #96]	; (801bad4 <_OnExit+0x68>)
 801ba74:	4d18      	ldr	r5, [pc, #96]	; (801bad8 <_OnExit+0x6c>)
 801ba76:	2218      	movs	r2, #24
 801ba78:	6034      	str	r4, [r6, #0]
 801ba7a:	4621      	mov	r1, r4
 801ba7c:	602c      	str	r4, [r5, #0]
 801ba7e:	4f17      	ldr	r7, [pc, #92]	; (801badc <_OnExit+0x70>)
 801ba80:	4e17      	ldr	r6, [pc, #92]	; (801bae0 <_OnExit+0x74>)
 801ba82:	4d18      	ldr	r5, [pc, #96]	; (801bae4 <_OnExit+0x78>)
 801ba84:	4b18      	ldr	r3, [pc, #96]	; (801bae8 <_OnExit+0x7c>)
 801ba86:	603c      	str	r4, [r7, #0]
 801ba88:	6034      	str	r4, [r6, #0]
 801ba8a:	f103 000c 	add.w	r0, r3, #12
 801ba8e:	602c      	str	r4, [r5, #0]
 801ba90:	4f16      	ldr	r7, [pc, #88]	; (801baec <_OnExit+0x80>)
 801ba92:	4d17      	ldr	r5, [pc, #92]	; (801baf0 <_OnExit+0x84>)
 801ba94:	4e17      	ldr	r6, [pc, #92]	; (801baf4 <_OnExit+0x88>)
 801ba96:	603c      	str	r4, [r7, #0]
 801ba98:	6034      	str	r4, [r6, #0]
 801ba9a:	6074      	str	r4, [r6, #4]
 801ba9c:	607c      	str	r4, [r7, #4]
 801ba9e:	682e      	ldr	r6, [r5, #0]
 801baa0:	701c      	strb	r4, [r3, #0]
 801baa2:	605c      	str	r4, [r3, #4]
 801baa4:	609c      	str	r4, [r3, #8]
 801baa6:	47b0      	blx	r6
 801baa8:	4b13      	ldr	r3, [pc, #76]	; (801baf8 <_OnExit+0x8c>)
 801baaa:	4621      	mov	r1, r4
 801baac:	4813      	ldr	r0, [pc, #76]	; (801bafc <_OnExit+0x90>)
 801baae:	2210      	movs	r2, #16
 801bab0:	601c      	str	r4, [r3, #0]
 801bab2:	6004      	str	r4, [r0, #0]
 801bab4:	605c      	str	r4, [r3, #4]
 801bab6:	4812      	ldr	r0, [pc, #72]	; (801bb00 <_OnExit+0x94>)
 801bab8:	682b      	ldr	r3, [r5, #0]
 801baba:	4798      	blx	r3
 801babc:	682b      	ldr	r3, [r5, #0]
 801babe:	4621      	mov	r1, r4
 801bac0:	2210      	movs	r2, #16
 801bac2:	4810      	ldr	r0, [pc, #64]	; (801bb04 <_OnExit+0x98>)
 801bac4:	4798      	blx	r3
 801bac6:	682b      	ldr	r3, [r5, #0]
 801bac8:	4621      	mov	r1, r4
 801baca:	2210      	movs	r2, #16
 801bacc:	480e      	ldr	r0, [pc, #56]	; (801bb08 <_OnExit+0x9c>)
 801bace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bad2:	4718      	bx	r3
 801bad4:	2002b030 	.word	0x2002b030
 801bad8:	2002b044 	.word	0x2002b044
 801badc:	2002aff0 	.word	0x2002aff0
 801bae0:	2002b024 	.word	0x2002b024
 801bae4:	2002b034 	.word	0x2002b034
 801bae8:	200003c8 	.word	0x200003c8
 801baec:	2002b004 	.word	0x2002b004
 801baf0:	20000050 	.word	0x20000050
 801baf4:	2002b038 	.word	0x2002b038
 801baf8:	2002aff4 	.word	0x2002aff4
 801bafc:	2002b000 	.word	0x2002b000
 801bb00:	2002b068 	.word	0x2002b068
 801bb04:	2002b058 	.word	0x2002b058
 801bb08:	2002b048 	.word	0x2002b048

0801bb0c <_Findy1>:
 801bb0c:	2800      	cmp	r0, #0
 801bb0e:	d063      	beq.n	801bbd8 <_Findy1+0xcc>
 801bb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb12:	460e      	mov	r6, r1
 801bb14:	b085      	sub	sp, #20
 801bb16:	4617      	mov	r7, r2
 801bb18:	4604      	mov	r4, r0
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	f7f5 ff28 	bl	8011970 <GUI_ALLOC_LockH>
 801bb20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bb22:	9001      	str	r0, [sp, #4]
 801bb24:	07a2      	lsls	r2, r4, #30
 801bb26:	d524      	bpl.n	801bb72 <_Findy1+0x66>
 801bb28:	ad02      	add	r5, sp, #8
 801bb2a:	2f00      	cmp	r7, #0
 801bb2c:	d03f      	beq.n	801bbae <_Findy1+0xa2>
 801bb2e:	4601      	mov	r1, r0
 801bb30:	463a      	mov	r2, r7
 801bb32:	4628      	mov	r0, r5
 801bb34:	f7fb fa04 	bl	8016f40 <GUI__IntersectRects>
 801bb38:	4629      	mov	r1, r5
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	f7f6 fcd8 	bl	80124f0 <GUI_RectsIntersect>
 801bb40:	b368      	cbz	r0, 801bb9e <_Findy1+0x92>
 801bb42:	07e3      	lsls	r3, r4, #31
 801bb44:	9801      	ldr	r0, [sp, #4]
 801bb46:	d41c      	bmi.n	801bb82 <_Findy1+0x76>
 801bb48:	2f00      	cmp	r7, #0
 801bb4a:	d042      	beq.n	801bbd2 <_Findy1+0xc6>
 801bb4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801bb50:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bb54:	4293      	cmp	r3, r2
 801bb56:	bfb8      	it	lt
 801bb58:	4613      	movlt	r3, r2
 801bb5a:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 801bb5e:	4293      	cmp	r3, r2
 801bb60:	dd29      	ble.n	801bbb6 <_Findy1+0xaa>
 801bb62:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801bb66:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801bb6a:	429a      	cmp	r2, r3
 801bb6c:	db01      	blt.n	801bb72 <_Findy1+0x66>
 801bb6e:	3b01      	subs	r3, #1
 801bb70:	80f3      	strh	r3, [r6, #6]
 801bb72:	6a04      	ldr	r4, [r0, #32]
 801bb74:	a801      	add	r0, sp, #4
 801bb76:	f7f5 ff0f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bb7a:	2c00      	cmp	r4, #0
 801bb7c:	d1cd      	bne.n	801bb1a <_Findy1+0xe>
 801bb7e:	b005      	add	sp, #20
 801bb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb82:	69c4      	ldr	r4, [r0, #28]
 801bb84:	2c00      	cmp	r4, #0
 801bb86:	d0f4      	beq.n	801bb72 <_Findy1+0x66>
 801bb88:	4620      	mov	r0, r4
 801bb8a:	462a      	mov	r2, r5
 801bb8c:	4631      	mov	r1, r6
 801bb8e:	f7ff ffbd 	bl	801bb0c <_Findy1>
 801bb92:	4620      	mov	r0, r4
 801bb94:	f7f5 fee2 	bl	801195c <GUI_ALLOC_h2p>
 801bb98:	6a04      	ldr	r4, [r0, #32]
 801bb9a:	2c00      	cmp	r4, #0
 801bb9c:	d1f4      	bne.n	801bb88 <_Findy1+0x7c>
 801bb9e:	9801      	ldr	r0, [sp, #4]
 801bba0:	6a04      	ldr	r4, [r0, #32]
 801bba2:	a801      	add	r0, sp, #4
 801bba4:	f7f5 fef8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bba8:	2c00      	cmp	r4, #0
 801bbaa:	d1b6      	bne.n	801bb1a <_Findy1+0xe>
 801bbac:	e7e7      	b.n	801bb7e <_Findy1+0x72>
 801bbae:	c803      	ldmia	r0, {r0, r1}
 801bbb0:	e885 0003 	stmia.w	r5, {r0, r1}
 801bbb4:	e7c0      	b.n	801bb38 <_Findy1+0x2c>
 801bbb6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bbba:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	ddd7      	ble.n	801bb72 <_Findy1+0x66>
 801bbc2:	6a04      	ldr	r4, [r0, #32]
 801bbc4:	a801      	add	r0, sp, #4
 801bbc6:	80f3      	strh	r3, [r6, #6]
 801bbc8:	f7f5 fee6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bbcc:	2c00      	cmp	r4, #0
 801bbce:	d1a4      	bne.n	801bb1a <_Findy1+0xe>
 801bbd0:	e7d5      	b.n	801bb7e <_Findy1+0x72>
 801bbd2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bbd6:	e7c0      	b.n	801bb5a <_Findy1+0x4e>
 801bbd8:	4770      	bx	lr
 801bbda:	bf00      	nop

0801bbdc <_Findx0>:
 801bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbe0:	4604      	mov	r4, r0
 801bbe2:	b084      	sub	sp, #16
 801bbe4:	2800      	cmp	r0, #0
 801bbe6:	d049      	beq.n	801bc7c <_Findx0+0xa0>
 801bbe8:	460f      	mov	r7, r1
 801bbea:	4690      	mov	r8, r2
 801bbec:	2600      	movs	r6, #0
 801bbee:	e00c      	b.n	801bc0a <_Findx0+0x2e>
 801bbf0:	07e3      	lsls	r3, r4, #31
 801bbf2:	d42f      	bmi.n	801bc54 <_Findx0+0x78>
 801bbf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801bbf8:	2601      	movs	r6, #1
 801bbfa:	9801      	ldr	r0, [sp, #4]
 801bbfc:	4433      	add	r3, r6
 801bbfe:	803b      	strh	r3, [r7, #0]
 801bc00:	6a04      	ldr	r4, [r0, #32]
 801bc02:	a801      	add	r0, sp, #4
 801bc04:	f7f5 fec8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bc08:	b1e4      	cbz	r4, 801bc44 <_Findx0+0x68>
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	f7f5 feb0 	bl	8011970 <GUI_ALLOC_LockH>
 801bc10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bc12:	9001      	str	r0, [sp, #4]
 801bc14:	07a2      	lsls	r2, r4, #30
 801bc16:	d5f3      	bpl.n	801bc00 <_Findx0+0x24>
 801bc18:	ad02      	add	r5, sp, #8
 801bc1a:	f1b8 0f00 	cmp.w	r8, #0
 801bc1e:	d015      	beq.n	801bc4c <_Findx0+0x70>
 801bc20:	4601      	mov	r1, r0
 801bc22:	4642      	mov	r2, r8
 801bc24:	4628      	mov	r0, r5
 801bc26:	f7fb f98b 	bl	8016f40 <GUI__IntersectRects>
 801bc2a:	4629      	mov	r1, r5
 801bc2c:	4638      	mov	r0, r7
 801bc2e:	f7f6 fc5f 	bl	80124f0 <GUI_RectsIntersect>
 801bc32:	2800      	cmp	r0, #0
 801bc34:	d1dc      	bne.n	801bbf0 <_Findx0+0x14>
 801bc36:	9801      	ldr	r0, [sp, #4]
 801bc38:	6a04      	ldr	r4, [r0, #32]
 801bc3a:	a801      	add	r0, sp, #4
 801bc3c:	f7f5 feac 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bc40:	2c00      	cmp	r4, #0
 801bc42:	d1e2      	bne.n	801bc0a <_Findx0+0x2e>
 801bc44:	4630      	mov	r0, r6
 801bc46:	b004      	add	sp, #16
 801bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc4c:	c803      	ldmia	r0, {r0, r1}
 801bc4e:	e885 0003 	stmia.w	r5, {r0, r1}
 801bc52:	e7ea      	b.n	801bc2a <_Findx0+0x4e>
 801bc54:	9801      	ldr	r0, [sp, #4]
 801bc56:	69c4      	ldr	r4, [r0, #28]
 801bc58:	2c00      	cmp	r4, #0
 801bc5a:	d0d1      	beq.n	801bc00 <_Findx0+0x24>
 801bc5c:	462a      	mov	r2, r5
 801bc5e:	4639      	mov	r1, r7
 801bc60:	4620      	mov	r0, r4
 801bc62:	f7ff ffbb 	bl	801bbdc <_Findx0>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	4620      	mov	r0, r4
 801bc6a:	bf18      	it	ne
 801bc6c:	2601      	movne	r6, #1
 801bc6e:	f7f5 fe75 	bl	801195c <GUI_ALLOC_h2p>
 801bc72:	6a04      	ldr	r4, [r0, #32]
 801bc74:	2c00      	cmp	r4, #0
 801bc76:	d1f1      	bne.n	801bc5c <_Findx0+0x80>
 801bc78:	9801      	ldr	r0, [sp, #4]
 801bc7a:	e7dd      	b.n	801bc38 <_Findx0+0x5c>
 801bc7c:	4606      	mov	r6, r0
 801bc7e:	e7e1      	b.n	801bc44 <_Findx0+0x68>

0801bc80 <_Findx1>:
 801bc80:	2800      	cmp	r0, #0
 801bc82:	d043      	beq.n	801bd0c <_Findx1+0x8c>
 801bc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc86:	460e      	mov	r6, r1
 801bc88:	b085      	sub	sp, #20
 801bc8a:	4617      	mov	r7, r2
 801bc8c:	4604      	mov	r4, r0
 801bc8e:	e00b      	b.n	801bca8 <_Findx1+0x28>
 801bc90:	07e3      	lsls	r3, r4, #31
 801bc92:	d42a      	bmi.n	801bcea <_Findx1+0x6a>
 801bc94:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bc98:	9801      	ldr	r0, [sp, #4]
 801bc9a:	3b01      	subs	r3, #1
 801bc9c:	80b3      	strh	r3, [r6, #4]
 801bc9e:	6a04      	ldr	r4, [r0, #32]
 801bca0:	a801      	add	r0, sp, #4
 801bca2:	f7f5 fe79 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bca6:	b1d4      	cbz	r4, 801bcde <_Findx1+0x5e>
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f7f5 fe61 	bl	8011970 <GUI_ALLOC_LockH>
 801bcae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bcb0:	9001      	str	r0, [sp, #4]
 801bcb2:	07a2      	lsls	r2, r4, #30
 801bcb4:	d5f3      	bpl.n	801bc9e <_Findx1+0x1e>
 801bcb6:	ad02      	add	r5, sp, #8
 801bcb8:	b19f      	cbz	r7, 801bce2 <_Findx1+0x62>
 801bcba:	4601      	mov	r1, r0
 801bcbc:	463a      	mov	r2, r7
 801bcbe:	4628      	mov	r0, r5
 801bcc0:	f7fb f93e 	bl	8016f40 <GUI__IntersectRects>
 801bcc4:	4629      	mov	r1, r5
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	f7f6 fc12 	bl	80124f0 <GUI_RectsIntersect>
 801bccc:	2800      	cmp	r0, #0
 801bcce:	d1df      	bne.n	801bc90 <_Findx1+0x10>
 801bcd0:	9801      	ldr	r0, [sp, #4]
 801bcd2:	6a04      	ldr	r4, [r0, #32]
 801bcd4:	a801      	add	r0, sp, #4
 801bcd6:	f7f5 fe5f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bcda:	2c00      	cmp	r4, #0
 801bcdc:	d1e4      	bne.n	801bca8 <_Findx1+0x28>
 801bcde:	b005      	add	sp, #20
 801bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bce2:	c803      	ldmia	r0, {r0, r1}
 801bce4:	e885 0003 	stmia.w	r5, {r0, r1}
 801bce8:	e7ec      	b.n	801bcc4 <_Findx1+0x44>
 801bcea:	9801      	ldr	r0, [sp, #4]
 801bcec:	69c4      	ldr	r4, [r0, #28]
 801bcee:	2c00      	cmp	r4, #0
 801bcf0:	d0d5      	beq.n	801bc9e <_Findx1+0x1e>
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	462a      	mov	r2, r5
 801bcf6:	4631      	mov	r1, r6
 801bcf8:	f7ff ffc2 	bl	801bc80 <_Findx1>
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f7f5 fe2d 	bl	801195c <GUI_ALLOC_h2p>
 801bd02:	6a04      	ldr	r4, [r0, #32]
 801bd04:	2c00      	cmp	r4, #0
 801bd06:	d1f4      	bne.n	801bcf2 <_Findx1+0x72>
 801bd08:	9801      	ldr	r0, [sp, #4]
 801bd0a:	e7e2      	b.n	801bcd2 <_Findx1+0x52>
 801bd0c:	4770      	bx	lr
 801bd0e:	bf00      	nop

0801bd10 <_Paint1Trans>:
 801bd10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd14:	4d2a      	ldr	r5, [pc, #168]	; (801bdc0 <_Paint1Trans+0xb0>)
 801bd16:	b083      	sub	sp, #12
 801bd18:	4606      	mov	r6, r0
 801bd1a:	682b      	ldr	r3, [r5, #0]
 801bd1c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801bd1e:	f7f5 fe27 	bl	8011970 <GUI_ALLOC_LockH>
 801bd22:	9000      	str	r0, [sp, #0]
 801bd24:	4630      	mov	r0, r6
 801bd26:	f7f5 fe23 	bl	8011970 <GUI_ALLOC_LockH>
 801bd2a:	9b00      	ldr	r3, [sp, #0]
 801bd2c:	4601      	mov	r1, r0
 801bd2e:	9001      	str	r0, [sp, #4]
 801bd30:	f103 0008 	add.w	r0, r3, #8
 801bd34:	f7f6 fbdc 	bl	80124f0 <GUI_RectsIntersect>
 801bd38:	b950      	cbnz	r0, 801bd50 <_Paint1Trans+0x40>
 801bd3a:	4604      	mov	r4, r0
 801bd3c:	4668      	mov	r0, sp
 801bd3e:	f7f5 fe2b 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bd42:	a801      	add	r0, sp, #4
 801bd44:	f7f5 fe28 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bd48:	4620      	mov	r0, r4
 801bd4a:	b003      	add	sp, #12
 801bd4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd50:	af02      	add	r7, sp, #8
 801bd52:	9901      	ldr	r1, [sp, #4]
 801bd54:	682b      	ldr	r3, [r5, #0]
 801bd56:	2401      	movs	r4, #1
 801bd58:	f857 2d08 	ldr.w	r2, [r7, #-8]!
 801bd5c:	f101 0008 	add.w	r0, r1, #8
 801bd60:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801bd64:	3208      	adds	r2, #8
 801bd66:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801bd6a:	f7fb f8e9 	bl	8016f40 <GUI__IntersectRects>
 801bd6e:	4638      	mov	r0, r7
 801bd70:	f7f5 fe12 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bd74:	a802      	add	r0, sp, #8
 801bd76:	682b      	ldr	r3, [r5, #0]
 801bd78:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801bd7c:	4f11      	ldr	r7, [pc, #68]	; (801bdc4 <_Paint1Trans+0xb4>)
 801bd7e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801bd82:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801bd86:	64d9      	str	r1, [r3, #76]	; 0x4c
 801bd88:	651a      	str	r2, [r3, #80]	; 0x50
 801bd8a:	603e      	str	r6, [r7, #0]
 801bd8c:	f7f5 fe04 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bd90:	4630      	mov	r0, r6
 801bd92:	f7f5 fde3 	bl	801195c <GUI_ALLOC_h2p>
 801bd96:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801bd98:	4b0b      	ldr	r3, [pc, #44]	; (801bdc8 <_Paint1Trans+0xb8>)
 801bd9a:	4630      	mov	r0, r6
 801bd9c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801bda0:	4a0a      	ldr	r2, [pc, #40]	; (801bdcc <_Paint1Trans+0xbc>)
 801bda2:	bf08      	it	eq
 801bda4:	4613      	moveq	r3, r2
 801bda6:	4798      	blx	r3
 801bda8:	682b      	ldr	r3, [r5, #0]
 801bdaa:	2200      	movs	r2, #0
 801bdac:	4620      	mov	r0, r4
 801bdae:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 801bdb2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 801bdb6:	603a      	str	r2, [r7, #0]
 801bdb8:	b003      	add	sp, #12
 801bdba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdbe:	bf00      	nop
 801bdc0:	20000018 	.word	0x20000018
 801bdc4:	2002aff0 	.word	0x2002aff0
 801bdc8:	080205e9 	.word	0x080205e9
 801bdcc:	0801d6e1 	.word	0x0801d6e1

0801bdd0 <_PaintTransChildren>:
 801bdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdd4:	b082      	sub	sp, #8
 801bdd6:	4606      	mov	r6, r0
 801bdd8:	f7f5 fdca 	bl	8011970 <GUI_ALLOC_LockH>
 801bddc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801bdde:	9001      	str	r0, [sp, #4]
 801bde0:	079b      	lsls	r3, r3, #30
 801bde2:	d524      	bpl.n	801be2e <_PaintTransChildren+0x5e>
 801bde4:	69c4      	ldr	r4, [r0, #28]
 801bde6:	b314      	cbz	r4, 801be2e <_PaintTransChildren+0x5e>
 801bde8:	ad01      	add	r5, sp, #4
 801bdea:	e004      	b.n	801bdf6 <_PaintTransChildren+0x26>
 801bdec:	6a0c      	ldr	r4, [r1, #32]
 801bdee:	4668      	mov	r0, sp
 801bdf0:	f7f5 fdd2 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bdf4:	b1ac      	cbz	r4, 801be22 <_PaintTransChildren+0x52>
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f7f5 fdba 	bl	8011970 <GUI_ALLOC_LockH>
 801bdfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801bdfe:	4601      	mov	r1, r0
 801be00:	9000      	str	r0, [sp, #0]
 801be02:	f003 0303 	and.w	r3, r3, #3
 801be06:	2b03      	cmp	r3, #3
 801be08:	d1f0      	bne.n	801bdec <_PaintTransChildren+0x1c>
 801be0a:	9901      	ldr	r1, [sp, #4]
 801be0c:	3108      	adds	r1, #8
 801be0e:	f7f6 fb6f 	bl	80124f0 <GUI_RectsIntersect>
 801be12:	b998      	cbnz	r0, 801be3c <_PaintTransChildren+0x6c>
 801be14:	9900      	ldr	r1, [sp, #0]
 801be16:	4668      	mov	r0, sp
 801be18:	6a0c      	ldr	r4, [r1, #32]
 801be1a:	f7f5 fdbd 	bl	8011998 <GUI_ALLOC_UnlockH>
 801be1e:	2c00      	cmp	r4, #0
 801be20:	d1e9      	bne.n	801bdf6 <_PaintTransChildren+0x26>
 801be22:	4628      	mov	r0, r5
 801be24:	f7f5 fdb8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801be28:	b002      	add	sp, #8
 801be2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be2e:	ad01      	add	r5, sp, #4
 801be30:	4628      	mov	r0, r5
 801be32:	f7f5 fdb1 	bl	8011998 <GUI_ALLOC_UnlockH>
 801be36:	b002      	add	sp, #8
 801be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be3c:	9b01      	ldr	r3, [sp, #4]
 801be3e:	4628      	mov	r0, r5
 801be40:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 801be44:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 801be48:	f9b3 800c 	ldrsh.w	r8, [r3, #12]
 801be4c:	f9b3 700e 	ldrsh.w	r7, [r3, #14]
 801be50:	f7f5 fda2 	bl	8011998 <GUI_ALLOC_UnlockH>
 801be54:	4668      	mov	r0, sp
 801be56:	f7f5 fd9f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801be5a:	4620      	mov	r0, r4
 801be5c:	f7ff ff58 	bl	801bd10 <_Paint1Trans>
 801be60:	b988      	cbnz	r0, 801be86 <_PaintTransChildren+0xb6>
 801be62:	4630      	mov	r0, r6
 801be64:	f7f5 fd84 	bl	8011970 <GUI_ALLOC_LockH>
 801be68:	9001      	str	r0, [sp, #4]
 801be6a:	4620      	mov	r0, r4
 801be6c:	f7f5 fd80 	bl	8011970 <GUI_ALLOC_LockH>
 801be70:	9b01      	ldr	r3, [sp, #4]
 801be72:	9000      	str	r0, [sp, #0]
 801be74:	4601      	mov	r1, r0
 801be76:	f8a3 a008 	strh.w	sl, [r3, #8]
 801be7a:	f8a3 900a 	strh.w	r9, [r3, #10]
 801be7e:	f8a3 800c 	strh.w	r8, [r3, #12]
 801be82:	81df      	strh	r7, [r3, #14]
 801be84:	e7b2      	b.n	801bdec <_PaintTransChildren+0x1c>
 801be86:	4620      	mov	r0, r4
 801be88:	f7f5 fd68 	bl	801195c <GUI_ALLOC_h2p>
 801be8c:	9000      	str	r0, [sp, #0]
 801be8e:	4620      	mov	r0, r4
 801be90:	f7ff ff9e 	bl	801bdd0 <_PaintTransChildren>
 801be94:	4620      	mov	r0, r4
 801be96:	f7f5 fd61 	bl	801195c <GUI_ALLOC_h2p>
 801be9a:	9000      	str	r0, [sp, #0]
 801be9c:	4630      	mov	r0, r6
 801be9e:	f7f5 fd5d 	bl	801195c <GUI_ALLOC_h2p>
 801bea2:	9001      	str	r0, [sp, #4]
 801bea4:	e7dd      	b.n	801be62 <_PaintTransChildren+0x92>
 801bea6:	bf00      	nop

0801bea8 <_Findx0.constprop.10>:
 801bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801beaa:	4604      	mov	r4, r0
 801beac:	b085      	sub	sp, #20
 801beae:	2800      	cmp	r0, #0
 801beb0:	d03e      	beq.n	801bf30 <_Findx0.constprop.10+0x88>
 801beb2:	460f      	mov	r7, r1
 801beb4:	2600      	movs	r6, #0
 801beb6:	ad02      	add	r5, sp, #8
 801beb8:	e00c      	b.n	801bed4 <_Findx0.constprop.10+0x2c>
 801beba:	07e3      	lsls	r3, r4, #31
 801bebc:	d424      	bmi.n	801bf08 <_Findx0.constprop.10+0x60>
 801bebe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801bec2:	2601      	movs	r6, #1
 801bec4:	9801      	ldr	r0, [sp, #4]
 801bec6:	4433      	add	r3, r6
 801bec8:	803b      	strh	r3, [r7, #0]
 801beca:	6a04      	ldr	r4, [r0, #32]
 801becc:	a801      	add	r0, sp, #4
 801bece:	f7f5 fd63 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bed2:	b1b4      	cbz	r4, 801bf02 <_Findx0.constprop.10+0x5a>
 801bed4:	4620      	mov	r0, r4
 801bed6:	f7f5 fd4b 	bl	8011970 <GUI_ALLOC_LockH>
 801beda:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bedc:	9001      	str	r0, [sp, #4]
 801bede:	07a2      	lsls	r2, r4, #30
 801bee0:	d5f3      	bpl.n	801beca <_Findx0.constprop.10+0x22>
 801bee2:	c803      	ldmia	r0, {r0, r1}
 801bee4:	e885 0003 	stmia.w	r5, {r0, r1}
 801bee8:	4629      	mov	r1, r5
 801beea:	4638      	mov	r0, r7
 801beec:	f7f6 fb00 	bl	80124f0 <GUI_RectsIntersect>
 801bef0:	2800      	cmp	r0, #0
 801bef2:	d1e2      	bne.n	801beba <_Findx0.constprop.10+0x12>
 801bef4:	9801      	ldr	r0, [sp, #4]
 801bef6:	6a04      	ldr	r4, [r0, #32]
 801bef8:	a801      	add	r0, sp, #4
 801befa:	f7f5 fd4d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801befe:	2c00      	cmp	r4, #0
 801bf00:	d1e8      	bne.n	801bed4 <_Findx0.constprop.10+0x2c>
 801bf02:	4630      	mov	r0, r6
 801bf04:	b005      	add	sp, #20
 801bf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf08:	9801      	ldr	r0, [sp, #4]
 801bf0a:	69c4      	ldr	r4, [r0, #28]
 801bf0c:	2c00      	cmp	r4, #0
 801bf0e:	d0dc      	beq.n	801beca <_Findx0.constprop.10+0x22>
 801bf10:	462a      	mov	r2, r5
 801bf12:	4639      	mov	r1, r7
 801bf14:	4620      	mov	r0, r4
 801bf16:	f7ff fe61 	bl	801bbdc <_Findx0>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	bf18      	it	ne
 801bf20:	2601      	movne	r6, #1
 801bf22:	f7f5 fd1b 	bl	801195c <GUI_ALLOC_h2p>
 801bf26:	6a04      	ldr	r4, [r0, #32]
 801bf28:	2c00      	cmp	r4, #0
 801bf2a:	d1f1      	bne.n	801bf10 <_Findx0.constprop.10+0x68>
 801bf2c:	9801      	ldr	r0, [sp, #4]
 801bf2e:	e7e2      	b.n	801bef6 <_Findx0.constprop.10+0x4e>
 801bf30:	4606      	mov	r6, r0
 801bf32:	e7e6      	b.n	801bf02 <_Findx0.constprop.10+0x5a>

0801bf34 <_Findy1.constprop.11>:
 801bf34:	2800      	cmp	r0, #0
 801bf36:	d050      	beq.n	801bfda <_Findy1.constprop.11+0xa6>
 801bf38:	b570      	push	{r4, r5, r6, lr}
 801bf3a:	b084      	sub	sp, #16
 801bf3c:	460e      	mov	r6, r1
 801bf3e:	4604      	mov	r4, r0
 801bf40:	ad02      	add	r5, sp, #8
 801bf42:	4620      	mov	r0, r4
 801bf44:	f7f5 fd14 	bl	8011970 <GUI_ALLOC_LockH>
 801bf48:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801bf4a:	9001      	str	r0, [sp, #4]
 801bf4c:	07a2      	lsls	r2, r4, #30
 801bf4e:	d518      	bpl.n	801bf82 <_Findy1.constprop.11+0x4e>
 801bf50:	c803      	ldmia	r0, {r0, r1}
 801bf52:	e885 0003 	stmia.w	r5, {r0, r1}
 801bf56:	4629      	mov	r1, r5
 801bf58:	4630      	mov	r0, r6
 801bf5a:	f7f6 fac9 	bl	80124f0 <GUI_RectsIntersect>
 801bf5e:	b330      	cbz	r0, 801bfae <_Findy1.constprop.11+0x7a>
 801bf60:	07e3      	lsls	r3, r4, #31
 801bf62:	9801      	ldr	r0, [sp, #4]
 801bf64:	d415      	bmi.n	801bf92 <_Findy1.constprop.11+0x5e>
 801bf66:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801bf6a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bf6e:	429a      	cmp	r2, r3
 801bf70:	dd25      	ble.n	801bfbe <_Findy1.constprop.11+0x8a>
 801bf72:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801bf76:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801bf7a:	429a      	cmp	r2, r3
 801bf7c:	db01      	blt.n	801bf82 <_Findy1.constprop.11+0x4e>
 801bf7e:	3b01      	subs	r3, #1
 801bf80:	80f3      	strh	r3, [r6, #6]
 801bf82:	6a04      	ldr	r4, [r0, #32]
 801bf84:	a801      	add	r0, sp, #4
 801bf86:	f7f5 fd07 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bf8a:	2c00      	cmp	r4, #0
 801bf8c:	d1d9      	bne.n	801bf42 <_Findy1.constprop.11+0xe>
 801bf8e:	b004      	add	sp, #16
 801bf90:	bd70      	pop	{r4, r5, r6, pc}
 801bf92:	69c4      	ldr	r4, [r0, #28]
 801bf94:	2c00      	cmp	r4, #0
 801bf96:	d0f4      	beq.n	801bf82 <_Findy1.constprop.11+0x4e>
 801bf98:	4620      	mov	r0, r4
 801bf9a:	462a      	mov	r2, r5
 801bf9c:	4631      	mov	r1, r6
 801bf9e:	f7ff fdb5 	bl	801bb0c <_Findy1>
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f7f5 fcda 	bl	801195c <GUI_ALLOC_h2p>
 801bfa8:	6a04      	ldr	r4, [r0, #32]
 801bfaa:	2c00      	cmp	r4, #0
 801bfac:	d1f4      	bne.n	801bf98 <_Findy1.constprop.11+0x64>
 801bfae:	9801      	ldr	r0, [sp, #4]
 801bfb0:	6a04      	ldr	r4, [r0, #32]
 801bfb2:	a801      	add	r0, sp, #4
 801bfb4:	f7f5 fcf0 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bfb8:	2c00      	cmp	r4, #0
 801bfba:	d1c2      	bne.n	801bf42 <_Findy1.constprop.11+0xe>
 801bfbc:	e7e7      	b.n	801bf8e <_Findy1.constprop.11+0x5a>
 801bfbe:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bfc2:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801bfc6:	429a      	cmp	r2, r3
 801bfc8:	dddb      	ble.n	801bf82 <_Findy1.constprop.11+0x4e>
 801bfca:	6a04      	ldr	r4, [r0, #32]
 801bfcc:	a801      	add	r0, sp, #4
 801bfce:	80f3      	strh	r3, [r6, #6]
 801bfd0:	f7f5 fce2 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bfd4:	2c00      	cmp	r4, #0
 801bfd6:	d1b4      	bne.n	801bf42 <_Findy1.constprop.11+0xe>
 801bfd8:	e7d9      	b.n	801bf8e <_Findy1.constprop.11+0x5a>
 801bfda:	4770      	bx	lr

0801bfdc <WM__PaintWinAndOverlays>:
 801bfdc:	b530      	push	{r4, r5, lr}
 801bfde:	b083      	sub	sp, #12
 801bfe0:	4604      	mov	r4, r0
 801bfe2:	f7f5 fcc5 	bl	8011970 <GUI_ALLOC_LockH>
 801bfe6:	f640 0301 	movw	r3, #2049	; 0x801
 801bfea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801bfec:	9001      	str	r0, [sp, #4]
 801bfee:	4013      	ands	r3, r2
 801bff0:	2b01      	cmp	r3, #1
 801bff2:	d00e      	beq.n	801c012 <WM__PaintWinAndOverlays+0x36>
 801bff4:	a801      	add	r0, sp, #4
 801bff6:	f7f5 fccf 	bl	8011998 <GUI_ALLOC_UnlockH>
 801bffa:	4620      	mov	r0, r4
 801bffc:	f7f5 fcae 	bl	801195c <GUI_ALLOC_h2p>
 801c000:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801c002:	4b1b      	ldr	r3, [pc, #108]	; (801c070 <WM__PaintWinAndOverlays+0x94>)
 801c004:	4620      	mov	r0, r4
 801c006:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801c00a:	4a1a      	ldr	r2, [pc, #104]	; (801c074 <WM__PaintWinAndOverlays+0x98>)
 801c00c:	bf08      	it	eq
 801c00e:	4613      	moveq	r3, r2
 801c010:	4798      	blx	r3
 801c012:	4b19      	ldr	r3, [pc, #100]	; (801c078 <WM__PaintWinAndOverlays+0x9c>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	b90b      	cbnz	r3, 801c01c <WM__PaintWinAndOverlays+0x40>
 801c018:	b003      	add	sp, #12
 801c01a:	bd30      	pop	{r4, r5, pc}
 801c01c:	4620      	mov	r0, r4
 801c01e:	f7ff fed7 	bl	801bdd0 <_PaintTransChildren>
 801c022:	4620      	mov	r0, r4
 801c024:	f7f5 fc9a 	bl	801195c <GUI_ALLOC_h2p>
 801c028:	6985      	ldr	r5, [r0, #24]
 801c02a:	6a04      	ldr	r4, [r0, #32]
 801c02c:	2d00      	cmp	r5, #0
 801c02e:	d0f3      	beq.n	801c018 <WM__PaintWinAndOverlays+0x3c>
 801c030:	b184      	cbz	r4, 801c054 <WM__PaintWinAndOverlays+0x78>
 801c032:	4620      	mov	r0, r4
 801c034:	f7f5 fc92 	bl	801195c <GUI_ALLOC_h2p>
 801c038:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c03a:	f003 0303 	and.w	r3, r3, #3
 801c03e:	2b03      	cmp	r3, #3
 801c040:	d011      	beq.n	801c066 <WM__PaintWinAndOverlays+0x8a>
 801c042:	4620      	mov	r0, r4
 801c044:	f7ff fec4 	bl	801bdd0 <_PaintTransChildren>
 801c048:	4620      	mov	r0, r4
 801c04a:	f7f5 fc87 	bl	801195c <GUI_ALLOC_h2p>
 801c04e:	6a04      	ldr	r4, [r0, #32]
 801c050:	2c00      	cmp	r4, #0
 801c052:	d1ee      	bne.n	801c032 <WM__PaintWinAndOverlays+0x56>
 801c054:	4628      	mov	r0, r5
 801c056:	f7f5 fc81 	bl	801195c <GUI_ALLOC_h2p>
 801c05a:	6985      	ldr	r5, [r0, #24]
 801c05c:	6a04      	ldr	r4, [r0, #32]
 801c05e:	2d00      	cmp	r5, #0
 801c060:	d1e6      	bne.n	801c030 <WM__PaintWinAndOverlays+0x54>
 801c062:	b003      	add	sp, #12
 801c064:	bd30      	pop	{r4, r5, pc}
 801c066:	4620      	mov	r0, r4
 801c068:	f7ff fe52 	bl	801bd10 <_Paint1Trans>
 801c06c:	e7e9      	b.n	801c042 <WM__PaintWinAndOverlays+0x66>
 801c06e:	bf00      	nop
 801c070:	080205e9 	.word	0x080205e9
 801c074:	0801d6e1 	.word	0x0801d6e1
 801c078:	2002b044 	.word	0x2002b044

0801c07c <_cbPaintMemDev>:
 801c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c080:	4d19      	ldr	r5, [pc, #100]	; (801c0e8 <_cbPaintMemDev+0x6c>)
 801c082:	b082      	sub	sp, #8
 801c084:	4682      	mov	sl, r0
 801c086:	682b      	ldr	r3, [r5, #0]
 801c088:	ac02      	add	r4, sp, #8
 801c08a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c08c:	f7f5 fc70 	bl	8011970 <GUI_ALLOC_LockH>
 801c090:	682b      	ldr	r3, [r5, #0]
 801c092:	f100 0208 	add.w	r2, r0, #8
 801c096:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801c09a:	3308      	adds	r3, #8
 801c09c:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 801c0a0:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801c0a4:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 801c0a8:	f844 0d04 	str.w	r0, [r4, #-4]!
 801c0ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c0b0:	e882 0003 	stmia.w	r2, {r0, r1}
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f7f5 fc6f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c0ba:	f8da 0000 	ldr.w	r0, [sl]
 801c0be:	f7ff ff8d 	bl	801bfdc <WM__PaintWinAndOverlays>
 801c0c2:	682b      	ldr	r3, [r5, #0]
 801c0c4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c0c6:	f7f5 fc53 	bl	8011970 <GUI_ALLOC_LockH>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f8a3 9008 	strh.w	r9, [r3, #8]
 801c0d2:	f8a3 800a 	strh.w	r8, [r3, #10]
 801c0d6:	819f      	strh	r7, [r3, #12]
 801c0d8:	81de      	strh	r6, [r3, #14]
 801c0da:	9301      	str	r3, [sp, #4]
 801c0dc:	f7f5 fc5c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c0e0:	b002      	add	sp, #8
 801c0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0e6:	bf00      	nop
 801c0e8:	20000018 	.word	0x20000018

0801c0ec <_Invalidate1Abs>:
 801c0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0ee:	b085      	sub	sp, #20
 801c0f0:	4616      	mov	r6, r2
 801c0f2:	460c      	mov	r4, r1
 801c0f4:	4605      	mov	r5, r0
 801c0f6:	f7f5 fc31 	bl	801195c <GUI_ALLOC_h2p>
 801c0fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c0fc:	9001      	str	r0, [sp, #4]
 801c0fe:	079a      	lsls	r2, r3, #30
 801c100:	d505      	bpl.n	801c10e <_Invalidate1Abs+0x22>
 801c102:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c106:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c10a:	4291      	cmp	r1, r2
 801c10c:	da01      	bge.n	801c112 <_Invalidate1Abs+0x26>
 801c10e:	b005      	add	sp, #20
 801c110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c112:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801c116:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c11a:	4291      	cmp	r1, r2
 801c11c:	dcf7      	bgt.n	801c10e <_Invalidate1Abs+0x22>
 801c11e:	f640 0201 	movw	r2, #2049	; 0x801
 801c122:	401a      	ands	r2, r3
 801c124:	2a01      	cmp	r2, #1
 801c126:	d0f2      	beq.n	801c10e <_Invalidate1Abs+0x22>
 801c128:	4628      	mov	r0, r5
 801c12a:	af02      	add	r7, sp, #8
 801c12c:	f7f5 fc20 	bl	8011970 <GUI_ALLOC_LockH>
 801c130:	4603      	mov	r3, r0
 801c132:	4621      	mov	r1, r4
 801c134:	4638      	mov	r0, r7
 801c136:	461a      	mov	r2, r3
 801c138:	9301      	str	r3, [sp, #4]
 801c13a:	f7fa ff01 	bl	8016f40 <GUI__IntersectRects>
 801c13e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801c142:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801c146:	429a      	cmp	r2, r3
 801c148:	dc2e      	bgt.n	801c1a8 <_Invalidate1Abs+0xbc>
 801c14a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c14e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c152:	429a      	cmp	r2, r3
 801c154:	dc28      	bgt.n	801c1a8 <_Invalidate1Abs+0xbc>
 801c156:	9a01      	ldr	r2, [sp, #4]
 801c158:	f244 0320 	movw	r3, #16416	; 0x4020
 801c15c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801c15e:	400b      	ands	r3, r1
 801c160:	bb3b      	cbnz	r3, 801c1b2 <_Invalidate1Abs+0xc6>
 801c162:	4c18      	ldr	r4, [pc, #96]	; (801c1c4 <_Invalidate1Abs+0xd8>)
 801c164:	430e      	orrs	r6, r1
 801c166:	f102 0e08 	add.w	lr, r2, #8
 801c16a:	8823      	ldrh	r3, [r4, #0]
 801c16c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c170:	3301      	adds	r3, #1
 801c172:	e88e 0003 	stmia.w	lr, {r0, r1}
 801c176:	8023      	strh	r3, [r4, #0]
 801c178:	6296      	str	r6, [r2, #40]	; 0x28
 801c17a:	e000      	b.n	801c17e <_Invalidate1Abs+0x92>
 801c17c:	461d      	mov	r5, r3
 801c17e:	4628      	mov	r0, r5
 801c180:	f7f5 fbec 	bl	801195c <GUI_ALLOC_h2p>
 801c184:	6983      	ldr	r3, [r0, #24]
 801c186:	2b00      	cmp	r3, #0
 801c188:	d1f8      	bne.n	801c17c <_Invalidate1Abs+0x90>
 801c18a:	4b0f      	ldr	r3, [pc, #60]	; (801c1c8 <_Invalidate1Abs+0xdc>)
 801c18c:	681a      	ldr	r2, [r3, #0]
 801c18e:	4295      	cmp	r5, r2
 801c190:	d016      	beq.n	801c1c0 <_Invalidate1Abs+0xd4>
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	42ab      	cmp	r3, r5
 801c196:	bf0c      	ite	eq
 801c198:	2302      	moveq	r3, #2
 801c19a:	2300      	movne	r3, #0
 801c19c:	4a0b      	ldr	r2, [pc, #44]	; (801c1cc <_Invalidate1Abs+0xe0>)
 801c19e:	6811      	ldr	r1, [r2, #0]
 801c1a0:	430b      	orrs	r3, r1
 801c1a2:	6013      	str	r3, [r2, #0]
 801c1a4:	f7fa f9aa 	bl	80164fc <GUI_SignalEvent>
 801c1a8:	a801      	add	r0, sp, #4
 801c1aa:	f7f5 fbf5 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c1ae:	b005      	add	sp, #20
 801c1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1b2:	f102 0108 	add.w	r1, r2, #8
 801c1b6:	463a      	mov	r2, r7
 801c1b8:	4608      	mov	r0, r1
 801c1ba:	f7f6 f89f 	bl	80122fc <GUI_MergeRect>
 801c1be:	e7f3      	b.n	801c1a8 <_Invalidate1Abs+0xbc>
 801c1c0:	2301      	movs	r3, #1
 801c1c2:	e7eb      	b.n	801c19c <_Invalidate1Abs+0xb0>
 801c1c4:	2002b00c 	.word	0x2002b00c
 801c1c8:	2002aff4 	.word	0x2002aff4
 801c1cc:	2002b01c 	.word	0x2002b01c

0801c1d0 <WM__ActivateClipRect>:
 801c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1d4:	4f45      	ldr	r7, [pc, #276]	; (801c2ec <WM__ActivateClipRect+0x11c>)
 801c1d6:	b086      	sub	sp, #24
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801c1de:	2a00      	cmp	r2, #0
 801c1e0:	d139      	bne.n	801c256 <WM__ActivateClipRect+0x86>
 801c1e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801c1e4:	ae02      	add	r6, sp, #8
 801c1e6:	f7f5 fbc3 	bl	8011970 <GUI_ALLOC_LockH>
 801c1ea:	9000      	str	r0, [sp, #0]
 801c1ec:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801c2f0 <WM__ActivateClipRect+0x120>
 801c1f0:	c803      	ldmia	r0, {r0, r1}
 801c1f2:	e886 0003 	stmia.w	r6, {r0, r1}
 801c1f6:	4668      	mov	r0, sp
 801c1f8:	f7f5 fbce 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c1fc:	f8d8 4000 	ldr.w	r4, [r8]
 801c200:	2c00      	cmp	r4, #0
 801c202:	d150      	bne.n	801c2a6 <WM__ActivateClipRect+0xd6>
 801c204:	683f      	ldr	r7, [r7, #0]
 801c206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c208:	2a00      	cmp	r2, #0
 801c20a:	d067      	beq.n	801c2dc <WM__ActivateClipRect+0x10c>
 801c20c:	ad04      	add	r5, sp, #16
 801c20e:	6810      	ldr	r0, [r2, #0]
 801c210:	6851      	ldr	r1, [r2, #4]
 801c212:	462b      	mov	r3, r5
 801c214:	f8d8 4000 	ldr.w	r4, [r8]
 801c218:	c303      	stmia	r3!, {r0, r1}
 801c21a:	b1d4      	cbz	r4, 801c252 <WM__ActivateClipRect+0x82>
 801c21c:	4620      	mov	r0, r4
 801c21e:	ac06      	add	r4, sp, #24
 801c220:	f7f5 fba6 	bl	8011970 <GUI_ALLOC_LockH>
 801c224:	4603      	mov	r3, r0
 801c226:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c22a:	4628      	mov	r0, r5
 801c22c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c230:	f844 3d14 	str.w	r3, [r4, #-20]!
 801c234:	f7f6 f890 	bl	8012358 <GUI_MoveRect>
 801c238:	4620      	mov	r0, r4
 801c23a:	f7f5 fbad 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c23e:	4628      	mov	r0, r5
 801c240:	4631      	mov	r1, r6
 801c242:	f7fa fe5f 	bl	8016f04 <GUI__IntersectRect>
 801c246:	4628      	mov	r0, r5
 801c248:	f004 f9b4 	bl	80205b4 <LCD_SetClipRectEx>
 801c24c:	b006      	add	sp, #24
 801c24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c252:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801c254:	e7e2      	b.n	801c21c <WM__ActivateClipRect+0x4c>
 801c256:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801c258:	2900      	cmp	r1, #0
 801c25a:	d043      	beq.n	801c2e4 <WM__ActivateClipRect+0x114>
 801c25c:	ad04      	add	r5, sp, #16
 801c25e:	4c24      	ldr	r4, [pc, #144]	; (801c2f0 <WM__ActivateClipRect+0x120>)
 801c260:	6808      	ldr	r0, [r1, #0]
 801c262:	462a      	mov	r2, r5
 801c264:	6849      	ldr	r1, [r1, #4]
 801c266:	6824      	ldr	r4, [r4, #0]
 801c268:	c203      	stmia	r2!, {r0, r1}
 801c26a:	b1d4      	cbz	r4, 801c2a2 <WM__ActivateClipRect+0xd2>
 801c26c:	4620      	mov	r0, r4
 801c26e:	ac06      	add	r4, sp, #24
 801c270:	f7f5 fb7e 	bl	8011970 <GUI_ALLOC_LockH>
 801c274:	4603      	mov	r3, r0
 801c276:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801c27a:	4628      	mov	r0, r5
 801c27c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c280:	f844 3d10 	str.w	r3, [r4, #-16]!
 801c284:	f7f6 f868 	bl	8012358 <GUI_MoveRect>
 801c288:	4620      	mov	r0, r4
 801c28a:	f7f5 fb85 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c28e:	4919      	ldr	r1, [pc, #100]	; (801c2f4 <WM__ActivateClipRect+0x124>)
 801c290:	4628      	mov	r0, r5
 801c292:	f7fa fe37 	bl	8016f04 <GUI__IntersectRect>
 801c296:	4628      	mov	r0, r5
 801c298:	f004 f98c 	bl	80205b4 <LCD_SetClipRectEx>
 801c29c:	b006      	add	sp, #24
 801c29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2a2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801c2a4:	e7e2      	b.n	801c26c <WM__ActivateClipRect+0x9c>
 801c2a6:	ad04      	add	r5, sp, #16
 801c2a8:	e007      	b.n	801c2ba <WM__ActivateClipRect+0xea>
 801c2aa:	f7fa fe2b 	bl	8016f04 <GUI__IntersectRect>
 801c2ae:	9b04      	ldr	r3, [sp, #16]
 801c2b0:	4628      	mov	r0, r5
 801c2b2:	699c      	ldr	r4, [r3, #24]
 801c2b4:	b17c      	cbz	r4, 801c2d6 <WM__ActivateClipRect+0x106>
 801c2b6:	f7f5 fb6f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f7f5 fb58 	bl	8011970 <GUI_ALLOC_LockH>
 801c2c0:	4603      	mov	r3, r0
 801c2c2:	4630      	mov	r0, r6
 801c2c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c2c6:	4619      	mov	r1, r3
 801c2c8:	9304      	str	r3, [sp, #16]
 801c2ca:	0793      	lsls	r3, r2, #30
 801c2cc:	d4ed      	bmi.n	801c2aa <WM__ActivateClipRect+0xda>
 801c2ce:	4628      	mov	r0, r5
 801c2d0:	f7f5 fb62 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c2d4:	e796      	b.n	801c204 <WM__ActivateClipRect+0x34>
 801c2d6:	f7f5 fb5f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c2da:	e793      	b.n	801c204 <WM__ActivateClipRect+0x34>
 801c2dc:	4630      	mov	r0, r6
 801c2de:	f004 f969 	bl	80205b4 <LCD_SetClipRectEx>
 801c2e2:	e7b3      	b.n	801c24c <WM__ActivateClipRect+0x7c>
 801c2e4:	4803      	ldr	r0, [pc, #12]	; (801c2f4 <WM__ActivateClipRect+0x124>)
 801c2e6:	f004 f965 	bl	80205b4 <LCD_SetClipRectEx>
 801c2ea:	e7af      	b.n	801c24c <WM__ActivateClipRect+0x7c>
 801c2ec:	20000018 	.word	0x20000018
 801c2f0:	2002aff0 	.word	0x2002aff0
 801c2f4:	200003dc 	.word	0x200003dc

0801c2f8 <WM__InsertWindowIntoList>:
 801c2f8:	b901      	cbnz	r1, 801c2fc <WM__InsertWindowIntoList+0x4>
 801c2fa:	4770      	bx	lr
 801c2fc:	b570      	push	{r4, r5, r6, lr}
 801c2fe:	b084      	sub	sp, #16
 801c300:	460c      	mov	r4, r1
 801c302:	4605      	mov	r5, r0
 801c304:	f7f5 fb34 	bl	8011970 <GUI_ALLOC_LockH>
 801c308:	2200      	movs	r2, #0
 801c30a:	4603      	mov	r3, r0
 801c30c:	4620      	mov	r0, r4
 801c30e:	619c      	str	r4, [r3, #24]
 801c310:	621a      	str	r2, [r3, #32]
 801c312:	9301      	str	r3, [sp, #4]
 801c314:	f7f5 fb2c 	bl	8011970 <GUI_ALLOC_LockH>
 801c318:	69c4      	ldr	r4, [r0, #28]
 801c31a:	9002      	str	r0, [sp, #8]
 801c31c:	b32c      	cbz	r4, 801c36a <WM__InsertWindowIntoList+0x72>
 801c31e:	9b01      	ldr	r3, [sp, #4]
 801c320:	4620      	mov	r0, r4
 801c322:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801c324:	f7f5 fb24 	bl	8011970 <GUI_ALLOC_LockH>
 801c328:	9003      	str	r0, [sp, #12]
 801c32a:	f006 0608 	and.w	r6, r6, #8
 801c32e:	bb2e      	cbnz	r6, 801c37c <WM__InsertWindowIntoList+0x84>
 801c330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c332:	071a      	lsls	r2, r3, #28
 801c334:	d43c      	bmi.n	801c3b0 <WM__InsertWindowIntoList+0xb8>
 801c336:	a802      	add	r0, sp, #8
 801c338:	f7f5 fb2e 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c33c:	a803      	add	r0, sp, #12
 801c33e:	f7f5 fb2b 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c342:	4620      	mov	r0, r4
 801c344:	f7f5 fb0a 	bl	801195c <GUI_ALLOC_h2p>
 801c348:	e005      	b.n	801c356 <WM__InsertWindowIntoList+0x5e>
 801c34a:	4620      	mov	r0, r4
 801c34c:	f7f5 fb06 	bl	801195c <GUI_ALLOC_h2p>
 801c350:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c352:	071b      	lsls	r3, r3, #28
 801c354:	d427      	bmi.n	801c3a6 <WM__InsertWindowIntoList+0xae>
 801c356:	6a04      	ldr	r4, [r0, #32]
 801c358:	9003      	str	r0, [sp, #12]
 801c35a:	2c00      	cmp	r4, #0
 801c35c:	d1f5      	bne.n	801c34a <WM__InsertWindowIntoList+0x52>
 801c35e:	6205      	str	r5, [r0, #32]
 801c360:	a801      	add	r0, sp, #4
 801c362:	f7f5 fb19 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c366:	b004      	add	sp, #16
 801c368:	bd70      	pop	{r4, r5, r6, pc}
 801c36a:	61c5      	str	r5, [r0, #28]
 801c36c:	a801      	add	r0, sp, #4
 801c36e:	f7f5 fb13 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c372:	a802      	add	r0, sp, #8
 801c374:	f7f5 fb10 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c378:	b004      	add	sp, #16
 801c37a:	bd70      	pop	{r4, r5, r6, pc}
 801c37c:	a802      	add	r0, sp, #8
 801c37e:	f7f5 fb0b 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c382:	a803      	add	r0, sp, #12
 801c384:	f7f5 fb08 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c388:	4620      	mov	r0, r4
 801c38a:	f7f5 fae7 	bl	801195c <GUI_ALLOC_h2p>
 801c38e:	6a02      	ldr	r2, [r0, #32]
 801c390:	9003      	str	r0, [sp, #12]
 801c392:	2a00      	cmp	r2, #0
 801c394:	d0e3      	beq.n	801c35e <WM__InsertWindowIntoList+0x66>
 801c396:	4610      	mov	r0, r2
 801c398:	f7f5 fae0 	bl	801195c <GUI_ALLOC_h2p>
 801c39c:	6a02      	ldr	r2, [r0, #32]
 801c39e:	9003      	str	r0, [sp, #12]
 801c3a0:	2a00      	cmp	r2, #0
 801c3a2:	d1f8      	bne.n	801c396 <WM__InsertWindowIntoList+0x9e>
 801c3a4:	e7db      	b.n	801c35e <WM__InsertWindowIntoList+0x66>
 801c3a6:	9a03      	ldr	r2, [sp, #12]
 801c3a8:	9b01      	ldr	r3, [sp, #4]
 801c3aa:	6215      	str	r5, [r2, #32]
 801c3ac:	621c      	str	r4, [r3, #32]
 801c3ae:	e7d7      	b.n	801c360 <WM__InsertWindowIntoList+0x68>
 801c3b0:	9a01      	ldr	r2, [sp, #4]
 801c3b2:	a801      	add	r0, sp, #4
 801c3b4:	9b02      	ldr	r3, [sp, #8]
 801c3b6:	6214      	str	r4, [r2, #32]
 801c3b8:	61dd      	str	r5, [r3, #28]
 801c3ba:	f7f5 faed 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c3be:	a802      	add	r0, sp, #8
 801c3c0:	f7f5 faea 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c3c4:	a803      	add	r0, sp, #12
 801c3c6:	f7f5 fae7 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c3ca:	e7d5      	b.n	801c378 <WM__InsertWindowIntoList+0x80>

0801c3cc <WM__IsWindow>:
 801c3cc:	4b09      	ldr	r3, [pc, #36]	; (801c3f4 <WM__IsWindow+0x28>)
 801c3ce:	b510      	push	{r4, lr}
 801c3d0:	4604      	mov	r4, r0
 801c3d2:	6818      	ldr	r0, [r3, #0]
 801c3d4:	b148      	cbz	r0, 801c3ea <WM__IsWindow+0x1e>
 801c3d6:	42a0      	cmp	r0, r4
 801c3d8:	d102      	bne.n	801c3e0 <WM__IsWindow+0x14>
 801c3da:	e008      	b.n	801c3ee <WM__IsWindow+0x22>
 801c3dc:	4284      	cmp	r4, r0
 801c3de:	d006      	beq.n	801c3ee <WM__IsWindow+0x22>
 801c3e0:	f7f5 fabc 	bl	801195c <GUI_ALLOC_h2p>
 801c3e4:	6940      	ldr	r0, [r0, #20]
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	d1f8      	bne.n	801c3dc <WM__IsWindow+0x10>
 801c3ea:	2000      	movs	r0, #0
 801c3ec:	bd10      	pop	{r4, pc}
 801c3ee:	2001      	movs	r0, #1
 801c3f0:	bd10      	pop	{r4, pc}
 801c3f2:	bf00      	nop
 801c3f4:	2002b010 	.word	0x2002b010

0801c3f8 <WM__InvalidateDrawAndDescs>:
 801c3f8:	b900      	cbnz	r0, 801c3fc <WM__InvalidateDrawAndDescs+0x4>
 801c3fa:	4770      	bx	lr
 801c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c400:	b08f      	sub	sp, #60	; 0x3c
 801c402:	4604      	mov	r4, r0
 801c404:	f7f5 fab4 	bl	8011970 <GUI_ALLOC_LockH>
 801c408:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c40a:	9005      	str	r0, [sp, #20]
 801c40c:	079a      	lsls	r2, r3, #30
 801c40e:	f140 813c 	bpl.w	801c68a <WM__InvalidateDrawAndDescs+0x292>
 801c412:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c414:	b140      	cbz	r0, 801c428 <WM__InvalidateDrawAndDescs+0x30>
 801c416:	4ba0      	ldr	r3, [pc, #640]	; (801c698 <WM__InvalidateDrawAndDescs+0x2a0>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	429c      	cmp	r4, r3
 801c41c:	d004      	beq.n	801c428 <WM__InvalidateDrawAndDescs+0x30>
 801c41e:	f7fd fb69 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c422:	9b05      	ldr	r3, [sp, #20]
 801c424:	2200      	movs	r2, #0
 801c426:	625a      	str	r2, [r3, #36]	; 0x24
 801c428:	4620      	mov	r0, r4
 801c42a:	f001 fce1 	bl	801ddf0 <WM_GetFirstChild>
 801c42e:	9003      	str	r0, [sp, #12]
 801c430:	2800      	cmp	r0, #0
 801c432:	f000 812a 	beq.w	801c68a <WM__InvalidateDrawAndDescs+0x292>
 801c436:	f8df 8260 	ldr.w	r8, [pc, #608]	; 801c698 <WM__InvalidateDrawAndDescs+0x2a0>
 801c43a:	9803      	ldr	r0, [sp, #12]
 801c43c:	f7f5 fa98 	bl	8011970 <GUI_ALLOC_LockH>
 801c440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c442:	9006      	str	r0, [sp, #24]
 801c444:	079b      	lsls	r3, r3, #30
 801c446:	f140 8115 	bpl.w	801c674 <WM__InvalidateDrawAndDescs+0x27c>
 801c44a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c44c:	b148      	cbz	r0, 801c462 <WM__InvalidateDrawAndDescs+0x6a>
 801c44e:	f8d8 3000 	ldr.w	r3, [r8]
 801c452:	9a03      	ldr	r2, [sp, #12]
 801c454:	4293      	cmp	r3, r2
 801c456:	d004      	beq.n	801c462 <WM__InvalidateDrawAndDescs+0x6a>
 801c458:	f7fd fb4c 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c45c:	9b06      	ldr	r3, [sp, #24]
 801c45e:	2200      	movs	r2, #0
 801c460:	625a      	str	r2, [r3, #36]	; 0x24
 801c462:	9803      	ldr	r0, [sp, #12]
 801c464:	f001 fcc4 	bl	801ddf0 <WM_GetFirstChild>
 801c468:	9002      	str	r0, [sp, #8]
 801c46a:	2800      	cmp	r0, #0
 801c46c:	f000 8102 	beq.w	801c674 <WM__InvalidateDrawAndDescs+0x27c>
 801c470:	9802      	ldr	r0, [sp, #8]
 801c472:	f7f5 fa7d 	bl	8011970 <GUI_ALLOC_LockH>
 801c476:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c478:	9007      	str	r0, [sp, #28]
 801c47a:	079f      	lsls	r7, r3, #30
 801c47c:	f140 80ef 	bpl.w	801c65e <WM__InvalidateDrawAndDescs+0x266>
 801c480:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c482:	b148      	cbz	r0, 801c498 <WM__InvalidateDrawAndDescs+0xa0>
 801c484:	f8d8 3000 	ldr.w	r3, [r8]
 801c488:	9a02      	ldr	r2, [sp, #8]
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d004      	beq.n	801c498 <WM__InvalidateDrawAndDescs+0xa0>
 801c48e:	f7fd fb31 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c492:	9b07      	ldr	r3, [sp, #28]
 801c494:	2200      	movs	r2, #0
 801c496:	625a      	str	r2, [r3, #36]	; 0x24
 801c498:	9802      	ldr	r0, [sp, #8]
 801c49a:	f001 fca9 	bl	801ddf0 <WM_GetFirstChild>
 801c49e:	4683      	mov	fp, r0
 801c4a0:	2800      	cmp	r0, #0
 801c4a2:	f000 80dc 	beq.w	801c65e <WM__InvalidateDrawAndDescs+0x266>
 801c4a6:	4658      	mov	r0, fp
 801c4a8:	f7f5 fa62 	bl	8011970 <GUI_ALLOC_LockH>
 801c4ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c4ae:	9008      	str	r0, [sp, #32]
 801c4b0:	079e      	lsls	r6, r3, #30
 801c4b2:	f140 80c8 	bpl.w	801c646 <WM__InvalidateDrawAndDescs+0x24e>
 801c4b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c4b8:	b140      	cbz	r0, 801c4cc <WM__InvalidateDrawAndDescs+0xd4>
 801c4ba:	f8d8 3000 	ldr.w	r3, [r8]
 801c4be:	455b      	cmp	r3, fp
 801c4c0:	d004      	beq.n	801c4cc <WM__InvalidateDrawAndDescs+0xd4>
 801c4c2:	f7fd fb17 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c4c6:	9b08      	ldr	r3, [sp, #32]
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	625a      	str	r2, [r3, #36]	; 0x24
 801c4cc:	4658      	mov	r0, fp
 801c4ce:	f001 fc8f 	bl	801ddf0 <WM_GetFirstChild>
 801c4d2:	4682      	mov	sl, r0
 801c4d4:	2800      	cmp	r0, #0
 801c4d6:	f000 80b6 	beq.w	801c646 <WM__InvalidateDrawAndDescs+0x24e>
 801c4da:	4650      	mov	r0, sl
 801c4dc:	f7f5 fa48 	bl	8011970 <GUI_ALLOC_LockH>
 801c4e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c4e2:	9009      	str	r0, [sp, #36]	; 0x24
 801c4e4:	079d      	lsls	r5, r3, #30
 801c4e6:	f140 80a2 	bpl.w	801c62e <WM__InvalidateDrawAndDescs+0x236>
 801c4ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c4ec:	b140      	cbz	r0, 801c500 <WM__InvalidateDrawAndDescs+0x108>
 801c4ee:	f8d8 3000 	ldr.w	r3, [r8]
 801c4f2:	4553      	cmp	r3, sl
 801c4f4:	d004      	beq.n	801c500 <WM__InvalidateDrawAndDescs+0x108>
 801c4f6:	f7fd fafd 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	625a      	str	r2, [r3, #36]	; 0x24
 801c500:	4650      	mov	r0, sl
 801c502:	f001 fc75 	bl	801ddf0 <WM_GetFirstChild>
 801c506:	9001      	str	r0, [sp, #4]
 801c508:	2800      	cmp	r0, #0
 801c50a:	f000 8090 	beq.w	801c62e <WM__InvalidateDrawAndDescs+0x236>
 801c50e:	9801      	ldr	r0, [sp, #4]
 801c510:	f7f5 fa2e 	bl	8011970 <GUI_ALLOC_LockH>
 801c514:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c516:	900a      	str	r0, [sp, #40]	; 0x28
 801c518:	079c      	lsls	r4, r3, #30
 801c51a:	d57d      	bpl.n	801c618 <WM__InvalidateDrawAndDescs+0x220>
 801c51c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c51e:	b148      	cbz	r0, 801c534 <WM__InvalidateDrawAndDescs+0x13c>
 801c520:	f8d8 3000 	ldr.w	r3, [r8]
 801c524:	9a01      	ldr	r2, [sp, #4]
 801c526:	4293      	cmp	r3, r2
 801c528:	d004      	beq.n	801c534 <WM__InvalidateDrawAndDescs+0x13c>
 801c52a:	f7fd fae3 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c530:	2200      	movs	r2, #0
 801c532:	625a      	str	r2, [r3, #36]	; 0x24
 801c534:	9801      	ldr	r0, [sp, #4]
 801c536:	f001 fc5b 	bl	801ddf0 <WM_GetFirstChild>
 801c53a:	4606      	mov	r6, r0
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d06b      	beq.n	801c618 <WM__InvalidateDrawAndDescs+0x220>
 801c540:	4630      	mov	r0, r6
 801c542:	f7f5 fa15 	bl	8011970 <GUI_ALLOC_LockH>
 801c546:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c548:	900b      	str	r0, [sp, #44]	; 0x2c
 801c54a:	0799      	lsls	r1, r3, #30
 801c54c:	d55b      	bpl.n	801c606 <WM__InvalidateDrawAndDescs+0x20e>
 801c54e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c550:	b140      	cbz	r0, 801c564 <WM__InvalidateDrawAndDescs+0x16c>
 801c552:	f8d8 3000 	ldr.w	r3, [r8]
 801c556:	42b3      	cmp	r3, r6
 801c558:	d004      	beq.n	801c564 <WM__InvalidateDrawAndDescs+0x16c>
 801c55a:	f7fd facb 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c560:	2200      	movs	r2, #0
 801c562:	625a      	str	r2, [r3, #36]	; 0x24
 801c564:	4630      	mov	r0, r6
 801c566:	f001 fc43 	bl	801ddf0 <WM_GetFirstChild>
 801c56a:	4605      	mov	r5, r0
 801c56c:	2800      	cmp	r0, #0
 801c56e:	d04a      	beq.n	801c606 <WM__InvalidateDrawAndDescs+0x20e>
 801c570:	4628      	mov	r0, r5
 801c572:	f7f5 f9fd 	bl	8011970 <GUI_ALLOC_LockH>
 801c576:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c578:	900c      	str	r0, [sp, #48]	; 0x30
 801c57a:	079a      	lsls	r2, r3, #30
 801c57c:	d53a      	bpl.n	801c5f4 <WM__InvalidateDrawAndDescs+0x1fc>
 801c57e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c580:	b140      	cbz	r0, 801c594 <WM__InvalidateDrawAndDescs+0x19c>
 801c582:	f8d8 3000 	ldr.w	r3, [r8]
 801c586:	42ab      	cmp	r3, r5
 801c588:	d004      	beq.n	801c594 <WM__InvalidateDrawAndDescs+0x19c>
 801c58a:	f7fd fab3 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c590:	2200      	movs	r2, #0
 801c592:	625a      	str	r2, [r3, #36]	; 0x24
 801c594:	4628      	mov	r0, r5
 801c596:	f001 fc2b 	bl	801ddf0 <WM_GetFirstChild>
 801c59a:	4604      	mov	r4, r0
 801c59c:	b350      	cbz	r0, 801c5f4 <WM__InvalidateDrawAndDescs+0x1fc>
 801c59e:	f04f 0900 	mov.w	r9, #0
 801c5a2:	4620      	mov	r0, r4
 801c5a4:	f7f5 f9e4 	bl	8011970 <GUI_ALLOC_LockH>
 801c5a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c5aa:	900d      	str	r0, [sp, #52]	; 0x34
 801c5ac:	079b      	lsls	r3, r3, #30
 801c5ae:	d518      	bpl.n	801c5e2 <WM__InvalidateDrawAndDescs+0x1ea>
 801c5b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c5b2:	b140      	cbz	r0, 801c5c6 <WM__InvalidateDrawAndDescs+0x1ce>
 801c5b4:	f8d8 3000 	ldr.w	r3, [r8]
 801c5b8:	42a3      	cmp	r3, r4
 801c5ba:	d004      	beq.n	801c5c6 <WM__InvalidateDrawAndDescs+0x1ce>
 801c5bc:	f7fd fa9a 	bl	8019af4 <GUI_MEMDEV_Delete>
 801c5c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c5c2:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 801c5c6:	4620      	mov	r0, r4
 801c5c8:	f001 fc12 	bl	801ddf0 <WM_GetFirstChild>
 801c5cc:	4607      	mov	r7, r0
 801c5ce:	b140      	cbz	r0, 801c5e2 <WM__InvalidateDrawAndDescs+0x1ea>
 801c5d0:	4638      	mov	r0, r7
 801c5d2:	f7ff ff11 	bl	801c3f8 <WM__InvalidateDrawAndDescs>
 801c5d6:	4638      	mov	r0, r7
 801c5d8:	f7f5 f9c0 	bl	801195c <GUI_ALLOC_h2p>
 801c5dc:	6a07      	ldr	r7, [r0, #32]
 801c5de:	2f00      	cmp	r7, #0
 801c5e0:	d1f6      	bne.n	801c5d0 <WM__InvalidateDrawAndDescs+0x1d8>
 801c5e2:	a80d      	add	r0, sp, #52	; 0x34
 801c5e4:	f7f5 f9d8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c5e8:	4620      	mov	r0, r4
 801c5ea:	f7f5 f9b7 	bl	801195c <GUI_ALLOC_h2p>
 801c5ee:	6a04      	ldr	r4, [r0, #32]
 801c5f0:	2c00      	cmp	r4, #0
 801c5f2:	d1d6      	bne.n	801c5a2 <WM__InvalidateDrawAndDescs+0x1aa>
 801c5f4:	a80c      	add	r0, sp, #48	; 0x30
 801c5f6:	f7f5 f9cf 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	f7f5 f9ae 	bl	801195c <GUI_ALLOC_h2p>
 801c600:	6a05      	ldr	r5, [r0, #32]
 801c602:	2d00      	cmp	r5, #0
 801c604:	d1b4      	bne.n	801c570 <WM__InvalidateDrawAndDescs+0x178>
 801c606:	a80b      	add	r0, sp, #44	; 0x2c
 801c608:	f7f5 f9c6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c60c:	4630      	mov	r0, r6
 801c60e:	f7f5 f9a5 	bl	801195c <GUI_ALLOC_h2p>
 801c612:	6a06      	ldr	r6, [r0, #32]
 801c614:	2e00      	cmp	r6, #0
 801c616:	d193      	bne.n	801c540 <WM__InvalidateDrawAndDescs+0x148>
 801c618:	a80a      	add	r0, sp, #40	; 0x28
 801c61a:	f7f5 f9bd 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c61e:	9801      	ldr	r0, [sp, #4]
 801c620:	f7f5 f99c 	bl	801195c <GUI_ALLOC_h2p>
 801c624:	6a03      	ldr	r3, [r0, #32]
 801c626:	9301      	str	r3, [sp, #4]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	f47f af70 	bne.w	801c50e <WM__InvalidateDrawAndDescs+0x116>
 801c62e:	a809      	add	r0, sp, #36	; 0x24
 801c630:	f7f5 f9b2 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c634:	4650      	mov	r0, sl
 801c636:	f7f5 f991 	bl	801195c <GUI_ALLOC_h2p>
 801c63a:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801c63e:	f1ba 0f00 	cmp.w	sl, #0
 801c642:	f47f af4a 	bne.w	801c4da <WM__InvalidateDrawAndDescs+0xe2>
 801c646:	a808      	add	r0, sp, #32
 801c648:	f7f5 f9a6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c64c:	4658      	mov	r0, fp
 801c64e:	f7f5 f985 	bl	801195c <GUI_ALLOC_h2p>
 801c652:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801c656:	f1bb 0f00 	cmp.w	fp, #0
 801c65a:	f47f af24 	bne.w	801c4a6 <WM__InvalidateDrawAndDescs+0xae>
 801c65e:	a807      	add	r0, sp, #28
 801c660:	f7f5 f99a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c664:	9802      	ldr	r0, [sp, #8]
 801c666:	f7f5 f979 	bl	801195c <GUI_ALLOC_h2p>
 801c66a:	6a03      	ldr	r3, [r0, #32]
 801c66c:	9302      	str	r3, [sp, #8]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	f47f aefe 	bne.w	801c470 <WM__InvalidateDrawAndDescs+0x78>
 801c674:	a806      	add	r0, sp, #24
 801c676:	f7f5 f98f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c67a:	9803      	ldr	r0, [sp, #12]
 801c67c:	f7f5 f96e 	bl	801195c <GUI_ALLOC_h2p>
 801c680:	6a03      	ldr	r3, [r0, #32]
 801c682:	9303      	str	r3, [sp, #12]
 801c684:	2b00      	cmp	r3, #0
 801c686:	f47f aed8 	bne.w	801c43a <WM__InvalidateDrawAndDescs+0x42>
 801c68a:	a805      	add	r0, sp, #20
 801c68c:	f7f5 f984 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c690:	b00f      	add	sp, #60	; 0x3c
 801c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c696:	bf00      	nop
 801c698:	2002b040 	.word	0x2002b040

0801c69c <WM_InvalidateWindowAndDescsEx>:
 801c69c:	b900      	cbnz	r0, 801c6a0 <WM_InvalidateWindowAndDescsEx+0x4>
 801c69e:	4770      	bx	lr
 801c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a4:	b0a1      	sub	sp, #132	; 0x84
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	460d      	mov	r5, r1
 801c6aa:	9201      	str	r2, [sp, #4]
 801c6ac:	f7f5 f960 	bl	8011970 <GUI_ALLOC_LockH>
 801c6b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c6b2:	9005      	str	r0, [sp, #20]
 801c6b4:	079a      	lsls	r2, r3, #30
 801c6b6:	f140 8156 	bpl.w	801c966 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801c6ba:	4602      	mov	r2, r0
 801c6bc:	4629      	mov	r1, r5
 801c6be:	a80e      	add	r0, sp, #56	; 0x38
 801c6c0:	f7fa fc3e 	bl	8016f40 <GUI__IntersectRects>
 801c6c4:	2800      	cmp	r0, #0
 801c6c6:	f000 814e 	beq.w	801c966 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801c6ca:	a805      	add	r0, sp, #20
 801c6cc:	f7f5 f964 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	9a01      	ldr	r2, [sp, #4]
 801c6d4:	a90e      	add	r1, sp, #56	; 0x38
 801c6d6:	f7ff fd09 	bl	801c0ec <_Invalidate1Abs>
 801c6da:	4620      	mov	r0, r4
 801c6dc:	f001 fb88 	bl	801ddf0 <WM_GetFirstChild>
 801c6e0:	4604      	mov	r4, r0
 801c6e2:	2800      	cmp	r0, #0
 801c6e4:	f000 8142 	beq.w	801c96c <WM_InvalidateWindowAndDescsEx+0x2d0>
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	f7f5 f941 	bl	8011970 <GUI_ALLOC_LockH>
 801c6ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c6f0:	9006      	str	r0, [sp, #24]
 801c6f2:	079b      	lsls	r3, r3, #30
 801c6f4:	f140 813d 	bpl.w	801c972 <WM_InvalidateWindowAndDescsEx+0x2d6>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	a90e      	add	r1, sp, #56	; 0x38
 801c6fc:	a810      	add	r0, sp, #64	; 0x40
 801c6fe:	f7fa fc1f 	bl	8016f40 <GUI__IntersectRects>
 801c702:	2800      	cmp	r0, #0
 801c704:	f000 8135 	beq.w	801c972 <WM_InvalidateWindowAndDescsEx+0x2d6>
 801c708:	a806      	add	r0, sp, #24
 801c70a:	f7f5 f945 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c70e:	9a01      	ldr	r2, [sp, #4]
 801c710:	a910      	add	r1, sp, #64	; 0x40
 801c712:	4620      	mov	r0, r4
 801c714:	f7ff fcea 	bl	801c0ec <_Invalidate1Abs>
 801c718:	4620      	mov	r0, r4
 801c71a:	f001 fb69 	bl	801ddf0 <WM_GetFirstChild>
 801c71e:	4605      	mov	r5, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	f000 8118 	beq.w	801c956 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801c726:	9402      	str	r4, [sp, #8]
 801c728:	4628      	mov	r0, r5
 801c72a:	f7f5 f921 	bl	8011970 <GUI_ALLOC_LockH>
 801c72e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c730:	9007      	str	r0, [sp, #28]
 801c732:	079f      	lsls	r7, r3, #30
 801c734:	f140 8121 	bpl.w	801c97a <WM_InvalidateWindowAndDescsEx+0x2de>
 801c738:	4602      	mov	r2, r0
 801c73a:	a910      	add	r1, sp, #64	; 0x40
 801c73c:	a812      	add	r0, sp, #72	; 0x48
 801c73e:	f7fa fbff 	bl	8016f40 <GUI__IntersectRects>
 801c742:	2800      	cmp	r0, #0
 801c744:	f000 8119 	beq.w	801c97a <WM_InvalidateWindowAndDescsEx+0x2de>
 801c748:	a807      	add	r0, sp, #28
 801c74a:	f7f5 f925 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c74e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c752:	4628      	mov	r0, r5
 801c754:	a912      	add	r1, sp, #72	; 0x48
 801c756:	4652      	mov	r2, sl
 801c758:	f7ff fcc8 	bl	801c0ec <_Invalidate1Abs>
 801c75c:	4628      	mov	r0, r5
 801c75e:	f001 fb47 	bl	801ddf0 <WM_GetFirstChild>
 801c762:	2800      	cmp	r0, #0
 801c764:	f000 80ef 	beq.w	801c946 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801c768:	9503      	str	r5, [sp, #12]
 801c76a:	4605      	mov	r5, r0
 801c76c:	4628      	mov	r0, r5
 801c76e:	f7f5 f8ff 	bl	8011970 <GUI_ALLOC_LockH>
 801c772:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c774:	9008      	str	r0, [sp, #32]
 801c776:	079e      	lsls	r6, r3, #30
 801c778:	f140 8103 	bpl.w	801c982 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801c77c:	4602      	mov	r2, r0
 801c77e:	a912      	add	r1, sp, #72	; 0x48
 801c780:	a814      	add	r0, sp, #80	; 0x50
 801c782:	f7fa fbdd 	bl	8016f40 <GUI__IntersectRects>
 801c786:	2800      	cmp	r0, #0
 801c788:	f000 80fb 	beq.w	801c982 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801c78c:	a808      	add	r0, sp, #32
 801c78e:	f7f5 f903 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c792:	4628      	mov	r0, r5
 801c794:	4652      	mov	r2, sl
 801c796:	a914      	add	r1, sp, #80	; 0x50
 801c798:	f7ff fca8 	bl	801c0ec <_Invalidate1Abs>
 801c79c:	4628      	mov	r0, r5
 801c79e:	f001 fb27 	bl	801ddf0 <WM_GetFirstChild>
 801c7a2:	2800      	cmp	r0, #0
 801c7a4:	f000 80c7 	beq.w	801c936 <WM_InvalidateWindowAndDescsEx+0x29a>
 801c7a8:	46ab      	mov	fp, r5
 801c7aa:	4680      	mov	r8, r0
 801c7ac:	4640      	mov	r0, r8
 801c7ae:	f7f5 f8df 	bl	8011970 <GUI_ALLOC_LockH>
 801c7b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c7b4:	9009      	str	r0, [sp, #36]	; 0x24
 801c7b6:	079d      	lsls	r5, r3, #30
 801c7b8:	f140 80e7 	bpl.w	801c98a <WM_InvalidateWindowAndDescsEx+0x2ee>
 801c7bc:	4602      	mov	r2, r0
 801c7be:	a914      	add	r1, sp, #80	; 0x50
 801c7c0:	a816      	add	r0, sp, #88	; 0x58
 801c7c2:	f7fa fbbd 	bl	8016f40 <GUI__IntersectRects>
 801c7c6:	2800      	cmp	r0, #0
 801c7c8:	f000 80df 	beq.w	801c98a <WM_InvalidateWindowAndDescsEx+0x2ee>
 801c7cc:	a809      	add	r0, sp, #36	; 0x24
 801c7ce:	f7f5 f8e3 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c7d2:	4640      	mov	r0, r8
 801c7d4:	4652      	mov	r2, sl
 801c7d6:	a916      	add	r1, sp, #88	; 0x58
 801c7d8:	f7ff fc88 	bl	801c0ec <_Invalidate1Abs>
 801c7dc:	4640      	mov	r0, r8
 801c7de:	f001 fb07 	bl	801ddf0 <WM_GetFirstChild>
 801c7e2:	2800      	cmp	r0, #0
 801c7e4:	f000 809d 	beq.w	801c922 <WM_InvalidateWindowAndDescsEx+0x286>
 801c7e8:	4681      	mov	r9, r0
 801c7ea:	4648      	mov	r0, r9
 801c7ec:	f7f5 f8c0 	bl	8011970 <GUI_ALLOC_LockH>
 801c7f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c7f2:	900a      	str	r0, [sp, #40]	; 0x28
 801c7f4:	079c      	lsls	r4, r3, #30
 801c7f6:	f140 80d5 	bpl.w	801c9a4 <WM_InvalidateWindowAndDescsEx+0x308>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	a916      	add	r1, sp, #88	; 0x58
 801c7fe:	a818      	add	r0, sp, #96	; 0x60
 801c800:	f7fa fb9e 	bl	8016f40 <GUI__IntersectRects>
 801c804:	2800      	cmp	r0, #0
 801c806:	f000 80cd 	beq.w	801c9a4 <WM_InvalidateWindowAndDescsEx+0x308>
 801c80a:	a80a      	add	r0, sp, #40	; 0x28
 801c80c:	f7f5 f8c4 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c810:	4652      	mov	r2, sl
 801c812:	a918      	add	r1, sp, #96	; 0x60
 801c814:	4648      	mov	r0, r9
 801c816:	f7ff fc69 	bl	801c0ec <_Invalidate1Abs>
 801c81a:	4648      	mov	r0, r9
 801c81c:	f001 fae8 	bl	801ddf0 <WM_GetFirstChild>
 801c820:	4605      	mov	r5, r0
 801c822:	2800      	cmp	r0, #0
 801c824:	d074      	beq.n	801c910 <WM_InvalidateWindowAndDescsEx+0x274>
 801c826:	4628      	mov	r0, r5
 801c828:	f7f5 f8a2 	bl	8011970 <GUI_ALLOC_LockH>
 801c82c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c82e:	900b      	str	r0, [sp, #44]	; 0x2c
 801c830:	0799      	lsls	r1, r3, #30
 801c832:	f140 80c4 	bpl.w	801c9be <WM_InvalidateWindowAndDescsEx+0x322>
 801c836:	4602      	mov	r2, r0
 801c838:	a918      	add	r1, sp, #96	; 0x60
 801c83a:	a81a      	add	r0, sp, #104	; 0x68
 801c83c:	f7fa fb80 	bl	8016f40 <GUI__IntersectRects>
 801c840:	2800      	cmp	r0, #0
 801c842:	f000 80bc 	beq.w	801c9be <WM_InvalidateWindowAndDescsEx+0x322>
 801c846:	a80b      	add	r0, sp, #44	; 0x2c
 801c848:	f7f5 f8a6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c84c:	4652      	mov	r2, sl
 801c84e:	a91a      	add	r1, sp, #104	; 0x68
 801c850:	4628      	mov	r0, r5
 801c852:	f7ff fc4b 	bl	801c0ec <_Invalidate1Abs>
 801c856:	4628      	mov	r0, r5
 801c858:	f001 faca 	bl	801ddf0 <WM_GetFirstChild>
 801c85c:	4606      	mov	r6, r0
 801c85e:	2800      	cmp	r0, #0
 801c860:	d050      	beq.n	801c904 <WM_InvalidateWindowAndDescsEx+0x268>
 801c862:	4630      	mov	r0, r6
 801c864:	f7f5 f884 	bl	8011970 <GUI_ALLOC_LockH>
 801c868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c86a:	900c      	str	r0, [sp, #48]	; 0x30
 801c86c:	079a      	lsls	r2, r3, #30
 801c86e:	f140 80b1 	bpl.w	801c9d4 <WM_InvalidateWindowAndDescsEx+0x338>
 801c872:	4602      	mov	r2, r0
 801c874:	a91a      	add	r1, sp, #104	; 0x68
 801c876:	a81c      	add	r0, sp, #112	; 0x70
 801c878:	f7fa fb62 	bl	8016f40 <GUI__IntersectRects>
 801c87c:	2800      	cmp	r0, #0
 801c87e:	f000 80a9 	beq.w	801c9d4 <WM_InvalidateWindowAndDescsEx+0x338>
 801c882:	a80c      	add	r0, sp, #48	; 0x30
 801c884:	f7f5 f888 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c888:	4652      	mov	r2, sl
 801c88a:	a91c      	add	r1, sp, #112	; 0x70
 801c88c:	4630      	mov	r0, r6
 801c88e:	f7ff fc2d 	bl	801c0ec <_Invalidate1Abs>
 801c892:	4630      	mov	r0, r6
 801c894:	f001 faac 	bl	801ddf0 <WM_GetFirstChild>
 801c898:	4607      	mov	r7, r0
 801c89a:	b368      	cbz	r0, 801c8f8 <WM_InvalidateWindowAndDescsEx+0x25c>
 801c89c:	4638      	mov	r0, r7
 801c89e:	f7f5 f867 	bl	8011970 <GUI_ALLOC_LockH>
 801c8a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801c8a4:	900d      	str	r0, [sp, #52]	; 0x34
 801c8a6:	079b      	lsls	r3, r3, #30
 801c8a8:	f140 809f 	bpl.w	801c9ea <WM_InvalidateWindowAndDescsEx+0x34e>
 801c8ac:	4602      	mov	r2, r0
 801c8ae:	a91c      	add	r1, sp, #112	; 0x70
 801c8b0:	a81e      	add	r0, sp, #120	; 0x78
 801c8b2:	f7fa fb45 	bl	8016f40 <GUI__IntersectRects>
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	f000 8097 	beq.w	801c9ea <WM_InvalidateWindowAndDescsEx+0x34e>
 801c8bc:	a80d      	add	r0, sp, #52	; 0x34
 801c8be:	f7f5 f86b 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c8c2:	4652      	mov	r2, sl
 801c8c4:	a91e      	add	r1, sp, #120	; 0x78
 801c8c6:	4638      	mov	r0, r7
 801c8c8:	f7ff fc10 	bl	801c0ec <_Invalidate1Abs>
 801c8cc:	4638      	mov	r0, r7
 801c8ce:	f001 fa8f 	bl	801ddf0 <WM_GetFirstChild>
 801c8d2:	4604      	mov	r4, r0
 801c8d4:	b150      	cbz	r0, 801c8ec <WM_InvalidateWindowAndDescsEx+0x250>
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	4652      	mov	r2, sl
 801c8da:	a91e      	add	r1, sp, #120	; 0x78
 801c8dc:	f7ff fede 	bl	801c69c <WM_InvalidateWindowAndDescsEx>
 801c8e0:	4620      	mov	r0, r4
 801c8e2:	f7f5 f83b 	bl	801195c <GUI_ALLOC_h2p>
 801c8e6:	6a04      	ldr	r4, [r0, #32]
 801c8e8:	2c00      	cmp	r4, #0
 801c8ea:	d1f4      	bne.n	801c8d6 <WM_InvalidateWindowAndDescsEx+0x23a>
 801c8ec:	4638      	mov	r0, r7
 801c8ee:	f7f5 f835 	bl	801195c <GUI_ALLOC_h2p>
 801c8f2:	6a07      	ldr	r7, [r0, #32]
 801c8f4:	2f00      	cmp	r7, #0
 801c8f6:	d1d1      	bne.n	801c89c <WM_InvalidateWindowAndDescsEx+0x200>
 801c8f8:	4630      	mov	r0, r6
 801c8fa:	f7f5 f82f 	bl	801195c <GUI_ALLOC_h2p>
 801c8fe:	6a06      	ldr	r6, [r0, #32]
 801c900:	2e00      	cmp	r6, #0
 801c902:	d1ae      	bne.n	801c862 <WM_InvalidateWindowAndDescsEx+0x1c6>
 801c904:	4628      	mov	r0, r5
 801c906:	f7f5 f829 	bl	801195c <GUI_ALLOC_h2p>
 801c90a:	6a05      	ldr	r5, [r0, #32]
 801c90c:	2d00      	cmp	r5, #0
 801c90e:	d18a      	bne.n	801c826 <WM_InvalidateWindowAndDescsEx+0x18a>
 801c910:	4648      	mov	r0, r9
 801c912:	f7f5 f823 	bl	801195c <GUI_ALLOC_h2p>
 801c916:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801c91a:	f1b9 0f00 	cmp.w	r9, #0
 801c91e:	f47f af64 	bne.w	801c7ea <WM_InvalidateWindowAndDescsEx+0x14e>
 801c922:	4640      	mov	r0, r8
 801c924:	f7f5 f81a 	bl	801195c <GUI_ALLOC_h2p>
 801c928:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801c92c:	f1b8 0f00 	cmp.w	r8, #0
 801c930:	f47f af3c 	bne.w	801c7ac <WM_InvalidateWindowAndDescsEx+0x110>
 801c934:	465d      	mov	r5, fp
 801c936:	4628      	mov	r0, r5
 801c938:	f7f5 f810 	bl	801195c <GUI_ALLOC_h2p>
 801c93c:	6a05      	ldr	r5, [r0, #32]
 801c93e:	2d00      	cmp	r5, #0
 801c940:	f47f af14 	bne.w	801c76c <WM_InvalidateWindowAndDescsEx+0xd0>
 801c944:	9d03      	ldr	r5, [sp, #12]
 801c946:	4628      	mov	r0, r5
 801c948:	f7f5 f808 	bl	801195c <GUI_ALLOC_h2p>
 801c94c:	6a05      	ldr	r5, [r0, #32]
 801c94e:	2d00      	cmp	r5, #0
 801c950:	f47f aeea 	bne.w	801c728 <WM_InvalidateWindowAndDescsEx+0x8c>
 801c954:	9c02      	ldr	r4, [sp, #8]
 801c956:	4620      	mov	r0, r4
 801c958:	f7f5 f800 	bl	801195c <GUI_ALLOC_h2p>
 801c95c:	6a04      	ldr	r4, [r0, #32]
 801c95e:	2c00      	cmp	r4, #0
 801c960:	f47f aec2 	bne.w	801c6e8 <WM_InvalidateWindowAndDescsEx+0x4c>
 801c964:	e002      	b.n	801c96c <WM_InvalidateWindowAndDescsEx+0x2d0>
 801c966:	a805      	add	r0, sp, #20
 801c968:	f7f5 f816 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c96c:	b021      	add	sp, #132	; 0x84
 801c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c972:	a806      	add	r0, sp, #24
 801c974:	f7f5 f810 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c978:	e7ed      	b.n	801c956 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801c97a:	a807      	add	r0, sp, #28
 801c97c:	f7f5 f80c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c980:	e7e1      	b.n	801c946 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801c982:	a808      	add	r0, sp, #32
 801c984:	f7f5 f808 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c988:	e7d5      	b.n	801c936 <WM_InvalidateWindowAndDescsEx+0x29a>
 801c98a:	a809      	add	r0, sp, #36	; 0x24
 801c98c:	f7f5 f804 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c990:	4640      	mov	r0, r8
 801c992:	f7f4 ffe3 	bl	801195c <GUI_ALLOC_h2p>
 801c996:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801c99a:	f1b8 0f00 	cmp.w	r8, #0
 801c99e:	f47f af05 	bne.w	801c7ac <WM_InvalidateWindowAndDescsEx+0x110>
 801c9a2:	e7c7      	b.n	801c934 <WM_InvalidateWindowAndDescsEx+0x298>
 801c9a4:	a80a      	add	r0, sp, #40	; 0x28
 801c9a6:	f7f4 fff7 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c9aa:	4648      	mov	r0, r9
 801c9ac:	f7f4 ffd6 	bl	801195c <GUI_ALLOC_h2p>
 801c9b0:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801c9b4:	f1b9 0f00 	cmp.w	r9, #0
 801c9b8:	f47f af17 	bne.w	801c7ea <WM_InvalidateWindowAndDescsEx+0x14e>
 801c9bc:	e7b1      	b.n	801c922 <WM_InvalidateWindowAndDescsEx+0x286>
 801c9be:	a80b      	add	r0, sp, #44	; 0x2c
 801c9c0:	f7f4 ffea 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c9c4:	4628      	mov	r0, r5
 801c9c6:	f7f4 ffc9 	bl	801195c <GUI_ALLOC_h2p>
 801c9ca:	6a05      	ldr	r5, [r0, #32]
 801c9cc:	2d00      	cmp	r5, #0
 801c9ce:	f47f af2a 	bne.w	801c826 <WM_InvalidateWindowAndDescsEx+0x18a>
 801c9d2:	e79d      	b.n	801c910 <WM_InvalidateWindowAndDescsEx+0x274>
 801c9d4:	a80c      	add	r0, sp, #48	; 0x30
 801c9d6:	f7f4 ffdf 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c9da:	4630      	mov	r0, r6
 801c9dc:	f7f4 ffbe 	bl	801195c <GUI_ALLOC_h2p>
 801c9e0:	6a06      	ldr	r6, [r0, #32]
 801c9e2:	2e00      	cmp	r6, #0
 801c9e4:	f47f af3d 	bne.w	801c862 <WM_InvalidateWindowAndDescsEx+0x1c6>
 801c9e8:	e78c      	b.n	801c904 <WM_InvalidateWindowAndDescsEx+0x268>
 801c9ea:	a80d      	add	r0, sp, #52	; 0x34
 801c9ec:	f7f4 ffd4 	bl	8011998 <GUI_ALLOC_UnlockH>
 801c9f0:	4638      	mov	r0, r7
 801c9f2:	f7f4 ffb3 	bl	801195c <GUI_ALLOC_h2p>
 801c9f6:	6a07      	ldr	r7, [r0, #32]
 801c9f8:	2f00      	cmp	r7, #0
 801c9fa:	f47f af4f 	bne.w	801c89c <WM_InvalidateWindowAndDescsEx+0x200>
 801c9fe:	e77b      	b.n	801c8f8 <WM_InvalidateWindowAndDescsEx+0x25c>

0801ca00 <WM__InvalidateRect>:
 801ca00:	b901      	cbnz	r1, 801ca04 <WM__InvalidateRect+0x4>
 801ca02:	4770      	bx	lr
 801ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca08:	4605      	mov	r5, r0
 801ca0a:	b086      	sub	sp, #24
 801ca0c:	4608      	mov	r0, r1
 801ca0e:	460c      	mov	r4, r1
 801ca10:	461e      	mov	r6, r3
 801ca12:	4617      	mov	r7, r2
 801ca14:	f7f4 ffac 	bl	8011970 <GUI_ALLOC_LockH>
 801ca18:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801ca1c:	9000      	str	r0, [sp, #0]
 801ca1e:	f018 0f02 	tst.w	r8, #2
 801ca22:	d041      	beq.n	801caa8 <WM__InvalidateRect+0xa8>
 801ca24:	4602      	mov	r2, r0
 801ca26:	4629      	mov	r1, r5
 801ca28:	a802      	add	r0, sp, #8
 801ca2a:	f7fa fa89 	bl	8016f40 <GUI__IntersectRects>
 801ca2e:	2800      	cmp	r0, #0
 801ca30:	d03a      	beq.n	801caa8 <WM__InvalidateRect+0xa8>
 801ca32:	f640 0301 	movw	r3, #2049	; 0x801
 801ca36:	ea08 0303 	and.w	r3, r8, r3
 801ca3a:	2b01      	cmp	r3, #1
 801ca3c:	d044      	beq.n	801cac8 <WM__InvalidateRect+0xc8>
 801ca3e:	4620      	mov	r0, r4
 801ca40:	4632      	mov	r2, r6
 801ca42:	a902      	add	r1, sp, #8
 801ca44:	f7ff fb52 	bl	801c0ec <_Invalidate1Abs>
 801ca48:	9b00      	ldr	r3, [sp, #0]
 801ca4a:	69dc      	ldr	r4, [r3, #28]
 801ca4c:	42bc      	cmp	r4, r7
 801ca4e:	d02b      	beq.n	801caa8 <WM__InvalidateRect+0xa8>
 801ca50:	b354      	cbz	r4, 801caa8 <WM__InvalidateRect+0xa8>
 801ca52:	4620      	mov	r0, r4
 801ca54:	f7f4 ff8c 	bl	8011970 <GUI_ALLOC_LockH>
 801ca58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ca5a:	9001      	str	r0, [sp, #4]
 801ca5c:	079b      	lsls	r3, r3, #30
 801ca5e:	d529      	bpl.n	801cab4 <WM__InvalidateRect+0xb4>
 801ca60:	4602      	mov	r2, r0
 801ca62:	a902      	add	r1, sp, #8
 801ca64:	a804      	add	r0, sp, #16
 801ca66:	f7fa fa6b 	bl	8016f40 <GUI__IntersectRects>
 801ca6a:	b318      	cbz	r0, 801cab4 <WM__InvalidateRect+0xb4>
 801ca6c:	a801      	add	r0, sp, #4
 801ca6e:	f7f4 ff93 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ca72:	4632      	mov	r2, r6
 801ca74:	a904      	add	r1, sp, #16
 801ca76:	4620      	mov	r0, r4
 801ca78:	f7ff fb38 	bl	801c0ec <_Invalidate1Abs>
 801ca7c:	4620      	mov	r0, r4
 801ca7e:	f001 f9b7 	bl	801ddf0 <WM_GetFirstChild>
 801ca82:	4605      	mov	r5, r0
 801ca84:	b150      	cbz	r0, 801ca9c <WM__InvalidateRect+0x9c>
 801ca86:	4628      	mov	r0, r5
 801ca88:	4632      	mov	r2, r6
 801ca8a:	a904      	add	r1, sp, #16
 801ca8c:	f7ff fe06 	bl	801c69c <WM_InvalidateWindowAndDescsEx>
 801ca90:	4628      	mov	r0, r5
 801ca92:	f7f4 ff63 	bl	801195c <GUI_ALLOC_h2p>
 801ca96:	6a05      	ldr	r5, [r0, #32]
 801ca98:	2d00      	cmp	r5, #0
 801ca9a:	d1f4      	bne.n	801ca86 <WM__InvalidateRect+0x86>
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f7f4 ff5d 	bl	801195c <GUI_ALLOC_h2p>
 801caa2:	6a04      	ldr	r4, [r0, #32]
 801caa4:	42a7      	cmp	r7, r4
 801caa6:	d1d3      	bne.n	801ca50 <WM__InvalidateRect+0x50>
 801caa8:	4668      	mov	r0, sp
 801caaa:	f7f4 ff75 	bl	8011998 <GUI_ALLOC_UnlockH>
 801caae:	b006      	add	sp, #24
 801cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cab4:	a801      	add	r0, sp, #4
 801cab6:	f7f4 ff6f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801caba:	4620      	mov	r0, r4
 801cabc:	f7f4 ff4e 	bl	801195c <GUI_ALLOC_h2p>
 801cac0:	6a04      	ldr	r4, [r0, #32]
 801cac2:	42a7      	cmp	r7, r4
 801cac4:	d1c4      	bne.n	801ca50 <WM__InvalidateRect+0x50>
 801cac6:	e7ef      	b.n	801caa8 <WM__InvalidateRect+0xa8>
 801cac8:	9900      	ldr	r1, [sp, #0]
 801caca:	4633      	mov	r3, r6
 801cacc:	a802      	add	r0, sp, #8
 801cace:	6a0a      	ldr	r2, [r1, #32]
 801cad0:	6989      	ldr	r1, [r1, #24]
 801cad2:	f7ff ff95 	bl	801ca00 <WM__InvalidateRect>
 801cad6:	e7b7      	b.n	801ca48 <WM__InvalidateRect+0x48>

0801cad8 <WM_InvalidateRect.part.2>:
 801cad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cadc:	4607      	mov	r7, r0
 801cade:	b086      	sub	sp, #24
 801cae0:	460c      	mov	r4, r1
 801cae2:	f7f9 fbbf 	bl	8016264 <GUI_Lock>
 801cae6:	4638      	mov	r0, r7
 801cae8:	f7f4 ff42 	bl	8011970 <GUI_ALLOC_LockH>
 801caec:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801caf0:	9000      	str	r0, [sp, #0]
 801caf2:	f018 0f02 	tst.w	r8, #2
 801caf6:	d02f      	beq.n	801cb58 <WM_InvalidateRect.part.2+0x80>
 801caf8:	ae04      	add	r6, sp, #16
 801cafa:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801cafe:	c803      	ldmia	r0, {r0, r1}
 801cb00:	e886 0003 	stmia.w	r6, {r0, r1}
 801cb04:	d145      	bne.n	801cb92 <WM_InvalidateRect.part.2+0xba>
 801cb06:	b17c      	cbz	r4, 801cb28 <WM_InvalidateRect.part.2+0x50>
 801cb08:	6820      	ldr	r0, [r4, #0]
 801cb0a:	ab02      	add	r3, sp, #8
 801cb0c:	6861      	ldr	r1, [r4, #4]
 801cb0e:	9c00      	ldr	r4, [sp, #0]
 801cb10:	c303      	stmia	r3!, {r0, r1}
 801cb12:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cb16:	a802      	add	r0, sp, #8
 801cb18:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cb1c:	f7f5 fc1c 	bl	8012358 <GUI_MoveRect>
 801cb20:	a902      	add	r1, sp, #8
 801cb22:	4630      	mov	r0, r6
 801cb24:	f7fa f9ee 	bl	8016f04 <GUI__IntersectRect>
 801cb28:	463d      	mov	r5, r7
 801cb2a:	e008      	b.n	801cb3e <WM_InvalidateRect.part.2+0x66>
 801cb2c:	f7fa f9ea 	bl	8016f04 <GUI__IntersectRect>
 801cb30:	9b01      	ldr	r3, [sp, #4]
 801cb32:	a801      	add	r0, sp, #4
 801cb34:	699c      	ldr	r4, [r3, #24]
 801cb36:	b1bc      	cbz	r4, 801cb68 <WM_InvalidateRect.part.2+0x90>
 801cb38:	4625      	mov	r5, r4
 801cb3a:	f7f4 ff2d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cb3e:	4628      	mov	r0, r5
 801cb40:	f7f4 ff16 	bl	8011970 <GUI_ALLOC_LockH>
 801cb44:	4603      	mov	r3, r0
 801cb46:	4630      	mov	r0, r6
 801cb48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cb4a:	4619      	mov	r1, r3
 801cb4c:	9301      	str	r3, [sp, #4]
 801cb4e:	0793      	lsls	r3, r2, #30
 801cb50:	d4ec      	bmi.n	801cb2c <WM_InvalidateRect.part.2+0x54>
 801cb52:	a801      	add	r0, sp, #4
 801cb54:	f7f4 ff20 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cb58:	4668      	mov	r0, sp
 801cb5a:	f7f4 ff1d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cb5e:	f7f9 fb77 	bl	8016250 <GUI_Unlock>
 801cb62:	b006      	add	sp, #24
 801cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb68:	f7f4 ff16 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cb6c:	4b10      	ldr	r3, [pc, #64]	; (801cbb0 <WM_InvalidateRect.part.2+0xd8>)
 801cb6e:	681a      	ldr	r2, [r3, #0]
 801cb70:	42aa      	cmp	r2, r5
 801cb72:	d002      	beq.n	801cb7a <WM_InvalidateRect.part.2+0xa2>
 801cb74:	685b      	ldr	r3, [r3, #4]
 801cb76:	429d      	cmp	r5, r3
 801cb78:	d1ee      	bne.n	801cb58 <WM_InvalidateRect.part.2+0x80>
 801cb7a:	f640 0301 	movw	r3, #2049	; 0x801
 801cb7e:	ea08 0303 	and.w	r3, r8, r3
 801cb82:	2b01      	cmp	r3, #1
 801cb84:	d00b      	beq.n	801cb9e <WM_InvalidateRect.part.2+0xc6>
 801cb86:	4631      	mov	r1, r6
 801cb88:	4638      	mov	r0, r7
 801cb8a:	2220      	movs	r2, #32
 801cb8c:	f7ff faae 	bl	801c0ec <_Invalidate1Abs>
 801cb90:	e7e2      	b.n	801cb58 <WM_InvalidateRect.part.2+0x80>
 801cb92:	4638      	mov	r0, r7
 801cb94:	f7ff fc30 	bl	801c3f8 <WM__InvalidateDrawAndDescs>
 801cb98:	2c00      	cmp	r4, #0
 801cb9a:	d1b5      	bne.n	801cb08 <WM_InvalidateRect.part.2+0x30>
 801cb9c:	e7c4      	b.n	801cb28 <WM_InvalidateRect.part.2+0x50>
 801cb9e:	9900      	ldr	r1, [sp, #0]
 801cba0:	4630      	mov	r0, r6
 801cba2:	2320      	movs	r3, #32
 801cba4:	6a0a      	ldr	r2, [r1, #32]
 801cba6:	6989      	ldr	r1, [r1, #24]
 801cba8:	f7ff ff2a 	bl	801ca00 <WM__InvalidateRect>
 801cbac:	e7d4      	b.n	801cb58 <WM_InvalidateRect.part.2+0x80>
 801cbae:	bf00      	nop
 801cbb0:	2002aff4 	.word	0x2002aff4

0801cbb4 <_cbBackWin>:
 801cbb4:	6803      	ldr	r3, [r0, #0]
 801cbb6:	2b0e      	cmp	r3, #14
 801cbb8:	d034      	beq.n	801cc24 <_cbBackWin+0x70>
 801cbba:	2b0f      	cmp	r3, #15
 801cbbc:	b510      	push	{r4, lr}
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	d116      	bne.n	801cbf0 <_cbBackWin+0x3c>
 801cbc2:	4a26      	ldr	r2, [pc, #152]	; (801cc5c <_cbBackWin+0xa8>)
 801cbc4:	6843      	ldr	r3, [r0, #4]
 801cbc6:	6811      	ldr	r1, [r2, #0]
 801cbc8:	428b      	cmp	r3, r1
 801cbca:	d045      	beq.n	801cc58 <_cbBackWin+0xa4>
 801cbcc:	6852      	ldr	r2, [r2, #4]
 801cbce:	4293      	cmp	r3, r2
 801cbd0:	bf14      	ite	ne
 801cbd2:	f04f 33ff 	movne.w	r3, #4294967295
 801cbd6:	2301      	moveq	r3, #1
 801cbd8:	4921      	ldr	r1, [pc, #132]	; (801cc60 <_cbBackWin+0xac>)
 801cbda:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801cbde:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801cbe2:	4290      	cmp	r0, r2
 801cbe4:	d01b      	beq.n	801cc1e <_cbBackWin+0x6a>
 801cbe6:	f7f5 fcc3 	bl	8012570 <GUI_SetBkColor>
 801cbea:	f7f5 fde1 	bl	80127b0 <GUI_Clear>
 801cbee:	6823      	ldr	r3, [r4, #0]
 801cbf0:	3b0e      	subs	r3, #14
 801cbf2:	6860      	ldr	r0, [r4, #4]
 801cbf4:	2b1a      	cmp	r3, #26
 801cbf6:	d812      	bhi.n	801cc1e <_cbBackWin+0x6a>
 801cbf8:	e8df f003 	tbb	[pc, r3]
 801cbfc:	11111119 	.word	0x11111119
 801cc00:	110e1111 	.word	0x110e1111
 801cc04:	11111e11 	.word	0x11111e11
 801cc08:	11111111 	.word	0x11111111
 801cc0c:	11111111 	.word	0x11111111
 801cc10:	11111120 	.word	0x11111120
 801cc14:	1111      	.short	0x1111
 801cc16:	24          	.byte	0x24
 801cc17:	00          	.byte	0x00
 801cc18:	68e1      	ldr	r1, [r4, #12]
 801cc1a:	f001 ffcd 	bl	801ebb8 <WM__GetClientRectEx>
 801cc1e:	2300      	movs	r3, #0
 801cc20:	60e3      	str	r3, [r4, #12]
 801cc22:	bd10      	pop	{r4, pc}
 801cc24:	68c3      	ldr	r3, [r0, #12]
 801cc26:	685a      	ldr	r2, [r3, #4]
 801cc28:	2a01      	cmp	r2, #1
 801cc2a:	d012      	beq.n	801cc52 <_cbBackWin+0x9e>
 801cc2c:	4770      	bx	lr
 801cc2e:	4621      	mov	r1, r4
 801cc30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc34:	f001 b972 	b.w	801df1c <WM_SendToParent>
 801cc38:	60e0      	str	r0, [r4, #12]
 801cc3a:	bd10      	pop	{r4, pc}
 801cc3c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801cc40:	60e3      	str	r3, [r4, #12]
 801cc42:	bd10      	pop	{r4, pc}
 801cc44:	2800      	cmp	r0, #0
 801cc46:	d0ec      	beq.n	801cc22 <_cbBackWin+0x6e>
 801cc48:	2100      	movs	r1, #0
 801cc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc4e:	f7ff bf43 	b.w	801cad8 <WM_InvalidateRect.part.2>
 801cc52:	6818      	ldr	r0, [r3, #0]
 801cc54:	f7f7 bfb4 	b.w	8014bc0 <GUI_StoreKey>
 801cc58:	2300      	movs	r3, #0
 801cc5a:	e7bd      	b.n	801cbd8 <_cbBackWin+0x24>
 801cc5c:	2002aff4 	.word	0x2002aff4
 801cc60:	2002b028 	.word	0x2002b028

0801cc64 <WM_DeleteWindow.part.3>:
 801cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc68:	4e84      	ldr	r6, [pc, #528]	; (801ce7c <WM_DeleteWindow.part.3+0x218>)
 801cc6a:	b086      	sub	sp, #24
 801cc6c:	4604      	mov	r4, r0
 801cc6e:	f7f9 faf9 	bl	8016264 <GUI_Lock>
 801cc72:	6830      	ldr	r0, [r6, #0]
 801cc74:	b148      	cbz	r0, 801cc8a <WM_DeleteWindow.part.3+0x26>
 801cc76:	42a0      	cmp	r0, r4
 801cc78:	d102      	bne.n	801cc80 <WM_DeleteWindow.part.3+0x1c>
 801cc7a:	e00b      	b.n	801cc94 <WM_DeleteWindow.part.3+0x30>
 801cc7c:	4284      	cmp	r4, r0
 801cc7e:	d009      	beq.n	801cc94 <WM_DeleteWindow.part.3+0x30>
 801cc80:	f7f4 fe6c 	bl	801195c <GUI_ALLOC_h2p>
 801cc84:	6940      	ldr	r0, [r0, #20]
 801cc86:	2800      	cmp	r0, #0
 801cc88:	d1f8      	bne.n	801cc7c <WM_DeleteWindow.part.3+0x18>
 801cc8a:	f7f9 fae1 	bl	8016250 <GUI_Unlock>
 801cc8e:	b006      	add	sp, #24
 801cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc94:	4625      	mov	r5, r4
 801cc96:	e000      	b.n	801cc9a <WM_DeleteWindow.part.3+0x36>
 801cc98:	461d      	mov	r5, r3
 801cc9a:	4628      	mov	r0, r5
 801cc9c:	f7f4 fe5e 	bl	801195c <GUI_ALLOC_h2p>
 801cca0:	6983      	ldr	r3, [r0, #24]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d1f8      	bne.n	801cc98 <WM_DeleteWindow.part.3+0x34>
 801cca6:	4f76      	ldr	r7, [pc, #472]	; (801ce80 <WM_DeleteWindow.part.3+0x21c>)
 801cca8:	683a      	ldr	r2, [r7, #0]
 801ccaa:	4295      	cmp	r5, r2
 801ccac:	f000 80de 	beq.w	801ce6c <WM_DeleteWindow.part.3+0x208>
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	429d      	cmp	r5, r3
 801ccb4:	bf14      	ite	ne
 801ccb6:	f04f 35ff 	movne.w	r5, #4294967295
 801ccba:	2501      	moveq	r5, #1
 801ccbc:	230b      	movs	r3, #11
 801ccbe:	f10d 0818 	add.w	r8, sp, #24
 801ccc2:	4620      	mov	r0, r4
 801ccc4:	9403      	str	r4, [sp, #12]
 801ccc6:	f848 3d10 	str.w	r3, [r8, #-16]!
 801ccca:	4641      	mov	r1, r8
 801cccc:	f001 fe66 	bl	801e99c <WM__SendMessage>
 801ccd0:	4620      	mov	r0, r4
 801ccd2:	f001 fafd 	bl	801e2d0 <WM__DeleteAssocTimer>
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	f7f4 fe4a 	bl	8011970 <GUI_ALLOC_LockH>
 801ccdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ccde:	9001      	str	r0, [sp, #4]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	f040 80a2 	bne.w	801ce2a <WM_DeleteWindow.part.3+0x1c6>
 801cce6:	4b67      	ldr	r3, [pc, #412]	; (801ce84 <WM_DeleteWindow.part.3+0x220>)
 801cce8:	2100      	movs	r1, #0
 801ccea:	4a67      	ldr	r2, [pc, #412]	; (801ce88 <WM_DeleteWindow.part.3+0x224>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	4867      	ldr	r0, [pc, #412]	; (801ce8c <WM_DeleteWindow.part.3+0x228>)
 801ccf0:	6081      	str	r1, [r0, #8]
 801ccf2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ccf6:	4284      	cmp	r4, r0
 801ccf8:	bf08      	it	eq
 801ccfa:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801ccfe:	4a64      	ldr	r2, [pc, #400]	; (801ce90 <WM_DeleteWindow.part.3+0x22c>)
 801cd00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801cd04:	428c      	cmp	r4, r1
 801cd06:	f000 8094 	beq.w	801ce32 <WM_DeleteWindow.part.3+0x1ce>
 801cd0a:	4b62      	ldr	r3, [pc, #392]	; (801ce94 <WM_DeleteWindow.part.3+0x230>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	b153      	cbz	r3, 801cd26 <WM_DeleteWindow.part.3+0xc2>
 801cd10:	2100      	movs	r1, #0
 801cd12:	e001      	b.n	801cd18 <WM_DeleteWindow.part.3+0xb4>
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	b133      	cbz	r3, 801cd26 <WM_DeleteWindow.part.3+0xc2>
 801cd18:	685a      	ldr	r2, [r3, #4]
 801cd1a:	4294      	cmp	r4, r2
 801cd1c:	d1fa      	bne.n	801cd14 <WM_DeleteWindow.part.3+0xb0>
 801cd1e:	6059      	str	r1, [r3, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d1f8      	bne.n	801cd18 <WM_DeleteWindow.part.3+0xb4>
 801cd26:	4620      	mov	r0, r4
 801cd28:	2107      	movs	r1, #7
 801cd2a:	f001 f897 	bl	801de5c <WM_NotifyParent>
 801cd2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801cd32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cd36:	2800      	cmp	r0, #0
 801cd38:	d15d      	bne.n	801cdf6 <WM_DeleteWindow.part.3+0x192>
 801cd3a:	4620      	mov	r0, r4
 801cd3c:	f7f4 fe18 	bl	8011970 <GUI_ALLOC_LockH>
 801cd40:	6981      	ldr	r1, [r0, #24]
 801cd42:	9002      	str	r0, [sp, #8]
 801cd44:	2900      	cmp	r1, #0
 801cd46:	d162      	bne.n	801ce0e <WM_DeleteWindow.part.3+0x1aa>
 801cd48:	4640      	mov	r0, r8
 801cd4a:	f7f4 fe25 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cd4e:	6830      	ldr	r0, [r6, #0]
 801cd50:	b158      	cbz	r0, 801cd6a <WM_DeleteWindow.part.3+0x106>
 801cd52:	f7f4 fe03 	bl	801195c <GUI_ALLOC_h2p>
 801cd56:	4680      	mov	r8, r0
 801cd58:	6940      	ldr	r0, [r0, #20]
 801cd5a:	4284      	cmp	r4, r0
 801cd5c:	d1f8      	bne.n	801cd50 <WM_DeleteWindow.part.3+0xec>
 801cd5e:	4620      	mov	r0, r4
 801cd60:	f7f4 fdfc 	bl	801195c <GUI_ALLOC_h2p>
 801cd64:	6943      	ldr	r3, [r0, #20]
 801cd66:	f8c8 3014 	str.w	r3, [r8, #20]
 801cd6a:	9b01      	ldr	r3, [sp, #4]
 801cd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd6e:	07d9      	lsls	r1, r3, #31
 801cd70:	d503      	bpl.n	801cd7a <WM_DeleteWindow.part.3+0x116>
 801cd72:	4949      	ldr	r1, [pc, #292]	; (801ce98 <WM_DeleteWindow.part.3+0x234>)
 801cd74:	680a      	ldr	r2, [r1, #0]
 801cd76:	3a01      	subs	r2, #1
 801cd78:	600a      	str	r2, [r1, #0]
 801cd7a:	069a      	lsls	r2, r3, #26
 801cd7c:	d442      	bmi.n	801ce04 <WM_DeleteWindow.part.3+0x1a0>
 801cd7e:	a801      	add	r0, sp, #4
 801cd80:	f7f4 fe0a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cd84:	4a45      	ldr	r2, [pc, #276]	; (801ce9c <WM_DeleteWindow.part.3+0x238>)
 801cd86:	4620      	mov	r0, r4
 801cd88:	8813      	ldrh	r3, [r2, #0]
 801cd8a:	3b01      	subs	r3, #1
 801cd8c:	8013      	strh	r3, [r2, #0]
 801cd8e:	f7f4 ff87 	bl	8011ca0 <GUI_ALLOC_Free>
 801cd92:	1c6b      	adds	r3, r5, #1
 801cd94:	f43f af79 	beq.w	801cc8a <WM_DeleteWindow.part.3+0x26>
 801cd98:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801cd9c:	f7f9 fa62 	bl	8016264 <GUI_Lock>
 801cda0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801cea4 <WM_DeleteWindow.part.3+0x240>
 801cda4:	f8d8 3000 	ldr.w	r3, [r8]
 801cda8:	b905      	cbnz	r5, 801cdac <WM_DeleteWindow.part.3+0x148>
 801cdaa:	6835      	ldr	r5, [r6, #0]
 801cdac:	649d      	str	r5, [r3, #72]	; 0x48
 801cdae:	462c      	mov	r4, r5
 801cdb0:	e000      	b.n	801cdb4 <WM_DeleteWindow.part.3+0x150>
 801cdb2:	461c      	mov	r4, r3
 801cdb4:	4620      	mov	r0, r4
 801cdb6:	f7f4 fdd1 	bl	801195c <GUI_ALLOC_h2p>
 801cdba:	6983      	ldr	r3, [r0, #24]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d1f8      	bne.n	801cdb2 <WM_DeleteWindow.part.3+0x14e>
 801cdc0:	6839      	ldr	r1, [r7, #0]
 801cdc2:	4a2f      	ldr	r2, [pc, #188]	; (801ce80 <WM_DeleteWindow.part.3+0x21c>)
 801cdc4:	428c      	cmp	r4, r1
 801cdc6:	d053      	beq.n	801ce70 <WM_DeleteWindow.part.3+0x20c>
 801cdc8:	6853      	ldr	r3, [r2, #4]
 801cdca:	429c      	cmp	r4, r3
 801cdcc:	d054      	beq.n	801ce78 <WM_DeleteWindow.part.3+0x214>
 801cdce:	f7fa fe3f 	bl	8017a50 <LCD_SetClipRectMax>
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	f7f4 fdc2 	bl	801195c <GUI_ALLOC_h2p>
 801cdd8:	f8d8 3000 	ldr.w	r3, [r8]
 801cddc:	f9b0 1000 	ldrsh.w	r1, [r0]
 801cde0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cde4:	64d9      	str	r1, [r3, #76]	; 0x4c
 801cde6:	651a      	str	r2, [r3, #80]	; 0x50
 801cde8:	f7f9 fa32 	bl	8016250 <GUI_Unlock>
 801cdec:	f7f9 fa30 	bl	8016250 <GUI_Unlock>
 801cdf0:	b006      	add	sp, #24
 801cdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdf6:	f7ff ff35 	bl	801cc64 <WM_DeleteWindow.part.3>
 801cdfa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801cdfe:	2800      	cmp	r0, #0
 801ce00:	d199      	bne.n	801cd36 <WM_DeleteWindow.part.3+0xd2>
 801ce02:	e79a      	b.n	801cd3a <WM_DeleteWindow.part.3+0xd6>
 801ce04:	4a26      	ldr	r2, [pc, #152]	; (801cea0 <WM_DeleteWindow.part.3+0x23c>)
 801ce06:	8813      	ldrh	r3, [r2, #0]
 801ce08:	3b01      	subs	r3, #1
 801ce0a:	8013      	strh	r3, [r2, #0]
 801ce0c:	e7b7      	b.n	801cd7e <WM_DeleteWindow.part.3+0x11a>
 801ce0e:	6a02      	ldr	r2, [r0, #32]
 801ce10:	2320      	movs	r3, #32
 801ce12:	f7ff fdf5 	bl	801ca00 <WM__InvalidateRect>
 801ce16:	4620      	mov	r0, r4
 801ce18:	f7f4 fda0 	bl	801195c <GUI_ALLOC_h2p>
 801ce1c:	4681      	mov	r9, r0
 801ce1e:	6980      	ldr	r0, [r0, #24]
 801ce20:	b958      	cbnz	r0, 801ce3a <WM_DeleteWindow.part.3+0x1d6>
 801ce22:	9b02      	ldr	r3, [sp, #8]
 801ce24:	2200      	movs	r2, #0
 801ce26:	619a      	str	r2, [r3, #24]
 801ce28:	e78e      	b.n	801cd48 <WM_DeleteWindow.part.3+0xe4>
 801ce2a:	4618      	mov	r0, r3
 801ce2c:	f7fc fe62 	bl	8019af4 <GUI_MEMDEV_Delete>
 801ce30:	e759      	b.n	801cce6 <WM_DeleteWindow.part.3+0x82>
 801ce32:	2100      	movs	r1, #0
 801ce34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801ce38:	e767      	b.n	801cd0a <WM_DeleteWindow.part.3+0xa6>
 801ce3a:	f7f4 fd8f 	bl	801195c <GUI_ALLOC_h2p>
 801ce3e:	69c3      	ldr	r3, [r0, #28]
 801ce40:	4682      	mov	sl, r0
 801ce42:	429c      	cmp	r4, r3
 801ce44:	d00b      	beq.n	801ce5e <WM_DeleteWindow.part.3+0x1fa>
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d0eb      	beq.n	801ce22 <WM_DeleteWindow.part.3+0x1be>
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	f7f4 fd86 	bl	801195c <GUI_ALLOC_h2p>
 801ce50:	6a03      	ldr	r3, [r0, #32]
 801ce52:	429c      	cmp	r4, r3
 801ce54:	d1f7      	bne.n	801ce46 <WM_DeleteWindow.part.3+0x1e2>
 801ce56:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801ce5a:	6203      	str	r3, [r0, #32]
 801ce5c:	e7e1      	b.n	801ce22 <WM_DeleteWindow.part.3+0x1be>
 801ce5e:	4620      	mov	r0, r4
 801ce60:	f7f4 fd7c 	bl	801195c <GUI_ALLOC_h2p>
 801ce64:	6a03      	ldr	r3, [r0, #32]
 801ce66:	f8ca 301c 	str.w	r3, [sl, #28]
 801ce6a:	e7da      	b.n	801ce22 <WM_DeleteWindow.part.3+0x1be>
 801ce6c:	461d      	mov	r5, r3
 801ce6e:	e725      	b.n	801ccbc <WM_DeleteWindow.part.3+0x58>
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7f7 ffeb 	bl	8014e4c <GUI_SelectLayer>
 801ce76:	e7aa      	b.n	801cdce <WM_DeleteWindow.part.3+0x16a>
 801ce78:	2001      	movs	r0, #1
 801ce7a:	e7fa      	b.n	801ce72 <WM_DeleteWindow.part.3+0x20e>
 801ce7c:	2002b010 	.word	0x2002b010
 801ce80:	2002aff4 	.word	0x2002aff4
 801ce84:	2002b014 	.word	0x2002b014
 801ce88:	2002b004 	.word	0x2002b004
 801ce8c:	200003c8 	.word	0x200003c8
 801ce90:	2002b038 	.word	0x2002b038
 801ce94:	2002b030 	.word	0x2002b030
 801ce98:	2002b044 	.word	0x2002b044
 801ce9c:	2002afec 	.word	0x2002afec
 801cea0:	2002b00c 	.word	0x2002b00c
 801cea4:	20000018 	.word	0x20000018

0801cea8 <_Exec1Input>:
 801cea8:	b570      	push	{r4, r5, r6, lr}
 801ceaa:	4e1f      	ldr	r6, [pc, #124]	; (801cf28 <_Exec1Input+0x80>)
 801ceac:	b082      	sub	sp, #8
 801ceae:	6873      	ldr	r3, [r6, #4]
 801ceb0:	b9cb      	cbnz	r3, 801cee6 <_Exec1Input+0x3e>
 801ceb2:	4b1e      	ldr	r3, [pc, #120]	; (801cf2c <_Exec1Input+0x84>)
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	b103      	cbz	r3, 801ceba <_Exec1Input+0x12>
 801ceb8:	4798      	blx	r3
 801ceba:	4b1d      	ldr	r3, [pc, #116]	; (801cf30 <_Exec1Input+0x88>)
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	b10b      	cbz	r3, 801cec4 <_Exec1Input+0x1c>
 801cec0:	4798      	blx	r3
 801cec2:	b968      	cbnz	r0, 801cee0 <_Exec1Input+0x38>
 801cec4:	4b1b      	ldr	r3, [pc, #108]	; (801cf34 <_Exec1Input+0x8c>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801cecc:	b908      	cbnz	r0, 801ced2 <_Exec1Input+0x2a>
 801cece:	b002      	add	sp, #8
 801ced0:	bd70      	pop	{r4, r5, r6, pc}
 801ced2:	f7f7 fe7d 	bl	8014bd0 <GUI_PollKeyMsg>
 801ced6:	3000      	adds	r0, #0
 801ced8:	bf18      	it	ne
 801ceda:	2001      	movne	r0, #1
 801cedc:	b002      	add	sp, #8
 801cede:	bd70      	pop	{r4, r5, r6, pc}
 801cee0:	2001      	movs	r0, #1
 801cee2:	b002      	add	sp, #8
 801cee4:	bd70      	pop	{r4, r5, r6, pc}
 801cee6:	f7f9 f9bd 	bl	8016264 <GUI_Lock>
 801ceea:	4b13      	ldr	r3, [pc, #76]	; (801cf38 <_Exec1Input+0x90>)
 801ceec:	681c      	ldr	r4, [r3, #0]
 801ceee:	b18c      	cbz	r4, 801cf14 <_Exec1Input+0x6c>
 801cef0:	4620      	mov	r0, r4
 801cef2:	f7f4 fd3d 	bl	8011970 <GUI_ALLOC_LockH>
 801cef6:	4603      	mov	r3, r0
 801cef8:	a801      	add	r0, sp, #4
 801cefa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cefc:	9301      	str	r3, [sp, #4]
 801cefe:	0412      	lsls	r2, r2, #16
 801cf00:	d50d      	bpl.n	801cf1e <_Exec1Input+0x76>
 801cf02:	695d      	ldr	r5, [r3, #20]
 801cf04:	f7f4 fd48 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cf08:	4620      	mov	r0, r4
 801cf0a:	462c      	mov	r4, r5
 801cf0c:	f7ff feaa 	bl	801cc64 <WM_DeleteWindow.part.3>
 801cf10:	2c00      	cmp	r4, #0
 801cf12:	d1ed      	bne.n	801cef0 <_Exec1Input+0x48>
 801cf14:	2300      	movs	r3, #0
 801cf16:	6073      	str	r3, [r6, #4]
 801cf18:	f7f9 f99a 	bl	8016250 <GUI_Unlock>
 801cf1c:	e7c9      	b.n	801ceb2 <_Exec1Input+0xa>
 801cf1e:	a801      	add	r0, sp, #4
 801cf20:	695c      	ldr	r4, [r3, #20]
 801cf22:	f7f4 fd39 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cf26:	e7e2      	b.n	801ceee <_Exec1Input+0x46>
 801cf28:	200003c8 	.word	0x200003c8
 801cf2c:	2002affc 	.word	0x2002affc
 801cf30:	2002afdc 	.word	0x2002afdc
 801cf34:	20000018 	.word	0x20000018
 801cf38:	2002b010 	.word	0x2002b010

0801cf3c <WM__InvalidateParent>:
 801cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf40:	4605      	mov	r5, r0
 801cf42:	b086      	sub	sp, #24
 801cf44:	4608      	mov	r0, r1
 801cf46:	460c      	mov	r4, r1
 801cf48:	4617      	mov	r7, r2
 801cf4a:	f7f4 fd07 	bl	801195c <GUI_ALLOC_h2p>
 801cf4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801cf50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801cf54:	bf14      	ite	ne
 801cf56:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 801cf5a:	2620      	moveq	r6, #32
 801cf5c:	b914      	cbnz	r4, 801cf64 <WM__InvalidateParent+0x28>
 801cf5e:	b006      	add	sp, #24
 801cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf64:	4620      	mov	r0, r4
 801cf66:	f7f4 fd03 	bl	8011970 <GUI_ALLOC_LockH>
 801cf6a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801cf6e:	9000      	str	r0, [sp, #0]
 801cf70:	f018 0f02 	tst.w	r8, #2
 801cf74:	d043      	beq.n	801cffe <WM__InvalidateParent+0xc2>
 801cf76:	4602      	mov	r2, r0
 801cf78:	4629      	mov	r1, r5
 801cf7a:	a802      	add	r0, sp, #8
 801cf7c:	f7f9 ffe0 	bl	8016f40 <GUI__IntersectRects>
 801cf80:	2800      	cmp	r0, #0
 801cf82:	d03c      	beq.n	801cffe <WM__InvalidateParent+0xc2>
 801cf84:	f640 0301 	movw	r3, #2049	; 0x801
 801cf88:	ea08 0303 	and.w	r3, r8, r3
 801cf8c:	2b01      	cmp	r3, #1
 801cf8e:	d040      	beq.n	801d012 <WM__InvalidateParent+0xd6>
 801cf90:	4620      	mov	r0, r4
 801cf92:	4632      	mov	r2, r6
 801cf94:	a902      	add	r1, sp, #8
 801cf96:	f7ff f8a9 	bl	801c0ec <_Invalidate1Abs>
 801cf9a:	9b00      	ldr	r3, [sp, #0]
 801cf9c:	69dc      	ldr	r4, [r3, #28]
 801cf9e:	b374      	cbz	r4, 801cffe <WM__InvalidateParent+0xc2>
 801cfa0:	42a7      	cmp	r7, r4
 801cfa2:	d02c      	beq.n	801cffe <WM__InvalidateParent+0xc2>
 801cfa4:	4620      	mov	r0, r4
 801cfa6:	f7f4 fce3 	bl	8011970 <GUI_ALLOC_LockH>
 801cfaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801cfac:	9001      	str	r0, [sp, #4]
 801cfae:	079b      	lsls	r3, r3, #30
 801cfb0:	d52b      	bpl.n	801d00a <WM__InvalidateParent+0xce>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	a902      	add	r1, sp, #8
 801cfb6:	a804      	add	r0, sp, #16
 801cfb8:	f7f9 ffc2 	bl	8016f40 <GUI__IntersectRects>
 801cfbc:	b328      	cbz	r0, 801d00a <WM__InvalidateParent+0xce>
 801cfbe:	a801      	add	r0, sp, #4
 801cfc0:	f7f4 fcea 	bl	8011998 <GUI_ALLOC_UnlockH>
 801cfc4:	4632      	mov	r2, r6
 801cfc6:	a904      	add	r1, sp, #16
 801cfc8:	4620      	mov	r0, r4
 801cfca:	f7ff f88f 	bl	801c0ec <_Invalidate1Abs>
 801cfce:	4620      	mov	r0, r4
 801cfd0:	f000 ff0e 	bl	801ddf0 <WM_GetFirstChild>
 801cfd4:	4605      	mov	r5, r0
 801cfd6:	b150      	cbz	r0, 801cfee <WM__InvalidateParent+0xb2>
 801cfd8:	4628      	mov	r0, r5
 801cfda:	4632      	mov	r2, r6
 801cfdc:	a904      	add	r1, sp, #16
 801cfde:	f7ff fb5d 	bl	801c69c <WM_InvalidateWindowAndDescsEx>
 801cfe2:	4628      	mov	r0, r5
 801cfe4:	f7f4 fcba 	bl	801195c <GUI_ALLOC_h2p>
 801cfe8:	6a05      	ldr	r5, [r0, #32]
 801cfea:	2d00      	cmp	r5, #0
 801cfec:	d1f4      	bne.n	801cfd8 <WM__InvalidateParent+0x9c>
 801cfee:	4620      	mov	r0, r4
 801cff0:	f7f4 fcb4 	bl	801195c <GUI_ALLOC_h2p>
 801cff4:	6a04      	ldr	r4, [r0, #32]
 801cff6:	42a7      	cmp	r7, r4
 801cff8:	d001      	beq.n	801cffe <WM__InvalidateParent+0xc2>
 801cffa:	2c00      	cmp	r4, #0
 801cffc:	d1d2      	bne.n	801cfa4 <WM__InvalidateParent+0x68>
 801cffe:	4668      	mov	r0, sp
 801d000:	f7f4 fcca 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d004:	b006      	add	sp, #24
 801d006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d00a:	a801      	add	r0, sp, #4
 801d00c:	f7f4 fcc4 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d010:	e7ed      	b.n	801cfee <WM__InvalidateParent+0xb2>
 801d012:	9900      	ldr	r1, [sp, #0]
 801d014:	4633      	mov	r3, r6
 801d016:	a802      	add	r0, sp, #8
 801d018:	6a0a      	ldr	r2, [r1, #32]
 801d01a:	6989      	ldr	r1, [r1, #24]
 801d01c:	f7ff fcf0 	bl	801ca00 <WM__InvalidateRect>
 801d020:	e7bb      	b.n	801cf9a <WM__InvalidateParent+0x5e>
 801d022:	bf00      	nop

0801d024 <WM__InvalidateRectEx>:
 801d024:	b901      	cbnz	r1, 801d028 <WM__InvalidateRectEx+0x4>
 801d026:	4770      	bx	lr
 801d028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d02a:	4605      	mov	r5, r0
 801d02c:	b087      	sub	sp, #28
 801d02e:	4608      	mov	r0, r1
 801d030:	4616      	mov	r6, r2
 801d032:	460c      	mov	r4, r1
 801d034:	f7f4 fc9c 	bl	8011970 <GUI_ALLOC_LockH>
 801d038:	6a87      	ldr	r7, [r0, #40]	; 0x28
 801d03a:	9000      	str	r0, [sp, #0]
 801d03c:	07ba      	lsls	r2, r7, #30
 801d03e:	d542      	bpl.n	801d0c6 <WM__InvalidateRectEx+0xa2>
 801d040:	4602      	mov	r2, r0
 801d042:	4629      	mov	r1, r5
 801d044:	a802      	add	r0, sp, #8
 801d046:	f7f9 ff7b 	bl	8016f40 <GUI__IntersectRects>
 801d04a:	2800      	cmp	r0, #0
 801d04c:	d03b      	beq.n	801d0c6 <WM__InvalidateRectEx+0xa2>
 801d04e:	f640 0301 	movw	r3, #2049	; 0x801
 801d052:	403b      	ands	r3, r7
 801d054:	2b01      	cmp	r3, #1
 801d056:	d03f      	beq.n	801d0d8 <WM__InvalidateRectEx+0xb4>
 801d058:	4620      	mov	r0, r4
 801d05a:	2220      	movs	r2, #32
 801d05c:	a902      	add	r1, sp, #8
 801d05e:	f7ff f845 	bl	801c0ec <_Invalidate1Abs>
 801d062:	9b00      	ldr	r3, [sp, #0]
 801d064:	69dc      	ldr	r4, [r3, #28]
 801d066:	b374      	cbz	r4, 801d0c6 <WM__InvalidateRectEx+0xa2>
 801d068:	42a6      	cmp	r6, r4
 801d06a:	d02c      	beq.n	801d0c6 <WM__InvalidateRectEx+0xa2>
 801d06c:	4620      	mov	r0, r4
 801d06e:	f7f4 fc7f 	bl	8011970 <GUI_ALLOC_LockH>
 801d072:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d074:	9001      	str	r0, [sp, #4]
 801d076:	079b      	lsls	r3, r3, #30
 801d078:	d52a      	bpl.n	801d0d0 <WM__InvalidateRectEx+0xac>
 801d07a:	4602      	mov	r2, r0
 801d07c:	a902      	add	r1, sp, #8
 801d07e:	a804      	add	r0, sp, #16
 801d080:	f7f9 ff5e 	bl	8016f40 <GUI__IntersectRects>
 801d084:	b320      	cbz	r0, 801d0d0 <WM__InvalidateRectEx+0xac>
 801d086:	a801      	add	r0, sp, #4
 801d088:	f7f4 fc86 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d08c:	2220      	movs	r2, #32
 801d08e:	a904      	add	r1, sp, #16
 801d090:	4620      	mov	r0, r4
 801d092:	f7ff f82b 	bl	801c0ec <_Invalidate1Abs>
 801d096:	4620      	mov	r0, r4
 801d098:	f000 feaa 	bl	801ddf0 <WM_GetFirstChild>
 801d09c:	4605      	mov	r5, r0
 801d09e:	b150      	cbz	r0, 801d0b6 <WM__InvalidateRectEx+0x92>
 801d0a0:	4628      	mov	r0, r5
 801d0a2:	2220      	movs	r2, #32
 801d0a4:	a904      	add	r1, sp, #16
 801d0a6:	f7ff faf9 	bl	801c69c <WM_InvalidateWindowAndDescsEx>
 801d0aa:	4628      	mov	r0, r5
 801d0ac:	f7f4 fc56 	bl	801195c <GUI_ALLOC_h2p>
 801d0b0:	6a05      	ldr	r5, [r0, #32]
 801d0b2:	2d00      	cmp	r5, #0
 801d0b4:	d1f4      	bne.n	801d0a0 <WM__InvalidateRectEx+0x7c>
 801d0b6:	4620      	mov	r0, r4
 801d0b8:	f7f4 fc50 	bl	801195c <GUI_ALLOC_h2p>
 801d0bc:	6a04      	ldr	r4, [r0, #32]
 801d0be:	42a6      	cmp	r6, r4
 801d0c0:	d001      	beq.n	801d0c6 <WM__InvalidateRectEx+0xa2>
 801d0c2:	2c00      	cmp	r4, #0
 801d0c4:	d1d2      	bne.n	801d06c <WM__InvalidateRectEx+0x48>
 801d0c6:	4668      	mov	r0, sp
 801d0c8:	f7f4 fc66 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d0cc:	b007      	add	sp, #28
 801d0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0d0:	a801      	add	r0, sp, #4
 801d0d2:	f7f4 fc61 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d0d6:	e7ee      	b.n	801d0b6 <WM__InvalidateRectEx+0x92>
 801d0d8:	9900      	ldr	r1, [sp, #0]
 801d0da:	2320      	movs	r3, #32
 801d0dc:	a802      	add	r0, sp, #8
 801d0de:	6a0a      	ldr	r2, [r1, #32]
 801d0e0:	6989      	ldr	r1, [r1, #24]
 801d0e2:	f7ff fc8d 	bl	801ca00 <WM__InvalidateRect>
 801d0e6:	e7bc      	b.n	801d062 <WM__InvalidateRectEx+0x3e>

0801d0e8 <WM__SendMsgNoData>:
 801d0e8:	b500      	push	{lr}
 801d0ea:	b085      	sub	sp, #20
 801d0ec:	ab04      	add	r3, sp, #16
 801d0ee:	9001      	str	r0, [sp, #4]
 801d0f0:	f843 1d10 	str.w	r1, [r3, #-16]!
 801d0f4:	4619      	mov	r1, r3
 801d0f6:	f001 fc51 	bl	801e99c <WM__SendMessage>
 801d0fa:	b005      	add	sp, #20
 801d0fc:	f85d fb04 	ldr.w	pc, [sp], #4

0801d100 <WM__GetClientRectWin>:
 801d100:	2300      	movs	r3, #0
 801d102:	8882      	ldrh	r2, [r0, #4]
 801d104:	b430      	push	{r4, r5}
 801d106:	800b      	strh	r3, [r1, #0]
 801d108:	804b      	strh	r3, [r1, #2]
 801d10a:	8805      	ldrh	r5, [r0, #0]
 801d10c:	8844      	ldrh	r4, [r0, #2]
 801d10e:	88c3      	ldrh	r3, [r0, #6]
 801d110:	1b52      	subs	r2, r2, r5
 801d112:	1b1b      	subs	r3, r3, r4
 801d114:	808a      	strh	r2, [r1, #4]
 801d116:	80cb      	strh	r3, [r1, #6]
 801d118:	bc30      	pop	{r4, r5}
 801d11a:	4770      	bx	lr

0801d11c <WM_CreateWindowAsChild>:
 801d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d120:	b087      	sub	sp, #28
 801d122:	461e      	mov	r6, r3
 801d124:	4681      	mov	r9, r0
 801d126:	468a      	mov	sl, r1
 801d128:	4615      	mov	r5, r2
 801d12a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801d12e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d130:	f7f9 f898 	bl	8016264 <GUI_Lock>
 801d134:	4b68      	ldr	r3, [pc, #416]	; (801d2d8 <WM_CreateWindowAsChild+0x1bc>)
 801d136:	681f      	ldr	r7, [r3, #0]
 801d138:	f1b8 0f00 	cmp.w	r8, #0
 801d13c:	d10f      	bne.n	801d15e <WM_CreateWindowAsChild+0x42>
 801d13e:	4b67      	ldr	r3, [pc, #412]	; (801d2dc <WM_CreateWindowAsChild+0x1c0>)
 801d140:	881b      	ldrh	r3, [r3, #0]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d16c      	bne.n	801d220 <WM_CreateWindowAsChild+0x104>
 801d146:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801d14a:	f7f4 fdc9 	bl	8011ce0 <GUI_ALLOC_AllocZero>
 801d14e:	4604      	mov	r4, r0
 801d150:	bb30      	cbnz	r0, 801d1a0 <WM_CreateWindowAsChild+0x84>
 801d152:	f7f9 f87d 	bl	8016250 <GUI_Unlock>
 801d156:	4620      	mov	r0, r4
 801d158:	b007      	add	sp, #28
 801d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d15e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d162:	d068      	beq.n	801d236 <WM_CreateWindowAsChild+0x11a>
 801d164:	4640      	mov	r0, r8
 801d166:	f7f4 fc03 	bl	8011970 <GUI_ALLOC_LockH>
 801d16a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d16e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d172:	4491      	add	r9, r2
 801d174:	9001      	str	r0, [sp, #4]
 801d176:	449a      	add	sl, r3
 801d178:	b91d      	cbnz	r5, 801d182 <WM_CreateWindowAsChild+0x66>
 801d17a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801d17e:	1aad      	subs	r5, r5, r2
 801d180:	3501      	adds	r5, #1
 801d182:	b91e      	cbnz	r6, 801d18c <WM_CreateWindowAsChild+0x70>
 801d184:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 801d188:	1af6      	subs	r6, r6, r3
 801d18a:	3601      	adds	r6, #1
 801d18c:	a801      	add	r0, sp, #4
 801d18e:	f7f4 fc03 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d192:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801d196:	f7f4 fda3 	bl	8011ce0 <GUI_ALLOC_AllocZero>
 801d19a:	4604      	mov	r4, r0
 801d19c:	2800      	cmp	r0, #0
 801d19e:	d0d8      	beq.n	801d152 <WM_CreateWindowAsChild+0x36>
 801d1a0:	4a4e      	ldr	r2, [pc, #312]	; (801d2dc <WM_CreateWindowAsChild+0x1c0>)
 801d1a2:	444d      	add	r5, r9
 801d1a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1a6:	4456      	add	r6, sl
 801d1a8:	f10d 0b18 	add.w	fp, sp, #24
 801d1ac:	3d01      	subs	r5, #1
 801d1ae:	431f      	orrs	r7, r3
 801d1b0:	8813      	ldrh	r3, [r2, #0]
 801d1b2:	3e01      	subs	r6, #1
 801d1b4:	3301      	adds	r3, #1
 801d1b6:	8013      	strh	r3, [r2, #0]
 801d1b8:	f7f4 fbda 	bl	8011970 <GUI_ALLOC_LockH>
 801d1bc:	4a48      	ldr	r2, [pc, #288]	; (801d2e0 <WM_CreateWindowAsChild+0x1c4>)
 801d1be:	4603      	mov	r3, r0
 801d1c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801d1c2:	403a      	ands	r2, r7
 801d1c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d1c6:	f84b 3d18 	str.w	r3, [fp, #-24]!
 801d1ca:	430a      	orrs	r2, r1
 801d1cc:	6118      	str	r0, [r3, #16]
 801d1ce:	809d      	strh	r5, [r3, #4]
 801d1d0:	4658      	mov	r0, fp
 801d1d2:	80de      	strh	r6, [r3, #6]
 801d1d4:	f8a3 9000 	strh.w	r9, [r3]
 801d1d8:	f8a3 a002 	strh.w	sl, [r3, #2]
 801d1dc:	629a      	str	r2, [r3, #40]	; 0x28
 801d1de:	f7f4 fbdb 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d1e2:	4b40      	ldr	r3, [pc, #256]	; (801d2e4 <WM_CreateWindowAsChild+0x1c8>)
 801d1e4:	6818      	ldr	r0, [r3, #0]
 801d1e6:	2800      	cmp	r0, #0
 801d1e8:	d157      	bne.n	801d29a <WM_CreateWindowAsChild+0x17e>
 801d1ea:	601c      	str	r4, [r3, #0]
 801d1ec:	4641      	mov	r1, r8
 801d1ee:	4620      	mov	r0, r4
 801d1f0:	f7ff f882 	bl	801c2f8 <WM__InsertWindowIntoList>
 801d1f4:	06ba      	lsls	r2, r7, #26
 801d1f6:	d42c      	bmi.n	801d252 <WM_CreateWindowAsChild+0x136>
 801d1f8:	07f8      	lsls	r0, r7, #31
 801d1fa:	d41f      	bmi.n	801d23c <WM_CreateWindowAsChild+0x120>
 801d1fc:	0679      	lsls	r1, r7, #25
 801d1fe:	d424      	bmi.n	801d24a <WM_CreateWindowAsChild+0x12e>
 801d200:	07bb      	lsls	r3, r7, #30
 801d202:	d458      	bmi.n	801d2b6 <WM_CreateWindowAsChild+0x19a>
 801d204:	2301      	movs	r3, #1
 801d206:	a906      	add	r1, sp, #24
 801d208:	4620      	mov	r0, r4
 801d20a:	9403      	str	r4, [sp, #12]
 801d20c:	f841 3d10 	str.w	r3, [r1, #-16]!
 801d210:	f001 fbc4 	bl	801e99c <WM__SendMessage>
 801d214:	f7f9 f81c 	bl	8016250 <GUI_Unlock>
 801d218:	4620      	mov	r0, r4
 801d21a:	b007      	add	sp, #28
 801d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d220:	4a31      	ldr	r2, [pc, #196]	; (801d2e8 <WM_CreateWindowAsChild+0x1cc>)
 801d222:	4b32      	ldr	r3, [pc, #200]	; (801d2ec <WM_CreateWindowAsChild+0x1d0>)
 801d224:	6812      	ldr	r2, [r2, #0]
 801d226:	7c52      	ldrb	r2, [r2, #17]
 801d228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d22c:	1c5a      	adds	r2, r3, #1
 801d22e:	2a01      	cmp	r2, #1
 801d230:	d989      	bls.n	801d146 <WM_CreateWindowAsChild+0x2a>
 801d232:	4698      	mov	r8, r3
 801d234:	e796      	b.n	801d164 <WM_CreateWindowAsChild+0x48>
 801d236:	f04f 0800 	mov.w	r8, #0
 801d23a:	e784      	b.n	801d146 <WM_CreateWindowAsChild+0x2a>
 801d23c:	4a2c      	ldr	r2, [pc, #176]	; (801d2f0 <WM_CreateWindowAsChild+0x1d4>)
 801d23e:	0679      	lsls	r1, r7, #25
 801d240:	6813      	ldr	r3, [r2, #0]
 801d242:	f103 0301 	add.w	r3, r3, #1
 801d246:	6013      	str	r3, [r2, #0]
 801d248:	d5da      	bpl.n	801d200 <WM_CreateWindowAsChild+0xe4>
 801d24a:	4620      	mov	r0, r4
 801d24c:	f000 fd7c 	bl	801dd48 <WM_BringToBottom>
 801d250:	e7d6      	b.n	801d200 <WM_CreateWindowAsChild+0xe4>
 801d252:	4e25      	ldr	r6, [pc, #148]	; (801d2e8 <WM_CreateWindowAsChild+0x1cc>)
 801d254:	f7f9 f806 	bl	8016264 <GUI_Lock>
 801d258:	4625      	mov	r5, r4
 801d25a:	6833      	ldr	r3, [r6, #0]
 801d25c:	649c      	str	r4, [r3, #72]	; 0x48
 801d25e:	e000      	b.n	801d262 <WM_CreateWindowAsChild+0x146>
 801d260:	4605      	mov	r5, r0
 801d262:	4628      	mov	r0, r5
 801d264:	f7f4 fb7a 	bl	801195c <GUI_ALLOC_h2p>
 801d268:	6980      	ldr	r0, [r0, #24]
 801d26a:	2800      	cmp	r0, #0
 801d26c:	d1f8      	bne.n	801d260 <WM_CreateWindowAsChild+0x144>
 801d26e:	4b1f      	ldr	r3, [pc, #124]	; (801d2ec <WM_CreateWindowAsChild+0x1d0>)
 801d270:	681a      	ldr	r2, [r3, #0]
 801d272:	4295      	cmp	r5, r2
 801d274:	d01c      	beq.n	801d2b0 <WM_CreateWindowAsChild+0x194>
 801d276:	685b      	ldr	r3, [r3, #4]
 801d278:	429d      	cmp	r5, r3
 801d27a:	d018      	beq.n	801d2ae <WM_CreateWindowAsChild+0x192>
 801d27c:	f7fa fbe8 	bl	8017a50 <LCD_SetClipRectMax>
 801d280:	4620      	mov	r0, r4
 801d282:	f7f4 fb6b 	bl	801195c <GUI_ALLOC_h2p>
 801d286:	6833      	ldr	r3, [r6, #0]
 801d288:	f9b0 1000 	ldrsh.w	r1, [r0]
 801d28c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d290:	64d9      	str	r1, [r3, #76]	; 0x4c
 801d292:	651a      	str	r2, [r3, #80]	; 0x50
 801d294:	f7f8 ffdc 	bl	8016250 <GUI_Unlock>
 801d298:	e7ae      	b.n	801d1f8 <WM_CreateWindowAsChild+0xdc>
 801d29a:	f7f4 fb5f 	bl	801195c <GUI_ALLOC_h2p>
 801d29e:	4605      	mov	r5, r0
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	f7f4 fb5b 	bl	801195c <GUI_ALLOC_h2p>
 801d2a6:	696b      	ldr	r3, [r5, #20]
 801d2a8:	6143      	str	r3, [r0, #20]
 801d2aa:	616c      	str	r4, [r5, #20]
 801d2ac:	e79e      	b.n	801d1ec <WM_CreateWindowAsChild+0xd0>
 801d2ae:	2001      	movs	r0, #1
 801d2b0:	f7f7 fdcc 	bl	8014e4c <GUI_SelectLayer>
 801d2b4:	e7e2      	b.n	801d27c <WM_CreateWindowAsChild+0x160>
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	f7f4 fb5a 	bl	8011970 <GUI_ALLOC_LockH>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	4658      	mov	r0, fp
 801d2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d2c2:	9300      	str	r3, [sp, #0]
 801d2c4:	f042 0202 	orr.w	r2, r2, #2
 801d2c8:	629a      	str	r2, [r3, #40]	; 0x28
 801d2ca:	f7f4 fb65 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d2ce:	2100      	movs	r1, #0
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f7ff fc01 	bl	801cad8 <WM_InvalidateRect.part.2>
 801d2d6:	e795      	b.n	801d204 <WM_CreateWindowAsChild+0xe8>
 801d2d8:	2002b024 	.word	0x2002b024
 801d2dc:	2002afec 	.word	0x2002afec
 801d2e0:	003f3f9f 	.word	0x003f3f9f
 801d2e4:	2002b010 	.word	0x2002b010
 801d2e8:	20000018 	.word	0x20000018
 801d2ec:	2002aff4 	.word	0x2002aff4
 801d2f0:	2002b044 	.word	0x2002b044

0801d2f4 <WM__GetNextIVR>:
 801d2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2f8:	f8df 8248 	ldr.w	r8, [pc, #584]	; 801d544 <WM__GetNextIVR+0x250>
 801d2fc:	b087      	sub	sp, #28
 801d2fe:	f8d8 3000 	ldr.w	r3, [r8]
 801d302:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801d306:	b130      	cbz	r0, 801d316 <WM__GetNextIVR+0x22>
 801d308:	4e8d      	ldr	r6, [pc, #564]	; (801d540 <WM__GetNextIVR+0x24c>)
 801d30a:	6a33      	ldr	r3, [r6, #32]
 801d30c:	2b01      	cmp	r3, #1
 801d30e:	dd05      	ble.n	801d31c <WM__GetNextIVR+0x28>
 801d310:	3b01      	subs	r3, #1
 801d312:	2000      	movs	r0, #0
 801d314:	6233      	str	r3, [r6, #32]
 801d316:	b007      	add	sp, #28
 801d318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d31c:	69f3      	ldr	r3, [r6, #28]
 801d31e:	f106 0714 	add.w	r7, r6, #20
 801d322:	ad02      	add	r5, sp, #8
 801d324:	3301      	adds	r3, #1
 801d326:	e897 0003 	ldmia.w	r7, {r0, r1}
 801d32a:	61f3      	str	r3, [r6, #28]
 801d32c:	e885 0003 	stmia.w	r5, {r0, r1}
 801d330:	b96b      	cbnz	r3, 801d34e <WM__GetNextIVR+0x5a>
 801d332:	68f2      	ldr	r2, [r6, #12]
 801d334:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 801d338:	9202      	str	r2, [sp, #8]
 801d33a:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 801d33e:	4c80      	ldr	r4, [pc, #512]	; (801d540 <WM__GetNextIVR+0x24c>)
 801d340:	429a      	cmp	r2, r3
 801d342:	da1a      	bge.n	801d37a <WM__GetNextIVR+0x86>
 801d344:	6a33      	ldr	r3, [r6, #32]
 801d346:	2000      	movs	r0, #0
 801d348:	3b01      	subs	r3, #1
 801d34a:	6233      	str	r3, [r6, #32]
 801d34c:	e7e3      	b.n	801d316 <WM__GetNextIVR+0x22>
 801d34e:	8b32      	ldrh	r2, [r6, #24]
 801d350:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 801d354:	3201      	adds	r2, #1
 801d356:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 801d35a:	b212      	sxth	r2, r2
 801d35c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d360:	4291      	cmp	r1, r2
 801d362:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d366:	dae8      	bge.n	801d33a <WM__GetNextIVR+0x46>
 801d368:	8b73      	ldrh	r3, [r6, #26]
 801d36a:	89b2      	ldrh	r2, [r6, #12]
 801d36c:	3301      	adds	r3, #1
 801d36e:	f8ad 2008 	strh.w	r2, [sp, #8]
 801d372:	b21b      	sxth	r3, r3
 801d374:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d378:	e7df      	b.n	801d33a <WM__GetNextIVR+0x46>
 801d37a:	f8d8 3000 	ldr.w	r3, [r8]
 801d37e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 801d544 <WM__GetNextIVR+0x250>
 801d382:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d384:	f7f4 faf4 	bl	8011970 <GUI_ALLOC_LockH>
 801d388:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d38c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801d390:	4602      	mov	r2, r0
 801d392:	9000      	str	r0, [sp, #0]
 801d394:	4299      	cmp	r1, r3
 801d396:	f000 80bb 	beq.w	801d510 <WM__GetNextIVR+0x21c>
 801d39a:	f8d8 2000 	ldr.w	r2, [r8]
 801d39e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d3a2:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801d3a4:	b910      	cbnz	r0, 801d3ac <WM__GetNextIVR+0xb8>
 801d3a6:	e00d      	b.n	801d3c4 <WM__GetNextIVR+0xd0>
 801d3a8:	69a0      	ldr	r0, [r4, #24]
 801d3aa:	b158      	cbz	r0, 801d3c4 <WM__GetNextIVR+0xd0>
 801d3ac:	f7f4 fad6 	bl	801195c <GUI_ALLOC_h2p>
 801d3b0:	4629      	mov	r1, r5
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	6a00      	ldr	r0, [r0, #32]
 801d3b6:	f7fe fd77 	bl	801bea8 <_Findx0.constprop.10>
 801d3ba:	2800      	cmp	r0, #0
 801d3bc:	d0f4      	beq.n	801d3a8 <WM__GetNextIVR+0xb4>
 801d3be:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d3c2:	e7ea      	b.n	801d39a <WM__GetNextIVR+0xa6>
 801d3c4:	9b00      	ldr	r3, [sp, #0]
 801d3c6:	4629      	mov	r1, r5
 801d3c8:	69d8      	ldr	r0, [r3, #28]
 801d3ca:	f7fe fd6d 	bl	801bea8 <_Findx0.constprop.10>
 801d3ce:	2800      	cmp	r0, #0
 801d3d0:	d1f5      	bne.n	801d3be <WM__GetNextIVR+0xca>
 801d3d2:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 801d3d6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801d3da:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d3de:	429a      	cmp	r2, r3
 801d3e0:	f300 808e 	bgt.w	801d500 <WM__GetNextIVR+0x20c>
 801d3e4:	f8d8 3000 	ldr.w	r3, [r8]
 801d3e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d3ea:	2800      	cmp	r0, #0
 801d3ec:	d02f      	beq.n	801d44e <WM__GetNextIVR+0x15a>
 801d3ee:	f10d 0810 	add.w	r8, sp, #16
 801d3f2:	f7f4 fab3 	bl	801195c <GUI_ALLOC_h2p>
 801d3f6:	6a04      	ldr	r4, [r0, #32]
 801d3f8:	4681      	mov	r9, r0
 801d3fa:	b96c      	cbnz	r4, 801d418 <WM__GetNextIVR+0x124>
 801d3fc:	e023      	b.n	801d446 <WM__GetNextIVR+0x152>
 801d3fe:	07e1      	lsls	r1, r4, #31
 801d400:	d44c      	bmi.n	801d49c <WM__GetNextIVR+0x1a8>
 801d402:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d406:	9801      	ldr	r0, [sp, #4]
 801d408:	3b01      	subs	r3, #1
 801d40a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d40e:	6a04      	ldr	r4, [r0, #32]
 801d410:	a801      	add	r0, sp, #4
 801d412:	f7f4 fac1 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d416:	b1b4      	cbz	r4, 801d446 <WM__GetNextIVR+0x152>
 801d418:	4620      	mov	r0, r4
 801d41a:	f7f4 faa9 	bl	8011970 <GUI_ALLOC_LockH>
 801d41e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801d420:	9001      	str	r0, [sp, #4]
 801d422:	07a3      	lsls	r3, r4, #30
 801d424:	d5f3      	bpl.n	801d40e <WM__GetNextIVR+0x11a>
 801d426:	c803      	ldmia	r0, {r0, r1}
 801d428:	e888 0003 	stmia.w	r8, {r0, r1}
 801d42c:	4641      	mov	r1, r8
 801d42e:	4628      	mov	r0, r5
 801d430:	f7f5 f85e 	bl	80124f0 <GUI_RectsIntersect>
 801d434:	2800      	cmp	r0, #0
 801d436:	d1e2      	bne.n	801d3fe <WM__GetNextIVR+0x10a>
 801d438:	9801      	ldr	r0, [sp, #4]
 801d43a:	6a04      	ldr	r4, [r0, #32]
 801d43c:	a801      	add	r0, sp, #4
 801d43e:	f7f4 faab 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d442:	2c00      	cmp	r4, #0
 801d444:	d1e8      	bne.n	801d418 <WM__GetNextIVR+0x124>
 801d446:	f8d9 0018 	ldr.w	r0, [r9, #24]
 801d44a:	2800      	cmp	r0, #0
 801d44c:	d1d1      	bne.n	801d3f2 <WM__GetNextIVR+0xfe>
 801d44e:	9b00      	ldr	r3, [sp, #0]
 801d450:	69dc      	ldr	r4, [r3, #28]
 801d452:	2c00      	cmp	r4, #0
 801d454:	d043      	beq.n	801d4de <WM__GetNextIVR+0x1ea>
 801d456:	f10d 0810 	add.w	r8, sp, #16
 801d45a:	e00d      	b.n	801d478 <WM__GetNextIVR+0x184>
 801d45c:	07e3      	lsls	r3, r4, #31
 801d45e:	d42e      	bmi.n	801d4be <WM__GetNextIVR+0x1ca>
 801d460:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d464:	9801      	ldr	r0, [sp, #4]
 801d466:	3b01      	subs	r3, #1
 801d468:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d46c:	6a04      	ldr	r4, [r0, #32]
 801d46e:	a801      	add	r0, sp, #4
 801d470:	f7f4 fa92 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d474:	2c00      	cmp	r4, #0
 801d476:	d032      	beq.n	801d4de <WM__GetNextIVR+0x1ea>
 801d478:	4620      	mov	r0, r4
 801d47a:	f7f4 fa79 	bl	8011970 <GUI_ALLOC_LockH>
 801d47e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801d480:	9001      	str	r0, [sp, #4]
 801d482:	07a2      	lsls	r2, r4, #30
 801d484:	d5f2      	bpl.n	801d46c <WM__GetNextIVR+0x178>
 801d486:	c803      	ldmia	r0, {r0, r1}
 801d488:	e888 0003 	stmia.w	r8, {r0, r1}
 801d48c:	4641      	mov	r1, r8
 801d48e:	4628      	mov	r0, r5
 801d490:	f7f5 f82e 	bl	80124f0 <GUI_RectsIntersect>
 801d494:	2800      	cmp	r0, #0
 801d496:	d1e1      	bne.n	801d45c <WM__GetNextIVR+0x168>
 801d498:	9801      	ldr	r0, [sp, #4]
 801d49a:	e7e7      	b.n	801d46c <WM__GetNextIVR+0x178>
 801d49c:	9801      	ldr	r0, [sp, #4]
 801d49e:	69c4      	ldr	r4, [r0, #28]
 801d4a0:	2c00      	cmp	r4, #0
 801d4a2:	d0b4      	beq.n	801d40e <WM__GetNextIVR+0x11a>
 801d4a4:	4620      	mov	r0, r4
 801d4a6:	4642      	mov	r2, r8
 801d4a8:	4629      	mov	r1, r5
 801d4aa:	f7fe fbe9 	bl	801bc80 <_Findx1>
 801d4ae:	4620      	mov	r0, r4
 801d4b0:	f7f4 fa54 	bl	801195c <GUI_ALLOC_h2p>
 801d4b4:	6a04      	ldr	r4, [r0, #32]
 801d4b6:	2c00      	cmp	r4, #0
 801d4b8:	d1f4      	bne.n	801d4a4 <WM__GetNextIVR+0x1b0>
 801d4ba:	9801      	ldr	r0, [sp, #4]
 801d4bc:	e7bd      	b.n	801d43a <WM__GetNextIVR+0x146>
 801d4be:	9801      	ldr	r0, [sp, #4]
 801d4c0:	69c4      	ldr	r4, [r0, #28]
 801d4c2:	2c00      	cmp	r4, #0
 801d4c4:	d0d2      	beq.n	801d46c <WM__GetNextIVR+0x178>
 801d4c6:	4620      	mov	r0, r4
 801d4c8:	4642      	mov	r2, r8
 801d4ca:	4629      	mov	r1, r5
 801d4cc:	f7fe fbd8 	bl	801bc80 <_Findx1>
 801d4d0:	4620      	mov	r0, r4
 801d4d2:	f7f4 fa43 	bl	801195c <GUI_ALLOC_h2p>
 801d4d6:	6a04      	ldr	r4, [r0, #32]
 801d4d8:	2c00      	cmp	r4, #0
 801d4da:	d1f4      	bne.n	801d4c6 <WM__GetNextIVR+0x1d2>
 801d4dc:	e7dc      	b.n	801d498 <WM__GetNextIVR+0x1a4>
 801d4de:	4668      	mov	r0, sp
 801d4e0:	f7f4 fa5a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d4e4:	69f2      	ldr	r2, [r6, #28]
 801d4e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 801d4ea:	429a      	cmp	r2, r3
 801d4ec:	f73f af2a 	bgt.w	801d344 <WM__GetNextIVR+0x50>
 801d4f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d4f4:	e887 0003 	stmia.w	r7, {r0, r1}
 801d4f8:	f7fe fe6a 	bl	801c1d0 <WM__ActivateClipRect>
 801d4fc:	2001      	movs	r0, #1
 801d4fe:	e70a      	b.n	801d316 <WM__GetNextIVR+0x22>
 801d500:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d504:	e887 0003 	stmia.w	r7, {r0, r1}
 801d508:	4668      	mov	r0, sp
 801d50a:	f7f4 fa45 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d50e:	e72b      	b.n	801d368 <WM__GetNextIVR+0x74>
 801d510:	f8d9 1000 	ldr.w	r1, [r9]
 801d514:	6923      	ldr	r3, [r4, #16]
 801d516:	6c88      	ldr	r0, [r1, #72]	; 0x48
 801d518:	9303      	str	r3, [sp, #12]
 801d51a:	b150      	cbz	r0, 801d532 <WM__GetNextIVR+0x23e>
 801d51c:	f7f4 fa1e 	bl	801195c <GUI_ALLOC_h2p>
 801d520:	4604      	mov	r4, r0
 801d522:	4629      	mov	r1, r5
 801d524:	6a00      	ldr	r0, [r0, #32]
 801d526:	f7fe fd05 	bl	801bf34 <_Findy1.constprop.11>
 801d52a:	69a0      	ldr	r0, [r4, #24]
 801d52c:	2800      	cmp	r0, #0
 801d52e:	d1f5      	bne.n	801d51c <WM__GetNextIVR+0x228>
 801d530:	9a00      	ldr	r2, [sp, #0]
 801d532:	69d0      	ldr	r0, [r2, #28]
 801d534:	4629      	mov	r1, r5
 801d536:	f7fe fcfd 	bl	801bf34 <_Findy1.constprop.11>
 801d53a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d53e:	e72c      	b.n	801d39a <WM__GetNextIVR+0xa6>
 801d540:	200003c8 	.word	0x200003c8
 801d544:	20000018 	.word	0x20000018

0801d548 <WM__InitIVRSearch>:
 801d548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d54c:	4c5e      	ldr	r4, [pc, #376]	; (801d6c8 <WM__InitIVRSearch+0x180>)
 801d54e:	b089      	sub	sp, #36	; 0x24
 801d550:	6822      	ldr	r2, [r4, #0]
 801d552:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 801d556:	b14b      	cbz	r3, 801d56c <WM__InitIVRSearch+0x24>
 801d558:	4d5c      	ldr	r5, [pc, #368]	; (801d6cc <WM__InitIVRSearch+0x184>)
 801d55a:	6a2b      	ldr	r3, [r5, #32]
 801d55c:	3301      	adds	r3, #1
 801d55e:	2b01      	cmp	r3, #1
 801d560:	622b      	str	r3, [r5, #32]
 801d562:	dd09      	ble.n	801d578 <WM__InitIVRSearch+0x30>
 801d564:	2001      	movs	r0, #1
 801d566:	b009      	add	sp, #36	; 0x24
 801d568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d56c:	f7fe fe30 	bl	801c1d0 <WM__ActivateClipRect>
 801d570:	2001      	movs	r0, #1
 801d572:	b009      	add	sp, #36	; 0x24
 801d574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d578:	4607      	mov	r7, r0
 801d57a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 801d57c:	f7f4 f9f8 	bl	8011970 <GUI_ALLOC_LockH>
 801d580:	4b53      	ldr	r3, [pc, #332]	; (801d6d0 <WM__InitIVRSearch+0x188>)
 801d582:	f04f 32ff 	mov.w	r2, #4294967295
 801d586:	9001      	str	r0, [sp, #4]
 801d588:	781b      	ldrb	r3, [r3, #0]
 801d58a:	61ea      	str	r2, [r5, #28]
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d061      	beq.n	801d654 <WM__InitIVRSearch+0x10c>
 801d590:	3008      	adds	r0, #8
 801d592:	ae04      	add	r6, sp, #16
 801d594:	c803      	ldmia	r0, {r0, r1}
 801d596:	e886 0003 	stmia.w	r6, {r0, r1}
 801d59a:	b11f      	cbz	r7, 801d5a4 <WM__InitIVRSearch+0x5c>
 801d59c:	4639      	mov	r1, r7
 801d59e:	4630      	mov	r0, r6
 801d5a0:	f7f9 fcb0 	bl	8016f04 <GUI__IntersectRect>
 801d5a4:	6823      	ldr	r3, [r4, #0]
 801d5a6:	4f4b      	ldr	r7, [pc, #300]	; (801d6d4 <WM__InitIVRSearch+0x18c>)
 801d5a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d5aa:	2a00      	cmp	r2, #0
 801d5ac:	f000 8087 	beq.w	801d6be <WM__InitIVRSearch+0x176>
 801d5b0:	6810      	ldr	r0, [r2, #0]
 801d5b2:	ab06      	add	r3, sp, #24
 801d5b4:	6851      	ldr	r1, [r2, #4]
 801d5b6:	f10d 0808 	add.w	r8, sp, #8
 801d5ba:	683a      	ldr	r2, [r7, #0]
 801d5bc:	c303      	stmia	r3!, {r0, r1}
 801d5be:	9b01      	ldr	r3, [sp, #4]
 801d5c0:	9302      	str	r3, [sp, #8]
 801d5c2:	2a00      	cmp	r2, #0
 801d5c4:	d160      	bne.n	801d688 <WM__InitIVRSearch+0x140>
 801d5c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d5ca:	a806      	add	r0, sp, #24
 801d5cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d5d0:	f7f4 fec2 	bl	8012358 <GUI_MoveRect>
 801d5d4:	4630      	mov	r0, r6
 801d5d6:	a906      	add	r1, sp, #24
 801d5d8:	f7f9 fc94 	bl	8016f04 <GUI__IntersectRect>
 801d5dc:	4640      	mov	r0, r8
 801d5de:	f7f4 f9db 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d5e2:	f8d7 9000 	ldr.w	r9, [r7]
 801d5e6:	f10d 080c 	add.w	r8, sp, #12
 801d5ea:	f1b9 0f00 	cmp.w	r9, #0
 801d5ee:	d126      	bne.n	801d63e <WM__InitIVRSearch+0xf6>
 801d5f0:	6823      	ldr	r3, [r4, #0]
 801d5f2:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 801d5f4:	e008      	b.n	801d608 <WM__InitIVRSearch+0xc0>
 801d5f6:	f7f9 fc85 	bl	8016f04 <GUI__IntersectRect>
 801d5fa:	9b03      	ldr	r3, [sp, #12]
 801d5fc:	4640      	mov	r0, r8
 801d5fe:	699c      	ldr	r4, [r3, #24]
 801d600:	b38c      	cbz	r4, 801d666 <WM__InitIVRSearch+0x11e>
 801d602:	4627      	mov	r7, r4
 801d604:	f7f4 f9c8 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d608:	4638      	mov	r0, r7
 801d60a:	f7f4 f9b1 	bl	8011970 <GUI_ALLOC_LockH>
 801d60e:	4603      	mov	r3, r0
 801d610:	4630      	mov	r0, r6
 801d612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d614:	4619      	mov	r1, r3
 801d616:	9303      	str	r3, [sp, #12]
 801d618:	0793      	lsls	r3, r2, #30
 801d61a:	d4ec      	bmi.n	801d5f6 <WM__InitIVRSearch+0xae>
 801d61c:	4640      	mov	r0, r8
 801d61e:	f7f4 f9bb 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d622:	6a2b      	ldr	r3, [r5, #32]
 801d624:	2000      	movs	r0, #0
 801d626:	3b01      	subs	r3, #1
 801d628:	622b      	str	r3, [r5, #32]
 801d62a:	e79c      	b.n	801d566 <WM__InitIVRSearch+0x1e>
 801d62c:	f7f9 fc6a 	bl	8016f04 <GUI__IntersectRect>
 801d630:	9b03      	ldr	r3, [sp, #12]
 801d632:	4640      	mov	r0, r8
 801d634:	699f      	ldr	r7, [r3, #24]
 801d636:	b387      	cbz	r7, 801d69a <WM__InitIVRSearch+0x152>
 801d638:	46b9      	mov	r9, r7
 801d63a:	f7f4 f9ad 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d63e:	4648      	mov	r0, r9
 801d640:	f7f4 f996 	bl	8011970 <GUI_ALLOC_LockH>
 801d644:	4603      	mov	r3, r0
 801d646:	4630      	mov	r0, r6
 801d648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d64a:	4619      	mov	r1, r3
 801d64c:	9303      	str	r3, [sp, #12]
 801d64e:	0792      	lsls	r2, r2, #30
 801d650:	d5e4      	bpl.n	801d61c <WM__InitIVRSearch+0xd4>
 801d652:	e7eb      	b.n	801d62c <WM__InitIVRSearch+0xe4>
 801d654:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d656:	f013 0602 	ands.w	r6, r3, #2
 801d65a:	d028      	beq.n	801d6ae <WM__InitIVRSearch+0x166>
 801d65c:	ae04      	add	r6, sp, #16
 801d65e:	c803      	ldmia	r0, {r0, r1}
 801d660:	e886 0003 	stmia.w	r6, {r0, r1}
 801d664:	e799      	b.n	801d59a <WM__InitIVRSearch+0x52>
 801d666:	f7f4 f997 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d66a:	4b1b      	ldr	r3, [pc, #108]	; (801d6d8 <WM__InitIVRSearch+0x190>)
 801d66c:	681a      	ldr	r2, [r3, #0]
 801d66e:	4297      	cmp	r7, r2
 801d670:	d002      	beq.n	801d678 <WM__InitIVRSearch+0x130>
 801d672:	685b      	ldr	r3, [r3, #4]
 801d674:	429f      	cmp	r7, r3
 801d676:	d1d4      	bne.n	801d622 <WM__InitIVRSearch+0xda>
 801d678:	4b18      	ldr	r3, [pc, #96]	; (801d6dc <WM__InitIVRSearch+0x194>)
 801d67a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d67e:	e883 0003 	stmia.w	r3, {r0, r1}
 801d682:	f7ff fe37 	bl	801d2f4 <WM__GetNextIVR>
 801d686:	e76e      	b.n	801d566 <WM__InitIVRSearch+0x1e>
 801d688:	4640      	mov	r0, r8
 801d68a:	f7f4 f985 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d68e:	6838      	ldr	r0, [r7, #0]
 801d690:	f7f4 f96e 	bl	8011970 <GUI_ALLOC_LockH>
 801d694:	4603      	mov	r3, r0
 801d696:	9002      	str	r0, [sp, #8]
 801d698:	e795      	b.n	801d5c6 <WM__InitIVRSearch+0x7e>
 801d69a:	f7f4 f97d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d69e:	4b0e      	ldr	r3, [pc, #56]	; (801d6d8 <WM__InitIVRSearch+0x190>)
 801d6a0:	681a      	ldr	r2, [r3, #0]
 801d6a2:	4591      	cmp	r9, r2
 801d6a4:	d0a4      	beq.n	801d5f0 <WM__InitIVRSearch+0xa8>
 801d6a6:	685b      	ldr	r3, [r3, #4]
 801d6a8:	4599      	cmp	r9, r3
 801d6aa:	d0a1      	beq.n	801d5f0 <WM__InitIVRSearch+0xa8>
 801d6ac:	e7b9      	b.n	801d622 <WM__InitIVRSearch+0xda>
 801d6ae:	6a2b      	ldr	r3, [r5, #32]
 801d6b0:	a801      	add	r0, sp, #4
 801d6b2:	3b01      	subs	r3, #1
 801d6b4:	622b      	str	r3, [r5, #32]
 801d6b6:	f7f4 f96f 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d6ba:	4630      	mov	r0, r6
 801d6bc:	e753      	b.n	801d566 <WM__InitIVRSearch+0x1e>
 801d6be:	a801      	add	r0, sp, #4
 801d6c0:	f7f4 f96a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d6c4:	e78d      	b.n	801d5e2 <WM__InitIVRSearch+0x9a>
 801d6c6:	bf00      	nop
 801d6c8:	20000018 	.word	0x20000018
 801d6cc:	200003c8 	.word	0x200003c8
 801d6d0:	2002b020 	.word	0x2002b020
 801d6d4:	2002aff0 	.word	0x2002aff0
 801d6d8:	2002aff4 	.word	0x2002aff4
 801d6dc:	200003d4 	.word	0x200003d4

0801d6e0 <WM__Paint1>:
 801d6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6e4:	b089      	sub	sp, #36	; 0x24
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	f7f4 f942 	bl	8011970 <GUI_ALLOC_LockH>
 801d6ec:	f100 0308 	add.w	r3, r0, #8
 801d6f0:	6907      	ldr	r7, [r0, #16]
 801d6f2:	ac02      	add	r4, sp, #8
 801d6f4:	9001      	str	r0, [sp, #4]
 801d6f6:	6a85      	ldr	r5, [r0, #40]	; 0x28
 801d6f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6fc:	e884 0003 	stmia.w	r4, {r0, r1}
 801d700:	a801      	add	r0, sp, #4
 801d702:	f7f4 f949 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d706:	b10f      	cbz	r7, 801d70c <WM__Paint1+0x2c>
 801d708:	07ab      	lsls	r3, r5, #30
 801d70a:	d402      	bmi.n	801d712 <WM__Paint1+0x32>
 801d70c:	b009      	add	sp, #36	; 0x24
 801d70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d712:	4f1f      	ldr	r7, [pc, #124]	; (801d790 <WM__Paint1+0xb0>)
 801d714:	212e      	movs	r1, #46	; 0x2e
 801d716:	4630      	mov	r0, r6
 801d718:	f000 fbf2 	bl	801df00 <WM_SendMessageNoPara>
 801d71c:	783b      	ldrb	r3, [r7, #0]
 801d71e:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 801d722:	f103 0301 	add.w	r3, r3, #1
 801d726:	703b      	strb	r3, [r7, #0]
 801d728:	d119      	bne.n	801d75e <WM__Paint1+0x7e>
 801d72a:	4620      	mov	r0, r4
 801d72c:	f7ff ff0c 	bl	801d548 <WM__InitIVRSearch>
 801d730:	b318      	cbz	r0, 801d77a <WM__Paint1+0x9a>
 801d732:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801d794 <WM__Paint1+0xb4>
 801d736:	f04f 080f 	mov.w	r8, #15
 801d73a:	9605      	str	r6, [sp, #20]
 801d73c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d740:	9407      	str	r4, [sp, #28]
 801d742:	f7f4 ff2d 	bl	80125a0 <GL_SetDefault>
 801d746:	f8d9 3000 	ldr.w	r3, [r9]
 801d74a:	a904      	add	r1, sp, #16
 801d74c:	4630      	mov	r0, r6
 801d74e:	645d      	str	r5, [r3, #68]	; 0x44
 801d750:	f001 f924 	bl	801e99c <WM__SendMessage>
 801d754:	f7ff fdce 	bl	801d2f4 <WM__GetNextIVR>
 801d758:	2800      	cmp	r0, #0
 801d75a:	d1ee      	bne.n	801d73a <WM__Paint1+0x5a>
 801d75c:	e00d      	b.n	801d77a <WM__Paint1+0x9a>
 801d75e:	230f      	movs	r3, #15
 801d760:	9605      	str	r6, [sp, #20]
 801d762:	9407      	str	r4, [sp, #28]
 801d764:	9304      	str	r3, [sp, #16]
 801d766:	f7f4 ff1b 	bl	80125a0 <GL_SetDefault>
 801d76a:	4b0a      	ldr	r3, [pc, #40]	; (801d794 <WM__Paint1+0xb4>)
 801d76c:	2200      	movs	r2, #0
 801d76e:	a904      	add	r1, sp, #16
 801d770:	4630      	mov	r0, r6
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	645a      	str	r2, [r3, #68]	; 0x44
 801d776:	f001 f911 	bl	801e99c <WM__SendMessage>
 801d77a:	783b      	ldrb	r3, [r7, #0]
 801d77c:	4630      	mov	r0, r6
 801d77e:	212f      	movs	r1, #47	; 0x2f
 801d780:	3b01      	subs	r3, #1
 801d782:	703b      	strb	r3, [r7, #0]
 801d784:	f000 fbbc 	bl	801df00 <WM_SendMessageNoPara>
 801d788:	b009      	add	sp, #36	; 0x24
 801d78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d78e:	bf00      	nop
 801d790:	2002b020 	.word	0x2002b020
 801d794:	20000018 	.word	0x20000018

0801d798 <WM_Exec>:
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	b0ab      	sub	sp, #172	; 0xac
 801d79e:	f7f8 fd61 	bl	8016264 <GUI_Lock>
 801d7a2:	4b99      	ldr	r3, [pc, #612]	; (801da08 <WM_Exec+0x270>)
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	b103      	cbz	r3, 801d7aa <WM_Exec+0x12>
 801d7a8:	4798      	blx	r3
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	461c      	mov	r4, r3
 801d7ae:	e000      	b.n	801d7b2 <WM_Exec+0x1a>
 801d7b0:	2401      	movs	r4, #1
 801d7b2:	f7ff fb79 	bl	801cea8 <_Exec1Input>
 801d7b6:	2800      	cmp	r0, #0
 801d7b8:	d1fa      	bne.n	801d7b0 <WM_Exec+0x18>
 801d7ba:	f8df a25c 	ldr.w	sl, [pc, #604]	; 801da18 <WM_Exec+0x280>
 801d7be:	9406      	str	r4, [sp, #24]
 801d7c0:	f8da 3000 	ldr.w	r3, [sl]
 801d7c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801d7c8:	b123      	cbz	r3, 801d7d4 <WM_Exec+0x3c>
 801d7ca:	4b90      	ldr	r3, [pc, #576]	; (801da0c <WM_Exec+0x274>)
 801d7cc:	881b      	ldrh	r3, [r3, #0]
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	f040 8096 	bne.w	801d900 <WM_Exec+0x168>
 801d7d4:	9307      	str	r3, [sp, #28]
 801d7d6:	f8df b24c 	ldr.w	fp, [pc, #588]	; 801da24 <WM_Exec+0x28c>
 801d7da:	f7f8 fd39 	bl	8016250 <GUI_Unlock>
 801d7de:	e020      	b.n	801d822 <WM_Exec+0x8a>
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	9305      	str	r3, [sp, #20]
 801d7e4:	4b8a      	ldr	r3, [pc, #552]	; (801da10 <WM_Exec+0x278>)
 801d7e6:	681e      	ldr	r6, [r3, #0]
 801d7e8:	f7f4 fea0 	bl	801252c <GUI_SaveContext_W>
 801d7ec:	6823      	ldr	r3, [r4, #0]
 801d7ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d7f2:	9203      	str	r2, [sp, #12]
 801d7f4:	9304      	str	r3, [sp, #16]
 801d7f6:	2e00      	cmp	r6, #0
 801d7f8:	d132      	bne.n	801d860 <WM_Exec+0xc8>
 801d7fa:	4b86      	ldr	r3, [pc, #536]	; (801da14 <WM_Exec+0x27c>)
 801d7fc:	9803      	ldr	r0, [sp, #12]
 801d7fe:	609e      	str	r6, [r3, #8]
 801d800:	f7f4 fec2 	bl	8012588 <GUI_SetColor>
 801d804:	9804      	ldr	r0, [sp, #16]
 801d806:	f7f4 feb3 	bl	8012570 <GUI_SetBkColor>
 801d80a:	9805      	ldr	r0, [sp, #20]
 801d80c:	f7f4 fe98 	bl	8012540 <GUI_RestoreContext>
 801d810:	f7f8 fd1e 	bl	8016250 <GUI_Unlock>
 801d814:	f8b8 3000 	ldrh.w	r3, [r8]
 801d818:	2b00      	cmp	r3, #0
 801d81a:	f000 80d0 	beq.w	801d9be <WM_Exec+0x226>
 801d81e:	2301      	movs	r3, #1
 801d820:	9306      	str	r3, [sp, #24]
 801d822:	f8da 3000 	ldr.w	r3, [sl]
 801d826:	4c7c      	ldr	r4, [pc, #496]	; (801da18 <WM_Exec+0x280>)
 801d828:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	f000 80c6 	beq.w	801d9be <WM_Exec+0x226>
 801d832:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801da0c <WM_Exec+0x274>
 801d836:	f8b8 3000 	ldrh.w	r3, [r8]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	f000 80bf 	beq.w	801d9be <WM_Exec+0x226>
 801d840:	f7f8 fd10 	bl	8016264 <GUI_Lock>
 801d844:	4b73      	ldr	r3, [pc, #460]	; (801da14 <WM_Exec+0x27c>)
 801d846:	689e      	ldr	r6, [r3, #8]
 801d848:	ab0d      	add	r3, sp, #52	; 0x34
 801d84a:	2e00      	cmp	r6, #0
 801d84c:	d0c8      	beq.n	801d7e0 <WM_Exec+0x48>
 801d84e:	4618      	mov	r0, r3
 801d850:	9305      	str	r3, [sp, #20]
 801d852:	f7f4 fe6b 	bl	801252c <GUI_SaveContext_W>
 801d856:	6823      	ldr	r3, [r4, #0]
 801d858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d85c:	9203      	str	r2, [sp, #12]
 801d85e:	9304      	str	r3, [sp, #16]
 801d860:	ad0b      	add	r5, sp, #44	; 0x2c
 801d862:	4630      	mov	r0, r6
 801d864:	9608      	str	r6, [sp, #32]
 801d866:	f7f4 f883 	bl	8011970 <GUI_ALLOC_LockH>
 801d86a:	f100 0308 	add.w	r3, r0, #8
 801d86e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801d870:	9009      	str	r0, [sp, #36]	; 0x24
 801d872:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801d876:	4617      	mov	r7, r2
 801d878:	6904      	ldr	r4, [r0, #16]
 801d87a:	9202      	str	r2, [sp, #8]
 801d87c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d880:	e885 0003 	stmia.w	r5, {r0, r1}
 801d884:	a809      	add	r0, sp, #36	; 0x24
 801d886:	f7f4 f887 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d88a:	f244 0320 	movw	r3, #16416	; 0x4020
 801d88e:	403b      	ands	r3, r7
 801d890:	2b00      	cmp	r3, #0
 801d892:	d03e      	beq.n	801d912 <WM_Exec+0x17a>
 801d894:	b1d4      	cbz	r4, 801d8cc <WM_Exec+0x134>
 801d896:	9c08      	ldr	r4, [sp, #32]
 801d898:	e009      	b.n	801d8ae <WM_Exec+0x116>
 801d89a:	f7f9 fb33 	bl	8016f04 <GUI__IntersectRect>
 801d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8a0:	a80a      	add	r0, sp, #40	; 0x28
 801d8a2:	699f      	ldr	r7, [r3, #24]
 801d8a4:	2f00      	cmp	r7, #0
 801d8a6:	d03b      	beq.n	801d920 <WM_Exec+0x188>
 801d8a8:	463c      	mov	r4, r7
 801d8aa:	f7f4 f875 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d8ae:	4620      	mov	r0, r4
 801d8b0:	f7f4 f85e 	bl	8011970 <GUI_ALLOC_LockH>
 801d8b4:	4602      	mov	r2, r0
 801d8b6:	4628      	mov	r0, r5
 801d8b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801d8ba:	4611      	mov	r1, r2
 801d8bc:	920a      	str	r2, [sp, #40]	; 0x28
 801d8be:	f013 0302 	ands.w	r3, r3, #2
 801d8c2:	d1ea      	bne.n	801d89a <WM_Exec+0x102>
 801d8c4:	a80a      	add	r0, sp, #40	; 0x28
 801d8c6:	461c      	mov	r4, r3
 801d8c8:	f7f4 f866 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d8cc:	9808      	ldr	r0, [sp, #32]
 801d8ce:	f7f4 f84f 	bl	8011970 <GUI_ALLOC_LockH>
 801d8d2:	4b52      	ldr	r3, [pc, #328]	; (801da1c <WM_Exec+0x284>)
 801d8d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801d8d6:	9009      	str	r0, [sp, #36]	; 0x24
 801d8d8:	4013      	ands	r3, r2
 801d8da:	0492      	lsls	r2, r2, #18
 801d8dc:	bf48      	it	mi
 801d8de:	f043 0304 	orrmi.w	r3, r3, #4
 801d8e2:	6283      	str	r3, [r0, #40]	; 0x28
 801d8e4:	a809      	add	r0, sp, #36	; 0x24
 801d8e6:	f7f4 f857 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d8ea:	f8b8 3000 	ldrh.w	r3, [r8]
 801d8ee:	3b01      	subs	r3, #1
 801d8f0:	f8a8 3000 	strh.w	r3, [r8]
 801d8f4:	b16c      	cbz	r4, 801d912 <WM_Exec+0x17a>
 801d8f6:	4630      	mov	r0, r6
 801d8f8:	f7f4 f830 	bl	801195c <GUI_ALLOC_h2p>
 801d8fc:	6946      	ldr	r6, [r0, #20]
 801d8fe:	e77c      	b.n	801d7fa <WM_Exec+0x62>
 801d900:	4b47      	ldr	r3, [pc, #284]	; (801da20 <WM_Exec+0x288>)
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d07a      	beq.n	801d9fe <WM_Exec+0x266>
 801d908:	2201      	movs	r2, #1
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	9207      	str	r2, [sp, #28]
 801d90e:	4798      	blx	r3
 801d910:	e761      	b.n	801d7d6 <WM_Exec+0x3e>
 801d912:	4630      	mov	r0, r6
 801d914:	f7f4 f822 	bl	801195c <GUI_ALLOC_h2p>
 801d918:	6946      	ldr	r6, [r0, #20]
 801d91a:	2e00      	cmp	r6, #0
 801d91c:	d1a1      	bne.n	801d862 <WM_Exec+0xca>
 801d91e:	e76c      	b.n	801d7fa <WM_Exec+0x62>
 801d920:	f7f4 f83a 	bl	8011998 <GUI_ALLOC_UnlockH>
 801d924:	f8db 2000 	ldr.w	r2, [fp]
 801d928:	42a2      	cmp	r2, r4
 801d92a:	d005      	beq.n	801d938 <WM_Exec+0x1a0>
 801d92c:	4b3d      	ldr	r3, [pc, #244]	; (801da24 <WM_Exec+0x28c>)
 801d92e:	685a      	ldr	r2, [r3, #4]
 801d930:	4294      	cmp	r4, r2
 801d932:	d001      	beq.n	801d938 <WM_Exec+0x1a0>
 801d934:	463c      	mov	r4, r7
 801d936:	e7c9      	b.n	801d8cc <WM_Exec+0x134>
 801d938:	9c08      	ldr	r4, [sp, #32]
 801d93a:	f7f8 fc93 	bl	8016264 <GUI_Lock>
 801d93e:	f8da 3000 	ldr.w	r3, [sl]
 801d942:	b90c      	cbnz	r4, 801d948 <WM_Exec+0x1b0>
 801d944:	4a32      	ldr	r2, [pc, #200]	; (801da10 <WM_Exec+0x278>)
 801d946:	6814      	ldr	r4, [r2, #0]
 801d948:	649c      	str	r4, [r3, #72]	; 0x48
 801d94a:	4627      	mov	r7, r4
 801d94c:	e000      	b.n	801d950 <WM_Exec+0x1b8>
 801d94e:	461f      	mov	r7, r3
 801d950:	4638      	mov	r0, r7
 801d952:	f7f4 f803 	bl	801195c <GUI_ALLOC_h2p>
 801d956:	6983      	ldr	r3, [r0, #24]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d1f8      	bne.n	801d94e <WM_Exec+0x1b6>
 801d95c:	f8db 1000 	ldr.w	r1, [fp]
 801d960:	428f      	cmp	r7, r1
 801d962:	d042      	beq.n	801d9ea <WM_Exec+0x252>
 801d964:	f8db 3004 	ldr.w	r3, [fp, #4]
 801d968:	429f      	cmp	r7, r3
 801d96a:	d03a      	beq.n	801d9e2 <WM_Exec+0x24a>
 801d96c:	f7fa f870 	bl	8017a50 <LCD_SetClipRectMax>
 801d970:	4620      	mov	r0, r4
 801d972:	f7f3 fff3 	bl	801195c <GUI_ALLOC_h2p>
 801d976:	f8da 3000 	ldr.w	r3, [sl]
 801d97a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801d97e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d982:	64d9      	str	r1, [r3, #76]	; 0x4c
 801d984:	651a      	str	r2, [r3, #80]	; 0x50
 801d986:	f7f8 fc63 	bl	8016250 <GUI_Unlock>
 801d98a:	9a02      	ldr	r2, [sp, #8]
 801d98c:	0751      	lsls	r1, r2, #29
 801d98e:	d511      	bpl.n	801d9b4 <WM_Exec+0x21c>
 801d990:	f1b9 0f00 	cmp.w	r9, #0
 801d994:	d00c      	beq.n	801d9b0 <WM_Exec+0x218>
 801d996:	f002 0301 	and.w	r3, r2, #1
 801d99a:	f083 0301 	eor.w	r3, r3, #1
 801d99e:	9300      	str	r3, [sp, #0]
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	aa08      	add	r2, sp, #32
 801d9a4:	4920      	ldr	r1, [pc, #128]	; (801da28 <WM_Exec+0x290>)
 801d9a6:	4628      	mov	r0, r5
 801d9a8:	461c      	mov	r4, r3
 801d9aa:	f7fd f881 	bl	801aab0 <GUI_MEMDEV_Draw>
 801d9ae:	e78d      	b.n	801d8cc <WM_Exec+0x134>
 801d9b0:	2301      	movs	r3, #1
 801d9b2:	e7f4      	b.n	801d99e <WM_Exec+0x206>
 801d9b4:	9808      	ldr	r0, [sp, #32]
 801d9b6:	2401      	movs	r4, #1
 801d9b8:	f7fe fb10 	bl	801bfdc <WM__PaintWinAndOverlays>
 801d9bc:	e786      	b.n	801d8cc <WM_Exec+0x134>
 801d9be:	f7f8 fc51 	bl	8016264 <GUI_Lock>
 801d9c2:	9b07      	ldr	r3, [sp, #28]
 801d9c4:	b13b      	cbz	r3, 801d9d6 <WM_Exec+0x23e>
 801d9c6:	4b16      	ldr	r3, [pc, #88]	; (801da20 <WM_Exec+0x288>)
 801d9c8:	6818      	ldr	r0, [r3, #0]
 801d9ca:	b180      	cbz	r0, 801d9ee <WM_Exec+0x256>
 801d9cc:	6843      	ldr	r3, [r0, #4]
 801d9ce:	4798      	blx	r3
 801d9d0:	4b16      	ldr	r3, [pc, #88]	; (801da2c <WM_Exec+0x294>)
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	601a      	str	r2, [r3, #0]
 801d9d6:	f7f8 fc3b 	bl	8016250 <GUI_Unlock>
 801d9da:	9806      	ldr	r0, [sp, #24]
 801d9dc:	b02b      	add	sp, #172	; 0xac
 801d9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9e2:	2001      	movs	r0, #1
 801d9e4:	f7f7 fa32 	bl	8014e4c <GUI_SelectLayer>
 801d9e8:	e7c0      	b.n	801d96c <WM_Exec+0x1d4>
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	e7fa      	b.n	801d9e4 <WM_Exec+0x24c>
 801d9ee:	f002 fd67 	bl	80204c0 <GUI__ManageCache>
 801d9f2:	f7f8 fc2d 	bl	8016250 <GUI_Unlock>
 801d9f6:	9806      	ldr	r0, [sp, #24]
 801d9f8:	b02b      	add	sp, #172	; 0xac
 801d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9fe:	2001      	movs	r0, #1
 801da00:	9007      	str	r0, [sp, #28]
 801da02:	f002 fd5d 	bl	80204c0 <GUI__ManageCache>
 801da06:	e6e6      	b.n	801d7d6 <WM_Exec+0x3e>
 801da08:	2002b000 	.word	0x2002b000
 801da0c:	2002b00c 	.word	0x2002b00c
 801da10:	2002b010 	.word	0x2002b010
 801da14:	200003c8 	.word	0x200003c8
 801da18:	20000018 	.word	0x20000018
 801da1c:	ffffbfdf 	.word	0xffffbfdf
 801da20:	2002b034 	.word	0x2002b034
 801da24:	2002aff4 	.word	0x2002aff4
 801da28:	0801c07d 	.word	0x0801c07d
 801da2c:	2002b01c 	.word	0x2002b01c

0801da30 <WM_Activate>:
 801da30:	4b02      	ldr	r3, [pc, #8]	; (801da3c <WM_Activate+0xc>)
 801da32:	2201      	movs	r2, #1
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801da3a:	4770      	bx	lr
 801da3c:	20000018 	.word	0x20000018

0801da40 <WM_Deactivate>:
 801da40:	b508      	push	{r3, lr}
 801da42:	4b06      	ldr	r3, [pc, #24]	; (801da5c <WM_Deactivate+0x1c>)
 801da44:	2200      	movs	r2, #0
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 801da4c:	f7f8 fc0a 	bl	8016264 <GUI_Lock>
 801da50:	f7f9 fffe 	bl	8017a50 <LCD_SetClipRectMax>
 801da54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801da58:	f7f8 bbfa 	b.w	8016250 <GUI_Unlock>
 801da5c:	20000018 	.word	0x20000018

0801da60 <WM_DefaultProc>:
 801da60:	6803      	ldr	r3, [r0, #0]
 801da62:	3b0e      	subs	r3, #14
 801da64:	b510      	push	{r4, lr}
 801da66:	4604      	mov	r4, r0
 801da68:	6840      	ldr	r0, [r0, #4]
 801da6a:	2b1a      	cmp	r3, #26
 801da6c:	d812      	bhi.n	801da94 <WM_DefaultProc+0x34>
 801da6e:	e8df f003 	tbb	[pc, r3]
 801da72:	111b      	.short	0x111b
 801da74:	11111111 	.word	0x11111111
 801da78:	2011110e 	.word	0x2011110e
 801da7c:	11111111 	.word	0x11111111
 801da80:	11111111 	.word	0x11111111
 801da84:	11221111 	.word	0x11221111
 801da88:	11111111 	.word	0x11111111
 801da8c:	14          	.byte	0x14
 801da8d:	00          	.byte	0x00
 801da8e:	68e1      	ldr	r1, [r4, #12]
 801da90:	f001 f892 	bl	801ebb8 <WM__GetClientRectEx>
 801da94:	2300      	movs	r3, #0
 801da96:	60e3      	str	r3, [r4, #12]
 801da98:	bd10      	pop	{r4, pc}
 801da9a:	2800      	cmp	r0, #0
 801da9c:	d0fc      	beq.n	801da98 <WM_DefaultProc+0x38>
 801da9e:	2100      	movs	r1, #0
 801daa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daa4:	f7ff b818 	b.w	801cad8 <WM_InvalidateRect.part.2>
 801daa8:	4621      	mov	r1, r4
 801daaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daae:	f000 ba35 	b.w	801df1c <WM_SendToParent>
 801dab2:	60e0      	str	r0, [r4, #12]
 801dab4:	bd10      	pop	{r4, pc}
 801dab6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801daba:	60e3      	str	r3, [r4, #12]
 801dabc:	bd10      	pop	{r4, pc}
 801dabe:	bf00      	nop

0801dac0 <WM_Init>:
 801dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac4:	4d45      	ldr	r5, [pc, #276]	; (801dbdc <WM_Init+0x11c>)
 801dac6:	b085      	sub	sp, #20
 801dac8:	782b      	ldrb	r3, [r5, #0]
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d17a      	bne.n	801dbc4 <WM_Init+0x104>
 801dace:	4f44      	ldr	r7, [pc, #272]	; (801dbe0 <WM_Init+0x120>)
 801dad0:	461c      	mov	r4, r3
 801dad2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801dc14 <WM_Init+0x154>
 801dad6:	469a      	mov	sl, r3
 801dad8:	6838      	ldr	r0, [r7, #0]
 801dada:	4942      	ldr	r1, [pc, #264]	; (801dbe4 <WM_Init+0x124>)
 801dadc:	4a42      	ldr	r2, [pc, #264]	; (801dbe8 <WM_Init+0x128>)
 801dade:	f8df 8128 	ldr.w	r8, [pc, #296]	; 801dc08 <WM_Init+0x148>
 801dae2:	4e42      	ldr	r6, [pc, #264]	; (801dbec <WM_Init+0x12c>)
 801dae4:	f8df b130 	ldr.w	fp, [pc, #304]	; 801dc18 <WM_Init+0x158>
 801dae8:	60ab      	str	r3, [r5, #8]
 801daea:	6443      	str	r3, [r0, #68]	; 0x44
 801daec:	f8c9 3000 	str.w	r3, [r9]
 801daf0:	800b      	strh	r3, [r1, #0]
 801daf2:	8013      	strh	r3, [r2, #0]
 801daf4:	4620      	mov	r0, r4
 801daf6:	f7f4 ffdd 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 801dafa:	f643 73ff 	movw	r3, #16383	; 0x3fff
 801dafe:	2100      	movs	r1, #0
 801db00:	f04f 0c02 	mov.w	ip, #2
 801db04:	f04f 3eff 	mov.w	lr, #4294967295
 801db08:	461a      	mov	r2, r3
 801db0a:	b188      	cbz	r0, 801db30 <WM_Init+0x70>
 801db0c:	f8cd a00c 	str.w	sl, [sp, #12]
 801db10:	4608      	mov	r0, r1
 801db12:	9602      	str	r6, [sp, #8]
 801db14:	f8cd c004 	str.w	ip, [sp, #4]
 801db18:	f8cd e000 	str.w	lr, [sp]
 801db1c:	f7ff fafe 	bl	801d11c <WM_CreateWindowAsChild>
 801db20:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801db24:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 801db28:	f84b 2024 	str.w	r2, [fp, r4, lsl #2]
 801db2c:	2800      	cmp	r0, #0
 801db2e:	d150      	bne.n	801dbd2 <WM_Init+0x112>
 801db30:	3401      	adds	r4, #1
 801db32:	2c02      	cmp	r4, #2
 801db34:	d1de      	bne.n	801daf4 <WM_Init+0x34>
 801db36:	482e      	ldr	r0, [pc, #184]	; (801dbf0 <WM_Init+0x130>)
 801db38:	f001 f818 	bl	801eb6c <WM__AddCriticalHandle>
 801db3c:	482d      	ldr	r0, [pc, #180]	; (801dbf4 <WM_Init+0x134>)
 801db3e:	f001 f815 	bl	801eb6c <WM__AddCriticalHandle>
 801db42:	482d      	ldr	r0, [pc, #180]	; (801dbf8 <WM_Init+0x138>)
 801db44:	f001 f812 	bl	801eb6c <WM__AddCriticalHandle>
 801db48:	482c      	ldr	r0, [pc, #176]	; (801dbfc <WM_Init+0x13c>)
 801db4a:	f001 f80f 	bl	801eb6c <WM__AddCriticalHandle>
 801db4e:	482c      	ldr	r0, [pc, #176]	; (801dc00 <WM_Init+0x140>)
 801db50:	f001 f80c 	bl	801eb6c <WM__AddCriticalHandle>
 801db54:	482b      	ldr	r0, [pc, #172]	; (801dc04 <WM_Init+0x144>)
 801db56:	f001 f809 	bl	801eb6c <WM__AddCriticalHandle>
 801db5a:	f8d8 6000 	ldr.w	r6, [r8]
 801db5e:	f7f8 fb81 	bl	8016264 <GUI_Lock>
 801db62:	683b      	ldr	r3, [r7, #0]
 801db64:	b90e      	cbnz	r6, 801db6a <WM_Init+0xaa>
 801db66:	f8d9 6000 	ldr.w	r6, [r9]
 801db6a:	649e      	str	r6, [r3, #72]	; 0x48
 801db6c:	4634      	mov	r4, r6
 801db6e:	e000      	b.n	801db72 <WM_Init+0xb2>
 801db70:	4604      	mov	r4, r0
 801db72:	4620      	mov	r0, r4
 801db74:	f7f3 fef2 	bl	801195c <GUI_ALLOC_h2p>
 801db78:	6980      	ldr	r0, [r0, #24]
 801db7a:	2800      	cmp	r0, #0
 801db7c:	d1f8      	bne.n	801db70 <WM_Init+0xb0>
 801db7e:	f8d8 3000 	ldr.w	r3, [r8]
 801db82:	4a21      	ldr	r2, [pc, #132]	; (801dc08 <WM_Init+0x148>)
 801db84:	429c      	cmp	r4, r3
 801db86:	d021      	beq.n	801dbcc <WM_Init+0x10c>
 801db88:	6853      	ldr	r3, [r2, #4]
 801db8a:	429c      	cmp	r4, r3
 801db8c:	d01d      	beq.n	801dbca <WM_Init+0x10a>
 801db8e:	f7f9 ff5f 	bl	8017a50 <LCD_SetClipRectMax>
 801db92:	4630      	mov	r0, r6
 801db94:	f7f3 fee2 	bl	801195c <GUI_ALLOC_h2p>
 801db98:	683b      	ldr	r3, [r7, #0]
 801db9a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801db9e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801dba2:	64d9      	str	r1, [r3, #76]	; 0x4c
 801dba4:	651a      	str	r2, [r3, #80]	; 0x50
 801dba6:	f7f8 fb53 	bl	8016250 <GUI_Unlock>
 801dbaa:	2301      	movs	r3, #1
 801dbac:	6839      	ldr	r1, [r7, #0]
 801dbae:	4a17      	ldr	r2, [pc, #92]	; (801dc0c <WM_Init+0x14c>)
 801dbb0:	4817      	ldr	r0, [pc, #92]	; (801dc10 <WM_Init+0x150>)
 801dbb2:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 801dbb6:	702b      	strb	r3, [r5, #0]
 801dbb8:	626a      	str	r2, [r5, #36]	; 0x24
 801dbba:	b005      	add	sp, #20
 801dbbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbc0:	f7f4 bf3a 	b.w	8012a38 <GUI__RegisterExit>
 801dbc4:	b005      	add	sp, #20
 801dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbca:	2001      	movs	r0, #1
 801dbcc:	f7f7 f93e 	bl	8014e4c <GUI_SelectLayer>
 801dbd0:	e7dd      	b.n	801db8e <WM_Init+0xce>
 801dbd2:	2100      	movs	r1, #0
 801dbd4:	f7fe ff80 	bl	801cad8 <WM_InvalidateRect.part.2>
 801dbd8:	e7aa      	b.n	801db30 <WM_Init+0x70>
 801dbda:	bf00      	nop
 801dbdc:	200003c8 	.word	0x200003c8
 801dbe0:	20000018 	.word	0x20000018
 801dbe4:	2002b00c 	.word	0x2002b00c
 801dbe8:	2002afec 	.word	0x2002afec
 801dbec:	0801cbb5 	.word	0x0801cbb5
 801dbf0:	2002b068 	.word	0x2002b068
 801dbf4:	2002b058 	.word	0x2002b058
 801dbf8:	2002b048 	.word	0x2002b048
 801dbfc:	2002b070 	.word	0x2002b070
 801dc00:	2002b060 	.word	0x2002b060
 801dc04:	2002b050 	.word	0x2002b050
 801dc08:	2002aff4 	.word	0x2002aff4
 801dc0c:	0801ba6d 	.word	0x0801ba6d
 801dc10:	200003ec 	.word	0x200003ec
 801dc14:	2002b010 	.word	0x2002b010
 801dc18:	2002b028 	.word	0x2002b028

0801dc1c <WM_ResizeWindow.part.11>:
 801dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc20:	4606      	mov	r6, r0
 801dc22:	b08a      	sub	sp, #40	; 0x28
 801dc24:	4688      	mov	r8, r1
 801dc26:	4617      	mov	r7, r2
 801dc28:	f7f8 fb1c 	bl	8016264 <GUI_Lock>
 801dc2c:	4630      	mov	r0, r6
 801dc2e:	f7f3 fe9f 	bl	8011970 <GUI_ALLOC_LockH>
 801dc32:	ac04      	add	r4, sp, #16
 801dc34:	4603      	mov	r3, r0
 801dc36:	ad06      	add	r5, sp, #24
 801dc38:	9003      	str	r0, [sp, #12]
 801dc3a:	c803      	ldmia	r0, {r0, r1}
 801dc3c:	e884 0003 	stmia.w	r4, {r0, r1}
 801dc40:	e885 0003 	stmia.w	r5, {r0, r1}
 801dc44:	f1b8 0f00 	cmp.w	r8, #0
 801dc48:	d009      	beq.n	801dc5e <WM_ResizeWindow.part.11+0x42>
 801dc4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dc4c:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801dc50:	2a80      	cmp	r2, #128	; 0x80
 801dc52:	d056      	beq.n	801dd02 <WM_ResizeWindow.part.11+0xe6>
 801dc54:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801dc58:	4490      	add	r8, r2
 801dc5a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801dc5e:	b157      	cbz	r7, 801dc76 <WM_ResizeWindow.part.11+0x5a>
 801dc60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dc62:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801dc66:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801dc6a:	d051      	beq.n	801dd10 <WM_ResizeWindow.part.11+0xf4>
 801dc6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801dc70:	4417      	add	r7, r2
 801dc72:	f8ad 701e 	strh.w	r7, [sp, #30]
 801dc76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dc78:	03d1      	lsls	r1, r2, #15
 801dc7a:	d43c      	bmi.n	801dcf6 <WM_ResizeWindow.part.11+0xda>
 801dc7c:	0792      	lsls	r2, r2, #30
 801dc7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801dc82:	e883 0003 	stmia.w	r3, {r0, r1}
 801dc86:	d50b      	bpl.n	801dca0 <WM_ResizeWindow.part.11+0x84>
 801dc88:	462a      	mov	r2, r5
 801dc8a:	4621      	mov	r1, r4
 801dc8c:	a808      	add	r0, sp, #32
 801dc8e:	f7f4 fb35 	bl	80122fc <GUI_MergeRect>
 801dc92:	9b03      	ldr	r3, [sp, #12]
 801dc94:	a808      	add	r0, sp, #32
 801dc96:	6a1a      	ldr	r2, [r3, #32]
 801dc98:	6999      	ldr	r1, [r3, #24]
 801dc9a:	f7ff f9c3 	bl	801d024 <WM__InvalidateRectEx>
 801dc9e:	9b03      	ldr	r3, [sp, #12]
 801dca0:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801dca4:	4618      	mov	r0, r3
 801dca6:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 801dcaa:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 801dcae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801dcb2:	1b14      	subs	r4, r2, r4
 801dcb4:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 801dcb8:	1acb      	subs	r3, r1, r3
 801dcba:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801dcbe:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 801dcc2:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 801dcc6:	1aba      	subs	r2, r7, r2
 801dcc8:	9400      	str	r4, [sp, #0]
 801dcca:	ac0a      	add	r4, sp, #40	; 0x28
 801dccc:	1a69      	subs	r1, r5, r1
 801dcce:	f000 febb 	bl	801ea48 <WM__UpdateChildPositions>
 801dcd2:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 801dcd6:	f101 0008 	add.w	r0, r1, #8
 801dcda:	f7f9 f913 	bl	8016f04 <GUI__IntersectRect>
 801dcde:	2105      	movs	r1, #5
 801dce0:	4630      	mov	r0, r6
 801dce2:	f7ff fa01 	bl	801d0e8 <WM__SendMsgNoData>
 801dce6:	4620      	mov	r0, r4
 801dce8:	f7f3 fe56 	bl	8011998 <GUI_ALLOC_UnlockH>
 801dcec:	f7f8 fab0 	bl	8016250 <GUI_Unlock>
 801dcf0:	b00a      	add	sp, #40	; 0x28
 801dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcf6:	4630      	mov	r0, r6
 801dcf8:	f7fe fb7e 	bl	801c3f8 <WM__InvalidateDrawAndDescs>
 801dcfc:	9b03      	ldr	r3, [sp, #12]
 801dcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dd00:	e7bc      	b.n	801dc7c <WM_ResizeWindow.part.11+0x60>
 801dd02:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801dd06:	ebc8 0802 	rsb	r8, r8, r2
 801dd0a:	f8ad 8018 	strh.w	r8, [sp, #24]
 801dd0e:	e7a6      	b.n	801dc5e <WM_ResizeWindow.part.11+0x42>
 801dd10:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dd14:	1bd7      	subs	r7, r2, r7
 801dd16:	f8ad 701a 	strh.w	r7, [sp, #26]
 801dd1a:	e7ac      	b.n	801dc76 <WM_ResizeWindow.part.11+0x5a>

0801dd1c <WM_GetDesktopWindow>:
 801dd1c:	4a03      	ldr	r2, [pc, #12]	; (801dd2c <WM_GetDesktopWindow+0x10>)
 801dd1e:	4b04      	ldr	r3, [pc, #16]	; (801dd30 <WM_GetDesktopWindow+0x14>)
 801dd20:	6812      	ldr	r2, [r2, #0]
 801dd22:	7c52      	ldrb	r2, [r2, #17]
 801dd24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dd28:	4770      	bx	lr
 801dd2a:	bf00      	nop
 801dd2c:	20000018 	.word	0x20000018
 801dd30:	2002aff4 	.word	0x2002aff4

0801dd34 <WM_GetDesktopWindowEx>:
 801dd34:	2801      	cmp	r0, #1
 801dd36:	d901      	bls.n	801dd3c <WM_GetDesktopWindowEx+0x8>
 801dd38:	2000      	movs	r0, #0
 801dd3a:	4770      	bx	lr
 801dd3c:	4b01      	ldr	r3, [pc, #4]	; (801dd44 <WM_GetDesktopWindowEx+0x10>)
 801dd3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801dd42:	4770      	bx	lr
 801dd44:	2002aff4 	.word	0x2002aff4

0801dd48 <WM_BringToBottom>:
 801dd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd4c:	4604      	mov	r4, r0
 801dd4e:	b087      	sub	sp, #28
 801dd50:	f7f8 fa88 	bl	8016264 <GUI_Lock>
 801dd54:	b924      	cbnz	r4, 801dd60 <WM_BringToBottom+0x18>
 801dd56:	f7f8 fa7b 	bl	8016250 <GUI_Unlock>
 801dd5a:	b007      	add	sp, #28
 801dd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dd60:	4620      	mov	r0, r4
 801dd62:	ad04      	add	r5, sp, #16
 801dd64:	f7f3 fe04 	bl	8011970 <GUI_ALLOC_LockH>
 801dd68:	9001      	str	r0, [sp, #4]
 801dd6a:	6a07      	ldr	r7, [r0, #32]
 801dd6c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801dd70:	c803      	ldmia	r0, {r0, r1}
 801dd72:	e885 0003 	stmia.w	r5, {r0, r1}
 801dd76:	a801      	add	r0, sp, #4
 801dd78:	f7f3 fe0e 	bl	8011998 <GUI_ALLOC_UnlockH>
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	f000 fdd7 	bl	801e930 <WM__GetPrevSibling>
 801dd82:	4606      	mov	r6, r0
 801dd84:	2800      	cmp	r0, #0
 801dd86:	d0e6      	beq.n	801dd56 <WM_BringToBottom+0xe>
 801dd88:	f7f8 fa6c 	bl	8016264 <GUI_Lock>
 801dd8c:	4620      	mov	r0, r4
 801dd8e:	f7f3 fde5 	bl	801195c <GUI_ALLOC_h2p>
 801dd92:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801dd96:	f7f8 fa5b 	bl	8016250 <GUI_Unlock>
 801dd9a:	f018 0f02 	tst.w	r8, #2
 801dd9e:	d120      	bne.n	801dde2 <WM_BringToBottom+0x9a>
 801dda0:	4620      	mov	r0, r4
 801dda2:	f7f3 fde5 	bl	8011970 <GUI_ALLOC_LockH>
 801dda6:	9001      	str	r0, [sp, #4]
 801dda8:	4648      	mov	r0, r9
 801ddaa:	f7f3 fde1 	bl	8011970 <GUI_ALLOC_LockH>
 801ddae:	9003      	str	r0, [sp, #12]
 801ddb0:	4630      	mov	r0, r6
 801ddb2:	f7f3 fddd 	bl	8011970 <GUI_ALLOC_LockH>
 801ddb6:	9a03      	ldr	r2, [sp, #12]
 801ddb8:	4603      	mov	r3, r0
 801ddba:	9901      	ldr	r1, [sp, #4]
 801ddbc:	69d5      	ldr	r5, [r2, #28]
 801ddbe:	a801      	add	r0, sp, #4
 801ddc0:	621f      	str	r7, [r3, #32]
 801ddc2:	620d      	str	r5, [r1, #32]
 801ddc4:	61d4      	str	r4, [r2, #28]
 801ddc6:	9302      	str	r3, [sp, #8]
 801ddc8:	f7f3 fde6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ddcc:	a803      	add	r0, sp, #12
 801ddce:	f7f3 fde3 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ddd2:	a802      	add	r0, sp, #8
 801ddd4:	f7f3 fde0 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ddd8:	f7f8 fa3a 	bl	8016250 <GUI_Unlock>
 801dddc:	b007      	add	sp, #28
 801ddde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dde2:	4628      	mov	r0, r5
 801dde4:	463a      	mov	r2, r7
 801dde6:	4649      	mov	r1, r9
 801dde8:	f7ff f91c 	bl	801d024 <WM__InvalidateRectEx>
 801ddec:	e7d8      	b.n	801dda0 <WM_BringToBottom+0x58>
 801ddee:	bf00      	nop

0801ddf0 <WM_GetFirstChild>:
 801ddf0:	b510      	push	{r4, lr}
 801ddf2:	4604      	mov	r4, r0
 801ddf4:	b138      	cbz	r0, 801de06 <WM_GetFirstChild+0x16>
 801ddf6:	f7f8 fa35 	bl	8016264 <GUI_Lock>
 801ddfa:	4620      	mov	r0, r4
 801ddfc:	f7f3 fdae 	bl	801195c <GUI_ALLOC_h2p>
 801de00:	69c4      	ldr	r4, [r0, #28]
 801de02:	f7f8 fa25 	bl	8016250 <GUI_Unlock>
 801de06:	4620      	mov	r0, r4
 801de08:	bd10      	pop	{r4, pc}
 801de0a:	bf00      	nop

0801de0c <WM_GetWindowOrgX>:
 801de0c:	b510      	push	{r4, lr}
 801de0e:	4604      	mov	r4, r0
 801de10:	b140      	cbz	r0, 801de24 <WM_GetWindowOrgX+0x18>
 801de12:	f7f8 fa27 	bl	8016264 <GUI_Lock>
 801de16:	4620      	mov	r0, r4
 801de18:	f7f3 fda0 	bl	801195c <GUI_ALLOC_h2p>
 801de1c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801de20:	f7f8 fa16 	bl	8016250 <GUI_Unlock>
 801de24:	4620      	mov	r0, r4
 801de26:	bd10      	pop	{r4, pc}

0801de28 <WM_GetParent>:
 801de28:	b510      	push	{r4, lr}
 801de2a:	4604      	mov	r4, r0
 801de2c:	b138      	cbz	r0, 801de3e <WM_GetParent+0x16>
 801de2e:	f7f8 fa19 	bl	8016264 <GUI_Lock>
 801de32:	4620      	mov	r0, r4
 801de34:	f7f3 fd92 	bl	801195c <GUI_ALLOC_h2p>
 801de38:	6984      	ldr	r4, [r0, #24]
 801de3a:	f7f8 fa09 	bl	8016250 <GUI_Unlock>
 801de3e:	4620      	mov	r0, r4
 801de40:	bd10      	pop	{r4, pc}
 801de42:	bf00      	nop

0801de44 <WM_IsWindow>:
 801de44:	b510      	push	{r4, lr}
 801de46:	4604      	mov	r4, r0
 801de48:	f7f8 fa0c 	bl	8016264 <GUI_Lock>
 801de4c:	4620      	mov	r0, r4
 801de4e:	f7fe fabd 	bl	801c3cc <WM__IsWindow>
 801de52:	4604      	mov	r4, r0
 801de54:	f7f8 f9fc 	bl	8016250 <GUI_Unlock>
 801de58:	4620      	mov	r0, r4
 801de5a:	bd10      	pop	{r4, pc}

0801de5c <WM_NotifyParent>:
 801de5c:	b530      	push	{r4, r5, lr}
 801de5e:	2326      	movs	r3, #38	; 0x26
 801de60:	b085      	sub	sp, #20
 801de62:	4604      	mov	r4, r0
 801de64:	9103      	str	r1, [sp, #12]
 801de66:	9300      	str	r3, [sp, #0]
 801de68:	f7f8 f9fc 	bl	8016264 <GUI_Lock>
 801de6c:	b91c      	cbnz	r4, 801de76 <WM_NotifyParent+0x1a>
 801de6e:	f7f8 f9ef 	bl	8016250 <GUI_Unlock>
 801de72:	b005      	add	sp, #20
 801de74:	bd30      	pop	{r4, r5, pc}
 801de76:	f7f8 f9f5 	bl	8016264 <GUI_Lock>
 801de7a:	4620      	mov	r0, r4
 801de7c:	f7f3 fd6e 	bl	801195c <GUI_ALLOC_h2p>
 801de80:	6985      	ldr	r5, [r0, #24]
 801de82:	f7f8 f9e5 	bl	8016250 <GUI_Unlock>
 801de86:	2d00      	cmp	r5, #0
 801de88:	d0f1      	beq.n	801de6e <WM_NotifyParent+0x12>
 801de8a:	4628      	mov	r0, r5
 801de8c:	4669      	mov	r1, sp
 801de8e:	9402      	str	r4, [sp, #8]
 801de90:	f000 fd84 	bl	801e99c <WM__SendMessage>
 801de94:	f7f8 f9dc 	bl	8016250 <GUI_Unlock>
 801de98:	b005      	add	sp, #20
 801de9a:	bd30      	pop	{r4, r5, pc}

0801de9c <WM_OnKey>:
 801de9c:	b530      	push	{r4, r5, lr}
 801de9e:	b087      	sub	sp, #28
 801dea0:	4604      	mov	r4, r0
 801dea2:	460d      	mov	r5, r1
 801dea4:	f7f8 f9de 	bl	8016264 <GUI_Lock>
 801dea8:	4a0d      	ldr	r2, [pc, #52]	; (801dee0 <WM_OnKey+0x44>)
 801deaa:	4b0e      	ldr	r3, [pc, #56]	; (801dee4 <WM_OnKey+0x48>)
 801deac:	6812      	ldr	r2, [r2, #0]
 801deae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801deb2:	b928      	cbnz	r0, 801dec0 <WM_OnKey+0x24>
 801deb4:	4604      	mov	r4, r0
 801deb6:	f7f8 f9cb 	bl	8016250 <GUI_Unlock>
 801deba:	4620      	mov	r0, r4
 801debc:	b007      	add	sp, #28
 801debe:	bd30      	pop	{r4, r5, pc}
 801dec0:	230e      	movs	r3, #14
 801dec2:	9400      	str	r4, [sp, #0]
 801dec4:	2401      	movs	r4, #1
 801dec6:	a902      	add	r1, sp, #8
 801dec8:	9302      	str	r3, [sp, #8]
 801deca:	9501      	str	r5, [sp, #4]
 801decc:	f8cd d014 	str.w	sp, [sp, #20]
 801ded0:	f000 fd64 	bl	801e99c <WM__SendMessage>
 801ded4:	f7f8 f9bc 	bl	8016250 <GUI_Unlock>
 801ded8:	4620      	mov	r0, r4
 801deda:	b007      	add	sp, #28
 801dedc:	bd30      	pop	{r4, r5, pc}
 801dede:	bf00      	nop
 801dee0:	2002b014 	.word	0x2002b014
 801dee4:	2002b004 	.word	0x2002b004

0801dee8 <WM_ResizeWindow>:
 801dee8:	b500      	push	{lr}
 801deea:	ea51 0e02 	orrs.w	lr, r1, r2
 801deee:	d000      	beq.n	801def2 <WM_ResizeWindow+0xa>
 801def0:	b908      	cbnz	r0, 801def6 <WM_ResizeWindow+0xe>
 801def2:	f85d fb04 	ldr.w	pc, [sp], #4
 801def6:	f85d eb04 	ldr.w	lr, [sp], #4
 801defa:	f7ff be8f 	b.w	801dc1c <WM_ResizeWindow.part.11>
 801defe:	bf00      	nop

0801df00 <WM_SendMessageNoPara>:
 801df00:	b538      	push	{r3, r4, r5, lr}
 801df02:	4604      	mov	r4, r0
 801df04:	460d      	mov	r5, r1
 801df06:	f7f8 f9ad 	bl	8016264 <GUI_Lock>
 801df0a:	4629      	mov	r1, r5
 801df0c:	4620      	mov	r0, r4
 801df0e:	f000 fd87 	bl	801ea20 <WM__SendMessageNoPara>
 801df12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df16:	f7f8 b99b 	b.w	8016250 <GUI_Unlock>
 801df1a:	bf00      	nop

0801df1c <WM_SendToParent>:
 801df1c:	b1e1      	cbz	r1, 801df58 <WM_SendToParent+0x3c>
 801df1e:	b570      	push	{r4, r5, r6, lr}
 801df20:	4605      	mov	r5, r0
 801df22:	460c      	mov	r4, r1
 801df24:	f7f8 f99e 	bl	8016264 <GUI_Lock>
 801df28:	b91d      	cbnz	r5, 801df32 <WM_SendToParent+0x16>
 801df2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df2e:	f7f8 b98f 	b.w	8016250 <GUI_Unlock>
 801df32:	f7f8 f997 	bl	8016264 <GUI_Lock>
 801df36:	4628      	mov	r0, r5
 801df38:	f7f3 fd10 	bl	801195c <GUI_ALLOC_h2p>
 801df3c:	6986      	ldr	r6, [r0, #24]
 801df3e:	f7f8 f987 	bl	8016250 <GUI_Unlock>
 801df42:	2e00      	cmp	r6, #0
 801df44:	d0f1      	beq.n	801df2a <WM_SendToParent+0xe>
 801df46:	60a5      	str	r5, [r4, #8]
 801df48:	4621      	mov	r1, r4
 801df4a:	4630      	mov	r0, r6
 801df4c:	f000 fd26 	bl	801e99c <WM__SendMessage>
 801df50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df54:	f7f8 b97c 	b.w	8016250 <GUI_Unlock>
 801df58:	4770      	bx	lr
 801df5a:	bf00      	nop

0801df5c <WM_SetSize>:
 801df5c:	b900      	cbnz	r0, 801df60 <WM_SetSize+0x4>
 801df5e:	4770      	bx	lr
 801df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df64:	4604      	mov	r4, r0
 801df66:	b082      	sub	sp, #8
 801df68:	4617      	mov	r7, r2
 801df6a:	4688      	mov	r8, r1
 801df6c:	f7f8 f97a 	bl	8016264 <GUI_Lock>
 801df70:	4620      	mov	r0, r4
 801df72:	f7f3 fcfd 	bl	8011970 <GUI_ALLOC_LockH>
 801df76:	f9b0 1000 	ldrsh.w	r1, [r0]
 801df7a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801df7e:	f10d 0e08 	add.w	lr, sp, #8
 801df82:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801df86:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 801df8a:	1aeb      	subs	r3, r5, r3
 801df8c:	f84e 0d04 	str.w	r0, [lr, #-4]!
 801df90:	1a76      	subs	r6, r6, r1
 801df92:	4670      	mov	r0, lr
 801df94:	3301      	adds	r3, #1
 801df96:	1c75      	adds	r5, r6, #1
 801df98:	1afe      	subs	r6, r7, r3
 801df9a:	f7f3 fcfd 	bl	8011998 <GUI_ALLOC_UnlockH>
 801df9e:	ebc5 0508 	rsb	r5, r5, r8
 801dfa2:	ea55 0306 	orrs.w	r3, r5, r6
 801dfa6:	d104      	bne.n	801dfb2 <WM_SetSize+0x56>
 801dfa8:	f7f8 f952 	bl	8016250 <GUI_Unlock>
 801dfac:	b002      	add	sp, #8
 801dfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dfb2:	4632      	mov	r2, r6
 801dfb4:	4629      	mov	r1, r5
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	f7ff fe30 	bl	801dc1c <WM_ResizeWindow.part.11>
 801dfbc:	e7f4      	b.n	801dfa8 <WM_SetSize+0x4c>
 801dfbe:	bf00      	nop

0801dfc0 <_MoveDescendents>:
 801dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	b0b5      	sub	sp, #212	; 0xd4
 801dfc8:	931d      	str	r3, [sp, #116]	; 0x74
 801dfca:	9006      	str	r0, [sp, #24]
 801dfcc:	931c      	str	r3, [sp, #112]	; 0x70
 801dfce:	931e      	str	r3, [sp, #120]	; 0x78
 801dfd0:	931f      	str	r3, [sp, #124]	; 0x7c
 801dfd2:	2800      	cmp	r0, #0
 801dfd4:	f000 811c 	beq.w	801e210 <_MoveDescendents+0x250>
 801dfd8:	468a      	mov	sl, r1
 801dfda:	4691      	mov	r9, r2
 801dfdc:	f04f 0b03 	mov.w	fp, #3
 801dfe0:	9806      	ldr	r0, [sp, #24]
 801dfe2:	f7f3 fcc5 	bl	8011970 <GUI_ALLOC_LockH>
 801dfe6:	464a      	mov	r2, r9
 801dfe8:	4651      	mov	r1, sl
 801dfea:	900a      	str	r0, [sp, #40]	; 0x28
 801dfec:	f7f4 f9b4 	bl	8012358 <GUI_MoveRect>
 801dff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dff2:	464a      	mov	r2, r9
 801dff4:	4651      	mov	r1, sl
 801dff6:	3008      	adds	r0, #8
 801dff8:	f7f4 f9ae 	bl	8012358 <GUI_MoveRect>
 801dffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dffe:	a80a      	add	r0, sp, #40	; 0x28
 801e000:	69da      	ldr	r2, [r3, #28]
 801e002:	6a1b      	ldr	r3, [r3, #32]
 801e004:	4614      	mov	r4, r2
 801e006:	9205      	str	r2, [sp, #20]
 801e008:	9307      	str	r3, [sp, #28]
 801e00a:	f7f3 fcc5 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e00e:	2300      	movs	r3, #0
 801e010:	9320      	str	r3, [sp, #128]	; 0x80
 801e012:	9321      	str	r3, [sp, #132]	; 0x84
 801e014:	9322      	str	r3, [sp, #136]	; 0x88
 801e016:	9323      	str	r3, [sp, #140]	; 0x8c
 801e018:	2c00      	cmp	r4, #0
 801e01a:	f000 80e7 	beq.w	801e1ec <_MoveDescendents+0x22c>
 801e01e:	9805      	ldr	r0, [sp, #20]
 801e020:	f7f3 fca6 	bl	8011970 <GUI_ALLOC_LockH>
 801e024:	464a      	mov	r2, r9
 801e026:	4651      	mov	r1, sl
 801e028:	900b      	str	r0, [sp, #44]	; 0x2c
 801e02a:	f7f4 f995 	bl	8012358 <GUI_MoveRect>
 801e02e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e030:	464a      	mov	r2, r9
 801e032:	4651      	mov	r1, sl
 801e034:	3008      	adds	r0, #8
 801e036:	f7f4 f98f 	bl	8012358 <GUI_MoveRect>
 801e03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e03c:	a80b      	add	r0, sp, #44	; 0x2c
 801e03e:	69da      	ldr	r2, [r3, #28]
 801e040:	6a1b      	ldr	r3, [r3, #32]
 801e042:	4614      	mov	r4, r2
 801e044:	9204      	str	r2, [sp, #16]
 801e046:	9308      	str	r3, [sp, #32]
 801e048:	f7f3 fca6 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e04c:	2300      	movs	r3, #0
 801e04e:	9324      	str	r3, [sp, #144]	; 0x90
 801e050:	9325      	str	r3, [sp, #148]	; 0x94
 801e052:	9326      	str	r3, [sp, #152]	; 0x98
 801e054:	9327      	str	r3, [sp, #156]	; 0x9c
 801e056:	2c00      	cmp	r4, #0
 801e058:	f000 80b6 	beq.w	801e1c8 <_MoveDescendents+0x208>
 801e05c:	9804      	ldr	r0, [sp, #16]
 801e05e:	f7f3 fc87 	bl	8011970 <GUI_ALLOC_LockH>
 801e062:	464a      	mov	r2, r9
 801e064:	4651      	mov	r1, sl
 801e066:	900c      	str	r0, [sp, #48]	; 0x30
 801e068:	f7f4 f976 	bl	8012358 <GUI_MoveRect>
 801e06c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e06e:	464a      	mov	r2, r9
 801e070:	4651      	mov	r1, sl
 801e072:	3008      	adds	r0, #8
 801e074:	f7f4 f970 	bl	8012358 <GUI_MoveRect>
 801e078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e07a:	a80c      	add	r0, sp, #48	; 0x30
 801e07c:	69da      	ldr	r2, [r3, #28]
 801e07e:	6a1b      	ldr	r3, [r3, #32]
 801e080:	4614      	mov	r4, r2
 801e082:	9202      	str	r2, [sp, #8]
 801e084:	9309      	str	r3, [sp, #36]	; 0x24
 801e086:	f7f3 fc87 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e08a:	2300      	movs	r3, #0
 801e08c:	9328      	str	r3, [sp, #160]	; 0xa0
 801e08e:	9329      	str	r3, [sp, #164]	; 0xa4
 801e090:	932a      	str	r3, [sp, #168]	; 0xa8
 801e092:	932b      	str	r3, [sp, #172]	; 0xac
 801e094:	2c00      	cmp	r4, #0
 801e096:	f000 8085 	beq.w	801e1a4 <_MoveDescendents+0x1e4>
 801e09a:	4654      	mov	r4, sl
 801e09c:	464d      	mov	r5, r9
 801e09e:	9802      	ldr	r0, [sp, #8]
 801e0a0:	f7f3 fc66 	bl	8011970 <GUI_ALLOC_LockH>
 801e0a4:	462a      	mov	r2, r5
 801e0a6:	4621      	mov	r1, r4
 801e0a8:	900d      	str	r0, [sp, #52]	; 0x34
 801e0aa:	f7f4 f955 	bl	8012358 <GUI_MoveRect>
 801e0ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e0b0:	462a      	mov	r2, r5
 801e0b2:	4621      	mov	r1, r4
 801e0b4:	3008      	adds	r0, #8
 801e0b6:	f7f4 f94f 	bl	8012358 <GUI_MoveRect>
 801e0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0bc:	a80d      	add	r0, sp, #52	; 0x34
 801e0be:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801e0c2:	6a1b      	ldr	r3, [r3, #32]
 801e0c4:	9303      	str	r3, [sp, #12]
 801e0c6:	f7f3 fc67 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	932c      	str	r3, [sp, #176]	; 0xb0
 801e0ce:	932d      	str	r3, [sp, #180]	; 0xb4
 801e0d0:	932e      	str	r3, [sp, #184]	; 0xb8
 801e0d2:	932f      	str	r3, [sp, #188]	; 0xbc
 801e0d4:	f1b9 0f00 	cmp.w	r9, #0
 801e0d8:	d052      	beq.n	801e180 <_MoveDescendents+0x1c0>
 801e0da:	9301      	str	r3, [sp, #4]
 801e0dc:	4648      	mov	r0, r9
 801e0de:	f7f3 fc47 	bl	8011970 <GUI_ALLOC_LockH>
 801e0e2:	462a      	mov	r2, r5
 801e0e4:	4621      	mov	r1, r4
 801e0e6:	900e      	str	r0, [sp, #56]	; 0x38
 801e0e8:	f7f4 f936 	bl	8012358 <GUI_MoveRect>
 801e0ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e0ee:	462a      	mov	r2, r5
 801e0f0:	4621      	mov	r1, r4
 801e0f2:	3008      	adds	r0, #8
 801e0f4:	f7f4 f930 	bl	8012358 <GUI_MoveRect>
 801e0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0fa:	a80e      	add	r0, sp, #56	; 0x38
 801e0fc:	69de      	ldr	r6, [r3, #28]
 801e0fe:	6a1b      	ldr	r3, [r3, #32]
 801e100:	9300      	str	r3, [sp, #0]
 801e102:	f7f3 fc49 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e106:	9b01      	ldr	r3, [sp, #4]
 801e108:	9330      	str	r3, [sp, #192]	; 0xc0
 801e10a:	9331      	str	r3, [sp, #196]	; 0xc4
 801e10c:	9332      	str	r3, [sp, #200]	; 0xc8
 801e10e:	9333      	str	r3, [sp, #204]	; 0xcc
 801e110:	b33e      	cbz	r6, 801e162 <_MoveDescendents+0x1a2>
 801e112:	af1a      	add	r7, sp, #104	; 0x68
 801e114:	4630      	mov	r0, r6
 801e116:	f7f3 fc2b 	bl	8011970 <GUI_ALLOC_LockH>
 801e11a:	462a      	mov	r2, r5
 801e11c:	4621      	mov	r1, r4
 801e11e:	900f      	str	r0, [sp, #60]	; 0x3c
 801e120:	f7f4 f91a 	bl	8012358 <GUI_MoveRect>
 801e124:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e126:	462a      	mov	r2, r5
 801e128:	4621      	mov	r1, r4
 801e12a:	3008      	adds	r0, #8
 801e12c:	f7f4 f914 	bl	8012358 <GUI_MoveRect>
 801e130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e132:	a80f      	add	r0, sp, #60	; 0x3c
 801e134:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 801e138:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801e13c:	f7f3 fc2c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e140:	4621      	mov	r1, r4
 801e142:	4650      	mov	r0, sl
 801e144:	462a      	mov	r2, r5
 801e146:	f7ff ff3b 	bl	801dfc0 <_MoveDescendents>
 801e14a:	4630      	mov	r0, r6
 801e14c:	4646      	mov	r6, r8
 801e14e:	a930      	add	r1, sp, #192	; 0xc0
 801e150:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 801e154:	9733      	str	r7, [sp, #204]	; 0xcc
 801e156:	941a      	str	r4, [sp, #104]	; 0x68
 801e158:	951b      	str	r5, [sp, #108]	; 0x6c
 801e15a:	f000 fc1f 	bl	801e99c <WM__SendMessage>
 801e15e:	2e00      	cmp	r6, #0
 801e160:	d1d8      	bne.n	801e114 <_MoveDescendents+0x154>
 801e162:	4648      	mov	r0, r9
 801e164:	ab18      	add	r3, sp, #96	; 0x60
 801e166:	f8dd 9000 	ldr.w	r9, [sp]
 801e16a:	a92c      	add	r1, sp, #176	; 0xb0
 801e16c:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 801e170:	932f      	str	r3, [sp, #188]	; 0xbc
 801e172:	9418      	str	r4, [sp, #96]	; 0x60
 801e174:	9519      	str	r5, [sp, #100]	; 0x64
 801e176:	f000 fc11 	bl	801e99c <WM__SendMessage>
 801e17a:	f1b9 0f00 	cmp.w	r9, #0
 801e17e:	d1ad      	bne.n	801e0dc <_MoveDescendents+0x11c>
 801e180:	9b03      	ldr	r3, [sp, #12]
 801e182:	a928      	add	r1, sp, #160	; 0xa0
 801e184:	9802      	ldr	r0, [sp, #8]
 801e186:	461e      	mov	r6, r3
 801e188:	9302      	str	r3, [sp, #8]
 801e18a:	ab16      	add	r3, sp, #88	; 0x58
 801e18c:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 801e190:	9416      	str	r4, [sp, #88]	; 0x58
 801e192:	932b      	str	r3, [sp, #172]	; 0xac
 801e194:	9517      	str	r5, [sp, #92]	; 0x5c
 801e196:	f000 fc01 	bl	801e99c <WM__SendMessage>
 801e19a:	2e00      	cmp	r6, #0
 801e19c:	f47f af7f 	bne.w	801e09e <_MoveDescendents+0xde>
 801e1a0:	46a2      	mov	sl, r4
 801e1a2:	46a9      	mov	r9, r5
 801e1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1a6:	a924      	add	r1, sp, #144	; 0x90
 801e1a8:	9804      	ldr	r0, [sp, #16]
 801e1aa:	461c      	mov	r4, r3
 801e1ac:	9304      	str	r3, [sp, #16]
 801e1ae:	ab14      	add	r3, sp, #80	; 0x50
 801e1b0:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 801e1b4:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 801e1b8:	9327      	str	r3, [sp, #156]	; 0x9c
 801e1ba:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 801e1be:	f000 fbed 	bl	801e99c <WM__SendMessage>
 801e1c2:	2c00      	cmp	r4, #0
 801e1c4:	f47f af4a 	bne.w	801e05c <_MoveDescendents+0x9c>
 801e1c8:	9b08      	ldr	r3, [sp, #32]
 801e1ca:	a920      	add	r1, sp, #128	; 0x80
 801e1cc:	9805      	ldr	r0, [sp, #20]
 801e1ce:	461c      	mov	r4, r3
 801e1d0:	9305      	str	r3, [sp, #20]
 801e1d2:	ab12      	add	r3, sp, #72	; 0x48
 801e1d4:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 801e1d8:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 801e1dc:	9323      	str	r3, [sp, #140]	; 0x8c
 801e1de:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801e1e2:	f000 fbdb 	bl	801e99c <WM__SendMessage>
 801e1e6:	2c00      	cmp	r4, #0
 801e1e8:	f47f af19 	bne.w	801e01e <_MoveDescendents+0x5e>
 801e1ec:	2303      	movs	r3, #3
 801e1ee:	9806      	ldr	r0, [sp, #24]
 801e1f0:	a91c      	add	r1, sp, #112	; 0x70
 801e1f2:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801e1f6:	931c      	str	r3, [sp, #112]	; 0x70
 801e1f8:	9b07      	ldr	r3, [sp, #28]
 801e1fa:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 801e1fe:	461c      	mov	r4, r3
 801e200:	9306      	str	r3, [sp, #24]
 801e202:	ab10      	add	r3, sp, #64	; 0x40
 801e204:	931f      	str	r3, [sp, #124]	; 0x7c
 801e206:	f000 fbc9 	bl	801e99c <WM__SendMessage>
 801e20a:	2c00      	cmp	r4, #0
 801e20c:	f47f aee8 	bne.w	801dfe0 <_MoveDescendents+0x20>
 801e210:	b035      	add	sp, #212	; 0xd4
 801e212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e216:	bf00      	nop

0801e218 <WM_MoveWindow>:
 801e218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e21c:	b08b      	sub	sp, #44	; 0x2c
 801e21e:	4604      	mov	r4, r0
 801e220:	460d      	mov	r5, r1
 801e222:	4616      	mov	r6, r2
 801e224:	f7f8 f81e 	bl	8016264 <GUI_Lock>
 801e228:	2300      	movs	r3, #0
 801e22a:	9307      	str	r3, [sp, #28]
 801e22c:	9306      	str	r3, [sp, #24]
 801e22e:	9308      	str	r3, [sp, #32]
 801e230:	9309      	str	r3, [sp, #36]	; 0x24
 801e232:	b10c      	cbz	r4, 801e238 <WM_MoveWindow+0x20>
 801e234:	b92d      	cbnz	r5, 801e242 <WM_MoveWindow+0x2a>
 801e236:	b926      	cbnz	r6, 801e242 <WM_MoveWindow+0x2a>
 801e238:	f7f8 f80a 	bl	8016250 <GUI_Unlock>
 801e23c:	b00b      	add	sp, #44	; 0x2c
 801e23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e242:	4620      	mov	r0, r4
 801e244:	f10d 0808 	add.w	r8, sp, #8
 801e248:	f7f3 fb92 	bl	8011970 <GUI_ALLOC_LockH>
 801e24c:	4603      	mov	r3, r0
 801e24e:	9001      	str	r0, [sp, #4]
 801e250:	4632      	mov	r2, r6
 801e252:	af0a      	add	r7, sp, #40	; 0x28
 801e254:	c803      	ldmia	r0, {r0, r1}
 801e256:	e888 0003 	stmia.w	r8, {r0, r1}
 801e25a:	4618      	mov	r0, r3
 801e25c:	4629      	mov	r1, r5
 801e25e:	f7f4 f87b 	bl	8012358 <GUI_MoveRect>
 801e262:	9801      	ldr	r0, [sp, #4]
 801e264:	4632      	mov	r2, r6
 801e266:	4629      	mov	r1, r5
 801e268:	3008      	adds	r0, #8
 801e26a:	f7f4 f875 	bl	8012358 <GUI_MoveRect>
 801e26e:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 801e272:	f8d3 901c 	ldr.w	r9, [r3, #28]
 801e276:	4638      	mov	r0, r7
 801e278:	f7f3 fb8e 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e27c:	4632      	mov	r2, r6
 801e27e:	4629      	mov	r1, r5
 801e280:	4648      	mov	r0, r9
 801e282:	f7ff fe9d 	bl	801dfc0 <_MoveDescendents>
 801e286:	4620      	mov	r0, r4
 801e288:	f7f3 fb72 	bl	8011970 <GUI_ALLOC_LockH>
 801e28c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e28e:	9001      	str	r0, [sp, #4]
 801e290:	0792      	lsls	r2, r2, #30
 801e292:	d501      	bpl.n	801e298 <WM_MoveWindow+0x80>
 801e294:	6981      	ldr	r1, [r0, #24]
 801e296:	b989      	cbnz	r1, 801e2bc <WM_MoveWindow+0xa4>
 801e298:	4638      	mov	r0, r7
 801e29a:	f7f3 fb7d 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e29e:	2203      	movs	r2, #3
 801e2a0:	ab04      	add	r3, sp, #16
 801e2a2:	a906      	add	r1, sp, #24
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	9206      	str	r2, [sp, #24]
 801e2a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e2aa:	9504      	str	r5, [sp, #16]
 801e2ac:	9605      	str	r6, [sp, #20]
 801e2ae:	f000 fb75 	bl	801e99c <WM__SendMessage>
 801e2b2:	f7f7 ffcd 	bl	8016250 <GUI_Unlock>
 801e2b6:	b00b      	add	sp, #44	; 0x2c
 801e2b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2bc:	6a02      	ldr	r2, [r0, #32]
 801e2be:	f7fe fe3d 	bl	801cf3c <WM__InvalidateParent>
 801e2c2:	9b01      	ldr	r3, [sp, #4]
 801e2c4:	4640      	mov	r0, r8
 801e2c6:	6a1a      	ldr	r2, [r3, #32]
 801e2c8:	6999      	ldr	r1, [r3, #24]
 801e2ca:	f7fe fe37 	bl	801cf3c <WM__InvalidateParent>
 801e2ce:	e7e3      	b.n	801e298 <WM_MoveWindow+0x80>

0801e2d0 <WM__DeleteAssocTimer>:
 801e2d0:	b570      	push	{r4, r5, r6, lr}
 801e2d2:	b082      	sub	sp, #8
 801e2d4:	4605      	mov	r5, r0
 801e2d6:	f7f7 ffc5 	bl	8016264 <GUI_Lock>
 801e2da:	4668      	mov	r0, sp
 801e2dc:	f002 f830 	bl	8020340 <GUI_TIMER__GetFirstTimer>
 801e2e0:	b178      	cbz	r0, 801e302 <WM__DeleteAssocTimer+0x32>
 801e2e2:	4604      	mov	r4, r0
 801e2e4:	2101      	movs	r1, #1
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	f002 f8cc 	bl	8020484 <GUI_TIMER_GetFlag>
 801e2ec:	9b00      	ldr	r3, [sp, #0]
 801e2ee:	4602      	mov	r2, r0
 801e2f0:	4669      	mov	r1, sp
 801e2f2:	4620      	mov	r0, r4
 801e2f4:	b103      	cbz	r3, 801e2f8 <WM__DeleteAssocTimer+0x28>
 801e2f6:	b942      	cbnz	r2, 801e30a <WM__DeleteAssocTimer+0x3a>
 801e2f8:	f002 f83a 	bl	8020370 <GUI_TIMER__GetNextTimerLin>
 801e2fc:	4604      	mov	r4, r0
 801e2fe:	2c00      	cmp	r4, #0
 801e300:	d1f0      	bne.n	801e2e4 <WM__DeleteAssocTimer+0x14>
 801e302:	f7f7 ffa5 	bl	8016250 <GUI_Unlock>
 801e306:	b002      	add	sp, #8
 801e308:	bd70      	pop	{r4, r5, r6, pc}
 801e30a:	4618      	mov	r0, r3
 801e30c:	f7f3 fb26 	bl	801195c <GUI_ALLOC_h2p>
 801e310:	6843      	ldr	r3, [r0, #4]
 801e312:	4669      	mov	r1, sp
 801e314:	4620      	mov	r0, r4
 801e316:	42ab      	cmp	r3, r5
 801e318:	d1ee      	bne.n	801e2f8 <WM__DeleteAssocTimer+0x28>
 801e31a:	9e00      	ldr	r6, [sp, #0]
 801e31c:	f002 f828 	bl	8020370 <GUI_TIMER__GetNextTimerLin>
 801e320:	4604      	mov	r4, r0
 801e322:	2e00      	cmp	r6, #0
 801e324:	d0eb      	beq.n	801e2fe <WM__DeleteAssocTimer+0x2e>
 801e326:	f7f7 ff9d 	bl	8016264 <GUI_Lock>
 801e32a:	4630      	mov	r0, r6
 801e32c:	f7f3 fb20 	bl	8011970 <GUI_ALLOC_LockH>
 801e330:	4603      	mov	r3, r0
 801e332:	6800      	ldr	r0, [r0, #0]
 801e334:	9301      	str	r3, [sp, #4]
 801e336:	f002 f83b 	bl	80203b0 <GUI_TIMER_Delete>
 801e33a:	a801      	add	r0, sp, #4
 801e33c:	f7f3 fb2c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e340:	4630      	mov	r0, r6
 801e342:	f7f3 fcad 	bl	8011ca0 <GUI_ALLOC_Free>
 801e346:	f7f7 ff83 	bl	8016250 <GUI_Unlock>
 801e34a:	2c00      	cmp	r4, #0
 801e34c:	d1ca      	bne.n	801e2e4 <WM__DeleteAssocTimer+0x14>
 801e34e:	e7d8      	b.n	801e302 <WM__DeleteAssocTimer+0x32>

0801e350 <WM__SendTouchMessage>:
 801e350:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e352:	68cc      	ldr	r4, [r1, #12]
 801e354:	b087      	sub	sp, #28
 801e356:	460d      	mov	r5, r1
 801e358:	4607      	mov	r7, r0
 801e35a:	b18c      	cbz	r4, 801e380 <WM__SendTouchMessage+0x30>
 801e35c:	f7f3 fb08 	bl	8011970 <GUI_ALLOC_LockH>
 801e360:	6822      	ldr	r2, [r4, #0]
 801e362:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e366:	a906      	add	r1, sp, #24
 801e368:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801e36c:	1ad2      	subs	r2, r2, r3
 801e36e:	6863      	ldr	r3, [r4, #4]
 801e370:	f841 0d14 	str.w	r0, [r1, #-20]!
 801e374:	4608      	mov	r0, r1
 801e376:	1b9b      	subs	r3, r3, r6
 801e378:	e884 000c 	stmia.w	r4, {r2, r3}
 801e37c:	f7f3 fb0c 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e380:	ae02      	add	r6, sp, #8
 801e382:	f04f 0e0d 	mov.w	lr, #13
 801e386:	463c      	mov	r4, r7
 801e388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801e38c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801e390:	9704      	str	r7, [sp, #16]
 801e392:	f8cd e008 	str.w	lr, [sp, #8]
 801e396:	4620      	mov	r0, r4
 801e398:	f7ff fd54 	bl	801de44 <WM_IsWindow>
 801e39c:	b170      	cbz	r0, 801e3bc <WM__SendTouchMessage+0x6c>
 801e39e:	4620      	mov	r0, r4
 801e3a0:	f7ff fd42 	bl	801de28 <WM_GetParent>
 801e3a4:	4604      	mov	r4, r0
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	d0f5      	beq.n	801e396 <WM__SendTouchMessage+0x46>
 801e3aa:	4631      	mov	r1, r6
 801e3ac:	9505      	str	r5, [sp, #20]
 801e3ae:	f000 fb13 	bl	801e9d8 <WM__SendMessageIfEnabled>
 801e3b2:	4620      	mov	r0, r4
 801e3b4:	f7ff fd46 	bl	801de44 <WM_IsWindow>
 801e3b8:	2800      	cmp	r0, #0
 801e3ba:	d1f0      	bne.n	801e39e <WM__SendTouchMessage+0x4e>
 801e3bc:	4629      	mov	r1, r5
 801e3be:	4638      	mov	r0, r7
 801e3c0:	f000 fb0a 	bl	801e9d8 <WM__SendMessageIfEnabled>
 801e3c4:	b007      	add	sp, #28
 801e3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e3c8 <WM_HandlePID>:
 801e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3cc:	b099      	sub	sp, #100	; 0x64
 801e3ce:	2300      	movs	r3, #0
 801e3d0:	ac08      	add	r4, sp, #32
 801e3d2:	9308      	str	r3, [sp, #32]
 801e3d4:	6063      	str	r3, [r4, #4]
 801e3d6:	60a3      	str	r3, [r4, #8]
 801e3d8:	f001 fb82 	bl	801fae0 <GUI_PID_IsEmpty>
 801e3dc:	b120      	cbz	r0, 801e3e8 <WM_HandlePID+0x20>
 801e3de:	2700      	movs	r7, #0
 801e3e0:	4638      	mov	r0, r7
 801e3e2:	b019      	add	sp, #100	; 0x64
 801e3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e8:	ae0b      	add	r6, sp, #44	; 0x2c
 801e3ea:	4607      	mov	r7, r0
 801e3ec:	4630      	mov	r0, r6
 801e3ee:	f001 fac5 	bl	801f97c <GUI_PID_GetState>
 801e3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3f4:	3301      	adds	r3, #1
 801e3f6:	f000 80a2 	beq.w	801e53e <WM_HandlePID+0x176>
 801e3fa:	4db9      	ldr	r5, [pc, #740]	; (801e6e0 <WM_HandlePID+0x318>)
 801e3fc:	f7f7 ff32 	bl	8016264 <GUI_Lock>
 801e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e402:	2b00      	cmp	r3, #0
 801e404:	f2c0 8115 	blt.w	801e632 <WM_HandlePID+0x26a>
 801e408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e40a:	2a00      	cmp	r2, #0
 801e40c:	db09      	blt.n	801e422 <WM_HandlePID+0x5a>
 801e40e:	48b5      	ldr	r0, [pc, #724]	; (801e6e4 <WM_HandlePID+0x31c>)
 801e410:	49b5      	ldr	r1, [pc, #724]	; (801e6e8 <WM_HandlePID+0x320>)
 801e412:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e416:	f9b1 1000 	ldrsh.w	r1, [r1]
 801e41a:	4403      	add	r3, r0
 801e41c:	440a      	add	r2, r1
 801e41e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e420:	920c      	str	r2, [sp, #48]	; 0x30
 801e422:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 801e426:	2801      	cmp	r0, #1
 801e428:	bf8c      	ite	hi
 801e42a:	6828      	ldrhi	r0, [r5, #0]
 801e42c:	6028      	strls	r0, [r5, #0]
 801e42e:	f7f4 fb41 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 801e432:	2800      	cmp	r0, #0
 801e434:	d07d      	beq.n	801e532 <WM_HandlePID+0x16a>
 801e436:	aa04      	add	r2, sp, #16
 801e438:	a903      	add	r1, sp, #12
 801e43a:	6828      	ldr	r0, [r5, #0]
 801e43c:	f7f6 fcf2 	bl	8014e24 <GUI_GetLayerPosEx>
 801e440:	a806      	add	r0, sp, #24
 801e442:	f000 fb93 	bl	801eb6c <WM__AddCriticalHandle>
 801e446:	682b      	ldr	r3, [r5, #0]
 801e448:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 801e6f8 <WM_HandlePID+0x330>
 801e44c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e450:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e452:	9803      	ldr	r0, [sp, #12]
 801e454:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801e458:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e45a:	1a10      	subs	r0, r2, r0
 801e45c:	9f04      	ldr	r7, [sp, #16]
 801e45e:	691a      	ldr	r2, [r3, #16]
 801e460:	1bc9      	subs	r1, r1, r7
 801e462:	900b      	str	r0, [sp, #44]	; 0x2c
 801e464:	4290      	cmp	r0, r2
 801e466:	910c      	str	r1, [sp, #48]	; 0x30
 801e468:	d103      	bne.n	801e472 <WM_HandlePID+0xaa>
 801e46a:	695a      	ldr	r2, [r3, #20]
 801e46c:	4291      	cmp	r1, r2
 801e46e:	f000 8158 	beq.w	801e722 <WM_HandlePID+0x35a>
 801e472:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 801e476:	f001 fa2f 	bl	801f8d8 <GUI_CURSOR_SetPositionEx>
 801e47a:	f8d8 3000 	ldr.w	r3, [r8]
 801e47e:	b113      	cbz	r3, 801e486 <WM_HandlePID+0xbe>
 801e480:	2100      	movs	r1, #0
 801e482:	4630      	mov	r0, r6
 801e484:	4798      	blx	r3
 801e486:	4b99      	ldr	r3, [pc, #612]	; (801e6ec <WM_HandlePID+0x324>)
 801e488:	682a      	ldr	r2, [r5, #0]
 801e48a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e48e:	2800      	cmp	r0, #0
 801e490:	f000 813a 	beq.w	801e708 <WM_HandlePID+0x340>
 801e494:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e498:	9007      	str	r0, [sp, #28]
 801e49a:	b113      	cbz	r3, 801e4a2 <WM_HandlePID+0xda>
 801e49c:	9907      	ldr	r1, [sp, #28]
 801e49e:	4630      	mov	r0, r6
 801e4a0:	4798      	blx	r3
 801e4a2:	682b      	ldr	r3, [r5, #0]
 801e4a4:	f8df 9258 	ldr.w	r9, [pc, #600]	; 801e700 <WM_HandlePID+0x338>
 801e4a8:	00db      	lsls	r3, r3, #3
 801e4aa:	4f8d      	ldr	r7, [pc, #564]	; (801e6e0 <WM_HandlePID+0x318>)
 801e4ac:	eb09 0103 	add.w	r1, r9, r3
 801e4b0:	684a      	ldr	r2, [r1, #4]
 801e4b2:	9807      	ldr	r0, [sp, #28]
 801e4b4:	4282      	cmp	r2, r0
 801e4b6:	d002      	beq.n	801e4be <WM_HandlePID+0xf6>
 801e4b8:	2a00      	cmp	r2, #0
 801e4ba:	f040 80cc 	bne.w	801e656 <WM_HandlePID+0x28e>
 801e4be:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801e4c2:	f1ba 0f00 	cmp.w	sl, #0
 801e4c6:	d04c      	beq.n	801e562 <WM_HandlePID+0x19a>
 801e4c8:	4b89      	ldr	r3, [pc, #548]	; (801e6f0 <WM_HandlePID+0x328>)
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	db07      	blt.n	801e4e0 <WM_HandlePID+0x118>
 801e4d0:	4a88      	ldr	r2, [pc, #544]	; (801e6f4 <WM_HandlePID+0x32c>)
 801e4d2:	4650      	mov	r0, sl
 801e4d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801e4d8:	f000 fa44 	bl	801e964 <WM__IsAncestor>
 801e4dc:	2800      	cmp	r0, #0
 801e4de:	d040      	beq.n	801e562 <WM_HandlePID+0x19a>
 801e4e0:	682a      	ldr	r2, [r5, #0]
 801e4e2:	4650      	mov	r0, sl
 801e4e4:	f8df b214 	ldr.w	fp, [pc, #532]	; 801e6fc <WM_HandlePID+0x334>
 801e4e8:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801e4ec:	6851      	ldr	r1, [r2, #4]
 801e4ee:	f000 fa39 	bl	801e964 <WM__IsAncestor>
 801e4f2:	682f      	ldr	r7, [r5, #0]
 801e4f4:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e4f8:	eb0b 030e 	add.w	r3, fp, lr
 801e4fc:	685a      	ldr	r2, [r3, #4]
 801e4fe:	685b      	ldr	r3, [r3, #4]
 801e500:	2a00      	cmp	r2, #0
 801e502:	bf18      	it	ne
 801e504:	459a      	cmpne	sl, r3
 801e506:	d02e      	beq.n	801e566 <WM_HandlePID+0x19e>
 801e508:	bb68      	cbnz	r0, 801e566 <WM_HandlePID+0x19e>
 801e50a:	f04f 0900 	mov.w	r9, #0
 801e50e:	007b      	lsls	r3, r7, #1
 801e510:	443b      	add	r3, r7
 801e512:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 801e516:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e51a:	f108 0810 	add.w	r8, r8, #16
 801e51e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801e522:	4639      	mov	r1, r7
 801e524:	4630      	mov	r0, r6
 801e526:	f002 f95b 	bl	80207e0 <WM_PID__SetPrevState>
 801e52a:	a806      	add	r0, sp, #24
 801e52c:	464f      	mov	r7, r9
 801e52e:	f000 fb25 	bl	801eb7c <WM__RemoveCriticalHandle>
 801e532:	f7f7 fe8d 	bl	8016250 <GUI_Unlock>
 801e536:	4638      	mov	r0, r7
 801e538:	b019      	add	sp, #100	; 0x64
 801e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e53e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e540:	4d67      	ldr	r5, [pc, #412]	; (801e6e0 <WM_HandlePID+0x318>)
 801e542:	3301      	adds	r3, #1
 801e544:	f47f af5a 	bne.w	801e3fc <WM_HandlePID+0x34>
 801e548:	682b      	ldr	r3, [r5, #0]
 801e54a:	4a6b      	ldr	r2, [pc, #428]	; (801e6f8 <WM_HandlePID+0x330>)
 801e54c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e550:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801e554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e558:	7e1b      	ldrb	r3, [r3, #24]
 801e55a:	428b      	cmp	r3, r1
 801e55c:	f47f af4e 	bne.w	801e3fc <WM_HandlePID+0x34>
 801e560:	e73d      	b.n	801e3de <WM_HandlePID+0x16>
 801e562:	682f      	ldr	r7, [r5, #0]
 801e564:	e7d1      	b.n	801e50a <WM_HandlePID+0x142>
 801e566:	007b      	lsls	r3, r7, #1
 801e568:	44f1      	add	r9, lr
 801e56a:	9907      	ldr	r1, [sp, #28]
 801e56c:	19da      	adds	r2, r3, r7
 801e56e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e572:	f8c9 1004 	str.w	r1, [r9, #4]
 801e576:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801e57a:	f8df b17c 	ldr.w	fp, [pc, #380]	; 801e6f8 <WM_HandlePID+0x330>
 801e57e:	f892 9018 	ldrb.w	r9, [r2, #24]
 801e582:	45e1      	cmp	r9, ip
 801e584:	d003      	beq.n	801e58e <WM_HandlePID+0x1c6>
 801e586:	9a07      	ldr	r2, [sp, #28]
 801e588:	2a00      	cmp	r2, #0
 801e58a:	f040 80d3 	bne.w	801e734 <WM_HandlePID+0x36c>
 801e58e:	ea59 0a0c 	orrs.w	sl, r9, ip
 801e592:	f000 80be 	beq.w	801e712 <WM_HandlePID+0x34a>
 801e596:	f8df 916c 	ldr.w	r9, [pc, #364]	; 801e704 <WM_HandlePID+0x33c>
 801e59a:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e59e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e5a2:	eb09 020e 	add.w	r2, r9, lr
 801e5a6:	9114      	str	r1, [sp, #80]	; 0x50
 801e5a8:	6850      	ldr	r0, [r2, #4]
 801e5aa:	9907      	ldr	r1, [sp, #28]
 801e5ac:	4288      	cmp	r0, r1
 801e5ae:	d020      	beq.n	801e5f2 <WM_HandlePID+0x22a>
 801e5b0:	6852      	ldr	r2, [r2, #4]
 801e5b2:	b1f2      	cbz	r2, 801e5f2 <WM_HandlePID+0x22a>
 801e5b4:	f1bc 0f00 	cmp.w	ip, #0
 801e5b8:	f040 8154 	bne.w	801e864 <WM_HandlePID+0x49c>
 801e5bc:	443b      	add	r3, r7
 801e5be:	4622      	mov	r2, r4
 801e5c0:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
 801e5c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801e5c8:	6919      	ldr	r1, [r3, #16]
 801e5ca:	695b      	ldr	r3, [r3, #20]
 801e5cc:	9108      	str	r1, [sp, #32]
 801e5ce:	9309      	str	r3, [sp, #36]	; 0x24
 801e5d0:	44ce      	add	lr, r9
 801e5d2:	a914      	add	r1, sp, #80	; 0x50
 801e5d4:	9217      	str	r2, [sp, #92]	; 0x5c
 801e5d6:	f8de 0004 	ldr.w	r0, [lr, #4]
 801e5da:	f7ff feb9 	bl	801e350 <WM__SendTouchMessage>
 801e5de:	682f      	ldr	r7, [r5, #0]
 801e5e0:	2100      	movs	r1, #0
 801e5e2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e5e6:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e5ea:	007b      	lsls	r3, r7, #1
 801e5ec:	eb09 020e 	add.w	r2, r9, lr
 801e5f0:	6051      	str	r1, [r2, #4]
 801e5f2:	19da      	adds	r2, r3, r7
 801e5f4:	9907      	ldr	r1, [sp, #28]
 801e5f6:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801e5fa:	f882 c018 	strb.w	ip, [r2, #24]
 801e5fe:	2900      	cmp	r1, #0
 801e600:	f000 808c 	beq.w	801e71c <WM_HandlePID+0x354>
 801e604:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e60c:	f1bc 0f00 	cmp.w	ip, #0
 801e610:	f000 8107 	beq.w	801e822 <WM_HandlePID+0x45a>
 801e614:	44f1      	add	r9, lr
 801e616:	9b07      	ldr	r3, [sp, #28]
 801e618:	f8c9 3004 	str.w	r3, [r9, #4]
 801e61c:	9807      	ldr	r0, [sp, #28]
 801e61e:	a914      	add	r1, sp, #80	; 0x50
 801e620:	9417      	str	r4, [sp, #92]	; 0x5c
 801e622:	f04f 0901 	mov.w	r9, #1
 801e626:	f7ff fe93 	bl	801e350 <WM__SendTouchMessage>
 801e62a:	682f      	ldr	r7, [r5, #0]
 801e62c:	fa07 f309 	lsl.w	r3, r7, r9
 801e630:	e76e      	b.n	801e510 <WM_HandlePID+0x148>
 801e632:	3301      	adds	r3, #1
 801e634:	f47f aef5 	bne.w	801e422 <WM_HandlePID+0x5a>
 801e638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e63a:	3301      	adds	r3, #1
 801e63c:	f47f aef1 	bne.w	801e422 <WM_HandlePID+0x5a>
 801e640:	682b      	ldr	r3, [r5, #0]
 801e642:	4a2d      	ldr	r2, [pc, #180]	; (801e6f8 <WM_HandlePID+0x330>)
 801e644:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e64c:	691a      	ldr	r2, [r3, #16]
 801e64e:	695b      	ldr	r3, [r3, #20]
 801e650:	920b      	str	r2, [sp, #44]	; 0x2c
 801e652:	930c      	str	r3, [sp, #48]	; 0x30
 801e654:	e6e5      	b.n	801e422 <WM_HandlePID+0x5a>
 801e656:	f8d1 a004 	ldr.w	sl, [r1, #4]
 801e65a:	f1ba 0f00 	cmp.w	sl, #0
 801e65e:	f43f af2e 	beq.w	801e4be <WM_HandlePID+0xf6>
 801e662:	4a23      	ldr	r2, [pc, #140]	; (801e6f0 <WM_HandlePID+0x328>)
 801e664:	6812      	ldr	r2, [r2, #0]
 801e666:	2a00      	cmp	r2, #0
 801e668:	db0a      	blt.n	801e680 <WM_HandlePID+0x2b8>
 801e66a:	4b22      	ldr	r3, [pc, #136]	; (801e6f4 <WM_HandlePID+0x32c>)
 801e66c:	4650      	mov	r0, sl
 801e66e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e672:	f000 f977 	bl	801e964 <WM__IsAncestor>
 801e676:	2800      	cmp	r0, #0
 801e678:	f43f af21 	beq.w	801e4be <WM_HandlePID+0xf6>
 801e67c:	683b      	ldr	r3, [r7, #0]
 801e67e:	00db      	lsls	r3, r3, #3
 801e680:	4f1e      	ldr	r7, [pc, #120]	; (801e6fc <WM_HandlePID+0x334>)
 801e682:	4650      	mov	r0, sl
 801e684:	443b      	add	r3, r7
 801e686:	6859      	ldr	r1, [r3, #4]
 801e688:	f000 f96c 	bl	801e964 <WM__IsAncestor>
 801e68c:	682b      	ldr	r3, [r5, #0]
 801e68e:	00db      	lsls	r3, r3, #3
 801e690:	441f      	add	r7, r3
 801e692:	6879      	ldr	r1, [r7, #4]
 801e694:	687a      	ldr	r2, [r7, #4]
 801e696:	4592      	cmp	sl, r2
 801e698:	bf18      	it	ne
 801e69a:	2900      	cmpne	r1, #0
 801e69c:	d002      	beq.n	801e6a4 <WM_HandlePID+0x2dc>
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	f43f af0d 	beq.w	801e4be <WM_HandlePID+0xf6>
 801e6a4:	444b      	add	r3, r9
 801e6a6:	4f16      	ldr	r7, [pc, #88]	; (801e700 <WM_HandlePID+0x338>)
 801e6a8:	6858      	ldr	r0, [r3, #4]
 801e6aa:	f000 f96d 	bl	801e988 <WM__IsEnabled>
 801e6ae:	2800      	cmp	r0, #0
 801e6b0:	f43f af05 	beq.w	801e4be <WM_HandlePID+0xf6>
 801e6b4:	682b      	ldr	r3, [r5, #0]
 801e6b6:	2212      	movs	r2, #18
 801e6b8:	9417      	str	r4, [sp, #92]	; 0x5c
 801e6ba:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801e6be:	9214      	str	r2, [sp, #80]	; 0x50
 801e6c0:	685b      	ldr	r3, [r3, #4]
 801e6c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e6c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e6ca:	4618      	mov	r0, r3
 801e6cc:	a914      	add	r1, sp, #80	; 0x50
 801e6ce:	f7ff fe3f 	bl	801e350 <WM__SendTouchMessage>
 801e6d2:	682b      	ldr	r3, [r5, #0]
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801e6da:	605a      	str	r2, [r3, #4]
 801e6dc:	e6ef      	b.n	801e4be <WM_HandlePID+0xf6>
 801e6de:	bf00      	nop
 801e6e0:	2002b014 	.word	0x2002b014
 801e6e4:	2002afa8 	.word	0x2002afa8
 801e6e8:	2002af98 	.word	0x2002af98
 801e6ec:	2002b038 	.word	0x2002b038
 801e6f0:	20000074 	.word	0x20000074
 801e6f4:	2002aff4 	.word	0x2002aff4
 801e6f8:	200003f8 	.word	0x200003f8
 801e6fc:	2002b068 	.word	0x2002b068
 801e700:	2002b048 	.word	0x2002b048
 801e704:	2002b058 	.word	0x2002b058
 801e708:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e70a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e70c:	f002 fa48 	bl	8020ba0 <WM_Screen2hWin>
 801e710:	e6c0      	b.n	801e494 <WM_HandlePID+0xcc>
 801e712:	9807      	ldr	r0, [sp, #28]
 801e714:	2800      	cmp	r0, #0
 801e716:	d17b      	bne.n	801e810 <WM_HandlePID+0x448>
 801e718:	4681      	mov	r9, r0
 801e71a:	e6f9      	b.n	801e510 <WM_HandlePID+0x148>
 801e71c:	f04f 0901 	mov.w	r9, #1
 801e720:	e6f6      	b.n	801e510 <WM_HandlePID+0x148>
 801e722:	7e1a      	ldrb	r2, [r3, #24]
 801e724:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801e728:	429a      	cmp	r2, r3
 801e72a:	f47f aea2 	bne.w	801e472 <WM_HandlePID+0xaa>
 801e72e:	f04f 0900 	mov.w	r9, #0
 801e732:	e6fa      	b.n	801e52a <WM_HandlePID+0x162>
 801e734:	9807      	ldr	r0, [sp, #28]
 801e736:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801e73a:	f7f3 f919 	bl	8011970 <GUI_ALLOC_LockH>
 801e73e:	682b      	ldr	r3, [r5, #0]
 801e740:	4607      	mov	r7, r0
 801e742:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801e746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e74a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e74c:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 801e750:	a805      	add	r0, sp, #20
 801e752:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801e756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e758:	9705      	str	r7, [sp, #20]
 801e75a:	7e1b      	ldrb	r3, [r3, #24]
 801e75c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 801e760:	f9b7 e000 	ldrsh.w	lr, [r7]
 801e764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e768:	ebce 0101 	rsb	r1, lr, r1
 801e76c:	1ad2      	subs	r2, r2, r3
 801e76e:	9111      	str	r1, [sp, #68]	; 0x44
 801e770:	9212      	str	r2, [sp, #72]	; 0x48
 801e772:	f7f3 f911 	bl	8011998 <GUI_ALLOC_UnlockH>
 801e776:	f8d5 e000 	ldr.w	lr, [r5]
 801e77a:	aa11      	add	r2, sp, #68	; 0x44
 801e77c:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801e780:	f04f 0c11 	mov.w	ip, #17
 801e784:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 801e788:	9217      	str	r2, [sp, #92]	; 0x5c
 801e78a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801e78e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 801e792:	f103 0210 	add.w	r2, r3, #16
 801e796:	ca07      	ldmia	r2, {r0, r1, r2}
 801e798:	761f      	strb	r7, [r3, #24]
 801e79a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801e79e:	4f52      	ldr	r7, [pc, #328]	; (801e8e8 <WM_HandlePID+0x520>)
 801e7a0:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d045      	beq.n	801e834 <WM_HandlePID+0x46c>
 801e7a8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 801e8f4 <WM_HandlePID+0x52c>
 801e7ac:	a914      	add	r1, sp, #80	; 0x50
 801e7ae:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 801e7b2:	f8de b004 	ldr.w	fp, [lr, #4]
 801e7b6:	9b07      	ldr	r3, [sp, #28]
 801e7b8:	f8ce 3004 	str.w	r3, [lr, #4]
 801e7bc:	f8de 3004 	ldr.w	r3, [lr, #4]
 801e7c0:	9807      	ldr	r0, [sp, #28]
 801e7c2:	9300      	str	r3, [sp, #0]
 801e7c4:	f000 f908 	bl	801e9d8 <WM__SendMessageIfEnabled>
 801e7c8:	683f      	ldr	r7, [r7, #0]
 801e7ca:	9b00      	ldr	r3, [sp, #0]
 801e7cc:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e7d0:	eb09 020e 	add.w	r2, r9, lr
 801e7d4:	6852      	ldr	r2, [r2, #4]
 801e7d6:	4293      	cmp	r3, r2
 801e7d8:	d003      	beq.n	801e7e2 <WM_HandlePID+0x41a>
 801e7da:	44ce      	add	lr, r9
 801e7dc:	f8de 3004 	ldr.w	r3, [lr, #4]
 801e7e0:	9307      	str	r3, [sp, #28]
 801e7e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 801e7e6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801e7ea:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 801e7ee:	3310      	adds	r3, #16
 801e7f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e7f4:	f1bb 0f00 	cmp.w	fp, #0
 801e7f8:	d136      	bne.n	801e868 <WM_HandlePID+0x4a0>
 801e7fa:	682f      	ldr	r7, [r5, #0]
 801e7fc:	493b      	ldr	r1, [pc, #236]	; (801e8ec <WM_HandlePID+0x524>)
 801e7fe:	007b      	lsls	r3, r7, #1
 801e800:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e804:	19da      	adds	r2, r3, r7
 801e806:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e80a:	f892 9018 	ldrb.w	r9, [r2, #24]
 801e80e:	e6be      	b.n	801e58e <WM_HandlePID+0x1c6>
 801e810:	9807      	ldr	r0, [sp, #28]
 801e812:	f000 f8b9 	bl	801e988 <WM__IsEnabled>
 801e816:	2800      	cmp	r0, #0
 801e818:	d135      	bne.n	801e886 <WM_HandlePID+0x4be>
 801e81a:	682f      	ldr	r7, [r5, #0]
 801e81c:	4681      	mov	r9, r0
 801e81e:	007b      	lsls	r3, r7, #1
 801e820:	e676      	b.n	801e510 <WM_HandlePID+0x148>
 801e822:	4b33      	ldr	r3, [pc, #204]	; (801e8f0 <WM_HandlePID+0x528>)
 801e824:	781b      	ldrb	r3, [r3, #0]
 801e826:	2b00      	cmp	r3, #0
 801e828:	d13d      	bne.n	801e8a6 <WM_HandlePID+0x4de>
 801e82a:	44f1      	add	r9, lr
 801e82c:	2300      	movs	r3, #0
 801e82e:	f8c9 3004 	str.w	r3, [r9, #4]
 801e832:	e6f3      	b.n	801e61c <WM_HandlePID+0x254>
 801e834:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 801e8f4 <WM_HandlePID+0x52c>
 801e838:	a914      	add	r1, sp, #80	; 0x50
 801e83a:	9301      	str	r3, [sp, #4]
 801e83c:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 801e840:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e844:	9807      	ldr	r0, [sp, #28]
 801e846:	9200      	str	r2, [sp, #0]
 801e848:	f000 f8c6 	bl	801e9d8 <WM__SendMessageIfEnabled>
 801e84c:	683f      	ldr	r7, [r7, #0]
 801e84e:	9a00      	ldr	r2, [sp, #0]
 801e850:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e854:	9b01      	ldr	r3, [sp, #4]
 801e856:	eb09 010e 	add.w	r1, r9, lr
 801e85a:	6849      	ldr	r1, [r1, #4]
 801e85c:	4291      	cmp	r1, r2
 801e85e:	d033      	beq.n	801e8c8 <WM_HandlePID+0x500>
 801e860:	469b      	mov	fp, r3
 801e862:	e7ba      	b.n	801e7da <WM_HandlePID+0x412>
 801e864:	2200      	movs	r2, #0
 801e866:	e6b3      	b.n	801e5d0 <WM_HandlePID+0x208>
 801e868:	4658      	mov	r0, fp
 801e86a:	f7ff faeb 	bl	801de44 <WM_IsWindow>
 801e86e:	682f      	ldr	r7, [r5, #0]
 801e870:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e874:	007b      	lsls	r3, r7, #1
 801e876:	b9e0      	cbnz	r0, 801e8b2 <WM_HandlePID+0x4ea>
 801e878:	19da      	adds	r2, r3, r7
 801e87a:	491c      	ldr	r1, [pc, #112]	; (801e8ec <WM_HandlePID+0x524>)
 801e87c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e880:	f892 9018 	ldrb.w	r9, [r2, #24]
 801e884:	e683      	b.n	801e58e <WM_HandlePID+0x1c6>
 801e886:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e88a:	9f07      	ldr	r7, [sp, #28]
 801e88c:	2310      	movs	r3, #16
 801e88e:	9417      	str	r4, [sp, #92]	; 0x5c
 801e890:	46d1      	mov	r9, sl
 801e892:	9314      	str	r3, [sp, #80]	; 0x50
 801e894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801e898:	4638      	mov	r0, r7
 801e89a:	a914      	add	r1, sp, #80	; 0x50
 801e89c:	f7ff fd58 	bl	801e350 <WM__SendTouchMessage>
 801e8a0:	682f      	ldr	r7, [r5, #0]
 801e8a2:	007b      	lsls	r3, r7, #1
 801e8a4:	e634      	b.n	801e510 <WM_HandlePID+0x148>
 801e8a6:	f002 f991 	bl	8020bcc <WM_ReleaseCapture>
 801e8aa:	682f      	ldr	r7, [r5, #0]
 801e8ac:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 801e8b0:	e7bb      	b.n	801e82a <WM_HandlePID+0x462>
 801e8b2:	19da      	adds	r2, r3, r7
 801e8b4:	490d      	ldr	r1, [pc, #52]	; (801e8ec <WM_HandlePID+0x524>)
 801e8b6:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 801e8ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e8be:	f8c9 b004 	str.w	fp, [r9, #4]
 801e8c2:	f892 9018 	ldrb.w	r9, [r2, #24]
 801e8c6:	e662      	b.n	801e58e <WM_HandlePID+0x1c6>
 801e8c8:	007b      	lsls	r3, r7, #1
 801e8ca:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e8ce:	19da      	adds	r2, r3, r7
 801e8d0:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 801e8d4:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 801e8d8:	f10b 0e10 	add.w	lr, fp, #16
 801e8dc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 801e8e0:	f89b 9018 	ldrb.w	r9, [fp, #24]
 801e8e4:	e653      	b.n	801e58e <WM_HandlePID+0x1c6>
 801e8e6:	bf00      	nop
 801e8e8:	2002b014 	.word	0x2002b014
 801e8ec:	200003f8 	.word	0x200003f8
 801e8f0:	2002b018 	.word	0x2002b018
 801e8f4:	2002b058 	.word	0x2002b058

0801e8f8 <WM__GetOrgX_AA>:
 801e8f8:	4b05      	ldr	r3, [pc, #20]	; (801e910 <WM__GetOrgX_AA+0x18>)
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801e900:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801e902:	b11a      	cbz	r2, 801e90c <WM__GetOrgX_AA+0x14>
 801e904:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801e908:	fb03 f000 	mul.w	r0, r3, r0
 801e90c:	4770      	bx	lr
 801e90e:	bf00      	nop
 801e910:	20000018 	.word	0x20000018

0801e914 <WM__GetOrgY_AA>:
 801e914:	4b05      	ldr	r3, [pc, #20]	; (801e92c <WM__GetOrgY_AA+0x18>)
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801e91c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801e91e:	b11a      	cbz	r2, 801e928 <WM__GetOrgY_AA+0x14>
 801e920:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801e924:	fb03 f000 	mul.w	r0, r3, r0
 801e928:	4770      	bx	lr
 801e92a:	bf00      	nop
 801e92c:	20000018 	.word	0x20000018

0801e930 <WM__GetPrevSibling>:
 801e930:	b538      	push	{r3, r4, r5, lr}
 801e932:	4605      	mov	r5, r0
 801e934:	f7ff fa78 	bl	801de28 <WM_GetParent>
 801e938:	b910      	cbnz	r0, 801e940 <WM__GetPrevSibling+0x10>
 801e93a:	2400      	movs	r4, #0
 801e93c:	4620      	mov	r0, r4
 801e93e:	bd38      	pop	{r3, r4, r5, pc}
 801e940:	f7f3 f80c 	bl	801195c <GUI_ALLOC_h2p>
 801e944:	69c4      	ldr	r4, [r0, #28]
 801e946:	e000      	b.n	801e94a <WM__GetPrevSibling+0x1a>
 801e948:	461c      	mov	r4, r3
 801e94a:	42ac      	cmp	r4, r5
 801e94c:	4620      	mov	r0, r4
 801e94e:	d0f4      	beq.n	801e93a <WM__GetPrevSibling+0xa>
 801e950:	2c00      	cmp	r4, #0
 801e952:	d0f2      	beq.n	801e93a <WM__GetPrevSibling+0xa>
 801e954:	f7f3 f802 	bl	801195c <GUI_ALLOC_h2p>
 801e958:	6a03      	ldr	r3, [r0, #32]
 801e95a:	429d      	cmp	r5, r3
 801e95c:	d1f4      	bne.n	801e948 <WM__GetPrevSibling+0x18>
 801e95e:	4620      	mov	r0, r4
 801e960:	bd38      	pop	{r3, r4, r5, pc}
 801e962:	bf00      	nop

0801e964 <WM__IsAncestor>:
 801e964:	b168      	cbz	r0, 801e982 <WM__IsAncestor+0x1e>
 801e966:	b510      	push	{r4, lr}
 801e968:	460c      	mov	r4, r1
 801e96a:	b131      	cbz	r1, 801e97a <WM__IsAncestor+0x16>
 801e96c:	f7f2 fff6 	bl	801195c <GUI_ALLOC_h2p>
 801e970:	6980      	ldr	r0, [r0, #24]
 801e972:	4284      	cmp	r4, r0
 801e974:	d003      	beq.n	801e97e <WM__IsAncestor+0x1a>
 801e976:	2800      	cmp	r0, #0
 801e978:	d1f8      	bne.n	801e96c <WM__IsAncestor+0x8>
 801e97a:	2000      	movs	r0, #0
 801e97c:	bd10      	pop	{r4, pc}
 801e97e:	2001      	movs	r0, #1
 801e980:	bd10      	pop	{r4, pc}
 801e982:	2000      	movs	r0, #0
 801e984:	4770      	bx	lr
 801e986:	bf00      	nop

0801e988 <WM__IsEnabled>:
 801e988:	b508      	push	{r3, lr}
 801e98a:	f7f2 ffe7 	bl	801195c <GUI_ALLOC_h2p>
 801e98e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e990:	f080 0010 	eor.w	r0, r0, #16
 801e994:	f3c0 1000 	ubfx	r0, r0, #4, #1
 801e998:	bd08      	pop	{r3, pc}
 801e99a:	bf00      	nop

0801e99c <WM__SendMessage>:
 801e99c:	b570      	push	{r4, r5, r6, lr}
 801e99e:	4c0d      	ldr	r4, [pc, #52]	; (801e9d4 <WM__SendMessage+0x38>)
 801e9a0:	6822      	ldr	r2, [r4, #0]
 801e9a2:	2a13      	cmp	r2, #19
 801e9a4:	dd00      	ble.n	801e9a8 <WM__SendMessage+0xc>
 801e9a6:	bd70      	pop	{r4, r5, r6, pc}
 801e9a8:	4606      	mov	r6, r0
 801e9aa:	460d      	mov	r5, r1
 801e9ac:	f7f2 ffd6 	bl	801195c <GUI_ALLOC_h2p>
 801e9b0:	6902      	ldr	r2, [r0, #16]
 801e9b2:	606e      	str	r6, [r5, #4]
 801e9b4:	b142      	cbz	r2, 801e9c8 <WM__SendMessage+0x2c>
 801e9b6:	6823      	ldr	r3, [r4, #0]
 801e9b8:	4628      	mov	r0, r5
 801e9ba:	3301      	adds	r3, #1
 801e9bc:	6023      	str	r3, [r4, #0]
 801e9be:	4790      	blx	r2
 801e9c0:	6823      	ldr	r3, [r4, #0]
 801e9c2:	3b01      	subs	r3, #1
 801e9c4:	6023      	str	r3, [r4, #0]
 801e9c6:	bd70      	pop	{r4, r5, r6, pc}
 801e9c8:	4628      	mov	r0, r5
 801e9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e9ce:	f7ff b847 	b.w	801da60 <WM_DefaultProc>
 801e9d2:	bf00      	nop
 801e9d4:	20000420 	.word	0x20000420

0801e9d8 <WM__SendMessageIfEnabled>:
 801e9d8:	b570      	push	{r4, r5, r6, lr}
 801e9da:	460e      	mov	r6, r1
 801e9dc:	4605      	mov	r5, r0
 801e9de:	f7f2 ffbd 	bl	801195c <GUI_ALLOC_h2p>
 801e9e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e9e4:	06db      	lsls	r3, r3, #27
 801e9e6:	d403      	bmi.n	801e9f0 <WM__SendMessageIfEnabled+0x18>
 801e9e8:	4c0c      	ldr	r4, [pc, #48]	; (801ea1c <WM__SendMessageIfEnabled+0x44>)
 801e9ea:	6823      	ldr	r3, [r4, #0]
 801e9ec:	2b13      	cmp	r3, #19
 801e9ee:	dd00      	ble.n	801e9f2 <WM__SendMessageIfEnabled+0x1a>
 801e9f0:	bd70      	pop	{r4, r5, r6, pc}
 801e9f2:	4628      	mov	r0, r5
 801e9f4:	f7f2 ffb2 	bl	801195c <GUI_ALLOC_h2p>
 801e9f8:	6902      	ldr	r2, [r0, #16]
 801e9fa:	6075      	str	r5, [r6, #4]
 801e9fc:	b142      	cbz	r2, 801ea10 <WM__SendMessageIfEnabled+0x38>
 801e9fe:	6823      	ldr	r3, [r4, #0]
 801ea00:	4630      	mov	r0, r6
 801ea02:	3301      	adds	r3, #1
 801ea04:	6023      	str	r3, [r4, #0]
 801ea06:	4790      	blx	r2
 801ea08:	6823      	ldr	r3, [r4, #0]
 801ea0a:	3b01      	subs	r3, #1
 801ea0c:	6023      	str	r3, [r4, #0]
 801ea0e:	bd70      	pop	{r4, r5, r6, pc}
 801ea10:	4630      	mov	r0, r6
 801ea12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea16:	f7ff b823 	b.w	801da60 <WM_DefaultProc>
 801ea1a:	bf00      	nop
 801ea1c:	20000420 	.word	0x20000420

0801ea20 <WM__SendMessageNoPara>:
 801ea20:	b530      	push	{r4, r5, lr}
 801ea22:	2300      	movs	r3, #0
 801ea24:	b085      	sub	sp, #20
 801ea26:	460c      	mov	r4, r1
 801ea28:	4605      	mov	r5, r0
 801ea2a:	9301      	str	r3, [sp, #4]
 801ea2c:	9300      	str	r3, [sp, #0]
 801ea2e:	9302      	str	r3, [sp, #8]
 801ea30:	9303      	str	r3, [sp, #12]
 801ea32:	f7f2 ff93 	bl	801195c <GUI_ALLOC_h2p>
 801ea36:	6903      	ldr	r3, [r0, #16]
 801ea38:	b11b      	cbz	r3, 801ea42 <WM__SendMessageNoPara+0x22>
 801ea3a:	9501      	str	r5, [sp, #4]
 801ea3c:	4668      	mov	r0, sp
 801ea3e:	9400      	str	r4, [sp, #0]
 801ea40:	4798      	blx	r3
 801ea42:	b005      	add	sp, #20
 801ea44:	bd30      	pop	{r4, r5, pc}
 801ea46:	bf00      	nop

0801ea48 <WM__UpdateChildPositions>:
 801ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea4c:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801ea50:	b08b      	sub	sp, #44	; 0x2c
 801ea52:	f1bb 0f00 	cmp.w	fp, #0
 801ea56:	f000 8086 	beq.w	801eb66 <WM__UpdateChildPositions+0x11e>
 801ea5a:	9307      	str	r3, [sp, #28]
 801ea5c:	b29b      	uxth	r3, r3
 801ea5e:	9201      	str	r2, [sp, #4]
 801ea60:	9303      	str	r3, [sp, #12]
 801ea62:	b28b      	uxth	r3, r1
 801ea64:	9106      	str	r1, [sp, #24]
 801ea66:	9304      	str	r3, [sp, #16]
 801ea68:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801ea6c:	9305      	str	r3, [sp, #20]
 801ea6e:	e035      	b.n	801eadc <WM__UpdateChildPositions+0x94>
 801ea70:	9906      	ldr	r1, [sp, #24]
 801ea72:	1877      	adds	r7, r6, r1
 801ea74:	9907      	ldr	r1, [sp, #28]
 801ea76:	185d      	adds	r5, r3, r1
 801ea78:	b23f      	sxth	r7, r7
 801ea7a:	b22d      	sxth	r5, r5
 801ea7c:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801ea80:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801ea84:	d048      	beq.n	801eb18 <WM__UpdateChildPositions+0xd0>
 801ea86:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801ea8a:	d15f      	bne.n	801eb4c <WM__UpdateChildPositions+0x104>
 801ea8c:	9a01      	ldr	r2, [sp, #4]
 801ea8e:	eb0a 0802 	add.w	r8, sl, r2
 801ea92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea94:	eb09 0402 	add.w	r4, r9, r2
 801ea98:	fa0f f888 	sxth.w	r8, r8
 801ea9c:	b224      	sxth	r4, r4
 801ea9e:	42b7      	cmp	r7, r6
 801eaa0:	ebca 0208 	rsb	r2, sl, r8
 801eaa4:	eba7 0106 	sub.w	r1, r7, r6
 801eaa8:	d144      	bne.n	801eb34 <WM__UpdateChildPositions+0xec>
 801eaaa:	2a00      	cmp	r2, #0
 801eaac:	d142      	bne.n	801eb34 <WM__UpdateChildPositions+0xec>
 801eaae:	1bed      	subs	r5, r5, r7
 801eab0:	1b9e      	subs	r6, r3, r6
 801eab2:	ebc8 0404 	rsb	r4, r8, r4
 801eab6:	ebca 0909 	rsb	r9, sl, r9
 801eaba:	42b5      	cmp	r5, r6
 801eabc:	eba5 0106 	sub.w	r1, r5, r6
 801eac0:	ebc9 0204 	rsb	r2, r9, r4
 801eac4:	d14b      	bne.n	801eb5e <WM__UpdateChildPositions+0x116>
 801eac6:	2a00      	cmp	r2, #0
 801eac8:	d149      	bne.n	801eb5e <WM__UpdateChildPositions+0x116>
 801eaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eacc:	a809      	add	r0, sp, #36	; 0x24
 801eace:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801ead2:	f7f2 ff61 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ead6:	f1bb 0f00 	cmp.w	fp, #0
 801eada:	d044      	beq.n	801eb66 <WM__UpdateChildPositions+0x11e>
 801eadc:	4658      	mov	r0, fp
 801eade:	f7f2 ff47 	bl	8011970 <GUI_ALLOC_LockH>
 801eae2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801eae4:	9009      	str	r0, [sp, #36]	; 0x24
 801eae6:	f402 7120 	and.w	r1, r2, #640	; 0x280
 801eaea:	f9b0 6000 	ldrsh.w	r6, [r0]
 801eaee:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801eaf2:	2980      	cmp	r1, #128	; 0x80
 801eaf4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801eaf8:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801eafc:	d020      	beq.n	801eb40 <WM__UpdateChildPositions+0xf8>
 801eafe:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 801eb02:	d0b5      	beq.n	801ea70 <WM__UpdateChildPositions+0x28>
 801eb04:	9904      	ldr	r1, [sp, #16]
 801eb06:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801eb0a:	198f      	adds	r7, r1, r6
 801eb0c:	18cd      	adds	r5, r1, r3
 801eb0e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801eb12:	b23f      	sxth	r7, r7
 801eb14:	b22d      	sxth	r5, r5
 801eb16:	d1b6      	bne.n	801ea86 <WM__UpdateChildPositions+0x3e>
 801eb18:	9905      	ldr	r1, [sp, #20]
 801eb1a:	42b7      	cmp	r7, r6
 801eb1c:	eb01 080a 	add.w	r8, r1, sl
 801eb20:	eb01 0409 	add.w	r4, r1, r9
 801eb24:	eba7 0106 	sub.w	r1, r7, r6
 801eb28:	fa0f f888 	sxth.w	r8, r8
 801eb2c:	b224      	sxth	r4, r4
 801eb2e:	ebca 0208 	rsb	r2, sl, r8
 801eb32:	d0ba      	beq.n	801eaaa <WM__UpdateChildPositions+0x62>
 801eb34:	4658      	mov	r0, fp
 801eb36:	9302      	str	r3, [sp, #8]
 801eb38:	f7ff fb6e 	bl	801e218 <WM_MoveWindow>
 801eb3c:	9b02      	ldr	r3, [sp, #8]
 801eb3e:	e7b6      	b.n	801eaae <WM__UpdateChildPositions+0x66>
 801eb40:	9903      	ldr	r1, [sp, #12]
 801eb42:	198f      	adds	r7, r1, r6
 801eb44:	18cd      	adds	r5, r1, r3
 801eb46:	b23f      	sxth	r7, r7
 801eb48:	b22d      	sxth	r5, r5
 801eb4a:	e797      	b.n	801ea7c <WM__UpdateChildPositions+0x34>
 801eb4c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801eb50:	eb01 080a 	add.w	r8, r1, sl
 801eb54:	4449      	add	r1, r9
 801eb56:	fa0f f888 	sxth.w	r8, r8
 801eb5a:	b20c      	sxth	r4, r1
 801eb5c:	e79f      	b.n	801ea9e <WM__UpdateChildPositions+0x56>
 801eb5e:	4658      	mov	r0, fp
 801eb60:	f7ff f9c2 	bl	801dee8 <WM_ResizeWindow>
 801eb64:	e7b1      	b.n	801eaca <WM__UpdateChildPositions+0x82>
 801eb66:	b00b      	add	sp, #44	; 0x2c
 801eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb6c <WM__AddCriticalHandle>:
 801eb6c:	4b02      	ldr	r3, [pc, #8]	; (801eb78 <WM__AddCriticalHandle+0xc>)
 801eb6e:	681a      	ldr	r2, [r3, #0]
 801eb70:	6002      	str	r2, [r0, #0]
 801eb72:	6018      	str	r0, [r3, #0]
 801eb74:	4770      	bx	lr
 801eb76:	bf00      	nop
 801eb78:	2002b030 	.word	0x2002b030

0801eb7c <WM__RemoveCriticalHandle>:
 801eb7c:	b410      	push	{r4}
 801eb7e:	4c0d      	ldr	r4, [pc, #52]	; (801ebb4 <WM__RemoveCriticalHandle+0x38>)
 801eb80:	6821      	ldr	r1, [r4, #0]
 801eb82:	b151      	cbz	r1, 801eb9a <WM__RemoveCriticalHandle+0x1e>
 801eb84:	4281      	cmp	r1, r0
 801eb86:	d011      	beq.n	801ebac <WM__RemoveCriticalHandle+0x30>
 801eb88:	680b      	ldr	r3, [r1, #0]
 801eb8a:	b133      	cbz	r3, 801eb9a <WM__RemoveCriticalHandle+0x1e>
 801eb8c:	4298      	cmp	r0, r3
 801eb8e:	d007      	beq.n	801eba0 <WM__RemoveCriticalHandle+0x24>
 801eb90:	681a      	ldr	r2, [r3, #0]
 801eb92:	4619      	mov	r1, r3
 801eb94:	4613      	mov	r3, r2
 801eb96:	2a00      	cmp	r2, #0
 801eb98:	d1f8      	bne.n	801eb8c <WM__RemoveCriticalHandle+0x10>
 801eb9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eb9e:	4770      	bx	lr
 801eba0:	b129      	cbz	r1, 801ebae <WM__RemoveCriticalHandle+0x32>
 801eba2:	6803      	ldr	r3, [r0, #0]
 801eba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eba8:	600b      	str	r3, [r1, #0]
 801ebaa:	4770      	bx	lr
 801ebac:	460b      	mov	r3, r1
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	6023      	str	r3, [r4, #0]
 801ebb2:	e7f2      	b.n	801eb9a <WM__RemoveCriticalHandle+0x1e>
 801ebb4:	2002b030 	.word	0x2002b030

0801ebb8 <WM__GetClientRectEx>:
 801ebb8:	b180      	cbz	r0, 801ebdc <WM__GetClientRectEx+0x24>
 801ebba:	b179      	cbz	r1, 801ebdc <WM__GetClientRectEx+0x24>
 801ebbc:	b530      	push	{r4, r5, lr}
 801ebbe:	b083      	sub	sp, #12
 801ebc0:	460c      	mov	r4, r1
 801ebc2:	f7f2 fed5 	bl	8011970 <GUI_ALLOC_LockH>
 801ebc6:	ad02      	add	r5, sp, #8
 801ebc8:	4621      	mov	r1, r4
 801ebca:	f845 0d04 	str.w	r0, [r5, #-4]!
 801ebce:	f7fe fa97 	bl	801d100 <WM__GetClientRectWin>
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	f7f2 fee0 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ebd8:	b003      	add	sp, #12
 801ebda:	bd30      	pop	{r4, r5, pc}
 801ebdc:	4770      	bx	lr
 801ebde:	bf00      	nop

0801ebe0 <_Color2Index_16>:
 801ebe0:	b4f0      	push	{r4, r5, r6, r7}
 801ebe2:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801ebe6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801ebea:	b2c0      	uxtb	r0, r0
 801ebec:	1c65      	adds	r5, r4, #1
 801ebee:	1c56      	adds	r6, r2, #1
 801ebf0:	1c47      	adds	r7, r0, #1
 801ebf2:	4613      	mov	r3, r2
 801ebf4:	2d54      	cmp	r5, #84	; 0x54
 801ebf6:	bf94      	ite	ls
 801ebf8:	2500      	movls	r5, #0
 801ebfa:	2501      	movhi	r5, #1
 801ebfc:	2e54      	cmp	r6, #84	; 0x54
 801ebfe:	ea4f 0185 	mov.w	r1, r5, lsl #2
 801ec02:	bf94      	ite	ls
 801ec04:	2600      	movls	r6, #0
 801ec06:	2601      	movhi	r6, #1
 801ec08:	2f54      	cmp	r7, #84	; 0x54
 801ec0a:	eb06 0205 	add.w	r2, r6, r5
 801ec0e:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 801ec12:	bf94      	ite	ls
 801ec14:	2700      	movls	r7, #0
 801ec16:	2701      	movhi	r7, #1
 801ec18:	4335      	orrs	r5, r6
 801ec1a:	443a      	add	r2, r7
 801ec1c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801ec20:	d103      	bne.n	801ec2a <_Color2Index_16+0x4a>
 801ec22:	b917      	cbnz	r7, 801ec2a <_Color2Index_16+0x4a>
 801ec24:	4608      	mov	r0, r1
 801ec26:	bcf0      	pop	{r4, r5, r6, r7}
 801ec28:	4770      	bx	lr
 801ec2a:	4423      	add	r3, r4
 801ec2c:	ebc2 1582 	rsb	r5, r2, r2, lsl #6
 801ec30:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
 801ec34:	4403      	add	r3, r0
 801ec36:	1958      	adds	r0, r3, r5
 801ec38:	fbb0 f2f2 	udiv	r2, r0, r2
 801ec3c:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 801ec40:	bcf0      	pop	{r4, r5, r6, r7}
 801ec42:	4608      	mov	r0, r1
 801ec44:	4770      	bx	lr
 801ec46:	bf00      	nop

0801ec48 <_Index2Color_16>:
 801ec48:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 801ec4c:	b4f0      	push	{r4, r5, r6, r7}
 801ec4e:	ea00 0103 	and.w	r1, r0, r3
 801ec52:	f3c0 0680 	ubfx	r6, r0, #2, #1
 801ec56:	f3c0 0540 	ubfx	r5, r0, #1, #1
 801ec5a:	ea00 0706 	and.w	r7, r0, r6
 801ec5e:	01ca      	lsls	r2, r1, #7
 801ec60:	4028      	ands	r0, r5
 801ec62:	1a52      	subs	r2, r2, r1
 801ec64:	01fc      	lsls	r4, r7, #7
 801ec66:	01c1      	lsls	r1, r0, #7
 801ec68:	1be4      	subs	r4, r4, r7
 801ec6a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 801ec6e:	1a08      	subs	r0, r1, r0
 801ec70:	eb04 12c6 	add.w	r2, r4, r6, lsl #7
 801ec74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ec78:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 801ec7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ec80:	bcf0      	pop	{r4, r5, r6, r7}
 801ec82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801ec86:	4770      	bx	lr

0801ec88 <_GetIndexMask_16>:
 801ec88:	200f      	movs	r0, #15
 801ec8a:	4770      	bx	lr

0801ec8c <_GetIndexMask_0>:
 801ec8c:	b508      	push	{r3, lr}
 801ec8e:	f7f9 f9a1 	bl	8017fd4 <LCD_GetNumColors>
 801ec92:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801ec96:	d014      	beq.n	801ecc2 <_GetIndexMask_0+0x36>
 801ec98:	287f      	cmp	r0, #127	; 0x7f
 801ec9a:	d80e      	bhi.n	801ecba <_GetIndexMask_0+0x2e>
 801ec9c:	283f      	cmp	r0, #63	; 0x3f
 801ec9e:	d812      	bhi.n	801ecc6 <_GetIndexMask_0+0x3a>
 801eca0:	281f      	cmp	r0, #31
 801eca2:	d80c      	bhi.n	801ecbe <_GetIndexMask_0+0x32>
 801eca4:	280f      	cmp	r0, #15
 801eca6:	d810      	bhi.n	801ecca <_GetIndexMask_0+0x3e>
 801eca8:	2807      	cmp	r0, #7
 801ecaa:	d812      	bhi.n	801ecd2 <_GetIndexMask_0+0x46>
 801ecac:	2803      	cmp	r0, #3
 801ecae:	d80e      	bhi.n	801ecce <_GetIndexMask_0+0x42>
 801ecb0:	2801      	cmp	r0, #1
 801ecb2:	bf94      	ite	ls
 801ecb4:	2000      	movls	r0, #0
 801ecb6:	2001      	movhi	r0, #1
 801ecb8:	bd08      	pop	{r3, pc}
 801ecba:	207f      	movs	r0, #127	; 0x7f
 801ecbc:	bd08      	pop	{r3, pc}
 801ecbe:	201f      	movs	r0, #31
 801ecc0:	bd08      	pop	{r3, pc}
 801ecc2:	20ff      	movs	r0, #255	; 0xff
 801ecc4:	bd08      	pop	{r3, pc}
 801ecc6:	203f      	movs	r0, #63	; 0x3f
 801ecc8:	bd08      	pop	{r3, pc}
 801ecca:	200f      	movs	r0, #15
 801eccc:	bd08      	pop	{r3, pc}
 801ecce:	2003      	movs	r0, #3
 801ecd0:	bd08      	pop	{r3, pc}
 801ecd2:	2007      	movs	r0, #7
 801ecd4:	bd08      	pop	{r3, pc}
 801ecd6:	bf00      	nop

0801ecd8 <_Index2Color_0>:
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4604      	mov	r4, r0
 801ecdc:	f7f9 f97a 	bl	8017fd4 <LCD_GetNumColors>
 801ece0:	4605      	mov	r5, r0
 801ece2:	f7f9 f997 	bl	8018014 <LCD_GetPalette>
 801ece6:	b120      	cbz	r0, 801ecf2 <_Index2Color_0+0x1a>
 801ece8:	42a5      	cmp	r5, r4
 801ecea:	d902      	bls.n	801ecf2 <_Index2Color_0+0x1a>
 801ecec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ecf0:	bd38      	pop	{r3, r4, r5, pc}
 801ecf2:	2000      	movs	r0, #0
 801ecf4:	bd38      	pop	{r3, r4, r5, pc}
 801ecf6:	bf00      	nop

0801ecf8 <_Color2Index_0>:
 801ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ecfc:	4606      	mov	r6, r0
 801ecfe:	f7f9 f969 	bl	8017fd4 <LCD_GetNumColors>
 801ed02:	4607      	mov	r7, r0
 801ed04:	f7f9 f986 	bl	8018014 <LCD_GetPalette>
 801ed08:	b158      	cbz	r0, 801ed22 <_Color2Index_0+0x2a>
 801ed0a:	f1a0 0804 	sub.w	r8, r0, #4
 801ed0e:	2000      	movs	r0, #0
 801ed10:	4643      	mov	r3, r8
 801ed12:	e002      	b.n	801ed1a <_Color2Index_0+0x22>
 801ed14:	3001      	adds	r0, #1
 801ed16:	4287      	cmp	r7, r0
 801ed18:	dd05      	ble.n	801ed26 <_Color2Index_0+0x2e>
 801ed1a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801ed1e:	42b2      	cmp	r2, r6
 801ed20:	d1f8      	bne.n	801ed14 <_Color2Index_0+0x1c>
 801ed22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed26:	2400      	movs	r4, #0
 801ed28:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 801ed2c:	4625      	mov	r5, r4
 801ed2e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801ed32:	4630      	mov	r0, r6
 801ed34:	f7f3 fa72 	bl	801221c <GUI_CalcColorDist>
 801ed38:	4581      	cmp	r9, r0
 801ed3a:	d901      	bls.n	801ed40 <_Color2Index_0+0x48>
 801ed3c:	4681      	mov	r9, r0
 801ed3e:	462c      	mov	r4, r5
 801ed40:	3501      	adds	r5, #1
 801ed42:	42af      	cmp	r7, r5
 801ed44:	dcf3      	bgt.n	801ed2e <_Color2Index_0+0x36>
 801ed46:	4620      	mov	r0, r4
 801ed48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ed4c <_DrawArc.isra.0.constprop.1>:
 801ed4c:	ee07 2a90 	vmov	s15, r2
 801ed50:	4ab6      	ldr	r2, [pc, #728]	; (801f02c <_DrawArc.isra.0.constprop.1+0x2e0>)
 801ed52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ed56:	6812      	ldr	r2, [r2, #0]
 801ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed5c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801ed60:	4682      	mov	sl, r0
 801ed62:	460f      	mov	r7, r1
 801ed64:	fb04 f603 	mul.w	r6, r4, r3
 801ed68:	ed2d 8b0a 	vpush	{d8-d12}
 801ed6c:	7e13      	ldrb	r3, [r2, #24]
 801ed6e:	b083      	sub	sp, #12
 801ed70:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801ed74:	4630      	mov	r0, r6
 801ed76:	ee07 3a90 	vmov	s15, r3
 801ed7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ed7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed80:	fb04 f405 	mul.w	r4, r4, r5
 801ed84:	eeb0 ca69 	vmov.f32	s24, s19
 801ed88:	eee7 9a87 	vfma.f32	s19, s15, s14
 801ed8c:	eea7 cac7 	vfms.f32	s24, s15, s14
 801ed90:	f7f8 fa14 	bl	80171bc <GUI__SinHQ>
 801ed94:	ee09 0a10 	vmov	s18, r0
 801ed98:	4620      	mov	r0, r4
 801ed9a:	f7f8 fa0f 	bl	80171bc <GUI__SinHQ>
 801ed9e:	ee08 0a90 	vmov	s17, r0
 801eda2:	4630      	mov	r0, r6
 801eda4:	f7f8 fa60 	bl	8017268 <GUI__CosHQ>
 801eda8:	ee08 0a10 	vmov	s16, r0
 801edac:	4620      	mov	r0, r4
 801edae:	f7f8 fa5b 	bl	8017268 <GUI__CosHQ>
 801edb2:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 801edb6:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 801edba:	ee07 0a10 	vmov	s14, r0
 801edbe:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 801edc2:	ee6c 5a06 	vmul.f32	s11, s24, s12
 801edc6:	ee29 6a86 	vmul.f32	s12, s19, s12
 801edca:	ee6c 4a26 	vmul.f32	s9, s24, s13
 801edce:	eebd aae5 	vcvt.s32.f32	s20, s11
 801edd2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 801edd6:	eefd aae4 	vcvt.s32.f32	s21, s9
 801edda:	ee1a 3a10 	vmov	r3, s20
 801edde:	ee69 6aa6 	vmul.f32	s13, s19, s13
 801ede2:	ee2c 5a27 	vmul.f32	s10, s24, s15
 801ede6:	141b      	asrs	r3, r3, #16
 801ede8:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801edec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801edf0:	ee0a 3a10 	vmov	s20, r3
 801edf4:	ee16 3a10 	vmov	r3, s12
 801edf8:	eefd bac5 	vcvt.s32.f32	s23, s10
 801edfc:	141b      	asrs	r3, r3, #16
 801edfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ee06:	ee08 3a10 	vmov	s16, r3
 801ee0a:	ee1a 3a90 	vmov	r3, s21
 801ee0e:	ee6c 5a07 	vmul.f32	s11, s24, s14
 801ee12:	141b      	asrs	r3, r3, #16
 801ee14:	ee29 7a87 	vmul.f32	s14, s19, s14
 801ee18:	ee2c ca0c 	vmul.f32	s24, s24, s24
 801ee1c:	ee0a 3a90 	vmov	s21, r3
 801ee20:	ee16 3a90 	vmov	r3, s13
 801ee24:	eebd bae5 	vcvt.s32.f32	s22, s11
 801ee28:	141b      	asrs	r3, r3, #16
 801ee2a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ee2e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801ee32:	ee08 3a90 	vmov	s17, r3
 801ee36:	ee1b 3a90 	vmov	r3, s23
 801ee3a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801ee3e:	141b      	asrs	r3, r3, #16
 801ee40:	ee1a 0a10 	vmov	r0, s20
 801ee44:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801ee48:	ee0b 3a90 	vmov	s23, r3
 801ee4c:	ee17 3a90 	vmov	r3, s15
 801ee50:	ee69 7aa9 	vmul.f32	s15, s19, s19
 801ee54:	141b      	asrs	r3, r3, #16
 801ee56:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801ee5a:	eef8 baeb 	vcvt.f32.s32	s23, s23
 801ee5e:	ee09 3a10 	vmov	s18, r3
 801ee62:	ee1b 3a10 	vmov	r3, s22
 801ee66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ee6a:	141b      	asrs	r3, r3, #16
 801ee6c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801ee70:	ee0b 3a10 	vmov	s22, r3
 801ee74:	ee17 3a10 	vmov	r3, s14
 801ee78:	ee17 8a90 	vmov	r8, s15
 801ee7c:	141b      	asrs	r3, r3, #16
 801ee7e:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801ee82:	ee07 3a10 	vmov	s14, r3
 801ee86:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 801ee8a:	eebc 7acc 	vcvt.u32.f32	s14, s24
 801ee8e:	ee17 9a10 	vmov	r9, s14
 801ee92:	f7e1 fb21 	bl	80004d8 <__aeabi_f2d>
 801ee96:	ec41 0b10 	vmov	d0, r0, r1
 801ee9a:	f003 fbd1 	bl	8022640 <ceil>
 801ee9e:	ec51 0b10 	vmov	r0, r1, d0
 801eea2:	f7e1 fe1d 	bl	8000ae0 <__aeabi_d2iz>
 801eea6:	4683      	mov	fp, r0
 801eea8:	ee18 0a90 	vmov	r0, s17
 801eeac:	f7e1 fb14 	bl	80004d8 <__aeabi_f2d>
 801eeb0:	ec41 0b10 	vmov	d0, r0, r1
 801eeb4:	f003 fc48 	bl	8022748 <floor>
 801eeb8:	ec51 0b10 	vmov	r0, r1, d0
 801eebc:	f7e1 fe10 	bl	8000ae0 <__aeabi_d2iz>
 801eec0:	4b5a      	ldr	r3, [pc, #360]	; (801f02c <_DrawArc.isra.0.constprop.1+0x2e0>)
 801eec2:	4606      	mov	r6, r0
 801eec4:	6819      	ldr	r1, [r3, #0]
 801eec6:	694b      	ldr	r3, [r1, #20]
 801eec8:	b133      	cbz	r3, 801eed8 <_DrawArc.isra.0.constprop.1+0x18c>
 801eeca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801eecc:	2a01      	cmp	r2, #1
 801eece:	f000 809f 	beq.w	801f010 <_DrawArc.isra.0.constprop.1+0x2c4>
 801eed2:	3201      	adds	r2, #1
 801eed4:	f000 808f 	beq.w	801eff6 <_DrawArc.isra.0.constprop.1+0x2aa>
 801eed8:	45b3      	cmp	fp, r6
 801eeda:	f300 8087 	bgt.w	801efec <_DrawArc.isra.0.constprop.1+0x2a0>
 801eede:	ee78 7a4a 	vsub.f32	s15, s16, s20
 801eee2:	fb06 f006 	mul.w	r0, r6, r6
 801eee6:	ee39 6a6b 	vsub.f32	s12, s18, s23
 801eeea:	2400      	movs	r4, #0
 801eeec:	ee39 7acb 	vsub.f32	s14, s19, s22
 801eef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eef2:	ee78 6aea 	vsub.f32	s13, s17, s21
 801eef6:	4581      	cmp	r9, r0
 801eef8:	ee86 ca27 	vdiv.f32	s24, s12, s15
 801eefc:	fb06 7703 	mla	r7, r6, r3, r7
 801ef00:	4625      	mov	r5, r4
 801ef02:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801ef06:	eec7 9a26 	vdiv.f32	s19, s14, s13
 801ef0a:	edcd 7a01 	vstr	s15, [sp, #4]
 801ef0e:	d95c      	bls.n	801efca <_DrawArc.isra.0.constprop.1+0x27e>
 801ef10:	ebc0 0e09 	rsb	lr, r0, r9
 801ef14:	e000      	b.n	801ef18 <_DrawArc.isra.0.constprop.1+0x1cc>
 801ef16:	461d      	mov	r5, r3
 801ef18:	1c6b      	adds	r3, r5, #1
 801ef1a:	fb03 f203 	mul.w	r2, r3, r3
 801ef1e:	4596      	cmp	lr, r2
 801ef20:	d8f9      	bhi.n	801ef16 <_DrawArc.isra.0.constprop.1+0x1ca>
 801ef22:	4580      	cmp	r8, r0
 801ef24:	d955      	bls.n	801efd2 <_DrawArc.isra.0.constprop.1+0x286>
 801ef26:	ebc0 0008 	rsb	r0, r0, r8
 801ef2a:	e000      	b.n	801ef2e <_DrawArc.isra.0.constprop.1+0x1e2>
 801ef2c:	461c      	mov	r4, r3
 801ef2e:	1c63      	adds	r3, r4, #1
 801ef30:	fb03 f203 	mul.w	r2, r3, r3
 801ef34:	4290      	cmp	r0, r2
 801ef36:	d8f9      	bhi.n	801ef2c <_DrawArc.isra.0.constprop.1+0x1e0>
 801ef38:	3c01      	subs	r4, #1
 801ef3a:	ee07 6a90 	vmov	s15, r6
 801ef3e:	9b01      	ldr	r3, [sp, #4]
 801ef40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef44:	429c      	cmp	r4, r3
 801ef46:	bfa8      	it	ge
 801ef48:	461c      	movge	r4, r3
 801ef4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef52:	dd43      	ble.n	801efdc <_DrawArc.isra.0.constprop.1+0x290>
 801ef54:	eeb4 aa48 	vcmp.f32	s20, s16
 801ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef5c:	d043      	beq.n	801efe6 <_DrawArc.isra.0.constprop.1+0x29a>
 801ef5e:	ee37 7aca 	vsub.f32	s14, s15, s20
 801ef62:	eef0 6a6b 	vmov.f32	s13, s23
 801ef66:	eeec 6a07 	vfma.f32	s13, s24, s14
 801ef6a:	eeb0 7a66 	vmov.f32	s14, s13
 801ef6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801ef72:	ee17 0a10 	vmov	r0, s14
 801ef76:	eef4 aae7 	vcmpe.f32	s21, s15
 801ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef7e:	d52b      	bpl.n	801efd8 <_DrawArc.isra.0.constprop.1+0x28c>
 801ef80:	eef4 aa68 	vcmp.f32	s21, s17
 801ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef88:	d02a      	beq.n	801efe0 <_DrawArc.isra.0.constprop.1+0x294>
 801ef8a:	ee77 7aea 	vsub.f32	s15, s15, s21
 801ef8e:	eeb0 7a4b 	vmov.f32	s14, s22
 801ef92:	eea9 7aa7 	vfma.f32	s14, s19, s15
 801ef96:	eef0 7a47 	vmov.f32	s15, s14
 801ef9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef9e:	ee17 2a90 	vmov	r2, s15
 801efa2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801efa4:	3e01      	subs	r6, #1
 801efa6:	4639      	mov	r1, r7
 801efa8:	ebc2 020a 	rsb	r2, r2, sl
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	ebc0 000a 	rsb	r0, r0, sl
 801efb2:	4798      	blx	r3
 801efb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801efb6:	455e      	cmp	r6, fp
 801efb8:	eba7 0703 	sub.w	r7, r7, r3
 801efbc:	db16      	blt.n	801efec <_DrawArc.isra.0.constprop.1+0x2a0>
 801efbe:	fb06 f006 	mul.w	r0, r6, r6
 801efc2:	4b1a      	ldr	r3, [pc, #104]	; (801f02c <_DrawArc.isra.0.constprop.1+0x2e0>)
 801efc4:	4581      	cmp	r9, r0
 801efc6:	6819      	ldr	r1, [r3, #0]
 801efc8:	d8a2      	bhi.n	801ef10 <_DrawArc.isra.0.constprop.1+0x1c4>
 801efca:	4580      	cmp	r8, r0
 801efcc:	f04f 0500 	mov.w	r5, #0
 801efd0:	d8a9      	bhi.n	801ef26 <_DrawArc.isra.0.constprop.1+0x1da>
 801efd2:	f04f 34ff 	mov.w	r4, #4294967295
 801efd6:	e7b0      	b.n	801ef3a <_DrawArc.isra.0.constprop.1+0x1ee>
 801efd8:	462a      	mov	r2, r5
 801efda:	e7e2      	b.n	801efa2 <_DrawArc.isra.0.constprop.1+0x256>
 801efdc:	4620      	mov	r0, r4
 801efde:	e7ca      	b.n	801ef76 <_DrawArc.isra.0.constprop.1+0x22a>
 801efe0:	eef0 7a68 	vmov.f32	s15, s17
 801efe4:	e7d9      	b.n	801ef9a <_DrawArc.isra.0.constprop.1+0x24e>
 801efe6:	eeb0 7a48 	vmov.f32	s14, s16
 801efea:	e7c0      	b.n	801ef6e <_DrawArc.isra.0.constprop.1+0x222>
 801efec:	b003      	add	sp, #12
 801efee:	ecbd 8b0a 	vpop	{d8-d12}
 801eff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eff6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801effa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801effe:	1bd2      	subs	r2, r2, r7
 801f000:	1bdb      	subs	r3, r3, r7
 801f002:	4593      	cmp	fp, r2
 801f004:	bfa8      	it	ge
 801f006:	4693      	movge	fp, r2
 801f008:	4298      	cmp	r0, r3
 801f00a:	bfb8      	it	lt
 801f00c:	461e      	movlt	r6, r3
 801f00e:	e763      	b.n	801eed8 <_DrawArc.isra.0.constprop.1+0x18c>
 801f010:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f018:	1bd2      	subs	r2, r2, r7
 801f01a:	1bdb      	subs	r3, r3, r7
 801f01c:	4290      	cmp	r0, r2
 801f01e:	bfa8      	it	ge
 801f020:	4616      	movge	r6, r2
 801f022:	459b      	cmp	fp, r3
 801f024:	bfb8      	it	lt
 801f026:	469b      	movlt	fp, r3
 801f028:	e756      	b.n	801eed8 <_DrawArc.isra.0.constprop.1+0x18c>
 801f02a:	bf00      	nop
 801f02c:	20000018 	.word	0x20000018

0801f030 <_DrawArc.isra.0.constprop.2>:
 801f030:	ee07 2a90 	vmov	s15, r2
 801f034:	4ab5      	ldr	r2, [pc, #724]	; (801f30c <_DrawArc.isra.0.constprop.2+0x2dc>)
 801f036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f03a:	6812      	ldr	r2, [r2, #0]
 801f03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f040:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801f044:	4682      	mov	sl, r0
 801f046:	460f      	mov	r7, r1
 801f048:	fb04 f603 	mul.w	r6, r4, r3
 801f04c:	ed2d 8b0a 	vpush	{d8-d12}
 801f050:	7e13      	ldrb	r3, [r2, #24]
 801f052:	b083      	sub	sp, #12
 801f054:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801f058:	4630      	mov	r0, r6
 801f05a:	ee07 3a90 	vmov	s15, r3
 801f05e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f064:	fb04 f405 	mul.w	r4, r4, r5
 801f068:	eeb0 ca69 	vmov.f32	s24, s19
 801f06c:	eee7 9a87 	vfma.f32	s19, s15, s14
 801f070:	eea7 cac7 	vfms.f32	s24, s15, s14
 801f074:	f7f8 f8a2 	bl	80171bc <GUI__SinHQ>
 801f078:	ee09 0a10 	vmov	s18, r0
 801f07c:	4620      	mov	r0, r4
 801f07e:	f7f8 f89d 	bl	80171bc <GUI__SinHQ>
 801f082:	ee08 0a90 	vmov	s17, r0
 801f086:	4630      	mov	r0, r6
 801f088:	f7f8 f8ee 	bl	8017268 <GUI__CosHQ>
 801f08c:	ee08 0a10 	vmov	s16, r0
 801f090:	4620      	mov	r0, r4
 801f092:	f7f8 f8e9 	bl	8017268 <GUI__CosHQ>
 801f096:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 801f09a:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 801f09e:	ee07 0a10 	vmov	s14, r0
 801f0a2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 801f0a6:	ee6c 5a06 	vmul.f32	s11, s24, s12
 801f0aa:	ee29 6a86 	vmul.f32	s12, s19, s12
 801f0ae:	ee6c 4a26 	vmul.f32	s9, s24, s13
 801f0b2:	eebd aae5 	vcvt.s32.f32	s20, s11
 801f0b6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 801f0ba:	eefd aae4 	vcvt.s32.f32	s21, s9
 801f0be:	ee1a 3a10 	vmov	r3, s20
 801f0c2:	ee69 6aa6 	vmul.f32	s13, s19, s13
 801f0c6:	ee2c 5a27 	vmul.f32	s10, s24, s15
 801f0ca:	141b      	asrs	r3, r3, #16
 801f0cc:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801f0d0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801f0d4:	ee0a 3a10 	vmov	s20, r3
 801f0d8:	ee16 3a10 	vmov	r3, s12
 801f0dc:	eefd bac5 	vcvt.s32.f32	s23, s10
 801f0e0:	141b      	asrs	r3, r3, #16
 801f0e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f0e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f0ea:	ee08 3a10 	vmov	s16, r3
 801f0ee:	ee1a 3a90 	vmov	r3, s21
 801f0f2:	ee6c 5a07 	vmul.f32	s11, s24, s14
 801f0f6:	141b      	asrs	r3, r3, #16
 801f0f8:	ee29 7a87 	vmul.f32	s14, s19, s14
 801f0fc:	ee2c ca0c 	vmul.f32	s24, s24, s24
 801f100:	ee0a 3a90 	vmov	s21, r3
 801f104:	ee16 3a90 	vmov	r3, s13
 801f108:	eebd bae5 	vcvt.s32.f32	s22, s11
 801f10c:	141b      	asrs	r3, r3, #16
 801f10e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f112:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 801f116:	ee08 3a90 	vmov	s17, r3
 801f11a:	ee1b 3a90 	vmov	r3, s23
 801f11e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801f122:	141b      	asrs	r3, r3, #16
 801f124:	ee1a 0a10 	vmov	r0, s20
 801f128:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801f12c:	ee0b 3a90 	vmov	s23, r3
 801f130:	ee17 3a90 	vmov	r3, s15
 801f134:	ee69 7aa9 	vmul.f32	s15, s19, s19
 801f138:	141b      	asrs	r3, r3, #16
 801f13a:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801f13e:	eef8 baeb 	vcvt.f32.s32	s23, s23
 801f142:	ee09 3a10 	vmov	s18, r3
 801f146:	ee1b 3a10 	vmov	r3, s22
 801f14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f14e:	141b      	asrs	r3, r3, #16
 801f150:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801f154:	ee0b 3a10 	vmov	s22, r3
 801f158:	ee17 3a10 	vmov	r3, s14
 801f15c:	ee17 8a90 	vmov	r8, s15
 801f160:	141b      	asrs	r3, r3, #16
 801f162:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 801f166:	ee07 3a10 	vmov	s14, r3
 801f16a:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 801f16e:	eebc 7acc 	vcvt.u32.f32	s14, s24
 801f172:	ee17 9a10 	vmov	r9, s14
 801f176:	f7e1 f9af 	bl	80004d8 <__aeabi_f2d>
 801f17a:	ec41 0b10 	vmov	d0, r0, r1
 801f17e:	f003 fa5f 	bl	8022640 <ceil>
 801f182:	ec51 0b10 	vmov	r0, r1, d0
 801f186:	f7e1 fcab 	bl	8000ae0 <__aeabi_d2iz>
 801f18a:	4683      	mov	fp, r0
 801f18c:	ee18 0a90 	vmov	r0, s17
 801f190:	f7e1 f9a2 	bl	80004d8 <__aeabi_f2d>
 801f194:	ec41 0b10 	vmov	d0, r0, r1
 801f198:	f003 fad6 	bl	8022748 <floor>
 801f19c:	ec51 0b10 	vmov	r0, r1, d0
 801f1a0:	f7e1 fc9e 	bl	8000ae0 <__aeabi_d2iz>
 801f1a4:	4b59      	ldr	r3, [pc, #356]	; (801f30c <_DrawArc.isra.0.constprop.2+0x2dc>)
 801f1a6:	4606      	mov	r6, r0
 801f1a8:	6819      	ldr	r1, [r3, #0]
 801f1aa:	694b      	ldr	r3, [r1, #20]
 801f1ac:	b133      	cbz	r3, 801f1bc <_DrawArc.isra.0.constprop.2+0x18c>
 801f1ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f1b0:	2a01      	cmp	r2, #1
 801f1b2:	f000 809d 	beq.w	801f2f0 <_DrawArc.isra.0.constprop.2+0x2c0>
 801f1b6:	3201      	adds	r2, #1
 801f1b8:	f000 808d 	beq.w	801f2d6 <_DrawArc.isra.0.constprop.2+0x2a6>
 801f1bc:	45b3      	cmp	fp, r6
 801f1be:	f300 8085 	bgt.w	801f2cc <_DrawArc.isra.0.constprop.2+0x29c>
 801f1c2:	ee78 7a4a 	vsub.f32	s15, s16, s20
 801f1c6:	fb06 f006 	mul.w	r0, r6, r6
 801f1ca:	ee39 6a6b 	vsub.f32	s12, s18, s23
 801f1ce:	2400      	movs	r4, #0
 801f1d0:	ee39 7acb 	vsub.f32	s14, s19, s22
 801f1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f1d6:	ee78 6aea 	vsub.f32	s13, s17, s21
 801f1da:	4581      	cmp	r9, r0
 801f1dc:	ee86 ca27 	vdiv.f32	s24, s12, s15
 801f1e0:	fb06 7703 	mla	r7, r6, r3, r7
 801f1e4:	4625      	mov	r5, r4
 801f1e6:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 801f1ea:	eec7 9a26 	vdiv.f32	s19, s14, s13
 801f1ee:	edcd 7a01 	vstr	s15, [sp, #4]
 801f1f2:	d95a      	bls.n	801f2aa <_DrawArc.isra.0.constprop.2+0x27a>
 801f1f4:	ebc0 0e09 	rsb	lr, r0, r9
 801f1f8:	e000      	b.n	801f1fc <_DrawArc.isra.0.constprop.2+0x1cc>
 801f1fa:	461d      	mov	r5, r3
 801f1fc:	1c6b      	adds	r3, r5, #1
 801f1fe:	fb03 f203 	mul.w	r2, r3, r3
 801f202:	4596      	cmp	lr, r2
 801f204:	d8f9      	bhi.n	801f1fa <_DrawArc.isra.0.constprop.2+0x1ca>
 801f206:	4580      	cmp	r8, r0
 801f208:	d953      	bls.n	801f2b2 <_DrawArc.isra.0.constprop.2+0x282>
 801f20a:	ebc0 0008 	rsb	r0, r0, r8
 801f20e:	e000      	b.n	801f212 <_DrawArc.isra.0.constprop.2+0x1e2>
 801f210:	461c      	mov	r4, r3
 801f212:	1c63      	adds	r3, r4, #1
 801f214:	fb03 f203 	mul.w	r2, r3, r3
 801f218:	4290      	cmp	r0, r2
 801f21a:	d8f9      	bhi.n	801f210 <_DrawArc.isra.0.constprop.2+0x1e0>
 801f21c:	3c01      	subs	r4, #1
 801f21e:	ee07 6a90 	vmov	s15, r6
 801f222:	9b01      	ldr	r3, [sp, #4]
 801f224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f228:	429c      	cmp	r4, r3
 801f22a:	bfa8      	it	ge
 801f22c:	461c      	movge	r4, r3
 801f22e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f236:	dd41      	ble.n	801f2bc <_DrawArc.isra.0.constprop.2+0x28c>
 801f238:	eeb4 aa48 	vcmp.f32	s20, s16
 801f23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f240:	d041      	beq.n	801f2c6 <_DrawArc.isra.0.constprop.2+0x296>
 801f242:	ee37 7aca 	vsub.f32	s14, s15, s20
 801f246:	eef0 6a6b 	vmov.f32	s13, s23
 801f24a:	eeec 6a07 	vfma.f32	s13, s24, s14
 801f24e:	eeb0 7a66 	vmov.f32	s14, s13
 801f252:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f256:	ee17 2a10 	vmov	r2, s14
 801f25a:	eef4 aae7 	vcmpe.f32	s21, s15
 801f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f262:	d529      	bpl.n	801f2b8 <_DrawArc.isra.0.constprop.2+0x288>
 801f264:	eef4 aa68 	vcmp.f32	s21, s17
 801f268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f26c:	d028      	beq.n	801f2c0 <_DrawArc.isra.0.constprop.2+0x290>
 801f26e:	ee77 7aea 	vsub.f32	s15, s15, s21
 801f272:	eeb0 7a4b 	vmov.f32	s14, s22
 801f276:	eea9 7aa7 	vfma.f32	s14, s19, s15
 801f27a:	eef0 7a47 	vmov.f32	s15, s14
 801f27e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f282:	ee17 0a90 	vmov	r0, s15
 801f286:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801f288:	3e01      	subs	r6, #1
 801f28a:	4639      	mov	r1, r7
 801f28c:	4452      	add	r2, sl
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	4450      	add	r0, sl
 801f292:	4798      	blx	r3
 801f294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f296:	455e      	cmp	r6, fp
 801f298:	eba7 0703 	sub.w	r7, r7, r3
 801f29c:	db16      	blt.n	801f2cc <_DrawArc.isra.0.constprop.2+0x29c>
 801f29e:	fb06 f006 	mul.w	r0, r6, r6
 801f2a2:	4b1a      	ldr	r3, [pc, #104]	; (801f30c <_DrawArc.isra.0.constprop.2+0x2dc>)
 801f2a4:	4581      	cmp	r9, r0
 801f2a6:	6819      	ldr	r1, [r3, #0]
 801f2a8:	d8a4      	bhi.n	801f1f4 <_DrawArc.isra.0.constprop.2+0x1c4>
 801f2aa:	4580      	cmp	r8, r0
 801f2ac:	f04f 0500 	mov.w	r5, #0
 801f2b0:	d8ab      	bhi.n	801f20a <_DrawArc.isra.0.constprop.2+0x1da>
 801f2b2:	f04f 34ff 	mov.w	r4, #4294967295
 801f2b6:	e7b2      	b.n	801f21e <_DrawArc.isra.0.constprop.2+0x1ee>
 801f2b8:	4628      	mov	r0, r5
 801f2ba:	e7e4      	b.n	801f286 <_DrawArc.isra.0.constprop.2+0x256>
 801f2bc:	4622      	mov	r2, r4
 801f2be:	e7cc      	b.n	801f25a <_DrawArc.isra.0.constprop.2+0x22a>
 801f2c0:	eef0 7a68 	vmov.f32	s15, s17
 801f2c4:	e7db      	b.n	801f27e <_DrawArc.isra.0.constprop.2+0x24e>
 801f2c6:	eeb0 7a48 	vmov.f32	s14, s16
 801f2ca:	e7c2      	b.n	801f252 <_DrawArc.isra.0.constprop.2+0x222>
 801f2cc:	b003      	add	sp, #12
 801f2ce:	ecbd 8b0a 	vpop	{d8-d12}
 801f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f2da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f2de:	1bd2      	subs	r2, r2, r7
 801f2e0:	1bdb      	subs	r3, r3, r7
 801f2e2:	4593      	cmp	fp, r2
 801f2e4:	bfa8      	it	ge
 801f2e6:	4693      	movge	fp, r2
 801f2e8:	4298      	cmp	r0, r3
 801f2ea:	bfb8      	it	lt
 801f2ec:	461e      	movlt	r6, r3
 801f2ee:	e765      	b.n	801f1bc <_DrawArc.isra.0.constprop.2+0x18c>
 801f2f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801f2f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f2f8:	1bd2      	subs	r2, r2, r7
 801f2fa:	1bdb      	subs	r3, r3, r7
 801f2fc:	4290      	cmp	r0, r2
 801f2fe:	bfa8      	it	ge
 801f300:	4616      	movge	r6, r2
 801f302:	459b      	cmp	fp, r3
 801f304:	bfb8      	it	lt
 801f306:	469b      	movlt	fp, r3
 801f308:	e758      	b.n	801f1bc <_DrawArc.isra.0.constprop.2+0x18c>
 801f30a:	bf00      	nop
 801f30c:	20000018 	.word	0x20000018

0801f310 <GL_DrawArc>:
 801f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f314:	b083      	sub	sp, #12
 801f316:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f31a:	f506 74b4 	add.w	r4, r6, #360	; 0x168
 801f31e:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 801f322:	db79      	blt.n	801f418 <GL_DrawArc+0x108>
 801f324:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 801f328:	18e5      	adds	r5, r4, r3
 801f32a:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 801f32e:	eba5 0506 	sub.w	r5, r5, r6
 801f332:	daf7      	bge.n	801f324 <GL_DrawArc+0x14>
 801f334:	2d00      	cmp	r5, #0
 801f336:	dd6c      	ble.n	801f412 <GL_DrawArc+0x102>
 801f338:	4692      	mov	sl, r2
 801f33a:	4689      	mov	r9, r1
 801f33c:	4680      	mov	r8, r0
 801f33e:	f5a5 7787 	sub.w	r7, r5, #270	; 0x10e
 801f342:	f1a5 06b4 	sub.w	r6, r5, #180	; 0xb4
 801f346:	f04f 3bff 	mov.w	fp, #4294967295
 801f34a:	e04c      	b.n	801f3e6 <GL_DrawArc+0xd6>
 801f34c:	2c59      	cmp	r4, #89	; 0x59
 801f34e:	dc11      	bgt.n	801f374 <GL_DrawArc+0x64>
 801f350:	2b5a      	cmp	r3, #90	; 0x5a
 801f352:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801f356:	f8cd b004 	str.w	fp, [sp, #4]
 801f35a:	4652      	mov	r2, sl
 801f35c:	bfa8      	it	ge
 801f35e:	235a      	movge	r3, #90	; 0x5a
 801f360:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 801f364:	4649      	mov	r1, r9
 801f366:	4640      	mov	r0, r8
 801f368:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 801f36c:	f8cd e000 	str.w	lr, [sp]
 801f370:	f7ff fcec 	bl	801ed4c <_DrawArc.isra.0.constprop.1>
 801f374:	2e00      	cmp	r6, #0
 801f376:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 801f37a:	dd4a      	ble.n	801f412 <GL_DrawArc+0x102>
 801f37c:	2c59      	cmp	r4, #89	; 0x59
 801f37e:	dc0f      	bgt.n	801f3a0 <GL_DrawArc+0x90>
 801f380:	2e5a      	cmp	r6, #90	; 0x5a
 801f382:	4631      	mov	r1, r6
 801f384:	f04f 0301 	mov.w	r3, #1
 801f388:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801f38c:	bfa8      	it	ge
 801f38e:	215a      	movge	r1, #90	; 0x5a
 801f390:	4652      	mov	r2, sl
 801f392:	9301      	str	r3, [sp, #4]
 801f394:	4640      	mov	r0, r8
 801f396:	9100      	str	r1, [sp, #0]
 801f398:	4623      	mov	r3, r4
 801f39a:	4649      	mov	r1, r9
 801f39c:	f7ff fcd6 	bl	801ed4c <_DrawArc.isra.0.constprop.1>
 801f3a0:	2f00      	cmp	r7, #0
 801f3a2:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 801f3a6:	dd34      	ble.n	801f412 <GL_DrawArc+0x102>
 801f3a8:	2c59      	cmp	r4, #89	; 0x59
 801f3aa:	dc13      	bgt.n	801f3d4 <GL_DrawArc+0xc4>
 801f3ac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801f3b0:	2f5a      	cmp	r7, #90	; 0x5a
 801f3b2:	463b      	mov	r3, r7
 801f3b4:	f04f 0201 	mov.w	r2, #1
 801f3b8:	bfa8      	it	ge
 801f3ba:	235a      	movge	r3, #90	; 0x5a
 801f3bc:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 801f3c0:	9201      	str	r2, [sp, #4]
 801f3c2:	4649      	mov	r1, r9
 801f3c4:	4652      	mov	r2, sl
 801f3c6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 801f3ca:	4640      	mov	r0, r8
 801f3cc:	f8cd e000 	str.w	lr, [sp]
 801f3d0:	f7ff fe2e 	bl	801f030 <_DrawArc.isra.0.constprop.2>
 801f3d4:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 801f3d8:	3c5a      	subs	r4, #90	; 0x5a
 801f3da:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 801f3de:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
 801f3e2:	2d00      	cmp	r5, #0
 801f3e4:	dd15      	ble.n	801f412 <GL_DrawArc+0x102>
 801f3e6:	2c59      	cmp	r4, #89	; 0x59
 801f3e8:	dc0e      	bgt.n	801f408 <GL_DrawArc+0xf8>
 801f3ea:	2d5a      	cmp	r5, #90	; 0x5a
 801f3ec:	4629      	mov	r1, r5
 801f3ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801f3f2:	f8cd b004 	str.w	fp, [sp, #4]
 801f3f6:	bfa8      	it	ge
 801f3f8:	215a      	movge	r1, #90	; 0x5a
 801f3fa:	4652      	mov	r2, sl
 801f3fc:	4623      	mov	r3, r4
 801f3fe:	4640      	mov	r0, r8
 801f400:	9100      	str	r1, [sp, #0]
 801f402:	4649      	mov	r1, r9
 801f404:	f7ff fe14 	bl	801f030 <_DrawArc.isra.0.constprop.2>
 801f408:	f1a5 035a 	sub.w	r3, r5, #90	; 0x5a
 801f40c:	3c5a      	subs	r4, #90	; 0x5a
 801f40e:	2b00      	cmp	r3, #0
 801f410:	dc9c      	bgt.n	801f34c <GL_DrawArc+0x3c>
 801f412:	b003      	add	sp, #12
 801f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f418:	f503 75b4 	add.w	r5, r3, #360	; 0x168
 801f41c:	e78a      	b.n	801f334 <GL_DrawArc+0x24>
 801f41e:	bf00      	nop

0801f420 <GUI_GetYAdjust>:
 801f420:	b510      	push	{r4, lr}
 801f422:	f7f6 ff1f 	bl	8016264 <GUI_Lock>
 801f426:	4b0f      	ldr	r3, [pc, #60]	; (801f464 <GUI_GetYAdjust+0x44>)
 801f428:	681a      	ldr	r2, [r3, #0]
 801f42a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 801f42c:	f003 030c 	and.w	r3, r3, #12
 801f430:	2b08      	cmp	r3, #8
 801f432:	d008      	beq.n	801f446 <GUI_GetYAdjust+0x26>
 801f434:	2b0c      	cmp	r3, #12
 801f436:	d006      	beq.n	801f446 <GUI_GetYAdjust+0x26>
 801f438:	2b04      	cmp	r3, #4
 801f43a:	d00b      	beq.n	801f454 <GUI_GetYAdjust+0x34>
 801f43c:	2400      	movs	r4, #0
 801f43e:	f7f6 ff07 	bl	8016250 <GUI_Unlock>
 801f442:	4620      	mov	r0, r4
 801f444:	bd10      	pop	{r4, pc}
 801f446:	69d3      	ldr	r3, [r2, #28]
 801f448:	7e1c      	ldrb	r4, [r3, #24]
 801f44a:	f7f6 ff01 	bl	8016250 <GUI_Unlock>
 801f44e:	0864      	lsrs	r4, r4, #1
 801f450:	4620      	mov	r0, r4
 801f452:	bd10      	pop	{r4, pc}
 801f454:	69d3      	ldr	r3, [r2, #28]
 801f456:	7e1c      	ldrb	r4, [r3, #24]
 801f458:	f7f6 fefa 	bl	8016250 <GUI_Unlock>
 801f45c:	3c01      	subs	r4, #1
 801f45e:	4620      	mov	r0, r4
 801f460:	bd10      	pop	{r4, pc}
 801f462:	bf00      	nop
 801f464:	20000018 	.word	0x20000018

0801f468 <GUI_GetFontDistY>:
 801f468:	b510      	push	{r4, lr}
 801f46a:	f7f6 fefb 	bl	8016264 <GUI_Lock>
 801f46e:	4b04      	ldr	r3, [pc, #16]	; (801f480 <GUI_GetFontDistY+0x18>)
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	69db      	ldr	r3, [r3, #28]
 801f474:	7e5c      	ldrb	r4, [r3, #25]
 801f476:	f7f6 feeb 	bl	8016250 <GUI_Unlock>
 801f47a:	4620      	mov	r0, r4
 801f47c:	bd10      	pop	{r4, pc}
 801f47e:	bf00      	nop
 801f480:	20000018 	.word	0x20000018

0801f484 <GUI_GetCharDistX>:
 801f484:	b510      	push	{r4, lr}
 801f486:	4604      	mov	r4, r0
 801f488:	f7f6 feec 	bl	8016264 <GUI_Lock>
 801f48c:	4b05      	ldr	r3, [pc, #20]	; (801f4a4 <GUI_GetCharDistX+0x20>)
 801f48e:	2100      	movs	r1, #0
 801f490:	4620      	mov	r0, r4
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	69db      	ldr	r3, [r3, #28]
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	4798      	blx	r3
 801f49a:	4604      	mov	r4, r0
 801f49c:	f7f6 fed8 	bl	8016250 <GUI_Unlock>
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	bd10      	pop	{r4, pc}
 801f4a4:	20000018 	.word	0x20000018

0801f4a8 <GUI_GetCharDistXEx>:
 801f4a8:	b538      	push	{r3, r4, r5, lr}
 801f4aa:	4604      	mov	r4, r0
 801f4ac:	460d      	mov	r5, r1
 801f4ae:	f7f6 fed9 	bl	8016264 <GUI_Lock>
 801f4b2:	4b06      	ldr	r3, [pc, #24]	; (801f4cc <GUI_GetCharDistXEx+0x24>)
 801f4b4:	4629      	mov	r1, r5
 801f4b6:	4620      	mov	r0, r4
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	69db      	ldr	r3, [r3, #28]
 801f4bc:	685b      	ldr	r3, [r3, #4]
 801f4be:	4798      	blx	r3
 801f4c0:	4604      	mov	r4, r0
 801f4c2:	f7f6 fec5 	bl	8016250 <GUI_Unlock>
 801f4c6:	4620      	mov	r0, r4
 801f4c8:	bd38      	pop	{r3, r4, r5, pc}
 801f4ca:	bf00      	nop
 801f4cc:	20000018 	.word	0x20000018

0801f4d0 <_Log2VisBuffered>:
 801f4d0:	4770      	bx	lr
 801f4d2:	bf00      	nop

0801f4d4 <_DispLine>:
 801f4d4:	b570      	push	{r4, r5, r6, lr}
 801f4d6:	b082      	sub	sp, #8
 801f4d8:	4d21      	ldr	r5, [pc, #132]	; (801f560 <_DispLine+0x8c>)
 801f4da:	4c22      	ldr	r4, [pc, #136]	; (801f564 <_DispLine+0x90>)
 801f4dc:	4616      	mov	r6, r2
 801f4de:	ab02      	add	r3, sp, #8
 801f4e0:	9001      	str	r0, [sp, #4]
 801f4e2:	f843 1d08 	str.w	r1, [r3, #-8]!
 801f4e6:	4619      	mov	r1, r3
 801f4e8:	682b      	ldr	r3, [r5, #0]
 801f4ea:	4798      	blx	r3
 801f4ec:	6823      	ldr	r3, [r4, #0]
 801f4ee:	9001      	str	r0, [sp, #4]
 801f4f0:	6958      	ldr	r0, [r3, #20]
 801f4f2:	b118      	cbz	r0, 801f4fc <_DispLine+0x28>
 801f4f4:	4631      	mov	r1, r6
 801f4f6:	f7f2 fffb 	bl	80124f0 <GUI_RectsIntersect>
 801f4fa:	b1a8      	cbz	r0, 801f528 <_DispLine+0x54>
 801f4fc:	2001      	movs	r0, #1
 801f4fe:	f000 ffdf 	bl	80204c0 <GUI__ManageCache>
 801f502:	6822      	ldr	r2, [r4, #0]
 801f504:	69d3      	ldr	r3, [r2, #28]
 801f506:	695b      	ldr	r3, [r3, #20]
 801f508:	b1ab      	cbz	r3, 801f536 <_DispLine+0x62>
 801f50a:	4c17      	ldr	r4, [pc, #92]	; (801f568 <_DispLine+0x94>)
 801f50c:	6821      	ldr	r1, [r4, #0]
 801f50e:	b169      	cbz	r1, 801f52c <_DispLine+0x58>
 801f510:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 801f514:	689b      	ldr	r3, [r3, #8]
 801f516:	9801      	ldr	r0, [sp, #4]
 801f518:	9900      	ldr	r1, [sp, #0]
 801f51a:	4798      	blx	r3
 801f51c:	4628      	mov	r0, r5
 801f51e:	6823      	ldr	r3, [r4, #0]
 801f520:	4798      	blx	r3
 801f522:	2000      	movs	r0, #0
 801f524:	f000 ffcc 	bl	80204c0 <GUI__ManageCache>
 801f528:	b002      	add	sp, #8
 801f52a:	bd70      	pop	{r4, r5, r6, pc}
 801f52c:	689b      	ldr	r3, [r3, #8]
 801f52e:	9900      	ldr	r1, [sp, #0]
 801f530:	9801      	ldr	r0, [sp, #4]
 801f532:	4798      	blx	r3
 801f534:	e7f5      	b.n	801f522 <_DispLine+0x4e>
 801f536:	4d0d      	ldr	r5, [pc, #52]	; (801f56c <_DispLine+0x98>)
 801f538:	9b00      	ldr	r3, [sp, #0]
 801f53a:	a801      	add	r0, sp, #4
 801f53c:	3b01      	subs	r3, #1
 801f53e:	2b00      	cmp	r3, #0
 801f540:	9300      	str	r3, [sp, #0]
 801f542:	dbee      	blt.n	801f522 <_DispLine+0x4e>
 801f544:	f7f6 ffa8 	bl	8016498 <GUI_UC__GetCharCodeInc>
 801f548:	6823      	ldr	r3, [r4, #0]
 801f54a:	4606      	mov	r6, r0
 801f54c:	69db      	ldr	r3, [r3, #28]
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	4798      	blx	r3
 801f552:	682b      	ldr	r3, [r5, #0]
 801f554:	2b00      	cmp	r3, #0
 801f556:	d0ef      	beq.n	801f538 <_DispLine+0x64>
 801f558:	4630      	mov	r0, r6
 801f55a:	4798      	blx	r3
 801f55c:	e7ec      	b.n	801f538 <_DispLine+0x64>
 801f55e:	bf00      	nop
 801f560:	20000078 	.word	0x20000078
 801f564:	20000018 	.word	0x20000018
 801f568:	2002afa0 	.word	0x2002afa0
 801f56c:	2002afac 	.word	0x2002afac

0801f570 <GUI__GetLineNumChars>:
 801f570:	b530      	push	{r4, r5, lr}
 801f572:	b083      	sub	sp, #12
 801f574:	9001      	str	r0, [sp, #4]
 801f576:	b1e0      	cbz	r0, 801f5b2 <GUI__GetLineNumChars+0x42>
 801f578:	4b10      	ldr	r3, [pc, #64]	; (801f5bc <GUI__GetLineNumChars+0x4c>)
 801f57a:	460d      	mov	r5, r1
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	69db      	ldr	r3, [r3, #28]
 801f580:	695b      	ldr	r3, [r3, #20]
 801f582:	b123      	cbz	r3, 801f58e <GUI__GetLineNumChars+0x1e>
 801f584:	685b      	ldr	r3, [r3, #4]
 801f586:	b113      	cbz	r3, 801f58e <GUI__GetLineNumChars+0x1e>
 801f588:	4798      	blx	r3
 801f58a:	b003      	add	sp, #12
 801f58c:	bd30      	pop	{r4, r5, pc}
 801f58e:	2d00      	cmp	r5, #0
 801f590:	dd11      	ble.n	801f5b6 <GUI__GetLineNumChars+0x46>
 801f592:	2400      	movs	r4, #0
 801f594:	a801      	add	r0, sp, #4
 801f596:	f7f6 ff7f 	bl	8016498 <GUI_UC__GetCharCodeInc>
 801f59a:	b138      	cbz	r0, 801f5ac <GUI__GetLineNumChars+0x3c>
 801f59c:	280a      	cmp	r0, #10
 801f59e:	d005      	beq.n	801f5ac <GUI__GetLineNumChars+0x3c>
 801f5a0:	3401      	adds	r4, #1
 801f5a2:	42a5      	cmp	r5, r4
 801f5a4:	d1f6      	bne.n	801f594 <GUI__GetLineNumChars+0x24>
 801f5a6:	4628      	mov	r0, r5
 801f5a8:	b003      	add	sp, #12
 801f5aa:	bd30      	pop	{r4, r5, pc}
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	b003      	add	sp, #12
 801f5b0:	bd30      	pop	{r4, r5, pc}
 801f5b2:	b003      	add	sp, #12
 801f5b4:	bd30      	pop	{r4, r5, pc}
 801f5b6:	2000      	movs	r0, #0
 801f5b8:	e7e7      	b.n	801f58a <GUI__GetLineNumChars+0x1a>
 801f5ba:	bf00      	nop
 801f5bc:	20000018 	.word	0x20000018

0801f5c0 <GUI__GetLineDistX>:
 801f5c0:	b570      	push	{r4, r5, r6, lr}
 801f5c2:	b084      	sub	sp, #16
 801f5c4:	4a1c      	ldr	r2, [pc, #112]	; (801f638 <GUI__GetLineDistX+0x78>)
 801f5c6:	ab04      	add	r3, sp, #16
 801f5c8:	9001      	str	r0, [sp, #4]
 801f5ca:	f843 1d10 	str.w	r1, [r3, #-16]!
 801f5ce:	4619      	mov	r1, r3
 801f5d0:	6813      	ldr	r3, [r2, #0]
 801f5d2:	4798      	blx	r3
 801f5d4:	9001      	str	r0, [sp, #4]
 801f5d6:	b350      	cbz	r0, 801f62e <GUI__GetLineDistX+0x6e>
 801f5d8:	4b18      	ldr	r3, [pc, #96]	; (801f63c <GUI__GetLineDistX+0x7c>)
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	69db      	ldr	r3, [r3, #28]
 801f5de:	695b      	ldr	r3, [r3, #20]
 801f5e0:	b12b      	cbz	r3, 801f5ee <GUI__GetLineDistX+0x2e>
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	b11b      	cbz	r3, 801f5ee <GUI__GetLineDistX+0x2e>
 801f5e6:	9900      	ldr	r1, [sp, #0]
 801f5e8:	4798      	blx	r3
 801f5ea:	b004      	add	sp, #16
 801f5ec:	bd70      	pop	{r4, r5, r6, pc}
 801f5ee:	9b00      	ldr	r3, [sp, #0]
 801f5f0:	3b01      	subs	r3, #1
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	9300      	str	r3, [sp, #0]
 801f5f6:	db1c      	blt.n	801f632 <GUI__GetLineDistX+0x72>
 801f5f8:	2400      	movs	r4, #0
 801f5fa:	a801      	add	r0, sp, #4
 801f5fc:	f7f6 ff4c 	bl	8016498 <GUI_UC__GetCharCodeInc>
 801f600:	4605      	mov	r5, r0
 801f602:	f7ff ff3f 	bl	801f484 <GUI_GetCharDistX>
 801f606:	9b00      	ldr	r3, [sp, #0]
 801f608:	4404      	add	r4, r0
 801f60a:	3b01      	subs	r3, #1
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	9300      	str	r3, [sp, #0]
 801f610:	daf3      	bge.n	801f5fa <GUI__GetLineDistX+0x3a>
 801f612:	2600      	movs	r6, #0
 801f614:	a904      	add	r1, sp, #16
 801f616:	4628      	mov	r0, r5
 801f618:	f841 6d04 	str.w	r6, [r1, #-4]!
 801f61c:	f7ff ff44 	bl	801f4a8 <GUI_GetCharDistXEx>
 801f620:	9b03      	ldr	r3, [sp, #12]
 801f622:	4298      	cmp	r0, r3
 801f624:	bfb8      	it	lt
 801f626:	1a1e      	sublt	r6, r3, r0
 801f628:	1930      	adds	r0, r6, r4
 801f62a:	b004      	add	sp, #16
 801f62c:	bd70      	pop	{r4, r5, r6, pc}
 801f62e:	b004      	add	sp, #16
 801f630:	bd70      	pop	{r4, r5, r6, pc}
 801f632:	2500      	movs	r5, #0
 801f634:	462c      	mov	r4, r5
 801f636:	e7ec      	b.n	801f612 <GUI__GetLineDistX+0x52>
 801f638:	20000078 	.word	0x20000078
 801f63c:	20000018 	.word	0x20000018

0801f640 <GUI__DispLine>:
 801f640:	4b2e      	ldr	r3, [pc, #184]	; (801f6fc <GUI__DispLine+0xbc>)
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f648:	4604      	mov	r4, r0
 801f64a:	b082      	sub	sp, #8
 801f64c:	460d      	mov	r5, r1
 801f64e:	b183      	cbz	r3, 801f672 <GUI__DispLine+0x32>
 801f650:	2000      	movs	r0, #0
 801f652:	f7fd ff79 	bl	801d548 <WM__InitIVRSearch>
 801f656:	b148      	cbz	r0, 801f66c <GUI__DispLine+0x2c>
 801f658:	466e      	mov	r6, sp
 801f65a:	4632      	mov	r2, r6
 801f65c:	4629      	mov	r1, r5
 801f65e:	4620      	mov	r0, r4
 801f660:	f7ff ff38 	bl	801f4d4 <_DispLine>
 801f664:	f7fd fe46 	bl	801d2f4 <WM__GetNextIVR>
 801f668:	2800      	cmp	r0, #0
 801f66a:	d1f6      	bne.n	801f65a <GUI__DispLine+0x1a>
 801f66c:	b002      	add	sp, #8
 801f66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f672:	f8df 808c 	ldr.w	r8, [pc, #140]	; 801f700 <GUI__DispLine+0xc0>
 801f676:	466b      	mov	r3, sp
 801f678:	6810      	ldr	r0, [r2, #0]
 801f67a:	466e      	mov	r6, sp
 801f67c:	f8d8 7000 	ldr.w	r7, [r8]
 801f680:	6851      	ldr	r1, [r2, #4]
 801f682:	f8b7 c04c 	ldrh.w	ip, [r7, #76]	; 0x4c
 801f686:	f8b7 e050 	ldrh.w	lr, [r7, #80]	; 0x50
 801f68a:	c303      	stmia	r3!, {r0, r1}
 801f68c:	f8bd 7000 	ldrh.w	r7, [sp]
 801f690:	4668      	mov	r0, sp
 801f692:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801f696:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f69a:	4467      	add	r7, ip
 801f69c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801f6a0:	4461      	add	r1, ip
 801f6a2:	4472      	add	r2, lr
 801f6a4:	f8ad 7000 	strh.w	r7, [sp]
 801f6a8:	4473      	add	r3, lr
 801f6aa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f6ae:	f8ad 2002 	strh.w	r2, [sp, #2]
 801f6b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f6b6:	f7fd ff47 	bl	801d548 <WM__InitIVRSearch>
 801f6ba:	b960      	cbnz	r0, 801f6d6 <GUI__DispLine+0x96>
 801f6bc:	f8d8 3000 	ldr.w	r3, [r8]
 801f6c0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801f6c2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801f6c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801f6c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801f6c8:	1b09      	subs	r1, r1, r4
 801f6ca:	1a12      	subs	r2, r2, r0
 801f6cc:	8459      	strh	r1, [r3, #34]	; 0x22
 801f6ce:	849a      	strh	r2, [r3, #36]	; 0x24
 801f6d0:	b002      	add	sp, #8
 801f6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d6:	f8d8 3000 	ldr.w	r3, [r8]
 801f6da:	4632      	mov	r2, r6
 801f6dc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801f6e0:	4629      	mov	r1, r5
 801f6e2:	f8bd 7000 	ldrh.w	r7, [sp]
 801f6e6:	8498      	strh	r0, [r3, #36]	; 0x24
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	845f      	strh	r7, [r3, #34]	; 0x22
 801f6ec:	f7ff fef2 	bl	801f4d4 <_DispLine>
 801f6f0:	f7fd fe00 	bl	801d2f4 <WM__GetNextIVR>
 801f6f4:	2800      	cmp	r0, #0
 801f6f6:	d1ee      	bne.n	801f6d6 <GUI__DispLine+0x96>
 801f6f8:	e7e0      	b.n	801f6bc <GUI__DispLine+0x7c>
 801f6fa:	bf00      	nop
 801f6fc:	2002af8c 	.word	0x2002af8c
 801f700:	20000018 	.word	0x20000018

0801f704 <GUIMONO_DispChar>:
 801f704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f708:	4e5c      	ldr	r6, [pc, #368]	; (801f87c <GUIMONO_DispChar+0x178>)
 801f70a:	b08d      	sub	sp, #52	; 0x34
 801f70c:	6833      	ldr	r3, [r6, #0]
 801f70e:	69da      	ldr	r2, [r3, #28]
 801f710:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801f714:	69d4      	ldr	r4, [r2, #28]
 801f716:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 801f71a:	4583      	cmp	fp, r0
 801f71c:	f200 8097 	bhi.w	801f84e <GUIMONO_DispChar+0x14a>
 801f720:	89e1      	ldrh	r1, [r4, #14]
 801f722:	4281      	cmp	r1, r0
 801f724:	f0c0 8093 	bcc.w	801f84e <GUIMONO_DispChar+0x14a>
 801f728:	6821      	ldr	r1, [r4, #0]
 801f72a:	ebcb 0b00 	rsb	fp, fp, r0
 801f72e:	9108      	str	r1, [sp, #32]
 801f730:	f04f 31ff 	mov.w	r1, #4294967295
 801f734:	910a      	str	r1, [sp, #40]	; 0x28
 801f736:	f1bb 3fff 	cmp.w	fp, #4294967295
 801f73a:	f000 8082 	beq.w	801f842 <GUIMONO_DispChar+0x13e>
 801f73e:	f892 8018 	ldrb.w	r8, [r2, #24]
 801f742:	7ca2      	ldrb	r2, [r4, #18]
 801f744:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 801f748:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 801f74c:	fb18 f302 	smulbb	r3, r8, r2
 801f750:	4608      	mov	r0, r1
 801f752:	9107      	str	r1, [sp, #28]
 801f754:	461f      	mov	r7, r3
 801f756:	f894 a010 	ldrb.w	sl, [r4, #16]
 801f75a:	f7f7 fe2d 	bl	80173b8 <LCD_SetDrawMode>
 801f75e:	f8d6 e000 	ldr.w	lr, [r6]
 801f762:	9908      	ldr	r1, [sp, #32]
 801f764:	4643      	mov	r3, r8
 801f766:	f8de c038 	ldr.w	ip, [lr, #56]	; 0x38
 801f76a:	4652      	mov	r2, sl
 801f76c:	9009      	str	r0, [sp, #36]	; 0x24
 801f76e:	fb07 100b 	mla	r0, r7, fp, r1
 801f772:	f8de e01c 	ldr.w	lr, [lr, #28]
 801f776:	970b      	str	r7, [sp, #44]	; 0x2c
 801f778:	2701      	movs	r7, #1
 801f77a:	9004      	str	r0, [sp, #16]
 801f77c:	4649      	mov	r1, r9
 801f77e:	f8cd c014 	str.w	ip, [sp, #20]
 801f782:	4628      	mov	r0, r5
 801f784:	f894 c012 	ldrb.w	ip, [r4, #18]
 801f788:	9702      	str	r7, [sp, #8]
 801f78a:	f8cd c00c 	str.w	ip, [sp, #12]
 801f78e:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801f792:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 801f87c <GUIMONO_DispChar+0x178>
 801f796:	f8cd c004 	str.w	ip, [sp, #4]
 801f79a:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801f79e:	f8cd e000 	str.w	lr, [sp]
 801f7a2:	f7f7 ffcf 	bl	8017744 <LCD_DrawBitmap>
 801f7a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f7a8:	1c7b      	adds	r3, r7, #1
 801f7aa:	d025      	beq.n	801f7f8 <GUIMONO_DispChar+0xf4>
 801f7ac:	9907      	ldr	r1, [sp, #28]
 801f7ae:	f041 0002 	orr.w	r0, r1, #2
 801f7b2:	f7f7 fe01 	bl	80173b8 <LCD_SetDrawMode>
 801f7b6:	f8db 1000 	ldr.w	r1, [fp]
 801f7ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f7bc:	4643      	mov	r3, r8
 801f7be:	9808      	ldr	r0, [sp, #32]
 801f7c0:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 801f7c4:	fb02 0007 	mla	r0, r2, r7, r0
 801f7c8:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 801f7cc:	2701      	movs	r7, #1
 801f7ce:	f8cd c014 	str.w	ip, [sp, #20]
 801f7d2:	9004      	str	r0, [sp, #16]
 801f7d4:	4652      	mov	r2, sl
 801f7d6:	f894 c012 	ldrb.w	ip, [r4, #18]
 801f7da:	4649      	mov	r1, r9
 801f7dc:	9702      	str	r7, [sp, #8]
 801f7de:	4628      	mov	r0, r5
 801f7e0:	f8cd c00c 	str.w	ip, [sp, #12]
 801f7e4:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801f7e8:	f8cd c004 	str.w	ip, [sp, #4]
 801f7ec:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801f7f0:	f8cd e000 	str.w	lr, [sp]
 801f7f4:	f7f7 ffa6 	bl	8017744 <LCD_DrawBitmap>
 801f7f8:	6833      	ldr	r3, [r6, #0]
 801f7fa:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801f87c <GUIMONO_DispChar+0x178>
 801f7fe:	69db      	ldr	r3, [r3, #28]
 801f800:	7e5a      	ldrb	r2, [r3, #25]
 801f802:	7e1b      	ldrb	r3, [r3, #24]
 801f804:	429a      	cmp	r2, r3
 801f806:	d915      	bls.n	801f834 <GUIMONO_DispChar+0x130>
 801f808:	9b07      	ldr	r3, [sp, #28]
 801f80a:	2b02      	cmp	r3, #2
 801f80c:	d012      	beq.n	801f834 <GUIMONO_DispChar+0x130>
 801f80e:	f083 0004 	eor.w	r0, r3, #4
 801f812:	f7f7 fdd1 	bl	80173b8 <LCD_SetDrawMode>
 801f816:	f8d8 3000 	ldr.w	r3, [r8]
 801f81a:	4628      	mov	r0, r5
 801f81c:	69db      	ldr	r3, [r3, #28]
 801f81e:	7e1f      	ldrb	r7, [r3, #24]
 801f820:	7ed9      	ldrb	r1, [r3, #27]
 801f822:	7e9a      	ldrb	r2, [r3, #26]
 801f824:	7e5b      	ldrb	r3, [r3, #25]
 801f826:	fb07 9101 	mla	r1, r7, r1, r9
 801f82a:	fb0a 5202 	mla	r2, sl, r2, r5
 801f82e:	444b      	add	r3, r9
 801f830:	f7f7 fe4a 	bl	80174c8 <LCD_FillRect>
 801f834:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801f838:	f7f7 fdbe 	bl	80173b8 <LCD_SetDrawMode>
 801f83c:	6833      	ldr	r3, [r6, #0]
 801f83e:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801f842:	7c62      	ldrb	r2, [r4, #17]
 801f844:	4415      	add	r5, r2
 801f846:	845d      	strh	r5, [r3, #34]	; 0x22
 801f848:	b00d      	add	sp, #52	; 0x34
 801f84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f84e:	68a1      	ldr	r1, [r4, #8]
 801f850:	2900      	cmp	r1, #0
 801f852:	d0f6      	beq.n	801f842 <GUIMONO_DispChar+0x13e>
 801f854:	880f      	ldrh	r7, [r1, #0]
 801f856:	42b8      	cmp	r0, r7
 801f858:	d3f3      	bcc.n	801f842 <GUIMONO_DispChar+0x13e>
 801f85a:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 801f85e:	4586      	cmp	lr, r0
 801f860:	d3ef      	bcc.n	801f842 <GUIMONO_DispChar+0x13e>
 801f862:	1bc0      	subs	r0, r0, r7
 801f864:	6849      	ldr	r1, [r1, #4]
 801f866:	6867      	ldr	r7, [r4, #4]
 801f868:	b280      	uxth	r0, r0
 801f86a:	9708      	str	r7, [sp, #32]
 801f86c:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 801f870:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 801f874:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801f878:	910a      	str	r1, [sp, #40]	; 0x28
 801f87a:	e75c      	b.n	801f736 <GUIMONO_DispChar+0x32>
 801f87c:	20000018 	.word	0x20000018

0801f880 <GUIMONO_GetCharDistX>:
 801f880:	4b04      	ldr	r3, [pc, #16]	; (801f894 <GUIMONO_GetCharDistX+0x14>)
 801f882:	681b      	ldr	r3, [r3, #0]
 801f884:	69db      	ldr	r3, [r3, #28]
 801f886:	69db      	ldr	r3, [r3, #28]
 801f888:	b109      	cbz	r1, 801f88e <GUIMONO_GetCharDistX+0xe>
 801f88a:	7c1a      	ldrb	r2, [r3, #16]
 801f88c:	600a      	str	r2, [r1, #0]
 801f88e:	7c58      	ldrb	r0, [r3, #17]
 801f890:	4770      	bx	lr
 801f892:	bf00      	nop
 801f894:	20000018 	.word	0x20000018

0801f898 <GUIMONO_GetFontInfo>:
 801f898:	2302      	movs	r3, #2
 801f89a:	800b      	strh	r3, [r1, #0]
 801f89c:	4770      	bx	lr
 801f89e:	bf00      	nop

0801f8a0 <GUIMONO_IsInFont>:
 801f8a0:	69c3      	ldr	r3, [r0, #28]
 801f8a2:	899a      	ldrh	r2, [r3, #12]
 801f8a4:	428a      	cmp	r2, r1
 801f8a6:	d802      	bhi.n	801f8ae <GUIMONO_IsInFont+0xe>
 801f8a8:	89da      	ldrh	r2, [r3, #14]
 801f8aa:	428a      	cmp	r2, r1
 801f8ac:	d211      	bcs.n	801f8d2 <GUIMONO_IsInFont+0x32>
 801f8ae:	6898      	ldr	r0, [r3, #8]
 801f8b0:	b118      	cbz	r0, 801f8ba <GUIMONO_IsInFont+0x1a>
 801f8b2:	8803      	ldrh	r3, [r0, #0]
 801f8b4:	4299      	cmp	r1, r3
 801f8b6:	d201      	bcs.n	801f8bc <GUIMONO_IsInFont+0x1c>
 801f8b8:	2000      	movs	r0, #0
 801f8ba:	4770      	bx	lr
 801f8bc:	8842      	ldrh	r2, [r0, #2]
 801f8be:	428a      	cmp	r2, r1
 801f8c0:	d3fa      	bcc.n	801f8b8 <GUIMONO_IsInFont+0x18>
 801f8c2:	1ac9      	subs	r1, r1, r3
 801f8c4:	6843      	ldr	r3, [r0, #4]
 801f8c6:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 801f8ca:	43c0      	mvns	r0, r0
 801f8cc:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801f8d0:	4770      	bx	lr
 801f8d2:	2001      	movs	r0, #1
 801f8d4:	4770      	bx	lr
 801f8d6:	bf00      	nop

0801f8d8 <GUI_CURSOR_SetPositionEx>:
 801f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8dc:	4614      	mov	r4, r2
 801f8de:	4606      	mov	r6, r0
 801f8e0:	4688      	mov	r8, r1
 801f8e2:	f7f6 fcbf 	bl	8016264 <GUI_Lock>
 801f8e6:	4620      	mov	r0, r4
 801f8e8:	f7f5 fa92 	bl	8014e10 <GUI_GetCursorLayer>
 801f8ec:	b9e8      	cbnz	r0, 801f92a <GUI_CURSOR_SetPositionEx+0x52>
 801f8ee:	00a7      	lsls	r7, r4, #2
 801f8f0:	4d1b      	ldr	r5, [pc, #108]	; (801f960 <GUI_CURSOR_SetPositionEx+0x88>)
 801f8f2:	193b      	adds	r3, r7, r4
 801f8f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f8f8:	68da      	ldr	r2, [r3, #12]
 801f8fa:	42b2      	cmp	r2, r6
 801f8fc:	d106      	bne.n	801f90c <GUI_CURSOR_SetPositionEx+0x34>
 801f8fe:	691b      	ldr	r3, [r3, #16]
 801f900:	4543      	cmp	r3, r8
 801f902:	d103      	bne.n	801f90c <GUI_CURSOR_SetPositionEx+0x34>
 801f904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f908:	f7f6 bca2 	b.w	8016250 <GUI_Unlock>
 801f90c:	193b      	adds	r3, r7, r4
 801f90e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801f912:	6958      	ldr	r0, [r3, #20]
 801f914:	b9d0      	cbnz	r0, 801f94c <GUI_CURSOR_SetPositionEx+0x74>
 801f916:	443c      	add	r4, r7
 801f918:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801f91c:	60e6      	str	r6, [r4, #12]
 801f91e:	f8c4 8010 	str.w	r8, [r4, #16]
 801f922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f926:	f7f6 bc93 	b.w	8016250 <GUI_Unlock>
 801f92a:	4b0d      	ldr	r3, [pc, #52]	; (801f960 <GUI_CURSOR_SetPositionEx+0x88>)
 801f92c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801f930:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f934:	6863      	ldr	r3, [r4, #4]
 801f936:	689a      	ldr	r2, [r3, #8]
 801f938:	6859      	ldr	r1, [r3, #4]
 801f93a:	ebc2 0208 	rsb	r2, r2, r8
 801f93e:	1a71      	subs	r1, r6, r1
 801f940:	f7f5 faa4 	bl	8014e8c <GUI_SetLayerPosEx>
 801f944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f948:	f7f6 bc82 	b.w	8016250 <GUI_Unlock>
 801f94c:	685b      	ldr	r3, [r3, #4]
 801f94e:	689a      	ldr	r2, [r3, #8]
 801f950:	6859      	ldr	r1, [r3, #4]
 801f952:	ebc2 0208 	rsb	r2, r2, r8
 801f956:	1a71      	subs	r1, r6, r1
 801f958:	f000 f9d4 	bl	801fd04 <GUI_SPRITE_SetPosition>
 801f95c:	e7db      	b.n	801f916 <GUI_CURSOR_SetPositionEx+0x3e>
 801f95e:	bf00      	nop
 801f960:	20000424 	.word	0x20000424

0801f964 <_OnExit>:
 801f964:	4b03      	ldr	r3, [pc, #12]	; (801f974 <_OnExit+0x10>)
 801f966:	2200      	movs	r2, #0
 801f968:	4903      	ldr	r1, [pc, #12]	; (801f978 <_OnExit+0x14>)
 801f96a:	649a      	str	r2, [r3, #72]	; 0x48
 801f96c:	600b      	str	r3, [r1, #0]
 801f96e:	604b      	str	r3, [r1, #4]
 801f970:	64da      	str	r2, [r3, #76]	; 0x4c
 801f972:	4770      	bx	lr
 801f974:	20000470 	.word	0x20000470
 801f978:	2000007c 	.word	0x2000007c

0801f97c <GUI_PID_GetState>:
 801f97c:	b470      	push	{r4, r5, r6}
 801f97e:	4d12      	ldr	r5, [pc, #72]	; (801f9c8 <GUI_PID_GetState+0x4c>)
 801f980:	4604      	mov	r4, r0
 801f982:	682b      	ldr	r3, [r5, #0]
 801f984:	686a      	ldr	r2, [r5, #4]
 801f986:	4293      	cmp	r3, r2
 801f988:	d00f      	beq.n	801f9aa <GUI_PID_GetState+0x2e>
 801f98a:	4e10      	ldr	r6, [pc, #64]	; (801f9cc <GUI_PID_GetState+0x50>)
 801f98c:	42b3      	cmp	r3, r6
 801f98e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f992:	bf14      	ite	ne
 801f994:	330c      	addne	r3, #12
 801f996:	3b3c      	subeq	r3, #60	; 0x3c
 801f998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801f99c:	602b      	str	r3, [r5, #0]
 801f99e:	7a20      	ldrb	r0, [r4, #8]
 801f9a0:	3000      	adds	r0, #0
 801f9a2:	bc70      	pop	{r4, r5, r6}
 801f9a4:	bf18      	it	ne
 801f9a6:	2001      	movne	r0, #1
 801f9a8:	4770      	bx	lr
 801f9aa:	4a09      	ldr	r2, [pc, #36]	; (801f9d0 <GUI_PID_GetState+0x54>)
 801f9ac:	4293      	cmp	r3, r2
 801f9ae:	d004      	beq.n	801f9ba <GUI_PID_GetState+0x3e>
 801f9b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801f9b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801f9b8:	e7f1      	b.n	801f99e <GUI_PID_GetState+0x22>
 801f9ba:	333c      	adds	r3, #60	; 0x3c
 801f9bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f9c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801f9c4:	e7eb      	b.n	801f99e <GUI_PID_GetState+0x22>
 801f9c6:	bf00      	nop
 801f9c8:	2000007c 	.word	0x2000007c
 801f9cc:	200004ac 	.word	0x200004ac
 801f9d0:	20000470 	.word	0x20000470

0801f9d4 <GUI_PID_StoreState>:
 801f9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9d6:	4e3c      	ldr	r6, [pc, #240]	; (801fac8 <GUI_PID_StoreState+0xf4>)
 801f9d8:	b085      	sub	sp, #20
 801f9da:	4604      	mov	r4, r0
 801f9dc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d055      	beq.n	801fa8e <GUI_PID_StoreState+0xba>
 801f9e2:	4a3a      	ldr	r2, [pc, #232]	; (801facc <GUI_PID_StoreState+0xf8>)
 801f9e4:	ad01      	add	r5, sp, #4
 801f9e6:	493a      	ldr	r1, [pc, #232]	; (801fad0 <GUI_PID_StoreState+0xfc>)
 801f9e8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 801f9ea:	6011      	str	r1, [r2, #0]
 801f9ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801f9f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801f9f4:	b10b      	cbz	r3, 801f9fa <GUI_PID_StoreState+0x26>
 801f9f6:	4628      	mov	r0, r5
 801f9f8:	4798      	blx	r3
 801f9fa:	4f36      	ldr	r7, [pc, #216]	; (801fad4 <GUI_PID_StoreState+0x100>)
 801f9fc:	683c      	ldr	r4, [r7, #0]
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	429c      	cmp	r4, r3
 801fa02:	d032      	beq.n	801fa6a <GUI_PID_StoreState+0x96>
 801fa04:	42b3      	cmp	r3, r6
 801fa06:	4a30      	ldr	r2, [pc, #192]	; (801fac8 <GUI_PID_StoreState+0xf4>)
 801fa08:	d032      	beq.n	801fa70 <GUI_PID_StoreState+0x9c>
 801fa0a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801fa0e:	f1a3 010c 	sub.w	r1, r3, #12
 801fa12:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 801fa16:	468c      	mov	ip, r1
 801fa18:	4586      	cmp	lr, r0
 801fa1a:	d135      	bne.n	801fa88 <GUI_PID_StoreState+0xb4>
 801fa1c:	428c      	cmp	r4, r1
 801fa1e:	d033      	beq.n	801fa88 <GUI_PID_StoreState+0xb4>
 801fa20:	4291      	cmp	r1, r2
 801fa22:	d03b      	beq.n	801fa9c <GUI_PID_StoreState+0xc8>
 801fa24:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 801fa28:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801fa2c:	4282      	cmp	r2, r0
 801fa2e:	d03d      	beq.n	801faac <GUI_PID_StoreState+0xd8>
 801fa30:	4573      	cmp	r3, lr
 801fa32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801fa36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801fa3a:	d00b      	beq.n	801fa54 <GUI_PID_StoreState+0x80>
 801fa3c:	330c      	adds	r3, #12
 801fa3e:	429c      	cmp	r4, r3
 801fa40:	607b      	str	r3, [r7, #4]
 801fa42:	d00b      	beq.n	801fa5c <GUI_PID_StoreState+0x88>
 801fa44:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801fa46:	b10b      	cbz	r3, 801fa4c <GUI_PID_StoreState+0x78>
 801fa48:	4628      	mov	r0, r5
 801fa4a:	4798      	blx	r3
 801fa4c:	f7f6 fd56 	bl	80164fc <GUI_SignalEvent>
 801fa50:	b005      	add	sp, #20
 801fa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa54:	4b1c      	ldr	r3, [pc, #112]	; (801fac8 <GUI_PID_StoreState+0xf4>)
 801fa56:	429c      	cmp	r4, r3
 801fa58:	607b      	str	r3, [r7, #4]
 801fa5a:	d1f3      	bne.n	801fa44 <GUI_PID_StoreState+0x70>
 801fa5c:	4b1e      	ldr	r3, [pc, #120]	; (801fad8 <GUI_PID_StoreState+0x104>)
 801fa5e:	429c      	cmp	r4, r3
 801fa60:	bf14      	ite	ne
 801fa62:	340c      	addne	r4, #12
 801fa64:	3c3c      	subeq	r4, #60	; 0x3c
 801fa66:	603c      	str	r4, [r7, #0]
 801fa68:	e7ec      	b.n	801fa44 <GUI_PID_StoreState+0x70>
 801fa6a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 801fad8 <GUI_PID_StoreState+0x104>
 801fa6e:	e7df      	b.n	801fa30 <GUI_PID_StoreState+0x5c>
 801fa70:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801fa74:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 801fa78:	4282      	cmp	r2, r0
 801fa7a:	d11d      	bne.n	801fab8 <GUI_PID_StoreState+0xe4>
 801fa7c:	f106 0e3c 	add.w	lr, r6, #60	; 0x3c
 801fa80:	4574      	cmp	r4, lr
 801fa82:	d019      	beq.n	801fab8 <GUI_PID_StoreState+0xe4>
 801fa84:	4671      	mov	r1, lr
 801fa86:	e7cf      	b.n	801fa28 <GUI_PID_StoreState+0x54>
 801fa88:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 801fa8c:	e7d0      	b.n	801fa30 <GUI_PID_StoreState+0x5c>
 801fa8e:	4b13      	ldr	r3, [pc, #76]	; (801fadc <GUI_PID_StoreState+0x108>)
 801fa90:	4630      	mov	r0, r6
 801fa92:	f840 3f50 	str.w	r3, [r0, #80]!
 801fa96:	f7f2 ffcf 	bl	8012a38 <GUI__RegisterExit>
 801fa9a:	e7a2      	b.n	801f9e2 <GUI_PID_StoreState+0xe>
 801fa9c:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 801faa0:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 801faa4:	4282      	cmp	r2, r0
 801faa6:	d1c3      	bne.n	801fa30 <GUI_PID_StoreState+0x5c>
 801faa8:	4663      	mov	r3, ip
 801faaa:	e7c1      	b.n	801fa30 <GUI_PID_StoreState+0x5c>
 801faac:	42b3      	cmp	r3, r6
 801faae:	d008      	beq.n	801fac2 <GUI_PID_StoreState+0xee>
 801fab0:	f1a3 0c0c 	sub.w	ip, r3, #12
 801fab4:	4663      	mov	r3, ip
 801fab6:	e7bb      	b.n	801fa30 <GUI_PID_StoreState+0x5c>
 801fab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801fabc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801fac0:	e7bc      	b.n	801fa3c <GUI_PID_StoreState+0x68>
 801fac2:	4b05      	ldr	r3, [pc, #20]	; (801fad8 <GUI_PID_StoreState+0x104>)
 801fac4:	e7b4      	b.n	801fa30 <GUI_PID_StoreState+0x5c>
 801fac6:	bf00      	nop
 801fac8:	20000470 	.word	0x20000470
 801facc:	2002afdc 	.word	0x2002afdc
 801fad0:	0801e3c9 	.word	0x0801e3c9
 801fad4:	2000007c 	.word	0x2000007c
 801fad8:	200004ac 	.word	0x200004ac
 801fadc:	0801f965 	.word	0x0801f965

0801fae0 <GUI_PID_IsEmpty>:
 801fae0:	4b03      	ldr	r3, [pc, #12]	; (801faf0 <GUI_PID_IsEmpty+0x10>)
 801fae2:	cb09      	ldmia	r3, {r0, r3}
 801fae4:	1ac0      	subs	r0, r0, r3
 801fae6:	fab0 f080 	clz	r0, r0
 801faea:	0940      	lsrs	r0, r0, #5
 801faec:	4770      	bx	lr
 801faee:	bf00      	nop
 801faf0:	2000007c 	.word	0x2000007c

0801faf4 <_CreateBuffer.isra.4>:
 801faf4:	680b      	ldr	r3, [r1, #0]
 801faf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fafa:	4680      	mov	r8, r0
 801fafc:	8818      	ldrh	r0, [r3, #0]
 801fafe:	460e      	mov	r6, r1
 801fb00:	4615      	mov	r5, r2
 801fb02:	300d      	adds	r0, #13
 801fb04:	0080      	lsls	r0, r0, #2
 801fb06:	f7f1 ff1b 	bl	8011940 <GUI_ALLOC_AllocNoInit>
 801fb0a:	2800      	cmp	r0, #0
 801fb0c:	d03d      	beq.n	801fb8a <_CreateBuffer.isra.4+0x96>
 801fb0e:	4607      	mov	r7, r0
 801fb10:	f7f1 ff2e 	bl	8011970 <GUI_ALLOC_LockH>
 801fb14:	f8d8 3000 	ldr.w	r3, [r8]
 801fb18:	4604      	mov	r4, r0
 801fb1a:	6998      	ldr	r0, [r3, #24]
 801fb1c:	f7f2 ffca 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 801fb20:	2800      	cmp	r0, #0
 801fb22:	d032      	beq.n	801fb8a <_CreateBuffer.isra.4+0x96>
 801fb24:	68c3      	ldr	r3, [r0, #12]
 801fb26:	2108      	movs	r1, #8
 801fb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb2a:	4798      	blx	r3
 801fb2c:	2802      	cmp	r0, #2
 801fb2e:	dc22      	bgt.n	801fb76 <_CreateBuffer.isra.4+0x82>
 801fb30:	2301      	movs	r3, #1
 801fb32:	61a0      	str	r0, [r4, #24]
 801fb34:	6832      	ldr	r2, [r6, #0]
 801fb36:	6123      	str	r3, [r4, #16]
 801fb38:	8812      	ldrh	r2, [r2, #0]
 801fb3a:	fb02 f303 	mul.w	r3, r2, r3
 801fb3e:	61e2      	str	r2, [r4, #28]
 801fb40:	6163      	str	r3, [r4, #20]
 801fb42:	f7f1 ff43 	bl	80119cc <GUI_ALLOC_GetMaxSize>
 801fb46:	6963      	ldr	r3, [r4, #20]
 801fb48:	2200      	movs	r2, #0
 801fb4a:	60a7      	str	r7, [r4, #8]
 801fb4c:	4298      	cmp	r0, r3
 801fb4e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801fb52:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 801fb56:	bfb8      	it	lt
 801fb58:	6160      	strlt	r0, [r4, #20]
 801fb5a:	2d01      	cmp	r5, #1
 801fb5c:	6023      	str	r3, [r4, #0]
 801fb5e:	60e2      	str	r2, [r4, #12]
 801fb60:	d018      	beq.n	801fb94 <_CreateBuffer.isra.4+0xa0>
 801fb62:	69e1      	ldr	r1, [r4, #28]
 801fb64:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 801fb68:	4620      	mov	r0, r4
 801fb6a:	440a      	add	r2, r1
 801fb6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fb70:	6063      	str	r3, [r4, #4]
 801fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb76:	2804      	cmp	r0, #4
 801fb78:	dd0a      	ble.n	801fb90 <_CreateBuffer.isra.4+0x9c>
 801fb7a:	2808      	cmp	r0, #8
 801fb7c:	dd0e      	ble.n	801fb9c <_CreateBuffer.isra.4+0xa8>
 801fb7e:	2810      	cmp	r0, #16
 801fb80:	dd0e      	ble.n	801fba0 <_CreateBuffer.isra.4+0xac>
 801fb82:	2220      	movs	r2, #32
 801fb84:	2304      	movs	r3, #4
 801fb86:	61a2      	str	r2, [r4, #24]
 801fb88:	e7d4      	b.n	801fb34 <_CreateBuffer.isra.4+0x40>
 801fb8a:	2000      	movs	r0, #0
 801fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb90:	2004      	movs	r0, #4
 801fb92:	e7cd      	b.n	801fb30 <_CreateBuffer.isra.4+0x3c>
 801fb94:	6063      	str	r3, [r4, #4]
 801fb96:	4620      	mov	r0, r4
 801fb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb9c:	2008      	movs	r0, #8
 801fb9e:	e7c7      	b.n	801fb30 <_CreateBuffer.isra.4+0x3c>
 801fba0:	2210      	movs	r2, #16
 801fba2:	2302      	movs	r3, #2
 801fba4:	61a2      	str	r2, [r4, #24]
 801fba6:	e7c5      	b.n	801fb34 <_CreateBuffer.isra.4+0x40>

0801fba8 <_SetBkIndexBuffered>:
 801fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbac:	b087      	sub	sp, #28
 801fbae:	4617      	mov	r7, r2
 801fbb0:	460d      	mov	r5, r1
 801fbb2:	4606      	mov	r6, r0
 801fbb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fbb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801fbb8:	428a      	cmp	r2, r1
 801fbba:	d045      	beq.n	801fc48 <_SetBkIndexBuffered+0xa0>
 801fbbc:	68e1      	ldr	r1, [r4, #12]
 801fbbe:	b399      	cbz	r1, 801fc28 <_SetBkIndexBuffered+0x80>
 801fbc0:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801fbc4:	2a01      	cmp	r2, #1
 801fbc6:	d051      	beq.n	801fc6c <_SetBkIndexBuffered+0xc4>
 801fbc8:	69e0      	ldr	r0, [r4, #28]
 801fbca:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 801fbce:	6822      	ldr	r2, [r4, #0]
 801fbd0:	4486      	add	lr, r0
 801fbd2:	6860      	ldr	r0, [r4, #4]
 801fbd4:	f8d4 8020 	ldr.w	r8, [r4, #32]
 801fbd8:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 801fbdc:	f100 0a04 	add.w	sl, r0, #4
 801fbe0:	6062      	str	r2, [r4, #4]
 801fbe2:	f8d3 9000 	ldr.w	r9, [r3]
 801fbe6:	f1b9 0f00 	cmp.w	r9, #0
 801fbea:	d01e      	beq.n	801fc2a <_SetBkIndexBuffered+0x82>
 801fbec:	69a2      	ldr	r2, [r4, #24]
 801fbee:	4650      	mov	r0, sl
 801fbf0:	f7f6 feb6 	bl	8016960 <GUI__CompactPixelIndices>
 801fbf4:	f8d4 b014 	ldr.w	fp, [r4, #20]
 801fbf8:	2300      	movs	r3, #0
 801fbfa:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801fbfe:	69a2      	ldr	r2, [r4, #24]
 801fc00:	f04f 0c01 	mov.w	ip, #1
 801fc04:	f8cd a00c 	str.w	sl, [sp, #12]
 801fc08:	4641      	mov	r1, r8
 801fc0a:	9305      	str	r3, [sp, #20]
 801fc0c:	4648      	mov	r0, r9
 801fc0e:	9304      	str	r3, [sp, #16]
 801fc10:	68e3      	ldr	r3, [r4, #12]
 801fc12:	f8cd b008 	str.w	fp, [sp, #8]
 801fc16:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801fc1a:	9201      	str	r2, [sp, #4]
 801fc1c:	f8cd c000 	str.w	ip, [sp]
 801fc20:	4642      	mov	r2, r8
 801fc22:	f8de 8004 	ldr.w	r8, [lr, #4]
 801fc26:	47c0      	blx	r8
 801fc28:	6862      	ldr	r2, [r4, #4]
 801fc2a:	6017      	str	r7, [r2, #0]
 801fc2c:	2301      	movs	r3, #1
 801fc2e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801fc32:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801fc36:	6062      	str	r2, [r4, #4]
 801fc38:	62a6      	str	r6, [r4, #40]	; 0x28
 801fc3a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801fc3c:	60e3      	str	r3, [r4, #12]
 801fc3e:	6226      	str	r6, [r4, #32]
 801fc40:	6265      	str	r5, [r4, #36]	; 0x24
 801fc42:	b007      	add	sp, #28
 801fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc48:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801fc4c:	6a22      	ldr	r2, [r4, #32]
 801fc4e:	440a      	add	r2, r1
 801fc50:	4282      	cmp	r2, r0
 801fc52:	d1b3      	bne.n	801fbbc <_SetBkIndexBuffered+0x14>
 801fc54:	6862      	ldr	r2, [r4, #4]
 801fc56:	68e1      	ldr	r1, [r4, #12]
 801fc58:	6017      	str	r7, [r2, #0]
 801fc5a:	f994 0030 	ldrsb.w	r0, [r4, #48]	; 0x30
 801fc5e:	1c4b      	adds	r3, r1, #1
 801fc60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801fc64:	6062      	str	r2, [r4, #4]
 801fc66:	2900      	cmp	r1, #0
 801fc68:	d1e8      	bne.n	801fc3c <_SetBkIndexBuffered+0x94>
 801fc6a:	e7e5      	b.n	801fc38 <_SetBkIndexBuffered+0x90>
 801fc6c:	f8d4 a000 	ldr.w	sl, [r4]
 801fc70:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 801fc74:	4652      	mov	r2, sl
 801fc76:	e7b3      	b.n	801fbe0 <_SetBkIndexBuffered+0x38>

0801fc78 <_ReleaseBuffer.isra.7>:
 801fc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc7a:	b089      	sub	sp, #36	; 0x24
 801fc7c:	460c      	mov	r4, r1
 801fc7e:	9107      	str	r1, [sp, #28]
 801fc80:	68c9      	ldr	r1, [r1, #12]
 801fc82:	2900      	cmp	r1, #0
 801fc84:	d02c      	beq.n	801fce0 <_ReleaseBuffer.isra.7+0x68>
 801fc86:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 801fc8a:	2b01      	cmp	r3, #1
 801fc8c:	d031      	beq.n	801fcf2 <_ReleaseBuffer.isra.7+0x7a>
 801fc8e:	69e5      	ldr	r5, [r4, #28]
 801fc90:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 801fc94:	6823      	ldr	r3, [r4, #0]
 801fc96:	442a      	add	r2, r5
 801fc98:	6865      	ldr	r5, [r4, #4]
 801fc9a:	6a27      	ldr	r7, [r4, #32]
 801fc9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fca0:	3504      	adds	r5, #4
 801fca2:	6063      	str	r3, [r4, #4]
 801fca4:	6806      	ldr	r6, [r0, #0]
 801fca6:	2e00      	cmp	r6, #0
 801fca8:	d02a      	beq.n	801fd00 <_ReleaseBuffer.isra.7+0x88>
 801fcaa:	69a2      	ldr	r2, [r4, #24]
 801fcac:	4628      	mov	r0, r5
 801fcae:	f7f6 fe57 	bl	8016960 <GUI__CompactPixelIndices>
 801fcb2:	2000      	movs	r0, #0
 801fcb4:	68e3      	ldr	r3, [r4, #12]
 801fcb6:	4639      	mov	r1, r7
 801fcb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801fcba:	f04f 0e01 	mov.w	lr, #1
 801fcbe:	68f7      	ldr	r7, [r6, #12]
 801fcc0:	9005      	str	r0, [sp, #20]
 801fcc2:	9004      	str	r0, [sp, #16]
 801fcc4:	4630      	mov	r0, r6
 801fcc6:	9503      	str	r5, [sp, #12]
 801fcc8:	6965      	ldr	r5, [r4, #20]
 801fcca:	9502      	str	r5, [sp, #8]
 801fccc:	69a5      	ldr	r5, [r4, #24]
 801fcce:	f8cd e000 	str.w	lr, [sp]
 801fcd2:	9501      	str	r5, [sp, #4]
 801fcd4:	687d      	ldr	r5, [r7, #4]
 801fcd6:	47a8      	blx	r5
 801fcd8:	9b07      	ldr	r3, [sp, #28]
 801fcda:	2200      	movs	r2, #0
 801fcdc:	60e2      	str	r2, [r4, #12]
 801fcde:	461c      	mov	r4, r3
 801fce0:	68a4      	ldr	r4, [r4, #8]
 801fce2:	a807      	add	r0, sp, #28
 801fce4:	f7f1 fe58 	bl	8011998 <GUI_ALLOC_UnlockH>
 801fce8:	4620      	mov	r0, r4
 801fcea:	f7f1 ffd9 	bl	8011ca0 <GUI_ALLOC_Free>
 801fcee:	b009      	add	sp, #36	; 0x24
 801fcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcf2:	6825      	ldr	r5, [r4, #0]
 801fcf4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801fcf6:	462b      	mov	r3, r5
 801fcf8:	6063      	str	r3, [r4, #4]
 801fcfa:	6806      	ldr	r6, [r0, #0]
 801fcfc:	2e00      	cmp	r6, #0
 801fcfe:	d1d4      	bne.n	801fcaa <_ReleaseBuffer.isra.7+0x32>
 801fd00:	4623      	mov	r3, r4
 801fd02:	e7ea      	b.n	801fcda <_ReleaseBuffer.isra.7+0x62>

0801fd04 <GUI_SPRITE_SetPosition>:
 801fd04:	b900      	cbnz	r0, 801fd08 <GUI_SPRITE_SetPosition+0x4>
 801fd06:	4770      	bx	lr
 801fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd0c:	4604      	mov	r4, r0
 801fd0e:	b0ab      	sub	sp, #172	; 0xac
 801fd10:	460d      	mov	r5, r1
 801fd12:	4616      	mov	r6, r2
 801fd14:	921c      	str	r2, [sp, #112]	; 0x70
 801fd16:	911b      	str	r1, [sp, #108]	; 0x6c
 801fd18:	f7f6 faa4 	bl	8016264 <GUI_Lock>
 801fd1c:	4620      	mov	r0, r4
 801fd1e:	f7f1 fe27 	bl	8011970 <GUI_ALLOC_LockH>
 801fd22:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801fd26:	6804      	ldr	r4, [r0, #0]
 801fd28:	429d      	cmp	r5, r3
 801fd2a:	9027      	str	r0, [sp, #156]	; 0x9c
 801fd2c:	9411      	str	r4, [sp, #68]	; 0x44
 801fd2e:	f000 815a 	beq.w	801ffe6 <GUI_SPRITE_SetPosition+0x2e2>
 801fd32:	2000      	movs	r0, #0
 801fd34:	f7f9 ff50 	bl	8019bd8 <GUI_MEMDEV_Select>
 801fd38:	4bae      	ldr	r3, [pc, #696]	; (801fff4 <GUI_SPRITE_SetPosition+0x2f0>)
 801fd3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	6992      	ldr	r2, [r2, #24]
 801fd40:	7c59      	ldrb	r1, [r3, #17]
 801fd42:	901f      	str	r0, [sp, #124]	; 0x7c
 801fd44:	4608      	mov	r0, r1
 801fd46:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801fd48:	9219      	str	r2, [sp, #100]	; 0x64
 801fd4a:	4282      	cmp	r2, r0
 801fd4c:	9120      	str	r1, [sp, #128]	; 0x80
 801fd4e:	bf18      	it	ne
 801fd50:	745a      	strbne	r2, [r3, #17]
 801fd52:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801fd56:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801fd5a:	4619      	mov	r1, r3
 801fd5c:	9307      	str	r3, [sp, #28]
 801fd5e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801fd62:	4610      	mov	r0, r2
 801fd64:	9212      	str	r2, [sp, #72]	; 0x48
 801fd66:	1a5b      	subs	r3, r3, r1
 801fd68:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 801fd6c:	461c      	mov	r4, r3
 801fd6e:	1a12      	subs	r2, r2, r0
 801fd70:	9308      	str	r3, [sp, #32]
 801fd72:	4616      	mov	r6, r2
 801fd74:	9213      	str	r2, [sp, #76]	; 0x4c
 801fd76:	4622      	mov	r2, r4
 801fd78:	8a2b      	ldrh	r3, [r5, #16]
 801fd7a:	3201      	adds	r2, #1
 801fd7c:	079b      	lsls	r3, r3, #30
 801fd7e:	921a      	str	r2, [sp, #104]	; 0x68
 801fd80:	4632      	mov	r2, r6
 801fd82:	f102 0201 	add.w	r2, r2, #1
 801fd86:	921d      	str	r2, [sp, #116]	; 0x74
 801fd88:	f140 810e 	bpl.w	801ffa8 <GUI_SPRITE_SetPosition+0x2a4>
 801fd8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fd8e:	696a      	ldr	r2, [r5, #20]
 801fd90:	1a5b      	subs	r3, r3, r1
 801fd92:	9203      	str	r2, [sp, #12]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801fd98:	9314      	str	r3, [sp, #80]	; 0x50
 801fd9a:	eba2 0400 	sub.w	r4, r2, r0
 801fd9e:	f340 81a7 	ble.w	80200f0 <GUI_SPRITE_SetPosition+0x3ec>
 801fda2:	9309      	str	r3, [sp, #36]	; 0x24
 801fda4:	f04f 0b01 	mov.w	fp, #1
 801fda8:	2300      	movs	r3, #0
 801fdaa:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 801fdae:	9310      	str	r3, [sp, #64]	; 0x40
 801fdb0:	2c00      	cmp	r4, #0
 801fdb2:	f340 81a8 	ble.w	8020106 <GUI_SPRITE_SetPosition+0x402>
 801fdb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fdb8:	f04f 0a00 	mov.w	sl, #0
 801fdbc:	9417      	str	r4, [sp, #92]	; 0x5c
 801fdbe:	9316      	str	r3, [sp, #88]	; 0x58
 801fdc0:	2301      	movs	r3, #1
 801fdc2:	9315      	str	r3, [sp, #84]	; 0x54
 801fdc4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fdc6:	4b8c      	ldr	r3, [pc, #560]	; (801fff8 <GUI_SPRITE_SetPosition+0x2f4>)
 801fdc8:	69b0      	ldr	r0, [r6, #24]
 801fdca:	561b      	ldrsb	r3, [r3, r0]
 801fdcc:	2b01      	cmp	r3, #1
 801fdce:	f340 8189 	ble.w	80200e4 <GUI_SPRITE_SetPosition+0x3e0>
 801fdd2:	2300      	movs	r3, #0
 801fdd4:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 801fdd8:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801fddc:	f7f8 f83e 	bl	8017e5c <LCD_GetXSizeEx>
 801fde0:	1e43      	subs	r3, r0, #1
 801fde2:	69b0      	ldr	r0, [r6, #24]
 801fde4:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 801fde8:	f7f8 f848 	bl	8017e7c <LCD_GetYSizeEx>
 801fdec:	3801      	subs	r0, #1
 801fdee:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 801fdf2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fdf4:	465a      	mov	r2, fp
 801fdf6:	f100 0114 	add.w	r1, r0, #20
 801fdfa:	f7ff fe7b 	bl	801faf4 <_CreateBuffer.isra.4>
 801fdfe:	9021      	str	r0, [sp, #132]	; 0x84
 801fe00:	2800      	cmp	r0, #0
 801fe02:	f000 80d0 	beq.w	801ffa6 <GUI_SPRITE_SetPosition+0x2a2>
 801fe06:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fe08:	465a      	mov	r2, fp
 801fe0a:	f100 0114 	add.w	r1, r0, #20
 801fe0e:	f7ff fe71 	bl	801faf4 <_CreateBuffer.isra.4>
 801fe12:	9023      	str	r0, [sp, #140]	; 0x8c
 801fe14:	2800      	cmp	r0, #0
 801fe16:	f000 80c1 	beq.w	801ff9c <GUI_SPRITE_SetPosition+0x298>
 801fe1a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fe1c:	68d8      	ldr	r0, [r3, #12]
 801fe1e:	2800      	cmp	r0, #0
 801fe20:	f040 8181 	bne.w	8020126 <GUI_SPRITE_SetPosition+0x422>
 801fe24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fe26:	4552      	cmp	r2, sl
 801fe28:	f000 80b4 	beq.w	801ff94 <GUI_SPRITE_SetPosition+0x290>
 801fe2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fe2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801fe30:	009a      	lsls	r2, r3, #2
 801fe32:	f8cd 9010 	str.w	r9, [sp, #16]
 801fe36:	fb0a 1303 	mla	r3, sl, r3, r1
 801fe3a:	ebc4 010a 	rsb	r1, r4, sl
 801fe3e:	46d9      	mov	r9, fp
 801fe40:	9022      	str	r0, [sp, #136]	; 0x88
 801fe42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801fe46:	910d      	str	r1, [sp, #52]	; 0x34
 801fe48:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fe4a:	930e      	str	r3, [sp, #56]	; 0x38
 801fe4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fe4e:	fb01 f202 	mul.w	r2, r1, r2
 801fe52:	4423      	add	r3, r4
 801fe54:	921e      	str	r2, [sp, #120]	; 0x78
 801fe56:	9318      	str	r3, [sp, #96]	; 0x60
 801fe58:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801fe5c:	46d3      	mov	fp, sl
 801fe5e:	9305      	str	r3, [sp, #20]
 801fe60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe64:	455b      	cmp	r3, fp
 801fe66:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fe68:	bfcc      	ite	gt
 801fe6a:	2300      	movgt	r3, #0
 801fe6c:	2301      	movle	r3, #1
 801fe6e:	455a      	cmp	r2, fp
 801fe70:	bfb8      	it	lt
 801fe72:	2300      	movlt	r3, #0
 801fe74:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fe78:	445b      	add	r3, fp
 801fe7a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fe7e:	445b      	add	r3, fp
 801fe80:	930a      	str	r3, [sp, #40]	; 0x28
 801fe82:	9b04      	ldr	r3, [sp, #16]
 801fe84:	461a      	mov	r2, r3
 801fe86:	42a2      	cmp	r2, r4
 801fe88:	d075      	beq.n	801ff76 <GUI_SPRITE_SetPosition+0x272>
 801fe8a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fe8c:	9b07      	ldr	r3, [sp, #28]
 801fe8e:	ebc0 0a04 	rsb	sl, r0, r4
 801fe92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801fe94:	4403      	add	r3, r0
 801fe96:	930c      	str	r3, [sp, #48]	; 0x30
 801fe98:	465a      	mov	r2, fp
 801fe9a:	4621      	mov	r1, r4
 801fe9c:	9803      	ldr	r0, [sp, #12]
 801fe9e:	f7f2 fa9b 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 801fea2:	0e03      	lsrs	r3, r0, #24
 801fea4:	4606      	mov	r6, r0
 801fea6:	d05f      	beq.n	801ff68 <GUI_SPRITE_SetPosition+0x264>
 801fea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feaa:	9a08      	ldr	r2, [sp, #32]
 801feac:	42a3      	cmp	r3, r4
 801feae:	9907      	ldr	r1, [sp, #28]
 801feb0:	bfcc      	ite	gt
 801feb2:	2300      	movgt	r3, #0
 801feb4:	2301      	movle	r3, #1
 801feb6:	42a2      	cmp	r2, r4
 801feb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801feba:	4421      	add	r1, r4
 801febc:	eb02 0704 	add.w	r7, r2, r4
 801fec0:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801fec4:	bfb8      	it	lt
 801fec6:	2300      	movlt	r3, #0
 801fec8:	9106      	str	r1, [sp, #24]
 801feca:	42ba      	cmp	r2, r7
 801fecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fece:	ea03 0301 	and.w	r3, r3, r1
 801fed2:	dc0d      	bgt.n	801fef0 <GUI_SPRITE_SetPosition+0x1ec>
 801fed4:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801fed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801feda:	4282      	cmp	r2, r0
 801fedc:	dc08      	bgt.n	801fef0 <GUI_SPRITE_SetPosition+0x1ec>
 801fede:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801fee2:	42ba      	cmp	r2, r7
 801fee4:	db04      	blt.n	801fef0 <GUI_SPRITE_SetPosition+0x1ec>
 801fee6:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801feea:	4282      	cmp	r2, r0
 801feec:	f280 80a9 	bge.w	8020042 <GUI_SPRITE_SetPosition+0x33e>
 801fef0:	f04f 0800 	mov.w	r8, #0
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	f000 8085 	beq.w	8020004 <GUI_SPRITE_SetPosition+0x300>
 801fefa:	f1ba 0f00 	cmp.w	sl, #0
 801fefe:	db09      	blt.n	801ff14 <GUI_SPRITE_SetPosition+0x210>
 801ff00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff02:	2b00      	cmp	r3, #0
 801ff04:	db06      	blt.n	801ff14 <GUI_SPRITE_SetPosition+0x210>
 801ff06:	461a      	mov	r2, r3
 801ff08:	4651      	mov	r1, sl
 801ff0a:	9803      	ldr	r0, [sp, #12]
 801ff0c:	f7f2 fa64 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 801ff10:	0e03      	lsrs	r3, r0, #24
 801ff12:	d077      	beq.n	8020004 <GUI_SPRITE_SetPosition+0x300>
 801ff14:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801ff18:	429f      	cmp	r7, r3
 801ff1a:	db23      	blt.n	801ff64 <GUI_SPRITE_SetPosition+0x260>
 801ff1c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801ff20:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ff22:	4283      	cmp	r3, r0
 801ff24:	dc1e      	bgt.n	801ff64 <GUI_SPRITE_SetPosition+0x260>
 801ff26:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801ff2a:	42bb      	cmp	r3, r7
 801ff2c:	db1a      	blt.n	801ff64 <GUI_SPRITE_SetPosition+0x260>
 801ff2e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801ff32:	4283      	cmp	r3, r0
 801ff34:	db16      	blt.n	801ff64 <GUI_SPRITE_SetPosition+0x260>
 801ff36:	4630      	mov	r0, r6
 801ff38:	4b30      	ldr	r3, [pc, #192]	; (801fffc <GUI_SPRITE_SetPosition+0x2f8>)
 801ff3a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801ff3c:	22ff      	movs	r2, #255	; 0xff
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 801ff44:	4798      	blx	r3
 801ff46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ff48:	4b2d      	ldr	r3, [pc, #180]	; (8020000 <GUI_SPRITE_SetPosition+0x2fc>)
 801ff4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ff4e:	691b      	ldr	r3, [r3, #16]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	4798      	blx	r3
 801ff54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ff56:	4602      	mov	r2, r0
 801ff58:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ff5a:	9300      	str	r3, [sp, #0]
 801ff5c:	4638      	mov	r0, r7
 801ff5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff60:	f7ff fe22 	bl	801fba8 <_SetBkIndexBuffered>
 801ff64:	f8c5 8020 	str.w	r8, [r5, #32]
 801ff68:	9b05      	ldr	r3, [sp, #20]
 801ff6a:	444c      	add	r4, r9
 801ff6c:	44ca      	add	sl, r9
 801ff6e:	441d      	add	r5, r3
 801ff70:	9b04      	ldr	r3, [sp, #16]
 801ff72:	42a3      	cmp	r3, r4
 801ff74:	d190      	bne.n	801fe98 <GUI_SPRITE_SetPosition+0x194>
 801ff76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff78:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ff7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ff7c:	440b      	add	r3, r1
 801ff7e:	4493      	add	fp, r2
 801ff80:	930e      	str	r3, [sp, #56]	; 0x38
 801ff82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff84:	4619      	mov	r1, r3
 801ff86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff88:	4411      	add	r1, r2
 801ff8a:	455b      	cmp	r3, fp
 801ff8c:	910d      	str	r1, [sp, #52]	; 0x34
 801ff8e:	f47f af67 	bne.w	801fe60 <GUI_SPRITE_SetPosition+0x15c>
 801ff92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ff94:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801ff96:	6818      	ldr	r0, [r3, #0]
 801ff98:	f7ff fe6e 	bl	801fc78 <_ReleaseBuffer.isra.7>
 801ff9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ff9e:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ffa0:	6818      	ldr	r0, [r3, #0]
 801ffa2:	f7ff fe69 	bl	801fc78 <_ReleaseBuffer.isra.7>
 801ffa6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801ffa8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ffaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ffac:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ffae:	440b      	add	r3, r1
 801ffb0:	80a9      	strh	r1, [r5, #4]
 801ffb2:	1e42      	subs	r2, r0, #1
 801ffb4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801ffb6:	3b01      	subs	r3, #1
 801ffb8:	80e8      	strh	r0, [r5, #6]
 801ffba:	440a      	add	r2, r1
 801ffbc:	812b      	strh	r3, [r5, #8]
 801ffbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ffc0:	816a      	strh	r2, [r5, #10]
 801ffc2:	4619      	mov	r1, r3
 801ffc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ffc6:	4291      	cmp	r1, r2
 801ffc8:	d002      	beq.n	801ffd0 <GUI_SPRITE_SetPosition+0x2cc>
 801ffca:	4b0a      	ldr	r3, [pc, #40]	; (801fff4 <GUI_SPRITE_SetPosition+0x2f0>)
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	745a      	strb	r2, [r3, #17]
 801ffd0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ffd2:	f7f9 fe01 	bl	8019bd8 <GUI_MEMDEV_Select>
 801ffd6:	a827      	add	r0, sp, #156	; 0x9c
 801ffd8:	f7f1 fcde 	bl	8011998 <GUI_ALLOC_UnlockH>
 801ffdc:	f7f6 f938 	bl	8016250 <GUI_Unlock>
 801ffe0:	b02b      	add	sp, #172	; 0xac
 801ffe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffe6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801ffea:	429e      	cmp	r6, r3
 801ffec:	f47f aea1 	bne.w	801fd32 <GUI_SPRITE_SetPosition+0x2e>
 801fff0:	e7f1      	b.n	801ffd6 <GUI_SPRITE_SetPosition+0x2d2>
 801fff2:	bf00      	nop
 801fff4:	20000018 	.word	0x20000018
 801fff8:	2002af80 	.word	0x2002af80
 801fffc:	20000044 	.word	0x20000044
 8020000:	2002afd0 	.word	0x2002afd0
 8020004:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8020008:	9a06      	ldr	r2, [sp, #24]
 802000a:	4293      	cmp	r3, r2
 802000c:	dc84      	bgt.n	801ff18 <GUI_SPRITE_SetPosition+0x214>
 802000e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8020012:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020014:	4282      	cmp	r2, r0
 8020016:	f73f af7f 	bgt.w	801ff18 <GUI_SPRITE_SetPosition+0x214>
 802001a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 802001e:	9906      	ldr	r1, [sp, #24]
 8020020:	428a      	cmp	r2, r1
 8020022:	f6ff af79 	blt.w	801ff18 <GUI_SPRITE_SetPosition+0x214>
 8020026:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 802002a:	4601      	mov	r1, r0
 802002c:	4282      	cmp	r2, r0
 802002e:	f6ff af73 	blt.w	801ff18 <GUI_SPRITE_SetPosition+0x214>
 8020032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020034:	6a2a      	ldr	r2, [r5, #32]
 8020036:	9806      	ldr	r0, [sp, #24]
 8020038:	9300      	str	r3, [sp, #0]
 802003a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802003c:	f7ff fdb4 	bl	801fba8 <_SetBkIndexBuffered>
 8020040:	e768      	b.n	801ff14 <GUI_SPRITE_SetPosition+0x210>
 8020042:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
 8020046:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 802004a:	42ba      	cmp	r2, r7
 802004c:	dc2f      	bgt.n	80200ae <GUI_SPRITE_SetPosition+0x3aa>
 802004e:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 8020052:	42b9      	cmp	r1, r7
 8020054:	db2b      	blt.n	80200ae <GUI_SPRITE_SetPosition+0x3aa>
 8020056:	f9b8 e006 	ldrsh.w	lr, [r8, #6]
 802005a:	4601      	mov	r1, r0
 802005c:	4586      	cmp	lr, r0
 802005e:	dc26      	bgt.n	80200ae <GUI_SPRITE_SetPosition+0x3aa>
 8020060:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
 8020064:	4288      	cmp	r0, r1
 8020066:	db22      	blt.n	80200ae <GUI_SPRITE_SetPosition+0x3aa>
 8020068:	f8d8 0014 	ldr.w	r0, [r8, #20]
 802006c:	b1f8      	cbz	r0, 80200ae <GUI_SPRITE_SetPosition+0x3aa>
 802006e:	9325      	str	r3, [sp, #148]	; 0x94
 8020070:	1abb      	subs	r3, r7, r2
 8020072:	4619      	mov	r1, r3
 8020074:	9322      	str	r3, [sp, #136]	; 0x88
 8020076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020078:	ebce 0303 	rsb	r3, lr, r3
 802007c:	461a      	mov	r2, r3
 802007e:	9324      	str	r3, [sp, #144]	; 0x90
 8020080:	f7f2 f9aa 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 8020084:	0e03      	lsrs	r3, r0, #24
 8020086:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020088:	d011      	beq.n	80200ae <GUI_SPRITE_SetPosition+0x3aa>
 802008a:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 802008e:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
 8020092:	1a52      	subs	r2, r2, r1
 8020094:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020096:	fb02 1201 	mla	r2, r2, r1, r1
 802009a:	9922      	ldr	r1, [sp, #136]	; 0x88
 802009c:	440a      	add	r2, r1
 802009e:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 80200a2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80200a6:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 80200aa:	4690      	mov	r8, r2
 80200ac:	e00f      	b.n	80200ce <GUI_SPRITE_SetPosition+0x3ca>
 80200ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200b0:	6810      	ldr	r0, [r2, #0]
 80200b2:	2800      	cmp	r0, #0
 80200b4:	d033      	beq.n	802011e <GUI_SPRITE_SetPosition+0x41a>
 80200b6:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80200ba:	4639      	mov	r1, r7
 80200bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80200be:	f8de 8014 	ldr.w	r8, [lr, #20]
 80200c2:	9322      	str	r3, [sp, #136]	; 0x88
 80200c4:	47c0      	blx	r8
 80200c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80200c8:	4680      	mov	r8, r0
 80200ca:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80200ce:	9324      	str	r3, [sp, #144]	; 0x90
 80200d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80200d2:	4b9a      	ldr	r3, [pc, #616]	; (802033c <GUI_SPRITE_SetPosition+0x638>)
 80200d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200d8:	6912      	ldr	r2, [r2, #16]
 80200da:	6852      	ldr	r2, [r2, #4]
 80200dc:	4790      	blx	r2
 80200de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80200e0:	9022      	str	r0, [sp, #136]	; 0x88
 80200e2:	e707      	b.n	801fef4 <GUI_SPRITE_SetPosition+0x1f0>
 80200e4:	68f3      	ldr	r3, [r6, #12]
 80200e6:	4630      	mov	r0, r6
 80200e8:	a928      	add	r1, sp, #160	; 0xa0
 80200ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80200ec:	4798      	blx	r3
 80200ee:	e680      	b.n	801fdf2 <GUI_SPRITE_SetPosition+0xee>
 80200f0:	2200      	movs	r2, #0
 80200f2:	9b08      	ldr	r3, [sp, #32]
 80200f4:	f04f 39ff 	mov.w	r9, #4294967295
 80200f8:	9209      	str	r2, [sp, #36]	; 0x24
 80200fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80200fc:	46cb      	mov	fp, r9
 80200fe:	9310      	str	r3, [sp, #64]	; 0x40
 8020100:	4413      	add	r3, r2
 8020102:	9308      	str	r3, [sp, #32]
 8020104:	e654      	b.n	801fdb0 <GUI_SPRITE_SetPosition+0xac>
 8020106:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020108:	2200      	movs	r2, #0
 802010a:	f04f 33ff 	mov.w	r3, #4294967295
 802010e:	9217      	str	r2, [sp, #92]	; 0x5c
 8020110:	460a      	mov	r2, r1
 8020112:	9316      	str	r3, [sp, #88]	; 0x58
 8020114:	468a      	mov	sl, r1
 8020116:	4422      	add	r2, r4
 8020118:	9315      	str	r3, [sp, #84]	; 0x54
 802011a:	9213      	str	r2, [sp, #76]	; 0x4c
 802011c:	e652      	b.n	801fdc4 <GUI_SPRITE_SetPosition+0xc0>
 802011e:	4680      	mov	r8, r0
 8020120:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020124:	e7d3      	b.n	80200ce <GUI_SPRITE_SetPosition+0x3ca>
 8020126:	f7f1 fc23 	bl	8011970 <GUI_ALLOC_LockH>
 802012a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802012c:	9026      	str	r0, [sp, #152]	; 0x98
 802012e:	4553      	cmp	r3, sl
 8020130:	f000 8099 	beq.w	8020266 <GUI_SPRITE_SetPosition+0x562>
 8020134:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020136:	9910      	ldr	r1, [sp, #64]	; 0x40
 8020138:	009a      	lsls	r2, r3, #2
 802013a:	f8cd 9010 	str.w	r9, [sp, #16]
 802013e:	fb0a 1303 	mla	r3, sl, r3, r1
 8020142:	ebc4 010a 	rsb	r1, r4, sl
 8020146:	46d9      	mov	r9, fp
 8020148:	910d      	str	r1, [sp, #52]	; 0x34
 802014a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802014e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020150:	930f      	str	r3, [sp, #60]	; 0x3c
 8020152:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8020156:	4421      	add	r1, r4
 8020158:	46d3      	mov	fp, sl
 802015a:	9305      	str	r3, [sp, #20]
 802015c:	9118      	str	r1, [sp, #96]	; 0x60
 802015e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020160:	9b07      	ldr	r3, [sp, #28]
 8020162:	fb01 f202 	mul.w	r2, r1, r2
 8020166:	9222      	str	r2, [sp, #136]	; 0x88
 8020168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802016a:	4413      	add	r3, r2
 802016c:	930c      	str	r3, [sp, #48]	; 0x30
 802016e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020172:	455b      	cmp	r3, fp
 8020174:	bfcc      	ite	gt
 8020176:	2300      	movgt	r3, #0
 8020178:	2301      	movle	r3, #1
 802017a:	455a      	cmp	r2, fp
 802017c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802017e:	bfb8      	it	lt
 8020180:	2300      	movlt	r3, #0
 8020182:	930b      	str	r3, [sp, #44]	; 0x2c
 8020184:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020186:	445b      	add	r3, fp
 8020188:	931e      	str	r3, [sp, #120]	; 0x78
 802018a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802018c:	445b      	add	r3, fp
 802018e:	930a      	str	r3, [sp, #40]	; 0x28
 8020190:	9b04      	ldr	r3, [sp, #16]
 8020192:	4293      	cmp	r3, r2
 8020194:	d05a      	beq.n	802024c <GUI_SPRITE_SetPosition+0x548>
 8020196:	4614      	mov	r4, r2
 8020198:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802019a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802019c:	ebc2 0a04 	rsb	sl, r2, r4
 80201a0:	465a      	mov	r2, fp
 80201a2:	4621      	mov	r1, r4
 80201a4:	9803      	ldr	r0, [sp, #12]
 80201a6:	f7f2 f917 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 80201aa:	4606      	mov	r6, r0
 80201ac:	2800      	cmp	r0, #0
 80201ae:	d046      	beq.n	802023e <GUI_SPRITE_SetPosition+0x53a>
 80201b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201b2:	9a08      	ldr	r2, [sp, #32]
 80201b4:	42a3      	cmp	r3, r4
 80201b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80201b8:	bfcc      	ite	gt
 80201ba:	2300      	movgt	r3, #0
 80201bc:	2301      	movle	r3, #1
 80201be:	42a2      	cmp	r2, r4
 80201c0:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 80201c4:	bfb8      	it	lt
 80201c6:	2300      	movlt	r3, #0
 80201c8:	461f      	mov	r7, r3
 80201ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201cc:	eb03 0804 	add.w	r8, r3, r4
 80201d0:	9b07      	ldr	r3, [sp, #28]
 80201d2:	400f      	ands	r7, r1
 80201d4:	4542      	cmp	r2, r8
 80201d6:	4423      	add	r3, r4
 80201d8:	dc0c      	bgt.n	80201f4 <GUI_SPRITE_SetPosition+0x4f0>
 80201da:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 80201de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80201e0:	4282      	cmp	r2, r0
 80201e2:	dc07      	bgt.n	80201f4 <GUI_SPRITE_SetPosition+0x4f0>
 80201e4:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80201e8:	4542      	cmp	r2, r8
 80201ea:	db03      	blt.n	80201f4 <GUI_SPRITE_SetPosition+0x4f0>
 80201ec:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 80201f0:	4282      	cmp	r2, r0
 80201f2:	da57      	bge.n	80202a4 <GUI_SPRITE_SetPosition+0x5a0>
 80201f4:	2200      	movs	r2, #0
 80201f6:	9206      	str	r2, [sp, #24]
 80201f8:	2f00      	cmp	r7, #0
 80201fa:	d039      	beq.n	8020270 <GUI_SPRITE_SetPosition+0x56c>
 80201fc:	f1ba 0f00 	cmp.w	sl, #0
 8020200:	930e      	str	r3, [sp, #56]	; 0x38
 8020202:	db09      	blt.n	8020218 <GUI_SPRITE_SetPosition+0x514>
 8020204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020206:	2b00      	cmp	r3, #0
 8020208:	db06      	blt.n	8020218 <GUI_SPRITE_SetPosition+0x514>
 802020a:	461a      	mov	r2, r3
 802020c:	4651      	mov	r1, sl
 802020e:	9803      	ldr	r0, [sp, #12]
 8020210:	f7f2 f8e2 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 8020214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020216:	b358      	cbz	r0, 8020270 <GUI_SPRITE_SetPosition+0x56c>
 8020218:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 802021c:	4590      	cmp	r8, r2
 802021e:	db0c      	blt.n	802023a <GUI_SPRITE_SetPosition+0x536>
 8020220:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8020224:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020226:	428b      	cmp	r3, r1
 8020228:	dc07      	bgt.n	802023a <GUI_SPRITE_SetPosition+0x536>
 802022a:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 802022e:	4543      	cmp	r3, r8
 8020230:	db03      	blt.n	802023a <GUI_SPRITE_SetPosition+0x536>
 8020232:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8020236:	428b      	cmp	r3, r1
 8020238:	da57      	bge.n	80202ea <GUI_SPRITE_SetPosition+0x5e6>
 802023a:	9b06      	ldr	r3, [sp, #24]
 802023c:	622b      	str	r3, [r5, #32]
 802023e:	9b05      	ldr	r3, [sp, #20]
 8020240:	444c      	add	r4, r9
 8020242:	44ca      	add	sl, r9
 8020244:	441d      	add	r5, r3
 8020246:	9b04      	ldr	r3, [sp, #16]
 8020248:	429c      	cmp	r4, r3
 802024a:	d1a9      	bne.n	80201a0 <GUI_SPRITE_SetPosition+0x49c>
 802024c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802024e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020250:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8020252:	440b      	add	r3, r1
 8020254:	4493      	add	fp, r2
 8020256:	930f      	str	r3, [sp, #60]	; 0x3c
 8020258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802025a:	4619      	mov	r1, r3
 802025c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802025e:	4411      	add	r1, r2
 8020260:	459b      	cmp	fp, r3
 8020262:	910d      	str	r1, [sp, #52]	; 0x34
 8020264:	d183      	bne.n	802016e <GUI_SPRITE_SetPosition+0x46a>
 8020266:	a826      	add	r0, sp, #152	; 0x98
 8020268:	f7f1 fb96 	bl	8011998 <GUI_ALLOC_UnlockH>
 802026c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802026e:	e691      	b.n	801ff94 <GUI_SPRITE_SetPosition+0x290>
 8020270:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8020274:	429a      	cmp	r2, r3
 8020276:	dcd1      	bgt.n	802021c <GUI_SPRITE_SetPosition+0x518>
 8020278:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 802027c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 802027e:	42b9      	cmp	r1, r7
 8020280:	dccc      	bgt.n	802021c <GUI_SPRITE_SetPosition+0x518>
 8020282:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 8020286:	4299      	cmp	r1, r3
 8020288:	dbc8      	blt.n	802021c <GUI_SPRITE_SetPosition+0x518>
 802028a:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
 802028e:	42b9      	cmp	r1, r7
 8020290:	dbc4      	blt.n	802021c <GUI_SPRITE_SetPosition+0x518>
 8020292:	4618      	mov	r0, r3
 8020294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020296:	6a2a      	ldr	r2, [r5, #32]
 8020298:	4639      	mov	r1, r7
 802029a:	9300      	str	r3, [sp, #0]
 802029c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802029e:	f7ff fc83 	bl	801fba8 <_SetBkIndexBuffered>
 80202a2:	e7b9      	b.n	8020218 <GUI_SPRITE_SetPosition+0x514>
 80202a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80202a6:	9206      	str	r2, [sp, #24]
 80202a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80202ac:	4542      	cmp	r2, r8
 80202ae:	dc0d      	bgt.n	80202cc <GUI_SPRITE_SetPosition+0x5c8>
 80202b0:	9806      	ldr	r0, [sp, #24]
 80202b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80202b6:	4541      	cmp	r1, r8
 80202b8:	db08      	blt.n	80202cc <GUI_SPRITE_SetPosition+0x5c8>
 80202ba:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80202be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80202c0:	458e      	cmp	lr, r1
 80202c2:	dc03      	bgt.n	80202cc <GUI_SPRITE_SetPosition+0x5c8>
 80202c4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80202c8:	4288      	cmp	r0, r1
 80202ca:	da18      	bge.n	80202fe <GUI_SPRITE_SetPosition+0x5fa>
 80202cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202ce:	6810      	ldr	r0, [r2, #0]
 80202d0:	2800      	cmp	r0, #0
 80202d2:	d08f      	beq.n	80201f4 <GUI_SPRITE_SetPosition+0x4f0>
 80202d4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80202d8:	4641      	mov	r1, r8
 80202da:	930e      	str	r3, [sp, #56]	; 0x38
 80202dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80202de:	f8de 3014 	ldr.w	r3, [lr, #20]
 80202e2:	4798      	blx	r3
 80202e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80202e6:	9006      	str	r0, [sp, #24]
 80202e8:	e786      	b.n	80201f8 <GUI_SPRITE_SetPosition+0x4f4>
 80202ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80202ec:	4640      	mov	r0, r8
 80202ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80202f0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80202f4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80202f6:	9600      	str	r6, [sp, #0]
 80202f8:	f7ff fc56 	bl	801fba8 <_SetBkIndexBuffered>
 80202fc:	e79d      	b.n	802023a <GUI_SPRITE_SetPosition+0x536>
 80202fe:	9325      	str	r3, [sp, #148]	; 0x94
 8020300:	ebc2 0308 	rsb	r3, r2, r8
 8020304:	ebce 0201 	rsb	r2, lr, r1
 8020308:	9906      	ldr	r1, [sp, #24]
 802030a:	930e      	str	r3, [sp, #56]	; 0x38
 802030c:	6948      	ldr	r0, [r1, #20]
 802030e:	4619      	mov	r1, r3
 8020310:	9224      	str	r2, [sp, #144]	; 0x90
 8020312:	f7f2 f861 	bl	80123d8 <GUI_GetBitmapPixelIndex>
 8020316:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020318:	2800      	cmp	r0, #0
 802031a:	d0d7      	beq.n	80202cc <GUI_SPRITE_SetPosition+0x5c8>
 802031c:	9806      	ldr	r0, [sp, #24]
 802031e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8020322:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8020326:	1a52      	subs	r2, r2, r1
 8020328:	9924      	ldr	r1, [sp, #144]	; 0x90
 802032a:	fb02 1201 	mla	r2, r2, r1, r1
 802032e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020330:	440a      	add	r2, r1
 8020332:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8020336:	6a12      	ldr	r2, [r2, #32]
 8020338:	9206      	str	r2, [sp, #24]
 802033a:	e75d      	b.n	80201f8 <GUI_SPRITE_SetPosition+0x4f4>
 802033c:	2002afd0 	.word	0x2002afd0

08020340 <GUI_TIMER__GetFirstTimer>:
 8020340:	4a0a      	ldr	r2, [pc, #40]	; (802036c <GUI_TIMER__GetFirstTimer+0x2c>)
 8020342:	2300      	movs	r3, #0
 8020344:	b530      	push	{r4, r5, lr}
 8020346:	6814      	ldr	r4, [r2, #0]
 8020348:	b083      	sub	sp, #12
 802034a:	6003      	str	r3, [r0, #0]
 802034c:	b15c      	cbz	r4, 8020366 <GUI_TIMER__GetFirstTimer+0x26>
 802034e:	4605      	mov	r5, r0
 8020350:	4620      	mov	r0, r4
 8020352:	f7f1 fb0d 	bl	8011970 <GUI_ALLOC_LockH>
 8020356:	ab02      	add	r3, sp, #8
 8020358:	6902      	ldr	r2, [r0, #16]
 802035a:	f843 0d04 	str.w	r0, [r3, #-4]!
 802035e:	4618      	mov	r0, r3
 8020360:	602a      	str	r2, [r5, #0]
 8020362:	f7f1 fb19 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020366:	4620      	mov	r0, r4
 8020368:	b003      	add	sp, #12
 802036a:	bd30      	pop	{r4, r5, pc}
 802036c:	200004c8 	.word	0x200004c8

08020370 <GUI_TIMER__GetNextTimerLin>:
 8020370:	2300      	movs	r3, #0
 8020372:	b570      	push	{r4, r5, r6, lr}
 8020374:	600b      	str	r3, [r1, #0]
 8020376:	b082      	sub	sp, #8
 8020378:	b918      	cbnz	r0, 8020382 <GUI_TIMER__GetNextTimerLin+0x12>
 802037a:	4604      	mov	r4, r0
 802037c:	4620      	mov	r0, r4
 802037e:	b002      	add	sp, #8
 8020380:	bd70      	pop	{r4, r5, r6, pc}
 8020382:	460d      	mov	r5, r1
 8020384:	f7f1 faf4 	bl	8011970 <GUI_ALLOC_LockH>
 8020388:	6884      	ldr	r4, [r0, #8]
 802038a:	ae01      	add	r6, sp, #4
 802038c:	9001      	str	r0, [sp, #4]
 802038e:	b92c      	cbnz	r4, 802039c <GUI_TIMER__GetNextTimerLin+0x2c>
 8020390:	4630      	mov	r0, r6
 8020392:	f7f1 fb01 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020396:	4620      	mov	r0, r4
 8020398:	b002      	add	sp, #8
 802039a:	bd70      	pop	{r4, r5, r6, pc}
 802039c:	4630      	mov	r0, r6
 802039e:	f7f1 fafb 	bl	8011998 <GUI_ALLOC_UnlockH>
 80203a2:	4620      	mov	r0, r4
 80203a4:	f7f1 fae4 	bl	8011970 <GUI_ALLOC_LockH>
 80203a8:	6903      	ldr	r3, [r0, #16]
 80203aa:	9001      	str	r0, [sp, #4]
 80203ac:	602b      	str	r3, [r5, #0]
 80203ae:	e7ef      	b.n	8020390 <GUI_TIMER__GetNextTimerLin+0x20>

080203b0 <GUI_TIMER_Delete>:
 80203b0:	b900      	cbnz	r0, 80203b4 <GUI_TIMER_Delete+0x4>
 80203b2:	4770      	bx	lr
 80203b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8020480 <GUI_TIMER_Delete+0xd0>
 80203bc:	b082      	sub	sp, #8
 80203be:	4605      	mov	r5, r0
 80203c0:	f7f5 ff50 	bl	8016264 <GUI_Lock>
 80203c4:	f8d8 4000 	ldr.w	r4, [r8]
 80203c8:	42a5      	cmp	r5, r4
 80203ca:	d044      	beq.n	8020456 <GUI_TIMER_Delete+0xa6>
 80203cc:	466e      	mov	r6, sp
 80203ce:	b91c      	cbnz	r4, 80203d8 <GUI_TIMER_Delete+0x28>
 80203d0:	e019      	b.n	8020406 <GUI_TIMER_Delete+0x56>
 80203d2:	f7f1 fae1 	bl	8011998 <GUI_ALLOC_UnlockH>
 80203d6:	b1b4      	cbz	r4, 8020406 <GUI_TIMER_Delete+0x56>
 80203d8:	4620      	mov	r0, r4
 80203da:	f7f1 fac9 	bl	8011970 <GUI_ALLOC_LockH>
 80203de:	4603      	mov	r3, r0
 80203e0:	4630      	mov	r0, r6
 80203e2:	689c      	ldr	r4, [r3, #8]
 80203e4:	9300      	str	r3, [sp, #0]
 80203e6:	42a5      	cmp	r5, r4
 80203e8:	d1f3      	bne.n	80203d2 <GUI_TIMER_Delete+0x22>
 80203ea:	4628      	mov	r0, r5
 80203ec:	f7f1 fac0 	bl	8011970 <GUI_ALLOC_LockH>
 80203f0:	4603      	mov	r3, r0
 80203f2:	9a00      	ldr	r2, [sp, #0]
 80203f4:	a801      	add	r0, sp, #4
 80203f6:	6899      	ldr	r1, [r3, #8]
 80203f8:	9301      	str	r3, [sp, #4]
 80203fa:	6091      	str	r1, [r2, #8]
 80203fc:	f7f1 facc 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020400:	4630      	mov	r0, r6
 8020402:	f7f1 fac9 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020406:	4628      	mov	r0, r5
 8020408:	f7f1 fab2 	bl	8011970 <GUI_ALLOC_LockH>
 802040c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8020410:	9000      	str	r0, [sp, #0]
 8020412:	42a5      	cmp	r5, r4
 8020414:	4b1a      	ldr	r3, [pc, #104]	; (8020480 <GUI_TIMER_Delete+0xd0>)
 8020416:	d02c      	beq.n	8020472 <GUI_TIMER_Delete+0xc2>
 8020418:	b194      	cbz	r4, 8020440 <GUI_TIMER_Delete+0x90>
 802041a:	af01      	add	r7, sp, #4
 802041c:	e002      	b.n	8020424 <GUI_TIMER_Delete+0x74>
 802041e:	f7f1 fabb 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020422:	b16c      	cbz	r4, 8020440 <GUI_TIMER_Delete+0x90>
 8020424:	4620      	mov	r0, r4
 8020426:	f7f1 faa3 	bl	8011970 <GUI_ALLOC_LockH>
 802042a:	4603      	mov	r3, r0
 802042c:	4638      	mov	r0, r7
 802042e:	685c      	ldr	r4, [r3, #4]
 8020430:	9301      	str	r3, [sp, #4]
 8020432:	42a5      	cmp	r5, r4
 8020434:	d1f3      	bne.n	802041e <GUI_TIMER_Delete+0x6e>
 8020436:	9a00      	ldr	r2, [sp, #0]
 8020438:	6852      	ldr	r2, [r2, #4]
 802043a:	605a      	str	r2, [r3, #4]
 802043c:	f7f1 faac 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020440:	4630      	mov	r0, r6
 8020442:	f7f1 faa9 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020446:	4628      	mov	r0, r5
 8020448:	f7f1 fc2a 	bl	8011ca0 <GUI_ALLOC_Free>
 802044c:	f7f5 ff00 	bl	8016250 <GUI_Unlock>
 8020450:	b002      	add	sp, #8
 8020452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020456:	af02      	add	r7, sp, #8
 8020458:	4628      	mov	r0, r5
 802045a:	f7f1 fa89 	bl	8011970 <GUI_ALLOC_LockH>
 802045e:	6883      	ldr	r3, [r0, #8]
 8020460:	f847 0d04 	str.w	r0, [r7, #-4]!
 8020464:	4638      	mov	r0, r7
 8020466:	466e      	mov	r6, sp
 8020468:	f8c8 3000 	str.w	r3, [r8]
 802046c:	f7f1 fa94 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020470:	e7c9      	b.n	8020406 <GUI_TIMER_Delete+0x56>
 8020472:	6842      	ldr	r2, [r0, #4]
 8020474:	4630      	mov	r0, r6
 8020476:	605a      	str	r2, [r3, #4]
 8020478:	f7f1 fa8e 	bl	8011998 <GUI_ALLOC_UnlockH>
 802047c:	e7e3      	b.n	8020446 <GUI_TIMER_Delete+0x96>
 802047e:	bf00      	nop
 8020480:	200004c8 	.word	0x200004c8

08020484 <GUI_TIMER_GetFlag>:
 8020484:	b530      	push	{r4, r5, lr}
 8020486:	b083      	sub	sp, #12
 8020488:	b918      	cbnz	r0, 8020492 <GUI_TIMER_GetFlag+0xe>
 802048a:	2401      	movs	r4, #1
 802048c:	4620      	mov	r0, r4
 802048e:	b003      	add	sp, #12
 8020490:	bd30      	pop	{r4, r5, pc}
 8020492:	4604      	mov	r4, r0
 8020494:	460d      	mov	r5, r1
 8020496:	f7f5 fee5 	bl	8016264 <GUI_Lock>
 802049a:	4620      	mov	r0, r4
 802049c:	f7f1 fa68 	bl	8011970 <GUI_ALLOC_LockH>
 80204a0:	8982      	ldrh	r2, [r0, #12]
 80204a2:	ab02      	add	r3, sp, #8
 80204a4:	422a      	tst	r2, r5
 80204a6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80204aa:	4618      	mov	r0, r3
 80204ac:	bf14      	ite	ne
 80204ae:	2401      	movne	r4, #1
 80204b0:	2400      	moveq	r4, #0
 80204b2:	f7f1 fa71 	bl	8011998 <GUI_ALLOC_UnlockH>
 80204b6:	f7f5 fecb 	bl	8016250 <GUI_Unlock>
 80204ba:	4620      	mov	r0, r4
 80204bc:	b003      	add	sp, #12
 80204be:	bd30      	pop	{r4, r5, pc}

080204c0 <GUI__ManageCache>:
 80204c0:	4b3a      	ldr	r3, [pc, #232]	; (80205ac <GUI__ManageCache+0xec>)
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204c8:	7c5d      	ldrb	r5, [r3, #17]
 80204ca:	b082      	sub	sp, #8
 80204cc:	2d01      	cmp	r5, #1
 80204ce:	dd03      	ble.n	80204d8 <GUI__ManageCache+0x18>
 80204d0:	2001      	movs	r0, #1
 80204d2:	b002      	add	sp, #8
 80204d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204d8:	4e35      	ldr	r6, [pc, #212]	; (80205b0 <GUI__ManageCache+0xf0>)
 80204da:	4604      	mov	r4, r0
 80204dc:	6873      	ldr	r3, [r6, #4]
 80204de:	b113      	cbz	r3, 80204e6 <GUI__ManageCache+0x26>
 80204e0:	4601      	mov	r1, r0
 80204e2:	4628      	mov	r0, r5
 80204e4:	4798      	blx	r3
 80204e6:	2c01      	cmp	r4, #1
 80204e8:	d027      	beq.n	802053a <GUI__ManageCache+0x7a>
 80204ea:	2c02      	cmp	r4, #2
 80204ec:	d00f      	beq.n	802050e <GUI__ManageCache+0x4e>
 80204ee:	2c00      	cmp	r4, #0
 80204f0:	d1ee      	bne.n	80204d0 <GUI__ManageCache+0x10>
 80204f2:	00ac      	lsls	r4, r5, #2
 80204f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80205b0 <GUI__ManageCache+0xf0>
 80204f8:	1937      	adds	r7, r6, r4
 80204fa:	68bb      	ldr	r3, [r7, #8]
 80204fc:	2b01      	cmp	r3, #1
 80204fe:	d03a      	beq.n	8020576 <GUI__ManageCache+0xb6>
 8020500:	2001      	movs	r0, #1
 8020502:	4426      	add	r6, r4
 8020504:	2b00      	cmp	r3, #0
 8020506:	bf18      	it	ne
 8020508:	3b01      	subne	r3, #1
 802050a:	60b3      	str	r3, [r6, #8]
 802050c:	e7e1      	b.n	80204d2 <GUI__ManageCache+0x12>
 802050e:	4628      	mov	r0, r5
 8020510:	f7f2 fad0 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8020514:	9001      	str	r0, [sp, #4]
 8020516:	2800      	cmp	r0, #0
 8020518:	d0da      	beq.n	80204d0 <GUI__ManageCache+0x10>
 802051a:	68c3      	ldr	r3, [r0, #12]
 802051c:	210d      	movs	r1, #13
 802051e:	a801      	add	r0, sp, #4
 8020520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020522:	4798      	blx	r3
 8020524:	4604      	mov	r4, r0
 8020526:	2800      	cmp	r0, #0
 8020528:	d0d2      	beq.n	80204d0 <GUI__ManageCache+0x10>
 802052a:	6833      	ldr	r3, [r6, #0]
 802052c:	b103      	cbz	r3, 8020530 <GUI__ManageCache+0x70>
 802052e:	4798      	blx	r3
 8020530:	2102      	movs	r1, #2
 8020532:	9801      	ldr	r0, [sp, #4]
 8020534:	47a0      	blx	r4
 8020536:	2000      	movs	r0, #0
 8020538:	e7cb      	b.n	80204d2 <GUI__ManageCache+0x12>
 802053a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 802053e:	68b7      	ldr	r7, [r6, #8]
 8020540:	b11f      	cbz	r7, 802054a <GUI__ManageCache+0x8a>
 8020542:	3701      	adds	r7, #1
 8020544:	4620      	mov	r0, r4
 8020546:	60b7      	str	r7, [r6, #8]
 8020548:	e7c3      	b.n	80204d2 <GUI__ManageCache+0x12>
 802054a:	4628      	mov	r0, r5
 802054c:	f7f2 fab2 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 8020550:	9001      	str	r0, [sp, #4]
 8020552:	2800      	cmp	r0, #0
 8020554:	d0bc      	beq.n	80204d0 <GUI__ManageCache+0x10>
 8020556:	68c3      	ldr	r3, [r0, #12]
 8020558:	210d      	movs	r1, #13
 802055a:	a801      	add	r0, sp, #4
 802055c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802055e:	4798      	blx	r3
 8020560:	4603      	mov	r3, r0
 8020562:	2800      	cmp	r0, #0
 8020564:	d0b4      	beq.n	80204d0 <GUI__ManageCache+0x10>
 8020566:	4621      	mov	r1, r4
 8020568:	9801      	ldr	r0, [sp, #4]
 802056a:	4798      	blx	r3
 802056c:	68b3      	ldr	r3, [r6, #8]
 802056e:	4638      	mov	r0, r7
 8020570:	3301      	adds	r3, #1
 8020572:	60b3      	str	r3, [r6, #8]
 8020574:	e7ad      	b.n	80204d2 <GUI__ManageCache+0x12>
 8020576:	4628      	mov	r0, r5
 8020578:	f7f2 fa9c 	bl	8012ab4 <GUI_DEVICE__GetpDriver>
 802057c:	9001      	str	r0, [sp, #4]
 802057e:	b188      	cbz	r0, 80205a4 <GUI__ManageCache+0xe4>
 8020580:	68c3      	ldr	r3, [r0, #12]
 8020582:	210d      	movs	r1, #13
 8020584:	a801      	add	r0, sp, #4
 8020586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020588:	4798      	blx	r3
 802058a:	4605      	mov	r5, r0
 802058c:	b150      	cbz	r0, 80205a4 <GUI__ManageCache+0xe4>
 802058e:	f8d8 3000 	ldr.w	r3, [r8]
 8020592:	b103      	cbz	r3, 8020596 <GUI__ManageCache+0xd6>
 8020594:	4798      	blx	r3
 8020596:	2100      	movs	r1, #0
 8020598:	9801      	ldr	r0, [sp, #4]
 802059a:	47a8      	blx	r5
 802059c:	1933      	adds	r3, r6, r4
 802059e:	2000      	movs	r0, #0
 80205a0:	689b      	ldr	r3, [r3, #8]
 80205a2:	e7ae      	b.n	8020502 <GUI__ManageCache+0x42>
 80205a4:	68bb      	ldr	r3, [r7, #8]
 80205a6:	2001      	movs	r0, #1
 80205a8:	e7ab      	b.n	8020502 <GUI__ManageCache+0x42>
 80205aa:	bf00      	nop
 80205ac:	20000018 	.word	0x20000018
 80205b0:	200004dc 	.word	0x200004dc

080205b4 <LCD_SetClipRectEx>:
 80205b4:	b530      	push	{r4, r5, lr}
 80205b6:	4c0a      	ldr	r4, [pc, #40]	; (80205e0 <LCD_SetClipRectEx+0x2c>)
 80205b8:	4605      	mov	r5, r0
 80205ba:	4b0a      	ldr	r3, [pc, #40]	; (80205e4 <LCD_SetClipRectEx+0x30>)
 80205bc:	b083      	sub	sp, #12
 80205be:	6822      	ldr	r2, [r4, #0]
 80205c0:	4669      	mov	r1, sp
 80205c2:	7c52      	ldrb	r2, [r2, #17]
 80205c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80205c8:	68c3      	ldr	r3, [r0, #12]
 80205ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205cc:	4798      	blx	r3
 80205ce:	6820      	ldr	r0, [r4, #0]
 80205d0:	466a      	mov	r2, sp
 80205d2:	4629      	mov	r1, r5
 80205d4:	3008      	adds	r0, #8
 80205d6:	f7f6 fcb3 	bl	8016f40 <GUI__IntersectRects>
 80205da:	b003      	add	sp, #12
 80205dc:	bd30      	pop	{r4, r5, pc}
 80205de:	bf00      	nop
 80205e0:	20000018 	.word	0x20000018
 80205e4:	2002afd0 	.word	0x2002afd0

080205e8 <GUI_MEMDEV_Paint1Static>:
 80205e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205ec:	4680      	mov	r8, r0
 80205ee:	b087      	sub	sp, #28
 80205f0:	2700      	movs	r7, #0
 80205f2:	e058      	b.n	80206a6 <GUI_MEMDEV_Paint1Static+0xbe>
 80205f4:	2e00      	cmp	r6, #0
 80205f6:	d17e      	bne.n	80206f6 <GUI_MEMDEV_Paint1Static+0x10e>
 80205f8:	f7fd fb90 	bl	801dd1c <WM_GetDesktopWindow>
 80205fc:	4580      	cmp	r8, r0
 80205fe:	f000 809a 	beq.w	8020736 <GUI_MEMDEV_Paint1Static+0x14e>
 8020602:	4b58      	ldr	r3, [pc, #352]	; (8020764 <GUI_MEMDEV_Paint1Static+0x17c>)
 8020604:	2601      	movs	r6, #1
 8020606:	4649      	mov	r1, r9
 8020608:	4622      	mov	r2, r4
 802060a:	9302      	str	r3, [sp, #8]
 802060c:	4658      	mov	r0, fp
 802060e:	4b56      	ldr	r3, [pc, #344]	; (8020768 <GUI_MEMDEV_Paint1Static+0x180>)
 8020610:	9600      	str	r6, [sp, #0]
 8020612:	9301      	str	r3, [sp, #4]
 8020614:	462b      	mov	r3, r5
 8020616:	f7f9 f9b5 	bl	8019984 <GUI_MEMDEV__CreateFixed>
 802061a:	4681      	mov	r9, r0
 802061c:	4640      	mov	r0, r8
 802061e:	f7f1 f9a7 	bl	8011970 <GUI_ALLOC_LockH>
 8020622:	4603      	mov	r3, r0
 8020624:	9005      	str	r0, [sp, #20]
 8020626:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 802062a:	f1b9 0f00 	cmp.w	r9, #0
 802062e:	d079      	beq.n	8020724 <GUI_MEMDEV_Paint1Static+0x13c>
 8020630:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020632:	a805      	add	r0, sp, #20
 8020634:	f8df b140 	ldr.w	fp, [pc, #320]	; 8020778 <GUI_MEMDEV_Paint1Static+0x190>
 8020638:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 802063c:	629a      	str	r2, [r3, #40]	; 0x28
 802063e:	f7f1 f9ab 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020642:	4648      	mov	r0, r9
 8020644:	f7f9 fac8 	bl	8019bd8 <GUI_MEMDEV_Select>
 8020648:	4682      	mov	sl, r0
 802064a:	4630      	mov	r0, r6
 802064c:	4e47      	ldr	r6, [pc, #284]	; (802076c <GUI_MEMDEV_Paint1Static+0x184>)
 802064e:	f7f5 fdb5 	bl	80161bc <GUI__AlphaPreserveTrans>
 8020652:	4648      	mov	r0, r9
 8020654:	f7fa fb16 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 8020658:	4b45      	ldr	r3, [pc, #276]	; (8020770 <GUI_MEMDEV_Paint1Static+0x188>)
 802065a:	fb05 f204 	mul.w	r2, r5, r4
 802065e:	4c45      	ldr	r4, [pc, #276]	; (8020774 <GUI_MEMDEV_Paint1Static+0x18c>)
 8020660:	7819      	ldrb	r1, [r3, #0]
 8020662:	0092      	lsls	r2, r2, #2
 8020664:	6835      	ldr	r5, [r6, #0]
 8020666:	47a8      	blx	r5
 8020668:	4640      	mov	r0, r8
 802066a:	6825      	ldr	r5, [r4, #0]
 802066c:	f8cb 8000 	str.w	r8, [fp]
 8020670:	f7fd fbcc 	bl	801de0c <WM_GetWindowOrgX>
 8020674:	6020      	str	r0, [r4, #0]
 8020676:	4640      	mov	r0, r8
 8020678:	f7fd f832 	bl	801d6e0 <WM__Paint1>
 802067c:	2200      	movs	r2, #0
 802067e:	6025      	str	r5, [r4, #0]
 8020680:	4610      	mov	r0, r2
 8020682:	f8cb 2000 	str.w	r2, [fp]
 8020686:	f7f5 fd99 	bl	80161bc <GUI__AlphaPreserveTrans>
 802068a:	4650      	mov	r0, sl
 802068c:	f7f9 faa4 	bl	8019bd8 <GUI_MEMDEV_Select>
 8020690:	4640      	mov	r0, r8
 8020692:	f7f1 f963 	bl	801195c <GUI_ALLOC_h2p>
 8020696:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020698:	fab0 f380 	clz	r3, r0
 802069c:	095b      	lsrs	r3, r3, #5
 802069e:	3701      	adds	r7, #1
 80206a0:	2f04      	cmp	r7, #4
 80206a2:	dc22      	bgt.n	80206ea <GUI_MEMDEV_Paint1Static+0x102>
 80206a4:	b30b      	cbz	r3, 80206ea <GUI_MEMDEV_Paint1Static+0x102>
 80206a6:	4640      	mov	r0, r8
 80206a8:	f7f1 f962 	bl	8011970 <GUI_ALLOC_LockH>
 80206ac:	4603      	mov	r3, r0
 80206ae:	a805      	add	r0, sp, #20
 80206b0:	f9b3 b000 	ldrsh.w	fp, [r3]
 80206b4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80206b8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80206bc:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80206c0:	ebcb 0404 	rsb	r4, fp, r4
 80206c4:	9305      	str	r3, [sp, #20]
 80206c6:	ebc9 0505 	rsb	r5, r9, r5
 80206ca:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80206cc:	3401      	adds	r4, #1
 80206ce:	f7f1 f963 	bl	8011998 <GUI_ALLOC_UnlockH>
 80206d2:	3501      	adds	r5, #1
 80206d4:	2d00      	cmp	r5, #0
 80206d6:	bfc8      	it	gt
 80206d8:	2c00      	cmpgt	r4, #0
 80206da:	bfd4      	ite	le
 80206dc:	2301      	movle	r3, #1
 80206de:	2300      	movgt	r3, #0
 80206e0:	dc88      	bgt.n	80205f4 <GUI_MEMDEV_Paint1Static+0xc>
 80206e2:	3701      	adds	r7, #1
 80206e4:	2000      	movs	r0, #0
 80206e6:	2f04      	cmp	r7, #4
 80206e8:	dddc      	ble.n	80206a4 <GUI_MEMDEV_Paint1Static+0xbc>
 80206ea:	b108      	cbz	r0, 80206f0 <GUI_MEMDEV_Paint1Static+0x108>
 80206ec:	f000 f846 	bl	802077c <GUI_MEMDEV_Write>
 80206f0:	b007      	add	sp, #28
 80206f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206f6:	4630      	mov	r0, r6
 80206f8:	f7f1 f93a 	bl	8011970 <GUI_ALLOC_LockH>
 80206fc:	4603      	mov	r3, r0
 80206fe:	a806      	add	r0, sp, #24
 8020700:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8020704:	f840 3d08 	str.w	r3, [r0, #-8]!
 8020708:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 802070c:	f7f1 f944 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020710:	45a9      	cmp	r9, r5
 8020712:	d101      	bne.n	8020718 <GUI_MEMDEV_Paint1Static+0x130>
 8020714:	45a3      	cmp	fp, r4
 8020716:	d0bb      	beq.n	8020690 <GUI_MEMDEV_Paint1Static+0xa8>
 8020718:	464a      	mov	r2, r9
 802071a:	4659      	mov	r1, fp
 802071c:	4630      	mov	r0, r6
 802071e:	f7fa fb71 	bl	801ae04 <GUI_MEMDEV_SetOrg>
 8020722:	e7b5      	b.n	8020690 <GUI_MEMDEV_Paint1Static+0xa8>
 8020724:	a805      	add	r0, sp, #20
 8020726:	f7f1 f937 	bl	8011998 <GUI_ALLOC_UnlockH>
 802072a:	4640      	mov	r0, r8
 802072c:	f7fc ffd8 	bl	801d6e0 <WM__Paint1>
 8020730:	4633      	mov	r3, r6
 8020732:	4648      	mov	r0, r9
 8020734:	e7b3      	b.n	802069e <GUI_MEMDEV_Paint1Static+0xb6>
 8020736:	f7f7 fc21 	bl	8017f7c <LCD_GetXSize>
 802073a:	4606      	mov	r6, r0
 802073c:	f7f7 fc34 	bl	8017fa8 <LCD_GetYSize>
 8020740:	42b4      	cmp	r4, r6
 8020742:	dc02      	bgt.n	802074a <GUI_MEMDEV_Paint1Static+0x162>
 8020744:	4285      	cmp	r5, r0
 8020746:	f77f af5c 	ble.w	8020602 <GUI_MEMDEV_Paint1Static+0x1a>
 802074a:	42b4      	cmp	r4, r6
 802074c:	bfa8      	it	ge
 802074e:	4634      	movge	r4, r6
 8020750:	4285      	cmp	r5, r0
 8020752:	bfa8      	it	ge
 8020754:	4605      	movge	r5, r0
 8020756:	4621      	mov	r1, r4
 8020758:	4640      	mov	r0, r8
 802075a:	462a      	mov	r2, r5
 802075c:	f7fd fbfe 	bl	801df5c <WM_SetSize>
 8020760:	e74f      	b.n	8020602 <GUI_MEMDEV_Paint1Static+0x1a>
 8020762:	bf00      	nop
 8020764:	08023b28 	.word	0x08023b28
 8020768:	0802a938 	.word	0x0802a938
 802076c:	20000050 	.word	0x20000050
 8020770:	200004f4 	.word	0x200004f4
 8020774:	2002af90 	.word	0x2002af90
 8020778:	2002b040 	.word	0x2002b040

0802077c <GUI_MEMDEV_Write>:
 802077c:	b900      	cbnz	r0, 8020780 <GUI_MEMDEV_Write+0x4>
 802077e:	4770      	bx	lr
 8020780:	b570      	push	{r4, r5, r6, lr}
 8020782:	4604      	mov	r4, r0
 8020784:	b084      	sub	sp, #16
 8020786:	f7f5 fd6d 	bl	8016264 <GUI_Lock>
 802078a:	4620      	mov	r0, r4
 802078c:	f7f1 f8f0 	bl	8011970 <GUI_ALLOC_LockH>
 8020790:	4601      	mov	r1, r0
 8020792:	a801      	add	r0, sp, #4
 8020794:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8020798:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 802079c:	890a      	ldrh	r2, [r1, #8]
 802079e:	894b      	ldrh	r3, [r1, #10]
 80207a0:	4432      	add	r2, r6
 80207a2:	9101      	str	r1, [sp, #4]
 80207a4:	442b      	add	r3, r5
 80207a6:	f8ad 6008 	strh.w	r6, [sp, #8]
 80207aa:	3a01      	subs	r2, #1
 80207ac:	f8ad 500a 	strh.w	r5, [sp, #10]
 80207b0:	3b01      	subs	r3, #1
 80207b2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80207b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80207ba:	f7f1 f8ed 	bl	8011998 <GUI_ALLOC_UnlockH>
 80207be:	a802      	add	r0, sp, #8
 80207c0:	f7fc fec2 	bl	801d548 <WM__InitIVRSearch>
 80207c4:	b140      	cbz	r0, 80207d8 <GUI_MEMDEV_Write+0x5c>
 80207c6:	462a      	mov	r2, r5
 80207c8:	4631      	mov	r1, r6
 80207ca:	4620      	mov	r0, r4
 80207cc:	f7f9 f8bc 	bl	8019948 <GUI_MEMDEV__WriteToActiveAt>
 80207d0:	f7fc fd90 	bl	801d2f4 <WM__GetNextIVR>
 80207d4:	2800      	cmp	r0, #0
 80207d6:	d1f6      	bne.n	80207c6 <GUI_MEMDEV_Write+0x4a>
 80207d8:	f7f5 fd3a 	bl	8016250 <GUI_Unlock>
 80207dc:	b004      	add	sp, #16
 80207de:	bd70      	pop	{r4, r5, r6, pc}

080207e0 <WM_PID__SetPrevState>:
 80207e0:	b410      	push	{r4}
 80207e2:	4b05      	ldr	r3, [pc, #20]	; (80207f8 <WM_PID__SetPrevState+0x18>)
 80207e4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80207e8:	c807      	ldmia	r0, {r0, r1, r2}
 80207ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80207ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80207f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80207f6:	4770      	bx	lr
 80207f8:	200004f8 	.word	0x200004f8

080207fc <_Screen2hWin>:
 80207fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020800:	4606      	mov	r6, r0
 8020802:	b091      	sub	sp, #68	; 0x44
 8020804:	b910      	cbnz	r0, 802080c <_Screen2hWin+0x10>
 8020806:	b011      	add	sp, #68	; 0x44
 8020808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802080c:	4699      	mov	r9, r3
 802080e:	460d      	mov	r5, r1
 8020810:	4690      	mov	r8, r2
 8020812:	f7f1 f8ad 	bl	8011970 <GUI_ALLOC_LockH>
 8020816:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020818:	9007      	str	r0, [sp, #28]
 802081a:	079c      	lsls	r4, r3, #30
 802081c:	f140 81b5 	bpl.w	8020b8a <_Screen2hWin+0x38e>
 8020820:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020824:	4598      	cmp	r8, r3
 8020826:	f2c0 81b0 	blt.w	8020b8a <_Screen2hWin+0x38e>
 802082a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802082e:	4598      	cmp	r8, r3
 8020830:	f300 81ab 	bgt.w	8020b8a <_Screen2hWin+0x38e>
 8020834:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020838:	4599      	cmp	r9, r3
 802083a:	f2c0 81a6 	blt.w	8020b8a <_Screen2hWin+0x38e>
 802083e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020842:	4599      	cmp	r9, r3
 8020844:	f300 81a1 	bgt.w	8020b8a <_Screen2hWin+0x38e>
 8020848:	69c3      	ldr	r3, [r0, #28]
 802084a:	9303      	str	r3, [sp, #12]
 802084c:	2b00      	cmp	r3, #0
 802084e:	f000 818d 	beq.w	8020b6c <_Screen2hWin+0x370>
 8020852:	42ab      	cmp	r3, r5
 8020854:	f000 818a 	beq.w	8020b6c <_Screen2hWin+0x370>
 8020858:	9803      	ldr	r0, [sp, #12]
 802085a:	f7f1 f889 	bl	8011970 <GUI_ALLOC_LockH>
 802085e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020860:	9008      	str	r0, [sp, #32]
 8020862:	0799      	lsls	r1, r3, #30
 8020864:	f140 8176 	bpl.w	8020b54 <_Screen2hWin+0x358>
 8020868:	f9b0 3000 	ldrsh.w	r3, [r0]
 802086c:	4598      	cmp	r8, r3
 802086e:	f2c0 8171 	blt.w	8020b54 <_Screen2hWin+0x358>
 8020872:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020876:	4598      	cmp	r8, r3
 8020878:	f300 816c 	bgt.w	8020b54 <_Screen2hWin+0x358>
 802087c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020880:	4599      	cmp	r9, r3
 8020882:	f2c0 8167 	blt.w	8020b54 <_Screen2hWin+0x358>
 8020886:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802088a:	4599      	cmp	r9, r3
 802088c:	f300 8162 	bgt.w	8020b54 <_Screen2hWin+0x358>
 8020890:	69c3      	ldr	r3, [r0, #28]
 8020892:	9304      	str	r3, [sp, #16]
 8020894:	2b00      	cmp	r3, #0
 8020896:	f000 817d 	beq.w	8020b94 <_Screen2hWin+0x398>
 802089a:	429d      	cmp	r5, r3
 802089c:	f000 817a 	beq.w	8020b94 <_Screen2hWin+0x398>
 80208a0:	9e03      	ldr	r6, [sp, #12]
 80208a2:	9804      	ldr	r0, [sp, #16]
 80208a4:	f7f1 f864 	bl	8011970 <GUI_ALLOC_LockH>
 80208a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80208aa:	9009      	str	r0, [sp, #36]	; 0x24
 80208ac:	079a      	lsls	r2, r3, #30
 80208ae:	f140 8145 	bpl.w	8020b3c <_Screen2hWin+0x340>
 80208b2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80208b6:	4598      	cmp	r8, r3
 80208b8:	f2c0 8140 	blt.w	8020b3c <_Screen2hWin+0x340>
 80208bc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80208c0:	4598      	cmp	r8, r3
 80208c2:	f300 813b 	bgt.w	8020b3c <_Screen2hWin+0x340>
 80208c6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80208ca:	4599      	cmp	r9, r3
 80208cc:	f2c0 8136 	blt.w	8020b3c <_Screen2hWin+0x340>
 80208d0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80208d4:	4599      	cmp	r9, r3
 80208d6:	f300 8131 	bgt.w	8020b3c <_Screen2hWin+0x340>
 80208da:	69c3      	ldr	r3, [r0, #28]
 80208dc:	9305      	str	r3, [sp, #20]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	f000 815c 	beq.w	8020b9c <_Screen2hWin+0x3a0>
 80208e4:	429d      	cmp	r5, r3
 80208e6:	f000 8159 	beq.w	8020b9c <_Screen2hWin+0x3a0>
 80208ea:	9e04      	ldr	r6, [sp, #16]
 80208ec:	9805      	ldr	r0, [sp, #20]
 80208ee:	f7f1 f83f 	bl	8011970 <GUI_ALLOC_LockH>
 80208f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80208f4:	900a      	str	r0, [sp, #40]	; 0x28
 80208f6:	079b      	lsls	r3, r3, #30
 80208f8:	f140 8114 	bpl.w	8020b24 <_Screen2hWin+0x328>
 80208fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020900:	4598      	cmp	r8, r3
 8020902:	f2c0 810f 	blt.w	8020b24 <_Screen2hWin+0x328>
 8020906:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802090a:	4598      	cmp	r8, r3
 802090c:	f300 810a 	bgt.w	8020b24 <_Screen2hWin+0x328>
 8020910:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020914:	4599      	cmp	r9, r3
 8020916:	f2c0 8105 	blt.w	8020b24 <_Screen2hWin+0x328>
 802091a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802091e:	4599      	cmp	r9, r3
 8020920:	f300 8100 	bgt.w	8020b24 <_Screen2hWin+0x328>
 8020924:	69c3      	ldr	r3, [r0, #28]
 8020926:	9302      	str	r3, [sp, #8]
 8020928:	2b00      	cmp	r3, #0
 802092a:	f000 8135 	beq.w	8020b98 <_Screen2hWin+0x39c>
 802092e:	429d      	cmp	r5, r3
 8020930:	f000 8132 	beq.w	8020b98 <_Screen2hWin+0x39c>
 8020934:	9e05      	ldr	r6, [sp, #20]
 8020936:	9802      	ldr	r0, [sp, #8]
 8020938:	f7f1 f81a 	bl	8011970 <GUI_ALLOC_LockH>
 802093c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802093e:	900b      	str	r0, [sp, #44]	; 0x2c
 8020940:	079f      	lsls	r7, r3, #30
 8020942:	f140 80e3 	bpl.w	8020b0c <_Screen2hWin+0x310>
 8020946:	f9b0 3000 	ldrsh.w	r3, [r0]
 802094a:	4598      	cmp	r8, r3
 802094c:	f2c0 80de 	blt.w	8020b0c <_Screen2hWin+0x310>
 8020950:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020954:	4598      	cmp	r8, r3
 8020956:	f300 80d9 	bgt.w	8020b0c <_Screen2hWin+0x310>
 802095a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802095e:	4599      	cmp	r9, r3
 8020960:	f2c0 80d4 	blt.w	8020b0c <_Screen2hWin+0x310>
 8020964:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020968:	4599      	cmp	r9, r3
 802096a:	f300 80cf 	bgt.w	8020b0c <_Screen2hWin+0x310>
 802096e:	69c3      	ldr	r3, [r0, #28]
 8020970:	9301      	str	r3, [sp, #4]
 8020972:	2b00      	cmp	r3, #0
 8020974:	f000 8107 	beq.w	8020b86 <_Screen2hWin+0x38a>
 8020978:	429d      	cmp	r5, r3
 802097a:	f000 8104 	beq.w	8020b86 <_Screen2hWin+0x38a>
 802097e:	9e02      	ldr	r6, [sp, #8]
 8020980:	9801      	ldr	r0, [sp, #4]
 8020982:	f7f0 fff5 	bl	8011970 <GUI_ALLOC_LockH>
 8020986:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020988:	900c      	str	r0, [sp, #48]	; 0x30
 802098a:	079c      	lsls	r4, r3, #30
 802098c:	f140 80b2 	bpl.w	8020af4 <_Screen2hWin+0x2f8>
 8020990:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020994:	4598      	cmp	r8, r3
 8020996:	f2c0 80ad 	blt.w	8020af4 <_Screen2hWin+0x2f8>
 802099a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802099e:	4598      	cmp	r8, r3
 80209a0:	f300 80a8 	bgt.w	8020af4 <_Screen2hWin+0x2f8>
 80209a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80209a8:	4599      	cmp	r9, r3
 80209aa:	f2c0 80a3 	blt.w	8020af4 <_Screen2hWin+0x2f8>
 80209ae:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80209b2:	4599      	cmp	r9, r3
 80209b4:	f300 809e 	bgt.w	8020af4 <_Screen2hWin+0x2f8>
 80209b8:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80209bc:	455d      	cmp	r5, fp
 80209be:	f000 80e0 	beq.w	8020b82 <_Screen2hWin+0x386>
 80209c2:	f1bb 0f00 	cmp.w	fp, #0
 80209c6:	f000 80dc 	beq.w	8020b82 <_Screen2hWin+0x386>
 80209ca:	9e01      	ldr	r6, [sp, #4]
 80209cc:	4658      	mov	r0, fp
 80209ce:	f7f0 ffcf 	bl	8011970 <GUI_ALLOC_LockH>
 80209d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80209d4:	900d      	str	r0, [sp, #52]	; 0x34
 80209d6:	0799      	lsls	r1, r3, #30
 80209d8:	d57e      	bpl.n	8020ad8 <_Screen2hWin+0x2dc>
 80209da:	f9b0 3000 	ldrsh.w	r3, [r0]
 80209de:	4598      	cmp	r8, r3
 80209e0:	db7a      	blt.n	8020ad8 <_Screen2hWin+0x2dc>
 80209e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80209e6:	4598      	cmp	r8, r3
 80209e8:	dc76      	bgt.n	8020ad8 <_Screen2hWin+0x2dc>
 80209ea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80209ee:	4599      	cmp	r9, r3
 80209f0:	db72      	blt.n	8020ad8 <_Screen2hWin+0x2dc>
 80209f2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80209f6:	4599      	cmp	r9, r3
 80209f8:	dc6e      	bgt.n	8020ad8 <_Screen2hWin+0x2dc>
 80209fa:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80209fe:	4555      	cmp	r5, sl
 8020a00:	f000 80bd 	beq.w	8020b7e <_Screen2hWin+0x382>
 8020a04:	f1ba 0f00 	cmp.w	sl, #0
 8020a08:	f000 80b9 	beq.w	8020b7e <_Screen2hWin+0x382>
 8020a0c:	465e      	mov	r6, fp
 8020a0e:	4650      	mov	r0, sl
 8020a10:	f7f0 ffae 	bl	8011970 <GUI_ALLOC_LockH>
 8020a14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020a16:	900e      	str	r0, [sp, #56]	; 0x38
 8020a18:	079a      	lsls	r2, r3, #30
 8020a1a:	d550      	bpl.n	8020abe <_Screen2hWin+0x2c2>
 8020a1c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020a20:	4598      	cmp	r8, r3
 8020a22:	db4c      	blt.n	8020abe <_Screen2hWin+0x2c2>
 8020a24:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020a28:	4598      	cmp	r8, r3
 8020a2a:	dc48      	bgt.n	8020abe <_Screen2hWin+0x2c2>
 8020a2c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020a30:	4599      	cmp	r9, r3
 8020a32:	db44      	blt.n	8020abe <_Screen2hWin+0x2c2>
 8020a34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020a38:	4599      	cmp	r9, r3
 8020a3a:	dc40      	bgt.n	8020abe <_Screen2hWin+0x2c2>
 8020a3c:	69c7      	ldr	r7, [r0, #28]
 8020a3e:	42bd      	cmp	r5, r7
 8020a40:	f000 809b 	beq.w	8020b7a <_Screen2hWin+0x37e>
 8020a44:	2f00      	cmp	r7, #0
 8020a46:	f000 8098 	beq.w	8020b7a <_Screen2hWin+0x37e>
 8020a4a:	4656      	mov	r6, sl
 8020a4c:	4638      	mov	r0, r7
 8020a4e:	f7f0 ff8f 	bl	8011970 <GUI_ALLOC_LockH>
 8020a52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020a54:	900f      	str	r0, [sp, #60]	; 0x3c
 8020a56:	079b      	lsls	r3, r3, #30
 8020a58:	d527      	bpl.n	8020aaa <_Screen2hWin+0x2ae>
 8020a5a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8020a5e:	4598      	cmp	r8, r3
 8020a60:	db23      	blt.n	8020aaa <_Screen2hWin+0x2ae>
 8020a62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020a66:	4598      	cmp	r8, r3
 8020a68:	dc1f      	bgt.n	8020aaa <_Screen2hWin+0x2ae>
 8020a6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020a6e:	4599      	cmp	r9, r3
 8020a70:	db1b      	blt.n	8020aaa <_Screen2hWin+0x2ae>
 8020a72:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020a76:	4599      	cmp	r9, r3
 8020a78:	dc17      	bgt.n	8020aaa <_Screen2hWin+0x2ae>
 8020a7a:	69c4      	ldr	r4, [r0, #28]
 8020a7c:	42a5      	cmp	r5, r4
 8020a7e:	d07a      	beq.n	8020b76 <_Screen2hWin+0x37a>
 8020a80:	2c00      	cmp	r4, #0
 8020a82:	d078      	beq.n	8020b76 <_Screen2hWin+0x37a>
 8020a84:	463e      	mov	r6, r7
 8020a86:	e001      	b.n	8020a8c <_Screen2hWin+0x290>
 8020a88:	42a5      	cmp	r5, r4
 8020a8a:	d00e      	beq.n	8020aaa <_Screen2hWin+0x2ae>
 8020a8c:	464b      	mov	r3, r9
 8020a8e:	4642      	mov	r2, r8
 8020a90:	4629      	mov	r1, r5
 8020a92:	4620      	mov	r0, r4
 8020a94:	f7ff feb2 	bl	80207fc <_Screen2hWin>
 8020a98:	2800      	cmp	r0, #0
 8020a9a:	bf18      	it	ne
 8020a9c:	4606      	movne	r6, r0
 8020a9e:	4620      	mov	r0, r4
 8020aa0:	f7f0 ff5c 	bl	801195c <GUI_ALLOC_h2p>
 8020aa4:	6a04      	ldr	r4, [r0, #32]
 8020aa6:	2c00      	cmp	r4, #0
 8020aa8:	d1ee      	bne.n	8020a88 <_Screen2hWin+0x28c>
 8020aaa:	a80f      	add	r0, sp, #60	; 0x3c
 8020aac:	f7f0 ff74 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020ab0:	4638      	mov	r0, r7
 8020ab2:	f7f0 ff53 	bl	801195c <GUI_ALLOC_h2p>
 8020ab6:	6a07      	ldr	r7, [r0, #32]
 8020ab8:	b10f      	cbz	r7, 8020abe <_Screen2hWin+0x2c2>
 8020aba:	42bd      	cmp	r5, r7
 8020abc:	d1c6      	bne.n	8020a4c <_Screen2hWin+0x250>
 8020abe:	a80e      	add	r0, sp, #56	; 0x38
 8020ac0:	f7f0 ff6a 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020ac4:	4650      	mov	r0, sl
 8020ac6:	f7f0 ff49 	bl	801195c <GUI_ALLOC_h2p>
 8020aca:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8020ace:	f1ba 0f00 	cmp.w	sl, #0
 8020ad2:	d001      	beq.n	8020ad8 <_Screen2hWin+0x2dc>
 8020ad4:	4555      	cmp	r5, sl
 8020ad6:	d19a      	bne.n	8020a0e <_Screen2hWin+0x212>
 8020ad8:	a80d      	add	r0, sp, #52	; 0x34
 8020ada:	f7f0 ff5d 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020ade:	4658      	mov	r0, fp
 8020ae0:	f7f0 ff3c 	bl	801195c <GUI_ALLOC_h2p>
 8020ae4:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8020ae8:	f1bb 0f00 	cmp.w	fp, #0
 8020aec:	d002      	beq.n	8020af4 <_Screen2hWin+0x2f8>
 8020aee:	455d      	cmp	r5, fp
 8020af0:	f47f af6c 	bne.w	80209cc <_Screen2hWin+0x1d0>
 8020af4:	a80c      	add	r0, sp, #48	; 0x30
 8020af6:	f7f0 ff4f 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020afa:	9801      	ldr	r0, [sp, #4]
 8020afc:	f7f0 ff2e 	bl	801195c <GUI_ALLOC_h2p>
 8020b00:	6a03      	ldr	r3, [r0, #32]
 8020b02:	9301      	str	r3, [sp, #4]
 8020b04:	b113      	cbz	r3, 8020b0c <_Screen2hWin+0x310>
 8020b06:	429d      	cmp	r5, r3
 8020b08:	f47f af3a 	bne.w	8020980 <_Screen2hWin+0x184>
 8020b0c:	a80b      	add	r0, sp, #44	; 0x2c
 8020b0e:	f7f0 ff43 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b12:	9802      	ldr	r0, [sp, #8]
 8020b14:	f7f0 ff22 	bl	801195c <GUI_ALLOC_h2p>
 8020b18:	6a03      	ldr	r3, [r0, #32]
 8020b1a:	9302      	str	r3, [sp, #8]
 8020b1c:	b113      	cbz	r3, 8020b24 <_Screen2hWin+0x328>
 8020b1e:	429d      	cmp	r5, r3
 8020b20:	f47f af09 	bne.w	8020936 <_Screen2hWin+0x13a>
 8020b24:	a80a      	add	r0, sp, #40	; 0x28
 8020b26:	f7f0 ff37 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b2a:	9805      	ldr	r0, [sp, #20]
 8020b2c:	f7f0 ff16 	bl	801195c <GUI_ALLOC_h2p>
 8020b30:	6a03      	ldr	r3, [r0, #32]
 8020b32:	9305      	str	r3, [sp, #20]
 8020b34:	b113      	cbz	r3, 8020b3c <_Screen2hWin+0x340>
 8020b36:	429d      	cmp	r5, r3
 8020b38:	f47f aed8 	bne.w	80208ec <_Screen2hWin+0xf0>
 8020b3c:	a809      	add	r0, sp, #36	; 0x24
 8020b3e:	f7f0 ff2b 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b42:	9804      	ldr	r0, [sp, #16]
 8020b44:	f7f0 ff0a 	bl	801195c <GUI_ALLOC_h2p>
 8020b48:	6a03      	ldr	r3, [r0, #32]
 8020b4a:	9304      	str	r3, [sp, #16]
 8020b4c:	b113      	cbz	r3, 8020b54 <_Screen2hWin+0x358>
 8020b4e:	429d      	cmp	r5, r3
 8020b50:	f47f aea7 	bne.w	80208a2 <_Screen2hWin+0xa6>
 8020b54:	a808      	add	r0, sp, #32
 8020b56:	f7f0 ff1f 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b5a:	9803      	ldr	r0, [sp, #12]
 8020b5c:	f7f0 fefe 	bl	801195c <GUI_ALLOC_h2p>
 8020b60:	6a03      	ldr	r3, [r0, #32]
 8020b62:	9303      	str	r3, [sp, #12]
 8020b64:	b113      	cbz	r3, 8020b6c <_Screen2hWin+0x370>
 8020b66:	429d      	cmp	r5, r3
 8020b68:	f47f ae76 	bne.w	8020858 <_Screen2hWin+0x5c>
 8020b6c:	a807      	add	r0, sp, #28
 8020b6e:	f7f0 ff13 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b72:	4630      	mov	r0, r6
 8020b74:	e647      	b.n	8020806 <_Screen2hWin+0xa>
 8020b76:	463e      	mov	r6, r7
 8020b78:	e797      	b.n	8020aaa <_Screen2hWin+0x2ae>
 8020b7a:	4656      	mov	r6, sl
 8020b7c:	e79f      	b.n	8020abe <_Screen2hWin+0x2c2>
 8020b7e:	465e      	mov	r6, fp
 8020b80:	e7aa      	b.n	8020ad8 <_Screen2hWin+0x2dc>
 8020b82:	9e01      	ldr	r6, [sp, #4]
 8020b84:	e7b6      	b.n	8020af4 <_Screen2hWin+0x2f8>
 8020b86:	9e02      	ldr	r6, [sp, #8]
 8020b88:	e7c0      	b.n	8020b0c <_Screen2hWin+0x310>
 8020b8a:	a807      	add	r0, sp, #28
 8020b8c:	f7f0 ff04 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020b90:	2000      	movs	r0, #0
 8020b92:	e638      	b.n	8020806 <_Screen2hWin+0xa>
 8020b94:	9e03      	ldr	r6, [sp, #12]
 8020b96:	e7dd      	b.n	8020b54 <_Screen2hWin+0x358>
 8020b98:	9e05      	ldr	r6, [sp, #20]
 8020b9a:	e7c3      	b.n	8020b24 <_Screen2hWin+0x328>
 8020b9c:	9e04      	ldr	r6, [sp, #16]
 8020b9e:	e7cd      	b.n	8020b3c <_Screen2hWin+0x340>

08020ba0 <WM_Screen2hWin>:
 8020ba0:	b538      	push	{r3, r4, r5, lr}
 8020ba2:	460d      	mov	r5, r1
 8020ba4:	4604      	mov	r4, r0
 8020ba6:	f7f5 fb5d 	bl	8016264 <GUI_Lock>
 8020baa:	4b07      	ldr	r3, [pc, #28]	; (8020bc8 <WM_Screen2hWin+0x28>)
 8020bac:	6818      	ldr	r0, [r3, #0]
 8020bae:	f7fd f8c1 	bl	801dd34 <WM_GetDesktopWindowEx>
 8020bb2:	4622      	mov	r2, r4
 8020bb4:	462b      	mov	r3, r5
 8020bb6:	2100      	movs	r1, #0
 8020bb8:	f7ff fe20 	bl	80207fc <_Screen2hWin>
 8020bbc:	4604      	mov	r4, r0
 8020bbe:	f7f5 fb47 	bl	8016250 <GUI_Unlock>
 8020bc2:	4620      	mov	r0, r4
 8020bc4:	bd38      	pop	{r3, r4, r5, pc}
 8020bc6:	bf00      	nop
 8020bc8:	2002b014 	.word	0x2002b014

08020bcc <WM_ReleaseCapture>:
 8020bcc:	b530      	push	{r4, r5, lr}
 8020bce:	4d0b      	ldr	r5, [pc, #44]	; (8020bfc <WM_ReleaseCapture+0x30>)
 8020bd0:	b085      	sub	sp, #20
 8020bd2:	f7f5 fb47 	bl	8016264 <GUI_Lock>
 8020bd6:	4c0a      	ldr	r4, [pc, #40]	; (8020c00 <WM_ReleaseCapture+0x34>)
 8020bd8:	682b      	ldr	r3, [r5, #0]
 8020bda:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8020bde:	b148      	cbz	r0, 8020bf4 <WM_ReleaseCapture+0x28>
 8020be0:	2318      	movs	r3, #24
 8020be2:	a904      	add	r1, sp, #16
 8020be4:	f841 3d10 	str.w	r3, [r1, #-16]!
 8020be8:	f7fd fed8 	bl	801e99c <WM__SendMessage>
 8020bec:	682b      	ldr	r3, [r5, #0]
 8020bee:	2200      	movs	r2, #0
 8020bf0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8020bf4:	f7f5 fb2c 	bl	8016250 <GUI_Unlock>
 8020bf8:	b005      	add	sp, #20
 8020bfa:	bd30      	pop	{r4, r5, pc}
 8020bfc:	2002b014 	.word	0x2002b014
 8020c00:	2002b038 	.word	0x2002b038

08020c04 <_GetDevData>:
 8020c04:	2901      	cmp	r1, #1
 8020c06:	4802      	ldr	r0, [pc, #8]	; (8020c10 <_GetDevData+0xc>)
 8020c08:	bf18      	it	ne
 8020c0a:	2000      	movne	r0, #0
 8020c0c:	4770      	bx	lr
 8020c0e:	bf00      	nop
 8020c10:	0802a938 	.word	0x0802a938

08020c14 <_GetDevFunc>:
 8020c14:	2916      	cmp	r1, #22
 8020c16:	4802      	ldr	r0, [pc, #8]	; (8020c20 <_GetDevFunc+0xc>)
 8020c18:	bf18      	it	ne
 8020c1a:	2000      	movne	r0, #0
 8020c1c:	4770      	bx	lr
 8020c1e:	bf00      	nop
 8020c20:	08021ae5 	.word	0x08021ae5

08020c24 <_GetDevProp>:
 8020c24:	2908      	cmp	r1, #8
 8020c26:	bf0c      	ite	eq
 8020c28:	2020      	moveq	r0, #32
 8020c2a:	2000      	movne	r0, #0
 8020c2c:	4770      	bx	lr
 8020c2e:	bf00      	nop

08020c30 <_SetOrg>:
 8020c30:	6800      	ldr	r0, [r0, #0]
 8020c32:	68c3      	ldr	r3, [r0, #12]
 8020c34:	6a1b      	ldr	r3, [r3, #32]
 8020c36:	4718      	bx	r3

08020c38 <_GetRect>:
 8020c38:	b570      	push	{r4, r5, r6, lr}
 8020c3a:	b082      	sub	sp, #8
 8020c3c:	6880      	ldr	r0, [r0, #8]
 8020c3e:	460d      	mov	r5, r1
 8020c40:	f7f0 fe96 	bl	8011970 <GUI_ALLOC_LockH>
 8020c44:	4602      	mov	r2, r0
 8020c46:	a802      	add	r0, sp, #8
 8020c48:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8020c4c:	8914      	ldrh	r4, [r2, #8]
 8020c4e:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8020c52:	8953      	ldrh	r3, [r2, #10]
 8020c54:	4434      	add	r4, r6
 8020c56:	802e      	strh	r6, [r5, #0]
 8020c58:	440b      	add	r3, r1
 8020c5a:	3c01      	subs	r4, #1
 8020c5c:	8069      	strh	r1, [r5, #2]
 8020c5e:	3b01      	subs	r3, #1
 8020c60:	80ac      	strh	r4, [r5, #4]
 8020c62:	f840 2d04 	str.w	r2, [r0, #-4]!
 8020c66:	80eb      	strh	r3, [r5, #6]
 8020c68:	f7f0 fe96 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020c6c:	b002      	add	sp, #8
 8020c6e:	bd70      	pop	{r4, r5, r6, pc}

08020c70 <_DrawBitmap>:
 8020c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c74:	4ca9      	ldr	r4, [pc, #676]	; (8020f1c <_DrawBitmap+0x2ac>)
 8020c76:	b093      	sub	sp, #76	; 0x4c
 8020c78:	6825      	ldr	r5, [r4, #0]
 8020c7a:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8020c7e:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8020c80:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020c82:	b916      	cbnz	r6, 8020c8a <_DrawBitmap+0x1a>
 8020c84:	b013      	add	sp, #76	; 0x4c
 8020c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c8a:	4607      	mov	r7, r0
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	9208      	str	r2, [sp, #32]
 8020c90:	460c      	mov	r4, r1
 8020c92:	9303      	str	r3, [sp, #12]
 8020c94:	f7f0 fe6c 	bl	8011970 <GUI_ALLOC_LockH>
 8020c98:	6942      	ldr	r2, [r0, #20]
 8020c9a:	900f      	str	r0, [sp, #60]	; 0x3c
 8020c9c:	2a00      	cmp	r2, #0
 8020c9e:	f040 80d6 	bne.w	8020e4e <_DrawBitmap+0x1de>
 8020ca2:	4603      	mov	r3, r0
 8020ca4:	4610      	mov	r0, r2
 8020ca6:	68db      	ldr	r3, [r3, #12]
 8020ca8:	9010      	str	r0, [sp, #64]	; 0x40
 8020caa:	a80f      	add	r0, sp, #60	; 0x3c
 8020cac:	9304      	str	r3, [sp, #16]
 8020cae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cb0:	18e3      	adds	r3, r4, r3
 8020cb2:	9305      	str	r3, [sp, #20]
 8020cb4:	f7f0 fe70 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020cb8:	4b98      	ldr	r3, [pc, #608]	; (8020f1c <_DrawBitmap+0x2ac>)
 8020cba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020cbc:	681b      	ldr	r3, [r3, #0]
 8020cbe:	b120      	cbz	r0, 8020cca <_DrawBitmap+0x5a>
 8020cc0:	7c1a      	ldrb	r2, [r3, #16]
 8020cc2:	4c96      	ldr	r4, [pc, #600]	; (8020f1c <_DrawBitmap+0x2ac>)
 8020cc4:	0796      	lsls	r6, r2, #30
 8020cc6:	f140 8099 	bpl.w	8020dfc <_DrawBitmap+0x18c>
 8020cca:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8020ccc:	f7f0 fe50 	bl	8011970 <GUI_ALLOC_LockH>
 8020cd0:	4604      	mov	r4, r0
 8020cd2:	9908      	ldr	r1, [sp, #32]
 8020cd4:	a812      	add	r0, sp, #72	; 0x48
 8020cd6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020cda:	68e3      	ldr	r3, [r4, #12]
 8020cdc:	1a8a      	subs	r2, r1, r2
 8020cde:	9905      	ldr	r1, [sp, #20]
 8020ce0:	f840 4d04 	str.w	r4, [r0, #-4]!
 8020ce4:	fb03 f302 	mul.w	r3, r3, r2
 8020ce8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020cec:	3318      	adds	r3, #24
 8020cee:	1a8a      	subs	r2, r1, r2
 8020cf0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020cf4:	18e3      	adds	r3, r4, r3
 8020cf6:	9302      	str	r3, [sp, #8]
 8020cf8:	f7f0 fe4e 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020cfc:	2d17      	cmp	r5, #23
 8020cfe:	dd4e      	ble.n	8020d9e <_DrawBitmap+0x12e>
 8020d00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	dd41      	ble.n	8020d8a <_DrawBitmap+0x11a>
 8020d06:	9b03      	ldr	r3, [sp, #12]
 8020d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020d0c:	009b      	lsls	r3, r3, #2
 8020d0e:	9707      	str	r7, [sp, #28]
 8020d10:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8020f28 <_DrawBitmap+0x2b8>
 8020d14:	9308      	str	r3, [sp, #32]
 8020d16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020d18:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8020d1a:	4443      	add	r3, r8
 8020d1c:	9306      	str	r3, [sp, #24]
 8020d1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020d20:	b128      	cbz	r0, 8020d2e <_DrawBitmap+0xbe>
 8020d22:	6881      	ldr	r1, [r0, #8]
 8020d24:	4642      	mov	r2, r8
 8020d26:	9b03      	ldr	r3, [sp, #12]
 8020d28:	684c      	ldr	r4, [r1, #4]
 8020d2a:	9905      	ldr	r1, [sp, #20]
 8020d2c:	47a0      	blx	r4
 8020d2e:	9b07      	ldr	r3, [sp, #28]
 8020d30:	691b      	ldr	r3, [r3, #16]
 8020d32:	68da      	ldr	r2, [r3, #12]
 8020d34:	2a00      	cmp	r2, #0
 8020d36:	f040 8083 	bne.w	8020e40 <_DrawBitmap+0x1d0>
 8020d3a:	685b      	ldr	r3, [r3, #4]
 8020d3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020d40:	4798      	blx	r3
 8020d42:	463e      	mov	r6, r7
 8020d44:	f8dd a008 	ldr.w	sl, [sp, #8]
 8020d48:	0e04      	lsrs	r4, r0, #24
 8020d4a:	9d03      	ldr	r5, [sp, #12]
 8020d4c:	971f      	str	r7, [sp, #124]	; 0x7c
 8020d4e:	4633      	mov	r3, r6
 8020d50:	2700      	movs	r7, #0
 8020d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8020d56:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 8020d5a:	d058      	beq.n	8020e0e <_DrawBitmap+0x19e>
 8020d5c:	2f00      	cmp	r7, #0
 8020d5e:	d159      	bne.n	8020e14 <_DrawBitmap+0x1a4>
 8020d60:	6830      	ldr	r0, [r6, #0]
 8020d62:	0e02      	lsrs	r2, r0, #24
 8020d64:	d164      	bne.n	8020e30 <_DrawBitmap+0x1c0>
 8020d66:	3d01      	subs	r5, #1
 8020d68:	f10a 0a04 	add.w	sl, sl, #4
 8020d6c:	3604      	adds	r6, #4
 8020d6e:	2d00      	cmp	r5, #0
 8020d70:	d1ed      	bne.n	8020d4e <_DrawBitmap+0xde>
 8020d72:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8020d74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020d76:	f108 0801 	add.w	r8, r8, #1
 8020d7a:	9a04      	ldr	r2, [sp, #16]
 8020d7c:	441f      	add	r7, r3
 8020d7e:	9b02      	ldr	r3, [sp, #8]
 8020d80:	4413      	add	r3, r2
 8020d82:	9302      	str	r3, [sp, #8]
 8020d84:	9b06      	ldr	r3, [sp, #24]
 8020d86:	4598      	cmp	r8, r3
 8020d88:	d1c9      	bne.n	8020d1e <_DrawBitmap+0xae>
 8020d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	f43f af79 	beq.w	8020c84 <_DrawBitmap+0x14>
 8020d92:	a810      	add	r0, sp, #64	; 0x40
 8020d94:	f7f0 fe00 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020d98:	b013      	add	sp, #76	; 0x4c
 8020d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d9e:	2d10      	cmp	r5, #16
 8020da0:	d05a      	beq.n	8020e58 <_DrawBitmap+0x1e8>
 8020da2:	2d08      	cmp	r5, #8
 8020da4:	f000 80c2 	beq.w	8020f2c <_DrawBitmap+0x2bc>
 8020da8:	4b5d      	ldr	r3, [pc, #372]	; (8020f20 <_DrawBitmap+0x2b0>)
 8020daa:	f1ba 0f00 	cmp.w	sl, #0
 8020dae:	bf08      	it	eq
 8020db0:	469a      	moveq	sl, r3
 8020db2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	f340 80a9 	ble.w	8020f0c <_DrawBitmap+0x29c>
 8020dba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020dbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020dbe:	009b      	lsls	r3, r3, #2
 8020dc0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8020dc2:	0052      	lsls	r2, r2, #1
 8020dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	920c      	str	r2, [sp, #48]	; 0x30
 8020dca:	9a02      	ldr	r2, [sp, #8]
 8020dcc:	2d02      	cmp	r5, #2
 8020dce:	f000 8339 	beq.w	8021444 <_DrawBitmap+0x7d4>
 8020dd2:	2d04      	cmp	r5, #4
 8020dd4:	f000 81f0 	beq.w	80211b8 <_DrawBitmap+0x548>
 8020dd8:	2d01      	cmp	r5, #1
 8020dda:	f000 812c 	beq.w	8021036 <_DrawBitmap+0x3c6>
 8020dde:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020de0:	3301      	adds	r3, #1
 8020de2:	4401      	add	r1, r0
 8020de4:	9804      	ldr	r0, [sp, #16]
 8020de6:	4402      	add	r2, r0
 8020de8:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020dea:	4298      	cmp	r0, r3
 8020dec:	dcee      	bgt.n	8020dcc <_DrawBitmap+0x15c>
 8020dee:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020df2:	46de      	mov	lr, fp
 8020df4:	f1be 0f00 	cmp.w	lr, #0
 8020df8:	d1cb      	bne.n	8020d92 <_DrawBitmap+0x122>
 8020dfa:	e743      	b.n	8020c84 <_DrawBitmap+0x14>
 8020dfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020dfe:	9a08      	ldr	r2, [sp, #32]
 8020e00:	9300      	str	r3, [sp, #0]
 8020e02:	9905      	ldr	r1, [sp, #20]
 8020e04:	9b03      	ldr	r3, [sp, #12]
 8020e06:	f7fa f853 	bl	801aeb0 <GUI_USAGE_AddRect>
 8020e0a:	6823      	ldr	r3, [r4, #0]
 8020e0c:	e75d      	b.n	8020cca <_DrawBitmap+0x5a>
 8020e0e:	3701      	adds	r7, #1
 8020e10:	42af      	cmp	r7, r5
 8020e12:	d19e      	bne.n	8020d52 <_DrawBitmap+0xe2>
 8020e14:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8020e18:	1bed      	subs	r5, r5, r7
 8020e1a:	4631      	mov	r1, r6
 8020e1c:	4650      	mov	r0, sl
 8020e1e:	f8d9 3000 	ldr.w	r3, [r9]
 8020e22:	465a      	mov	r2, fp
 8020e24:	445e      	add	r6, fp
 8020e26:	4798      	blx	r3
 8020e28:	44da      	add	sl, fp
 8020e2a:	2d00      	cmp	r5, #0
 8020e2c:	d18f      	bne.n	8020d4e <_DrawBitmap+0xde>
 8020e2e:	e7a0      	b.n	8020d72 <_DrawBitmap+0x102>
 8020e30:	4b3c      	ldr	r3, [pc, #240]	; (8020f24 <_DrawBitmap+0x2b4>)
 8020e32:	f8da 1000 	ldr.w	r1, [sl]
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	4798      	blx	r3
 8020e3a:	f8ca 0000 	str.w	r0, [sl]
 8020e3e:	e792      	b.n	8020d66 <_DrawBitmap+0xf6>
 8020e40:	f8d9 3000 	ldr.w	r3, [r9]
 8020e44:	4639      	mov	r1, r7
 8020e46:	9a08      	ldr	r2, [sp, #32]
 8020e48:	9802      	ldr	r0, [sp, #8]
 8020e4a:	4798      	blx	r3
 8020e4c:	e792      	b.n	8020d74 <_DrawBitmap+0x104>
 8020e4e:	4610      	mov	r0, r2
 8020e50:	f7f0 fd8e 	bl	8011970 <GUI_ALLOC_LockH>
 8020e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020e56:	e726      	b.n	8020ca6 <_DrawBitmap+0x36>
 8020e58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	dd95      	ble.n	8020d8a <_DrawBitmap+0x11a>
 8020e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020e60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020e64:	f1a3 0b02 	sub.w	fp, r3, #2
 8020e68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020e6a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020e6c:	4453      	add	r3, sl
 8020e6e:	9306      	str	r3, [sp, #24]
 8020e70:	b356      	cbz	r6, 8020ec8 <_DrawBitmap+0x258>
 8020e72:	68b0      	ldr	r0, [r6, #8]
 8020e74:	4652      	mov	r2, sl
 8020e76:	9d03      	ldr	r5, [sp, #12]
 8020e78:	46d9      	mov	r9, fp
 8020e7a:	6844      	ldr	r4, [r0, #4]
 8020e7c:	4630      	mov	r0, r6
 8020e7e:	462b      	mov	r3, r5
 8020e80:	9905      	ldr	r1, [sp, #20]
 8020e82:	47a0      	blx	r4
 8020e84:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020e88:	9c05      	ldr	r4, [sp, #20]
 8020e8a:	693b      	ldr	r3, [r7, #16]
 8020e8c:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8020e90:	685b      	ldr	r3, [r3, #4]
 8020e92:	4798      	blx	r3
 8020e94:	68b3      	ldr	r3, [r6, #8]
 8020e96:	4621      	mov	r1, r4
 8020e98:	f848 0b04 	str.w	r0, [r8], #4
 8020e9c:	4652      	mov	r2, sl
 8020e9e:	681b      	ldr	r3, [r3, #0]
 8020ea0:	4630      	mov	r0, r6
 8020ea2:	3401      	adds	r4, #1
 8020ea4:	4798      	blx	r3
 8020ea6:	3d01      	subs	r5, #1
 8020ea8:	d1ef      	bne.n	8020e8a <_DrawBitmap+0x21a>
 8020eaa:	9b02      	ldr	r3, [sp, #8]
 8020eac:	f10a 0a01 	add.w	sl, sl, #1
 8020eb0:	9a04      	ldr	r2, [sp, #16]
 8020eb2:	4413      	add	r3, r2
 8020eb4:	9302      	str	r3, [sp, #8]
 8020eb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020eb8:	449b      	add	fp, r3
 8020eba:	9b06      	ldr	r3, [sp, #24]
 8020ebc:	459a      	cmp	sl, r3
 8020ebe:	f43f af64 	beq.w	8020d8a <_DrawBitmap+0x11a>
 8020ec2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8020ec4:	2e00      	cmp	r6, #0
 8020ec6:	d1d4      	bne.n	8020e72 <_DrawBitmap+0x202>
 8020ec8:	465e      	mov	r6, fp
 8020eca:	9d02      	ldr	r5, [sp, #8]
 8020ecc:	9c03      	ldr	r4, [sp, #12]
 8020ece:	693b      	ldr	r3, [r7, #16]
 8020ed0:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8020ed4:	685b      	ldr	r3, [r3, #4]
 8020ed6:	4798      	blx	r3
 8020ed8:	3c01      	subs	r4, #1
 8020eda:	f845 0b04 	str.w	r0, [r5], #4
 8020ede:	d1f6      	bne.n	8020ece <_DrawBitmap+0x25e>
 8020ee0:	e7e3      	b.n	8020eaa <_DrawBitmap+0x23a>
 8020ee2:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8020ee6:	9b06      	ldr	r3, [sp, #24]
 8020ee8:	a80f      	add	r0, sp, #60	; 0x3c
 8020eea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020eec:	3301      	adds	r3, #1
 8020eee:	461c      	mov	r4, r3
 8020ef0:	9306      	str	r3, [sp, #24]
 8020ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020ef4:	4413      	add	r3, r2
 8020ef6:	9a04      	ldr	r2, [sp, #16]
 8020ef8:	931f      	str	r3, [sp, #124]	; 0x7c
 8020efa:	9b02      	ldr	r3, [sp, #8]
 8020efc:	4413      	add	r3, r2
 8020efe:	9302      	str	r3, [sp, #8]
 8020f00:	f7f0 fd4a 	bl	8011998 <GUI_ALLOC_UnlockH>
 8020f04:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8020f06:	4294      	cmp	r4, r2
 8020f08:	f2c0 809e 	blt.w	8021048 <_DrawBitmap+0x3d8>
 8020f0c:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8020f10:	f1be 0f00 	cmp.w	lr, #0
 8020f14:	f47f af3d 	bne.w	8020d92 <_DrawBitmap+0x122>
 8020f18:	e6b4      	b.n	8020c84 <_DrawBitmap+0x14>
 8020f1a:	bf00      	nop
 8020f1c:	20000018 	.word	0x20000018
 8020f20:	0802a96c 	.word	0x0802a96c
 8020f24:	20000044 	.word	0x20000044
 8020f28:	2000004c 	.word	0x2000004c
 8020f2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	f340 8369 	ble.w	8021606 <_DrawBitmap+0x996>
 8020f34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020f36:	9a03      	ldr	r2, [sp, #12]
 8020f38:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8020f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020f40:	189c      	adds	r4, r3, r2
 8020f42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020f44:	4658      	mov	r0, fp
 8020f46:	465d      	mov	r5, fp
 8020f48:	444b      	add	r3, r9
 8020f4a:	9306      	str	r3, [sp, #24]
 8020f4c:	4b98      	ldr	r3, [pc, #608]	; (80211b0 <_DrawBitmap+0x540>)
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	7c1b      	ldrb	r3, [r3, #16]
 8020f52:	f1ba 0f00 	cmp.w	sl, #0
 8020f56:	d03f      	beq.n	8020fd8 <_DrawBitmap+0x368>
 8020f58:	f013 0303 	ands.w	r3, r3, #3
 8020f5c:	d031      	beq.n	8020fc2 <_DrawBitmap+0x352>
 8020f5e:	2b02      	cmp	r3, #2
 8020f60:	d11c      	bne.n	8020f9c <_DrawBitmap+0x32c>
 8020f62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020f64:	2d00      	cmp	r5, #0
 8020f66:	d05a      	beq.n	802101e <_DrawBitmap+0x3ae>
 8020f68:	f103 3bff 	add.w	fp, r3, #4294967295
 8020f6c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8020f70:	9f03      	ldr	r7, [sp, #12]
 8020f72:	9e05      	ldr	r6, [sp, #20]
 8020f74:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8020f78:	4631      	mov	r1, r6
 8020f7a:	464a      	mov	r2, r9
 8020f7c:	3601      	adds	r6, #1
 8020f7e:	4628      	mov	r0, r5
 8020f80:	b133      	cbz	r3, 8020f90 <_DrawBitmap+0x320>
 8020f82:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8020f86:	f8c8 3000 	str.w	r3, [r8]
 8020f8a:	68ab      	ldr	r3, [r5, #8]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	4798      	blx	r3
 8020f90:	3f01      	subs	r7, #1
 8020f92:	f108 0804 	add.w	r8, r8, #4
 8020f96:	d1ed      	bne.n	8020f74 <_DrawBitmap+0x304>
 8020f98:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020f9a:	4628      	mov	r0, r5
 8020f9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020f9e:	f109 0901 	add.w	r9, r9, #1
 8020fa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020fa4:	4413      	add	r3, r2
 8020fa6:	9a04      	ldr	r2, [sp, #16]
 8020fa8:	931f      	str	r3, [sp, #124]	; 0x7c
 8020faa:	9b02      	ldr	r3, [sp, #8]
 8020fac:	4413      	add	r3, r2
 8020fae:	9302      	str	r3, [sp, #8]
 8020fb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020fb2:	441c      	add	r4, r3
 8020fb4:	9b06      	ldr	r3, [sp, #24]
 8020fb6:	454b      	cmp	r3, r9
 8020fb8:	d1c8      	bne.n	8020f4c <_DrawBitmap+0x2dc>
 8020fba:	2800      	cmp	r0, #0
 8020fbc:	f47f aee9 	bne.w	8020d92 <_DrawBitmap+0x122>
 8020fc0:	e660      	b.n	8020c84 <_DrawBitmap+0x14>
 8020fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020fc4:	9a02      	ldr	r2, [sp, #8]
 8020fc6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020fca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020fce:	429c      	cmp	r4, r3
 8020fd0:	f842 1b04 	str.w	r1, [r2], #4
 8020fd4:	d1f7      	bne.n	8020fc6 <_DrawBitmap+0x356>
 8020fd6:	e7e1      	b.n	8020f9c <_DrawBitmap+0x32c>
 8020fd8:	f013 0303 	ands.w	r3, r3, #3
 8020fdc:	f000 830a 	beq.w	80215f4 <_DrawBitmap+0x984>
 8020fe0:	2b02      	cmp	r3, #2
 8020fe2:	d1db      	bne.n	8020f9c <_DrawBitmap+0x32c>
 8020fe4:	2d00      	cmp	r5, #0
 8020fe6:	f000 8314 	beq.w	8021612 <_DrawBitmap+0x9a2>
 8020fea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020fec:	9f02      	ldr	r7, [sp, #8]
 8020fee:	f103 38ff 	add.w	r8, r3, #4294967295
 8020ff2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020ff6:	9e05      	ldr	r6, [sp, #20]
 8020ff8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8020ffc:	4631      	mov	r1, r6
 8020ffe:	464a      	mov	r2, r9
 8021000:	3601      	adds	r6, #1
 8021002:	4628      	mov	r0, r5
 8021004:	b12b      	cbz	r3, 8021012 <_DrawBitmap+0x3a2>
 8021006:	f8d5 e008 	ldr.w	lr, [r5, #8]
 802100a:	603b      	str	r3, [r7, #0]
 802100c:	f8de 3000 	ldr.w	r3, [lr]
 8021010:	4798      	blx	r3
 8021012:	f1bb 0b01 	subs.w	fp, fp, #1
 8021016:	f107 0704 	add.w	r7, r7, #4
 802101a:	d1ed      	bne.n	8020ff8 <_DrawBitmap+0x388>
 802101c:	e7bc      	b.n	8020f98 <_DrawBitmap+0x328>
 802101e:	9a02      	ldr	r2, [sp, #8]
 8021020:	f813 1b01 	ldrb.w	r1, [r3], #1
 8021024:	b111      	cbz	r1, 802102c <_DrawBitmap+0x3bc>
 8021026:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802102a:	6011      	str	r1, [r2, #0]
 802102c:	42a3      	cmp	r3, r4
 802102e:	f102 0204 	add.w	r2, r2, #4
 8021032:	d1f5      	bne.n	8021020 <_DrawBitmap+0x3b0>
 8021034:	e7b1      	b.n	8020f9a <_DrawBitmap+0x32a>
 8021036:	9306      	str	r3, [sp, #24]
 8021038:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802103a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80211b4 <_DrawBitmap+0x544>
 802103e:	f1c3 0308 	rsb	r3, r3, #8
 8021042:	9202      	str	r2, [sp, #8]
 8021044:	911f      	str	r1, [sp, #124]	; 0x7c
 8021046:	930a      	str	r3, [sp, #40]	; 0x28
 8021048:	4b59      	ldr	r3, [pc, #356]	; (80211b0 <_DrawBitmap+0x540>)
 802104a:	681b      	ldr	r3, [r3, #0]
 802104c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802104e:	f7f0 fc8f 	bl	8011970 <GUI_ALLOC_LockH>
 8021052:	4b57      	ldr	r3, [pc, #348]	; (80211b0 <_DrawBitmap+0x540>)
 8021054:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	7812      	ldrb	r2, [r2, #0]
 802105a:	7c1b      	ldrb	r3, [r3, #16]
 802105c:	f819 4002 	ldrb.w	r4, [r9, r2]
 8021060:	f003 0303 	and.w	r3, r3, #3
 8021064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021066:	900f      	str	r0, [sp, #60]	; 0x3c
 8021068:	2b02      	cmp	r3, #2
 802106a:	fa44 f402 	asr.w	r4, r4, r2
 802106e:	d048      	beq.n	8021102 <_DrawBitmap+0x492>
 8021070:	2b03      	cmp	r3, #3
 8021072:	d020      	beq.n	80210b6 <_DrawBitmap+0x446>
 8021074:	2b01      	cmp	r3, #1
 8021076:	d01e      	beq.n	80210b6 <_DrawBitmap+0x446>
 8021078:	980a      	ldr	r0, [sp, #40]	; 0x28
 802107a:	9e02      	ldr	r6, [sp, #8]
 802107c:	9d03      	ldr	r5, [sp, #12]
 802107e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8021080:	42a8      	cmp	r0, r5
 8021082:	4631      	mov	r1, r6
 8021084:	bf28      	it	cs
 8021086:	4628      	movcs	r0, r5
 8021088:	1a2d      	subs	r5, r5, r0
 802108a:	4602      	mov	r2, r0
 802108c:	f004 0301 	and.w	r3, r4, #1
 8021090:	3a01      	subs	r2, #1
 8021092:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8021096:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802109a:	f841 3b04 	str.w	r3, [r1], #4
 802109e:	d1f5      	bne.n	802108c <_DrawBitmap+0x41c>
 80210a0:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80210a4:	2d00      	cmp	r5, #0
 80210a6:	f43f af1e 	beq.w	8020ee6 <_DrawBitmap+0x276>
 80210aa:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80210ae:	2008      	movs	r0, #8
 80210b0:	f819 4003 	ldrb.w	r4, [r9, r3]
 80210b4:	e7e4      	b.n	8021080 <_DrawBitmap+0x410>
 80210b6:	6803      	ldr	r3, [r0, #0]
 80210b8:	691b      	ldr	r3, [r3, #16]
 80210ba:	689b      	ldr	r3, [r3, #8]
 80210bc:	4798      	blx	r3
 80210be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80210c0:	9f02      	ldr	r7, [sp, #8]
 80210c2:	9e03      	ldr	r6, [sp, #12]
 80210c4:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 80210c8:	42b5      	cmp	r5, r6
 80210ca:	463a      	mov	r2, r7
 80210cc:	bf28      	it	cs
 80210ce:	4635      	movcs	r5, r6
 80210d0:	1b76      	subs	r6, r6, r5
 80210d2:	462b      	mov	r3, r5
 80210d4:	f014 0f01 	tst.w	r4, #1
 80210d8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80210dc:	d002      	beq.n	80210e4 <_DrawBitmap+0x474>
 80210de:	6811      	ldr	r1, [r2, #0]
 80210e0:	4041      	eors	r1, r0
 80210e2:	6011      	str	r1, [r2, #0]
 80210e4:	3b01      	subs	r3, #1
 80210e6:	f102 0204 	add.w	r2, r2, #4
 80210ea:	d1f3      	bne.n	80210d4 <_DrawBitmap+0x464>
 80210ec:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 80210f0:	2e00      	cmp	r6, #0
 80210f2:	f43f aef8 	beq.w	8020ee6 <_DrawBitmap+0x276>
 80210f6:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80210fa:	2508      	movs	r5, #8
 80210fc:	f819 4003 	ldrb.w	r4, [r9, r3]
 8021100:	e7e2      	b.n	80210c8 <_DrawBitmap+0x458>
 8021102:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021104:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021108:	9209      	str	r2, [sp, #36]	; 0x24
 802110a:	9908      	ldr	r1, [sp, #32]
 802110c:	9a06      	ldr	r2, [sp, #24]
 802110e:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8021112:	469a      	mov	sl, r3
 8021114:	440a      	add	r2, r1
 8021116:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 802111a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802111c:	9e02      	ldr	r6, [sp, #8]
 802111e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8021122:	9f05      	ldr	r7, [sp, #20]
 8021124:	9207      	str	r2, [sp, #28]
 8021126:	4545      	cmp	r5, r8
 8021128:	bf28      	it	cs
 802112a:	4645      	movcs	r5, r8
 802112c:	ebc5 0808 	rsb	r8, r5, r8
 8021130:	f1bb 0f00 	cmp.w	fp, #0
 8021134:	d029      	beq.n	802118a <_DrawBitmap+0x51a>
 8021136:	b944      	cbnz	r4, 802114a <_DrawBitmap+0x4da>
 8021138:	e023      	b.n	8021182 <_DrawBitmap+0x512>
 802113a:	3d01      	subs	r5, #1
 802113c:	f107 0701 	add.w	r7, r7, #1
 8021140:	f106 0604 	add.w	r6, r6, #4
 8021144:	d011      	beq.n	802116a <_DrawBitmap+0x4fa>
 8021146:	0864      	lsrs	r4, r4, #1
 8021148:	d01b      	beq.n	8021182 <_DrawBitmap+0x512>
 802114a:	07e1      	lsls	r1, r4, #31
 802114c:	d5f5      	bpl.n	802113a <_DrawBitmap+0x4ca>
 802114e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8021152:	4639      	mov	r1, r7
 8021154:	9a07      	ldr	r2, [sp, #28]
 8021156:	4658      	mov	r0, fp
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	3701      	adds	r7, #1
 802115c:	4798      	blx	r3
 802115e:	3d01      	subs	r5, #1
 8021160:	f8c6 a000 	str.w	sl, [r6]
 8021164:	f106 0604 	add.w	r6, r6, #4
 8021168:	d1ed      	bne.n	8021146 <_DrawBitmap+0x4d6>
 802116a:	f1b8 0f00 	cmp.w	r8, #0
 802116e:	f43f aeb8 	beq.w	8020ee2 <_DrawBitmap+0x272>
 8021172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021174:	2508      	movs	r5, #8
 8021176:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802117a:	9209      	str	r2, [sp, #36]	; 0x24
 802117c:	f819 4003 	ldrb.w	r4, [r9, r3]
 8021180:	e7d1      	b.n	8021126 <_DrawBitmap+0x4b6>
 8021182:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8021186:	442f      	add	r7, r5
 8021188:	e7ef      	b.n	802116a <_DrawBitmap+0x4fa>
 802118a:	b174      	cbz	r4, 80211aa <_DrawBitmap+0x53a>
 802118c:	4653      	mov	r3, sl
 802118e:	e001      	b.n	8021194 <_DrawBitmap+0x524>
 8021190:	0864      	lsrs	r4, r4, #1
 8021192:	d009      	beq.n	80211a8 <_DrawBitmap+0x538>
 8021194:	07e2      	lsls	r2, r4, #31
 8021196:	f106 0604 	add.w	r6, r6, #4
 802119a:	bf48      	it	mi
 802119c:	f846 3c04 	strmi.w	r3, [r6, #-4]
 80211a0:	3d01      	subs	r5, #1
 80211a2:	d1f5      	bne.n	8021190 <_DrawBitmap+0x520>
 80211a4:	469a      	mov	sl, r3
 80211a6:	e7e0      	b.n	802116a <_DrawBitmap+0x4fa>
 80211a8:	469a      	mov	sl, r3
 80211aa:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80211ae:	e7dc      	b.n	802116a <_DrawBitmap+0x4fa>
 80211b0:	20000018 	.word	0x20000018
 80211b4:	0802a838 	.word	0x0802a838
 80211b8:	911f      	str	r1, [sp, #124]	; 0x7c
 80211ba:	9920      	ldr	r1, [sp, #128]	; 0x80
 80211bc:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80211c0:	9306      	str	r3, [sp, #24]
 80211c2:	f1c1 0302 	rsb	r3, r1, #2
 80211c6:	46d8      	mov	r8, fp
 80211c8:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 80211cc:	b2d9      	uxtb	r1, r3
 80211ce:	4613      	mov	r3, r2
 80211d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80211d2:	3304      	adds	r3, #4
 80211d4:	46c6      	mov	lr, r8
 80211d6:	4645      	mov	r5, r8
 80211d8:	9307      	str	r3, [sp, #28]
 80211da:	4b99      	ldr	r3, [pc, #612]	; (8021440 <_DrawBitmap+0x7d0>)
 80211dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80211de:	681a      	ldr	r2, [r3, #0]
 80211e0:	9b07      	ldr	r3, [sp, #28]
 80211e2:	7c12      	ldrb	r2, [r2, #16]
 80211e4:	f1a3 0904 	sub.w	r9, r3, #4
 80211e8:	f89b 3000 	ldrb.w	r3, [fp]
 80211ec:	f002 0203 	and.w	r2, r2, #3
 80211f0:	408b      	lsls	r3, r1
 80211f2:	2a01      	cmp	r2, #1
 80211f4:	b2dc      	uxtb	r4, r3
 80211f6:	f000 80d4 	beq.w	80213a2 <_DrawBitmap+0x732>
 80211fa:	f0c0 80a0 	bcc.w	802133e <_DrawBitmap+0x6ce>
 80211fe:	2a02      	cmp	r2, #2
 8021200:	d15c      	bne.n	80212bc <_DrawBitmap+0x64c>
 8021202:	9908      	ldr	r1, [sp, #32]
 8021204:	9a06      	ldr	r2, [sp, #24]
 8021206:	440a      	add	r2, r1
 8021208:	9920      	ldr	r1, [sp, #128]	; 0x80
 802120a:	9209      	str	r2, [sp, #36]	; 0x24
 802120c:	2900      	cmp	r1, #0
 802120e:	f000 8112 	beq.w	8021436 <_DrawBitmap+0x7c6>
 8021212:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8021216:	d00a      	beq.n	802122e <_DrawBitmap+0x5be>
 8021218:	0924      	lsrs	r4, r4, #4
 802121a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802121e:	f8c9 3000 	str.w	r3, [r9]
 8021222:	b125      	cbz	r5, 802122e <_DrawBitmap+0x5be>
 8021224:	68ab      	ldr	r3, [r5, #8]
 8021226:	4628      	mov	r0, r5
 8021228:	9905      	ldr	r1, [sp, #20]
 802122a:	681b      	ldr	r3, [r3, #0]
 802122c:	4798      	blx	r3
 802122e:	9b05      	ldr	r3, [sp, #20]
 8021230:	f10b 0701 	add.w	r7, fp, #1
 8021234:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8021238:	3301      	adds	r3, #1
 802123a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802123e:	9302      	str	r3, [sp, #8]
 8021240:	9b03      	ldr	r3, [sp, #12]
 8021242:	1e5e      	subs	r6, r3, #1
 8021244:	2e01      	cmp	r6, #1
 8021246:	dd58      	ble.n	80212fa <_DrawBitmap+0x68a>
 8021248:	2d00      	cmp	r5, #0
 802124a:	f000 80ce 	beq.w	80213ea <_DrawBitmap+0x77a>
 802124e:	4632      	mov	r2, r6
 8021250:	9b02      	ldr	r3, [sp, #8]
 8021252:	f109 0808 	add.w	r8, r9, #8
 8021256:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 802125a:	960d      	str	r6, [sp, #52]	; 0x34
 802125c:	4691      	mov	r9, r2
 802125e:	461e      	mov	r6, r3
 8021260:	e01d      	b.n	802129e <_DrawBitmap+0x62e>
 8021262:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8021266:	f848 3c08 	str.w	r3, [r8, #-8]
 802126a:	68ab      	ldr	r3, [r5, #8]
 802126c:	681b      	ldr	r3, [r3, #0]
 802126e:	4798      	blx	r3
 8021270:	f014 040f 	ands.w	r4, r4, #15
 8021274:	d009      	beq.n	802128a <_DrawBitmap+0x61a>
 8021276:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802127a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802127c:	f848 3c04 	str.w	r3, [r8, #-4]
 8021280:	68ab      	ldr	r3, [r5, #8]
 8021282:	1c71      	adds	r1, r6, #1
 8021284:	4628      	mov	r0, r5
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	4798      	blx	r3
 802128a:	f1a9 0902 	sub.w	r9, r9, #2
 802128e:	3602      	adds	r6, #2
 8021290:	f108 0808 	add.w	r8, r8, #8
 8021294:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8021298:	f1b9 0f01 	cmp.w	r9, #1
 802129c:	dd1e      	ble.n	80212dc <_DrawBitmap+0x66c>
 802129e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80212a2:	ea4f 1314 	mov.w	r3, r4, lsr #4
 80212a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80212a8:	4631      	mov	r1, r6
 80212aa:	4628      	mov	r0, r5
 80212ac:	d1d9      	bne.n	8021262 <_DrawBitmap+0x5f2>
 80212ae:	2c00      	cmp	r4, #0
 80212b0:	d0eb      	beq.n	802128a <_DrawBitmap+0x61a>
 80212b2:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80212b6:	f848 3c04 	str.w	r3, [r8, #-4]
 80212ba:	e7e1      	b.n	8021280 <_DrawBitmap+0x610>
 80212bc:	9b06      	ldr	r3, [sp, #24]
 80212be:	46a8      	mov	r8, r5
 80212c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80212c2:	3301      	adds	r3, #1
 80212c4:	461a      	mov	r2, r3
 80212c6:	9306      	str	r3, [sp, #24]
 80212c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80212ca:	428a      	cmp	r2, r1
 80212cc:	449b      	add	fp, r3
 80212ce:	9b04      	ldr	r3, [sp, #16]
 80212d0:	444b      	add	r3, r9
 80212d2:	f6ff af7e 	blt.w	80211d2 <_DrawBitmap+0x562>
 80212d6:	46ab      	mov	fp, r5
 80212d8:	46de      	mov	lr, fp
 80212da:	e58b      	b.n	8020df4 <_DrawBitmap+0x184>
 80212dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80212de:	9902      	ldr	r1, [sp, #8]
 80212e0:	3e02      	subs	r6, #2
 80212e2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80212e6:	3102      	adds	r1, #2
 80212e8:	0873      	lsrs	r3, r6, #1
 80212ea:	1c5a      	adds	r2, r3, #1
 80212ec:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80212f0:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 80212f4:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 80212f8:	9102      	str	r1, [sp, #8]
 80212fa:	b166      	cbz	r6, 8021316 <_DrawBitmap+0x6a6>
 80212fc:	0924      	lsrs	r4, r4, #4
 80212fe:	d00a      	beq.n	8021316 <_DrawBitmap+0x6a6>
 8021300:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8021304:	f8c9 3000 	str.w	r3, [r9]
 8021308:	b12d      	cbz	r5, 8021316 <_DrawBitmap+0x6a6>
 802130a:	68ab      	ldr	r3, [r5, #8]
 802130c:	4628      	mov	r0, r5
 802130e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021310:	9902      	ldr	r1, [sp, #8]
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	4798      	blx	r3
 8021316:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021318:	46ae      	mov	lr, r5
 802131a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802131c:	9904      	ldr	r1, [sp, #16]
 802131e:	4493      	add	fp, r2
 8021320:	9a07      	ldr	r2, [sp, #28]
 8021322:	9b06      	ldr	r3, [sp, #24]
 8021324:	440a      	add	r2, r1
 8021326:	3301      	adds	r3, #1
 8021328:	9207      	str	r2, [sp, #28]
 802132a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802132c:	9306      	str	r3, [sp, #24]
 802132e:	4293      	cmp	r3, r2
 8021330:	f6ff af53 	blt.w	80211da <_DrawBitmap+0x56a>
 8021334:	f1be 0f00 	cmp.w	lr, #0
 8021338:	f47f ad2b 	bne.w	8020d92 <_DrawBitmap+0x122>
 802133c:	e4a2      	b.n	8020c84 <_DrawBitmap+0x14>
 802133e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021340:	2b00      	cmp	r3, #0
 8021342:	d04f      	beq.n	80213e4 <_DrawBitmap+0x774>
 8021344:	0924      	lsrs	r4, r4, #4
 8021346:	9b03      	ldr	r3, [sp, #12]
 8021348:	f10b 0201 	add.w	r2, fp, #1
 802134c:	1e59      	subs	r1, r3, #1
 802134e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8021352:	f8c9 3000 	str.w	r3, [r9]
 8021356:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802135a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802135e:	2901      	cmp	r1, #1
 8021360:	dd17      	ble.n	8021392 <_DrawBitmap+0x722>
 8021362:	104f      	asrs	r7, r1, #1
 8021364:	f109 0308 	add.w	r3, r9, #8
 8021368:	f001 0101 	and.w	r1, r1, #1
 802136c:	19d6      	adds	r6, r2, r7
 802136e:	0920      	lsrs	r0, r4, #4
 8021370:	f004 040f 	and.w	r4, r4, #15
 8021374:	3308      	adds	r3, #8
 8021376:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 802137a:	f843 0c10 	str.w	r0, [r3, #-16]
 802137e:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8021382:	f843 0c0c 	str.w	r0, [r3, #-12]
 8021386:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 802138a:	42b2      	cmp	r2, r6
 802138c:	d1ef      	bne.n	802136e <_DrawBitmap+0x6fe>
 802138e:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 8021392:	2900      	cmp	r1, #0
 8021394:	d0c1      	beq.n	802131a <_DrawBitmap+0x6aa>
 8021396:	0924      	lsrs	r4, r4, #4
 8021398:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802139c:	f8c9 3000 	str.w	r3, [r9]
 80213a0:	e7bb      	b.n	802131a <_DrawBitmap+0x6aa>
 80213a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213a4:	4658      	mov	r0, fp
 80213a6:	9903      	ldr	r1, [sp, #12]
 80213a8:	428b      	cmp	r3, r1
 80213aa:	bfc8      	it	gt
 80213ac:	b2cb      	uxtbgt	r3, r1
 80213ae:	1e5a      	subs	r2, r3, #1
 80213b0:	1ac9      	subs	r1, r1, r3
 80213b2:	b2d2      	uxtb	r2, r2
 80213b4:	3201      	adds	r2, #1
 80213b6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80213ba:	0123      	lsls	r3, r4, #4
 80213bc:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80213c0:	b2dc      	uxtb	r4, r3
 80213c2:	d005      	beq.n	80213d0 <_DrawBitmap+0x760>
 80213c4:	f8d9 3000 	ldr.w	r3, [r9]
 80213c8:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80213cc:	f8c9 3000 	str.w	r3, [r9]
 80213d0:	f109 0904 	add.w	r9, r9, #4
 80213d4:	4591      	cmp	r9, r2
 80213d6:	d1f0      	bne.n	80213ba <_DrawBitmap+0x74a>
 80213d8:	2900      	cmp	r1, #0
 80213da:	d09e      	beq.n	802131a <_DrawBitmap+0x6aa>
 80213dc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80213e0:	2302      	movs	r3, #2
 80213e2:	e7e1      	b.n	80213a8 <_DrawBitmap+0x738>
 80213e4:	9903      	ldr	r1, [sp, #12]
 80213e6:	465a      	mov	r2, fp
 80213e8:	e7b9      	b.n	802135e <_DrawBitmap+0x6ee>
 80213ea:	3e02      	subs	r6, #2
 80213ec:	f109 0308 	add.w	r3, r9, #8
 80213f0:	0872      	lsrs	r2, r6, #1
 80213f2:	1c51      	adds	r1, r2, #1
 80213f4:	4694      	mov	ip, r2
 80213f6:	1878      	adds	r0, r7, r1
 80213f8:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80213fc:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 8021400:	d003      	beq.n	802140a <_DrawBitmap+0x79a>
 8021402:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8021406:	f843 2c08 	str.w	r2, [r3, #-8]
 802140a:	f014 040f 	ands.w	r4, r4, #15
 802140e:	d003      	beq.n	8021418 <_DrawBitmap+0x7a8>
 8021410:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8021414:	f843 4c04 	str.w	r4, [r3, #-4]
 8021418:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 802141c:	3308      	adds	r3, #8
 802141e:	42b8      	cmp	r0, r7
 8021420:	d1ea      	bne.n	80213f8 <_DrawBitmap+0x788>
 8021422:	9b02      	ldr	r3, [sp, #8]
 8021424:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 8021428:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 802142c:	3302      	adds	r3, #2
 802142e:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8021432:	9302      	str	r3, [sp, #8]
 8021434:	e761      	b.n	80212fa <_DrawBitmap+0x68a>
 8021436:	9b05      	ldr	r3, [sp, #20]
 8021438:	465f      	mov	r7, fp
 802143a:	9e03      	ldr	r6, [sp, #12]
 802143c:	9302      	str	r3, [sp, #8]
 802143e:	e701      	b.n	8021244 <_DrawBitmap+0x5d4>
 8021440:	20000018 	.word	0x20000018
 8021444:	9306      	str	r3, [sp, #24]
 8021446:	46d0      	mov	r8, sl
 8021448:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802144a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 802144e:	f1c3 0304 	rsb	r3, r3, #4
 8021452:	9202      	str	r2, [sp, #8]
 8021454:	911f      	str	r1, [sp, #124]	; 0x7c
 8021456:	b2db      	uxtb	r3, r3
 8021458:	930b      	str	r3, [sp, #44]	; 0x2c
 802145a:	46de      	mov	lr, fp
 802145c:	465f      	mov	r7, fp
 802145e:	4b72      	ldr	r3, [pc, #456]	; (8021628 <_DrawBitmap+0x9b8>)
 8021460:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	7814      	ldrb	r4, [r2, #0]
 8021466:	7c1b      	ldrb	r3, [r3, #16]
 8021468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802146a:	f003 0303 	and.w	r3, r3, #3
 802146e:	4094      	lsls	r4, r2
 8021470:	2b01      	cmp	r3, #1
 8021472:	b2e4      	uxtb	r4, r4
 8021474:	f000 809f 	beq.w	80215b6 <_DrawBitmap+0x946>
 8021478:	d37d      	bcc.n	8021576 <_DrawBitmap+0x906>
 802147a:	2b02      	cmp	r3, #2
 802147c:	d169      	bne.n	8021552 <_DrawBitmap+0x8e2>
 802147e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021480:	9906      	ldr	r1, [sp, #24]
 8021482:	9209      	str	r2, [sp, #36]	; 0x24
 8021484:	9a05      	ldr	r2, [sp, #20]
 8021486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021488:	9207      	str	r2, [sp, #28]
 802148a:	9a08      	ldr	r2, [sp, #32]
 802148c:	9d02      	ldr	r5, [sp, #8]
 802148e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8021492:	eb02 0b01 	add.w	fp, r2, r1
 8021496:	4553      	cmp	r3, sl
 8021498:	bfc8      	it	gt
 802149a:	fa5f f38a 	uxtbgt.w	r3, sl
 802149e:	ebc3 0a0a 	rsb	sl, r3, sl
 80214a2:	3b01      	subs	r3, #1
 80214a4:	b34f      	cbz	r7, 80214fa <_DrawBitmap+0x88a>
 80214a6:	b2db      	uxtb	r3, r3
 80214a8:	9e07      	ldr	r6, [sp, #28]
 80214aa:	f103 0901 	add.w	r9, r3, #1
 80214ae:	930a      	str	r3, [sp, #40]	; 0x28
 80214b0:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 80214b4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80214b8:	4631      	mov	r1, r6
 80214ba:	ea4f 1394 	mov.w	r3, r4, lsr #6
 80214be:	f106 0601 	add.w	r6, r6, #1
 80214c2:	465a      	mov	r2, fp
 80214c4:	4638      	mov	r0, r7
 80214c6:	d005      	beq.n	80214d4 <_DrawBitmap+0x864>
 80214c8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80214cc:	602b      	str	r3, [r5, #0]
 80214ce:	68bb      	ldr	r3, [r7, #8]
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	4798      	blx	r3
 80214d4:	3504      	adds	r5, #4
 80214d6:	00a4      	lsls	r4, r4, #2
 80214d8:	454d      	cmp	r5, r9
 80214da:	b2e4      	uxtb	r4, r4
 80214dc:	d1ea      	bne.n	80214b4 <_DrawBitmap+0x844>
 80214de:	9b07      	ldr	r3, [sp, #28]
 80214e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214e2:	3301      	adds	r3, #1
 80214e4:	441a      	add	r2, r3
 80214e6:	9207      	str	r2, [sp, #28]
 80214e8:	f1ba 0f00 	cmp.w	sl, #0
 80214ec:	d01b      	beq.n	8021526 <_DrawBitmap+0x8b6>
 80214ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214f0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80214f4:	9309      	str	r3, [sp, #36]	; 0x24
 80214f6:	2304      	movs	r3, #4
 80214f8:	e7cd      	b.n	8021496 <_DrawBitmap+0x826>
 80214fa:	b2da      	uxtb	r2, r3
 80214fc:	1c50      	adds	r0, r2, #1
 80214fe:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8021502:	00a3      	lsls	r3, r4, #2
 8021504:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8021508:	ea4f 1194 	mov.w	r1, r4, lsr #6
 802150c:	b2dc      	uxtb	r4, r3
 802150e:	d002      	beq.n	8021516 <_DrawBitmap+0x8a6>
 8021510:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8021514:	602b      	str	r3, [r5, #0]
 8021516:	3504      	adds	r5, #4
 8021518:	42a8      	cmp	r0, r5
 802151a:	d1f2      	bne.n	8021502 <_DrawBitmap+0x892>
 802151c:	9b07      	ldr	r3, [sp, #28]
 802151e:	3301      	adds	r3, #1
 8021520:	18d3      	adds	r3, r2, r3
 8021522:	9307      	str	r3, [sp, #28]
 8021524:	e7e0      	b.n	80214e8 <_DrawBitmap+0x878>
 8021526:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021528:	46be      	mov	lr, r7
 802152a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802152c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802152e:	9b06      	ldr	r3, [sp, #24]
 8021530:	440a      	add	r2, r1
 8021532:	9904      	ldr	r1, [sp, #16]
 8021534:	3301      	adds	r3, #1
 8021536:	921f      	str	r2, [sp, #124]	; 0x7c
 8021538:	9a02      	ldr	r2, [sp, #8]
 802153a:	9306      	str	r3, [sp, #24]
 802153c:	440a      	add	r2, r1
 802153e:	9202      	str	r2, [sp, #8]
 8021540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8021542:	429a      	cmp	r2, r3
 8021544:	dc8b      	bgt.n	802145e <_DrawBitmap+0x7ee>
 8021546:	f1be 0f00 	cmp.w	lr, #0
 802154a:	f47f ac22 	bne.w	8020d92 <_DrawBitmap+0x122>
 802154e:	f7ff bb99 	b.w	8020c84 <_DrawBitmap+0x14>
 8021552:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021554:	46bb      	mov	fp, r7
 8021556:	991e      	ldr	r1, [sp, #120]	; 0x78
 8021558:	9b06      	ldr	r3, [sp, #24]
 802155a:	440a      	add	r2, r1
 802155c:	9904      	ldr	r1, [sp, #16]
 802155e:	3301      	adds	r3, #1
 8021560:	921f      	str	r2, [sp, #124]	; 0x7c
 8021562:	9a02      	ldr	r2, [sp, #8]
 8021564:	9306      	str	r3, [sp, #24]
 8021566:	440a      	add	r2, r1
 8021568:	9202      	str	r2, [sp, #8]
 802156a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802156c:	429a      	cmp	r2, r3
 802156e:	f73f af74 	bgt.w	802145a <_DrawBitmap+0x7ea>
 8021572:	46de      	mov	lr, fp
 8021574:	e43e      	b.n	8020df4 <_DrawBitmap+0x184>
 8021576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021578:	9e02      	ldr	r6, [sp, #8]
 802157a:	9d03      	ldr	r5, [sp, #12]
 802157c:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 8021580:	42ab      	cmp	r3, r5
 8021582:	bfc8      	it	gt
 8021584:	b2eb      	uxtbgt	r3, r5
 8021586:	1e58      	subs	r0, r3, #1
 8021588:	1aed      	subs	r5, r5, r3
 802158a:	1f33      	subs	r3, r6, #4
 802158c:	b2c0      	uxtb	r0, r0
 802158e:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 8021592:	09a2      	lsrs	r2, r4, #6
 8021594:	00a4      	lsls	r4, r4, #2
 8021596:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 802159a:	b2e4      	uxtb	r4, r4
 802159c:	f843 2f04 	str.w	r2, [r3, #4]!
 80215a0:	428b      	cmp	r3, r1
 80215a2:	d1f6      	bne.n	8021592 <_DrawBitmap+0x922>
 80215a4:	3001      	adds	r0, #1
 80215a6:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80215aa:	2d00      	cmp	r5, #0
 80215ac:	d0bd      	beq.n	802152a <_DrawBitmap+0x8ba>
 80215ae:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80215b2:	2304      	movs	r3, #4
 80215b4:	e7e4      	b.n	8021580 <_DrawBitmap+0x910>
 80215b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80215b8:	9b02      	ldr	r3, [sp, #8]
 80215ba:	9803      	ldr	r0, [sp, #12]
 80215bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80215be:	4282      	cmp	r2, r0
 80215c0:	bfc8      	it	gt
 80215c2:	b2c2      	uxtbgt	r2, r0
 80215c4:	1e51      	subs	r1, r2, #1
 80215c6:	1a80      	subs	r0, r0, r2
 80215c8:	b2c9      	uxtb	r1, r1
 80215ca:	3101      	adds	r1, #1
 80215cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80215d0:	00a2      	lsls	r2, r4, #2
 80215d2:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80215d6:	b2d4      	uxtb	r4, r2
 80215d8:	d003      	beq.n	80215e2 <_DrawBitmap+0x972>
 80215da:	681a      	ldr	r2, [r3, #0]
 80215dc:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 80215e0:	601a      	str	r2, [r3, #0]
 80215e2:	3304      	adds	r3, #4
 80215e4:	428b      	cmp	r3, r1
 80215e6:	d1f3      	bne.n	80215d0 <_DrawBitmap+0x960>
 80215e8:	2800      	cmp	r0, #0
 80215ea:	d09e      	beq.n	802152a <_DrawBitmap+0x8ba>
 80215ec:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80215f0:	2204      	movs	r2, #4
 80215f2:	e7e4      	b.n	80215be <_DrawBitmap+0x94e>
 80215f4:	4b0d      	ldr	r3, [pc, #52]	; (802162c <_DrawBitmap+0x9bc>)
 80215f6:	9a03      	ldr	r2, [sp, #12]
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80215fc:	9802      	ldr	r0, [sp, #8]
 80215fe:	4798      	blx	r3
 8021600:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021602:	4628      	mov	r0, r5
 8021604:	e4ca      	b.n	8020f9c <_DrawBitmap+0x32c>
 8021606:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021608:	2800      	cmp	r0, #0
 802160a:	f47f abc2 	bne.w	8020d92 <_DrawBitmap+0x122>
 802160e:	f7ff bb39 	b.w	8020c84 <_DrawBitmap+0x14>
 8021612:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021614:	9b02      	ldr	r3, [sp, #8]
 8021616:	f812 1b01 	ldrb.w	r1, [r2], #1
 802161a:	b101      	cbz	r1, 802161e <_DrawBitmap+0x9ae>
 802161c:	6019      	str	r1, [r3, #0]
 802161e:	42a2      	cmp	r2, r4
 8021620:	f103 0304 	add.w	r3, r3, #4
 8021624:	d1f7      	bne.n	8021616 <_DrawBitmap+0x9a6>
 8021626:	e4b8      	b.n	8020f9a <_DrawBitmap+0x32a>
 8021628:	20000018 	.word	0x20000018
 802162c:	2000004c 	.word	0x2000004c

08021630 <_GetPixelIndex>:
 8021630:	4b0e      	ldr	r3, [pc, #56]	; (802166c <_GetPixelIndex+0x3c>)
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	b570      	push	{r4, r5, r6, lr}
 8021636:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8021638:	b082      	sub	sp, #8
 802163a:	460e      	mov	r6, r1
 802163c:	4614      	mov	r4, r2
 802163e:	f7f0 f997 	bl	8011970 <GUI_ALLOC_LockH>
 8021642:	4605      	mov	r5, r0
 8021644:	a802      	add	r0, sp, #8
 8021646:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 802164a:	68eb      	ldr	r3, [r5, #12]
 802164c:	1aa2      	subs	r2, r4, r2
 802164e:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8021652:	f840 5d04 	str.w	r5, [r0, #-4]!
 8021656:	fb03 f302 	mul.w	r3, r3, r2
 802165a:	1b34      	subs	r4, r6, r4
 802165c:	3318      	adds	r3, #24
 802165e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021662:	f7f0 f999 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021666:	5928      	ldr	r0, [r5, r4]
 8021668:	b002      	add	sp, #8
 802166a:	bd70      	pop	{r4, r5, r6, pc}
 802166c:	20000018 	.word	0x20000018

08021670 <_SetPixelIndex>:
 8021670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021674:	4c1b      	ldr	r4, [pc, #108]	; (80216e4 <_SetPixelIndex+0x74>)
 8021676:	4699      	mov	r9, r3
 8021678:	b083      	sub	sp, #12
 802167a:	460f      	mov	r7, r1
 802167c:	6823      	ldr	r3, [r4, #0]
 802167e:	4690      	mov	r8, r2
 8021680:	ae02      	add	r6, sp, #8
 8021682:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8021684:	f7f0 f974 	bl	8011970 <GUI_ALLOC_LockH>
 8021688:	6823      	ldr	r3, [r4, #0]
 802168a:	9000      	str	r0, [sp, #0]
 802168c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802168e:	f7f0 f96f 	bl	8011970 <GUI_ALLOC_LockH>
 8021692:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8021696:	68c1      	ldr	r1, [r0, #12]
 8021698:	4605      	mov	r5, r0
 802169a:	ebc2 0208 	rsb	r2, r2, r8
 802169e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80216a2:	f846 0d04 	str.w	r0, [r6, #-4]!
 80216a6:	4630      	mov	r0, r6
 80216a8:	fb01 f202 	mul.w	r2, r1, r2
 80216ac:	1b3c      	subs	r4, r7, r4
 80216ae:	3218      	adds	r2, #24
 80216b0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80216b4:	f7f0 f970 	bl	8011998 <GUI_ALLOC_UnlockH>
 80216b8:	9b00      	ldr	r3, [sp, #0]
 80216ba:	f845 9004 	str.w	r9, [r5, r4]
 80216be:	6958      	ldr	r0, [r3, #20]
 80216c0:	b150      	cbz	r0, 80216d8 <_SetPixelIndex+0x68>
 80216c2:	f7f0 f955 	bl	8011970 <GUI_ALLOC_LockH>
 80216c6:	9001      	str	r0, [sp, #4]
 80216c8:	6883      	ldr	r3, [r0, #8]
 80216ca:	4642      	mov	r2, r8
 80216cc:	4639      	mov	r1, r7
 80216ce:	681b      	ldr	r3, [r3, #0]
 80216d0:	4798      	blx	r3
 80216d2:	4630      	mov	r0, r6
 80216d4:	f7f0 f960 	bl	8011998 <GUI_ALLOC_UnlockH>
 80216d8:	4668      	mov	r0, sp
 80216da:	f7f0 f95d 	bl	8011998 <GUI_ALLOC_UnlockH>
 80216de:	b003      	add	sp, #12
 80216e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80216e4:	20000018 	.word	0x20000018

080216e8 <_XorPixel>:
 80216e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216ec:	4c1e      	ldr	r4, [pc, #120]	; (8021768 <_XorPixel+0x80>)
 80216ee:	b082      	sub	sp, #8
 80216f0:	460f      	mov	r7, r1
 80216f2:	4690      	mov	r8, r2
 80216f4:	6823      	ldr	r3, [r4, #0]
 80216f6:	ae02      	add	r6, sp, #8
 80216f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80216fa:	f7f0 f939 	bl	8011970 <GUI_ALLOC_LockH>
 80216fe:	6823      	ldr	r3, [r4, #0]
 8021700:	9000      	str	r0, [sp, #0]
 8021702:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8021704:	f7f0 f934 	bl	8011970 <GUI_ALLOC_LockH>
 8021708:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802170c:	68c2      	ldr	r2, [r0, #12]
 802170e:	4605      	mov	r5, r0
 8021710:	ebc3 0308 	rsb	r3, r3, r8
 8021714:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8021718:	f846 0d04 	str.w	r0, [r6, #-4]!
 802171c:	4630      	mov	r0, r6
 802171e:	fb02 f303 	mul.w	r3, r2, r3
 8021722:	1b3c      	subs	r4, r7, r4
 8021724:	3318      	adds	r3, #24
 8021726:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802172a:	f7f0 f935 	bl	8011998 <GUI_ALLOC_UnlockH>
 802172e:	9b00      	ldr	r3, [sp, #0]
 8021730:	681b      	ldr	r3, [r3, #0]
 8021732:	691b      	ldr	r3, [r3, #16]
 8021734:	689b      	ldr	r3, [r3, #8]
 8021736:	4798      	blx	r3
 8021738:	592b      	ldr	r3, [r5, r4]
 802173a:	9a00      	ldr	r2, [sp, #0]
 802173c:	4058      	eors	r0, r3
 802173e:	5128      	str	r0, [r5, r4]
 8021740:	6950      	ldr	r0, [r2, #20]
 8021742:	b150      	cbz	r0, 802175a <_XorPixel+0x72>
 8021744:	f7f0 f914 	bl	8011970 <GUI_ALLOC_LockH>
 8021748:	9001      	str	r0, [sp, #4]
 802174a:	6883      	ldr	r3, [r0, #8]
 802174c:	4642      	mov	r2, r8
 802174e:	4639      	mov	r1, r7
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	4798      	blx	r3
 8021754:	4630      	mov	r0, r6
 8021756:	f7f0 f91f 	bl	8011998 <GUI_ALLOC_UnlockH>
 802175a:	4668      	mov	r0, sp
 802175c:	f7f0 f91c 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021760:	b002      	add	sp, #8
 8021762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021766:	bf00      	nop
 8021768:	20000018 	.word	0x20000018

0802176c <_FillRect>:
 802176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021770:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8021854 <_FillRect+0xe8>
 8021774:	461f      	mov	r7, r3
 8021776:	b087      	sub	sp, #28
 8021778:	460c      	mov	r4, r1
 802177a:	f8d8 3000 	ldr.w	r3, [r8]
 802177e:	4616      	mov	r6, r2
 8021780:	9103      	str	r1, [sp, #12]
 8021782:	f10d 0b18 	add.w	fp, sp, #24
 8021786:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8021788:	1b3f      	subs	r7, r7, r4
 802178a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 802178e:	f7f0 f8ef 	bl	8011970 <GUI_ALLOC_LockH>
 8021792:	f8d8 3000 	ldr.w	r3, [r8]
 8021796:	3701      	adds	r7, #1
 8021798:	9004      	str	r0, [sp, #16]
 802179a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802179c:	f7f0 f8e8 	bl	8011970 <GUI_ALLOC_LockH>
 80217a0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80217a4:	68c1      	ldr	r1, [r0, #12]
 80217a6:	4603      	mov	r3, r0
 80217a8:	1ab2      	subs	r2, r6, r2
 80217aa:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80217ae:	f84b 0d04 	str.w	r0, [fp, #-4]!
 80217b2:	4658      	mov	r0, fp
 80217b4:	fb01 f202 	mul.w	r2, r1, r2
 80217b8:	1b65      	subs	r5, r4, r5
 80217ba:	3218      	adds	r2, #24
 80217bc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80217c0:	189d      	adds	r5, r3, r2
 80217c2:	f7f0 f8e9 	bl	8011998 <GUI_ALLOC_UnlockH>
 80217c6:	9b04      	ldr	r3, [sp, #16]
 80217c8:	f8d8 2000 	ldr.w	r2, [r8]
 80217cc:	6958      	ldr	r0, [r3, #20]
 80217ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80217d0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80217d4:	6814      	ldr	r4, [r2, #0]
 80217d6:	bb58      	cbnz	r0, 8021830 <_FillRect+0xc4>
 80217d8:	454e      	cmp	r6, r9
 80217da:	dc10      	bgt.n	80217fe <_FillRect+0x92>
 80217dc:	f8d8 3000 	ldr.w	r3, [r8]
 80217e0:	7c1b      	ldrb	r3, [r3, #16]
 80217e2:	07db      	lsls	r3, r3, #31
 80217e4:	d411      	bmi.n	802180a <_FillRect+0x9e>
 80217e6:	2f00      	cmp	r7, #0
 80217e8:	dd05      	ble.n	80217f6 <_FillRect+0x8a>
 80217ea:	463b      	mov	r3, r7
 80217ec:	462a      	mov	r2, r5
 80217ee:	3b01      	subs	r3, #1
 80217f0:	f842 4b04 	str.w	r4, [r2], #4
 80217f4:	d1fb      	bne.n	80217ee <_FillRect+0x82>
 80217f6:	3601      	adds	r6, #1
 80217f8:	4455      	add	r5, sl
 80217fa:	45b1      	cmp	r9, r6
 80217fc:	daee      	bge.n	80217dc <_FillRect+0x70>
 80217fe:	a804      	add	r0, sp, #16
 8021800:	f7f0 f8ca 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021804:	b007      	add	sp, #28
 8021806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802180a:	9b04      	ldr	r3, [sp, #16]
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	691b      	ldr	r3, [r3, #16]
 8021810:	689b      	ldr	r3, [r3, #8]
 8021812:	4798      	blx	r3
 8021814:	4629      	mov	r1, r5
 8021816:	463a      	mov	r2, r7
 8021818:	680b      	ldr	r3, [r1, #0]
 802181a:	3a01      	subs	r2, #1
 802181c:	ea83 0300 	eor.w	r3, r3, r0
 8021820:	f841 3b04 	str.w	r3, [r1], #4
 8021824:	d1f8      	bne.n	8021818 <_FillRect+0xac>
 8021826:	3601      	adds	r6, #1
 8021828:	4455      	add	r5, sl
 802182a:	45b1      	cmp	r9, r6
 802182c:	dad6      	bge.n	80217dc <_FillRect+0x70>
 802182e:	e7e6      	b.n	80217fe <_FillRect+0x92>
 8021830:	f7f0 f89e 	bl	8011970 <GUI_ALLOC_LockH>
 8021834:	ebc6 0e09 	rsb	lr, r6, r9
 8021838:	9903      	ldr	r1, [sp, #12]
 802183a:	463b      	mov	r3, r7
 802183c:	f10e 0e01 	add.w	lr, lr, #1
 8021840:	4632      	mov	r2, r6
 8021842:	9005      	str	r0, [sp, #20]
 8021844:	f8cd e000 	str.w	lr, [sp]
 8021848:	f7f9 fb32 	bl	801aeb0 <GUI_USAGE_AddRect>
 802184c:	4658      	mov	r0, fp
 802184e:	f7f0 f8a3 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021852:	e7c1      	b.n	80217d8 <_FillRect+0x6c>
 8021854:	20000018 	.word	0x20000018

08021858 <_DrawHLine>:
 8021858:	b500      	push	{lr}
 802185a:	b083      	sub	sp, #12
 802185c:	9200      	str	r2, [sp, #0]
 802185e:	f7ff ff85 	bl	802176c <_FillRect>
 8021862:	b003      	add	sp, #12
 8021864:	f85d fb04 	ldr.w	pc, [sp], #4

08021868 <_DrawVLine>:
 8021868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802186c:	4f36      	ldr	r7, [pc, #216]	; (8021948 <_DrawVLine+0xe0>)
 802186e:	461e      	mov	r6, r3
 8021870:	b085      	sub	sp, #20
 8021872:	4689      	mov	r9, r1
 8021874:	683b      	ldr	r3, [r7, #0]
 8021876:	4615      	mov	r5, r2
 8021878:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802187a:	f7f0 f879 	bl	8011970 <GUI_ALLOC_LockH>
 802187e:	6943      	ldr	r3, [r0, #20]
 8021880:	9001      	str	r0, [sp, #4]
 8021882:	4618      	mov	r0, r3
 8021884:	2b00      	cmp	r3, #0
 8021886:	d13b      	bne.n	8021900 <_DrawVLine+0x98>
 8021888:	683b      	ldr	r3, [r7, #0]
 802188a:	9002      	str	r0, [sp, #8]
 802188c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802188e:	f7f0 f86f 	bl	8011970 <GUI_ALLOC_LockH>
 8021892:	4602      	mov	r2, r0
 8021894:	a804      	add	r0, sp, #16
 8021896:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 802189a:	68d3      	ldr	r3, [r2, #12]
 802189c:	1b2c      	subs	r4, r5, r4
 802189e:	f840 2d04 	str.w	r2, [r0, #-4]!
 80218a2:	fb03 f304 	mul.w	r3, r3, r4
 80218a6:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80218aa:	3318      	adds	r3, #24
 80218ac:	ebc4 0409 	rsb	r4, r4, r9
 80218b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80218b4:	18d4      	adds	r4, r2, r3
 80218b6:	f7f0 f86f 	bl	8011998 <GUI_ALLOC_UnlockH>
 80218ba:	683b      	ldr	r3, [r7, #0]
 80218bc:	9901      	ldr	r1, [sp, #4]
 80218be:	7c1a      	ldrb	r2, [r3, #16]
 80218c0:	07d2      	lsls	r2, r2, #31
 80218c2:	d420      	bmi.n	8021906 <_DrawVLine+0x9e>
 80218c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80218c6:	9802      	ldr	r0, [sp, #8]
 80218c8:	f8d3 8000 	ldr.w	r8, [r3]
 80218cc:	68cf      	ldr	r7, [r1, #12]
 80218ce:	b908      	cbnz	r0, 80218d4 <_DrawVLine+0x6c>
 80218d0:	e031      	b.n	8021936 <_DrawVLine+0xce>
 80218d2:	9802      	ldr	r0, [sp, #8]
 80218d4:	6883      	ldr	r3, [r0, #8]
 80218d6:	462a      	mov	r2, r5
 80218d8:	3501      	adds	r5, #1
 80218da:	4649      	mov	r1, r9
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	4798      	blx	r3
 80218e0:	42ae      	cmp	r6, r5
 80218e2:	f8c4 8000 	str.w	r8, [r4]
 80218e6:	443c      	add	r4, r7
 80218e8:	daf3      	bge.n	80218d2 <_DrawVLine+0x6a>
 80218ea:	a801      	add	r0, sp, #4
 80218ec:	f7f0 f854 	bl	8011998 <GUI_ALLOC_UnlockH>
 80218f0:	9b02      	ldr	r3, [sp, #8]
 80218f2:	b113      	cbz	r3, 80218fa <_DrawVLine+0x92>
 80218f4:	a802      	add	r0, sp, #8
 80218f6:	f7f0 f84f 	bl	8011998 <GUI_ALLOC_UnlockH>
 80218fa:	b005      	add	sp, #20
 80218fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021900:	f7f0 f836 	bl	8011970 <GUI_ALLOC_LockH>
 8021904:	e7c0      	b.n	8021888 <_DrawVLine+0x20>
 8021906:	680b      	ldr	r3, [r1, #0]
 8021908:	691b      	ldr	r3, [r3, #16]
 802190a:	689b      	ldr	r3, [r3, #8]
 802190c:	4798      	blx	r3
 802190e:	4607      	mov	r7, r0
 8021910:	9b02      	ldr	r3, [sp, #8]
 8021912:	462a      	mov	r2, r5
 8021914:	4649      	mov	r1, r9
 8021916:	3501      	adds	r5, #1
 8021918:	4618      	mov	r0, r3
 802191a:	b113      	cbz	r3, 8021922 <_DrawVLine+0xba>
 802191c:	689b      	ldr	r3, [r3, #8]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	4798      	blx	r3
 8021922:	6823      	ldr	r3, [r4, #0]
 8021924:	42b5      	cmp	r5, r6
 8021926:	9a01      	ldr	r2, [sp, #4]
 8021928:	ea83 0307 	eor.w	r3, r3, r7
 802192c:	68d2      	ldr	r2, [r2, #12]
 802192e:	6023      	str	r3, [r4, #0]
 8021930:	4414      	add	r4, r2
 8021932:	dded      	ble.n	8021910 <_DrawVLine+0xa8>
 8021934:	e7d9      	b.n	80218ea <_DrawVLine+0x82>
 8021936:	1b73      	subs	r3, r6, r5
 8021938:	3301      	adds	r3, #1
 802193a:	3b01      	subs	r3, #1
 802193c:	f8c4 8000 	str.w	r8, [r4]
 8021940:	443c      	add	r4, r7
 8021942:	d1fa      	bne.n	802193a <_DrawVLine+0xd2>
 8021944:	e7d1      	b.n	80218ea <_DrawVLine+0x82>
 8021946:	bf00      	nop
 8021948:	20000018 	.word	0x20000018

0802194c <_WriteToActiveAlpha>:
 802194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021950:	b091      	sub	sp, #68	; 0x44
 8021952:	4688      	mov	r8, r1
 8021954:	4614      	mov	r4, r2
 8021956:	469a      	mov	sl, r3
 8021958:	9008      	str	r0, [sp, #32]
 802195a:	f7f0 f809 	bl	8011970 <GUI_ALLOC_LockH>
 802195e:	4603      	mov	r3, r0
 8021960:	a810      	add	r0, sp, #64	; 0x40
 8021962:	4d5d      	ldr	r5, [pc, #372]	; (8021ad8 <_WriteToActiveAlpha+0x18c>)
 8021964:	681a      	ldr	r2, [r3, #0]
 8021966:	f840 3d08 	str.w	r3, [r0, #-8]!
 802196a:	6912      	ldr	r2, [r2, #16]
 802196c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 8021970:	6852      	ldr	r2, [r2, #4]
 8021972:	9207      	str	r2, [sp, #28]
 8021974:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021978:	9206      	str	r2, [sp, #24]
 802197a:	f7f0 f80d 	bl	8011998 <GUI_ALLOC_UnlockH>
 802197e:	682a      	ldr	r2, [r5, #0]
 8021980:	2108      	movs	r1, #8
 8021982:	4b56      	ldr	r3, [pc, #344]	; (8021adc <_WriteToActiveAlpha+0x190>)
 8021984:	7c52      	ldrb	r2, [r2, #17]
 8021986:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802198a:	68c3      	ldr	r3, [r0, #12]
 802198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802198e:	4798      	blx	r3
 8021990:	2817      	cmp	r0, #23
 8021992:	d810      	bhi.n	80219b6 <_WriteToActiveAlpha+0x6a>
 8021994:	2803      	cmp	r0, #3
 8021996:	4606      	mov	r6, r0
 8021998:	bf08      	it	eq
 802199a:	2608      	moveq	r6, #8
 802199c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80219a0:	2000      	movs	r0, #0
 80219a2:	9309      	str	r3, [sp, #36]	; 0x24
 80219a4:	f8da 3000 	ldr.w	r3, [sl]
 80219a8:	930c      	str	r3, [sp, #48]	; 0x30
 80219aa:	f7f4 ff77 	bl	801689c <GUI__AllocAlphaBuffer>
 80219ae:	b120      	cbz	r0, 80219ba <_WriteToActiveAlpha+0x6e>
 80219b0:	b011      	add	sp, #68	; 0x44
 80219b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219b6:	2620      	movs	r6, #32
 80219b8:	e7f0      	b.n	802199c <_WriteToActiveAlpha+0x50>
 80219ba:	9906      	ldr	r1, [sp, #24]
 80219bc:	682a      	ldr	r2, [r5, #0]
 80219be:	460b      	mov	r3, r1
 80219c0:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 80219c4:	4443      	add	r3, r8
 80219c6:	3b01      	subs	r3, #1
 80219c8:	1b5d      	subs	r5, r3, r5
 80219ca:	2d00      	cmp	r5, #0
 80219cc:	dd7d      	ble.n	8021aca <_WriteToActiveAlpha+0x17e>
 80219ce:	1b4d      	subs	r5, r1, r5
 80219d0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80219d4:	4543      	cmp	r3, r8
 80219d6:	dc73      	bgt.n	8021ac0 <_WriteToActiveAlpha+0x174>
 80219d8:	2100      	movs	r1, #0
 80219da:	2d00      	cmp	r5, #0
 80219dc:	dde8      	ble.n	80219b0 <_WriteToActiveAlpha+0x64>
 80219de:	eb09 0304 	add.w	r3, r9, r4
 80219e2:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 80219e6:	3b01      	subs	r3, #1
 80219e8:	1a1b      	subs	r3, r3, r0
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	bfc8      	it	gt
 80219ee:	ebc3 0909 	rsbgt	r9, r3, r9
 80219f2:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 80219f6:	42a3      	cmp	r3, r4
 80219f8:	dc69      	bgt.n	8021ace <_WriteToActiveAlpha+0x182>
 80219fa:	2700      	movs	r7, #0
 80219fc:	f1b9 0f00 	cmp.w	r9, #0
 8021a00:	ddd6      	ble.n	80219b0 <_WriteToActiveAlpha+0x64>
 8021a02:	9b06      	ldr	r3, [sp, #24]
 8021a04:	46b3      	mov	fp, r6
 8021a06:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8021a0a:	fb07 1703 	mla	r7, r7, r3, r1
 8021a0e:	eb04 0309 	add.w	r3, r4, r9
 8021a12:	00bf      	lsls	r7, r7, #2
 8021a14:	930a      	str	r3, [sp, #40]	; 0x28
 8021a16:	e020      	b.n	8021a5a <_WriteToActiveAlpha+0x10e>
 8021a18:	2304      	movs	r3, #4
 8021a1a:	9a06      	ldr	r2, [sp, #24]
 8021a1c:	4631      	mov	r1, r6
 8021a1e:	4630      	mov	r0, r6
 8021a20:	47c8      	blx	r9
 8021a22:	f04f 0e01 	mov.w	lr, #1
 8021a26:	2300      	movs	r3, #0
 8021a28:	2100      	movs	r1, #0
 8021a2a:	462a      	mov	r2, r5
 8021a2c:	9305      	str	r3, [sp, #20]
 8021a2e:	4640      	mov	r0, r8
 8021a30:	4673      	mov	r3, lr
 8021a32:	9103      	str	r1, [sp, #12]
 8021a34:	9604      	str	r6, [sp, #16]
 8021a36:	4621      	mov	r1, r4
 8021a38:	f8cd b008 	str.w	fp, [sp, #8]
 8021a3c:	eb04 090e 	add.w	r9, r4, lr
 8021a40:	f8cd e004 	str.w	lr, [sp, #4]
 8021a44:	f8cd e000 	str.w	lr, [sp]
 8021a48:	9c06      	ldr	r4, [sp, #24]
 8021a4a:	f7f5 fe7b 	bl	8017744 <LCD_DrawBitmap>
 8021a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a50:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 8021a54:	454b      	cmp	r3, r9
 8021a56:	d0ab      	beq.n	80219b0 <_WriteToActiveAlpha+0x64>
 8021a58:	464c      	mov	r4, r9
 8021a5a:	9808      	ldr	r0, [sp, #32]
 8021a5c:	f7f9 f912 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 8021a60:	ab0f      	add	r3, sp, #60	; 0x3c
 8021a62:	19c2      	adds	r2, r0, r7
 8021a64:	4621      	mov	r1, r4
 8021a66:	9301      	str	r3, [sp, #4]
 8021a68:	4640      	mov	r0, r8
 8021a6a:	9b07      	ldr	r3, [sp, #28]
 8021a6c:	9300      	str	r3, [sp, #0]
 8021a6e:	462b      	mov	r3, r5
 8021a70:	f7f4 fdd6 	bl	8016620 <GUI__DoAlphaBlending>
 8021a74:	4606      	mov	r6, r0
 8021a76:	2800      	cmp	r0, #0
 8021a78:	d09a      	beq.n	80219b0 <_WriteToActiveAlpha+0x64>
 8021a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a7c:	461a      	mov	r2, r3
 8021a7e:	4b18      	ldr	r3, [pc, #96]	; (8021ae0 <_WriteToActiveAlpha+0x194>)
 8021a80:	429a      	cmp	r2, r3
 8021a82:	d0ce      	beq.n	8021a22 <_WriteToActiveAlpha+0xd6>
 8021a84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8021a88:	465a      	mov	r2, fp
 8021a8a:	4629      	mov	r1, r5
 8021a8c:	464b      	mov	r3, r9
 8021a8e:	f7f5 f83b 	bl	8016b08 <GUI__CompactPixelIndicesEx>
 8021a92:	2800      	cmp	r0, #0
 8021a94:	d1c5      	bne.n	8021a22 <_WriteToActiveAlpha+0xd6>
 8021a96:	f8d9 9010 	ldr.w	r9, [r9, #16]
 8021a9a:	f1b9 0f00 	cmp.w	r9, #0
 8021a9e:	d1bb      	bne.n	8021a18 <_WriteToActiveAlpha+0xcc>
 8021aa0:	950d      	str	r5, [sp, #52]	; 0x34
 8021aa2:	46a2      	mov	sl, r4
 8021aa4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8021aa8:	4635      	mov	r5, r6
 8021aaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021aac:	6828      	ldr	r0, [r5, #0]
 8021aae:	47a0      	blx	r4
 8021ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8021ab4:	f845 0b04 	str.w	r0, [r5], #4
 8021ab8:	d1f8      	bne.n	8021aac <_WriteToActiveAlpha+0x160>
 8021aba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021abc:	4654      	mov	r4, sl
 8021abe:	e7b0      	b.n	8021a22 <_WriteToActiveAlpha+0xd6>
 8021ac0:	ebc8 0103 	rsb	r1, r8, r3
 8021ac4:	4698      	mov	r8, r3
 8021ac6:	1a6d      	subs	r5, r5, r1
 8021ac8:	e787      	b.n	80219da <_WriteToActiveAlpha+0x8e>
 8021aca:	460d      	mov	r5, r1
 8021acc:	e780      	b.n	80219d0 <_WriteToActiveAlpha+0x84>
 8021ace:	1b1f      	subs	r7, r3, r4
 8021ad0:	461c      	mov	r4, r3
 8021ad2:	ebc7 0909 	rsb	r9, r7, r9
 8021ad6:	e791      	b.n	80219fc <_WriteToActiveAlpha+0xb0>
 8021ad8:	20000018 	.word	0x20000018
 8021adc:	2002afd0 	.word	0x2002afd0
 8021ae0:	08010cf9 	.word	0x08010cf9

08021ae4 <GUI_MEMDEV__WriteToActiveAlpha>:
 8021ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ae8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8021c6c <GUI_MEMDEV__WriteToActiveAlpha+0x188>
 8021aec:	b08b      	sub	sp, #44	; 0x2c
 8021aee:	4b5d      	ldr	r3, [pc, #372]	; (8021c64 <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 8021af0:	f8d9 c000 	ldr.w	ip, [r9]
 8021af4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8021c70 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>
 8021af8:	f89c e011 	ldrb.w	lr, [ip, #17]
 8021afc:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 8021b00:	f8d8 3000 	ldr.w	r3, [r8]
 8021b04:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	f000 80a6 	beq.w	8021c5a <GUI_MEMDEV__WriteToActiveAlpha+0x176>
 8021b0e:	4616      	mov	r6, r2
 8021b10:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 8021b14:	4607      	mov	r7, r0
 8021b16:	460d      	mov	r5, r1
 8021b18:	2a00      	cmp	r2, #0
 8021b1a:	d075      	beq.n	8021c08 <GUI_MEMDEV__WriteToActiveAlpha+0x124>
 8021b1c:	68e2      	ldr	r2, [r4, #12]
 8021b1e:	6812      	ldr	r2, [r2, #0]
 8021b20:	2a07      	cmp	r2, #7
 8021b22:	d078      	beq.n	8021c16 <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 8021b24:	4a50      	ldr	r2, [pc, #320]	; (8021c68 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8021b26:	ebc2 020e 	rsb	r2, r2, lr
 8021b2a:	fab2 f282 	clz	r2, r2
 8021b2e:	0952      	lsrs	r2, r2, #5
 8021b30:	2a00      	cmp	r2, #0
 8021b32:	d070      	beq.n	8021c16 <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 8021b34:	4638      	mov	r0, r7
 8021b36:	f7ef ff1b 	bl	8011970 <GUI_ALLOC_LockH>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	a80a      	add	r0, sp, #40	; 0x28
 8021b3e:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 8021b42:	f840 3d08 	str.w	r3, [r0, #-8]!
 8021b46:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8021b4a:	eb0b 0405 	add.w	r4, fp, r5
 8021b4e:	68db      	ldr	r3, [r3, #12]
 8021b50:	3c01      	subs	r4, #1
 8021b52:	9305      	str	r3, [sp, #20]
 8021b54:	f7ef ff20 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021b58:	f8d9 1000 	ldr.w	r1, [r9]
 8021b5c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8021b60:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8021b64:	1ae4      	subs	r4, r4, r3
 8021b66:	2c00      	cmp	r4, #0
 8021b68:	bfcc      	ite	gt
 8021b6a:	ebc4 040b 	rsbgt	r4, r4, fp
 8021b6e:	465c      	movle	r4, fp
 8021b70:	4285      	cmp	r5, r0
 8021b72:	db5e      	blt.n	8021c32 <GUI_MEMDEV__WriteToActiveAlpha+0x14e>
 8021b74:	2300      	movs	r3, #0
 8021b76:	2c00      	cmp	r4, #0
 8021b78:	dd43      	ble.n	8021c02 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8021b7a:	eb0a 0006 	add.w	r0, sl, r6
 8021b7e:	f9b1 e00e 	ldrsh.w	lr, [r1, #14]
 8021b82:	3801      	subs	r0, #1
 8021b84:	ebce 0000 	rsb	r0, lr, r0
 8021b88:	2800      	cmp	r0, #0
 8021b8a:	bfc8      	it	gt
 8021b8c:	ebc0 0a0a 	rsbgt	sl, r0, sl
 8021b90:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8021b94:	42b0      	cmp	r0, r6
 8021b96:	dc47      	bgt.n	8021c28 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8021b98:	2100      	movs	r1, #0
 8021b9a:	f1ba 0f00 	cmp.w	sl, #0
 8021b9e:	9307      	str	r3, [sp, #28]
 8021ba0:	9106      	str	r1, [sp, #24]
 8021ba2:	dd2e      	ble.n	8021c02 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8021ba4:	4638      	mov	r0, r7
 8021ba6:	f7f9 f86d 	bl	801ac84 <GUI_MEMDEV_GetDataPtr>
 8021baa:	9b07      	ldr	r3, [sp, #28]
 8021bac:	f8d9 2000 	ldr.w	r2, [r9]
 8021bb0:	9906      	ldr	r1, [sp, #24]
 8021bb2:	fb01 310b 	mla	r1, r1, fp, r3
 8021bb6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8021bb8:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d03c      	beq.n	8021c3a <GUI_MEMDEV__WriteToActiveAlpha+0x156>
 8021bc0:	4618      	mov	r0, r3
 8021bc2:	f7ef fed5 	bl	8011970 <GUI_ALLOC_LockH>
 8021bc6:	4602      	mov	r2, r0
 8021bc8:	a80a      	add	r0, sp, #40	; 0x28
 8021bca:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8021bce:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8021bd2:	1a6d      	subs	r5, r5, r1
 8021bd4:	f840 2d04 	str.w	r2, [r0, #-4]!
 8021bd8:	1af3      	subs	r3, r6, r3
 8021bda:	00a9      	lsls	r1, r5, #2
 8021bdc:	68d5      	ldr	r5, [r2, #12]
 8021bde:	f101 0618 	add.w	r6, r1, #24
 8021be2:	fb05 6603 	mla	r6, r5, r3, r6
 8021be6:	4416      	add	r6, r2
 8021be8:	f7ef fed6 	bl	8011998 <GUI_ALLOC_UnlockH>
 8021bec:	b14e      	cbz	r6, 8021c02 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8021bee:	9b05      	ldr	r3, [sp, #20]
 8021bf0:	4622      	mov	r2, r4
 8021bf2:	9500      	str	r5, [sp, #0]
 8021bf4:	4639      	mov	r1, r7
 8021bf6:	9301      	str	r3, [sp, #4]
 8021bf8:	4630      	mov	r0, r6
 8021bfa:	4653      	mov	r3, sl
 8021bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8021c00:	47a0      	blx	r4
 8021c02:	b00b      	add	sp, #44	; 0x2c
 8021c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c08:	68e2      	ldr	r2, [r4, #12]
 8021c0a:	6812      	ldr	r2, [r2, #0]
 8021c0c:	fab2 f282 	clz	r2, r2
 8021c10:	0952      	lsrs	r2, r2, #5
 8021c12:	2a00      	cmp	r2, #0
 8021c14:	d18e      	bne.n	8021b34 <GUI_MEMDEV__WriteToActiveAlpha+0x50>
 8021c16:	4673      	mov	r3, lr
 8021c18:	4632      	mov	r2, r6
 8021c1a:	4629      	mov	r1, r5
 8021c1c:	4638      	mov	r0, r7
 8021c1e:	f7ff fe95 	bl	802194c <_WriteToActiveAlpha>
 8021c22:	b00b      	add	sp, #44	; 0x2c
 8021c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c28:	1b81      	subs	r1, r0, r6
 8021c2a:	4606      	mov	r6, r0
 8021c2c:	ebc1 0a0a 	rsb	sl, r1, sl
 8021c30:	e7b3      	b.n	8021b9a <GUI_MEMDEV__WriteToActiveAlpha+0xb6>
 8021c32:	1b43      	subs	r3, r0, r5
 8021c34:	4605      	mov	r5, r0
 8021c36:	1ae4      	subs	r4, r4, r3
 8021c38:	e79d      	b.n	8021b76 <GUI_MEMDEV__WriteToActiveAlpha+0x92>
 8021c3a:	7c50      	ldrb	r0, [r2, #17]
 8021c3c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8021c40:	f8df e030 	ldr.w	lr, [pc, #48]	; 8021c74 <GUI_MEMDEV__WriteToActiveAlpha+0x190>
 8021c44:	463b      	mov	r3, r7
 8021c46:	9202      	str	r2, [sp, #8]
 8021c48:	4629      	mov	r1, r5
 8021c4a:	f8cd a004 	str.w	sl, [sp, #4]
 8021c4e:	4632      	mov	r2, r6
 8021c50:	9400      	str	r4, [sp, #0]
 8021c52:	f8de 4000 	ldr.w	r4, [lr]
 8021c56:	47a0      	blx	r4
 8021c58:	e7d3      	b.n	8021c02 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8021c5a:	4673      	mov	r3, lr
 8021c5c:	f7ff fe76 	bl	802194c <_WriteToActiveAlpha>
 8021c60:	e7cf      	b.n	8021c02 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8021c62:	bf00      	nop
 8021c64:	2002afd0 	.word	0x2002afd0
 8021c68:	08023b28 	.word	0x08023b28
 8021c6c:	20000018 	.word	0x20000018
 8021c70:	2002afe4 	.word	0x2002afe4
 8021c74:	2002afe0 	.word	0x2002afe0

08021c78 <__errno>:
 8021c78:	4b01      	ldr	r3, [pc, #4]	; (8021c80 <__errno+0x8>)
 8021c7a:	6818      	ldr	r0, [r3, #0]
 8021c7c:	4770      	bx	lr
 8021c7e:	bf00      	nop
 8021c80:	200000e4 	.word	0x200000e4

08021c84 <__libc_init_array>:
 8021c84:	b570      	push	{r4, r5, r6, lr}
 8021c86:	4e0d      	ldr	r6, [pc, #52]	; (8021cbc <__libc_init_array+0x38>)
 8021c88:	4c0d      	ldr	r4, [pc, #52]	; (8021cc0 <__libc_init_array+0x3c>)
 8021c8a:	1ba4      	subs	r4, r4, r6
 8021c8c:	10a4      	asrs	r4, r4, #2
 8021c8e:	2500      	movs	r5, #0
 8021c90:	42a5      	cmp	r5, r4
 8021c92:	d109      	bne.n	8021ca8 <__libc_init_array+0x24>
 8021c94:	4e0b      	ldr	r6, [pc, #44]	; (8021cc4 <__libc_init_array+0x40>)
 8021c96:	4c0c      	ldr	r4, [pc, #48]	; (8021cc8 <__libc_init_array+0x44>)
 8021c98:	f001 fea6 	bl	80239e8 <_init>
 8021c9c:	1ba4      	subs	r4, r4, r6
 8021c9e:	10a4      	asrs	r4, r4, #2
 8021ca0:	2500      	movs	r5, #0
 8021ca2:	42a5      	cmp	r5, r4
 8021ca4:	d105      	bne.n	8021cb2 <__libc_init_array+0x2e>
 8021ca6:	bd70      	pop	{r4, r5, r6, pc}
 8021ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021cac:	4798      	blx	r3
 8021cae:	3501      	adds	r5, #1
 8021cb0:	e7ee      	b.n	8021c90 <__libc_init_array+0xc>
 8021cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021cb6:	4798      	blx	r3
 8021cb8:	3501      	adds	r5, #1
 8021cba:	e7f2      	b.n	8021ca2 <__libc_init_array+0x1e>
 8021cbc:	0802b380 	.word	0x0802b380
 8021cc0:	0802b380 	.word	0x0802b380
 8021cc4:	0802b380 	.word	0x0802b380
 8021cc8:	0802b384 	.word	0x0802b384

08021ccc <malloc>:
 8021ccc:	4b02      	ldr	r3, [pc, #8]	; (8021cd8 <malloc+0xc>)
 8021cce:	4601      	mov	r1, r0
 8021cd0:	6818      	ldr	r0, [r3, #0]
 8021cd2:	f000 b895 	b.w	8021e00 <_malloc_r>
 8021cd6:	bf00      	nop
 8021cd8:	200000e4 	.word	0x200000e4

08021cdc <free>:
 8021cdc:	4b02      	ldr	r3, [pc, #8]	; (8021ce8 <free+0xc>)
 8021cde:	4601      	mov	r1, r0
 8021ce0:	6818      	ldr	r0, [r3, #0]
 8021ce2:	f000 b83f 	b.w	8021d64 <_free_r>
 8021ce6:	bf00      	nop
 8021ce8:	200000e4 	.word	0x200000e4

08021cec <memcmp>:
 8021cec:	b510      	push	{r4, lr}
 8021cee:	3901      	subs	r1, #1
 8021cf0:	4402      	add	r2, r0
 8021cf2:	4290      	cmp	r0, r2
 8021cf4:	d101      	bne.n	8021cfa <memcmp+0xe>
 8021cf6:	2000      	movs	r0, #0
 8021cf8:	bd10      	pop	{r4, pc}
 8021cfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8021cfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021d02:	42a3      	cmp	r3, r4
 8021d04:	d0f5      	beq.n	8021cf2 <memcmp+0x6>
 8021d06:	1b18      	subs	r0, r3, r4
 8021d08:	bd10      	pop	{r4, pc}

08021d0a <memcpy>:
 8021d0a:	b510      	push	{r4, lr}
 8021d0c:	1e43      	subs	r3, r0, #1
 8021d0e:	440a      	add	r2, r1
 8021d10:	4291      	cmp	r1, r2
 8021d12:	d100      	bne.n	8021d16 <memcpy+0xc>
 8021d14:	bd10      	pop	{r4, pc}
 8021d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d1e:	e7f7      	b.n	8021d10 <memcpy+0x6>

08021d20 <memmove>:
 8021d20:	4288      	cmp	r0, r1
 8021d22:	b510      	push	{r4, lr}
 8021d24:	eb01 0302 	add.w	r3, r1, r2
 8021d28:	d803      	bhi.n	8021d32 <memmove+0x12>
 8021d2a:	1e42      	subs	r2, r0, #1
 8021d2c:	4299      	cmp	r1, r3
 8021d2e:	d10c      	bne.n	8021d4a <memmove+0x2a>
 8021d30:	bd10      	pop	{r4, pc}
 8021d32:	4298      	cmp	r0, r3
 8021d34:	d2f9      	bcs.n	8021d2a <memmove+0xa>
 8021d36:	1881      	adds	r1, r0, r2
 8021d38:	1ad2      	subs	r2, r2, r3
 8021d3a:	42d3      	cmn	r3, r2
 8021d3c:	d100      	bne.n	8021d40 <memmove+0x20>
 8021d3e:	bd10      	pop	{r4, pc}
 8021d40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021d44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8021d48:	e7f7      	b.n	8021d3a <memmove+0x1a>
 8021d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8021d52:	e7eb      	b.n	8021d2c <memmove+0xc>

08021d54 <memset>:
 8021d54:	4402      	add	r2, r0
 8021d56:	4603      	mov	r3, r0
 8021d58:	4293      	cmp	r3, r2
 8021d5a:	d100      	bne.n	8021d5e <memset+0xa>
 8021d5c:	4770      	bx	lr
 8021d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8021d62:	e7f9      	b.n	8021d58 <memset+0x4>

08021d64 <_free_r>:
 8021d64:	b538      	push	{r3, r4, r5, lr}
 8021d66:	4605      	mov	r5, r0
 8021d68:	2900      	cmp	r1, #0
 8021d6a:	d045      	beq.n	8021df8 <_free_r+0x94>
 8021d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021d70:	1f0c      	subs	r4, r1, #4
 8021d72:	2b00      	cmp	r3, #0
 8021d74:	bfb8      	it	lt
 8021d76:	18e4      	addlt	r4, r4, r3
 8021d78:	f000 fbb4 	bl	80224e4 <__malloc_lock>
 8021d7c:	4a1f      	ldr	r2, [pc, #124]	; (8021dfc <_free_r+0x98>)
 8021d7e:	6813      	ldr	r3, [r2, #0]
 8021d80:	4610      	mov	r0, r2
 8021d82:	b933      	cbnz	r3, 8021d92 <_free_r+0x2e>
 8021d84:	6063      	str	r3, [r4, #4]
 8021d86:	6014      	str	r4, [r2, #0]
 8021d88:	4628      	mov	r0, r5
 8021d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d8e:	f000 bbaa 	b.w	80224e6 <__malloc_unlock>
 8021d92:	42a3      	cmp	r3, r4
 8021d94:	d90c      	bls.n	8021db0 <_free_r+0x4c>
 8021d96:	6821      	ldr	r1, [r4, #0]
 8021d98:	1862      	adds	r2, r4, r1
 8021d9a:	4293      	cmp	r3, r2
 8021d9c:	bf04      	itt	eq
 8021d9e:	681a      	ldreq	r2, [r3, #0]
 8021da0:	685b      	ldreq	r3, [r3, #4]
 8021da2:	6063      	str	r3, [r4, #4]
 8021da4:	bf04      	itt	eq
 8021da6:	1852      	addeq	r2, r2, r1
 8021da8:	6022      	streq	r2, [r4, #0]
 8021daa:	6004      	str	r4, [r0, #0]
 8021dac:	e7ec      	b.n	8021d88 <_free_r+0x24>
 8021dae:	4613      	mov	r3, r2
 8021db0:	685a      	ldr	r2, [r3, #4]
 8021db2:	b10a      	cbz	r2, 8021db8 <_free_r+0x54>
 8021db4:	42a2      	cmp	r2, r4
 8021db6:	d9fa      	bls.n	8021dae <_free_r+0x4a>
 8021db8:	6819      	ldr	r1, [r3, #0]
 8021dba:	1858      	adds	r0, r3, r1
 8021dbc:	42a0      	cmp	r0, r4
 8021dbe:	d10b      	bne.n	8021dd8 <_free_r+0x74>
 8021dc0:	6820      	ldr	r0, [r4, #0]
 8021dc2:	4401      	add	r1, r0
 8021dc4:	1858      	adds	r0, r3, r1
 8021dc6:	4282      	cmp	r2, r0
 8021dc8:	6019      	str	r1, [r3, #0]
 8021dca:	d1dd      	bne.n	8021d88 <_free_r+0x24>
 8021dcc:	6810      	ldr	r0, [r2, #0]
 8021dce:	6852      	ldr	r2, [r2, #4]
 8021dd0:	605a      	str	r2, [r3, #4]
 8021dd2:	4401      	add	r1, r0
 8021dd4:	6019      	str	r1, [r3, #0]
 8021dd6:	e7d7      	b.n	8021d88 <_free_r+0x24>
 8021dd8:	d902      	bls.n	8021de0 <_free_r+0x7c>
 8021dda:	230c      	movs	r3, #12
 8021ddc:	602b      	str	r3, [r5, #0]
 8021dde:	e7d3      	b.n	8021d88 <_free_r+0x24>
 8021de0:	6820      	ldr	r0, [r4, #0]
 8021de2:	1821      	adds	r1, r4, r0
 8021de4:	428a      	cmp	r2, r1
 8021de6:	bf04      	itt	eq
 8021de8:	6811      	ldreq	r1, [r2, #0]
 8021dea:	6852      	ldreq	r2, [r2, #4]
 8021dec:	6062      	str	r2, [r4, #4]
 8021dee:	bf04      	itt	eq
 8021df0:	1809      	addeq	r1, r1, r0
 8021df2:	6021      	streq	r1, [r4, #0]
 8021df4:	605c      	str	r4, [r3, #4]
 8021df6:	e7c7      	b.n	8021d88 <_free_r+0x24>
 8021df8:	bd38      	pop	{r3, r4, r5, pc}
 8021dfa:	bf00      	nop
 8021dfc:	20029bd0 	.word	0x20029bd0

08021e00 <_malloc_r>:
 8021e00:	b570      	push	{r4, r5, r6, lr}
 8021e02:	1ccd      	adds	r5, r1, #3
 8021e04:	f025 0503 	bic.w	r5, r5, #3
 8021e08:	3508      	adds	r5, #8
 8021e0a:	2d0c      	cmp	r5, #12
 8021e0c:	bf38      	it	cc
 8021e0e:	250c      	movcc	r5, #12
 8021e10:	2d00      	cmp	r5, #0
 8021e12:	4606      	mov	r6, r0
 8021e14:	db01      	blt.n	8021e1a <_malloc_r+0x1a>
 8021e16:	42a9      	cmp	r1, r5
 8021e18:	d903      	bls.n	8021e22 <_malloc_r+0x22>
 8021e1a:	230c      	movs	r3, #12
 8021e1c:	6033      	str	r3, [r6, #0]
 8021e1e:	2000      	movs	r0, #0
 8021e20:	bd70      	pop	{r4, r5, r6, pc}
 8021e22:	f000 fb5f 	bl	80224e4 <__malloc_lock>
 8021e26:	4a23      	ldr	r2, [pc, #140]	; (8021eb4 <_malloc_r+0xb4>)
 8021e28:	6814      	ldr	r4, [r2, #0]
 8021e2a:	4621      	mov	r1, r4
 8021e2c:	b991      	cbnz	r1, 8021e54 <_malloc_r+0x54>
 8021e2e:	4c22      	ldr	r4, [pc, #136]	; (8021eb8 <_malloc_r+0xb8>)
 8021e30:	6823      	ldr	r3, [r4, #0]
 8021e32:	b91b      	cbnz	r3, 8021e3c <_malloc_r+0x3c>
 8021e34:	4630      	mov	r0, r6
 8021e36:	f000 f8a5 	bl	8021f84 <_sbrk_r>
 8021e3a:	6020      	str	r0, [r4, #0]
 8021e3c:	4629      	mov	r1, r5
 8021e3e:	4630      	mov	r0, r6
 8021e40:	f000 f8a0 	bl	8021f84 <_sbrk_r>
 8021e44:	1c43      	adds	r3, r0, #1
 8021e46:	d126      	bne.n	8021e96 <_malloc_r+0x96>
 8021e48:	230c      	movs	r3, #12
 8021e4a:	6033      	str	r3, [r6, #0]
 8021e4c:	4630      	mov	r0, r6
 8021e4e:	f000 fb4a 	bl	80224e6 <__malloc_unlock>
 8021e52:	e7e4      	b.n	8021e1e <_malloc_r+0x1e>
 8021e54:	680b      	ldr	r3, [r1, #0]
 8021e56:	1b5b      	subs	r3, r3, r5
 8021e58:	d41a      	bmi.n	8021e90 <_malloc_r+0x90>
 8021e5a:	2b0b      	cmp	r3, #11
 8021e5c:	d90f      	bls.n	8021e7e <_malloc_r+0x7e>
 8021e5e:	600b      	str	r3, [r1, #0]
 8021e60:	50cd      	str	r5, [r1, r3]
 8021e62:	18cc      	adds	r4, r1, r3
 8021e64:	4630      	mov	r0, r6
 8021e66:	f000 fb3e 	bl	80224e6 <__malloc_unlock>
 8021e6a:	f104 000b 	add.w	r0, r4, #11
 8021e6e:	1d23      	adds	r3, r4, #4
 8021e70:	f020 0007 	bic.w	r0, r0, #7
 8021e74:	1ac3      	subs	r3, r0, r3
 8021e76:	d01b      	beq.n	8021eb0 <_malloc_r+0xb0>
 8021e78:	425a      	negs	r2, r3
 8021e7a:	50e2      	str	r2, [r4, r3]
 8021e7c:	bd70      	pop	{r4, r5, r6, pc}
 8021e7e:	428c      	cmp	r4, r1
 8021e80:	bf0d      	iteet	eq
 8021e82:	6863      	ldreq	r3, [r4, #4]
 8021e84:	684b      	ldrne	r3, [r1, #4]
 8021e86:	6063      	strne	r3, [r4, #4]
 8021e88:	6013      	streq	r3, [r2, #0]
 8021e8a:	bf18      	it	ne
 8021e8c:	460c      	movne	r4, r1
 8021e8e:	e7e9      	b.n	8021e64 <_malloc_r+0x64>
 8021e90:	460c      	mov	r4, r1
 8021e92:	6849      	ldr	r1, [r1, #4]
 8021e94:	e7ca      	b.n	8021e2c <_malloc_r+0x2c>
 8021e96:	1cc4      	adds	r4, r0, #3
 8021e98:	f024 0403 	bic.w	r4, r4, #3
 8021e9c:	42a0      	cmp	r0, r4
 8021e9e:	d005      	beq.n	8021eac <_malloc_r+0xac>
 8021ea0:	1a21      	subs	r1, r4, r0
 8021ea2:	4630      	mov	r0, r6
 8021ea4:	f000 f86e 	bl	8021f84 <_sbrk_r>
 8021ea8:	3001      	adds	r0, #1
 8021eaa:	d0cd      	beq.n	8021e48 <_malloc_r+0x48>
 8021eac:	6025      	str	r5, [r4, #0]
 8021eae:	e7d9      	b.n	8021e64 <_malloc_r+0x64>
 8021eb0:	bd70      	pop	{r4, r5, r6, pc}
 8021eb2:	bf00      	nop
 8021eb4:	20029bd0 	.word	0x20029bd0
 8021eb8:	20029bd4 	.word	0x20029bd4

08021ebc <_puts_r>:
 8021ebc:	b570      	push	{r4, r5, r6, lr}
 8021ebe:	460e      	mov	r6, r1
 8021ec0:	4605      	mov	r5, r0
 8021ec2:	b118      	cbz	r0, 8021ecc <_puts_r+0x10>
 8021ec4:	6983      	ldr	r3, [r0, #24]
 8021ec6:	b90b      	cbnz	r3, 8021ecc <_puts_r+0x10>
 8021ec8:	f000 fa1e 	bl	8022308 <__sinit>
 8021ecc:	69ab      	ldr	r3, [r5, #24]
 8021ece:	68ac      	ldr	r4, [r5, #8]
 8021ed0:	b913      	cbnz	r3, 8021ed8 <_puts_r+0x1c>
 8021ed2:	4628      	mov	r0, r5
 8021ed4:	f000 fa18 	bl	8022308 <__sinit>
 8021ed8:	4b23      	ldr	r3, [pc, #140]	; (8021f68 <_puts_r+0xac>)
 8021eda:	429c      	cmp	r4, r3
 8021edc:	d117      	bne.n	8021f0e <_puts_r+0x52>
 8021ede:	686c      	ldr	r4, [r5, #4]
 8021ee0:	89a3      	ldrh	r3, [r4, #12]
 8021ee2:	071b      	lsls	r3, r3, #28
 8021ee4:	d51d      	bpl.n	8021f22 <_puts_r+0x66>
 8021ee6:	6923      	ldr	r3, [r4, #16]
 8021ee8:	b1db      	cbz	r3, 8021f22 <_puts_r+0x66>
 8021eea:	3e01      	subs	r6, #1
 8021eec:	68a3      	ldr	r3, [r4, #8]
 8021eee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021ef2:	3b01      	subs	r3, #1
 8021ef4:	60a3      	str	r3, [r4, #8]
 8021ef6:	b9e9      	cbnz	r1, 8021f34 <_puts_r+0x78>
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	da2e      	bge.n	8021f5a <_puts_r+0x9e>
 8021efc:	4622      	mov	r2, r4
 8021efe:	210a      	movs	r1, #10
 8021f00:	4628      	mov	r0, r5
 8021f02:	f000 f84f 	bl	8021fa4 <__swbuf_r>
 8021f06:	3001      	adds	r0, #1
 8021f08:	d011      	beq.n	8021f2e <_puts_r+0x72>
 8021f0a:	200a      	movs	r0, #10
 8021f0c:	bd70      	pop	{r4, r5, r6, pc}
 8021f0e:	4b17      	ldr	r3, [pc, #92]	; (8021f6c <_puts_r+0xb0>)
 8021f10:	429c      	cmp	r4, r3
 8021f12:	d101      	bne.n	8021f18 <_puts_r+0x5c>
 8021f14:	68ac      	ldr	r4, [r5, #8]
 8021f16:	e7e3      	b.n	8021ee0 <_puts_r+0x24>
 8021f18:	4b15      	ldr	r3, [pc, #84]	; (8021f70 <_puts_r+0xb4>)
 8021f1a:	429c      	cmp	r4, r3
 8021f1c:	bf08      	it	eq
 8021f1e:	68ec      	ldreq	r4, [r5, #12]
 8021f20:	e7de      	b.n	8021ee0 <_puts_r+0x24>
 8021f22:	4621      	mov	r1, r4
 8021f24:	4628      	mov	r0, r5
 8021f26:	f000 f88f 	bl	8022048 <__swsetup_r>
 8021f2a:	2800      	cmp	r0, #0
 8021f2c:	d0dd      	beq.n	8021eea <_puts_r+0x2e>
 8021f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8021f32:	bd70      	pop	{r4, r5, r6, pc}
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	da04      	bge.n	8021f42 <_puts_r+0x86>
 8021f38:	69a2      	ldr	r2, [r4, #24]
 8021f3a:	4293      	cmp	r3, r2
 8021f3c:	db06      	blt.n	8021f4c <_puts_r+0x90>
 8021f3e:	290a      	cmp	r1, #10
 8021f40:	d004      	beq.n	8021f4c <_puts_r+0x90>
 8021f42:	6823      	ldr	r3, [r4, #0]
 8021f44:	1c5a      	adds	r2, r3, #1
 8021f46:	6022      	str	r2, [r4, #0]
 8021f48:	7019      	strb	r1, [r3, #0]
 8021f4a:	e7cf      	b.n	8021eec <_puts_r+0x30>
 8021f4c:	4622      	mov	r2, r4
 8021f4e:	4628      	mov	r0, r5
 8021f50:	f000 f828 	bl	8021fa4 <__swbuf_r>
 8021f54:	3001      	adds	r0, #1
 8021f56:	d1c9      	bne.n	8021eec <_puts_r+0x30>
 8021f58:	e7e9      	b.n	8021f2e <_puts_r+0x72>
 8021f5a:	6823      	ldr	r3, [r4, #0]
 8021f5c:	200a      	movs	r0, #10
 8021f5e:	1c5a      	adds	r2, r3, #1
 8021f60:	6022      	str	r2, [r4, #0]
 8021f62:	7018      	strb	r0, [r3, #0]
 8021f64:	bd70      	pop	{r4, r5, r6, pc}
 8021f66:	bf00      	nop
 8021f68:	0802b154 	.word	0x0802b154
 8021f6c:	0802b174 	.word	0x0802b174
 8021f70:	0802b134 	.word	0x0802b134

08021f74 <puts>:
 8021f74:	4b02      	ldr	r3, [pc, #8]	; (8021f80 <puts+0xc>)
 8021f76:	4601      	mov	r1, r0
 8021f78:	6818      	ldr	r0, [r3, #0]
 8021f7a:	f7ff bf9f 	b.w	8021ebc <_puts_r>
 8021f7e:	bf00      	nop
 8021f80:	200000e4 	.word	0x200000e4

08021f84 <_sbrk_r>:
 8021f84:	b538      	push	{r3, r4, r5, lr}
 8021f86:	4c06      	ldr	r4, [pc, #24]	; (8021fa0 <_sbrk_r+0x1c>)
 8021f88:	2300      	movs	r3, #0
 8021f8a:	4605      	mov	r5, r0
 8021f8c:	4608      	mov	r0, r1
 8021f8e:	6023      	str	r3, [r4, #0]
 8021f90:	f7df f83c 	bl	800100c <_sbrk>
 8021f94:	1c43      	adds	r3, r0, #1
 8021f96:	d102      	bne.n	8021f9e <_sbrk_r+0x1a>
 8021f98:	6823      	ldr	r3, [r4, #0]
 8021f9a:	b103      	cbz	r3, 8021f9e <_sbrk_r+0x1a>
 8021f9c:	602b      	str	r3, [r5, #0]
 8021f9e:	bd38      	pop	{r3, r4, r5, pc}
 8021fa0:	2002b078 	.word	0x2002b078

08021fa4 <__swbuf_r>:
 8021fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fa6:	460e      	mov	r6, r1
 8021fa8:	4614      	mov	r4, r2
 8021faa:	4605      	mov	r5, r0
 8021fac:	b118      	cbz	r0, 8021fb6 <__swbuf_r+0x12>
 8021fae:	6983      	ldr	r3, [r0, #24]
 8021fb0:	b90b      	cbnz	r3, 8021fb6 <__swbuf_r+0x12>
 8021fb2:	f000 f9a9 	bl	8022308 <__sinit>
 8021fb6:	4b21      	ldr	r3, [pc, #132]	; (802203c <__swbuf_r+0x98>)
 8021fb8:	429c      	cmp	r4, r3
 8021fba:	d12a      	bne.n	8022012 <__swbuf_r+0x6e>
 8021fbc:	686c      	ldr	r4, [r5, #4]
 8021fbe:	69a3      	ldr	r3, [r4, #24]
 8021fc0:	60a3      	str	r3, [r4, #8]
 8021fc2:	89a3      	ldrh	r3, [r4, #12]
 8021fc4:	071a      	lsls	r2, r3, #28
 8021fc6:	d52e      	bpl.n	8022026 <__swbuf_r+0x82>
 8021fc8:	6923      	ldr	r3, [r4, #16]
 8021fca:	b363      	cbz	r3, 8022026 <__swbuf_r+0x82>
 8021fcc:	6923      	ldr	r3, [r4, #16]
 8021fce:	6820      	ldr	r0, [r4, #0]
 8021fd0:	1ac0      	subs	r0, r0, r3
 8021fd2:	6963      	ldr	r3, [r4, #20]
 8021fd4:	b2f6      	uxtb	r6, r6
 8021fd6:	4298      	cmp	r0, r3
 8021fd8:	4637      	mov	r7, r6
 8021fda:	db04      	blt.n	8021fe6 <__swbuf_r+0x42>
 8021fdc:	4621      	mov	r1, r4
 8021fde:	4628      	mov	r0, r5
 8021fe0:	f000 f928 	bl	8022234 <_fflush_r>
 8021fe4:	bb28      	cbnz	r0, 8022032 <__swbuf_r+0x8e>
 8021fe6:	68a3      	ldr	r3, [r4, #8]
 8021fe8:	3b01      	subs	r3, #1
 8021fea:	60a3      	str	r3, [r4, #8]
 8021fec:	6823      	ldr	r3, [r4, #0]
 8021fee:	1c5a      	adds	r2, r3, #1
 8021ff0:	6022      	str	r2, [r4, #0]
 8021ff2:	701e      	strb	r6, [r3, #0]
 8021ff4:	6963      	ldr	r3, [r4, #20]
 8021ff6:	3001      	adds	r0, #1
 8021ff8:	4298      	cmp	r0, r3
 8021ffa:	d004      	beq.n	8022006 <__swbuf_r+0x62>
 8021ffc:	89a3      	ldrh	r3, [r4, #12]
 8021ffe:	07db      	lsls	r3, r3, #31
 8022000:	d519      	bpl.n	8022036 <__swbuf_r+0x92>
 8022002:	2e0a      	cmp	r6, #10
 8022004:	d117      	bne.n	8022036 <__swbuf_r+0x92>
 8022006:	4621      	mov	r1, r4
 8022008:	4628      	mov	r0, r5
 802200a:	f000 f913 	bl	8022234 <_fflush_r>
 802200e:	b190      	cbz	r0, 8022036 <__swbuf_r+0x92>
 8022010:	e00f      	b.n	8022032 <__swbuf_r+0x8e>
 8022012:	4b0b      	ldr	r3, [pc, #44]	; (8022040 <__swbuf_r+0x9c>)
 8022014:	429c      	cmp	r4, r3
 8022016:	d101      	bne.n	802201c <__swbuf_r+0x78>
 8022018:	68ac      	ldr	r4, [r5, #8]
 802201a:	e7d0      	b.n	8021fbe <__swbuf_r+0x1a>
 802201c:	4b09      	ldr	r3, [pc, #36]	; (8022044 <__swbuf_r+0xa0>)
 802201e:	429c      	cmp	r4, r3
 8022020:	bf08      	it	eq
 8022022:	68ec      	ldreq	r4, [r5, #12]
 8022024:	e7cb      	b.n	8021fbe <__swbuf_r+0x1a>
 8022026:	4621      	mov	r1, r4
 8022028:	4628      	mov	r0, r5
 802202a:	f000 f80d 	bl	8022048 <__swsetup_r>
 802202e:	2800      	cmp	r0, #0
 8022030:	d0cc      	beq.n	8021fcc <__swbuf_r+0x28>
 8022032:	f04f 37ff 	mov.w	r7, #4294967295
 8022036:	4638      	mov	r0, r7
 8022038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802203a:	bf00      	nop
 802203c:	0802b154 	.word	0x0802b154
 8022040:	0802b174 	.word	0x0802b174
 8022044:	0802b134 	.word	0x0802b134

08022048 <__swsetup_r>:
 8022048:	4b32      	ldr	r3, [pc, #200]	; (8022114 <__swsetup_r+0xcc>)
 802204a:	b570      	push	{r4, r5, r6, lr}
 802204c:	681d      	ldr	r5, [r3, #0]
 802204e:	4606      	mov	r6, r0
 8022050:	460c      	mov	r4, r1
 8022052:	b125      	cbz	r5, 802205e <__swsetup_r+0x16>
 8022054:	69ab      	ldr	r3, [r5, #24]
 8022056:	b913      	cbnz	r3, 802205e <__swsetup_r+0x16>
 8022058:	4628      	mov	r0, r5
 802205a:	f000 f955 	bl	8022308 <__sinit>
 802205e:	4b2e      	ldr	r3, [pc, #184]	; (8022118 <__swsetup_r+0xd0>)
 8022060:	429c      	cmp	r4, r3
 8022062:	d10f      	bne.n	8022084 <__swsetup_r+0x3c>
 8022064:	686c      	ldr	r4, [r5, #4]
 8022066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802206a:	b29a      	uxth	r2, r3
 802206c:	0715      	lsls	r5, r2, #28
 802206e:	d42c      	bmi.n	80220ca <__swsetup_r+0x82>
 8022070:	06d0      	lsls	r0, r2, #27
 8022072:	d411      	bmi.n	8022098 <__swsetup_r+0x50>
 8022074:	2209      	movs	r2, #9
 8022076:	6032      	str	r2, [r6, #0]
 8022078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802207c:	81a3      	strh	r3, [r4, #12]
 802207e:	f04f 30ff 	mov.w	r0, #4294967295
 8022082:	bd70      	pop	{r4, r5, r6, pc}
 8022084:	4b25      	ldr	r3, [pc, #148]	; (802211c <__swsetup_r+0xd4>)
 8022086:	429c      	cmp	r4, r3
 8022088:	d101      	bne.n	802208e <__swsetup_r+0x46>
 802208a:	68ac      	ldr	r4, [r5, #8]
 802208c:	e7eb      	b.n	8022066 <__swsetup_r+0x1e>
 802208e:	4b24      	ldr	r3, [pc, #144]	; (8022120 <__swsetup_r+0xd8>)
 8022090:	429c      	cmp	r4, r3
 8022092:	bf08      	it	eq
 8022094:	68ec      	ldreq	r4, [r5, #12]
 8022096:	e7e6      	b.n	8022066 <__swsetup_r+0x1e>
 8022098:	0751      	lsls	r1, r2, #29
 802209a:	d512      	bpl.n	80220c2 <__swsetup_r+0x7a>
 802209c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802209e:	b141      	cbz	r1, 80220b2 <__swsetup_r+0x6a>
 80220a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80220a4:	4299      	cmp	r1, r3
 80220a6:	d002      	beq.n	80220ae <__swsetup_r+0x66>
 80220a8:	4630      	mov	r0, r6
 80220aa:	f7ff fe5b 	bl	8021d64 <_free_r>
 80220ae:	2300      	movs	r3, #0
 80220b0:	6363      	str	r3, [r4, #52]	; 0x34
 80220b2:	89a3      	ldrh	r3, [r4, #12]
 80220b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80220b8:	81a3      	strh	r3, [r4, #12]
 80220ba:	2300      	movs	r3, #0
 80220bc:	6063      	str	r3, [r4, #4]
 80220be:	6923      	ldr	r3, [r4, #16]
 80220c0:	6023      	str	r3, [r4, #0]
 80220c2:	89a3      	ldrh	r3, [r4, #12]
 80220c4:	f043 0308 	orr.w	r3, r3, #8
 80220c8:	81a3      	strh	r3, [r4, #12]
 80220ca:	6923      	ldr	r3, [r4, #16]
 80220cc:	b94b      	cbnz	r3, 80220e2 <__swsetup_r+0x9a>
 80220ce:	89a3      	ldrh	r3, [r4, #12]
 80220d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80220d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80220d8:	d003      	beq.n	80220e2 <__swsetup_r+0x9a>
 80220da:	4621      	mov	r1, r4
 80220dc:	4630      	mov	r0, r6
 80220de:	f000 f9c1 	bl	8022464 <__smakebuf_r>
 80220e2:	89a2      	ldrh	r2, [r4, #12]
 80220e4:	f012 0301 	ands.w	r3, r2, #1
 80220e8:	d00c      	beq.n	8022104 <__swsetup_r+0xbc>
 80220ea:	2300      	movs	r3, #0
 80220ec:	60a3      	str	r3, [r4, #8]
 80220ee:	6963      	ldr	r3, [r4, #20]
 80220f0:	425b      	negs	r3, r3
 80220f2:	61a3      	str	r3, [r4, #24]
 80220f4:	6923      	ldr	r3, [r4, #16]
 80220f6:	b953      	cbnz	r3, 802210e <__swsetup_r+0xc6>
 80220f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80220fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022100:	d1ba      	bne.n	8022078 <__swsetup_r+0x30>
 8022102:	bd70      	pop	{r4, r5, r6, pc}
 8022104:	0792      	lsls	r2, r2, #30
 8022106:	bf58      	it	pl
 8022108:	6963      	ldrpl	r3, [r4, #20]
 802210a:	60a3      	str	r3, [r4, #8]
 802210c:	e7f2      	b.n	80220f4 <__swsetup_r+0xac>
 802210e:	2000      	movs	r0, #0
 8022110:	e7f7      	b.n	8022102 <__swsetup_r+0xba>
 8022112:	bf00      	nop
 8022114:	200000e4 	.word	0x200000e4
 8022118:	0802b154 	.word	0x0802b154
 802211c:	0802b174 	.word	0x0802b174
 8022120:	0802b134 	.word	0x0802b134

08022124 <__sflush_r>:
 8022124:	898a      	ldrh	r2, [r1, #12]
 8022126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802212a:	4605      	mov	r5, r0
 802212c:	0710      	lsls	r0, r2, #28
 802212e:	460c      	mov	r4, r1
 8022130:	d45a      	bmi.n	80221e8 <__sflush_r+0xc4>
 8022132:	684b      	ldr	r3, [r1, #4]
 8022134:	2b00      	cmp	r3, #0
 8022136:	dc05      	bgt.n	8022144 <__sflush_r+0x20>
 8022138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802213a:	2b00      	cmp	r3, #0
 802213c:	dc02      	bgt.n	8022144 <__sflush_r+0x20>
 802213e:	2000      	movs	r0, #0
 8022140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022146:	2e00      	cmp	r6, #0
 8022148:	d0f9      	beq.n	802213e <__sflush_r+0x1a>
 802214a:	2300      	movs	r3, #0
 802214c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022150:	682f      	ldr	r7, [r5, #0]
 8022152:	602b      	str	r3, [r5, #0]
 8022154:	d033      	beq.n	80221be <__sflush_r+0x9a>
 8022156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022158:	89a3      	ldrh	r3, [r4, #12]
 802215a:	075a      	lsls	r2, r3, #29
 802215c:	d505      	bpl.n	802216a <__sflush_r+0x46>
 802215e:	6863      	ldr	r3, [r4, #4]
 8022160:	1ac0      	subs	r0, r0, r3
 8022162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022164:	b10b      	cbz	r3, 802216a <__sflush_r+0x46>
 8022166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022168:	1ac0      	subs	r0, r0, r3
 802216a:	2300      	movs	r3, #0
 802216c:	4602      	mov	r2, r0
 802216e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022170:	6a21      	ldr	r1, [r4, #32]
 8022172:	4628      	mov	r0, r5
 8022174:	47b0      	blx	r6
 8022176:	1c43      	adds	r3, r0, #1
 8022178:	89a3      	ldrh	r3, [r4, #12]
 802217a:	d106      	bne.n	802218a <__sflush_r+0x66>
 802217c:	6829      	ldr	r1, [r5, #0]
 802217e:	291d      	cmp	r1, #29
 8022180:	d84b      	bhi.n	802221a <__sflush_r+0xf6>
 8022182:	4a2b      	ldr	r2, [pc, #172]	; (8022230 <__sflush_r+0x10c>)
 8022184:	40ca      	lsrs	r2, r1
 8022186:	07d6      	lsls	r6, r2, #31
 8022188:	d547      	bpl.n	802221a <__sflush_r+0xf6>
 802218a:	2200      	movs	r2, #0
 802218c:	6062      	str	r2, [r4, #4]
 802218e:	04d9      	lsls	r1, r3, #19
 8022190:	6922      	ldr	r2, [r4, #16]
 8022192:	6022      	str	r2, [r4, #0]
 8022194:	d504      	bpl.n	80221a0 <__sflush_r+0x7c>
 8022196:	1c42      	adds	r2, r0, #1
 8022198:	d101      	bne.n	802219e <__sflush_r+0x7a>
 802219a:	682b      	ldr	r3, [r5, #0]
 802219c:	b903      	cbnz	r3, 80221a0 <__sflush_r+0x7c>
 802219e:	6560      	str	r0, [r4, #84]	; 0x54
 80221a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80221a2:	602f      	str	r7, [r5, #0]
 80221a4:	2900      	cmp	r1, #0
 80221a6:	d0ca      	beq.n	802213e <__sflush_r+0x1a>
 80221a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80221ac:	4299      	cmp	r1, r3
 80221ae:	d002      	beq.n	80221b6 <__sflush_r+0x92>
 80221b0:	4628      	mov	r0, r5
 80221b2:	f7ff fdd7 	bl	8021d64 <_free_r>
 80221b6:	2000      	movs	r0, #0
 80221b8:	6360      	str	r0, [r4, #52]	; 0x34
 80221ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221be:	6a21      	ldr	r1, [r4, #32]
 80221c0:	2301      	movs	r3, #1
 80221c2:	4628      	mov	r0, r5
 80221c4:	47b0      	blx	r6
 80221c6:	1c41      	adds	r1, r0, #1
 80221c8:	d1c6      	bne.n	8022158 <__sflush_r+0x34>
 80221ca:	682b      	ldr	r3, [r5, #0]
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d0c3      	beq.n	8022158 <__sflush_r+0x34>
 80221d0:	2b1d      	cmp	r3, #29
 80221d2:	d001      	beq.n	80221d8 <__sflush_r+0xb4>
 80221d4:	2b16      	cmp	r3, #22
 80221d6:	d101      	bne.n	80221dc <__sflush_r+0xb8>
 80221d8:	602f      	str	r7, [r5, #0]
 80221da:	e7b0      	b.n	802213e <__sflush_r+0x1a>
 80221dc:	89a3      	ldrh	r3, [r4, #12]
 80221de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80221e2:	81a3      	strh	r3, [r4, #12]
 80221e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221e8:	690f      	ldr	r7, [r1, #16]
 80221ea:	2f00      	cmp	r7, #0
 80221ec:	d0a7      	beq.n	802213e <__sflush_r+0x1a>
 80221ee:	0793      	lsls	r3, r2, #30
 80221f0:	680e      	ldr	r6, [r1, #0]
 80221f2:	bf08      	it	eq
 80221f4:	694b      	ldreq	r3, [r1, #20]
 80221f6:	600f      	str	r7, [r1, #0]
 80221f8:	bf18      	it	ne
 80221fa:	2300      	movne	r3, #0
 80221fc:	eba6 0807 	sub.w	r8, r6, r7
 8022200:	608b      	str	r3, [r1, #8]
 8022202:	f1b8 0f00 	cmp.w	r8, #0
 8022206:	dd9a      	ble.n	802213e <__sflush_r+0x1a>
 8022208:	4643      	mov	r3, r8
 802220a:	463a      	mov	r2, r7
 802220c:	6a21      	ldr	r1, [r4, #32]
 802220e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022210:	4628      	mov	r0, r5
 8022212:	47b0      	blx	r6
 8022214:	2800      	cmp	r0, #0
 8022216:	dc07      	bgt.n	8022228 <__sflush_r+0x104>
 8022218:	89a3      	ldrh	r3, [r4, #12]
 802221a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802221e:	81a3      	strh	r3, [r4, #12]
 8022220:	f04f 30ff 	mov.w	r0, #4294967295
 8022224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022228:	4407      	add	r7, r0
 802222a:	eba8 0800 	sub.w	r8, r8, r0
 802222e:	e7e8      	b.n	8022202 <__sflush_r+0xde>
 8022230:	20400001 	.word	0x20400001

08022234 <_fflush_r>:
 8022234:	b538      	push	{r3, r4, r5, lr}
 8022236:	690b      	ldr	r3, [r1, #16]
 8022238:	4605      	mov	r5, r0
 802223a:	460c      	mov	r4, r1
 802223c:	b1db      	cbz	r3, 8022276 <_fflush_r+0x42>
 802223e:	b118      	cbz	r0, 8022248 <_fflush_r+0x14>
 8022240:	6983      	ldr	r3, [r0, #24]
 8022242:	b90b      	cbnz	r3, 8022248 <_fflush_r+0x14>
 8022244:	f000 f860 	bl	8022308 <__sinit>
 8022248:	4b0c      	ldr	r3, [pc, #48]	; (802227c <_fflush_r+0x48>)
 802224a:	429c      	cmp	r4, r3
 802224c:	d109      	bne.n	8022262 <_fflush_r+0x2e>
 802224e:	686c      	ldr	r4, [r5, #4]
 8022250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022254:	b17b      	cbz	r3, 8022276 <_fflush_r+0x42>
 8022256:	4621      	mov	r1, r4
 8022258:	4628      	mov	r0, r5
 802225a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802225e:	f7ff bf61 	b.w	8022124 <__sflush_r>
 8022262:	4b07      	ldr	r3, [pc, #28]	; (8022280 <_fflush_r+0x4c>)
 8022264:	429c      	cmp	r4, r3
 8022266:	d101      	bne.n	802226c <_fflush_r+0x38>
 8022268:	68ac      	ldr	r4, [r5, #8]
 802226a:	e7f1      	b.n	8022250 <_fflush_r+0x1c>
 802226c:	4b05      	ldr	r3, [pc, #20]	; (8022284 <_fflush_r+0x50>)
 802226e:	429c      	cmp	r4, r3
 8022270:	bf08      	it	eq
 8022272:	68ec      	ldreq	r4, [r5, #12]
 8022274:	e7ec      	b.n	8022250 <_fflush_r+0x1c>
 8022276:	2000      	movs	r0, #0
 8022278:	bd38      	pop	{r3, r4, r5, pc}
 802227a:	bf00      	nop
 802227c:	0802b154 	.word	0x0802b154
 8022280:	0802b174 	.word	0x0802b174
 8022284:	0802b134 	.word	0x0802b134

08022288 <_cleanup_r>:
 8022288:	4901      	ldr	r1, [pc, #4]	; (8022290 <_cleanup_r+0x8>)
 802228a:	f000 b8a9 	b.w	80223e0 <_fwalk_reent>
 802228e:	bf00      	nop
 8022290:	08022235 	.word	0x08022235

08022294 <std.isra.0>:
 8022294:	2300      	movs	r3, #0
 8022296:	b510      	push	{r4, lr}
 8022298:	4604      	mov	r4, r0
 802229a:	6003      	str	r3, [r0, #0]
 802229c:	6043      	str	r3, [r0, #4]
 802229e:	6083      	str	r3, [r0, #8]
 80222a0:	8181      	strh	r1, [r0, #12]
 80222a2:	6643      	str	r3, [r0, #100]	; 0x64
 80222a4:	81c2      	strh	r2, [r0, #14]
 80222a6:	6103      	str	r3, [r0, #16]
 80222a8:	6143      	str	r3, [r0, #20]
 80222aa:	6183      	str	r3, [r0, #24]
 80222ac:	4619      	mov	r1, r3
 80222ae:	2208      	movs	r2, #8
 80222b0:	305c      	adds	r0, #92	; 0x5c
 80222b2:	f7ff fd4f 	bl	8021d54 <memset>
 80222b6:	4b05      	ldr	r3, [pc, #20]	; (80222cc <std.isra.0+0x38>)
 80222b8:	6263      	str	r3, [r4, #36]	; 0x24
 80222ba:	4b05      	ldr	r3, [pc, #20]	; (80222d0 <std.isra.0+0x3c>)
 80222bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80222be:	4b05      	ldr	r3, [pc, #20]	; (80222d4 <std.isra.0+0x40>)
 80222c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80222c2:	4b05      	ldr	r3, [pc, #20]	; (80222d8 <std.isra.0+0x44>)
 80222c4:	6224      	str	r4, [r4, #32]
 80222c6:	6323      	str	r3, [r4, #48]	; 0x30
 80222c8:	bd10      	pop	{r4, pc}
 80222ca:	bf00      	nop
 80222cc:	080224e9 	.word	0x080224e9
 80222d0:	0802250b 	.word	0x0802250b
 80222d4:	08022543 	.word	0x08022543
 80222d8:	08022567 	.word	0x08022567

080222dc <__sfmoreglue>:
 80222dc:	b570      	push	{r4, r5, r6, lr}
 80222de:	1e4a      	subs	r2, r1, #1
 80222e0:	2568      	movs	r5, #104	; 0x68
 80222e2:	4355      	muls	r5, r2
 80222e4:	460e      	mov	r6, r1
 80222e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80222ea:	f7ff fd89 	bl	8021e00 <_malloc_r>
 80222ee:	4604      	mov	r4, r0
 80222f0:	b140      	cbz	r0, 8022304 <__sfmoreglue+0x28>
 80222f2:	2100      	movs	r1, #0
 80222f4:	e880 0042 	stmia.w	r0, {r1, r6}
 80222f8:	300c      	adds	r0, #12
 80222fa:	60a0      	str	r0, [r4, #8]
 80222fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022300:	f7ff fd28 	bl	8021d54 <memset>
 8022304:	4620      	mov	r0, r4
 8022306:	bd70      	pop	{r4, r5, r6, pc}

08022308 <__sinit>:
 8022308:	6983      	ldr	r3, [r0, #24]
 802230a:	b510      	push	{r4, lr}
 802230c:	4604      	mov	r4, r0
 802230e:	bb33      	cbnz	r3, 802235e <__sinit+0x56>
 8022310:	6483      	str	r3, [r0, #72]	; 0x48
 8022312:	64c3      	str	r3, [r0, #76]	; 0x4c
 8022314:	6503      	str	r3, [r0, #80]	; 0x50
 8022316:	4b12      	ldr	r3, [pc, #72]	; (8022360 <__sinit+0x58>)
 8022318:	4a12      	ldr	r2, [pc, #72]	; (8022364 <__sinit+0x5c>)
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	6282      	str	r2, [r0, #40]	; 0x28
 802231e:	4298      	cmp	r0, r3
 8022320:	bf04      	itt	eq
 8022322:	2301      	moveq	r3, #1
 8022324:	6183      	streq	r3, [r0, #24]
 8022326:	f000 f81f 	bl	8022368 <__sfp>
 802232a:	6060      	str	r0, [r4, #4]
 802232c:	4620      	mov	r0, r4
 802232e:	f000 f81b 	bl	8022368 <__sfp>
 8022332:	60a0      	str	r0, [r4, #8]
 8022334:	4620      	mov	r0, r4
 8022336:	f000 f817 	bl	8022368 <__sfp>
 802233a:	2200      	movs	r2, #0
 802233c:	60e0      	str	r0, [r4, #12]
 802233e:	2104      	movs	r1, #4
 8022340:	6860      	ldr	r0, [r4, #4]
 8022342:	f7ff ffa7 	bl	8022294 <std.isra.0>
 8022346:	2201      	movs	r2, #1
 8022348:	2109      	movs	r1, #9
 802234a:	68a0      	ldr	r0, [r4, #8]
 802234c:	f7ff ffa2 	bl	8022294 <std.isra.0>
 8022350:	2202      	movs	r2, #2
 8022352:	2112      	movs	r1, #18
 8022354:	68e0      	ldr	r0, [r4, #12]
 8022356:	f7ff ff9d 	bl	8022294 <std.isra.0>
 802235a:	2301      	movs	r3, #1
 802235c:	61a3      	str	r3, [r4, #24]
 802235e:	bd10      	pop	{r4, pc}
 8022360:	0802b130 	.word	0x0802b130
 8022364:	08022289 	.word	0x08022289

08022368 <__sfp>:
 8022368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802236a:	4b1c      	ldr	r3, [pc, #112]	; (80223dc <__sfp+0x74>)
 802236c:	681e      	ldr	r6, [r3, #0]
 802236e:	69b3      	ldr	r3, [r6, #24]
 8022370:	4607      	mov	r7, r0
 8022372:	b913      	cbnz	r3, 802237a <__sfp+0x12>
 8022374:	4630      	mov	r0, r6
 8022376:	f7ff ffc7 	bl	8022308 <__sinit>
 802237a:	3648      	adds	r6, #72	; 0x48
 802237c:	68b4      	ldr	r4, [r6, #8]
 802237e:	6873      	ldr	r3, [r6, #4]
 8022380:	3b01      	subs	r3, #1
 8022382:	d503      	bpl.n	802238c <__sfp+0x24>
 8022384:	6833      	ldr	r3, [r6, #0]
 8022386:	b133      	cbz	r3, 8022396 <__sfp+0x2e>
 8022388:	6836      	ldr	r6, [r6, #0]
 802238a:	e7f7      	b.n	802237c <__sfp+0x14>
 802238c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022390:	b16d      	cbz	r5, 80223ae <__sfp+0x46>
 8022392:	3468      	adds	r4, #104	; 0x68
 8022394:	e7f4      	b.n	8022380 <__sfp+0x18>
 8022396:	2104      	movs	r1, #4
 8022398:	4638      	mov	r0, r7
 802239a:	f7ff ff9f 	bl	80222dc <__sfmoreglue>
 802239e:	6030      	str	r0, [r6, #0]
 80223a0:	2800      	cmp	r0, #0
 80223a2:	d1f1      	bne.n	8022388 <__sfp+0x20>
 80223a4:	230c      	movs	r3, #12
 80223a6:	603b      	str	r3, [r7, #0]
 80223a8:	4604      	mov	r4, r0
 80223aa:	4620      	mov	r0, r4
 80223ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80223ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80223b2:	81e3      	strh	r3, [r4, #14]
 80223b4:	2301      	movs	r3, #1
 80223b6:	81a3      	strh	r3, [r4, #12]
 80223b8:	6665      	str	r5, [r4, #100]	; 0x64
 80223ba:	6025      	str	r5, [r4, #0]
 80223bc:	60a5      	str	r5, [r4, #8]
 80223be:	6065      	str	r5, [r4, #4]
 80223c0:	6125      	str	r5, [r4, #16]
 80223c2:	6165      	str	r5, [r4, #20]
 80223c4:	61a5      	str	r5, [r4, #24]
 80223c6:	2208      	movs	r2, #8
 80223c8:	4629      	mov	r1, r5
 80223ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80223ce:	f7ff fcc1 	bl	8021d54 <memset>
 80223d2:	6365      	str	r5, [r4, #52]	; 0x34
 80223d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80223d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80223d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80223da:	e7e6      	b.n	80223aa <__sfp+0x42>
 80223dc:	0802b130 	.word	0x0802b130

080223e0 <_fwalk_reent>:
 80223e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223e4:	4680      	mov	r8, r0
 80223e6:	4689      	mov	r9, r1
 80223e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80223ec:	2600      	movs	r6, #0
 80223ee:	b914      	cbnz	r4, 80223f6 <_fwalk_reent+0x16>
 80223f0:	4630      	mov	r0, r6
 80223f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80223f6:	68a5      	ldr	r5, [r4, #8]
 80223f8:	6867      	ldr	r7, [r4, #4]
 80223fa:	3f01      	subs	r7, #1
 80223fc:	d501      	bpl.n	8022402 <_fwalk_reent+0x22>
 80223fe:	6824      	ldr	r4, [r4, #0]
 8022400:	e7f5      	b.n	80223ee <_fwalk_reent+0xe>
 8022402:	89ab      	ldrh	r3, [r5, #12]
 8022404:	2b01      	cmp	r3, #1
 8022406:	d907      	bls.n	8022418 <_fwalk_reent+0x38>
 8022408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802240c:	3301      	adds	r3, #1
 802240e:	d003      	beq.n	8022418 <_fwalk_reent+0x38>
 8022410:	4629      	mov	r1, r5
 8022412:	4640      	mov	r0, r8
 8022414:	47c8      	blx	r9
 8022416:	4306      	orrs	r6, r0
 8022418:	3568      	adds	r5, #104	; 0x68
 802241a:	e7ee      	b.n	80223fa <_fwalk_reent+0x1a>

0802241c <__swhatbuf_r>:
 802241c:	b570      	push	{r4, r5, r6, lr}
 802241e:	460e      	mov	r6, r1
 8022420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022424:	2900      	cmp	r1, #0
 8022426:	b090      	sub	sp, #64	; 0x40
 8022428:	4614      	mov	r4, r2
 802242a:	461d      	mov	r5, r3
 802242c:	da07      	bge.n	802243e <__swhatbuf_r+0x22>
 802242e:	2300      	movs	r3, #0
 8022430:	602b      	str	r3, [r5, #0]
 8022432:	89b3      	ldrh	r3, [r6, #12]
 8022434:	061a      	lsls	r2, r3, #24
 8022436:	d410      	bmi.n	802245a <__swhatbuf_r+0x3e>
 8022438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802243c:	e00e      	b.n	802245c <__swhatbuf_r+0x40>
 802243e:	aa01      	add	r2, sp, #4
 8022440:	f000 f8b8 	bl	80225b4 <_fstat_r>
 8022444:	2800      	cmp	r0, #0
 8022446:	dbf2      	blt.n	802242e <__swhatbuf_r+0x12>
 8022448:	9a02      	ldr	r2, [sp, #8]
 802244a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802244e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022452:	425a      	negs	r2, r3
 8022454:	415a      	adcs	r2, r3
 8022456:	602a      	str	r2, [r5, #0]
 8022458:	e7ee      	b.n	8022438 <__swhatbuf_r+0x1c>
 802245a:	2340      	movs	r3, #64	; 0x40
 802245c:	2000      	movs	r0, #0
 802245e:	6023      	str	r3, [r4, #0]
 8022460:	b010      	add	sp, #64	; 0x40
 8022462:	bd70      	pop	{r4, r5, r6, pc}

08022464 <__smakebuf_r>:
 8022464:	898b      	ldrh	r3, [r1, #12]
 8022466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022468:	079d      	lsls	r5, r3, #30
 802246a:	4606      	mov	r6, r0
 802246c:	460c      	mov	r4, r1
 802246e:	d507      	bpl.n	8022480 <__smakebuf_r+0x1c>
 8022470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022474:	6023      	str	r3, [r4, #0]
 8022476:	6123      	str	r3, [r4, #16]
 8022478:	2301      	movs	r3, #1
 802247a:	6163      	str	r3, [r4, #20]
 802247c:	b002      	add	sp, #8
 802247e:	bd70      	pop	{r4, r5, r6, pc}
 8022480:	ab01      	add	r3, sp, #4
 8022482:	466a      	mov	r2, sp
 8022484:	f7ff ffca 	bl	802241c <__swhatbuf_r>
 8022488:	9900      	ldr	r1, [sp, #0]
 802248a:	4605      	mov	r5, r0
 802248c:	4630      	mov	r0, r6
 802248e:	f7ff fcb7 	bl	8021e00 <_malloc_r>
 8022492:	b948      	cbnz	r0, 80224a8 <__smakebuf_r+0x44>
 8022494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022498:	059a      	lsls	r2, r3, #22
 802249a:	d4ef      	bmi.n	802247c <__smakebuf_r+0x18>
 802249c:	f023 0303 	bic.w	r3, r3, #3
 80224a0:	f043 0302 	orr.w	r3, r3, #2
 80224a4:	81a3      	strh	r3, [r4, #12]
 80224a6:	e7e3      	b.n	8022470 <__smakebuf_r+0xc>
 80224a8:	4b0d      	ldr	r3, [pc, #52]	; (80224e0 <__smakebuf_r+0x7c>)
 80224aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80224ac:	89a3      	ldrh	r3, [r4, #12]
 80224ae:	6020      	str	r0, [r4, #0]
 80224b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80224b4:	81a3      	strh	r3, [r4, #12]
 80224b6:	9b00      	ldr	r3, [sp, #0]
 80224b8:	6163      	str	r3, [r4, #20]
 80224ba:	9b01      	ldr	r3, [sp, #4]
 80224bc:	6120      	str	r0, [r4, #16]
 80224be:	b15b      	cbz	r3, 80224d8 <__smakebuf_r+0x74>
 80224c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80224c4:	4630      	mov	r0, r6
 80224c6:	f000 f887 	bl	80225d8 <_isatty_r>
 80224ca:	b128      	cbz	r0, 80224d8 <__smakebuf_r+0x74>
 80224cc:	89a3      	ldrh	r3, [r4, #12]
 80224ce:	f023 0303 	bic.w	r3, r3, #3
 80224d2:	f043 0301 	orr.w	r3, r3, #1
 80224d6:	81a3      	strh	r3, [r4, #12]
 80224d8:	89a3      	ldrh	r3, [r4, #12]
 80224da:	431d      	orrs	r5, r3
 80224dc:	81a5      	strh	r5, [r4, #12]
 80224de:	e7cd      	b.n	802247c <__smakebuf_r+0x18>
 80224e0:	08022289 	.word	0x08022289

080224e4 <__malloc_lock>:
 80224e4:	4770      	bx	lr

080224e6 <__malloc_unlock>:
 80224e6:	4770      	bx	lr

080224e8 <__sread>:
 80224e8:	b510      	push	{r4, lr}
 80224ea:	460c      	mov	r4, r1
 80224ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80224f0:	f000 f894 	bl	802261c <_read_r>
 80224f4:	2800      	cmp	r0, #0
 80224f6:	bfab      	itete	ge
 80224f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80224fa:	89a3      	ldrhlt	r3, [r4, #12]
 80224fc:	181b      	addge	r3, r3, r0
 80224fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022502:	bfac      	ite	ge
 8022504:	6563      	strge	r3, [r4, #84]	; 0x54
 8022506:	81a3      	strhlt	r3, [r4, #12]
 8022508:	bd10      	pop	{r4, pc}

0802250a <__swrite>:
 802250a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802250e:	461f      	mov	r7, r3
 8022510:	898b      	ldrh	r3, [r1, #12]
 8022512:	05db      	lsls	r3, r3, #23
 8022514:	4605      	mov	r5, r0
 8022516:	460c      	mov	r4, r1
 8022518:	4616      	mov	r6, r2
 802251a:	d505      	bpl.n	8022528 <__swrite+0x1e>
 802251c:	2302      	movs	r3, #2
 802251e:	2200      	movs	r2, #0
 8022520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022524:	f000 f868 	bl	80225f8 <_lseek_r>
 8022528:	89a3      	ldrh	r3, [r4, #12]
 802252a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802252e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022532:	81a3      	strh	r3, [r4, #12]
 8022534:	4632      	mov	r2, r6
 8022536:	463b      	mov	r3, r7
 8022538:	4628      	mov	r0, r5
 802253a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802253e:	f000 b817 	b.w	8022570 <_write_r>

08022542 <__sseek>:
 8022542:	b510      	push	{r4, lr}
 8022544:	460c      	mov	r4, r1
 8022546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802254a:	f000 f855 	bl	80225f8 <_lseek_r>
 802254e:	1c43      	adds	r3, r0, #1
 8022550:	89a3      	ldrh	r3, [r4, #12]
 8022552:	bf15      	itete	ne
 8022554:	6560      	strne	r0, [r4, #84]	; 0x54
 8022556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802255a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802255e:	81a3      	strheq	r3, [r4, #12]
 8022560:	bf18      	it	ne
 8022562:	81a3      	strhne	r3, [r4, #12]
 8022564:	bd10      	pop	{r4, pc}

08022566 <__sclose>:
 8022566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802256a:	f000 b813 	b.w	8022594 <_close_r>
	...

08022570 <_write_r>:
 8022570:	b538      	push	{r3, r4, r5, lr}
 8022572:	4c07      	ldr	r4, [pc, #28]	; (8022590 <_write_r+0x20>)
 8022574:	4605      	mov	r5, r0
 8022576:	4608      	mov	r0, r1
 8022578:	4611      	mov	r1, r2
 802257a:	2200      	movs	r2, #0
 802257c:	6022      	str	r2, [r4, #0]
 802257e:	461a      	mov	r2, r3
 8022580:	f7de fd35 	bl	8000fee <_write>
 8022584:	1c43      	adds	r3, r0, #1
 8022586:	d102      	bne.n	802258e <_write_r+0x1e>
 8022588:	6823      	ldr	r3, [r4, #0]
 802258a:	b103      	cbz	r3, 802258e <_write_r+0x1e>
 802258c:	602b      	str	r3, [r5, #0]
 802258e:	bd38      	pop	{r3, r4, r5, pc}
 8022590:	2002b078 	.word	0x2002b078

08022594 <_close_r>:
 8022594:	b538      	push	{r3, r4, r5, lr}
 8022596:	4c06      	ldr	r4, [pc, #24]	; (80225b0 <_close_r+0x1c>)
 8022598:	2300      	movs	r3, #0
 802259a:	4605      	mov	r5, r0
 802259c:	4608      	mov	r0, r1
 802259e:	6023      	str	r3, [r4, #0]
 80225a0:	f7de fd4e 	bl	8001040 <_close>
 80225a4:	1c43      	adds	r3, r0, #1
 80225a6:	d102      	bne.n	80225ae <_close_r+0x1a>
 80225a8:	6823      	ldr	r3, [r4, #0]
 80225aa:	b103      	cbz	r3, 80225ae <_close_r+0x1a>
 80225ac:	602b      	str	r3, [r5, #0]
 80225ae:	bd38      	pop	{r3, r4, r5, pc}
 80225b0:	2002b078 	.word	0x2002b078

080225b4 <_fstat_r>:
 80225b4:	b538      	push	{r3, r4, r5, lr}
 80225b6:	4c07      	ldr	r4, [pc, #28]	; (80225d4 <_fstat_r+0x20>)
 80225b8:	2300      	movs	r3, #0
 80225ba:	4605      	mov	r5, r0
 80225bc:	4608      	mov	r0, r1
 80225be:	4611      	mov	r1, r2
 80225c0:	6023      	str	r3, [r4, #0]
 80225c2:	f7de fd40 	bl	8001046 <_fstat>
 80225c6:	1c43      	adds	r3, r0, #1
 80225c8:	d102      	bne.n	80225d0 <_fstat_r+0x1c>
 80225ca:	6823      	ldr	r3, [r4, #0]
 80225cc:	b103      	cbz	r3, 80225d0 <_fstat_r+0x1c>
 80225ce:	602b      	str	r3, [r5, #0]
 80225d0:	bd38      	pop	{r3, r4, r5, pc}
 80225d2:	bf00      	nop
 80225d4:	2002b078 	.word	0x2002b078

080225d8 <_isatty_r>:
 80225d8:	b538      	push	{r3, r4, r5, lr}
 80225da:	4c06      	ldr	r4, [pc, #24]	; (80225f4 <_isatty_r+0x1c>)
 80225dc:	2300      	movs	r3, #0
 80225de:	4605      	mov	r5, r0
 80225e0:	4608      	mov	r0, r1
 80225e2:	6023      	str	r3, [r4, #0]
 80225e4:	f7de fd34 	bl	8001050 <_isatty>
 80225e8:	1c43      	adds	r3, r0, #1
 80225ea:	d102      	bne.n	80225f2 <_isatty_r+0x1a>
 80225ec:	6823      	ldr	r3, [r4, #0]
 80225ee:	b103      	cbz	r3, 80225f2 <_isatty_r+0x1a>
 80225f0:	602b      	str	r3, [r5, #0]
 80225f2:	bd38      	pop	{r3, r4, r5, pc}
 80225f4:	2002b078 	.word	0x2002b078

080225f8 <_lseek_r>:
 80225f8:	b538      	push	{r3, r4, r5, lr}
 80225fa:	4c07      	ldr	r4, [pc, #28]	; (8022618 <_lseek_r+0x20>)
 80225fc:	4605      	mov	r5, r0
 80225fe:	4608      	mov	r0, r1
 8022600:	4611      	mov	r1, r2
 8022602:	2200      	movs	r2, #0
 8022604:	6022      	str	r2, [r4, #0]
 8022606:	461a      	mov	r2, r3
 8022608:	f7de fd24 	bl	8001054 <_lseek>
 802260c:	1c43      	adds	r3, r0, #1
 802260e:	d102      	bne.n	8022616 <_lseek_r+0x1e>
 8022610:	6823      	ldr	r3, [r4, #0]
 8022612:	b103      	cbz	r3, 8022616 <_lseek_r+0x1e>
 8022614:	602b      	str	r3, [r5, #0]
 8022616:	bd38      	pop	{r3, r4, r5, pc}
 8022618:	2002b078 	.word	0x2002b078

0802261c <_read_r>:
 802261c:	b538      	push	{r3, r4, r5, lr}
 802261e:	4c07      	ldr	r4, [pc, #28]	; (802263c <_read_r+0x20>)
 8022620:	4605      	mov	r5, r0
 8022622:	4608      	mov	r0, r1
 8022624:	4611      	mov	r1, r2
 8022626:	2200      	movs	r2, #0
 8022628:	6022      	str	r2, [r4, #0]
 802262a:	461a      	mov	r2, r3
 802262c:	f7de fcd1 	bl	8000fd2 <_read>
 8022630:	1c43      	adds	r3, r0, #1
 8022632:	d102      	bne.n	802263a <_read_r+0x1e>
 8022634:	6823      	ldr	r3, [r4, #0]
 8022636:	b103      	cbz	r3, 802263a <_read_r+0x1e>
 8022638:	602b      	str	r3, [r5, #0]
 802263a:	bd38      	pop	{r3, r4, r5, pc}
 802263c:	2002b078 	.word	0x2002b078

08022640 <ceil>:
 8022640:	ec51 0b10 	vmov	r0, r1, d0
 8022644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022648:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802264c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022650:	2e13      	cmp	r6, #19
 8022652:	ee10 8a10 	vmov	r8, s0
 8022656:	460c      	mov	r4, r1
 8022658:	ee10 5a10 	vmov	r5, s0
 802265c:	dc31      	bgt.n	80226c2 <ceil+0x82>
 802265e:	2e00      	cmp	r6, #0
 8022660:	da13      	bge.n	802268a <ceil+0x4a>
 8022662:	a335      	add	r3, pc, #212	; (adr r3, 8022738 <ceil+0xf8>)
 8022664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022668:	f7dd fdd8 	bl	800021c <__adddf3>
 802266c:	2200      	movs	r2, #0
 802266e:	2300      	movs	r3, #0
 8022670:	f7de fa16 	bl	8000aa0 <__aeabi_dcmpgt>
 8022674:	b130      	cbz	r0, 8022684 <ceil+0x44>
 8022676:	2c00      	cmp	r4, #0
 8022678:	db56      	blt.n	8022728 <ceil+0xe8>
 802267a:	ea54 0408 	orrs.w	r4, r4, r8
 802267e:	d057      	beq.n	8022730 <ceil+0xf0>
 8022680:	4c2f      	ldr	r4, [pc, #188]	; (8022740 <ceil+0x100>)
 8022682:	2500      	movs	r5, #0
 8022684:	4621      	mov	r1, r4
 8022686:	4628      	mov	r0, r5
 8022688:	e025      	b.n	80226d6 <ceil+0x96>
 802268a:	4f2e      	ldr	r7, [pc, #184]	; (8022744 <ceil+0x104>)
 802268c:	4137      	asrs	r7, r6
 802268e:	ea01 0307 	and.w	r3, r1, r7
 8022692:	4303      	orrs	r3, r0
 8022694:	d01f      	beq.n	80226d6 <ceil+0x96>
 8022696:	a328      	add	r3, pc, #160	; (adr r3, 8022738 <ceil+0xf8>)
 8022698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802269c:	f7dd fdbe 	bl	800021c <__adddf3>
 80226a0:	2200      	movs	r2, #0
 80226a2:	2300      	movs	r3, #0
 80226a4:	f7de f9fc 	bl	8000aa0 <__aeabi_dcmpgt>
 80226a8:	2800      	cmp	r0, #0
 80226aa:	d0eb      	beq.n	8022684 <ceil+0x44>
 80226ac:	2c00      	cmp	r4, #0
 80226ae:	bfc2      	ittt	gt
 80226b0:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80226b4:	fa43 f606 	asrgt.w	r6, r3, r6
 80226b8:	19a4      	addgt	r4, r4, r6
 80226ba:	ea24 0407 	bic.w	r4, r4, r7
 80226be:	2500      	movs	r5, #0
 80226c0:	e7e0      	b.n	8022684 <ceil+0x44>
 80226c2:	2e33      	cmp	r6, #51	; 0x33
 80226c4:	dd0b      	ble.n	80226de <ceil+0x9e>
 80226c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80226ca:	d104      	bne.n	80226d6 <ceil+0x96>
 80226cc:	ee10 2a10 	vmov	r2, s0
 80226d0:	460b      	mov	r3, r1
 80226d2:	f7dd fda3 	bl	800021c <__adddf3>
 80226d6:	ec41 0b10 	vmov	d0, r0, r1
 80226da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226de:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80226e2:	f04f 33ff 	mov.w	r3, #4294967295
 80226e6:	fa23 f707 	lsr.w	r7, r3, r7
 80226ea:	4238      	tst	r0, r7
 80226ec:	d0f3      	beq.n	80226d6 <ceil+0x96>
 80226ee:	a312      	add	r3, pc, #72	; (adr r3, 8022738 <ceil+0xf8>)
 80226f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226f4:	f7dd fd92 	bl	800021c <__adddf3>
 80226f8:	2200      	movs	r2, #0
 80226fa:	2300      	movs	r3, #0
 80226fc:	f7de f9d0 	bl	8000aa0 <__aeabi_dcmpgt>
 8022700:	2800      	cmp	r0, #0
 8022702:	d0bf      	beq.n	8022684 <ceil+0x44>
 8022704:	2c00      	cmp	r4, #0
 8022706:	dd02      	ble.n	802270e <ceil+0xce>
 8022708:	2e14      	cmp	r6, #20
 802270a:	d103      	bne.n	8022714 <ceil+0xd4>
 802270c:	3401      	adds	r4, #1
 802270e:	ea25 0507 	bic.w	r5, r5, r7
 8022712:	e7b7      	b.n	8022684 <ceil+0x44>
 8022714:	2301      	movs	r3, #1
 8022716:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802271a:	fa03 f606 	lsl.w	r6, r3, r6
 802271e:	4435      	add	r5, r6
 8022720:	45a8      	cmp	r8, r5
 8022722:	bf88      	it	hi
 8022724:	18e4      	addhi	r4, r4, r3
 8022726:	e7f2      	b.n	802270e <ceil+0xce>
 8022728:	2500      	movs	r5, #0
 802272a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802272e:	e7a9      	b.n	8022684 <ceil+0x44>
 8022730:	4625      	mov	r5, r4
 8022732:	e7a7      	b.n	8022684 <ceil+0x44>
 8022734:	f3af 8000 	nop.w
 8022738:	8800759c 	.word	0x8800759c
 802273c:	7e37e43c 	.word	0x7e37e43c
 8022740:	3ff00000 	.word	0x3ff00000
 8022744:	000fffff 	.word	0x000fffff

08022748 <floor>:
 8022748:	ec51 0b10 	vmov	r0, r1, d0
 802274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022750:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022754:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022758:	2e13      	cmp	r6, #19
 802275a:	ee10 8a10 	vmov	r8, s0
 802275e:	460c      	mov	r4, r1
 8022760:	ee10 5a10 	vmov	r5, s0
 8022764:	dc35      	bgt.n	80227d2 <floor+0x8a>
 8022766:	2e00      	cmp	r6, #0
 8022768:	da17      	bge.n	802279a <floor+0x52>
 802276a:	a335      	add	r3, pc, #212	; (adr r3, 8022840 <floor+0xf8>)
 802276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022770:	f7dd fd54 	bl	800021c <__adddf3>
 8022774:	2200      	movs	r2, #0
 8022776:	2300      	movs	r3, #0
 8022778:	f7de f992 	bl	8000aa0 <__aeabi_dcmpgt>
 802277c:	b150      	cbz	r0, 8022794 <floor+0x4c>
 802277e:	2c00      	cmp	r4, #0
 8022780:	da5a      	bge.n	8022838 <floor+0xf0>
 8022782:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8022786:	ea53 0308 	orrs.w	r3, r3, r8
 802278a:	4b2f      	ldr	r3, [pc, #188]	; (8022848 <floor+0x100>)
 802278c:	f04f 0500 	mov.w	r5, #0
 8022790:	bf18      	it	ne
 8022792:	461c      	movne	r4, r3
 8022794:	4621      	mov	r1, r4
 8022796:	4628      	mov	r0, r5
 8022798:	e025      	b.n	80227e6 <floor+0x9e>
 802279a:	4f2c      	ldr	r7, [pc, #176]	; (802284c <floor+0x104>)
 802279c:	4137      	asrs	r7, r6
 802279e:	ea01 0307 	and.w	r3, r1, r7
 80227a2:	4303      	orrs	r3, r0
 80227a4:	d01f      	beq.n	80227e6 <floor+0x9e>
 80227a6:	a326      	add	r3, pc, #152	; (adr r3, 8022840 <floor+0xf8>)
 80227a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ac:	f7dd fd36 	bl	800021c <__adddf3>
 80227b0:	2200      	movs	r2, #0
 80227b2:	2300      	movs	r3, #0
 80227b4:	f7de f974 	bl	8000aa0 <__aeabi_dcmpgt>
 80227b8:	2800      	cmp	r0, #0
 80227ba:	d0eb      	beq.n	8022794 <floor+0x4c>
 80227bc:	2c00      	cmp	r4, #0
 80227be:	bfbe      	ittt	lt
 80227c0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80227c4:	fa43 f606 	asrlt.w	r6, r3, r6
 80227c8:	19a4      	addlt	r4, r4, r6
 80227ca:	ea24 0407 	bic.w	r4, r4, r7
 80227ce:	2500      	movs	r5, #0
 80227d0:	e7e0      	b.n	8022794 <floor+0x4c>
 80227d2:	2e33      	cmp	r6, #51	; 0x33
 80227d4:	dd0b      	ble.n	80227ee <floor+0xa6>
 80227d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80227da:	d104      	bne.n	80227e6 <floor+0x9e>
 80227dc:	ee10 2a10 	vmov	r2, s0
 80227e0:	460b      	mov	r3, r1
 80227e2:	f7dd fd1b 	bl	800021c <__adddf3>
 80227e6:	ec41 0b10 	vmov	d0, r0, r1
 80227ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227ee:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80227f2:	f04f 33ff 	mov.w	r3, #4294967295
 80227f6:	fa23 f707 	lsr.w	r7, r3, r7
 80227fa:	4238      	tst	r0, r7
 80227fc:	d0f3      	beq.n	80227e6 <floor+0x9e>
 80227fe:	a310      	add	r3, pc, #64	; (adr r3, 8022840 <floor+0xf8>)
 8022800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022804:	f7dd fd0a 	bl	800021c <__adddf3>
 8022808:	2200      	movs	r2, #0
 802280a:	2300      	movs	r3, #0
 802280c:	f7de f948 	bl	8000aa0 <__aeabi_dcmpgt>
 8022810:	2800      	cmp	r0, #0
 8022812:	d0bf      	beq.n	8022794 <floor+0x4c>
 8022814:	2c00      	cmp	r4, #0
 8022816:	da02      	bge.n	802281e <floor+0xd6>
 8022818:	2e14      	cmp	r6, #20
 802281a:	d103      	bne.n	8022824 <floor+0xdc>
 802281c:	3401      	adds	r4, #1
 802281e:	ea25 0507 	bic.w	r5, r5, r7
 8022822:	e7b7      	b.n	8022794 <floor+0x4c>
 8022824:	2301      	movs	r3, #1
 8022826:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802282a:	fa03 f606 	lsl.w	r6, r3, r6
 802282e:	4435      	add	r5, r6
 8022830:	45a8      	cmp	r8, r5
 8022832:	bf88      	it	hi
 8022834:	18e4      	addhi	r4, r4, r3
 8022836:	e7f2      	b.n	802281e <floor+0xd6>
 8022838:	2500      	movs	r5, #0
 802283a:	462c      	mov	r4, r5
 802283c:	e7aa      	b.n	8022794 <floor+0x4c>
 802283e:	bf00      	nop
 8022840:	8800759c 	.word	0x8800759c
 8022844:	7e37e43c 	.word	0x7e37e43c
 8022848:	bff00000 	.word	0xbff00000
 802284c:	000fffff 	.word	0x000fffff

08022850 <sin>:
 8022850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022852:	ec51 0b10 	vmov	r0, r1, d0
 8022856:	4a20      	ldr	r2, [pc, #128]	; (80228d8 <sin+0x88>)
 8022858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802285c:	4293      	cmp	r3, r2
 802285e:	dc07      	bgt.n	8022870 <sin+0x20>
 8022860:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80228d0 <sin+0x80>
 8022864:	2000      	movs	r0, #0
 8022866:	f000 ff73 	bl	8023750 <__kernel_sin>
 802286a:	ec51 0b10 	vmov	r0, r1, d0
 802286e:	e007      	b.n	8022880 <sin+0x30>
 8022870:	4a1a      	ldr	r2, [pc, #104]	; (80228dc <sin+0x8c>)
 8022872:	4293      	cmp	r3, r2
 8022874:	dd09      	ble.n	802288a <sin+0x3a>
 8022876:	ee10 2a10 	vmov	r2, s0
 802287a:	460b      	mov	r3, r1
 802287c:	f7dd fccc 	bl	8000218 <__aeabi_dsub>
 8022880:	ec41 0b10 	vmov	d0, r0, r1
 8022884:	b005      	add	sp, #20
 8022886:	f85d fb04 	ldr.w	pc, [sp], #4
 802288a:	4668      	mov	r0, sp
 802288c:	f000 f884 	bl	8022998 <__ieee754_rem_pio2>
 8022890:	f000 0003 	and.w	r0, r0, #3
 8022894:	2801      	cmp	r0, #1
 8022896:	ed9d 1b02 	vldr	d1, [sp, #8]
 802289a:	ed9d 0b00 	vldr	d0, [sp]
 802289e:	d004      	beq.n	80228aa <sin+0x5a>
 80228a0:	2802      	cmp	r0, #2
 80228a2:	d005      	beq.n	80228b0 <sin+0x60>
 80228a4:	b970      	cbnz	r0, 80228c4 <sin+0x74>
 80228a6:	2001      	movs	r0, #1
 80228a8:	e7dd      	b.n	8022866 <sin+0x16>
 80228aa:	f000 fb19 	bl	8022ee0 <__kernel_cos>
 80228ae:	e7dc      	b.n	802286a <sin+0x1a>
 80228b0:	2001      	movs	r0, #1
 80228b2:	f000 ff4d 	bl	8023750 <__kernel_sin>
 80228b6:	ec53 2b10 	vmov	r2, r3, d0
 80228ba:	ee10 0a10 	vmov	r0, s0
 80228be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80228c2:	e7dd      	b.n	8022880 <sin+0x30>
 80228c4:	f000 fb0c 	bl	8022ee0 <__kernel_cos>
 80228c8:	e7f5      	b.n	80228b6 <sin+0x66>
 80228ca:	bf00      	nop
 80228cc:	f3af 8000 	nop.w
	...
 80228d8:	3fe921fb 	.word	0x3fe921fb
 80228dc:	7fefffff 	.word	0x7fefffff

080228e0 <sqrt>:
 80228e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80228e4:	ed2d 8b02 	vpush	{d8}
 80228e8:	b08b      	sub	sp, #44	; 0x2c
 80228ea:	ec55 4b10 	vmov	r4, r5, d0
 80228ee:	f000 fa45 	bl	8022d7c <__ieee754_sqrt>
 80228f2:	4b26      	ldr	r3, [pc, #152]	; (802298c <sqrt+0xac>)
 80228f4:	eeb0 8a40 	vmov.f32	s16, s0
 80228f8:	eef0 8a60 	vmov.f32	s17, s1
 80228fc:	f993 6000 	ldrsb.w	r6, [r3]
 8022900:	1c73      	adds	r3, r6, #1
 8022902:	d02a      	beq.n	802295a <sqrt+0x7a>
 8022904:	4622      	mov	r2, r4
 8022906:	462b      	mov	r3, r5
 8022908:	4620      	mov	r0, r4
 802290a:	4629      	mov	r1, r5
 802290c:	f7de f8d2 	bl	8000ab4 <__aeabi_dcmpun>
 8022910:	4607      	mov	r7, r0
 8022912:	bb10      	cbnz	r0, 802295a <sqrt+0x7a>
 8022914:	f04f 0800 	mov.w	r8, #0
 8022918:	f04f 0900 	mov.w	r9, #0
 802291c:	4642      	mov	r2, r8
 802291e:	464b      	mov	r3, r9
 8022920:	4620      	mov	r0, r4
 8022922:	4629      	mov	r1, r5
 8022924:	f7de f89e 	bl	8000a64 <__aeabi_dcmplt>
 8022928:	b1b8      	cbz	r0, 802295a <sqrt+0x7a>
 802292a:	2301      	movs	r3, #1
 802292c:	9300      	str	r3, [sp, #0]
 802292e:	4b18      	ldr	r3, [pc, #96]	; (8022990 <sqrt+0xb0>)
 8022930:	9301      	str	r3, [sp, #4]
 8022932:	9708      	str	r7, [sp, #32]
 8022934:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022938:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802293c:	b9b6      	cbnz	r6, 802296c <sqrt+0x8c>
 802293e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8022942:	4668      	mov	r0, sp
 8022944:	f000 ffc5 	bl	80238d2 <matherr>
 8022948:	b1d0      	cbz	r0, 8022980 <sqrt+0xa0>
 802294a:	9b08      	ldr	r3, [sp, #32]
 802294c:	b11b      	cbz	r3, 8022956 <sqrt+0x76>
 802294e:	f7ff f993 	bl	8021c78 <__errno>
 8022952:	9b08      	ldr	r3, [sp, #32]
 8022954:	6003      	str	r3, [r0, #0]
 8022956:	ed9d 8b06 	vldr	d8, [sp, #24]
 802295a:	eeb0 0a48 	vmov.f32	s0, s16
 802295e:	eef0 0a68 	vmov.f32	s1, s17
 8022962:	b00b      	add	sp, #44	; 0x2c
 8022964:	ecbd 8b02 	vpop	{d8}
 8022968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802296c:	4642      	mov	r2, r8
 802296e:	464b      	mov	r3, r9
 8022970:	4640      	mov	r0, r8
 8022972:	4649      	mov	r1, r9
 8022974:	f7dd ff2e 	bl	80007d4 <__aeabi_ddiv>
 8022978:	2e02      	cmp	r6, #2
 802297a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802297e:	d1e0      	bne.n	8022942 <sqrt+0x62>
 8022980:	f7ff f97a 	bl	8021c78 <__errno>
 8022984:	2321      	movs	r3, #33	; 0x21
 8022986:	6003      	str	r3, [r0, #0]
 8022988:	e7df      	b.n	802294a <sqrt+0x6a>
 802298a:	bf00      	nop
 802298c:	20000148 	.word	0x20000148
 8022990:	0802b194 	.word	0x0802b194
 8022994:	00000000 	.word	0x00000000

08022998 <__ieee754_rem_pio2>:
 8022998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802299c:	ec57 6b10 	vmov	r6, r7, d0
 80229a0:	4bc3      	ldr	r3, [pc, #780]	; (8022cb0 <__ieee754_rem_pio2+0x318>)
 80229a2:	b08d      	sub	sp, #52	; 0x34
 80229a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80229a8:	4598      	cmp	r8, r3
 80229aa:	4604      	mov	r4, r0
 80229ac:	9704      	str	r7, [sp, #16]
 80229ae:	dc07      	bgt.n	80229c0 <__ieee754_rem_pio2+0x28>
 80229b0:	2200      	movs	r2, #0
 80229b2:	2300      	movs	r3, #0
 80229b4:	ed84 0b00 	vstr	d0, [r4]
 80229b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80229bc:	2500      	movs	r5, #0
 80229be:	e027      	b.n	8022a10 <__ieee754_rem_pio2+0x78>
 80229c0:	4bbc      	ldr	r3, [pc, #752]	; (8022cb4 <__ieee754_rem_pio2+0x31c>)
 80229c2:	4598      	cmp	r8, r3
 80229c4:	dc75      	bgt.n	8022ab2 <__ieee754_rem_pio2+0x11a>
 80229c6:	9b04      	ldr	r3, [sp, #16]
 80229c8:	4dbb      	ldr	r5, [pc, #748]	; (8022cb8 <__ieee754_rem_pio2+0x320>)
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	ee10 0a10 	vmov	r0, s0
 80229d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8022c78 <__ieee754_rem_pio2+0x2e0>)
 80229d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229d6:	4639      	mov	r1, r7
 80229d8:	dd36      	ble.n	8022a48 <__ieee754_rem_pio2+0xb0>
 80229da:	f7dd fc1d 	bl	8000218 <__aeabi_dsub>
 80229de:	45a8      	cmp	r8, r5
 80229e0:	4606      	mov	r6, r0
 80229e2:	460f      	mov	r7, r1
 80229e4:	d018      	beq.n	8022a18 <__ieee754_rem_pio2+0x80>
 80229e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8022c80 <__ieee754_rem_pio2+0x2e8>)
 80229e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ec:	f7dd fc14 	bl	8000218 <__aeabi_dsub>
 80229f0:	4602      	mov	r2, r0
 80229f2:	460b      	mov	r3, r1
 80229f4:	e9c4 2300 	strd	r2, r3, [r4]
 80229f8:	4630      	mov	r0, r6
 80229fa:	4639      	mov	r1, r7
 80229fc:	f7dd fc0c 	bl	8000218 <__aeabi_dsub>
 8022a00:	a39f      	add	r3, pc, #636	; (adr r3, 8022c80 <__ieee754_rem_pio2+0x2e8>)
 8022a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a06:	f7dd fc07 	bl	8000218 <__aeabi_dsub>
 8022a0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022a0e:	2501      	movs	r5, #1
 8022a10:	4628      	mov	r0, r5
 8022a12:	b00d      	add	sp, #52	; 0x34
 8022a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a18:	a39b      	add	r3, pc, #620	; (adr r3, 8022c88 <__ieee754_rem_pio2+0x2f0>)
 8022a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a1e:	f7dd fbfb 	bl	8000218 <__aeabi_dsub>
 8022a22:	a39b      	add	r3, pc, #620	; (adr r3, 8022c90 <__ieee754_rem_pio2+0x2f8>)
 8022a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a28:	4606      	mov	r6, r0
 8022a2a:	460f      	mov	r7, r1
 8022a2c:	f7dd fbf4 	bl	8000218 <__aeabi_dsub>
 8022a30:	4602      	mov	r2, r0
 8022a32:	460b      	mov	r3, r1
 8022a34:	e9c4 2300 	strd	r2, r3, [r4]
 8022a38:	4630      	mov	r0, r6
 8022a3a:	4639      	mov	r1, r7
 8022a3c:	f7dd fbec 	bl	8000218 <__aeabi_dsub>
 8022a40:	a393      	add	r3, pc, #588	; (adr r3, 8022c90 <__ieee754_rem_pio2+0x2f8>)
 8022a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a46:	e7de      	b.n	8022a06 <__ieee754_rem_pio2+0x6e>
 8022a48:	f7dd fbe8 	bl	800021c <__adddf3>
 8022a4c:	45a8      	cmp	r8, r5
 8022a4e:	4606      	mov	r6, r0
 8022a50:	460f      	mov	r7, r1
 8022a52:	d016      	beq.n	8022a82 <__ieee754_rem_pio2+0xea>
 8022a54:	a38a      	add	r3, pc, #552	; (adr r3, 8022c80 <__ieee754_rem_pio2+0x2e8>)
 8022a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a5a:	f7dd fbdf 	bl	800021c <__adddf3>
 8022a5e:	4602      	mov	r2, r0
 8022a60:	460b      	mov	r3, r1
 8022a62:	e9c4 2300 	strd	r2, r3, [r4]
 8022a66:	4630      	mov	r0, r6
 8022a68:	4639      	mov	r1, r7
 8022a6a:	f7dd fbd5 	bl	8000218 <__aeabi_dsub>
 8022a6e:	a384      	add	r3, pc, #528	; (adr r3, 8022c80 <__ieee754_rem_pio2+0x2e8>)
 8022a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a74:	f7dd fbd2 	bl	800021c <__adddf3>
 8022a78:	f04f 35ff 	mov.w	r5, #4294967295
 8022a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022a80:	e7c6      	b.n	8022a10 <__ieee754_rem_pio2+0x78>
 8022a82:	a381      	add	r3, pc, #516	; (adr r3, 8022c88 <__ieee754_rem_pio2+0x2f0>)
 8022a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a88:	f7dd fbc8 	bl	800021c <__adddf3>
 8022a8c:	a380      	add	r3, pc, #512	; (adr r3, 8022c90 <__ieee754_rem_pio2+0x2f8>)
 8022a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a92:	4606      	mov	r6, r0
 8022a94:	460f      	mov	r7, r1
 8022a96:	f7dd fbc1 	bl	800021c <__adddf3>
 8022a9a:	4602      	mov	r2, r0
 8022a9c:	460b      	mov	r3, r1
 8022a9e:	e9c4 2300 	strd	r2, r3, [r4]
 8022aa2:	4630      	mov	r0, r6
 8022aa4:	4639      	mov	r1, r7
 8022aa6:	f7dd fbb7 	bl	8000218 <__aeabi_dsub>
 8022aaa:	a379      	add	r3, pc, #484	; (adr r3, 8022c90 <__ieee754_rem_pio2+0x2f8>)
 8022aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ab0:	e7e0      	b.n	8022a74 <__ieee754_rem_pio2+0xdc>
 8022ab2:	4b82      	ldr	r3, [pc, #520]	; (8022cbc <__ieee754_rem_pio2+0x324>)
 8022ab4:	4598      	cmp	r8, r3
 8022ab6:	f300 80d0 	bgt.w	8022c5a <__ieee754_rem_pio2+0x2c2>
 8022aba:	f000 ff03 	bl	80238c4 <fabs>
 8022abe:	ec57 6b10 	vmov	r6, r7, d0
 8022ac2:	ee10 0a10 	vmov	r0, s0
 8022ac6:	a374      	add	r3, pc, #464	; (adr r3, 8022c98 <__ieee754_rem_pio2+0x300>)
 8022ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022acc:	4639      	mov	r1, r7
 8022ace:	f7dd fd57 	bl	8000580 <__aeabi_dmul>
 8022ad2:	2200      	movs	r2, #0
 8022ad4:	4b7a      	ldr	r3, [pc, #488]	; (8022cc0 <__ieee754_rem_pio2+0x328>)
 8022ad6:	f7dd fba1 	bl	800021c <__adddf3>
 8022ada:	f7de f801 	bl	8000ae0 <__aeabi_d2iz>
 8022ade:	4605      	mov	r5, r0
 8022ae0:	f7dd fce8 	bl	80004b4 <__aeabi_i2d>
 8022ae4:	a364      	add	r3, pc, #400	; (adr r3, 8022c78 <__ieee754_rem_pio2+0x2e0>)
 8022ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022aee:	f7dd fd47 	bl	8000580 <__aeabi_dmul>
 8022af2:	4602      	mov	r2, r0
 8022af4:	460b      	mov	r3, r1
 8022af6:	4630      	mov	r0, r6
 8022af8:	4639      	mov	r1, r7
 8022afa:	f7dd fb8d 	bl	8000218 <__aeabi_dsub>
 8022afe:	a360      	add	r3, pc, #384	; (adr r3, 8022c80 <__ieee754_rem_pio2+0x2e8>)
 8022b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b04:	4682      	mov	sl, r0
 8022b06:	468b      	mov	fp, r1
 8022b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022b0c:	f7dd fd38 	bl	8000580 <__aeabi_dmul>
 8022b10:	2d1f      	cmp	r5, #31
 8022b12:	4606      	mov	r6, r0
 8022b14:	460f      	mov	r7, r1
 8022b16:	dc2a      	bgt.n	8022b6e <__ieee754_rem_pio2+0x1d6>
 8022b18:	1e6a      	subs	r2, r5, #1
 8022b1a:	4b6a      	ldr	r3, [pc, #424]	; (8022cc4 <__ieee754_rem_pio2+0x32c>)
 8022b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022b20:	4598      	cmp	r8, r3
 8022b22:	d024      	beq.n	8022b6e <__ieee754_rem_pio2+0x1d6>
 8022b24:	4632      	mov	r2, r6
 8022b26:	463b      	mov	r3, r7
 8022b28:	4650      	mov	r0, sl
 8022b2a:	4659      	mov	r1, fp
 8022b2c:	f7dd fb74 	bl	8000218 <__aeabi_dsub>
 8022b30:	e9c4 0100 	strd	r0, r1, [r4]
 8022b34:	e9d4 8900 	ldrd	r8, r9, [r4]
 8022b38:	4650      	mov	r0, sl
 8022b3a:	4642      	mov	r2, r8
 8022b3c:	464b      	mov	r3, r9
 8022b3e:	4659      	mov	r1, fp
 8022b40:	f7dd fb6a 	bl	8000218 <__aeabi_dsub>
 8022b44:	463b      	mov	r3, r7
 8022b46:	4632      	mov	r2, r6
 8022b48:	f7dd fb66 	bl	8000218 <__aeabi_dsub>
 8022b4c:	9b04      	ldr	r3, [sp, #16]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022b54:	f6bf af5c 	bge.w	8022a10 <__ieee754_rem_pio2+0x78>
 8022b58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8022b5c:	6063      	str	r3, [r4, #4]
 8022b5e:	f8c4 8000 	str.w	r8, [r4]
 8022b62:	60a0      	str	r0, [r4, #8]
 8022b64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b68:	60e3      	str	r3, [r4, #12]
 8022b6a:	426d      	negs	r5, r5
 8022b6c:	e750      	b.n	8022a10 <__ieee754_rem_pio2+0x78>
 8022b6e:	4632      	mov	r2, r6
 8022b70:	463b      	mov	r3, r7
 8022b72:	4650      	mov	r0, sl
 8022b74:	4659      	mov	r1, fp
 8022b76:	f7dd fb4f 	bl	8000218 <__aeabi_dsub>
 8022b7a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8022b7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022b82:	1ad3      	subs	r3, r2, r3
 8022b84:	2b10      	cmp	r3, #16
 8022b86:	e9c4 0100 	strd	r0, r1, [r4]
 8022b8a:	9205      	str	r2, [sp, #20]
 8022b8c:	ddd2      	ble.n	8022b34 <__ieee754_rem_pio2+0x19c>
 8022b8e:	a33e      	add	r3, pc, #248	; (adr r3, 8022c88 <__ieee754_rem_pio2+0x2f0>)
 8022b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022b98:	f7dd fcf2 	bl	8000580 <__aeabi_dmul>
 8022b9c:	4606      	mov	r6, r0
 8022b9e:	460f      	mov	r7, r1
 8022ba0:	4602      	mov	r2, r0
 8022ba2:	460b      	mov	r3, r1
 8022ba4:	4650      	mov	r0, sl
 8022ba6:	4659      	mov	r1, fp
 8022ba8:	f7dd fb36 	bl	8000218 <__aeabi_dsub>
 8022bac:	4602      	mov	r2, r0
 8022bae:	460b      	mov	r3, r1
 8022bb0:	4680      	mov	r8, r0
 8022bb2:	4689      	mov	r9, r1
 8022bb4:	4650      	mov	r0, sl
 8022bb6:	4659      	mov	r1, fp
 8022bb8:	f7dd fb2e 	bl	8000218 <__aeabi_dsub>
 8022bbc:	4632      	mov	r2, r6
 8022bbe:	463b      	mov	r3, r7
 8022bc0:	f7dd fb2a 	bl	8000218 <__aeabi_dsub>
 8022bc4:	a332      	add	r3, pc, #200	; (adr r3, 8022c90 <__ieee754_rem_pio2+0x2f8>)
 8022bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bca:	4606      	mov	r6, r0
 8022bcc:	460f      	mov	r7, r1
 8022bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022bd2:	f7dd fcd5 	bl	8000580 <__aeabi_dmul>
 8022bd6:	4632      	mov	r2, r6
 8022bd8:	463b      	mov	r3, r7
 8022bda:	f7dd fb1d 	bl	8000218 <__aeabi_dsub>
 8022bde:	4602      	mov	r2, r0
 8022be0:	460b      	mov	r3, r1
 8022be2:	4606      	mov	r6, r0
 8022be4:	460f      	mov	r7, r1
 8022be6:	4640      	mov	r0, r8
 8022be8:	4649      	mov	r1, r9
 8022bea:	f7dd fb15 	bl	8000218 <__aeabi_dsub>
 8022bee:	9a05      	ldr	r2, [sp, #20]
 8022bf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022bf4:	1ad3      	subs	r3, r2, r3
 8022bf6:	2b31      	cmp	r3, #49	; 0x31
 8022bf8:	e9c4 0100 	strd	r0, r1, [r4]
 8022bfc:	dd2a      	ble.n	8022c54 <__ieee754_rem_pio2+0x2bc>
 8022bfe:	a328      	add	r3, pc, #160	; (adr r3, 8022ca0 <__ieee754_rem_pio2+0x308>)
 8022c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c08:	f7dd fcba 	bl	8000580 <__aeabi_dmul>
 8022c0c:	4606      	mov	r6, r0
 8022c0e:	460f      	mov	r7, r1
 8022c10:	4602      	mov	r2, r0
 8022c12:	460b      	mov	r3, r1
 8022c14:	4640      	mov	r0, r8
 8022c16:	4649      	mov	r1, r9
 8022c18:	f7dd fafe 	bl	8000218 <__aeabi_dsub>
 8022c1c:	4602      	mov	r2, r0
 8022c1e:	460b      	mov	r3, r1
 8022c20:	4682      	mov	sl, r0
 8022c22:	468b      	mov	fp, r1
 8022c24:	4640      	mov	r0, r8
 8022c26:	4649      	mov	r1, r9
 8022c28:	f7dd faf6 	bl	8000218 <__aeabi_dsub>
 8022c2c:	4632      	mov	r2, r6
 8022c2e:	463b      	mov	r3, r7
 8022c30:	f7dd faf2 	bl	8000218 <__aeabi_dsub>
 8022c34:	a31c      	add	r3, pc, #112	; (adr r3, 8022ca8 <__ieee754_rem_pio2+0x310>)
 8022c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c3a:	4606      	mov	r6, r0
 8022c3c:	460f      	mov	r7, r1
 8022c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c42:	f7dd fc9d 	bl	8000580 <__aeabi_dmul>
 8022c46:	4632      	mov	r2, r6
 8022c48:	463b      	mov	r3, r7
 8022c4a:	f7dd fae5 	bl	8000218 <__aeabi_dsub>
 8022c4e:	4606      	mov	r6, r0
 8022c50:	460f      	mov	r7, r1
 8022c52:	e767      	b.n	8022b24 <__ieee754_rem_pio2+0x18c>
 8022c54:	46c2      	mov	sl, r8
 8022c56:	46cb      	mov	fp, r9
 8022c58:	e76c      	b.n	8022b34 <__ieee754_rem_pio2+0x19c>
 8022c5a:	4b1b      	ldr	r3, [pc, #108]	; (8022cc8 <__ieee754_rem_pio2+0x330>)
 8022c5c:	4598      	cmp	r8, r3
 8022c5e:	dd35      	ble.n	8022ccc <__ieee754_rem_pio2+0x334>
 8022c60:	ee10 2a10 	vmov	r2, s0
 8022c64:	463b      	mov	r3, r7
 8022c66:	4630      	mov	r0, r6
 8022c68:	4639      	mov	r1, r7
 8022c6a:	f7dd fad5 	bl	8000218 <__aeabi_dsub>
 8022c6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8022c72:	e9c4 0100 	strd	r0, r1, [r4]
 8022c76:	e6a1      	b.n	80229bc <__ieee754_rem_pio2+0x24>
 8022c78:	54400000 	.word	0x54400000
 8022c7c:	3ff921fb 	.word	0x3ff921fb
 8022c80:	1a626331 	.word	0x1a626331
 8022c84:	3dd0b461 	.word	0x3dd0b461
 8022c88:	1a600000 	.word	0x1a600000
 8022c8c:	3dd0b461 	.word	0x3dd0b461
 8022c90:	2e037073 	.word	0x2e037073
 8022c94:	3ba3198a 	.word	0x3ba3198a
 8022c98:	6dc9c883 	.word	0x6dc9c883
 8022c9c:	3fe45f30 	.word	0x3fe45f30
 8022ca0:	2e000000 	.word	0x2e000000
 8022ca4:	3ba3198a 	.word	0x3ba3198a
 8022ca8:	252049c1 	.word	0x252049c1
 8022cac:	397b839a 	.word	0x397b839a
 8022cb0:	3fe921fb 	.word	0x3fe921fb
 8022cb4:	4002d97b 	.word	0x4002d97b
 8022cb8:	3ff921fb 	.word	0x3ff921fb
 8022cbc:	413921fb 	.word	0x413921fb
 8022cc0:	3fe00000 	.word	0x3fe00000
 8022cc4:	0802b19c 	.word	0x0802b19c
 8022cc8:	7fefffff 	.word	0x7fefffff
 8022ccc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8022cd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8022cd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8022cd8:	4630      	mov	r0, r6
 8022cda:	460f      	mov	r7, r1
 8022cdc:	f7dd ff00 	bl	8000ae0 <__aeabi_d2iz>
 8022ce0:	f7dd fbe8 	bl	80004b4 <__aeabi_i2d>
 8022ce4:	4602      	mov	r2, r0
 8022ce6:	460b      	mov	r3, r1
 8022ce8:	4630      	mov	r0, r6
 8022cea:	4639      	mov	r1, r7
 8022cec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022cf0:	f7dd fa92 	bl	8000218 <__aeabi_dsub>
 8022cf4:	2200      	movs	r2, #0
 8022cf6:	4b1f      	ldr	r3, [pc, #124]	; (8022d74 <__ieee754_rem_pio2+0x3dc>)
 8022cf8:	f7dd fc42 	bl	8000580 <__aeabi_dmul>
 8022cfc:	460f      	mov	r7, r1
 8022cfe:	4606      	mov	r6, r0
 8022d00:	f7dd feee 	bl	8000ae0 <__aeabi_d2iz>
 8022d04:	f7dd fbd6 	bl	80004b4 <__aeabi_i2d>
 8022d08:	4602      	mov	r2, r0
 8022d0a:	460b      	mov	r3, r1
 8022d0c:	4630      	mov	r0, r6
 8022d0e:	4639      	mov	r1, r7
 8022d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022d14:	f7dd fa80 	bl	8000218 <__aeabi_dsub>
 8022d18:	2200      	movs	r2, #0
 8022d1a:	4b16      	ldr	r3, [pc, #88]	; (8022d74 <__ieee754_rem_pio2+0x3dc>)
 8022d1c:	f7dd fc30 	bl	8000580 <__aeabi_dmul>
 8022d20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022d24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8022d28:	f04f 0803 	mov.w	r8, #3
 8022d2c:	2600      	movs	r6, #0
 8022d2e:	2700      	movs	r7, #0
 8022d30:	4632      	mov	r2, r6
 8022d32:	463b      	mov	r3, r7
 8022d34:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8022d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8022d3c:	f7dd fe88 	bl	8000a50 <__aeabi_dcmpeq>
 8022d40:	b9b0      	cbnz	r0, 8022d70 <__ieee754_rem_pio2+0x3d8>
 8022d42:	4b0d      	ldr	r3, [pc, #52]	; (8022d78 <__ieee754_rem_pio2+0x3e0>)
 8022d44:	9301      	str	r3, [sp, #4]
 8022d46:	2302      	movs	r3, #2
 8022d48:	9300      	str	r3, [sp, #0]
 8022d4a:	462a      	mov	r2, r5
 8022d4c:	4643      	mov	r3, r8
 8022d4e:	4621      	mov	r1, r4
 8022d50:	a806      	add	r0, sp, #24
 8022d52:	f000 f9ad 	bl	80230b0 <__kernel_rem_pio2>
 8022d56:	9b04      	ldr	r3, [sp, #16]
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	4605      	mov	r5, r0
 8022d5c:	f6bf ae58 	bge.w	8022a10 <__ieee754_rem_pio2+0x78>
 8022d60:	6863      	ldr	r3, [r4, #4]
 8022d62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022d66:	6063      	str	r3, [r4, #4]
 8022d68:	68e3      	ldr	r3, [r4, #12]
 8022d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022d6e:	e6fb      	b.n	8022b68 <__ieee754_rem_pio2+0x1d0>
 8022d70:	46d0      	mov	r8, sl
 8022d72:	e7dd      	b.n	8022d30 <__ieee754_rem_pio2+0x398>
 8022d74:	41700000 	.word	0x41700000
 8022d78:	0802b21c 	.word	0x0802b21c

08022d7c <__ieee754_sqrt>:
 8022d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d80:	ec55 4b10 	vmov	r4, r5, d0
 8022d84:	4e54      	ldr	r6, [pc, #336]	; (8022ed8 <__ieee754_sqrt+0x15c>)
 8022d86:	43ae      	bics	r6, r5
 8022d88:	ee10 0a10 	vmov	r0, s0
 8022d8c:	462b      	mov	r3, r5
 8022d8e:	462a      	mov	r2, r5
 8022d90:	4621      	mov	r1, r4
 8022d92:	d113      	bne.n	8022dbc <__ieee754_sqrt+0x40>
 8022d94:	ee10 2a10 	vmov	r2, s0
 8022d98:	462b      	mov	r3, r5
 8022d9a:	ee10 0a10 	vmov	r0, s0
 8022d9e:	4629      	mov	r1, r5
 8022da0:	f7dd fbee 	bl	8000580 <__aeabi_dmul>
 8022da4:	4602      	mov	r2, r0
 8022da6:	460b      	mov	r3, r1
 8022da8:	4620      	mov	r0, r4
 8022daa:	4629      	mov	r1, r5
 8022dac:	f7dd fa36 	bl	800021c <__adddf3>
 8022db0:	4604      	mov	r4, r0
 8022db2:	460d      	mov	r5, r1
 8022db4:	ec45 4b10 	vmov	d0, r4, r5
 8022db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dbc:	2d00      	cmp	r5, #0
 8022dbe:	dc10      	bgt.n	8022de2 <__ieee754_sqrt+0x66>
 8022dc0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8022dc4:	4330      	orrs	r0, r6
 8022dc6:	d0f5      	beq.n	8022db4 <__ieee754_sqrt+0x38>
 8022dc8:	b15d      	cbz	r5, 8022de2 <__ieee754_sqrt+0x66>
 8022dca:	ee10 2a10 	vmov	r2, s0
 8022dce:	462b      	mov	r3, r5
 8022dd0:	4620      	mov	r0, r4
 8022dd2:	4629      	mov	r1, r5
 8022dd4:	f7dd fa20 	bl	8000218 <__aeabi_dsub>
 8022dd8:	4602      	mov	r2, r0
 8022dda:	460b      	mov	r3, r1
 8022ddc:	f7dd fcfa 	bl	80007d4 <__aeabi_ddiv>
 8022de0:	e7e6      	b.n	8022db0 <__ieee754_sqrt+0x34>
 8022de2:	151b      	asrs	r3, r3, #20
 8022de4:	d10c      	bne.n	8022e00 <__ieee754_sqrt+0x84>
 8022de6:	2a00      	cmp	r2, #0
 8022de8:	d06d      	beq.n	8022ec6 <__ieee754_sqrt+0x14a>
 8022dea:	2000      	movs	r0, #0
 8022dec:	02d6      	lsls	r6, r2, #11
 8022dee:	d56e      	bpl.n	8022ece <__ieee754_sqrt+0x152>
 8022df0:	1e44      	subs	r4, r0, #1
 8022df2:	1b1b      	subs	r3, r3, r4
 8022df4:	f1c0 0420 	rsb	r4, r0, #32
 8022df8:	fa21 f404 	lsr.w	r4, r1, r4
 8022dfc:	4322      	orrs	r2, r4
 8022dfe:	4081      	lsls	r1, r0
 8022e00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022e04:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8022e08:	07dd      	lsls	r5, r3, #31
 8022e0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8022e0e:	bf42      	ittt	mi
 8022e10:	0052      	lslmi	r2, r2, #1
 8022e12:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8022e16:	0049      	lslmi	r1, r1, #1
 8022e18:	1058      	asrs	r0, r3, #1
 8022e1a:	2500      	movs	r5, #0
 8022e1c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8022e20:	441a      	add	r2, r3
 8022e22:	0049      	lsls	r1, r1, #1
 8022e24:	2316      	movs	r3, #22
 8022e26:	462c      	mov	r4, r5
 8022e28:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8022e2c:	19a7      	adds	r7, r4, r6
 8022e2e:	4297      	cmp	r7, r2
 8022e30:	bfde      	ittt	le
 8022e32:	1bd2      	suble	r2, r2, r7
 8022e34:	19bc      	addle	r4, r7, r6
 8022e36:	19ad      	addle	r5, r5, r6
 8022e38:	0052      	lsls	r2, r2, #1
 8022e3a:	3b01      	subs	r3, #1
 8022e3c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8022e40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8022e44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022e48:	d1f0      	bne.n	8022e2c <__ieee754_sqrt+0xb0>
 8022e4a:	f04f 0e20 	mov.w	lr, #32
 8022e4e:	469c      	mov	ip, r3
 8022e50:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8022e54:	42a2      	cmp	r2, r4
 8022e56:	eb06 070c 	add.w	r7, r6, ip
 8022e5a:	dc02      	bgt.n	8022e62 <__ieee754_sqrt+0xe6>
 8022e5c:	d112      	bne.n	8022e84 <__ieee754_sqrt+0x108>
 8022e5e:	428f      	cmp	r7, r1
 8022e60:	d810      	bhi.n	8022e84 <__ieee754_sqrt+0x108>
 8022e62:	2f00      	cmp	r7, #0
 8022e64:	eb07 0c06 	add.w	ip, r7, r6
 8022e68:	da34      	bge.n	8022ed4 <__ieee754_sqrt+0x158>
 8022e6a:	f1bc 0f00 	cmp.w	ip, #0
 8022e6e:	db31      	blt.n	8022ed4 <__ieee754_sqrt+0x158>
 8022e70:	f104 0801 	add.w	r8, r4, #1
 8022e74:	1b12      	subs	r2, r2, r4
 8022e76:	428f      	cmp	r7, r1
 8022e78:	bf88      	it	hi
 8022e7a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8022e7e:	1bc9      	subs	r1, r1, r7
 8022e80:	4433      	add	r3, r6
 8022e82:	4644      	mov	r4, r8
 8022e84:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8022e88:	f1be 0e01 	subs.w	lr, lr, #1
 8022e8c:	443a      	add	r2, r7
 8022e8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022e92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8022e96:	d1dd      	bne.n	8022e54 <__ieee754_sqrt+0xd8>
 8022e98:	430a      	orrs	r2, r1
 8022e9a:	d006      	beq.n	8022eaa <__ieee754_sqrt+0x12e>
 8022e9c:	1c5c      	adds	r4, r3, #1
 8022e9e:	bf13      	iteet	ne
 8022ea0:	3301      	addne	r3, #1
 8022ea2:	3501      	addeq	r5, #1
 8022ea4:	4673      	moveq	r3, lr
 8022ea6:	f023 0301 	bicne.w	r3, r3, #1
 8022eaa:	106a      	asrs	r2, r5, #1
 8022eac:	085b      	lsrs	r3, r3, #1
 8022eae:	07e9      	lsls	r1, r5, #31
 8022eb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8022eb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8022eb8:	bf48      	it	mi
 8022eba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8022ebe:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8022ec2:	461c      	mov	r4, r3
 8022ec4:	e776      	b.n	8022db4 <__ieee754_sqrt+0x38>
 8022ec6:	0aca      	lsrs	r2, r1, #11
 8022ec8:	3b15      	subs	r3, #21
 8022eca:	0549      	lsls	r1, r1, #21
 8022ecc:	e78b      	b.n	8022de6 <__ieee754_sqrt+0x6a>
 8022ece:	0052      	lsls	r2, r2, #1
 8022ed0:	3001      	adds	r0, #1
 8022ed2:	e78b      	b.n	8022dec <__ieee754_sqrt+0x70>
 8022ed4:	46a0      	mov	r8, r4
 8022ed6:	e7cd      	b.n	8022e74 <__ieee754_sqrt+0xf8>
 8022ed8:	7ff00000 	.word	0x7ff00000
 8022edc:	00000000 	.word	0x00000000

08022ee0 <__kernel_cos>:
 8022ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ee4:	ec59 8b10 	vmov	r8, r9, d0
 8022ee8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8022eec:	b085      	sub	sp, #20
 8022eee:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8022ef2:	ed8d 1b00 	vstr	d1, [sp]
 8022ef6:	da07      	bge.n	8022f08 <__kernel_cos+0x28>
 8022ef8:	ee10 0a10 	vmov	r0, s0
 8022efc:	4649      	mov	r1, r9
 8022efe:	f7dd fdef 	bl	8000ae0 <__aeabi_d2iz>
 8022f02:	2800      	cmp	r0, #0
 8022f04:	f000 80aa 	beq.w	802305c <__kernel_cos+0x17c>
 8022f08:	4642      	mov	r2, r8
 8022f0a:	464b      	mov	r3, r9
 8022f0c:	4640      	mov	r0, r8
 8022f0e:	4649      	mov	r1, r9
 8022f10:	f7dd fb36 	bl	8000580 <__aeabi_dmul>
 8022f14:	a359      	add	r3, pc, #356	; (adr r3, 802307c <__kernel_cos+0x19c>)
 8022f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f1a:	4604      	mov	r4, r0
 8022f1c:	460d      	mov	r5, r1
 8022f1e:	f7dd fb2f 	bl	8000580 <__aeabi_dmul>
 8022f22:	a358      	add	r3, pc, #352	; (adr r3, 8023084 <__kernel_cos+0x1a4>)
 8022f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f28:	f7dd f978 	bl	800021c <__adddf3>
 8022f2c:	4622      	mov	r2, r4
 8022f2e:	462b      	mov	r3, r5
 8022f30:	f7dd fb26 	bl	8000580 <__aeabi_dmul>
 8022f34:	a355      	add	r3, pc, #340	; (adr r3, 802308c <__kernel_cos+0x1ac>)
 8022f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f3a:	f7dd f96d 	bl	8000218 <__aeabi_dsub>
 8022f3e:	4622      	mov	r2, r4
 8022f40:	462b      	mov	r3, r5
 8022f42:	f7dd fb1d 	bl	8000580 <__aeabi_dmul>
 8022f46:	a353      	add	r3, pc, #332	; (adr r3, 8023094 <__kernel_cos+0x1b4>)
 8022f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f4c:	f7dd f966 	bl	800021c <__adddf3>
 8022f50:	4622      	mov	r2, r4
 8022f52:	462b      	mov	r3, r5
 8022f54:	f7dd fb14 	bl	8000580 <__aeabi_dmul>
 8022f58:	a350      	add	r3, pc, #320	; (adr r3, 802309c <__kernel_cos+0x1bc>)
 8022f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f5e:	f7dd f95b 	bl	8000218 <__aeabi_dsub>
 8022f62:	4622      	mov	r2, r4
 8022f64:	462b      	mov	r3, r5
 8022f66:	f7dd fb0b 	bl	8000580 <__aeabi_dmul>
 8022f6a:	a34e      	add	r3, pc, #312	; (adr r3, 80230a4 <__kernel_cos+0x1c4>)
 8022f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f70:	f7dd f954 	bl	800021c <__adddf3>
 8022f74:	462b      	mov	r3, r5
 8022f76:	4622      	mov	r2, r4
 8022f78:	f7dd fb02 	bl	8000580 <__aeabi_dmul>
 8022f7c:	4b3a      	ldr	r3, [pc, #232]	; (8023068 <__kernel_cos+0x188>)
 8022f7e:	429f      	cmp	r7, r3
 8022f80:	4682      	mov	sl, r0
 8022f82:	468b      	mov	fp, r1
 8022f84:	dc2c      	bgt.n	8022fe0 <__kernel_cos+0x100>
 8022f86:	2200      	movs	r2, #0
 8022f88:	4b38      	ldr	r3, [pc, #224]	; (802306c <__kernel_cos+0x18c>)
 8022f8a:	4620      	mov	r0, r4
 8022f8c:	4629      	mov	r1, r5
 8022f8e:	f7dd faf7 	bl	8000580 <__aeabi_dmul>
 8022f92:	4652      	mov	r2, sl
 8022f94:	4606      	mov	r6, r0
 8022f96:	460f      	mov	r7, r1
 8022f98:	465b      	mov	r3, fp
 8022f9a:	4620      	mov	r0, r4
 8022f9c:	4629      	mov	r1, r5
 8022f9e:	f7dd faef 	bl	8000580 <__aeabi_dmul>
 8022fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022fa6:	4604      	mov	r4, r0
 8022fa8:	460d      	mov	r5, r1
 8022faa:	4640      	mov	r0, r8
 8022fac:	4649      	mov	r1, r9
 8022fae:	f7dd fae7 	bl	8000580 <__aeabi_dmul>
 8022fb2:	4602      	mov	r2, r0
 8022fb4:	460b      	mov	r3, r1
 8022fb6:	4620      	mov	r0, r4
 8022fb8:	4629      	mov	r1, r5
 8022fba:	f7dd f92d 	bl	8000218 <__aeabi_dsub>
 8022fbe:	4602      	mov	r2, r0
 8022fc0:	460b      	mov	r3, r1
 8022fc2:	4630      	mov	r0, r6
 8022fc4:	4639      	mov	r1, r7
 8022fc6:	f7dd f927 	bl	8000218 <__aeabi_dsub>
 8022fca:	460b      	mov	r3, r1
 8022fcc:	4928      	ldr	r1, [pc, #160]	; (8023070 <__kernel_cos+0x190>)
 8022fce:	4602      	mov	r2, r0
 8022fd0:	2000      	movs	r0, #0
 8022fd2:	f7dd f921 	bl	8000218 <__aeabi_dsub>
 8022fd6:	ec41 0b10 	vmov	d0, r0, r1
 8022fda:	b005      	add	sp, #20
 8022fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fe0:	4b24      	ldr	r3, [pc, #144]	; (8023074 <__kernel_cos+0x194>)
 8022fe2:	4923      	ldr	r1, [pc, #140]	; (8023070 <__kernel_cos+0x190>)
 8022fe4:	429f      	cmp	r7, r3
 8022fe6:	bfd7      	itett	le
 8022fe8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8022fec:	4f22      	ldrgt	r7, [pc, #136]	; (8023078 <__kernel_cos+0x198>)
 8022fee:	2200      	movle	r2, #0
 8022ff0:	4616      	movle	r6, r2
 8022ff2:	bfd4      	ite	le
 8022ff4:	461f      	movle	r7, r3
 8022ff6:	2600      	movgt	r6, #0
 8022ff8:	4632      	mov	r2, r6
 8022ffa:	463b      	mov	r3, r7
 8022ffc:	2000      	movs	r0, #0
 8022ffe:	f7dd f90b 	bl	8000218 <__aeabi_dsub>
 8023002:	2200      	movs	r2, #0
 8023004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023008:	4b18      	ldr	r3, [pc, #96]	; (802306c <__kernel_cos+0x18c>)
 802300a:	4620      	mov	r0, r4
 802300c:	4629      	mov	r1, r5
 802300e:	f7dd fab7 	bl	8000580 <__aeabi_dmul>
 8023012:	4632      	mov	r2, r6
 8023014:	463b      	mov	r3, r7
 8023016:	f7dd f8ff 	bl	8000218 <__aeabi_dsub>
 802301a:	4652      	mov	r2, sl
 802301c:	4606      	mov	r6, r0
 802301e:	460f      	mov	r7, r1
 8023020:	465b      	mov	r3, fp
 8023022:	4620      	mov	r0, r4
 8023024:	4629      	mov	r1, r5
 8023026:	f7dd faab 	bl	8000580 <__aeabi_dmul>
 802302a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802302e:	4604      	mov	r4, r0
 8023030:	460d      	mov	r5, r1
 8023032:	4640      	mov	r0, r8
 8023034:	4649      	mov	r1, r9
 8023036:	f7dd faa3 	bl	8000580 <__aeabi_dmul>
 802303a:	4602      	mov	r2, r0
 802303c:	460b      	mov	r3, r1
 802303e:	4620      	mov	r0, r4
 8023040:	4629      	mov	r1, r5
 8023042:	f7dd f8e9 	bl	8000218 <__aeabi_dsub>
 8023046:	4602      	mov	r2, r0
 8023048:	460b      	mov	r3, r1
 802304a:	4630      	mov	r0, r6
 802304c:	4639      	mov	r1, r7
 802304e:	f7dd f8e3 	bl	8000218 <__aeabi_dsub>
 8023052:	4602      	mov	r2, r0
 8023054:	460b      	mov	r3, r1
 8023056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802305a:	e7ba      	b.n	8022fd2 <__kernel_cos+0xf2>
 802305c:	2000      	movs	r0, #0
 802305e:	4904      	ldr	r1, [pc, #16]	; (8023070 <__kernel_cos+0x190>)
 8023060:	e7b9      	b.n	8022fd6 <__kernel_cos+0xf6>
 8023062:	bf00      	nop
 8023064:	f3af 8000 	nop.w
 8023068:	3fd33332 	.word	0x3fd33332
 802306c:	3fe00000 	.word	0x3fe00000
 8023070:	3ff00000 	.word	0x3ff00000
 8023074:	3fe90000 	.word	0x3fe90000
 8023078:	3fd20000 	.word	0x3fd20000
 802307c:	be8838d4 	.word	0xbe8838d4
 8023080:	bda8fae9 	.word	0xbda8fae9
 8023084:	bdb4b1c4 	.word	0xbdb4b1c4
 8023088:	3e21ee9e 	.word	0x3e21ee9e
 802308c:	809c52ad 	.word	0x809c52ad
 8023090:	3e927e4f 	.word	0x3e927e4f
 8023094:	19cb1590 	.word	0x19cb1590
 8023098:	3efa01a0 	.word	0x3efa01a0
 802309c:	16c15177 	.word	0x16c15177
 80230a0:	3f56c16c 	.word	0x3f56c16c
 80230a4:	5555554c 	.word	0x5555554c
 80230a8:	3fa55555 	.word	0x3fa55555
 80230ac:	00000000 	.word	0x00000000

080230b0 <__kernel_rem_pio2>:
 80230b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b4:	ed2d 8b02 	vpush	{d8}
 80230b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80230bc:	1ed4      	subs	r4, r2, #3
 80230be:	9306      	str	r3, [sp, #24]
 80230c0:	9102      	str	r1, [sp, #8]
 80230c2:	4bc3      	ldr	r3, [pc, #780]	; (80233d0 <__kernel_rem_pio2+0x320>)
 80230c4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80230c6:	9009      	str	r0, [sp, #36]	; 0x24
 80230c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80230cc:	9300      	str	r3, [sp, #0]
 80230ce:	9b06      	ldr	r3, [sp, #24]
 80230d0:	3b01      	subs	r3, #1
 80230d2:	9304      	str	r3, [sp, #16]
 80230d4:	2318      	movs	r3, #24
 80230d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80230da:	f06f 0317 	mvn.w	r3, #23
 80230de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80230e2:	fb04 3303 	mla	r3, r4, r3, r3
 80230e6:	eb03 0a02 	add.w	sl, r3, r2
 80230ea:	9b00      	ldr	r3, [sp, #0]
 80230ec:	9a04      	ldr	r2, [sp, #16]
 80230ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80233c0 <__kernel_rem_pio2+0x310>
 80230f2:	eb03 0802 	add.w	r8, r3, r2
 80230f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80230f8:	1aa7      	subs	r7, r4, r2
 80230fa:	ae20      	add	r6, sp, #128	; 0x80
 80230fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8023100:	2500      	movs	r5, #0
 8023102:	4545      	cmp	r5, r8
 8023104:	dd13      	ble.n	802312e <__kernel_rem_pio2+0x7e>
 8023106:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80233c0 <__kernel_rem_pio2+0x310>
 802310a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 802310e:	2600      	movs	r6, #0
 8023110:	9b00      	ldr	r3, [sp, #0]
 8023112:	429e      	cmp	r6, r3
 8023114:	dc32      	bgt.n	802317c <__kernel_rem_pio2+0xcc>
 8023116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023118:	9303      	str	r3, [sp, #12]
 802311a:	9b06      	ldr	r3, [sp, #24]
 802311c:	199d      	adds	r5, r3, r6
 802311e:	ab20      	add	r3, sp, #128	; 0x80
 8023120:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8023124:	9308      	str	r3, [sp, #32]
 8023126:	ec59 8b18 	vmov	r8, r9, d8
 802312a:	2700      	movs	r7, #0
 802312c:	e01f      	b.n	802316e <__kernel_rem_pio2+0xbe>
 802312e:	42ef      	cmn	r7, r5
 8023130:	d407      	bmi.n	8023142 <__kernel_rem_pio2+0x92>
 8023132:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023136:	f7dd f9bd 	bl	80004b4 <__aeabi_i2d>
 802313a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802313e:	3501      	adds	r5, #1
 8023140:	e7df      	b.n	8023102 <__kernel_rem_pio2+0x52>
 8023142:	ec51 0b18 	vmov	r0, r1, d8
 8023146:	e7f8      	b.n	802313a <__kernel_rem_pio2+0x8a>
 8023148:	9908      	ldr	r1, [sp, #32]
 802314a:	9d03      	ldr	r5, [sp, #12]
 802314c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8023150:	9108      	str	r1, [sp, #32]
 8023152:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8023156:	9503      	str	r5, [sp, #12]
 8023158:	f7dd fa12 	bl	8000580 <__aeabi_dmul>
 802315c:	4602      	mov	r2, r0
 802315e:	460b      	mov	r3, r1
 8023160:	4640      	mov	r0, r8
 8023162:	4649      	mov	r1, r9
 8023164:	f7dd f85a 	bl	800021c <__adddf3>
 8023168:	3701      	adds	r7, #1
 802316a:	4680      	mov	r8, r0
 802316c:	4689      	mov	r9, r1
 802316e:	9b04      	ldr	r3, [sp, #16]
 8023170:	429f      	cmp	r7, r3
 8023172:	dde9      	ble.n	8023148 <__kernel_rem_pio2+0x98>
 8023174:	e8eb 8902 	strd	r8, r9, [fp], #8
 8023178:	3601      	adds	r6, #1
 802317a:	e7c9      	b.n	8023110 <__kernel_rem_pio2+0x60>
 802317c:	9b00      	ldr	r3, [sp, #0]
 802317e:	9f00      	ldr	r7, [sp, #0]
 8023180:	aa0c      	add	r2, sp, #48	; 0x30
 8023182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023186:	930b      	str	r3, [sp, #44]	; 0x2c
 8023188:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802318a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802318e:	930a      	str	r3, [sp, #40]	; 0x28
 8023190:	ab98      	add	r3, sp, #608	; 0x260
 8023192:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8023196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802319a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802319e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80231a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80231a6:	9308      	str	r3, [sp, #32]
 80231a8:	9a08      	ldr	r2, [sp, #32]
 80231aa:	ab98      	add	r3, sp, #608	; 0x260
 80231ac:	4413      	add	r3, r2
 80231ae:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80231b2:	2600      	movs	r6, #0
 80231b4:	1bbb      	subs	r3, r7, r6
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	dc77      	bgt.n	80232aa <__kernel_rem_pio2+0x1fa>
 80231ba:	ec49 8b10 	vmov	d0, r8, r9
 80231be:	4650      	mov	r0, sl
 80231c0:	f000 fb8a 	bl	80238d8 <scalbn>
 80231c4:	ec55 4b10 	vmov	r4, r5, d0
 80231c8:	2200      	movs	r2, #0
 80231ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80231ce:	ee10 0a10 	vmov	r0, s0
 80231d2:	4629      	mov	r1, r5
 80231d4:	f7dd f9d4 	bl	8000580 <__aeabi_dmul>
 80231d8:	ec41 0b10 	vmov	d0, r0, r1
 80231dc:	f7ff fab4 	bl	8022748 <floor>
 80231e0:	2200      	movs	r2, #0
 80231e2:	ec51 0b10 	vmov	r0, r1, d0
 80231e6:	4b7b      	ldr	r3, [pc, #492]	; (80233d4 <__kernel_rem_pio2+0x324>)
 80231e8:	f7dd f9ca 	bl	8000580 <__aeabi_dmul>
 80231ec:	4602      	mov	r2, r0
 80231ee:	460b      	mov	r3, r1
 80231f0:	4620      	mov	r0, r4
 80231f2:	4629      	mov	r1, r5
 80231f4:	f7dd f810 	bl	8000218 <__aeabi_dsub>
 80231f8:	460d      	mov	r5, r1
 80231fa:	4604      	mov	r4, r0
 80231fc:	f7dd fc70 	bl	8000ae0 <__aeabi_d2iz>
 8023200:	9003      	str	r0, [sp, #12]
 8023202:	f7dd f957 	bl	80004b4 <__aeabi_i2d>
 8023206:	4602      	mov	r2, r0
 8023208:	460b      	mov	r3, r1
 802320a:	4620      	mov	r0, r4
 802320c:	4629      	mov	r1, r5
 802320e:	f7dd f803 	bl	8000218 <__aeabi_dsub>
 8023212:	f1ba 0f00 	cmp.w	sl, #0
 8023216:	4680      	mov	r8, r0
 8023218:	4689      	mov	r9, r1
 802321a:	dd6b      	ble.n	80232f4 <__kernel_rem_pio2+0x244>
 802321c:	1e7a      	subs	r2, r7, #1
 802321e:	ab0c      	add	r3, sp, #48	; 0x30
 8023220:	f1ca 0118 	rsb	r1, sl, #24
 8023224:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023228:	9c03      	ldr	r4, [sp, #12]
 802322a:	fa40 f301 	asr.w	r3, r0, r1
 802322e:	441c      	add	r4, r3
 8023230:	408b      	lsls	r3, r1
 8023232:	1ac0      	subs	r0, r0, r3
 8023234:	ab0c      	add	r3, sp, #48	; 0x30
 8023236:	9403      	str	r4, [sp, #12]
 8023238:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802323c:	f1ca 0317 	rsb	r3, sl, #23
 8023240:	fa40 fb03 	asr.w	fp, r0, r3
 8023244:	f1bb 0f00 	cmp.w	fp, #0
 8023248:	dd62      	ble.n	8023310 <__kernel_rem_pio2+0x260>
 802324a:	9b03      	ldr	r3, [sp, #12]
 802324c:	2200      	movs	r2, #0
 802324e:	3301      	adds	r3, #1
 8023250:	9303      	str	r3, [sp, #12]
 8023252:	4614      	mov	r4, r2
 8023254:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023258:	4297      	cmp	r7, r2
 802325a:	f300 8089 	bgt.w	8023370 <__kernel_rem_pio2+0x2c0>
 802325e:	f1ba 0f00 	cmp.w	sl, #0
 8023262:	dd07      	ble.n	8023274 <__kernel_rem_pio2+0x1c4>
 8023264:	f1ba 0f01 	cmp.w	sl, #1
 8023268:	f000 8096 	beq.w	8023398 <__kernel_rem_pio2+0x2e8>
 802326c:	f1ba 0f02 	cmp.w	sl, #2
 8023270:	f000 809c 	beq.w	80233ac <__kernel_rem_pio2+0x2fc>
 8023274:	f1bb 0f02 	cmp.w	fp, #2
 8023278:	d14a      	bne.n	8023310 <__kernel_rem_pio2+0x260>
 802327a:	4642      	mov	r2, r8
 802327c:	464b      	mov	r3, r9
 802327e:	2000      	movs	r0, #0
 8023280:	4955      	ldr	r1, [pc, #340]	; (80233d8 <__kernel_rem_pio2+0x328>)
 8023282:	f7dc ffc9 	bl	8000218 <__aeabi_dsub>
 8023286:	4680      	mov	r8, r0
 8023288:	4689      	mov	r9, r1
 802328a:	2c00      	cmp	r4, #0
 802328c:	d040      	beq.n	8023310 <__kernel_rem_pio2+0x260>
 802328e:	4650      	mov	r0, sl
 8023290:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80233c8 <__kernel_rem_pio2+0x318>
 8023294:	f000 fb20 	bl	80238d8 <scalbn>
 8023298:	4640      	mov	r0, r8
 802329a:	4649      	mov	r1, r9
 802329c:	ec53 2b10 	vmov	r2, r3, d0
 80232a0:	f7dc ffba 	bl	8000218 <__aeabi_dsub>
 80232a4:	4680      	mov	r8, r0
 80232a6:	4689      	mov	r9, r1
 80232a8:	e032      	b.n	8023310 <__kernel_rem_pio2+0x260>
 80232aa:	2200      	movs	r2, #0
 80232ac:	4b4b      	ldr	r3, [pc, #300]	; (80233dc <__kernel_rem_pio2+0x32c>)
 80232ae:	4640      	mov	r0, r8
 80232b0:	4649      	mov	r1, r9
 80232b2:	f7dd f965 	bl	8000580 <__aeabi_dmul>
 80232b6:	f7dd fc13 	bl	8000ae0 <__aeabi_d2iz>
 80232ba:	f7dd f8fb 	bl	80004b4 <__aeabi_i2d>
 80232be:	2200      	movs	r2, #0
 80232c0:	4b47      	ldr	r3, [pc, #284]	; (80233e0 <__kernel_rem_pio2+0x330>)
 80232c2:	4604      	mov	r4, r0
 80232c4:	460d      	mov	r5, r1
 80232c6:	f7dd f95b 	bl	8000580 <__aeabi_dmul>
 80232ca:	4602      	mov	r2, r0
 80232cc:	460b      	mov	r3, r1
 80232ce:	4640      	mov	r0, r8
 80232d0:	4649      	mov	r1, r9
 80232d2:	f7dc ffa1 	bl	8000218 <__aeabi_dsub>
 80232d6:	f7dd fc03 	bl	8000ae0 <__aeabi_d2iz>
 80232da:	ab0c      	add	r3, sp, #48	; 0x30
 80232dc:	4629      	mov	r1, r5
 80232de:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80232e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80232e6:	4620      	mov	r0, r4
 80232e8:	f7dc ff98 	bl	800021c <__adddf3>
 80232ec:	3601      	adds	r6, #1
 80232ee:	4680      	mov	r8, r0
 80232f0:	4689      	mov	r9, r1
 80232f2:	e75f      	b.n	80231b4 <__kernel_rem_pio2+0x104>
 80232f4:	d106      	bne.n	8023304 <__kernel_rem_pio2+0x254>
 80232f6:	1e7b      	subs	r3, r7, #1
 80232f8:	aa0c      	add	r2, sp, #48	; 0x30
 80232fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80232fe:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8023302:	e79f      	b.n	8023244 <__kernel_rem_pio2+0x194>
 8023304:	2200      	movs	r2, #0
 8023306:	4b37      	ldr	r3, [pc, #220]	; (80233e4 <__kernel_rem_pio2+0x334>)
 8023308:	f7dd fbc0 	bl	8000a8c <__aeabi_dcmpge>
 802330c:	bb68      	cbnz	r0, 802336a <__kernel_rem_pio2+0x2ba>
 802330e:	4683      	mov	fp, r0
 8023310:	2200      	movs	r2, #0
 8023312:	2300      	movs	r3, #0
 8023314:	4640      	mov	r0, r8
 8023316:	4649      	mov	r1, r9
 8023318:	f7dd fb9a 	bl	8000a50 <__aeabi_dcmpeq>
 802331c:	2800      	cmp	r0, #0
 802331e:	f000 80c1 	beq.w	80234a4 <__kernel_rem_pio2+0x3f4>
 8023322:	1e7c      	subs	r4, r7, #1
 8023324:	4623      	mov	r3, r4
 8023326:	2200      	movs	r2, #0
 8023328:	9900      	ldr	r1, [sp, #0]
 802332a:	428b      	cmp	r3, r1
 802332c:	da5c      	bge.n	80233e8 <__kernel_rem_pio2+0x338>
 802332e:	2a00      	cmp	r2, #0
 8023330:	f040 808b 	bne.w	802344a <__kernel_rem_pio2+0x39a>
 8023334:	2401      	movs	r4, #1
 8023336:	f06f 0203 	mvn.w	r2, #3
 802333a:	fb02 f304 	mul.w	r3, r2, r4
 802333e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023340:	58cb      	ldr	r3, [r1, r3]
 8023342:	2b00      	cmp	r3, #0
 8023344:	d056      	beq.n	80233f4 <__kernel_rem_pio2+0x344>
 8023346:	9b08      	ldr	r3, [sp, #32]
 8023348:	aa98      	add	r2, sp, #608	; 0x260
 802334a:	4413      	add	r3, r2
 802334c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8023350:	9b06      	ldr	r3, [sp, #24]
 8023352:	19dd      	adds	r5, r3, r7
 8023354:	ab20      	add	r3, sp, #128	; 0x80
 8023356:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802335a:	19e3      	adds	r3, r4, r7
 802335c:	1c7e      	adds	r6, r7, #1
 802335e:	9303      	str	r3, [sp, #12]
 8023360:	9b03      	ldr	r3, [sp, #12]
 8023362:	429e      	cmp	r6, r3
 8023364:	dd48      	ble.n	80233f8 <__kernel_rem_pio2+0x348>
 8023366:	461f      	mov	r7, r3
 8023368:	e712      	b.n	8023190 <__kernel_rem_pio2+0xe0>
 802336a:	f04f 0b02 	mov.w	fp, #2
 802336e:	e76c      	b.n	802324a <__kernel_rem_pio2+0x19a>
 8023370:	ab0c      	add	r3, sp, #48	; 0x30
 8023372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023376:	b94c      	cbnz	r4, 802338c <__kernel_rem_pio2+0x2dc>
 8023378:	b12b      	cbz	r3, 8023386 <__kernel_rem_pio2+0x2d6>
 802337a:	a80c      	add	r0, sp, #48	; 0x30
 802337c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023380:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8023384:	2301      	movs	r3, #1
 8023386:	3201      	adds	r2, #1
 8023388:	461c      	mov	r4, r3
 802338a:	e765      	b.n	8023258 <__kernel_rem_pio2+0x1a8>
 802338c:	a80c      	add	r0, sp, #48	; 0x30
 802338e:	1acb      	subs	r3, r1, r3
 8023390:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8023394:	4623      	mov	r3, r4
 8023396:	e7f6      	b.n	8023386 <__kernel_rem_pio2+0x2d6>
 8023398:	1e7a      	subs	r2, r7, #1
 802339a:	ab0c      	add	r3, sp, #48	; 0x30
 802339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80233a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80233a4:	a90c      	add	r1, sp, #48	; 0x30
 80233a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80233aa:	e763      	b.n	8023274 <__kernel_rem_pio2+0x1c4>
 80233ac:	1e7a      	subs	r2, r7, #1
 80233ae:	ab0c      	add	r3, sp, #48	; 0x30
 80233b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80233b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80233b8:	e7f4      	b.n	80233a4 <__kernel_rem_pio2+0x2f4>
 80233ba:	bf00      	nop
 80233bc:	f3af 8000 	nop.w
	...
 80233cc:	3ff00000 	.word	0x3ff00000
 80233d0:	0802b368 	.word	0x0802b368
 80233d4:	40200000 	.word	0x40200000
 80233d8:	3ff00000 	.word	0x3ff00000
 80233dc:	3e700000 	.word	0x3e700000
 80233e0:	41700000 	.word	0x41700000
 80233e4:	3fe00000 	.word	0x3fe00000
 80233e8:	a90c      	add	r1, sp, #48	; 0x30
 80233ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80233ee:	3b01      	subs	r3, #1
 80233f0:	430a      	orrs	r2, r1
 80233f2:	e799      	b.n	8023328 <__kernel_rem_pio2+0x278>
 80233f4:	3401      	adds	r4, #1
 80233f6:	e7a0      	b.n	802333a <__kernel_rem_pio2+0x28a>
 80233f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80233fe:	f7dd f859 	bl	80004b4 <__aeabi_i2d>
 8023402:	e8e5 0102 	strd	r0, r1, [r5], #8
 8023406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023408:	9508      	str	r5, [sp, #32]
 802340a:	461c      	mov	r4, r3
 802340c:	2700      	movs	r7, #0
 802340e:	f04f 0800 	mov.w	r8, #0
 8023412:	f04f 0900 	mov.w	r9, #0
 8023416:	9b04      	ldr	r3, [sp, #16]
 8023418:	429f      	cmp	r7, r3
 802341a:	dd03      	ble.n	8023424 <__kernel_rem_pio2+0x374>
 802341c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8023420:	3601      	adds	r6, #1
 8023422:	e79d      	b.n	8023360 <__kernel_rem_pio2+0x2b0>
 8023424:	9908      	ldr	r1, [sp, #32]
 8023426:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 802342a:	9108      	str	r1, [sp, #32]
 802342c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023430:	f7dd f8a6 	bl	8000580 <__aeabi_dmul>
 8023434:	4602      	mov	r2, r0
 8023436:	460b      	mov	r3, r1
 8023438:	4640      	mov	r0, r8
 802343a:	4649      	mov	r1, r9
 802343c:	f7dc feee 	bl	800021c <__adddf3>
 8023440:	3701      	adds	r7, #1
 8023442:	4680      	mov	r8, r0
 8023444:	4689      	mov	r9, r1
 8023446:	e7e6      	b.n	8023416 <__kernel_rem_pio2+0x366>
 8023448:	3c01      	subs	r4, #1
 802344a:	ab0c      	add	r3, sp, #48	; 0x30
 802344c:	f1aa 0a18 	sub.w	sl, sl, #24
 8023450:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8023454:	2b00      	cmp	r3, #0
 8023456:	d0f7      	beq.n	8023448 <__kernel_rem_pio2+0x398>
 8023458:	4650      	mov	r0, sl
 802345a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8023730 <__kernel_rem_pio2+0x680>
 802345e:	f000 fa3b 	bl	80238d8 <scalbn>
 8023462:	00e5      	lsls	r5, r4, #3
 8023464:	ab98      	add	r3, sp, #608	; 0x260
 8023466:	eb03 0905 	add.w	r9, r3, r5
 802346a:	ec57 6b10 	vmov	r6, r7, d0
 802346e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8023472:	46a0      	mov	r8, r4
 8023474:	f1b8 0f00 	cmp.w	r8, #0
 8023478:	da4d      	bge.n	8023516 <__kernel_rem_pio2+0x466>
 802347a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8023738 <__kernel_rem_pio2+0x688>
 802347e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8023482:	2300      	movs	r3, #0
 8023484:	9304      	str	r3, [sp, #16]
 8023486:	4657      	mov	r7, sl
 8023488:	9b04      	ldr	r3, [sp, #16]
 802348a:	ebb4 0903 	subs.w	r9, r4, r3
 802348e:	d476      	bmi.n	802357e <__kernel_rem_pio2+0x4ce>
 8023490:	4bab      	ldr	r3, [pc, #684]	; (8023740 <__kernel_rem_pio2+0x690>)
 8023492:	461e      	mov	r6, r3
 8023494:	ab70      	add	r3, sp, #448	; 0x1c0
 8023496:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 802349a:	ed8d 8b06 	vstr	d8, [sp, #24]
 802349e:	f04f 0800 	mov.w	r8, #0
 80234a2:	e05e      	b.n	8023562 <__kernel_rem_pio2+0x4b2>
 80234a4:	f1ca 0000 	rsb	r0, sl, #0
 80234a8:	ec49 8b10 	vmov	d0, r8, r9
 80234ac:	f000 fa14 	bl	80238d8 <scalbn>
 80234b0:	ec55 4b10 	vmov	r4, r5, d0
 80234b4:	2200      	movs	r2, #0
 80234b6:	4ba3      	ldr	r3, [pc, #652]	; (8023744 <__kernel_rem_pio2+0x694>)
 80234b8:	ee10 0a10 	vmov	r0, s0
 80234bc:	4629      	mov	r1, r5
 80234be:	f7dd fae5 	bl	8000a8c <__aeabi_dcmpge>
 80234c2:	b1f8      	cbz	r0, 8023504 <__kernel_rem_pio2+0x454>
 80234c4:	2200      	movs	r2, #0
 80234c6:	4ba0      	ldr	r3, [pc, #640]	; (8023748 <__kernel_rem_pio2+0x698>)
 80234c8:	4620      	mov	r0, r4
 80234ca:	4629      	mov	r1, r5
 80234cc:	f7dd f858 	bl	8000580 <__aeabi_dmul>
 80234d0:	f7dd fb06 	bl	8000ae0 <__aeabi_d2iz>
 80234d4:	4606      	mov	r6, r0
 80234d6:	f7dc ffed 	bl	80004b4 <__aeabi_i2d>
 80234da:	2200      	movs	r2, #0
 80234dc:	4b99      	ldr	r3, [pc, #612]	; (8023744 <__kernel_rem_pio2+0x694>)
 80234de:	f7dd f84f 	bl	8000580 <__aeabi_dmul>
 80234e2:	460b      	mov	r3, r1
 80234e4:	4602      	mov	r2, r0
 80234e6:	4629      	mov	r1, r5
 80234e8:	4620      	mov	r0, r4
 80234ea:	f7dc fe95 	bl	8000218 <__aeabi_dsub>
 80234ee:	f7dd faf7 	bl	8000ae0 <__aeabi_d2iz>
 80234f2:	1c7c      	adds	r4, r7, #1
 80234f4:	ab0c      	add	r3, sp, #48	; 0x30
 80234f6:	f10a 0a18 	add.w	sl, sl, #24
 80234fa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80234fe:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8023502:	e7a9      	b.n	8023458 <__kernel_rem_pio2+0x3a8>
 8023504:	4620      	mov	r0, r4
 8023506:	4629      	mov	r1, r5
 8023508:	f7dd faea 	bl	8000ae0 <__aeabi_d2iz>
 802350c:	ab0c      	add	r3, sp, #48	; 0x30
 802350e:	463c      	mov	r4, r7
 8023510:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8023514:	e7a0      	b.n	8023458 <__kernel_rem_pio2+0x3a8>
 8023516:	ab0c      	add	r3, sp, #48	; 0x30
 8023518:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 802351c:	f7dc ffca 	bl	80004b4 <__aeabi_i2d>
 8023520:	4632      	mov	r2, r6
 8023522:	463b      	mov	r3, r7
 8023524:	f7dd f82c 	bl	8000580 <__aeabi_dmul>
 8023528:	2200      	movs	r2, #0
 802352a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 802352e:	4b86      	ldr	r3, [pc, #536]	; (8023748 <__kernel_rem_pio2+0x698>)
 8023530:	4630      	mov	r0, r6
 8023532:	4639      	mov	r1, r7
 8023534:	f7dd f824 	bl	8000580 <__aeabi_dmul>
 8023538:	f108 38ff 	add.w	r8, r8, #4294967295
 802353c:	4606      	mov	r6, r0
 802353e:	460f      	mov	r7, r1
 8023540:	e798      	b.n	8023474 <__kernel_rem_pio2+0x3c4>
 8023542:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8023546:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 802354a:	f7dd f819 	bl	8000580 <__aeabi_dmul>
 802354e:	4602      	mov	r2, r0
 8023550:	460b      	mov	r3, r1
 8023552:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023556:	f7dc fe61 	bl	800021c <__adddf3>
 802355a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802355e:	f108 0801 	add.w	r8, r8, #1
 8023562:	9b00      	ldr	r3, [sp, #0]
 8023564:	4598      	cmp	r8, r3
 8023566:	dc02      	bgt.n	802356e <__kernel_rem_pio2+0x4be>
 8023568:	9b04      	ldr	r3, [sp, #16]
 802356a:	4598      	cmp	r8, r3
 802356c:	dde9      	ble.n	8023542 <__kernel_rem_pio2+0x492>
 802356e:	9b04      	ldr	r3, [sp, #16]
 8023570:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023574:	3301      	adds	r3, #1
 8023576:	ecaa 7b02 	vstmia	sl!, {d7}
 802357a:	9304      	str	r3, [sp, #16]
 802357c:	e784      	b.n	8023488 <__kernel_rem_pio2+0x3d8>
 802357e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8023580:	2b03      	cmp	r3, #3
 8023582:	d85d      	bhi.n	8023640 <__kernel_rem_pio2+0x590>
 8023584:	e8df f003 	tbb	[pc, r3]
 8023588:	0226264b 	.word	0x0226264b
 802358c:	ab98      	add	r3, sp, #608	; 0x260
 802358e:	441d      	add	r5, r3
 8023590:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8023594:	462e      	mov	r6, r5
 8023596:	46a2      	mov	sl, r4
 8023598:	f1ba 0f00 	cmp.w	sl, #0
 802359c:	dc6e      	bgt.n	802367c <__kernel_rem_pio2+0x5cc>
 802359e:	462e      	mov	r6, r5
 80235a0:	46a2      	mov	sl, r4
 80235a2:	f1ba 0f01 	cmp.w	sl, #1
 80235a6:	f300 808a 	bgt.w	80236be <__kernel_rem_pio2+0x60e>
 80235aa:	2000      	movs	r0, #0
 80235ac:	2100      	movs	r1, #0
 80235ae:	2c01      	cmp	r4, #1
 80235b0:	f300 80a6 	bgt.w	8023700 <__kernel_rem_pio2+0x650>
 80235b4:	f1bb 0f00 	cmp.w	fp, #0
 80235b8:	f040 80a8 	bne.w	802370c <__kernel_rem_pio2+0x65c>
 80235bc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80235c0:	9c02      	ldr	r4, [sp, #8]
 80235c2:	e9c4 2300 	strd	r2, r3, [r4]
 80235c6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80235ca:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80235ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80235d2:	e035      	b.n	8023640 <__kernel_rem_pio2+0x590>
 80235d4:	3508      	adds	r5, #8
 80235d6:	ab48      	add	r3, sp, #288	; 0x120
 80235d8:	441d      	add	r5, r3
 80235da:	4626      	mov	r6, r4
 80235dc:	2000      	movs	r0, #0
 80235de:	2100      	movs	r1, #0
 80235e0:	2e00      	cmp	r6, #0
 80235e2:	da3c      	bge.n	802365e <__kernel_rem_pio2+0x5ae>
 80235e4:	f1bb 0f00 	cmp.w	fp, #0
 80235e8:	d03f      	beq.n	802366a <__kernel_rem_pio2+0x5ba>
 80235ea:	4602      	mov	r2, r0
 80235ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80235f0:	9d02      	ldr	r5, [sp, #8]
 80235f2:	e9c5 2300 	strd	r2, r3, [r5]
 80235f6:	4602      	mov	r2, r0
 80235f8:	460b      	mov	r3, r1
 80235fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80235fe:	f7dc fe0b 	bl	8000218 <__aeabi_dsub>
 8023602:	ae4a      	add	r6, sp, #296	; 0x128
 8023604:	2501      	movs	r5, #1
 8023606:	42ac      	cmp	r4, r5
 8023608:	da32      	bge.n	8023670 <__kernel_rem_pio2+0x5c0>
 802360a:	f1bb 0f00 	cmp.w	fp, #0
 802360e:	d002      	beq.n	8023616 <__kernel_rem_pio2+0x566>
 8023610:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023614:	4619      	mov	r1, r3
 8023616:	9b02      	ldr	r3, [sp, #8]
 8023618:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802361c:	e010      	b.n	8023640 <__kernel_rem_pio2+0x590>
 802361e:	ab98      	add	r3, sp, #608	; 0x260
 8023620:	441d      	add	r5, r3
 8023622:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8023626:	2000      	movs	r0, #0
 8023628:	2100      	movs	r1, #0
 802362a:	2c00      	cmp	r4, #0
 802362c:	da11      	bge.n	8023652 <__kernel_rem_pio2+0x5a2>
 802362e:	f1bb 0f00 	cmp.w	fp, #0
 8023632:	d002      	beq.n	802363a <__kernel_rem_pio2+0x58a>
 8023634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023638:	4619      	mov	r1, r3
 802363a:	9b02      	ldr	r3, [sp, #8]
 802363c:	e9c3 0100 	strd	r0, r1, [r3]
 8023640:	9b03      	ldr	r3, [sp, #12]
 8023642:	f003 0007 	and.w	r0, r3, #7
 8023646:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 802364a:	ecbd 8b02 	vpop	{d8}
 802364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023652:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8023656:	f7dc fde1 	bl	800021c <__adddf3>
 802365a:	3c01      	subs	r4, #1
 802365c:	e7e5      	b.n	802362a <__kernel_rem_pio2+0x57a>
 802365e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8023662:	f7dc fddb 	bl	800021c <__adddf3>
 8023666:	3e01      	subs	r6, #1
 8023668:	e7ba      	b.n	80235e0 <__kernel_rem_pio2+0x530>
 802366a:	4602      	mov	r2, r0
 802366c:	460b      	mov	r3, r1
 802366e:	e7bf      	b.n	80235f0 <__kernel_rem_pio2+0x540>
 8023670:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023674:	f7dc fdd2 	bl	800021c <__adddf3>
 8023678:	3501      	adds	r5, #1
 802367a:	e7c4      	b.n	8023606 <__kernel_rem_pio2+0x556>
 802367c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8023680:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8023684:	ec53 2b17 	vmov	r2, r3, d7
 8023688:	4640      	mov	r0, r8
 802368a:	4649      	mov	r1, r9
 802368c:	ed8d 7b00 	vstr	d7, [sp]
 8023690:	f7dc fdc4 	bl	800021c <__adddf3>
 8023694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023698:	4602      	mov	r2, r0
 802369a:	460b      	mov	r3, r1
 802369c:	4640      	mov	r0, r8
 802369e:	4649      	mov	r1, r9
 80236a0:	f7dc fdba 	bl	8000218 <__aeabi_dsub>
 80236a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80236a8:	f7dc fdb8 	bl	800021c <__adddf3>
 80236ac:	ed9d 7b04 	vldr	d7, [sp, #16]
 80236b0:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80236b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80236b8:	ed06 7b02 	vstr	d7, [r6, #-8]
 80236bc:	e76c      	b.n	8023598 <__kernel_rem_pio2+0x4e8>
 80236be:	ed16 7b02 	vldr	d7, [r6, #-8]
 80236c2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80236c6:	ec53 2b17 	vmov	r2, r3, d7
 80236ca:	4640      	mov	r0, r8
 80236cc:	4649      	mov	r1, r9
 80236ce:	ed8d 7b00 	vstr	d7, [sp]
 80236d2:	f7dc fda3 	bl	800021c <__adddf3>
 80236d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80236da:	4602      	mov	r2, r0
 80236dc:	460b      	mov	r3, r1
 80236de:	4640      	mov	r0, r8
 80236e0:	4649      	mov	r1, r9
 80236e2:	f7dc fd99 	bl	8000218 <__aeabi_dsub>
 80236e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80236ea:	f7dc fd97 	bl	800021c <__adddf3>
 80236ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 80236f2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80236f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80236fa:	ed06 7b02 	vstr	d7, [r6, #-8]
 80236fe:	e750      	b.n	80235a2 <__kernel_rem_pio2+0x4f2>
 8023700:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8023704:	f7dc fd8a 	bl	800021c <__adddf3>
 8023708:	3c01      	subs	r4, #1
 802370a:	e750      	b.n	80235ae <__kernel_rem_pio2+0x4fe>
 802370c:	9a02      	ldr	r2, [sp, #8]
 802370e:	683b      	ldr	r3, [r7, #0]
 8023710:	6013      	str	r3, [r2, #0]
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	6110      	str	r0, [r2, #16]
 8023716:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802371a:	6053      	str	r3, [r2, #4]
 802371c:	68bb      	ldr	r3, [r7, #8]
 802371e:	6093      	str	r3, [r2, #8]
 8023720:	68fb      	ldr	r3, [r7, #12]
 8023722:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023726:	60d3      	str	r3, [r2, #12]
 8023728:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802372c:	6153      	str	r3, [r2, #20]
 802372e:	e787      	b.n	8023640 <__kernel_rem_pio2+0x590>
 8023730:	00000000 	.word	0x00000000
 8023734:	3ff00000 	.word	0x3ff00000
	...
 8023740:	0802b328 	.word	0x0802b328
 8023744:	41700000 	.word	0x41700000
 8023748:	3e700000 	.word	0x3e700000
 802374c:	00000000 	.word	0x00000000

08023750 <__kernel_sin>:
 8023750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023754:	ec55 4b10 	vmov	r4, r5, d0
 8023758:	b085      	sub	sp, #20
 802375a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802375e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023762:	ed8d 1b00 	vstr	d1, [sp]
 8023766:	9002      	str	r0, [sp, #8]
 8023768:	da06      	bge.n	8023778 <__kernel_sin+0x28>
 802376a:	ee10 0a10 	vmov	r0, s0
 802376e:	4629      	mov	r1, r5
 8023770:	f7dd f9b6 	bl	8000ae0 <__aeabi_d2iz>
 8023774:	2800      	cmp	r0, #0
 8023776:	d051      	beq.n	802381c <__kernel_sin+0xcc>
 8023778:	4622      	mov	r2, r4
 802377a:	462b      	mov	r3, r5
 802377c:	4620      	mov	r0, r4
 802377e:	4629      	mov	r1, r5
 8023780:	f7dc fefe 	bl	8000580 <__aeabi_dmul>
 8023784:	4682      	mov	sl, r0
 8023786:	468b      	mov	fp, r1
 8023788:	4602      	mov	r2, r0
 802378a:	460b      	mov	r3, r1
 802378c:	4620      	mov	r0, r4
 802378e:	4629      	mov	r1, r5
 8023790:	f7dc fef6 	bl	8000580 <__aeabi_dmul>
 8023794:	a341      	add	r3, pc, #260	; (adr r3, 802389c <__kernel_sin+0x14c>)
 8023796:	e9d3 2300 	ldrd	r2, r3, [r3]
 802379a:	4680      	mov	r8, r0
 802379c:	4689      	mov	r9, r1
 802379e:	4650      	mov	r0, sl
 80237a0:	4659      	mov	r1, fp
 80237a2:	f7dc feed 	bl	8000580 <__aeabi_dmul>
 80237a6:	a33f      	add	r3, pc, #252	; (adr r3, 80238a4 <__kernel_sin+0x154>)
 80237a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237ac:	f7dc fd34 	bl	8000218 <__aeabi_dsub>
 80237b0:	4652      	mov	r2, sl
 80237b2:	465b      	mov	r3, fp
 80237b4:	f7dc fee4 	bl	8000580 <__aeabi_dmul>
 80237b8:	a33c      	add	r3, pc, #240	; (adr r3, 80238ac <__kernel_sin+0x15c>)
 80237ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237be:	f7dc fd2d 	bl	800021c <__adddf3>
 80237c2:	4652      	mov	r2, sl
 80237c4:	465b      	mov	r3, fp
 80237c6:	f7dc fedb 	bl	8000580 <__aeabi_dmul>
 80237ca:	a33a      	add	r3, pc, #232	; (adr r3, 80238b4 <__kernel_sin+0x164>)
 80237cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237d0:	f7dc fd22 	bl	8000218 <__aeabi_dsub>
 80237d4:	4652      	mov	r2, sl
 80237d6:	465b      	mov	r3, fp
 80237d8:	f7dc fed2 	bl	8000580 <__aeabi_dmul>
 80237dc:	a337      	add	r3, pc, #220	; (adr r3, 80238bc <__kernel_sin+0x16c>)
 80237de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237e2:	f7dc fd1b 	bl	800021c <__adddf3>
 80237e6:	9b02      	ldr	r3, [sp, #8]
 80237e8:	4606      	mov	r6, r0
 80237ea:	460f      	mov	r7, r1
 80237ec:	b9db      	cbnz	r3, 8023826 <__kernel_sin+0xd6>
 80237ee:	4602      	mov	r2, r0
 80237f0:	460b      	mov	r3, r1
 80237f2:	4650      	mov	r0, sl
 80237f4:	4659      	mov	r1, fp
 80237f6:	f7dc fec3 	bl	8000580 <__aeabi_dmul>
 80237fa:	a325      	add	r3, pc, #148	; (adr r3, 8023890 <__kernel_sin+0x140>)
 80237fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023800:	f7dc fd0a 	bl	8000218 <__aeabi_dsub>
 8023804:	4642      	mov	r2, r8
 8023806:	464b      	mov	r3, r9
 8023808:	f7dc feba 	bl	8000580 <__aeabi_dmul>
 802380c:	4602      	mov	r2, r0
 802380e:	460b      	mov	r3, r1
 8023810:	4620      	mov	r0, r4
 8023812:	4629      	mov	r1, r5
 8023814:	f7dc fd02 	bl	800021c <__adddf3>
 8023818:	4604      	mov	r4, r0
 802381a:	460d      	mov	r5, r1
 802381c:	ec45 4b10 	vmov	d0, r4, r5
 8023820:	b005      	add	sp, #20
 8023822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023826:	2200      	movs	r2, #0
 8023828:	4b1b      	ldr	r3, [pc, #108]	; (8023898 <__kernel_sin+0x148>)
 802382a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802382e:	f7dc fea7 	bl	8000580 <__aeabi_dmul>
 8023832:	4632      	mov	r2, r6
 8023834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023838:	463b      	mov	r3, r7
 802383a:	4640      	mov	r0, r8
 802383c:	4649      	mov	r1, r9
 802383e:	f7dc fe9f 	bl	8000580 <__aeabi_dmul>
 8023842:	4602      	mov	r2, r0
 8023844:	460b      	mov	r3, r1
 8023846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802384a:	f7dc fce5 	bl	8000218 <__aeabi_dsub>
 802384e:	4652      	mov	r2, sl
 8023850:	465b      	mov	r3, fp
 8023852:	f7dc fe95 	bl	8000580 <__aeabi_dmul>
 8023856:	e9dd 2300 	ldrd	r2, r3, [sp]
 802385a:	f7dc fcdd 	bl	8000218 <__aeabi_dsub>
 802385e:	a30c      	add	r3, pc, #48	; (adr r3, 8023890 <__kernel_sin+0x140>)
 8023860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023864:	4606      	mov	r6, r0
 8023866:	460f      	mov	r7, r1
 8023868:	4640      	mov	r0, r8
 802386a:	4649      	mov	r1, r9
 802386c:	f7dc fe88 	bl	8000580 <__aeabi_dmul>
 8023870:	4602      	mov	r2, r0
 8023872:	460b      	mov	r3, r1
 8023874:	4630      	mov	r0, r6
 8023876:	4639      	mov	r1, r7
 8023878:	f7dc fcd0 	bl	800021c <__adddf3>
 802387c:	4602      	mov	r2, r0
 802387e:	460b      	mov	r3, r1
 8023880:	4620      	mov	r0, r4
 8023882:	4629      	mov	r1, r5
 8023884:	f7dc fcc8 	bl	8000218 <__aeabi_dsub>
 8023888:	e7c6      	b.n	8023818 <__kernel_sin+0xc8>
 802388a:	bf00      	nop
 802388c:	f3af 8000 	nop.w
 8023890:	55555549 	.word	0x55555549
 8023894:	3fc55555 	.word	0x3fc55555
 8023898:	3fe00000 	.word	0x3fe00000
 802389c:	5acfd57c 	.word	0x5acfd57c
 80238a0:	3de5d93a 	.word	0x3de5d93a
 80238a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80238a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80238ac:	57b1fe7d 	.word	0x57b1fe7d
 80238b0:	3ec71de3 	.word	0x3ec71de3
 80238b4:	19c161d5 	.word	0x19c161d5
 80238b8:	3f2a01a0 	.word	0x3f2a01a0
 80238bc:	1110f8a6 	.word	0x1110f8a6
 80238c0:	3f811111 	.word	0x3f811111

080238c4 <fabs>:
 80238c4:	ec53 2b10 	vmov	r2, r3, d0
 80238c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80238cc:	ec43 2b10 	vmov	d0, r2, r3
 80238d0:	4770      	bx	lr

080238d2 <matherr>:
 80238d2:	2000      	movs	r0, #0
 80238d4:	4770      	bx	lr
	...

080238d8 <scalbn>:
 80238d8:	b570      	push	{r4, r5, r6, lr}
 80238da:	ec55 4b10 	vmov	r4, r5, d0
 80238de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80238e2:	4606      	mov	r6, r0
 80238e4:	462b      	mov	r3, r5
 80238e6:	b9b2      	cbnz	r2, 8023916 <scalbn+0x3e>
 80238e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80238ec:	4323      	orrs	r3, r4
 80238ee:	d03c      	beq.n	802396a <scalbn+0x92>
 80238f0:	2200      	movs	r2, #0
 80238f2:	4b33      	ldr	r3, [pc, #204]	; (80239c0 <scalbn+0xe8>)
 80238f4:	4629      	mov	r1, r5
 80238f6:	ee10 0a10 	vmov	r0, s0
 80238fa:	f7dc fe41 	bl	8000580 <__aeabi_dmul>
 80238fe:	4a31      	ldr	r2, [pc, #196]	; (80239c4 <scalbn+0xec>)
 8023900:	4296      	cmp	r6, r2
 8023902:	4604      	mov	r4, r0
 8023904:	460d      	mov	r5, r1
 8023906:	460b      	mov	r3, r1
 8023908:	da13      	bge.n	8023932 <scalbn+0x5a>
 802390a:	a329      	add	r3, pc, #164	; (adr r3, 80239b0 <scalbn+0xd8>)
 802390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023910:	f7dc fe36 	bl	8000580 <__aeabi_dmul>
 8023914:	e00a      	b.n	802392c <scalbn+0x54>
 8023916:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802391a:	428a      	cmp	r2, r1
 802391c:	d10c      	bne.n	8023938 <scalbn+0x60>
 802391e:	ee10 2a10 	vmov	r2, s0
 8023922:	462b      	mov	r3, r5
 8023924:	4620      	mov	r0, r4
 8023926:	4629      	mov	r1, r5
 8023928:	f7dc fc78 	bl	800021c <__adddf3>
 802392c:	4604      	mov	r4, r0
 802392e:	460d      	mov	r5, r1
 8023930:	e01b      	b.n	802396a <scalbn+0x92>
 8023932:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023936:	3a36      	subs	r2, #54	; 0x36
 8023938:	4432      	add	r2, r6
 802393a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802393e:	428a      	cmp	r2, r1
 8023940:	dd0b      	ble.n	802395a <scalbn+0x82>
 8023942:	ec45 4b11 	vmov	d1, r4, r5
 8023946:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80239b8 <scalbn+0xe0>
 802394a:	f000 f83f 	bl	80239cc <copysign>
 802394e:	a31a      	add	r3, pc, #104	; (adr r3, 80239b8 <scalbn+0xe0>)
 8023950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023954:	ec51 0b10 	vmov	r0, r1, d0
 8023958:	e7da      	b.n	8023910 <scalbn+0x38>
 802395a:	2a00      	cmp	r2, #0
 802395c:	dd08      	ble.n	8023970 <scalbn+0x98>
 802395e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023962:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023966:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802396a:	ec45 4b10 	vmov	d0, r4, r5
 802396e:	bd70      	pop	{r4, r5, r6, pc}
 8023970:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023974:	da0d      	bge.n	8023992 <scalbn+0xba>
 8023976:	f24c 3350 	movw	r3, #50000	; 0xc350
 802397a:	429e      	cmp	r6, r3
 802397c:	ec45 4b11 	vmov	d1, r4, r5
 8023980:	dce1      	bgt.n	8023946 <scalbn+0x6e>
 8023982:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80239b0 <scalbn+0xd8>
 8023986:	f000 f821 	bl	80239cc <copysign>
 802398a:	a309      	add	r3, pc, #36	; (adr r3, 80239b0 <scalbn+0xd8>)
 802398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023990:	e7e0      	b.n	8023954 <scalbn+0x7c>
 8023992:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023996:	3236      	adds	r2, #54	; 0x36
 8023998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802399c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80239a0:	4620      	mov	r0, r4
 80239a2:	4629      	mov	r1, r5
 80239a4:	2200      	movs	r2, #0
 80239a6:	4b08      	ldr	r3, [pc, #32]	; (80239c8 <scalbn+0xf0>)
 80239a8:	e7b2      	b.n	8023910 <scalbn+0x38>
 80239aa:	bf00      	nop
 80239ac:	f3af 8000 	nop.w
 80239b0:	c2f8f359 	.word	0xc2f8f359
 80239b4:	01a56e1f 	.word	0x01a56e1f
 80239b8:	8800759c 	.word	0x8800759c
 80239bc:	7e37e43c 	.word	0x7e37e43c
 80239c0:	43500000 	.word	0x43500000
 80239c4:	ffff3cb0 	.word	0xffff3cb0
 80239c8:	3c900000 	.word	0x3c900000

080239cc <copysign>:
 80239cc:	ec53 2b10 	vmov	r2, r3, d0
 80239d0:	ee11 0a90 	vmov	r0, s3
 80239d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80239d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80239dc:	ea41 0300 	orr.w	r3, r1, r0
 80239e0:	ec43 2b10 	vmov	d0, r2, r3
 80239e4:	4770      	bx	lr
	...

080239e8 <_init>:
 80239e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ea:	bf00      	nop
 80239ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239ee:	bc08      	pop	{r3}
 80239f0:	469e      	mov	lr, r3
 80239f2:	4770      	bx	lr

080239f4 <_fini>:
 80239f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239f6:	bf00      	nop
 80239f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239fa:	bc08      	pop	{r3}
 80239fc:	469e      	mov	lr, r3
 80239fe:	4770      	bx	lr
