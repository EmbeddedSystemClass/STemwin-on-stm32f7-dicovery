
32F746Discovery_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026658  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e360  08026828  08026828  00036828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08034b88  08034b88  00044b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08034b90  08034b90  00044b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08034b94  08034b94  00044b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000000  08034b98  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00046724  20000160  08034cf8  00050160  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20046884  08034cf8  00056884  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00050160  2**0
                  CONTENTS, READONLY
 10 .debug_line   000229c9  00000000  00000000  00050190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000a469b  00000000  00000000  00072b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000e06f  00000000  00000000  001171f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003300  00000000  00000000  00125268  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003fd8  00000000  00000000  00128568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002725c  00000000  00000000  0012c540  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0001371c  00000000  00000000  0015379c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00166eb8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a7d8  00000000  00000000  00166fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026810 	.word	0x08026810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	08026810 	.word	0x08026810

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_ldivmod>:
 8000be0:	b97b      	cbnz	r3, 8000c02 <__aeabi_ldivmod+0x22>
 8000be2:	b972      	cbnz	r2, 8000c02 <__aeabi_ldivmod+0x22>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bfbe      	ittt	lt
 8000be8:	2000      	movlt	r0, #0
 8000bea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bee:	e006      	blt.n	8000bfe <__aeabi_ldivmod+0x1e>
 8000bf0:	bf08      	it	eq
 8000bf2:	2800      	cmpeq	r0, #0
 8000bf4:	bf1c      	itt	ne
 8000bf6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfe:	f000 b9c5 	b.w	8000f8c <__aeabi_idiv0>
 8000c02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	db09      	blt.n	8000c22 <__aeabi_ldivmod+0x42>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db1a      	blt.n	8000c48 <__aeabi_ldivmod+0x68>
 8000c12:	f000 f84d 	bl	8000cb0 <__udivmoddi4>
 8000c16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1e:	b004      	add	sp, #16
 8000c20:	4770      	bx	lr
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db1b      	blt.n	8000c64 <__aeabi_ldivmod+0x84>
 8000c2c:	f000 f840 	bl	8000cb0 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	f000 f82f 	bl	8000cb0 <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f821 	bl	8000cb0 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f96:	e003      	b.n	8000fa0 <LoopCopyDataInit>

08000f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f9e:	3104      	adds	r1, #4

08000fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa8:	d3f6      	bcc.n	8000f98 <CopyDataInit>
  ldr  r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fac:	e002      	b.n	8000fb4 <LoopFillZerobss>

08000fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb0:	f842 3b04 	str.w	r3, [r2], #4

08000fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb8:	d3f9      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fba:	f004 f975 	bl	80052a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f023 fd75 	bl	8024aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f000 fd8f 	bl	8001ae4 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000fcc:	08034b98 	.word	0x08034b98
  ldr  r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd4:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 8000fd8:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 8000fdc:	20046884 	.word	0x20046884

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>

08000fe2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe2:	b570      	push	{r4, r5, r6, lr}
 8000fe4:	460e      	mov	r6, r1
 8000fe6:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	460c      	mov	r4, r1
 8000fea:	1ba3      	subs	r3, r4, r6
 8000fec:	429d      	cmp	r5, r3
 8000fee:	dc01      	bgt.n	8000ff4 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000ff4:	f000 f9d0 	bl	8001398 <__io_getchar>
 8000ff8:	f804 0b01 	strb.w	r0, [r4], #1
 8000ffc:	e7f5      	b.n	8000fea <_read+0x8>

08000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffe:	b570      	push	{r4, r5, r6, lr}
 8001000:	460e      	mov	r6, r1
 8001002:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	460c      	mov	r4, r1
 8001006:	1ba3      	subs	r3, r4, r6
 8001008:	429d      	cmp	r5, r3
 800100a:	dc01      	bgt.n	8001010 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800100c:	4628      	mov	r0, r5
 800100e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001010:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001014:	f000 f9b0 	bl	8001378 <__io_putchar>
 8001018:	e7f5      	b.n	8001006 <_write+0x8>
	...

0800101c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800101c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_sbrk+0x2c>)
{
 8001020:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	b909      	cbnz	r1, 800102a <_sbrk+0xe>
		heap_end = &end;
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <_sbrk+0x30>)
 8001028:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800102a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800102c:	4669      	mov	r1, sp
 800102e:	4402      	add	r2, r0
 8001030:	428a      	cmp	r2, r1
 8001032:	d906      	bls.n	8001042 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001034:	f023 fd34 	bl	8024aa0 <__errno>
 8001038:	230c      	movs	r3, #12
 800103a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001042:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop
 8001048:	2000052c 	.word	0x2000052c
 800104c:	20046884 	.word	0x20046884

08001050 <_close>:

int _close(int file)
{
	return -1;
}
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800105a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800105c:	604b      	str	r3, [r1, #4]
}
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001060:	2001      	movs	r0, #1
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001064:	2000      	movs	r0, #0
 8001066:	4770      	bx	lr

08001068 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	2210      	movs	r2, #16
 800106c:	2100      	movs	r1, #0
 800106e:	4668      	mov	r0, sp

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001070:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001074:	f023 fd82 	bl	8024b7c <memset>
  hadc3.Instance = ADC3;
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_ADC3_Init+0x5c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ADC3_Init+0x60>)
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_ADC3_Init+0x64>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107e:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 8001084:	2401      	movs	r4, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800108a:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800108c:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800108e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001096:	61c4      	str	r4, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001098:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109c:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109e:	f004 f963 	bl	8005368 <HAL_ADC_Init>
 80010a2:	b108      	cbz	r0, 80010a8 <MX_ADC3_Init+0x40>
  {
    Error_Handler();
 80010a4:	f000 fd80 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a8:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010aa:	4669      	mov	r1, sp
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC3_Init+0x5c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b2:	2300      	movs	r3, #0
 80010b4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b6:	f004 fa91 	bl	80055dc <HAL_ADC_ConfigChannel>
 80010ba:	b108      	cbz	r0, 80010c0 <MX_ADC3_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 fd74 	bl	8001ba8 <Error_Handler>
  }

}
 80010c0:	b004      	add	sp, #16
 80010c2:	bd10      	pop	{r4, pc}
 80010c4:	200453d8 	.word	0x200453d8
 80010c8:	40012200 	.word	0x40012200
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	2214      	movs	r2, #20
 80010d8:	2100      	movs	r1, #0
 80010da:	a803      	add	r0, sp, #12
 80010dc:	f023 fd4e 	bl	8024b7c <memset>
  if(adcHandle->Instance==ADC3)
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0x7c>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d12e      	bne.n	8001146 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010e8:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ee:	a903      	add	r1, sp, #12
 80010f0:	4817      	ldr	r0, [pc, #92]	; (8001150 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
 80010fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010fc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
 800110c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110e:	f002 0220 	and.w	r2, r2, #32
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800112a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800112e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001130:	f004 fea0 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001134:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001136:	a903      	add	r1, sp, #12
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800113a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001142:	f004 fe97 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001146:	b008      	add	sp, #32
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	40012200 	.word	0x40012200
 8001150:	40021400 	.word	0x40021400
 8001154:	40020000 	.word	0x40020000

08001158 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001158:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_CRC_Init+0x28>)
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_CRC_Init+0x2c>)
 800115e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001164:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001166:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001168:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800116a:	2301      	movs	r3, #1
 800116c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800116e:	f004 fb87 	bl	8005880 <HAL_CRC_Init>
 8001172:	b118      	cbz	r0, 800117c <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 8001174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001178:	f000 bd16 	b.w	8001ba8 <Error_Handler>
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	20045420 	.word	0x20045420
 8001184:	40023000 	.word	0x40023000

08001188 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001188:	6802      	ldr	r2, [r0, #0]
{
 800118a:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_CRC_MspInit+0x28>)
 800118e:	429a      	cmp	r2, r3
 8001190:	d10b      	bne.n	80011aa <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001192:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800119a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011aa:	b002      	add	sp, #8
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023000 	.word	0x40023000

080011b4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011b4:	b508      	push	{r3, lr}

  hdcmi.Instance = DCMI;
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <MX_DCMI_Init+0x30>)
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_DCMI_Init+0x34>)
 80011ba:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011bc:	2300      	movs	r3, #0
 80011be:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011c0:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80011c2:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011c4:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011c6:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011c8:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011ca:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80011cc:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80011ce:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80011d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80011d2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011d4:	f004 fbf2 	bl	80059bc <HAL_DCMI_Init>
 80011d8:	b118      	cbz	r0, 80011e2 <MX_DCMI_Init+0x2e>
  {
    Error_Handler();
  }

}
 80011da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011de:	f000 bce3 	b.w	8001ba8 <Error_Handler>
 80011e2:	bd08      	pop	{r3, pc}
 80011e4:	20045444 	.word	0x20045444
 80011e8:	50050000 	.word	0x50050000

080011ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	2214      	movs	r2, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	a807      	add	r0, sp, #28
 80011f8:	f023 fcc0 	bl	8024b7c <memset>
  if(dcmiHandle->Instance==DCMI)
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_DCMI_MspInit+0xf4>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d16b      	bne.n	80012dc <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001208:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120a:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 800120c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	4835      	ldr	r0, [pc, #212]	; (80012e8 <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	f002 0201 	and.w	r2, r2, #1
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	f042 0210 	orr.w	r2, r2, #16
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	f002 0210 	and.w	r2, r2, #16
 8001230:	9202      	str	r2, [sp, #8]
 8001232:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001236:	f042 0208 	orr.w	r2, r2, #8
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
 800123c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123e:	f002 0208 	and.w	r2, r2, #8
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001250:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001254:	9204      	str	r2, [sp, #16]
 8001256:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001262:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001266:	9205      	str	r2, [sp, #20]
 8001268:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	9306      	str	r3, [sp, #24]
 800127c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800127e:	2360      	movs	r3, #96	; 0x60
 8001280:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001282:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f004 fdf6 	bl	8005e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001288:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800128a:	a907      	add	r1, sp, #28
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800128e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001296:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001298:	f004 fdec 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012a0:	a907      	add	r1, sp, #28
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80012a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ac:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f004 fde1 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012b2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012b6:	a907      	add	r1, sp, #28
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c4:	f004 fdd6 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012c8:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	a907      	add	r1, sp, #28
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012d6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f004 fdcc 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80012dc:	b00c      	add	sp, #48	; 0x30
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	50050000 	.word	0x50050000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40020000 	.word	0x40020000

080012fc <dmc_itoa>:

/**
 * C version 0.4 char* style "itoa":
 */
char * dmc_itoa(int64_t value, char* result, int base)
{
 80012fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001300:	461e      	mov	r6, r3
	// check that the base if valid
	if (base < 2 || base > 36)
 8001302:	3b02      	subs	r3, #2
{
 8001304:	4614      	mov	r4, r2
	if (base < 2 || base > 36)
 8001306:	2b22      	cmp	r3, #34	; 0x22
 8001308:	d904      	bls.n	8001314 <dmc_itoa+0x18>
	{
		*result = '\0';
 800130a:	2300      	movs	r3, #0
 800130c:	7013      	strb	r3, [r2, #0]
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
 800130e:	4620      	mov	r0, r4
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	4615      	mov	r5, r2
		value /= base;
 8001316:	46b0      	mov	r8, r6
 8001318:	ea4f 79e6 	mov.w	r9, r6, asr #31
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 800131c:	f8df a054 	ldr.w	sl, [pc, #84]	; 8001374 <dmc_itoa+0x78>
		tmp_value = value;
 8001320:	4607      	mov	r7, r0
		value /= base;
 8001322:	4642      	mov	r2, r8
 8001324:	464b      	mov	r3, r9
 8001326:	f7ff fc5b 	bl	8000be0 <__aeabi_ldivmod>
				+ (tmp_value - value * base)];
 800132a:	fba6 2300 	umull	r2, r3, r6, r0
 800132e:	eb0a 0307 	add.w	r3, sl, r7
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 8001332:	46ae      	mov	lr, r5
 8001334:	1a9a      	subs	r2, r3, r2
 8001336:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 800133a:	f80e 3b01 	strb.w	r3, [lr], #1
	while (value);
 800133e:	ea50 0301 	orrs.w	r3, r0, r1
 8001342:	d115      	bne.n	8001370 <dmc_itoa+0x74>
	if (tmp_value < 0)
 8001344:	2f00      	cmp	r7, #0
		*ptr++ = '-';
 8001346:	bfbe      	ittt	lt
 8001348:	232d      	movlt	r3, #45	; 0x2d
 800134a:	f88e 3000 	strblt.w	r3, [lr]
 800134e:	f105 0e02 	addlt.w	lr, r5, #2
	*ptr-- = '\0';
 8001352:	2300      	movs	r3, #0
 8001354:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001358:	f88e 3000 	strb.w	r3, [lr]
 800135c:	4623      	mov	r3, r4
	while (ptr1 < ptr)
 800135e:	429a      	cmp	r2, r3
 8001360:	d9d5      	bls.n	800130e <dmc_itoa+0x12>
		tmp_char = *ptr;
 8001362:	7811      	ldrb	r1, [r2, #0]
		*ptr-- = *ptr1;
 8001364:	7818      	ldrb	r0, [r3, #0]
 8001366:	f802 0901 	strb.w	r0, [r2], #-1
		*ptr1++ = tmp_char;
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f6      	b.n	800135e <dmc_itoa+0x62>
	while (value);
 8001370:	4675      	mov	r5, lr
 8001372:	e7d5      	b.n	8001320 <dmc_itoa+0x24>
 8001374:	08034040 	.word	0x08034040

08001378 <__io_putchar>:
	VprintUart3(fmt, argp);
	va_end(argp);
}

int __io_putchar(int ch)
{
 8001378:	b513      	push	{r0, r1, r4, lr}
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800137a:	a902      	add	r1, sp, #8
{
 800137c:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800137e:	230a      	movs	r3, #10
 8001380:	2201      	movs	r2, #1
	c[0] = ch & 0x00FF;
 8001382:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <__io_putchar+0x1c>)
 8001388:	f00a ff81 	bl	800c28e <HAL_UART_Transmit>
	return ch;
}
 800138c:	4620      	mov	r0, r4
 800138e:	b002      	add	sp, #8
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	20045998 	.word	0x20045998

08001398 <__io_getchar>:

int __io_getchar(void)
{
 8001398:	b513      	push	{r0, r1, r4, lr}
	HAL_StatusTypeDef Status = HAL_BUSY;
	uint8_t ch;
	// Remember RS485 TX_Enable
	while (Status != HAL_OK)
	{
		Status = HAL_UART_Receive(&huart1, &ch, 1, 10);
 800139a:	4c07      	ldr	r4, [pc, #28]	; (80013b8 <__io_getchar+0x20>)
 800139c:	230a      	movs	r3, #10
 800139e:	2201      	movs	r2, #1
 80013a0:	f10d 0107 	add.w	r1, sp, #7
 80013a4:	4620      	mov	r0, r4
 80013a6:	f00a ffc9 	bl	800c33c <HAL_UART_Receive>
	while (Status != HAL_OK)
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d1f6      	bne.n	800139c <__io_getchar+0x4>
	}
	return (ch);
}
 80013ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013b2:	b002      	add	sp, #8
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	20045998 	.word	0x20045998

080013bc <dmc_putc>:
	__io_putchar(v & 0xff);
}

void dmc_putc(char c)
{
	__io_putchar(c);
 80013bc:	f7ff bfdc 	b.w	8001378 <__io_putchar>

080013c0 <dmc_putcr>:
	__io_putchar('\n');
}

void dmc_putcr(void)
{
	__io_putchar('\n');
 80013c0:	200a      	movs	r0, #10
 80013c2:	f7ff bfd9 	b.w	8001378 <__io_putchar>

080013c6 <dmc_puts>:
}

void dmc_puts(char* str)
{
 80013c6:	b510      	push	{r4, lr}
 80013c8:	1e44      	subs	r4, r0, #1
	while (*str)
 80013ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80013ce:	b900      	cbnz	r0, 80013d2 <dmc_puts+0xc>
	{
		__io_putchar(*str++);
	}
}
 80013d0:	bd10      	pop	{r4, pc}
		__io_putchar(*str++);
 80013d2:	f7ff ffd1 	bl	8001378 <__io_putchar>
 80013d6:	e7f8      	b.n	80013ca <dmc_puts+0x4>

080013d8 <dmc_putint>:
{
 80013d8:	b500      	push	{lr}
 80013da:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 80013dc:	230a      	movs	r3, #10
 80013de:	17c1      	asrs	r1, r0, #31
 80013e0:	466a      	mov	r2, sp
 80013e2:	f7ff ff8b 	bl	80012fc <dmc_itoa>
	dmc_puts(myStr);
 80013e6:	4668      	mov	r0, sp
 80013e8:	f7ff ffed 	bl	80013c6 <dmc_puts>
}
 80013ec:	b009      	add	sp, #36	; 0x24
 80013ee:	f85d fb04 	ldr.w	pc, [sp], #4

080013f2 <dmc_puthex8>:
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	b088      	sub	sp, #32
	dmc_itoa(value, myStr, 16);
 80013f6:	2310      	movs	r3, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	466a      	mov	r2, sp
 80013fc:	f7ff ff7e 	bl	80012fc <dmc_itoa>
	uint8_t len = strlen(myStr);
 8001400:	4668      	mov	r0, sp
 8001402:	f7fe ff05 	bl	8000210 <strlen>
 8001406:	b2c4      	uxtb	r4, r0
	for (; len < 8; len++)
 8001408:	2c07      	cmp	r4, #7
 800140a:	d904      	bls.n	8001416 <dmc_puthex8+0x24>
	dmc_puts(myStr);
 800140c:	4668      	mov	r0, sp
 800140e:	f7ff ffda 	bl	80013c6 <dmc_puts>
}
 8001412:	b008      	add	sp, #32
 8001414:	bd10      	pop	{r4, pc}
	for (; len < 8; len++)
 8001416:	3401      	adds	r4, #1
		__io_putchar('0');
 8001418:	2030      	movs	r0, #48	; 0x30
 800141a:	f7ff ffad 	bl	8001378 <__io_putchar>
	for (; len < 8; len++)
 800141e:	b2e4      	uxtb	r4, r4
 8001420:	e7f2      	b.n	8001408 <dmc_puthex8+0x16>

08001422 <dmc_puthex8cr>:
{
 8001422:	b508      	push	{r3, lr}
	dmc_puthex8(value);
 8001424:	f7ff ffe5 	bl	80013f2 <dmc_puthex8>
	__io_putchar('\n');
 8001428:	200a      	movs	r0, #10
}
 800142a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 800142e:	f7ff bfa3 	b.w	8001378 <__io_putchar>

08001432 <dmc_putscr>:
  }
  __io_putchar('\n');
}

void dmc_putscr(char* str)
{
 8001432:	b508      	push	{r3, lr}
	dmc_puts(str);
 8001434:	f7ff ffc7 	bl	80013c6 <dmc_puts>
	__io_putchar('\n');
 8001438:	200a      	movs	r0, #10
}
 800143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 800143e:	f7ff bf9b 	b.w	8001378 <__io_putchar>

08001442 <dmc_putintcr>:
{
 8001442:	b500      	push	{lr}
 8001444:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 8001446:	230a      	movs	r3, #10
 8001448:	17c1      	asrs	r1, r0, #31
 800144a:	466a      	mov	r2, sp
 800144c:	f7ff ff56 	bl	80012fc <dmc_itoa>
	dmc_putscr(myStr);
 8001450:	4668      	mov	r0, sp
 8001452:	f7ff ffee 	bl	8001432 <dmc_putscr>
}
 8001456:	b009      	add	sp, #36	; 0x24
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4

0800145c <rnd>:

static unsigned long m_z=12434,m_w=33254;

unsigned long rnd()
{
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <rnd+0x2c>)
 800145e:	f249 0169 	movw	r1, #36969	; 0x9069
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	b298      	uxth	r0, r3
 8001466:	0c1b      	lsrs	r3, r3, #16
 8001468:	fb01 3000 	mla	r0, r1, r0, r3
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <rnd+0x30>)
{
 800146e:	b510      	push	{r4, lr}
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 8001470:	6010      	str	r0, [r2, #0]
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 8001472:	f244 6450 	movw	r4, #18000	; 0x4650
 8001476:	680a      	ldr	r2, [r1, #0]
 8001478:	b293      	uxth	r3, r2
 800147a:	0c12      	lsrs	r2, r2, #16
 800147c:	fb04 2303 	mla	r3, r4, r3, r2
 8001480:	600b      	str	r3, [r1, #0]
    return ((m_z <<16) + m_w);
}
 8001482:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8001486:	bd10      	pop	{r4, pc}
 8001488:	2000009c 	.word	0x2000009c
 800148c:	20000098 	.word	0x20000098

08001490 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001490:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8001492:	f001 f9ed 	bl	8002870 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001496:	f003 fa8d 	bl	80049b4 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 800149a:	f001 fc32 	bl	8002d02 <GRAPHICS_MainTask>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f00c f9b7 	bl	800d812 <osDelay>
 80014a4:	e7fb      	b.n	800149e <StartDefaultTask+0xe>

080014a6 <vApplicationIdleHook>:
 80014a6:	4770      	bx	lr

080014a8 <vApplicationStackOverflowHook>:
{
 80014a8:	4770      	bx	lr

080014aa <vApplicationMallocFailedHook>:
{
 80014aa:	4770      	bx	lr

080014ac <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80014ac:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014ae:	4d07      	ldr	r5, [pc, #28]	; (80014cc <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 80014b0:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b4:	ac01      	add	r4, sp, #4
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014ba:	2100      	movs	r1, #0
 80014bc:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014be:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014c0:	f00c f98d 	bl	800d7de <osThreadCreate>
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <MX_FREERTOS_Init+0x24>)
 80014c6:	6018      	str	r0, [r3, #0]
}
 80014c8:	b007      	add	sp, #28
 80014ca:	bd30      	pop	{r4, r5, pc}
 80014cc:	08026828 	.word	0x08026828
 80014d0:	20045494 	.word	0x20045494

080014d4 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 80014d4:	4770      	bx	lr
	...

080014d8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	2214      	movs	r2, #20
 80014e0:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014e2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 80017a4 <MX_GPIO_Init+0x2cc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	a80d      	add	r0, sp, #52	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80014e8:	4fa4      	ldr	r7, [pc, #656]	; (800177c <MX_GPIO_Init+0x2a4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f023 fb47 	bl	8024b7c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4ba4      	ldr	r3, [pc, #656]	; (8001780 <MX_GPIO_Init+0x2a8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014f0:	4658      	mov	r0, fp
 80014f2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80014f8:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 80017a8 <MX_GPIO_Init+0x2d0>
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001506:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001510:	f002 0210 	and.w	r2, r2, #16
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152c:	f042 0202 	orr.w	r2, r2, #2
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f002 0202 	and.w	r2, r2, #2
 8001538:	9204      	str	r2, [sp, #16]
 800153a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001546:	f002 0208 	and.w	r2, r2, #8
 800154a:	9205      	str	r2, [sp, #20]
 800154c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f042 0204 	orr.w	r2, r2, #4
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f002 0204 	and.w	r2, r2, #4
 800155c:	9206      	str	r2, [sp, #24]
 800155e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156a:	f002 0201 	and.w	r2, r2, #1
 800156e:	9207      	str	r2, [sp, #28]
 8001570:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001580:	9208      	str	r2, [sp, #32]
 8001582:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001592:	9209      	str	r2, [sp, #36]	; 0x24
 8001594:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80015a4:	920a      	str	r2, [sp, #40]	; 0x28
 80015a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015aa:	f042 0220 	orr.w	r2, r2, #32
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f002 0220 	and.w	r2, r2, #32
 80015b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80015b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	930c      	str	r3, [sp, #48]	; 0x30
 80015cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015ce:	f004 fe81 	bl	80062d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80015d2:	4638      	mov	r0, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	210c      	movs	r1, #12
 80015d8:	f004 fe7c 	bl	80062d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80015dc:	4b69      	ldr	r3, [pc, #420]	; (8001784 <MX_GPIO_Init+0x2ac>)
 80015de:	2201      	movs	r2, #1
 80015e0:	2108      	movs	r1, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f004 fe75 	bl	80062d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80015ea:	4638      	mov	r0, r7
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f2:	f004 fe6f 	bl	80062d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80015f6:	4650      	mov	r0, sl
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fe:	f004 fe69 	bl	80062d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	21c8      	movs	r1, #200	; 0xc8
 8001606:	4860      	ldr	r0, [pc, #384]	; (8001788 <MX_GPIO_Init+0x2b0>)
 8001608:	f004 fe64 	bl	80062d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800160c:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800160e:	a90d      	add	r1, sp, #52	; 0x34
 8001610:	485e      	ldr	r0, [pc, #376]	; (800178c <MX_GPIO_Init+0x2b4>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001612:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001618:	f004 fc2c 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800161c:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	a90d      	add	r1, sp, #52	; 0x34
 8001622:	485b      	ldr	r0, [pc, #364]	; (8001790 <MX_GPIO_Init+0x2b8>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001624:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800162e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f004 fc1f 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800163a:	a90d      	add	r1, sp, #52	; 0x34
 800163c:	4855      	ldr	r0, [pc, #340]	; (8001794 <MX_GPIO_Init+0x2bc>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800163e:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001644:	f004 fc16 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <MX_GPIO_Init+0x2c0>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800164a:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800164c:	a90d      	add	r1, sp, #52	; 0x34
 800164e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001650:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001652:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001656:	f004 fc0d 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800165a:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800165c:	a90d      	add	r1, sp, #52	; 0x34
 800165e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001662:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001668:	f004 fc04 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800166c:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001670:	a90d      	add	r1, sp, #52	; 0x34
 8001672:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001676:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800167c:	f004 fbfa 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <MX_GPIO_Init+0x2c4>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001686:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800168a:	4610      	mov	r0, r2
 800168c:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800168e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001692:	f004 fbef 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001696:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001698:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800169c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800169e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016a2:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f004 fbe5 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016aa:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ac:	a90d      	add	r1, sp, #52	; 0x34
 80016ae:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016b0:	930d      	str	r3, [sp, #52]	; 0x34
 80016b2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f004 fbdc 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016bc:	f248 0104 	movw	r1, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c0:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016c4:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c6:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ca:	f004 fbd3 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016d2:	a90d      	add	r1, sp, #52	; 0x34
 80016d4:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016d8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016de:	f004 fbc9 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016e6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ea:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016ec:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016f0:	f004 fbc0 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80016f8:	a90d      	add	r1, sp, #52	; 0x34
 80016fa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016fe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_GPIO_Init+0x2c0>)
 8001702:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001704:	f004 fbb6 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001708:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800170a:	a90d      	add	r1, sp, #52	; 0x34
 800170c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001712:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001718:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800171c:	f004 fbaa 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001720:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001722:	a90d      	add	r1, sp, #52	; 0x34
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001726:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172e:	f004 fba1 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001734:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	4610      	mov	r0, r2
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800173e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001744:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f004 fb94 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800174c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800174e:	a90d      	add	r1, sp, #52	; 0x34
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001752:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001758:	f004 fb8c 	bl	8005e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800175c:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	a90d      	add	r1, sp, #52	; 0x34
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001762:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800176c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f004 fb80 	bl	8005e74 <HAL_GPIO_Init>

}
 8001774:	b013      	add	sp, #76	; 0x4c
 8001776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000
 8001780:	40023800 	.word	0x40023800
 8001784:	40022800 	.word	0x40022800
 8001788:	40021800 	.word	0x40021800
 800178c:	40021000 	.word	0x40021000
 8001790:	40020400 	.word	0x40020400
 8001794:	40022400 	.word	0x40022400
 8001798:	10120000 	.word	0x10120000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021c00 	.word	0x40021c00

080017ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ac:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b0:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b4:	4912      	ldr	r1, [pc, #72]	; (8001800 <MX_I2C1_Init+0x54>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017b8:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ca:	f005 fb6f 	bl	8006eac <HAL_I2C_Init>
 80017ce:	b108      	cbz	r0, 80017d4 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80017d0:	f000 f9ea 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_I2C1_Init+0x4c>)
 80017d8:	f005 fdd4 	bl	8007384 <HAL_I2CEx_ConfigAnalogFilter>
 80017dc:	b108      	cbz	r0, 80017e2 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80017de:	f000 f9e3 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C1_Init+0x4c>)
 80017e6:	f005 fe13 	bl	8007410 <HAL_I2CEx_ConfigDigitalFilter>
 80017ea:	b118      	cbz	r0, 80017f4 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80017ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017f0:	f000 b9da 	b.w	8001ba8 <Error_Handler>
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop
 80017f8:	200454e4 	.word	0x200454e4
 80017fc:	00c0eaff 	.word	0x00c0eaff
 8001800:	40005400 	.word	0x40005400

08001804 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001804:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00C0EAFF;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x00C0EAFF;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_I2C3_Init+0x50>)
 800180c:	4912      	ldr	r1, [pc, #72]	; (8001858 <MX_I2C3_Init+0x54>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180e:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001810:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	6083      	str	r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800181a:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800181c:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181e:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001822:	f005 fb43 	bl	8006eac <HAL_I2C_Init>
 8001826:	b108      	cbz	r0, 800182c <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8001828:	f000 f9be 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <MX_I2C3_Init+0x4c>)
 8001830:	f005 fda8 	bl	8007384 <HAL_I2CEx_ConfigAnalogFilter>
 8001834:	b108      	cbz	r0, 800183a <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 8001836:	f000 f9b7 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C3_Init+0x4c>)
 800183e:	f005 fde7 	bl	8007410 <HAL_I2CEx_ConfigDigitalFilter>
 8001842:	b118      	cbz	r0, 800184c <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 8001844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001848:	f000 b9ae 	b.w	8001ba8 <Error_Handler>
 800184c:	bd08      	pop	{r3, pc}
 800184e:	bf00      	nop
 8001850:	20045498 	.word	0x20045498
 8001854:	00c0eaff 	.word	0x00c0eaff
 8001858:	40005c00 	.word	0x40005c00

0800185c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	2214      	movs	r2, #20
{
 8001860:	b08a      	sub	sp, #40	; 0x28
 8001862:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	2100      	movs	r1, #0
 8001866:	eb0d 0002 	add.w	r0, sp, r2
 800186a:	f023 f987 	bl	8024b7c <memset>
  if(i2cHandle->Instance==I2C1)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_I2C_MspInit+0xac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d121      	bne.n	80018ba <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4c25      	ldr	r4, [pc, #148]	; (800190c <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	a905      	add	r1, sp, #20
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	6323      	str	r3, [r4, #48]	; 0x30
 8001884:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800188e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001892:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189c:	2304      	movs	r3, #4
 800189e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f004 fae8 	bl	8005e74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018aa:	6423      	str	r3, [r4, #64]	; 0x40
 80018ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018b6:	b00a      	add	sp, #40	; 0x28
 80018b8:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_I2C_MspInit+0xb8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d1fa      	bne.n	80018b6 <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c0:	4c12      	ldr	r4, [pc, #72]	; (800190c <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018c2:	a905      	add	r1, sp, #20
 80018c4:	4814      	ldr	r0, [pc, #80]	; (8001918 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6323      	str	r3, [r4, #48]	; 0x30
 80018ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80018d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ea:	2304      	movs	r3, #4
 80018ec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ee:	f004 fac1 	bl	8005e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f8:	6423      	str	r3, [r4, #64]	; 0x40
 80018fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	9b04      	ldr	r3, [sp, #16]
}
 8001904:	e7d7      	b.n	80018b6 <HAL_I2C_MspInit+0x5a>
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400
 8001914:	40005c00 	.word	0x40005c00
 8001918:	40021c00 	.word	0x40021c00

0800191c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_I2C_MspDeInit+0x3c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10a      	bne.n	800193a <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001924:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001928:	f44f 7140 	mov.w	r1, #768	; 0x300
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <HAL_I2C_MspDeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 800192e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001936:	f004 bbf1 	b.w	800611c <HAL_GPIO_DeInit>
  else if(i2cHandle->Instance==I2C3)
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_I2C_MspDeInit+0x44>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d109      	bne.n	8001954 <HAL_I2C_MspDeInit+0x38>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001940:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001944:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800194a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800194c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	e7f0      	b.n	8001936 <HAL_I2C_MspDeInit+0x1a>
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40005400 	.word	0x40005400
 800195c:	40020400 	.word	0x40020400
 8001960:	40005c00 	.word	0x40005c00
 8001964:	40021c00 	.word	0x40021c00

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196c:	2230      	movs	r2, #48	; 0x30
 800196e:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001970:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001974:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f023 f901 	bl	8024b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197a:	2214      	movs	r2, #20
 800197c:	2100      	movs	r1, #0
 800197e:	a802      	add	r0, sp, #8
 8001980:	f023 f8fc 	bl	8024b7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	2100      	movs	r1, #0
 8001986:	2284      	movs	r2, #132	; 0x84
 8001988:	a813      	add	r0, sp, #76	; 0x4c
 800198a:	f023 f8f7 	bl	8024b7c <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2400      	movs	r4, #0
  HAL_PWR_EnableBkUpAccess();
 8001990:	f006 f960 	bl	8007c54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <SystemClock_Config+0xe8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <SystemClock_Config+0xec>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c4:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019c8:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019ce:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019d0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019d8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80019da:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019de:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f006 fa52 	bl	8007e88 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019e4:	f006 f93e 	bl	8007c64 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80019ea:	2106      	movs	r1, #6
 80019ec:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ee:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f4:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fe:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a00:	f006 fc7e 	bl	8008300 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a06:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001a08:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001a0a:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001a0c:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a0e:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001a10:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a12:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a16:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a18:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a1a:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a1c:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a1e:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a20:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a22:	961c      	str	r6, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a24:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a2a:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a2c:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001a32:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a34:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001a36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a3a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a3c:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a3e:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a40:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001a42:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001a44:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a46:	f006 fd91 	bl	800856c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001a4a:	b034      	add	sp, #208	; 0xd0
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	01b14868 	.word	0x01b14868

08001a5c <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init()
{
 8001a5c:	b508      	push	{r3, lr}
  BSP_TS_Init(480, 272);
 8001a5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a62:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a66:	f003 fb0f 	bl	8005088 <BSP_TS_Init>

  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <TouchTimer_Init+0x24>)
 8001a6c:	f009 f934 	bl	800acd8 <HAL_TIM_Base_Init>
 8001a70:	b100      	cbz	r0, 8001a74 <TouchTimer_Init+0x18>
 8001a72:	e7fe      	b.n	8001a72 <TouchTimer_Init+0x16>
  {
    while(1);
  }
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TouchTimer_Init+0x24>)
 8001a76:	f008 ffbd 	bl	800a9f4 <HAL_TIM_Base_Start_IT>
 8001a7a:	b100      	cbz	r0, 8001a7e <TouchTimer_Init+0x22>
 8001a7c:	e7fe      	b.n	8001a7c <TouchTimer_Init+0x20>
 8001a7e:	bd08      	pop	{r3, pc}
 8001a80:	20045898 	.word	0x20045898

08001a84 <PollTouchScreen2>:
    while(1);
  }
}

void PollTouchScreen2(void)
{
 8001a84:	b500      	push	{lr}
 8001a86:	b08f      	sub	sp, #60	; 0x3c
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8001a88:	a803      	add	r0, sp, #12
 8001a8a:	f003 fb55 	bl	8005138 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <PollTouchScreen2+0x5c>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a90:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a94:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a96:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a9a:	4291      	cmp	r1, r2
 8001a9c:	d01c      	beq.n	8001ad8 <PollTouchScreen2+0x54>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8001a9e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8001aa2:	b121      	cbz	r1, 8001aae <PollTouchScreen2+0x2a>
 8001aa4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001aa8:	b10a      	cbz	r2, 8001aae <PollTouchScreen2+0x2a>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8001aaa:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8001aac:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8001aae:	2200      	movs	r2, #0
    TS_State.x = prev_state.touchX[0];
 8001ab0:	8858      	ldrh	r0, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8001ab2:	899b      	ldrh	r3, [r3, #12]
    TS_State.Layer = 0;
 8001ab4:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.y = prev_state.touchY[0];
 8001ab8:	9301      	str	r3, [sp, #4]
    TS_State.x = prev_state.touchX[0];
 8001aba:	9000      	str	r0, [sp, #0]

    dmc_putint((uint16_t)TS_State.x);
 8001abc:	f7ff fc8c 	bl	80013d8 <dmc_putint>
    dmc_putc(' ');
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f7ff fc7b 	bl	80013bc <dmc_putc>
    dmc_putint((uint16_t)TS_State.y);
 8001ac6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001aca:	f7ff fc85 	bl	80013d8 <dmc_putint>
    dmc_putcr();
 8001ace:	f7ff fc77 	bl	80013c0 <dmc_putcr>

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f016 f8f2 	bl	8017cbc <GUI_TOUCH_StoreStateEx>

  }
}
 8001ad8:	b00f      	add	sp, #60	; 0x3c
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop
 8001ae0:	20000530 	.word	0x20000530

08001ae4 <main>:
{
 8001ae4:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aea:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <main+0xa8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001afa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b04:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b0a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001b0e:	f003 fbf1 	bl	80052f4 <HAL_Init>
  SystemClock_Config();
 8001b12:	f7ff ff29 	bl	8001968 <SystemClock_Config>
  MX_GPIO_Init();
 8001b16:	f7ff fcdf 	bl	80014d8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001b1a:	f7ff faa5 	bl	8001068 <MX_ADC3_Init>
  MX_CRC_Init();
 8001b1e:	f7ff fb1b 	bl	8001158 <MX_CRC_Init>
  MX_DCMI_Init();
 8001b22:	f7ff fb47 	bl	80011b4 <MX_DCMI_Init>
  MX_GFXSIMULATOR_Init();
 8001b26:	f7ff fcd5 	bl	80014d4 <MX_GFXSIMULATOR_Init>
  MX_I2C1_Init();
 8001b2a:	f7ff fe3f 	bl	80017ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b2e:	f7ff fe69 	bl	8001804 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8001b32:	f000 f83b 	bl	8001bac <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001b36:	f000 f8c5 	bl	8001cc4 <MX_RTC_Init>
  MX_SAI2_Init();
 8001b3a:	f000 f945 	bl	8001dc8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001b3e:	f000 f9dd 	bl	8001efc <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001b42:	f000 fa37 	bl	8001fb4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001b46:	f000 fa7d 	bl	8002044 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b4a:	f000 fcaf 	bl	80024ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b4e:	f000 fd1d 	bl	800258c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b52:	f000 fb63 	bl	800221c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b56:	f000 fd67 	bl	8002628 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001b5a:	f000 fb91 	bl	8002280 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001b5e:	f000 fdb1 	bl	80026c4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001b62:	f000 fddb 	bl	800271c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b66:	f000 fdf7 	bl	8002758 <MX_USART6_UART_Init>
  TouchTimer_Init();
 8001b6a:	f7ff ff77 	bl	8001a5c <TouchTimer_Init>
  printf("Hi\n");
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <main+0xac>)
 8001b70:	f023 f914 	bl	8024d9c <puts>
  GRAPHICS_HW_Init();
 8001b74:	f002 fefc 	bl	8004970 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8001b78:	f002 ff07 	bl	800498a <GRAPHICS_Init>
  MX_FREERTOS_Init();
 8001b7c:	f7ff fc96 	bl	80014ac <MX_FREERTOS_Init>
  osKernelStart();
 8001b80:	f00b fe19 	bl	800d7b6 <osKernelStart>
    PollTouchScreen2();
 8001b84:	f7ff ff7e 	bl	8001a84 <PollTouchScreen2>
 8001b88:	e7fc      	b.n	8001b84 <main+0xa0>
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	08034094 	.word	0x08034094

08001b94 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b9c:	f003 bbc0 	b.w	8005320 <HAL_IncTick>
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40001000 	.word	0x40001000

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	4770      	bx	lr

08001baa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001baa:	4770      	bx	lr

08001bac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bac:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8001bb0:	23ff      	movs	r3, #255	; 0xff
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <MX_QUADSPI_Init+0x34>)
 8001bb4:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bb8:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8001bba:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bbc:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
 8001bbe:	6082      	str	r2, [r0, #8]
  hqspi.Init.FlashSize = 1;
 8001bc0:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001bc2:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001bc4:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001bc6:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001bc8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bca:	f006 f8a9 	bl	8007d20 <HAL_QSPI_Init>
 8001bce:	b118      	cbz	r0, 8001bd8 <MX_QUADSPI_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001bd4:	f7ff bfe8 	b.w	8001ba8 <Error_Handler>
 8001bd8:	bd08      	pop	{r3, pc}
 8001bda:	bf00      	nop
 8001bdc:	20045530 	.word	0x20045530
 8001be0:	a0001000 	.word	0xa0001000

08001be4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	2214      	movs	r2, #20
{
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	2100      	movs	r1, #0
 8001bf0:	eb0d 0002 	add.w	r0, sp, r2
 8001bf4:	f022 ffc2 	bl	8024b7c <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_QSPI_MspInit+0xcc>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d153      	bne.n	8001ca8 <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_QSPI_MspInit+0xd0>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c06:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c0a:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	a905      	add	r1, sp, #20
 8001c10:	4829      	ldr	r0, [pc, #164]	; (8001cb8 <HAL_QSPI_MspInit+0xd4>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c12:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c1c:	f002 0202 	and.w	r2, r2, #2
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2e:	f002 0210 	and.w	r2, r2, #16
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c38:	f042 0202 	orr.w	r2, r2, #2
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	f002 0202 	and.w	r2, r2, #2
 8001c44:	9203      	str	r2, [sp, #12]
 8001c46:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c52:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c62:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f004 f906 	bl	8005e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c68:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	a905      	add	r1, sp, #20
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c70:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c74:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f004 f8fb 	bl	8005e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	a905      	add	r1, sp, #20
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c82:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c8c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f004 f8f1 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	a905      	add	r1, sp, #20
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c9a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ca2:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	f004 f8e6 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001ca8:	b00a      	add	sp, #40	; 0x28
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cae:	bf00      	nop
 8001cb0:	a0001000 	.word	0xa0001000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020c00 	.word	0x40020c00

08001cc4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001cc8:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 8001cca:	2218      	movs	r2, #24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	a801      	add	r0, sp, #4
 8001cd0:	f022 ff54 	bl	8024b7c <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001cd4:	222c      	movs	r2, #44	; 0x2c
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	a807      	add	r0, sp, #28
  RTC_DateTypeDef sDate = {0};
 8001cda:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001cdc:	f022 ff4e 	bl	8024b7c <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001ce0:	4830      	ldr	r0, [pc, #192]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <MX_RTC_Init+0xe4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce4:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce6:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ce8:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cea:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8001cee:	237f      	movs	r3, #127	; 0x7f
 8001cf0:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf6:	f007 f8ff 	bl	8008ef8 <HAL_RTC_Init>
 8001cfa:	b108      	cbz	r0, 8001d00 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001cfc:	f7ff ff54 	bl	8001ba8 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d00:	2201      	movs	r2, #1
 8001d02:	a901      	add	r1, sp, #4
 8001d04:	4827      	ldr	r0, [pc, #156]	; (8001da4 <MX_RTC_Init+0xe0>)
  sTime.Hours = 0x0;
 8001d06:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8001d0a:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8001d0e:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d12:	9405      	str	r4, [sp, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d14:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d16:	f007 f985 	bl	8009024 <HAL_RTC_SetTime>
 8001d1a:	b108      	cbz	r0, 8001d20 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff ff44 	bl	8001ba8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d20:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8001d22:	2400      	movs	r4, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d24:	4669      	mov	r1, sp
 8001d26:	481f      	ldr	r0, [pc, #124]	; (8001da4 <MX_RTC_Init+0xe0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d28:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d2c:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8001d30:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8001d34:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d38:	f007 fa5a 	bl	80091f0 <HAL_RTC_SetDate>
 8001d3c:	b108      	cbz	r0, 8001d42 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001d3e:	f7ff ff33 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d42:	f88d 401c 	strb.w	r4, [sp, #28]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d4a:	f88d 401d 	strb.w	r4, [sp, #29]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d4e:	a907      	add	r1, sp, #28
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d50:	f88d 401e 	strb.w	r4, [sp, #30]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d54:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d56:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d58:	940c      	str	r4, [sp, #48]	; 0x30
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d5a:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d5c:	940e      	str	r4, [sp, #56]	; 0x38
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d5e:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d60:	2401      	movs	r4, #1
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d62:	4810      	ldr	r0, [pc, #64]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001d64:	4622      	mov	r2, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d66:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_A;
 8001d6a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d6c:	f007 faf8 	bl	8009360 <HAL_RTC_SetAlarm>
 8001d70:	b108      	cbz	r0, 8001d76 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8001d72:	f7ff ff19 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_B;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	a907      	add	r1, sp, #28
 8001d7e:	4809      	ldr	r0, [pc, #36]	; (8001da4 <MX_RTC_Init+0xe0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d80:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_B;
 8001d84:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	f007 faeb 	bl	8009360 <HAL_RTC_SetAlarm>
 8001d8a:	b108      	cbz	r0, 8001d90 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001d8c:	f7ff ff0c 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d90:	2202      	movs	r2, #2
 8001d92:	2100      	movs	r1, #0
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001d96:	f007 fc47 	bl	8009628 <HAL_RTCEx_SetTimeStamp>
 8001d9a:	b108      	cbz	r0, 8001da0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8001d9c:	f7ff ff04 	bl	8001ba8 <Error_Handler>
  }

}
 8001da0:	b012      	add	sp, #72	; 0x48
 8001da2:	bd10      	pop	{r4, pc}
 8001da4:	2004557c 	.word	0x2004557c
 8001da8:	40002800 	.word	0x40002800

08001dac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_RTC_MspInit+0x14>)
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d104      	bne.n	8001dbe <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RTC_MspInit+0x18>)
 8001db6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4770      	bx	lr
 8001dc0:	40002800 	.word	0x40002800
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <MX_SAI2_Init>:

/* SAI2 init function */
void MX_SAI2_Init(void)
{

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dc8:	481e      	ldr	r0, [pc, #120]	; (8001e44 <MX_SAI2_Init+0x7c>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dca:	2240      	movs	r2, #64	; 0x40
{
 8001dcc:	b508      	push	{r3, lr}
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dce:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <MX_SAI2_Init+0x80>)
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_SAI2_Init+0x84>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dd4:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001dd6:	2208      	movs	r2, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dd8:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dda:	2300      	movs	r3, #0
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ddc:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001dde:	2201      	movs	r2, #1
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001de0:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001de2:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001de4:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001de6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001de8:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dea:	6103      	str	r3, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001dec:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dee:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df0:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001df2:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001df4:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001df6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001df8:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001dfa:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001dfc:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dfe:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e00:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e02:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e04:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e06:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e08:	f007 fc68 	bl	80096dc <HAL_SAI_Init>
 8001e0c:	b108      	cbz	r0, 8001e12 <MX_SAI2_Init+0x4a>
  {
    Error_Handler();
 8001e0e:	f7ff fecb 	bl	8001ba8 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <MX_SAI2_Init+0x88>)
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e14:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_SAI2_Init+0x8c>)
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e1a:	61c2      	str	r2, [r0, #28]
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e1c:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e22:	2300      	movs	r3, #0
 8001e24:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e26:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e28:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e2a:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e2c:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e2e:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e30:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e32:	f007 fc53 	bl	80096dc <HAL_SAI_Init>
 8001e36:	b118      	cbz	r0, 8001e40 <MX_SAI2_Init+0x78>
  {
    Error_Handler();
  }

}
 8001e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e3c:	f7ff beb4 	b.w	8001ba8 <Error_Handler>
 8001e40:	bd08      	pop	{r3, pc}
 8001e42:	bf00      	nop
 8001e44:	20045620 	.word	0x20045620
 8001e48:	0002ee00 	.word	0x0002ee00
 8001e4c:	40015c04 	.word	0x40015c04
 8001e50:	2004559c 	.word	0x2004559c
 8001e54:	40015c24 	.word	0x40015c24

08001e58 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_SAI_MspInit+0x8c>)
 8001e5c:	429a      	cmp	r2, r3
{
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8001e64:	d11b      	bne.n	8001e9e <HAL_SAI_MspInit+0x46>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_SAI_MspInit+0x90>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	b94a      	cbnz	r2, 8001e80 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e6c:	491f      	ldr	r1, [pc, #124]	; (8001eec <HAL_SAI_MspInit+0x94>)
 8001e6e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001e74:	6448      	str	r0, [r1, #68]	; 0x44
 8001e76:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e78:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001e7c:	9101      	str	r1, [sp, #4]
 8001e7e:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 8001e80:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e82:	a903      	add	r1, sp, #12
 8001e84:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 8001e86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e88:	23f0      	movs	r3, #240	; 0xf0
 8001e8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e96:	230a      	movs	r3, #10
 8001e98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e9a:	f003 ffeb 	bl	8005e74 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_SAI_MspInit+0x9c>)
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_SAI_MspInit+0x88>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_SAI_MspInit+0x90>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	b94a      	cbnz	r2, 8001ec0 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001eac:	490f      	ldr	r1, [pc, #60]	; (8001eec <HAL_SAI_MspInit+0x94>)
 8001eae:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001eb4:	6448      	str	r0, [r1, #68]	; 0x44
 8001eb6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001eb8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001ebc:	9102      	str	r1, [sp, #8]
 8001ebe:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 8001ec0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	a903      	add	r1, sp, #12
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 8001ec6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ed8:	230a      	movs	r3, #10
 8001eda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f003 ffca 	bl	8005e74 <HAL_GPIO_Init>

    }
}
 8001ee0:	b008      	add	sp, #32
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	40015c04 	.word	0x40015c04
 8001ee8:	2000055c 	.word	0x2000055c
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40015c24 	.word	0x40015c24
 8001ef8:	40021800 	.word	0x40021800

08001efc <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <MX_SDMMC1_SD_Init+0x18>)
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <MX_SDMMC1_SD_Init+0x1c>)
 8001f00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f06:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f08:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001f0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f0c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200456a4 	.word	0x200456a4
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	2214      	movs	r2, #20
 8001f24:	2100      	movs	r1, #0
 8001f26:	a803      	add	r0, sp, #12
 8001f28:	f022 fe28 	bl	8024b7c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_SD_MspInit+0x8c>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d136      	bne.n	8001fa2 <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f34:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f38:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	eb0d 0104 	add.w	r1, sp, r4
 8001f44:	4819      	ldr	r0, [pc, #100]	; (8001fac <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f60:	f002 0204 	and.w	r2, r2, #4
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6a:	f042 0208 	orr.w	r2, r2, #8
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f7a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001f80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f84:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	f003 ff75 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f8a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	eb0d 0104 	add.w	r1, sp, r4
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f9c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f003 ff69 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001fa2:	b008      	add	sp, #32
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00

08001fb4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001fb4:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <MX_SPDIFRX_Init+0x30>)
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fbc:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001fc2:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001fc4:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001fc6:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001fc8:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001fca:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001fcc:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001fce:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001fd0:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001fd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001fd4:	f008 fa54 	bl	800a480 <HAL_SPDIFRX_Init>
 8001fd8:	b118      	cbz	r0, 8001fe2 <MX_SPDIFRX_Init+0x2e>
  {
    Error_Handler();
  }

}
 8001fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fde:	f7ff bde3 	b.w	8001ba8 <Error_Handler>
 8001fe2:	bd08      	pop	{r3, pc}
 8001fe4:	20045728 	.word	0x20045728

08001fe8 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fee:	2214      	movs	r2, #20
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	a803      	add	r0, sp, #12
 8001ff4:	f022 fdc2 	bl	8024b7c <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001ffe:	d11d      	bne.n	800203c <HAL_SPDIFRX_MspInit+0x54>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002000:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002004:	a903      	add	r1, sp, #12
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <HAL_SPDIFRX_MspInit+0x58>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	f042 0208 	orr.w	r2, r2, #8
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002034:	2308      	movs	r3, #8
 8002036:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002038:	f003 ff1c 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800203c:	b008      	add	sp, #32
 800203e:	bd10      	pop	{r4, pc}
 8002040:	40020c00 	.word	0x40020c00

08002044 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002044:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8002046:	4810      	ldr	r0, [pc, #64]	; (8002088 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002048:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800204c:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <MX_SPI2_Init+0x48>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002052:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002058:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800205c:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800205e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8002060:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002062:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002064:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002066:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002068:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800206c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002070:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002072:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8002074:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002076:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002078:	f008 fa90 	bl	800a59c <HAL_SPI_Init>
 800207c:	b118      	cbz	r0, 8002086 <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 800207e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002082:	f7ff bd91 	b.w	8001ba8 <Error_Handler>
 8002086:	bd08      	pop	{r3, pc}
 8002088:	20045774 	.word	0x20045774
 800208c:	40003800 	.word	0x40003800

08002090 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002090:	b530      	push	{r4, r5, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	2214      	movs	r2, #20
 8002098:	2100      	movs	r1, #0
 800209a:	a803      	add	r0, sp, #12
 800209c:	f022 fd6e 	bl	8024b7c <memset>
  if(spiHandle->Instance==SPI2)
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_SPI_MspInit+0x80>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d131      	bne.n	800210c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80020ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ae:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020b0:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020b4:	4817      	ldr	r0, [pc, #92]	; (8002114 <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020da:	f042 0202 	orr.w	r2, r2, #2
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80020e2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ea:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f003 fec0 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	a903      	add	r1, sp, #12
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002106:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f003 feb4 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800210c:	b009      	add	sp, #36	; 0x24
 800210e:	bd30      	pop	{r4, r5, pc}
 8002110:	40003800 	.word	0x40003800
 8002114:	40022000 	.word	0x40022000
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_MspInit+0x3c>)
{
 800211e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002122:	210f      	movs	r1, #15
 8002124:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
 800212e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002130:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002140:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214c:	f003 fb22 	bl	8005794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002150:	b003      	add	sp, #12
 8002152:	f85d fb04 	ldr.w	pc, [sp], #4
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800215e:	4601      	mov	r1, r0
{
 8002160:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002162:	2200      	movs	r2, #0
 8002164:	2036      	movs	r0, #54	; 0x36
 8002166:	f003 fb15 	bl	8005794 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800216a:	2036      	movs	r0, #54	; 0x36
 800216c:	f003 fb5a 	bl	8005824 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002172:	a901      	add	r1, sp, #4
 8002174:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002178:	4c13      	ldr	r4, [pc, #76]	; (80021c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217a:	f042 0210 	orr.w	r2, r2, #16
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800218a:	f006 f9d1 	bl	8008530 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800218e:	f006 f9af 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002194:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8002196:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002198:	f240 33e7 	movw	r3, #999	; 0x3e7
 800219c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_InitTick+0x74>)
 80021a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80021a4:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80021a6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80021a8:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021aa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80021ac:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021b0:	f008 fd92 	bl	800acd8 <HAL_TIM_Base_Init>
 80021b4:	b920      	cbnz	r0, 80021c0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021b6:	4620      	mov	r0, r4
 80021b8:	f008 fc1c 	bl	800a9f4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80021bc:	b008      	add	sp, #32
 80021be:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7fb      	b.n	80021bc <HAL_InitTick+0x60>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	200457d8 	.word	0x200457d8
 80021cc:	40001000 	.word	0x40001000
 80021d0:	000f4240 	.word	0x000f4240

080021d4 <NMI_Handler>:
 80021d4:	4770      	bx	lr

080021d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	e7fe      	b.n	80021da <BusFault_Handler>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler>

080021de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021de:	4770      	bx	lr

080021e0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <TIM3_IRQHandler+0x8>)
 80021e2:	f008 bc63 	b.w	800aaac <HAL_TIM_IRQHandler>
 80021e6:	bf00      	nop
 80021e8:	20045898 	.word	0x20045898

080021ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <TIM6_DAC_IRQHandler+0x8>)
 80021ee:	f008 bc5d 	b.w	800aaac <HAL_TIM_IRQHandler>
 80021f2:	bf00      	nop
 80021f4:	200457d8 	.word	0x200457d8

080021f8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021f8:	4801      	ldr	r0, [pc, #4]	; (8002200 <OTG_FS_IRQHandler+0x8>)
 80021fa:	f004 b987 	b.w	800650c <HAL_HCD_IRQHandler>
 80021fe:	bf00      	nop
 8002200:	200463f8 	.word	0x200463f8

08002204 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002204:	4801      	ldr	r0, [pc, #4]	; (800220c <LTDC_IRQHandler+0x8>)
 8002206:	f005 bab5 	b.w	8007774 <HAL_LTDC_IRQHandler>
 800220a:	bf00      	nop
 800220c:	20045f04 	.word	0x20045f04

08002210 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002210:	4801      	ldr	r0, [pc, #4]	; (8002218 <DMA2D_IRQHandler+0x8>)
 8002212:	f003 bd2b 	b.w	8005c6c <HAL_DMA2D_IRQHandler>
 8002216:	bf00      	nop
 8002218:	20045fac 	.word	0x20045fac

0800221c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800221c:	b510      	push	{r4, lr}
 800221e:	b088      	sub	sp, #32
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002220:	2214      	movs	r2, #20
 8002222:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002226:	a803      	add	r0, sp, #12
 8002228:	f022 fca8 	bl	8024b7c <memset>

  htim3.Instance = TIM3;
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <MX_TIM3_Init+0x5c>)
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_TIM3_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	9400      	str	r4, [sp, #0]
 8002232:	9401      	str	r4, [sp, #4]
 8002234:	9402      	str	r4, [sp, #8]
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 8002238:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 0;
 800223e:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002242:	f008 fd49 	bl	800acd8 <HAL_TIM_Base_Init>
 8002246:	b108      	cbz	r0, 800224c <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8002248:	f7ff fcae 	bl	8001ba8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800224c:	2304      	movs	r3, #4
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800224e:	a903      	add	r1, sp, #12
 8002250:	4809      	ldr	r0, [pc, #36]	; (8002278 <MX_TIM3_Init+0x5c>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002252:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002254:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002256:	f009 fbe1 	bl	800ba1c <HAL_TIM_SlaveConfigSynchro>
 800225a:	b108      	cbz	r0, 8002260 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 800225c:	f7ff fca4 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002262:	4669      	mov	r1, sp
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_TIM3_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226a:	f009 fc3d 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	b108      	cbz	r0, 8002274 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fc9a 	bl	8001ba8 <Error_Handler>
  }

}
 8002274:	b008      	add	sp, #32
 8002276:	bd10      	pop	{r4, pc}
 8002278:	20045898 	.word	0x20045898
 800227c:	40000400 	.word	0x40000400

08002280 <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002280:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	2210      	movs	r2, #16
{
 8002284:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	2100      	movs	r1, #0
 8002288:	eb0d 0002 	add.w	r0, sp, r2
 800228c:	f022 fc76 	bl	8024b7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	2300      	movs	r3, #0

  htim8.Instance = TIM8;
 8002292:	4814      	ldr	r0, [pc, #80]	; (80022e4 <MX_TIM8_Init+0x64>)
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <MX_TIM8_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	9303      	str	r3, [sp, #12]
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 800229e:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80022a2:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	6183      	str	r3, [r0, #24]
  htim8.Init.Prescaler = 0;
 80022a6:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022aa:	f008 fd15 	bl	800acd8 <HAL_TIM_Base_Init>
 80022ae:	b108      	cbz	r0, 80022b4 <MX_TIM8_Init+0x34>
  {
    Error_Handler();
 80022b0:	f7ff fc7a 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022b8:	a904      	add	r1, sp, #16
 80022ba:	480a      	ldr	r0, [pc, #40]	; (80022e4 <MX_TIM8_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022be:	f008 ffeb 	bl	800b298 <HAL_TIM_ConfigClockSource>
 80022c2:	b108      	cbz	r0, 80022c8 <MX_TIM8_Init+0x48>
  {
    Error_Handler();
 80022c4:	f7ff fc70 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022ca:	a901      	add	r1, sp, #4
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_TIM8_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022d0:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022d4:	f009 fc08 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 80022d8:	b108      	cbz	r0, 80022de <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 80022da:	f7ff fc65 	bl	8001ba8 <Error_Handler>
  }

}
 80022de:	b009      	add	sp, #36	; 0x24
 80022e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e4:	20045818 	.word	0x20045818
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80022ec:	6803      	ldr	r3, [r0, #0]
{
 80022ee:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_TIM_Base_MspInit+0xa8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10b      	bne.n	800230e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 80022f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800230a:	b006      	add	sp, #24
 800230c:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d10b      	bne.n	800232c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002314:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	e7ee      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d113      	bne.n	800235a <HAL_TIM_Base_MspInit+0x6e>
      __HAL_RCC_TIM3_CLK_ENABLE();
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 8002334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002336:	f042 0202 	orr.w	r2, r2, #2
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	f002 0202 	and.w	r2, r2, #2
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	f042 0202 	orr.w	r2, r2, #2
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	9303      	str	r3, [sp, #12]
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	e7d7      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM5)
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_TIM_Base_MspInit+0xb4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10a      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	f042 0208 	orr.w	r2, r2, #8
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	9b04      	ldr	r3, [sp, #16]
 8002374:	e7c9      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM8)
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d1c6      	bne.n	800230a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 800237e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002380:	f042 0202 	orr.w	r2, r2, #2
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	9305      	str	r3, [sp, #20]
 800238e:	9b05      	ldr	r3, [sp, #20]
}
 8002390:	e7bb      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40023800 	.word	0x40023800
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000c00 	.word	0x40000c00
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM12)
 80023a8:	6802      	ldr	r2, [r0, #0]
{
 80023aa:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM12)
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_TIM_PWM_MspInit+0x24>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10a      	bne.n	80023c8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023b2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80023b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80023c8:	b002      	add	sp, #8
 80023ca:	4770      	bx	lr
 80023cc:	40001800 	.word	0x40001800

080023d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	2214      	movs	r2, #20
{
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	2100      	movs	r1, #0
 80023da:	eb0d 0002 	add.w	r0, sp, r2
 80023de:	f022 fbcd 	bl	8024b7c <memset>
  if(timHandle->Instance==TIM1)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_TIM_MspPostInit+0xc0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d116      	bne.n	8002418 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002402:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002406:	a905      	add	r1, sp, #20
 8002408:	4823      	ldr	r0, [pc, #140]	; (8002498 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800240c:	2301      	movs	r3, #1
 800240e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002410:	f003 fd30 	bl	8005e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002414:	b00a      	add	sp, #40	; 0x28
 8002416:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d10d      	bne.n	800243a <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002438:	e7e3      	b.n	8002402 <HAL_TIM_MspPostInit+0x32>
  else if(timHandle->Instance==TIM5)
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_TIM_MspPostInit+0xcc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002442:	a905      	add	r1, sp, #20
 8002444:	4816      	ldr	r0, [pc, #88]	; (80024a0 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	9303      	str	r3, [sp, #12]
 8002456:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002458:	2301      	movs	r3, #1
 800245a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002460:	9309      	str	r3, [sp, #36]	; 0x24
 8002462:	e7d5      	b.n	8002410 <HAL_TIM_MspPostInit+0x40>
  else if(timHandle->Instance==TIM12)
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_TIM_MspPostInit+0xd4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d1d4      	bne.n	8002414 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800246c:	a905      	add	r1, sp, #20
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002482:	2340      	movs	r3, #64	; 0x40
 8002484:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800248a:	2309      	movs	r3, #9
 800248c:	9309      	str	r3, [sp, #36]	; 0x24
 800248e:	e7bf      	b.n	8002410 <HAL_TIM_MspPostInit+0x40>
 8002490:	40010000 	.word	0x40010000
 8002494:	40023800 	.word	0x40023800
 8002498:	40020000 	.word	0x40020000
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40001800 	.word	0x40001800
 80024a8:	40021c00 	.word	0x40021c00

080024ac <MX_TIM1_Init>:
{
 80024ac:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	2210      	movs	r2, #16
{
 80024b0:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b4:	2100      	movs	r1, #0
 80024b6:	eb0d 0002 	add.w	r0, sp, r2
 80024ba:	f022 fb5f 	bl	8024b7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024be:	221c      	movs	r2, #28
 80024c0:	4621      	mov	r1, r4
 80024c2:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	9401      	str	r4, [sp, #4]
 80024c6:	9402      	str	r4, [sp, #8]
 80024c8:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	f022 fb57 	bl	8024b7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024ce:	222c      	movs	r2, #44	; 0x2c
 80024d0:	4621      	mov	r1, r4
 80024d2:	a80f      	add	r0, sp, #60	; 0x3c
 80024d4:	f022 fb52 	bl	8024b7c <memset>
  htim1.Instance = TIM1;
 80024d8:	482a      	ldr	r0, [pc, #168]	; (8002584 <MX_TIM1_Init+0xd8>)
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024dc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 80024de:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80024e2:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 0;
 80024e6:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ea:	f008 fbf5 	bl	800acd8 <HAL_TIM_Base_Init>
 80024ee:	b108      	cbz	r0, 80024f4 <MX_TIM1_Init+0x48>
    Error_Handler();
 80024f0:	f7ff fb5a 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024f8:	a904      	add	r1, sp, #16
 80024fa:	4822      	ldr	r0, [pc, #136]	; (8002584 <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024fe:	f008 fecb 	bl	800b298 <HAL_TIM_ConfigClockSource>
 8002502:	b108      	cbz	r0, 8002508 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002504:	f7ff fb50 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002508:	481e      	ldr	r0, [pc, #120]	; (8002584 <MX_TIM1_Init+0xd8>)
 800250a:	f008 fc65 	bl	800add8 <HAL_TIM_PWM_Init>
 800250e:	b108      	cbz	r0, 8002514 <MX_TIM1_Init+0x68>
    Error_Handler();
 8002510:	f7ff fb4a 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002516:	a901      	add	r1, sp, #4
 8002518:	481a      	ldr	r0, [pc, #104]	; (8002584 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800251c:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002520:	f009 fae2 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	b108      	cbz	r0, 800252a <MX_TIM1_Init+0x7e>
    Error_Handler();
 8002526:	f7ff fb3f 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	2200      	movs	r2, #0
 800252e:	a908      	add	r1, sp, #32
 8002530:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002532:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8002534:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002536:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002538:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800253c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800253e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002540:	f008 fd26 	bl	800af90 <HAL_TIM_PWM_ConfigChannel>
 8002544:	b108      	cbz	r0, 800254a <MX_TIM1_Init+0x9e>
    Error_Handler();
 8002546:	f7ff fb2f 	bl	8001ba8 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800254e:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002550:	a90f      	add	r1, sp, #60	; 0x3c
 8002552:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002554:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800255a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800255c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800255e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002560:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002562:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002564:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002566:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002568:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 800256a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800256c:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800256e:	f009 fb37 	bl	800bbe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002572:	b108      	cbz	r0, 8002578 <MX_TIM1_Init+0xcc>
    Error_Handler();
 8002574:	f7ff fb18 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <MX_TIM1_Init+0xd8>)
 800257a:	f7ff ff29 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800257e:	b01a      	add	sp, #104	; 0x68
 8002580:	bd10      	pop	{r4, pc}
 8002582:	bf00      	nop
 8002584:	200458d8 	.word	0x200458d8
 8002588:	40010000 	.word	0x40010000

0800258c <MX_TIM2_Init>:
{
 800258c:	b510      	push	{r4, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002590:	2210      	movs	r2, #16
 8002592:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	a803      	add	r0, sp, #12
 8002598:	f022 faf0 	bl	8024b7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	221c      	movs	r2, #28
 800259e:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	9401      	str	r4, [sp, #4]
 80025a8:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025aa:	f022 fae7 	bl	8024b7c <memset>
  htim2.Instance = TIM2;
 80025ae:	481d      	ldr	r0, [pc, #116]	; (8002624 <MX_TIM2_Init+0x98>)
 80025b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80025b6:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ba:	6184      	str	r4, [r0, #24]
  htim2.Init.Prescaler = 0;
 80025bc:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c0:	f008 fb8a 	bl	800acd8 <HAL_TIM_Base_Init>
 80025c4:	b108      	cbz	r0, 80025ca <MX_TIM2_Init+0x3e>
    Error_Handler();
 80025c6:	f7ff faef 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ce:	a903      	add	r1, sp, #12
 80025d0:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM2_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d4:	f008 fe60 	bl	800b298 <HAL_TIM_ConfigClockSource>
 80025d8:	b108      	cbz	r0, 80025de <MX_TIM2_Init+0x52>
    Error_Handler();
 80025da:	f7ff fae5 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025de:	4811      	ldr	r0, [pc, #68]	; (8002624 <MX_TIM2_Init+0x98>)
 80025e0:	f008 fbfa 	bl	800add8 <HAL_TIM_PWM_Init>
 80025e4:	b108      	cbz	r0, 80025ea <MX_TIM2_Init+0x5e>
    Error_Handler();
 80025e6:	f7ff fadf 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ec:	4669      	mov	r1, sp
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f4:	f009 fa78 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	b108      	cbz	r0, 80025fe <MX_TIM2_Init+0x72>
    Error_Handler();
 80025fa:	f7ff fad5 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fe:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002600:	2200      	movs	r2, #0
 8002602:	a907      	add	r1, sp, #28
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <MX_TIM2_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002606:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002608:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260e:	f008 fcbf 	bl	800af90 <HAL_TIM_PWM_ConfigChannel>
 8002612:	b108      	cbz	r0, 8002618 <MX_TIM2_Init+0x8c>
    Error_Handler();
 8002614:	f7ff fac8 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <MX_TIM2_Init+0x98>)
 800261a:	f7ff fed9 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800261e:	b00e      	add	sp, #56	; 0x38
 8002620:	bd10      	pop	{r4, pc}
 8002622:	bf00      	nop
 8002624:	20045918 	.word	0x20045918

08002628 <MX_TIM5_Init>:
{
 8002628:	b510      	push	{r4, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262c:	2210      	movs	r2, #16
 800262e:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	a803      	add	r0, sp, #12
 8002634:	f022 faa2 	bl	8024b7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002638:	221c      	movs	r2, #28
 800263a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	f022 fa99 	bl	8024b7c <memset>
  htim5.Instance = TIM5;
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <MX_TIM5_Init+0x94>)
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_TIM5_Init+0x98>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 8002650:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 0;
 8002656:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800265a:	f008 fb3d 	bl	800acd8 <HAL_TIM_Base_Init>
 800265e:	b108      	cbz	r0, 8002664 <MX_TIM5_Init+0x3c>
    Error_Handler();
 8002660:	f7ff faa2 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002668:	a903      	add	r1, sp, #12
 800266a:	4814      	ldr	r0, [pc, #80]	; (80026bc <MX_TIM5_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800266e:	f008 fe13 	bl	800b298 <HAL_TIM_ConfigClockSource>
 8002672:	b108      	cbz	r0, 8002678 <MX_TIM5_Init+0x50>
    Error_Handler();
 8002674:	f7ff fa98 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_TIM5_Init+0x94>)
 800267a:	f008 fbad 	bl	800add8 <HAL_TIM_PWM_Init>
 800267e:	b108      	cbz	r0, 8002684 <MX_TIM5_Init+0x5c>
    Error_Handler();
 8002680:	f7ff fa92 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002686:	4669      	mov	r1, sp
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <MX_TIM5_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800268e:	f009 fa2b 	bl	800bae8 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	b108      	cbz	r0, 8002698 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002694:	f7ff fa88 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002698:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269a:	220c      	movs	r2, #12
 800269c:	a907      	add	r1, sp, #28
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM5_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80026a2:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026a8:	f008 fc72 	bl	800af90 <HAL_TIM_PWM_ConfigChannel>
 80026ac:	b108      	cbz	r0, 80026b2 <MX_TIM5_Init+0x8a>
    Error_Handler();
 80026ae:	f7ff fa7b 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <MX_TIM5_Init+0x94>)
 80026b4:	f7ff fe8c 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 80026b8:	b00e      	add	sp, #56	; 0x38
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	20045858 	.word	0x20045858
 80026c0:	40000c00 	.word	0x40000c00

080026c4 <MX_TIM12_Init>:
{
 80026c4:	b510      	push	{r4, lr}
 80026c6:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c8:	221c      	movs	r2, #28
 80026ca:	2100      	movs	r1, #0
  htim12.Init.Prescaler = 0;
 80026cc:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	a801      	add	r0, sp, #4
 80026d0:	f022 fa54 	bl	8024b7c <memset>
  htim12.Instance = TIM12;
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <MX_TIM12_Init+0x50>)
  htim12.Init.Prescaler = 0;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_TIM12_Init+0x54>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	6084      	str	r4, [r0, #8]
  htim12.Init.Period = 0;
 80026da:	60c4      	str	r4, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026dc:	6104      	str	r4, [r0, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026de:	6184      	str	r4, [r0, #24]
  htim12.Init.Prescaler = 0;
 80026e0:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026e4:	f008 fb78 	bl	800add8 <HAL_TIM_PWM_Init>
 80026e8:	b108      	cbz	r0, 80026ee <MX_TIM12_Init+0x2a>
    Error_Handler();
 80026ea:	f7ff fa5d 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f0:	2200      	movs	r2, #0
 80026f2:	a901      	add	r1, sp, #4
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <MX_TIM12_Init+0x50>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80026f8:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fa:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fe:	f008 fc47 	bl	800af90 <HAL_TIM_PWM_ConfigChannel>
 8002702:	b108      	cbz	r0, 8002708 <MX_TIM12_Init+0x44>
    Error_Handler();
 8002704:	f7ff fa50 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim12);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <MX_TIM12_Init+0x50>)
 800270a:	f7ff fe61 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800270e:	b008      	add	sp, #32
 8002710:	bd10      	pop	{r4, pc}
 8002712:	bf00      	nop
 8002714:	20045958 	.word	0x20045958
 8002718:	40001800 	.word	0x40001800

0800271c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800271c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8002720:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002726:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002728:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002730:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002732:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002734:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800273a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273e:	f009 fe8f 	bl	800c460 <HAL_UART_Init>
 8002742:	b118      	cbz	r0, 800274c <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002748:	f7ff ba2e 	b.w	8001ba8 <Error_Handler>
 800274c:	bd08      	pop	{r3, pc}
 800274e:	bf00      	nop
 8002750:	20045998 	.word	0x20045998
 8002754:	40011000 	.word	0x40011000

08002758 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002758:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_USART6_UART_Init+0x34>)
  huart6.Init.BaudRate = 115200;
 800275c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_USART6_UART_Init+0x38>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002762:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 8002764:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002768:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800276a:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800276c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800276e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002770:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002774:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002776:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002778:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800277a:	f009 fe71 	bl	800c460 <HAL_UART_Init>
 800277e:	b118      	cbz	r0, 8002788 <MX_USART6_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002784:	f7ff ba10 	b.w	8001ba8 <Error_Handler>
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	20045a18 	.word	0x20045a18
 8002790:	40011400 	.word	0x40011400

08002794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002794:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	2214      	movs	r2, #20
{
 8002798:	b08b      	sub	sp, #44	; 0x2c
 800279a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	2100      	movs	r1, #0
 800279e:	eb0d 0002 	add.w	r0, sp, r2
 80027a2:	f022 f9eb 	bl	8024b7c <memset>
  if(uartHandle->Instance==USART1)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_UART_MspInit+0xc4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d133      	bne.n	8002816 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027b4:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027b8:	4829      	ldr	r0, [pc, #164]	; (8002860 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	f042 0210 	orr.w	r2, r2, #16
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
 80027c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c2:	f002 0210 	and.w	r2, r2, #16
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	f042 0202 	orr.w	r2, r2, #2
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	f002 0202 	and.w	r2, r2, #2
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ec:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f003 fb3d 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027fe:	a905      	add	r1, sp, #20
 8002800:	4818      	ldr	r0, [pc, #96]	; (8002864 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800280c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f003 fb31 	bl	8005e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002812:	b00b      	add	sp, #44	; 0x2c
 8002814:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART6)
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_UART_MspInit+0xd4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d1fa      	bne.n	8002812 <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281e:	a905      	add	r1, sp, #20
 8002820:	4812      	ldr	r0, [pc, #72]	; (800286c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
 800282a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282c:	f002 0220 	and.w	r2, r2, #32
 8002830:	9203      	str	r2, [sp, #12]
 8002832:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002836:	f042 0204 	orr.w	r2, r2, #4
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	9304      	str	r3, [sp, #16]
 8002844:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002852:	2308      	movs	r3, #8
 8002854:	9309      	str	r3, [sp, #36]	; 0x24
 8002856:	e7da      	b.n	800280e <HAL_UART_MspInit+0x7a>
 8002858:	40011000 	.word	0x40011000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400
 8002864:	40020000 	.word	0x40020000
 8002868:	40011400 	.word	0x40011400
 800286c:	40020800 	.word	0x40020800

08002870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002870:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002872:	4903      	ldr	r1, [pc, #12]	; (8002880 <MX_FATFS_Init+0x10>)
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <MX_FATFS_Init+0x14>)
 8002876:	f00a ff9b 	bl	800d7b0 <FATFS_LinkDriver>
 800287a:	4b03      	ldr	r3, [pc, #12]	; (8002888 <MX_FATFS_Init+0x18>)
 800287c:	7018      	strb	r0, [r3, #0]
 800287e:	bd08      	pop	{r3, pc}
 8002880:	20045a99 	.word	0x20045a99
 8002884:	08034098 	.word	0x08034098
 8002888:	20045a98 	.word	0x20045a98

0800288c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800288c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800288e:	4613      	mov	r3, r2
 8002890:	460a      	mov	r2, r1
 8002892:	4601      	mov	r1, r0
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <BSP_SD_ReadBlocks_DMA+0x18>)
 8002896:	f007 f979 	bl	8009b8c <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 800289a:	3000      	adds	r0, #0
 800289c:	bf18      	it	ne
 800289e:	2001      	movne	r0, #1
 80028a0:	bd08      	pop	{r3, pc}
 80028a2:	bf00      	nop
 80028a4:	200456a4 	.word	0x200456a4

080028a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80028a8:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80028aa:	4613      	mov	r3, r2
 80028ac:	460a      	mov	r2, r1
 80028ae:	4601      	mov	r1, r0
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <BSP_SD_WriteBlocks_DMA+0x18>)
 80028b2:	f007 f9ed 	bl	8009c90 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80028b6:	3000      	adds	r0, #0
 80028b8:	bf18      	it	ne
 80028ba:	2001      	movne	r0, #1
 80028bc:	bd08      	pop	{r3, pc}
 80028be:	bf00      	nop
 80028c0:	200456a4 	.word	0x200456a4

080028c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80028c4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <BSP_SD_GetCardState+0x10>)
 80028c8:	f007 fd4e 	bl	800a368 <HAL_SD_GetCardState>
}
 80028cc:	3804      	subs	r0, #4
 80028ce:	bf18      	it	ne
 80028d0:	2001      	movne	r0, #1
 80028d2:	bd08      	pop	{r3, pc}
 80028d4:	200456a4 	.word	0x200456a4

080028d8 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80028d8:	4601      	mov	r1, r0
 80028da:	4801      	ldr	r0, [pc, #4]	; (80028e0 <BSP_SD_GetCardInfo+0x8>)
 80028dc:	f007 bca8 	b.w	800a230 <HAL_SD_GetCardInfo>
 80028e0:	200456a4 	.word	0x200456a4

080028e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80028e4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80028e6:	f000 f957 	bl	8002b98 <BSP_SD_ReadCpltCallback>
 80028ea:	bd08      	pop	{r3, pc}

080028ec <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80028ec:	2301      	movs	r3, #1
{
 80028ee:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80028f0:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80028f4:	f000 f81e 	bl	8002934 <BSP_PlatformIsDetected>
 80028f8:	b908      	cbnz	r0, 80028fe <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80028fa:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80028fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002902:	b003      	add	sp, #12
 8002904:	f85d fb04 	ldr.w	pc, [sp], #4

08002908 <BSP_SD_Init>:
{
 8002908:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800290a:	f7ff ffef 	bl	80028ec <BSP_SD_IsDetected>
 800290e:	2801      	cmp	r0, #1
 8002910:	d10c      	bne.n	800292c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <BSP_SD_Init+0x28>)
 8002914:	f007 fc2a 	bl	800a16c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8002918:	b948      	cbnz	r0, 800292e <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800291a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <BSP_SD_Init+0x28>)
 8002920:	f007 fc98 	bl	800a254 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002924:	3000      	adds	r0, #0
 8002926:	bf18      	it	ne
 8002928:	2001      	movne	r0, #1
 800292a:	bd08      	pop	{r3, pc}
 800292c:	2002      	movs	r0, #2
}
 800292e:	bd08      	pop	{r3, pc}
 8002930:	200456a4 	.word	0x200456a4

08002934 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8002934:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <BSP_PlatformIsDetected+0x14>)
 800293c:	f003 fcb8 	bl	80062b0 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8002940:	fab0 f080 	clz	r0, r0
 8002944:	0940      	lsrs	r0, r0, #5
 8002946:	bd08      	pop	{r3, pc}
 8002948:	40020800 	.word	0x40020800

0800294c <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 800294c:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 800294e:	2301      	movs	r3, #1
 8002950:	4c05      	ldr	r4, [pc, #20]	; (8002968 <SD_CheckStatus.isra.0+0x1c>)
 8002952:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002954:	f7ff ffb6 	bl	80028c4 <BSP_SD_GetCardState>
 8002958:	4623      	mov	r3, r4
 800295a:	b918      	cbnz	r0, 8002964 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800295c:	7822      	ldrb	r2, [r4, #0]
 800295e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002962:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8002964:	7818      	ldrb	r0, [r3, #0]
}
 8002966:	bd10      	pop	{r4, pc}
 8002968:	200000a0 	.word	0x200000a0

0800296c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800296c:	b537      	push	{r0, r1, r2, r4, r5, lr}
Stat = STA_NOINIT; 
 800296e:	2301      	movs	r3, #1
 8002970:	4c0e      	ldr	r4, [pc, #56]	; (80029ac <SD_initialize+0x40>)
 8002972:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8002974:	f00a ff24 	bl	800d7c0 <osKernelRunning>
 8002978:	b1a0      	cbz	r0, 80029a4 <SD_initialize+0x38>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800297a:	f7ff ffc5 	bl	8002908 <BSP_SD_Init>
 800297e:	b910      	cbnz	r0, 8002986 <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 8002980:	f7ff ffe4 	bl	800294c <SD_CheckStatus.isra.0>
 8002984:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8002986:	7823      	ldrb	r3, [r4, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d00b      	beq.n	80029a4 <SD_initialize+0x38>
 800298c:	4d08      	ldr	r5, [pc, #32]	; (80029b0 <SD_initialize+0x44>)
 800298e:	682a      	ldr	r2, [r5, #0]
 8002990:	b942      	cbnz	r2, 80029a4 <SD_initialize+0x38>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <SD_initialize+0x48>)
 8002994:	c903      	ldmia	r1, {r0, r1}
 8002996:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800299a:	4611      	mov	r1, r2
 800299c:	4668      	mov	r0, sp
 800299e:	f00a ffa5 	bl	800d8ec <osMessageCreate>
 80029a2:	6028      	str	r0, [r5, #0]
    }
  }
  return Stat;
 80029a4:	7820      	ldrb	r0, [r4, #0]
}
 80029a6:	b003      	add	sp, #12
 80029a8:	bd30      	pop	{r4, r5, pc}
 80029aa:	bf00      	nop
 80029ac:	200000a0 	.word	0x200000a0
 80029b0:	20000560 	.word	0x20000560
 80029b4:	0802683c 	.word	0x0802683c

080029b8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80029b8:	f7ff bfc8 	b.w	800294c <SD_CheckStatus.isra.0>

080029bc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <SD_ioctl+0x4c>)
{
 80029be:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029c0:	781b      	ldrb	r3, [r3, #0]
{
 80029c2:	b088      	sub	sp, #32
 80029c4:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029c6:	07db      	lsls	r3, r3, #31
 80029c8:	d41b      	bmi.n	8002a02 <SD_ioctl+0x46>

  switch (cmd)
 80029ca:	2903      	cmp	r1, #3
 80029cc:	d803      	bhi.n	80029d6 <SD_ioctl+0x1a>
 80029ce:	e8df f001 	tbb	[pc, r1]
 80029d2:	0510      	.short	0x0510
 80029d4:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 80029d6:	2004      	movs	r0, #4
  }

  return res;
}
 80029d8:	b008      	add	sp, #32
 80029da:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80029dc:	4668      	mov	r0, sp
 80029de:	f7ff ff7b 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80029e2:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	e004      	b.n	80029f2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 80029e8:	4668      	mov	r0, sp
 80029ea:	f7ff ff75 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80029ee:	9b07      	ldr	r3, [sp, #28]
 80029f0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80029f2:	2000      	movs	r0, #0
 80029f4:	e7f0      	b.n	80029d8 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 80029f6:	4668      	mov	r0, sp
 80029f8:	f7ff ff6e 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80029fc:	9b07      	ldr	r3, [sp, #28]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	e7f0      	b.n	80029e4 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a02:	2003      	movs	r0, #3
 8002a04:	e7e8      	b.n	80029d8 <SD_ioctl+0x1c>
 8002a06:	bf00      	nop
 8002a08:	200000a0 	.word	0x200000a0

08002a0c <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8002a0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 8002a0e:	f00a fedf 	bl	800d7d0 <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 8002a12:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 8002a16:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 8002a18:	f00a feda 	bl	800d7d0 <osKernelSysTick>
 8002a1c:	1b40      	subs	r0, r0, r5
 8002a1e:	42a0      	cmp	r0, r4
 8002a20:	d902      	bls.n	8002a28 <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295
 8002a26:	e003      	b.n	8002a30 <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002a28:	f7ff ff4c 	bl	80028c4 <BSP_SD_GetCardState>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1f3      	bne.n	8002a18 <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a34 <SD_write>:
{
 8002a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	4617      	mov	r7, r2
 8002a3e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002a40:	f7ff ffe4 	bl	8002a0c <SD_CheckStatusWithTimeout.constprop.2>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	da03      	bge.n	8002a50 <SD_write+0x1c>
    return res;
 8002a48:	2001      	movs	r0, #1
} 
 8002a4a:	b005      	add	sp, #20
 8002a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8002a50:	07a3      	lsls	r3, r4, #30
 8002a52:	d00a      	beq.n	8002a6a <SD_write+0x36>
 8002a54:	2500      	movs	r5, #0
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002a56:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002aec <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a5a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002ae8 <SD_write+0xb4>
    for (i = 0; i < count; i++) {
 8002a5e:	42b5      	cmp	r5, r6
 8002a60:	eb05 0107 	add.w	r1, r5, r7
 8002a64:	d123      	bne.n	8002aae <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 8002a66:	2000      	movs	r0, #0
 8002a68:	e7ef      	b.n	8002a4a <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8002a6a:	4632      	mov	r2, r6
 8002a6c:	4639      	mov	r1, r7
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ff1a 	bl	80028a8 <BSP_SD_WriteBlocks_DMA>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1e7      	bne.n	8002a48 <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <SD_write+0xb4>)
 8002a7a:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a7e:	a801      	add	r0, sp, #4
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	f00a ff5f 	bl	800d944 <osMessageGet>
      if (event.status == osEventMessage)
 8002a86:	9b01      	ldr	r3, [sp, #4]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d1dd      	bne.n	8002a48 <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 8002a8c:	9b02      	ldr	r3, [sp, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d1da      	bne.n	8002a48 <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8002a92:	f00a fe9d 	bl	800d7d0 <osKernelSysTick>
 8002a96:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 8002a9a:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 8002a9c:	f00a fe98 	bl	800d7d0 <osKernelSysTick>
 8002aa0:	4284      	cmp	r4, r0
 8002aa2:	d9d1      	bls.n	8002a48 <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002aa4:	f7ff ff0e 	bl	80028c4 <BSP_SD_GetCardState>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d1f7      	bne.n	8002a9c <SD_write+0x68>
 8002aac:	e7cd      	b.n	8002a4a <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <SD_write+0xb8>)
 8002ab2:	f7ff fef9 	bl	80028a8 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1c6      	bne.n	8002a48 <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002aba:	f247 5230 	movw	r2, #30000	; 0x7530
 8002abe:	f8d9 1000 	ldr.w	r1, [r9]
 8002ac2:	a801      	add	r0, sp, #4
 8002ac4:	f00a ff3e 	bl	800d944 <osMessageGet>
        if (event.status == osEventMessage) {
 8002ac8:	9b01      	ldr	r3, [sp, #4]
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d10a      	bne.n	8002ae4 <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d107      	bne.n	8002ae4 <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002ad4:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002ad6:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	4641      	mov	r1, r8
 8002ae0:	f022 f827 	bl	8024b32 <memcpy>
    for (i = 0; i < count; i++) {
 8002ae4:	3501      	adds	r5, #1
 8002ae6:	e7ba      	b.n	8002a5e <SD_write+0x2a>
 8002ae8:	20000560 	.word	0x20000560
 8002aec:	20000564 	.word	0x20000564

08002af0 <SD_read>:
{
 8002af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002af4:	b085      	sub	sp, #20
 8002af6:	460c      	mov	r4, r1
 8002af8:	4617      	mov	r7, r2
 8002afa:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002afc:	f7ff ff86 	bl	8002a0c <SD_CheckStatusWithTimeout.constprop.2>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	da03      	bge.n	8002b0c <SD_read+0x1c>
    return res;
 8002b04:	2001      	movs	r0, #1
} 
 8002b06:	b005      	add	sp, #20
 8002b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8002b0c:	07a3      	lsls	r3, r4, #30
 8002b0e:	d00a      	beq.n	8002b26 <SD_read+0x36>
 8002b10:	2500      	movs	r5, #0
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002b12:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002b94 <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b16:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002b90 <SD_read+0xa0>
    for (i = 0; i < count; i++) {
 8002b1a:	42b5      	cmp	r5, r6
 8002b1c:	eb05 0107 	add.w	r1, r5, r7
 8002b20:	d118      	bne.n	8002b54 <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 8002b22:	2000      	movs	r0, #0
 8002b24:	e7ef      	b.n	8002b06 <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8002b26:	4632      	mov	r2, r6
 8002b28:	4639      	mov	r1, r7
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff feae 	bl	800288c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1e7      	bne.n	8002b04 <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <SD_read+0xa0>)
 8002b36:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b3a:	a801      	add	r0, sp, #4
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	f00a ff01 	bl	800d944 <osMessageGet>
      if (event.status == osEventMessage) {
 8002b42:	9b01      	ldr	r3, [sp, #4]
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d1dd      	bne.n	8002b04 <SD_read+0x14>
    return res;
 8002b48:	9802      	ldr	r0, [sp, #8]
 8002b4a:	f110 30ff 	adds.w	r0, r0, #4294967295
 8002b4e:	bf18      	it	ne
 8002b50:	2001      	movne	r0, #1
 8002b52:	e7d8      	b.n	8002b06 <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	480f      	ldr	r0, [pc, #60]	; (8002b94 <SD_read+0xa4>)
 8002b58:	f7ff fe98 	bl	800288c <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d1d1      	bne.n	8002b04 <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b60:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b64:	f8d9 1000 	ldr.w	r1, [r9]
 8002b68:	a801      	add	r0, sp, #4
 8002b6a:	f00a feeb 	bl	800d944 <osMessageGet>
        if (event.status == osEventMessage) {
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d10a      	bne.n	8002b8a <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 8002b74:	9b02      	ldr	r3, [sp, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 8002b7a:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002b7c:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy(buff, scratch, BLOCKSIZE);
 8002b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b84:	4641      	mov	r1, r8
 8002b86:	f021 ffd4 	bl	8024b32 <memcpy>
    for (i = 0; i < count; i++) {
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7c5      	b.n	8002b1a <SD_read+0x2a>
 8002b8e:	bf00      	nop
 8002b90:	20000560 	.word	0x20000560
 8002b94:	20000564 	.word	0x20000564

08002b98 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <BSP_SD_ReadCpltCallback+0x10>)
 8002b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f00a bea7 	b.w	800d8f4 <osMessagePut>
 8002ba6:	bf00      	nop
 8002ba8:	20000560 	.word	0x20000560

08002bac <PollTouchScreen>:
// Recommended memory to run the sample with adequate performance
//
#define RECOMMENDED_MEMORY (1024L * 100)

GUI_PID_STATE PollTouchScreen(void)
{
 8002bac:	b530      	push	{r4, r5, lr}
 8002bae:	b08f      	sub	sp, #60	; 0x3c
 8002bb0:	4604      	mov	r4, r0
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8002bb2:	a803      	add	r0, sp, #12
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	f002 fabf 	bl	8005138 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <PollTouchScreen+0x50>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002bbc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8002bc0:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002bc2:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	d011      	beq.n	8002bee <PollTouchScreen+0x42>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8002bca:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002bce:	b121      	cbz	r1, 8002bda <PollTouchScreen+0x2e>
 8002bd0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002bd4:	b10a      	cbz	r2, 8002bda <PollTouchScreen+0x2e>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8002bd6:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8002bd8:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8002bda:	2200      	movs	r2, #0
//    dmc_putc(' ');
//    dmc_putint((uint16_t)TS_State.y);
//    dmc_putcr();

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002bdc:	4628      	mov	r0, r5
    TS_State.Layer = 0;
 8002bde:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.x = prev_state.touchX[0];
 8002be2:	885a      	ldrh	r2, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8002be4:	899b      	ldrh	r3, [r3, #12]
    TS_State.x = prev_state.touchX[0];
 8002be6:	9200      	str	r2, [sp, #0]
    TS_State.y = prev_state.touchY[0];
 8002be8:	9301      	str	r3, [sp, #4]
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002bea:	f015 f867 	bl	8017cbc <GUI_TOUCH_StoreStateEx>

  }
  return TS_State;
 8002bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	b00f      	add	sp, #60	; 0x3c
 8002bfa:	bd30      	pop	{r4, r5, pc}
 8002bfc:	20000764 	.word	0x20000764

08002c00 <InitNew>:

void InitNew(void)
{
 8002c00:	b508      	push	{r3, lr}
  GUI_Init();
 8002c02:	f010 ffcb 	bl	8013b9c <GUI_Init>

  GUI_SetBkColor(GUI_BLACK);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f010 fe0a 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 8002c0c:	f010 ff48 	bl	8013aa0 <GUI_Clear>
  GUI_EnableAlpha(0);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f013 f8eb 	bl	8015dec <GUI_EnableAlpha>
  GUI_SetTextMode(GUI_TM_NORMAL);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f010 feb0 	bl	801397c <GUI_SetTextMode>
  GUI_SetColor(GUI_WHITE);
 8002c1c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002c20:	f010 fe0a 	bl	8013838 <GUI_SetColor>
  GUI_SetFont(GUI_FONT_32_1);
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <InitNew+0x38>)
 8002c26:	f010 fe69 	bl	80138fc <GUI_SetFont>
  GUI_AA_SetFactor(6);
 8002c2a:	2006      	movs	r0, #6
 8002c2c:	f00e f922 	bl	8010e74 <GUI_AA_SetFactor>
  //  GUI_AA_EnableHiRes();
  GUI_AA_DisableHiRes();
}
 8002c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_AA_DisableHiRes();
 8002c34:	f00e b942 	b.w	8010ebc <GUI_AA_DisableHiRes>
 8002c38:	0802b688 	.word	0x0802b688

08002c3c <loop>:

void loop(void)
{
 8002c3c:	b508      	push	{r3, lr}
  uint16_t delay = 2000;

  J01_TextVersionString1();
 8002c3e:	f000 fc11 	bl	8003464 <J01_TextVersionString1>
  HAL_Delay(delay);
 8002c42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c46:	f002 fb7d 	bl	8005344 <HAL_Delay>
  J01_TextVersionString2();
 8002c4a:	f000 fc2b 	bl	80034a4 <J01_TextVersionString2>
  HAL_Delay(delay);
 8002c4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c52:	f002 fb77 	bl	8005344 <HAL_Delay>
  J01_TextModes();
 8002c56:	f000 fc83 	bl	8003560 <J01_TextModes>
  HAL_Delay(delay);
 8002c5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c5e:	f002 fb71 	bl	8005344 <HAL_Delay>
  J01_DispFloat();
 8002c62:	f000 fcdb 	bl	800361c <J01_DispFloat>
  HAL_Delay(delay);
 8002c66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c6a:	f002 fb6b 	bl	8005344 <HAL_Delay>
  J01_TextInBox();
 8002c6e:	f000 fd5d 	bl	800372c <J01_TextInBox>
  HAL_Delay(delay);
 8002c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c76:	f002 fb65 	bl	8005344 <HAL_Delay>
  J01_TextRotated();
 8002c7a:	f000 fe09 	bl	8003890 <J01_TextRotated>
  HAL_Delay(delay);
 8002c7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c82:	f002 fb5f 	bl	8005344 <HAL_Delay>
  J01_TextRotated();
 8002c86:	f000 fe03 	bl	8003890 <J01_TextRotated>
  HAL_Delay(delay);
 8002c8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c8e:	f002 fb59 	bl	8005344 <HAL_Delay>

  J01_DrawAlpha1();
 8002c92:	f000 f889 	bl	8002da8 <J01_DrawAlpha1>
  HAL_Delay(delay);
 8002c96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c9a:	f002 fb53 	bl	8005344 <HAL_Delay>
  J01_DrawAlpha2();
 8002c9e:	f000 f8df 	bl	8002e60 <J01_DrawAlpha2>
  HAL_Delay(delay);
 8002ca2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ca6:	f002 fb4d 	bl	8005344 <HAL_Delay>
  J01_DrawAlpha3();
 8002caa:	f000 f95f 	bl	8002f6c <J01_DrawAlpha3>
  HAL_Delay(delay);
 8002cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cb2:	f002 fb47 	bl	8005344 <HAL_Delay>
  J01_Shapes();
 8002cb6:	f000 f9df 	bl	8003078 <J01_Shapes>
  HAL_Delay(delay);
 8002cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cbe:	f002 fb41 	bl	8005344 <HAL_Delay>
  J01_Sine();
 8002cc2:	f000 fa05 	bl	80030d0 <J01_Sine>
  HAL_Delay(delay);
 8002cc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cca:	f002 fb3b 	bl	8005344 <HAL_Delay>
  J01_BigDigits();
 8002cce:	f000 fa99 	bl	8003204 <J01_BigDigits>
  HAL_Delay(delay);
 8002cd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd6:	f002 fb35 	bl	8005344 <HAL_Delay>
  J01_PieChart();
 8002cda:	f000 faad 	bl	8003238 <J01_PieChart>
  HAL_Delay(delay);
 8002cde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ce2:	f002 fb2f 	bl	8005344 <HAL_Delay>
  J01_DrawModes();
 8002ce6:	f000 faef 	bl	80032c8 <J01_DrawModes>
  HAL_Delay(delay);
 8002cea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cee:	f002 fb29 	bl	8005344 <HAL_Delay>
  J01_PixelIndex();
 8002cf2:	f000 fb61 	bl	80033b8 <J01_PixelIndex>
  HAL_Delay(delay);
 8002cf6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0



}
 8002cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(delay);
 8002cfe:	f002 bb21 	b.w	8005344 <HAL_Delay>

08002d02 <GRAPHICS_MainTask>:

//extern WM_HWIN CreateWindow(void);


void GRAPHICS_MainTask(void)
{
 8002d02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t x1 = 0;
  uint32_t x2 = 0;
  uint32_t y1 = 0;
  uint32_t y2 = 0;
  uint8_t started = 0;
 8002d06:	2500      	movs	r5, #0
  GUI_Init();
 8002d08:	f010 ff48 	bl	8013b9c <GUI_Init>
  loop();
 8002d0c:	f7ff ff96 	bl	8002c3c <loop>
  GUI_SetBkColor(GUI_BLACK);
 8002d10:	2000      	movs	r0, #0
  uint32_t y1 = 0;
 8002d12:	46a9      	mov	r9, r5
  uint32_t x1 = 0;
 8002d14:	462e      	mov	r6, r5
  GUI_SetBkColor(GUI_BLACK);
 8002d16:	f010 fd83 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 8002d1a:	f010 fec1 	bl	8013aa0 <GUI_Clear>
  GUI_SetPenSize(11);
 8002d1e:	200b      	movs	r0, #11
 8002d20:	f010 fd22 	bl	8013768 <GUI_SetPenSize>
  uint8_t erasing = 0;

  while(1)
  {
//    loop();
    GUI_PID_STATE TS_State = PollTouchScreen();
 8002d24:	a801      	add	r0, sp, #4
 8002d26:	f7ff ff41 	bl	8002bac <PollTouchScreen>
      if (TS_State.Pressed)
 8002d2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002d2e:	b3a3      	cbz	r3, 8002d9a <GRAPHICS_MainTask+0x98>
      {
        x2 = TS_State.x;
 8002d30:	9f01      	ldr	r7, [sp, #4]
        y2 = TS_State.y;
 8002d32:	f8dd 8008 	ldr.w	r8, [sp, #8]
//            GUI_Clear();
//            started = 0;
//            erasing = 1;
//          }
//        }
        if ((started) && (!erasing))
 8002d36:	b3a5      	cbz	r5, 8002da2 <GRAPHICS_MainTask+0xa0>
        {
          uint8_t r = rnd() % 255;
 8002d38:	f7fe fb90 	bl	800145c <rnd>
 8002d3c:	4604      	mov	r4, r0
          uint8_t g = rnd() % 255;
 8002d3e:	f7fe fb8d 	bl	800145c <rnd>
 8002d42:	4682      	mov	sl, r0
          uint8_t b = rnd() % 255;
 8002d44:	f7fe fb8a 	bl	800145c <rnd>
 8002d48:	23ff      	movs	r3, #255	; 0xff
 8002d4a:	fbb0 f2f3 	udiv	r2, r0, r3
 8002d4e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8002d52:	1a80      	subs	r0, r0, r2
          uint8_t g = rnd() % 255;
 8002d54:	fbba f2f3 	udiv	r2, sl, r3
          uint8_t r = rnd() % 255;
 8002d58:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d5c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002d60:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
          uint8_t g = rnd() % 255;
 8002d64:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t r = rnd() % 255;
 8002d68:	1ae4      	subs	r4, r4, r3
          uint8_t g = rnd() % 255;
 8002d6a:	ebaa 0a02 	sub.w	sl, sl, r2
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002d6e:	0424      	lsls	r4, r4, #16
 8002d70:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 8002d74:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
          GUI_SetColor(color);
 8002d78:	4320      	orrs	r0, r4
 8002d7a:	f010 fd5d 	bl	8013838 <GUI_SetColor>
          GUI_AA_DrawLine(x1, y1, x2, y2);
 8002d7e:	4643      	mov	r3, r8
 8002d80:	463a      	mov	r2, r7
 8002d82:	4649      	mov	r1, r9
 8002d84:	4630      	mov	r0, r6
 8002d86:	f00e f8bf 	bl	8010f08 <GUI_AA_DrawLine>
      {
        started = 0;
        pressed = 0;
        erasing = 0;
      }
    GUI_MULTIBUF_End();
 8002d8a:	f013 fc37 	bl	80165fc <GUI_MULTIBUF_End>
    GUI_Delay(5);
 8002d8e:	2005      	movs	r0, #5
 8002d90:	f015 f8ac 	bl	8017eec <GUI_Delay>
  {
 8002d94:	46c1      	mov	r9, r8
 8002d96:	463e      	mov	r6, r7
 8002d98:	e7c4      	b.n	8002d24 <GRAPHICS_MainTask+0x22>
 8002d9a:	46c8      	mov	r8, r9
 8002d9c:	4637      	mov	r7, r6
        started = 0;
 8002d9e:	461d      	mov	r5, r3
 8002da0:	e7f3      	b.n	8002d8a <GRAPHICS_MainTask+0x88>
        started = 1;
 8002da2:	2501      	movs	r5, #1
 8002da4:	e7f1      	b.n	8002d8a <GRAPHICS_MainTask+0x88>
	...

08002da8 <J01_DrawAlpha1>:
#include <stdint.h>

uint32_t J01_GetPixel(int x, int y);

void J01_DrawAlpha1(void)
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
  GUI_SetColor(GUI_BLACK);
 8002daa:	2000      	movs	r0, #0

  GUI_SetFont(&GUI_Font32B_1);
//  GUI_SetFont(GUI_FONT_16_1);

  GUI_SetColor(GUI_WHITE);
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002dac:	2402      	movs	r4, #2
  GUI_SetColor(GUI_BLACK);
 8002dae:	f010 fd43 	bl	8013838 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002db2:	4e28      	ldr	r6, [pc, #160]	; (8002e54 <J01_DrawAlpha1+0xac>)
  GUI_Clear();
 8002db4:	f010 fe74 	bl	8013aa0 <GUI_Clear>
  GUI_SetFont(&GUI_Font32B_1);
 8002db8:	4827      	ldr	r0, [pc, #156]	; (8002e58 <J01_DrawAlpha1+0xb0>)
 8002dba:	f010 fd9f 	bl	80138fc <GUI_SetFont>
  GUI_SetColor(GUI_WHITE);
 8002dbe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002dc2:	f010 fd39 	bl	8013838 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002dc6:	f017 fbd5 	bl	801a574 <LCD_GetXSize>
 8002dca:	4605      	mov	r5, r0
 8002dcc:	f017 fbe8 	bl	801a5a0 <LCD_GetYSize>
 8002dd0:	f1a0 0214 	sub.w	r2, r0, #20
 8002dd4:	f1a5 0164 	sub.w	r1, r5, #100	; 0x64
 8002dd8:	4630      	mov	r0, r6
 8002dda:	fb92 f2f4 	sdiv	r2, r2, r4
 8002dde:	fb91 f1f4 	sdiv	r1, r1, r4
 8002de2:	f011 faf9 	bl	80143d8 <GUI_DispStringAt>
  HAL_Delay(1000);
 8002de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dea:	f002 faab 	bl	8005344 <HAL_Delay>

  GUI_EnableAlpha(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f012 fffc 	bl	8015dec <GUI_EnableAlpha>
  GUI_SetColor(0xa0400000); // Blue
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <J01_DrawAlpha1+0xb4>)
 8002df6:	f010 fd1f 	bl	8013838 <GUI_SetColor>
  GUI_FillRect(0, 0, LCD_GetXSize() - 1, LCD_GetYSize() - 1);
 8002dfa:	f017 fbbb 	bl	801a574 <LCD_GetXSize>
 8002dfe:	4605      	mov	r5, r0
 8002e00:	f017 fbce 	bl	801a5a0 <LCD_GetYSize>
 8002e04:	2100      	movs	r1, #0
 8002e06:	1e6a      	subs	r2, r5, #1
 8002e08:	1e43      	subs	r3, r0, #1
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	f011 fec0 	bl	8014b90 <GUI_FillRect>
  GUI_EnableAlpha(0);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f012 ffeb 	bl	8015dec <GUI_EnableAlpha>
  HAL_Delay(1000);
 8002e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e1a:	f002 fa93 	bl	8005344 <HAL_Delay>

  GUI_SetTextMode(GUI_TM_TRANS);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f010 fdac 	bl	801397c <GUI_SetTextMode>
  GUI_SetColor(GUI_WHITE);
 8002e24:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002e28:	f010 fd06 	bl	8013838 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2 + 30);
 8002e2c:	f017 fba2 	bl	801a574 <LCD_GetXSize>
 8002e30:	4605      	mov	r5, r0
 8002e32:	f017 fbb5 	bl	801a5a0 <LCD_GetYSize>
 8002e36:	f1a0 0214 	sub.w	r2, r0, #20
 8002e3a:	f1a5 0164 	sub.w	r1, r5, #100	; 0x64
 8002e3e:	4630      	mov	r0, r6
 8002e40:	fb92 f2f4 	sdiv	r2, r2, r4
 8002e44:	fb91 f1f4 	sdiv	r1, r1, r4
 8002e48:	321e      	adds	r2, #30
}
 8002e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2 + 30);
 8002e4e:	f011 bac3 	b.w	80143d8 <GUI_DispStringAt>
 8002e52:	bf00      	nop
 8002e54:	080340b5 	.word	0x080340b5
 8002e58:	08027830 	.word	0x08027830
 8002e5c:	a0400000 	.word	0xa0400000

08002e60 <J01_DrawAlpha2>:

void J01_DrawAlpha2(void)
{
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8002e62:	2000      	movs	r0, #0
  GUI_SetBkColor(GUI_BLACK);
  GUI_Clear();

  GUI_SetColor(GUI_WHITE);
  GUI_SetFont(&GUI_Font32B_1);
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002e64:	2402      	movs	r4, #2
  GUI_EnableAlpha(0);
 8002e66:	f012 ffc1 	bl	8015dec <GUI_EnableAlpha>
  GUI_SetBkColor(GUI_BLACK);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f010 fcd8 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 8002e70:	f010 fe16 	bl	8013aa0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8002e74:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002e78:	f010 fcde 	bl	8013838 <GUI_SetColor>
  GUI_SetFont(&GUI_Font32B_1);
 8002e7c:	4836      	ldr	r0, [pc, #216]	; (8002f58 <J01_DrawAlpha2+0xf8>)
 8002e7e:	f010 fd3d 	bl	80138fc <GUI_SetFont>
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002e82:	f017 fb77 	bl	801a574 <LCD_GetXSize>
 8002e86:	4605      	mov	r5, r0
 8002e88:	f017 fb8a 	bl	801a5a0 <LCD_GetYSize>
 8002e8c:	fb95 f1f4 	sdiv	r1, r5, r4
 8002e90:	fb90 f2f4 	sdiv	r2, r0, r4
 8002e94:	4831      	ldr	r0, [pc, #196]	; (8002f5c <J01_DrawAlpha2+0xfc>)
 8002e96:	f011 fab3 	bl	8014400 <GUI_DispStringHCenterAt>

  GUI_EnableAlpha(1);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f012 ffa6 	bl	8015dec <GUI_EnableAlpha>
  GUI_SetColor(GUI_MAKE_COLOR((0xC0uL << 24) | 0x0000FF));
 8002ea0:	482f      	ldr	r0, [pc, #188]	; (8002f60 <J01_DrawAlpha2+0x100>)
 8002ea2:	f010 fcc9 	bl	8013838 <GUI_SetColor>
//  GUI_SetAlpha(0xc0);
  GUI_FillRect(LCD_GetXSize()/2 - 100, LCD_GetYSize()/2 - 100, LCD_GetXSize()/2 + 20, LCD_GetYSize()/2 + 20);
 8002ea6:	f017 fb65 	bl	801a574 <LCD_GetXSize>
 8002eaa:	4605      	mov	r5, r0
 8002eac:	f017 fb78 	bl	801a5a0 <LCD_GetYSize>
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	f017 fb5f 	bl	801a574 <LCD_GetXSize>
 8002eb6:	4607      	mov	r7, r0
 8002eb8:	f017 fb72 	bl	801a5a0 <LCD_GetYSize>
 8002ebc:	fb97 f2f4 	sdiv	r2, r7, r4
 8002ec0:	fb90 f3f4 	sdiv	r3, r0, r4
 8002ec4:	fb96 f1f4 	sdiv	r1, r6, r4
 8002ec8:	fb95 f5f4 	sdiv	r5, r5, r4
 8002ecc:	3314      	adds	r3, #20
 8002ece:	3214      	adds	r2, #20
 8002ed0:	3964      	subs	r1, #100	; 0x64
 8002ed2:	f1a5 0064 	sub.w	r0, r5, #100	; 0x64
 8002ed6:	f011 fe5b 	bl	8014b90 <GUI_FillRect>
  GUI_SetColor(GUI_MAKE_COLOR((0x80uL << 24) | 0x00FF00));
 8002eda:	4822      	ldr	r0, [pc, #136]	; (8002f64 <J01_DrawAlpha2+0x104>)
 8002edc:	f010 fcac 	bl	8013838 <GUI_SetColor>
//  GUI_SetAlpha(0x80);
  GUI_FillRect(LCD_GetXSize()/2 - 60, LCD_GetYSize()/2 - 60, LCD_GetXSize()/2 + 60, LCD_GetYSize()/2 + 60);
 8002ee0:	f017 fb48 	bl	801a574 <LCD_GetXSize>
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	f017 fb5b 	bl	801a5a0 <LCD_GetYSize>
 8002eea:	4606      	mov	r6, r0
 8002eec:	f017 fb42 	bl	801a574 <LCD_GetXSize>
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	f017 fb55 	bl	801a5a0 <LCD_GetYSize>
 8002ef6:	fb97 f2f4 	sdiv	r2, r7, r4
 8002efa:	fb90 f3f4 	sdiv	r3, r0, r4
 8002efe:	fb96 f1f4 	sdiv	r1, r6, r4
 8002f02:	fb95 f5f4 	sdiv	r5, r5, r4
 8002f06:	333c      	adds	r3, #60	; 0x3c
 8002f08:	323c      	adds	r2, #60	; 0x3c
 8002f0a:	393c      	subs	r1, #60	; 0x3c
 8002f0c:	f1a5 003c 	sub.w	r0, r5, #60	; 0x3c
 8002f10:	f011 fe3e 	bl	8014b90 <GUI_FillRect>
  GUI_SetColor(GUI_MAKE_COLOR((0x40uL << 24) | 0xFF0000));
 8002f14:	4814      	ldr	r0, [pc, #80]	; (8002f68 <J01_DrawAlpha2+0x108>)
 8002f16:	f010 fc8f 	bl	8013838 <GUI_SetColor>
//  GUI_SetAlpha(0x40);
  GUI_FillRect(LCD_GetXSize()/2 - 20, LCD_GetYSize()/2 - 20, LCD_GetXSize()/2 + 100, LCD_GetYSize()/2 + 100);
 8002f1a:	f017 fb2b 	bl	801a574 <LCD_GetXSize>
 8002f1e:	4605      	mov	r5, r0
 8002f20:	f017 fb3e 	bl	801a5a0 <LCD_GetYSize>
 8002f24:	4606      	mov	r6, r0
 8002f26:	f017 fb25 	bl	801a574 <LCD_GetXSize>
 8002f2a:	4607      	mov	r7, r0
 8002f2c:	f017 fb38 	bl	801a5a0 <LCD_GetYSize>
 8002f30:	fb97 f2f4 	sdiv	r2, r7, r4
 8002f34:	fb90 f3f4 	sdiv	r3, r0, r4
 8002f38:	fb96 f1f4 	sdiv	r1, r6, r4
 8002f3c:	fb95 f4f4 	sdiv	r4, r5, r4
 8002f40:	3364      	adds	r3, #100	; 0x64
 8002f42:	f1a4 0014 	sub.w	r0, r4, #20
 8002f46:	3264      	adds	r2, #100	; 0x64
 8002f48:	3914      	subs	r1, #20
 8002f4a:	f011 fe21 	bl	8014b90 <GUI_FillRect>
  GUI_EnableAlpha(0);
 8002f4e:	2000      	movs	r0, #0
}
 8002f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8002f54:	f012 bf4a 	b.w	8015dec <GUI_EnableAlpha>
 8002f58:	08027830 	.word	0x08027830
 8002f5c:	080340c2 	.word	0x080340c2
 8002f60:	c00000ff 	.word	0xc00000ff
 8002f64:	8000ff00 	.word	0x8000ff00
 8002f68:	40ff0000 	.word	0x40ff0000

08002f6c <J01_DrawAlpha3>:

void J01_DrawAlpha3(void)
{
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  GUI_ALPHA_STATE AlphaState;

  GUI_EnableAlpha(0);
 8002f6e:	2000      	movs	r0, #0
  GUI_SetBkColor(GUI_BLACK);
  GUI_Clear();

  GUI_SetColor(GUI_WHITE);
  GUI_SetFont(&GUI_Font32B_1);
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002f70:	2402      	movs	r4, #2
  GUI_EnableAlpha(0);
 8002f72:	f012 ff3b 	bl	8015dec <GUI_EnableAlpha>
  GUI_SetBkColor(GUI_BLACK);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f010 fc52 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 8002f7c:	f010 fd90 	bl	8013aa0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8002f80:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002f84:	f010 fc58 	bl	8013838 <GUI_SetColor>
  GUI_SetFont(&GUI_Font32B_1);
 8002f88:	4836      	ldr	r0, [pc, #216]	; (8003064 <J01_DrawAlpha3+0xf8>)
 8002f8a:	f010 fcb7 	bl	80138fc <GUI_SetFont>
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002f8e:	f017 faf1 	bl	801a574 <LCD_GetXSize>
 8002f92:	4605      	mov	r5, r0
 8002f94:	f017 fb04 	bl	801a5a0 <LCD_GetYSize>
 8002f98:	fb95 f1f4 	sdiv	r1, r5, r4
 8002f9c:	fb90 f2f4 	sdiv	r2, r0, r4
 8002fa0:	4831      	ldr	r0, [pc, #196]	; (8003068 <J01_DrawAlpha3+0xfc>)
 8002fa2:	f011 fa2d 	bl	8014400 <GUI_DispStringHCenterAt>

  GUI_EnableAlpha(1);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f012 ff20 	bl	8015dec <GUI_EnableAlpha>
//  GUI_SetUserAlpha(&AlphaState, 0xC0);
  GUI_SetColor(GUI_RED | 0x80000000);
 8002fac:	482f      	ldr	r0, [pc, #188]	; (800306c <J01_DrawAlpha3+0x100>)
 8002fae:	f010 fc43 	bl	8013838 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 100, LCD_GetYSize()/2 - 100, LCD_GetXSize()/2 + 20, LCD_GetYSize()/2 + 20);
 8002fb2:	f017 fadf 	bl	801a574 <LCD_GetXSize>
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	f017 faf2 	bl	801a5a0 <LCD_GetYSize>
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	f017 fad9 	bl	801a574 <LCD_GetXSize>
 8002fc2:	4607      	mov	r7, r0
 8002fc4:	f017 faec 	bl	801a5a0 <LCD_GetYSize>
 8002fc8:	fb97 f2f4 	sdiv	r2, r7, r4
 8002fcc:	fb90 f3f4 	sdiv	r3, r0, r4
 8002fd0:	fb96 f1f4 	sdiv	r1, r6, r4
 8002fd4:	fb95 f5f4 	sdiv	r5, r5, r4
 8002fd8:	3314      	adds	r3, #20
 8002fda:	3214      	adds	r2, #20
 8002fdc:	3964      	subs	r1, #100	; 0x64
 8002fde:	f1a5 0064 	sub.w	r0, r5, #100	; 0x64
 8002fe2:	f011 fdd5 	bl	8014b90 <GUI_FillRect>
  GUI_SetColor(GUI_GREEN | 0x80000000);
 8002fe6:	4822      	ldr	r0, [pc, #136]	; (8003070 <J01_DrawAlpha3+0x104>)
 8002fe8:	f010 fc26 	bl	8013838 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 60, LCD_GetYSize()/2 - 60, LCD_GetXSize()/2 + 60, LCD_GetYSize()/2 + 60);
 8002fec:	f017 fac2 	bl	801a574 <LCD_GetXSize>
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	f017 fad5 	bl	801a5a0 <LCD_GetYSize>
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	f017 fabc 	bl	801a574 <LCD_GetXSize>
 8002ffc:	4607      	mov	r7, r0
 8002ffe:	f017 facf 	bl	801a5a0 <LCD_GetYSize>
 8003002:	fb97 f2f4 	sdiv	r2, r7, r4
 8003006:	fb90 f3f4 	sdiv	r3, r0, r4
 800300a:	fb96 f1f4 	sdiv	r1, r6, r4
 800300e:	fb95 f5f4 	sdiv	r5, r5, r4
 8003012:	333c      	adds	r3, #60	; 0x3c
 8003014:	323c      	adds	r2, #60	; 0x3c
 8003016:	393c      	subs	r1, #60	; 0x3c
 8003018:	f1a5 003c 	sub.w	r0, r5, #60	; 0x3c
 800301c:	f011 fdb8 	bl	8014b90 <GUI_FillRect>
  GUI_SetColor(GUI_BLUE | 0x80000000);
 8003020:	4814      	ldr	r0, [pc, #80]	; (8003074 <J01_DrawAlpha3+0x108>)
 8003022:	f010 fc09 	bl	8013838 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 20, LCD_GetYSize()/2 - 20, LCD_GetXSize()/2 + 100, LCD_GetYSize()/2 + 100);
 8003026:	f017 faa5 	bl	801a574 <LCD_GetXSize>
 800302a:	4605      	mov	r5, r0
 800302c:	f017 fab8 	bl	801a5a0 <LCD_GetYSize>
 8003030:	4606      	mov	r6, r0
 8003032:	f017 fa9f 	bl	801a574 <LCD_GetXSize>
 8003036:	4607      	mov	r7, r0
 8003038:	f017 fab2 	bl	801a5a0 <LCD_GetYSize>
 800303c:	fb97 f2f4 	sdiv	r2, r7, r4
 8003040:	fb90 f3f4 	sdiv	r3, r0, r4
 8003044:	fb96 f1f4 	sdiv	r1, r6, r4
 8003048:	fb95 f4f4 	sdiv	r4, r5, r4
 800304c:	3364      	adds	r3, #100	; 0x64
 800304e:	f1a4 0014 	sub.w	r0, r4, #20
 8003052:	3264      	adds	r2, #100	; 0x64
 8003054:	3914      	subs	r1, #20
 8003056:	f011 fd9b 	bl	8014b90 <GUI_FillRect>
//  GUI_RestoreUserAlpha(&AlphaState);
  GUI_EnableAlpha(0);
 800305a:	2000      	movs	r0, #0
}
 800305c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8003060:	f012 bec4 	b.w	8015dec <GUI_EnableAlpha>
 8003064:	08027830 	.word	0x08027830
 8003068:	080340c2 	.word	0x080340c2
 800306c:	800000ff 	.word	0x800000ff
 8003070:	8000ff00 	.word	0x8000ff00
 8003074:	80ff0000 	.word	0x80ff0000

08003078 <J01_Shapes>:

void J01_Shapes(void)
{
 8003078:	b507      	push	{r0, r1, r2, lr}
  //  GUI_SelectLayer(1);
    GUI_SetBkColor(GUI_DARKBLUE);
 800307a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800307e:	f010 fbcf 	bl	8013820 <GUI_SetBkColor>
    GUI_Clear();
 8003082:	f010 fd0d 	bl	8013aa0 <GUI_Clear>
    GUI_SetColor(GUI_YELLOW);
 8003086:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800308a:	f010 fbd5 	bl	8013838 <GUI_SetColor>
    GUI_AA_SetFactor(6);
 800308e:	2006      	movs	r0, #6
 8003090:	f00d fef0 	bl	8010e74 <GUI_AA_SetFactor>
    GUI_SetPenSize(30);
 8003094:	201e      	movs	r0, #30
 8003096:	f010 fb67 	bl	8013768 <GUI_SetPenSize>
//    GUI_DrawPoint(15, 15);                            // OK
//    GUI_AA_DrawPoint(15, 15);                            // Does not exist!
//    GUI_DrawLine(120, 15, 420, 40);                   // OK
//    GUI_AA_DrawLine(120, 30, 420, 55);                // OK
    GUI_DrawRect(30, 38, 60, 63);                   // BUG PenSize wrong
 800309a:	233f      	movs	r3, #63	; 0x3f
 800309c:	223c      	movs	r2, #60	; 0x3c
 800309e:	2126      	movs	r1, #38	; 0x26
 80030a0:	201e      	movs	r0, #30
 80030a2:	f00e fde9 	bl	8011c78 <GUI_DrawRect>

//    GUI_FillRect(20, 38, 100, 63);

    GUI_DrawRoundedRect(150, 75, 225, 125, 15);     // BUG PenSize wrong
 80030a6:	230f      	movs	r3, #15
 80030a8:	22e1      	movs	r2, #225	; 0xe1
 80030aa:	214b      	movs	r1, #75	; 0x4b
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2096      	movs	r0, #150	; 0x96
 80030b0:	237d      	movs	r3, #125	; 0x7d
 80030b2:	f012 fa69 	bl	8015588 <GUI_DrawRoundedRect>
//    GUI_AA_DrawRoundedRect(150, 75, 225, 125, 15);    // OK

//    GUI_FillRoundedRect(375, 75, 450, 125, 15);
//    GUI_AA_FillRoundedRect(375, 75, 450, 125, 15);

    GUI_DrawCircle(45, 150, 30);                   // BUG PenSize wrong
 80030b6:	221e      	movs	r2, #30
 80030b8:	2196      	movs	r1, #150	; 0x96
 80030ba:	202d      	movs	r0, #45	; 0x2d
 80030bc:	f00f ffa4 	bl	8013008 <GUI_DrawCircle>
    GUI_AA_DrawCircle(240, 136, 100);                   // BUG Outside Edges Clipped Off
 80030c0:	2264      	movs	r2, #100	; 0x64
 80030c2:	2188      	movs	r1, #136	; 0x88
 80030c4:	20f0      	movs	r0, #240	; 0xf0

//    GUI_FillEllipse(360, 225, 75, 34);
//    GUI_AA_FillEllipse(360, 225, 75, 34);

//    GUI_DispStringHCenterAt("Shapes", 195, 225);
}
 80030c6:	b003      	add	sp, #12
 80030c8:	f85d eb04 	ldr.w	lr, [sp], #4
    GUI_AA_DrawCircle(240, 136, 100);                   // BUG Outside Edges Clipped Off
 80030cc:	f00d ba00 	b.w	80104d0 <GUI_AA_DrawCircle>

080030d0 <J01_Sine>:

void J01_Sine(void)
{
 80030d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GUI_SetBkColor(GUI_BLACK);
 80030d4:	2000      	movs	r0, #0
{
 80030d6:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
  GUI_Clear();
  GUI_SetColor(GUI_WHITE);
  I16 aY[460];
  double step = 360.0/460.0;
  double angle = 0.0;
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 80030da:	f04f 0a00 	mov.w	sl, #0
  double angle = 0.0;
 80030de:	2400      	movs	r4, #0
 80030e0:	2500      	movs	r5, #0
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 80030e2:	2600      	movs	r6, #0
 80030e4:	4f42      	ldr	r7, [pc, #264]	; (80031f0 <J01_Sine+0x120>)
  GUI_SetBkColor(GUI_BLACK);
 80030e6:	f010 fb9b 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 80030ea:	f010 fcd9 	bl	8013aa0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 80030ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80030f2:	f010 fba1 	bl	8013838 <GUI_SetColor>
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 80030f6:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 80030fa:	e9d9 8900 	ldrd	r8, r9, [r9]
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f7fd f891 	bl	800022c <__adddf3>
 800310a:	4642      	mov	r2, r8
 800310c:	464b      	mov	r3, r9
 800310e:	f7fd fa3f 	bl	8000590 <__aeabi_dmul>
 8003112:	4632      	mov	r2, r6
 8003114:	463b      	mov	r3, r7
 8003116:	f7fd fb65 	bl	80007e4 <__aeabi_ddiv>
 800311a:	ec41 0b10 	vmov	d0, r0, r1
 800311e:	f022 faab 	bl	8025678 <sin>
 8003122:	2200      	movs	r2, #0
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <J01_Sine+0x124>)
 8003126:	ec51 0b10 	vmov	r0, r1, d0
 800312a:	f7fd fa31 	bl	8000590 <__aeabi_dmul>
 800312e:	2200      	movs	r2, #0
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <J01_Sine+0x128>)
 8003132:	f7fd f87b 	bl	800022c <__adddf3>
 8003136:	f7fd fcdb 	bl	8000af0 <__aeabi_d2iz>
 800313a:	f82d 001a 	strh.w	r0, [sp, sl, lsl #1]
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 800313e:	f10a 0a01 	add.w	sl, sl, #1
    angle += step;
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	a328      	add	r3, pc, #160	; (adr r3, 80031e8 <J01_Sine+0x118>)
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	f7fd f86e 	bl	800022c <__adddf3>
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 8003150:	f5ba 7fe6 	cmp.w	sl, #460	; 0x1cc
    angle += step;
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 8003158:	d1d1      	bne.n	80030fe <J01_Sine+0x2e>
  }
  GUI_SetColor(0xff306890);
 800315a:	4828      	ldr	r0, [pc, #160]	; (80031fc <J01_Sine+0x12c>)
  GUI_SetPenSize(2);
 800315c:	2404      	movs	r4, #4
  GUI_SetColor(0xff306890);
 800315e:	f010 fb6b 	bl	8013838 <GUI_SetColor>
  GUI_SetPenSize(2);
 8003162:	2002      	movs	r0, #2
 8003164:	f010 fb00 	bl	8013768 <GUI_SetPenSize>
  for (uint16_t y = 4; y < 272; y += 44)
  {
    GUI_DrawHLine(y, 10, 470);
 8003168:	4620      	mov	r0, r4
 800316a:	342c      	adds	r4, #44	; 0x2c
 800316c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003170:	210a      	movs	r1, #10
 8003172:	f011 fc47 	bl	8014a04 <GUI_DrawHLine>
  for (uint16_t y = 4; y < 272; y += 44)
 8003176:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
 800317a:	d1f5      	bne.n	8003168 <J01_Sine+0x98>
 800317c:	240a      	movs	r4, #10
  }
  for (uint16_t x = 10; x < 480; x += 46)
  {
    GUI_DrawVLine(x, 4, 268);
 800317e:	4620      	mov	r0, r4
 8003180:	342e      	adds	r4, #46	; 0x2e
 8003182:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8003186:	2104      	movs	r1, #4
 8003188:	f011 fcd8 	bl	8014b3c <GUI_DrawVLine>
  for (uint16_t x = 10; x < 480; x += 46)
 800318c:	f5b4 7f01 	cmp.w	r4, #516	; 0x204
 8003190:	d1f5      	bne.n	800317e <J01_Sine+0xae>
  }
  GUI_SetPenSize(6);
 8003192:	2006      	movs	r0, #6
 8003194:	f010 fae8 	bl	8013768 <GUI_SetPenSize>
  GUI_SetColor(0xff00ff40);
 8003198:	4819      	ldr	r0, [pc, #100]	; (8003200 <J01_Sine+0x130>)
 800319a:	f010 fb4d 	bl	8013838 <GUI_SetColor>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 69);
 800319e:	4668      	mov	r0, sp
 80031a0:	2345      	movs	r3, #69	; 0x45
 80031a2:	220a      	movs	r2, #10
 80031a4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80031a8:	f011 fba0 	bl	80148ec <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 68);
 80031ac:	4668      	mov	r0, sp
 80031ae:	2344      	movs	r3, #68	; 0x44
 80031b0:	220a      	movs	r2, #10
 80031b2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80031b6:	f011 fb99 	bl	80148ec <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 67);
 80031ba:	4668      	mov	r0, sp
 80031bc:	2343      	movs	r3, #67	; 0x43
 80031be:	220a      	movs	r2, #10
 80031c0:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80031c4:	f011 fb92 	bl	80148ec <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 66);
 80031c8:	2342      	movs	r3, #66	; 0x42
 80031ca:	220a      	movs	r2, #10
 80031cc:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80031d0:	4668      	mov	r0, sp
 80031d2:	f011 fb8b 	bl	80148ec <GUI_DrawGraph>
}
 80031d6:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
 80031da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031de:	bf00      	nop
 80031e0:	54442d18 	.word	0x54442d18
 80031e4:	400921fb 	.word	0x400921fb
 80031e8:	642c8591 	.word	0x642c8591
 80031ec:	3fe90b21 	.word	0x3fe90b21
 80031f0:	40668000 	.word	0x40668000
 80031f4:	c0510000 	.word	0xc0510000
 80031f8:	40510000 	.word	0x40510000
 80031fc:	ff306890 	.word	0xff306890
 8003200:	ff00ff40 	.word	0xff00ff40

08003204 <J01_BigDigits>:

void J01_BigDigits(void)
{
 8003204:	b508      	push	{r3, lr}
  GUI_SetBkColor(GUI_DARKBLUE);
 8003206:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800320a:	f010 fb09 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 800320e:	f010 fc47 	bl	8013aa0 <GUI_Clear>
  GUI_SetColor(GUI_YELLOW);
 8003212:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003216:	f010 fb0f 	bl	8013838 <GUI_SetColor>
  GUI_SetFont(&GUI_FontD80);
 800321a:	4805      	ldr	r0, [pc, #20]	; (8003230 <J01_BigDigits+0x2c>)
 800321c:	f010 fb6e 	bl	80138fc <GUI_SetFont>
  GUI_DispStringAt("1234.456", 10, 100);
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	210a      	movs	r1, #10
 8003224:	4803      	ldr	r0, [pc, #12]	; (8003234 <J01_BigDigits+0x30>)
}
 8003226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispStringAt("1234.456", 10, 100);
 800322a:	f011 b8d5 	b.w	80143d8 <GUI_DispStringAt>
 800322e:	bf00      	nop
 8003230:	08031a48 	.word	0x08031a48
 8003234:	080340ac 	.word	0x080340ac

08003238 <J01_PieChart>:

void J01_PieChart(void)
{
 8003238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  //  GUI_SelectLayer(1);
    GUI_SetBkColor(GUI_GRAY);
 800323c:	481f      	ldr	r0, [pc, #124]	; (80032bc <J01_PieChart+0x84>)
{
 800323e:	b08f      	sub	sp, #60	; 0x3c
    GUI_Clear();
    GUI_SetPenSize(1);

    int a0, a1;
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8003240:	4c1f      	ldr	r4, [pc, #124]	; (80032c0 <J01_PieChart+0x88>)
    GUI_SetBkColor(GUI_GRAY);
 8003242:	f010 faed 	bl	8013820 <GUI_SetBkColor>
    GUI_Clear();
 8003246:	f010 fc2b 	bl	8013aa0 <GUI_Clear>
    GUI_SetPenSize(1);
 800324a:	2001      	movs	r0, #1
 800324c:	f010 fa8c 	bl	8013768 <GUI_SetPenSize>
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8003250:	ad02      	add	r5, sp, #8
 8003252:	f10d 0920 	add.w	r9, sp, #32
 8003256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800325a:	e894 0003 	ldmia.w	r4, {r0, r1}
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 800325e:	3408      	adds	r4, #8
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8003260:	e885 0003 	stmia.w	r5, {r0, r1}
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8003264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003266:	ad08      	add	r5, sp, #32
 8003268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326a:	e894 0003 	ldmia.w	r4, {r0, r1}
        GUI_CYAN, GUI_MAGENTA, GUI_YELLOW };
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 800326e:	2400      	movs	r4, #0
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8003270:	e885 0003 	stmia.w	r5, {r0, r1}
 8003274:	4626      	mov	r6, r4
 8003276:	ad01      	add	r5, sp, #4
      a0 = (i == 0) ? 0 : aValues[i - 1];
      a1 = aValues[i];
      GUI_SetColor(aColors[i]);
      GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8003278:	46a0      	mov	r8, r4
      a1 = aValues[i];
 800327a:	f855 7f04 	ldr.w	r7, [r5, #4]!
      GUI_SetColor(aColors[i]);
 800327e:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 8003282:	3401      	adds	r4, #1
      GUI_SetColor(aColors[i]);
 8003284:	f010 fad8 	bl	8013838 <GUI_SetColor>
      GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8003288:	4633      	mov	r3, r6
 800328a:	2278      	movs	r2, #120	; 0x78
 800328c:	2188      	movs	r1, #136	; 0x88
 800328e:	2096      	movs	r0, #150	; 0x96
 8003290:	e88d 0180 	stmia.w	sp, {r7, r8}
 8003294:	f011 fbe2 	bl	8014a5c <GUI_DrawPie>
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 8003298:	2c06      	cmp	r4, #6
 800329a:	d10c      	bne.n	80032b6 <J01_PieChart+0x7e>
    }
    GUI_SetColor(GUI_WHITE);
 800329c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80032a0:	f010 faca 	bl	8013838 <GUI_SetColor>
    GUI_DispStringHCenterAt("Pie", 320, 150);
 80032a4:	2296      	movs	r2, #150	; 0x96
 80032a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <J01_PieChart+0x8c>)
}
 80032ac:	b00f      	add	sp, #60	; 0x3c
 80032ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GUI_DispStringHCenterAt("Pie", 320, 150);
 80032b2:	f011 b8a5 	b.w	8014400 <GUI_DispStringHCenterAt>
      a0 = (i == 0) ? 0 : aValues[i - 1];
 80032b6:	682e      	ldr	r6, [r5, #0]
 80032b8:	e7df      	b.n	800327a <J01_PieChart+0x42>
 80032ba:	bf00      	nop
 80032bc:	00808080 	.word	0x00808080
 80032c0:	08026844 	.word	0x08026844
 80032c4:	080340d8 	.word	0x080340d8

080032c8 <J01_DrawModes>:

void J01_DrawModes(void)
{
 80032c8:	b570      	push	{r4, r5, r6, lr}
  const GUI_POINT aPoints[] = {
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <J01_DrawModes+0xd4>)
{
 80032cc:	b086      	sub	sp, #24
  };

  GUI_SetBkColor(GUI_GREEN);
  GUI_Clear();
  GUI_SetColor(GUI_RED);
  for (int i = 10; i <= 470; i += 10) {
 80032ce:	240a      	movs	r4, #10
  const GUI_POINT aPoints[] = {
 80032d0:	6810      	ldr	r0, [r2, #0]
 80032d2:	466b      	mov	r3, sp
 80032d4:	6851      	ldr	r1, [r2, #4]
 80032d6:	c303      	stmia	r3!, {r0, r1}
 80032d8:	6890      	ldr	r0, [r2, #8]
 80032da:	6018      	str	r0, [r3, #0]
  GUI_SetBkColor(GUI_GREEN);
 80032dc:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80032e0:	f010 fa9e 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 80032e4:	f010 fbdc 	bl	8013aa0 <GUI_Clear>
  GUI_SetColor(GUI_RED);
 80032e8:	20ff      	movs	r0, #255	; 0xff
 80032ea:	f010 faa5 	bl	8013838 <GUI_SetColor>
    GUI_DrawLine(i, 30, i, 60);
 80032ee:	4622      	mov	r2, r4
 80032f0:	4620      	mov	r0, r4
  for (int i = 10; i <= 470; i += 10) {
 80032f2:	340a      	adds	r4, #10
    GUI_DrawLine(i, 30, i, 60);
 80032f4:	233c      	movs	r3, #60	; 0x3c
 80032f6:	211e      	movs	r1, #30
 80032f8:	f011 ffd2 	bl	80152a0 <GUI_DrawLine>
  for (int i = 10; i <= 470; i += 10) {
 80032fc:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8003300:	d1f5      	bne.n	80032ee <J01_DrawModes+0x26>
 8003302:	240a      	movs	r4, #10
//    HAL_Delay(20);
  };
  for (int i = 10; i < 50; i += 3) {
    GUI_DrawCircle(80, 160, i);
 8003304:	4622      	mov	r2, r4
  for (int i = 10; i < 50; i += 3) {
 8003306:	3403      	adds	r4, #3
    GUI_DrawCircle(80, 160, i);
 8003308:	21a0      	movs	r1, #160	; 0xa0
 800330a:	2050      	movs	r0, #80	; 0x50
 800330c:	f00f fe7c 	bl	8013008 <GUI_DrawCircle>
  for (int i = 10; i < 50; i += 3) {
 8003310:	2c34      	cmp	r4, #52	; 0x34
 8003312:	d1f7      	bne.n	8003304 <J01_DrawModes+0x3c>
//    HAL_Delay(20);
  };
  GUI_SetColor(0x00FFFF00);
 8003314:	24c8      	movs	r4, #200	; 0xc8
 8003316:	2500      	movs	r5, #0
  for (int i = 0; i < 4; i += 1) {
    GUI_SetColor(0x000FFFF0 << i*0x6);
 8003318:	4e21      	ldr	r6, [pc, #132]	; (80033a0 <J01_DrawModes+0xd8>)
  GUI_SetColor(0x00FFFF00);
 800331a:	4822      	ldr	r0, [pc, #136]	; (80033a4 <J01_DrawModes+0xdc>)
 800331c:	f010 fa8c 	bl	8013838 <GUI_SetColor>
    GUI_SetColor(0x000FFFF0 << i*0x6);
 8003320:	fa06 f005 	lsl.w	r0, r6, r5
 8003324:	3506      	adds	r5, #6
 8003326:	f010 fa87 	bl	8013838 <GUI_SetColor>
    GUI_FillCircle(200+(i*15),150+(i*15),30);
 800332a:	f1a4 0132 	sub.w	r1, r4, #50	; 0x32
 800332e:	4620      	mov	r0, r4
 8003330:	340f      	adds	r4, #15
 8003332:	221e      	movs	r2, #30
 8003334:	f00f ff0a 	bl	801314c <GUI_FillCircle>
  for (int i = 0; i < 4; i += 1) {
 8003338:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800333c:	d1f0      	bne.n	8003320 <J01_DrawModes+0x58>
 800333e:	f44f 74c8 	mov.w	r4, #400	; 0x190
 8003342:	2500      	movs	r5, #0
//    HAL_Delay(20);
  };
  for (int i = 0; i < 4; i += 1) {
    GUI_SetColor(0x000FFFF0 << i*0x6);
 8003344:	4e16      	ldr	r6, [pc, #88]	; (80033a0 <J01_DrawModes+0xd8>)
 8003346:	fa06 f005 	lsl.w	r0, r6, r5
 800334a:	3506      	adds	r5, #6
 800334c:	f010 fa74 	bl	8013838 <GUI_SetColor>
    GUI_AA_FillCircle(400+(i*15),150+(i*15),30);
 8003350:	f1a4 01fa 	sub.w	r1, r4, #250	; 0xfa
 8003354:	4620      	mov	r0, r4
 8003356:	340f      	adds	r4, #15
 8003358:	221e      	movs	r2, #30
 800335a:	f00d f851 	bl	8010400 <GUI_AA_FillCircle>
  for (int i = 0; i < 4; i += 1) {
 800335e:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
 8003362:	d1f0      	bne.n	8003346 <J01_DrawModes+0x7e>
//    HAL_Delay(20);
  };
  GUI_POINT aEnlargedPoints[GUI_COUNTOF(aPoints)];

  GUI_SetDrawMode(GUI_DM_XOR);
 8003364:	2001      	movs	r0, #1
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 8003366:	2405      	movs	r4, #5
  GUI_SetDrawMode(GUI_DM_XOR);
 8003368:	f010 fabc 	bl	80138e4 <GUI_SetDrawMode>
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 800336c:	236e      	movs	r3, #110	; 0x6e
 800336e:	228c      	movs	r2, #140	; 0x8c
 8003370:	2103      	movs	r1, #3
 8003372:	4668      	mov	r0, sp
 8003374:	f013 f890 	bl	8016498 <GUI_FillPolygon>
  for (int i = 1; i < 10; i++) {
    GUI_EnlargePolygon(aEnlargedPoints, aPoints, GUI_COUNTOF(aPoints), i * 5);
 8003378:	4623      	mov	r3, r4
 800337a:	2203      	movs	r2, #3
 800337c:	4669      	mov	r1, sp
 800337e:	a803      	add	r0, sp, #12
 8003380:	3405      	adds	r4, #5
 8003382:	f013 f9b1 	bl	80166e8 <GUI_EnlargePolygon>
    GUI_FillPolygon(aEnlargedPoints, GUI_COUNTOF(aPoints), 140, 110);
 8003386:	236e      	movs	r3, #110	; 0x6e
 8003388:	228c      	movs	r2, #140	; 0x8c
 800338a:	2103      	movs	r1, #3
 800338c:	a803      	add	r0, sp, #12
 800338e:	f013 f883 	bl	8016498 <GUI_FillPolygon>
  for (int i = 1; i < 10; i++) {
 8003392:	2c32      	cmp	r4, #50	; 0x32
 8003394:	d1f0      	bne.n	8003378 <J01_DrawModes+0xb0>
  };
}
 8003396:	b006      	add	sp, #24
 8003398:	bd70      	pop	{r4, r5, r6, pc}
 800339a:	bf00      	nop
 800339c:	08026874 	.word	0x08026874
 80033a0:	000ffff0 	.word	0x000ffff0
 80033a4:	00ffff00 	.word	0x00ffff00

080033a8 <J01_GetPixel>:
  dmc_puthex8cr(color);

}

uint32_t J01_GetPixel(int x, int y)
{
 80033a8:	b508      	push	{r3, lr}
  // GUIConf.h: #define GUI_USE_ARGB 1
  return GUI_Index2Color(GUI_GetPixelIndex(x, y)) & 0x00ffffff;
 80033aa:	f017 fa23 	bl	801a7f4 <GUI_GetPixelIndex>
 80033ae:	f010 f8e3 	bl	8013578 <GUI_Index2Color>
}
 80033b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80033b6:	bd08      	pop	{r3, pc}

080033b8 <J01_PixelIndex>:
{
 80033b8:	b538      	push	{r3, r4, r5, lr}
  dmc_puts("color 0: ");
 80033ba:	4c27      	ldr	r4, [pc, #156]	; (8003458 <J01_PixelIndex+0xa0>)
 80033bc:	4620      	mov	r0, r4
 80033be:	f7fe f802 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fe f82d 	bl	8001422 <dmc_puthex8cr>
  GUI_SetBkColor(color);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f010 fa29 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 80033ce:	f010 fb67 	bl	8013aa0 <GUI_Clear>
  color = J01_GetPixel(60, 60);
 80033d2:	213c      	movs	r1, #60	; 0x3c
 80033d4:	4608      	mov	r0, r1
 80033d6:	f7ff ffe7 	bl	80033a8 <J01_GetPixel>
 80033da:	4605      	mov	r5, r0
  dmc_puts("color 0: ");
 80033dc:	4620      	mov	r0, r4
  dmc_puts("color 1: ");
 80033de:	4c1f      	ldr	r4, [pc, #124]	; (800345c <J01_PixelIndex+0xa4>)
  dmc_puts("color 0: ");
 80033e0:	f7fd fff1 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7fe f81c 	bl	8001422 <dmc_puthex8cr>
  dmc_puts("color 1: ");
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7fd ffeb 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80033f0:	20ff      	movs	r0, #255	; 0xff
 80033f2:	f7fe f816 	bl	8001422 <dmc_puthex8cr>
  GUI_SetColor(color);
 80033f6:	20ff      	movs	r0, #255	; 0xff
 80033f8:	f010 fa1e 	bl	8013838 <GUI_SetColor>
  GUI_FillRect(10, 10, 100, 100);
 80033fc:	2364      	movs	r3, #100	; 0x64
 80033fe:	210a      	movs	r1, #10
 8003400:	461a      	mov	r2, r3
 8003402:	4608      	mov	r0, r1
 8003404:	f011 fbc4 	bl	8014b90 <GUI_FillRect>
  color = J01_GetPixel(60, 60);
 8003408:	213c      	movs	r1, #60	; 0x3c
 800340a:	4608      	mov	r0, r1
 800340c:	f7ff ffcc 	bl	80033a8 <J01_GetPixel>
 8003410:	4605      	mov	r5, r0
  dmc_puts("color 1: ");
 8003412:	4620      	mov	r0, r4
  dmc_puts("color 2: ");
 8003414:	4c12      	ldr	r4, [pc, #72]	; (8003460 <J01_PixelIndex+0xa8>)
  dmc_puts("color 1: ");
 8003416:	f7fd ffd6 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 800341a:	4628      	mov	r0, r5
 800341c:	f7fe f801 	bl	8001422 <dmc_puthex8cr>
  dmc_puts("color 2: ");
 8003420:	4620      	mov	r0, r4
 8003422:	f7fd ffd0 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 8003426:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 800342a:	f7fd fffa 	bl	8001422 <dmc_puthex8cr>
  GUI_SetColor(color);
 800342e:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8003432:	f010 fa01 	bl	8013838 <GUI_SetColor>
  GUI_DrawPixel(60, 60);
 8003436:	213c      	movs	r1, #60	; 0x3c
 8003438:	4608      	mov	r0, r1
 800343a:	f011 fb45 	bl	8014ac8 <GUI_DrawPixel>
  color = J01_GetPixel(60, 60);
 800343e:	213c      	movs	r1, #60	; 0x3c
 8003440:	4608      	mov	r0, r1
 8003442:	f7ff ffb1 	bl	80033a8 <J01_GetPixel>
 8003446:	4605      	mov	r5, r0
  dmc_puts("color 2: ");
 8003448:	4620      	mov	r0, r4
 800344a:	f7fd ffbc 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 800344e:	4628      	mov	r0, r5
}
 8003450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  dmc_puthex8cr(color);
 8003454:	f7fd bfe5 	b.w	8001422 <dmc_puthex8cr>
 8003458:	080340dc 	.word	0x080340dc
 800345c:	080340e6 	.word	0x080340e6
 8003460:	080340f0 	.word	0x080340f0

08003464 <J01_TextVersionString1>:
#include "GUI.h"

void J01_TextVersionString1(void)
{
 8003464:	b538      	push	{r3, r4, r5, lr}
  // Erase the screen
  InitNew();
 8003466:	f7ff fbcb 	bl	8002c00 <InitNew>

  // Set the font
  GUI_SetFont(GUI_FONT_32_1);
 800346a:	480d      	ldr	r0, [pc, #52]	; (80034a0 <J01_TextVersionString1+0x3c>)
 800346c:	f010 fa46 	bl	80138fc <GUI_SetFont>
  // Get the current font height
//  int textWidth = GUI_GetStringDistX(GUI_GetVersionString());
  int fsize = GUI_GetFontSizeY();
 8003470:	f010 f850 	bl	8013514 <GUI_GetFontSizeY>
  int xPos = LCD_GetXSize() / 2;
 8003474:	f017 f87e 	bl	801a574 <LCD_GetXSize>
 8003478:	4605      	mov	r5, r0
  int yPos = (LCD_GetYSize() - yPos) / 2;
 800347a:	f017 f891 	bl	801a5a0 <LCD_GetYSize>
 800347e:	4604      	mov	r4, r0
  GUI_SetColor(GUI_WHITE);
 8003480:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003484:	f010 f9d8 	bl	8013838 <GUI_SetColor>
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 8003488:	f010 f86a 	bl	8013560 <GUI_GetVersionString>
  int yPos = (LCD_GetYSize() - yPos) / 2;
 800348c:	2102      	movs	r1, #2
 800348e:	fb94 f2f1 	sdiv	r2, r4, r1
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 8003492:	fb95 f1f1 	sdiv	r1, r5, r1
 8003496:	3a0a      	subs	r2, #10
}
 8003498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 800349c:	f010 bfb0 	b.w	8014400 <GUI_DispStringHCenterAt>
 80034a0:	0802b688 	.word	0x0802b688

080034a4 <J01_TextVersionString2>:

void J01_TextVersionString2(void)
{
 80034a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GUI_SetBkColor(GUI_BLUE);
 80034a6:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  GUI_Clear();
  GUI_SetDrawMode(GUI_DM_NORMAL);
  GUI_SetColor(GUI_WHITE);
  GUI_DrawGradientV(20, 20, LCD_GetXSize() - 20, LCD_GetYSize() - 20, GUI_RED, GUI_YELLOW);
  int xPos = LCD_GetXSize() / 2;
 80034aa:	2602      	movs	r6, #2
  GUI_SetBkColor(GUI_BLUE);
 80034ac:	f010 f9b8 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 80034b0:	f010 faf6 	bl	8013aa0 <GUI_Clear>
  GUI_SetDrawMode(GUI_DM_NORMAL);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f010 fa15 	bl	80138e4 <GUI_SetDrawMode>
  GUI_SetColor(GUI_WHITE);
 80034ba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80034be:	f010 f9bb 	bl	8013838 <GUI_SetColor>
  GUI_DrawGradientV(20, 20, LCD_GetXSize() - 20, LCD_GetYSize() - 20, GUI_RED, GUI_YELLOW);
 80034c2:	f017 f857 	bl	801a574 <LCD_GetXSize>
 80034c6:	4604      	mov	r4, r0
 80034c8:	f017 f86a 	bl	801a5a0 <LCD_GetYSize>
 80034cc:	2114      	movs	r1, #20
 80034ce:	22ff      	movs	r2, #255	; 0xff
 80034d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80034d8:	f1a0 0314 	sub.w	r3, r0, #20
 80034dc:	f1a4 0214 	sub.w	r2, r4, #20
 80034e0:	4608      	mov	r0, r1
 80034e2:	f011 f929 	bl	8014738 <GUI_DrawGradientV>
  int xPos = LCD_GetXSize() / 2;
 80034e6:	f017 f845 	bl	801a574 <LCD_GetXSize>
 80034ea:	fb90 f4f6 	sdiv	r4, r0, r6
  int yPos = LCD_GetYSize() / 2;
 80034ee:	f017 f857 	bl	801a5a0 <LCD_GetYSize>
 80034f2:	fb90 f5f6 	sdiv	r5, r0, r6
  GUI_SetTextMode(GUI_TM_TRANS);
 80034f6:	4630      	mov	r0, r6
 80034f8:	f010 fa40 	bl	801397c <GUI_SetTextMode>
  GUI_SetFont(GUI_FONT_COMIC24B_ASCII);
 80034fc:	4812      	ldr	r0, [pc, #72]	; (8003548 <J01_TextVersionString2+0xa4>)
 80034fe:	f010 f9fd 	bl	80138fc <GUI_SetFont>
  GUI_DispStringHCenterAt("Hello Jack!", xPos, yPos - 30);
 8003502:	f1a5 021e 	sub.w	r2, r5, #30
 8003506:	4621      	mov	r1, r4
 8003508:	4810      	ldr	r0, [pc, #64]	; (800354c <J01_TextVersionString2+0xa8>)
 800350a:	f010 ff79 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_DispStringHCenterAt("STemWin", xPos, yPos + 15);
 800350e:	f105 020f 	add.w	r2, r5, #15
 8003512:	4621      	mov	r1, r4
 8003514:	480e      	ldr	r0, [pc, #56]	; (8003550 <J01_TextVersionString2+0xac>)
 8003516:	f010 ff73 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_DispString(" ");
 800351a:	480e      	ldr	r0, [pc, #56]	; (8003554 <J01_TextVersionString2+0xb0>)
 800351c:	f010 ff58 	bl	80143d0 <GUI_DispString>
  GUI_DispString(GUI_GetVersionString());
 8003520:	f010 f81e 	bl	8013560 <GUI_GetVersionString>
 8003524:	f010 ff54 	bl	80143d0 <GUI_DispString>

  GUI_SetFont(&GUI_Font10S_ASCII);
 8003528:	480b      	ldr	r0, [pc, #44]	; (8003558 <J01_TextVersionString2+0xb4>)
 800352a:	f010 f9e7 	bl	80138fc <GUI_SetFont>
  GUI_DispStringHCenterAt("Compiled " __DATE__ " "__TIME__, xPos, yPos + 60);
 800352e:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 8003532:	4621      	mov	r1, r4
 8003534:	4809      	ldr	r0, [pc, #36]	; (800355c <J01_TextVersionString2+0xb8>)
 8003536:	f010 ff63 	bl	8014400 <GUI_DispStringHCenterAt>

  GUI_SetTextMode(GUI_TM_NORMAL);
 800353a:	2000      	movs	r0, #0
}
 800353c:	b002      	add	sp, #8
 800353e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GUI_SetTextMode(GUI_TM_NORMAL);
 8003542:	f010 ba1b 	b.w	801397c <GUI_SetTextMode>
 8003546:	bf00      	nop
 8003548:	08030548 	.word	0x08030548
 800354c:	08034210 	.word	0x08034210
 8003550:	0803421c 	.word	0x0803421c
 8003554:	080340e4 	.word	0x080340e4
 8003558:	0802708c 	.word	0x0802708c
 800355c:	08034224 	.word	0x08034224

08003560 <J01_TextModes>:

void J01_TextModes(void)
{
 8003560:	b508      	push	{r3, lr}
  InitNew();
 8003562:	f7ff fb4d 	bl	8002c00 <InitNew>

//  GUI_SelectLayer(1);
  GUI_SetFont(&GUI_Font8x18);
 8003566:	4827      	ldr	r0, [pc, #156]	; (8003604 <J01_TextModes+0xa4>)
 8003568:	f010 f9c8 	bl	80138fc <GUI_SetFont>
  GUI_SetBkColor(GUI_BLUE);
 800356c:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8003570:	f010 f956 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 8003574:	f010 fa94 	bl	8013aa0 <GUI_Clear>
  GUI_SetPenSize(10);
 8003578:	200a      	movs	r0, #10
 800357a:	f010 f8f5 	bl	8013768 <GUI_SetPenSize>
  GUI_SetColor(GUI_RED);
 800357e:	20ff      	movs	r0, #255	; 0xff
 8003580:	f010 f95a 	bl	8013838 <GUI_SetColor>
  GUI_DrawLine(100, 65, 380, 205);
 8003584:	23cd      	movs	r3, #205	; 0xcd
 8003586:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800358a:	2141      	movs	r1, #65	; 0x41
 800358c:	2064      	movs	r0, #100	; 0x64
 800358e:	f011 fe87 	bl	80152a0 <GUI_DrawLine>
  GUI_DrawLine(100, 205, 380, 65);
 8003592:	2341      	movs	r3, #65	; 0x41
 8003594:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003598:	21cd      	movs	r1, #205	; 0xcd
 800359a:	2064      	movs	r0, #100	; 0x64
 800359c:	f011 fe80 	bl	80152a0 <GUI_DrawLine>
  GUI_SetBkColor(GUI_BLACK);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f010 f93d 	bl	8013820 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 80035a6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80035aa:	f010 f945 	bl	8013838 <GUI_SetColor>
  GUI_SetTextMode(GUI_TM_NORMAL);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f010 f9e4 	bl	801397c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_NORMAL"            , 240, 70);
 80035b4:	2246      	movs	r2, #70	; 0x46
 80035b6:	21f0      	movs	r1, #240	; 0xf0
 80035b8:	4813      	ldr	r0, [pc, #76]	; (8003608 <J01_TextModes+0xa8>)
 80035ba:	f010 ff21 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_REV);
 80035be:	2004      	movs	r0, #4
 80035c0:	f010 f9dc 	bl	801397c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_REV"               , 240, 100);
 80035c4:	2264      	movs	r2, #100	; 0x64
 80035c6:	21f0      	movs	r1, #240	; 0xf0
 80035c8:	4810      	ldr	r0, [pc, #64]	; (800360c <J01_TextModes+0xac>)
 80035ca:	f010 ff19 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_TRANS);
 80035ce:	2002      	movs	r0, #2
 80035d0:	f010 f9d4 	bl	801397c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS"             , 240, 130);
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	21f0      	movs	r1, #240	; 0xf0
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <J01_TextModes+0xb0>)
 80035da:	f010 ff11 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_XOR);
 80035de:	2001      	movs	r0, #1
 80035e0:	f010 f9cc 	bl	801397c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_XOR"               , 240, 160);
 80035e4:	22a0      	movs	r2, #160	; 0xa0
 80035e6:	21f0      	movs	r1, #240	; 0xf0
 80035e8:	480a      	ldr	r0, [pc, #40]	; (8003614 <J01_TextModes+0xb4>)
 80035ea:	f010 ff09 	bl	8014400 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_TRANS | GUI_TM_REV);
 80035ee:	2006      	movs	r0, #6
 80035f0:	f010 f9c4 	bl	801397c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS | GUI_TM_REV", 240, 190);
 80035f4:	22be      	movs	r2, #190	; 0xbe
 80035f6:	21f0      	movs	r1, #240	; 0xf0
 80035f8:	4807      	ldr	r0, [pc, #28]	; (8003618 <J01_TextModes+0xb8>)
}
 80035fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS | GUI_TM_REV", 240, 190);
 80035fe:	f010 beff 	b.w	8014400 <GUI_DispStringHCenterAt>
 8003602:	bf00      	nop
 8003604:	0802f8d0 	.word	0x0802f8d0
 8003608:	0803417e 	.word	0x0803417e
 800360c:	08034196 	.word	0x08034196
 8003610:	080341ab 	.word	0x080341ab
 8003614:	080341c2 	.word	0x080341c2
 8003618:	080341d7 	.word	0x080341d7

0800361c <J01_DispFloat>:

void J01_DispFloat(void)
{
 800361c:	b508      	push	{r3, lr}
 800361e:	ed2d 8b02 	vpush	{d8}
  //***** "floating point values" *********************************

//  GUI_SelectLayer(0);
  float f = 123.45678;
  GUI_Clear();
 8003622:	f010 fa3d 	bl	8013aa0 <GUI_Clear>
  GUI_SetBkColor(GUI_BLACK);
 8003626:	2000      	movs	r0, #0
 8003628:	f010 f8fa 	bl	8013820 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 800362c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003630:	f010 f902 	bl	8013838 <GUI_SetColor>
  GUI_SetTextMode(GUI_TM_NORMAL);
 8003634:	2000      	movs	r0, #0
 8003636:	f010 f9a1 	bl	801397c <GUI_SetTextMode>
  GUI_SetFont(&GUI_Font8x16);
  GUI_DispStringAt("GUI_DispFloat:\n", 0, 20);
  GUI_DispFloat(f, 9);
 800363a:	eddf 8a34 	vldr	s17, [pc, #208]	; 800370c <J01_DispFloat+0xf0>
  GUI_SetFont(&GUI_Font8x16);
 800363e:	4834      	ldr	r0, [pc, #208]	; (8003710 <J01_DispFloat+0xf4>)
 8003640:	f010 f95c 	bl	80138fc <GUI_SetFont>
  GUI_DispStringAt("GUI_DispFloat:\n", 0, 20);
 8003644:	2214      	movs	r2, #20
 8003646:	2100      	movs	r1, #0
 8003648:	4832      	ldr	r0, [pc, #200]	; (8003714 <J01_DispFloat+0xf8>)
 800364a:	f010 fec5 	bl	80143d8 <GUI_DispStringAt>
  GUI_GotoX(100);
  GUI_DispFloat(-f, 9);
 800364e:	ed9f 8a32 	vldr	s16, [pc, #200]	; 8003718 <J01_DispFloat+0xfc>
  GUI_DispFloat(f, 9);
 8003652:	eeb0 0a68 	vmov.f32	s0, s17
 8003656:	2009      	movs	r0, #9
 8003658:	f014 fe4e 	bl	80182f8 <GUI_DispFloat>
  GUI_GotoX(100);
 800365c:	2064      	movs	r0, #100	; 0x64
 800365e:	f010 f859 	bl	8013714 <GUI_GotoX>
  GUI_DispFloat(-f, 9);
 8003662:	eeb0 0a48 	vmov.f32	s0, s16
 8003666:	2009      	movs	r0, #9
 8003668:	f014 fe46 	bl	80182f8 <GUI_DispFloat>
  GUI_DispStringAt("GUI_DispFloatFix:\n", 0, 60);
 800366c:	223c      	movs	r2, #60	; 0x3c
 800366e:	2100      	movs	r1, #0
 8003670:	482a      	ldr	r0, [pc, #168]	; (800371c <J01_DispFloat+0x100>)
 8003672:	f010 feb1 	bl	80143d8 <GUI_DispStringAt>
  GUI_DispFloatFix(f, 9, 2);
 8003676:	eeb0 0a68 	vmov.f32	s0, s17
 800367a:	2102      	movs	r1, #2
 800367c:	2009      	movs	r0, #9
 800367e:	f014 fce9 	bl	8018054 <GUI_DispFloatFix>
  GUI_GotoX(100);
 8003682:	2064      	movs	r0, #100	; 0x64
 8003684:	f010 f846 	bl	8013714 <GUI_GotoX>
  GUI_DispFloatFix(-f, 9, 2);
 8003688:	eeb0 0a48 	vmov.f32	s0, s16
 800368c:	2102      	movs	r1, #2
 800368e:	2009      	movs	r0, #9
 8003690:	f014 fce0 	bl	8018054 <GUI_DispFloatFix>
  GUI_DispStringAt("GUI_DispSFloatFix:\n", 0, 100);
 8003694:	2264      	movs	r2, #100	; 0x64
 8003696:	2100      	movs	r1, #0
 8003698:	4821      	ldr	r0, [pc, #132]	; (8003720 <J01_DispFloat+0x104>)
 800369a:	f010 fe9d 	bl	80143d8 <GUI_DispStringAt>
  GUI_DispSFloatFix(f, 9, 2);
 800369e:	eeb0 0a68 	vmov.f32	s0, s17
 80036a2:	2102      	movs	r1, #2
 80036a4:	2009      	movs	r0, #9
 80036a6:	f014 fe85 	bl	80183b4 <GUI_DispSFloatFix>
  GUI_GotoX(100);
 80036aa:	2064      	movs	r0, #100	; 0x64
 80036ac:	f010 f832 	bl	8013714 <GUI_GotoX>
  GUI_DispSFloatFix(-f, 9, 2);
 80036b0:	eeb0 0a48 	vmov.f32	s0, s16
 80036b4:	2102      	movs	r1, #2
 80036b6:	2009      	movs	r0, #9
 80036b8:	f014 fe7c 	bl	80183b4 <GUI_DispSFloatFix>
  GUI_DispStringAt("GUI_DispFloatMin:\n", 0, 140);
 80036bc:	228c      	movs	r2, #140	; 0x8c
 80036be:	2100      	movs	r1, #0
 80036c0:	4818      	ldr	r0, [pc, #96]	; (8003724 <J01_DispFloat+0x108>)
 80036c2:	f010 fe89 	bl	80143d8 <GUI_DispStringAt>
  GUI_DispFloatMin(f, 3);
 80036c6:	eeb0 0a68 	vmov.f32	s0, s17
 80036ca:	2003      	movs	r0, #3
 80036cc:	f014 fd02 	bl	80180d4 <GUI_DispFloatMin>
  GUI_GotoX(100);
 80036d0:	2064      	movs	r0, #100	; 0x64
 80036d2:	f010 f81f 	bl	8013714 <GUI_GotoX>
  GUI_DispFloatMin(-f, 3);
 80036d6:	eeb0 0a48 	vmov.f32	s0, s16
 80036da:	2003      	movs	r0, #3
 80036dc:	f014 fcfa 	bl	80180d4 <GUI_DispFloatMin>
  GUI_DispStringAt("GUI_DispSFloatMin:\n", 0, 180);
 80036e0:	22b4      	movs	r2, #180	; 0xb4
 80036e2:	2100      	movs	r1, #0
 80036e4:	4810      	ldr	r0, [pc, #64]	; (8003728 <J01_DispFloat+0x10c>)
 80036e6:	f010 fe77 	bl	80143d8 <GUI_DispStringAt>
  GUI_DispSFloatMin(f, 3);
 80036ea:	eeb0 0a68 	vmov.f32	s0, s17
 80036ee:	2003      	movs	r0, #3
 80036f0:	f014 fea0 	bl	8018434 <GUI_DispSFloatMin>
  GUI_GotoX(100);
 80036f4:	2064      	movs	r0, #100	; 0x64
 80036f6:	f010 f80d 	bl	8013714 <GUI_GotoX>
  GUI_DispSFloatMin(-f, 3);
 80036fa:	eeb0 0a48 	vmov.f32	s0, s16
 80036fe:	2003      	movs	r0, #3

}
 8003700:	ecbd 8b02 	vpop	{d8}
 8003704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispSFloatMin(-f, 3);
 8003708:	f014 be94 	b.w	8018434 <GUI_DispSFloatMin>
 800370c:	42f6e9df 	.word	0x42f6e9df
 8003710:	0802f918 	.word	0x0802f918
 8003714:	080340fa 	.word	0x080340fa
 8003718:	c2f6e9df 	.word	0xc2f6e9df
 800371c:	0803410a 	.word	0x0803410a
 8003720:	0803411d 	.word	0x0803411d
 8003724:	08034131 	.word	0x08034131
 8003728:	08034144 	.word	0x08034144

0800372c <J01_TextInBox>:

void J01_TextInBox(void)
{
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b08f      	sub	sp, #60	; 0x3c
  const char Text[] = "This text is wrapped in an rectangle.";
 8003730:	4b47      	ldr	r3, [pc, #284]	; (8003850 <J01_TextInBox+0x124>)
 8003732:	aa04      	add	r2, sp, #16
 8003734:	f103 0620 	add.w	r6, r3, #32
 8003738:	4615      	mov	r5, r2
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003742:	4614      	mov	r4, r2
 8003744:	42b3      	cmp	r3, r6
 8003746:	c403      	stmia	r4!, {r0, r1}
 8003748:	4622      	mov	r2, r4
 800374a:	d1f6      	bne.n	800373a <J01_TextInBox+0xe>
 800374c:	6818      	ldr	r0, [r3, #0]

  // Adjust vertical rectangle size
  Rect.y1 = Rect.y0 + lines * fsize;

  // Move the rectangle to the center of the display
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 800374e:	2602      	movs	r6, #2
  GUI_RECT Rect = {0, 0, 160, 100};   // x0, y0, x1, y1
 8003750:	4a40      	ldr	r2, [pc, #256]	; (8003854 <J01_TextInBox+0x128>)

  // Draw a rounded rectangle, slightly bigger
  GUI_AA_SetFactor(6);
  GUI_SetPenSize(3);
  GUI_SetColor(GUI_BLUE);
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003752:	270c      	movs	r7, #12
  const char Text[] = "This text is wrapped in an rectangle.";
 8003754:	889b      	ldrh	r3, [r3, #4]
 8003756:	6020      	str	r0, [r4, #0]
 8003758:	80a3      	strh	r3, [r4, #4]
  GUI_RECT Rect = {0, 0, 160, 100};   // x0, y0, x1, y1
 800375a:	ab02      	add	r3, sp, #8
 800375c:	6810      	ldr	r0, [r2, #0]
 800375e:	6851      	ldr	r1, [r2, #4]
 8003760:	c303      	stmia	r3!, {r0, r1}
  GUI_SetFont(GUI_FONT_32_1);
 8003762:	483d      	ldr	r0, [pc, #244]	; (8003858 <J01_TextInBox+0x12c>)
 8003764:	f010 f8ca 	bl	80138fc <GUI_SetFont>
  int lines = GUI_WrapGetNumLines(Text, Rect.x1 - Rect.x0, GUI_WRAPMODE_WORD);
 8003768:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800376c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	4628      	mov	r0, r5
 8003774:	1ac9      	subs	r1, r1, r3
 8003776:	f010 ff55 	bl	8014624 <GUI_WrapGetNumLines>
 800377a:	4604      	mov	r4, r0
  int fsize = GUI_GetFontSizeY();
 800377c:	f00f feca 	bl	8013514 <GUI_GetFontSizeY>
  Rect.y1 = Rect.y0 + lines * fsize;
 8003780:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003784:	fb14 3000 	smlabb	r0, r4, r0, r3
 8003788:	f8ad 000e 	strh.w	r0, [sp, #14]
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 800378c:	f016 fef2 	bl	801a574 <LCD_GetXSize>
 8003790:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003794:	1ac3      	subs	r3, r0, r3
 8003796:	fb93 f4f6 	sdiv	r4, r3, r6
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 800379a:	f016 ff01 	bl	801a5a0 <LCD_GetYSize>
 800379e:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  Rect.x0 += shiftX;
 80037a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80037a6:	b2a3      	uxth	r3, r4
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80037a8:	1a40      	subs	r0, r0, r1
  GUI_SetColor(GUI_WHITE);
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80037aa:	ac0e      	add	r4, sp, #56	; 0x38
  Rect.x0 += shiftX;
 80037ac:	441a      	add	r2, r3
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80037ae:	fb90 f0f6 	sdiv	r0, r0, r6
  Rect.x0 += shiftX;
 80037b2:	f8ad 2008 	strh.w	r2, [sp, #8]
  Rect.y0 += shiftY;
 80037b6:	b280      	uxth	r0, r0
 80037b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80037bc:	4402      	add	r2, r0
  Rect.y1 += shiftY;
 80037be:	4408      	add	r0, r1
  Rect.y0 += shiftY;
 80037c0:	f8ad 200a 	strh.w	r2, [sp, #10]
  Rect.x1 += shiftX;
 80037c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  Rect.y1 += shiftY;
 80037c8:	f8ad 000e 	strh.w	r0, [sp, #14]
  GUI_SetBkColor(GUI_BLACK);
 80037cc:	2000      	movs	r0, #0
  Rect.x1 += shiftX;
 80037ce:	4413      	add	r3, r2
 80037d0:	f8ad 300c 	strh.w	r3, [sp, #12]
  GUI_SetBkColor(GUI_BLACK);
 80037d4:	f010 f824 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 80037d8:	f010 f962 	bl	8013aa0 <GUI_Clear>
  GUI_AA_SetFactor(6);
 80037dc:	2006      	movs	r0, #6
 80037de:	f00d fb49 	bl	8010e74 <GUI_AA_SetFactor>
  GUI_SetPenSize(3);
 80037e2:	2003      	movs	r0, #3
 80037e4:	f00f ffc0 	bl	8013768 <GUI_SetPenSize>
  GUI_SetColor(GUI_BLUE);
 80037e8:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80037ec:	f010 f824 	bl	8013838 <GUI_SetColor>
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80037f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80037f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80037f8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80037fc:	330a      	adds	r3, #10
 80037fe:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003802:	320a      	adds	r2, #10
 8003804:	390a      	subs	r1, #10
 8003806:	9700      	str	r7, [sp, #0]
 8003808:	380a      	subs	r0, #10
 800380a:	f012 fe89 	bl	8016520 <GUI_FillRoundedRect>
  GUI_SetColor(GUI_WHITE);
 800380e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003812:	f010 f811 	bl	8013838 <GUI_SetColor>
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003816:	f934 0d30 	ldrsh.w	r0, [r4, #-48]!
 800381a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800381e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003822:	380a      	subs	r0, #10
 8003824:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8003828:	330a      	adds	r3, #10
 800382a:	320a      	adds	r2, #10
 800382c:	9700      	str	r7, [sp, #0]
 800382e:	390a      	subs	r1, #10
 8003830:	f00d f8be 	bl	80109b0 <GUI_AA_DrawRoundedRect>

  // Display the text inside the rectangle
  GUI_SetTextMode(GUI_TM_TRANS);
 8003834:	4630      	mov	r0, r6
 8003836:	f010 f8a1 	bl	801397c <GUI_SetTextMode>
  GUI_SetTextStyle(GUI_TS_NORMAL);
 800383a:	2000      	movs	r0, #0
 800383c:	f010 f8ae 	bl	801399c <GUI_SetTextStyle>
  GUI_DispStringInRectWrap(Text, &Rect, GUI_TA_VCENTER, GUI_WRAPMODE_WORD);
 8003840:	2301      	movs	r3, #1
 8003842:	463a      	mov	r2, r7
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	f010 ff06 	bl	8014658 <GUI_DispStringInRectWrap>
}
 800384c:	b00f      	add	sp, #60	; 0x3c
 800384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003850:	08034158 	.word	0x08034158
 8003854:	08026880 	.word	0x08026880
 8003858:	0802b688 	.word	0x0802b688

0800385c <J01_GUI_GetClientRect>:
  dmc_putintcr(Rect.y0);
  dmc_putintcr(Rect.y1);  // 16382
}

void J01_GUI_GetClientRect(GUI_RECT *Rect)
{
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4604      	mov	r4, r0
  GUI_GetClientRect(Rect);
 8003860:	f00f fe30 	bl	80134c4 <GUI_GetClientRect>
  if (Rect->x1 >= LCD_GetXSize())
 8003864:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8003868:	f016 fe84 	bl	801a574 <LCD_GetXSize>
 800386c:	4285      	cmp	r5, r0
 800386e:	db03      	blt.n	8003878 <J01_GUI_GetClientRect+0x1c>
  {
    Rect->x1 = LCD_GetXSize() - 1;
 8003870:	f016 fe80 	bl	801a574 <LCD_GetXSize>
 8003874:	3801      	subs	r0, #1
 8003876:	80a0      	strh	r0, [r4, #4]
  }
  if (Rect->y1 >= LCD_GetYSize())
 8003878:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 800387c:	f016 fe90 	bl	801a5a0 <LCD_GetYSize>
 8003880:	4285      	cmp	r5, r0
 8003882:	db03      	blt.n	800388c <J01_GUI_GetClientRect+0x30>
  {
    Rect->y1 = LCD_GetYSize() - 1;
 8003884:	f016 fe8c 	bl	801a5a0 <LCD_GetYSize>
 8003888:	3801      	subs	r0, #1
 800388a:	80e0      	strh	r0, [r4, #6]
 800388c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003890 <J01_TextRotated>:
{
 8003890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003892:	b089      	sub	sp, #36	; 0x24
  const char Text[] = "Rotated\ntext";
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <J01_TextRotated+0x154>)
 8003896:	aa04      	add	r2, sp, #16
 8003898:	f103 0608 	add.w	r6, r3, #8
 800389c:	4615      	mov	r5, r2
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80038a6:	4614      	mov	r4, r2
 80038a8:	42b3      	cmp	r3, r6
 80038aa:	c403      	stmia	r4!, {r0, r1}
 80038ac:	4622      	mov	r2, r4
 80038ae:	d1f6      	bne.n	800389e <J01_TextRotated+0xe>
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <J01_TextRotated+0x158>)
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 80038b2:	2602      	movs	r6, #2
  const char Text[] = "Rotated\ntext";
 80038b4:	6818      	ldr	r0, [r3, #0]
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80038b6:	270c      	movs	r7, #12
  const char Text[] = "Rotated\ntext";
 80038b8:	791b      	ldrb	r3, [r3, #4]
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 80038ba:	6851      	ldr	r1, [r2, #4]
  const char Text[] = "Rotated\ntext";
 80038bc:	6020      	str	r0, [r4, #0]
 80038be:	7123      	strb	r3, [r4, #4]
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 80038c0:	ab02      	add	r3, sp, #8
 80038c2:	6810      	ldr	r0, [r2, #0]
 80038c4:	c303      	stmia	r3!, {r0, r1}
  GUI_SetFont(GUI_FONT_32_1);
 80038c6:	4849      	ldr	r0, [pc, #292]	; (80039ec <J01_TextRotated+0x15c>)
 80038c8:	f010 f818 	bl	80138fc <GUI_SetFont>
  int fsize = GUI_GetFontSizeY();
 80038cc:	f00f fe22 	bl	8013514 <GUI_GetFontSizeY>
 80038d0:	4604      	mov	r4, r0
  int textWidth = GUI_GetStringDistX("Rotated");
 80038d2:	4847      	ldr	r0, [pc, #284]	; (80039f0 <J01_TextRotated+0x160>)
 80038d4:	f010 fec4 	bl	8014660 <GUI_GetStringDistX>
  Rect.x1 = Rect.x0 + noOfLines * fsize;
 80038d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80038dc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80038e0:	f8ad 300c 	strh.w	r3, [sp, #12]
  Rect.y1 = Rect.y0 + textWidth;
 80038e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80038e8:	4418      	add	r0, r3
 80038ea:	f8ad 000e 	strh.w	r0, [sp, #14]
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 80038ee:	f016 fe41 	bl	801a574 <LCD_GetXSize>
 80038f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80038f6:	1ac3      	subs	r3, r0, r3
 80038f8:	fb93 f4f6 	sdiv	r4, r3, r6
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80038fc:	f016 fe50 	bl	801a5a0 <LCD_GetYSize>
 8003900:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  Rect.x0 += shiftX;
 8003904:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8003908:	b2a3      	uxth	r3, r4
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 800390a:	1a40      	subs	r0, r0, r1
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 800390c:	ac08      	add	r4, sp, #32
  Rect.x0 += shiftX;
 800390e:	441a      	add	r2, r3
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 8003910:	fb90 f0f6 	sdiv	r0, r0, r6
  Rect.x0 += shiftX;
 8003914:	f8ad 2008 	strh.w	r2, [sp, #8]
  Rect.y0 += shiftY;
 8003918:	b280      	uxth	r0, r0
 800391a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800391e:	4402      	add	r2, r0
  Rect.y1 += shiftY;
 8003920:	4408      	add	r0, r1
  Rect.y0 += shiftY;
 8003922:	f8ad 200a 	strh.w	r2, [sp, #10]
  Rect.x1 += shiftX;
 8003926:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  Rect.y1 += shiftY;
 800392a:	f8ad 000e 	strh.w	r0, [sp, #14]
  GUI_SetBkColor(GUI_BLACK);
 800392e:	2000      	movs	r0, #0
  Rect.x1 += shiftX;
 8003930:	4413      	add	r3, r2
 8003932:	f8ad 300c 	strh.w	r3, [sp, #12]
  GUI_SetBkColor(GUI_BLACK);
 8003936:	f00f ff73 	bl	8013820 <GUI_SetBkColor>
  GUI_Clear();
 800393a:	f010 f8b1 	bl	8013aa0 <GUI_Clear>
  GUI_AA_SetFactor(6);
 800393e:	2006      	movs	r0, #6
 8003940:	f00d fa98 	bl	8010e74 <GUI_AA_SetFactor>
  GUI_SetPenSize(3);
 8003944:	2003      	movs	r0, #3
 8003946:	f00f ff0f 	bl	8013768 <GUI_SetPenSize>
  GUI_SetColor(GUI_BLUE);
 800394a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 800394e:	f00f ff73 	bl	8013838 <GUI_SetColor>
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003952:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003956:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800395a:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800395e:	330a      	adds	r3, #10
 8003960:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003964:	320a      	adds	r2, #10
 8003966:	390a      	subs	r1, #10
 8003968:	9700      	str	r7, [sp, #0]
 800396a:	380a      	subs	r0, #10
 800396c:	f012 fdd8 	bl	8016520 <GUI_FillRoundedRect>
  GUI_SetColor(GUI_WHITE);
 8003970:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003974:	f00f ff60 	bl	8013838 <GUI_SetColor>
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003978:	f934 0d18 	ldrsh.w	r0, [r4, #-24]!
 800397c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003980:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003984:	380a      	subs	r0, #10
 8003986:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800398a:	330a      	adds	r3, #10
 800398c:	320a      	adds	r2, #10
 800398e:	9700      	str	r7, [sp, #0]
 8003990:	390a      	subs	r1, #10
 8003992:	f00d f80d 	bl	80109b0 <GUI_AA_DrawRoundedRect>
  GUI_SetTextMode(GUI_TM_TRANS);
 8003996:	4630      	mov	r0, r6
 8003998:	f00f fff0 	bl	801397c <GUI_SetTextMode>
  GUI_SetTextStyle(GUI_TS_NORMAL);
 800399c:	2000      	movs	r0, #0
 800399e:	f00f fffd 	bl	801399c <GUI_SetTextStyle>
  GUI_DispStringInRectEx(Text, &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER, strlen(Text), GUI_ROTATE_CCW);
 80039a2:	4628      	mov	r0, r5
 80039a4:	f7fc fc34 	bl	8000210 <strlen>
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <J01_TextRotated+0x164>)
 80039aa:	220e      	movs	r2, #14
 80039ac:	4621      	mov	r1, r4
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f010 fe5e 	bl	8014674 <GUI_DispStringInRectEx>
  J01_GUI_GetClientRect(&Rect);
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7ff ff4f 	bl	800385c <J01_GUI_GetClientRect>
  dmc_putintcr(Rect.x0);
 80039be:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80039c2:	f7fd fd3e 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.x1);  // 16382
 80039c6:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80039ca:	f7fd fd3a 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.y0);
 80039ce:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80039d2:	f7fd fd36 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.y1);  // 16382
 80039d6:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80039da:	f7fd fd32 	bl	8001442 <dmc_putintcr>
}
 80039de:	b009      	add	sp, #36	; 0x24
 80039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	08034203 	.word	0x08034203
 80039e8:	08026888 	.word	0x08026888
 80039ec:	0802b688 	.word	0x0802b688
 80039f0:	080341fb 	.word	0x080341fb
 80039f4:	2000007c 	.word	0x2000007c

080039f8 <GUI_X_Config>:
void GUI_X_Config(void)
{
  //	 Jack
  // 32 bit aligned memory area  //
  // Assign memory to emWin  //
  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 80039f8:	f44f 315c 	mov.w	r1, #225280	; 0x37000
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <GUI_X_Config+0xc>)
 80039fe:	f00f b901 	b.w	8012c04 <GUI_ALLOC_AssignMemory>
 8003a02:	bf00      	nop
 8003a04:	20000790 	.word	0x20000790

08003a08 <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8003a08:	b530      	push	{r4, r5, lr}
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8003a0a:	4c29      	ldr	r4, [pc, #164]	; (8003ab0 <MX_LCD_Init+0xa8>)
{ 
 8003a0c:	b08f      	sub	sp, #60	; 0x3c
/* Configure LTDC */

  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a0e:	2500      	movs	r5, #0
  HAL_LTDC_DeInit(&hltdc);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f003 fea1 	bl	8007758 <HAL_LTDC_DeInit>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <MX_LCD_Init+0xac>)
  hltdc.Init.TotalWidth = 565;
  hltdc.Init.TotalHeigh = 285;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a18:	4620      	mov	r0, r4
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003a1a:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003a1c:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003a1e:	6125      	str	r5, [r4, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8003a20:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003a24:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003a28:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a2c:	e884 0028 	stmia.w	r4, {r3, r5}
  hltdc.Init.HorizontalSync = 40;
 8003a30:	2328      	movs	r3, #40	; 0x28
 8003a32:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8003a34:	2309      	movs	r3, #9
 8003a36:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003a38:	2335      	movs	r3, #53	; 0x35
 8003a3a:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003a3c:	230b      	movs	r3, #11
 8003a3e:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003a40:	f240 2315 	movw	r3, #533	; 0x215
 8003a44:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003a46:	f240 131b 	movw	r3, #283	; 0x11b
 8003a4a:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8003a4c:	f240 2335 	movw	r3, #565	; 0x235
 8003a50:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003a52:	f240 131d 	movw	r3, #285	; 0x11d
 8003a56:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a58:	f003 fda4 	bl	80075a4 <HAL_LTDC_Init>
 8003a5c:	b108      	cbz	r0, 8003a62 <MX_LCD_Init+0x5a>
  {
    Error_Handler( );
 8003a5e:	f7fe f8a3 	bl	8001ba8 <Error_Handler>

  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 480;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 272;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003a62:	2102      	movs	r1, #2
  pLayerCfg.WindowX1 = 480;
 8003a64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8003a68:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.ImageWidth = 480;
  pLayerCfg.ImageHeight = 272;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003a6c:	4810      	ldr	r0, [pc, #64]	; (8003ab0 <MX_LCD_Init+0xa8>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003a6e:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 8003a70:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8003a72:	9202      	str	r2, [sp, #8]
  pLayerCfg.Alpha = 255;
 8003a74:	9106      	str	r1, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.ImageWidth = 480;
 8003a7a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003a7c:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a7e:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003a80:	2107      	movs	r1, #7
  pLayerCfg.WindowX0 = 0;
 8003a82:	9501      	str	r5, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003a84:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003a86:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8003a8a:	9503      	str	r5, [sp, #12]
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003a8c:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003a8e:	a901      	add	r1, sp, #4
  pLayerCfg.WindowY1 = 272;
 8003a90:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 8003a92:	9507      	str	r5, [sp, #28]
  pLayerCfg.ImageHeight = 272;
 8003a94:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003a96:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003a9a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003a9e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003aa2:	f003 fec5 	bl	8007830 <HAL_LTDC_ConfigLayer>
 8003aa6:	b108      	cbz	r0, 8003aac <MX_LCD_Init+0xa4>
  {
    Error_Handler( );
 8003aa8:	f7fe f87e 	bl	8001ba8 <Error_Handler>
  }

}
 8003aac:	b00f      	add	sp, #60	; 0x3c
 8003aae:	bd30      	pop	{r4, r5, pc}
 8003ab0:	20045f04 	.word	0x20045f04
 8003ab4:	40016800 	.word	0x40016800

08003ab8 <MX_FMC_Init>:
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ab8:	4815      	ldr	r0, [pc, #84]	; (8003b10 <MX_FMC_Init+0x58>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003aba:	2210      	movs	r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <MX_FMC_Init+0x5c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003abe:	2104      	movs	r1, #4
{  
 8003ac0:	b500      	push	{lr}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003ac2:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ac4:	2240      	movs	r2, #64	; 0x40
{  
 8003ac6:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ac8:	6003      	str	r3, [r0, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003aca:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003acc:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003ad0:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ad2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003ad4:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003ada:	6043      	str	r3, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003adc:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003ae2:	6083      	str	r3, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003ae4:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003ae6:	2207      	movs	r2, #7
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003ae8:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003aea:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8003aec:	2302      	movs	r3, #2
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003aee:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 8003af0:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003af2:	2203      	movs	r2, #3
  SdramTiming.SelfRefreshTime = 4;
 8003af4:	9103      	str	r1, [sp, #12]
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003af6:	4469      	add	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 8003af8:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 8003afa:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8003afc:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8003afe:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003b00:	f006 fc74 	bl	800a3ec <HAL_SDRAM_Init>
 8003b04:	b108      	cbz	r0, 8003b0a <MX_FMC_Init+0x52>
  {
    Error_Handler( );
 8003b06:	f7fe f84f 	bl	8001ba8 <Error_Handler>
  }

}
 8003b0a:	b009      	add	sp, #36	; 0x24
 8003b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b10:	20045fec 	.word	0x20045fec
 8003b14:	a0000140 	.word	0xa0000140

08003b18 <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8003b18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003b1c:	4c22      	ldr	r4, [pc, #136]	; (8003ba8 <MX_SDRAM_InitEx+0x90>)
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003b1e:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b20:	4d22      	ldr	r5, [pc, #136]	; (8003bac <MX_SDRAM_InitEx+0x94>)
  __IO uint32_t tmpmrd = 0;
 8003b22:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003b26:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2e:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003b30:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8003b34:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8003b36:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003b3a:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b3e:	f006 fc75 	bl	800a42c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b42:	4630      	mov	r0, r6
 8003b44:	f001 fbfe 	bl	8005344 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003b48:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b50:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003b52:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8003b54:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b58:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8003b5c:	f006 fc66 	bl	800a42c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003b60:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b62:	4621      	mov	r1, r4
 8003b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b68:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 8003b6a:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b6e:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8003b72:	2308      	movs	r3, #8
 8003b74:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b76:	f006 fc59 	bl	800a42c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003b7a:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b82:	4621      	mov	r1, r4
 8003b84:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003b86:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003b88:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 8003b8a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b8c:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 8003b90:	9b01      	ldr	r3, [sp, #4]
 8003b92:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003b94:	f006 fc4a 	bl	800a42c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8003b98:	f240 616f 	movw	r1, #1647	; 0x66f
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f006 fc5c 	bl	800a45a <HAL_SDRAM_ProgramRefreshRate>
}
 8003ba2:	b002      	add	sp, #8
 8003ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba8:	20037790 	.word	0x20037790
 8003bac:	20045fec 	.word	0x20045fec

08003bb0 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8003bb0:	b508      	push	{r3, lr}
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8003bb2:	480d      	ldr	r0, [pc, #52]	; (8003be8 <MX_DMA2D_Init+0x38>)
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <MX_DMA2D_Init+0x3c>)
 8003bb6:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003bb8:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003bba:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003bbc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003bbe:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003bc0:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 8003bc2:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003bc4:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8003bc6:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003bc8:	f001 fffc 	bl	8005bc4 <HAL_DMA2D_Init>
 8003bcc:	b108      	cbz	r0, 8003bd2 <MX_DMA2D_Init+0x22>
  {
    Error_Handler( );
 8003bce:	f7fd ffeb 	bl	8001ba8 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4804      	ldr	r0, [pc, #16]	; (8003be8 <MX_DMA2D_Init+0x38>)
 8003bd6:	f002 f8d3 	bl	8005d80 <HAL_DMA2D_ConfigLayer>
 8003bda:	b118      	cbz	r0, 8003be4 <MX_DMA2D_Init+0x34>
  {
    Error_Handler( );
  }

}
 8003bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8003be0:	f7fd bfe2 	b.w	8001ba8 <Error_Handler>
 8003be4:	bd08      	pop	{r3, pc}
 8003be6:	bf00      	nop
 8003be8:	20045fac 	.word	0x20045fac
 8003bec:	4002b000 	.word	0x4002b000

08003bf0 <HAL_LTDC_MspInit>:
/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 8003bf0:	6802      	ldr	r2, [r0, #0]
 8003bf2:	4b40      	ldr	r3, [pc, #256]	; (8003cf4 <HAL_LTDC_MspInit+0x104>)
 8003bf4:	429a      	cmp	r2, r3
{
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	b08c      	sub	sp, #48	; 0x30
  if(ltdcHandle->Instance==LTDC)
 8003bfa:	d178      	bne.n	8003cee <HAL_LTDC_MspInit+0xfe>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003bfc:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c04:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003c08:	a907      	add	r1, sp, #28
 8003c0a:	483b      	ldr	r0, [pc, #236]	; (8003cf8 <HAL_LTDC_MspInit+0x108>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
 8003c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c14:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003c18:	9201      	str	r2, [sp, #4]
 8003c1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	f042 0210 	orr.w	r2, r2, #16
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
 8003c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c26:	f002 0210 	and.w	r2, r2, #16
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
 8003c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c38:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003c3c:	9203      	str	r2, [sp, #12]
 8003c3e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003c4e:	9204      	str	r2, [sp, #16]
 8003c50:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003c60:	9205      	str	r2, [sp, #20]
 8003c62:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	9306      	str	r3, [sp, #24]
 8003c76:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003c78:	2310      	movs	r3, #16
 8003c7a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c80:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f002 f8f7 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003c86:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003c8a:	a907      	add	r1, sp, #28
 8003c8c:	481b      	ldr	r0, [pc, #108]	; (8003cfc <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003c8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c94:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c96:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003c98:	f002 f8ec 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003c9c:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003c9e:	a907      	add	r1, sp, #28
 8003ca0:	4817      	ldr	r0, [pc, #92]	; (8003d00 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003ca2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003caa:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003cac:	f002 f8e2 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	a907      	add	r1, sp, #28
 8003cb6:	4813      	ldr	r0, [pc, #76]	; (8003d04 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003cb8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003cba:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003cbe:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc2:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003cc4:	f002 f8d6 	bl	8005e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003cc8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ccc:	a907      	add	r1, sp, #28
 8003cce:	480e      	ldr	r0, [pc, #56]	; (8003d08 <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003cd0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cd8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cda:	f002 f8cb 	bl	8005e74 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003cde:	2058      	movs	r0, #88	; 0x58
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	2105      	movs	r1, #5
 8003ce4:	f001 fd56 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003ce8:	2058      	movs	r0, #88	; 0x58
 8003cea:	f001 fd9b 	bl	8005824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003cee:	b00c      	add	sp, #48	; 0x30
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40016800 	.word	0x40016800
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40022400 	.word	0x40022400
 8003d00:	40022800 	.word	0x40022800
 8003d04:	40021800 	.word	0x40021800
 8003d08:	40022000 	.word	0x40022000

08003d0c <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003d0c:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 8003d0e:	6802      	ldr	r2, [r0, #0]
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_LTDC_MspDeInit+0x50>)
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d120      	bne.n	8003d58 <HAL_LTDC_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <HAL_LTDC_MspDeInit+0x54>)
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8003d18:	2110      	movs	r1, #16
 8003d1a:	4812      	ldr	r0, [pc, #72]	; (8003d64 <HAL_LTDC_MspDeInit+0x58>)
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003d1c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d22:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8003d24:	f002 f9fa 	bl	800611c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003d28:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8003d2c:	480e      	ldr	r0, [pc, #56]	; (8003d68 <HAL_LTDC_MspDeInit+0x5c>)
 8003d2e:	f002 f9f5 	bl	800611c <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003d32:	21f7      	movs	r1, #247	; 0xf7
 8003d34:	480d      	ldr	r0, [pc, #52]	; (8003d6c <HAL_LTDC_MspDeInit+0x60>)
 8003d36:	f002 f9f1 	bl	800611c <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8003d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3e:	480c      	ldr	r0, [pc, #48]	; (8003d70 <HAL_LTDC_MspDeInit+0x64>)
 8003d40:	f002 f9ec 	bl	800611c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <HAL_LTDC_MspDeInit+0x68>)
 8003d46:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8003d4a:	f002 f9e7 	bl	800611c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8003d4e:	2058      	movs	r0, #88	; 0x58

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8003d50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8003d54:	f001 bd7a 	b.w	800584c <HAL_NVIC_DisableIRQ>
 8003d58:	bd08      	pop	{r3, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40016800 	.word	0x40016800
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40022400 	.word	0x40022400
 8003d6c:	40022800 	.word	0x40022800
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40022000 	.word	0x40022000

08003d78 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8003d7c:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d7e:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8003d80:	2c00      	cmp	r4, #0
 8003d82:	d14e      	bne.n	8003e22 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8003d84:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d88:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d8a:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8003d8c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d8e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d92:	4827      	ldr	r0, [pc, #156]	; (8003e30 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003da0:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da6:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003dac:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003db0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003db2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db4:	f002 f85e 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003db8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dbc:	a901      	add	r1, sp, #4
 8003dbe:	481d      	ldr	r0, [pc, #116]	; (8003e34 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003dc0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dc8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dca:	f002 f853 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003dce:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dd2:	a901      	add	r1, sp, #4
 8003dd4:	4818      	ldr	r0, [pc, #96]	; (8003e38 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003dd6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ddc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dde:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003de0:	f002 f848 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003de4:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003de8:	a901      	add	r1, sp, #4
 8003dea:	4814      	ldr	r0, [pc, #80]	; (8003e3c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003dec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003df4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003df6:	f002 f83d 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003dfa:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003dfc:	a901      	add	r1, sp, #4
 8003dfe:	4810      	ldr	r0, [pc, #64]	; (8003e40 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003e00:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e06:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e08:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e0a:	f002 f833 	bl	8005e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003e0e:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003e10:	a901      	add	r1, sp, #4
 8003e12:	480c      	ldr	r0, [pc, #48]	; (8003e44 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003e14:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e1c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003e1e:	f002 f829 	bl	8005e74 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003e22:	b007      	add	sp, #28
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200377a0 	.word	0x200377a0
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40021400 	.word	0x40021400
 8003e40:	40021c00 	.word	0x40021c00
 8003e44:	40020800 	.word	0x40020800

08003e48 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003e48:	b507      	push	{r0, r1, r2, lr}
  if(dma2dHandle->Instance==DMA2D)
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_DMA2D_MspInit+0x38>)
 8003e4c:	6802      	ldr	r2, [r0, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d112      	bne.n	8003e78 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e52:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003e56:	205a      	movs	r0, #90	; 0x5a
 8003e58:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003e62:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003e6e:	f001 fc91 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003e72:	205a      	movs	r0, #90	; 0x5a
 8003e74:	f001 fcd6 	bl	8005824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003e78:	b003      	add	sp, #12
 8003e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e7e:	bf00      	nop
 8003e80:	4002b000 	.word	0x4002b000

08003e84 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 8003e84:	2200      	movs	r2, #0
 8003e86:	4b01      	ldr	r3, [pc, #4]	; (8003e8c <TransferComplete+0x8>)
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	4770      	bx	lr
 8003e8c:	200377a4 	.word	0x200377a4

08003e90 <GetBufferSize>:
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <GetBufferSize+0x14>)
 8003e92:	231c      	movs	r3, #28
 8003e94:	fb03 2300 	mla	r3, r3, r0, r2
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	6918      	ldr	r0, [r3, #16]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	4350      	muls	r0, r2
}
 8003ea0:	4358      	muls	r0, r3
 8003ea2:	4770      	bx	lr
 8003ea4:	2003d1a8 	.word	0x2003d1a8

08003ea8 <_DMA_ExecOperation>:
  if ( TransferInProgress == 0 )
 8003ea8:	4b02      	ldr	r3, [pc, #8]	; (8003eb4 <_DMA_ExecOperation+0xc>)
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	d1fc      	bne.n	8003eaa <_DMA_ExecOperation+0x2>
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200377a4 	.word	0x200377a4

08003eb8 <_DMA_ConvertColor>:
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	9d06      	ldr	r5, [sp, #24]
 8003ebc:	4617      	mov	r7, r2
 8003ebe:	461e      	mov	r6, r3
  _DMA_ExecOperation();
 8003ec0:	f7ff fff2 	bl	8003ea8 <_DMA_ExecOperation>
  TransferInProgress = 1;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <_DMA_ConvertColor+0x40>)
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003ec8:	4c0c      	ldr	r4, [pc, #48]	; (8003efc <_DMA_ConvertColor+0x44>)
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003eca:	042d      	lsls	r5, r5, #16
  TransferInProgress = 1;
 8003ecc:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003ece:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003ed2:	4315      	orrs	r5, r2
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003ed4:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 8003ed6:	60e0      	str	r0, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8003ed8:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 8003eda:	2100      	movs	r1, #0
 8003edc:	6121      	str	r1, [r4, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8003ede:	6421      	str	r1, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8003ee0:	61e7      	str	r7, [r4, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 8003ee2:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003ee4:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eec:	4313      	orrs	r3, r2
 8003eee:	6023      	str	r3, [r4, #0]
}
 8003ef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _DMA_ExecOperation();
 8003ef4:	f7ff bfd8 	b.w	8003ea8 <_DMA_ExecOperation>
 8003ef8:	200377a4 	.word	0x200377a4
 8003efc:	4002b000 	.word	0x4002b000

08003f00 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003f06:	4690      	mov	r8, r2
 8003f08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	9908      	ldr	r1, [sp, #32]

  _DMA_ExecOperation();
 8003f10:	f7ff ffca 	bl	8003ea8 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 8003f14:	2201      	movs	r2, #1
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <_DMA_DrawAlphaBitmap+0x50>)
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003f18:	b2ad      	uxth	r5, r5
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8003f1a:	4c0e      	ldr	r4, [pc, #56]	; (8003f54 <_DMA_DrawAlphaBitmap+0x54>)
  TransferInProgress = 1;
 8003f1c:	701a      	strb	r2, [r3, #0]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003f1e:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <_DMA_DrawAlphaBitmap+0x58>)
 8003f24:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8003f26:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 8003f28:	f8c4 900c 	str.w	r9, [r4, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 8003f2c:	6160      	str	r0, [r4, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 8003f2e:	63e0      	str	r0, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 8003f30:	6121      	str	r1, [r4, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 8003f32:	61a7      	str	r7, [r4, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 8003f34:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8003f36:	61e3      	str	r3, [r4, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 8003f38:	6266      	str	r6, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 8003f3a:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003f3c:	6465      	str	r5, [r4, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f44:	4313      	orrs	r3, r2
 8003f46:	6023      	str	r3, [r4, #0]

_DMA_ExecOperation();  
}
 8003f48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
_DMA_ExecOperation();  
 8003f4c:	f7ff bfac 	b.w	8003ea8 <_DMA_ExecOperation>
 8003f50:	200377a4 	.word	0x200377a4
 8003f54:	4002b000 	.word	0x4002b000
 8003f58:	00020200 	.word	0x00020200

08003f5c <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
  OffLineDst = (BytesPerLineDst / 4) - xSize;
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8003f5e:	2400      	movs	r4, #0
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8003f60:	b085      	sub	sp, #20
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003f62:	2704      	movs	r7, #4
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8003f64:	9402      	str	r4, [sp, #8]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003f66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8003f68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003f6a:	fb95 f5f7 	sdiv	r5, r5, r7
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8003f6e:	fb94 f4f7 	sdiv	r4, r4, r7
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8003f72:	1aad      	subs	r5, r5, r2
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8003f74:	1aa4      	subs	r4, r4, r2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8003f76:	9501      	str	r5, [sp, #4]
 8003f78:	9400      	str	r4, [sp, #0]
 8003f7a:	f7ff ffc1 	bl	8003f00 <_DMA_DrawAlphaBitmap>
}
 8003f7e:	b005      	add	sp, #20
 8003f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f84 <GetPixelformat>:
  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8003f84:	2801      	cmp	r0, #1
 8003f86:	d835      	bhi.n	8003ff4 <GetPixelformat+0x70>
  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <GetPixelformat+0x90>)
 8003f8a:	4a23      	ldr	r2, [pc, #140]	; (8004018 <GetPixelformat+0x94>)
 8003f8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003f90:	4922      	ldr	r1, [pc, #136]	; (800401c <GetPixelformat+0x98>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bf18      	it	ne
 8003f96:	428b      	cmpne	r3, r1
 8003f98:	d02c      	beq.n	8003ff4 <GetPixelformat+0x70>
 8003f9a:	4a21      	ldr	r2, [pc, #132]	; (8004020 <GetPixelformat+0x9c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d029      	beq.n	8003ff4 <GetPixelformat+0x70>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 8003fa0:	4a20      	ldr	r2, [pc, #128]	; (8004024 <GetPixelformat+0xa0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d028      	beq.n	8003ff8 <GetPixelformat+0x74>
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <GetPixelformat+0xa4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d025      	beq.n	8003ff8 <GetPixelformat+0x74>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <GetPixelformat+0xa8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d024      	beq.n	8003ffc <GetPixelformat+0x78>
 8003fb2:	4a1f      	ldr	r2, [pc, #124]	; (8004030 <GetPixelformat+0xac>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d021      	beq.n	8003ffc <GetPixelformat+0x78>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <GetPixelformat+0xb0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d020      	beq.n	8004000 <GetPixelformat+0x7c>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <GetPixelformat+0xb4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d01f      	beq.n	8004004 <GetPixelformat+0x80>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	; (800403c <GetPixelformat+0xb8>)
 8003fc6:	491e      	ldr	r1, [pc, #120]	; (8004040 <GetPixelformat+0xbc>)
 8003fc8:	428b      	cmp	r3, r1
 8003fca:	bf18      	it	ne
 8003fcc:	4293      	cmpne	r3, r2
 8003fce:	491d      	ldr	r1, [pc, #116]	; (8004044 <GetPixelformat+0xc0>)
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2201      	moveq	r2, #1
 8003fd4:	2200      	movne	r2, #0
 8003fd6:	428b      	cmp	r3, r1
 8003fd8:	bf08      	it	eq
 8003fda:	f042 0201 	orreq.w	r2, r2, #1
 8003fde:	b99a      	cbnz	r2, 8004008 <GetPixelformat+0x84>
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <GetPixelformat+0xc4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d010      	beq.n	8004008 <GetPixelformat+0x84>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <GetPixelformat+0xc8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <GetPixelformat+0x88>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <GetPixelformat+0xcc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <GetPixelformat+0x8c>
 8003ff2:	e7fe      	b.n	8003ff2 <GetPixelformat+0x6e>
    return 0;
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB565;
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8004000:	2003      	movs	r0, #3
 8004002:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8004004:	2004      	movs	r0, #4
 8004006:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 8004008:	2005      	movs	r0, #5
 800400a:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 800400c:	2006      	movs	r0, #6
 800400e:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL88;
 8004010:	2007      	movs	r0, #7
} 
 8004012:	4770      	bx	lr
 8004014:	08034244 	.word	0x08034244
 8004018:	080269fc 	.word	0x080269fc
 800401c:	0802696c 	.word	0x0802696c
 8004020:	080269b4 	.word	0x080269b4
 8004024:	080269e4 	.word	0x080269e4
 8004028:	0802699c 	.word	0x0802699c
 800402c:	08026984 	.word	0x08026984
 8004030:	080269cc 	.word	0x080269cc
 8004034:	0802693c 	.word	0x0802693c
 8004038:	08026954 	.word	0x08026954
 800403c:	080268c4 	.word	0x080268c4
 8004040:	080268dc 	.word	0x080268dc
 8004044:	080268f4 	.word	0x080268f4
 8004048:	0802690c 	.word	0x0802690c
 800404c:	080268ac 	.word	0x080268ac
 8004050:	08026924 	.word	0x08026924

08004054 <DMA2D_CopyBuffer>:
{
 8004054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004058:	9d08      	ldr	r5, [sp, #32]
 800405a:	468a      	mov	sl, r1
 800405c:	4691      	mov	r9, r2
 800405e:	461e      	mov	r6, r3
 8004060:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004064:	b2ad      	uxth	r5, r5
{
 8004066:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  _DMA_ExecOperation();
 8004068:	f7ff ff1e 	bl	8003ea8 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <DMA2D_CopyBuffer+0x50>)
 800406e:	2201      	movs	r2, #1
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8004070:	4c0d      	ldr	r4, [pc, #52]	; (80040a8 <DMA2D_CopyBuffer+0x54>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004072:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  TransferInProgress = 1;	
 8004076:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8004078:	f7ff ff84 	bl	8003f84 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800407c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004080:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       
 8004082:	f8c4 a00c 	str.w	sl, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8004086:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800408a:	f8c4 8010 	str.w	r8, [r4, #16]
  DMA2D->OOR     = OffLineDst; 
 800408e:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormat;  
 8004090:	61e0      	str	r0, [r4, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004092:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6023      	str	r3, [r4, #0]
}
 800409c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_DMA_ExecOperation();
 80040a0:	f7ff bf02 	b.w	8003ea8 <_DMA_ExecOperation>
 80040a4:	200377a4 	.word	0x200377a4
 80040a8:	4002b000 	.word	0x4002b000

080040ac <LCD_LL_CopyBuffer>:
{
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	b085      	sub	sp, #20
 80040b0:	4615      	mov	r5, r2
 80040b2:	4606      	mov	r6, r0
  BufferSize = GetBufferSize(LayerIndex);
 80040b4:	f7ff feec 	bl	8003e90 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80040b8:	231c      	movs	r3, #28
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <LCD_LL_CopyBuffer+0x38>)
 80040bc:	4373      	muls	r3, r6
 80040be:	58d7      	ldr	r7, [r2, r3]
 80040c0:	18d4      	adds	r4, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 80040c2:	2300      	movs	r3, #0
 80040c4:	fb00 7205 	mla	r2, r0, r5, r7
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	fb00 7101 	mla	r1, r0, r1, r7
 80040d2:	4630      	mov	r0, r6
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	f7ff ffbc 	bl	8004054 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80040dc:	60a5      	str	r5, [r4, #8]
}
 80040de:	b005      	add	sp, #20
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2003d1a8 	.word	0x2003d1a8

080040e8 <LCD_LL_CopyRect>:
{
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4607      	mov	r7, r0
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80040ee:	261c      	movs	r6, #28
{
 80040f0:	469a      	mov	sl, r3
 80040f2:	4614      	mov	r4, r2
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80040f4:	437e      	muls	r6, r7
  BufferSize = GetBufferSize(LayerIndex);
 80040f6:	f7ff fecb 	bl	8003e90 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <LCD_LL_CopyRect+0x58>)
{
 80040fc:	ad08      	add	r5, sp, #32
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80040fe:	199a      	adds	r2, r3, r6
 8004100:	599b      	ldr	r3, [r3, r6]
{
 8004102:	e895 0320 	ldmia.w	r5, {r5, r8, r9}
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004106:	68d6      	ldr	r6, [r2, #12]
 8004108:	f8d2 e014 	ldr.w	lr, [r2, #20]
 800410c:	6852      	ldr	r2, [r2, #4]
 800410e:	fb04 1406 	mla	r4, r4, r6, r1
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8004112:	f8cd 9020 	str.w	r9, [sp, #32]
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004116:	4350      	muls	r0, r2
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8004118:	fb05 a206 	mla	r2, r5, r6, sl
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800411c:	eba6 0608 	sub.w	r6, r6, r8
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004120:	fb0e 3404 	mla	r4, lr, r4, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8004124:	fb0e 3202 	mla	r2, lr, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8004128:	2300      	movs	r3, #0
 800412a:	1821      	adds	r1, r4, r0
 800412c:	9609      	str	r6, [sp, #36]	; 0x24
 800412e:	930a      	str	r3, [sp, #40]	; 0x28
 8004130:	4402      	add	r2, r0
 8004132:	4643      	mov	r3, r8
 8004134:	4638      	mov	r0, r7
}
 8004136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800413a:	f7ff bf8b 	b.w	8004054 <DMA2D_CopyBuffer>
 800413e:	bf00      	nop
 8004140:	2003d1a8 	.word	0x2003d1a8

08004144 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004144:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	4607      	mov	r7, r0
 800414a:	4698      	mov	r8, r3
 800414c:	4614      	mov	r4, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800414e:	f7ff fe9f 	bl	8003e90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004152:	231c      	movs	r3, #28
 8004154:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <LCD_LL_DrawBitmap16bpp+0x64>)
{
 8004156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004158:	437b      	muls	r3, r7
{
 800415a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800415e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004162:	eb02 0e03 	add.w	lr, r2, r3
 8004166:	f8de 600c 	ldr.w	r6, [lr, #12]
 800416a:	fb04 1406 	mla	r4, r4, r6, r1
 800416e:	58d1      	ldr	r1, [r2, r3]
 8004170:	f8de 3014 	ldr.w	r3, [lr, #20]
  OffLineSrc = (BytesPerLine / 2) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004174:	eba6 0609 	sub.w	r6, r6, r9
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004178:	f8de 2008 	ldr.w	r2, [lr, #8]
 800417c:	fb03 1404 	mla	r4, r3, r4, r1
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004180:	2302      	movs	r3, #2
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004182:	4641      	mov	r1, r8
 8004184:	960c      	str	r6, [sp, #48]	; 0x30
 8004186:	fb02 4200 	mla	r2, r2, r0, r4
 800418a:	4638      	mov	r0, r7
 800418c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004190:	fb95 f5f3 	sdiv	r5, r5, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004194:	464b      	mov	r3, r9
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004196:	eba5 0509 	sub.w	r5, r5, r9
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800419a:	950b      	str	r5, [sp, #44]	; 0x2c
}
 800419c:	b001      	add	sp, #4
 800419e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80041a2:	f7ff bf57 	b.w	8004054 <DMA2D_CopyBuffer>
 80041a6:	bf00      	nop
 80041a8:	2003d1a8 	.word	0x2003d1a8

080041ac <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4681      	mov	r9, r0
 80041b2:	469a      	mov	sl, r3
 80041b4:	4617      	mov	r7, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80041b6:	f7ff fe6b 	bl	8003e90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041ba:	221c      	movs	r2, #28
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <LCD_LL_DrawBitmap32bpp+0x90>)
{
 80041be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041c0:	fb02 f209 	mul.w	r2, r2, r9
{
 80041c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041ca:	eb03 0e02 	add.w	lr, r3, r2
 80041ce:	589a      	ldr	r2, [r3, r2]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80041d0:	2304      	movs	r3, #4
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80041d2:	b2a4      	uxth	r4, r4
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041d4:	f8de 500c 	ldr.w	r5, [lr, #12]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80041d8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041dc:	fb07 1705 	mla	r7, r7, r5, r1
 80041e0:	f8de 1014 	ldr.w	r1, [lr, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 80041e4:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041e8:	fb01 2707 	mla	r7, r1, r7, r2
 80041ec:	f8de 2008 	ldr.w	r2, [lr, #8]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80041f0:	fb96 f6f3 	sdiv	r6, r6, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80041f4:	fb02 7700 	mla	r7, r2, r0, r7
  _DMA_ExecOperation();
 80041f8:	f7ff fe56 	bl	8003ea8 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 80041fc:	2201      	movs	r2, #1
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <LCD_LL_DrawBitmap32bpp+0x94>)
  PixelFormat = GetPixelformat(LayerIndex);
 8004200:	4648      	mov	r0, r9
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004202:	eba6 0608 	sub.w	r6, r6, r8
  TransferInProgress = 1;	
 8004206:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8004208:	f7ff febc 	bl	8003f84 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <LCD_LL_DrawBitmap32bpp+0x98>)
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <LCD_LL_DrawBitmap32bpp+0x9c>)
 8004210:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8004212:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       
 8004214:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8004218:	63d7      	str	r7, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800421a:	6157      	str	r7, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 800421c:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800421e:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 8004220:	6195      	str	r5, [r2, #24]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 8004222:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 8004224:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 8004226:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004228:	6454      	str	r4, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f043 0301 	orr.w	r3, r3, #1
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
}
 8004230:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= DMA2D_CR_START;   
 8004234:	6013      	str	r3, [r2, #0]
  _DMA_ExecOperation();
 8004236:	f7ff be37 	b.w	8003ea8 <_DMA_ExecOperation>
 800423a:	bf00      	nop
 800423c:	2003d1a8 	.word	0x2003d1a8
 8004240:	200377a4 	.word	0x200377a4
 8004244:	4002b000 	.word	0x4002b000
 8004248:	00020200 	.word	0x00020200

0800424c <_LCD_DrawBitmapAlpha>:
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 800424c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004250:	4606      	mov	r6, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004252:	271c      	movs	r7, #28
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004254:	4698      	mov	r8, r3
 8004256:	9101      	str	r1, [sp, #4]
 8004258:	4614      	mov	r4, r2
  PixelFormat = GetPixelformat(LayerIndex);
 800425a:	f7ff fe93 	bl	8003f84 <GetPixelformat>
 800425e:	4683      	mov	fp, r0
  BufferSize = GetBufferSize(LayerIndex);
 8004260:	4630      	mov	r0, r6
 8004262:	f7ff fe15 	bl	8003e90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004266:	4377      	muls	r7, r6
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <_LCD_DrawBitmapAlpha+0x70>)
 800426a:	9901      	ldr	r1, [sp, #4]
 800426c:	eb02 0e07 	add.w	lr, r2, r7
 8004270:	59d2      	ldr	r2, [r2, r7]
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004272:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004274:	f8de 600c 	ldr.w	r6, [lr, #12]
 8004278:	f8de 3014 	ldr.w	r3, [lr, #20]
 800427c:	fb04 1406 	mla	r4, r4, r6, r1
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004280:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004284:	f8de 7008 	ldr.w	r7, [lr, #8]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8004288:	4641      	mov	r1, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800428a:	fb03 2404 	mla	r4, r3, r4, r2
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800428e:	2304      	movs	r3, #4
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004290:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004294:	eba6 0609 	sub.w	r6, r6, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8004298:	464a      	mov	r2, r9
 800429a:	fb07 4000 	mla	r0, r7, r0, r4
 800429e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80042a2:	960d      	str	r6, [sp, #52]	; 0x34
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80042a4:	fb95 f5f3 	sdiv	r5, r5, r3
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80042a8:	4653      	mov	r3, sl
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80042aa:	eba5 0509 	sub.w	r5, r5, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80042ae:	950c      	str	r5, [sp, #48]	; 0x30
}
 80042b0:	b003      	add	sp, #12
 80042b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 80042b6:	f7ff be23 	b.w	8003f00 <_DMA_DrawAlphaBitmap>
 80042ba:	bf00      	nop
 80042bc:	2003d1a8 	.word	0x2003d1a8

080042c0 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80042c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	4681      	mov	r9, r0
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042c6:	261c      	movs	r6, #28
{
 80042c8:	469a      	mov	sl, r3
 80042ca:	9101      	str	r1, [sp, #4]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042cc:	fb06 f609 	mul.w	r6, r6, r9
{
 80042d0:	4614      	mov	r4, r2
  BufferSize = GetBufferSize(LayerIndex);
 80042d2:	f7ff fddd 	bl	8003e90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <LCD_LL_DrawBitmap8bpp+0x84>)
 80042d8:	9901      	ldr	r1, [sp, #4]
 80042da:	1993      	adds	r3, r2, r6
{
 80042dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80042e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042e2:	68dd      	ldr	r5, [r3, #12]
{
 80042e4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 80042e8:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042ec:	fb04 1405 	mla	r4, r4, r5, r1
 80042f0:	5991      	ldr	r1, [r2, r6]
 80042f2:	695a      	ldr	r2, [r3, #20]
  OffLineSrc = BytesPerLine - xSize;
 80042f4:	ebab 0608 	sub.w	r6, fp, r8
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 80042f8:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042fc:	fb02 1404 	mla	r4, r2, r4, r1
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	fb02 4400 	mla	r4, r2, r0, r4
  PixelFormat = GetPixelformat(LayerIndex);
 8004306:	4648      	mov	r0, r9
 8004308:	f7ff fe3c 	bl	8003f84 <GetPixelformat>
  _DMA_ExecOperation();
 800430c:	f7ff fdcc 	bl	8003ea8 <_DMA_ExecOperation>
  TransferInProgress = 1;
 8004310:	2201      	movs	r2, #1
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <LCD_LL_DrawBitmap8bpp+0x88>)
 8004314:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8004316:	f44f 3381 	mov.w	r3, #66048	; 0x10200
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <LCD_LL_DrawBitmap8bpp+0x8c>)
 800431c:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800431e:	2305      	movs	r3, #5
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8004320:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8004324:	63d4      	str	r4, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8004326:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8004328:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800432a:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800432c:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 800432e:	6457      	str	r7, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 8004330:	6813      	ldr	r3, [r2, #0]
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6013      	str	r3, [r2, #0]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
}
 8004338:	b003      	add	sp, #12
 800433a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_ExecOperation();	
 800433e:	f7ff bdb3 	b.w	8003ea8 <_DMA_ExecOperation>
 8004342:	bf00      	nop
 8004344:	2003d1a8 	.word	0x2003d1a8
 8004348:	200377a4 	.word	0x200377a4
 800434c:	4002b000 	.word	0x4002b000

08004350 <_DMA_Index2ColorBulk.isra.2>:
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8004350:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004352:	4614      	mov	r4, r2
 8004354:	460d      	mov	r5, r1
 8004356:	461a      	mov	r2, r3
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8004358:	2300      	movs	r3, #0
 800435a:	9400      	str	r4, [sp, #0]
 800435c:	f7ff fdac 	bl	8003eb8 <_DMA_ConvertColor>
 8004360:	462b      	mov	r3, r5
 8004362:	4621      	mov	r1, r4
  while (NumItems >= 4) {
 8004364:	2903      	cmp	r1, #3
 8004366:	f103 0310 	add.w	r3, r3, #16
 800436a:	d80a      	bhi.n	8004382 <_DMA_Index2ColorBulk.isra.2+0x32>
 800436c:	08a3      	lsrs	r3, r4, #2
 800436e:	eb05 1103 	add.w	r1, r5, r3, lsl #4
 8004372:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
 8004376:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  while (NumItems--) {
 800437a:	42a1      	cmp	r1, r4
 800437c:	d143      	bne.n	8004406 <_DMA_Index2ColorBulk.isra.2+0xb6>
}
 800437e:	b002      	add	sp, #8
 8004380:	bd70      	pop	{r4, r5, r6, pc}
    Color = *(pColor + 0);
 8004382:	f853 2c10 	ldr.w	r2, [r3, #-16]
    NumItems -= 4;
 8004386:	3904      	subs	r1, #4
    Color = ((Color << 24) >>  8)  // Red
 8004388:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800438a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800438e:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8004392:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004396:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 8004398:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800439a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800439e:	4302      	orrs	r2, r0
    *(pColor + 0) = Color;
 80043a0:	f843 2c10 	str.w	r2, [r3, #-16]
    Color = *(pColor + 1);
 80043a4:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    Color = ((Color << 24) >>  8)  // Red
 80043a8:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 80043aa:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80043ae:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 80043b2:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80043b6:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 80043b8:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 80043ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80043be:	4302      	orrs	r2, r0
    *(pColor + 1) = Color;
 80043c0:	f843 2c0c 	str.w	r2, [r3, #-12]
    Color = *(pColor + 2);
 80043c4:	f853 2c08 	ldr.w	r2, [r3, #-8]
    Color = ((Color << 24) >>  8)  // Red
 80043c8:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 80043ca:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80043ce:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 80043d2:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80043d6:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 80043d8:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 80043da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80043de:	4302      	orrs	r2, r0
    *(pColor + 2) = Color;
 80043e0:	f843 2c08 	str.w	r2, [r3, #-8]
    Color = *(pColor + 3);
 80043e4:	f853 2c04 	ldr.w	r2, [r3, #-4]
    Color = ((Color << 24) >>  8)  // Red
 80043e8:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 80043ea:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80043ee:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 80043f2:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80043f6:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 80043f8:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 80043fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80043fe:	4302      	orrs	r2, r0
    *(pColor + 3) = Color;
 8004400:	f843 2c04 	str.w	r2, [r3, #-4]
 8004404:	e7ae      	b.n	8004364 <_DMA_Index2ColorBulk.isra.2+0x14>
    Color = *pColor;
 8004406:	680b      	ldr	r3, [r1, #0]
    Color = ((Color << 24) >>  8)  // Red
 8004408:	0618      	lsls	r0, r3, #24
          | ((Color <<  8) >> 24)  // Blue
 800440a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800440e:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
          |  (Color & 0xFF00)      // Green
 8004412:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004416:	43db      	mvns	r3, r3
          | ((Color <<  8) >> 24)  // Blue
 8004418:	4302      	orrs	r2, r0
          | (~Color & 0xFF000000); // Alpha
 800441a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800441e:	4313      	orrs	r3, r2
    *pColor++ = Color;
 8004420:	f841 3b04 	str.w	r3, [r1], #4
 8004424:	e7a9      	b.n	800437a <_DMA_Index2ColorBulk.isra.2+0x2a>

08004426 <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8004426:	2300      	movs	r3, #0
 8004428:	f7ff bf92 	b.w	8004350 <_DMA_Index2ColorBulk.isra.2>

0800442c <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800442c:	2304      	movs	r3, #4
 800442e:	f7ff bf8f 	b.w	8004350 <_DMA_Index2ColorBulk.isra.2>

08004432 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004432:	2302      	movs	r3, #2
 8004434:	f7ff bf8c 	b.w	8004350 <_DMA_Index2ColorBulk.isra.2>

08004438 <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8004438:	2303      	movs	r3, #3
 800443a:	f7ff bf89 	b.w	8004350 <_DMA_Index2ColorBulk.isra.2>
	...

08004440 <_DMA_Color2IndexBulk.isra.3>:
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8004440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004442:	4606      	mov	r6, r0
 8004444:	4d3d      	ldr	r5, [pc, #244]	; (800453c <_DMA_Color2IndexBulk.isra.3+0xfc>)
 8004446:	4617      	mov	r7, r2
  while (NumItems >= 4) {
 8004448:	2f03      	cmp	r7, #3
 800444a:	f106 0610 	add.w	r6, r6, #16
 800444e:	f105 0510 	add.w	r5, r5, #16
 8004452:	d811      	bhi.n	8004478 <_DMA_Color2IndexBulk.isra.3+0x38>
 8004454:	0894      	lsrs	r4, r2, #2
 8004456:	4f3a      	ldr	r7, [pc, #232]	; (8004540 <_DMA_Color2IndexBulk.isra.3+0x100>)
 8004458:	0125      	lsls	r5, r4, #4
 800445a:	eba2 0484 	sub.w	r4, r2, r4, lsl #2
 800445e:	442f      	add	r7, r5
 8004460:	4428      	add	r0, r5
 8004462:	eb07 0684 	add.w	r6, r7, r4, lsl #2
  while (NumItems--) {
 8004466:	42b7      	cmp	r7, r6
 8004468:	d154      	bne.n	8004514 <_DMA_Color2IndexBulk.isra.3+0xd4>
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 800446a:	9200      	str	r2, [sp, #0]
 800446c:	2200      	movs	r2, #0
 800446e:	4834      	ldr	r0, [pc, #208]	; (8004540 <_DMA_Color2IndexBulk.isra.3+0x100>)
 8004470:	f7ff fd22 	bl	8003eb8 <_DMA_ConvertColor>
}
 8004474:	b003      	add	sp, #12
 8004476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Color = *(pColorSrc + 0);
 8004478:	f856 4c10 	ldr.w	r4, [r6, #-16]
    NumItems -= 4;
 800447c:	3f04      	subs	r7, #4
    Color = ((Color << 24) >>  8)  // Red
 800447e:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8004482:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8004486:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 800448a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 800448e:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8004490:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8004494:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004498:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 0) = Color;
 800449c:	f845 4c20 	str.w	r4, [r5, #-32]
    Color = *(pColorSrc + 1);
 80044a0:	f856 4c0c 	ldr.w	r4, [r6, #-12]
    Color = ((Color << 24) >>  8)  // Red
 80044a4:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 80044a8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80044ac:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 80044b0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80044b4:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 80044b6:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 80044ba:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80044be:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 1) = Color;
 80044c2:	f845 4c1c 	str.w	r4, [r5, #-28]
    Color = *(pColorSrc + 2);
 80044c6:	f856 4c08 	ldr.w	r4, [r6, #-8]
    Color = ((Color << 24) >>  8)  // Red
 80044ca:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 80044ce:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80044d2:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 80044d6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80044da:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 80044dc:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 80044e0:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80044e4:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 2) = Color;
 80044e8:	f845 4c18 	str.w	r4, [r5, #-24]
    Color = *(pColorSrc + 3);
 80044ec:	f856 4c04 	ldr.w	r4, [r6, #-4]
    Color = ((Color << 24) >>  8)  // Red
 80044f0:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 80044f4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80044f8:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 80044fc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004500:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8004502:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8004506:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800450a:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 3) = Color;
 800450e:	f845 4c14 	str.w	r4, [r5, #-20]
 8004512:	e799      	b.n	8004448 <_DMA_Color2IndexBulk.isra.3+0x8>
    Color = *pColorSrc++;
 8004514:	f850 4b04 	ldr.w	r4, [r0], #4
    Color = ((Color << 24) >>  8)  // Red
 8004518:	ea4f 6e04 	mov.w	lr, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 800451c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8004520:	ea45 251e 	orr.w	r5, r5, lr, lsr #8
          |  (Color & 0xFF00)      // Green
 8004524:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004528:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 800452a:	ea45 050e 	orr.w	r5, r5, lr
          | (~Color & 0xFF000000); // Alpha
 800452e:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004532:	432c      	orrs	r4, r5
    *pColorDst++ = Color;
 8004534:	f847 4b04 	str.w	r4, [r7], #4
 8004538:	e795      	b.n	8004466 <_DMA_Color2IndexBulk.isra.3+0x26>
 800453a:	bf00      	nop
 800453c:	200377b8 	.word	0x200377b8
 8004540:	200377a8 	.word	0x200377a8

08004544 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 8004544:	2300      	movs	r3, #0
 8004546:	f7ff bf7b 	b.w	8004440 <_DMA_Color2IndexBulk.isra.3>

0800454a <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800454a:	2304      	movs	r3, #4
 800454c:	f7ff bf78 	b.w	8004440 <_DMA_Color2IndexBulk.isra.3>

08004550 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004550:	2302      	movs	r3, #2
 8004552:	f7ff bf75 	b.w	8004440 <_DMA_Color2IndexBulk.isra.3>

08004556 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8004556:	2303      	movs	r3, #3
 8004558:	f7ff bf72 	b.w	8004440 <_DMA_Color2IndexBulk.isra.3>

0800455c <LCD_LL_FillRect>:
{
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	9c08      	ldr	r4, [sp, #32]
 8004562:	4681      	mov	r9, r0
 8004564:	460e      	mov	r6, r1
 8004566:	4617      	mov	r7, r2
 8004568:	461d      	mov	r5, r3
 800456a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800456e:	f00e ffc5 	bl	80134fc <GUI_GetDrawMode>
 8004572:	2801      	cmp	r0, #1
 8004574:	d111      	bne.n	800459a <LCD_LL_FillRect+0x3e>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8004576:	2200      	movs	r2, #0
 8004578:	2119      	movs	r1, #25
 800457a:	4648      	mov	r0, r9
 800457c:	f016 fe92 	bl	801b2a4 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8004580:	462a      	mov	r2, r5
 8004582:	4639      	mov	r1, r7
 8004584:	4630      	mov	r0, r6
 8004586:	4623      	mov	r3, r4
 8004588:	f015 f974 	bl	8019874 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800458c:	4648      	mov	r0, r9
 800458e:	4a20      	ldr	r2, [pc, #128]	; (8004610 <LCD_LL_FillRect+0xb4>)
 8004590:	2119      	movs	r1, #25
}
 8004592:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8004596:	f016 be85 	b.w	801b2a4 <LCD_SetDevFunc>
    BufferSize = GetBufferSize(LayerIndex);
 800459a:	4648      	mov	r0, r9
    xSize = x1 - x0 + 1;
 800459c:	1bad      	subs	r5, r5, r6
    BufferSize = GetBufferSize(LayerIndex);
 800459e:	f7ff fc77 	bl	8003e90 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045a2:	211c      	movs	r1, #28
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <LCD_LL_FillRect+0xb8>)
    ySize = y1 - y0 + 1;
 80045a6:	1be4      	subs	r4, r4, r7
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045a8:	fb01 f109 	mul.w	r1, r1, r9
    xSize = x1 - x0 + 1;
 80045ac:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 80045ae:	3401      	adds	r4, #1
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045b0:	eb02 0e01 	add.w	lr, r2, r1
 80045b4:	5851      	ldr	r1, [r2, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80045b6:	b2a4      	uxth	r4, r4
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045b8:	f8de 300c 	ldr.w	r3, [lr, #12]
 80045bc:	f8de 2014 	ldr.w	r2, [lr, #20]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80045c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045c4:	fb03 6607 	mla	r6, r3, r7, r6
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 80045c8:	eba3 0a05 	sub.w	sl, r3, r5
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80045cc:	fb02 1606 	mla	r6, r2, r6, r1
 80045d0:	f8de 2008 	ldr.w	r2, [lr, #8]
 80045d4:	fb02 6600 	mla	r6, r2, r0, r6
  _DMA_ExecOperation();
 80045d8:	f7ff fc66 	bl	8003ea8 <_DMA_ExecOperation>
  TransferInProgress = 1;	
 80045dc:	2201      	movs	r2, #1
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <LCD_LL_FillRect+0xbc>)
  PixelFormat = GetPixelformat(LayerIndex);
 80045e0:	4648      	mov	r0, r9
  TransferInProgress = 1;	
 80045e2:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 80045e4:	f7ff fcce 	bl	8003f84 <GetPixelformat>
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <LCD_LL_FillRect+0xc0>)
 80045ea:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <LCD_LL_FillRect+0xc4>)
 80045ec:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 80045ee:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;                      
 80045f2:	63de      	str	r6, [r3, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 80045f4:	f8c3 a040 	str.w	sl, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 80045f8:	6358      	str	r0, [r3, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80045fa:	645c      	str	r4, [r3, #68]	; 0x44
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	f042 0201 	orr.w	r2, r2, #1
}
 8004606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 800460a:	601a      	str	r2, [r3, #0]
  _DMA_ExecOperation();
 800460c:	f7ff bc4c 	b.w	8003ea8 <_DMA_ExecOperation>
 8004610:	0800455d 	.word	0x0800455d
 8004614:	2003d1a8 	.word	0x2003d1a8
 8004618:	200377a4 	.word	0x200377a4
 800461c:	4002b000 	.word	0x4002b000
 8004620:	00030200 	.word	0x00030200

08004624 <_Index2ColorBulk_M8888I_DMA2D>:
 8004624:	2300      	movs	r3, #0
 8004626:	f7ff be93 	b.w	8004350 <_DMA_Index2ColorBulk.isra.2>

0800462a <_Color2IndexBulk_M8888I_DMA2D>:
 800462a:	2300      	movs	r3, #0
 800462c:	f7ff bf08 	b.w	8004440 <_DMA_Color2IndexBulk.isra.3>

08004630 <DMA2D_Init>:
{
 8004630:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 8004632:	4809      	ldr	r0, [pc, #36]	; (8004658 <DMA2D_Init+0x28>)
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <DMA2D_Init+0x2c>)
 8004636:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8004638:	f001 fac4 	bl	8005bc4 <HAL_DMA2D_Init>
 800463c:	b108      	cbz	r0, 8004642 <DMA2D_Init+0x12>
    Error_Handler( );
 800463e:	f7fd fab3 	bl	8001ba8 <Error_Handler>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8004642:	2101      	movs	r1, #1
 8004644:	4804      	ldr	r0, [pc, #16]	; (8004658 <DMA2D_Init+0x28>)
 8004646:	f001 fb9b 	bl	8005d80 <HAL_DMA2D_ConfigLayer>
 800464a:	b118      	cbz	r0, 8004654 <DMA2D_Init+0x24>
}
 800464c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8004650:	f7fd baaa 	b.w	8001ba8 <Error_Handler>
 8004654:	bd08      	pop	{r3, pc}
 8004656:	bf00      	nop
 8004658:	20045fac 	.word	0x20045fac
 800465c:	08003e85 	.word	0x08003e85

08004660 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	4606      	mov	r6, r0
 8004664:	4c13      	ldr	r4, [pc, #76]	; (80046b4 <HAL_LTDC_LineEventCallback+0x54>)
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004666:	2500      	movs	r5, #0
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8004668:	f04f 37ff 	mov.w	r7, #4294967295
    if (layer_prop[layer].pending_buffer >= 0) 
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	2900      	cmp	r1, #0
 8004670:	db15      	blt.n	800469e <HAL_LTDC_LineEventCallback+0x3e>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004672:	68e2      	ldr	r2, [r4, #12]
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	6960      	ldr	r0, [r4, #20]
 8004678:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 800467a:	6822      	ldr	r2, [r4, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 800467c:	434b      	muls	r3, r1
      Addr = layer_prop[layer].address + \
 800467e:	fb00 2303 	mla	r3, r0, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8004682:	6832      	ldr	r2, [r6, #0]
 8004684:	f102 0084 	add.w	r0, r2, #132	; 0x84
 8004688:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 800468c:	6283      	str	r3, [r0, #40]	; 0x28
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 800468e:	4628      	mov	r0, r5
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004690:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8004698:	f011 ffe6 	bl	8016668 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 800469c:	6067      	str	r7, [r4, #4]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 800469e:	3501      	adds	r5, #1
 80046a0:	341c      	adds	r4, #28
 80046a2:	2d02      	cmp	r5, #2
 80046a4:	d1e2      	bne.n	800466c <HAL_LTDC_LineEventCallback+0xc>
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80046a6:	4630      	mov	r0, r6
 80046a8:	2100      	movs	r1, #0
}
 80046aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80046ae:	f003 baa9 	b.w	8007c04 <HAL_LTDC_ProgramLineEvent>
 80046b2:	bf00      	nop
 80046b4:	2003d1a8 	.word	0x2003d1a8

080046b8 <LCD_X_Config>:
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 80046b8:	2300      	movs	r3, #0
 80046ba:	4951      	ldr	r1, [pc, #324]	; (8004800 <LCD_X_Config+0x148>)
 80046bc:	4851      	ldr	r0, [pc, #324]	; (8004804 <LCD_X_Config+0x14c>)
 80046be:	461a      	mov	r2, r3
{
 80046c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 80046c4:	f00f fc24 	bl	8013f10 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 80046c8:	2000      	movs	r0, #0
 80046ca:	f015 ff43 	bl	801a554 <LCD_GetSwapXYEx>
 80046ce:	4604      	mov	r4, r0
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d07d      	beq.n	80047d0 <LCD_X_Config+0x118>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 80046d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046d8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80046dc:	2000      	movs	r0, #0
 80046de:	f016 fe2f 	bl	801b340 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80046e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046e6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80046ea:	2000      	movs	r0, #0
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80046ec:	f016 fe5a 	bl	801b3a4 <LCD_SetVSizeEx>
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 80046f0:	2301      	movs	r3, #1
 80046f2:	2200      	movs	r2, #0
 80046f4:	4942      	ldr	r1, [pc, #264]	; (8004800 <LCD_X_Config+0x148>)
 80046f6:	4843      	ldr	r0, [pc, #268]	; (8004804 <LCD_X_Config+0x14c>)
 80046f8:	f00f fc0a 	bl	8013f10 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 80046fc:	2001      	movs	r0, #1
 80046fe:	f015 ff29 	bl	801a554 <LCD_GetSwapXYEx>
 8004702:	2800      	cmp	r0, #0
 8004704:	d070      	beq.n	80047e8 <LCD_X_Config+0x130>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 8004706:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800470a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800470e:	2001      	movs	r0, #1
 8004710:	f016 fe16 	bl	801b340 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004714:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004718:	f44f 7188 	mov.w	r1, #272	; 0x110
  } else {
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800471c:	2001      	movs	r0, #1
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800471e:	4d3a      	ldr	r5, [pc, #232]	; (8004808 <LCD_X_Config+0x150>)
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004720:	f016 fe40 	bl	801b3a4 <LCD_SetVSizeEx>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8004724:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8004728:	2400      	movs	r4, #0
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800472a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004854 <LCD_X_Config+0x19c>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800472e:	602b      	str	r3, [r5, #0]
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8004730:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
    layer_prop[i].pending_buffer = -1;

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8004734:	4f35      	ldr	r7, [pc, #212]	; (800480c <LCD_X_Config+0x154>)
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8004736:	4e36      	ldr	r6, [pc, #216]	; (8004810 <LCD_X_Config+0x158>)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8004738:	61eb      	str	r3, [r5, #28]
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800473a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 800473e:	4620      	mov	r0, r4
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8004740:	61ab      	str	r3, [r5, #24]
    layer_prop[i].pending_buffer = -1;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	606b      	str	r3, [r5, #4]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004748:	f015 fec4 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 800474c:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 800474e:	463a      	mov	r2, r7
 8004750:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004752:	6168      	str	r0, [r5, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8004754:	4620      	mov	r0, r4
 8004756:	f016 fda5 	bl	801b2a4 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800475a:	4632      	mov	r2, r6
 800475c:	2123      	movs	r1, #35	; 0x23
 800475e:	4620      	mov	r0, r4
 8004760:	f016 fda0 	bl	801b2a4 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8004764:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <LCD_X_Config+0x15c>)
 8004766:	2119      	movs	r1, #25
 8004768:	4620      	mov	r0, r4
 800476a:	f016 fd9b 	bl	801b2a4 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 800476e:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <LCD_X_Config+0x160>)
 8004770:	2125      	movs	r1, #37	; 0x25
 8004772:	4620      	mov	r0, r4
 8004774:	f016 fd96 	bl	801b2a4 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <LCD_X_Config+0x164>)
 800477a:	2124      	movs	r1, #36	; 0x24
 800477c:	4620      	mov	r0, r4
 800477e:	f016 fd91 	bl	801b2a4 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8004782:	4a27      	ldr	r2, [pc, #156]	; (8004820 <LCD_X_Config+0x168>)
 8004784:	2128      	movs	r1, #40	; 0x28
 8004786:	4620      	mov	r0, r4
 8004788:	f016 fd8c 	bl	801b2a4 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 800478c:	4620      	mov	r0, r4
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800478e:	3401      	adds	r4, #1
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004790:	f855 1b1c 	ldr.w	r1, [r5], #28
 8004794:	f016 fdee 	bl	801b374 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8004798:	2c02      	cmp	r4, #2
 800479a:	d1ce      	bne.n	800473a <LCD_X_Config+0x82>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 800479c:	4921      	ldr	r1, [pc, #132]	; (8004824 <LCD_X_Config+0x16c>)
 800479e:	4822      	ldr	r0, [pc, #136]	; (8004828 <LCD_X_Config+0x170>)
 80047a0:	f00c ff86 	bl	80116b0 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 80047a4:	4921      	ldr	r1, [pc, #132]	; (800482c <LCD_X_Config+0x174>)
 80047a6:	4822      	ldr	r0, [pc, #136]	; (8004830 <LCD_X_Config+0x178>)
 80047a8:	f00d fa14 	bl	8011bd4 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 80047ac:	4921      	ldr	r1, [pc, #132]	; (8004834 <LCD_X_Config+0x17c>)
 80047ae:	4822      	ldr	r0, [pc, #136]	; (8004838 <LCD_X_Config+0x180>)
 80047b0:	f00d f83a 	bl	8011828 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 80047b4:	4921      	ldr	r1, [pc, #132]	; (800483c <LCD_X_Config+0x184>)
 80047b6:	4822      	ldr	r0, [pc, #136]	; (8004840 <LCD_X_Config+0x188>)
 80047b8:	f00d fa32 	bl	8011c20 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 80047bc:	4921      	ldr	r1, [pc, #132]	; (8004844 <LCD_X_Config+0x18c>)
 80047be:	4822      	ldr	r0, [pc, #136]	; (8004848 <LCD_X_Config+0x190>)
 80047c0:	f00d f852 	bl	8011868 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 80047c4:	4921      	ldr	r1, [pc, #132]	; (800484c <LCD_X_Config+0x194>)
 80047c6:	4822      	ldr	r0, [pc, #136]	; (8004850 <LCD_X_Config+0x198>)
	
//	LCD_SetDevFunc(0, LCD_DEVFUNC_READPIXEL, LCD_DEVFUNC_READPIXEL_CUSTOM);

}
 80047c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 80047cc:	f014 b968 	b.w	8018aa0 <GUI_SetFuncDrawAlpha>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 80047d0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047d4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047d8:	f016 fdb2 	bl	801b340 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80047dc:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047e4:	4620      	mov	r0, r4
 80047e6:	e781      	b.n	80046ec <LCD_X_Config+0x34>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 80047e8:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047ec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047f0:	2001      	movs	r0, #1
 80047f2:	f016 fda5 	bl	801b340 <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80047f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80047fa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80047fe:	e78d      	b.n	800471c <LCD_X_Config+0x64>
 8004800:	08026984 	.word	0x08026984
 8004804:	08027058 	.word	0x08027058
 8004808:	2003d1a8 	.word	0x2003d1a8
 800480c:	080040ad 	.word	0x080040ad
 8004810:	080040e9 	.word	0x080040e9
 8004814:	0800455d 	.word	0x0800455d
 8004818:	080042c1 	.word	0x080042c1
 800481c:	08004145 	.word	0x08004145
 8004820:	080041ad 	.word	0x080041ad
 8004824:	08004439 	.word	0x08004439
 8004828:	08004557 	.word	0x08004557
 800482c:	08004433 	.word	0x08004433
 8004830:	08004551 	.word	0x08004551
 8004834:	0800442d 	.word	0x0800442d
 8004838:	0800454b 	.word	0x0800454b
 800483c:	08004427 	.word	0x08004427
 8004840:	08004545 	.word	0x08004545
 8004844:	08004625 	.word	0x08004625
 8004848:	0800462b 	.word	0x0800462b
 800484c:	0800424d 	.word	0x0800424d
 8004850:	08003f5d 	.word	0x08003f5d
 8004854:	08034244 	.word	0x08034244

08004858 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8004858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 800485a:	3903      	subs	r1, #3
{
 800485c:	4604      	mov	r4, r0
 800485e:	4615      	mov	r5, r2
  switch (Cmd) 
 8004860:	290b      	cmp	r1, #11
 8004862:	d87e      	bhi.n	8004962 <LCD_X_DisplayDriver+0x10a>
 8004864:	e8df f001 	tbb	[pc, r1]
 8004868:	2e272006 	.word	0x2e272006
 800486c:	5e34484e 	.word	0x5e34484e
 8004870:	196e647d 	.word	0x196e647d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8004874:	231c      	movs	r3, #28
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <LCD_X_DisplayDriver+0x110>)
 8004878:	686d      	ldr	r5, [r5, #4]
 800487a:	4343      	muls	r3, r0
 800487c:	18d0      	adds	r0, r2, r3
 800487e:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004880:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8004882:	68c1      	ldr	r1, [r0, #12]
 8004884:	6940      	ldr	r0, [r0, #20]
 8004886:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004888:	fb00 3101 	mla	r1, r0, r1, r3
 800488c:	4837      	ldr	r0, [pc, #220]	; (800496c <LCD_X_DisplayDriver+0x114>)
 800488e:	f003 f98f 	bl	8007bb0 <HAL_LTDC_SetAddress>
 int r = 0;
 8004892:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 8004894:	4628      	mov	r0, r5
 8004896:	b003      	add	sp, #12
 8004898:	bd30      	pop	{r4, r5, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800489a:	231c      	movs	r3, #28
 800489c:	4a32      	ldr	r2, [pc, #200]	; (8004968 <LCD_X_DisplayDriver+0x110>)
 800489e:	fb03 2400 	mla	r4, r3, r0, r2
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	e7f4      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 80048a8:	4603      	mov	r3, r0
 80048aa:	2201      	movs	r2, #1
 80048ac:	4629      	mov	r1, r5
 80048ae:	482f      	ldr	r0, [pc, #188]	; (800496c <LCD_X_DisplayDriver+0x114>)
 80048b0:	f003 f87c 	bl	80079ac <HAL_LTDC_ConfigCLUT>
 80048b4:	e7ed      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    __HAL_LTDC_ENABLE(&hltdc);
 80048b6:	4b2d      	ldr	r3, [pc, #180]	; (800496c <LCD_X_DisplayDriver+0x114>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	6993      	ldr	r3, [r2, #24]
 80048bc:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 80048c0:	6193      	str	r3, [r2, #24]
 80048c2:	e7e6      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
 80048c4:	4b29      	ldr	r3, [pc, #164]	; (800496c <LCD_X_DisplayDriver+0x114>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	6993      	ldr	r3, [r2, #24]
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	e7f7      	b.n	80048c0 <LCD_X_DisplayDriver+0x68>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	01c4      	lsls	r4, r0, #7
 80048d4:	4a25      	ldr	r2, [pc, #148]	; (800496c <LCD_X_DisplayDriver+0x114>)
 80048d6:	2b01      	cmp	r3, #1
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 80048d8:	6813      	ldr	r3, [r2, #0]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 80048da:	6812      	ldr	r2, [r2, #0]
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 80048dc:	f103 0384 	add.w	r3, r3, #132	; 0x84
 80048e0:	5919      	ldr	r1, [r3, r4]
 80048e2:	bf0c      	ite	eq
 80048e4:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 80048e8:	f021 0101 	bicne.w	r1, r1, #1
 80048ec:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 80048ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6253      	str	r3, [r2, #36]	; 0x24
 80048f6:	e7cc      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 80048f8:	4603      	mov	r3, r0
 80048fa:	ca06      	ldmia	r2, {r1, r2}
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80048fc:	481b      	ldr	r0, [pc, #108]	; (800496c <LCD_X_DisplayDriver+0x114>)
 80048fe:	f003 f8e3 	bl	8007ac8 <HAL_LTDC_SetWindowPosition>
 8004902:	e7c6      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8004904:	aa01      	add	r2, sp, #4
 8004906:	4669      	mov	r1, sp
 8004908:	f011 fff6 	bl	80168f8 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <LCD_X_DisplayDriver+0x110>)
 800490e:	231c      	movs	r3, #28
 8004910:	fb03 2304 	mla	r3, r3, r4, r2
 8004914:	682a      	ldr	r2, [r5, #0]
 8004916:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8004918:	686a      	ldr	r2, [r5, #4]
 800491a:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 800491c:	4623      	mov	r3, r4
 800491e:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8004922:	e7eb      	b.n	80048fc <LCD_X_DisplayDriver+0xa4>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8004924:	4602      	mov	r2, r0
 8004926:	6829      	ldr	r1, [r5, #0]
 8004928:	4810      	ldr	r0, [pc, #64]	; (800496c <LCD_X_DisplayDriver+0x114>)
 800492a:	f003 f911 	bl	8007b50 <HAL_LTDC_SetAlpha>
 800492e:	e7b0      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8004930:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8004932:	4601      	mov	r1, r0
 8004934:	480d      	ldr	r0, [pc, #52]	; (800496c <LCD_X_DisplayDriver+0x114>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8004936:	b115      	cbz	r5, 800493e <LCD_X_DisplayDriver+0xe6>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8004938:	f003 f880 	bl	8007a3c <HAL_LTDC_EnableColorKeying>
 800493c:	e7a9      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 800493e:	f003 f89f 	bl	8007a80 <HAL_LTDC_DisableColorKeying>
 8004942:	e7a7      	b.n	8004894 <LCD_X_DisplayDriver+0x3c>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8004944:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8004946:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8004948:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800494c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8004950:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8004954:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8004956:	4602      	mov	r2, r0
 8004958:	4804      	ldr	r0, [pc, #16]	; (800496c <LCD_X_DisplayDriver+0x114>)
 800495a:	4319      	orrs	r1, r3
 800495c:	f003 f800 	bl	8007960 <HAL_LTDC_ConfigColorKeying>
 8004960:	e797      	b.n	8004892 <LCD_X_DisplayDriver+0x3a>
    r = -1;
 8004962:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 8004966:	e795      	b.n	8004894 <LCD_X_DisplayDriver+0x3c>
 8004968:	2003d1a8 	.word	0x2003d1a8
 800496c:	20045f04 	.word	0x20045f04

08004970 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 8004970:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 8004972:	f7ff f8a1 	bl	8003ab8 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8004976:	f7ff f8cf 	bl	8003b18 <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 800497a:	f7ff f845 	bl	8003a08 <MX_LCD_Init>
  MX_DMA2D_Init();
 800497e:	f7ff f917 	bl	8003bb0 <MX_DMA2D_Init>
  DMA2D_Init();
 
}
 8004982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DMA2D_Init();
 8004986:	f7ff be53 	b.w	8004630 <DMA2D_Init>

0800498a <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
  /* Initialize the GUI */
  GUI_Init();
 800498a:	f00f b907 	b.w	8013b9c <GUI_Init>
	...

08004990 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004990:	2904      	cmp	r1, #4
 8004992:	d00a      	beq.n	80049aa <USBH_UserProcess+0x1a>
 8004994:	2905      	cmp	r1, #5
 8004996:	d004      	beq.n	80049a2 <USBH_UserProcess+0x12>
 8004998:	2902      	cmp	r1, #2
 800499a:	d105      	bne.n	80049a8 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800499c:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <USBH_UserProcess+0x20>)
 800499e:	7019      	strb	r1, [r3, #0]
  break;
 80049a0:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80049a2:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <USBH_UserProcess+0x20>)
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	2201      	movs	r2, #1
 80049ac:	e7fa      	b.n	80049a4 <USBH_UserProcess+0x14>
 80049ae:	bf00      	nop
 80049b0:	2003d1e0 	.word	0x2003d1e0

080049b4 <MX_USB_HOST_Init>:
{
 80049b4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80049b6:	2201      	movs	r2, #1
 80049b8:	490b      	ldr	r1, [pc, #44]	; (80049e8 <MX_USB_HOST_Init+0x34>)
 80049ba:	480c      	ldr	r0, [pc, #48]	; (80049ec <MX_USB_HOST_Init+0x38>)
 80049bc:	f00a fe6a 	bl	800f694 <USBH_Init>
 80049c0:	b108      	cbz	r0, 80049c6 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 80049c2:	f7fd f8f1 	bl	8001ba8 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80049c6:	490a      	ldr	r1, [pc, #40]	; (80049f0 <MX_USB_HOST_Init+0x3c>)
 80049c8:	4808      	ldr	r0, [pc, #32]	; (80049ec <MX_USB_HOST_Init+0x38>)
 80049ca:	f00a fe97 	bl	800f6fc <USBH_RegisterClass>
 80049ce:	b108      	cbz	r0, 80049d4 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 80049d0:	f7fd f8ea 	bl	8001ba8 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80049d4:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_USB_HOST_Init+0x38>)
 80049d6:	f00a fec3 	bl	800f760 <USBH_Start>
 80049da:	b118      	cbz	r0, 80049e4 <MX_USB_HOST_Init+0x30>
}
 80049dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80049e0:	f7fd b8e2 	b.w	8001ba8 <Error_Handler>
 80049e4:	bd08      	pop	{r3, pc}
 80049e6:	bf00      	nop
 80049e8:	08004991 	.word	0x08004991
 80049ec:	20046020 	.word	0x20046020
 80049f0:	200000d8 	.word	0x200000d8

080049f4 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 80049f4:	6803      	ldr	r3, [r0, #0]
 80049f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80049fa:	b530      	push	{r4, r5, lr}
 80049fc:	b089      	sub	sp, #36	; 0x24
  if(hcdHandle->Instance==USB_OTG_FS)
 80049fe:	d132      	bne.n	8004a66 <HAL_HCD_MspInit+0x72>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a00:	4c1a      	ldr	r4, [pc, #104]	; (8004a6c <HAL_HCD_MspInit+0x78>)
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a04:	a903      	add	r1, sp, #12
 8004a06:	481a      	ldr	r0, [pc, #104]	; (8004a70 <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004a1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a22:	2302      	movs	r3, #2
 8004a24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a26:	2303      	movs	r3, #3
 8004a28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f001 fa21 	bl	8005e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a32:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004a34:	2043      	movs	r0, #67	; 0x43
 8004a36:	462a      	mov	r2, r5
 8004a38:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8004a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	9b01      	ldr	r3, [sp, #4]
 8004a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a50:	6463      	str	r3, [r4, #68]	; 0x44
 8004a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004a5c:	f000 fe9a 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004a60:	2043      	movs	r0, #67	; 0x43
 8004a62:	f000 fedf 	bl	8005824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004a66:	b009      	add	sp, #36	; 0x24
 8004a68:	bd30      	pop	{r4, r5, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40020000 	.word	0x40020000

08004a74 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004a74:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a78:	f00b b817 	b.w	800faaa <USBH_LL_IncTimer>

08004a7c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8004a7c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a80:	f00b b829 	b.w	800fad6 <USBH_LL_Connect>

08004a84 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004a84:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a88:	f00b b842 	b.w	800fb10 <USBH_LL_Disconnect>

08004a8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8004a8c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a90:	f00b b862 	b.w	800fb58 <USBH_LL_NotifyURBChange>

08004a94 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004a94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004a98:	f00b b815 	b.w	800fac6 <USBH_LL_PortEnabled>

08004a9c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8004a9c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004aa0:	f00b b815 	b.w	800face <USBH_LL_PortDisabled>

08004aa4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004aa4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004aa6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 8004aaa:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d11c      	bne.n	8004aea <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004ab0:	480f      	ldr	r0, [pc, #60]	; (8004af0 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004ab6:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004ab8:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004aba:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 8004abc:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004ac0:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004ac2:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 8004ac4:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004ac8:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004aca:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004acc:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004ace:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004ad0:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004ad2:	f001 fc65 	bl	80063a0 <HAL_HCD_Init>
 8004ad6:	b108      	cbz	r0, 8004adc <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 8004ad8:	f7fd f866 	bl	8001ba8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004adc:	4804      	ldr	r0, [pc, #16]	; (8004af0 <USBH_LL_Init+0x4c>)
 8004ade:	f002 f861 	bl	8006ba4 <HAL_HCD_GetCurrentFrame>
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f00a ffdd 	bl	800faa4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004aea:	2000      	movs	r0, #0
 8004aec:	bd10      	pop	{r4, pc}
 8004aee:	bf00      	nop
 8004af0:	200463f8 	.word	0x200463f8

08004af4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004af4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004af6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004afa:	f002 f81d 	bl	8006b38 <HAL_HCD_Start>
 8004afe:	2803      	cmp	r0, #3
 8004b00:	bf9a      	itte	ls
 8004b02:	4b02      	ldrls	r3, [pc, #8]	; (8004b0c <USBH_LL_Start+0x18>)
 8004b04:	5c18      	ldrbls	r0, [r3, r0]
 8004b06:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b08:	bd08      	pop	{r3, pc}
 8004b0a:	bf00      	nop
 8004b0c:	0803424f 	.word	0x0803424f

08004b10 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004b10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8004b12:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b16:	f002 f825 	bl	8006b64 <HAL_HCD_Stop>
 8004b1a:	2803      	cmp	r0, #3
 8004b1c:	bf9a      	itte	ls
 8004b1e:	4b02      	ldrls	r3, [pc, #8]	; (8004b28 <USBH_LL_Stop+0x18>)
 8004b20:	5c18      	ldrbls	r0, [r3, r0]
 8004b22:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004b24:	bd08      	pop	{r3, pc}
 8004b26:	bf00      	nop
 8004b28:	0803424f 	.word	0x0803424f

08004b2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004b2c:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004b2e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b32:	f002 f83a 	bl	8006baa <HAL_HCD_GetCurrentSpeed>
 8004b36:	2802      	cmp	r0, #2
 8004b38:	bf9a      	itte	ls
 8004b3a:	4b02      	ldrls	r3, [pc, #8]	; (8004b44 <USBH_LL_GetSpeed+0x18>)
 8004b3c:	5c18      	ldrbls	r0, [r3, r0]
 8004b3e:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004b40:	bd08      	pop	{r3, pc}
 8004b42:	bf00      	nop
 8004b44:	0803424c 	.word	0x0803424c

08004b48 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004b48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004b4a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b4e:	f002 f81b 	bl	8006b88 <HAL_HCD_ResetPort>
 8004b52:	2803      	cmp	r0, #3
 8004b54:	bf9a      	itte	ls
 8004b56:	4b02      	ldrls	r3, [pc, #8]	; (8004b60 <USBH_LL_ResetPort+0x18>)
 8004b58:	5c18      	ldrbls	r0, [r3, r0]
 8004b5a:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b5c:	bd08      	pop	{r3, pc}
 8004b5e:	bf00      	nop
 8004b60:	0803424f 	.word	0x0803424f

08004b64 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004b64:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b68:	f002 b817 	b.w	8006b9a <HAL_HCD_HC_GetXferCount>

08004b6c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004b6e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004b72:	9402      	str	r4, [sp, #8]
 8004b74:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004b78:	9401      	str	r4, [sp, #4]
 8004b7a:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004b7e:	9400      	str	r4, [sp, #0]
 8004b80:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004b84:	f001 fbc0 	bl	8006308 <HAL_HCD_HC_Init>
 8004b88:	2803      	cmp	r0, #3
 8004b8a:	bf96      	itet	ls
 8004b8c:	4b02      	ldrls	r3, [pc, #8]	; (8004b98 <USBH_LL_OpenPipe+0x2c>)
 8004b8e:	2002      	movhi	r0, #2
 8004b90:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004b92:	b004      	add	sp, #16
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	bf00      	nop
 8004b98:	0803424f 	.word	0x0803424f

08004b9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004b9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004b9e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004ba2:	f001 fbea 	bl	800637a <HAL_HCD_HC_Halt>
 8004ba6:	2803      	cmp	r0, #3
 8004ba8:	bf9a      	itte	ls
 8004baa:	4b02      	ldrls	r3, [pc, #8]	; (8004bb4 <USBH_LL_ClosePipe+0x18>)
 8004bac:	5c18      	ldrbls	r0, [r3, r0]
 8004bae:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004bb0:	bd08      	pop	{r3, pc}
 8004bb2:	bf00      	nop
 8004bb4:	0803424f 	.word	0x0803424f

08004bb8 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004bba:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004bbe:	9403      	str	r4, [sp, #12]
 8004bc0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004bc4:	9402      	str	r4, [sp, #8]
 8004bc6:	9c07      	ldr	r4, [sp, #28]
 8004bc8:	9401      	str	r4, [sp, #4]
 8004bca:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004bce:	9400      	str	r4, [sp, #0]
 8004bd0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004bd4:	f001 fc38 	bl	8006448 <HAL_HCD_HC_SubmitRequest>
 8004bd8:	2803      	cmp	r0, #3
 8004bda:	bf96      	itet	ls
 8004bdc:	4b02      	ldrls	r3, [pc, #8]	; (8004be8 <USBH_LL_SubmitURB+0x30>)
 8004bde:	2002      	movhi	r0, #2
 8004be0:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004be2:	b004      	add	sp, #16
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop
 8004be8:	0803424f 	.word	0x0803424f

08004bec <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004bec:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004bf0:	f001 bfcd 	b.w	8006b8e <HAL_HCD_HC_GetURBState>

08004bf4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004bf4:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004bf6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8004bfe:	4608      	mov	r0, r1
 8004c00:	f000 f816 	bl	8004c30 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004c04:	20c8      	movs	r0, #200	; 0xc8
 8004c06:	f000 fb9d 	bl	8005344 <HAL_Delay>
  return USBH_OK;
}
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	bd08      	pop	{r3, pc}

08004c0e <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8004c0e:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 8004c10:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
  if(pHandle->hc[pipe].ep_is_in)
 8004c14:	fb03 0101 	mla	r1, r3, r1, r0
 8004c18:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004c1c:	b11b      	cbz	r3, 8004c26 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004c1e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8004c22:	2000      	movs	r0, #0
 8004c24:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8004c26:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8004c2a:	e7fa      	b.n	8004c22 <USBH_LL_SetToggle+0x14>

08004c2c <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004c2c:	f000 bb8a 	b.w	8005344 <HAL_Delay>

08004c30 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8004c30:	fab0 f280 	clz	r2, r0
 8004c34:	2120      	movs	r1, #32
 8004c36:	4802      	ldr	r0, [pc, #8]	; (8004c40 <MX_DriverVbusFS+0x10>)
 8004c38:	0952      	lsrs	r2, r2, #5
 8004c3a:	f001 bb4b 	b.w	80062d4 <HAL_GPIO_WritePin>
 8004c3e:	bf00      	nop
 8004c40:	40020c00 	.word	0x40020c00

08004c44 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8004c44:	2000      	movs	r0, #0
 8004c46:	4770      	bx	lr

08004c48 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004c48:	4770      	bx	lr
	...

08004c4c <ft5336_ReadID>:
{
 8004c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004c4e:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004c50:	4c0f      	ldr	r4, [pc, #60]	; (8004c90 <ft5336_ReadID+0x44>)
{
 8004c52:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8004c54:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004c58:	7823      	ldrb	r3, [r4, #0]
 8004c5a:	b91b      	cbnz	r3, 8004c64 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8004c5c:	f000 f9e8 	bl	8005030 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004c60:	2301      	movs	r3, #1
 8004c62:	7023      	strb	r3, [r4, #0]
{
 8004c64:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004c66:	b2ed      	uxtb	r5, r5
 8004c68:	3c01      	subs	r4, #1
 8004c6a:	21a8      	movs	r1, #168	; 0xa8
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 f9f5 	bl	800505c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004c72:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004c76:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c7e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004c80:	d103      	bne.n	8004c8a <ft5336_ReadID+0x3e>
  return (ucReadId);
 8004c82:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004c86:	b003      	add	sp, #12
 8004c88:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004c8a:	2b51      	cmp	r3, #81	; 0x51
 8004c8c:	d1ec      	bne.n	8004c68 <ft5336_ReadID+0x1c>
 8004c8e:	e7f8      	b.n	8004c82 <ft5336_ReadID+0x36>
 8004c90:	2003d1e4 	.word	0x2003d1e4

08004c94 <ft5336_TS_DetectTouch>:
{
 8004c94:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004c96:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004c98:	2102      	movs	r1, #2
 8004c9a:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004c9c:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004ca0:	f000 f9dc 	bl	800505c <TS_IO_Read>
 8004ca4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d901      	bls.n	8004cc0 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004cbc:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004cc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004cc6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004cca:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004ccc:	2200      	movs	r2, #0
 8004cce:	709a      	strb	r2, [r3, #2]
}
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd10      	pop	{r4, pc}
 8004cd4:	2003d1e4 	.word	0x2003d1e4

08004cd8 <ft5336_TS_GetXY>:
{
 8004cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004cdc:	4d29      	ldr	r5, [pc, #164]	; (8004d84 <ft5336_TS_GetXY+0xac>)
{
 8004cde:	4617      	mov	r7, r2
  volatile uint8_t ucReadData = 0;
 8004ce0:	2400      	movs	r4, #0
{
 8004ce2:	4689      	mov	r9, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004ce4:	78ab      	ldrb	r3, [r5, #2]
 8004ce6:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004ce8:	f88d 4007 	strb.w	r4, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d941      	bls.n	8004d74 <ft5336_TS_GetXY+0x9c>
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d842      	bhi.n	8004d7a <ft5336_TS_GetXY+0xa2>
 8004cf4:	4a24      	ldr	r2, [pc, #144]	; (8004d88 <ft5336_TS_GetXY+0xb0>)
 8004cf6:	5cd1      	ldrb	r1, [r2, r3]
 8004cf8:	4a24      	ldr	r2, [pc, #144]	; (8004d8c <ft5336_TS_GetXY+0xb4>)
 8004cfa:	f812 b003 	ldrb.w	fp, [r2, r3]
 8004cfe:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <ft5336_TS_GetXY+0xb8>)
 8004d00:	f812 a003 	ldrb.w	sl, [r2, r3]
 8004d04:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <ft5336_TS_GetXY+0xbc>)
 8004d06:	5cd4      	ldrb	r4, [r2, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004d08:	fa5f f880 	uxtb.w	r8, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004d0c:	4e22      	ldr	r6, [pc, #136]	; (8004d98 <ft5336_TS_GetXY+0xc0>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f000 f9a4 	bl	800505c <TS_IO_Read>
 8004d14:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004d18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004d20:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004d22:	f000 f99b 	bl	800505c <TS_IO_Read>
 8004d26:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004d2a:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004d30:	4640      	mov	r0, r8
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004d32:	8832      	ldrh	r2, [r6, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d3a:	4313      	orrs	r3, r2
    *X = coord;
 8004d3c:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004d40:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004d42:	f000 f98b 	bl	800505c <TS_IO_Read>
 8004d46:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004d4a:	4621      	mov	r1, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004d50:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004d52:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004d54:	f000 f982 	bl	800505c <TS_IO_Read>
 8004d58:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d60:	8832      	ldrh	r2, [r6, #0]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 8004d6c:	803b      	strh	r3, [r7, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004d6e:	78ab      	ldrb	r3, [r5, #2]
 8004d70:	3301      	adds	r3, #1
 8004d72:	70ab      	strb	r3, [r5, #2]
}
 8004d74:	b003      	add	sp, #12
 8004d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004d7a:	46a2      	mov	sl, r4
 8004d7c:	46a3      	mov	fp, r4
 8004d7e:	4621      	mov	r1, r4
 8004d80:	e7c2      	b.n	8004d08 <ft5336_TS_GetXY+0x30>
 8004d82:	bf00      	nop
 8004d84:	2003d1e4 	.word	0x2003d1e4
 8004d88:	08034253 	.word	0x08034253
 8004d8c:	0803425d 	.word	0x0803425d
 8004d90:	08034267 	.word	0x08034267
 8004d94:	08034271 	.word	0x08034271
 8004d98:	2003d1e2 	.word	0x2003d1e2

08004d9c <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	21a4      	movs	r1, #164	; 0xa4
 8004da0:	b2c0      	uxtb	r0, r0
 8004da2:	f000 b94b 	b.w	800503c <TS_IO_Write>

08004da6 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004da6:	2200      	movs	r2, #0
 8004da8:	21a4      	movs	r1, #164	; 0xa4
 8004daa:	b2c0      	uxtb	r0, r0
 8004dac:	f000 b946 	b.w	800503c <TS_IO_Write>

08004db0 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004db0:	f7ff bff9 	b.w	8004da6 <ft5336_TS_DisableIT>

08004db4 <ft5336_Reset>:
 8004db4:	4770      	bx	lr
	...

08004db8 <ft5336_Init>:
{
 8004db8:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8004dba:	4c05      	ldr	r4, [pc, #20]	; (8004dd0 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8004dbc:	20c8      	movs	r0, #200	; 0xc8
 8004dbe:	f000 f961 	bl	8005084 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004dc2:	7823      	ldrb	r3, [r4, #0]
 8004dc4:	b91b      	cbnz	r3, 8004dce <ft5336_Init+0x16>
    TS_IO_Init();
 8004dc6:	f000 f933 	bl	8005030 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	7023      	strb	r3, [r4, #0]
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	2003d1e4 	.word	0x2003d1e4

08004dd4 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8004dd4:	2300      	movs	r3, #0
{
 8004dd6:	b513      	push	{r0, r1, r4, lr}
 8004dd8:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004dda:	b2c0      	uxtb	r0, r0
 8004ddc:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8004dde:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004de2:	f000 f93b 	bl	800505c <TS_IO_Read>
 8004de6:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8004dea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004dee:	6023      	str	r3, [r4, #0]
}
 8004df0:	b002      	add	sp, #8
 8004df2:	bd10      	pop	{r4, pc}

08004df4 <ft5336_TS_GetTouchInfo>:
{
 8004df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004df8:	461f      	mov	r7, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 8004dfc:	2400      	movs	r4, #0
{
 8004dfe:	4690      	mov	r8, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004e00:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8004e02:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004e06:	428b      	cmp	r3, r1
 8004e08:	d92d      	bls.n	8004e66 <ft5336_TS_GetTouchInfo+0x72>
 8004e0a:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004e0c:	b2c5      	uxtb	r5, r0
 8004e0e:	bf96      	itet	ls
 8004e10:	4a17      	ldrls	r2, [pc, #92]	; (8004e70 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004e12:	4623      	movhi	r3, r4
 8004e14:	4b17      	ldrls	r3, [pc, #92]	; (8004e74 <ft5336_TS_GetTouchInfo+0x80>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004e16:	4628      	mov	r0, r5
 8004e18:	bf97      	itett	ls
 8004e1a:	5c56      	ldrbls	r6, [r2, r1]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004e1c:	4626      	movhi	r6, r4
 8004e1e:	5c5b      	ldrbls	r3, [r3, r1]
 8004e20:	4a15      	ldrls	r2, [pc, #84]	; (8004e78 <ft5336_TS_GetTouchInfo+0x84>)
 8004e22:	bf98      	it	ls
 8004e24:	5c54      	ldrbls	r4, [r2, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004e26:	4619      	mov	r1, r3
 8004e28:	f000 f918 	bl	800505c <TS_IO_Read>
 8004e2c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004e30:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004e34:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004e36:	9b08      	ldr	r3, [sp, #32]
 8004e38:	0989      	lsrs	r1, r1, #6
 8004e3a:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	f000 f90d 	bl	800505c <TS_IO_Read>
 8004e42:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004e4e:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004e52:	f000 f903 	bl	800505c <TS_IO_Read>
 8004e56:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8004e5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004e5e:	0912      	lsrs	r2, r2, #4
 8004e60:	f002 0204 	and.w	r2, r2, #4
 8004e64:	603a      	str	r2, [r7, #0]
}
 8004e66:	b002      	add	sp, #8
 8004e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6c:	2003d1e4 	.word	0x2003d1e4
 8004e70:	08034285 	.word	0x08034285
 8004e74:	0803427b 	.word	0x0803427b
 8004e78:	0803428f 	.word	0x0803428f

08004e7c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004e82:	f002 fa7b 	bl	800737c <HAL_I2C_GetState>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d154      	bne.n	8004f34 <I2Cx_Init+0xb8>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004e8a:	4b4a      	ldr	r3, [pc, #296]	; (8004fb4 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	4c4a      	ldr	r4, [pc, #296]	; (8004fb8 <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004e90:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress1      = 0;
 8004e92:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004e94:	612e      	str	r6, [r5, #16]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004e96:	bf0c      	ite	eq
 8004e98:	4a48      	ldreq	r2, [pc, #288]	; (8004fbc <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004e9a:	4a49      	ldrne	r2, [pc, #292]	; (8004fc0 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004e9c:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress2      = 0;
 8004e9e:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004ea0:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ea2:	4a48      	ldr	r2, [pc, #288]	; (8004fc4 <I2Cx_Init+0x148>)
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004ea4:	61ee      	str	r6, [r5, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ea6:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ea8:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004eac:	622e      	str	r6, [r5, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004eae:	60ea      	str	r2, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004eb2:	d141      	bne.n	8004f38 <I2Cx_Init+0xbc>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004eb8:	a905      	add	r1, sp, #20
 8004eba:	4843      	ldr	r0, [pc, #268]	; (8004fc8 <I2Cx_Init+0x14c>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ebc:	6323      	str	r3, [r4, #48]	; 0x30
 8004ebe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004ec0:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004ece:	2312      	movs	r3, #18
 8004ed0:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004eda:	f000 ffcb 	bl	8005e74 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004ede:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004ee2:	a905      	add	r1, sp, #20
 8004ee4:	4838      	ldr	r0, [pc, #224]	; (8004fc8 <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004ee6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004ee8:	f000 ffc4 	bl	8005e74 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004eec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004eee:	4632      	mov	r2, r6
 8004ef0:	210f      	movs	r1, #15
 8004ef2:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ef8:	6423      	str	r3, [r4, #64]	; 0x40
 8004efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f00:	9302      	str	r3, [sp, #8]
 8004f02:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004f04:	6a23      	ldr	r3, [r4, #32]
 8004f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f0a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004f0c:	6a23      	ldr	r3, [r4, #32]
 8004f0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f12:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004f14:	f000 fc3e 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004f18:	2048      	movs	r0, #72	; 0x48
 8004f1a:	f000 fc83 	bl	8005824 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004f1e:	2049      	movs	r0, #73	; 0x49
 8004f20:	4632      	mov	r2, r6
 8004f22:	210f      	movs	r1, #15
 8004f24:	f000 fc36 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004f28:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004f2a:	f000 fc7b 	bl	8005824 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f001 ffbc 	bl	8006eac <HAL_I2C_Init>
  }
}
 8004f34:	b00a      	add	sp, #40	; 0x28
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f38:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f3c:	a905      	add	r1, sp, #20
 8004f3e:	4823      	ldr	r0, [pc, #140]	; (8004fcc <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f40:	6323      	str	r3, [r4, #48]	; 0x30
 8004f42:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004f44:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f52:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f54:	2312      	movs	r3, #18
 8004f56:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f60:	f000 ff88 	bl	8005e74 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004f64:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f68:	a905      	add	r1, sp, #20
 8004f6a:	4818      	ldr	r0, [pc, #96]	; (8004fcc <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004f6c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f6e:	f000 ff81 	bl	8005e74 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004f74:	4632      	mov	r2, r6
 8004f76:	210f      	movs	r1, #15
 8004f78:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f7e:	6423      	str	r3, [r4, #64]	; 0x40
 8004f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f86:	9304      	str	r3, [sp, #16]
 8004f88:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004f8a:	6a23      	ldr	r3, [r4, #32]
 8004f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f90:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004f92:	6a23      	ldr	r3, [r4, #32]
 8004f94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f98:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004f9a:	f000 fbfb 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004f9e:	201f      	movs	r0, #31
 8004fa0:	f000 fc40 	bl	8005824 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004fa4:	2020      	movs	r0, #32
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	210f      	movs	r1, #15
 8004faa:	f000 fbf3 	bl	8005794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004fae:	2020      	movs	r0, #32
 8004fb0:	e7bb      	b.n	8004f2a <I2Cx_Init+0xae>
 8004fb2:	bf00      	nop
 8004fb4:	2003d1e8 	.word	0x2003d1e8
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40005c00 	.word	0x40005c00
 8004fc0:	40005400 	.word	0x40005400
 8004fc4:	40912732 	.word	0x40912732
 8004fc8:	40021c00 	.word	0x40021c00
 8004fcc:	40020400 	.word	0x40020400

08004fd0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004fd0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004fd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004fda:	9402      	str	r4, [sp, #8]
 8004fdc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8004fe0:	9401      	str	r4, [sp, #4]
 8004fe2:	9c08      	ldr	r4, [sp, #32]
 8004fe4:	9400      	str	r4, [sp, #0]
 8004fe6:	f002 f901 	bl	80071ec <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 8004fea:	4604      	mov	r4, r0
 8004fec:	b128      	cbz	r0, 8004ffa <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f002 f806 	bl	8007000 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7ff ff41 	bl	8004e7c <I2Cx_Init>
}
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	b005      	add	sp, #20
 8004ffe:	bd30      	pop	{r4, r5, pc}

08005000 <I2Cx_WriteMultiple>:
{
 8005000:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005002:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8005006:	b085      	sub	sp, #20
 8005008:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800500a:	9402      	str	r4, [sp, #8]
 800500c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8005010:	9401      	str	r4, [sp, #4]
 8005012:	9c08      	ldr	r4, [sp, #32]
 8005014:	9400      	str	r4, [sp, #0]
 8005016:	f002 f827 	bl	8007068 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800501a:	4604      	mov	r4, r0
 800501c:	b128      	cbz	r0, 800502a <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 800501e:	4628      	mov	r0, r5
 8005020:	f001 ffee 	bl	8007000 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff ff29 	bl	8004e7c <I2Cx_Init>
}
 800502a:	4620      	mov	r0, r4
 800502c:	b005      	add	sp, #20
 800502e:	bd30      	pop	{r4, r5, pc}

08005030 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <TS_IO_Init+0x8>)
 8005032:	f7ff bf23 	b.w	8004e7c <I2Cx_Init>
 8005036:	bf00      	nop
 8005038:	2003d1e8 	.word	0x2003d1e8

0800503c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800503c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800503e:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005040:	2301      	movs	r3, #1
{
 8005042:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005046:	460a      	mov	r2, r1
 8005048:	4601      	mov	r1, r0
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	9400      	str	r4, [sp, #0]
 800504e:	4802      	ldr	r0, [pc, #8]	; (8005058 <TS_IO_Write+0x1c>)
 8005050:	f7ff ffd6 	bl	8005000 <I2Cx_WriteMultiple>
}
 8005054:	b004      	add	sp, #16
 8005056:	bd10      	pop	{r4, pc}
 8005058:	2003d1e8 	.word	0x2003d1e8

0800505c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800505c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	aa04      	add	r2, sp, #16
 8005062:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005066:	2301      	movs	r3, #1
 8005068:	e88d 000c 	stmia.w	sp, {r2, r3}
 800506c:	460a      	mov	r2, r1
 800506e:	4601      	mov	r1, r0
 8005070:	4803      	ldr	r0, [pc, #12]	; (8005080 <TS_IO_Read+0x24>)
 8005072:	f7ff ffad 	bl	8004fd0 <I2Cx_ReadMultiple>

  return read_value;
}
 8005076:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800507a:	b005      	add	sp, #20
 800507c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005080:	2003d1e8 	.word	0x2003d1e8

08005084 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005084:	f000 b95e 	b.w	8005344 <HAL_Delay>

08005088 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <BSP_TS_Init+0x38>)
{
 800508a:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
 800508c:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800508e:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005092:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 8005094:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	2070      	movs	r0, #112	; 0x70
 800509e:	4798      	blx	r3
 80050a0:	2851      	cmp	r0, #81	; 0x51
 80050a2:	d10b      	bne.n	80050bc <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 80050a6:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 80050a8:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
 80050aa:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <BSP_TS_Init+0x48>)
 80050ae:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80050b0:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <BSP_TS_Init+0x4c>)
 80050b2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80050b4:	68e3      	ldr	r3, [r4, #12]
 80050b6:	4798      	blx	r3
  uint8_t status = TS_OK;
 80050b8:	2000      	movs	r0, #0
 80050ba:	bd10      	pop	{r4, pc}
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80050bc:	2003      	movs	r0, #3
  }

  return status;
}
 80050be:	bd10      	pop	{r4, pc}
 80050c0:	2003d266 	.word	0x2003d266
 80050c4:	2003d268 	.word	0x2003d268
 80050c8:	200000a4 	.word	0x200000a4
 80050cc:	2003d260 	.word	0x2003d260
 80050d0:	2003d234 	.word	0x2003d234
 80050d4:	2003d264 	.word	0x2003d264

080050d8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80050d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 80050dc:	a902      	add	r1, sp, #8
 80050de:	2400      	movs	r4, #0
{
 80050e0:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80050e2:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 80050e4:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80050e8:	f7ff fe74 	bl	8004dd4 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80050ec:	9801      	ldr	r0, [sp, #4]
 80050ee:	2818      	cmp	r0, #24
 80050f0:	d017      	beq.n	8005122 <BSP_TS_Get_GestureId+0x4a>
 80050f2:	d809      	bhi.n	8005108 <BSP_TS_Get_GestureId+0x30>
 80050f4:	2810      	cmp	r0, #16
 80050f6:	d00f      	beq.n	8005118 <BSP_TS_Get_GestureId+0x40>
 80050f8:	2814      	cmp	r0, #20
 80050fa:	d010      	beq.n	800511e <BSP_TS_Get_GestureId+0x46>
 80050fc:	b9b8      	cbnz	r0, 800512e <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 80050fe:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005100:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8005102:	4620      	mov	r0, r4
 8005104:	b003      	add	sp, #12
 8005106:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 8005108:	2840      	cmp	r0, #64	; 0x40
 800510a:	d00c      	beq.n	8005126 <BSP_TS_Get_GestureId+0x4e>
 800510c:	2849      	cmp	r0, #73	; 0x49
 800510e:	d00c      	beq.n	800512a <BSP_TS_Get_GestureId+0x52>
 8005110:	281c      	cmp	r0, #28
 8005112:	d10c      	bne.n	800512e <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005114:	2304      	movs	r3, #4
 8005116:	e000      	b.n	800511a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005118:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800511a:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 800511c:	e7f1      	b.n	8005102 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800511e:	2302      	movs	r3, #2
 8005120:	e7fb      	b.n	800511a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005122:	2303      	movs	r3, #3
 8005124:	e7f9      	b.n	800511a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005126:	2305      	movs	r3, #5
 8005128:	e7f7      	b.n	800511a <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800512a:	2306      	movs	r3, #6
 800512c:	e7f5      	b.n	800511a <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 800512e:	2401      	movs	r4, #1
 8005130:	e7e7      	b.n	8005102 <BSP_TS_Get_GestureId+0x2a>
 8005132:	bf00      	nop
 8005134:	2003d234 	.word	0x2003d234

08005138 <BSP_TS_GetState>:
{
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800513c:	4d53      	ldr	r5, [pc, #332]	; (800528c <BSP_TS_GetState+0x154>)
{
 800513e:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 8005140:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005142:	4e53      	ldr	r6, [pc, #332]	; (8005290 <BSP_TS_GetState+0x158>)
 8005144:	682b      	ldr	r3, [r5, #0]
{
 8005146:	4681      	mov	r9, r0
  uint32_t weight = 0;
 8005148:	9405      	str	r4, [sp, #20]
 800514a:	46aa      	mov	sl, r5
  uint32_t area = 0;
 800514c:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 800514e:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	7830      	ldrb	r0, [r6, #0]
 8005154:	4798      	blx	r3
 8005156:	9603      	str	r6, [sp, #12]
 8005158:	f889 0000 	strb.w	r0, [r9]
  if(TS_State->touchDetected)
 800515c:	b178      	cbz	r0, 800517e <BSP_TS_GetState+0x46>
 800515e:	f109 0516 	add.w	r5, r9, #22
 8005162:	f109 0602 	add.w	r6, r9, #2
 8005166:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800516a:	af11      	add	r7, sp, #68	; 0x44
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800516c:	f8df b130 	ldr.w	fp, [pc, #304]	; 80052a0 <BSP_TS_GetState+0x168>
    for(index=0; index < TS_State->touchDetected; index++)
 8005170:	f899 3000 	ldrb.w	r3, [r9]
 8005174:	429c      	cmp	r4, r3
 8005176:	d305      	bcc.n	8005184 <BSP_TS_GetState+0x4c>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005178:	4648      	mov	r0, r9
 800517a:	f7ff ffad 	bl	80050d8 <BSP_TS_Get_GestureId>
}
 800517e:	b015      	add	sp, #84	; 0x54
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005184:	f8da 3000 	ldr.w	r3, [sl]
 8005188:	463a      	mov	r2, r7
 800518a:	9803      	ldr	r0, [sp, #12]
 800518c:	4641      	mov	r1, r8
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	7800      	ldrb	r0, [r0, #0]
 8005192:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8005194:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <BSP_TS_GetState+0x15c>)
 8005196:	a90b      	add	r1, sp, #44	; 0x2c
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005198:	f8df c108 	ldr.w	ip, [pc, #264]	; 80052a4 <BSP_TS_GetState+0x16c>
      if(tsOrientation == TS_SWAP_NONE)
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	ab08      	add	r3, sp, #32
 80051a0:	2a01      	cmp	r2, #1
        x[index] = brute_x[index];
 80051a2:	bf01      	itttt	eq
 80051a4:	f8b8 0000 	ldrheq.w	r0, [r8]
 80051a8:	f823 0014 	strheq.w	r0, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 80051ac:	8838      	ldrheq	r0, [r7, #0]
 80051ae:	f821 0014 	strheq.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 80051b2:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
 80051b4:	bf42      	ittt	mi
 80051b6:	f8b8 0000 	ldrhmi.w	r0, [r8]
 80051ba:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 80051be:	f823 0014 	strhmi.w	r0, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 80051c2:	0750      	lsls	r0, r2, #29
        y[index] = 4096 - brute_y[index];
 80051c4:	bf42      	ittt	mi
 80051c6:	8838      	ldrhmi	r0, [r7, #0]
 80051c8:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 80051cc:	f821 0014 	strhmi.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 80051d0:	0712      	lsls	r2, r2, #28
        y[index] = brute_x[index];
 80051d2:	bf42      	ittt	mi
 80051d4:	f8b8 2000 	ldrhmi.w	r2, [r8]
 80051d8:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 80051dc:	883a      	ldrhmi	r2, [r7, #0]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80051de:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 80051e2:	bf48      	it	mi
 80051e4:	f823 2014 	strhmi.w	r2, [r3, r4, lsl #1]
 80051e8:	00a2      	lsls	r2, r4, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80051ea:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 80051ee:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80051f2:	f852 000c 	ldr.w	r0, [r2, ip]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80051f6:	459e      	cmp	lr, r3
 80051f8:	bf8c      	ite	hi
 80051fa:	ebae 0303 	subhi.w	r3, lr, r3
 80051fe:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005202:	4281      	cmp	r1, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005204:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005206:	bf8c      	ite	hi
 8005208:	1a08      	subhi	r0, r1, r0
 800520a:	1a40      	subls	r0, r0, r1
 800520c:	b280      	uxth	r0, r0
      if ((x_diff + y_diff) > 5)
 800520e:	4418      	add	r0, r3
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005210:	9b03      	ldr	r3, [sp, #12]
      if ((x_diff + y_diff) > 5)
 8005212:	2805      	cmp	r0, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005214:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
 8005216:	bfc4      	itt	gt
 8005218:	f84b e002 	strgt.w	lr, [fp, r2]
        _y[index] = y[index];
 800521c:	f84c 1002 	strgt.w	r1, [ip, r2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005220:	2870      	cmp	r0, #112	; 0x70
 8005222:	d115      	bne.n	8005250 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
 8005224:	f8a6 e000 	strh.w	lr, [r6]
        TS_State->touchY[index] = y[index];
 8005228:	8171      	strh	r1, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800522a:	ab07      	add	r3, sp, #28
 800522c:	aa05      	add	r2, sp, #20
 800522e:	4621      	mov	r1, r4
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	ab06      	add	r3, sp, #24
 8005234:	f7ff fdde 	bl	8004df4 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	f805 3b01 	strb.w	r3, [r5], #1
      TS_State->touchArea[index]   = area;
 800523e:	9b06      	ldr	r3, [sp, #24]
 8005240:	726b      	strb	r3, [r5, #9]
      switch(event)
 8005242:	9b07      	ldr	r3, [sp, #28]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d814      	bhi.n	8005272 <BSP_TS_GetState+0x13a>
 8005248:	e8df f003 	tbb	[pc, r3]
 800524c:	1d1b1911 	.word	0x1d1b1911
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <BSP_TS_GetState+0x160>)
 8005252:	8819      	ldrh	r1, [r3, #0]
 8005254:	f85b 3002 	ldr.w	r3, [fp, r2]
 8005258:	434b      	muls	r3, r1
 800525a:	0b1b      	lsrs	r3, r3, #12
 800525c:	8033      	strh	r3, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <BSP_TS_GetState+0x164>)
 8005260:	8819      	ldrh	r1, [r3, #0]
 8005262:	f85c 3002 	ldr.w	r3, [ip, r2]
 8005266:	434b      	muls	r3, r1
 8005268:	0b1b      	lsrs	r3, r3, #12
 800526a:	8173      	strh	r3, [r6, #10]
 800526c:	e7dd      	b.n	800522a <BSP_TS_GetState+0xf2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800526e:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005270:	712b      	strb	r3, [r5, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8005272:	3401      	adds	r4, #1
 8005274:	3602      	adds	r6, #2
 8005276:	f108 0802 	add.w	r8, r8, #2
 800527a:	3702      	adds	r7, #2
 800527c:	e778      	b.n	8005170 <BSP_TS_GetState+0x38>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800527e:	2302      	movs	r3, #2
 8005280:	e7f6      	b.n	8005270 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005282:	2303      	movs	r3, #3
 8005284:	e7f4      	b.n	8005270 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005286:	2300      	movs	r3, #0
 8005288:	e7f2      	b.n	8005270 <BSP_TS_GetState+0x138>
 800528a:	bf00      	nop
 800528c:	2003d260 	.word	0x2003d260
 8005290:	2003d234 	.word	0x2003d234
 8005294:	2003d264 	.word	0x2003d264
 8005298:	2003d266 	.word	0x2003d266
 800529c:	2003d268 	.word	0x2003d268
 80052a0:	2003d238 	.word	0x2003d238
 80052a4:	2003d24c 	.word	0x2003d24c

080052a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052a8:	490f      	ldr	r1, [pc, #60]	; (80052e8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80052aa:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052ac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80052b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <SystemInit+0x44>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80052c2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80052ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80052d0:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <SystemInit+0x48>)
 80052d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80052dc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e2:	608b      	str	r3, [r1, #8]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000ed00 	.word	0xe000ed00
 80052ec:	40023800 	.word	0x40023800
 80052f0:	24003010 	.word	0x24003010

080052f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052f4:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052f8:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005300:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800530a:	f000 fa25 	bl	8005758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800530e:	2000      	movs	r0, #0
 8005310:	f7fc ff24 	bl	800215c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005314:	f7fc ff02 	bl	800211c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8005318:	2000      	movs	r0, #0
 800531a:	bd08      	pop	{r3, pc}
 800531c:	40023c00 	.word	0x40023c00

08005320 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005320:	4a03      	ldr	r2, [pc, #12]	; (8005330 <HAL_IncTick+0x10>)
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <HAL_IncTick+0x14>)
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	440b      	add	r3, r1
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200466bc 	.word	0x200466bc
 8005334:	200000d0 	.word	0x200000d0

08005338 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <HAL_GetTick+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	200466bc 	.word	0x200466bc

08005344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005348:	f7ff fff6 	bl	8005338 <HAL_GetTick>
 800534c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800534e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005350:	bf1e      	ittt	ne
 8005352:	4b04      	ldrne	r3, [pc, #16]	; (8005364 <HAL_Delay+0x20>)
 8005354:	781b      	ldrbne	r3, [r3, #0]
 8005356:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005358:	f7ff ffee 	bl	8005338 <HAL_GetTick>
 800535c:	1b40      	subs	r0, r0, r5
 800535e:	4284      	cmp	r4, r0
 8005360:	d8fa      	bhi.n	8005358 <HAL_Delay+0x14>
  {
  }
}
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	200000d0 	.word	0x200000d0

08005368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005368:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800536a:	4604      	mov	r4, r0
 800536c:	2800      	cmp	r0, #0
 800536e:	f000 812b 	beq.w	80055c8 <HAL_ADC_Init+0x260>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005372:	6803      	ldr	r3, [r0, #0]
 8005374:	4a95      	ldr	r2, [pc, #596]	; (80055cc <HAL_ADC_Init+0x264>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00c      	beq.n	8005394 <HAL_ADC_Init+0x2c>
 800537a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800537e:	4293      	cmp	r3, r2
 8005380:	d008      	beq.n	8005394 <HAL_ADC_Init+0x2c>
 8005382:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_ADC_Init+0x2c>
 800538a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800538e:	4890      	ldr	r0, [pc, #576]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005390:	f7fc fc0b 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800539a:	d004      	beq.n	80053a6 <HAL_ADC_Init+0x3e>
 800539c:	f240 114d 	movw	r1, #333	; 0x14d
 80053a0:	488b      	ldr	r0, [pc, #556]	; (80055d0 <HAL_ADC_Init+0x268>)
 80053a2:	f7fc fc02 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80053ac:	d004      	beq.n	80053b8 <HAL_ADC_Init+0x50>
 80053ae:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80053b2:	4887      	ldr	r0, [pc, #540]	; (80055d0 <HAL_ADC_Init+0x268>)
 80053b4:	f7fc fbf9 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d904      	bls.n	80053c8 <HAL_ADC_Init+0x60>
 80053be:	f240 114f 	movw	r1, #335	; 0x14f
 80053c2:	4883      	ldr	r0, [pc, #524]	; (80055d0 <HAL_ADC_Init+0x268>)
 80053c4:	f7fc fbf1 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80053c8:	69a3      	ldr	r3, [r4, #24]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d904      	bls.n	80053d8 <HAL_ADC_Init+0x70>
 80053ce:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80053d2:	487f      	ldr	r0, [pc, #508]	; (80055d0 <HAL_ADC_Init+0x268>)
 80053d4:	f7fc fbe9 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80053d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053da:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 80053de:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80053e2:	d011      	beq.n	8005408 <HAL_ADC_Init+0xa0>
 80053e4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80053e8:	d00e      	beq.n	8005408 <HAL_ADC_Init+0xa0>
 80053ea:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80053ee:	d00b      	beq.n	8005408 <HAL_ADC_Init+0xa0>
 80053f0:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 80053f4:	d008      	beq.n	8005408 <HAL_ADC_Init+0xa0>
 80053f6:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d904      	bls.n	8005408 <HAL_ADC_Init+0xa0>
 80053fe:	f240 1151 	movw	r1, #337	; 0x151
 8005402:	4873      	ldr	r0, [pc, #460]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005404:	f7fc fbd1 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8005408:	68e3      	ldr	r3, [r4, #12]
 800540a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800540e:	d004      	beq.n	800541a <HAL_ADC_Init+0xb2>
 8005410:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005414:	486e      	ldr	r0, [pc, #440]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005416:	f7fc fbc8 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800541a:	69e3      	ldr	r3, [r4, #28]
 800541c:	3b01      	subs	r3, #1
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d904      	bls.n	800542c <HAL_ADC_Init+0xc4>
 8005422:	f240 1153 	movw	r1, #339	; 0x153
 8005426:	486a      	ldr	r0, [pc, #424]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005428:	f7fc fbbf 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800542c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005430:	2b01      	cmp	r3, #1
 8005432:	d904      	bls.n	800543e <HAL_ADC_Init+0xd6>
 8005434:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8005438:	4865      	ldr	r0, [pc, #404]	; (80055d0 <HAL_ADC_Init+0x268>)
 800543a:	f7fc fbb6 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800543e:	6963      	ldr	r3, [r4, #20]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d904      	bls.n	800544e <HAL_ADC_Init+0xe6>
 8005444:	f240 1155 	movw	r1, #341	; 0x155
 8005448:	4861      	ldr	r0, [pc, #388]	; (80055d0 <HAL_ADC_Init+0x268>)
 800544a:	f7fc fbae 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800544e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d904      	bls.n	8005460 <HAL_ADC_Init+0xf8>
 8005456:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800545a:	485d      	ldr	r0, [pc, #372]	; (80055d0 <HAL_ADC_Init+0x268>)
 800545c:	f7fc fba5 	bl	8001baa <assert_failed>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005460:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005462:	4b5c      	ldr	r3, [pc, #368]	; (80055d4 <HAL_ADC_Init+0x26c>)
 8005464:	429a      	cmp	r2, r3
 8005466:	d008      	beq.n	800547a <HAL_ADC_Init+0x112>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8005468:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800546a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800546e:	d004      	beq.n	800547a <HAL_ADC_Init+0x112>
 8005470:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005474:	4856      	ldr	r0, [pc, #344]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005476:	f7fc fb98 	bl	8001baa <assert_failed>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800547a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800547c:	b92d      	cbnz	r5, 800548a <HAL_ADC_Init+0x122>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800547e:	4620      	mov	r0, r4
 8005480:	f7fb fe26 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005484:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005486:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800548a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800548c:	06db      	lsls	r3, r3, #27
 800548e:	f100 8099 	bmi.w	80055c4 <HAL_ADC_Init+0x25c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005494:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005498:	f023 0302 	bic.w	r3, r3, #2
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80054a2:	4b4d      	ldr	r3, [pc, #308]	; (80055d8 <HAL_ADC_Init+0x270>)
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80054aa:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	6861      	ldr	r1, [r4, #4]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80054b4:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054b6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054be:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054c6:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80054c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054d6:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054e6:	493b      	ldr	r1, [pc, #236]	; (80055d4 <HAL_ADC_Init+0x26c>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054e8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80054ec:	428a      	cmp	r2, r1
 80054ee:	d05d      	beq.n	80055ac <HAL_ADC_Init+0x244>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054f0:	6899      	ldr	r1, [r3, #8]
 80054f2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80054f6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800550c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800550e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005510:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005512:	f022 0202 	bic.w	r2, r2, #2
 8005516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800551e:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005520:	f894 2020 	ldrb.w	r2, [r4, #32]
 8005524:	2a00      	cmp	r2, #0
 8005526:	d049      	beq.n	80055bc <HAL_ADC_Init+0x254>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	3b01      	subs	r3, #1
 800552c:	2b07      	cmp	r3, #7
 800552e:	d904      	bls.n	800553a <HAL_ADC_Init+0x1d2>
 8005530:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 8005534:	4826      	ldr	r0, [pc, #152]	; (80055d0 <HAL_ADC_Init+0x268>)
 8005536:	f7fc fb38 	bl	8001baa <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800553a:	6823      	ldr	r3, [r4, #0]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800553c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800553e:	685a      	ldr	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005540:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800554e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005556:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8005558:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800555a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800555c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005560:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800556e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800557a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005582:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8005594:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005596:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80055a4:	2300      	movs	r3, #0
 80055a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055ba:	e7a7      	b.n	800550c <HAL_ADC_Init+0x1a4>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c2:	e7c8      	b.n	8005556 <HAL_ADC_Init+0x1ee>
    tmp_hal_status = HAL_ERROR;
 80055c4:	2001      	movs	r0, #1
 80055c6:	e7ed      	b.n	80055a4 <HAL_ADC_Init+0x23c>
    return HAL_ERROR;
 80055c8:	2001      	movs	r0, #1
}
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	40012000 	.word	0x40012000
 80055d0:	080342b1 	.word	0x080342b1
 80055d4:	0f000001 	.word	0x0f000001
 80055d8:	40012300 	.word	0x40012300

080055dc <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80055dc:	2300      	movs	r3, #0
{
 80055de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80055e0:	9301      	str	r3, [sp, #4]
{
 80055e2:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80055e4:	680b      	ldr	r3, [r1, #0]
{
 80055e6:	460f      	mov	r7, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80055e8:	2b12      	cmp	r3, #18
 80055ea:	d907      	bls.n	80055fc <HAL_ADC_ConfigChannel+0x20>
 80055ec:	4a54      	ldr	r2, [pc, #336]	; (8005740 <HAL_ADC_ConfigChannel+0x164>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_ADC_ConfigChannel+0x20>
 80055f2:	f240 615c 	movw	r1, #1628	; 0x65c
 80055f6:	4853      	ldr	r0, [pc, #332]	; (8005744 <HAL_ADC_ConfigChannel+0x168>)
 80055f8:	f7fc fad7 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d904      	bls.n	800560e <HAL_ADC_ConfigChannel+0x32>
 8005604:	f240 615d 	movw	r1, #1629	; 0x65d
 8005608:	484e      	ldr	r0, [pc, #312]	; (8005744 <HAL_ADC_ConfigChannel+0x168>)
 800560a:	f7fc face 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b07      	cmp	r3, #7
 8005612:	d904      	bls.n	800561e <HAL_ADC_ConfigChannel+0x42>
 8005614:	f240 615e 	movw	r1, #1630	; 0x65e
 8005618:	484a      	ldr	r0, [pc, #296]	; (8005744 <HAL_ADC_ConfigChannel+0x168>)
 800561a:	f7fc fac6 	bl	8001baa <assert_failed>
  __HAL_LOCK(hadc);
 800561e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d070      	beq.n	8005708 <HAL_ADC_ConfigChannel+0x12c>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8005626:	683d      	ldr	r5, [r7, #0]
  __HAL_LOCK(hadc);
 8005628:	2301      	movs	r3, #1
 800562a:	68ba      	ldr	r2, [r7, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800562c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800562e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9)
 8005636:	d930      	bls.n	800569a <HAL_ADC_ConfigChannel+0xbe>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005638:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800563c:	f04f 0e07 	mov.w	lr, #7
 8005640:	68c1      	ldr	r1, [r0, #12]
 8005642:	3b1e      	subs	r3, #30
 8005644:	fa0e fe03 	lsl.w	lr, lr, r3
 8005648:	ea21 010e 	bic.w	r1, r1, lr
 800564c:	60c1      	str	r1, [r0, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800564e:	493c      	ldr	r1, [pc, #240]	; (8005740 <HAL_ADC_ConfigChannel+0x164>)
 8005650:	428d      	cmp	r5, r1
 8005652:	d11d      	bne.n	8005690 <HAL_ADC_ConfigChannel+0xb4>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005654:	68c3      	ldr	r3, [r0, #12]
 8005656:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800565a:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	2a06      	cmp	r2, #6
 8005660:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8005664:	d829      	bhi.n	80056ba <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005666:	4413      	add	r3, r2
 8005668:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800566a:	1f59      	subs	r1, r3, #5
 800566c:	231f      	movs	r3, #31
 800566e:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005670:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005674:	ea27 0303 	bic.w	r3, r7, r3
 8005678:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800567a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800567c:	4311      	orrs	r1, r2
 800567e:	6341      	str	r1, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <HAL_ADC_ConfigChannel+0x16c>)
 8005682:	4298      	cmp	r0, r3
 8005684:	d038      	beq.n	80056f8 <HAL_ADC_ConfigChannel+0x11c>
  __HAL_UNLOCK(hadc);
 8005686:	2000      	movs	r0, #0
 8005688:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800568c:	b003      	add	sp, #12
 800568e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005690:	68c1      	ldr	r1, [r0, #12]
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	430b      	orrs	r3, r1
 8005698:	e7df      	b.n	800565a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800569a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800569e:	f04f 0e07 	mov.w	lr, #7
 80056a2:	6901      	ldr	r1, [r0, #16]
 80056a4:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056ac:	ea21 010e 	bic.w	r1, r1, lr
 80056b0:	6101      	str	r1, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056b2:	6901      	ldr	r1, [r0, #16]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6103      	str	r3, [r0, #16]
 80056b8:	e7d0      	b.n	800565c <HAL_ADC_ConfigChannel+0x80>
  else if (sConfig->Rank < 13)
 80056ba:	2a0c      	cmp	r2, #12
 80056bc:	d80e      	bhi.n	80056dc <HAL_ADC_ConfigChannel+0x100>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056be:	4413      	add	r3, r2
 80056c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80056c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80056c6:	231f      	movs	r3, #31
 80056c8:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056ca:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056ce:	ea21 0303 	bic.w	r3, r1, r3
 80056d2:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80056d6:	431a      	orrs	r2, r3
 80056d8:	6302      	str	r2, [r0, #48]	; 0x30
 80056da:	e7d1      	b.n	8005680 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056dc:	4413      	add	r3, r2
 80056de:	221f      	movs	r2, #31
 80056e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80056e2:	3b41      	subs	r3, #65	; 0x41
 80056e4:	409a      	lsls	r2, r3
 80056e6:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056ea:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056ee:	62c2      	str	r2, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80056f2:	4311      	orrs	r1, r2
 80056f4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80056f6:	e7c3      	b.n	8005680 <HAL_ADC_ConfigChannel+0xa4>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056f8:	2d12      	cmp	r5, #18
 80056fa:	d107      	bne.n	800570c <HAL_ADC_ConfigChannel+0x130>
    ADC->CCR |= ADC_CCR_VBATE;
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <HAL_ADC_ConfigChannel+0x170>)
 80056fe:	6853      	ldr	r3, [r2, #4]
 8005700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005704:	6053      	str	r3, [r2, #4]
 8005706:	e7be      	b.n	8005686 <HAL_ADC_ConfigChannel+0xaa>
  __HAL_LOCK(hadc);
 8005708:	2002      	movs	r0, #2
 800570a:	e7bf      	b.n	800568c <HAL_ADC_ConfigChannel+0xb0>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <HAL_ADC_ConfigChannel+0x164>)
 800570e:	429d      	cmp	r5, r3
 8005710:	d001      	beq.n	8005716 <HAL_ADC_ConfigChannel+0x13a>
 8005712:	2d11      	cmp	r5, #17
 8005714:	d1b7      	bne.n	8005686 <HAL_ADC_ConfigChannel+0xaa>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005716:	490d      	ldr	r1, [pc, #52]	; (800574c <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005718:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 800571a:	684a      	ldr	r2, [r1, #4]
 800571c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005720:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005722:	d1b0      	bne.n	8005686 <HAL_ADC_ConfigChannel+0xaa>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <HAL_ADC_ConfigChannel+0x174>)
 8005726:	4a0b      	ldr	r2, [pc, #44]	; (8005754 <HAL_ADC_ConfigChannel+0x178>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	fbb3 f2f2 	udiv	r2, r3, r2
 800572e:	230a      	movs	r3, #10
 8005730:	4353      	muls	r3, r2
        counter--;
 8005732:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8005734:	9b01      	ldr	r3, [sp, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0a5      	beq.n	8005686 <HAL_ADC_ConfigChannel+0xaa>
        counter--;
 800573a:	9b01      	ldr	r3, [sp, #4]
 800573c:	3b01      	subs	r3, #1
 800573e:	e7f8      	b.n	8005732 <HAL_ADC_ConfigChannel+0x156>
 8005740:	10000012 	.word	0x10000012
 8005744:	080342b1 	.word	0x080342b1
 8005748:	40012000 	.word	0x40012000
 800574c:	40012300 	.word	0x40012300
 8005750:	200000cc 	.word	0x200000cc
 8005754:	000f4240 	.word	0x000f4240

08005758 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005758:	1ec3      	subs	r3, r0, #3
 800575a:	2b04      	cmp	r3, #4
{
 800575c:	b510      	push	{r4, lr}
 800575e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005760:	d903      	bls.n	800576a <HAL_NVIC_SetPriorityGrouping+0x12>
 8005762:	2192      	movs	r1, #146	; 0x92
 8005764:	4809      	ldr	r0, [pc, #36]	; (800578c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8005766:	f7fc fa20 	bl	8001baa <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800576c:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800576e:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005770:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005774:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005784:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8005786:	60d4      	str	r4, [r2, #12]
 8005788:	bd10      	pop	{r4, pc}
 800578a:	bf00      	nop
 800578c:	080342ef 	.word	0x080342ef
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005794:	2a0f      	cmp	r2, #15
{ 
 8005796:	b570      	push	{r4, r5, r6, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	460e      	mov	r6, r1
 800579c:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800579e:	d903      	bls.n	80057a8 <HAL_NVIC_SetPriority+0x14>
 80057a0:	21aa      	movs	r1, #170	; 0xaa
 80057a2:	481d      	ldr	r0, [pc, #116]	; (8005818 <HAL_NVIC_SetPriority+0x84>)
 80057a4:	f7fc fa01 	bl	8001baa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80057a8:	2e0f      	cmp	r6, #15
 80057aa:	d903      	bls.n	80057b4 <HAL_NVIC_SetPriority+0x20>
 80057ac:	21ab      	movs	r1, #171	; 0xab
 80057ae:	481a      	ldr	r0, [pc, #104]	; (8005818 <HAL_NVIC_SetPriority+0x84>)
 80057b0:	f7fc f9fb 	bl	8001baa <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_NVIC_SetPriority+0x88>)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b6:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b8:	68d9      	ldr	r1, [r3, #12]
 80057ba:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057be:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057c2:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	bf28      	it	cs
 80057c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ca:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057d0:	bf8c      	ite	hi
 80057d2:	3903      	subhi	r1, #3
 80057d4:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 80057d6:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d8:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057dc:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e0:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e4:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ec:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	ea42 0205 	orr.w	r2, r2, r5
 80057f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80057f8:	db07      	blt.n	800580a <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fa:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8005804:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 8005808:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580a:	f004 040f 	and.w	r4, r4, #15
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <HAL_NVIC_SetPriority+0x8c>)
 8005812:	551a      	strb	r2, [r3, r4]
 8005814:	bd70      	pop	{r4, r5, r6, pc}
 8005816:	bf00      	nop
 8005818:	080342ef 	.word	0x080342ef
 800581c:	e000ed00 	.word	0xe000ed00
 8005820:	e000ed14 	.word	0xe000ed14

08005824 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005824:	2800      	cmp	r0, #0
 8005826:	da03      	bge.n	8005830 <HAL_NVIC_EnableIRQ+0xc>
 8005828:	21be      	movs	r1, #190	; 0xbe
 800582a:	4806      	ldr	r0, [pc, #24]	; (8005844 <HAL_NVIC_EnableIRQ+0x20>)
 800582c:	f7fc b9bd 	b.w	8001baa <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005830:	0942      	lsrs	r2, r0, #5
 8005832:	2301      	movs	r3, #1
 8005834:	f000 001f 	and.w	r0, r0, #31
 8005838:	fa03 f000 	lsl.w	r0, r3, r0
 800583c:	4b02      	ldr	r3, [pc, #8]	; (8005848 <HAL_NVIC_EnableIRQ+0x24>)
 800583e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005842:	4770      	bx	lr
 8005844:	080342ef 	.word	0x080342ef
 8005848:	e000e100 	.word	0xe000e100

0800584c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800584c:	2800      	cmp	r0, #0
 800584e:	da03      	bge.n	8005858 <HAL_NVIC_DisableIRQ+0xc>
 8005850:	21ce      	movs	r1, #206	; 0xce
 8005852:	4809      	ldr	r0, [pc, #36]	; (8005878 <HAL_NVIC_DisableIRQ+0x2c>)
 8005854:	f7fc b9a9 	b.w	8001baa <assert_failed>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005858:	0943      	lsrs	r3, r0, #5
 800585a:	2201      	movs	r2, #1
 800585c:	f000 001f 	and.w	r0, r0, #31
 8005860:	3320      	adds	r3, #32
 8005862:	fa02 f000 	lsl.w	r0, r2, r0
 8005866:	4a05      	ldr	r2, [pc, #20]	; (800587c <HAL_NVIC_DisableIRQ+0x30>)
 8005868:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800586c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	080342ef 	.word	0x080342ef
 800587c:	e000e100 	.word	0xe000e100

08005880 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005880:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005882:	4604      	mov	r4, r0
 8005884:	b908      	cbnz	r0, 800588a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005886:	2001      	movs	r0, #1
 8005888:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800588a:	6802      	ldr	r2, [r0, #0]
 800588c:	4b31      	ldr	r3, [pc, #196]	; (8005954 <HAL_CRC_Init+0xd4>)
 800588e:	429a      	cmp	r2, r3
 8005890:	d003      	beq.n	800589a <HAL_CRC_Init+0x1a>
 8005892:	2170      	movs	r1, #112	; 0x70
 8005894:	4830      	ldr	r0, [pc, #192]	; (8005958 <HAL_CRC_Init+0xd8>)
 8005896:	f7fc f988 	bl	8001baa <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800589a:	7f63      	ldrb	r3, [r4, #29]
 800589c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058a0:	b91b      	cbnz	r3, 80058aa <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80058a2:	7722      	strb	r2, [r4, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7fb fc6f 	bl	8001188 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80058aa:	2302      	movs	r3, #2
 80058ac:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 80058ae:	7923      	ldrb	r3, [r4, #4]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d903      	bls.n	80058bc <HAL_CRC_Init+0x3c>
 80058b4:	217e      	movs	r1, #126	; 0x7e
 80058b6:	4828      	ldr	r0, [pc, #160]	; (8005958 <HAL_CRC_Init+0xd8>)
 80058b8:	f7fc f977 	bl	8001baa <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80058bc:	7923      	ldrb	r3, [r4, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d13e      	bne.n	8005940 <HAL_CRC_Init+0xc0>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <HAL_CRC_Init+0xdc>)
 80058c6:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	f022 0218 	bic.w	r2, r2, #24
 80058ce:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80058d0:	7963      	ldrb	r3, [r4, #5]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d903      	bls.n	80058de <HAL_CRC_Init+0x5e>
 80058d6:	2190      	movs	r1, #144	; 0x90
 80058d8:	481f      	ldr	r0, [pc, #124]	; (8005958 <HAL_CRC_Init+0xd8>)
 80058da:	f7fc f966 	bl	8001baa <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80058de:	7962      	ldrb	r2, [r4, #5]
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	d134      	bne.n	8005950 <HAL_CRC_Init+0xd0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80058e6:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80058ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80058ec:	6963      	ldr	r3, [r4, #20]
 80058ee:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 80058f2:	d003      	beq.n	80058fc <HAL_CRC_Init+0x7c>
 80058f4:	219c      	movs	r1, #156	; 0x9c
 80058f6:	4818      	ldr	r0, [pc, #96]	; (8005958 <HAL_CRC_Init+0xd8>)
 80058f8:	f7fc f957 	bl	8001baa <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	6961      	ldr	r1, [r4, #20]
 8005900:	6893      	ldr	r3, [r2, #8]
 8005902:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005906:	430b      	orrs	r3, r1
 8005908:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800590a:	69a3      	ldr	r3, [r4, #24]
 800590c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005910:	d003      	beq.n	800591a <HAL_CRC_Init+0x9a>
 8005912:	21a0      	movs	r1, #160	; 0xa0
 8005914:	4810      	ldr	r0, [pc, #64]	; (8005958 <HAL_CRC_Init+0xd8>)
 8005916:	f7fc f948 	bl	8001baa <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800591a:	6822      	ldr	r2, [r4, #0]
 800591c:	69a1      	ldr	r1, [r4, #24]
 800591e:	6893      	ldr	r3, [r2, #8]
 8005920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005924:	430b      	orrs	r3, r1
 8005926:	6093      	str	r3, [r2, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8005928:	6a23      	ldr	r3, [r4, #32]
 800592a:	3b01      	subs	r3, #1
 800592c:	2b02      	cmp	r3, #2
 800592e:	d903      	bls.n	8005938 <HAL_CRC_Init+0xb8>
 8005930:	21a5      	movs	r1, #165	; 0xa5
 8005932:	4809      	ldr	r0, [pc, #36]	; (8005958 <HAL_CRC_Init+0xd8>)
 8005934:	f7fc f939 	bl	8001baa <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005938:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800593a:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800593c:	7763      	strb	r3, [r4, #29]
}
 800593e:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005940:	68e2      	ldr	r2, [r4, #12]
 8005942:	4620      	mov	r0, r4
 8005944:	68a1      	ldr	r1, [r4, #8]
 8005946:	f000 f80b 	bl	8005960 <HAL_CRCEx_Polynomial_Set>
 800594a:	2800      	cmp	r0, #0
 800594c:	d0c0      	beq.n	80058d0 <HAL_CRC_Init+0x50>
 800594e:	e79a      	b.n	8005886 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005950:	6922      	ldr	r2, [r4, #16]
 8005952:	e7ca      	b.n	80058ea <HAL_CRC_Init+0x6a>
 8005954:	40023000 	.word	0x40023000
 8005958:	08034330 	.word	0x08034330
 800595c:	04c11db7 	.word	0x04c11db7

08005960 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005960:	f032 0318 	bics.w	r3, r2, #24
{
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4606      	mov	r6, r0
 8005968:	460d      	mov	r5, r1
 800596a:	4614      	mov	r4, r2
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 800596c:	d003      	beq.n	8005976 <HAL_CRCEx_Polynomial_Set+0x16>
 800596e:	215f      	movs	r1, #95	; 0x5f
 8005970:	4811      	ldr	r0, [pc, #68]	; (80059b8 <HAL_CRCEx_Polynomial_Set+0x58>)
 8005972:	f7fc f91a 	bl	8001baa <assert_failed>
{
 8005976:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005978:	f113 33ff 	adds.w	r3, r3, #4294967295
 800597c:	d306      	bcc.n	800598c <HAL_CRCEx_Polynomial_Set+0x2c>
 800597e:	fa25 f203 	lsr.w	r2, r5, r3
 8005982:	07d2      	lsls	r2, r2, #31
 8005984:	d5f8      	bpl.n	8005978 <HAL_CRCEx_Polynomial_Set+0x18>
  {
  }

  switch (PolyLength)
 8005986:	2c08      	cmp	r4, #8
 8005988:	d014      	beq.n	80059b4 <HAL_CRCEx_Polynomial_Set+0x54>
 800598a:	d809      	bhi.n	80059a0 <HAL_CRCEx_Polynomial_Set+0x40>
 800598c:	b974      	cbnz	r4, 80059ac <HAL_CRCEx_Polynomial_Set+0x4c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800598e:	6833      	ldr	r3, [r6, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005990:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005992:	615d      	str	r5, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	f022 0218 	bic.w	r2, r2, #24
 800599a:	4314      	orrs	r4, r2
 800599c:	609c      	str	r4, [r3, #8]
  }
  /* Return function status */
  return status;
 800599e:	bd70      	pop	{r4, r5, r6, pc}
  switch (PolyLength)
 80059a0:	2c10      	cmp	r4, #16
 80059a2:	d005      	beq.n	80059b0 <HAL_CRCEx_Polynomial_Set+0x50>
 80059a4:	2c18      	cmp	r4, #24
 80059a6:	d101      	bne.n	80059ac <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80059a8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80059aa:	d9f0      	bls.n	800598e <HAL_CRCEx_Polynomial_Set+0x2e>
  switch (PolyLength)
 80059ac:	2001      	movs	r0, #1
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	e7fa      	b.n	80059aa <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_16B)
 80059b4:	2b0f      	cmp	r3, #15
 80059b6:	e7f8      	b.n	80059aa <HAL_CRCEx_Polynomial_Set+0x4a>
 80059b8:	0803436e 	.word	0x0803436e

080059bc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 80059bc:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80059be:	4604      	mov	r4, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f000 80a2 	beq.w	8005b0a <HAL_DCMI_Init+0x14e>
  {
     return HAL_ERROR;
  }
  
  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 80059c6:	6802      	ldr	r2, [r0, #0]
 80059c8:	4b51      	ldr	r3, [pc, #324]	; (8005b10 <HAL_DCMI_Init+0x154>)
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d003      	beq.n	80059d6 <HAL_DCMI_Init+0x1a>
 80059ce:	21ba      	movs	r1, #186	; 0xba
 80059d0:	4850      	ldr	r0, [pc, #320]	; (8005b14 <HAL_DCMI_Init+0x158>)
 80059d2:	f7fc f8ea 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 80059d6:	68a3      	ldr	r3, [r4, #8]
 80059d8:	f033 0320 	bics.w	r3, r3, #32
 80059dc:	d003      	beq.n	80059e6 <HAL_DCMI_Init+0x2a>
 80059de:	21bb      	movs	r1, #187	; 0xbb
 80059e0:	484c      	ldr	r0, [pc, #304]	; (8005b14 <HAL_DCMI_Init+0x158>)
 80059e2:	f7fc f8e2 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80059ec:	d003      	beq.n	80059f6 <HAL_DCMI_Init+0x3a>
 80059ee:	21bc      	movs	r1, #188	; 0xbc
 80059f0:	4848      	ldr	r0, [pc, #288]	; (8005b14 <HAL_DCMI_Init+0x158>)
 80059f2:	f7fc f8da 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 80059fc:	d003      	beq.n	8005a06 <HAL_DCMI_Init+0x4a>
 80059fe:	21bd      	movs	r1, #189	; 0xbd
 8005a00:	4844      	ldr	r0, [pc, #272]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a02:	f7fc f8d2 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8005a06:	6863      	ldr	r3, [r4, #4]
 8005a08:	f033 0310 	bics.w	r3, r3, #16
 8005a0c:	d003      	beq.n	8005a16 <HAL_DCMI_Init+0x5a>
 8005a0e:	21be      	movs	r1, #190	; 0xbe
 8005a10:	4840      	ldr	r0, [pc, #256]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a12:	f7fc f8ca 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8005a16:	6963      	ldr	r3, [r4, #20]
 8005a18:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8005a1c:	d006      	beq.n	8005a2c <HAL_DCMI_Init+0x70>
 8005a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a22:	d003      	beq.n	8005a2c <HAL_DCMI_Init+0x70>
 8005a24:	21bf      	movs	r1, #191	; 0xbf
 8005a26:	483b      	ldr	r0, [pc, #236]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a28:	f7fc f8bf 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8005a2c:	69a3      	ldr	r3, [r4, #24]
 8005a2e:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8005a32:	d003      	beq.n	8005a3c <HAL_DCMI_Init+0x80>
 8005a34:	21c0      	movs	r1, #192	; 0xc0
 8005a36:	4837      	ldr	r0, [pc, #220]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a38:	f7fc f8b7 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8005a3c:	6a23      	ldr	r3, [r4, #32]
 8005a3e:	f033 0308 	bics.w	r3, r3, #8
 8005a42:	d003      	beq.n	8005a4c <HAL_DCMI_Init+0x90>
 8005a44:	21c1      	movs	r1, #193	; 0xc1
 8005a46:	4833      	ldr	r0, [pc, #204]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a48:	f7fc f8af 	bl	8001baa <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8005a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a4e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005a52:	d003      	beq.n	8005a5c <HAL_DCMI_Init+0xa0>
 8005a54:	21c3      	movs	r1, #195	; 0xc3
 8005a56:	482f      	ldr	r0, [pc, #188]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a58:	f7fc f8a7 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8005a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a5e:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8005a62:	d003      	beq.n	8005a6c <HAL_DCMI_Init+0xb0>
 8005a64:	21c4      	movs	r1, #196	; 0xc4
 8005a66:	482b      	ldr	r0, [pc, #172]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a68:	f7fc f89f 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8005a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a6e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005a72:	d003      	beq.n	8005a7c <HAL_DCMI_Init+0xc0>
 8005a74:	21c5      	movs	r1, #197	; 0xc5
 8005a76:	4827      	ldr	r0, [pc, #156]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a78:	f7fc f897 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8005a7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a7e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005a82:	d003      	beq.n	8005a8c <HAL_DCMI_Init+0xd0>
 8005a84:	21c6      	movs	r1, #198	; 0xc6
 8005a86:	4823      	ldr	r0, [pc, #140]	; (8005b14 <HAL_DCMI_Init+0x158>)
 8005a88:	f7fc f88f 	bl	8001baa <assert_failed>
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005a8c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005a90:	b913      	cbnz	r3, 8005a98 <HAL_DCMI_Init+0xdc>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7fb fbaa 	bl	80011ec <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005a98:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8005a9a:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005a9c:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8005a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	; (8005b18 <HAL_DCMI_Init+0x15c>)
 8005aa4:	6811      	ldr	r1, [r2, #0]
 8005aa6:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005aa8:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005aaa:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005aac:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	6810      	ldr	r0, [r2, #0]
 8005ab2:	ea43 0301 	orr.w	r3, r3, r1
 8005ab6:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005aba:	6925      	ldr	r5, [r4, #16]
 8005abc:	ea43 0305 	orr.w	r3, r3, r5
 8005ac0:	68a5      	ldr	r5, [r4, #8]
 8005ac2:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005ac6:	69a5      	ldr	r5, [r4, #24]
 8005ac8:	ea43 0305 	orr.w	r3, r3, r5
 8005acc:	6a25      	ldr	r5, [r4, #32]
 8005ace:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005ad2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005ad4:	ea43 0305 	orr.w	r3, r3, r5
 8005ad8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005ada:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005ade:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005ae0:	ea43 0305 	orr.w	r3, r3, r5
 8005ae4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005ae6:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005aea:	ea43 0300 	orr.w	r3, r3, r0
 8005aee:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005af0:	d101      	bne.n	8005af6 <HAL_DCMI_Init+0x13a>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005af2:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8005af4:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005af6:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005af8:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005afa:	f043 031e 	orr.w	r3, r3, #30
 8005afe:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005b00:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005b02:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005b04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8005b0a:	2001      	movs	r0, #1
}
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	50050000 	.word	0x50050000
 8005b14:	080343af 	.word	0x080343af
 8005b18:	ffe0f007 	.word	0xffe0f007

08005b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	4617      	mov	r7, r2
 8005b22:	4698      	mov	r8, r3

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b24:	1e5a      	subs	r2, r3, #1
 8005b26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b2e:	429a      	cmp	r2, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b30:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005b32:	d904      	bls.n	8005b3e <HAL_DMA_Start_IT+0x22>
 8005b34:	f240 11cd 	movw	r1, #461	; 0x1cd
 8005b38:	4820      	ldr	r0, [pc, #128]	; (8005bbc <HAL_DMA_Start_IT+0xa0>)
 8005b3a:	f7fc f836 	bl	8001baa <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b3e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d037      	beq.n	8005bb6 <HAL_DMA_Start_IT+0x9a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	2002      	movs	r0, #2
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b50:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d12a      	bne.n	8005bae <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b58:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b5c:	6561      	str	r1, [r4, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b5e:	6821      	ldr	r1, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b60:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b62:	6808      	ldr	r0, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b64:	2b40      	cmp	r3, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b66:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005b6a:	6008      	str	r0, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8005b6c:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b70:	d11a      	bne.n	8005ba8 <HAL_DMA_Start_IT+0x8c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b72:	608f      	str	r7, [r1, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b74:	60cd      	str	r5, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005b78:	233f      	movs	r3, #63	; 0x3f
 8005b7a:	4093      	lsls	r3, r2
 8005b7c:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b7e:	680b      	ldr	r3, [r1, #0]
 8005b80:	f043 0316 	orr.w	r3, r3, #22
 8005b84:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b86:	694b      	ldr	r3, [r1, #20]
 8005b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8c:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b90:	b11b      	cbz	r3, 8005b9a <HAL_DMA_Start_IT+0x7e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b92:	680b      	ldr	r3, [r1, #0]
 8005b94:	f043 0308 	orr.w	r3, r3, #8
 8005b98:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8005b9a:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	600b      	str	r3, [r1, #0]
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005ba8:	608d      	str	r5, [r1, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005baa:	60cf      	str	r7, [r1, #12]
 8005bac:	e7e3      	b.n	8005b76 <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);	  
 8005bae:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 8005bb6:	2002      	movs	r0, #2
}
 8005bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bbc:	080343ee 	.word	0x080343ee

08005bc0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005bc0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005bc4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d046      	beq.n	8005c5a <HAL_DMA2D_Init+0x96>
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8005bcc:	6802      	ldr	r2, [r0, #0]
 8005bce:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <HAL_DMA2D_Init+0x9c>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d003      	beq.n	8005bdc <HAL_DMA2D_Init+0x18>
 8005bd4:	21f6      	movs	r1, #246	; 0xf6
 8005bd6:	4823      	ldr	r0, [pc, #140]	; (8005c64 <HAL_DMA2D_Init+0xa0>)
 8005bd8:	f7fb ffe7 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005be2:	d003      	beq.n	8005bec <HAL_DMA2D_Init+0x28>
 8005be4:	21f7      	movs	r1, #247	; 0xf7
 8005be6:	481f      	ldr	r0, [pc, #124]	; (8005c64 <HAL_DMA2D_Init+0xa0>)
 8005be8:	f7fb ffdf 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d903      	bls.n	8005bfa <HAL_DMA2D_Init+0x36>
 8005bf2:	21f8      	movs	r1, #248	; 0xf8
 8005bf4:	481b      	ldr	r0, [pc, #108]	; (8005c64 <HAL_DMA2D_Init+0xa0>)
 8005bf6:	f7fb ffd8 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c00:	d303      	bcc.n	8005c0a <HAL_DMA2D_Init+0x46>
 8005c02:	21f9      	movs	r1, #249	; 0xf9
 8005c04:	4817      	ldr	r0, [pc, #92]	; (8005c64 <HAL_DMA2D_Init+0xa0>)
 8005c06:	f7fb ffd0 	bl	8001baa <assert_failed>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c0a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005c0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c12:	b923      	cbnz	r3, 8005c1e <HAL_DMA2D_Init+0x5a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c14:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f7fe f915 	bl	8003e48 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c1e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c20:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c22:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c24:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005c30:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c32:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c34:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005c38:	f023 0307 	bic.w	r3, r3, #7
 8005c3c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c3e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c40:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c42:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005c44:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c50:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c52:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8005c58:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8005c5a:	2001      	movs	r0, #1
}
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	bf00      	nop
 8005c60:	4002b000 	.word	0x4002b000
 8005c64:	0803442c 	.word	0x0803442c

08005c68 <HAL_DMA2D_LineEventCallback>:
 8005c68:	4770      	bx	lr

08005c6a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005c6a:	4770      	bx	lr

08005c6c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c6c:	6803      	ldr	r3, [r0, #0]
{
 8005c6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c70:	685e      	ldr	r6, [r3, #4]
{
 8005c72:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005c74:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c76:	07f2      	lsls	r2, r6, #31
 8005c78:	d514      	bpl.n	8005ca4 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005c7a:	05e9      	lsls	r1, r5, #23
 8005c7c:	d512      	bpl.n	8005ca4 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c84:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c86:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005c8e:	2201      	movs	r2, #1
 8005c90:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c92:	2304      	movs	r3, #4
 8005c94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005c9e:	6943      	ldr	r3, [r0, #20]
 8005ca0:	b103      	cbz	r3, 8005ca4 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8005ca2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ca4:	06b2      	lsls	r2, r6, #26
 8005ca6:	d516      	bpl.n	8005cd6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005ca8:	04ab      	lsls	r3, r5, #18
 8005caa:	d514      	bpl.n	8005cd6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cb4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cbc:	f043 0302 	orr.w	r3, r3, #2
 8005cc0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005cce:	6963      	ldr	r3, [r4, #20]
 8005cd0:	b10b      	cbz	r3, 8005cd6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005cd6:	0730      	lsls	r0, r6, #28
 8005cd8:	d516      	bpl.n	8005d08 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005cda:	0529      	lsls	r1, r5, #20
 8005cdc:	d514      	bpl.n	8005d08 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005ce8:	2208      	movs	r2, #8
 8005cea:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005d00:	6963      	ldr	r3, [r4, #20]
 8005d02:	b10b      	cbz	r3, 8005d08 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8005d04:	4620      	mov	r0, r4
 8005d06:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005d08:	0772      	lsls	r2, r6, #29
 8005d0a:	d50b      	bpl.n	8005d24 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005d0c:	056b      	lsls	r3, r5, #21
 8005d0e:	d509      	bpl.n	8005d24 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005d10:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005d12:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005d20:	f7ff ffa2 	bl	8005c68 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005d24:	07b0      	lsls	r0, r6, #30
 8005d26:	d514      	bpl.n	8005d52 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005d28:	05a9      	lsls	r1, r5, #22
 8005d2a:	d512      	bpl.n	8005d52 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d34:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005d36:	2202      	movs	r2, #2
 8005d38:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d3c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005d44:	2300      	movs	r3, #0
 8005d46:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	b10b      	cbz	r3, 8005d52 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005d52:	06f2      	lsls	r2, r6, #27
 8005d54:	d513      	bpl.n	8005d7e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005d56:	04eb      	lsls	r3, r5, #19
 8005d58:	d511      	bpl.n	8005d7e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005d5a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005d5c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d64:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005d66:	2210      	movs	r2, #16
 8005d68:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d6c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005d74:	2300      	movs	r3, #0
 8005d76:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005d7a:	f7ff ff76 	bl	8005c6a <HAL_DMA2D_CLUTLoadingCpltCallback>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}

08005d80 <HAL_DMA2D_ConfigLayer>:
{
  DMA2D_LayerCfgTypeDef *pLayerCfg;
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005d80:	2901      	cmp	r1, #1
{
 8005d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d84:	4604      	mov	r4, r0
 8005d86:	460e      	mov	r6, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005d88:	d904      	bls.n	8005d94 <HAL_DMA2D_ConfigLayer+0x14>
 8005d8a:	f240 614a 	movw	r1, #1610	; 0x64a
 8005d8e:	4837      	ldr	r0, [pc, #220]	; (8005e6c <HAL_DMA2D_ConfigLayer+0xec>)
 8005d90:	f7fb ff0b 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8005d94:	0135      	lsls	r5, r6, #4
 8005d96:	1963      	adds	r3, r4, r5
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9e:	d304      	bcc.n	8005daa <HAL_DMA2D_ConfigLayer+0x2a>
 8005da0:	f240 614b 	movw	r1, #1611	; 0x64b
 8005da4:	4831      	ldr	r0, [pc, #196]	; (8005e6c <HAL_DMA2D_ConfigLayer+0xec>)
 8005da6:	f7fb ff00 	bl	8001baa <assert_failed>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005db0:	d014      	beq.n	8005ddc <HAL_DMA2D_ConfigLayer+0x5c>
  {
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8005db2:	1963      	adds	r3, r4, r5
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	2b0a      	cmp	r3, #10
 8005db8:	d904      	bls.n	8005dc4 <HAL_DMA2D_ConfigLayer+0x44>
 8005dba:	f240 614e 	movw	r1, #1614	; 0x64e
 8005dbe:	482b      	ldr	r0, [pc, #172]	; (8005e6c <HAL_DMA2D_ConfigLayer+0xec>)
 8005dc0:	f7fb fef3 	bl	8001baa <assert_failed>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	b14b      	cbz	r3, 8005ddc <HAL_DMA2D_ConfigLayer+0x5c>
    {
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8005dc8:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d904      	bls.n	8005ddc <HAL_DMA2D_ConfigLayer+0x5c>
 8005dd2:	f240 6151 	movw	r1, #1617	; 0x651
 8005dd6:	4825      	ldr	r0, [pc, #148]	; (8005e6c <HAL_DMA2D_ConfigLayer+0xec>)
 8005dd8:	f7fb fee7 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ddc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005de0:	2002      	movs	r0, #2
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d040      	beq.n	8005e68 <HAL_DMA2D_ConfigLayer+0xe8>
 8005de6:	2301      	movs	r3, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005de8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8005dec:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005e70 <HAL_DMA2D_ConfigLayer+0xf0>
  __HAL_LOCK(hdma2d);
 8005df0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005df4:	1963      	adds	r3, r4, r5
 8005df6:	69df      	ldr	r7, [r3, #28]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005dfc:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e00:	3f09      	subs	r7, #9
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	2f01      	cmp	r7, #1
 8005e06:	d80f      	bhi.n	8005e28 <HAL_DMA2D_ConfigLayer+0xa8>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e08:	f000 417f 	and.w	r1, r0, #4278190080	; 0xff000000
 8005e0c:	430a      	orrs	r2, r1
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e0e:	b976      	cbnz	r6, 8005e2e <HAL_DMA2D_ConfigLayer+0xae>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e12:	ea01 010e 	and.w	r1, r1, lr
 8005e16:	430a      	orrs	r2, r1
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e1a:	69a2      	ldr	r2, [r4, #24]
 8005e1c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
 8005e26:	e010      	b.n	8005e4a <HAL_DMA2D_ConfigLayer+0xca>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e28:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e2c:	b1a6      	cbz	r6, 8005e58 <HAL_DMA2D_ConfigLayer+0xd8>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e2e:	69d9      	ldr	r1, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e30:	4425      	add	r5, r4

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e32:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e34:	ea01 010e 	and.w	r1, r1, lr
 8005e38:	ea42 0201 	orr.w	r2, r2, r1
 8005e3c:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e3e:	69aa      	ldr	r2, [r5, #24]
 8005e40:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e42:	d802      	bhi.n	8005e4a <HAL_DMA2D_ConfigLayer+0xca>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005e44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005e48:	6218      	str	r0, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e4a:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e4c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8005e52:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 8005e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e5a:	ea01 010e 	and.w	r1, r1, lr
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e62:	69a2      	ldr	r2, [r4, #24]
 8005e64:	619a      	str	r2, [r3, #24]
 8005e66:	e7f0      	b.n	8005e4a <HAL_DMA2D_ConfigLayer+0xca>
}
 8005e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	0803442c 	.word	0x0803442c
 8005e70:	00fcfff0 	.word	0x00fcfff0

08005e74 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005e74:	4ba3      	ldr	r3, [pc, #652]	; (8006104 <HAL_GPIO_Init+0x290>)
 8005e76:	4298      	cmp	r0, r3
{
 8005e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005e80:	d02b      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e86:	4298      	cmp	r0, r3
 8005e88:	d027      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	d023      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	4298      	cmp	r0, r3
 8005e98:	d01f      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9e:	4298      	cmp	r0, r3
 8005ea0:	d01b      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ea6:	4298      	cmp	r0, r3
 8005ea8:	d017      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	d013      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	4298      	cmp	r0, r3
 8005eb8:	d00f      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebe:	4298      	cmp	r0, r3
 8005ec0:	d00b      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec6:	4298      	cmp	r0, r3
 8005ec8:	d007      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d003      	beq.n	8005eda <HAL_GPIO_Init+0x66>
 8005ed2:	21b1      	movs	r1, #177	; 0xb1
 8005ed4:	488c      	ldr	r0, [pc, #560]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005ed6:	f7fb fe68 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005eda:	882b      	ldrh	r3, [r5, #0]
 8005edc:	b91b      	cbnz	r3, 8005ee6 <HAL_GPIO_Init+0x72>
 8005ede:	21b2      	movs	r1, #178	; 0xb2
 8005ee0:	4889      	ldr	r0, [pc, #548]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005ee2:	f7fb fe62 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005ee6:	686b      	ldr	r3, [r5, #4]
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d917      	bls.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005eec:	f1a3 0211 	sub.w	r2, r3, #17
 8005ef0:	2a01      	cmp	r2, #1
 8005ef2:	d913      	bls.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005ef4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ef8:	4984      	ldr	r1, [pc, #528]	; (800610c <HAL_GPIO_Init+0x298>)
 8005efa:	428a      	cmp	r2, r1
 8005efc:	d00e      	beq.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005efe:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d00a      	beq.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005f06:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8005f0a:	428a      	cmp	r2, r1
 8005f0c:	d006      	beq.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005f0e:	4a80      	ldr	r2, [pc, #512]	; (8006110 <HAL_GPIO_Init+0x29c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0xa8>
 8005f14:	21b3      	movs	r1, #179	; 0xb3
 8005f16:	487c      	ldr	r0, [pc, #496]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005f18:	f7fb fe47 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005f1c:	68ab      	ldr	r3, [r5, #8]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d903      	bls.n	8005f2a <HAL_GPIO_Init+0xb6>
 8005f22:	21b4      	movs	r1, #180	; 0xb4
 8005f24:	4878      	ldr	r0, [pc, #480]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005f26:	f7fb fe40 	bl	8001baa <assert_failed>
{
 8005f2a:	2600      	movs	r6, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f2c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8006118 <HAL_GPIO_Init+0x2a4>
    ioposition = ((uint32_t)0x01) << position;
 8005f30:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f32:	682a      	ldr	r2, [r5, #0]
    ioposition = ((uint32_t)0x01) << position;
 8005f34:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f38:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8005f3c:	454f      	cmp	r7, r9
 8005f3e:	f040 80c7 	bne.w	80060d0 <HAL_GPIO_Init+0x25c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f42:	686a      	ldr	r2, [r5, #4]
 8005f44:	f022 0210 	bic.w	r2, r2, #16
 8005f48:	2a02      	cmp	r2, #2
 8005f4a:	d116      	bne.n	8005f7a <HAL_GPIO_Init+0x106>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005f4c:	692a      	ldr	r2, [r5, #16]
 8005f4e:	2a0f      	cmp	r2, #15
 8005f50:	d903      	bls.n	8005f5a <HAL_GPIO_Init+0xe6>
 8005f52:	21c5      	movs	r1, #197	; 0xc5
 8005f54:	486c      	ldr	r0, [pc, #432]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005f56:	f7fb fe28 	bl	8001baa <assert_failed>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f5a:	f006 0207 	and.w	r2, r6, #7
        temp = GPIOx->AFR[position >> 3];
 8005f5e:	08f1      	lsrs	r1, r6, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f60:	0090      	lsls	r0, r2, #2
 8005f62:	220f      	movs	r2, #15
 8005f64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005f68:	4082      	lsls	r2, r0
        temp = GPIOx->AFR[position >> 3];
 8005f6a:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f6c:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f70:	692a      	ldr	r2, [r5, #16]
 8005f72:	4082      	lsls	r2, r0
 8005f74:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8005f78:	620a      	str	r2, [r1, #32]
 8005f7a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f7e:	f04f 0a03 	mov.w	sl, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f82:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f84:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp = GPIOx->MODER;
 8005f88:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f8a:	f002 0103 	and.w	r1, r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f8e:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f92:	ea6f 0a0a 	mvn.w	sl, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f96:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f9a:	3a01      	subs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f9c:	ea00 000a 	and.w	r0, r0, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fa0:	2a01      	cmp	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005fa2:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8005fa6:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fa8:	d817      	bhi.n	8005fda <HAL_GPIO_Init+0x166>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005faa:	68ea      	ldr	r2, [r5, #12]
 8005fac:	2a03      	cmp	r2, #3
 8005fae:	d903      	bls.n	8005fb8 <HAL_GPIO_Init+0x144>
 8005fb0:	21d9      	movs	r1, #217	; 0xd9
 8005fb2:	4855      	ldr	r0, [pc, #340]	; (8006108 <HAL_GPIO_Init+0x294>)
 8005fb4:	f7fb fdf9 	bl	8001baa <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8005fb8:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fba:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fbc:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005fc0:	686b      	ldr	r3, [r5, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fc2:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005fc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fca:	430a      	orrs	r2, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005fcc:	40b3      	lsls	r3, r6
        GPIOx->OSPEEDR = temp;
 8005fce:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8005fd0:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fd2:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005fd6:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8005fd8:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8005fda:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fdc:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005fde:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005fe2:	68ab      	ldr	r3, [r5, #8]
 8005fe4:	fa03 f30b 	lsl.w	r3, r3, fp
 8005fe8:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 8005fec:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fee:	00c3      	lsls	r3, r0, #3
 8005ff0:	d56e      	bpl.n	80060d0 <HAL_GPIO_Init+0x25c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff2:	4b48      	ldr	r3, [pc, #288]	; (8006114 <HAL_GPIO_Init+0x2a0>)
 8005ff4:	f026 0103 	bic.w	r1, r6, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ff8:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800600a:	645a      	str	r2, [r3, #68]	; 0x44
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006016:	f006 0303 	and.w	r3, r6, #3
        temp = SYSCFG->EXTICR[position >> 2];
 800601a:	688a      	ldr	r2, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800601c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006020:	fa0c f30e 	lsl.w	r3, ip, lr
 8006024:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006028:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_GPIO_Init+0x290>)
 800602a:	429c      	cmp	r4, r3
 800602c:	d057      	beq.n	80060de <HAL_GPIO_Init+0x26a>
 800602e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006032:	429c      	cmp	r4, r3
 8006034:	d055      	beq.n	80060e2 <HAL_GPIO_Init+0x26e>
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	429c      	cmp	r4, r3
 800603c:	d053      	beq.n	80060e6 <HAL_GPIO_Init+0x272>
 800603e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006042:	429c      	cmp	r4, r3
 8006044:	d051      	beq.n	80060ea <HAL_GPIO_Init+0x276>
 8006046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604a:	429c      	cmp	r4, r3
 800604c:	d04f      	beq.n	80060ee <HAL_GPIO_Init+0x27a>
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	429c      	cmp	r4, r3
 8006054:	d04d      	beq.n	80060f2 <HAL_GPIO_Init+0x27e>
 8006056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605a:	429c      	cmp	r4, r3
 800605c:	d04b      	beq.n	80060f6 <HAL_GPIO_Init+0x282>
 800605e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006062:	429c      	cmp	r4, r3
 8006064:	d049      	beq.n	80060fa <HAL_GPIO_Init+0x286>
 8006066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606a:	429c      	cmp	r4, r3
 800606c:	d047      	beq.n	80060fe <HAL_GPIO_Init+0x28a>
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	429c      	cmp	r4, r3
 8006074:	bf14      	ite	ne
 8006076:	230a      	movne	r3, #10
 8006078:	2309      	moveq	r3, #9
 800607a:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800607e:	03c7      	lsls	r7, r0, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006080:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8006084:	608b      	str	r3, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
 8006086:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI->IMR;
 800608a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800608e:	bf54      	ite	pl
 8006090:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006092:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006096:	0383      	lsls	r3, r0, #14
        EXTI->IMR = temp;
 8006098:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->EMR;
 800609c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
 80060a0:	bf54      	ite	pl
 80060a2:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80060a4:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060a8:	02c7      	lsls	r7, r0, #11
        EXTI->EMR = temp;
 80060aa:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI->RTSR;
 80060ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 80060b2:	bf54      	ite	pl
 80060b4:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 80060b6:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80060ba:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060be:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR;
 80060c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
 80060c4:	bf54      	ite	pl
 80060c6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80060c8:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80060cc:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060d0:	3601      	adds	r6, #1
 80060d2:	2e10      	cmp	r6, #16
 80060d4:	f47f af2c 	bne.w	8005f30 <HAL_GPIO_Init+0xbc>
      }
    }
  }
}
 80060d8:	b003      	add	sp, #12
 80060da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80060de:	2300      	movs	r3, #0
 80060e0:	e7cb      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7c9      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e7c7      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060ea:	2303      	movs	r3, #3
 80060ec:	e7c5      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060ee:	2304      	movs	r3, #4
 80060f0:	e7c3      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060f2:	2305      	movs	r3, #5
 80060f4:	e7c1      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060f6:	2306      	movs	r3, #6
 80060f8:	e7bf      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060fa:	2307      	movs	r3, #7
 80060fc:	e7bd      	b.n	800607a <HAL_GPIO_Init+0x206>
 80060fe:	2308      	movs	r3, #8
 8006100:	e7bb      	b.n	800607a <HAL_GPIO_Init+0x206>
 8006102:	bf00      	nop
 8006104:	40020000 	.word	0x40020000
 8006108:	0803446c 	.word	0x0803446c
 800610c:	10110000 	.word	0x10110000
 8006110:	10220000 	.word	0x10220000
 8006114:	40023800 	.word	0x40023800
 8006118:	40013c00 	.word	0x40013c00

0800611c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800611c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006120:	4b5d      	ldr	r3, [pc, #372]	; (8006298 <HAL_GPIO_DeInit+0x17c>)
{
 8006122:	4604      	mov	r4, r0
 8006124:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006126:	4298      	cmp	r0, r3
 8006128:	d02c      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800612a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612e:	4298      	cmp	r0, r3
 8006130:	d028      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 8006132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006136:	4298      	cmp	r0, r3
 8006138:	d024      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800613a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800613e:	4298      	cmp	r0, r3
 8006140:	d020      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 8006142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006146:	4298      	cmp	r0, r3
 8006148:	d01c      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800614a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800614e:	4298      	cmp	r0, r3
 8006150:	d018      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	4298      	cmp	r0, r3
 8006158:	d014      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800615a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615e:	4298      	cmp	r0, r3
 8006160:	d010      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 8006162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006166:	4298      	cmp	r0, r3
 8006168:	d00c      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	4298      	cmp	r0, r3
 8006170:	d008      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 8006172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006176:	4298      	cmp	r0, r3
 8006178:	d004      	beq.n	8006184 <HAL_GPIO_DeInit+0x68>
 800617a:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800617e:	4847      	ldr	r0, [pc, #284]	; (800629c <HAL_GPIO_DeInit+0x180>)
 8006180:	f7fb fd13 	bl	8001baa <assert_failed>
{
 8006184:	2200      	movs	r2, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006186:	4846      	ldr	r0, [pc, #280]	; (80062a0 <HAL_GPIO_DeInit+0x184>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006188:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80062a4 <HAL_GPIO_DeInit+0x188>
 800618c:	f8df a118 	ldr.w	sl, [pc, #280]	; 80062a8 <HAL_GPIO_DeInit+0x18c>
 8006190:	f8df b118 	ldr.w	fp, [pc, #280]	; 80062ac <HAL_GPIO_DeInit+0x190>
    ioposition = ((uint32_t)0x01) << position;
 8006194:	2301      	movs	r3, #1
 8006196:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 800619a:	ea0e 0108 	and.w	r1, lr, r8
    if(iocurrent == ioposition)
 800619e:	458e      	cmp	lr, r1
 80061a0:	d163      	bne.n	800626a <HAL_GPIO_DeInit+0x14e>
 80061a2:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061a6:	f002 0703 	and.w	r7, r2, #3
 80061aa:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061ac:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <HAL_GPIO_DeInit+0x17c>)
 80061ae:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061b2:	00bf      	lsls	r7, r7, #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061b4:	429c      	cmp	r4, r3
 80061b6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061ba:	fa06 f607 	lsl.w	r6, r6, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 80061be:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061c2:	ea0c 0c06 	and.w	ip, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80061c6:	d055      	beq.n	8006274 <HAL_GPIO_DeInit+0x158>
 80061c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d053      	beq.n	8006278 <HAL_GPIO_DeInit+0x15c>
 80061d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061d4:	429c      	cmp	r4, r3
 80061d6:	d051      	beq.n	800627c <HAL_GPIO_DeInit+0x160>
 80061d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061dc:	429c      	cmp	r4, r3
 80061de:	d04f      	beq.n	8006280 <HAL_GPIO_DeInit+0x164>
 80061e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d04d      	beq.n	8006284 <HAL_GPIO_DeInit+0x168>
 80061e8:	454c      	cmp	r4, r9
 80061ea:	d04d      	beq.n	8006288 <HAL_GPIO_DeInit+0x16c>
 80061ec:	4554      	cmp	r4, sl
 80061ee:	d04d      	beq.n	800628c <HAL_GPIO_DeInit+0x170>
 80061f0:	455c      	cmp	r4, fp
 80061f2:	d04d      	beq.n	8006290 <HAL_GPIO_DeInit+0x174>
 80061f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f8:	429c      	cmp	r4, r3
 80061fa:	d04b      	beq.n	8006294 <HAL_GPIO_DeInit+0x178>
 80061fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006200:	429c      	cmp	r4, r3
 8006202:	bf0c      	ite	eq
 8006204:	2309      	moveq	r3, #9
 8006206:	230a      	movne	r3, #10
 8006208:	40bb      	lsls	r3, r7
 800620a:	459c      	cmp	ip, r3
 800620c:	d110      	bne.n	8006230 <HAL_GPIO_DeInit+0x114>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800620e:	68ab      	ldr	r3, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006210:	43c9      	mvns	r1, r1
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006212:	ea23 0606 	bic.w	r6, r3, r6
 8006216:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	400b      	ands	r3, r1
 800621c:	6003      	str	r3, [r0, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800621e:	6843      	ldr	r3, [r0, #4]
 8006220:	400b      	ands	r3, r1
 8006222:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006224:	6883      	ldr	r3, [r0, #8]
 8006226:	400b      	ands	r3, r1
 8006228:	6083      	str	r3, [r0, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800622a:	68c3      	ldr	r3, [r0, #12]
 800622c:	4019      	ands	r1, r3
 800622e:	60c1      	str	r1, [r0, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006230:	0055      	lsls	r5, r2, #1
 8006232:	2303      	movs	r3, #3
 8006234:	6821      	ldr	r1, [r4, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006236:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800623a:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800623c:	260f      	movs	r6, #15
 800623e:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006240:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006242:	40be      	lsls	r6, r7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006244:	4019      	ands	r1, r3
 8006246:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006248:	08d1      	lsrs	r1, r2, #3
 800624a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800624e:	6a0d      	ldr	r5, [r1, #32]
 8006250:	ea25 0606 	bic.w	r6, r5, r6
 8006254:	620e      	str	r6, [r1, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006256:	68a1      	ldr	r1, [r4, #8]
 8006258:	4019      	ands	r1, r3
 800625a:	60a1      	str	r1, [r4, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800625c:	6861      	ldr	r1, [r4, #4]
 800625e:	ea21 010e 	bic.w	r1, r1, lr
 8006262:	6061      	str	r1, [r4, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006264:	68e1      	ldr	r1, [r4, #12]
 8006266:	400b      	ands	r3, r1
 8006268:	60e3      	str	r3, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800626a:	3201      	adds	r2, #1
 800626c:	2a10      	cmp	r2, #16
 800626e:	d191      	bne.n	8006194 <HAL_GPIO_DeInit+0x78>
    }
  }
}
 8006270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006274:	2300      	movs	r3, #0
 8006276:	e7c7      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006278:	2301      	movs	r3, #1
 800627a:	e7c5      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 800627c:	2302      	movs	r3, #2
 800627e:	e7c3      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006280:	2303      	movs	r3, #3
 8006282:	e7c1      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006284:	2304      	movs	r3, #4
 8006286:	e7bf      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006288:	2305      	movs	r3, #5
 800628a:	e7bd      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 800628c:	2306      	movs	r3, #6
 800628e:	e7bb      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006290:	2307      	movs	r3, #7
 8006292:	e7b9      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006294:	2308      	movs	r3, #8
 8006296:	e7b7      	b.n	8006208 <HAL_GPIO_DeInit+0xec>
 8006298:	40020000 	.word	0x40020000
 800629c:	0803446c 	.word	0x0803446c
 80062a0:	40013c00 	.word	0x40013c00
 80062a4:	40021400 	.word	0x40021400
 80062a8:	40021800 	.word	0x40021800
 80062ac:	40021c00 	.word	0x40021c00

080062b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062b4:	460c      	mov	r4, r1
 80062b6:	b921      	cbnz	r1, 80062c2 <HAL_GPIO_ReadPin+0x12>
 80062b8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80062bc:	4804      	ldr	r0, [pc, #16]	; (80062d0 <HAL_GPIO_ReadPin+0x20>)
 80062be:	f7fb fc74 	bl	8001baa <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062c2:	692b      	ldr	r3, [r5, #16]
 80062c4:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80062c6:	bf14      	ite	ne
 80062c8:	2001      	movne	r0, #1
 80062ca:	2000      	moveq	r0, #0
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	0803446c 	.word	0x0803446c

080062d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4605      	mov	r5, r0
 80062d8:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062da:	460c      	mov	r4, r1
 80062dc:	b921      	cbnz	r1, 80062e8 <HAL_GPIO_WritePin+0x14>
 80062de:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80062e2:	4808      	ldr	r0, [pc, #32]	; (8006304 <HAL_GPIO_WritePin+0x30>)
 80062e4:	f7fb fc61 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80062e8:	2e01      	cmp	r6, #1
 80062ea:	d906      	bls.n	80062fa <HAL_GPIO_WritePin+0x26>
 80062ec:	f240 119b 	movw	r1, #411	; 0x19b
 80062f0:	4804      	ldr	r0, [pc, #16]	; (8006304 <HAL_GPIO_WritePin+0x30>)
 80062f2:	f7fb fc5a 	bl	8001baa <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062f6:	61ac      	str	r4, [r5, #24]
 80062f8:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d1fb      	bne.n	80062f6 <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062fe:	0424      	lsls	r4, r4, #16
 8006300:	e7f9      	b.n	80062f6 <HAL_GPIO_WritePin+0x22>
 8006302:	bf00      	nop
 8006304:	0803446c 	.word	0x0803446c

08006308 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800630e:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8006312:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8006316:	2801      	cmp	r0, #1
{
 8006318:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 800631c:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8006320:	d029      	beq.n	8006376 <HAL_HCD_HC_Init+0x6e>
 8006322:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8006324:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006326:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 800632a:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 800632e:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006332:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8006336:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 800633a:	bf08      	it	eq
 800633c:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 800633e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006342:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8006346:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 800634a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800634e:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006352:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006356:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800635a:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 800635e:	f8cd c008 	str.w	ip, [sp, #8]
 8006362:	6820      	ldr	r0, [r4, #0]
 8006364:	e88d 4080 	stmia.w	sp, {r7, lr}
 8006368:	f007 f826 	bl	800d3b8 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800636c:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8006370:	b004      	add	sp, #16
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8006376:	2002      	movs	r0, #2
 8006378:	e7fa      	b.n	8006370 <HAL_HCD_HC_Init+0x68>

0800637a <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800637a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800637e:	2b01      	cmp	r3, #1
{
 8006380:	b510      	push	{r4, lr}
 8006382:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006384:	d009      	beq.n	800639a <HAL_HCD_HC_Halt+0x20>
 8006386:	2301      	movs	r3, #1
 8006388:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800638c:	6800      	ldr	r0, [r0, #0]
 800638e:	f007 f8a1 	bl	800d4d4 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006392:	2000      	movs	r0, #0
 8006394:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8006398:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800639a:	2002      	movs	r0, #2
}
 800639c:	bd10      	pop	{r4, pc}
	...

080063a0 <HAL_HCD_Init>:
{
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80063a4:	4607      	mov	r7, r0
{
 80063a6:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d047      	beq.n	800643c <HAL_HCD_Init+0x9c>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80063ac:	6803      	ldr	r3, [r0, #0]
 80063ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063b2:	d006      	beq.n	80063c2 <HAL_HCD_Init+0x22>
 80063b4:	4a22      	ldr	r2, [pc, #136]	; (8006440 <HAL_HCD_Init+0xa0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <HAL_HCD_Init+0x22>
 80063ba:	217c      	movs	r1, #124	; 0x7c
 80063bc:	4821      	ldr	r0, [pc, #132]	; (8006444 <HAL_HCD_Init+0xa4>)
 80063be:	f7fb fbf4 	bl	8001baa <assert_failed>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80063c2:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 80063c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063ca:	b923      	cbnz	r3, 80063d6 <HAL_HCD_Init+0x36>
    hhcd->Lock = HAL_UNLOCKED;
 80063cc:	f887 22b8 	strb.w	r2, [r7, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7fe fb0f 	bl	80049f4 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80063d6:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80063d8:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063da:	466d      	mov	r5, sp
 80063dc:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 80063e0:	f854 0b10 	ldr.w	r0, [r4], #16
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80063e4:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80063e6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 80063ea:	f006 fea8 	bl	800d13e <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80063fe:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8006402:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006404:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006406:	f006 fe59 	bl	800d0bc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800640a:	f856 0b10 	ldr.w	r0, [r6], #16
 800640e:	2101      	movs	r1, #1
 8006410:	f006 fe9b 	bl	800d14a <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006418:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800641a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800641c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006420:	e885 0003 	stmia.w	r5, {r0, r1}
 8006424:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8006428:	6838      	ldr	r0, [r7, #0]
 800642a:	f006 ff4d 	bl	800d2c8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800642e:	2301      	movs	r3, #1
  return HAL_OK;
 8006430:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8006432:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8006436:	b00a      	add	sp, #40	; 0x28
 8006438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800643c:	2001      	movs	r0, #1
 800643e:	e7fa      	b.n	8006436 <HAL_HCD_Init+0x96>
 8006440:	40040000 	.word	0x40040000
 8006444:	080344ab 	.word	0x080344ab

08006448 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006448:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800644a:	2428      	movs	r4, #40	; 0x28
{
 800644c:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8006450:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006452:	fb04 0401 	mla	r4, r4, r1, r0
{
 8006456:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800645a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800645e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8006462:	b96f      	cbnz	r7, 8006480 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006464:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006466:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 800646c:	d02b      	beq.n	80064c6 <HAL_HCD_HC_SubmitRequest+0x7e>
 800646e:	42bb      	cmp	r3, r7
 8006470:	d029      	beq.n	80064c6 <HAL_HCD_HC_SubmitRequest+0x7e>
 8006472:	2b01      	cmp	r3, #1
 8006474:	d131      	bne.n	80064da <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006476:	2328      	movs	r3, #40	; 0x28
 8006478:	2200      	movs	r2, #0
 800647a:	fb03 0301 	mla	r3, r3, r1, r0
 800647e:	e02a      	b.n	80064d6 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006480:	f04f 0e02 	mov.w	lr, #2
 8006484:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8006488:	2b03      	cmp	r3, #3
 800648a:	d826      	bhi.n	80064da <HAL_HCD_HC_SubmitRequest+0x92>
 800648c:	a401      	add	r4, pc, #4	; (adr r4, 8006494 <HAL_HCD_HC_SubmitRequest+0x4c>)
 800648e:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	08006477 	.word	0x08006477
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	080064c7 	.word	0x080064c7
      if ((token == 1U) && (direction == 0U)) /*send data */
 80064a4:	2f01      	cmp	r7, #1
 80064a6:	d118      	bne.n	80064da <HAL_HCD_HC_SubmitRequest+0x92>
 80064a8:	b9ba      	cbnz	r2, 80064da <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 80064aa:	b925      	cbnz	r5, 80064b6 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80064ac:	2328      	movs	r3, #40	; 0x28
 80064ae:	fb03 0301 	mla	r3, r3, r1, r0
 80064b2:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064b6:	2328      	movs	r3, #40	; 0x28
 80064b8:	fb03 0301 	mla	r3, r3, r1, r0
 80064bc:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80064c0:	b14a      	cbz	r2, 80064d6 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064c2:	2202      	movs	r2, #2
 80064c4:	e007      	b.n	80064d6 <HAL_HCD_HC_SubmitRequest+0x8e>
 80064c6:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064c8:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80064cc:	b9d2      	cbnz	r2, 8006504 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064ce:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	d1f5      	bne.n	80064c2 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80064da:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80064dc:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80064de:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80064e2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064e6:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80064e8:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80064ea:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064ec:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80064ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80064f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80064f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064f8:	7c02      	ldrb	r2, [r0, #16]
 80064fa:	6800      	ldr	r0, [r0, #0]
}
 80064fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006500:	f007 b84c 	b.w	800d59c <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006504:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006508:	e7da      	b.n	80064c0 <HAL_HCD_HC_SubmitRequest+0x78>
 800650a:	bf00      	nop

0800650c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006510:	6806      	ldr	r6, [r0, #0]
{
 8006512:	b087      	sub	sp, #28
 8006514:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006516:	4630      	mov	r0, r6
 8006518:	f006 fe76 	bl	800d208 <USB_GetMode>
 800651c:	2801      	cmp	r0, #1
 800651e:	f040 80b0 	bne.w	8006682 <HAL_HCD_IRQHandler+0x176>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	f006 fe6c 	bl	800d200 <USB_ReadInterrupts>
 8006528:	2800      	cmp	r0, #0
 800652a:	f000 80aa 	beq.w	8006682 <HAL_HCD_IRQHandler+0x176>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	f006 fe66 	bl	800d200 <USB_ReadInterrupts>
 8006534:	0287      	lsls	r7, r0, #10
 8006536:	d503      	bpl.n	8006540 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800653e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	f006 fe5d 	bl	800d200 <USB_ReadInterrupts>
 8006546:	02c5      	lsls	r5, r0, #11
 8006548:	d503      	bpl.n	8006552 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006550:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	f006 fe54 	bl	800d200 <USB_ReadInterrupts>
 8006558:	0140      	lsls	r0, r0, #5
 800655a:	d503      	bpl.n	8006564 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006562:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	f006 fe4b 	bl	800d200 <USB_ReadInterrupts>
 800656a:	0781      	lsls	r1, r0, #30
 800656c:	d502      	bpl.n	8006574 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	2202      	movs	r2, #2
 8006572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	f006 fe43 	bl	800d200 <USB_ReadInterrupts>
 800657a:	0082      	lsls	r2, r0, #2
 800657c:	d510      	bpl.n	80065a0 <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800657e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8006582:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006584:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006588:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 800658c:	f7fe fa7a 	bl	8004a84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006590:	2101      	movs	r1, #1
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f006 fe3c 	bl	800d210 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800659e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	f006 fe2d 	bl	800d200 <USB_ReadInterrupts>
 80065a6:	01c3      	lsls	r3, r0, #7
 80065a8:	d542      	bpl.n	8006630 <HAL_HCD_IRQHandler+0x124>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065aa:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065ac:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80065b0:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80065b2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80065b6:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80065b8:	9b05      	ldr	r3, [sp, #20]
 80065ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065be:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	079f      	lsls	r7, r3, #30
 80065c4:	d50d      	bpl.n	80065e2 <HAL_HCD_IRQHandler+0xd6>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	07d8      	lsls	r0, r3, #31
 80065ca:	d506      	bpl.n	80065da <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80065cc:	69ab      	ldr	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80065ce:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80065d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065d4:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 80065d6:	f7fe fa51 	bl	8004a7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80065e2:	9b04      	ldr	r3, [sp, #16]
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d519      	bpl.n	800661c <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	f043 0308 	orr.w	r3, r3, #8
 80065ee:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80065f0:	9b04      	ldr	r3, [sp, #16]
 80065f2:	075a      	lsls	r2, r3, #29
 80065f4:	d550      	bpl.n	8006698 <HAL_HCD_IRQHandler+0x18c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80065f6:	69a1      	ldr	r1, [r4, #24]
 80065f8:	2902      	cmp	r1, #2
 80065fa:	d145      	bne.n	8006688 <HAL_HCD_IRQHandler+0x17c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80065fc:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065fe:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006600:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006608:	bf18      	it	ne
 800660a:	2101      	movne	r1, #1
 800660c:	f006 fe00 	bl	800d210 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006610:	4620      	mov	r0, r4
 8006612:	f7fe fa3f 	bl	8004a94 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8006616:	4620      	mov	r0, r4
 8006618:	f7fe fa30 	bl	8004a7c <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	069b      	lsls	r3, r3, #26
 8006620:	d503      	bpl.n	800662a <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006622:	9b05      	ldr	r3, [sp, #20]
 8006624:	f043 0320 	orr.w	r3, r3, #32
 8006628:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800662a:	9b05      	ldr	r3, [sp, #20]
 800662c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	f006 fde5 	bl	800d200 <USB_ReadInterrupts>
 8006636:	0707      	lsls	r7, r0, #28
 8006638:	d505      	bpl.n	8006646 <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 800663a:	4620      	mov	r0, r4
 800663c:	f7fe fa1a 	bl	8004a74 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	2208      	movs	r2, #8
 8006644:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006646:	6820      	ldr	r0, [r4, #0]
 8006648:	f006 fdda 	bl	800d200 <USB_ReadInterrupts>
 800664c:	0185      	lsls	r5, r0, #6
 800664e:	d512      	bpl.n	8006676 <HAL_HCD_IRQHandler+0x16a>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006650:	f04f 0a00 	mov.w	sl, #0
 8006654:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006658:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800665a:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 800665e:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	f006 ff32 	bl	800d4ca <USB_HC_ReadInterrupt>
 8006666:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	459a      	cmp	sl, r3
 800666c:	d323      	bcc.n	80066b6 <HAL_HCD_IRQHandler+0x1aa>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006674:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	f006 fdc2 	bl	800d200 <USB_ReadInterrupts>
 800667c:	06c3      	lsls	r3, r0, #27
 800667e:	f100 821e 	bmi.w	8006abe <HAL_HCD_IRQHandler+0x5b2>
}
 8006682:	b007      	add	sp, #28
 8006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d1c0      	bne.n	8006610 <HAL_HCD_IRQHandler+0x104>
          USBx_HOST->HFIR = 60000U;
 800668e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006692:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8006696:	e7bb      	b.n	8006610 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006698:	4620      	mov	r0, r4
 800669a:	f7fe f9ff 	bl	8004a9c <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800669e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80066a2:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80066a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066a8:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80066ac:	6993      	ldr	r3, [r2, #24]
 80066ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066b2:	6193      	str	r3, [r2, #24]
 80066b4:	e7b2      	b.n	800661c <HAL_HCD_IRQHandler+0x110>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80066b6:	f00a 030f 	and.w	r3, sl, #15
 80066ba:	9a01      	ldr	r2, [sp, #4]
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	07d8      	lsls	r0, r3, #31
 80066c2:	f140 808a 	bpl.w	80067da <HAL_HCD_IRQHandler+0x2ce>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80066c6:	f8d8 3000 	ldr.w	r3, [r8]
 80066ca:	fa5f f58a 	uxtb.w	r5, sl
 80066ce:	6820      	ldr	r0, [r4, #0]
 80066d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80066d4:	f000 8104 	beq.w	80068e0 <HAL_HCD_IRQHandler+0x3d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80066d8:	016a      	lsls	r2, r5, #5
 80066da:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80066de:	18d6      	adds	r6, r2, r3
 80066e0:	68b1      	ldr	r1, [r6, #8]
 80066e2:	0749      	lsls	r1, r1, #29
 80066e4:	d513      	bpl.n	800670e <HAL_HCD_IRQHandler+0x202>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80066e6:	2104      	movs	r1, #4
 80066e8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066ea:	68f1      	ldr	r1, [r6, #12]
 80066ec:	f041 0102 	orr.w	r1, r1, #2
 80066f0:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80066f2:	68b1      	ldr	r1, [r6, #8]
 80066f4:	0589      	lsls	r1, r1, #22
 80066f6:	d542      	bpl.n	800677e <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066f8:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066fa:	4629      	mov	r1, r5
 80066fc:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066fe:	f043 0302 	orr.w	r3, r3, #2
 8006702:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006704:	f006 fee6 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800670c:	e0c7      	b.n	800689e <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800670e:	68b1      	ldr	r1, [r6, #8]
 8006710:	0689      	lsls	r1, r1, #26
 8006712:	d502      	bpl.n	800671a <HAL_HCD_IRQHandler+0x20e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006714:	2120      	movs	r1, #32
 8006716:	60b1      	str	r1, [r6, #8]
 8006718:	e7eb      	b.n	80066f2 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800671a:	68b1      	ldr	r1, [r6, #8]
 800671c:	0709      	lsls	r1, r1, #28
 800671e:	d515      	bpl.n	800674c <HAL_HCD_IRQHandler+0x240>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006720:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006722:	f04f 0e05 	mov.w	lr, #5
 8006726:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006728:	f041 0102 	orr.w	r1, r1, #2
 800672c:	9202      	str	r2, [sp, #8]
 800672e:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006730:	fb07 4105 	mla	r1, r7, r5, r4
 8006734:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006738:	2110      	movs	r1, #16
 800673a:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800673c:	2108      	movs	r1, #8
 800673e:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006740:	4629      	mov	r1, r5
 8006742:	f006 fec7 	bl	800d4d4 <USB_HC_Halt>
 8006746:	9a02      	ldr	r2, [sp, #8]
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	e7d2      	b.n	80066f2 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800674c:	68b1      	ldr	r1, [r6, #8]
 800674e:	0549      	lsls	r1, r1, #21
 8006750:	d5cf      	bpl.n	80066f2 <HAL_HCD_IRQHandler+0x1e6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006752:	68f1      	ldr	r1, [r6, #12]
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	f041 0102 	orr.w	r1, r1, #2
 800675a:	9202      	str	r2, [sp, #8]
 800675c:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800675e:	4629      	mov	r1, r5
 8006760:	f006 feb8 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006764:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006766:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006768:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800676a:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800676c:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006770:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006772:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800677a:	60b1      	str	r1, [r6, #8]
 800677c:	e7b9      	b.n	80066f2 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800677e:	68b1      	ldr	r1, [r6, #8]
 8006780:	07c8      	lsls	r0, r1, #31
 8006782:	d53d      	bpl.n	8006800 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8006784:	6921      	ldr	r1, [r4, #16]
 8006786:	b149      	cbz	r1, 800679c <HAL_HCD_IRQHandler+0x290>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006788:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800678a:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800678e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006792:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 8006796:	1a09      	subs	r1, r1, r0
 8006798:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 800679c:	fb07 4e05 	mla	lr, r7, r5, r4
 80067a0:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067a2:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 80067a6:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80067aa:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80067ac:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80067b0:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80067b4:	d116      	bne.n	80067e4 <HAL_HCD_IRQHandler+0x2d8>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b6:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067b8:	4629      	mov	r1, r5
 80067ba:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067c2:	f006 fe87 	bl	800d4d4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067c6:	2310      	movs	r3, #16
 80067c8:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80067ca:	fb07 4505 	mla	r5, r7, r5, r4
 80067ce:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80067d2:	f083 0301 	eor.w	r3, r3, #1
 80067d6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80067da:	f10a 0a01 	add.w	sl, sl, #1
 80067de:	f108 0820 	add.w	r8, r8, #32
 80067e2:	e741      	b.n	8006668 <HAL_HCD_IRQHandler+0x15c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80067e4:	2903      	cmp	r1, #3
 80067e6:	d1f0      	bne.n	80067ca <HAL_HCD_IRQHandler+0x2be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80067e8:	58d1      	ldr	r1, [r2, r3]
 80067ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80067ee:	50d1      	str	r1, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067f0:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80067f2:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067f6:	4629      	mov	r1, r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7fe f947 	bl	8004a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80067fe:	e7e4      	b.n	80067ca <HAL_HCD_IRQHandler+0x2be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006800:	68b1      	ldr	r1, [r6, #8]
 8006802:	0789      	lsls	r1, r1, #30
 8006804:	d536      	bpl.n	8006874 <HAL_HCD_IRQHandler+0x368>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006806:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006808:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800680c:	f021 0102 	bic.w	r1, r1, #2
 8006810:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006812:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8006816:	2901      	cmp	r1, #1
 8006818:	d10c      	bne.n	8006834 <HAL_HCD_IRQHandler+0x328>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800681a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800681e:	fb07 4305 	mla	r3, r7, r5, r4
 8006822:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006824:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006828:	4620      	mov	r0, r4
 800682a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800682e:	f7fe f92d 	bl	8004a8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006832:	e7d2      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006834:	2905      	cmp	r1, #5
 8006836:	d0f0      	beq.n	800681a <HAL_HCD_IRQHandler+0x30e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006838:	2906      	cmp	r1, #6
 800683a:	d001      	beq.n	8006840 <HAL_HCD_IRQHandler+0x334>
 800683c:	2908      	cmp	r1, #8
 800683e:	d114      	bne.n	800686a <HAL_HCD_IRQHandler+0x35e>
      hhcd->hc[ch_num].ErrCnt++;
 8006840:	fb07 4105 	mla	r1, r7, r5, r4
 8006844:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8006846:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006848:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 800684a:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800684c:	bf85      	ittet	hi
 800684e:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006850:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006854:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006858:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800685c:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800685e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006862:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006866:	50d1      	str	r1, [r2, r3]
 8006868:	e7d9      	b.n	800681e <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800686a:	2903      	cmp	r1, #3
 800686c:	d1d7      	bne.n	800681e <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800686e:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8006872:	e7f3      	b.n	800685c <HAL_HCD_IRQHandler+0x350>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006874:	68b1      	ldr	r1, [r6, #8]
 8006876:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800687a:	d012      	beq.n	80068a2 <HAL_HCD_IRQHandler+0x396>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800687c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800687e:	4629      	mov	r1, r5
 8006880:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006882:	f043 0302 	orr.w	r3, r3, #2
 8006886:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006888:	fb07 4305 	mla	r3, r7, r5, r4
 800688c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800688e:	3201      	adds	r2, #1
 8006890:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006892:	2206      	movs	r2, #6
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006898:	f006 fe1c 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	60b3      	str	r3, [r6, #8]
 80068a0:	e79b      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80068a2:	68b3      	ldr	r3, [r6, #8]
 80068a4:	06da      	lsls	r2, r3, #27
 80068a6:	d598      	bpl.n	80067da <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80068a8:	fb07 4205 	mla	r2, r7, r5, r4
 80068ac:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d10a      	bne.n	80068ca <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068b4:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068b6:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068b8:	4629      	mov	r1, r5
 80068ba:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068c2:	f006 fe07 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068c6:	2310      	movs	r3, #16
 80068c8:	e7e9      	b.n	800689e <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80068ca:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80068ce:	d1fa      	bne.n	80068c6 <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068d0:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f6      	bne.n	80068c6 <HAL_HCD_IRQHandler+0x3ba>
        hhcd->hc[ch_num].state = HC_NAK;
 80068d8:	2303      	movs	r3, #3
 80068da:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80068de:	e7ea      	b.n	80068b6 <HAL_HCD_IRQHandler+0x3aa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80068e0:	0169      	lsls	r1, r5, #5
 80068e2:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 80068e6:	188e      	adds	r6, r1, r2
 80068e8:	68b3      	ldr	r3, [r6, #8]
 80068ea:	f013 0e04 	ands.w	lr, r3, #4
 80068ee:	d006      	beq.n	80068fe <HAL_HCD_IRQHandler+0x3f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80068f0:	2304      	movs	r3, #4
 80068f2:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068f4:	68f3      	ldr	r3, [r6, #12]
 80068f6:	f043 0302 	orr.w	r3, r3, #2
 80068fa:	60f3      	str	r3, [r6, #12]
 80068fc:	e76d      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80068fe:	68b3      	ldr	r3, [r6, #8]
 8006900:	f013 0320 	ands.w	r3, r3, #32
 8006904:	d014      	beq.n	8006930 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006906:	2320      	movs	r3, #32
 8006908:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800690a:	fb07 4305 	mla	r3, r7, r5, r4
 800690e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8006912:	2a01      	cmp	r2, #1
 8006914:	f47f af61 	bne.w	80067da <HAL_HCD_IRQHandler+0x2ce>
      hhcd->hc[ch_num].do_ping = 0U;
 8006918:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800691c:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800691e:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006922:	68f3      	ldr	r3, [r6, #12]
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800692a:	f006 fdd3 	bl	800d4d4 <USB_HC_Halt>
 800692e:	e754      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006930:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8006934:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006938:	d011      	beq.n	800695e <HAL_HCD_IRQHandler+0x452>
    hhcd->hc[ch_num].state = HC_NYET;
 800693a:	fb07 4205 	mla	r2, r7, r5, r4
 800693e:	2104      	movs	r1, #4
 8006940:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8006944:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006946:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 8006948:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800694c:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800694e:	68f3      	ldr	r3, [r6, #12]
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006956:	f006 fdbd 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	e79f      	b.n	800689e <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800695e:	68b3      	ldr	r3, [r6, #8]
 8006960:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8006964:	d005      	beq.n	8006972 <HAL_HCD_IRQHandler+0x466>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006966:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006968:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800696a:	f043 0302 	orr.w	r3, r3, #2
 800696e:	60f3      	str	r3, [r6, #12]
 8006970:	e6c8      	b.n	8006704 <HAL_HCD_IRQHandler+0x1f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006972:	68b3      	ldr	r3, [r6, #8]
 8006974:	07db      	lsls	r3, r3, #31
 8006976:	d511      	bpl.n	800699c <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006978:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800697a:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800697e:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006980:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006984:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 8006988:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800698a:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800698c:	f006 fda2 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006990:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8006992:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006994:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800699a:	e71e      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800699c:	68b3      	ldr	r3, [r6, #8]
 800699e:	071b      	lsls	r3, r3, #28
 80069a0:	d50e      	bpl.n	80069c0 <HAL_HCD_IRQHandler+0x4b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80069a2:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069a4:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 80069a6:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80069aa:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ac:	68f3      	ldr	r3, [r6, #12]
 80069ae:	f043 0302 	orr.w	r3, r3, #2
 80069b2:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069b4:	f006 fd8e 	bl	800d4d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80069b8:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80069ba:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80069be:	e70c      	b.n	80067da <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80069c0:	68b3      	ldr	r3, [r6, #8]
 80069c2:	06db      	lsls	r3, r3, #27
 80069c4:	d515      	bpl.n	80069f2 <HAL_HCD_IRQHandler+0x4e6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069c6:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80069ca:	2203      	movs	r2, #3
 80069cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80069d0:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069d4:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80069d8:	b92a      	cbnz	r2, 80069e6 <HAL_HCD_IRQHandler+0x4da>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80069da:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80069de:	b912      	cbnz	r2, 80069e6 <HAL_HCD_IRQHandler+0x4da>
        hhcd->hc[ch_num].do_ping = 1U;
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069e6:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069e8:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069ea:	f043 0302 	orr.w	r3, r3, #2
 80069ee:	60f3      	str	r3, [r6, #12]
 80069f0:	e767      	b.n	80068c2 <HAL_HCD_IRQHandler+0x3b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80069f2:	68b3      	ldr	r3, [r6, #8]
 80069f4:	061b      	lsls	r3, r3, #24
 80069f6:	d50c      	bpl.n	8006a12 <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069f8:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069fa:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 80069fc:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a06:	f006 fd65 	bl	800d4d4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a0a:	2306      	movs	r3, #6
 8006a0c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8006a10:	e744      	b.n	800689c <HAL_HCD_IRQHandler+0x390>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a12:	68b3      	ldr	r3, [r6, #8]
 8006a14:	055b      	lsls	r3, r3, #21
 8006a16:	d50f      	bpl.n	8006a38 <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a18:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a1a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a1c:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a20:	f043 0302 	orr.w	r3, r3, #2
 8006a24:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a26:	f006 fd55 	bl	800d4d4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a32:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a34:	2308      	movs	r3, #8
 8006a36:	e7c0      	b.n	80069ba <HAL_HCD_IRQHandler+0x4ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006a38:	68b3      	ldr	r3, [r6, #8]
 8006a3a:	0798      	lsls	r0, r3, #30
 8006a3c:	f57f aecd 	bpl.w	80067da <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a40:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a42:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006a46:	f023 0302 	bic.w	r3, r3, #2
 8006a4a:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006a4c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d10e      	bne.n	8006a72 <HAL_HCD_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006a54:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006a58:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006a5c:	3b02      	subs	r3, #2
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	f63f aedd 	bhi.w	800681e <HAL_HCD_IRQHandler+0x312>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a64:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006a68:	f083 0301 	eor.w	r3, r3, #1
 8006a6c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8006a70:	e6d5      	b.n	800681e <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d102      	bne.n	8006a7c <HAL_HCD_IRQHandler+0x570>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006a76:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8006a7a:	e6d0      	b.n	800681e <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d0fa      	beq.n	8006a76 <HAL_HCD_IRQHandler+0x56a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d102      	bne.n	8006a8a <HAL_HCD_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a84:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8006a88:	e6c9      	b.n	800681e <HAL_HCD_IRQHandler+0x312>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a8a:	2b06      	cmp	r3, #6
 8006a8c:	d002      	beq.n	8006a94 <HAL_HCD_IRQHandler+0x588>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	f47f aec5 	bne.w	800681e <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].ErrCnt++;
 8006a94:	fb07 4005 	mla	r0, r7, r5, r4
 8006a98:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006a9a:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006a9c:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8006a9e:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006aa0:	bf85      	ittet	hi
 8006aa2:	2304      	movhi	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006aa4:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006aa8:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006aac:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ab0:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006aba:	508b      	str	r3, [r1, r2]
 8006abc:	e6af      	b.n	800681e <HAL_HCD_IRQHandler+0x312>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006abe:	6826      	ldr	r6, [r4, #0]
 8006ac0:	69b3      	ldr	r3, [r6, #24]
 8006ac2:	f023 0310 	bic.w	r3, r3, #16
 8006ac6:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8006ac8:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006aca:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8006ace:	2a02      	cmp	r2, #2
 8006ad0:	d129      	bne.n	8006b26 <HAL_HCD_IRQHandler+0x61a>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ad2:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006ad6:	f1b8 0f00 	cmp.w	r8, #0
 8006ada:	d024      	beq.n	8006b26 <HAL_HCD_IRQHandler+0x61a>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006adc:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006ae0:	2728      	movs	r7, #40	; 0x28
 8006ae2:	fb07 4705 	mla	r7, r7, r5, r4
 8006ae6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ae8:	b1e9      	cbz	r1, 8006b26 <HAL_HCD_IRQHandler+0x61a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006aea:	4642      	mov	r2, r8
 8006aec:	4630      	mov	r0, r6
 8006aee:	f006 fb79 	bl	800d1e4 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006af4:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006af8:	4443      	add	r3, r8
 8006afa:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	4443      	add	r3, r8
 8006b00:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006b02:	016b      	lsls	r3, r5, #5
 8006b04:	199a      	adds	r2, r3, r6
 8006b06:	6911      	ldr	r1, [r2, #16]
 8006b08:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <HAL_HCD_IRQHandler+0x628>)
 8006b0a:	400a      	ands	r2, r1
 8006b0c:	b15a      	cbz	r2, 8006b26 <HAL_HCD_IRQHandler+0x61a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b0e:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b10:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b18:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b1a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006b1e:	f083 0301 	eor.w	r3, r3, #1
 8006b22:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	6993      	ldr	r3, [r2, #24]
 8006b2a:	f043 0310 	orr.w	r3, r3, #16
 8006b2e:	6193      	str	r3, [r2, #24]
 8006b30:	e5a7      	b.n	8006682 <HAL_HCD_IRQHandler+0x176>
 8006b32:	bf00      	nop
 8006b34:	1ff80000 	.word	0x1ff80000

08006b38 <HAL_HCD_Start>:
{
 8006b38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8006b3a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 8006b3e:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d00d      	beq.n	8006b60 <HAL_HCD_Start+0x28>
 8006b44:	2501      	movs	r5, #1
 8006b46:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	f006 faf1 	bl	800d132 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006b50:	4629      	mov	r1, r5
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	f006 fb97 	bl	800d286 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006b58:	2000      	movs	r0, #0
 8006b5a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8006b60:	2002      	movs	r0, #2
}
 8006b62:	bd38      	pop	{r3, r4, r5, pc}

08006b64 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006b64:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006b68:	2b01      	cmp	r3, #1
{
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006b6e:	d009      	beq.n	8006b84 <HAL_HCD_Stop+0x20>
 8006b70:	2301      	movs	r3, #1
 8006b72:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	f006 fdc2 	bl	800d700 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8006b82:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006b84:	2002      	movs	r0, #2
}
 8006b86:	bd10      	pop	{r4, pc}

08006b88 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006b88:	6800      	ldr	r0, [r0, #0]
 8006b8a:	f006 bb5e 	b.w	800d24a <USB_ResetPort>

08006b8e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006b8e:	2328      	movs	r3, #40	; 0x28
 8006b90:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006b94:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006b98:	4770      	bx	lr

08006b9a <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006b9a:	2328      	movs	r3, #40	; 0x28
 8006b9c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006ba0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ba4:	6800      	ldr	r0, [r0, #0]
 8006ba6:	f006 bc02 	b.w	800d3ae <USB_GetCurrentFrame>

08006baa <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	f006 bbf4 	b.w	800d398 <USB_GetHostSpeed>

08006bb0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006bb0:	6803      	ldr	r3, [r0, #0]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	0791      	lsls	r1, r2, #30
 8006bb6:	d501      	bpl.n	8006bbc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006bb8:	2200      	movs	r2, #0
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	07d2      	lsls	r2, r2, #31
 8006bc0:	d403      	bmi.n	8006bca <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006bc2:	699a      	ldr	r2, [r3, #24]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	619a      	str	r2, [r3, #24]
 8006bca:	4770      	bx	lr

08006bcc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	461f      	mov	r7, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006bd4:	4a25      	ldr	r2, [pc, #148]	; (8006c6c <I2C_TransferConfig+0xa0>)
{
 8006bd6:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006bd8:	6803      	ldr	r3, [r0, #0]
{
 8006bda:	460c      	mov	r4, r1
 8006bdc:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d010      	beq.n	8006c04 <I2C_TransferConfig+0x38>
 8006be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00c      	beq.n	8006c04 <I2C_TransferConfig+0x38>
 8006bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d008      	beq.n	8006c04 <I2C_TransferConfig+0x38>
 8006bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <I2C_TransferConfig+0x38>
 8006bfa:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8006bfe:	481c      	ldr	r0, [pc, #112]	; (8006c70 <I2C_TransferConfig+0xa4>)
 8006c00:	f7fa ffd3 	bl	8001baa <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006c04:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006c08:	d007      	beq.n	8006c1a <I2C_TransferConfig+0x4e>
 8006c0a:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8006c0e:	d004      	beq.n	8006c1a <I2C_TransferConfig+0x4e>
 8006c10:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8006c14:	4816      	ldr	r0, [pc, #88]	; (8006c70 <I2C_TransferConfig+0xa4>)
 8006c16:	f7fa ffc8 	bl	8001baa <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <I2C_TransferConfig+0xa8>)
 8006c1c:	429d      	cmp	r5, r3
 8006c1e:	d00b      	beq.n	8006c38 <I2C_TransferConfig+0x6c>
 8006c20:	f425 6280 	bic.w	r2, r5, #1024	; 0x400
 8006c24:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d005      	beq.n	8006c38 <I2C_TransferConfig+0x6c>
 8006c2c:	b125      	cbz	r5, 8006c38 <I2C_TransferConfig+0x6c>
 8006c2e:	f641 01c3 	movw	r1, #6339	; 0x18c3
 8006c32:	480f      	ldr	r0, [pc, #60]	; (8006c70 <I2C_TransferConfig+0xa4>)
 8006c34:	f7fa ffb9 	bl	8001baa <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006c38:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8006c3c:	f8d8 1000 	ldr.w	r1, [r8]
 8006c40:	433b      	orrs	r3, r7
 8006c42:	684a      	ldr	r2, [r1, #4]
 8006c44:	432b      	orrs	r3, r5
 8006c46:	0d6d      	lsrs	r5, r5, #21
 8006c48:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8006c4c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006c50:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8006c54:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8006c58:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8006c5c:	f045 0503 	orr.w	r5, r5, #3
 8006c60:	ea22 0505 	bic.w	r5, r2, r5
 8006c64:	432b      	orrs	r3, r5
 8006c66:	604b      	str	r3, [r1, #4]
 8006c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6c:	40005400 	.word	0x40005400
 8006c70:	080344e9 	.word	0x080344e9
 8006c74:	80004000 	.word	0x80004000

08006c78 <I2C_WaitOnFlagUntilTimeout>:
{
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	9f06      	ldr	r7, [sp, #24]
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4688      	mov	r8, r1
 8006c82:	4616      	mov	r6, r2
 8006c84:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	6993      	ldr	r3, [r2, #24]
 8006c8a:	ea38 0303 	bics.w	r3, r8, r3
 8006c8e:	bf0c      	ite	eq
 8006c90:	2301      	moveq	r3, #1
 8006c92:	2300      	movne	r3, #0
 8006c94:	42b3      	cmp	r3, r6
 8006c96:	d002      	beq.n	8006c9e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006c98:	2000      	movs	r0, #0
}
 8006c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8006c9e:	1c6b      	adds	r3, r5, #1
 8006ca0:	d0f2      	beq.n	8006c88 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fe fb49 	bl	8005338 <HAL_GetTick>
 8006ca6:	1bc0      	subs	r0, r0, r7
 8006ca8:	4285      	cmp	r5, r0
 8006caa:	d301      	bcc.n	8006cb0 <I2C_WaitOnFlagUntilTimeout+0x38>
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	d1ea      	bne.n	8006c86 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006cb2:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	2320      	movs	r3, #32
 8006cbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006cc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cce <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cce:	6803      	ldr	r3, [r0, #0]
{
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cd4:	6998      	ldr	r0, [r3, #24]
{
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cda:	f010 0010 	ands.w	r0, r0, #16
 8006cde:	d116      	bne.n	8006d0e <I2C_IsAcknowledgeFailed+0x40>
 8006ce0:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8006ce2:	1c69      	adds	r1, r5, #1
 8006ce4:	d014      	beq.n	8006d10 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce6:	f7fe fb27 	bl	8005338 <HAL_GetTick>
 8006cea:	1b80      	subs	r0, r0, r6
 8006cec:	4285      	cmp	r5, r0
 8006cee:	d300      	bcc.n	8006cf2 <I2C_IsAcknowledgeFailed+0x24>
 8006cf0:	b96d      	cbnz	r5, 8006d0e <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006cf4:	f043 0320 	orr.w	r3, r3, #32
 8006cf8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	2320      	movs	r3, #32
 8006cfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d00:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006d02:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006d08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006d0c:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6999      	ldr	r1, [r3, #24]
 8006d12:	068a      	lsls	r2, r1, #26
 8006d14:	d5e5      	bpl.n	8006ce2 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d16:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d18:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8006d1a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d1c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d1e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006d20:	f7ff ff46 	bl	8006bb0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	6853      	ldr	r3, [r2, #4]
 8006d28:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006d2c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006d30:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d3c:	f043 0304 	orr.w	r3, r3, #4
 8006d40:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d42:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8006d46:	e7db      	b.n	8006d00 <I2C_IsAcknowledgeFailed+0x32>

08006d48 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	079b      	lsls	r3, r3, #30
 8006d56:	d501      	bpl.n	8006d5c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006d58:	2000      	movs	r0, #0
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7ff ffb4 	bl	8006cce <I2C_IsAcknowledgeFailed>
 8006d66:	b9a0      	cbnz	r0, 8006d92 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006d68:	1c6a      	adds	r2, r5, #1
 8006d6a:	d0f1      	beq.n	8006d50 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d6c:	f7fe fae4 	bl	8005338 <HAL_GetTick>
 8006d70:	1b80      	subs	r0, r0, r6
 8006d72:	4285      	cmp	r5, r0
 8006d74:	d301      	bcc.n	8006d7a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	d1ea      	bne.n	8006d50 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006d7c:	f043 0320 	orr.w	r3, r3, #32
 8006d80:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d82:	2320      	movs	r3, #32
 8006d84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006d92:	2001      	movs	r0, #1
}
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d98 <I2C_RequestMemoryWrite>:
{
 8006d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d9a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d9c:	4b16      	ldr	r3, [pc, #88]	; (8006df8 <I2C_RequestMemoryWrite+0x60>)
{
 8006d9e:	4605      	mov	r5, r0
 8006da0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006da2:	9300      	str	r3, [sp, #0]
{
 8006da4:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006da6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006daa:	b2fa      	uxtb	r2, r7
 8006dac:	f7ff ff0e 	bl	8006bcc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db0:	4632      	mov	r2, r6
 8006db2:	9908      	ldr	r1, [sp, #32]
 8006db4:	4628      	mov	r0, r5
 8006db6:	f7ff ffc7 	bl	8006d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dba:	b110      	cbz	r0, 8006dc2 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8006dbc:	2001      	movs	r0, #1
}
 8006dbe:	b003      	add	sp, #12
 8006dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dc2:	2f01      	cmp	r7, #1
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	d10c      	bne.n	8006de2 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dc8:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd0:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd2:	9b08      	ldr	r3, [sp, #32]
 8006dd4:	9600      	str	r6, [sp, #0]
 8006dd6:	f7ff ff4f 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006dda:	3000      	adds	r0, #0
 8006ddc:	bf18      	it	ne
 8006dde:	2001      	movne	r0, #1
 8006de0:	e7ed      	b.n	8006dbe <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006de2:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de4:	9908      	ldr	r1, [sp, #32]
 8006de6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006de8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dea:	4632      	mov	r2, r6
 8006dec:	f7ff ffac 	bl	8006d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1e3      	bne.n	8006dbc <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	e7e7      	b.n	8006dc8 <I2C_RequestMemoryWrite+0x30>
 8006df8:	80002000 	.word	0x80002000

08006dfc <I2C_RequestMemoryRead>:
{
 8006dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dfe:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e00:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <I2C_RequestMemoryRead+0x60>)
{
 8006e02:	4605      	mov	r5, r0
 8006e04:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e06:	9300      	str	r3, [sp, #0]
{
 8006e08:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	b2fa      	uxtb	r2, r7
 8006e0e:	f7ff fedd 	bl	8006bcc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	4632      	mov	r2, r6
 8006e14:	9908      	ldr	r1, [sp, #32]
 8006e16:	4628      	mov	r0, r5
 8006e18:	f7ff ff96 	bl	8006d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e1c:	b110      	cbz	r0, 8006e24 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8006e1e:	2001      	movs	r0, #1
}
 8006e20:	b003      	add	sp, #12
 8006e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e24:	2f01      	cmp	r7, #1
 8006e26:	682b      	ldr	r3, [r5, #0]
 8006e28:	d10c      	bne.n	8006e44 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e2a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2140      	movs	r1, #64	; 0x40
 8006e30:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e32:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e34:	9b08      	ldr	r3, [sp, #32]
 8006e36:	9600      	str	r6, [sp, #0]
 8006e38:	f7ff ff1e 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006e3c:	3000      	adds	r0, #0
 8006e3e:	bf18      	it	ne
 8006e40:	2001      	movne	r0, #1
 8006e42:	e7ed      	b.n	8006e20 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e44:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e46:	9908      	ldr	r1, [sp, #32]
 8006e48:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	f7ff ff7b 	bl	8006d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d1e3      	bne.n	8006e1e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e56:	682b      	ldr	r3, [r5, #0]
 8006e58:	e7e7      	b.n	8006e2a <I2C_RequestMemoryRead+0x2e>
 8006e5a:	bf00      	nop
 8006e5c:	80002000 	.word	0x80002000

08006e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4604      	mov	r4, r0
 8006e64:	460d      	mov	r5, r1
 8006e66:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	069b      	lsls	r3, r3, #26
 8006e6e:	d501      	bpl.n	8006e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006e70:	2000      	movs	r0, #0
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e74:	4632      	mov	r2, r6
 8006e76:	4629      	mov	r1, r5
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff ff28 	bl	8006cce <I2C_IsAcknowledgeFailed>
 8006e7e:	b990      	cbnz	r0, 8006ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e80:	f7fe fa5a 	bl	8005338 <HAL_GetTick>
 8006e84:	1b80      	subs	r0, r0, r6
 8006e86:	4285      	cmp	r5, r0
 8006e88:	d301      	bcc.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	d1ec      	bne.n	8006e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e90:	f043 0320 	orr.w	r3, r3, #32
 8006e94:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	2320      	movs	r3, #32
 8006e98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ea2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006ea6:	2001      	movs	r0, #1
}
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006eac <HAL_I2C_Init>:
{
 8006eac:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006eae:	4604      	mov	r4, r0
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	f000 809e 	beq.w	8006ff2 <HAL_I2C_Init+0x146>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006eb6:	6803      	ldr	r3, [r0, #0]
 8006eb8:	4a4f      	ldr	r2, [pc, #316]	; (8006ff8 <HAL_I2C_Init+0x14c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d010      	beq.n	8006ee0 <HAL_I2C_Init+0x34>
 8006ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_I2C_Init+0x34>
 8006ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d008      	beq.n	8006ee0 <HAL_I2C_Init+0x34>
 8006ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_I2C_Init+0x34>
 8006ed6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006eda:	4848      	ldr	r0, [pc, #288]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006edc:	f7fa fe65 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006ee0:	68a3      	ldr	r3, [r4, #8]
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee6:	d304      	bcc.n	8006ef2 <HAL_I2C_Init+0x46>
 8006ee8:	f240 11df 	movw	r1, #479	; 0x1df
 8006eec:	4843      	ldr	r0, [pc, #268]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006eee:	f7fa fe5c 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d904      	bls.n	8006f04 <HAL_I2C_Init+0x58>
 8006efa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006efe:	483f      	ldr	r0, [pc, #252]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f00:	f7fa fe53 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8006f0a:	d004      	beq.n	8006f16 <HAL_I2C_Init+0x6a>
 8006f0c:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006f10:	483a      	ldr	r0, [pc, #232]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f12:	f7fa fe4a 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006f16:	6963      	ldr	r3, [r4, #20]
 8006f18:	2bff      	cmp	r3, #255	; 0xff
 8006f1a:	d904      	bls.n	8006f26 <HAL_I2C_Init+0x7a>
 8006f1c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006f20:	4836      	ldr	r0, [pc, #216]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f22:	f7fa fe42 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006f26:	69a3      	ldr	r3, [r4, #24]
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d904      	bls.n	8006f36 <HAL_I2C_Init+0x8a>
 8006f2c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8006f30:	4832      	ldr	r0, [pc, #200]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f32:	f7fa fe3a 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006f36:	69e3      	ldr	r3, [r4, #28]
 8006f38:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006f3c:	d004      	beq.n	8006f48 <HAL_I2C_Init+0x9c>
 8006f3e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8006f42:	482e      	ldr	r0, [pc, #184]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f44:	f7fa fe31 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006f48:	6a23      	ldr	r3, [r4, #32]
 8006f4a:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8006f4e:	d004      	beq.n	8006f5a <HAL_I2C_Init+0xae>
 8006f50:	f240 11e5 	movw	r1, #485	; 0x1e5
 8006f54:	4829      	ldr	r0, [pc, #164]	; (8006ffc <HAL_I2C_Init+0x150>)
 8006f56:	f7fa fe28 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006f5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f62:	b923      	cbnz	r3, 8006f6e <HAL_I2C_Init+0xc2>
    hi2c->Lock = HAL_UNLOCKED;
 8006f64:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7fa fc77 	bl	800185c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f6e:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f70:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f76:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f88:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f90:	609a      	str	r2, [r3, #8]
 8006f92:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f94:	d124      	bne.n	8006fe0 <HAL_I2C_Init+0x134>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f9a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f9c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f9e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006fa0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fa2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006faa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fb2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	69a1      	ldr	r1, [r4, #24]
 8006fba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fbe:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006fc0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fc2:	69e2      	ldr	r2, [r4, #28]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fd8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8006fde:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fe0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fe4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fe6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fe8:	d1d8      	bne.n	8006f9c <HAL_I2C_Init+0xf0>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	e7d4      	b.n	8006f9c <HAL_I2C_Init+0xf0>
    return HAL_ERROR;
 8006ff2:	2001      	movs	r0, #1
}
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40005400 	.word	0x40005400
 8006ffc:	080344e9 	.word	0x080344e9

08007000 <HAL_I2C_DeInit>:
{
 8007000:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007002:	4604      	mov	r4, r0
 8007004:	b348      	cbz	r0, 800705a <HAL_I2C_DeInit+0x5a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007006:	6803      	ldr	r3, [r0, #0]
 8007008:	4a15      	ldr	r2, [pc, #84]	; (8007060 <HAL_I2C_DeInit+0x60>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d010      	beq.n	8007030 <HAL_I2C_DeInit+0x30>
 800700e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007012:	4293      	cmp	r3, r2
 8007014:	d00c      	beq.n	8007030 <HAL_I2C_DeInit+0x30>
 8007016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800701a:	4293      	cmp	r3, r2
 800701c:	d008      	beq.n	8007030 <HAL_I2C_DeInit+0x30>
 800701e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_I2C_DeInit+0x30>
 8007026:	f240 214b 	movw	r1, #587	; 0x24b
 800702a:	480e      	ldr	r0, [pc, #56]	; (8007064 <HAL_I2C_DeInit+0x64>)
 800702c:	f7fa fdbd 	bl	8001baa <assert_failed>
  __HAL_I2C_DISABLE(hi2c);
 8007030:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007032:	2324      	movs	r3, #36	; 0x24
  HAL_I2C_MspDeInit(hi2c);
 8007034:	4620      	mov	r0, r4
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007036:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007042:	f7fa fc6b 	bl	800191c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007046:	2000      	movs	r0, #0
 8007048:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800704a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800704e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007052:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8007058:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800705a:	2001      	movs	r0, #1
}
 800705c:	bd10      	pop	{r4, pc}
 800705e:	bf00      	nop
 8007060:	40005400 	.word	0x40005400
 8007064:	080344e9 	.word	0x080344e9

08007068 <HAL_I2C_Mem_Write>:
{
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800706e:	3b01      	subs	r3, #1
{
 8007070:	b085      	sub	sp, #20
 8007072:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007074:	2b01      	cmp	r3, #1
{
 8007076:	460f      	mov	r7, r1
 8007078:	9203      	str	r2, [sp, #12]
 800707a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800707e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007082:	d904      	bls.n	800708e <HAL_I2C_Mem_Write+0x26>
 8007084:	f640 01ed 	movw	r1, #2285	; 0x8ed
 8007088:	4857      	ldr	r0, [pc, #348]	; (80071e8 <HAL_I2C_Mem_Write+0x180>)
 800708a:	f7fa fd8e 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800708e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007092:	2b20      	cmp	r3, #32
 8007094:	f040 80a5 	bne.w	80071e2 <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 8007098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800709a:	b113      	cbz	r3, 80070a2 <HAL_I2C_Mem_Write+0x3a>
 800709c:	f1bb 0f00 	cmp.w	fp, #0
 80070a0:	d106      	bne.n	80070b0 <HAL_I2C_Mem_Write+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070a6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80070a8:	2001      	movs	r0, #1
}
 80070aa:	b005      	add	sp, #20
 80070ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80070b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f000 8094 	beq.w	80071e2 <HAL_I2C_Mem_Write+0x17a>
 80070ba:	2501      	movs	r5, #1
 80070bc:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80070c0:	f7fe f93a 	bl	8005338 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070c4:	2319      	movs	r3, #25
 80070c6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80070c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070ca:	462a      	mov	r2, r5
 80070cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fdd1 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
 80070d6:	4681      	mov	r9, r0
 80070d8:	2800      	cmp	r0, #0
 80070da:	d1e5      	bne.n	80070a8 <HAL_I2C_Mem_Write+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070dc:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80070de:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070e0:	9601      	str	r6, [sp, #4]
 80070e2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070e8:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070ea:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80070f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f4:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070f6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80070f8:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070fa:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 80070fc:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007100:	9a03      	ldr	r2, [sp, #12]
 8007102:	f7ff fe49 	bl	8006d98 <I2C_RequestMemoryWrite>
 8007106:	b110      	cbz	r0, 800710e <HAL_I2C_Mem_Write+0xa6>
      __HAL_UNLOCK(hi2c);
 8007108:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800710c:	e7cc      	b.n	80070a8 <HAL_I2C_Mem_Write+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800710e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2bff      	cmp	r3, #255	; 0xff
 8007114:	d955      	bls.n	80071c2 <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007116:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800711c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800711e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007120:	4639      	mov	r1, r7
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff fd52 	bl	8006bcc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007128:	4632      	mov	r2, r6
 800712a:	4641      	mov	r1, r8
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff fe0b 	bl	8006d48 <I2C_WaitOnTXISFlagUntilTimeout>
 8007132:	2800      	cmp	r0, #0
 8007134:	d1b8      	bne.n	80070a8 <HAL_I2C_Mem_Write+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800713e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007140:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007142:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007144:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007146:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007148:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800714a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800714c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800714e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007152:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007154:	b29b      	uxth	r3, r3
 8007156:	b1ab      	cbz	r3, 8007184 <HAL_I2C_Mem_Write+0x11c>
 8007158:	b9a2      	cbnz	r2, 8007184 <HAL_I2C_Mem_Write+0x11c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800715a:	9600      	str	r6, [sp, #0]
 800715c:	4643      	mov	r3, r8
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff fd89 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
 8007166:	2800      	cmp	r0, #0
 8007168:	d19e      	bne.n	80070a8 <HAL_I2C_Mem_Write+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800716a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d92f      	bls.n	80071d2 <HAL_I2C_Mem_Write+0x16a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007172:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007178:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800717a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800717c:	4639      	mov	r1, r7
 800717e:	4620      	mov	r0, r4
 8007180:	f7ff fd24 	bl	8006bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8007184:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1cd      	bne.n	8007128 <HAL_I2C_Mem_Write+0xc0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800718c:	4632      	mov	r2, r6
 800718e:	4641      	mov	r1, r8
 8007190:	4620      	mov	r0, r4
 8007192:	f7ff fe65 	bl	8006e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007196:	2800      	cmp	r0, #0
 8007198:	d186      	bne.n	80070a8 <HAL_I2C_Mem_Write+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	2120      	movs	r1, #32
 800719e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80071a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80071aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80071ae:	f022 0201 	bic.w	r2, r2, #1
 80071b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80071b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80071c0:	e773      	b.n	80070aa <HAL_I2C_Mem_Write+0x42>
      hi2c->XferSize = hi2c->XferCount;
 80071c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071c8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80071ca:	b292      	uxth	r2, r2
 80071cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	e7a6      	b.n	8007120 <HAL_I2C_Mem_Write+0xb8>
          hi2c->XferSize = hi2c->XferCount;
 80071d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071d8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80071da:	b292      	uxth	r2, r2
 80071dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	e7cc      	b.n	800717c <HAL_I2C_Mem_Write+0x114>
    return HAL_BUSY;
 80071e2:	2002      	movs	r0, #2
 80071e4:	e761      	b.n	80070aa <HAL_I2C_Mem_Write+0x42>
 80071e6:	bf00      	nop
 80071e8:	080344e9 	.word	0x080344e9

080071ec <HAL_I2C_Mem_Read>:
{
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80071f2:	3b01      	subs	r3, #1
{
 80071f4:	b085      	sub	sp, #20
 80071f6:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80071f8:	2b01      	cmp	r3, #1
{
 80071fa:	460f      	mov	r7, r1
 80071fc:	9203      	str	r2, [sp, #12]
 80071fe:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8007202:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007206:	d904      	bls.n	8007212 <HAL_I2C_Mem_Read+0x26>
 8007208:	f640 1174 	movw	r1, #2420	; 0x974
 800720c:	4859      	ldr	r0, [pc, #356]	; (8007374 <HAL_I2C_Mem_Read+0x188>)
 800720e:	f7fa fccc 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007212:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007216:	2b20      	cmp	r3, #32
 8007218:	f040 80a9 	bne.w	800736e <HAL_I2C_Mem_Read+0x182>
    if ((pData == NULL) || (Size == 0U))
 800721c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800721e:	b113      	cbz	r3, 8007226 <HAL_I2C_Mem_Read+0x3a>
 8007220:	f1bb 0f00 	cmp.w	fp, #0
 8007224:	d106      	bne.n	8007234 <HAL_I2C_Mem_Read+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800722a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800722c:	2001      	movs	r0, #1
}
 800722e:	b005      	add	sp, #20
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007234:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007238:	2b01      	cmp	r3, #1
 800723a:	f000 8098 	beq.w	800736e <HAL_I2C_Mem_Read+0x182>
 800723e:	2501      	movs	r5, #1
 8007240:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007244:	f7fe f878 	bl	8005338 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007248:	2319      	movs	r3, #25
 800724a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800724c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800724e:	462a      	mov	r2, r5
 8007250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007254:	4620      	mov	r0, r4
 8007256:	f7ff fd0f 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
 800725a:	4681      	mov	r9, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d1e5      	bne.n	800722c <HAL_I2C_Mem_Read+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007260:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8007262:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007264:	9601      	str	r6, [sp, #4]
 8007266:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007268:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800726c:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800726e:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8007276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007278:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800727a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800727c:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800727e:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 8007280:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007284:	9a03      	ldr	r2, [sp, #12]
 8007286:	f7ff fdb9 	bl	8006dfc <I2C_RequestMemoryRead>
 800728a:	b110      	cbz	r0, 8007292 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 800728c:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8007290:	e7cc      	b.n	800722c <HAL_I2C_Mem_Read+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007294:	b29b      	uxth	r3, r3
 8007296:	2bff      	cmp	r3, #255	; 0xff
 8007298:	4b37      	ldr	r3, [pc, #220]	; (8007378 <HAL_I2C_Mem_Read+0x18c>)
 800729a:	d958      	bls.n	800734e <HAL_I2C_Mem_Read+0x162>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800729c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072a4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80072a6:	4639      	mov	r1, r7
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff fc8f 	bl	8006bcc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80072ae:	9600      	str	r6, [sp, #0]
 80072b0:	4643      	mov	r3, r8
 80072b2:	2200      	movs	r2, #0
 80072b4:	2104      	movs	r1, #4
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7ff fcde 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d1b5      	bne.n	800722c <HAL_I2C_Mem_Read+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072c0:	6822      	ldr	r2, [r4, #0]
 80072c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80072c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80072ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80072cc:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80072ce:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80072d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80072d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80072d4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80072d6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80072d8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	b1ab      	cbz	r3, 8007310 <HAL_I2C_Mem_Read+0x124>
 80072e4:	b9a2      	cbnz	r2, 8007310 <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072e6:	9600      	str	r6, [sp, #0]
 80072e8:	4643      	mov	r3, r8
 80072ea:	2180      	movs	r1, #128	; 0x80
 80072ec:	4620      	mov	r0, r4
 80072ee:	f7ff fcc3 	bl	8006c78 <I2C_WaitOnFlagUntilTimeout>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d19a      	bne.n	800722c <HAL_I2C_Mem_Read+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2bff      	cmp	r3, #255	; 0xff
 80072fc:	d92f      	bls.n	800735e <HAL_I2C_Mem_Read+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072fe:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007304:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007306:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007308:	4639      	mov	r1, r7
 800730a:	4620      	mov	r0, r4
 800730c:	f7ff fc5e 	bl	8006bcc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8007310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1ca      	bne.n	80072ae <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007318:	4632      	mov	r2, r6
 800731a:	4641      	mov	r1, r8
 800731c:	4620      	mov	r0, r4
 800731e:	f7ff fd9f 	bl	8006e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007322:	2800      	cmp	r0, #0
 8007324:	d182      	bne.n	800722c <HAL_I2C_Mem_Read+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	2120      	movs	r1, #32
 800732a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007332:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007336:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007340:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007344:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007348:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800734c:	e76f      	b.n	800722e <HAL_I2C_Mem_Read+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800734e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007356:	b292      	uxth	r2, r2
 8007358:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	e7a3      	b.n	80072a6 <HAL_I2C_Mem_Read+0xba>
          hi2c->XferSize = hi2c->XferCount;
 800735e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007364:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007366:	b292      	uxth	r2, r2
 8007368:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	e7cc      	b.n	8007308 <HAL_I2C_Mem_Read+0x11c>
    return HAL_BUSY;
 800736e:	2002      	movs	r0, #2
 8007370:	e75d      	b.n	800722e <HAL_I2C_Mem_Read+0x42>
 8007372:	bf00      	nop
 8007374:	080344e9 	.word	0x080344e9
 8007378:	80002400 	.word	0x80002400

0800737c <HAL_I2C_GetState>:
  return hi2c->State;
 800737c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007380:	4770      	bx	lr
	...

08007384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007384:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007386:	4a20      	ldr	r2, [pc, #128]	; (8007408 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
{
 8007388:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800738a:	6803      	ldr	r3, [r0, #0]
{
 800738c:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800738e:	4293      	cmp	r3, r2
 8007390:	d00f      	beq.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8007392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007396:	4293      	cmp	r3, r2
 8007398:	d00b      	beq.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800739a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800739e:	4293      	cmp	r3, r2
 80073a0:	d007      	beq.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 80073a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d003      	beq.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 80073aa:	215f      	movs	r1, #95	; 0x5f
 80073ac:	4817      	ldr	r0, [pc, #92]	; (800740c <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 80073ae:	f7fa fbfc 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80073b2:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 80073b6:	d003      	beq.n	80073c0 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 80073b8:	2160      	movs	r1, #96	; 0x60
 80073ba:	4814      	ldr	r0, [pc, #80]	; (800740c <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 80073bc:	f7fa fbf5 	bl	8001baa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	2a20      	cmp	r2, #32
 80073c8:	d11c      	bne.n	8007404 <HAL_I2CEx_ConfigAnalogFilter+0x80>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d018      	beq.n	8007404 <HAL_I2CEx_ConfigAnalogFilter+0x80>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073d2:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	6819      	ldr	r1, [r3, #0]
 80073de:	f021 0101 	bic.w	r1, r1, #1
 80073e2:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80073ea:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	430d      	orrs	r5, r1
 80073f0:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	f041 0101 	orr.w	r1, r1, #1
 80073f8:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80073fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80073fe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 8007402:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8007404:	2002      	movs	r0, #2
  }
}
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	40005400 	.word	0x40005400
 800740c:	08034527 	.word	0x08034527

08007410 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007410:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007412:	4a1f      	ldr	r2, [pc, #124]	; (8007490 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
{
 8007414:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007416:	6803      	ldr	r3, [r0, #0]
{
 8007418:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 800741e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8007426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 800742e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 8007436:	218d      	movs	r1, #141	; 0x8d
 8007438:	4816      	ldr	r0, [pc, #88]	; (8007494 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 800743a:	f7fa fbb6 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800743e:	2d0f      	cmp	r5, #15
 8007440:	d903      	bls.n	800744a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8007442:	218e      	movs	r1, #142	; 0x8e
 8007444:	4813      	ldr	r0, [pc, #76]	; (8007494 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 8007446:	f7fa fbb0 	bl	8001baa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800744a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	2a20      	cmp	r2, #32
 8007452:	d11b      	bne.n	800748c <HAL_I2CEx_ConfigDigitalFilter+0x7c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007454:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007458:	2b01      	cmp	r3, #1
 800745a:	d017      	beq.n	800748c <HAL_I2CEx_ConfigDigitalFilter+0x7c>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800745c:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800745e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007460:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	6819      	ldr	r1, [r3, #0]
 8007468:	f021 0101 	bic.w	r1, r1, #1
 800746c:	6019      	str	r1, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800746e:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007470:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8007474:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8007478:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800747a:	6819      	ldr	r1, [r3, #0]
 800747c:	f041 0101 	orr.w	r1, r1, #1
 8007480:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007482:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007486:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 800748a:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 800748c:	2002      	movs	r0, #2
  }
}
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	40005400 	.word	0x40005400
 8007494:	08034527 	.word	0x08034527

08007498 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007498:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800749a:	f04f 0c00 	mov.w	ip, #0
{
 800749e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074a2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074a4:	6804      	ldr	r4, [r0, #0]
 80074a6:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074a8:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074aa:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074ac:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074b0:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074b2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074b6:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80074ba:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074be:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074c2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074c4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074c6:	68e0      	ldr	r0, [r4, #12]
 80074c8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80074cc:	4430      	add	r0, r6
 80074ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074d2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074d4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80074dc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074de:	6898      	ldr	r0, [r3, #8]
 80074e0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80074e4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074e6:	6888      	ldr	r0, [r1, #8]
 80074e8:	68e6      	ldr	r6, [r4, #12]
 80074ea:	3001      	adds	r0, #1
 80074ec:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80074f0:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80074f2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80074f8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80074fa:	6918      	ldr	r0, [r3, #16]
 80074fc:	f020 0007 	bic.w	r0, r0, #7
 8007500:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007502:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007504:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007506:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800750a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800750e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007512:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007516:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800751a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800751e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007522:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007524:	6958      	ldr	r0, [r3, #20]
 8007526:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800752a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800752c:	6948      	ldr	r0, [r1, #20]
 800752e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007530:	69d8      	ldr	r0, [r3, #28]
 8007532:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8007536:	f020 0007 	bic.w	r0, r0, #7
 800753a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800753c:	6a08      	ldr	r0, [r1, #32]
 800753e:	69cd      	ldr	r5, [r1, #28]
 8007540:	4305      	orrs	r5, r0
 8007542:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007544:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007546:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007548:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800754c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800754e:	b31e      	cbz	r6, 8007598 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007550:	2e01      	cmp	r6, #1
 8007552:	d023      	beq.n	800759c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007554:	1eb0      	subs	r0, r6, #2
 8007556:	2802      	cmp	r0, #2
 8007558:	d922      	bls.n	80075a0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800755a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800755c:	bf0c      	ite	eq
 800755e:	2002      	moveq	r0, #2
 8007560:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007562:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007564:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007568:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800756c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800756e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007570:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007572:	4345      	muls	r5, r0
 8007574:	4378      	muls	r0, r7
 8007576:	3003      	adds	r0, #3
 8007578:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800757c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800757e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007580:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8007584:	f020 0007 	bic.w	r0, r0, #7
 8007588:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800758a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800758c:	58a3      	ldr	r3, [r4, r2]
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	50a3      	str	r3, [r4, r2]
 8007594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8007598:	2004      	movs	r0, #4
 800759a:	e7e2      	b.n	8007562 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800759c:	2003      	movs	r0, #3
 800759e:	e7e0      	b.n	8007562 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80075a0:	2002      	movs	r0, #2
 80075a2:	e7de      	b.n	8007562 <LTDC_SetConfig+0xca>

080075a4 <HAL_LTDC_Init>:
{
 80075a4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80075a6:	4604      	mov	r4, r0
 80075a8:	2800      	cmp	r0, #0
 80075aa:	f000 80cd 	beq.w	8007748 <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 80075ae:	6802      	ldr	r2, [r0, #0]
 80075b0:	4b66      	ldr	r3, [pc, #408]	; (800774c <HAL_LTDC_Init+0x1a8>)
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d003      	beq.n	80075be <HAL_LTDC_Init+0x1a>
 80075b6:	21ca      	movs	r1, #202	; 0xca
 80075b8:	4865      	ldr	r0, [pc, #404]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 80075ba:	f7fa faf6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 80075be:	6963      	ldr	r3, [r4, #20]
 80075c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c4:	d303      	bcc.n	80075ce <HAL_LTDC_Init+0x2a>
 80075c6:	21cb      	movs	r1, #203	; 0xcb
 80075c8:	4861      	ldr	r0, [pc, #388]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 80075ca:	f7fa faee 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 80075ce:	69a3      	ldr	r3, [r4, #24]
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d303      	bcc.n	80075de <HAL_LTDC_Init+0x3a>
 80075d6:	21cc      	movs	r1, #204	; 0xcc
 80075d8:	485d      	ldr	r0, [pc, #372]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 80075da:	f7fa fae6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 80075de:	69e3      	ldr	r3, [r4, #28]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d303      	bcc.n	80075ee <HAL_LTDC_Init+0x4a>
 80075e6:	21cd      	movs	r1, #205	; 0xcd
 80075e8:	4859      	ldr	r0, [pc, #356]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 80075ea:	f7fa fade 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80075ee:	6a23      	ldr	r3, [r4, #32]
 80075f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f4:	d303      	bcc.n	80075fe <HAL_LTDC_Init+0x5a>
 80075f6:	21ce      	movs	r1, #206	; 0xce
 80075f8:	4855      	ldr	r0, [pc, #340]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 80075fa:	f7fa fad6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80075fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007604:	d303      	bcc.n	800760e <HAL_LTDC_Init+0x6a>
 8007606:	21cf      	movs	r1, #207	; 0xcf
 8007608:	4851      	ldr	r0, [pc, #324]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800760a:	f7fa face 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 800760e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007614:	d303      	bcc.n	800761e <HAL_LTDC_Init+0x7a>
 8007616:	21d0      	movs	r1, #208	; 0xd0
 8007618:	484d      	ldr	r0, [pc, #308]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800761a:	f7fa fac6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 800761e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d303      	bcc.n	800762e <HAL_LTDC_Init+0x8a>
 8007626:	21d1      	movs	r1, #209	; 0xd1
 8007628:	4849      	ldr	r0, [pc, #292]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800762a:	f7fa fabe 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 800762e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007634:	d303      	bcc.n	800763e <HAL_LTDC_Init+0x9a>
 8007636:	21d2      	movs	r1, #210	; 0xd2
 8007638:	4845      	ldr	r0, [pc, #276]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800763a:	f7fa fab6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8007644:	d003      	beq.n	800764e <HAL_LTDC_Init+0xaa>
 8007646:	21d3      	movs	r1, #211	; 0xd3
 8007648:	4841      	ldr	r0, [pc, #260]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800764a:	f7fa faae 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8007654:	d003      	beq.n	800765e <HAL_LTDC_Init+0xba>
 8007656:	21d4      	movs	r1, #212	; 0xd4
 8007658:	483d      	ldr	r0, [pc, #244]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800765a:	f7fa faa6 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8007664:	d003      	beq.n	800766e <HAL_LTDC_Init+0xca>
 8007666:	21d5      	movs	r1, #213	; 0xd5
 8007668:	4839      	ldr	r0, [pc, #228]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800766a:	f7fa fa9e 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8007674:	d003      	beq.n	800767e <HAL_LTDC_Init+0xda>
 8007676:	21d6      	movs	r1, #214	; 0xd6
 8007678:	4835      	ldr	r0, [pc, #212]	; (8007750 <HAL_LTDC_Init+0x1ac>)
 800767a:	f7fa fa96 	bl	8001baa <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800767e:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8007682:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007686:	b923      	cbnz	r3, 8007692 <HAL_LTDC_Init+0xee>
    hltdc->Lock = HAL_UNLOCKED;
 8007688:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800768c:	4620      	mov	r0, r4
 800768e:	f7fc faaf 	bl	8003bf0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007692:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007694:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007696:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80076a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	6999      	ldr	r1, [r3, #24]
 80076a8:	4302      	orrs	r2, r0
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076ae:	6920      	ldr	r0, [r4, #16]
 80076b0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80076b2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076b4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80076b6:	4927      	ldr	r1, [pc, #156]	; (8007754 <HAL_LTDC_Init+0x1b0>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076b8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	400a      	ands	r2, r1
 80076be:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80076c6:	69a0      	ldr	r0, [r4, #24]
 80076c8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80076ca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80076cc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	400a      	ands	r2, r1
 80076d2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80076da:	6a20      	ldr	r0, [r4, #32]
 80076dc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80076de:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80076e0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	400a      	ands	r2, r1
 80076e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80076ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80076f0:	4302      	orrs	r2, r0
 80076f2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	4011      	ands	r1, r2
 80076f8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80076fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80076fc:	695a      	ldr	r2, [r3, #20]
 80076fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007702:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007704:	430a      	orrs	r2, r1
 8007706:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007708:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800770a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800770e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007712:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007716:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800771a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800771e:	430a      	orrs	r2, r1
 8007720:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007724:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007728:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800772c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800772e:	f042 0206 	orr.w	r2, r2, #6
 8007732:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800773c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800773e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007742:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8007746:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007748:	2001      	movs	r0, #1
}
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	40016800 	.word	0x40016800
 8007750:	08034568 	.word	0x08034568
 8007754:	f000f800 	.word	0xf000f800

08007758 <HAL_LTDC_DeInit>:
{
 8007758:	b510      	push	{r4, lr}
 800775a:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 800775c:	f7fc fad6 	bl	8003d0c <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007760:	2000      	movs	r0, #0
 8007762:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 8007766:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 800776a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 800776e:	bd10      	pop	{r4, pc}

08007770 <HAL_LTDC_ErrorCallback>:
 8007770:	4770      	bx	lr

08007772 <HAL_LTDC_ReloadEventCallback>:
{
 8007772:	4770      	bx	lr

08007774 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007774:	6803      	ldr	r3, [r0, #0]
{
 8007776:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007778:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800777a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800777c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800777e:	0772      	lsls	r2, r6, #29
 8007780:	d514      	bpl.n	80077ac <HAL_LTDC_IRQHandler+0x38>
 8007782:	0769      	lsls	r1, r5, #29
 8007784:	d512      	bpl.n	80077ac <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007788:	f022 0204 	bic.w	r2, r2, #4
 800778c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800778e:	2204      	movs	r2, #4
 8007790:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007792:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007796:	f043 0301 	orr.w	r3, r3, #1
 800779a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800779e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80077a0:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80077a4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80077a8:	f7ff ffe2 	bl	8007770 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80077ac:	07b2      	lsls	r2, r6, #30
 80077ae:	d516      	bpl.n	80077de <HAL_LTDC_IRQHandler+0x6a>
 80077b0:	07ab      	lsls	r3, r5, #30
 80077b2:	d514      	bpl.n	80077de <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80077b4:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80077b6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80077b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ba:	f022 0202 	bic.w	r2, r2, #2
 80077be:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80077c0:	2202      	movs	r2, #2
 80077c2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80077c4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80077c8:	4313      	orrs	r3, r2
 80077ca:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80077ce:	2304      	movs	r3, #4
 80077d0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80077d4:	2300      	movs	r3, #0
 80077d6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80077da:	f7ff ffc9 	bl	8007770 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80077de:	07f0      	lsls	r0, r6, #31
 80077e0:	d510      	bpl.n	8007804 <HAL_LTDC_IRQHandler+0x90>
 80077e2:	07e9      	lsls	r1, r5, #31
 80077e4:	d50e      	bpl.n	8007804 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80077e6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80077e8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80077ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ec:	f022 0201 	bic.w	r2, r2, #1
 80077f0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80077f2:	2201      	movs	r2, #1
 80077f4:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80077f6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80077f8:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80077fc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007800:	f7fc ff2e 	bl	8004660 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007804:	0732      	lsls	r2, r6, #28
 8007806:	d511      	bpl.n	800782c <HAL_LTDC_IRQHandler+0xb8>
 8007808:	072b      	lsls	r3, r5, #28
 800780a:	d50f      	bpl.n	800782c <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800780c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800780e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007812:	f022 0208 	bic.w	r2, r2, #8
 8007816:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007818:	2208      	movs	r2, #8
 800781a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800781c:	2301      	movs	r3, #1
 800781e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007822:	2300      	movs	r3, #0
 8007824:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007828:	f7ff ffa3 	bl	8007772 <HAL_LTDC_ReloadEventCallback>
 800782c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007830 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007830:	2a01      	cmp	r2, #1
{
 8007832:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007836:	4607      	mov	r7, r0
 8007838:	460e      	mov	r6, r1
 800783a:	4691      	mov	r9, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800783c:	d904      	bls.n	8007848 <HAL_LTDC_ConfigLayer+0x18>
 800783e:	f240 21fe 	movw	r1, #766	; 0x2fe
 8007842:	4846      	ldr	r0, [pc, #280]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 8007844:	f7fa f9b1 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 8007848:	6833      	ldr	r3, [r6, #0]
 800784a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784e:	d304      	bcc.n	800785a <HAL_LTDC_ConfigLayer+0x2a>
 8007850:	f240 21ff 	movw	r1, #767	; 0x2ff
 8007854:	4841      	ldr	r0, [pc, #260]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 8007856:	f7fa f9a8 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 800785a:	6873      	ldr	r3, [r6, #4]
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007860:	d304      	bcc.n	800786c <HAL_LTDC_ConfigLayer+0x3c>
 8007862:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007866:	483d      	ldr	r0, [pc, #244]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 8007868:	f7fa f99f 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 800786c:	68b3      	ldr	r3, [r6, #8]
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007872:	d304      	bcc.n	800787e <HAL_LTDC_ConfigLayer+0x4e>
 8007874:	f240 3101 	movw	r1, #769	; 0x301
 8007878:	4838      	ldr	r0, [pc, #224]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 800787a:	f7fa f996 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 800787e:	68f3      	ldr	r3, [r6, #12]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007884:	d304      	bcc.n	8007890 <HAL_LTDC_ConfigLayer+0x60>
 8007886:	f240 3102 	movw	r1, #770	; 0x302
 800788a:	4834      	ldr	r0, [pc, #208]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 800788c:	f7fa f98d 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8007890:	6933      	ldr	r3, [r6, #16]
 8007892:	2b07      	cmp	r3, #7
 8007894:	d904      	bls.n	80078a0 <HAL_LTDC_ConfigLayer+0x70>
 8007896:	f240 3103 	movw	r1, #771	; 0x303
 800789a:	4830      	ldr	r0, [pc, #192]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 800789c:	f7fa f985 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 80078a0:	6973      	ldr	r3, [r6, #20]
 80078a2:	2bff      	cmp	r3, #255	; 0xff
 80078a4:	d904      	bls.n	80078b0 <HAL_LTDC_ConfigLayer+0x80>
 80078a6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80078aa:	482c      	ldr	r0, [pc, #176]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 80078ac:	f7fa f97d 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 80078b0:	69b3      	ldr	r3, [r6, #24]
 80078b2:	2bff      	cmp	r3, #255	; 0xff
 80078b4:	d904      	bls.n	80078c0 <HAL_LTDC_ConfigLayer+0x90>
 80078b6:	f240 3105 	movw	r1, #773	; 0x305
 80078ba:	4828      	ldr	r0, [pc, #160]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 80078bc:	f7fa f975 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 80078c0:	69f3      	ldr	r3, [r6, #28]
 80078c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ca:	d004      	beq.n	80078d6 <HAL_LTDC_ConfigLayer+0xa6>
 80078cc:	f240 3106 	movw	r1, #774	; 0x306
 80078d0:	4822      	ldr	r0, [pc, #136]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 80078d2:	f7fa f96a 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 80078d6:	6a33      	ldr	r3, [r6, #32]
 80078d8:	f023 0302 	bic.w	r3, r3, #2
 80078dc:	2b05      	cmp	r3, #5
 80078de:	d004      	beq.n	80078ea <HAL_LTDC_ConfigLayer+0xba>
 80078e0:	f240 3107 	movw	r1, #775	; 0x307
 80078e4:	481d      	ldr	r0, [pc, #116]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 80078e6:	f7fa f960 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 80078ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80078ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f0:	d304      	bcc.n	80078fc <HAL_LTDC_ConfigLayer+0xcc>
 80078f2:	f44f 7142 	mov.w	r1, #776	; 0x308
 80078f6:	4819      	ldr	r0, [pc, #100]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 80078f8:	f7fa f957 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 80078fc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80078fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007902:	d304      	bcc.n	800790e <HAL_LTDC_ConfigLayer+0xde>
 8007904:	f240 3109 	movw	r1, #777	; 0x309
 8007908:	4814      	ldr	r0, [pc, #80]	; (800795c <HAL_LTDC_ConfigLayer+0x12c>)
 800790a:	f7fa f94e 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 800790e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8007912:	2002      	movs	r0, #2
 8007914:	2b01      	cmp	r3, #1
 8007916:	d01f      	beq.n	8007958 <HAL_LTDC_ConfigLayer+0x128>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007918:	2434      	movs	r4, #52	; 0x34
 800791a:	4635      	mov	r5, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800791c:	f887 00a1 	strb.w	r0, [r7, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8007920:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007924:	fb04 7409 	mla	r4, r4, r9, r7
  __HAL_LOCK(hltdc);
 8007928:	f887 80a0 	strb.w	r8, [r7, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800792c:	3438      	adds	r4, #56	; 0x38
 800792e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800793a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800793c:	4638      	mov	r0, r7
 800793e:	464a      	mov	r2, r9
 8007940:	4631      	mov	r1, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007942:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007944:	f7ff fda8 	bl	8007498 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007948:	683b      	ldr	r3, [r7, #0]
  __HAL_UNLOCK(hltdc);
 800794a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800794c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007950:	f887 80a1 	strb.w	r8, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007954:	f887 00a0 	strb.w	r0, [r7, #160]	; 0xa0
}
 8007958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795c:	08034568 	.word	0x08034568

08007960 <HAL_LTDC_ConfigColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007960:	2a01      	cmp	r2, #1
{
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	4604      	mov	r4, r0
 8007966:	460e      	mov	r6, r1
 8007968:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 800796a:	d904      	bls.n	8007976 <HAL_LTDC_ConfigColorKeying+0x16>
 800796c:	f44f 714c 	mov.w	r1, #816	; 0x330
 8007970:	480d      	ldr	r0, [pc, #52]	; (80079a8 <HAL_LTDC_ConfigColorKeying+0x48>)
 8007972:	f7fa f91a 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007976:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800797a:	2002      	movs	r0, #2
 800797c:	2b01      	cmp	r3, #1
 800797e:	d012      	beq.n	80079a6 <HAL_LTDC_ConfigColorKeying+0x46>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007980:	6821      	ldr	r1, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007982:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007986:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007988:	f101 0384 	add.w	r3, r1, #132	; 0x84
 800798c:	eb03 12c5 	add.w	r2, r3, r5, lsl #7
 8007990:	68d3      	ldr	r3, [r2, #12]
 8007992:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007996:	60d3      	str	r3, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007998:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800799a:	60d6      	str	r6, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800799c:	624b      	str	r3, [r1, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800799e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80079a2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	08034568 	.word	0x08034568

080079ac <HAL_LTDC_ConfigCLUT>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80079ac:	2b01      	cmp	r3, #1
{
 80079ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	4616      	mov	r6, r2
 80079b8:	4698      	mov	r8, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80079ba:	d904      	bls.n	80079c6 <HAL_LTDC_ConfigCLUT+0x1a>
 80079bc:	f240 3159 	movw	r1, #857	; 0x359
 80079c0:	481d      	ldr	r0, [pc, #116]	; (8007a38 <HAL_LTDC_ConfigCLUT+0x8c>)
 80079c2:	f7fa f8f2 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 80079c6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80079ca:	2002      	movs	r0, #2
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d014      	beq.n	80079fa <HAL_LTDC_ConfigCLUT+0x4e>
 80079d0:	2301      	movs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80079d2:	ea4f 17c8 	mov.w	r7, r8, lsl #7
  for (counter = 0U; (counter < CLUTSize); counter++)
 80079d6:	2200      	movs	r2, #0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 80079d8:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 80079dc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80079e0:	2334      	movs	r3, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079e2:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80079e6:	fb03 4308 	mla	r3, r3, r8, r4
  for (counter = 0U; (counter < CLUTSize); counter++)
 80079ea:	42b2      	cmp	r2, r6
 80079ec:	d107      	bne.n	80079fe <HAL_LTDC_ConfigCLUT+0x52>
  hltdc->State = HAL_LTDC_STATE_READY;
 80079ee:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 80079f0:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80079f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80079f6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80079fe:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007a00:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8007a04:	2906      	cmp	r1, #6
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a06:	bf05      	ittet	eq
 8007a08:	b2c1      	uxtbeq	r1, r0
 8007a0a:	fb0e fc02 	muleq.w	ip, lr, r2
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a0e:	b281      	uxthne	r1, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a10:	ea41 010c 	orreq.w	r1, r1, ip
 8007a14:	bf0c      	ite	eq
 8007a16:	f400 4c7f 	andeq.w	ip, r0, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a1a:	ea41 6102 	orrne.w	r1, r1, r2, lsl #24
 8007a1e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a22:	bf08      	it	eq
 8007a24:	ea41 010c 	orreq.w	r1, r1, ip
  for (counter = 0U; (counter < CLUTSize); counter++)
 8007a28:	3201      	adds	r2, #1
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a2a:	4301      	orrs	r1, r0
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	3084      	adds	r0, #132	; 0x84
 8007a30:	4438      	add	r0, r7
 8007a32:	6401      	str	r1, [r0, #64]	; 0x40
 8007a34:	e7d9      	b.n	80079ea <HAL_LTDC_ConfigCLUT+0x3e>
 8007a36:	bf00      	nop
 8007a38:	08034568 	.word	0x08034568

08007a3c <HAL_LTDC_EnableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a3c:	2901      	cmp	r1, #1
{
 8007a3e:	b538      	push	{r3, r4, r5, lr}
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a44:	d904      	bls.n	8007a50 <HAL_LTDC_EnableColorKeying+0x14>
 8007a46:	f240 3187 	movw	r1, #903	; 0x387
 8007a4a:	480c      	ldr	r0, [pc, #48]	; (8007a7c <HAL_LTDC_EnableColorKeying+0x40>)
 8007a4c:	f7fa f8ad 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007a50:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007a54:	2002      	movs	r0, #2
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d00f      	beq.n	8007a7a <HAL_LTDC_EnableColorKeying+0x3e>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a5e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007a62:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8007a66:	586b      	ldr	r3, [r5, r1]
 8007a68:	4303      	orrs	r3, r0
  __HAL_UNLOCK(hltdc);
 8007a6a:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007a6c:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a72:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007a76:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	08034568 	.word	0x08034568

08007a80 <HAL_LTDC_DisableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a80:	2901      	cmp	r1, #1
{
 8007a82:	b538      	push	{r3, r4, r5, lr}
 8007a84:	4604      	mov	r4, r0
 8007a86:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a88:	d904      	bls.n	8007a94 <HAL_LTDC_DisableColorKeying+0x14>
 8007a8a:	f240 31aa 	movw	r1, #938	; 0x3aa
 8007a8e:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <HAL_LTDC_DisableColorKeying+0x44>)
 8007a90:	f7fa f88b 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007a94:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007a98:	2002      	movs	r0, #2
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d010      	beq.n	8007ac0 <HAL_LTDC_DisableColorKeying+0x40>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007aa2:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007aa6:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007aa8:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8007aac:	586b      	ldr	r3, [r5, r1]
 8007aae:	f023 0302 	bic.w	r3, r3, #2
 8007ab2:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ab8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007abc:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	08034568 	.word	0x08034568

08007ac8 <HAL_LTDC_SetWindowPosition>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007ac8:	2b01      	cmp	r3, #1
{
 8007aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ace:	4604      	mov	r4, r0
 8007ad0:	4688      	mov	r8, r1
 8007ad2:	4617      	mov	r7, r2
 8007ad4:	461e      	mov	r6, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007ad6:	d904      	bls.n	8007ae2 <HAL_LTDC_SetWindowPosition+0x1a>
 8007ad8:	f240 4185 	movw	r1, #1157	; 0x485
 8007adc:	481b      	ldr	r0, [pc, #108]	; (8007b4c <HAL_LTDC_SetWindowPosition+0x84>)
 8007ade:	f7fa f864 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLL(X0));
 8007ae2:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8007ae6:	d304      	bcc.n	8007af2 <HAL_LTDC_SetWindowPosition+0x2a>
 8007ae8:	f240 4186 	movw	r1, #1158	; 0x486
 8007aec:	4817      	ldr	r0, [pc, #92]	; (8007b4c <HAL_LTDC_SetWindowPosition+0x84>)
 8007aee:	f7fa f85c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(Y0));
 8007af2:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8007af6:	d304      	bcc.n	8007b02 <HAL_LTDC_SetWindowPosition+0x3a>
 8007af8:	f240 4187 	movw	r1, #1159	; 0x487
 8007afc:	4813      	ldr	r0, [pc, #76]	; (8007b4c <HAL_LTDC_SetWindowPosition+0x84>)
 8007afe:	f7fa f854 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007b02:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007b06:	2002      	movs	r0, #2
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d01d      	beq.n	8007b48 <HAL_LTDC_SetWindowPosition+0x80>
  pLayerCfg->WindowX0 = X0;
 8007b0c:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007b0e:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b10:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b14:	4620      	mov	r0, r4
  pLayerCfg->WindowX0 = X0;
 8007b16:	4371      	muls	r1, r6
  __HAL_LOCK(hltdc);
 8007b18:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 8007b1c:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007b1e:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007b20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b22:	4421      	add	r1, r4
  pLayerCfg->WindowY0 = Y0;
 8007b24:	641f      	str	r7, [r3, #64]	; 0x40
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007b26:	4442      	add	r2, r8
  pLayerCfg->WindowX0 = X0;
 8007b28:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8007b2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007b30:	4417      	add	r7, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b32:	4632      	mov	r2, r6
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8007b34:	645f      	str	r7, [r3, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b36:	f7ff fcaf 	bl	8007498 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b3a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007b3c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b3e:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b40:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007b44:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b4c:	08034568 	.word	0x08034568

08007b50 <HAL_LTDC_SetAlpha>:
  assert_param(IS_LTDC_ALPHA(Alpha));
 8007b50:	29ff      	cmp	r1, #255	; 0xff
{
 8007b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b54:	4604      	mov	r4, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	4616      	mov	r6, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8007b5a:	d904      	bls.n	8007b66 <HAL_LTDC_SetAlpha+0x16>
 8007b5c:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8007b60:	4812      	ldr	r0, [pc, #72]	; (8007bac <HAL_LTDC_SetAlpha+0x5c>)
 8007b62:	f7fa f822 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007b66:	2e01      	cmp	r6, #1
 8007b68:	d904      	bls.n	8007b74 <HAL_LTDC_SetAlpha+0x24>
 8007b6a:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8007b6e:	480f      	ldr	r0, [pc, #60]	; (8007bac <HAL_LTDC_SetAlpha+0x5c>)
 8007b70:	f7fa f81b 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007b74:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007b78:	2002      	movs	r0, #2
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d015      	beq.n	8007baa <HAL_LTDC_SetAlpha+0x5a>
  pLayerCfg->Alpha = Alpha;
 8007b7e:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007b80:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b82:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b86:	4632      	mov	r2, r6
  pLayerCfg->Alpha = Alpha;
 8007b88:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b8a:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 8007b8c:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8007b90:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007b92:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8007b94:	64df      	str	r7, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007b96:	4421      	add	r1, r4
 8007b98:	f7ff fc7e 	bl	8007498 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b9c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007b9e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ba0:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ba2:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007ba6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bac:	08034568 	.word	0x08034568

08007bb0 <HAL_LTDC_SetAddress>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007bb0:	2a01      	cmp	r2, #1
{
 8007bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007bba:	d904      	bls.n	8007bc6 <HAL_LTDC_SetAddress+0x16>
 8007bbc:	f240 5111 	movw	r1, #1297	; 0x511
 8007bc0:	480f      	ldr	r0, [pc, #60]	; (8007c00 <HAL_LTDC_SetAddress+0x50>)
 8007bc2:	f7f9 fff2 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007bc6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007bca:	2002      	movs	r0, #2
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d015      	beq.n	8007bfc <HAL_LTDC_SetAddress+0x4c>
  pLayerCfg->FBStartAdress = Address;
 8007bd0:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007bd2:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bd4:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bd8:	4632      	mov	r2, r6
  pLayerCfg->FBStartAdress = Address;
 8007bda:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bdc:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 8007bde:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8007be2:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007be4:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8007be6:	65df      	str	r7, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007be8:	4421      	add	r1, r4
 8007bea:	f7ff fc55 	bl	8007498 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bee:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007bf0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bf2:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007bf4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007bf8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	08034568 	.word	0x08034568

08007c04 <HAL_LTDC_ProgramLineEvent>:
  assert_param(IS_LTDC_LIPOS(Line));
 8007c04:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
{
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LIPOS(Line));
 8007c0e:	d304      	bcc.n	8007c1a <HAL_LTDC_ProgramLineEvent+0x16>
 8007c10:	f240 5183 	movw	r1, #1411	; 0x583
 8007c14:	480d      	ldr	r0, [pc, #52]	; (8007c4c <HAL_LTDC_ProgramLineEvent+0x48>)
 8007c16:	f7f9 ffc8 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007c1a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007c1e:	2002      	movs	r0, #2
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d012      	beq.n	8007c4a <HAL_LTDC_ProgramLineEvent+0x46>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007c24:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c26:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007c2a:	2000      	movs	r0, #0
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8007c34:	4a06      	ldr	r2, [pc, #24]	; (8007c50 <HAL_LTDC_ProgramLineEvent+0x4c>)
 8007c36:	6415      	str	r5, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c40:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 8007c42:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c46:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	08034568 	.word	0x08034568
 8007c50:	40016800 	.word	0x40016800

08007c54 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c54:	4a02      	ldr	r2, [pc, #8]	; (8007c60 <HAL_PWR_EnableBkUpAccess+0xc>)
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4770      	bx	lr
 8007c60:	40007000 	.word	0x40007000

08007c64 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8007c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c6a:	4c19      	ldr	r4, [pc, #100]	; (8007cd0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c70:	641a      	str	r2, [r3, #64]	; 0x40
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c82:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c84:	f7fd fb58 	bl	8005338 <HAL_GetTick>
 8007c88:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c8a:	6863      	ldr	r3, [r4, #4]
 8007c8c:	03da      	lsls	r2, r3, #15
 8007c8e:	d50c      	bpl.n	8007caa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c96:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c98:	f7fd fb4e 	bl	8005338 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c9c:	4c0c      	ldr	r4, [pc, #48]	; (8007cd0 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8007c9e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ca0:	6863      	ldr	r3, [r4, #4]
 8007ca2:	039b      	lsls	r3, r3, #14
 8007ca4:	d50a      	bpl.n	8007cbc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e006      	b.n	8007cb8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007caa:	f7fd fb45 	bl	8005338 <HAL_GetTick>
 8007cae:	1b40      	subs	r0, r0, r5
 8007cb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007cb4:	d9e9      	bls.n	8007c8a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007cb6:	2003      	movs	r0, #3
}
 8007cb8:	b003      	add	sp, #12
 8007cba:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cbc:	f7fd fb3c 	bl	8005338 <HAL_GetTick>
 8007cc0:	1b40      	subs	r0, r0, r5
 8007cc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007cc6:	d9eb      	bls.n	8007ca0 <HAL_PWREx_EnableOverDrive+0x3c>
 8007cc8:	e7f5      	b.n	8007cb6 <HAL_PWREx_EnableOverDrive+0x52>
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40007000 	.word	0x40007000

08007cd4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	9d06      	ldr	r5, [sp, #24]
 8007cda:	4604      	mov	r4, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	4616      	mov	r6, r2
 8007ce0:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007ce2:	6821      	ldr	r1, [r4, #0]
 8007ce4:	688a      	ldr	r2, [r1, #8]
 8007ce6:	423a      	tst	r2, r7
 8007ce8:	bf14      	ite	ne
 8007cea:	2201      	movne	r2, #1
 8007cec:	2200      	moveq	r2, #0
 8007cee:	42b2      	cmp	r2, r6
 8007cf0:	d102      	bne.n	8007cf8 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007cf2:	2000      	movs	r0, #0
}
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007cf8:	1c6b      	adds	r3, r5, #1
 8007cfa:	d0f3      	beq.n	8007ce4 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007cfc:	b94d      	cbnz	r5, 8007d12 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007cfe:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007d00:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007d02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007d08:	f043 0301 	orr.w	r3, r3, #1
 8007d0c:	6463      	str	r3, [r4, #68]	; 0x44
 8007d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007d12:	f7fd fb11 	bl	8005338 <HAL_GetTick>
 8007d16:	eba0 0008 	sub.w	r0, r0, r8
 8007d1a:	4285      	cmp	r5, r0
 8007d1c:	d2e1      	bcs.n	8007ce2 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8007d1e:	e7ee      	b.n	8007cfe <QSPI_WaitFlagStateUntilTimeout+0x2a>

08007d20 <HAL_QSPI_Init>:
{
 8007d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d24:	f7fd fb08 	bl	8005338 <HAL_GetTick>
 8007d28:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8007d2a:	2c00      	cmp	r4, #0
 8007d2c:	f000 80a2 	beq.w	8007e74 <HAL_QSPI_Init+0x154>
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	4b52      	ldr	r3, [pc, #328]	; (8007e7c <HAL_QSPI_Init+0x15c>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d004      	beq.n	8007d42 <HAL_QSPI_Init+0x22>
 8007d38:	f44f 7198 	mov.w	r1, #304	; 0x130
 8007d3c:	4850      	ldr	r0, [pc, #320]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d3e:	f7f9 ff34 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	2bff      	cmp	r3, #255	; 0xff
 8007d46:	d904      	bls.n	8007d52 <HAL_QSPI_Init+0x32>
 8007d48:	f240 1131 	movw	r1, #305	; 0x131
 8007d4c:	484c      	ldr	r0, [pc, #304]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d4e:	f7f9 ff2c 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	2b1f      	cmp	r3, #31
 8007d58:	d904      	bls.n	8007d64 <HAL_QSPI_Init+0x44>
 8007d5a:	f44f 7199 	mov.w	r1, #306	; 0x132
 8007d5e:	4848      	ldr	r0, [pc, #288]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d60:	f7f9 ff23 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 8007d64:	68e3      	ldr	r3, [r4, #12]
 8007d66:	f033 0310 	bics.w	r3, r3, #16
 8007d6a:	d004      	beq.n	8007d76 <HAL_QSPI_Init+0x56>
 8007d6c:	f240 1133 	movw	r1, #307	; 0x133
 8007d70:	4843      	ldr	r0, [pc, #268]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d72:	f7f9 ff1a 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	2b1f      	cmp	r3, #31
 8007d7a:	d904      	bls.n	8007d86 <HAL_QSPI_Init+0x66>
 8007d7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007d80:	483f      	ldr	r0, [pc, #252]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d82:	f7f9 ff12 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 8007d86:	6963      	ldr	r3, [r4, #20]
 8007d88:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8007d8c:	d007      	beq.n	8007d9e <HAL_QSPI_Init+0x7e>
 8007d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d92:	d004      	beq.n	8007d9e <HAL_QSPI_Init+0x7e>
 8007d94:	f240 1135 	movw	r1, #309	; 0x135
 8007d98:	4839      	ldr	r0, [pc, #228]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007d9a:	f7f9 ff06 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 8007d9e:	69a3      	ldr	r3, [r4, #24]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d904      	bls.n	8007dae <HAL_QSPI_Init+0x8e>
 8007da4:	f44f 719b 	mov.w	r1, #310	; 0x136
 8007da8:	4835      	ldr	r0, [pc, #212]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007daa:	f7f9 fefe 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 8007dae:	6a23      	ldr	r3, [r4, #32]
 8007db0:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007db4:	d004      	beq.n	8007dc0 <HAL_QSPI_Init+0xa0>
 8007db6:	f240 1137 	movw	r1, #311	; 0x137
 8007dba:	4831      	ldr	r0, [pc, #196]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007dbc:	f7f9 fef5 	bl	8001baa <assert_failed>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 8007dc0:	6a23      	ldr	r3, [r4, #32]
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d008      	beq.n	8007dd8 <HAL_QSPI_Init+0xb8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 8007dc6:	69e3      	ldr	r3, [r4, #28]
 8007dc8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007dcc:	d004      	beq.n	8007dd8 <HAL_QSPI_Init+0xb8>
 8007dce:	f240 113b 	movw	r1, #315	; 0x13b
 8007dd2:	482b      	ldr	r0, [pc, #172]	; (8007e80 <HAL_QSPI_Init+0x160>)
 8007dd4:	f7f9 fee9 	bl	8001baa <assert_failed>
  __HAL_LOCK(hqspi);
 8007dd8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d04b      	beq.n	8007e78 <HAL_QSPI_Init+0x158>
 8007de0:	2301      	movs	r3, #1
 8007de2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007de6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007dea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007dee:	b93b      	cbnz	r3, 8007e00 <HAL_QSPI_Init+0xe0>
    hqspi->Lock = HAL_UNLOCKED;
 8007df0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007df4:	4620      	mov	r0, r4
 8007df6:	f7f9 fef5 	bl	8001be4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8007dfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dfe:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007e00:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007e02:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007e04:	68a2      	ldr	r2, [r4, #8]
 8007e06:	680b      	ldr	r3, [r1, #0]
 8007e08:	3a01      	subs	r2, #1
 8007e0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007e12:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007e14:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007e16:	2120      	movs	r1, #32
 8007e18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	f7ff ff59 	bl	8007cd4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007e22:	bb10      	cbnz	r0, 8007e6a <HAL_QSPI_Init+0x14a>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007e24:	6822      	ldr	r2, [r4, #0]
 8007e26:	69e5      	ldr	r5, [r4, #28]
 8007e28:	68e3      	ldr	r3, [r4, #12]
 8007e2a:	6811      	ldr	r1, [r2, #0]
 8007e2c:	432b      	orrs	r3, r5
 8007e2e:	6a25      	ldr	r5, [r4, #32]
 8007e30:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007e34:	432b      	orrs	r3, r5
 8007e36:	6865      	ldr	r5, [r4, #4]
 8007e38:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8007e3c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007e40:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007e42:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007e44:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007e46:	6963      	ldr	r3, [r4, #20]
 8007e48:	6855      	ldr	r5, [r2, #4]
 8007e4a:	430b      	orrs	r3, r1
 8007e4c:	6921      	ldr	r1, [r4, #16]
 8007e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007e52:	490c      	ldr	r1, [pc, #48]	; (8007e84 <HAL_QSPI_Init+0x164>)
 8007e54:	4029      	ands	r1, r5
 8007e56:	430b      	orrs	r3, r1
 8007e58:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007e62:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007e64:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007e66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007e70:	b003      	add	sp, #12
 8007e72:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007e74:	2001      	movs	r0, #1
 8007e76:	e7fb      	b.n	8007e70 <HAL_QSPI_Init+0x150>
  __HAL_LOCK(hqspi);
 8007e78:	2002      	movs	r0, #2
 8007e7a:	e7f9      	b.n	8007e70 <HAL_QSPI_Init+0x150>
 8007e7c:	a0001000 	.word	0xa0001000
 8007e80:	080345a7 	.word	0x080345a7
 8007e84:	ffe0f8fe 	.word	0xffe0f8fe

08007e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	b918      	cbnz	r0, 8007e98 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8007e90:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8007e92:	b002      	add	sp, #8
 8007e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007e98:	6803      	ldr	r3, [r0, #0]
 8007e9a:	2b0f      	cmp	r3, #15
 8007e9c:	d904      	bls.n	8007ea8 <HAL_RCC_OscConfig+0x20>
 8007e9e:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007ea2:	48a5      	ldr	r0, [pc, #660]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8007ea4:	f7f9 fe81 	bl	8001baa <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07d8      	lsls	r0, r3, #31
 8007eac:	d418      	bmi.n	8007ee0 <HAL_RCC_OscConfig+0x58>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	0799      	lsls	r1, r3, #30
 8007eb2:	d472      	bmi.n	8007f9a <HAL_RCC_OscConfig+0x112>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	0719      	lsls	r1, r3, #28
 8007eb8:	f100 80c8 	bmi.w	800804c <HAL_RCC_OscConfig+0x1c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	075a      	lsls	r2, r3, #29
 8007ec0:	f100 80f1 	bmi.w	80080a6 <HAL_RCC_OscConfig+0x21e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007ec4:	69a3      	ldr	r3, [r4, #24]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d904      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x4c>
 8007eca:	f240 214b 	movw	r1, #587	; 0x24b
 8007ece:	489a      	ldr	r0, [pc, #616]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8007ed0:	f7f9 fe6b 	bl	8001baa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ed4:	69a2      	ldr	r2, [r4, #24]
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	f040 8160 	bne.w	800819c <HAL_RCC_OscConfig+0x314>
  return HAL_OK;
 8007edc:	2000      	movs	r0, #0
 8007ede:	e7d8      	b.n	8007e92 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007ee6:	d007      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x70>
 8007ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eec:	d004      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x70>
 8007eee:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8007ef2:	4891      	ldr	r0, [pc, #580]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8007ef4:	f7f9 fe59 	bl	8001baa <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ef8:	4b90      	ldr	r3, [pc, #576]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	f002 020c 	and.w	r2, r2, #12
 8007f00:	2a04      	cmp	r2, #4
 8007f02:	d007      	beq.n	8007f14 <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	f002 020c 	and.w	r2, r2, #12
 8007f0a:	2a08      	cmp	r2, #8
 8007f0c:	d10a      	bne.n	8007f24 <HAL_RCC_OscConfig+0x9c>
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	025a      	lsls	r2, r3, #9
 8007f12:	d507      	bpl.n	8007f24 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f14:	4b89      	ldr	r3, [pc, #548]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	039b      	lsls	r3, r3, #14
 8007f1a:	d5c8      	bpl.n	8007eae <HAL_RCC_OscConfig+0x26>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1c5      	bne.n	8007eae <HAL_RCC_OscConfig+0x26>
 8007f22:	e7b5      	b.n	8007e90 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f24:	6863      	ldr	r3, [r4, #4]
 8007f26:	4d85      	ldr	r5, [pc, #532]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f2c:	d111      	bne.n	8007f52 <HAL_RCC_OscConfig+0xca>
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f36:	f7fd f9ff 	bl	8005338 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3a:	4d80      	ldr	r5, [pc, #512]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 8007f3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	039f      	lsls	r7, r3, #14
 8007f42:	d4b4      	bmi.n	8007eae <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f44:	f7fd f9f8 	bl	8005338 <HAL_GetTick>
 8007f48:	1b80      	subs	r0, r0, r6
 8007f4a:	2864      	cmp	r0, #100	; 0x64
 8007f4c:	d9f7      	bls.n	8007f3e <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8007f4e:	2003      	movs	r0, #3
 8007f50:	e79f      	b.n	8007e92 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f52:	b99b      	cbnz	r3, 8007f7c <HAL_RCC_OscConfig+0xf4>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f64:	f7fd f9e8 	bl	8005338 <HAL_GetTick>
 8007f68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	0398      	lsls	r0, r3, #14
 8007f6e:	d59e      	bpl.n	8007eae <HAL_RCC_OscConfig+0x26>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f70:	f7fd f9e2 	bl	8005338 <HAL_GetTick>
 8007f74:	1b80      	subs	r0, r0, r6
 8007f76:	2864      	cmp	r0, #100	; 0x64
 8007f78:	d9f7      	bls.n	8007f6a <HAL_RCC_OscConfig+0xe2>
 8007f7a:	e7e8      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	d103      	bne.n	8007f8c <HAL_RCC_OscConfig+0x104>
 8007f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	e7d0      	b.n	8007f2e <HAL_RCC_OscConfig+0xa6>
 8007f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f90:	602b      	str	r3, [r5, #0]
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f98:	e7cc      	b.n	8007f34 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d904      	bls.n	8007faa <HAL_RCC_OscConfig+0x122>
 8007fa0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8007fa4:	4864      	ldr	r0, [pc, #400]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8007fa6:	f7f9 fe00 	bl	8001baa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	2b1f      	cmp	r3, #31
 8007fae:	d904      	bls.n	8007fba <HAL_RCC_OscConfig+0x132>
 8007fb0:	f240 119d 	movw	r1, #413	; 0x19d
 8007fb4:	4860      	ldr	r0, [pc, #384]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8007fb6:	f7f9 fdf8 	bl	8001baa <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fba:	4b60      	ldr	r3, [pc, #384]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	f012 0f0c 	tst.w	r2, #12
 8007fc2:	d007      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	f002 020c 	and.w	r2, r2, #12
 8007fca:	2a08      	cmp	r2, #8
 8007fcc:	d112      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x16c>
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	0259      	lsls	r1, r3, #9
 8007fd2:	d40f      	bmi.n	8007ff4 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fd4:	4b59      	ldr	r3, [pc, #356]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	0792      	lsls	r2, r2, #30
 8007fda:	d503      	bpl.n	8007fe4 <HAL_RCC_OscConfig+0x15c>
 8007fdc:	68e2      	ldr	r2, [r4, #12]
 8007fde:	2a01      	cmp	r2, #1
 8007fe0:	f47f af56 	bne.w	8007e90 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	6921      	ldr	r1, [r4, #16]
 8007fe8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007fec:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007ff0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ff2:	e75f      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ff4:	68e3      	ldr	r3, [r4, #12]
 8007ff6:	4d51      	ldr	r5, [pc, #324]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8007ff8:	b1bb      	cbz	r3, 800802a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008002:	f7fd f999 	bl	8005338 <HAL_GetTick>
 8008006:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	079f      	lsls	r7, r3, #30
 800800c:	d507      	bpl.n	800801e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	6922      	ldr	r2, [r4, #16]
 8008012:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008016:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	e74a      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800801e:	f7fd f98b 	bl	8005338 <HAL_GetTick>
 8008022:	1b80      	subs	r0, r0, r6
 8008024:	2802      	cmp	r0, #2
 8008026:	d9ef      	bls.n	8008008 <HAL_RCC_OscConfig+0x180>
 8008028:	e791      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008032:	f7fd f981 	bl	8005338 <HAL_GetTick>
 8008036:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	0798      	lsls	r0, r3, #30
 800803c:	f57f af3a 	bpl.w	8007eb4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008040:	f7fd f97a 	bl	8005338 <HAL_GetTick>
 8008044:	1b80      	subs	r0, r0, r6
 8008046:	2802      	cmp	r0, #2
 8008048:	d9f6      	bls.n	8008038 <HAL_RCC_OscConfig+0x1b0>
 800804a:	e780      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800804c:	6963      	ldr	r3, [r4, #20]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d904      	bls.n	800805c <HAL_RCC_OscConfig+0x1d4>
 8008052:	f240 11dd 	movw	r1, #477	; 0x1dd
 8008056:	4838      	ldr	r0, [pc, #224]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 8008058:	f7f9 fda7 	bl	8001baa <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800805c:	6963      	ldr	r3, [r4, #20]
 800805e:	4d37      	ldr	r5, [pc, #220]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8008060:	b183      	cbz	r3, 8008084 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8008062:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008064:	f043 0301 	orr.w	r3, r3, #1
 8008068:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800806a:	f7fd f965 	bl	8005338 <HAL_GetTick>
 800806e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008070:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008072:	079b      	lsls	r3, r3, #30
 8008074:	f53f af22 	bmi.w	8007ebc <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008078:	f7fd f95e 	bl	8005338 <HAL_GetTick>
 800807c:	1b80      	subs	r0, r0, r6
 800807e:	2802      	cmp	r0, #2
 8008080:	d9f6      	bls.n	8008070 <HAL_RCC_OscConfig+0x1e8>
 8008082:	e764      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8008084:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800808c:	f7fd f954 	bl	8005338 <HAL_GetTick>
 8008090:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008092:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008094:	079f      	lsls	r7, r3, #30
 8008096:	f57f af11 	bpl.w	8007ebc <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800809a:	f7fd f94d 	bl	8005338 <HAL_GetTick>
 800809e:	1b80      	subs	r0, r0, r6
 80080a0:	2802      	cmp	r0, #2
 80080a2:	d9f6      	bls.n	8008092 <HAL_RCC_OscConfig+0x20a>
 80080a4:	e753      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d906      	bls.n	80080ba <HAL_RCC_OscConfig+0x232>
 80080ac:	2b05      	cmp	r3, #5
 80080ae:	d004      	beq.n	80080ba <HAL_RCC_OscConfig+0x232>
 80080b0:	f240 2107 	movw	r1, #519	; 0x207
 80080b4:	4820      	ldr	r0, [pc, #128]	; (8008138 <HAL_RCC_OscConfig+0x2b0>)
 80080b6:	f7f9 fd78 	bl	8001baa <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 80080bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080be:	00d5      	lsls	r5, r2, #3
 80080c0:	d427      	bmi.n	8008112 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80080c4:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080d6:	4d1a      	ldr	r5, [pc, #104]	; (8008140 <HAL_RCC_OscConfig+0x2b8>)
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	05d8      	lsls	r0, r3, #23
 80080dc:	d51b      	bpl.n	8008116 <HAL_RCC_OscConfig+0x28e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	4d16      	ldr	r5, [pc, #88]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d12e      	bne.n	8008144 <HAL_RCC_OscConfig+0x2bc>
 80080e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080ee:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80080f2:	f7fd f921 	bl	8005338 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080f6:	4f11      	ldr	r7, [pc, #68]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
      tickstart = HAL_GetTick();
 80080f8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fc:	079a      	lsls	r2, r3, #30
 80080fe:	d546      	bpl.n	800818e <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 8008100:	2e00      	cmp	r6, #0
 8008102:	f43f aedf 	beq.w	8007ec4 <HAL_RCC_OscConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008106:	4a0d      	ldr	r2, [pc, #52]	; (800813c <HAL_RCC_OscConfig+0x2b4>)
 8008108:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800810a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800810e:	6413      	str	r3, [r2, #64]	; 0x40
 8008110:	e6d8      	b.n	8007ec4 <HAL_RCC_OscConfig+0x3c>
  FlagStatus pwrclkchanged = RESET;
 8008112:	2600      	movs	r6, #0
 8008114:	e7df      	b.n	80080d6 <HAL_RCC_OscConfig+0x24e>
      PWR->CR1 |= PWR_CR1_DBP;
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800811e:	f7fd f90b 	bl	8005338 <HAL_GetTick>
 8008122:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	05d9      	lsls	r1, r3, #23
 8008128:	d4d9      	bmi.n	80080de <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800812a:	f7fd f905 	bl	8005338 <HAL_GetTick>
 800812e:	1bc0      	subs	r0, r0, r7
 8008130:	2864      	cmp	r0, #100	; 0x64
 8008132:	d9f7      	bls.n	8008124 <HAL_RCC_OscConfig+0x29c>
 8008134:	e70b      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
 8008136:	bf00      	nop
 8008138:	080345e6 	.word	0x080345e6
 800813c:	40023800 	.word	0x40023800
 8008140:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008144:	b9ab      	cbnz	r3, 8008172 <HAL_RCC_OscConfig+0x2ea>
 8008146:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008148:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	672b      	str	r3, [r5, #112]	; 0x70
 8008152:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008154:	f023 0304 	bic.w	r3, r3, #4
 8008158:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800815a:	f7fd f8ed 	bl	8005338 <HAL_GetTick>
 800815e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008160:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008162:	079b      	lsls	r3, r3, #30
 8008164:	d5cc      	bpl.n	8008100 <HAL_RCC_OscConfig+0x278>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008166:	f7fd f8e7 	bl	8005338 <HAL_GetTick>
 800816a:	1bc0      	subs	r0, r0, r7
 800816c:	4540      	cmp	r0, r8
 800816e:	d9f7      	bls.n	8008160 <HAL_RCC_OscConfig+0x2d8>
 8008170:	e6ed      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008172:	2b05      	cmp	r3, #5
 8008174:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008176:	d103      	bne.n	8008180 <HAL_RCC_OscConfig+0x2f8>
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	672b      	str	r3, [r5, #112]	; 0x70
 800817e:	e7b2      	b.n	80080e6 <HAL_RCC_OscConfig+0x25e>
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	672b      	str	r3, [r5, #112]	; 0x70
 8008186:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008188:	f023 0304 	bic.w	r3, r3, #4
 800818c:	e7ae      	b.n	80080ec <HAL_RCC_OscConfig+0x264>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800818e:	f7fd f8d3 	bl	8005338 <HAL_GetTick>
 8008192:	eba0 0008 	sub.w	r0, r0, r8
 8008196:	42a8      	cmp	r0, r5
 8008198:	d9af      	bls.n	80080fa <HAL_RCC_OscConfig+0x272>
 800819a:	e6d8      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800819c:	4d3f      	ldr	r5, [pc, #252]	; (800829c <HAL_RCC_OscConfig+0x414>)
 800819e:	68ab      	ldr	r3, [r5, #8]
 80081a0:	f003 030c 	and.w	r3, r3, #12
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	f43f ae73 	beq.w	8007e90 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081aa:	2a02      	cmp	r2, #2
 80081ac:	d165      	bne.n	800827a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80081ae:	69e3      	ldr	r3, [r4, #28]
 80081b0:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80081b4:	d004      	beq.n	80081c0 <HAL_RCC_OscConfig+0x338>
 80081b6:	f44f 7115 	mov.w	r1, #596	; 0x254
 80081ba:	4839      	ldr	r0, [pc, #228]	; (80082a0 <HAL_RCC_OscConfig+0x418>)
 80081bc:	f7f9 fcf5 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80081c0:	6a23      	ldr	r3, [r4, #32]
 80081c2:	3b02      	subs	r3, #2
 80081c4:	2b3d      	cmp	r3, #61	; 0x3d
 80081c6:	d904      	bls.n	80081d2 <HAL_RCC_OscConfig+0x34a>
 80081c8:	f240 2155 	movw	r1, #597	; 0x255
 80081cc:	4834      	ldr	r0, [pc, #208]	; (80082a0 <HAL_RCC_OscConfig+0x418>)
 80081ce:	f7f9 fcec 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80081d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d4:	3b32      	subs	r3, #50	; 0x32
 80081d6:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80081da:	d904      	bls.n	80081e6 <HAL_RCC_OscConfig+0x35e>
 80081dc:	f240 2156 	movw	r1, #598	; 0x256
 80081e0:	482f      	ldr	r0, [pc, #188]	; (80082a0 <HAL_RCC_OscConfig+0x418>)
 80081e2:	f7f9 fce2 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80081e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80081e8:	2a08      	cmp	r2, #8
 80081ea:	d804      	bhi.n	80081f6 <HAL_RCC_OscConfig+0x36e>
 80081ec:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80081f0:	40d3      	lsrs	r3, r2
 80081f2:	07d8      	lsls	r0, r3, #31
 80081f4:	d404      	bmi.n	8008200 <HAL_RCC_OscConfig+0x378>
 80081f6:	f240 2157 	movw	r1, #599	; 0x257
 80081fa:	4829      	ldr	r0, [pc, #164]	; (80082a0 <HAL_RCC_OscConfig+0x418>)
 80081fc:	f7f9 fcd5 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008200:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008202:	3b02      	subs	r3, #2
 8008204:	2b0d      	cmp	r3, #13
 8008206:	d904      	bls.n	8008212 <HAL_RCC_OscConfig+0x38a>
 8008208:	f44f 7116 	mov.w	r1, #600	; 0x258
 800820c:	4824      	ldr	r0, [pc, #144]	; (80082a0 <HAL_RCC_OscConfig+0x418>)
 800820e:	f7f9 fccc 	bl	8001baa <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8008212:	4d22      	ldr	r5, [pc, #136]	; (800829c <HAL_RCC_OscConfig+0x414>)
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800821a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800821c:	f7fd f88c 	bl	8005338 <HAL_GetTick>
 8008220:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	0199      	lsls	r1, r3, #6
 8008226:	d422      	bmi.n	800826e <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008228:	6a22      	ldr	r2, [r4, #32]
 800822a:	69e3      	ldr	r3, [r4, #28]
 800822c:	4313      	orrs	r3, r2
 800822e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008234:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800823a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800823e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008240:	4c16      	ldr	r4, [pc, #88]	; (800829c <HAL_RCC_OscConfig+0x414>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008242:	0852      	lsrs	r2, r2, #1
 8008244:	3a01      	subs	r2, #1
 8008246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800824a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008252:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008254:	f7fd f870 	bl	8005338 <HAL_GetTick>
 8008258:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	019a      	lsls	r2, r3, #6
 800825e:	f53f ae3d 	bmi.w	8007edc <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008262:	f7fd f869 	bl	8005338 <HAL_GetTick>
 8008266:	1b40      	subs	r0, r0, r5
 8008268:	2802      	cmp	r0, #2
 800826a:	d9f6      	bls.n	800825a <HAL_RCC_OscConfig+0x3d2>
 800826c:	e66f      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800826e:	f7fd f863 	bl	8005338 <HAL_GetTick>
 8008272:	1b80      	subs	r0, r0, r6
 8008274:	2802      	cmp	r0, #2
 8008276:	d9d4      	bls.n	8008222 <HAL_RCC_OscConfig+0x39a>
 8008278:	e669      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008282:	f7fd f859 	bl	8005338 <HAL_GetTick>
 8008286:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	019b      	lsls	r3, r3, #6
 800828c:	f57f ae26 	bpl.w	8007edc <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008290:	f7fd f852 	bl	8005338 <HAL_GetTick>
 8008294:	1b00      	subs	r0, r0, r4
 8008296:	2802      	cmp	r0, #2
 8008298:	d9f6      	bls.n	8008288 <HAL_RCC_OscConfig+0x400>
 800829a:	e658      	b.n	8007f4e <HAL_RCC_OscConfig+0xc6>
 800829c:	40023800 	.word	0x40023800
 80082a0:	080345e6 	.word	0x080345e6

080082a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082a4:	4913      	ldr	r1, [pc, #76]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80082a6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082a8:	688b      	ldr	r3, [r1, #8]
 80082aa:	f003 030c 	and.w	r3, r3, #12
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d003      	beq.n	80082ba <HAL_RCC_GetSysClockFreq+0x16>
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d003      	beq.n	80082be <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082b6:	4810      	ldr	r0, [pc, #64]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80082b8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80082ba:	4810      	ldr	r0, [pc, #64]	; (80082fc <HAL_RCC_GetSysClockFreq+0x58>)
 80082bc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082be:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80082c0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082c2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80082c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80082d0:	bf1a      	itte	ne
 80082d2:	480a      	ldrne	r0, [pc, #40]	; (80082fc <HAL_RCC_GetSysClockFreq+0x58>)
 80082d4:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082d6:	4808      	ldreq	r0, [pc, #32]	; (80082f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80082d8:	fba1 0100 	umull	r0, r1, r1, r0
 80082dc:	f7f8 fcd0 	bl	8000c80 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80082e0:	4b04      	ldr	r3, [pc, #16]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80082e8:	3301      	adds	r3, #1
 80082ea:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80082ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80082f0:	bd08      	pop	{r3, pc}
 80082f2:	bf00      	nop
 80082f4:	40023800 	.word	0x40023800
 80082f8:	00f42400 	.word	0x00f42400
 80082fc:	017d7840 	.word	0x017d7840

08008300 <HAL_RCC_ClockConfig>:
{
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008306:	4604      	mov	r4, r0
 8008308:	b910      	cbnz	r0, 8008310 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800830a:	2001      	movs	r0, #1
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008310:	6803      	ldr	r3, [r0, #0]
 8008312:	3b01      	subs	r3, #1
 8008314:	2b0e      	cmp	r3, #14
 8008316:	d904      	bls.n	8008322 <HAL_RCC_ClockConfig+0x22>
 8008318:	f240 21ca 	movw	r1, #714	; 0x2ca
 800831c:	486f      	ldr	r0, [pc, #444]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 800831e:	f7f9 fc44 	bl	8001baa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008322:	2d0f      	cmp	r5, #15
 8008324:	d904      	bls.n	8008330 <HAL_RCC_ClockConfig+0x30>
 8008326:	f240 21cb 	movw	r1, #715	; 0x2cb
 800832a:	486c      	ldr	r0, [pc, #432]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 800832c:	f7f9 fc3d 	bl	8001baa <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008330:	4a6b      	ldr	r2, [pc, #428]	; (80084e0 <HAL_RCC_ClockConfig+0x1e0>)
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	f003 030f 	and.w	r3, r3, #15
 8008338:	429d      	cmp	r5, r3
 800833a:	d83d      	bhi.n	80083b8 <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833c:	6822      	ldr	r2, [r4, #0]
 800833e:	0796      	lsls	r6, r2, #30
 8008340:	d445      	bmi.n	80083ce <HAL_RCC_ClockConfig+0xce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	07d9      	lsls	r1, r3, #31
 8008346:	d46f      	bmi.n	8008428 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008348:	4a65      	ldr	r2, [pc, #404]	; (80084e0 <HAL_RCC_ClockConfig+0x1e0>)
 800834a:	6813      	ldr	r3, [r2, #0]
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	429d      	cmp	r5, r3
 8008352:	f0c0 809d 	bcc.w	8008490 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	075a      	lsls	r2, r3, #29
 800835a:	f100 80a5 	bmi.w	80084a8 <HAL_RCC_ClockConfig+0x1a8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	071b      	lsls	r3, r3, #28
 8008362:	d518      	bpl.n	8008396 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800836a:	d00c      	beq.n	8008386 <HAL_RCC_ClockConfig+0x86>
 800836c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008370:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8008374:	d007      	beq.n	8008386 <HAL_RCC_ClockConfig+0x86>
 8008376:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800837a:	d004      	beq.n	8008386 <HAL_RCC_ClockConfig+0x86>
 800837c:	f240 313a 	movw	r1, #826	; 0x33a
 8008380:	4856      	ldr	r0, [pc, #344]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 8008382:	f7f9 fc12 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008386:	4a57      	ldr	r2, [pc, #348]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 8008388:	6921      	ldr	r1, [r4, #16]
 800838a:	6893      	ldr	r3, [r2, #8]
 800838c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008390:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008394:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008396:	f7ff ff85 	bl	80082a4 <HAL_RCC_GetSysClockFreq>
 800839a:	4b52      	ldr	r3, [pc, #328]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 800839c:	4a52      	ldr	r2, [pc, #328]	; (80084e8 <HAL_RCC_ClockConfig+0x1e8>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80083a4:	5cd3      	ldrb	r3, [r2, r3]
 80083a6:	40d8      	lsrs	r0, r3
 80083a8:	4b50      	ldr	r3, [pc, #320]	; (80084ec <HAL_RCC_ClockConfig+0x1ec>)
 80083aa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80083ac:	2000      	movs	r0, #0
 80083ae:	f7f9 fed5 	bl	800215c <HAL_InitTick>
  return HAL_OK;
 80083b2:	2000      	movs	r0, #0
 80083b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	f023 030f 	bic.w	r3, r3, #15
 80083be:	432b      	orrs	r3, r5
 80083c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	429d      	cmp	r5, r3
 80083ca:	d19e      	bne.n	800830a <HAL_RCC_ClockConfig+0xa>
 80083cc:	e7b6      	b.n	800833c <HAL_RCC_ClockConfig+0x3c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ce:	f012 0f04 	tst.w	r2, #4
 80083d2:	4b44      	ldr	r3, [pc, #272]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 80083d4:	d003      	beq.n	80083de <HAL_RCC_ClockConfig+0xde>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083d6:	6899      	ldr	r1, [r3, #8]
 80083d8:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80083dc:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083de:	0710      	lsls	r0, r2, #28
 80083e0:	d503      	bpl.n	80083ea <HAL_RCC_ClockConfig+0xea>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80083e8:	609a      	str	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80083f0:	d012      	beq.n	8008418 <HAL_RCC_ClockConfig+0x118>
 80083f2:	f023 0220 	bic.w	r2, r3, #32
 80083f6:	2a90      	cmp	r2, #144	; 0x90
 80083f8:	d00e      	beq.n	8008418 <HAL_RCC_ClockConfig+0x118>
 80083fa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80083fe:	2aa0      	cmp	r2, #160	; 0xa0
 8008400:	d00a      	beq.n	8008418 <HAL_RCC_ClockConfig+0x118>
 8008402:	f023 0210 	bic.w	r2, r3, #16
 8008406:	2ac0      	cmp	r2, #192	; 0xc0
 8008408:	d006      	beq.n	8008418 <HAL_RCC_ClockConfig+0x118>
 800840a:	2bf0      	cmp	r3, #240	; 0xf0
 800840c:	d004      	beq.n	8008418 <HAL_RCC_ClockConfig+0x118>
 800840e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008412:	4832      	ldr	r0, [pc, #200]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 8008414:	f7f9 fbc9 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008418:	4a32      	ldr	r2, [pc, #200]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 800841a:	68a1      	ldr	r1, [r4, #8]
 800841c:	6893      	ldr	r3, [r2, #8]
 800841e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008422:	430b      	orrs	r3, r1
 8008424:	6093      	str	r3, [r2, #8]
 8008426:	e78c      	b.n	8008342 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d904      	bls.n	8008438 <HAL_RCC_ClockConfig+0x138>
 800842e:	f240 21f6 	movw	r1, #758	; 0x2f6
 8008432:	482a      	ldr	r0, [pc, #168]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 8008434:	f7f9 fbb9 	bl	8001baa <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 800843c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843e:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008440:	d11e      	bne.n	8008480 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008442:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008446:	f43f af60 	beq.w	800830a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800844a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800844c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008450:	4e24      	ldr	r6, [pc, #144]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008452:	f022 0203 	bic.w	r2, r2, #3
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800845a:	f7fc ff6d 	bl	8005338 <HAL_GetTick>
 800845e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008460:	68b3      	ldr	r3, [r6, #8]
 8008462:	6862      	ldr	r2, [r4, #4]
 8008464:	f003 030c 	and.w	r3, r3, #12
 8008468:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800846c:	f43f af6c 	beq.w	8008348 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008470:	f7fc ff62 	bl	8005338 <HAL_GetTick>
 8008474:	1bc0      	subs	r0, r0, r7
 8008476:	4540      	cmp	r0, r8
 8008478:	d9f2      	bls.n	8008460 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800847a:	2003      	movs	r0, #3
}
 800847c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008480:	2902      	cmp	r1, #2
 8008482:	d102      	bne.n	800848a <HAL_RCC_ClockConfig+0x18a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008484:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8008488:	e7dd      	b.n	8008446 <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800848a:	f012 0f02 	tst.w	r2, #2
 800848e:	e7da      	b.n	8008446 <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	f023 030f 	bic.w	r3, r3, #15
 8008496:	432b      	orrs	r3, r5
 8008498:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	429d      	cmp	r5, r3
 80084a2:	f47f af32 	bne.w	800830a <HAL_RCC_ClockConfig+0xa>
 80084a6:	e756      	b.n	8008356 <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80084a8:	68e3      	ldr	r3, [r4, #12]
 80084aa:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80084ae:	d00c      	beq.n	80084ca <HAL_RCC_ClockConfig+0x1ca>
 80084b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084b4:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80084b8:	d007      	beq.n	80084ca <HAL_RCC_ClockConfig+0x1ca>
 80084ba:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80084be:	d004      	beq.n	80084ca <HAL_RCC_ClockConfig+0x1ca>
 80084c0:	f240 3133 	movw	r1, #819	; 0x333
 80084c4:	4805      	ldr	r0, [pc, #20]	; (80084dc <HAL_RCC_ClockConfig+0x1dc>)
 80084c6:	f7f9 fb70 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084ca:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <HAL_RCC_ClockConfig+0x1e4>)
 80084cc:	68e1      	ldr	r1, [r4, #12]
 80084ce:	6893      	ldr	r3, [r2, #8]
 80084d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6093      	str	r3, [r2, #8]
 80084d8:	e741      	b.n	800835e <HAL_RCC_ClockConfig+0x5e>
 80084da:	bf00      	nop
 80084dc:	080345e6 	.word	0x080345e6
 80084e0:	40023c00 	.word	0x40023c00
 80084e4:	40023800 	.word	0x40023800
 80084e8:	08034299 	.word	0x08034299
 80084ec:	200000cc 	.word	0x200000cc

080084f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <HAL_RCC_GetPCLK1Freq+0x14>)
 80084f2:	4a05      	ldr	r2, [pc, #20]	; (8008508 <HAL_RCC_GetPCLK1Freq+0x18>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80084fa:	5cd3      	ldrb	r3, [r2, r3]
 80084fc:	4a03      	ldr	r2, [pc, #12]	; (800850c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80084fe:	6810      	ldr	r0, [r2, #0]
}
 8008500:	40d8      	lsrs	r0, r3
 8008502:	4770      	bx	lr
 8008504:	40023800 	.word	0x40023800
 8008508:	080342a9 	.word	0x080342a9
 800850c:	200000cc 	.word	0x200000cc

08008510 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008510:	4b04      	ldr	r3, [pc, #16]	; (8008524 <HAL_RCC_GetPCLK2Freq+0x14>)
 8008512:	4a05      	ldr	r2, [pc, #20]	; (8008528 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800851a:	5cd3      	ldrb	r3, [r2, r3]
 800851c:	4a03      	ldr	r2, [pc, #12]	; (800852c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800851e:	6810      	ldr	r0, [r2, #0]
}
 8008520:	40d8      	lsrs	r0, r3
 8008522:	4770      	bx	lr
 8008524:	40023800 	.word	0x40023800
 8008528:	080342a9 	.word	0x080342a9
 800852c:	200000cc 	.word	0x200000cc

08008530 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008530:	230f      	movs	r3, #15
 8008532:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <HAL_RCC_GetClockConfig+0x34>)
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	f002 0203 	and.w	r2, r2, #3
 800853c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008544:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800854c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	08db      	lsrs	r3, r3, #3
 8008552:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008556:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <HAL_RCC_GetClockConfig+0x38>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 030f 	and.w	r3, r3, #15
 8008560:	600b      	str	r3, [r1, #0]
 8008562:	4770      	bx	lr
 8008564:	40023800 	.word	0x40023800
 8008568:	40023c00 	.word	0x40023c00

0800856c <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800856c:	6803      	ldr	r3, [r0, #0]
 800856e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008572:	f023 0306 	bic.w	r3, r3, #6
{
 8008576:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800857a:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800857c:	b91b      	cbnz	r3, 8008586 <HAL_RCCEx_PeriphCLKConfig+0x1a>
 800857e:	2174      	movs	r1, #116	; 0x74
 8008580:	48b3      	ldr	r0, [pc, #716]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008582:	f7f9 fb12 	bl	8001baa <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008586:	6826      	ldr	r6, [r4, #0]
 8008588:	f016 0601 	ands.w	r6, r6, #1
 800858c:	d013      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800858e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008590:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008594:	d003      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008596:	217a      	movs	r1, #122	; 0x7a
 8008598:	48ad      	ldr	r0, [pc, #692]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800859a:	f7f9 fb06 	bl	8001baa <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800859e:	4bad      	ldr	r3, [pc, #692]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	4332      	orrs	r2, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80085ae:	fab6 f686 	clz	r6, r6
 80085b2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085b4:	609a      	str	r2, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80085b6:	6825      	ldr	r5, [r4, #0]
 80085b8:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80085bc:	d01d      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80085be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085c0:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 80085c4:	d006      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80085c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ca:	d003      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80085cc:	218a      	movs	r1, #138	; 0x8a
 80085ce:	48a0      	ldr	r0, [pc, #640]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80085d0:	f7f9 faeb 	bl	8001baa <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085d4:	4a9f      	ldr	r2, [pc, #636]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80085d6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80085d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085dc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80085e4:	bf08      	it	eq
 80085e6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085ec:	bf16      	itet	ne
 80085ee:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80085f2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085f4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	02d8      	lsls	r0, r3, #11
 80085fe:	d51b      	bpl.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8008600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008602:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 8008606:	d006      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8008608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800860c:	d003      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800860e:	219e      	movs	r1, #158	; 0x9e
 8008610:	488f      	ldr	r0, [pc, #572]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008612:	f7f9 faca 	bl	8001baa <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008616:	498f      	ldr	r1, [pc, #572]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008618:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800861a:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800861e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008622:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008626:	ea43 0302 	orr.w	r3, r3, r2
 800862a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800862e:	f000 82b3 	beq.w	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8008632:	2a00      	cmp	r2, #0
 8008634:	bf08      	it	eq
 8008636:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008638:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 800863a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800863e:	bf18      	it	ne
 8008640:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008642:	0699      	lsls	r1, r3, #26
 8008644:	d563      	bpl.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008646:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800864c:	d02d      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800864e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008652:	d02a      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008654:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 8008658:	4a7f      	ldr	r2, [pc, #508]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800865a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800865e:	4290      	cmp	r0, r2
 8008660:	d023      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008662:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 8008666:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800866a:	4290      	cmp	r0, r2
 800866c:	d01d      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800866e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008672:	487a      	ldr	r0, [pc, #488]	; (800885c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008674:	4282      	cmp	r2, r0
 8008676:	d018      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008678:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 800867c:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 8008680:	4283      	cmp	r3, r0
 8008682:	d012      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008684:	4b76      	ldr	r3, [pc, #472]	; (8008860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008686:	429a      	cmp	r2, r3
 8008688:	d00f      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800868a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800868e:	429a      	cmp	r2, r3
 8008690:	d00b      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008692:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8008696:	429a      	cmp	r2, r3
 8008698:	d007      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800869a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800869e:	4299      	cmp	r1, r3
 80086a0:	d003      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80086a2:	21b9      	movs	r1, #185	; 0xb9
 80086a4:	486a      	ldr	r0, [pc, #424]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80086a6:	f7f9 fa80 	bl	8001baa <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086aa:	4b6a      	ldr	r3, [pc, #424]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086ac:	4f6d      	ldr	r7, [pc, #436]	; (8008864 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80086ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c6:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c8:	f7fc fe36 	bl	8005338 <HAL_GetTick>
 80086cc:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	05da      	lsls	r2, r3, #23
 80086d2:	f140 8263 	bpl.w	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x630>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086d6:	4f5f      	ldr	r7, [pc, #380]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80086de:	f040 8268 	bne.w	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x646>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086e4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80086e8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80086ec:	4a59      	ldr	r2, [pc, #356]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086ee:	f040 8286 	bne.w	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x692>
 80086f2:	6891      	ldr	r1, [r2, #8]
 80086f4:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80086f8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80086fc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8008700:	4301      	orrs	r1, r0
 8008702:	6091      	str	r1, [r2, #8]
 8008704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008708:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800870a:	430b      	orrs	r3, r1
 800870c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	06d9      	lsls	r1, r3, #27
 8008712:	d514      	bpl.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8008714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008716:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800871a:	d003      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800871c:	21f3      	movs	r1, #243	; 0xf3
 800871e:	484c      	ldr	r0, [pc, #304]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008720:	f7f9 fa43 	bl	8001baa <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008724:	4b4b      	ldr	r3, [pc, #300]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008726:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800872a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800872e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008732:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008738:	430a      	orrs	r2, r1
 800873a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	045a      	lsls	r2, r3, #17
 8008742:	d513      	bpl.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8008744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008746:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800874a:	d006      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800874c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008750:	d003      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008752:	21fd      	movs	r1, #253	; 0xfd
 8008754:	483e      	ldr	r0, [pc, #248]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008756:	f7f9 fa28 	bl	8001baa <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800875a:	4a3e      	ldr	r2, [pc, #248]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800875c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800875e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008762:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008766:	430b      	orrs	r3, r1
 8008768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	d514      	bpl.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008772:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008774:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
 8008778:	d007      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800877a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800877e:	d004      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008780:	f240 1107 	movw	r1, #263	; 0x107
 8008784:	4832      	ldr	r0, [pc, #200]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008786:	f7f9 fa10 	bl	8001baa <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800878a:	4a32      	ldr	r2, [pc, #200]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800878c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800878e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008792:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008796:	430b      	orrs	r3, r1
 8008798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	03df      	lsls	r7, r3, #15
 80087a0:	d514      	bpl.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80087a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80087a4:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 80087a8:	d007      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80087aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ae:	d004      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80087b0:	f240 1111 	movw	r1, #273	; 0x111
 80087b4:	4826      	ldr	r0, [pc, #152]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80087b6:	f7f9 f9f8 	bl	8001baa <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087ba:	4a26      	ldr	r2, [pc, #152]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087bc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80087be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80087c2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087c6:	430b      	orrs	r3, r1
 80087c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	0398      	lsls	r0, r3, #14
 80087d0:	d514      	bpl.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80087d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80087d4:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 80087d8:	d007      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80087da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087de:	d004      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80087e0:	f240 111b 	movw	r1, #283	; 0x11b
 80087e4:	481a      	ldr	r0, [pc, #104]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80087e6:	f7f9 f9e0 	bl	8001baa <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ea:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80087ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80087f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80087f6:	430b      	orrs	r3, r1
 80087f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	0659      	lsls	r1, r3, #25
 8008800:	d510      	bpl.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8008802:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008804:	2b03      	cmp	r3, #3
 8008806:	d904      	bls.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008808:	f240 1125 	movw	r1, #293	; 0x125
 800880c:	4810      	ldr	r0, [pc, #64]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800880e:	f7f9 f9cc 	bl	8001baa <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008814:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008816:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	430b      	orrs	r3, r1
 8008820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	061a      	lsls	r2, r3, #24
 8008828:	d51e      	bpl.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800882a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800882c:	f033 030c 	bics.w	r3, r3, #12
 8008830:	d004      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008832:	f240 112f 	movw	r1, #303	; 0x12f
 8008836:	4806      	ldr	r0, [pc, #24]	; (8008850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008838:	f7f9 f9b7 	bl	8001baa <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800883c:	4a05      	ldr	r2, [pc, #20]	; (8008854 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800883e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008840:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008844:	f023 030c 	bic.w	r3, r3, #12
 8008848:	430b      	orrs	r3, r1
 800884a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800884e:	e00b      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008850:	08034624 	.word	0x08034624
 8008854:	40023800 	.word	0x40023800
 8008858:	00020300 	.word	0x00020300
 800885c:	00080300 	.word	0x00080300
 8008860:	00100300 	.word	0x00100300
 8008864:	40007000 	.word	0x40007000
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	05db      	lsls	r3, r3, #23
 800886c:	d511      	bpl.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800886e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008870:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008874:	d004      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8008876:	f240 1139 	movw	r1, #313	; 0x139
 800887a:	48bd      	ldr	r0, [pc, #756]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800887c:	f7f9 f995 	bl	8001baa <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008880:	4abc      	ldr	r2, [pc, #752]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008882:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008884:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008888:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800888c:	430b      	orrs	r3, r1
 800888e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	059f      	lsls	r7, r3, #22
 8008896:	d511      	bpl.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8008898:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800889a:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 800889e:	d004      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80088a0:	f240 1143 	movw	r1, #323	; 0x143
 80088a4:	48b2      	ldr	r0, [pc, #712]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80088a6:	f7f9 f980 	bl	8001baa <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088aa:	4ab2      	ldr	r2, [pc, #712]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80088ac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80088ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80088b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088b6:	430b      	orrs	r3, r1
 80088b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	0558      	lsls	r0, r3, #21
 80088c0:	d511      	bpl.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80088c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80088c4:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80088c8:	d004      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80088ca:	f240 114d 	movw	r1, #333	; 0x14d
 80088ce:	48a8      	ldr	r0, [pc, #672]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80088d0:	f7f9 f96b 	bl	8001baa <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088d4:	4aa7      	ldr	r2, [pc, #668]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80088d6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80088d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80088dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e0:	430b      	orrs	r3, r1
 80088e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	0519      	lsls	r1, r3, #20
 80088ea:	d511      	bpl.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80088ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ee:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80088f2:	d004      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x392>
 80088f4:	f240 1157 	movw	r1, #343	; 0x157
 80088f8:	489d      	ldr	r0, [pc, #628]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80088fa:	f7f9 f956 	bl	8001baa <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80088fe:	4a9d      	ldr	r2, [pc, #628]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008900:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008902:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008906:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800890a:	430b      	orrs	r3, r1
 800890c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	04da      	lsls	r2, r3, #19
 8008914:	d511      	bpl.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8008916:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008918:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800891c:	d004      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800891e:	f240 1161 	movw	r1, #353	; 0x161
 8008922:	4893      	ldr	r0, [pc, #588]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008924:	f7f9 f941 	bl	8001baa <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008928:	4a92      	ldr	r2, [pc, #584]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800892a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800892c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008934:	430b      	orrs	r3, r1
 8008936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	049b      	lsls	r3, r3, #18
 800893e:	d511      	bpl.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8008940:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008942:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008946:	d004      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008948:	f240 116b 	movw	r1, #363	; 0x16b
 800894c:	4888      	ldr	r0, [pc, #544]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800894e:	f7f9 f92c 	bl	8001baa <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008952:	4a88      	ldr	r2, [pc, #544]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008954:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008956:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800895a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800895e:	430b      	orrs	r3, r1
 8008960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	025f      	lsls	r7, r3, #9
 8008968:	d511      	bpl.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800896a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800896c:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 8008970:	d004      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008972:	f240 1175 	movw	r1, #373	; 0x175
 8008976:	487e      	ldr	r0, [pc, #504]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008978:	f7f9 f917 	bl	8001baa <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800897c:	4a7d      	ldr	r2, [pc, #500]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800897e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008980:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008988:	430b      	orrs	r3, r1
 800898a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	0298      	lsls	r0, r3, #10
 8008992:	d515      	bpl.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008994:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008996:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 800899a:	d004      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800899c:	f240 117f 	movw	r1, #383	; 0x17f
 80089a0:	4873      	ldr	r0, [pc, #460]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80089a2:	f7f9 f902 	bl	8001baa <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089a6:	4973      	ldr	r1, [pc, #460]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80089a8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80089aa:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80089ae:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089b2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
      pllsaiused = 1;
 80089b6:	bf08      	it	eq
 80089b8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089c0:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 80089c2:	f013 0f08 	tst.w	r3, #8
 80089c6:	bf18      	it	ne
 80089c8:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089ca:	0359      	lsls	r1, r3, #13
 80089cc:	d511      	bpl.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80089ce:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80089d0:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80089d4:	d004      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80089d6:	f240 1197 	movw	r1, #407	; 0x197
 80089da:	4865      	ldr	r0, [pc, #404]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80089dc:	f7f9 f8e5 	bl	8001baa <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089e0:	4a64      	ldr	r2, [pc, #400]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80089e2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80089e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80089e8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80089ec:	430b      	orrs	r3, r1
 80089ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	021a      	lsls	r2, r3, #8
 80089f6:	d513      	bpl.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80089f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80089fc:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8008a00:	d004      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a02:	f240 11a1 	movw	r1, #417	; 0x1a1
 8008a06:	485a      	ldr	r0, [pc, #360]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a08:	f7f9 f8cf 	bl	8001baa <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a0c:	4a59      	ldr	r2, [pc, #356]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a0e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008a12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008a20:	2e01      	cmp	r6, #1
 8008a22:	f000 80f0 	beq.w	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a2c:	f000 80eb 	beq.w	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a30:	2d01      	cmp	r5, #1
 8008a32:	f040 80af 	bne.w	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a36:	4d4f      	ldr	r5, [pc, #316]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a40:	f7fc fc7a 	bl	8005338 <HAL_GetTick>
 8008a44:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	009f      	lsls	r7, r3, #2
 8008a4a:	f100 81ad 	bmi.w	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        return HAL_TIMEOUT;
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8008a4e:	6963      	ldr	r3, [r4, #20]
 8008a50:	3b32      	subs	r3, #50	; 0x32
 8008a52:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8008a56:	d904      	bls.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a58:	f240 2146 	movw	r1, #582	; 0x246
 8008a5c:	4844      	ldr	r0, [pc, #272]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a5e:	f7f9 f8a4 	bl	8001baa <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	031d      	lsls	r5, r3, #12
 8008a66:	d501      	bpl.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008a68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008a6a:	b11a      	cbz	r2, 8008a74 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008a6c:	02d8      	lsls	r0, r3, #11
 8008a6e:	d52f      	bpl.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x564>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a72:	bb6b      	cbnz	r3, 8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8008a74:	69a3      	ldr	r3, [r4, #24]
 8008a76:	3b02      	subs	r3, #2
 8008a78:	2b0d      	cmp	r3, #13
 8008a7a:	d904      	bls.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a7c:	f240 214d 	movw	r1, #589	; 0x24d
 8008a80:	483b      	ldr	r0, [pc, #236]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a82:	f7f9 f892 	bl	8001baa <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8008a86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	2b1f      	cmp	r3, #31
 8008a8c:	d904      	bls.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008a8e:	f240 214f 	movw	r1, #591	; 0x24f
 8008a92:	4837      	ldr	r0, [pc, #220]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a94:	f7f9 f889 	bl	8001baa <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a98:	4a36      	ldr	r2, [pc, #216]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a9a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a9e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008aa6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008ab2:	69a1      	ldr	r1, [r4, #24]
 8008ab4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008abc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008ac0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008ac2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008ac6:	3901      	subs	r1, #1
 8008ac8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	0299      	lsls	r1, r3, #10
 8008ad4:	d51d      	bpl.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008ad6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008adc:	d119      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8008ade:	6a23      	ldr	r3, [r4, #32]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d904      	bls.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008ae4:	f240 2162 	movw	r1, #610	; 0x262
 8008ae8:	4821      	ldr	r0, [pc, #132]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008aea:	f7f9 f85e 	bl	8001baa <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aee:	4a21      	ldr	r2, [pc, #132]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008af0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008af4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008af8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008afc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6961      	ldr	r1, [r4, #20]
 8008b04:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008b08:	6a21      	ldr	r1, [r4, #32]
 8008b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	071a      	lsls	r2, r3, #28
 8008b16:	d531      	bpl.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8008b18:	69e3      	ldr	r3, [r4, #28]
 8008b1a:	3b02      	subs	r3, #2
 8008b1c:	2b05      	cmp	r3, #5
 8008b1e:	d904      	bls.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8008b20:	f240 2171 	movw	r1, #625	; 0x271
 8008b24:	4812      	ldr	r0, [pc, #72]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b26:	f7f9 f840 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8008b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b2c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008b30:	d004      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008b32:	f240 2172 	movw	r1, #626	; 0x272
 8008b36:	480e      	ldr	r0, [pc, #56]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b38:	f7f9 f837 	bl	8001baa <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b3c:	4a0d      	ldr	r2, [pc, #52]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008b3e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b46:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	6961      	ldr	r1, [r4, #20]
 8008b52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008b56:	69e1      	ldr	r1, [r4, #28]
 8008b58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b60:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008b64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b66:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	e004      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008b6e:	bf00      	nop
 8008b70:	08034624 	.word	0x08034624
 8008b74:	40023800 	.word	0x40023800
 8008b78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b7c:	4c91      	ldr	r4, [pc, #580]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b86:	f7fc fbd7 	bl	8005338 <HAL_GetTick>
 8008b8a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	f140 8111 	bpl.w	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008b94:	2000      	movs	r0, #0
 8008b96:	e009      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x640>
      plli2sused = 1;
 8008b98:	2601      	movs	r6, #1
 8008b9a:	e54d      	b.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b9c:	f7fc fbcc 	bl	8005338 <HAL_GetTick>
 8008ba0:	eba0 0008 	sub.w	r0, r0, r8
 8008ba4:	2864      	cmp	r0, #100	; 0x64
 8008ba6:	f67f ad92 	bls.w	80086ce <HAL_RCCEx_PeriphCLKConfig+0x162>
        return HAL_TIMEOUT;
 8008baa:	2003      	movs	r0, #3
}
 8008bac:	b003      	add	sp, #12
 8008bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008bb4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	f43f ad92 	beq.w	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bc0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008bca:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008bce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bd2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008bd4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd8:	07db      	lsls	r3, r3, #31
 8008bda:	f57f ad82 	bpl.w	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
        tickstart = HAL_GetTick();
 8008bde:	f7fc fbab 	bl	8005338 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008be2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008be6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bea:	0798      	lsls	r0, r3, #30
 8008bec:	f53f ad79 	bmi.w	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bf0:	f7fc fba2 	bl	8005338 <HAL_GetTick>
 8008bf4:	eba0 0008 	sub.w	r0, r0, r8
 8008bf8:	4548      	cmp	r0, r9
 8008bfa:	d9f5      	bls.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8008bfc:	e7d5      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bfe:	6891      	ldr	r1, [r2, #8]
 8008c00:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8008c04:	e57d      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_PLLI2S_DISABLE();
 8008c06:	4e6f      	ldr	r6, [pc, #444]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008c08:	6833      	ldr	r3, [r6, #0]
 8008c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c0e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008c10:	f7fc fb92 	bl	8005338 <HAL_GetTick>
 8008c14:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c16:	6833      	ldr	r3, [r6, #0]
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	f100 80be 	bmi.w	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	3b32      	subs	r3, #50	; 0x32
 8008c22:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8008c26:	d904      	bls.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8008c28:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008c2c:	4866      	ldr	r0, [pc, #408]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008c2e:	f7f8 ffbc 	bl	8001baa <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	07df      	lsls	r7, r3, #31
 8008c36:	d51c      	bpl.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8008c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c3a:	b9d3      	cbnz	r3, 8008c72 <HAL_RCCEx_PeriphCLKConfig+0x706>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008c3c:	68a3      	ldr	r3, [r4, #8]
 8008c3e:	3b02      	subs	r3, #2
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d904      	bls.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008c44:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008c48:	485f      	ldr	r0, [pc, #380]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008c4a:	f7f8 ffae 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c4e:	4a5d      	ldr	r2, [pc, #372]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008c50:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c54:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c5c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6861      	ldr	r1, [r4, #4]
 8008c64:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008c68:	68a1      	ldr	r1, [r4, #8]
 8008c6a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008c6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	031e      	lsls	r6, r3, #12
 8008c76:	d503      	bpl.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008c78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008c7a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8008c80:	02d8      	lsls	r0, r3, #11
 8008c82:	d530      	bpl.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c8a:	d12c      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008c8c:	68e3      	ldr	r3, [r4, #12]
 8008c8e:	3b02      	subs	r3, #2
 8008c90:	2b0d      	cmp	r3, #13
 8008c92:	d904      	bls.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x732>
 8008c94:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8008c98:	484b      	ldr	r0, [pc, #300]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008c9a:	f7f8 ff86 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8008c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	2b1f      	cmp	r3, #31
 8008ca4:	d904      	bls.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8008ca6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008caa:	4847      	ldr	r0, [pc, #284]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008cac:	f7f8 ff7d 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008cb0:	4a44      	ldr	r2, [pc, #272]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008cb2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008cb6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cbe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	6861      	ldr	r1, [r4, #4]
 8008cc6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008cca:	68e1      	ldr	r1, [r4, #12]
 8008ccc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008cd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008cd4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8008cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cda:	f021 011f 	bic.w	r1, r1, #31
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	01d9      	lsls	r1, r3, #7
 8008cea:	d519      	bpl.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d904      	bls.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008cf2:	f240 2107 	movw	r1, #519	; 0x207
 8008cf6:	4834      	ldr	r0, [pc, #208]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008cf8:	f7f8 ff57 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008cfc:	4a31      	ldr	r2, [pc, #196]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008cfe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d02:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008d06:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008d0a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008d0e:	430b      	orrs	r3, r1
 8008d10:	6861      	ldr	r1, [r4, #4]
 8008d12:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008d16:	6921      	ldr	r1, [r4, #16]
 8008d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008d1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	019a      	lsls	r2, r3, #6
 8008d24:	d527      	bpl.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d904      	bls.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 8008d2c:	f240 2116 	movw	r1, #534	; 0x216
 8008d30:	4825      	ldr	r0, [pc, #148]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008d32:	f7f8 ff3a 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	3b02      	subs	r3, #2
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d904      	bls.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8008d3e:	f240 2117 	movw	r1, #535	; 0x217
 8008d42:	4821      	ldr	r0, [pc, #132]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008d44:	f7f8 ff31 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008d48:	68e3      	ldr	r3, [r4, #12]
 8008d4a:	3b02      	subs	r3, #2
 8008d4c:	2b0d      	cmp	r3, #13
 8008d4e:	d904      	bls.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8008d50:	f44f 7106 	mov.w	r1, #536	; 0x218
 8008d54:	481c      	ldr	r0, [pc, #112]	; (8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008d56:	f7f8 ff28 	bl	8001baa <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d5a:	6923      	ldr	r3, [r4, #16]
 8008d5c:	6862      	ldr	r2, [r4, #4]
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008d64:	68e2      	ldr	r2, [r4, #12]
 8008d66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d6a:	68a2      	ldr	r2, [r4, #8]
 8008d6c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008d70:	4a14      	ldr	r2, [pc, #80]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008d72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008d76:	4e13      	ldr	r6, [pc, #76]	; (8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d7e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008d80:	f7fc fada 	bl	8005338 <HAL_GetTick>
 8008d84:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d86:	6833      	ldr	r3, [r6, #0]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	f53f ae51 	bmi.w	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d8e:	f7fc fad3 	bl	8005338 <HAL_GetTick>
 8008d92:	1bc0      	subs	r0, r0, r7
 8008d94:	2864      	cmp	r0, #100	; 0x64
 8008d96:	d9f6      	bls.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008d98:	e707      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d9a:	f7fc facd 	bl	8005338 <HAL_GetTick>
 8008d9e:	1bc0      	subs	r0, r0, r7
 8008da0:	2864      	cmp	r0, #100	; 0x64
 8008da2:	f67f af38 	bls.w	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8008da6:	e700      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008da8:	f7fc fac6 	bl	8005338 <HAL_GetTick>
 8008dac:	1b80      	subs	r0, r0, r6
 8008dae:	2864      	cmp	r0, #100	; 0x64
 8008db0:	f67f ae49 	bls.w	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008db4:	e6f9      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008db6:	f7fc fabf 	bl	8005338 <HAL_GetTick>
 8008dba:	1b40      	subs	r0, r0, r5
 8008dbc:	2864      	cmp	r0, #100	; 0x64
 8008dbe:	f67f aee5 	bls.w	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x620>
 8008dc2:	e6f2      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	08034624 	.word	0x08034624

08008dcc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008dcc:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008dd0:	d12a      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008dd2:	4b2c      	ldr	r3, [pc, #176]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008dd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008dd8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8008ddc:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008de0:	d032      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008de2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8008de6:	d02d      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8008de8:	2a00      	cmp	r2, #0
 8008dea:	d148      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008dec:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008dee:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008df0:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008df2:	4a24      	ldr	r2, [pc, #144]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008df4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008df8:	bf54      	ite	pl
 8008dfa:	4b23      	ldrpl	r3, [pc, #140]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008dfc:	4b23      	ldrmi	r3, [pc, #140]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008dfe:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e02:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008e06:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8008e0a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008e0e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008e10:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008e14:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008e18:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008e1c:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008e20:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8008e22:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8008e26:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008e28:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8008e2c:	d127      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008e30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008e34:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8008e38:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008e3c:	d004      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008e3e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008e42:	e7d0      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008e44:	4812      	ldr	r0, [pc, #72]	; (8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8008e46:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008e48:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e4a:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008e4c:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e4e:	4a0d      	ldr	r2, [pc, #52]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008e50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008e54:	bf54      	ite	pl
 8008e56:	4b0c      	ldrpl	r3, [pc, #48]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e58:	4b0c      	ldrmi	r3, [pc, #48]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e5a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008e5e:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008e62:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8008e66:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008e6a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008e6c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008e70:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008e74:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	e7d0      	b.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8008e7e:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40023800 	.word	0x40023800
 8008e88:	00f42400 	.word	0x00f42400
 8008e8c:	017d7840 	.word	0x017d7840
 8008e90:	00bb8000 	.word	0x00bb8000

08008e94 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e94:	6802      	ldr	r2, [r0, #0]
{
 8008e96:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e98:	68d3      	ldr	r3, [r2, #12]
{
 8008e9a:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ea0:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ea2:	f7fc fa49 	bl	8005338 <HAL_GetTick>
 8008ea6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	069b      	lsls	r3, r3, #26
 8008eae:	d501      	bpl.n	8008eb4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eb4:	f7fc fa40 	bl	8005338 <HAL_GetTick>
 8008eb8:	1b40      	subs	r0, r0, r5
 8008eba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ebe:	d9f3      	bls.n	8008ea8 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8008ec0:	2003      	movs	r0, #3
}
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}

08008ec4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008ec4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ec6:	6803      	ldr	r3, [r0, #0]
{
 8008ec8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	0652      	lsls	r2, r2, #25
 8008ece:	d501      	bpl.n	8008ed4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8008eda:	f7fc fa2d 	bl	8005338 <HAL_GetTick>
 8008ede:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	065b      	lsls	r3, r3, #25
 8008ee6:	d4f3      	bmi.n	8008ed0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008ee8:	f7fc fa26 	bl	8005338 <HAL_GetTick>
 8008eec:	1b40      	subs	r0, r0, r5
 8008eee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008ef2:	d9f5      	bls.n	8008ee0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8008ef4:	2003      	movs	r0, #3
}
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}

08008ef8 <HAL_RTC_Init>:
{
 8008ef8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8008efa:	4604      	mov	r4, r0
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d050      	beq.n	8008fa2 <HAL_RTC_Init+0xaa>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008f00:	6802      	ldr	r2, [r0, #0]
 8008f02:	4b3c      	ldr	r3, [pc, #240]	; (8008ff4 <HAL_RTC_Init+0xfc>)
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d003      	beq.n	8008f10 <HAL_RTC_Init+0x18>
 8008f08:	21fb      	movs	r1, #251	; 0xfb
 8008f0a:	483b      	ldr	r0, [pc, #236]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f0c:	f7f8 fe4d 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8008f16:	d003      	beq.n	8008f20 <HAL_RTC_Init+0x28>
 8008f18:	21fc      	movs	r1, #252	; 0xfc
 8008f1a:	4837      	ldr	r0, [pc, #220]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f1c:	f7f8 fe45 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	2b7f      	cmp	r3, #127	; 0x7f
 8008f24:	d903      	bls.n	8008f2e <HAL_RTC_Init+0x36>
 8008f26:	21fd      	movs	r1, #253	; 0xfd
 8008f28:	4833      	ldr	r0, [pc, #204]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f2a:	f7f8 fe3e 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008f2e:	68e3      	ldr	r3, [r4, #12]
 8008f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f34:	d303      	bcc.n	8008f3e <HAL_RTC_Init+0x46>
 8008f36:	21fe      	movs	r1, #254	; 0xfe
 8008f38:	482f      	ldr	r0, [pc, #188]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f3a:	f7f8 fe36 	bl	8001baa <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008f44:	d003      	beq.n	8008f4e <HAL_RTC_Init+0x56>
 8008f46:	21ff      	movs	r1, #255	; 0xff
 8008f48:	482b      	ldr	r0, [pc, #172]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f4a:	f7f8 fe2e 	bl	8001baa <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008f4e:	6963      	ldr	r3, [r4, #20]
 8008f50:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8008f54:	d004      	beq.n	8008f60 <HAL_RTC_Init+0x68>
 8008f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f5a:	4827      	ldr	r0, [pc, #156]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f5c:	f7f8 fe25 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008f60:	69a3      	ldr	r3, [r4, #24]
 8008f62:	f033 0308 	bics.w	r3, r3, #8
 8008f66:	d004      	beq.n	8008f72 <HAL_RTC_Init+0x7a>
 8008f68:	f240 1101 	movw	r1, #257	; 0x101
 8008f6c:	4822      	ldr	r0, [pc, #136]	; (8008ff8 <HAL_RTC_Init+0x100>)
 8008f6e:	f7f8 fe1c 	bl	8001baa <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008f72:	7f63      	ldrb	r3, [r4, #29]
 8008f74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008f78:	b91b      	cbnz	r3, 8008f82 <HAL_RTC_Init+0x8a>
    hrtc->Lock = HAL_UNLOCKED;
 8008f7a:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f7f8 ff15 	bl	8001dac <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f82:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f84:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f86:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f88:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f8e:	2253      	movs	r2, #83	; 0x53
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f92:	f7ff ff97 	bl	8008ec4 <RTC_EnterInitMode>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	b128      	cbz	r0, 8008fa6 <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f9a:	22ff      	movs	r2, #255	; 0xff
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f9e:	2304      	movs	r3, #4
 8008fa0:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8008fa2:	2001      	movs	r0, #1
}
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008fa6:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fa8:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008faa:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8008fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fb4:	6862      	ldr	r2, [r4, #4]
 8008fb6:	6899      	ldr	r1, [r3, #8]
 8008fb8:	432a      	orrs	r2, r5
 8008fba:	6965      	ldr	r5, [r4, #20]
 8008fbc:	432a      	orrs	r2, r5
 8008fbe:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008fc0:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fc2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fc4:	68e2      	ldr	r2, [r4, #12]
 8008fc6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008fce:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008fd0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fd8:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fdc:	f022 0208 	bic.w	r2, r2, #8
 8008fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fe8:	22ff      	movs	r2, #255	; 0xff
 8008fea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40002800 	.word	0x40002800
 8008ff8:	08034665 	.word	0x08034665

08008ffc <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8008ffc:	2300      	movs	r3, #0

  while(Value >= 10)
 8008ffe:	2809      	cmp	r0, #9
 8009000:	d803      	bhi.n	800900a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009002:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8009006:	b2c0      	uxtb	r0, r0
 8009008:	4770      	bx	lr
    Value -= 10;
 800900a:	380a      	subs	r0, #10
    bcdhigh++;
 800900c:	3301      	adds	r3, #1
    Value -= 10;
 800900e:	b2c0      	uxtb	r0, r0
 8009010:	e7f5      	b.n	8008ffe <RTC_ByteToBcd2+0x2>

08009012 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009012:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8009014:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009018:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800901c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8009020:	b2c0      	uxtb	r0, r0
 8009022:	4770      	bx	lr

08009024 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 8009024:	2a01      	cmp	r2, #1
{
 8009026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009028:	4606      	mov	r6, r0
 800902a:	460c      	mov	r4, r1
 800902c:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 800902e:	d904      	bls.n	800903a <HAL_RTC_SetTime+0x16>
 8009030:	f240 21db 	movw	r1, #731	; 0x2db
 8009034:	486d      	ldr	r0, [pc, #436]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 8009036:	f7f8 fdb8 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009040:	d007      	beq.n	8009052 <HAL_RTC_SetTime+0x2e>
 8009042:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009046:	d004      	beq.n	8009052 <HAL_RTC_SetTime+0x2e>
 8009048:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800904c:	4867      	ldr	r0, [pc, #412]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 800904e:	f7f8 fdac 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8009058:	d004      	beq.n	8009064 <HAL_RTC_SetTime+0x40>
 800905a:	f240 21dd 	movw	r1, #733	; 0x2dd
 800905e:	4863      	ldr	r0, [pc, #396]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 8009060:	f7f8 fda3 	bl	8001baa <assert_failed>
  __HAL_LOCK(hrtc);
 8009064:	7f33      	ldrb	r3, [r6, #28]
 8009066:	2702      	movs	r7, #2
 8009068:	2b01      	cmp	r3, #1
 800906a:	d04f      	beq.n	800910c <HAL_RTC_SetTime+0xe8>
 800906c:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800906e:	7777      	strb	r7, [r6, #29]
  __HAL_LOCK(hrtc);
 8009070:	7733      	strb	r3, [r6, #28]
 8009072:	6833      	ldr	r3, [r6, #0]
 8009074:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009076:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8009078:	2d00      	cmp	r5, #0
 800907a:	d14f      	bne.n	800911c <HAL_RTC_SetTime+0xf8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800907c:	065a      	lsls	r2, r3, #25
 800907e:	d547      	bpl.n	8009110 <HAL_RTC_SetTime+0xec>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8009080:	3801      	subs	r0, #1
 8009082:	280b      	cmp	r0, #11
 8009084:	d904      	bls.n	8009090 <HAL_RTC_SetTime+0x6c>
 8009086:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 800908a:	4858      	ldr	r0, [pc, #352]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 800908c:	f7f8 fd8d 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8009090:	7b23      	ldrb	r3, [r4, #12]
 8009092:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 8009096:	d004      	beq.n	80090a2 <HAL_RTC_SetTime+0x7e>
 8009098:	f240 21e9 	movw	r1, #745	; 0x2e9
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 800909c:	4853      	ldr	r0, [pc, #332]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 800909e:	f7f8 fd84 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80090a2:	7863      	ldrb	r3, [r4, #1]
 80090a4:	2b3b      	cmp	r3, #59	; 0x3b
 80090a6:	d904      	bls.n	80090b2 <HAL_RTC_SetTime+0x8e>
 80090a8:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80090ac:	484f      	ldr	r0, [pc, #316]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 80090ae:	f7f8 fd7c 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80090b2:	78a3      	ldrb	r3, [r4, #2]
 80090b4:	2b3b      	cmp	r3, #59	; 0x3b
 80090b6:	d904      	bls.n	80090c2 <HAL_RTC_SetTime+0x9e>
 80090b8:	f240 21f1 	movw	r1, #753	; 0x2f1
 80090bc:	484b      	ldr	r0, [pc, #300]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 80090be:	f7f8 fd74 	bl	8001baa <assert_failed>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80090c2:	7820      	ldrb	r0, [r4, #0]
 80090c4:	f7ff ff9a 	bl	8008ffc <RTC_ByteToBcd2>
 80090c8:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80090ca:	7860      	ldrb	r0, [r4, #1]
 80090cc:	f7ff ff96 	bl	8008ffc <RTC_ByteToBcd2>
 80090d0:	4605      	mov	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80090d2:	78a0      	ldrb	r0, [r4, #2]
 80090d4:	f7ff ff92 	bl	8008ffc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 80090d8:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80090da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80090de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80090e2:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090e6:	6833      	ldr	r3, [r6, #0]
 80090e8:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80090ea:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24
 80090ee:	2253      	movs	r2, #83	; 0x53
 80090f0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80090f2:	f7ff fee7 	bl	8008ec4 <RTC_EnterInitMode>
 80090f6:	6833      	ldr	r3, [r6, #0]
 80090f8:	4607      	mov	r7, r0
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d04c      	beq.n	8009198 <HAL_RTC_SetTime+0x174>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090fe:	22ff      	movs	r2, #255	; 0xff
 8009100:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009102:	2304      	movs	r3, #4
 8009104:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8009106:	2300      	movs	r3, #0
 8009108:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 800910a:	2701      	movs	r7, #1
}
 800910c:	4638      	mov	r0, r7
 800910e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8009110:	2817      	cmp	r0, #23
      sTime->TimeFormat = 0x00;
 8009112:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8009114:	d9c5      	bls.n	80090a2 <HAL_RTC_SetTime+0x7e>
 8009116:	f240 21ee 	movw	r1, #750	; 0x2ee
 800911a:	e7bf      	b.n	800909c <HAL_RTC_SetTime+0x78>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800911c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8009120:	d032      	beq.n	8009188 <HAL_RTC_SetTime+0x164>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8009122:	f7ff ff76 	bl	8009012 <RTC_Bcd2ToByte>
 8009126:	3801      	subs	r0, #1
 8009128:	b2c0      	uxtb	r0, r0
 800912a:	280b      	cmp	r0, #11
 800912c:	d904      	bls.n	8009138 <HAL_RTC_SetTime+0x114>
 800912e:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8009132:	482e      	ldr	r0, [pc, #184]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 8009134:	f7f8 fd39 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8009138:	7b23      	ldrb	r3, [r4, #12]
 800913a:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800913e:	d004      	beq.n	800914a <HAL_RTC_SetTime+0x126>
 8009140:	f240 21fd 	movw	r1, #765	; 0x2fd
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8009144:	4829      	ldr	r0, [pc, #164]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 8009146:	f7f8 fd30 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800914a:	7860      	ldrb	r0, [r4, #1]
 800914c:	f7ff ff61 	bl	8009012 <RTC_Bcd2ToByte>
 8009150:	283b      	cmp	r0, #59	; 0x3b
 8009152:	d904      	bls.n	800915e <HAL_RTC_SetTime+0x13a>
 8009154:	f44f 7141 	mov.w	r1, #772	; 0x304
 8009158:	4824      	ldr	r0, [pc, #144]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 800915a:	f7f8 fd26 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800915e:	78a0      	ldrb	r0, [r4, #2]
 8009160:	f7ff ff57 	bl	8009012 <RTC_Bcd2ToByte>
 8009164:	283b      	cmp	r0, #59	; 0x3b
 8009166:	d904      	bls.n	8009172 <HAL_RTC_SetTime+0x14e>
 8009168:	f240 3105 	movw	r1, #773	; 0x305
 800916c:	481f      	ldr	r0, [pc, #124]	; (80091ec <HAL_RTC_SetTime+0x1c8>)
 800916e:	f7f8 fd1c 	bl	8001baa <assert_failed>
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009172:	7860      	ldrb	r0, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009174:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009176:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009178:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800917c:	78a5      	ldrb	r5, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800917e:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009180:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009182:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8009186:	e7ae      	b.n	80090e6 <HAL_RTC_SetTime+0xc2>
      sTime->TimeFormat = 0x00;
 8009188:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800918a:	f7ff ff42 	bl	8009012 <RTC_Bcd2ToByte>
 800918e:	2817      	cmp	r0, #23
 8009190:	d9db      	bls.n	800914a <HAL_RTC_SetTime+0x126>
 8009192:	f240 3102 	movw	r1, #770	; 0x302
 8009196:	e7d5      	b.n	8009144 <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009198:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800919c:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800919e:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80091a2:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80091aa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	6961      	ldr	r1, [r4, #20]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091bc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	069b      	lsls	r3, r3, #26
 80091c2:	d40a      	bmi.n	80091da <HAL_RTC_SetTime+0x1b6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff fe65 	bl	8008e94 <HAL_RTC_WaitForSynchro>
 80091ca:	b130      	cbz	r0, 80091da <HAL_RTC_SetTime+0x1b6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	22ff      	movs	r2, #255	; 0xff
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80091d2:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80091d4:	7737      	strb	r7, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80091d6:	7773      	strb	r3, [r6, #29]
 80091d8:	e797      	b.n	800910a <HAL_RTC_SetTime+0xe6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091da:	6833      	ldr	r3, [r6, #0]
 80091dc:	22ff      	movs	r2, #255	; 0xff
 80091de:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80091e0:	2301      	movs	r3, #1
 80091e2:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 80091e4:	2300      	movs	r3, #0
 80091e6:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 80091e8:	e790      	b.n	800910c <HAL_RTC_SetTime+0xe8>
 80091ea:	bf00      	nop
 80091ec:	08034665 	.word	0x08034665

080091f0 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 80091f0:	2a01      	cmp	r2, #1
{
 80091f2:	b570      	push	{r4, r5, r6, lr}
 80091f4:	4605      	mov	r5, r0
 80091f6:	460e      	mov	r6, r1
 80091f8:	4614      	mov	r4, r2
  assert_param(IS_RTC_FORMAT(Format));
 80091fa:	d904      	bls.n	8009206 <HAL_RTC_SetDate+0x16>
 80091fc:	f240 318e 	movw	r1, #910	; 0x38e
 8009200:	4856      	ldr	r0, [pc, #344]	; (800935c <HAL_RTC_SetDate+0x16c>)
 8009202:	f7f8 fcd2 	bl	8001baa <assert_failed>
 __HAL_LOCK(hrtc);
 8009206:	7f2b      	ldrb	r3, [r5, #28]
 8009208:	2b01      	cmp	r3, #1
 800920a:	f04f 0302 	mov.w	r3, #2
 800920e:	f000 80a2 	beq.w	8009356 <HAL_RTC_SetDate+0x166>
 8009212:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009214:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 8009216:	772a      	strb	r2, [r5, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009218:	b934      	cbnz	r4, 8009228 <HAL_RTC_SetDate+0x38>
 800921a:	7873      	ldrb	r3, [r6, #1]
 800921c:	06da      	lsls	r2, r3, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800921e:	bf42      	ittt	mi
 8009220:	f023 0310 	bicmi.w	r3, r3, #16
 8009224:	330a      	addmi	r3, #10
 8009226:	7073      	strbmi	r3, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8009228:	7833      	ldrb	r3, [r6, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	2b06      	cmp	r3, #6
 800922e:	d904      	bls.n	800923a <HAL_RTC_SetDate+0x4a>
 8009230:	f240 319a 	movw	r1, #922	; 0x39a
 8009234:	4849      	ldr	r0, [pc, #292]	; (800935c <HAL_RTC_SetDate+0x16c>)
 8009236:	f7f8 fcb8 	bl	8001baa <assert_failed>
 800923a:	78f0      	ldrb	r0, [r6, #3]
  if(Format == RTC_FORMAT_BIN)
 800923c:	2c00      	cmp	r4, #0
 800923e:	d13f      	bne.n	80092c0 <HAL_RTC_SetDate+0xd0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 8009240:	2863      	cmp	r0, #99	; 0x63
 8009242:	d904      	bls.n	800924e <HAL_RTC_SetDate+0x5e>
 8009244:	f240 319e 	movw	r1, #926	; 0x39e
 8009248:	4844      	ldr	r0, [pc, #272]	; (800935c <HAL_RTC_SetDate+0x16c>)
 800924a:	f7f8 fcae 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800924e:	7873      	ldrb	r3, [r6, #1]
 8009250:	3b01      	subs	r3, #1
 8009252:	2b0b      	cmp	r3, #11
 8009254:	d904      	bls.n	8009260 <HAL_RTC_SetDate+0x70>
 8009256:	f240 319f 	movw	r1, #927	; 0x39f
 800925a:	4840      	ldr	r0, [pc, #256]	; (800935c <HAL_RTC_SetDate+0x16c>)
 800925c:	f7f8 fca5 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8009260:	78b3      	ldrb	r3, [r6, #2]
 8009262:	3b01      	subs	r3, #1
 8009264:	2b1e      	cmp	r3, #30
 8009266:	d904      	bls.n	8009272 <HAL_RTC_SetDate+0x82>
 8009268:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 800926c:	483b      	ldr	r0, [pc, #236]	; (800935c <HAL_RTC_SetDate+0x16c>)
 800926e:	f7f8 fc9c 	bl	8001baa <assert_failed>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009272:	78f0      	ldrb	r0, [r6, #3]
 8009274:	f7ff fec2 	bl	8008ffc <RTC_ByteToBcd2>
 8009278:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800927a:	7870      	ldrb	r0, [r6, #1]
 800927c:	f7ff febe 	bl	8008ffc <RTC_ByteToBcd2>
 8009280:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009282:	78b0      	ldrb	r0, [r6, #2]
 8009284:	f7ff feba 	bl	8008ffc <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));
 8009288:	7833      	ldrb	r3, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800928a:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800928e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009292:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800929a:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
 800929e:	2253      	movs	r2, #83	; 0x53
 80092a0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80092a2:	f7ff fe0f 	bl	8008ec4 <RTC_EnterInitMode>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	4606      	mov	r6, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d034      	beq.n	8009318 <HAL_RTC_SetDate+0x128>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ae:	22ff      	movs	r2, #255	; 0xff
 80092b0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80092b2:	2304      	movs	r3, #4
 80092b4:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80092b6:	2300      	movs	r3, #0
 80092b8:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 80092ba:	2601      	movs	r6, #1
}
 80092bc:	4630      	mov	r0, r6
 80092be:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80092c0:	f7ff fea7 	bl	8009012 <RTC_Bcd2ToByte>
 80092c4:	2863      	cmp	r0, #99	; 0x63
 80092c6:	d904      	bls.n	80092d2 <HAL_RTC_SetDate+0xe2>
 80092c8:	f240 31a9 	movw	r1, #937	; 0x3a9
 80092cc:	4823      	ldr	r0, [pc, #140]	; (800935c <HAL_RTC_SetDate+0x16c>)
 80092ce:	f7f8 fc6c 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80092d2:	7870      	ldrb	r0, [r6, #1]
 80092d4:	f7ff fe9d 	bl	8009012 <RTC_Bcd2ToByte>
 80092d8:	3801      	subs	r0, #1
 80092da:	b2c0      	uxtb	r0, r0
 80092dc:	280b      	cmp	r0, #11
 80092de:	d904      	bls.n	80092ea <HAL_RTC_SetDate+0xfa>
 80092e0:	f240 31aa 	movw	r1, #938	; 0x3aa
 80092e4:	481d      	ldr	r0, [pc, #116]	; (800935c <HAL_RTC_SetDate+0x16c>)
 80092e6:	f7f8 fc60 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80092ea:	78b0      	ldrb	r0, [r6, #2]
 80092ec:	f7ff fe91 	bl	8009012 <RTC_Bcd2ToByte>
 80092f0:	3801      	subs	r0, #1
 80092f2:	b2c0      	uxtb	r0, r0
 80092f4:	281e      	cmp	r0, #30
 80092f6:	d904      	bls.n	8009302 <HAL_RTC_SetDate+0x112>
 80092f8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80092fc:	4817      	ldr	r0, [pc, #92]	; (800935c <HAL_RTC_SetDate+0x16c>)
 80092fe:	f7f8 fc54 	bl	8001baa <assert_failed>
                  (((uint32_t)sDate->Month) << 8) | \
 8009302:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009304:	78f4      	ldrb	r4, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8009306:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009308:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
                  ((uint32_t)sDate->Date) | \
 800930c:	78b4      	ldrb	r4, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800930e:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));
 8009310:	7834      	ldrb	r4, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009312:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8009316:	e7be      	b.n	8009296 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009318:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800931c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8009320:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009328:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	069b      	lsls	r3, r3, #26
 800932e:	d40a      	bmi.n	8009346 <HAL_RTC_SetDate+0x156>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff fdaf 	bl	8008e94 <HAL_RTC_WaitForSynchro>
 8009336:	b130      	cbz	r0, 8009346 <HAL_RTC_SetDate+0x156>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009338:	682b      	ldr	r3, [r5, #0]
 800933a:	22ff      	movs	r2, #255	; 0xff
 800933c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800933e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8009340:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009342:	776b      	strb	r3, [r5, #29]
 8009344:	e7b9      	b.n	80092ba <HAL_RTC_SetDate+0xca>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	22ff      	movs	r2, #255	; 0xff
 800934a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800934c:	2301      	movs	r3, #1
 800934e:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8009350:	2300      	movs	r3, #0
 8009352:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8009354:	e7b2      	b.n	80092bc <HAL_RTC_SetDate+0xcc>
 __HAL_LOCK(hrtc);
 8009356:	461e      	mov	r6, r3
 8009358:	e7b0      	b.n	80092bc <HAL_RTC_SetDate+0xcc>
 800935a:	bf00      	nop
 800935c:	08034665 	.word	0x08034665

08009360 <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_FORMAT(Format));
 8009360:	2a01      	cmp	r2, #1
{
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	4606      	mov	r6, r0
 8009368:	460c      	mov	r4, r1
 800936a:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 800936c:	d904      	bls.n	8009378 <HAL_RTC_SetAlarm+0x18>
 800936e:	f240 4134 	movw	r1, #1076	; 0x434
 8009372:	48ac      	ldr	r0, [pc, #688]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009374:	f7f8 fc19 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8009378:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800937a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937e:	d007      	beq.n	8009390 <HAL_RTC_SetAlarm+0x30>
 8009380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009384:	d004      	beq.n	8009390 <HAL_RTC_SetAlarm+0x30>
 8009386:	f240 4135 	movw	r1, #1077	; 0x435
 800938a:	48a6      	ldr	r0, [pc, #664]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 800938c:	f7f8 fc0d 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8009390:	69a3      	ldr	r3, [r4, #24]
 8009392:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 8009396:	d004      	beq.n	80093a2 <HAL_RTC_SetAlarm+0x42>
 8009398:	f240 4136 	movw	r1, #1078	; 0x436
 800939c:	48a1      	ldr	r0, [pc, #644]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 800939e:	f7f8 fc04 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80093a2:	6a23      	ldr	r3, [r4, #32]
 80093a4:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 80093a8:	d004      	beq.n	80093b4 <HAL_RTC_SetAlarm+0x54>
 80093aa:	f240 4137 	movw	r1, #1079	; 0x437
 80093ae:	489d      	ldr	r0, [pc, #628]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 80093b0:	f7f8 fbfb 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093ba:	d304      	bcc.n	80093c6 <HAL_RTC_SetAlarm+0x66>
 80093bc:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80093c0:	4898      	ldr	r0, [pc, #608]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 80093c2:	f7f8 fbf2 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80093c6:	69e3      	ldr	r3, [r4, #28]
 80093c8:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80093cc:	d00d      	beq.n	80093ea <HAL_RTC_SetAlarm+0x8a>
 80093ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093d2:	d00a      	beq.n	80093ea <HAL_RTC_SetAlarm+0x8a>
 80093d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093d8:	d007      	beq.n	80093ea <HAL_RTC_SetAlarm+0x8a>
 80093da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80093de:	d004      	beq.n	80093ea <HAL_RTC_SetAlarm+0x8a>
 80093e0:	f240 4139 	movw	r1, #1081	; 0x439
 80093e4:	488f      	ldr	r0, [pc, #572]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 80093e6:	f7f8 fbe0 	bl	8001baa <assert_failed>
  __HAL_LOCK(hrtc);
 80093ea:	7f33      	ldrb	r3, [r6, #28]
 80093ec:	2002      	movs	r0, #2
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d07f      	beq.n	80094f2 <HAL_RTC_SetAlarm+0x192>
 80093f2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f4:	7770      	strb	r0, [r6, #29]
  __HAL_LOCK(hrtc);
 80093f6:	7733      	strb	r3, [r6, #28]
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80093fc:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 80093fe:	2d00      	cmp	r5, #0
 8009400:	f040 8084 	bne.w	800950c <HAL_RTC_SetAlarm+0x1ac>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009404:	065b      	lsls	r3, r3, #25
 8009406:	d576      	bpl.n	80094f6 <HAL_RTC_SetAlarm+0x196>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8009408:	3801      	subs	r0, #1
 800940a:	280b      	cmp	r0, #11
 800940c:	d904      	bls.n	8009418 <HAL_RTC_SetAlarm+0xb8>
 800940e:	f240 4144 	movw	r1, #1092	; 0x444
 8009412:	4884      	ldr	r0, [pc, #528]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009414:	f7f8 fbc9 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8009418:	7b23      	ldrb	r3, [r4, #12]
 800941a:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800941e:	d004      	beq.n	800942a <HAL_RTC_SetAlarm+0xca>
 8009420:	f240 4145 	movw	r1, #1093	; 0x445
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8009424:	487f      	ldr	r0, [pc, #508]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009426:	f7f8 fbc0 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800942a:	7863      	ldrb	r3, [r4, #1]
 800942c:	2b3b      	cmp	r3, #59	; 0x3b
 800942e:	d904      	bls.n	800943a <HAL_RTC_SetAlarm+0xda>
 8009430:	f240 414c 	movw	r1, #1100	; 0x44c
 8009434:	487b      	ldr	r0, [pc, #492]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009436:	f7f8 fbb8 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800943a:	78a3      	ldrb	r3, [r4, #2]
 800943c:	2b3b      	cmp	r3, #59	; 0x3b
 800943e:	d904      	bls.n	800944a <HAL_RTC_SetAlarm+0xea>
 8009440:	f240 414d 	movw	r1, #1101	; 0x44d
 8009444:	4877      	ldr	r0, [pc, #476]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009446:	f7f8 fbb0 	bl	8001baa <assert_failed>
 800944a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800944e:	6a22      	ldr	r2, [r4, #32]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8009450:	3b01      	subs	r3, #1
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009452:	2a00      	cmp	r2, #0
 8009454:	d155      	bne.n	8009502 <HAL_RTC_SetAlarm+0x1a2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8009456:	2b1e      	cmp	r3, #30
 8009458:	d904      	bls.n	8009464 <HAL_RTC_SetAlarm+0x104>
 800945a:	f240 4151 	movw	r1, #1105	; 0x451
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 800945e:	4871      	ldr	r0, [pc, #452]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009460:	f7f8 fba3 	bl	8001baa <assert_failed>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009464:	7820      	ldrb	r0, [r4, #0]
 8009466:	f7ff fdc9 	bl	8008ffc <RTC_ByteToBcd2>
 800946a:	4601      	mov	r1, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800946c:	7860      	ldrb	r0, [r4, #1]
 800946e:	f7ff fdc5 	bl	8008ffc <RTC_ByteToBcd2>
 8009472:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009474:	78a0      	ldrb	r0, [r4, #2]
 8009476:	f7ff fdc1 	bl	8008ffc <RTC_ByteToBcd2>
 800947a:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800947c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009480:	f7ff fdbc 	bl	8008ffc <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009484:	69a5      	ldr	r5, [r4, #24]
 8009486:	6a23      	ldr	r3, [r4, #32]
 8009488:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800948a:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800948c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8009490:	433d      	orrs	r5, r7
 8009492:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8009496:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800949a:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800949e:	69e3      	ldr	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094a0:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80094a2:	6867      	ldr	r7, [r4, #4]
 80094a4:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094a6:	6833      	ldr	r3, [r6, #0]
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
 80094aa:	2253      	movs	r2, #83	; 0x53
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80094ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80094b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80094b4:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80094b6:	f040 8097 	bne.w	80095e8 <HAL_RTC_SetAlarm+0x288>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80094ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094be:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094c6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80094c8:	f7fb ff36 	bl	8005338 <HAL_GetTick>
 80094cc:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80094ce:	6833      	ldr	r3, [r6, #0]
 80094d0:	68dc      	ldr	r4, [r3, #12]
 80094d2:	f014 0401 	ands.w	r4, r4, #1
 80094d6:	d077      	beq.n	80095c8 <HAL_RTC_SetAlarm+0x268>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80094d8:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80094da:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80094e2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094e4:	22ff      	movs	r2, #255	; 0xff
 80094e6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hrtc);
 80094e8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ea:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80094ec:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80094ee:	7730      	strb	r0, [r6, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 80094f0:	7773      	strb	r3, [r6, #29]
}
 80094f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80094f6:	2817      	cmp	r0, #23
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80094f8:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80094fa:	d996      	bls.n	800942a <HAL_RTC_SetAlarm+0xca>
 80094fc:	f240 414a 	movw	r1, #1098	; 0x44a
 8009500:	e790      	b.n	8009424 <HAL_RTC_SetAlarm+0xc4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8009502:	2b06      	cmp	r3, #6
 8009504:	d9ae      	bls.n	8009464 <HAL_RTC_SetAlarm+0x104>
 8009506:	f240 4155 	movw	r1, #1109	; 0x455
 800950a:	e7a8      	b.n	800945e <HAL_RTC_SetAlarm+0xfe>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800950c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8009510:	d049      	beq.n	80095a6 <HAL_RTC_SetAlarm+0x246>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8009512:	f7ff fd7e 	bl	8009012 <RTC_Bcd2ToByte>
 8009516:	3801      	subs	r0, #1
 8009518:	b2c0      	uxtb	r0, r0
 800951a:	280b      	cmp	r0, #11
 800951c:	d904      	bls.n	8009528 <HAL_RTC_SetAlarm+0x1c8>
 800951e:	f240 4164 	movw	r1, #1124	; 0x464
 8009522:	4840      	ldr	r0, [pc, #256]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009524:	f7f8 fb41 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8009528:	7b23      	ldrb	r3, [r4, #12]
 800952a:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800952e:	d004      	beq.n	800953a <HAL_RTC_SetAlarm+0x1da>
 8009530:	f240 4165 	movw	r1, #1125	; 0x465
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8009534:	483b      	ldr	r0, [pc, #236]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 8009536:	f7f8 fb38 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 800953a:	7860      	ldrb	r0, [r4, #1]
 800953c:	f7ff fd69 	bl	8009012 <RTC_Bcd2ToByte>
 8009540:	283b      	cmp	r0, #59	; 0x3b
 8009542:	d904      	bls.n	800954e <HAL_RTC_SetAlarm+0x1ee>
 8009544:	f240 416d 	movw	r1, #1133	; 0x46d
 8009548:	4836      	ldr	r0, [pc, #216]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 800954a:	f7f8 fb2e 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800954e:	78a0      	ldrb	r0, [r4, #2]
 8009550:	f7ff fd5f 	bl	8009012 <RTC_Bcd2ToByte>
 8009554:	283b      	cmp	r0, #59	; 0x3b
 8009556:	d904      	bls.n	8009562 <HAL_RTC_SetAlarm+0x202>
 8009558:	f240 416e 	movw	r1, #1134	; 0x46e
 800955c:	4831      	ldr	r0, [pc, #196]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 800955e:	f7f8 fb24 	bl	8001baa <assert_failed>
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009562:	6a23      	ldr	r3, [r4, #32]
 8009564:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009568:	bb2b      	cbnz	r3, 80095b6 <HAL_RTC_SetAlarm+0x256>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800956a:	f7ff fd52 	bl	8009012 <RTC_Bcd2ToByte>
 800956e:	3801      	subs	r0, #1
 8009570:	b2c0      	uxtb	r0, r0
 8009572:	281e      	cmp	r0, #30
 8009574:	d904      	bls.n	8009580 <HAL_RTC_SetAlarm+0x220>
 8009576:	f240 4172 	movw	r1, #1138	; 0x472
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800957a:	482a      	ldr	r0, [pc, #168]	; (8009624 <HAL_RTC_SetAlarm+0x2c4>)
 800957c:	f7f8 fb15 	bl	8001baa <assert_failed>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009580:	6a23      	ldr	r3, [r4, #32]
 8009582:	69a5      	ldr	r5, [r4, #24]
 8009584:	431d      	orrs	r5, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009586:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009588:	431d      	orrs	r5, r3
 800958a:	7823      	ldrb	r3, [r4, #0]
 800958c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009590:	7863      	ldrb	r3, [r4, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009592:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009596:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009598:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800959c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80095a0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80095a4:	e77b      	b.n	800949e <HAL_RTC_SetAlarm+0x13e>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80095a6:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80095a8:	f7ff fd33 	bl	8009012 <RTC_Bcd2ToByte>
 80095ac:	2817      	cmp	r0, #23
 80095ae:	d9c4      	bls.n	800953a <HAL_RTC_SetAlarm+0x1da>
 80095b0:	f240 416a 	movw	r1, #1130	; 0x46a
 80095b4:	e7be      	b.n	8009534 <HAL_RTC_SetAlarm+0x1d4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80095b6:	f7ff fd2c 	bl	8009012 <RTC_Bcd2ToByte>
 80095ba:	3801      	subs	r0, #1
 80095bc:	b2c0      	uxtb	r0, r0
 80095be:	2806      	cmp	r0, #6
 80095c0:	d9de      	bls.n	8009580 <HAL_RTC_SetAlarm+0x220>
 80095c2:	f240 4176 	movw	r1, #1142	; 0x476
 80095c6:	e7d8      	b.n	800957a <HAL_RTC_SetAlarm+0x21a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80095c8:	f7fb feb6 	bl	8005338 <HAL_GetTick>
 80095cc:	eba0 0008 	sub.w	r0, r0, r8
 80095d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80095d4:	f67f af7b 	bls.w	80094ce <HAL_RTC_SetAlarm+0x16e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095d8:	6833      	ldr	r3, [r6, #0]
 80095da:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095dc:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095de:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095e0:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 80095e2:	7734      	strb	r4, [r6, #28]
        return HAL_TIMEOUT;
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80095e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80095ec:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095f4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80095f6:	f7fb fe9f 	bl	8005338 <HAL_GetTick>
 80095fa:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	68dc      	ldr	r4, [r3, #12]
 8009600:	f014 0402 	ands.w	r4, r4, #2
 8009604:	d005      	beq.n	8009612 <HAL_RTC_SetAlarm+0x2b2>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009606:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009608:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009610:	e767      	b.n	80094e2 <HAL_RTC_SetAlarm+0x182>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009612:	f7fb fe91 	bl	8005338 <HAL_GetTick>
 8009616:	eba0 0008 	sub.w	r0, r0, r8
 800961a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800961e:	d9ed      	bls.n	80095fc <HAL_RTC_SetAlarm+0x29c>
 8009620:	e7da      	b.n	80095d8 <HAL_RTC_SetAlarm+0x278>
 8009622:	bf00      	nop
 8009624:	08034665 	.word	0x08034665

08009628 <HAL_RTCEx_SetTimeStamp>:
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 8009628:	f031 0308 	bics.w	r3, r1, #8
{
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	460e      	mov	r6, r1
 8009632:	4615      	mov	r5, r2
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 8009634:	d003      	beq.n	800963e <HAL_RTCEx_SetTimeStamp+0x16>
 8009636:	2192      	movs	r1, #146	; 0x92
 8009638:	4817      	ldr	r0, [pc, #92]	; (8009698 <HAL_RTCEx_SetTimeStamp+0x70>)
 800963a:	f7f8 fab6 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 800963e:	f035 0302 	bics.w	r3, r5, #2
 8009642:	d005      	beq.n	8009650 <HAL_RTCEx_SetTimeStamp+0x28>
 8009644:	2d04      	cmp	r5, #4
 8009646:	d003      	beq.n	8009650 <HAL_RTCEx_SetTimeStamp+0x28>
 8009648:	2193      	movs	r1, #147	; 0x93
 800964a:	4813      	ldr	r0, [pc, #76]	; (8009698 <HAL_RTCEx_SetTimeStamp+0x70>)
 800964c:	f7f8 faad 	bl	8001baa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009650:	7f23      	ldrb	r3, [r4, #28]
 8009652:	2002      	movs	r0, #2
 8009654:	2b01      	cmp	r3, #1
 8009656:	d01d      	beq.n	8009694 <HAL_RTCEx_SetTimeStamp+0x6c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009658:	6823      	ldr	r3, [r4, #0]

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800965a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800965c:	7760      	strb	r0, [r4, #29]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800965e:	2000      	movs	r0, #0
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009660:	6899      	ldr	r1, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009662:	625a      	str	r2, [r3, #36]	; 0x24
 8009664:	2253      	movs	r2, #83	; 0x53
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009666:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800966a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800966c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800966e:	f021 0108 	bic.w	r1, r1, #8
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009672:	f022 0206 	bic.w	r2, r2, #6
  tmpreg|= TimeStampEdge;
 8009676:	4331      	orrs	r1, r6
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009678:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800967a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800967c:	4315      	orrs	r5, r2
 800967e:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009680:	6099      	str	r1, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009688:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800968a:	22ff      	movs	r2, #255	; 0xff
 800968c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800968e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8009690:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8009692:	7763      	strb	r3, [r4, #29]

  return HAL_OK;
}
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	bf00      	nop
 8009698:	080346a3 	.word	0x080346a3

0800969c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800969c:	4b0e      	ldr	r3, [pc, #56]	; (80096d8 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800969e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	f641 3358 	movw	r3, #7000	; 0x1b58
 80096a6:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 80096aa:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80096ac:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 80096ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096b2:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80096b4:	f112 32ff 	adds.w	r2, r2, #4294967295
 80096b8:	d207      	bcs.n	80096ca <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096ba:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80096be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 80096c6:	2003      	movs	r0, #3
      break;
 80096c8:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80096ca:	680b      	ldr	r3, [r1, #0]
 80096cc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80096d0:	d1f0      	bne.n	80096b4 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80096d2:	4618      	mov	r0, r3

  return status;
}
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	200000cc 	.word	0x200000cc

080096dc <HAL_SAI_Init>:
{
 80096dc:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 80096de:	4604      	mov	r4, r0
 80096e0:	2800      	cmp	r0, #0
 80096e2:	f000 81e0 	beq.w	8009aa6 <HAL_SAI_Init+0x3ca>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 80096e6:	6803      	ldr	r3, [r0, #0]
 80096e8:	4eba      	ldr	r6, [pc, #744]	; (80099d4 <HAL_SAI_Init+0x2f8>)
 80096ea:	42b3      	cmp	r3, r6
 80096ec:	d00e      	beq.n	800970c <HAL_SAI_Init+0x30>
 80096ee:	4aba      	ldr	r2, [pc, #744]	; (80099d8 <HAL_SAI_Init+0x2fc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00b      	beq.n	800970c <HAL_SAI_Init+0x30>
 80096f4:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d007      	beq.n	800970c <HAL_SAI_Init+0x30>
 80096fc:	3220      	adds	r2, #32
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_SAI_Init+0x30>
 8009702:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8009706:	48b5      	ldr	r0, [pc, #724]	; (80099dc <HAL_SAI_Init+0x300>)
 8009708:	f7f8 fa4f 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 800970c:	69e3      	ldr	r3, [r4, #28]
 800970e:	4ab4      	ldr	r2, [pc, #720]	; (80099e0 <HAL_SAI_Init+0x304>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d021      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 8009714:	4ab3      	ldr	r2, [pc, #716]	; (80099e4 <HAL_SAI_Init+0x308>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d01e      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 800971a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800971e:	4293      	cmp	r3, r2
 8009720:	d01a      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 8009722:	f64a 4244 	movw	r2, #44100	; 0xac44
 8009726:	4293      	cmp	r3, r2
 8009728:	d016      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 800972a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800972e:	d013      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 8009730:	f245 6222 	movw	r2, #22050	; 0x5622
 8009734:	4293      	cmp	r3, r2
 8009736:	d00f      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 8009738:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800973c:	d00c      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 800973e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8009742:	4293      	cmp	r3, r2
 8009744:	d008      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 8009746:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800974a:	d005      	beq.n	8009758 <HAL_SAI_Init+0x7c>
 800974c:	b123      	cbz	r3, 8009758 <HAL_SAI_Init+0x7c>
 800974e:	f240 1173 	movw	r1, #371	; 0x173
 8009752:	48a2      	ldr	r0, [pc, #648]	; (80099dc <HAL_SAI_Init+0x300>)
 8009754:	f7f8 fa29 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 8009758:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800975a:	f033 0204 	bics.w	r2, r3, #4
 800975e:	d006      	beq.n	800976e <HAL_SAI_Init+0x92>
 8009760:	2b08      	cmp	r3, #8
 8009762:	d004      	beq.n	800976e <HAL_SAI_Init+0x92>
 8009764:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009768:	489c      	ldr	r0, [pc, #624]	; (80099dc <HAL_SAI_Init+0x300>)
 800976a:	f7f8 fa1e 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 800976e:	6863      	ldr	r3, [r4, #4]
 8009770:	2b03      	cmp	r3, #3
 8009772:	d904      	bls.n	800977e <HAL_SAI_Init+0xa2>
 8009774:	f240 1175 	movw	r1, #373	; 0x175
 8009778:	4898      	ldr	r0, [pc, #608]	; (80099dc <HAL_SAI_Init+0x300>)
 800977a:	f7f8 fa16 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 800977e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009780:	f023 0220 	bic.w	r2, r3, #32
 8009784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009788:	2b40      	cmp	r3, #64	; 0x40
 800978a:	d006      	beq.n	800979a <HAL_SAI_Init+0xbe>
 800978c:	2a80      	cmp	r2, #128	; 0x80
 800978e:	d004      	beq.n	800979a <HAL_SAI_Init+0xbe>
 8009790:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8009794:	4891      	ldr	r0, [pc, #580]	; (80099dc <HAL_SAI_Init+0x300>)
 8009796:	f7f8 fa08 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800979a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800979c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 80097a0:	d004      	beq.n	80097ac <HAL_SAI_Init+0xd0>
 80097a2:	f240 1177 	movw	r1, #375	; 0x177
 80097a6:	488d      	ldr	r0, [pc, #564]	; (80099dc <HAL_SAI_Init+0x300>)
 80097a8:	f7f8 f9ff 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 80097ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d904      	bls.n	80097bc <HAL_SAI_Init+0xe0>
 80097b2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80097b6:	4889      	ldr	r0, [pc, #548]	; (80099dc <HAL_SAI_Init+0x300>)
 80097b8:	f7f8 f9f7 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d904      	bls.n	80097cc <HAL_SAI_Init+0xf0>
 80097c2:	f240 1179 	movw	r1, #377	; 0x179
 80097c6:	4885      	ldr	r0, [pc, #532]	; (80099dc <HAL_SAI_Init+0x300>)
 80097c8:	f7f8 f9ef 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80097d2:	d004      	beq.n	80097de <HAL_SAI_Init+0x102>
 80097d4:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80097d8:	4880      	ldr	r0, [pc, #512]	; (80099dc <HAL_SAI_Init+0x300>)
 80097da:	f7f8 f9e6 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 80097de:	6963      	ldr	r3, [r4, #20]
 80097e0:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80097e4:	d004      	beq.n	80097f0 <HAL_SAI_Init+0x114>
 80097e6:	f240 117b 	movw	r1, #379	; 0x17b
 80097ea:	487c      	ldr	r0, [pc, #496]	; (80099dc <HAL_SAI_Init+0x300>)
 80097ec:	f7f8 f9dd 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 80097f0:	69a3      	ldr	r3, [r4, #24]
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d904      	bls.n	8009800 <HAL_SAI_Init+0x124>
 80097f6:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80097fa:	4878      	ldr	r0, [pc, #480]	; (80099dc <HAL_SAI_Init+0x300>)
 80097fc:	f7f8 f9d5 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 8009800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009802:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009806:	d004      	beq.n	8009812 <HAL_SAI_Init+0x136>
 8009808:	f240 117d 	movw	r1, #381	; 0x17d
 800980c:	4873      	ldr	r0, [pc, #460]	; (80099dc <HAL_SAI_Init+0x300>)
 800980e:	f7f8 f9cc 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 8009812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009814:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 8009818:	d00c      	beq.n	8009834 <HAL_SAI_Init+0x158>
 800981a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800981e:	d009      	beq.n	8009834 <HAL_SAI_Init+0x158>
 8009820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009824:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009828:	d004      	beq.n	8009834 <HAL_SAI_Init+0x158>
 800982a:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800982e:	486b      	ldr	r0, [pc, #428]	; (80099dc <HAL_SAI_Init+0x300>)
 8009830:	f7f8 f9bb 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 8009834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009836:	f033 0310 	bics.w	r3, r3, #16
 800983a:	d004      	beq.n	8009846 <HAL_SAI_Init+0x16a>
 800983c:	f240 117f 	movw	r1, #383	; 0x17f
 8009840:	4866      	ldr	r0, [pc, #408]	; (80099dc <HAL_SAI_Init+0x300>)
 8009842:	f7f8 f9b2 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 8009846:	68e3      	ldr	r3, [r4, #12]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d904      	bls.n	8009856 <HAL_SAI_Init+0x17a>
 800984c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009850:	4862      	ldr	r0, [pc, #392]	; (80099dc <HAL_SAI_Init+0x300>)
 8009852:	f7f8 f9aa 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 8009856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009858:	3b08      	subs	r3, #8
 800985a:	2bf8      	cmp	r3, #248	; 0xf8
 800985c:	d904      	bls.n	8009868 <HAL_SAI_Init+0x18c>
 800985e:	f240 1183 	movw	r1, #387	; 0x183
 8009862:	485e      	ldr	r0, [pc, #376]	; (80099dc <HAL_SAI_Init+0x300>)
 8009864:	f7f8 f9a1 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 8009868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800986a:	3b01      	subs	r3, #1
 800986c:	2b7f      	cmp	r3, #127	; 0x7f
 800986e:	d904      	bls.n	800987a <HAL_SAI_Init+0x19e>
 8009870:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8009874:	4859      	ldr	r0, [pc, #356]	; (80099dc <HAL_SAI_Init+0x300>)
 8009876:	f7f8 f998 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800987a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800987c:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009880:	d004      	beq.n	800988c <HAL_SAI_Init+0x1b0>
 8009882:	f240 1185 	movw	r1, #389	; 0x185
 8009886:	4855      	ldr	r0, [pc, #340]	; (80099dc <HAL_SAI_Init+0x300>)
 8009888:	f7f8 f98f 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 800988c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800988e:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009892:	d004      	beq.n	800989e <HAL_SAI_Init+0x1c2>
 8009894:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8009898:	4850      	ldr	r0, [pc, #320]	; (80099dc <HAL_SAI_Init+0x300>)
 800989a:	f7f8 f986 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 800989e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80098a0:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 80098a4:	d004      	beq.n	80098b0 <HAL_SAI_Init+0x1d4>
 80098a6:	f240 1187 	movw	r1, #391	; 0x187
 80098aa:	484c      	ldr	r0, [pc, #304]	; (80099dc <HAL_SAI_Init+0x300>)
 80098ac:	f7f8 f97d 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 80098b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80098b2:	2b18      	cmp	r3, #24
 80098b4:	d904      	bls.n	80098c0 <HAL_SAI_Init+0x1e4>
 80098b6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80098ba:	4848      	ldr	r0, [pc, #288]	; (80099dc <HAL_SAI_Init+0x300>)
 80098bc:	f7f8 f975 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 80098c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098c2:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80098c6:	d006      	beq.n	80098d6 <HAL_SAI_Init+0x1fa>
 80098c8:	2b80      	cmp	r3, #128	; 0x80
 80098ca:	d004      	beq.n	80098d6 <HAL_SAI_Init+0x1fa>
 80098cc:	f240 118b 	movw	r1, #395	; 0x18b
 80098d0:	4842      	ldr	r0, [pc, #264]	; (80099dc <HAL_SAI_Init+0x300>)
 80098d2:	f7f8 f96a 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 80098d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80098d8:	3b01      	subs	r3, #1
 80098da:	2b0f      	cmp	r3, #15
 80098dc:	d904      	bls.n	80098e8 <HAL_SAI_Init+0x20c>
 80098de:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80098e2:	483e      	ldr	r0, [pc, #248]	; (80099dc <HAL_SAI_Init+0x300>)
 80098e4:	f7f8 f961 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 80098e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80098ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ee:	d304      	bcc.n	80098fa <HAL_SAI_Init+0x21e>
 80098f0:	f240 118d 	movw	r1, #397	; 0x18d
 80098f4:	4839      	ldr	r0, [pc, #228]	; (80099dc <HAL_SAI_Init+0x300>)
 80098f6:	f7f8 f958 	bl	8001baa <assert_failed>
  if(hsai->State == HAL_SAI_STATE_RESET)
 80098fa:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80098fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009902:	b923      	cbnz	r3, 800990e <HAL_SAI_Init+0x232>
    hsai->Lock = HAL_UNLOCKED;
 8009904:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8009908:	4620      	mov	r0, r4
 800990a:	f7f8 faa5 	bl	8001e58 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 800990e:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8009910:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8009912:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8009916:	f7ff fec1 	bl	800969c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	2b01      	cmp	r3, #1
 800991e:	f000 80b1 	beq.w	8009a84 <HAL_SAI_Init+0x3a8>
  uint32_t tmpregisterGCR = 0;
 8009922:	2b02      	cmp	r3, #2
 8009924:	bf0c      	ite	eq
 8009926:	2320      	moveq	r3, #32
 8009928:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 800992a:	68a2      	ldr	r2, [r4, #8]
 800992c:	2a02      	cmp	r2, #2
 800992e:	f000 80ad 	beq.w	8009a8c <HAL_SAI_Init+0x3b0>
 8009932:	2a03      	cmp	r2, #3
 8009934:	f000 80a8 	beq.w	8009a88 <HAL_SAI_Init+0x3ac>
  uint32_t syncen_bits = 0;
 8009938:	2a01      	cmp	r2, #1
 800993a:	bf0c      	ite	eq
 800993c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8009940:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	42b2      	cmp	r2, r6
 8009946:	d003      	beq.n	8009950 <HAL_SAI_Init+0x274>
 8009948:	4923      	ldr	r1, [pc, #140]	; (80099d8 <HAL_SAI_Init+0x2fc>)
 800994a:	428a      	cmp	r2, r1
 800994c:	f040 80a1 	bne.w	8009a92 <HAL_SAI_Init+0x3b6>
    SAI1->GCR = tmpregisterGCR;
 8009950:	4925      	ldr	r1, [pc, #148]	; (80099e8 <HAL_SAI_Init+0x30c>)
    SAI2->GCR = tmpregisterGCR;
 8009952:	600b      	str	r3, [r1, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009954:	69e3      	ldr	r3, [r4, #28]
 8009956:	b313      	cbz	r3, 800999e <HAL_SAI_Init+0x2c2>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009958:	42b2      	cmp	r2, r6
 800995a:	d003      	beq.n	8009964 <HAL_SAI_Init+0x288>
 800995c:	4b1e      	ldr	r3, [pc, #120]	; (80099d8 <HAL_SAI_Init+0x2fc>)
 800995e:	429a      	cmp	r2, r3
 8009960:	f040 8099 	bne.w	8009a96 <HAL_SAI_Init+0x3ba>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009964:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009968:	f7ff fa30 	bl	8008dcc <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <HAL_SAI_Init+0x310>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d002      	beq.n	800997a <HAL_SAI_Init+0x29e>
 8009974:	3220      	adds	r2, #32
 8009976:	4293      	cmp	r3, r2
 8009978:	d103      	bne.n	8009982 <HAL_SAI_Init+0x2a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800997a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800997e:	f7ff fa25 	bl	8008dcc <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009982:	220a      	movs	r2, #10
 8009984:	69e3      	ldr	r3, [r4, #28]
 8009986:	4350      	muls	r0, r2
 8009988:	025b      	lsls	r3, r3, #9
 800998a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800998e:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8009992:	fb02 0013 	mls	r0, r2, r3, r0
 8009996:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8009998:	bf08      	it	eq
 800999a:	3301      	addeq	r3, #1
 800999c:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80099a2:	f033 0102 	bics.w	r1, r3, #2
 80099a6:	d178      	bne.n	8009a9a <HAL_SAI_Init+0x3be>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80099a8:	2a01      	cmp	r2, #1
 80099aa:	bf18      	it	ne
 80099ac:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	480f      	ldr	r0, [pc, #60]	; (80099f0 <HAL_SAI_Init+0x314>)
 80099b4:	6816      	ldr	r6, [r2, #0]
 80099b6:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099b8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80099ba:	4333      	orrs	r3, r6
 80099bc:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80099be:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099c0:	4333      	orrs	r3, r6
 80099c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80099c4:	6810      	ldr	r0, [r2, #0]
 80099c6:	4333      	orrs	r3, r6
 80099c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099ca:	4333      	orrs	r3, r6
 80099cc:	6926      	ldr	r6, [r4, #16]
 80099ce:	4333      	orrs	r3, r6
 80099d0:	e010      	b.n	80099f4 <HAL_SAI_Init+0x318>
 80099d2:	bf00      	nop
 80099d4:	40015804 	.word	0x40015804
 80099d8:	40015824 	.word	0x40015824
 80099dc:	080346e4 	.word	0x080346e4
 80099e0:	0002ee00 	.word	0x0002ee00
 80099e4:	00017700 	.word	0x00017700
 80099e8:	40015800 	.word	0x40015800
 80099ec:	40015c04 	.word	0x40015c04
 80099f0:	ff05c010 	.word	0xff05c010
 80099f4:	6966      	ldr	r6, [r4, #20]
 80099f6:	4333      	orrs	r3, r6
 80099f8:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80099fa:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099fc:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a02:	432b      	orrs	r3, r5
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009a08:	6853      	ldr	r3, [r2, #4]
 8009a0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009a0e:	f023 030f 	bic.w	r3, r3, #15
 8009a12:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a14:	69a3      	ldr	r3, [r4, #24]
 8009a16:	6851      	ldr	r1, [r2, #4]
 8009a18:	4303      	orrs	r3, r0
 8009a1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009a1c:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009a1e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009a24:	4b21      	ldr	r3, [pc, #132]	; (8009aac <HAL_SAI_Init+0x3d0>)
 8009a26:	6891      	ldr	r1, [r2, #8]
 8009a28:	400b      	ands	r3, r1
 8009a2a:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009a2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a2e:	6891      	ldr	r1, [r2, #8]
 8009a30:	4303      	orrs	r3, r0
 8009a32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009a34:	4303      	orrs	r3, r0
 8009a36:	430b      	orrs	r3, r1
 8009a38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a3a:	3901      	subs	r1, #1
 8009a3c:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009a3e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a40:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009a42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a46:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009a48:	68d3      	ldr	r3, [r2, #12]
 8009a4a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8009a4e:	f023 030f 	bic.w	r3, r3, #15
 8009a52:	041b      	lsls	r3, r3, #16
 8009a54:	0c1b      	lsrs	r3, r3, #16
 8009a56:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009a5a:	68d1      	ldr	r1, [r2, #12]
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a60:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a62:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009a64:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009a6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a6c:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a72:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8009a74:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a76:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8009a7a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8009a7e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009a84:	2310      	movs	r3, #16
 8009a86:	e750      	b.n	800992a <HAL_SAI_Init+0x24e>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009a88:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009a8c:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8009a90:	e757      	b.n	8009942 <HAL_SAI_Init+0x266>
    SAI2->GCR = tmpregisterGCR;
 8009a92:	4907      	ldr	r1, [pc, #28]	; (8009ab0 <HAL_SAI_Init+0x3d4>)
 8009a94:	e75d      	b.n	8009952 <HAL_SAI_Init+0x276>
    uint32_t freq = 0;
 8009a96:	2000      	movs	r0, #0
 8009a98:	e768      	b.n	800996c <HAL_SAI_Init+0x290>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009a9a:	2a01      	cmp	r2, #1
 8009a9c:	bf14      	ite	ne
 8009a9e:	2100      	movne	r1, #0
 8009aa0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8009aa4:	e784      	b.n	80099b0 <HAL_SAI_Init+0x2d4>
    return HAL_ERROR;
 8009aa6:	2001      	movs	r0, #1
}
 8009aa8:	bd70      	pop	{r4, r5, r6, pc}
 8009aaa:	bf00      	nop
 8009aac:	fff88000 	.word	0xfff88000
 8009ab0:	40015c00 	.word	0x40015c00

08009ab4 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009ab4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009abe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009ac0:	4770      	bx	lr

08009ac2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b089      	sub	sp, #36	; 0x24
 8009aca:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8009acc:	f7fb fc34 	bl	8005338 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8009ad0:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8009ad2:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009ad4:	2108      	movs	r1, #8
 8009ad6:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009adc:	f003 f8d2 	bl	800cc84 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	bb40      	cbnz	r0, 8009b36 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8009ae4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009ae6:	6828      	ldr	r0, [r5, #0]
 8009ae8:	0409      	lsls	r1, r1, #16
 8009aea:	f003 f9d5 	bl	800ce98 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8009aee:	4604      	mov	r4, r0
 8009af0:	bb08      	cbnz	r0, 8009b36 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009af6:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8009af8:	a902      	add	r1, sp, #8
 8009afa:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009afc:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8009afe:	2308      	movs	r3, #8
 8009b00:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009b02:	2330      	movs	r3, #48	; 0x30
 8009b04:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b06:	2302      	movs	r3, #2
 8009b08:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8009b0e:	f003 f86b 	bl	800cbe8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009b12:	6828      	ldr	r0, [r5, #0]
 8009b14:	f003 f9f1 	bl	800cefa <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8009b18:	4604      	mov	r4, r0
 8009b1a:	b960      	cbnz	r0, 8009b36 <SD_FindSCR+0x74>
 8009b1c:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009b1e:	f240 482a 	movw	r8, #1066	; 0x42a
 8009b22:	6828      	ldr	r0, [r5, #0]
 8009b24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b26:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009b2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009b2c:	d007      	beq.n	8009b3e <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b2e:	0719      	lsls	r1, r3, #28
 8009b30:	d518      	bpl.n	8009b64 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009b32:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b34:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8009b36:	4620      	mov	r0, r4
 8009b38:	b009      	add	sp, #36	; 0x24
 8009b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009b3e:	029b      	lsls	r3, r3, #10
 8009b40:	d507      	bpl.n	8009b52 <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009b42:	f002 ff61 	bl	800ca08 <SDMMC_ReadFIFO>
 8009b46:	ab08      	add	r3, sp, #32
 8009b48:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8009b4c:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009b4e:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b52:	f7fb fbf1 	bl	8005338 <HAL_GetTick>
 8009b56:	eba0 0009 	sub.w	r0, r0, r9
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d1e1      	bne.n	8009b22 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8009b5e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009b62:	e7e8      	b.n	8009b36 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b66:	079a      	lsls	r2, r3, #30
 8009b68:	d501      	bpl.n	8009b6e <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b6a:	2402      	movs	r4, #2
 8009b6c:	e7e2      	b.n	8009b34 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b70:	069b      	lsls	r3, r3, #26
 8009b72:	d501      	bpl.n	8009b78 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b74:	2420      	movs	r4, #32
 8009b76:	e7dd      	b.n	8009b34 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b78:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8009b7c:	6383      	str	r3, [r0, #56]	; 0x38
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b82:	6073      	str	r3, [r6, #4]
 8009b84:	9b01      	ldr	r3, [sp, #4]
 8009b86:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b88:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8009b8a:	e7d4      	b.n	8009b36 <SD_FindSCR+0x74>

08009b8c <HAL_SD_ReadBlocks_DMA>:
{
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	4616      	mov	r6, r2
 8009b92:	b086      	sub	sp, #24
 8009b94:	4605      	mov	r5, r0
 8009b96:	461f      	mov	r7, r3
  if(NULL == pData)
 8009b98:	460a      	mov	r2, r1
 8009b9a:	b939      	cbnz	r1, 8009bac <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ba2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009ba4:	2001      	movs	r0, #1
}
 8009ba6:	b006      	add	sp, #24
 8009ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009bac:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009bb0:	b2c0      	uxtb	r0, r0
 8009bb2:	2801      	cmp	r0, #1
 8009bb4:	d166      	bne.n	8009c84 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009bb6:	19f4      	adds	r4, r6, r7
 8009bb8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bba:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009bbc:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bbe:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009bc0:	d904      	bls.n	8009bcc <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009bc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009bc8:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8009bca:	e7ec      	b.n	8009ba6 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8009bcc:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8009bce:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009bd0:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8009bd4:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009bda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009bdc:	492a      	ldr	r1, [pc, #168]	; (8009c88 <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009bde:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8009be2:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009be4:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8009be6:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009be8:	4928      	ldr	r1, [pc, #160]	; (8009c8c <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8009bea:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009bec:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009bf0:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009bf2:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8009bf6:	f7fb ff91 	bl	8005b1c <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8009bfa:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bfc:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 8009bfe:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 8009c00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c02:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 8009c04:	f043 0308 	orr.w	r3, r3, #8
 8009c08:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c0a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009c0c:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c0e:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c12:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c16:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 8009c1a:	bf18      	it	ne
 8009c1c:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009c1e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c20:	2302      	movs	r3, #2
 8009c22:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8009c28:	f002 ffde 	bl	800cbe8 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c30:	6828      	ldr	r0, [r5, #0]
 8009c32:	f003 f827 	bl	800cc84 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c36:	b148      	cbz	r0, 8009c4c <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c40:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009c42:	4318      	orrs	r0, r3
 8009c44:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c46:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8009c4a:	e7ab      	b.n	8009ba4 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8009c4c:	2f01      	cmp	r7, #1
 8009c4e:	d912      	bls.n	8009c76 <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009c50:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009c52:	4631      	mov	r1, r6
 8009c54:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009c56:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009c58:	f003 f844 	bl	800cce4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d0a2      	beq.n	8009ba6 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c68:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009c6a:	4318      	orrs	r0, r3
 8009c6c:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c6e:	2001      	movs	r0, #1
 8009c70:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009c74:	e797      	b.n	8009ba6 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009c76:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009c78:	4631      	mov	r1, r6
 8009c7a:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009c7c:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009c7e:	f003 f819 	bl	800ccb4 <SDMMC_CmdReadSingleBlock>
 8009c82:	e7eb      	b.n	8009c5c <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8009c84:	2002      	movs	r0, #2
 8009c86:	e78e      	b.n	8009ba6 <HAL_SD_ReadBlocks_DMA+0x1a>
 8009c88:	08009d8b 	.word	0x08009d8b
 8009c8c:	0800a391 	.word	0x0800a391

08009c90 <HAL_SD_WriteBlocks_DMA>:
{
 8009c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c92:	4604      	mov	r4, r0
 8009c94:	b087      	sub	sp, #28
 8009c96:	4615      	mov	r5, r2
 8009c98:	461e      	mov	r6, r3
  if(NULL == pData)
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	b931      	cbnz	r1, 8009cac <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ca4:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009ca6:	2001      	movs	r0, #1
}
 8009ca8:	b007      	add	sp, #28
 8009caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009cac:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009cb0:	b2c0      	uxtb	r0, r0
 8009cb2:	2801      	cmp	r0, #1
 8009cb4:	d162      	bne.n	8009d7c <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009cb6:	18eb      	adds	r3, r5, r3
 8009cb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cba:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009cbc:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cbe:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009cc0:	d904      	bls.n	8009ccc <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009cc8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009cca:	e7ed      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 8009ccc:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8009cce:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009cd0:	492b      	ldr	r1, [pc, #172]	; (8009d80 <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 8009cd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009cd6:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8009cd8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009cda:	f043 031a 	orr.w	r3, r3, #26
 8009cde:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ce2:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009ce4:	4927      	ldr	r1, [pc, #156]	; (8009d84 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8009ce6:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009ce8:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cea:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009cf0:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8009cf2:	bf18      	it	ne
 8009cf4:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009cf6:	f002 ffc5 	bl	800cc84 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	b150      	cbz	r0, 8009d12 <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d06:	4318      	orrs	r0, r3
 8009d08:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8009d10:	e7ca      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8009d12:	2e01      	cmp	r6, #1
 8009d14:	d90f      	bls.n	8009d36 <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d16:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009d18:	4629      	mov	r1, r5
 8009d1a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d1c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009d1e:	f003 f811 	bl	800cd44 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009d22:	4605      	mov	r5, r0
 8009d24:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d26:	b168      	cbz	r0, 8009d44 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009d28:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8009d2c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009d30:	4305      	orrs	r5, r0
 8009d32:	63a5      	str	r5, [r4, #56]	; 0x38
 8009d34:	e7e9      	b.n	8009d0a <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d36:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009d38:	4629      	mov	r1, r5
 8009d3a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d3c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009d3e:	f002 ffe9 	bl	800cd14 <SDMMC_CmdWriteSingleBlock>
 8009d42:	e7ee      	b.n	8009d22 <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 8009d44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009d46:	0276      	lsls	r6, r6, #9
 8009d48:	3280      	adds	r2, #128	; 0x80
 8009d4a:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 8009d4c:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009d50:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8009d52:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009d56:	08b3      	lsrs	r3, r6, #2
 8009d58:	f7fb fee0 	bl	8005b1c <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 8009d60:	4669      	mov	r1, sp
 8009d62:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009d64:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d66:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009d68:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009d6c:	2390      	movs	r3, #144	; 0x90
 8009d6e:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8009d74:	f002 ff38 	bl	800cbe8 <SDMMC_ConfigData>
    return HAL_OK;
 8009d78:	4628      	mov	r0, r5
 8009d7a:	e795      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8009d7c:	2002      	movs	r0, #2
 8009d7e:	e793      	b.n	8009ca8 <HAL_SD_WriteBlocks_DMA+0x18>
 8009d80:	08009ab5 	.word	0x08009ab5
 8009d84:	0800a391 	.word	0x0800a391

08009d88 <HAL_SD_ErrorCallback>:
 8009d88:	4770      	bx	lr

08009d8a <SD_DMAReceiveCplt>:
{
 8009d8a:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d8c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d90:	2b82      	cmp	r3, #130	; 0x82
 8009d92:	d109      	bne.n	8009da8 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d94:	6820      	ldr	r0, [r4, #0]
 8009d96:	f002 ffed 	bl	800cd74 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d9a:	b128      	cbz	r0, 8009da8 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8009d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d9e:	4318      	orrs	r0, r3
 8009da0:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fff0 	bl	8009d88 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009da8:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8009daa:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dae:	f022 0208 	bic.w	r2, r2, #8
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009db4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009db8:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8009dc0:	f7f8 fd90 	bl	80028e4 <HAL_SD_RxCpltCallback>
 8009dc4:	bd10      	pop	{r4, pc}

08009dc6 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8009dc6:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8009dc8:	0f9a      	lsrs	r2, r3, #30
 8009dca:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8009dcc:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8009dd0:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8009dd2:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8009dd6:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8009dd8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009ddc:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8009dde:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009de2:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8009de4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009de6:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8009de8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009dea:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8009dec:	0112      	lsls	r2, r2, #4
 8009dee:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009df0:	88ca      	ldrh	r2, [r1, #6]
{
 8009df2:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009df4:	b292      	uxth	r2, r2
 8009df6:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8009dfa:	4322      	orrs	r2, r4
 8009dfc:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8009dfe:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8009e02:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8009e04:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8009e08:	09d4      	lsrs	r4, r2, #7
 8009e0a:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8009e0c:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8009e10:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8009e12:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8009e16:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8009e18:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8009e1c:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8009e1e:	2400      	movs	r4, #0
 8009e20:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009e22:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	f040 8083 	bne.w	8009f30 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009e2a:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 8009e2c:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009e2e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8009e32:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009e36:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8009e38:	690a      	ldr	r2, [r1, #16]
 8009e3a:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009e3c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8009e3e:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8009e40:	690b      	ldr	r3, [r1, #16]
 8009e42:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8009e46:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8009e48:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8009e4c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8009e4e:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8009e52:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8009e54:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8009e58:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8009e5a:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8009e5e:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8009e60:	0bd3      	lsrs	r3, r2, #15
 8009e62:	f003 0306 	and.w	r3, r3, #6
 8009e66:	760b      	strb	r3, [r1, #24]
 8009e68:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8009e6c:	7e0c      	ldrb	r4, [r1, #24]
 8009e6e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009e72:	4322      	orrs	r2, r4
 8009e74:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009e76:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009e78:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009e7a:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009e7c:	3402      	adds	r4, #2
 8009e7e:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009e80:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009e82:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009e84:	7a0d      	ldrb	r5, [r1, #8]
 8009e86:	40ac      	lsls	r4, r5
 8009e88:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8009e8a:	0a64      	lsrs	r4, r4, #9
 8009e8c:	4362      	muls	r2, r4
 8009e8e:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8009e90:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009e94:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009e96:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009e9a:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009e9c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009e9e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009ea2:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8009ea4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009ea6:	7e8a      	ldrb	r2, [r1, #26]
 8009ea8:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009eb0:	4322      	orrs	r2, r4
 8009eb2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009eb4:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8009eb6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009eb8:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009eba:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009ebe:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8009ec0:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8009ec4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8009ec6:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8009eca:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8009ecc:	0d9a      	lsrs	r2, r3, #22
 8009ece:	f002 020c 	and.w	r2, r2, #12
 8009ed2:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009ed4:	7fca      	ldrb	r2, [r1, #31]
 8009ed6:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8009ed8:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009eda:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8009edc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8009ee0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009ee4:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8009ee8:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009eec:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8009ef0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009ef4:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8009ef8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009efc:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8009f00:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009f04:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8009f08:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009f0c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8009f10:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8009f14:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8009f18:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8009f1c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8009f20:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8009f24:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009f2e:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f30:	2c01      	cmp	r4, #1
 8009f32:	d11a      	bne.n	8009f6a <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8009f34:	041b      	lsls	r3, r3, #16
 8009f36:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009f3a:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009f3c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 8009f3e:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009f40:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8009f42:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8009f46:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8009f48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009f4c:	690c      	ldr	r4, [r1, #16]
 8009f4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009f52:	4322      	orrs	r2, r4
 8009f54:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8009f56:	690a      	ldr	r2, [r1, #16]
 8009f58:	0292      	lsls	r2, r2, #10
 8009f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f5e:	6542      	str	r2, [r0, #84]	; 0x54
 8009f60:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f66:	6582      	str	r2, [r0, #88]	; 0x58
 8009f68:	e794      	b.n	8009e94 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8009f6a:	6803      	ldr	r3, [r0, #0]
 8009f6c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009f70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f72:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f78:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8009f80:	4618      	mov	r0, r3
 8009f82:	bd30      	pop	{r4, r5, pc}

08009f84 <HAL_SD_InitCard>:
{
 8009f84:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009f86:	2376      	movs	r3, #118	; 0x76
{
 8009f88:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009f8a:	2500      	movs	r5, #0
{
 8009f8c:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009f8e:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 8009f90:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009f92:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f94:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009f96:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009f98:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009f9a:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 8009f9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fa0:	ab07      	add	r3, sp, #28
 8009fa2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009fa6:	6820      	ldr	r0, [r4, #0]
 8009fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009faa:	f002 fcd1 	bl	800c950 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 8009fae:	6820      	ldr	r0, [r4, #0]
 8009fb0:	6843      	ldr	r3, [r0, #4]
 8009fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb6:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8009fb8:	f002 fd29 	bl	800ca0e <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8009fbc:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8009fbe:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8009fc0:	6853      	ldr	r3, [r2, #4]
 8009fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc6:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8009fc8:	f7fb f9bc 	bl	8005344 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fcc:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8009fce:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009fd0:	f002 ff02 	bl	800cdd8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	b968      	cbnz	r0, 8009ff4 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	f002 ff25 	bl	800ce28 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fde:	b380      	cbz	r0, 800a042 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009fe0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009fe4:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	42ab      	cmp	r3, r5
 8009fec:	9206      	str	r2, [sp, #24]
 8009fee:	d108      	bne.n	800a002 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009ff0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009ffa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ffc:	430e      	orrs	r6, r1
 8009ffe:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a000:	e083      	b.n	800a10a <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a002:	2100      	movs	r1, #0
 800a004:	6820      	ldr	r0, [r4, #0]
 800a006:	f002 ff47 	bl	800ce98 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a00a:	4601      	mov	r1, r0
 800a00c:	b110      	cbz	r0, 800a014 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a00e:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800a012:	e7ef      	b.n	8009ff4 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	f002 ff57 	bl	800cec8 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a01a:	4601      	mov	r1, r0
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1f6      	bne.n	800a00e <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	f002 fd3d 	bl	800caa0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800a026:	2800      	cmp	r0, #0
 800a028:	dadd      	bge.n	8009fe6 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 800a02a:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a02c:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 800a02e:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a030:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800a032:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a036:	f002 fcee 	bl	800ca16 <SDMMC_GetPowerState>
 800a03a:	bb20      	cbnz	r0, 800a086 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a03c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800a040:	e06d      	b.n	800a11e <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a042:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a044:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a048:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	42ab      	cmp	r3, r5
 800a050:	9206      	str	r2, [sp, #24]
 800a052:	d0cd      	beq.n	8009ff0 <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a054:	2100      	movs	r1, #0
 800a056:	6820      	ldr	r0, [r4, #0]
 800a058:	f002 ff1e 	bl	800ce98 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a05c:	4606      	mov	r6, r0
 800a05e:	2800      	cmp	r0, #0
 800a060:	d1c8      	bne.n	8009ff4 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800a062:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	f002 ff2e 	bl	800cec8 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a06c:	4606      	mov	r6, r0
 800a06e:	2800      	cmp	r0, #0
 800a070:	d1c0      	bne.n	8009ff4 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a072:	4601      	mov	r1, r0
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	f002 fd13 	bl	800caa0 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800a07a:	2800      	cmp	r0, #0
 800a07c:	dae5      	bge.n	800a04a <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a07e:	0043      	lsls	r3, r0, #1
 800a080:	d5d3      	bpl.n	800a02a <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a082:	2301      	movs	r3, #1
 800a084:	e7d2      	b.n	800a02c <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a086:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d01a      	beq.n	800a0c2 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a08c:	6820      	ldr	r0, [r4, #0]
 800a08e:	f002 ff4c 	bl	800cf2a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a092:	4605      	mov	r5, r0
 800a094:	2800      	cmp	r0, #0
 800a096:	d142      	bne.n	800a11e <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a098:	4601      	mov	r1, r0
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	f002 fd00 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0a0:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0a2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0a4:	6820      	ldr	r0, [r4, #0]
 800a0a6:	f002 fcfb 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0aa:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0ac:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0ae:	6820      	ldr	r0, [r4, #0]
 800a0b0:	f002 fcf6 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0b4:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0b6:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	f002 fcf1 	bl	800caa0 <SDMMC_GetResponse>
 800a0be:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a0c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d122      	bne.n	800a10e <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a0c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d12e      	bne.n	800a12c <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a0ce:	2104      	movs	r1, #4
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	f002 fce5 	bl	800caa0 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a0d6:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a0d8:	0d00      	lsrs	r0, r0, #20
 800a0da:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7ff fe72 	bl	8009dc6 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800a0e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	0412      	lsls	r2, r2, #16
 800a0ea:	f002 fe5d 	bl	800cda8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	b9a8      	cbnz	r0, 800a11e <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 800a0f2:	f104 0310 	add.w	r3, r4, #16
 800a0f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0fa:	1d23      	adds	r3, r4, #4
 800a0fc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a100:	6820      	ldr	r0, [r4, #0]
 800a102:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a104:	f002 fc24 	bl	800c950 <SDMMC_Init>
  return HAL_OK;
 800a108:	4628      	mov	r0, r5
}
 800a10a:	b018      	add	sp, #96	; 0x60
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a10e:	f10d 0116 	add.w	r1, sp, #22
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	f002 ff34 	bl	800cf80 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a118:	4605      	mov	r5, r0
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d0d4      	beq.n	800a0c8 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 800a11e:	2001      	movs	r0, #1
 800a120:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a126:	431d      	orrs	r5, r3
 800a128:	63a5      	str	r5, [r4, #56]	; 0x38
 800a12a:	e7ee      	b.n	800a10a <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a12c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a130:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a132:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a134:	0409      	lsls	r1, r1, #16
 800a136:	f002 ff0d 	bl	800cf54 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a13a:	4605      	mov	r5, r0
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d1ee      	bne.n	800a11e <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a140:	4601      	mov	r1, r0
 800a142:	6820      	ldr	r0, [r4, #0]
 800a144:	f002 fcac 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a148:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a14a:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	f002 fca7 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a152:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a154:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a156:	6820      	ldr	r0, [r4, #0]
 800a158:	f002 fca2 	bl	800caa0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a15c:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a15e:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	f002 fc9d 	bl	800caa0 <SDMMC_GetResponse>
 800a166:	6720      	str	r0, [r4, #112]	; 0x70
 800a168:	e7b1      	b.n	800a0ce <HAL_SD_InitCard+0x14a>
	...

0800a16c <HAL_SD_Init>:
{
 800a16c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800a16e:	4604      	mov	r4, r0
 800a170:	2800      	cmp	r0, #0
 800a172:	d056      	beq.n	800a222 <HAL_SD_Init+0xb6>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800a174:	6802      	ldr	r2, [r0, #0]
 800a176:	4b2c      	ldr	r3, [pc, #176]	; (800a228 <HAL_SD_Init+0xbc>)
 800a178:	429a      	cmp	r2, r3
 800a17a:	d004      	beq.n	800a186 <HAL_SD_Init+0x1a>
 800a17c:	f240 1155 	movw	r1, #341	; 0x155
 800a180:	482a      	ldr	r0, [pc, #168]	; (800a22c <HAL_SD_Init+0xc0>)
 800a182:	f7f7 fd12 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a18c:	d004      	beq.n	800a198 <HAL_SD_Init+0x2c>
 800a18e:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800a192:	4826      	ldr	r0, [pc, #152]	; (800a22c <HAL_SD_Init+0xc0>)
 800a194:	f7f7 fd09 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a19e:	d004      	beq.n	800a1aa <HAL_SD_Init+0x3e>
 800a1a0:	f240 1157 	movw	r1, #343	; 0x157
 800a1a4:	4821      	ldr	r0, [pc, #132]	; (800a22c <HAL_SD_Init+0xc0>)
 800a1a6:	f7f7 fd00 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800a1aa:	68e3      	ldr	r3, [r4, #12]
 800a1ac:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a1b0:	d004      	beq.n	800a1bc <HAL_SD_Init+0x50>
 800a1b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a1b6:	481d      	ldr	r0, [pc, #116]	; (800a22c <HAL_SD_Init+0xc0>)
 800a1b8:	f7f7 fcf7 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a1c2:	d007      	beq.n	800a1d4 <HAL_SD_Init+0x68>
 800a1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c8:	d004      	beq.n	800a1d4 <HAL_SD_Init+0x68>
 800a1ca:	f240 1159 	movw	r1, #345	; 0x159
 800a1ce:	4817      	ldr	r0, [pc, #92]	; (800a22c <HAL_SD_Init+0xc0>)
 800a1d0:	f7f7 fceb 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800a1d4:	6963      	ldr	r3, [r4, #20]
 800a1d6:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a1da:	d004      	beq.n	800a1e6 <HAL_SD_Init+0x7a>
 800a1dc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800a1e0:	4812      	ldr	r0, [pc, #72]	; (800a22c <HAL_SD_Init+0xc0>)
 800a1e2:	f7f7 fce2 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800a1e6:	69a3      	ldr	r3, [r4, #24]
 800a1e8:	2bff      	cmp	r3, #255	; 0xff
 800a1ea:	d904      	bls.n	800a1f6 <HAL_SD_Init+0x8a>
 800a1ec:	f240 115b 	movw	r1, #347	; 0x15b
 800a1f0:	480e      	ldr	r0, [pc, #56]	; (800a22c <HAL_SD_Init+0xc0>)
 800a1f2:	f7f7 fcda 	bl	8001baa <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 800a1f6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a1fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1fe:	b91b      	cbnz	r3, 800a208 <HAL_SD_Init+0x9c>
    hsd->Lock = HAL_UNLOCKED;
 800a200:	7722      	strb	r2, [r4, #28]
    HAL_SD_MspInit(hsd);
 800a202:	4620      	mov	r0, r4
 800a204:	f7f7 fe8a 	bl	8001f1c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800a208:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800a20a:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800a20c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 800a210:	f7ff feb8 	bl	8009f84 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a214:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800a216:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a218:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800a21a:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800a21c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a220:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a222:	2001      	movs	r0, #1
}
 800a224:	bd10      	pop	{r4, pc}
 800a226:	bf00      	nop
 800a228:	40012c00 	.word	0x40012c00
 800a22c:	08034722 	.word	0x08034722

0800a230 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a230:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a232:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a234:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a236:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a238:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a23a:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a23c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a23e:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a240:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a242:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a244:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a246:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a24a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a24c:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 800a24e:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a250:	61cb      	str	r3, [r1, #28]
}
 800a252:	4770      	bx	lr

0800a254 <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a254:	f431 6300 	bics.w	r3, r1, #2048	; 0x800
{
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4604      	mov	r4, r0
 800a25c:	b08a      	sub	sp, #40	; 0x28
 800a25e:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a260:	d007      	beq.n	800a272 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a262:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a266:	d004      	beq.n	800a272 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a268:	f640 01b6 	movw	r1, #2230	; 0x8b6
 800a26c:	483d      	ldr	r0, [pc, #244]	; (800a364 <HAL_SD_ConfigWideBusOperation+0x110>)
 800a26e:	f7f7 fc9c 	bl	8001baa <assert_failed>
  hsd->State = HAL_SD_STATE_BUSY;
 800a272:	2303      	movs	r3, #3
 800a274:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a278:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d002      	beq.n	800a284 <HAL_SD_ConfigWideBusOperation+0x30>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a27e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a282:	d103      	bne.n	800a28c <HAL_SD_ConfigWideBusOperation+0x38>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a28a:	e04f      	b.n	800a32c <HAL_SD_ConfigWideBusOperation+0xd8>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a28c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a290:	d128      	bne.n	800a2e4 <HAL_SD_ConfigWideBusOperation+0x90>
  uint32_t scr[2] = {0, 0};
 800a292:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a294:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a296:	9104      	str	r1, [sp, #16]
 800a298:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a29a:	f002 fc01 	bl	800caa0 <SDMMC_GetResponse>
 800a29e:	0180      	lsls	r0, r0, #6
 800a2a0:	d43b      	bmi.n	800a31a <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800a2a2:	a904      	add	r1, sp, #16
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f7ff fc0c 	bl	8009ac2 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800a2aa:	b960      	cbnz	r0, 800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a2ac:	9b05      	ldr	r3, [sp, #20]
 800a2ae:	0359      	lsls	r1, r3, #13
 800a2b0:	d536      	bpl.n	800a320 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a2b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	0409      	lsls	r1, r1, #16
 800a2b8:	f002 fdee 	bl	800ce98 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800a2bc:	b918      	cbnz	r0, 800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800a2be:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	f002 fee1 	bl	800d088 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a2c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2c8:	4318      	orrs	r0, r3
 800a2ca:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a2cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a2ce:	2e00      	cmp	r6, #0
 800a2d0:	d02e      	beq.n	800a330 <HAL_SD_ConfigWideBusOperation+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800a2d8:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2dc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800a2e0:	b00a      	add	sp, #40	; 0x28
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a2e4:	b9fd      	cbnz	r5, 800a326 <HAL_SD_ConfigWideBusOperation+0xd2>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a2ea:	9504      	str	r5, [sp, #16]
 800a2ec:	9505      	str	r5, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2ee:	f002 fbd7 	bl	800caa0 <SDMMC_GetResponse>
 800a2f2:	0182      	lsls	r2, r0, #6
 800a2f4:	d411      	bmi.n	800a31a <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800a2f6:	a904      	add	r1, sp, #16
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f7ff fbe2 	bl	8009ac2 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d1e1      	bne.n	800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a302:	9b05      	ldr	r3, [sp, #20]
 800a304:	03db      	lsls	r3, r3, #15
 800a306:	d50b      	bpl.n	800a320 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a308:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a30a:	6820      	ldr	r0, [r4, #0]
 800a30c:	0409      	lsls	r1, r1, #16
 800a30e:	f002 fdc3 	bl	800ce98 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800a312:	2800      	cmp	r0, #0
 800a314:	d1d7      	bne.n	800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a316:	4629      	mov	r1, r5
 800a318:	e7d2      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0x6c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a31a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a31e:	e7d2      	b.n	800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a320:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a324:	e7cf      	b.n	800a2c6 <HAL_SD_ConfigWideBusOperation+0x72>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a326:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a32c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a32e:	e7cd      	b.n	800a2cc <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a330:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 800a332:	9507      	str	r5, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a334:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a33a:	68e3      	ldr	r3, [r4, #12]
 800a33c:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a33e:	6963      	ldr	r3, [r4, #20]
 800a340:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a342:	69a3      	ldr	r3, [r4, #24]
 800a344:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 800a346:	ab0a      	add	r3, sp, #40	; 0x28
 800a348:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a34c:	ab04      	add	r3, sp, #16
 800a34e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a352:	6820      	ldr	r0, [r4, #0]
 800a354:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a356:	f002 fafb 	bl	800c950 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800a35a:	2301      	movs	r3, #1
  return HAL_OK;
 800a35c:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 800a35e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a362:	e7bd      	b.n	800a2e0 <HAL_SD_ConfigWideBusOperation+0x8c>
 800a364:	08034722 	.word	0x08034722

0800a368 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a368:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800a36a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a36c:	0409      	lsls	r1, r1, #16
{
 800a36e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a370:	6800      	ldr	r0, [r0, #0]
 800a372:	f002 fe59 	bl	800d028 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800a376:	4601      	mov	r1, r0
 800a378:	b928      	cbnz	r0, 800a386 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a37a:	6820      	ldr	r0, [r4, #0]
 800a37c:	f002 fb90 	bl	800caa0 <SDMMC_GetResponse>
  return cardstate;
 800a380:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a384:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800a388:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a38a:	4319      	orrs	r1, r3
 800a38c:	63a1      	str	r1, [r4, #56]	; 0x38
 800a38e:	e7f7      	b.n	800a380 <HAL_SD_GetCardState+0x18>

0800a390 <SD_DMAError>:
{
 800a390:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a392:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a394:	f7fb fc14 	bl	8005bc0 <HAL_DMA_GetError>
 800a398:	2802      	cmp	r0, #2
 800a39a:	d026      	beq.n	800a3ea <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800a39c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d003      	beq.n	800a3ac <SD_DMAError+0x1c>
 800a3a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d11b      	bne.n	800a3e4 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 800a3b2:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a3bc:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a3be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3c4:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a3c6:	f7ff ffcf 	bl	800a368 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a3ca:	3805      	subs	r0, #5
 800a3cc:	b2c0      	uxtb	r0, r0
 800a3ce:	2801      	cmp	r0, #1
 800a3d0:	d805      	bhi.n	800a3de <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	f002 fcce 	bl	800cd74 <SDMMC_CmdStopTransfer>
 800a3d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3da:	4318      	orrs	r0, r3
 800a3dc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f7ff fccf 	bl	8009d88 <HAL_SD_ErrorCallback>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	b1c8      	cbz	r0, 800a428 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a3f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a3f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a3fc:	b91b      	cbnz	r3, 800a406 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a3fe:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a402:	f7f9 fcb9 	bl	8003d78 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a406:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a408:	1d21      	adds	r1, r4, #4
 800a40a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a40c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a410:	f002 f8a4 	bl	800c55c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	4629      	mov	r1, r5
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	f002 f94d 	bl	800c6b8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a41e:	2301      	movs	r3, #1
  
  return HAL_OK;
 800a420:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a422:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a426:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a428:	2001      	movs	r0, #1
}
 800a42a:	bd38      	pop	{r3, r4, r5, pc}

0800a42c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a430:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800a434:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a436:	b2c0      	uxtb	r0, r0
 800a438:	2802      	cmp	r0, #2
 800a43a:	d00d      	beq.n	800a458 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a43c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a43e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a440:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a444:	f002 f9d6 	bl	800c7f4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a448:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800a44a:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a44c:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a44e:	bf0c      	ite	eq
 800a450:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a452:	2301      	movne	r3, #1
 800a454:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a458:	bd38      	pop	{r3, r4, r5, pc}

0800a45a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a45a:	b510      	push	{r4, lr}
 800a45c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a45e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800a462:	b2c0      	uxtb	r0, r0
 800a464:	2802      	cmp	r0, #2
 800a466:	d009      	beq.n	800a47c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a468:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a46a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a46c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a470:	f002 fa08 	bl	800c884 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a474:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800a476:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a478:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a47c:	bd10      	pop	{r4, pc}
	...

0800a480 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a480:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a482:	4604      	mov	r4, r0
 800a484:	2800      	cmp	r0, #0
 800a486:	f000 8085 	beq.w	800a594 <HAL_SPDIFRX_Init+0x114>
  {
    return HAL_ERROR;
  }

  /* Check the SPDIFRX parameters */
  assert_param(IS_STEREO_MODE(hspdif->Init.StereoMode));
 800a48a:	6983      	ldr	r3, [r0, #24]
 800a48c:	f033 0308 	bics.w	r3, r3, #8
 800a490:	d003      	beq.n	800a49a <HAL_SPDIFRX_Init+0x1a>
 800a492:	21f7      	movs	r1, #247	; 0xf7
 800a494:	4840      	ldr	r0, [pc, #256]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a496:	f7f7 fb88 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_INPUT_SELECT(hspdif->Init.InputSelection));
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a4a0:	d003      	beq.n	800a4aa <HAL_SPDIFRX_Init+0x2a>
 800a4a2:	21f8      	movs	r1, #248	; 0xf8
 800a4a4:	483c      	ldr	r0, [pc, #240]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4a6:	f7f7 fb80 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_MAX_RETRIES(hspdif->Init.Retries));
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a4b0:	d003      	beq.n	800a4ba <HAL_SPDIFRX_Init+0x3a>
 800a4b2:	21f9      	movs	r1, #249	; 0xf9
 800a4b4:	4838      	ldr	r0, [pc, #224]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4b6:	f7f7 fb78 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_WAIT_FOR_ACTIVITY(hspdif->Init.WaitForActivity));
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a4c0:	d003      	beq.n	800a4ca <HAL_SPDIFRX_Init+0x4a>
 800a4c2:	21fa      	movs	r1, #250	; 0xfa
 800a4c4:	4834      	ldr	r0, [pc, #208]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4c6:	f7f7 fb70 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_CHANNEL(hspdif->Init.ChannelSelection));
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a4d0:	d003      	beq.n	800a4da <HAL_SPDIFRX_Init+0x5a>
 800a4d2:	21fb      	movs	r1, #251	; 0xfb
 800a4d4:	4830      	ldr	r0, [pc, #192]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4d6:	f7f7 fb68 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_DATA_FORMAT(hspdif->Init.DataFormat));
 800a4da:	6963      	ldr	r3, [r4, #20]
 800a4dc:	f033 0210 	bics.w	r2, r3, #16
 800a4e0:	d005      	beq.n	800a4ee <HAL_SPDIFRX_Init+0x6e>
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d003      	beq.n	800a4ee <HAL_SPDIFRX_Init+0x6e>
 800a4e6:	21fc      	movs	r1, #252	; 0xfc
 800a4e8:	482b      	ldr	r0, [pc, #172]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4ea:	f7f7 fb5e 	bl	8001baa <assert_failed>
  assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a4f4:	d003      	beq.n	800a4fe <HAL_SPDIFRX_Init+0x7e>
 800a4f6:	21fd      	movs	r1, #253	; 0xfd
 800a4f8:	4827      	ldr	r0, [pc, #156]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a4fa:	f7f7 fb56 	bl	8001baa <assert_failed>
  assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
 800a4fe:	6a23      	ldr	r3, [r4, #32]
 800a500:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a504:	d003      	beq.n	800a50e <HAL_SPDIFRX_Init+0x8e>
 800a506:	21fe      	movs	r1, #254	; 0xfe
 800a508:	4823      	ldr	r0, [pc, #140]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a50a:	f7f7 fb4e 	bl	8001baa <assert_failed>
  assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
 800a50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a510:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a514:	d003      	beq.n	800a51e <HAL_SPDIFRX_Init+0x9e>
 800a516:	21ff      	movs	r1, #255	; 0xff
 800a518:	481f      	ldr	r0, [pc, #124]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a51a:	f7f7 fb46 	bl	8001baa <assert_failed>
  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
 800a51e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a520:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800a524:	d004      	beq.n	800a530 <HAL_SPDIFRX_Init+0xb0>
 800a526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a52a:	481b      	ldr	r0, [pc, #108]	; (800a598 <HAL_SPDIFRX_Init+0x118>)
 800a52c:	f7f7 fb3d 	bl	8001baa <assert_failed>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a530:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a538:	b923      	cbnz	r3, 800a544 <HAL_SPDIFRX_Init+0xc4>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a53a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a53e:	4620      	mov	r0, r4
 800a540:	f7f7 fd52 	bl	8001fe8 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a544:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a546:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a548:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a54a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 800a54e:	680b      	ldr	r3, [r1, #0]
 800a550:	f023 0303 	bic.w	r3, r3, #3
 800a554:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 800a556:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 800a558:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 800a55a:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 800a55c:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a55e:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 800a562:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 800a564:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a566:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 800a56a:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 800a56c:	6920      	ldr	r0, [r4, #16]
 800a56e:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 800a570:	6960      	ldr	r0, [r4, #20]
 800a572:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 800a574:	69e0      	ldr	r0, [r4, #28]
 800a576:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 800a578:	6a20      	ldr	r0, [r4, #32]
 800a57a:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 800a57c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a57e:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 800a580:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a582:	4303      	orrs	r3, r0
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a584:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 800a586:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 800a588:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a58a:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a58c:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 800a592:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a594:	2001      	movs	r0, #1
}
 800a596:	bd10      	pop	{r4, pc}
 800a598:	0803475f 	.word	0x0803475f

0800a59c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a59c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f000 80e5 	beq.w	800a770 <HAL_SPI_Init+0x1d4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a5a6:	6803      	ldr	r3, [r0, #0]
 800a5a8:	4a72      	ldr	r2, [pc, #456]	; (800a774 <HAL_SPI_Init+0x1d8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d018      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5ae:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d014      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d010      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00c      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5c6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d008      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d004      	beq.n	800a5e0 <HAL_SPI_Init+0x44>
 800a5d6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a5da:	4867      	ldr	r0, [pc, #412]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a5dc:	f7f7 fae5 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	b13b      	cbz	r3, 800a5f4 <HAL_SPI_Init+0x58>
 800a5e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5e8:	d004      	beq.n	800a5f4 <HAL_SPI_Init+0x58>
 800a5ea:	f240 1145 	movw	r1, #325	; 0x145
 800a5ee:	4862      	ldr	r0, [pc, #392]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a5f0:	f7f7 fadb 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a5f4:	68a3      	ldr	r3, [r4, #8]
 800a5f6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800a5fa:	d007      	beq.n	800a60c <HAL_SPI_Init+0x70>
 800a5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a600:	d004      	beq.n	800a60c <HAL_SPI_Init+0x70>
 800a602:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a606:	485c      	ldr	r0, [pc, #368]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a608:	f7f7 facf 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a60c:	68e3      	ldr	r3, [r4, #12]
 800a60e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a612:	d018      	beq.n	800a646 <HAL_SPI_Init+0xaa>
 800a614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a618:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a61c:	d013      	beq.n	800a646 <HAL_SPI_Init+0xaa>
 800a61e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a622:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800a626:	d00e      	beq.n	800a646 <HAL_SPI_Init+0xaa>
 800a628:	f423 6210 	bic.w	r2, r3, #2304	; 0x900
 800a62c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a630:	d009      	beq.n	800a646 <HAL_SPI_Init+0xaa>
 800a632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63a:	d004      	beq.n	800a646 <HAL_SPI_Init+0xaa>
 800a63c:	f240 1147 	movw	r1, #327	; 0x147
 800a640:	484d      	ldr	r0, [pc, #308]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a642:	f7f7 fab2 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a646:	69a3      	ldr	r3, [r4, #24]
 800a648:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a64c:	d007      	beq.n	800a65e <HAL_SPI_Init+0xc2>
 800a64e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a652:	d004      	beq.n	800a65e <HAL_SPI_Init+0xc2>
 800a654:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a658:	4847      	ldr	r0, [pc, #284]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a65a:	f7f7 faa6 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a65e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a660:	f033 0308 	bics.w	r3, r3, #8
 800a664:	d004      	beq.n	800a670 <HAL_SPI_Init+0xd4>
 800a666:	f240 1149 	movw	r1, #329	; 0x149
 800a66a:	4843      	ldr	r0, [pc, #268]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a66c:	f7f7 fa9d 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a670:	69e3      	ldr	r3, [r4, #28]
 800a672:	f033 0318 	bics.w	r3, r3, #24
 800a676:	d006      	beq.n	800a686 <HAL_SPI_Init+0xea>
 800a678:	2b20      	cmp	r3, #32
 800a67a:	d004      	beq.n	800a686 <HAL_SPI_Init+0xea>
 800a67c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a680:	483d      	ldr	r0, [pc, #244]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a682:	f7f7 fa92 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a686:	6a23      	ldr	r3, [r4, #32]
 800a688:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a68c:	d004      	beq.n	800a698 <HAL_SPI_Init+0xfc>
 800a68e:	f240 114b 	movw	r1, #331	; 0x14b
 800a692:	4839      	ldr	r0, [pc, #228]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a694:	f7f7 fa89 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a69a:	f033 0310 	bics.w	r3, r3, #16
 800a69e:	d004      	beq.n	800a6aa <HAL_SPI_Init+0x10e>
 800a6a0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a6a4:	4834      	ldr	r0, [pc, #208]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a6a6:	f7f7 fa80 	bl	8001baa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ac:	b983      	cbnz	r3, 800a6d0 <HAL_SPI_Init+0x134>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	f033 0302 	bics.w	r3, r3, #2
 800a6b4:	d004      	beq.n	800a6c0 <HAL_SPI_Init+0x124>
 800a6b6:	f240 114f 	movw	r1, #335	; 0x14f
 800a6ba:	482f      	ldr	r0, [pc, #188]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a6bc:	f7f7 fa75 	bl	8001baa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a6c0:	6963      	ldr	r3, [r4, #20]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d904      	bls.n	800a6d0 <HAL_SPI_Init+0x134>
 800a6c6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a6ca:	482b      	ldr	r0, [pc, #172]	; (800a778 <HAL_SPI_Init+0x1dc>)
 800a6cc:	f7f7 fa6d 	bl	8001baa <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a6d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a6dc:	b923      	cbnz	r3, 800a6e8 <HAL_SPI_Init+0x14c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6de:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7f7 fcd4 	bl	8002090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6e8:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6ea:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6ec:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a6ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a6f2:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6f4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a6f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6fc:	600b      	str	r3, [r1, #0]
 800a6fe:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a702:	d932      	bls.n	800a76a <HAL_SPI_Init+0x1ce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a704:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a706:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a70a:	bf18      	it	ne
 800a70c:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a70e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a710:	b92b      	cbnz	r3, 800a71e <HAL_SPI_Init+0x182>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a712:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a716:	bf8c      	ite	hi
 800a718:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a71a:	2301      	movls	r3, #1
 800a71c:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a71e:	68a6      	ldr	r6, [r4, #8]
 800a720:	6863      	ldr	r3, [r4, #4]
 800a722:	69a5      	ldr	r5, [r4, #24]
 800a724:	4333      	orrs	r3, r6
 800a726:	6926      	ldr	r6, [r4, #16]
 800a728:	4333      	orrs	r3, r6
 800a72a:	6966      	ldr	r6, [r4, #20]
 800a72c:	4333      	orrs	r3, r6
 800a72e:	69e6      	ldr	r6, [r4, #28]
 800a730:	4333      	orrs	r3, r6
 800a732:	6a26      	ldr	r6, [r4, #32]
 800a734:	4333      	orrs	r3, r6
 800a736:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a738:	4333      	orrs	r3, r6
 800a73a:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a73e:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a740:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a742:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a746:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74a:	431a      	orrs	r2, r3
 800a74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a74e:	431a      	orrs	r2, r3
 800a750:	432a      	orrs	r2, r5
 800a752:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a754:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a756:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a758:	69cb      	ldr	r3, [r1, #28]
 800a75a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a75e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800a760:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a762:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a764:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800a768:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a76a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a76e:	e7cc      	b.n	800a70a <HAL_SPI_Init+0x16e>
    return HAL_ERROR;
 800a770:	2001      	movs	r0, #1
}
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	40013000 	.word	0x40013000
 800a778:	080347a1 	.word	0x080347a1

0800a77c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a77c:	6a03      	ldr	r3, [r0, #32]
 800a77e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800a782:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a784:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a786:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a78a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a78c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800a790:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800a79a:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a79c:	688d      	ldr	r5, [r1, #8]
 800a79e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a2:	4d09      	ldr	r5, [pc, #36]	; (800a7c8 <TIM_OC5_SetConfig+0x4c>)
 800a7a4:	42a8      	cmp	r0, r5
 800a7a6:	d003      	beq.n	800a7b0 <TIM_OC5_SetConfig+0x34>
 800a7a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a7ac:	42a8      	cmp	r0, r5
 800a7ae:	d104      	bne.n	800a7ba <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a7b0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a7b4:	694d      	ldr	r5, [r1, #20]
 800a7b6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7bc:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a7be:	684b      	ldr	r3, [r1, #4]
 800a7c0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c2:	6202      	str	r2, [r0, #32]
 800a7c4:	bd30      	pop	{r4, r5, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40010000 	.word	0x40010000

0800a7cc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7cc:	6a03      	ldr	r3, [r0, #32]
 800a7ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800a7d2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7da:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7ee:	688d      	ldr	r5, [r1, #8]
 800a7f0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f4:	4d08      	ldr	r5, [pc, #32]	; (800a818 <TIM_OC6_SetConfig+0x4c>)
 800a7f6:	42a8      	cmp	r0, r5
 800a7f8:	d003      	beq.n	800a802 <TIM_OC6_SetConfig+0x36>
 800a7fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a7fe:	42a8      	cmp	r0, r5
 800a800:	d104      	bne.n	800a80c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a802:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a806:	694d      	ldr	r5, [r1, #20]
 800a808:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a80e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a810:	684b      	ldr	r3, [r1, #4]
 800a812:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a814:	6202      	str	r2, [r0, #32]
 800a816:	bd30      	pop	{r4, r5, pc}
 800a818:	40010000 	.word	0x40010000

0800a81c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81c:	6a03      	ldr	r3, [r0, #32]
 800a81e:	f023 0301 	bic.w	r3, r3, #1
{
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a826:	6203      	str	r3, [r0, #32]
{
 800a828:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a82a:	6a05      	ldr	r5, [r0, #32]
{
 800a82c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800a82e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a832:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800a834:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx |= OC_Config->OCMode;
 800a838:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a83a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a83e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a842:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800a844:	688b      	ldr	r3, [r1, #8]
 800a846:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a848:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <TIM_OC1_SetConfig+0xa8>)
 800a84a:	4298      	cmp	r0, r3
 800a84c:	d003      	beq.n	800a856 <TIM_OC1_SetConfig+0x3a>
 800a84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a852:	4298      	cmp	r0, r3
 800a854:	d12e      	bne.n	800a8b4 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a856:	68f3      	ldr	r3, [r6, #12]
 800a858:	f033 0308 	bics.w	r3, r3, #8
 800a85c:	d004      	beq.n	800a868 <TIM_OC1_SetConfig+0x4c>
 800a85e:	f241 7176 	movw	r1, #6006	; 0x1776
 800a862:	4819      	ldr	r0, [pc, #100]	; (800a8c8 <TIM_OC1_SetConfig+0xac>)
 800a864:	f7f7 f9a1 	bl	8001baa <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800a868:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a86a:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a86e:	431d      	orrs	r5, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <TIM_OC1_SetConfig+0xa8>)
 800a872:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800a874:	f025 0504 	bic.w	r5, r5, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a878:	d003      	beq.n	800a882 <TIM_OC1_SetConfig+0x66>
 800a87a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a87e:	429c      	cmp	r4, r3
 800a880:	d118      	bne.n	800a8b4 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a882:	69b3      	ldr	r3, [r6, #24]
 800a884:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a888:	d004      	beq.n	800a894 <TIM_OC1_SetConfig+0x78>
 800a88a:	f241 7183 	movw	r1, #6019	; 0x1783
 800a88e:	480e      	ldr	r0, [pc, #56]	; (800a8c8 <TIM_OC1_SetConfig+0xac>)
 800a890:	f7f7 f98b 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a894:	6973      	ldr	r3, [r6, #20]
 800a896:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a89a:	d004      	beq.n	800a8a6 <TIM_OC1_SetConfig+0x8a>
 800a89c:	f241 7184 	movw	r1, #6020	; 0x1784
 800a8a0:	4809      	ldr	r0, [pc, #36]	; (800a8c8 <TIM_OC1_SetConfig+0xac>)
 800a8a2:	f7f7 f982 	bl	8001baa <assert_failed>
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8a6:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8a8:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8ac:	69b2      	ldr	r2, [r6, #24]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	ea43 0808 	orr.w	r8, r3, r8
  TIMx->CCR1 = OC_Config->Pulse;
 800a8b4:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a8b6:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a8ba:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800a8bc:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800a8be:	6225      	str	r5, [r4, #32]
 800a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c4:	40010000 	.word	0x40010000
 800a8c8:	080347df 	.word	0x080347df

0800a8cc <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8cc:	6a03      	ldr	r3, [r0, #32]
 800a8ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800a8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8d6:	6203      	str	r3, [r0, #32]
{
 800a8d8:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a8da:	6a05      	ldr	r5, [r0, #32]
{
 800a8dc:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800a8de:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800a8e2:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800a8e4:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800a8e8:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ee:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a8f2:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8f4:	688b      	ldr	r3, [r1, #8]
 800a8f6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8fa:	4b1f      	ldr	r3, [pc, #124]	; (800a978 <TIM_OC3_SetConfig+0xac>)
 800a8fc:	4298      	cmp	r0, r3
 800a8fe:	d003      	beq.n	800a908 <TIM_OC3_SetConfig+0x3c>
 800a900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a904:	4298      	cmp	r0, r3
 800a906:	d12f      	bne.n	800a968 <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a908:	68f3      	ldr	r3, [r6, #12]
 800a90a:	f033 0308 	bics.w	r3, r3, #8
 800a90e:	d004      	beq.n	800a91a <TIM_OC3_SetConfig+0x4e>
 800a910:	f641 010c 	movw	r1, #6156	; 0x180c
 800a914:	4819      	ldr	r0, [pc, #100]	; (800a97c <TIM_OC3_SetConfig+0xb0>)
 800a916:	f7f7 f948 	bl	8001baa <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a91a:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a91c:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a920:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	4b14      	ldr	r3, [pc, #80]	; (800a978 <TIM_OC3_SetConfig+0xac>)
 800a926:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 800a928:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a92c:	d003      	beq.n	800a936 <TIM_OC3_SetConfig+0x6a>
 800a92e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a932:	429c      	cmp	r4, r3
 800a934:	d118      	bne.n	800a968 <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a936:	69b3      	ldr	r3, [r6, #24]
 800a938:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a93c:	d004      	beq.n	800a948 <TIM_OC3_SetConfig+0x7c>
 800a93e:	f641 0119 	movw	r1, #6169	; 0x1819
 800a942:	480e      	ldr	r0, [pc, #56]	; (800a97c <TIM_OC3_SetConfig+0xb0>)
 800a944:	f7f7 f931 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a948:	6973      	ldr	r3, [r6, #20]
 800a94a:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a94e:	d004      	beq.n	800a95a <TIM_OC3_SetConfig+0x8e>
 800a950:	f641 011a 	movw	r1, #6170	; 0x181a
 800a954:	4809      	ldr	r0, [pc, #36]	; (800a97c <TIM_OC3_SetConfig+0xb0>)
 800a956:	f7f7 f928 	bl	8001baa <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a95a:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a95c:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a960:	69b2      	ldr	r2, [r6, #24]
 800a962:	4313      	orrs	r3, r2
 800a964:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800a968:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a96a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a96e:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800a970:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800a972:	6225      	str	r5, [r4, #32]
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	40010000 	.word	0x40010000
 800a97c:	080347df 	.word	0x080347df

0800a980 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800a986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a98a:	6203      	str	r3, [r0, #32]
{
 800a98c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a98e:	6a05      	ldr	r5, [r0, #32]
{
 800a990:	460f      	mov	r7, r1
  tmpcr2 =  TIMx->CR2;
 800a992:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800a996:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800a998:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a99c:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a99e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9a2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9a6:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9aa:	688b      	ldr	r3, [r1, #8]
 800a9ac:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b0:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <TIM_OC4_SetConfig+0x6c>)
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	d003      	beq.n	800a9be <TIM_OC4_SetConfig+0x3e>
 800a9b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ba:	4298      	cmp	r0, r3
 800a9bc:	d10d      	bne.n	800a9da <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a9c4:	d004      	beq.n	800a9d0 <TIM_OC4_SetConfig+0x50>
 800a9c6:	f641 0158 	movw	r1, #6232	; 0x1858
 800a9ca:	4809      	ldr	r0, [pc, #36]	; (800a9f0 <TIM_OC4_SetConfig+0x70>)
 800a9cc:	f7f7 f8ed 	bl	8001baa <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9d0:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800a9da:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800a9dc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800a9e0:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800a9e2:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800a9e4:	6225      	str	r5, [r4, #32]
 800a9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40010000 	.word	0x40010000
 800a9f0:	080347df 	.word	0x080347df

0800a9f4 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a9f4:	6803      	ldr	r3, [r0, #0]
 800a9f6:	4a28      	ldr	r2, [pc, #160]	; (800aa98 <HAL_TIM_Base_Start_IT+0xa4>)
 800a9f8:	4293      	cmp	r3, r2
{
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a9fe:	d037      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa04:	d034      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d030      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d02c      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d028      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d024      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d020      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa2e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d01c      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa36:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d018      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d014      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d010      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa4e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00c      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d008      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d004      	beq.n	800aa70 <HAL_TIM_Base_Start_IT+0x7c>
 800aa66:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800aa6a:	480c      	ldr	r0, [pc, #48]	; (800aa9c <HAL_TIM_Base_Start_IT+0xa8>)
 800aa6c:	f7f7 f89d 	bl	8001baa <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	68da      	ldr	r2, [r3, #12]
 800aa74:	f042 0201 	orr.w	r2, r2, #1
 800aa78:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa7a:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <HAL_TIM_Base_Start_IT+0xac>)
 800aa7c:	6899      	ldr	r1, [r3, #8]
 800aa7e:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa80:	2a06      	cmp	r2, #6
 800aa82:	d006      	beq.n	800aa92 <HAL_TIM_Base_Start_IT+0x9e>
 800aa84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800aa88:	d003      	beq.n	800aa92 <HAL_TIM_Base_Start_IT+0x9e>
    __HAL_TIM_ENABLE(htim);
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f042 0201 	orr.w	r2, r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
}
 800aa92:	2000      	movs	r0, #0
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	bf00      	nop
 800aa98:	40010000 	.word	0x40010000
 800aa9c:	080347df 	.word	0x080347df
 800aaa0:	00010007 	.word	0x00010007

0800aaa4 <HAL_TIM_OC_DelayElapsedCallback>:
 800aaa4:	4770      	bx	lr

0800aaa6 <HAL_TIM_IC_CaptureCallback>:
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>:
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_TIM_TriggerCallback>:
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aaac:	6803      	ldr	r3, [r0, #0]
 800aaae:	691a      	ldr	r2, [r3, #16]
 800aab0:	0791      	lsls	r1, r2, #30
{
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aab6:	d50f      	bpl.n	800aad8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aab8:	68da      	ldr	r2, [r3, #12]
 800aaba:	0792      	lsls	r2, r2, #30
 800aabc:	d50c      	bpl.n	800aad8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aabe:	f06f 0202 	mvn.w	r2, #2
 800aac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aac4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aac6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aac8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaca:	0799      	lsls	r1, r3, #30
 800aacc:	f000 8085 	beq.w	800abda <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800aad0:	f7ff ffe9 	bl	800aaa6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aad4:	2300      	movs	r3, #0
 800aad6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	691a      	ldr	r2, [r3, #16]
 800aadc:	0752      	lsls	r2, r2, #29
 800aade:	d510      	bpl.n	800ab02 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aae0:	68da      	ldr	r2, [r3, #12]
 800aae2:	0750      	lsls	r0, r2, #29
 800aae4:	d50d      	bpl.n	800ab02 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aae6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800aaea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aaec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaee:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaf0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaf2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaf4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800aaf8:	d075      	beq.n	800abe6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800aafa:	f7ff ffd4 	bl	800aaa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aafe:	2300      	movs	r3, #0
 800ab00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	691a      	ldr	r2, [r3, #16]
 800ab06:	0711      	lsls	r1, r2, #28
 800ab08:	d50f      	bpl.n	800ab2a <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	0712      	lsls	r2, r2, #28
 800ab0e:	d50c      	bpl.n	800ab2a <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab10:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ab14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab18:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab1a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab1e:	079b      	lsls	r3, r3, #30
 800ab20:	d067      	beq.n	800abf2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab22:	f7ff ffc0 	bl	800aaa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab26:	2300      	movs	r3, #0
 800ab28:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	691a      	ldr	r2, [r3, #16]
 800ab2e:	06d0      	lsls	r0, r2, #27
 800ab30:	d510      	bpl.n	800ab54 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	06d1      	lsls	r1, r2, #27
 800ab36:	d50d      	bpl.n	800ab54 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab38:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ab3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab40:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab42:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab44:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab46:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ab4a:	d058      	beq.n	800abfe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4c:	f7ff ffab 	bl	800aaa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab50:	2300      	movs	r3, #0
 800ab52:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	691a      	ldr	r2, [r3, #16]
 800ab58:	07d2      	lsls	r2, r2, #31
 800ab5a:	d508      	bpl.n	800ab6e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab5c:	68da      	ldr	r2, [r3, #12]
 800ab5e:	07d0      	lsls	r0, r2, #31
 800ab60:	d505      	bpl.n	800ab6e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab62:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab68:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab6a:	f7f7 f813 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	691a      	ldr	r2, [r3, #16]
 800ab72:	0611      	lsls	r1, r2, #24
 800ab74:	d508      	bpl.n	800ab88 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab76:	68da      	ldr	r2, [r3, #12]
 800ab78:	0612      	lsls	r2, r2, #24
 800ab7a:	d505      	bpl.n	800ab88 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ab80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ab84:	f001 f8e3 	bl	800bd4e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	05d0      	lsls	r0, r2, #23
 800ab8e:	d508      	bpl.n	800aba2 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	0611      	lsls	r1, r2, #24
 800ab94:	d505      	bpl.n	800aba2 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab96:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ab9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ab9e:	f001 f8d7 	bl	800bd50 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	0652      	lsls	r2, r2, #25
 800aba8:	d508      	bpl.n	800abbc <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	0650      	lsls	r0, r2, #25
 800abae:	d505      	bpl.n	800abbc <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800abb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800abb8:	f7ff ff77 	bl	800aaaa <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	0691      	lsls	r1, r2, #26
 800abc2:	d522      	bpl.n	800ac0a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	0692      	lsls	r2, r2, #26
 800abc8:	d51f      	bpl.n	800ac0a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800abce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abd0:	611a      	str	r2, [r3, #16]
}
 800abd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800abd6:	f001 b8b9 	b.w	800bd4c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abda:	f7ff ff63 	bl	800aaa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abde:	4620      	mov	r0, r4
 800abe0:	f7ff ff62 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800abe4:	e776      	b.n	800aad4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe6:	f7ff ff5d 	bl	800aaa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abea:	4620      	mov	r0, r4
 800abec:	f7ff ff5c 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800abf0:	e785      	b.n	800aafe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf2:	f7ff ff57 	bl	800aaa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7ff ff56 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800abfc:	e793      	b.n	800ab26 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfe:	f7ff ff51 	bl	800aaa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac02:	4620      	mov	r0, r4
 800ac04:	f7ff ff50 	bl	800aaa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800ac08:	e7a2      	b.n	800ab50 <HAL_TIM_IRQHandler+0xa4>
 800ac0a:	bd10      	pop	{r4, pc}

0800ac0c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac0c:	4a30      	ldr	r2, [pc, #192]	; (800acd0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800ac0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac10:	4290      	cmp	r0, r2
 800ac12:	d012      	beq.n	800ac3a <TIM_Base_SetConfig+0x2e>
 800ac14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ac18:	d00f      	beq.n	800ac3a <TIM_Base_SetConfig+0x2e>
 800ac1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ac1e:	4290      	cmp	r0, r2
 800ac20:	d00b      	beq.n	800ac3a <TIM_Base_SetConfig+0x2e>
 800ac22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac26:	4290      	cmp	r0, r2
 800ac28:	d007      	beq.n	800ac3a <TIM_Base_SetConfig+0x2e>
 800ac2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac2e:	4290      	cmp	r0, r2
 800ac30:	d003      	beq.n	800ac3a <TIM_Base_SetConfig+0x2e>
 800ac32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ac36:	4290      	cmp	r0, r2
 800ac38:	d119      	bne.n	800ac6e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800ac3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac40:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac42:	4a23      	ldr	r2, [pc, #140]	; (800acd0 <TIM_Base_SetConfig+0xc4>)
 800ac44:	4290      	cmp	r0, r2
 800ac46:	d029      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ac4c:	d026      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ac52:	4290      	cmp	r0, r2
 800ac54:	d022      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac5a:	4290      	cmp	r0, r2
 800ac5c:	d01e      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac62:	4290      	cmp	r0, r2
 800ac64:	d01a      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ac6a:	4290      	cmp	r0, r2
 800ac6c:	d016      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac6e:	4a19      	ldr	r2, [pc, #100]	; (800acd4 <TIM_Base_SetConfig+0xc8>)
 800ac70:	4290      	cmp	r0, r2
 800ac72:	d013      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac78:	4290      	cmp	r0, r2
 800ac7a:	d00f      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac80:	4290      	cmp	r0, r2
 800ac82:	d00b      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ac88:	4290      	cmp	r0, r2
 800ac8a:	d007      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac90:	4290      	cmp	r0, r2
 800ac92:	d003      	beq.n	800ac9c <TIM_Base_SetConfig+0x90>
 800ac94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac98:	4290      	cmp	r0, r2
 800ac9a:	d103      	bne.n	800aca4 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aca0:	68ca      	ldr	r2, [r1, #12]
 800aca2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aca4:	694a      	ldr	r2, [r1, #20]
 800aca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acaa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800acac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acae:	688b      	ldr	r3, [r1, #8]
 800acb0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800acb2:	680b      	ldr	r3, [r1, #0]
 800acb4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acb6:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <TIM_Base_SetConfig+0xc4>)
 800acb8:	4298      	cmp	r0, r3
 800acba:	d003      	beq.n	800acc4 <TIM_Base_SetConfig+0xb8>
 800acbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acc0:	4298      	cmp	r0, r3
 800acc2:	d101      	bne.n	800acc8 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800acc4:	690b      	ldr	r3, [r1, #16]
 800acc6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800acc8:	2301      	movs	r3, #1
 800acca:	6143      	str	r3, [r0, #20]
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40014000 	.word	0x40014000

0800acd8 <HAL_TIM_Base_Init>:
{
 800acd8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800acda:	4604      	mov	r4, r0
 800acdc:	2800      	cmp	r0, #0
 800acde:	d075      	beq.n	800adcc <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ace0:	6803      	ldr	r3, [r0, #0]
 800ace2:	4a3b      	ldr	r2, [pc, #236]	; (800add0 <HAL_TIM_Base_Init+0xf8>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d037      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d034      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800acee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d030      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800acf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d02c      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800acfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d028      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d024      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d020      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad16:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01c      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad1e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d018      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d014      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d010      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad36:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00c      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d008      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d004      	beq.n	800ad58 <HAL_TIM_Base_Init+0x80>
 800ad4e:	f240 110d 	movw	r1, #269	; 0x10d
 800ad52:	4820      	ldr	r0, [pc, #128]	; (800add4 <HAL_TIM_Base_Init+0xfc>)
 800ad54:	f7f6 ff29 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	f033 0210 	bics.w	r2, r3, #16
 800ad5e:	d00a      	beq.n	800ad76 <HAL_TIM_Base_Init+0x9e>
 800ad60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ad64:	2a20      	cmp	r2, #32
 800ad66:	d006      	beq.n	800ad76 <HAL_TIM_Base_Init+0x9e>
 800ad68:	2b40      	cmp	r3, #64	; 0x40
 800ad6a:	d004      	beq.n	800ad76 <HAL_TIM_Base_Init+0x9e>
 800ad6c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800ad70:	4818      	ldr	r0, [pc, #96]	; (800add4 <HAL_TIM_Base_Init+0xfc>)
 800ad72:	f7f6 ff1a 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ad7c:	d007      	beq.n	800ad8e <HAL_TIM_Base_Init+0xb6>
 800ad7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad82:	d004      	beq.n	800ad8e <HAL_TIM_Base_Init+0xb6>
 800ad84:	f240 110f 	movw	r1, #271	; 0x10f
 800ad88:	4812      	ldr	r0, [pc, #72]	; (800add4 <HAL_TIM_Base_Init+0xfc>)
 800ad8a:	f7f6 ff0e 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ad8e:	69a3      	ldr	r3, [r4, #24]
 800ad90:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ad94:	d004      	beq.n	800ada0 <HAL_TIM_Base_Init+0xc8>
 800ad96:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ad9a:	480e      	ldr	r0, [pc, #56]	; (800add4 <HAL_TIM_Base_Init+0xfc>)
 800ad9c:	f7f6 ff05 	bl	8001baa <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ada0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ada4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ada8:	b923      	cbnz	r3, 800adb4 <HAL_TIM_Base_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800adaa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800adae:	4620      	mov	r0, r4
 800adb0:	f7f7 fa9c 	bl	80022ec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800adb4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adb6:	6820      	ldr	r0, [r4, #0]
 800adb8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800adba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adbe:	f7ff ff25 	bl	800ac0c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800adc2:	2301      	movs	r3, #1
  return HAL_OK;
 800adc4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800adc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800adca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800adcc:	2001      	movs	r0, #1
}
 800adce:	bd10      	pop	{r4, pc}
 800add0:	40010000 	.word	0x40010000
 800add4:	080347df 	.word	0x080347df

0800add8 <HAL_TIM_PWM_Init>:
{
 800add8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800adda:	4604      	mov	r4, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d075      	beq.n	800aecc <HAL_TIM_PWM_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ade0:	6803      	ldr	r3, [r0, #0]
 800ade2:	4a3b      	ldr	r2, [pc, #236]	; (800aed0 <HAL_TIM_PWM_Init+0xf8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d037      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ade8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adec:	d034      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800adee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d030      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800adf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d02c      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800adfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d028      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d024      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d020      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae16:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d01c      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae1e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d018      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d014      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d010      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae36:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d00c      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d008      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <HAL_TIM_PWM_Init+0x80>
 800ae4e:	f240 419a 	movw	r1, #1178	; 0x49a
 800ae52:	4820      	ldr	r0, [pc, #128]	; (800aed4 <HAL_TIM_PWM_Init+0xfc>)
 800ae54:	f7f6 fea9 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ae58:	68a3      	ldr	r3, [r4, #8]
 800ae5a:	f033 0210 	bics.w	r2, r3, #16
 800ae5e:	d00a      	beq.n	800ae76 <HAL_TIM_PWM_Init+0x9e>
 800ae60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae64:	2a20      	cmp	r2, #32
 800ae66:	d006      	beq.n	800ae76 <HAL_TIM_PWM_Init+0x9e>
 800ae68:	2b40      	cmp	r3, #64	; 0x40
 800ae6a:	d004      	beq.n	800ae76 <HAL_TIM_PWM_Init+0x9e>
 800ae6c:	f240 419b 	movw	r1, #1179	; 0x49b
 800ae70:	4818      	ldr	r0, [pc, #96]	; (800aed4 <HAL_TIM_PWM_Init+0xfc>)
 800ae72:	f7f6 fe9a 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ae7c:	d007      	beq.n	800ae8e <HAL_TIM_PWM_Init+0xb6>
 800ae7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae82:	d004      	beq.n	800ae8e <HAL_TIM_PWM_Init+0xb6>
 800ae84:	f240 419c 	movw	r1, #1180	; 0x49c
 800ae88:	4812      	ldr	r0, [pc, #72]	; (800aed4 <HAL_TIM_PWM_Init+0xfc>)
 800ae8a:	f7f6 fe8e 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ae8e:	69a3      	ldr	r3, [r4, #24]
 800ae90:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ae94:	d004      	beq.n	800aea0 <HAL_TIM_PWM_Init+0xc8>
 800ae96:	f240 419d 	movw	r1, #1181	; 0x49d
 800ae9a:	480e      	ldr	r0, [pc, #56]	; (800aed4 <HAL_TIM_PWM_Init+0xfc>)
 800ae9c:	f7f6 fe85 	bl	8001baa <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800aea0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800aea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aea8:	b923      	cbnz	r3, 800aeb4 <HAL_TIM_PWM_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800aeaa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7f7 fa7a 	bl	80023a8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeb6:	6820      	ldr	r0, [r4, #0]
 800aeb8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800aeba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aebe:	f7ff fea5 	bl	800ac0c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800aec2:	2301      	movs	r3, #1
  return HAL_OK;
 800aec4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800aec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800aeca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aecc:	2001      	movs	r0, #1
}
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	40010000 	.word	0x40010000
 800aed4:	080347df 	.word	0x080347df

0800aed8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed8:	6a03      	ldr	r3, [r0, #32]
 800aeda:	f023 0310 	bic.w	r3, r3, #16
{
 800aede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee2:	6203      	str	r3, [r0, #32]
{
 800aee4:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800aee6:	6a05      	ldr	r5, [r0, #32]
{
 800aee8:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800aeea:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800aeee:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800aef0:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aef4:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aefa:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aefe:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af02:	688b      	ldr	r3, [r1, #8]
 800af04:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af08:	4b1f      	ldr	r3, [pc, #124]	; (800af88 <TIM_OC2_SetConfig+0xb0>)
 800af0a:	4298      	cmp	r0, r3
 800af0c:	d003      	beq.n	800af16 <TIM_OC2_SetConfig+0x3e>
 800af0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af12:	4298      	cmp	r0, r3
 800af14:	d12f      	bne.n	800af76 <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800af16:	68f3      	ldr	r3, [r6, #12]
 800af18:	f033 0308 	bics.w	r3, r3, #8
 800af1c:	d004      	beq.n	800af28 <TIM_OC2_SetConfig+0x50>
 800af1e:	f241 71c1 	movw	r1, #6081	; 0x17c1
 800af22:	481a      	ldr	r0, [pc, #104]	; (800af8c <TIM_OC2_SetConfig+0xb4>)
 800af24:	f7f6 fe41 	bl	8001baa <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af28:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800af2a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af2e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af32:	4b15      	ldr	r3, [pc, #84]	; (800af88 <TIM_OC2_SetConfig+0xb0>)
 800af34:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800af36:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af3a:	d003      	beq.n	800af44 <TIM_OC2_SetConfig+0x6c>
 800af3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af40:	429c      	cmp	r4, r3
 800af42:	d118      	bne.n	800af76 <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800af44:	69b3      	ldr	r3, [r6, #24]
 800af46:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800af4a:	d004      	beq.n	800af56 <TIM_OC2_SetConfig+0x7e>
 800af4c:	f241 71cf 	movw	r1, #6095	; 0x17cf
 800af50:	480e      	ldr	r0, [pc, #56]	; (800af8c <TIM_OC2_SetConfig+0xb4>)
 800af52:	f7f6 fe2a 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800af56:	6973      	ldr	r3, [r6, #20]
 800af58:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800af5c:	d004      	beq.n	800af68 <TIM_OC2_SetConfig+0x90>
 800af5e:	f241 71d0 	movw	r1, #6096	; 0x17d0
 800af62:	480a      	ldr	r0, [pc, #40]	; (800af8c <TIM_OC2_SetConfig+0xb4>)
 800af64:	f7f6 fe21 	bl	8001baa <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af68:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af6a:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af6e:	69b2      	ldr	r2, [r6, #24]
 800af70:	4313      	orrs	r3, r2
 800af72:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800af76:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800af78:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800af7c:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800af7e:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800af80:	6225      	str	r5, [r4, #32]
 800af82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af86:	bf00      	nop
 800af88:	40010000 	.word	0x40010000
 800af8c:	080347df 	.word	0x080347df

0800af90 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800af90:	2a14      	cmp	r2, #20
{
 800af92:	b570      	push	{r4, r5, r6, lr}
 800af94:	4604      	mov	r4, r0
 800af96:	460d      	mov	r5, r1
 800af98:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 800af9a:	f200 8165 	bhi.w	800b268 <HAL_TIM_PWM_ConfigChannel+0x2d8>
 800af9e:	4bb5      	ldr	r3, [pc, #724]	; (800b274 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800afa0:	40d3      	lsrs	r3, r2
 800afa2:	07db      	lsls	r3, r3, #31
 800afa4:	d404      	bmi.n	800afb0 <HAL_TIM_PWM_ConfigChannel+0x20>
 800afa6:	f640 6113 	movw	r1, #3603	; 0xe13
 800afaa:	48b3      	ldr	r0, [pc, #716]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800afac:	f7f6 fdfd 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	f023 0210 	bic.w	r2, r3, #16
 800afb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afba:	f023 0310 	bic.w	r3, r3, #16
 800afbe:	2b60      	cmp	r3, #96	; 0x60
 800afc0:	d007      	beq.n	800afd2 <HAL_TIM_PWM_ConfigChannel+0x42>
 800afc2:	4bae      	ldr	r3, [pc, #696]	; (800b27c <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d004      	beq.n	800afd2 <HAL_TIM_PWM_ConfigChannel+0x42>
 800afc8:	f640 6114 	movw	r1, #3604	; 0xe14
 800afcc:	48aa      	ldr	r0, [pc, #680]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800afce:	f7f6 fdec 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800afd2:	68ab      	ldr	r3, [r5, #8]
 800afd4:	f033 0302 	bics.w	r3, r3, #2
 800afd8:	d004      	beq.n	800afe4 <HAL_TIM_PWM_ConfigChannel+0x54>
 800afda:	f640 6115 	movw	r1, #3605	; 0xe15
 800afde:	48a6      	ldr	r0, [pc, #664]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800afe0:	f7f6 fde3 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800afe4:	692b      	ldr	r3, [r5, #16]
 800afe6:	f033 0304 	bics.w	r3, r3, #4
 800afea:	d004      	beq.n	800aff6 <HAL_TIM_PWM_ConfigChannel+0x66>
 800afec:	f640 6116 	movw	r1, #3606	; 0xe16
 800aff0:	48a1      	ldr	r0, [pc, #644]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800aff2:	f7f6 fdda 	bl	8001baa <assert_failed>
  __HAL_LOCK(htim);
 800aff6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800affa:	2002      	movs	r0, #2
 800affc:	2b01      	cmp	r3, #1
 800affe:	f000 8137 	beq.w	800b270 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800b002:	2301      	movs	r3, #1
  switch (Channel)
 800b004:	2e08      	cmp	r6, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800b006:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b00a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800b00e:	f000 80bf 	beq.w	800b190 <HAL_TIM_PWM_ConfigChannel+0x200>
 800b012:	d80b      	bhi.n	800b02c <HAL_TIM_PWM_ConfigChannel+0x9c>
 800b014:	2e00      	cmp	r6, #0
 800b016:	d03f      	beq.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x108>
 800b018:	2e04      	cmp	r6, #4
 800b01a:	f000 8083 	beq.w	800b124 <HAL_TIM_PWM_ConfigChannel+0x194>
  htim->State = HAL_TIM_STATE_READY;
 800b01e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b020:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b022:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b026:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800b02a:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800b02c:	2e10      	cmp	r6, #16
 800b02e:	f000 80dd 	beq.w	800b1ec <HAL_TIM_PWM_ConfigChannel+0x25c>
 800b032:	2e14      	cmp	r6, #20
 800b034:	f000 80f9 	beq.w	800b22a <HAL_TIM_PWM_ConfigChannel+0x29a>
 800b038:	2e0c      	cmp	r6, #12
 800b03a:	d1f0      	bne.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	4a90      	ldr	r2, [pc, #576]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d017      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b048:	d014      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b04a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b04e:	4293      	cmp	r3, r2
 800b050:	d010      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b056:	4293      	cmp	r3, r2
 800b058:	d00c      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b05a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b05e:	4293      	cmp	r3, r2
 800b060:	d008      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b062:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b06a:	f640 6155 	movw	r1, #3669	; 0xe55
 800b06e:	4882      	ldr	r0, [pc, #520]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b070:	f7f6 fd9b 	bl	8001baa <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b074:	4629      	mov	r1, r5
 800b076:	6820      	ldr	r0, [r4, #0]
 800b078:	f7ff fc82 	bl	800a980 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b07c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b07e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b080:	69da      	ldr	r2, [r3, #28]
 800b082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b086:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b088:	69da      	ldr	r2, [r3, #28]
 800b08a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b090:	69da      	ldr	r2, [r3, #28]
 800b092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b096:	e0a7      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x258>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	4a79      	ldr	r2, [pc, #484]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d02f      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a4:	d02c      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d028      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d024      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d020      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d01c      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0c6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d018      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d014      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d010      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d00c      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d008      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d004      	beq.n	800b100 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b0f6:	f640 6122 	movw	r1, #3618	; 0xe22
 800b0fa:	485f      	ldr	r0, [pc, #380]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b0fc:	f7f6 fd55 	bl	8001baa <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b100:	4629      	mov	r1, r5
 800b102:	6820      	ldr	r0, [r4, #0]
 800b104:	f7ff fb8a 	bl	800a81c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b108:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b10a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b10c:	699a      	ldr	r2, [r3, #24]
 800b10e:	f042 0208 	orr.w	r2, r2, #8
 800b112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	f022 0204 	bic.w	r2, r2, #4
 800b11a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b120:	619a      	str	r2, [r3, #24]
      break;
 800b122:	e77c      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	4a56      	ldr	r2, [pc, #344]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d01f      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b130:	d01c      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b132:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b136:	4293      	cmp	r3, r2
 800b138:	d018      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b13a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b13e:	4293      	cmp	r3, r2
 800b140:	d014      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b146:	4293      	cmp	r3, r2
 800b148:	d010      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b14a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00c      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b152:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b156:	4293      	cmp	r3, r2
 800b158:	d008      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b15a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b15e:	4293      	cmp	r3, r2
 800b160:	d004      	beq.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b162:	f640 6133 	movw	r1, #3635	; 0xe33
 800b166:	4844      	ldr	r0, [pc, #272]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b168:	f7f6 fd1f 	bl	8001baa <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b16c:	4629      	mov	r1, r5
 800b16e:	6820      	ldr	r0, [r4, #0]
 800b170:	f7ff feb2 	bl	800aed8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b174:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b176:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b17e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b180:	699a      	ldr	r2, [r3, #24]
 800b182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b188:	699a      	ldr	r2, [r3, #24]
 800b18a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b18e:	e7c7      	b.n	800b120 <HAL_TIM_PWM_ConfigChannel+0x190>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	4a3b      	ldr	r2, [pc, #236]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d017      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b19c:	d014      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b19e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d010      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b1a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00c      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b1ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d008      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b1b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <HAL_TIM_PWM_ConfigChannel+0x238>
 800b1be:	f640 6144 	movw	r1, #3652	; 0xe44
 800b1c2:	482d      	ldr	r0, [pc, #180]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b1c4:	f7f6 fcf1 	bl	8001baa <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	6820      	ldr	r0, [r4, #0]
 800b1cc:	f7ff fb7e 	bl	800a8cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1d2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1d4:	69da      	ldr	r2, [r3, #28]
 800b1d6:	f042 0208 	orr.w	r2, r2, #8
 800b1da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1dc:	69da      	ldr	r2, [r3, #28]
 800b1de:	f022 0204 	bic.w	r2, r2, #4
 800b1e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1e4:	69da      	ldr	r2, [r3, #28]
 800b1e6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1e8:	61da      	str	r2, [r3, #28]
      break;
 800b1ea:	e718      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	4a24      	ldr	r2, [pc, #144]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d008      	beq.n	800b206 <HAL_TIM_PWM_ConfigChannel+0x276>
 800b1f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d004      	beq.n	800b206 <HAL_TIM_PWM_ConfigChannel+0x276>
 800b1fc:	f640 6166 	movw	r1, #3686	; 0xe66
 800b200:	481d      	ldr	r0, [pc, #116]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b202:	f7f6 fcd2 	bl	8001baa <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b206:	4629      	mov	r1, r5
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	f7ff fab7 	bl	800a77c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b20e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b210:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b212:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b214:	f042 0208 	orr.w	r2, r2, #8
 800b218:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b21a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b21c:	f022 0204 	bic.w	r2, r2, #4
 800b220:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b222:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b224:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b226:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b228:	e6f9      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	4a14      	ldr	r2, [pc, #80]	; (800b280 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d008      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800b232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b236:	4293      	cmp	r3, r2
 800b238:	d004      	beq.n	800b244 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800b23a:	f640 6177 	movw	r1, #3703	; 0xe77
 800b23e:	480e      	ldr	r0, [pc, #56]	; (800b278 <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b240:	f7f6 fcb3 	bl	8001baa <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b244:	4629      	mov	r1, r5
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	f7ff fac0 	bl	800a7cc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b24c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b24e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b25a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b25e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b262:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b266:	e7de      	b.n	800b226 <HAL_TIM_PWM_ConfigChannel+0x296>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b268:	2a3c      	cmp	r2, #60	; 0x3c
 800b26a:	f47f ae9c 	bne.w	800afa6 <HAL_TIM_PWM_ConfigChannel+0x16>
 800b26e:	e69f      	b.n	800afb0 <HAL_TIM_PWM_ConfigChannel+0x20>
}
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	bf00      	nop
 800b274:	00111111 	.word	0x00111111
 800b278:	080347df 	.word	0x080347df
 800b27c:	00010040 	.word	0x00010040
 800b280:	40010000 	.word	0x40010000

0800b284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b284:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b286:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800b288:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b28a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b28e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b292:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b294:	6083      	str	r3, [r0, #8]
 800b296:	bd10      	pop	{r4, pc}

0800b298 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b298:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b29c:	2b01      	cmp	r3, #1
{
 800b29e:	b570      	push	{r4, r5, r6, lr}
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800b2a8:	d029      	beq.n	800b2fe <HAL_TIM_ConfigClockSource+0x66>
 800b2aa:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b2ac:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b2b0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b2b4:	680b      	ldr	r3, [r1, #0]
 800b2b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ba:	d00c      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x3e>
 800b2bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c0:	d009      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x3e>
 800b2c2:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b2c6:	d006      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x3e>
 800b2c8:	2b40      	cmp	r3, #64	; 0x40
 800b2ca:	d004      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x3e>
 800b2cc:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800b2d0:	48bb      	ldr	r0, [pc, #748]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b2d2:	f7f6 fc6a 	bl	8001baa <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 800b2d6:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2d8:	4aba      	ldr	r2, [pc, #744]	; (800b5c4 <HAL_TIM_ConfigClockSource+0x32c>)
  tmpsmcr = htim->Instance->SMCR;
 800b2da:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2dc:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800b2de:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	2a40      	cmp	r2, #64	; 0x40
 800b2e4:	f000 81bc 	beq.w	800b660 <HAL_TIM_ConfigClockSource+0x3c8>
 800b2e8:	d833      	bhi.n	800b352 <HAL_TIM_ConfigClockSource+0xba>
 800b2ea:	2a10      	cmp	r2, #16
 800b2ec:	d00c      	beq.n	800b308 <HAL_TIM_ConfigClockSource+0x70>
 800b2ee:	d807      	bhi.n	800b300 <HAL_TIM_ConfigClockSource+0x68>
 800b2f0:	b152      	cbz	r2, 800b308 <HAL_TIM_ConfigClockSource+0x70>
  htim->State = HAL_TIM_STATE_READY;
 800b2f2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b2f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b2f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b2fa:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800b300:	2a20      	cmp	r2, #32
 800b302:	d001      	beq.n	800b308 <HAL_TIM_ConfigClockSource+0x70>
 800b304:	2a30      	cmp	r2, #48	; 0x30
 800b306:	d1f4      	bne.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b308:	4aaf      	ldr	r2, [pc, #700]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x330>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d017      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b312:	d014      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b314:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b318:	4293      	cmp	r3, r2
 800b31a:	d010      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b31c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b320:	4293      	cmp	r3, r2
 800b322:	d00c      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b328:	4293      	cmp	r3, r2
 800b32a:	d008      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b32c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b330:	4293      	cmp	r3, r2
 800b332:	d004      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0xa6>
 800b334:	f241 2168 	movw	r1, #4712	; 0x1268
 800b338:	48a1      	ldr	r0, [pc, #644]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b33a:	f7f6 fc36 	bl	8001baa <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b33e:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b340:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800b342:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b344:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800b348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b34c:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800b34e:	608b      	str	r3, [r1, #8]
 800b350:	e7cf      	b.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b352:	2a70      	cmp	r2, #112	; 0x70
 800b354:	f000 80e6 	beq.w	800b524 <HAL_TIM_ConfigClockSource+0x28c>
 800b358:	d84e      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x160>
 800b35a:	2a50      	cmp	r2, #80	; 0x50
 800b35c:	f000 8136 	beq.w	800b5cc <HAL_TIM_ConfigClockSource+0x334>
 800b360:	2a60      	cmp	r2, #96	; 0x60
 800b362:	d1c6      	bne.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b364:	4a98      	ldr	r2, [pc, #608]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x330>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d017      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36e:	d014      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b370:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b374:	4293      	cmp	r3, r2
 800b376:	d010      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b378:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00c      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b380:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b384:	4293      	cmp	r3, r2
 800b386:	d008      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b388:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d004      	beq.n	800b39a <HAL_TIM_ConfigClockSource+0x102>
 800b390:	f241 2145 	movw	r1, #4677	; 0x1245
 800b394:	488a      	ldr	r0, [pc, #552]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b396:	f7f6 fc08 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3a0:	d009      	beq.n	800b3b6 <HAL_TIM_ConfigClockSource+0x11e>
 800b3a2:	f033 0202 	bics.w	r2, r3, #2
 800b3a6:	d006      	beq.n	800b3b6 <HAL_TIM_ConfigClockSource+0x11e>
 800b3a8:	2b0a      	cmp	r3, #10
 800b3aa:	d004      	beq.n	800b3b6 <HAL_TIM_ConfigClockSource+0x11e>
 800b3ac:	f241 2148 	movw	r1, #4680	; 0x1248
 800b3b0:	4883      	ldr	r0, [pc, #524]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b3b2:	f7f6 fbfa 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	2b0f      	cmp	r3, #15
 800b3ba:	d904      	bls.n	800b3c6 <HAL_TIM_ConfigClockSource+0x12e>
 800b3bc:	f241 2149 	movw	r1, #4681	; 0x1249
 800b3c0:	487f      	ldr	r0, [pc, #508]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b3c2:	f7f6 fbf2 	bl	8001baa <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3ca:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3cc:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3ce:	f020 0010 	bic.w	r0, r0, #16
 800b3d2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3d4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3d8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3e0:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3e4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b3e8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3ea:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b3ec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3f2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800b3f6:	e131      	b.n	800b65c <HAL_TIM_ConfigClockSource+0x3c4>
  switch (sClockSourceConfig->ClockSource)
 800b3f8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b3fc:	d048      	beq.n	800b490 <HAL_TIM_ConfigClockSource+0x1f8>
 800b3fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b402:	f47f af76 	bne.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b406:	4a70      	ldr	r2, [pc, #448]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x330>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d017      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b40c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b410:	d014      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b412:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b416:	4293      	cmp	r3, r2
 800b418:	d010      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b41a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00c      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b426:	4293      	cmp	r3, r2
 800b428:	d008      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b42a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <HAL_TIM_ConfigClockSource+0x1a4>
 800b432:	f241 2121 	movw	r1, #4641	; 0x1221
 800b436:	4862      	ldr	r0, [pc, #392]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b438:	f7f6 fbb7 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b43c:	68a3      	ldr	r3, [r4, #8]
 800b43e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b442:	d004      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x1b6>
 800b444:	f241 2124 	movw	r1, #4644	; 0x1224
 800b448:	485d      	ldr	r0, [pc, #372]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b44a:	f7f6 fbae 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b44e:	6863      	ldr	r3, [r4, #4]
 800b450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b454:	d009      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x1d2>
 800b456:	f033 0202 	bics.w	r2, r3, #2
 800b45a:	d006      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x1d2>
 800b45c:	2b0a      	cmp	r3, #10
 800b45e:	d004      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x1d2>
 800b460:	f241 2125 	movw	r1, #4645	; 0x1225
 800b464:	4856      	ldr	r0, [pc, #344]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b466:	f7f6 fba0 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b46a:	68e3      	ldr	r3, [r4, #12]
 800b46c:	2b0f      	cmp	r3, #15
 800b46e:	d904      	bls.n	800b47a <HAL_TIM_ConfigClockSource+0x1e2>
 800b470:	f241 2126 	movw	r1, #4646	; 0x1226
 800b474:	4852      	ldr	r0, [pc, #328]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b476:	f7f6 fb98 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b47a:	68e3      	ldr	r3, [r4, #12]
 800b47c:	6862      	ldr	r2, [r4, #4]
 800b47e:	68a1      	ldr	r1, [r4, #8]
 800b480:	6828      	ldr	r0, [r5, #0]
 800b482:	f7ff feff 	bl	800b284 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b486:	682a      	ldr	r2, [r5, #0]
 800b488:	6893      	ldr	r3, [r2, #8]
 800b48a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b48e:	e095      	b.n	800b5bc <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b490:	4a4d      	ldr	r2, [pc, #308]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x330>)
 800b492:	4293      	cmp	r3, r2
 800b494:	f43f af2d 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49c:	f43f af29 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	f43f af24 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	f43f af1f 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	f43f af1a 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	f43f af15 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	f43f af10 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4d2:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	f43f af0b 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4dc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	f43f af06 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	f43f af01 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	f43f aefc 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b4fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b4fe:	4293      	cmp	r3, r2
 800b500:	f43f aef7 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b508:	4293      	cmp	r3, r2
 800b50a:	f43f aef2 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b50e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b512:	4293      	cmp	r3, r2
 800b514:	f43f aeed 	beq.w	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b518:	f241 2102 	movw	r1, #4610	; 0x1202
 800b51c:	4828      	ldr	r0, [pc, #160]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b51e:	f7f6 fb44 	bl	8001baa <assert_failed>
 800b522:	e6e6      	b.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b524:	4a28      	ldr	r2, [pc, #160]	; (800b5c8 <HAL_TIM_ConfigClockSource+0x330>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d01f      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b52e:	d01c      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b530:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b534:	4293      	cmp	r3, r2
 800b536:	d018      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d014      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b544:	4293      	cmp	r3, r2
 800b546:	d010      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b548:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d00c      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b550:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b554:	4293      	cmp	r3, r2
 800b556:	d008      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b558:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d004      	beq.n	800b56a <HAL_TIM_ConfigClockSource+0x2d2>
 800b560:	f241 2109 	movw	r1, #4617	; 0x1209
 800b564:	4816      	ldr	r0, [pc, #88]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b566:	f7f6 fb20 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b570:	d004      	beq.n	800b57c <HAL_TIM_ConfigClockSource+0x2e4>
 800b572:	f241 210c 	movw	r1, #4620	; 0x120c
 800b576:	4812      	ldr	r0, [pc, #72]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b578:	f7f6 fb17 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b582:	d009      	beq.n	800b598 <HAL_TIM_ConfigClockSource+0x300>
 800b584:	f033 0202 	bics.w	r2, r3, #2
 800b588:	d006      	beq.n	800b598 <HAL_TIM_ConfigClockSource+0x300>
 800b58a:	2b0a      	cmp	r3, #10
 800b58c:	d004      	beq.n	800b598 <HAL_TIM_ConfigClockSource+0x300>
 800b58e:	f241 210d 	movw	r1, #4621	; 0x120d
 800b592:	480b      	ldr	r0, [pc, #44]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b594:	f7f6 fb09 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b598:	68e3      	ldr	r3, [r4, #12]
 800b59a:	2b0f      	cmp	r3, #15
 800b59c:	d904      	bls.n	800b5a8 <HAL_TIM_ConfigClockSource+0x310>
 800b59e:	f241 210e 	movw	r1, #4622	; 0x120e
 800b5a2:	4807      	ldr	r0, [pc, #28]	; (800b5c0 <HAL_TIM_ConfigClockSource+0x328>)
 800b5a4:	f7f6 fb01 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b5a8:	68e3      	ldr	r3, [r4, #12]
 800b5aa:	6862      	ldr	r2, [r4, #4]
 800b5ac:	68a1      	ldr	r1, [r4, #8]
 800b5ae:	6828      	ldr	r0, [r5, #0]
 800b5b0:	f7ff fe68 	bl	800b284 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b5b4:	682a      	ldr	r2, [r5, #0]
 800b5b6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5bc:	6093      	str	r3, [r2, #8]
      break;
 800b5be:	e698      	b.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
 800b5c0:	080347df 	.word	0x080347df
 800b5c4:	fffe0088 	.word	0xfffe0088
 800b5c8:	40010000 	.word	0x40010000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b5cc:	4a49      	ldr	r2, [pc, #292]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x45c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d017      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d6:	d014      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5d8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d010      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d00c      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d008      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5f0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d004      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0x36a>
 800b5f8:	f241 2135 	movw	r1, #4661	; 0x1235
 800b5fc:	483e      	ldr	r0, [pc, #248]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b5fe:	f7f6 fad4 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b608:	d009      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x386>
 800b60a:	f033 0202 	bics.w	r2, r3, #2
 800b60e:	d006      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x386>
 800b610:	2b0a      	cmp	r3, #10
 800b612:	d004      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x386>
 800b614:	f241 2138 	movw	r1, #4664	; 0x1238
 800b618:	4837      	ldr	r0, [pc, #220]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b61a:	f7f6 fac6 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b61e:	68e3      	ldr	r3, [r4, #12]
 800b620:	2b0f      	cmp	r3, #15
 800b622:	d904      	bls.n	800b62e <HAL_TIM_ConfigClockSource+0x396>
 800b624:	f241 2139 	movw	r1, #4665	; 0x1239
 800b628:	4833      	ldr	r0, [pc, #204]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b62a:	f7f6 fabe 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b62e:	682b      	ldr	r3, [r5, #0]
 800b630:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800b632:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b634:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b636:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b638:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b63c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b640:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b642:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b644:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b646:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b64a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b64e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b650:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b652:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b654:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b658:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800b65c:	609a      	str	r2, [r3, #8]
 800b65e:	e648      	b.n	800b2f2 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b660:	4a24      	ldr	r2, [pc, #144]	; (800b6f4 <HAL_TIM_ConfigClockSource+0x45c>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d017      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b66a:	d014      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b66c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b670:	4293      	cmp	r3, r2
 800b672:	d010      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b674:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b678:	4293      	cmp	r3, r2
 800b67a:	d00c      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b67c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b680:	4293      	cmp	r3, r2
 800b682:	d008      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b684:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b688:	4293      	cmp	r3, r2
 800b68a:	d004      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0x3fe>
 800b68c:	f241 2155 	movw	r1, #4693	; 0x1255
 800b690:	4819      	ldr	r0, [pc, #100]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b692:	f7f6 fa8a 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b696:	6863      	ldr	r3, [r4, #4]
 800b698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b69c:	d009      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x41a>
 800b69e:	f033 0202 	bics.w	r2, r3, #2
 800b6a2:	d006      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x41a>
 800b6a4:	2b0a      	cmp	r3, #10
 800b6a6:	d004      	beq.n	800b6b2 <HAL_TIM_ConfigClockSource+0x41a>
 800b6a8:	f241 2158 	movw	r1, #4696	; 0x1258
 800b6ac:	4812      	ldr	r0, [pc, #72]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b6ae:	f7f6 fa7c 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	2b0f      	cmp	r3, #15
 800b6b6:	d904      	bls.n	800b6c2 <HAL_TIM_ConfigClockSource+0x42a>
 800b6b8:	f241 2159 	movw	r1, #4697	; 0x1259
 800b6bc:	480e      	ldr	r0, [pc, #56]	; (800b6f8 <HAL_TIM_ConfigClockSource+0x460>)
 800b6be:	f7f6 fa74 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800b6c6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6c8:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ca:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6cc:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6d0:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b6d4:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6d6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6d8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b6e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6e4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b6e6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6ec:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800b6f0:	e7b4      	b.n	800b65c <HAL_TIM_ConfigClockSource+0x3c4>
 800b6f2:	bf00      	nop
 800b6f4:	40010000 	.word	0x40010000
 800b6f8:	080347df 	.word	0x080347df

0800b6fc <TIM_SlaveTimer_SetConfig>:
{
 800b6fc:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800b6fe:	6803      	ldr	r3, [r0, #0]
{
 800b700:	460c      	mov	r4, r1
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b702:	6849      	ldr	r1, [r1, #4]
{
 800b704:	4605      	mov	r5, r0
  tmpsmcr = htim->Instance->SMCR;
 800b706:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b708:	6820      	ldr	r0, [r4, #0]
  switch (sSlaveConfig->InputTrigger)
 800b70a:	2930      	cmp	r1, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800b70c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b710:	ea42 0201 	orr.w	r2, r2, r1
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b714:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b718:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b71c:	ea42 0200 	orr.w	r2, r2, r0
  htim->Instance->SMCR = tmpsmcr;
 800b720:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800b722:	d005      	beq.n	800b730 <TIM_SlaveTimer_SetConfig+0x34>
 800b724:	d828      	bhi.n	800b778 <TIM_SlaveTimer_SetConfig+0x7c>
 800b726:	2910      	cmp	r1, #16
 800b728:	d002      	beq.n	800b730 <TIM_SlaveTimer_SetConfig+0x34>
 800b72a:	2920      	cmp	r1, #32
 800b72c:	d000      	beq.n	800b730 <TIM_SlaveTimer_SetConfig+0x34>
 800b72e:	bb49      	cbnz	r1, 800b784 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b730:	4ab8      	ldr	r2, [pc, #736]	; (800ba14 <TIM_SlaveTimer_SetConfig+0x318>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d026      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73a:	d023      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b73c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b740:	4293      	cmp	r3, r2
 800b742:	d01f      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b748:	4293      	cmp	r3, r2
 800b74a:	d01b      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b74c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b750:	4293      	cmp	r3, r2
 800b752:	d017      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b754:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b758:	4293      	cmp	r3, r2
 800b75a:	d013      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b75c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b760:	4293      	cmp	r3, r2
 800b762:	d00f      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b764:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b768:	4293      	cmp	r3, r2
 800b76a:	d00b      	beq.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
 800b76c:	f641 1144 	movw	r1, #6468	; 0x1944
 800b770:	48a9      	ldr	r0, [pc, #676]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b772:	f7f6 fa1a 	bl	8001baa <assert_failed>
 800b776:	e005      	b.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800b778:	2950      	cmp	r1, #80	; 0x50
 800b77a:	f000 80a1 	beq.w	800b8c0 <TIM_SlaveTimer_SetConfig+0x1c4>
 800b77e:	d803      	bhi.n	800b788 <TIM_SlaveTimer_SetConfig+0x8c>
 800b780:	2940      	cmp	r1, #64	; 0x40
 800b782:	d04f      	beq.n	800b824 <TIM_SlaveTimer_SetConfig+0x128>
  return HAL_OK;
 800b784:	2000      	movs	r0, #0
}
 800b786:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800b788:	2960      	cmp	r1, #96	; 0x60
 800b78a:	f000 80f3 	beq.w	800b974 <TIM_SlaveTimer_SetConfig+0x278>
 800b78e:	2970      	cmp	r1, #112	; 0x70
 800b790:	d1f8      	bne.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b792:	4aa0      	ldr	r2, [pc, #640]	; (800ba14 <TIM_SlaveTimer_SetConfig+0x318>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d01f      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b79c:	d01c      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b79e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d018      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d014      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d010      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d00c      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7be:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d008      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <TIM_SlaveTimer_SetConfig+0xdc>
 800b7ce:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800b7d2:	4891      	ldr	r0, [pc, #580]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b7d4:	f7f6 f9e9 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800b7d8:	68e3      	ldr	r3, [r4, #12]
 800b7da:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b7de:	d004      	beq.n	800b7ea <TIM_SlaveTimer_SetConfig+0xee>
 800b7e0:	f641 01fd 	movw	r1, #6397	; 0x18fd
 800b7e4:	488c      	ldr	r0, [pc, #560]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b7e6:	f7f6 f9e0 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7f0:	d009      	beq.n	800b806 <TIM_SlaveTimer_SetConfig+0x10a>
 800b7f2:	f033 0202 	bics.w	r2, r3, #2
 800b7f6:	d006      	beq.n	800b806 <TIM_SlaveTimer_SetConfig+0x10a>
 800b7f8:	2b0a      	cmp	r3, #10
 800b7fa:	d004      	beq.n	800b806 <TIM_SlaveTimer_SetConfig+0x10a>
 800b7fc:	f641 01fe 	movw	r1, #6398	; 0x18fe
 800b800:	4885      	ldr	r0, [pc, #532]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b802:	f7f6 f9d2 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	2b0f      	cmp	r3, #15
 800b80a:	d904      	bls.n	800b816 <TIM_SlaveTimer_SetConfig+0x11a>
 800b80c:	f641 01ff 	movw	r1, #6399	; 0x18ff
 800b810:	4881      	ldr	r0, [pc, #516]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b812:	f7f6 f9ca 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	68a2      	ldr	r2, [r4, #8]
 800b81a:	68e1      	ldr	r1, [r4, #12]
 800b81c:	6828      	ldr	r0, [r5, #0]
 800b81e:	f7ff fd31 	bl	800b284 <TIM_ETR_SetConfig>
 800b822:	e7af      	b.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b824:	4a7b      	ldr	r2, [pc, #492]	; (800ba14 <TIM_SlaveTimer_SetConfig+0x318>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d02f      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82e:	d02c      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b830:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b834:	4293      	cmp	r3, r2
 800b836:	d028      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d024      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b844:	4293      	cmp	r3, r2
 800b846:	d020      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b848:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d01c      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b850:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b854:	4293      	cmp	r3, r2
 800b856:	d018      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d014      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b860:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b864:	4293      	cmp	r3, r2
 800b866:	d010      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b868:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00c      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b870:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b874:	4293      	cmp	r3, r2
 800b876:	d008      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d004      	beq.n	800b88a <TIM_SlaveTimer_SetConfig+0x18e>
 800b880:	f641 110b 	movw	r1, #6411	; 0x190b
 800b884:	4864      	ldr	r0, [pc, #400]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b886:	f7f6 f990 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	2b0f      	cmp	r3, #15
 800b88e:	d904      	bls.n	800b89a <TIM_SlaveTimer_SetConfig+0x19e>
 800b890:	f641 110c 	movw	r1, #6412	; 0x190c
 800b894:	4860      	ldr	r0, [pc, #384]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b896:	f7f6 f988 	bl	8001baa <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	2b05      	cmp	r3, #5
 800b89e:	f000 80b6 	beq.w	800ba0e <TIM_SlaveTimer_SetConfig+0x312>
      tmpccer = htim->Instance->CCER;
 800b8a2:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b8a4:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800b8a6:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b8a8:	6a1a      	ldr	r2, [r3, #32]
 800b8aa:	f022 0201 	bic.w	r2, r2, #1
 800b8ae:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b8b0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b8b6:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b8ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8bc:	6219      	str	r1, [r3, #32]
 800b8be:	e761      	b.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b8c0:	4a54      	ldr	r2, [pc, #336]	; (800ba14 <TIM_SlaveTimer_SetConfig+0x318>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d02f      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ca:	d02c      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d028      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d024      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d020      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8e4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d01c      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8ec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d018      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d014      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b8fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b900:	4293      	cmp	r3, r2
 800b902:	d010      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b904:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b908:	4293      	cmp	r3, r2
 800b90a:	d00c      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b90c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b910:	4293      	cmp	r3, r2
 800b912:	d008      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b918:	4293      	cmp	r3, r2
 800b91a:	d004      	beq.n	800b926 <TIM_SlaveTimer_SetConfig+0x22a>
 800b91c:	f641 1125 	movw	r1, #6437	; 0x1925
 800b920:	483d      	ldr	r0, [pc, #244]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b922:	f7f6 f942 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b92c:	d009      	beq.n	800b942 <TIM_SlaveTimer_SetConfig+0x246>
 800b92e:	f033 0202 	bics.w	r2, r3, #2
 800b932:	d006      	beq.n	800b942 <TIM_SlaveTimer_SetConfig+0x246>
 800b934:	2b0a      	cmp	r3, #10
 800b936:	d004      	beq.n	800b942 <TIM_SlaveTimer_SetConfig+0x246>
 800b938:	f641 1126 	movw	r1, #6438	; 0x1926
 800b93c:	4836      	ldr	r0, [pc, #216]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b93e:	f7f6 f934 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	2b0f      	cmp	r3, #15
 800b946:	d904      	bls.n	800b952 <TIM_SlaveTimer_SetConfig+0x256>
 800b948:	f641 1127 	movw	r1, #6439	; 0x1927
 800b94c:	4832      	ldr	r0, [pc, #200]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b94e:	f7f6 f92c 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b952:	682b      	ldr	r3, [r5, #0]
 800b954:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800b956:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b958:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b95a:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b95c:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b960:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b964:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b966:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b968:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b96a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b96e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800b972:	e7a2      	b.n	800b8ba <TIM_SlaveTimer_SetConfig+0x1be>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b974:	4a27      	ldr	r2, [pc, #156]	; (800ba14 <TIM_SlaveTimer_SetConfig+0x318>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d01f      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97e:	d01c      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b980:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b984:	4293      	cmp	r3, r2
 800b986:	d018      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d014      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b994:	4293      	cmp	r3, r2
 800b996:	d010      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b998:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d00c      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b9a0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d008      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b9a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d004      	beq.n	800b9ba <TIM_SlaveTimer_SetConfig+0x2be>
 800b9b0:	f641 1133 	movw	r1, #6451	; 0x1933
 800b9b4:	4818      	ldr	r0, [pc, #96]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b9b6:	f7f6 f8f8 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b9ba:	68a3      	ldr	r3, [r4, #8]
 800b9bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9c0:	d009      	beq.n	800b9d6 <TIM_SlaveTimer_SetConfig+0x2da>
 800b9c2:	f033 0202 	bics.w	r2, r3, #2
 800b9c6:	d006      	beq.n	800b9d6 <TIM_SlaveTimer_SetConfig+0x2da>
 800b9c8:	2b0a      	cmp	r3, #10
 800b9ca:	d004      	beq.n	800b9d6 <TIM_SlaveTimer_SetConfig+0x2da>
 800b9cc:	f641 1134 	movw	r1, #6452	; 0x1934
 800b9d0:	4811      	ldr	r0, [pc, #68]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b9d2:	f7f6 f8ea 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b9d6:	6923      	ldr	r3, [r4, #16]
 800b9d8:	2b0f      	cmp	r3, #15
 800b9da:	d904      	bls.n	800b9e6 <TIM_SlaveTimer_SetConfig+0x2ea>
 800b9dc:	f641 1135 	movw	r1, #6453	; 0x1935
 800b9e0:	480d      	ldr	r0, [pc, #52]	; (800ba18 <TIM_SlaveTimer_SetConfig+0x31c>)
 800b9e2:	f7f6 f8e2 	bl	8001baa <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9e6:	682b      	ldr	r3, [r5, #0]
 800b9e8:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ea:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ec:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ee:	f020 0010 	bic.w	r0, r0, #16
 800b9f2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9f4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b9f6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9f8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba00:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba04:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ba08:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba0a:	621a      	str	r2, [r3, #32]
 800ba0c:	e6ba      	b.n	800b784 <TIM_SlaveTimer_SetConfig+0x88>
        return HAL_ERROR;
 800ba0e:	2001      	movs	r0, #1
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	bf00      	nop
 800ba14:	40010000 	.word	0x40010000
 800ba18:	080347df 	.word	0x080347df

0800ba1c <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ba1c:	6803      	ldr	r3, [r0, #0]
 800ba1e:	4a30      	ldr	r2, [pc, #192]	; (800bae0 <HAL_TIM_SlaveConfigSynchro+0xc4>)
 800ba20:	4293      	cmp	r3, r2
{
 800ba22:	b570      	push	{r4, r5, r6, lr}
 800ba24:	4604      	mov	r4, r0
 800ba26:	460e      	mov	r6, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ba28:	d01f      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba2e:	d01c      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba30:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d018      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d014      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d010      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba48:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d00c      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba50:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d008      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d004      	beq.n	800ba6a <HAL_TIM_SlaveConfigSynchro+0x4e>
 800ba60:	f241 21a7 	movw	r1, #4775	; 0x12a7
 800ba64:	481f      	ldr	r0, [pc, #124]	; (800bae4 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800ba66:	f7f6 f8a0 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800ba6a:	6833      	ldr	r3, [r6, #0]
 800ba6c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800ba70:	d007      	beq.n	800ba82 <HAL_TIM_SlaveConfigSynchro+0x66>
 800ba72:	3b04      	subs	r3, #4
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d904      	bls.n	800ba82 <HAL_TIM_SlaveConfigSynchro+0x66>
 800ba78:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800ba7c:	4819      	ldr	r0, [pc, #100]	; (800bae4 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800ba7e:	f7f6 f894 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ba82:	6873      	ldr	r3, [r6, #4]
 800ba84:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800ba88:	d006      	beq.n	800ba98 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ba8a:	2b40      	cmp	r3, #64	; 0x40
 800ba8c:	d004      	beq.n	800ba98 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ba8e:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800ba92:	4814      	ldr	r0, [pc, #80]	; (800bae4 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800ba94:	f7f6 f889 	bl	8001baa <assert_failed>
  __HAL_LOCK(htim);
 800ba98:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ba9c:	2002      	movs	r0, #2
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d01d      	beq.n	800bade <HAL_TIM_SlaveConfigSynchro+0xc2>
 800baa2:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800baa4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800baa8:	4631      	mov	r1, r6
 800baaa:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800baac:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bab0:	f7ff fe24 	bl	800b6fc <TIM_SlaveTimer_SetConfig>
 800bab4:	b130      	cbz	r0, 800bac4 <HAL_TIM_SlaveConfigSynchro+0xa8>
    __HAL_UNLOCK(htim);
 800bab6:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 800bab8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800babc:	4628      	mov	r0, r5
    __HAL_UNLOCK(htim);
 800babe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bacc:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bad4:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bad6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bada:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	40010000 	.word	0x40010000
 800bae4:	080347df 	.word	0x080347df

0800bae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800baea:	4a3b      	ldr	r2, [pc, #236]	; (800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
{
 800baec:	4605      	mov	r5, r0
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800baee:	6803      	ldr	r3, [r0, #0]
{
 800baf0:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d01f      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800baf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bafa:	d01c      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bafc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d018      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d014      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d010      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d00c      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d008      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb24:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d004      	beq.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bb2c:	f240 6163 	movw	r1, #1635	; 0x663
 800bb30:	482a      	ldr	r0, [pc, #168]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb32:	f7f6 f83a 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800bb36:	6833      	ldr	r3, [r6, #0]
 800bb38:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bb3c:	d006      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bb3e:	2b40      	cmp	r3, #64	; 0x40
 800bb40:	d004      	beq.n	800bb4c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bb42:	f240 6164 	movw	r1, #1636	; 0x664
 800bb46:	4825      	ldr	r0, [pc, #148]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb48:	f7f6 f82f 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800bb4c:	68b3      	ldr	r3, [r6, #8]
 800bb4e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bb52:	d004      	beq.n	800bb5e <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800bb54:	f240 6165 	movw	r1, #1637	; 0x665
 800bb58:	4820      	ldr	r0, [pc, #128]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb5a:	f7f6 f826 	bl	8001baa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bb5e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800bb62:	2002      	movs	r0, #2
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d035      	beq.n	800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>
 800bb68:	2301      	movs	r3, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb6a:	4a1b      	ldr	r2, [pc, #108]	; (800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800bb70:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 800bb74:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb76:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800bb78:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bb7a:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb7c:	d003      	beq.n	800bb86 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800bb7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d115      	bne.n	800bbb2 <HAL_TIMEx_MasterConfigSynchronization+0xca>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800bb86:	6873      	ldr	r3, [r6, #4]
 800bb88:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 800bb8c:	d00d      	beq.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bb8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb92:	d00a      	beq.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bb94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb98:	d007      	beq.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bb9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bb9e:	d004      	beq.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bba0:	f240 6177 	movw	r1, #1655	; 0x677
 800bba4:	480d      	ldr	r0, [pc, #52]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bba6:	f7f6 f800 	bl	8001baa <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbaa:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bbae:	6873      	ldr	r3, [r6, #4]
 800bbb0:	431c      	orrs	r4, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbb2:	6833      	ldr	r3, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbb4:	f024 0470 	bic.w	r4, r4, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800bbb8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bbbc:	2000      	movs	r0, #0
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbbe:	431c      	orrs	r4, r3
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbc0:	68b3      	ldr	r3, [r6, #8]
 800bbc2:	431f      	orrs	r7, r3
  htim->Instance->CR2 = tmpcr2;
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	605c      	str	r4, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800bbc8:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800bbca:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800bbcc:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800bbd0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d

  return HAL_OK;
}
 800bbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	40010000 	.word	0x40010000
 800bbdc:	0803481d 	.word	0x0803481d

0800bbe0 <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bbe0:	6803      	ldr	r3, [r0, #0]
 800bbe2:	4a58      	ldr	r2, [pc, #352]	; (800bd44 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 800bbe4:	4293      	cmp	r3, r2
{
 800bbe6:	b570      	push	{r4, r5, r6, lr}
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460e      	mov	r6, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bbec:	d008      	beq.n	800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800bbee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d004      	beq.n	800bc00 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800bbf6:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800bbfa:	4853      	ldr	r0, [pc, #332]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bbfc:	f7f5 ffd5 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800bc00:	6833      	ldr	r3, [r6, #0]
 800bc02:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bc06:	d004      	beq.n	800bc12 <HAL_TIMEx_ConfigBreakDeadTime+0x32>
 800bc08:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800bc0c:	484e      	ldr	r0, [pc, #312]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc0e:	f7f5 ffcc 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800bc12:	6873      	ldr	r3, [r6, #4]
 800bc14:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bc18:	d004      	beq.n	800bc24 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800bc1a:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800bc1e:	484a      	ldr	r0, [pc, #296]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc20:	f7f5 ffc3 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800bc24:	68b3      	ldr	r3, [r6, #8]
 800bc26:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800bc2a:	d004      	beq.n	800bc36 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800bc2c:	f240 61a9 	movw	r1, #1705	; 0x6a9
 800bc30:	4845      	ldr	r0, [pc, #276]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc32:	f7f5 ffba 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800bc36:	68f3      	ldr	r3, [r6, #12]
 800bc38:	2bff      	cmp	r3, #255	; 0xff
 800bc3a:	d904      	bls.n	800bc46 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800bc3c:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800bc40:	4841      	ldr	r0, [pc, #260]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc42:	f7f5 ffb2 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800bc46:	6933      	ldr	r3, [r6, #16]
 800bc48:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bc4c:	d004      	beq.n	800bc58 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 800bc4e:	f240 61ab 	movw	r1, #1707	; 0x6ab
 800bc52:	483d      	ldr	r0, [pc, #244]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc54:	f7f5 ffa9 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800bc58:	6973      	ldr	r3, [r6, #20]
 800bc5a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bc5e:	d004      	beq.n	800bc6a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800bc60:	f240 61ac 	movw	r1, #1708	; 0x6ac
 800bc64:	4838      	ldr	r0, [pc, #224]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc66:	f7f5 ffa0 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800bc6a:	69b3      	ldr	r3, [r6, #24]
 800bc6c:	2b0f      	cmp	r3, #15
 800bc6e:	d904      	bls.n	800bc7a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800bc70:	f240 61ad 	movw	r1, #1709	; 0x6ad
 800bc74:	4834      	ldr	r0, [pc, #208]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc76:	f7f5 ff98 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800bc7a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800bc7c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bc80:	d004      	beq.n	800bc8c <HAL_TIMEx_ConfigBreakDeadTime+0xac>
 800bc82:	f240 61ae 	movw	r1, #1710	; 0x6ae
 800bc86:	4830      	ldr	r0, [pc, #192]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bc88:	f7f5 ff8f 	bl	8001baa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bc8c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d055      	beq.n	800bd40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 800bc94:	2301      	movs	r3, #1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc96:	4a2b      	ldr	r2, [pc, #172]	; (800bd44 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
  __HAL_LOCK(htim);
 800bc98:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc9c:	68f3      	ldr	r3, [r6, #12]
 800bc9e:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 800bca2:	68b3      	ldr	r3, [r6, #8]
 800bca4:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bca6:	6873      	ldr	r3, [r6, #4]
 800bca8:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800bcac:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bcae:	6833      	ldr	r3, [r6, #0]
 800bcb0:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800bcb4:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcb6:	6933      	ldr	r3, [r6, #16]
 800bcb8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800bcbc:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcbe:	6973      	ldr	r3, [r6, #20]
 800bcc0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800bcc4:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bcc6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800bcc8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800bccc:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bcce:	69b3      	ldr	r3, [r6, #24]
 800bcd0:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 800bcd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d003      	beq.n	800bce6 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800bcde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d126      	bne.n	800bd34 <HAL_TIMEx_ConfigBreakDeadTime+0x154>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800bce6:	69f3      	ldr	r3, [r6, #28]
 800bce8:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800bcec:	d004      	beq.n	800bcf8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800bcee:	f240 61c3 	movw	r1, #1731	; 0x6c3
 800bcf2:	4815      	ldr	r0, [pc, #84]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bcf4:	f7f5 ff59 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800bcf8:	6a33      	ldr	r3, [r6, #32]
 800bcfa:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800bcfe:	d004      	beq.n	800bd0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bd00:	f240 61c4 	movw	r1, #1732	; 0x6c4
 800bd04:	4810      	ldr	r0, [pc, #64]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd06:	f7f5 ff50 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800bd0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd0c:	2b0f      	cmp	r3, #15
 800bd0e:	d904      	bls.n	800bd1a <HAL_TIMEx_ConfigBreakDeadTime+0x13a>
 800bd10:	f240 61c5 	movw	r1, #1733	; 0x6c5
 800bd14:	480c      	ldr	r0, [pc, #48]	; (800bd48 <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd16:	f7f5 ff48 	bl	8001baa <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bd1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bd1c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800bd20:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bd24:	69f3      	ldr	r3, [r6, #28]
 800bd26:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800bd2a:	431c      	orrs	r4, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bd2c:	6a33      	ldr	r3, [r6, #32]
 800bd2e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800bd32:	431c      	orrs	r4, r3
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bd34:	682b      	ldr	r3, [r5, #0]

  __HAL_UNLOCK(htim);
 800bd36:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 800bd38:	645c      	str	r4, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800bd3a:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

  return HAL_OK;
 800bd3e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800bd40:	2002      	movs	r0, #2
}
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	40010000 	.word	0x40010000
 800bd48:	0803481d 	.word	0x0803481d

0800bd4c <HAL_TIMEx_CommutCallback>:
 800bd4c:	4770      	bx	lr

0800bd4e <HAL_TIMEx_BreakCallback>:
 800bd4e:	4770      	bx	lr

0800bd50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd50:	4770      	bx	lr
	...

0800bd54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd54:	b538      	push	{r3, r4, r5, lr}
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bd56:	6842      	ldr	r2, [r0, #4]
{
 800bd58:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bd5a:	4baf      	ldr	r3, [pc, #700]	; (800c018 <UART_SetConfig+0x2c4>)
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d904      	bls.n	800bd6a <UART_SetConfig+0x16>
 800bd60:	f640 2151 	movw	r1, #2641	; 0xa51
 800bd64:	48ad      	ldr	r0, [pc, #692]	; (800c01c <UART_SetConfig+0x2c8>)
 800bd66:	f7f5 ff20 	bl	8001baa <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd70:	d007      	beq.n	800bd82 <UART_SetConfig+0x2e>
 800bd72:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bd76:	d004      	beq.n	800bd82 <UART_SetConfig+0x2e>
 800bd78:	f640 2152 	movw	r1, #2642	; 0xa52
 800bd7c:	48a7      	ldr	r0, [pc, #668]	; (800c01c <UART_SetConfig+0x2c8>)
 800bd7e:	f7f5 ff14 	bl	8001baa <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800bd88:	d004      	beq.n	800bd94 <UART_SetConfig+0x40>
 800bd8a:	f640 2153 	movw	r1, #2643	; 0xa53
 800bd8e:	48a3      	ldr	r0, [pc, #652]	; (800c01c <UART_SetConfig+0x2c8>)
 800bd90:	f7f5 ff0b 	bl	8001baa <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800bd94:	6a23      	ldr	r3, [r4, #32]
 800bd96:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bd9a:	d004      	beq.n	800bda6 <UART_SetConfig+0x52>
 800bd9c:	f640 2154 	movw	r1, #2644	; 0xa54
 800bda0:	489e      	ldr	r0, [pc, #632]	; (800c01c <UART_SetConfig+0x2c8>)
 800bda2:	f7f5 ff02 	bl	8001baa <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800bdac:	d007      	beq.n	800bdbe <UART_SetConfig+0x6a>
 800bdae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bdb2:	d004      	beq.n	800bdbe <UART_SetConfig+0x6a>
 800bdb4:	f640 2156 	movw	r1, #2646	; 0xa56
 800bdb8:	4898      	ldr	r0, [pc, #608]	; (800c01c <UART_SetConfig+0x2c8>)
 800bdba:	f7f5 fef6 	bl	8001baa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bdbe:	6963      	ldr	r3, [r4, #20]
 800bdc0:	f033 020c 	bics.w	r2, r3, #12
 800bdc4:	d100      	bne.n	800bdc8 <UART_SetConfig+0x74>
 800bdc6:	b923      	cbnz	r3, 800bdd2 <UART_SetConfig+0x7e>
 800bdc8:	f640 2157 	movw	r1, #2647	; 0xa57
 800bdcc:	4893      	ldr	r0, [pc, #588]	; (800c01c <UART_SetConfig+0x2c8>)
 800bdce:	f7f5 feec 	bl	8001baa <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bdd2:	69a3      	ldr	r3, [r4, #24]
 800bdd4:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800bdd8:	d004      	beq.n	800bde4 <UART_SetConfig+0x90>
 800bdda:	f640 2158 	movw	r1, #2648	; 0xa58
 800bdde:	488f      	ldr	r0, [pc, #572]	; (800c01c <UART_SetConfig+0x2c8>)
 800bde0:	f7f5 fee3 	bl	8001baa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bde4:	69e3      	ldr	r3, [r4, #28]
 800bde6:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800bdea:	d004      	beq.n	800bdf6 <UART_SetConfig+0xa2>
 800bdec:	f640 2159 	movw	r1, #2649	; 0xa59
 800bdf0:	488a      	ldr	r0, [pc, #552]	; (800c01c <UART_SetConfig+0x2c8>)
 800bdf2:	f7f5 feda 	bl	8001baa <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdf6:	6920      	ldr	r0, [r4, #16]
 800bdf8:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdfa:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdfc:	4301      	orrs	r1, r0
 800bdfe:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be00:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be02:	69e2      	ldr	r2, [r4, #28]
 800be04:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be06:	4886      	ldr	r0, [pc, #536]	; (800c020 <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be08:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be0a:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800be0c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be0e:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be10:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be12:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be14:	6859      	ldr	r1, [r3, #4]
 800be16:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800be1a:	4301      	orrs	r1, r0
 800be1c:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be1e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be20:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800be22:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be24:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800be28:	4301      	orrs	r1, r0
 800be2a:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be2c:	497d      	ldr	r1, [pc, #500]	; (800c024 <UART_SetConfig+0x2d0>)
 800be2e:	428b      	cmp	r3, r1
 800be30:	d117      	bne.n	800be62 <UART_SetConfig+0x10e>
 800be32:	4b7d      	ldr	r3, [pc, #500]	; (800c028 <UART_SetConfig+0x2d4>)
 800be34:	497d      	ldr	r1, [pc, #500]	; (800c02c <UART_SetConfig+0x2d8>)
 800be36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be3a:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800be42:	5ccb      	ldrb	r3, [r1, r3]
 800be44:	d12b      	bne.n	800be9e <UART_SetConfig+0x14a>
  {
    switch (clocksource)
 800be46:	2b08      	cmp	r3, #8
 800be48:	f200 8114 	bhi.w	800c074 <UART_SetConfig+0x320>
 800be4c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800be50:	00780103 	.word	0x00780103
 800be54:	01120117 	.word	0x01120117
 800be58:	011200e0 	.word	0x011200e0
 800be5c:	01120112 	.word	0x01120112
 800be60:	003e      	.short	0x003e
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be62:	4973      	ldr	r1, [pc, #460]	; (800c030 <UART_SetConfig+0x2dc>)
 800be64:	428b      	cmp	r3, r1
 800be66:	d106      	bne.n	800be76 <UART_SetConfig+0x122>
 800be68:	4b6f      	ldr	r3, [pc, #444]	; (800c028 <UART_SetConfig+0x2d4>)
 800be6a:	4972      	ldr	r1, [pc, #456]	; (800c034 <UART_SetConfig+0x2e0>)
 800be6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be70:	f003 030c 	and.w	r3, r3, #12
 800be74:	e7e3      	b.n	800be3e <UART_SetConfig+0xea>
 800be76:	4970      	ldr	r1, [pc, #448]	; (800c038 <UART_SetConfig+0x2e4>)
 800be78:	428b      	cmp	r3, r1
 800be7a:	d12c      	bne.n	800bed6 <UART_SetConfig+0x182>
 800be7c:	4b6a      	ldr	r3, [pc, #424]	; (800c028 <UART_SetConfig+0x2d4>)
 800be7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800be86:	2b10      	cmp	r3, #16
 800be88:	f000 80bf 	beq.w	800c00a <UART_SetConfig+0x2b6>
 800be8c:	d815      	bhi.n	800beba <UART_SetConfig+0x166>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80de 	beq.w	800c050 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be94:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800be98:	f000 80ec 	beq.w	800c074 <UART_SetConfig+0x320>
 800be9c:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	f200 80e8 	bhi.w	800c074 <UART_SetConfig+0x320>
 800bea4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bea8:	0094008e 	.word	0x0094008e
 800beac:	00e60097 	.word	0x00e60097
 800beb0:	00e600a9 	.word	0x00e600a9
 800beb4:	00e600e6 	.word	0x00e600e6
 800beb8:	00ac      	.short	0x00ac
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beba:	2b20      	cmp	r3, #32
 800bebc:	f000 80dc 	beq.w	800c078 <UART_SetConfig+0x324>
 800bec0:	2b30      	cmp	r3, #48	; 0x30
 800bec2:	d1e7      	bne.n	800be94 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bec4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bec8:	f040 809a 	bne.w	800c000 <UART_SetConfig+0x2ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800becc:	6863      	ldr	r3, [r4, #4]
 800bece:	0858      	lsrs	r0, r3, #1
 800bed0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800bed4:	e0d9      	b.n	800c08a <UART_SetConfig+0x336>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bed6:	4959      	ldr	r1, [pc, #356]	; (800c03c <UART_SetConfig+0x2e8>)
 800bed8:	428b      	cmp	r3, r1
 800beda:	d10d      	bne.n	800bef8 <UART_SetConfig+0x1a4>
 800bedc:	4b52      	ldr	r3, [pc, #328]	; (800c028 <UART_SetConfig+0x2d4>)
 800bede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	f000 808f 	beq.w	800c00a <UART_SetConfig+0x2b6>
 800beec:	d9cf      	bls.n	800be8e <UART_SetConfig+0x13a>
 800beee:	2b80      	cmp	r3, #128	; 0x80
 800bef0:	f000 80c2 	beq.w	800c078 <UART_SetConfig+0x324>
 800bef4:	2bc0      	cmp	r3, #192	; 0xc0
 800bef6:	e7e4      	b.n	800bec2 <UART_SetConfig+0x16e>
 800bef8:	4951      	ldr	r1, [pc, #324]	; (800c040 <UART_SetConfig+0x2ec>)
 800befa:	428b      	cmp	r3, r1
 800befc:	d10f      	bne.n	800bf1e <UART_SetConfig+0x1ca>
 800befe:	4b4a      	ldr	r3, [pc, #296]	; (800c028 <UART_SetConfig+0x2d4>)
 800bf00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0c:	d07d      	beq.n	800c00a <UART_SetConfig+0x2b6>
 800bf0e:	d9be      	bls.n	800be8e <UART_SetConfig+0x13a>
 800bf10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf14:	f000 80b0 	beq.w	800c078 <UART_SetConfig+0x324>
 800bf18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf1c:	e7d1      	b.n	800bec2 <UART_SetConfig+0x16e>
 800bf1e:	4949      	ldr	r1, [pc, #292]	; (800c044 <UART_SetConfig+0x2f0>)
 800bf20:	428b      	cmp	r3, r1
 800bf22:	d117      	bne.n	800bf54 <UART_SetConfig+0x200>
 800bf24:	4b40      	ldr	r3, [pc, #256]	; (800c028 <UART_SetConfig+0x2d4>)
 800bf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bf2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf32:	d06a      	beq.n	800c00a <UART_SetConfig+0x2b6>
 800bf34:	d807      	bhi.n	800bf46 <UART_SetConfig+0x1f2>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1ac      	bne.n	800be94 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bf3e:	d147      	bne.n	800bfd0 <UART_SetConfig+0x27c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bf40:	f7fc fae6 	bl	8008510 <HAL_RCC_GetPCLK2Freq>
 800bf44:	e089      	b.n	800c05a <UART_SetConfig+0x306>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf4a:	f000 8095 	beq.w	800c078 <UART_SetConfig+0x324>
 800bf4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf52:	e7b6      	b.n	800bec2 <UART_SetConfig+0x16e>
 800bf54:	493c      	ldr	r1, [pc, #240]	; (800c048 <UART_SetConfig+0x2f4>)
 800bf56:	428b      	cmp	r3, r1
 800bf58:	d116      	bne.n	800bf88 <UART_SetConfig+0x234>
 800bf5a:	4b33      	ldr	r3, [pc, #204]	; (800c028 <UART_SetConfig+0x2d4>)
 800bf5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d04f      	beq.n	800c00a <UART_SetConfig+0x2b6>
 800bf6a:	d806      	bhi.n	800bf7a <UART_SetConfig+0x226>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d06f      	beq.n	800c050 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bf74:	d17e      	bne.n	800c074 <UART_SetConfig+0x320>
 800bf76:	2310      	movs	r3, #16
 800bf78:	e765      	b.n	800be46 <UART_SetConfig+0xf2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf7e:	d07b      	beq.n	800c078 <UART_SetConfig+0x324>
 800bf80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf84:	d09e      	beq.n	800bec4 <UART_SetConfig+0x170>
 800bf86:	e7f3      	b.n	800bf70 <UART_SetConfig+0x21c>
 800bf88:	4930      	ldr	r1, [pc, #192]	; (800c04c <UART_SetConfig+0x2f8>)
 800bf8a:	428b      	cmp	r3, r1
 800bf8c:	d172      	bne.n	800c074 <UART_SetConfig+0x320>
 800bf8e:	4b26      	ldr	r3, [pc, #152]	; (800c028 <UART_SetConfig+0x2d4>)
 800bf90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bf98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf9c:	d035      	beq.n	800c00a <UART_SetConfig+0x2b6>
 800bf9e:	d9e5      	bls.n	800bf6c <UART_SetConfig+0x218>
 800bfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa4:	d068      	beq.n	800c078 <UART_SetConfig+0x324>
 800bfa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bfaa:	e7eb      	b.n	800bf84 <UART_SetConfig+0x230>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfac:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfb0:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 800bfb4:	6822      	ldr	r2, [r4, #0]
 800bfb6:	4318      	orrs	r0, r3
 800bfb8:	60d0      	str	r0, [r2, #12]
 800bfba:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800bfc0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800bfc4:	f7fc fa94 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bfc8:	6863      	ldr	r3, [r4, #4]
 800bfca:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800bfce:	e008      	b.n	800bfe2 <UART_SetConfig+0x28e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bfd0:	f7fc fa9e 	bl	8008510 <HAL_RCC_GetPCLK2Freq>
 800bfd4:	e7f8      	b.n	800bfc8 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bfd6:	6863      	ldr	r3, [r4, #4]
 800bfd8:	0858      	lsrs	r0, r3, #1
 800bfda:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800bfde:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bfe2:	fbb0 f0f3 	udiv	r0, r0, r3
 800bfe6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfe8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bfec:	f1a0 0210 	sub.w	r2, r0, #16
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d83f      	bhi.n	800c074 <UART_SetConfig+0x320>
      huart->Instance->BRR = usartdiv;
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	60d8      	str	r0, [r3, #12]
 800bff8:	e7df      	b.n	800bfba <UART_SetConfig+0x266>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800bffa:	f7fc f953 	bl	80082a4 <HAL_RCC_GetSysClockFreq>
 800bffe:	e7e3      	b.n	800bfc8 <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	0858      	lsrs	r0, r3, #1
 800c004:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800c008:	e7eb      	b.n	800bfe2 <UART_SetConfig+0x28e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c00a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c00e:	d1f4      	bne.n	800bffa <UART_SetConfig+0x2a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c010:	f7fc f948 	bl	80082a4 <HAL_RCC_GetSysClockFreq>
 800c014:	e021      	b.n	800c05a <UART_SetConfig+0x306>
 800c016:	bf00      	nop
 800c018:	019bfcc0 	.word	0x019bfcc0
 800c01c:	0803486f 	.word	0x0803486f
 800c020:	efff69f3 	.word	0xefff69f3
 800c024:	40011000 	.word	0x40011000
 800c028:	40023800 	.word	0x40023800
 800c02c:	0803485e 	.word	0x0803485e
 800c030:	40004400 	.word	0x40004400
 800c034:	08034862 	.word	0x08034862
 800c038:	40004800 	.word	0x40004800
 800c03c:	40004c00 	.word	0x40004c00
 800c040:	40005000 	.word	0x40005000
 800c044:	40011400 	.word	0x40011400
 800c048:	40007800 	.word	0x40007800
 800c04c:	40007c00 	.word	0x40007c00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c050:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c054:	d1b6      	bne.n	800bfc4 <UART_SetConfig+0x270>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c056:	f7fc fa4b 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c05a:	6862      	ldr	r2, [r4, #4]
 800c05c:	0853      	lsrs	r3, r2, #1
 800c05e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c062:	fbb0 f0f2 	udiv	r0, r0, r2
 800c066:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c068:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c06c:	f1a0 0210 	sub.w	r2, r0, #16
 800c070:	429a      	cmp	r2, r3
 800c072:	d99b      	bls.n	800bfac <UART_SetConfig+0x258>
      ret = HAL_ERROR;
 800c074:	2001      	movs	r0, #1
 800c076:	e7a1      	b.n	800bfbc <UART_SetConfig+0x268>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c078:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c07c:	d1ab      	bne.n	800bfd6 <UART_SetConfig+0x282>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c07e:	6863      	ldr	r3, [r4, #4]
 800c080:	0858      	lsrs	r0, r3, #1
 800c082:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800c086:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c08a:	fbb0 f0f3 	udiv	r0, r0, r3
 800c08e:	e7ea      	b.n	800c066 <UART_SetConfig+0x312>

0800c090 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c092:	2bff      	cmp	r3, #255	; 0xff
{
 800c094:	b510      	push	{r4, lr}
 800c096:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c098:	d904      	bls.n	800c0a4 <UART_AdvFeatureConfig+0x14>
 800c09a:	f640 21d2 	movw	r1, #2770	; 0xad2
 800c09e:	4862      	ldr	r0, [pc, #392]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c0a0:	f7f5 fd83 	bl	8001baa <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a6:	07d8      	lsls	r0, r3, #31
 800c0a8:	d50f      	bpl.n	800c0ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c0aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c0ac:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c0b0:	d004      	beq.n	800c0bc <UART_AdvFeatureConfig+0x2c>
 800c0b2:	f640 21d7 	movw	r1, #2775	; 0xad7
 800c0b6:	485c      	ldr	r0, [pc, #368]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c0b8:	f7f5 fd77 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0bc:	6822      	ldr	r2, [r4, #0]
 800c0be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c0c0:	6853      	ldr	r3, [r2, #4]
 800c0c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c0c6:	430b      	orrs	r3, r1
 800c0c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0cc:	0799      	lsls	r1, r3, #30
 800c0ce:	d50f      	bpl.n	800c0f0 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c0d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c0d2:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c0d6:	d004      	beq.n	800c0e2 <UART_AdvFeatureConfig+0x52>
 800c0d8:	f640 21de 	movw	r1, #2782	; 0xade
 800c0dc:	4852      	ldr	r0, [pc, #328]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c0de:	f7f5 fd64 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0e2:	6822      	ldr	r2, [r4, #0]
 800c0e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c0e6:	6853      	ldr	r3, [r2, #4]
 800c0e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0f2:	075a      	lsls	r2, r3, #29
 800c0f4:	d50f      	bpl.n	800c116 <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c0f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c0f8:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800c0fc:	d004      	beq.n	800c108 <UART_AdvFeatureConfig+0x78>
 800c0fe:	f640 21e5 	movw	r1, #2789	; 0xae5
 800c102:	4849      	ldr	r0, [pc, #292]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c104:	f7f5 fd51 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c10c:	6853      	ldr	r3, [r2, #4]
 800c10e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c112:	430b      	orrs	r3, r1
 800c114:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c118:	071b      	lsls	r3, r3, #28
 800c11a:	d50f      	bpl.n	800c13c <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c11c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c11e:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c122:	d004      	beq.n	800c12e <UART_AdvFeatureConfig+0x9e>
 800c124:	f640 21ec 	movw	r1, #2796	; 0xaec
 800c128:	483f      	ldr	r0, [pc, #252]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c12a:	f7f5 fd3e 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c132:	6853      	ldr	r3, [r2, #4]
 800c134:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c138:	430b      	orrs	r3, r1
 800c13a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c13e:	06d8      	lsls	r0, r3, #27
 800c140:	d50f      	bpl.n	800c162 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c144:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c148:	d004      	beq.n	800c154 <UART_AdvFeatureConfig+0xc4>
 800c14a:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800c14e:	4836      	ldr	r0, [pc, #216]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c150:	f7f5 fd2b 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c158:	6893      	ldr	r3, [r2, #8]
 800c15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c15e:	430b      	orrs	r3, r1
 800c160:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c164:	0699      	lsls	r1, r3, #26
 800c166:	d50f      	bpl.n	800c188 <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c16a:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c16e:	d004      	beq.n	800c17a <UART_AdvFeatureConfig+0xea>
 800c170:	f640 21fa 	movw	r1, #2810	; 0xafa
 800c174:	482c      	ldr	r0, [pc, #176]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c176:	f7f5 fd18 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c17a:	6822      	ldr	r2, [r4, #0]
 800c17c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c17e:	6893      	ldr	r3, [r2, #8]
 800c180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c184:	430b      	orrs	r3, r1
 800c186:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c18a:	065a      	lsls	r2, r3, #25
 800c18c:	d538      	bpl.n	800c200 <UART_AdvFeatureConfig+0x170>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	4a26      	ldr	r2, [pc, #152]	; (800c22c <UART_AdvFeatureConfig+0x19c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d010      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x128>
 800c196:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d00c      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x128>
 800c19e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d008      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x128>
 800c1a6:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d004      	beq.n	800c1b8 <UART_AdvFeatureConfig+0x128>
 800c1ae:	f640 3101 	movw	r1, #2817	; 0xb01
 800c1b2:	481d      	ldr	r0, [pc, #116]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c1b4:	f7f5 fcf9 	bl	8001baa <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c1b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1ba:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800c1be:	d004      	beq.n	800c1ca <UART_AdvFeatureConfig+0x13a>
 800c1c0:	f640 3102 	movw	r1, #2818	; 0xb02
 800c1c4:	4818      	ldr	r0, [pc, #96]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c1c6:	f7f5 fcf0 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1ca:	6821      	ldr	r1, [r4, #0]
 800c1cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c1ce:	684b      	ldr	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1d0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c1d8:	ea43 0302 	orr.w	r3, r3, r2
 800c1dc:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1de:	d10f      	bne.n	800c200 <UART_AdvFeatureConfig+0x170>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c1e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c1e2:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800c1e6:	d004      	beq.n	800c1f2 <UART_AdvFeatureConfig+0x162>
 800c1e8:	f640 3107 	movw	r1, #2823	; 0xb07
 800c1ec:	480e      	ldr	r0, [pc, #56]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c1ee:	f7f5 fcdc 	bl	8001baa <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1f2:	6822      	ldr	r2, [r4, #0]
 800c1f4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c1f6:	6853      	ldr	r3, [r2, #4]
 800c1f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c1fc:	430b      	orrs	r3, r1
 800c1fe:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c202:	061b      	lsls	r3, r3, #24
 800c204:	d50f      	bpl.n	800c226 <UART_AdvFeatureConfig+0x196>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c206:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c208:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c20c:	d004      	beq.n	800c218 <UART_AdvFeatureConfig+0x188>
 800c20e:	f640 310f 	movw	r1, #2831	; 0xb0f
 800c212:	4805      	ldr	r0, [pc, #20]	; (800c228 <UART_AdvFeatureConfig+0x198>)
 800c214:	f7f5 fcc9 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c21c:	6853      	ldr	r3, [r2, #4]
 800c21e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c222:	430b      	orrs	r3, r1
 800c224:	6053      	str	r3, [r2, #4]
 800c226:	bd10      	pop	{r4, pc}
 800c228:	0803486f 	.word	0x0803486f
 800c22c:	40011000 	.word	0x40011000

0800c230 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c234:	9d06      	ldr	r5, [sp, #24]
 800c236:	4604      	mov	r4, r0
 800c238:	460f      	mov	r7, r1
 800c23a:	4616      	mov	r6, r2
 800c23c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c23e:	6821      	ldr	r1, [r4, #0]
 800c240:	69ca      	ldr	r2, [r1, #28]
 800c242:	ea37 0302 	bics.w	r3, r7, r2
 800c246:	bf0c      	ite	eq
 800c248:	2201      	moveq	r2, #1
 800c24a:	2200      	movne	r2, #0
 800c24c:	42b2      	cmp	r2, r6
 800c24e:	d002      	beq.n	800c256 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c250:	2000      	movs	r0, #0
}
 800c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c256:	1c6b      	adds	r3, r5, #1
 800c258:	d0f2      	beq.n	800c240 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c25a:	f7f9 f86d 	bl	8005338 <HAL_GetTick>
 800c25e:	eba0 0008 	sub.w	r0, r0, r8
 800c262:	4285      	cmp	r5, r0
 800c264:	d301      	bcc.n	800c26a <UART_WaitOnFlagUntilTimeout+0x3a>
 800c266:	2d00      	cmp	r5, #0
 800c268:	d1e9      	bne.n	800c23e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c26a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800c26c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c274:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c276:	689a      	ldr	r2, [r3, #8]
 800c278:	f022 0201 	bic.w	r2, r2, #1
 800c27c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c27e:	2320      	movs	r3, #32
 800c280:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c282:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800c284:	2300      	movs	r3, #0
 800c286:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c28e <HAL_UART_Transmit>:
{
 800c28e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c292:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c294:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800c296:	4604      	mov	r4, r0
 800c298:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800c29a:	2b20      	cmp	r3, #32
{
 800c29c:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c29e:	d14b      	bne.n	800c338 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	d047      	beq.n	800c334 <HAL_UART_Transmit+0xa6>
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d045      	beq.n	800c334 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800c2a8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d043      	beq.n	800c338 <HAL_UART_Transmit+0xaa>
 800c2b0:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800c2b4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2b8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ba:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2bc:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800c2be:	f7f9 f83b 	bl	8005338 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2c2:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c2c4:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800c2c6:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800c2ce:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2d2:	d103      	bne.n	800c2dc <HAL_UART_Transmit+0x4e>
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	b90b      	cbnz	r3, 800c2dc <HAL_UART_Transmit+0x4e>
 800c2d8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c2da:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800c2dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c2e6:	b292      	uxth	r2, r2
 800c2e8:	b94a      	cbnz	r2, 800c2fe <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2ea:	2140      	movs	r1, #64	; 0x40
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7ff ff9f 	bl	800c230 <UART_WaitOnFlagUntilTimeout>
 800c2f2:	b950      	cbnz	r0, 800c30a <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800c2f4:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c2f6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800c2fa:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800c2fc:	e006      	b.n	800c30c <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2fe:	2200      	movs	r2, #0
 800c300:	2180      	movs	r1, #128	; 0x80
 800c302:	4620      	mov	r0, r4
 800c304:	f7ff ff94 	bl	800c230 <UART_WaitOnFlagUntilTimeout>
 800c308:	b118      	cbz	r0, 800c312 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800c30a:	2003      	movs	r0, #3
}
 800c30c:	b003      	add	sp, #12
 800c30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c312:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c314:	b95e      	cbnz	r6, 800c32e <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c316:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c31e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800c320:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800c324:	3b01      	subs	r3, #1
 800c326:	b29b      	uxth	r3, r3
 800c328:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800c32c:	e7d6      	b.n	800c2dc <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c32e:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c332:	e7f4      	b.n	800c31e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800c334:	2001      	movs	r0, #1
 800c336:	e7e9      	b.n	800c30c <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 800c338:	2002      	movs	r0, #2
 800c33a:	e7e7      	b.n	800c30c <HAL_UART_Transmit+0x7e>

0800c33c <HAL_UART_Receive>:
{
 800c33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c340:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800c342:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800c348:	2b20      	cmp	r3, #32
{
 800c34a:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800c34c:	d163      	bne.n	800c416 <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 800c34e:	2900      	cmp	r1, #0
 800c350:	d05f      	beq.n	800c412 <HAL_UART_Receive+0xd6>
 800c352:	2a00      	cmp	r2, #0
 800c354:	d05d      	beq.n	800c412 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 800c356:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d05b      	beq.n	800c416 <HAL_UART_Receive+0xda>
 800c35e:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c360:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800c362:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c366:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c368:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c36a:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800c36c:	f7f8 ffe4 	bl	8005338 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c370:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c372:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 800c374:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800c37c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c380:	d11b      	bne.n	800c3ba <HAL_UART_Receive+0x7e>
 800c382:	6922      	ldr	r2, [r4, #16]
 800c384:	b9ba      	cbnz	r2, 800c3b6 <HAL_UART_Receive+0x7a>
 800c386:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c38a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800c392:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c396:	d121      	bne.n	800c3dc <HAL_UART_Receive+0xa0>
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	b9fb      	cbnz	r3, 800c3dc <HAL_UART_Receive+0xa0>
 800c39c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800c39e:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 800c3a0:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800c3a4:	b280      	uxth	r0, r0
 800c3a6:	b9d8      	cbnz	r0, 800c3e0 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 800c3a8:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c3aa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 800c3ae:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c3b0:	b003      	add	sp, #12
 800c3b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800c3b6:	22ff      	movs	r2, #255	; 0xff
 800c3b8:	e7e7      	b.n	800c38a <HAL_UART_Receive+0x4e>
 800c3ba:	b923      	cbnz	r3, 800c3c6 <HAL_UART_Receive+0x8a>
 800c3bc:	6922      	ldr	r2, [r4, #16]
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d0f9      	beq.n	800c3b6 <HAL_UART_Receive+0x7a>
 800c3c2:	227f      	movs	r2, #127	; 0x7f
 800c3c4:	e7e1      	b.n	800c38a <HAL_UART_Receive+0x4e>
 800c3c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3ca:	d104      	bne.n	800c3d6 <HAL_UART_Receive+0x9a>
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d0f7      	beq.n	800c3c2 <HAL_UART_Receive+0x86>
 800c3d2:	223f      	movs	r2, #63	; 0x3f
 800c3d4:	e7d9      	b.n	800c38a <HAL_UART_Receive+0x4e>
 800c3d6:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 800c3da:	e7d8      	b.n	800c38e <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 800c3dc:	2600      	movs	r6, #0
 800c3de:	e7df      	b.n	800c3a0 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c3e0:	f8cd 9000 	str.w	r9, [sp]
 800c3e4:	4643      	mov	r3, r8
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2120      	movs	r1, #32
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7ff ff20 	bl	800c230 <UART_WaitOnFlagUntilTimeout>
 800c3f0:	b998      	cbnz	r0, 800c41a <HAL_UART_Receive+0xde>
 800c3f2:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f6:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800c3f8:	b945      	cbnz	r5, 800c40c <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c3fa:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800c3fe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800c402:	3b01      	subs	r3, #1
 800c404:	b29b      	uxth	r3, r3
 800c406:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800c40a:	e7c9      	b.n	800c3a0 <HAL_UART_Receive+0x64>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c40c:	f805 3b01 	strb.w	r3, [r5], #1
 800c410:	e7f5      	b.n	800c3fe <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 800c412:	2001      	movs	r0, #1
 800c414:	e7cc      	b.n	800c3b0 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800c416:	2002      	movs	r0, #2
 800c418:	e7ca      	b.n	800c3b0 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800c41a:	2003      	movs	r0, #3
 800c41c:	e7c8      	b.n	800c3b0 <HAL_UART_Receive+0x74>

0800c41e <UART_CheckIdleState>:
{
 800c41e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c420:	2500      	movs	r5, #0
{
 800c422:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c424:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800c426:	f7f8 ff87 	bl	8005338 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c42a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800c42c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	0712      	lsls	r2, r2, #28
 800c432:	d407      	bmi.n	800c444 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800c434:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c436:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c438:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800c43a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800c43e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c440:	b003      	add	sp, #12
 800c442:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c444:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c448:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c44c:	4620      	mov	r0, r4
 800c44e:	9200      	str	r2, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	f7ff feed 	bl	800c230 <UART_WaitOnFlagUntilTimeout>
 800c456:	2800      	cmp	r0, #0
 800c458:	d0ec      	beq.n	800c434 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800c45a:	2003      	movs	r0, #3
 800c45c:	e7f0      	b.n	800c440 <UART_CheckIdleState+0x22>
	...

0800c460 <HAL_UART_Init>:
{
 800c460:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c462:	4604      	mov	r4, r0
 800c464:	2800      	cmp	r0, #0
 800c466:	d071      	beq.n	800c54c <HAL_UART_Init+0xec>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c468:	6981      	ldr	r1, [r0, #24]
 800c46a:	6803      	ldr	r3, [r0, #0]
 800c46c:	4a38      	ldr	r2, [pc, #224]	; (800c550 <HAL_UART_Init+0xf0>)
 800c46e:	2900      	cmp	r1, #0
 800c470:	d04c      	beq.n	800c50c <HAL_UART_Init+0xac>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c472:	4293      	cmp	r3, r2
 800c474:	d020      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c476:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01c      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c47e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c482:	4293      	cmp	r3, r2
 800c484:	d018      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d014      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c48e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c492:	4293      	cmp	r3, r2
 800c494:	d010      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c496:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00c      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c49e:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d008      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c4a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d004      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c4ae:	f44f 7195 	mov.w	r1, #298	; 0x12a
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c4b2:	4828      	ldr	r0, [pc, #160]	; (800c554 <HAL_UART_Init+0xf4>)
 800c4b4:	f7f5 fb79 	bl	8001baa <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c4b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c4ba:	b923      	cbnz	r3, 800c4c6 <HAL_UART_Init+0x66>
    huart->Lock = HAL_UNLOCKED;
 800c4bc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f7f6 f967 	bl	8002794 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c4c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c4c8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4ca:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c4cc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800c4ce:	6813      	ldr	r3, [r2, #0]
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4d6:	f7ff fc3d 	bl	800bd54 <UART_SetConfig>
 800c4da:	2801      	cmp	r0, #1
 800c4dc:	d036      	beq.n	800c54c <HAL_UART_Init+0xec>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e0:	b113      	cbz	r3, 800c4e8 <HAL_UART_Init+0x88>
    UART_AdvFeatureConfig(huart);
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f7ff fdd4 	bl	800c090 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4e8:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c4ea:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4f4:	689a      	ldr	r2, [r3, #8]
 800c4f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4fa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	f042 0201 	orr.w	r2, r2, #1
}
 800c502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c506:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c508:	f7ff bf89 	b.w	800c41e <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d0d3      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c510:	4a11      	ldr	r2, [pc, #68]	; (800c558 <HAL_UART_Init+0xf8>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d0d0      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d0cc      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c51e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c522:	4293      	cmp	r3, r2
 800c524:	d0c8      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d0c4      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c52e:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c532:	4293      	cmp	r3, r2
 800c534:	d0c0      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c536:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d0bc      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c53e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c542:	4293      	cmp	r3, r2
 800c544:	d0b8      	beq.n	800c4b8 <HAL_UART_Init+0x58>
 800c546:	f240 112f 	movw	r1, #303	; 0x12f
 800c54a:	e7b2      	b.n	800c4b2 <HAL_UART_Init+0x52>
}
 800c54c:	2001      	movs	r0, #1
 800c54e:	bd10      	pop	{r4, pc}
 800c550:	40011000 	.word	0x40011000
 800c554:	0803486f 	.word	0x0803486f
 800c558:	40004400 	.word	0x40004400

0800c55c <FMC_SDRAM_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c55c:	4b54      	ldr	r3, [pc, #336]	; (800c6b0 <FMC_SDRAM_Init+0x154>)
 800c55e:	4298      	cmp	r0, r3
{
 800c560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c564:	4605      	mov	r5, r0
 800c566:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c568:	d004      	beq.n	800c574 <FMC_SDRAM_Init+0x18>
 800c56a:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800c56e:	4851      	ldr	r0, [pc, #324]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c570:	f7f5 fb1b 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d904      	bls.n	800c584 <FMC_SDRAM_Init+0x28>
 800c57a:	f240 21ed 	movw	r1, #749	; 0x2ed
 800c57e:	484d      	ldr	r0, [pc, #308]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c580:	f7f5 fb13 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800c584:	6863      	ldr	r3, [r4, #4]
 800c586:	2b03      	cmp	r3, #3
 800c588:	d904      	bls.n	800c594 <FMC_SDRAM_Init+0x38>
 800c58a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c58e:	4849      	ldr	r0, [pc, #292]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c590:	f7f5 fb0b 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800c594:	68a3      	ldr	r3, [r4, #8]
 800c596:	f033 0204 	bics.w	r2, r3, #4
 800c59a:	d006      	beq.n	800c5aa <FMC_SDRAM_Init+0x4e>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d004      	beq.n	800c5aa <FMC_SDRAM_Init+0x4e>
 800c5a0:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c5a4:	4843      	ldr	r0, [pc, #268]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c5a6:	f7f5 fb00 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800c5aa:	68e3      	ldr	r3, [r4, #12]
 800c5ac:	f033 0210 	bics.w	r2, r3, #16
 800c5b0:	d006      	beq.n	800c5c0 <FMC_SDRAM_Init+0x64>
 800c5b2:	2b20      	cmp	r3, #32
 800c5b4:	d004      	beq.n	800c5c0 <FMC_SDRAM_Init+0x64>
 800c5b6:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800c5ba:	483e      	ldr	r0, [pc, #248]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c5bc:	f7f5 faf5 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800c5c0:	6923      	ldr	r3, [r4, #16]
 800c5c2:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800c5c6:	d004      	beq.n	800c5d2 <FMC_SDRAM_Init+0x76>
 800c5c8:	f240 21f1 	movw	r1, #753	; 0x2f1
 800c5cc:	4839      	ldr	r0, [pc, #228]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c5ce:	f7f5 faec 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800c5d2:	6963      	ldr	r3, [r4, #20]
 800c5d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c5d8:	2a80      	cmp	r2, #128	; 0x80
 800c5da:	d007      	beq.n	800c5ec <FMC_SDRAM_Init+0x90>
 800c5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5e0:	d004      	beq.n	800c5ec <FMC_SDRAM_Init+0x90>
 800c5e2:	f240 21f2 	movw	r1, #754	; 0x2f2
 800c5e6:	4833      	ldr	r0, [pc, #204]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c5e8:	f7f5 fadf 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800c5ec:	69a3      	ldr	r3, [r4, #24]
 800c5ee:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c5f2:	d004      	beq.n	800c5fe <FMC_SDRAM_Init+0xa2>
 800c5f4:	f240 21f3 	movw	r1, #755	; 0x2f3
 800c5f8:	482e      	ldr	r0, [pc, #184]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c5fa:	f7f5 fad6 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800c5fe:	69e3      	ldr	r3, [r4, #28]
 800c600:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800c604:	d007      	beq.n	800c616 <FMC_SDRAM_Init+0xba>
 800c606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c60a:	d004      	beq.n	800c616 <FMC_SDRAM_Init+0xba>
 800c60c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800c610:	4828      	ldr	r0, [pc, #160]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c612:	f7f5 faca 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800c616:	6a23      	ldr	r3, [r4, #32]
 800c618:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c61c:	d004      	beq.n	800c628 <FMC_SDRAM_Init+0xcc>
 800c61e:	f240 21f5 	movw	r1, #757	; 0x2f5
 800c622:	4824      	ldr	r0, [pc, #144]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c624:	f7f5 fac1 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 800c628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c62a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800c62e:	d007      	beq.n	800c640 <FMC_SDRAM_Init+0xe4>
 800c630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c634:	d004      	beq.n	800c640 <FMC_SDRAM_Init+0xe4>
 800c636:	f240 21f6 	movw	r1, #758	; 0x2f6
 800c63a:	481e      	ldr	r0, [pc, #120]	; (800c6b4 <FMC_SDRAM_Init+0x158>)
 800c63c:	f7f5 fab5 	bl	8001baa <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	1d22      	adds	r2, r4, #4
 800c644:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	69a0      	ldr	r0, [r4, #24]
 800c64c:	69e7      	ldr	r7, [r4, #28]
 800c64e:	6a26      	ldr	r6, [r4, #32]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c650:	6829      	ldr	r1, [r5, #0]
 800c652:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800c654:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c658:	d014      	beq.n	800c684 <FMC_SDRAM_Init+0x128>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c65a:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c65c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                        Init->RowBitsNumber      |\
 800c660:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c664:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
                        Init->MemoryDataWidth    |\
 800c668:	ea42 020c 	orr.w	r2, r2, ip
                        Init->InternalBankNumber |\
 800c66c:	ea42 020e 	orr.w	r2, r2, lr
                        Init->CASLatency         |\
 800c670:	ea42 0300 	orr.w	r3, r2, r0
                        Init->WriteProtection    |\
 800c674:	433b      	orrs	r3, r7
                        Init->SDClockPeriod      |\
 800c676:	4333      	orrs	r3, r6
                        Init->ReadBurst          |\
 800c678:	4323      	orrs	r3, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c67a:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c67c:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c67e:	2000      	movs	r0, #0
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c684:	433e      	orrs	r6, r7
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c686:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c688:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                        Init->ReadBurst          |\
 800c68c:	4334      	orrs	r4, r6
                       Init->RowBitsNumber       |\
 800c68e:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c692:	430c      	orrs	r4, r1
                       Init->MemoryDataWidth     |\
 800c694:	ea42 020c 	orr.w	r2, r2, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c698:	6869      	ldr	r1, [r5, #4]
                       Init->InternalBankNumber  |\
 800c69a:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c69e:	602c      	str	r4, [r5, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c6a0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                       Init->CASLatency          |\
 800c6a4:	4302      	orrs	r2, r0
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c6a6:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6aa:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c6ac:	606a      	str	r2, [r5, #4]
 800c6ae:	e7e6      	b.n	800c67e <FMC_SDRAM_Init+0x122>
 800c6b0:	a0000140 	.word	0xa0000140
 800c6b4:	080348ae 	.word	0x080348ae

0800c6b8 <FMC_SDRAM_Timing_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c6b8:	4b4c      	ldr	r3, [pc, #304]	; (800c7ec <FMC_SDRAM_Timing_Init+0x134>)
 800c6ba:	4298      	cmp	r0, r3
{
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4605      	mov	r5, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c6c4:	d004      	beq.n	800c6d0 <FMC_SDRAM_Timing_Init+0x18>
 800c6c6:	f240 313d 	movw	r1, #829	; 0x33d
 800c6ca:	4849      	ldr	r0, [pc, #292]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c6cc:	f7f5 fa6d 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	2b0f      	cmp	r3, #15
 800c6d6:	d904      	bls.n	800c6e2 <FMC_SDRAM_Timing_Init+0x2a>
 800c6d8:	f240 313e 	movw	r1, #830	; 0x33e
 800c6dc:	4844      	ldr	r0, [pc, #272]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c6de:	f7f5 fa64 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	2b0f      	cmp	r3, #15
 800c6e8:	d904      	bls.n	800c6f4 <FMC_SDRAM_Timing_Init+0x3c>
 800c6ea:	f240 313f 	movw	r1, #831	; 0x33f
 800c6ee:	4840      	ldr	r0, [pc, #256]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c6f0:	f7f5 fa5b 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800c6f4:	68a3      	ldr	r3, [r4, #8]
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	2b0f      	cmp	r3, #15
 800c6fa:	d904      	bls.n	800c706 <FMC_SDRAM_Timing_Init+0x4e>
 800c6fc:	f44f 7150 	mov.w	r1, #832	; 0x340
 800c700:	483b      	ldr	r0, [pc, #236]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c702:	f7f5 fa52 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800c706:	68e3      	ldr	r3, [r4, #12]
 800c708:	3b01      	subs	r3, #1
 800c70a:	2b0f      	cmp	r3, #15
 800c70c:	d904      	bls.n	800c718 <FMC_SDRAM_Timing_Init+0x60>
 800c70e:	f240 3141 	movw	r1, #833	; 0x341
 800c712:	4837      	ldr	r0, [pc, #220]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c714:	f7f5 fa49 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	2b0f      	cmp	r3, #15
 800c71e:	d904      	bls.n	800c72a <FMC_SDRAM_Timing_Init+0x72>
 800c720:	f240 3142 	movw	r1, #834	; 0x342
 800c724:	4832      	ldr	r0, [pc, #200]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c726:	f7f5 fa40 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800c72a:	6963      	ldr	r3, [r4, #20]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	2b0f      	cmp	r3, #15
 800c730:	d904      	bls.n	800c73c <FMC_SDRAM_Timing_Init+0x84>
 800c732:	f240 3143 	movw	r1, #835	; 0x343
 800c736:	482e      	ldr	r0, [pc, #184]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c738:	f7f5 fa37 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800c73c:	69a3      	ldr	r3, [r4, #24]
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b0f      	cmp	r3, #15
 800c742:	d904      	bls.n	800c74e <FMC_SDRAM_Timing_Init+0x96>
 800c744:	f44f 7151 	mov.w	r1, #836	; 0x344
 800c748:	4829      	ldr	r0, [pc, #164]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c74a:	f7f5 fa2e 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800c74e:	2e01      	cmp	r6, #1
 800c750:	d925      	bls.n	800c79e <FMC_SDRAM_Timing_Init+0xe6>
 800c752:	f240 3145 	movw	r1, #837	; 0x345
 800c756:	4826      	ldr	r0, [pc, #152]	; (800c7f0 <FMC_SDRAM_Timing_Init+0x138>)
 800c758:	f7f5 fa27 	bl	8001baa <assert_failed>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c75c:	6863      	ldr	r3, [r4, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c75e:	68aa      	ldr	r2, [r5, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c760:	1e59      	subs	r1, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c762:	68a3      	ldr	r3, [r4, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c764:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c768:	3b01      	subs	r3, #1
 800c76a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c76c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c770:	6821      	ldr	r1, [r4, #0]
 800c772:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c774:	430b      	orrs	r3, r1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c776:	68e1      	ldr	r1, [r4, #12]
 800c778:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c77a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c77e:	6921      	ldr	r1, [r4, #16]
 800c780:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c782:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800c786:	6961      	ldr	r1, [r4, #20]
 800c788:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c78a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800c78e:	69a1      	ldr	r1, [r4, #24]
 800c790:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c792:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c796:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c798:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c79a:	2000      	movs	r0, #0
 800c79c:	bd70      	pop	{r4, r5, r6, pc}
  if (Bank != FMC_SDRAM_BANK2) 
 800c79e:	d1dd      	bne.n	800c75c <FMC_SDRAM_Timing_Init+0xa4>
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c7a0:	68e2      	ldr	r2, [r4, #12]
                        (((Timing->RPDelay)-1) << 20)); 
 800c7a2:	6963      	ldr	r3, [r4, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c7a4:	1e50      	subs	r0, r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c7a6:	68a9      	ldr	r1, [r5, #8]
                        (((Timing->RPDelay)-1) << 20)); 
 800c7a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7aa:	6863      	ldr	r3, [r4, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c7ac:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
                        (((Timing->RPDelay)-1) << 20)); 
 800c7b0:	0512      	lsls	r2, r2, #20
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c7b2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c7b6:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7ba:	1e58      	subs	r0, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7bc:	68a3      	ldr	r3, [r4, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c7be:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c7c0:	68e9      	ldr	r1, [r5, #12]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7c2:	3b01      	subs	r3, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c7c4:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7c8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7ca:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7ce:	6820      	ldr	r0, [r4, #0]
 800c7d0:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7d2:	4303      	orrs	r3, r0
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c7d4:	6920      	ldr	r0, [r4, #16]
 800c7d6:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800c7dc:	69a0      	ldr	r0, [r4, #24]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c7de:	60aa      	str	r2, [r5, #8]
                       (((Timing->RCDDelay)-1) << 24));   
 800c7e0:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7e2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c7e6:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c7e8:	60eb      	str	r3, [r5, #12]
 800c7ea:	e7d6      	b.n	800c79a <FMC_SDRAM_Timing_Init+0xe2>
 800c7ec:	a0000140 	.word	0xa0000140
 800c7f0:	080348ae 	.word	0x080348ae

0800c7f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 800c7f4:	2300      	movs	r3, #0
{
 800c7f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpr = 0;
 800c7f8:	9301      	str	r3, [sp, #4]
{
 800c7fa:	4605      	mov	r5, r0
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c7fc:	4b1f      	ldr	r3, [pc, #124]	; (800c87c <FMC_SDRAM_SendCommand+0x88>)
{
 800c7fe:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c800:	4298      	cmp	r0, r3
 800c802:	d004      	beq.n	800c80e <FMC_SDRAM_SendCommand+0x1a>
 800c804:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 800c808:	481d      	ldr	r0, [pc, #116]	; (800c880 <FMC_SDRAM_SendCommand+0x8c>)
 800c80a:	f7f5 f9ce 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	2b06      	cmp	r3, #6
 800c812:	d904      	bls.n	800c81e <FMC_SDRAM_SendCommand+0x2a>
 800c814:	f240 31d1 	movw	r1, #977	; 0x3d1
 800c818:	4819      	ldr	r0, [pc, #100]	; (800c880 <FMC_SDRAM_SendCommand+0x8c>)
 800c81a:	f7f5 f9c6 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800c81e:	6863      	ldr	r3, [r4, #4]
 800c820:	2b10      	cmp	r3, #16
 800c822:	d008      	beq.n	800c836 <FMC_SDRAM_SendCommand+0x42>
 800c824:	f023 0310 	bic.w	r3, r3, #16
 800c828:	2b08      	cmp	r3, #8
 800c82a:	d004      	beq.n	800c836 <FMC_SDRAM_SendCommand+0x42>
 800c82c:	f240 31d2 	movw	r1, #978	; 0x3d2
 800c830:	4813      	ldr	r0, [pc, #76]	; (800c880 <FMC_SDRAM_SendCommand+0x8c>)
 800c832:	f7f5 f9ba 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	3b01      	subs	r3, #1
 800c83a:	2b0f      	cmp	r3, #15
 800c83c:	d904      	bls.n	800c848 <FMC_SDRAM_SendCommand+0x54>
 800c83e:	f240 31d3 	movw	r1, #979	; 0x3d3
 800c842:	480f      	ldr	r0, [pc, #60]	; (800c880 <FMC_SDRAM_SendCommand+0x8c>)
 800c844:	f7f5 f9b1 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 800c848:	68e3      	ldr	r3, [r4, #12]
 800c84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c84e:	d304      	bcc.n	800c85a <FMC_SDRAM_SendCommand+0x66>
 800c850:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800c854:	480a      	ldr	r0, [pc, #40]	; (800c880 <FMC_SDRAM_SendCommand+0x8c>)
 800c856:	f7f5 f9a8 	bl	8001baa <assert_failed>
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800c85a:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c85c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c860:	4313      	orrs	r3, r2
                    ((Command->ModeRegisterDefinition) << 9)
 800c862:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c864:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c868:	68a2      	ldr	r2, [r4, #8]
 800c86a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c86c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c870:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800c872:	9b01      	ldr	r3, [sp, #4]
 800c874:	612b      	str	r3, [r5, #16]
}
 800c876:	b003      	add	sp, #12
 800c878:	bd30      	pop	{r4, r5, pc}
 800c87a:	bf00      	nop
 800c87c:	a0000140 	.word	0xa0000140
 800c880:	080348ae 	.word	0x080348ae

0800c884 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c884:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <FMC_SDRAM_ProgramRefreshRate+0x34>)
{
 800c888:	4604      	mov	r4, r0
 800c88a:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c88c:	4298      	cmp	r0, r3
 800c88e:	d004      	beq.n	800c89a <FMC_SDRAM_ProgramRefreshRate+0x16>
 800c890:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800c894:	4809      	ldr	r0, [pc, #36]	; (800c8bc <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800c896:	f7f5 f988 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800c89a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800c89e:	d304      	bcc.n	800c8aa <FMC_SDRAM_ProgramRefreshRate+0x26>
 800c8a0:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 800c8a4:	4805      	ldr	r0, [pc, #20]	; (800c8bc <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800c8a6:	f7f5 f980 	bl	8001baa <assert_failed>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c8aa:	6961      	ldr	r1, [r4, #20]
  
  return HAL_OK;   
}
 800c8ac:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800c8ae:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800c8b2:	6161      	str	r1, [r4, #20]
}
 800c8b4:	bd38      	pop	{r3, r4, r5, pc}
 800c8b6:	bf00      	nop
 800c8b8:	a0000140 	.word	0xa0000140
 800c8bc:	080348ae 	.word	0x080348ae

0800c8c0 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c8c0:	4b11      	ldr	r3, [pc, #68]	; (800c908 <SDMMC_GetCmdResp2+0x48>)
 800c8c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8cc:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8d0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800c8d2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c8d6:	d314      	bcc.n	800c902 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c8d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c8da:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c8de:	d0f8      	beq.n	800c8d2 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8e2:	075b      	lsls	r3, r3, #29
 800c8e4:	d503      	bpl.n	800c8ee <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8e6:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8e8:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c8f0:	f013 0301 	ands.w	r3, r3, #1
 800c8f4:	d001      	beq.n	800c8fa <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7f6      	b.n	800c8e8 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c8fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c8fe:	6382      	str	r2, [r0, #56]	; 0x38
 800c900:	e7f3      	b.n	800c8ea <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c906:	e7f0      	b.n	800c8ea <SDMMC_GetCmdResp2+0x2a>
 800c908:	200000cc 	.word	0x200000cc

0800c90c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c90c:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <SDMMC_GetCmdResp3+0x40>)
 800c90e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	fbb3 f2f2 	udiv	r2, r3, r2
 800c918:	f241 3388 	movw	r3, #5000	; 0x1388
 800c91c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800c91e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c922:	d30f      	bcc.n	800c944 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c924:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c926:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c92a:	d0f8      	beq.n	800c91e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c92c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c92e:	f013 0304 	ands.w	r3, r3, #4
 800c932:	d003      	beq.n	800c93c <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c934:	2304      	movs	r3, #4
 800c936:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800c938:	4618      	mov	r0, r3
 800c93a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c93c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c940:	6382      	str	r2, [r0, #56]	; 0x38
 800c942:	e7f9      	b.n	800c938 <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c944:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	200000cc 	.word	0x200000cc

0800c950 <SDMMC_Init>:
{
 800c950:	b084      	sub	sp, #16
 800c952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c956:	4605      	mov	r5, r0
 800c958:	a809      	add	r0, sp, #36	; 0x24
 800c95a:	460c      	mov	r4, r1
 800c95c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <SDMMC_Init+0xb0>)
 800c962:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c966:	429d      	cmp	r5, r3
 800c968:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c96c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800c970:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c972:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c974:	d003      	beq.n	800c97e <SDMMC_Init+0x2e>
 800c976:	21d8      	movs	r1, #216	; 0xd8
 800c978:	4822      	ldr	r0, [pc, #136]	; (800ca04 <SDMMC_Init+0xb4>)
 800c97a:	f7f5 f916 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 800c97e:	f434 5300 	bics.w	r3, r4, #8192	; 0x2000
 800c982:	d003      	beq.n	800c98c <SDMMC_Init+0x3c>
 800c984:	21d9      	movs	r1, #217	; 0xd9
 800c986:	481f      	ldr	r0, [pc, #124]	; (800ca04 <SDMMC_Init+0xb4>)
 800c988:	f7f5 f90f 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 800c98c:	f43a 6380 	bics.w	r3, sl, #1024	; 0x400
 800c990:	d003      	beq.n	800c99a <SDMMC_Init+0x4a>
 800c992:	21da      	movs	r1, #218	; 0xda
 800c994:	481b      	ldr	r0, [pc, #108]	; (800ca04 <SDMMC_Init+0xb4>)
 800c996:	f7f5 f908 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800c99a:	f439 7300 	bics.w	r3, r9, #512	; 0x200
 800c99e:	d003      	beq.n	800c9a8 <SDMMC_Init+0x58>
 800c9a0:	21db      	movs	r1, #219	; 0xdb
 800c9a2:	4818      	ldr	r0, [pc, #96]	; (800ca04 <SDMMC_Init+0xb4>)
 800c9a4:	f7f5 f901 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800c9a8:	f438 6300 	bics.w	r3, r8, #2048	; 0x800
 800c9ac:	d006      	beq.n	800c9bc <SDMMC_Init+0x6c>
 800c9ae:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 800c9b2:	d003      	beq.n	800c9bc <SDMMC_Init+0x6c>
 800c9b4:	21dc      	movs	r1, #220	; 0xdc
 800c9b6:	4813      	ldr	r0, [pc, #76]	; (800ca04 <SDMMC_Init+0xb4>)
 800c9b8:	f7f5 f8f7 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800c9bc:	f437 4380 	bics.w	r3, r7, #16384	; 0x4000
 800c9c0:	d003      	beq.n	800c9ca <SDMMC_Init+0x7a>
 800c9c2:	21dd      	movs	r1, #221	; 0xdd
 800c9c4:	480f      	ldr	r0, [pc, #60]	; (800ca04 <SDMMC_Init+0xb4>)
 800c9c6:	f7f5 f8f0 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800c9ca:	2eff      	cmp	r6, #255	; 0xff
 800c9cc:	d903      	bls.n	800c9d6 <SDMMC_Init+0x86>
 800c9ce:	21de      	movs	r1, #222	; 0xde
 800c9d0:	480c      	ldr	r0, [pc, #48]	; (800ca04 <SDMMC_Init+0xb4>)
 800c9d2:	f7f5 f8ea 	bl	8001baa <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800c9d6:	ea44 030a 	orr.w	r3, r4, sl
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9da:	686a      	ldr	r2, [r5, #4]
}
 800c9dc:	2000      	movs	r0, #0
             Init.ClockBypass         |\
 800c9de:	ea43 0309 	orr.w	r3, r3, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9e2:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockPowerSave      |\
 800c9e6:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.BusWide             |\
 800c9ee:	433b      	orrs	r3, r7
             Init.HardwareFlowControl |\
 800c9f0:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	606b      	str	r3, [r5, #4]
}
 800c9f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fa:	b004      	add	sp, #16
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	40012c00 	.word	0x40012c00
 800ca04:	080348eb 	.word	0x080348eb

0800ca08 <SDMMC_ReadFIFO>:
 800ca08:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800ca0c:	4770      	bx	lr

0800ca0e <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	6003      	str	r3, [r0, #0]
}
 800ca12:	2000      	movs	r0, #0
 800ca14:	4770      	bx	lr

0800ca16 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ca16:	6800      	ldr	r0, [r0, #0]
}
 800ca18:	f000 0003 	and.w	r0, r0, #3
 800ca1c:	4770      	bx	lr
	...

0800ca20 <SDMMC_SendCommand>:
{
 800ca20:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800ca22:	684b      	ldr	r3, [r1, #4]
{
 800ca24:	4605      	mov	r5, r0
 800ca26:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800ca28:	2b3f      	cmp	r3, #63	; 0x3f
 800ca2a:	d904      	bls.n	800ca36 <SDMMC_SendCommand+0x16>
 800ca2c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800ca30:	481a      	ldr	r0, [pc, #104]	; (800ca9c <SDMMC_SendCommand+0x7c>)
 800ca32:	f7f5 f8ba 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800ca3c:	d006      	beq.n	800ca4c <SDMMC_SendCommand+0x2c>
 800ca3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ca40:	d004      	beq.n	800ca4c <SDMMC_SendCommand+0x2c>
 800ca42:	f240 1165 	movw	r1, #357	; 0x165
 800ca46:	4815      	ldr	r0, [pc, #84]	; (800ca9c <SDMMC_SendCommand+0x7c>)
 800ca48:	f7f5 f8af 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800ca4c:	68e3      	ldr	r3, [r4, #12]
 800ca4e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ca52:	d007      	beq.n	800ca64 <SDMMC_SendCommand+0x44>
 800ca54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca58:	d004      	beq.n	800ca64 <SDMMC_SendCommand+0x44>
 800ca5a:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800ca5e:	480f      	ldr	r0, [pc, #60]	; (800ca9c <SDMMC_SendCommand+0x7c>)
 800ca60:	f7f5 f8a3 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800ca6a:	d004      	beq.n	800ca76 <SDMMC_SendCommand+0x56>
 800ca6c:	f240 1167 	movw	r1, #359	; 0x167
 800ca70:	480a      	ldr	r0, [pc, #40]	; (800ca9c <SDMMC_SendCommand+0x7c>)
 800ca72:	f7f5 f89a 	bl	8001baa <assert_failed>
  SDMMCx->ARG = Command->Argument;
 800ca76:	6823      	ldr	r3, [r4, #0]
}
 800ca78:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca7a:	68a1      	ldr	r1, [r4, #8]
  SDMMCx->ARG = Command->Argument;
 800ca7c:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca7e:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca80:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca82:	430b      	orrs	r3, r1
                       Command->Response         |\
 800ca84:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca86:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->Response         |\
 800ca8a:	430b      	orrs	r3, r1
                       Command->WaitForInterrupt |\
 800ca8c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca8e:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 800ca92:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ca94:	4313      	orrs	r3, r2
 800ca96:	60eb      	str	r3, [r5, #12]
}
 800ca98:	bd38      	pop	{r3, r4, r5, pc}
 800ca9a:	bf00      	nop
 800ca9c:	080348eb 	.word	0x080348eb

0800caa0 <SDMMC_GetResponse>:
  __IO uint32_t tmp = 0;
 800caa0:	2300      	movs	r3, #0
{
 800caa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmp = 0;
 800caa4:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 800caa6:	f031 030c 	bics.w	r3, r1, #12
{
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_RESP(Response));
 800caae:	d004      	beq.n	800caba <SDMMC_GetResponse+0x1a>
 800cab0:	f240 1193 	movw	r1, #403	; 0x193
 800cab4:	4804      	ldr	r0, [pc, #16]	; (800cac8 <SDMMC_GetResponse+0x28>)
 800cab6:	f7f5 f878 	bl	8001baa <assert_failed>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800caba:	3414      	adds	r4, #20
 800cabc:	442c      	add	r4, r5
 800cabe:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800cac0:	9b01      	ldr	r3, [sp, #4]
 800cac2:	6818      	ldr	r0, [r3, #0]
}  
 800cac4:	b003      	add	sp, #12
 800cac6:	bd30      	pop	{r4, r5, pc}
 800cac8:	080348eb 	.word	0x080348eb

0800cacc <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800cacc:	4b44      	ldr	r3, [pc, #272]	; (800cbe0 <SDMMC_GetCmdResp1+0x114>)
{
 800cace:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800cad6:	fbb3 f3f4 	udiv	r3, r3, r4
 800cada:	435a      	muls	r2, r3
    if (count-- == 0)
 800cadc:	2a00      	cmp	r2, #0
 800cade:	d049      	beq.n	800cb74 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cae0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cae2:	3a01      	subs	r2, #1
 800cae4:	f013 0f45 	tst.w	r3, #69	; 0x45
 800cae8:	d0f8      	beq.n	800cadc <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800caec:	075c      	lsls	r4, r3, #29
 800caee:	d503      	bpl.n	800caf8 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800caf0:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800caf2:	6383      	str	r3, [r0, #56]	; 0x38
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cafa:	f013 0301 	ands.w	r3, r3, #1
 800cafe:	d001      	beq.n	800cb04 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb00:	2301      	movs	r3, #1
 800cb02:	e7f6      	b.n	800caf2 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 800cb04:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb06:	b2d2      	uxtb	r2, r2
 800cb08:	4291      	cmp	r1, r2
 800cb0a:	d136      	bne.n	800cb7a <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cb0c:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb10:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cb12:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb14:	f7ff ffc4 	bl	800caa0 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb18:	4b32      	ldr	r3, [pc, #200]	; (800cbe4 <SDMMC_GetCmdResp1+0x118>)
 800cb1a:	4003      	ands	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d0e9      	beq.n	800caf4 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb20:	2800      	cmp	r0, #0
 800cb22:	db2c      	blt.n	800cb7e <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb24:	0042      	lsls	r2, r0, #1
 800cb26:	d42d      	bmi.n	800cb84 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb28:	0084      	lsls	r4, r0, #2
 800cb2a:	d42d      	bmi.n	800cb88 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb2c:	00c1      	lsls	r1, r0, #3
 800cb2e:	d42d      	bmi.n	800cb8c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb30:	0102      	lsls	r2, r0, #4
 800cb32:	d42e      	bmi.n	800cb92 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb34:	0144      	lsls	r4, r0, #5
 800cb36:	d42f      	bmi.n	800cb98 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb38:	01c1      	lsls	r1, r0, #7
 800cb3a:	d430      	bmi.n	800cb9e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb3c:	0202      	lsls	r2, r0, #8
 800cb3e:	d431      	bmi.n	800cba4 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb40:	0244      	lsls	r4, r0, #9
 800cb42:	d432      	bmi.n	800cbaa <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb44:	0281      	lsls	r1, r0, #10
 800cb46:	d433      	bmi.n	800cbb0 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb48:	02c2      	lsls	r2, r0, #11
 800cb4a:	d434      	bmi.n	800cbb6 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb4c:	0344      	lsls	r4, r0, #13
 800cb4e:	d435      	bmi.n	800cbbc <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb50:	0381      	lsls	r1, r0, #14
 800cb52:	d436      	bmi.n	800cbc2 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cb54:	03c2      	lsls	r2, r0, #15
 800cb56:	d437      	bmi.n	800cbc8 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb58:	0404      	lsls	r4, r0, #16
 800cb5a:	d438      	bmi.n	800cbce <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb5c:	0441      	lsls	r1, r0, #17
 800cb5e:	d439      	bmi.n	800cbd4 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb60:	0482      	lsls	r2, r0, #18
 800cb62:	d43a      	bmi.n	800cbda <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb64:	f010 0f08 	tst.w	r0, #8
 800cb68:	bf14      	ite	ne
 800cb6a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800cb6e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800cb72:	e7bf      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800cb74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb78:	e7bc      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e7ba      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb82:	e7b7      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb84:	2340      	movs	r3, #64	; 0x40
 800cb86:	e7b5      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb88:	2380      	movs	r3, #128	; 0x80
 800cb8a:	e7b3      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb90:	e7b0      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb96:	e7ad      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9c:	e7aa      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cba2:	e7a7      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cba8:	e7a4      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbae:	e7a1      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbb4:	e79e      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 800cbb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbba:	e79b      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cbbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cbc0:	e798      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbc6:	e795      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbcc:	e792      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cbd2:	e78f      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cbd8:	e78c      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 800cbda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cbde:	e789      	b.n	800caf4 <SDMMC_GetCmdResp1+0x28>
 800cbe0:	200000cc 	.word	0x200000cc
 800cbe4:	fdffe008 	.word	0xfdffe008

0800cbe8 <SDMMC_ConfigData>:
{
 800cbe8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cbea:	684b      	ldr	r3, [r1, #4]
{
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cbf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbf4:	d304      	bcc.n	800cc00 <SDMMC_ConfigData+0x18>
 800cbf6:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800cbfa:	4821      	ldr	r0, [pc, #132]	; (800cc80 <SDMMC_ConfigData+0x98>)
 800cbfc:	f7f4 ffd5 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800cc00:	68a3      	ldr	r3, [r4, #8]
 800cc02:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 800cc06:	f023 0110 	bic.w	r1, r3, #16
 800cc0a:	d00c      	beq.n	800cc26 <SDMMC_ConfigData+0x3e>
 800cc0c:	2a40      	cmp	r2, #64	; 0x40
 800cc0e:	d00a      	beq.n	800cc26 <SDMMC_ConfigData+0x3e>
 800cc10:	2a80      	cmp	r2, #128	; 0x80
 800cc12:	d008      	beq.n	800cc26 <SDMMC_ConfigData+0x3e>
 800cc14:	29c0      	cmp	r1, #192	; 0xc0
 800cc16:	d006      	beq.n	800cc26 <SDMMC_ConfigData+0x3e>
 800cc18:	2be0      	cmp	r3, #224	; 0xe0
 800cc1a:	d004      	beq.n	800cc26 <SDMMC_ConfigData+0x3e>
 800cc1c:	f240 11a9 	movw	r1, #425	; 0x1a9
 800cc20:	4817      	ldr	r0, [pc, #92]	; (800cc80 <SDMMC_ConfigData+0x98>)
 800cc22:	f7f4 ffc2 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800cc26:	68e3      	ldr	r3, [r4, #12]
 800cc28:	f033 0302 	bics.w	r3, r3, #2
 800cc2c:	d004      	beq.n	800cc38 <SDMMC_ConfigData+0x50>
 800cc2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc32:	4813      	ldr	r0, [pc, #76]	; (800cc80 <SDMMC_ConfigData+0x98>)
 800cc34:	f7f4 ffb9 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	f033 0304 	bics.w	r3, r3, #4
 800cc3e:	d004      	beq.n	800cc4a <SDMMC_ConfigData+0x62>
 800cc40:	f240 11ab 	movw	r1, #427	; 0x1ab
 800cc44:	480e      	ldr	r0, [pc, #56]	; (800cc80 <SDMMC_ConfigData+0x98>)
 800cc46:	f7f4 ffb0 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800cc4a:	6963      	ldr	r3, [r4, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d904      	bls.n	800cc5a <SDMMC_ConfigData+0x72>
 800cc50:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800cc54:	480a      	ldr	r0, [pc, #40]	; (800cc80 <SDMMC_ConfigData+0x98>)
 800cc56:	f7f4 ffa8 	bl	8001baa <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cc5a:	6823      	ldr	r3, [r4, #0]
}
 800cc5c:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc5e:	68e1      	ldr	r1, [r4, #12]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cc60:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800cc62:	6863      	ldr	r3, [r4, #4]
 800cc64:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc66:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc6a:	430b      	orrs	r3, r1
                       Data->TransferDir   |\
 800cc6c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc6e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 800cc72:	430b      	orrs	r3, r1
                       Data->TransferMode  |\
 800cc74:	6961      	ldr	r1, [r4, #20]
 800cc76:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	bf00      	nop
 800cc80:	080348eb 	.word	0x080348eb

0800cc84 <SDMMC_CmdBlockLength>:
{
 800cc84:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc86:	2340      	movs	r3, #64	; 0x40
{
 800cc88:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc8a:	2410      	movs	r4, #16
{
 800cc8c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc8e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc90:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc92:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc94:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc96:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc98:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc9c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc9e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cca0:	f7ff febe 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cca4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cca8:	4621      	mov	r1, r4
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7ff ff0e 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800ccb0:	b007      	add	sp, #28
 800ccb2:	bd30      	pop	{r4, r5, pc}

0800ccb4 <SDMMC_CmdReadSingleBlock>:
{
 800ccb4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccb6:	2340      	movs	r3, #64	; 0x40
{
 800ccb8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ccba:	2411      	movs	r4, #17
{
 800ccbc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccbe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccc0:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccc2:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccc4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccc6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cccc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccce:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccd0:	f7ff fea6 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ccd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd8:	4621      	mov	r1, r4
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f7ff fef6 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cce0:	b007      	add	sp, #28
 800cce2:	bd30      	pop	{r4, r5, pc}

0800cce4 <SDMMC_CmdReadMultiBlock>:
{
 800cce4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce6:	2340      	movs	r3, #64	; 0x40
{
 800cce8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccea:	2412      	movs	r4, #18
{
 800ccec:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ccee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccf0:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ccf2:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ccf6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccfc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccfe:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd00:	f7ff fe8e 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd04:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd08:	4621      	mov	r1, r4
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f7ff fede 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cd10:	b007      	add	sp, #28
 800cd12:	bd30      	pop	{r4, r5, pc}

0800cd14 <SDMMC_CmdWriteSingleBlock>:
{
 800cd14:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd16:	2340      	movs	r3, #64	; 0x40
{
 800cd18:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd1a:	2418      	movs	r4, #24
{
 800cd1c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd1e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd20:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd22:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd24:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd26:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd28:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd2c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd2e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd30:	f7ff fe76 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd38:	4621      	mov	r1, r4
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f7ff fec6 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cd40:	b007      	add	sp, #28
 800cd42:	bd30      	pop	{r4, r5, pc}

0800cd44 <SDMMC_CmdWriteMultiBlock>:
{
 800cd44:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd46:	2340      	movs	r3, #64	; 0x40
{
 800cd48:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd4a:	2419      	movs	r4, #25
{
 800cd4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd4e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd50:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd52:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd54:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd56:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd5c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd5e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd60:	f7ff fe5e 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f7ff feae 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cd70:	b007      	add	sp, #28
 800cd72:	bd30      	pop	{r4, r5, pc}

0800cd74 <SDMMC_CmdStopTransfer>:
{
 800cd74:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cd76:	2300      	movs	r3, #0
{
 800cd78:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd7a:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd7c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800cd7e:	9301      	str	r3, [sp, #4]
{
 800cd80:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd82:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd88:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd8a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd8c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd8e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd90:	f7ff fe46 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800cd94:	4a03      	ldr	r2, [pc, #12]	; (800cda4 <SDMMC_CmdStopTransfer+0x30>)
 800cd96:	4621      	mov	r1, r4
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f7ff fe97 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cd9e:	b007      	add	sp, #28
 800cda0:	bd30      	pop	{r4, r5, pc}
 800cda2:	bf00      	nop
 800cda4:	05f5e100 	.word	0x05f5e100

0800cda8 <SDMMC_CmdSelDesel>:
{
 800cda8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdaa:	2340      	movs	r3, #64	; 0x40
{
 800cdac:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdae:	2407      	movs	r4, #7
{
 800cdb0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdb2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdb4:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdb8:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdba:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdc0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdc2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdc4:	f7ff fe2c 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cdc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7ff fe7c 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cdd4:	b007      	add	sp, #28
 800cdd6:	bd30      	pop	{r4, r5, pc}

0800cdd8 <SDMMC_CmdGoIdleState>:
{
 800cdd8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cdda:	2300      	movs	r3, #0
{
 800cddc:	b086      	sub	sp, #24
 800cdde:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800cde0:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cde4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cde6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cde8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdee:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf0:	f7ff fe16 	bl	800ca20 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cdf4:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <SDMMC_CmdGoIdleState+0x4c>)
 800cdf6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce00:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce04:	4353      	muls	r3, r2
    if (count-- == 0)
 800ce06:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ce0a:	d308      	bcc.n	800ce1e <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ce0e:	0612      	lsls	r2, r2, #24
 800ce10:	d5f9      	bpl.n	800ce06 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ce12:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800ce16:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ce18:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ce1a:	b006      	add	sp, #24
 800ce1c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800ce1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800ce22:	e7fa      	b.n	800ce1a <SDMMC_CmdGoIdleState+0x42>
 800ce24:	200000cc 	.word	0x200000cc

0800ce28 <SDMMC_CmdOperCond>:
{
 800ce28:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce2a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 800ce2e:	b086      	sub	sp, #24
 800ce30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce32:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce34:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce36:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce38:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce3a:	2340      	movs	r3, #64	; 0x40
 800ce3c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce46:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce48:	f7ff fdea 	bl	800ca20 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800ce4c:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <SDMMC_CmdOperCond+0x6c>)
 800ce4e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce58:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce5c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800ce5e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ce62:	d314      	bcc.n	800ce8e <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ce64:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ce66:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ce6a:	d0f8      	beq.n	800ce5e <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ce6e:	f012 0204 	ands.w	r2, r2, #4
 800ce72:	d004      	beq.n	800ce7e <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce74:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce76:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce78:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ce7a:	b006      	add	sp, #24
 800ce7c:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ce7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ce80:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800ce84:	d0f9      	beq.n	800ce7a <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce86:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800ce88:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ce8a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce8c:	e7f5      	b.n	800ce7a <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800ce8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ce92:	e7f2      	b.n	800ce7a <SDMMC_CmdOperCond+0x52>
 800ce94:	200000cc 	.word	0x200000cc

0800ce98 <SDMMC_CmdAppCommand>:
{
 800ce98:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce9a:	2340      	movs	r3, #64	; 0x40
{
 800ce9c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce9e:	2437      	movs	r4, #55	; 0x37
{
 800cea0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cea2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cea4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cea6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cea8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ceaa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ceb0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ceb2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceb4:	f7ff fdb4 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ceb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cebc:	4621      	mov	r1, r4
 800cebe:	4628      	mov	r0, r5
 800cec0:	f7ff fe04 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cec4:	b007      	add	sp, #28
 800cec6:	bd30      	pop	{r4, r5, pc}

0800cec8 <SDMMC_CmdAppOperCommand>:
{
 800cec8:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ceca:	2329      	movs	r3, #41	; 0x29
{
 800cecc:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cece:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 800ced2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ced4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ced6:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800ced8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cedc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cede:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cee0:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cee2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cee4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceea:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceec:	f7ff fd98 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cef0:	4620      	mov	r0, r4
 800cef2:	f7ff fd0b 	bl	800c90c <SDMMC_GetCmdResp3>
}
 800cef6:	b006      	add	sp, #24
 800cef8:	bd10      	pop	{r4, pc}

0800cefa <SDMMC_CmdSendSCR>:
{
 800cefa:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cefc:	2300      	movs	r3, #0
{
 800cefe:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf00:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf02:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800cf04:	9301      	str	r3, [sp, #4]
{
 800cf06:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf08:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf0e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf10:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf12:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf14:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf16:	f7ff fd83 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cf1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7ff fdd3 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800cf26:	b007      	add	sp, #28
 800cf28:	bd30      	pop	{r4, r5, pc}

0800cf2a <SDMMC_CmdSendCID>:
{
 800cf2a:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cf2c:	2300      	movs	r3, #0
{
 800cf2e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf30:	2202      	movs	r2, #2
{
 800cf32:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800cf34:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf36:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf38:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf3a:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf3c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf42:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf44:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf46:	f7ff fd6b 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f7ff fcb8 	bl	800c8c0 <SDMMC_GetCmdResp2>
}
 800cf50:	b006      	add	sp, #24
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <SDMMC_CmdSendCSD>:
{
 800cf54:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf56:	2309      	movs	r3, #9
{
 800cf58:	b086      	sub	sp, #24
 800cf5a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf5c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf5e:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf60:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf62:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cf64:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf66:	2300      	movs	r3, #0
 800cf68:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf6e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf70:	f7ff fd56 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cf74:	4620      	mov	r0, r4
 800cf76:	f7ff fca3 	bl	800c8c0 <SDMMC_GetCmdResp2>
}
 800cf7a:	b006      	add	sp, #24
 800cf7c:	bd10      	pop	{r4, pc}
	...

0800cf80 <SDMMC_CmdSetRelAdd>:
{
 800cf80:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cf82:	2300      	movs	r3, #0
{
 800cf84:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf86:	2203      	movs	r2, #3
{
 800cf88:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800cf8a:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf8c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf8e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf90:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf92:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf98:	9203      	str	r2, [sp, #12]
{
 800cf9a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf9e:	f7ff fd3f 	bl	800ca20 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cfa2:	4b20      	ldr	r3, [pc, #128]	; (800d024 <SDMMC_CmdSetRelAdd+0xa4>)
 800cfa4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfae:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfb2:	4353      	muls	r3, r2
    if (count-- == 0)
 800cfb4:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cfb8:	d32b      	bcc.n	800d012 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cfba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cfbc:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cfc0:	d0f8      	beq.n	800cfb4 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfc4:	075a      	lsls	r2, r3, #29
 800cfc6:	d503      	bpl.n	800cfd0 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfc8:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800cfcc:	b007      	add	sp, #28
 800cfce:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfd2:	f011 0101 	ands.w	r1, r1, #1
 800cfd6:	d001      	beq.n	800cfdc <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfd8:	2001      	movs	r0, #1
 800cfda:	e7f6      	b.n	800cfca <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 800cfdc:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	d119      	bne.n	800d018 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cfe4:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cfe8:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cfea:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cfec:	f7ff fd58 	bl	800caa0 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cff0:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 800cff4:	d103      	bne.n	800cffe <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cff6:	0c00      	lsrs	r0, r0, #16
 800cff8:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800cffa:	4618      	mov	r0, r3
 800cffc:	e7e6      	b.n	800cfcc <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cffe:	0443      	lsls	r3, r0, #17
 800d000:	d40c      	bmi.n	800d01c <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d002:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800d006:	bf14      	ite	ne
 800d008:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d00c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d010:	e7dc      	b.n	800cfcc <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800d012:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d016:	e7d9      	b.n	800cfcc <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d018:	2001      	movs	r0, #1
 800d01a:	e7d7      	b.n	800cfcc <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d01c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d020:	e7d4      	b.n	800cfcc <SDMMC_CmdSetRelAdd+0x4c>
 800d022:	bf00      	nop
 800d024:	200000cc 	.word	0x200000cc

0800d028 <SDMMC_CmdSendStatus>:
{
 800d028:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d02a:	2340      	movs	r3, #64	; 0x40
{
 800d02c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d02e:	240d      	movs	r4, #13
{
 800d030:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d032:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d034:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d036:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d038:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d03a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d040:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d042:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d044:	f7ff fcec 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d048:	f241 3288 	movw	r2, #5000	; 0x1388
 800d04c:	4621      	mov	r1, r4
 800d04e:	4628      	mov	r0, r5
 800d050:	f7ff fd3c 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800d054:	b007      	add	sp, #28
 800d056:	bd30      	pop	{r4, r5, pc}

0800d058 <SDMMC_CmdSwitch>:
{
 800d058:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d05a:	2340      	movs	r3, #64	; 0x40
{
 800d05c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d05e:	2406      	movs	r4, #6
{
 800d060:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d062:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d064:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 800d066:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d068:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d06a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d06c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d070:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d072:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d074:	f7ff fcd4 	bl	800ca20 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800d078:	f241 3288 	movw	r2, #5000	; 0x1388
 800d07c:	4621      	mov	r1, r4
 800d07e:	4628      	mov	r0, r5
 800d080:	f7ff fd24 	bl	800cacc <SDMMC_GetCmdResp1>
}
 800d084:	b007      	add	sp, #28
 800d086:	bd30      	pop	{r4, r5, pc}

0800d088 <SDMMC_CmdBusWidth>:
 800d088:	f7ff bfe6 	b.w	800d058 <SDMMC_CmdSwitch>

0800d08c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d08c:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d08e:	3b01      	subs	r3, #1
 800d090:	d101      	bne.n	800d096 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800d092:	2003      	movs	r0, #3
 800d094:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d096:	6902      	ldr	r2, [r0, #16]
 800d098:	2a00      	cmp	r2, #0
 800d09a:	daf8      	bge.n	800d08e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d09c:	6903      	ldr	r3, [r0, #16]
 800d09e:	4a06      	ldr	r2, [pc, #24]	; (800d0b8 <USB_CoreReset+0x2c>)
 800d0a0:	f043 0301 	orr.w	r3, r3, #1
 800d0a4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800d0a6:	3a01      	subs	r2, #1
 800d0a8:	d0f3      	beq.n	800d092 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0aa:	6903      	ldr	r3, [r0, #16]
 800d0ac:	f013 0301 	ands.w	r3, r3, #1
 800d0b0:	d1f9      	bne.n	800d0a6 <USB_CoreReset+0x1a>

  return HAL_OK;
 800d0b2:	4618      	mov	r0, r3
}
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	00030d41 	.word	0x00030d41

0800d0bc <USB_CoreInit>:
{
 800d0bc:	b084      	sub	sp, #16
 800d0be:	b538      	push	{r3, r4, r5, lr}
 800d0c0:	ad05      	add	r5, sp, #20
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d126      	bne.n	800d11c <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d0d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0d4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d0d6:	68c3      	ldr	r3, [r0, #12]
 800d0d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d0dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0e0:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d0e2:	68c3      	ldr	r3, [r0, #12]
 800d0e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d0e8:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d0ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d103      	bne.n	800d0f8 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d0f0:	68c3      	ldr	r3, [r0, #12]
 800d0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0f6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7ff ffc7 	bl	800d08c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800d0fe:	9b08      	ldr	r3, [sp, #32]
 800d100:	2b01      	cmp	r3, #1
 800d102:	d107      	bne.n	800d114 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d104:	68a3      	ldr	r3, [r4, #8]
 800d106:	f043 0306 	orr.w	r3, r3, #6
 800d10a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d10c:	68a3      	ldr	r3, [r4, #8]
 800d10e:	f043 0320 	orr.w	r3, r3, #32
 800d112:	60a3      	str	r3, [r4, #8]
}
 800d114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d118:	b004      	add	sp, #16
 800d11a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d11c:	68c3      	ldr	r3, [r0, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d122:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d124:	f7ff ffb2 	bl	800d08c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d12a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d130:	e7e5      	b.n	800d0fe <USB_CoreInit+0x42>

0800d132 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d132:	6883      	ldr	r3, [r0, #8]
 800d134:	f043 0301 	orr.w	r3, r3, #1
 800d138:	6083      	str	r3, [r0, #8]
}
 800d13a:	2000      	movs	r0, #0
 800d13c:	4770      	bx	lr

0800d13e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d13e:	6883      	ldr	r3, [r0, #8]
 800d140:	f023 0301 	bic.w	r3, r3, #1
 800d144:	6083      	str	r3, [r0, #8]
}
 800d146:	2000      	movs	r0, #0
 800d148:	4770      	bx	lr

0800d14a <USB_SetCurrentMode>:
{
 800d14a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d14c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d14e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d150:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d154:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d156:	d108      	bne.n	800d16a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d158:	68c3      	ldr	r3, [r0, #12]
 800d15a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d15e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800d160:	2032      	movs	r0, #50	; 0x32
 800d162:	f7f8 f8ef 	bl	8005344 <HAL_Delay>
  return HAL_OK;
 800d166:	2000      	movs	r0, #0
 800d168:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800d16a:	b919      	cbnz	r1, 800d174 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d16c:	68c3      	ldr	r3, [r0, #12]
 800d16e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d172:	e7f4      	b.n	800d15e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800d174:	2001      	movs	r0, #1
}
 800d176:	bd08      	pop	{r3, pc}

0800d178 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d178:	0189      	lsls	r1, r1, #6
 800d17a:	4a07      	ldr	r2, [pc, #28]	; (800d198 <USB_FlushTxFifo+0x20>)
 800d17c:	f041 0120 	orr.w	r1, r1, #32
 800d180:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800d182:	3a01      	subs	r2, #1
 800d184:	d005      	beq.n	800d192 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d186:	6903      	ldr	r3, [r0, #16]
 800d188:	f013 0320 	ands.w	r3, r3, #32
 800d18c:	d1f9      	bne.n	800d182 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800d18e:	4618      	mov	r0, r3
 800d190:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d192:	2003      	movs	r0, #3
}
 800d194:	4770      	bx	lr
 800d196:	bf00      	nop
 800d198:	00030d41 	.word	0x00030d41

0800d19c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d19c:	2310      	movs	r3, #16
 800d19e:	4a06      	ldr	r2, [pc, #24]	; (800d1b8 <USB_FlushRxFifo+0x1c>)
 800d1a0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	d005      	beq.n	800d1b2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d1a6:	6903      	ldr	r3, [r0, #16]
 800d1a8:	f013 0310 	ands.w	r3, r3, #16
 800d1ac:	d1f9      	bne.n	800d1a2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d1b2:	2003      	movs	r0, #3
}
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	00030d41 	.word	0x00030d41

0800d1bc <USB_WritePacket>:
{
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800d1c2:	b94c      	cbnz	r4, 800d1d8 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d1c4:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d1c6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800d1ca:	f023 0303 	bic.w	r3, r3, #3
 800d1ce:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d1d2:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800d1d4:	4299      	cmp	r1, r3
 800d1d6:	d101      	bne.n	800d1dc <USB_WritePacket+0x20>
}
 800d1d8:	2000      	movs	r0, #0
 800d1da:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d1dc:	f851 2b04 	ldr.w	r2, [r1], #4
 800d1e0:	6002      	str	r2, [r0, #0]
 800d1e2:	e7f7      	b.n	800d1d4 <USB_WritePacket+0x18>

0800d1e4 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d1e4:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d1e6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d1ea:	f022 0203 	bic.w	r2, r2, #3
 800d1ee:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 800d1f0:	4291      	cmp	r1, r2
 800d1f2:	d101      	bne.n	800d1f8 <USB_ReadPacket+0x14>
}
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d1f8:	6803      	ldr	r3, [r0, #0]
 800d1fa:	f841 3b04 	str.w	r3, [r1], #4
 800d1fe:	e7f7      	b.n	800d1f0 <USB_ReadPacket+0xc>

0800d200 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d200:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d202:	6980      	ldr	r0, [r0, #24]
}
 800d204:	4010      	ands	r0, r2
 800d206:	4770      	bx	lr

0800d208 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d208:	6940      	ldr	r0, [r0, #20]
}
 800d20a:	f000 0001 	and.w	r0, r0, #1
 800d20e:	4770      	bx	lr

0800d210 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d210:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 800d214:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d216:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800d21a:	f023 0303 	bic.w	r3, r3, #3
{
 800d21e:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d220:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d224:	f001 0303 	and.w	r3, r1, #3
 800d228:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800d22c:	ea43 0304 	orr.w	r3, r3, r4
 800d230:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800d234:	d104      	bne.n	800d240 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 800d236:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800d23a:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800d23c:	2000      	movs	r0, #0
 800d23e:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 800d240:	2902      	cmp	r1, #2
 800d242:	d1fb      	bne.n	800d23c <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 800d244:	f241 7370 	movw	r3, #6000	; 0x1770
 800d248:	e7f7      	b.n	800d23a <USB_InitFSLSPClkSel+0x2a>

0800d24a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d24a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800d24c:	2500      	movs	r5, #0
{
 800d24e:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 800d250:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d252:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d256:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d258:	9b01      	ldr	r3, [sp, #4]
 800d25a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d25e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d266:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800d26a:	2064      	movs	r0, #100	; 0x64
 800d26c:	f7f8 f86a 	bl	8005344 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d270:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800d272:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d278:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800d27c:	f7f8 f862 	bl	8005344 <HAL_Delay>

  return HAL_OK;
}
 800d280:	4628      	mov	r0, r5
 800d282:	b003      	add	sp, #12
 800d284:	bd30      	pop	{r4, r5, pc}

0800d286 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d286:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800d288:	2300      	movs	r3, #0
 800d28a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d28c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d290:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d292:	9b01      	ldr	r3, [sp, #4]
 800d294:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d298:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d29a:	9b01      	ldr	r3, [sp, #4]
 800d29c:	04da      	lsls	r2, r3, #19
 800d29e:	d406      	bmi.n	800d2ae <USB_DriveVbus+0x28>
 800d2a0:	2901      	cmp	r1, #1
 800d2a2:	d104      	bne.n	800d2ae <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d2aa:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d2ae:	9b01      	ldr	r3, [sp, #4]
 800d2b0:	04db      	lsls	r3, r3, #19
 800d2b2:	d505      	bpl.n	800d2c0 <USB_DriveVbus+0x3a>
 800d2b4:	b921      	cbnz	r1, 800d2c0 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2bc:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	b002      	add	sp, #8
 800d2c4:	4770      	bx	lr
	...

0800d2c8 <USB_HostInit>:
{
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	b538      	push	{r3, r4, r5, lr}
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	a805      	add	r0, sp, #20
 800d2d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d2da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d2dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d2e0:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d2e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d2e4:	05da      	lsls	r2, r3, #23
 800d2e6:	d53f      	bpl.n	800d368 <USB_HostInit+0xa0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d2e8:	9b07      	ldr	r3, [sp, #28]
 800d2ea:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d2ec:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d2f0:	d13c      	bne.n	800d36c <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d2f2:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d2f6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d2fa:	2110      	movs	r1, #16
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f7ff ff3b 	bl	800d178 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d302:	4620      	mov	r0, r4
 800d304:	f7ff ff4a 	bl	800d19c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800d308:	2300      	movs	r3, #0
 800d30a:	9906      	ldr	r1, [sp, #24]
 800d30c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800d314:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 800d316:	428b      	cmp	r3, r1
 800d318:	d12b      	bne.n	800d372 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 800d31a:	2101      	movs	r1, #1
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7ff ffb2 	bl	800d286 <USB_DriveVbus>
  HAL_Delay(200U);
 800d322:	20c8      	movs	r0, #200	; 0xc8
 800d324:	f7f8 f80e 	bl	8005344 <HAL_Delay>
  USBx->GINTMSK = 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d32c:	f04f 33ff 	mov.w	r3, #4294967295
 800d330:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d332:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d334:	05db      	lsls	r3, r3, #23
 800d336:	d521      	bpl.n	800d37c <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 800d338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d33c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d33e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800d342:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d344:	4b11      	ldr	r3, [pc, #68]	; (800d38c <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d346:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800d34a:	9b08      	ldr	r3, [sp, #32]
 800d34c:	b91b      	cbnz	r3, 800d356 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d34e:	69a3      	ldr	r3, [r4, #24]
 800d350:	f043 0310 	orr.w	r3, r3, #16
 800d354:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d356:	69a2      	ldr	r2, [r4, #24]
}
 800d358:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d35a:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <USB_HostInit+0xc8>)
 800d35c:	4313      	orrs	r3, r2
 800d35e:	61a3      	str	r3, [r4, #24]
}
 800d360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d364:	b004      	add	sp, #16
 800d366:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d368:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800d36c:	f023 0304 	bic.w	r3, r3, #4
 800d370:	e7c1      	b.n	800d2f6 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d372:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d374:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800d376:	60d5      	str	r5, [r2, #12]
 800d378:	3220      	adds	r2, #32
 800d37a:	e7cc      	b.n	800d316 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d380:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800d384:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d386:	4b03      	ldr	r3, [pc, #12]	; (800d394 <USB_HostInit+0xcc>)
 800d388:	e7dd      	b.n	800d346 <USB_HostInit+0x7e>
 800d38a:	bf00      	nop
 800d38c:	00e00300 	.word	0x00e00300
 800d390:	a3200008 	.word	0xa3200008
 800d394:	004000e0 	.word	0x004000e0

0800d398 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d398:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800d39a:	2300      	movs	r3, #0
 800d39c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d39e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d3a2:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d3a4:	9801      	ldr	r0, [sp, #4]
}
 800d3a6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800d3aa:	b002      	add	sp, #8
 800d3ac:	4770      	bx	lr

0800d3ae <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d3ae:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d3b2:	6880      	ldr	r0, [r0, #8]
}
 800d3b4:	b280      	uxth	r0, r0
 800d3b6:	4770      	bx	lr

0800d3b8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d3bc:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 800d3c0:	4605      	mov	r5, r0
 800d3c2:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ca:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 800d3ce:	fa4f f882 	sxtb.w	r8, r2
 800d3d2:	60a0      	str	r0, [r4, #8]
 800d3d4:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 800d3d8:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d3dc:	2e03      	cmp	r6, #3
 800d3de:	d870      	bhi.n	800d4c2 <USB_HC_Init+0x10a>
 800d3e0:	e8df f006 	tbb	[pc, r6]
 800d3e4:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d3e8:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d3ec:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d3f0:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d3f2:	da03      	bge.n	800d3fc <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d3f4:	68e1      	ldr	r1, [r4, #12]
 800d3f6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d3fa:	e005      	b.n	800d408 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d3fc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d3fe:	05c9      	lsls	r1, r1, #23
 800d400:	d546      	bpl.n	800d490 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d402:	68e1      	ldr	r1, [r4, #12]
 800d404:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 800d408:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d40a:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d40c:	2101      	movs	r1, #1
 800d40e:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800d412:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d416:	fa01 f10e 	lsl.w	r1, r1, lr
 800d41a:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 800d41e:	bfb4      	ite	lt
 800d420:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 800d424:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d426:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d42a:	69a9      	ldr	r1, [r5, #24]
 800d42c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800d430:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d432:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d434:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d438:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 800d43a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d43e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d442:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d446:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 800d44a:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d44c:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 800d450:	bf0c      	ite	eq
 800d452:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800d456:	2100      	movne	r1, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d458:	4313      	orrs	r3, r2
 800d45a:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 800d45c:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d45e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800d462:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d466:	ea43 0304 	orr.w	r3, r3, r4
 800d46a:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d46e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800d472:	d128      	bne.n	800d4c6 <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d474:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800d478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d47c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 800d480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d484:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800d488:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d48c:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d48e:	dbb1      	blt.n	800d3f4 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d490:	2101      	movs	r1, #1
 800d492:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800d496:	fa01 f10e 	lsl.w	r1, r1, lr
 800d49a:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 800d49c:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d49e:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 800d4a2:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d4a4:	69a9      	ldr	r1, [r5, #24]
 800d4a6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800d4aa:	61a9      	str	r1, [r5, #24]
 800d4ac:	e7c1      	b.n	800d432 <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4ae:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800d4b2:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4b6:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d4b8:	daea      	bge.n	800d490 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d4ba:	68e1      	ldr	r1, [r4, #12]
 800d4bc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d4c0:	e7a2      	b.n	800d408 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	e7a2      	b.n	800d40c <USB_HC_Init+0x54>
}
 800d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4ca <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d4ca:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d4ce:	6940      	ldr	r0, [r0, #20]
}
 800d4d0:	b280      	uxth	r0, r0
 800d4d2:	4770      	bx	lr

0800d4d4 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d4d4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800d4d8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d4dc:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d4e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d4e4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d4e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4ec:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d4f0:	d11e      	bne.n	800d530 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d4f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d4f4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d4f8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d4fc:	d137      	bne.n	800d56e <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d4fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d502:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d506:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d50a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d50e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d512:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d51a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d51e:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 800d522:	3b01      	subs	r3, #1
 800d524:	d002      	beq.n	800d52c <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d526:	6811      	ldr	r1, [r2, #0]
 800d528:	2900      	cmp	r1, #0
 800d52a:	dbfa      	blt.n	800d522 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800d52c:	2000      	movs	r0, #0
 800d52e:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d530:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800d534:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d538:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d53c:	d117      	bne.n	800d56e <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d542:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d546:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d54a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d54e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d552:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d55a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d55e:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800d562:	3b01      	subs	r3, #1
 800d564:	d0e2      	beq.n	800d52c <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d566:	6811      	ldr	r1, [r2, #0]
 800d568:	2900      	cmp	r1, #0
 800d56a:	dbfa      	blt.n	800d562 <USB_HC_Halt+0x8e>
 800d56c:	e7de      	b.n	800d52c <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d56e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d572:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d576:	e7d9      	b.n	800d52c <USB_HC_Halt+0x58>

0800d578 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d578:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800d57c:	4a06      	ldr	r2, [pc, #24]	; (800d598 <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 800d57e:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d580:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d584:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d58c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d590:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	80080000 	.word	0x80080000

0800d59c <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800d59c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d59e:	05db      	lsls	r3, r3, #23
{
 800d5a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d5a4:	4616      	mov	r6, r2
 800d5a6:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d5a8:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800d5aa:	d517      	bpl.n	800d5dc <USB_HC_StartXfer+0x40>
 800d5ac:	790d      	ldrb	r5, [r1, #4]
 800d5ae:	b9ad      	cbnz	r5, 800d5dc <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d5b0:	b94e      	cbnz	r6, 800d5c6 <USB_HC_StartXfer+0x2a>
 800d5b2:	794b      	ldrb	r3, [r1, #5]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d111      	bne.n	800d5dc <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	f7ff ffdd 	bl	800d578 <USB_DoPing>
}
 800d5be:	2000      	movs	r0, #0
 800d5c0:	b002      	add	sp, #8
 800d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 800d5c6:	2e01      	cmp	r6, #1
 800d5c8:	d108      	bne.n	800d5dc <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d5ca:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d5ce:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 800d5d2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800d5d6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800d5da:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 800d5dc:	6908      	ldr	r0, [r1, #16]
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d066      	beq.n	800d6b0 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d5e2:	890b      	ldrh	r3, [r1, #8]
 800d5e4:	3801      	subs	r0, #1
 800d5e6:	4418      	add	r0, r3
 800d5e8:	fbb0 f0f3 	udiv	r0, r0, r3
 800d5ec:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 800d5ee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d5f2:	d903      	bls.n	800d5fc <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d5f4:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 800d5f6:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d5fa:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 800d5fc:	78cf      	ldrb	r7, [r1, #3]
 800d5fe:	b117      	cbz	r7, 800d606 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d600:	890b      	ldrh	r3, [r1, #8]
 800d602:	4343      	muls	r3, r0
 800d604:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d606:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d60a:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 800d60e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d610:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d614:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d618:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d61c:	ea4e 0e08 	orr.w	lr, lr, r8
 800d620:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800d6fc <USB_HC_StartXfer+0x160>
 800d624:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 800d628:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d62c:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 800d630:	b116      	cbz	r6, 800d638 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d632:	68c8      	ldr	r0, [r1, #12]
 800d634:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d638:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 800d63c:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d640:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d644:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d646:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d64a:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d64c:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d650:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800d654:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800d658:	ea40 000c 	orr.w	r0, r0, ip
 800d65c:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d660:	4825      	ldr	r0, [pc, #148]	; (800d6f8 <USB_HC_StartXfer+0x15c>)
 800d662:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800d666:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d66a:	f8d0 c000 	ldr.w	ip, [r0]
 800d66e:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 800d672:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d676:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 800d67a:	b1df      	cbz	r7, 800d6b4 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d67c:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d680:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d684:	f8d0 c000 	ldr.w	ip, [r0]
 800d688:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 800d68c:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d690:	6800      	ldr	r0, [r0, #0]
 800d692:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800d696:	2e00      	cmp	r6, #0
 800d698:	d191      	bne.n	800d5be <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d69a:	2f00      	cmp	r7, #0
 800d69c:	d18f      	bne.n	800d5be <USB_HC_StartXfer+0x22>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d08d      	beq.n	800d5be <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 800d6a2:	79c8      	ldrb	r0, [r1, #7]
 800d6a4:	2803      	cmp	r0, #3
 800d6a6:	d813      	bhi.n	800d6d0 <USB_HC_StartXfer+0x134>
 800d6a8:	e8df f000 	tbb	[pc, r0]
 800d6ac:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	e7a3      	b.n	800d5fc <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d6b4:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800d6b8:	e7e2      	b.n	800d680 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d6ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d6bc:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d6be:	b280      	uxth	r0, r0
 800d6c0:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800d6c4:	4285      	cmp	r5, r0
 800d6c6:	d903      	bls.n	800d6d0 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d6c8:	69a0      	ldr	r0, [r4, #24]
 800d6ca:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d6ce:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	9000      	str	r0, [sp, #0]
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	68c9      	ldr	r1, [r1, #12]
 800d6da:	f7ff fd6f 	bl	800d1bc <USB_WritePacket>
 800d6de:	e76e      	b.n	800d5be <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d6e0:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d6e4:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d6e6:	b280      	uxth	r0, r0
 800d6e8:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800d6ec:	4285      	cmp	r5, r0
 800d6ee:	d9ef      	bls.n	800d6d0 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d6f0:	69a0      	ldr	r0, [r4, #24]
 800d6f2:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800d6f6:	e7ea      	b.n	800d6ce <USB_HC_StartXfer+0x132>
 800d6f8:	2003d26c 	.word	0x2003d26c
 800d6fc:	1ff80000 	.word	0x1ff80000

0800d700 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d700:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d702:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d704:	f023 0301 	bic.w	r3, r3, #1
{
 800d708:	b510      	push	{r4, lr}
 800d70a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d70c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d70e:	f7ff fd33 	bl	800d178 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff fd42 	bl	800d19c <USB_FlushRxFifo>
 800d718:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800d71c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800d720:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800d722:	6811      	ldr	r1, [r2, #0]
 800d724:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d728:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800d72c:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800d730:	4290      	cmp	r0, r2
 800d732:	d1f6      	bne.n	800d722 <USB_StopHost+0x22>
 800d734:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800d736:	6819      	ldr	r1, [r3, #0]
 800d738:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d73c:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800d740:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 800d742:	3001      	adds	r0, #1
 800d744:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d748:	d802      	bhi.n	800d750 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d74a:	6819      	ldr	r1, [r3, #0]
 800d74c:	2900      	cmp	r1, #0
 800d74e:	dbf8      	blt.n	800d742 <USB_StopHost+0x42>
 800d750:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 800d752:	429a      	cmp	r2, r3
 800d754:	d1ef      	bne.n	800d736 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d756:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800d75a:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d75c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d760:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	f043 0301 	orr.w	r3, r3, #1
 800d768:	60a3      	str	r3, [r4, #8]
}
 800d76a:	bd10      	pop	{r4, pc}

0800d76c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d76c:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <FATFS_LinkDriverEx+0x40>)
{
 800d76e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800d770:	7a5d      	ldrb	r5, [r3, #9]
 800d772:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800d776:	b9b5      	cbnz	r5, 800d7a6 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d778:	7a5d      	ldrb	r5, [r3, #9]
 800d77a:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800d77c:	7a5d      	ldrb	r5, [r3, #9]
 800d77e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d782:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800d784:	7a58      	ldrb	r0, [r3, #9]
 800d786:	4418      	add	r0, r3
 800d788:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800d78a:	7a5a      	ldrb	r2, [r3, #9]
 800d78c:	b2d2      	uxtb	r2, r2
 800d78e:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800d790:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800d792:	b2c0      	uxtb	r0, r0
 800d794:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800d796:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800d798:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800d79a:	4620      	mov	r0, r4
    path[1] = ':';
 800d79c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800d79e:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800d7a0:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800d7a2:	708b      	strb	r3, [r1, #2]
 800d7a4:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800d7a6:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800d7a8:	bd30      	pop	{r4, r5, pc}
 800d7aa:	bf00      	nop
 800d7ac:	2003d270 	.word	0x2003d270

0800d7b0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f7ff bfdb 	b.w	800d76c <FATFS_LinkDriverEx>

0800d7b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7b6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800d7b8:	f001 f9b2 	bl	800eb20 <vTaskStartScheduler>
  
  return osOK;
}
 800d7bc:	2000      	movs	r0, #0
 800d7be:	bd08      	pop	{r3, pc}

0800d7c0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d7c0:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d7c2:	f001 fc43 	bl	800f04c <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800d7c6:	f110 30ff 	adds.w	r0, r0, #4294967295
 800d7ca:	bf18      	it	ne
 800d7cc:	2001      	movne	r0, #1
 800d7ce:	bd08      	pop	{r3, pc}

0800d7d0 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d0:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800d7d4:	b10b      	cbz	r3, 800d7da <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800d7d6:	f001 b9f1 	b.w	800ebbc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800d7da:	f001 b9e9 	b.w	800ebb0 <xTaskGetTickCount>

0800d7de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d7de:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7e0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800d7e4:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7e6:	8a02      	ldrh	r2, [r0, #16]
{
 800d7e8:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800d7ea:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7ec:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800d7f0:	bf14      	ite	ne
 800d7f2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d7f4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d7f6:	a803      	add	r0, sp, #12
 800d7f8:	9400      	str	r4, [sp, #0]
 800d7fa:	9001      	str	r0, [sp, #4]
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f001 f8b7 	bl	800e970 <xTaskCreate>
 800d802:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d804:	bf0c      	ite	eq
 800d806:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800d808:	2000      	movne	r0, #0
}
 800d80a:	b005      	add	sp, #20
 800d80c:	bd30      	pop	{r4, r5, pc}

0800d80e <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800d80e:	f001 bc17 	b.w	800f040 <xTaskGetCurrentTaskHandle>

0800d812 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d812:	2800      	cmp	r0, #0
 800d814:	bf08      	it	eq
 800d816:	2001      	moveq	r0, #1
{
 800d818:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d81a:	f001 fae5 	bl	800ede8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d81e:	2000      	movs	r0, #0
 800d820:	bd08      	pop	{r3, pc}

0800d822 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800d822:	2001      	movs	r0, #1
 800d824:	f000 bd72 	b.w	800e30c <xQueueCreateMutex>

0800d828 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d828:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d82a:	2400      	movs	r4, #0
 800d82c:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800d82e:	b1e0      	cbz	r0, 800d86a <osMutexWait+0x42>
 800d830:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d834:	b1a3      	cbz	r3, 800d860 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d836:	aa01      	add	r2, sp, #4
 800d838:	4621      	mov	r1, r4
 800d83a:	f000 ffb3 	bl	800e7a4 <xQueueReceiveFromISR>
 800d83e:	2801      	cmp	r0, #1
 800d840:	d002      	beq.n	800d848 <osMutexWait+0x20>
      return osErrorOS;
 800d842:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800d844:	b002      	add	sp, #8
 800d846:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	b13b      	cbz	r3, 800d85c <osMutexWait+0x34>
 800d84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d850:	4b07      	ldr	r3, [pc, #28]	; (800d870 <osMutexWait+0x48>)
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	f3bf 8f6f 	isb	sy
  return osOK;
 800d85c:	2000      	movs	r0, #0
 800d85e:	e7f1      	b.n	800d844 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d860:	f000 fed8 	bl	800e614 <xQueueSemaphoreTake>
 800d864:	2801      	cmp	r0, #1
 800d866:	d1ec      	bne.n	800d842 <osMutexWait+0x1a>
 800d868:	e7f8      	b.n	800d85c <osMutexWait+0x34>
    return osErrorParameter;
 800d86a:	2080      	movs	r0, #128	; 0x80
 800d86c:	e7ea      	b.n	800d844 <osMutexWait+0x1c>
 800d86e:	bf00      	nop
 800d870:	e000ed04 	.word	0xe000ed04

0800d874 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800d874:	2901      	cmp	r1, #1
{ 
 800d876:	4608      	mov	r0, r1
 800d878:	b510      	push	{r4, lr}
  if (count == 1) {
 800d87a:	d10c      	bne.n	800d896 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800d87c:	2203      	movs	r2, #3
 800d87e:	2100      	movs	r1, #0
 800d880:	f000 fc40 	bl	800e104 <xQueueGenericCreate>
 800d884:	4604      	mov	r4, r0
 800d886:	b120      	cbz	r0, 800d892 <osSemaphoreCreate+0x1e>
 800d888:	2300      	movs	r3, #0
 800d88a:	461a      	mov	r2, r3
 800d88c:	4619      	mov	r1, r3
 800d88e:	f000 fc7f 	bl	800e190 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800d892:	4620      	mov	r0, r4
 800d894:	bd10      	pop	{r4, pc}
 800d896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800d89a:	f000 bc56 	b.w	800e14a <xQueueCreateCountingSemaphore>
	...

0800d8a0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d8a0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d8a2:	2400      	movs	r4, #0
 800d8a4:	9401      	str	r4, [sp, #4]
 800d8a6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d8aa:	b193      	cbz	r3, 800d8d2 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d8ac:	a901      	add	r1, sp, #4
 800d8ae:	f000 fda9 	bl	800e404 <xQueueGiveFromISR>
 800d8b2:	2801      	cmp	r0, #1
 800d8b4:	d113      	bne.n	800d8de <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d8b6:	9b01      	ldr	r3, [sp, #4]
 800d8b8:	b913      	cbnz	r3, 800d8c0 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800d8ba:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800d8bc:	b002      	add	sp, #8
 800d8be:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <osSemaphoreRelease+0x44>)
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	e7f3      	b.n	800d8ba <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f000 fc5b 	bl	800e190 <xQueueGenericSend>
 800d8da:	2801      	cmp	r0, #1
 800d8dc:	d0ed      	beq.n	800d8ba <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800d8de:	20ff      	movs	r0, #255	; 0xff
 800d8e0:	e7ec      	b.n	800d8bc <osSemaphoreRelease+0x1c>
 800d8e2:	bf00      	nop
 800d8e4:	e000ed04 	.word	0xe000ed04

0800d8e8 <osMutexRelease>:
 800d8e8:	f7ff bfda 	b.w	800d8a0 <osSemaphoreRelease>

0800d8ec <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	c803      	ldmia	r0, {r0, r1}
 800d8f0:	f000 bc08 	b.w	800e104 <xQueueGenericCreate>

0800d8f4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800d8f6:	2400      	movs	r4, #0
{
 800d8f8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d8fa:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800d8fc:	42a2      	cmp	r2, r4
 800d8fe:	bf08      	it	eq
 800d900:	2201      	moveq	r2, #1
 800d902:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800d906:	b1ab      	cbz	r3, 800d934 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d908:	4623      	mov	r3, r4
 800d90a:	aa03      	add	r2, sp, #12
 800d90c:	a901      	add	r1, sp, #4
 800d90e:	f000 fd0f 	bl	800e330 <xQueueGenericSendFromISR>
 800d912:	2801      	cmp	r0, #1
 800d914:	d002      	beq.n	800d91c <osMessagePut+0x28>
      return osErrorOS;
 800d916:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800d918:	b004      	add	sp, #16
 800d91a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	b13b      	cbz	r3, 800d930 <osMessagePut+0x3c>
 800d920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d924:	4b06      	ldr	r3, [pc, #24]	; (800d940 <osMessagePut+0x4c>)
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	f3bf 8f6f 	isb	sy
  return osOK;
 800d930:	2000      	movs	r0, #0
 800d932:	e7f1      	b.n	800d918 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d934:	a901      	add	r1, sp, #4
 800d936:	f000 fc2b 	bl	800e190 <xQueueGenericSend>
 800d93a:	2801      	cmp	r0, #1
 800d93c:	d1eb      	bne.n	800d916 <osMessagePut+0x22>
 800d93e:	e7f7      	b.n	800d930 <osMessagePut+0x3c>
 800d940:	e000ed04 	.word	0xe000ed04

0800d944 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d944:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800d946:	2600      	movs	r6, #0
{
 800d948:	b085      	sub	sp, #20
 800d94a:	4604      	mov	r4, r0
 800d94c:	4617      	mov	r7, r2
 800d94e:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800d950:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800d952:	9602      	str	r6, [sp, #8]
 800d954:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800d956:	b911      	cbnz	r1, 800d95e <osMessageGet+0x1a>
    event.status = osErrorParameter;
 800d958:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	e016      	b.n	800d98c <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800d95e:	9600      	str	r6, [sp, #0]
 800d960:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800d964:	b1cb      	cbz	r3, 800d99a <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d966:	466a      	mov	r2, sp
 800d968:	a902      	add	r1, sp, #8
 800d96a:	f000 ff1b 	bl	800e7a4 <xQueueReceiveFromISR>
 800d96e:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800d970:	bf0a      	itet	eq
 800d972:	2310      	moveq	r3, #16
      event.status = osOK;
 800d974:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 800d976:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800d978:	9b00      	ldr	r3, [sp, #0]
 800d97a:	b13b      	cbz	r3, 800d98c <osMessageGet+0x48>
 800d97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d980:	4b0c      	ldr	r3, [pc, #48]	; (800d9b4 <osMessageGet+0x70>)
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800d98c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d994:	4620      	mov	r0, r4
 800d996:	b005      	add	sp, #20
 800d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d99a:	a902      	add	r1, sp, #8
 800d99c:	f000 fd90 	bl	800e4c0 <xQueueReceive>
 800d9a0:	2801      	cmp	r0, #1
 800d9a2:	d101      	bne.n	800d9a8 <osMessageGet+0x64>
      event.status = osEventMessage;
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	e7d8      	b.n	800d95a <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d9a8:	2f00      	cmp	r7, #0
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2300      	moveq	r3, #0
 800d9ae:	2340      	movne	r3, #64	; 0x40
 800d9b0:	e7d3      	b.n	800d95a <osMessageGet+0x16>
 800d9b2:	bf00      	nop
 800d9b4:	e000ed04 	.word	0xe000ed04

0800d9b8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9b8:	4b0f      	ldr	r3, [pc, #60]	; (800d9f8 <prvInsertBlockIntoFreeList+0x40>)
{
 800d9ba:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	4282      	cmp	r2, r0
 800d9c0:	d318      	bcc.n	800d9f4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9c2:	685c      	ldr	r4, [r3, #4]
 800d9c4:	1919      	adds	r1, r3, r4
 800d9c6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9c8:	bf01      	itttt	eq
 800d9ca:	6841      	ldreq	r1, [r0, #4]
 800d9cc:	4618      	moveq	r0, r3
 800d9ce:	1909      	addeq	r1, r1, r4
 800d9d0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9d2:	6844      	ldr	r4, [r0, #4]
 800d9d4:	1901      	adds	r1, r0, r4
 800d9d6:	428a      	cmp	r2, r1
 800d9d8:	d107      	bne.n	800d9ea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9da:	4908      	ldr	r1, [pc, #32]	; (800d9fc <prvInsertBlockIntoFreeList+0x44>)
 800d9dc:	6809      	ldr	r1, [r1, #0]
 800d9de:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9e0:	bf1f      	itttt	ne
 800d9e2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9e4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9e6:	1909      	addne	r1, r1, r4
 800d9e8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9ea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9ec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9ee:	bf18      	it	ne
 800d9f0:	6018      	strne	r0, [r3, #0]
 800d9f2:	bd10      	pop	{r4, pc}
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	e7e1      	b.n	800d9bc <prvInsertBlockIntoFreeList+0x4>
 800d9f8:	2004528c 	.word	0x2004528c
 800d9fc:	2003d27c 	.word	0x2003d27c

0800da00 <pvPortMalloc>:
{
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800da06:	f001 f8cb 	bl	800eba0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800da0a:	4941      	ldr	r1, [pc, #260]	; (800db10 <pvPortMalloc+0x110>)
 800da0c:	4d41      	ldr	r5, [pc, #260]	; (800db14 <pvPortMalloc+0x114>)
 800da0e:	680b      	ldr	r3, [r1, #0]
 800da10:	bb0b      	cbnz	r3, 800da56 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800da12:	4a41      	ldr	r2, [pc, #260]	; (800db18 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da14:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da16:	4e41      	ldr	r6, [pc, #260]	; (800db1c <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da18:	bf1b      	ittet	ne
 800da1a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da1c:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da20:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da24:	f020 0007 	bicne.w	r0, r0, #7
 800da28:	bf1c      	itt	ne
 800da2a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da2c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800da2e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da30:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da32:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da34:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800da36:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da38:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800da3c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800da3e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da40:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800da42:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da44:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da46:	4b36      	ldr	r3, [pc, #216]	; (800db20 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da48:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da4a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da4c:	4b35      	ldr	r3, [pc, #212]	; (800db24 <pvPortMalloc+0x124>)
 800da4e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da54:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da56:	682f      	ldr	r7, [r5, #0]
 800da58:	4227      	tst	r7, r4
 800da5a:	d116      	bne.n	800da8a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800da5c:	2c00      	cmp	r4, #0
 800da5e:	d042      	beq.n	800dae6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800da60:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da64:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da66:	bf1c      	itt	ne
 800da68:	f023 0307 	bicne.w	r3, r3, #7
 800da6c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da6e:	b163      	cbz	r3, 800da8a <pvPortMalloc+0x8a>
 800da70:	4a2c      	ldr	r2, [pc, #176]	; (800db24 <pvPortMalloc+0x124>)
 800da72:	6816      	ldr	r6, [r2, #0]
 800da74:	4690      	mov	r8, r2
 800da76:	42b3      	cmp	r3, r6
 800da78:	d807      	bhi.n	800da8a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800da7a:	4a28      	ldr	r2, [pc, #160]	; (800db1c <pvPortMalloc+0x11c>)
 800da7c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da7e:	6868      	ldr	r0, [r5, #4]
 800da80:	4283      	cmp	r3, r0
 800da82:	d804      	bhi.n	800da8e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800da84:	6809      	ldr	r1, [r1, #0]
 800da86:	428d      	cmp	r5, r1
 800da88:	d107      	bne.n	800da9a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800da8a:	2400      	movs	r4, #0
 800da8c:	e02b      	b.n	800dae6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da8e:	682c      	ldr	r4, [r5, #0]
 800da90:	2c00      	cmp	r4, #0
 800da92:	d0f7      	beq.n	800da84 <pvPortMalloc+0x84>
 800da94:	462a      	mov	r2, r5
 800da96:	4625      	mov	r5, r4
 800da98:	e7f1      	b.n	800da7e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da9a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da9c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da9e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daa0:	1ac2      	subs	r2, r0, r3
 800daa2:	2a10      	cmp	r2, #16
 800daa4:	d911      	bls.n	800daca <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800daa6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800daa8:	0741      	lsls	r1, r0, #29
 800daaa:	d00a      	beq.n	800dac2 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab0:	b672      	cpsid	i
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	b662      	cpsie	i
 800dac0:	e7fe      	b.n	800dac0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dac2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dac4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dac6:	f7ff ff77 	bl	800d9b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800daca:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dacc:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dace:	4914      	ldr	r1, [pc, #80]	; (800db20 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dad0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dad2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dad4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800dad6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dad8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dadc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dade:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dae0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dae2:	bf38      	it	cc
 800dae4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 800dae6:	f001 f905 	bl	800ecf4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800daea:	b90c      	cbnz	r4, 800daf0 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 800daec:	f7f3 fcdd 	bl	80014aa <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800daf0:	0763      	lsls	r3, r4, #29
 800daf2:	d00a      	beq.n	800db0a <pvPortMalloc+0x10a>
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	b672      	cpsid	i
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	b662      	cpsie	i
 800db08:	e7fe      	b.n	800db08 <pvPortMalloc+0x108>
}
 800db0a:	4620      	mov	r0, r4
 800db0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db10:	2003d27c 	.word	0x2003d27c
 800db14:	20045280 	.word	0x20045280
 800db18:	2003d280 	.word	0x2003d280
 800db1c:	2004528c 	.word	0x2004528c
 800db20:	20045288 	.word	0x20045288
 800db24:	20045284 	.word	0x20045284

0800db28 <vPortFree>:
{
 800db28:	b510      	push	{r4, lr}
	if( pv != NULL )
 800db2a:	4604      	mov	r4, r0
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d032      	beq.n	800db96 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db30:	4a19      	ldr	r2, [pc, #100]	; (800db98 <vPortFree+0x70>)
 800db32:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800db36:	6812      	ldr	r2, [r2, #0]
 800db38:	4213      	tst	r3, r2
 800db3a:	d10a      	bne.n	800db52 <vPortFree+0x2a>
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	b672      	cpsid	i
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	b662      	cpsie	i
 800db50:	e7fe      	b.n	800db50 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db52:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800db56:	b151      	cbz	r1, 800db6e <vPortFree+0x46>
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	b672      	cpsid	i
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	b662      	cpsie	i
 800db6c:	e7fe      	b.n	800db6c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db6e:	ea23 0302 	bic.w	r3, r3, r2
 800db72:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800db76:	f001 f813 	bl	800eba0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db7a:	4a08      	ldr	r2, [pc, #32]	; (800db9c <vPortFree+0x74>)
 800db7c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db80:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db84:	6811      	ldr	r1, [r2, #0]
 800db86:	440b      	add	r3, r1
 800db88:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db8a:	f7ff ff15 	bl	800d9b8 <prvInsertBlockIntoFreeList>
}
 800db8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800db92:	f001 b8af 	b.w	800ecf4 <xTaskResumeAll>
 800db96:	bd10      	pop	{r4, pc}
 800db98:	20045280 	.word	0x20045280
 800db9c:	20045284 	.word	0x20045284

0800dba0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dba0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dba4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dba8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbaa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dbae:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dbb0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dbb2:	6003      	str	r3, [r0, #0]
 800dbb4:	4770      	bx	lr

0800dbb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6103      	str	r3, [r0, #16]
 800dbba:	4770      	bx	lr

0800dbbc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbbc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbbe:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800dbc0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbc2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dbc4:	689a      	ldr	r2, [r3, #8]
 800dbc6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbc8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dbca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dbcc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dbce:	3301      	adds	r3, #1
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	4770      	bx	lr

0800dbd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbd4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbd6:	1c53      	adds	r3, r2, #1
{
 800dbd8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800dbda:	d10a      	bne.n	800dbf2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbdc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dbde:	685a      	ldr	r2, [r3, #4]
 800dbe0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dbe2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dbe4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800dbe6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dbe8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dbea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dbec:	3301      	adds	r3, #1
 800dbee:	6003      	str	r3, [r0, #0]
 800dbf0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbf2:	f100 0308 	add.w	r3, r0, #8
 800dbf6:	685c      	ldr	r4, [r3, #4]
 800dbf8:	6825      	ldr	r5, [r4, #0]
 800dbfa:	42aa      	cmp	r2, r5
 800dbfc:	d3ef      	bcc.n	800dbde <vListInsert+0xa>
 800dbfe:	4623      	mov	r3, r4
 800dc00:	e7f9      	b.n	800dbf6 <vListInsert+0x22>

0800dc02 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc02:	6841      	ldr	r1, [r0, #4]
 800dc04:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dc06:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc08:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc0a:	6882      	ldr	r2, [r0, #8]
 800dc0c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc0e:	6859      	ldr	r1, [r3, #4]
 800dc10:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc12:	bf08      	it	eq
 800dc14:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800dc16:	2200      	movs	r2, #0
 800dc18:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	3a01      	subs	r2, #1
 800dc1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc20:	6818      	ldr	r0, [r3, #0]
}
 800dc22:	4770      	bx	lr

0800dc24 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800dc24:	2300      	movs	r3, #0
{
 800dc26:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800dc28:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc2a:	4b0f      	ldr	r3, [pc, #60]	; (800dc68 <prvTaskExitError+0x44>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	d00a      	beq.n	800dc48 <prvTaskExitError+0x24>
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	b672      	cpsid	i
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	b662      	cpsie	i
 800dc46:	e7fe      	b.n	800dc46 <prvTaskExitError+0x22>
 800dc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4c:	b672      	cpsid	i
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc5c:	9b01      	ldr	r3, [sp, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0fc      	beq.n	800dc5c <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc62:	b002      	add	sp, #8
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	200000d4 	.word	0x200000d4

0800dc6c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc6c:	4808      	ldr	r0, [pc, #32]	; (800dc90 <prvPortStartFirstTask+0x24>)
 800dc6e:	6800      	ldr	r0, [r0, #0]
 800dc70:	6800      	ldr	r0, [r0, #0]
 800dc72:	f380 8808 	msr	MSP, r0
 800dc76:	f04f 0000 	mov.w	r0, #0
 800dc7a:	f380 8814 	msr	CONTROL, r0
 800dc7e:	b662      	cpsie	i
 800dc80:	b661      	cpsie	f
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	df00      	svc	0
 800dc8c:	bf00      	nop
 800dc8e:	0000      	.short	0x0000
 800dc90:	e000ed08 	.word	0xe000ed08

0800dc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dca4 <vPortEnableVFP+0x10>
 800dc98:	6801      	ldr	r1, [r0, #0]
 800dc9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc9e:	6001      	str	r1, [r0, #0]
 800dca0:	4770      	bx	lr
 800dca2:	0000      	.short	0x0000
 800dca4:	e000ed88 	.word	0xe000ed88

0800dca8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcac:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dcb0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800dcb4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dcb6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcb8:	4b03      	ldr	r3, [pc, #12]	; (800dcc8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dcba:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dcbc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dcbe:	f06f 0302 	mvn.w	r3, #2
 800dcc2:	6203      	str	r3, [r0, #32]
}
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop
 800dcc8:	0800dc25 	.word	0x0800dc25
 800dccc:	00000000 	.word	0x00000000

0800dcd0 <SVC_Handler>:
	__asm volatile (
 800dcd0:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <pxCurrentTCBConst2>)
 800dcd2:	6819      	ldr	r1, [r3, #0]
 800dcd4:	6808      	ldr	r0, [r1, #0]
 800dcd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcda:	f380 8809 	msr	PSP, r0
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f04f 0000 	mov.w	r0, #0
 800dce6:	f380 8811 	msr	BASEPRI, r0
 800dcea:	4770      	bx	lr
 800dcec:	f3af 8000 	nop.w

0800dcf0 <pxCurrentTCBConst2>:
 800dcf0:	2004529c 	.word	0x2004529c

0800dcf4 <vPortEnterCritical>:
 800dcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf8:	b672      	cpsid	i
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	b662      	cpsie	i
	uxCriticalNesting++;
 800dd08:	4a0b      	ldr	r2, [pc, #44]	; (800dd38 <vPortEnterCritical+0x44>)
 800dd0a:	6813      	ldr	r3, [r2, #0]
 800dd0c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800dd0e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800dd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800dd12:	d10f      	bne.n	800dd34 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd14:	4b09      	ldr	r3, [pc, #36]	; (800dd3c <vPortEnterCritical+0x48>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dd1c:	d00a      	beq.n	800dd34 <vPortEnterCritical+0x40>
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	b672      	cpsid	i
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	b662      	cpsie	i
 800dd32:	e7fe      	b.n	800dd32 <vPortEnterCritical+0x3e>
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	200000d4 	.word	0x200000d4
 800dd3c:	e000ed04 	.word	0xe000ed04

0800dd40 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800dd40:	4a09      	ldr	r2, [pc, #36]	; (800dd68 <vPortExitCritical+0x28>)
 800dd42:	6813      	ldr	r3, [r2, #0]
 800dd44:	b953      	cbnz	r3, 800dd5c <vPortExitCritical+0x1c>
 800dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4a:	b672      	cpsid	i
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	b662      	cpsie	i
 800dd5a:	e7fe      	b.n	800dd5a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd60:	b90b      	cbnz	r3, 800dd66 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	4770      	bx	lr
 800dd68:	200000d4 	.word	0x200000d4
 800dd6c:	00000000 	.word	0x00000000

0800dd70 <PendSV_Handler>:
	__asm volatile
 800dd70:	f3ef 8009 	mrs	r0, PSP
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	4b15      	ldr	r3, [pc, #84]	; (800ddd0 <pxCurrentTCBConst>)
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	f01e 0f10 	tst.w	lr, #16
 800dd80:	bf08      	it	eq
 800dd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	6010      	str	r0, [r2, #0]
 800dd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd94:	b672      	cpsid	i
 800dd96:	f380 8811 	msr	BASEPRI, r0
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	b662      	cpsie	i
 800dda4:	f001 f846 	bl	800ee34 <vTaskSwitchContext>
 800dda8:	f04f 0000 	mov.w	r0, #0
 800ddac:	f380 8811 	msr	BASEPRI, r0
 800ddb0:	bc09      	pop	{r0, r3}
 800ddb2:	6819      	ldr	r1, [r3, #0]
 800ddb4:	6808      	ldr	r0, [r1, #0]
 800ddb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddba:	f01e 0f10 	tst.w	lr, #16
 800ddbe:	bf08      	it	eq
 800ddc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ddc4:	f380 8809 	msr	PSP, r0
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop

0800ddd0 <pxCurrentTCBConst>:
 800ddd0:	2004529c 	.word	0x2004529c

0800ddd4 <SysTick_Handler>:
{
 800ddd4:	b508      	push	{r3, lr}
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	b672      	cpsid	i
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800ddea:	f000 feef 	bl	800ebcc <xTaskIncrementTick>
 800ddee:	b118      	cbz	r0, 800ddf8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ddf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddf4:	4b02      	ldr	r3, [pc, #8]	; (800de00 <SysTick_Handler+0x2c>)
 800ddf6:	601a      	str	r2, [r3, #0]
	__asm volatile
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	bd08      	pop	{r3, pc}
 800de00:	e000ed04 	.word	0xe000ed04

0800de04 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de04:	2300      	movs	r3, #0
 800de06:	4a08      	ldr	r2, [pc, #32]	; (800de28 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de08:	4908      	ldr	r1, [pc, #32]	; (800de2c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de0c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800de12:	4b07      	ldr	r3, [pc, #28]	; (800de30 <vPortSetupTimerInterrupt+0x2c>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	fbb3 f3f1 	udiv	r3, r3, r1
 800de1a:	4906      	ldr	r1, [pc, #24]	; (800de34 <vPortSetupTimerInterrupt+0x30>)
 800de1c:	3b01      	subs	r3, #1
 800de1e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de20:	2307      	movs	r3, #7
 800de22:	6013      	str	r3, [r2, #0]
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	e000e010 	.word	0xe000e010
 800de2c:	e000e018 	.word	0xe000e018
 800de30:	200000cc 	.word	0x200000cc
 800de34:	e000e014 	.word	0xe000e014

0800de38 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de38:	4b2c      	ldr	r3, [pc, #176]	; (800deec <xPortStartScheduler+0xb4>)
{
 800de3a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de3c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de3e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de40:	b2d2      	uxtb	r2, r2
 800de42:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de44:	22ff      	movs	r2, #255	; 0xff
 800de46:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de48:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de4a:	4a29      	ldr	r2, [pc, #164]	; (800def0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800de56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800de5a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de5c:	2207      	movs	r2, #7
 800de5e:	4b25      	ldr	r3, [pc, #148]	; (800def4 <xPortStartScheduler+0xbc>)
 800de60:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de62:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800de66:	1e54      	subs	r4, r2, #1
 800de68:	0600      	lsls	r0, r0, #24
 800de6a:	d40f      	bmi.n	800de8c <xPortStartScheduler+0x54>
 800de6c:	b101      	cbz	r1, 800de70 <xPortStartScheduler+0x38>
 800de6e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	2a03      	cmp	r2, #3
 800de74:	d013      	beq.n	800de9e <xPortStartScheduler+0x66>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7a:	b672      	cpsid	i
 800de7c:	f383 8811 	msr	BASEPRI, r3
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	f3bf 8f4f 	dsb	sy
 800de88:	b662      	cpsie	i
 800de8a:	e7fe      	b.n	800de8a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800de90:	2101      	movs	r1, #1
 800de92:	0052      	lsls	r2, r2, #1
 800de94:	b2d2      	uxtb	r2, r2
 800de96:	f88d 2003 	strb.w	r2, [sp, #3]
 800de9a:	4622      	mov	r2, r4
 800de9c:	e7e1      	b.n	800de62 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800de9e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800dea0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dea2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800dea6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dea8:	9b01      	ldr	r3, [sp, #4]
 800deaa:	4a10      	ldr	r2, [pc, #64]	; (800deec <xPortStartScheduler+0xb4>)
 800deac:	b2db      	uxtb	r3, r3
 800deae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deb0:	4b11      	ldr	r3, [pc, #68]	; (800def8 <xPortStartScheduler+0xc0>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800deb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800dec0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800dec2:	f7ff ff9f 	bl	800de04 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <xPortStartScheduler+0xc4>)
 800dec8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800deca:	f7ff fee3 	bl	800dc94 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dece:	4a0c      	ldr	r2, [pc, #48]	; (800df00 <xPortStartScheduler+0xc8>)
 800ded0:	6813      	ldr	r3, [r2, #0]
 800ded2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ded6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800ded8:	f7ff fec8 	bl	800dc6c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800dedc:	f000 ffaa 	bl	800ee34 <vTaskSwitchContext>
	prvTaskExitError();
 800dee0:	f7ff fea0 	bl	800dc24 <prvTaskExitError>
}
 800dee4:	4620      	mov	r0, r4
 800dee6:	b002      	add	sp, #8
 800dee8:	bd10      	pop	{r4, pc}
 800deea:	bf00      	nop
 800deec:	e000e400 	.word	0xe000e400
 800def0:	20045294 	.word	0x20045294
 800def4:	20045298 	.word	0x20045298
 800def8:	e000ed20 	.word	0xe000ed20
 800defc:	200000d4 	.word	0x200000d4
 800df00:	e000ef34 	.word	0xe000ef34

0800df04 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df04:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df08:	2b0f      	cmp	r3, #15
 800df0a:	d910      	bls.n	800df2e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df0c:	4a12      	ldr	r2, [pc, #72]	; (800df58 <vPortValidateInterruptPriority+0x54>)
 800df0e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df10:	4a12      	ldr	r2, [pc, #72]	; (800df5c <vPortValidateInterruptPriority+0x58>)
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d90a      	bls.n	800df2e <vPortValidateInterruptPriority+0x2a>
 800df18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1c:	b672      	cpsid	i
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	b662      	cpsie	i
 800df2c:	e7fe      	b.n	800df2c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df2e:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <vPortValidateInterruptPriority+0x5c>)
 800df30:	4a0c      	ldr	r2, [pc, #48]	; (800df64 <vPortValidateInterruptPriority+0x60>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	6812      	ldr	r2, [r2, #0]
 800df36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d90a      	bls.n	800df54 <vPortValidateInterruptPriority+0x50>
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	b672      	cpsid	i
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	b662      	cpsie	i
 800df52:	e7fe      	b.n	800df52 <vPortValidateInterruptPriority+0x4e>
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	e000e3f0 	.word	0xe000e3f0
 800df5c:	20045294 	.word	0x20045294
 800df60:	e000ed0c 	.word	0xe000ed0c
 800df64:	20045298 	.word	0x20045298

0800df68 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df68:	b510      	push	{r4, lr}
 800df6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df6c:	f7ff fec2 	bl	800dcf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800df72:	f7ff fee5 	bl	800dd40 <vPortExitCritical>

	return xReturn;
}
 800df76:	fab4 f084 	clz	r0, r4
 800df7a:	0940      	lsrs	r0, r0, #5
 800df7c:	bd10      	pop	{r4, pc}

0800df7e <prvCopyDataToQueue>:
{
 800df7e:	b570      	push	{r4, r5, r6, lr}
 800df80:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df82:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800df84:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df86:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800df88:	b942      	cbnz	r2, 800df9c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df8a:	6805      	ldr	r5, [r0, #0]
 800df8c:	b99d      	cbnz	r5, 800dfb6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800df8e:	6840      	ldr	r0, [r0, #4]
 800df90:	f001 f8c0 	bl	800f114 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800df94:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df96:	3601      	adds	r6, #1
 800df98:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800df9a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800df9c:	b96d      	cbnz	r5, 800dfba <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800df9e:	6880      	ldr	r0, [r0, #8]
 800dfa0:	f016 fdc7 	bl	8024b32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dfa8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfaa:	6862      	ldr	r2, [r4, #4]
 800dfac:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dfae:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfb0:	d301      	bcc.n	800dfb6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	e7ed      	b.n	800df96 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfba:	68c0      	ldr	r0, [r0, #12]
 800dfbc:	f016 fdb9 	bl	8024b32 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dfc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfc2:	68e2      	ldr	r2, [r4, #12]
 800dfc4:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfc6:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dfc8:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dfca:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dfcc:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dfce:	bf3e      	ittt	cc
 800dfd0:	6862      	ldrcc	r2, [r4, #4]
 800dfd2:	189b      	addcc	r3, r3, r2
 800dfd4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800dfd6:	2d02      	cmp	r5, #2
 800dfd8:	d1ed      	bne.n	800dfb6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfda:	b10e      	cbz	r6, 800dfe0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800dfdc:	3e01      	subs	r6, #1
 800dfde:	e7ea      	b.n	800dfb6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	e7d8      	b.n	800df96 <prvCopyDataToQueue+0x18>

0800dfe4 <prvCopyDataFromQueue>:
{
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dfe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800dfea:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dfec:	b162      	cbz	r2, 800e008 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dfee:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dff0:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dff2:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dff4:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dff6:	60d9      	str	r1, [r3, #12]
}
 800dff8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dffc:	bf24      	itt	cs
 800dffe:	6819      	ldrcs	r1, [r3, #0]
 800e000:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e002:	68d9      	ldr	r1, [r3, #12]
 800e004:	f016 bd95 	b.w	8024b32 <memcpy>
}
 800e008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e00c:	4770      	bx	lr

0800e00e <prvUnlockQueue>:
{
 800e00e:	b570      	push	{r4, r5, r6, lr}
 800e010:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e012:	f7ff fe6f 	bl	800dcf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e016:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e01a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e01e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e020:	2d00      	cmp	r5, #0
 800e022:	dc14      	bgt.n	800e04e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e024:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e026:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800e02e:	f7ff fe87 	bl	800dd40 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e032:	f7ff fe5f 	bl	800dcf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e036:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800e03a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	dc12      	bgt.n	800e066 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e040:	23ff      	movs	r3, #255	; 0xff
 800e042:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800e046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e04a:	f7ff be79 	b.w	800dd40 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e050:	2b00      	cmp	r3, #0
 800e052:	d0e7      	beq.n	800e024 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e054:	4630      	mov	r0, r6
 800e056:	f000 ff5d 	bl	800ef14 <xTaskRemoveFromEventList>
 800e05a:	b108      	cbz	r0, 800e060 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e05c:	f000 ffea 	bl	800f034 <vTaskMissedYield>
 800e060:	3d01      	subs	r5, #1
 800e062:	b26d      	sxtb	r5, r5
 800e064:	e7dc      	b.n	800e020 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e066:	6923      	ldr	r3, [r4, #16]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0e9      	beq.n	800e040 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e06c:	4630      	mov	r0, r6
 800e06e:	f000 ff51 	bl	800ef14 <xTaskRemoveFromEventList>
 800e072:	b108      	cbz	r0, 800e078 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e074:	f000 ffde 	bl	800f034 <vTaskMissedYield>
 800e078:	3d01      	subs	r5, #1
 800e07a:	b26d      	sxtb	r5, r5
 800e07c:	e7de      	b.n	800e03c <prvUnlockQueue+0x2e>
	...

0800e080 <xQueueGenericReset>:
{
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e084:	4604      	mov	r4, r0
 800e086:	b950      	cbnz	r0, 800e09e <xQueueGenericReset+0x1e>
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	b672      	cpsid	i
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	b662      	cpsie	i
 800e09c:	e7fe      	b.n	800e09c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800e09e:	f7ff fe29 	bl	800dcf4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e0a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e0a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0a6:	6822      	ldr	r2, [r4, #0]
 800e0a8:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0aa:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e0ac:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e0ae:	1a1b      	subs	r3, r3, r0
 800e0b0:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e0b2:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0b4:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e0b6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e0b8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0ba:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e0bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800e0c4:	b995      	cbnz	r5, 800e0ec <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	b163      	cbz	r3, 800e0e4 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0ca:	f104 0010 	add.w	r0, r4, #16
 800e0ce:	f000 ff21 	bl	800ef14 <xTaskRemoveFromEventList>
 800e0d2:	b138      	cbz	r0, 800e0e4 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <xQueueGenericReset+0x80>)
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e0e4:	f7ff fe2c 	bl	800dd40 <vPortExitCritical>
}
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0ec:	f104 0010 	add.w	r0, r4, #16
 800e0f0:	f7ff fd56 	bl	800dba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e0f8:	f7ff fd52 	bl	800dba0 <vListInitialise>
 800e0fc:	e7f2      	b.n	800e0e4 <xQueueGenericReset+0x64>
 800e0fe:	bf00      	nop
 800e100:	e000ed04 	.word	0xe000ed04

0800e104 <xQueueGenericCreate>:
	{
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e108:	4606      	mov	r6, r0
 800e10a:	b950      	cbnz	r0, 800e122 <xQueueGenericCreate+0x1e>
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	b672      	cpsid	i
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	b662      	cpsie	i
 800e120:	e7fe      	b.n	800e120 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e122:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e124:	3048      	adds	r0, #72	; 0x48
 800e126:	f7ff fc6b 	bl	800da00 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e12a:	4604      	mov	r4, r0
 800e12c:	b138      	cbz	r0, 800e13e <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e12e:	b945      	cbnz	r5, 800e142 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e130:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800e132:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e134:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800e136:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff ffa1 	bl	800e080 <xQueueGenericReset>
	}
 800e13e:	4620      	mov	r0, r4
 800e140:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e142:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e146:	6003      	str	r3, [r0, #0]
 800e148:	e7f3      	b.n	800e132 <xQueueGenericCreate+0x2e>

0800e14a <xQueueCreateCountingSemaphore>:
	{
 800e14a:	b510      	push	{r4, lr}
 800e14c:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e14e:	b950      	cbnz	r0, 800e166 <xQueueCreateCountingSemaphore+0x1c>
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	b672      	cpsid	i
 800e156:	f383 8811 	msr	BASEPRI, r3
 800e15a:	f3bf 8f6f 	isb	sy
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	b662      	cpsie	i
 800e164:	e7fe      	b.n	800e164 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e166:	4288      	cmp	r0, r1
 800e168:	d20a      	bcs.n	800e180 <xQueueCreateCountingSemaphore+0x36>
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	b672      	cpsid	i
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	b662      	cpsie	i
 800e17e:	e7fe      	b.n	800e17e <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e180:	2202      	movs	r2, #2
 800e182:	2100      	movs	r1, #0
 800e184:	f7ff ffbe 	bl	800e104 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e188:	b100      	cbz	r0, 800e18c <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e18a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e18c:	bd10      	pop	{r4, pc}
	...

0800e190 <xQueueGenericSend>:
{
 800e190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	4689      	mov	r9, r1
 800e196:	9201      	str	r2, [sp, #4]
 800e198:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e19a:	4604      	mov	r4, r0
 800e19c:	b950      	cbnz	r0, 800e1b4 <xQueueGenericSend+0x24>
 800e19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a2:	b672      	cpsid	i
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	b662      	cpsie	i
 800e1b2:	e7fe      	b.n	800e1b2 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	f040 808c 	bne.w	800e2d2 <xQueueGenericSend+0x142>
 800e1ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f000 8088 	beq.w	800e2d2 <xQueueGenericSend+0x142>
 800e1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c6:	b672      	cpsid	i
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	b662      	cpsie	i
 800e1d6:	e7fe      	b.n	800e1d6 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1d8:	9e01      	ldr	r6, [sp, #4]
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	f000 8084 	beq.w	800e2e8 <xQueueGenericSend+0x158>
 800e1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e4:	b672      	cpsid	i
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	b662      	cpsie	i
 800e1f4:	e7fe      	b.n	800e1f4 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1f6:	9d01      	ldr	r5, [sp, #4]
 800e1f8:	b91d      	cbnz	r5, 800e202 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800e1fa:	f7ff fda1 	bl	800dd40 <vPortExitCritical>
			return errQUEUE_FULL;
 800e1fe:	2000      	movs	r0, #0
 800e200:	e058      	b.n	800e2b4 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 800e202:	b916      	cbnz	r6, 800e20a <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e204:	a802      	add	r0, sp, #8
 800e206:	f000 fec9 	bl	800ef9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e20a:	f7ff fd99 	bl	800dd40 <vPortExitCritical>
		vTaskSuspendAll();
 800e20e:	f000 fcc7 	bl	800eba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e212:	f7ff fd6f 	bl	800dcf4 <vPortEnterCritical>
 800e216:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e21a:	2bff      	cmp	r3, #255	; 0xff
 800e21c:	d101      	bne.n	800e222 <xQueueGenericSend+0x92>
 800e21e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800e222:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e226:	2bff      	cmp	r3, #255	; 0xff
 800e228:	d101      	bne.n	800e22e <xQueueGenericSend+0x9e>
 800e22a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800e22e:	f7ff fd87 	bl	800dd40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e232:	a901      	add	r1, sp, #4
 800e234:	a802      	add	r0, sp, #8
 800e236:	f000 febd 	bl	800efb4 <xTaskCheckForTimeOut>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d143      	bne.n	800e2c6 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e23e:	f7ff fd59 	bl	800dcf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e242:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e244:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e246:	f7ff fd7b 	bl	800dd40 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e24a:	42ae      	cmp	r6, r5
 800e24c:	d135      	bne.n	800e2ba <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e24e:	9901      	ldr	r1, [sp, #4]
 800e250:	f104 0010 	add.w	r0, r4, #16
 800e254:	f000 fe42 	bl	800eedc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e258:	4620      	mov	r0, r4
 800e25a:	f7ff fed8 	bl	800e00e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e25e:	f000 fd49 	bl	800ecf4 <xTaskResumeAll>
 800e262:	b938      	cbnz	r0, 800e274 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800e264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e268:	f8ca 3000 	str.w	r3, [sl]
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	f3bf 8f6f 	isb	sy
 800e274:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e276:	f7ff fd3d 	bl	800dcf4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e27a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e27c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e27e:	429a      	cmp	r2, r3
 800e280:	d301      	bcc.n	800e286 <xQueueGenericSend+0xf6>
 800e282:	2f02      	cmp	r7, #2
 800e284:	d1b7      	bne.n	800e1f6 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e286:	463a      	mov	r2, r7
 800e288:	4649      	mov	r1, r9
 800e28a:	4620      	mov	r0, r4
 800e28c:	f7ff fe77 	bl	800df7e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e292:	b11b      	cbz	r3, 800e29c <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e294:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e298:	f000 fe3c 	bl	800ef14 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800e29c:	b138      	cbz	r0, 800e2ae <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 800e29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2a2:	4b19      	ldr	r3, [pc, #100]	; (800e308 <xQueueGenericSend+0x178>)
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e2ae:	f7ff fd47 	bl	800dd40 <vPortExitCritical>
				return pdPASS;
 800e2b2:	2001      	movs	r0, #1
}
 800e2b4:	b004      	add	sp, #16
 800e2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f7ff fea7 	bl	800e00e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2c0:	f000 fd18 	bl	800ecf4 <xTaskResumeAll>
 800e2c4:	e7d6      	b.n	800e274 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	f7ff fea1 	bl	800e00e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e2cc:	f000 fd12 	bl	800ecf4 <xTaskResumeAll>
 800e2d0:	e795      	b.n	800e1fe <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e2d2:	2f02      	cmp	r7, #2
 800e2d4:	d102      	bne.n	800e2dc <xQueueGenericSend+0x14c>
 800e2d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d10a      	bne.n	800e2f2 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2dc:	f000 feb6 	bl	800f04c <xTaskGetSchedulerState>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	f43f af79 	beq.w	800e1d8 <xQueueGenericSend+0x48>
 800e2e6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e2e8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800e2ec:	f8df a018 	ldr.w	sl, [pc, #24]	; 800e308 <xQueueGenericSend+0x178>
 800e2f0:	e7c1      	b.n	800e276 <xQueueGenericSend+0xe6>
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	b672      	cpsid	i
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	b662      	cpsie	i
 800e306:	e7fe      	b.n	800e306 <xQueueGenericSend+0x176>
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <xQueueCreateMutex>:
	{
 800e30c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e30e:	4602      	mov	r2, r0
 800e310:	2100      	movs	r1, #0
 800e312:	2001      	movs	r0, #1
 800e314:	f7ff fef6 	bl	800e104 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800e318:	4604      	mov	r4, r0
 800e31a:	b138      	cbz	r0, 800e32c <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800e31c:	2300      	movs	r3, #0
 800e31e:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e320:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e322:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e324:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800e326:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e328:	f7ff ff32 	bl	800e190 <xQueueGenericSend>
	}
 800e32c:	4620      	mov	r0, r4
 800e32e:	bd10      	pop	{r4, pc}

0800e330 <xQueueGenericSendFromISR>:
{
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	4688      	mov	r8, r1
 800e336:	4691      	mov	r9, r2
 800e338:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e33a:	4604      	mov	r4, r0
 800e33c:	b950      	cbnz	r0, 800e354 <xQueueGenericSendFromISR+0x24>
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	b672      	cpsid	i
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	b662      	cpsie	i
 800e352:	e7fe      	b.n	800e352 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e354:	bb19      	cbnz	r1, 800e39e <xQueueGenericSendFromISR+0x6e>
 800e356:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e358:	b30b      	cbz	r3, 800e39e <xQueueGenericSendFromISR+0x6e>
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	b672      	cpsid	i
 800e360:	f383 8811 	msr	BASEPRI, r3
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	f3bf 8f4f 	dsb	sy
 800e36c:	b662      	cpsie	i
 800e36e:	e7fe      	b.n	800e36e <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e370:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e374:	f000 fdce 	bl	800ef14 <xTaskRemoveFromEventList>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d036      	beq.n	800e3ea <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800e37c:	f1b9 0f00 	cmp.w	r9, #0
 800e380:	d033      	beq.n	800e3ea <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e382:	2001      	movs	r0, #1
 800e384:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800e388:	f386 8811 	msr	BASEPRI, r6
}
 800e38c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e390:	3501      	adds	r5, #1
 800e392:	b26d      	sxtb	r5, r5
 800e394:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800e398:	e027      	b.n	800e3ea <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800e39a:	2000      	movs	r0, #0
 800e39c:	e7f4      	b.n	800e388 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e39e:	2f02      	cmp	r7, #2
 800e3a0:	d102      	bne.n	800e3a8 <xQueueGenericSendFromISR+0x78>
 800e3a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d122      	bne.n	800e3ee <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3a8:	f7ff fdac 	bl	800df04 <vPortValidateInterruptPriority>
	__asm volatile
 800e3ac:	f3ef 8611 	mrs	r6, BASEPRI
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	b672      	cpsid	i
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e3c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e3c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d301      	bcc.n	800e3d0 <xQueueGenericSendFromISR+0xa0>
 800e3cc:	2f02      	cmp	r7, #2
 800e3ce:	d1e4      	bne.n	800e39a <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3d0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3d4:	463a      	mov	r2, r7
 800e3d6:	4641      	mov	r1, r8
 800e3d8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800e3da:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e3dc:	f7ff fdcf 	bl	800df7e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800e3e0:	1c6b      	adds	r3, r5, #1
 800e3e2:	d1d5      	bne.n	800e390 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d1c2      	bne.n	800e370 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e7cc      	b.n	800e388 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	b672      	cpsid	i
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	b662      	cpsie	i
 800e402:	e7fe      	b.n	800e402 <xQueueGenericSendFromISR+0xd2>

0800e404 <xQueueGiveFromISR>:
{
 800e404:	b570      	push	{r4, r5, r6, lr}
 800e406:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e408:	4604      	mov	r4, r0
 800e40a:	b950      	cbnz	r0, 800e422 <xQueueGiveFromISR+0x1e>
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	b672      	cpsid	i
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	b662      	cpsie	i
 800e420:	e7fe      	b.n	800e420 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e422:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e424:	b153      	cbz	r3, 800e43c <xQueueGiveFromISR+0x38>
 800e426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42a:	b672      	cpsid	i
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	b662      	cpsie	i
 800e43a:	e7fe      	b.n	800e43a <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e43c:	6803      	ldr	r3, [r0, #0]
 800e43e:	b913      	cbnz	r3, 800e446 <xQueueGiveFromISR+0x42>
 800e440:	6843      	ldr	r3, [r0, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d130      	bne.n	800e4a8 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e446:	f7ff fd5d 	bl	800df04 <vPortValidateInterruptPriority>
	__asm volatile
 800e44a:	f3ef 8611 	mrs	r6, BASEPRI
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	b672      	cpsid	i
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e462:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e466:	429a      	cmp	r2, r3
 800e468:	d301      	bcc.n	800e46e <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 800e46a:	2000      	movs	r0, #0
 800e46c:	e014      	b.n	800e498 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e46e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e472:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800e474:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e476:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800e478:	1c5a      	adds	r2, r3, #1
 800e47a:	d110      	bne.n	800e49e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e47e:	b90b      	cbnz	r3, 800e484 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800e480:	2001      	movs	r0, #1
 800e482:	e009      	b.n	800e498 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e488:	f000 fd44 	bl	800ef14 <xTaskRemoveFromEventList>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d0f7      	beq.n	800e480 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e490:	2d00      	cmp	r5, #0
 800e492:	d0f5      	beq.n	800e480 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e494:	2001      	movs	r0, #1
 800e496:	6028      	str	r0, [r5, #0]
	__asm volatile
 800e498:	f386 8811 	msr	BASEPRI, r6
}
 800e49c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e49e:	3301      	adds	r3, #1
 800e4a0:	b25b      	sxtb	r3, r3
 800e4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4a6:	e7eb      	b.n	800e480 <xQueueGiveFromISR+0x7c>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	b672      	cpsid	i
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	b662      	cpsie	i
 800e4bc:	e7fe      	b.n	800e4bc <xQueueGiveFromISR+0xb8>
	...

0800e4c0 <xQueueReceive>:
{
 800e4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4c4:	b085      	sub	sp, #20
 800e4c6:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 800e4c8:	4604      	mov	r4, r0
{
 800e4ca:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e4cc:	b950      	cbnz	r0, 800e4e4 <xQueueReceive+0x24>
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	b672      	cpsid	i
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	b662      	cpsie	i
 800e4e2:	e7fe      	b.n	800e4e2 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	f040 808a 	bne.w	800e5fe <xQueueReceive+0x13e>
 800e4ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f000 8086 	beq.w	800e5fe <xQueueReceive+0x13e>
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	b672      	cpsid	i
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	b662      	cpsie	i
 800e506:	e7fe      	b.n	800e506 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e508:	9e01      	ldr	r6, [sp, #4]
 800e50a:	2e00      	cmp	r6, #0
 800e50c:	d07c      	beq.n	800e608 <xQueueReceive+0x148>
 800e50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e512:	b672      	cpsid	i
 800e514:	f383 8811 	msr	BASEPRI, r3
 800e518:	f3bf 8f6f 	isb	sy
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	b662      	cpsie	i
 800e522:	e7fe      	b.n	800e522 <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e524:	9d01      	ldr	r5, [sp, #4]
 800e526:	b91d      	cbnz	r5, 800e530 <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 800e528:	f7ff fc0a 	bl	800dd40 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800e52c:	2000      	movs	r0, #0
 800e52e:	e052      	b.n	800e5d6 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800e530:	b916      	cbnz	r6, 800e538 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e532:	a802      	add	r0, sp, #8
 800e534:	f000 fd32 	bl	800ef9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e538:	f7ff fc02 	bl	800dd40 <vPortExitCritical>
		vTaskSuspendAll();
 800e53c:	f000 fb30 	bl	800eba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e540:	f7ff fbd8 	bl	800dcf4 <vPortEnterCritical>
 800e544:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e548:	2bff      	cmp	r3, #255	; 0xff
 800e54a:	d101      	bne.n	800e550 <xQueueReceive+0x90>
 800e54c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e550:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e554:	2bff      	cmp	r3, #255	; 0xff
 800e556:	d101      	bne.n	800e55c <xQueueReceive+0x9c>
 800e558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e55c:	f7ff fbf0 	bl	800dd40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e560:	a901      	add	r1, sp, #4
 800e562:	a802      	add	r0, sp, #8
 800e564:	f000 fd26 	bl	800efb4 <xTaskCheckForTimeOut>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d13d      	bne.n	800e5e8 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e56c:	4620      	mov	r0, r4
 800e56e:	f7ff fcfb 	bl	800df68 <prvIsQueueEmpty>
 800e572:	b398      	cbz	r0, 800e5dc <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e574:	9901      	ldr	r1, [sp, #4]
 800e576:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e57a:	f000 fcaf 	bl	800eedc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e57e:	4620      	mov	r0, r4
 800e580:	f7ff fd45 	bl	800e00e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e584:	f000 fbb6 	bl	800ecf4 <xTaskResumeAll>
 800e588:	b938      	cbnz	r0, 800e59a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800e58a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e58e:	f8c9 3000 	str.w	r3, [r9]
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	f3bf 8f6f 	isb	sy
 800e59a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e59c:	f7ff fbaa 	bl	800dcf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5a2:	2d00      	cmp	r5, #0
 800e5a4:	d0be      	beq.n	800e524 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5a6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5a8:	4641      	mov	r1, r8
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f7ff fd1a 	bl	800dfe4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5b0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	b163      	cbz	r3, 800e5d0 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5b6:	f104 0010 	add.w	r0, r4, #16
 800e5ba:	f000 fcab 	bl	800ef14 <xTaskRemoveFromEventList>
 800e5be:	b138      	cbz	r0, 800e5d0 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800e5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c4:	4b12      	ldr	r3, [pc, #72]	; (800e610 <xQueueReceive+0x150>)
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e5d0:	f7ff fbb6 	bl	800dd40 <vPortExitCritical>
				return pdPASS;
 800e5d4:	2001      	movs	r0, #1
}
 800e5d6:	b005      	add	sp, #20
 800e5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f7ff fd16 	bl	800e00e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5e2:	f000 fb87 	bl	800ecf4 <xTaskResumeAll>
 800e5e6:	e7d8      	b.n	800e59a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f7ff fd10 	bl	800e00e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ee:	f000 fb81 	bl	800ecf4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7ff fcb8 	bl	800df68 <prvIsQueueEmpty>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d0ce      	beq.n	800e59a <xQueueReceive+0xda>
 800e5fc:	e796      	b.n	800e52c <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5fe:	f000 fd25 	bl	800f04c <xTaskGetSchedulerState>
 800e602:	2800      	cmp	r0, #0
 800e604:	d080      	beq.n	800e508 <xQueueReceive+0x48>
 800e606:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e608:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800e60a:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800e610 <xQueueReceive+0x150>
 800e60e:	e7c5      	b.n	800e59c <xQueueReceive+0xdc>
 800e610:	e000ed04 	.word	0xe000ed04

0800e614 <xQueueSemaphoreTake>:
{
 800e614:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800e618:	4604      	mov	r4, r0
{
 800e61a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e61c:	b950      	cbnz	r0, 800e634 <xQueueSemaphoreTake+0x20>
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	b672      	cpsid	i
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	b662      	cpsie	i
 800e632:	e7fe      	b.n	800e632 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e634:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e636:	b155      	cbz	r5, 800e64e <xQueueSemaphoreTake+0x3a>
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	b672      	cpsid	i
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	b662      	cpsie	i
 800e64c:	e7fe      	b.n	800e64c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e64e:	f000 fcfd 	bl	800f04c <xTaskGetSchedulerState>
 800e652:	b918      	cbnz	r0, 800e65c <xQueueSemaphoreTake+0x48>
 800e654:	9d01      	ldr	r5, [sp, #4]
 800e656:	2d00      	cmp	r5, #0
 800e658:	f040 8097 	bne.w	800e78a <xQueueSemaphoreTake+0x176>
 800e65c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e65e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800e660:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e7a0 <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 800e664:	f7ff fb46 	bl	800dcf4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e668:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e66a:	b1e3      	cbz	r3, 800e6a6 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e66c:	3b01      	subs	r3, #1
 800e66e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e670:	6823      	ldr	r3, [r4, #0]
 800e672:	b913      	cbnz	r3, 800e67a <xQueueSemaphoreTake+0x66>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e674:	f000 fdfe 	bl	800f274 <pvTaskIncrementMutexHeldCount>
 800e678:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e67a:	6923      	ldr	r3, [r4, #16]
 800e67c:	b163      	cbz	r3, 800e698 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e67e:	f104 0010 	add.w	r0, r4, #16
 800e682:	f000 fc47 	bl	800ef14 <xTaskRemoveFromEventList>
 800e686:	b138      	cbz	r0, 800e698 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 800e688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e68c:	4b44      	ldr	r3, [pc, #272]	; (800e7a0 <xQueueSemaphoreTake+0x18c>)
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800e698:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800e69a:	f7ff fb51 	bl	800dd40 <vPortExitCritical>
}
 800e69e:	4628      	mov	r0, r5
 800e6a0:	b004      	add	sp, #16
 800e6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6a6:	9b01      	ldr	r3, [sp, #4]
 800e6a8:	b973      	cbnz	r3, 800e6c8 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e6aa:	b155      	cbz	r5, 800e6c2 <xQueueSemaphoreTake+0xae>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	b672      	cpsid	i
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	b662      	cpsie	i
 800e6c0:	e7fe      	b.n	800e6c0 <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 800e6c2:	f7ff fb3d 	bl	800dd40 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e6c6:	e7ea      	b.n	800e69e <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800e6c8:	b916      	cbnz	r6, 800e6d0 <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6ca:	a802      	add	r0, sp, #8
 800e6cc:	f000 fc66 	bl	800ef9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e6d0:	f7ff fb36 	bl	800dd40 <vPortExitCritical>
		vTaskSuspendAll();
 800e6d4:	f000 fa64 	bl	800eba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6d8:	f7ff fb0c 	bl	800dcf4 <vPortEnterCritical>
 800e6dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e6e0:	2bff      	cmp	r3, #255	; 0xff
 800e6e2:	d101      	bne.n	800e6e8 <xQueueSemaphoreTake+0xd4>
 800e6e4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e6e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e6ec:	2bff      	cmp	r3, #255	; 0xff
 800e6ee:	d101      	bne.n	800e6f4 <xQueueSemaphoreTake+0xe0>
 800e6f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e6f4:	f7ff fb24 	bl	800dd40 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6f8:	a901      	add	r1, sp, #4
 800e6fa:	a802      	add	r0, sp, #8
 800e6fc:	f000 fc5a 	bl	800efb4 <xTaskCheckForTimeOut>
 800e700:	bb40      	cbnz	r0, 800e754 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e702:	4620      	mov	r0, r4
 800e704:	f7ff fc30 	bl	800df68 <prvIsQueueEmpty>
 800e708:	b1f0      	cbz	r0, 800e748 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	b93b      	cbnz	r3, 800e71e <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 800e70e:	f7ff faf1 	bl	800dcf4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e712:	6860      	ldr	r0, [r4, #4]
 800e714:	f000 fcaa 	bl	800f06c <xTaskPriorityInherit>
 800e718:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e71a:	f7ff fb11 	bl	800dd40 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e71e:	9901      	ldr	r1, [sp, #4]
 800e720:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e724:	f000 fbda 	bl	800eedc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e728:	4620      	mov	r0, r4
 800e72a:	f7ff fc70 	bl	800e00e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e72e:	f000 fae1 	bl	800ecf4 <xTaskResumeAll>
 800e732:	b938      	cbnz	r0, 800e744 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 800e734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e738:	f8c8 3000 	str.w	r3, [r8]
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	2601      	movs	r6, #1
 800e746:	e78d      	b.n	800e664 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 800e748:	4620      	mov	r0, r4
 800e74a:	f7ff fc60 	bl	800e00e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e74e:	f000 fad1 	bl	800ecf4 <xTaskResumeAll>
 800e752:	e7f7      	b.n	800e744 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 800e754:	4620      	mov	r0, r4
 800e756:	f7ff fc5a 	bl	800e00e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e75a:	f000 facb 	bl	800ecf4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e75e:	4620      	mov	r0, r4
 800e760:	f7ff fc02 	bl	800df68 <prvIsQueueEmpty>
 800e764:	2800      	cmp	r0, #0
 800e766:	d0ed      	beq.n	800e744 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 800e768:	2d00      	cmp	r5, #0
 800e76a:	d098      	beq.n	800e69e <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 800e76c:	f7ff fac2 	bl	800dcf4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e770:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e772:	b119      	cbz	r1, 800e77c <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e774:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e776:	6819      	ldr	r1, [r3, #0]
 800e778:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e77c:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 800e77e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e780:	f000 fd1c 	bl	800f1bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e784:	f7ff fadc 	bl	800dd40 <vPortExitCritical>
 800e788:	e789      	b.n	800e69e <xQueueSemaphoreTake+0x8a>
 800e78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78e:	b672      	cpsid	i
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	b662      	cpsie	i
 800e79e:	e7fe      	b.n	800e79e <xQueueSemaphoreTake+0x18a>
 800e7a0:	e000ed04 	.word	0xe000ed04

0800e7a4 <xQueueReceiveFromISR>:
{
 800e7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7a8:	4689      	mov	r9, r1
 800e7aa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	b950      	cbnz	r0, 800e7c6 <xQueueReceiveFromISR+0x22>
 800e7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b4:	b672      	cpsid	i
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	b662      	cpsie	i
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7c6:	bb81      	cbnz	r1, 800e82a <xQueueReceiveFromISR+0x86>
 800e7c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e7ca:	b373      	cbz	r3, 800e82a <xQueueReceiveFromISR+0x86>
 800e7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d0:	b672      	cpsid	i
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	b662      	cpsie	i
 800e7e0:	e7fe      	b.n	800e7e0 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e7e2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7ea:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e7ec:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7ee:	f7ff fbf9 	bl	800dfe4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e7f2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800e7f4:	1c73      	adds	r3, r6, #1
 800e7f6:	d113      	bne.n	800e820 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7f8:	692b      	ldr	r3, [r5, #16]
 800e7fa:	b90b      	cbnz	r3, 800e800 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	e00b      	b.n	800e818 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e800:	f105 0010 	add.w	r0, r5, #16
 800e804:	f000 fb86 	bl	800ef14 <xTaskRemoveFromEventList>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d0f7      	beq.n	800e7fc <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 800e80c:	f1b8 0f00 	cmp.w	r8, #0
 800e810:	d0f4      	beq.n	800e7fc <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e812:	2001      	movs	r0, #1
 800e814:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800e818:	f387 8811 	msr	BASEPRI, r7
}
 800e81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e820:	3601      	adds	r6, #1
 800e822:	b276      	sxtb	r6, r6
 800e824:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800e828:	e7e8      	b.n	800e7fc <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e82a:	f7ff fb6b 	bl	800df04 <vPortValidateInterruptPriority>
	__asm volatile
 800e82e:	f3ef 8711 	mrs	r7, BASEPRI
 800e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e836:	b672      	cpsid	i
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e846:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e848:	2c00      	cmp	r4, #0
 800e84a:	d1ca      	bne.n	800e7e2 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 800e84c:	4620      	mov	r0, r4
 800e84e:	e7e3      	b.n	800e818 <xQueueReceiveFromISR+0x74>

0800e850 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e850:	4a06      	ldr	r2, [pc, #24]	; (800e86c <prvResetNextTaskUnblockTime+0x1c>)
 800e852:	6813      	ldr	r3, [r2, #0]
 800e854:	6819      	ldr	r1, [r3, #0]
 800e856:	4b06      	ldr	r3, [pc, #24]	; (800e870 <prvResetNextTaskUnblockTime+0x20>)
 800e858:	b919      	cbnz	r1, 800e862 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e85a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e85e:	601a      	str	r2, [r3, #0]
 800e860:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e862:	6812      	ldr	r2, [r2, #0]
 800e864:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e866:	68d2      	ldr	r2, [r2, #12]
 800e868:	6852      	ldr	r2, [r2, #4]
 800e86a:	e7f8      	b.n	800e85e <prvResetNextTaskUnblockTime+0xe>
 800e86c:	200452a0 	.word	0x200452a0
 800e870:	20045378 	.word	0x20045378

0800e874 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e876:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800e878:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e87a:	4e1b      	ldr	r6, [pc, #108]	; (800e8e8 <prvAddCurrentTaskToDelayedList+0x74>)
{
 800e87c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e87e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e880:	6830      	ldr	r0, [r6, #0]
 800e882:	3004      	adds	r0, #4
 800e884:	f7ff f9bd 	bl	800dc02 <uxListRemove>
 800e888:	4633      	mov	r3, r6
 800e88a:	b940      	cbnz	r0, 800e89e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e88c:	6831      	ldr	r1, [r6, #0]
 800e88e:	2001      	movs	r0, #1
 800e890:	4e16      	ldr	r6, [pc, #88]	; (800e8ec <prvAddCurrentTaskToDelayedList+0x78>)
 800e892:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e894:	6832      	ldr	r2, [r6, #0]
 800e896:	4088      	lsls	r0, r1
 800e898:	ea22 0200 	bic.w	r2, r2, r0
 800e89c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e89e:	1c62      	adds	r2, r4, #1
 800e8a0:	d107      	bne.n	800e8b2 <prvAddCurrentTaskToDelayedList+0x3e>
 800e8a2:	b137      	cbz	r7, 800e8b2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8a4:	6819      	ldr	r1, [r3, #0]
 800e8a6:	4812      	ldr	r0, [pc, #72]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800e8a8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ae:	f7ff b985 	b.w	800dbbc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8b2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8b4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800e8b6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8b8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800e8ba:	d907      	bls.n	800e8cc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8bc:	4a0d      	ldr	r2, [pc, #52]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x80>)
 800e8be:	6810      	ldr	r0, [r2, #0]
 800e8c0:	6819      	ldr	r1, [r3, #0]
}
 800e8c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c6:	3104      	adds	r1, #4
 800e8c8:	f7ff b984 	b.w	800dbd4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8cc:	4a0a      	ldr	r2, [pc, #40]	; (800e8f8 <prvAddCurrentTaskToDelayedList+0x84>)
 800e8ce:	6810      	ldr	r0, [r2, #0]
 800e8d0:	6819      	ldr	r1, [r3, #0]
 800e8d2:	3104      	adds	r1, #4
 800e8d4:	f7ff f97e 	bl	800dbd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8d8:	4b08      	ldr	r3, [pc, #32]	; (800e8fc <prvAddCurrentTaskToDelayedList+0x88>)
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	4294      	cmp	r4, r2
 800e8de:	d200      	bcs.n	800e8e2 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800e8e0:	601c      	str	r4, [r3, #0]
 800e8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e4:	200453c0 	.word	0x200453c0
 800e8e8:	2004529c 	.word	0x2004529c
 800e8ec:	20045348 	.word	0x20045348
 800e8f0:	20045398 	.word	0x20045398
 800e8f4:	200452a4 	.word	0x200452a4
 800e8f8:	200452a0 	.word	0x200452a0
 800e8fc:	20045378 	.word	0x20045378

0800e900 <prvIdleTask>:
{
 800e900:	b580      	push	{r7, lr}
				taskYIELD();
 800e902:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800e96c <prvIdleTask+0x6c>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e906:	4f15      	ldr	r7, [pc, #84]	; (800e95c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e908:	4c15      	ldr	r4, [pc, #84]	; (800e960 <prvIdleTask+0x60>)
				--uxCurrentNumberOfTasks;
 800e90a:	4e16      	ldr	r6, [pc, #88]	; (800e964 <prvIdleTask+0x64>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	b973      	cbnz	r3, 800e92e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e910:	4b15      	ldr	r3, [pc, #84]	; (800e968 <prvIdleTask+0x68>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d907      	bls.n	800e928 <prvIdleTask+0x28>
				taskYIELD();
 800e918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e91c:	f8c8 3000 	str.w	r3, [r8]
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e928:	f7f2 fdbd 	bl	80014a6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e92c:	e7ec      	b.n	800e908 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800e92e:	f7ff f9e1 	bl	800dcf4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e936:	1d28      	adds	r0, r5, #4
 800e938:	f7ff f963 	bl	800dc02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e93c:	6833      	ldr	r3, [r6, #0]
 800e93e:	3b01      	subs	r3, #1
 800e940:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	3b01      	subs	r3, #1
 800e946:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e948:	f7ff f9fa 	bl	800dd40 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800e94c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e94e:	f7ff f8eb 	bl	800db28 <vPortFree>
			vPortFree( pxTCB );
 800e952:	4628      	mov	r0, r5
 800e954:	f7ff f8e8 	bl	800db28 <vPortFree>
 800e958:	e7d8      	b.n	800e90c <prvIdleTask+0xc>
 800e95a:	bf00      	nop
 800e95c:	200453ac 	.word	0x200453ac
 800e960:	20045338 	.word	0x20045338
 800e964:	20045334 	.word	0x20045334
 800e968:	200452a8 	.word	0x200452a8
 800e96c:	e000ed04 	.word	0xe000ed04

0800e970 <xTaskCreate>:
	{
 800e970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e974:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800e978:	4680      	mov	r8, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e97e:	4650      	mov	r0, sl
	{
 800e980:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e982:	f7ff f83d 	bl	800da00 <pvPortMalloc>
			if( pxStack != NULL )
 800e986:	4607      	mov	r7, r0
 800e988:	2800      	cmp	r0, #0
 800e98a:	f000 809e 	beq.w	800eaca <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800e98e:	2058      	movs	r0, #88	; 0x58
 800e990:	f7ff f836 	bl	800da00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e994:	4604      	mov	r4, r0
 800e996:	2800      	cmp	r0, #0
 800e998:	f000 8094 	beq.w	800eac4 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e99c:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 800e99e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e9a0:	21a5      	movs	r1, #165	; 0xa5
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f016 f8ea 	bl	8024b7c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e9a8:	f1aa 0a04 	sub.w	sl, sl, #4
 800e9ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e9ae:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e9b2:	449a      	add	sl, r3
 800e9b4:	1e6b      	subs	r3, r5, #1
 800e9b6:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e9b8:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e9bc:	7859      	ldrb	r1, [r3, #1]
 800e9be:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800e9c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e9c6:	b109      	cbz	r1, 800e9cc <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9c8:	42ab      	cmp	r3, r5
 800e9ca:	d1f7      	bne.n	800e9bc <xTaskCreate+0x4c>
 800e9cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9ce:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9d2:	1d27      	adds	r7, r4, #4
 800e9d4:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9d6:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9da:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800e9dc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800e9e0:	bf28      	it	cs
 800e9e2:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800e9e4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e9e6:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9e8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9ec:	f7ff f8e3 	bl	800dbb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9f0:	f104 0018 	add.w	r0, r4, #24
 800e9f4:	f7ff f8df 	bl	800dbb6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e9f8:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9fc:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e9fe:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea00:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea02:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea04:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea06:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 800ea08:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea0c:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea10:	f7ff f94a 	bl	800dca8 <pxPortInitialiseStack>
 800ea14:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800ea16:	b106      	cbz	r6, 800ea1a <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea18:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800ea1a:	f7ff f96b 	bl	800dcf4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ea1e:	4b32      	ldr	r3, [pc, #200]	; (800eae8 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 800ea20:	4e32      	ldr	r6, [pc, #200]	; (800eaec <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800eb18 <xTaskCreate+0x1a8>
 800ea28:	3201      	adds	r2, #1
 800ea2a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ea2c:	6835      	ldr	r5, [r6, #0]
 800ea2e:	2d00      	cmp	r5, #0
 800ea30:	d14e      	bne.n	800ead0 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 800ea32:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d11d      	bne.n	800ea76 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea3a:	eb08 0005 	add.w	r0, r8, r5
 800ea3e:	3514      	adds	r5, #20
 800ea40:	f7ff f8ae 	bl	800dba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea44:	2d8c      	cmp	r5, #140	; 0x8c
 800ea46:	d1f8      	bne.n	800ea3a <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 800ea48:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800eb1c <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 800ea4c:	4d28      	ldr	r5, [pc, #160]	; (800eaf0 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 800ea4e:	4648      	mov	r0, r9
 800ea50:	f7ff f8a6 	bl	800dba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea54:	4628      	mov	r0, r5
 800ea56:	f7ff f8a3 	bl	800dba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea5a:	4826      	ldr	r0, [pc, #152]	; (800eaf4 <xTaskCreate+0x184>)
 800ea5c:	f7ff f8a0 	bl	800dba0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ea60:	4825      	ldr	r0, [pc, #148]	; (800eaf8 <xTaskCreate+0x188>)
 800ea62:	f7ff f89d 	bl	800dba0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ea66:	4825      	ldr	r0, [pc, #148]	; (800eafc <xTaskCreate+0x18c>)
 800ea68:	f7ff f89a 	bl	800dba0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea6c:	4b24      	ldr	r3, [pc, #144]	; (800eb00 <xTaskCreate+0x190>)
 800ea6e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea72:	4b24      	ldr	r3, [pc, #144]	; (800eb04 <xTaskCreate+0x194>)
 800ea74:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800ea76:	4a24      	ldr	r2, [pc, #144]	; (800eb08 <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 800ea78:	2501      	movs	r5, #1
 800ea7a:	4924      	ldr	r1, [pc, #144]	; (800eb0c <xTaskCreate+0x19c>)
		uxTaskNumber++;
 800ea7c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ea7e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800ea80:	3301      	adds	r3, #1
 800ea82:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ea84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ea86:	fa05 f302 	lsl.w	r3, r5, r2
 800ea8a:	4303      	orrs	r3, r0
 800ea8c:	2014      	movs	r0, #20
 800ea8e:	600b      	str	r3, [r1, #0]
 800ea90:	4639      	mov	r1, r7
 800ea92:	fb00 8002 	mla	r0, r0, r2, r8
 800ea96:	f7ff f891 	bl	800dbbc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ea9a:	f7ff f951 	bl	800dd40 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ea9e:	4b1c      	ldr	r3, [pc, #112]	; (800eb10 <xTaskCreate+0x1a0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	b163      	cbz	r3, 800eabe <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eaa4:	6833      	ldr	r3, [r6, #0]
 800eaa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d207      	bcs.n	800eabe <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 800eaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab2:	4b18      	ldr	r3, [pc, #96]	; (800eb14 <xTaskCreate+0x1a4>)
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	f3bf 8f4f 	dsb	sy
 800eaba:	f3bf 8f6f 	isb	sy
	}
 800eabe:	4628      	mov	r0, r5
 800eac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800eac4:	4638      	mov	r0, r7
 800eac6:	f7ff f82f 	bl	800db28 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eaca:	f04f 35ff 	mov.w	r5, #4294967295
 800eace:	e7f6      	b.n	800eabe <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 800ead0:	4b0f      	ldr	r3, [pc, #60]	; (800eb10 <xTaskCreate+0x1a0>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1ce      	bne.n	800ea76 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ead8:	6833      	ldr	r3, [r6, #0]
 800eada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eadc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eade:	429a      	cmp	r2, r3
 800eae0:	d8c9      	bhi.n	800ea76 <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 800eae2:	6034      	str	r4, [r6, #0]
 800eae4:	e7c7      	b.n	800ea76 <xTaskCreate+0x106>
 800eae6:	bf00      	nop
 800eae8:	20045334 	.word	0x20045334
 800eaec:	2004529c 	.word	0x2004529c
 800eaf0:	20045360 	.word	0x20045360
 800eaf4:	20045380 	.word	0x20045380
 800eaf8:	200453ac 	.word	0x200453ac
 800eafc:	20045398 	.word	0x20045398
 800eb00:	200452a0 	.word	0x200452a0
 800eb04:	200452a4 	.word	0x200452a4
 800eb08:	20045344 	.word	0x20045344
 800eb0c:	20045348 	.word	0x20045348
 800eb10:	20045394 	.word	0x20045394
 800eb14:	e000ed04 	.word	0xe000ed04
 800eb18:	200452a8 	.word	0x200452a8
 800eb1c:	2004534c 	.word	0x2004534c

0800eb20 <vTaskStartScheduler>:
{
 800eb20:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800eb22:	4b19      	ldr	r3, [pc, #100]	; (800eb88 <vTaskStartScheduler+0x68>)
 800eb24:	2400      	movs	r4, #0
 800eb26:	2280      	movs	r2, #128	; 0x80
 800eb28:	4918      	ldr	r1, [pc, #96]	; (800eb8c <vTaskStartScheduler+0x6c>)
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	4623      	mov	r3, r4
 800eb2e:	9400      	str	r4, [sp, #0]
 800eb30:	4817      	ldr	r0, [pc, #92]	; (800eb90 <vTaskStartScheduler+0x70>)
 800eb32:	f7ff ff1d 	bl	800e970 <xTaskCreate>
	if( xReturn == pdPASS )
 800eb36:	2801      	cmp	r0, #1
 800eb38:	d116      	bne.n	800eb68 <vTaskStartScheduler+0x48>
	__asm volatile
 800eb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb3e:	b672      	cpsid	i
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb52:	4b10      	ldr	r3, [pc, #64]	; (800eb94 <vTaskStartScheduler+0x74>)
 800eb54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb56:	4b10      	ldr	r3, [pc, #64]	; (800eb98 <vTaskStartScheduler+0x78>)
 800eb58:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800eb5a:	4b10      	ldr	r3, [pc, #64]	; (800eb9c <vTaskStartScheduler+0x7c>)
 800eb5c:	601c      	str	r4, [r3, #0]
}
 800eb5e:	b002      	add	sp, #8
 800eb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800eb64:	f7ff b968 	b.w	800de38 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb68:	3001      	adds	r0, #1
 800eb6a:	d10a      	bne.n	800eb82 <vTaskStartScheduler+0x62>
 800eb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb70:	b672      	cpsid	i
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	b662      	cpsie	i
 800eb80:	e7fe      	b.n	800eb80 <vTaskStartScheduler+0x60>
}
 800eb82:	b002      	add	sp, #8
 800eb84:	bd10      	pop	{r4, pc}
 800eb86:	bf00      	nop
 800eb88:	20045374 	.word	0x20045374
 800eb8c:	0803492a 	.word	0x0803492a
 800eb90:	0800e901 	.word	0x0800e901
 800eb94:	20045378 	.word	0x20045378
 800eb98:	20045394 	.word	0x20045394
 800eb9c:	200453c0 	.word	0x200453c0

0800eba0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800eba0:	4a02      	ldr	r2, [pc, #8]	; (800ebac <vTaskSuspendAll+0xc>)
 800eba2:	6813      	ldr	r3, [r2, #0]
 800eba4:	3301      	adds	r3, #1
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	20045340 	.word	0x20045340

0800ebb0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ebb0:	4b01      	ldr	r3, [pc, #4]	; (800ebb8 <xTaskGetTickCount+0x8>)
 800ebb2:	6818      	ldr	r0, [r3, #0]
}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	200453c0 	.word	0x200453c0

0800ebbc <xTaskGetTickCountFromISR>:
{
 800ebbc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebbe:	f7ff f9a1 	bl	800df04 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800ebc2:	4b01      	ldr	r3, [pc, #4]	; (800ebc8 <xTaskGetTickCountFromISR+0xc>)
 800ebc4:	6818      	ldr	r0, [r3, #0]
}
 800ebc6:	bd08      	pop	{r3, pc}
 800ebc8:	200453c0 	.word	0x200453c0

0800ebcc <xTaskIncrementTick>:
{
 800ebcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebd0:	4b3d      	ldr	r3, [pc, #244]	; (800ecc8 <xTaskIncrementTick+0xfc>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d155      	bne.n	800ec84 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ebd8:	4b3c      	ldr	r3, [pc, #240]	; (800eccc <xTaskIncrementTick+0x100>)
 800ebda:	681c      	ldr	r4, [r3, #0]
 800ebdc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800ebde:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ebe0:	b9cc      	cbnz	r4, 800ec16 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800ebe2:	4b3b      	ldr	r3, [pc, #236]	; (800ecd0 <xTaskIncrementTick+0x104>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	6812      	ldr	r2, [r2, #0]
 800ebe8:	b152      	cbz	r2, 800ec00 <xTaskIncrementTick+0x34>
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	b672      	cpsid	i
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	b662      	cpsie	i
 800ebfe:	e7fe      	b.n	800ebfe <xTaskIncrementTick+0x32>
 800ec00:	4a34      	ldr	r2, [pc, #208]	; (800ecd4 <xTaskIncrementTick+0x108>)
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	6810      	ldr	r0, [r2, #0]
 800ec06:	6018      	str	r0, [r3, #0]
 800ec08:	6011      	str	r1, [r2, #0]
 800ec0a:	4a33      	ldr	r2, [pc, #204]	; (800ecd8 <xTaskIncrementTick+0x10c>)
 800ec0c:	6813      	ldr	r3, [r2, #0]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	6013      	str	r3, [r2, #0]
 800ec12:	f7ff fe1d 	bl	800e850 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec16:	4d31      	ldr	r5, [pc, #196]	; (800ecdc <xTaskIncrementTick+0x110>)
 800ec18:	f04f 0b00 	mov.w	fp, #0
 800ec1c:	4f30      	ldr	r7, [pc, #192]	; (800ece0 <xTaskIncrementTick+0x114>)
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	429c      	cmp	r4, r3
 800ec22:	d33e      	bcc.n	800eca2 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec24:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800ecd0 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 800ec28:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800ecf0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec2c:	f8d8 2000 	ldr.w	r2, [r8]
 800ec30:	6812      	ldr	r2, [r2, #0]
 800ec32:	bb72      	cbnz	r2, 800ec92 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec34:	f04f 32ff 	mov.w	r2, #4294967295
 800ec38:	602a      	str	r2, [r5, #0]
					break;
 800ec3a:	e032      	b.n	800eca2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec3c:	f106 0a04 	add.w	sl, r6, #4
 800ec40:	4650      	mov	r0, sl
 800ec42:	f7fe ffde 	bl	800dc02 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec46:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800ec48:	b119      	cbz	r1, 800ec52 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec4a:	f106 0018 	add.w	r0, r6, #24
 800ec4e:	f7fe ffd8 	bl	800dc02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec52:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ec54:	2201      	movs	r2, #1
 800ec56:	f8d9 3000 	ldr.w	r3, [r9]
 800ec5a:	f04f 0e14 	mov.w	lr, #20
 800ec5e:	fa02 f100 	lsl.w	r1, r2, r0
 800ec62:	4319      	orrs	r1, r3
 800ec64:	4b1f      	ldr	r3, [pc, #124]	; (800ece4 <xTaskIncrementTick+0x118>)
 800ec66:	f8c9 1000 	str.w	r1, [r9]
 800ec6a:	4651      	mov	r1, sl
 800ec6c:	fb0e 3000 	mla	r0, lr, r0, r3
 800ec70:	f7fe ffa4 	bl	800dbbc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec74:	6838      	ldr	r0, [r7, #0]
 800ec76:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ec78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ec7a:	4291      	cmp	r1, r2
 800ec7c:	bf28      	it	cs
 800ec7e:	f04f 0b01 	movcs.w	fp, #1
 800ec82:	e7d3      	b.n	800ec2c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800ec84:	4a18      	ldr	r2, [pc, #96]	; (800ece8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ec86:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800ec8a:	6813      	ldr	r3, [r2, #0]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	6013      	str	r3, [r2, #0]
 800ec90:	e011      	b.n	800ecb6 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ec92:	f8d8 2000 	ldr.w	r2, [r8]
 800ec96:	68d2      	ldr	r2, [r2, #12]
 800ec98:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec9a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800ec9c:	428c      	cmp	r4, r1
 800ec9e:	d2cd      	bcs.n	800ec3c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 800eca0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eca2:	683a      	ldr	r2, [r7, #0]
 800eca4:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <xTaskIncrementTick+0x118>)
 800eca6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800eca8:	2214      	movs	r2, #20
 800ecaa:	434a      	muls	r2, r1
 800ecac:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800ecae:	2a02      	cmp	r2, #2
 800ecb0:	bf28      	it	cs
 800ecb2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800ecb6:	4a0d      	ldr	r2, [pc, #52]	; (800ecec <xTaskIncrementTick+0x120>)
 800ecb8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800ecba:	2a00      	cmp	r2, #0
 800ecbc:	bf18      	it	ne
 800ecbe:	f04f 0b01 	movne.w	fp, #1
}
 800ecc2:	4658      	mov	r0, fp
 800ecc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc8:	20045340 	.word	0x20045340
 800eccc:	200453c0 	.word	0x200453c0
 800ecd0:	200452a0 	.word	0x200452a0
 800ecd4:	200452a4 	.word	0x200452a4
 800ecd8:	2004537c 	.word	0x2004537c
 800ecdc:	20045378 	.word	0x20045378
 800ece0:	2004529c 	.word	0x2004529c
 800ece4:	200452a8 	.word	0x200452a8
 800ece8:	2004533c 	.word	0x2004533c
 800ecec:	200453c4 	.word	0x200453c4
 800ecf0:	20045348 	.word	0x20045348

0800ecf4 <xTaskResumeAll>:
{
 800ecf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800ecf8:	4c32      	ldr	r4, [pc, #200]	; (800edc4 <xTaskResumeAll+0xd0>)
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	b953      	cbnz	r3, 800ed14 <xTaskResumeAll+0x20>
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	b672      	cpsid	i
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	b662      	cpsie	i
 800ed12:	e7fe      	b.n	800ed12 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800ed14:	f7fe ffee 	bl	800dcf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	3b01      	subs	r3, #1
 800ed1c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed1e:	6824      	ldr	r4, [r4, #0]
 800ed20:	b12c      	cbz	r4, 800ed2e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800ed22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ed24:	f7ff f80c 	bl	800dd40 <vPortExitCritical>
}
 800ed28:	4620      	mov	r0, r4
 800ed2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed2e:	4b26      	ldr	r3, [pc, #152]	; (800edc8 <xTaskResumeAll+0xd4>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0f5      	beq.n	800ed22 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed36:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800ede0 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800ed3a:	4f24      	ldr	r7, [pc, #144]	; (800edcc <xTaskResumeAll+0xd8>)
 800ed3c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ede4 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed40:	f8d9 3000 	ldr.w	r3, [r9]
 800ed44:	b9e3      	cbnz	r3, 800ed80 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800ed46:	b10c      	cbz	r4, 800ed4c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800ed48:	f7ff fd82 	bl	800e850 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ed4c:	4d20      	ldr	r5, [pc, #128]	; (800edd0 <xTaskResumeAll+0xdc>)
 800ed4e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ed50:	b144      	cbz	r4, 800ed64 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800ed52:	4e20      	ldr	r6, [pc, #128]	; (800edd4 <xTaskResumeAll+0xe0>)
 800ed54:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ed56:	f7ff ff39 	bl	800ebcc <xTaskIncrementTick>
 800ed5a:	b100      	cbz	r0, 800ed5e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800ed5c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	d1f9      	bne.n	800ed56 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800ed62:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ed64:	4b1b      	ldr	r3, [pc, #108]	; (800edd4 <xTaskResumeAll+0xe0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d0da      	beq.n	800ed22 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800ed6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed70:	4b19      	ldr	r3, [pc, #100]	; (800edd8 <xTaskResumeAll+0xe4>)
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ed7c:	2401      	movs	r4, #1
 800ed7e:	e7d1      	b.n	800ed24 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ed80:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800ed84:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ed86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed88:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed8a:	f104 0018 	add.w	r0, r4, #24
 800ed8e:	f7fe ff38 	bl	800dc02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7fe ff35 	bl	800dc02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	2014      	movs	r0, #20
 800ed9e:	fa05 f302 	lsl.w	r3, r5, r2
 800eda2:	fb00 8002 	mla	r0, r0, r2, r8
 800eda6:	430b      	orrs	r3, r1
 800eda8:	4631      	mov	r1, r6
 800edaa:	603b      	str	r3, [r7, #0]
 800edac:	f7fe ff06 	bl	800dbbc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <xTaskResumeAll+0xe8>)
 800edb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb8:	429a      	cmp	r2, r3
 800edba:	d3c1      	bcc.n	800ed40 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800edbc:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <xTaskResumeAll+0xe0>)
 800edbe:	601d      	str	r5, [r3, #0]
 800edc0:	e7be      	b.n	800ed40 <xTaskResumeAll+0x4c>
 800edc2:	bf00      	nop
 800edc4:	20045340 	.word	0x20045340
 800edc8:	20045334 	.word	0x20045334
 800edcc:	20045348 	.word	0x20045348
 800edd0:	2004533c 	.word	0x2004533c
 800edd4:	200453c4 	.word	0x200453c4
 800edd8:	e000ed04 	.word	0xe000ed04
 800eddc:	2004529c 	.word	0x2004529c
 800ede0:	20045380 	.word	0x20045380
 800ede4:	200452a8 	.word	0x200452a8

0800ede8 <vTaskDelay>:
	{
 800ede8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800edea:	b940      	cbnz	r0, 800edfe <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800edec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf0:	4b0e      	ldr	r3, [pc, #56]	; (800ee2c <vTaskDelay+0x44>)
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800edfe:	4b0c      	ldr	r3, [pc, #48]	; (800ee30 <vTaskDelay+0x48>)
 800ee00:	6819      	ldr	r1, [r3, #0]
 800ee02:	b151      	cbz	r1, 800ee1a <vTaskDelay+0x32>
 800ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee08:	b672      	cpsid	i
 800ee0a:	f383 8811 	msr	BASEPRI, r3
 800ee0e:	f3bf 8f6f 	isb	sy
 800ee12:	f3bf 8f4f 	dsb	sy
 800ee16:	b662      	cpsie	i
 800ee18:	e7fe      	b.n	800ee18 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800ee1a:	f7ff fec1 	bl	800eba0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ee1e:	f7ff fd29 	bl	800e874 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ee22:	f7ff ff67 	bl	800ecf4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d0e0      	beq.n	800edec <vTaskDelay+0x4>
 800ee2a:	bd08      	pop	{r3, pc}
 800ee2c:	e000ed04 	.word	0xe000ed04
 800ee30:	20045340 	.word	0x20045340

0800ee34 <vTaskSwitchContext>:
{
 800ee34:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee36:	4b24      	ldr	r3, [pc, #144]	; (800eec8 <vTaskSwitchContext+0x94>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	4b24      	ldr	r3, [pc, #144]	; (800eecc <vTaskSwitchContext+0x98>)
 800ee3c:	b112      	cbz	r2, 800ee44 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ee3e:	2201      	movs	r2, #1
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800ee44:	4c22      	ldr	r4, [pc, #136]	; (800eed0 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800ee46:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ee52:	d10b      	bne.n	800ee6c <vTaskSwitchContext+0x38>
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ee5a:	d107      	bne.n	800ee6c <vTaskSwitchContext+0x38>
 800ee5c:	689a      	ldr	r2, [r3, #8]
 800ee5e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ee62:	d103      	bne.n	800ee6c <vTaskSwitchContext+0x38>
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800ee6a:	d004      	beq.n	800ee76 <vTaskSwitchContext+0x42>
 800ee6c:	6820      	ldr	r0, [r4, #0]
 800ee6e:	6821      	ldr	r1, [r4, #0]
 800ee70:	3134      	adds	r1, #52	; 0x34
 800ee72:	f7f2 fb19 	bl	80014a8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ee76:	4b17      	ldr	r3, [pc, #92]	; (800eed4 <vTaskSwitchContext+0xa0>)
 800ee78:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ee7a:	fab3 f383 	clz	r3, r3
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2214      	movs	r2, #20
 800ee82:	4915      	ldr	r1, [pc, #84]	; (800eed8 <vTaskSwitchContext+0xa4>)
 800ee84:	f1c3 031f 	rsb	r3, r3, #31
 800ee88:	435a      	muls	r2, r3
 800ee8a:	588d      	ldr	r5, [r1, r2]
 800ee8c:	1888      	adds	r0, r1, r2
 800ee8e:	b955      	cbnz	r5, 800eea6 <vTaskSwitchContext+0x72>
	__asm volatile
 800ee90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee94:	b672      	cpsid	i
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	b662      	cpsie	i
 800eea4:	e7fe      	b.n	800eea4 <vTaskSwitchContext+0x70>
 800eea6:	6845      	ldr	r5, [r0, #4]
 800eea8:	3208      	adds	r2, #8
 800eeaa:	686d      	ldr	r5, [r5, #4]
 800eeac:	440a      	add	r2, r1
 800eeae:	4295      	cmp	r5, r2
 800eeb0:	6045      	str	r5, [r0, #4]
 800eeb2:	bf04      	itt	eq
 800eeb4:	686a      	ldreq	r2, [r5, #4]
 800eeb6:	6042      	streq	r2, [r0, #4]
 800eeb8:	2214      	movs	r2, #20
 800eeba:	fb02 1303 	mla	r3, r2, r3, r1
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	6023      	str	r3, [r4, #0]
 800eec4:	bd38      	pop	{r3, r4, r5, pc}
 800eec6:	bf00      	nop
 800eec8:	20045340 	.word	0x20045340
 800eecc:	200453c4 	.word	0x200453c4
 800eed0:	2004529c 	.word	0x2004529c
 800eed4:	20045348 	.word	0x20045348
 800eed8:	200452a8 	.word	0x200452a8

0800eedc <vTaskPlaceOnEventList>:
{
 800eedc:	b510      	push	{r4, lr}
 800eede:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800eee0:	b950      	cbnz	r0, 800eef8 <vTaskPlaceOnEventList+0x1c>
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	b672      	cpsid	i
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	b662      	cpsie	i
 800eef6:	e7fe      	b.n	800eef6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eef8:	4b05      	ldr	r3, [pc, #20]	; (800ef10 <vTaskPlaceOnEventList+0x34>)
 800eefa:	6819      	ldr	r1, [r3, #0]
 800eefc:	3118      	adds	r1, #24
 800eefe:	f7fe fe69 	bl	800dbd4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef02:	4620      	mov	r0, r4
 800ef04:	2101      	movs	r1, #1
}
 800ef06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef0a:	f7ff bcb3 	b.w	800e874 <prvAddCurrentTaskToDelayedList>
 800ef0e:	bf00      	nop
 800ef10:	2004529c 	.word	0x2004529c

0800ef14 <xTaskRemoveFromEventList>:
{
 800ef14:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ef16:	68c3      	ldr	r3, [r0, #12]
 800ef18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ef1a:	b954      	cbnz	r4, 800ef32 <xTaskRemoveFromEventList+0x1e>
 800ef1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef20:	b672      	cpsid	i
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	b662      	cpsie	i
 800ef30:	e7fe      	b.n	800ef30 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ef32:	f104 0518 	add.w	r5, r4, #24
 800ef36:	4628      	mov	r0, r5
 800ef38:	f7fe fe63 	bl	800dc02 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef3c:	4b11      	ldr	r3, [pc, #68]	; (800ef84 <xTaskRemoveFromEventList+0x70>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	b9db      	cbnz	r3, 800ef7a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ef42:	1d25      	adds	r5, r4, #4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f7fe fe5c 	bl	800dc02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ef4a:	490f      	ldr	r1, [pc, #60]	; (800ef88 <xTaskRemoveFromEventList+0x74>)
 800ef4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef4e:	2301      	movs	r3, #1
 800ef50:	6808      	ldr	r0, [r1, #0]
 800ef52:	4093      	lsls	r3, r2
 800ef54:	4303      	orrs	r3, r0
 800ef56:	2014      	movs	r0, #20
 800ef58:	600b      	str	r3, [r1, #0]
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	4b0b      	ldr	r3, [pc, #44]	; (800ef8c <xTaskRemoveFromEventList+0x78>)
 800ef5e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef62:	f7fe fe2b 	bl	800dbbc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef66:	4b0a      	ldr	r3, [pc, #40]	; (800ef90 <xTaskRemoveFromEventList+0x7c>)
 800ef68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d906      	bls.n	800ef80 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800ef72:	2001      	movs	r0, #1
 800ef74:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <xTaskRemoveFromEventList+0x80>)
 800ef76:	6018      	str	r0, [r3, #0]
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	4806      	ldr	r0, [pc, #24]	; (800ef98 <xTaskRemoveFromEventList+0x84>)
 800ef7e:	e7f0      	b.n	800ef62 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800ef80:	2000      	movs	r0, #0
}
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	20045340 	.word	0x20045340
 800ef88:	20045348 	.word	0x20045348
 800ef8c:	200452a8 	.word	0x200452a8
 800ef90:	2004529c 	.word	0x2004529c
 800ef94:	200453c4 	.word	0x200453c4
 800ef98:	20045380 	.word	0x20045380

0800ef9c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef9c:	4b03      	ldr	r3, [pc, #12]	; (800efac <vTaskInternalSetTimeOutState+0x10>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800efa2:	4b03      	ldr	r3, [pc, #12]	; (800efb0 <vTaskInternalSetTimeOutState+0x14>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6043      	str	r3, [r0, #4]
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	2004537c 	.word	0x2004537c
 800efb0:	200453c0 	.word	0x200453c0

0800efb4 <xTaskCheckForTimeOut>:
{
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800efb8:	4605      	mov	r5, r0
 800efba:	b950      	cbnz	r0, 800efd2 <xTaskCheckForTimeOut+0x1e>
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	b672      	cpsid	i
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	b662      	cpsie	i
 800efd0:	e7fe      	b.n	800efd0 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800efd2:	b951      	cbnz	r1, 800efea <xTaskCheckForTimeOut+0x36>
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	b672      	cpsid	i
 800efda:	f383 8811 	msr	BASEPRI, r3
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	b662      	cpsie	i
 800efe8:	e7fe      	b.n	800efe8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800efea:	f7fe fe83 	bl	800dcf4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800efee:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eff0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800eff2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	1c58      	adds	r0, r3, #1
 800eff8:	d00e      	beq.n	800f018 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800effa:	480d      	ldr	r0, [pc, #52]	; (800f030 <xTaskCheckForTimeOut+0x7c>)
 800effc:	682e      	ldr	r6, [r5, #0]
 800effe:	6800      	ldr	r0, [r0, #0]
 800f000:	4286      	cmp	r6, r0
 800f002:	d001      	beq.n	800f008 <xTaskCheckForTimeOut+0x54>
 800f004:	428a      	cmp	r2, r1
 800f006:	d20e      	bcs.n	800f026 <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f008:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d209      	bcs.n	800f022 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800f00e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f010:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800f012:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f014:	f7ff ffc2 	bl	800ef9c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800f018:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f01a:	f7fe fe91 	bl	800dd40 <vPortExitCritical>
}
 800f01e:	4620      	mov	r0, r4
 800f020:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800f022:	2300      	movs	r3, #0
 800f024:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f026:	2401      	movs	r4, #1
 800f028:	e7f7      	b.n	800f01a <xTaskCheckForTimeOut+0x66>
 800f02a:	bf00      	nop
 800f02c:	200453c0 	.word	0x200453c0
 800f030:	2004537c 	.word	0x2004537c

0800f034 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f034:	2201      	movs	r2, #1
 800f036:	4b01      	ldr	r3, [pc, #4]	; (800f03c <vTaskMissedYield+0x8>)
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	4770      	bx	lr
 800f03c:	200453c4 	.word	0x200453c4

0800f040 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f040:	4b01      	ldr	r3, [pc, #4]	; (800f048 <xTaskGetCurrentTaskHandle+0x8>)
 800f042:	6818      	ldr	r0, [r3, #0]
	}
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	2004529c 	.word	0x2004529c

0800f04c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <xTaskGetSchedulerState+0x18>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	b133      	cbz	r3, 800f060 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f052:	4b05      	ldr	r3, [pc, #20]	; (800f068 <xTaskGetSchedulerState+0x1c>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800f058:	bf0c      	ite	eq
 800f05a:	2002      	moveq	r0, #2
 800f05c:	2000      	movne	r0, #0
 800f05e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f060:	2001      	movs	r0, #1
	}
 800f062:	4770      	bx	lr
 800f064:	20045394 	.word	0x20045394
 800f068:	20045340 	.word	0x20045340

0800f06c <xTaskPriorityInherit>:
	{
 800f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800f070:	4604      	mov	r4, r0
 800f072:	2800      	cmp	r0, #0
 800f074:	d041      	beq.n	800f0fa <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f076:	4a24      	ldr	r2, [pc, #144]	; (800f108 <xTaskPriorityInherit+0x9c>)
 800f078:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f07a:	6811      	ldr	r1, [r2, #0]
 800f07c:	4617      	mov	r7, r2
 800f07e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800f080:	428b      	cmp	r3, r1
 800f082:	d231      	bcs.n	800f0e8 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f084:	6982      	ldr	r2, [r0, #24]
 800f086:	2a00      	cmp	r2, #0
 800f088:	db04      	blt.n	800f094 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f08e:	f1c2 0207 	rsb	r2, r2, #7
 800f092:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f094:	4d1d      	ldr	r5, [pc, #116]	; (800f10c <xTaskPriorityInherit+0xa0>)
 800f096:	2614      	movs	r6, #20
 800f098:	6962      	ldr	r2, [r4, #20]
 800f09a:	fb06 5303 	mla	r3, r6, r3, r5
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d12d      	bne.n	800f0fe <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0a2:	f104 0804 	add.w	r8, r4, #4
 800f0a6:	4640      	mov	r0, r8
 800f0a8:	f7fe fdab 	bl	800dc02 <uxListRemove>
 800f0ac:	4b18      	ldr	r3, [pc, #96]	; (800f110 <xTaskPriorityInherit+0xa4>)
 800f0ae:	b948      	cbnz	r0, 800f0c4 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f0b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f0b2:	4346      	muls	r6, r0
 800f0b4:	59aa      	ldr	r2, [r5, r6]
 800f0b6:	b92a      	cbnz	r2, 800f0c4 <xTaskPriorityInherit+0x58>
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	4081      	lsls	r1, r0
 800f0be:	ea22 0201 	bic.w	r2, r2, r1
 800f0c2:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0c4:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f0c6:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f0ca:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f0cc:	2401      	movs	r4, #1
 800f0ce:	fa04 f002 	lsl.w	r0, r4, r2
 800f0d2:	4308      	orrs	r0, r1
 800f0d4:	4641      	mov	r1, r8
 800f0d6:	6018      	str	r0, [r3, #0]
 800f0d8:	2014      	movs	r0, #20
 800f0da:	fb00 5002 	mla	r0, r0, r2, r5
 800f0de:	f7fe fd6d 	bl	800dbbc <vListInsertEnd>
				xReturn = pdTRUE;
 800f0e2:	2001      	movs	r0, #1
	}
 800f0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f0e8:	6813      	ldr	r3, [r2, #0]
 800f0ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f0ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f0ee:	42a0      	cmp	r0, r4
 800f0f0:	bf2c      	ite	cs
 800f0f2:	2000      	movcs	r0, #0
 800f0f4:	2001      	movcc	r0, #1
 800f0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 800f0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f102:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f104:	e7ed      	b.n	800f0e2 <xTaskPriorityInherit+0x76>
 800f106:	bf00      	nop
 800f108:	2004529c 	.word	0x2004529c
 800f10c:	200452a8 	.word	0x200452a8
 800f110:	20045348 	.word	0x20045348

0800f114 <xTaskPriorityDisinherit>:
	{
 800f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f116:	4604      	mov	r4, r0
 800f118:	b908      	cbnz	r0, 800f11e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800f11a:	2000      	movs	r0, #0
 800f11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800f11e:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <xTaskPriorityDisinherit+0x9c>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4298      	cmp	r0, r3
 800f124:	d00a      	beq.n	800f13c <xTaskPriorityDisinherit+0x28>
 800f126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12a:	b672      	cpsid	i
 800f12c:	f383 8811 	msr	BASEPRI, r3
 800f130:	f3bf 8f6f 	isb	sy
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	b662      	cpsie	i
 800f13a:	e7fe      	b.n	800f13a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800f13c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800f13e:	b953      	cbnz	r3, 800f156 <xTaskPriorityDisinherit+0x42>
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	b672      	cpsid	i
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	b662      	cpsie	i
 800f154:	e7fe      	b.n	800f154 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f156:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800f158:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f15a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800f15c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f15e:	4291      	cmp	r1, r2
 800f160:	d0db      	beq.n	800f11a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1d9      	bne.n	800f11a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f166:	1d05      	adds	r5, r0, #4
 800f168:	4e12      	ldr	r6, [pc, #72]	; (800f1b4 <xTaskPriorityDisinherit+0xa0>)
 800f16a:	4628      	mov	r0, r5
 800f16c:	f7fe fd49 	bl	800dc02 <uxListRemove>
 800f170:	4a11      	ldr	r2, [pc, #68]	; (800f1b8 <xTaskPriorityDisinherit+0xa4>)
 800f172:	b950      	cbnz	r0, 800f18a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f174:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f176:	2114      	movs	r1, #20
 800f178:	4379      	muls	r1, r7
 800f17a:	5873      	ldr	r3, [r6, r1]
 800f17c:	b92b      	cbnz	r3, 800f18a <xTaskPriorityDisinherit+0x76>
 800f17e:	2001      	movs	r0, #1
 800f180:	6813      	ldr	r3, [r2, #0]
 800f182:	40b8      	lsls	r0, r7
 800f184:	ea23 0300 	bic.w	r3, r3, r0
 800f188:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f18a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f18c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f190:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f192:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f194:	2401      	movs	r4, #1
 800f196:	6811      	ldr	r1, [r2, #0]
 800f198:	fa04 f003 	lsl.w	r0, r4, r3
 800f19c:	4308      	orrs	r0, r1
 800f19e:	4629      	mov	r1, r5
 800f1a0:	6010      	str	r0, [r2, #0]
 800f1a2:	2014      	movs	r0, #20
 800f1a4:	fb00 6003 	mla	r0, r0, r3, r6
 800f1a8:	f7fe fd08 	bl	800dbbc <vListInsertEnd>
					xReturn = pdTRUE;
 800f1ac:	4620      	mov	r0, r4
	}
 800f1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1b0:	2004529c 	.word	0x2004529c
 800f1b4:	200452a8 	.word	0x200452a8
 800f1b8:	20045348 	.word	0x20045348

0800f1bc <vTaskPriorityDisinheritAfterTimeout>:
	{
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f1be:	4604      	mov	r4, r0
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	d04f      	beq.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1c4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f1c6:	b952      	cbnz	r2, 800f1de <vTaskPriorityDisinheritAfterTimeout+0x22>
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	b672      	cpsid	i
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	b662      	cpsie	i
 800f1dc:	e7fe      	b.n	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x20>
 800f1de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f1e0:	4299      	cmp	r1, r3
 800f1e2:	bf38      	it	cc
 800f1e4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f1e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f1e8:	428b      	cmp	r3, r1
 800f1ea:	d03b      	beq.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f1ec:	2a01      	cmp	r2, #1
 800f1ee:	d139      	bne.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 800f1f0:	4a1d      	ldr	r2, [pc, #116]	; (800f268 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800f1f2:	6812      	ldr	r2, [r2, #0]
 800f1f4:	4290      	cmp	r0, r2
 800f1f6:	d10a      	bne.n	800f20e <vTaskPriorityDisinheritAfterTimeout+0x52>
 800f1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fc:	b672      	cpsid	i
 800f1fe:	f383 8811 	msr	BASEPRI, r3
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	f3bf 8f4f 	dsb	sy
 800f20a:	b662      	cpsie	i
 800f20c:	e7fe      	b.n	800f20c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f20e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f210:	2614      	movs	r6, #20
 800f212:	4d16      	ldr	r5, [pc, #88]	; (800f26c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f214:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800f216:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f218:	fb06 5303 	mla	r3, r6, r3, r5
 800f21c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21e:	bfa4      	itt	ge
 800f220:	f1c1 0107 	rsbge	r1, r1, #7
 800f224:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f226:	429a      	cmp	r2, r3
 800f228:	d11c      	bne.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f22a:	1d07      	adds	r7, r0, #4
 800f22c:	4638      	mov	r0, r7
 800f22e:	f7fe fce8 	bl	800dc02 <uxListRemove>
 800f232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f234:	4c0e      	ldr	r4, [pc, #56]	; (800f270 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800f236:	b940      	cbnz	r0, 800f24a <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f238:	4356      	muls	r6, r2
 800f23a:	59ab      	ldr	r3, [r5, r6]
 800f23c:	b92b      	cbnz	r3, 800f24a <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800f23e:	2101      	movs	r1, #1
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	4091      	lsls	r1, r2
 800f244:	ea23 0301 	bic.w	r3, r3, r1
 800f248:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800f24a:	2301      	movs	r3, #1
 800f24c:	6821      	ldr	r1, [r4, #0]
 800f24e:	2014      	movs	r0, #20
 800f250:	4093      	lsls	r3, r2
 800f252:	fb00 5002 	mla	r0, r0, r2, r5
 800f256:	430b      	orrs	r3, r1
 800f258:	4639      	mov	r1, r7
 800f25a:	6023      	str	r3, [r4, #0]
	}
 800f25c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800f260:	f7fe bcac 	b.w	800dbbc <vListInsertEnd>
 800f264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f266:	bf00      	nop
 800f268:	2004529c 	.word	0x2004529c
 800f26c:	200452a8 	.word	0x200452a8
 800f270:	20045348 	.word	0x20045348

0800f274 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800f274:	4b04      	ldr	r3, [pc, #16]	; (800f288 <pvTaskIncrementMutexHeldCount+0x14>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	b11a      	cbz	r2, 800f282 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800f27a:	6819      	ldr	r1, [r3, #0]
 800f27c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800f27e:	3201      	adds	r2, #1
 800f280:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800f282:	6818      	ldr	r0, [r3, #0]
	}
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	2004529c 	.word	0x2004529c

0800f28c <GUI_X_GetTime>:
1 ms.
*/

int GUI_X_GetTime(void)
{
  return ((int) osKernelSysTick());
 800f28c:	f7fe baa0 	b.w	800d7d0 <osKernelSysTick>

0800f290 <GUI_X_Delay>:
}

void GUI_X_Delay(int ms)
{
  osDelay( ms );
 800f290:	f7fe babf 	b.w	800d812 <osDelay>

0800f294 <GUI_X_Init>:
 800f294:	4770      	bx	lr
	...

0800f298 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 800f298:	b513      	push	{r0, r1, r4, lr}
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 800f29a:	2400      	movs	r4, #0
 800f29c:	a802      	add	r0, sp, #8
 800f29e:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800f2a2:	f7fe fabe 	bl	800d822 <osMutexCreate>
 800f2a6:	4b06      	ldr	r3, [pc, #24]	; (800f2c0 <GUI_X_InitOS+0x28>)
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800f2a8:	2101      	movs	r1, #1
  osMutex = osMutexCreate(osMutex(MUTEX));
 800f2aa:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(SEM);
 800f2ac:	a802      	add	r0, sp, #8
 800f2ae:	f840 4d04 	str.w	r4, [r0, #-4]!
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800f2b2:	f7fe fadf 	bl	800d874 <osSemaphoreCreate>
 800f2b6:	4b03      	ldr	r3, [pc, #12]	; (800f2c4 <GUI_X_InitOS+0x2c>)
 800f2b8:	6018      	str	r0, [r3, #0]
}
 800f2ba:	b002      	add	sp, #8
 800f2bc:	bd10      	pop	{r4, pc}
 800f2be:	bf00      	nop
 800f2c0:	200453c8 	.word	0x200453c8
 800f2c4:	200453cc 	.word	0x200453cc

0800f2c8 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
  osMutexRelease(osMutex);
 800f2c8:	4b01      	ldr	r3, [pc, #4]	; (800f2d0 <GUI_X_Unlock+0x8>)
 800f2ca:	6818      	ldr	r0, [r3, #0]
 800f2cc:	f7fe bb0c 	b.w	800d8e8 <osMutexRelease>
 800f2d0:	200453c8 	.word	0x200453c8

0800f2d4 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
  osMutexWait(osMutex , osWaitForever) ;
 800f2d4:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <GUI_X_Lock+0xc>)
 800f2d6:	f04f 31ff 	mov.w	r1, #4294967295
 800f2da:	6818      	ldr	r0, [r3, #0]
 800f2dc:	f7fe baa4 	b.w	800d828 <osMutexWait>
 800f2e0:	200453c8 	.word	0x200453c8

0800f2e4 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
  return ((U32) osThreadGetId());
 800f2e4:	f7fe ba93 	b.w	800d80e <osThreadGetId>

0800f2e8 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	4770      	bx	lr

0800f2ec <USBH_CDC_InterfaceDeInit>:
{
 800f2ec:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f2ee:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800f2f2:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f2f4:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800f2f6:	7821      	ldrb	r1, [r4, #0]
 800f2f8:	b139      	cbz	r1, 800f30a <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f2fa:	f000 fed3 	bl	80100a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800f2fe:	7821      	ldrb	r1, [r4, #0]
 800f300:	4628      	mov	r0, r5
 800f302:	f000 feeb 	bl	80100dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f306:	2300      	movs	r3, #0
 800f308:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800f30a:	7b21      	ldrb	r1, [r4, #12]
 800f30c:	b141      	cbz	r1, 800f320 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f30e:	4628      	mov	r0, r5
 800f310:	f000 fec8 	bl	80100a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800f314:	7b21      	ldrb	r1, [r4, #12]
 800f316:	4628      	mov	r0, r5
 800f318:	f000 fee0 	bl	80100dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f31c:	2300      	movs	r3, #0
 800f31e:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 800f320:	7b61      	ldrb	r1, [r4, #13]
 800f322:	b141      	cbz	r1, 800f336 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f324:	4628      	mov	r0, r5
 800f326:	f000 febd 	bl	80100a4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800f32a:	7b61      	ldrb	r1, [r4, #13]
 800f32c:	4628      	mov	r0, r5
 800f32e:	f000 fed5 	bl	80100dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f332:	2300      	movs	r3, #0
 800f334:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800f336:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f33a:	69d8      	ldr	r0, [r3, #28]
 800f33c:	b128      	cbz	r0, 800f34a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800f33e:	f015 fbe1 	bl	8024b04 <free>
    phost->pActiveClass->pData = 0U;
 800f342:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f346:	2200      	movs	r2, #0
 800f348:	61da      	str	r2, [r3, #28]
}
 800f34a:	2000      	movs	r0, #0
 800f34c:	bd38      	pop	{r3, r4, r5, pc}

0800f34e <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost,
 800f34e:	2202      	movs	r2, #2
 800f350:	2301      	movs	r3, #1
{
 800f352:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 800f354:	4611      	mov	r1, r2
{
 800f356:	b085      	sub	sp, #20
 800f358:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800f35a:	f000 f9e5 	bl	800f728 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800f35e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 800f360:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 800f362:	d102      	bne.n	800f36a <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800f364:	2002      	movs	r0, #2
}
 800f366:	b005      	add	sp, #20
 800f368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800f36a:	4601      	mov	r1, r0
 800f36c:	4628      	mov	r0, r5
 800f36e:	f000 f9d2 	bl	800f716 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800f372:	2050      	movs	r0, #80	; 0x50
 800f374:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 800f378:	f015 fbbc 	bl	8024af4 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f37c:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800f37e:	4604      	mov	r4, r0
 800f380:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f382:	fb03 5606 	mla	r6, r3, r6, r5
 800f386:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800f38a:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f38c:	bf44      	itt	mi
 800f38e:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f390:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f394:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f396:	bf48      	it	mi
 800f398:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f39a:	4628      	mov	r0, r5
 800f39c:	f000 fe87 	bl	80100ae <USBH_AllocPipe>
 800f3a0:	4601      	mov	r1, r0
 800f3a2:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 800f3a4:	8960      	ldrh	r0, [r4, #10]
 800f3a6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f3aa:	9002      	str	r0, [sp, #8]
 800f3ac:	2003      	movs	r0, #3
 800f3ae:	7862      	ldrb	r2, [r4, #1]
 800f3b0:	9001      	str	r0, [sp, #4]
 800f3b2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f3b6:	9000      	str	r0, [sp, #0]
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f000 fe64 	bl	8010086 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f3be:	2200      	movs	r2, #0
 800f3c0:	7821      	ldrb	r1, [r4, #0]
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	f7f5 fc23 	bl	8004c0e <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	210a      	movs	r1, #10
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f000 f9aa 	bl	800f728 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800f3d4:	28ff      	cmp	r0, #255	; 0xff
 800f3d6:	d0c5      	beq.n	800f364 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f3d8:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 800f3da:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f3dc:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f3e0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f3e4:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f3e8:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f3ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f3f0:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f3f4:	bf0d      	iteet	eq
 800f3f6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f3f8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f3fa:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f3fc:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f3fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f402:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f406:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f408:	bf08      	it	eq
 800f40a:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f40c:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f40e:	bf1a      	itte	ne
 800f410:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f412:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f414:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f416:	f000 fe4a 	bl	80100ae <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f41a:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f41c:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f41e:	4628      	mov	r0, r5
 800f420:	f000 fe45 	bl	80100ae <USBH_AllocPipe>
 800f424:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800f426:	8b20      	ldrh	r0, [r4, #24]
 800f428:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f42c:	9002      	str	r0, [sp, #8]
 800f42e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f432:	7ba2      	ldrb	r2, [r4, #14]
 800f434:	7b61      	ldrb	r1, [r4, #13]
 800f436:	9601      	str	r6, [sp, #4]
 800f438:	9000      	str	r0, [sp, #0]
 800f43a:	4628      	mov	r0, r5
 800f43c:	f000 fe23 	bl	8010086 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 800f440:	8b60      	ldrh	r0, [r4, #26]
 800f442:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 800f444:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800f446:	9002      	str	r0, [sp, #8]
 800f448:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f44c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f450:	7be2      	ldrb	r2, [r4, #15]
 800f452:	7b21      	ldrb	r1, [r4, #12]
 800f454:	9000      	str	r0, [sp, #0]
 800f456:	4628      	mov	r0, r5
 800f458:	f000 fe15 	bl	8010086 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f45c:	4632      	mov	r2, r6
 800f45e:	7b61      	ldrb	r1, [r4, #13]
 800f460:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 800f462:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f466:	f7f5 fbd2 	bl	8004c0e <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800f46a:	4632      	mov	r2, r6
 800f46c:	7b21      	ldrb	r1, [r4, #12]
 800f46e:	4628      	mov	r0, r5
 800f470:	f7f5 fbcd 	bl	8004c0e <USBH_LL_SetToggle>
      status = USBH_OK;
 800f474:	4630      	mov	r0, r6
 800f476:	e776      	b.n	800f366 <USBH_CDC_InterfaceInit+0x18>

0800f478 <USBH_CDC_ClassRequest>:
{
 800f478:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f47a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f47e:	2207      	movs	r2, #7
{
 800f480:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f482:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f484:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f486:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f488:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f48a:	2321      	movs	r3, #33	; 0x21

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f48c:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f48e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f494:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f496:	f000 fb6a 	bl	800fb6e <USBH_CtlReq>
  if(status == USBH_OK)
 800f49a:	4605      	mov	r5, r0
 800f49c:	b920      	cbnz	r0, 800f4a8 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f49e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800f4a2:	2102      	movs	r1, #2
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4798      	blx	r3
}
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	bd38      	pop	{r3, r4, r5, pc}

0800f4ac <USBH_CDC_TransmitCallback>:
 800f4ac:	4770      	bx	lr

0800f4ae <USBH_CDC_ReceiveCallback>:
 800f4ae:	4770      	bx	lr

0800f4b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f4b0:	4770      	bx	lr

0800f4b2 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f4b2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800f4b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f4b8:	69dc      	ldr	r4, [r3, #28]
{
 800f4ba:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800f4bc:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800f4c0:	2b04      	cmp	r3, #4
 800f4c2:	d817      	bhi.n	800f4f4 <USBH_CDC_Process+0x42>
 800f4c4:	e8df f003 	tbb	[pc, r3]
 800f4c8:	42180603 	.word	0x42180603
 800f4cc:	ba          	.byte	0xba
 800f4cd:	00          	.byte	0x00
    status = USBH_OK;
 800f4ce:	2000      	movs	r0, #0
}
 800f4d0:	b003      	add	sp, #12
 800f4d2:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f4d4:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f4d6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4d8:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f4da:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f4dc:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4de:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f4e0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f4e6:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f4e8:	f000 fb41 	bl	800fb6e <USBH_CtlReq>
    if(req_status == USBH_OK)
 800f4ec:	bb50      	cbnz	r0, 800f544 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f4ee:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 800f4f0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	e7eb      	b.n	800f4d0 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f4f8:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f4fa:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f4fc:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f500:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f502:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f504:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f506:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f508:	2300      	movs	r3, #0
 800f50a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f50c:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f50e:	f000 fb2e 	bl	800fb6e <USBH_CtlReq>
    if(req_status == USBH_OK)
 800f512:	b9b8      	cbnz	r0, 800f544 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f514:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f516:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f518:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE;
 800f51c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800f526:	4291      	cmp	r1, r2
 800f528:	d1e4      	bne.n	800f4f4 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f52a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f52e:	795a      	ldrb	r2, [r3, #5]
 800f530:	4291      	cmp	r1, r2
 800f532:	d1df      	bne.n	800f4f4 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d1db      	bne.n	800f4f4 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 800f53c:	4628      	mov	r0, r5
 800f53e:	f7ff ffb7 	bl	800f4b0 <USBH_CDC_LineCodingChanged>
 800f542:	e7d7      	b.n	800f4f4 <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 800f544:	2801      	cmp	r0, #1
 800f546:	d0d5      	beq.n	800f4f4 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 800f548:	2304      	movs	r3, #4
 800f54a:	e7d1      	b.n	800f4f0 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 800f54c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800f550:	2901      	cmp	r1, #1
 800f552:	d02b      	beq.n	800f5ac <USBH_CDC_Process+0xfa>
 800f554:	2902      	cmp	r1, #2
 800f556:	d038      	beq.n	800f5ca <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f558:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f55c:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800f55e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800f562:	2b03      	cmp	r3, #3
 800f564:	d059      	beq.n	800f61a <USBH_CDC_Process+0x168>
 800f566:	2b04      	cmp	r3, #4
 800f568:	d1c4      	bne.n	800f4f4 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f56a:	7b21      	ldrb	r1, [r4, #12]
 800f56c:	4628      	mov	r0, r5
 800f56e:	f7f5 fb3d 	bl	8004bec <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800f572:	2801      	cmp	r0, #1
 800f574:	d1be      	bne.n	800f4f4 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f576:	7b21      	ldrb	r1, [r4, #12]
 800f578:	4628      	mov	r0, r5
 800f57a:	f7f5 faf3 	bl	8004b64 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f57e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f580:	4298      	cmp	r0, r3
 800f582:	d054      	beq.n	800f62e <USBH_CDC_Process+0x17c>
 800f584:	8b62      	ldrh	r2, [r4, #26]
 800f586:	4290      	cmp	r0, r2
 800f588:	d951      	bls.n	800f62e <USBH_CDC_Process+0x17c>
        CDC_Handle->RxDataLength -= length ;
 800f58a:	1a1b      	subs	r3, r3, r0
 800f58c:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800f58e:	6a23      	ldr	r3, [r4, #32]
 800f590:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f592:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 800f594:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f596:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f59a:	2104      	movs	r1, #4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f59c:	2200      	movs	r2, #0
 800f59e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f5a2:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5a6:	f7fe f9a5 	bl	800d8f4 <osMessagePut>
 800f5aa:	e7a3      	b.n	800f4f4 <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f5ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5ae:	8b22      	ldrh	r2, [r4, #24]
 800f5b0:	7b63      	ldrb	r3, [r4, #13]
 800f5b2:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800f5b4:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 800f5b6:	69e1      	ldr	r1, [r4, #28]
 800f5b8:	bf98      	it	ls
 800f5ba:	b282      	uxthls	r2, r0
 800f5bc:	4628      	mov	r0, r5
 800f5be:	f000 fd3a 	bl	8010036 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800f5c8:	e7c6      	b.n	800f558 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f5ca:	7b61      	ldrb	r1, [r4, #13]
 800f5cc:	f7f5 fb0e 	bl	8004bec <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 800f5d0:	2801      	cmp	r0, #1
 800f5d2:	d11f      	bne.n	800f614 <USBH_CDC_Process+0x162>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5d6:	8b22      	ldrh	r2, [r4, #24]
 800f5d8:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f5da:	bf89      	itett	hi
 800f5dc:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800f5de:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f5e0:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f5e2:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 800f5e4:	bf92      	itee	ls
 800f5e6:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f5e8:	189b      	addhi	r3, r3, r2
 800f5ea:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 800f5ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5ee:	b11b      	cbz	r3, 800f5f8 <USBH_CDC_Process+0x146>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800f5f6:	e004      	b.n	800f602 <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800f5f8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	f7ff ff55 	bl	800f4ac <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f602:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f604:	2200      	movs	r2, #0
 800f606:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f60a:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f60e:	f7fe f971 	bl	800d8f4 <osMessagePut>
 800f612:	e7a1      	b.n	800f558 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 800f614:	2802      	cmp	r0, #2
 800f616:	d19f      	bne.n	800f558 <USBH_CDC_Process+0xa6>
 800f618:	e7ea      	b.n	800f5f0 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 800f61a:	7b23      	ldrb	r3, [r4, #12]
 800f61c:	4628      	mov	r0, r5
 800f61e:	8b62      	ldrh	r2, [r4, #26]
 800f620:	6a21      	ldr	r1, [r4, #32]
 800f622:	f000 fd20 	bl	8010066 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f626:	2304      	movs	r3, #4
 800f628:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800f62c:	e762      	b.n	800f4f4 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800f62e:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 800f630:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 800f632:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800f636:	f7ff ff3a 	bl	800f4ae <USBH_CDC_ReceiveCallback>
 800f63a:	e7ae      	b.n	800f59a <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800f63c:	2100      	movs	r1, #0
 800f63e:	f000 fcb4 	bl	800ffaa <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800f642:	2800      	cmp	r0, #0
 800f644:	f47f af56 	bne.w	800f4f4 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800f648:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800f64c:	e752      	b.n	800f4f4 <USBH_CDC_Process+0x42>

0800f64e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f64e:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800f652:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800f656:	2100      	movs	r1, #0
 800f658:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d1fb      	bne.n	800f658 <DeInitStateMachine+0xa>
 800f660:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800f664:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800f668:	2300      	movs	r3, #0
 800f66a:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800f66e:	4291      	cmp	r1, r2
 800f670:	d1fb      	bne.n	800f66a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800f672:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f674:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800f676:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800f678:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800f67a:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800f67c:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800f680:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f682:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800f684:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f686:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800f68a:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 800f68e:	2000      	movs	r0, #0
 800f690:	4770      	bx	lr
	...

0800f694 <USBH_Init>:
{
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	460c      	mov	r4, r1
 800f698:	b088      	sub	sp, #32
  if(phost == NULL)
 800f69a:	4605      	mov	r5, r0
 800f69c:	b348      	cbz	r0, 800f6f2 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 800f69e:	2300      	movs	r3, #0
  phost->id = id;
 800f6a0:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800f6a4:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800f6a8:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800f6ac:	f7ff ffcf 	bl	800f64e <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800f6b0:	b10c      	cbz	r4, 800f6b6 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 800f6b2:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f6b6:	4c10      	ldr	r4, [pc, #64]	; (800f6f8 <USBH_Init+0x64>)
 800f6b8:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f6ba:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f6bc:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f6c0:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f6c2:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe f90f 	bl	800d8ec <osMessageCreate>
 800f6ce:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f6d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f6d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f6d6:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800f6d8:	4629      	mov	r1, r5
 800f6da:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f6dc:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800f6de:	f7fe f87e 	bl	800d7de <osThreadCreate>
 800f6e2:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f7f5 f9dc 	bl	8004aa4 <USBH_LL_Init>
  return USBH_OK;
 800f6ec:	2000      	movs	r0, #0
}
 800f6ee:	b008      	add	sp, #32
 800f6f0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800f6f2:	2002      	movs	r0, #2
 800f6f4:	e7fb      	b.n	800f6ee <USBH_Init+0x5a>
 800f6f6:	bf00      	nop
 800f6f8:	08026890 	.word	0x08026890

0800f6fc <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800f6fc:	b149      	cbz	r1, 800f712 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f6fe:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800f702:	b933      	cbnz	r3, 800f712 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f704:	2201      	movs	r2, #1
 800f706:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800f70a:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 800f70e:	4618      	mov	r0, r3
 800f710:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f712:	2002      	movs	r0, #2
  }

  return status;
}
 800f714:	4770      	bx	lr

0800f716 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800f716:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800f71a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800f71c:	bf86      	itte	hi
 800f71e:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800f722:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f724:	2002      	movls	r0, #2
  }
  return status;
}
 800f726:	4770      	bx	lr

0800f728 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800f72c:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800f730:	b2e5      	uxtb	r5, r4
 800f732:	428e      	cmp	r6, r1
 800f734:	d001      	beq.n	800f73a <USBH_FindInterface+0x12>
 800f736:	29ff      	cmp	r1, #255	; 0xff
 800f738:	d10b      	bne.n	800f752 <USBH_FindInterface+0x2a>
 800f73a:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 800f73e:	4296      	cmp	r6, r2
 800f740:	d001      	beq.n	800f746 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800f742:	2aff      	cmp	r2, #255	; 0xff
 800f744:	d105      	bne.n	800f752 <USBH_FindInterface+0x2a>
 800f746:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800f74a:	429e      	cmp	r6, r3
 800f74c:	d006      	beq.n	800f75c <USBH_FindInterface+0x34>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f74e:	2bff      	cmp	r3, #255	; 0xff
 800f750:	d004      	beq.n	800f75c <USBH_FindInterface+0x34>
 800f752:	3401      	adds	r4, #1
 800f754:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f756:	2c02      	cmp	r4, #2
 800f758:	d1e8      	bne.n	800f72c <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800f75a:	25ff      	movs	r5, #255	; 0xff
}
 800f75c:	4628      	mov	r0, r5
 800f75e:	bd70      	pop	{r4, r5, r6, pc}

0800f760 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800f760:	b510      	push	{r4, lr}
 800f762:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f764:	f7f5 f9c6 	bl	8004af4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800f768:	2101      	movs	r1, #1
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7f5 fa42 	bl	8004bf4 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800f770:	2000      	movs	r0, #0
 800f772:	bd10      	pop	{r4, pc}

0800f774 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f774:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f776:	2302      	movs	r3, #2
{
 800f778:	b087      	sub	sp, #28
 800f77a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f77c:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800f780:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800f784:	b933      	cbnz	r3, 800f794 <USBH_Process+0x20>
 800f786:	7802      	ldrb	r2, [r0, #0]
 800f788:	b122      	cbz	r2, 800f794 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800f78a:	7802      	ldrb	r2, [r0, #0]
 800f78c:	2a03      	cmp	r2, #3
 800f78e:	d001      	beq.n	800f794 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 800f790:	2203      	movs	r2, #3
 800f792:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 800f794:	7822      	ldrb	r2, [r4, #0]
 800f796:	2a0b      	cmp	r2, #11
 800f798:	d820      	bhi.n	800f7dc <USBH_Process+0x68>
 800f79a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f79e:	000c      	.short	0x000c
 800f7a0:	00270022 	.word	0x00270022
 800f7a4:	001f0164 	.word	0x001f0164
 800f7a8:	0149005b 	.word	0x0149005b
 800f7ac:	010f0104 	.word	0x010f0104
 800f7b0:	0128011c 	.word	0x0128011c
 800f7b4:	015b      	.short	0x015b
    if (phost->device.is_connected)
 800f7b6:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800f7ba:	b17b      	cbz	r3, 800f7dc <USBH_Process+0x68>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f7bc:	2501      	movs	r5, #1
      USBH_Delay(200U);
 800f7be:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f7c0:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 800f7c2:	f7f5 fa33 	bl	8004c2c <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f7f5 f9be 	bl	8004b48 <USBH_LL_ResetPort>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	4629      	mov	r1, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f7d0:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7d4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800f7d8:	f7fe f88c 	bl	800d8f4 <osMessagePut>
}
 800f7dc:	2000      	movs	r0, #0
 800f7de:	b007      	add	sp, #28
 800f7e0:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d1fa      	bne.n	800f7dc <USBH_Process+0x68>
      phost->gState = HOST_DEV_ATTACHED;
 800f7e6:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 800f7e8:	7023      	strb	r3, [r4, #0]
 800f7ea:	e7f7      	b.n	800f7dc <USBH_Process+0x68>
    USBH_Delay(100U);
 800f7ec:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 800f7ee:	2500      	movs	r5, #0
    USBH_Delay(100U);
 800f7f0:	f7f5 fa1c 	bl	8004c2c <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f7f5 f999 	bl	8004b2c <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800f7fa:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800f7fc:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f800:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 800f802:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f804:	4620      	mov	r0, r4
 800f806:	f000 fc52 	bl	80100ae <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f80a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f80c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f80e:	4620      	mov	r0, r4
 800f810:	f000 fc4d 	bl	80100ae <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800f814:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f816:	4601      	mov	r1, r0
 800f818:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800f81a:	9202      	str	r2, [sp, #8]
 800f81c:	4620      	mov	r0, r4
 800f81e:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f822:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f826:	9200      	str	r2, [sp, #0]
 800f828:	2280      	movs	r2, #128	; 0x80
 800f82a:	9501      	str	r5, [sp, #4]
 800f82c:	f000 fc2b 	bl	8010086 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800f830:	79a2      	ldrb	r2, [r4, #6]
 800f832:	7961      	ldrb	r1, [r4, #5]
 800f834:	4620      	mov	r0, r4
 800f836:	9202      	str	r2, [sp, #8]
 800f838:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f83c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f840:	9200      	str	r2, [sp, #0]
 800f842:	462a      	mov	r2, r5
 800f844:	9501      	str	r5, [sp, #4]
 800f846:	f000 fc1e 	bl	8010086 <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f84a:	2101      	movs	r1, #1
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f84c:	462a      	mov	r2, r5
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f84e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800f852:	e7bf      	b.n	800f7d4 <USBH_Process+0x60>
  switch (phost->EnumState)
 800f854:	7863      	ldrb	r3, [r4, #1]
 800f856:	2b07      	cmp	r3, #7
 800f858:	d8c0      	bhi.n	800f7dc <USBH_Process+0x68>
 800f85a:	e8df f003 	tbb	[pc, r3]
 800f85e:	2a04      	.short	0x2a04
 800f860:	584e4533 	.word	0x584e4533
 800f864:	8373      	.short	0x8373
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800f866:	2108      	movs	r1, #8
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 fa77 	bl	800fd5c <USBH_Get_DevDesc>
 800f86e:	4605      	mov	r5, r0
 800f870:	2800      	cmp	r0, #0
 800f872:	d1b3      	bne.n	800f7dc <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f874:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f876:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 800f87a:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f87c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800f87e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f882:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800f884:	9202      	str	r2, [sp, #8]
 800f886:	4620      	mov	r0, r4
 800f888:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f88c:	9501      	str	r5, [sp, #4]
 800f88e:	9200      	str	r2, [sp, #0]
 800f890:	2280      	movs	r2, #128	; 0x80
 800f892:	f000 fbf8 	bl	8010086 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800f896:	79a2      	ldrb	r2, [r4, #6]
 800f898:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f89c:	4620      	mov	r0, r4
 800f89e:	9202      	str	r2, [sp, #8]
 800f8a0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f8a4:	7961      	ldrb	r1, [r4, #5]
 800f8a6:	9200      	str	r2, [sp, #0]
 800f8a8:	462a      	mov	r2, r5
 800f8aa:	9501      	str	r5, [sp, #4]
 800f8ac:	f000 fbeb 	bl	8010086 <USBH_OpenPipe>
 800f8b0:	e794      	b.n	800f7dc <USBH_Process+0x68>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800f8b2:	2112      	movs	r1, #18
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 fa51 	bl	800fd5c <USBH_Get_DevDesc>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d18e      	bne.n	800f7dc <USBH_Process+0x68>
      phost->EnumState = ENUM_SET_ADDR;
 800f8be:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f8c0:	7063      	strb	r3, [r4, #1]
 800f8c2:	e78b      	b.n	800f7dc <USBH_Process+0x68>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800f8c4:	2101      	movs	r1, #1
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fb45 	bl	800ff56 <USBH_SetAddress>
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d184      	bne.n	800f7dc <USBH_Process+0x68>
      USBH_Delay(2U);
 800f8d2:	2002      	movs	r0, #2
 800f8d4:	f7f5 f9aa 	bl	8004c2c <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f8d8:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f8da:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 800f8dc:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f8de:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f8e0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800f8e4:	79a2      	ldrb	r2, [r4, #6]
 800f8e6:	e7cd      	b.n	800f884 <USBH_Process+0x110>
    if ( USBH_Get_CfgDesc(phost,
 800f8e8:	2109      	movs	r1, #9
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fa7e 	bl	800fdec <USBH_Get_CfgDesc>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	f47f af73 	bne.w	800f7dc <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f8f6:	2304      	movs	r3, #4
 800f8f8:	e7e2      	b.n	800f8c0 <USBH_Process+0x14c>
    if (USBH_Get_CfgDesc(phost,
 800f8fa:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800f8fe:	4620      	mov	r0, r4
 800f900:	f000 fa74 	bl	800fdec <USBH_Get_CfgDesc>
 800f904:	2800      	cmp	r0, #0
 800f906:	f47f af69 	bne.w	800f7dc <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f90a:	2305      	movs	r3, #5
 800f90c:	e7d8      	b.n	800f8c0 <USBH_Process+0x14c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800f90e:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800f912:	b179      	cbz	r1, 800f934 <USBH_Process+0x1c0>
      if ( USBH_Get_StringDesc(phost,
 800f914:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f918:	23ff      	movs	r3, #255	; 0xff
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 faf4 	bl	800ff08 <USBH_Get_StringDesc>
 800f920:	4602      	mov	r2, r0
 800f922:	2800      	cmp	r0, #0
 800f924:	f47f af5a 	bne.w	800f7dc <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f928:	2306      	movs	r3, #6
 800f92a:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f92c:	2105      	movs	r1, #5
 800f92e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800f932:	e74f      	b.n	800f7d4 <USBH_Process+0x60>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f934:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f936:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f938:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f93a:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f93c:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f940:	4619      	mov	r1, r3
 800f942:	e747      	b.n	800f7d4 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 800f944:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800f948:	b151      	cbz	r1, 800f960 <USBH_Process+0x1ec>
      if ( USBH_Get_StringDesc(phost,
 800f94a:	23ff      	movs	r3, #255	; 0xff
 800f94c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f950:	4620      	mov	r0, r4
 800f952:	f000 fad9 	bl	800ff08 <USBH_Get_StringDesc>
 800f956:	2800      	cmp	r0, #0
 800f958:	f47f af40 	bne.w	800f7dc <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f95c:	2307      	movs	r3, #7
 800f95e:	e7af      	b.n	800f8c0 <USBH_Process+0x14c>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f960:	2307      	movs	r3, #7
 800f962:	e7e8      	b.n	800f936 <USBH_Process+0x1c2>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800f964:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800f968:	b189      	cbz	r1, 800f98e <USBH_Process+0x21a>
      if ( USBH_Get_StringDesc(phost,
 800f96a:	23ff      	movs	r3, #255	; 0xff
 800f96c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f970:	4620      	mov	r0, r4
 800f972:	f000 fac9 	bl	800ff08 <USBH_Get_StringDesc>
 800f976:	2800      	cmp	r0, #0
 800f978:	f47f af30 	bne.w	800f7dc <USBH_Process+0x68>
      phost->device.current_interface = 0U;
 800f97c:	2300      	movs	r3, #0
 800f97e:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800f982:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800f986:	2b01      	cmp	r3, #1
 800f988:	d10b      	bne.n	800f9a2 <USBH_Process+0x22e>
        phost->gState  = HOST_SET_CONFIGURATION;
 800f98a:	2308      	movs	r3, #8
 800f98c:	e72c      	b.n	800f7e8 <USBH_Process+0x74>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f98e:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f990:	460a      	mov	r2, r1
 800f992:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f996:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f99a:	4619      	mov	r1, r3
 800f99c:	f7fd ffaa 	bl	800d8f4 <osMessagePut>
 800f9a0:	e7ec      	b.n	800f97c <USBH_Process+0x208>
        phost->gState  = HOST_INPUT;
 800f9a2:	2307      	movs	r3, #7
 800f9a4:	e720      	b.n	800f7e8 <USBH_Process+0x74>
      if(phost->pUser != NULL)
 800f9a6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f43f af16 	beq.w	800f7dc <USBH_Process+0x68>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f9b6:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 800f9b8:	7023      	strb	r3, [r4, #0]
 800f9ba:	e035      	b.n	800fa28 <USBH_Process+0x2b4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f9bc:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f000 fad6 	bl	800ff72 <USBH_SetCfg>
 800f9c6:	b908      	cbnz	r0, 800f9cc <USBH_Process+0x258>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800f9c8:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 800f9ca:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f9cc:	2101      	movs	r1, #1
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9ce:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	e6fe      	b.n	800f7d4 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f9d6:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800f9da:	069b      	lsls	r3, r3, #26
 800f9dc:	d505      	bpl.n	800f9ea <USBH_Process+0x276>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f9de:	2101      	movs	r1, #1
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f000 fad4 	bl	800ff8e <USBH_SetFeature>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d1f0      	bne.n	800f9cc <USBH_Process+0x258>
      phost->gState  = HOST_CHECK_CLASS;
 800f9ea:	230a      	movs	r3, #10
 800f9ec:	e7ed      	b.n	800f9ca <USBH_Process+0x256>
    if(phost->ClassNumber == 0U)
 800f9ee:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800f9f2:	b1cb      	cbz	r3, 800fa28 <USBH_Process+0x2b4>
      phost->pActiveClass = NULL;
 800f9f4:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f9f6:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 800f9fa:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f9fe:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800fa02:	7919      	ldrb	r1, [r3, #4]
 800fa04:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800fa06:	bf08      	it	eq
 800fa08:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800fa0c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fa10:	b163      	cbz	r3, 800fa2c <USBH_Process+0x2b8>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	4620      	mov	r0, r4
 800fa16:	4798      	blx	r3
 800fa18:	b940      	cbnz	r0, 800fa2c <USBH_Process+0x2b8>
          phost->gState  = HOST_CLASS_REQUEST;
 800fa1a:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fa1c:	2103      	movs	r1, #3
 800fa1e:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 800fa20:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fa22:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800fa26:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa28:	2105      	movs	r1, #5
 800fa2a:	e7d0      	b.n	800f9ce <USBH_Process+0x25a>
        phost->gState  = HOST_ABORT_STATE;
 800fa2c:	230d      	movs	r3, #13
 800fa2e:	e7c3      	b.n	800f9b8 <USBH_Process+0x244>
    if(phost->pActiveClass != NULL)
 800fa30:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 800fa34:	b15a      	cbz	r2, 800fa4e <USBH_Process+0x2da>
      status = phost->pActiveClass->Requests(phost);
 800fa36:	6913      	ldr	r3, [r2, #16]
 800fa38:	4620      	mov	r0, r4
 800fa3a:	4798      	blx	r3
 800fa3c:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800fa40:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f47f aec9 	bne.w	800f7dc <USBH_Process+0x68>
        phost->gState  = HOST_CLASS;
 800fa4a:	230b      	movs	r3, #11
 800fa4c:	e6cc      	b.n	800f7e8 <USBH_Process+0x74>
      phost->gState  = HOST_ABORT_STATE;
 800fa4e:	230d      	movs	r3, #13
 800fa50:	7023      	strb	r3, [r4, #0]
 800fa52:	e76b      	b.n	800f92c <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 800fa54:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f43f aebf 	beq.w	800f7dc <USBH_Process+0x68>
      phost->pActiveClass->BgndProcess(phost);
 800fa5e:	695b      	ldr	r3, [r3, #20]
 800fa60:	4620      	mov	r0, r4
 800fa62:	4798      	blx	r3
 800fa64:	e6ba      	b.n	800f7dc <USBH_Process+0x68>
    DeInitStateMachine(phost);
 800fa66:	4620      	mov	r0, r4
 800fa68:	f7ff fdf1 	bl	800f64e <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800fa6c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f43f aeb3 	beq.w	800f7dc <USBH_Process+0x68>
      phost->pActiveClass->DeInit(phost);
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800fa82:	e6ab      	b.n	800f7dc <USBH_Process+0x68>

0800fa84 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800fa84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa86:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800fa88:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8c:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 800fa90:	a801      	add	r0, sp, #4
 800fa92:	f7fd ff57 	bl	800d944 <osMessageGet>
    if(event.status == osEventMessage)
 800fa96:	9b01      	ldr	r3, [sp, #4]
 800fa98:	2b10      	cmp	r3, #16
 800fa9a:	d1f5      	bne.n	800fa88 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f7ff fe69 	bl	800f774 <USBH_Process>
 800faa2:	e7f1      	b.n	800fa88 <USBH_Process_OS+0x4>

0800faa4 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800faa4:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 800faa8:	4770      	bx	lr

0800faaa <USBH_LL_IncTimer>:
  phost->Timer ++;
 800faaa:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 800faae:	3201      	adds	r2, #1
 800fab0:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800fab4:	7802      	ldrb	r2, [r0, #0]
 800fab6:	2a0b      	cmp	r2, #11
 800fab8:	d104      	bne.n	800fac4 <USBH_LL_IncTimer+0x1a>
 800faba:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800fabe:	b10b      	cbz	r3, 800fac4 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	4718      	bx	r3
 800fac4:	4770      	bx	lr

0800fac6 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800fac6:	2301      	movs	r3, #1
 800fac8:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800facc:	4770      	bx	lr

0800face <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800face:	2300      	movs	r3, #0
 800fad0:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800fad4:	4770      	bx	lr

0800fad6 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 800fad6:	7803      	ldrb	r3, [r0, #0]
{
 800fad8:	b510      	push	{r4, lr}
 800fada:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 800fadc:	b98b      	cbnz	r3, 800fb02 <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 800fade:	2301      	movs	r3, #1
 800fae0:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 800fae4:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800fae8:	b10b      	cbz	r3, 800faee <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 800faea:	2104      	movs	r1, #4
 800faec:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800faee:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faf0:	2200      	movs	r2, #0
 800faf2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800faf6:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fafa:	f7fd fefb 	bl	800d8f4 <osMessagePut>
}
 800fafe:	2000      	movs	r0, #0
 800fb00:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 800fb02:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d1f1      	bne.n	800faee <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 800fb0a:	2302      	movs	r3, #2
 800fb0c:	7003      	strb	r3, [r0, #0]
 800fb0e:	e7ee      	b.n	800faee <USBH_LL_Connect+0x18>

0800fb10 <USBH_LL_Disconnect>:
{
 800fb10:	b510      	push	{r4, lr}
 800fb12:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 800fb14:	f7f4 fffc 	bl	8004b10 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800fb18:	7921      	ldrb	r1, [r4, #4]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 fade 	bl	80100dc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800fb20:	7961      	ldrb	r1, [r4, #5]
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 fada 	bl	80100dc <USBH_FreePipe>
  phost->device.is_connected = 0U;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 800fb2e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800fb32:	b113      	cbz	r3, 800fb3a <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fb34:	2105      	movs	r1, #5
 800fb36:	4620      	mov	r0, r4
 800fb38:	4798      	blx	r3
  USBH_LL_Start(phost);
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f7f4 ffda 	bl	8004af4 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 800fb40:	2303      	movs	r3, #3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb42:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb44:	2200      	movs	r2, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 800fb46:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb48:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb4c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800fb50:	f7fd fed0 	bl	800d8f4 <osMessagePut>
}
 800fb54:	2000      	movs	r0, #0
 800fb56:	bd10      	pop	{r4, pc}

0800fb58 <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb58:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb5a:	2200      	movs	r2, #0
{
 800fb5c:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb5e:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb62:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 800fb66:	f7fd fec5 	bl	800d8f4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	bd08      	pop	{r3, pc}

0800fb6e <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800fb6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800fb70:	7885      	ldrb	r5, [r0, #2]
{
 800fb72:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800fb74:	2d01      	cmp	r5, #1
 800fb76:	d003      	beq.n	800fb80 <USBH_CtlReq+0x12>
 800fb78:	2d02      	cmp	r5, #2
 800fb7a:	d00f      	beq.n	800fb9c <USBH_CtlReq+0x2e>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800fb7c:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800fb7e:	e057      	b.n	800fc30 <USBH_CtlReq+0xc2>
    phost->RequestState = CMD_WAIT;
 800fb80:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800fb82:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 800fb84:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 800fb86:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 800fb88:	7083      	strb	r3, [r0, #2]
          phost->Control.state = CTRL_STATUS_IN;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb8a:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fb92:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb96:	f7fd fead 	bl	800d8f4 <osMessagePut>
 800fb9a:	e7ef      	b.n	800fb7c <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 800fb9c:	7e03      	ldrb	r3, [r0, #24]
 800fb9e:	2101      	movs	r1, #1
 800fba0:	3b01      	subs	r3, #1
 800fba2:	2b0a      	cmp	r3, #10
 800fba4:	d8ea      	bhi.n	800fb7c <USBH_CtlReq+0xe>
 800fba6:	e8df f003 	tbb	[pc, r3]
 800fbaa:	0e06      	.short	0x0e06
 800fbac:	50452f25 	.word	0x50452f25
 800fbb0:	a1967a70 	.word	0xa1967a70
 800fbb4:	ab          	.byte	0xab
 800fbb5:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fbb6:	7942      	ldrb	r2, [r0, #5]
 800fbb8:	f100 0110 	add.w	r1, r0, #16
 800fbbc:	f000 fa03 	bl	800ffc6 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 800fbc0:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800fbc2:	7623      	strb	r3, [r4, #24]
 800fbc4:	e7da      	b.n	800fb7c <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbc6:	7941      	ldrb	r1, [r0, #5]
 800fbc8:	f7f5 f810 	bl	8004bec <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800fbcc:	2801      	cmp	r0, #1
 800fbce:	d10c      	bne.n	800fbea <USBH_CtlReq+0x7c>
      if (phost->Control.setup.b.wLength.w != 0U)
 800fbd0:	8ae2      	ldrh	r2, [r4, #22]
 800fbd2:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800fbd6:	b122      	cbz	r2, 800fbe2 <USBH_CtlReq+0x74>
        if (direction == USB_D2H)
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	da44      	bge.n	800fc66 <USBH_CtlReq+0xf8>
          phost->Control.state = CTRL_DATA_IN;
 800fbdc:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 800fbde:	7623      	strb	r3, [r4, #24]
 800fbe0:	e7d3      	b.n	800fb8a <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	da36      	bge.n	800fc54 <USBH_CtlReq+0xe6>
#endif
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800fbe6:	2309      	movs	r3, #9
 800fbe8:	e7f9      	b.n	800fbde <USBH_CtlReq+0x70>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fbea:	2804      	cmp	r0, #4
 800fbec:	d06d      	beq.n	800fcca <USBH_CtlReq+0x15c>
 800fbee:	2802      	cmp	r0, #2
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 800fbf0:	d1c4      	bne.n	800fb7c <USBH_CtlReq+0xe>
 800fbf2:	e06a      	b.n	800fcca <USBH_CtlReq+0x15c>
    phost->Control.timer = (uint16_t)phost->Timer;
 800fbf4:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 800fbf8:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 800fbfa:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800fbfc:	6881      	ldr	r1, [r0, #8]
 800fbfe:	7903      	ldrb	r3, [r0, #4]
 800fc00:	f000 fa09 	bl	8010016 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800fc04:	2304      	movs	r3, #4
 800fc06:	e7dc      	b.n	800fbc2 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800fc08:	7901      	ldrb	r1, [r0, #4]
 800fc0a:	f7f4 ffef 	bl	8004bec <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fc0e:	2801      	cmp	r0, #1
 800fc10:	d0e9      	beq.n	800fbe6 <USBH_CtlReq+0x78>
    if  (URB_Status == USBH_URB_STALL)
 800fc12:	2805      	cmp	r0, #5
 800fc14:	d172      	bne.n	800fcfc <USBH_CtlReq+0x18e>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc16:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc1e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc22:	f7fd fe67 	bl	800d8f4 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800fc26:	2301      	movs	r3, #1
      status = USBH_NOT_SUPPORTED;
 800fc28:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 800fc2a:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	7623      	strb	r3, [r4, #24]
}
 800fc30:	b003      	add	sp, #12
 800fc32:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 800fc34:	7943      	ldrb	r3, [r0, #5]
 800fc36:	8982      	ldrh	r2, [r0, #12]
 800fc38:	9100      	str	r1, [sp, #0]
 800fc3a:	6881      	ldr	r1, [r0, #8]
 800fc3c:	f000 f9d4 	bl	800ffe8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800fc40:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fc44:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fc46:	2306      	movs	r3, #6
 800fc48:	e7bb      	b.n	800fbc2 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800fc4a:	7941      	ldrb	r1, [r0, #5]
 800fc4c:	f7f4 ffce 	bl	8004bec <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fc50:	2801      	cmp	r0, #1
 800fc52:	d101      	bne.n	800fc58 <USBH_CtlReq+0xea>
          phost->Control.state = CTRL_STATUS_IN;
 800fc54:	2307      	movs	r3, #7
 800fc56:	e7c2      	b.n	800fbde <USBH_CtlReq+0x70>
    else if  (URB_Status == USBH_URB_STALL)
 800fc58:	2805      	cmp	r0, #5
 800fc5a:	d102      	bne.n	800fc62 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_STALLED;
 800fc5c:	230c      	movs	r3, #12
 800fc5e:	7623      	strb	r3, [r4, #24]
 800fc60:	e7d9      	b.n	800fc16 <USBH_CtlReq+0xa8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fc62:	2802      	cmp	r0, #2
 800fc64:	d101      	bne.n	800fc6a <USBH_CtlReq+0xfc>
      phost->Control.state = CTRL_DATA_OUT;
 800fc66:	2305      	movs	r3, #5
 800fc68:	e7b9      	b.n	800fbde <USBH_CtlReq+0x70>
      if (URB_Status == USBH_URB_ERROR)
 800fc6a:	2804      	cmp	r0, #4
 800fc6c:	d186      	bne.n	800fb7c <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800fc6e:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc70:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 800fc78:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc7a:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc7e:	f7fd fe39 	bl	800d8f4 <osMessagePut>
        phost->RequestState = CMD_SEND;
 800fc82:	2301      	movs	r3, #1
        status = USBH_FAIL;
 800fc84:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fc86:	70a3      	strb	r3, [r4, #2]
 800fc88:	e7d2      	b.n	800fc30 <USBH_CtlReq+0xc2>
    USBH_CtlReceiveData (phost,
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	7903      	ldrb	r3, [r0, #4]
 800fc8e:	4611      	mov	r1, r2
 800fc90:	f000 f9c1 	bl	8010016 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800fc94:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fc98:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc9a:	2308      	movs	r3, #8
 800fc9c:	e791      	b.n	800fbc2 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800fc9e:	7901      	ldrb	r1, [r0, #4]
 800fca0:	f7f4 ffa4 	bl	8004bec <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800fca4:	2801      	cmp	r0, #1
 800fca6:	d10e      	bne.n	800fcc6 <USBH_CtlReq+0x158>
      phost->Control.state = CTRL_COMPLETE;
 800fca8:	230d      	movs	r3, #13
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcaa:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcac:	2200      	movs	r2, #0
 800fcae:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 800fcb2:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcb4:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcb8:	f7fd fe1c 	bl	800d8f4 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800fcbc:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800fcbe:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 800fcc0:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800fcc2:	7620      	strb	r0, [r4, #24]
 800fcc4:	e7b4      	b.n	800fc30 <USBH_CtlReq+0xc2>
    else if (URB_Status == USBH_URB_ERROR)
 800fcc6:	2804      	cmp	r0, #4
 800fcc8:	d101      	bne.n	800fcce <USBH_CtlReq+0x160>
      {
        phost->Control.state = CTRL_ERROR;
 800fcca:	230b      	movs	r3, #11
 800fccc:	e787      	b.n	800fbde <USBH_CtlReq+0x70>
      if(URB_Status == USBH_URB_STALL)
 800fcce:	2805      	cmp	r0, #5
 800fcd0:	f47f af54 	bne.w	800fb7c <USBH_CtlReq+0xe>
 800fcd4:	e79f      	b.n	800fc16 <USBH_CtlReq+0xa8>
    USBH_CtlSendData (phost,
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	7943      	ldrb	r3, [r0, #5]
 800fcda:	9100      	str	r1, [sp, #0]
 800fcdc:	4611      	mov	r1, r2
 800fcde:	f000 f983 	bl	800ffe8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800fce2:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fce6:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fce8:	230a      	movs	r3, #10
 800fcea:	e76a      	b.n	800fbc2 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800fcec:	7941      	ldrb	r1, [r0, #5]
 800fcee:	f7f4 ff7d 	bl	8004bec <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fcf2:	2801      	cmp	r0, #1
 800fcf4:	d0d8      	beq.n	800fca8 <USBH_CtlReq+0x13a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fcf6:	2802      	cmp	r0, #2
 800fcf8:	f43f af75 	beq.w	800fbe6 <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_ERROR)
 800fcfc:	2804      	cmp	r0, #4
 800fcfe:	e777      	b.n	800fbf0 <USBH_CtlReq+0x82>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fd00:	7e43      	ldrb	r3, [r0, #25]
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	7643      	strb	r3, [r0, #25]
 800fd0a:	d805      	bhi.n	800fd18 <USBH_CtlReq+0x1aa>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800fd0c:	f7f4 ff00 	bl	8004b10 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800fd10:	2301      	movs	r3, #1
 800fd12:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800fd14:	70a3      	strb	r3, [r4, #2]
 800fd16:	e731      	b.n	800fb7c <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fd18:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800fd1c:	2106      	movs	r1, #6
 800fd1e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800fd20:	2300      	movs	r3, #0
 800fd22:	7663      	strb	r3, [r4, #25]
 800fd24:	e7ad      	b.n	800fc82 <USBH_CtlReq+0x114>

0800fd26 <USBH_GetDescriptor>:
{
 800fd26:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800fd28:	7884      	ldrb	r4, [r0, #2]
{
 800fd2a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800fd2e:	2c01      	cmp	r4, #1
 800fd30:	d10f      	bne.n	800fd52 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fd32:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 800fd36:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fd38:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 800fd3a:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fd3c:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fd3e:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fd42:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fd44:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fd48:	bf0c      	ite	eq
 800fd4a:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800fd4e:	2200      	movne	r2, #0
 800fd50:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800fd52:	462a      	mov	r2, r5
 800fd54:	4619      	mov	r1, r3
}
 800fd56:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800fd58:	f7ff bf09 	b.w	800fb6e <USBH_CtlReq>

0800fd5c <USBH_Get_DevDesc>:
{
 800fd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800fd5e:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800fd62:	460d      	mov	r5, r1
 800fd64:	9100      	str	r1, [sp, #0]
 800fd66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd6a:	2100      	movs	r1, #0
{
 800fd6c:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800fd6e:	f7ff ffda 	bl	800fd26 <USBH_GetDescriptor>
 800fd72:	bbc8      	cbnz	r0, 800fde8 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800fd74:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 800fd78:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800fd7a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800fd7e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800fd82:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800fd86:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800fd8a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800fd8e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800fd92:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800fd96:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800fd9a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800fd9e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800fda2:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800fda6:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800fdaa:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 800fdae:	d91b      	bls.n	800fde8 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 800fdb0:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800fdb4:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800fdb8:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800fdbc:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800fdc0:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800fdc4:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800fdc8:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800fdcc:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800fdd0:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800fdd4:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800fdd8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800fddc:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800fde0:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800fde4:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800fde8:	b003      	add	sp, #12
 800fdea:	bd30      	pop	{r4, r5, pc}

0800fdec <USBH_Get_CfgDesc>:
{
 800fdec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 800fdf0:	f100 051c 	add.w	r5, r0, #28
{
 800fdf4:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 800fdf6:	9100      	str	r1, [sp, #0]
 800fdf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	2100      	movs	r1, #0
{
 800fe00:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800fe02:	f7ff ff90 	bl	800fd26 <USBH_GetDescriptor>
 800fe06:	bb48      	cbnz	r0, 800fe5c <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800fe08:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fe0a:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800fe0c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800fe10:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800fe14:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800fe16:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800fe1a:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800fe1e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fe22:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800fe26:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800fe2a:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800fe2e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800fe32:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800fe36:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800fe3a:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800fe3e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800fe42:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fe46:	d909      	bls.n	800fe5c <USBH_Get_CfgDesc+0x70>
 800fe48:	4627      	mov	r7, r4
 800fe4a:	462b      	mov	r3, r5
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800fe50:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fe54:	2e02      	cmp	r6, #2
 800fe56:	d001      	beq.n	800fe5c <USBH_Get_CfgDesc+0x70>
 800fe58:	4596      	cmp	lr, r2
 800fe5a:	d802      	bhi.n	800fe62 <USBH_Get_CfgDesc+0x76>
}
 800fe5c:	b003      	add	sp, #12
 800fe5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fe62:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fe64:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fe66:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fe68:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fe6a:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fe6c:	2904      	cmp	r1, #4
 800fe6e:	d1f1      	bne.n	800fe54 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800fe70:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800fe72:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800fe76:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800fe7a:	7859      	ldrb	r1, [r3, #1]
 800fe7c:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800fe80:	7899      	ldrb	r1, [r3, #2]
 800fe82:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800fe86:	78d9      	ldrb	r1, [r3, #3]
 800fe88:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800fe8c:	7919      	ldrb	r1, [r3, #4]
 800fe8e:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800fe92:	7959      	ldrb	r1, [r3, #5]
 800fe94:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800fe98:	7999      	ldrb	r1, [r3, #6]
 800fe9a:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800fe9e:	79d9      	ldrb	r1, [r3, #7]
 800fea0:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800fea4:	7a19      	ldrb	r1, [r3, #8]
 800fea6:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
        ep_ix = 0U;
 800feaa:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800feac:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 800feb0:	428d      	cmp	r5, r1
 800feb2:	d802      	bhi.n	800feba <USBH_Get_CfgDesc+0xce>
 800feb4:	3601      	adds	r6, #1
 800feb6:	371a      	adds	r7, #26
 800feb8:	e7cc      	b.n	800fe54 <USBH_Get_CfgDesc+0x68>
 800feba:	4596      	cmp	lr, r2
 800febc:	d9fa      	bls.n	800feb4 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800febe:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fec0:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fec2:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fec4:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fec6:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fec8:	2d05      	cmp	r5, #5
 800feca:	d1ef      	bne.n	800feac <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800fecc:	1c4d      	adds	r5, r1, #1
 800fece:	f893 9000 	ldrb.w	r9, [r3]
 800fed2:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 800fed6:	4421      	add	r1, r4
 800fed8:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800fedc:	f893 9001 	ldrb.w	r9, [r3, #1]
 800fee0:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800fee4:	f893 9002 	ldrb.w	r9, [r3, #2]
 800fee8:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800feec:	f893 9003 	ldrb.w	r9, [r3, #3]
 800fef0:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800fef4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800fef8:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800fefc:	f893 9006 	ldrb.w	r9, [r3, #6]
 800ff00:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 800ff04:	b2e9      	uxtb	r1, r5
 800ff06:	e7d1      	b.n	800feac <USBH_Get_CfgDesc+0xc0>

0800ff08 <USBH_Get_StringDesc>:
{
 800ff08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800ff0a:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800ff0e:	4614      	mov	r4, r2
 800ff10:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800ff18:	462b      	mov	r3, r5
 800ff1a:	2100      	movs	r1, #0
{
 800ff1c:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 800ff1e:	f7ff ff02 	bl	800fd26 <USBH_GetDescriptor>
 800ff22:	b978      	cbnz	r0, 800ff44 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ff24:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d10b      	bne.n	800ff44 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ff2c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 800ff30:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ff32:	3b02      	subs	r3, #2
 800ff34:	42bb      	cmp	r3, r7
 800ff36:	bf28      	it	cs
 800ff38:	463b      	movcs	r3, r7
 800ff3a:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d803      	bhi.n	800ff48 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800ff40:	2300      	movs	r3, #0
 800ff42:	7023      	strb	r3, [r4, #0]
}
 800ff44:	b003      	add	sp, #12
 800ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800ff48:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800ff4a:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800ff4c:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ff4e:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 800ff50:	f804 1b01 	strb.w	r1, [r4], #1
 800ff54:	e7f2      	b.n	800ff3c <USBH_Get_StringDesc+0x34>

0800ff56 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800ff56:	7883      	ldrb	r3, [r0, #2]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d106      	bne.n	800ff6a <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ff5c:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ff5e:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ff60:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ff62:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ff64:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800ff66:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ff68:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	4611      	mov	r1, r2
 800ff6e:	f7ff bdfe 	b.w	800fb6e <USBH_CtlReq>

0800ff72 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 800ff72:	7883      	ldrb	r3, [r0, #2]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d106      	bne.n	800ff86 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ff78:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ff7a:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ff7c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ff7e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ff80:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800ff82:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ff84:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800ff86:	2200      	movs	r2, #0
 800ff88:	4611      	mov	r1, r2
 800ff8a:	f7ff bdf0 	b.w	800fb6e <USBH_CtlReq>

0800ff8e <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 800ff8e:	7883      	ldrb	r3, [r0, #2]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d106      	bne.n	800ffa2 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ff94:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ff96:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 800ff98:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ff9a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ff9c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 800ff9e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ffa0:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	f7ff bde2 	b.w	800fb6e <USBH_CtlReq>

0800ffaa <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800ffaa:	7883      	ldrb	r3, [r0, #2]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d106      	bne.n	800ffbe <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ffb0:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ffb2:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ffb4:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 800ffb6:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ffb8:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ffba:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0U;
 800ffbc:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	4611      	mov	r1, r2
 800ffc2:	f7ff bdd4 	b.w	800fb6e <USBH_CtlReq>

0800ffc6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800ffc6:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ffc8:	2308      	movs	r3, #8
{
 800ffca:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ffcc:	2400      	movs	r4, #0
{
 800ffce:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	9101      	str	r1, [sp, #4]
 800ffd4:	4623      	mov	r3, r4
 800ffd6:	9403      	str	r4, [sp, #12]
 800ffd8:	4622      	mov	r2, r4
 800ffda:	9400      	str	r4, [sp, #0]
 800ffdc:	4629      	mov	r1, r5
 800ffde:	f7f4 fdeb 	bl	8004bb8 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	b005      	add	sp, #20
 800ffe6:	bd30      	pop	{r4, r5, pc}

0800ffe8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800ffe8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ffea:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800ffee:	b085      	sub	sp, #20
 800fff0:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 800fff2:	2d00      	cmp	r5, #0
{
 800fff4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fff8:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 800fffa:	bf18      	it	ne
 800fffc:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800fffe:	9101      	str	r1, [sp, #4]
 8010000:	4621      	mov	r1, r4
 8010002:	9303      	str	r3, [sp, #12]
 8010004:	2301      	movs	r3, #1
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	2300      	movs	r3, #0
 801000a:	461a      	mov	r2, r3
 801000c:	f7f4 fdd4 	bl	8004bb8 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8010010:	2000      	movs	r0, #0
 8010012:	b005      	add	sp, #20
 8010014:	bd30      	pop	{r4, r5, pc}

08010016 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010016:	b530      	push	{r4, r5, lr}
 8010018:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801001a:	2400      	movs	r4, #0
{
 801001c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801001e:	9202      	str	r2, [sp, #8]
 8010020:	2201      	movs	r2, #1
 8010022:	9101      	str	r1, [sp, #4]
 8010024:	4623      	mov	r3, r4
 8010026:	9403      	str	r4, [sp, #12]
 8010028:	4629      	mov	r1, r5
 801002a:	9200      	str	r2, [sp, #0]
 801002c:	f7f4 fdc4 	bl	8004bb8 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8010030:	4620      	mov	r0, r4
 8010032:	b005      	add	sp, #20
 8010034:	bd30      	pop	{r4, r5, pc}

08010036 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8010036:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8010038:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 801003c:	b085      	sub	sp, #20
 801003e:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8010040:	2d00      	cmp	r5, #0
{
 8010042:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010046:	9202      	str	r2, [sp, #8]
 8010048:	f04f 0200 	mov.w	r2, #0
    do_ping = 0U;
 801004c:	bf18      	it	ne
 801004e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010050:	9101      	str	r1, [sp, #4]
 8010052:	4621      	mov	r1, r4
 8010054:	9303      	str	r3, [sp, #12]
 8010056:	2301      	movs	r3, #1
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	2302      	movs	r3, #2
 801005c:	f7f4 fdac 	bl	8004bb8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8010060:	2000      	movs	r0, #0
 8010062:	b005      	add	sp, #20
 8010064:	bd30      	pop	{r4, r5, pc}

08010066 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010066:	b530      	push	{r4, r5, lr}
 8010068:	b085      	sub	sp, #20
 801006a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801006c:	2400      	movs	r4, #0
 801006e:	2302      	movs	r3, #2
 8010070:	9202      	str	r2, [sp, #8]
 8010072:	2201      	movs	r2, #1
 8010074:	9101      	str	r1, [sp, #4]
 8010076:	4629      	mov	r1, r5
 8010078:	9403      	str	r4, [sp, #12]
 801007a:	9200      	str	r2, [sp, #0]
 801007c:	f7f4 fd9c 	bl	8004bb8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8010080:	4620      	mov	r0, r4
 8010082:	b005      	add	sp, #20
 8010084:	bd30      	pop	{r4, r5, pc}

08010086 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8010086:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8010088:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801008c:	9402      	str	r4, [sp, #8]
 801008e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8010092:	9401      	str	r4, [sp, #4]
 8010094:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010098:	9400      	str	r4, [sp, #0]
 801009a:	f7f4 fd67 	bl	8004b6c <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 801009e:	2000      	movs	r0, #0
 80100a0:	b004      	add	sp, #16
 80100a2:	bd10      	pop	{r4, pc}

080100a4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80100a4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80100a6:	f7f4 fd79 	bl	8004b9c <USBH_LL_ClosePipe>

  return USBH_OK;

}
 80100aa:	2000      	movs	r0, #0
 80100ac:	bd08      	pop	{r3, pc}

080100ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80100ae:	b530      	push	{r4, r5, lr}
 80100b0:	2300      	movs	r3, #0
 80100b2:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80100b6:	f854 5b04 	ldr.w	r5, [r4], #4
 80100ba:	b2da      	uxtb	r2, r3
 80100bc:	042d      	lsls	r5, r5, #16
 80100be:	d407      	bmi.n	80100d0 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80100c0:	33e0      	adds	r3, #224	; 0xe0
 80100c2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 80100c6:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80100c8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 80100cc:	b2d0      	uxtb	r0, r2
 80100ce:	bd30      	pop	{r4, r5, pc}
 80100d0:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 80100d2:	2b0b      	cmp	r3, #11
 80100d4:	d1ef      	bne.n	80100b6 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 80100d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100da:	e7f7      	b.n	80100cc <USBH_AllocPipe+0x1e>

080100dc <USBH_FreePipe>:
   if(idx < 11U)
 80100dc:	290a      	cmp	r1, #10
 80100de:	bf9f      	itttt	ls
 80100e0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 80100e4:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 80100e8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80100ec:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 80100f0:	2000      	movs	r0, #0
 80100f2:	4770      	bx	lr

080100f4 <GL_FillCircleAA_HiRes>:
 80100f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f8:	4607      	mov	r7, r0
 80100fa:	b083      	sub	sp, #12
 80100fc:	4616      	mov	r6, r2
 80100fe:	1a80      	subs	r0, r0, r2
 8010100:	9101      	str	r1, [sp, #4]
 8010102:	18b9      	adds	r1, r7, r2
 8010104:	f000 fe22 	bl	8010d4c <GUI_AA_Init_HiRes>
 8010108:	2e00      	cmp	r6, #0
 801010a:	9a01      	ldr	r2, [sp, #4]
 801010c:	fb06 f506 	mul.w	r5, r6, r6
 8010110:	bfb4      	ite	lt
 8010112:	1c73      	addlt	r3, r6, #1
 8010114:	4633      	movge	r3, r6
 8010116:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80101e8 <GL_FillCircleAA_HiRes+0xf4>
 801011a:	ebc6 0802 	rsb	r8, r6, r2
 801011e:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8010122:	18b3      	adds	r3, r6, r2
 8010124:	4619      	mov	r1, r3
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	f8d9 3000 	ldr.w	r3, [r9]
 801012c:	695b      	ldr	r3, [r3, #20]
 801012e:	b153      	cbz	r3, 8010146 <GL_FillCircleAA_HiRes+0x52>
 8010130:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010138:	4291      	cmp	r1, r2
 801013a:	bfa8      	it	ge
 801013c:	4611      	movge	r1, r2
 801013e:	4598      	cmp	r8, r3
 8010140:	bfb8      	it	lt
 8010142:	4698      	movlt	r8, r3
 8010144:	9100      	str	r1, [sp, #0]
 8010146:	2e01      	cmp	r6, #1
 8010148:	dd4b      	ble.n	80101e2 <GL_FillCircleAA_HiRes+0xee>
 801014a:	9b01      	ldr	r3, [sp, #4]
 801014c:	4634      	mov	r4, r6
 801014e:	f04f 0b01 	mov.w	fp, #1
 8010152:	f103 3aff 	add.w	sl, r3, #4294967295
 8010156:	45c2      	cmp	sl, r8
 8010158:	db15      	blt.n	8010186 <GL_FillCircleAA_HiRes+0x92>
 801015a:	9b00      	ldr	r3, [sp, #0]
 801015c:	459a      	cmp	sl, r3
 801015e:	dc12      	bgt.n	8010186 <GL_FillCircleAA_HiRes+0x92>
 8010160:	fb0b f20b 	mul.w	r2, fp, fp
 8010164:	fb04 2304 	mla	r3, r4, r4, r2
 8010168:	429d      	cmp	r5, r3
 801016a:	da04      	bge.n	8010176 <GL_FillCircleAA_HiRes+0x82>
 801016c:	3c01      	subs	r4, #1
 801016e:	fb04 2304 	mla	r3, r4, r4, r2
 8010172:	429d      	cmp	r5, r3
 8010174:	dbfa      	blt.n	801016c <GL_FillCircleAA_HiRes+0x78>
 8010176:	f8d9 3000 	ldr.w	r3, [r9]
 801017a:	193a      	adds	r2, r7, r4
 801017c:	4651      	mov	r1, sl
 801017e:	1b38      	subs	r0, r7, r4
 8010180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4798      	blx	r3
 8010186:	f10b 0b01 	add.w	fp, fp, #1
 801018a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801018e:	455e      	cmp	r6, fp
 8010190:	d1e1      	bne.n	8010156 <GL_FillCircleAA_HiRes+0x62>
 8010192:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010196:	4634      	mov	r4, r6
 8010198:	f04f 0b00 	mov.w	fp, #0
 801019c:	45d0      	cmp	r8, sl
 801019e:	dc15      	bgt.n	80101cc <GL_FillCircleAA_HiRes+0xd8>
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	4553      	cmp	r3, sl
 80101a4:	db12      	blt.n	80101cc <GL_FillCircleAA_HiRes+0xd8>
 80101a6:	fb0b f20b 	mul.w	r2, fp, fp
 80101aa:	fb04 2304 	mla	r3, r4, r4, r2
 80101ae:	429d      	cmp	r5, r3
 80101b0:	da04      	bge.n	80101bc <GL_FillCircleAA_HiRes+0xc8>
 80101b2:	3c01      	subs	r4, #1
 80101b4:	fb04 2304 	mla	r3, r4, r4, r2
 80101b8:	429d      	cmp	r5, r3
 80101ba:	dbfa      	blt.n	80101b2 <GL_FillCircleAA_HiRes+0xbe>
 80101bc:	f8d9 3000 	ldr.w	r3, [r9]
 80101c0:	193a      	adds	r2, r7, r4
 80101c2:	4651      	mov	r1, sl
 80101c4:	1b38      	subs	r0, r7, r4
 80101c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4798      	blx	r3
 80101cc:	f10b 0b01 	add.w	fp, fp, #1
 80101d0:	f10a 0a01 	add.w	sl, sl, #1
 80101d4:	455e      	cmp	r6, fp
 80101d6:	d1e1      	bne.n	801019c <GL_FillCircleAA_HiRes+0xa8>
 80101d8:	b003      	add	sp, #12
 80101da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101de:	f000 be83 	b.w	8010ee8 <GUI_AA_Exit>
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	ddf8      	ble.n	80101d8 <GL_FillCircleAA_HiRes+0xe4>
 80101e6:	e7d4      	b.n	8010192 <GL_FillCircleAA_HiRes+0x9e>
 80101e8:	20000018 	.word	0x20000018

080101ec <GL_DrawCircleAA_HiRes>:
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	b08b      	sub	sp, #44	; 0x2c
 80101f2:	4614      	mov	r4, r2
 80101f4:	4605      	mov	r5, r0
 80101f6:	9106      	str	r1, [sp, #24]
 80101f8:	9007      	str	r0, [sp, #28]
 80101fa:	f003 faa9 	bl	8013750 <GUI_GetPenSize>
 80101fe:	4b7f      	ldr	r3, [pc, #508]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 8010200:	1b2a      	subs	r2, r5, r4
 8010202:	1929      	adds	r1, r5, r4
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801020a:	fb00 f003 	mul.w	r0, r0, r3
 801020e:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8010212:	4401      	add	r1, r0
 8010214:	1a10      	subs	r0, r2, r0
 8010216:	f000 fd99 	bl	8010d4c <GUI_AA_Init_HiRes>
 801021a:	f003 fa99 	bl	8013750 <GUI_GetPenSize>
 801021e:	4b77      	ldr	r3, [pc, #476]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 8010226:	695b      	ldr	r3, [r3, #20]
 8010228:	fb00 f005 	mul.w	r0, r0, r5
 801022c:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 8010230:	eb04 0255 	add.w	r2, r4, r5, lsr #1
 8010234:	2a00      	cmp	r2, #0
 8010236:	eba2 0505 	sub.w	r5, r2, r5
 801023a:	9201      	str	r2, [sp, #4]
 801023c:	fb02 f602 	mul.w	r6, r2, r2
 8010240:	bfb8      	it	lt
 8010242:	3201      	addlt	r2, #1
 8010244:	9901      	ldr	r1, [sp, #4]
 8010246:	2d00      	cmp	r5, #0
 8010248:	eb06 0662 	add.w	r6, r6, r2, asr #1
 801024c:	9a06      	ldr	r2, [sp, #24]
 801024e:	46a8      	mov	r8, r5
 8010250:	fb05 f905 	mul.w	r9, r5, r5
 8010254:	eba2 0001 	sub.w	r0, r2, r1
 8010258:	eba2 0405 	sub.w	r4, r2, r5
 801025c:	4411      	add	r1, r2
 801025e:	bfb8      	it	lt
 8010260:	f105 0801 	addlt.w	r8, r5, #1
 8010264:	442a      	add	r2, r5
 8010266:	9003      	str	r0, [sp, #12]
 8010268:	eb09 0868 	add.w	r8, r9, r8, asr #1
 801026c:	9102      	str	r1, [sp, #8]
 801026e:	9404      	str	r4, [sp, #16]
 8010270:	9205      	str	r2, [sp, #20]
 8010272:	b15b      	cbz	r3, 801028c <GL_DrawCircleAA_HiRes+0xa0>
 8010274:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801027c:	4291      	cmp	r1, r2
 801027e:	bfa8      	it	ge
 8010280:	4611      	movge	r1, r2
 8010282:	4298      	cmp	r0, r3
 8010284:	bfb8      	it	lt
 8010286:	4618      	movlt	r0, r3
 8010288:	9102      	str	r1, [sp, #8]
 801028a:	9003      	str	r0, [sp, #12]
 801028c:	9b01      	ldr	r3, [sp, #4]
 801028e:	2b01      	cmp	r3, #1
 8010290:	f340 80b1 	ble.w	80103f6 <GL_DrawCircleAA_HiRes+0x20a>
 8010294:	461c      	mov	r4, r3
 8010296:	9b06      	ldr	r3, [sp, #24]
 8010298:	462f      	mov	r7, r5
 801029a:	9508      	str	r5, [sp, #32]
 801029c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80102a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80102a4:	f04f 0b01 	mov.w	fp, #1
 80102a8:	9d07      	ldr	r5, [sp, #28]
 80102aa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80102ae:	45ca      	cmp	sl, r9
 80102b0:	db18      	blt.n	80102e4 <GL_DrawCircleAA_HiRes+0xf8>
 80102b2:	9b02      	ldr	r3, [sp, #8]
 80102b4:	459a      	cmp	sl, r3
 80102b6:	dc15      	bgt.n	80102e4 <GL_DrawCircleAA_HiRes+0xf8>
 80102b8:	9b04      	ldr	r3, [sp, #16]
 80102ba:	4553      	cmp	r3, sl
 80102bc:	dd76      	ble.n	80103ac <GL_DrawCircleAA_HiRes+0x1c0>
 80102be:	fb0b f20b 	mul.w	r2, fp, fp
 80102c2:	fb04 2304 	mla	r3, r4, r4, r2
 80102c6:	429e      	cmp	r6, r3
 80102c8:	da04      	bge.n	80102d4 <GL_DrawCircleAA_HiRes+0xe8>
 80102ca:	3c01      	subs	r4, #1
 80102cc:	fb04 2304 	mla	r3, r4, r4, r2
 80102d0:	429e      	cmp	r6, r3
 80102d2:	dbfa      	blt.n	80102ca <GL_DrawCircleAA_HiRes+0xde>
 80102d4:	4b49      	ldr	r3, [pc, #292]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 80102d6:	192a      	adds	r2, r5, r4
 80102d8:	4651      	mov	r1, sl
 80102da:	1b28      	subs	r0, r5, r4
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4798      	blx	r3
 80102e4:	f10b 0b01 	add.w	fp, fp, #1
 80102e8:	9b01      	ldr	r3, [sp, #4]
 80102ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102ee:	455b      	cmp	r3, fp
 80102f0:	d1dd      	bne.n	80102ae <GL_DrawCircleAA_HiRes+0xc2>
 80102f2:	9d08      	ldr	r5, [sp, #32]
 80102f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80102f8:	461c      	mov	r4, r3
 80102fa:	9f06      	ldr	r7, [sp, #24]
 80102fc:	f04f 0a00 	mov.w	sl, #0
 8010300:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8010304:	9b03      	ldr	r3, [sp, #12]
 8010306:	42bb      	cmp	r3, r7
 8010308:	dc1a      	bgt.n	8010340 <GL_DrawCircleAA_HiRes+0x154>
 801030a:	9b02      	ldr	r3, [sp, #8]
 801030c:	42bb      	cmp	r3, r7
 801030e:	db17      	blt.n	8010340 <GL_DrawCircleAA_HiRes+0x154>
 8010310:	9b05      	ldr	r3, [sp, #20]
 8010312:	42bb      	cmp	r3, r7
 8010314:	da1f      	bge.n	8010356 <GL_DrawCircleAA_HiRes+0x16a>
 8010316:	fb0a f20a 	mul.w	r2, sl, sl
 801031a:	fb04 2304 	mla	r3, r4, r4, r2
 801031e:	429e      	cmp	r6, r3
 8010320:	da04      	bge.n	801032c <GL_DrawCircleAA_HiRes+0x140>
 8010322:	3c01      	subs	r4, #1
 8010324:	fb04 2304 	mla	r3, r4, r4, r2
 8010328:	429e      	cmp	r6, r3
 801032a:	dbfa      	blt.n	8010322 <GL_DrawCircleAA_HiRes+0x136>
 801032c:	4b33      	ldr	r3, [pc, #204]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 801032e:	eb0b 0204 	add.w	r2, fp, r4
 8010332:	4639      	mov	r1, r7
 8010334:	ebc4 000b 	rsb	r0, r4, fp
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4798      	blx	r3
 8010340:	f10a 0a01 	add.w	sl, sl, #1
 8010344:	9b01      	ldr	r3, [sp, #4]
 8010346:	3701      	adds	r7, #1
 8010348:	4553      	cmp	r3, sl
 801034a:	d1db      	bne.n	8010304 <GL_DrawCircleAA_HiRes+0x118>
 801034c:	b00b      	add	sp, #44	; 0x2c
 801034e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010352:	f000 bdc9 	b.w	8010ee8 <GUI_AA_Exit>
 8010356:	fb0a f30a 	mul.w	r3, sl, sl
 801035a:	fb04 3204 	mla	r2, r4, r4, r3
 801035e:	4296      	cmp	r6, r2
 8010360:	da0b      	bge.n	801037a <GL_DrawCircleAA_HiRes+0x18e>
 8010362:	3c01      	subs	r4, #1
 8010364:	fb04 3204 	mla	r2, r4, r4, r3
 8010368:	4296      	cmp	r6, r2
 801036a:	dbfa      	blt.n	8010362 <GL_DrawCircleAA_HiRes+0x176>
 801036c:	eb09 0203 	add.w	r2, r9, r3
 8010370:	4590      	cmp	r8, r2
 8010372:	da06      	bge.n	8010382 <GL_DrawCircleAA_HiRes+0x196>
 8010374:	3d01      	subs	r5, #1
 8010376:	fb05 f905 	mul.w	r9, r5, r5
 801037a:	eb09 0203 	add.w	r2, r9, r3
 801037e:	4590      	cmp	r8, r2
 8010380:	dbf8      	blt.n	8010374 <GL_DrawCircleAA_HiRes+0x188>
 8010382:	4b1e      	ldr	r3, [pc, #120]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 8010384:	ebc5 020b 	rsb	r2, r5, fp
 8010388:	4639      	mov	r1, r7
 801038a:	ebc4 000b 	rsb	r0, r4, fp
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4798      	blx	r3
 8010396:	4b19      	ldr	r3, [pc, #100]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 8010398:	eb0b 0204 	add.w	r2, fp, r4
 801039c:	4639      	mov	r1, r7
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	eb0b 0005 	add.w	r0, fp, r5
 80103a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4798      	blx	r3
 80103aa:	e7c9      	b.n	8010340 <GL_DrawCircleAA_HiRes+0x154>
 80103ac:	fb0b f30b 	mul.w	r3, fp, fp
 80103b0:	fb04 3204 	mla	r2, r4, r4, r3
 80103b4:	4296      	cmp	r6, r2
 80103b6:	da09      	bge.n	80103cc <GL_DrawCircleAA_HiRes+0x1e0>
 80103b8:	3c01      	subs	r4, #1
 80103ba:	fb04 3204 	mla	r2, r4, r4, r3
 80103be:	4296      	cmp	r6, r2
 80103c0:	dbfa      	blt.n	80103b8 <GL_DrawCircleAA_HiRes+0x1cc>
 80103c2:	fb07 3207 	mla	r2, r7, r7, r3
 80103c6:	4590      	cmp	r8, r2
 80103c8:	da04      	bge.n	80103d4 <GL_DrawCircleAA_HiRes+0x1e8>
 80103ca:	3f01      	subs	r7, #1
 80103cc:	fb07 3207 	mla	r2, r7, r7, r3
 80103d0:	4590      	cmp	r8, r2
 80103d2:	dbfa      	blt.n	80103ca <GL_DrawCircleAA_HiRes+0x1de>
 80103d4:	4b09      	ldr	r3, [pc, #36]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 80103d6:	1bea      	subs	r2, r5, r7
 80103d8:	4651      	mov	r1, sl
 80103da:	1b28      	subs	r0, r5, r4
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	4798      	blx	r3
 80103e4:	4b05      	ldr	r3, [pc, #20]	; (80103fc <GL_DrawCircleAA_HiRes+0x210>)
 80103e6:	192a      	adds	r2, r5, r4
 80103e8:	4651      	mov	r1, sl
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	19e8      	adds	r0, r5, r7
 80103ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4798      	blx	r3
 80103f4:	e776      	b.n	80102e4 <GL_DrawCircleAA_HiRes+0xf8>
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	dda8      	ble.n	801034c <GL_DrawCircleAA_HiRes+0x160>
 80103fa:	e77d      	b.n	80102f8 <GL_DrawCircleAA_HiRes+0x10c>
 80103fc:	20000018 	.word	0x20000018

08010400 <GUI_AA_FillCircle>:
 8010400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010404:	4f30      	ldr	r7, [pc, #192]	; (80104c8 <GUI_AA_FillCircle+0xc8>)
 8010406:	b083      	sub	sp, #12
 8010408:	4605      	mov	r5, r0
 801040a:	460c      	mov	r4, r1
 801040c:	4616      	mov	r6, r2
 801040e:	f007 fc93 	bl	8017d38 <GUI_Lock>
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80104cc <GUI_AA_FillCircle+0xcc>
 8010418:	b1db      	cbz	r3, 8010452 <GUI_AA_FillCircle+0x52>
 801041a:	f8d9 3000 	ldr.w	r3, [r9]
 801041e:	2000      	movs	r0, #0
 8010420:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010424:	4415      	add	r5, r2
 8010426:	441c      	add	r4, r3
 8010428:	f00f ff5e 	bl	80202e8 <WM__InitIVRSearch>
 801042c:	b188      	cbz	r0, 8010452 <GUI_AA_FillCircle+0x52>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	4632      	mov	r2, r6
 8010432:	4621      	mov	r1, r4
 8010434:	4628      	mov	r0, r5
 8010436:	4798      	blx	r3
 8010438:	4680      	mov	r8, r0
 801043a:	f00f fe2b 	bl	8020094 <WM__GetNextIVR>
 801043e:	2800      	cmp	r0, #0
 8010440:	d1f5      	bne.n	801042e <GUI_AA_FillCircle+0x2e>
 8010442:	f1b8 0f00 	cmp.w	r8, #0
 8010446:	d104      	bne.n	8010452 <GUI_AA_FillCircle+0x52>
 8010448:	f007 fc6c 	bl	8017d24 <GUI_Unlock>
 801044c:	b003      	add	sp, #12
 801044e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010452:	f011 f965 	bl	8021720 <WM__GetOrgX_AA>
 8010456:	4405      	add	r5, r0
 8010458:	f011 f970 	bl	802173c <WM__GetOrgY_AA>
 801045c:	f8d9 3000 	ldr.w	r3, [r9]
 8010460:	4404      	add	r4, r0
 8010462:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010466:	b332      	cbz	r2, 80104b6 <GUI_AA_FillCircle+0xb6>
 8010468:	1ba8      	subs	r0, r5, r6
 801046a:	f000 fd2f 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 801046e:	f8ad 0000 	strh.w	r0, [sp]
 8010472:	19a8      	adds	r0, r5, r6
 8010474:	f000 fd2a 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010478:	f8ad 0004 	strh.w	r0, [sp, #4]
 801047c:	1ba0      	subs	r0, r4, r6
 801047e:	f000 fd25 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010482:	f8ad 0002 	strh.w	r0, [sp, #2]
 8010486:	19a0      	adds	r0, r4, r6
 8010488:	f000 fd20 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 801048c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010490:	4668      	mov	r0, sp
 8010492:	f00f ff29 	bl	80202e8 <WM__InitIVRSearch>
 8010496:	2800      	cmp	r0, #0
 8010498:	d0d6      	beq.n	8010448 <GUI_AA_FillCircle+0x48>
 801049a:	4632      	mov	r2, r6
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f7ff fe28 	bl	80100f4 <GL_FillCircleAA_HiRes>
 80104a4:	f00f fdf6 	bl	8020094 <WM__GetNextIVR>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d1f6      	bne.n	801049a <GUI_AA_FillCircle+0x9a>
 80104ac:	f007 fc3a 	bl	8017d24 <GUI_Unlock>
 80104b0:	b003      	add	sp, #12
 80104b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104b6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80104ba:	fb03 f505 	mul.w	r5, r3, r5
 80104be:	fb03 f404 	mul.w	r4, r3, r4
 80104c2:	fb03 f606 	mul.w	r6, r3, r6
 80104c6:	e7cf      	b.n	8010468 <GUI_AA_FillCircle+0x68>
 80104c8:	2000017c 	.word	0x2000017c
 80104cc:	20000018 	.word	0x20000018

080104d0 <GUI_AA_DrawCircle>:
 80104d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104d4:	4f30      	ldr	r7, [pc, #192]	; (8010598 <GUI_AA_DrawCircle+0xc8>)
 80104d6:	b083      	sub	sp, #12
 80104d8:	4605      	mov	r5, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	4616      	mov	r6, r2
 80104de:	f007 fc2b 	bl	8017d38 <GUI_Lock>
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801059c <GUI_AA_DrawCircle+0xcc>
 80104e8:	b1db      	cbz	r3, 8010522 <GUI_AA_DrawCircle+0x52>
 80104ea:	f8d9 3000 	ldr.w	r3, [r9]
 80104ee:	2000      	movs	r0, #0
 80104f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104f4:	4415      	add	r5, r2
 80104f6:	441c      	add	r4, r3
 80104f8:	f00f fef6 	bl	80202e8 <WM__InitIVRSearch>
 80104fc:	b188      	cbz	r0, 8010522 <GUI_AA_DrawCircle+0x52>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4632      	mov	r2, r6
 8010502:	4621      	mov	r1, r4
 8010504:	4628      	mov	r0, r5
 8010506:	4798      	blx	r3
 8010508:	4680      	mov	r8, r0
 801050a:	f00f fdc3 	bl	8020094 <WM__GetNextIVR>
 801050e:	2800      	cmp	r0, #0
 8010510:	d1f5      	bne.n	80104fe <GUI_AA_DrawCircle+0x2e>
 8010512:	f1b8 0f00 	cmp.w	r8, #0
 8010516:	d104      	bne.n	8010522 <GUI_AA_DrawCircle+0x52>
 8010518:	f007 fc04 	bl	8017d24 <GUI_Unlock>
 801051c:	b003      	add	sp, #12
 801051e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010522:	f011 f8fd 	bl	8021720 <WM__GetOrgX_AA>
 8010526:	4405      	add	r5, r0
 8010528:	f011 f908 	bl	802173c <WM__GetOrgY_AA>
 801052c:	f8d9 3000 	ldr.w	r3, [r9]
 8010530:	4404      	add	r4, r0
 8010532:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010536:	b332      	cbz	r2, 8010586 <GUI_AA_DrawCircle+0xb6>
 8010538:	1ba8      	subs	r0, r5, r6
 801053a:	f000 fcc7 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 801053e:	f8ad 0000 	strh.w	r0, [sp]
 8010542:	19a8      	adds	r0, r5, r6
 8010544:	f000 fcc2 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010548:	f8ad 0004 	strh.w	r0, [sp, #4]
 801054c:	1ba0      	subs	r0, r4, r6
 801054e:	f000 fcbd 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010552:	f8ad 0002 	strh.w	r0, [sp, #2]
 8010556:	19a0      	adds	r0, r4, r6
 8010558:	f000 fcb8 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 801055c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010560:	4668      	mov	r0, sp
 8010562:	f00f fec1 	bl	80202e8 <WM__InitIVRSearch>
 8010566:	2800      	cmp	r0, #0
 8010568:	d0d6      	beq.n	8010518 <GUI_AA_DrawCircle+0x48>
 801056a:	4632      	mov	r2, r6
 801056c:	4621      	mov	r1, r4
 801056e:	4628      	mov	r0, r5
 8010570:	f7ff fe3c 	bl	80101ec <GL_DrawCircleAA_HiRes>
 8010574:	f00f fd8e 	bl	8020094 <WM__GetNextIVR>
 8010578:	2800      	cmp	r0, #0
 801057a:	d1f6      	bne.n	801056a <GUI_AA_DrawCircle+0x9a>
 801057c:	f007 fbd2 	bl	8017d24 <GUI_Unlock>
 8010580:	b003      	add	sp, #12
 8010582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010586:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801058a:	fb03 f505 	mul.w	r5, r3, r5
 801058e:	fb03 f404 	mul.w	r4, r3, r4
 8010592:	fb03 f606 	mul.w	r6, r3, r6
 8010596:	e7cf      	b.n	8010538 <GUI_AA_DrawCircle+0x68>
 8010598:	2000017c 	.word	0x2000017c
 801059c:	20000018 	.word	0x20000018

080105a0 <GUI_AA_DrawRoundedRect.part.0>:
 80105a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a4:	f8df 9404 	ldr.w	r9, [pc, #1028]	; 80109ac <GUI_AA_DrawRoundedRect.part.0+0x40c>
 80105a8:	b095      	sub	sp, #84	; 0x54
 80105aa:	4616      	mov	r6, r2
 80105ac:	469b      	mov	fp, r3
 80105ae:	4607      	mov	r7, r0
 80105b0:	460d      	mov	r5, r1
 80105b2:	f007 fbc1 	bl	8017d38 <GUI_Lock>
 80105b6:	f8d9 3000 	ldr.w	r3, [r9]
 80105ba:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80105be:	2a00      	cmp	r2, #0
 80105c0:	f040 81f0 	bne.w	80109a4 <GUI_AA_DrawRoundedRect.part.0+0x404>
 80105c4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80105c8:	2204      	movs	r2, #4
 80105ca:	9111      	str	r1, [sp, #68]	; 0x44
 80105cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80105d0:	f011 f8a6 	bl	8021720 <WM__GetOrgX_AA>
 80105d4:	4407      	add	r7, r0
 80105d6:	f011 f8b1 	bl	802173c <WM__GetOrgY_AA>
 80105da:	4405      	add	r5, r0
 80105dc:	f011 f8a0 	bl	8021720 <WM__GetOrgX_AA>
 80105e0:	4406      	add	r6, r0
 80105e2:	f011 f8ab 	bl	802173c <WM__GetOrgY_AA>
 80105e6:	f8d9 3000 	ldr.w	r3, [r9]
 80105ea:	4483      	add	fp, r0
 80105ec:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80105f0:	b96a      	cbnz	r2, 801060e <GUI_AA_DrawRoundedRect.part.0+0x6e>
 80105f2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80105f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80105f8:	fb03 f707 	mul.w	r7, r3, r7
 80105fc:	fb03 f202 	mul.w	r2, r3, r2
 8010600:	fb03 f505 	mul.w	r5, r3, r5
 8010604:	fb03 f606 	mul.w	r6, r3, r6
 8010608:	fb03 fb0b 	mul.w	fp, r3, fp
 801060c:	921e      	str	r2, [sp, #120]	; 0x78
 801060e:	f003 f89f 	bl	8013750 <GUI_GetPenSize>
 8010612:	f8d9 3000 	ldr.w	r3, [r9]
 8010616:	f893 a068 	ldrb.w	sl, [r3, #104]	; 0x68
 801061a:	fb00 f00a 	mul.w	r0, r0, sl
 801061e:	f10a 0301 	add.w	r3, sl, #1
 8010622:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 8010626:	105b      	asrs	r3, r3, #1
 8010628:	ea4f 0854 	mov.w	r8, r4, lsr #1
 801062c:	eb08 0106 	add.w	r1, r8, r6
 8010630:	ebc8 0707 	rsb	r7, r8, r7
 8010634:	ebc8 0205 	rsb	r2, r8, r5
 8010638:	44c3      	add	fp, r8
 801063a:	4419      	add	r1, r3
 801063c:	19d8      	adds	r0, r3, r7
 801063e:	441a      	add	r2, r3
 8010640:	445b      	add	r3, fp
 8010642:	9008      	str	r0, [sp, #32]
 8010644:	461d      	mov	r5, r3
 8010646:	930f      	str	r3, [sp, #60]	; 0x3c
 8010648:	1e4b      	subs	r3, r1, #1
 801064a:	461e      	mov	r6, r3
 801064c:	9309      	str	r3, [sp, #36]	; 0x24
 801064e:	1e53      	subs	r3, r2, #1
 8010650:	461f      	mov	r7, r3
 8010652:	930e      	str	r3, [sp, #56]	; 0x38
 8010654:	f000 fc3a 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010658:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801065c:	4630      	mov	r0, r6
 801065e:	f000 fc35 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010662:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 8010666:	4638      	mov	r0, r7
 8010668:	f000 fc30 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 801066c:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
 8010670:	4628      	mov	r0, r5
 8010672:	f000 fc2b 	bl	8010ecc <GUI_AA_HiRes2Pixel>
 8010676:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
 801067a:	a812      	add	r0, sp, #72	; 0x48
 801067c:	f00f fe34 	bl	80202e8 <WM__InitIVRSearch>
 8010680:	2800      	cmp	r0, #0
 8010682:	f000 816f 	beq.w	8010964 <GUI_AA_DrawRoundedRect.part.0+0x3c4>
 8010686:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010688:	eb08 0103 	add.w	r1, r8, r3
 801068c:	9b08      	ldr	r3, [sp, #32]
 801068e:	191a      	adds	r2, r3, r4
 8010690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010692:	eba1 015a 	sub.w	r1, r1, sl, lsr #1
 8010696:	1b1b      	subs	r3, r3, r4
 8010698:	3a01      	subs	r2, #1
 801069a:	2900      	cmp	r1, #0
 801069c:	9107      	str	r1, [sp, #28]
 801069e:	f103 0301 	add.w	r3, r3, #1
 80106a2:	9210      	str	r2, [sp, #64]	; 0x40
 80106a4:	fb01 f201 	mul.w	r2, r1, r1
 80106a8:	9807      	ldr	r0, [sp, #28]
 80106aa:	9303      	str	r3, [sp, #12]
 80106ac:	eba1 0304 	sub.w	r3, r1, r4
 80106b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80106b2:	930a      	str	r3, [sp, #40]	; 0x28
 80106b4:	460b      	mov	r3, r1
 80106b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80106b8:	bfb8      	it	lt
 80106ba:	3301      	addlt	r3, #1
 80106bc:	2900      	cmp	r1, #0
 80106be:	eb02 0763 	add.w	r7, r2, r3, asr #1
 80106c2:	460b      	mov	r3, r1
 80106c4:	fb01 f201 	mul.w	r2, r1, r1
 80106c8:	eb04 0100 	add.w	r1, r4, r0
 80106cc:	bfb8      	it	lt
 80106ce:	3301      	addlt	r3, #1
 80106d0:	910d      	str	r1, [sp, #52]	; 0x34
 80106d2:	eb02 0863 	add.w	r8, r2, r3, asr #1
 80106d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106d8:	1a13      	subs	r3, r2, r0
 80106da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80106de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106e0:	4413      	add	r3, r2
 80106e2:	9304      	str	r3, [sp, #16]
 80106e4:	1c4b      	adds	r3, r1, #1
 80106e6:	930c      	str	r3, [sp, #48]	; 0x30
 80106e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106ea:	9808      	ldr	r0, [sp, #32]
 80106ec:	f000 fb2e 	bl	8010d4c <GUI_AA_Init_HiRes>
 80106f0:	f8d9 3000 	ldr.w	r3, [r9]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 8142 	beq.w	8010980 <GUI_AA_DrawRoundedRect.part.0+0x3e0>
 80106fc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010700:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010702:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010706:	428a      	cmp	r2, r1
 8010708:	bfa8      	it	ge
 801070a:	460a      	movge	r2, r1
 801070c:	9201      	str	r2, [sp, #4]
 801070e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010710:	4293      	cmp	r3, r2
 8010712:	bfb8      	it	lt
 8010714:	4613      	movlt	r3, r2
 8010716:	9302      	str	r3, [sp, #8]
 8010718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801071a:	2b00      	cmp	r3, #0
 801071c:	f340 8138 	ble.w	8010990 <GUI_AA_DrawRoundedRect.part.0+0x3f0>
 8010720:	9a07      	ldr	r2, [sp, #28]
 8010722:	461d      	mov	r5, r3
 8010724:	9908      	ldr	r1, [sp, #32]
 8010726:	f04f 0a00 	mov.w	sl, #0
 801072a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801072c:	4614      	mov	r4, r2
 801072e:	4411      	add	r1, r2
 8010730:	9105      	str	r1, [sp, #20]
 8010732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010734:	ebc2 0b01 	rsb	fp, r2, r1
 8010738:	f8cd b018 	str.w	fp, [sp, #24]
 801073c:	469b      	mov	fp, r3
 801073e:	9b02      	ldr	r3, [sp, #8]
 8010740:	429e      	cmp	r6, r3
 8010742:	db2c      	blt.n	801079e <GUI_AA_DrawRoundedRect.part.0+0x1fe>
 8010744:	9b01      	ldr	r3, [sp, #4]
 8010746:	429e      	cmp	r6, r3
 8010748:	dc29      	bgt.n	801079e <GUI_AA_DrawRoundedRect.part.0+0x1fe>
 801074a:	fb0a f30a 	mul.w	r3, sl, sl
 801074e:	fb04 3204 	mla	r2, r4, r4, r3
 8010752:	42ba      	cmp	r2, r7
 8010754:	dd09      	ble.n	801076a <GUI_AA_DrawRoundedRect.part.0+0x1ca>
 8010756:	3c01      	subs	r4, #1
 8010758:	fb04 3204 	mla	r2, r4, r4, r3
 801075c:	42ba      	cmp	r2, r7
 801075e:	dcfa      	bgt.n	8010756 <GUI_AA_DrawRoundedRect.part.0+0x1b6>
 8010760:	fb05 3205 	mla	r2, r5, r5, r3
 8010764:	4542      	cmp	r2, r8
 8010766:	dd04      	ble.n	8010772 <GUI_AA_DrawRoundedRect.part.0+0x1d2>
 8010768:	3d01      	subs	r5, #1
 801076a:	fb05 3205 	mla	r2, r5, r5, r3
 801076e:	4542      	cmp	r2, r8
 8010770:	dcfa      	bgt.n	8010768 <GUI_AA_DrawRoundedRect.part.0+0x1c8>
 8010772:	f8d9 3000 	ldr.w	r3, [r9]
 8010776:	4631      	mov	r1, r6
 8010778:	9a04      	ldr	r2, [sp, #16]
 801077a:	9805      	ldr	r0, [sp, #20]
 801077c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801077e:	1b52      	subs	r2, r2, r5
 8010780:	1b00      	subs	r0, r0, r4
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4798      	blx	r3
 8010786:	9a03      	ldr	r2, [sp, #12]
 8010788:	f8d9 3000 	ldr.w	r3, [r9]
 801078c:	4631      	mov	r1, r6
 801078e:	ebcb 0002 	rsb	r0, fp, r2
 8010792:	9a06      	ldr	r2, [sp, #24]
 8010794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010796:	4422      	add	r2, r4
 8010798:	4428      	add	r0, r5
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4798      	blx	r3
 801079e:	f10a 0a01 	add.w	sl, sl, #1
 80107a2:	3e01      	subs	r6, #1
 80107a4:	45da      	cmp	sl, fp
 80107a6:	d1ca      	bne.n	801073e <GUI_AA_DrawRoundedRect.part.0+0x19e>
 80107a8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80107ac:	9b07      	ldr	r3, [sp, #28]
 80107ae:	455b      	cmp	r3, fp
 80107b0:	dd2f      	ble.n	8010812 <GUI_AA_DrawRoundedRect.part.0+0x272>
 80107b2:	461a      	mov	r2, r3
 80107b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80107ba:	ebcb 0503 	rsb	r5, fp, r3
 80107be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c0:	4690      	mov	r8, r2
 80107c2:	4619      	mov	r1, r3
 80107c4:	ebc2 0a01 	rsb	sl, r2, r1
 80107c8:	9908      	ldr	r1, [sp, #32]
 80107ca:	188e      	adds	r6, r1, r2
 80107cc:	9605      	str	r6, [sp, #20]
 80107ce:	9e02      	ldr	r6, [sp, #8]
 80107d0:	42ae      	cmp	r6, r5
 80107d2:	dc17      	bgt.n	8010804 <GUI_AA_DrawRoundedRect.part.0+0x264>
 80107d4:	9b01      	ldr	r3, [sp, #4]
 80107d6:	42ab      	cmp	r3, r5
 80107d8:	db14      	blt.n	8010804 <GUI_AA_DrawRoundedRect.part.0+0x264>
 80107da:	fb0b f20b 	mul.w	r2, fp, fp
 80107de:	fb04 2304 	mla	r3, r4, r4, r2
 80107e2:	42bb      	cmp	r3, r7
 80107e4:	dd04      	ble.n	80107f0 <GUI_AA_DrawRoundedRect.part.0+0x250>
 80107e6:	3c01      	subs	r4, #1
 80107e8:	fb04 2304 	mla	r3, r4, r4, r2
 80107ec:	42bb      	cmp	r3, r7
 80107ee:	dcfa      	bgt.n	80107e6 <GUI_AA_DrawRoundedRect.part.0+0x246>
 80107f0:	f8d9 3000 	ldr.w	r3, [r9]
 80107f4:	eb0a 0204 	add.w	r2, sl, r4
 80107f8:	9805      	ldr	r0, [sp, #20]
 80107fa:	4629      	mov	r1, r5
 80107fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107fe:	1b00      	subs	r0, r0, r4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4798      	blx	r3
 8010804:	f10b 0b01 	add.w	fp, fp, #1
 8010808:	3d01      	subs	r5, #1
 801080a:	45d8      	cmp	r8, fp
 801080c:	d1e0      	bne.n	80107d0 <GUI_AA_DrawRoundedRect.part.0+0x230>
 801080e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010816:	4293      	cmp	r3, r2
 8010818:	da1b      	bge.n	8010852 <GUI_AA_DrawRoundedRect.part.0+0x2b2>
 801081a:	9705      	str	r7, [sp, #20]
 801081c:	461c      	mov	r4, r3
 801081e:	4693      	mov	fp, r2
 8010820:	9d08      	ldr	r5, [sp, #32]
 8010822:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010824:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010828:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801082a:	f8d9 3000 	ldr.w	r3, [r9]
 801082e:	4621      	mov	r1, r4
 8010830:	463a      	mov	r2, r7
 8010832:	4628      	mov	r0, r5
 8010834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	4798      	blx	r3
 801083a:	f8d9 3000 	ldr.w	r3, [r9]
 801083e:	4621      	mov	r1, r4
 8010840:	3401      	adds	r4, #1
 8010842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010844:	4632      	mov	r2, r6
 8010846:	4650      	mov	r0, sl
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4798      	blx	r3
 801084c:	455c      	cmp	r4, fp
 801084e:	d1ec      	bne.n	801082a <GUI_AA_DrawRoundedRect.part.0+0x28a>
 8010850:	9f05      	ldr	r7, [sp, #20]
 8010852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010854:	2b00      	cmp	r3, #0
 8010856:	f340 80a0 	ble.w	801099a <GUI_AA_DrawRoundedRect.part.0+0x3fa>
 801085a:	4619      	mov	r1, r3
 801085c:	461d      	mov	r5, r3
 801085e:	9a08      	ldr	r2, [sp, #32]
 8010860:	f04f 0a00 	mov.w	sl, #0
 8010864:	9b07      	ldr	r3, [sp, #28]
 8010866:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010868:	441a      	add	r2, r3
 801086a:	461c      	mov	r4, r3
 801086c:	9205      	str	r2, [sp, #20]
 801086e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010870:	ebc3 0b02 	rsb	fp, r3, r2
 8010874:	f8cd b018 	str.w	fp, [sp, #24]
 8010878:	468b      	mov	fp, r1
 801087a:	9b02      	ldr	r3, [sp, #8]
 801087c:	42b3      	cmp	r3, r6
 801087e:	dc2c      	bgt.n	80108da <GUI_AA_DrawRoundedRect.part.0+0x33a>
 8010880:	9b01      	ldr	r3, [sp, #4]
 8010882:	42b3      	cmp	r3, r6
 8010884:	db29      	blt.n	80108da <GUI_AA_DrawRoundedRect.part.0+0x33a>
 8010886:	fb0a f30a 	mul.w	r3, sl, sl
 801088a:	fb04 3204 	mla	r2, r4, r4, r3
 801088e:	42ba      	cmp	r2, r7
 8010890:	dd09      	ble.n	80108a6 <GUI_AA_DrawRoundedRect.part.0+0x306>
 8010892:	3c01      	subs	r4, #1
 8010894:	fb04 3204 	mla	r2, r4, r4, r3
 8010898:	42ba      	cmp	r2, r7
 801089a:	dcfa      	bgt.n	8010892 <GUI_AA_DrawRoundedRect.part.0+0x2f2>
 801089c:	fb05 3205 	mla	r2, r5, r5, r3
 80108a0:	4542      	cmp	r2, r8
 80108a2:	dd04      	ble.n	80108ae <GUI_AA_DrawRoundedRect.part.0+0x30e>
 80108a4:	3d01      	subs	r5, #1
 80108a6:	fb05 3205 	mla	r2, r5, r5, r3
 80108aa:	4542      	cmp	r2, r8
 80108ac:	dcfa      	bgt.n	80108a4 <GUI_AA_DrawRoundedRect.part.0+0x304>
 80108ae:	f8d9 3000 	ldr.w	r3, [r9]
 80108b2:	4631      	mov	r1, r6
 80108b4:	9a04      	ldr	r2, [sp, #16]
 80108b6:	9805      	ldr	r0, [sp, #20]
 80108b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108ba:	1b52      	subs	r2, r2, r5
 80108bc:	1b00      	subs	r0, r0, r4
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4798      	blx	r3
 80108c2:	9a03      	ldr	r2, [sp, #12]
 80108c4:	f8d9 3000 	ldr.w	r3, [r9]
 80108c8:	4631      	mov	r1, r6
 80108ca:	ebcb 0002 	rsb	r0, fp, r2
 80108ce:	9a06      	ldr	r2, [sp, #24]
 80108d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108d2:	4422      	add	r2, r4
 80108d4:	4428      	add	r0, r5
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4798      	blx	r3
 80108da:	f10a 0a01 	add.w	sl, sl, #1
 80108de:	3601      	adds	r6, #1
 80108e0:	45da      	cmp	sl, fp
 80108e2:	d1ca      	bne.n	801087a <GUI_AA_DrawRoundedRect.part.0+0x2da>
 80108e4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80108e8:	9b07      	ldr	r3, [sp, #28]
 80108ea:	455b      	cmp	r3, fp
 80108ec:	dd33      	ble.n	8010956 <GUI_AA_DrawRoundedRect.part.0+0x3b6>
 80108ee:	461a      	mov	r2, r3
 80108f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108f2:	f8cd 8014 	str.w	r8, [sp, #20]
 80108f6:	eb0b 0503 	add.w	r5, fp, r3
 80108fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010900:	4619      	mov	r1, r3
 8010902:	ebc2 0a01 	rsb	sl, r2, r1
 8010906:	9908      	ldr	r1, [sp, #32]
 8010908:	188e      	adds	r6, r1, r2
 801090a:	f8cd a008 	str.w	sl, [sp, #8]
 801090e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010912:	9601      	str	r6, [sp, #4]
 8010914:	4616      	mov	r6, r2
 8010916:	45a8      	cmp	r8, r5
 8010918:	dc16      	bgt.n	8010948 <GUI_AA_DrawRoundedRect.part.0+0x3a8>
 801091a:	45aa      	cmp	sl, r5
 801091c:	db14      	blt.n	8010948 <GUI_AA_DrawRoundedRect.part.0+0x3a8>
 801091e:	fb0b f20b 	mul.w	r2, fp, fp
 8010922:	fb04 2304 	mla	r3, r4, r4, r2
 8010926:	42bb      	cmp	r3, r7
 8010928:	dd04      	ble.n	8010934 <GUI_AA_DrawRoundedRect.part.0+0x394>
 801092a:	3c01      	subs	r4, #1
 801092c:	fb04 2304 	mla	r3, r4, r4, r2
 8010930:	42bb      	cmp	r3, r7
 8010932:	dcfa      	bgt.n	801092a <GUI_AA_DrawRoundedRect.part.0+0x38a>
 8010934:	f8d9 3000 	ldr.w	r3, [r9]
 8010938:	4629      	mov	r1, r5
 801093a:	9a02      	ldr	r2, [sp, #8]
 801093c:	9801      	ldr	r0, [sp, #4]
 801093e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010940:	4422      	add	r2, r4
 8010942:	1b00      	subs	r0, r0, r4
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4798      	blx	r3
 8010948:	f10b 0b01 	add.w	fp, fp, #1
 801094c:	3501      	adds	r5, #1
 801094e:	455e      	cmp	r6, fp
 8010950:	d1e1      	bne.n	8010916 <GUI_AA_DrawRoundedRect.part.0+0x376>
 8010952:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010956:	f000 fac7 	bl	8010ee8 <GUI_AA_Exit>
 801095a:	f00f fb9b 	bl	8020094 <WM__GetNextIVR>
 801095e:	2800      	cmp	r0, #0
 8010960:	f47f aec2 	bne.w	80106e8 <GUI_AA_DrawRoundedRect.part.0+0x148>
 8010964:	f8d9 3000 	ldr.w	r3, [r9]
 8010968:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801096c:	b91a      	cbnz	r2, 8010976 <GUI_AA_DrawRoundedRect.part.0+0x3d6>
 801096e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8010972:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010976:	f007 f9d5 	bl	8017d24 <GUI_Unlock>
 801097a:	b015      	add	sp, #84	; 0x54
 801097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010986:	9302      	str	r3, [sp, #8]
 8010988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098a:	2b00      	cmp	r3, #0
 801098c:	f73f aec8 	bgt.w	8010720 <GUI_AA_DrawRoundedRect.part.0+0x180>
 8010990:	9c07      	ldr	r4, [sp, #28]
 8010992:	f04f 0b00 	mov.w	fp, #0
 8010996:	4623      	mov	r3, r4
 8010998:	e709      	b.n	80107ae <GUI_AA_DrawRoundedRect.part.0+0x20e>
 801099a:	9c07      	ldr	r4, [sp, #28]
 801099c:	f04f 0b00 	mov.w	fp, #0
 80109a0:	4623      	mov	r3, r4
 80109a2:	e7a2      	b.n	80108ea <GUI_AA_DrawRoundedRect.part.0+0x34a>
 80109a4:	2300      	movs	r3, #0
 80109a6:	9311      	str	r3, [sp, #68]	; 0x44
 80109a8:	e612      	b.n	80105d0 <GUI_AA_DrawRoundedRect.part.0+0x30>
 80109aa:	bf00      	nop
 80109ac:	20000018 	.word	0x20000018

080109b0 <GUI_AA_DrawRoundedRect>:
 80109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b2:	9d05      	ldr	r5, [sp, #20]
 80109b4:	1a16      	subs	r6, r2, r0
 80109b6:	ebb6 0645 	subs.w	r6, r6, r5, lsl #1
 80109ba:	d409      	bmi.n	80109d0 <GUI_AA_DrawRoundedRect+0x20>
 80109bc:	006f      	lsls	r7, r5, #1
 80109be:	1a5c      	subs	r4, r3, r1
 80109c0:	468e      	mov	lr, r1
 80109c2:	1be4      	subs	r4, r4, r7
 80109c4:	2c00      	cmp	r4, #0
 80109c6:	db03      	blt.n	80109d0 <GUI_AA_DrawRoundedRect+0x20>
 80109c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80109cc:	f7ff bde8 	b.w	80105a0 <GUI_AA_DrawRoundedRect.part.0>
 80109d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109d2:	bf00      	nop

080109d4 <_FlushLine>:
 80109d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d8:	f8df a110 	ldr.w	sl, [pc, #272]	; 8010aec <_FlushLine+0x118>
 80109dc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8010afc <_FlushLine+0x128>
 80109e0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80109e4:	f8d9 3000 	ldr.w	r3, [r9]
 80109e8:	e89a 0014 	ldmia.w	sl, {r2, r4}
 80109ec:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 80109f0:	1aa4      	subs	r4, r4, r2
 80109f2:	fb15 f505 	smulbb	r5, r5, r5
 80109f6:	428c      	cmp	r4, r1
 80109f8:	bfa8      	it	ge
 80109fa:	f101 34ff 	addge.w	r4, r1, #4294967295
 80109fe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010a00:	2900      	cmp	r1, #0
 8010a02:	d06f      	beq.n	8010ae4 <_FlushLine+0x110>
 8010a04:	f8da 100c 	ldr.w	r1, [sl, #12]
 8010a08:	4b38      	ldr	r3, [pc, #224]	; (8010aec <_FlushLine+0x118>)
 8010a0a:	ebc2 0e01 	rsb	lr, r2, r1
 8010a0e:	6918      	ldr	r0, [r3, #16]
 8010a10:	4574      	cmp	r4, lr
 8010a12:	db32      	blt.n	8010a7a <_FlushLine+0xa6>
 8010a14:	ea4f 0865 	mov.w	r8, r5, asr #1
 8010a18:	270f      	movs	r7, #15
 8010a1a:	e004      	b.n	8010a26 <_FlushLine+0x52>
 8010a1c:	f10e 0601 	add.w	r6, lr, #1
 8010a20:	42b4      	cmp	r4, r6
 8010a22:	46b6      	mov	lr, r6
 8010a24:	db29      	blt.n	8010a7a <_FlushLine+0xa6>
 8010a26:	f810 300e 	ldrb.w	r3, [r0, lr]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d0f6      	beq.n	8010a1c <_FlushLine+0x48>
 8010a2e:	429d      	cmp	r5, r3
 8010a30:	d136      	bne.n	8010aa0 <_FlushLine+0xcc>
 8010a32:	4574      	cmp	r4, lr
 8010a34:	f10e 0601 	add.w	r6, lr, #1
 8010a38:	dd46      	ble.n	8010ac8 <_FlushLine+0xf4>
 8010a3a:	5d83      	ldrb	r3, [r0, r6]
 8010a3c:	4430      	add	r0, r6
 8010a3e:	429d      	cmp	r5, r3
 8010a40:	d142      	bne.n	8010ac8 <_FlushLine+0xf4>
 8010a42:	4673      	mov	r3, lr
 8010a44:	e003      	b.n	8010a4e <_FlushLine+0x7a>
 8010a46:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8010a4a:	428d      	cmp	r5, r1
 8010a4c:	d13a      	bne.n	8010ac4 <_FlushLine+0xf0>
 8010a4e:	3301      	adds	r3, #1
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d1f8      	bne.n	8010a46 <_FlushLine+0x72>
 8010a54:	4623      	mov	r3, r4
 8010a56:	f8da 6018 	ldr.w	r6, [sl, #24]
 8010a5a:	eb0e 0002 	add.w	r0, lr, r2
 8010a5e:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010a62:	441a      	add	r2, r3
 8010a64:	f8d6 b000 	ldr.w	fp, [r6]
 8010a68:	1c5e      	adds	r6, r3, #1
 8010a6a:	47d8      	blx	fp
 8010a6c:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010a70:	42b4      	cmp	r4, r6
 8010a72:	f8da 2000 	ldr.w	r2, [sl]
 8010a76:	46b6      	mov	lr, r6
 8010a78:	dad5      	bge.n	8010a26 <_FlushLine+0x52>
 8010a7a:	f8da 301c 	ldr.w	r3, [sl, #28]
 8010a7e:	2100      	movs	r1, #0
 8010a80:	4c1b      	ldr	r4, [pc, #108]	; (8010af0 <_FlushLine+0x11c>)
 8010a82:	1a9a      	subs	r2, r3, r2
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	3201      	adds	r2, #1
 8010a88:	4798      	blx	r3
 8010a8a:	4b1a      	ldr	r3, [pc, #104]	; (8010af4 <_FlushLine+0x120>)
 8010a8c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8010a90:	f8ca 3014 	str.w	r3, [sl, #20]
 8010a94:	f8ca 3004 	str.w	r3, [sl, #4]
 8010a98:	f8ca 200c 	str.w	r2, [sl, #12]
 8010a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa0:	fb17 8303 	smlabb	r3, r7, r3, r8
 8010aa4:	eb0e 0002 	add.w	r0, lr, r2
 8010aa8:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010aac:	f10e 0601 	add.w	r6, lr, #1
 8010ab0:	fb93 f2f5 	sdiv	r2, r3, r5
 8010ab4:	b2d2      	uxtb	r2, r2
 8010ab6:	f009 fb49 	bl	801a14c <LCD_SetPixelAA4_Trans>
 8010aba:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010abe:	f8da 2000 	ldr.w	r2, [sl]
 8010ac2:	e7ad      	b.n	8010a20 <_FlushLine+0x4c>
 8010ac4:	4573      	cmp	r3, lr
 8010ac6:	d1c6      	bne.n	8010a56 <_FlushLine+0x82>
 8010ac8:	f8d9 3000 	ldr.w	r3, [r9]
 8010acc:	eb0e 0002 	add.w	r0, lr, r2
 8010ad0:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4798      	blx	r3
 8010ada:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010ade:	f8da 2000 	ldr.w	r2, [sl]
 8010ae2:	e79d      	b.n	8010a20 <_FlushLine+0x4c>
 8010ae4:	4904      	ldr	r1, [pc, #16]	; (8010af8 <_FlushLine+0x124>)
 8010ae6:	66d9      	str	r1, [r3, #108]	; 0x6c
 8010ae8:	e78c      	b.n	8010a04 <_FlushLine+0x30>
 8010aea:	bf00      	nop
 8010aec:	20000184 	.word	0x20000184
 8010af0:	20000050 	.word	0x20000050
 8010af4:	ffffc001 	.word	0xffffc001
 8010af8:	0801a14d 	.word	0x0801a14d
 8010afc:	20000018 	.word	0x20000018

08010b00 <_OnExit>:
 8010b00:	b510      	push	{r4, lr}
 8010b02:	4c03      	ldr	r4, [pc, #12]	; (8010b10 <_OnExit+0x10>)
 8010b04:	6a20      	ldr	r0, [r4, #32]
 8010b06:	f001 fdaf 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	6223      	str	r3, [r4, #32]
 8010b0e:	bd10      	pop	{r4, pc}
 8010b10:	20000184 	.word	0x20000184

08010b14 <_DrawHLine>:
 8010b14:	4282      	cmp	r2, r0
 8010b16:	db7a      	blt.n	8010c0e <_DrawHLine+0xfa>
 8010b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b1c:	4d41      	ldr	r5, [pc, #260]	; (8010c24 <_DrawHLine+0x110>)
 8010b1e:	4614      	mov	r4, r2
 8010b20:	4680      	mov	r8, r0
 8010b22:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010c28 <_DrawHLine+0x114>
 8010b26:	682a      	ldr	r2, [r5, #0]
 8010b28:	460e      	mov	r6, r1
 8010b2a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010b2e:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
 8010b32:	fb91 f2f0 	sdiv	r2, r1, r0
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d008      	beq.n	8010b4c <_DrawHLine+0x38>
 8010b3a:	f7ff ff4b 	bl	80109d4 <_FlushLine>
 8010b3e:	682b      	ldr	r3, [r5, #0]
 8010b40:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 8010b44:	fb96 f6f0 	sdiv	r6, r6, r0
 8010b48:	f8c9 6014 	str.w	r6, [r9, #20]
 8010b4c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8010b50:	4935      	ldr	r1, [pc, #212]	; (8010c28 <_DrawHLine+0x114>)
 8010b52:	f8d9 7000 	ldr.w	r7, [r9]
 8010b56:	fb98 f3f0 	sdiv	r3, r8, r0
 8010b5a:	fb94 f6f0 	sdiv	r6, r4, r0
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010b64:	bfb8      	it	lt
 8010b66:	60cb      	strlt	r3, [r1, #12]
 8010b68:	4296      	cmp	r6, r2
 8010b6a:	492f      	ldr	r1, [pc, #188]	; (8010c28 <_DrawHLine+0x114>)
 8010b6c:	4a2e      	ldr	r2, [pc, #184]	; (8010c28 <_DrawHLine+0x114>)
 8010b6e:	bfc8      	it	gt
 8010b70:	604e      	strgt	r6, [r1, #4]
 8010b72:	42bb      	cmp	r3, r7
 8010b74:	69d2      	ldr	r2, [r2, #28]
 8010b76:	da41      	bge.n	8010bfc <_DrawHLine+0xe8>
 8010b78:	4296      	cmp	r6, r2
 8010b7a:	fb00 f807 	mul.w	r8, r0, r7
 8010b7e:	dc3f      	bgt.n	8010c00 <_DrawHLine+0xec>
 8010b80:	4544      	cmp	r4, r8
 8010b82:	db42      	blt.n	8010c0a <_DrawHLine+0xf6>
 8010b84:	fb98 f3f0 	sdiv	r3, r8, r0
 8010b88:	fb94 f6f0 	sdiv	r6, r4, r0
 8010b8c:	f8d9 9010 	ldr.w	r9, [r9, #16]
 8010b90:	ebc7 0c03 	rsb	ip, r7, r3
 8010b94:	1af2      	subs	r2, r6, r3
 8010b96:	eb09 010c 	add.w	r1, r9, ip
 8010b9a:	d039      	beq.n	8010c10 <_DrawHLine+0xfc>
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	f819 a00c 	ldrb.w	sl, [r9, ip]
 8010ba2:	2a01      	cmp	r2, #1
 8010ba4:	f101 0e01 	add.w	lr, r1, #1
 8010ba8:	fb13 f300 	smulbb	r3, r3, r0
 8010bac:	ebc8 0003 	rsb	r0, r8, r3
 8010bb0:	4450      	add	r0, sl
 8010bb2:	f809 000c 	strb.w	r0, [r9, ip]
 8010bb6:	dd0e      	ble.n	8010bd6 <_DrawHLine+0xc2>
 8010bb8:	eb01 0c02 	add.w	ip, r1, r2
 8010bbc:	4673      	mov	r3, lr
 8010bbe:	6828      	ldr	r0, [r5, #0]
 8010bc0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010bc4:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 8010bc8:	4563      	cmp	r3, ip
 8010bca:	4401      	add	r1, r0
 8010bcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010bd0:	d1f5      	bne.n	8010bbe <_DrawHLine+0xaa>
 8010bd2:	3a01      	subs	r2, #1
 8010bd4:	4496      	add	lr, r2
 8010bd6:	682b      	ldr	r3, [r5, #0]
 8010bd8:	2f00      	cmp	r7, #0
 8010bda:	f104 0401 	add.w	r4, r4, #1
 8010bde:	f89e 1000 	ldrb.w	r1, [lr]
 8010be2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010be6:	bfb8      	it	lt
 8010be8:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8010bec:	fb13 f306 	smulbb	r3, r3, r6
 8010bf0:	1ae3      	subs	r3, r4, r3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	f88e 3000 	strb.w	r3, [lr]
 8010bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bfc:	4296      	cmp	r6, r2
 8010bfe:	ddc5      	ble.n	8010b8c <_DrawHLine+0x78>
 8010c00:	fb02 0200 	mla	r2, r2, r0, r0
 8010c04:	1e54      	subs	r4, r2, #1
 8010c06:	4544      	cmp	r4, r8
 8010c08:	dabc      	bge.n	8010b84 <_DrawHLine+0x70>
 8010c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0e:	4770      	bx	lr
 8010c10:	1c60      	adds	r0, r4, #1
 8010c12:	f819 300c 	ldrb.w	r3, [r9, ip]
 8010c16:	ebc8 0000 	rsb	r0, r8, r0
 8010c1a:	4418      	add	r0, r3
 8010c1c:	f809 000c 	strb.w	r0, [r9, ip]
 8010c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c24:	20000018 	.word	0x20000018
 8010c28:	20000184 	.word	0x20000184

08010c2c <GUI_AA_Init>:
 8010c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c30:	4c3d      	ldr	r4, [pc, #244]	; (8010d28 <GUI_AA_Init+0xfc>)
 8010c32:	4606      	mov	r6, r0
 8010c34:	460d      	mov	r5, r1
 8010c36:	6a27      	ldr	r7, [r4, #32]
 8010c38:	2f00      	cmp	r7, #0
 8010c3a:	d058      	beq.n	8010cee <GUI_AA_Init+0xc2>
 8010c3c:	f04f 0800 	mov.w	r8, #0
 8010c40:	4b3a      	ldr	r3, [pc, #232]	; (8010d2c <GUI_AA_Init+0x100>)
 8010c42:	68a1      	ldr	r1, [r4, #8]
 8010c44:	6818      	ldr	r0, [r3, #0]
 8010c46:	42b0      	cmp	r0, r6
 8010c48:	bfb8      	it	lt
 8010c4a:	4630      	movlt	r0, r6
 8010c4c:	1a2b      	subs	r3, r5, r0
 8010c4e:	428b      	cmp	r3, r1
 8010c50:	db01      	blt.n	8010c56 <GUI_AA_Init+0x2a>
 8010c52:	4401      	add	r1, r0
 8010c54:	1e4d      	subs	r5, r1, #1
 8010c56:	4285      	cmp	r5, r0
 8010c58:	da46      	bge.n	8010ce8 <GUI_AA_Init+0xbc>
 8010c5a:	f04f 0801 	mov.w	r8, #1
 8010c5e:	4605      	mov	r5, r0
 8010c60:	4642      	mov	r2, r8
 8010c62:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8010d44 <GUI_AA_Init+0x118>
 8010c66:	4932      	ldr	r1, [pc, #200]	; (8010d30 <GUI_AA_Init+0x104>)
 8010c68:	f8d9 e000 	ldr.w	lr, [r9]
 8010c6c:	4e31      	ldr	r6, [pc, #196]	; (8010d34 <GUI_AA_Init+0x108>)
 8010c6e:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 8010c72:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8010d48 <GUI_AA_Init+0x11c>
 8010c76:	6020      	str	r0, [r4, #0]
 8010c78:	61e5      	str	r5, [r4, #28]
 8010c7a:	680d      	ldr	r5, [r1, #0]
 8010c7c:	6127      	str	r7, [r4, #16]
 8010c7e:	61a3      	str	r3, [r4, #24]
 8010c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010c84:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 8010c88:	e886 0003 	stmia.w	r6, {r0, r1}
 8010c8c:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 8010c90:	4638      	mov	r0, r7
 8010c92:	2100      	movs	r1, #0
 8010c94:	f643 77ff 	movw	r7, #16383	; 0x3fff
 8010c98:	47a8      	blx	r5
 8010c9a:	f8d9 5000 	ldr.w	r5, [r9]
 8010c9e:	f106 0e08 	add.w	lr, r6, #8
 8010ca2:	4e25      	ldr	r6, [pc, #148]	; (8010d38 <GUI_AA_Init+0x10c>)
 8010ca4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8010ca8:	4640      	mov	r0, r8
 8010caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010cae:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 8010cb2:	3201      	adds	r2, #1
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	f8c5 e014 	str.w	lr, [r5, #20]
 8010cba:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8010cbe:	fb12 f201 	smulbb	r2, r2, r1
 8010cc2:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 8010cc6:	fb13 f301 	smulbb	r3, r3, r1
 8010cca:	fb1c f501 	smulbb	r5, ip, r1
 8010cce:	3a01      	subs	r2, #1
 8010cd0:	3b01      	subs	r3, #1
 8010cd2:	6166      	str	r6, [r4, #20]
 8010cd4:	fb1e f101 	smulbb	r1, lr, r1
 8010cd8:	6066      	str	r6, [r4, #4]
 8010cda:	8722      	strh	r2, [r4, #56]	; 0x38
 8010cdc:	8763      	strh	r3, [r4, #58]	; 0x3a
 8010cde:	86a5      	strh	r5, [r4, #52]	; 0x34
 8010ce0:	86e1      	strh	r1, [r4, #54]	; 0x36
 8010ce2:	60e7      	str	r7, [r4, #12]
 8010ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce8:	1a2a      	subs	r2, r5, r0
 8010cea:	3201      	adds	r2, #1
 8010cec:	e7b9      	b.n	8010c62 <GUI_AA_Init+0x36>
 8010cee:	4b13      	ldr	r3, [pc, #76]	; (8010d3c <GUI_AA_Init+0x110>)
 8010cf0:	6818      	ldr	r0, [r3, #0]
 8010cf2:	60a0      	str	r0, [r4, #8]
 8010cf4:	b198      	cbz	r0, 8010d1e <GUI_AA_Init+0xf2>
 8010cf6:	f001 fcc1 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8010cfa:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8010d28 <GUI_AA_Init+0xfc>
 8010cfe:	6220      	str	r0, [r4, #32]
 8010d00:	b150      	cbz	r0, 8010d18 <GUI_AA_Init+0xec>
 8010d02:	4b0f      	ldr	r3, [pc, #60]	; (8010d40 <GUI_AA_Init+0x114>)
 8010d04:	4648      	mov	r0, r9
 8010d06:	f04f 0800 	mov.w	r8, #0
 8010d0a:	f840 3f24 	str.w	r3, [r0, #36]!
 8010d0e:	f003 f80b 	bl	8013d28 <GUI__RegisterExit>
 8010d12:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8010d16:	e793      	b.n	8010c40 <GUI_AA_Init+0x14>
 8010d18:	f04f 0801 	mov.w	r8, #1
 8010d1c:	e790      	b.n	8010c40 <GUI_AA_Init+0x14>
 8010d1e:	f009 fcc9 	bl	801a6b4 <LCD_GetVXSizeMax>
 8010d22:	60a0      	str	r0, [r4, #8]
 8010d24:	e7e7      	b.n	8010cf6 <GUI_AA_Init+0xca>
 8010d26:	bf00      	nop
 8010d28:	20000184 	.word	0x20000184
 8010d2c:	20046790 	.word	0x20046790
 8010d30:	20000050 	.word	0x20000050
 8010d34:	200001b0 	.word	0x200001b0
 8010d38:	ffffc001 	.word	0xffffc001
 8010d3c:	200467d8 	.word	0x200467d8
 8010d40:	08010b01 	.word	0x08010b01
 8010d44:	20000018 	.word	0x20000018
 8010d48:	08010b15 	.word	0x08010b15

08010d4c <GUI_AA_Init_HiRes>:
 8010d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d50:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8010e6c <GUI_AA_Init_HiRes+0x120>
 8010d54:	4c3e      	ldr	r4, [pc, #248]	; (8010e50 <GUI_AA_Init_HiRes+0x104>)
 8010d56:	f8d9 3000 	ldr.w	r3, [r9]
 8010d5a:	6a27      	ldr	r7, [r4, #32]
 8010d5c:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 8010d60:	fb90 f6f5 	sdiv	r6, r0, r5
 8010d64:	fb91 f5f5 	sdiv	r5, r1, r5
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	d051      	beq.n	8010e10 <GUI_AA_Init_HiRes+0xc4>
 8010d6c:	f04f 0800 	mov.w	r8, #0
 8010d70:	4a38      	ldr	r2, [pc, #224]	; (8010e54 <GUI_AA_Init_HiRes+0x108>)
 8010d72:	68a1      	ldr	r1, [r4, #8]
 8010d74:	6810      	ldr	r0, [r2, #0]
 8010d76:	42b0      	cmp	r0, r6
 8010d78:	bfb8      	it	lt
 8010d7a:	4630      	movlt	r0, r6
 8010d7c:	1a2a      	subs	r2, r5, r0
 8010d7e:	428a      	cmp	r2, r1
 8010d80:	db01      	blt.n	8010d86 <GUI_AA_Init_HiRes+0x3a>
 8010d82:	4401      	add	r1, r0
 8010d84:	1e4d      	subs	r5, r1, #1
 8010d86:	42a8      	cmp	r0, r5
 8010d88:	dd3f      	ble.n	8010e0a <GUI_AA_Init_HiRes+0xbe>
 8010d8a:	f04f 0801 	mov.w	r8, #1
 8010d8e:	4605      	mov	r5, r0
 8010d90:	4642      	mov	r2, r8
 8010d92:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8010d94:	6020      	str	r0, [r4, #0]
 8010d96:	4830      	ldr	r0, [pc, #192]	; (8010e58 <GUI_AA_Init_HiRes+0x10c>)
 8010d98:	4e30      	ldr	r6, [pc, #192]	; (8010e5c <GUI_AA_Init_HiRes+0x110>)
 8010d9a:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8010e70 <GUI_AA_Init_HiRes+0x124>
 8010d9e:	61e5      	str	r5, [r4, #28]
 8010da0:	61a1      	str	r1, [r4, #24]
 8010da2:	6805      	ldr	r5, [r0, #0]
 8010da4:	6127      	str	r7, [r4, #16]
 8010da6:	c903      	ldmia	r1, {r0, r1}
 8010da8:	665e      	str	r6, [r3, #100]	; 0x64
 8010daa:	e886 0003 	stmia.w	r6, {r0, r1}
 8010dae:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8010db2:	4638      	mov	r0, r7
 8010db4:	2100      	movs	r1, #0
 8010db6:	4f2a      	ldr	r7, [pc, #168]	; (8010e60 <GUI_AA_Init_HiRes+0x114>)
 8010db8:	47a8      	blx	r5
 8010dba:	f8d9 5000 	ldr.w	r5, [r9]
 8010dbe:	f106 0e08 	add.w	lr, r6, #8
 8010dc2:	f643 76ff 	movw	r6, #16383	; 0x3fff
 8010dc6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8010dca:	4640      	mov	r0, r8
 8010dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010dd0:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 8010dd4:	3201      	adds	r2, #1
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	f8c5 e014 	str.w	lr, [r5, #20]
 8010ddc:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8010de0:	fb12 f201 	smulbb	r2, r2, r1
 8010de4:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 8010de8:	fb13 f301 	smulbb	r3, r3, r1
 8010dec:	fb1c f501 	smulbb	r5, ip, r1
 8010df0:	3a01      	subs	r2, #1
 8010df2:	3b01      	subs	r3, #1
 8010df4:	6167      	str	r7, [r4, #20]
 8010df6:	fb1e f101 	smulbb	r1, lr, r1
 8010dfa:	6067      	str	r7, [r4, #4]
 8010dfc:	8722      	strh	r2, [r4, #56]	; 0x38
 8010dfe:	8763      	strh	r3, [r4, #58]	; 0x3a
 8010e00:	86a5      	strh	r5, [r4, #52]	; 0x34
 8010e02:	86e1      	strh	r1, [r4, #54]	; 0x36
 8010e04:	60e6      	str	r6, [r4, #12]
 8010e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0a:	1a2a      	subs	r2, r5, r0
 8010e0c:	3201      	adds	r2, #1
 8010e0e:	e7c0      	b.n	8010d92 <GUI_AA_Init_HiRes+0x46>
 8010e10:	4b14      	ldr	r3, [pc, #80]	; (8010e64 <GUI_AA_Init_HiRes+0x118>)
 8010e12:	6818      	ldr	r0, [r3, #0]
 8010e14:	60a0      	str	r0, [r4, #8]
 8010e16:	b1b8      	cbz	r0, 8010e48 <GUI_AA_Init_HiRes+0xfc>
 8010e18:	f001 fc30 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8010e1c:	f8df a030 	ldr.w	sl, [pc, #48]	; 8010e50 <GUI_AA_Init_HiRes+0x104>
 8010e20:	6220      	str	r0, [r4, #32]
 8010e22:	b160      	cbz	r0, 8010e3e <GUI_AA_Init_HiRes+0xf2>
 8010e24:	4b10      	ldr	r3, [pc, #64]	; (8010e68 <GUI_AA_Init_HiRes+0x11c>)
 8010e26:	4650      	mov	r0, sl
 8010e28:	f04f 0800 	mov.w	r8, #0
 8010e2c:	f840 3f24 	str.w	r3, [r0, #36]!
 8010e30:	f002 ff7a 	bl	8013d28 <GUI__RegisterExit>
 8010e34:	f8da 7020 	ldr.w	r7, [sl, #32]
 8010e38:	f8d9 3000 	ldr.w	r3, [r9]
 8010e3c:	e798      	b.n	8010d70 <GUI_AA_Init_HiRes+0x24>
 8010e3e:	f8d9 3000 	ldr.w	r3, [r9]
 8010e42:	f04f 0801 	mov.w	r8, #1
 8010e46:	e793      	b.n	8010d70 <GUI_AA_Init_HiRes+0x24>
 8010e48:	f009 fc34 	bl	801a6b4 <LCD_GetVXSizeMax>
 8010e4c:	60a0      	str	r0, [r4, #8]
 8010e4e:	e7e3      	b.n	8010e18 <GUI_AA_Init_HiRes+0xcc>
 8010e50:	20000184 	.word	0x20000184
 8010e54:	20046790 	.word	0x20046790
 8010e58:	20000050 	.word	0x20000050
 8010e5c:	200001b0 	.word	0x200001b0
 8010e60:	ffffc001 	.word	0xffffc001
 8010e64:	200467d8 	.word	0x200467d8
 8010e68:	08010b01 	.word	0x08010b01
 8010e6c:	20000018 	.word	0x20000018
 8010e70:	08010b15 	.word	0x08010b15

08010e74 <GUI_AA_SetFactor>:
 8010e74:	4b0f      	ldr	r3, [pc, #60]	; (8010eb4 <GUI_AA_SetFactor+0x40>)
 8010e76:	b4f0      	push	{r4, r5, r6, r7}
 8010e78:	681c      	ldr	r4, [r3, #0]
 8010e7a:	b2c6      	uxtb	r6, r0
 8010e7c:	4d0e      	ldr	r5, [pc, #56]	; (8010eb8 <GUI_AA_SetFactor+0x44>)
 8010e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e82:	b2b1      	uxth	r1, r6
 8010e84:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8010e88:	3201      	adds	r2, #1
 8010e8a:	8920      	ldrh	r0, [r4, #8]
 8010e8c:	3301      	adds	r3, #1
 8010e8e:	8967      	ldrh	r7, [r4, #10]
 8010e90:	fb12 f201 	smulbb	r2, r2, r1
 8010e94:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
 8010e98:	fb13 f301 	smulbb	r3, r3, r1
 8010e9c:	fb10 f001 	smulbb	r0, r0, r1
 8010ea0:	3a01      	subs	r2, #1
 8010ea2:	fb17 f101 	smulbb	r1, r7, r1
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	872a      	strh	r2, [r5, #56]	; 0x38
 8010eaa:	86a8      	strh	r0, [r5, #52]	; 0x34
 8010eac:	86e9      	strh	r1, [r5, #54]	; 0x36
 8010eae:	876b      	strh	r3, [r5, #58]	; 0x3a
 8010eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8010eb2:	4770      	bx	lr
 8010eb4:	20000018 	.word	0x20000018
 8010eb8:	20000184 	.word	0x20000184

08010ebc <GUI_AA_DisableHiRes>:
 8010ebc:	4b02      	ldr	r3, [pc, #8]	; (8010ec8 <GUI_AA_DisableHiRes+0xc>)
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8010ec6:	4770      	bx	lr
 8010ec8:	20000018 	.word	0x20000018

08010ecc <GUI_AA_HiRes2Pixel>:
 8010ecc:	4b05      	ldr	r3, [pc, #20]	; (8010ee4 <GUI_AA_HiRes2Pixel+0x18>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010ed4:	b90b      	cbnz	r3, 8010eda <GUI_AA_HiRes2Pixel+0xe>
 8010ed6:	b200      	sxth	r0, r0
 8010ed8:	4770      	bx	lr
 8010eda:	fb90 f0f3 	sdiv	r0, r0, r3
 8010ede:	b200      	sxth	r0, r0
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	20000018 	.word	0x20000018

08010ee8 <GUI_AA_Exit>:
 8010ee8:	b508      	push	{r3, lr}
 8010eea:	f7ff fd73 	bl	80109d4 <_FlushLine>
 8010eee:	4b04      	ldr	r3, [pc, #16]	; (8010f00 <GUI_AA_Exit+0x18>)
 8010ef0:	4a04      	ldr	r2, [pc, #16]	; (8010f04 <GUI_AA_Exit+0x1c>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6991      	ldr	r1, [r2, #24]
 8010ef6:	f103 0208 	add.w	r2, r3, #8
 8010efa:	6659      	str	r1, [r3, #100]	; 0x64
 8010efc:	615a      	str	r2, [r3, #20]
 8010efe:	bd08      	pop	{r3, pc}
 8010f00:	20000018 	.word	0x20000018
 8010f04:	20000184 	.word	0x20000184

08010f08 <GUI_AA_DrawLine>:
 8010f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f0c:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8011084 <GUI_AA_DrawLine+0x17c>
 8010f10:	b087      	sub	sp, #28
 8010f12:	4698      	mov	r8, r3
 8010f14:	4606      	mov	r6, r0
 8010f16:	460d      	mov	r5, r1
 8010f18:	4692      	mov	sl, r2
 8010f1a:	f006 ff0d 	bl	8017d38 <GUI_Lock>
 8010f1e:	f8d9 3000 	ldr.w	r3, [r9]
 8010f22:	b15b      	cbz	r3, 8010f3c <GUI_AA_DrawLine+0x34>
 8010f24:	4f56      	ldr	r7, [pc, #344]	; (8011080 <GUI_AA_DrawLine+0x178>)
 8010f26:	2000      	movs	r0, #0
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f2e:	4416      	add	r6, r2
 8010f30:	441d      	add	r5, r3
 8010f32:	f00f f9d9 	bl	80202e8 <WM__InitIVRSearch>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	f040 808d 	bne.w	8011056 <GUI_AA_DrawLine+0x14e>
 8010f3c:	f010 fbf0 	bl	8021720 <WM__GetOrgX_AA>
 8010f40:	4683      	mov	fp, r0
 8010f42:	f010 fbfb 	bl	802173c <WM__GetOrgY_AA>
 8010f46:	4607      	mov	r7, r0
 8010f48:	f010 fbea 	bl	8021720 <WM__GetOrgX_AA>
 8010f4c:	4681      	mov	r9, r0
 8010f4e:	f010 fbf5 	bl	802173c <WM__GetOrgY_AA>
 8010f52:	4604      	mov	r4, r0
 8010f54:	2000      	movs	r0, #0
 8010f56:	f00f f9c7 	bl	80202e8 <WM__InitIVRSearch>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	f000 808a 	beq.w	8011074 <GUI_AA_DrawLine+0x16c>
 8010f60:	eb0a 0209 	add.w	r2, sl, r9
 8010f64:	eb0b 0306 	add.w	r3, fp, r6
 8010f68:	4610      	mov	r0, r2
 8010f6a:	9203      	str	r2, [sp, #12]
 8010f6c:	197a      	adds	r2, r7, r5
 8010f6e:	4f44      	ldr	r7, [pc, #272]	; (8011080 <GUI_AA_DrawLine+0x178>)
 8010f70:	4283      	cmp	r3, r0
 8010f72:	9301      	str	r3, [sp, #4]
 8010f74:	9202      	str	r2, [sp, #8]
 8010f76:	eb08 0204 	add.w	r2, r8, r4
 8010f7a:	46bb      	mov	fp, r7
 8010f7c:	9204      	str	r2, [sp, #16]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	bfa8      	it	ge
 8010f82:	4602      	movge	r2, r0
 8010f84:	4283      	cmp	r3, r0
 8010f86:	9205      	str	r2, [sp, #20]
 8010f88:	461a      	mov	r2, r3
 8010f8a:	bfb8      	it	lt
 8010f8c:	4602      	movlt	r2, r0
 8010f8e:	9200      	str	r2, [sp, #0]
 8010f90:	e02e      	b.n	8010ff0 <GUI_AA_DrawLine+0xe8>
 8010f92:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010f96:	fb9c f0f1 	sdiv	r0, ip, r1
 8010f9a:	fb9e f1f1 	sdiv	r1, lr, r1
 8010f9e:	f7ff fe45 	bl	8010c2c <GUI_AA_Init>
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f002 fbe0 	bl	8013768 <GUI_SetPenSize>
 8010fa8:	4633      	mov	r3, r6
 8010faa:	4642      	mov	r2, r8
 8010fac:	4651      	mov	r1, sl
 8010fae:	4648      	mov	r0, r9
 8010fb0:	f004 f81e 	bl	8014ff0 <GL_DrawLine>
 8010fb4:	f7ff ff98 	bl	8010ee8 <GUI_AA_Exit>
 8010fb8:	b987      	cbnz	r7, 8010fdc <GUI_AA_DrawLine+0xd4>
 8010fba:	f8db 3000 	ldr.w	r3, [fp]
 8010fbe:	4651      	mov	r1, sl
 8010fc0:	4648      	mov	r0, r9
 8010fc2:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 8010fc6:	fb14 f405 	smulbb	r4, r4, r5
 8010fca:	1064      	asrs	r4, r4, #1
 8010fcc:	4622      	mov	r2, r4
 8010fce:	f7ff f891 	bl	80100f4 <GL_FillCircleAA_HiRes>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	f7ff f88c 	bl	80100f4 <GL_FillCircleAA_HiRes>
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f002 fbc3 	bl	8013768 <GUI_SetPenSize>
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	f002 fbce 	bl	8013784 <GUI_SetPenShape>
 8010fe8:	f00f f854 	bl	8020094 <WM__GetNextIVR>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d041      	beq.n	8011074 <GUI_AA_DrawLine+0x16c>
 8010ff0:	f002 fbae 	bl	8013750 <GUI_GetPenSize>
 8010ff4:	f8db 3000 	ldr.w	r3, [fp]
 8010ff8:	4605      	mov	r5, r0
 8010ffa:	2001      	movs	r0, #1
 8010ffc:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 8011000:	9e04      	ldr	r6, [sp, #16]
 8011002:	fb14 f405 	smulbb	r4, r4, r5
 8011006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801100a:	f8dd a008 	ldr.w	sl, [sp, #8]
 801100e:	b2e4      	uxtb	r4, r4
 8011010:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011014:	f002 fbb6 	bl	8013784 <GUI_SetPenShape>
 8011018:	9905      	ldr	r1, [sp, #20]
 801101a:	9a00      	ldr	r2, [sp, #0]
 801101c:	4607      	mov	r7, r0
 801101e:	f8db 3000 	ldr.w	r3, [fp]
 8011022:	ebc4 0c01 	rsb	ip, r4, r1
 8011026:	eb04 0e02 	add.w	lr, r4, r2
 801102a:	1b48      	subs	r0, r1, r5
 801102c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8011030:	9900      	ldr	r1, [sp, #0]
 8011032:	4429      	add	r1, r5
 8011034:	2a00      	cmp	r2, #0
 8011036:	d1ac      	bne.n	8010f92 <GUI_AA_DrawLine+0x8a>
 8011038:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	fb06 f903 	mul.w	r9, r6, r3
 8011042:	9b03      	ldr	r3, [sp, #12]
 8011044:	fb06 f803 	mul.w	r8, r6, r3
 8011048:	9b02      	ldr	r3, [sp, #8]
 801104a:	fb06 fa03 	mul.w	sl, r6, r3
 801104e:	9b04      	ldr	r3, [sp, #16]
 8011050:	fb06 f603 	mul.w	r6, r6, r3
 8011054:	e7a3      	b.n	8010f9e <GUI_AA_DrawLine+0x96>
 8011056:	f8d9 4000 	ldr.w	r4, [r9]
 801105a:	4643      	mov	r3, r8
 801105c:	4652      	mov	r2, sl
 801105e:	4629      	mov	r1, r5
 8011060:	4630      	mov	r0, r6
 8011062:	47a0      	blx	r4
 8011064:	4604      	mov	r4, r0
 8011066:	f00f f815 	bl	8020094 <WM__GetNextIVR>
 801106a:	2800      	cmp	r0, #0
 801106c:	d1f3      	bne.n	8011056 <GUI_AA_DrawLine+0x14e>
 801106e:	2c00      	cmp	r4, #0
 8011070:	f47f af64 	bne.w	8010f3c <GUI_AA_DrawLine+0x34>
 8011074:	b007      	add	sp, #28
 8011076:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107a:	f006 be53 	b.w	8017d24 <GUI_Unlock>
 801107e:	bf00      	nop
 8011080:	20000018 	.word	0x20000018
 8011084:	200001c0 	.word	0x200001c0

08011088 <_Color2Index_1616I>:
 8011088:	4b06      	ldr	r3, [pc, #24]	; (80110a4 <_Color2Index_1616I+0x1c>)
 801108a:	b510      	push	{r4, lr}
 801108c:	4604      	mov	r4, r0
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011094:	4798      	blx	r3
 8011096:	4b04      	ldr	r3, [pc, #16]	; (80110a8 <_Color2Index_1616I+0x20>)
 8011098:	0e24      	lsrs	r4, r4, #24
 801109a:	5d1b      	ldrb	r3, [r3, r4]
 801109c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80110a0:	bd10      	pop	{r4, pc}
 80110a2:	bf00      	nop
 80110a4:	08033e9c 	.word	0x08033e9c
 80110a8:	08026d60 	.word	0x08026d60

080110ac <_Index2Color_1616I>:
 80110ac:	4b05      	ldr	r3, [pc, #20]	; (80110c4 <_Index2Color_1616I+0x18>)
 80110ae:	b510      	push	{r4, lr}
 80110b0:	4604      	mov	r4, r0
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	b2c0      	uxtb	r0, r0
 80110b6:	4798      	blx	r3
 80110b8:	4b03      	ldr	r3, [pc, #12]	; (80110c8 <_Index2Color_1616I+0x1c>)
 80110ba:	0924      	lsrs	r4, r4, #4
 80110bc:	5d1b      	ldrb	r3, [r3, r4]
 80110be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80110c2:	bd10      	pop	{r4, pc}
 80110c4:	08033e9c 	.word	0x08033e9c
 80110c8:	08026ec0 	.word	0x08026ec0

080110cc <_GetIndexMask_1616I>:
 80110cc:	20ff      	movs	r0, #255	; 0xff
 80110ce:	4770      	bx	lr

080110d0 <_Color2IndexBulk_1616I>:
 80110d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d4:	4c0b      	ldr	r4, [pc, #44]	; (8011104 <_Color2IndexBulk_1616I+0x34>)
 80110d6:	4605      	mov	r5, r0
 80110d8:	4689      	mov	r9, r1
 80110da:	4692      	mov	sl, r2
 80110dc:	4698      	mov	r8, r3
 80110de:	6827      	ldr	r7, [r4, #0]
 80110e0:	4e09      	ldr	r6, [pc, #36]	; (8011108 <_Color2IndexBulk_1616I+0x38>)
 80110e2:	f855 4b04 	ldr.w	r4, [r5], #4
 80110e6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80110ea:	0e24      	lsrs	r4, r4, #24
 80110ec:	47b8      	blx	r7
 80110ee:	f1ba 0a01 	subs.w	sl, sl, #1
 80110f2:	5d33      	ldrb	r3, [r6, r4]
 80110f4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80110f8:	f889 0000 	strb.w	r0, [r9]
 80110fc:	44c1      	add	r9, r8
 80110fe:	d1f0      	bne.n	80110e2 <_Color2IndexBulk_1616I+0x12>
 8011100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011104:	08033e9c 	.word	0x08033e9c
 8011108:	08026d60 	.word	0x08026d60

0801110c <_Index2ColorBulk_1616I>:
 801110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011110:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8011114:	4c0e      	ldr	r4, [pc, #56]	; (8011150 <_Index2ColorBulk_1616I+0x44>)
 8011116:	f102 39ff 	add.w	r9, r2, #4294967295
 801111a:	f1c3 0800 	rsb	r8, r3, #0
 801111e:	4492      	add	sl, r2
 8011120:	6867      	ldr	r7, [r4, #4]
 8011122:	fb03 0509 	mla	r5, r3, r9, r0
 8011126:	4e0b      	ldr	r6, [pc, #44]	; (8011154 <_Index2ColorBulk_1616I+0x48>)
 8011128:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 801112c:	e001      	b.n	8011132 <_Index2ColorBulk_1616I+0x26>
 801112e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011132:	782c      	ldrb	r4, [r5, #0]
 8011134:	4445      	add	r5, r8
 8011136:	4620      	mov	r0, r4
 8011138:	0924      	lsrs	r4, r4, #4
 801113a:	47b8      	blx	r7
 801113c:	5d32      	ldrb	r2, [r6, r4]
 801113e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8011142:	f84a 0904 	str.w	r0, [sl], #-4
 8011146:	f1b9 0f00 	cmp.w	r9, #0
 801114a:	d1f0      	bne.n	801112e <_Index2ColorBulk_1616I+0x22>
 801114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011150:	08033e9c 	.word	0x08033e9c
 8011154:	08026ec0 	.word	0x08026ec0

08011158 <_Color2Index_822216>:
 8011158:	b430      	push	{r4, r5}
 801115a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801115e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011162:	4d0e      	ldr	r5, [pc, #56]	; (801119c <_Color2Index_822216+0x44>)
 8011164:	0e01      	lsrs	r1, r0, #24
 8011166:	b2c2      	uxtb	r2, r0
 8011168:	429c      	cmp	r4, r3
 801116a:	fba5 1001 	umull	r1, r0, r5, r1
 801116e:	ea4f 1010 	mov.w	r0, r0, lsr #4
 8011172:	d106      	bne.n	8011182 <_Color2Index_822216+0x2a>
 8011174:	42a2      	cmp	r2, r4
 8011176:	d104      	bne.n	8011182 <_Color2Index_822216+0x2a>
 8011178:	0100      	lsls	r0, r0, #4
 801117a:	bc30      	pop	{r4, r5}
 801117c:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 8011180:	4770      	bx	lr
 8011182:	09d1      	lsrs	r1, r2, #7
 8011184:	09da      	lsrs	r2, r3, #7
 8011186:	09e4      	lsrs	r4, r4, #7
 8011188:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 801118c:	f042 0208 	orr.w	r2, r2, #8
 8011190:	ea42 1300 	orr.w	r3, r2, r0, lsl #4
 8011194:	ea43 0044 	orr.w	r0, r3, r4, lsl #1
 8011198:	bc30      	pop	{r4, r5}
 801119a:	4770      	bx	lr
 801119c:	f0f0f0f1 	.word	0xf0f0f0f1

080111a0 <_Index2Color_822216>:
 80111a0:	0703      	lsls	r3, r0, #28
 80111a2:	d516      	bpl.n	80111d2 <_Index2Color_822216+0x32>
 80111a4:	f000 0201 	and.w	r2, r0, #1
 80111a8:	4b13      	ldr	r3, [pc, #76]	; (80111f8 <_Index2Color_822216+0x58>)
 80111aa:	2a00      	cmp	r2, #0
 80111ac:	bf06      	itte	eq
 80111ae:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 80111b2:	f04f 22ff 	moveq.w	r2, #4278255360	; 0xff00ff00
 80111b6:	f46f 027f 	mvnne.w	r2, #16711680	; 0xff0000
 80111ba:	f010 0f02 	tst.w	r0, #2
 80111be:	bf18      	it	ne
 80111c0:	4613      	movne	r3, r2
 80111c2:	f010 0f04 	tst.w	r0, #4
 80111c6:	bf0c      	ite	eq
 80111c8:	2000      	moveq	r0, #0
 80111ca:	f44f 007f 	movne.w	r0, #16711680	; 0xff0000
 80111ce:	4318      	orrs	r0, r3
 80111d0:	4770      	bx	lr
 80111d2:	f000 0107 	and.w	r1, r0, #7
 80111d6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80111da:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80111de:	0849      	lsrs	r1, r1, #1
 80111e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80111e4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80111e8:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 80111ec:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80111f0:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	ff0000ff 	.word	0xff0000ff

080111fc <_GetIndexMask_822216>:
 80111fc:	20ff      	movs	r0, #255	; 0xff
 80111fe:	4770      	bx	lr

08011200 <_Color2Index_84444>:
 8011200:	4603      	mov	r3, r0
 8011202:	0f80      	lsrs	r0, r0, #30
 8011204:	d017      	beq.n	8011236 <_Color2Index_84444+0x36>
 8011206:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801120a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801120e:	b2db      	uxtb	r3, r3
 8011210:	4291      	cmp	r1, r2
 8011212:	d105      	bne.n	8011220 <_Color2Index_84444+0x20>
 8011214:	428b      	cmp	r3, r1
 8011216:	d103      	bne.n	8011220 <_Color2Index_84444+0x20>
 8011218:	0912      	lsrs	r2, r2, #4
 801121a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801121e:	4770      	bx	lr
 8011220:	099b      	lsrs	r3, r3, #6
 8011222:	0992      	lsrs	r2, r2, #6
 8011224:	0989      	lsrs	r1, r1, #6
 8011226:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 801122a:	0180      	lsls	r0, r0, #6
 801122c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8011230:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 8011234:	4318      	orrs	r0, r3
 8011236:	4770      	bx	lr

08011238 <_GetIndexMask_84444>:
 8011238:	20ff      	movs	r0, #255	; 0xff
 801123a:	4770      	bx	lr

0801123c <_Index2Color_84444>:
 801123c:	283f      	cmp	r0, #63	; 0x3f
 801123e:	d804      	bhi.n	801124a <_Index2Color_84444+0xe>
 8011240:	280f      	cmp	r0, #15
 8011242:	d826      	bhi.n	8011292 <_Index2Color_84444+0x56>
 8011244:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8011248:	4770      	bx	lr
 801124a:	f3c0 0281 	ubfx	r2, r0, #2, #2
 801124e:	f3c0 1301 	ubfx	r3, r0, #4, #2
 8011252:	f000 0103 	and.w	r1, r0, #3
 8011256:	0980      	lsrs	r0, r0, #6
 8011258:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801125c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011264:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011268:	b410      	push	{r4}
 801126a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801126e:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 8011272:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011276:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 801127a:	b2e4      	uxtb	r4, r4
 801127c:	b2d2      	uxtb	r2, r2
 801127e:	b2c8      	uxtb	r0, r1
 8011280:	061b      	lsls	r3, r3, #24
 8011282:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8011286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801128a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801128e:	4310      	orrs	r0, r2
 8011290:	4770      	bx	lr
 8011292:	f000 030f 	and.w	r3, r0, #15
 8011296:	0900      	lsrs	r0, r0, #4
 8011298:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801129c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80112a0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80112a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80112a8:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 80112ac:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop

080112b4 <LCD_Color2Index_8666>:
 80112b4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80112b8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80112bc:	b2c0      	uxtb	r0, r0
 80112be:	4299      	cmp	r1, r3
 80112c0:	b410      	push	{r4}
 80112c2:	d10a      	bne.n	80112da <LCD_Color2Index_8666+0x26>
 80112c4:	4288      	cmp	r0, r1
 80112c6:	d108      	bne.n	80112da <LCD_Color2Index_8666+0x26>
 80112c8:	3308      	adds	r3, #8
 80112ca:	4814      	ldr	r0, [pc, #80]	; (801131c <LCD_Color2Index_8666+0x68>)
 80112cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112d0:	fba0 3003 	umull	r3, r0, r0, r3
 80112d4:	0900      	lsrs	r0, r0, #4
 80112d6:	3078      	adds	r0, #120	; 0x78
 80112d8:	4770      	bx	lr
 80112da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80112de:	4c10      	ldr	r4, [pc, #64]	; (8011320 <LCD_Color2Index_8666+0x6c>)
 80112e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80112e4:	307f      	adds	r0, #127	; 0x7f
 80112e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80112ea:	327f      	adds	r2, #127	; 0x7f
 80112ec:	fba4 3000 	umull	r3, r0, r4, r0
 80112f0:	317f      	adds	r1, #127	; 0x7f
 80112f2:	fba4 3202 	umull	r3, r2, r4, r2
 80112f6:	fba4 3101 	umull	r3, r1, r4, r1
 80112fa:	09c0      	lsrs	r0, r0, #7
 80112fc:	09d2      	lsrs	r2, r2, #7
 80112fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011302:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8011306:	09c9      	lsrs	r1, r1, #7
 8011308:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 801130c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011310:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011314:	286b      	cmp	r0, #107	; 0x6b
 8011316:	bf88      	it	hi
 8011318:	3028      	addhi	r0, #40	; 0x28
 801131a:	4770      	bx	lr
 801131c:	f0f0f0f1 	.word	0xf0f0f0f1
 8011320:	80808081 	.word	0x80808081

08011324 <_GetIndexMask_8666>:
 8011324:	20ff      	movs	r0, #255	; 0xff
 8011326:	4770      	bx	lr

08011328 <LCD_Index2Color_8666>:
 8011328:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 801132c:	2b0f      	cmp	r3, #15
 801132e:	b410      	push	{r4}
 8011330:	d92d      	bls.n	801138e <LCD_Index2Color_8666+0x66>
 8011332:	286b      	cmp	r0, #107	; 0x6b
 8011334:	d827      	bhi.n	8011386 <LCD_Index2Color_8666+0x5e>
 8011336:	491e      	ldr	r1, [pc, #120]	; (80113b0 <LCD_Index2Color_8666+0x88>)
 8011338:	4b1e      	ldr	r3, [pc, #120]	; (80113b4 <LCD_Index2Color_8666+0x8c>)
 801133a:	fba1 4200 	umull	r4, r2, r1, r0
 801133e:	fba3 4300 	umull	r4, r3, r3, r0
 8011342:	0892      	lsrs	r2, r2, #2
 8011344:	08db      	lsrs	r3, r3, #3
 8011346:	fba1 4102 	umull	r4, r1, r1, r2
 801134a:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801134e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011352:	0889      	lsrs	r1, r1, #2
 8011354:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 8011358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801135c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011364:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8011368:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801136c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011370:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8011374:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011378:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 801137c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8011380:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011384:	4770      	bx	lr
 8011386:	2893      	cmp	r0, #147	; 0x93
 8011388:	d90e      	bls.n	80113a8 <LCD_Index2Color_8666+0x80>
 801138a:	3828      	subs	r0, #40	; 0x28
 801138c:	e7d3      	b.n	8011336 <LCD_Index2Color_8666+0xe>
 801138e:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 8011392:	4b09      	ldr	r3, [pc, #36]	; (80113b8 <LCD_Index2Color_8666+0x90>)
 8011394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011398:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801139c:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 80113a0:	4403      	add	r3, r0
 80113a2:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 80113a6:	4770      	bx	lr
 80113a8:	2000      	movs	r0, #0
 80113aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113ae:	4770      	bx	lr
 80113b0:	aaaaaaab 	.word	0xaaaaaaab
 80113b4:	38e38e39 	.word	0x38e38e39
 80113b8:	f8000008 	.word	0xf8000008

080113bc <_GetIndexMask_8666_1>:
 80113bc:	20ff      	movs	r0, #255	; 0xff
 80113be:	4770      	bx	lr

080113c0 <_Color2Index_8666_1>:
 80113c0:	b410      	push	{r4}
 80113c2:	b170      	cbz	r0, 80113e2 <_Color2Index_8666_1+0x22>
 80113c4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80113c8:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80113cc:	b2c0      	uxtb	r0, r0
 80113ce:	4299      	cmp	r1, r3
 80113d0:	d10a      	bne.n	80113e8 <_Color2Index_8666_1+0x28>
 80113d2:	4288      	cmp	r0, r1
 80113d4:	d108      	bne.n	80113e8 <_Color2Index_8666_1+0x28>
 80113d6:	3308      	adds	r3, #8
 80113d8:	4815      	ldr	r0, [pc, #84]	; (8011430 <_Color2Index_8666_1+0x70>)
 80113da:	fba0 3003 	umull	r3, r0, r0, r3
 80113de:	0900      	lsrs	r0, r0, #4
 80113e0:	3078      	adds	r0, #120	; 0x78
 80113e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80113ec:	4c11      	ldr	r4, [pc, #68]	; (8011434 <_Color2Index_8666_1+0x74>)
 80113ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80113f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80113f6:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 80113fa:	f102 007f 	add.w	r0, r2, #127	; 0x7f
 80113fe:	317f      	adds	r1, #127	; 0x7f
 8011400:	fba4 2303 	umull	r2, r3, r4, r3
 8011404:	fba4 2000 	umull	r2, r0, r4, r0
 8011408:	fba4 2101 	umull	r2, r1, r4, r1
 801140c:	09db      	lsrs	r3, r3, #7
 801140e:	09c0      	lsrs	r0, r0, #7
 8011410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011414:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8011418:	09c9      	lsrs	r1, r1, #7
 801141a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801141e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011422:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011426:	286b      	cmp	r0, #107	; 0x6b
 8011428:	bf94      	ite	ls
 801142a:	300c      	addls	r0, #12
 801142c:	301c      	addhi	r0, #28
 801142e:	4770      	bx	lr
 8011430:	f0f0f0f1 	.word	0xf0f0f0f1
 8011434:	80808081 	.word	0x80808081

08011438 <_Index2Color_8666_1>:
 8011438:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 801143c:	2b0f      	cmp	r3, #15
 801143e:	d932      	bls.n	80114a6 <_Index2Color_8666_1+0x6e>
 8011440:	f1a0 030c 	sub.w	r3, r0, #12
 8011444:	2be7      	cmp	r3, #231	; 0xe7
 8011446:	d82b      	bhi.n	80114a0 <_Index2Color_8666_1+0x68>
 8011448:	2877      	cmp	r0, #119	; 0x77
 801144a:	4a1c      	ldr	r2, [pc, #112]	; (80114bc <_Index2Color_8666_1+0x84>)
 801144c:	bf88      	it	hi
 801144e:	f1a0 031c 	subhi.w	r3, r0, #28
 8011452:	481b      	ldr	r0, [pc, #108]	; (80114c0 <_Index2Color_8666_1+0x88>)
 8011454:	b410      	push	{r4}
 8011456:	fba0 4103 	umull	r4, r1, r0, r3
 801145a:	fba2 4203 	umull	r4, r2, r2, r3
 801145e:	0889      	lsrs	r1, r1, #2
 8011460:	08d2      	lsrs	r2, r2, #3
 8011462:	fba0 4001 	umull	r4, r0, r0, r1
 8011466:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801146a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801146e:	0880      	lsrs	r0, r0, #2
 8011470:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8011474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011478:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801147c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011480:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 8011484:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8011488:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801148c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011490:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8011494:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8011498:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 801149c:	4618      	mov	r0, r3
 801149e:	4770      	bx	lr
 80114a0:	2300      	movs	r3, #0
 80114a2:	4618      	mov	r0, r3
 80114a4:	4770      	bx	lr
 80114a6:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 80114aa:	4b06      	ldr	r3, [pc, #24]	; (80114c4 <_Index2Color_8666_1+0x8c>)
 80114ac:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80114b0:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 80114b4:	4403      	add	r3, r0
 80114b6:	4618      	mov	r0, r3
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	38e38e39 	.word	0x38e38e39
 80114c0:	aaaaaaab 	.word	0xaaaaaaab
 80114c4:	f8000008 	.word	0xf8000008

080114c8 <_Color2Index_88666I>:
 80114c8:	b510      	push	{r4, lr}
 80114ca:	4604      	mov	r4, r0
 80114cc:	4b04      	ldr	r3, [pc, #16]	; (80114e0 <_Color2Index_88666I+0x18>)
 80114ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80114d2:	0c24      	lsrs	r4, r4, #16
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4798      	blx	r3
 80114d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80114dc:	4320      	orrs	r0, r4
 80114de:	bd10      	pop	{r4, pc}
 80114e0:	080268f4 	.word	0x080268f4

080114e4 <_Index2Color_88666I>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	4604      	mov	r4, r0
 80114e8:	4b04      	ldr	r3, [pc, #16]	; (80114fc <_Index2Color_88666I+0x18>)
 80114ea:	b2c0      	uxtb	r0, r0
 80114ec:	0424      	lsls	r4, r4, #16
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	4798      	blx	r3
 80114f2:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80114f6:	4320      	orrs	r0, r4
 80114f8:	bd10      	pop	{r4, pc}
 80114fa:	bf00      	nop
 80114fc:	080268f4 	.word	0x080268f4

08011500 <_GetIndexMask_88666I>:
 8011500:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop

08011508 <_Color2IndexBulk_88666I>:
 8011508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801150c:	4c0b      	ldr	r4, [pc, #44]	; (801153c <_Color2IndexBulk_88666I+0x34>)
 801150e:	4606      	mov	r6, r0
 8011510:	4689      	mov	r9, r1
 8011512:	4615      	mov	r5, r2
 8011514:	4698      	mov	r8, r3
 8011516:	6827      	ldr	r7, [r4, #0]
 8011518:	f856 4b04 	ldr.w	r4, [r6], #4
 801151c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8011520:	0c24      	lsrs	r4, r4, #16
 8011522:	47b8      	blx	r7
 8011524:	3d01      	subs	r5, #1
 8011526:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801152a:	ea40 0004 	orr.w	r0, r0, r4
 801152e:	f8a9 0000 	strh.w	r0, [r9]
 8011532:	44c1      	add	r9, r8
 8011534:	d1f0      	bne.n	8011518 <_Color2IndexBulk_88666I+0x10>
 8011536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801153a:	bf00      	nop
 801153c:	080268f4 	.word	0x080268f4

08011540 <_Index2ColorBulk_88666I>:
 8011540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011544:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8011548:	4c0d      	ldr	r4, [pc, #52]	; (8011580 <_Index2ColorBulk_88666I+0x40>)
 801154a:	f102 38ff 	add.w	r8, r2, #4294967295
 801154e:	425f      	negs	r7, r3
 8011550:	4491      	add	r9, r2
 8011552:	6866      	ldr	r6, [r4, #4]
 8011554:	fb03 0508 	mla	r5, r3, r8, r0
 8011558:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 801155c:	e001      	b.n	8011562 <_Index2ColorBulk_88666I+0x22>
 801155e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011562:	882c      	ldrh	r4, [r5, #0]
 8011564:	443d      	add	r5, r7
 8011566:	b2e0      	uxtb	r0, r4
 8011568:	0424      	lsls	r4, r4, #16
 801156a:	47b0      	blx	r6
 801156c:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8011570:	4320      	orrs	r0, r4
 8011572:	f849 0904 	str.w	r0, [r9], #-4
 8011576:	f1b8 0f00 	cmp.w	r8, #0
 801157a:	d1f0      	bne.n	801155e <_Index2ColorBulk_88666I+0x1e>
 801157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011580:	080268f4 	.word	0x080268f4

08011584 <_Color2Index_M1555I>:
 8011584:	4909      	ldr	r1, [pc, #36]	; (80115ac <_Color2Index_M1555I+0x28>)
 8011586:	b2c2      	uxtb	r2, r0
 8011588:	0fc3      	lsrs	r3, r0, #31
 801158a:	5c8a      	ldrb	r2, [r1, r2]
 801158c:	b410      	push	{r4}
 801158e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011592:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8011596:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801159a:	5d0c      	ldrb	r4, [r1, r4]
 801159c:	5c08      	ldrb	r0, [r1, r0]
 801159e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80115a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115a6:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 80115aa:	4770      	bx	lr
 80115ac:	08026c60 	.word	0x08026c60

080115b0 <_Index2Color_M1555I>:
 80115b0:	490a      	ldr	r1, [pc, #40]	; (80115dc <_Index2Color_M1555I+0x2c>)
 80115b2:	f000 021f 	and.w	r2, r0, #31
 80115b6:	f340 33c0 	sbfx	r3, r0, #15, #1
 80115ba:	5c8a      	ldrb	r2, [r1, r2]
 80115bc:	b410      	push	{r4}
 80115be:	f3c0 1444 	ubfx	r4, r0, #5, #5
 80115c2:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 80115c6:	f3c0 2084 	ubfx	r0, r0, #10, #5
 80115ca:	5d0c      	ldrb	r4, [r1, r4]
 80115cc:	5c08      	ldrb	r0, [r1, r0]
 80115ce:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80115d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115d6:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80115da:	4770      	bx	lr
 80115dc:	08026ea0 	.word	0x08026ea0

080115e0 <_GetIndexMask_M1555I>:
 80115e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop

080115e8 <_Color2IndexBulk_M1555I>:
 80115e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115ea:	4f14      	ldr	r7, [pc, #80]	; (801163c <_Color2IndexBulk_M1555I+0x54>)
 80115ec:	f8d7 e000 	ldr.w	lr, [r7]
 80115f0:	f1be 0f00 	cmp.w	lr, #0
 80115f4:	d003      	beq.n	80115fe <_Color2IndexBulk_M1555I+0x16>
 80115f6:	46f4      	mov	ip, lr
 80115f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80115fc:	4760      	bx	ip
 80115fe:	4606      	mov	r6, r0
 8011600:	460c      	mov	r4, r1
 8011602:	4615      	mov	r5, r2
 8011604:	461f      	mov	r7, r3
 8011606:	480e      	ldr	r0, [pc, #56]	; (8011640 <_Color2IndexBulk_M1555I+0x58>)
 8011608:	f856 2b04 	ldr.w	r2, [r6], #4
 801160c:	3d01      	subs	r5, #1
 801160e:	fa5f fe82 	uxtb.w	lr, r2
 8011612:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011616:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801161a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801161e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8011622:	f810 200c 	ldrb.w	r2, [r0, ip]
 8011626:	5c41      	ldrb	r1, [r0, r1]
 8011628:	eb02 228e 	add.w	r2, r2, lr, lsl #10
 801162c:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8011630:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011634:	8023      	strh	r3, [r4, #0]
 8011636:	443c      	add	r4, r7
 8011638:	d1e6      	bne.n	8011608 <_Color2IndexBulk_M1555I+0x20>
 801163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801163c:	200001c4 	.word	0x200001c4
 8011640:	08026c60 	.word	0x08026c60

08011644 <_Index2ColorBulk_M1555I>:
 8011644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	4c17      	ldr	r4, [pc, #92]	; (80116a8 <_Index2ColorBulk_M1555I+0x64>)
 801164a:	6864      	ldr	r4, [r4, #4]
 801164c:	b11c      	cbz	r4, 8011656 <_Index2ColorBulk_M1555I+0x12>
 801164e:	46a4      	mov	ip, r4
 8011650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011654:	4760      	bx	ip
 8011656:	468c      	mov	ip, r1
 8011658:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801165c:	4680      	mov	r8, r0
 801165e:	1e56      	subs	r6, r2, #1
 8011660:	4411      	add	r1, r2
 8011662:	f1c3 0e00 	rsb	lr, r3, #0
 8011666:	4811      	ldr	r0, [pc, #68]	; (80116ac <_Index2ColorBulk_M1555I+0x68>)
 8011668:	fb03 8306 	mla	r3, r3, r6, r8
 801166c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8011670:	e000      	b.n	8011674 <_Index2ColorBulk_M1555I+0x30>
 8011672:	3e01      	subs	r6, #1
 8011674:	881d      	ldrh	r5, [r3, #0]
 8011676:	4473      	add	r3, lr
 8011678:	f005 041f 	and.w	r4, r5, #31
 801167c:	f345 37c0 	sbfx	r7, r5, #15, #1
 8011680:	f3c5 1244 	ubfx	r2, r5, #5, #5
 8011684:	f3c5 2584 	ubfx	r5, r5, #10, #5
 8011688:	5d04      	ldrb	r4, [r0, r4]
 801168a:	5c82      	ldrb	r2, [r0, r2]
 801168c:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8011690:	5d45      	ldrb	r5, [r0, r5]
 8011692:	eb04 2202 	add.w	r2, r4, r2, lsl #8
 8011696:	eb02 4205 	add.w	r2, r2, r5, lsl #16
 801169a:	f841 2904 	str.w	r2, [r1], #-4
 801169e:	2e00      	cmp	r6, #0
 80116a0:	d1e7      	bne.n	8011672 <_Index2ColorBulk_M1555I+0x2e>
 80116a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a6:	bf00      	nop
 80116a8:	200001c4 	.word	0x200001c4
 80116ac:	08026ea0 	.word	0x08026ea0

080116b0 <GUICC_M1555I_SetCustColorConv>:
 80116b0:	4b01      	ldr	r3, [pc, #4]	; (80116b8 <GUICC_M1555I_SetCustColorConv+0x8>)
 80116b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80116b6:	4770      	bx	lr
 80116b8:	200001c4 	.word	0x200001c4

080116bc <_Color2Index_M4444I>:
 80116bc:	b510      	push	{r4, lr}
 80116be:	b2c2      	uxtb	r2, r0
 80116c0:	4b0e      	ldr	r3, [pc, #56]	; (80116fc <_Color2Index_M4444I+0x40>)
 80116c2:	0e04      	lsrs	r4, r0, #24
 80116c4:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80116c8:	3208      	adds	r2, #8
 80116ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80116ce:	3408      	adds	r4, #8
 80116d0:	3108      	adds	r1, #8
 80116d2:	fba3 e202 	umull	lr, r2, r3, r2
 80116d6:	3008      	adds	r0, #8
 80116d8:	fba3 e404 	umull	lr, r4, r3, r4
 80116dc:	fba3 e101 	umull	lr, r1, r3, r1
 80116e0:	0912      	lsrs	r2, r2, #4
 80116e2:	0924      	lsrs	r4, r4, #4
 80116e4:	fba3 0300 	umull	r0, r3, r3, r0
 80116e8:	0909      	lsrs	r1, r1, #4
 80116ea:	eb02 3004 	add.w	r0, r2, r4, lsl #12
 80116ee:	f023 030f 	bic.w	r3, r3, #15
 80116f2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80116f6:	4418      	add	r0, r3
 80116f8:	bd10      	pop	{r4, pc}
 80116fa:	bf00      	nop
 80116fc:	f0f0f0f1 	.word	0xf0f0f0f1

08011700 <_Index2Color_M4444I>:
 8011700:	490b      	ldr	r1, [pc, #44]	; (8011730 <_Index2Color_M4444I+0x30>)
 8011702:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8011706:	f3c0 3303 	ubfx	r3, r0, #12, #4
 801170a:	5c8a      	ldrb	r2, [r1, r2]
 801170c:	5ccb      	ldrb	r3, [r1, r3]
 801170e:	0412      	lsls	r2, r2, #16
 8011710:	b410      	push	{r4}
 8011712:	f000 040f 	and.w	r4, r0, #15
 8011716:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 801171a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801171e:	5d0c      	ldrb	r4, [r1, r4]
 8011720:	5c08      	ldrb	r0, [r1, r0]
 8011722:	4423      	add	r3, r4
 8011724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011728:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	08026ec0 	.word	0x08026ec0

08011734 <_GetIndexMask_M4444I>:
 8011734:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop

0801173c <_Color2IndexBulk_M4444I>:
 801173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173e:	4f1d      	ldr	r7, [pc, #116]	; (80117b4 <_Color2IndexBulk_M4444I+0x78>)
 8011740:	f8d7 e000 	ldr.w	lr, [r7]
 8011744:	f1be 0f00 	cmp.w	lr, #0
 8011748:	d003      	beq.n	8011752 <_Color2IndexBulk_M4444I+0x16>
 801174a:	46f4      	mov	ip, lr
 801174c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011750:	4760      	bx	ip
 8011752:	4606      	mov	r6, r0
 8011754:	460c      	mov	r4, r1
 8011756:	4615      	mov	r5, r2
 8011758:	461f      	mov	r7, r3
 801175a:	4817      	ldr	r0, [pc, #92]	; (80117b8 <_Color2IndexBulk_M4444I+0x7c>)
 801175c:	f856 3b04 	ldr.w	r3, [r6], #4
 8011760:	3d01      	subs	r5, #1
 8011762:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8011766:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 801176a:	b2d9      	uxtb	r1, r3
 801176c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011770:	f10c 0308 	add.w	r3, ip, #8
 8011774:	f10e 0e08 	add.w	lr, lr, #8
 8011778:	f101 0108 	add.w	r1, r1, #8
 801177c:	f102 0208 	add.w	r2, r2, #8
 8011780:	fba0 c303 	umull	ip, r3, r0, r3
 8011784:	fba0 c101 	umull	ip, r1, r0, r1
 8011788:	fba0 ce0e 	umull	ip, lr, r0, lr
 801178c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011790:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8011794:	fba0 c202 	umull	ip, r2, r0, r2
 8011798:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801179c:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 80117a0:	f022 020f 	bic.w	r2, r2, #15
 80117a4:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80117a8:	4413      	add	r3, r2
 80117aa:	8023      	strh	r3, [r4, #0]
 80117ac:	443c      	add	r4, r7
 80117ae:	d1d5      	bne.n	801175c <_Color2IndexBulk_M4444I+0x20>
 80117b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b2:	bf00      	nop
 80117b4:	200001cc 	.word	0x200001cc
 80117b8:	f0f0f0f1 	.word	0xf0f0f0f1

080117bc <_Index2ColorBulk_M4444I>:
 80117bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c0:	4c17      	ldr	r4, [pc, #92]	; (8011820 <_Index2ColorBulk_M4444I+0x64>)
 80117c2:	6864      	ldr	r4, [r4, #4]
 80117c4:	b11c      	cbz	r4, 80117ce <_Index2ColorBulk_M4444I+0x12>
 80117c6:	46a4      	mov	ip, r4
 80117c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117cc:	4760      	bx	ip
 80117ce:	468c      	mov	ip, r1
 80117d0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80117d4:	4680      	mov	r8, r0
 80117d6:	1e50      	subs	r0, r2, #1
 80117d8:	4411      	add	r1, r2
 80117da:	f1c3 0e00 	rsb	lr, r3, #0
 80117de:	4e11      	ldr	r6, [pc, #68]	; (8011824 <_Index2ColorBulk_M4444I+0x68>)
 80117e0:	fb03 8300 	mla	r3, r3, r0, r8
 80117e4:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80117e8:	e000      	b.n	80117ec <_Index2ColorBulk_M4444I+0x30>
 80117ea:	3801      	subs	r0, #1
 80117ec:	881a      	ldrh	r2, [r3, #0]
 80117ee:	4473      	add	r3, lr
 80117f0:	0b17      	lsrs	r7, r2, #12
 80117f2:	f002 040f 	and.w	r4, r2, #15
 80117f6:	f3c2 2c03 	ubfx	ip, r2, #8, #4
 80117fa:	f3c2 1503 	ubfx	r5, r2, #4, #4
 80117fe:	5df7      	ldrb	r7, [r6, r7]
 8011800:	5d34      	ldrb	r4, [r6, r4]
 8011802:	f816 200c 	ldrb.w	r2, [r6, ip]
 8011806:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 801180a:	5d75      	ldrb	r5, [r6, r5]
 801180c:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8011810:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8011814:	f841 2904 	str.w	r2, [r1], #-4
 8011818:	2800      	cmp	r0, #0
 801181a:	d1e6      	bne.n	80117ea <_Index2ColorBulk_M4444I+0x2e>
 801181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011820:	200001cc 	.word	0x200001cc
 8011824:	08026ec0 	.word	0x08026ec0

08011828 <GUICC_M4444I_SetCustColorConv>:
 8011828:	4b01      	ldr	r3, [pc, #4]	; (8011830 <GUICC_M4444I_SetCustColorConv+0x8>)
 801182a:	e883 0003 	stmia.w	r3, {r0, r1}
 801182e:	4770      	bx	lr
 8011830:	200001cc 	.word	0x200001cc

08011834 <_Color2Index_M8888I>:
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop

08011838 <_GetIndexMask_M8888I>:
 8011838:	f04f 30ff 	mov.w	r0, #4294967295
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop

08011840 <_Color2IndexBulk_M8888I>:
 8011840:	b410      	push	{r4}
 8011842:	f850 4b04 	ldr.w	r4, [r0], #4
 8011846:	3a01      	subs	r2, #1
 8011848:	600c      	str	r4, [r1, #0]
 801184a:	4419      	add	r1, r3
 801184c:	d1f9      	bne.n	8011842 <_Color2IndexBulk_M8888I+0x2>
 801184e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011852:	4770      	bx	lr

08011854 <_Index2ColorBulk_M8888I>:
 8011854:	b410      	push	{r4}
 8011856:	6804      	ldr	r4, [r0, #0]
 8011858:	3a01      	subs	r2, #1
 801185a:	4418      	add	r0, r3
 801185c:	f841 4b04 	str.w	r4, [r1], #4
 8011860:	d1f9      	bne.n	8011856 <_Index2ColorBulk_M8888I+0x2>
 8011862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011866:	4770      	bx	lr

08011868 <GUICC_M8888I_SetCustColorConv>:
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop

0801186c <LCD_Index2Color_565>:
 801186c:	b430      	push	{r4, r5}
 801186e:	4909      	ldr	r1, [pc, #36]	; (8011894 <LCD_Index2Color_565+0x28>)
 8011870:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8011874:	f000 051f 	and.w	r5, r0, #31
 8011878:	4c07      	ldr	r4, [pc, #28]	; (8011898 <LCD_Index2Color_565+0x2c>)
 801187a:	f3c0 1245 	ubfx	r2, r0, #5, #6
 801187e:	5ccb      	ldrb	r3, [r1, r3]
 8011880:	5d48      	ldrb	r0, [r1, r5]
 8011882:	5ca2      	ldrb	r2, [r4, r2]
 8011884:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8011888:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 801188c:	bc30      	pop	{r4, r5}
 801188e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011892:	4770      	bx	lr
 8011894:	08026ea0 	.word	0x08026ea0
 8011898:	08026e60 	.word	0x08026e60

0801189c <_Color2Index_565>:
 801189c:	b410      	push	{r4}
 801189e:	4a08      	ldr	r2, [pc, #32]	; (80118c0 <_Color2Index_565+0x24>)
 80118a0:	b2c4      	uxtb	r4, r0
 80118a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80118a6:	4907      	ldr	r1, [pc, #28]	; (80118c4 <_Color2Index_565+0x28>)
 80118a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80118ac:	5cd3      	ldrb	r3, [r2, r3]
 80118ae:	5d12      	ldrb	r2, [r2, r4]
 80118b0:	5c08      	ldrb	r0, [r1, r0]
 80118b2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 80118b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ba:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80118be:	4770      	bx	lr
 80118c0:	08026c60 	.word	0x08026c60
 80118c4:	08026b60 	.word	0x08026b60

080118c8 <_GetIndexMask_565>:
 80118c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop

080118d0 <_Color2IndexBulk>:
 80118d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d2:	f8df c034 	ldr.w	ip, [pc, #52]	; 8011908 <_Color2IndexBulk+0x38>
 80118d6:	4f0b      	ldr	r7, [pc, #44]	; (8011904 <_Color2IndexBulk+0x34>)
 80118d8:	f850 4b04 	ldr.w	r4, [r0], #4
 80118dc:	3a01      	subs	r2, #1
 80118de:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80118e2:	fa5f fe84 	uxtb.w	lr, r4
 80118e6:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80118ea:	5d7d      	ldrb	r5, [r7, r5]
 80118ec:	f817 400e 	ldrb.w	r4, [r7, lr]
 80118f0:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80118f4:	eb05 24c4 	add.w	r4, r5, r4, lsl #11
 80118f8:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 80118fc:	800c      	strh	r4, [r1, #0]
 80118fe:	4419      	add	r1, r3
 8011900:	d1ea      	bne.n	80118d8 <_Color2IndexBulk+0x8>
 8011902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011904:	08026c60 	.word	0x08026c60
 8011908:	08026b60 	.word	0x08026b60

0801190c <_Index2ColorBulk>:
 801190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801190e:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8011912:	1e56      	subs	r6, r2, #1
 8011914:	4f10      	ldr	r7, [pc, #64]	; (8011958 <_Index2ColorBulk+0x4c>)
 8011916:	f1c3 0c00 	rsb	ip, r3, #0
 801191a:	4414      	add	r4, r2
 801191c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 801195c <_Index2ColorBulk+0x50>
 8011920:	fb03 0006 	mla	r0, r3, r6, r0
 8011924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011928:	e000      	b.n	801192c <_Index2ColorBulk+0x20>
 801192a:	3e01      	subs	r6, #1
 801192c:	8802      	ldrh	r2, [r0, #0]
 801192e:	4460      	add	r0, ip
 8011930:	0ad3      	lsrs	r3, r2, #11
 8011932:	f002 041f 	and.w	r4, r2, #31
 8011936:	f3c2 1545 	ubfx	r5, r2, #5, #6
 801193a:	5d3a      	ldrb	r2, [r7, r4]
 801193c:	5cfc      	ldrb	r4, [r7, r3]
 801193e:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8011942:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8011946:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 801194a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801194e:	f841 2904 	str.w	r2, [r1], #-4
 8011952:	2e00      	cmp	r6, #0
 8011954:	d1e9      	bne.n	801192a <_Index2ColorBulk+0x1e>
 8011956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011958:	08026ea0 	.word	0x08026ea0
 801195c:	08026e60 	.word	0x08026e60

08011960 <_Color2Index_888>:
 8011960:	0403      	lsls	r3, r0, #16
 8011962:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011966:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801196a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801196e:	4313      	orrs	r3, r2
 8011970:	4318      	orrs	r0, r3
 8011972:	4770      	bx	lr

08011974 <_GetIndexMask_888>:
 8011974:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <_Color2IndexBulk>:
 801197c:	b470      	push	{r4, r5, r6}
 801197e:	f850 4b04 	ldr.w	r4, [r0], #4
 8011982:	3a01      	subs	r2, #1
 8011984:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8011988:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801198c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011990:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8011994:	ea45 0506 	orr.w	r5, r5, r6
 8011998:	ea44 0405 	orr.w	r4, r4, r5
 801199c:	600c      	str	r4, [r1, #0]
 801199e:	4419      	add	r1, r3
 80119a0:	d1ed      	bne.n	801197e <_Color2IndexBulk+0x2>
 80119a2:	bc70      	pop	{r4, r5, r6}
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop

080119a8 <_Index2ColorBulk>:
 80119a8:	b470      	push	{r4, r5, r6}
 80119aa:	6804      	ldr	r4, [r0, #0]
 80119ac:	3a01      	subs	r2, #1
 80119ae:	4418      	add	r0, r3
 80119b0:	ea4f 4504 	mov.w	r5, r4, lsl #16
 80119b4:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80119b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80119bc:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 80119c0:	ea45 0506 	orr.w	r5, r5, r6
 80119c4:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 80119c8:	ea44 0405 	orr.w	r4, r4, r5
 80119cc:	f841 4b04 	str.w	r4, [r1], #4
 80119d0:	d1eb      	bne.n	80119aa <_Index2ColorBulk+0x2>
 80119d2:	bc70      	pop	{r4, r5, r6}
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop

080119d8 <_Color2Index_8888>:
 80119d8:	43c3      	mvns	r3, r0
 80119da:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80119de:	0402      	lsls	r2, r0, #16
 80119e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80119e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80119e8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80119ec:	430b      	orrs	r3, r1
 80119ee:	4313      	orrs	r3, r2
 80119f0:	4318      	orrs	r0, r3
 80119f2:	4770      	bx	lr

080119f4 <_GetIndexMask_8888>:
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop

080119fc <_Color2IndexBulk>:
 80119fc:	b4f0      	push	{r4, r5, r6, r7}
 80119fe:	f850 4b04 	ldr.w	r4, [r0], #4
 8011a02:	3a01      	subs	r2, #1
 8011a04:	ea6f 0504 	mvn.w	r5, r4
 8011a08:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8011a0c:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8011a10:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011a14:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8011a18:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8011a1c:	ea45 0507 	orr.w	r5, r5, r7
 8011a20:	ea45 0506 	orr.w	r5, r5, r6
 8011a24:	ea44 0405 	orr.w	r4, r4, r5
 8011a28:	600c      	str	r4, [r1, #0]
 8011a2a:	4419      	add	r1, r3
 8011a2c:	d1e7      	bne.n	80119fe <_Color2IndexBulk+0x2>
 8011a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop

08011a34 <_Index2ColorBulk>:
 8011a34:	b4f0      	push	{r4, r5, r6, r7}
 8011a36:	6804      	ldr	r4, [r0, #0]
 8011a38:	3a01      	subs	r2, #1
 8011a3a:	4418      	add	r0, r3
 8011a3c:	ea6f 0504 	mvn.w	r5, r4
 8011a40:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8011a44:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8011a48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011a4c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8011a50:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8011a54:	ea45 0507 	orr.w	r5, r5, r7
 8011a58:	ea45 0506 	orr.w	r5, r5, r6
 8011a5c:	ea44 0405 	orr.w	r4, r4, r5
 8011a60:	f841 4b04 	str.w	r4, [r1], #4
 8011a64:	d1e7      	bne.n	8011a36 <_Index2ColorBulk+0x2>
 8011a66:	bcf0      	pop	{r4, r5, r6, r7}
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop

08011a6c <LCD_Index2Color_8888>:
 8011a6c:	43c3      	mvns	r3, r0
 8011a6e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011a72:	0402      	lsls	r2, r0, #16
 8011a74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011a78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a7c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011a80:	430b      	orrs	r3, r1
 8011a82:	4313      	orrs	r3, r2
 8011a84:	4318      	orrs	r0, r3
 8011a86:	4770      	bx	lr

08011a88 <LCD_Index2Color_888>:
 8011a88:	0403      	lsls	r3, r0, #16
 8011a8a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011a8e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011a92:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011a96:	4313      	orrs	r3, r2
 8011a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a9c:	4318      	orrs	r0, r3
 8011a9e:	4770      	bx	lr

08011aa0 <LCD_Index2Color_M565>:
 8011aa0:	490a      	ldr	r1, [pc, #40]	; (8011acc <LCD_Index2Color_M565+0x2c>)
 8011aa2:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8011aa6:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8011aaa:	f000 001f 	and.w	r0, r0, #31
 8011aae:	5c8a      	ldrb	r2, [r1, r2]
 8011ab0:	5c08      	ldrb	r0, [r1, r0]
 8011ab2:	0412      	lsls	r2, r2, #16
 8011ab4:	b410      	push	{r4}
 8011ab6:	4c06      	ldr	r4, [pc, #24]	; (8011ad0 <LCD_Index2Color_M565+0x30>)
 8011ab8:	5ce3      	ldrb	r3, [r4, r3]
 8011aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011abe:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8011ac2:	4418      	add	r0, r3
 8011ac4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop
 8011acc:	08026ea0 	.word	0x08026ea0
 8011ad0:	08026e60 	.word	0x08026e60

08011ad4 <_Color2Index_M565>:
 8011ad4:	4a08      	ldr	r2, [pc, #32]	; (8011af8 <_Color2Index_M565+0x24>)
 8011ad6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011ada:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011ade:	b2c0      	uxtb	r0, r0
 8011ae0:	5cd3      	ldrb	r3, [r2, r3]
 8011ae2:	5c10      	ldrb	r0, [r2, r0]
 8011ae4:	02db      	lsls	r3, r3, #11
 8011ae6:	b410      	push	{r4}
 8011ae8:	4c04      	ldr	r4, [pc, #16]	; (8011afc <_Color2Index_M565+0x28>)
 8011aea:	5c61      	ldrb	r1, [r4, r1]
 8011aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011af0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011af4:	4418      	add	r0, r3
 8011af6:	4770      	bx	lr
 8011af8:	08026c60 	.word	0x08026c60
 8011afc:	08026b60 	.word	0x08026b60

08011b00 <_GetIndexMask_M565>:
 8011b00:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop

08011b08 <_Color2IndexBulk>:
 8011b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b0a:	4f13      	ldr	r7, [pc, #76]	; (8011b58 <_Color2IndexBulk+0x50>)
 8011b0c:	f8d7 e000 	ldr.w	lr, [r7]
 8011b10:	f1be 0f00 	cmp.w	lr, #0
 8011b14:	d003      	beq.n	8011b1e <_Color2IndexBulk+0x16>
 8011b16:	46f4      	mov	ip, lr
 8011b18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011b1c:	4760      	bx	ip
 8011b1e:	4606      	mov	r6, r0
 8011b20:	460c      	mov	r4, r1
 8011b22:	4615      	mov	r5, r2
 8011b24:	461f      	mov	r7, r3
 8011b26:	f8df e038 	ldr.w	lr, [pc, #56]	; 8011b60 <_Color2IndexBulk+0x58>
 8011b2a:	480c      	ldr	r0, [pc, #48]	; (8011b5c <_Color2IndexBulk+0x54>)
 8011b2c:	f856 3b04 	ldr.w	r3, [r6], #4
 8011b30:	3d01      	subs	r5, #1
 8011b32:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011b36:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011b3a:	b2d9      	uxtb	r1, r3
 8011b3c:	5c82      	ldrb	r2, [r0, r2]
 8011b3e:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8011b42:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 8011b46:	5c41      	ldrb	r1, [r0, r1]
 8011b48:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8011b4c:	440b      	add	r3, r1
 8011b4e:	8023      	strh	r3, [r4, #0]
 8011b50:	443c      	add	r4, r7
 8011b52:	d1eb      	bne.n	8011b2c <_Color2IndexBulk+0x24>
 8011b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b56:	bf00      	nop
 8011b58:	200001d4 	.word	0x200001d4
 8011b5c:	08026c60 	.word	0x08026c60
 8011b60:	08026b60 	.word	0x08026b60

08011b64 <_Index2ColorBulk>:
 8011b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b68:	4c17      	ldr	r4, [pc, #92]	; (8011bc8 <_Index2ColorBulk+0x64>)
 8011b6a:	6864      	ldr	r4, [r4, #4]
 8011b6c:	b11c      	cbz	r4, 8011b76 <_Index2ColorBulk+0x12>
 8011b6e:	46a4      	mov	ip, r4
 8011b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b74:	4760      	bx	ip
 8011b76:	468c      	mov	ip, r1
 8011b78:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8011b7c:	4680      	mov	r8, r0
 8011b7e:	1e50      	subs	r0, r2, #1
 8011b80:	4411      	add	r1, r2
 8011b82:	f1c3 0e00 	rsb	lr, r3, #0
 8011b86:	4e11      	ldr	r6, [pc, #68]	; (8011bcc <_Index2ColorBulk+0x68>)
 8011b88:	fb03 8300 	mla	r3, r3, r0, r8
 8011b8c:	4f10      	ldr	r7, [pc, #64]	; (8011bd0 <_Index2ColorBulk+0x6c>)
 8011b8e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8011b92:	e000      	b.n	8011b96 <_Index2ColorBulk+0x32>
 8011b94:	3801      	subs	r0, #1
 8011b96:	881a      	ldrh	r2, [r3, #0]
 8011b98:	4473      	add	r3, lr
 8011b9a:	f002 041f 	and.w	r4, r2, #31
 8011b9e:	ea4f 2cd2 	mov.w	ip, r2, lsr #11
 8011ba2:	f3c2 1545 	ubfx	r5, r2, #5, #6
 8011ba6:	5d34      	ldrb	r4, [r6, r4]
 8011ba8:	f816 200c 	ldrb.w	r2, [r6, ip]
 8011bac:	5d7d      	ldrb	r5, [r7, r5]
 8011bae:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8011bb2:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8011bb6:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8011bba:	f841 2904 	str.w	r2, [r1], #-4
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d1e8      	bne.n	8011b94 <_Index2ColorBulk+0x30>
 8011bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200001d4 	.word	0x200001d4
 8011bcc:	08026ea0 	.word	0x08026ea0
 8011bd0:	08026e60 	.word	0x08026e60

08011bd4 <GUICC_M565_SetCustColorConv>:
 8011bd4:	4b01      	ldr	r3, [pc, #4]	; (8011bdc <GUICC_M565_SetCustColorConv+0x8>)
 8011bd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bda:	4770      	bx	lr
 8011bdc:	200001d4 	.word	0x200001d4

08011be0 <_Color2Index_M888>:
 8011be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop

08011be8 <_GetIndexMask_M888>:
 8011be8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop

08011bf0 <_Color2IndexBulk>:
 8011bf0:	b410      	push	{r4}
 8011bf2:	f850 4b04 	ldr.w	r4, [r0], #4
 8011bf6:	3a01      	subs	r2, #1
 8011bf8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8011bfc:	600c      	str	r4, [r1, #0]
 8011bfe:	4419      	add	r1, r3
 8011c00:	d1f7      	bne.n	8011bf2 <_Color2IndexBulk+0x2>
 8011c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <_Index2ColorBulk>:
 8011c08:	b410      	push	{r4}
 8011c0a:	6804      	ldr	r4, [r0, #0]
 8011c0c:	3a01      	subs	r2, #1
 8011c0e:	4418      	add	r0, r3
 8011c10:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 8011c14:	f841 4b04 	str.w	r4, [r1], #4
 8011c18:	d1f7      	bne.n	8011c0a <_Index2ColorBulk+0x2>
 8011c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <GUICC_M888_SetCustColorConv>:
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop

08011c24 <_Color2Index_M8888>:
 8011c24:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop

08011c2c <_GetIndexMask_M8888>:
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop

08011c34 <_Color2IndexBulk>:
 8011c34:	b410      	push	{r4}
 8011c36:	f850 4b04 	ldr.w	r4, [r0], #4
 8011c3a:	3a01      	subs	r2, #1
 8011c3c:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8011c40:	600c      	str	r4, [r1, #0]
 8011c42:	4419      	add	r1, r3
 8011c44:	d1f7      	bne.n	8011c36 <_Color2IndexBulk+0x2>
 8011c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <_Index2ColorBulk>:
 8011c4c:	b410      	push	{r4}
 8011c4e:	6804      	ldr	r4, [r0, #0]
 8011c50:	3a01      	subs	r2, #1
 8011c52:	4418      	add	r0, r3
 8011c54:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8011c58:	f841 4b04 	str.w	r4, [r1], #4
 8011c5c:	d1f7      	bne.n	8011c4e <_Index2ColorBulk+0x2>
 8011c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <_Index2Color_M8888>:
 8011c64:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop

08011c6c <LCD_Index2Color_M8888I>:
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop

08011c70 <LCD_Index2Color_M888>:
 8011c70:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop

08011c78 <GUI_DrawRect>:
 8011c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c7c:	b082      	sub	sp, #8
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4689      	mov	r9, r1
 8011c82:	4692      	mov	sl, r2
 8011c84:	4698      	mov	r8, r3
 8011c86:	f006 f857 	bl	8017d38 <GUI_Lock>
 8011c8a:	4b1e      	ldr	r3, [pc, #120]	; (8011d04 <GUI_DrawRect+0x8c>)
 8011c8c:	4668      	mov	r0, sp
 8011c8e:	681f      	ldr	r7, [r3, #0]
 8011c90:	7e3e      	ldrb	r6, [r7, #24]
 8011c92:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8011c94:	3e01      	subs	r6, #1
 8011c96:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 8011c98:	442c      	add	r4, r5
 8011c9a:	4455      	add	r5, sl
 8011c9c:	b2b2      	uxth	r2, r6
 8011c9e:	44b9      	add	r9, r7
 8011ca0:	44b8      	add	r8, r7
 8011ca2:	1aa6      	subs	r6, r4, r2
 8011ca4:	1951      	adds	r1, r2, r5
 8011ca6:	ebc2 0309 	rsb	r3, r2, r9
 8011caa:	4442      	add	r2, r8
 8011cac:	f8ad 6000 	strh.w	r6, [sp]
 8011cb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011cb4:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011cb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011cbc:	f00e fb14 	bl	80202e8 <WM__InitIVRSearch>
 8011cc0:	b1d8      	cbz	r0, 8011cfa <GUI_DrawRect+0x82>
 8011cc2:	f109 0701 	add.w	r7, r9, #1
 8011cc6:	f108 36ff 	add.w	r6, r8, #4294967295
 8011cca:	462a      	mov	r2, r5
 8011ccc:	4649      	mov	r1, r9
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f007 fd80 	bl	80197d4 <LCD_DrawHLine>
 8011cd4:	462a      	mov	r2, r5
 8011cd6:	4641      	mov	r1, r8
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f007 fd7b 	bl	80197d4 <LCD_DrawHLine>
 8011cde:	4632      	mov	r2, r6
 8011ce0:	4639      	mov	r1, r7
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f007 fd9e 	bl	8019824 <LCD_DrawVLine>
 8011ce8:	4632      	mov	r2, r6
 8011cea:	4639      	mov	r1, r7
 8011cec:	4628      	mov	r0, r5
 8011cee:	f007 fd99 	bl	8019824 <LCD_DrawVLine>
 8011cf2:	f00e f9cf 	bl	8020094 <WM__GetNextIVR>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d1e7      	bne.n	8011cca <GUI_DrawRect+0x52>
 8011cfa:	f006 f813 	bl	8017d24 <GUI_Unlock>
 8011cfe:	b002      	add	sp, #8
 8011d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d04:	20000018 	.word	0x20000018

08011d08 <_AddFreeMemory>:
 8011d08:	4bc0      	ldr	r3, [pc, #768]	; (801200c <_AddFreeMemory+0x304>)
 8011d0a:	68da      	ldr	r2, [r3, #12]
 8011d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d0e:	3a01      	subs	r2, #1
 8011d10:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8011d12:	180d      	adds	r5, r1, r0
 8011d14:	4422      	add	r2, r4
 8011d16:	42aa      	cmp	r2, r5
 8011d18:	d303      	bcc.n	8011d22 <_AddFreeMemory+0x1a>
 8011d1a:	580a      	ldr	r2, [r1, r0]
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	f000 80a1 	beq.w	8011e64 <_AddFreeMemory+0x15c>
 8011d22:	428c      	cmp	r4, r1
 8011d24:	d205      	bcs.n	8011d32 <_AddFreeMemory+0x2a>
 8011d26:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8011d2a:	1a8a      	subs	r2, r1, r2
 8011d2c:	6814      	ldr	r4, [r2, #0]
 8011d2e:	2c00      	cmp	r4, #0
 8011d30:	d04a      	beq.n	8011dc8 <_AddFreeMemory+0xc0>
 8011d32:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8011d36:	4ab5      	ldr	r2, [pc, #724]	; (801200c <_AddFreeMemory+0x304>)
 8011d38:	42a0      	cmp	r0, r4
 8011d3a:	f080 811e 	bcs.w	8011f7a <_AddFreeMemory+0x272>
 8011d3e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8011d42:	42a0      	cmp	r0, r4
 8011d44:	f080 811b 	bcs.w	8011f7e <_AddFreeMemory+0x276>
 8011d48:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8011d4c:	42a0      	cmp	r0, r4
 8011d4e:	f080 8118 	bcs.w	8011f82 <_AddFreeMemory+0x27a>
 8011d52:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 8011d56:	42a0      	cmp	r0, r4
 8011d58:	f080 8115 	bcs.w	8011f86 <_AddFreeMemory+0x27e>
 8011d5c:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8011d60:	42a0      	cmp	r0, r4
 8011d62:	f080 8112 	bcs.w	8011f8a <_AddFreeMemory+0x282>
 8011d66:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 8011d6a:	42a0      	cmp	r0, r4
 8011d6c:	f080 810f 	bcs.w	8011f8e <_AddFreeMemory+0x286>
 8011d70:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8011d74:	42a0      	cmp	r0, r4
 8011d76:	f080 810c 	bcs.w	8011f92 <_AddFreeMemory+0x28a>
 8011d7a:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8011d7e:	42a0      	cmp	r0, r4
 8011d80:	f080 8109 	bcs.w	8011f96 <_AddFreeMemory+0x28e>
 8011d84:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8011d86:	42a0      	cmp	r0, r4
 8011d88:	f080 8107 	bcs.w	8011f9a <_AddFreeMemory+0x292>
 8011d8c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8011d8e:	4290      	cmp	r0, r2
 8011d90:	f080 8105 	bcs.w	8011f9e <_AddFreeMemory+0x296>
 8011d94:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8011d96:	4a9d      	ldr	r2, [pc, #628]	; (801200c <_AddFreeMemory+0x304>)
 8011d98:	42a0      	cmp	r0, r4
 8011d9a:	f080 8102 	bcs.w	8011fa2 <_AddFreeMemory+0x29a>
 8011d9e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8011da0:	42a0      	cmp	r0, r4
 8011da2:	f080 8100 	bcs.w	8011fa6 <_AddFreeMemory+0x29e>
 8011da6:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8011da8:	42a0      	cmp	r0, r4
 8011daa:	f080 80fe 	bcs.w	8011faa <_AddFreeMemory+0x2a2>
 8011dae:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8011db0:	42a0      	cmp	r0, r4
 8011db2:	f080 80fc 	bcs.w	8011fae <_AddFreeMemory+0x2a6>
 8011db6:	6c94      	ldr	r4, [r2, #72]	; 0x48
 8011db8:	42a0      	cmp	r0, r4
 8011dba:	f080 80fa 	bcs.w	8011fb2 <_AddFreeMemory+0x2aa>
 8011dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011dc0:	4290      	cmp	r0, r2
 8011dc2:	f080 80a6 	bcs.w	8011f12 <_AddFreeMemory+0x20a>
 8011dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dc8:	6851      	ldr	r1, [r2, #4]
 8011dca:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8011dce:	4408      	add	r0, r1
 8011dd0:	4c8e      	ldr	r4, [pc, #568]	; (801200c <_AddFreeMemory+0x304>)
 8011dd2:	42a9      	cmp	r1, r5
 8011dd4:	f080 80f9 	bcs.w	8011fca <_AddFreeMemory+0x2c2>
 8011dd8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8011ddc:	42a9      	cmp	r1, r5
 8011dde:	f080 8106 	bcs.w	8011fee <_AddFreeMemory+0x2e6>
 8011de2:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8011de6:	42a9      	cmp	r1, r5
 8011de8:	f080 80ff 	bcs.w	8011fea <_AddFreeMemory+0x2e2>
 8011dec:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8011df0:	42a9      	cmp	r1, r5
 8011df2:	f080 80f8 	bcs.w	8011fe6 <_AddFreeMemory+0x2de>
 8011df6:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8011dfa:	42a9      	cmp	r1, r5
 8011dfc:	f080 80fc 	bcs.w	8011ff8 <_AddFreeMemory+0x2f0>
 8011e00:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8011e04:	42a9      	cmp	r1, r5
 8011e06:	f080 80ff 	bcs.w	8012008 <_AddFreeMemory+0x300>
 8011e0a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8011e0e:	42a9      	cmp	r1, r5
 8011e10:	f080 80f8 	bcs.w	8012004 <_AddFreeMemory+0x2fc>
 8011e14:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8011e18:	42a1      	cmp	r1, r4
 8011e1a:	f080 80f1 	bcs.w	8012000 <_AddFreeMemory+0x2f8>
 8011e1e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8011e20:	4c7a      	ldr	r4, [pc, #488]	; (801200c <_AddFreeMemory+0x304>)
 8011e22:	42a9      	cmp	r1, r5
 8011e24:	f080 80ea 	bcs.w	8011ffc <_AddFreeMemory+0x2f4>
 8011e28:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8011e2a:	42a9      	cmp	r1, r5
 8011e2c:	f080 8113 	bcs.w	8012056 <_AddFreeMemory+0x34e>
 8011e30:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8011e32:	42a9      	cmp	r1, r5
 8011e34:	f080 810d 	bcs.w	8012052 <_AddFreeMemory+0x34a>
 8011e38:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8011e3a:	42a9      	cmp	r1, r5
 8011e3c:	f080 8107 	bcs.w	801204e <_AddFreeMemory+0x346>
 8011e40:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8011e42:	42a9      	cmp	r1, r5
 8011e44:	f080 8101 	bcs.w	801204a <_AddFreeMemory+0x342>
 8011e48:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8011e4a:	42a9      	cmp	r1, r5
 8011e4c:	f080 80fb 	bcs.w	8012046 <_AddFreeMemory+0x33e>
 8011e50:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8011e52:	42a9      	cmp	r1, r5
 8011e54:	f080 8104 	bcs.w	8012060 <_AddFreeMemory+0x358>
 8011e58:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8011e5a:	42a1      	cmp	r1, r4
 8011e5c:	f080 8081 	bcs.w	8011f62 <_AddFreeMemory+0x25a>
 8011e60:	4611      	mov	r1, r2
 8011e62:	e766      	b.n	8011d32 <_AddFreeMemory+0x2a>
 8011e64:	686a      	ldr	r2, [r5, #4]
 8011e66:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 8011e6a:	4410      	add	r0, r2
 8011e6c:	42b2      	cmp	r2, r6
 8011e6e:	f080 80ae 	bcs.w	8011fce <_AddFreeMemory+0x2c6>
 8011e72:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8011e76:	42b2      	cmp	r2, r6
 8011e78:	f080 80b2 	bcs.w	8011fe0 <_AddFreeMemory+0x2d8>
 8011e7c:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8011e80:	42b2      	cmp	r2, r6
 8011e82:	f080 80aa 	bcs.w	8011fda <_AddFreeMemory+0x2d2>
 8011e86:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8011e8a:	42b2      	cmp	r2, r6
 8011e8c:	f080 80a2 	bcs.w	8011fd4 <_AddFreeMemory+0x2cc>
 8011e90:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8011e94:	42b2      	cmp	r2, r6
 8011e96:	f080 80ac 	bcs.w	8011ff2 <_AddFreeMemory+0x2ea>
 8011e9a:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8011e9e:	42b2      	cmp	r2, r6
 8011ea0:	f080 80bf 	bcs.w	8012022 <_AddFreeMemory+0x31a>
 8011ea4:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8011ea8:	42b2      	cmp	r2, r6
 8011eaa:	f080 80b7 	bcs.w	801201c <_AddFreeMemory+0x314>
 8011eae:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8011eb2:	42b2      	cmp	r2, r6
 8011eb4:	f080 80af 	bcs.w	8012016 <_AddFreeMemory+0x30e>
 8011eb8:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8011eba:	42ba      	cmp	r2, r7
 8011ebc:	f080 80a8 	bcs.w	8012010 <_AddFreeMemory+0x308>
 8011ec0:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8011ec2:	42ba      	cmp	r2, r7
 8011ec4:	f080 80b9 	bcs.w	801203a <_AddFreeMemory+0x332>
 8011ec8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8011eca:	42ba      	cmp	r2, r7
 8011ecc:	f080 80b2 	bcs.w	8012034 <_AddFreeMemory+0x32c>
 8011ed0:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8011ed2:	42ba      	cmp	r2, r7
 8011ed4:	f080 80ab 	bcs.w	801202e <_AddFreeMemory+0x326>
 8011ed8:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8011eda:	42ba      	cmp	r2, r7
 8011edc:	f080 80a4 	bcs.w	8012028 <_AddFreeMemory+0x320>
 8011ee0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8011ee2:	42ba      	cmp	r2, r7
 8011ee4:	f080 80ac 	bcs.w	8012040 <_AddFreeMemory+0x338>
 8011ee8:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8011eea:	42ba      	cmp	r2, r7
 8011eec:	f080 80b5 	bcs.w	801205a <_AddFreeMemory+0x352>
 8011ef0:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8011ef2:	42b2      	cmp	r2, r6
 8011ef4:	f4ff af15 	bcc.w	8011d22 <_AddFreeMemory+0x1a>
 8011ef8:	f04f 0e00 	mov.w	lr, #0
 8011efc:	681e      	ldr	r6, [r3, #0]
 8011efe:	68af      	ldr	r7, [r5, #8]
 8011f00:	1ab2      	subs	r2, r6, r2
 8011f02:	68ed      	ldr	r5, [r5, #12]
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	b107      	cbz	r7, 8011f0a <_AddFreeMemory+0x202>
 8011f08:	607d      	str	r5, [r7, #4]
 8011f0a:	2d00      	cmp	r5, #0
 8011f0c:	d058      	beq.n	8011fc0 <_AddFreeMemory+0x2b8>
 8011f0e:	602f      	str	r7, [r5, #0]
 8011f10:	e707      	b.n	8011d22 <_AddFreeMemory+0x1a>
 8011f12:	2200      	movs	r2, #0
 8011f14:	3208      	adds	r2, #8
 8011f16:	2700      	movs	r7, #0
 8011f18:	180d      	adds	r5, r1, r0
 8011f1a:	f101 0608 	add.w	r6, r1, #8
 8011f1e:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8011f22:	6864      	ldr	r4, [r4, #4]
 8011f24:	6048      	str	r0, [r1, #4]
 8011f26:	608c      	str	r4, [r1, #8]
 8011f28:	6109      	str	r1, [r1, #16]
 8011f2a:	600f      	str	r7, [r1, #0]
 8011f2c:	f845 0c04 	str.w	r0, [r5, #-4]
 8011f30:	b104      	cbz	r4, 8011f34 <_AddFreeMemory+0x22c>
 8011f32:	6066      	str	r6, [r4, #4]
 8011f34:	681d      	ldr	r5, [r3, #0]
 8011f36:	2700      	movs	r7, #0
 8011f38:	608c      	str	r4, [r1, #8]
 8011f3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011f3e:	60cf      	str	r7, [r1, #12]
 8011f40:	1941      	adds	r1, r0, r5
 8011f42:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 8011f46:	6056      	str	r6, [r2, #4]
 8011f48:	6019      	str	r1, [r3, #0]
 8011f4a:	4a30      	ldr	r2, [pc, #192]	; (801200c <_AddFreeMemory+0x304>)
 8011f4c:	2c00      	cmp	r4, #0
 8011f4e:	f47f af3a 	bne.w	8011dc6 <_AddFreeMemory+0xbe>
 8011f52:	68d3      	ldr	r3, [r2, #12]
 8011f54:	6894      	ldr	r4, [r2, #8]
 8011f56:	1a59      	subs	r1, r3, r1
 8011f58:	42a1      	cmp	r1, r4
 8011f5a:	f67f af34 	bls.w	8011dc6 <_AddFreeMemory+0xbe>
 8011f5e:	6091      	str	r1, [r2, #8]
 8011f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f62:	2600      	movs	r6, #0
 8011f64:	681c      	ldr	r4, [r3, #0]
 8011f66:	6895      	ldr	r5, [r2, #8]
 8011f68:	1a61      	subs	r1, r4, r1
 8011f6a:	68d4      	ldr	r4, [r2, #12]
 8011f6c:	6019      	str	r1, [r3, #0]
 8011f6e:	b105      	cbz	r5, 8011f72 <_AddFreeMemory+0x26a>
 8011f70:	606c      	str	r4, [r5, #4]
 8011f72:	b304      	cbz	r4, 8011fb6 <_AddFreeMemory+0x2ae>
 8011f74:	6025      	str	r5, [r4, #0]
 8011f76:	4611      	mov	r1, r2
 8011f78:	e6db      	b.n	8011d32 <_AddFreeMemory+0x2a>
 8011f7a:	220f      	movs	r2, #15
 8011f7c:	e7ca      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f7e:	220e      	movs	r2, #14
 8011f80:	e7c8      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f82:	220d      	movs	r2, #13
 8011f84:	e7c6      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f86:	220c      	movs	r2, #12
 8011f88:	e7c4      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f8a:	220b      	movs	r2, #11
 8011f8c:	e7c2      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f8e:	220a      	movs	r2, #10
 8011f90:	e7c0      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f92:	2209      	movs	r2, #9
 8011f94:	e7be      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f96:	2208      	movs	r2, #8
 8011f98:	e7bc      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f9a:	2207      	movs	r2, #7
 8011f9c:	e7ba      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011f9e:	2206      	movs	r2, #6
 8011fa0:	e7b8      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011fa2:	2205      	movs	r2, #5
 8011fa4:	e7b6      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011fa6:	2204      	movs	r2, #4
 8011fa8:	e7b4      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011faa:	2203      	movs	r2, #3
 8011fac:	e7b2      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011fae:	2202      	movs	r2, #2
 8011fb0:	e7b0      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	e7ae      	b.n	8011f14 <_AddFreeMemory+0x20c>
 8011fb6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8011fba:	4611      	mov	r1, r2
 8011fbc:	6475      	str	r5, [r6, #68]	; 0x44
 8011fbe:	e6b8      	b.n	8011d32 <_AddFreeMemory+0x2a>
 8011fc0:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8011fc4:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 8011fc8:	e6ab      	b.n	8011d22 <_AddFreeMemory+0x1a>
 8011fca:	260f      	movs	r6, #15
 8011fcc:	e7ca      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8011fce:	f04f 0e0f 	mov.w	lr, #15
 8011fd2:	e793      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8011fd4:	f04f 0e0c 	mov.w	lr, #12
 8011fd8:	e790      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8011fda:	f04f 0e0d 	mov.w	lr, #13
 8011fde:	e78d      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8011fe0:	f04f 0e0e 	mov.w	lr, #14
 8011fe4:	e78a      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8011fe6:	260c      	movs	r6, #12
 8011fe8:	e7bc      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8011fea:	260d      	movs	r6, #13
 8011fec:	e7ba      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8011fee:	260e      	movs	r6, #14
 8011ff0:	e7b8      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8011ff2:	f04f 0e0b 	mov.w	lr, #11
 8011ff6:	e781      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8011ff8:	260b      	movs	r6, #11
 8011ffa:	e7b3      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8011ffc:	2607      	movs	r6, #7
 8011ffe:	e7b1      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8012000:	2608      	movs	r6, #8
 8012002:	e7af      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8012004:	2609      	movs	r6, #9
 8012006:	e7ad      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8012008:	260a      	movs	r6, #10
 801200a:	e7ab      	b.n	8011f64 <_AddFreeMemory+0x25c>
 801200c:	200466c0 	.word	0x200466c0
 8012010:	f04f 0e07 	mov.w	lr, #7
 8012014:	e772      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012016:	f04f 0e08 	mov.w	lr, #8
 801201a:	e76f      	b.n	8011efc <_AddFreeMemory+0x1f4>
 801201c:	f04f 0e09 	mov.w	lr, #9
 8012020:	e76c      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012022:	f04f 0e0a 	mov.w	lr, #10
 8012026:	e769      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012028:	f04f 0e03 	mov.w	lr, #3
 801202c:	e766      	b.n	8011efc <_AddFreeMemory+0x1f4>
 801202e:	f04f 0e04 	mov.w	lr, #4
 8012032:	e763      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012034:	f04f 0e05 	mov.w	lr, #5
 8012038:	e760      	b.n	8011efc <_AddFreeMemory+0x1f4>
 801203a:	f04f 0e06 	mov.w	lr, #6
 801203e:	e75d      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012040:	f04f 0e02 	mov.w	lr, #2
 8012044:	e75a      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012046:	2602      	movs	r6, #2
 8012048:	e78c      	b.n	8011f64 <_AddFreeMemory+0x25c>
 801204a:	2603      	movs	r6, #3
 801204c:	e78a      	b.n	8011f64 <_AddFreeMemory+0x25c>
 801204e:	2604      	movs	r6, #4
 8012050:	e788      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8012052:	2605      	movs	r6, #5
 8012054:	e786      	b.n	8011f64 <_AddFreeMemory+0x25c>
 8012056:	2606      	movs	r6, #6
 8012058:	e784      	b.n	8011f64 <_AddFreeMemory+0x25c>
 801205a:	f04f 0e01 	mov.w	lr, #1
 801205e:	e74d      	b.n	8011efc <_AddFreeMemory+0x1f4>
 8012060:	2601      	movs	r6, #1
 8012062:	e77f      	b.n	8011f64 <_AddFreeMemory+0x25c>

08012064 <_RemoveHoles>:
 8012064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012068:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012210 <_RemoveHoles+0x1ac>
 801206c:	b083      	sub	sp, #12
 801206e:	4682      	mov	sl, r0
 8012070:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8012074:	46c1      	mov	r9, r8
 8012076:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801207a:	3f01      	subs	r7, #1
 801207c:	685e      	ldr	r6, [r3, #4]
 801207e:	441f      	add	r7, r3
 8012080:	681d      	ldr	r5, [r3, #0]
 8012082:	b135      	cbz	r5, 8012092 <_RemoveHoles+0x2e>
 8012084:	4433      	add	r3, r6
 8012086:	429f      	cmp	r7, r3
 8012088:	d906      	bls.n	8012098 <_RemoveHoles+0x34>
 801208a:	e893 0060 	ldmia.w	r3, {r5, r6}
 801208e:	2d00      	cmp	r5, #0
 8012090:	d1f8      	bne.n	8012084 <_RemoveHoles+0x20>
 8012092:	1999      	adds	r1, r3, r6
 8012094:	428f      	cmp	r7, r1
 8012096:	d803      	bhi.n	80120a0 <_RemoveHoles+0x3c>
 8012098:	2001      	movs	r0, #1
 801209a:	b003      	add	sp, #12
 801209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a0:	599d      	ldr	r5, [r3, r6]
 80120a2:	684c      	ldr	r4, [r1, #4]
 80120a4:	b155      	cbz	r5, 80120bc <_RemoveHoles+0x58>
 80120a6:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80120aa:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 80120ae:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80120b2:	2801      	cmp	r0, #1
 80120b4:	d005      	beq.n	80120c2 <_RemoveHoles+0x5e>
 80120b6:	4626      	mov	r6, r4
 80120b8:	460b      	mov	r3, r1
 80120ba:	e7e2      	b.n	8012082 <_RemoveHoles+0x1e>
 80120bc:	4626      	mov	r6, r4
 80120be:	460b      	mov	r3, r1
 80120c0:	e7e7      	b.n	8012092 <_RemoveHoles+0x2e>
 80120c2:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 80120c6:	f8d9 b02c 	ldr.w	fp, [r9, #44]	; 0x2c
 80120ca:	42b0      	cmp	r0, r6
 80120cc:	d973      	bls.n	80121b6 <_RemoveHoles+0x152>
 80120ce:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 80120d2:	42b0      	cmp	r0, r6
 80120d4:	d975      	bls.n	80121c2 <_RemoveHoles+0x15e>
 80120d6:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 80120da:	42b0      	cmp	r0, r6
 80120dc:	d974      	bls.n	80121c8 <_RemoveHoles+0x164>
 80120de:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80120e2:	42b0      	cmp	r0, r6
 80120e4:	d96a      	bls.n	80121bc <_RemoveHoles+0x158>
 80120e6:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 80120ea:	42b0      	cmp	r0, r6
 80120ec:	d978      	bls.n	80121e0 <_RemoveHoles+0x17c>
 80120ee:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 80120f2:	4286      	cmp	r6, r0
 80120f4:	d26e      	bcs.n	80121d4 <_RemoveHoles+0x170>
 80120f6:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 80120fa:	4286      	cmp	r6, r0
 80120fc:	d26d      	bcs.n	80121da <_RemoveHoles+0x176>
 80120fe:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 8012102:	4286      	cmp	r6, r0
 8012104:	d263      	bcs.n	80121ce <_RemoveHoles+0x16a>
 8012106:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 801210a:	4286      	cmp	r6, r0
 801210c:	d274      	bcs.n	80121f8 <_RemoveHoles+0x194>
 801210e:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 8012112:	4286      	cmp	r6, r0
 8012114:	d273      	bcs.n	80121fe <_RemoveHoles+0x19a>
 8012116:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 801211a:	4286      	cmp	r6, r0
 801211c:	d266      	bcs.n	80121ec <_RemoveHoles+0x188>
 801211e:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8012122:	4286      	cmp	r6, r0
 8012124:	d265      	bcs.n	80121f2 <_RemoveHoles+0x18e>
 8012126:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801212a:	4286      	cmp	r6, r0
 801212c:	d25b      	bcs.n	80121e6 <_RemoveHoles+0x182>
 801212e:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8012132:	4286      	cmp	r6, r0
 8012134:	d269      	bcs.n	801220a <_RemoveHoles+0x1a6>
 8012136:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 801213a:	4286      	cmp	r6, r0
 801213c:	d21f      	bcs.n	801217e <_RemoveHoles+0x11a>
 801213e:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8012142:	4286      	cmp	r6, r0
 8012144:	d25e      	bcs.n	8012204 <_RemoveHoles+0x1a0>
 8012146:	6053      	str	r3, [r2, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	4622      	mov	r2, r4
 801214c:	f012 fcfc 	bl	8024b48 <memmove>
 8012150:	455d      	cmp	r5, fp
 8012152:	4603      	mov	r3, r0
 8012154:	d00b      	beq.n	801216e <_RemoveHoles+0x10a>
 8012156:	441c      	add	r4, r3
 8012158:	4630      	mov	r0, r6
 801215a:	4621      	mov	r1, r4
 801215c:	f7ff fdd4 	bl	8011d08 <_AddFreeMemory>
 8012160:	f1ba 0f00 	cmp.w	sl, #0
 8012164:	d001      	beq.n	801216a <_RemoveHoles+0x106>
 8012166:	4550      	cmp	r0, sl
 8012168:	d207      	bcs.n	801217a <_RemoveHoles+0x116>
 801216a:	4623      	mov	r3, r4
 801216c:	e78b      	b.n	8012086 <_RemoveHoles+0x22>
 801216e:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8012172:	1b92      	subs	r2, r2, r6
 8012174:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8012178:	e7ed      	b.n	8012156 <_RemoveHoles+0xf2>
 801217a:	2000      	movs	r0, #0
 801217c:	e78d      	b.n	801209a <_RemoveHoles+0x36>
 801217e:	2001      	movs	r0, #1
 8012180:	9001      	str	r0, [sp, #4]
 8012182:	f8d8 0000 	ldr.w	r0, [r8]
 8012186:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801218a:	1b80      	subs	r0, r0, r6
 801218c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8012190:	f8c8 0000 	str.w	r0, [r8]
 8012194:	f1be 0f00 	cmp.w	lr, #0
 8012198:	d001      	beq.n	801219e <_RemoveHoles+0x13a>
 801219a:	f8ce c004 	str.w	ip, [lr, #4]
 801219e:	f1bc 0f00 	cmp.w	ip, #0
 80121a2:	d002      	beq.n	80121aa <_RemoveHoles+0x146>
 80121a4:	f8cc e000 	str.w	lr, [ip]
 80121a8:	e7cd      	b.n	8012146 <_RemoveHoles+0xe2>
 80121aa:	9801      	ldr	r0, [sp, #4]
 80121ac:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 80121b0:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 80121b4:	e7c7      	b.n	8012146 <_RemoveHoles+0xe2>
 80121b6:	200f      	movs	r0, #15
 80121b8:	9001      	str	r0, [sp, #4]
 80121ba:	e7e2      	b.n	8012182 <_RemoveHoles+0x11e>
 80121bc:	200c      	movs	r0, #12
 80121be:	9001      	str	r0, [sp, #4]
 80121c0:	e7df      	b.n	8012182 <_RemoveHoles+0x11e>
 80121c2:	200e      	movs	r0, #14
 80121c4:	9001      	str	r0, [sp, #4]
 80121c6:	e7dc      	b.n	8012182 <_RemoveHoles+0x11e>
 80121c8:	200d      	movs	r0, #13
 80121ca:	9001      	str	r0, [sp, #4]
 80121cc:	e7d9      	b.n	8012182 <_RemoveHoles+0x11e>
 80121ce:	2008      	movs	r0, #8
 80121d0:	9001      	str	r0, [sp, #4]
 80121d2:	e7d6      	b.n	8012182 <_RemoveHoles+0x11e>
 80121d4:	200a      	movs	r0, #10
 80121d6:	9001      	str	r0, [sp, #4]
 80121d8:	e7d3      	b.n	8012182 <_RemoveHoles+0x11e>
 80121da:	2009      	movs	r0, #9
 80121dc:	9001      	str	r0, [sp, #4]
 80121de:	e7d0      	b.n	8012182 <_RemoveHoles+0x11e>
 80121e0:	200b      	movs	r0, #11
 80121e2:	9001      	str	r0, [sp, #4]
 80121e4:	e7cd      	b.n	8012182 <_RemoveHoles+0x11e>
 80121e6:	2003      	movs	r0, #3
 80121e8:	9001      	str	r0, [sp, #4]
 80121ea:	e7ca      	b.n	8012182 <_RemoveHoles+0x11e>
 80121ec:	2005      	movs	r0, #5
 80121ee:	9001      	str	r0, [sp, #4]
 80121f0:	e7c7      	b.n	8012182 <_RemoveHoles+0x11e>
 80121f2:	2004      	movs	r0, #4
 80121f4:	9001      	str	r0, [sp, #4]
 80121f6:	e7c4      	b.n	8012182 <_RemoveHoles+0x11e>
 80121f8:	2007      	movs	r0, #7
 80121fa:	9001      	str	r0, [sp, #4]
 80121fc:	e7c1      	b.n	8012182 <_RemoveHoles+0x11e>
 80121fe:	2006      	movs	r0, #6
 8012200:	9001      	str	r0, [sp, #4]
 8012202:	e7be      	b.n	8012182 <_RemoveHoles+0x11e>
 8012204:	2000      	movs	r0, #0
 8012206:	9001      	str	r0, [sp, #4]
 8012208:	e7bb      	b.n	8012182 <_RemoveHoles+0x11e>
 801220a:	2002      	movs	r0, #2
 801220c:	9001      	str	r0, [sp, #4]
 801220e:	e7b8      	b.n	8012182 <_RemoveHoles+0x11e>
 8012210:	200466c0 	.word	0x200466c0

08012214 <_EnlargeBlocks>:
 8012214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012218:	4d33      	ldr	r5, [pc, #204]	; (80122e8 <_EnlargeBlocks+0xd4>)
 801221a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801221c:	b973      	cbnz	r3, 801223c <_EnlargeBlocks+0x28>
 801221e:	4b33      	ldr	r3, [pc, #204]	; (80122ec <_EnlargeBlocks+0xd8>)
 8012220:	689c      	ldr	r4, [r3, #8]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	3408      	adds	r4, #8
 8012226:	fbb3 f4f4 	udiv	r4, r3, r4
 801222a:	3402      	adds	r4, #2
 801222c:	00e0      	lsls	r0, r4, #3
 801222e:	f000 f861 	bl	80122f4 <_Alloc>
 8012232:	4680      	mov	r8, r0
 8012234:	b960      	cbnz	r0, 8012250 <_EnlargeBlocks+0x3c>
 8012236:	2001      	movs	r0, #1
 8012238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801223c:	692b      	ldr	r3, [r5, #16]
 801223e:	1d1c      	adds	r4, r3, #4
 8012240:	eb04 04d3 	add.w	r4, r4, r3, lsr #3
 8012244:	00e0      	lsls	r0, r4, #3
 8012246:	f000 f855 	bl	80122f4 <_Alloc>
 801224a:	4680      	mov	r8, r0
 801224c:	2800      	cmp	r0, #0
 801224e:	d0f2      	beq.n	8012236 <_EnlargeBlocks+0x22>
 8012250:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8012252:	692a      	ldr	r2, [r5, #16]
 8012254:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8012258:	4b25      	ldr	r3, [pc, #148]	; (80122f0 <_EnlargeBlocks+0xdc>)
 801225a:	00d2      	lsls	r2, r2, #3
 801225c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801225e:	6846      	ldr	r6, [r0, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3608      	adds	r6, #8
 8012264:	4630      	mov	r0, r6
 8012266:	4798      	blx	r3
 8012268:	6928      	ldr	r0, [r5, #16]
 801226a:	1e61      	subs	r1, r4, #1
 801226c:	636e      	str	r6, [r5, #52]	; 0x34
 801226e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8012272:	4288      	cmp	r0, r1
 8012274:	d236      	bcs.n	80122e4 <_EnlargeBlocks+0xd0>
 8012276:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 801227a:	4603      	mov	r3, r0
 801227c:	3301      	adds	r3, #1
 801227e:	3208      	adds	r2, #8
 8012280:	428b      	cmp	r3, r1
 8012282:	f842 3c04 	str.w	r3, [r2, #-4]
 8012286:	d1f9      	bne.n	801227c <_EnlargeBlocks+0x68>
 8012288:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801228c:	2600      	movs	r6, #0
 801228e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80122e8 <_EnlargeBlocks+0xd4>
 8012292:	604e      	str	r6, [r1, #4]
 8012294:	686b      	ldr	r3, [r5, #4]
 8012296:	6268      	str	r0, [r5, #36]	; 0x24
 8012298:	1a18      	subs	r0, r3, r0
 801229a:	612c      	str	r4, [r5, #16]
 801229c:	4404      	add	r4, r0
 801229e:	606c      	str	r4, [r5, #4]
 80122a0:	b1ef      	cbz	r7, 80122de <_EnlargeBlocks+0xca>
 80122a2:	f005 fd49 	bl	8017d38 <GUI_Lock>
 80122a6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80122aa:	00fc      	lsls	r4, r7, #3
 80122ac:	4423      	add	r3, r4
 80122ae:	6859      	ldr	r1, [r3, #4]
 80122b0:	6848      	ldr	r0, [r1, #4]
 80122b2:	f7ff fd29 	bl	8011d08 <_AddFreeMemory>
 80122b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122ba:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80122be:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 80122c2:	3301      	adds	r3, #1
 80122c4:	4414      	add	r4, r2
 80122c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80122ca:	6061      	str	r1, [r4, #4]
 80122cc:	f802 6037 	strb.w	r6, [r2, r7, lsl #3]
 80122d0:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 80122d4:	f005 fd26 	bl	8017d24 <GUI_Unlock>
 80122d8:	4630      	mov	r0, r6
 80122da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122de:	4638      	mov	r0, r7
 80122e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e4:	4601      	mov	r1, r0
 80122e6:	e7cf      	b.n	8012288 <_EnlargeBlocks+0x74>
 80122e8:	200466c0 	.word	0x200466c0
 80122ec:	200001dc 	.word	0x200001dc
 80122f0:	2000004c 	.word	0x2000004c

080122f4 <_Alloc>:
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	4cc1      	ldr	r4, [pc, #772]	; (8012600 <_Alloc+0x30c>)
 80122fa:	4605      	mov	r5, r0
 80122fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012300:	2b00      	cmp	r3, #0
 8012302:	f000 80f7 	beq.w	80124f4 <_Alloc+0x200>
 8012306:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012308:	4285      	cmp	r5, r0
 801230a:	d302      	bcc.n	8012312 <_Alloc+0x1e>
 801230c:	1ce8      	adds	r0, r5, #3
 801230e:	f020 0003 	bic.w	r0, r0, #3
 8012312:	f100 060c 	add.w	r6, r0, #12
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	4db9      	ldr	r5, [pc, #740]	; (8012600 <_Alloc+0x30c>)
 801231a:	42b3      	cmp	r3, r6
 801231c:	d202      	bcs.n	8012324 <_Alloc+0x30>
 801231e:	2000      	movs	r0, #0
 8012320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012324:	686b      	ldr	r3, [r5, #4]
 8012326:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012328:	4293      	cmp	r3, r2
 801232a:	f240 8156 	bls.w	80125da <_Alloc+0x2e6>
 801232e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012330:	3b01      	subs	r3, #1
 8012332:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012334:	2101      	movs	r1, #1
 8012336:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 801233a:	6063      	str	r3, [r4, #4]
 801233c:	eb02 0308 	add.w	r3, r2, r8
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	6263      	str	r3, [r4, #36]	; 0x24
 8012344:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 8012348:	2d00      	cmp	r5, #0
 801234a:	d0e8      	beq.n	801231e <_Alloc+0x2a>
 801234c:	4fac      	ldr	r7, [pc, #688]	; (8012600 <_Alloc+0x30c>)
 801234e:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 8012352:	4576      	cmp	r6, lr
 8012354:	f080 8123 	bcs.w	801259e <_Alloc+0x2aa>
 8012358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801235c:	429e      	cmp	r6, r3
 801235e:	f080 8120 	bcs.w	80125a2 <_Alloc+0x2ae>
 8012362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012366:	429e      	cmp	r6, r3
 8012368:	f080 811d 	bcs.w	80125a6 <_Alloc+0x2b2>
 801236c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012370:	429e      	cmp	r6, r3
 8012372:	f080 811c 	bcs.w	80125ae <_Alloc+0x2ba>
 8012376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801237a:	429e      	cmp	r6, r3
 801237c:	f080 8115 	bcs.w	80125aa <_Alloc+0x2b6>
 8012380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012384:	429e      	cmp	r6, r3
 8012386:	f080 8116 	bcs.w	80125b6 <_Alloc+0x2c2>
 801238a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801238e:	429e      	cmp	r6, r3
 8012390:	f080 810f 	bcs.w	80125b2 <_Alloc+0x2be>
 8012394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012398:	429e      	cmp	r6, r3
 801239a:	f080 8110 	bcs.w	80125be <_Alloc+0x2ca>
 801239e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123a0:	429e      	cmp	r6, r3
 80123a2:	f080 810a 	bcs.w	80125ba <_Alloc+0x2c6>
 80123a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123a8:	429e      	cmp	r6, r3
 80123aa:	f080 810c 	bcs.w	80125c6 <_Alloc+0x2d2>
 80123ae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80123b0:	429e      	cmp	r6, r3
 80123b2:	f080 8106 	bcs.w	80125c2 <_Alloc+0x2ce>
 80123b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80123b8:	429e      	cmp	r6, r3
 80123ba:	f080 8106 	bcs.w	80125ca <_Alloc+0x2d6>
 80123be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123c0:	429e      	cmp	r6, r3
 80123c2:	f080 8104 	bcs.w	80125ce <_Alloc+0x2da>
 80123c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c8:	429e      	cmp	r6, r3
 80123ca:	f080 8104 	bcs.w	80125d6 <_Alloc+0x2e2>
 80123ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123d0:	429e      	cmp	r6, r3
 80123d2:	f080 80fe 	bcs.w	80125d2 <_Alloc+0x2de>
 80123d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123d8:	429e      	cmp	r6, r3
 80123da:	f04f 33ff 	mov.w	r3, #4294967295
 80123de:	bf28      	it	cs
 80123e0:	2300      	movcs	r3, #0
 80123e2:	2b0f      	cmp	r3, #15
 80123e4:	d811      	bhi.n	801240a <_Alloc+0x116>
 80123e6:	2100      	movs	r1, #0
 80123e8:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 80123ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80123ee:	b92b      	cbnz	r3, 80123fc <_Alloc+0x108>
 80123f0:	e007      	b.n	8012402 <_Alloc+0x10e>
 80123f2:	685a      	ldr	r2, [r3, #4]
 80123f4:	4296      	cmp	r6, r2
 80123f6:	d91c      	bls.n	8012432 <_Alloc+0x13e>
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	b113      	cbz	r3, 8012402 <_Alloc+0x10e>
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d1f7      	bne.n	80123f2 <_Alloc+0xfe>
 8012402:	3101      	adds	r1, #1
 8012404:	3008      	adds	r0, #8
 8012406:	2910      	cmp	r1, #16
 8012408:	d1f0      	bne.n	80123ec <_Alloc+0xf8>
 801240a:	4630      	mov	r0, r6
 801240c:	f7ff fe2a 	bl	8012064 <_RemoveHoles>
 8012410:	2800      	cmp	r0, #0
 8012412:	d09c      	beq.n	801234e <_Alloc+0x5a>
 8012414:	6863      	ldr	r3, [r4, #4]
 8012416:	2100      	movs	r1, #0
 8012418:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801241a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801241c:	3301      	adds	r3, #1
 801241e:	4490      	add	r8, r2
 8012420:	4608      	mov	r0, r1
 8012422:	6063      	str	r3, [r4, #4]
 8012424:	f8c8 6004 	str.w	r6, [r8, #4]
 8012428:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 801242c:	6265      	str	r5, [r4, #36]	; 0x24
 801242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012432:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012434:	1b97      	subs	r7, r2, r6
 8012436:	f101 000c 	add.w	r0, r1, #12
 801243a:	4287      	cmp	r7, r0
 801243c:	bf2c      	ite	cs
 801243e:	4630      	movcs	r0, r6
 8012440:	4610      	movcc	r0, r2
 8012442:	4596      	cmp	lr, r2
 8012444:	f240 80f5 	bls.w	8012632 <_Alloc+0x33e>
 8012448:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 801244c:	4e6c      	ldr	r6, [pc, #432]	; (8012600 <_Alloc+0x30c>)
 801244e:	42ba      	cmp	r2, r7
 8012450:	f080 80f1 	bcs.w	8012636 <_Alloc+0x342>
 8012454:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 8012458:	42ba      	cmp	r2, r7
 801245a:	f080 80e8 	bcs.w	801262e <_Alloc+0x33a>
 801245e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8012462:	42ba      	cmp	r2, r7
 8012464:	f080 80d0 	bcs.w	8012608 <_Alloc+0x314>
 8012468:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 801246c:	42ba      	cmp	r2, r7
 801246e:	f080 80d8 	bcs.w	8012622 <_Alloc+0x32e>
 8012472:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 8012476:	4297      	cmp	r7, r2
 8012478:	f240 80df 	bls.w	801263a <_Alloc+0x346>
 801247c:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8012480:	4297      	cmp	r7, r2
 8012482:	f240 80de 	bls.w	8012642 <_Alloc+0x34e>
 8012486:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 801248a:	4297      	cmp	r7, r2
 801248c:	f240 80d7 	bls.w	801263e <_Alloc+0x34a>
 8012490:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8012492:	4297      	cmp	r7, r2
 8012494:	f240 80e5 	bls.w	8012662 <_Alloc+0x36e>
 8012498:	6f36      	ldr	r6, [r6, #112]	; 0x70
 801249a:	4296      	cmp	r6, r2
 801249c:	f240 80df 	bls.w	801265e <_Alloc+0x36a>
 80124a0:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80124a2:	4f57      	ldr	r7, [pc, #348]	; (8012600 <_Alloc+0x30c>)
 80124a4:	4296      	cmp	r6, r2
 80124a6:	f240 80d8 	bls.w	801265a <_Alloc+0x366>
 80124aa:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80124ac:	4296      	cmp	r6, r2
 80124ae:	f240 80d2 	bls.w	8012656 <_Alloc+0x362>
 80124b2:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80124b4:	42b2      	cmp	r2, r6
 80124b6:	f080 80cc 	bcs.w	8012652 <_Alloc+0x35e>
 80124ba:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80124bc:	4296      	cmp	r6, r2
 80124be:	f240 80c6 	bls.w	801264e <_Alloc+0x35a>
 80124c2:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80124c4:	42b2      	cmp	r2, r6
 80124c6:	f080 80c0 	bcs.w	801264a <_Alloc+0x356>
 80124ca:	4291      	cmp	r1, r2
 80124cc:	f240 80bb 	bls.w	8012646 <_Alloc+0x352>
 80124d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80124d2:	2600      	movs	r6, #0
 80124d4:	1819      	adds	r1, r3, r0
 80124d6:	4290      	cmp	r0, r2
 80124d8:	44a0      	add	r8, r4
 80124da:	f8c8 3004 	str.w	r3, [r8, #4]
 80124de:	601d      	str	r5, [r3, #0]
 80124e0:	6058      	str	r0, [r3, #4]
 80124e2:	611b      	str	r3, [r3, #16]
 80124e4:	609e      	str	r6, [r3, #8]
 80124e6:	f841 0c04 	str.w	r0, [r1, #-4]
 80124ea:	f2c0 8082 	blt.w	80125f2 <_Alloc+0x2fe>
 80124ee:	4628      	mov	r0, r5
 80124f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f4:	4b43      	ldr	r3, [pc, #268]	; (8012604 <_Alloc+0x310>)
 80124f6:	2101      	movs	r1, #1
 80124f8:	689a      	ldr	r2, [r3, #8]
 80124fa:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80124fe:	6858      	ldr	r0, [r3, #4]
 8012500:	b90a      	cbnz	r2, 8012506 <_Alloc+0x212>
 8012502:	0882      	lsrs	r2, r0, #2
 8012504:	609a      	str	r2, [r3, #8]
 8012506:	275a      	movs	r7, #90	; 0x5a
 8012508:	2210      	movs	r2, #16
 801250a:	2620      	movs	r6, #32
 801250c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8012510:	6227      	str	r7, [r4, #32]
 8012512:	2780      	movs	r7, #128	; 0x80
 8012514:	6422      	str	r2, [r4, #64]	; 0x40
 8012516:	f44f 7280 	mov.w	r2, #256	; 0x100
 801251a:	64a6      	str	r6, [r4, #72]	; 0x48
 801251c:	f44f 7600 	mov.w	r6, #512	; 0x200
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 8012526:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 801252a:	65a7      	str	r7, [r4, #88]	; 0x58
 801252c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8012530:	6622      	str	r2, [r4, #96]	; 0x60
 8012532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012536:	66a6      	str	r6, [r4, #104]	; 0x68
 8012538:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 801253c:	f1a1 0314 	sub.w	r3, r1, #20
 8012540:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
 8012544:	67a7      	str	r7, [r4, #120]	; 0x78
 8012546:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 801254a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 801254e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8012552:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8012556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801255a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 801255e:	4403      	add	r3, r0
 8012560:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
 8012564:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8012568:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 801256c:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8012570:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8012574:	2202      	movs	r2, #2
 8012576:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 801257a:	2601      	movs	r6, #1
 801257c:	63a1      	str	r1, [r4, #56]	; 0x38
 801257e:	6363      	str	r3, [r4, #52]	; 0x34
 8012580:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 8012584:	6122      	str	r2, [r4, #16]
 8012586:	60e0      	str	r0, [r4, #12]
 8012588:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 801258c:	605e      	str	r6, [r3, #4]
 801258e:	6266      	str	r6, [r4, #36]	; 0x24
 8012590:	6066      	str	r6, [r4, #4]
 8012592:	f7ff fbb9 	bl	8011d08 <_AddFreeMemory>
 8012596:	f7ff fe3d 	bl	8012214 <_EnlargeBlocks>
 801259a:	6326      	str	r6, [r4, #48]	; 0x30
 801259c:	e6b3      	b.n	8012306 <_Alloc+0x12>
 801259e:	210f      	movs	r1, #15
 80125a0:	e722      	b.n	80123e8 <_Alloc+0xf4>
 80125a2:	210e      	movs	r1, #14
 80125a4:	e720      	b.n	80123e8 <_Alloc+0xf4>
 80125a6:	210d      	movs	r1, #13
 80125a8:	e71e      	b.n	80123e8 <_Alloc+0xf4>
 80125aa:	210b      	movs	r1, #11
 80125ac:	e71c      	b.n	80123e8 <_Alloc+0xf4>
 80125ae:	210c      	movs	r1, #12
 80125b0:	e71a      	b.n	80123e8 <_Alloc+0xf4>
 80125b2:	2109      	movs	r1, #9
 80125b4:	e718      	b.n	80123e8 <_Alloc+0xf4>
 80125b6:	210a      	movs	r1, #10
 80125b8:	e716      	b.n	80123e8 <_Alloc+0xf4>
 80125ba:	2107      	movs	r1, #7
 80125bc:	e714      	b.n	80123e8 <_Alloc+0xf4>
 80125be:	2108      	movs	r1, #8
 80125c0:	e712      	b.n	80123e8 <_Alloc+0xf4>
 80125c2:	2105      	movs	r1, #5
 80125c4:	e710      	b.n	80123e8 <_Alloc+0xf4>
 80125c6:	2106      	movs	r1, #6
 80125c8:	e70e      	b.n	80123e8 <_Alloc+0xf4>
 80125ca:	2104      	movs	r1, #4
 80125cc:	e70c      	b.n	80123e8 <_Alloc+0xf4>
 80125ce:	2103      	movs	r1, #3
 80125d0:	e70a      	b.n	80123e8 <_Alloc+0xf4>
 80125d2:	2101      	movs	r1, #1
 80125d4:	e708      	b.n	80123e8 <_Alloc+0xf4>
 80125d6:	2102      	movs	r1, #2
 80125d8:	e706      	b.n	80123e8 <_Alloc+0xf4>
 80125da:	3a01      	subs	r2, #1
 80125dc:	632a      	str	r2, [r5, #48]	; 0x30
 80125de:	f7ff fe19 	bl	8012214 <_EnlargeBlocks>
 80125e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80125e4:	3301      	adds	r3, #1
 80125e6:	632b      	str	r3, [r5, #48]	; 0x30
 80125e8:	2800      	cmp	r0, #0
 80125ea:	f47f ae98 	bne.w	801231e <_Alloc+0x2a>
 80125ee:	686b      	ldr	r3, [r5, #4]
 80125f0:	e69d      	b.n	801232e <_Alloc+0x3a>
 80125f2:	1a10      	subs	r0, r2, r0
 80125f4:	f7ff fb88 	bl	8011d08 <_AddFreeMemory>
 80125f8:	4628      	mov	r0, r5
 80125fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125fe:	bf00      	nop
 8012600:	200466c0 	.word	0x200466c0
 8012604:	200001dc 	.word	0x200001dc
 8012608:	210c      	movs	r1, #12
 801260a:	6826      	ldr	r6, [r4, #0]
 801260c:	689f      	ldr	r7, [r3, #8]
 801260e:	ebc2 0e06 	rsb	lr, r2, r6
 8012612:	68de      	ldr	r6, [r3, #12]
 8012614:	f8c4 e000 	str.w	lr, [r4]
 8012618:	b107      	cbz	r7, 801261c <_Alloc+0x328>
 801261a:	607e      	str	r6, [r7, #4]
 801261c:	b11e      	cbz	r6, 8012626 <_Alloc+0x332>
 801261e:	6037      	str	r7, [r6, #0]
 8012620:	e756      	b.n	80124d0 <_Alloc+0x1dc>
 8012622:	210b      	movs	r1, #11
 8012624:	e7f1      	b.n	801260a <_Alloc+0x316>
 8012626:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801262a:	644f      	str	r7, [r1, #68]	; 0x44
 801262c:	e750      	b.n	80124d0 <_Alloc+0x1dc>
 801262e:	210d      	movs	r1, #13
 8012630:	e7eb      	b.n	801260a <_Alloc+0x316>
 8012632:	210f      	movs	r1, #15
 8012634:	e7e9      	b.n	801260a <_Alloc+0x316>
 8012636:	210e      	movs	r1, #14
 8012638:	e7e7      	b.n	801260a <_Alloc+0x316>
 801263a:	210a      	movs	r1, #10
 801263c:	e7e5      	b.n	801260a <_Alloc+0x316>
 801263e:	2108      	movs	r1, #8
 8012640:	e7e3      	b.n	801260a <_Alloc+0x316>
 8012642:	2109      	movs	r1, #9
 8012644:	e7e1      	b.n	801260a <_Alloc+0x316>
 8012646:	2100      	movs	r1, #0
 8012648:	e7df      	b.n	801260a <_Alloc+0x316>
 801264a:	2101      	movs	r1, #1
 801264c:	e7dd      	b.n	801260a <_Alloc+0x316>
 801264e:	2102      	movs	r1, #2
 8012650:	e7db      	b.n	801260a <_Alloc+0x316>
 8012652:	2103      	movs	r1, #3
 8012654:	e7d9      	b.n	801260a <_Alloc+0x316>
 8012656:	2104      	movs	r1, #4
 8012658:	e7d7      	b.n	801260a <_Alloc+0x316>
 801265a:	2105      	movs	r1, #5
 801265c:	e7d5      	b.n	801260a <_Alloc+0x316>
 801265e:	2106      	movs	r1, #6
 8012660:	e7d3      	b.n	801260a <_Alloc+0x316>
 8012662:	2107      	movs	r1, #7
 8012664:	e7d1      	b.n	801260a <_Alloc+0x316>
 8012666:	bf00      	nop

08012668 <GUI_ALLOC_FreeFixedBlock>:
 8012668:	b128      	cbz	r0, 8012676 <GUI_ALLOC_FreeFixedBlock+0xe>
 801266a:	4a03      	ldr	r2, [pc, #12]	; (8012678 <GUI_ALLOC_FreeFixedBlock+0x10>)
 801266c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801266e:	6003      	str	r3, [r0, #0]
 8012670:	b103      	cbz	r3, 8012674 <GUI_ALLOC_FreeFixedBlock+0xc>
 8012672:	6058      	str	r0, [r3, #4]
 8012674:	63d0      	str	r0, [r2, #60]	; 0x3c
 8012676:	4770      	bx	lr
 8012678:	200466c0 	.word	0x200466c0

0801267c <GUI_ALLOC_GetFixedBlock>:
 801267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267e:	4e8b      	ldr	r6, [pc, #556]	; (80128ac <GUI_ALLOC_GetFixedBlock+0x230>)
 8012680:	4604      	mov	r4, r0
 8012682:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8012686:	2b00      	cmp	r3, #0
 8012688:	d02f      	beq.n	80126ea <GUI_ALLOC_GetFixedBlock+0x6e>
 801268a:	3403      	adds	r4, #3
 801268c:	6c35      	ldr	r5, [r6, #64]	; 0x40
 801268e:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8012690:	f024 0403 	bic.w	r4, r4, #3
 8012694:	3404      	adds	r4, #4
 8012696:	42a5      	cmp	r5, r4
 8012698:	bf38      	it	cc
 801269a:	4625      	movcc	r5, r4
 801269c:	b162      	cbz	r2, 80126b8 <GUI_ALLOC_GetFixedBlock+0x3c>
 801269e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80126a2:	4614      	mov	r4, r2
 80126a4:	429d      	cmp	r5, r3
 80126a6:	d104      	bne.n	80126b2 <GUI_ALLOC_GetFixedBlock+0x36>
 80126a8:	e014      	b.n	80126d4 <GUI_ALLOC_GetFixedBlock+0x58>
 80126aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80126ae:	429d      	cmp	r5, r3
 80126b0:	d010      	beq.n	80126d4 <GUI_ALLOC_GetFixedBlock+0x58>
 80126b2:	6824      	ldr	r4, [r4, #0]
 80126b4:	2c00      	cmp	r4, #0
 80126b6:	d1f8      	bne.n	80126aa <GUI_ALLOC_GetFixedBlock+0x2e>
 80126b8:	68f3      	ldr	r3, [r6, #12]
 80126ba:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 80126bc:	441c      	add	r4, r3
 80126be:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80126c2:	1a61      	subs	r1, r4, r1
 80126c4:	680b      	ldr	r3, [r1, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d168      	bne.n	801279c <GUI_ALLOC_GetFixedBlock+0x120>
 80126ca:	684b      	ldr	r3, [r1, #4]
 80126cc:	429d      	cmp	r5, r3
 80126ce:	dd6f      	ble.n	80127b0 <GUI_ALLOC_GetFixedBlock+0x134>
 80126d0:	2400      	movs	r4, #0
 80126d2:	e008      	b.n	80126e6 <GUI_ALLOC_GetFixedBlock+0x6a>
 80126d4:	6823      	ldr	r3, [r4, #0]
 80126d6:	b10b      	cbz	r3, 80126dc <GUI_ALLOC_GetFixedBlock+0x60>
 80126d8:	6861      	ldr	r1, [r4, #4]
 80126da:	6059      	str	r1, [r3, #4]
 80126dc:	6861      	ldr	r1, [r4, #4]
 80126de:	b101      	cbz	r1, 80126e2 <GUI_ALLOC_GetFixedBlock+0x66>
 80126e0:	600b      	str	r3, [r1, #0]
 80126e2:	42a2      	cmp	r2, r4
 80126e4:	d056      	beq.n	8012794 <GUI_ALLOC_GetFixedBlock+0x118>
 80126e6:	4620      	mov	r0, r4
 80126e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ea:	4b71      	ldr	r3, [pc, #452]	; (80128b0 <GUI_ALLOC_GetFixedBlock+0x234>)
 80126ec:	2101      	movs	r1, #1
 80126ee:	689a      	ldr	r2, [r3, #8]
 80126f0:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 80126f4:	6858      	ldr	r0, [r3, #4]
 80126f6:	b90a      	cbnz	r2, 80126fc <GUI_ALLOC_GetFixedBlock+0x80>
 80126f8:	0882      	lsrs	r2, r0, #2
 80126fa:	609a      	str	r2, [r3, #8]
 80126fc:	275a      	movs	r7, #90	; 0x5a
 80126fe:	2210      	movs	r2, #16
 8012700:	2520      	movs	r5, #32
 8012702:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8012706:	6237      	str	r7, [r6, #32]
 8012708:	2780      	movs	r7, #128	; 0x80
 801270a:	6432      	str	r2, [r6, #64]	; 0x40
 801270c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012710:	64b5      	str	r5, [r6, #72]	; 0x48
 8012712:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012716:	6819      	ldr	r1, [r3, #0]
 8012718:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 801271c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8012720:	65b7      	str	r7, [r6, #88]	; 0x58
 8012722:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8012726:	6632      	str	r2, [r6, #96]	; 0x60
 8012728:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801272c:	66b5      	str	r5, [r6, #104]	; 0x68
 801272e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012732:	f1a1 0314 	sub.w	r3, r1, #20
 8012736:	f8c6 e070 	str.w	lr, [r6, #112]	; 0x70
 801273a:	67b7      	str	r7, [r6, #120]	; 0x78
 801273c:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 8012740:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
 8012744:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8012748:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
 801274c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012750:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8012754:	4403      	add	r3, r0
 8012756:	f8c6 e090 	str.w	lr, [r6, #144]	; 0x90
 801275a:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 801275e:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
 8012762:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8012766:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
 801276a:	2202      	movs	r2, #2
 801276c:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
 8012770:	2501      	movs	r5, #1
 8012772:	63b1      	str	r1, [r6, #56]	; 0x38
 8012774:	6373      	str	r3, [r6, #52]	; 0x34
 8012776:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 801277a:	6132      	str	r2, [r6, #16]
 801277c:	60f0      	str	r0, [r6, #12]
 801277e:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 8012782:	605d      	str	r5, [r3, #4]
 8012784:	6275      	str	r5, [r6, #36]	; 0x24
 8012786:	6075      	str	r5, [r6, #4]
 8012788:	f7ff fabe 	bl	8011d08 <_AddFreeMemory>
 801278c:	f7ff fd42 	bl	8012214 <_EnlargeBlocks>
 8012790:	6335      	str	r5, [r6, #48]	; 0x30
 8012792:	e77a      	b.n	801268a <GUI_ALLOC_GetFixedBlock+0xe>
 8012794:	6823      	ldr	r3, [r4, #0]
 8012796:	4620      	mov	r0, r4
 8012798:	63f3      	str	r3, [r6, #60]	; 0x3c
 801279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801279c:	2000      	movs	r0, #0
 801279e:	f7ff fc61 	bl	8012064 <_RemoveHoles>
 80127a2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80127a6:	1a61      	subs	r1, r4, r1
 80127a8:	680b      	ldr	r3, [r1, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d190      	bne.n	80126d0 <GUI_ALLOC_GetFixedBlock+0x54>
 80127ae:	e78c      	b.n	80126ca <GUI_ALLOC_GetFixedBlock+0x4e>
 80127b0:	1b58      	subs	r0, r3, r5
 80127b2:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 80127b6:	4a3d      	ldr	r2, [pc, #244]	; (80128ac <GUI_ALLOC_GetFixedBlock+0x230>)
 80127b8:	1d04      	adds	r4, r0, #4
 80127ba:	42bb      	cmp	r3, r7
 80127bc:	440c      	add	r4, r1
 80127be:	d272      	bcs.n	80128a6 <GUI_ALLOC_GetFixedBlock+0x22a>
 80127c0:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 80127c4:	42bb      	cmp	r3, r7
 80127c6:	d26c      	bcs.n	80128a2 <GUI_ALLOC_GetFixedBlock+0x226>
 80127c8:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 80127cc:	42bb      	cmp	r3, r7
 80127ce:	d266      	bcs.n	801289e <GUI_ALLOC_GetFixedBlock+0x222>
 80127d0:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 80127d4:	42bb      	cmp	r3, r7
 80127d6:	d260      	bcs.n	801289a <GUI_ALLOC_GetFixedBlock+0x21e>
 80127d8:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 80127dc:	429f      	cmp	r7, r3
 80127de:	d95a      	bls.n	8012896 <GUI_ALLOC_GetFixedBlock+0x21a>
 80127e0:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 80127e4:	42bb      	cmp	r3, r7
 80127e6:	d254      	bcs.n	8012892 <GUI_ALLOC_GetFixedBlock+0x216>
 80127e8:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 80127ec:	42bb      	cmp	r3, r7
 80127ee:	d24e      	bcs.n	801288e <GUI_ALLOC_GetFixedBlock+0x212>
 80127f0:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 80127f4:	42bb      	cmp	r3, r7
 80127f6:	d248      	bcs.n	801288a <GUI_ALLOC_GetFixedBlock+0x20e>
 80127f8:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d243      	bcs.n	8012886 <GUI_ALLOC_GetFixedBlock+0x20a>
 80127fe:	6f37      	ldr	r7, [r6, #112]	; 0x70
 8012800:	4a2a      	ldr	r2, [pc, #168]	; (80128ac <GUI_ALLOC_GetFixedBlock+0x230>)
 8012802:	42bb      	cmp	r3, r7
 8012804:	d23d      	bcs.n	8012882 <GUI_ALLOC_GetFixedBlock+0x206>
 8012806:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8012808:	42bb      	cmp	r3, r7
 801280a:	d238      	bcs.n	801287e <GUI_ALLOC_GetFixedBlock+0x202>
 801280c:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801280e:	42bb      	cmp	r3, r7
 8012810:	d233      	bcs.n	801287a <GUI_ALLOC_GetFixedBlock+0x1fe>
 8012812:	6d97      	ldr	r7, [r2, #88]	; 0x58
 8012814:	42bb      	cmp	r3, r7
 8012816:	d22e      	bcs.n	8012876 <GUI_ALLOC_GetFixedBlock+0x1fa>
 8012818:	6d17      	ldr	r7, [r2, #80]	; 0x50
 801281a:	42bb      	cmp	r3, r7
 801281c:	d229      	bcs.n	8012872 <GUI_ALLOC_GetFixedBlock+0x1f6>
 801281e:	6c97      	ldr	r7, [r2, #72]	; 0x48
 8012820:	42bb      	cmp	r3, r7
 8012822:	d224      	bcs.n	801286e <GUI_ALLOC_GetFixedBlock+0x1f2>
 8012824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012826:	4293      	cmp	r3, r2
 8012828:	d20c      	bcs.n	8012844 <GUI_ALLOC_GetFixedBlock+0x1c8>
 801282a:	68f2      	ldr	r2, [r6, #12]
 801282c:	6973      	ldr	r3, [r6, #20]
 801282e:	1b52      	subs	r2, r2, r5
 8012830:	442b      	add	r3, r5
 8012832:	60f2      	str	r2, [r6, #12]
 8012834:	6173      	str	r3, [r6, #20]
 8012836:	b910      	cbnz	r0, 801283e <GUI_ALLOC_GetFixedBlock+0x1c2>
 8012838:	f844 5c04 	str.w	r5, [r4, #-4]
 801283c:	e753      	b.n	80126e6 <GUI_ALLOC_GetFixedBlock+0x6a>
 801283e:	f7ff fa63 	bl	8011d08 <_AddFreeMemory>
 8012842:	e7f9      	b.n	8012838 <GUI_ALLOC_GetFixedBlock+0x1bc>
 8012844:	2200      	movs	r2, #0
 8012846:	6837      	ldr	r7, [r6, #0]
 8012848:	f8d1 e008 	ldr.w	lr, [r1, #8]
 801284c:	1aff      	subs	r7, r7, r3
 801284e:	68cb      	ldr	r3, [r1, #12]
 8012850:	6037      	str	r7, [r6, #0]
 8012852:	f1be 0f00 	cmp.w	lr, #0
 8012856:	d001      	beq.n	801285c <GUI_ALLOC_GetFixedBlock+0x1e0>
 8012858:	f8ce 3004 	str.w	r3, [lr, #4]
 801285c:	b113      	cbz	r3, 8012864 <GUI_ALLOC_GetFixedBlock+0x1e8>
 801285e:	f8c3 e000 	str.w	lr, [r3]
 8012862:	e7e2      	b.n	801282a <GUI_ALLOC_GetFixedBlock+0x1ae>
 8012864:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012868:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 801286c:	e7dd      	b.n	801282a <GUI_ALLOC_GetFixedBlock+0x1ae>
 801286e:	2201      	movs	r2, #1
 8012870:	e7e9      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012872:	2202      	movs	r2, #2
 8012874:	e7e7      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012876:	2203      	movs	r2, #3
 8012878:	e7e5      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801287a:	2204      	movs	r2, #4
 801287c:	e7e3      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801287e:	2205      	movs	r2, #5
 8012880:	e7e1      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012882:	2206      	movs	r2, #6
 8012884:	e7df      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012886:	2207      	movs	r2, #7
 8012888:	e7dd      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801288a:	2208      	movs	r2, #8
 801288c:	e7db      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801288e:	2209      	movs	r2, #9
 8012890:	e7d9      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012892:	220a      	movs	r2, #10
 8012894:	e7d7      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012896:	220b      	movs	r2, #11
 8012898:	e7d5      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801289a:	220c      	movs	r2, #12
 801289c:	e7d3      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 801289e:	220d      	movs	r2, #13
 80128a0:	e7d1      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 80128a2:	220e      	movs	r2, #14
 80128a4:	e7cf      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 80128a6:	220f      	movs	r2, #15
 80128a8:	e7cd      	b.n	8012846 <GUI_ALLOC_GetFixedBlock+0x1ca>
 80128aa:	bf00      	nop
 80128ac:	200466c0 	.word	0x200466c0
 80128b0:	200001dc 	.word	0x200001dc

080128b4 <GUI_ALLOC_AllocNoInit>:
 80128b4:	b900      	cbnz	r0, 80128b8 <GUI_ALLOC_AllocNoInit+0x4>
 80128b6:	4770      	bx	lr
 80128b8:	b510      	push	{r4, lr}
 80128ba:	4604      	mov	r4, r0
 80128bc:	f005 fa3c 	bl	8017d38 <GUI_Lock>
 80128c0:	4620      	mov	r0, r4
 80128c2:	f7ff fd17 	bl	80122f4 <_Alloc>
 80128c6:	4604      	mov	r4, r0
 80128c8:	f005 fa2c 	bl	8017d24 <GUI_Unlock>
 80128cc:	4620      	mov	r0, r4
 80128ce:	bd10      	pop	{r4, pc}

080128d0 <GUI_ALLOC_h2p>:
 80128d0:	4b03      	ldr	r3, [pc, #12]	; (80128e0 <GUI_ALLOC_h2p+0x10>)
 80128d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80128d8:	6840      	ldr	r0, [r0, #4]
 80128da:	3008      	adds	r0, #8
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	200466c0 	.word	0x200466c0

080128e4 <GUI_ALLOC_LockH>:
 80128e4:	4a08      	ldr	r2, [pc, #32]	; (8012908 <GUI_ALLOC_LockH+0x24>)
 80128e6:	69d1      	ldr	r1, [r2, #28]
 80128e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80128ea:	3101      	adds	r1, #1
 80128ec:	b410      	push	{r4}
 80128ee:	61d1      	str	r1, [r2, #28]
 80128f0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80128f4:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 80128f8:	3201      	adds	r2, #1
 80128fa:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 80128fe:	6860      	ldr	r0, [r4, #4]
 8012900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012904:	3008      	adds	r0, #8
 8012906:	4770      	bx	lr
 8012908:	200466c0 	.word	0x200466c0

0801290c <GUI_ALLOC_UnlockH>:
 801290c:	6803      	ldr	r3, [r0, #0]
 801290e:	4a0b      	ldr	r2, [pc, #44]	; (801293c <GUI_ALLOC_UnlockH+0x30>)
 8012910:	b430      	push	{r4, r5}
 8012912:	4604      	mov	r4, r0
 8012914:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012918:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801291a:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d903      	bls.n	801292a <GUI_ALLOC_UnlockH+0x1e>
 8012922:	69d1      	ldr	r1, [r2, #28]
 8012924:	b109      	cbz	r1, 801292a <GUI_ALLOC_UnlockH+0x1e>
 8012926:	3901      	subs	r1, #1
 8012928:	61d1      	str	r1, [r2, #28]
 801292a:	2200      	movs	r2, #0
 801292c:	3b01      	subs	r3, #1
 801292e:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 8012932:	4610      	mov	r0, r2
 8012934:	6022      	str	r2, [r4, #0]
 8012936:	bc30      	pop	{r4, r5}
 8012938:	4770      	bx	lr
 801293a:	bf00      	nop
 801293c:	200466c0 	.word	0x200466c0

08012940 <GUI_ALLOC_GetMaxSize>:
 8012940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012942:	4c4a      	ldr	r4, [pc, #296]	; (8012a6c <GUI_ALLOC_GetMaxSize+0x12c>)
 8012944:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012948:	2b00      	cmp	r3, #0
 801294a:	d03d      	beq.n	80129c8 <GUI_ALLOC_GetMaxSize+0x88>
 801294c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8012950:	4a46      	ldr	r2, [pc, #280]	; (8012a6c <GUI_ALLOC_GetMaxSize+0x12c>)
 8012952:	bb3b      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012954:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8012958:	bb23      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801295a:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 801295e:	bb0b      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012960:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8012964:	b9f3      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012966:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 801296a:	b9db      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801296c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8012970:	b9c3      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012972:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8012976:	b9ab      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012978:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801297c:	b993      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801297e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8012980:	b983      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012982:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8012984:	b973      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012986:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012988:	b963      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801298a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801298c:	b953      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801298e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8012990:	b943      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012992:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8012994:	b933      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 8012996:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012998:	b923      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801299a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801299c:	b913      	cbnz	r3, 80129a4 <GUI_ALLOC_GetMaxSize+0x64>
 801299e:	f06f 000b 	mvn.w	r0, #11
 80129a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d0f9      	beq.n	801299e <GUI_ALLOC_GetMaxSize+0x5e>
 80129aa:	2200      	movs	r2, #0
 80129ac:	e001      	b.n	80129b2 <GUI_ALLOC_GetMaxSize+0x72>
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	b143      	cbz	r3, 80129c4 <GUI_ALLOC_GetMaxSize+0x84>
 80129b2:	6859      	ldr	r1, [r3, #4]
 80129b4:	4610      	mov	r0, r2
 80129b6:	4291      	cmp	r1, r2
 80129b8:	d901      	bls.n	80129be <GUI_ALLOC_GetMaxSize+0x7e>
 80129ba:	460a      	mov	r2, r1
 80129bc:	4608      	mov	r0, r1
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1f4      	bne.n	80129ae <GUI_ALLOC_GetMaxSize+0x6e>
 80129c4:	380c      	subs	r0, #12
 80129c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c8:	4b29      	ldr	r3, [pc, #164]	; (8012a70 <GUI_ALLOC_GetMaxSize+0x130>)
 80129ca:	2101      	movs	r1, #1
 80129cc:	689a      	ldr	r2, [r3, #8]
 80129ce:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80129d2:	6858      	ldr	r0, [r3, #4]
 80129d4:	b90a      	cbnz	r2, 80129da <GUI_ALLOC_GetMaxSize+0x9a>
 80129d6:	0882      	lsrs	r2, r0, #2
 80129d8:	609a      	str	r2, [r3, #8]
 80129da:	265a      	movs	r6, #90	; 0x5a
 80129dc:	2210      	movs	r2, #16
 80129de:	2520      	movs	r5, #32
 80129e0:	2740      	movs	r7, #64	; 0x40
 80129e2:	6226      	str	r6, [r4, #32]
 80129e4:	2680      	movs	r6, #128	; 0x80
 80129e6:	6422      	str	r2, [r4, #64]	; 0x40
 80129e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80129ec:	64a5      	str	r5, [r4, #72]	; 0x48
 80129ee:	f44f 7500 	mov.w	r5, #512	; 0x200
 80129f2:	6819      	ldr	r1, [r3, #0]
 80129f4:	6527      	str	r7, [r4, #80]	; 0x50
 80129f6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80129fa:	65a6      	str	r6, [r4, #88]	; 0x58
 80129fc:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8012a00:	6622      	str	r2, [r4, #96]	; 0x60
 8012a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012a06:	66a5      	str	r5, [r4, #104]	; 0x68
 8012a08:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012a0c:	f1a1 0314 	sub.w	r3, r1, #20
 8012a10:	6727      	str	r7, [r4, #112]	; 0x70
 8012a12:	67a6      	str	r6, [r4, #120]	; 0x78
 8012a14:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8012a18:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8012a1c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8012a20:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8012a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012a28:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8012a2c:	4403      	add	r3, r0
 8012a2e:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8012a32:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8012a36:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8012a3a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8012a3e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8012a42:	2202      	movs	r2, #2
 8012a44:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8012a48:	2501      	movs	r5, #1
 8012a4a:	63a1      	str	r1, [r4, #56]	; 0x38
 8012a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8012a4e:	6122      	str	r2, [r4, #16]
 8012a50:	60e0      	str	r0, [r4, #12]
 8012a52:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8012a56:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8012a5a:	605d      	str	r5, [r3, #4]
 8012a5c:	6265      	str	r5, [r4, #36]	; 0x24
 8012a5e:	6065      	str	r5, [r4, #4]
 8012a60:	f7ff f952 	bl	8011d08 <_AddFreeMemory>
 8012a64:	f7ff fbd6 	bl	8012214 <_EnlargeBlocks>
 8012a68:	6325      	str	r5, [r4, #48]	; 0x30
 8012a6a:	e76f      	b.n	801294c <GUI_ALLOC_GetMaxSize+0xc>
 8012a6c:	200466c0 	.word	0x200466c0
 8012a70:	200001dc 	.word	0x200001dc

08012a74 <GUI_ALLOC_RequestSize>:
 8012a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a76:	4c58      	ldr	r4, [pc, #352]	; (8012bd8 <GUI_ALLOC_RequestSize+0x164>)
 8012a78:	f005 f95e 	bl	8017d38 <GUI_Lock>
 8012a7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d057      	beq.n	8012b34 <GUI_ALLOC_RequestSize+0xc0>
 8012a84:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8012a88:	4a53      	ldr	r2, [pc, #332]	; (8012bd8 <GUI_ALLOC_RequestSize+0x164>)
 8012a8a:	bb9b      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012a8c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8012a90:	bb83      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012a92:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8012a96:	bb6b      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012a98:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8012a9c:	bb53      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012a9e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8012aa2:	bb3b      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012aa4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8012aa8:	bb23      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012aaa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8012aae:	bb0b      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ab0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8012ab4:	b9f3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ab6:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8012ab8:	b9e3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012aba:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8012abc:	b9d3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012abe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012ac0:	b9c3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ac2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012ac4:	b9b3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ac6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8012ac8:	b9a3      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012aca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8012acc:	b993      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ace:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012ad0:	b983      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ad2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8012ad4:	b973      	cbnz	r3, 8012af4 <GUI_ALLOC_RequestSize+0x80>
 8012ad6:	f06f 030b 	mvn.w	r3, #11
 8012ada:	4940      	ldr	r1, [pc, #256]	; (8012bdc <GUI_ALLOC_RequestSize+0x168>)
 8012adc:	17da      	asrs	r2, r3, #31
 8012ade:	fb81 1303 	smull	r1, r3, r1, r3
 8012ae2:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8012ae6:	6a24      	ldr	r4, [r4, #32]
 8012ae8:	fb04 f403 	mul.w	r4, r4, r3
 8012aec:	f005 f91a 	bl	8017d24 <GUI_Unlock>
 8012af0:	4620      	mov	r0, r4
 8012af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0f5      	beq.n	8012ae6 <GUI_ALLOC_RequestSize+0x72>
 8012afa:	2200      	movs	r2, #0
 8012afc:	e001      	b.n	8012b02 <GUI_ALLOC_RequestSize+0x8e>
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	b143      	cbz	r3, 8012b14 <GUI_ALLOC_RequestSize+0xa0>
 8012b02:	6859      	ldr	r1, [r3, #4]
 8012b04:	4610      	mov	r0, r2
 8012b06:	4291      	cmp	r1, r2
 8012b08:	d901      	bls.n	8012b0e <GUI_ALLOC_RequestSize+0x9a>
 8012b0a:	460a      	mov	r2, r1
 8012b0c:	4608      	mov	r0, r1
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d1f4      	bne.n	8012afe <GUI_ALLOC_RequestSize+0x8a>
 8012b14:	380c      	subs	r0, #12
 8012b16:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	d8dd      	bhi.n	8012ada <GUI_ALLOC_RequestSize+0x66>
 8012b1e:	6a22      	ldr	r2, [r4, #32]
 8012b20:	4b2e      	ldr	r3, [pc, #184]	; (8012bdc <GUI_ALLOC_RequestSize+0x168>)
 8012b22:	fb02 f000 	mul.w	r0, r2, r0
 8012b26:	fba3 2300 	umull	r2, r3, r3, r0
 8012b2a:	095c      	lsrs	r4, r3, #5
 8012b2c:	f005 f8fa 	bl	8017d24 <GUI_Unlock>
 8012b30:	4620      	mov	r0, r4
 8012b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b34:	4b2a      	ldr	r3, [pc, #168]	; (8012be0 <GUI_ALLOC_RequestSize+0x16c>)
 8012b36:	2101      	movs	r1, #1
 8012b38:	689a      	ldr	r2, [r3, #8]
 8012b3a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8012b3e:	6858      	ldr	r0, [r3, #4]
 8012b40:	b90a      	cbnz	r2, 8012b46 <GUI_ALLOC_RequestSize+0xd2>
 8012b42:	0882      	lsrs	r2, r0, #2
 8012b44:	609a      	str	r2, [r3, #8]
 8012b46:	265a      	movs	r6, #90	; 0x5a
 8012b48:	2210      	movs	r2, #16
 8012b4a:	2520      	movs	r5, #32
 8012b4c:	2740      	movs	r7, #64	; 0x40
 8012b4e:	6226      	str	r6, [r4, #32]
 8012b50:	2680      	movs	r6, #128	; 0x80
 8012b52:	6422      	str	r2, [r4, #64]	; 0x40
 8012b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012b58:	64a5      	str	r5, [r4, #72]	; 0x48
 8012b5a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012b5e:	6819      	ldr	r1, [r3, #0]
 8012b60:	6527      	str	r7, [r4, #80]	; 0x50
 8012b62:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8012b66:	65a6      	str	r6, [r4, #88]	; 0x58
 8012b68:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8012b6c:	6622      	str	r2, [r4, #96]	; 0x60
 8012b6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012b72:	66a5      	str	r5, [r4, #104]	; 0x68
 8012b74:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012b78:	f1a1 0314 	sub.w	r3, r1, #20
 8012b7c:	6727      	str	r7, [r4, #112]	; 0x70
 8012b7e:	67a6      	str	r6, [r4, #120]	; 0x78
 8012b80:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8012b84:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8012b88:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8012b8c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8012b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012b94:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8012b98:	4403      	add	r3, r0
 8012b9a:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8012b9e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8012ba2:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8012ba6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8012baa:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8012bae:	2202      	movs	r2, #2
 8012bb0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8012bb4:	2501      	movs	r5, #1
 8012bb6:	63a1      	str	r1, [r4, #56]	; 0x38
 8012bb8:	6363      	str	r3, [r4, #52]	; 0x34
 8012bba:	6122      	str	r2, [r4, #16]
 8012bbc:	60e0      	str	r0, [r4, #12]
 8012bbe:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8012bc2:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8012bc6:	605d      	str	r5, [r3, #4]
 8012bc8:	6265      	str	r5, [r4, #36]	; 0x24
 8012bca:	6065      	str	r5, [r4, #4]
 8012bcc:	f7ff f89c 	bl	8011d08 <_AddFreeMemory>
 8012bd0:	f7ff fb20 	bl	8012214 <_EnlargeBlocks>
 8012bd4:	6325      	str	r5, [r4, #48]	; 0x30
 8012bd6:	e755      	b.n	8012a84 <GUI_ALLOC_RequestSize+0x10>
 8012bd8:	200466c0 	.word	0x200466c0
 8012bdc:	51eb851f 	.word	0x51eb851f
 8012be0:	200001dc 	.word	0x200001dc

08012be4 <GUI_ALLOC_Lock>:
 8012be4:	4a02      	ldr	r2, [pc, #8]	; (8012bf0 <GUI_ALLOC_Lock+0xc>)
 8012be6:	6993      	ldr	r3, [r2, #24]
 8012be8:	3301      	adds	r3, #1
 8012bea:	6193      	str	r3, [r2, #24]
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	200466c0 	.word	0x200466c0

08012bf4 <GUI_ALLOC_Unlock>:
 8012bf4:	4a02      	ldr	r2, [pc, #8]	; (8012c00 <GUI_ALLOC_Unlock+0xc>)
 8012bf6:	6993      	ldr	r3, [r2, #24]
 8012bf8:	3b01      	subs	r3, #1
 8012bfa:	6193      	str	r3, [r2, #24]
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	200466c0 	.word	0x200466c0

08012c04 <GUI_ALLOC_AssignMemory>:
 8012c04:	f021 0103 	bic.w	r1, r1, #3
 8012c08:	4b01      	ldr	r3, [pc, #4]	; (8012c10 <GUI_ALLOC_AssignMemory+0xc>)
 8012c0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8012c0e:	4770      	bx	lr
 8012c10:	200001dc 	.word	0x200001dc

08012c14 <GUI_ALLOC_Free>:
 8012c14:	b900      	cbnz	r0, 8012c18 <GUI_ALLOC_Free+0x4>
 8012c16:	4770      	bx	lr
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	4c0d      	ldr	r4, [pc, #52]	; (8012c50 <GUI_ALLOC_Free+0x3c>)
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	f005 f88b 	bl	8017d38 <GUI_Lock>
 8012c22:	00ee      	lsls	r6, r5, #3
 8012c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c26:	4433      	add	r3, r6
 8012c28:	6859      	ldr	r1, [r3, #4]
 8012c2a:	6848      	ldr	r0, [r1, #4]
 8012c2c:	f7ff f86c 	bl	8011d08 <_AddFreeMemory>
 8012c30:	6863      	ldr	r3, [r4, #4]
 8012c32:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012c34:	2100      	movs	r1, #0
 8012c36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c38:	3301      	adds	r3, #1
 8012c3a:	4416      	add	r6, r2
 8012c3c:	6063      	str	r3, [r4, #4]
 8012c3e:	6070      	str	r0, [r6, #4]
 8012c40:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 8012c44:	6265      	str	r5, [r4, #36]	; 0x24
 8012c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c4a:	f005 b86b 	b.w	8017d24 <GUI_Unlock>
 8012c4e:	bf00      	nop
 8012c50:	200466c0 	.word	0x200466c0

08012c54 <GUI_ALLOC_AllocZero>:
 8012c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c56:	4605      	mov	r5, r0
 8012c58:	f005 f86e 	bl	8017d38 <GUI_Lock>
 8012c5c:	b925      	cbnz	r5, 8012c68 <GUI_ALLOC_AllocZero+0x14>
 8012c5e:	2400      	movs	r4, #0
 8012c60:	f005 f860 	bl	8017d24 <GUI_Unlock>
 8012c64:	4620      	mov	r0, r4
 8012c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c68:	f005 f866 	bl	8017d38 <GUI_Lock>
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7ff fb41 	bl	80122f4 <_Alloc>
 8012c72:	4604      	mov	r4, r0
 8012c74:	f005 f856 	bl	8017d24 <GUI_Unlock>
 8012c78:	2c00      	cmp	r4, #0
 8012c7a:	d0f0      	beq.n	8012c5e <GUI_ALLOC_AllocZero+0xa>
 8012c7c:	4e14      	ldr	r6, [pc, #80]	; (8012cd0 <GUI_ALLOC_AllocZero+0x7c>)
 8012c7e:	462a      	mov	r2, r5
 8012c80:	4f14      	ldr	r7, [pc, #80]	; (8012cd4 <GUI_ALLOC_AllocZero+0x80>)
 8012c82:	2100      	movs	r1, #0
 8012c84:	69f0      	ldr	r0, [r6, #28]
 8012c86:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012c88:	3001      	adds	r0, #1
 8012c8a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8012c8e:	61f0      	str	r0, [r6, #28]
 8012c90:	f813 0034 	ldrb.w	r0, [r3, r4, lsl #3]
 8012c94:	3001      	adds	r0, #1
 8012c96:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 8012c9a:	686d      	ldr	r5, [r5, #4]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	f105 0008 	add.w	r0, r5, #8
 8012ca2:	4798      	blx	r3
 8012ca4:	6829      	ldr	r1, [r5, #0]
 8012ca6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8012ca8:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8012cac:	2b01      	cmp	r3, #1
 8012cae:	d901      	bls.n	8012cb4 <GUI_ALLOC_AllocZero+0x60>
 8012cb0:	69f0      	ldr	r0, [r6, #28]
 8012cb2:	b930      	cbnz	r0, 8012cc2 <GUI_ALLOC_AllocZero+0x6e>
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8012cba:	f005 f833 	bl	8017d24 <GUI_Unlock>
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cc2:	3801      	subs	r0, #1
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	61f0      	str	r0, [r6, #28]
 8012cc8:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8012ccc:	e7f5      	b.n	8012cba <GUI_ALLOC_AllocZero+0x66>
 8012cce:	bf00      	nop
 8012cd0:	200466c0 	.word	0x200466c0
 8012cd4:	20000050 	.word	0x20000050

08012cd8 <GUIPROP_DispChar>:
 8012cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cdc:	4d3a      	ldr	r5, [pc, #232]	; (8012dc8 <GUIPROP_DispChar+0xf0>)
 8012cde:	b089      	sub	sp, #36	; 0x24
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	69da      	ldr	r2, [r3, #28]
 8012ce4:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 8012ce8:	69d3      	ldr	r3, [r2, #28]
 8012cea:	b143      	cbz	r3, 8012cfe <GUIPROP_DispChar+0x26>
 8012cec:	881a      	ldrh	r2, [r3, #0]
 8012cee:	4290      	cmp	r0, r2
 8012cf0:	d302      	bcc.n	8012cf8 <GUIPROP_DispChar+0x20>
 8012cf2:	8859      	ldrh	r1, [r3, #2]
 8012cf4:	4281      	cmp	r1, r0
 8012cf6:	d205      	bcs.n	8012d04 <GUIPROP_DispChar+0x2c>
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1f6      	bne.n	8012cec <GUIPROP_DispChar+0x14>
 8012cfe:	b009      	add	sp, #36	; 0x24
 8012d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d04:	1a84      	subs	r4, r0, r2
 8012d06:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8012d0a:	4648      	mov	r0, r9
 8012d0c:	eb08 06c4 	add.w	r6, r8, r4, lsl #3
 8012d10:	f896 b002 	ldrb.w	fp, [r6, #2]
 8012d14:	f006 fd26 	bl	8019764 <LCD_SetDrawMode>
 8012d18:	4682      	mov	sl, r0
 8012d1a:	6828      	ldr	r0, [r5, #0]
 8012d1c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 8012d20:	f04f 0e01 	mov.w	lr, #1
 8012d24:	69c7      	ldr	r7, [r0, #28]
 8012d26:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 8012d2a:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8012d2e:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8012d32:	7e3b      	ldrb	r3, [r7, #24]
 8012d34:	9007      	str	r0, [sp, #28]
 8012d36:	f8cd c014 	str.w	ip, [sp, #20]
 8012d3a:	6870      	ldr	r0, [r6, #4]
 8012d3c:	f8cd b00c 	str.w	fp, [sp, #12]
 8012d40:	9004      	str	r0, [sp, #16]
 8012d42:	f8cd e008 	str.w	lr, [sp, #8]
 8012d46:	f897 e01b 	ldrb.w	lr, [r7, #27]
 8012d4a:	9807      	ldr	r0, [sp, #28]
 8012d4c:	f8cd e004 	str.w	lr, [sp, #4]
 8012d50:	7ebf      	ldrb	r7, [r7, #26]
 8012d52:	9700      	str	r7, [sp, #0]
 8012d54:	f006 fecc 	bl	8019af0 <LCD_DrawBitmap>
 8012d58:	682b      	ldr	r3, [r5, #0]
 8012d5a:	69da      	ldr	r2, [r3, #28]
 8012d5c:	7e53      	ldrb	r3, [r2, #25]
 8012d5e:	7e17      	ldrb	r7, [r2, #24]
 8012d60:	42bb      	cmp	r3, r7
 8012d62:	d923      	bls.n	8012dac <GUIPROP_DispChar+0xd4>
 8012d64:	f1b9 0f02 	cmp.w	r9, #2
 8012d68:	9307      	str	r3, [sp, #28]
 8012d6a:	d01f      	beq.n	8012dac <GUIPROP_DispChar+0xd4>
 8012d6c:	f892 b01b 	ldrb.w	fp, [r2, #27]
 8012d70:	f000 fbb8 	bl	80134e4 <GUI_GetColor>
 8012d74:	4681      	mov	r9, r0
 8012d76:	f000 fba9 	bl	80134cc <GUI_GetBkColor>
 8012d7a:	f000 fd5d 	bl	8013838 <GUI_SetColor>
 8012d7e:	4b12      	ldr	r3, [pc, #72]	; (8012dc8 <GUIPROP_DispChar+0xf0>)
 8012d80:	f818 e034 	ldrb.w	lr, [r8, r4, lsl #3]
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	9b07      	ldr	r3, [sp, #28]
 8012d88:	69c1      	ldr	r1, [r0, #28]
 8012d8a:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	; 0x22
 8012d8e:	7eca      	ldrb	r2, [r1, #27]
 8012d90:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8012d94:	4620      	mov	r0, r4
 8012d96:	fb0e 4202 	mla	r2, lr, r2, r4
 8012d9a:	fb0b 1303 	mla	r3, fp, r3, r1
 8012d9e:	fb0b 1107 	mla	r1, fp, r7, r1
 8012da2:	f006 fd67 	bl	8019874 <LCD_FillRect>
 8012da6:	4648      	mov	r0, r9
 8012da8:	f000 fd46 	bl	8013838 <GUI_SetColor>
 8012dac:	4650      	mov	r0, sl
 8012dae:	f006 fcd9 	bl	8019764 <LCD_SetDrawMode>
 8012db2:	682b      	ldr	r3, [r5, #0]
 8012db4:	7871      	ldrb	r1, [r6, #1]
 8012db6:	69d8      	ldr	r0, [r3, #28]
 8012db8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8012dba:	7e80      	ldrb	r0, [r0, #26]
 8012dbc:	fb00 2201 	mla	r2, r0, r1, r2
 8012dc0:	845a      	strh	r2, [r3, #34]	; 0x22
 8012dc2:	b009      	add	sp, #36	; 0x24
 8012dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc8:	20000018 	.word	0x20000018

08012dcc <GUIPROP_GetCharDistX>:
 8012dcc:	4b11      	ldr	r3, [pc, #68]	; (8012e14 <GUIPROP_GetCharDistX+0x48>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	b470      	push	{r4, r5, r6}
 8012dd2:	69dd      	ldr	r5, [r3, #28]
 8012dd4:	69eb      	ldr	r3, [r5, #28]
 8012dd6:	b143      	cbz	r3, 8012dea <GUIPROP_GetCharDistX+0x1e>
 8012dd8:	881a      	ldrh	r2, [r3, #0]
 8012dda:	4290      	cmp	r0, r2
 8012ddc:	d302      	bcc.n	8012de4 <GUIPROP_GetCharDistX+0x18>
 8012dde:	885c      	ldrh	r4, [r3, #2]
 8012de0:	4284      	cmp	r4, r0
 8012de2:	d205      	bcs.n	8012df0 <GUIPROP_GetCharDistX+0x24>
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d1f6      	bne.n	8012dd8 <GUIPROP_GetCharDistX+0xc>
 8012dea:	4618      	mov	r0, r3
 8012dec:	bc70      	pop	{r4, r5, r6}
 8012dee:	4770      	bx	lr
 8012df0:	1a82      	subs	r2, r0, r2
 8012df2:	685e      	ldr	r6, [r3, #4]
 8012df4:	7eac      	ldrb	r4, [r5, #26]
 8012df6:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 8012dfa:	785b      	ldrb	r3, [r3, #1]
 8012dfc:	fb13 f004 	smulbb	r0, r3, r4
 8012e00:	2900      	cmp	r1, #0
 8012e02:	d0f3      	beq.n	8012dec <GUIPROP_GetCharDistX+0x20>
 8012e04:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 8012e08:	fb14 f303 	smulbb	r3, r4, r3
 8012e0c:	bc70      	pop	{r4, r5, r6}
 8012e0e:	600b      	str	r3, [r1, #0]
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	20000018 	.word	0x20000018

08012e18 <GUIPROP_GetFontInfo>:
 8012e18:	2301      	movs	r3, #1
 8012e1a:	800b      	strh	r3, [r1, #0]
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop

08012e20 <GUIPROP_IsInFont>:
 8012e20:	69c0      	ldr	r0, [r0, #28]
 8012e22:	b150      	cbz	r0, 8012e3a <GUIPROP_IsInFont+0x1a>
 8012e24:	8803      	ldrh	r3, [r0, #0]
 8012e26:	428b      	cmp	r3, r1
 8012e28:	d802      	bhi.n	8012e30 <GUIPROP_IsInFont+0x10>
 8012e2a:	8843      	ldrh	r3, [r0, #2]
 8012e2c:	428b      	cmp	r3, r1
 8012e2e:	d203      	bcs.n	8012e38 <GUIPROP_IsInFont+0x18>
 8012e30:	6880      	ldr	r0, [r0, #8]
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d1f6      	bne.n	8012e24 <GUIPROP_IsInFont+0x4>
 8012e36:	4770      	bx	lr
 8012e38:	2001      	movs	r0, #1
 8012e3a:	4770      	bx	lr

08012e3c <GL_DrawCircle>:
 8012e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	f240 23c3 	movw	r3, #707	; 0x2c3
 8012e44:	4692      	mov	sl, r2
 8012e46:	b089      	sub	sp, #36	; 0x24
 8012e48:	4a6d      	ldr	r2, [pc, #436]	; (8013000 <GL_DrawCircle+0x1c4>)
 8012e4a:	fb03 f30a 	mul.w	r3, r3, sl
 8012e4e:	4680      	mov	r8, r0
 8012e50:	9104      	str	r1, [sp, #16]
 8012e52:	f1ba 0f00 	cmp.w	sl, #0
 8012e56:	fb82 1203 	smull	r1, r2, r2, r3
 8012e5a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8012e5e:	bfb4      	ite	lt
 8012e60:	f10a 0001 	addlt.w	r0, sl, #1
 8012e64:	4650      	movge	r0, sl
 8012e66:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8012e6a:	fb0a f60a 	mul.w	r6, sl, sl
 8012e6e:	4d65      	ldr	r5, [pc, #404]	; (8013004 <GL_DrawCircle+0x1c8>)
 8012e70:	3301      	adds	r3, #1
 8012e72:	9c04      	ldr	r4, [sp, #16]
 8012e74:	9305      	str	r3, [sp, #20]
 8012e76:	eb0a 0308 	add.w	r3, sl, r8
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	eb0a 0b04 	add.w	fp, sl, r4
 8012e80:	461f      	mov	r7, r3
 8012e82:	eb06 0360 	add.w	r3, r6, r0, asr #1
 8012e86:	9306      	str	r3, [sp, #24]
 8012e88:	4638      	mov	r0, r7
 8012e8a:	682b      	ldr	r3, [r5, #0]
 8012e8c:	46b9      	mov	r9, r7
 8012e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	4798      	blx	r3
 8012e94:	682b      	ldr	r3, [r5, #0]
 8012e96:	4621      	mov	r1, r4
 8012e98:	ebca 0008 	rsb	r0, sl, r8
 8012e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	4798      	blx	r3
 8012ea2:	682b      	ldr	r3, [r5, #0]
 8012ea4:	4659      	mov	r1, fp
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	4798      	blx	r3
 8012eae:	682b      	ldr	r3, [r5, #0]
 8012eb0:	ebca 0104 	rsb	r1, sl, r4
 8012eb4:	4640      	mov	r0, r8
 8012eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	4798      	blx	r3
 8012ebc:	9b05      	ldr	r3, [sp, #20]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f340 809b 	ble.w	8012ffa <GL_DrawCircle+0x1be>
 8012ec4:	4633      	mov	r3, r6
 8012ec6:	2401      	movs	r4, #1
 8012ec8:	4656      	mov	r6, sl
 8012eca:	462f      	mov	r7, r5
 8012ecc:	46c2      	mov	sl, r8
 8012ece:	46c8      	mov	r8, r9
 8012ed0:	e046      	b.n	8012f60 <GL_DrawCircle+0x124>
 8012ed2:	ebc4 030a 	rsb	r3, r4, sl
 8012ed6:	eb04 090a 	add.w	r9, r4, sl
 8012eda:	9301      	str	r3, [sp, #4]
 8012edc:	9b04      	ldr	r3, [sp, #16]
 8012ede:	191a      	adds	r2, r3, r4
 8012ee0:	1b1b      	subs	r3, r3, r4
 8012ee2:	9202      	str	r2, [sp, #8]
 8012ee4:	9303      	str	r3, [sp, #12]
 8012ee6:	682b      	ldr	r3, [r5, #0]
 8012ee8:	4659      	mov	r1, fp
 8012eea:	4648      	mov	r0, r9
 8012eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	4798      	blx	r3
 8012ef2:	682b      	ldr	r3, [r5, #0]
 8012ef4:	4659      	mov	r1, fp
 8012ef6:	9801      	ldr	r0, [sp, #4]
 8012ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	4798      	blx	r3
 8012efe:	682b      	ldr	r3, [r5, #0]
 8012f00:	9902      	ldr	r1, [sp, #8]
 8012f02:	4640      	mov	r0, r8
 8012f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	4798      	blx	r3
 8012f0a:	682b      	ldr	r3, [r5, #0]
 8012f0c:	9903      	ldr	r1, [sp, #12]
 8012f0e:	4640      	mov	r0, r8
 8012f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	4798      	blx	r3
 8012f16:	b1ee      	cbz	r6, 8012f54 <GL_DrawCircle+0x118>
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	4648      	mov	r0, r9
 8012f1c:	9a04      	ldr	r2, [sp, #16]
 8012f1e:	ebc6 090a 	rsb	r9, r6, sl
 8012f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f24:	1b92      	subs	r2, r2, r6
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	4611      	mov	r1, r2
 8012f2a:	9207      	str	r2, [sp, #28]
 8012f2c:	4798      	blx	r3
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	9a07      	ldr	r2, [sp, #28]
 8012f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f34:	4611      	mov	r1, r2
 8012f36:	9801      	ldr	r0, [sp, #4]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	4798      	blx	r3
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	9902      	ldr	r1, [sp, #8]
 8012f40:	4648      	mov	r0, r9
 8012f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	4798      	blx	r3
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	4648      	mov	r0, r9
 8012f4c:	9903      	ldr	r1, [sp, #12]
 8012f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	4798      	blx	r3
 8012f54:	3401      	adds	r4, #1
 8012f56:	9b05      	ldr	r3, [sp, #20]
 8012f58:	42a3      	cmp	r3, r4
 8012f5a:	db4e      	blt.n	8012ffa <GL_DrawCircle+0x1be>
 8012f5c:	fb06 f306 	mul.w	r3, r6, r6
 8012f60:	fb04 3304 	mla	r3, r4, r4, r3
 8012f64:	9a06      	ldr	r2, [sp, #24]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	dab3      	bge.n	8012ed2 <GL_DrawCircle+0x96>
 8012f6a:	ebc4 020a 	rsb	r2, r4, sl
 8012f6e:	682b      	ldr	r3, [r5, #0]
 8012f70:	eb04 090a 	add.w	r9, r4, sl
 8012f74:	4659      	mov	r1, fp
 8012f76:	9201      	str	r2, [sp, #4]
 8012f78:	9a04      	ldr	r2, [sp, #16]
 8012f7a:	4648      	mov	r0, r9
 8012f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f7e:	18a2      	adds	r2, r4, r2
 8012f80:	685b      	ldr	r3, [r3, #4]
 8012f82:	9202      	str	r2, [sp, #8]
 8012f84:	4798      	blx	r3
 8012f86:	682b      	ldr	r3, [r5, #0]
 8012f88:	4659      	mov	r1, fp
 8012f8a:	9a04      	ldr	r2, [sp, #16]
 8012f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f8e:	1b12      	subs	r2, r2, r4
 8012f90:	9801      	ldr	r0, [sp, #4]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	9203      	str	r2, [sp, #12]
 8012f96:	4798      	blx	r3
 8012f98:	682b      	ldr	r3, [r5, #0]
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	9902      	ldr	r1, [sp, #8]
 8012f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	4798      	blx	r3
 8012fa4:	682b      	ldr	r3, [r5, #0]
 8012fa6:	4640      	mov	r0, r8
 8012fa8:	9903      	ldr	r1, [sp, #12]
 8012faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	4798      	blx	r3
 8012fb0:	b1e6      	cbz	r6, 8012fec <GL_DrawCircle+0x1b0>
 8012fb2:	9a04      	ldr	r2, [sp, #16]
 8012fb4:	4648      	mov	r0, r9
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	ebc6 0b0a 	rsb	fp, r6, sl
 8012fbc:	ebc6 0802 	rsb	r8, r6, r2
 8012fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fc2:	4641      	mov	r1, r8
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	4798      	blx	r3
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	4641      	mov	r1, r8
 8012fcc:	9801      	ldr	r0, [sp, #4]
 8012fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	4798      	blx	r3
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	4658      	mov	r0, fp
 8012fd8:	9902      	ldr	r1, [sp, #8]
 8012fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	4798      	blx	r3
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	4658      	mov	r0, fp
 8012fe4:	9903      	ldr	r1, [sp, #12]
 8012fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	4798      	blx	r3
 8012fec:	3e01      	subs	r6, #1
 8012fee:	9b04      	ldr	r3, [sp, #16]
 8012ff0:	eb06 080a 	add.w	r8, r6, sl
 8012ff4:	eb06 0b03 	add.w	fp, r6, r3
 8012ff8:	e775      	b.n	8012ee6 <GL_DrawCircle+0xaa>
 8012ffa:	b009      	add	sp, #36	; 0x24
 8012ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013000:	10624dd3 	.word	0x10624dd3
 8013004:	20000018 	.word	0x20000018

08013008 <GUI_DrawCircle>:
 8013008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300a:	b083      	sub	sp, #12
 801300c:	4605      	mov	r5, r0
 801300e:	460c      	mov	r4, r1
 8013010:	4616      	mov	r6, r2
 8013012:	f004 fe91 	bl	8017d38 <GUI_Lock>
 8013016:	4b13      	ldr	r3, [pc, #76]	; (8013064 <GUI_DrawCircle+0x5c>)
 8013018:	b2b7      	uxth	r7, r6
 801301a:	4668      	mov	r0, sp
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013022:	4415      	add	r5, r2
 8013024:	441c      	add	r4, r3
 8013026:	b2aa      	uxth	r2, r5
 8013028:	b2a3      	uxth	r3, r4
 801302a:	ebc7 0e02 	rsb	lr, r7, r2
 801302e:	443a      	add	r2, r7
 8013030:	1bd9      	subs	r1, r3, r7
 8013032:	443b      	add	r3, r7
 8013034:	f8ad e000 	strh.w	lr, [sp]
 8013038:	f8ad 2004 	strh.w	r2, [sp, #4]
 801303c:	f8ad 1002 	strh.w	r1, [sp, #2]
 8013040:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013044:	f00d f950 	bl	80202e8 <WM__InitIVRSearch>
 8013048:	b140      	cbz	r0, 801305c <GUI_DrawCircle+0x54>
 801304a:	4632      	mov	r2, r6
 801304c:	4621      	mov	r1, r4
 801304e:	4628      	mov	r0, r5
 8013050:	f7ff fef4 	bl	8012e3c <GL_DrawCircle>
 8013054:	f00d f81e 	bl	8020094 <WM__GetNextIVR>
 8013058:	2800      	cmp	r0, #0
 801305a:	d1f6      	bne.n	801304a <GUI_DrawCircle+0x42>
 801305c:	f004 fe62 	bl	8017d24 <GUI_Unlock>
 8013060:	b003      	add	sp, #12
 8013062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013064:	20000018 	.word	0x20000018

08013068 <GL_FillCircle>:
 8013068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306c:	f240 23c3 	movw	r3, #707	; 0x2c3
 8013070:	4615      	mov	r5, r2
 8013072:	4a34      	ldr	r2, [pc, #208]	; (8013144 <GL_FillCircle+0xdc>)
 8013074:	b085      	sub	sp, #20
 8013076:	fb03 f305 	mul.w	r3, r3, r5
 801307a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8013148 <GL_FillCircle+0xe0>
 801307e:	9001      	str	r0, [sp, #4]
 8013080:	2d00      	cmp	r5, #0
 8013082:	fb82 2803 	smull	r2, r8, r2, r3
 8013086:	ea4f 73e3 	mov.w	r3, r3, asr #31
 801308a:	bfb4      	ite	lt
 801308c:	1c6c      	addlt	r4, r5, #1
 801308e:	462c      	movge	r4, r5
 8013090:	ebc3 18a8 	rsb	r8, r3, r8, asr #6
 8013094:	9b01      	ldr	r3, [sp, #4]
 8013096:	fb05 fb05 	mul.w	fp, r5, r5
 801309a:	4689      	mov	r9, r1
 801309c:	18ee      	adds	r6, r5, r3
 801309e:	1b5f      	subs	r7, r3, r5
 80130a0:	f8da 3000 	ldr.w	r3, [sl]
 80130a4:	f108 0801 	add.w	r8, r8, #1
 80130a8:	eb0b 0464 	add.w	r4, fp, r4, asr #1
 80130ac:	4632      	mov	r2, r6
 80130ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130b0:	4638      	mov	r0, r7
 80130b2:	9400      	str	r4, [sp, #0]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	4798      	blx	r3
 80130b8:	f1b8 0f00 	cmp.w	r8, #0
 80130bc:	dd3f      	ble.n	801313e <GL_FillCircle+0xd6>
 80130be:	9b01      	ldr	r3, [sp, #4]
 80130c0:	2401      	movs	r4, #1
 80130c2:	191a      	adds	r2, r3, r4
 80130c4:	3b01      	subs	r3, #1
 80130c6:	9202      	str	r2, [sp, #8]
 80130c8:	9303      	str	r3, [sp, #12]
 80130ca:	e01a      	b.n	8013102 <GL_FillCircle+0x9a>
 80130cc:	3d01      	subs	r5, #1
 80130ce:	9b01      	ldr	r3, [sp, #4]
 80130d0:	18ee      	adds	r6, r5, r3
 80130d2:	1b5f      	subs	r7, r3, r5
 80130d4:	f8da 3000 	ldr.w	r3, [sl]
 80130d8:	eb09 0104 	add.w	r1, r9, r4
 80130dc:	4632      	mov	r2, r6
 80130de:	4638      	mov	r0, r7
 80130e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130e2:	fb05 fb05 	mul.w	fp, r5, r5
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4798      	blx	r3
 80130ea:	f8da 3000 	ldr.w	r3, [sl]
 80130ee:	ebc4 0109 	rsb	r1, r4, r9
 80130f2:	3401      	adds	r4, #1
 80130f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130f6:	4632      	mov	r2, r6
 80130f8:	4638      	mov	r0, r7
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4798      	blx	r3
 80130fe:	45a0      	cmp	r8, r4
 8013100:	db1d      	blt.n	801313e <GL_FillCircle+0xd6>
 8013102:	fb04 bb04 	mla	fp, r4, r4, fp
 8013106:	9b00      	ldr	r3, [sp, #0]
 8013108:	455b      	cmp	r3, fp
 801310a:	dae3      	bge.n	80130d4 <GL_FillCircle+0x6c>
 801310c:	45a8      	cmp	r8, r5
 801310e:	dadd      	bge.n	80130cc <GL_FillCircle+0x64>
 8013110:	9a02      	ldr	r2, [sp, #8]
 8013112:	eb09 0105 	add.w	r1, r9, r5
 8013116:	f8da 3000 	ldr.w	r3, [sl]
 801311a:	1b16      	subs	r6, r2, r4
 801311c:	9a03      	ldr	r2, [sp, #12]
 801311e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013120:	1917      	adds	r7, r2, r4
 8013122:	4630      	mov	r0, r6
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	463a      	mov	r2, r7
 8013128:	4798      	blx	r3
 801312a:	f8da 3000 	ldr.w	r3, [sl]
 801312e:	463a      	mov	r2, r7
 8013130:	4630      	mov	r0, r6
 8013132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013134:	ebc5 0109 	rsb	r1, r5, r9
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4798      	blx	r3
 801313c:	e7c6      	b.n	80130cc <GL_FillCircle+0x64>
 801313e:	b005      	add	sp, #20
 8013140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	10624dd3 	.word	0x10624dd3
 8013148:	20000018 	.word	0x20000018

0801314c <GUI_FillCircle>:
 801314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013150:	4604      	mov	r4, r0
 8013152:	460d      	mov	r5, r1
 8013154:	4616      	mov	r6, r2
 8013156:	f004 fdef 	bl	8017d38 <GUI_Lock>
 801315a:	4b0c      	ldr	r3, [pc, #48]	; (801318c <GUI_FillCircle+0x40>)
 801315c:	2000      	movs	r0, #0
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8013162:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8013166:	f00d f8bf 	bl	80202e8 <WM__InitIVRSearch>
 801316a:	b150      	cbz	r0, 8013182 <GUI_FillCircle+0x36>
 801316c:	4445      	add	r5, r8
 801316e:	443c      	add	r4, r7
 8013170:	4632      	mov	r2, r6
 8013172:	4629      	mov	r1, r5
 8013174:	4620      	mov	r0, r4
 8013176:	f7ff ff77 	bl	8013068 <GL_FillCircle>
 801317a:	f00c ff8b 	bl	8020094 <WM__GetNextIVR>
 801317e:	2800      	cmp	r0, #0
 8013180:	d1f6      	bne.n	8013170 <GUI_FillCircle+0x24>
 8013182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013186:	f004 bdcd 	b.w	8017d24 <GUI_Unlock>
 801318a:	bf00      	nop
 801318c:	20000018 	.word	0x20000018

08013190 <_cbDrawTextStyle>:
 8013190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013194:	4e2a      	ldr	r6, [pc, #168]	; (8013240 <_cbDrawTextStyle+0xb0>)
 8013196:	2100      	movs	r1, #0
 8013198:	6833      	ldr	r3, [r6, #0]
 801319a:	69da      	ldr	r2, [r3, #28]
 801319c:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 80131a0:	6853      	ldr	r3, [r2, #4]
 80131a2:	4798      	blx	r3
 80131a4:	6834      	ldr	r4, [r6, #0]
 80131a6:	7ee3      	ldrb	r3, [r4, #27]
 80131a8:	b38b      	cbz	r3, 801320e <_cbDrawTextStyle+0x7e>
 80131aa:	7ca1      	ldrb	r1, [r4, #18]
 80131ac:	1a2f      	subs	r7, r5, r0
 80131ae:	3d01      	subs	r5, #1
 80131b0:	07c8      	lsls	r0, r1, #31
 80131b2:	d512      	bpl.n	80131da <_cbDrawTextStyle+0x4a>
 80131b4:	69e2      	ldr	r2, [r4, #28]
 80131b6:	4638      	mov	r0, r7
 80131b8:	f9b4 4024 	ldrsh.w	r4, [r4, #36]	; 0x24
 80131bc:	f892 1020 	ldrb.w	r1, [r2, #32]
 80131c0:	7e12      	ldrb	r2, [r2, #24]
 80131c2:	4291      	cmp	r1, r2
 80131c4:	bfa8      	it	ge
 80131c6:	f102 31ff 	addge.w	r1, r2, #4294967295
 80131ca:	462a      	mov	r2, r5
 80131cc:	4421      	add	r1, r4
 80131ce:	440b      	add	r3, r1
 80131d0:	3b01      	subs	r3, #1
 80131d2:	f006 fb4f 	bl	8019874 <LCD_FillRect>
 80131d6:	6834      	ldr	r4, [r6, #0]
 80131d8:	7ca1      	ldrb	r1, [r4, #18]
 80131da:	078a      	lsls	r2, r1, #30
 80131dc:	d419      	bmi.n	8013212 <_cbDrawTextStyle+0x82>
 80131de:	074b      	lsls	r3, r1, #29
 80131e0:	d515      	bpl.n	801320e <_cbDrawTextStyle+0x7e>
 80131e2:	69e3      	ldr	r3, [r4, #28]
 80131e4:	462a      	mov	r2, r5
 80131e6:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
 80131ea:	4638      	mov	r0, r7
 80131ec:	f893 5020 	ldrb.w	r5, [r3, #32]
 80131f0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80131f4:	7ee3      	ldrb	r3, [r4, #27]
 80131f6:	1a69      	subs	r1, r5, r1
 80131f8:	3901      	subs	r1, #1
 80131fa:	2900      	cmp	r1, #0
 80131fc:	bfac      	ite	ge
 80131fe:	1871      	addge	r1, r6, r1
 8013200:	1c31      	addlt	r1, r6, #0
 8013202:	440b      	add	r3, r1
 8013204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013208:	3b01      	subs	r3, #1
 801320a:	f006 bb33 	b.w	8019874 <LCD_FillRect>
 801320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013212:	69e3      	ldr	r3, [r4, #28]
 8013214:	462a      	mov	r2, r5
 8013216:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
 801321a:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 801321e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8013222:	3101      	adds	r1, #1
 8013224:	7ee3      	ldrb	r3, [r4, #27]
 8013226:	eba0 0161 	sub.w	r1, r0, r1, asr #1
 801322a:	4638      	mov	r0, r7
 801322c:	4471      	add	r1, lr
 801322e:	440b      	add	r3, r1
 8013230:	3b01      	subs	r3, #1
 8013232:	f006 fb1f 	bl	8019874 <LCD_FillRect>
 8013236:	6834      	ldr	r4, [r6, #0]
 8013238:	7ca1      	ldrb	r1, [r4, #18]
 801323a:	074b      	lsls	r3, r1, #29
 801323c:	d5e7      	bpl.n	801320e <_cbDrawTextStyle+0x7e>
 801323e:	e7d0      	b.n	80131e2 <_cbDrawTextStyle+0x52>
 8013240:	20000018 	.word	0x20000018

08013244 <_cbDrawTextLine>:
 8013244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013248:	4f29      	ldr	r7, [pc, #164]	; (80132f0 <_cbDrawTextLine+0xac>)
 801324a:	683c      	ldr	r4, [r7, #0]
 801324c:	7ee3      	ldrb	r3, [r4, #27]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d034      	beq.n	80132bc <_cbDrawTextLine+0x78>
 8013252:	7ca1      	ldrb	r1, [r4, #18]
 8013254:	4605      	mov	r5, r0
 8013256:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
 801325a:	07c8      	lsls	r0, r1, #31
 801325c:	f106 36ff 	add.w	r6, r6, #4294967295
 8013260:	d512      	bpl.n	8013288 <_cbDrawTextLine+0x44>
 8013262:	69e2      	ldr	r2, [r4, #28]
 8013264:	4628      	mov	r0, r5
 8013266:	f9b4 4024 	ldrsh.w	r4, [r4, #36]	; 0x24
 801326a:	f892 1020 	ldrb.w	r1, [r2, #32]
 801326e:	7e12      	ldrb	r2, [r2, #24]
 8013270:	4291      	cmp	r1, r2
 8013272:	bfa8      	it	ge
 8013274:	f102 31ff 	addge.w	r1, r2, #4294967295
 8013278:	4632      	mov	r2, r6
 801327a:	4421      	add	r1, r4
 801327c:	440b      	add	r3, r1
 801327e:	3b01      	subs	r3, #1
 8013280:	f006 faf8 	bl	8019874 <LCD_FillRect>
 8013284:	683c      	ldr	r4, [r7, #0]
 8013286:	7ca1      	ldrb	r1, [r4, #18]
 8013288:	078a      	lsls	r2, r1, #30
 801328a:	d419      	bmi.n	80132c0 <_cbDrawTextLine+0x7c>
 801328c:	074b      	lsls	r3, r1, #29
 801328e:	d515      	bpl.n	80132bc <_cbDrawTextLine+0x78>
 8013290:	69e3      	ldr	r3, [r4, #28]
 8013292:	4628      	mov	r0, r5
 8013294:	4632      	mov	r2, r6
 8013296:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
 801329a:	f893 5020 	ldrb.w	r5, [r3, #32]
 801329e:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80132a2:	7ee3      	ldrb	r3, [r4, #27]
 80132a4:	1a69      	subs	r1, r5, r1
 80132a6:	3901      	subs	r1, #1
 80132a8:	2900      	cmp	r1, #0
 80132aa:	bfac      	ite	ge
 80132ac:	1871      	addge	r1, r6, r1
 80132ae:	1c31      	addlt	r1, r6, #0
 80132b0:	440b      	add	r3, r1
 80132b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132b6:	3b01      	subs	r3, #1
 80132b8:	f006 badc 	b.w	8019874 <LCD_FillRect>
 80132bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c0:	69e3      	ldr	r3, [r4, #28]
 80132c2:	4632      	mov	r2, r6
 80132c4:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
 80132c8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80132cc:	f893 0020 	ldrb.w	r0, [r3, #32]
 80132d0:	3101      	adds	r1, #1
 80132d2:	7ee3      	ldrb	r3, [r4, #27]
 80132d4:	eba0 0161 	sub.w	r1, r0, r1, asr #1
 80132d8:	4628      	mov	r0, r5
 80132da:	4471      	add	r1, lr
 80132dc:	440b      	add	r3, r1
 80132de:	3b01      	subs	r3, #1
 80132e0:	f006 fac8 	bl	8019874 <LCD_FillRect>
 80132e4:	683c      	ldr	r4, [r7, #0]
 80132e6:	7ca1      	ldrb	r1, [r4, #18]
 80132e8:	074b      	lsls	r3, r1, #29
 80132ea:	d5e7      	bpl.n	80132bc <_cbDrawTextLine+0x78>
 80132ec:	e7d0      	b.n	8013290 <_cbDrawTextLine+0x4c>
 80132ee:	bf00      	nop
 80132f0:	20000018 	.word	0x20000018

080132f4 <GUI_Long2Len>:
 80132f4:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80132f8:	4602      	mov	r2, r0
 80132fa:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80132fe:	2b09      	cmp	r3, #9
 8013300:	dd1f      	ble.n	8013342 <GUI_Long2Len+0x4e>
 8013302:	2b63      	cmp	r3, #99	; 0x63
 8013304:	d920      	bls.n	8013348 <GUI_Long2Len+0x54>
 8013306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801330a:	d320      	bcc.n	801334e <GUI_Long2Len+0x5a>
 801330c:	f242 710f 	movw	r1, #9999	; 0x270f
 8013310:	428b      	cmp	r3, r1
 8013312:	d91f      	bls.n	8013354 <GUI_Long2Len+0x60>
 8013314:	4917      	ldr	r1, [pc, #92]	; (8013374 <GUI_Long2Len+0x80>)
 8013316:	428b      	cmp	r3, r1
 8013318:	d91f      	bls.n	801335a <GUI_Long2Len+0x66>
 801331a:	4917      	ldr	r1, [pc, #92]	; (8013378 <GUI_Long2Len+0x84>)
 801331c:	428b      	cmp	r3, r1
 801331e:	d91f      	bls.n	8013360 <GUI_Long2Len+0x6c>
 8013320:	4916      	ldr	r1, [pc, #88]	; (801337c <GUI_Long2Len+0x88>)
 8013322:	428b      	cmp	r3, r1
 8013324:	d91f      	bls.n	8013366 <GUI_Long2Len+0x72>
 8013326:	4916      	ldr	r1, [pc, #88]	; (8013380 <GUI_Long2Len+0x8c>)
 8013328:	428b      	cmp	r3, r1
 801332a:	d91f      	bls.n	801336c <GUI_Long2Len+0x78>
 801332c:	4915      	ldr	r1, [pc, #84]	; (8013384 <GUI_Long2Len+0x90>)
 801332e:	428b      	cmp	r3, r1
 8013330:	bf8b      	itete	hi
 8013332:	200a      	movhi	r0, #10
 8013334:	2009      	movls	r0, #9
 8013336:	2309      	movhi	r3, #9
 8013338:	2308      	movls	r3, #8
 801333a:	2a00      	cmp	r2, #0
 801333c:	bfb8      	it	lt
 801333e:	1c98      	addlt	r0, r3, #2
 8013340:	4770      	bx	lr
 8013342:	2001      	movs	r0, #1
 8013344:	2300      	movs	r3, #0
 8013346:	e7f8      	b.n	801333a <GUI_Long2Len+0x46>
 8013348:	2002      	movs	r0, #2
 801334a:	2301      	movs	r3, #1
 801334c:	e7f5      	b.n	801333a <GUI_Long2Len+0x46>
 801334e:	2003      	movs	r0, #3
 8013350:	2302      	movs	r3, #2
 8013352:	e7f2      	b.n	801333a <GUI_Long2Len+0x46>
 8013354:	2004      	movs	r0, #4
 8013356:	2303      	movs	r3, #3
 8013358:	e7ef      	b.n	801333a <GUI_Long2Len+0x46>
 801335a:	2005      	movs	r0, #5
 801335c:	2304      	movs	r3, #4
 801335e:	e7ec      	b.n	801333a <GUI_Long2Len+0x46>
 8013360:	2006      	movs	r0, #6
 8013362:	2305      	movs	r3, #5
 8013364:	e7e9      	b.n	801333a <GUI_Long2Len+0x46>
 8013366:	2007      	movs	r0, #7
 8013368:	2306      	movs	r3, #6
 801336a:	e7e6      	b.n	801333a <GUI_Long2Len+0x46>
 801336c:	2008      	movs	r0, #8
 801336e:	2307      	movs	r3, #7
 8013370:	e7e3      	b.n	801333a <GUI_Long2Len+0x46>
 8013372:	bf00      	nop
 8013374:	0001869f 	.word	0x0001869f
 8013378:	000f423f 	.word	0x000f423f
 801337c:	0098967f 	.word	0x0098967f
 8013380:	05f5e0ff 	.word	0x05f5e0ff
 8013384:	3b9ac9ff 	.word	0x3b9ac9ff

08013388 <GUI_AddSign>:
 8013388:	2800      	cmp	r0, #0
 801338a:	dd09      	ble.n	80133a0 <GUI_AddSign+0x18>
 801338c:	680b      	ldr	r3, [r1, #0]
 801338e:	2200      	movs	r2, #0
 8013390:	b430      	push	{r4, r5}
 8013392:	1c5d      	adds	r5, r3, #1
 8013394:	242b      	movs	r4, #43	; 0x2b
 8013396:	600d      	str	r5, [r1, #0]
 8013398:	701c      	strb	r4, [r3, #0]
 801339a:	680b      	ldr	r3, [r1, #0]
 801339c:	701a      	strb	r2, [r3, #0]
 801339e:	bc30      	pop	{r4, r5}
 80133a0:	4770      	bx	lr
 80133a2:	bf00      	nop

080133a4 <GUI_AddDecShift>:
 80133a4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80133a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133ac:	d046      	beq.n	801343c <GUI_AddDecShift+0x98>
 80133ae:	2800      	cmp	r0, #0
 80133b0:	db51      	blt.n	8013456 <GUI_AddDecShift+0xb2>
 80133b2:	2500      	movs	r5, #0
 80133b4:	1b4d      	subs	r5, r1, r5
 80133b6:	f04f 0e00 	mov.w	lr, #0
 80133ba:	b2ed      	uxtb	r5, r5
 80133bc:	b10a      	cbz	r2, 80133c2 <GUI_AddDecShift+0x1e>
 80133be:	3d01      	subs	r5, #1
 80133c0:	b2ed      	uxtb	r5, r5
 80133c2:	b375      	cbz	r5, 8013422 <GUI_AddDecShift+0x7e>
 80133c4:	1e6c      	subs	r4, r5, #1
 80133c6:	42aa      	cmp	r2, r5
 80133c8:	4f27      	ldr	r7, [pc, #156]	; (8013468 <GUI_AddDecShift+0xc4>)
 80133ca:	f04f 0831 	mov.w	r8, #49	; 0x31
 80133ce:	f8df c09c 	ldr.w	ip, [pc, #156]	; 801346c <GUI_AddDecShift+0xc8>
 80133d2:	b2e4      	uxtb	r4, r4
 80133d4:	d01e      	beq.n	8013414 <GUI_AddDecShift+0x70>
 80133d6:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80133da:	fb90 f1f6 	sdiv	r1, r0, r6
 80133de:	b2c9      	uxtb	r1, r1
 80133e0:	290a      	cmp	r1, #10
 80133e2:	f101 0901 	add.w	r9, r1, #1
 80133e6:	fb06 0011 	mls	r0, r6, r1, r0
 80133ea:	d81a      	bhi.n	8013422 <GUI_AddDecShift+0x7e>
 80133ec:	b924      	cbnz	r4, 80133f8 <GUI_AddDecShift+0x54>
 80133ee:	f1be 0f00 	cmp.w	lr, #0
 80133f2:	d001      	beq.n	80133f8 <GUI_AddDecShift+0x54>
 80133f4:	fa5f f189 	uxtb.w	r1, r9
 80133f8:	290a      	cmp	r1, #10
 80133fa:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80133fe:	d015      	beq.n	801342c <GUI_AddDecShift+0x88>
 8013400:	681d      	ldr	r5, [r3, #0]
 8013402:	1c6e      	adds	r6, r5, #1
 8013404:	601e      	str	r6, [r3, #0]
 8013406:	7029      	strb	r1, [r5, #0]
 8013408:	b15c      	cbz	r4, 8013422 <GUI_AddDecShift+0x7e>
 801340a:	4625      	mov	r5, r4
 801340c:	1e6c      	subs	r4, r5, #1
 801340e:	42aa      	cmp	r2, r5
 8013410:	b2e4      	uxtb	r4, r4
 8013412:	d1e0      	bne.n	80133d6 <GUI_AddDecShift+0x32>
 8013414:	6819      	ldr	r1, [r3, #0]
 8013416:	1c4e      	adds	r6, r1, #1
 8013418:	601e      	str	r6, [r3, #0]
 801341a:	f89c 6000 	ldrb.w	r6, [ip]
 801341e:	700e      	strb	r6, [r1, #0]
 8013420:	e7d9      	b.n	80133d6 <GUI_AddDecShift+0x32>
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
 8013428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801342c:	6819      	ldr	r1, [r3, #0]
 801342e:	462c      	mov	r4, r5
 8013430:	1c4d      	adds	r5, r1, #1
 8013432:	601d      	str	r5, [r3, #0]
 8013434:	4625      	mov	r5, r4
 8013436:	f881 8000 	strb.w	r8, [r1]
 801343a:	e7e7      	b.n	801340c <GUI_AddDecShift+0x68>
 801343c:	681c      	ldr	r4, [r3, #0]
 801343e:	f04f 0e01 	mov.w	lr, #1
 8013442:	1e4d      	subs	r5, r1, #1
 8013444:	212d      	movs	r1, #45	; 0x2d
 8013446:	eb04 060e 	add.w	r6, r4, lr
 801344a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801344e:	b2ed      	uxtb	r5, r5
 8013450:	601e      	str	r6, [r3, #0]
 8013452:	7021      	strb	r1, [r4, #0]
 8013454:	e7b2      	b.n	80133bc <GUI_AddDecShift+0x18>
 8013456:	681c      	ldr	r4, [r3, #0]
 8013458:	2501      	movs	r5, #1
 801345a:	262d      	movs	r6, #45	; 0x2d
 801345c:	4240      	negs	r0, r0
 801345e:	1967      	adds	r7, r4, r5
 8013460:	601f      	str	r7, [r3, #0]
 8013462:	7026      	strb	r6, [r4, #0]
 8013464:	e7a6      	b.n	80133b4 <GUI_AddDecShift+0x10>
 8013466:	bf00      	nop
 8013468:	08026a14 	.word	0x08026a14
 801346c:	20046788 	.word	0x20046788

08013470 <GUI_CalcColorDist>:
 8013470:	b2c3      	uxtb	r3, r0
 8013472:	b2ca      	uxtb	r2, r1
 8013474:	1a9a      	subs	r2, r3, r2
 8013476:	b292      	uxth	r2, r2
 8013478:	b410      	push	{r4}
 801347a:	b214      	sxth	r4, r2
 801347c:	2c00      	cmp	r4, #0
 801347e:	db1e      	blt.n	80134be <GUI_CalcColorDist+0x4e>
 8013480:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013484:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013488:	1a9b      	subs	r3, r3, r2
 801348a:	b29b      	uxth	r3, r3
 801348c:	b21a      	sxth	r2, r3
 801348e:	2a00      	cmp	r2, #0
 8013490:	db12      	blt.n	80134b8 <GUI_CalcColorDist+0x48>
 8013492:	0c09      	lsrs	r1, r1, #16
 8013494:	fb02 f202 	mul.w	r2, r2, r2
 8013498:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801349c:	fb04 2004 	mla	r0, r4, r4, r2
 80134a0:	b289      	uxth	r1, r1
 80134a2:	b20c      	sxth	r4, r1
 80134a4:	2c00      	cmp	r4, #0
 80134a6:	da01      	bge.n	80134ac <GUI_CalcColorDist+0x3c>
 80134a8:	4249      	negs	r1, r1
 80134aa:	b20c      	sxth	r4, r1
 80134ac:	b2a1      	uxth	r1, r4
 80134ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134b2:	fb01 0001 	mla	r0, r1, r1, r0
 80134b6:	4770      	bx	lr
 80134b8:	425b      	negs	r3, r3
 80134ba:	b21a      	sxth	r2, r3
 80134bc:	e7e9      	b.n	8013492 <GUI_CalcColorDist+0x22>
 80134be:	4252      	negs	r2, r2
 80134c0:	b214      	sxth	r4, r2
 80134c2:	e7dd      	b.n	8013480 <GUI_CalcColorDist+0x10>

080134c4 <GUI_GetClientRect>:
 80134c4:	b108      	cbz	r0, 80134ca <GUI_GetClientRect+0x6>
 80134c6:	f00d baf9 	b.w	8020abc <WM_GetClientRect>
 80134ca:	4770      	bx	lr

080134cc <GUI_GetBkColor>:
 80134cc:	b510      	push	{r4, lr}
 80134ce:	f004 fc33 	bl	8017d38 <GUI_Lock>
 80134d2:	f006 ffaf 	bl	801a434 <LCD_GetBkColorIndex>
 80134d6:	f006 fd35 	bl	8019f44 <LCD_Index2Color>
 80134da:	4604      	mov	r4, r0
 80134dc:	f004 fc22 	bl	8017d24 <GUI_Unlock>
 80134e0:	4620      	mov	r0, r4
 80134e2:	bd10      	pop	{r4, pc}

080134e4 <GUI_GetColor>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	f004 fc27 	bl	8017d38 <GUI_Lock>
 80134ea:	f006 ffab 	bl	801a444 <LCD_GetColorIndex>
 80134ee:	f006 fd29 	bl	8019f44 <LCD_Index2Color>
 80134f2:	4604      	mov	r4, r0
 80134f4:	f004 fc16 	bl	8017d24 <GUI_Unlock>
 80134f8:	4620      	mov	r0, r4
 80134fa:	bd10      	pop	{r4, pc}

080134fc <GUI_GetDrawMode>:
 80134fc:	b510      	push	{r4, lr}
 80134fe:	f004 fc1b 	bl	8017d38 <GUI_Lock>
 8013502:	4b03      	ldr	r3, [pc, #12]	; (8013510 <GUI_GetDrawMode+0x14>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	7c1c      	ldrb	r4, [r3, #16]
 8013508:	f004 fc0c 	bl	8017d24 <GUI_Unlock>
 801350c:	4620      	mov	r0, r4
 801350e:	bd10      	pop	{r4, pc}
 8013510:	20000018 	.word	0x20000018

08013514 <GUI_GetFontSizeY>:
 8013514:	b510      	push	{r4, lr}
 8013516:	f004 fc0f 	bl	8017d38 <GUI_Lock>
 801351a:	4b05      	ldr	r3, [pc, #20]	; (8013530 <GUI_GetFontSizeY+0x1c>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	69db      	ldr	r3, [r3, #28]
 8013520:	7e1c      	ldrb	r4, [r3, #24]
 8013522:	7edb      	ldrb	r3, [r3, #27]
 8013524:	fb14 f403 	smulbb	r4, r4, r3
 8013528:	f004 fbfc 	bl	8017d24 <GUI_Unlock>
 801352c:	4620      	mov	r0, r4
 801352e:	bd10      	pop	{r4, pc}
 8013530:	20000018 	.word	0x20000018

08013534 <GUI_GetOrg>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	4605      	mov	r5, r0
 8013538:	460c      	mov	r4, r1
 801353a:	f004 fbfd 	bl	8017d38 <GUI_Lock>
 801353e:	4a06      	ldr	r2, [pc, #24]	; (8013558 <GUI_GetOrg+0x24>)
 8013540:	4b06      	ldr	r3, [pc, #24]	; (801355c <GUI_GetOrg+0x28>)
 8013542:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013546:	f9b3 3000 	ldrsh.w	r3, [r3]
 801354a:	602a      	str	r2, [r5, #0]
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013552:	f004 bbe7 	b.w	8017d24 <GUI_Unlock>
 8013556:	bf00      	nop
 8013558:	200467a8 	.word	0x200467a8
 801355c:	20046798 	.word	0x20046798

08013560 <GUI_GetVersionString>:
 8013560:	4b04      	ldr	r3, [pc, #16]	; (8013574 <GUI_GetVersionString+0x14>)
 8013562:	2234      	movs	r2, #52	; 0x34
 8013564:	2035      	movs	r0, #53	; 0x35
 8013566:	2161      	movs	r1, #97	; 0x61
 8013568:	709a      	strb	r2, [r3, #2]
 801356a:	7018      	strb	r0, [r3, #0]
 801356c:	4618      	mov	r0, r3
 801356e:	7119      	strb	r1, [r3, #4]
 8013570:	70da      	strb	r2, [r3, #3]
 8013572:	4770      	bx	lr
 8013574:	20000000 	.word	0x20000000

08013578 <GUI_Index2Color>:
 8013578:	b510      	push	{r4, lr}
 801357a:	4604      	mov	r4, r0
 801357c:	f004 fbdc 	bl	8017d38 <GUI_Lock>
 8013580:	4620      	mov	r0, r4
 8013582:	f006 fcdf 	bl	8019f44 <LCD_Index2Color>
 8013586:	4604      	mov	r4, r0
 8013588:	f004 fbcc 	bl	8017d24 <GUI_Unlock>
 801358c:	4620      	mov	r0, r4
 801358e:	bd10      	pop	{r4, pc}

08013590 <GUI_MergeRect>:
 8013590:	b358      	cbz	r0, 80135ea <GUI_MergeRect+0x5a>
 8013592:	b311      	cbz	r1, 80135da <GUI_MergeRect+0x4a>
 8013594:	b30a      	cbz	r2, 80135da <GUI_MergeRect+0x4a>
 8013596:	f9b1 3000 	ldrsh.w	r3, [r1]
 801359a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801359c:	f9b2 5000 	ldrsh.w	r5, [r2]
 80135a0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80135a4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80135a8:	429d      	cmp	r5, r3
 80135aa:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80135ae:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80135b2:	bfa8      	it	ge
 80135b4:	461d      	movge	r5, r3
 80135b6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80135ba:	4574      	cmp	r4, lr
 80135bc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80135c0:	bfa8      	it	ge
 80135c2:	4674      	movge	r4, lr
 80135c4:	42ba      	cmp	r2, r7
 80135c6:	8005      	strh	r5, [r0, #0]
 80135c8:	bfb8      	it	lt
 80135ca:	463a      	movlt	r2, r7
 80135cc:	42b3      	cmp	r3, r6
 80135ce:	8044      	strh	r4, [r0, #2]
 80135d0:	bfb8      	it	lt
 80135d2:	4633      	movlt	r3, r6
 80135d4:	8082      	strh	r2, [r0, #4]
 80135d6:	80c3      	strh	r3, [r0, #6]
 80135d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135da:	2900      	cmp	r1, #0
 80135dc:	bf08      	it	eq
 80135de:	4611      	moveq	r1, r2
 80135e0:	680a      	ldr	r2, [r1, #0]
 80135e2:	684b      	ldr	r3, [r1, #4]
 80135e4:	6002      	str	r2, [r0, #0]
 80135e6:	6043      	str	r3, [r0, #4]
 80135e8:	4770      	bx	lr
 80135ea:	4770      	bx	lr

080135ec <GUI_MoveRect>:
 80135ec:	b178      	cbz	r0, 801360e <GUI_MoveRect+0x22>
 80135ee:	b289      	uxth	r1, r1
 80135f0:	88c3      	ldrh	r3, [r0, #6]
 80135f2:	b292      	uxth	r2, r2
 80135f4:	b470      	push	{r4, r5, r6}
 80135f6:	8806      	ldrh	r6, [r0, #0]
 80135f8:	8844      	ldrh	r4, [r0, #2]
 80135fa:	8885      	ldrh	r5, [r0, #4]
 80135fc:	440e      	add	r6, r1
 80135fe:	4414      	add	r4, r2
 8013600:	441a      	add	r2, r3
 8013602:	4429      	add	r1, r5
 8013604:	8006      	strh	r6, [r0, #0]
 8013606:	8044      	strh	r4, [r0, #2]
 8013608:	8081      	strh	r1, [r0, #4]
 801360a:	80c2      	strh	r2, [r0, #6]
 801360c:	bc70      	pop	{r4, r5, r6}
 801360e:	4770      	bx	lr

08013610 <GUI_Exec>:
 8013610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013614:	2500      	movs	r5, #0
 8013616:	4f12      	ldr	r7, [pc, #72]	; (8013660 <GUI_Exec+0x50>)
 8013618:	4e12      	ldr	r6, [pc, #72]	; (8013664 <GUI_Exec+0x54>)
 801361a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8013668 <GUI_Exec+0x58>
 801361e:	683c      	ldr	r4, [r7, #0]
 8013620:	b11c      	cbz	r4, 801362a <GUI_Exec+0x1a>
 8013622:	47a0      	blx	r4
 8013624:	1c04      	adds	r4, r0, #0
 8013626:	bf18      	it	ne
 8013628:	2401      	movne	r4, #1
 801362a:	f00c ff85 	bl	8020538 <WM_Exec>
 801362e:	6833      	ldr	r3, [r6, #0]
 8013630:	2800      	cmp	r0, #0
 8013632:	bf18      	it	ne
 8013634:	2401      	movne	r4, #1
 8013636:	b14b      	cbz	r3, 801364c <GUI_Exec+0x3c>
 8013638:	4798      	blx	r3
 801363a:	b138      	cbz	r0, 801364c <GUI_Exec+0x3c>
 801363c:	f8d8 3000 	ldr.w	r3, [r8]
 8013640:	b113      	cbz	r3, 8013648 <GUI_Exec+0x38>
 8013642:	2401      	movs	r4, #1
 8013644:	4798      	blx	r3
 8013646:	b13c      	cbz	r4, 8013658 <GUI_Exec+0x48>
 8013648:	2501      	movs	r5, #1
 801364a:	e7e8      	b.n	801361e <GUI_Exec+0xe>
 801364c:	f8d8 3000 	ldr.w	r3, [r8]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d1f7      	bne.n	8013644 <GUI_Exec+0x34>
 8013654:	2c00      	cmp	r4, #0
 8013656:	d1f7      	bne.n	8013648 <GUI_Exec+0x38>
 8013658:	4628      	mov	r0, r5
 801365a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801365e:	bf00      	nop
 8013660:	200467a4 	.word	0x200467a4
 8013664:	200467cc 	.word	0x200467cc
 8013668:	200467c4 	.word	0x200467c4

0801366c <GUI_GetBitmapPixelIndex>:
 801366c:	2800      	cmp	r0, #0
 801366e:	d050      	beq.n	8013712 <GUI_GetBitmapPixelIndex+0xa6>
 8013670:	88c3      	ldrh	r3, [r0, #6]
 8013672:	3b01      	subs	r3, #1
 8013674:	b510      	push	{r4, lr}
 8013676:	8884      	ldrh	r4, [r0, #4]
 8013678:	6880      	ldr	r0, [r0, #8]
 801367a:	2b1f      	cmp	r3, #31
 801367c:	d847      	bhi.n	801370e <GUI_GetBitmapPixelIndex+0xa2>
 801367e:	e8df f003 	tbb	[pc, r3]
 8013682:	2316      	.short	0x2316
 8013684:	46463146 	.word	0x46463146
 8013688:	46463c46 	.word	0x46463c46
 801368c:	46464646 	.word	0x46464646
 8013690:	46464046 	.word	0x46464046
 8013694:	46464646 	.word	0x46464646
 8013698:	46464646 	.word	0x46464646
 801369c:	46464646 	.word	0x46464646
 80136a0:	1046      	.short	0x1046
 80136a2:	10a3      	asrs	r3, r4, #2
 80136a4:	fb02 1103 	mla	r1, r2, r3, r1
 80136a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80136ac:	bd10      	pop	{r4, pc}
 80136ae:	fb02 f204 	mul.w	r2, r2, r4
 80136b2:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 80136b6:	43c8      	mvns	r0, r1
 80136b8:	5ca3      	ldrb	r3, [r4, r2]
 80136ba:	f000 0007 	and.w	r0, r0, #7
 80136be:	fa23 f000 	lsr.w	r0, r3, r0
 80136c2:	f000 0001 	and.w	r0, r0, #1
 80136c6:	bd10      	pop	{r4, pc}
 80136c8:	fb02 f204 	mul.w	r2, r2, r4
 80136cc:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 80136d0:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 80136d4:	5ca3      	ldrb	r3, [r4, r2]
 80136d6:	f000 0006 	and.w	r0, r0, #6
 80136da:	fa23 f000 	lsr.w	r0, r3, r0
 80136de:	f000 0003 	and.w	r0, r0, #3
 80136e2:	bd10      	pop	{r4, pc}
 80136e4:	fb02 f204 	mul.w	r2, r2, r4
 80136e8:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 80136ec:	07cb      	lsls	r3, r1, #31
 80136ee:	5ca0      	ldrb	r0, [r4, r2]
 80136f0:	bf4c      	ite	mi
 80136f2:	f000 000f 	andmi.w	r0, r0, #15
 80136f6:	0900      	lsrpl	r0, r0, #4
 80136f8:	bd10      	pop	{r4, pc}
 80136fa:	fb02 0404 	mla	r4, r2, r4, r0
 80136fe:	5c60      	ldrb	r0, [r4, r1]
 8013700:	bd10      	pop	{r4, pc}
 8013702:	1063      	asrs	r3, r4, #1
 8013704:	fb02 1103 	mla	r1, r2, r3, r1
 8013708:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801370c:	bd10      	pop	{r4, pc}
 801370e:	2000      	movs	r0, #0
 8013710:	bd10      	pop	{r4, pc}
 8013712:	4770      	bx	lr

08013714 <GUI_GotoX>:
 8013714:	b510      	push	{r4, lr}
 8013716:	4604      	mov	r4, r0
 8013718:	f004 fb0e 	bl	8017d38 <GUI_Lock>
 801371c:	4b03      	ldr	r3, [pc, #12]	; (801372c <GUI_GotoX+0x18>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	845c      	strh	r4, [r3, #34]	; 0x22
 8013722:	f004 faff 	bl	8017d24 <GUI_Unlock>
 8013726:	2000      	movs	r0, #0
 8013728:	bd10      	pop	{r4, pc}
 801372a:	bf00      	nop
 801372c:	20000018 	.word	0x20000018

08013730 <GUI_GotoXY>:
 8013730:	b538      	push	{r3, r4, r5, lr}
 8013732:	4605      	mov	r5, r0
 8013734:	460c      	mov	r4, r1
 8013736:	f004 faff 	bl	8017d38 <GUI_Lock>
 801373a:	4b04      	ldr	r3, [pc, #16]	; (801374c <GUI_GotoXY+0x1c>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	845d      	strh	r5, [r3, #34]	; 0x22
 8013740:	849c      	strh	r4, [r3, #36]	; 0x24
 8013742:	f004 faef 	bl	8017d24 <GUI_Unlock>
 8013746:	2000      	movs	r0, #0
 8013748:	bd38      	pop	{r3, r4, r5, pc}
 801374a:	bf00      	nop
 801374c:	20000018 	.word	0x20000018

08013750 <GUI_GetPenSize>:
 8013750:	b510      	push	{r4, lr}
 8013752:	f004 faf1 	bl	8017d38 <GUI_Lock>
 8013756:	4b03      	ldr	r3, [pc, #12]	; (8013764 <GUI_GetPenSize+0x14>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	7e1c      	ldrb	r4, [r3, #24]
 801375c:	f004 fae2 	bl	8017d24 <GUI_Unlock>
 8013760:	4620      	mov	r0, r4
 8013762:	bd10      	pop	{r4, pc}
 8013764:	20000018 	.word	0x20000018

08013768 <GUI_SetPenSize>:
 8013768:	b538      	push	{r3, r4, r5, lr}
 801376a:	4605      	mov	r5, r0
 801376c:	f004 fae4 	bl	8017d38 <GUI_Lock>
 8013770:	4b03      	ldr	r3, [pc, #12]	; (8013780 <GUI_SetPenSize+0x18>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	7e1c      	ldrb	r4, [r3, #24]
 8013776:	761d      	strb	r5, [r3, #24]
 8013778:	f004 fad4 	bl	8017d24 <GUI_Unlock>
 801377c:	4620      	mov	r0, r4
 801377e:	bd38      	pop	{r3, r4, r5, pc}
 8013780:	20000018 	.word	0x20000018

08013784 <GUI_SetPenShape>:
 8013784:	b538      	push	{r3, r4, r5, lr}
 8013786:	4605      	mov	r5, r0
 8013788:	f004 fad6 	bl	8017d38 <GUI_Lock>
 801378c:	4b03      	ldr	r3, [pc, #12]	; (801379c <GUI_SetPenShape+0x18>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	7e5c      	ldrb	r4, [r3, #25]
 8013792:	765d      	strb	r5, [r3, #25]
 8013794:	f004 fac6 	bl	8017d24 <GUI_Unlock>
 8013798:	4620      	mov	r0, r4
 801379a:	bd38      	pop	{r3, r4, r5, pc}
 801379c:	20000018 	.word	0x20000018

080137a0 <GUI_RectsIntersect>:
 80137a0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80137a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	dc14      	bgt.n	80137d6 <GUI_RectsIntersect+0x36>
 80137ac:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80137b0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	dc0e      	bgt.n	80137d6 <GUI_RectsIntersect+0x36>
 80137b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80137bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	dc08      	bgt.n	80137d6 <GUI_RectsIntersect+0x36>
 80137c4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80137c8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80137cc:	4283      	cmp	r3, r0
 80137ce:	bfcc      	ite	gt
 80137d0:	2000      	movgt	r0, #0
 80137d2:	2001      	movle	r0, #1
 80137d4:	4770      	bx	lr
 80137d6:	2000      	movs	r0, #0
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop

080137dc <GUI_SaveContext_W>:
 80137dc:	b508      	push	{r3, lr}
 80137de:	4b03      	ldr	r3, [pc, #12]	; (80137ec <GUI_SaveContext_W+0x10>)
 80137e0:	2274      	movs	r2, #116	; 0x74
 80137e2:	6819      	ldr	r1, [r3, #0]
 80137e4:	f011 f9a5 	bl	8024b32 <memcpy>
 80137e8:	bd08      	pop	{r3, pc}
 80137ea:	bf00      	nop
 80137ec:	20000018 	.word	0x20000018

080137f0 <GUI_RestoreContext>:
 80137f0:	b508      	push	{r3, lr}
 80137f2:	4b03      	ldr	r3, [pc, #12]	; (8013800 <GUI_RestoreContext+0x10>)
 80137f4:	4601      	mov	r1, r0
 80137f6:	2274      	movs	r2, #116	; 0x74
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	f011 f99a 	bl	8024b32 <memcpy>
 80137fe:	bd08      	pop	{r3, pc}
 8013800:	20000018 	.word	0x20000018

08013804 <GUI_SelectLCD>:
 8013804:	b508      	push	{r3, lr}
 8013806:	f004 fa97 	bl	8017d38 <GUI_Lock>
 801380a:	f007 fd0f 	bl	801b22c <LCD_SelectLCD>
 801380e:	f007 fde3 	bl	801b3d8 <LCD_UpdateColorIndices>
 8013812:	f00c ffdd 	bl	80207d0 <WM_Activate>
 8013816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801381a:	f004 ba83 	b.w	8017d24 <GUI_Unlock>
 801381e:	bf00      	nop

08013820 <GUI_SetBkColor>:
 8013820:	b510      	push	{r4, lr}
 8013822:	4604      	mov	r4, r0
 8013824:	f004 fa88 	bl	8017d38 <GUI_Lock>
 8013828:	4620      	mov	r0, r4
 801382a:	f006 fbb1 	bl	8019f90 <LCD_SetBkColor>
 801382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013832:	f004 ba77 	b.w	8017d24 <GUI_Unlock>
 8013836:	bf00      	nop

08013838 <GUI_SetColor>:
 8013838:	b510      	push	{r4, lr}
 801383a:	4604      	mov	r4, r0
 801383c:	f004 fa7c 	bl	8017d38 <GUI_Lock>
 8013840:	4620      	mov	r0, r4
 8013842:	f006 fbab 	bl	8019f9c <LCD_SetColor>
 8013846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801384a:	f004 ba6b 	b.w	8017d24 <GUI_Unlock>
 801384e:	bf00      	nop

08013850 <GL_SetDefault>:
 8013850:	4b20      	ldr	r3, [pc, #128]	; (80138d4 <GL_SetDefault+0x84>)
 8013852:	b570      	push	{r4, r5, r6, lr}
 8013854:	681e      	ldr	r6, [r3, #0]
 8013856:	f004 fa6f 	bl	8017d38 <GUI_Lock>
 801385a:	4c1f      	ldr	r4, [pc, #124]	; (80138d8 <GL_SetDefault+0x88>)
 801385c:	2500      	movs	r5, #0
 801385e:	4630      	mov	r0, r6
 8013860:	f006 fb96 	bl	8019f90 <LCD_SetBkColor>
 8013864:	f004 fa5e 	bl	8017d24 <GUI_Unlock>
 8013868:	4b1c      	ldr	r3, [pc, #112]	; (80138dc <GL_SetDefault+0x8c>)
 801386a:	681e      	ldr	r6, [r3, #0]
 801386c:	f004 fa64 	bl	8017d38 <GUI_Lock>
 8013870:	4630      	mov	r0, r6
 8013872:	f006 fb93 	bl	8019f9c <LCD_SetColor>
 8013876:	f004 fa55 	bl	8017d24 <GUI_Unlock>
 801387a:	f004 fa5d 	bl	8017d38 <GUI_Lock>
 801387e:	2201      	movs	r2, #1
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	761a      	strb	r2, [r3, #24]
 8013884:	f004 fa4e 	bl	8017d24 <GUI_Unlock>
 8013888:	f004 fa56 	bl	8017d38 <GUI_Lock>
 801388c:	6823      	ldr	r3, [r4, #0]
 801388e:	859d      	strh	r5, [r3, #44]	; 0x2c
 8013890:	f004 fa48 	bl	8017d24 <GUI_Unlock>
 8013894:	f004 fa50 	bl	8017d38 <GUI_Lock>
 8013898:	6823      	ldr	r3, [r4, #0]
 801389a:	855d      	strh	r5, [r3, #42]	; 0x2a
 801389c:	f004 fa42 	bl	8017d24 <GUI_Unlock>
 80138a0:	f004 fa4a 	bl	8017d38 <GUI_Lock>
 80138a4:	4628      	mov	r0, r5
 80138a6:	f005 ff5d 	bl	8019764 <LCD_SetDrawMode>
 80138aa:	f004 fa3b 	bl	8017d24 <GUI_Unlock>
 80138ae:	4b0c      	ldr	r3, [pc, #48]	; (80138e0 <GL_SetDefault+0x90>)
 80138b0:	681d      	ldr	r5, [r3, #0]
 80138b2:	f004 fa41 	bl	8017d38 <GUI_Lock>
 80138b6:	6823      	ldr	r3, [r4, #0]
 80138b8:	b105      	cbz	r5, 80138bc <GL_SetDefault+0x6c>
 80138ba:	61dd      	str	r5, [r3, #28]
 80138bc:	f004 fa32 	bl	8017d24 <GUI_Unlock>
 80138c0:	f004 fa3a 	bl	8017d38 <GUI_Lock>
 80138c4:	6823      	ldr	r3, [r4, #0]
 80138c6:	2200      	movs	r2, #0
 80138c8:	769a      	strb	r2, [r3, #26]
 80138ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138ce:	f004 ba29 	b.w	8017d24 <GUI_Unlock>
 80138d2:	bf00      	nop
 80138d4:	20000014 	.word	0x20000014
 80138d8:	20000018 	.word	0x20000018
 80138dc:	20000010 	.word	0x20000010
 80138e0:	2000000c 	.word	0x2000000c

080138e4 <GUI_SetDrawMode>:
 80138e4:	b510      	push	{r4, lr}
 80138e6:	4604      	mov	r4, r0
 80138e8:	f004 fa26 	bl	8017d38 <GUI_Lock>
 80138ec:	4620      	mov	r0, r4
 80138ee:	f005 ff39 	bl	8019764 <LCD_SetDrawMode>
 80138f2:	4604      	mov	r4, r0
 80138f4:	f004 fa16 	bl	8017d24 <GUI_Unlock>
 80138f8:	4620      	mov	r0, r4
 80138fa:	bd10      	pop	{r4, pc}

080138fc <GUI_SetFont>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4604      	mov	r4, r0
 8013900:	f004 fa1a 	bl	8017d38 <GUI_Lock>
 8013904:	4b04      	ldr	r3, [pc, #16]	; (8013918 <GUI_SetFont+0x1c>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	69dd      	ldr	r5, [r3, #28]
 801390a:	b104      	cbz	r4, 801390e <GUI_SetFont+0x12>
 801390c:	61dc      	str	r4, [r3, #28]
 801390e:	f004 fa09 	bl	8017d24 <GUI_Unlock>
 8013912:	4628      	mov	r0, r5
 8013914:	bd38      	pop	{r3, r4, r5, pc}
 8013916:	bf00      	nop
 8013918:	20000018 	.word	0x20000018

0801391c <GUI_SetOrg>:
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	4605      	mov	r5, r0
 8013920:	460c      	mov	r4, r1
 8013922:	f004 fa09 	bl	8017d38 <GUI_Lock>
 8013926:	4a09      	ldr	r2, [pc, #36]	; (801394c <GUI_SetOrg+0x30>)
 8013928:	4b09      	ldr	r3, [pc, #36]	; (8013950 <GUI_SetOrg+0x34>)
 801392a:	4629      	mov	r1, r5
 801392c:	6810      	ldr	r0, [r2, #0]
 801392e:	4622      	mov	r2, r4
 8013930:	4e08      	ldr	r6, [pc, #32]	; (8013954 <GUI_SetOrg+0x38>)
 8013932:	7c40      	ldrb	r0, [r0, #17]
 8013934:	8035      	strh	r5, [r6, #0]
 8013936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801393a:	4d07      	ldr	r5, [pc, #28]	; (8013958 <GUI_SetOrg+0x3c>)
 801393c:	68c3      	ldr	r3, [r0, #12]
 801393e:	802c      	strh	r4, [r5, #0]
 8013940:	6a1b      	ldr	r3, [r3, #32]
 8013942:	4798      	blx	r3
 8013944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013948:	f004 b9ec 	b.w	8017d24 <GUI_Unlock>
 801394c:	20000018 	.word	0x20000018
 8013950:	200467d0 	.word	0x200467d0
 8013954:	200467a8 	.word	0x200467a8
 8013958:	20046798 	.word	0x20046798

0801395c <GUI_SetTextAlign>:
 801395c:	b538      	push	{r3, r4, r5, lr}
 801395e:	4605      	mov	r5, r0
 8013960:	f004 f9ea 	bl	8017d38 <GUI_Lock>
 8013964:	4b04      	ldr	r3, [pc, #16]	; (8013978 <GUI_SetTextAlign+0x1c>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 801396c:	859d      	strh	r5, [r3, #44]	; 0x2c
 801396e:	f004 f9d9 	bl	8017d24 <GUI_Unlock>
 8013972:	4620      	mov	r0, r4
 8013974:	bd38      	pop	{r3, r4, r5, pc}
 8013976:	bf00      	nop
 8013978:	20000018 	.word	0x20000018

0801397c <GUI_SetTextMode>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4605      	mov	r5, r0
 8013980:	f004 f9da 	bl	8017d38 <GUI_Lock>
 8013984:	4b04      	ldr	r3, [pc, #16]	; (8013998 <GUI_SetTextMode+0x1c>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 801398c:	855d      	strh	r5, [r3, #42]	; 0x2a
 801398e:	f004 f9c9 	bl	8017d24 <GUI_Unlock>
 8013992:	4620      	mov	r0, r4
 8013994:	bd38      	pop	{r3, r4, r5, pc}
 8013996:	bf00      	nop
 8013998:	20000018 	.word	0x20000018

0801399c <GUI_SetTextStyle>:
 801399c:	b570      	push	{r4, r5, r6, lr}
 801399e:	4604      	mov	r4, r0
 80139a0:	f004 f9ca 	bl	8017d38 <GUI_Lock>
 80139a4:	4a08      	ldr	r2, [pc, #32]	; (80139c8 <GUI_SetTextStyle+0x2c>)
 80139a6:	2c00      	cmp	r4, #0
 80139a8:	4b08      	ldr	r3, [pc, #32]	; (80139cc <GUI_SetTextStyle+0x30>)
 80139aa:	6812      	ldr	r2, [r2, #0]
 80139ac:	bf08      	it	eq
 80139ae:	2300      	moveq	r3, #0
 80139b0:	4907      	ldr	r1, [pc, #28]	; (80139d0 <GUI_SetTextStyle+0x34>)
 80139b2:	7c95      	ldrb	r5, [r2, #18]
 80139b4:	4807      	ldr	r0, [pc, #28]	; (80139d4 <GUI_SetTextStyle+0x38>)
 80139b6:	4e08      	ldr	r6, [pc, #32]	; (80139d8 <GUI_SetTextStyle+0x3c>)
 80139b8:	7494      	strb	r4, [r2, #18]
 80139ba:	6008      	str	r0, [r1, #0]
 80139bc:	6033      	str	r3, [r6, #0]
 80139be:	f004 f9b1 	bl	8017d24 <GUI_Unlock>
 80139c2:	4628      	mov	r0, r5
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
 80139c6:	bf00      	nop
 80139c8:	20000018 	.word	0x20000018
 80139cc:	08013245 	.word	0x08013245
 80139d0:	200467ac 	.word	0x200467ac
 80139d4:	08013191 	.word	0x08013191
 80139d8:	200467a0 	.word	0x200467a0

080139dc <_InitContext>:
 80139dc:	b538      	push	{r3, r4, r5, lr}
 80139de:	4d19      	ldr	r5, [pc, #100]	; (8013a44 <_InitContext+0x68>)
 80139e0:	4604      	mov	r4, r0
 80139e2:	4a19      	ldr	r2, [pc, #100]	; (8013a48 <_InitContext+0x6c>)
 80139e4:	f100 0108 	add.w	r1, r0, #8
 80139e8:	692b      	ldr	r3, [r5, #16]
 80139ea:	6702      	str	r2, [r0, #112]	; 0x70
 80139ec:	1d1a      	adds	r2, r3, #4
 80139ee:	f103 0008 	add.w	r0, r3, #8
 80139f2:	639b      	str	r3, [r3, #56]	; 0x38
 80139f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80139f6:	641b      	str	r3, [r3, #64]	; 0x40
 80139f8:	4a14      	ldr	r2, [pc, #80]	; (8013a4c <_InitContext+0x70>)
 80139fa:	6160      	str	r0, [r4, #20]
 80139fc:	7c5b      	ldrb	r3, [r3, #17]
 80139fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013a02:	68c3      	ldr	r3, [r0, #12]
 8013a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a06:	4798      	blx	r3
 8013a08:	692b      	ldr	r3, [r5, #16]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	6869      	ldr	r1, [r5, #4]
 8013a0e:	3308      	adds	r3, #8
 8013a10:	480f      	ldr	r0, [pc, #60]	; (8013a50 <_InitContext+0x74>)
 8013a12:	61e1      	str	r1, [r4, #28]
 8013a14:	6163      	str	r3, [r4, #20]
 8013a16:	7622      	strb	r2, [r4, #24]
 8013a18:	76e2      	strb	r2, [r4, #27]
 8013a1a:	6660      	str	r0, [r4, #100]	; 0x64
 8013a1c:	f00d f868 	bl	8020af0 <WM_GetDesktopWindow>
 8013a20:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8013a24:	2203      	movs	r2, #3
 8013a26:	64a0      	str	r0, [r4, #72]	; 0x48
 8013a28:	6323      	str	r3, [r4, #48]	; 0x30
 8013a2a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 8013a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8013a30:	68e8      	ldr	r0, [r5, #12]
 8013a32:	f006 faad 	bl	8019f90 <LCD_SetBkColor>
 8013a36:	68a8      	ldr	r0, [r5, #8]
 8013a38:	f006 fab0 	bl	8019f9c <LCD_SetColor>
 8013a3c:	4b05      	ldr	r3, [pc, #20]	; (8013a54 <_InitContext+0x78>)
 8013a3e:	4a06      	ldr	r2, [pc, #24]	; (8013a58 <_InitContext+0x7c>)
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	bd38      	pop	{r3, r4, r5, pc}
 8013a44:	20000008 	.word	0x20000008
 8013a48:	20000270 	.word	0x20000270
 8013a4c:	200467d0 	.word	0x200467d0
 8013a50:	08026a4c 	.word	0x08026a4c
 8013a54:	200467c8 	.word	0x200467c8
 8013a58:	08026b50 	.word	0x08026b50

08013a5c <_OnExit>:
 8013a5c:	b570      	push	{r4, r5, r6, lr}
 8013a5e:	2400      	movs	r4, #0
 8013a60:	4d09      	ldr	r5, [pc, #36]	; (8013a88 <_OnExit+0x2c>)
 8013a62:	4e0a      	ldr	r6, [pc, #40]	; (8013a8c <_OnExit+0x30>)
 8013a64:	2274      	movs	r2, #116	; 0x74
 8013a66:	4621      	mov	r1, r4
 8013a68:	4628      	mov	r0, r5
 8013a6a:	6833      	ldr	r3, [r6, #0]
 8013a6c:	67ec      	str	r4, [r5, #124]	; 0x7c
 8013a6e:	4798      	blx	r3
 8013a70:	6833      	ldr	r3, [r6, #0]
 8013a72:	4621      	mov	r1, r4
 8013a74:	2208      	movs	r2, #8
 8013a76:	4806      	ldr	r0, [pc, #24]	; (8013a90 <_OnExit+0x34>)
 8013a78:	4798      	blx	r3
 8013a7a:	4906      	ldr	r1, [pc, #24]	; (8013a94 <_OnExit+0x38>)
 8013a7c:	4a06      	ldr	r2, [pc, #24]	; (8013a98 <_OnExit+0x3c>)
 8013a7e:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <_OnExit+0x40>)
 8013a80:	610d      	str	r5, [r1, #16]
 8013a82:	7014      	strb	r4, [r2, #0]
 8013a84:	601c      	str	r4, [r3, #0]
 8013a86:	bd70      	pop	{r4, r5, r6, pc}
 8013a88:	200001f0 	.word	0x200001f0
 8013a8c:	20000050 	.word	0x20000050
 8013a90:	200467d0 	.word	0x200467d0
 8013a94:	20000008 	.word	0x20000008
 8013a98:	200467b8 	.word	0x200467b8
 8013a9c:	20046794 	.word	0x20046794

08013aa0 <GUI_Clear>:
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa6:	4608      	mov	r0, r1
 8013aa8:	b082      	sub	sp, #8
 8013aaa:	f7ff fe41 	bl	8013730 <GUI_GotoXY>
 8013aae:	4f18      	ldr	r7, [pc, #96]	; (8013b10 <GUI_Clear+0x70>)
 8013ab0:	f004 f942 	bl	8017d38 <GUI_Lock>
 8013ab4:	2004      	movs	r0, #4
 8013ab6:	f005 fe55 	bl	8019764 <LCD_SetDrawMode>
 8013aba:	4b16      	ldr	r3, [pc, #88]	; (8013b14 <GUI_Clear+0x74>)
 8013abc:	f643 76ff 	movw	r6, #16383	; 0x3fff
 8013ac0:	463d      	mov	r5, r7
 8013ac2:	691b      	ldr	r3, [r3, #16]
 8013ac4:	4680      	mov	r8, r0
 8013ac6:	4634      	mov	r4, r6
 8013ac8:	4668      	mov	r0, sp
 8013aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ace:	4417      	add	r7, r2
 8013ad0:	4416      	add	r6, r2
 8013ad2:	441d      	add	r5, r3
 8013ad4:	441c      	add	r4, r3
 8013ad6:	f8ad 7000 	strh.w	r7, [sp]
 8013ada:	f8ad 6004 	strh.w	r6, [sp, #4]
 8013ade:	f8ad 5002 	strh.w	r5, [sp, #2]
 8013ae2:	f8ad 4006 	strh.w	r4, [sp, #6]
 8013ae6:	f00c fbff 	bl	80202e8 <WM__InitIVRSearch>
 8013aea:	b148      	cbz	r0, 8013b00 <GUI_Clear+0x60>
 8013aec:	4623      	mov	r3, r4
 8013aee:	4632      	mov	r2, r6
 8013af0:	4629      	mov	r1, r5
 8013af2:	4638      	mov	r0, r7
 8013af4:	f005 febe 	bl	8019874 <LCD_FillRect>
 8013af8:	f00c facc 	bl	8020094 <WM__GetNextIVR>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d1f5      	bne.n	8013aec <GUI_Clear+0x4c>
 8013b00:	4640      	mov	r0, r8
 8013b02:	f005 fe2f 	bl	8019764 <LCD_SetDrawMode>
 8013b06:	f004 f90d 	bl	8017d24 <GUI_Unlock>
 8013b0a:	b002      	add	sp, #8
 8013b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b10:	ffffc001 	.word	0xffffc001
 8013b14:	20000008 	.word	0x20000008

08013b18 <GUI__Config>:
 8013b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b1a:	4e1c      	ldr	r6, [pc, #112]	; (8013b8c <GUI__Config+0x74>)
 8013b1c:	b085      	sub	sp, #20
 8013b1e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8013b20:	b10b      	cbz	r3, 8013b26 <GUI__Config+0xe>
 8013b22:	b005      	add	sp, #20
 8013b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b26:	4b1a      	ldr	r3, [pc, #104]	; (8013b90 <GUI__Config+0x78>)
 8013b28:	466f      	mov	r7, sp
 8013b2a:	ad04      	add	r5, sp, #16
 8013b2c:	f04f 0e01 	mov.w	lr, #1
 8013b30:	f106 0480 	add.w	r4, r6, #128	; 0x80
 8013b34:	f8c6 e07c 	str.w	lr, [r6, #124]	; 0x7c
 8013b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013b3a:	c707      	stmia	r7!, {r0, r1, r2}
 8013b3c:	0c19      	lsrs	r1, r3, #16
 8013b3e:	f815 2d10 	ldrb.w	r2, [r5, #-16]!
 8013b42:	f827 3b02 	strh.w	r3, [r7], #2
 8013b46:	7039      	strb	r1, [r7, #0]
 8013b48:	f804 2b01 	strb.w	r2, [r4], #1
 8013b4c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013b50:	2a00      	cmp	r2, #0
 8013b52:	d1f9      	bne.n	8013b48 <GUI__Config+0x30>
 8013b54:	f7ff fd04 	bl	8013560 <GUI_GetVersionString>
 8013b58:	4623      	mov	r3, r4
 8013b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b5e:	4619      	mov	r1, r3
 8013b60:	f803 2b01 	strb.w	r2, [r3], #1
 8013b64:	7802      	ldrb	r2, [r0, #0]
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	d1f7      	bne.n	8013b5a <GUI__Config+0x42>
 8013b6a:	704a      	strb	r2, [r1, #1]
 8013b6c:	f7ef ff44 	bl	80039f8 <GUI_X_Config>
 8013b70:	f004 f930 	bl	8017dd4 <GUITASK_Init>
 8013b74:	f7f0 fda0 	bl	80046b8 <LCD_X_Config>
 8013b78:	4b06      	ldr	r3, [pc, #24]	; (8013b94 <GUI__Config+0x7c>)
 8013b7a:	4807      	ldr	r0, [pc, #28]	; (8013b98 <GUI__Config+0x80>)
 8013b7c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 8013b80:	b005      	add	sp, #20
 8013b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013b86:	f000 b8cf 	b.w	8013d28 <GUI__RegisterExit>
 8013b8a:	bf00      	nop
 8013b8c:	200001f0 	.word	0x200001f0
 8013b90:	08026a54 	.word	0x08026a54
 8013b94:	08013a5d 	.word	0x08013a5d
 8013b98:	20000284 	.word	0x20000284

08013b9c <GUI_Init>:
 8013b9c:	b590      	push	{r4, r7, lr}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	4a54      	ldr	r2, [pc, #336]	; (8013cf4 <GUI_Init+0x158>)
 8013ba4:	4b53      	ldr	r3, [pc, #332]	; (8013cf4 <GUI_Init+0x158>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f023 0301 	bic.w	r3, r3, #1
 8013bac:	6013      	str	r3, [r2, #0]
 8013bae:	4b52      	ldr	r3, [pc, #328]	; (8013cf8 <GUI_Init+0x15c>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013bb6:	f240 4249 	movw	r2, #1097	; 0x449
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	bf0c      	ite	eq
 8013bbe:	2301      	moveq	r3, #1
 8013bc0:	2300      	movne	r3, #0
 8013bc2:	b2da      	uxtb	r2, r3
 8013bc4:	4b4c      	ldr	r3, [pc, #304]	; (8013cf8 <GUI_Init+0x15c>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013bcc:	f240 4151 	movw	r1, #1105	; 0x451
 8013bd0:	428b      	cmp	r3, r1
 8013bd2:	bf0c      	ite	eq
 8013bd4:	2301      	moveq	r3, #1
 8013bd6:	2300      	movne	r3, #0
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	4619      	mov	r1, r3
 8013be0:	4b45      	ldr	r3, [pc, #276]	; (8013cf8 <GUI_Init+0x15c>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013be8:	f240 4252 	movw	r2, #1106	; 0x452
 8013bec:	4293      	cmp	r3, r2
 8013bee:	bf0c      	ite	eq
 8013bf0:	2301      	moveq	r3, #1
 8013bf2:	2300      	movne	r3, #0
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	430b      	orrs	r3, r1
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d010      	beq.n	8013c1e <GUI_Init+0x82>
 8013bfc:	4b3f      	ldr	r3, [pc, #252]	; (8013cfc <GUI_Init+0x160>)
 8013bfe:	2201      	movs	r2, #1
 8013c00:	601a      	str	r2, [r3, #0]
 8013c02:	bf00      	nop
 8013c04:	4b3d      	ldr	r3, [pc, #244]	; (8013cfc <GUI_Init+0x160>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d1fb      	bne.n	8013c04 <GUI_Init+0x68>
 8013c0c:	4b3c      	ldr	r3, [pc, #240]	; (8013d00 <GUI_Init+0x164>)
 8013c0e:	4a3d      	ldr	r2, [pc, #244]	; (8013d04 <GUI_Init+0x168>)
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	4b3b      	ldr	r3, [pc, #236]	; (8013d00 <GUI_Init+0x164>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4a3c      	ldr	r2, [pc, #240]	; (8013d08 <GUI_Init+0x16c>)
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	d018      	beq.n	8013c4e <GUI_Init+0xb2>
 8013c1c:	e7fe      	b.n	8013c1c <GUI_Init+0x80>
 8013c1e:	4b3b      	ldr	r3, [pc, #236]	; (8013d0c <GUI_Init+0x170>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013c26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8013c2a:	d110      	bne.n	8013c4e <GUI_Init+0xb2>
 8013c2c:	4b38      	ldr	r3, [pc, #224]	; (8013d10 <GUI_Init+0x174>)
 8013c2e:	2201      	movs	r2, #1
 8013c30:	601a      	str	r2, [r3, #0]
 8013c32:	bf00      	nop
 8013c34:	4b36      	ldr	r3, [pc, #216]	; (8013d10 <GUI_Init+0x174>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1fb      	bne.n	8013c34 <GUI_Init+0x98>
 8013c3c:	4b35      	ldr	r3, [pc, #212]	; (8013d14 <GUI_Init+0x178>)
 8013c3e:	4a31      	ldr	r2, [pc, #196]	; (8013d04 <GUI_Init+0x168>)
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	4b34      	ldr	r3, [pc, #208]	; (8013d14 <GUI_Init+0x178>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	4a30      	ldr	r2, [pc, #192]	; (8013d08 <GUI_Init+0x16c>)
 8013c48:	4293      	cmp	r3, r2
 8013c4a:	d000      	beq.n	8013c4e <GUI_Init+0xb2>
 8013c4c:	e7fe      	b.n	8013c4c <GUI_Init+0xb0>
 8013c4e:	f7ff ff63 	bl	8013b18 <GUI__Config>
 8013c52:	4b31      	ldr	r3, [pc, #196]	; (8013d18 <GUI_Init+0x17c>)
 8013c54:	222e      	movs	r2, #46	; 0x2e
 8013c56:	701a      	strb	r2, [r3, #0]
 8013c58:	f7fb fb1c 	bl	800f294 <GUI_X_Init>
 8013c5c:	482f      	ldr	r0, [pc, #188]	; (8013d1c <GUI_Init+0x180>)
 8013c5e:	f7ff febd 	bl	80139dc <_InitContext>
 8013c62:	f006 f8d9 	bl	8019e18 <emWin_LCD_Init>
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	f006 fd44 	bl	801a6f4 <LCD_GetXSizeDisplay>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	bf0c      	ite	eq
 8013c72:	2301      	moveq	r3, #1
 8013c74:	2300      	movne	r3, #0
 8013c76:	b2dc      	uxtb	r4, r3
 8013c78:	f006 fd42 	bl	801a700 <LCD_GetYSizeDisplay>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	bf0c      	ite	eq
 8013c82:	2301      	moveq	r3, #1
 8013c84:	2300      	movne	r3, #0
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	4323      	orrs	r3, r4
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <GUI_Init+0x108>
 8013c90:	f006 fcdc 	bl	801a64c <LCD_GetXSizeMax>
 8013c94:	4604      	mov	r4, r0
 8013c96:	f006 fcf3 	bl	801a680 <LCD_GetYSizeMax>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	f006 fd22 	bl	801a6e8 <LCD_SetDisplaySize>
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	2000      	movs	r0, #0
 8013ca8:	f7ff fe38 	bl	801391c <GUI_SetOrg>
 8013cac:	f00c fdd8 	bl	8020860 <WM_Init>
 8013cb0:	f004 f8ca 	bl	8017e48 <GUITASK_CopyContext>
 8013cb4:	4b1a      	ldr	r3, [pc, #104]	; (8013d20 <GUI_Init+0x184>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d012      	beq.n	8013ce2 <GUI_Init+0x146>
 8013cbc:	e00d      	b.n	8013cda <GUI_Init+0x13e>
 8013cbe:	4b18      	ldr	r3, [pc, #96]	; (8013d20 <GUI_Init+0x184>)
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d003      	beq.n	8013cd0 <GUI_Init+0x134>
 8013cc8:	4b15      	ldr	r3, [pc, #84]	; (8013d20 <GUI_Init+0x184>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4798      	blx	r3
 8013cd0:	4b13      	ldr	r3, [pc, #76]	; (8013d20 <GUI_Init+0x184>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	4a12      	ldr	r2, [pc, #72]	; (8013d20 <GUI_Init+0x184>)
 8013cd8:	6013      	str	r3, [r2, #0]
 8013cda:	4b11      	ldr	r3, [pc, #68]	; (8013d20 <GUI_Init+0x184>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d1ed      	bne.n	8013cbe <GUI_Init+0x122>
 8013ce2:	4b10      	ldr	r3, [pc, #64]	; (8013d24 <GUI_Init+0x188>)
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	701a      	strb	r2, [r3, #0]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4618      	mov	r0, r3
 8013cec:	370c      	adds	r7, #12
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd90      	pop	{r4, r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	e0002000 	.word	0xe0002000
 8013cf8:	e0042000 	.word	0xe0042000
 8013cfc:	40023008 	.word	0x40023008
 8013d00:	40023000 	.word	0x40023000
 8013d04:	f407a5c2 	.word	0xf407a5c2
 8013d08:	b5e8b5cd 	.word	0xb5e8b5cd
 8013d0c:	5c001000 	.word	0x5c001000
 8013d10:	58024c08 	.word	0x58024c08
 8013d14:	58024c00 	.word	0x58024c00
 8013d18:	20046788 	.word	0x20046788
 8013d1c:	200001f0 	.word	0x200001f0
 8013d20:	20000268 	.word	0x20000268
 8013d24:	200467b0 	.word	0x200467b0

08013d28 <GUI__RegisterExit>:
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	4b06      	ldr	r3, [pc, #24]	; (8013d4c <GUI__RegisterExit+0x24>)
 8013d32:	681a      	ldr	r2, [r3, #0]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	605a      	str	r2, [r3, #4]
 8013d38:	4a04      	ldr	r2, [pc, #16]	; (8013d4c <GUI__RegisterExit+0x24>)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6013      	str	r3, [r2, #0]
 8013d3e:	bf00      	nop
 8013d40:	370c      	adds	r7, #12
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop
 8013d4c:	20000264 	.word	0x20000264

08013d50 <GUI_DCACHE_Clear>:
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	4b05      	ldr	r3, [pc, #20]	; (8013d70 <GUI_DCACHE_Clear+0x20>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d003      	beq.n	8013d68 <GUI_DCACHE_Clear+0x18>
 8013d60:	4b03      	ldr	r3, [pc, #12]	; (8013d70 <GUI_DCACHE_Clear+0x20>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	4798      	blx	r3
 8013d68:	bf00      	nop
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	20046794 	.word	0x20046794

08013d74 <GUI_DEVICE__GetpDevice>:
 8013d74:	2801      	cmp	r0, #1
 8013d76:	dc10      	bgt.n	8013d9a <GUI_DEVICE__GetpDevice+0x26>
 8013d78:	4b09      	ldr	r3, [pc, #36]	; (8013da0 <GUI_DEVICE__GetpDevice+0x2c>)
 8013d7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013d7e:	b168      	cbz	r0, 8013d9c <GUI_DEVICE__GetpDevice+0x28>
 8013d80:	68c3      	ldr	r3, [r0, #12]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4299      	cmp	r1, r3
 8013d86:	d104      	bne.n	8013d92 <GUI_DEVICE__GetpDevice+0x1e>
 8013d88:	e009      	b.n	8013d9e <GUI_DEVICE__GetpDevice+0x2a>
 8013d8a:	68c3      	ldr	r3, [r0, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	428b      	cmp	r3, r1
 8013d90:	d004      	beq.n	8013d9c <GUI_DEVICE__GetpDevice+0x28>
 8013d92:	6800      	ldr	r0, [r0, #0]
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d1f8      	bne.n	8013d8a <GUI_DEVICE__GetpDevice+0x16>
 8013d98:	4770      	bx	lr
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	4770      	bx	lr
 8013d9e:	4770      	bx	lr
 8013da0:	200467d0 	.word	0x200467d0

08013da4 <GUI_DEVICE__GetpDriver>:
 8013da4:	2801      	cmp	r0, #1
 8013da6:	dc0e      	bgt.n	8013dc6 <GUI_DEVICE__GetpDriver+0x22>
 8013da8:	4b08      	ldr	r3, [pc, #32]	; (8013dcc <GUI_DEVICE__GetpDriver+0x28>)
 8013daa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013dae:	b158      	cbz	r0, 8013dc8 <GUI_DEVICE__GetpDriver+0x24>
 8013db0:	68c3      	ldr	r3, [r0, #12]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	b91b      	cbnz	r3, 8013dbe <GUI_DEVICE__GetpDriver+0x1a>
 8013db6:	e008      	b.n	8013dca <GUI_DEVICE__GetpDriver+0x26>
 8013db8:	68c3      	ldr	r3, [r0, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	b123      	cbz	r3, 8013dc8 <GUI_DEVICE__GetpDriver+0x24>
 8013dbe:	6800      	ldr	r0, [r0, #0]
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d1f9      	bne.n	8013db8 <GUI_DEVICE__GetpDriver+0x14>
 8013dc4:	4770      	bx	lr
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	4770      	bx	lr
 8013dca:	4770      	bx	lr
 8013dcc:	200467d0 	.word	0x200467d0

08013dd0 <GUI_DEVICE_Delete>:
 8013dd0:	f7fe bc4a 	b.w	8012668 <GUI_ALLOC_FreeFixedBlock>

08013dd4 <GUI_DEVICE_Create>:
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	dc17      	bgt.n	8013e08 <GUI_DEVICE_Create+0x34>
 8013dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ddc:	4607      	mov	r7, r0
 8013dde:	201c      	movs	r0, #28
 8013de0:	4690      	mov	r8, r2
 8013de2:	460d      	mov	r5, r1
 8013de4:	461e      	mov	r6, r3
 8013de6:	f7fe fc49 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8013dea:	4604      	mov	r4, r0
 8013dec:	b1d0      	cbz	r0, 8013e24 <GUI_DEVICE_Create+0x50>
 8013dee:	b16d      	cbz	r5, 8013e0c <GUI_DEVICE_Create+0x38>
 8013df0:	6105      	str	r5, [r0, #16]
 8013df2:	2300      	movs	r3, #0
 8013df4:	4620      	mov	r0, r4
 8013df6:	61a6      	str	r6, [r4, #24]
 8013df8:	f8a4 8014 	strh.w	r8, [r4, #20]
 8013dfc:	60e7      	str	r7, [r4, #12]
 8013dfe:	6023      	str	r3, [r4, #0]
 8013e00:	6063      	str	r3, [r4, #4]
 8013e02:	60a3      	str	r3, [r4, #8]
 8013e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e08:	2000      	movs	r0, #0
 8013e0a:	4770      	bx	lr
 8013e0c:	4b07      	ldr	r3, [pc, #28]	; (8013e2c <GUI_DEVICE_Create+0x58>)
 8013e0e:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8013e12:	b90a      	cbnz	r2, 8013e18 <GUI_DEVICE_Create+0x44>
 8013e14:	e7ed      	b.n	8013df2 <GUI_DEVICE_Create+0x1e>
 8013e16:	461a      	mov	r2, r3
 8013e18:	6813      	ldr	r3, [r2, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d1fb      	bne.n	8013e16 <GUI_DEVICE_Create+0x42>
 8013e1e:	6913      	ldr	r3, [r2, #16]
 8013e20:	6123      	str	r3, [r4, #16]
 8013e22:	e7e6      	b.n	8013df2 <GUI_DEVICE_Create+0x1e>
 8013e24:	2000      	movs	r0, #0
 8013e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2a:	bf00      	nop
 8013e2c:	200467d0 	.word	0x200467d0

08013e30 <GUI_DEVICE_Unlink>:
 8013e30:	4a0f      	ldr	r2, [pc, #60]	; (8013e70 <GUI_DEVICE_Unlink+0x40>)
 8013e32:	6981      	ldr	r1, [r0, #24]
 8013e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e38:	4298      	cmp	r0, r3
 8013e3a:	d00a      	beq.n	8013e52 <GUI_DEVICE_Unlink+0x22>
 8013e3c:	6842      	ldr	r2, [r0, #4]
 8013e3e:	b10a      	cbz	r2, 8013e44 <GUI_DEVICE_Unlink+0x14>
 8013e40:	6803      	ldr	r3, [r0, #0]
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	6803      	ldr	r3, [r0, #0]
 8013e46:	b103      	cbz	r3, 8013e4a <GUI_DEVICE_Unlink+0x1a>
 8013e48:	605a      	str	r2, [r3, #4]
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	6003      	str	r3, [r0, #0]
 8013e4e:	6043      	str	r3, [r0, #4]
 8013e50:	4770      	bx	lr
 8013e52:	6803      	ldr	r3, [r0, #0]
 8013e54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013e58:	b12b      	cbz	r3, 8013e66 <GUI_DEVICE_Unlink+0x36>
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	605a      	str	r2, [r3, #4]
 8013e5e:	6842      	ldr	r2, [r0, #4]
 8013e60:	2a00      	cmp	r2, #0
 8013e62:	d1ee      	bne.n	8013e42 <GUI_DEVICE_Unlink+0x12>
 8013e64:	e7f0      	b.n	8013e48 <GUI_DEVICE_Unlink+0x18>
 8013e66:	6842      	ldr	r2, [r0, #4]
 8013e68:	2a00      	cmp	r2, #0
 8013e6a:	d1ea      	bne.n	8013e42 <GUI_DEVICE_Unlink+0x12>
 8013e6c:	e7ed      	b.n	8013e4a <GUI_DEVICE_Unlink+0x1a>
 8013e6e:	bf00      	nop
 8013e70:	200467d0 	.word	0x200467d0

08013e74 <GUI_DEVICE_Link>:
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d03d      	beq.n	8013ef4 <GUI_DEVICE_Link+0x80>
 8013e78:	b470      	push	{r4, r5, r6}
 8013e7a:	6984      	ldr	r4, [r0, #24]
 8013e7c:	2c01      	cmp	r4, #1
 8013e7e:	dd03      	ble.n	8013e88 <GUI_DEVICE_Link+0x14>
 8013e80:	2301      	movs	r3, #1
 8013e82:	4618      	mov	r0, r3
 8013e84:	bc70      	pop	{r4, r5, r6}
 8013e86:	4770      	bx	lr
 8013e88:	4b1f      	ldr	r3, [pc, #124]	; (8013f08 <GUI_DEVICE_Link+0x94>)
 8013e8a:	781a      	ldrb	r2, [r3, #0]
 8013e8c:	4294      	cmp	r4, r2
 8013e8e:	da21      	bge.n	8013ed4 <GUI_DEVICE_Link+0x60>
 8013e90:	4d1e      	ldr	r5, [pc, #120]	; (8013f0c <GUI_DEVICE_Link+0x98>)
 8013e92:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8013e96:	b90b      	cbnz	r3, 8013e9c <GUI_DEVICE_Link+0x28>
 8013e98:	e032      	b.n	8013f00 <GUI_DEVICE_Link+0x8c>
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	2a00      	cmp	r2, #0
 8013ea0:	d1fb      	bne.n	8013e9a <GUI_DEVICE_Link+0x26>
 8013ea2:	68c2      	ldr	r2, [r0, #12]
 8013ea4:	6811      	ldr	r1, [r2, #0]
 8013ea6:	e002      	b.n	8013eae <GUI_DEVICE_Link+0x3a>
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d0e8      	beq.n	8013e80 <GUI_DEVICE_Link+0xc>
 8013eae:	68da      	ldr	r2, [r3, #12]
 8013eb0:	6812      	ldr	r2, [r2, #0]
 8013eb2:	4291      	cmp	r1, r2
 8013eb4:	dbf8      	blt.n	8013ea8 <GUI_DEVICE_Link+0x34>
 8013eb6:	d010      	beq.n	8013eda <GUI_DEVICE_Link+0x66>
 8013eb8:	685a      	ldr	r2, [r3, #4]
 8013eba:	b1f2      	cbz	r2, 8013efa <GUI_DEVICE_Link+0x86>
 8013ebc:	6010      	str	r0, [r2, #0]
 8013ebe:	6042      	str	r2, [r0, #4]
 8013ec0:	4298      	cmp	r0, r3
 8013ec2:	bf14      	ite	ne
 8013ec4:	461a      	movne	r2, r3
 8013ec6:	2200      	moveq	r2, #0
 8013ec8:	6058      	str	r0, [r3, #4]
 8013eca:	2300      	movs	r3, #0
 8013ecc:	6002      	str	r2, [r0, #0]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	bc70      	pop	{r4, r5, r6}
 8013ed2:	4770      	bx	lr
 8013ed4:	1c62      	adds	r2, r4, #1
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	e7da      	b.n	8013e90 <GUI_DEVICE_Link+0x1c>
 8013eda:	8a82      	ldrh	r2, [r0, #20]
 8013edc:	2a01      	cmp	r2, #1
 8013ede:	d1eb      	bne.n	8013eb8 <GUI_DEVICE_Link+0x44>
 8013ee0:	e004      	b.n	8013eec <GUI_DEVICE_Link+0x78>
 8013ee2:	68d6      	ldr	r6, [r2, #12]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	6832      	ldr	r2, [r6, #0]
 8013ee8:	4291      	cmp	r1, r2
 8013eea:	dce5      	bgt.n	8013eb8 <GUI_DEVICE_Link+0x44>
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	2a00      	cmp	r2, #0
 8013ef0:	d1f7      	bne.n	8013ee2 <GUI_DEVICE_Link+0x6e>
 8013ef2:	e7e1      	b.n	8013eb8 <GUI_DEVICE_Link+0x44>
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	4770      	bx	lr
 8013efa:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8013efe:	e7df      	b.n	8013ec0 <GUI_DEVICE_Link+0x4c>
 8013f00:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8013f04:	e7bd      	b.n	8013e82 <GUI_DEVICE_Link+0xe>
 8013f06:	bf00      	nop
 8013f08:	20046782 	.word	0x20046782
 8013f0c:	200467d0 	.word	0x200467d0

08013f10 <GUI_DEVICE_CreateAndLink>:
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	dc3b      	bgt.n	8013f8c <GUI_DEVICE_CreateAndLink+0x7c>
 8013f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f18:	4681      	mov	r9, r0
 8013f1a:	201c      	movs	r0, #28
 8013f1c:	4690      	mov	r8, r2
 8013f1e:	460f      	mov	r7, r1
 8013f20:	461e      	mov	r6, r3
 8013f22:	f7fe fbab 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8013f26:	4605      	mov	r5, r0
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d07f      	beq.n	801402c <GUI_DEVICE_CreateAndLink+0x11c>
 8013f2c:	4a41      	ldr	r2, [pc, #260]	; (8014034 <GUI_DEVICE_CreateAndLink+0x124>)
 8013f2e:	2f00      	cmp	r7, #0
 8013f30:	d031      	beq.n	8013f96 <GUI_DEVICE_CreateAndLink+0x86>
 8013f32:	2300      	movs	r3, #0
 8013f34:	f8df e104 	ldr.w	lr, [pc, #260]	; 801403c <GUI_DEVICE_CreateAndLink+0x12c>
 8013f38:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8013f3c:	6003      	str	r3, [r0, #0]
 8013f3e:	f89e 1000 	ldrb.w	r1, [lr]
 8013f42:	6107      	str	r7, [r0, #16]
 8013f44:	428e      	cmp	r6, r1
 8013f46:	6186      	str	r6, [r0, #24]
 8013f48:	f8a0 8014 	strh.w	r8, [r0, #20]
 8013f4c:	f8c0 900c 	str.w	r9, [r0, #12]
 8013f50:	6043      	str	r3, [r0, #4]
 8013f52:	6083      	str	r3, [r0, #8]
 8013f54:	db02      	blt.n	8013f5c <GUI_DEVICE_CreateAndLink+0x4c>
 8013f56:	1c73      	adds	r3, r6, #1
 8013f58:	f88e 3000 	strb.w	r3, [lr]
 8013f5c:	2c00      	cmp	r4, #0
 8013f5e:	d05d      	beq.n	801401c <GUI_DEVICE_CreateAndLink+0x10c>
 8013f60:	4621      	mov	r1, r4
 8013f62:	684c      	ldr	r4, [r1, #4]
 8013f64:	2c00      	cmp	r4, #0
 8013f66:	d1fb      	bne.n	8013f60 <GUI_DEVICE_CreateAndLink+0x50>
 8013f68:	f8d9 0000 	ldr.w	r0, [r9]
 8013f6c:	68cb      	ldr	r3, [r1, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4283      	cmp	r3, r0
 8013f72:	dd2c      	ble.n	8013fce <GUI_DEVICE_CreateAndLink+0xbe>
 8013f74:	6809      	ldr	r1, [r1, #0]
 8013f76:	2900      	cmp	r1, #0
 8013f78:	d1f8      	bne.n	8013f6c <GUI_DEVICE_CreateAndLink+0x5c>
 8013f7a:	b948      	cbnz	r0, 8013f90 <GUI_DEVICE_CreateAndLink+0x80>
 8013f7c:	4b2e      	ldr	r3, [pc, #184]	; (8014038 <GUI_DEVICE_CreateAndLink+0x128>)
 8013f7e:	3616      	adds	r6, #22
 8013f80:	4628      	mov	r0, r5
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8013f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	4770      	bx	lr
 8013f90:	4628      	mov	r0, r5
 8013f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f96:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8013f9a:	2900      	cmp	r1, #0
 8013f9c:	d030      	beq.n	8014000 <GUI_DEVICE_CreateAndLink+0xf0>
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	e000      	b.n	8013fa4 <GUI_DEVICE_CreateAndLink+0x94>
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	6803      	ldr	r3, [r0, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d1fb      	bne.n	8013fa2 <GUI_DEVICE_CreateAndLink+0x92>
 8013faa:	6900      	ldr	r0, [r0, #16]
 8013fac:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801403c <GUI_DEVICE_CreateAndLink+0x12c>
 8013fb0:	602b      	str	r3, [r5, #0]
 8013fb2:	6128      	str	r0, [r5, #16]
 8013fb4:	f89e 0000 	ldrb.w	r0, [lr]
 8013fb8:	61ae      	str	r6, [r5, #24]
 8013fba:	4286      	cmp	r6, r0
 8013fbc:	f8a5 8014 	strh.w	r8, [r5, #20]
 8013fc0:	f8c5 900c 	str.w	r9, [r5, #12]
 8013fc4:	606b      	str	r3, [r5, #4]
 8013fc6:	60ab      	str	r3, [r5, #8]
 8013fc8:	dbcb      	blt.n	8013f62 <GUI_DEVICE_CreateAndLink+0x52>
 8013fca:	460c      	mov	r4, r1
 8013fcc:	e7c3      	b.n	8013f56 <GUI_DEVICE_CreateAndLink+0x46>
 8013fce:	d00a      	beq.n	8013fe6 <GUI_DEVICE_CreateAndLink+0xd6>
 8013fd0:	684b      	ldr	r3, [r1, #4]
 8013fd2:	b343      	cbz	r3, 8014026 <GUI_DEVICE_CreateAndLink+0x116>
 8013fd4:	601d      	str	r5, [r3, #0]
 8013fd6:	606b      	str	r3, [r5, #4]
 8013fd8:	428d      	cmp	r5, r1
 8013fda:	bf14      	ite	ne
 8013fdc:	460b      	movne	r3, r1
 8013fde:	2300      	moveq	r3, #0
 8013fe0:	604d      	str	r5, [r1, #4]
 8013fe2:	602b      	str	r3, [r5, #0]
 8013fe4:	e7c9      	b.n	8013f7a <GUI_DEVICE_CreateAndLink+0x6a>
 8013fe6:	f1b8 0f01 	cmp.w	r8, #1
 8013fea:	d1f1      	bne.n	8013fd0 <GUI_DEVICE_CreateAndLink+0xc0>
 8013fec:	e004      	b.n	8013ff8 <GUI_DEVICE_CreateAndLink+0xe8>
 8013fee:	68dc      	ldr	r4, [r3, #12]
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	4283      	cmp	r3, r0
 8013ff6:	dbeb      	blt.n	8013fd0 <GUI_DEVICE_CreateAndLink+0xc0>
 8013ff8:	680b      	ldr	r3, [r1, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d1f7      	bne.n	8013fee <GUI_DEVICE_CreateAndLink+0xde>
 8013ffe:	e7e7      	b.n	8013fd0 <GUI_DEVICE_CreateAndLink+0xc0>
 8014000:	f8df e038 	ldr.w	lr, [pc, #56]	; 801403c <GUI_DEVICE_CreateAndLink+0x12c>
 8014004:	6001      	str	r1, [r0, #0]
 8014006:	f89e 3000 	ldrb.w	r3, [lr]
 801400a:	6186      	str	r6, [r0, #24]
 801400c:	429e      	cmp	r6, r3
 801400e:	f8a0 8014 	strh.w	r8, [r0, #20]
 8014012:	f8c0 900c 	str.w	r9, [r0, #12]
 8014016:	6041      	str	r1, [r0, #4]
 8014018:	6081      	str	r1, [r0, #8]
 801401a:	dad6      	bge.n	8013fca <GUI_DEVICE_CreateAndLink+0xba>
 801401c:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8014020:	f8d9 0000 	ldr.w	r0, [r9]
 8014024:	e7a9      	b.n	8013f7a <GUI_DEVICE_CreateAndLink+0x6a>
 8014026:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 801402a:	e7d5      	b.n	8013fd8 <GUI_DEVICE_CreateAndLink+0xc8>
 801402c:	2000      	movs	r0, #0
 801402e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014032:	bf00      	nop
 8014034:	200467d0 	.word	0x200467d0
 8014038:	20000018 	.word	0x20000018
 801403c:	20046782 	.word	0x20046782

08014040 <GUI_DEVICE_UnlinkTaskDevices>:
 8014040:	2000      	movs	r0, #0
 8014042:	4770      	bx	lr

08014044 <GUI_DEVICE_LinkDevices>:
 8014044:	2800      	cmp	r0, #0
 8014046:	d04d      	beq.n	80140e4 <GUI_DEVICE_LinkDevices+0xa0>
 8014048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801404c:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80140ec <GUI_DEVICE_LinkDevices+0xa8>
 8014050:	4f25      	ldr	r7, [pc, #148]	; (80140e8 <GUI_DEVICE_LinkDevices+0xa4>)
 8014052:	f89e 6000 	ldrb.w	r6, [lr]
 8014056:	46bc      	mov	ip, r7
 8014058:	e001      	b.n	801405e <GUI_DEVICE_LinkDevices+0x1a>
 801405a:	4628      	mov	r0, r5
 801405c:	b33d      	cbz	r5, 80140ae <GUI_DEVICE_LinkDevices+0x6a>
 801405e:	6984      	ldr	r4, [r0, #24]
 8014060:	6805      	ldr	r5, [r0, #0]
 8014062:	2c01      	cmp	r4, #1
 8014064:	dcf9      	bgt.n	801405a <GUI_DEVICE_LinkDevices+0x16>
 8014066:	42b4      	cmp	r4, r6
 8014068:	db01      	blt.n	801406e <GUI_DEVICE_LinkDevices+0x2a>
 801406a:	1c66      	adds	r6, r4, #1
 801406c:	b2f6      	uxtb	r6, r6
 801406e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8014072:	b90b      	cbnz	r3, 8014078 <GUI_DEVICE_LinkDevices+0x34>
 8014074:	e033      	b.n	80140de <GUI_DEVICE_LinkDevices+0x9a>
 8014076:	4613      	mov	r3, r2
 8014078:	685a      	ldr	r2, [r3, #4]
 801407a:	2a00      	cmp	r2, #0
 801407c:	d1fb      	bne.n	8014076 <GUI_DEVICE_LinkDevices+0x32>
 801407e:	68c2      	ldr	r2, [r0, #12]
 8014080:	6811      	ldr	r1, [r2, #0]
 8014082:	e002      	b.n	801408a <GUI_DEVICE_LinkDevices+0x46>
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0e7      	beq.n	801405a <GUI_DEVICE_LinkDevices+0x16>
 801408a:	68da      	ldr	r2, [r3, #12]
 801408c:	6812      	ldr	r2, [r2, #0]
 801408e:	428a      	cmp	r2, r1
 8014090:	dcf8      	bgt.n	8014084 <GUI_DEVICE_LinkDevices+0x40>
 8014092:	d010      	beq.n	80140b6 <GUI_DEVICE_LinkDevices+0x72>
 8014094:	685a      	ldr	r2, [r3, #4]
 8014096:	b1a2      	cbz	r2, 80140c2 <GUI_DEVICE_LinkDevices+0x7e>
 8014098:	6010      	str	r0, [r2, #0]
 801409a:	6042      	str	r2, [r0, #4]
 801409c:	4298      	cmp	r0, r3
 801409e:	bf14      	ite	ne
 80140a0:	461a      	movne	r2, r3
 80140a2:	2200      	moveq	r2, #0
 80140a4:	6058      	str	r0, [r3, #4]
 80140a6:	6002      	str	r2, [r0, #0]
 80140a8:	4628      	mov	r0, r5
 80140aa:	2d00      	cmp	r5, #0
 80140ac:	d1d7      	bne.n	801405e <GUI_DEVICE_LinkDevices+0x1a>
 80140ae:	f88e 6000 	strb.w	r6, [lr]
 80140b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b6:	8a82      	ldrh	r2, [r0, #20]
 80140b8:	2a01      	cmp	r2, #1
 80140ba:	d00c      	beq.n	80140d6 <GUI_DEVICE_LinkDevices+0x92>
 80140bc:	685a      	ldr	r2, [r3, #4]
 80140be:	2a00      	cmp	r2, #0
 80140c0:	d1ea      	bne.n	8014098 <GUI_DEVICE_LinkDevices+0x54>
 80140c2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80140c6:	e7e9      	b.n	801409c <GUI_DEVICE_LinkDevices+0x58>
 80140c8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80140cc:	4613      	mov	r3, r2
 80140ce:	f8d8 2000 	ldr.w	r2, [r8]
 80140d2:	428a      	cmp	r2, r1
 80140d4:	dbde      	blt.n	8014094 <GUI_DEVICE_LinkDevices+0x50>
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	2a00      	cmp	r2, #0
 80140da:	d1f5      	bne.n	80140c8 <GUI_DEVICE_LinkDevices+0x84>
 80140dc:	e7da      	b.n	8014094 <GUI_DEVICE_LinkDevices+0x50>
 80140de:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80140e2:	e7ba      	b.n	801405a <GUI_DEVICE_LinkDevices+0x16>
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop
 80140e8:	200467d0 	.word	0x200467d0
 80140ec:	20046782 	.word	0x20046782

080140f0 <GUI_DispString.part.0>:
 80140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	4d4a      	ldr	r5, [pc, #296]	; (8014220 <GUI_DispString.part.0+0x130>)
 80140f6:	b083      	sub	sp, #12
 80140f8:	4604      	mov	r4, r0
 80140fa:	f003 fe1d 	bl	8017d38 <GUI_Lock>
 80140fe:	f00e f8c7 	bl	8022290 <GUI_GetFontDistY>
 8014102:	682b      	ldr	r3, [r5, #0]
 8014104:	4606      	mov	r6, r0
 8014106:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 801410a:	f00e f89d 	bl	8022248 <GUI_GetYAdjust>
 801410e:	682b      	ldr	r3, [r5, #0]
 8014110:	fa1f f980 	uxth.w	r9, r0
 8014114:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8014116:	ebc9 0202 	rsb	r2, r9, r2
 801411a:	b212      	sxth	r2, r2
 801411c:	849a      	strh	r2, [r3, #36]	; 0x24
 801411e:	7821      	ldrb	r1, [r4, #0]
 8014120:	2900      	cmp	r1, #0
 8014122:	d04f      	beq.n	80141c4 <GUI_DispString.part.0+0xd4>
 8014124:	b2b6      	uxth	r6, r6
 8014126:	462f      	mov	r7, r5
 8014128:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801412c:	4620      	mov	r0, r4
 801412e:	f00e f933 	bl	8022398 <GUI__GetLineNumChars>
 8014132:	4601      	mov	r1, r0
 8014134:	4683      	mov	fp, r0
 8014136:	4620      	mov	r0, r4
 8014138:	f00e f956 	bl	80223e8 <GUI__GetLineDistX>
 801413c:	6829      	ldr	r1, [r5, #0]
 801413e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8014140:	f003 0303 	and.w	r3, r3, #3
 8014144:	2b01      	cmp	r3, #1
 8014146:	d05a      	beq.n	80141fe <GUI_DispString.part.0+0x10e>
 8014148:	2b02      	cmp	r3, #2
 801414a:	d05c      	beq.n	8014206 <GUI_DispString.part.0+0x116>
 801414c:	fa1f fa80 	uxth.w	sl, r0
 8014150:	f04f 0e00 	mov.w	lr, #0
 8014154:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8014156:	f10a 3cff 	add.w	ip, sl, #4294967295
 801415a:	f9b1 2024 	ldrsh.w	r2, [r1, #36]	; 0x24
 801415e:	ebce 0303 	rsb	r3, lr, r3
 8014162:	f8ad 2002 	strh.w	r2, [sp, #2]
 8014166:	3a01      	subs	r2, #1
 8014168:	b29b      	uxth	r3, r3
 801416a:	18b0      	adds	r0, r6, r2
 801416c:	466a      	mov	r2, sp
 801416e:	fa0f fe83 	sxth.w	lr, r3
 8014172:	4463      	add	r3, ip
 8014174:	f8ad 0006 	strh.w	r0, [sp, #6]
 8014178:	4620      	mov	r0, r4
 801417a:	f8a1 e022 	strh.w	lr, [r1, #34]	; 0x22
 801417e:	4659      	mov	r1, fp
 8014180:	f8ad e000 	strh.w	lr, [sp]
 8014184:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014188:	f00e f96e 	bl	8022468 <GUI__DispLine>
 801418c:	682b      	ldr	r3, [r5, #0]
 801418e:	4620      	mov	r0, r4
 8014190:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014194:	4659      	mov	r1, fp
 8014196:	849a      	strh	r2, [r3, #36]	; 0x24
 8014198:	f003 fefc 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 801419c:	5c23      	ldrb	r3, [r4, r0]
 801419e:	4404      	add	r4, r0
 80141a0:	2b0a      	cmp	r3, #10
 80141a2:	d01b      	beq.n	80141dc <GUI_DispString.part.0+0xec>
 80141a4:	2b0d      	cmp	r3, #13
 80141a6:	d019      	beq.n	80141dc <GUI_DispString.part.0+0xec>
 80141a8:	f8bd 0000 	ldrh.w	r0, [sp]
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	4482      	add	sl, r0
 80141b0:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 80141b4:	7822      	ldrb	r2, [r4, #0]
 80141b6:	b11a      	cbz	r2, 80141c0 <GUI_DispString.part.0+0xd0>
 80141b8:	7862      	ldrb	r2, [r4, #1]
 80141ba:	3401      	adds	r4, #1
 80141bc:	2a00      	cmp	r2, #0
 80141be:	d1b3      	bne.n	8014128 <GUI_DispString.part.0+0x38>
 80141c0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80141c4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80141c6:	4491      	add	r9, r2
 80141c8:	f021 0203 	bic.w	r2, r1, #3
 80141cc:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
 80141d0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80141d2:	f003 fda7 	bl	8017d24 <GUI_Unlock>
 80141d6:	b003      	add	sp, #12
 80141d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80141e0:	f002 0203 	and.w	r2, r2, #3
 80141e4:	3a01      	subs	r2, #1
 80141e6:	2a01      	cmp	r2, #1
 80141e8:	d816      	bhi.n	8014218 <GUI_DispString.part.0+0x128>
 80141ea:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 80141ee:	7822      	ldrb	r2, [r4, #0]
 80141f0:	2a0a      	cmp	r2, #10
 80141f2:	d1e0      	bne.n	80141b6 <GUI_DispString.part.0+0xc6>
 80141f4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80141f6:	4432      	add	r2, r6
 80141f8:	849a      	strh	r2, [r3, #36]	; 0x24
 80141fa:	7822      	ldrb	r2, [r4, #0]
 80141fc:	e7db      	b.n	80141b6 <GUI_DispString.part.0+0xc6>
 80141fe:	fa1f fe80 	uxth.w	lr, r0
 8014202:	46f2      	mov	sl, lr
 8014204:	e7a6      	b.n	8014154 <GUI_DispString.part.0+0x64>
 8014206:	2800      	cmp	r0, #0
 8014208:	4603      	mov	r3, r0
 801420a:	fa1f fa80 	uxth.w	sl, r0
 801420e:	bfb8      	it	lt
 8014210:	1c43      	addlt	r3, r0, #1
 8014212:	f3c3 0e4f 	ubfx	lr, r3, #1, #16
 8014216:	e79d      	b.n	8014154 <GUI_DispString.part.0+0x64>
 8014218:	8c1a      	ldrh	r2, [r3, #32]
 801421a:	845a      	strh	r2, [r3, #34]	; 0x22
 801421c:	e7e7      	b.n	80141ee <GUI_DispString.part.0+0xfe>
 801421e:	bf00      	nop
 8014220:	20000018 	.word	0x20000018

08014224 <GUI_DispStringInRectWrap.part.1>:
 8014224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014228:	4689      	mov	r9, r1
 801422a:	b08b      	sub	sp, #44	; 0x2c
 801422c:	4615      	mov	r5, r2
 801422e:	4604      	mov	r4, r0
 8014230:	9203      	str	r2, [sp, #12]
 8014232:	461f      	mov	r7, r3
 8014234:	f003 fd80 	bl	8017d38 <GUI_Lock>
 8014238:	f9b9 3000 	ldrsh.w	r3, [r9]
 801423c:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	1ace      	subs	r6, r1, r3
 8014244:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8014248:	9102      	str	r1, [sp, #8]
 801424a:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 801424e:	3601      	adds	r6, #1
 8014250:	9305      	str	r3, [sp, #20]
 8014252:	f00e f81d 	bl	8022290 <GUI_GetFontDistY>
 8014256:	f015 0a0c 	ands.w	sl, r5, #12
 801425a:	9004      	str	r0, [sp, #16]
 801425c:	d176      	bne.n	801434c <GUI_DispStringInRectWrap.part.1+0x128>
 801425e:	fa1f fa80 	uxth.w	sl, r0
 8014262:	4648      	mov	r0, r9
 8014264:	f00c fdb0 	bl	8020dc8 <WM_SetUserClipRect>
 8014268:	4602      	mov	r2, r0
 801426a:	9004      	str	r0, [sp, #16]
 801426c:	b1a8      	cbz	r0, 801429a <GUI_DispStringInRectWrap.part.1+0x76>
 801426e:	9901      	ldr	r1, [sp, #4]
 8014270:	2500      	movs	r5, #0
 8014272:	a806      	add	r0, sp, #24
 8014274:	462b      	mov	r3, r5
 8014276:	f361 050f 	bfi	r5, r1, #0, #16
 801427a:	9902      	ldr	r1, [sp, #8]
 801427c:	f36b 451f 	bfi	r5, fp, #16, #16
 8014280:	f361 030f 	bfi	r3, r1, #0, #16
 8014284:	9905      	ldr	r1, [sp, #20]
 8014286:	9506      	str	r5, [sp, #24]
 8014288:	f361 431f 	bfi	r3, r1, #16, #16
 801428c:	4649      	mov	r1, r9
 801428e:	9307      	str	r3, [sp, #28]
 8014290:	f004 ff22 	bl	80190d8 <GUI__IntersectRects>
 8014294:	a806      	add	r0, sp, #24
 8014296:	f00c fd97 	bl	8020dc8 <WM_SetUserClipRect>
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	fa1f f58b 	uxth.w	r5, fp
 80142a0:	f003 0803 	and.w	r8, r3, #3
 80142a4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80142a8:	9303      	str	r3, [sp, #12]
 80142aa:	4643      	mov	r3, r8
 80142ac:	46b0      	mov	r8, r6
 80142ae:	461e      	mov	r6, r3
 80142b0:	e015      	b.n	80142de <GUI_DispStringInRectWrap.part.1+0xba>
 80142b2:	2e02      	cmp	r6, #2
 80142b4:	d034      	beq.n	8014320 <GUI_DispStringInRectWrap.part.1+0xfc>
 80142b6:	b91e      	cbnz	r6, 80142c0 <GUI_DispStringInRectWrap.part.1+0x9c>
 80142b8:	f8b9 3000 	ldrh.w	r3, [r9]
 80142bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80142c0:	4620      	mov	r0, r4
 80142c2:	4659      	mov	r1, fp
 80142c4:	aa08      	add	r2, sp, #32
 80142c6:	4455      	add	r5, sl
 80142c8:	f00e f8ce 	bl	8022468 <GUI__DispLine>
 80142cc:	4620      	mov	r0, r4
 80142ce:	463a      	mov	r2, r7
 80142d0:	4641      	mov	r1, r8
 80142d2:	f005 f995 	bl	8019600 <GUI__WrapGetNumBytesToNextLine>
 80142d6:	4404      	add	r4, r0
 80142d8:	b2ad      	uxth	r5, r5
 80142da:	7823      	ldrb	r3, [r4, #0]
 80142dc:	b373      	cbz	r3, 801433c <GUI_DispStringInRectWrap.part.1+0x118>
 80142de:	463a      	mov	r2, r7
 80142e0:	4641      	mov	r1, r8
 80142e2:	4620      	mov	r0, r4
 80142e4:	f005 f97a 	bl	80195dc <GUI__WrapGetNumCharsDisp>
 80142e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	4683      	mov	fp, r0
 80142f0:	f8ad 2020 	strh.w	r2, [sp, #32]
 80142f4:	4620      	mov	r0, r4
 80142f6:	18eb      	adds	r3, r5, r3
 80142f8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80142fc:	4659      	mov	r1, fp
 80142fe:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8014302:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8014306:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801430a:	f00e f86d 	bl	80223e8 <GUI__GetLineDistX>
 801430e:	2e01      	cmp	r6, #1
 8014310:	d1cf      	bne.n	80142b2 <GUI_DispStringInRectWrap.part.1+0x8e>
 8014312:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8014316:	3301      	adds	r3, #1
 8014318:	1a18      	subs	r0, r3, r0
 801431a:	f8ad 0020 	strh.w	r0, [sp, #32]
 801431e:	e7cf      	b.n	80142c0 <GUI_DispStringInRectWrap.part.1+0x9c>
 8014320:	f9b9 1000 	ldrsh.w	r1, [r9]
 8014324:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8014328:	1a5b      	subs	r3, r3, r1
 801432a:	1a18      	subs	r0, r3, r0
 801432c:	3001      	adds	r0, #1
 801432e:	bf48      	it	mi
 8014330:	3001      	addmi	r0, #1
 8014332:	eb01 0060 	add.w	r0, r1, r0, asr #1
 8014336:	f8ad 0020 	strh.w	r0, [sp, #32]
 801433a:	e7c1      	b.n	80142c0 <GUI_DispStringInRectWrap.part.1+0x9c>
 801433c:	9804      	ldr	r0, [sp, #16]
 801433e:	f00c fd43 	bl	8020dc8 <WM_SetUserClipRect>
 8014342:	f003 fcef 	bl	8017d24 <GUI_Unlock>
 8014346:	b00b      	add	sp, #44	; 0x2c
 8014348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801434c:	4625      	mov	r5, r4
 801434e:	f003 fcf3 	bl	8017d38 <GUI_Lock>
 8014352:	463a      	mov	r2, r7
 8014354:	4631      	mov	r1, r6
 8014356:	4628      	mov	r0, r5
 8014358:	f04f 0800 	mov.w	r8, #0
 801435c:	f005 f950 	bl	8019600 <GUI__WrapGetNumBytesToNextLine>
 8014360:	b148      	cbz	r0, 8014376 <GUI_DispStringInRectWrap.part.1+0x152>
 8014362:	4405      	add	r5, r0
 8014364:	463a      	mov	r2, r7
 8014366:	4631      	mov	r1, r6
 8014368:	f108 0801 	add.w	r8, r8, #1
 801436c:	4628      	mov	r0, r5
 801436e:	f005 f947 	bl	8019600 <GUI__WrapGetNumBytesToNextLine>
 8014372:	2800      	cmp	r0, #0
 8014374:	d1f5      	bne.n	8014362 <GUI_DispStringInRectWrap.part.1+0x13e>
 8014376:	f003 fcd5 	bl	8017d24 <GUI_Unlock>
 801437a:	f1ba 0f08 	cmp.w	sl, #8
 801437e:	d008      	beq.n	8014392 <GUI_DispStringInRectWrap.part.1+0x16e>
 8014380:	f1ba 0f0c 	cmp.w	sl, #12
 8014384:	d010      	beq.n	80143a8 <GUI_DispStringInRectWrap.part.1+0x184>
 8014386:	f1ba 0f04 	cmp.w	sl, #4
 801438a:	d002      	beq.n	8014392 <GUI_DispStringInRectWrap.part.1+0x16e>
 801438c:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8014390:	e767      	b.n	8014262 <GUI_DispStringInRectWrap.part.1+0x3e>
 8014392:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8014396:	9b05      	ldr	r3, [sp, #20]
 8014398:	fb18 f80a 	smulbb	r8, r8, sl
 801439c:	1c5d      	adds	r5, r3, #1
 801439e:	ebc8 0505 	rsb	r5, r8, r5
 80143a2:	fa0f fb85 	sxth.w	fp, r5
 80143a6:	e75c      	b.n	8014262 <GUI_DispStringInRectWrap.part.1+0x3e>
 80143a8:	9b05      	ldr	r3, [sp, #20]
 80143aa:	9a04      	ldr	r2, [sp, #16]
 80143ac:	ebcb 0303 	rsb	r3, fp, r3
 80143b0:	f8bd a010 	ldrh.w	sl, [sp, #16]
 80143b4:	3301      	adds	r3, #1
 80143b6:	fb08 3812 	mls	r8, r8, r2, r3
 80143ba:	f1b8 0f00 	cmp.w	r8, #0
 80143be:	bfb8      	it	lt
 80143c0:	f108 0801 	addlt.w	r8, r8, #1
 80143c4:	eb0b 0568 	add.w	r5, fp, r8, asr #1
 80143c8:	fa0f fb85 	sxth.w	fp, r5
 80143cc:	e749      	b.n	8014262 <GUI_DispStringInRectWrap.part.1+0x3e>
 80143ce:	bf00      	nop

080143d0 <GUI_DispString>:
 80143d0:	b108      	cbz	r0, 80143d6 <GUI_DispString+0x6>
 80143d2:	f7ff be8d 	b.w	80140f0 <GUI_DispString.part.0>
 80143d6:	4770      	bx	lr

080143d8 <GUI_DispStringAt>:
 80143d8:	b570      	push	{r4, r5, r6, lr}
 80143da:	460e      	mov	r6, r1
 80143dc:	4615      	mov	r5, r2
 80143de:	4604      	mov	r4, r0
 80143e0:	f003 fcaa 	bl	8017d38 <GUI_Lock>
 80143e4:	4b05      	ldr	r3, [pc, #20]	; (80143fc <GUI_DispStringAt+0x24>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	845e      	strh	r6, [r3, #34]	; 0x22
 80143ea:	849d      	strh	r5, [r3, #36]	; 0x24
 80143ec:	b114      	cbz	r4, 80143f4 <GUI_DispStringAt+0x1c>
 80143ee:	4620      	mov	r0, r4
 80143f0:	f7ff fe7e 	bl	80140f0 <GUI_DispString.part.0>
 80143f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143f8:	f003 bc94 	b.w	8017d24 <GUI_Unlock>
 80143fc:	20000018 	.word	0x20000018

08014400 <GUI_DispStringHCenterAt>:
 8014400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014404:	4c0e      	ldr	r4, [pc, #56]	; (8014440 <GUI_DispStringHCenterAt+0x40>)
 8014406:	4605      	mov	r5, r0
 8014408:	4688      	mov	r8, r1
 801440a:	4617      	mov	r7, r2
 801440c:	6823      	ldr	r3, [r4, #0]
 801440e:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8014412:	f040 0002 	orr.w	r0, r0, #2
 8014416:	f7ff faa1 	bl	801395c <GUI_SetTextAlign>
 801441a:	4606      	mov	r6, r0
 801441c:	f003 fc8c 	bl	8017d38 <GUI_Lock>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 8014426:	849f      	strh	r7, [r3, #36]	; 0x24
 8014428:	b115      	cbz	r5, 8014430 <GUI_DispStringHCenterAt+0x30>
 801442a:	4628      	mov	r0, r5
 801442c:	f7ff fe60 	bl	80140f0 <GUI_DispString.part.0>
 8014430:	f003 fc78 	bl	8017d24 <GUI_Unlock>
 8014434:	4630      	mov	r0, r6
 8014436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801443a:	f7ff ba8f 	b.w	801395c <GUI_SetTextAlign>
 801443e:	bf00      	nop
 8014440:	20000018 	.word	0x20000018

08014444 <GUI__DispStringInRect>:
 8014444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	460c      	mov	r4, r1
 801444a:	b087      	sub	sp, #28
 801444c:	4617      	mov	r7, r2
 801444e:	461d      	mov	r5, r3
 8014450:	9001      	str	r0, [sp, #4]
 8014452:	f00d ff1d 	bl	8022290 <GUI_GetFontDistY>
 8014456:	f8dd a004 	ldr.w	sl, [sp, #4]
 801445a:	4681      	mov	r9, r0
 801445c:	2c00      	cmp	r4, #0
 801445e:	f000 80a4 	beq.w	80145aa <GUI__DispStringInRect+0x166>
 8014462:	ab04      	add	r3, sp, #16
 8014464:	6820      	ldr	r0, [r4, #0]
 8014466:	6861      	ldr	r1, [r4, #4]
 8014468:	c303      	stmia	r3!, {r0, r1}
 801446a:	f017 0b0c 	ands.w	fp, r7, #12
 801446e:	d15f      	bne.n	8014530 <GUI__DispStringInRect+0xec>
 8014470:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8014474:	f8cd a004 	str.w	sl, [sp, #4]
 8014478:	2d00      	cmp	r5, #0
 801447a:	d056      	beq.n	801452a <GUI__DispStringInRect+0xe6>
 801447c:	f10d 0804 	add.w	r8, sp, #4
 8014480:	f109 39ff 	add.w	r9, r9, #4294967295
 8014484:	4650      	mov	r0, sl
 8014486:	f007 0703 	and.w	r7, r7, #3
 801448a:	2400      	movs	r4, #0
 801448c:	fa1f f989 	uxth.w	r9, r9
 8014490:	f8df a138 	ldr.w	sl, [pc, #312]	; 80145cc <GUI__DispStringInRect+0x188>
 8014494:	e02d      	b.n	80144f2 <GUI__DispStringInRect+0xae>
 8014496:	2f02      	cmp	r7, #2
 8014498:	d03c      	beq.n	8014514 <GUI__DispStringInRect+0xd0>
 801449a:	b90f      	cbnz	r7, 80144a0 <GUI__DispStringInRect+0x5c>
 801449c:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80144a0:	3801      	subs	r0, #1
 80144a2:	b233      	sxth	r3, r6
 80144a4:	fa0f fc84 	sxth.w	ip, r4
 80144a8:	f8da 2000 	ldr.w	r2, [sl]
 80144ac:	4420      	add	r0, r4
 80144ae:	eb09 0e06 	add.w	lr, r9, r6
 80144b2:	f8a2 c022 	strh.w	ip, [r2, #34]	; 0x22
 80144b6:	4659      	mov	r1, fp
 80144b8:	8493      	strh	r3, [r2, #36]	; 0x24
 80144ba:	aa02      	add	r2, sp, #8
 80144bc:	f8ad 000c 	strh.w	r0, [sp, #12]
 80144c0:	9801      	ldr	r0, [sp, #4]
 80144c2:	f8ad c008 	strh.w	ip, [sp, #8]
 80144c6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80144ca:	f8ad e00e 	strh.w	lr, [sp, #14]
 80144ce:	f00d ffcb 	bl	8022468 <GUI__DispLine>
 80144d2:	4659      	mov	r1, fp
 80144d4:	9801      	ldr	r0, [sp, #4]
 80144d6:	f003 fd5d 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 80144da:	9b01      	ldr	r3, [sp, #4]
 80144dc:	4418      	add	r0, r3
 80144de:	9001      	str	r0, [sp, #4]
 80144e0:	f00d fed6 	bl	8022290 <GUI_GetFontDistY>
 80144e4:	4406      	add	r6, r0
 80144e6:	4640      	mov	r0, r8
 80144e8:	f004 fdc0 	bl	801906c <GUI__HandleEOLine>
 80144ec:	b9e8      	cbnz	r0, 801452a <GUI__DispStringInRect+0xe6>
 80144ee:	b1e5      	cbz	r5, 801452a <GUI__DispStringInRect+0xe6>
 80144f0:	9801      	ldr	r0, [sp, #4]
 80144f2:	4629      	mov	r1, r5
 80144f4:	f00d ff50 	bl	8022398 <GUI__GetLineNumChars>
 80144f8:	4683      	mov	fp, r0
 80144fa:	9801      	ldr	r0, [sp, #4]
 80144fc:	4659      	mov	r1, fp
 80144fe:	ebcb 0505 	rsb	r5, fp, r5
 8014502:	f00d ff71 	bl	80223e8 <GUI__GetLineDistX>
 8014506:	2f01      	cmp	r7, #1
 8014508:	d1c5      	bne.n	8014496 <GUI__DispStringInRect+0x52>
 801450a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801450e:	1a24      	subs	r4, r4, r0
 8014510:	3401      	adds	r4, #1
 8014512:	e7c5      	b.n	80144a0 <GUI__DispStringInRect+0x5c>
 8014514:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8014518:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801451c:	1b1b      	subs	r3, r3, r4
 801451e:	1a1b      	subs	r3, r3, r0
 8014520:	bf48      	it	mi
 8014522:	3301      	addmi	r3, #1
 8014524:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8014528:	e7ba      	b.n	80144a0 <GUI__DispStringInRect+0x5c>
 801452a:	b007      	add	sp, #28
 801452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014530:	2d00      	cmp	r5, #0
 8014532:	d03e      	beq.n	80145b2 <GUI__DispStringInRect+0x16e>
 8014534:	462c      	mov	r4, r5
 8014536:	2600      	movs	r6, #0
 8014538:	f10d 0804 	add.w	r8, sp, #4
 801453c:	e000      	b.n	8014540 <GUI__DispStringInRect+0xfc>
 801453e:	b194      	cbz	r4, 8014566 <GUI__DispStringInRect+0x122>
 8014540:	4621      	mov	r1, r4
 8014542:	9801      	ldr	r0, [sp, #4]
 8014544:	f00d ff28 	bl	8022398 <GUI__GetLineNumChars>
 8014548:	4603      	mov	r3, r0
 801454a:	9801      	ldr	r0, [sp, #4]
 801454c:	3601      	adds	r6, #1
 801454e:	4619      	mov	r1, r3
 8014550:	1ae4      	subs	r4, r4, r3
 8014552:	f003 fd1f 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 8014556:	9b01      	ldr	r3, [sp, #4]
 8014558:	4403      	add	r3, r0
 801455a:	4640      	mov	r0, r8
 801455c:	9301      	str	r3, [sp, #4]
 801455e:	f004 fd85 	bl	801906c <GUI__HandleEOLine>
 8014562:	2800      	cmp	r0, #0
 8014564:	d0eb      	beq.n	801453e <GUI__DispStringInRect+0xfa>
 8014566:	f1bb 0f08 	cmp.w	fp, #8
 801456a:	d009      	beq.n	8014580 <GUI__DispStringInRect+0x13c>
 801456c:	f1bb 0f0c 	cmp.w	fp, #12
 8014570:	d00d      	beq.n	801458e <GUI__DispStringInRect+0x14a>
 8014572:	f1bb 0f04 	cmp.w	fp, #4
 8014576:	d003      	beq.n	8014580 <GUI__DispStringInRect+0x13c>
 8014578:	f8cd a004 	str.w	sl, [sp, #4]
 801457c:	2600      	movs	r6, #0
 801457e:	e77f      	b.n	8014480 <GUI__DispStringInRect+0x3c>
 8014580:	fb06 f609 	mul.w	r6, r6, r9
 8014584:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014588:	1b9e      	subs	r6, r3, r6
 801458a:	3601      	adds	r6, #1
 801458c:	e772      	b.n	8014474 <GUI__DispStringInRect+0x30>
 801458e:	fb06 f609 	mul.w	r6, r6, r9
 8014592:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8014596:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801459a:	1a52      	subs	r2, r2, r1
 801459c:	1c53      	adds	r3, r2, #1
 801459e:	1b9b      	subs	r3, r3, r6
 80145a0:	bf48      	it	mi
 80145a2:	3301      	addmi	r3, #1
 80145a4:	eb01 0663 	add.w	r6, r1, r3, asr #1
 80145a8:	e764      	b.n	8014474 <GUI__DispStringInRect+0x30>
 80145aa:	a804      	add	r0, sp, #16
 80145ac:	f7fe ff8a 	bl	80134c4 <GUI_GetClientRect>
 80145b0:	e75b      	b.n	801446a <GUI__DispStringInRect+0x26>
 80145b2:	f1bb 0f08 	cmp.w	fp, #8
 80145b6:	d005      	beq.n	80145c4 <GUI__DispStringInRect+0x180>
 80145b8:	f1bb 0f0c 	cmp.w	fp, #12
 80145bc:	d004      	beq.n	80145c8 <GUI__DispStringInRect+0x184>
 80145be:	f1bb 0f04 	cmp.w	fp, #4
 80145c2:	d1b2      	bne.n	801452a <GUI__DispStringInRect+0xe6>
 80145c4:	2600      	movs	r6, #0
 80145c6:	e7dd      	b.n	8014584 <GUI__DispStringInRect+0x140>
 80145c8:	462e      	mov	r6, r5
 80145ca:	e7e2      	b.n	8014592 <GUI__DispStringInRect+0x14e>
 80145cc:	20000018 	.word	0x20000018

080145d0 <GUI_DispStringInRectMax>:
 80145d0:	b330      	cbz	r0, 8014620 <GUI_DispStringInRectMax+0x50>
 80145d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d6:	460c      	mov	r4, r1
 80145d8:	b082      	sub	sp, #8
 80145da:	4605      	mov	r5, r0
 80145dc:	461f      	mov	r7, r3
 80145de:	4616      	mov	r6, r2
 80145e0:	f003 fbaa 	bl	8017d38 <GUI_Lock>
 80145e4:	b1d4      	cbz	r4, 801461c <GUI_DispStringInRectMax+0x4c>
 80145e6:	4620      	mov	r0, r4
 80145e8:	f00c fbee 	bl	8020dc8 <WM_SetUserClipRect>
 80145ec:	4680      	mov	r8, r0
 80145ee:	b138      	cbz	r0, 8014600 <GUI_DispStringInRectMax+0x30>
 80145f0:	4602      	mov	r2, r0
 80145f2:	4621      	mov	r1, r4
 80145f4:	4668      	mov	r0, sp
 80145f6:	f004 fd6f 	bl	80190d8 <GUI__IntersectRects>
 80145fa:	4668      	mov	r0, sp
 80145fc:	f00c fbe4 	bl	8020dc8 <WM_SetUserClipRect>
 8014600:	463b      	mov	r3, r7
 8014602:	4632      	mov	r2, r6
 8014604:	4621      	mov	r1, r4
 8014606:	4628      	mov	r0, r5
 8014608:	f7ff ff1c 	bl	8014444 <GUI__DispStringInRect>
 801460c:	4640      	mov	r0, r8
 801460e:	f00c fbdb 	bl	8020dc8 <WM_SetUserClipRect>
 8014612:	f003 fb87 	bl	8017d24 <GUI_Unlock>
 8014616:	b002      	add	sp, #8
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	46a0      	mov	r8, r4
 801461e:	e7ef      	b.n	8014600 <GUI_DispStringInRectMax+0x30>
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop

08014624 <GUI_WrapGetNumLines>:
 8014624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014626:	4604      	mov	r4, r0
 8014628:	460f      	mov	r7, r1
 801462a:	4616      	mov	r6, r2
 801462c:	f003 fb84 	bl	8017d38 <GUI_Lock>
 8014630:	4639      	mov	r1, r7
 8014632:	4620      	mov	r0, r4
 8014634:	4632      	mov	r2, r6
 8014636:	2500      	movs	r5, #0
 8014638:	f004 ffe2 	bl	8019600 <GUI__WrapGetNumBytesToNextLine>
 801463c:	b140      	cbz	r0, 8014650 <GUI_WrapGetNumLines+0x2c>
 801463e:	4404      	add	r4, r0
 8014640:	4632      	mov	r2, r6
 8014642:	4639      	mov	r1, r7
 8014644:	3501      	adds	r5, #1
 8014646:	4620      	mov	r0, r4
 8014648:	f004 ffda 	bl	8019600 <GUI__WrapGetNumBytesToNextLine>
 801464c:	2800      	cmp	r0, #0
 801464e:	d1f6      	bne.n	801463e <GUI_WrapGetNumLines+0x1a>
 8014650:	f003 fb68 	bl	8017d24 <GUI_Unlock>
 8014654:	4628      	mov	r0, r5
 8014656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014658 <GUI_DispStringInRectWrap>:
 8014658:	b108      	cbz	r0, 801465e <GUI_DispStringInRectWrap+0x6>
 801465a:	f7ff bde3 	b.w	8014224 <GUI_DispStringInRectWrap.part.1>
 801465e:	4770      	bx	lr

08014660 <GUI_GetStringDistX>:
 8014660:	b510      	push	{r4, lr}
 8014662:	4604      	mov	r4, r0
 8014664:	f003 fcaa 	bl	8017fbc <GUI__GetNumChars>
 8014668:	4601      	mov	r1, r0
 801466a:	4620      	mov	r0, r4
 801466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014670:	f00d beba 	b.w	80223e8 <GUI__GetLineDistX>

08014674 <GUI_DispStringInRectEx>:
 8014674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014678:	b085      	sub	sp, #20
 801467a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801467c:	2d00      	cmp	r5, #0
 801467e:	d04f      	beq.n	8014720 <GUI_DispStringInRectEx+0xac>
 8014680:	460c      	mov	r4, r1
 8014682:	469b      	mov	fp, r3
 8014684:	2300      	movs	r3, #0
 8014686:	4681      	mov	r9, r0
 8014688:	4692      	mov	sl, r2
 801468a:	9303      	str	r3, [sp, #12]
 801468c:	9302      	str	r3, [sp, #8]
 801468e:	f003 fb53 	bl	8017d38 <GUI_Lock>
 8014692:	2c00      	cmp	r4, #0
 8014694:	d03e      	beq.n	8014714 <GUI_DispStringInRectEx+0xa0>
 8014696:	aa02      	add	r2, sp, #8
 8014698:	6820      	ldr	r0, [r4, #0]
 801469a:	6861      	ldr	r1, [r4, #4]
 801469c:	4613      	mov	r3, r2
 801469e:	c203      	stmia	r2!, {r0, r1}
 80146a0:	4a22      	ldr	r2, [pc, #136]	; (801472c <GUI_DispStringInRectEx+0xb8>)
 80146a2:	cb03      	ldmia	r3!, {r0, r1}
 80146a4:	6010      	str	r0, [r2, #0]
 80146a6:	4620      	mov	r0, r4
 80146a8:	6051      	str	r1, [r2, #4]
 80146aa:	f00c fb8d 	bl	8020dc8 <WM_SetUserClipRect>
 80146ae:	4605      	mov	r5, r0
 80146b0:	b138      	cbz	r0, 80146c2 <GUI_DispStringInRectEx+0x4e>
 80146b2:	4602      	mov	r2, r0
 80146b4:	4621      	mov	r1, r4
 80146b6:	4668      	mov	r0, sp
 80146b8:	f004 fd0e 	bl	80190d8 <GUI__IntersectRects>
 80146bc:	4668      	mov	r0, sp
 80146be:	f00c fb83 	bl	8020dc8 <WM_SetUserClipRect>
 80146c2:	4f1b      	ldr	r7, [pc, #108]	; (8014730 <GUI_DispStringInRectEx+0xbc>)
 80146c4:	f003 fb38 	bl	8017d38 <GUI_Lock>
 80146c8:	f04f 0800 	mov.w	r8, #0
 80146cc:	4c19      	ldr	r4, [pc, #100]	; (8014734 <GUI_DispStringInRectEx+0xc0>)
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	6826      	ldr	r6, [r4, #0]
 80146d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80146d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146d8:	6023      	str	r3, [r4, #0]
 80146da:	f003 fb23 	bl	8017d24 <GUI_Unlock>
 80146de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146e0:	a802      	add	r0, sp, #8
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	4798      	blx	r3
 80146e6:	465b      	mov	r3, fp
 80146e8:	4652      	mov	r2, sl
 80146ea:	a902      	add	r1, sp, #8
 80146ec:	4648      	mov	r0, r9
 80146ee:	f7ff fea9 	bl	8014444 <GUI__DispStringInRect>
 80146f2:	4628      	mov	r0, r5
 80146f4:	f00c fb68 	bl	8020dc8 <WM_SetUserClipRect>
 80146f8:	f003 fb1e 	bl	8017d38 <GUI_Lock>
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	b15e      	cbz	r6, 8014718 <GUI_DispStringInRectEx+0xa4>
 8014700:	f8c3 8014 	str.w	r8, [r3, #20]
 8014704:	6026      	str	r6, [r4, #0]
 8014706:	f003 fb0d 	bl	8017d24 <GUI_Unlock>
 801470a:	f003 fb0b 	bl	8017d24 <GUI_Unlock>
 801470e:	b005      	add	sp, #20
 8014710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014714:	4625      	mov	r5, r4
 8014716:	e7d4      	b.n	80146c2 <GUI_DispStringInRectEx+0x4e>
 8014718:	f103 0208 	add.w	r2, r3, #8
 801471c:	615a      	str	r2, [r3, #20]
 801471e:	e7f1      	b.n	8014704 <GUI_DispStringInRectEx+0x90>
 8014720:	f7ff ff56 	bl	80145d0 <GUI_DispStringInRectMax>
 8014724:	b005      	add	sp, #20
 8014726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801472a:	bf00      	nop
 801472c:	200467e0 	.word	0x200467e0
 8014730:	20000018 	.word	0x20000018
 8014734:	2004678c 	.word	0x2004678c

08014738 <GUI_DrawGradientV>:
 8014738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473c:	b091      	sub	sp, #68	; 0x44
 801473e:	4680      	mov	r8, r0
 8014740:	461e      	mov	r6, r3
 8014742:	460f      	mov	r7, r1
 8014744:	4691      	mov	r9, r2
 8014746:	f003 faf7 	bl	8017d38 <GUI_Lock>
 801474a:	4b67      	ldr	r3, [pc, #412]	; (80148e8 <GUI_DrawGradientV+0x1b0>)
 801474c:	a80e      	add	r0, sp, #56	; 0x38
 801474e:	681c      	ldr	r4, [r3, #0]
 8014750:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8014752:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8014754:	eb05 0308 	add.w	r3, r5, r8
 8014758:	eb05 0209 	add.w	r2, r5, r9
 801475c:	19e1      	adds	r1, r4, r7
 801475e:	4434      	add	r4, r6
 8014760:	9307      	str	r3, [sp, #28]
 8014762:	9208      	str	r2, [sp, #32]
 8014764:	9102      	str	r1, [sp, #8]
 8014766:	9401      	str	r4, [sp, #4]
 8014768:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801476c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8014770:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 8014774:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8014778:	f00b fdb6 	bl	80202e8 <WM__InitIVRSearch>
 801477c:	2800      	cmp	r0, #0
 801477e:	f000 8097 	beq.w	80148b0 <GUI_DrawGradientV+0x178>
 8014782:	9b01      	ldr	r3, [sp, #4]
 8014784:	9a02      	ldr	r2, [sp, #8]
 8014786:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014788:	ebc2 0b03 	rsb	fp, r2, r3
 801478c:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8014790:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014794:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014796:	f1bb 0f00 	cmp.w	fp, #0
 801479a:	465b      	mov	r3, fp
 801479c:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80147a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80147a2:	bfb8      	it	lt
 80147a4:	f10b 0301 	addlt.w	r3, fp, #1
 80147a8:	fb0b fe02 	mul.w	lr, fp, r2
 80147ac:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80147b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80147b2:	105b      	asrs	r3, r3, #1
 80147b4:	f89d c06c 	ldrb.w	ip, [sp, #108]	; 0x6c
 80147b8:	f3c1 4607 	ubfx	r6, r1, #16, #8
 80147bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80147be:	eb03 050e 	add.w	r5, r3, lr
 80147c2:	0e09      	lsrs	r1, r1, #24
 80147c4:	950a      	str	r5, [sp, #40]	; 0x28
 80147c6:	fb0b 3504 	mla	r5, fp, r4, r3
 80147ca:	1b3c      	subs	r4, r7, r4
 80147cc:	9403      	str	r4, [sp, #12]
 80147ce:	fb0b 3400 	mla	r4, fp, r0, r3
 80147d2:	1a30      	subs	r0, r6, r0
 80147d4:	fb0b 3301 	mla	r3, fp, r1, r3
 80147d8:	465e      	mov	r6, fp
 80147da:	950b      	str	r5, [sp, #44]	; 0x2c
 80147dc:	930d      	str	r3, [sp, #52]	; 0x34
 80147de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80147e0:	940c      	str	r4, [sp, #48]	; 0x30
 80147e2:	ebc1 6313 	rsb	r3, r1, r3, lsr #24
 80147e6:	9004      	str	r0, [sp, #16]
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	ebc2 030c 	rsb	r3, r2, ip
 80147ee:	9306      	str	r3, [sp, #24]
 80147f0:	f7fe fe78 	bl	80134e4 <GUI_GetColor>
 80147f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80147f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80147f8:	9009      	str	r0, [sp, #36]	; 0x24
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d069      	beq.n	80148d2 <GUI_DrawGradientV+0x19a>
 80147fe:	2e00      	cmp	r6, #0
 8014800:	d052      	beq.n	80148a8 <GUI_DrawGradientV+0x170>
 8014802:	9d02      	ldr	r5, [sp, #8]
 8014804:	9a01      	ldr	r2, [sp, #4]
 8014806:	4295      	cmp	r5, r2
 8014808:	dc5b      	bgt.n	80148c2 <GUI_DrawGradientV+0x18a>
 801480a:	af0a      	add	r7, sp, #40	; 0x28
 801480c:	4686      	mov	lr, r0
 801480e:	f04f 0b01 	mov.w	fp, #1
 8014812:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 8014816:	e006      	b.n	8014826 <GUI_DrawGradientV+0xee>
 8014818:	f10b 0b01 	add.w	fp, fp, #1
 801481c:	3501      	adds	r5, #1
 801481e:	9b01      	ldr	r3, [sp, #4]
 8014820:	46a6      	mov	lr, r4
 8014822:	42ab      	cmp	r3, r5
 8014824:	db2f      	blt.n	8014886 <GUI_DrawGradientV+0x14e>
 8014826:	4670      	mov	r0, lr
 8014828:	fb9a f4f6 	sdiv	r4, sl, r6
 801482c:	fb99 f1f6 	sdiv	r1, r9, r6
 8014830:	fb97 f3f6 	sdiv	r3, r7, r6
 8014834:	fb98 fcf6 	sdiv	ip, r8, r6
 8014838:	0622      	lsls	r2, r4, #24
 801483a:	9c05      	ldr	r4, [sp, #20]
 801483c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8014840:	44a2      	add	sl, r4
 8014842:	ea42 4401 	orr.w	r4, r2, r1, lsl #16
 8014846:	9a04      	ldr	r2, [sp, #16]
 8014848:	431c      	orrs	r4, r3
 801484a:	9b02      	ldr	r3, [sp, #8]
 801484c:	4491      	add	r9, r2
 801484e:	9a06      	ldr	r2, [sp, #24]
 8014850:	42ab      	cmp	r3, r5
 8014852:	4417      	add	r7, r2
 8014854:	9a03      	ldr	r2, [sp, #12]
 8014856:	4490      	add	r8, r2
 8014858:	dae0      	bge.n	801481c <GUI_DrawGradientV+0xe4>
 801485a:	4574      	cmp	r4, lr
 801485c:	d0dc      	beq.n	8014818 <GUI_DrawGradientV+0xe0>
 801485e:	f005 fb9d 	bl	8019f9c <LCD_SetColor>
 8014862:	f1bb 0f01 	cmp.w	fp, #1
 8014866:	ebcb 0105 	rsb	r1, fp, r5
 801486a:	f105 33ff 	add.w	r3, r5, #4294967295
 801486e:	9a08      	ldr	r2, [sp, #32]
 8014870:	9807      	ldr	r0, [sp, #28]
 8014872:	d022      	beq.n	80148ba <GUI_DrawGradientV+0x182>
 8014874:	f004 fffe 	bl	8019874 <LCD_FillRect>
 8014878:	3501      	adds	r5, #1
 801487a:	9b01      	ldr	r3, [sp, #4]
 801487c:	f04f 0b01 	mov.w	fp, #1
 8014880:	46a6      	mov	lr, r4
 8014882:	42ab      	cmp	r3, r5
 8014884:	dacf      	bge.n	8014826 <GUI_DrawGradientV+0xee>
 8014886:	4620      	mov	r0, r4
 8014888:	f005 fb88 	bl	8019f9c <LCD_SetColor>
 801488c:	f1bb 0f01 	cmp.w	fp, #1
 8014890:	d019      	beq.n	80148c6 <GUI_DrawGradientV+0x18e>
 8014892:	9b01      	ldr	r3, [sp, #4]
 8014894:	9a08      	ldr	r2, [sp, #32]
 8014896:	ebcb 0103 	rsb	r1, fp, r3
 801489a:	9807      	ldr	r0, [sp, #28]
 801489c:	3101      	adds	r1, #1
 801489e:	f004 ffe9 	bl	8019874 <LCD_FillRect>
 80148a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148a4:	f005 fb7a 	bl	8019f9c <LCD_SetColor>
 80148a8:	f00b fbf4 	bl	8020094 <WM__GetNextIVR>
 80148ac:	2800      	cmp	r0, #0
 80148ae:	d19f      	bne.n	80147f0 <GUI_DrawGradientV+0xb8>
 80148b0:	f003 fa38 	bl	8017d24 <GUI_Unlock>
 80148b4:	b011      	add	sp, #68	; 0x44
 80148b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ba:	1e69      	subs	r1, r5, #1
 80148bc:	f004 ff8a 	bl	80197d4 <LCD_DrawHLine>
 80148c0:	e7ac      	b.n	801481c <GUI_DrawGradientV+0xe4>
 80148c2:	f005 fb6b 	bl	8019f9c <LCD_SetColor>
 80148c6:	9a08      	ldr	r2, [sp, #32]
 80148c8:	9901      	ldr	r1, [sp, #4]
 80148ca:	9807      	ldr	r0, [sp, #28]
 80148cc:	f004 ff82 	bl	80197d4 <LCD_DrawHLine>
 80148d0:	e7e7      	b.n	80148a2 <GUI_DrawGradientV+0x16a>
 80148d2:	4618      	mov	r0, r3
 80148d4:	f005 fb62 	bl	8019f9c <LCD_SetColor>
 80148d8:	9b01      	ldr	r3, [sp, #4]
 80148da:	9a08      	ldr	r2, [sp, #32]
 80148dc:	9902      	ldr	r1, [sp, #8]
 80148de:	9807      	ldr	r0, [sp, #28]
 80148e0:	f004 ffc8 	bl	8019874 <LCD_FillRect>
 80148e4:	e7dd      	b.n	80148a2 <GUI_DrawGradientV+0x16a>
 80148e6:	bf00      	nop
 80148e8:	20000018 	.word	0x20000018

080148ec <GUI_DrawGraph>:
 80148ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148f0:	b085      	sub	sp, #20
 80148f2:	461c      	mov	r4, r3
 80148f4:	4616      	mov	r6, r2
 80148f6:	9003      	str	r0, [sp, #12]
 80148f8:	9101      	str	r1, [sp, #4]
 80148fa:	f003 fa1d 	bl	8017d38 <GUI_Lock>
 80148fe:	4b40      	ldr	r3, [pc, #256]	; (8014a00 <GUI_DrawGraph+0x114>)
 8014900:	2000      	movs	r0, #0
 8014902:	6819      	ldr	r1, [r3, #0]
 8014904:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 8014906:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8014908:	f00b fcee 	bl	80202e8 <WM__InitIVRSearch>
 801490c:	2800      	cmp	r0, #0
 801490e:	d05f      	beq.n	80149d0 <GUI_DrawGraph+0xe4>
 8014910:	eb07 0b06 	add.w	fp, r7, r6
 8014914:	eb05 0a04 	add.w	sl, r5, r4
 8014918:	4b39      	ldr	r3, [pc, #228]	; (8014a00 <GUI_DrawGraph+0x114>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	6959      	ldr	r1, [r3, #20]
 801491e:	2900      	cmp	r1, #0
 8014920:	d067      	beq.n	80149f2 <GUI_DrawGraph+0x106>
 8014922:	9801      	ldr	r0, [sp, #4]
 8014924:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014928:	4458      	add	r0, fp
 801492a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801492e:	45ab      	cmp	fp, r5
 8014930:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8014934:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014938:	f100 31ff 	add.w	r1, r0, #4294967295
 801493c:	bfb4      	ite	lt
 801493e:	ebcb 0205 	rsblt	r2, fp, r5
 8014942:	2200      	movge	r2, #0
 8014944:	42b9      	cmp	r1, r7
 8014946:	dd52      	ble.n	80149ee <GUI_DrawGraph+0x102>
 8014948:	ebcb 0707 	rsb	r7, fp, r7
 801494c:	3701      	adds	r7, #1
 801494e:	4297      	cmp	r7, r2
 8014950:	dd3a      	ble.n	80149c8 <GUI_DrawGraph+0xdc>
 8014952:	9803      	ldr	r0, [sp, #12]
 8014954:	1c51      	adds	r1, r2, #1
 8014956:	f930 e012 	ldrsh.w	lr, [r0, r2, lsl #1]
 801495a:	428f      	cmp	r7, r1
 801495c:	eb00 0642 	add.w	r6, r0, r2, lsl #1
 8014960:	44d6      	add	lr, sl
 8014962:	dd31      	ble.n	80149c8 <GUI_DrawGraph+0xdc>
 8014964:	f10b 0501 	add.w	r5, fp, #1
 8014968:	445f      	add	r7, fp
 801496a:	f8cd b008 	str.w	fp, [sp, #8]
 801496e:	469b      	mov	fp, r3
 8014970:	4415      	add	r5, r2
 8014972:	e005      	b.n	8014980 <GUI_DrawGraph+0x94>
 8014974:	4544      	cmp	r4, r8
 8014976:	da08      	bge.n	801498a <GUI_DrawGraph+0x9e>
 8014978:	3501      	adds	r5, #1
 801497a:	46a6      	mov	lr, r4
 801497c:	42af      	cmp	r7, r5
 801497e:	d021      	beq.n	80149c4 <GUI_DrawGraph+0xd8>
 8014980:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
 8014984:	45c6      	cmp	lr, r8
 8014986:	4454      	add	r4, sl
 8014988:	dbf4      	blt.n	8014974 <GUI_DrawGraph+0x88>
 801498a:	45de      	cmp	lr, fp
 801498c:	dd01      	ble.n	8014992 <GUI_DrawGraph+0xa6>
 801498e:	455c      	cmp	r4, fp
 8014990:	dcf2      	bgt.n	8014978 <GUI_DrawGraph+0x8c>
 8014992:	eb14 090e 	adds.w	r9, r4, lr
 8014996:	4671      	mov	r1, lr
 8014998:	f105 30ff 	add.w	r0, r5, #4294967295
 801499c:	4672      	mov	r2, lr
 801499e:	bf48      	it	mi
 80149a0:	f109 0901 	addmi.w	r9, r9, #1
 80149a4:	4574      	cmp	r4, lr
 80149a6:	ea4f 0969 	mov.w	r9, r9, asr #1
 80149aa:	db16      	blt.n	80149da <GUI_DrawGraph+0xee>
 80149ac:	464a      	mov	r2, r9
 80149ae:	f004 ff39 	bl	8019824 <LCD_DrawVLine>
 80149b2:	4628      	mov	r0, r5
 80149b4:	3501      	adds	r5, #1
 80149b6:	4622      	mov	r2, r4
 80149b8:	4649      	mov	r1, r9
 80149ba:	f004 ff33 	bl	8019824 <LCD_DrawVLine>
 80149be:	42af      	cmp	r7, r5
 80149c0:	46a6      	mov	lr, r4
 80149c2:	d1dd      	bne.n	8014980 <GUI_DrawGraph+0x94>
 80149c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80149c8:	f00b fb64 	bl	8020094 <WM__GetNextIVR>
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d1a3      	bne.n	8014918 <GUI_DrawGraph+0x2c>
 80149d0:	b005      	add	sp, #20
 80149d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d6:	f003 b9a5 	b.w	8017d24 <GUI_Unlock>
 80149da:	4649      	mov	r1, r9
 80149dc:	1e68      	subs	r0, r5, #1
 80149de:	f004 ff21 	bl	8019824 <LCD_DrawVLine>
 80149e2:	464a      	mov	r2, r9
 80149e4:	4621      	mov	r1, r4
 80149e6:	4628      	mov	r0, r5
 80149e8:	f004 ff1c 	bl	8019824 <LCD_DrawVLine>
 80149ec:	e7c4      	b.n	8014978 <GUI_DrawGraph+0x8c>
 80149ee:	9f01      	ldr	r7, [sp, #4]
 80149f0:	e7ad      	b.n	801494e <GUI_DrawGraph+0x62>
 80149f2:	f04f 33ff 	mov.w	r3, #4294967295
 80149f6:	460a      	mov	r2, r1
 80149f8:	9f01      	ldr	r7, [sp, #4]
 80149fa:	4698      	mov	r8, r3
 80149fc:	e7a7      	b.n	801494e <GUI_DrawGraph+0x62>
 80149fe:	bf00      	nop
 8014a00:	20000018 	.word	0x20000018

08014a04 <GUI_DrawHLine>:
 8014a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a06:	4f14      	ldr	r7, [pc, #80]	; (8014a58 <GUI_DrawHLine+0x54>)
 8014a08:	b083      	sub	sp, #12
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460d      	mov	r5, r1
 8014a0e:	4614      	mov	r4, r2
 8014a10:	f003 f992 	bl	8017d38 <GUI_Lock>
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	4668      	mov	r0, sp
 8014a18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8014a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a1c:	440e      	add	r6, r1
 8014a1e:	4415      	add	r5, r2
 8014a20:	4414      	add	r4, r2
 8014a22:	b233      	sxth	r3, r6
 8014a24:	f8ad 5000 	strh.w	r5, [sp]
 8014a28:	f8ad 4004 	strh.w	r4, [sp, #4]
 8014a2c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014a30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014a34:	f00b fc58 	bl	80202e8 <WM__InitIVRSearch>
 8014a38:	b150      	cbz	r0, 8014a50 <GUI_DrawHLine+0x4c>
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	4622      	mov	r2, r4
 8014a3e:	4631      	mov	r1, r6
 8014a40:	4628      	mov	r0, r5
 8014a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	4798      	blx	r3
 8014a48:	f00b fb24 	bl	8020094 <WM__GetNextIVR>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	d1f4      	bne.n	8014a3a <GUI_DrawHLine+0x36>
 8014a50:	f003 f968 	bl	8017d24 <GUI_Unlock>
 8014a54:	b003      	add	sp, #12
 8014a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a58:	20000018 	.word	0x20000018

08014a5c <GUI_DrawPie>:
 8014a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a60:	b082      	sub	sp, #8
 8014a62:	4605      	mov	r5, r0
 8014a64:	4698      	mov	r8, r3
 8014a66:	460f      	mov	r7, r1
 8014a68:	4614      	mov	r4, r2
 8014a6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8014a6e:	f003 f963 	bl	8017d38 <GUI_Lock>
 8014a72:	4b14      	ldr	r3, [pc, #80]	; (8014ac4 <GUI_DrawPie+0x68>)
 8014a74:	2000      	movs	r0, #0
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8014a7a:	f8d3 a050 	ldr.w	sl, [r3, #80]	; 0x50
 8014a7e:	f00b fc33 	bl	80202e8 <WM__InitIVRSearch>
 8014a82:	b1c8      	cbz	r0, 8014ab8 <GUI_DrawPie+0x5c>
 8014a84:	4457      	add	r7, sl
 8014a86:	442e      	add	r6, r5
 8014a88:	fa5f fa84 	uxtb.w	sl, r4
 8014a8c:	0864      	lsrs	r4, r4, #1
 8014a8e:	f7fe fe5f 	bl	8013750 <GUI_GetPenSize>
 8014a92:	4605      	mov	r5, r0
 8014a94:	4650      	mov	r0, sl
 8014a96:	f7fe fe67 	bl	8013768 <GUI_SetPenSize>
 8014a9a:	4623      	mov	r3, r4
 8014a9c:	4622      	mov	r2, r4
 8014a9e:	4639      	mov	r1, r7
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	e88d 0300 	stmia.w	sp, {r8, r9}
 8014aa6:	f00d fb47 	bl	8022138 <GL_DrawArc>
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f7fe fe5c 	bl	8013768 <GUI_SetPenSize>
 8014ab0:	f00b faf0 	bl	8020094 <WM__GetNextIVR>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d1ea      	bne.n	8014a8e <GUI_DrawPie+0x32>
 8014ab8:	b002      	add	sp, #8
 8014aba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014abe:	f003 b931 	b.w	8017d24 <GUI_Unlock>
 8014ac2:	bf00      	nop
 8014ac4:	20000018 	.word	0x20000018

08014ac8 <GUI_DrawPixel>:
 8014ac8:	b570      	push	{r4, r5, r6, lr}
 8014aca:	4e13      	ldr	r6, [pc, #76]	; (8014b18 <GUI_DrawPixel+0x50>)
 8014acc:	b082      	sub	sp, #8
 8014ace:	4605      	mov	r5, r0
 8014ad0:	460c      	mov	r4, r1
 8014ad2:	f003 f931 	bl	8017d38 <GUI_Lock>
 8014ad6:	6833      	ldr	r3, [r6, #0]
 8014ad8:	4668      	mov	r0, sp
 8014ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ade:	4415      	add	r5, r2
 8014ae0:	441c      	add	r4, r3
 8014ae2:	b22a      	sxth	r2, r5
 8014ae4:	b223      	sxth	r3, r4
 8014ae6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014aea:	f8ad 2000 	strh.w	r2, [sp]
 8014aee:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014af2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014af6:	f00b fbf7 	bl	80202e8 <WM__InitIVRSearch>
 8014afa:	b148      	cbz	r0, 8014b10 <GUI_DrawPixel+0x48>
 8014afc:	6833      	ldr	r3, [r6, #0]
 8014afe:	4621      	mov	r1, r4
 8014b00:	4628      	mov	r0, r5
 8014b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	4798      	blx	r3
 8014b08:	f00b fac4 	bl	8020094 <WM__GetNextIVR>
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d1f5      	bne.n	8014afc <GUI_DrawPixel+0x34>
 8014b10:	f003 f908 	bl	8017d24 <GUI_Unlock>
 8014b14:	b002      	add	sp, #8
 8014b16:	bd70      	pop	{r4, r5, r6, pc}
 8014b18:	20000018 	.word	0x20000018

08014b1c <GL_DrawPoint>:
 8014b1c:	4b06      	ldr	r3, [pc, #24]	; (8014b38 <GL_DrawPoint+0x1c>)
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	7e13      	ldrb	r3, [r2, #24]
 8014b22:	2b01      	cmp	r3, #1
 8014b24:	d005      	beq.n	8014b32 <GL_DrawPoint+0x16>
 8014b26:	1e5a      	subs	r2, r3, #1
 8014b28:	bf48      	it	mi
 8014b2a:	461a      	movmi	r2, r3
 8014b2c:	1052      	asrs	r2, r2, #1
 8014b2e:	f7fe ba9b 	b.w	8013068 <GL_FillCircle>
 8014b32:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	4718      	bx	r3
 8014b38:	20000018 	.word	0x20000018

08014b3c <GUI_DrawVLine>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	4606      	mov	r6, r0
 8014b42:	4614      	mov	r4, r2
 8014b44:	460d      	mov	r5, r1
 8014b46:	f003 f8f7 	bl	8017d38 <GUI_Lock>
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <GUI_DrawVLine+0x50>)
 8014b4c:	4668      	mov	r0, sp
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014b52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8014b54:	441e      	add	r6, r3
 8014b56:	4415      	add	r5, r2
 8014b58:	4414      	add	r4, r2
 8014b5a:	b233      	sxth	r3, r6
 8014b5c:	f8ad 5002 	strh.w	r5, [sp, #2]
 8014b60:	f8ad 4006 	strh.w	r4, [sp, #6]
 8014b64:	f8ad 3000 	strh.w	r3, [sp]
 8014b68:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014b6c:	f00b fbbc 	bl	80202e8 <WM__InitIVRSearch>
 8014b70:	b140      	cbz	r0, 8014b84 <GUI_DrawVLine+0x48>
 8014b72:	4622      	mov	r2, r4
 8014b74:	4629      	mov	r1, r5
 8014b76:	4630      	mov	r0, r6
 8014b78:	f004 fe54 	bl	8019824 <LCD_DrawVLine>
 8014b7c:	f00b fa8a 	bl	8020094 <WM__GetNextIVR>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d1f6      	bne.n	8014b72 <GUI_DrawVLine+0x36>
 8014b84:	f003 f8ce 	bl	8017d24 <GUI_Unlock>
 8014b88:	b002      	add	sp, #8
 8014b8a:	bd70      	pop	{r4, r5, r6, pc}
 8014b8c:	20000018 	.word	0x20000018

08014b90 <GUI_FillRect>:
 8014b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b92:	b083      	sub	sp, #12
 8014b94:	4607      	mov	r7, r0
 8014b96:	4616      	mov	r6, r2
 8014b98:	461c      	mov	r4, r3
 8014b9a:	460d      	mov	r5, r1
 8014b9c:	f003 f8cc 	bl	8017d38 <GUI_Lock>
 8014ba0:	4b10      	ldr	r3, [pc, #64]	; (8014be4 <GUI_FillRect+0x54>)
 8014ba2:	4668      	mov	r0, sp
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014baa:	4417      	add	r7, r2
 8014bac:	4416      	add	r6, r2
 8014bae:	441d      	add	r5, r3
 8014bb0:	441c      	add	r4, r3
 8014bb2:	f8ad 7000 	strh.w	r7, [sp]
 8014bb6:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014bba:	f8ad 5002 	strh.w	r5, [sp, #2]
 8014bbe:	f8ad 4006 	strh.w	r4, [sp, #6]
 8014bc2:	f00b fb91 	bl	80202e8 <WM__InitIVRSearch>
 8014bc6:	b148      	cbz	r0, 8014bdc <GUI_FillRect+0x4c>
 8014bc8:	4623      	mov	r3, r4
 8014bca:	4632      	mov	r2, r6
 8014bcc:	4629      	mov	r1, r5
 8014bce:	4638      	mov	r0, r7
 8014bd0:	f004 fe50 	bl	8019874 <LCD_FillRect>
 8014bd4:	f00b fa5e 	bl	8020094 <WM__GetNextIVR>
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d1f5      	bne.n	8014bc8 <GUI_FillRect+0x38>
 8014bdc:	f003 f8a2 	bl	8017d24 <GUI_Unlock>
 8014be0:	b003      	add	sp, #12
 8014be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be4:	20000018 	.word	0x20000018

08014be8 <GL_DrawLine1Ex>:
 8014be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bec:	1a16      	subs	r6, r2, r0
 8014bee:	1a5d      	subs	r5, r3, r1
 8014bf0:	b085      	sub	sp, #20
 8014bf2:	469e      	mov	lr, r3
 8014bf4:	ea56 0305 	orrs.w	r3, r6, r5
 8014bf8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8014bfc:	d079      	beq.n	8014cf2 <GL_DrawLine1Ex+0x10a>
 8014bfe:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 8014c02:	4607      	mov	r7, r0
 8014c04:	ea85 74e5 	eor.w	r4, r5, r5, asr #31
 8014c08:	4689      	mov	r9, r1
 8014c0a:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 8014c0e:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
 8014c12:	429c      	cmp	r4, r3
 8014c14:	dc2f      	bgt.n	8014c76 <GL_DrawLine1Ex+0x8e>
 8014c16:	461c      	mov	r4, r3
 8014c18:	2300      	movs	r3, #0
 8014c1a:	42a6      	cmp	r6, r4
 8014c1c:	9301      	str	r3, [sp, #4]
 8014c1e:	d038      	beq.n	8014c92 <GL_DrawLine1Ex+0xaa>
 8014c20:	4639      	mov	r1, r7
 8014c22:	f04f 33ff 	mov.w	r3, #4294967295
 8014c26:	426d      	negs	r5, r5
 8014c28:	4617      	mov	r7, r2
 8014c2a:	4274      	negs	r4, r6
 8014c2c:	460a      	mov	r2, r1
 8014c2e:	46f1      	mov	r9, lr
 8014c30:	9303      	str	r3, [sp, #12]
 8014c32:	f8db 1000 	ldr.w	r1, [fp]
 8014c36:	bb95      	cbnz	r5, 8014c9e <GL_DrawLine1Ex+0xb6>
 8014c38:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8014f48 <GL_DrawLine1Ex+0x360>
 8014c3c:	4608      	mov	r0, r1
 8014c3e:	9b01      	ldr	r3, [sp, #4]
 8014c40:	f8d8 e000 	ldr.w	lr, [r8]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 80d1 	beq.w	8014dec <GL_DrawLine1Ex+0x204>
 8014c4a:	f89e 301a 	ldrb.w	r3, [lr, #26]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	f000 81c4 	beq.w	8014fdc <GL_DrawLine1Ex+0x3f4>
 8014c54:	2c00      	cmp	r4, #0
 8014c56:	f2c0 81c8 	blt.w	8014fea <GL_DrawLine1Ex+0x402>
 8014c5a:	46aa      	mov	sl, r5
 8014c5c:	4eb6      	ldr	r6, [pc, #728]	; (8014f38 <GL_DrawLine1Ex+0x350>)
 8014c5e:	4672      	mov	r2, lr
 8014c60:	3b01      	subs	r3, #1
 8014c62:	1c45      	adds	r5, r0, #1
 8014c64:	2b03      	cmp	r3, #3
 8014c66:	f200 8134 	bhi.w	8014ed2 <GL_DrawLine1Ex+0x2ea>
 8014c6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014c6e:	014c      	.short	0x014c
 8014c70:	01580141 	.word	0x01580141
 8014c74:	0121      	.short	0x0121
 8014c76:	463b      	mov	r3, r7
 8014c78:	4630      	mov	r0, r6
 8014c7a:	462e      	mov	r6, r5
 8014c7c:	4611      	mov	r1, r2
 8014c7e:	464f      	mov	r7, r9
 8014c80:	4699      	mov	r9, r3
 8014c82:	42a6      	cmp	r6, r4
 8014c84:	f04f 0301 	mov.w	r3, #1
 8014c88:	4672      	mov	r2, lr
 8014c8a:	4605      	mov	r5, r0
 8014c8c:	468e      	mov	lr, r1
 8014c8e:	9301      	str	r3, [sp, #4]
 8014c90:	d1c6      	bne.n	8014c20 <GL_DrawLine1Ex+0x38>
 8014c92:	2301      	movs	r3, #1
 8014c94:	f8db 1000 	ldr.w	r1, [fp]
 8014c98:	9303      	str	r3, [sp, #12]
 8014c9a:	2d00      	cmp	r5, #0
 8014c9c:	d0cc      	beq.n	8014c38 <GL_DrawLine1Ex+0x50>
 8014c9e:	2c00      	cmp	r4, #0
 8014ca0:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8014f48 <GL_DrawLine1Ex+0x360>
 8014ca4:	4626      	mov	r6, r4
 8014ca6:	f8d8 0000 	ldr.w	r0, [r8]
 8014caa:	bfb8      	it	lt
 8014cac:	1c66      	addlt	r6, r4, #1
 8014cae:	2d00      	cmp	r5, #0
 8014cb0:	ea4f 0666 	mov.w	r6, r6, asr #1
 8014cb4:	7e82      	ldrb	r2, [r0, #26]
 8014cb6:	bfb8      	it	lt
 8014cb8:	4276      	neglt	r6, r6
 8014cba:	b9fa      	cbnz	r2, 8014cfc <GL_DrawLine1Ex+0x114>
 8014cbc:	2c00      	cmp	r4, #0
 8014cbe:	db15      	blt.n	8014cec <GL_DrawLine1Ex+0x104>
 8014cc0:	9b01      	ldr	r3, [sp, #4]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	f000 8151 	beq.w	8014f6a <GL_DrawLine1Ex+0x382>
 8014cc8:	4692      	mov	sl, r2
 8014cca:	4603      	mov	r3, r0
 8014ccc:	e001      	b.n	8014cd2 <GL_DrawLine1Ex+0xea>
 8014cce:	f8d8 3000 	ldr.w	r3, [r8]
 8014cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014cd4:	eb0a 0107 	add.w	r1, sl, r7
 8014cd8:	f10a 0a01 	add.w	sl, sl, #1
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	fb96 f0f4 	sdiv	r0, r6, r4
 8014ce2:	4448      	add	r0, r9
 8014ce4:	442e      	add	r6, r5
 8014ce6:	4798      	blx	r3
 8014ce8:	4554      	cmp	r4, sl
 8014cea:	daf0      	bge.n	8014cce <GL_DrawLine1Ex+0xe6>
 8014cec:	b005      	add	sp, #20
 8014cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf2:	b005      	add	sp, #20
 8014cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf8:	f7ff bf10 	b.w	8014b1c <GL_DrawPoint>
 8014cfc:	1c5a      	adds	r2, r3, #1
 8014cfe:	f000 812c 	beq.w	8014f5a <GL_DrawLine1Ex+0x372>
 8014d02:	2c00      	cmp	r4, #0
 8014d04:	db51      	blt.n	8014daa <GL_DrawLine1Ex+0x1c2>
 8014d06:	f8cd 9008 	str.w	r9, [sp, #8]
 8014d0a:	f04f 0a00 	mov.w	sl, #0
 8014d0e:	46c1      	mov	r9, r8
 8014d10:	4698      	mov	r8, r3
 8014d12:	4441      	add	r1, r8
 8014d14:	f8cb 1000 	str.w	r1, [fp]
 8014d18:	7e82      	ldrb	r2, [r0, #26]
 8014d1a:	3a01      	subs	r2, #1
 8014d1c:	2a03      	cmp	r2, #3
 8014d1e:	d815      	bhi.n	8014d4c <GL_DrawLine1Ex+0x164>
 8014d20:	e8df f002 	tbb	[pc, r2]
 8014d24:	022b4955 	.word	0x022b4955
 8014d28:	4b84      	ldr	r3, [pc, #528]	; (8014f3c <GL_DrawLine1Ex+0x354>)
 8014d2a:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8014d2e:	fb83 3201 	smull	r3, r2, r3, r1
 8014d32:	ebce 02a2 	rsb	r2, lr, r2, asr #2
 8014d36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014d3a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 8014d3e:	2a0b      	cmp	r2, #11
 8014d40:	dd12      	ble.n	8014d68 <GL_DrawLine1Ex+0x180>
 8014d42:	f022 0204 	bic.w	r2, r2, #4
 8014d46:	3a10      	subs	r2, #16
 8014d48:	2a01      	cmp	r2, #1
 8014d4a:	d90d      	bls.n	8014d68 <GL_DrawLine1Ex+0x180>
 8014d4c:	9b02      	ldr	r3, [sp, #8]
 8014d4e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8014d50:	fb96 f1f4 	sdiv	r1, r6, r4
 8014d54:	4419      	add	r1, r3
 8014d56:	9b01      	ldr	r3, [sp, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f040 80f7 	bne.w	8014f4c <GL_DrawLine1Ex+0x364>
 8014d5e:	4638      	mov	r0, r7
 8014d60:	6852      	ldr	r2, [r2, #4]
 8014d62:	4790      	blx	r2
 8014d64:	f8db 1000 	ldr.w	r1, [fp]
 8014d68:	f10a 0a01 	add.w	sl, sl, #1
 8014d6c:	3701      	adds	r7, #1
 8014d6e:	442e      	add	r6, r5
 8014d70:	4554      	cmp	r4, sl
 8014d72:	db15      	blt.n	8014da0 <GL_DrawLine1Ex+0x1b8>
 8014d74:	f8d9 0000 	ldr.w	r0, [r9]
 8014d78:	e7cb      	b.n	8014d12 <GL_DrawLine1Ex+0x12a>
 8014d7a:	4b6f      	ldr	r3, [pc, #444]	; (8014f38 <GL_DrawLine1Ex+0x350>)
 8014d7c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 8014d80:	fb83 3201 	smull	r3, r2, r3, r1
 8014d84:	ebce 02e2 	rsb	r2, lr, r2, asr #3
 8014d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8014d8c:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
 8014d90:	2a0b      	cmp	r2, #11
 8014d92:	dcd8      	bgt.n	8014d46 <GL_DrawLine1Ex+0x15e>
 8014d94:	f10a 0a01 	add.w	sl, sl, #1
 8014d98:	3701      	adds	r7, #1
 8014d9a:	442e      	add	r6, r5
 8014d9c:	4554      	cmp	r4, sl
 8014d9e:	dae9      	bge.n	8014d74 <GL_DrawLine1Ex+0x18c>
 8014da0:	9a03      	ldr	r2, [sp, #12]
 8014da2:	4643      	mov	r3, r8
 8014da4:	3201      	adds	r2, #1
 8014da6:	f000 80de 	beq.w	8014f66 <GL_DrawLine1Ex+0x37e>
 8014daa:	1acb      	subs	r3, r1, r3
 8014dac:	f8cb 3000 	str.w	r3, [fp]
 8014db0:	b005      	add	sp, #20
 8014db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db6:	4a62      	ldr	r2, [pc, #392]	; (8014f40 <GL_DrawLine1Ex+0x358>)
 8014db8:	400a      	ands	r2, r1
 8014dba:	2a00      	cmp	r2, #0
 8014dbc:	f2c0 80e7 	blt.w	8014f8e <GL_DrawLine1Ex+0x3a6>
 8014dc0:	2a01      	cmp	r2, #1
 8014dc2:	bfcc      	ite	gt
 8014dc4:	2200      	movgt	r2, #0
 8014dc6:	2201      	movle	r2, #1
 8014dc8:	2a00      	cmp	r2, #0
 8014dca:	d1cd      	bne.n	8014d68 <GL_DrawLine1Ex+0x180>
 8014dcc:	e7be      	b.n	8014d4c <GL_DrawLine1Ex+0x164>
 8014dce:	f101 0e06 	add.w	lr, r1, #6
 8014dd2:	4a5c      	ldr	r2, [pc, #368]	; (8014f44 <GL_DrawLine1Ex+0x35c>)
 8014dd4:	ea0e 0202 	and.w	r2, lr, r2
 8014dd8:	2a00      	cmp	r2, #0
 8014dda:	f2c0 80dd 	blt.w	8014f98 <GL_DrawLine1Ex+0x3b0>
 8014dde:	2a0b      	cmp	r2, #11
 8014de0:	bfcc      	ite	gt
 8014de2:	2200      	movgt	r2, #0
 8014de4:	2201      	movle	r2, #1
 8014de6:	2a00      	cmp	r2, #0
 8014de8:	d1be      	bne.n	8014d68 <GL_DrawLine1Ex+0x180>
 8014dea:	e7af      	b.n	8014d4c <GL_DrawLine1Ex+0x164>
 8014dec:	f89e 301a 	ldrb.w	r3, [lr, #26]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f000 80ea 	beq.w	8014fca <GL_DrawLine1Ex+0x3e2>
 8014df6:	2c00      	cmp	r4, #0
 8014df8:	f2c0 80f7 	blt.w	8014fea <GL_DrawLine1Ex+0x402>
 8014dfc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014e00:	4672      	mov	r2, lr
 8014e02:	4e4e      	ldr	r6, [pc, #312]	; (8014f3c <GL_DrawLine1Ex+0x354>)
 8014e04:	3b01      	subs	r3, #1
 8014e06:	1c45      	adds	r5, r0, #1
 8014e08:	2b03      	cmp	r3, #3
 8014e0a:	d813      	bhi.n	8014e34 <GL_DrawLine1Ex+0x24c>
 8014e0c:	e8df f003 	tbb	[pc, r3]
 8014e10:	02213743 	.word	0x02213743
 8014e14:	fb86 3100 	smull	r3, r1, r6, r0
 8014e18:	17c3      	asrs	r3, r0, #31
 8014e1a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8014e1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e22:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8014e26:	2b0b      	cmp	r3, #11
 8014e28:	dd0a      	ble.n	8014e40 <GL_DrawLine1Ex+0x258>
 8014e2a:	f023 0304 	bic.w	r3, r3, #4
 8014e2e:	3b10      	subs	r3, #16
 8014e30:	2b01      	cmp	r3, #1
 8014e32:	d905      	bls.n	8014e40 <GL_DrawLine1Ex+0x258>
 8014e34:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8014e36:	4649      	mov	r1, r9
 8014e38:	eb07 000a 	add.w	r0, r7, sl
 8014e3c:	685b      	ldr	r3, [r3, #4]
 8014e3e:	4798      	blx	r3
 8014e40:	f10a 0a01 	add.w	sl, sl, #1
 8014e44:	4554      	cmp	r4, sl
 8014e46:	db14      	blt.n	8014e72 <GL_DrawLine1Ex+0x28a>
 8014e48:	f8d8 2000 	ldr.w	r2, [r8]
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	7e93      	ldrb	r3, [r2, #26]
 8014e50:	e7d8      	b.n	8014e04 <GL_DrawLine1Ex+0x21c>
 8014e52:	4b39      	ldr	r3, [pc, #228]	; (8014f38 <GL_DrawLine1Ex+0x350>)
 8014e54:	fb83 3100 	smull	r3, r1, r3, r0
 8014e58:	17c3      	asrs	r3, r0, #31
 8014e5a:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8014e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e62:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 8014e66:	2b0b      	cmp	r3, #11
 8014e68:	dce1      	bgt.n	8014e2e <GL_DrawLine1Ex+0x246>
 8014e6a:	f10a 0a01 	add.w	sl, sl, #1
 8014e6e:	4554      	cmp	r4, sl
 8014e70:	daea      	bge.n	8014e48 <GL_DrawLine1Ex+0x260>
 8014e72:	1e69      	subs	r1, r5, #1
 8014e74:	f8cb 1000 	str.w	r1, [fp]
 8014e78:	b005      	add	sp, #20
 8014e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e7e:	4b30      	ldr	r3, [pc, #192]	; (8014f40 <GL_DrawLine1Ex+0x358>)
 8014e80:	4003      	ands	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f2c0 8097 	blt.w	8014fb6 <GL_DrawLine1Ex+0x3ce>
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	bfcc      	ite	gt
 8014e8c:	2300      	movgt	r3, #0
 8014e8e:	2301      	movle	r3, #1
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d1d5      	bne.n	8014e40 <GL_DrawLine1Ex+0x258>
 8014e94:	e7ce      	b.n	8014e34 <GL_DrawLine1Ex+0x24c>
 8014e96:	1d69      	adds	r1, r5, #5
 8014e98:	4b2a      	ldr	r3, [pc, #168]	; (8014f44 <GL_DrawLine1Ex+0x35c>)
 8014e9a:	400b      	ands	r3, r1
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f2c0 808f 	blt.w	8014fc0 <GL_DrawLine1Ex+0x3d8>
 8014ea2:	2b0b      	cmp	r3, #11
 8014ea4:	bfcc      	ite	gt
 8014ea6:	2300      	movgt	r3, #0
 8014ea8:	2301      	movle	r3, #1
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d1c8      	bne.n	8014e40 <GL_DrawLine1Ex+0x258>
 8014eae:	e7c1      	b.n	8014e34 <GL_DrawLine1Ex+0x24c>
 8014eb0:	4b22      	ldr	r3, [pc, #136]	; (8014f3c <GL_DrawLine1Ex+0x354>)
 8014eb2:	fb83 3100 	smull	r3, r1, r3, r0
 8014eb6:	17c3      	asrs	r3, r0, #31
 8014eb8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8014ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014ec0:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8014ec4:	2b0b      	cmp	r3, #11
 8014ec6:	dd0a      	ble.n	8014ede <GL_DrawLine1Ex+0x2f6>
 8014ec8:	f023 0304 	bic.w	r3, r3, #4
 8014ecc:	3b10      	subs	r3, #16
 8014ece:	2b01      	cmp	r3, #1
 8014ed0:	d905      	bls.n	8014ede <GL_DrawLine1Ex+0x2f6>
 8014ed2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8014ed4:	eb0a 0107 	add.w	r1, sl, r7
 8014ed8:	4648      	mov	r0, r9
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	4798      	blx	r3
 8014ede:	f10a 0a01 	add.w	sl, sl, #1
 8014ee2:	4554      	cmp	r4, sl
 8014ee4:	dbc5      	blt.n	8014e72 <GL_DrawLine1Ex+0x28a>
 8014ee6:	f8d8 2000 	ldr.w	r2, [r8]
 8014eea:	4628      	mov	r0, r5
 8014eec:	7e93      	ldrb	r3, [r2, #26]
 8014eee:	e6b7      	b.n	8014c60 <GL_DrawLine1Ex+0x78>
 8014ef0:	4b13      	ldr	r3, [pc, #76]	; (8014f40 <GL_DrawLine1Ex+0x358>)
 8014ef2:	4003      	ands	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	db54      	blt.n	8014fa2 <GL_DrawLine1Ex+0x3ba>
 8014ef8:	2b01      	cmp	r3, #1
 8014efa:	bfcc      	ite	gt
 8014efc:	2300      	movgt	r3, #0
 8014efe:	2301      	movle	r3, #1
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d1ec      	bne.n	8014ede <GL_DrawLine1Ex+0x2f6>
 8014f04:	e7e5      	b.n	8014ed2 <GL_DrawLine1Ex+0x2ea>
 8014f06:	1d69      	adds	r1, r5, #5
 8014f08:	4b0e      	ldr	r3, [pc, #56]	; (8014f44 <GL_DrawLine1Ex+0x35c>)
 8014f0a:	400b      	ands	r3, r1
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	db4d      	blt.n	8014fac <GL_DrawLine1Ex+0x3c4>
 8014f10:	2b0b      	cmp	r3, #11
 8014f12:	bfcc      	ite	gt
 8014f14:	2300      	movgt	r3, #0
 8014f16:	2301      	movle	r3, #1
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1e0      	bne.n	8014ede <GL_DrawLine1Ex+0x2f6>
 8014f1c:	e7d9      	b.n	8014ed2 <GL_DrawLine1Ex+0x2ea>
 8014f1e:	fb86 3100 	smull	r3, r1, r6, r0
 8014f22:	17c3      	asrs	r3, r0, #31
 8014f24:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8014f28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014f2c:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 8014f30:	2b0b      	cmp	r3, #11
 8014f32:	dccb      	bgt.n	8014ecc <GL_DrawLine1Ex+0x2e4>
 8014f34:	e7d3      	b.n	8014ede <GL_DrawLine1Ex+0x2f6>
 8014f36:	bf00      	nop
 8014f38:	66666667 	.word	0x66666667
 8014f3c:	2aaaaaab 	.word	0x2aaaaaab
 8014f40:	80000003 	.word	0x80000003
 8014f44:	8000000f 	.word	0x8000000f
 8014f48:	20000018 	.word	0x20000018
 8014f4c:	4608      	mov	r0, r1
 8014f4e:	6852      	ldr	r2, [r2, #4]
 8014f50:	4639      	mov	r1, r7
 8014f52:	4790      	blx	r2
 8014f54:	f8db 1000 	ldr.w	r1, [fp]
 8014f58:	e706      	b.n	8014d68 <GL_DrawLine1Ex+0x180>
 8014f5a:	4421      	add	r1, r4
 8014f5c:	2c00      	cmp	r4, #0
 8014f5e:	f8cb 1000 	str.w	r1, [fp]
 8014f62:	f6bf aed0 	bge.w	8014d06 <GL_DrawLine1Ex+0x11e>
 8014f66:	4421      	add	r1, r4
 8014f68:	e71f      	b.n	8014daa <GL_DrawLine1Ex+0x1c2>
 8014f6a:	469a      	mov	sl, r3
 8014f6c:	e001      	b.n	8014f72 <GL_DrawLine1Ex+0x38a>
 8014f6e:	f8d8 0000 	ldr.w	r0, [r8]
 8014f72:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8014f74:	eb0a 0007 	add.w	r0, sl, r7
 8014f78:	f10a 0a01 	add.w	sl, sl, #1
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	fb96 f1f4 	sdiv	r1, r6, r4
 8014f82:	4449      	add	r1, r9
 8014f84:	442e      	add	r6, r5
 8014f86:	4798      	blx	r3
 8014f88:	4554      	cmp	r4, sl
 8014f8a:	daf0      	bge.n	8014f6e <GL_DrawLine1Ex+0x386>
 8014f8c:	e6ae      	b.n	8014cec <GL_DrawLine1Ex+0x104>
 8014f8e:	3a01      	subs	r2, #1
 8014f90:	f062 0203 	orn	r2, r2, #3
 8014f94:	3201      	adds	r2, #1
 8014f96:	e713      	b.n	8014dc0 <GL_DrawLine1Ex+0x1d8>
 8014f98:	3a01      	subs	r2, #1
 8014f9a:	f062 020f 	orn	r2, r2, #15
 8014f9e:	3201      	adds	r2, #1
 8014fa0:	e71d      	b.n	8014dde <GL_DrawLine1Ex+0x1f6>
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	f063 0303 	orn	r3, r3, #3
 8014fa8:	3301      	adds	r3, #1
 8014faa:	e7a5      	b.n	8014ef8 <GL_DrawLine1Ex+0x310>
 8014fac:	3b01      	subs	r3, #1
 8014fae:	f063 030f 	orn	r3, r3, #15
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	e7ac      	b.n	8014f10 <GL_DrawLine1Ex+0x328>
 8014fb6:	3b01      	subs	r3, #1
 8014fb8:	f063 0303 	orn	r3, r3, #3
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	e763      	b.n	8014e88 <GL_DrawLine1Ex+0x2a0>
 8014fc0:	3b01      	subs	r3, #1
 8014fc2:	f063 030f 	orn	r3, r3, #15
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	e76b      	b.n	8014ea2 <GL_DrawLine1Ex+0x2ba>
 8014fca:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 8014fce:	4649      	mov	r1, r9
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	b005      	add	sp, #20
 8014fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fda:	4718      	bx	r3
 8014fdc:	4639      	mov	r1, r7
 8014fde:	4648      	mov	r0, r9
 8014fe0:	b005      	add	sp, #20
 8014fe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe6:	f004 bc1d 	b.w	8019824 <LCD_DrawVLine>
 8014fea:	460d      	mov	r5, r1
 8014fec:	e741      	b.n	8014e72 <GL_DrawLine1Ex+0x28a>
 8014fee:	bf00      	nop

08014ff0 <GL_DrawLine>:
 8014ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff4:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 801529c <GL_DrawLine+0x2ac>
 8014ff8:	b089      	sub	sp, #36	; 0x24
 8014ffa:	f04f 0c00 	mov.w	ip, #0
 8014ffe:	f8d9 4000 	ldr.w	r4, [r9]
 8015002:	f8cd c00c 	str.w	ip, [sp, #12]
 8015006:	7e24      	ldrb	r4, [r4, #24]
 8015008:	2c01      	cmp	r4, #1
 801500a:	f000 813b 	beq.w	8015284 <GL_DrawLine+0x294>
 801500e:	461e      	mov	r6, r3
 8015010:	ebc2 0e00 	rsb	lr, r2, r0
 8015014:	1acb      	subs	r3, r1, r3
 8015016:	4615      	mov	r5, r2
 8015018:	4607      	mov	r7, r0
 801501a:	4688      	mov	r8, r1
 801501c:	ea5e 0203 	orrs.w	r2, lr, r3
 8015020:	d102      	bne.n	8015028 <GL_DrawLine+0x38>
 8015022:	b009      	add	sp, #36	; 0x24
 8015024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015028:	f1be 0f00 	cmp.w	lr, #0
 801502c:	f104 34ff 	add.w	r4, r4, #4294967295
 8015030:	f2c0 8109 	blt.w	8015246 <GL_DrawLine+0x256>
 8015034:	4660      	mov	r0, ip
 8015036:	2202      	movs	r2, #2
 8015038:	2b00      	cmp	r3, #0
 801503a:	f2c0 8101 	blt.w	8015240 <GL_DrawLine+0x250>
 801503e:	459e      	cmp	lr, r3
 8015040:	f2c0 80f4 	blt.w	801522c <GL_DrawLine+0x23c>
 8015044:	ea4f 026e 	mov.w	r2, lr, asr #1
 8015048:	4993      	ldr	r1, [pc, #588]	; (8015298 <GL_DrawLine+0x2a8>)
 801504a:	eb02 2383 	add.w	r3, r2, r3, lsl #10
 801504e:	fb93 f3fe 	sdiv	r3, r3, lr
 8015052:	119a      	asrs	r2, r3, #6
 8015054:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8015058:	eb01 0c42 	add.w	ip, r1, r2, lsl #1
 801505c:	f1c3 0e10 	rsb	lr, r3, #16
 8015060:	f9bc c024 	ldrsh.w	ip, [ip, #36]	; 0x24
 8015064:	f1be 0f10 	cmp.w	lr, #16
 8015068:	fb0e fc0c 	mul.w	ip, lr, ip
 801506c:	d005      	beq.n	801507a <GL_DrawLine+0x8a>
 801506e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8015072:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 8015076:	fb03 cc02 	mla	ip, r3, r2, ip
 801507a:	f11c 0308 	adds.w	r3, ip, #8
 801507e:	bf48      	it	mi
 8015080:	f10c 0317 	addmi.w	r3, ip, #23
 8015084:	0742      	lsls	r2, r0, #29
 8015086:	ea4f 1323 	mov.w	r3, r3, asr #4
 801508a:	bf48      	it	mi
 801508c:	f5c3 6380 	rsbmi	r3, r3, #1024	; 0x400
 8015090:	07c2      	lsls	r2, r0, #31
 8015092:	bf48      	it	mi
 8015094:	f5c3 6300 	rsbmi	r3, r3, #2048	; 0x800
 8015098:	0782      	lsls	r2, r0, #30
 801509a:	bf48      	it	mi
 801509c:	f5c3 5380 	rsbmi	r3, r3, #4096	; 0x1000
 80150a0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80150a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80150a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80150ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80150b0:	f300 80b7 	bgt.w	8015222 <GL_DrawLine+0x232>
 80150b4:	f04f 0c00 	mov.w	ip, #0
 80150b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80150bc:	4876      	ldr	r0, [pc, #472]	; (8015298 <GL_DrawLine+0x2a8>)
 80150be:	bfc8      	it	gt
 80150c0:	f5c2 6200 	rsbgt	r2, r2, #2048	; 0x800
 80150c4:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
 80150c8:	1192      	asrs	r2, r2, #6
 80150ca:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 80150ce:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 80150d2:	fa1f fe8e 	uxth.w	lr, lr
 80150d6:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 80150da:	fb0e fa0a 	mul.w	sl, lr, sl
 80150de:	d008      	beq.n	80150f2 <GL_DrawLine+0x102>
 80150e0:	2a10      	cmp	r2, #16
 80150e2:	d006      	beq.n	80150f2 <GL_DrawLine+0x102>
 80150e4:	3201      	adds	r2, #1
 80150e6:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 80150ea:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80150ee:	fb0e aa02 	mla	sl, lr, r2, sl
 80150f2:	f10a 0020 	add.w	r0, sl, #32
 80150f6:	0980      	lsrs	r0, r0, #6
 80150f8:	f1bc 0f00 	cmp.w	ip, #0
 80150fc:	d000      	beq.n	8015100 <GL_DrawLine+0x110>
 80150fe:	4240      	negs	r0, r0
 8015100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015104:	fb00 f004 	mul.w	r0, r0, r4
 8015108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801510c:	f340 8095 	ble.w	801523a <GL_DrawLine+0x24a>
 8015110:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015114:	f04f 0e01 	mov.w	lr, #1
 8015118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801511c:	f8df a178 	ldr.w	sl, [pc, #376]	; 8015298 <GL_DrawLine+0x2a8>
 8015120:	bfc8      	it	gt
 8015122:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 8015126:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 801512a:	119a      	asrs	r2, r3, #6
 801512c:	f1cc 0c40 	rsb	ip, ip, #64	; 0x40
 8015130:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8015134:	fa1f f18c 	uxth.w	r1, ip
 8015138:	2940      	cmp	r1, #64	; 0x40
 801513a:	fb01 f303 	mul.w	r3, r1, r3
 801513e:	d008      	beq.n	8015152 <GL_DrawLine+0x162>
 8015140:	2a10      	cmp	r2, #16
 8015142:	d006      	beq.n	8015152 <GL_DrawLine+0x162>
 8015144:	3201      	adds	r2, #1
 8015146:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 801514a:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 801514e:	fb01 3302 	mla	r3, r1, r2, r3
 8015152:	3320      	adds	r3, #32
 8015154:	099b      	lsrs	r3, r3, #6
 8015156:	f1be 0f00 	cmp.w	lr, #0
 801515a:	d000      	beq.n	801515e <GL_DrawLine+0x16e>
 801515c:	425b      	negs	r3, r3
 801515e:	2800      	cmp	r0, #0
 8015160:	fb03 f404 	mul.w	r4, r3, r4
 8015164:	f2c0 8089 	blt.w	801527a <GL_DrawLine+0x28a>
 8015168:	f500 7000 	add.w	r0, r0, #512	; 0x200
 801516c:	1280      	asrs	r0, r0, #10
 801516e:	2c00      	cmp	r4, #0
 8015170:	f2c0 808d 	blt.w	801528e <GL_DrawLine+0x29e>
 8015174:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8015178:	12a4      	asrs	r4, r4, #10
 801517a:	2800      	cmp	r0, #0
 801517c:	dd72      	ble.n	8015264 <GL_DrawLine+0x274>
 801517e:	f100 0c01 	add.w	ip, r0, #1
 8015182:	1040      	asrs	r0, r0, #1
 8015184:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8015188:	2c00      	cmp	r4, #0
 801518a:	dd61      	ble.n	8015250 <GL_DrawLine+0x260>
 801518c:	1c61      	adds	r1, r4, #1
 801518e:	1064      	asrs	r4, r4, #1
 8015190:	1049      	asrs	r1, r1, #1
 8015192:	fa1f fa8c 	uxth.w	sl, ip
 8015196:	2300      	movs	r3, #0
 8015198:	fa1f fb87 	uxth.w	fp, r7
 801519c:	b280      	uxth	r0, r0
 801519e:	461a      	mov	r2, r3
 80151a0:	eb0b 0e0a 	add.w	lr, fp, sl
 80151a4:	fa1f fc85 	uxth.w	ip, r5
 80151a8:	b289      	uxth	r1, r1
 80151aa:	ebc0 0b0b 	rsb	fp, r0, fp
 80151ae:	b2a4      	uxth	r4, r4
 80151b0:	ebc0 000c 	rsb	r0, r0, ip
 80151b4:	f8ad e010 	strh.w	lr, [sp, #16]
 80151b8:	44d4      	add	ip, sl
 80151ba:	fa1f fe86 	uxth.w	lr, r6
 80151be:	f8ad b014 	strh.w	fp, [sp, #20]
 80151c2:	fa1f fa88 	uxth.w	sl, r8
 80151c6:	f8ad 0018 	strh.w	r0, [sp, #24]
 80151ca:	a804      	add	r0, sp, #16
 80151cc:	f8ad c01c 	strh.w	ip, [sp, #28]
 80151d0:	eb0a 0b01 	add.w	fp, sl, r1
 80151d4:	ebc4 0a0a 	rsb	sl, r4, sl
 80151d8:	ebc4 040e 	rsb	r4, r4, lr
 80151dc:	448e      	add	lr, r1
 80151de:	2104      	movs	r1, #4
 80151e0:	f8ad b012 	strh.w	fp, [sp, #18]
 80151e4:	f8ad 401a 	strh.w	r4, [sp, #26]
 80151e8:	f8ad a016 	strh.w	sl, [sp, #22]
 80151ec:	f8ad e01e 	strh.w	lr, [sp, #30]
 80151f0:	f000 fe5c 	bl	8015eac <GL_FillPolygon>
 80151f4:	f8d9 3000 	ldr.w	r3, [r9]
 80151f8:	4c28      	ldr	r4, [pc, #160]	; (801529c <GL_DrawLine+0x2ac>)
 80151fa:	7e5b      	ldrb	r3, [r3, #25]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f47f af10 	bne.w	8015022 <GL_DrawLine+0x32>
 8015202:	4641      	mov	r1, r8
 8015204:	4638      	mov	r0, r7
 8015206:	f7ff fc89 	bl	8014b1c <GL_DrawPoint>
 801520a:	6823      	ldr	r3, [r4, #0]
 801520c:	7e5b      	ldrb	r3, [r3, #25]
 801520e:	2b00      	cmp	r3, #0
 8015210:	f47f af07 	bne.w	8015022 <GL_DrawLine+0x32>
 8015214:	4631      	mov	r1, r6
 8015216:	4628      	mov	r0, r5
 8015218:	f7ff fc80 	bl	8014b1c <GL_DrawPoint>
 801521c:	b009      	add	sp, #36	; 0x24
 801521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015222:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8015226:	f04f 0c01 	mov.w	ip, #1
 801522a:	e745      	b.n	80150b8 <GL_DrawLine+0xc8>
 801522c:	4672      	mov	r2, lr
 801522e:	f040 0004 	orr.w	r0, r0, #4
 8015232:	469e      	mov	lr, r3
 8015234:	b2c0      	uxtb	r0, r0
 8015236:	4613      	mov	r3, r2
 8015238:	e704      	b.n	8015044 <GL_DrawLine+0x54>
 801523a:	f04f 0e00 	mov.w	lr, #0
 801523e:	e76b      	b.n	8015118 <GL_DrawLine+0x128>
 8015240:	425b      	negs	r3, r3
 8015242:	4610      	mov	r0, r2
 8015244:	e6fb      	b.n	801503e <GL_DrawLine+0x4e>
 8015246:	f1ce 0e00 	rsb	lr, lr, #0
 801524a:	2203      	movs	r2, #3
 801524c:	2001      	movs	r0, #1
 801524e:	e6f3      	b.n	8015038 <GL_DrawLine+0x48>
 8015250:	4621      	mov	r1, r4
 8015252:	bfb8      	it	lt
 8015254:	1c61      	addlt	r1, r4, #1
 8015256:	1e63      	subs	r3, r4, #1
 8015258:	ea4f 0161 	mov.w	r1, r1, asr #1
 801525c:	bf48      	it	mi
 801525e:	4623      	movmi	r3, r4
 8015260:	105c      	asrs	r4, r3, #1
 8015262:	e796      	b.n	8015192 <GL_DrawLine+0x1a2>
 8015264:	4684      	mov	ip, r0
 8015266:	bfb8      	it	lt
 8015268:	f100 0c01 	addlt.w	ip, r0, #1
 801526c:	1e43      	subs	r3, r0, #1
 801526e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8015272:	bf48      	it	mi
 8015274:	4603      	movmi	r3, r0
 8015276:	1058      	asrs	r0, r3, #1
 8015278:	e786      	b.n	8015188 <GL_DrawLine+0x198>
 801527a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801527e:	1280      	asrs	r0, r0, #10
 8015280:	4240      	negs	r0, r0
 8015282:	e774      	b.n	801516e <GL_DrawLine+0x17e>
 8015284:	ac03      	add	r4, sp, #12
 8015286:	9400      	str	r4, [sp, #0]
 8015288:	f7ff fcae 	bl	8014be8 <GL_DrawLine1Ex>
 801528c:	e6c9      	b.n	8015022 <GL_DrawLine+0x32>
 801528e:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 8015292:	12a4      	asrs	r4, r4, #10
 8015294:	4264      	negs	r4, r4
 8015296:	e770      	b.n	801517a <GL_DrawLine+0x18a>
 8015298:	08026a64 	.word	0x08026a64
 801529c:	20000018 	.word	0x20000018

080152a0 <GUI_DrawLine>:
 80152a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a4:	4eb6      	ldr	r6, [pc, #728]	; (8015580 <GUI_DrawLine+0x2e0>)
 80152a6:	b08f      	sub	sp, #60	; 0x3c
 80152a8:	4680      	mov	r8, r0
 80152aa:	468a      	mov	sl, r1
 80152ac:	4617      	mov	r7, r2
 80152ae:	4699      	mov	r9, r3
 80152b0:	f002 fd42 	bl	8017d38 <GUI_Lock>
 80152b4:	6834      	ldr	r4, [r6, #0]
 80152b6:	2000      	movs	r0, #0
 80152b8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80152ba:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80152bc:	f00b f814 	bl	80202e8 <WM__InitIVRSearch>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	f000 8121 	beq.w	8015508 <GUI_DrawLine+0x268>
 80152c6:	eb04 0209 	add.w	r2, r4, r9
 80152ca:	eb04 030a 	add.w	r3, r4, sl
 80152ce:	eb05 0108 	add.w	r1, r5, r8
 80152d2:	19e8      	adds	r0, r5, r7
 80152d4:	9303      	str	r3, [sp, #12]
 80152d6:	1a9b      	subs	r3, r3, r2
 80152d8:	ebc0 0901 	rsb	r9, r0, r1
 80152dc:	9102      	str	r1, [sp, #8]
 80152de:	9307      	str	r3, [sp, #28]
 80152e0:	4619      	mov	r1, r3
 80152e2:	425b      	negs	r3, r3
 80152e4:	9205      	str	r2, [sp, #20]
 80152e6:	9004      	str	r0, [sp, #16]
 80152e8:	ea49 0801 	orr.w	r8, r9, r1
 80152ec:	ea13 0321 	ands.w	r3, r3, r1, asr #32
 80152f0:	bf38      	it	cc
 80152f2:	460b      	movcc	r3, r1
 80152f4:	4fa3      	ldr	r7, [pc, #652]	; (8015584 <GUI_DrawLine+0x2e4>)
 80152f6:	9306      	str	r3, [sp, #24]
 80152f8:	e004      	b.n	8015304 <GUI_DrawLine+0x64>
 80152fa:	f00a fecb 	bl	8020094 <WM__GetNextIVR>
 80152fe:	2800      	cmp	r0, #0
 8015300:	f000 8102 	beq.w	8015508 <GUI_DrawLine+0x268>
 8015304:	6832      	ldr	r2, [r6, #0]
 8015306:	2300      	movs	r3, #0
 8015308:	7e11      	ldrb	r1, [r2, #24]
 801530a:	9309      	str	r3, [sp, #36]	; 0x24
 801530c:	2901      	cmp	r1, #1
 801530e:	f000 812f 	beq.w	8015570 <GUI_DrawLine+0x2d0>
 8015312:	f1b8 0f00 	cmp.w	r8, #0
 8015316:	d0f0      	beq.n	80152fa <GUI_DrawLine+0x5a>
 8015318:	f1b9 0f00 	cmp.w	r9, #0
 801531c:	f101 31ff 	add.w	r1, r1, #4294967295
 8015320:	f2c0 8121 	blt.w	8015566 <GUI_DrawLine+0x2c6>
 8015324:	464c      	mov	r4, r9
 8015326:	2202      	movs	r2, #2
 8015328:	9807      	ldr	r0, [sp, #28]
 801532a:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 801532e:	bf28      	it	cs
 8015330:	4613      	movcs	r3, r2
 8015332:	9806      	ldr	r0, [sp, #24]
 8015334:	4284      	cmp	r4, r0
 8015336:	f280 80f0 	bge.w	801551a <GUI_DrawLine+0x27a>
 801533a:	f043 0304 	orr.w	r3, r3, #4
 801533e:	4622      	mov	r2, r4
 8015340:	4604      	mov	r4, r0
 8015342:	b2db      	uxtb	r3, r3
 8015344:	1060      	asrs	r0, r4, #1
 8015346:	eb00 2282 	add.w	r2, r0, r2, lsl #10
 801534a:	fb92 f2f4 	sdiv	r2, r2, r4
 801534e:	1194      	asrs	r4, r2, #6
 8015350:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8015354:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8015358:	f1c2 0510 	rsb	r5, r2, #16
 801535c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8015360:	2d10      	cmp	r5, #16
 8015362:	fb05 f000 	mul.w	r0, r5, r0
 8015366:	d006      	beq.n	8015376 <GUI_DrawLine+0xd6>
 8015368:	4d86      	ldr	r5, [pc, #536]	; (8015584 <GUI_DrawLine+0x2e4>)
 801536a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 801536e:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
 8015372:	fb02 0004 	mla	r0, r2, r4, r0
 8015376:	f110 0408 	adds.w	r4, r0, #8
 801537a:	bf48      	it	mi
 801537c:	f100 0417 	addmi.w	r4, r0, #23
 8015380:	0758      	lsls	r0, r3, #29
 8015382:	ea4f 1424 	mov.w	r4, r4, asr #4
 8015386:	bf48      	it	mi
 8015388:	f5c4 6480 	rsbmi	r4, r4, #1024	; 0x400
 801538c:	07da      	lsls	r2, r3, #31
 801538e:	bf48      	it	mi
 8015390:	f5c4 6400 	rsbmi	r4, r4, #2048	; 0x800
 8015394:	079b      	lsls	r3, r3, #30
 8015396:	bf48      	it	mi
 8015398:	f5c4 5480 	rsbmi	r4, r4, #4096	; 0x1000
 801539c:	f504 6300 	add.w	r3, r4, #2048	; 0x800
 80153a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80153a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80153a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80153ac:	f340 80b3 	ble.w	8015516 <GUI_DrawLine+0x276>
 80153b0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153b4:	2201      	movs	r2, #1
 80153b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80153ba:	bfc8      	it	gt
 80153bc:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 80153c0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80153c4:	119b      	asrs	r3, r3, #6
 80153c6:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80153ca:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 80153ce:	b2ad      	uxth	r5, r5
 80153d0:	2d40      	cmp	r5, #64	; 0x40
 80153d2:	fb05 f000 	mul.w	r0, r5, r0
 80153d6:	d008      	beq.n	80153ea <GUI_DrawLine+0x14a>
 80153d8:	2b10      	cmp	r3, #16
 80153da:	d006      	beq.n	80153ea <GUI_DrawLine+0x14a>
 80153dc:	3301      	adds	r3, #1
 80153de:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 80153e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80153e6:	fb05 0003 	mla	r0, r5, r3, r0
 80153ea:	3020      	adds	r0, #32
 80153ec:	0980      	lsrs	r0, r0, #6
 80153ee:	b102      	cbz	r2, 80153f2 <GUI_DrawLine+0x152>
 80153f0:	4240      	negs	r0, r0
 80153f2:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80153f6:	fb00 f001 	mul.w	r0, r0, r1
 80153fa:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80153fe:	f340 8088 	ble.w	8015512 <GUI_DrawLine+0x272>
 8015402:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8015406:	2201      	movs	r2, #1
 8015408:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801540c:	bfc8      	it	gt
 801540e:	f5c4 6400 	rsbgt	r4, r4, #2048	; 0x800
 8015412:	f004 053f 	and.w	r5, r4, #63	; 0x3f
 8015416:	11a4      	asrs	r4, r4, #6
 8015418:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 801541c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8015420:	b2ad      	uxth	r5, r5
 8015422:	2d40      	cmp	r5, #64	; 0x40
 8015424:	fb05 f303 	mul.w	r3, r5, r3
 8015428:	d008      	beq.n	801543c <GUI_DrawLine+0x19c>
 801542a:	2c10      	cmp	r4, #16
 801542c:	d006      	beq.n	801543c <GUI_DrawLine+0x19c>
 801542e:	3401      	adds	r4, #1
 8015430:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8015434:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
 8015438:	fb05 3304 	mla	r3, r5, r4, r3
 801543c:	3320      	adds	r3, #32
 801543e:	099b      	lsrs	r3, r3, #6
 8015440:	b102      	cbz	r2, 8015444 <GUI_DrawLine+0x1a4>
 8015442:	425b      	negs	r3, r3
 8015444:	2800      	cmp	r0, #0
 8015446:	fb03 f101 	mul.w	r1, r3, r1
 801544a:	db7e      	blt.n	801554a <GUI_DrawLine+0x2aa>
 801544c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8015450:	2900      	cmp	r1, #0
 8015452:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8015456:	f2c0 8081 	blt.w	801555c <GUI_DrawLine+0x2bc>
 801545a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801545e:	1289      	asrs	r1, r1, #10
 8015460:	2800      	cmp	r0, #0
 8015462:	dd5c      	ble.n	801551e <GUI_DrawLine+0x27e>
 8015464:	1c45      	adds	r5, r0, #1
 8015466:	2900      	cmp	r1, #0
 8015468:	ea4f 0060 	mov.w	r0, r0, asr #1
 801546c:	ea4f 0565 	mov.w	r5, r5, asr #1
 8015470:	dd61      	ble.n	8015536 <GUI_DrawLine+0x296>
 8015472:	1c4c      	adds	r4, r1, #1
 8015474:	1049      	asrs	r1, r1, #1
 8015476:	1064      	asrs	r4, r4, #1
 8015478:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801547c:	b2ad      	uxth	r5, r5
 801547e:	b280      	uxth	r0, r0
 8015480:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8015484:	eb0a 0e05 	add.w	lr, sl, r5
 8015488:	b289      	uxth	r1, r1
 801548a:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801548e:	ebc0 0a0a 	rsb	sl, r0, sl
 8015492:	b2a4      	uxth	r4, r4
 8015494:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8015498:	f8bd e014 	ldrh.w	lr, [sp, #20]
 801549c:	2300      	movs	r3, #0
 801549e:	ebc0 000b 	rsb	r0, r0, fp
 80154a2:	445d      	add	r5, fp
 80154a4:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 80154a8:	eb0c 0b04 	add.w	fp, ip, r4
 80154ac:	ebc1 0a0e 	rsb	sl, r1, lr
 80154b0:	ebc1 0c0c 	rsb	ip, r1, ip
 80154b4:	44a6      	add	lr, r4
 80154b6:	461a      	mov	r2, r3
 80154b8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80154bc:	2104      	movs	r1, #4
 80154be:	a80a      	add	r0, sp, #40	; 0x28
 80154c0:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
 80154c4:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 80154c8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 80154cc:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
 80154d0:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
 80154d4:	f000 fcea 	bl	8015eac <GL_FillPolygon>
 80154d8:	6833      	ldr	r3, [r6, #0]
 80154da:	7e5b      	ldrb	r3, [r3, #25]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f47f af0c 	bne.w	80152fa <GUI_DrawLine+0x5a>
 80154e2:	9903      	ldr	r1, [sp, #12]
 80154e4:	9802      	ldr	r0, [sp, #8]
 80154e6:	f7ff fb19 	bl	8014b1c <GL_DrawPoint>
 80154ea:	4b25      	ldr	r3, [pc, #148]	; (8015580 <GUI_DrawLine+0x2e0>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	7e5b      	ldrb	r3, [r3, #25]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f47f af02 	bne.w	80152fa <GUI_DrawLine+0x5a>
 80154f6:	9905      	ldr	r1, [sp, #20]
 80154f8:	9804      	ldr	r0, [sp, #16]
 80154fa:	f7ff fb0f 	bl	8014b1c <GL_DrawPoint>
 80154fe:	f00a fdc9 	bl	8020094 <WM__GetNextIVR>
 8015502:	2800      	cmp	r0, #0
 8015504:	f47f aefe 	bne.w	8015304 <GUI_DrawLine+0x64>
 8015508:	f002 fc0c 	bl	8017d24 <GUI_Unlock>
 801550c:	b00f      	add	sp, #60	; 0x3c
 801550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015512:	2200      	movs	r2, #0
 8015514:	e778      	b.n	8015408 <GUI_DrawLine+0x168>
 8015516:	2200      	movs	r2, #0
 8015518:	e74d      	b.n	80153b6 <GUI_DrawLine+0x116>
 801551a:	4602      	mov	r2, r0
 801551c:	e712      	b.n	8015344 <GUI_DrawLine+0xa4>
 801551e:	4605      	mov	r5, r0
 8015520:	bfb8      	it	lt
 8015522:	1c45      	addlt	r5, r0, #1
 8015524:	1e43      	subs	r3, r0, #1
 8015526:	ea4f 0565 	mov.w	r5, r5, asr #1
 801552a:	bf48      	it	mi
 801552c:	4603      	movmi	r3, r0
 801552e:	2900      	cmp	r1, #0
 8015530:	ea4f 0063 	mov.w	r0, r3, asr #1
 8015534:	dc9d      	bgt.n	8015472 <GUI_DrawLine+0x1d2>
 8015536:	460c      	mov	r4, r1
 8015538:	bfb8      	it	lt
 801553a:	1c4c      	addlt	r4, r1, #1
 801553c:	1e4b      	subs	r3, r1, #1
 801553e:	ea4f 0464 	mov.w	r4, r4, asr #1
 8015542:	bf48      	it	mi
 8015544:	460b      	movmi	r3, r1
 8015546:	1059      	asrs	r1, r3, #1
 8015548:	e796      	b.n	8015478 <GUI_DrawLine+0x1d8>
 801554a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801554e:	2900      	cmp	r1, #0
 8015550:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8015554:	f1c0 0000 	rsb	r0, r0, #0
 8015558:	f6bf af7f 	bge.w	801545a <GUI_DrawLine+0x1ba>
 801555c:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
 8015560:	1289      	asrs	r1, r1, #10
 8015562:	4249      	negs	r1, r1
 8015564:	e77c      	b.n	8015460 <GUI_DrawLine+0x1c0>
 8015566:	f1c9 0400 	rsb	r4, r9, #0
 801556a:	2203      	movs	r2, #3
 801556c:	2301      	movs	r3, #1
 801556e:	e6db      	b.n	8015328 <GUI_DrawLine+0x88>
 8015570:	a809      	add	r0, sp, #36	; 0x24
 8015572:	a903      	add	r1, sp, #12
 8015574:	c90e      	ldmia	r1, {r1, r2, r3}
 8015576:	9000      	str	r0, [sp, #0]
 8015578:	9802      	ldr	r0, [sp, #8]
 801557a:	f7ff fb35 	bl	8014be8 <GL_DrawLine1Ex>
 801557e:	e6bc      	b.n	80152fa <GUI_DrawLine+0x5a>
 8015580:	20000018 	.word	0x20000018
 8015584:	08026a64 	.word	0x08026a64

08015588 <GUI_DrawRoundedRect>:
 8015588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801558c:	b091      	sub	sp, #68	; 0x44
 801558e:	4681      	mov	r9, r0
 8015590:	461e      	mov	r6, r3
 8015592:	460f      	mov	r7, r1
 8015594:	4690      	mov	r8, r2
 8015596:	f002 fbcf 	bl	8017d38 <GUI_Lock>
 801559a:	4b5c      	ldr	r3, [pc, #368]	; (801570c <GUI_DrawRoundedRect+0x184>)
 801559c:	a80e      	add	r0, sp, #56	; 0x38
 801559e:	681c      	ldr	r4, [r3, #0]
 80155a0:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80155a2:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80155a4:	eb05 0309 	add.w	r3, r5, r9
 80155a8:	eb05 0208 	add.w	r2, r5, r8
 80155ac:	19e1      	adds	r1, r4, r7
 80155ae:	4434      	add	r4, r6
 80155b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80155b2:	920c      	str	r2, [sp, #48]	; 0x30
 80155b4:	9106      	str	r1, [sp, #24]
 80155b6:	9409      	str	r4, [sp, #36]	; 0x24
 80155b8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80155bc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80155c0:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 80155c4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 80155c8:	f00a fe8e 	bl	80202e8 <WM__InitIVRSearch>
 80155cc:	2800      	cmp	r0, #0
 80155ce:	f000 8098 	beq.w	8015702 <GUI_DrawRoundedRect+0x17a>
 80155d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80155d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80155d6:	9906      	ldr	r1, [sp, #24]
 80155d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80155da:	1b03      	subs	r3, r0, r4
 80155dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155de:	3301      	adds	r3, #1
 80155e0:	1a52      	subs	r2, r2, r1
 80155e2:	4429      	add	r1, r5
 80155e4:	930a      	str	r3, [sp, #40]	; 0x28
 80155e6:	006d      	lsls	r5, r5, #1
 80155e8:	1c4b      	adds	r3, r1, #1
 80155ea:	3201      	adds	r2, #1
 80155ec:	9102      	str	r1, [sp, #8]
 80155ee:	930d      	str	r3, [sp, #52]	; 0x34
 80155f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80155f2:	9207      	str	r2, [sp, #28]
 80155f4:	fb03 f303 	mul.w	r3, r3, r3
 80155f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80155fa:	9508      	str	r5, [sp, #32]
 80155fc:	9305      	str	r3, [sp, #20]
 80155fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015600:	18e3      	adds	r3, r4, r3
 8015602:	9303      	str	r3, [sp, #12]
 8015604:	1a83      	subs	r3, r0, r2
 8015606:	9304      	str	r3, [sp, #16]
 8015608:	9b07      	ldr	r3, [sp, #28]
 801560a:	9a08      	ldr	r2, [sp, #32]
 801560c:	4619      	mov	r1, r3
 801560e:	4291      	cmp	r1, r2
 8015610:	db73      	blt.n	80156fa <GUI_DrawRoundedRect+0x172>
 8015612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015614:	4619      	mov	r1, r3
 8015616:	4291      	cmp	r1, r2
 8015618:	db6f      	blt.n	80156fa <GUI_DrawRoundedRect+0x172>
 801561a:	9b06      	ldr	r3, [sp, #24]
 801561c:	9a02      	ldr	r2, [sp, #8]
 801561e:	4293      	cmp	r3, r2
 8015620:	dc4b      	bgt.n	80156ba <GUI_DrawRoundedRect+0x132>
 8015622:	461d      	mov	r5, r3
 8015624:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015628:	f04f 34ff 	mov.w	r4, #4294967295
 801562c:	1b9b      	subs	r3, r3, r6
 801562e:	9301      	str	r3, [sp, #4]
 8015630:	e01a      	b.n	8015668 <GUI_DrawRoundedRect+0xe0>
 8015632:	ebc4 0409 	rsb	r4, r4, r9
 8015636:	4642      	mov	r2, r8
 8015638:	f004 f8cc 	bl	80197d4 <LCD_DrawHLine>
 801563c:	464a      	mov	r2, r9
 801563e:	3401      	adds	r4, #1
 8015640:	4629      	mov	r1, r5
 8015642:	4620      	mov	r0, r4
 8015644:	f004 f8c6 	bl	80197d4 <LCD_DrawHLine>
 8015648:	4642      	mov	r2, r8
 801564a:	4651      	mov	r1, sl
 801564c:	4658      	mov	r0, fp
 801564e:	f004 f8c1 	bl	80197d4 <LCD_DrawHLine>
 8015652:	464a      	mov	r2, r9
 8015654:	4651      	mov	r1, sl
 8015656:	4620      	mov	r0, r4
 8015658:	f004 f8bc 	bl	80197d4 <LCD_DrawHLine>
 801565c:	3501      	adds	r5, #1
 801565e:	9b02      	ldr	r3, [sp, #8]
 8015660:	3e01      	subs	r6, #1
 8015662:	463c      	mov	r4, r7
 8015664:	429d      	cmp	r5, r3
 8015666:	dc2c      	bgt.n	80156c2 <GUI_DrawRoundedRect+0x13a>
 8015668:	9b05      	ldr	r3, [sp, #20]
 801566a:	fb06 3016 	mls	r0, r6, r6, r3
 801566e:	9b01      	ldr	r3, [sp, #4]
 8015670:	eb03 0a06 	add.w	sl, r3, r6
 8015674:	f003 fdd0 	bl	8019218 <GUI__sqrt32>
 8015678:	9b03      	ldr	r3, [sp, #12]
 801567a:	1b04      	subs	r4, r0, r4
 801567c:	4607      	mov	r7, r0
 801567e:	4629      	mov	r1, r5
 8015680:	ebc0 0b03 	rsb	fp, r0, r3
 8015684:	2c01      	cmp	r4, #1
 8015686:	9b04      	ldr	r3, [sp, #16]
 8015688:	eb0b 0804 	add.w	r8, fp, r4
 801568c:	eb00 0903 	add.w	r9, r0, r3
 8015690:	4658      	mov	r0, fp
 8015692:	f108 38ff 	add.w	r8, r8, #4294967295
 8015696:	dccc      	bgt.n	8015632 <GUI_DrawRoundedRect+0xaa>
 8015698:	4629      	mov	r1, r5
 801569a:	4658      	mov	r0, fp
 801569c:	f004 f868 	bl	8019770 <LCD_DrawPixel>
 80156a0:	4629      	mov	r1, r5
 80156a2:	4648      	mov	r0, r9
 80156a4:	f004 f864 	bl	8019770 <LCD_DrawPixel>
 80156a8:	4651      	mov	r1, sl
 80156aa:	4658      	mov	r0, fp
 80156ac:	f004 f860 	bl	8019770 <LCD_DrawPixel>
 80156b0:	4651      	mov	r1, sl
 80156b2:	4648      	mov	r0, r9
 80156b4:	f004 f85c 	bl	8019770 <LCD_DrawPixel>
 80156b8:	e7d0      	b.n	801565c <GUI_DrawRoundedRect+0xd4>
 80156ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80156be:	1a9b      	subs	r3, r3, r2
 80156c0:	9301      	str	r3, [sp, #4]
 80156c2:	9b03      	ldr	r3, [sp, #12]
 80156c4:	9906      	ldr	r1, [sp, #24]
 80156c6:	1c5c      	adds	r4, r3, #1
 80156c8:	9b04      	ldr	r3, [sp, #16]
 80156ca:	1e5d      	subs	r5, r3, #1
 80156cc:	9b01      	ldr	r3, [sp, #4]
 80156ce:	4620      	mov	r0, r4
 80156d0:	462a      	mov	r2, r5
 80156d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80156d6:	f004 f87d 	bl	80197d4 <LCD_DrawHLine>
 80156da:	4620      	mov	r0, r4
 80156dc:	462a      	mov	r2, r5
 80156de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156e0:	f004 f878 	bl	80197d4 <LCD_DrawHLine>
 80156e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80156e6:	465a      	mov	r2, fp
 80156e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80156ea:	4621      	mov	r1, r4
 80156ec:	f004 f89a 	bl	8019824 <LCD_DrawVLine>
 80156f0:	465a      	mov	r2, fp
 80156f2:	4621      	mov	r1, r4
 80156f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80156f6:	f004 f895 	bl	8019824 <LCD_DrawVLine>
 80156fa:	f00a fccb 	bl	8020094 <WM__GetNextIVR>
 80156fe:	2800      	cmp	r0, #0
 8015700:	d182      	bne.n	8015608 <GUI_DrawRoundedRect+0x80>
 8015702:	f002 fb0f 	bl	8017d24 <GUI_Unlock>
 8015706:	b011      	add	sp, #68	; 0x44
 8015708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	20000018 	.word	0x20000018

08015710 <_Color2Index>:
 8015710:	4b02      	ldr	r3, [pc, #8]	; (801571c <_Color2Index+0xc>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	691b      	ldr	r3, [r3, #16]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	4718      	bx	r3
 801571c:	2000028c 	.word	0x2000028c

08015720 <_Index2Color>:
 8015720:	4b02      	ldr	r3, [pc, #8]	; (801572c <_Index2Color+0xc>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	691b      	ldr	r3, [r3, #16]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	4718      	bx	r3
 801572c:	2000028c 	.word	0x2000028c

08015730 <_GetIndexMask>:
 8015730:	4b02      	ldr	r3, [pc, #8]	; (801573c <_GetIndexMask+0xc>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	691b      	ldr	r3, [r3, #16]
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	4718      	bx	r3
 801573c:	2000028c 	.word	0x2000028c

08015740 <_DrawHLine>:
 8015740:	6800      	ldr	r0, [r0, #0]
 8015742:	b130      	cbz	r0, 8015752 <_DrawHLine+0x12>
 8015744:	b410      	push	{r4}
 8015746:	68c4      	ldr	r4, [r0, #12]
 8015748:	68a4      	ldr	r4, [r4, #8]
 801574a:	46a4      	mov	ip, r4
 801574c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015750:	4760      	bx	ip
 8015752:	4770      	bx	lr

08015754 <_DrawVLine>:
 8015754:	6800      	ldr	r0, [r0, #0]
 8015756:	b130      	cbz	r0, 8015766 <_DrawVLine+0x12>
 8015758:	b410      	push	{r4}
 801575a:	68c4      	ldr	r4, [r0, #12]
 801575c:	68e4      	ldr	r4, [r4, #12]
 801575e:	46a4      	mov	ip, r4
 8015760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015764:	4760      	bx	ip
 8015766:	4770      	bx	lr

08015768 <_FillRect>:
 8015768:	6800      	ldr	r0, [r0, #0]
 801576a:	b430      	push	{r4, r5}
 801576c:	b120      	cbz	r0, 8015778 <_FillRect+0x10>
 801576e:	68c5      	ldr	r5, [r0, #12]
 8015770:	692c      	ldr	r4, [r5, #16]
 8015772:	46a4      	mov	ip, r4
 8015774:	bc30      	pop	{r4, r5}
 8015776:	4760      	bx	ip
 8015778:	bc30      	pop	{r4, r5}
 801577a:	4770      	bx	lr

0801577c <_GetPixelIndex>:
 801577c:	6800      	ldr	r0, [r0, #0]
 801577e:	b110      	cbz	r0, 8015786 <_GetPixelIndex+0xa>
 8015780:	68c3      	ldr	r3, [r0, #12]
 8015782:	695b      	ldr	r3, [r3, #20]
 8015784:	4718      	bx	r3
 8015786:	4770      	bx	lr

08015788 <_SetPixelIndex>:
 8015788:	6800      	ldr	r0, [r0, #0]
 801578a:	b130      	cbz	r0, 801579a <_SetPixelIndex+0x12>
 801578c:	b410      	push	{r4}
 801578e:	68c4      	ldr	r4, [r0, #12]
 8015790:	69a4      	ldr	r4, [r4, #24]
 8015792:	46a4      	mov	ip, r4
 8015794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015798:	4760      	bx	ip
 801579a:	4770      	bx	lr

0801579c <_XorPixel>:
 801579c:	6800      	ldr	r0, [r0, #0]
 801579e:	b110      	cbz	r0, 80157a6 <_XorPixel+0xa>
 80157a0:	68c3      	ldr	r3, [r0, #12]
 80157a2:	69db      	ldr	r3, [r3, #28]
 80157a4:	4718      	bx	r3
 80157a6:	4770      	bx	lr

080157a8 <_GetDevData>:
 80157a8:	6800      	ldr	r0, [r0, #0]
 80157aa:	b110      	cbz	r0, 80157b2 <_GetDevData+0xa>
 80157ac:	68c3      	ldr	r3, [r0, #12]
 80157ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157b0:	4718      	bx	r3
 80157b2:	4770      	bx	lr

080157b4 <_SetOrg>:
 80157b4:	6800      	ldr	r0, [r0, #0]
 80157b6:	b110      	cbz	r0, 80157be <_SetOrg+0xa>
 80157b8:	68c3      	ldr	r3, [r0, #12]
 80157ba:	6a1b      	ldr	r3, [r3, #32]
 80157bc:	4718      	bx	r3
 80157be:	4770      	bx	lr

080157c0 <_GetDevFunc>:
 80157c0:	6803      	ldr	r3, [r0, #0]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	6003      	str	r3, [r0, #0]
 80157c6:	b113      	cbz	r3, 80157ce <_GetDevFunc+0xe>
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157cc:	4718      	bx	r3
 80157ce:	4618      	mov	r0, r3
 80157d0:	4770      	bx	lr
 80157d2:	bf00      	nop

080157d4 <_GetDevProp>:
 80157d4:	6800      	ldr	r0, [r0, #0]
 80157d6:	b110      	cbz	r0, 80157de <_GetDevProp+0xa>
 80157d8:	68c3      	ldr	r3, [r0, #12]
 80157da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157dc:	4718      	bx	r3
 80157de:	4770      	bx	lr

080157e0 <_GetRect>:
 80157e0:	6800      	ldr	r0, [r0, #0]
 80157e2:	b110      	cbz	r0, 80157ea <_GetRect+0xa>
 80157e4:	68c3      	ldr	r3, [r0, #12]
 80157e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157e8:	4718      	bx	r3
 80157ea:	4770      	bx	lr

080157ec <_OnExit>:
 80157ec:	b538      	push	{r3, r4, r5, lr}
 80157ee:	4c05      	ldr	r4, [pc, #20]	; (8015804 <_OnExit+0x18>)
 80157f0:	2500      	movs	r5, #0
 80157f2:	6820      	ldr	r0, [r4, #0]
 80157f4:	f7fc ff38 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 80157f8:	6860      	ldr	r0, [r4, #4]
 80157fa:	6025      	str	r5, [r4, #0]
 80157fc:	f7fc ff34 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8015800:	6065      	str	r5, [r4, #4]
 8015802:	bd38      	pop	{r3, r4, r5, pc}
 8015804:	2000028c 	.word	0x2000028c

08015808 <_Color2IndexBulk>:
 8015808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80158a0 <_Color2IndexBulk+0x98>
 8015810:	f8d8 5000 	ldr.w	r5, [r8]
 8015814:	682d      	ldr	r5, [r5, #0]
 8015816:	692d      	ldr	r5, [r5, #16]
 8015818:	f8d5 e010 	ldr.w	lr, [r5, #16]
 801581c:	f1be 0f00 	cmp.w	lr, #0
 8015820:	d003      	beq.n	801582a <_Color2IndexBulk+0x22>
 8015822:	46f4      	mov	ip, lr
 8015824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015828:	4760      	bx	ip
 801582a:	2b02      	cmp	r3, #2
 801582c:	4607      	mov	r7, r0
 801582e:	4614      	mov	r4, r2
 8015830:	d025      	beq.n	801587e <_Color2IndexBulk+0x76>
 8015832:	2b04      	cmp	r3, #4
 8015834:	d013      	beq.n	801585e <_Color2IndexBulk+0x56>
 8015836:	2b01      	cmp	r3, #1
 8015838:	d001      	beq.n	801583e <_Color2IndexBulk+0x36>
 801583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801583e:	1e4e      	subs	r6, r1, #1
 8015840:	e003      	b.n	801584a <_Color2IndexBulk+0x42>
 8015842:	f8d8 3000 	ldr.w	r3, [r8]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	691d      	ldr	r5, [r3, #16]
 801584a:	682b      	ldr	r3, [r5, #0]
 801584c:	f857 0b04 	ldr.w	r0, [r7], #4
 8015850:	4798      	blx	r3
 8015852:	3c01      	subs	r4, #1
 8015854:	f806 0f01 	strb.w	r0, [r6, #1]!
 8015858:	d1f3      	bne.n	8015842 <_Color2IndexBulk+0x3a>
 801585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801585e:	1f0e      	subs	r6, r1, #4
 8015860:	e003      	b.n	801586a <_Color2IndexBulk+0x62>
 8015862:	f8d8 3000 	ldr.w	r3, [r8]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	691d      	ldr	r5, [r3, #16]
 801586a:	682b      	ldr	r3, [r5, #0]
 801586c:	f857 0b04 	ldr.w	r0, [r7], #4
 8015870:	4798      	blx	r3
 8015872:	3c01      	subs	r4, #1
 8015874:	f846 0f04 	str.w	r0, [r6, #4]!
 8015878:	d1f3      	bne.n	8015862 <_Color2IndexBulk+0x5a>
 801587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801587e:	1e8e      	subs	r6, r1, #2
 8015880:	e003      	b.n	801588a <_Color2IndexBulk+0x82>
 8015882:	f8d8 3000 	ldr.w	r3, [r8]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	691d      	ldr	r5, [r3, #16]
 801588a:	682b      	ldr	r3, [r5, #0]
 801588c:	f857 0b04 	ldr.w	r0, [r7], #4
 8015890:	4798      	blx	r3
 8015892:	3c01      	subs	r4, #1
 8015894:	f826 0f02 	strh.w	r0, [r6, #2]!
 8015898:	d1f3      	bne.n	8015882 <_Color2IndexBulk+0x7a>
 801589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801589e:	bf00      	nop
 80158a0:	2000028c 	.word	0x2000028c

080158a4 <_Index2ColorBulk>:
 80158a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158a8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801593c <_Index2ColorBulk+0x98>
 80158ac:	f8d8 5000 	ldr.w	r5, [r8]
 80158b0:	682d      	ldr	r5, [r5, #0]
 80158b2:	692d      	ldr	r5, [r5, #16]
 80158b4:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80158b8:	f1be 0f00 	cmp.w	lr, #0
 80158bc:	d003      	beq.n	80158c6 <_Index2ColorBulk+0x22>
 80158be:	46f4      	mov	ip, lr
 80158c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158c4:	4760      	bx	ip
 80158c6:	2b02      	cmp	r3, #2
 80158c8:	4607      	mov	r7, r0
 80158ca:	4614      	mov	r4, r2
 80158cc:	d025      	beq.n	801591a <_Index2ColorBulk+0x76>
 80158ce:	2b04      	cmp	r3, #4
 80158d0:	d013      	beq.n	80158fa <_Index2ColorBulk+0x56>
 80158d2:	2b01      	cmp	r3, #1
 80158d4:	d001      	beq.n	80158da <_Index2ColorBulk+0x36>
 80158d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158da:	1f0e      	subs	r6, r1, #4
 80158dc:	e003      	b.n	80158e6 <_Index2ColorBulk+0x42>
 80158de:	f8d8 3000 	ldr.w	r3, [r8]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	691d      	ldr	r5, [r3, #16]
 80158e6:	686b      	ldr	r3, [r5, #4]
 80158e8:	f817 0b01 	ldrb.w	r0, [r7], #1
 80158ec:	4798      	blx	r3
 80158ee:	3c01      	subs	r4, #1
 80158f0:	f846 0f04 	str.w	r0, [r6, #4]!
 80158f4:	d1f3      	bne.n	80158de <_Index2ColorBulk+0x3a>
 80158f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158fa:	1f0e      	subs	r6, r1, #4
 80158fc:	e003      	b.n	8015906 <_Index2ColorBulk+0x62>
 80158fe:	f8d8 3000 	ldr.w	r3, [r8]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	691d      	ldr	r5, [r3, #16]
 8015906:	686b      	ldr	r3, [r5, #4]
 8015908:	f857 0b04 	ldr.w	r0, [r7], #4
 801590c:	4798      	blx	r3
 801590e:	3c01      	subs	r4, #1
 8015910:	f846 0f04 	str.w	r0, [r6, #4]!
 8015914:	d1f3      	bne.n	80158fe <_Index2ColorBulk+0x5a>
 8015916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801591a:	1f0e      	subs	r6, r1, #4
 801591c:	e003      	b.n	8015926 <_Index2ColorBulk+0x82>
 801591e:	f8d8 3000 	ldr.w	r3, [r8]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	691d      	ldr	r5, [r3, #16]
 8015926:	686b      	ldr	r3, [r5, #4]
 8015928:	f837 0b02 	ldrh.w	r0, [r7], #2
 801592c:	4798      	blx	r3
 801592e:	3c01      	subs	r4, #1
 8015930:	f846 0f04 	str.w	r0, [r6, #4]!
 8015934:	d1f3      	bne.n	801591e <_Index2ColorBulk+0x7a>
 8015936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801593a:	bf00      	nop
 801593c:	2000028c 	.word	0x2000028c

08015940 <_SetBkColor>:
 8015940:	4b20      	ldr	r3, [pc, #128]	; (80159c4 <_SetBkColor+0x84>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015948:	7c1b      	ldrb	r3, [r3, #16]
 801594a:	4606      	mov	r6, r0
 801594c:	4d1e      	ldr	r5, [pc, #120]	; (80159c8 <_SetBkColor+0x88>)
 801594e:	075b      	lsls	r3, r3, #29
 8015950:	d42e      	bmi.n	80159b0 <_SetBkColor+0x70>
 8015952:	4603      	mov	r3, r0
 8015954:	682c      	ldr	r4, [r5, #0]
 8015956:	6068      	str	r0, [r5, #4]
 8015958:	0e24      	lsrs	r4, r4, #24
 801595a:	4f1c      	ldr	r7, [pc, #112]	; (80159cc <_SetBkColor+0x8c>)
 801595c:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8015960:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	d01b      	beq.n	80159a0 <_SetBkColor+0x60>
 8015968:	b333      	cbz	r3, 80159b8 <_SetBkColor+0x78>
 801596a:	68ab      	ldr	r3, [r5, #8]
 801596c:	2bfe      	cmp	r3, #254	; 0xfe
 801596e:	d808      	bhi.n	8015982 <_SetBkColor+0x42>
 8015970:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015974:	4a16      	ldr	r2, [pc, #88]	; (80159d0 <_SetBkColor+0x90>)
 8015976:	fb04 f303 	mul.w	r3, r4, r3
 801597a:	fba2 2303 	umull	r2, r3, r2, r3
 801597e:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8015982:	68eb      	ldr	r3, [r5, #12]
 8015984:	4d10      	ldr	r5, [pc, #64]	; (80159c8 <_SetBkColor+0x88>)
 8015986:	42a3      	cmp	r3, r4
 8015988:	d003      	beq.n	8015992 <_SetBkColor+0x52>
 801598a:	b2e0      	uxtb	r0, r4
 801598c:	f001 f850 	bl	8016a30 <GUI_SetAlpha>
 8015990:	60ec      	str	r4, [r5, #12]
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801599e:	4718      	bx	r3
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	d1e2      	bne.n	801596a <_SetBkColor+0x2a>
 80159a4:	6838      	ldr	r0, [r7, #0]
 80159a6:	f7fe fa43 	bl	8013e30 <GUI_DEVICE_Unlink>
 80159aa:	2300      	movs	r3, #0
 80159ac:	60bb      	str	r3, [r7, #8]
 80159ae:	e7dc      	b.n	801596a <_SetBkColor+0x2a>
 80159b0:	4604      	mov	r4, r0
 80159b2:	6028      	str	r0, [r5, #0]
 80159b4:	686b      	ldr	r3, [r5, #4]
 80159b6:	e7cf      	b.n	8015958 <_SetBkColor+0x18>
 80159b8:	6838      	ldr	r0, [r7, #0]
 80159ba:	f7fe fa5b 	bl	8013e74 <GUI_DEVICE_Link>
 80159be:	2301      	movs	r3, #1
 80159c0:	60bb      	str	r3, [r7, #8]
 80159c2:	e7d2      	b.n	801596a <_SetBkColor+0x2a>
 80159c4:	20000018 	.word	0x20000018
 80159c8:	2000001c 	.word	0x2000001c
 80159cc:	2000028c 	.word	0x2000028c
 80159d0:	80808081 	.word	0x80808081

080159d4 <_SetColor>:
 80159d4:	4b20      	ldr	r3, [pc, #128]	; (8015a58 <_SetColor+0x84>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159dc:	7c1b      	ldrb	r3, [r3, #16]
 80159de:	4606      	mov	r6, r0
 80159e0:	4d1e      	ldr	r5, [pc, #120]	; (8015a5c <_SetColor+0x88>)
 80159e2:	075b      	lsls	r3, r3, #29
 80159e4:	d42e      	bmi.n	8015a44 <_SetColor+0x70>
 80159e6:	4604      	mov	r4, r0
 80159e8:	686b      	ldr	r3, [r5, #4]
 80159ea:	6028      	str	r0, [r5, #0]
 80159ec:	0e24      	lsrs	r4, r4, #24
 80159ee:	4f1c      	ldr	r7, [pc, #112]	; (8015a60 <_SetColor+0x8c>)
 80159f0:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 80159f4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	d01b      	beq.n	8015a34 <_SetColor+0x60>
 80159fc:	b333      	cbz	r3, 8015a4c <_SetColor+0x78>
 80159fe:	68ab      	ldr	r3, [r5, #8]
 8015a00:	2bfe      	cmp	r3, #254	; 0xfe
 8015a02:	d808      	bhi.n	8015a16 <_SetColor+0x42>
 8015a04:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015a08:	4a16      	ldr	r2, [pc, #88]	; (8015a64 <_SetColor+0x90>)
 8015a0a:	fb04 f303 	mul.w	r3, r4, r3
 8015a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8015a12:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8015a16:	68eb      	ldr	r3, [r5, #12]
 8015a18:	4d10      	ldr	r5, [pc, #64]	; (8015a5c <_SetColor+0x88>)
 8015a1a:	42a3      	cmp	r3, r4
 8015a1c:	d003      	beq.n	8015a26 <_SetColor+0x52>
 8015a1e:	b2e0      	uxtb	r0, r4
 8015a20:	f001 f806 	bl	8016a30 <GUI_SetAlpha>
 8015a24:	60ec      	str	r4, [r5, #12]
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a32:	4718      	bx	r3
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d1e2      	bne.n	80159fe <_SetColor+0x2a>
 8015a38:	6838      	ldr	r0, [r7, #0]
 8015a3a:	f7fe f9f9 	bl	8013e30 <GUI_DEVICE_Unlink>
 8015a3e:	2300      	movs	r3, #0
 8015a40:	60bb      	str	r3, [r7, #8]
 8015a42:	e7dc      	b.n	80159fe <_SetColor+0x2a>
 8015a44:	4603      	mov	r3, r0
 8015a46:	6068      	str	r0, [r5, #4]
 8015a48:	682c      	ldr	r4, [r5, #0]
 8015a4a:	e7cf      	b.n	80159ec <_SetColor+0x18>
 8015a4c:	6838      	ldr	r0, [r7, #0]
 8015a4e:	f7fe fa11 	bl	8013e74 <GUI_DEVICE_Link>
 8015a52:	2301      	movs	r3, #1
 8015a54:	60bb      	str	r3, [r7, #8]
 8015a56:	e7d2      	b.n	80159fe <_SetColor+0x2a>
 8015a58:	20000018 	.word	0x20000018
 8015a5c:	2000001c 	.word	0x2000001c
 8015a60:	2000028c 	.word	0x2000028c
 8015a64:	80808081 	.word	0x80808081

08015a68 <_SetDrawMode>:
 8015a68:	4b21      	ldr	r3, [pc, #132]	; (8015af0 <_SetDrawMode+0x88>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a70:	7c1b      	ldrb	r3, [r3, #16]
 8015a72:	4606      	mov	r6, r0
 8015a74:	4f1f      	ldr	r7, [pc, #124]	; (8015af4 <_SetDrawMode+0x8c>)
 8015a76:	4043      	eors	r3, r0
 8015a78:	075b      	lsls	r3, r3, #29
 8015a7a:	d52f      	bpl.n	8015adc <_SetDrawMode+0x74>
 8015a7c:	e897 0014 	ldmia.w	r7, {r2, r4}
 8015a80:	4613      	mov	r3, r2
 8015a82:	607a      	str	r2, [r7, #4]
 8015a84:	603c      	str	r4, [r7, #0]
 8015a86:	0e24      	lsrs	r4, r4, #24
 8015a88:	4d1b      	ldr	r5, [pc, #108]	; (8015af8 <_SetDrawMode+0x90>)
 8015a8a:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8015a8e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8015a92:	68ab      	ldr	r3, [r5, #8]
 8015a94:	d01a      	beq.n	8015acc <_SetDrawMode+0x64>
 8015a96:	b323      	cbz	r3, 8015ae2 <_SetDrawMode+0x7a>
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8015a9c:	d808      	bhi.n	8015ab0 <_SetDrawMode+0x48>
 8015a9e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015aa2:	4a16      	ldr	r2, [pc, #88]	; (8015afc <_SetDrawMode+0x94>)
 8015aa4:	fb04 f303 	mul.w	r3, r4, r3
 8015aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8015aac:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	4f10      	ldr	r7, [pc, #64]	; (8015af4 <_SetDrawMode+0x8c>)
 8015ab4:	42a3      	cmp	r3, r4
 8015ab6:	d003      	beq.n	8015ac0 <_SetDrawMode+0x58>
 8015ab8:	b2e0      	uxtb	r0, r4
 8015aba:	f000 ffb9 	bl	8016a30 <GUI_SetAlpha>
 8015abe:	60fc      	str	r4, [r7, #12]
 8015ac0:	68eb      	ldr	r3, [r5, #12]
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	689b      	ldr	r3, [r3, #8]
 8015ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aca:	4718      	bx	r3
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d1e3      	bne.n	8015a98 <_SetDrawMode+0x30>
 8015ad0:	6828      	ldr	r0, [r5, #0]
 8015ad2:	f7fe f9ad 	bl	8013e30 <GUI_DEVICE_Unlink>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	60ab      	str	r3, [r5, #8]
 8015ada:	e7dd      	b.n	8015a98 <_SetDrawMode+0x30>
 8015adc:	683c      	ldr	r4, [r7, #0]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	e7d1      	b.n	8015a86 <_SetDrawMode+0x1e>
 8015ae2:	6828      	ldr	r0, [r5, #0]
 8015ae4:	f7fe f9c6 	bl	8013e74 <GUI_DEVICE_Link>
 8015ae8:	2301      	movs	r3, #1
 8015aea:	60ab      	str	r3, [r5, #8]
 8015aec:	e7d4      	b.n	8015a98 <_SetDrawMode+0x30>
 8015aee:	bf00      	nop
 8015af0:	20000018 	.word	0x20000018
 8015af4:	2000001c 	.word	0x2000001c
 8015af8:	2000028c 	.word	0x2000028c
 8015afc:	80808081 	.word	0x80808081

08015b00 <_DrawBitmap>:
 8015b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b04:	b091      	sub	sp, #68	; 0x44
 8015b06:	4607      	mov	r7, r0
 8015b08:	4689      	mov	r9, r1
 8015b0a:	4698      	mov	r8, r3
 8015b0c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8015b0e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015b10:	2c01      	cmp	r4, #1
 8015b12:	9208      	str	r2, [sp, #32]
 8015b14:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8015b18:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8015b1c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8015b1e:	9007      	str	r0, [sp, #28]
 8015b20:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8015b24:	d017      	beq.n	8015b56 <_DrawBitmap+0x56>
 8015b26:	6838      	ldr	r0, [r7, #0]
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	f000 8120 	beq.w	8015d6e <_DrawBitmap+0x26e>
 8015b2e:	9e07      	ldr	r6, [sp, #28]
 8015b30:	4643      	mov	r3, r8
 8015b32:	68c7      	ldr	r7, [r0, #12]
 8015b34:	4649      	mov	r1, r9
 8015b36:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 8015b3a:	961e      	str	r6, [sp, #120]	; 0x78
 8015b3c:	951d      	str	r5, [sp, #116]	; 0x74
 8015b3e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 8015b42:	941b      	str	r4, [sp, #108]	; 0x6c
 8015b44:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8015b48:	687c      	ldr	r4, [r7, #4]
 8015b4a:	9a08      	ldr	r2, [sp, #32]
 8015b4c:	46a4      	mov	ip, r4
 8015b4e:	b011      	add	sp, #68	; 0x44
 8015b50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b54:	4760      	bx	ip
 8015b56:	48a1      	ldr	r0, [pc, #644]	; (8015ddc <_DrawBitmap+0x2dc>)
 8015b58:	6800      	ldr	r0, [r0, #0]
 8015b5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8015b5c:	4576      	cmp	r6, lr
 8015b5e:	9609      	str	r6, [sp, #36]	; 0x24
 8015b60:	d1e1      	bne.n	8015b26 <_DrawBitmap+0x26>
 8015b62:	7c06      	ldrb	r6, [r0, #16]
 8015b64:	960b      	str	r6, [sp, #44]	; 0x2c
 8015b66:	2e00      	cmp	r6, #0
 8015b68:	d1dd      	bne.n	8015b26 <_DrawBitmap+0x26>
 8015b6a:	f04f 0e02 	mov.w	lr, #2
 8015b6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8015b70:	f880 e010 	strb.w	lr, [r0, #16]
 8015b74:	6838      	ldr	r0, [r7, #0]
 8015b76:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8015b7a:	9605      	str	r6, [sp, #20]
 8015b7c:	9e07      	ldr	r6, [sp, #28]
 8015b7e:	9503      	str	r5, [sp, #12]
 8015b80:	9604      	str	r6, [sp, #16]
 8015b82:	f8cd b008 	str.w	fp, [sp, #8]
 8015b86:	9401      	str	r4, [sp, #4]
 8015b88:	f8cd a000 	str.w	sl, [sp]
 8015b8c:	f8de 6004 	ldr.w	r6, [lr, #4]
 8015b90:	47b0      	blx	r6
 8015b92:	4b92      	ldr	r3, [pc, #584]	; (8015ddc <_DrawBitmap+0x2dc>)
 8015b94:	4a92      	ldr	r2, [pc, #584]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8015b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015ba0:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8015ba4:	6816      	ldr	r6, [r2, #0]
 8015ba6:	4b8e      	ldr	r3, [pc, #568]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015ba8:	f8d0 e000 	ldr.w	lr, [r0]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	6006      	str	r6, [r0, #0]
 8015bb0:	488b      	ldr	r0, [pc, #556]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015bb2:	f8c2 e000 	str.w	lr, [r2]
 8015bb6:	f8c0 c000 	str.w	ip, [r0]
 8015bba:	eb01 6013 	add.w	r0, r1, r3, lsr #24
 8015bbe:	4a88      	ldr	r2, [pc, #544]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015bc0:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8015bc4:	6053      	str	r3, [r2, #4]
 8015bc6:	4b87      	ldr	r3, [pc, #540]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015bc8:	930a      	str	r3, [sp, #40]	; 0x28
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	f000 80eb 	beq.w	8015da6 <_DrawBitmap+0x2a6>
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 80fa 	beq.w	8015dca <_DrawBitmap+0x2ca>
 8015bd6:	4b82      	ldr	r3, [pc, #520]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015bd8:	689b      	ldr	r3, [r3, #8]
 8015bda:	2bfe      	cmp	r3, #254	; 0xfe
 8015bdc:	d808      	bhi.n	8015bf0 <_DrawBitmap+0xf0>
 8015bde:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015be2:	4a81      	ldr	r2, [pc, #516]	; (8015de8 <_DrawBitmap+0x2e8>)
 8015be4:	fb01 f303 	mul.w	r3, r1, r3
 8015be8:	fba2 2303 	umull	r2, r3, r2, r3
 8015bec:	eba1 11d3 	sub.w	r1, r1, r3, lsr #7
 8015bf0:	4b7b      	ldr	r3, [pc, #492]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015bf2:	4c7b      	ldr	r4, [pc, #492]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015bf4:	68db      	ldr	r3, [r3, #12]
 8015bf6:	428b      	cmp	r3, r1
 8015bf8:	d005      	beq.n	8015c06 <_DrawBitmap+0x106>
 8015bfa:	b2c8      	uxtb	r0, r1
 8015bfc:	910b      	str	r1, [sp, #44]	; 0x2c
 8015bfe:	f000 ff17 	bl	8016a30 <GUI_SetAlpha>
 8015c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c04:	60e1      	str	r1, [r4, #12]
 8015c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c08:	6858      	ldr	r0, [r3, #4]
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	4b75      	ldr	r3, [pc, #468]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d078      	beq.n	8015d06 <_DrawBitmap+0x206>
 8015c14:	691f      	ldr	r7, [r3, #16]
 8015c16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015c1a:	9e08      	ldr	r6, [sp, #32]
 8015c1c:	45bb      	cmp	fp, r7
 8015c1e:	9108      	str	r1, [sp, #32]
 8015c20:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015c24:	bfd4      	ite	le
 8015c26:	465f      	movle	r7, fp
 8015c28:	ea4f 08c7 	movgt.w	r8, r7, lsl #3
 8015c2c:	1f3b      	subs	r3, r7, #4
 8015c2e:	1e7a      	subs	r2, r7, #1
 8015c30:	089b      	lsrs	r3, r3, #2
 8015c32:	920d      	str	r2, [sp, #52]	; 0x34
 8015c34:	eb0a 0206 	add.w	r2, sl, r6
 8015c38:	3301      	adds	r3, #1
 8015c3a:	920b      	str	r2, [sp, #44]	; 0x2c
 8015c3c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015c40:	930e      	str	r3, [sp, #56]	; 0x38
 8015c42:	ebca 0307 	rsb	r3, sl, r7
 8015c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c48:	e043      	b.n	8015cd2 <_DrawBitmap+0x1d2>
 8015c4a:	f1a5 0e04 	sub.w	lr, r5, #4
 8015c4e:	4601      	mov	r1, r0
 8015c50:	2200      	movs	r2, #0
 8015c52:	9c08      	ldr	r4, [sp, #32]
 8015c54:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8015c58:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8015c5c:	3201      	adds	r2, #1
 8015c5e:	43db      	mvns	r3, r3
 8015c60:	4562      	cmp	r2, ip
 8015c62:	f841 3b04 	str.w	r3, [r1], #4
 8015c66:	d3f7      	bcc.n	8015c58 <_DrawBitmap+0x158>
 8015c68:	45ba      	cmp	sl, r7
 8015c6a:	9408      	str	r4, [sp, #32]
 8015c6c:	eb05 020a 	add.w	r2, r5, sl
 8015c70:	eb00 030a 	add.w	r3, r0, sl
 8015c74:	d012      	beq.n	8015c9c <_DrawBitmap+0x19c>
 8015c76:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8015c7a:	7811      	ldrb	r1, [r2, #0]
 8015c7c:	f1be 0f01 	cmp.w	lr, #1
 8015c80:	ea6f 0101 	mvn.w	r1, r1
 8015c84:	7019      	strb	r1, [r3, #0]
 8015c86:	d009      	beq.n	8015c9c <_DrawBitmap+0x19c>
 8015c88:	7851      	ldrb	r1, [r2, #1]
 8015c8a:	f1be 0f02 	cmp.w	lr, #2
 8015c8e:	ea6f 0101 	mvn.w	r1, r1
 8015c92:	7059      	strb	r1, [r3, #1]
 8015c94:	d002      	beq.n	8015c9c <_DrawBitmap+0x19c>
 8015c96:	7892      	ldrb	r2, [r2, #2]
 8015c98:	43d2      	mvns	r2, r2
 8015c9a:	709a      	strb	r2, [r3, #2]
 8015c9c:	9c08      	ldr	r4, [sp, #32]
 8015c9e:	4643      	mov	r3, r8
 8015ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ca2:	445d      	add	r5, fp
 8015ca4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8015ca8:	9907      	ldr	r1, [sp, #28]
 8015caa:	9003      	str	r0, [sp, #12]
 8015cac:	4620      	mov	r0, r4
 8015cae:	2401      	movs	r4, #1
 8015cb0:	9205      	str	r2, [sp, #20]
 8015cb2:	9104      	str	r1, [sp, #16]
 8015cb4:	4632      	mov	r2, r6
 8015cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8015cba:	9401      	str	r4, [sp, #4]
 8015cbc:	9400      	str	r4, [sp, #0]
 8015cbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015cc0:	f8de 9004 	ldr.w	r9, [lr, #4]
 8015cc4:	47c8      	blx	r9
 8015cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cc8:	429e      	cmp	r6, r3
 8015cca:	d01c      	beq.n	8015d06 <_DrawBitmap+0x206>
 8015ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cce:	4426      	add	r6, r4
 8015cd0:	6858      	ldr	r0, [r3, #4]
 8015cd2:	1d2b      	adds	r3, r5, #4
 8015cd4:	1d02      	adds	r2, r0, #4
 8015cd6:	4295      	cmp	r5, r2
 8015cd8:	bf38      	it	cc
 8015cda:	4298      	cmpcc	r0, r3
 8015cdc:	bf2c      	ite	cs
 8015cde:	2301      	movcs	r3, #1
 8015ce0:	2300      	movcc	r3, #0
 8015ce2:	2f06      	cmp	r7, #6
 8015ce4:	bf94      	ite	ls
 8015ce6:	2300      	movls	r3, #0
 8015ce8:	f003 0301 	andhi.w	r3, r3, #1
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d041      	beq.n	8015d74 <_DrawBitmap+0x274>
 8015cf0:	ea40 0305 	orr.w	r3, r0, r5
 8015cf4:	079b      	lsls	r3, r3, #30
 8015cf6:	d13d      	bne.n	8015d74 <_DrawBitmap+0x274>
 8015cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cfa:	2b02      	cmp	r3, #2
 8015cfc:	d8a5      	bhi.n	8015c4a <_DrawBitmap+0x14a>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	462a      	mov	r2, r5
 8015d02:	46be      	mov	lr, r7
 8015d04:	e7b9      	b.n	8015c7a <_DrawBitmap+0x17a>
 8015d06:	4b35      	ldr	r3, [pc, #212]	; (8015ddc <_DrawBitmap+0x2dc>)
 8015d08:	4a35      	ldr	r2, [pc, #212]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	6851      	ldr	r1, [r2, #4]
 8015d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d10:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015d12:	0e0c      	lsrs	r4, r1, #24
 8015d14:	6810      	ldr	r0, [r2, #0]
 8015d16:	4b32      	ldr	r3, [pc, #200]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d18:	682e      	ldr	r6, [r5, #0]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	6028      	str	r0, [r5, #0]
 8015d1e:	4830      	ldr	r0, [pc, #192]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d20:	6016      	str	r6, [r2, #0]
 8015d22:	6001      	str	r1, [r0, #0]
 8015d24:	eb04 6113 	add.w	r1, r4, r3, lsr #24
 8015d28:	6043      	str	r3, [r0, #4]
 8015d2a:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 8015d2e:	d02f      	beq.n	8015d90 <_DrawBitmap+0x290>
 8015d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d32:	4d2c      	ldr	r5, [pc, #176]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015d34:	689b      	ldr	r3, [r3, #8]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d041      	beq.n	8015dbe <_DrawBitmap+0x2be>
 8015d3a:	4b29      	ldr	r3, [pc, #164]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	2bfe      	cmp	r3, #254	; 0xfe
 8015d40:	d808      	bhi.n	8015d54 <_DrawBitmap+0x254>
 8015d42:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015d46:	4a28      	ldr	r2, [pc, #160]	; (8015de8 <_DrawBitmap+0x2e8>)
 8015d48:	fb04 f303 	mul.w	r3, r4, r3
 8015d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8015d50:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8015d54:	4b22      	ldr	r3, [pc, #136]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d56:	4d22      	ldr	r5, [pc, #136]	; (8015de0 <_DrawBitmap+0x2e0>)
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	42a3      	cmp	r3, r4
 8015d5c:	d003      	beq.n	8015d66 <_DrawBitmap+0x266>
 8015d5e:	b2e0      	uxtb	r0, r4
 8015d60:	f000 fe66 	bl	8016a30 <GUI_SetAlpha>
 8015d64:	60ec      	str	r4, [r5, #12]
 8015d66:	4b1d      	ldr	r3, [pc, #116]	; (8015ddc <_DrawBitmap+0x2dc>)
 8015d68:	2200      	movs	r2, #0
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	741a      	strb	r2, [r3, #16]
 8015d6e:	b011      	add	sp, #68	; 0x44
 8015d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d74:	1e41      	subs	r1, r0, #1
 8015d76:	eb05 0e07 	add.w	lr, r5, r7
 8015d7a:	462a      	mov	r2, r5
 8015d7c:	9c08      	ldr	r4, [sp, #32]
 8015d7e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015d82:	43db      	mvns	r3, r3
 8015d84:	4572      	cmp	r2, lr
 8015d86:	f801 3f01 	strb.w	r3, [r1, #1]!
 8015d8a:	d1f8      	bne.n	8015d7e <_DrawBitmap+0x27e>
 8015d8c:	9408      	str	r4, [sp, #32]
 8015d8e:	e785      	b.n	8015c9c <_DrawBitmap+0x19c>
 8015d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d92:	4d14      	ldr	r5, [pc, #80]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015d94:	689b      	ldr	r3, [r3, #8]
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d1cf      	bne.n	8015d3a <_DrawBitmap+0x23a>
 8015d9a:	6828      	ldr	r0, [r5, #0]
 8015d9c:	f7fe f848 	bl	8013e30 <GUI_DEVICE_Unlink>
 8015da0:	2300      	movs	r3, #0
 8015da2:	60ab      	str	r3, [r5, #8]
 8015da4:	e7c9      	b.n	8015d3a <_DrawBitmap+0x23a>
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	f47f af15 	bne.w	8015bd6 <_DrawBitmap+0xd6>
 8015dac:	4c0d      	ldr	r4, [pc, #52]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015dae:	910c      	str	r1, [sp, #48]	; 0x30
 8015db0:	6820      	ldr	r0, [r4, #0]
 8015db2:	f7fe f83d 	bl	8013e30 <GUI_DEVICE_Unlink>
 8015db6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015db8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015dba:	60a2      	str	r2, [r4, #8]
 8015dbc:	e70b      	b.n	8015bd6 <_DrawBitmap+0xd6>
 8015dbe:	6828      	ldr	r0, [r5, #0]
 8015dc0:	f7fe f858 	bl	8013e74 <GUI_DEVICE_Link>
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	60ab      	str	r3, [r5, #8]
 8015dc8:	e7b7      	b.n	8015d3a <_DrawBitmap+0x23a>
 8015dca:	4e06      	ldr	r6, [pc, #24]	; (8015de4 <_DrawBitmap+0x2e4>)
 8015dcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8015dce:	6830      	ldr	r0, [r6, #0]
 8015dd0:	f7fe f850 	bl	8013e74 <GUI_DEVICE_Link>
 8015dd4:	60b4      	str	r4, [r6, #8]
 8015dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dd8:	e6fd      	b.n	8015bd6 <_DrawBitmap+0xd6>
 8015dda:	bf00      	nop
 8015ddc:	20000018 	.word	0x20000018
 8015de0:	2000001c 	.word	0x2000001c
 8015de4:	2000028c 	.word	0x2000028c
 8015de8:	80808081 	.word	0x80808081

08015dec <GUI_EnableAlpha>:
 8015dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dee:	4c27      	ldr	r4, [pc, #156]	; (8015e8c <GUI_EnableAlpha+0xa0>)
 8015df0:	4606      	mov	r6, r0
 8015df2:	f001 ffa1 	bl	8017d38 <GUI_Lock>
 8015df6:	6825      	ldr	r5, [r4, #0]
 8015df8:	b345      	cbz	r5, 8015e4c <GUI_EnableAlpha+0x60>
 8015dfa:	b13e      	cbz	r6, 8015e0c <GUI_EnableAlpha+0x20>
 8015dfc:	68e4      	ldr	r4, [r4, #12]
 8015dfe:	4b23      	ldr	r3, [pc, #140]	; (8015e8c <GUI_EnableAlpha+0xa0>)
 8015e00:	b1bc      	cbz	r4, 8015e32 <GUI_EnableAlpha+0x46>
 8015e02:	2401      	movs	r4, #1
 8015e04:	f001 ff8e 	bl	8017d24 <GUI_Unlock>
 8015e08:	4620      	mov	r0, r4
 8015e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e0c:	68e3      	ldr	r3, [r4, #12]
 8015e0e:	4a1f      	ldr	r2, [pc, #124]	; (8015e8c <GUI_EnableAlpha+0xa0>)
 8015e10:	b153      	cbz	r3, 8015e28 <GUI_EnableAlpha+0x3c>
 8015e12:	491f      	ldr	r1, [pc, #124]	; (8015e90 <GUI_EnableAlpha+0xa4>)
 8015e14:	2401      	movs	r4, #1
 8015e16:	7f10      	ldrb	r0, [r2, #28]
 8015e18:	60d6      	str	r6, [r2, #12]
 8015e1a:	600b      	str	r3, [r1, #0]
 8015e1c:	f000 fe08 	bl	8016a30 <GUI_SetAlpha>
 8015e20:	f001 ff80 	bl	8017d24 <GUI_Unlock>
 8015e24:	4620      	mov	r0, r4
 8015e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e28:	4634      	mov	r4, r6
 8015e2a:	f001 ff7b 	bl	8017d24 <GUI_Unlock>
 8015e2e:	4620      	mov	r0, r4
 8015e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e32:	4917      	ldr	r1, [pc, #92]	; (8015e90 <GUI_EnableAlpha+0xa4>)
 8015e34:	4817      	ldr	r0, [pc, #92]	; (8015e94 <GUI_EnableAlpha+0xa8>)
 8015e36:	4a18      	ldr	r2, [pc, #96]	; (8015e98 <GUI_EnableAlpha+0xac>)
 8015e38:	680f      	ldr	r7, [r1, #0]
 8015e3a:	6805      	ldr	r5, [r0, #0]
 8015e3c:	4e17      	ldr	r6, [pc, #92]	; (8015e9c <GUI_EnableAlpha+0xb0>)
 8015e3e:	6810      	ldr	r0, [r2, #0]
 8015e40:	4a17      	ldr	r2, [pc, #92]	; (8015ea0 <GUI_EnableAlpha+0xb4>)
 8015e42:	60df      	str	r7, [r3, #12]
 8015e44:	600e      	str	r6, [r1, #0]
 8015e46:	6015      	str	r5, [r2, #0]
 8015e48:	6050      	str	r0, [r2, #4]
 8015e4a:	e7db      	b.n	8015e04 <GUI_EnableAlpha+0x18>
 8015e4c:	4b15      	ldr	r3, [pc, #84]	; (8015ea4 <GUI_EnableAlpha+0xb8>)
 8015e4e:	4620      	mov	r0, r4
 8015e50:	f840 3f14 	str.w	r3, [r0, #20]!
 8015e54:	f7fd ff68 	bl	8013d28 <GUI__RegisterExit>
 8015e58:	2001      	movs	r0, #1
 8015e5a:	f000 fde9 	bl	8016a30 <GUI_SetAlpha>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	b2c0      	uxtb	r0, r0
 8015e62:	61e3      	str	r3, [r4, #28]
 8015e64:	f000 fde4 	bl	8016a30 <GUI_SetAlpha>
 8015e68:	490f      	ldr	r1, [pc, #60]	; (8015ea8 <GUI_EnableAlpha+0xbc>)
 8015e6a:	462b      	mov	r3, r5
 8015e6c:	462a      	mov	r2, r5
 8015e6e:	f101 0018 	add.w	r0, r1, #24
 8015e72:	f7fd ffaf 	bl	8013dd4 <GUI_DEVICE_Create>
 8015e76:	6020      	str	r0, [r4, #0]
 8015e78:	f004 fc1c 	bl	801a6b4 <LCD_GetVXSizeMax>
 8015e7c:	3007      	adds	r0, #7
 8015e7e:	08c3      	lsrs	r3, r0, #3
 8015e80:	4618      	mov	r0, r3
 8015e82:	6123      	str	r3, [r4, #16]
 8015e84:	f7fc fbfa 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8015e88:	6060      	str	r0, [r4, #4]
 8015e8a:	e7b6      	b.n	8015dfa <GUI_EnableAlpha+0xe>
 8015e8c:	2000028c 	.word	0x2000028c
 8015e90:	2000005c 	.word	0x2000005c
 8015e94:	20000010 	.word	0x20000010
 8015e98:	20000014 	.word	0x20000014
 8015e9c:	08026af8 	.word	0x08026af8
 8015ea0:	2000001c 	.word	0x2000001c
 8015ea4:	080157ed 	.word	0x080157ed
 8015ea8:	08026aac 	.word	0x08026aac

08015eac <GL_FillPolygon>:
 8015eac:	2900      	cmp	r1, #0
 8015eae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb2:	b087      	sub	sp, #28
 8015eb4:	f340 82e4 	ble.w	8016480 <GL_FillPolygon+0x5d4>
 8015eb8:	4c1e      	ldr	r4, [pc, #120]	; (8015f34 <GL_FillPolygon+0x88>)
 8015eba:	4605      	mov	r5, r0
 8015ebc:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
 8015ec0:	4627      	mov	r7, r4
 8015ec2:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8015ec6:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8015eca:	3504      	adds	r5, #4
 8015ecc:	42b4      	cmp	r4, r6
 8015ece:	bfa8      	it	ge
 8015ed0:	4634      	movge	r4, r6
 8015ed2:	42b7      	cmp	r7, r6
 8015ed4:	bfb8      	it	lt
 8015ed6:	4637      	movlt	r7, r6
 8015ed8:	45ae      	cmp	lr, r5
 8015eda:	d1f4      	bne.n	8015ec6 <GL_FillPolygon+0x1a>
 8015edc:	9704      	str	r7, [sp, #16]
 8015ede:	4d16      	ldr	r5, [pc, #88]	; (8015f38 <GL_FillPolygon+0x8c>)
 8015ee0:	682d      	ldr	r5, [r5, #0]
 8015ee2:	696d      	ldr	r5, [r5, #20]
 8015ee4:	b175      	cbz	r5, 8015f04 <GL_FillPolygon+0x58>
 8015ee6:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8015eea:	9f04      	ldr	r7, [sp, #16]
 8015eec:	1af6      	subs	r6, r6, r3
 8015eee:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8015ef2:	42b7      	cmp	r7, r6
 8015ef4:	eba5 0503 	sub.w	r5, r5, r3
 8015ef8:	bfa8      	it	ge
 8015efa:	4637      	movge	r7, r6
 8015efc:	42ac      	cmp	r4, r5
 8015efe:	bfb8      	it	lt
 8015f00:	462c      	movlt	r4, r5
 8015f02:	9704      	str	r7, [sp, #16]
 8015f04:	9d04      	ldr	r5, [sp, #16]
 8015f06:	42ac      	cmp	r4, r5
 8015f08:	f300 8269 	bgt.w	80163de <GL_FillPolygon+0x532>
 8015f0c:	4693      	mov	fp, r2
 8015f0e:	4606      	mov	r6, r0
 8015f10:	1e4d      	subs	r5, r1, #1
 8015f12:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8015f3c <GL_FillPolygon+0x90>
 8015f16:	468a      	mov	sl, r1
 8015f18:	9305      	str	r3, [sp, #20]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	4b07      	ldr	r3, [pc, #28]	; (8015f3c <GL_FillPolygon+0x90>)
 8015f1e:	4592      	cmp	sl, r2
 8015f20:	601a      	str	r2, [r3, #0]
 8015f22:	f340 8257 	ble.w	80163d4 <GL_FillPolygon+0x528>
 8015f26:	9b05      	ldr	r3, [sp, #20]
 8015f28:	f8cd b00c 	str.w	fp, [sp, #12]
 8015f2c:	4423      	add	r3, r4
 8015f2e:	9302      	str	r3, [sp, #8]
 8015f30:	e0eb      	b.n	801610a <GL_FillPolygon+0x25e>
 8015f32:	bf00      	nop
 8015f34:	ffffc001 	.word	0xffffc001
 8015f38:	20000018 	.word	0x20000018
 8015f3c:	200002ac 	.word	0x200002ac
 8015f40:	45a6      	cmp	lr, r4
 8015f42:	f000 80de 	beq.w	8016102 <GL_FillPolygon+0x256>
 8015f46:	db01      	blt.n	8015f4c <GL_FillPolygon+0xa0>
 8015f48:	42a0      	cmp	r0, r4
 8015f4a:	dd05      	ble.n	8015f58 <GL_FillPolygon+0xac>
 8015f4c:	42a0      	cmp	r0, r4
 8015f4e:	f2c0 80d8 	blt.w	8016102 <GL_FillPolygon+0x256>
 8015f52:	45a6      	cmp	lr, r4
 8015f54:	f300 80d5 	bgt.w	8016102 <GL_FillPolygon+0x256>
 8015f58:	4570      	cmp	r0, lr
 8015f5a:	f300 8243 	bgt.w	80163e4 <GL_FillPolygon+0x538>
 8015f5e:	45a6      	cmp	lr, r4
 8015f60:	f2c0 80cf 	blt.w	8016102 <GL_FillPolygon+0x256>
 8015f64:	42a0      	cmp	r0, r4
 8015f66:	f300 80cc 	bgt.w	8016102 <GL_FillPolygon+0x256>
 8015f6a:	f936 b022 	ldrsh.w	fp, [r6, r2, lsl #2]
 8015f6e:	f9bc 3000 	ldrsh.w	r3, [ip]
 8015f72:	ebcb 0203 	rsb	r2, fp, r3
 8015f76:	ebc8 0304 	rsb	r3, r8, r4
 8015f7a:	ebc8 0e0e 	rsb	lr, r8, lr
 8015f7e:	fb03 f302 	mul.w	r3, r3, r2
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	f340 8258 	ble.w	8016438 <GL_FillPolygon+0x58c>
 8015f88:	eb03 016e 	add.w	r1, r3, lr, asr #1
 8015f8c:	4bdf      	ldr	r3, [pc, #892]	; (801630c <GL_FillPolygon+0x460>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	2b0b      	cmp	r3, #11
 8015f92:	f300 80b6 	bgt.w	8016102 <GL_FillPolygon+0x256>
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	fb91 f1fe 	sdiv	r1, r1, lr
 8015f9c:	eb01 020b 	add.w	r2, r1, fp
 8015fa0:	9201      	str	r2, [sp, #4]
 8015fa2:	f340 8236 	ble.w	8016412 <GL_FillPolygon+0x566>
 8015fa6:	1e58      	subs	r0, r3, #1
 8015fa8:	4611      	mov	r1, r2
 8015faa:	0042      	lsls	r2, r0, #1
 8015fac:	eb09 0e02 	add.w	lr, r9, r2
 8015fb0:	f9be c004 	ldrsh.w	ip, [lr, #4]
 8015fb4:	4561      	cmp	r1, ip
 8015fb6:	f300 824f 	bgt.w	8016458 <GL_FillPolygon+0x5ac>
 8015fba:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 8015fbe:	f8a8 c004 	strh.w	ip, [r8, #4]
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	f000 8225 	beq.w	8016412 <GL_FillPolygon+0x566>
 8015fc8:	1e98      	subs	r0, r3, #2
 8015fca:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8015fce:	eb09 0c0b 	add.w	ip, r9, fp
 8015fd2:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 8015fd6:	4541      	cmp	r1, r8
 8015fd8:	f300 808c 	bgt.w	80160f4 <GL_FillPolygon+0x248>
 8015fdc:	f8ae 8004 	strh.w	r8, [lr, #4]
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f000 8216 	beq.w	8016412 <GL_FillPolygon+0x566>
 8015fe6:	1ed8      	subs	r0, r3, #3
 8015fe8:	0042      	lsls	r2, r0, #1
 8015fea:	eb09 0802 	add.w	r8, r9, r2
 8015fee:	f9b8 e004 	ldrsh.w	lr, [r8, #4]
 8015ff2:	4571      	cmp	r1, lr
 8015ff4:	f300 822e 	bgt.w	8016454 <GL_FillPolygon+0x5a8>
 8015ff8:	f8ac e004 	strh.w	lr, [ip, #4]
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	f000 8208 	beq.w	8016412 <GL_FillPolygon+0x566>
 8016002:	f1a3 0c04 	sub.w	ip, r3, #4
 8016006:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 801600a:	eb09 000e 	add.w	r0, r9, lr
 801600e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8016012:	4281      	cmp	r1, r0
 8016014:	dc6e      	bgt.n	80160f4 <GL_FillPolygon+0x248>
 8016016:	f8a8 0004 	strh.w	r0, [r8, #4]
 801601a:	f1bc 0f00 	cmp.w	ip, #0
 801601e:	f000 81f8 	beq.w	8016412 <GL_FillPolygon+0x566>
 8016022:	1f58      	subs	r0, r3, #5
 8016024:	49b9      	ldr	r1, [pc, #740]	; (801630c <GL_FillPolygon+0x460>)
 8016026:	0042      	lsls	r2, r0, #1
 8016028:	eb01 0802 	add.w	r8, r1, r2
 801602c:	9901      	ldr	r1, [sp, #4]
 801602e:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 8016032:	4559      	cmp	r1, fp
 8016034:	f300 8218 	bgt.w	8016468 <GL_FillPolygon+0x5bc>
 8016038:	44ce      	add	lr, r9
 801603a:	f8ae b004 	strh.w	fp, [lr, #4]
 801603e:	2800      	cmp	r0, #0
 8016040:	f000 81e7 	beq.w	8016412 <GL_FillPolygon+0x566>
 8016044:	1f98      	subs	r0, r3, #6
 8016046:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 801604a:	eb09 0e0b 	add.w	lr, r9, fp
 801604e:	f9be c004 	ldrsh.w	ip, [lr, #4]
 8016052:	4561      	cmp	r1, ip
 8016054:	dc4e      	bgt.n	80160f4 <GL_FillPolygon+0x248>
 8016056:	f8a8 c004 	strh.w	ip, [r8, #4]
 801605a:	2800      	cmp	r0, #0
 801605c:	f000 81d9 	beq.w	8016412 <GL_FillPolygon+0x566>
 8016060:	1fd8      	subs	r0, r3, #7
 8016062:	0042      	lsls	r2, r0, #1
 8016064:	eb09 0c02 	add.w	ip, r9, r2
 8016068:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 801606c:	4541      	cmp	r1, r8
 801606e:	f300 81f1 	bgt.w	8016454 <GL_FillPolygon+0x5a8>
 8016072:	f8ae 8004 	strh.w	r8, [lr, #4]
 8016076:	2800      	cmp	r0, #0
 8016078:	f000 81cb 	beq.w	8016412 <GL_FillPolygon+0x566>
 801607c:	f1a3 0008 	sub.w	r0, r3, #8
 8016080:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8016084:	eb09 0e08 	add.w	lr, r9, r8
 8016088:	f9be b004 	ldrsh.w	fp, [lr, #4]
 801608c:	4559      	cmp	r1, fp
 801608e:	dc31      	bgt.n	80160f4 <GL_FillPolygon+0x248>
 8016090:	f8ac b004 	strh.w	fp, [ip, #4]
 8016094:	2800      	cmp	r0, #0
 8016096:	f000 81bc 	beq.w	8016412 <GL_FillPolygon+0x566>
 801609a:	f1a3 0009 	sub.w	r0, r3, #9
 801609e:	0042      	lsls	r2, r0, #1
 80160a0:	eb09 0c02 	add.w	ip, r9, r2
 80160a4:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 80160a8:	4561      	cmp	r1, ip
 80160aa:	f300 81db 	bgt.w	8016464 <GL_FillPolygon+0x5b8>
 80160ae:	f8ae c004 	strh.w	ip, [lr, #4]
 80160b2:	2800      	cmp	r0, #0
 80160b4:	f000 81ad 	beq.w	8016412 <GL_FillPolygon+0x566>
 80160b8:	f1a3 000a 	sub.w	r0, r3, #10
 80160bc:	4993      	ldr	r1, [pc, #588]	; (801630c <GL_FillPolygon+0x460>)
 80160be:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80160c2:	eb01 0e0c 	add.w	lr, r1, ip
 80160c6:	9901      	ldr	r1, [sp, #4]
 80160c8:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 80160cc:	4541      	cmp	r1, r8
 80160ce:	dc11      	bgt.n	80160f4 <GL_FillPolygon+0x248>
 80160d0:	444a      	add	r2, r9
 80160d2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80160d6:	2800      	cmp	r0, #0
 80160d8:	f000 819b 	beq.w	8016412 <GL_FillPolygon+0x566>
 80160dc:	f1a3 000b 	sub.w	r0, r3, #11
 80160e0:	0042      	lsls	r2, r0, #1
 80160e2:	eb09 0002 	add.w	r0, r9, r2
 80160e6:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80160ea:	4281      	cmp	r1, r0
 80160ec:	f300 81b8 	bgt.w	8016460 <GL_FillPolygon+0x5b4>
 80160f0:	f8ae 0004 	strh.w	r0, [lr, #4]
 80160f4:	4885      	ldr	r0, [pc, #532]	; (801630c <GL_FillPolygon+0x460>)
 80160f6:	3301      	adds	r3, #1
 80160f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80160fc:	4402      	add	r2, r0
 80160fe:	6003      	str	r3, [r0, #0]
 8016100:	8091      	strh	r1, [r2, #4]
 8016102:	45ba      	cmp	sl, r7
 8016104:	463a      	mov	r2, r7
 8016106:	f340 80ef 	ble.w	80162e8 <GL_FillPolygon+0x43c>
 801610a:	42aa      	cmp	r2, r5
 801610c:	f102 0701 	add.w	r7, r2, #1
 8016110:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8016114:	4613      	mov	r3, r2
 8016116:	bfac      	ite	ge
 8016118:	f04f 0c00 	movge.w	ip, #0
 801611c:	ea4f 0c87 	movlt.w	ip, r7, lsl #2
 8016120:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8016124:	44b4      	add	ip, r6
 8016126:	42a0      	cmp	r0, r4
 8016128:	4680      	mov	r8, r0
 801612a:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801612e:	f47f af07 	bne.w	8015f40 <GL_FillPolygon+0x94>
 8016132:	45a6      	cmp	lr, r4
 8016134:	f000 816f 	beq.w	8016416 <GL_FillPolygon+0x56a>
 8016138:	2d00      	cmp	r5, #0
 801613a:	dde2      	ble.n	8016102 <GL_FillPolygon+0x256>
 801613c:	2100      	movs	r1, #0
 801613e:	b15b      	cbz	r3, 8016158 <GL_FillPolygon+0x2ac>
 8016140:	3b01      	subs	r3, #1
 8016142:	3101      	adds	r1, #1
 8016144:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8016148:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801614c:	42a0      	cmp	r0, r4
 801614e:	d10b      	bne.n	8016168 <GL_FillPolygon+0x2bc>
 8016150:	42a9      	cmp	r1, r5
 8016152:	d0d6      	beq.n	8016102 <GL_FillPolygon+0x256>
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1f3      	bne.n	8016140 <GL_FillPolygon+0x294>
 8016158:	462b      	mov	r3, r5
 801615a:	3101      	adds	r1, #1
 801615c:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8016160:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8016164:	42a0      	cmp	r0, r4
 8016166:	d0f3      	beq.n	8016150 <GL_FillPolygon+0x2a4>
 8016168:	1b00      	subs	r0, r0, r4
 801616a:	ebc4 0e0e 	rsb	lr, r4, lr
 801616e:	f936 2022 	ldrsh.w	r2, [r6, r2, lsl #2]
 8016172:	ea90 0f0e 	teq	r0, lr
 8016176:	f140 8142 	bpl.w	80163fe <GL_FillPolygon+0x552>
 801617a:	4b64      	ldr	r3, [pc, #400]	; (801630c <GL_FillPolygon+0x460>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b0b      	cmp	r3, #11
 8016180:	dcbf      	bgt.n	8016102 <GL_FillPolygon+0x256>
 8016182:	2b00      	cmp	r3, #0
 8016184:	f340 815d 	ble.w	8016442 <GL_FillPolygon+0x596>
 8016188:	1e58      	subs	r0, r3, #1
 801618a:	0041      	lsls	r1, r0, #1
 801618c:	eb09 0c01 	add.w	ip, r9, r1
 8016190:	f9bc e004 	ldrsh.w	lr, [ip, #4]
 8016194:	4572      	cmp	r2, lr
 8016196:	f300 816a 	bgt.w	801646e <GL_FillPolygon+0x5c2>
 801619a:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 801619e:	f8a8 e004 	strh.w	lr, [r8, #4]
 80161a2:	2800      	cmp	r0, #0
 80161a4:	f000 814d 	beq.w	8016442 <GL_FillPolygon+0x596>
 80161a8:	1e98      	subs	r0, r3, #2
 80161aa:	ea4f 0840 	mov.w	r8, r0, lsl #1
 80161ae:	eb09 0e08 	add.w	lr, r9, r8
 80161b2:	f9be b004 	ldrsh.w	fp, [lr, #4]
 80161b6:	455a      	cmp	r2, fp
 80161b8:	f300 808d 	bgt.w	80162d6 <GL_FillPolygon+0x42a>
 80161bc:	f8ac b004 	strh.w	fp, [ip, #4]
 80161c0:	2800      	cmp	r0, #0
 80161c2:	f000 813e 	beq.w	8016442 <GL_FillPolygon+0x596>
 80161c6:	1ed8      	subs	r0, r3, #3
 80161c8:	0041      	lsls	r1, r0, #1
 80161ca:	eb09 0c01 	add.w	ip, r9, r1
 80161ce:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 80161d2:	4562      	cmp	r2, ip
 80161d4:	f300 8152 	bgt.w	801647c <GL_FillPolygon+0x5d0>
 80161d8:	f8ae c004 	strh.w	ip, [lr, #4]
 80161dc:	2800      	cmp	r0, #0
 80161de:	f000 8130 	beq.w	8016442 <GL_FillPolygon+0x596>
 80161e2:	f1a3 0804 	sub.w	r8, r3, #4
 80161e6:	4849      	ldr	r0, [pc, #292]	; (801630c <GL_FillPolygon+0x460>)
 80161e8:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80161ec:	eb00 0e0b 	add.w	lr, r0, fp
 80161f0:	f9be c004 	ldrsh.w	ip, [lr, #4]
 80161f4:	4562      	cmp	r2, ip
 80161f6:	dc6e      	bgt.n	80162d6 <GL_FillPolygon+0x42a>
 80161f8:	4449      	add	r1, r9
 80161fa:	f8a1 c004 	strh.w	ip, [r1, #4]
 80161fe:	f1b8 0f00 	cmp.w	r8, #0
 8016202:	f000 811e 	beq.w	8016442 <GL_FillPolygon+0x596>
 8016206:	1f58      	subs	r0, r3, #5
 8016208:	0041      	lsls	r1, r0, #1
 801620a:	eb09 0c01 	add.w	ip, r9, r1
 801620e:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 8016212:	4542      	cmp	r2, r8
 8016214:	f300 8122 	bgt.w	801645c <GL_FillPolygon+0x5b0>
 8016218:	f8ae 8004 	strh.w	r8, [lr, #4]
 801621c:	2800      	cmp	r0, #0
 801621e:	f000 8110 	beq.w	8016442 <GL_FillPolygon+0x596>
 8016222:	1f98      	subs	r0, r3, #6
 8016224:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8016228:	eb09 0e0b 	add.w	lr, r9, fp
 801622c:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 8016230:	4542      	cmp	r2, r8
 8016232:	dc50      	bgt.n	80162d6 <GL_FillPolygon+0x42a>
 8016234:	f8ac 8004 	strh.w	r8, [ip, #4]
 8016238:	2800      	cmp	r0, #0
 801623a:	f000 8102 	beq.w	8016442 <GL_FillPolygon+0x596>
 801623e:	1fd8      	subs	r0, r3, #7
 8016240:	0041      	lsls	r1, r0, #1
 8016242:	eb09 0801 	add.w	r8, r9, r1
 8016246:	f9b8 c004 	ldrsh.w	ip, [r8, #4]
 801624a:	4562      	cmp	r2, ip
 801624c:	f300 8106 	bgt.w	801645c <GL_FillPolygon+0x5b0>
 8016250:	f8ae c004 	strh.w	ip, [lr, #4]
 8016254:	2800      	cmp	r0, #0
 8016256:	f000 80f4 	beq.w	8016442 <GL_FillPolygon+0x596>
 801625a:	f1a3 0c08 	sub.w	ip, r3, #8
 801625e:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8016262:	eb09 000e 	add.w	r0, r9, lr
 8016266:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801626a:	4282      	cmp	r2, r0
 801626c:	dc33      	bgt.n	80162d6 <GL_FillPolygon+0x42a>
 801626e:	f8a8 0004 	strh.w	r0, [r8, #4]
 8016272:	f1bc 0f00 	cmp.w	ip, #0
 8016276:	f000 80e4 	beq.w	8016442 <GL_FillPolygon+0x596>
 801627a:	f1a3 0009 	sub.w	r0, r3, #9
 801627e:	0041      	lsls	r1, r0, #1
 8016280:	9001      	str	r0, [sp, #4]
 8016282:	4822      	ldr	r0, [pc, #136]	; (801630c <GL_FillPolygon+0x460>)
 8016284:	eb00 0801 	add.w	r8, r0, r1
 8016288:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 801628c:	455a      	cmp	r2, fp
 801628e:	f300 80f0 	bgt.w	8016472 <GL_FillPolygon+0x5c6>
 8016292:	44ce      	add	lr, r9
 8016294:	9801      	ldr	r0, [sp, #4]
 8016296:	f8ae b004 	strh.w	fp, [lr, #4]
 801629a:	2800      	cmp	r0, #0
 801629c:	f000 80d1 	beq.w	8016442 <GL_FillPolygon+0x596>
 80162a0:	f1a3 000a 	sub.w	r0, r3, #10
 80162a4:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 80162a8:	eb09 0e0c 	add.w	lr, r9, ip
 80162ac:	f9be b004 	ldrsh.w	fp, [lr, #4]
 80162b0:	455a      	cmp	r2, fp
 80162b2:	dc10      	bgt.n	80162d6 <GL_FillPolygon+0x42a>
 80162b4:	f8a8 b004 	strh.w	fp, [r8, #4]
 80162b8:	2800      	cmp	r0, #0
 80162ba:	f000 80c2 	beq.w	8016442 <GL_FillPolygon+0x596>
 80162be:	f1a3 010b 	sub.w	r1, r3, #11
 80162c2:	0049      	lsls	r1, r1, #1
 80162c4:	eb09 0001 	add.w	r0, r9, r1
 80162c8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80162cc:	4282      	cmp	r2, r0
 80162ce:	f300 80d3 	bgt.w	8016478 <GL_FillPolygon+0x5cc>
 80162d2:	f8ae 0004 	strh.w	r0, [lr, #4]
 80162d6:	480d      	ldr	r0, [pc, #52]	; (801630c <GL_FillPolygon+0x460>)
 80162d8:	3301      	adds	r3, #1
 80162da:	45ba      	cmp	sl, r7
 80162dc:	4401      	add	r1, r0
 80162de:	6003      	str	r3, [r0, #0]
 80162e0:	808a      	strh	r2, [r1, #4]
 80162e2:	463a      	mov	r2, r7
 80162e4:	f73f af11 	bgt.w	801610a <GL_FillPolygon+0x25e>
 80162e8:	4b08      	ldr	r3, [pc, #32]	; (801630c <GL_FillPolygon+0x460>)
 80162ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	dd6f      	ble.n	80163d4 <GL_FillPolygon+0x528>
 80162f4:	2b01      	cmp	r3, #1
 80162f6:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
 80162fa:	d06b      	beq.n	80163d4 <GL_FillPolygon+0x528>
 80162fc:	4b04      	ldr	r3, [pc, #16]	; (8016310 <GL_FillPolygon+0x464>)
 80162fe:	4458      	add	r0, fp
 8016300:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	9f02      	ldr	r7, [sp, #8]
 8016308:	e004      	b.n	8016314 <GL_FillPolygon+0x468>
 801630a:	bf00      	nop
 801630c:	200002ac 	.word	0x200002ac
 8016310:	20000018 	.word	0x20000018
 8016314:	445a      	add	r2, fp
 8016316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016318:	4639      	mov	r1, r7
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	4798      	blx	r3
 801631e:	f8d9 3000 	ldr.w	r3, [r9]
 8016322:	2b02      	cmp	r3, #2
 8016324:	dd56      	ble.n	80163d4 <GL_FillPolygon+0x528>
 8016326:	2b03      	cmp	r3, #3
 8016328:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 801632c:	d052      	beq.n	80163d4 <GL_FillPolygon+0x528>
 801632e:	4b57      	ldr	r3, [pc, #348]	; (801648c <GL_FillPolygon+0x5e0>)
 8016330:	4458      	add	r0, fp
 8016332:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
 8016336:	4639      	mov	r1, r7
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	445a      	add	r2, fp
 801633c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	4798      	blx	r3
 8016342:	f8d9 3000 	ldr.w	r3, [r9]
 8016346:	2b04      	cmp	r3, #4
 8016348:	dd44      	ble.n	80163d4 <GL_FillPolygon+0x528>
 801634a:	2b05      	cmp	r3, #5
 801634c:	f9b9 000c 	ldrsh.w	r0, [r9, #12]
 8016350:	d040      	beq.n	80163d4 <GL_FillPolygon+0x528>
 8016352:	4b4e      	ldr	r3, [pc, #312]	; (801648c <GL_FillPolygon+0x5e0>)
 8016354:	4458      	add	r0, fp
 8016356:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801635a:	4639      	mov	r1, r7
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	445a      	add	r2, fp
 8016360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	4798      	blx	r3
 8016366:	f8d9 3000 	ldr.w	r3, [r9]
 801636a:	2b06      	cmp	r3, #6
 801636c:	dd32      	ble.n	80163d4 <GL_FillPolygon+0x528>
 801636e:	2b07      	cmp	r3, #7
 8016370:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
 8016374:	d02e      	beq.n	80163d4 <GL_FillPolygon+0x528>
 8016376:	4b45      	ldr	r3, [pc, #276]	; (801648c <GL_FillPolygon+0x5e0>)
 8016378:	4458      	add	r0, fp
 801637a:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
 801637e:	4639      	mov	r1, r7
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	445a      	add	r2, fp
 8016384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	4798      	blx	r3
 801638a:	f8d9 3000 	ldr.w	r3, [r9]
 801638e:	2b08      	cmp	r3, #8
 8016390:	dd20      	ble.n	80163d4 <GL_FillPolygon+0x528>
 8016392:	4a3f      	ldr	r2, [pc, #252]	; (8016490 <GL_FillPolygon+0x5e4>)
 8016394:	2b09      	cmp	r3, #9
 8016396:	f9b2 0014 	ldrsh.w	r0, [r2, #20]
 801639a:	d01b      	beq.n	80163d4 <GL_FillPolygon+0x528>
 801639c:	4b3b      	ldr	r3, [pc, #236]	; (801648c <GL_FillPolygon+0x5e0>)
 801639e:	4458      	add	r0, fp
 80163a0:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 80163a4:	4639      	mov	r1, r7
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	445a      	add	r2, fp
 80163aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	4798      	blx	r3
 80163b0:	f8d9 3000 	ldr.w	r3, [r9]
 80163b4:	2b0a      	cmp	r3, #10
 80163b6:	dd0d      	ble.n	80163d4 <GL_FillPolygon+0x528>
 80163b8:	2b0b      	cmp	r3, #11
 80163ba:	f9b9 0018 	ldrsh.w	r0, [r9, #24]
 80163be:	d009      	beq.n	80163d4 <GL_FillPolygon+0x528>
 80163c0:	4b32      	ldr	r3, [pc, #200]	; (801648c <GL_FillPolygon+0x5e0>)
 80163c2:	4639      	mov	r1, r7
 80163c4:	f9b9 201a 	ldrsh.w	r2, [r9, #26]
 80163c8:	4458      	add	r0, fp
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	445a      	add	r2, fp
 80163ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4798      	blx	r3
 80163d4:	3401      	adds	r4, #1
 80163d6:	9b04      	ldr	r3, [sp, #16]
 80163d8:	42a3      	cmp	r3, r4
 80163da:	f6bf ad9e 	bge.w	8015f1a <GL_FillPolygon+0x6e>
 80163de:	b007      	add	sp, #28
 80163e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163e4:	42a0      	cmp	r0, r4
 80163e6:	f6ff ae8c 	blt.w	8016102 <GL_FillPolygon+0x256>
 80163ea:	45a6      	cmp	lr, r4
 80163ec:	f73f ae89 	bgt.w	8016102 <GL_FillPolygon+0x256>
 80163f0:	46f0      	mov	r8, lr
 80163f2:	f9bc b000 	ldrsh.w	fp, [ip]
 80163f6:	f936 3022 	ldrsh.w	r3, [r6, r2, lsl #2]
 80163fa:	4686      	mov	lr, r0
 80163fc:	e5b9      	b.n	8015f72 <GL_FillPolygon+0xc6>
 80163fe:	4b23      	ldr	r3, [pc, #140]	; (801648c <GL_FillPolygon+0x5e0>)
 8016400:	9903      	ldr	r1, [sp, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	440a      	add	r2, r1
 8016406:	9902      	ldr	r1, [sp, #8]
 8016408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801640a:	4610      	mov	r0, r2
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	4798      	blx	r3
 8016410:	e677      	b.n	8016102 <GL_FillPolygon+0x256>
 8016412:	2200      	movs	r2, #0
 8016414:	e66e      	b.n	80160f4 <GL_FillPolygon+0x248>
 8016416:	f9bc 3000 	ldrsh.w	r3, [ip]
 801641a:	9803      	ldr	r0, [sp, #12]
 801641c:	f936 1022 	ldrsh.w	r1, [r6, r2, lsl #2]
 8016420:	4401      	add	r1, r0
 8016422:	1818      	adds	r0, r3, r0
 8016424:	4b19      	ldr	r3, [pc, #100]	; (801648c <GL_FillPolygon+0x5e0>)
 8016426:	4281      	cmp	r1, r0
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	db0c      	blt.n	8016446 <GL_FillPolygon+0x59a>
 801642c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801642e:	460a      	mov	r2, r1
 8016430:	9902      	ldr	r1, [sp, #8]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4798      	blx	r3
 8016436:	e664      	b.n	8016102 <GL_FillPolygon+0x256>
 8016438:	ea4f 016e 	mov.w	r1, lr, asr #1
 801643c:	3901      	subs	r1, #1
 801643e:	1a59      	subs	r1, r3, r1
 8016440:	e5a4      	b.n	8015f8c <GL_FillPolygon+0xe0>
 8016442:	2100      	movs	r1, #0
 8016444:	e747      	b.n	80162d6 <GL_FillPolygon+0x42a>
 8016446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016448:	4602      	mov	r2, r0
 801644a:	4608      	mov	r0, r1
 801644c:	9902      	ldr	r1, [sp, #8]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	4798      	blx	r3
 8016452:	e656      	b.n	8016102 <GL_FillPolygon+0x256>
 8016454:	465a      	mov	r2, fp
 8016456:	e64d      	b.n	80160f4 <GL_FillPolygon+0x248>
 8016458:	005a      	lsls	r2, r3, #1
 801645a:	e64b      	b.n	80160f4 <GL_FillPolygon+0x248>
 801645c:	4659      	mov	r1, fp
 801645e:	e73a      	b.n	80162d6 <GL_FillPolygon+0x42a>
 8016460:	4662      	mov	r2, ip
 8016462:	e647      	b.n	80160f4 <GL_FillPolygon+0x248>
 8016464:	4642      	mov	r2, r8
 8016466:	e645      	b.n	80160f4 <GL_FillPolygon+0x248>
 8016468:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801646c:	e642      	b.n	80160f4 <GL_FillPolygon+0x248>
 801646e:	0059      	lsls	r1, r3, #1
 8016470:	e731      	b.n	80162d6 <GL_FillPolygon+0x42a>
 8016472:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8016476:	e72e      	b.n	80162d6 <GL_FillPolygon+0x42a>
 8016478:	4661      	mov	r1, ip
 801647a:	e72c      	b.n	80162d6 <GL_FillPolygon+0x42a>
 801647c:	4641      	mov	r1, r8
 801647e:	e72a      	b.n	80162d6 <GL_FillPolygon+0x42a>
 8016480:	4c04      	ldr	r4, [pc, #16]	; (8016494 <GL_FillPolygon+0x5e8>)
 8016482:	9404      	str	r4, [sp, #16]
 8016484:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8016488:	e529      	b.n	8015ede <GL_FillPolygon+0x32>
 801648a:	bf00      	nop
 801648c:	20000018 	.word	0x20000018
 8016490:	200002ac 	.word	0x200002ac
 8016494:	ffffc001 	.word	0xffffc001

08016498 <GUI_FillPolygon>:
 8016498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801649c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8016518 <GUI_FillPolygon+0x80>
 80164a0:	b084      	sub	sp, #16
 80164a2:	4607      	mov	r7, r0
 80164a4:	4688      	mov	r8, r1
 80164a6:	4615      	mov	r5, r2
 80164a8:	461c      	mov	r4, r3
 80164aa:	f001 fc45 	bl	8017d38 <GUI_Lock>
 80164ae:	f8d9 1000 	ldr.w	r1, [r9]
 80164b2:	2000      	movs	r0, #0
 80164b4:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 80164b8:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 80164ba:	f009 ff15 	bl	80202e8 <WM__InitIVRSearch>
 80164be:	b328      	cbz	r0, 801650c <GUI_FillPolygon+0x74>
 80164c0:	4455      	add	r5, sl
 80164c2:	4426      	add	r6, r4
 80164c4:	f8df a054 	ldr.w	sl, [pc, #84]	; 801651c <GUI_FillPolygon+0x84>
 80164c8:	e005      	b.n	80164d6 <GUI_FillPolygon+0x3e>
 80164ca:	9803      	ldr	r0, [sp, #12]
 80164cc:	9600      	str	r6, [sp, #0]
 80164ce:	47a0      	blx	r4
 80164d0:	f009 fde0 	bl	8020094 <WM__GetNextIVR>
 80164d4:	b1d0      	cbz	r0, 801650c <GUI_FillPolygon+0x74>
 80164d6:	f8d9 3000 	ldr.w	r3, [r9]
 80164da:	2111      	movs	r1, #17
 80164dc:	a803      	add	r0, sp, #12
 80164de:	7c5b      	ldrb	r3, [r3, #17]
 80164e0:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 80164e4:	68e3      	ldr	r3, [r4, #12]
 80164e6:	9403      	str	r4, [sp, #12]
 80164e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ea:	4798      	blx	r3
 80164ec:	462b      	mov	r3, r5
 80164ee:	4604      	mov	r4, r0
 80164f0:	4642      	mov	r2, r8
 80164f2:	4639      	mov	r1, r7
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d1e8      	bne.n	80164ca <GUI_FillPolygon+0x32>
 80164f8:	4633      	mov	r3, r6
 80164fa:	462a      	mov	r2, r5
 80164fc:	4641      	mov	r1, r8
 80164fe:	4638      	mov	r0, r7
 8016500:	f7ff fcd4 	bl	8015eac <GL_FillPolygon>
 8016504:	f009 fdc6 	bl	8020094 <WM__GetNextIVR>
 8016508:	2800      	cmp	r0, #0
 801650a:	d1e4      	bne.n	80164d6 <GUI_FillPolygon+0x3e>
 801650c:	f001 fc0a 	bl	8017d24 <GUI_Unlock>
 8016510:	b004      	add	sp, #16
 8016512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016516:	bf00      	nop
 8016518:	20000018 	.word	0x20000018
 801651c:	200467d0 	.word	0x200467d0

08016520 <GUI_FillRoundedRect>:
 8016520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016524:	b08b      	sub	sp, #44	; 0x2c
 8016526:	4681      	mov	r9, r0
 8016528:	4690      	mov	r8, r2
 801652a:	461c      	mov	r4, r3
 801652c:	460e      	mov	r6, r1
 801652e:	f001 fc03 	bl	8017d38 <GUI_Lock>
 8016532:	4b31      	ldr	r3, [pc, #196]	; (80165f8 <GUI_FillRoundedRect+0xd8>)
 8016534:	a808      	add	r0, sp, #32
 8016536:	681d      	ldr	r5, [r3, #0]
 8016538:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801653a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 801653c:	eb03 0209 	add.w	r2, r3, r9
 8016540:	4443      	add	r3, r8
 8016542:	19b9      	adds	r1, r7, r6
 8016544:	4427      	add	r7, r4
 8016546:	9206      	str	r2, [sp, #24]
 8016548:	9307      	str	r3, [sp, #28]
 801654a:	9105      	str	r1, [sp, #20]
 801654c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016550:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016554:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016558:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 801655c:	f009 fec4 	bl	80202e8 <WM__InitIVRSearch>
 8016560:	2800      	cmp	r0, #0
 8016562:	d043      	beq.n	80165ec <GUI_FillRoundedRect+0xcc>
 8016564:	9905      	ldr	r1, [sp, #20]
 8016566:	9807      	ldr	r0, [sp, #28]
 8016568:	9c06      	ldr	r4, [sp, #24]
 801656a:	1a7a      	subs	r2, r7, r1
 801656c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801656e:	1b03      	subs	r3, r0, r4
 8016570:	3201      	adds	r2, #1
 8016572:	1b7f      	subs	r7, r7, r5
 8016574:	006d      	lsls	r5, r5, #1
 8016576:	3301      	adds	r3, #1
 8016578:	9203      	str	r2, [sp, #12]
 801657a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801657c:	9304      	str	r3, [sp, #16]
 801657e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016580:	eb01 0802 	add.w	r8, r1, r2
 8016584:	eb04 0a02 	add.w	sl, r4, r2
 8016588:	9502      	str	r5, [sp, #8]
 801658a:	fb03 fb03 	mul.w	fp, r3, r3
 801658e:	1a83      	subs	r3, r0, r2
 8016590:	9301      	str	r3, [sp, #4]
 8016592:	9a02      	ldr	r2, [sp, #8]
 8016594:	9903      	ldr	r1, [sp, #12]
 8016596:	4613      	mov	r3, r2
 8016598:	428a      	cmp	r2, r1
 801659a:	dc23      	bgt.n	80165e4 <GUI_FillRoundedRect+0xc4>
 801659c:	9a04      	ldr	r2, [sp, #16]
 801659e:	4293      	cmp	r3, r2
 80165a0:	dc20      	bgt.n	80165e4 <GUI_FillRoundedRect+0xc4>
 80165a2:	9e05      	ldr	r6, [sp, #20]
 80165a4:	4546      	cmp	r6, r8
 80165a6:	dc17      	bgt.n	80165d8 <GUI_FillRoundedRect+0xb8>
 80165a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80165aa:	fb05 b015 	mls	r0, r5, r5, fp
 80165ae:	f002 fe33 	bl	8019218 <GUI__sqrt32>
 80165b2:	9b01      	ldr	r3, [sp, #4]
 80165b4:	ebc0 090a 	rsb	r9, r0, sl
 80165b8:	4631      	mov	r1, r6
 80165ba:	18c4      	adds	r4, r0, r3
 80165bc:	3601      	adds	r6, #1
 80165be:	4648      	mov	r0, r9
 80165c0:	4622      	mov	r2, r4
 80165c2:	f003 f907 	bl	80197d4 <LCD_DrawHLine>
 80165c6:	1979      	adds	r1, r7, r5
 80165c8:	4622      	mov	r2, r4
 80165ca:	4648      	mov	r0, r9
 80165cc:	f003 f902 	bl	80197d4 <LCD_DrawHLine>
 80165d0:	4546      	cmp	r6, r8
 80165d2:	f105 35ff 	add.w	r5, r5, #4294967295
 80165d6:	dde8      	ble.n	80165aa <GUI_FillRoundedRect+0x8a>
 80165d8:	4631      	mov	r1, r6
 80165da:	1e7b      	subs	r3, r7, #1
 80165dc:	9a07      	ldr	r2, [sp, #28]
 80165de:	9806      	ldr	r0, [sp, #24]
 80165e0:	f003 f948 	bl	8019874 <LCD_FillRect>
 80165e4:	f009 fd56 	bl	8020094 <WM__GetNextIVR>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d1d2      	bne.n	8016592 <GUI_FillRoundedRect+0x72>
 80165ec:	f001 fb9a 	bl	8017d24 <GUI_Unlock>
 80165f0:	b00b      	add	sp, #44	; 0x2c
 80165f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165f6:	bf00      	nop
 80165f8:	20000018 	.word	0x20000018

080165fc <GUI_MULTIBUF_End>:
 80165fc:	4a17      	ldr	r2, [pc, #92]	; (801665c <GUI_MULTIBUF_End+0x60>)
 80165fe:	4b18      	ldr	r3, [pc, #96]	; (8016660 <GUI_MULTIBUF_End+0x64>)
 8016600:	6811      	ldr	r1, [r2, #0]
 8016602:	6a1a      	ldr	r2, [r3, #32]
 8016604:	b570      	push	{r4, r5, r6, lr}
 8016606:	2a00      	cmp	r2, #0
 8016608:	7c4d      	ldrb	r5, [r1, #17]
 801660a:	4a16      	ldr	r2, [pc, #88]	; (8016664 <GUI_MULTIBUF_End+0x68>)
 801660c:	b082      	sub	sp, #8
 801660e:	bf0c      	ite	eq
 8016610:	462c      	moveq	r4, r5
 8016612:	2400      	movne	r4, #0
 8016614:	5712      	ldrsb	r2, [r2, r4]
 8016616:	2a01      	cmp	r2, #1
 8016618:	dd05      	ble.n	8016626 <GUI_MULTIBUF_End+0x2a>
 801661a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801661e:	6923      	ldr	r3, [r4, #16]
 8016620:	3b01      	subs	r3, #1
 8016622:	6123      	str	r3, [r4, #16]
 8016624:	b10b      	cbz	r3, 801662a <GUI_MULTIBUF_End+0x2e>
 8016626:	b002      	add	sp, #8
 8016628:	bd70      	pop	{r4, r5, r6, pc}
 801662a:	2001      	movs	r0, #1
 801662c:	40a8      	lsls	r0, r5
 801662e:	f7fd fb8f 	bl	8013d50 <GUI_DCACHE_Clear>
 8016632:	68a6      	ldr	r6, [r4, #8]
 8016634:	4628      	mov	r0, r5
 8016636:	61a6      	str	r6, [r4, #24]
 8016638:	f7fd fbb4 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801663c:	9001      	str	r0, [sp, #4]
 801663e:	2800      	cmp	r0, #0
 8016640:	d0f1      	beq.n	8016626 <GUI_MULTIBUF_End+0x2a>
 8016642:	68c3      	ldr	r3, [r0, #12]
 8016644:	2122      	movs	r1, #34	; 0x22
 8016646:	a801      	add	r0, sp, #4
 8016648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801664a:	4798      	blx	r3
 801664c:	4603      	mov	r3, r0
 801664e:	2800      	cmp	r0, #0
 8016650:	d0e9      	beq.n	8016626 <GUI_MULTIBUF_End+0x2a>
 8016652:	4631      	mov	r1, r6
 8016654:	9801      	ldr	r0, [sp, #4]
 8016656:	4798      	blx	r3
 8016658:	b002      	add	sp, #8
 801665a:	bd70      	pop	{r4, r5, r6, pc}
 801665c:	20000018 	.word	0x20000018
 8016660:	200002c8 	.word	0x200002c8
 8016664:	20046780 	.word	0x20046780

08016668 <GUI_MULTIBUF_ConfirmEx>:
 8016668:	4b09      	ldr	r3, [pc, #36]	; (8016690 <GUI_MULTIBUF_ConfirmEx+0x28>)
 801666a:	6a1a      	ldr	r2, [r3, #32]
 801666c:	2a00      	cmp	r2, #0
 801666e:	bf18      	it	ne
 8016670:	2000      	movne	r0, #0
 8016672:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8016676:	b410      	push	{r4}
 8016678:	6994      	ldr	r4, [r2, #24]
 801667a:	2c00      	cmp	r4, #0
 801667c:	db04      	blt.n	8016688 <GUI_MULTIBUF_ConfirmEx+0x20>
 801667e:	f04f 34ff 	mov.w	r4, #4294967295
 8016682:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016686:	6194      	str	r4, [r2, #24]
 8016688:	f85d 4b04 	ldr.w	r4, [sp], #4
 801668c:	4770      	bx	lr
 801668e:	bf00      	nop
 8016690:	200002c8 	.word	0x200002c8

08016694 <GUI_StoreKey>:
 8016694:	4b02      	ldr	r3, [pc, #8]	; (80166a0 <GUI_StoreKey+0xc>)
 8016696:	681a      	ldr	r2, [r3, #0]
 8016698:	b902      	cbnz	r2, 801669c <GUI_StoreKey+0x8>
 801669a:	6018      	str	r0, [r3, #0]
 801669c:	f001 bfe2 	b.w	8018664 <GUI_SignalEvent>
 80166a0:	200002f4 	.word	0x200002f4

080166a4 <GUI_PollKeyMsg>:
 80166a4:	b510      	push	{r4, lr}
 80166a6:	f001 fb47 	bl	8017d38 <GUI_Lock>
 80166aa:	4a0d      	ldr	r2, [pc, #52]	; (80166e0 <GUI_PollKeyMsg+0x3c>)
 80166ac:	6813      	ldr	r3, [r2, #0]
 80166ae:	6851      	ldr	r1, [r2, #4]
 80166b0:	428b      	cmp	r3, r1
 80166b2:	d00f      	beq.n	80166d4 <GUI_PollKeyMsg+0x30>
 80166b4:	4c0b      	ldr	r4, [pc, #44]	; (80166e4 <GUI_PollKeyMsg+0x40>)
 80166b6:	42a3      	cmp	r3, r4
 80166b8:	f04f 0401 	mov.w	r4, #1
 80166bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166c0:	bf14      	ite	ne
 80166c2:	3308      	addne	r3, #8
 80166c4:	3b50      	subeq	r3, #80	; 0x50
 80166c6:	6013      	str	r3, [r2, #0]
 80166c8:	f00a faec 	bl	8020ca4 <WM_OnKey>
 80166cc:	f001 fb2a 	bl	8017d24 <GUI_Unlock>
 80166d0:	4620      	mov	r0, r4
 80166d2:	bd10      	pop	{r4, pc}
 80166d4:	2400      	movs	r4, #0
 80166d6:	f001 fb25 	bl	8017d24 <GUI_Unlock>
 80166da:	4620      	mov	r0, r4
 80166dc:	bd10      	pop	{r4, pc}
 80166de:	bf00      	nop
 80166e0:	2000002c 	.word	0x2000002c
 80166e4:	20000348 	.word	0x20000348

080166e8 <GUI_EnlargePolygon>:
 80166e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166ec:	2a00      	cmp	r2, #0
 80166ee:	ed2d 8b06 	vpush	{d8-d10}
 80166f2:	b082      	sub	sp, #8
 80166f4:	9301      	str	r3, [sp, #4]
 80166f6:	f340 80f0 	ble.w	80168da <GUI_EnlargePolygon+0x1f2>
 80166fa:	ee0a 3a90 	vmov	s21, r3
 80166fe:	2600      	movs	r6, #0
 8016700:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8016704:	4614      	mov	r4, r2
 8016706:	eef8 aaea 	vcvt.f32.s32	s21, s21
 801670a:	460d      	mov	r5, r1
 801670c:	4681      	mov	r9, r0
 801670e:	4637      	mov	r7, r6
 8016710:	468a      	mov	sl, r1
 8016712:	4690      	mov	r8, r2
 8016714:	f108 31ff 	add.w	r1, r8, #4294967295
 8016718:	fb04 6717 	mls	r7, r4, r7, r6
 801671c:	3601      	adds	r6, #1
 801671e:	f10a 0a04 	add.w	sl, sl, #4
 8016722:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8016726:	f935 3027 	ldrsh.w	r3, [r5, r7, lsl #2]
 801672a:	f109 0904 	add.w	r9, r9, #4
 801672e:	fbb1 f2f4 	udiv	r2, r1, r4
 8016732:	fb04 1112 	mls	r1, r4, r2, r1
 8016736:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801673a:	f935 c021 	ldrsh.w	ip, [r5, r1, lsl #2]
 801673e:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8016742:	ebcc 0303 	rsb	r3, ip, r3
 8016746:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801674a:	ee08 3a10 	vmov	s16, r3
 801674e:	ebce 0302 	rsb	r3, lr, r2
 8016752:	ee09 3a10 	vmov	s18, r3
 8016756:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801675a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801675e:	fbb8 f1f4 	udiv	r1, r8, r4
 8016762:	fbb6 f7f4 	udiv	r7, r6, r4
 8016766:	ee69 7a09 	vmul.f32	s15, s18, s18
 801676a:	fb04 6017 	mls	r0, r4, r7, r6
 801676e:	fb04 8111 	mls	r1, r4, r1, r8
 8016772:	f108 0801 	add.w	r8, r8, #1
 8016776:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 801677a:	eb05 0e81 	add.w	lr, r5, r1, lsl #2
 801677e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8016782:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016786:	f935 3020 	ldrsh.w	r3, [r5, r0, lsl #2]
 801678a:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 801678e:	f935 1021 	ldrsh.w	r1, [r5, r1, lsl #2]
 8016792:	1a12      	subs	r2, r2, r0
 8016794:	1a5b      	subs	r3, r3, r1
 8016796:	ee17 0a90 	vmov	r0, s15
 801679a:	ee07 2a90 	vmov	s15, r2
 801679e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80167a2:	ee07 3a90 	vmov	s15, r3
 80167a6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80167aa:	f7e9 fe9d 	bl	80004e8 <__aeabi_f2d>
 80167ae:	ec41 0b10 	vmov	d0, r0, r1
 80167b2:	f00e ffa9 	bl	8025708 <sqrt>
 80167b6:	ec51 0b10 	vmov	r0, r1, d0
 80167ba:	f7ea f9c1 	bl	8000b40 <__aeabi_d2f>
 80167be:	ee07 0a90 	vmov	s15, r0
 80167c2:	ee29 6aa9 	vmul.f32	s12, s19, s19
 80167c6:	eec9 6a27 	vdiv.f32	s13, s18, s15
 80167ca:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80167ce:	eea8 6aa8 	vfma.f32	s12, s17, s17
 80167d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80167d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167da:	ee16 0a10 	vmov	r0, s12
 80167de:	bf88      	it	hi
 80167e0:	eeb0 9a66 	vmovhi.f32	s18, s13
 80167e4:	bf88      	it	hi
 80167e6:	eeb0 8a47 	vmovhi.f32	s16, s14
 80167ea:	f7e9 fe7d 	bl	80004e8 <__aeabi_f2d>
 80167ee:	ec41 0b10 	vmov	d0, r0, r1
 80167f2:	f00e ff89 	bl	8025708 <sqrt>
 80167f6:	ec51 0b10 	vmov	r0, r1, d0
 80167fa:	f7ea f9a1 	bl	8000b40 <__aeabi_d2f>
 80167fe:	ee07 0a90 	vmov	s15, r0
 8016802:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8016806:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 801680a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801680e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016812:	bf88      	it	hi
 8016814:	eef0 9a66 	vmovhi.f32	s19, s13
 8016818:	ee39 9a89 	vadd.f32	s18, s19, s18
 801681c:	bf88      	it	hi
 801681e:	eef0 8a47 	vmovhi.f32	s17, s14
 8016822:	ee69 7a09 	vmul.f32	s15, s18, s18
 8016826:	ee38 8a88 	vadd.f32	s16, s17, s16
 801682a:	eee8 7a08 	vfma.f32	s15, s16, s16
 801682e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8016832:	ee17 0a90 	vmov	r0, s15
 8016836:	f7e9 fe57 	bl	80004e8 <__aeabi_f2d>
 801683a:	ec41 0b10 	vmov	d0, r0, r1
 801683e:	f00e ff63 	bl	8025708 <sqrt>
 8016842:	ec51 0b10 	vmov	r0, r1, d0
 8016846:	f7ea f97b 	bl	8000b40 <__aeabi_d2f>
 801684a:	ee07 0a90 	vmov	s15, r0
 801684e:	f83a 2c04 	ldrh.w	r2, [sl, #-4]
 8016852:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8016856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801685a:	eec9 6a07 	vdiv.f32	s13, s18, s14
 801685e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8016862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016866:	bf88      	it	hi
 8016868:	eeb0 9a66 	vmovhi.f32	s18, s13
 801686c:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8016870:	bf88      	it	hi
 8016872:	eeb0 8a67 	vmovhi.f32	s16, s15
 8016876:	ee79 7a0a 	vadd.f32	s15, s18, s20
 801687a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801687e:	ee39 9a4a 	vsub.f32	s18, s18, s20
 8016882:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8016886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801688a:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 801688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016892:	ee17 3a90 	vmov	r3, s15
 8016896:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801689a:	ee78 7a0a 	vadd.f32	s15, s16, s20
 801689e:	ee19 1a10 	vmov	r1, s18
 80168a2:	ee38 8a4a 	vsub.f32	s16, s16, s20
 80168a6:	bfd8      	it	le
 80168a8:	460b      	movle	r3, r1
 80168aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168b2:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80168b6:	4413      	add	r3, r2
 80168b8:	f829 3c04 	strh.w	r3, [r9, #-4]
 80168bc:	ee17 3a90 	vmov	r3, s15
 80168c0:	ee18 1a10 	vmov	r1, s16
 80168c4:	f83a 2c02 	ldrh.w	r2, [sl, #-2]
 80168c8:	bfd8      	it	le
 80168ca:	460b      	movle	r3, r1
 80168cc:	42b4      	cmp	r4, r6
 80168ce:	eba2 0303 	sub.w	r3, r2, r3
 80168d2:	f829 3c02 	strh.w	r3, [r9, #-2]
 80168d6:	f47f af1d 	bne.w	8016714 <GUI_EnlargePolygon+0x2c>
 80168da:	b002      	add	sp, #8
 80168dc:	ecbd 8b06 	vpop	{d8-d10}
 80168e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080168e4 <GUI_GetCursorLayer>:
 80168e4:	2801      	cmp	r0, #1
 80168e6:	d901      	bls.n	80168ec <GUI_GetCursorLayer+0x8>
 80168e8:	2000      	movs	r0, #0
 80168ea:	4770      	bx	lr
 80168ec:	4b01      	ldr	r3, [pc, #4]	; (80168f4 <GUI_GetCursorLayer+0x10>)
 80168ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80168f2:	4770      	bx	lr
 80168f4:	20000354 	.word	0x20000354

080168f8 <GUI_GetLayerPosEx>:
 80168f8:	b570      	push	{r4, r5, r6, lr}
 80168fa:	4604      	mov	r4, r0
 80168fc:	460e      	mov	r6, r1
 80168fe:	4615      	mov	r5, r2
 8016900:	f001 fa1a 	bl	8017d38 <GUI_Lock>
 8016904:	4620      	mov	r0, r4
 8016906:	4631      	mov	r1, r6
 8016908:	462a      	mov	r2, r5
 801690a:	f004 fcb1 	bl	801b270 <LCD_GetPosEx>
 801690e:	4604      	mov	r4, r0
 8016910:	b110      	cbz	r0, 8016918 <GUI_GetLayerPosEx+0x20>
 8016912:	2300      	movs	r3, #0
 8016914:	6033      	str	r3, [r6, #0]
 8016916:	602b      	str	r3, [r5, #0]
 8016918:	f001 fa04 	bl	8017d24 <GUI_Unlock>
 801691c:	4620      	mov	r0, r4
 801691e:	bd70      	pop	{r4, r5, r6, pc}

08016920 <GUI_SelectLayer>:
 8016920:	b570      	push	{r4, r5, r6, lr}
 8016922:	4d0d      	ldr	r5, [pc, #52]	; (8016958 <GUI_SelectLayer+0x38>)
 8016924:	4604      	mov	r4, r0
 8016926:	682b      	ldr	r3, [r5, #0]
 8016928:	7c5e      	ldrb	r6, [r3, #17]
 801692a:	f001 fa05 	bl	8017d38 <GUI_Lock>
 801692e:	2c01      	cmp	r4, #1
 8016930:	d903      	bls.n	801693a <GUI_SelectLayer+0x1a>
 8016932:	f001 f9f7 	bl	8017d24 <GUI_Unlock>
 8016936:	4630      	mov	r0, r6
 8016938:	bd70      	pop	{r4, r5, r6, pc}
 801693a:	4620      	mov	r0, r4
 801693c:	f7fd fa32 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 8016940:	2800      	cmp	r0, #0
 8016942:	d0f6      	beq.n	8016932 <GUI_SelectLayer+0x12>
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	745c      	strb	r4, [r3, #17]
 8016948:	f7fc ff5c 	bl	8013804 <GUI_SelectLCD>
 801694c:	4b03      	ldr	r3, [pc, #12]	; (801695c <GUI_SelectLayer+0x3c>)
 801694e:	601c      	str	r4, [r3, #0]
 8016950:	f001 f9e8 	bl	8017d24 <GUI_Unlock>
 8016954:	4630      	mov	r0, r6
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	20000018 	.word	0x20000018
 801695c:	2004681c 	.word	0x2004681c

08016960 <GUI_SetLayerPosEx>:
 8016960:	b570      	push	{r4, r5, r6, lr}
 8016962:	4604      	mov	r4, r0
 8016964:	460d      	mov	r5, r1
 8016966:	4616      	mov	r6, r2
 8016968:	f001 f9e6 	bl	8017d38 <GUI_Lock>
 801696c:	4629      	mov	r1, r5
 801696e:	4620      	mov	r0, r4
 8016970:	4632      	mov	r2, r6
 8016972:	f004 fccb 	bl	801b30c <LCD_SetPosEx>
 8016976:	4604      	mov	r4, r0
 8016978:	f001 f9d4 	bl	8017d24 <GUI_Unlock>
 801697c:	4620      	mov	r0, r4
 801697e:	bd70      	pop	{r4, r5, r6, pc}

08016980 <_Color2Index>:
 8016980:	4a04      	ldr	r2, [pc, #16]	; (8016994 <_Color2Index+0x14>)
 8016982:	4b05      	ldr	r3, [pc, #20]	; (8016998 <_Color2Index+0x18>)
 8016984:	6812      	ldr	r2, [r2, #0]
 8016986:	7c52      	ldrb	r2, [r2, #17]
 8016988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	691b      	ldr	r3, [r3, #16]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	4718      	bx	r3
 8016994:	20000018 	.word	0x20000018
 8016998:	2000035c 	.word	0x2000035c

0801699c <_Index2Color>:
 801699c:	4a04      	ldr	r2, [pc, #16]	; (80169b0 <_Index2Color+0x14>)
 801699e:	4b05      	ldr	r3, [pc, #20]	; (80169b4 <_Index2Color+0x18>)
 80169a0:	6812      	ldr	r2, [r2, #0]
 80169a2:	7c52      	ldrb	r2, [r2, #17]
 80169a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	691b      	ldr	r3, [r3, #16]
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	4718      	bx	r3
 80169b0:	20000018 	.word	0x20000018
 80169b4:	2000035c 	.word	0x2000035c

080169b8 <_GetIndexMask>:
 80169b8:	4a04      	ldr	r2, [pc, #16]	; (80169cc <_GetIndexMask+0x14>)
 80169ba:	4b05      	ldr	r3, [pc, #20]	; (80169d0 <_GetIndexMask+0x18>)
 80169bc:	6812      	ldr	r2, [r2, #0]
 80169be:	7c52      	ldrb	r2, [r2, #17]
 80169c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	691b      	ldr	r3, [r3, #16]
 80169c8:	689b      	ldr	r3, [r3, #8]
 80169ca:	4718      	bx	r3
 80169cc:	20000018 	.word	0x20000018
 80169d0:	2000035c 	.word	0x2000035c

080169d4 <_GetPixelIndex>:
 80169d4:	6800      	ldr	r0, [r0, #0]
 80169d6:	68c3      	ldr	r3, [r0, #12]
 80169d8:	695b      	ldr	r3, [r3, #20]
 80169da:	4718      	bx	r3

080169dc <_GetDevData>:
 80169dc:	2000      	movs	r0, #0
 80169de:	4770      	bx	lr

080169e0 <_SetOrg>:
 80169e0:	6800      	ldr	r0, [r0, #0]
 80169e2:	b110      	cbz	r0, 80169ea <_SetOrg+0xa>
 80169e4:	68c3      	ldr	r3, [r0, #12]
 80169e6:	6a1b      	ldr	r3, [r3, #32]
 80169e8:	4718      	bx	r3
 80169ea:	4770      	bx	lr

080169ec <_GetDevFunc>:
 80169ec:	b510      	push	{r4, lr}
 80169ee:	6803      	ldr	r3, [r0, #0]
 80169f0:	b082      	sub	sp, #8
 80169f2:	9301      	str	r3, [sp, #4]
 80169f4:	b163      	cbz	r3, 8016a10 <_GetDevFunc+0x24>
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	9301      	str	r3, [sp, #4]
 80169fa:	b14b      	cbz	r3, 8016a10 <_GetDevFunc+0x24>
 80169fc:	68db      	ldr	r3, [r3, #12]
 80169fe:	4604      	mov	r4, r0
 8016a00:	a801      	add	r0, sp, #4
 8016a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a04:	4798      	blx	r3
 8016a06:	b108      	cbz	r0, 8016a0c <_GetDevFunc+0x20>
 8016a08:	9b01      	ldr	r3, [sp, #4]
 8016a0a:	6023      	str	r3, [r4, #0]
 8016a0c:	b002      	add	sp, #8
 8016a0e:	bd10      	pop	{r4, pc}
 8016a10:	2000      	movs	r0, #0
 8016a12:	e7fb      	b.n	8016a0c <_GetDevFunc+0x20>

08016a14 <_GetDevProp>:
 8016a14:	6800      	ldr	r0, [r0, #0]
 8016a16:	b110      	cbz	r0, 8016a1e <_GetDevProp+0xa>
 8016a18:	68c3      	ldr	r3, [r0, #12]
 8016a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a1c:	4718      	bx	r3
 8016a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a22:	4770      	bx	lr

08016a24 <_GetRect>:
 8016a24:	6800      	ldr	r0, [r0, #0]
 8016a26:	b110      	cbz	r0, 8016a2e <_GetRect+0xa>
 8016a28:	68c3      	ldr	r3, [r0, #12]
 8016a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a2c:	4718      	bx	r3
 8016a2e:	4770      	bx	lr

08016a30 <GUI_SetAlpha>:
 8016a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a34:	4f44      	ldr	r7, [pc, #272]	; (8016b48 <GUI_SetAlpha+0x118>)
 8016a36:	4605      	mov	r5, r0
 8016a38:	4b44      	ldr	r3, [pc, #272]	; (8016b4c <GUI_SetAlpha+0x11c>)
 8016a3a:	683a      	ldr	r2, [r7, #0]
 8016a3c:	2dff      	cmp	r5, #255	; 0xff
 8016a3e:	4e44      	ldr	r6, [pc, #272]	; (8016b50 <GUI_SetAlpha+0x120>)
 8016a40:	7c50      	ldrb	r0, [r2, #17]
 8016a42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016a46:	699c      	ldr	r4, [r3, #24]
 8016a48:	f816 8004 	ldrb.w	r8, [r6, r4]
 8016a4c:	d00c      	beq.n	8016a68 <GUI_SetAlpha+0x38>
 8016a4e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8016b60 <GUI_SetAlpha+0x130>
 8016a52:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016a56:	b1bb      	cbz	r3, 8016a88 <GUI_SetAlpha+0x58>
 8016a58:	2105      	movs	r1, #5
 8016a5a:	f7fd f98b 	bl	8013d74 <GUI_DEVICE__GetpDevice>
 8016a5e:	b350      	cbz	r0, 8016ab6 <GUI_SetAlpha+0x86>
 8016a60:	5535      	strb	r5, [r6, r4]
 8016a62:	4640      	mov	r0, r8
 8016a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a68:	2105      	movs	r1, #5
 8016a6a:	f7fd f983 	bl	8013d74 <GUI_DEVICE__GetpDevice>
 8016a6e:	4607      	mov	r7, r0
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d0f6      	beq.n	8016a62 <GUI_SetAlpha+0x32>
 8016a74:	2000      	movs	r0, #0
 8016a76:	f006 fee5 	bl	801d844 <GUI_MEMDEV__SetAlphaCallback>
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	f7fd f9d8 	bl	8013e30 <GUI_DEVICE_Unlink>
 8016a80:	5535      	strb	r5, [r6, r4]
 8016a82:	4640      	mov	r0, r8
 8016a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a88:	4b32      	ldr	r3, [pc, #200]	; (8016b54 <GUI_SetAlpha+0x124>)
 8016a8a:	4648      	mov	r0, r9
 8016a8c:	f840 3f0c 	str.w	r3, [r0, #12]!
 8016a90:	f7fd f94a 	bl	8013d28 <GUI__RegisterExit>
 8016a94:	f003 fe0e 	bl	801a6b4 <LCD_GetVXSizeMax>
 8016a98:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8016a9c:	4650      	mov	r0, sl
 8016a9e:	f7fb fded 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8016aa2:	f8c9 0008 	str.w	r0, [r9, #8]
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	d0db      	beq.n	8016a62 <GUI_SetAlpha+0x32>
 8016aaa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016aae:	b173      	cbz	r3, 8016ace <GUI_SetAlpha+0x9e>
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	7c58      	ldrb	r0, [r3, #17]
 8016ab4:	e7d0      	b.n	8016a58 <GUI_SetAlpha+0x28>
 8016ab6:	4828      	ldr	r0, [pc, #160]	; (8016b58 <GUI_SetAlpha+0x128>)
 8016ab8:	f006 fec4 	bl	801d844 <GUI_MEMDEV__SetAlphaCallback>
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	7c5b      	ldrb	r3, [r3, #17]
 8016ac0:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d0cb      	beq.n	8016a60 <GUI_SetAlpha+0x30>
 8016ac8:	f7fd f9d4 	bl	8013e74 <GUI_DEVICE_Link>
 8016acc:	e7c8      	b.n	8016a60 <GUI_SetAlpha+0x30>
 8016ace:	4650      	mov	r0, sl
 8016ad0:	f7fb fdd4 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8016ad4:	f8c9 0014 	str.w	r0, [r9, #20]
 8016ad8:	b388      	cbz	r0, 8016b3e <GUI_SetAlpha+0x10e>
 8016ada:	f8d9 3000 	ldr.w	r3, [r9]
 8016ade:	b31b      	cbz	r3, 8016b28 <GUI_SetAlpha+0xf8>
 8016ae0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016ae4:	f8df a078 	ldr.w	sl, [pc, #120]	; 8016b60 <GUI_SetAlpha+0x130>
 8016ae8:	2a00      	cmp	r2, #0
 8016aea:	d1e1      	bne.n	8016ab0 <GUI_SetAlpha+0x80>
 8016aec:	491b      	ldr	r1, [pc, #108]	; (8016b5c <GUI_SetAlpha+0x12c>)
 8016aee:	2301      	movs	r3, #1
 8016af0:	f101 0018 	add.w	r0, r1, #24
 8016af4:	f7fd f96e 	bl	8013dd4 <GUI_DEVICE_Create>
 8016af8:	f8ca 0004 	str.w	r0, [sl, #4]
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d1d7      	bne.n	8016ab0 <GUI_SetAlpha+0x80>
 8016b00:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8016b04:	f7fb fdb0 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8016b08:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016b0c:	f7fb fdac 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8016b10:	f8d9 0000 	ldr.w	r0, [r9]
 8016b14:	b108      	cbz	r0, 8016b1a <GUI_SetAlpha+0xea>
 8016b16:	f7fd f95b 	bl	8013dd0 <GUI_DEVICE_Delete>
 8016b1a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	d09f      	beq.n	8016a62 <GUI_SetAlpha+0x32>
 8016b22:	f7fd f955 	bl	8013dd0 <GUI_DEVICE_Delete>
 8016b26:	e79c      	b.n	8016a62 <GUI_SetAlpha+0x32>
 8016b28:	490c      	ldr	r1, [pc, #48]	; (8016b5c <GUI_SetAlpha+0x12c>)
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	f101 0018 	add.w	r0, r1, #24
 8016b30:	f7fd f950 	bl	8013dd4 <GUI_DEVICE_Create>
 8016b34:	f8c9 0000 	str.w	r0, [r9]
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	d1d1      	bne.n	8016ae0 <GUI_SetAlpha+0xb0>
 8016b3c:	e7e0      	b.n	8016b00 <GUI_SetAlpha+0xd0>
 8016b3e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8016b42:	f7fb fd91 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8016b46:	e78c      	b.n	8016a62 <GUI_SetAlpha+0x32>
 8016b48:	20000018 	.word	0x20000018
 8016b4c:	200467d0 	.word	0x200467d0
 8016b50:	20000034 	.word	0x20000034
 8016b54:	08016b65 	.word	0x08016b65
 8016b58:	08016a31 	.word	0x08016a31
 8016b5c:	08026b04 	.word	0x08026b04
 8016b60:	2000035c 	.word	0x2000035c

08016b64 <_OnExit>:
 8016b64:	b538      	push	{r3, r4, r5, lr}
 8016b66:	4c0b      	ldr	r4, [pc, #44]	; (8016b94 <_OnExit+0x30>)
 8016b68:	2500      	movs	r5, #0
 8016b6a:	68a0      	ldr	r0, [r4, #8]
 8016b6c:	f7fb fd7c 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8016b70:	6960      	ldr	r0, [r4, #20]
 8016b72:	60a5      	str	r5, [r4, #8]
 8016b74:	f7fb fd78 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8016b78:	6820      	ldr	r0, [r4, #0]
 8016b7a:	6165      	str	r5, [r4, #20]
 8016b7c:	b110      	cbz	r0, 8016b84 <_OnExit+0x20>
 8016b7e:	f7fd f927 	bl	8013dd0 <GUI_DEVICE_Delete>
 8016b82:	6025      	str	r5, [r4, #0]
 8016b84:	6860      	ldr	r0, [r4, #4]
 8016b86:	4c03      	ldr	r4, [pc, #12]	; (8016b94 <_OnExit+0x30>)
 8016b88:	b118      	cbz	r0, 8016b92 <_OnExit+0x2e>
 8016b8a:	f7fd f921 	bl	8013dd0 <GUI_DEVICE_Delete>
 8016b8e:	2300      	movs	r3, #0
 8016b90:	6063      	str	r3, [r4, #4]
 8016b92:	bd38      	pop	{r3, r4, r5, pc}
 8016b94:	2000035c 	.word	0x2000035c

08016b98 <_ReadRectFromMemdev>:
 8016b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9c:	4c27      	ldr	r4, [pc, #156]	; (8016c3c <_ReadRectFromMemdev+0xa4>)
 8016b9e:	461e      	mov	r6, r3
 8016ba0:	b085      	sub	sp, #20
 8016ba2:	4615      	mov	r5, r2
 8016ba4:	6823      	ldr	r3, [r4, #0]
 8016ba6:	4689      	mov	r9, r1
 8016ba8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8016bac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016bae:	f006 ff51 	bl	801da54 <GUI_MEMDEV_GetXPos>
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	4607      	mov	r7, r0
 8016bb6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016bb8:	f006 ff6e 	bl	801da98 <GUI_MEMDEV_GetYPos>
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	4680      	mov	r8, r0
 8016bc0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016bc2:	f006 ff8b 	bl	801dadc <GUI_MEMDEV_GetXSize>
 8016bc6:	45a8      	cmp	r8, r5
 8016bc8:	dc2e      	bgt.n	8016c28 <_ReadRectFromMemdev+0x90>
 8016bca:	454f      	cmp	r7, r9
 8016bcc:	dc2c      	bgt.n	8016c28 <_ReadRectFromMemdev+0x90>
 8016bce:	6823      	ldr	r3, [r4, #0]
 8016bd0:	4683      	mov	fp, r0
 8016bd2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8016bd4:	f005 fe42 	bl	801c85c <GUI_MEMDEV_GetBitsPerPixel>
 8016bd8:	2808      	cmp	r0, #8
 8016bda:	9001      	str	r0, [sp, #4]
 8016bdc:	dd27      	ble.n	8016c2e <_ReadRectFromMemdev+0x96>
 8016bde:	2810      	cmp	r0, #16
 8016be0:	dc28      	bgt.n	8016c34 <_ReadRectFromMemdev+0x9c>
 8016be2:	2302      	movs	r3, #2
 8016be4:	461a      	mov	r2, r3
 8016be6:	6820      	ldr	r0, [r4, #0]
 8016be8:	ebc8 0505 	rsb	r5, r8, r5
 8016bec:	ebc7 0709 	rsb	r7, r7, r9
 8016bf0:	ebc9 0606 	rsb	r6, r9, r6
 8016bf4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016bf6:	9303      	str	r3, [sp, #12]
 8016bf8:	3601      	adds	r6, #1
 8016bfa:	9202      	str	r2, [sp, #8]
 8016bfc:	f006 ff12 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 8016c00:	4c0f      	ldr	r4, [pc, #60]	; (8016c40 <_ReadRectFromMemdev+0xa8>)
 8016c02:	fb0b 7105 	mla	r1, fp, r5, r7
 8016c06:	9b03      	ldr	r3, [sp, #12]
 8016c08:	9a02      	ldr	r2, [sp, #8]
 8016c0a:	fb03 0101 	mla	r1, r3, r1, r0
 8016c0e:	6824      	ldr	r4, [r4, #0]
 8016c10:	fb06 f202 	mul.w	r2, r6, r2
 8016c14:	4650      	mov	r0, sl
 8016c16:	47a0      	blx	r4
 8016c18:	9a01      	ldr	r2, [sp, #4]
 8016c1a:	4631      	mov	r1, r6
 8016c1c:	4650      	mov	r0, sl
 8016c1e:	b005      	add	sp, #20
 8016c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c24:	f002 b8ea 	b.w	8018dfc <GUI__ExpandPixelIndices>
 8016c28:	b005      	add	sp, #20
 8016c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c2e:	2301      	movs	r3, #1
 8016c30:	461a      	mov	r2, r3
 8016c32:	e7d8      	b.n	8016be6 <_ReadRectFromMemdev+0x4e>
 8016c34:	2304      	movs	r3, #4
 8016c36:	461a      	mov	r2, r3
 8016c38:	e7d5      	b.n	8016be6 <_ReadRectFromMemdev+0x4e>
 8016c3a:	bf00      	nop
 8016c3c:	20000018 	.word	0x20000018
 8016c40:	2000004c 	.word	0x2000004c

08016c44 <_GetLine>:
 8016c44:	6800      	ldr	r0, [r0, #0]
 8016c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c4a:	68c5      	ldr	r5, [r0, #12]
 8016c4c:	461f      	mov	r7, r3
 8016c4e:	b084      	sub	sp, #16
 8016c50:	460c      	mov	r4, r1
 8016c52:	682b      	ldr	r3, [r5, #0]
 8016c54:	4691      	mov	r9, r2
 8016c56:	9003      	str	r0, [sp, #12]
 8016c58:	2b04      	cmp	r3, #4
 8016c5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016c5c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8016c60:	d03d      	beq.n	8016cde <_GetLine+0x9a>
 8016c62:	eb01 0a07 	add.w	sl, r1, r7
 8016c66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016c68:	2101      	movs	r1, #1
 8016c6a:	a803      	add	r0, sp, #12
 8016c6c:	4798      	blx	r3
 8016c6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016c72:	4605      	mov	r5, r0
 8016c74:	b9f0      	cbnz	r0, 8016cb4 <_GetLine+0x70>
 8016c76:	429c      	cmp	r4, r3
 8016c78:	dc0b      	bgt.n	8016c92 <_GetLine+0x4e>
 8016c7a:	4635      	mov	r5, r6
 8016c7c:	9803      	ldr	r0, [sp, #12]
 8016c7e:	4621      	mov	r1, r4
 8016c80:	3401      	adds	r4, #1
 8016c82:	464a      	mov	r2, r9
 8016c84:	68c3      	ldr	r3, [r0, #12]
 8016c86:	695b      	ldr	r3, [r3, #20]
 8016c88:	4798      	blx	r3
 8016c8a:	4554      	cmp	r4, sl
 8016c8c:	f845 0b04 	str.w	r0, [r5], #4
 8016c90:	d1f4      	bne.n	8016c7c <_GetLine+0x38>
 8016c92:	2f00      	cmp	r7, #0
 8016c94:	dd0b      	ble.n	8016cae <_GetLine+0x6a>
 8016c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c98:	3e04      	subs	r6, #4
 8016c9a:	2400      	movs	r4, #0
 8016c9c:	1f1d      	subs	r5, r3, #4
 8016c9e:	3401      	adds	r4, #1
 8016ca0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016ca4:	47c0      	blx	r8
 8016ca6:	f845 0f04 	str.w	r0, [r5, #4]!
 8016caa:	42a7      	cmp	r7, r4
 8016cac:	d1f7      	bne.n	8016c9e <_GetLine+0x5a>
 8016cae:	b004      	add	sp, #16
 8016cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb4:	4621      	mov	r1, r4
 8016cb6:	464a      	mov	r2, r9
 8016cb8:	9803      	ldr	r0, [sp, #12]
 8016cba:	9601      	str	r6, [sp, #4]
 8016cbc:	f8cd 9000 	str.w	r9, [sp]
 8016cc0:	47a8      	blx	r5
 8016cc2:	4b0a      	ldr	r3, [pc, #40]	; (8016cec <_GetLine+0xa8>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	7c58      	ldrb	r0, [r3, #17]
 8016cc8:	f003 fc04 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 8016ccc:	4639      	mov	r1, r7
 8016cce:	2818      	cmp	r0, #24
 8016cd0:	bf14      	ite	ne
 8016cd2:	4602      	movne	r2, r0
 8016cd4:	2220      	moveq	r2, #32
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f002 f890 	bl	8018dfc <GUI__ExpandPixelIndices>
 8016cdc:	e7d9      	b.n	8016c92 <_GetLine+0x4e>
 8016cde:	19cb      	adds	r3, r1, r7
 8016ce0:	9601      	str	r6, [sp, #4]
 8016ce2:	9200      	str	r2, [sp, #0]
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	f7ff ff57 	bl	8016b98 <_ReadRectFromMemdev>
 8016cea:	e7d2      	b.n	8016c92 <_GetLine+0x4e>
 8016cec:	20000018 	.word	0x20000018

08016cf0 <_Color2IndexBulk>:
 8016cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8016da0 <_Color2IndexBulk+0xb0>
 8016cf8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8016da4 <_Color2IndexBulk+0xb4>
 8016cfc:	f8d9 5000 	ldr.w	r5, [r9]
 8016d00:	7c6d      	ldrb	r5, [r5, #17]
 8016d02:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8016d06:	682d      	ldr	r5, [r5, #0]
 8016d08:	692d      	ldr	r5, [r5, #16]
 8016d0a:	692e      	ldr	r6, [r5, #16]
 8016d0c:	b11e      	cbz	r6, 8016d16 <_Color2IndexBulk+0x26>
 8016d0e:	46b4      	mov	ip, r6
 8016d10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d14:	4760      	bx	ip
 8016d16:	2b02      	cmp	r3, #2
 8016d18:	4607      	mov	r7, r0
 8016d1a:	468e      	mov	lr, r1
 8016d1c:	4614      	mov	r4, r2
 8016d1e:	d02b      	beq.n	8016d78 <_Color2IndexBulk+0x88>
 8016d20:	2b04      	cmp	r3, #4
 8016d22:	d016      	beq.n	8016d52 <_Color2IndexBulk+0x62>
 8016d24:	2b01      	cmp	r3, #1
 8016d26:	d001      	beq.n	8016d2c <_Color2IndexBulk+0x3c>
 8016d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d2c:	1e4e      	subs	r6, r1, #1
 8016d2e:	e006      	b.n	8016d3e <_Color2IndexBulk+0x4e>
 8016d30:	f8d9 3000 	ldr.w	r3, [r9]
 8016d34:	7c5b      	ldrb	r3, [r3, #17]
 8016d36:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	691d      	ldr	r5, [r3, #16]
 8016d3e:	682b      	ldr	r3, [r5, #0]
 8016d40:	f857 0b04 	ldr.w	r0, [r7], #4
 8016d44:	4798      	blx	r3
 8016d46:	3c01      	subs	r4, #1
 8016d48:	f806 0f01 	strb.w	r0, [r6, #1]!
 8016d4c:	d1f0      	bne.n	8016d30 <_Color2IndexBulk+0x40>
 8016d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d52:	1f0e      	subs	r6, r1, #4
 8016d54:	e006      	b.n	8016d64 <_Color2IndexBulk+0x74>
 8016d56:	f8d9 3000 	ldr.w	r3, [r9]
 8016d5a:	7c5b      	ldrb	r3, [r3, #17]
 8016d5c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	691d      	ldr	r5, [r3, #16]
 8016d64:	682b      	ldr	r3, [r5, #0]
 8016d66:	f857 0b04 	ldr.w	r0, [r7], #4
 8016d6a:	4798      	blx	r3
 8016d6c:	3c01      	subs	r4, #1
 8016d6e:	f846 0f04 	str.w	r0, [r6, #4]!
 8016d72:	d1f0      	bne.n	8016d56 <_Color2IndexBulk+0x66>
 8016d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d78:	1e8e      	subs	r6, r1, #2
 8016d7a:	e006      	b.n	8016d8a <_Color2IndexBulk+0x9a>
 8016d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8016d80:	7c5b      	ldrb	r3, [r3, #17]
 8016d82:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	691d      	ldr	r5, [r3, #16]
 8016d8a:	682b      	ldr	r3, [r5, #0]
 8016d8c:	f857 0b04 	ldr.w	r0, [r7], #4
 8016d90:	4798      	blx	r3
 8016d92:	3c01      	subs	r4, #1
 8016d94:	f826 0f02 	strh.w	r0, [r6, #2]!
 8016d98:	d1f0      	bne.n	8016d7c <_Color2IndexBulk+0x8c>
 8016d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d9e:	bf00      	nop
 8016da0:	20000018 	.word	0x20000018
 8016da4:	2000035c 	.word	0x2000035c

08016da8 <_Index2ColorBulk>:
 8016da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8016e58 <_Index2ColorBulk+0xb0>
 8016db0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8016e5c <_Index2ColorBulk+0xb4>
 8016db4:	f8d9 5000 	ldr.w	r5, [r9]
 8016db8:	7c6d      	ldrb	r5, [r5, #17]
 8016dba:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8016dbe:	682d      	ldr	r5, [r5, #0]
 8016dc0:	692d      	ldr	r5, [r5, #16]
 8016dc2:	696e      	ldr	r6, [r5, #20]
 8016dc4:	b11e      	cbz	r6, 8016dce <_Index2ColorBulk+0x26>
 8016dc6:	46b4      	mov	ip, r6
 8016dc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dcc:	4760      	bx	ip
 8016dce:	2b02      	cmp	r3, #2
 8016dd0:	4607      	mov	r7, r0
 8016dd2:	468e      	mov	lr, r1
 8016dd4:	4614      	mov	r4, r2
 8016dd6:	d02b      	beq.n	8016e30 <_Index2ColorBulk+0x88>
 8016dd8:	2b04      	cmp	r3, #4
 8016dda:	d016      	beq.n	8016e0a <_Index2ColorBulk+0x62>
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d001      	beq.n	8016de4 <_Index2ColorBulk+0x3c>
 8016de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de4:	1f0e      	subs	r6, r1, #4
 8016de6:	e006      	b.n	8016df6 <_Index2ColorBulk+0x4e>
 8016de8:	f8d9 3000 	ldr.w	r3, [r9]
 8016dec:	7c5b      	ldrb	r3, [r3, #17]
 8016dee:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	691d      	ldr	r5, [r3, #16]
 8016df6:	686b      	ldr	r3, [r5, #4]
 8016df8:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016dfc:	4798      	blx	r3
 8016dfe:	3c01      	subs	r4, #1
 8016e00:	f846 0f04 	str.w	r0, [r6, #4]!
 8016e04:	d1f0      	bne.n	8016de8 <_Index2ColorBulk+0x40>
 8016e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0a:	1f0e      	subs	r6, r1, #4
 8016e0c:	e006      	b.n	8016e1c <_Index2ColorBulk+0x74>
 8016e0e:	f8d9 3000 	ldr.w	r3, [r9]
 8016e12:	7c5b      	ldrb	r3, [r3, #17]
 8016e14:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	691d      	ldr	r5, [r3, #16]
 8016e1c:	686b      	ldr	r3, [r5, #4]
 8016e1e:	f857 0b04 	ldr.w	r0, [r7], #4
 8016e22:	4798      	blx	r3
 8016e24:	3c01      	subs	r4, #1
 8016e26:	f846 0f04 	str.w	r0, [r6, #4]!
 8016e2a:	d1f0      	bne.n	8016e0e <_Index2ColorBulk+0x66>
 8016e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e30:	1f0e      	subs	r6, r1, #4
 8016e32:	e006      	b.n	8016e42 <_Index2ColorBulk+0x9a>
 8016e34:	f8d9 3000 	ldr.w	r3, [r9]
 8016e38:	7c5b      	ldrb	r3, [r3, #17]
 8016e3a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	691d      	ldr	r5, [r3, #16]
 8016e42:	686b      	ldr	r3, [r5, #4]
 8016e44:	f837 0b02 	ldrh.w	r0, [r7], #2
 8016e48:	4798      	blx	r3
 8016e4a:	3c01      	subs	r4, #1
 8016e4c:	f846 0f04 	str.w	r0, [r6, #4]!
 8016e50:	d1f0      	bne.n	8016e34 <_Index2ColorBulk+0x8c>
 8016e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e56:	bf00      	nop
 8016e58:	20000018 	.word	0x20000018
 8016e5c:	2000035c 	.word	0x2000035c

08016e60 <_SetPixelIndex>:
 8016e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e64:	6804      	ldr	r4, [r0, #0]
 8016e66:	4698      	mov	r8, r3
 8016e68:	460e      	mov	r6, r1
 8016e6a:	4617      	mov	r7, r2
 8016e6c:	68e3      	ldr	r3, [r4, #12]
 8016e6e:	4620      	mov	r0, r4
 8016e70:	695b      	ldr	r3, [r3, #20]
 8016e72:	4798      	blx	r3
 8016e74:	6923      	ldr	r3, [r4, #16]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	4798      	blx	r3
 8016e7a:	6922      	ldr	r2, [r4, #16]
 8016e7c:	4605      	mov	r5, r0
 8016e7e:	4640      	mov	r0, r8
 8016e80:	6853      	ldr	r3, [r2, #4]
 8016e82:	4798      	blx	r3
 8016e84:	4b1a      	ldr	r3, [pc, #104]	; (8016ef0 <_SetPixelIndex+0x90>)
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	b30b      	cbz	r3, 8016ece <_SetPixelIndex+0x6e>
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	4819      	ldr	r0, [pc, #100]	; (8016ef4 <_SetPixelIndex+0x94>)
 8016e8e:	491a      	ldr	r1, [pc, #104]	; (8016ef8 <_SetPixelIndex+0x98>)
 8016e90:	6800      	ldr	r0, [r0, #0]
 8016e92:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8016e96:	0e12      	lsrs	r2, r2, #24
 8016e98:	7c40      	ldrb	r0, [r0, #17]
 8016e9a:	2aff      	cmp	r2, #255	; 0xff
 8016e9c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016ea0:	4816      	ldr	r0, [pc, #88]	; (8016efc <_SetPixelIndex+0x9c>)
 8016ea2:	6989      	ldr	r1, [r1, #24]
 8016ea4:	5c40      	ldrb	r0, [r0, r1]
 8016ea6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8016eaa:	d003      	beq.n	8016eb4 <_SetPixelIndex+0x54>
 8016eac:	4b14      	ldr	r3, [pc, #80]	; (8016f00 <_SetPixelIndex+0xa0>)
 8016eae:	4629      	mov	r1, r5
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4798      	blx	r3
 8016eb4:	6923      	ldr	r3, [r4, #16]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	4798      	blx	r3
 8016eba:	68e5      	ldr	r5, [r4, #12]
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	69ad      	ldr	r5, [r5, #24]
 8016ec2:	4631      	mov	r1, r6
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	46ac      	mov	ip, r5
 8016ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	4760      	bx	ip
 8016ece:	4a09      	ldr	r2, [pc, #36]	; (8016ef4 <_SetPixelIndex+0x94>)
 8016ed0:	4629      	mov	r1, r5
 8016ed2:	4b09      	ldr	r3, [pc, #36]	; (8016ef8 <_SetPixelIndex+0x98>)
 8016ed4:	6812      	ldr	r2, [r2, #0]
 8016ed6:	4d09      	ldr	r5, [pc, #36]	; (8016efc <_SetPixelIndex+0x9c>)
 8016ed8:	7c52      	ldrb	r2, [r2, #17]
 8016eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016ede:	4b08      	ldr	r3, [pc, #32]	; (8016f00 <_SetPixelIndex+0xa0>)
 8016ee0:	6992      	ldr	r2, [r2, #24]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	5caa      	ldrb	r2, [r5, r2]
 8016ee6:	4798      	blx	r3
 8016ee8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8016eec:	e7e2      	b.n	8016eb4 <_SetPixelIndex+0x54>
 8016eee:	bf00      	nop
 8016ef0:	200467b8 	.word	0x200467b8
 8016ef4:	20000018 	.word	0x20000018
 8016ef8:	200467d0 	.word	0x200467d0
 8016efc:	20000034 	.word	0x20000034
 8016f00:	20000044 	.word	0x20000044

08016f04 <_XorPixel>:
 8016f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f08:	4604      	mov	r4, r0
 8016f0a:	6800      	ldr	r0, [r0, #0]
 8016f0c:	460d      	mov	r5, r1
 8016f0e:	4617      	mov	r7, r2
 8016f10:	68c3      	ldr	r3, [r0, #12]
 8016f12:	695b      	ldr	r3, [r3, #20]
 8016f14:	4798      	blx	r3
 8016f16:	6823      	ldr	r3, [r4, #0]
 8016f18:	4606      	mov	r6, r0
 8016f1a:	691b      	ldr	r3, [r3, #16]
 8016f1c:	689b      	ldr	r3, [r3, #8]
 8016f1e:	4798      	blx	r3
 8016f20:	463a      	mov	r2, r7
 8016f22:	ea80 0306 	eor.w	r3, r0, r6
 8016f26:	4629      	mov	r1, r5
 8016f28:	4620      	mov	r0, r4
 8016f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2e:	f7ff bf97 	b.w	8016e60 <_SetPixelIndex>
 8016f32:	bf00      	nop

08016f34 <_DrawHLine>:
 8016f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f38:	6806      	ldr	r6, [r0, #0]
 8016f3a:	1a5b      	subs	r3, r3, r1
 8016f3c:	4c60      	ldr	r4, [pc, #384]	; (80170c0 <_DrawHLine+0x18c>)
 8016f3e:	b091      	sub	sp, #68	; 0x44
 8016f40:	6937      	ldr	r7, [r6, #16]
 8016f42:	1c5d      	adds	r5, r3, #1
 8016f44:	68a6      	ldr	r6, [r4, #8]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	9606      	str	r6, [sp, #24]
 8016f4a:	683f      	ldr	r7, [r7, #0]
 8016f4c:	9302      	str	r3, [sp, #8]
 8016f4e:	462b      	mov	r3, r5
 8016f50:	6966      	ldr	r6, [r4, #20]
 8016f52:	900d      	str	r0, [sp, #52]	; 0x34
 8016f54:	9601      	str	r6, [sp, #4]
 8016f56:	9e06      	ldr	r6, [sp, #24]
 8016f58:	910e      	str	r1, [sp, #56]	; 0x38
 8016f5a:	9600      	str	r6, [sp, #0]
 8016f5c:	4e59      	ldr	r6, [pc, #356]	; (80170c4 <_DrawHLine+0x190>)
 8016f5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8016f60:	f7ff fe70 	bl	8016c44 <_GetLine>
 8016f64:	6833      	ldr	r3, [r6, #0]
 8016f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f68:	6818      	ldr	r0, [r3, #0]
 8016f6a:	f002 ffeb 	bl	8019f44 <LCD_Index2Color>
 8016f6e:	2d00      	cmp	r5, #0
 8016f70:	900b      	str	r0, [sp, #44]	; 0x2c
 8016f72:	dd48      	ble.n	8017006 <_DrawHLine+0xd2>
 8016f74:	0e03      	lsrs	r3, r0, #24
 8016f76:	b2d9      	uxtb	r1, r3
 8016f78:	2bff      	cmp	r3, #255	; 0xff
 8016f7a:	9108      	str	r1, [sp, #32]
 8016f7c:	d068      	beq.n	8017050 <_DrawHLine+0x11c>
 8016f7e:	4b52      	ldr	r3, [pc, #328]	; (80170c8 <_DrawHLine+0x194>)
 8016f80:	f04f 0a00 	mov.w	sl, #0
 8016f84:	f8df b14c 	ldr.w	fp, [pc, #332]	; 80170d4 <_DrawHLine+0x1a0>
 8016f88:	9306      	str	r3, [sp, #24]
 8016f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f8c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80170d0 <_DrawHLine+0x19c>
 8016f90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016f94:	9507      	str	r5, [sp, #28]
 8016f96:	970a      	str	r7, [sp, #40]	; 0x28
 8016f98:	930c      	str	r3, [sp, #48]	; 0x30
 8016f9a:	4b4c      	ldr	r3, [pc, #304]	; (80170cc <_DrawHLine+0x198>)
 8016f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8016f9e:	e018      	b.n	8016fd2 <_DrawHLine+0x9e>
 8016fa0:	6830      	ldr	r0, [r6, #0]
 8016fa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016fa4:	7c40      	ldrb	r0, [r0, #17]
 8016fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8016faa:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8016fae:	9d06      	ldr	r5, [sp, #24]
 8016fb0:	6980      	ldr	r0, [r0, #24]
 8016fb2:	5c28      	ldrb	r0, [r5, r0]
 8016fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016fb6:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 8016fba:	4798      	blx	r3
 8016fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fbe:	f10a 0a01 	add.w	sl, sl, #1
 8016fc2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8016fc6:	4798      	blx	r3
 8016fc8:	9b07      	ldr	r3, [sp, #28]
 8016fca:	f848 0007 	str.w	r0, [r8, r7]
 8016fce:	459a      	cmp	sl, r3
 8016fd0:	d018      	beq.n	8017004 <_DrawHLine+0xd0>
 8016fd2:	6961      	ldr	r1, [r4, #20]
 8016fd4:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8016fd8:	f89b 3000 	ldrb.w	r3, [fp]
 8016fdc:	9a08      	ldr	r2, [sp, #32]
 8016fde:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d1dc      	bne.n	8016fa0 <_DrawHLine+0x6c>
 8016fe6:	6832      	ldr	r2, [r6, #0]
 8016fe8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016fea:	7c52      	ldrb	r2, [r2, #17]
 8016fec:	f8d9 3000 	ldr.w	r3, [r9]
 8016ff0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8016ff4:	9d06      	ldr	r5, [sp, #24]
 8016ff6:	6992      	ldr	r2, [r2, #24]
 8016ff8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016ffa:	5caa      	ldrb	r2, [r5, r2]
 8016ffc:	4798      	blx	r3
 8016ffe:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017002:	e7db      	b.n	8016fbc <_DrawHLine+0x88>
 8017004:	461d      	mov	r5, r3
 8017006:	6833      	ldr	r3, [r6, #0]
 8017008:	7c58      	ldrb	r0, [r3, #17]
 801700a:	f003 fa63 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 801700e:	2818      	cmp	r0, #24
 8017010:	bf14      	ite	ne
 8017012:	4606      	movne	r6, r0
 8017014:	2620      	moveq	r6, #32
 8017016:	4629      	mov	r1, r5
 8017018:	68a0      	ldr	r0, [r4, #8]
 801701a:	4632      	mov	r2, r6
 801701c:	f001 fd54 	bl	8018ac8 <GUI__CompactPixelIndices>
 8017020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017022:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8017026:	f04f 0e01 	mov.w	lr, #1
 801702a:	6818      	ldr	r0, [r3, #0]
 801702c:	2400      	movs	r4, #0
 801702e:	462b      	mov	r3, r5
 8017030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017032:	68c7      	ldr	r7, [r0, #12]
 8017034:	f8cd c00c 	str.w	ip, [sp, #12]
 8017038:	9601      	str	r6, [sp, #4]
 801703a:	9405      	str	r4, [sp, #20]
 801703c:	9404      	str	r4, [sp, #16]
 801703e:	9402      	str	r4, [sp, #8]
 8017040:	f8cd e000 	str.w	lr, [sp]
 8017044:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017046:	687c      	ldr	r4, [r7, #4]
 8017048:	47a0      	blx	r4
 801704a:	b011      	add	sp, #68	; 0x44
 801704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017050:	4b1d      	ldr	r3, [pc, #116]	; (80170c8 <_DrawHLine+0x194>)
 8017052:	f04f 0900 	mov.w	r9, #0
 8017056:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80170d4 <_DrawHLine+0x1a0>
 801705a:	9306      	str	r3, [sp, #24]
 801705c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 8017060:	9707      	str	r7, [sp, #28]
 8017062:	9308      	str	r3, [sp, #32]
 8017064:	4b19      	ldr	r3, [pc, #100]	; (80170cc <_DrawHLine+0x198>)
 8017066:	469a      	mov	sl, r3
 8017068:	e012      	b.n	8017090 <_DrawHLine+0x15c>
 801706a:	6833      	ldr	r3, [r6, #0]
 801706c:	9a06      	ldr	r2, [sp, #24]
 801706e:	7c5b      	ldrb	r3, [r3, #17]
 8017070:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8017074:	699b      	ldr	r3, [r3, #24]
 8017076:	5cd0      	ldrb	r0, [r2, r3]
 8017078:	9b08      	ldr	r3, [sp, #32]
 801707a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801707e:	f109 0901 	add.w	r9, r9, #1
 8017082:	9b07      	ldr	r3, [sp, #28]
 8017084:	68a7      	ldr	r7, [r4, #8]
 8017086:	4798      	blx	r3
 8017088:	45a9      	cmp	r9, r5
 801708a:	f847 0008 	str.w	r0, [r7, r8]
 801708e:	d0ba      	beq.n	8017006 <_DrawHLine+0xd2>
 8017090:	6962      	ldr	r2, [r4, #20]
 8017092:	ea4f 0889 	mov.w	r8, r9, lsl #2
 8017096:	f89b 3000 	ldrb.w	r3, [fp]
 801709a:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d1e3      	bne.n	801706a <_DrawHLine+0x136>
 80170a2:	6832      	ldr	r2, [r6, #0]
 80170a4:	9f06      	ldr	r7, [sp, #24]
 80170a6:	7c52      	ldrb	r2, [r2, #17]
 80170a8:	4b09      	ldr	r3, [pc, #36]	; (80170d0 <_DrawHLine+0x19c>)
 80170aa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	6992      	ldr	r2, [r2, #24]
 80170b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80170b4:	5cba      	ldrb	r2, [r7, r2]
 80170b6:	4798      	blx	r3
 80170b8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80170bc:	e7df      	b.n	801707e <_DrawHLine+0x14a>
 80170be:	bf00      	nop
 80170c0:	2000035c 	.word	0x2000035c
 80170c4:	20000018 	.word	0x20000018
 80170c8:	20000034 	.word	0x20000034
 80170cc:	200467d0 	.word	0x200467d0
 80170d0:	20000044 	.word	0x20000044
 80170d4:	200467b8 	.word	0x200467b8

080170d8 <_FillRect>:
 80170d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170dc:	9d06      	ldr	r5, [sp, #24]
 80170de:	42aa      	cmp	r2, r5
 80170e0:	dc0c      	bgt.n	80170fc <_FillRect+0x24>
 80170e2:	4614      	mov	r4, r2
 80170e4:	4680      	mov	r8, r0
 80170e6:	460f      	mov	r7, r1
 80170e8:	461e      	mov	r6, r3
 80170ea:	4622      	mov	r2, r4
 80170ec:	3401      	adds	r4, #1
 80170ee:	4633      	mov	r3, r6
 80170f0:	4639      	mov	r1, r7
 80170f2:	4640      	mov	r0, r8
 80170f4:	f7ff ff1e 	bl	8016f34 <_DrawHLine>
 80170f8:	42a5      	cmp	r5, r4
 80170fa:	daf6      	bge.n	80170ea <_FillRect+0x12>
 80170fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017100 <_DrawVLine>:
 8017100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017104:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80172a0 <_DrawVLine+0x1a0>
 8017108:	460e      	mov	r6, r1
 801710a:	4699      	mov	r9, r3
 801710c:	b085      	sub	sp, #20
 801710e:	f8d8 1000 	ldr.w	r1, [r8]
 8017112:	4607      	mov	r7, r0
 8017114:	4614      	mov	r4, r2
 8017116:	7c0b      	ldrb	r3, [r1, #16]
 8017118:	07db      	lsls	r3, r3, #31
 801711a:	d456      	bmi.n	80171ca <_DrawVLine+0xca>
 801711c:	454a      	cmp	r2, r9
 801711e:	dc56      	bgt.n	80171ce <_DrawVLine+0xce>
 8017120:	4b5b      	ldr	r3, [pc, #364]	; (8017290 <_DrawVLine+0x190>)
 8017122:	4682      	mov	sl, r0
 8017124:	9301      	str	r3, [sp, #4]
 8017126:	4b5b      	ldr	r3, [pc, #364]	; (8017294 <_DrawVLine+0x194>)
 8017128:	9302      	str	r3, [sp, #8]
 801712a:	4b5b      	ldr	r3, [pc, #364]	; (8017298 <_DrawVLine+0x198>)
 801712c:	9303      	str	r3, [sp, #12]
 801712e:	e023      	b.n	8017178 <_DrawVLine+0x78>
 8017130:	f8d8 0000 	ldr.w	r0, [r8]
 8017134:	2bff      	cmp	r3, #255	; 0xff
 8017136:	9f03      	ldr	r7, [sp, #12]
 8017138:	461a      	mov	r2, r3
 801713a:	7c40      	ldrb	r0, [r0, #17]
 801713c:	4659      	mov	r1, fp
 801713e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8017142:	9f02      	ldr	r7, [sp, #8]
 8017144:	6980      	ldr	r0, [r0, #24]
 8017146:	5c38      	ldrb	r0, [r7, r0]
 8017148:	ea4e 6700 	orr.w	r7, lr, r0, lsl #24
 801714c:	4638      	mov	r0, r7
 801714e:	d003      	beq.n	8017158 <_DrawVLine+0x58>
 8017150:	4b52      	ldr	r3, [pc, #328]	; (801729c <_DrawVLine+0x19c>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	4798      	blx	r3
 8017156:	4607      	mov	r7, r0
 8017158:	692b      	ldr	r3, [r5, #16]
 801715a:	4638      	mov	r0, r7
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	4798      	blx	r3
 8017160:	68e9      	ldr	r1, [r5, #12]
 8017162:	4622      	mov	r2, r4
 8017164:	3401      	adds	r4, #1
 8017166:	4603      	mov	r3, r0
 8017168:	698f      	ldr	r7, [r1, #24]
 801716a:	4628      	mov	r0, r5
 801716c:	4631      	mov	r1, r6
 801716e:	47b8      	blx	r7
 8017170:	45a1      	cmp	r9, r4
 8017172:	db2c      	blt.n	80171ce <_DrawVLine+0xce>
 8017174:	f8d8 1000 	ldr.w	r1, [r8]
 8017178:	f8da 5000 	ldr.w	r5, [sl]
 801717c:	4622      	mov	r2, r4
 801717e:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 8017180:	4631      	mov	r1, r6
 8017182:	68eb      	ldr	r3, [r5, #12]
 8017184:	4628      	mov	r0, r5
 8017186:	683f      	ldr	r7, [r7, #0]
 8017188:	695b      	ldr	r3, [r3, #20]
 801718a:	4798      	blx	r3
 801718c:	692b      	ldr	r3, [r5, #16]
 801718e:	685b      	ldr	r3, [r3, #4]
 8017190:	4798      	blx	r3
 8017192:	692b      	ldr	r3, [r5, #16]
 8017194:	4683      	mov	fp, r0
 8017196:	4638      	mov	r0, r7
 8017198:	685b      	ldr	r3, [r3, #4]
 801719a:	4798      	blx	r3
 801719c:	9a01      	ldr	r2, [sp, #4]
 801719e:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 80171a2:	0e03      	lsrs	r3, r0, #24
 80171a4:	7812      	ldrb	r2, [r2, #0]
 80171a6:	2a00      	cmp	r2, #0
 80171a8:	d1c2      	bne.n	8017130 <_DrawVLine+0x30>
 80171aa:	f8d8 2000 	ldr.w	r2, [r8]
 80171ae:	4659      	mov	r1, fp
 80171b0:	9f03      	ldr	r7, [sp, #12]
 80171b2:	7c52      	ldrb	r2, [r2, #17]
 80171b4:	4b39      	ldr	r3, [pc, #228]	; (801729c <_DrawVLine+0x19c>)
 80171b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80171ba:	9f02      	ldr	r7, [sp, #8]
 80171bc:	6992      	ldr	r2, [r2, #24]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	5cba      	ldrb	r2, [r7, r2]
 80171c2:	4798      	blx	r3
 80171c4:	f040 477f 	orr.w	r7, r0, #4278190080	; 0xff000000
 80171c8:	e7c6      	b.n	8017158 <_DrawVLine+0x58>
 80171ca:	454a      	cmp	r2, r9
 80171cc:	dd02      	ble.n	80171d4 <_DrawVLine+0xd4>
 80171ce:	b005      	add	sp, #20
 80171d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171d4:	4b2e      	ldr	r3, [pc, #184]	; (8017290 <_DrawVLine+0x190>)
 80171d6:	9600      	str	r6, [sp, #0]
 80171d8:	9301      	str	r3, [sp, #4]
 80171da:	4b2e      	ldr	r3, [pc, #184]	; (8017294 <_DrawVLine+0x194>)
 80171dc:	9302      	str	r3, [sp, #8]
 80171de:	4b2e      	ldr	r3, [pc, #184]	; (8017298 <_DrawVLine+0x198>)
 80171e0:	9303      	str	r3, [sp, #12]
 80171e2:	e022      	b.n	801722a <_DrawVLine+0x12a>
 80171e4:	f8d8 0000 	ldr.w	r0, [r8]
 80171e8:	2bff      	cmp	r3, #255	; 0xff
 80171ea:	9e03      	ldr	r6, [sp, #12]
 80171ec:	461a      	mov	r2, r3
 80171ee:	7c40      	ldrb	r0, [r0, #17]
 80171f0:	4651      	mov	r1, sl
 80171f2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80171f6:	9e02      	ldr	r6, [sp, #8]
 80171f8:	6980      	ldr	r0, [r0, #24]
 80171fa:	5c30      	ldrb	r0, [r6, r0]
 80171fc:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017200:	4670      	mov	r0, lr
 8017202:	d003      	beq.n	801720c <_DrawVLine+0x10c>
 8017204:	4b25      	ldr	r3, [pc, #148]	; (801729c <_DrawVLine+0x19c>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	4798      	blx	r3
 801720a:	4686      	mov	lr, r0
 801720c:	692b      	ldr	r3, [r5, #16]
 801720e:	4670      	mov	r0, lr
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	4798      	blx	r3
 8017214:	68e9      	ldr	r1, [r5, #12]
 8017216:	4622      	mov	r2, r4
 8017218:	3401      	adds	r4, #1
 801721a:	4603      	mov	r3, r0
 801721c:	f8d1 b018 	ldr.w	fp, [r1, #24]
 8017220:	4628      	mov	r0, r5
 8017222:	9900      	ldr	r1, [sp, #0]
 8017224:	47d8      	blx	fp
 8017226:	45a1      	cmp	r9, r4
 8017228:	dbd1      	blt.n	80171ce <_DrawVLine+0xce>
 801722a:	6838      	ldr	r0, [r7, #0]
 801722c:	4622      	mov	r2, r4
 801722e:	9900      	ldr	r1, [sp, #0]
 8017230:	68c3      	ldr	r3, [r0, #12]
 8017232:	695b      	ldr	r3, [r3, #20]
 8017234:	4798      	blx	r3
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	4683      	mov	fp, r0
 801723a:	691b      	ldr	r3, [r3, #16]
 801723c:	689b      	ldr	r3, [r3, #8]
 801723e:	4798      	blx	r3
 8017240:	683d      	ldr	r5, [r7, #0]
 8017242:	4622      	mov	r2, r4
 8017244:	9900      	ldr	r1, [sp, #0]
 8017246:	68eb      	ldr	r3, [r5, #12]
 8017248:	ea8b 0b00 	eor.w	fp, fp, r0
 801724c:	4628      	mov	r0, r5
 801724e:	695b      	ldr	r3, [r3, #20]
 8017250:	4798      	blx	r3
 8017252:	692b      	ldr	r3, [r5, #16]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	4798      	blx	r3
 8017258:	692b      	ldr	r3, [r5, #16]
 801725a:	4682      	mov	sl, r0
 801725c:	4658      	mov	r0, fp
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	4798      	blx	r3
 8017262:	9a01      	ldr	r2, [sp, #4]
 8017264:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017268:	0e03      	lsrs	r3, r0, #24
 801726a:	7812      	ldrb	r2, [r2, #0]
 801726c:	2a00      	cmp	r2, #0
 801726e:	d1b9      	bne.n	80171e4 <_DrawVLine+0xe4>
 8017270:	f8d8 2000 	ldr.w	r2, [r8]
 8017274:	4651      	mov	r1, sl
 8017276:	9e03      	ldr	r6, [sp, #12]
 8017278:	7c52      	ldrb	r2, [r2, #17]
 801727a:	4b08      	ldr	r3, [pc, #32]	; (801729c <_DrawVLine+0x19c>)
 801727c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017280:	9e02      	ldr	r6, [sp, #8]
 8017282:	6992      	ldr	r2, [r2, #24]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	5cb2      	ldrb	r2, [r6, r2]
 8017288:	4798      	blx	r3
 801728a:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 801728e:	e7bd      	b.n	801720c <_DrawVLine+0x10c>
 8017290:	200467b8 	.word	0x200467b8
 8017294:	20000034 	.word	0x20000034
 8017298:	200467d0 	.word	0x200467d0
 801729c:	20000044 	.word	0x20000044
 80172a0:	20000018 	.word	0x20000018

080172a4 <_DrawBitmap>:
 80172a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a8:	b093      	sub	sp, #76	; 0x4c
 80172aa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80172ac:	2c00      	cmp	r4, #0
 80172ae:	dd32      	ble.n	8017316 <_DrawBitmap+0x72>
 80172b0:	930c      	str	r3, [sp, #48]	; 0x30
 80172b2:	2300      	movs	r3, #0
 80172b4:	920e      	str	r2, [sp, #56]	; 0x38
 80172b6:	461a      	mov	r2, r3
 80172b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80172ba:	9110      	str	r1, [sp, #64]	; 0x40
 80172bc:	3b01      	subs	r3, #1
 80172be:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80172c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80172c2:	2b1f      	cmp	r3, #31
 80172c4:	d821      	bhi.n	801730a <_DrawBitmap+0x66>
 80172c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80172ca:	0029      	.short	0x0029
 80172cc:	002001fb 	.word	0x002001fb
 80172d0:	00200223 	.word	0x00200223
 80172d4:	00200020 	.word	0x00200020
 80172d8:	0020024b 	.word	0x0020024b
 80172dc:	00200020 	.word	0x00200020
 80172e0:	00200020 	.word	0x00200020
 80172e4:	00200020 	.word	0x00200020
 80172e8:	00200193 	.word	0x00200193
 80172ec:	00200020 	.word	0x00200020
 80172f0:	00200020 	.word	0x00200020
 80172f4:	00200020 	.word	0x00200020
 80172f8:	00200020 	.word	0x00200020
 80172fc:	00200020 	.word	0x00200020
 8017300:	00200020 	.word	0x00200020
 8017304:	00200020 	.word	0x00200020
 8017308:	0271      	.short	0x0271
 801730a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801730c:	3201      	adds	r2, #1
 801730e:	4401      	add	r1, r0
 8017310:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017312:	4290      	cmp	r0, r2
 8017314:	dcd5      	bgt.n	80172c2 <_DrawBitmap+0x1e>
 8017316:	b013      	add	sp, #76	; 0x4c
 8017318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801731c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801731e:	9209      	str	r2, [sp, #36]	; 0x24
 8017320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017322:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 80175ec <_DrawBitmap+0x348>
 8017326:	4413      	add	r3, r2
 8017328:	4fab      	ldr	r7, [pc, #684]	; (80175d8 <_DrawBitmap+0x334>)
 801732a:	911f      	str	r1, [sp, #124]	; 0x7c
 801732c:	9310      	str	r3, [sp, #64]	; 0x40
 801732e:	f8db 3000 	ldr.w	r3, [fp]
 8017332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017334:	7c1b      	ldrb	r3, [r3, #16]
 8017336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017338:	f003 0303 	and.w	r3, r3, #3
 801733c:	440a      	add	r2, r1
 801733e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017340:	2b02      	cmp	r3, #2
 8017342:	920d      	str	r2, [sp, #52]	; 0x34
 8017344:	684e      	ldr	r6, [r1, #4]
 8017346:	f000 80dc 	beq.w	8017502 <_DrawBitmap+0x25e>
 801734a:	2b03      	cmp	r3, #3
 801734c:	f000 8093 	beq.w	8017476 <_DrawBitmap+0x1d2>
 8017350:	2b01      	cmp	r3, #1
 8017352:	f000 8090 	beq.w	8017476 <_DrawBitmap+0x1d2>
 8017356:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017358:	f04f 0a00 	mov.w	sl, #0
 801735c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801735e:	6801      	ldr	r1, [r0, #0]
 8017360:	462b      	mov	r3, r5
 8017362:	690c      	ldr	r4, [r1, #16]
 8017364:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017366:	e894 0110 	ldmia.w	r4, {r4, r8}
 801736a:	f8cd 8008 	str.w	r8, [sp, #8]
 801736e:	9408      	str	r4, [sp, #32]
 8017370:	697c      	ldr	r4, [r7, #20]
 8017372:	9401      	str	r4, [sp, #4]
 8017374:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017376:	9407      	str	r4, [sp, #28]
 8017378:	68bc      	ldr	r4, [r7, #8]
 801737a:	9400      	str	r4, [sp, #0]
 801737c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801737e:	f8d4 9000 	ldr.w	r9, [r4]
 8017382:	f7ff fc5f 	bl	8016c44 <_GetLine>
 8017386:	4648      	mov	r0, r9
 8017388:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80175e8 <_DrawBitmap+0x344>
 801738c:	47c0      	blx	r8
 801738e:	900a      	str	r0, [sp, #40]	; 0x28
 8017390:	4630      	mov	r0, r6
 8017392:	47c0      	blx	r8
 8017394:	9c07      	ldr	r4, [sp, #28]
 8017396:	900b      	str	r0, [sp, #44]	; 0x2c
 8017398:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801739a:	9507      	str	r5, [sp, #28]
 801739c:	e023      	b.n	80173e6 <_DrawBitmap+0x142>
 801739e:	0e03      	lsrs	r3, r0, #24
 80173a0:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 80173a4:	4d8d      	ldr	r5, [pc, #564]	; (80175dc <_DrawBitmap+0x338>)
 80173a6:	7c50      	ldrb	r0, [r2, #17]
 80173a8:	2bff      	cmp	r3, #255	; 0xff
 80173aa:	461a      	mov	r2, r3
 80173ac:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80173b0:	4d8b      	ldr	r5, [pc, #556]	; (80175e0 <_DrawBitmap+0x33c>)
 80173b2:	6980      	ldr	r0, [r0, #24]
 80173b4:	5c28      	ldrb	r0, [r5, r0]
 80173b6:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 80173ba:	4670      	mov	r0, lr
 80173bc:	d003      	beq.n	80173c6 <_DrawBitmap+0x122>
 80173be:	f8d9 3000 	ldr.w	r3, [r9]
 80173c2:	4798      	blx	r3
 80173c4:	4686      	mov	lr, r0
 80173c6:	3401      	adds	r4, #1
 80173c8:	4670      	mov	r0, lr
 80173ca:	9b08      	ldr	r3, [sp, #32]
 80173cc:	f8d7 8008 	ldr.w	r8, [r7, #8]
 80173d0:	4798      	blx	r3
 80173d2:	2c08      	cmp	r4, #8
 80173d4:	f848 000a 	str.w	r0, [r8, sl]
 80173d8:	f10a 0a04 	add.w	sl, sl, #4
 80173dc:	d021      	beq.n	8017422 <_DrawBitmap+0x17e>
 80173de:	9b07      	ldr	r3, [sp, #28]
 80173e0:	3b01      	subs	r3, #1
 80173e2:	9307      	str	r3, [sp, #28]
 80173e4:	d023      	beq.n	801742e <_DrawBitmap+0x18a>
 80173e6:	2380      	movs	r3, #128	; 0x80
 80173e8:	7831      	ldrb	r1, [r6, #0]
 80173ea:	697a      	ldr	r2, [r7, #20]
 80173ec:	4123      	asrs	r3, r4
 80173ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80173f0:	4219      	tst	r1, r3
 80173f2:	4b7c      	ldr	r3, [pc, #496]	; (80175e4 <_DrawBitmap+0x340>)
 80173f4:	f852 100a 	ldr.w	r1, [r2, sl]
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173fc:	bf08      	it	eq
 80173fe:	4610      	moveq	r0, r2
 8017400:	f8db 2000 	ldr.w	r2, [fp]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d1ca      	bne.n	801739e <_DrawBitmap+0xfa>
 8017408:	7c52      	ldrb	r2, [r2, #17]
 801740a:	4d74      	ldr	r5, [pc, #464]	; (80175dc <_DrawBitmap+0x338>)
 801740c:	f8d9 3000 	ldr.w	r3, [r9]
 8017410:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017414:	4d72      	ldr	r5, [pc, #456]	; (80175e0 <_DrawBitmap+0x33c>)
 8017416:	6992      	ldr	r2, [r2, #24]
 8017418:	5caa      	ldrb	r2, [r5, r2]
 801741a:	4798      	blx	r3
 801741c:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8017420:	e7d1      	b.n	80173c6 <_DrawBitmap+0x122>
 8017422:	9b07      	ldr	r3, [sp, #28]
 8017424:	3601      	adds	r6, #1
 8017426:	2400      	movs	r4, #0
 8017428:	3b01      	subs	r3, #1
 801742a:	9307      	str	r3, [sp, #28]
 801742c:	d1db      	bne.n	80173e6 <_DrawBitmap+0x142>
 801742e:	461d      	mov	r5, r3
 8017430:	f8db 3000 	ldr.w	r3, [fp]
 8017434:	7c58      	ldrb	r0, [r3, #17]
 8017436:	f003 f84d 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 801743a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801743e:	2818      	cmp	r0, #24
 8017440:	bf14      	ite	ne
 8017442:	4606      	movne	r6, r0
 8017444:	2620      	moveq	r6, #32
 8017446:	68b8      	ldr	r0, [r7, #8]
 8017448:	4641      	mov	r1, r8
 801744a:	4632      	mov	r2, r6
 801744c:	f001 fb3c 	bl	8018ac8 <GUI__CompactPixelIndices>
 8017450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017452:	f04f 0c01 	mov.w	ip, #1
 8017456:	4643      	mov	r3, r8
 8017458:	6810      	ldr	r0, [r2, #0]
 801745a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801745c:	68c4      	ldr	r4, [r0, #12]
 801745e:	9601      	str	r6, [sp, #4]
 8017460:	9505      	str	r5, [sp, #20]
 8017462:	9504      	str	r5, [sp, #16]
 8017464:	9502      	str	r5, [sp, #8]
 8017466:	68bd      	ldr	r5, [r7, #8]
 8017468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801746a:	9503      	str	r5, [sp, #12]
 801746c:	f8cd c000 	str.w	ip, [sp]
 8017470:	6864      	ldr	r4, [r4, #4]
 8017472:	47a0      	blx	r4
 8017474:	e039      	b.n	80174ea <_DrawBitmap+0x246>
 8017476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017478:	f04f 0980 	mov.w	r9, #128	; 0x80
 801747c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801747e:	691b      	ldr	r3, [r3, #16]
 8017480:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017482:	689b      	ldr	r3, [r3, #8]
 8017484:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8017488:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801748a:	4798      	blx	r3
 801748c:	f8cd b020 	str.w	fp, [sp, #32]
 8017490:	9007      	str	r0, [sp, #28]
 8017492:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8017496:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801749a:	e005      	b.n	80174a8 <_DrawBitmap+0x204>
 801749c:	2c08      	cmp	r4, #8
 801749e:	f106 0601 	add.w	r6, r6, #1
 80174a2:	d01a      	beq.n	80174da <_DrawBitmap+0x236>
 80174a4:	3d01      	subs	r5, #1
 80174a6:	d01e      	beq.n	80174e6 <_DrawBitmap+0x242>
 80174a8:	fa49 f304 	asr.w	r3, r9, r4
 80174ac:	f898 2000 	ldrb.w	r2, [r8]
 80174b0:	3401      	adds	r4, #1
 80174b2:	421a      	tst	r2, r3
 80174b4:	d0f2      	beq.n	801749c <_DrawBitmap+0x1f8>
 80174b6:	f8db 0000 	ldr.w	r0, [fp]
 80174ba:	4631      	mov	r1, r6
 80174bc:	4652      	mov	r2, sl
 80174be:	68c3      	ldr	r3, [r0, #12]
 80174c0:	695b      	ldr	r3, [r3, #20]
 80174c2:	4798      	blx	r3
 80174c4:	9b07      	ldr	r3, [sp, #28]
 80174c6:	4631      	mov	r1, r6
 80174c8:	4652      	mov	r2, sl
 80174ca:	4043      	eors	r3, r0
 80174cc:	4658      	mov	r0, fp
 80174ce:	f7ff fcc7 	bl	8016e60 <_SetPixelIndex>
 80174d2:	2c08      	cmp	r4, #8
 80174d4:	f106 0601 	add.w	r6, r6, #1
 80174d8:	d1e4      	bne.n	80174a4 <_DrawBitmap+0x200>
 80174da:	3d01      	subs	r5, #1
 80174dc:	f108 0801 	add.w	r8, r8, #1
 80174e0:	f04f 0400 	mov.w	r4, #0
 80174e4:	d1e0      	bne.n	80174a8 <_DrawBitmap+0x204>
 80174e6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80174ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80174ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80174ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174f0:	440a      	add	r2, r1
 80174f2:	3301      	adds	r3, #1
 80174f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80174f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80174f8:	9309      	str	r3, [sp, #36]	; 0x24
 80174fa:	429a      	cmp	r2, r3
 80174fc:	f73f af17 	bgt.w	801732e <_DrawBitmap+0x8a>
 8017500:	e709      	b.n	8017316 <_DrawBitmap+0x72>
 8017502:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017504:	697c      	ldr	r4, [r7, #20]
 8017506:	6801      	ldr	r1, [r0, #0]
 8017508:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801750c:	690d      	ldr	r5, [r1, #16]
 801750e:	4673      	mov	r3, lr
 8017510:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017512:	e895 0120 	ldmia.w	r5, {r5, r8}
 8017516:	9401      	str	r4, [sp, #4]
 8017518:	f8cd 8008 	str.w	r8, [sp, #8]
 801751c:	68bc      	ldr	r4, [r7, #8]
 801751e:	9507      	str	r5, [sp, #28]
 8017520:	4675      	mov	r5, lr
 8017522:	9400      	str	r4, [sp, #0]
 8017524:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017526:	f7ff fb8d 	bl	8016c44 <_GetLine>
 801752a:	4630      	mov	r0, r6
 801752c:	2600      	movs	r6, #0
 801752e:	47c0      	blx	r8
 8017530:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8017534:	0e03      	lsrs	r3, r0, #24
 8017536:	4681      	mov	r9, r0
 8017538:	9308      	str	r3, [sp, #32]
 801753a:	b2db      	uxtb	r3, r3
 801753c:	930a      	str	r3, [sp, #40]	; 0x28
 801753e:	e006      	b.n	801754e <_DrawBitmap+0x2aa>
 8017540:	3401      	adds	r4, #1
 8017542:	3604      	adds	r6, #4
 8017544:	2c08      	cmp	r4, #8
 8017546:	d031      	beq.n	80175ac <_DrawBitmap+0x308>
 8017548:	3d01      	subs	r5, #1
 801754a:	f43f af71 	beq.w	8017430 <_DrawBitmap+0x18c>
 801754e:	2380      	movs	r3, #128	; 0x80
 8017550:	f898 2000 	ldrb.w	r2, [r8]
 8017554:	4123      	asrs	r3, r4
 8017556:	421a      	tst	r2, r3
 8017558:	d0f2      	beq.n	8017540 <_DrawBitmap+0x29c>
 801755a:	4a22      	ldr	r2, [pc, #136]	; (80175e4 <_DrawBitmap+0x340>)
 801755c:	f029 4c7f 	bic.w	ip, r9, #4278190080	; 0xff000000
 8017560:	6979      	ldr	r1, [r7, #20]
 8017562:	7812      	ldrb	r2, [r2, #0]
 8017564:	5989      	ldr	r1, [r1, r6]
 8017566:	b32a      	cbz	r2, 80175b4 <_DrawBitmap+0x310>
 8017568:	f8db 0000 	ldr.w	r0, [fp]
 801756c:	4b1b      	ldr	r3, [pc, #108]	; (80175dc <_DrawBitmap+0x338>)
 801756e:	7c40      	ldrb	r0, [r0, #17]
 8017570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017572:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017576:	4b1a      	ldr	r3, [pc, #104]	; (80175e0 <_DrawBitmap+0x33c>)
 8017578:	6980      	ldr	r0, [r0, #24]
 801757a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80175e8 <_DrawBitmap+0x344>
 801757e:	5c18      	ldrb	r0, [r3, r0]
 8017580:	ea4c 6300 	orr.w	r3, ip, r0, lsl #24
 8017584:	9808      	ldr	r0, [sp, #32]
 8017586:	28ff      	cmp	r0, #255	; 0xff
 8017588:	4618      	mov	r0, r3
 801758a:	d003      	beq.n	8017594 <_DrawBitmap+0x2f0>
 801758c:	f8de 3000 	ldr.w	r3, [lr]
 8017590:	4798      	blx	r3
 8017592:	4603      	mov	r3, r0
 8017594:	3401      	adds	r4, #1
 8017596:	4618      	mov	r0, r3
 8017598:	9b07      	ldr	r3, [sp, #28]
 801759a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801759e:	4798      	blx	r3
 80175a0:	2c08      	cmp	r4, #8
 80175a2:	f84a 0006 	str.w	r0, [sl, r6]
 80175a6:	f106 0604 	add.w	r6, r6, #4
 80175aa:	d1cd      	bne.n	8017548 <_DrawBitmap+0x2a4>
 80175ac:	f108 0801 	add.w	r8, r8, #1
 80175b0:	2400      	movs	r4, #0
 80175b2:	e7c9      	b.n	8017548 <_DrawBitmap+0x2a4>
 80175b4:	f8db 2000 	ldr.w	r2, [fp]
 80175b8:	4648      	mov	r0, r9
 80175ba:	4b0b      	ldr	r3, [pc, #44]	; (80175e8 <_DrawBitmap+0x344>)
 80175bc:	7c52      	ldrb	r2, [r2, #17]
 80175be:	f8d3 c000 	ldr.w	ip, [r3]
 80175c2:	4b06      	ldr	r3, [pc, #24]	; (80175dc <_DrawBitmap+0x338>)
 80175c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80175c8:	4b05      	ldr	r3, [pc, #20]	; (80175e0 <_DrawBitmap+0x33c>)
 80175ca:	6992      	ldr	r2, [r2, #24]
 80175cc:	5c9a      	ldrb	r2, [r3, r2]
 80175ce:	47e0      	blx	ip
 80175d0:	f040 437f 	orr.w	r3, r0, #4278190080	; 0xff000000
 80175d4:	e7de      	b.n	8017594 <_DrawBitmap+0x2f0>
 80175d6:	bf00      	nop
 80175d8:	2000035c 	.word	0x2000035c
 80175dc:	200467d0 	.word	0x200467d0
 80175e0:	20000034 	.word	0x20000034
 80175e4:	200467b8 	.word	0x200467b8
 80175e8:	20000044 	.word	0x20000044
 80175ec:	20000018 	.word	0x20000018
 80175f0:	4ba2      	ldr	r3, [pc, #648]	; (801787c <_DrawBitmap+0x5d8>)
 80175f2:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8017888 <_DrawBitmap+0x5e4>
 80175f6:	930d      	str	r3, [sp, #52]	; 0x34
 80175f8:	f8df b290 	ldr.w	fp, [pc, #656]	; 801788c <_DrawBitmap+0x5e8>
 80175fc:	46ca      	mov	sl, r9
 80175fe:	4ba0      	ldr	r3, [pc, #640]	; (8017880 <_DrawBitmap+0x5dc>)
 8017600:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8017890 <_DrawBitmap+0x5ec>
 8017604:	9209      	str	r2, [sp, #36]	; 0x24
 8017606:	911f      	str	r1, [sp, #124]	; 0x7c
 8017608:	9308      	str	r3, [sp, #32]
 801760a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801760c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017610:	6802      	ldr	r2, [r0, #0]
 8017612:	440b      	add	r3, r1
 8017614:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017616:	6916      	ldr	r6, [r2, #16]
 8017618:	461d      	mov	r5, r3
 801761a:	694c      	ldr	r4, [r1, #20]
 801761c:	6877      	ldr	r7, [r6, #4]
 801761e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8017622:	462a      	mov	r2, r5
 8017624:	688d      	ldr	r5, [r1, #8]
 8017626:	6836      	ldr	r6, [r6, #0]
 8017628:	9311      	str	r3, [sp, #68]	; 0x44
 801762a:	4673      	mov	r3, lr
 801762c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801762e:	9702      	str	r7, [sp, #8]
 8017630:	9401      	str	r4, [sp, #4]
 8017632:	4674      	mov	r4, lr
 8017634:	9500      	str	r5, [sp, #0]
 8017636:	970a      	str	r7, [sp, #40]	; 0x28
 8017638:	960b      	str	r6, [sp, #44]	; 0x2c
 801763a:	f7ff fb03 	bl	8016c44 <_GetLine>
 801763e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017640:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8017642:	694e      	ldr	r6, [r1, #20]
 8017644:	688d      	ldr	r5, [r1, #8]
 8017646:	9407      	str	r4, [sp, #28]
 8017648:	e01d      	b.n	8017686 <_DrawBitmap+0x3e2>
 801764a:	f8db 0000 	ldr.w	r0, [fp]
 801764e:	2bff      	cmp	r3, #255	; 0xff
 8017650:	9c08      	ldr	r4, [sp, #32]
 8017652:	461a      	mov	r2, r3
 8017654:	7c40      	ldrb	r0, [r0, #17]
 8017656:	4649      	mov	r1, r9
 8017658:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801765c:	6980      	ldr	r0, [r0, #24]
 801765e:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8017662:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017666:	4670      	mov	r0, lr
 8017668:	d003      	beq.n	8017672 <_DrawBitmap+0x3ce>
 801766a:	4b86      	ldr	r3, [pc, #536]	; (8017884 <_DrawBitmap+0x5e0>)
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	4798      	blx	r3
 8017670:	4686      	mov	lr, r0
 8017672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017674:	4670      	mov	r0, lr
 8017676:	4798      	blx	r3
 8017678:	9b07      	ldr	r3, [sp, #28]
 801767a:	f845 0b04 	str.w	r0, [r5], #4
 801767e:	3b01      	subs	r3, #1
 8017680:	9307      	str	r3, [sp, #28]
 8017682:	f000 8107 	beq.w	8017894 <_DrawBitmap+0x5f0>
 8017686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017688:	f837 0b02 	ldrh.w	r0, [r7], #2
 801768c:	f856 9b04 	ldr.w	r9, [r6], #4
 8017690:	4798      	blx	r3
 8017692:	f898 2000 	ldrb.w	r2, [r8]
 8017696:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 801769a:	0e03      	lsrs	r3, r0, #24
 801769c:	2a00      	cmp	r2, #0
 801769e:	d1d4      	bne.n	801764a <_DrawBitmap+0x3a6>
 80176a0:	f8db 2000 	ldr.w	r2, [fp]
 80176a4:	4649      	mov	r1, r9
 80176a6:	9c08      	ldr	r4, [sp, #32]
 80176a8:	7c52      	ldrb	r2, [r2, #17]
 80176aa:	4b76      	ldr	r3, [pc, #472]	; (8017884 <_DrawBitmap+0x5e0>)
 80176ac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	6992      	ldr	r2, [r2, #24]
 80176b4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80176b8:	4798      	blx	r3
 80176ba:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 80176be:	e7d8      	b.n	8017672 <_DrawBitmap+0x3ce>
 80176c0:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 801788c <_DrawBitmap+0x5e8>
 80176c4:	27c0      	movs	r7, #192	; 0xc0
 80176c6:	9209      	str	r2, [sp, #36]	; 0x24
 80176c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80176cc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80176d0:	4413      	add	r3, r2
 80176d2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80176d6:	911f      	str	r1, [sp, #124]	; 0x7c
 80176d8:	9308      	str	r3, [sp, #32]
 80176da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80176e2:	7c1b      	ldrb	r3, [r3, #16]
 80176e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80176e6:	eb01 0800 	add.w	r8, r1, r0
 80176ea:	f013 0303 	ands.w	r3, r3, #3
 80176ee:	7816      	ldrb	r6, [r2, #0]
 80176f0:	f000 8263 	beq.w	8017bba <_DrawBitmap+0x916>
 80176f4:	2b02      	cmp	r3, #2
 80176f6:	f000 8166 	beq.w	80179c6 <_DrawBitmap+0x722>
 80176fa:	4613      	mov	r3, r2
 80176fc:	460a      	mov	r2, r1
 80176fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017700:	3201      	adds	r2, #1
 8017702:	440b      	add	r3, r1
 8017704:	9209      	str	r2, [sp, #36]	; 0x24
 8017706:	931f      	str	r3, [sp, #124]	; 0x7c
 8017708:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801770a:	4293      	cmp	r3, r2
 801770c:	dce5      	bgt.n	80176da <_DrawBitmap+0x436>
 801770e:	e602      	b.n	8017316 <_DrawBitmap+0x72>
 8017710:	f8df b178 	ldr.w	fp, [pc, #376]	; 801788c <_DrawBitmap+0x5e8>
 8017714:	27f0      	movs	r7, #240	; 0xf0
 8017716:	9209      	str	r2, [sp, #36]	; 0x24
 8017718:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801771a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801771c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017720:	4413      	add	r3, r2
 8017722:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8017726:	911f      	str	r1, [sp, #124]	; 0x7c
 8017728:	9308      	str	r3, [sp, #32]
 801772a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801772c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017732:	7c1b      	ldrb	r3, [r3, #16]
 8017734:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017736:	eb01 0800 	add.w	r8, r1, r0
 801773a:	f013 0303 	ands.w	r3, r3, #3
 801773e:	7816      	ldrb	r6, [r2, #0]
 8017740:	f000 81f3 	beq.w	8017b2a <_DrawBitmap+0x886>
 8017744:	2b02      	cmp	r3, #2
 8017746:	f000 8197 	beq.w	8017a78 <_DrawBitmap+0x7d4>
 801774a:	4613      	mov	r3, r2
 801774c:	460a      	mov	r2, r1
 801774e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017750:	3201      	adds	r2, #1
 8017752:	440b      	add	r3, r1
 8017754:	9209      	str	r2, [sp, #36]	; 0x24
 8017756:	931f      	str	r3, [sp, #124]	; 0x7c
 8017758:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801775a:	4293      	cmp	r3, r2
 801775c:	dce5      	bgt.n	801772a <_DrawBitmap+0x486>
 801775e:	e5da      	b.n	8017316 <_DrawBitmap+0x72>
 8017760:	f8df b128 	ldr.w	fp, [pc, #296]	; 801788c <_DrawBitmap+0x5e8>
 8017764:	4692      	mov	sl, r2
 8017766:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 801776a:	f8cd b01c 	str.w	fp, [sp, #28]
 801776e:	468b      	mov	fp, r1
 8017770:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8017774:	911f      	str	r1, [sp, #124]	; 0x7c
 8017776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017778:	ebcb 0603 	rsb	r6, fp, r3
 801777c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801777e:	eb0b 0503 	add.w	r5, fp, r3
 8017782:	9b07      	ldr	r3, [sp, #28]
 8017784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	eb0a 0702 	add.w	r7, sl, r2
 801778c:	7c1b      	ldrb	r3, [r3, #16]
 801778e:	f013 0303 	ands.w	r3, r3, #3
 8017792:	f000 8104 	beq.w	801799e <_DrawBitmap+0x6fa>
 8017796:	2b02      	cmp	r3, #2
 8017798:	f000 80de 	beq.w	8017958 <_DrawBitmap+0x6b4>
 801779c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801779e:	f10a 0a01 	add.w	sl, sl, #1
 80177a2:	449b      	add	fp, r3
 80177a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80177a6:	4553      	cmp	r3, sl
 80177a8:	dce5      	bgt.n	8017776 <_DrawBitmap+0x4d2>
 80177aa:	e5b4      	b.n	8017316 <_DrawBitmap+0x72>
 80177ac:	4b33      	ldr	r3, [pc, #204]	; (801787c <_DrawBitmap+0x5d8>)
 80177ae:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8017888 <_DrawBitmap+0x5e4>
 80177b2:	930d      	str	r3, [sp, #52]	; 0x34
 80177b4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801788c <_DrawBitmap+0x5e8>
 80177b8:	46ca      	mov	sl, r9
 80177ba:	4b31      	ldr	r3, [pc, #196]	; (8017880 <_DrawBitmap+0x5dc>)
 80177bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017890 <_DrawBitmap+0x5ec>
 80177c0:	9209      	str	r2, [sp, #36]	; 0x24
 80177c2:	911f      	str	r1, [sp, #124]	; 0x7c
 80177c4:	9308      	str	r3, [sp, #32]
 80177c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80177ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177cc:	6802      	ldr	r2, [r0, #0]
 80177ce:	440b      	add	r3, r1
 80177d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80177d2:	6916      	ldr	r6, [r2, #16]
 80177d4:	461d      	mov	r5, r3
 80177d6:	694c      	ldr	r4, [r1, #20]
 80177d8:	6877      	ldr	r7, [r6, #4]
 80177da:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80177de:	462a      	mov	r2, r5
 80177e0:	688d      	ldr	r5, [r1, #8]
 80177e2:	6836      	ldr	r6, [r6, #0]
 80177e4:	9311      	str	r3, [sp, #68]	; 0x44
 80177e6:	4673      	mov	r3, lr
 80177e8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80177ea:	9702      	str	r7, [sp, #8]
 80177ec:	9401      	str	r4, [sp, #4]
 80177ee:	4674      	mov	r4, lr
 80177f0:	9500      	str	r5, [sp, #0]
 80177f2:	970a      	str	r7, [sp, #40]	; 0x28
 80177f4:	960b      	str	r6, [sp, #44]	; 0x2c
 80177f6:	f7ff fa25 	bl	8016c44 <_GetLine>
 80177fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80177fc:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80177fe:	694e      	ldr	r6, [r1, #20]
 8017800:	688d      	ldr	r5, [r1, #8]
 8017802:	9407      	str	r4, [sp, #28]
 8017804:	e01c      	b.n	8017840 <_DrawBitmap+0x59c>
 8017806:	f8db 0000 	ldr.w	r0, [fp]
 801780a:	2bff      	cmp	r3, #255	; 0xff
 801780c:	9c08      	ldr	r4, [sp, #32]
 801780e:	461a      	mov	r2, r3
 8017810:	7c40      	ldrb	r0, [r0, #17]
 8017812:	4649      	mov	r1, r9
 8017814:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017818:	6980      	ldr	r0, [r0, #24]
 801781a:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801781e:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017822:	4670      	mov	r0, lr
 8017824:	d003      	beq.n	801782e <_DrawBitmap+0x58a>
 8017826:	4b17      	ldr	r3, [pc, #92]	; (8017884 <_DrawBitmap+0x5e0>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	4798      	blx	r3
 801782c:	4686      	mov	lr, r0
 801782e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017830:	4670      	mov	r0, lr
 8017832:	4798      	blx	r3
 8017834:	9b07      	ldr	r3, [sp, #28]
 8017836:	f845 0b04 	str.w	r0, [r5], #4
 801783a:	3b01      	subs	r3, #1
 801783c:	9307      	str	r3, [sp, #28]
 801783e:	d05a      	beq.n	80178f6 <_DrawBitmap+0x652>
 8017840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017842:	f857 0b04 	ldr.w	r0, [r7], #4
 8017846:	f856 9b04 	ldr.w	r9, [r6], #4
 801784a:	4798      	blx	r3
 801784c:	f898 2000 	ldrb.w	r2, [r8]
 8017850:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017854:	0e03      	lsrs	r3, r0, #24
 8017856:	2a00      	cmp	r2, #0
 8017858:	d1d5      	bne.n	8017806 <_DrawBitmap+0x562>
 801785a:	f8db 2000 	ldr.w	r2, [fp]
 801785e:	4649      	mov	r1, r9
 8017860:	9c08      	ldr	r4, [sp, #32]
 8017862:	7c52      	ldrb	r2, [r2, #17]
 8017864:	4b07      	ldr	r3, [pc, #28]	; (8017884 <_DrawBitmap+0x5e0>)
 8017866:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	6992      	ldr	r2, [r2, #24]
 801786e:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8017872:	4798      	blx	r3
 8017874:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8017878:	e7d9      	b.n	801782e <_DrawBitmap+0x58a>
 801787a:	bf00      	nop
 801787c:	2000035c 	.word	0x2000035c
 8017880:	200467d0 	.word	0x200467d0
 8017884:	20000044 	.word	0x20000044
 8017888:	20000034 	.word	0x20000034
 801788c:	20000018 	.word	0x20000018
 8017890:	200467b8 	.word	0x200467b8
 8017894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017896:	2601      	movs	r6, #1
 8017898:	991e      	ldr	r1, [sp, #120]	; 0x78
 801789a:	3201      	adds	r2, #1
 801789c:	f8db 3000 	ldr.w	r3, [fp]
 80178a0:	4617      	mov	r7, r2
 80178a2:	9209      	str	r2, [sp, #36]	; 0x24
 80178a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80178a6:	7c58      	ldrb	r0, [r3, #17]
 80178a8:	440a      	add	r2, r1
 80178aa:	921f      	str	r2, [sp, #124]	; 0x7c
 80178ac:	f002 fe12 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 80178b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80178b2:	2818      	cmp	r0, #24
 80178b4:	bf14      	ite	ne
 80178b6:	4604      	movne	r4, r0
 80178b8:	2420      	moveq	r4, #32
 80178ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80178be:	4622      	mov	r2, r4
 80178c0:	68a8      	ldr	r0, [r5, #8]
 80178c2:	4649      	mov	r1, r9
 80178c4:	f001 f900 	bl	8018ac8 <GUI__CompactPixelIndices>
 80178c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178ca:	68a9      	ldr	r1, [r5, #8]
 80178cc:	464b      	mov	r3, r9
 80178ce:	6810      	ldr	r0, [r2, #0]
 80178d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80178d2:	68c5      	ldr	r5, [r0, #12]
 80178d4:	9401      	str	r4, [sp, #4]
 80178d6:	2400      	movs	r4, #0
 80178d8:	9103      	str	r1, [sp, #12]
 80178da:	9405      	str	r4, [sp, #20]
 80178dc:	9404      	str	r4, [sp, #16]
 80178de:	9402      	str	r4, [sp, #8]
 80178e0:	9600      	str	r6, [sp, #0]
 80178e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80178e4:	686c      	ldr	r4, [r5, #4]
 80178e6:	47a0      	blx	r4
 80178e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80178ea:	42bb      	cmp	r3, r7
 80178ec:	f73f ae8d 	bgt.w	801760a <_DrawBitmap+0x366>
 80178f0:	b013      	add	sp, #76	; 0x4c
 80178f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178f8:	2601      	movs	r6, #1
 80178fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80178fc:	3201      	adds	r2, #1
 80178fe:	f8db 3000 	ldr.w	r3, [fp]
 8017902:	4617      	mov	r7, r2
 8017904:	9209      	str	r2, [sp, #36]	; 0x24
 8017906:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017908:	7c58      	ldrb	r0, [r3, #17]
 801790a:	440a      	add	r2, r1
 801790c:	921f      	str	r2, [sp, #124]	; 0x7c
 801790e:	f002 fde1 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 8017912:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017914:	2818      	cmp	r0, #24
 8017916:	bf14      	ite	ne
 8017918:	4604      	movne	r4, r0
 801791a:	2420      	moveq	r4, #32
 801791c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017920:	4622      	mov	r2, r4
 8017922:	68a8      	ldr	r0, [r5, #8]
 8017924:	4649      	mov	r1, r9
 8017926:	f001 f8cf 	bl	8018ac8 <GUI__CompactPixelIndices>
 801792a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801792c:	68a9      	ldr	r1, [r5, #8]
 801792e:	464b      	mov	r3, r9
 8017930:	6810      	ldr	r0, [r2, #0]
 8017932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017934:	68c5      	ldr	r5, [r0, #12]
 8017936:	9401      	str	r4, [sp, #4]
 8017938:	2400      	movs	r4, #0
 801793a:	9103      	str	r1, [sp, #12]
 801793c:	9405      	str	r4, [sp, #20]
 801793e:	9404      	str	r4, [sp, #16]
 8017940:	9402      	str	r4, [sp, #8]
 8017942:	9600      	str	r6, [sp, #0]
 8017944:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017946:	686c      	ldr	r4, [r5, #4]
 8017948:	47a0      	blx	r4
 801794a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801794c:	42bb      	cmp	r3, r7
 801794e:	f73f af3a 	bgt.w	80177c6 <_DrawBitmap+0x522>
 8017952:	b013      	add	sp, #76	; 0x4c
 8017954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801795a:	f1b8 0f00 	cmp.w	r8, #0
 801795e:	f000 8184 	beq.w	8017c6a <_DrawBitmap+0x9c6>
 8017962:	2b00      	cmp	r3, #0
 8017964:	dd10      	ble.n	8017988 <_DrawBitmap+0x6e4>
 8017966:	465c      	mov	r4, fp
 8017968:	e001      	b.n	801796e <_DrawBitmap+0x6ca>
 801796a:	42ac      	cmp	r4, r5
 801796c:	d00c      	beq.n	8017988 <_DrawBitmap+0x6e4>
 801796e:	1931      	adds	r1, r6, r4
 8017970:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017974:	2b00      	cmp	r3, #0
 8017976:	d0f8      	beq.n	801796a <_DrawBitmap+0x6c6>
 8017978:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801797c:	463a      	mov	r2, r7
 801797e:	4648      	mov	r0, r9
 8017980:	f7ff fa6e 	bl	8016e60 <_SetPixelIndex>
 8017984:	42ac      	cmp	r4, r5
 8017986:	d1f2      	bne.n	801796e <_DrawBitmap+0x6ca>
 8017988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801798a:	f10a 0a01 	add.w	sl, sl, #1
 801798e:	449b      	add	fp, r3
 8017990:	1af6      	subs	r6, r6, r3
 8017992:	441d      	add	r5, r3
 8017994:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017996:	4553      	cmp	r3, sl
 8017998:	f73f aef3 	bgt.w	8017782 <_DrawBitmap+0x4de>
 801799c:	e4bb      	b.n	8017316 <_DrawBitmap+0x72>
 801799e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179a0:	f1b8 0f00 	cmp.w	r8, #0
 80179a4:	f000 8153 	beq.w	8017c4e <_DrawBitmap+0x9aa>
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	dded      	ble.n	8017988 <_DrawBitmap+0x6e4>
 80179ac:	465c      	mov	r4, fp
 80179ae:	7823      	ldrb	r3, [r4, #0]
 80179b0:	19a1      	adds	r1, r4, r6
 80179b2:	3401      	adds	r4, #1
 80179b4:	463a      	mov	r2, r7
 80179b6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80179ba:	4648      	mov	r0, r9
 80179bc:	f7ff fa50 	bl	8016e60 <_SetPixelIndex>
 80179c0:	42ac      	cmp	r4, r5
 80179c2:	d1f4      	bne.n	80179ae <_DrawBitmap+0x70a>
 80179c4:	e7e0      	b.n	8017988 <_DrawBitmap+0x6e4>
 80179c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179c8:	4692      	mov	sl, r2
 80179ca:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80179cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80179ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80179d2:	b933      	cbnz	r3, 80179e2 <_DrawBitmap+0x73e>
 80179d4:	e03b      	b.n	8017a4e <_DrawBitmap+0x7aa>
 80179d6:	2c04      	cmp	r4, #4
 80179d8:	f109 0901 	add.w	r9, r9, #1
 80179dc:	d018      	beq.n	8017a10 <_DrawBitmap+0x76c>
 80179de:	3d01      	subs	r5, #1
 80179e0:	d01e      	beq.n	8017a20 <_DrawBitmap+0x77c>
 80179e2:	f1c4 0303 	rsb	r3, r4, #3
 80179e6:	3401      	adds	r4, #1
 80179e8:	005a      	lsls	r2, r3, #1
 80179ea:	f1c2 0306 	rsb	r3, r2, #6
 80179ee:	fa47 f303 	asr.w	r3, r7, r3
 80179f2:	4033      	ands	r3, r6
 80179f4:	40d3      	lsrs	r3, r2
 80179f6:	d0ee      	beq.n	80179d6 <_DrawBitmap+0x732>
 80179f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179fa:	4649      	mov	r1, r9
 80179fc:	4658      	mov	r0, fp
 80179fe:	f109 0901 	add.w	r9, r9, #1
 8017a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a06:	4642      	mov	r2, r8
 8017a08:	f7ff fa2a 	bl	8016e60 <_SetPixelIndex>
 8017a0c:	2c04      	cmp	r4, #4
 8017a0e:	d1e6      	bne.n	80179de <_DrawBitmap+0x73a>
 8017a10:	3d01      	subs	r5, #1
 8017a12:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017a16:	f04f 0400 	mov.w	r4, #0
 8017a1a:	f10a 0a01 	add.w	sl, sl, #1
 8017a1e:	d1e0      	bne.n	80179e2 <_DrawBitmap+0x73e>
 8017a20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017a22:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a26:	440a      	add	r2, r1
 8017a28:	3301      	adds	r3, #1
 8017a2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8017a2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8017a30:	429a      	cmp	r2, r3
 8017a32:	f73f ae52 	bgt.w	80176da <_DrawBitmap+0x436>
 8017a36:	e46e      	b.n	8017316 <_DrawBitmap+0x72>
 8017a38:	4649      	mov	r1, r9
 8017a3a:	4642      	mov	r2, r8
 8017a3c:	4658      	mov	r0, fp
 8017a3e:	f109 0901 	add.w	r9, r9, #1
 8017a42:	f7ff fa0d 	bl	8016e60 <_SetPixelIndex>
 8017a46:	2c04      	cmp	r4, #4
 8017a48:	d010      	beq.n	8017a6c <_DrawBitmap+0x7c8>
 8017a4a:	3d01      	subs	r5, #1
 8017a4c:	d0e8      	beq.n	8017a20 <_DrawBitmap+0x77c>
 8017a4e:	f1c4 0303 	rsb	r3, r4, #3
 8017a52:	3401      	adds	r4, #1
 8017a54:	005a      	lsls	r2, r3, #1
 8017a56:	f1c2 0306 	rsb	r3, r2, #6
 8017a5a:	fa47 f303 	asr.w	r3, r7, r3
 8017a5e:	4033      	ands	r3, r6
 8017a60:	40d3      	lsrs	r3, r2
 8017a62:	d1e9      	bne.n	8017a38 <_DrawBitmap+0x794>
 8017a64:	2c04      	cmp	r4, #4
 8017a66:	f109 0901 	add.w	r9, r9, #1
 8017a6a:	d1ee      	bne.n	8017a4a <_DrawBitmap+0x7a6>
 8017a6c:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017a70:	2400      	movs	r4, #0
 8017a72:	f10a 0a01 	add.w	sl, sl, #1
 8017a76:	e7e8      	b.n	8017a4a <_DrawBitmap+0x7a6>
 8017a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a7a:	4692      	mov	sl, r2
 8017a7c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017a7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a84:	b933      	cbnz	r3, 8017a94 <_DrawBitmap+0x7f0>
 8017a86:	e03b      	b.n	8017b00 <_DrawBitmap+0x85c>
 8017a88:	2c02      	cmp	r4, #2
 8017a8a:	f109 0901 	add.w	r9, r9, #1
 8017a8e:	d018      	beq.n	8017ac2 <_DrawBitmap+0x81e>
 8017a90:	3d01      	subs	r5, #1
 8017a92:	d01e      	beq.n	8017ad2 <_DrawBitmap+0x82e>
 8017a94:	f1c4 0301 	rsb	r3, r4, #1
 8017a98:	3401      	adds	r4, #1
 8017a9a:	009a      	lsls	r2, r3, #2
 8017a9c:	f1c2 0304 	rsb	r3, r2, #4
 8017aa0:	fa47 f303 	asr.w	r3, r7, r3
 8017aa4:	4033      	ands	r3, r6
 8017aa6:	40d3      	lsrs	r3, r2
 8017aa8:	d0ee      	beq.n	8017a88 <_DrawBitmap+0x7e4>
 8017aaa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017aac:	4649      	mov	r1, r9
 8017aae:	4658      	mov	r0, fp
 8017ab0:	f109 0901 	add.w	r9, r9, #1
 8017ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ab8:	4642      	mov	r2, r8
 8017aba:	f7ff f9d1 	bl	8016e60 <_SetPixelIndex>
 8017abe:	2c02      	cmp	r4, #2
 8017ac0:	d1e6      	bne.n	8017a90 <_DrawBitmap+0x7ec>
 8017ac2:	3d01      	subs	r5, #1
 8017ac4:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017ac8:	f04f 0400 	mov.w	r4, #0
 8017acc:	f10a 0a01 	add.w	sl, sl, #1
 8017ad0:	d1e0      	bne.n	8017a94 <_DrawBitmap+0x7f0>
 8017ad2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017ad4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad8:	440a      	add	r2, r1
 8017ada:	3301      	adds	r3, #1
 8017adc:	921f      	str	r2, [sp, #124]	; 0x7c
 8017ade:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	f73f ae21 	bgt.w	801772a <_DrawBitmap+0x486>
 8017ae8:	e415      	b.n	8017316 <_DrawBitmap+0x72>
 8017aea:	4649      	mov	r1, r9
 8017aec:	4642      	mov	r2, r8
 8017aee:	4658      	mov	r0, fp
 8017af0:	f109 0901 	add.w	r9, r9, #1
 8017af4:	f7ff f9b4 	bl	8016e60 <_SetPixelIndex>
 8017af8:	2c02      	cmp	r4, #2
 8017afa:	d010      	beq.n	8017b1e <_DrawBitmap+0x87a>
 8017afc:	3d01      	subs	r5, #1
 8017afe:	d0e8      	beq.n	8017ad2 <_DrawBitmap+0x82e>
 8017b00:	f1c4 0301 	rsb	r3, r4, #1
 8017b04:	3401      	adds	r4, #1
 8017b06:	009a      	lsls	r2, r3, #2
 8017b08:	f1c2 0304 	rsb	r3, r2, #4
 8017b0c:	fa47 f303 	asr.w	r3, r7, r3
 8017b10:	4033      	ands	r3, r6
 8017b12:	40d3      	lsrs	r3, r2
 8017b14:	d1e9      	bne.n	8017aea <_DrawBitmap+0x846>
 8017b16:	2c02      	cmp	r4, #2
 8017b18:	f109 0901 	add.w	r9, r9, #1
 8017b1c:	d1ee      	bne.n	8017afc <_DrawBitmap+0x858>
 8017b1e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017b22:	2400      	movs	r4, #0
 8017b24:	f10a 0a01 	add.w	sl, sl, #1
 8017b28:	e7e8      	b.n	8017afc <_DrawBitmap+0x858>
 8017b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b2c:	4692      	mov	sl, r2
 8017b2e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8017b30:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017b34:	9c08      	ldr	r4, [sp, #32]
 8017b36:	b35b      	cbz	r3, 8017b90 <_DrawBitmap+0x8ec>
 8017b38:	9607      	str	r6, [sp, #28]
 8017b3a:	e002      	b.n	8017b42 <_DrawBitmap+0x89e>
 8017b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8017b40:	d0c7      	beq.n	8017ad2 <_DrawBitmap+0x82e>
 8017b42:	f1c5 0301 	rsb	r3, r5, #1
 8017b46:	9e07      	ldr	r6, [sp, #28]
 8017b48:	3501      	adds	r5, #1
 8017b4a:	4621      	mov	r1, r4
 8017b4c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8017b50:	4642      	mov	r2, r8
 8017b52:	4658      	mov	r0, fp
 8017b54:	3401      	adds	r4, #1
 8017b56:	f1ce 0304 	rsb	r3, lr, #4
 8017b5a:	fa47 f303 	asr.w	r3, r7, r3
 8017b5e:	4033      	ands	r3, r6
 8017b60:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8017b62:	fa23 f30e 	lsr.w	r3, r3, lr
 8017b66:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017b6a:	f7ff f979 	bl	8016e60 <_SetPixelIndex>
 8017b6e:	2d02      	cmp	r5, #2
 8017b70:	d1e4      	bne.n	8017b3c <_DrawBitmap+0x898>
 8017b72:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017b76:	2500      	movs	r5, #0
 8017b78:	f10a 0a01 	add.w	sl, sl, #1
 8017b7c:	9307      	str	r3, [sp, #28]
 8017b7e:	e7dd      	b.n	8017b3c <_DrawBitmap+0x898>
 8017b80:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017b84:	2500      	movs	r5, #0
 8017b86:	f10a 0a01 	add.w	sl, sl, #1
 8017b8a:	f1b9 0901 	subs.w	r9, r9, #1
 8017b8e:	d0a0      	beq.n	8017ad2 <_DrawBitmap+0x82e>
 8017b90:	f1c5 0e01 	rsb	lr, r5, #1
 8017b94:	3501      	adds	r5, #1
 8017b96:	4621      	mov	r1, r4
 8017b98:	4642      	mov	r2, r8
 8017b9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8017b9e:	4658      	mov	r0, fp
 8017ba0:	3401      	adds	r4, #1
 8017ba2:	f1ce 0304 	rsb	r3, lr, #4
 8017ba6:	fa47 f303 	asr.w	r3, r7, r3
 8017baa:	4033      	ands	r3, r6
 8017bac:	fa23 f30e 	lsr.w	r3, r3, lr
 8017bb0:	f7ff f956 	bl	8016e60 <_SetPixelIndex>
 8017bb4:	2d02      	cmp	r5, #2
 8017bb6:	d1e8      	bne.n	8017b8a <_DrawBitmap+0x8e6>
 8017bb8:	e7e2      	b.n	8017b80 <_DrawBitmap+0x8dc>
 8017bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bbc:	4692      	mov	sl, r2
 8017bbe:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8017bc0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8017bc4:	9c08      	ldr	r4, [sp, #32]
 8017bc6:	b36b      	cbz	r3, 8017c24 <_DrawBitmap+0x980>
 8017bc8:	9607      	str	r6, [sp, #28]
 8017bca:	e003      	b.n	8017bd4 <_DrawBitmap+0x930>
 8017bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8017bd0:	f43f af26 	beq.w	8017a20 <_DrawBitmap+0x77c>
 8017bd4:	f1c5 0303 	rsb	r3, r5, #3
 8017bd8:	9e07      	ldr	r6, [sp, #28]
 8017bda:	3501      	adds	r5, #1
 8017bdc:	4621      	mov	r1, r4
 8017bde:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8017be2:	4642      	mov	r2, r8
 8017be4:	4658      	mov	r0, fp
 8017be6:	3401      	adds	r4, #1
 8017be8:	f1ce 0306 	rsb	r3, lr, #6
 8017bec:	fa47 f303 	asr.w	r3, r7, r3
 8017bf0:	4033      	ands	r3, r6
 8017bf2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8017bf4:	fa23 f30e 	lsr.w	r3, r3, lr
 8017bf8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017bfc:	f7ff f930 	bl	8016e60 <_SetPixelIndex>
 8017c00:	2d04      	cmp	r5, #4
 8017c02:	d1e3      	bne.n	8017bcc <_DrawBitmap+0x928>
 8017c04:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017c08:	2500      	movs	r5, #0
 8017c0a:	f10a 0a01 	add.w	sl, sl, #1
 8017c0e:	9307      	str	r3, [sp, #28]
 8017c10:	e7dc      	b.n	8017bcc <_DrawBitmap+0x928>
 8017c12:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8017c16:	2500      	movs	r5, #0
 8017c18:	f10a 0a01 	add.w	sl, sl, #1
 8017c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8017c20:	f43f aefe 	beq.w	8017a20 <_DrawBitmap+0x77c>
 8017c24:	f1c5 0e03 	rsb	lr, r5, #3
 8017c28:	3501      	adds	r5, #1
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4642      	mov	r2, r8
 8017c2e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8017c32:	4658      	mov	r0, fp
 8017c34:	3401      	adds	r4, #1
 8017c36:	f1ce 0306 	rsb	r3, lr, #6
 8017c3a:	fa47 f303 	asr.w	r3, r7, r3
 8017c3e:	4033      	ands	r3, r6
 8017c40:	fa23 f30e 	lsr.w	r3, r3, lr
 8017c44:	f7ff f90c 	bl	8016e60 <_SetPixelIndex>
 8017c48:	2d04      	cmp	r5, #4
 8017c4a:	d1e7      	bne.n	8017c1c <_DrawBitmap+0x978>
 8017c4c:	e7e1      	b.n	8017c12 <_DrawBitmap+0x96e>
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	f77f ae9a 	ble.w	8017988 <_DrawBitmap+0x6e4>
 8017c54:	465c      	mov	r4, fp
 8017c56:	7823      	ldrb	r3, [r4, #0]
 8017c58:	19a1      	adds	r1, r4, r6
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	463a      	mov	r2, r7
 8017c5e:	4648      	mov	r0, r9
 8017c60:	f7ff f8fe 	bl	8016e60 <_SetPixelIndex>
 8017c64:	42ac      	cmp	r4, r5
 8017c66:	d1f6      	bne.n	8017c56 <_DrawBitmap+0x9b2>
 8017c68:	e68e      	b.n	8017988 <_DrawBitmap+0x6e4>
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f77f ae8c 	ble.w	8017988 <_DrawBitmap+0x6e4>
 8017c70:	465c      	mov	r4, fp
 8017c72:	e002      	b.n	8017c7a <_DrawBitmap+0x9d6>
 8017c74:	42ac      	cmp	r4, r5
 8017c76:	f43f ae87 	beq.w	8017988 <_DrawBitmap+0x6e4>
 8017c7a:	1931      	adds	r1, r6, r4
 8017c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d0f7      	beq.n	8017c74 <_DrawBitmap+0x9d0>
 8017c84:	463a      	mov	r2, r7
 8017c86:	4648      	mov	r0, r9
 8017c88:	f7ff f8ea 	bl	8016e60 <_SetPixelIndex>
 8017c8c:	e7f2      	b.n	8017c74 <_DrawBitmap+0x9d0>
 8017c8e:	bf00      	nop

08017c90 <GUI__AlphaPreserveTrans>:
 8017c90:	4b09      	ldr	r3, [pc, #36]	; (8017cb8 <GUI__AlphaPreserveTrans+0x28>)
 8017c92:	b510      	push	{r4, lr}
 8017c94:	781c      	ldrb	r4, [r3, #0]
 8017c96:	b938      	cbnz	r0, 8017ca8 <GUI__AlphaPreserveTrans+0x18>
 8017c98:	4602      	mov	r2, r0
 8017c9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8017c9e:	701a      	strb	r2, [r3, #0]
 8017ca0:	f002 faf2 	bl	801a288 <LCD_AA_SetOrMask>
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	bd10      	pop	{r4, pc}
 8017ca8:	2201      	movs	r2, #1
 8017caa:	2000      	movs	r0, #0
 8017cac:	701a      	strb	r2, [r3, #0]
 8017cae:	f002 faeb 	bl	801a288 <LCD_AA_SetOrMask>
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	bd10      	pop	{r4, pc}
 8017cb6:	bf00      	nop
 8017cb8:	200467b8 	.word	0x200467b8

08017cbc <GUI_TOUCH_StoreStateEx>:
 8017cbc:	b570      	push	{r4, r5, r6, lr}
 8017cbe:	4c13      	ldr	r4, [pc, #76]	; (8017d0c <GUI_TOUCH_StoreStateEx+0x50>)
 8017cc0:	b084      	sub	sp, #16
 8017cc2:	220c      	movs	r2, #12
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	4621      	mov	r1, r4
 8017cc8:	f00c ff24 	bl	8024b14 <memcmp>
 8017ccc:	b178      	cbz	r0, 8017cee <GUI_TOUCH_StoreStateEx+0x32>
 8017cce:	68e3      	ldr	r3, [r4, #12]
 8017cd0:	b1a3      	cbz	r3, 8017cfc <GUI_TOUCH_StoreStateEx+0x40>
 8017cd2:	ad01      	add	r5, sp, #4
 8017cd4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017cd8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017cdc:	a902      	add	r1, sp, #8
 8017cde:	4628      	mov	r0, r5
 8017ce0:	4798      	blx	r3
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017cec:	b10b      	cbz	r3, 8017cf2 <GUI_TOUCH_StoreStateEx+0x36>
 8017cee:	b004      	add	sp, #16
 8017cf0:	bd70      	pop	{r4, r5, r6, pc}
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f00a fd82 	bl	80227fc <GUI_PID_StoreState>
 8017cf8:	b004      	add	sp, #16
 8017cfa:	bd70      	pop	{r4, r5, r6, pc}
 8017cfc:	4630      	mov	r0, r6
 8017cfe:	f00a fd7d 	bl	80227fc <GUI_PID_StoreState>
 8017d02:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017d0a:	e7f0      	b.n	8017cee <GUI_TOUCH_StoreStateEx+0x32>
 8017d0c:	20000374 	.word	0x20000374

08017d10 <_OnExit>:
 8017d10:	b510      	push	{r4, lr}
 8017d12:	4c03      	ldr	r4, [pc, #12]	; (8017d20 <_OnExit+0x10>)
 8017d14:	6820      	ldr	r0, [r4, #0]
 8017d16:	f7fa fca7 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	6023      	str	r3, [r4, #0]
 8017d1e:	bd10      	pop	{r4, pc}
 8017d20:	20000384 	.word	0x20000384

08017d24 <GUI_Unlock>:
 8017d24:	4a03      	ldr	r2, [pc, #12]	; (8017d34 <GUI_Unlock+0x10>)
 8017d26:	6853      	ldr	r3, [r2, #4]
 8017d28:	3b01      	subs	r3, #1
 8017d2a:	6053      	str	r3, [r2, #4]
 8017d2c:	b103      	cbz	r3, 8017d30 <GUI_Unlock+0xc>
 8017d2e:	4770      	bx	lr
 8017d30:	f7f7 baca 	b.w	800f2c8 <GUI_X_Unlock>
 8017d34:	20000384 	.word	0x20000384

08017d38 <GUI_Lock>:
 8017d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3c:	4d22      	ldr	r5, [pc, #136]	; (8017dc8 <GUI_Lock+0x90>)
 8017d3e:	686b      	ldr	r3, [r5, #4]
 8017d40:	b123      	cbz	r3, 8017d4c <GUI_Lock+0x14>
 8017d42:	f7f7 facf 	bl	800f2e4 <GUI_X_GetTaskId>
 8017d46:	68ab      	ldr	r3, [r5, #8]
 8017d48:	4298      	cmp	r0, r3
 8017d4a:	d004      	beq.n	8017d56 <GUI_Lock+0x1e>
 8017d4c:	f7f7 fac2 	bl	800f2d4 <GUI_X_Lock>
 8017d50:	f7f7 fac8 	bl	800f2e4 <GUI_X_GetTaskId>
 8017d54:	60a8      	str	r0, [r5, #8]
 8017d56:	686b      	ldr	r3, [r5, #4]
 8017d58:	3301      	adds	r3, #1
 8017d5a:	2b01      	cmp	r3, #1
 8017d5c:	606b      	str	r3, [r5, #4]
 8017d5e:	d001      	beq.n	8017d64 <GUI_Lock+0x2c>
 8017d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d64:	4f19      	ldr	r7, [pc, #100]	; (8017dcc <GUI_Lock+0x94>)
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	dd28      	ble.n	8017dbe <GUI_Lock+0x86>
 8017d6c:	2400      	movs	r4, #0
 8017d6e:	4626      	mov	r6, r4
 8017d70:	e005      	b.n	8017d7e <GUI_Lock+0x46>
 8017d72:	b33a      	cbz	r2, 8017dc4 <GUI_Lock+0x8c>
 8017d74:	3601      	adds	r6, #1
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	347c      	adds	r4, #124	; 0x7c
 8017d7a:	429e      	cmp	r6, r3
 8017d7c:	da1f      	bge.n	8017dbe <GUI_Lock+0x86>
 8017d7e:	f7f7 fab1 	bl	800f2e4 <GUI_X_GetTaskId>
 8017d82:	682b      	ldr	r3, [r5, #0]
 8017d84:	591a      	ldr	r2, [r3, r4]
 8017d86:	4423      	add	r3, r4
 8017d88:	4290      	cmp	r0, r2
 8017d8a:	d1f2      	bne.n	8017d72 <GUI_Lock+0x3a>
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	42b3      	cmp	r3, r6
 8017d90:	d0e6      	beq.n	8017d60 <GUI_Lock+0x28>
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	db10      	blt.n	8017db8 <GUI_Lock+0x80>
 8017d96:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8017d9a:	682a      	ldr	r2, [r5, #0]
 8017d9c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8017da0:	f7fc f94e 	bl	8014040 <GUI_DEVICE_UnlinkTaskDevices>
 8017da4:	682a      	ldr	r2, [r5, #0]
 8017da6:	4b0a      	ldr	r3, [pc, #40]	; (8017dd0 <GUI_Lock+0x98>)
 8017da8:	4414      	add	r4, r2
 8017daa:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 8017dae:	1d22      	adds	r2, r4, #4
 8017db0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8017db2:	601a      	str	r2, [r3, #0]
 8017db4:	f7fc f946 	bl	8014044 <GUI_DEVICE_LinkDevices>
 8017db8:	607e      	str	r6, [r7, #4]
 8017dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dbe:	2400      	movs	r4, #0
 8017dc0:	4626      	mov	r6, r4
 8017dc2:	e7e3      	b.n	8017d8c <GUI_Lock+0x54>
 8017dc4:	6018      	str	r0, [r3, #0]
 8017dc6:	e7e1      	b.n	8017d8c <GUI_Lock+0x54>
 8017dc8:	20000384 	.word	0x20000384
 8017dcc:	20000038 	.word	0x20000038
 8017dd0:	20000018 	.word	0x20000018

08017dd4 <GUITASK_Init>:
 8017dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dd6:	4f18      	ldr	r7, [pc, #96]	; (8017e38 <GUITASK_Init+0x64>)
 8017dd8:	4b18      	ldr	r3, [pc, #96]	; (8017e3c <GUITASK_Init+0x68>)
 8017dda:	4638      	mov	r0, r7
 8017ddc:	4e18      	ldr	r6, [pc, #96]	; (8017e40 <GUITASK_Init+0x6c>)
 8017dde:	f840 3f0c 	str.w	r3, [r0, #12]!
 8017de2:	f7fb ffa1 	bl	8013d28 <GUI__RegisterExit>
 8017de6:	6834      	ldr	r4, [r6, #0]
 8017de8:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8017dec:	00a4      	lsls	r4, r4, #2
 8017dee:	4620      	mov	r0, r4
 8017df0:	f7fa fc44 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8017df4:	4b13      	ldr	r3, [pc, #76]	; (8017e44 <GUITASK_Init+0x70>)
 8017df6:	4622      	mov	r2, r4
 8017df8:	2100      	movs	r1, #0
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	6038      	str	r0, [r7, #0]
 8017dfe:	4798      	blx	r3
 8017e00:	f04f 33ff 	mov.w	r3, #4294967295
 8017e04:	6073      	str	r3, [r6, #4]
 8017e06:	f7f7 fa47 	bl	800f298 <GUI_X_InitOS>
 8017e0a:	6833      	ldr	r3, [r6, #0]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	dd0f      	ble.n	8017e30 <GUITASK_Init+0x5c>
 8017e10:	2400      	movs	r4, #0
 8017e12:	4625      	mov	r5, r4
 8017e14:	e003      	b.n	8017e1e <GUITASK_Init+0x4a>
 8017e16:	b162      	cbz	r2, 8017e32 <GUITASK_Init+0x5e>
 8017e18:	6833      	ldr	r3, [r6, #0]
 8017e1a:	429d      	cmp	r5, r3
 8017e1c:	da08      	bge.n	8017e30 <GUITASK_Init+0x5c>
 8017e1e:	f7f7 fa61 	bl	800f2e4 <GUI_X_GetTaskId>
 8017e22:	683b      	ldr	r3, [r7, #0]
 8017e24:	3501      	adds	r5, #1
 8017e26:	591a      	ldr	r2, [r3, r4]
 8017e28:	4423      	add	r3, r4
 8017e2a:	347c      	adds	r4, #124	; 0x7c
 8017e2c:	4290      	cmp	r0, r2
 8017e2e:	d1f2      	bne.n	8017e16 <GUITASK_Init+0x42>
 8017e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e32:	6018      	str	r0, [r3, #0]
 8017e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e36:	bf00      	nop
 8017e38:	20000384 	.word	0x20000384
 8017e3c:	08017d11 	.word	0x08017d11
 8017e40:	20000038 	.word	0x20000038
 8017e44:	20000050 	.word	0x20000050

08017e48 <GUITASK_CopyContext>:
 8017e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e4c:	4f24      	ldr	r7, [pc, #144]	; (8017ee0 <GUITASK_CopyContext+0x98>)
 8017e4e:	683d      	ldr	r5, [r7, #0]
 8017e50:	2d00      	cmp	r5, #0
 8017e52:	dd3f      	ble.n	8017ed4 <GUITASK_CopyContext+0x8c>
 8017e54:	4e23      	ldr	r6, [pc, #140]	; (8017ee4 <GUITASK_CopyContext+0x9c>)
 8017e56:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8017e5a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8017ee8 <GUITASK_CopyContext+0xa0>
 8017e5e:	f04f 0a00 	mov.w	sl, #0
 8017e62:	6834      	ldr	r4, [r6, #0]
 8017e64:	f8d8 9000 	ldr.w	r9, [r8]
 8017e68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8017e6c:	340c      	adds	r4, #12
 8017e6e:	350c      	adds	r5, #12
 8017e70:	f1a4 0308 	sub.w	r3, r4, #8
 8017e74:	2274      	movs	r2, #116	; 0x74
 8017e76:	4649      	mov	r1, r9
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f00c fe5a 	bl	8024b32 <memcpy>
 8017e7e:	1f22      	subs	r2, r4, #4
 8017e80:	6320      	str	r0, [r4, #48]	; 0x30
 8017e82:	63a0      	str	r0, [r4, #56]	; 0x38
 8017e84:	f844 ac0c 	str.w	sl, [r4, #-12]
 8017e88:	6362      	str	r2, [r4, #52]	; 0x34
 8017e8a:	60e4      	str	r4, [r4, #12]
 8017e8c:	347c      	adds	r4, #124	; 0x7c
 8017e8e:	42a5      	cmp	r5, r4
 8017e90:	d1ee      	bne.n	8017e70 <GUITASK_CopyContext+0x28>
 8017e92:	2400      	movs	r4, #0
 8017e94:	4625      	mov	r5, r4
 8017e96:	e003      	b.n	8017ea0 <GUITASK_CopyContext+0x58>
 8017e98:	b182      	cbz	r2, 8017ebc <GUITASK_CopyContext+0x74>
 8017e9a:	683a      	ldr	r2, [r7, #0]
 8017e9c:	4295      	cmp	r5, r2
 8017e9e:	da13      	bge.n	8017ec8 <GUITASK_CopyContext+0x80>
 8017ea0:	f7f7 fa20 	bl	800f2e4 <GUI_X_GetTaskId>
 8017ea4:	6833      	ldr	r3, [r6, #0]
 8017ea6:	3501      	adds	r5, #1
 8017ea8:	591a      	ldr	r2, [r3, r4]
 8017eaa:	1919      	adds	r1, r3, r4
 8017eac:	347c      	adds	r4, #124	; 0x7c
 8017eae:	4290      	cmp	r0, r2
 8017eb0:	d1f2      	bne.n	8017e98 <GUITASK_CopyContext+0x50>
 8017eb2:	3104      	adds	r1, #4
 8017eb4:	f8c8 1000 	str.w	r1, [r8]
 8017eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ebc:	6008      	str	r0, [r1, #0]
 8017ebe:	3104      	adds	r1, #4
 8017ec0:	f8c8 1000 	str.w	r1, [r8]
 8017ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ec8:	4619      	mov	r1, r3
 8017eca:	3104      	adds	r1, #4
 8017ecc:	f8c8 1000 	str.w	r1, [r8]
 8017ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ed4:	4b03      	ldr	r3, [pc, #12]	; (8017ee4 <GUITASK_CopyContext+0x9c>)
 8017ed6:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8017ee8 <GUITASK_CopyContext+0xa0>
 8017eda:	6819      	ldr	r1, [r3, #0]
 8017edc:	e7e9      	b.n	8017eb2 <GUITASK_CopyContext+0x6a>
 8017ede:	bf00      	nop
 8017ee0:	20000038 	.word	0x20000038
 8017ee4:	20000384 	.word	0x20000384
 8017ee8:	20000018 	.word	0x20000018

08017eec <GUI_Delay>:
 8017eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ef0:	4607      	mov	r7, r0
 8017ef2:	f7f7 f9cb 	bl	800f28c <GUI_X_GetTime>
 8017ef6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8017f64 <GUI_Delay+0x78>
 8017efa:	4407      	add	r7, r0
 8017efc:	f7f7 f9c6 	bl	800f28c <GUI_X_GetTime>
 8017f00:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8017f68 <GUI_Delay+0x7c>
 8017f04:	1a3e      	subs	r6, r7, r0
 8017f06:	2e00      	cmp	r6, #0
 8017f08:	dd22      	ble.n	8017f50 <GUI_Delay+0x64>
 8017f0a:	f7fb fb81 	bl	8013610 <GUI_Exec>
 8017f0e:	f8d9 3000 	ldr.w	r3, [r9]
 8017f12:	429e      	cmp	r6, r3
 8017f14:	bfa8      	it	ge
 8017f16:	461e      	movge	r6, r3
 8017f18:	f7ff ff0e 	bl	8017d38 <GUI_Lock>
 8017f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8017f20:	f7fa fe60 	bl	8012be4 <GUI_ALLOC_Lock>
 8017f24:	b1b4      	cbz	r4, 8017f54 <GUI_Delay+0x68>
 8017f26:	4625      	mov	r5, r4
 8017f28:	f7ff fefc 	bl	8017d24 <GUI_Unlock>
 8017f2c:	3d01      	subs	r5, #1
 8017f2e:	d1fb      	bne.n	8017f28 <GUI_Delay+0x3c>
 8017f30:	4630      	mov	r0, r6
 8017f32:	f7f7 f9ad 	bl	800f290 <GUI_X_Delay>
 8017f36:	f7ff feff 	bl	8017d38 <GUI_Lock>
 8017f3a:	3c01      	subs	r4, #1
 8017f3c:	d1fb      	bne.n	8017f36 <GUI_Delay+0x4a>
 8017f3e:	f7fa fe59 	bl	8012bf4 <GUI_ALLOC_Unlock>
 8017f42:	f7ff feef 	bl	8017d24 <GUI_Unlock>
 8017f46:	f7f7 f9a1 	bl	800f28c <GUI_X_GetTime>
 8017f4a:	1a3e      	subs	r6, r7, r0
 8017f4c:	2e00      	cmp	r6, #0
 8017f4e:	dcdc      	bgt.n	8017f0a <GUI_Delay+0x1e>
 8017f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f54:	4630      	mov	r0, r6
 8017f56:	f7f7 f99b 	bl	800f290 <GUI_X_Delay>
 8017f5a:	f7fa fe4b 	bl	8012bf4 <GUI_ALLOC_Unlock>
 8017f5e:	f7ff fee1 	bl	8017d24 <GUI_Unlock>
 8017f62:	e7f0      	b.n	8017f46 <GUI_Delay+0x5a>
 8017f64:	20000040 	.word	0x20000040
 8017f68:	20000388 	.word	0x20000388

08017f6c <GUI_UC__GetCharCodeInc>:
 8017f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f6e:	4e08      	ldr	r6, [pc, #32]	; (8017f90 <GUI_UC__GetCharCodeInc+0x24>)
 8017f70:	4605      	mov	r5, r0
 8017f72:	6804      	ldr	r4, [r0, #0]
 8017f74:	6833      	ldr	r3, [r6, #0]
 8017f76:	4620      	mov	r0, r4
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	4798      	blx	r3
 8017f7c:	6833      	ldr	r3, [r6, #0]
 8017f7e:	4607      	mov	r7, r0
 8017f80:	4620      	mov	r0, r4
 8017f82:	685b      	ldr	r3, [r3, #4]
 8017f84:	4798      	blx	r3
 8017f86:	4404      	add	r4, r0
 8017f88:	4638      	mov	r0, r7
 8017f8a:	602c      	str	r4, [r5, #0]
 8017f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	200467c8 	.word	0x200467c8

08017f94 <GUI_UC__NumChars2NumBytes>:
 8017f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f96:	b169      	cbz	r1, 8017fb4 <GUI_UC__NumChars2NumBytes+0x20>
 8017f98:	4605      	mov	r5, r0
 8017f9a:	460c      	mov	r4, r1
 8017f9c:	2600      	movs	r6, #0
 8017f9e:	4f06      	ldr	r7, [pc, #24]	; (8017fb8 <GUI_UC__NumChars2NumBytes+0x24>)
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	4798      	blx	r3
 8017fa8:	3c01      	subs	r4, #1
 8017faa:	4405      	add	r5, r0
 8017fac:	4406      	add	r6, r0
 8017fae:	d1f7      	bne.n	8017fa0 <GUI_UC__NumChars2NumBytes+0xc>
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fb4:	460e      	mov	r6, r1
 8017fb6:	e7fb      	b.n	8017fb0 <GUI_UC__NumChars2NumBytes+0x1c>
 8017fb8:	200467c8 	.word	0x200467c8

08017fbc <GUI__GetNumChars>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	4604      	mov	r4, r0
 8017fc0:	b188      	cbz	r0, 8017fe6 <GUI__GetNumChars+0x2a>
 8017fc2:	2600      	movs	r6, #0
 8017fc4:	4d09      	ldr	r5, [pc, #36]	; (8017fec <GUI__GetNumChars+0x30>)
 8017fc6:	e000      	b.n	8017fca <GUI__GetNumChars+0xe>
 8017fc8:	3601      	adds	r6, #1
 8017fca:	682b      	ldr	r3, [r5, #0]
 8017fcc:	4620      	mov	r0, r4
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4798      	blx	r3
 8017fd2:	682b      	ldr	r3, [r5, #0]
 8017fd4:	4607      	mov	r7, r0
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	685b      	ldr	r3, [r3, #4]
 8017fda:	4798      	blx	r3
 8017fdc:	4404      	add	r4, r0
 8017fde:	2f00      	cmp	r7, #0
 8017fe0:	d1f2      	bne.n	8017fc8 <GUI__GetNumChars+0xc>
 8017fe2:	4630      	mov	r0, r6
 8017fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	4630      	mov	r0, r6
 8017fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fec:	200467c8 	.word	0x200467c8

08017ff0 <_GetCharCode>:
 8017ff0:	7800      	ldrb	r0, [r0, #0]
 8017ff2:	4770      	bx	lr

08017ff4 <_GetCharSize>:
 8017ff4:	2001      	movs	r0, #1
 8017ff6:	4770      	bx	lr

08017ff8 <_CalcSizeOfChar>:
 8017ff8:	2001      	movs	r0, #1
 8017ffa:	4770      	bx	lr

08017ffc <_Encode>:
 8017ffc:	7001      	strb	r1, [r0, #0]
 8017ffe:	2001      	movs	r0, #1
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop

08018004 <GUI_DispDecShift>:
 8018004:	b510      	push	{r4, lr}
 8018006:	b084      	sub	sp, #16
 8018008:	ab04      	add	r3, sp, #16
 801800a:	ac01      	add	r4, sp, #4
 801800c:	f843 4d10 	str.w	r4, [r3, #-16]!
 8018010:	f7fb f9c8 	bl	80133a4 <GUI_AddDecShift>
 8018014:	4620      	mov	r0, r4
 8018016:	f7fc f9db 	bl	80143d0 <GUI_DispString>
 801801a:	b004      	add	sp, #16
 801801c:	bd10      	pop	{r4, pc}
 801801e:	bf00      	nop

08018020 <GUI_DispSDecShift>:
 8018020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018022:	b085      	sub	sp, #20
 8018024:	460c      	mov	r4, r1
 8018026:	4617      	mov	r7, r2
 8018028:	ad04      	add	r5, sp, #16
 801802a:	ae01      	add	r6, sp, #4
 801802c:	f845 6d10 	str.w	r6, [r5, #-16]!
 8018030:	4629      	mov	r1, r5
 8018032:	f7fb f9a9 	bl	8013388 <GUI_AddSign>
 8018036:	2800      	cmp	r0, #0
 8018038:	dd01      	ble.n	801803e <GUI_DispSDecShift+0x1e>
 801803a:	3c01      	subs	r4, #1
 801803c:	b2e4      	uxtb	r4, r4
 801803e:	462b      	mov	r3, r5
 8018040:	463a      	mov	r2, r7
 8018042:	4621      	mov	r1, r4
 8018044:	f7fb f9ae 	bl	80133a4 <GUI_AddDecShift>
 8018048:	4630      	mov	r0, r6
 801804a:	f7fc f9c1 	bl	80143d0 <GUI_DispString>
 801804e:	b005      	add	sp, #20
 8018050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018052:	bf00      	nop

08018054 <GUI_DispFloatFix>:
 8018054:	b538      	push	{r3, r4, r5, lr}
 8018056:	4b1e      	ldr	r3, [pc, #120]	; (80180d0 <GUI_DispFloatFix+0x7c>)
 8018058:	460c      	mov	r4, r1
 801805a:	4605      	mov	r5, r0
 801805c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018060:	ee07 3a90 	vmov	s15, r3
 8018064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018068:	ee27 0a80 	vmul.f32	s0, s15, s0
 801806c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018070:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018078:	d419      	bmi.n	80180ae <GUI_DispFloatFix+0x5a>
 801807a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801807e:	ee17 0a90 	vmov	r0, s15
 8018082:	f7e8 fa31 	bl	80004e8 <__aeabi_f2d>
 8018086:	ec41 0b10 	vmov	d0, r0, r1
 801808a:	f00d fa71 	bl	8025570 <floor>
 801808e:	ec51 0b10 	vmov	r0, r1, d0
 8018092:	f7e8 fd55 	bl	8000b40 <__aeabi_d2f>
 8018096:	ee07 0a90 	vmov	s15, r0
 801809a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801809e:	4622      	mov	r2, r4
 80180a0:	4629      	mov	r1, r5
 80180a2:	ee17 0a90 	vmov	r0, s15
 80180a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80180aa:	f7ff bfab 	b.w	8018004 <GUI_DispDecShift>
 80180ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 80180b2:	ee17 0a90 	vmov	r0, s15
 80180b6:	f7e8 fa17 	bl	80004e8 <__aeabi_f2d>
 80180ba:	ec41 0b10 	vmov	d0, r0, r1
 80180be:	f00d f9d3 	bl	8025468 <ceil>
 80180c2:	ec51 0b10 	vmov	r0, r1, d0
 80180c6:	f7e8 fd3b 	bl	8000b40 <__aeabi_d2f>
 80180ca:	ee07 0a90 	vmov	s15, r0
 80180ce:	e7e4      	b.n	801809a <GUI_DispFloatFix+0x46>
 80180d0:	08026a14 	.word	0x08026a14

080180d4 <GUI_DispFloatMin>:
 80180d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80180d8:	b530      	push	{r4, r5, lr}
 80180da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180de:	4604      	mov	r4, r0
 80180e0:	ed2d 8b02 	vpush	{d8}
 80180e4:	b083      	sub	sp, #12
 80180e6:	d15d      	bne.n	80181a4 <GUI_DispFloatMin+0xd0>
 80180e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80180ec:	eddf 8a7f 	vldr	s17, [pc, #508]	; 80182ec <GUI_DispFloatMin+0x218>
 80180f0:	4b7f      	ldr	r3, [pc, #508]	; (80182f0 <GUI_DispFloatMin+0x21c>)
 80180f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80180f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80180fa:	ee00 3a10 	vmov	s0, r3
 80180fe:	eeb8 8a40 	vcvt.f32.u32	s16, s0
 8018102:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801810a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801810e:	f100 80b6 	bmi.w	801827e <GUI_DispFloatMin+0x1aa>
 8018112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018116:	ee17 0a90 	vmov	r0, s15
 801811a:	f7e8 f9e5 	bl	80004e8 <__aeabi_f2d>
 801811e:	ec41 0b10 	vmov	d0, r0, r1
 8018122:	f00d fa25 	bl	8025570 <floor>
 8018126:	ec51 0b10 	vmov	r0, r1, d0
 801812a:	f7e8 fd09 	bl	8000b40 <__aeabi_d2f>
 801812e:	ee07 0a90 	vmov	s15, r0
 8018132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018136:	ee17 0a90 	vmov	r0, s15
 801813a:	edcd 7a00 	vstr	s15, [sp]
 801813e:	f7fb f8d9 	bl	80132f4 <GUI_Long2Len>
 8018142:	ee28 0a28 	vmul.f32	s0, s16, s17
 8018146:	2c00      	cmp	r4, #0
 8018148:	bf0c      	ite	eq
 801814a:	4623      	moveq	r3, r4
 801814c:	1c63      	addne	r3, r4, #1
 801814e:	1b00      	subs	r0, r0, r4
 8018150:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018154:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018158:	2800      	cmp	r0, #0
 801815a:	bfac      	ite	ge
 801815c:	181d      	addge	r5, r3, r0
 801815e:	1c1d      	addlt	r5, r3, #0
 8018160:	b2ed      	uxtb	r5, r5
 8018162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018166:	f100 8095 	bmi.w	8018294 <GUI_DispFloatMin+0x1c0>
 801816a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801816e:	ee17 0a90 	vmov	r0, s15
 8018172:	f7e8 f9b9 	bl	80004e8 <__aeabi_f2d>
 8018176:	ec41 0b10 	vmov	d0, r0, r1
 801817a:	f00d f9f9 	bl	8025570 <floor>
 801817e:	ec51 0b10 	vmov	r0, r1, d0
 8018182:	f7e8 fcdd 	bl	8000b40 <__aeabi_d2f>
 8018186:	ee07 0a90 	vmov	s15, r0
 801818a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801818e:	4622      	mov	r2, r4
 8018190:	4629      	mov	r1, r5
 8018192:	ee17 0a90 	vmov	r0, s15
 8018196:	b003      	add	sp, #12
 8018198:	ecbd 8b02 	vpop	{d8}
 801819c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181a0:	f7ff bf30 	b.w	8018004 <GUI_DispDecShift>
 80181a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80181a8:	eef0 8a40 	vmov.f32	s17, s0
 80181ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181b0:	db2c      	blt.n	801820c <GUI_DispFloatMin+0x138>
 80181b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80181b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80181ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181be:	d525      	bpl.n	801820c <GUI_DispFloatMin+0x138>
 80181c0:	eef0 7ac0 	vabs.f32	s15, s0
 80181c4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80182f4 <GUI_DispFloatMin+0x220>
 80181c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80181cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80181d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d4:	d04e      	beq.n	8018274 <GUI_DispFloatMin+0x1a0>
 80181d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80181da:	2300      	movs	r3, #0
 80181dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80181e0:	3301      	adds	r3, #1
 80181e2:	b2db      	uxtb	r3, r3
 80181e4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80181e8:	ee16 2a90 	vmov	r2, s13
 80181ec:	2a00      	cmp	r2, #0
 80181ee:	d0f5      	beq.n	80181dc <GUI_DispFloatMin+0x108>
 80181f0:	42a3      	cmp	r3, r4
 80181f2:	dd3f      	ble.n	8018274 <GUI_DispFloatMin+0x1a0>
 80181f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80181f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80181fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018200:	db5e      	blt.n	80182c0 <GUI_DispFloatMin+0x1ec>
 8018202:	2c00      	cmp	r4, #0
 8018204:	d06f      	beq.n	80182e6 <GUI_DispFloatMin+0x212>
 8018206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801820a:	e771      	b.n	80180f0 <GUI_DispFloatMin+0x1c>
 801820c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018214:	d52b      	bpl.n	801826e <GUI_DispFloatMin+0x19a>
 8018216:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801821a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801821e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018222:	dd24      	ble.n	801826e <GUI_DispFloatMin+0x19a>
 8018224:	eef0 7ae8 	vabs.f32	s15, s17
 8018228:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80182f4 <GUI_DispFloatMin+0x220>
 801822c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018230:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018238:	d03d      	beq.n	80182b6 <GUI_DispFloatMin+0x1e2>
 801823a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801823e:	2300      	movs	r3, #0
 8018240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018244:	3301      	adds	r3, #1
 8018246:	b2db      	uxtb	r3, r3
 8018248:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801824c:	ee16 2a90 	vmov	r2, s13
 8018250:	2a00      	cmp	r2, #0
 8018252:	d0f5      	beq.n	8018240 <GUI_DispFloatMin+0x16c>
 8018254:	42a3      	cmp	r3, r4
 8018256:	dd2e      	ble.n	80182b6 <GUI_DispFloatMin+0x1e2>
 8018258:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801825c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018264:	d83c      	bhi.n	80182e0 <GUI_DispFloatMin+0x20c>
 8018266:	2c00      	cmp	r4, #0
 8018268:	d1cd      	bne.n	8018206 <GUI_DispFloatMin+0x132>
 801826a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 801826e:	eef0 7a68 	vmov.f32	s15, s17
 8018272:	e73d      	b.n	80180f0 <GUI_DispFloatMin+0x1c>
 8018274:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018278:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801827c:	e738      	b.n	80180f0 <GUI_DispFloatMin+0x1c>
 801827e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018282:	ee17 0a90 	vmov	r0, s15
 8018286:	f7e8 f92f 	bl	80004e8 <__aeabi_f2d>
 801828a:	ec41 0b10 	vmov	d0, r0, r1
 801828e:	f00d f8eb 	bl	8025468 <ceil>
 8018292:	e748      	b.n	8018126 <GUI_DispFloatMin+0x52>
 8018294:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018298:	ee17 0a90 	vmov	r0, s15
 801829c:	f7e8 f924 	bl	80004e8 <__aeabi_f2d>
 80182a0:	ec41 0b10 	vmov	d0, r0, r1
 80182a4:	f00d f8e0 	bl	8025468 <ceil>
 80182a8:	ec51 0b10 	vmov	r0, r1, d0
 80182ac:	f7e8 fc48 	bl	8000b40 <__aeabi_d2f>
 80182b0:	ee07 0a90 	vmov	s15, r0
 80182b4:	e769      	b.n	801818a <GUI_DispFloatMin+0xb6>
 80182b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80182ba:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80182be:	e717      	b.n	80180f0 <GUI_DispFloatMin+0x1c>
 80182c0:	2c00      	cmp	r4, #0
 80182c2:	f47f af11 	bne.w	80180e8 <GUI_DispFloatMin+0x14>
 80182c6:	eddf 8a09 	vldr	s17, [pc, #36]	; 80182ec <GUI_DispFloatMin+0x218>
 80182ca:	4b09      	ldr	r3, [pc, #36]	; (80182f0 <GUI_DispFloatMin+0x21c>)
 80182cc:	2200      	movs	r2, #0
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	4610      	mov	r0, r2
 80182d2:	9200      	str	r2, [sp, #0]
 80182d4:	ee07 3a90 	vmov	s15, r3
 80182d8:	9301      	str	r3, [sp, #4]
 80182da:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80182de:	e72e      	b.n	801813e <GUI_DispFloatMin+0x6a>
 80182e0:	2c00      	cmp	r4, #0
 80182e2:	d0f0      	beq.n	80182c6 <GUI_DispFloatMin+0x1f2>
 80182e4:	e78f      	b.n	8018206 <GUI_DispFloatMin+0x132>
 80182e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80182ea:	e7ee      	b.n	80182ca <GUI_DispFloatMin+0x1f6>
 80182ec:	00000000 	.word	0x00000000
 80182f0:	08026a14 	.word	0x08026a14
 80182f4:	3089705f 	.word	0x3089705f

080182f8 <GUI_DispFloat>:
 80182f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	ed2d 8b02 	vpush	{d8}
 8018302:	eeb0 8a40 	vmov.f32	s16, s0
 8018306:	4605      	mov	r5, r0
 8018308:	ee17 0a90 	vmov	r0, s15
 801830c:	f7fa fff2 	bl	80132f4 <GUI_Long2Len>
 8018310:	1a28      	subs	r0, r5, r0
 8018312:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831a:	d536      	bpl.n	801838a <GUI_DispFloat+0x92>
 801831c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018320:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018328:	dd2f      	ble.n	801838a <GUI_DispFloat+0x92>
 801832a:	1e84      	subs	r4, r0, #2
 801832c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018330:	4b1f      	ldr	r3, [pc, #124]	; (80183b0 <GUI_DispFloat+0xb8>)
 8018332:	b2e4      	uxtb	r4, r4
 8018334:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018338:	ee07 3a90 	vmov	s15, r3
 801833c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018340:	ee27 0a88 	vmul.f32	s0, s15, s16
 8018344:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018350:	d41d      	bmi.n	801838e <GUI_DispFloat+0x96>
 8018352:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018356:	ee17 0a90 	vmov	r0, s15
 801835a:	f7e8 f8c5 	bl	80004e8 <__aeabi_f2d>
 801835e:	ec41 0b10 	vmov	d0, r0, r1
 8018362:	f00d f905 	bl	8025570 <floor>
 8018366:	ec51 0b10 	vmov	r0, r1, d0
 801836a:	f7e8 fbe9 	bl	8000b40 <__aeabi_d2f>
 801836e:	ee07 0a90 	vmov	s15, r0
 8018372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018376:	4622      	mov	r2, r4
 8018378:	4629      	mov	r1, r5
 801837a:	ecbd 8b02 	vpop	{d8}
 801837e:	ee17 0a90 	vmov	r0, s15
 8018382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018386:	f7ff be3d 	b.w	8018004 <GUI_DispDecShift>
 801838a:	1e44      	subs	r4, r0, #1
 801838c:	e7ce      	b.n	801832c <GUI_DispFloat+0x34>
 801838e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018392:	ee17 0a90 	vmov	r0, s15
 8018396:	f7e8 f8a7 	bl	80004e8 <__aeabi_f2d>
 801839a:	ec41 0b10 	vmov	d0, r0, r1
 801839e:	f00d f863 	bl	8025468 <ceil>
 80183a2:	ec51 0b10 	vmov	r0, r1, d0
 80183a6:	f7e8 fbcb 	bl	8000b40 <__aeabi_d2f>
 80183aa:	ee07 0a90 	vmov	s15, r0
 80183ae:	e7e0      	b.n	8018372 <GUI_DispFloat+0x7a>
 80183b0:	08026a14 	.word	0x08026a14

080183b4 <GUI_DispSFloatFix>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	4b1e      	ldr	r3, [pc, #120]	; (8018430 <GUI_DispSFloatFix+0x7c>)
 80183b8:	460c      	mov	r4, r1
 80183ba:	4605      	mov	r5, r0
 80183bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183c0:	ee07 3a90 	vmov	s15, r3
 80183c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80183c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80183cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80183d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80183d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183d8:	d419      	bmi.n	801840e <GUI_DispSFloatFix+0x5a>
 80183da:	ee70 7a27 	vadd.f32	s15, s0, s15
 80183de:	ee17 0a90 	vmov	r0, s15
 80183e2:	f7e8 f881 	bl	80004e8 <__aeabi_f2d>
 80183e6:	ec41 0b10 	vmov	d0, r0, r1
 80183ea:	f00d f8c1 	bl	8025570 <floor>
 80183ee:	ec51 0b10 	vmov	r0, r1, d0
 80183f2:	f7e8 fba5 	bl	8000b40 <__aeabi_d2f>
 80183f6:	ee07 0a90 	vmov	s15, r0
 80183fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183fe:	4622      	mov	r2, r4
 8018400:	4629      	mov	r1, r5
 8018402:	ee17 0a90 	vmov	r0, s15
 8018406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801840a:	f7ff be09 	b.w	8018020 <GUI_DispSDecShift>
 801840e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018412:	ee17 0a90 	vmov	r0, s15
 8018416:	f7e8 f867 	bl	80004e8 <__aeabi_f2d>
 801841a:	ec41 0b10 	vmov	d0, r0, r1
 801841e:	f00d f823 	bl	8025468 <ceil>
 8018422:	ec51 0b10 	vmov	r0, r1, d0
 8018426:	f7e8 fb8b 	bl	8000b40 <__aeabi_d2f>
 801842a:	ee07 0a90 	vmov	s15, r0
 801842e:	e7e4      	b.n	80183fa <GUI_DispSFloatFix+0x46>
 8018430:	08026a14 	.word	0x08026a14

08018434 <GUI_DispSFloatMin>:
 8018434:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018438:	b530      	push	{r4, r5, lr}
 801843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801843e:	4605      	mov	r5, r0
 8018440:	ed2d 8b02 	vpush	{d8}
 8018444:	b083      	sub	sp, #12
 8018446:	d162      	bne.n	801850e <GUI_DispSFloatMin+0xda>
 8018448:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801844c:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8018658 <GUI_DispSFloatMin+0x224>
 8018450:	4b82      	ldr	r3, [pc, #520]	; (801865c <GUI_DispSFloatMin+0x228>)
 8018452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018456:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801845a:	ee08 3a90 	vmov	s17, r3
 801845e:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8018462:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801846e:	f100 80bb 	bmi.w	80185e8 <GUI_DispSFloatMin+0x1b4>
 8018472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018476:	ee17 0a90 	vmov	r0, s15
 801847a:	f7e8 f835 	bl	80004e8 <__aeabi_f2d>
 801847e:	ec41 0b10 	vmov	d0, r0, r1
 8018482:	f00d f875 	bl	8025570 <floor>
 8018486:	ec51 0b10 	vmov	r0, r1, d0
 801848a:	f7e8 fb59 	bl	8000b40 <__aeabi_d2f>
 801848e:	ee07 0a90 	vmov	s15, r0
 8018492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018496:	ee17 0a90 	vmov	r0, s15
 801849a:	edcd 7a00 	vstr	s15, [sp]
 801849e:	f7fa ff29 	bl	80132f4 <GUI_Long2Len>
 80184a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184a6:	ee28 8a28 	vmul.f32	s16, s16, s17
 80184aa:	1b40      	subs	r0, r0, r5
 80184ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80184b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80184b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80184bc:	bfc8      	it	gt
 80184be:	3001      	addgt	r0, #1
 80184c0:	2d00      	cmp	r5, #0
 80184c2:	bf0c      	ite	eq
 80184c4:	462c      	moveq	r4, r5
 80184c6:	1c6c      	addne	r4, r5, #1
 80184c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184cc:	4420      	add	r0, r4
 80184ce:	b2c4      	uxtb	r4, r0
 80184d0:	f100 8095 	bmi.w	80185fe <GUI_DispSFloatMin+0x1ca>
 80184d4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80184d8:	ee17 0a90 	vmov	r0, s15
 80184dc:	f7e8 f804 	bl	80004e8 <__aeabi_f2d>
 80184e0:	ec41 0b10 	vmov	d0, r0, r1
 80184e4:	f00d f844 	bl	8025570 <floor>
 80184e8:	ec51 0b10 	vmov	r0, r1, d0
 80184ec:	f7e8 fb28 	bl	8000b40 <__aeabi_d2f>
 80184f0:	ee07 0a90 	vmov	s15, r0
 80184f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184f8:	462a      	mov	r2, r5
 80184fa:	4621      	mov	r1, r4
 80184fc:	ee17 0a90 	vmov	r0, s15
 8018500:	b003      	add	sp, #12
 8018502:	ecbd 8b02 	vpop	{d8}
 8018506:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801850a:	f7ff bd89 	b.w	8018020 <GUI_DispSDecShift>
 801850e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018512:	eeb0 8a40 	vmov.f32	s16, s0
 8018516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801851a:	db2c      	blt.n	8018576 <GUI_DispSFloatMin+0x142>
 801851c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018520:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018528:	d525      	bpl.n	8018576 <GUI_DispSFloatMin+0x142>
 801852a:	eef0 7ac0 	vabs.f32	s15, s0
 801852e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8018660 <GUI_DispSFloatMin+0x22c>
 8018532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018536:	eef5 7a40 	vcmp.f32	s15, #0.0
 801853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801853e:	d04e      	beq.n	80185de <GUI_DispSFloatMin+0x1aa>
 8018540:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018544:	2300      	movs	r3, #0
 8018546:	ee67 7a87 	vmul.f32	s15, s15, s14
 801854a:	3301      	adds	r3, #1
 801854c:	b2db      	uxtb	r3, r3
 801854e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8018552:	ee16 2a90 	vmov	r2, s13
 8018556:	2a00      	cmp	r2, #0
 8018558:	d0f5      	beq.n	8018546 <GUI_DispSFloatMin+0x112>
 801855a:	42ab      	cmp	r3, r5
 801855c:	dd3f      	ble.n	80185de <GUI_DispSFloatMin+0x1aa>
 801855e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018562:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801856a:	db5e      	blt.n	801862a <GUI_DispSFloatMin+0x1f6>
 801856c:	2d00      	cmp	r5, #0
 801856e:	d06f      	beq.n	8018650 <GUI_DispSFloatMin+0x21c>
 8018570:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018574:	e76c      	b.n	8018450 <GUI_DispSFloatMin+0x1c>
 8018576:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801857a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801857e:	d52b      	bpl.n	80185d8 <GUI_DispSFloatMin+0x1a4>
 8018580:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018584:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801858c:	dd24      	ble.n	80185d8 <GUI_DispSFloatMin+0x1a4>
 801858e:	eef0 7ac8 	vabs.f32	s15, s16
 8018592:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018660 <GUI_DispSFloatMin+0x22c>
 8018596:	ee77 7a87 	vadd.f32	s15, s15, s14
 801859a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185a2:	d03d      	beq.n	8018620 <GUI_DispSFloatMin+0x1ec>
 80185a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80185a8:	2300      	movs	r3, #0
 80185aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80185ae:	3301      	adds	r3, #1
 80185b0:	b2db      	uxtb	r3, r3
 80185b2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80185b6:	ee16 2a90 	vmov	r2, s13
 80185ba:	2a00      	cmp	r2, #0
 80185bc:	d0f5      	beq.n	80185aa <GUI_DispSFloatMin+0x176>
 80185be:	42ab      	cmp	r3, r5
 80185c0:	dd2e      	ble.n	8018620 <GUI_DispSFloatMin+0x1ec>
 80185c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80185c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80185ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ce:	d83c      	bhi.n	801864a <GUI_DispSFloatMin+0x216>
 80185d0:	2d00      	cmp	r5, #0
 80185d2:	d1cd      	bne.n	8018570 <GUI_DispSFloatMin+0x13c>
 80185d4:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 80185d8:	eef0 7a48 	vmov.f32	s15, s16
 80185dc:	e738      	b.n	8018450 <GUI_DispSFloatMin+0x1c>
 80185de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80185e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80185e6:	e733      	b.n	8018450 <GUI_DispSFloatMin+0x1c>
 80185e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185ec:	ee17 0a90 	vmov	r0, s15
 80185f0:	f7e7 ff7a 	bl	80004e8 <__aeabi_f2d>
 80185f4:	ec41 0b10 	vmov	d0, r0, r1
 80185f8:	f00c ff36 	bl	8025468 <ceil>
 80185fc:	e743      	b.n	8018486 <GUI_DispSFloatMin+0x52>
 80185fe:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018602:	ee17 0a90 	vmov	r0, s15
 8018606:	f7e7 ff6f 	bl	80004e8 <__aeabi_f2d>
 801860a:	ec41 0b10 	vmov	d0, r0, r1
 801860e:	f00c ff2b 	bl	8025468 <ceil>
 8018612:	ec51 0b10 	vmov	r0, r1, d0
 8018616:	f7e8 fa93 	bl	8000b40 <__aeabi_d2f>
 801861a:	ee07 0a90 	vmov	s15, r0
 801861e:	e769      	b.n	80184f4 <GUI_DispSFloatMin+0xc0>
 8018620:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018624:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018628:	e712      	b.n	8018450 <GUI_DispSFloatMin+0x1c>
 801862a:	2d00      	cmp	r5, #0
 801862c:	f47f af0c 	bne.w	8018448 <GUI_DispSFloatMin+0x14>
 8018630:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8018658 <GUI_DispSFloatMin+0x224>
 8018634:	4b09      	ldr	r3, [pc, #36]	; (801865c <GUI_DispSFloatMin+0x228>)
 8018636:	2200      	movs	r2, #0
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	4610      	mov	r0, r2
 801863c:	9200      	str	r2, [sp, #0]
 801863e:	ee07 3a90 	vmov	s15, r3
 8018642:	9301      	str	r3, [sp, #4]
 8018644:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8018648:	e729      	b.n	801849e <GUI_DispSFloatMin+0x6a>
 801864a:	2d00      	cmp	r5, #0
 801864c:	d0f0      	beq.n	8018630 <GUI_DispSFloatMin+0x1fc>
 801864e:	e78f      	b.n	8018570 <GUI_DispSFloatMin+0x13c>
 8018650:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018654:	e7ee      	b.n	8018634 <GUI_DispSFloatMin+0x200>
 8018656:	bf00      	nop
 8018658:	00000000 	.word	0x00000000
 801865c:	08026a14 	.word	0x08026a14
 8018660:	3089705f 	.word	0x3089705f

08018664 <GUI_SignalEvent>:
 8018664:	4b02      	ldr	r3, [pc, #8]	; (8018670 <GUI_SignalEvent+0xc>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	b103      	cbz	r3, 801866c <GUI_SignalEvent+0x8>
 801866a:	4718      	bx	r3
 801866c:	4770      	bx	lr
 801866e:	bf00      	nop
 8018670:	20000398 	.word	0x20000398

08018674 <GUI__MixColorsBulk>:
 8018674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018678:	b087      	sub	sp, #28
 801867a:	4692      	mov	sl, r2
 801867c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801867e:	9001      	str	r0, [sp, #4]
 8018680:	9102      	str	r1, [sp, #8]
 8018682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018684:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8018688:	2a00      	cmp	r2, #0
 801868a:	d035      	beq.n	80186f8 <GUI__MixColorsBulk+0x84>
 801868c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801868e:	2100      	movs	r1, #0
 8018690:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8018700 <GUI__MixColorsBulk+0x8c>
 8018694:	0092      	lsls	r2, r2, #2
 8018696:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8018704 <GUI__MixColorsBulk+0x90>
 801869a:	9103      	str	r1, [sp, #12]
 801869c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80186a0:	9205      	str	r2, [sp, #20]
 80186a2:	9304      	str	r3, [sp, #16]
 80186a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80186a6:	4657      	mov	r7, sl
 80186a8:	9e02      	ldr	r6, [sp, #8]
 80186aa:	9d01      	ldr	r5, [sp, #4]
 80186ac:	f855 0b04 	ldr.w	r0, [r5], #4
 80186b0:	f8db 3000 	ldr.w	r3, [fp]
 80186b4:	0e02      	lsrs	r2, r0, #24
 80186b6:	f856 1b04 	ldr.w	r1, [r6], #4
 80186ba:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80186be:	fb09 f202 	mul.w	r2, r9, r2
 80186c2:	fba8 e202 	umull	lr, r2, r8, r2
 80186c6:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 80186ca:	4798      	blx	r3
 80186cc:	3c01      	subs	r4, #1
 80186ce:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80186d2:	f847 0b04 	str.w	r0, [r7], #4
 80186d6:	d1e9      	bne.n	80186ac <GUI__MixColorsBulk+0x38>
 80186d8:	9a01      	ldr	r2, [sp, #4]
 80186da:	9905      	ldr	r1, [sp, #20]
 80186dc:	4610      	mov	r0, r2
 80186de:	9a02      	ldr	r2, [sp, #8]
 80186e0:	448a      	add	sl, r1
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	4408      	add	r0, r1
 80186e6:	9904      	ldr	r1, [sp, #16]
 80186e8:	3301      	adds	r3, #1
 80186ea:	440a      	add	r2, r1
 80186ec:	9001      	str	r0, [sp, #4]
 80186ee:	9303      	str	r3, [sp, #12]
 80186f0:	9202      	str	r2, [sp, #8]
 80186f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d1d5      	bne.n	80186a4 <GUI__MixColorsBulk+0x30>
 80186f8:	b007      	add	sp, #28
 80186fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186fe:	bf00      	nop
 8018700:	20000044 	.word	0x20000044
 8018704:	80808081 	.word	0x80808081

08018708 <GUI__MixColors>:
 8018708:	0e0b      	lsrs	r3, r1, #24
 801870a:	ea4f 6310 	mov.w	r3, r0, lsr #24
 801870e:	b4f0      	push	{r4, r5, r6, r7}
 8018710:	bf08      	it	eq
 8018712:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8018716:	4c11      	ldr	r4, [pc, #68]	; (801875c <GUI__MixColors+0x54>)
 8018718:	fb02 f203 	mul.w	r2, r2, r3
 801871c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8018720:	0a0d      	lsrs	r5, r1, #8
 8018722:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8018726:	fba4 1202 	umull	r1, r2, r4, r2
 801872a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801872e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018732:	09d2      	lsrs	r2, r2, #7
 8018734:	f040 7480 	orr.w	r4, r0, #16777216	; 0x1000000
 8018738:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 801873c:	fb02 f106 	mul.w	r1, r2, r6
 8018740:	fb07 f005 	mul.w	r0, r7, r5
 8018744:	fb07 1103 	mla	r1, r7, r3, r1
 8018748:	fb02 0004 	mla	r0, r2, r4, r0
 801874c:	0a09      	lsrs	r1, r1, #8
 801874e:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8018752:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8018756:	bcf0      	pop	{r4, r5, r6, r7}
 8018758:	4308      	orrs	r0, r1
 801875a:	4770      	bx	lr
 801875c:	80808081 	.word	0x80808081

08018760 <_OnExit>:
 8018760:	b510      	push	{r4, lr}
 8018762:	4c08      	ldr	r4, [pc, #32]	; (8018784 <_OnExit+0x24>)
 8018764:	6820      	ldr	r0, [r4, #0]
 8018766:	f7f9 ff7f 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 801876a:	6860      	ldr	r0, [r4, #4]
 801876c:	f7f9 ff7c 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8018770:	68a0      	ldr	r0, [r4, #8]
 8018772:	f7f9 ff79 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 8018776:	2300      	movs	r3, #0
 8018778:	60a3      	str	r3, [r4, #8]
 801877a:	6063      	str	r3, [r4, #4]
 801877c:	6023      	str	r3, [r4, #0]
 801877e:	60e3      	str	r3, [r4, #12]
 8018780:	6123      	str	r3, [r4, #16]
 8018782:	bd10      	pop	{r4, pc}
 8018784:	200003a0 	.word	0x200003a0

08018788 <GUI__DoAlphaBlending>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	b08f      	sub	sp, #60	; 0x3c
 801878e:	2400      	movs	r4, #0
 8018790:	461f      	mov	r7, r3
 8018792:	4693      	mov	fp, r2
 8018794:	9005      	str	r0, [sp, #20]
 8018796:	4893      	ldr	r0, [pc, #588]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 8018798:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801879a:	6900      	ldr	r0, [r0, #16]
 801879c:	9107      	str	r1, [sp, #28]
 801879e:	601c      	str	r4, [r3, #0]
 80187a0:	2800      	cmp	r0, #0
 80187a2:	f000 80f1 	beq.w	8018988 <GUI__DoAlphaBlending+0x200>
 80187a6:	4b8f      	ldr	r3, [pc, #572]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 80187a8:	68dc      	ldr	r4, [r3, #12]
 80187aa:	461d      	mov	r5, r3
 80187ac:	b92c      	cbnz	r4, 80187ba <GUI__DoAlphaBlending+0x32>
 80187ae:	4b8e      	ldr	r3, [pc, #568]	; (80189e8 <GUI__DoAlphaBlending+0x260>)
 80187b0:	681c      	ldr	r4, [r3, #0]
 80187b2:	60ec      	str	r4, [r5, #12]
 80187b4:	2c00      	cmp	r4, #0
 80187b6:	f000 80f1 	beq.w	801899c <GUI__DoAlphaBlending+0x214>
 80187ba:	4b8a      	ldr	r3, [pc, #552]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 80187bc:	4d89      	ldr	r5, [pc, #548]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	9302      	str	r3, [sp, #8]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	f000 80fd 	beq.w	80189c2 <GUI__DoAlphaBlending+0x23a>
 80187c8:	4b86      	ldr	r3, [pc, #536]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 80187ca:	4d86      	ldr	r5, [pc, #536]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	9303      	str	r3, [sp, #12]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	f000 80e8 	beq.w	80189a6 <GUI__DoAlphaBlending+0x21e>
 80187d6:	42a7      	cmp	r7, r4
 80187d8:	4b84      	ldr	r3, [pc, #528]	; (80189ec <GUI__DoAlphaBlending+0x264>)
 80187da:	4a85      	ldr	r2, [pc, #532]	; (80189f0 <GUI__DoAlphaBlending+0x268>)
 80187dc:	f04f 0600 	mov.w	r6, #0
 80187e0:	bfa8      	it	ge
 80187e2:	4627      	movge	r7, r4
 80187e4:	6819      	ldr	r1, [r3, #0]
 80187e6:	9b05      	ldr	r3, [sp, #20]
 80187e8:	4634      	mov	r4, r6
 80187ea:	7c48      	ldrb	r0, [r1, #17]
 80187ec:	46ba      	mov	sl, r7
 80187ee:	443b      	add	r3, r7
 80187f0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80187f4:	930c      	str	r3, [sp, #48]	; 0x30
 80187f6:	3b01      	subs	r3, #1
 80187f8:	9208      	str	r2, [sp, #32]
 80187fa:	9309      	str	r3, [sp, #36]	; 0x24
 80187fc:	6913      	ldr	r3, [r2, #16]
 80187fe:	930d      	str	r3, [sp, #52]	; 0x34
 8018800:	f001 fefa 	bl	801a5f8 <GUI_GetBitsPerPixelEx>
 8018804:	4b79      	ldr	r3, [pc, #484]	; (80189ec <GUI__DoAlphaBlending+0x264>)
 8018806:	9004      	str	r0, [sp, #16]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	7c58      	ldrb	r0, [r3, #17]
 801880c:	f001 ff0e 	bl	801a62c <GUI_GetpfIndex2ColorEx>
 8018810:	4b78      	ldr	r3, [pc, #480]	; (80189f4 <GUI__DoAlphaBlending+0x26c>)
 8018812:	4a79      	ldr	r2, [pc, #484]	; (80189f8 <GUI__DoAlphaBlending+0x270>)
 8018814:	900b      	str	r0, [sp, #44]	; 0x2c
 8018816:	4290      	cmp	r0, r2
 8018818:	bf18      	it	ne
 801881a:	4298      	cmpne	r0, r3
 801881c:	bf14      	ite	ne
 801881e:	2301      	movne	r3, #1
 8018820:	2300      	moveq	r3, #0
 8018822:	930a      	str	r3, [sp, #40]	; 0x28
 8018824:	465f      	mov	r7, fp
 8018826:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018828:	f857 0b04 	ldr.w	r0, [r7], #4
 801882c:	4798      	blx	r3
 801882e:	4681      	mov	r9, r0
 8018830:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018834:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018838:	d047      	beq.n	80188ca <GUI__DoAlphaBlending+0x142>
 801883a:	2c00      	cmp	r4, #0
 801883c:	d12b      	bne.n	8018896 <GUI__DoAlphaBlending+0x10e>
 801883e:	4b6b      	ldr	r3, [pc, #428]	; (80189ec <GUI__DoAlphaBlending+0x264>)
 8018840:	9a05      	ldr	r2, [sp, #20]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	1995      	adds	r5, r2, r6
 8018846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801884a:	42ab      	cmp	r3, r5
 801884c:	dd59      	ble.n	8018902 <GUI__DoAlphaBlending+0x17a>
 801884e:	1b5a      	subs	r2, r3, r5
 8018850:	461d      	mov	r5, r3
 8018852:	4614      	mov	r4, r2
 8018854:	9206      	str	r2, [sp, #24]
 8018856:	9802      	ldr	r0, [sp, #8]
 8018858:	4434      	add	r4, r6
 801885a:	9b08      	ldr	r3, [sp, #32]
 801885c:	9907      	ldr	r1, [sp, #28]
 801885e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8018862:	9301      	str	r3, [sp, #4]
 8018864:	4628      	mov	r0, r5
 8018866:	460b      	mov	r3, r1
 8018868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801886a:	9400      	str	r4, [sp, #0]
 801886c:	f002 f910 	bl	801aa90 <GUI_ReadRectEx>
 8018870:	9b04      	ldr	r3, [sp, #16]
 8018872:	2b17      	cmp	r3, #23
 8018874:	dd7e      	ble.n	8018974 <GUI__DoAlphaBlending+0x1ec>
 8018876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018878:	2b00      	cmp	r3, #0
 801887a:	d044      	beq.n	8018906 <GUI__DoAlphaBlending+0x17e>
 801887c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801887e:	9606      	str	r6, [sp, #24]
 8018880:	1b5d      	subs	r5, r3, r5
 8018882:	462e      	mov	r6, r5
 8018884:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018886:	6820      	ldr	r0, [r4, #0]
 8018888:	47a8      	blx	r5
 801888a:	3e01      	subs	r6, #1
 801888c:	f844 0b04 	str.w	r0, [r4], #4
 8018890:	d1f9      	bne.n	8018886 <GUI__DoAlphaBlending+0xfe>
 8018892:	9e06      	ldr	r6, [sp, #24]
 8018894:	2401      	movs	r4, #1
 8018896:	4b53      	ldr	r3, [pc, #332]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 8018898:	69dd      	ldr	r5, [r3, #28]
 801889a:	2d00      	cmp	r5, #0
 801889c:	d138      	bne.n	8018910 <GUI__DoAlphaBlending+0x188>
 801889e:	fa5f f288 	uxtb.w	r2, r8
 80188a2:	f1b8 0f00 	cmp.w	r8, #0
 80188a6:	d11a      	bne.n	80188de <GUI__DoAlphaBlending+0x156>
 80188a8:	9b02      	ldr	r3, [sp, #8]
 80188aa:	9a03      	ldr	r2, [sp, #12]
 80188ac:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80188b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80188b4:	f1ba 0a01 	subs.w	sl, sl, #1
 80188b8:	f106 0601 	add.w	r6, r6, #1
 80188bc:	46bb      	mov	fp, r7
 80188be:	d1b1      	bne.n	8018824 <GUI__DoAlphaBlending+0x9c>
 80188c0:	9c03      	ldr	r4, [sp, #12]
 80188c2:	4620      	mov	r0, r4
 80188c4:	b00f      	add	sp, #60	; 0x3c
 80188c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80188cc:	9a03      	ldr	r2, [sp, #12]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 80188d4:	f043 0301 	orr.w	r3, r3, #1
 80188d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80188da:	6013      	str	r3, [r2, #0]
 80188dc:	e7ea      	b.n	80188b4 <GUI__DoAlphaBlending+0x12c>
 80188de:	9902      	ldr	r1, [sp, #8]
 80188e0:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 80188e4:	4b45      	ldr	r3, [pc, #276]	; (80189fc <GUI__DoAlphaBlending+0x274>)
 80188e6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4798      	blx	r3
 80188ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80188f0:	9a03      	ldr	r2, [sp, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 80188f8:	f043 0301 	orr.w	r3, r3, #1
 80188fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80188fe:	6013      	str	r3, [r2, #0]
 8018900:	e7d8      	b.n	80188b4 <GUI__DoAlphaBlending+0x12c>
 8018902:	9406      	str	r4, [sp, #24]
 8018904:	e7a7      	b.n	8018856 <GUI__DoAlphaBlending+0xce>
 8018906:	4b37      	ldr	r3, [pc, #220]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 8018908:	2401      	movs	r4, #1
 801890a:	69dd      	ldr	r5, [r3, #28]
 801890c:	2d00      	cmp	r5, #0
 801890e:	d0c6      	beq.n	801889e <GUI__DoAlphaBlending+0x116>
 8018910:	00b6      	lsls	r6, r6, #2
 8018912:	9a02      	ldr	r2, [sp, #8]
 8018914:	4653      	mov	r3, sl
 8018916:	4658      	mov	r0, fp
 8018918:	4432      	add	r2, r6
 801891a:	4657      	mov	r7, sl
 801891c:	4614      	mov	r4, r2
 801891e:	9a03      	ldr	r2, [sp, #12]
 8018920:	4416      	add	r6, r2
 8018922:	4621      	mov	r1, r4
 8018924:	4632      	mov	r2, r6
 8018926:	47a8      	blx	r5
 8018928:	f1ab 0204 	sub.w	r2, fp, #4
 801892c:	e008      	b.n	8018940 <GUI__DoAlphaBlending+0x1b8>
 801892e:	6823      	ldr	r3, [r4, #0]
 8018930:	3f01      	subs	r7, #1
 8018932:	f104 0404 	add.w	r4, r4, #4
 8018936:	f106 0604 	add.w	r6, r6, #4
 801893a:	f846 3c04 	str.w	r3, [r6, #-4]
 801893e:	d00e      	beq.n	801895e <GUI__DoAlphaBlending+0x1d6>
 8018940:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8018944:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018948:	d0f1      	beq.n	801892e <GUI__DoAlphaBlending+0x1a6>
 801894a:	6821      	ldr	r1, [r4, #0]
 801894c:	3604      	adds	r6, #4
 801894e:	3404      	adds	r4, #4
 8018950:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8018954:	bf08      	it	eq
 8018956:	f846 3c04 	streq.w	r3, [r6, #-4]
 801895a:	3f01      	subs	r7, #1
 801895c:	d1f0      	bne.n	8018940 <GUI__DoAlphaBlending+0x1b8>
 801895e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018960:	9c03      	ldr	r4, [sp, #12]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018966:	4620      	mov	r0, r4
 8018968:	f043 0301 	orr.w	r3, r3, #1
 801896c:	6013      	str	r3, [r2, #0]
 801896e:	b00f      	add	sp, #60	; 0x3c
 8018970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018974:	461a      	mov	r2, r3
 8018976:	9b06      	ldr	r3, [sp, #24]
 8018978:	4620      	mov	r0, r4
 801897a:	2401      	movs	r4, #1
 801897c:	ebc3 010a 	rsb	r1, r3, sl
 8018980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018982:	f000 faaf 	bl	8018ee4 <GUI__ExpandPixelIndicesEx>
 8018986:	e786      	b.n	8018896 <GUI__DoAlphaBlending+0x10e>
 8018988:	4a1d      	ldr	r2, [pc, #116]	; (8018a00 <GUI__DoAlphaBlending+0x278>)
 801898a:	2301      	movs	r3, #1
 801898c:	4815      	ldr	r0, [pc, #84]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 801898e:	f840 2f14 	str.w	r2, [r0, #20]!
 8018992:	4a14      	ldr	r2, [pc, #80]	; (80189e4 <GUI__DoAlphaBlending+0x25c>)
 8018994:	6113      	str	r3, [r2, #16]
 8018996:	f7fb f9c7 	bl	8013d28 <GUI__RegisterExit>
 801899a:	e704      	b.n	80187a6 <GUI__DoAlphaBlending+0x1e>
 801899c:	f001 fe8a 	bl	801a6b4 <LCD_GetVXSizeMax>
 80189a0:	4604      	mov	r4, r0
 80189a2:	60e8      	str	r0, [r5, #12]
 80189a4:	e709      	b.n	80187ba <GUI__DoAlphaBlending+0x32>
 80189a6:	68e8      	ldr	r0, [r5, #12]
 80189a8:	0080      	lsls	r0, r0, #2
 80189aa:	f7f9 fe67 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 80189ae:	9003      	str	r0, [sp, #12]
 80189b0:	6068      	str	r0, [r5, #4]
 80189b2:	2800      	cmp	r0, #0
 80189b4:	f47f af0f 	bne.w	80187d6 <GUI__DoAlphaBlending+0x4e>
 80189b8:	2400      	movs	r4, #0
 80189ba:	4620      	mov	r0, r4
 80189bc:	b00f      	add	sp, #60	; 0x3c
 80189be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c2:	00a0      	lsls	r0, r4, #2
 80189c4:	f7f9 fe5a 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 80189c8:	6028      	str	r0, [r5, #0]
 80189ca:	b108      	cbz	r0, 80189d0 <GUI__DoAlphaBlending+0x248>
 80189cc:	9002      	str	r0, [sp, #8]
 80189ce:	e6fb      	b.n	80187c8 <GUI__DoAlphaBlending+0x40>
 80189d0:	686c      	ldr	r4, [r5, #4]
 80189d2:	2c00      	cmp	r4, #0
 80189d4:	d1f0      	bne.n	80189b8 <GUI__DoAlphaBlending+0x230>
 80189d6:	68e8      	ldr	r0, [r5, #12]
 80189d8:	0080      	lsls	r0, r0, #2
 80189da:	f7f9 fe4f 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 80189de:	6068      	str	r0, [r5, #4]
 80189e0:	e76f      	b.n	80188c2 <GUI__DoAlphaBlending+0x13a>
 80189e2:	bf00      	nop
 80189e4:	200003a0 	.word	0x200003a0
 80189e8:	200467d8 	.word	0x200467d8
 80189ec:	20000018 	.word	0x20000018
 80189f0:	200467d0 	.word	0x200467d0
 80189f4:	08011c71 	.word	0x08011c71
 80189f8:	08011c6d 	.word	0x08011c6d
 80189fc:	20000044 	.word	0x20000044
 8018a00:	08018761 	.word	0x08018761

08018a04 <GUI__AllocAlphaBuffer>:
 8018a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a06:	b083      	sub	sp, #12
 8018a08:	b9c0      	cbnz	r0, 8018a3c <GUI__AllocAlphaBuffer+0x38>
 8018a0a:	4c22      	ldr	r4, [pc, #136]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a0c:	4605      	mov	r5, r0
 8018a0e:	6923      	ldr	r3, [r4, #16]
 8018a10:	b1cb      	cbz	r3, 8018a46 <GUI__AllocAlphaBuffer+0x42>
 8018a12:	68e0      	ldr	r0, [r4, #12]
 8018a14:	4e1f      	ldr	r6, [pc, #124]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a16:	b918      	cbnz	r0, 8018a20 <GUI__AllocAlphaBuffer+0x1c>
 8018a18:	4b1f      	ldr	r3, [pc, #124]	; (8018a98 <GUI__AllocAlphaBuffer+0x94>)
 8018a1a:	6818      	ldr	r0, [r3, #0]
 8018a1c:	60f0      	str	r0, [r6, #12]
 8018a1e:	b1d8      	cbz	r0, 8018a58 <GUI__AllocAlphaBuffer+0x54>
 8018a20:	6823      	ldr	r3, [r4, #0]
 8018a22:	4f1c      	ldr	r7, [pc, #112]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a24:	b32b      	cbz	r3, 8018a72 <GUI__AllocAlphaBuffer+0x6e>
 8018a26:	2600      	movs	r6, #0
 8018a28:	6863      	ldr	r3, [r4, #4]
 8018a2a:	4f1a      	ldr	r7, [pc, #104]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a2c:	b1c3      	cbz	r3, 8018a60 <GUI__AllocAlphaBuffer+0x5c>
 8018a2e:	b115      	cbz	r5, 8018a36 <GUI__AllocAlphaBuffer+0x32>
 8018a30:	68a3      	ldr	r3, [r4, #8]
 8018a32:	4c18      	ldr	r4, [pc, #96]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a34:	b32b      	cbz	r3, 8018a82 <GUI__AllocAlphaBuffer+0x7e>
 8018a36:	4630      	mov	r0, r6
 8018a38:	b003      	add	sp, #12
 8018a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a3c:	4c15      	ldr	r4, [pc, #84]	; (8018a94 <GUI__AllocAlphaBuffer+0x90>)
 8018a3e:	ad01      	add	r5, sp, #4
 8018a40:	6923      	ldr	r3, [r4, #16]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d1e5      	bne.n	8018a12 <GUI__AllocAlphaBuffer+0xe>
 8018a46:	4a15      	ldr	r2, [pc, #84]	; (8018a9c <GUI__AllocAlphaBuffer+0x98>)
 8018a48:	4620      	mov	r0, r4
 8018a4a:	2301      	movs	r3, #1
 8018a4c:	f840 2f14 	str.w	r2, [r0, #20]!
 8018a50:	6123      	str	r3, [r4, #16]
 8018a52:	f7fb f969 	bl	8013d28 <GUI__RegisterExit>
 8018a56:	e7dc      	b.n	8018a12 <GUI__AllocAlphaBuffer+0xe>
 8018a58:	f001 fe2c 	bl	801a6b4 <LCD_GetVXSizeMax>
 8018a5c:	60f0      	str	r0, [r6, #12]
 8018a5e:	e7df      	b.n	8018a20 <GUI__AllocAlphaBuffer+0x1c>
 8018a60:	68f8      	ldr	r0, [r7, #12]
 8018a62:	0080      	lsls	r0, r0, #2
 8018a64:	f7f9 fe0a 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8018a68:	2800      	cmp	r0, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	bf08      	it	eq
 8018a6e:	2601      	moveq	r6, #1
 8018a70:	e7dd      	b.n	8018a2e <GUI__AllocAlphaBuffer+0x2a>
 8018a72:	0080      	lsls	r0, r0, #2
 8018a74:	f7f9 fe02 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8018a78:	fab0 f680 	clz	r6, r0
 8018a7c:	6038      	str	r0, [r7, #0]
 8018a7e:	0976      	lsrs	r6, r6, #5
 8018a80:	e7d2      	b.n	8018a28 <GUI__AllocAlphaBuffer+0x24>
 8018a82:	68e0      	ldr	r0, [r4, #12]
 8018a84:	0080      	lsls	r0, r0, #2
 8018a86:	f7f9 fdf9 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	60a0      	str	r0, [r4, #8]
 8018a8e:	bf08      	it	eq
 8018a90:	2601      	moveq	r6, #1
 8018a92:	e7d0      	b.n	8018a36 <GUI__AllocAlphaBuffer+0x32>
 8018a94:	200003a0 	.word	0x200003a0
 8018a98:	200467d8 	.word	0x200467d8
 8018a9c:	08018761 	.word	0x08018761

08018aa0 <GUI_SetFuncDrawAlpha>:
 8018aa0:	b410      	push	{r4}
 8018aa2:	b118      	cbz	r0, 8018aac <GUI_SetFuncDrawAlpha+0xc>
 8018aa4:	b111      	cbz	r1, 8018aac <GUI_SetFuncDrawAlpha+0xc>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	e002      	b.n	8018ab2 <GUI_SetFuncDrawAlpha+0x12>
 8018aac:	2100      	movs	r1, #0
 8018aae:	2001      	movs	r0, #1
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	4c03      	ldr	r4, [pc, #12]	; (8018ac0 <GUI_SetFuncDrawAlpha+0x20>)
 8018ab4:	4a03      	ldr	r2, [pc, #12]	; (8018ac4 <GUI_SetFuncDrawAlpha+0x24>)
 8018ab6:	6021      	str	r1, [r4, #0]
 8018ab8:	6013      	str	r3, [r2, #0]
 8018aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018abe:	4770      	bx	lr
 8018ac0:	200467e8 	.word	0x200467e8
 8018ac4:	200467ec 	.word	0x200467ec

08018ac8 <GUI__CompactPixelIndices>:
 8018ac8:	2a08      	cmp	r2, #8
 8018aca:	b410      	push	{r4}
 8018acc:	dd0e      	ble.n	8018aec <GUI__CompactPixelIndices+0x24>
 8018ace:	2a10      	cmp	r2, #16
 8018ad0:	dc1c      	bgt.n	8018b0c <GUI__CompactPixelIndices+0x44>
 8018ad2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	f850 2b04 	ldr.w	r2, [r0], #4
 8018adc:	f823 2b02 	strh.w	r2, [r3], #2
 8018ae0:	4299      	cmp	r1, r3
 8018ae2:	d1f9      	bne.n	8018ad8 <GUI__CompactPixelIndices+0x10>
 8018ae4:	2001      	movs	r0, #1
 8018ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aea:	4770      	bx	lr
 8018aec:	2a02      	cmp	r2, #2
 8018aee:	d011      	beq.n	8018b14 <GUI__CompactPixelIndices+0x4c>
 8018af0:	2a04      	cmp	r2, #4
 8018af2:	f000 809a 	beq.w	8018c2a <GUI__CompactPixelIndices+0x162>
 8018af6:	2a01      	cmp	r2, #1
 8018af8:	d03f      	beq.n	8018b7a <GUI__CompactPixelIndices+0xb2>
 8018afa:	4401      	add	r1, r0
 8018afc:	4603      	mov	r3, r0
 8018afe:	f850 2b04 	ldr.w	r2, [r0], #4
 8018b02:	f803 2b01 	strb.w	r2, [r3], #1
 8018b06:	4299      	cmp	r1, r3
 8018b08:	d1f9      	bne.n	8018afe <GUI__CompactPixelIndices+0x36>
 8018b0a:	e7eb      	b.n	8018ae4 <GUI__CompactPixelIndices+0x1c>
 8018b0c:	2000      	movs	r0, #0
 8018b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b12:	4770      	bx	lr
 8018b14:	f100 0210 	add.w	r2, r0, #16
 8018b18:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8018b1c:	2901      	cmp	r1, #1
 8018b1e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	d026      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018b26:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8018b2a:	2902      	cmp	r1, #2
 8018b2c:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8018b30:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8018b34:	ea43 0304 	orr.w	r3, r3, r4
 8018b38:	d01c      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018b3a:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8018b3e:	2903      	cmp	r1, #3
 8018b40:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8018b44:	f004 040c 	and.w	r4, r4, #12
 8018b48:	ea43 0304 	orr.w	r3, r3, r4
 8018b4c:	d012      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018b4e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8018b52:	3904      	subs	r1, #4
 8018b54:	f102 0210 	add.w	r2, r2, #16
 8018b58:	f004 0403 	and.w	r4, r4, #3
 8018b5c:	ea43 0304 	orr.w	r3, r3, r4
 8018b60:	f800 3b01 	strb.w	r3, [r0], #1
 8018b64:	d0be      	beq.n	8018ae4 <GUI__CompactPixelIndices+0x1c>
 8018b66:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8018b6a:	2901      	cmp	r1, #1
 8018b6c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	d1d8      	bne.n	8018b26 <GUI__CompactPixelIndices+0x5e>
 8018b74:	7003      	strb	r3, [r0, #0]
 8018b76:	2001      	movs	r0, #1
 8018b78:	e7b5      	b.n	8018ae6 <GUI__CompactPixelIndices+0x1e>
 8018b7a:	f100 0220 	add.w	r2, r0, #32
 8018b7e:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8018b82:	2901      	cmp	r1, #1
 8018b84:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8018b88:	b2db      	uxtb	r3, r3
 8018b8a:	d0f3      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018b8c:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 8018b90:	2902      	cmp	r1, #2
 8018b92:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8018b96:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8018b9a:	ea43 0304 	orr.w	r3, r3, r4
 8018b9e:	d0e9      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018ba0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8018ba4:	2903      	cmp	r1, #3
 8018ba6:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8018baa:	f004 0420 	and.w	r4, r4, #32
 8018bae:	ea43 0304 	orr.w	r3, r3, r4
 8018bb2:	d0df      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018bb4:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8018bb8:	2904      	cmp	r1, #4
 8018bba:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8018bbe:	f004 0410 	and.w	r4, r4, #16
 8018bc2:	ea43 0304 	orr.w	r3, r3, r4
 8018bc6:	d0d5      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018bc8:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8018bcc:	2905      	cmp	r1, #5
 8018bce:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018bd2:	f004 0408 	and.w	r4, r4, #8
 8018bd6:	ea43 0304 	orr.w	r3, r3, r4
 8018bda:	d0cb      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018bdc:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8018be0:	2906      	cmp	r1, #6
 8018be2:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8018be6:	f004 0404 	and.w	r4, r4, #4
 8018bea:	ea43 0304 	orr.w	r3, r3, r4
 8018bee:	d0c1      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018bf0:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8018bf4:	3907      	subs	r1, #7
 8018bf6:	f102 0220 	add.w	r2, r2, #32
 8018bfa:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8018bfe:	f004 0402 	and.w	r4, r4, #2
 8018c02:	ea43 0304 	orr.w	r3, r3, r4
 8018c06:	d0b5      	beq.n	8018b74 <GUI__CompactPixelIndices+0xac>
 8018c08:	f852 4c24 	ldr.w	r4, [r2, #-36]
 8018c0c:	2901      	cmp	r1, #1
 8018c0e:	f004 0401 	and.w	r4, r4, #1
 8018c12:	ea43 0304 	orr.w	r3, r3, r4
 8018c16:	f800 3b01 	strb.w	r3, [r0], #1
 8018c1a:	f852 3c20 	ldr.w	r3, [r2, #-32]
 8018c1e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8018c22:	b2db      	uxtb	r3, r3
 8018c24:	d1b2      	bne.n	8018b8c <GUI__CompactPixelIndices+0xc4>
 8018c26:	7003      	strb	r3, [r0, #0]
 8018c28:	e7a5      	b.n	8018b76 <GUI__CompactPixelIndices+0xae>
 8018c2a:	f100 0408 	add.w	r4, r0, #8
 8018c2e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8018c32:	2901      	cmp	r1, #1
 8018c34:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8018c38:	b2db      	uxtb	r3, r3
 8018c3a:	d013      	beq.n	8018c64 <GUI__CompactPixelIndices+0x19c>
 8018c3c:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8018c40:	3902      	subs	r1, #2
 8018c42:	f104 0408 	add.w	r4, r4, #8
 8018c46:	f002 020f 	and.w	r2, r2, #15
 8018c4a:	ea43 0302 	orr.w	r3, r3, r2
 8018c4e:	f800 3b01 	strb.w	r3, [r0], #1
 8018c52:	f43f af47 	beq.w	8018ae4 <GUI__CompactPixelIndices+0x1c>
 8018c56:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8018c5a:	2901      	cmp	r1, #1
 8018c5c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8018c60:	b2db      	uxtb	r3, r3
 8018c62:	d1eb      	bne.n	8018c3c <GUI__CompactPixelIndices+0x174>
 8018c64:	7003      	strb	r3, [r0, #0]
 8018c66:	4608      	mov	r0, r1
 8018c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c6c:	4770      	bx	lr
 8018c6e:	bf00      	nop

08018c70 <GUI__CompactPixelIndicesEx>:
 8018c70:	2a08      	cmp	r2, #8
 8018c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c76:	460c      	mov	r4, r1
 8018c78:	4605      	mov	r5, r0
 8018c7a:	681f      	ldr	r7, [r3, #0]
 8018c7c:	dd0c      	ble.n	8018c98 <GUI__CompactPixelIndicesEx+0x28>
 8018c7e:	2a10      	cmp	r2, #16
 8018c80:	dc21      	bgt.n	8018cc6 <GUI__CompactPixelIndicesEx+0x56>
 8018c82:	691e      	ldr	r6, [r3, #16]
 8018c84:	2e00      	cmp	r6, #0
 8018c86:	f000 8091 	beq.w	8018dac <GUI__CompactPixelIndicesEx+0x13c>
 8018c8a:	4622      	mov	r2, r4
 8018c8c:	4629      	mov	r1, r5
 8018c8e:	2302      	movs	r3, #2
 8018c90:	47b0      	blx	r6
 8018c92:	2001      	movs	r0, #1
 8018c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c98:	3a01      	subs	r2, #1
 8018c9a:	2a07      	cmp	r2, #7
 8018c9c:	d810      	bhi.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>
 8018c9e:	e8df f002 	tbb	[pc, r2]
 8018ca2:	5104      	.short	0x5104
 8018ca4:	0f0f770f 	.word	0x0f0f770f
 8018ca8:	9a0f      	.short	0x9a0f
 8018caa:	f100 0820 	add.w	r8, r0, #32
 8018cae:	f858 0c20 	ldr.w	r0, [r8, #-32]
 8018cb2:	47b8      	blx	r7
 8018cb4:	2c01      	cmp	r4, #1
 8018cb6:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8018cba:	b2c6      	uxtb	r6, r0
 8018cbc:	d106      	bne.n	8018ccc <GUI__CompactPixelIndicesEx+0x5c>
 8018cbe:	702e      	strb	r6, [r5, #0]
 8018cc0:	2001      	movs	r0, #1
 8018cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc6:	2000      	movs	r0, #0
 8018cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ccc:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 8018cd0:	47b8      	blx	r7
 8018cd2:	2c02      	cmp	r4, #2
 8018cd4:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8018cd8:	b2c6      	uxtb	r6, r0
 8018cda:	d0f0      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018cdc:	f858 0c18 	ldr.w	r0, [r8, #-24]
 8018ce0:	47b8      	blx	r7
 8018ce2:	2c03      	cmp	r4, #3
 8018ce4:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8018ce8:	b2c6      	uxtb	r6, r0
 8018cea:	d0e8      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018cec:	f858 0c14 	ldr.w	r0, [r8, #-20]
 8018cf0:	47b8      	blx	r7
 8018cf2:	2c04      	cmp	r4, #4
 8018cf4:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8018cf8:	b2c6      	uxtb	r6, r0
 8018cfa:	d0e0      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018cfc:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8018d00:	47b8      	blx	r7
 8018d02:	2c05      	cmp	r4, #5
 8018d04:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8018d08:	b2c6      	uxtb	r6, r0
 8018d0a:	d0d8      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d0c:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8018d10:	47b8      	blx	r7
 8018d12:	2c06      	cmp	r4, #6
 8018d14:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8018d18:	b2c6      	uxtb	r6, r0
 8018d1a:	d0d0      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d1c:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8018d20:	47b8      	blx	r7
 8018d22:	2c07      	cmp	r4, #7
 8018d24:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 8018d28:	b2c6      	uxtb	r6, r0
 8018d2a:	d0c8      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d2c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8018d30:	f108 0820 	add.w	r8, r8, #32
 8018d34:	47b8      	blx	r7
 8018d36:	3c08      	subs	r4, #8
 8018d38:	ea40 0006 	orr.w	r0, r0, r6
 8018d3c:	f805 0b01 	strb.w	r0, [r5], #1
 8018d40:	d1b5      	bne.n	8018cae <GUI__CompactPixelIndicesEx+0x3e>
 8018d42:	e7bd      	b.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>
 8018d44:	f100 0810 	add.w	r8, r0, #16
 8018d48:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8018d4c:	47b8      	blx	r7
 8018d4e:	2c01      	cmp	r4, #1
 8018d50:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8018d54:	b2c6      	uxtb	r6, r0
 8018d56:	d0b2      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d58:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 8018d5c:	47b8      	blx	r7
 8018d5e:	2c02      	cmp	r4, #2
 8018d60:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8018d64:	b2c6      	uxtb	r6, r0
 8018d66:	d0aa      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d68:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8018d6c:	47b8      	blx	r7
 8018d6e:	2c03      	cmp	r4, #3
 8018d70:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8018d74:	b2c6      	uxtb	r6, r0
 8018d76:	d0a2      	beq.n	8018cbe <GUI__CompactPixelIndicesEx+0x4e>
 8018d78:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8018d7c:	f108 0810 	add.w	r8, r8, #16
 8018d80:	47b8      	blx	r7
 8018d82:	3c04      	subs	r4, #4
 8018d84:	ea40 0006 	orr.w	r0, r0, r6
 8018d88:	f805 0b01 	strb.w	r0, [r5], #1
 8018d8c:	d1dc      	bne.n	8018d48 <GUI__CompactPixelIndicesEx+0xd8>
 8018d8e:	e797      	b.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>
 8018d90:	f100 0808 	add.w	r8, r0, #8
 8018d94:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8018d98:	47b8      	blx	r7
 8018d9a:	2c01      	cmp	r4, #1
 8018d9c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018da0:	b2c6      	uxtb	r6, r0
 8018da2:	d10c      	bne.n	8018dbe <GUI__CompactPixelIndicesEx+0x14e>
 8018da4:	702e      	strb	r6, [r5, #0]
 8018da6:	4620      	mov	r0, r4
 8018da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dac:	1e86      	subs	r6, r0, #2
 8018dae:	f855 0b04 	ldr.w	r0, [r5], #4
 8018db2:	47b8      	blx	r7
 8018db4:	3c01      	subs	r4, #1
 8018db6:	f826 0f02 	strh.w	r0, [r6, #2]!
 8018dba:	d1f8      	bne.n	8018dae <GUI__CompactPixelIndicesEx+0x13e>
 8018dbc:	e780      	b.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>
 8018dbe:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8018dc2:	f108 0808 	add.w	r8, r8, #8
 8018dc6:	47b8      	blx	r7
 8018dc8:	3c02      	subs	r4, #2
 8018dca:	ea40 0006 	orr.w	r0, r0, r6
 8018dce:	f805 0b01 	strb.w	r0, [r5], #1
 8018dd2:	d1df      	bne.n	8018d94 <GUI__CompactPixelIndicesEx+0x124>
 8018dd4:	e774      	b.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>
 8018dd6:	691e      	ldr	r6, [r3, #16]
 8018dd8:	b13e      	cbz	r6, 8018dea <GUI__CompactPixelIndicesEx+0x17a>
 8018dda:	4628      	mov	r0, r5
 8018ddc:	4622      	mov	r2, r4
 8018dde:	2301      	movs	r3, #1
 8018de0:	4629      	mov	r1, r5
 8018de2:	47b0      	blx	r6
 8018de4:	2001      	movs	r0, #1
 8018de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dea:	1e6e      	subs	r6, r5, #1
 8018dec:	f855 0b04 	ldr.w	r0, [r5], #4
 8018df0:	47b8      	blx	r7
 8018df2:	3c01      	subs	r4, #1
 8018df4:	f806 0f01 	strb.w	r0, [r6, #1]!
 8018df8:	d1f8      	bne.n	8018dec <GUI__CompactPixelIndicesEx+0x17c>
 8018dfa:	e761      	b.n	8018cc0 <GUI__CompactPixelIndicesEx+0x50>

08018dfc <GUI__ExpandPixelIndices>:
 8018dfc:	2a08      	cmp	r2, #8
 8018dfe:	dd0c      	ble.n	8018e1a <GUI__ExpandPixelIndices+0x1e>
 8018e00:	2a10      	cmp	r2, #16
 8018e02:	dc31      	bgt.n	8018e68 <GUI__ExpandPixelIndices+0x6c>
 8018e04:	0049      	lsls	r1, r1, #1
 8018e06:	4408      	add	r0, r1
 8018e08:	1843      	adds	r3, r0, r1
 8018e0a:	1a41      	subs	r1, r0, r1
 8018e0c:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 8018e10:	4288      	cmp	r0, r1
 8018e12:	f843 2d04 	str.w	r2, [r3, #-4]!
 8018e16:	d1f9      	bne.n	8018e0c <GUI__ExpandPixelIndices+0x10>
 8018e18:	4770      	bx	lr
 8018e1a:	3a01      	subs	r2, #1
 8018e1c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e22:	2a07      	cmp	r2, #7
 8018e24:	d81f      	bhi.n	8018e66 <GUI__ExpandPixelIndices+0x6a>
 8018e26:	e8df f002 	tbb	[pc, r2]
 8018e2a:	0443      	.short	0x0443
 8018e2c:	20202929 	.word	0x20202929
 8018e30:	2020      	.short	0x2020
 8018e32:	1e4a      	subs	r2, r1, #1
 8018e34:	424c      	negs	r4, r1
 8018e36:	f04f 0e03 	mov.w	lr, #3
 8018e3a:	eb00 00a2 	add.w	r0, r0, r2, asr #2
 8018e3e:	ea04 010e 	and.w	r1, r4, lr
 8018e42:	e000      	b.n	8018e46 <GUI__ExpandPixelIndices+0x4a>
 8018e44:	3a01      	subs	r2, #1
 8018e46:	004e      	lsls	r6, r1, #1
 8018e48:	7804      	ldrb	r4, [r0, #0]
 8018e4a:	3101      	adds	r1, #1
 8018e4c:	fa0e f506 	lsl.w	r5, lr, r6
 8018e50:	f021 0703 	bic.w	r7, r1, #3
 8018e54:	eba0 00a1 	sub.w	r0, r0, r1, asr #2
 8018e58:	402c      	ands	r4, r5
 8018e5a:	4139      	asrs	r1, r7
 8018e5c:	4134      	asrs	r4, r6
 8018e5e:	f843 4d04 	str.w	r4, [r3, #-4]!
 8018e62:	2a00      	cmp	r2, #0
 8018e64:	d1ee      	bne.n	8018e44 <GUI__ExpandPixelIndices+0x48>
 8018e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e68:	4770      	bx	lr
 8018e6a:	4408      	add	r0, r1
 8018e6c:	1a41      	subs	r1, r0, r1
 8018e6e:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 8018e72:	4288      	cmp	r0, r1
 8018e74:	f843 2d04 	str.w	r2, [r3, #-4]!
 8018e78:	d1f9      	bne.n	8018e6e <GUI__ExpandPixelIndices+0x72>
 8018e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e7c:	1e4a      	subs	r2, r1, #1
 8018e7e:	f04f 0e0f 	mov.w	lr, #15
 8018e82:	f001 0101 	and.w	r1, r1, #1
 8018e86:	eb00 0062 	add.w	r0, r0, r2, asr #1
 8018e8a:	e000      	b.n	8018e8e <GUI__ExpandPixelIndices+0x92>
 8018e8c:	3a01      	subs	r2, #1
 8018e8e:	008e      	lsls	r6, r1, #2
 8018e90:	7804      	ldrb	r4, [r0, #0]
 8018e92:	3101      	adds	r1, #1
 8018e94:	fa0e f506 	lsl.w	r5, lr, r6
 8018e98:	f021 0701 	bic.w	r7, r1, #1
 8018e9c:	eba0 0061 	sub.w	r0, r0, r1, asr #1
 8018ea0:	402c      	ands	r4, r5
 8018ea2:	4139      	asrs	r1, r7
 8018ea4:	4134      	asrs	r4, r6
 8018ea6:	f843 4d04 	str.w	r4, [r3, #-4]!
 8018eaa:	2a00      	cmp	r2, #0
 8018eac:	d1ee      	bne.n	8018e8c <GUI__ExpandPixelIndices+0x90>
 8018eae:	e7da      	b.n	8018e66 <GUI__ExpandPixelIndices+0x6a>
 8018eb0:	424c      	negs	r4, r1
 8018eb2:	1e4a      	subs	r2, r1, #1
 8018eb4:	2701      	movs	r7, #1
 8018eb6:	f004 0407 	and.w	r4, r4, #7
 8018eba:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 8018ebe:	e000      	b.n	8018ec2 <GUI__ExpandPixelIndices+0xc6>
 8018ec0:	3a01      	subs	r2, #1
 8018ec2:	7806      	ldrb	r6, [r0, #0]
 8018ec4:	fa07 f104 	lsl.w	r1, r7, r4
 8018ec8:	1c65      	adds	r5, r4, #1
 8018eca:	4031      	ands	r1, r6
 8018ecc:	f025 0607 	bic.w	r6, r5, #7
 8018ed0:	eba0 00e5 	sub.w	r0, r0, r5, asr #3
 8018ed4:	4121      	asrs	r1, r4
 8018ed6:	fa45 f406 	asr.w	r4, r5, r6
 8018eda:	f843 1d04 	str.w	r1, [r3, #-4]!
 8018ede:	2a00      	cmp	r2, #0
 8018ee0:	d1ee      	bne.n	8018ec0 <GUI__ExpandPixelIndices+0xc4>
 8018ee2:	e7c0      	b.n	8018e66 <GUI__ExpandPixelIndices+0x6a>

08018ee4 <GUI__ExpandPixelIndicesEx>:
 8018ee4:	2900      	cmp	r1, #0
 8018ee6:	dd2a      	ble.n	8018f3e <GUI__ExpandPixelIndicesEx+0x5a>
 8018ee8:	2a08      	cmp	r2, #8
 8018eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018eee:	4604      	mov	r4, r0
 8018ef0:	685d      	ldr	r5, [r3, #4]
 8018ef2:	dd03      	ble.n	8018efc <GUI__ExpandPixelIndicesEx+0x18>
 8018ef4:	2a10      	cmp	r2, #16
 8018ef6:	dd0c      	ble.n	8018f12 <GUI__ExpandPixelIndicesEx+0x2e>
 8018ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018efc:	1e53      	subs	r3, r2, #1
 8018efe:	2b07      	cmp	r3, #7
 8018f00:	d805      	bhi.n	8018f0e <GUI__ExpandPixelIndicesEx+0x2a>
 8018f02:	e8df f003 	tbb	[pc, r3]
 8018f06:	512a      	.short	0x512a
 8018f08:	04047b04 	.word	0x04047b04
 8018f0c:	1d04      	.short	0x1d04
 8018f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f12:	695e      	ldr	r6, [r3, #20]
 8018f14:	b136      	cbz	r6, 8018f24 <GUI__ExpandPixelIndicesEx+0x40>
 8018f16:	460a      	mov	r2, r1
 8018f18:	46b4      	mov	ip, r6
 8018f1a:	4621      	mov	r1, r4
 8018f1c:	2302      	movs	r3, #2
 8018f1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f22:	4760      	bx	ip
 8018f24:	0049      	lsls	r1, r1, #1
 8018f26:	440c      	add	r4, r1
 8018f28:	1866      	adds	r6, r4, r1
 8018f2a:	1a67      	subs	r7, r4, r1
 8018f2c:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 8018f30:	47a8      	blx	r5
 8018f32:	f846 0d04 	str.w	r0, [r6, #-4]!
 8018f36:	42bc      	cmp	r4, r7
 8018f38:	d1f8      	bne.n	8018f2c <GUI__ExpandPixelIndicesEx+0x48>
 8018f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f3e:	4770      	bx	lr
 8018f40:	1866      	adds	r6, r4, r1
 8018f42:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018f46:	1a77      	subs	r7, r6, r1
 8018f48:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8018f4c:	47a8      	blx	r5
 8018f4e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8018f52:	42be      	cmp	r6, r7
 8018f54:	d1f8      	bne.n	8018f48 <GUI__ExpandPixelIndicesEx+0x64>
 8018f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f5a:	1e4f      	subs	r7, r1, #1
 8018f5c:	2680      	movs	r6, #128	; 0x80
 8018f5e:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8018f62:	10fb      	asrs	r3, r7, #3
 8018f64:	f007 0807 	and.w	r8, r7, #7
 8018f68:	448a      	add	sl, r1
 8018f6a:	fa46 f608 	asr.w	r6, r6, r8
 8018f6e:	1e59      	subs	r1, r3, #1
 8018f70:	f814 9003 	ldrb.w	r9, [r4, r3]
 8018f74:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8018f78:	b2f6      	uxtb	r6, r6
 8018f7a:	440c      	add	r4, r1
 8018f7c:	ea06 0009 	and.w	r0, r6, r9
 8018f80:	f1c8 0307 	rsb	r3, r8, #7
 8018f84:	0076      	lsls	r6, r6, #1
 8018f86:	4118      	asrs	r0, r3
 8018f88:	47a8      	blx	r5
 8018f8a:	f84a 0904 	str.w	r0, [sl], #-4
 8018f8e:	f1b8 0f00 	cmp.w	r8, #0
 8018f92:	d15f      	bne.n	8019054 <GUI__ExpandPixelIndicesEx+0x170>
 8018f94:	f894 9000 	ldrb.w	r9, [r4]
 8018f98:	2601      	movs	r6, #1
 8018f9a:	3c01      	subs	r4, #1
 8018f9c:	f04f 0807 	mov.w	r8, #7
 8018fa0:	2f00      	cmp	r7, #0
 8018fa2:	d0b4      	beq.n	8018f0e <GUI__ExpandPixelIndicesEx+0x2a>
 8018fa4:	3f01      	subs	r7, #1
 8018fa6:	e7e9      	b.n	8018f7c <GUI__ExpandPixelIndicesEx+0x98>
 8018fa8:	1e4f      	subs	r7, r1, #1
 8018faa:	26c0      	movs	r6, #192	; 0xc0
 8018fac:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8018fb0:	f007 0903 	and.w	r9, r7, #3
 8018fb4:	10bb      	asrs	r3, r7, #2
 8018fb6:	448a      	add	sl, r1
 8018fb8:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8018fbc:	1e59      	subs	r1, r3, #1
 8018fbe:	f814 8003 	ldrb.w	r8, [r4, r3]
 8018fc2:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8018fc6:	4106      	asrs	r6, r0
 8018fc8:	440c      	add	r4, r1
 8018fca:	b2f6      	uxtb	r6, r6
 8018fcc:	ea06 0308 	and.w	r3, r6, r8
 8018fd0:	f1c0 0006 	rsb	r0, r0, #6
 8018fd4:	00b6      	lsls	r6, r6, #2
 8018fd6:	fa43 f000 	asr.w	r0, r3, r0
 8018fda:	47a8      	blx	r5
 8018fdc:	f84a 0904 	str.w	r0, [sl], #-4
 8018fe0:	f1b9 0f00 	cmp.w	r9, #0
 8018fe4:	d13e      	bne.n	8019064 <GUI__ExpandPixelIndicesEx+0x180>
 8018fe6:	2603      	movs	r6, #3
 8018fe8:	f894 8000 	ldrb.w	r8, [r4]
 8018fec:	3c01      	subs	r4, #1
 8018fee:	46b1      	mov	r9, r6
 8018ff0:	2f00      	cmp	r7, #0
 8018ff2:	d08c      	beq.n	8018f0e <GUI__ExpandPixelIndicesEx+0x2a>
 8018ff4:	3f01      	subs	r7, #1
 8018ff6:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8018ffa:	e7e7      	b.n	8018fcc <GUI__ExpandPixelIndicesEx+0xe8>
 8018ffc:	1e4f      	subs	r7, r1, #1
 8018ffe:	26f0      	movs	r6, #240	; 0xf0
 8019000:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8019004:	f007 0901 	and.w	r9, r7, #1
 8019008:	107b      	asrs	r3, r7, #1
 801900a:	448a      	add	sl, r1
 801900c:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8019010:	1e59      	subs	r1, r3, #1
 8019012:	f814 8003 	ldrb.w	r8, [r4, r3]
 8019016:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 801901a:	4106      	asrs	r6, r0
 801901c:	440c      	add	r4, r1
 801901e:	b2f6      	uxtb	r6, r6
 8019020:	ea06 0308 	and.w	r3, r6, r8
 8019024:	f1c0 0004 	rsb	r0, r0, #4
 8019028:	0136      	lsls	r6, r6, #4
 801902a:	fa43 f000 	asr.w	r0, r3, r0
 801902e:	47a8      	blx	r5
 8019030:	f84a 0904 	str.w	r0, [sl], #-4
 8019034:	f1b9 0f00 	cmp.w	r9, #0
 8019038:	d110      	bne.n	801905c <GUI__ExpandPixelIndicesEx+0x178>
 801903a:	f894 8000 	ldrb.w	r8, [r4]
 801903e:	260f      	movs	r6, #15
 8019040:	3c01      	subs	r4, #1
 8019042:	f04f 0901 	mov.w	r9, #1
 8019046:	2f00      	cmp	r7, #0
 8019048:	f43f af61 	beq.w	8018f0e <GUI__ExpandPixelIndicesEx+0x2a>
 801904c:	3f01      	subs	r7, #1
 801904e:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8019052:	e7e5      	b.n	8019020 <GUI__ExpandPixelIndicesEx+0x13c>
 8019054:	f108 38ff 	add.w	r8, r8, #4294967295
 8019058:	b2f6      	uxtb	r6, r6
 801905a:	e7a1      	b.n	8018fa0 <GUI__ExpandPixelIndicesEx+0xbc>
 801905c:	b2f6      	uxtb	r6, r6
 801905e:	f04f 0900 	mov.w	r9, #0
 8019062:	e7f0      	b.n	8019046 <GUI__ExpandPixelIndicesEx+0x162>
 8019064:	f109 39ff 	add.w	r9, r9, #4294967295
 8019068:	b2f6      	uxtb	r6, r6
 801906a:	e7c1      	b.n	8018ff0 <GUI__ExpandPixelIndicesEx+0x10c>

0801906c <GUI__HandleEOLine>:
 801906c:	b510      	push	{r4, lr}
 801906e:	4604      	mov	r4, r0
 8019070:	b082      	sub	sp, #8
 8019072:	6823      	ldr	r3, [r4, #0]
 8019074:	a802      	add	r0, sp, #8
 8019076:	f840 3d04 	str.w	r3, [r0, #-4]!
 801907a:	f7fe ff77 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 801907e:	b148      	cbz	r0, 8019094 <GUI__HandleEOLine+0x28>
 8019080:	280a      	cmp	r0, #10
 8019082:	d002      	beq.n	801908a <GUI__HandleEOLine+0x1e>
 8019084:	2000      	movs	r0, #0
 8019086:	b002      	add	sp, #8
 8019088:	bd10      	pop	{r4, pc}
 801908a:	9b01      	ldr	r3, [sp, #4]
 801908c:	2000      	movs	r0, #0
 801908e:	6023      	str	r3, [r4, #0]
 8019090:	b002      	add	sp, #8
 8019092:	bd10      	pop	{r4, pc}
 8019094:	2001      	movs	r0, #1
 8019096:	b002      	add	sp, #8
 8019098:	bd10      	pop	{r4, pc}
 801909a:	bf00      	nop

0801909c <GUI__IntersectRect>:
 801909c:	f9b1 3000 	ldrsh.w	r3, [r1]
 80190a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80190a4:	429a      	cmp	r2, r3
 80190a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80190aa:	bfb8      	it	lt
 80190ac:	8003      	strhlt	r3, [r0, #0]
 80190ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80190b2:	429a      	cmp	r2, r3
 80190b4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80190b8:	bfb8      	it	lt
 80190ba:	8043      	strhlt	r3, [r0, #2]
 80190bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80190c6:	bfc8      	it	gt
 80190c8:	8083      	strhgt	r3, [r0, #4]
 80190ca:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80190ce:	429a      	cmp	r2, r3
 80190d0:	bfc8      	it	gt
 80190d2:	80c3      	strhgt	r3, [r0, #6]
 80190d4:	4770      	bx	lr
 80190d6:	bf00      	nop

080190d8 <GUI__IntersectRects>:
 80190d8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80190dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190de:	f9b1 4000 	ldrsh.w	r4, [r1]
 80190e2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80190e6:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80190ea:	42a3      	cmp	r3, r4
 80190ec:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80190f0:	bfb8      	it	lt
 80190f2:	4623      	movlt	r3, r4
 80190f4:	45ae      	cmp	lr, r5
 80190f6:	4674      	mov	r4, lr
 80190f8:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80190fc:	bfb8      	it	lt
 80190fe:	462c      	movlt	r4, r5
 8019100:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8019104:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8019108:	4639      	mov	r1, r7
 801910a:	42af      	cmp	r7, r5
 801910c:	8003      	strh	r3, [r0, #0]
 801910e:	8044      	strh	r4, [r0, #2]
 8019110:	bfa8      	it	ge
 8019112:	4629      	movge	r1, r5
 8019114:	42b2      	cmp	r2, r6
 8019116:	bfa8      	it	ge
 8019118:	4632      	movge	r2, r6
 801911a:	8081      	strh	r1, [r0, #4]
 801911c:	4294      	cmp	r4, r2
 801911e:	bfd8      	it	le
 8019120:	428b      	cmple	r3, r1
 8019122:	80c2      	strh	r2, [r0, #6]
 8019124:	bfcc      	ite	gt
 8019126:	2301      	movgt	r3, #1
 8019128:	2300      	movle	r3, #0
 801912a:	f083 0001 	eor.w	r0, r3, #1
 801912e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019130 <GUI__memset>:
 8019130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019132:	4606      	mov	r6, r0
 8019134:	b14a      	cbz	r2, 801914a <GUI__memset+0x1a>
 8019136:	0784      	lsls	r4, r0, #30
 8019138:	b2c9      	uxtb	r1, r1
 801913a:	d008      	beq.n	801914e <GUI__memset+0x1e>
 801913c:	e001      	b.n	8019142 <GUI__memset+0x12>
 801913e:	0783      	lsls	r3, r0, #30
 8019140:	d005      	beq.n	801914e <GUI__memset+0x1e>
 8019142:	3a01      	subs	r2, #1
 8019144:	f800 1b01 	strb.w	r1, [r0], #1
 8019148:	d1f9      	bne.n	801913e <GUI__memset+0xe>
 801914a:	4630      	mov	r0, r6
 801914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801914e:	0897      	lsrs	r7, r2, #2
 8019150:	463b      	mov	r3, r7
 8019152:	b34f      	cbz	r7, 80191a8 <GUI__memset+0x78>
 8019154:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 8019158:	2f03      	cmp	r7, #3
 801915a:	f002 0203 	and.w	r2, r2, #3
 801915e:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8019162:	d915      	bls.n	8019190 <GUI__memset+0x60>
 8019164:	f100 0310 	add.w	r3, r0, #16
 8019168:	463d      	mov	r5, r7
 801916a:	3d04      	subs	r5, #4
 801916c:	f843 4c10 	str.w	r4, [r3, #-16]
 8019170:	f843 4c0c 	str.w	r4, [r3, #-12]
 8019174:	3310      	adds	r3, #16
 8019176:	2d03      	cmp	r5, #3
 8019178:	f843 4c18 	str.w	r4, [r3, #-24]
 801917c:	f843 4c14 	str.w	r4, [r3, #-20]
 8019180:	dcf3      	bgt.n	801916a <GUI__memset+0x3a>
 8019182:	3f04      	subs	r7, #4
 8019184:	08bb      	lsrs	r3, r7, #2
 8019186:	1c5d      	adds	r5, r3, #1
 8019188:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 801918c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019190:	b143      	cbz	r3, 80191a4 <GUI__memset+0x74>
 8019192:	2b01      	cmp	r3, #1
 8019194:	6004      	str	r4, [r0, #0]
 8019196:	d003      	beq.n	80191a0 <GUI__memset+0x70>
 8019198:	2b02      	cmp	r3, #2
 801919a:	6044      	str	r4, [r0, #4]
 801919c:	bf18      	it	ne
 801919e:	6084      	strne	r4, [r0, #8]
 80191a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80191a4:	2a00      	cmp	r2, #0
 80191a6:	d0d0      	beq.n	801914a <GUI__memset+0x1a>
 80191a8:	f00b fce8 	bl	8024b7c <memset>
 80191ac:	4630      	mov	r0, r6
 80191ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080191b0 <GUI__memset16>:
 80191b0:	b470      	push	{r4, r5, r6}
 80191b2:	0784      	lsls	r4, r0, #30
 80191b4:	d502      	bpl.n	80191bc <GUI__memset16+0xc>
 80191b6:	8001      	strh	r1, [r0, #0]
 80191b8:	3a01      	subs	r2, #1
 80191ba:	3002      	adds	r0, #2
 80191bc:	0856      	lsrs	r6, r2, #1
 80191be:	d00d      	beq.n	80191dc <GUI__memset16+0x2c>
 80191c0:	2e03      	cmp	r6, #3
 80191c2:	4633      	mov	r3, r6
 80191c4:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 80191c8:	d80d      	bhi.n	80191e6 <GUI__memset16+0x36>
 80191ca:	2b01      	cmp	r3, #1
 80191cc:	6004      	str	r4, [r0, #0]
 80191ce:	d003      	beq.n	80191d8 <GUI__memset16+0x28>
 80191d0:	2b02      	cmp	r3, #2
 80191d2:	6044      	str	r4, [r0, #4]
 80191d4:	bf18      	it	ne
 80191d6:	6084      	strne	r4, [r0, #8]
 80191d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80191dc:	07d3      	lsls	r3, r2, #31
 80191de:	bc70      	pop	{r4, r5, r6}
 80191e0:	bf48      	it	mi
 80191e2:	8001      	strhmi	r1, [r0, #0]
 80191e4:	4770      	bx	lr
 80191e6:	f100 0310 	add.w	r3, r0, #16
 80191ea:	4635      	mov	r5, r6
 80191ec:	3d04      	subs	r5, #4
 80191ee:	f843 4c10 	str.w	r4, [r3, #-16]
 80191f2:	f843 4c0c 	str.w	r4, [r3, #-12]
 80191f6:	3310      	adds	r3, #16
 80191f8:	2d03      	cmp	r5, #3
 80191fa:	f843 4c18 	str.w	r4, [r3, #-24]
 80191fe:	f843 4c14 	str.w	r4, [r3, #-20]
 8019202:	dcf3      	bgt.n	80191ec <GUI__memset16+0x3c>
 8019204:	3e04      	subs	r6, #4
 8019206:	08b3      	lsrs	r3, r6, #2
 8019208:	1c5d      	adds	r5, r3, #1
 801920a:	ebb6 0383 	subs.w	r3, r6, r3, lsl #2
 801920e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019212:	d1da      	bne.n	80191ca <GUI__memset16+0x1a>
 8019214:	e7e2      	b.n	80191dc <GUI__memset16+0x2c>
 8019216:	bf00      	nop

08019218 <GUI__sqrt32>:
 8019218:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801921c:	bf2b      	itete	cs
 801921e:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8019222:	2300      	movcc	r3, #0
 8019224:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8019228:	2200      	movcc	r2, #0
 801922a:	085b      	lsrs	r3, r3, #1
 801922c:	1a80      	subs	r0, r0, r2
 801922e:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8019232:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 8019236:	4290      	cmp	r0, r2
 8019238:	bf2c      	ite	cs
 801923a:	460b      	movcs	r3, r1
 801923c:	2200      	movcc	r2, #0
 801923e:	085b      	lsrs	r3, r3, #1
 8019240:	1a82      	subs	r2, r0, r2
 8019242:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 8019246:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 801924a:	428a      	cmp	r2, r1
 801924c:	bf2c      	ite	cs
 801924e:	4603      	movcs	r3, r0
 8019250:	2100      	movcc	r1, #0
 8019252:	085b      	lsrs	r3, r3, #1
 8019254:	1a50      	subs	r0, r2, r1
 8019256:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 801925a:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 801925e:	4290      	cmp	r0, r2
 8019260:	bf2c      	ite	cs
 8019262:	460b      	movcs	r3, r1
 8019264:	2200      	movcc	r2, #0
 8019266:	085b      	lsrs	r3, r3, #1
 8019268:	1a81      	subs	r1, r0, r2
 801926a:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 801926e:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 8019272:	4291      	cmp	r1, r2
 8019274:	bf2c      	ite	cs
 8019276:	4603      	movcs	r3, r0
 8019278:	2200      	movcc	r2, #0
 801927a:	085b      	lsrs	r3, r3, #1
 801927c:	1a8a      	subs	r2, r1, r2
 801927e:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 8019282:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 8019286:	428a      	cmp	r2, r1
 8019288:	bf2c      	ite	cs
 801928a:	4603      	movcs	r3, r0
 801928c:	2100      	movcc	r1, #0
 801928e:	085b      	lsrs	r3, r3, #1
 8019290:	1a50      	subs	r0, r2, r1
 8019292:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8019296:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 801929a:	4290      	cmp	r0, r2
 801929c:	bf2c      	ite	cs
 801929e:	460b      	movcs	r3, r1
 80192a0:	2200      	movcc	r2, #0
 80192a2:	085b      	lsrs	r3, r3, #1
 80192a4:	1a81      	subs	r1, r0, r2
 80192a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80192aa:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 80192ae:	4291      	cmp	r1, r2
 80192b0:	bf2c      	ite	cs
 80192b2:	4603      	movcs	r3, r0
 80192b4:	2200      	movcc	r2, #0
 80192b6:	085b      	lsrs	r3, r3, #1
 80192b8:	1a8a      	subs	r2, r1, r2
 80192ba:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 80192be:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 80192c2:	428a      	cmp	r2, r1
 80192c4:	bf2c      	ite	cs
 80192c6:	4603      	movcs	r3, r0
 80192c8:	2100      	movcc	r1, #0
 80192ca:	085b      	lsrs	r3, r3, #1
 80192cc:	1a50      	subs	r0, r2, r1
 80192ce:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80192d2:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 80192d6:	4290      	cmp	r0, r2
 80192d8:	bf2c      	ite	cs
 80192da:	460b      	movcs	r3, r1
 80192dc:	2200      	movcc	r2, #0
 80192de:	085b      	lsrs	r3, r3, #1
 80192e0:	1a81      	subs	r1, r0, r2
 80192e2:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80192e6:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 80192ea:	4291      	cmp	r1, r2
 80192ec:	bf2c      	ite	cs
 80192ee:	4603      	movcs	r3, r0
 80192f0:	2200      	movcc	r2, #0
 80192f2:	085b      	lsrs	r3, r3, #1
 80192f4:	1a8a      	subs	r2, r1, r2
 80192f6:	f503 7180 	add.w	r1, r3, #256	; 0x100
 80192fa:	f503 7000 	add.w	r0, r3, #512	; 0x200
 80192fe:	428a      	cmp	r2, r1
 8019300:	bf2c      	ite	cs
 8019302:	4603      	movcs	r3, r0
 8019304:	2100      	movcc	r1, #0
 8019306:	085b      	lsrs	r3, r3, #1
 8019308:	1a50      	subs	r0, r2, r1
 801930a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801930e:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8019312:	4290      	cmp	r0, r2
 8019314:	bf2c      	ite	cs
 8019316:	460b      	movcs	r3, r1
 8019318:	2200      	movcc	r2, #0
 801931a:	085b      	lsrs	r3, r3, #1
 801931c:	1a81      	subs	r1, r0, r2
 801931e:	f103 0210 	add.w	r2, r3, #16
 8019322:	f103 0020 	add.w	r0, r3, #32
 8019326:	4291      	cmp	r1, r2
 8019328:	bf2c      	ite	cs
 801932a:	4603      	movcs	r3, r0
 801932c:	2200      	movcc	r2, #0
 801932e:	085b      	lsrs	r3, r3, #1
 8019330:	1a8a      	subs	r2, r1, r2
 8019332:	1d19      	adds	r1, r3, #4
 8019334:	f103 0008 	add.w	r0, r3, #8
 8019338:	428a      	cmp	r2, r1
 801933a:	bf2c      	ite	cs
 801933c:	4603      	movcs	r3, r0
 801933e:	2100      	movcc	r1, #0
 8019340:	085b      	lsrs	r3, r3, #1
 8019342:	1a52      	subs	r2, r2, r1
 8019344:	1c58      	adds	r0, r3, #1
 8019346:	1c99      	adds	r1, r3, #2
 8019348:	4290      	cmp	r0, r2
 801934a:	bf94      	ite	ls
 801934c:	4608      	movls	r0, r1
 801934e:	4618      	movhi	r0, r3
 8019350:	0840      	lsrs	r0, r0, #1
 8019352:	4770      	bx	lr

08019354 <GUI__SinHQ>:
 8019354:	2800      	cmp	r0, #0
 8019356:	b4f0      	push	{r4, r5, r6, r7}
 8019358:	db3f      	blt.n	80193da <GUI__SinHQ+0x86>
 801935a:	f04f 36ff 	mov.w	r6, #4294967295
 801935e:	2101      	movs	r1, #1
 8019360:	4b20      	ldr	r3, [pc, #128]	; (80193e4 <GUI__SinHQ+0x90>)
 8019362:	17c5      	asrs	r5, r0, #31
 8019364:	4c20      	ldr	r4, [pc, #128]	; (80193e8 <GUI__SinHQ+0x94>)
 8019366:	fb83 2300 	smull	r2, r3, r3, r0
 801936a:	4a20      	ldr	r2, [pc, #128]	; (80193ec <GUI__SinHQ+0x98>)
 801936c:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 8019370:	fb04 0313 	mls	r3, r4, r3, r0
 8019374:	4293      	cmp	r3, r2
 8019376:	dd04      	ble.n	8019382 <GUI__SinHQ+0x2e>
 8019378:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 801937c:	4631      	mov	r1, r6
 801937e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019382:	4a1b      	ldr	r2, [pc, #108]	; (80193f0 <GUI__SinHQ+0x9c>)
 8019384:	4293      	cmp	r3, r2
 8019386:	dd03      	ble.n	8019390 <GUI__SinHQ+0x3c>
 8019388:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 801938c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8019390:	4c18      	ldr	r4, [pc, #96]	; (80193f4 <GUI__SinHQ+0xa0>)
 8019392:	17da      	asrs	r2, r3, #31
 8019394:	fb84 5003 	smull	r5, r0, r4, r3
 8019398:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 801939c:	2a5a      	cmp	r2, #90	; 0x5a
 801939e:	d015      	beq.n	80193cc <GUI__SinHQ+0x78>
 80193a0:	1c57      	adds	r7, r2, #1
 80193a2:	4d15      	ldr	r5, [pc, #84]	; (80193f8 <GUI__SinHQ+0xa4>)
 80193a4:	4e15      	ldr	r6, [pc, #84]	; (80193fc <GUI__SinHQ+0xa8>)
 80193a6:	2901      	cmp	r1, #1
 80193a8:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 80193ac:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 80193b0:	fb06 3202 	mla	r2, r6, r2, r3
 80193b4:	eba5 0300 	sub.w	r3, r5, r0
 80193b8:	fb02 f203 	mul.w	r2, r2, r3
 80193bc:	fba4 2302 	umull	r2, r3, r4, r2
 80193c0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 80193c4:	bcf0      	pop	{r4, r5, r6, r7}
 80193c6:	bf18      	it	ne
 80193c8:	4240      	negne	r0, r0
 80193ca:	4770      	bx	lr
 80193cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80193d0:	2901      	cmp	r1, #1
 80193d2:	bcf0      	pop	{r4, r5, r6, r7}
 80193d4:	bf18      	it	ne
 80193d6:	4240      	negne	r0, r0
 80193d8:	4770      	bx	lr
 80193da:	4240      	negs	r0, r0
 80193dc:	2601      	movs	r6, #1
 80193de:	f04f 31ff 	mov.w	r1, #4294967295
 80193e2:	e7bd      	b.n	8019360 <GUI__SinHQ+0xc>
 80193e4:	5d34edef 	.word	0x5d34edef
 80193e8:	00057e40 	.word	0x00057e40
 80193ec:	0002bf20 	.word	0x0002bf20
 80193f0:	00015f90 	.word	0x00015f90
 80193f4:	10624dd3 	.word	0x10624dd3
 80193f8:	08026ed0 	.word	0x08026ed0
 80193fc:	fffffc18 	.word	0xfffffc18

08019400 <GUI__CosHQ>:
 8019400:	4a24      	ldr	r2, [pc, #144]	; (8019494 <GUI__CosHQ+0x94>)
 8019402:	4402      	add	r2, r0
 8019404:	2a00      	cmp	r2, #0
 8019406:	b4f0      	push	{r4, r5, r6, r7}
 8019408:	db3f      	blt.n	801948a <GUI__CosHQ+0x8a>
 801940a:	f04f 36ff 	mov.w	r6, #4294967295
 801940e:	2101      	movs	r1, #1
 8019410:	4b21      	ldr	r3, [pc, #132]	; (8019498 <GUI__CosHQ+0x98>)
 8019412:	17d5      	asrs	r5, r2, #31
 8019414:	4c21      	ldr	r4, [pc, #132]	; (801949c <GUI__CosHQ+0x9c>)
 8019416:	fb83 0302 	smull	r0, r3, r3, r2
 801941a:	4821      	ldr	r0, [pc, #132]	; (80194a0 <GUI__CosHQ+0xa0>)
 801941c:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 8019420:	fb04 2313 	mls	r3, r4, r3, r2
 8019424:	4283      	cmp	r3, r0
 8019426:	dd04      	ble.n	8019432 <GUI__CosHQ+0x32>
 8019428:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 801942c:	4631      	mov	r1, r6
 801942e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019432:	4a18      	ldr	r2, [pc, #96]	; (8019494 <GUI__CosHQ+0x94>)
 8019434:	4293      	cmp	r3, r2
 8019436:	dd03      	ble.n	8019440 <GUI__CosHQ+0x40>
 8019438:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 801943c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8019440:	4c18      	ldr	r4, [pc, #96]	; (80194a4 <GUI__CosHQ+0xa4>)
 8019442:	17da      	asrs	r2, r3, #31
 8019444:	fb84 5003 	smull	r5, r0, r4, r3
 8019448:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 801944c:	2a5a      	cmp	r2, #90	; 0x5a
 801944e:	d015      	beq.n	801947c <GUI__CosHQ+0x7c>
 8019450:	1c57      	adds	r7, r2, #1
 8019452:	4d15      	ldr	r5, [pc, #84]	; (80194a8 <GUI__CosHQ+0xa8>)
 8019454:	4e15      	ldr	r6, [pc, #84]	; (80194ac <GUI__CosHQ+0xac>)
 8019456:	2901      	cmp	r1, #1
 8019458:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801945c:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8019460:	fb06 3202 	mla	r2, r6, r2, r3
 8019464:	eba5 0300 	sub.w	r3, r5, r0
 8019468:	fb02 f203 	mul.w	r2, r2, r3
 801946c:	fba4 2302 	umull	r2, r3, r4, r2
 8019470:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 8019474:	bcf0      	pop	{r4, r5, r6, r7}
 8019476:	bf18      	it	ne
 8019478:	4240      	negne	r0, r0
 801947a:	4770      	bx	lr
 801947c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8019480:	2901      	cmp	r1, #1
 8019482:	bcf0      	pop	{r4, r5, r6, r7}
 8019484:	bf18      	it	ne
 8019486:	4240      	negne	r0, r0
 8019488:	4770      	bx	lr
 801948a:	4252      	negs	r2, r2
 801948c:	2601      	movs	r6, #1
 801948e:	f04f 31ff 	mov.w	r1, #4294967295
 8019492:	e7bd      	b.n	8019410 <GUI__CosHQ+0x10>
 8019494:	00015f90 	.word	0x00015f90
 8019498:	5d34edef 	.word	0x5d34edef
 801949c:	00057e40 	.word	0x00057e40
 80194a0:	0002bf20 	.word	0x0002bf20
 80194a4:	10624dd3 	.word	0x10624dd3
 80194a8:	08026ed0 	.word	0x08026ed0
 80194ac:	fffffc18 	.word	0xfffffc18

080194b0 <_GetWordWrap>:
 80194b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194b4:	b085      	sub	sp, #20
 80194b6:	4689      	mov	r9, r1
 80194b8:	f10d 0810 	add.w	r8, sp, #16
 80194bc:	9202      	str	r2, [sp, #8]
 80194be:	f848 0d04 	str.w	r0, [r8, #-4]!
 80194c2:	4640      	mov	r0, r8
 80194c4:	f7fe fd52 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 80194c8:	f04f 0e00 	mov.w	lr, #0
 80194cc:	4604      	mov	r4, r0
 80194ce:	4682      	mov	sl, r0
 80194d0:	46f3      	mov	fp, lr
 80194d2:	4677      	mov	r7, lr
 80194d4:	4675      	mov	r5, lr
 80194d6:	4676      	mov	r6, lr
 80194d8:	b1dc      	cbz	r4, 8019512 <_GetWordWrap+0x62>
 80194da:	2c0a      	cmp	r4, #10
 80194dc:	d019      	beq.n	8019512 <_GetWordWrap+0x62>
 80194de:	2c20      	cmp	r4, #32
 80194e0:	d024      	beq.n	801952c <_GetWordWrap+0x7c>
 80194e2:	f1ba 0f20 	cmp.w	sl, #32
 80194e6:	d121      	bne.n	801952c <_GetWordWrap+0x7c>
 80194e8:	4620      	mov	r0, r4
 80194ea:	f008 fedf 	bl	80222ac <GUI_GetCharDistX>
 80194ee:	4406      	add	r6, r0
 80194f0:	4683      	mov	fp, r0
 80194f2:	45b1      	cmp	r9, r6
 80194f4:	da00      	bge.n	80194f8 <_GetWordWrap+0x48>
 80194f6:	b965      	cbnz	r5, 8019512 <_GetWordWrap+0x62>
 80194f8:	1c6b      	adds	r3, r5, #1
 80194fa:	4640      	mov	r0, r8
 80194fc:	462f      	mov	r7, r5
 80194fe:	9301      	str	r3, [sp, #4]
 8019500:	f7fe fd34 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 8019504:	9b01      	ldr	r3, [sp, #4]
 8019506:	4682      	mov	sl, r0
 8019508:	461d      	mov	r5, r3
 801950a:	46a6      	mov	lr, r4
 801950c:	4604      	mov	r4, r0
 801950e:	2c00      	cmp	r4, #0
 8019510:	d1e3      	bne.n	80194da <_GetWordWrap+0x2a>
 8019512:	462f      	mov	r7, r5
 8019514:	9b02      	ldr	r3, [sp, #8]
 8019516:	2f00      	cmp	r7, #0
 8019518:	bf08      	it	eq
 801951a:	462f      	moveq	r7, r5
 801951c:	b113      	cbz	r3, 8019524 <_GetWordWrap+0x74>
 801951e:	ebcb 0606 	rsb	r6, fp, r6
 8019522:	601e      	str	r6, [r3, #0]
 8019524:	4638      	mov	r0, r7
 8019526:	b005      	add	sp, #20
 8019528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801952c:	f1ae 0320 	sub.w	r3, lr, #32
 8019530:	fab3 f383 	clz	r3, r3
 8019534:	095b      	lsrs	r3, r3, #5
 8019536:	45a6      	cmp	lr, r4
 8019538:	bf18      	it	ne
 801953a:	f043 0301 	orrne.w	r3, r3, #1
 801953e:	2c20      	cmp	r4, #32
 8019540:	bf14      	ite	ne
 8019542:	2300      	movne	r3, #0
 8019544:	f003 0301 	andeq.w	r3, r3, #1
 8019548:	bb23      	cbnz	r3, 8019594 <_GetWordWrap+0xe4>
 801954a:	4b14      	ldr	r3, [pc, #80]	; (801959c <_GetWordWrap+0xec>)
 801954c:	6858      	ldr	r0, [r3, #4]
 801954e:	6819      	ldr	r1, [r3, #0]
 8019550:	2800      	cmp	r0, #0
 8019552:	dd0d      	ble.n	8019570 <_GetWordWrap+0xc0>
 8019554:	f8b1 e000 	ldrh.w	lr, [r1]
 8019558:	1c8b      	adds	r3, r1, #2
 801955a:	45a6      	cmp	lr, r4
 801955c:	d01c      	beq.n	8019598 <_GetWordWrap+0xe8>
 801955e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8019562:	e003      	b.n	801956c <_GetWordWrap+0xbc>
 8019564:	f833 1b02 	ldrh.w	r1, [r3], #2
 8019568:	42a1      	cmp	r1, r4
 801956a:	d015      	beq.n	8019598 <_GetWordWrap+0xe8>
 801956c:	4298      	cmp	r0, r3
 801956e:	d1f9      	bne.n	8019564 <_GetWordWrap+0xb4>
 8019570:	4620      	mov	r0, r4
 8019572:	f008 fe9b 	bl	80222ac <GUI_GetCharDistX>
 8019576:	4406      	add	r6, r0
 8019578:	4683      	mov	fp, r0
 801957a:	454e      	cmp	r6, r9
 801957c:	dd01      	ble.n	8019582 <_GetWordWrap+0xd2>
 801957e:	2d00      	cmp	r5, #0
 8019580:	d1c8      	bne.n	8019514 <_GetWordWrap+0x64>
 8019582:	4640      	mov	r0, r8
 8019584:	3501      	adds	r5, #1
 8019586:	f7fe fcf1 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 801958a:	f1ba 0f00 	cmp.w	sl, #0
 801958e:	bf08      	it	eq
 8019590:	4682      	moveq	sl, r0
 8019592:	e7ba      	b.n	801950a <_GetWordWrap+0x5a>
 8019594:	462f      	mov	r7, r5
 8019596:	e7eb      	b.n	8019570 <_GetWordWrap+0xc0>
 8019598:	1c6f      	adds	r7, r5, #1
 801959a:	e7e9      	b.n	8019570 <_GetWordWrap+0xc0>
 801959c:	200003c0 	.word	0x200003c0

080195a0 <_GetCharWrap>:
 80195a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195a4:	b082      	sub	sp, #8
 80195a6:	2400      	movs	r4, #0
 80195a8:	4688      	mov	r8, r1
 80195aa:	af02      	add	r7, sp, #8
 80195ac:	4625      	mov	r5, r4
 80195ae:	f847 0d04 	str.w	r0, [r7, #-4]!
 80195b2:	e009      	b.n	80195c8 <_GetCharWrap+0x28>
 80195b4:	f008 fe7a 	bl	80222ac <GUI_GetCharDistX>
 80195b8:	4405      	add	r5, r0
 80195ba:	2c00      	cmp	r4, #0
 80195bc:	bf18      	it	ne
 80195be:	4545      	cmpne	r5, r8
 80195c0:	dc08      	bgt.n	80195d4 <_GetCharWrap+0x34>
 80195c2:	2e0a      	cmp	r6, #10
 80195c4:	d006      	beq.n	80195d4 <_GetCharWrap+0x34>
 80195c6:	3401      	adds	r4, #1
 80195c8:	4638      	mov	r0, r7
 80195ca:	f7fe fccf 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 80195ce:	4606      	mov	r6, r0
 80195d0:	2800      	cmp	r0, #0
 80195d2:	d1ef      	bne.n	80195b4 <_GetCharWrap+0x14>
 80195d4:	4620      	mov	r0, r4
 80195d6:	b002      	add	sp, #8
 80195d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195dc <GUI__WrapGetNumCharsDisp>:
 80195dc:	2a01      	cmp	r2, #1
 80195de:	d008      	beq.n	80195f2 <GUI__WrapGetNumCharsDisp+0x16>
 80195e0:	2a02      	cmp	r2, #2
 80195e2:	d102      	bne.n	80195ea <GUI__WrapGetNumCharsDisp+0xe>
 80195e4:	4b05      	ldr	r3, [pc, #20]	; (80195fc <GUI__WrapGetNumCharsDisp+0x20>)
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	4718      	bx	r3
 80195ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80195ee:	f008 bed3 	b.w	8022398 <GUI__GetLineNumChars>
 80195f2:	4b02      	ldr	r3, [pc, #8]	; (80195fc <GUI__WrapGetNumCharsDisp+0x20>)
 80195f4:	2200      	movs	r2, #0
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	4718      	bx	r3
 80195fa:	bf00      	nop
 80195fc:	20000054 	.word	0x20000054

08019600 <GUI__WrapGetNumBytesToNextLine>:
 8019600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019604:	2a01      	cmp	r2, #1
 8019606:	b082      	sub	sp, #8
 8019608:	4617      	mov	r7, r2
 801960a:	4680      	mov	r8, r0
 801960c:	460e      	mov	r6, r1
 801960e:	9000      	str	r0, [sp, #0]
 8019610:	d048      	beq.n	80196a4 <GUI__WrapGetNumBytesToNextLine+0xa4>
 8019612:	2a02      	cmp	r2, #2
 8019614:	d02d      	beq.n	8019672 <GUI__WrapGetNumBytesToNextLine+0x72>
 8019616:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801961a:	f008 febd 	bl	8022398 <GUI__GetLineNumChars>
 801961e:	4604      	mov	r4, r0
 8019620:	4621      	mov	r1, r4
 8019622:	9800      	ldr	r0, [sp, #0]
 8019624:	f7fe fcb6 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 8019628:	9b00      	ldr	r3, [sp, #0]
 801962a:	ad02      	add	r5, sp, #8
 801962c:	4418      	add	r0, r3
 801962e:	f845 0d08 	str.w	r0, [r5, #-8]!
 8019632:	4628      	mov	r0, r5
 8019634:	f7fe fc9a 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 8019638:	280a      	cmp	r0, #10
 801963a:	d039      	beq.n	80196b0 <GUI__WrapGetNumBytesToNextLine+0xb0>
 801963c:	2f01      	cmp	r7, #1
 801963e:	d12a      	bne.n	8019696 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019640:	2820      	cmp	r0, #32
 8019642:	d128      	bne.n	8019696 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019644:	f008 fe32 	bl	80222ac <GUI_GetCharDistX>
 8019648:	4607      	mov	r7, r0
 801964a:	9b01      	ldr	r3, [sp, #4]
 801964c:	4628      	mov	r0, r5
 801964e:	429e      	cmp	r6, r3
 8019650:	eb07 0203 	add.w	r2, r7, r3
 8019654:	db1f      	blt.n	8019696 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019656:	9201      	str	r2, [sp, #4]
 8019658:	f7fe fc88 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 801965c:	2820      	cmp	r0, #32
 801965e:	f104 0401 	add.w	r4, r4, #1
 8019662:	d0f2      	beq.n	801964a <GUI__WrapGetNumBytesToNextLine+0x4a>
 8019664:	4621      	mov	r1, r4
 8019666:	4640      	mov	r0, r8
 8019668:	f7fe fc94 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 801966c:	b002      	add	sp, #8
 801966e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019672:	4b13      	ldr	r3, [pc, #76]	; (80196c0 <GUI__WrapGetNumBytesToNextLine+0xc0>)
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	4798      	blx	r3
 8019678:	4601      	mov	r1, r0
 801967a:	4604      	mov	r4, r0
 801967c:	9800      	ldr	r0, [sp, #0]
 801967e:	f7fe fc89 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 8019682:	9a00      	ldr	r2, [sp, #0]
 8019684:	ab02      	add	r3, sp, #8
 8019686:	4410      	add	r0, r2
 8019688:	f843 0d08 	str.w	r0, [r3, #-8]!
 801968c:	4618      	mov	r0, r3
 801968e:	f7fe fc6d 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 8019692:	280a      	cmp	r0, #10
 8019694:	d00c      	beq.n	80196b0 <GUI__WrapGetNumBytesToNextLine+0xb0>
 8019696:	4621      	mov	r1, r4
 8019698:	4640      	mov	r0, r8
 801969a:	f7fe fc7b 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 801969e:	b002      	add	sp, #8
 80196a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196a4:	4b06      	ldr	r3, [pc, #24]	; (80196c0 <GUI__WrapGetNumBytesToNextLine+0xc0>)
 80196a6:	aa01      	add	r2, sp, #4
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	4798      	blx	r3
 80196ac:	4604      	mov	r4, r0
 80196ae:	e7b7      	b.n	8019620 <GUI__WrapGetNumBytesToNextLine+0x20>
 80196b0:	3401      	adds	r4, #1
 80196b2:	4640      	mov	r0, r8
 80196b4:	4621      	mov	r1, r4
 80196b6:	f7fe fc6d 	bl	8017f94 <GUI_UC__NumChars2NumBytes>
 80196ba:	b002      	add	sp, #8
 80196bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196c0:	20000054 	.word	0x20000054

080196c4 <_SetBkColor>:
 80196c4:	b538      	push	{r3, r4, r5, lr}
 80196c6:	4c0b      	ldr	r4, [pc, #44]	; (80196f4 <_SetBkColor+0x30>)
 80196c8:	6822      	ldr	r2, [r4, #0]
 80196ca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80196cc:	4281      	cmp	r1, r0
 80196ce:	d00d      	beq.n	80196ec <_SetBkColor+0x28>
 80196d0:	7c55      	ldrb	r5, [r2, #17]
 80196d2:	4909      	ldr	r1, [pc, #36]	; (80196f8 <_SetBkColor+0x34>)
 80196d4:	6350      	str	r0, [r2, #52]	; 0x34
 80196d6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80196da:	691b      	ldr	r3, [r3, #16]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	4798      	blx	r3
 80196e0:	6823      	ldr	r3, [r4, #0]
 80196e2:	7c1a      	ldrb	r2, [r3, #16]
 80196e4:	0752      	lsls	r2, r2, #29
 80196e6:	d402      	bmi.n	80196ee <_SetBkColor+0x2a>
 80196e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196ea:	6018      	str	r0, [r3, #0]
 80196ec:	bd38      	pop	{r3, r4, r5, pc}
 80196ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196f0:	6018      	str	r0, [r3, #0]
 80196f2:	bd38      	pop	{r3, r4, r5, pc}
 80196f4:	20000018 	.word	0x20000018
 80196f8:	200467d0 	.word	0x200467d0

080196fc <_SetColor>:
 80196fc:	b538      	push	{r3, r4, r5, lr}
 80196fe:	4c0b      	ldr	r4, [pc, #44]	; (801972c <_SetColor+0x30>)
 8019700:	6822      	ldr	r2, [r4, #0]
 8019702:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8019704:	4281      	cmp	r1, r0
 8019706:	d00d      	beq.n	8019724 <_SetColor+0x28>
 8019708:	7c55      	ldrb	r5, [r2, #17]
 801970a:	4909      	ldr	r1, [pc, #36]	; (8019730 <_SetColor+0x34>)
 801970c:	6310      	str	r0, [r2, #48]	; 0x30
 801970e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8019712:	691b      	ldr	r3, [r3, #16]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	4798      	blx	r3
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	7c1a      	ldrb	r2, [r3, #16]
 801971c:	0752      	lsls	r2, r2, #29
 801971e:	d402      	bmi.n	8019726 <_SetColor+0x2a>
 8019720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019722:	6018      	str	r0, [r3, #0]
 8019724:	bd38      	pop	{r3, r4, r5, pc}
 8019726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019728:	6018      	str	r0, [r3, #0]
 801972a:	bd38      	pop	{r3, r4, r5, pc}
 801972c:	20000018 	.word	0x20000018
 8019730:	200467d0 	.word	0x200467d0

08019734 <_SetDrawMode>:
 8019734:	4b0a      	ldr	r3, [pc, #40]	; (8019760 <_SetDrawMode+0x2c>)
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	7c1a      	ldrb	r2, [r3, #16]
 801973a:	ea82 0100 	eor.w	r1, r2, r0
 801973e:	0749      	lsls	r1, r1, #29
 8019740:	d50a      	bpl.n	8019758 <_SetDrawMode+0x24>
 8019742:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8019744:	b470      	push	{r4, r5, r6}
 8019746:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8019748:	680e      	ldr	r6, [r1, #0]
 801974a:	6825      	ldr	r5, [r4, #0]
 801974c:	6026      	str	r6, [r4, #0]
 801974e:	600d      	str	r5, [r1, #0]
 8019750:	7418      	strb	r0, [r3, #16]
 8019752:	4610      	mov	r0, r2
 8019754:	bc70      	pop	{r4, r5, r6}
 8019756:	4770      	bx	lr
 8019758:	7418      	strb	r0, [r3, #16]
 801975a:	4610      	mov	r0, r2
 801975c:	4770      	bx	lr
 801975e:	bf00      	nop
 8019760:	20000018 	.word	0x20000018

08019764 <LCD_SetDrawMode>:
 8019764:	4b01      	ldr	r3, [pc, #4]	; (801976c <LCD_SetDrawMode+0x8>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	689b      	ldr	r3, [r3, #8]
 801976a:	4718      	bx	r3
 801976c:	2000005c 	.word	0x2000005c

08019770 <LCD_DrawPixel>:
 8019770:	4b16      	ldr	r3, [pc, #88]	; (80197cc <LCD_DrawPixel+0x5c>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8019778:	428a      	cmp	r2, r1
 801977a:	dc1c      	bgt.n	80197b6 <LCD_DrawPixel+0x46>
 801977c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8019780:	4291      	cmp	r1, r2
 8019782:	dc18      	bgt.n	80197b6 <LCD_DrawPixel+0x46>
 8019784:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8019788:	4282      	cmp	r2, r0
 801978a:	dc14      	bgt.n	80197b6 <LCD_DrawPixel+0x46>
 801978c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019790:	4290      	cmp	r0, r2
 8019792:	dc10      	bgt.n	80197b6 <LCD_DrawPixel+0x46>
 8019794:	b430      	push	{r4, r5}
 8019796:	7c1a      	ldrb	r2, [r3, #16]
 8019798:	07d2      	lsls	r2, r2, #31
 801979a:	d40d      	bmi.n	80197b8 <LCD_DrawPixel+0x48>
 801979c:	7c5d      	ldrb	r5, [r3, #17]
 801979e:	460a      	mov	r2, r1
 80197a0:	4c0b      	ldr	r4, [pc, #44]	; (80197d0 <LCD_DrawPixel+0x60>)
 80197a2:	4601      	mov	r1, r0
 80197a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197a6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	68c4      	ldr	r4, [r0, #12]
 80197ae:	69a4      	ldr	r4, [r4, #24]
 80197b0:	46a4      	mov	ip, r4
 80197b2:	bc30      	pop	{r4, r5}
 80197b4:	4760      	bx	ip
 80197b6:	4770      	bx	lr
 80197b8:	7c5c      	ldrb	r4, [r3, #17]
 80197ba:	460a      	mov	r2, r1
 80197bc:	4b04      	ldr	r3, [pc, #16]	; (80197d0 <LCD_DrawPixel+0x60>)
 80197be:	4601      	mov	r1, r0
 80197c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80197c4:	68c3      	ldr	r3, [r0, #12]
 80197c6:	bc30      	pop	{r4, r5}
 80197c8:	69db      	ldr	r3, [r3, #28]
 80197ca:	4718      	bx	r3
 80197cc:	20000018 	.word	0x20000018
 80197d0:	200467d0 	.word	0x200467d0

080197d4 <LCD_DrawHLine>:
 80197d4:	4b11      	ldr	r3, [pc, #68]	; (801981c <LCD_DrawHLine+0x48>)
 80197d6:	b430      	push	{r4, r5}
 80197d8:	681c      	ldr	r4, [r3, #0]
 80197da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80197de:	428b      	cmp	r3, r1
 80197e0:	dc0f      	bgt.n	8019802 <LCD_DrawHLine+0x2e>
 80197e2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80197e6:	4299      	cmp	r1, r3
 80197e8:	dc0b      	bgt.n	8019802 <LCD_DrawHLine+0x2e>
 80197ea:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80197ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197f2:	42a8      	cmp	r0, r5
 80197f4:	bfb8      	it	lt
 80197f6:	4628      	movlt	r0, r5
 80197f8:	4293      	cmp	r3, r2
 80197fa:	bfa8      	it	ge
 80197fc:	4613      	movge	r3, r2
 80197fe:	4298      	cmp	r0, r3
 8019800:	dd01      	ble.n	8019806 <LCD_DrawHLine+0x32>
 8019802:	bc30      	pop	{r4, r5}
 8019804:	4770      	bx	lr
 8019806:	7c65      	ldrb	r5, [r4, #17]
 8019808:	460a      	mov	r2, r1
 801980a:	4c05      	ldr	r4, [pc, #20]	; (8019820 <LCD_DrawHLine+0x4c>)
 801980c:	4601      	mov	r1, r0
 801980e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8019812:	68c4      	ldr	r4, [r0, #12]
 8019814:	68a4      	ldr	r4, [r4, #8]
 8019816:	46a4      	mov	ip, r4
 8019818:	bc30      	pop	{r4, r5}
 801981a:	4760      	bx	ip
 801981c:	20000018 	.word	0x20000018
 8019820:	200467d0 	.word	0x200467d0

08019824 <LCD_DrawVLine>:
 8019824:	4b11      	ldr	r3, [pc, #68]	; (801986c <LCD_DrawVLine+0x48>)
 8019826:	b430      	push	{r4, r5}
 8019828:	681c      	ldr	r4, [r3, #0]
 801982a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801982e:	4283      	cmp	r3, r0
 8019830:	dc0f      	bgt.n	8019852 <LCD_DrawVLine+0x2e>
 8019832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019836:	4298      	cmp	r0, r3
 8019838:	dc0b      	bgt.n	8019852 <LCD_DrawVLine+0x2e>
 801983a:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801983e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8019842:	42a9      	cmp	r1, r5
 8019844:	bfb8      	it	lt
 8019846:	4629      	movlt	r1, r5
 8019848:	4293      	cmp	r3, r2
 801984a:	bfa8      	it	ge
 801984c:	4613      	movge	r3, r2
 801984e:	4299      	cmp	r1, r3
 8019850:	dd01      	ble.n	8019856 <LCD_DrawVLine+0x32>
 8019852:	bc30      	pop	{r4, r5}
 8019854:	4770      	bx	lr
 8019856:	7c65      	ldrb	r5, [r4, #17]
 8019858:	460a      	mov	r2, r1
 801985a:	4c05      	ldr	r4, [pc, #20]	; (8019870 <LCD_DrawVLine+0x4c>)
 801985c:	4601      	mov	r1, r0
 801985e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8019862:	68c4      	ldr	r4, [r0, #12]
 8019864:	68e4      	ldr	r4, [r4, #12]
 8019866:	46a4      	mov	ip, r4
 8019868:	bc30      	pop	{r4, r5}
 801986a:	4760      	bx	ip
 801986c:	20000018 	.word	0x20000018
 8019870:	200467d0 	.word	0x200467d0

08019874 <LCD_FillRect>:
 8019874:	b570      	push	{r4, r5, r6, lr}
 8019876:	4c15      	ldr	r4, [pc, #84]	; (80198cc <LCD_FillRect+0x58>)
 8019878:	b082      	sub	sp, #8
 801987a:	6824      	ldr	r4, [r4, #0]
 801987c:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8019880:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8019884:	42a8      	cmp	r0, r5
 8019886:	bfb8      	it	lt
 8019888:	4628      	movlt	r0, r5
 801988a:	42b2      	cmp	r2, r6
 801988c:	bfa8      	it	ge
 801988e:	4632      	movge	r2, r6
 8019890:	4282      	cmp	r2, r0
 8019892:	db0b      	blt.n	80198ac <LCD_FillRect+0x38>
 8019894:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 8019898:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 801989c:	42b1      	cmp	r1, r6
 801989e:	bfb8      	it	lt
 80198a0:	4631      	movlt	r1, r6
 80198a2:	429d      	cmp	r5, r3
 80198a4:	bfa8      	it	ge
 80198a6:	461d      	movge	r5, r3
 80198a8:	42a9      	cmp	r1, r5
 80198aa:	dd01      	ble.n	80198b0 <LCD_FillRect+0x3c>
 80198ac:	b002      	add	sp, #8
 80198ae:	bd70      	pop	{r4, r5, r6, pc}
 80198b0:	7c66      	ldrb	r6, [r4, #17]
 80198b2:	4613      	mov	r3, r2
 80198b4:	4c06      	ldr	r4, [pc, #24]	; (80198d0 <LCD_FillRect+0x5c>)
 80198b6:	460a      	mov	r2, r1
 80198b8:	4601      	mov	r1, r0
 80198ba:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80198be:	68c4      	ldr	r4, [r0, #12]
 80198c0:	9500      	str	r5, [sp, #0]
 80198c2:	6924      	ldr	r4, [r4, #16]
 80198c4:	47a0      	blx	r4
 80198c6:	b002      	add	sp, #8
 80198c8:	bd70      	pop	{r4, r5, r6, pc}
 80198ca:	bf00      	nop
 80198cc:	20000018 	.word	0x20000018
 80198d0:	200467d0 	.word	0x200467d0

080198d4 <LCD__DrawBitmap_1bpp>:
 80198d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198d8:	b091      	sub	sp, #68	; 0x44
 80198da:	4c82      	ldr	r4, [pc, #520]	; (8019ae4 <LCD__DrawBitmap_1bpp+0x210>)
 80198dc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80198de:	6824      	ldr	r4, [r4, #0]
 80198e0:	462e      	mov	r6, r5
 80198e2:	950e      	str	r5, [sp, #56]	; 0x38
 80198e4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80198e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80198e8:	950c      	str	r5, [sp, #48]	; 0x30
 80198ea:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80198ec:	9205      	str	r2, [sp, #20]
 80198ee:	9506      	str	r5, [sp, #24]
 80198f0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80198f2:	930d      	str	r3, [sp, #52]	; 0x34
 80198f4:	9508      	str	r5, [sp, #32]
 80198f6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80198fa:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 80198fe:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019900:	b12c      	cbz	r4, 801990e <LCD__DrawBitmap_1bpp+0x3a>
 8019902:	6824      	ldr	r4, [r4, #0]
 8019904:	46a4      	mov	ip, r4
 8019906:	b011      	add	sp, #68	; 0x44
 8019908:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990c:	4760      	bx	ip
 801990e:	ea4a 0306 	orr.w	r3, sl, r6
 8019912:	4689      	mov	r9, r1
 8019914:	2b01      	cmp	r3, #1
 8019916:	f000 8092 	beq.w	8019a3e <LCD__DrawBitmap_1bpp+0x16a>
 801991a:	f1ce 0308 	rsb	r3, lr, #8
 801991e:	9302      	str	r3, [sp, #8]
 8019920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019922:	2b00      	cmp	r3, #0
 8019924:	f340 8088 	ble.w	8019a38 <LCD__DrawBitmap_1bpp+0x164>
 8019928:	4b6f      	ldr	r3, [pc, #444]	; (8019ae8 <LCD__DrawBitmap_1bpp+0x214>)
 801992a:	46a0      	mov	r8, r4
 801992c:	46f1      	mov	r9, lr
 801992e:	940a      	str	r4, [sp, #40]	; 0x28
 8019930:	6818      	ldr	r0, [r3, #0]
 8019932:	9104      	str	r1, [sp, #16]
 8019934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019936:	9904      	ldr	r1, [sp, #16]
 8019938:	1853      	adds	r3, r2, r1
 801993a:	461a      	mov	r2, r3
 801993c:	930b      	str	r3, [sp, #44]	; 0x2c
 801993e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019942:	3a01      	subs	r2, #1
 8019944:	4293      	cmp	r3, r2
 8019946:	9209      	str	r2, [sp, #36]	; 0x24
 8019948:	dc69      	bgt.n	8019a1e <LCD__DrawBitmap_1bpp+0x14a>
 801994a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801994e:	428b      	cmp	r3, r1
 8019950:	db65      	blt.n	8019a1e <LCD__DrawBitmap_1bpp+0x14a>
 8019952:	9b05      	ldr	r3, [sp, #20]
 8019954:	2b00      	cmp	r3, #0
 8019956:	dd62      	ble.n	8019a1e <LCD__DrawBitmap_1bpp+0x14a>
 8019958:	2600      	movs	r6, #0
 801995a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801995c:	9f06      	ldr	r7, [sp, #24]
 801995e:	eb03 040a 	add.w	r4, r3, sl
 8019962:	4635      	mov	r5, r6
 8019964:	9707      	str	r7, [sp, #28]
 8019966:	e04d      	b.n	8019a04 <LCD__DrawBitmap_1bpp+0x130>
 8019968:	ebc9 0606 	rsb	r6, r9, r6
 801996c:	9b02      	ldr	r3, [sp, #8]
 801996e:	fa48 f203 	asr.w	r2, r8, r3
 8019972:	fa08 f809 	lsl.w	r8, r8, r9
 8019976:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801997a:	fa5f f888 	uxtb.w	r8, r8
 801997e:	d102      	bne.n	8019986 <LCD__DrawBitmap_1bpp+0xb2>
 8019980:	7c03      	ldrb	r3, [r0, #16]
 8019982:	079b      	lsls	r3, r3, #30
 8019984:	d439      	bmi.n	80199fa <LCD__DrawBitmap_1bpp+0x126>
 8019986:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801998a:	f8dc 3000 	ldr.w	r3, [ip]
 801998e:	9303      	str	r3, [sp, #12]
 8019990:	9b08      	ldr	r3, [sp, #32]
 8019992:	b10b      	cbz	r3, 8019998 <LCD__DrawBitmap_1bpp+0xc4>
 8019994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019998:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801999c:	f104 3eff 	add.w	lr, r4, #4294967295
 80199a0:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 80199a4:	4299      	cmp	r1, r3
 80199a6:	f8cc 2000 	str.w	r2, [ip]
 80199aa:	bfb8      	it	lt
 80199ac:	4619      	movlt	r1, r3
 80199ae:	45de      	cmp	lr, fp
 80199b0:	4673      	mov	r3, lr
 80199b2:	bfa8      	it	ge
 80199b4:	465b      	movge	r3, fp
 80199b6:	428b      	cmp	r3, r1
 80199b8:	db1c      	blt.n	80199f4 <LCD__DrawBitmap_1bpp+0x120>
 80199ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80199be:	9f04      	ldr	r7, [sp, #16]
 80199c0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80199c4:	42ba      	cmp	r2, r7
 80199c6:	bfb8      	it	lt
 80199c8:	463a      	movlt	r2, r7
 80199ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80199cc:	45be      	cmp	lr, r7
 80199ce:	bfa8      	it	ge
 80199d0:	46be      	movge	lr, r7
 80199d2:	4572      	cmp	r2, lr
 80199d4:	dc0e      	bgt.n	80199f4 <LCD__DrawBitmap_1bpp+0x120>
 80199d6:	7c40      	ldrb	r0, [r0, #17]
 80199d8:	4f44      	ldr	r7, [pc, #272]	; (8019aec <LCD__DrawBitmap_1bpp+0x218>)
 80199da:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80199de:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80199e2:	f8cd e000 	str.w	lr, [sp]
 80199e6:	f8dc b010 	ldr.w	fp, [ip, #16]
 80199ea:	47d8      	blx	fp
 80199ec:	4b3e      	ldr	r3, [pc, #248]	; (8019ae8 <LCD__DrawBitmap_1bpp+0x214>)
 80199ee:	6818      	ldr	r0, [r3, #0]
 80199f0:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80199f4:	9b03      	ldr	r3, [sp, #12]
 80199f6:	f8cc 3000 	str.w	r3, [ip]
 80199fa:	3501      	adds	r5, #1
 80199fc:	9b05      	ldr	r3, [sp, #20]
 80199fe:	4454      	add	r4, sl
 8019a00:	42ab      	cmp	r3, r5
 8019a02:	d00c      	beq.n	8019a1e <LCD__DrawBitmap_1bpp+0x14a>
 8019a04:	ebca 0104 	rsb	r1, sl, r4
 8019a08:	2e00      	cmp	r6, #0
 8019a0a:	d1ad      	bne.n	8019968 <LCD__DrawBitmap_1bpp+0x94>
 8019a0c:	9a07      	ldr	r2, [sp, #28]
 8019a0e:	9e02      	ldr	r6, [sp, #8]
 8019a10:	4613      	mov	r3, r2
 8019a12:	f892 8000 	ldrb.w	r8, [r2]
 8019a16:	3301      	adds	r3, #1
 8019a18:	9307      	str	r3, [sp, #28]
 8019a1a:	4633      	mov	r3, r6
 8019a1c:	e7a7      	b.n	801996e <LCD__DrawBitmap_1bpp+0x9a>
 8019a1e:	9a06      	ldr	r2, [sp, #24]
 8019a20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a24:	440a      	add	r2, r1
 8019a26:	3301      	adds	r3, #1
 8019a28:	9206      	str	r2, [sp, #24]
 8019a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8019a2e:	9204      	str	r2, [sp, #16]
 8019a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019a32:	429a      	cmp	r2, r3
 8019a34:	f47f af7e 	bne.w	8019934 <LCD__DrawBitmap_1bpp+0x60>
 8019a38:	b011      	add	sp, #68	; 0x44
 8019a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a3e:	4b2a      	ldr	r3, [pc, #168]	; (8019ae8 <LCD__DrawBitmap_1bpp+0x214>)
 8019a40:	6818      	ldr	r0, [r3, #0]
 8019a42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019a46:	1a53      	subs	r3, r2, r1
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	dd46      	ble.n	8019ada <LCD__DrawBitmap_1bpp+0x206>
 8019a4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019a4e:	1acc      	subs	r4, r1, r3
 8019a50:	2c00      	cmp	r4, #0
 8019a52:	ddf1      	ble.n	8019a38 <LCD__DrawBitmap_1bpp+0x164>
 8019a54:	9e06      	ldr	r6, [sp, #24]
 8019a56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a58:	fb01 6303 	mla	r3, r1, r3, r6
 8019a5c:	9306      	str	r3, [sp, #24]
 8019a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a60:	444b      	add	r3, r9
 8019a62:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8019a66:	3b01      	subs	r3, #1
 8019a68:	1a5b      	subs	r3, r3, r1
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	dd02      	ble.n	8019a74 <LCD__DrawBitmap_1bpp+0x1a0>
 8019a6e:	1ae4      	subs	r4, r4, r3
 8019a70:	2c00      	cmp	r4, #0
 8019a72:	dde1      	ble.n	8019a38 <LCD__DrawBitmap_1bpp+0x164>
 8019a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019a76:	9e05      	ldr	r6, [sp, #20]
 8019a78:	198b      	adds	r3, r1, r6
 8019a7a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8019a7e:	3b01      	subs	r3, #1
 8019a80:	1a5b      	subs	r3, r3, r1
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	dd01      	ble.n	8019a8a <LCD__DrawBitmap_1bpp+0x1b6>
 8019a86:	1af3      	subs	r3, r6, r3
 8019a88:	9305      	str	r3, [sp, #20]
 8019a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a8c:	1b59      	subs	r1, r3, r5
 8019a8e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019a92:	4299      	cmp	r1, r3
 8019a94:	da0d      	bge.n	8019ab2 <LCD__DrawBitmap_1bpp+0x1de>
 8019a96:	1a5b      	subs	r3, r3, r1
 8019a98:	9f05      	ldr	r7, [sp, #20]
 8019a9a:	441d      	add	r5, r3
 8019a9c:	f023 0607 	bic.w	r6, r3, #7
 8019aa0:	1afb      	subs	r3, r7, r3
 8019aa2:	4431      	add	r1, r6
 8019aa4:	9305      	str	r3, [sp, #20]
 8019aa6:	9b06      	ldr	r3, [sp, #24]
 8019aa8:	eb03 03e5 	add.w	r3, r3, r5, asr #3
 8019aac:	f005 0507 	and.w	r5, r5, #7
 8019ab0:	9306      	str	r3, [sp, #24]
 8019ab2:	9b05      	ldr	r3, [sp, #20]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	ddbf      	ble.n	8019a38 <LCD__DrawBitmap_1bpp+0x164>
 8019ab8:	7c46      	ldrb	r6, [r0, #17]
 8019aba:	480c      	ldr	r0, [pc, #48]	; (8019aec <LCD__DrawBitmap_1bpp+0x218>)
 8019abc:	9f08      	ldr	r7, [sp, #32]
 8019abe:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8019ac2:	68c6      	ldr	r6, [r0, #12]
 8019ac4:	951e      	str	r5, [sp, #120]	; 0x78
 8019ac6:	9d06      	ldr	r5, [sp, #24]
 8019ac8:	971f      	str	r7, [sp, #124]	; 0x7c
 8019aca:	951d      	str	r5, [sp, #116]	; 0x74
 8019acc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019ace:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8019ad2:	951c      	str	r5, [sp, #112]	; 0x70
 8019ad4:	941a      	str	r4, [sp, #104]	; 0x68
 8019ad6:	6874      	ldr	r4, [r6, #4]
 8019ad8:	e714      	b.n	8019904 <LCD__DrawBitmap_1bpp+0x30>
 8019ada:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019adc:	460a      	mov	r2, r1
 8019ade:	4623      	mov	r3, r4
 8019ae0:	e7be      	b.n	8019a60 <LCD__DrawBitmap_1bpp+0x18c>
 8019ae2:	bf00      	nop
 8019ae4:	2004678c 	.word	0x2004678c
 8019ae8:	20000018 	.word	0x20000018
 8019aec:	200467d0 	.word	0x200467d0

08019af0 <LCD_DrawBitmap>:
 8019af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af4:	4cb6      	ldr	r4, [pc, #728]	; (8019dd0 <LCD_DrawBitmap+0x2e0>)
 8019af6:	b091      	sub	sp, #68	; 0x44
 8019af8:	f8d4 e000 	ldr.w	lr, [r4]
 8019afc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8019afe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019b00:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8019b02:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8019b04:	900f      	str	r0, [sp, #60]	; 0x3c
 8019b06:	9205      	str	r2, [sp, #20]
 8019b08:	930c      	str	r3, [sp, #48]	; 0x30
 8019b0a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8019b0e:	950d      	str	r5, [sp, #52]	; 0x34
 8019b10:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8019b14:	960e      	str	r6, [sp, #56]	; 0x38
 8019b16:	9707      	str	r7, [sp, #28]
 8019b18:	9408      	str	r4, [sp, #32]
 8019b1a:	f1be 0f00 	cmp.w	lr, #0
 8019b1e:	d006      	beq.n	8019b2e <LCD_DrawBitmap+0x3e>
 8019b20:	f8de 4000 	ldr.w	r4, [lr]
 8019b24:	46a4      	mov	ip, r4
 8019b26:	b011      	add	sp, #68	; 0x44
 8019b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b2c:	4760      	bx	ip
 8019b2e:	ea4a 0305 	orr.w	r3, sl, r5
 8019b32:	4689      	mov	r9, r1
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	f000 8093 	beq.w	8019c60 <LCD_DrawBitmap+0x170>
 8019b3a:	f1cc 0308 	rsb	r3, ip, #8
 8019b3e:	9302      	str	r3, [sp, #8]
 8019b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	f340 8089 	ble.w	8019c5a <LCD_DrawBitmap+0x16a>
 8019b48:	4ba2      	ldr	r3, [pc, #648]	; (8019dd4 <LCD_DrawBitmap+0x2e4>)
 8019b4a:	46f0      	mov	r8, lr
 8019b4c:	46e1      	mov	r9, ip
 8019b4e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8019b52:	6818      	ldr	r0, [r3, #0]
 8019b54:	9104      	str	r1, [sp, #16]
 8019b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b58:	9904      	ldr	r1, [sp, #16]
 8019b5a:	1853      	adds	r3, r2, r1
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b60:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019b64:	3a01      	subs	r2, #1
 8019b66:	4293      	cmp	r3, r2
 8019b68:	9209      	str	r2, [sp, #36]	; 0x24
 8019b6a:	dc69      	bgt.n	8019c40 <LCD_DrawBitmap+0x150>
 8019b6c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8019b70:	428b      	cmp	r3, r1
 8019b72:	db65      	blt.n	8019c40 <LCD_DrawBitmap+0x150>
 8019b74:	9b05      	ldr	r3, [sp, #20]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	dd62      	ble.n	8019c40 <LCD_DrawBitmap+0x150>
 8019b7a:	2600      	movs	r6, #0
 8019b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019b7e:	9f07      	ldr	r7, [sp, #28]
 8019b80:	eb03 040a 	add.w	r4, r3, sl
 8019b84:	4635      	mov	r5, r6
 8019b86:	9706      	str	r7, [sp, #24]
 8019b88:	e04d      	b.n	8019c26 <LCD_DrawBitmap+0x136>
 8019b8a:	ebc9 0606 	rsb	r6, r9, r6
 8019b8e:	9b02      	ldr	r3, [sp, #8]
 8019b90:	fa48 f203 	asr.w	r2, r8, r3
 8019b94:	fa08 f809 	lsl.w	r8, r8, r9
 8019b98:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8019b9c:	fa5f f888 	uxtb.w	r8, r8
 8019ba0:	d102      	bne.n	8019ba8 <LCD_DrawBitmap+0xb8>
 8019ba2:	7c03      	ldrb	r3, [r0, #16]
 8019ba4:	079b      	lsls	r3, r3, #30
 8019ba6:	d439      	bmi.n	8019c1c <LCD_DrawBitmap+0x12c>
 8019ba8:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8019bac:	f8dc 3000 	ldr.w	r3, [ip]
 8019bb0:	9303      	str	r3, [sp, #12]
 8019bb2:	9b08      	ldr	r3, [sp, #32]
 8019bb4:	b10b      	cbz	r3, 8019bba <LCD_DrawBitmap+0xca>
 8019bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019bba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019bbe:	f104 3eff 	add.w	lr, r4, #4294967295
 8019bc2:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 8019bc6:	4299      	cmp	r1, r3
 8019bc8:	f8cc 2000 	str.w	r2, [ip]
 8019bcc:	bfb8      	it	lt
 8019bce:	4619      	movlt	r1, r3
 8019bd0:	45de      	cmp	lr, fp
 8019bd2:	4673      	mov	r3, lr
 8019bd4:	bfa8      	it	ge
 8019bd6:	465b      	movge	r3, fp
 8019bd8:	428b      	cmp	r3, r1
 8019bda:	db1c      	blt.n	8019c16 <LCD_DrawBitmap+0x126>
 8019bdc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019be0:	9f04      	ldr	r7, [sp, #16]
 8019be2:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019be6:	42ba      	cmp	r2, r7
 8019be8:	bfb8      	it	lt
 8019bea:	463a      	movlt	r2, r7
 8019bec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019bee:	45be      	cmp	lr, r7
 8019bf0:	bfa8      	it	ge
 8019bf2:	46be      	movge	lr, r7
 8019bf4:	4572      	cmp	r2, lr
 8019bf6:	dc0e      	bgt.n	8019c16 <LCD_DrawBitmap+0x126>
 8019bf8:	7c40      	ldrb	r0, [r0, #17]
 8019bfa:	4f77      	ldr	r7, [pc, #476]	; (8019dd8 <LCD_DrawBitmap+0x2e8>)
 8019bfc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8019c00:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8019c04:	f8cd e000 	str.w	lr, [sp]
 8019c08:	f8dc b010 	ldr.w	fp, [ip, #16]
 8019c0c:	47d8      	blx	fp
 8019c0e:	4b71      	ldr	r3, [pc, #452]	; (8019dd4 <LCD_DrawBitmap+0x2e4>)
 8019c10:	6818      	ldr	r0, [r3, #0]
 8019c12:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8019c16:	9b03      	ldr	r3, [sp, #12]
 8019c18:	f8cc 3000 	str.w	r3, [ip]
 8019c1c:	3501      	adds	r5, #1
 8019c1e:	9b05      	ldr	r3, [sp, #20]
 8019c20:	4454      	add	r4, sl
 8019c22:	42ab      	cmp	r3, r5
 8019c24:	d00c      	beq.n	8019c40 <LCD_DrawBitmap+0x150>
 8019c26:	ebca 0104 	rsb	r1, sl, r4
 8019c2a:	2e00      	cmp	r6, #0
 8019c2c:	d1ad      	bne.n	8019b8a <LCD_DrawBitmap+0x9a>
 8019c2e:	9a06      	ldr	r2, [sp, #24]
 8019c30:	9e02      	ldr	r6, [sp, #8]
 8019c32:	4613      	mov	r3, r2
 8019c34:	f892 8000 	ldrb.w	r8, [r2]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	9306      	str	r3, [sp, #24]
 8019c3c:	4633      	mov	r3, r6
 8019c3e:	e7a7      	b.n	8019b90 <LCD_DrawBitmap+0xa0>
 8019c40:	9a07      	ldr	r2, [sp, #28]
 8019c42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c46:	440a      	add	r2, r1
 8019c48:	3301      	adds	r3, #1
 8019c4a:	9207      	str	r2, [sp, #28]
 8019c4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8019c50:	9204      	str	r2, [sp, #16]
 8019c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c54:	429a      	cmp	r2, r3
 8019c56:	f47f af7e 	bne.w	8019b56 <LCD_DrawBitmap+0x66>
 8019c5a:	b011      	add	sp, #68	; 0x44
 8019c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c60:	4b5c      	ldr	r3, [pc, #368]	; (8019dd4 <LCD_DrawBitmap+0x2e4>)
 8019c62:	6819      	ldr	r1, [r3, #0]
 8019c64:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8019c68:	ebc9 0302 	rsb	r3, r9, r2
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	f340 80c1 	ble.w	8019df4 <LCD_DrawBitmap+0x304>
 8019c72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019c74:	1ac4      	subs	r4, r0, r3
 8019c76:	2c00      	cmp	r4, #0
 8019c78:	ddef      	ble.n	8019c5a <LCD_DrawBitmap+0x16a>
 8019c7a:	fb06 7303 	mla	r3, r6, r3, r7
 8019c7e:	9307      	str	r3, [sp, #28]
 8019c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c82:	444b      	add	r3, r9
 8019c84:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8019c88:	3b01      	subs	r3, #1
 8019c8a:	1a1b      	subs	r3, r3, r0
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	dd02      	ble.n	8019c96 <LCD_DrawBitmap+0x1a6>
 8019c90:	1ae4      	subs	r4, r4, r3
 8019c92:	2c00      	cmp	r4, #0
 8019c94:	dde1      	ble.n	8019c5a <LCD_DrawBitmap+0x16a>
 8019c96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019c98:	9d05      	ldr	r5, [sp, #20]
 8019c9a:	1943      	adds	r3, r0, r5
 8019c9c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	1a1b      	subs	r3, r3, r0
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	dd01      	ble.n	8019cac <LCD_DrawBitmap+0x1bc>
 8019ca8:	1aeb      	subs	r3, r5, r3
 8019caa:	9305      	str	r3, [sp, #20]
 8019cac:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8019cb0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019cb2:	429d      	cmp	r5, r3
 8019cb4:	db15      	blt.n	8019ce2 <LCD_DrawBitmap+0x1f2>
 8019cb6:	2500      	movs	r5, #0
 8019cb8:	9b05      	ldr	r3, [sp, #20]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	ddcd      	ble.n	8019c5a <LCD_DrawBitmap+0x16a>
 8019cbe:	7c4e      	ldrb	r6, [r1, #17]
 8019cc0:	4845      	ldr	r0, [pc, #276]	; (8019dd8 <LCD_DrawBitmap+0x2e8>)
 8019cc2:	9f08      	ldr	r7, [sp, #32]
 8019cc4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8019cc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019cca:	68c6      	ldr	r6, [r0, #12]
 8019ccc:	951e      	str	r5, [sp, #120]	; 0x78
 8019cce:	9d07      	ldr	r5, [sp, #28]
 8019cd0:	971f      	str	r7, [sp, #124]	; 0x7c
 8019cd2:	951d      	str	r5, [sp, #116]	; 0x74
 8019cd4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019cd6:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8019cda:	951c      	str	r5, [sp, #112]	; 0x70
 8019cdc:	941a      	str	r4, [sp, #104]	; 0x68
 8019cde:	6874      	ldr	r4, [r6, #4]
 8019ce0:	e720      	b.n	8019b24 <LCD_DrawBitmap+0x34>
 8019ce2:	9e05      	ldr	r6, [sp, #20]
 8019ce4:	1b5d      	subs	r5, r3, r5
 8019ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8019cea:	1b76      	subs	r6, r6, r5
 8019cec:	9605      	str	r6, [sp, #20]
 8019cee:	281f      	cmp	r0, #31
 8019cf0:	d8e2      	bhi.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019cf2:	a601      	add	r6, pc, #4	; (adr r6, 8019cf8 <LCD_DrawBitmap+0x208>)
 8019cf4:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8019cf8:	08019ddd 	.word	0x08019ddd
 8019cfc:	08019db9 	.word	0x08019db9
 8019d00:	08019cb9 	.word	0x08019cb9
 8019d04:	08019da1 	.word	0x08019da1
 8019d08:	08019cb9 	.word	0x08019cb9
 8019d0c:	08019cb9 	.word	0x08019cb9
 8019d10:	08019cb9 	.word	0x08019cb9
 8019d14:	08019d95 	.word	0x08019d95
 8019d18:	08019cb9 	.word	0x08019cb9
 8019d1c:	08019cb9 	.word	0x08019cb9
 8019d20:	08019cb9 	.word	0x08019cb9
 8019d24:	08019cb9 	.word	0x08019cb9
 8019d28:	08019cb9 	.word	0x08019cb9
 8019d2c:	08019cb9 	.word	0x08019cb9
 8019d30:	08019cb9 	.word	0x08019cb9
 8019d34:	08019d87 	.word	0x08019d87
 8019d38:	08019cb9 	.word	0x08019cb9
 8019d3c:	08019cb9 	.word	0x08019cb9
 8019d40:	08019cb9 	.word	0x08019cb9
 8019d44:	08019cb9 	.word	0x08019cb9
 8019d48:	08019cb9 	.word	0x08019cb9
 8019d4c:	08019cb9 	.word	0x08019cb9
 8019d50:	08019cb9 	.word	0x08019cb9
 8019d54:	08019d79 	.word	0x08019d79
 8019d58:	08019cb9 	.word	0x08019cb9
 8019d5c:	08019cb9 	.word	0x08019cb9
 8019d60:	08019cb9 	.word	0x08019cb9
 8019d64:	08019cb9 	.word	0x08019cb9
 8019d68:	08019cb9 	.word	0x08019cb9
 8019d6c:	08019cb9 	.word	0x08019cb9
 8019d70:	08019cb9 	.word	0x08019cb9
 8019d74:	08019d79 	.word	0x08019d79
 8019d78:	9807      	ldr	r0, [sp, #28]
 8019d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d7c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8019d80:	2500      	movs	r5, #0
 8019d82:	9007      	str	r0, [sp, #28]
 8019d84:	e798      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019d86:	9807      	ldr	r0, [sp, #28]
 8019d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d8a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 8019d8e:	2500      	movs	r5, #0
 8019d90:	9007      	str	r0, [sp, #28]
 8019d92:	e791      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019d94:	9807      	ldr	r0, [sp, #28]
 8019d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8019d98:	4428      	add	r0, r5
 8019d9a:	2500      	movs	r5, #0
 8019d9c:	9007      	str	r0, [sp, #28]
 8019d9e:	e78b      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019da0:	9807      	ldr	r0, [sp, #28]
 8019da2:	f025 0301 	bic.w	r3, r5, #1
 8019da6:	eb00 0065 	add.w	r0, r0, r5, asr #1
 8019daa:	f005 0501 	and.w	r5, r5, #1
 8019dae:	9007      	str	r0, [sp, #28]
 8019db0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019db2:	4418      	add	r0, r3
 8019db4:	900f      	str	r0, [sp, #60]	; 0x3c
 8019db6:	e77f      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019db8:	9807      	ldr	r0, [sp, #28]
 8019dba:	f025 0303 	bic.w	r3, r5, #3
 8019dbe:	eb00 00a5 	add.w	r0, r0, r5, asr #2
 8019dc2:	f005 0503 	and.w	r5, r5, #3
 8019dc6:	9007      	str	r0, [sp, #28]
 8019dc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019dca:	4418      	add	r0, r3
 8019dcc:	900f      	str	r0, [sp, #60]	; 0x3c
 8019dce:	e773      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019dd0:	2004678c 	.word	0x2004678c
 8019dd4:	20000018 	.word	0x20000018
 8019dd8:	200467d0 	.word	0x200467d0
 8019ddc:	9807      	ldr	r0, [sp, #28]
 8019dde:	f025 0307 	bic.w	r3, r5, #7
 8019de2:	eb00 00e5 	add.w	r0, r0, r5, asr #3
 8019de6:	f005 0507 	and.w	r5, r5, #7
 8019dea:	9007      	str	r0, [sp, #28]
 8019dec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019dee:	4418      	add	r0, r3
 8019df0:	900f      	str	r0, [sp, #60]	; 0x3c
 8019df2:	e761      	b.n	8019cb8 <LCD_DrawBitmap+0x1c8>
 8019df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019df6:	464a      	mov	r2, r9
 8019df8:	4623      	mov	r3, r4
 8019dfa:	e742      	b.n	8019c82 <LCD_DrawBitmap+0x192>

08019dfc <LCD_SetClipRectMax>:
 8019dfc:	4a04      	ldr	r2, [pc, #16]	; (8019e10 <LCD_SetClipRectMax+0x14>)
 8019dfe:	4b05      	ldr	r3, [pc, #20]	; (8019e14 <LCD_SetClipRectMax+0x18>)
 8019e00:	6811      	ldr	r1, [r2, #0]
 8019e02:	7c4a      	ldrb	r2, [r1, #17]
 8019e04:	3108      	adds	r1, #8
 8019e06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019e0a:	68c3      	ldr	r3, [r0, #12]
 8019e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e0e:	4718      	bx	r3
 8019e10:	20000018 	.word	0x20000018
 8019e14:	200467d0 	.word	0x200467d0

08019e18 <emWin_LCD_Init>:
 8019e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e1c:	4e3e      	ldr	r6, [pc, #248]	; (8019f18 <emWin_LCD_Init+0x100>)
 8019e1e:	b084      	sub	sp, #16
 8019e20:	4f3e      	ldr	r7, [pc, #248]	; (8019f1c <emWin_LCD_Init+0x104>)
 8019e22:	6831      	ldr	r1, [r6, #0]
 8019e24:	7c4b      	ldrb	r3, [r1, #17]
 8019e26:	3108      	adds	r1, #8
 8019e28:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8019e2c:	68c3      	ldr	r3, [r0, #12]
 8019e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e30:	4798      	blx	r3
 8019e32:	f000 fa65 	bl	801a300 <LCD_InitColors>
 8019e36:	4604      	mov	r4, r0
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	d15c      	bne.n	8019ef6 <emWin_LCD_Init+0xde>
 8019e3c:	4605      	mov	r5, r0
 8019e3e:	4628      	mov	r0, r5
 8019e40:	3501      	adds	r5, #1
 8019e42:	f7f9 ffaf 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 8019e46:	210c      	movs	r1, #12
 8019e48:	4603      	mov	r3, r0
 8019e4a:	eb0d 0001 	add.w	r0, sp, r1
 8019e4e:	9303      	str	r3, [sp, #12]
 8019e50:	b143      	cbz	r3, 8019e64 <emWin_LCD_Init+0x4c>
 8019e52:	68db      	ldr	r3, [r3, #12]
 8019e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e56:	4798      	blx	r3
 8019e58:	4603      	mov	r3, r0
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	d05a      	beq.n	8019f14 <emWin_LCD_Init+0xfc>
 8019e5e:	9803      	ldr	r0, [sp, #12]
 8019e60:	4798      	blx	r3
 8019e62:	4304      	orrs	r4, r0
 8019e64:	2d02      	cmp	r5, #2
 8019e66:	d1ea      	bne.n	8019e3e <emWin_LCD_Init+0x26>
 8019e68:	2c00      	cmp	r4, #0
 8019e6a:	d144      	bne.n	8019ef6 <emWin_LCD_Init+0xde>
 8019e6c:	f000 faa2 	bl	801a3b4 <LCD_InitLUT>
 8019e70:	4a2b      	ldr	r2, [pc, #172]	; (8019f20 <emWin_LCD_Init+0x108>)
 8019e72:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8019e76:	6812      	ldr	r2, [r2, #0]
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d038      	beq.n	8019eee <emWin_LCD_Init+0xd6>
 8019e7c:	2401      	movs	r4, #1
 8019e7e:	4d29      	ldr	r5, [pc, #164]	; (8019f24 <emWin_LCD_Init+0x10c>)
 8019e80:	4620      	mov	r0, r4
 8019e82:	f7f9 ff8f 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 8019e86:	4603      	mov	r3, r0
 8019e88:	4620      	mov	r0, r4
 8019e8a:	3c01      	subs	r4, #1
 8019e8c:	9303      	str	r3, [sp, #12]
 8019e8e:	b363      	cbz	r3, 8019eea <emWin_LCD_Init+0xd2>
 8019e90:	f7fc fd46 	bl	8016920 <GUI_SelectLayer>
 8019e94:	682b      	ldr	r3, [r5, #0]
 8019e96:	2004      	movs	r0, #4
 8019e98:	689b      	ldr	r3, [r3, #8]
 8019e9a:	4798      	blx	r3
 8019e9c:	6830      	ldr	r0, [r6, #0]
 8019e9e:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8019ea2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8019ea6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019eaa:	4563      	cmp	r3, ip
 8019eac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8019eb0:	bfa8      	it	ge
 8019eb2:	4663      	movge	r3, ip
 8019eb4:	428b      	cmp	r3, r1
 8019eb6:	db0a      	blt.n	8019ece <emWin_LCD_Init+0xb6>
 8019eb8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8019ebc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ec0:	45e6      	cmp	lr, ip
 8019ec2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019ec6:	bfa8      	it	ge
 8019ec8:	46e6      	movge	lr, ip
 8019eca:	4596      	cmp	lr, r2
 8019ecc:	da17      	bge.n	8019efe <emWin_LCD_Init+0xe6>
 8019ece:	682b      	ldr	r3, [r5, #0]
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	689b      	ldr	r3, [r3, #8]
 8019ed4:	4798      	blx	r3
 8019ed6:	9b03      	ldr	r3, [sp, #12]
 8019ed8:	210e      	movs	r1, #14
 8019eda:	a803      	add	r0, sp, #12
 8019edc:	68db      	ldr	r3, [r3, #12]
 8019ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ee0:	4798      	blx	r3
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	b108      	cbz	r0, 8019eea <emWin_LCD_Init+0xd2>
 8019ee6:	9803      	ldr	r0, [sp, #12]
 8019ee8:	4798      	blx	r3
 8019eea:	1c63      	adds	r3, r4, #1
 8019eec:	d1c8      	bne.n	8019e80 <emWin_LCD_Init+0x68>
 8019eee:	2000      	movs	r0, #0
 8019ef0:	b004      	add	sp, #16
 8019ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	b004      	add	sp, #16
 8019efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019efe:	7c40      	ldrb	r0, [r0, #17]
 8019f00:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8019f04:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8019f08:	f8cd e000 	str.w	lr, [sp]
 8019f0c:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8019f10:	47c0      	blx	r8
 8019f12:	e7dc      	b.n	8019ece <emWin_LCD_Init+0xb6>
 8019f14:	2001      	movs	r0, #1
 8019f16:	e7ef      	b.n	8019ef8 <emWin_LCD_Init+0xe0>
 8019f18:	20000018 	.word	0x20000018
 8019f1c:	200467d0 	.word	0x200467d0
 8019f20:	20000014 	.word	0x20000014
 8019f24:	2000005c 	.word	0x2000005c

08019f28 <LCD_Color2Index>:
 8019f28:	4a04      	ldr	r2, [pc, #16]	; (8019f3c <LCD_Color2Index+0x14>)
 8019f2a:	4b05      	ldr	r3, [pc, #20]	; (8019f40 <LCD_Color2Index+0x18>)
 8019f2c:	6812      	ldr	r2, [r2, #0]
 8019f2e:	7c52      	ldrb	r2, [r2, #17]
 8019f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f34:	691b      	ldr	r3, [r3, #16]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	4718      	bx	r3
 8019f3a:	bf00      	nop
 8019f3c:	20000018 	.word	0x20000018
 8019f40:	200467d0 	.word	0x200467d0

08019f44 <LCD_Index2Color>:
 8019f44:	4a04      	ldr	r2, [pc, #16]	; (8019f58 <LCD_Index2Color+0x14>)
 8019f46:	4b05      	ldr	r3, [pc, #20]	; (8019f5c <LCD_Index2Color+0x18>)
 8019f48:	6812      	ldr	r2, [r2, #0]
 8019f4a:	7c52      	ldrb	r2, [r2, #17]
 8019f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f50:	691b      	ldr	r3, [r3, #16]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	4718      	bx	r3
 8019f56:	bf00      	nop
 8019f58:	20000018 	.word	0x20000018
 8019f5c:	200467d0 	.word	0x200467d0

08019f60 <LCD_SetColorIndex>:
 8019f60:	4b04      	ldr	r3, [pc, #16]	; (8019f74 <LCD_SetColorIndex+0x14>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	7c1a      	ldrb	r2, [r3, #16]
 8019f66:	0752      	lsls	r2, r2, #29
 8019f68:	bf4c      	ite	mi
 8019f6a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8019f6c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8019f6e:	6018      	str	r0, [r3, #0]
 8019f70:	4770      	bx	lr
 8019f72:	bf00      	nop
 8019f74:	20000018 	.word	0x20000018

08019f78 <LCD_SetBkColorIndex>:
 8019f78:	4b04      	ldr	r3, [pc, #16]	; (8019f8c <LCD_SetBkColorIndex+0x14>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	7c1a      	ldrb	r2, [r3, #16]
 8019f7e:	0752      	lsls	r2, r2, #29
 8019f80:	bf4c      	ite	mi
 8019f82:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8019f84:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8019f86:	6018      	str	r0, [r3, #0]
 8019f88:	4770      	bx	lr
 8019f8a:	bf00      	nop
 8019f8c:	20000018 	.word	0x20000018

08019f90 <LCD_SetBkColor>:
 8019f90:	4b01      	ldr	r3, [pc, #4]	; (8019f98 <LCD_SetBkColor+0x8>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	4718      	bx	r3
 8019f98:	2000005c 	.word	0x2000005c

08019f9c <LCD_SetColor>:
 8019f9c:	4b01      	ldr	r3, [pc, #4]	; (8019fa4 <LCD_SetColor+0x8>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	4718      	bx	r3
 8019fa4:	2000005c 	.word	0x2000005c

08019fa8 <LCD_SetPixelAA4_NoTrans>:
 8019fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fac:	4d25      	ldr	r5, [pc, #148]	; (801a044 <LCD_SetPixelAA4_NoTrans+0x9c>)
 8019fae:	682b      	ldr	r3, [r5, #0]
 8019fb0:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8019fb4:	428c      	cmp	r4, r1
 8019fb6:	dc31      	bgt.n	801a01c <LCD_SetPixelAA4_NoTrans+0x74>
 8019fb8:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8019fbc:	42a1      	cmp	r1, r4
 8019fbe:	dc2d      	bgt.n	801a01c <LCD_SetPixelAA4_NoTrans+0x74>
 8019fc0:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8019fc4:	4284      	cmp	r4, r0
 8019fc6:	dc29      	bgt.n	801a01c <LCD_SetPixelAA4_NoTrans+0x74>
 8019fc8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019fcc:	42a0      	cmp	r0, r4
 8019fce:	dc25      	bgt.n	801a01c <LCD_SetPixelAA4_NoTrans+0x74>
 8019fd0:	b332      	cbz	r2, 801a020 <LCD_SetPixelAA4_NoTrans+0x78>
 8019fd2:	2a0f      	cmp	r2, #15
 8019fd4:	d02d      	beq.n	801a032 <LCD_SetPixelAA4_NoTrans+0x8a>
 8019fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fd8:	4606      	mov	r6, r0
 8019fda:	460c      	mov	r4, r1
 8019fdc:	4617      	mov	r7, r2
 8019fde:	6818      	ldr	r0, [r3, #0]
 8019fe0:	f7ff ffb0 	bl	8019f44 <LCD_Index2Color>
 8019fe4:	682b      	ldr	r3, [r5, #0]
 8019fe6:	4680      	mov	r8, r0
 8019fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fea:	6818      	ldr	r0, [r3, #0]
 8019fec:	f7ff ffaa 	bl	8019f44 <LCD_Index2Color>
 8019ff0:	4b15      	ldr	r3, [pc, #84]	; (801a048 <LCD_SetPixelAA4_NoTrans+0xa0>)
 8019ff2:	4601      	mov	r1, r0
 8019ff4:	463a      	mov	r2, r7
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	4640      	mov	r0, r8
 8019ffa:	4798      	blx	r3
 8019ffc:	f7ff ff94 	bl	8019f28 <LCD_Color2Index>
 801a000:	682a      	ldr	r2, [r5, #0]
 801a002:	4603      	mov	r3, r0
 801a004:	4d11      	ldr	r5, [pc, #68]	; (801a04c <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a006:	7c50      	ldrb	r0, [r2, #17]
 801a008:	4631      	mov	r1, r6
 801a00a:	4622      	mov	r2, r4
 801a00c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a010:	68c4      	ldr	r4, [r0, #12]
 801a012:	69a4      	ldr	r4, [r4, #24]
 801a014:	46a4      	mov	ip, r4
 801a016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a01a:	4760      	bx	ip
 801a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a020:	7c5d      	ldrb	r5, [r3, #17]
 801a022:	460a      	mov	r2, r1
 801a024:	4c09      	ldr	r4, [pc, #36]	; (801a04c <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a026:	4601      	mov	r1, r0
 801a028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a02a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	e7ee      	b.n	801a010 <LCD_SetPixelAA4_NoTrans+0x68>
 801a032:	7c5d      	ldrb	r5, [r3, #17]
 801a034:	460a      	mov	r2, r1
 801a036:	4c05      	ldr	r4, [pc, #20]	; (801a04c <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a038:	4601      	mov	r1, r0
 801a03a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a03c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	e7e5      	b.n	801a010 <LCD_SetPixelAA4_NoTrans+0x68>
 801a044:	20000018 	.word	0x20000018
 801a048:	20000060 	.word	0x20000060
 801a04c:	200467d0 	.word	0x200467d0

0801a050 <LCD_SetPixelAA8_NoTrans>:
 801a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a054:	4d27      	ldr	r5, [pc, #156]	; (801a0f4 <LCD_SetPixelAA8_NoTrans+0xa4>)
 801a056:	682b      	ldr	r3, [r5, #0]
 801a058:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a05c:	428c      	cmp	r4, r1
 801a05e:	dc34      	bgt.n	801a0ca <LCD_SetPixelAA8_NoTrans+0x7a>
 801a060:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a064:	42a1      	cmp	r1, r4
 801a066:	dc30      	bgt.n	801a0ca <LCD_SetPixelAA8_NoTrans+0x7a>
 801a068:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a06c:	4284      	cmp	r4, r0
 801a06e:	dc2c      	bgt.n	801a0ca <LCD_SetPixelAA8_NoTrans+0x7a>
 801a070:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a074:	42a0      	cmp	r0, r4
 801a076:	dc28      	bgt.n	801a0ca <LCD_SetPixelAA8_NoTrans+0x7a>
 801a078:	b34a      	cbz	r2, 801a0ce <LCD_SetPixelAA8_NoTrans+0x7e>
 801a07a:	2aff      	cmp	r2, #255	; 0xff
 801a07c:	d030      	beq.n	801a0e0 <LCD_SetPixelAA8_NoTrans+0x90>
 801a07e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a080:	4606      	mov	r6, r0
 801a082:	460c      	mov	r4, r1
 801a084:	4617      	mov	r7, r2
 801a086:	6818      	ldr	r0, [r3, #0]
 801a088:	f7ff ff5c 	bl	8019f44 <LCD_Index2Color>
 801a08c:	682b      	ldr	r3, [r5, #0]
 801a08e:	4680      	mov	r8, r0
 801a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	f7ff ff56 	bl	8019f44 <LCD_Index2Color>
 801a098:	4b17      	ldr	r3, [pc, #92]	; (801a0f8 <LCD_SetPixelAA8_NoTrans+0xa8>)
 801a09a:	4601      	mov	r1, r0
 801a09c:	463a      	mov	r2, r7
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4640      	mov	r0, r8
 801a0a2:	4798      	blx	r3
 801a0a4:	4b15      	ldr	r3, [pc, #84]	; (801a0fc <LCD_SetPixelAA8_NoTrans+0xac>)
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	4318      	orrs	r0, r3
 801a0aa:	f7ff ff3d 	bl	8019f28 <LCD_Color2Index>
 801a0ae:	682a      	ldr	r2, [r5, #0]
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	4d13      	ldr	r5, [pc, #76]	; (801a100 <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a0b4:	7c50      	ldrb	r0, [r2, #17]
 801a0b6:	4631      	mov	r1, r6
 801a0b8:	4622      	mov	r2, r4
 801a0ba:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a0be:	68c4      	ldr	r4, [r0, #12]
 801a0c0:	69a4      	ldr	r4, [r4, #24]
 801a0c2:	46a4      	mov	ip, r4
 801a0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0c8:	4760      	bx	ip
 801a0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0ce:	7c5d      	ldrb	r5, [r3, #17]
 801a0d0:	460a      	mov	r2, r1
 801a0d2:	4c0b      	ldr	r4, [pc, #44]	; (801a100 <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a0d4:	4601      	mov	r1, r0
 801a0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0d8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	e7ee      	b.n	801a0be <LCD_SetPixelAA8_NoTrans+0x6e>
 801a0e0:	7c5d      	ldrb	r5, [r3, #17]
 801a0e2:	460a      	mov	r2, r1
 801a0e4:	4c06      	ldr	r4, [pc, #24]	; (801a100 <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a0e6:	4601      	mov	r1, r0
 801a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0ea:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	e7e5      	b.n	801a0be <LCD_SetPixelAA8_NoTrans+0x6e>
 801a0f2:	bf00      	nop
 801a0f4:	20000018 	.word	0x20000018
 801a0f8:	20000044 	.word	0x20000044
 801a0fc:	20000060 	.word	0x20000060
 801a100:	200467d0 	.word	0x200467d0

0801a104 <LCD_AA_MixColors16>:
 801a104:	b508      	push	{r3, lr}
 801a106:	0e0b      	lsrs	r3, r1, #24
 801a108:	d103      	bne.n	801a112 <LCD_AA_MixColors16+0xe>
 801a10a:	0e03      	lsrs	r3, r0, #24
 801a10c:	2bff      	cmp	r3, #255	; 0xff
 801a10e:	d00f      	beq.n	801a130 <LCD_AA_MixColors16+0x2c>
 801a110:	b14b      	cbz	r3, 801a126 <LCD_AA_MixColors16+0x22>
 801a112:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a116:	4b0b      	ldr	r3, [pc, #44]	; (801a144 <LCD_AA_MixColors16+0x40>)
 801a118:	b2d2      	uxtb	r2, r2
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	4798      	blx	r3
 801a11e:	4b0a      	ldr	r3, [pc, #40]	; (801a148 <LCD_AA_MixColors16+0x44>)
 801a120:	685a      	ldr	r2, [r3, #4]
 801a122:	4310      	orrs	r0, r2
 801a124:	bd08      	pop	{r3, pc}
 801a126:	4b08      	ldr	r3, [pc, #32]	; (801a148 <LCD_AA_MixColors16+0x44>)
 801a128:	685a      	ldr	r2, [r3, #4]
 801a12a:	ea41 0002 	orr.w	r0, r1, r2
 801a12e:	bd08      	pop	{r3, pc}
 801a130:	4b05      	ldr	r3, [pc, #20]	; (801a148 <LCD_AA_MixColors16+0x44>)
 801a132:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801a136:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a13a:	685b      	ldr	r3, [r3, #4]
 801a13c:	4318      	orrs	r0, r3
 801a13e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 801a142:	bd08      	pop	{r3, pc}
 801a144:	20000044 	.word	0x20000044
 801a148:	20000060 	.word	0x20000060

0801a14c <LCD_SetPixelAA4_Trans>:
 801a14c:	2a00      	cmp	r2, #0
 801a14e:	d039      	beq.n	801a1c4 <LCD_SetPixelAA4_Trans+0x78>
 801a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a154:	4f20      	ldr	r7, [pc, #128]	; (801a1d8 <LCD_SetPixelAA4_Trans+0x8c>)
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a15c:	42a1      	cmp	r1, r4
 801a15e:	db2f      	blt.n	801a1c0 <LCD_SetPixelAA4_Trans+0x74>
 801a160:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a164:	42a1      	cmp	r1, r4
 801a166:	dc2b      	bgt.n	801a1c0 <LCD_SetPixelAA4_Trans+0x74>
 801a168:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a16c:	42a0      	cmp	r0, r4
 801a16e:	db27      	blt.n	801a1c0 <LCD_SetPixelAA4_Trans+0x74>
 801a170:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a174:	42a0      	cmp	r0, r4
 801a176:	dc23      	bgt.n	801a1c0 <LCD_SetPixelAA4_Trans+0x74>
 801a178:	2a0e      	cmp	r2, #14
 801a17a:	d824      	bhi.n	801a1c6 <LCD_SetPixelAA4_Trans+0x7a>
 801a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a17e:	460d      	mov	r5, r1
 801a180:	4606      	mov	r6, r0
 801a182:	4614      	mov	r4, r2
 801a184:	6818      	ldr	r0, [r3, #0]
 801a186:	f7ff fedd 	bl	8019f44 <LCD_Index2Color>
 801a18a:	4629      	mov	r1, r5
 801a18c:	4680      	mov	r8, r0
 801a18e:	4630      	mov	r0, r6
 801a190:	f000 fb66 	bl	801a860 <LCD_GetPixelColor>
 801a194:	4b11      	ldr	r3, [pc, #68]	; (801a1dc <LCD_SetPixelAA4_Trans+0x90>)
 801a196:	4601      	mov	r1, r0
 801a198:	4622      	mov	r2, r4
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	4640      	mov	r0, r8
 801a19e:	4798      	blx	r3
 801a1a0:	4c0f      	ldr	r4, [pc, #60]	; (801a1e0 <LCD_SetPixelAA4_Trans+0x94>)
 801a1a2:	f7ff fec1 	bl	8019f28 <LCD_Color2Index>
 801a1a6:	683a      	ldr	r2, [r7, #0]
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	4631      	mov	r1, r6
 801a1ac:	7c50      	ldrb	r0, [r2, #17]
 801a1ae:	462a      	mov	r2, r5
 801a1b0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a1b4:	68c4      	ldr	r4, [r0, #12]
 801a1b6:	69a4      	ldr	r4, [r4, #24]
 801a1b8:	46a4      	mov	ip, r4
 801a1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1be:	4760      	bx	ip
 801a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1c4:	4770      	bx	lr
 801a1c6:	7c5d      	ldrb	r5, [r3, #17]
 801a1c8:	460a      	mov	r2, r1
 801a1ca:	4c05      	ldr	r4, [pc, #20]	; (801a1e0 <LCD_SetPixelAA4_Trans+0x94>)
 801a1cc:	4601      	mov	r1, r0
 801a1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1d0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	e7ed      	b.n	801a1b4 <LCD_SetPixelAA4_Trans+0x68>
 801a1d8:	20000018 	.word	0x20000018
 801a1dc:	20000060 	.word	0x20000060
 801a1e0:	200467d0 	.word	0x200467d0

0801a1e4 <LCD_SetPixelAA8_Trans>:
 801a1e4:	2a00      	cmp	r2, #0
 801a1e6:	d03c      	beq.n	801a262 <LCD_SetPixelAA8_Trans+0x7e>
 801a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1ec:	4f22      	ldr	r7, [pc, #136]	; (801a278 <LCD_SetPixelAA8_Trans+0x94>)
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a1f4:	42a1      	cmp	r1, r4
 801a1f6:	db32      	blt.n	801a25e <LCD_SetPixelAA8_Trans+0x7a>
 801a1f8:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a1fc:	42a1      	cmp	r1, r4
 801a1fe:	dc2e      	bgt.n	801a25e <LCD_SetPixelAA8_Trans+0x7a>
 801a200:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a204:	42a0      	cmp	r0, r4
 801a206:	db2a      	blt.n	801a25e <LCD_SetPixelAA8_Trans+0x7a>
 801a208:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a20c:	42a0      	cmp	r0, r4
 801a20e:	dc26      	bgt.n	801a25e <LCD_SetPixelAA8_Trans+0x7a>
 801a210:	2aff      	cmp	r2, #255	; 0xff
 801a212:	d027      	beq.n	801a264 <LCD_SetPixelAA8_Trans+0x80>
 801a214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a216:	460d      	mov	r5, r1
 801a218:	4606      	mov	r6, r0
 801a21a:	4614      	mov	r4, r2
 801a21c:	6818      	ldr	r0, [r3, #0]
 801a21e:	f7ff fe91 	bl	8019f44 <LCD_Index2Color>
 801a222:	4629      	mov	r1, r5
 801a224:	4680      	mov	r8, r0
 801a226:	4630      	mov	r0, r6
 801a228:	f000 fb1a 	bl	801a860 <LCD_GetPixelColor>
 801a22c:	4b13      	ldr	r3, [pc, #76]	; (801a27c <LCD_SetPixelAA8_Trans+0x98>)
 801a22e:	4601      	mov	r1, r0
 801a230:	4622      	mov	r2, r4
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	4640      	mov	r0, r8
 801a236:	4798      	blx	r3
 801a238:	4b11      	ldr	r3, [pc, #68]	; (801a280 <LCD_SetPixelAA8_Trans+0x9c>)
 801a23a:	4c12      	ldr	r4, [pc, #72]	; (801a284 <LCD_SetPixelAA8_Trans+0xa0>)
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	4318      	orrs	r0, r3
 801a240:	f7ff fe72 	bl	8019f28 <LCD_Color2Index>
 801a244:	683a      	ldr	r2, [r7, #0]
 801a246:	4603      	mov	r3, r0
 801a248:	4631      	mov	r1, r6
 801a24a:	7c50      	ldrb	r0, [r2, #17]
 801a24c:	462a      	mov	r2, r5
 801a24e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a252:	68c4      	ldr	r4, [r0, #12]
 801a254:	69a4      	ldr	r4, [r4, #24]
 801a256:	46a4      	mov	ip, r4
 801a258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a25c:	4760      	bx	ip
 801a25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a262:	4770      	bx	lr
 801a264:	7c5d      	ldrb	r5, [r3, #17]
 801a266:	460a      	mov	r2, r1
 801a268:	4c06      	ldr	r4, [pc, #24]	; (801a284 <LCD_SetPixelAA8_Trans+0xa0>)
 801a26a:	4601      	mov	r1, r0
 801a26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a26e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	e7ed      	b.n	801a252 <LCD_SetPixelAA8_Trans+0x6e>
 801a276:	bf00      	nop
 801a278:	20000018 	.word	0x20000018
 801a27c:	20000044 	.word	0x20000044
 801a280:	20000060 	.word	0x20000060
 801a284:	200467d0 	.word	0x200467d0

0801a288 <LCD_AA_SetOrMask>:
 801a288:	4b02      	ldr	r3, [pc, #8]	; (801a294 <LCD_AA_SetOrMask+0xc>)
 801a28a:	685a      	ldr	r2, [r3, #4]
 801a28c:	6058      	str	r0, [r3, #4]
 801a28e:	4610      	mov	r0, r2
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	20000060 	.word	0x20000060

0801a298 <LCD__GetPfSetPixel>:
 801a298:	2804      	cmp	r0, #4
 801a29a:	d005      	beq.n	801a2a8 <LCD__GetPfSetPixel+0x10>
 801a29c:	2808      	cmp	r0, #8
 801a29e:	d00d      	beq.n	801a2bc <LCD__GetPfSetPixel+0x24>
 801a2a0:	2802      	cmp	r0, #2
 801a2a2:	d001      	beq.n	801a2a8 <LCD__GetPfSetPixel+0x10>
 801a2a4:	2000      	movs	r0, #0
 801a2a6:	4770      	bx	lr
 801a2a8:	4a09      	ldr	r2, [pc, #36]	; (801a2d0 <LCD__GetPfSetPixel+0x38>)
 801a2aa:	4b0a      	ldr	r3, [pc, #40]	; (801a2d4 <LCD__GetPfSetPixel+0x3c>)
 801a2ac:	6812      	ldr	r2, [r2, #0]
 801a2ae:	480a      	ldr	r0, [pc, #40]	; (801a2d8 <LCD__GetPfSetPixel+0x40>)
 801a2b0:	7c12      	ldrb	r2, [r2, #16]
 801a2b2:	f012 0f02 	tst.w	r2, #2
 801a2b6:	bf08      	it	eq
 801a2b8:	4618      	moveq	r0, r3
 801a2ba:	4770      	bx	lr
 801a2bc:	4a04      	ldr	r2, [pc, #16]	; (801a2d0 <LCD__GetPfSetPixel+0x38>)
 801a2be:	4b07      	ldr	r3, [pc, #28]	; (801a2dc <LCD__GetPfSetPixel+0x44>)
 801a2c0:	6812      	ldr	r2, [r2, #0]
 801a2c2:	4807      	ldr	r0, [pc, #28]	; (801a2e0 <LCD__GetPfSetPixel+0x48>)
 801a2c4:	7c12      	ldrb	r2, [r2, #16]
 801a2c6:	f012 0f02 	tst.w	r2, #2
 801a2ca:	bf08      	it	eq
 801a2cc:	4618      	moveq	r0, r3
 801a2ce:	4770      	bx	lr
 801a2d0:	20000018 	.word	0x20000018
 801a2d4:	08019fa9 	.word	0x08019fa9
 801a2d8:	0801a14d 	.word	0x0801a14d
 801a2dc:	0801a051 	.word	0x0801a051
 801a2e0:	0801a1e5 	.word	0x0801a1e5

0801a2e4 <_OnExit>:
 801a2e4:	b510      	push	{r4, lr}
 801a2e6:	4c04      	ldr	r4, [pc, #16]	; (801a2f8 <_OnExit+0x14>)
 801a2e8:	6820      	ldr	r0, [r4, #0]
 801a2ea:	f7f8 f9bd 	bl	8012668 <GUI_ALLOC_FreeFixedBlock>
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	4a02      	ldr	r2, [pc, #8]	; (801a2fc <_OnExit+0x18>)
 801a2f2:	6023      	str	r3, [r4, #0]
 801a2f4:	6013      	str	r3, [r2, #0]
 801a2f6:	bd10      	pop	{r4, pc}
 801a2f8:	200467f0 	.word	0x200467f0
 801a2fc:	200003c8 	.word	0x200003c8

0801a300 <LCD_InitColors>:
 801a300:	b538      	push	{r3, r4, r5, lr}
 801a302:	4d0b      	ldr	r5, [pc, #44]	; (801a330 <LCD_InitColors+0x30>)
 801a304:	682c      	ldr	r4, [r5, #0]
 801a306:	b10c      	cbz	r4, 801a30c <LCD_InitColors+0xc>
 801a308:	2000      	movs	r0, #0
 801a30a:	bd38      	pop	{r3, r4, r5, pc}
 801a30c:	4b09      	ldr	r3, [pc, #36]	; (801a334 <LCD_InitColors+0x34>)
 801a30e:	6818      	ldr	r0, [r3, #0]
 801a310:	0080      	lsls	r0, r0, #2
 801a312:	f7f8 f9b3 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801a316:	6028      	str	r0, [r5, #0]
 801a318:	b138      	cbz	r0, 801a32a <LCD_InitColors+0x2a>
 801a31a:	4b07      	ldr	r3, [pc, #28]	; (801a338 <LCD_InitColors+0x38>)
 801a31c:	4807      	ldr	r0, [pc, #28]	; (801a33c <LCD_InitColors+0x3c>)
 801a31e:	f840 3f04 	str.w	r3, [r0, #4]!
 801a322:	f7f9 fd01 	bl	8013d28 <GUI__RegisterExit>
 801a326:	4620      	mov	r0, r4
 801a328:	bd38      	pop	{r3, r4, r5, pc}
 801a32a:	2001      	movs	r0, #1
 801a32c:	bd38      	pop	{r3, r4, r5, pc}
 801a32e:	bf00      	nop
 801a330:	200467f0 	.word	0x200467f0
 801a334:	20000078 	.word	0x20000078
 801a338:	0801a2e5 	.word	0x0801a2e5
 801a33c:	200003c8 	.word	0x200003c8

0801a340 <LCD_GetpPalConvTableBM>:
 801a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a344:	b360      	cbz	r0, 801a3a0 <LCD_GetpPalConvTableBM+0x60>
 801a346:	6885      	ldr	r5, [r0, #8]
 801a348:	b365      	cbz	r5, 801a3a4 <LCD_GetpPalConvTableBM+0x64>
 801a34a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801a3b0 <LCD_GetpPalConvTableBM+0x70>
 801a34e:	f8d8 6000 	ldr.w	r6, [r8]
 801a352:	b306      	cbz	r6, 801a396 <LCD_GetpPalConvTableBM+0x56>
 801a354:	6807      	ldr	r7, [r0, #0]
 801a356:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 801a35a:	dc1f      	bgt.n	801a39c <LCD_GetpPalConvTableBM+0x5c>
 801a35c:	4b12      	ldr	r3, [pc, #72]	; (801a3a8 <LCD_GetpPalConvTableBM+0x68>)
 801a35e:	4681      	mov	r9, r0
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	429f      	cmp	r7, r3
 801a364:	bfa8      	it	ge
 801a366:	461f      	movge	r7, r3
 801a368:	2f00      	cmp	r7, #0
 801a36a:	dd0d      	ble.n	801a388 <LCD_GetpPalConvTableBM+0x48>
 801a36c:	3d04      	subs	r5, #4
 801a36e:	2400      	movs	r4, #0
 801a370:	e001      	b.n	801a376 <LCD_GetpPalConvTableBM+0x36>
 801a372:	f8d8 6000 	ldr.w	r6, [r8]
 801a376:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801a37a:	f7ff fdd5 	bl	8019f28 <LCD_Color2Index>
 801a37e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 801a382:	3401      	adds	r4, #1
 801a384:	42bc      	cmp	r4, r7
 801a386:	d1f4      	bne.n	801a372 <LCD_GetpPalConvTableBM+0x32>
 801a388:	4b08      	ldr	r3, [pc, #32]	; (801a3ac <LCD_GetpPalConvTableBM+0x6c>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	b10b      	cbz	r3, 801a392 <LCD_GetpPalConvTableBM+0x52>
 801a38e:	4648      	mov	r0, r9
 801a390:	4798      	blx	r3
 801a392:	f8d8 6000 	ldr.w	r6, [r8]
 801a396:	4630      	mov	r0, r6
 801a398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a39c:	2600      	movs	r6, #0
 801a39e:	e7fa      	b.n	801a396 <LCD_GetpPalConvTableBM+0x56>
 801a3a0:	4606      	mov	r6, r0
 801a3a2:	e7f8      	b.n	801a396 <LCD_GetpPalConvTableBM+0x56>
 801a3a4:	462e      	mov	r6, r5
 801a3a6:	e7f6      	b.n	801a396 <LCD_GetpPalConvTableBM+0x56>
 801a3a8:	20000078 	.word	0x20000078
 801a3ac:	200003c8 	.word	0x200003c8
 801a3b0:	200467f0 	.word	0x200467f0

0801a3b4 <LCD_InitLUT>:
 801a3b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3b8:	f000 f9dc 	bl	801a774 <LCD_GetNumLayers>
 801a3bc:	f1b0 0900 	subs.w	r9, r0, #0
 801a3c0:	dd2f      	ble.n	801a422 <LCD_InitLUT+0x6e>
 801a3c2:	2500      	movs	r5, #0
 801a3c4:	4f18      	ldr	r7, [pc, #96]	; (801a428 <LCD_InitLUT+0x74>)
 801a3c6:	f8df b068 	ldr.w	fp, [pc, #104]	; 801a430 <LCD_InitLUT+0x7c>
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	f7f9 fcea 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a3d0:	b320      	cbz	r0, 801a41c <LCD_InitLUT+0x68>
 801a3d2:	683b      	ldr	r3, [r7, #0]
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	f893 8011 	ldrb.w	r8, [r3, #17]
 801a3da:	745d      	strb	r5, [r3, #17]
 801a3dc:	f000 f87a 	bl	801a4d4 <LCD_GetBitsPerPixelEx>
 801a3e0:	2808      	cmp	r0, #8
 801a3e2:	dc18      	bgt.n	801a416 <LCD_InitLUT+0x62>
 801a3e4:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 801a3e8:	4a10      	ldr	r2, [pc, #64]	; (801a42c <LCD_InitLUT+0x78>)
 801a3ea:	691b      	ldr	r3, [r3, #16]
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	d012      	beq.n	801a416 <LCD_InitLUT+0x62>
 801a3f0:	4628      	mov	r0, r5
 801a3f2:	f000 f87f 	bl	801a4f4 <LCD_GetNumColorsEx>
 801a3f6:	1e06      	subs	r6, r0, #0
 801a3f8:	dd0d      	ble.n	801a416 <LCD_InitLUT+0x62>
 801a3fa:	2400      	movs	r4, #0
 801a3fc:	fa5f fa84 	uxtb.w	sl, r4
 801a400:	3401      	adds	r4, #1
 801a402:	4650      	mov	r0, sl
 801a404:	f7ff fd9e 	bl	8019f44 <LCD_Index2Color>
 801a408:	4651      	mov	r1, sl
 801a40a:	4602      	mov	r2, r0
 801a40c:	4628      	mov	r0, r5
 801a40e:	f000 ff63 	bl	801b2d8 <LCD_SetLUTEntryEx>
 801a412:	42a6      	cmp	r6, r4
 801a414:	d1f2      	bne.n	801a3fc <LCD_InitLUT+0x48>
 801a416:	683b      	ldr	r3, [r7, #0]
 801a418:	f883 8011 	strb.w	r8, [r3, #17]
 801a41c:	3501      	adds	r5, #1
 801a41e:	45a9      	cmp	r9, r5
 801a420:	d1d3      	bne.n	801a3ca <LCD_InitLUT+0x16>
 801a422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a426:	bf00      	nop
 801a428:	20000018 	.word	0x20000018
 801a42c:	08033eb4 	.word	0x08033eb4
 801a430:	200467d0 	.word	0x200467d0

0801a434 <LCD_GetBkColorIndex>:
 801a434:	4b02      	ldr	r3, [pc, #8]	; (801a440 <LCD_GetBkColorIndex+0xc>)
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a43a:	6818      	ldr	r0, [r3, #0]
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	20000018 	.word	0x20000018

0801a444 <LCD_GetColorIndex>:
 801a444:	4b02      	ldr	r3, [pc, #8]	; (801a450 <LCD_GetColorIndex+0xc>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a44a:	6818      	ldr	r0, [r3, #0]
 801a44c:	4770      	bx	lr
 801a44e:	bf00      	nop
 801a450:	20000018 	.word	0x20000018

0801a454 <LCD_GetXSizeEx>:
 801a454:	2801      	cmp	r0, #1
 801a456:	dd01      	ble.n	801a45c <LCD_GetXSizeEx+0x8>
 801a458:	2000      	movs	r0, #0
 801a45a:	4770      	bx	lr
 801a45c:	b510      	push	{r4, lr}
 801a45e:	f7f9 fca1 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a462:	b128      	cbz	r0, 801a470 <LCD_GetXSizeEx+0x1c>
 801a464:	68c3      	ldr	r3, [r0, #12]
 801a466:	2101      	movs	r1, #1
 801a468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a46e:	4718      	bx	r3
 801a470:	2000      	movs	r0, #0
 801a472:	bd10      	pop	{r4, pc}

0801a474 <LCD_GetYSizeEx>:
 801a474:	2801      	cmp	r0, #1
 801a476:	dd01      	ble.n	801a47c <LCD_GetYSizeEx+0x8>
 801a478:	2000      	movs	r0, #0
 801a47a:	4770      	bx	lr
 801a47c:	b510      	push	{r4, lr}
 801a47e:	f7f9 fc91 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a482:	b128      	cbz	r0, 801a490 <LCD_GetYSizeEx+0x1c>
 801a484:	68c3      	ldr	r3, [r0, #12]
 801a486:	2102      	movs	r1, #2
 801a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a48e:	4718      	bx	r3
 801a490:	2000      	movs	r0, #0
 801a492:	bd10      	pop	{r4, pc}

0801a494 <LCD_GetVXSizeEx>:
 801a494:	2801      	cmp	r0, #1
 801a496:	dd01      	ble.n	801a49c <LCD_GetVXSizeEx+0x8>
 801a498:	2000      	movs	r0, #0
 801a49a:	4770      	bx	lr
 801a49c:	b510      	push	{r4, lr}
 801a49e:	f7f9 fc81 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a4a2:	b128      	cbz	r0, 801a4b0 <LCD_GetVXSizeEx+0x1c>
 801a4a4:	68c3      	ldr	r3, [r0, #12]
 801a4a6:	2103      	movs	r1, #3
 801a4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4ae:	4718      	bx	r3
 801a4b0:	2000      	movs	r0, #0
 801a4b2:	bd10      	pop	{r4, pc}

0801a4b4 <LCD_GetVYSizeEx>:
 801a4b4:	2801      	cmp	r0, #1
 801a4b6:	dd01      	ble.n	801a4bc <LCD_GetVYSizeEx+0x8>
 801a4b8:	2000      	movs	r0, #0
 801a4ba:	4770      	bx	lr
 801a4bc:	b510      	push	{r4, lr}
 801a4be:	f7f9 fc71 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a4c2:	b128      	cbz	r0, 801a4d0 <LCD_GetVYSizeEx+0x1c>
 801a4c4:	68c3      	ldr	r3, [r0, #12]
 801a4c6:	2104      	movs	r1, #4
 801a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4ce:	4718      	bx	r3
 801a4d0:	2000      	movs	r0, #0
 801a4d2:	bd10      	pop	{r4, pc}

0801a4d4 <LCD_GetBitsPerPixelEx>:
 801a4d4:	2801      	cmp	r0, #1
 801a4d6:	dd01      	ble.n	801a4dc <LCD_GetBitsPerPixelEx+0x8>
 801a4d8:	2000      	movs	r0, #0
 801a4da:	4770      	bx	lr
 801a4dc:	b510      	push	{r4, lr}
 801a4de:	f7f9 fc61 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a4e2:	b128      	cbz	r0, 801a4f0 <LCD_GetBitsPerPixelEx+0x1c>
 801a4e4:	68c3      	ldr	r3, [r0, #12]
 801a4e6:	2108      	movs	r1, #8
 801a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4ee:	4718      	bx	r3
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	bd10      	pop	{r4, pc}

0801a4f4 <LCD_GetNumColorsEx>:
 801a4f4:	2801      	cmp	r0, #1
 801a4f6:	dd01      	ble.n	801a4fc <LCD_GetNumColorsEx+0x8>
 801a4f8:	2000      	movs	r0, #0
 801a4fa:	4770      	bx	lr
 801a4fc:	b510      	push	{r4, lr}
 801a4fe:	f7f9 fc51 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a502:	b128      	cbz	r0, 801a510 <LCD_GetNumColorsEx+0x1c>
 801a504:	68c3      	ldr	r3, [r0, #12]
 801a506:	2109      	movs	r1, #9
 801a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a50e:	4718      	bx	r3
 801a510:	2000      	movs	r0, #0
 801a512:	bd10      	pop	{r4, pc}

0801a514 <LCD_GetMirrorXEx>:
 801a514:	2801      	cmp	r0, #1
 801a516:	dd01      	ble.n	801a51c <LCD_GetMirrorXEx+0x8>
 801a518:	2000      	movs	r0, #0
 801a51a:	4770      	bx	lr
 801a51c:	b510      	push	{r4, lr}
 801a51e:	f7f9 fc41 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a522:	b128      	cbz	r0, 801a530 <LCD_GetMirrorXEx+0x1c>
 801a524:	68c3      	ldr	r3, [r0, #12]
 801a526:	210c      	movs	r1, #12
 801a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a52e:	4718      	bx	r3
 801a530:	2000      	movs	r0, #0
 801a532:	bd10      	pop	{r4, pc}

0801a534 <LCD_GetMirrorYEx>:
 801a534:	2801      	cmp	r0, #1
 801a536:	dd01      	ble.n	801a53c <LCD_GetMirrorYEx+0x8>
 801a538:	2000      	movs	r0, #0
 801a53a:	4770      	bx	lr
 801a53c:	b510      	push	{r4, lr}
 801a53e:	f7f9 fc31 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a542:	b128      	cbz	r0, 801a550 <LCD_GetMirrorYEx+0x1c>
 801a544:	68c3      	ldr	r3, [r0, #12]
 801a546:	210d      	movs	r1, #13
 801a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a54e:	4718      	bx	r3
 801a550:	2000      	movs	r0, #0
 801a552:	bd10      	pop	{r4, pc}

0801a554 <LCD_GetSwapXYEx>:
 801a554:	2801      	cmp	r0, #1
 801a556:	dd01      	ble.n	801a55c <LCD_GetSwapXYEx+0x8>
 801a558:	2000      	movs	r0, #0
 801a55a:	4770      	bx	lr
 801a55c:	b510      	push	{r4, lr}
 801a55e:	f7f9 fc21 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a562:	b128      	cbz	r0, 801a570 <LCD_GetSwapXYEx+0x1c>
 801a564:	68c3      	ldr	r3, [r0, #12]
 801a566:	210e      	movs	r1, #14
 801a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a56e:	4718      	bx	r3
 801a570:	2000      	movs	r0, #0
 801a572:	bd10      	pop	{r4, pc}

0801a574 <LCD_GetXSize>:
 801a574:	4b09      	ldr	r3, [pc, #36]	; (801a59c <LCD_GetXSize+0x28>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	7c58      	ldrb	r0, [r3, #17]
 801a57a:	2801      	cmp	r0, #1
 801a57c:	dd01      	ble.n	801a582 <LCD_GetXSize+0xe>
 801a57e:	2000      	movs	r0, #0
 801a580:	4770      	bx	lr
 801a582:	b510      	push	{r4, lr}
 801a584:	f7f9 fc0e 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a588:	b128      	cbz	r0, 801a596 <LCD_GetXSize+0x22>
 801a58a:	68c3      	ldr	r3, [r0, #12]
 801a58c:	2101      	movs	r1, #1
 801a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a594:	4718      	bx	r3
 801a596:	2000      	movs	r0, #0
 801a598:	bd10      	pop	{r4, pc}
 801a59a:	bf00      	nop
 801a59c:	20000018 	.word	0x20000018

0801a5a0 <LCD_GetYSize>:
 801a5a0:	4b09      	ldr	r3, [pc, #36]	; (801a5c8 <LCD_GetYSize+0x28>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	7c58      	ldrb	r0, [r3, #17]
 801a5a6:	2801      	cmp	r0, #1
 801a5a8:	dd01      	ble.n	801a5ae <LCD_GetYSize+0xe>
 801a5aa:	2000      	movs	r0, #0
 801a5ac:	4770      	bx	lr
 801a5ae:	b510      	push	{r4, lr}
 801a5b0:	f7f9 fbf8 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a5b4:	b128      	cbz	r0, 801a5c2 <LCD_GetYSize+0x22>
 801a5b6:	68c3      	ldr	r3, [r0, #12]
 801a5b8:	2102      	movs	r1, #2
 801a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5c0:	4718      	bx	r3
 801a5c2:	2000      	movs	r0, #0
 801a5c4:	bd10      	pop	{r4, pc}
 801a5c6:	bf00      	nop
 801a5c8:	20000018 	.word	0x20000018

0801a5cc <LCD_GetNumColors>:
 801a5cc:	4b09      	ldr	r3, [pc, #36]	; (801a5f4 <LCD_GetNumColors+0x28>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	7c58      	ldrb	r0, [r3, #17]
 801a5d2:	2801      	cmp	r0, #1
 801a5d4:	dd01      	ble.n	801a5da <LCD_GetNumColors+0xe>
 801a5d6:	2000      	movs	r0, #0
 801a5d8:	4770      	bx	lr
 801a5da:	b510      	push	{r4, lr}
 801a5dc:	f7f9 fbe2 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a5e0:	b128      	cbz	r0, 801a5ee <LCD_GetNumColors+0x22>
 801a5e2:	68c3      	ldr	r3, [r0, #12]
 801a5e4:	2109      	movs	r1, #9
 801a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5ec:	4718      	bx	r3
 801a5ee:	2000      	movs	r0, #0
 801a5f0:	bd10      	pop	{r4, pc}
 801a5f2:	bf00      	nop
 801a5f4:	20000018 	.word	0x20000018

0801a5f8 <GUI_GetBitsPerPixelEx>:
 801a5f8:	4b03      	ldr	r3, [pc, #12]	; (801a608 <GUI_GetBitsPerPixelEx+0x10>)
 801a5fa:	2108      	movs	r1, #8
 801a5fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a600:	68c3      	ldr	r3, [r0, #12]
 801a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a604:	4718      	bx	r3
 801a606:	bf00      	nop
 801a608:	200467d0 	.word	0x200467d0

0801a60c <LCD_GetPalette>:
 801a60c:	4b06      	ldr	r3, [pc, #24]	; (801a628 <LCD_GetPalette+0x1c>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	b510      	push	{r4, lr}
 801a612:	7c58      	ldrb	r0, [r3, #17]
 801a614:	f7f9 fbc6 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a618:	b128      	cbz	r0, 801a626 <LCD_GetPalette+0x1a>
 801a61a:	68c3      	ldr	r3, [r0, #12]
 801a61c:	2102      	movs	r1, #2
 801a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a624:	4718      	bx	r3
 801a626:	bd10      	pop	{r4, pc}
 801a628:	20000018 	.word	0x20000018

0801a62c <GUI_GetpfIndex2ColorEx>:
 801a62c:	4b02      	ldr	r3, [pc, #8]	; (801a638 <GUI_GetpfIndex2ColorEx+0xc>)
 801a62e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a632:	691b      	ldr	r3, [r3, #16]
 801a634:	6858      	ldr	r0, [r3, #4]
 801a636:	4770      	bx	lr
 801a638:	200467d0 	.word	0x200467d0

0801a63c <GUI_GetpfColor2IndexEx>:
 801a63c:	4b02      	ldr	r3, [pc, #8]	; (801a648 <GUI_GetpfColor2IndexEx+0xc>)
 801a63e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a642:	691b      	ldr	r3, [r3, #16]
 801a644:	6818      	ldr	r0, [r3, #0]
 801a646:	4770      	bx	lr
 801a648:	200467d0 	.word	0x200467d0

0801a64c <LCD_GetXSizeMax>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	2501      	movs	r5, #1
 801a650:	2400      	movs	r4, #0
 801a652:	4628      	mov	r0, r5
 801a654:	f7f9 fba6 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a658:	2101      	movs	r1, #1
 801a65a:	b178      	cbz	r0, 801a67c <LCD_GetXSizeMax+0x30>
 801a65c:	68c3      	ldr	r3, [r0, #12]
 801a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a660:	4798      	blx	r3
 801a662:	4284      	cmp	r4, r0
 801a664:	bfb8      	it	lt
 801a666:	4604      	movlt	r4, r0
 801a668:	b90d      	cbnz	r5, 801a66e <LCD_GetXSizeMax+0x22>
 801a66a:	4620      	mov	r0, r4
 801a66c:	bd38      	pop	{r3, r4, r5, pc}
 801a66e:	2500      	movs	r5, #0
 801a670:	4628      	mov	r0, r5
 801a672:	f7f9 fb97 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a676:	2101      	movs	r1, #1
 801a678:	2800      	cmp	r0, #0
 801a67a:	d1ef      	bne.n	801a65c <LCD_GetXSizeMax+0x10>
 801a67c:	e7f1      	b.n	801a662 <LCD_GetXSizeMax+0x16>
 801a67e:	bf00      	nop

0801a680 <LCD_GetYSizeMax>:
 801a680:	b538      	push	{r3, r4, r5, lr}
 801a682:	2501      	movs	r5, #1
 801a684:	2400      	movs	r4, #0
 801a686:	4628      	mov	r0, r5
 801a688:	f7f9 fb8c 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a68c:	2102      	movs	r1, #2
 801a68e:	b178      	cbz	r0, 801a6b0 <LCD_GetYSizeMax+0x30>
 801a690:	68c3      	ldr	r3, [r0, #12]
 801a692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a694:	4798      	blx	r3
 801a696:	4284      	cmp	r4, r0
 801a698:	bfb8      	it	lt
 801a69a:	4604      	movlt	r4, r0
 801a69c:	b90d      	cbnz	r5, 801a6a2 <LCD_GetYSizeMax+0x22>
 801a69e:	4620      	mov	r0, r4
 801a6a0:	bd38      	pop	{r3, r4, r5, pc}
 801a6a2:	2500      	movs	r5, #0
 801a6a4:	4628      	mov	r0, r5
 801a6a6:	f7f9 fb7d 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a6aa:	2102      	movs	r1, #2
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	d1ef      	bne.n	801a690 <LCD_GetYSizeMax+0x10>
 801a6b0:	e7f1      	b.n	801a696 <LCD_GetYSizeMax+0x16>
 801a6b2:	bf00      	nop

0801a6b4 <LCD_GetVXSizeMax>:
 801a6b4:	b538      	push	{r3, r4, r5, lr}
 801a6b6:	2501      	movs	r5, #1
 801a6b8:	2400      	movs	r4, #0
 801a6ba:	4628      	mov	r0, r5
 801a6bc:	f7f9 fb72 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a6c0:	2103      	movs	r1, #3
 801a6c2:	b178      	cbz	r0, 801a6e4 <LCD_GetVXSizeMax+0x30>
 801a6c4:	68c3      	ldr	r3, [r0, #12]
 801a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6c8:	4798      	blx	r3
 801a6ca:	4284      	cmp	r4, r0
 801a6cc:	bfb8      	it	lt
 801a6ce:	4604      	movlt	r4, r0
 801a6d0:	b90d      	cbnz	r5, 801a6d6 <LCD_GetVXSizeMax+0x22>
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	bd38      	pop	{r3, r4, r5, pc}
 801a6d6:	2500      	movs	r5, #0
 801a6d8:	4628      	mov	r0, r5
 801a6da:	f7f9 fb63 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a6de:	2103      	movs	r1, #3
 801a6e0:	2800      	cmp	r0, #0
 801a6e2:	d1ef      	bne.n	801a6c4 <LCD_GetVXSizeMax+0x10>
 801a6e4:	e7f1      	b.n	801a6ca <LCD_GetVXSizeMax+0x16>
 801a6e6:	bf00      	nop

0801a6e8 <LCD_SetDisplaySize>:
 801a6e8:	4b01      	ldr	r3, [pc, #4]	; (801a6f0 <LCD_SetDisplaySize+0x8>)
 801a6ea:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6ee:	4770      	bx	lr
 801a6f0:	200003d4 	.word	0x200003d4

0801a6f4 <LCD_GetXSizeDisplay>:
 801a6f4:	4b01      	ldr	r3, [pc, #4]	; (801a6fc <LCD_GetXSizeDisplay+0x8>)
 801a6f6:	6818      	ldr	r0, [r3, #0]
 801a6f8:	4770      	bx	lr
 801a6fa:	bf00      	nop
 801a6fc:	200003d4 	.word	0x200003d4

0801a700 <LCD_GetYSizeDisplay>:
 801a700:	4b01      	ldr	r3, [pc, #4]	; (801a708 <LCD_GetYSizeDisplay+0x8>)
 801a702:	6858      	ldr	r0, [r3, #4]
 801a704:	4770      	bx	lr
 801a706:	bf00      	nop
 801a708:	200003d4 	.word	0x200003d4

0801a70c <LCD__GetBPPDevice>:
 801a70c:	b1b8      	cbz	r0, 801a73e <LCD__GetBPPDevice+0x32>
 801a70e:	f030 0301 	bics.w	r3, r0, #1
 801a712:	d015      	beq.n	801a740 <LCD__GetBPPDevice+0x34>
 801a714:	f030 0303 	bics.w	r3, r0, #3
 801a718:	d101      	bne.n	801a71e <LCD__GetBPPDevice+0x12>
 801a71a:	2008      	movs	r0, #8
 801a71c:	4770      	bx	lr
 801a71e:	f030 0307 	bics.w	r3, r0, #7
 801a722:	d0fa      	beq.n	801a71a <LCD__GetBPPDevice+0xe>
 801a724:	f030 030f 	bics.w	r3, r0, #15
 801a728:	d0f7      	beq.n	801a71a <LCD__GetBPPDevice+0xe>
 801a72a:	f030 031f 	bics.w	r3, r0, #31
 801a72e:	d0f4      	beq.n	801a71a <LCD__GetBPPDevice+0xe>
 801a730:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801a734:	d0f1      	beq.n	801a71a <LCD__GetBPPDevice+0xe>
 801a736:	4b0b      	ldr	r3, [pc, #44]	; (801a764 <LCD__GetBPPDevice+0x58>)
 801a738:	4003      	ands	r3, r0
 801a73a:	b91b      	cbnz	r3, 801a744 <LCD__GetBPPDevice+0x38>
 801a73c:	2010      	movs	r0, #16
 801a73e:	4770      	bx	lr
 801a740:	2001      	movs	r0, #1
 801a742:	4770      	bx	lr
 801a744:	4b08      	ldr	r3, [pc, #32]	; (801a768 <LCD__GetBPPDevice+0x5c>)
 801a746:	4003      	ands	r3, r0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d0f7      	beq.n	801a73c <LCD__GetBPPDevice+0x30>
 801a74c:	4b07      	ldr	r3, [pc, #28]	; (801a76c <LCD__GetBPPDevice+0x60>)
 801a74e:	4003      	ands	r3, r0
 801a750:	2b00      	cmp	r3, #0
 801a752:	d0f3      	beq.n	801a73c <LCD__GetBPPDevice+0x30>
 801a754:	4b06      	ldr	r3, [pc, #24]	; (801a770 <LCD__GetBPPDevice+0x64>)
 801a756:	4003      	ands	r3, r0
 801a758:	2b00      	cmp	r3, #0
 801a75a:	bf0c      	ite	eq
 801a75c:	2010      	moveq	r0, #16
 801a75e:	2020      	movne	r0, #32
 801a760:	4770      	bx	lr
 801a762:	bf00      	nop
 801a764:	fffffe00 	.word	0xfffffe00
 801a768:	fffff000 	.word	0xfffff000
 801a76c:	ffff8000 	.word	0xffff8000
 801a770:	ffff0000 	.word	0xffff0000

0801a774 <LCD_GetNumLayers>:
 801a774:	b510      	push	{r4, lr}
 801a776:	2000      	movs	r0, #0
 801a778:	f7f9 fb14 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a77c:	1c04      	adds	r4, r0, #0
 801a77e:	f04f 0001 	mov.w	r0, #1
 801a782:	bf18      	it	ne
 801a784:	2401      	movne	r4, #1
 801a786:	f7f9 fb0d 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801a78a:	b100      	cbz	r0, 801a78e <LCD_GetNumLayers+0x1a>
 801a78c:	3401      	adds	r4, #1
 801a78e:	4620      	mov	r0, r4
 801a790:	bd10      	pop	{r4, pc}
 801a792:	bf00      	nop

0801a794 <LCD_GetPixelIndex>:
 801a794:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a796:	4e15      	ldr	r6, [pc, #84]	; (801a7ec <LCD_GetPixelIndex+0x58>)
 801a798:	4604      	mov	r4, r0
 801a79a:	4d15      	ldr	r5, [pc, #84]	; (801a7f0 <LCD_GetPixelIndex+0x5c>)
 801a79c:	b083      	sub	sp, #12
 801a79e:	6833      	ldr	r3, [r6, #0]
 801a7a0:	460f      	mov	r7, r1
 801a7a2:	4669      	mov	r1, sp
 801a7a4:	7c5b      	ldrb	r3, [r3, #17]
 801a7a6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801a7aa:	68c3      	ldr	r3, [r0, #12]
 801a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7ae:	4798      	blx	r3
 801a7b0:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a7b4:	42a3      	cmp	r3, r4
 801a7b6:	dc0b      	bgt.n	801a7d0 <LCD_GetPixelIndex+0x3c>
 801a7b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a7bc:	429c      	cmp	r4, r3
 801a7be:	dc07      	bgt.n	801a7d0 <LCD_GetPixelIndex+0x3c>
 801a7c0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a7c4:	42bb      	cmp	r3, r7
 801a7c6:	dc03      	bgt.n	801a7d0 <LCD_GetPixelIndex+0x3c>
 801a7c8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a7cc:	429f      	cmp	r7, r3
 801a7ce:	dd02      	ble.n	801a7d6 <LCD_GetPixelIndex+0x42>
 801a7d0:	2000      	movs	r0, #0
 801a7d2:	b003      	add	sp, #12
 801a7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7d6:	6833      	ldr	r3, [r6, #0]
 801a7d8:	463a      	mov	r2, r7
 801a7da:	4621      	mov	r1, r4
 801a7dc:	7c5b      	ldrb	r3, [r3, #17]
 801a7de:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801a7e2:	68c3      	ldr	r3, [r0, #12]
 801a7e4:	695b      	ldr	r3, [r3, #20]
 801a7e6:	4798      	blx	r3
 801a7e8:	e7f3      	b.n	801a7d2 <LCD_GetPixelIndex+0x3e>
 801a7ea:	bf00      	nop
 801a7ec:	20000018 	.word	0x20000018
 801a7f0:	200467d0 	.word	0x200467d0

0801a7f4 <GUI_GetPixelIndex>:
 801a7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7f6:	4e18      	ldr	r6, [pc, #96]	; (801a858 <GUI_GetPixelIndex+0x64>)
 801a7f8:	b083      	sub	sp, #12
 801a7fa:	4604      	mov	r4, r0
 801a7fc:	460f      	mov	r7, r1
 801a7fe:	f7fd fa9b 	bl	8017d38 <GUI_Lock>
 801a802:	6833      	ldr	r3, [r6, #0]
 801a804:	4d15      	ldr	r5, [pc, #84]	; (801a85c <GUI_GetPixelIndex+0x68>)
 801a806:	4669      	mov	r1, sp
 801a808:	7c5b      	ldrb	r3, [r3, #17]
 801a80a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801a80e:	68c3      	ldr	r3, [r0, #12]
 801a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a812:	4798      	blx	r3
 801a814:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a818:	429c      	cmp	r4, r3
 801a81a:	db0b      	blt.n	801a834 <GUI_GetPixelIndex+0x40>
 801a81c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a820:	429c      	cmp	r4, r3
 801a822:	dc07      	bgt.n	801a834 <GUI_GetPixelIndex+0x40>
 801a824:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a828:	429f      	cmp	r7, r3
 801a82a:	db03      	blt.n	801a834 <GUI_GetPixelIndex+0x40>
 801a82c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a830:	429f      	cmp	r7, r3
 801a832:	dd05      	ble.n	801a840 <GUI_GetPixelIndex+0x4c>
 801a834:	2400      	movs	r4, #0
 801a836:	f7fd fa75 	bl	8017d24 <GUI_Unlock>
 801a83a:	4620      	mov	r0, r4
 801a83c:	b003      	add	sp, #12
 801a83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a840:	6833      	ldr	r3, [r6, #0]
 801a842:	4621      	mov	r1, r4
 801a844:	463a      	mov	r2, r7
 801a846:	7c5b      	ldrb	r3, [r3, #17]
 801a848:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801a84c:	68c3      	ldr	r3, [r0, #12]
 801a84e:	695b      	ldr	r3, [r3, #20]
 801a850:	4798      	blx	r3
 801a852:	4604      	mov	r4, r0
 801a854:	e7ef      	b.n	801a836 <GUI_GetPixelIndex+0x42>
 801a856:	bf00      	nop
 801a858:	20000018 	.word	0x20000018
 801a85c:	200467d0 	.word	0x200467d0

0801a860 <LCD_GetPixelColor>:
 801a860:	b508      	push	{r3, lr}
 801a862:	f7ff ff97 	bl	801a794 <LCD_GetPixelIndex>
 801a866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a86a:	f7ff bb6b 	b.w	8019f44 <LCD_Index2Color>
 801a86e:	bf00      	nop

0801a870 <LCD_ReadRectEx>:
 801a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a874:	b085      	sub	sp, #20
 801a876:	4617      	mov	r7, r2
 801a878:	469a      	mov	sl, r3
 801a87a:	4681      	mov	r9, r0
 801a87c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a87e:	460e      	mov	r6, r1
 801a880:	68e2      	ldr	r2, [r4, #12]
 801a882:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a884:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801a886:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801a88a:	b17b      	cbz	r3, 801a8ac <LCD_ReadRectEx+0x3c>
 801a88c:	2101      	movs	r1, #1
 801a88e:	a80f      	add	r0, sp, #60	; 0x3c
 801a890:	4798      	blx	r3
 801a892:	4605      	mov	r5, r0
 801a894:	b150      	cbz	r0, 801a8ac <LCD_ReadRectEx+0x3c>
 801a896:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a898:	463b      	mov	r3, r7
 801a89a:	9401      	str	r4, [sp, #4]
 801a89c:	4632      	mov	r2, r6
 801a89e:	f8cd a000 	str.w	sl, [sp]
 801a8a2:	4649      	mov	r1, r9
 801a8a4:	47a8      	blx	r5
 801a8a6:	b005      	add	sp, #20
 801a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ac:	4b77      	ldr	r3, [pc, #476]	; (801aa8c <LCD_ReadRectEx+0x21c>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	7c58      	ldrb	r0, [r3, #17]
 801a8b2:	f7ff fea1 	bl	801a5f8 <GUI_GetBitsPerPixelEx>
 801a8b6:	2808      	cmp	r0, #8
 801a8b8:	dc30      	bgt.n	801a91c <LCD_ReadRectEx+0xac>
 801a8ba:	2301      	movs	r3, #1
 801a8bc:	4556      	cmp	r6, sl
 801a8be:	dcf2      	bgt.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a8c0:	2b02      	cmp	r3, #2
 801a8c2:	d00a      	beq.n	801a8da <LCD_ReadRectEx+0x6a>
 801a8c4:	2b04      	cmp	r3, #4
 801a8c6:	d01b      	beq.n	801a900 <LCD_ReadRectEx+0x90>
 801a8c8:	2b01      	cmp	r3, #1
 801a8ca:	d02c      	beq.n	801a926 <LCD_ReadRectEx+0xb6>
 801a8cc:	3601      	adds	r6, #1
 801a8ce:	45b2      	cmp	sl, r6
 801a8d0:	daf6      	bge.n	801a8c0 <LCD_ReadRectEx+0x50>
 801a8d2:	e7e8      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a8d4:	3601      	adds	r6, #1
 801a8d6:	4556      	cmp	r6, sl
 801a8d8:	dce5      	bgt.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a8da:	45b9      	cmp	r9, r7
 801a8dc:	dcfa      	bgt.n	801a8d4 <LCD_ReadRectEx+0x64>
 801a8de:	464d      	mov	r5, r9
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	3501      	adds	r5, #1
 801a8e4:	4632      	mov	r2, r6
 801a8e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a8e8:	47c0      	blx	r8
 801a8ea:	42af      	cmp	r7, r5
 801a8ec:	f824 0b02 	strh.w	r0, [r4], #2
 801a8f0:	daf6      	bge.n	801a8e0 <LCD_ReadRectEx+0x70>
 801a8f2:	3601      	adds	r6, #1
 801a8f4:	45b2      	cmp	sl, r6
 801a8f6:	daf0      	bge.n	801a8da <LCD_ReadRectEx+0x6a>
 801a8f8:	e7d5      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a8fa:	3601      	adds	r6, #1
 801a8fc:	45b2      	cmp	sl, r6
 801a8fe:	dbd2      	blt.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a900:	45b9      	cmp	r9, r7
 801a902:	f300 80ba 	bgt.w	801aa7a <LCD_ReadRectEx+0x20a>
 801a906:	464d      	mov	r5, r9
 801a908:	4629      	mov	r1, r5
 801a90a:	3501      	adds	r5, #1
 801a90c:	4632      	mov	r2, r6
 801a90e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a910:	47c0      	blx	r8
 801a912:	42af      	cmp	r7, r5
 801a914:	f844 0b04 	str.w	r0, [r4], #4
 801a918:	daf6      	bge.n	801a908 <LCD_ReadRectEx+0x98>
 801a91a:	e7ee      	b.n	801a8fa <LCD_ReadRectEx+0x8a>
 801a91c:	2811      	cmp	r0, #17
 801a91e:	bfb4      	ite	lt
 801a920:	2302      	movlt	r3, #2
 801a922:	2304      	movge	r3, #4
 801a924:	e7ca      	b.n	801a8bc <LCD_ReadRectEx+0x4c>
 801a926:	1e43      	subs	r3, r0, #1
 801a928:	2500      	movs	r5, #0
 801a92a:	f8cd a008 	str.w	sl, [sp, #8]
 801a92e:	9303      	str	r3, [sp, #12]
 801a930:	9b03      	ldr	r3, [sp, #12]
 801a932:	2b07      	cmp	r3, #7
 801a934:	f200 809b 	bhi.w	801aa6e <LCD_ReadRectEx+0x1fe>
 801a938:	e8df f003 	tbb	[pc, r3]
 801a93c:	18186d44 	.word	0x18186d44
 801a940:	04040404 	.word	0x04040404
 801a944:	45b9      	cmp	r9, r7
 801a946:	dc38      	bgt.n	801a9ba <LCD_ReadRectEx+0x14a>
 801a948:	4643      	mov	r3, r8
 801a94a:	46cb      	mov	fp, r9
 801a94c:	46a8      	mov	r8, r5
 801a94e:	461d      	mov	r5, r3
 801a950:	4659      	mov	r1, fp
 801a952:	f10b 0b01 	add.w	fp, fp, #1
 801a956:	4632      	mov	r2, r6
 801a958:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a95a:	47a8      	blx	r5
 801a95c:	455f      	cmp	r7, fp
 801a95e:	f804 0b01 	strb.w	r0, [r4], #1
 801a962:	daf5      	bge.n	801a950 <LCD_ReadRectEx+0xe0>
 801a964:	462b      	mov	r3, r5
 801a966:	4645      	mov	r5, r8
 801a968:	4698      	mov	r8, r3
 801a96a:	e026      	b.n	801a9ba <LCD_ReadRectEx+0x14a>
 801a96c:	45b9      	cmp	r9, r7
 801a96e:	dc24      	bgt.n	801a9ba <LCD_ReadRectEx+0x14a>
 801a970:	940e      	str	r4, [sp, #56]	; 0x38
 801a972:	46ca      	mov	sl, r9
 801a974:	4644      	mov	r4, r8
 801a976:	f04f 0b0f 	mov.w	fp, #15
 801a97a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801a97e:	4651      	mov	r1, sl
 801a980:	4632      	mov	r2, r6
 801a982:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a984:	f10a 0a01 	add.w	sl, sl, #1
 801a988:	47a0      	blx	r4
 801a98a:	f898 1000 	ldrb.w	r1, [r8]
 801a98e:	00ab      	lsls	r3, r5, #2
 801a990:	4557      	cmp	r7, sl
 801a992:	f1c3 0204 	rsb	r2, r3, #4
 801a996:	fa0b f303 	lsl.w	r3, fp, r3
 801a99a:	fa00 f002 	lsl.w	r0, r0, r2
 801a99e:	ea03 0301 	and.w	r3, r3, r1
 801a9a2:	ea43 0300 	orr.w	r3, r3, r0
 801a9a6:	f888 3000 	strb.w	r3, [r8]
 801a9aa:	44a8      	add	r8, r5
 801a9ac:	f085 0501 	eor.w	r5, r5, #1
 801a9b0:	dae5      	bge.n	801a97e <LCD_ReadRectEx+0x10e>
 801a9b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801a9b6:	46a0      	mov	r8, r4
 801a9b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a9ba:	3601      	adds	r6, #1
 801a9bc:	9b02      	ldr	r3, [sp, #8]
 801a9be:	42b3      	cmp	r3, r6
 801a9c0:	dab6      	bge.n	801a930 <LCD_ReadRectEx+0xc0>
 801a9c2:	e770      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801a9c4:	46a3      	mov	fp, r4
 801a9c6:	4644      	mov	r4, r8
 801a9c8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a9cc:	45b9      	cmp	r9, r7
 801a9ce:	dc59      	bgt.n	801aa84 <LCD_ReadRectEx+0x214>
 801a9d0:	46ca      	mov	sl, r9
 801a9d2:	4651      	mov	r1, sl
 801a9d4:	4632      	mov	r2, r6
 801a9d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a9d8:	f10a 0a01 	add.w	sl, sl, #1
 801a9dc:	47a0      	blx	r4
 801a9de:	f64f 727f 	movw	r2, #65407	; 0xff7f
 801a9e2:	f89b e000 	ldrb.w	lr, [fp]
 801a9e6:	f1c5 0307 	rsb	r3, r5, #7
 801a9ea:	fa42 f105 	asr.w	r1, r2, r5
 801a9ee:	1c6a      	adds	r2, r5, #1
 801a9f0:	4098      	lsls	r0, r3
 801a9f2:	4557      	cmp	r7, sl
 801a9f4:	ea0e 0101 	and.w	r1, lr, r1
 801a9f8:	f022 0507 	bic.w	r5, r2, #7
 801a9fc:	ea40 0001 	orr.w	r0, r0, r1
 801aa00:	fa42 f505 	asr.w	r5, r2, r5
 801aa04:	f88b 0000 	strb.w	r0, [fp]
 801aa08:	eb0b 0be2 	add.w	fp, fp, r2, asr #3
 801aa0c:	dae1      	bge.n	801a9d2 <LCD_ReadRectEx+0x162>
 801aa0e:	3601      	adds	r6, #1
 801aa10:	45b0      	cmp	r8, r6
 801aa12:	dadb      	bge.n	801a9cc <LCD_ReadRectEx+0x15c>
 801aa14:	e747      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801aa16:	940e      	str	r4, [sp, #56]	; 0x38
 801aa18:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 801aa1c:	4644      	mov	r4, r8
 801aa1e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801aa22:	45b9      	cmp	r9, r7
 801aa24:	dcc5      	bgt.n	801a9b2 <LCD_ReadRectEx+0x142>
 801aa26:	46ca      	mov	sl, r9
 801aa28:	4651      	mov	r1, sl
 801aa2a:	4632      	mov	r2, r6
 801aa2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801aa2e:	f10a 0a01 	add.w	sl, sl, #1
 801aa32:	47a0      	blx	r4
 801aa34:	1c6a      	adds	r2, r5, #1
 801aa36:	006d      	lsls	r5, r5, #1
 801aa38:	f898 1000 	ldrb.w	r1, [r8]
 801aa3c:	4557      	cmp	r7, sl
 801aa3e:	f1c5 0306 	rsb	r3, r5, #6
 801aa42:	fa4b f505 	asr.w	r5, fp, r5
 801aa46:	fa00 f003 	lsl.w	r0, r0, r3
 801aa4a:	ea05 0501 	and.w	r5, r5, r1
 801aa4e:	f022 0303 	bic.w	r3, r2, #3
 801aa52:	ea40 0005 	orr.w	r0, r0, r5
 801aa56:	fa42 f503 	asr.w	r5, r2, r3
 801aa5a:	f888 0000 	strb.w	r0, [r8]
 801aa5e:	eb08 08a2 	add.w	r8, r8, r2, asr #2
 801aa62:	dae1      	bge.n	801aa28 <LCD_ReadRectEx+0x1b8>
 801aa64:	3601      	adds	r6, #1
 801aa66:	9b02      	ldr	r3, [sp, #8]
 801aa68:	42b3      	cmp	r3, r6
 801aa6a:	dada      	bge.n	801aa22 <LCD_ReadRectEx+0x1b2>
 801aa6c:	e71b      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801aa6e:	3601      	adds	r6, #1
 801aa70:	9b02      	ldr	r3, [sp, #8]
 801aa72:	429e      	cmp	r6, r3
 801aa74:	f77f af5c 	ble.w	801a930 <LCD_ReadRectEx+0xc0>
 801aa78:	e715      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801aa7a:	3601      	adds	r6, #1
 801aa7c:	4556      	cmp	r6, sl
 801aa7e:	f77f af3f 	ble.w	801a900 <LCD_ReadRectEx+0x90>
 801aa82:	e710      	b.n	801a8a6 <LCD_ReadRectEx+0x36>
 801aa84:	46a0      	mov	r8, r4
 801aa86:	465c      	mov	r4, fp
 801aa88:	e797      	b.n	801a9ba <LCD_ReadRectEx+0x14a>
 801aa8a:	bf00      	nop
 801aa8c:	20000018 	.word	0x20000018

0801aa90 <GUI_ReadRectEx>:
 801aa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa92:	4c16      	ldr	r4, [pc, #88]	; (801aaec <GUI_ReadRectEx+0x5c>)
 801aa94:	9f05      	ldr	r7, [sp, #20]
 801aa96:	6825      	ldr	r5, [r4, #0]
 801aa98:	9c06      	ldr	r4, [sp, #24]
 801aa9a:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801aa9e:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801aaa2:	4570      	cmp	r0, lr
 801aaa4:	bfb8      	it	lt
 801aaa6:	4670      	movlt	r0, lr
 801aaa8:	42b2      	cmp	r2, r6
 801aaaa:	bfa8      	it	ge
 801aaac:	4632      	movge	r2, r6
 801aaae:	4290      	cmp	r0, r2
 801aab0:	dc1a      	bgt.n	801aae8 <GUI_ReadRectEx+0x58>
 801aab2:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 801aab6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801aaba:	42b1      	cmp	r1, r6
 801aabc:	bfb8      	it	lt
 801aabe:	4631      	movlt	r1, r6
 801aac0:	42ab      	cmp	r3, r5
 801aac2:	bfa8      	it	ge
 801aac4:	462b      	movge	r3, r5
 801aac6:	428b      	cmp	r3, r1
 801aac8:	da03      	bge.n	801aad2 <GUI_ReadRectEx+0x42>
 801aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aacc:	6825      	ldr	r5, [r4, #0]
 801aace:	b12d      	cbz	r5, 801aadc <GUI_ReadRectEx+0x4c>
 801aad0:	462c      	mov	r4, r5
 801aad2:	68e5      	ldr	r5, [r4, #12]
 801aad4:	682d      	ldr	r5, [r5, #0]
 801aad6:	f035 0504 	bics.w	r5, r5, #4
 801aada:	d1f7      	bne.n	801aacc <GUI_ReadRectEx+0x3c>
 801aadc:	9406      	str	r4, [sp, #24]
 801aade:	9705      	str	r7, [sp, #20]
 801aae0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aae4:	f7ff bec4 	b.w	801a870 <LCD_ReadRectEx>
 801aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaea:	bf00      	nop
 801aaec:	20000018 	.word	0x20000018

0801aaf0 <_Rect2TextRect>:
 801aaf0:	b410      	push	{r4}
 801aaf2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aaf6:	8844      	ldrh	r4, [r0, #2]
 801aaf8:	8801      	ldrh	r1, [r0, #0]
 801aafa:	88c2      	ldrh	r2, [r0, #6]
 801aafc:	4423      	add	r3, r4
 801aafe:	440a      	add	r2, r1
 801ab00:	1a5b      	subs	r3, r3, r1
 801ab02:	1b12      	subs	r2, r2, r4
 801ab04:	80c3      	strh	r3, [r0, #6]
 801ab06:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab0a:	8082      	strh	r2, [r0, #4]
 801ab0c:	4770      	bx	lr
 801ab0e:	bf00      	nop

0801ab10 <_TransformRect>:
 801ab10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab14:	b083      	sub	sp, #12
 801ab16:	4604      	mov	r4, r0
 801ab18:	2300      	movs	r3, #0
 801ab1a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801abc8 <_TransformRect+0xb8>
 801ab1e:	4668      	mov	r0, sp
 801ab20:	f9b4 7000 	ldrsh.w	r7, [r4]
 801ab24:	9301      	str	r3, [sp, #4]
 801ab26:	9300      	str	r3, [sp, #0]
 801ab28:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 801ab2c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801ab30:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 801ab34:	f006 f870 	bl	8020c18 <WM_GetWindowRect>
 801ab38:	f7ff fd1c 	bl	801a574 <LCD_GetXSize>
 801ab3c:	f7ff fd30 	bl	801a5a0 <LCD_GetYSize>
 801ab40:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801ab44:	3801      	subs	r0, #1
 801ab46:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801ab4a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801ab4e:	4288      	cmp	r0, r1
 801ab50:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 801ab54:	bfb8      	it	lt
 801ab56:	b201      	sxthlt	r1, r0
 801ab58:	f9bd 0000 	ldrsh.w	r0, [sp]
 801ab5c:	1bcf      	subs	r7, r1, r7
 801ab5e:	4406      	add	r6, r0
 801ab60:	1a89      	subs	r1, r1, r2
 801ab62:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ab66:	441f      	add	r7, r3
 801ab68:	2300      	movs	r3, #0
 801ab6a:	4416      	add	r6, r2
 801ab6c:	4668      	mov	r0, sp
 801ab6e:	1a79      	subs	r1, r7, r1
 801ab70:	9300      	str	r3, [sp, #0]
 801ab72:	ebce 0606 	rsb	r6, lr, r6
 801ab76:	9301      	str	r3, [sp, #4]
 801ab78:	1857      	adds	r7, r2, r1
 801ab7a:	f006 f84d 	bl	8020c18 <WM_GetWindowRect>
 801ab7e:	f7ff fcf9 	bl	801a574 <LCD_GetXSize>
 801ab82:	f7ff fd0d 	bl	801a5a0 <LCD_GetYSize>
 801ab86:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801ab8a:	3801      	subs	r0, #1
 801ab8c:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
 801ab90:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801ab94:	4288      	cmp	r0, r1
 801ab96:	80e7      	strh	r7, [r4, #6]
 801ab98:	bfb8      	it	lt
 801ab9a:	b201      	sxthlt	r1, r0
 801ab9c:	f9bd 0000 	ldrsh.w	r0, [sp]
 801aba0:	ebc9 0901 	rsb	r9, r9, r1
 801aba4:	1acb      	subs	r3, r1, r3
 801aba6:	4405      	add	r5, r0
 801aba8:	f9b8 1000 	ldrsh.w	r1, [r8]
 801abac:	444a      	add	r2, r9
 801abae:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 801abb2:	440d      	add	r5, r1
 801abb4:	8026      	strh	r6, [r4, #0]
 801abb6:	1ad3      	subs	r3, r2, r3
 801abb8:	1a2d      	subs	r5, r5, r0
 801abba:	440b      	add	r3, r1
 801abbc:	80a5      	strh	r5, [r4, #4]
 801abbe:	8063      	strh	r3, [r4, #2]
 801abc0:	b003      	add	sp, #12
 801abc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801abc6:	bf00      	nop
 801abc8:	200467e0 	.word	0x200467e0

0801abcc <_DrawBitmapCCW>:
 801abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd0:	b08f      	sub	sp, #60	; 0x3c
 801abd2:	2600      	movs	r6, #0
 801abd4:	4604      	mov	r4, r0
 801abd6:	460d      	mov	r5, r1
 801abd8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 801abdc:	9201      	str	r2, [sp, #4]
 801abde:	9306      	str	r3, [sp, #24]
 801abe0:	4658      	mov	r0, fp
 801abe2:	f8cb 6004 	str.w	r6, [fp, #4]
 801abe6:	960a      	str	r6, [sp, #40]	; 0x28
 801abe8:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801abec:	f006 f814 	bl	8020c18 <WM_GetWindowRect>
 801abf0:	f7ff fcc0 	bl	801a574 <LCD_GetXSize>
 801abf4:	4eba      	ldr	r6, [pc, #744]	; (801aee0 <_DrawBitmapCCW+0x314>)
 801abf6:	f7ff fcd3 	bl	801a5a0 <LCD_GetYSize>
 801abfa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801abfe:	3801      	subs	r0, #1
 801ac00:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801ac04:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801ac08:	2100      	movs	r1, #0
 801ac0a:	4298      	cmp	r0, r3
 801ac0c:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ac10:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 801ac14:	bfb8      	it	lt
 801ac16:	b203      	sxthlt	r3, r0
 801ac18:	4658      	mov	r0, fp
 801ac1a:	f8cb 1004 	str.w	r1, [fp, #4]
 801ac1e:	1b1f      	subs	r7, r3, r4
 801ac20:	ebce 0303 	rsb	r3, lr, r3
 801ac24:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ac28:	443a      	add	r2, r7
 801ac2a:	910a      	str	r1, [sp, #40]	; 0x28
 801ac2c:	44ae      	add	lr, r5
 801ac2e:	1ad3      	subs	r3, r2, r3
 801ac30:	44e6      	add	lr, ip
 801ac32:	4463      	add	r3, ip
 801ac34:	9308      	str	r3, [sp, #32]
 801ac36:	ebc8 030e 	rsb	r3, r8, lr
 801ac3a:	9300      	str	r3, [sp, #0]
 801ac3c:	f005 ffec 	bl	8020c18 <WM_GetWindowRect>
 801ac40:	f7ff fc98 	bl	801a574 <LCD_GetXSize>
 801ac44:	1e47      	subs	r7, r0, #1
 801ac46:	f7ff fcab 	bl	801a5a0 <LCD_GetYSize>
 801ac4a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ac4e:	3801      	subs	r0, #1
 801ac50:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ac54:	429f      	cmp	r7, r3
 801ac56:	f9b6 e006 	ldrsh.w	lr, [r6, #6]
 801ac5a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801ac5e:	bfb8      	it	lt
 801ac60:	f8ad 702c 	strhlt.w	r7, [sp, #44]	; 0x2c
 801ac64:	4290      	cmp	r0, r2
 801ac66:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
 801ac6a:	bfb8      	it	lt
 801ac6c:	b202      	sxthlt	r2, r0
 801ac6e:	f1ba 0f01 	cmp.w	sl, #1
 801ac72:	f9b6 0000 	ldrsh.w	r0, [r6]
 801ac76:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801ac7a:	d157      	bne.n	801ad2c <_DrawBitmapCCW+0x160>
 801ac7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801ac7e:	2e01      	cmp	r6, #1
 801ac80:	d154      	bne.n	801ad2c <_DrawBitmapCCW+0x160>
 801ac82:	9e06      	ldr	r6, [sp, #24]
 801ac84:	4435      	add	r5, r6
 801ac86:	4e97      	ldr	r6, [pc, #604]	; (801aee4 <_DrawBitmapCCW+0x318>)
 801ac88:	3d01      	subs	r5, #1
 801ac8a:	9605      	str	r6, [sp, #20]
 801ac8c:	6836      	ldr	r6, [r6, #0]
 801ac8e:	442b      	add	r3, r5
 801ac90:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
 801ac94:	4403      	add	r3, r0
 801ac96:	1bdb      	subs	r3, r3, r7
 801ac98:	429d      	cmp	r5, r3
 801ac9a:	da03      	bge.n	801aca4 <_DrawBitmapCCW+0xd8>
 801ac9c:	1b5b      	subs	r3, r3, r5
 801ac9e:	9d06      	ldr	r5, [sp, #24]
 801aca0:	1aeb      	subs	r3, r5, r3
 801aca2:	9306      	str	r3, [sp, #24]
 801aca4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801aca8:	9f00      	ldr	r7, [sp, #0]
 801acaa:	42bb      	cmp	r3, r7
 801acac:	dd09      	ble.n	801acc2 <_DrawBitmapCCW+0xf6>
 801acae:	1bdd      	subs	r5, r3, r7
 801acb0:	9300      	str	r3, [sp, #0]
 801acb2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801acb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801acb6:	fb03 7305 	mla	r3, r3, r5, r7
 801acba:	931c      	str	r3, [sp, #112]	; 0x70
 801acbc:	9b06      	ldr	r3, [sp, #24]
 801acbe:	1b5b      	subs	r3, r3, r5
 801acc0:	9306      	str	r3, [sp, #24]
 801acc2:	9d01      	ldr	r5, [sp, #4]
 801acc4:	1a51      	subs	r1, r2, r1
 801acc6:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 801acca:	442c      	add	r4, r5
 801accc:	3c01      	subs	r4, #1
 801acce:	1b14      	subs	r4, r2, r4
 801acd0:	44a6      	add	lr, r4
 801acd2:	ebc1 010e 	rsb	r1, r1, lr
 801acd6:	4408      	add	r0, r1
 801acd8:	4283      	cmp	r3, r0
 801acda:	dd02      	ble.n	801ace2 <_DrawBitmapCCW+0x116>
 801acdc:	1a18      	subs	r0, r3, r0
 801acde:	1a2b      	subs	r3, r5, r0
 801ace0:	9301      	str	r3, [sp, #4]
 801ace2:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 801ace6:	9908      	ldr	r1, [sp, #32]
 801ace8:	428b      	cmp	r3, r1
 801acea:	f2c0 80ca 	blt.w	801ae82 <_DrawBitmapCCW+0x2b6>
 801acee:	2300      	movs	r3, #0
 801acf0:	9303      	str	r3, [sp, #12]
 801acf2:	9b06      	ldr	r3, [sp, #24]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	f340 80b9 	ble.w	801ae6c <_DrawBitmapCCW+0x2a0>
 801acfa:	9b01      	ldr	r3, [sp, #4]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	bfcc      	ite	gt
 801ad00:	2300      	movgt	r3, #0
 801ad02:	2301      	movle	r3, #1
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	f040 80b1 	bne.w	801ae6c <_DrawBitmapCCW+0x2a0>
 801ad0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	1e4b      	subs	r3, r1, #1
 801ad10:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ad12:	2b07      	cmp	r3, #7
 801ad14:	f200 80ad 	bhi.w	801ae72 <_DrawBitmapCCW+0x2a6>
 801ad18:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ad1c:	01ab007c 	.word	0x01ab007c
 801ad20:	016900ab 	.word	0x016900ab
 801ad24:	00ab00ab 	.word	0x00ab00ab
 801ad28:	00f800ab 	.word	0x00f800ab
 801ad2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ad2e:	f1c3 0b08 	rsb	fp, r3, #8
 801ad32:	9b06      	ldr	r3, [sp, #24]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	f340 8099 	ble.w	801ae6c <_DrawBitmapCCW+0x2a0>
 801ad3a:	4b6a      	ldr	r3, [pc, #424]	; (801aee4 <_DrawBitmapCCW+0x318>)
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	f8dd 9000 	ldr.w	r9, [sp]
 801ad42:	f8d3 e000 	ldr.w	lr, [r3]
 801ad46:	4614      	mov	r4, r2
 801ad48:	9305      	str	r3, [sp, #20]
 801ad4a:	9204      	str	r2, [sp, #16]
 801ad4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801ad50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ad52:	444b      	add	r3, r9
 801ad54:	461a      	mov	r2, r3
 801ad56:	9307      	str	r3, [sp, #28]
 801ad58:	f9be 3008 	ldrsh.w	r3, [lr, #8]
 801ad5c:	f102 3bff 	add.w	fp, r2, #4294967295
 801ad60:	455b      	cmp	r3, fp
 801ad62:	f300 80ac 	bgt.w	801aebe <_DrawBitmapCCW+0x2f2>
 801ad66:	f9be 300c 	ldrsh.w	r3, [lr, #12]
 801ad6a:	454b      	cmp	r3, r9
 801ad6c:	f2c0 80a7 	blt.w	801aebe <_DrawBitmapCCW+0x2f2>
 801ad70:	9b01      	ldr	r3, [sp, #4]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	f340 80a3 	ble.w	801aebe <_DrawBitmapCCW+0x2f2>
 801ad78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f000 80e5 	beq.w	801af4a <_DrawBitmapCCW+0x37e>
 801ad80:	9b08      	ldr	r3, [sp, #32]
 801ad82:	f04f 0800 	mov.w	r8, #0
 801ad86:	f8cd 9008 	str.w	r9, [sp, #8]
 801ad8a:	ebca 0603 	rsb	r6, sl, r3
 801ad8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ad90:	f8cd b00c 	str.w	fp, [sp, #12]
 801ad94:	4699      	mov	r9, r3
 801ad96:	f8cd 8000 	str.w	r8, [sp]
 801ad9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ad9e:	e02d      	b.n	801adfc <_DrawBitmapCCW+0x230>
 801ada0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ada2:	ebc2 0808 	rsb	r8, r2, r8
 801ada6:	4617      	mov	r7, r2
 801ada8:	fa44 f50b 	asr.w	r5, r4, fp
 801adac:	40bc      	lsls	r4, r7
 801adae:	9f00      	ldr	r7, [sp, #0]
 801adb0:	1c71      	adds	r1, r6, #1
 801adb2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 801adb6:	9a03      	ldr	r2, [sp, #12]
 801adb8:	f107 0701 	add.w	r7, r7, #1
 801adbc:	9802      	ldr	r0, [sp, #8]
 801adbe:	ebca 0606 	rsb	r6, sl, r6
 801adc2:	b2e4      	uxtb	r4, r4
 801adc4:	9700      	str	r7, [sp, #0]
 801adc6:	d104      	bne.n	801add2 <_DrawBitmapCCW+0x206>
 801adc8:	f89e c010 	ldrb.w	ip, [lr, #16]
 801adcc:	f01c 0f02 	tst.w	ip, #2
 801add0:	d110      	bne.n	801adf4 <_DrawBitmapCCW+0x228>
 801add2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801add4:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
 801add8:	f857 c025 	ldr.w	ip, [r7, r5, lsl #2]
 801addc:	f8de 5000 	ldr.w	r5, [lr]
 801ade0:	f8ce c000 	str.w	ip, [lr]
 801ade4:	f7fe fd46 	bl	8019874 <LCD_FillRect>
 801ade8:	9b05      	ldr	r3, [sp, #20]
 801adea:	f8d3 e000 	ldr.w	lr, [r3]
 801adee:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 801adf2:	601d      	str	r5, [r3, #0]
 801adf4:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801adf8:	4293      	cmp	r3, r2
 801adfa:	d060      	beq.n	801aebe <_DrawBitmapCCW+0x2f2>
 801adfc:	eb0a 0306 	add.w	r3, sl, r6
 801ae00:	f1b8 0f00 	cmp.w	r8, #0
 801ae04:	d1cc      	bne.n	801ada0 <_DrawBitmapCCW+0x1d4>
 801ae06:	f899 4000 	ldrb.w	r4, [r9]
 801ae0a:	46d8      	mov	r8, fp
 801ae0c:	f109 0901 	add.w	r9, r9, #1
 801ae10:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801ae12:	e7c9      	b.n	801ada8 <_DrawBitmapCCW+0x1dc>
 801ae14:	9202      	str	r2, [sp, #8]
 801ae16:	9b08      	ldr	r3, [sp, #32]
 801ae18:	9a03      	ldr	r2, [sp, #12]
 801ae1a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801aee8 <_DrawBitmapCCW+0x31c>
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ae22:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801ae26:	6852      	ldr	r2, [r2, #4]
 801ae28:	911c      	str	r1, [sp, #112]	; 0x70
 801ae2a:	9204      	str	r2, [sp, #16]
 801ae2c:	9a01      	ldr	r2, [sp, #4]
 801ae2e:	9307      	str	r3, [sp, #28]
 801ae30:	ebc2 0b03 	rsb	fp, r2, r3
 801ae34:	9a00      	ldr	r2, [sp, #0]
 801ae36:	f8d9 3000 	ldr.w	r3, [r9]
 801ae3a:	4610      	mov	r0, r2
 801ae3c:	9902      	ldr	r1, [sp, #8]
 801ae3e:	7c1a      	ldrb	r2, [r3, #16]
 801ae40:	eb00 0801 	add.w	r8, r0, r1
 801ae44:	f002 0203 	and.w	r2, r2, #3
 801ae48:	2a01      	cmp	r2, #1
 801ae4a:	f000 81b8 	beq.w	801b1be <_DrawBitmapCCW+0x5f2>
 801ae4e:	f0c0 8192 	bcc.w	801b176 <_DrawBitmapCCW+0x5aa>
 801ae52:	2a02      	cmp	r2, #2
 801ae54:	f000 815a 	beq.w	801b10c <_DrawBitmapCCW+0x540>
 801ae58:	460a      	mov	r2, r1
 801ae5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ae5c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ae5e:	3201      	adds	r2, #1
 801ae60:	440b      	add	r3, r1
 801ae62:	9202      	str	r2, [sp, #8]
 801ae64:	931c      	str	r3, [sp, #112]	; 0x70
 801ae66:	9b06      	ldr	r3, [sp, #24]
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	dce3      	bgt.n	801ae34 <_DrawBitmapCCW+0x268>
 801ae6c:	b00f      	add	sp, #60	; 0x3c
 801ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ae74:	3201      	adds	r2, #1
 801ae76:	4401      	add	r1, r0
 801ae78:	9806      	ldr	r0, [sp, #24]
 801ae7a:	4290      	cmp	r0, r2
 801ae7c:	f73f af49 	bgt.w	801ad12 <_DrawBitmapCCW+0x146>
 801ae80:	e7f4      	b.n	801ae6c <_DrawBitmapCCW+0x2a0>
 801ae82:	1acb      	subs	r3, r1, r3
 801ae84:	9a01      	ldr	r2, [sp, #4]
 801ae86:	9303      	str	r3, [sp, #12]
 801ae88:	1ad3      	subs	r3, r2, r3
 801ae8a:	9301      	str	r3, [sp, #4]
 801ae8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ae8e:	2b02      	cmp	r3, #2
 801ae90:	d02c      	beq.n	801aeec <_DrawBitmapCCW+0x320>
 801ae92:	2b04      	cmp	r3, #4
 801ae94:	f000 809b 	beq.w	801afce <_DrawBitmapCCW+0x402>
 801ae98:	2b01      	cmp	r3, #1
 801ae9a:	f47f af2a 	bne.w	801acf2 <_DrawBitmapCCW+0x126>
 801ae9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801aea0:	9a03      	ldr	r2, [sp, #12]
 801aea2:	4608      	mov	r0, r1
 801aea4:	f022 0307 	bic.w	r3, r2, #7
 801aea8:	4611      	mov	r1, r2
 801aeaa:	eb00 02e2 	add.w	r2, r0, r2, asr #3
 801aeae:	921c      	str	r2, [sp, #112]	; 0x70
 801aeb0:	9a08      	ldr	r2, [sp, #32]
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	9308      	str	r3, [sp, #32]
 801aeb6:	f001 0307 	and.w	r3, r1, #7
 801aeba:	9303      	str	r3, [sp, #12]
 801aebc:	e719      	b.n	801acf2 <_DrawBitmapCCW+0x126>
 801aebe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801aec0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801aec2:	9b04      	ldr	r3, [sp, #16]
 801aec4:	440a      	add	r2, r1
 801aec6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801aeca:	3301      	adds	r3, #1
 801aecc:	921c      	str	r2, [sp, #112]	; 0x70
 801aece:	9a06      	ldr	r2, [sp, #24]
 801aed0:	9304      	str	r3, [sp, #16]
 801aed2:	429a      	cmp	r2, r3
 801aed4:	f47f af3c 	bne.w	801ad50 <_DrawBitmapCCW+0x184>
 801aed8:	b00f      	add	sp, #60	; 0x3c
 801aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aede:	bf00      	nop
 801aee0:	200467e0 	.word	0x200467e0
 801aee4:	20000018 	.word	0x20000018
 801aee8:	200467d0 	.word	0x200467d0
 801aeec:	991c      	ldr	r1, [sp, #112]	; 0x70
 801aeee:	9a03      	ldr	r2, [sp, #12]
 801aef0:	4608      	mov	r0, r1
 801aef2:	f022 0303 	bic.w	r3, r2, #3
 801aef6:	4611      	mov	r1, r2
 801aef8:	eb00 02a2 	add.w	r2, r0, r2, asr #2
 801aefc:	921c      	str	r2, [sp, #112]	; 0x70
 801aefe:	9a08      	ldr	r2, [sp, #32]
 801af00:	1ad3      	subs	r3, r2, r3
 801af02:	9308      	str	r3, [sp, #32]
 801af04:	f001 0303 	and.w	r3, r1, #3
 801af08:	9303      	str	r3, [sp, #12]
 801af0a:	e6f2      	b.n	801acf2 <_DrawBitmapCCW+0x126>
 801af0c:	4690      	mov	r8, r2
 801af0e:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 801af12:	4689      	mov	r9, r1
 801af14:	9b00      	ldr	r3, [sp, #0]
 801af16:	2008      	movs	r0, #8
 801af18:	46ca      	mov	sl, r9
 801af1a:	eb03 0708 	add.w	r7, r3, r8
 801af1e:	f7ff f9bb 	bl	801a298 <LCD__GetPfSetPixel>
 801af22:	9b01      	ldr	r3, [sp, #4]
 801af24:	4606      	mov	r6, r0
 801af26:	9c08      	ldr	r4, [sp, #32]
 801af28:	eb09 0503 	add.w	r5, r9, r3
 801af2c:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801af30:	4621      	mov	r1, r4
 801af32:	4638      	mov	r0, r7
 801af34:	3c01      	subs	r4, #1
 801af36:	47b0      	blx	r6
 801af38:	45aa      	cmp	sl, r5
 801af3a:	d1f7      	bne.n	801af2c <_DrawBitmapCCW+0x360>
 801af3c:	f108 0801 	add.w	r8, r8, #1
 801af40:	9b06      	ldr	r3, [sp, #24]
 801af42:	44d9      	add	r9, fp
 801af44:	4543      	cmp	r3, r8
 801af46:	dce5      	bgt.n	801af14 <_DrawBitmapCCW+0x348>
 801af48:	e790      	b.n	801ae6c <_DrawBitmapCCW+0x2a0>
 801af4a:	461e      	mov	r6, r3
 801af4c:	9b08      	ldr	r3, [sp, #32]
 801af4e:	f8cd b00c 	str.w	fp, [sp, #12]
 801af52:	ebca 0503 	rsb	r5, sl, r3
 801af56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801af58:	46b0      	mov	r8, r6
 801af5a:	f8cd 9000 	str.w	r9, [sp]
 801af5e:	9302      	str	r3, [sp, #8]
 801af60:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801af64:	e027      	b.n	801afb6 <_DrawBitmapCCW+0x3ea>
 801af66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801af68:	1ab6      	subs	r6, r6, r2
 801af6a:	4617      	mov	r7, r2
 801af6c:	fa44 fc0b 	asr.w	ip, r4, fp
 801af70:	40bc      	lsls	r4, r7
 801af72:	9a03      	ldr	r2, [sp, #12]
 801af74:	1c69      	adds	r1, r5, #1
 801af76:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 801af7a:	9800      	ldr	r0, [sp, #0]
 801af7c:	b2e4      	uxtb	r4, r4
 801af7e:	d104      	bne.n	801af8a <_DrawBitmapCCW+0x3be>
 801af80:	f89e 9010 	ldrb.w	r9, [lr, #16]
 801af84:	f019 0f02 	tst.w	r9, #2
 801af88:	d10e      	bne.n	801afa8 <_DrawBitmapCCW+0x3dc>
 801af8a:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
 801af8e:	f8de 9000 	ldr.w	r9, [lr]
 801af92:	f8ce c000 	str.w	ip, [lr]
 801af96:	f7fe fc6d 	bl	8019874 <LCD_FillRect>
 801af9a:	9b05      	ldr	r3, [sp, #20]
 801af9c:	f8d3 e000 	ldr.w	lr, [r3]
 801afa0:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 801afa4:	f8c3 9000 	str.w	r9, [r3]
 801afa8:	f108 0801 	add.w	r8, r8, #1
 801afac:	9b01      	ldr	r3, [sp, #4]
 801afae:	ebca 0505 	rsb	r5, sl, r5
 801afb2:	4543      	cmp	r3, r8
 801afb4:	d083      	beq.n	801aebe <_DrawBitmapCCW+0x2f2>
 801afb6:	eb0a 0305 	add.w	r3, sl, r5
 801afba:	2e00      	cmp	r6, #0
 801afbc:	d1d3      	bne.n	801af66 <_DrawBitmapCCW+0x39a>
 801afbe:	9902      	ldr	r1, [sp, #8]
 801afc0:	465e      	mov	r6, fp
 801afc2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801afc4:	460a      	mov	r2, r1
 801afc6:	780c      	ldrb	r4, [r1, #0]
 801afc8:	3201      	adds	r2, #1
 801afca:	9202      	str	r2, [sp, #8]
 801afcc:	e7ce      	b.n	801af6c <_DrawBitmapCCW+0x3a0>
 801afce:	991c      	ldr	r1, [sp, #112]	; 0x70
 801afd0:	9a03      	ldr	r2, [sp, #12]
 801afd2:	4608      	mov	r0, r1
 801afd4:	f022 0301 	bic.w	r3, r2, #1
 801afd8:	4611      	mov	r1, r2
 801afda:	eb00 0262 	add.w	r2, r0, r2, asr #1
 801afde:	921c      	str	r2, [sp, #112]	; 0x70
 801afe0:	9a08      	ldr	r2, [sp, #32]
 801afe2:	1ad3      	subs	r3, r2, r3
 801afe4:	9308      	str	r3, [sp, #32]
 801afe6:	f001 0301 	and.w	r3, r1, #1
 801afea:	9303      	str	r3, [sp, #12]
 801afec:	e681      	b.n	801acf2 <_DrawBitmapCCW+0x126>
 801afee:	9202      	str	r2, [sp, #8]
 801aff0:	f04f 09f0 	mov.w	r9, #240	; 0xf0
 801aff4:	9a03      	ldr	r2, [sp, #12]
 801aff6:	9b08      	ldr	r3, [sp, #32]
 801aff8:	911c      	str	r1, [sp, #112]	; 0x70
 801affa:	1a9b      	subs	r3, r3, r2
 801affc:	9a01      	ldr	r2, [sp, #4]
 801affe:	ebc2 0803 	rsb	r8, r2, r3
 801b002:	9304      	str	r3, [sp, #16]
 801b004:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b006:	2004      	movs	r0, #4
 801b008:	9a02      	ldr	r2, [sp, #8]
 801b00a:	781d      	ldrb	r5, [r3, #0]
 801b00c:	9b00      	ldr	r3, [sp, #0]
 801b00e:	189f      	adds	r7, r3, r2
 801b010:	f7ff f942 	bl	801a298 <LCD__GetPfSetPixel>
 801b014:	9c03      	ldr	r4, [sp, #12]
 801b016:	4606      	mov	r6, r0
 801b018:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 801b01c:	f8dd b010 	ldr.w	fp, [sp, #16]
 801b020:	e001      	b.n	801b026 <_DrawBitmapCCW+0x45a>
 801b022:	45c3      	cmp	fp, r8
 801b024:	d01a      	beq.n	801b05c <_DrawBitmapCCW+0x490>
 801b026:	f1c4 0201 	rsb	r2, r4, #1
 801b02a:	3401      	adds	r4, #1
 801b02c:	4659      	mov	r1, fp
 801b02e:	4638      	mov	r0, r7
 801b030:	0092      	lsls	r2, r2, #2
 801b032:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b036:	f1c2 0304 	rsb	r3, r2, #4
 801b03a:	fa49 f303 	asr.w	r3, r9, r3
 801b03e:	402b      	ands	r3, r5
 801b040:	fa23 f202 	lsr.w	r2, r3, r2
 801b044:	b2d2      	uxtb	r2, r2
 801b046:	47b0      	blx	r6
 801b048:	2c02      	cmp	r4, #2
 801b04a:	d1ea      	bne.n	801b022 <_DrawBitmapCCW+0x456>
 801b04c:	45c3      	cmp	fp, r8
 801b04e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b052:	f04f 0400 	mov.w	r4, #0
 801b056:	f10a 0a01 	add.w	sl, sl, #1
 801b05a:	d1e4      	bne.n	801b026 <_DrawBitmapCCW+0x45a>
 801b05c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b05e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b060:	9b02      	ldr	r3, [sp, #8]
 801b062:	440a      	add	r2, r1
 801b064:	3301      	adds	r3, #1
 801b066:	921c      	str	r2, [sp, #112]	; 0x70
 801b068:	9a06      	ldr	r2, [sp, #24]
 801b06a:	9302      	str	r3, [sp, #8]
 801b06c:	429a      	cmp	r2, r3
 801b06e:	dcc9      	bgt.n	801b004 <_DrawBitmapCCW+0x438>
 801b070:	e6fc      	b.n	801ae6c <_DrawBitmapCCW+0x2a0>
 801b072:	9202      	str	r2, [sp, #8]
 801b074:	f04f 09c0 	mov.w	r9, #192	; 0xc0
 801b078:	9a03      	ldr	r2, [sp, #12]
 801b07a:	9b08      	ldr	r3, [sp, #32]
 801b07c:	911c      	str	r1, [sp, #112]	; 0x70
 801b07e:	1a9b      	subs	r3, r3, r2
 801b080:	9a01      	ldr	r2, [sp, #4]
 801b082:	ebc2 0803 	rsb	r8, r2, r3
 801b086:	9304      	str	r3, [sp, #16]
 801b088:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b08a:	9a02      	ldr	r2, [sp, #8]
 801b08c:	781d      	ldrb	r5, [r3, #0]
 801b08e:	9b00      	ldr	r3, [sp, #0]
 801b090:	9c03      	ldr	r4, [sp, #12]
 801b092:	189f      	adds	r7, r3, r2
 801b094:	4b64      	ldr	r3, [pc, #400]	; (801b228 <_DrawBitmapCCW+0x65c>)
 801b096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b098:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
 801b09c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b09e:	2002      	movs	r0, #2
 801b0a0:	9301      	str	r3, [sp, #4]
 801b0a2:	f7ff f8f9 	bl	801a298 <LCD__GetPfSetPixel>
 801b0a6:	f8dd a010 	ldr.w	sl, [sp, #16]
 801b0aa:	4606      	mov	r6, r0
 801b0ac:	e001      	b.n	801b0b2 <_DrawBitmapCCW+0x4e6>
 801b0ae:	45c2      	cmp	sl, r8
 801b0b0:	d021      	beq.n	801b0f6 <_DrawBitmapCCW+0x52a>
 801b0b2:	f1c4 0203 	rsb	r2, r4, #3
 801b0b6:	ab0e      	add	r3, sp, #56	; 0x38
 801b0b8:	3401      	adds	r4, #1
 801b0ba:	4651      	mov	r1, sl
 801b0bc:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 801b0c0:	4638      	mov	r0, r7
 801b0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b0c6:	f1ce 0206 	rsb	r2, lr, #6
 801b0ca:	fa49 f202 	asr.w	r2, r9, r2
 801b0ce:	402a      	ands	r2, r5
 801b0d0:	fa22 f20e 	lsr.w	r2, r2, lr
 801b0d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b0d8:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801b0dc:	47b0      	blx	r6
 801b0de:	2c04      	cmp	r4, #4
 801b0e0:	d1e5      	bne.n	801b0ae <_DrawBitmapCCW+0x4e2>
 801b0e2:	9a01      	ldr	r2, [sp, #4]
 801b0e4:	45c2      	cmp	sl, r8
 801b0e6:	f04f 0400 	mov.w	r4, #0
 801b0ea:	4613      	mov	r3, r2
 801b0ec:	7855      	ldrb	r5, [r2, #1]
 801b0ee:	f103 0301 	add.w	r3, r3, #1
 801b0f2:	9301      	str	r3, [sp, #4]
 801b0f4:	d1dd      	bne.n	801b0b2 <_DrawBitmapCCW+0x4e6>
 801b0f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b0f8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b0fa:	9b02      	ldr	r3, [sp, #8]
 801b0fc:	440a      	add	r2, r1
 801b0fe:	3301      	adds	r3, #1
 801b100:	921c      	str	r2, [sp, #112]	; 0x70
 801b102:	9a06      	ldr	r2, [sp, #24]
 801b104:	9302      	str	r3, [sp, #8]
 801b106:	429a      	cmp	r2, r3
 801b108:	dcbe      	bgt.n	801b088 <_DrawBitmapCCW+0x4bc>
 801b10a:	e6af      	b.n	801ae6c <_DrawBitmapCCW+0x2a0>
 801b10c:	9c03      	ldr	r4, [sp, #12]
 801b10e:	2780      	movs	r7, #128	; 0x80
 801b110:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801b112:	9d07      	ldr	r5, [sp, #28]
 801b114:	f8cd 8004 	str.w	r8, [sp, #4]
 801b118:	e005      	b.n	801b126 <_DrawBitmapCCW+0x55a>
 801b11a:	2c08      	cmp	r4, #8
 801b11c:	f105 35ff 	add.w	r5, r5, #4294967295
 801b120:	d017      	beq.n	801b152 <_DrawBitmapCCW+0x586>
 801b122:	455d      	cmp	r5, fp
 801b124:	d018      	beq.n	801b158 <_DrawBitmapCCW+0x58c>
 801b126:	fa47 f304 	asr.w	r3, r7, r4
 801b12a:	7832      	ldrb	r2, [r6, #0]
 801b12c:	3401      	adds	r4, #1
 801b12e:	421a      	tst	r2, r3
 801b130:	d0f3      	beq.n	801b11a <_DrawBitmapCCW+0x54e>
 801b132:	f8d9 0000 	ldr.w	r0, [r9]
 801b136:	462a      	mov	r2, r5
 801b138:	9b04      	ldr	r3, [sp, #16]
 801b13a:	3d01      	subs	r5, #1
 801b13c:	7c40      	ldrb	r0, [r0, #17]
 801b13e:	9901      	ldr	r1, [sp, #4]
 801b140:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801b144:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801b148:	f8de 8018 	ldr.w	r8, [lr, #24]
 801b14c:	47c0      	blx	r8
 801b14e:	2c08      	cmp	r4, #8
 801b150:	d1e7      	bne.n	801b122 <_DrawBitmapCCW+0x556>
 801b152:	3601      	adds	r6, #1
 801b154:	2400      	movs	r4, #0
 801b156:	e7e4      	b.n	801b122 <_DrawBitmapCCW+0x556>
 801b158:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b15a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b15c:	9b02      	ldr	r3, [sp, #8]
 801b15e:	440a      	add	r2, r1
 801b160:	3301      	adds	r3, #1
 801b162:	921c      	str	r2, [sp, #112]	; 0x70
 801b164:	9a06      	ldr	r2, [sp, #24]
 801b166:	9302      	str	r3, [sp, #8]
 801b168:	429a      	cmp	r2, r3
 801b16a:	f77f ae7f 	ble.w	801ae6c <_DrawBitmapCCW+0x2a0>
 801b16e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	9304      	str	r3, [sp, #16]
 801b174:	e65e      	b.n	801ae34 <_DrawBitmapCCW+0x268>
 801b176:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b178:	9c03      	ldr	r4, [sp, #12]
 801b17a:	6812      	ldr	r2, [r2, #0]
 801b17c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801b17e:	9201      	str	r2, [sp, #4]
 801b180:	9d07      	ldr	r5, [sp, #28]
 801b182:	e003      	b.n	801b18c <_DrawBitmapCCW+0x5c0>
 801b184:	455d      	cmp	r5, fp
 801b186:	d0e7      	beq.n	801b158 <_DrawBitmapCCW+0x58c>
 801b188:	f8d9 3000 	ldr.w	r3, [r9]
 801b18c:	7c5a      	ldrb	r2, [r3, #17]
 801b18e:	2380      	movs	r3, #128	; 0x80
 801b190:	7839      	ldrb	r1, [r7, #0]
 801b192:	4123      	asrs	r3, r4
 801b194:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 801b198:	3401      	adds	r4, #1
 801b19a:	462a      	mov	r2, r5
 801b19c:	4219      	tst	r1, r3
 801b19e:	9b01      	ldr	r3, [sp, #4]
 801b1a0:	68c6      	ldr	r6, [r0, #12]
 801b1a2:	4641      	mov	r1, r8
 801b1a4:	469e      	mov	lr, r3
 801b1a6:	9b04      	ldr	r3, [sp, #16]
 801b1a8:	69b6      	ldr	r6, [r6, #24]
 801b1aa:	f105 35ff 	add.w	r5, r5, #4294967295
 801b1ae:	bf08      	it	eq
 801b1b0:	4673      	moveq	r3, lr
 801b1b2:	47b0      	blx	r6
 801b1b4:	2c08      	cmp	r4, #8
 801b1b6:	d1e5      	bne.n	801b184 <_DrawBitmapCCW+0x5b8>
 801b1b8:	3701      	adds	r7, #1
 801b1ba:	2400      	movs	r4, #0
 801b1bc:	e7e2      	b.n	801b184 <_DrawBitmapCCW+0x5b8>
 801b1be:	7c5b      	ldrb	r3, [r3, #17]
 801b1c0:	9c03      	ldr	r4, [sp, #12]
 801b1c2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801b1c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801b1c8:	691b      	ldr	r3, [r3, #16]
 801b1ca:	9d07      	ldr	r5, [sp, #28]
 801b1cc:	689b      	ldr	r3, [r3, #8]
 801b1ce:	4798      	blx	r3
 801b1d0:	9001      	str	r0, [sp, #4]
 801b1d2:	e005      	b.n	801b1e0 <_DrawBitmapCCW+0x614>
 801b1d4:	2c08      	cmp	r4, #8
 801b1d6:	f105 35ff 	add.w	r5, r5, #4294967295
 801b1da:	d022      	beq.n	801b222 <_DrawBitmapCCW+0x656>
 801b1dc:	455d      	cmp	r5, fp
 801b1de:	d0bb      	beq.n	801b158 <_DrawBitmapCCW+0x58c>
 801b1e0:	2380      	movs	r3, #128	; 0x80
 801b1e2:	7832      	ldrb	r2, [r6, #0]
 801b1e4:	4123      	asrs	r3, r4
 801b1e6:	3401      	adds	r4, #1
 801b1e8:	421a      	tst	r2, r3
 801b1ea:	d0f3      	beq.n	801b1d4 <_DrawBitmapCCW+0x608>
 801b1ec:	f8d9 3000 	ldr.w	r3, [r9]
 801b1f0:	462a      	mov	r2, r5
 801b1f2:	4641      	mov	r1, r8
 801b1f4:	7c5b      	ldrb	r3, [r3, #17]
 801b1f6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801b1fa:	68c3      	ldr	r3, [r0, #12]
 801b1fc:	695b      	ldr	r3, [r3, #20]
 801b1fe:	4798      	blx	r3
 801b200:	f8d9 1000 	ldr.w	r1, [r9]
 801b204:	9b01      	ldr	r3, [sp, #4]
 801b206:	462a      	mov	r2, r5
 801b208:	3d01      	subs	r5, #1
 801b20a:	4043      	eors	r3, r0
 801b20c:	7c48      	ldrb	r0, [r1, #17]
 801b20e:	4641      	mov	r1, r8
 801b210:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801b214:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801b218:	f8de 7018 	ldr.w	r7, [lr, #24]
 801b21c:	47b8      	blx	r7
 801b21e:	2c08      	cmp	r4, #8
 801b220:	d1dc      	bne.n	801b1dc <_DrawBitmapCCW+0x610>
 801b222:	3601      	adds	r6, #1
 801b224:	2400      	movs	r4, #0
 801b226:	e7d9      	b.n	801b1dc <_DrawBitmapCCW+0x610>
 801b228:	08027048 	.word	0x08027048

0801b22c <LCD_SelectLCD>:
 801b22c:	b510      	push	{r4, lr}
 801b22e:	4c0e      	ldr	r4, [pc, #56]	; (801b268 <LCD_SelectLCD+0x3c>)
 801b230:	4b0e      	ldr	r3, [pc, #56]	; (801b26c <LCD_SelectLCD+0x40>)
 801b232:	6822      	ldr	r2, [r4, #0]
 801b234:	7c51      	ldrb	r1, [r2, #17]
 801b236:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b23a:	b138      	cbz	r0, 801b24c <LCD_SelectLCD+0x20>
 801b23c:	68c3      	ldr	r3, [r0, #12]
 801b23e:	b113      	cbz	r3, 801b246 <LCD_SelectLCD+0x1a>
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	2b04      	cmp	r3, #4
 801b244:	d00b      	beq.n	801b25e <LCD_SelectLCD+0x32>
 801b246:	6800      	ldr	r0, [r0, #0]
 801b248:	2800      	cmp	r0, #0
 801b24a:	d1f7      	bne.n	801b23c <LCD_SelectLCD+0x10>
 801b24c:	2100      	movs	r1, #0
 801b24e:	f102 0308 	add.w	r3, r2, #8
 801b252:	6611      	str	r1, [r2, #96]	; 0x60
 801b254:	6153      	str	r3, [r2, #20]
 801b256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b25a:	f7fe bdcf 	b.w	8019dfc <LCD_SetClipRectMax>
 801b25e:	f7f8 fde7 	bl	8013e30 <GUI_DEVICE_Unlink>
 801b262:	6822      	ldr	r2, [r4, #0]
 801b264:	e7f2      	b.n	801b24c <LCD_SelectLCD+0x20>
 801b266:	bf00      	nop
 801b268:	20000018 	.word	0x20000018
 801b26c:	200467d0 	.word	0x200467d0

0801b270 <LCD_GetPosEx>:
 801b270:	b530      	push	{r4, r5, lr}
 801b272:	b083      	sub	sp, #12
 801b274:	460c      	mov	r4, r1
 801b276:	4615      	mov	r5, r2
 801b278:	f7f8 fd94 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b27c:	9001      	str	r0, [sp, #4]
 801b27e:	b170      	cbz	r0, 801b29e <LCD_GetPosEx+0x2e>
 801b280:	68c3      	ldr	r3, [r0, #12]
 801b282:	2104      	movs	r1, #4
 801b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b286:	eb0d 0001 	add.w	r0, sp, r1
 801b28a:	4798      	blx	r3
 801b28c:	4603      	mov	r3, r0
 801b28e:	b130      	cbz	r0, 801b29e <LCD_GetPosEx+0x2e>
 801b290:	9801      	ldr	r0, [sp, #4]
 801b292:	462a      	mov	r2, r5
 801b294:	4621      	mov	r1, r4
 801b296:	4798      	blx	r3
 801b298:	2000      	movs	r0, #0
 801b29a:	b003      	add	sp, #12
 801b29c:	bd30      	pop	{r4, r5, pc}
 801b29e:	2001      	movs	r0, #1
 801b2a0:	b003      	add	sp, #12
 801b2a2:	bd30      	pop	{r4, r5, pc}

0801b2a4 <LCD_SetDevFunc>:
 801b2a4:	b530      	push	{r4, r5, lr}
 801b2a6:	b083      	sub	sp, #12
 801b2a8:	460c      	mov	r4, r1
 801b2aa:	4615      	mov	r5, r2
 801b2ac:	f7f8 fd7a 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b2b0:	9001      	str	r0, [sp, #4]
 801b2b2:	b168      	cbz	r0, 801b2d0 <LCD_SetDevFunc+0x2c>
 801b2b4:	68c3      	ldr	r3, [r0, #12]
 801b2b6:	2116      	movs	r1, #22
 801b2b8:	a801      	add	r0, sp, #4
 801b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2bc:	4798      	blx	r3
 801b2be:	4603      	mov	r3, r0
 801b2c0:	b130      	cbz	r0, 801b2d0 <LCD_SetDevFunc+0x2c>
 801b2c2:	9801      	ldr	r0, [sp, #4]
 801b2c4:	462a      	mov	r2, r5
 801b2c6:	4621      	mov	r1, r4
 801b2c8:	4798      	blx	r3
 801b2ca:	2000      	movs	r0, #0
 801b2cc:	b003      	add	sp, #12
 801b2ce:	bd30      	pop	{r4, r5, pc}
 801b2d0:	2001      	movs	r0, #1
 801b2d2:	b003      	add	sp, #12
 801b2d4:	bd30      	pop	{r4, r5, pc}
 801b2d6:	bf00      	nop

0801b2d8 <LCD_SetLUTEntryEx>:
 801b2d8:	b530      	push	{r4, r5, lr}
 801b2da:	b083      	sub	sp, #12
 801b2dc:	460c      	mov	r4, r1
 801b2de:	4615      	mov	r5, r2
 801b2e0:	f7f8 fd60 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b2e4:	9001      	str	r0, [sp, #4]
 801b2e6:	b168      	cbz	r0, 801b304 <LCD_SetLUTEntryEx+0x2c>
 801b2e8:	68c3      	ldr	r3, [r0, #12]
 801b2ea:	2110      	movs	r1, #16
 801b2ec:	a801      	add	r0, sp, #4
 801b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b2f0:	4798      	blx	r3
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	b130      	cbz	r0, 801b304 <LCD_SetLUTEntryEx+0x2c>
 801b2f6:	9801      	ldr	r0, [sp, #4]
 801b2f8:	462a      	mov	r2, r5
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	4798      	blx	r3
 801b2fe:	2000      	movs	r0, #0
 801b300:	b003      	add	sp, #12
 801b302:	bd30      	pop	{r4, r5, pc}
 801b304:	2001      	movs	r0, #1
 801b306:	b003      	add	sp, #12
 801b308:	bd30      	pop	{r4, r5, pc}
 801b30a:	bf00      	nop

0801b30c <LCD_SetPosEx>:
 801b30c:	b530      	push	{r4, r5, lr}
 801b30e:	b083      	sub	sp, #12
 801b310:	460c      	mov	r4, r1
 801b312:	4615      	mov	r5, r2
 801b314:	f7f8 fd46 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b318:	9001      	str	r0, [sp, #4]
 801b31a:	b168      	cbz	r0, 801b338 <LCD_SetPosEx+0x2c>
 801b31c:	68c3      	ldr	r3, [r0, #12]
 801b31e:	2103      	movs	r1, #3
 801b320:	a801      	add	r0, sp, #4
 801b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b324:	4798      	blx	r3
 801b326:	4603      	mov	r3, r0
 801b328:	b130      	cbz	r0, 801b338 <LCD_SetPosEx+0x2c>
 801b32a:	9801      	ldr	r0, [sp, #4]
 801b32c:	462a      	mov	r2, r5
 801b32e:	4621      	mov	r1, r4
 801b330:	4798      	blx	r3
 801b332:	2000      	movs	r0, #0
 801b334:	b003      	add	sp, #12
 801b336:	bd30      	pop	{r4, r5, pc}
 801b338:	2001      	movs	r0, #1
 801b33a:	b003      	add	sp, #12
 801b33c:	bd30      	pop	{r4, r5, pc}
 801b33e:	bf00      	nop

0801b340 <LCD_SetSizeEx>:
 801b340:	b530      	push	{r4, r5, lr}
 801b342:	b083      	sub	sp, #12
 801b344:	460c      	mov	r4, r1
 801b346:	4615      	mov	r5, r2
 801b348:	f7f8 fd2c 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b34c:	9001      	str	r0, [sp, #4]
 801b34e:	b168      	cbz	r0, 801b36c <LCD_SetSizeEx+0x2c>
 801b350:	68c3      	ldr	r3, [r0, #12]
 801b352:	210b      	movs	r1, #11
 801b354:	a801      	add	r0, sp, #4
 801b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b358:	4798      	blx	r3
 801b35a:	4603      	mov	r3, r0
 801b35c:	b130      	cbz	r0, 801b36c <LCD_SetSizeEx+0x2c>
 801b35e:	9801      	ldr	r0, [sp, #4]
 801b360:	462a      	mov	r2, r5
 801b362:	4621      	mov	r1, r4
 801b364:	4798      	blx	r3
 801b366:	2000      	movs	r0, #0
 801b368:	b003      	add	sp, #12
 801b36a:	bd30      	pop	{r4, r5, pc}
 801b36c:	2001      	movs	r0, #1
 801b36e:	b003      	add	sp, #12
 801b370:	bd30      	pop	{r4, r5, pc}
 801b372:	bf00      	nop

0801b374 <LCD_SetVRAMAddrEx>:
 801b374:	b510      	push	{r4, lr}
 801b376:	b082      	sub	sp, #8
 801b378:	460c      	mov	r4, r1
 801b37a:	f7f8 fd13 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b37e:	9001      	str	r0, [sp, #4]
 801b380:	b160      	cbz	r0, 801b39c <LCD_SetVRAMAddrEx+0x28>
 801b382:	68c3      	ldr	r3, [r0, #12]
 801b384:	2109      	movs	r1, #9
 801b386:	a801      	add	r0, sp, #4
 801b388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b38a:	4798      	blx	r3
 801b38c:	4603      	mov	r3, r0
 801b38e:	b128      	cbz	r0, 801b39c <LCD_SetVRAMAddrEx+0x28>
 801b390:	9801      	ldr	r0, [sp, #4]
 801b392:	4621      	mov	r1, r4
 801b394:	4798      	blx	r3
 801b396:	2000      	movs	r0, #0
 801b398:	b002      	add	sp, #8
 801b39a:	bd10      	pop	{r4, pc}
 801b39c:	2001      	movs	r0, #1
 801b39e:	b002      	add	sp, #8
 801b3a0:	bd10      	pop	{r4, pc}
 801b3a2:	bf00      	nop

0801b3a4 <LCD_SetVSizeEx>:
 801b3a4:	b530      	push	{r4, r5, lr}
 801b3a6:	b083      	sub	sp, #12
 801b3a8:	460c      	mov	r4, r1
 801b3aa:	4615      	mov	r5, r2
 801b3ac:	f7f8 fcfa 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801b3b0:	9001      	str	r0, [sp, #4]
 801b3b2:	b168      	cbz	r0, 801b3d0 <LCD_SetVSizeEx+0x2c>
 801b3b4:	68c3      	ldr	r3, [r0, #12]
 801b3b6:	210a      	movs	r1, #10
 801b3b8:	a801      	add	r0, sp, #4
 801b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3bc:	4798      	blx	r3
 801b3be:	4603      	mov	r3, r0
 801b3c0:	b130      	cbz	r0, 801b3d0 <LCD_SetVSizeEx+0x2c>
 801b3c2:	9801      	ldr	r0, [sp, #4]
 801b3c4:	462a      	mov	r2, r5
 801b3c6:	4621      	mov	r1, r4
 801b3c8:	4798      	blx	r3
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	b003      	add	sp, #12
 801b3ce:	bd30      	pop	{r4, r5, pc}
 801b3d0:	2001      	movs	r0, #1
 801b3d2:	b003      	add	sp, #12
 801b3d4:	bd30      	pop	{r4, r5, pc}
 801b3d6:	bf00      	nop

0801b3d8 <LCD_UpdateColorIndices>:
 801b3d8:	b510      	push	{r4, lr}
 801b3da:	4c07      	ldr	r4, [pc, #28]	; (801b3f8 <LCD_UpdateColorIndices+0x20>)
 801b3dc:	6823      	ldr	r3, [r4, #0]
 801b3de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801b3e0:	f7fe fda2 	bl	8019f28 <LCD_Color2Index>
 801b3e4:	f7fe fdbc 	bl	8019f60 <LCD_SetColorIndex>
 801b3e8:	6823      	ldr	r3, [r4, #0]
 801b3ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b3ec:	f7fe fd9c 	bl	8019f28 <LCD_Color2Index>
 801b3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3f4:	f7fe bdc0 	b.w	8019f78 <LCD_SetBkColorIndex>
 801b3f8:	20000018 	.word	0x20000018

0801b3fc <_GetRect>:
 801b3fc:	6883      	ldr	r3, [r0, #8]
 801b3fe:	2000      	movs	r0, #0
 801b400:	699a      	ldr	r2, [r3, #24]
 801b402:	69db      	ldr	r3, [r3, #28]
 801b404:	3a01      	subs	r2, #1
 801b406:	8008      	strh	r0, [r1, #0]
 801b408:	3b01      	subs	r3, #1
 801b40a:	8048      	strh	r0, [r1, #2]
 801b40c:	808a      	strh	r2, [r1, #4]
 801b40e:	80cb      	strh	r3, [r1, #6]
 801b410:	4770      	bx	lr
 801b412:	bf00      	nop

0801b414 <_SetPixelIndex>:
 801b414:	b410      	push	{r4}
 801b416:	6884      	ldr	r4, [r0, #8]
 801b418:	6a20      	ldr	r0, [r4, #32]
 801b41a:	6824      	ldr	r4, [r4, #0]
 801b41c:	fb00 1202 	mla	r2, r0, r2, r1
 801b420:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801b424:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b428:	4770      	bx	lr
 801b42a:	bf00      	nop

0801b42c <_GetPixelIndex>:
 801b42c:	6880      	ldr	r0, [r0, #8]
 801b42e:	6a03      	ldr	r3, [r0, #32]
 801b430:	6800      	ldr	r0, [r0, #0]
 801b432:	fb03 1202 	mla	r2, r3, r2, r1
 801b436:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 801b43a:	4770      	bx	lr

0801b43c <_XorPixel>:
 801b43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b43e:	4614      	mov	r4, r2
 801b440:	6882      	ldr	r2, [r0, #8]
 801b442:	460f      	mov	r7, r1
 801b444:	4606      	mov	r6, r0
 801b446:	6a13      	ldr	r3, [r2, #32]
 801b448:	6900      	ldr	r0, [r0, #16]
 801b44a:	6811      	ldr	r1, [r2, #0]
 801b44c:	fb03 7304 	mla	r3, r3, r4, r7
 801b450:	6882      	ldr	r2, [r0, #8]
 801b452:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801b456:	4790      	blx	r2
 801b458:	68b3      	ldr	r3, [r6, #8]
 801b45a:	4068      	eors	r0, r5
 801b45c:	6a19      	ldr	r1, [r3, #32]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	fb01 7404 	mla	r4, r1, r4, r7
 801b464:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 801b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b46a:	bf00      	nop

0801b46c <_GetDevProp>:
 801b46c:	3901      	subs	r1, #1
 801b46e:	6883      	ldr	r3, [r0, #8]
 801b470:	290d      	cmp	r1, #13
 801b472:	d816      	bhi.n	801b4a2 <_GetDevProp+0x36>
 801b474:	e8df f001 	tbb	[pc, r1]
 801b478:	0d13110f 	.word	0x0d13110f
 801b47c:	0b151515 	.word	0x0b151515
 801b480:	07090907 	.word	0x07090907
 801b484:	0707      	.short	0x0707
 801b486:	2000      	movs	r0, #0
 801b488:	4770      	bx	lr
 801b48a:	2001      	movs	r0, #1
 801b48c:	4770      	bx	lr
 801b48e:	2010      	movs	r0, #16
 801b490:	4770      	bx	lr
 801b492:	69d8      	ldr	r0, [r3, #28]
 801b494:	4770      	bx	lr
 801b496:	6918      	ldr	r0, [r3, #16]
 801b498:	4770      	bx	lr
 801b49a:	6958      	ldr	r0, [r3, #20]
 801b49c:	4770      	bx	lr
 801b49e:	6998      	ldr	r0, [r3, #24]
 801b4a0:	4770      	bx	lr
 801b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 801b4a6:	4770      	bx	lr

0801b4a8 <_GetDevData>:
 801b4a8:	2901      	cmp	r1, #1
 801b4aa:	4802      	ldr	r0, [pc, #8]	; (801b4b4 <_GetDevData+0xc>)
 801b4ac:	bf18      	it	ne
 801b4ae:	2000      	movne	r0, #0
 801b4b0:	4770      	bx	lr
 801b4b2:	bf00      	nop
 801b4b4:	08033e10 	.word	0x08033e10

0801b4b8 <_ReadRect>:
 801b4b8:	1a5b      	subs	r3, r3, r1
 801b4ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4be:	1e5e      	subs	r6, r3, #1
 801b4c0:	6880      	ldr	r0, [r0, #8]
 801b4c2:	b085      	sub	sp, #20
 801b4c4:	f103 0e01 	add.w	lr, r3, #1
 801b4c8:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801b4cc:	005b      	lsls	r3, r3, #1
 801b4ce:	0876      	lsrs	r6, r6, #1
 801b4d0:	f8d0 c000 	ldr.w	ip, [r0]
 801b4d4:	fb09 1702 	mla	r7, r9, r2, r1
 801b4d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b4da:	3601      	adds	r6, #1
 801b4dc:	9303      	str	r3, [sp, #12]
 801b4de:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801b4e2:	eb0c 0547 	add.w	r5, ip, r7, lsl #1
 801b4e6:	9301      	str	r3, [sp, #4]
 801b4e8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b4ec:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801b4f0:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801b4f4:	9302      	str	r3, [sp, #8]
 801b4f6:	1d0b      	adds	r3, r1, #4
 801b4f8:	1d28      	adds	r0, r5, #4
 801b4fa:	42ab      	cmp	r3, r5
 801b4fc:	bf8c      	ite	hi
 801b4fe:	2300      	movhi	r3, #0
 801b500:	2301      	movls	r3, #1
 801b502:	4281      	cmp	r1, r0
 801b504:	bf28      	it	cs
 801b506:	f043 0301 	orrcs.w	r3, r3, #1
 801b50a:	b36b      	cbz	r3, 801b568 <_ReadRect+0xb0>
 801b50c:	ea41 0305 	orr.w	r3, r1, r5
 801b510:	f1be 0f0c 	cmp.w	lr, #12
 801b514:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801b518:	bf94      	ite	ls
 801b51a:	2000      	movls	r0, #0
 801b51c:	2001      	movhi	r0, #1
 801b51e:	2b00      	cmp	r3, #0
 801b520:	bf18      	it	ne
 801b522:	2000      	movne	r0, #0
 801b524:	b300      	cbz	r0, 801b568 <_ReadRect+0xb0>
 801b526:	1f2c      	subs	r4, r5, #4
 801b528:	4608      	mov	r0, r1
 801b52a:	2300      	movs	r3, #0
 801b52c:	4693      	mov	fp, r2
 801b52e:	3301      	adds	r3, #1
 801b530:	f854 2f04 	ldr.w	r2, [r4, #4]!
 801b534:	429e      	cmp	r6, r3
 801b536:	f840 2b04 	str.w	r2, [r0], #4
 801b53a:	d8f8      	bhi.n	801b52e <_ReadRect+0x76>
 801b53c:	45d6      	cmp	lr, sl
 801b53e:	465a      	mov	r2, fp
 801b540:	eb07 030a 	add.w	r3, r7, sl
 801b544:	d003      	beq.n	801b54e <_ReadRect+0x96>
 801b546:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 801b54a:	f821 3008 	strh.w	r3, [r1, r8]
 801b54e:	9b01      	ldr	r3, [sp, #4]
 801b550:	3201      	adds	r2, #1
 801b552:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b554:	444f      	add	r7, r9
 801b556:	4419      	add	r1, r3
 801b558:	9b02      	ldr	r3, [sp, #8]
 801b55a:	441d      	add	r5, r3
 801b55c:	1e53      	subs	r3, r2, #1
 801b55e:	4298      	cmp	r0, r3
 801b560:	dcc9      	bgt.n	801b4f6 <_ReadRect+0x3e>
 801b562:	b005      	add	sp, #20
 801b564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b568:	9803      	ldr	r0, [sp, #12]
 801b56a:	1e8b      	subs	r3, r1, #2
 801b56c:	eb01 0b00 	add.w	fp, r1, r0
 801b570:	4628      	mov	r0, r5
 801b572:	f830 4b02 	ldrh.w	r4, [r0], #2
 801b576:	f823 4f02 	strh.w	r4, [r3, #2]!
 801b57a:	455b      	cmp	r3, fp
 801b57c:	d1f9      	bne.n	801b572 <_ReadRect+0xba>
 801b57e:	e7e6      	b.n	801b54e <_ReadRect+0x96>

0801b580 <_GetDevFunc>:
 801b580:	3901      	subs	r1, #1
 801b582:	2928      	cmp	r1, #40	; 0x28
 801b584:	d84a      	bhi.n	801b61c <_GetDevFunc+0x9c>
 801b586:	e8df f001 	tbb	[pc, r1]
 801b58a:	1d1f      	.short	0x1d1f
 801b58c:	1749191b 	.word	0x1749191b
 801b590:	47154949 	.word	0x47154949
 801b594:	41494345 	.word	0x41494345
 801b598:	4949493f 	.word	0x4949493f
 801b59c:	37393b3d 	.word	0x37393b3d
 801b5a0:	49334949 	.word	0x49334949
 801b5a4:	49494949 	.word	0x49494949
 801b5a8:	2b2d2f49 	.word	0x2b2d2f49
 801b5ac:	49234927 	.word	0x49234927
 801b5b0:	4949      	.short	0x4949
 801b5b2:	21          	.byte	0x21
 801b5b3:	00          	.byte	0x00
 801b5b4:	481a      	ldr	r0, [pc, #104]	; (801b620 <_GetDevFunc+0xa0>)
 801b5b6:	4770      	bx	lr
 801b5b8:	481a      	ldr	r0, [pc, #104]	; (801b624 <_GetDevFunc+0xa4>)
 801b5ba:	4770      	bx	lr
 801b5bc:	481a      	ldr	r0, [pc, #104]	; (801b628 <_GetDevFunc+0xa8>)
 801b5be:	4770      	bx	lr
 801b5c0:	481a      	ldr	r0, [pc, #104]	; (801b62c <_GetDevFunc+0xac>)
 801b5c2:	4770      	bx	lr
 801b5c4:	481a      	ldr	r0, [pc, #104]	; (801b630 <_GetDevFunc+0xb0>)
 801b5c6:	4770      	bx	lr
 801b5c8:	481a      	ldr	r0, [pc, #104]	; (801b634 <_GetDevFunc+0xb4>)
 801b5ca:	4770      	bx	lr
 801b5cc:	481a      	ldr	r0, [pc, #104]	; (801b638 <_GetDevFunc+0xb8>)
 801b5ce:	4770      	bx	lr
 801b5d0:	6803      	ldr	r3, [r0, #0]
 801b5d2:	689b      	ldr	r3, [r3, #8]
 801b5d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801b5d6:	4770      	bx	lr
 801b5d8:	6803      	ldr	r3, [r0, #0]
 801b5da:	689b      	ldr	r3, [r3, #8]
 801b5dc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b5de:	4770      	bx	lr
 801b5e0:	4816      	ldr	r0, [pc, #88]	; (801b63c <_GetDevFunc+0xbc>)
 801b5e2:	4770      	bx	lr
 801b5e4:	4816      	ldr	r0, [pc, #88]	; (801b640 <_GetDevFunc+0xc0>)
 801b5e6:	4770      	bx	lr
 801b5e8:	6803      	ldr	r3, [r0, #0]
 801b5ea:	689b      	ldr	r3, [r3, #8]
 801b5ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801b5ee:	4770      	bx	lr
 801b5f0:	6803      	ldr	r3, [r0, #0]
 801b5f2:	689b      	ldr	r3, [r3, #8]
 801b5f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b5f6:	4770      	bx	lr
 801b5f8:	4812      	ldr	r0, [pc, #72]	; (801b644 <_GetDevFunc+0xc4>)
 801b5fa:	4770      	bx	lr
 801b5fc:	4812      	ldr	r0, [pc, #72]	; (801b648 <_GetDevFunc+0xc8>)
 801b5fe:	4770      	bx	lr
 801b600:	4812      	ldr	r0, [pc, #72]	; (801b64c <_GetDevFunc+0xcc>)
 801b602:	4770      	bx	lr
 801b604:	4812      	ldr	r0, [pc, #72]	; (801b650 <_GetDevFunc+0xd0>)
 801b606:	4770      	bx	lr
 801b608:	4812      	ldr	r0, [pc, #72]	; (801b654 <_GetDevFunc+0xd4>)
 801b60a:	4770      	bx	lr
 801b60c:	4812      	ldr	r0, [pc, #72]	; (801b658 <_GetDevFunc+0xd8>)
 801b60e:	4770      	bx	lr
 801b610:	4812      	ldr	r0, [pc, #72]	; (801b65c <_GetDevFunc+0xdc>)
 801b612:	4770      	bx	lr
 801b614:	4812      	ldr	r0, [pc, #72]	; (801b660 <_GetDevFunc+0xe0>)
 801b616:	4770      	bx	lr
 801b618:	4812      	ldr	r0, [pc, #72]	; (801b664 <_GetDevFunc+0xe4>)
 801b61a:	4770      	bx	lr
 801b61c:	2000      	movs	r0, #0
 801b61e:	4770      	bx	lr
 801b620:	0801c2a5 	.word	0x0801c2a5
 801b624:	0801c265 	.word	0x0801c265
 801b628:	0801c1b9 	.word	0x0801c1b9
 801b62c:	0801c46d 	.word	0x0801c46d
 801b630:	0801c225 	.word	0x0801c225
 801b634:	0801b4b9 	.word	0x0801b4b9
 801b638:	0801c18d 	.word	0x0801c18d
 801b63c:	0801c1e9 	.word	0x0801c1e9
 801b640:	0801c3e9 	.word	0x0801c3e9
 801b644:	0801c379 	.word	0x0801c379
 801b648:	0801b669 	.word	0x0801b669
 801b64c:	0801b681 	.word	0x0801b681
 801b650:	0801b699 	.word	0x0801b699
 801b654:	0801b6b1 	.word	0x0801b6b1
 801b658:	0801b6bd 	.word	0x0801b6bd
 801b65c:	0801c15d 	.word	0x0801c15d
 801b660:	0801c31d 	.word	0x0801c31d
 801b664:	0801c2e5 	.word	0x0801c2e5

0801b668 <_SetChroma>:
 801b668:	b500      	push	{lr}
 801b66a:	b083      	sub	sp, #12
 801b66c:	6980      	ldr	r0, [r0, #24]
 801b66e:	9100      	str	r1, [sp, #0]
 801b670:	210d      	movs	r1, #13
 801b672:	9201      	str	r2, [sp, #4]
 801b674:	466a      	mov	r2, sp
 801b676:	f7e9 f8ef 	bl	8004858 <LCD_X_DisplayDriver>
 801b67a:	b003      	add	sp, #12
 801b67c:	f85d fb04 	ldr.w	pc, [sp], #4

0801b680 <_SetChromaMode>:
 801b680:	b500      	push	{lr}
 801b682:	b083      	sub	sp, #12
 801b684:	6980      	ldr	r0, [r0, #24]
 801b686:	aa02      	add	r2, sp, #8
 801b688:	f842 1d04 	str.w	r1, [r2, #-4]!
 801b68c:	210c      	movs	r1, #12
 801b68e:	f7e9 f8e3 	bl	8004858 <LCD_X_DisplayDriver>
 801b692:	b003      	add	sp, #12
 801b694:	f85d fb04 	ldr.w	pc, [sp], #4

0801b698 <_SetAlphaMode>:
 801b698:	b500      	push	{lr}
 801b69a:	b083      	sub	sp, #12
 801b69c:	6980      	ldr	r0, [r0, #24]
 801b69e:	aa02      	add	r2, sp, #8
 801b6a0:	f842 1d04 	str.w	r1, [r2, #-4]!
 801b6a4:	210b      	movs	r1, #11
 801b6a6:	f7e9 f8d7 	bl	8004858 <LCD_X_DisplayDriver>
 801b6aa:	b003      	add	sp, #12
 801b6ac:	f85d fb04 	ldr.w	pc, [sp], #4

0801b6b0 <_Off>:
 801b6b0:	6980      	ldr	r0, [r0, #24]
 801b6b2:	2200      	movs	r2, #0
 801b6b4:	2106      	movs	r1, #6
 801b6b6:	f7e9 b8cf 	b.w	8004858 <LCD_X_DisplayDriver>
 801b6ba:	bf00      	nop

0801b6bc <_On>:
 801b6bc:	6980      	ldr	r0, [r0, #24]
 801b6be:	2200      	movs	r2, #0
 801b6c0:	2105      	movs	r1, #5
 801b6c2:	f7e9 b8c9 	b.w	8004858 <LCD_X_DisplayDriver>
 801b6c6:	bf00      	nop

0801b6c8 <_SetOrg>:
 801b6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6cc:	2300      	movs	r3, #0
 801b6ce:	b083      	sub	sp, #12
 801b6d0:	4604      	mov	r4, r0
 801b6d2:	6980      	ldr	r0, [r0, #24]
 801b6d4:	460f      	mov	r7, r1
 801b6d6:	4690      	mov	r8, r2
 801b6d8:	9301      	str	r3, [sp, #4]
 801b6da:	9300      	str	r3, [sp, #0]
 801b6dc:	68a6      	ldr	r6, [r4, #8]
 801b6de:	f7fe ff19 	bl	801a514 <LCD_GetMirrorXEx>
 801b6e2:	4605      	mov	r5, r0
 801b6e4:	69a0      	ldr	r0, [r4, #24]
 801b6e6:	f7fe ff25 	bl	801a534 <LCD_GetMirrorYEx>
 801b6ea:	4681      	mov	r9, r0
 801b6ec:	69a0      	ldr	r0, [r4, #24]
 801b6ee:	f7fe ff31 	bl	801a554 <LCD_GetSwapXYEx>
 801b6f2:	0080      	lsls	r0, r0, #2
 801b6f4:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 801b6f8:	4328      	orrs	r0, r5
 801b6fa:	2807      	cmp	r0, #7
 801b6fc:	d810      	bhi.n	801b720 <_SetOrg+0x58>
 801b6fe:	e8df f000 	tbb	[pc, r0]
 801b702:	1a17      	.short	0x1a17
 801b704:	3a362a22 	.word	0x3a362a22
 801b708:	0442      	.short	0x0442
 801b70a:	69f2      	ldr	r2, [r6, #28]
 801b70c:	6970      	ldr	r0, [r6, #20]
 801b70e:	69b3      	ldr	r3, [r6, #24]
 801b710:	6931      	ldr	r1, [r6, #16]
 801b712:	1a12      	subs	r2, r2, r0
 801b714:	1a59      	subs	r1, r3, r1
 801b716:	ebc8 0202 	rsb	r2, r8, r2
 801b71a:	1bcf      	subs	r7, r1, r7
 801b71c:	e88d 0084 	stmia.w	sp, {r2, r7}
 801b720:	466a      	mov	r2, sp
 801b722:	2103      	movs	r1, #3
 801b724:	69a0      	ldr	r0, [r4, #24]
 801b726:	f7e9 f897 	bl	8004858 <LCD_X_DisplayDriver>
 801b72a:	b003      	add	sp, #12
 801b72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b730:	e88d 0180 	stmia.w	sp, {r7, r8}
 801b734:	e7f4      	b.n	801b720 <_SetOrg+0x58>
 801b736:	69b3      	ldr	r3, [r6, #24]
 801b738:	6931      	ldr	r1, [r6, #16]
 801b73a:	f8cd 8004 	str.w	r8, [sp, #4]
 801b73e:	1a59      	subs	r1, r3, r1
 801b740:	1bcf      	subs	r7, r1, r7
 801b742:	9700      	str	r7, [sp, #0]
 801b744:	e7ec      	b.n	801b720 <_SetOrg+0x58>
 801b746:	69f3      	ldr	r3, [r6, #28]
 801b748:	6972      	ldr	r2, [r6, #20]
 801b74a:	9700      	str	r7, [sp, #0]
 801b74c:	1a9a      	subs	r2, r3, r2
 801b74e:	ebc8 0202 	rsb	r2, r8, r2
 801b752:	9201      	str	r2, [sp, #4]
 801b754:	e7e4      	b.n	801b720 <_SetOrg+0x58>
 801b756:	69b1      	ldr	r1, [r6, #24]
 801b758:	6930      	ldr	r0, [r6, #16]
 801b75a:	69f3      	ldr	r3, [r6, #28]
 801b75c:	6972      	ldr	r2, [r6, #20]
 801b75e:	1a09      	subs	r1, r1, r0
 801b760:	1a9a      	subs	r2, r3, r2
 801b762:	1bcf      	subs	r7, r1, r7
 801b764:	ebc8 0202 	rsb	r2, r8, r2
 801b768:	9700      	str	r7, [sp, #0]
 801b76a:	9201      	str	r2, [sp, #4]
 801b76c:	e7d8      	b.n	801b720 <_SetOrg+0x58>
 801b76e:	f8cd 8000 	str.w	r8, [sp]
 801b772:	9701      	str	r7, [sp, #4]
 801b774:	e7d4      	b.n	801b720 <_SetOrg+0x58>
 801b776:	69f3      	ldr	r3, [r6, #28]
 801b778:	6972      	ldr	r2, [r6, #20]
 801b77a:	9701      	str	r7, [sp, #4]
 801b77c:	1a9a      	subs	r2, r3, r2
 801b77e:	ebc8 0202 	rsb	r2, r8, r2
 801b782:	9200      	str	r2, [sp, #0]
 801b784:	e7cc      	b.n	801b720 <_SetOrg+0x58>
 801b786:	69b3      	ldr	r3, [r6, #24]
 801b788:	6931      	ldr	r1, [r6, #16]
 801b78a:	f8cd 8000 	str.w	r8, [sp]
 801b78e:	1a59      	subs	r1, r3, r1
 801b790:	1bcf      	subs	r7, r1, r7
 801b792:	9701      	str	r7, [sp, #4]
 801b794:	e7c4      	b.n	801b720 <_SetOrg+0x58>
 801b796:	bf00      	nop

0801b798 <_FillRect>:
 801b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b79c:	6887      	ldr	r7, [r0, #8]
 801b79e:	b087      	sub	sp, #28
 801b7a0:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 801b7a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b7a4:	b156      	cbz	r6, 801b7bc <_FillRect+0x24>
 801b7a6:	4d99      	ldr	r5, [pc, #612]	; (801ba0c <_FillRect+0x274>)
 801b7a8:	6980      	ldr	r0, [r0, #24]
 801b7aa:	682d      	ldr	r5, [r5, #0]
 801b7ac:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801b7ae:	682d      	ldr	r5, [r5, #0]
 801b7b0:	e88d 0030 	stmia.w	sp, {r4, r5}
 801b7b4:	47b0      	blx	r6
 801b7b6:	b007      	add	sp, #28
 801b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7bc:	469c      	mov	ip, r3
 801b7be:	6a3b      	ldr	r3, [r7, #32]
 801b7c0:	460d      	mov	r5, r1
 801b7c2:	4992      	ldr	r1, [pc, #584]	; (801ba0c <_FillRect+0x274>)
 801b7c4:	105b      	asrs	r3, r3, #1
 801b7c6:	4696      	mov	lr, r2
 801b7c8:	1aa2      	subs	r2, r4, r2
 801b7ca:	ebc5 0c0c 	rsb	ip, r5, ip
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	680b      	ldr	r3, [r1, #0]
 801b7d2:	4614      	mov	r4, r2
 801b7d4:	9203      	str	r2, [sp, #12]
 801b7d6:	7c19      	ldrb	r1, [r3, #16]
 801b7d8:	086a      	lsrs	r2, r5, #1
 801b7da:	1c66      	adds	r6, r4, #1
 801b7dc:	683c      	ldr	r4, [r7, #0]
 801b7de:	fb00 2e0e 	mla	lr, r0, lr, r2
 801b7e2:	07c9      	lsls	r1, r1, #31
 801b7e4:	9002      	str	r0, [sp, #8]
 801b7e6:	4630      	mov	r0, r6
 801b7e8:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 801b7ec:	f10c 0401 	add.w	r4, ip, #1
 801b7f0:	d550      	bpl.n	801b894 <_FillRect+0xfc>
 801b7f2:	f015 0701 	ands.w	r7, r5, #1
 801b7f6:	d012      	beq.n	801b81e <_FillRect+0x86>
 801b7f8:	2e00      	cmp	r6, #0
 801b7fa:	f000 8102 	beq.w	801ba02 <_FillRect+0x26a>
 801b7fe:	9902      	ldr	r1, [sp, #8]
 801b800:	4635      	mov	r5, r6
 801b802:	4613      	mov	r3, r2
 801b804:	008f      	lsls	r7, r1, #2
 801b806:	681c      	ldr	r4, [r3, #0]
 801b808:	3d01      	subs	r5, #1
 801b80a:	4981      	ldr	r1, [pc, #516]	; (801ba10 <_FillRect+0x278>)
 801b80c:	ea81 0104 	eor.w	r1, r1, r4
 801b810:	6019      	str	r1, [r3, #0]
 801b812:	443b      	add	r3, r7
 801b814:	d1f7      	bne.n	801b806 <_FillRect+0x6e>
 801b816:	fb07 2706 	mla	r7, r7, r6, r2
 801b81a:	3204      	adds	r2, #4
 801b81c:	4664      	mov	r4, ip
 801b81e:	2c01      	cmp	r4, #1
 801b820:	dd28      	ble.n	801b874 <_FillRect+0xdc>
 801b822:	2e00      	cmp	r6, #0
 801b824:	f000 80e5 	beq.w	801b9f2 <_FillRect+0x25a>
 801b828:	9b02      	ldr	r3, [sp, #8]
 801b82a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801b82e:	9b03      	ldr	r3, [sp, #12]
 801b830:	fb0c f903 	mul.w	r9, ip, r3
 801b834:	f1cc 0800 	rsb	r8, ip, #0
 801b838:	eb02 0709 	add.w	r7, r2, r9
 801b83c:	463b      	mov	r3, r7
 801b83e:	4637      	mov	r7, r6
 801b840:	469e      	mov	lr, r3
 801b842:	3f01      	subs	r7, #1
 801b844:	4675      	mov	r5, lr
 801b846:	4621      	mov	r1, r4
 801b848:	682b      	ldr	r3, [r5, #0]
 801b84a:	3902      	subs	r1, #2
 801b84c:	43db      	mvns	r3, r3
 801b84e:	2901      	cmp	r1, #1
 801b850:	f845 3b04 	str.w	r3, [r5], #4
 801b854:	dcf8      	bgt.n	801b848 <_FillRect+0xb0>
 801b856:	ebcc 0e0e 	rsb	lr, ip, lr
 801b85a:	2f00      	cmp	r7, #0
 801b85c:	d1f1      	bne.n	801b842 <_FillRect+0xaa>
 801b85e:	1ea3      	subs	r3, r4, #2
 801b860:	9903      	ldr	r1, [sp, #12]
 801b862:	085b      	lsrs	r3, r3, #1
 801b864:	fb08 9801 	mla	r8, r8, r1, r9
 801b868:	3301      	adds	r3, #1
 801b86a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801b86e:	441a      	add	r2, r3
 801b870:	f004 0401 	and.w	r4, r4, #1
 801b874:	2c01      	cmp	r4, #1
 801b876:	d19e      	bne.n	801b7b6 <_FillRect+0x1e>
 801b878:	2e00      	cmp	r6, #0
 801b87a:	d09c      	beq.n	801b7b6 <_FillRect+0x1e>
 801b87c:	9b02      	ldr	r3, [sp, #8]
 801b87e:	009c      	lsls	r4, r3, #2
 801b880:	6811      	ldr	r1, [r2, #0]
 801b882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b886:	3801      	subs	r0, #1
 801b888:	ea83 0301 	eor.w	r3, r3, r1
 801b88c:	6013      	str	r3, [r2, #0]
 801b88e:	4422      	add	r2, r4
 801b890:	d1f6      	bne.n	801b880 <_FillRect+0xe8>
 801b892:	e790      	b.n	801b7b6 <_FillRect+0x1e>
 801b894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b896:	f015 0501 	ands.w	r5, r5, #1
 801b89a:	f8d3 e000 	ldr.w	lr, [r3]
 801b89e:	d014      	beq.n	801b8ca <_FillRect+0x132>
 801b8a0:	2e00      	cmp	r6, #0
 801b8a2:	f000 80aa 	beq.w	801b9fa <_FillRect+0x262>
 801b8a6:	9b02      	ldr	r3, [sp, #8]
 801b8a8:	4637      	mov	r7, r6
 801b8aa:	4614      	mov	r4, r2
 801b8ac:	0099      	lsls	r1, r3, #2
 801b8ae:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801b8b2:	8825      	ldrh	r5, [r4, #0]
 801b8b4:	3f01      	subs	r7, #1
 801b8b6:	ea45 0503 	orr.w	r5, r5, r3
 801b8ba:	6025      	str	r5, [r4, #0]
 801b8bc:	440c      	add	r4, r1
 801b8be:	d1f8      	bne.n	801b8b2 <_FillRect+0x11a>
 801b8c0:	fb01 2506 	mla	r5, r1, r6, r2
 801b8c4:	3204      	adds	r2, #4
 801b8c6:	4664      	mov	r4, ip
 801b8c8:	e001      	b.n	801b8ce <_FillRect+0x136>
 801b8ca:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801b8ce:	2c0f      	cmp	r4, #15
 801b8d0:	4473      	add	r3, lr
 801b8d2:	dd39      	ble.n	801b948 <_FillRect+0x1b0>
 801b8d4:	f1a4 0810 	sub.w	r8, r4, #16
 801b8d8:	2e00      	cmp	r6, #0
 801b8da:	f000 8094 	beq.w	801ba06 <_FillRect+0x26e>
 801b8de:	9902      	ldr	r1, [sp, #8]
 801b8e0:	ea4f 0981 	mov.w	r9, r1, lsl #2
 801b8e4:	9903      	ldr	r1, [sp, #12]
 801b8e6:	fb01 fa09 	mul.w	sl, r1, r9
 801b8ea:	f1c9 0b00 	rsb	fp, r9, #0
 801b8ee:	f10a 0720 	add.w	r7, sl, #32
 801b8f2:	4417      	add	r7, r2
 801b8f4:	4639      	mov	r1, r7
 801b8f6:	4637      	mov	r7, r6
 801b8f8:	468c      	mov	ip, r1
 801b8fa:	3f01      	subs	r7, #1
 801b8fc:	4661      	mov	r1, ip
 801b8fe:	4645      	mov	r5, r8
 801b900:	3d10      	subs	r5, #16
 801b902:	f841 3c20 	str.w	r3, [r1, #-32]
 801b906:	f841 3c1c 	str.w	r3, [r1, #-28]
 801b90a:	f101 0120 	add.w	r1, r1, #32
 801b90e:	f841 3c38 	str.w	r3, [r1, #-56]
 801b912:	f841 3c34 	str.w	r3, [r1, #-52]
 801b916:	f841 3c30 	str.w	r3, [r1, #-48]
 801b91a:	f841 3c2c 	str.w	r3, [r1, #-44]
 801b91e:	f841 3c28 	str.w	r3, [r1, #-40]
 801b922:	f841 3c24 	str.w	r3, [r1, #-36]
 801b926:	d5eb      	bpl.n	801b900 <_FillRect+0x168>
 801b928:	ebc9 0c0c 	rsb	ip, r9, ip
 801b92c:	2f00      	cmp	r7, #0
 801b92e:	d1e4      	bne.n	801b8fa <_FillRect+0x162>
 801b930:	ea4f 1118 	mov.w	r1, r8, lsr #4
 801b934:	9d03      	ldr	r5, [sp, #12]
 801b936:	3101      	adds	r1, #1
 801b938:	fb05 aa0b 	mla	sl, r5, fp, sl
 801b93c:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 801b940:	440a      	add	r2, r1
 801b942:	f004 040f 	and.w	r4, r4, #15
 801b946:	4615      	mov	r5, r2
 801b948:	2c01      	cmp	r4, #1
 801b94a:	dd3f      	ble.n	801b9cc <_FillRect+0x234>
 801b94c:	2e00      	cmp	r6, #0
 801b94e:	d052      	beq.n	801b9f6 <_FillRect+0x25e>
 801b950:	9902      	ldr	r1, [sp, #8]
 801b952:	1ea7      	subs	r7, r4, #2
 801b954:	f1a4 0b04 	sub.w	fp, r4, #4
 801b958:	f1a4 0a06 	sub.w	sl, r4, #6
 801b95c:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 801b960:	9903      	ldr	r1, [sp, #12]
 801b962:	f1a4 0908 	sub.w	r9, r4, #8
 801b966:	f1a4 080a 	sub.w	r8, r4, #10
 801b96a:	fb01 f10c 	mul.w	r1, r1, ip
 801b96e:	f1cc 0500 	rsb	r5, ip, #0
 801b972:	9105      	str	r1, [sp, #20]
 801b974:	1851      	adds	r1, r2, r1
 801b976:	9504      	str	r5, [sp, #16]
 801b978:	4635      	mov	r5, r6
 801b97a:	2f01      	cmp	r7, #1
 801b97c:	f105 35ff 	add.w	r5, r5, #4294967295
 801b980:	600b      	str	r3, [r1, #0]
 801b982:	dd13      	ble.n	801b9ac <_FillRect+0x214>
 801b984:	f1bb 0f01 	cmp.w	fp, #1
 801b988:	604b      	str	r3, [r1, #4]
 801b98a:	dd0f      	ble.n	801b9ac <_FillRect+0x214>
 801b98c:	f1ba 0f01 	cmp.w	sl, #1
 801b990:	608b      	str	r3, [r1, #8]
 801b992:	dd0b      	ble.n	801b9ac <_FillRect+0x214>
 801b994:	f1b9 0f01 	cmp.w	r9, #1
 801b998:	60cb      	str	r3, [r1, #12]
 801b99a:	dd07      	ble.n	801b9ac <_FillRect+0x214>
 801b99c:	f1b8 0f01 	cmp.w	r8, #1
 801b9a0:	610b      	str	r3, [r1, #16]
 801b9a2:	dd03      	ble.n	801b9ac <_FillRect+0x214>
 801b9a4:	2c0d      	cmp	r4, #13
 801b9a6:	614b      	str	r3, [r1, #20]
 801b9a8:	dd00      	ble.n	801b9ac <_FillRect+0x214>
 801b9aa:	618b      	str	r3, [r1, #24]
 801b9ac:	ebcc 0101 	rsb	r1, ip, r1
 801b9b0:	2d00      	cmp	r5, #0
 801b9b2:	d1e2      	bne.n	801b97a <_FillRect+0x1e2>
 801b9b4:	087b      	lsrs	r3, r7, #1
 801b9b6:	9904      	ldr	r1, [sp, #16]
 801b9b8:	9d03      	ldr	r5, [sp, #12]
 801b9ba:	9f05      	ldr	r7, [sp, #20]
 801b9bc:	3301      	adds	r3, #1
 801b9be:	fb05 7101 	mla	r1, r5, r1, r7
 801b9c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b9c6:	441a      	add	r2, r3
 801b9c8:	f004 0401 	and.w	r4, r4, #1
 801b9cc:	2c01      	cmp	r4, #1
 801b9ce:	f47f aef2 	bne.w	801b7b6 <_FillRect+0x1e>
 801b9d2:	2e00      	cmp	r6, #0
 801b9d4:	f43f aeef 	beq.w	801b7b6 <_FillRect+0x1e>
 801b9d8:	9b02      	ldr	r3, [sp, #8]
 801b9da:	0099      	lsls	r1, r3, #2
 801b9dc:	6814      	ldr	r4, [r2, #0]
 801b9de:	3801      	subs	r0, #1
 801b9e0:	4b0b      	ldr	r3, [pc, #44]	; (801ba10 <_FillRect+0x278>)
 801b9e2:	ea03 0304 	and.w	r3, r3, r4
 801b9e6:	ea4e 0303 	orr.w	r3, lr, r3
 801b9ea:	6013      	str	r3, [r2, #0]
 801b9ec:	440a      	add	r2, r1
 801b9ee:	d1f5      	bne.n	801b9dc <_FillRect+0x244>
 801b9f0:	e6e1      	b.n	801b7b6 <_FillRect+0x1e>
 801b9f2:	463a      	mov	r2, r7
 801b9f4:	e73c      	b.n	801b870 <_FillRect+0xd8>
 801b9f6:	462a      	mov	r2, r5
 801b9f8:	e7e6      	b.n	801b9c8 <_FillRect+0x230>
 801b9fa:	4615      	mov	r5, r2
 801b9fc:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801ba00:	e760      	b.n	801b8c4 <_FillRect+0x12c>
 801ba02:	4617      	mov	r7, r2
 801ba04:	e709      	b.n	801b81a <_FillRect+0x82>
 801ba06:	462a      	mov	r2, r5
 801ba08:	e79b      	b.n	801b942 <_FillRect+0x1aa>
 801ba0a:	bf00      	nop
 801ba0c:	20000018 	.word	0x20000018
 801ba10:	ffff0000 	.word	0xffff0000

0801ba14 <_DrawHLine>:
 801ba14:	b500      	push	{lr}
 801ba16:	b083      	sub	sp, #12
 801ba18:	9200      	str	r2, [sp, #0]
 801ba1a:	f7ff febd 	bl	801b798 <_FillRect>
 801ba1e:	b003      	add	sp, #12
 801ba20:	f85d fb04 	ldr.w	pc, [sp], #4

0801ba24 <_DrawVLine>:
 801ba24:	b500      	push	{lr}
 801ba26:	b083      	sub	sp, #12
 801ba28:	9300      	str	r3, [sp, #0]
 801ba2a:	460b      	mov	r3, r1
 801ba2c:	f7ff feb4 	bl	801b798 <_FillRect>
 801ba30:	b003      	add	sp, #12
 801ba32:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba36:	bf00      	nop

0801ba38 <_DrawBitmap>:
 801ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba3c:	b08b      	sub	sp, #44	; 0x2c
 801ba3e:	460c      	mov	r4, r1
 801ba40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ba42:	9002      	str	r0, [sp, #8]
 801ba44:	9303      	str	r3, [sp, #12]
 801ba46:	1e69      	subs	r1, r5, #1
 801ba48:	6883      	ldr	r3, [r0, #8]
 801ba4a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ba4c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ba4e:	9000      	str	r0, [sp, #0]
 801ba50:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ba52:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801ba56:	9001      	str	r0, [sp, #4]
 801ba58:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801ba5a:	290f      	cmp	r1, #15
 801ba5c:	d837      	bhi.n	801bace <_DrawBitmap+0x96>
 801ba5e:	e8df f011 	tbh	[pc, r1, lsl #1]
 801ba62:	0039      	.short	0x0039
 801ba64:	003600ab 	.word	0x003600ab
 801ba68:	003600f7 	.word	0x003600f7
 801ba6c:	00360036 	.word	0x00360036
 801ba70:	00360144 	.word	0x00360144
 801ba74:	00360036 	.word	0x00360036
 801ba78:	00360036 	.word	0x00360036
 801ba7c:	00360036 	.word	0x00360036
 801ba80:	0010      	.short	0x0010
 801ba82:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801ba84:	b12d      	cbz	r5, 801ba92 <_DrawBitmap+0x5a>
 801ba86:	49be      	ldr	r1, [pc, #760]	; (801bd80 <_DrawBitmap+0x348>)
 801ba88:	6809      	ldr	r1, [r1, #0]
 801ba8a:	7c09      	ldrb	r1, [r1, #16]
 801ba8c:	07c9      	lsls	r1, r1, #31
 801ba8e:	f140 8354 	bpl.w	801c13a <_DrawBitmap+0x702>
 801ba92:	2e00      	cmp	r6, #0
 801ba94:	dd1b      	ble.n	801bace <_DrawBitmap+0x96>
 801ba96:	4615      	mov	r5, r2
 801ba98:	9a03      	ldr	r2, [sp, #12]
 801ba9a:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 801bd84 <_DrawBitmap+0x34c>
 801ba9e:	0057      	lsls	r7, r2, #1
 801baa0:	442e      	add	r6, r5
 801baa2:	f8dd b008 	ldr.w	fp, [sp, #8]
 801baa6:	f8dd 9000 	ldr.w	r9, [sp]
 801baaa:	e001      	b.n	801bab0 <_DrawBitmap+0x78>
 801baac:	f8db 3008 	ldr.w	r3, [fp, #8]
 801bab0:	6a18      	ldr	r0, [r3, #32]
 801bab2:	4641      	mov	r1, r8
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	463a      	mov	r2, r7
 801bab8:	fb00 4005 	mla	r0, r0, r5, r4
 801babc:	3501      	adds	r5, #1
 801babe:	44c8      	add	r8, r9
 801bac0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801bac4:	f8da 3000 	ldr.w	r3, [sl]
 801bac8:	4798      	blx	r3
 801baca:	42b5      	cmp	r5, r6
 801bacc:	d1ee      	bne.n	801baac <_DrawBitmap+0x74>
 801bace:	b00b      	add	sp, #44	; 0x2c
 801bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801bad6:	b12f      	cbz	r7, 801bae4 <_DrawBitmap+0xac>
 801bad8:	49a9      	ldr	r1, [pc, #676]	; (801bd80 <_DrawBitmap+0x348>)
 801bada:	6809      	ldr	r1, [r1, #0]
 801badc:	7c09      	ldrb	r1, [r1, #16]
 801bade:	07c9      	lsls	r1, r1, #31
 801bae0:	f140 831a 	bpl.w	801c118 <_DrawBitmap+0x6e0>
 801bae4:	2e00      	cmp	r6, #0
 801bae6:	ddf2      	ble.n	801bace <_DrawBitmap+0x96>
 801bae8:	9901      	ldr	r1, [sp, #4]
 801baea:	4699      	mov	r9, r3
 801baec:	4613      	mov	r3, r2
 801baee:	18b2      	adds	r2, r6, r2
 801baf0:	1860      	adds	r0, r4, r1
 801baf2:	f1c1 0108 	rsb	r1, r1, #8
 801baf6:	9204      	str	r2, [sp, #16]
 801baf8:	469a      	mov	sl, r3
 801bafa:	4aa1      	ldr	r2, [pc, #644]	; (801bd80 <_DrawBitmap+0x348>)
 801bafc:	464e      	mov	r6, r9
 801bafe:	9108      	str	r1, [sp, #32]
 801bb00:	4629      	mov	r1, r5
 801bb02:	f8df b284 	ldr.w	fp, [pc, #644]	; 801bd88 <_DrawBitmap+0x350>
 801bb06:	4613      	mov	r3, r2
 801bb08:	9005      	str	r0, [sp, #20]
 801bb0a:	9206      	str	r2, [sp, #24]
 801bb0c:	9507      	str	r5, [sp, #28]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	f898 2000 	ldrb.w	r2, [r8]
 801bb14:	7c1b      	ldrb	r3, [r3, #16]
 801bb16:	f81b 4002 	ldrb.w	r4, [fp, r2]
 801bb1a:	f003 0303 	and.w	r3, r3, #3
 801bb1e:	9a01      	ldr	r2, [sp, #4]
 801bb20:	6a35      	ldr	r5, [r6, #32]
 801bb22:	4114      	asrs	r4, r2
 801bb24:	2b02      	cmp	r3, #2
 801bb26:	9a05      	ldr	r2, [sp, #20]
 801bb28:	6848      	ldr	r0, [r1, #4]
 801bb2a:	fb05 250a 	mla	r5, r5, sl, r2
 801bb2e:	f000 81b4 	beq.w	801be9a <_DrawBitmap+0x462>
 801bb32:	2b03      	cmp	r3, #3
 801bb34:	f000 8191 	beq.w	801be5a <_DrawBitmap+0x422>
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	f000 818e 	beq.w	801be5a <_DrawBitmap+0x422>
 801bb3e:	6833      	ldr	r3, [r6, #0]
 801bb40:	462a      	mov	r2, r5
 801bb42:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801bb46:	46c1      	mov	r9, r8
 801bb48:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801bb4c:	469a      	mov	sl, r3
 801bb4e:	4665      	mov	r5, ip
 801bb50:	f8dd e020 	ldr.w	lr, [sp, #32]
 801bb54:	680e      	ldr	r6, [r1, #0]
 801bb56:	4694      	mov	ip, r2
 801bb58:	4575      	cmp	r5, lr
 801bb5a:	462f      	mov	r7, r5
 801bb5c:	eb0a 024c 	add.w	r2, sl, ip, lsl #1
 801bb60:	bf28      	it	cs
 801bb62:	4677      	movcs	r7, lr
 801bb64:	463b      	mov	r3, r7
 801bb66:	f014 0f01 	tst.w	r4, #1
 801bb6a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bb6e:	bf0c      	ite	eq
 801bb70:	4631      	moveq	r1, r6
 801bb72:	4601      	movne	r1, r0
 801bb74:	3b01      	subs	r3, #1
 801bb76:	f822 1b02 	strh.w	r1, [r2], #2
 801bb7a:	d1f4      	bne.n	801bb66 <_DrawBitmap+0x12e>
 801bb7c:	ebbe 0e07 	subs.w	lr, lr, r7
 801bb80:	44bc      	add	ip, r7
 801bb82:	eba5 0507 	sub.w	r5, r5, r7
 801bb86:	d107      	bne.n	801bb98 <_DrawBitmap+0x160>
 801bb88:	f899 3001 	ldrb.w	r3, [r9, #1]
 801bb8c:	f04f 0e08 	mov.w	lr, #8
 801bb90:	f109 0901 	add.w	r9, r9, #1
 801bb94:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801bb98:	2d00      	cmp	r5, #0
 801bb9a:	d1dd      	bne.n	801bb58 <_DrawBitmap+0x120>
 801bb9c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801bba0:	9b00      	ldr	r3, [sp, #0]
 801bba2:	f10a 0a01 	add.w	sl, sl, #1
 801bba6:	4498      	add	r8, r3
 801bba8:	9b04      	ldr	r3, [sp, #16]
 801bbaa:	459a      	cmp	sl, r3
 801bbac:	d08f      	beq.n	801bace <_DrawBitmap+0x96>
 801bbae:	9b02      	ldr	r3, [sp, #8]
 801bbb0:	9907      	ldr	r1, [sp, #28]
 801bbb2:	689e      	ldr	r6, [r3, #8]
 801bbb4:	9b06      	ldr	r3, [sp, #24]
 801bbb6:	e7aa      	b.n	801bb0e <_DrawBitmap+0xd6>
 801bbb8:	2e00      	cmp	r6, #0
 801bbba:	dd88      	ble.n	801bace <_DrawBitmap+0x96>
 801bbbc:	9901      	ldr	r1, [sp, #4]
 801bbbe:	eb06 0b02 	add.w	fp, r6, r2
 801bbc2:	486f      	ldr	r0, [pc, #444]	; (801bd80 <_DrawBitmap+0x348>)
 801bbc4:	1861      	adds	r1, r4, r1
 801bbc6:	9f03      	ldr	r7, [sp, #12]
 801bbc8:	6800      	ldr	r0, [r0, #0]
 801bbca:	460c      	mov	r4, r1
 801bbcc:	9104      	str	r1, [sp, #16]
 801bbce:	21c0      	movs	r1, #192	; 0xc0
 801bbd0:	9002      	str	r0, [sp, #8]
 801bbd2:	4427      	add	r7, r4
 801bbd4:	9802      	ldr	r0, [sp, #8]
 801bbd6:	7c04      	ldrb	r4, [r0, #16]
 801bbd8:	f898 0000 	ldrb.w	r0, [r8]
 801bbdc:	f014 0403 	ands.w	r4, r4, #3
 801bbe0:	f000 809f 	beq.w	801bd22 <_DrawBitmap+0x2ea>
 801bbe4:	2c02      	cmp	r4, #2
 801bbe6:	d12d      	bne.n	801bc44 <_DrawBitmap+0x20c>
 801bbe8:	2d00      	cmp	r5, #0
 801bbea:	f000 816e 	beq.w	801beca <_DrawBitmap+0x492>
 801bbee:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bbf2:	46c2      	mov	sl, r8
 801bbf4:	f8dd c010 	ldr.w	ip, [sp, #16]
 801bbf8:	4691      	mov	r9, r2
 801bbfa:	e001      	b.n	801bc00 <_DrawBitmap+0x1c8>
 801bbfc:	4567      	cmp	r7, ip
 801bbfe:	d020      	beq.n	801bc42 <_DrawBitmap+0x20a>
 801bc00:	f1ce 0603 	rsb	r6, lr, #3
 801bc04:	f10e 0e01 	add.w	lr, lr, #1
 801bc08:	0076      	lsls	r6, r6, #1
 801bc0a:	f1c6 0406 	rsb	r4, r6, #6
 801bc0e:	fa41 f404 	asr.w	r4, r1, r4
 801bc12:	4004      	ands	r4, r0
 801bc14:	40f4      	lsrs	r4, r6
 801bc16:	d007      	beq.n	801bc28 <_DrawBitmap+0x1f0>
 801bc18:	6a1e      	ldr	r6, [r3, #32]
 801bc1a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801bc1e:	fb06 c609 	mla	r6, r6, r9, ip
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 801bc28:	f1be 0f04 	cmp.w	lr, #4
 801bc2c:	f10c 0c01 	add.w	ip, ip, #1
 801bc30:	d1e4      	bne.n	801bbfc <_DrawBitmap+0x1c4>
 801bc32:	4567      	cmp	r7, ip
 801bc34:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801bc38:	f04f 0e00 	mov.w	lr, #0
 801bc3c:	f10a 0a01 	add.w	sl, sl, #1
 801bc40:	d1de      	bne.n	801bc00 <_DrawBitmap+0x1c8>
 801bc42:	464a      	mov	r2, r9
 801bc44:	3201      	adds	r2, #1
 801bc46:	9800      	ldr	r0, [sp, #0]
 801bc48:	455a      	cmp	r2, fp
 801bc4a:	4480      	add	r8, r0
 801bc4c:	d1c2      	bne.n	801bbd4 <_DrawBitmap+0x19c>
 801bc4e:	e73e      	b.n	801bace <_DrawBitmap+0x96>
 801bc50:	2e00      	cmp	r6, #0
 801bc52:	f77f af3c 	ble.w	801bace <_DrawBitmap+0x96>
 801bc56:	9901      	ldr	r1, [sp, #4]
 801bc58:	eb06 0b02 	add.w	fp, r6, r2
 801bc5c:	4848      	ldr	r0, [pc, #288]	; (801bd80 <_DrawBitmap+0x348>)
 801bc5e:	1861      	adds	r1, r4, r1
 801bc60:	9f03      	ldr	r7, [sp, #12]
 801bc62:	6800      	ldr	r0, [r0, #0]
 801bc64:	460c      	mov	r4, r1
 801bc66:	9104      	str	r1, [sp, #16]
 801bc68:	21f0      	movs	r1, #240	; 0xf0
 801bc6a:	9002      	str	r0, [sp, #8]
 801bc6c:	4427      	add	r7, r4
 801bc6e:	9802      	ldr	r0, [sp, #8]
 801bc70:	7c04      	ldrb	r4, [r0, #16]
 801bc72:	f898 0000 	ldrb.w	r0, [r8]
 801bc76:	f014 0403 	ands.w	r4, r4, #3
 801bc7a:	f000 80a3 	beq.w	801bdc4 <_DrawBitmap+0x38c>
 801bc7e:	2c02      	cmp	r4, #2
 801bc80:	d12d      	bne.n	801bcde <_DrawBitmap+0x2a6>
 801bc82:	2d00      	cmp	r5, #0
 801bc84:	f000 814a 	beq.w	801bf1c <_DrawBitmap+0x4e4>
 801bc88:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bc8c:	46c2      	mov	sl, r8
 801bc8e:	f8dd c010 	ldr.w	ip, [sp, #16]
 801bc92:	4691      	mov	r9, r2
 801bc94:	e001      	b.n	801bc9a <_DrawBitmap+0x262>
 801bc96:	4567      	cmp	r7, ip
 801bc98:	d020      	beq.n	801bcdc <_DrawBitmap+0x2a4>
 801bc9a:	f1ce 0601 	rsb	r6, lr, #1
 801bc9e:	f10e 0e01 	add.w	lr, lr, #1
 801bca2:	00b6      	lsls	r6, r6, #2
 801bca4:	f1c6 0404 	rsb	r4, r6, #4
 801bca8:	fa41 f404 	asr.w	r4, r1, r4
 801bcac:	4004      	ands	r4, r0
 801bcae:	40f4      	lsrs	r4, r6
 801bcb0:	d007      	beq.n	801bcc2 <_DrawBitmap+0x28a>
 801bcb2:	6a1e      	ldr	r6, [r3, #32]
 801bcb4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801bcb8:	fb06 c609 	mla	r6, r6, r9, ip
 801bcbc:	681a      	ldr	r2, [r3, #0]
 801bcbe:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 801bcc2:	f1be 0f02 	cmp.w	lr, #2
 801bcc6:	f10c 0c01 	add.w	ip, ip, #1
 801bcca:	d1e4      	bne.n	801bc96 <_DrawBitmap+0x25e>
 801bccc:	4567      	cmp	r7, ip
 801bcce:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801bcd2:	f04f 0e00 	mov.w	lr, #0
 801bcd6:	f10a 0a01 	add.w	sl, sl, #1
 801bcda:	d1de      	bne.n	801bc9a <_DrawBitmap+0x262>
 801bcdc:	464a      	mov	r2, r9
 801bcde:	3201      	adds	r2, #1
 801bce0:	9800      	ldr	r0, [sp, #0]
 801bce2:	455a      	cmp	r2, fp
 801bce4:	4480      	add	r8, r0
 801bce6:	d1c2      	bne.n	801bc6e <_DrawBitmap+0x236>
 801bce8:	e6f1      	b.n	801bace <_DrawBitmap+0x96>
 801bcea:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801bcec:	2f00      	cmp	r7, #0
 801bcee:	f000 813e 	beq.w	801bf6e <_DrawBitmap+0x536>
 801bcf2:	4923      	ldr	r1, [pc, #140]	; (801bd80 <_DrawBitmap+0x348>)
 801bcf4:	6809      	ldr	r1, [r1, #0]
 801bcf6:	7c09      	ldrb	r1, [r1, #16]
 801bcf8:	0788      	lsls	r0, r1, #30
 801bcfa:	f100 8138 	bmi.w	801bf6e <_DrawBitmap+0x536>
 801bcfe:	2d00      	cmp	r5, #0
 801bd00:	f000 8135 	beq.w	801bf6e <_DrawBitmap+0x536>
 801bd04:	9b02      	ldr	r3, [sp, #8]
 801bd06:	46bc      	mov	ip, r7
 801bd08:	9900      	ldr	r1, [sp, #0]
 801bd0a:	6998      	ldr	r0, [r3, #24]
 801bd0c:	4643      	mov	r3, r8
 801bd0e:	9116      	str	r1, [sp, #88]	; 0x58
 801bd10:	4621      	mov	r1, r4
 801bd12:	9c03      	ldr	r4, [sp, #12]
 801bd14:	9517      	str	r5, [sp, #92]	; 0x5c
 801bd16:	9615      	str	r6, [sp, #84]	; 0x54
 801bd18:	9414      	str	r4, [sp, #80]	; 0x50
 801bd1a:	b00b      	add	sp, #44	; 0x2c
 801bd1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd20:	4760      	bx	ip
 801bd22:	6a1c      	ldr	r4, [r3, #32]
 801bd24:	46c1      	mov	r9, r8
 801bd26:	681e      	ldr	r6, [r3, #0]
 801bd28:	fb04 fa02 	mul.w	sl, r4, r2
 801bd2c:	9c04      	ldr	r4, [sp, #16]
 801bd2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bd32:	eb04 0c0a 	add.w	ip, r4, sl
 801bd36:	44ba      	add	sl, r7
 801bd38:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 801bd3c:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 801bd40:	b91d      	cbnz	r5, 801bd4a <_DrawBitmap+0x312>
 801bd42:	e02c      	b.n	801bd9e <_DrawBitmap+0x366>
 801bd44:	45d4      	cmp	ip, sl
 801bd46:	f43f af7d 	beq.w	801bc44 <_DrawBitmap+0x20c>
 801bd4a:	f1ce 0403 	rsb	r4, lr, #3
 801bd4e:	f10e 0e01 	add.w	lr, lr, #1
 801bd52:	0066      	lsls	r6, r4, #1
 801bd54:	f1be 0f04 	cmp.w	lr, #4
 801bd58:	f1c6 0406 	rsb	r4, r6, #6
 801bd5c:	fa41 f404 	asr.w	r4, r1, r4
 801bd60:	ea04 0400 	and.w	r4, r4, r0
 801bd64:	fa24 f406 	lsr.w	r4, r4, r6
 801bd68:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801bd6c:	f82c 4b02 	strh.w	r4, [ip], #2
 801bd70:	d1e8      	bne.n	801bd44 <_DrawBitmap+0x30c>
 801bd72:	f899 0001 	ldrb.w	r0, [r9, #1]
 801bd76:	f04f 0e00 	mov.w	lr, #0
 801bd7a:	f109 0901 	add.w	r9, r9, #1
 801bd7e:	e7e1      	b.n	801bd44 <_DrawBitmap+0x30c>
 801bd80:	20000018 	.word	0x20000018
 801bd84:	2000004c 	.word	0x2000004c
 801bd88:	08033ecc 	.word	0x08033ecc
 801bd8c:	f899 0001 	ldrb.w	r0, [r9, #1]
 801bd90:	f04f 0e00 	mov.w	lr, #0
 801bd94:	f109 0901 	add.w	r9, r9, #1
 801bd98:	45d4      	cmp	ip, sl
 801bd9a:	f43f af53 	beq.w	801bc44 <_DrawBitmap+0x20c>
 801bd9e:	f1ce 0403 	rsb	r4, lr, #3
 801bda2:	f10e 0e01 	add.w	lr, lr, #1
 801bda6:	0066      	lsls	r6, r4, #1
 801bda8:	f1be 0f04 	cmp.w	lr, #4
 801bdac:	f1c6 0406 	rsb	r4, r6, #6
 801bdb0:	fa41 f404 	asr.w	r4, r1, r4
 801bdb4:	ea04 0400 	and.w	r4, r4, r0
 801bdb8:	fa24 f406 	lsr.w	r4, r4, r6
 801bdbc:	f82c 4b02 	strh.w	r4, [ip], #2
 801bdc0:	d1ea      	bne.n	801bd98 <_DrawBitmap+0x360>
 801bdc2:	e7e3      	b.n	801bd8c <_DrawBitmap+0x354>
 801bdc4:	6a1c      	ldr	r4, [r3, #32]
 801bdc6:	46c1      	mov	r9, r8
 801bdc8:	681e      	ldr	r6, [r3, #0]
 801bdca:	fb04 fa02 	mul.w	sl, r4, r2
 801bdce:	9c04      	ldr	r4, [sp, #16]
 801bdd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bdd4:	eb04 0c0a 	add.w	ip, r4, sl
 801bdd8:	44ba      	add	sl, r7
 801bdda:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 801bdde:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 801bde2:	b91d      	cbnz	r5, 801bdec <_DrawBitmap+0x3b4>
 801bde4:	e026      	b.n	801be34 <_DrawBitmap+0x3fc>
 801bde6:	45d4      	cmp	ip, sl
 801bde8:	f43f af79 	beq.w	801bcde <_DrawBitmap+0x2a6>
 801bdec:	f1ce 0401 	rsb	r4, lr, #1
 801bdf0:	f10e 0e01 	add.w	lr, lr, #1
 801bdf4:	00a6      	lsls	r6, r4, #2
 801bdf6:	f1be 0f02 	cmp.w	lr, #2
 801bdfa:	f1c6 0404 	rsb	r4, r6, #4
 801bdfe:	fa41 f404 	asr.w	r4, r1, r4
 801be02:	ea04 0400 	and.w	r4, r4, r0
 801be06:	fa24 f406 	lsr.w	r4, r4, r6
 801be0a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801be0e:	f82c 4b02 	strh.w	r4, [ip], #2
 801be12:	d1e8      	bne.n	801bde6 <_DrawBitmap+0x3ae>
 801be14:	f899 0001 	ldrb.w	r0, [r9, #1]
 801be18:	f04f 0e00 	mov.w	lr, #0
 801be1c:	f109 0901 	add.w	r9, r9, #1
 801be20:	e7e1      	b.n	801bde6 <_DrawBitmap+0x3ae>
 801be22:	f899 0001 	ldrb.w	r0, [r9, #1]
 801be26:	f04f 0e00 	mov.w	lr, #0
 801be2a:	f109 0901 	add.w	r9, r9, #1
 801be2e:	45d4      	cmp	ip, sl
 801be30:	f43f af55 	beq.w	801bcde <_DrawBitmap+0x2a6>
 801be34:	f1ce 0401 	rsb	r4, lr, #1
 801be38:	f10e 0e01 	add.w	lr, lr, #1
 801be3c:	00a6      	lsls	r6, r4, #2
 801be3e:	f1be 0f02 	cmp.w	lr, #2
 801be42:	f1c6 0404 	rsb	r4, r6, #4
 801be46:	fa41 f404 	asr.w	r4, r1, r4
 801be4a:	ea04 0400 	and.w	r4, r4, r0
 801be4e:	fa24 f406 	lsr.w	r4, r4, r6
 801be52:	f82c 4b02 	strh.w	r4, [ip], #2
 801be56:	d1ea      	bne.n	801be2e <_DrawBitmap+0x3f6>
 801be58:	e7e3      	b.n	801be22 <_DrawBitmap+0x3ea>
 801be5a:	9b02      	ldr	r3, [sp, #8]
 801be5c:	691b      	ldr	r3, [r3, #16]
 801be5e:	689b      	ldr	r3, [r3, #8]
 801be60:	4798      	blx	r3
 801be62:	9b03      	ldr	r3, [sp, #12]
 801be64:	4641      	mov	r1, r8
 801be66:	eb03 0e05 	add.w	lr, r3, r5
 801be6a:	006d      	lsls	r5, r5, #1
 801be6c:	9b08      	ldr	r3, [sp, #32]
 801be6e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801be72:	f014 0f01 	tst.w	r4, #1
 801be76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801be7a:	d003      	beq.n	801be84 <_DrawBitmap+0x44c>
 801be7c:	6837      	ldr	r7, [r6, #0]
 801be7e:	5bea      	ldrh	r2, [r5, r7]
 801be80:	4042      	eors	r2, r0
 801be82:	53ea      	strh	r2, [r5, r7]
 801be84:	3b01      	subs	r3, #1
 801be86:	d104      	bne.n	801be92 <_DrawBitmap+0x45a>
 801be88:	784a      	ldrb	r2, [r1, #1]
 801be8a:	2308      	movs	r3, #8
 801be8c:	3101      	adds	r1, #1
 801be8e:	f81b 4002 	ldrb.w	r4, [fp, r2]
 801be92:	3502      	adds	r5, #2
 801be94:	4575      	cmp	r5, lr
 801be96:	d1ec      	bne.n	801be72 <_DrawBitmap+0x43a>
 801be98:	e682      	b.n	801bba0 <_DrawBitmap+0x168>
 801be9a:	9b03      	ldr	r3, [sp, #12]
 801be9c:	4641      	mov	r1, r8
 801be9e:	9a08      	ldr	r2, [sp, #32]
 801bea0:	195f      	adds	r7, r3, r5
 801bea2:	006d      	lsls	r5, r5, #1
 801bea4:	007f      	lsls	r7, r7, #1
 801bea6:	f014 0f01 	tst.w	r4, #1
 801beaa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801beae:	d001      	beq.n	801beb4 <_DrawBitmap+0x47c>
 801beb0:	6833      	ldr	r3, [r6, #0]
 801beb2:	5358      	strh	r0, [r3, r5]
 801beb4:	3a01      	subs	r2, #1
 801beb6:	d104      	bne.n	801bec2 <_DrawBitmap+0x48a>
 801beb8:	784b      	ldrb	r3, [r1, #1]
 801beba:	2208      	movs	r2, #8
 801bebc:	3101      	adds	r1, #1
 801bebe:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801bec2:	3502      	adds	r5, #2
 801bec4:	42af      	cmp	r7, r5
 801bec6:	d1ee      	bne.n	801bea6 <_DrawBitmap+0x46e>
 801bec8:	e66a      	b.n	801bba0 <_DrawBitmap+0x168>
 801beca:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bece:	46c2      	mov	sl, r8
 801bed0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801bed4:	46ae      	mov	lr, r5
 801bed6:	e001      	b.n	801bedc <_DrawBitmap+0x4a4>
 801bed8:	454f      	cmp	r7, r9
 801beda:	d01d      	beq.n	801bf18 <_DrawBitmap+0x4e0>
 801bedc:	f1cc 0603 	rsb	r6, ip, #3
 801bee0:	f10c 0c01 	add.w	ip, ip, #1
 801bee4:	0076      	lsls	r6, r6, #1
 801bee6:	f1c6 0406 	rsb	r4, r6, #6
 801beea:	fa41 f404 	asr.w	r4, r1, r4
 801beee:	4004      	ands	r4, r0
 801bef0:	40f4      	lsrs	r4, r6
 801bef2:	d005      	beq.n	801bf00 <_DrawBitmap+0x4c8>
 801bef4:	6a1e      	ldr	r6, [r3, #32]
 801bef6:	681d      	ldr	r5, [r3, #0]
 801bef8:	fb06 9602 	mla	r6, r6, r2, r9
 801befc:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801bf00:	f1bc 0f04 	cmp.w	ip, #4
 801bf04:	f109 0901 	add.w	r9, r9, #1
 801bf08:	d1e6      	bne.n	801bed8 <_DrawBitmap+0x4a0>
 801bf0a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801bf0e:	f04f 0c00 	mov.w	ip, #0
 801bf12:	f10a 0a01 	add.w	sl, sl, #1
 801bf16:	e7df      	b.n	801bed8 <_DrawBitmap+0x4a0>
 801bf18:	4675      	mov	r5, lr
 801bf1a:	e693      	b.n	801bc44 <_DrawBitmap+0x20c>
 801bf1c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bf20:	46c2      	mov	sl, r8
 801bf22:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801bf26:	46ae      	mov	lr, r5
 801bf28:	e001      	b.n	801bf2e <_DrawBitmap+0x4f6>
 801bf2a:	454f      	cmp	r7, r9
 801bf2c:	d01d      	beq.n	801bf6a <_DrawBitmap+0x532>
 801bf2e:	f1cc 0601 	rsb	r6, ip, #1
 801bf32:	f10c 0c01 	add.w	ip, ip, #1
 801bf36:	00b6      	lsls	r6, r6, #2
 801bf38:	f1c6 0404 	rsb	r4, r6, #4
 801bf3c:	fa41 f404 	asr.w	r4, r1, r4
 801bf40:	4004      	ands	r4, r0
 801bf42:	40f4      	lsrs	r4, r6
 801bf44:	d005      	beq.n	801bf52 <_DrawBitmap+0x51a>
 801bf46:	6a1e      	ldr	r6, [r3, #32]
 801bf48:	681d      	ldr	r5, [r3, #0]
 801bf4a:	fb06 9602 	mla	r6, r6, r2, r9
 801bf4e:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801bf52:	f1bc 0f02 	cmp.w	ip, #2
 801bf56:	f109 0901 	add.w	r9, r9, #1
 801bf5a:	d1e6      	bne.n	801bf2a <_DrawBitmap+0x4f2>
 801bf5c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801bf60:	f04f 0c00 	mov.w	ip, #0
 801bf64:	f10a 0a01 	add.w	sl, sl, #1
 801bf68:	e7df      	b.n	801bf2a <_DrawBitmap+0x4f2>
 801bf6a:	4675      	mov	r5, lr
 801bf6c:	e6b7      	b.n	801bcde <_DrawBitmap+0x2a6>
 801bf6e:	2e00      	cmp	r6, #0
 801bf70:	f77f adad 	ble.w	801bace <_DrawBitmap+0x96>
 801bf74:	9803      	ldr	r0, [sp, #12]
 801bf76:	4416      	add	r6, r2
 801bf78:	4f77      	ldr	r7, [pc, #476]	; (801c158 <_DrawBitmap+0x720>)
 801bf7a:	f1a0 0108 	sub.w	r1, r0, #8
 801bf7e:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 801bf82:	f8d7 e000 	ldr.w	lr, [r7]
 801bf86:	08c8      	lsrs	r0, r1, #3
 801bf88:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801bf8c:	f8cd a014 	str.w	sl, [sp, #20]
 801bf90:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 801bf94:	1c47      	adds	r7, r0, #1
 801bf96:	eba1 0bc0 	sub.w	fp, r1, r0, lsl #3
 801bf9a:	f10c 0020 	add.w	r0, ip, #32
 801bf9e:	f8dd c000 	ldr.w	ip, [sp]
 801bfa2:	f8cd b018 	str.w	fp, [sp, #24]
 801bfa6:	9004      	str	r0, [sp, #16]
 801bfa8:	00f8      	lsls	r0, r7, #3
 801bfaa:	9001      	str	r0, [sp, #4]
 801bfac:	0138      	lsls	r0, r7, #4
 801bfae:	9002      	str	r0, [sp, #8]
 801bfb0:	b1f5      	cbz	r5, 801bff0 <_DrawBitmap+0x5b8>
 801bfb2:	6a18      	ldr	r0, [r3, #32]
 801bfb4:	f89e a010 	ldrb.w	sl, [lr, #16]
 801bfb8:	681f      	ldr	r7, [r3, #0]
 801bfba:	fb00 4102 	mla	r1, r0, r2, r4
 801bfbe:	f01a 0a03 	ands.w	sl, sl, #3
 801bfc2:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801bfc6:	d01a      	beq.n	801bffe <_DrawBitmap+0x5c6>
 801bfc8:	f1ba 0f02 	cmp.w	sl, #2
 801bfcc:	d110      	bne.n	801bff0 <_DrawBitmap+0x5b8>
 801bfce:	f1b9 0f00 	cmp.w	r9, #0
 801bfd2:	dd0d      	ble.n	801bff0 <_DrawBitmap+0x5b8>
 801bfd4:	9805      	ldr	r0, [sp, #20]
 801bfd6:	f108 37ff 	add.w	r7, r8, #4294967295
 801bfda:	eb01 0a00 	add.w	sl, r1, r0
 801bfde:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 801bfe2:	b110      	cbz	r0, 801bfea <_DrawBitmap+0x5b2>
 801bfe4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801bfe8:	8008      	strh	r0, [r1, #0]
 801bfea:	3102      	adds	r1, #2
 801bfec:	4551      	cmp	r1, sl
 801bfee:	d1f6      	bne.n	801bfde <_DrawBitmap+0x5a6>
 801bff0:	3201      	adds	r2, #1
 801bff2:	44e0      	add	r8, ip
 801bff4:	42b2      	cmp	r2, r6
 801bff6:	d1db      	bne.n	801bfb0 <_DrawBitmap+0x578>
 801bff8:	b00b      	add	sp, #44	; 0x2c
 801bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffe:	f1b9 0f07 	cmp.w	r9, #7
 801c002:	f340 8086 	ble.w	801c112 <_DrawBitmap+0x6da>
 801c006:	f101 0010 	add.w	r0, r1, #16
 801c00a:	f108 0708 	add.w	r7, r8, #8
 801c00e:	469a      	mov	sl, r3
 801c010:	9000      	str	r0, [sp, #0]
 801c012:	9804      	ldr	r0, [sp, #16]
 801c014:	eb00 0b01 	add.w	fp, r0, r1
 801c018:	9800      	ldr	r0, [sp, #0]
 801c01a:	f817 3c08 	ldrb.w	r3, [r7, #-8]
 801c01e:	3010      	adds	r0, #16
 801c020:	3708      	adds	r7, #8
 801c022:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c026:	f820 3c20 	strh.w	r3, [r0, #-32]
 801c02a:	f817 3c0f 	ldrb.w	r3, [r7, #-15]
 801c02e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c032:	f820 3c1e 	strh.w	r3, [r0, #-30]
 801c036:	f817 3c0e 	ldrb.w	r3, [r7, #-14]
 801c03a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c03e:	f820 3c1c 	strh.w	r3, [r0, #-28]
 801c042:	f817 3c0d 	ldrb.w	r3, [r7, #-13]
 801c046:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c04a:	f820 3c1a 	strh.w	r3, [r0, #-26]
 801c04e:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
 801c052:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c056:	f820 3c18 	strh.w	r3, [r0, #-24]
 801c05a:	f817 3c0b 	ldrb.w	r3, [r7, #-11]
 801c05e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c062:	f820 3c16 	strh.w	r3, [r0, #-22]
 801c066:	f817 3c0a 	ldrb.w	r3, [r7, #-10]
 801c06a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c06e:	f820 3c14 	strh.w	r3, [r0, #-20]
 801c072:	f817 3c09 	ldrb.w	r3, [r7, #-9]
 801c076:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c07a:	f820 3c12 	strh.w	r3, [r0, #-18]
 801c07e:	4583      	cmp	fp, r0
 801c080:	d1cb      	bne.n	801c01a <_DrawBitmap+0x5e2>
 801c082:	9802      	ldr	r0, [sp, #8]
 801c084:	4653      	mov	r3, sl
 801c086:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c08a:	4401      	add	r1, r0
 801c08c:	9801      	ldr	r0, [sp, #4]
 801c08e:	4440      	add	r0, r8
 801c090:	f1ba 0f03 	cmp.w	sl, #3
 801c094:	dd21      	ble.n	801c0da <_DrawBitmap+0x6a2>
 801c096:	7807      	ldrb	r7, [r0, #0]
 801c098:	f1aa 0a04 	sub.w	sl, sl, #4
 801c09c:	f855 b027 	ldr.w	fp, [r5, r7, lsl #2]
 801c0a0:	ea4f 079a 	mov.w	r7, sl, lsr #2
 801c0a4:	f8a1 b000 	strh.w	fp, [r1]
 801c0a8:	ebaa 0a87 	sub.w	sl, sl, r7, lsl #2
 801c0ac:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c0b0:	3701      	adds	r7, #1
 801c0b2:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c0b6:	f8a1 b002 	strh.w	fp, [r1, #2]
 801c0ba:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c0be:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c0c2:	f8a1 b004 	strh.w	fp, [r1, #4]
 801c0c6:	f890 b003 	ldrb.w	fp, [r0, #3]
 801c0ca:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801c0ce:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c0d2:	f8a1 b006 	strh.w	fp, [r1, #6]
 801c0d6:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801c0da:	f1ba 0f00 	cmp.w	sl, #0
 801c0de:	d087      	beq.n	801bff0 <_DrawBitmap+0x5b8>
 801c0e0:	7807      	ldrb	r7, [r0, #0]
 801c0e2:	f1ba 0f01 	cmp.w	sl, #1
 801c0e6:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801c0ea:	800f      	strh	r7, [r1, #0]
 801c0ec:	d080      	beq.n	801bff0 <_DrawBitmap+0x5b8>
 801c0ee:	7847      	ldrb	r7, [r0, #1]
 801c0f0:	f1ba 0f02 	cmp.w	sl, #2
 801c0f4:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801c0f8:	804f      	strh	r7, [r1, #2]
 801c0fa:	f43f af79 	beq.w	801bff0 <_DrawBitmap+0x5b8>
 801c0fe:	7880      	ldrb	r0, [r0, #2]
 801c100:	3201      	adds	r2, #1
 801c102:	44e0      	add	r8, ip
 801c104:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c108:	42b2      	cmp	r2, r6
 801c10a:	8088      	strh	r0, [r1, #4]
 801c10c:	f47f af50 	bne.w	801bfb0 <_DrawBitmap+0x578>
 801c110:	e772      	b.n	801bff8 <_DrawBitmap+0x5c0>
 801c112:	46ca      	mov	sl, r9
 801c114:	4640      	mov	r0, r8
 801c116:	e7bb      	b.n	801c090 <_DrawBitmap+0x658>
 801c118:	9b02      	ldr	r3, [sp, #8]
 801c11a:	46bc      	mov	ip, r7
 801c11c:	9900      	ldr	r1, [sp, #0]
 801c11e:	6998      	ldr	r0, [r3, #24]
 801c120:	4643      	mov	r3, r8
 801c122:	9117      	str	r1, [sp, #92]	; 0x5c
 801c124:	4621      	mov	r1, r4
 801c126:	9c03      	ldr	r4, [sp, #12]
 801c128:	9518      	str	r5, [sp, #96]	; 0x60
 801c12a:	9415      	str	r4, [sp, #84]	; 0x54
 801c12c:	9c01      	ldr	r4, [sp, #4]
 801c12e:	9616      	str	r6, [sp, #88]	; 0x58
 801c130:	9414      	str	r4, [sp, #80]	; 0x50
 801c132:	b00b      	add	sp, #44	; 0x2c
 801c134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c138:	4760      	bx	ip
 801c13a:	9b02      	ldr	r3, [sp, #8]
 801c13c:	46ac      	mov	ip, r5
 801c13e:	9900      	ldr	r1, [sp, #0]
 801c140:	6998      	ldr	r0, [r3, #24]
 801c142:	4643      	mov	r3, r8
 801c144:	9116      	str	r1, [sp, #88]	; 0x58
 801c146:	9903      	ldr	r1, [sp, #12]
 801c148:	9615      	str	r6, [sp, #84]	; 0x54
 801c14a:	9114      	str	r1, [sp, #80]	; 0x50
 801c14c:	4621      	mov	r1, r4
 801c14e:	b00b      	add	sp, #44	; 0x2c
 801c150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c154:	4760      	bx	ip
 801c156:	bf00      	nop
 801c158:	20000018 	.word	0x20000018

0801c15c <_Init>:
 801c15c:	b538      	push	{r3, r4, r5, lr}
 801c15e:	6884      	ldr	r4, [r0, #8]
 801c160:	4605      	mov	r5, r0
 801c162:	b14c      	cbz	r4, 801c178 <_Init+0x1c>
 801c164:	69a8      	ldr	r0, [r5, #24]
 801c166:	2200      	movs	r2, #0
 801c168:	2101      	movs	r1, #1
 801c16a:	f7e8 fb75 	bl	8004858 <LCD_X_DisplayDriver>
 801c16e:	2c00      	cmp	r4, #0
 801c170:	bf08      	it	eq
 801c172:	f040 0001 	orreq.w	r0, r0, #1
 801c176:	bd38      	pop	{r3, r4, r5, pc}
 801c178:	2050      	movs	r0, #80	; 0x50
 801c17a:	f7f6 fa7f 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c17e:	4621      	mov	r1, r4
 801c180:	60a8      	str	r0, [r5, #8]
 801c182:	2250      	movs	r2, #80	; 0x50
 801c184:	f7fc ffd4 	bl	8019130 <GUI__memset>
 801c188:	68ac      	ldr	r4, [r5, #8]
 801c18a:	e7eb      	b.n	801c164 <_Init+0x8>

0801c18c <_SetVRAM_BufferPTR>:
 801c18c:	b570      	push	{r4, r5, r6, lr}
 801c18e:	6884      	ldr	r4, [r0, #8]
 801c190:	460d      	mov	r5, r1
 801c192:	b11c      	cbz	r4, 801c19c <_SetVRAM_BufferPTR+0x10>
 801c194:	682b      	ldr	r3, [r5, #0]
 801c196:	60a5      	str	r5, [r4, #8]
 801c198:	6023      	str	r3, [r4, #0]
 801c19a:	bd70      	pop	{r4, r5, r6, pc}
 801c19c:	4606      	mov	r6, r0
 801c19e:	2050      	movs	r0, #80	; 0x50
 801c1a0:	f7f6 fa6c 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c1a4:	4621      	mov	r1, r4
 801c1a6:	60b0      	str	r0, [r6, #8]
 801c1a8:	2250      	movs	r2, #80	; 0x50
 801c1aa:	f7fc ffc1 	bl	8019130 <GUI__memset>
 801c1ae:	68b4      	ldr	r4, [r6, #8]
 801c1b0:	2c00      	cmp	r4, #0
 801c1b2:	d1ef      	bne.n	801c194 <_SetVRAM_BufferPTR+0x8>
 801c1b4:	bd70      	pop	{r4, r5, r6, pc}
 801c1b6:	bf00      	nop

0801c1b8 <_GetPos>:
 801c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1ba:	6884      	ldr	r4, [r0, #8]
 801c1bc:	460f      	mov	r7, r1
 801c1be:	4616      	mov	r6, r2
 801c1c0:	b124      	cbz	r4, 801c1cc <_GetPos+0x14>
 801c1c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c1c4:	603b      	str	r3, [r7, #0]
 801c1c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c1c8:	6033      	str	r3, [r6, #0]
 801c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1cc:	4605      	mov	r5, r0
 801c1ce:	2050      	movs	r0, #80	; 0x50
 801c1d0:	f7f6 fa54 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c1d4:	4621      	mov	r1, r4
 801c1d6:	60a8      	str	r0, [r5, #8]
 801c1d8:	2250      	movs	r2, #80	; 0x50
 801c1da:	f7fc ffa9 	bl	8019130 <GUI__memset>
 801c1de:	68ac      	ldr	r4, [r5, #8]
 801c1e0:	2c00      	cmp	r4, #0
 801c1e2:	d1ee      	bne.n	801c1c2 <_GetPos+0xa>
 801c1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1e6:	bf00      	nop

0801c1e8 <_ShowBuffer>:
 801c1e8:	b570      	push	{r4, r5, r6, lr}
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	b082      	sub	sp, #8
 801c1ee:	6885      	ldr	r5, [r0, #8]
 801c1f0:	4604      	mov	r4, r0
 801c1f2:	460e      	mov	r6, r1
 801c1f4:	9301      	str	r3, [sp, #4]
 801c1f6:	b145      	cbz	r5, 801c20a <_ShowBuffer+0x22>
 801c1f8:	aa02      	add	r2, sp, #8
 801c1fa:	210e      	movs	r1, #14
 801c1fc:	69a0      	ldr	r0, [r4, #24]
 801c1fe:	f842 6d04 	str.w	r6, [r2, #-4]!
 801c202:	f7e8 fb29 	bl	8004858 <LCD_X_DisplayDriver>
 801c206:	b002      	add	sp, #8
 801c208:	bd70      	pop	{r4, r5, r6, pc}
 801c20a:	2050      	movs	r0, #80	; 0x50
 801c20c:	f7f6 fa36 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c210:	4629      	mov	r1, r5
 801c212:	60a0      	str	r0, [r4, #8]
 801c214:	2250      	movs	r2, #80	; 0x50
 801c216:	f7fc ff8b 	bl	8019130 <GUI__memset>
 801c21a:	68a3      	ldr	r3, [r4, #8]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d1eb      	bne.n	801c1f8 <_ShowBuffer+0x10>
 801c220:	b002      	add	sp, #8
 801c222:	bd70      	pop	{r4, r5, r6, pc}

0801c224 <_SetAlpha>:
 801c224:	b570      	push	{r4, r5, r6, lr}
 801c226:	2300      	movs	r3, #0
 801c228:	b082      	sub	sp, #8
 801c22a:	6884      	ldr	r4, [r0, #8]
 801c22c:	4605      	mov	r5, r0
 801c22e:	460e      	mov	r6, r1
 801c230:	9301      	str	r3, [sp, #4]
 801c232:	b14c      	cbz	r4, 801c248 <_SetAlpha+0x24>
 801c234:	aa02      	add	r2, sp, #8
 801c236:	210a      	movs	r1, #10
 801c238:	62e6      	str	r6, [r4, #44]	; 0x2c
 801c23a:	69a8      	ldr	r0, [r5, #24]
 801c23c:	f842 6d04 	str.w	r6, [r2, #-4]!
 801c240:	f7e8 fb0a 	bl	8004858 <LCD_X_DisplayDriver>
 801c244:	b002      	add	sp, #8
 801c246:	bd70      	pop	{r4, r5, r6, pc}
 801c248:	2050      	movs	r0, #80	; 0x50
 801c24a:	f7f6 fa17 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c24e:	4621      	mov	r1, r4
 801c250:	60a8      	str	r0, [r5, #8]
 801c252:	2250      	movs	r2, #80	; 0x50
 801c254:	f7fc ff6c 	bl	8019130 <GUI__memset>
 801c258:	68ac      	ldr	r4, [r5, #8]
 801c25a:	2c00      	cmp	r4, #0
 801c25c:	d1ea      	bne.n	801c234 <_SetAlpha+0x10>
 801c25e:	b002      	add	sp, #8
 801c260:	bd70      	pop	{r4, r5, r6, pc}
 801c262:	bf00      	nop

0801c264 <_SetVis>:
 801c264:	b570      	push	{r4, r5, r6, lr}
 801c266:	2300      	movs	r3, #0
 801c268:	b082      	sub	sp, #8
 801c26a:	6884      	ldr	r4, [r0, #8]
 801c26c:	4605      	mov	r5, r0
 801c26e:	460e      	mov	r6, r1
 801c270:	9301      	str	r3, [sp, #4]
 801c272:	b14c      	cbz	r4, 801c288 <_SetVis+0x24>
 801c274:	aa02      	add	r2, sp, #8
 801c276:	2109      	movs	r1, #9
 801c278:	6326      	str	r6, [r4, #48]	; 0x30
 801c27a:	69a8      	ldr	r0, [r5, #24]
 801c27c:	f842 6d04 	str.w	r6, [r2, #-4]!
 801c280:	f7e8 faea 	bl	8004858 <LCD_X_DisplayDriver>
 801c284:	b002      	add	sp, #8
 801c286:	bd70      	pop	{r4, r5, r6, pc}
 801c288:	2050      	movs	r0, #80	; 0x50
 801c28a:	f7f6 f9f7 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c28e:	4621      	mov	r1, r4
 801c290:	60a8      	str	r0, [r5, #8]
 801c292:	2250      	movs	r2, #80	; 0x50
 801c294:	f7fc ff4c 	bl	8019130 <GUI__memset>
 801c298:	68ac      	ldr	r4, [r5, #8]
 801c29a:	2c00      	cmp	r4, #0
 801c29c:	d1ea      	bne.n	801c274 <_SetVis+0x10>
 801c29e:	b002      	add	sp, #8
 801c2a0:	bd70      	pop	{r4, r5, r6, pc}
 801c2a2:	bf00      	nop

0801c2a4 <_SetVRAMAddr>:
 801c2a4:	b570      	push	{r4, r5, r6, lr}
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	b082      	sub	sp, #8
 801c2aa:	6884      	ldr	r4, [r0, #8]
 801c2ac:	4606      	mov	r6, r0
 801c2ae:	460d      	mov	r5, r1
 801c2b0:	9301      	str	r3, [sp, #4]
 801c2b2:	b154      	cbz	r4, 801c2ca <_SetVRAMAddr+0x26>
 801c2b4:	aa02      	add	r2, sp, #8
 801c2b6:	2102      	movs	r1, #2
 801c2b8:	6025      	str	r5, [r4, #0]
 801c2ba:	6065      	str	r5, [r4, #4]
 801c2bc:	69b0      	ldr	r0, [r6, #24]
 801c2be:	f842 5d04 	str.w	r5, [r2, #-4]!
 801c2c2:	f7e8 fac9 	bl	8004858 <LCD_X_DisplayDriver>
 801c2c6:	b002      	add	sp, #8
 801c2c8:	bd70      	pop	{r4, r5, r6, pc}
 801c2ca:	2050      	movs	r0, #80	; 0x50
 801c2cc:	f7f6 f9d6 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c2d0:	4621      	mov	r1, r4
 801c2d2:	60b0      	str	r0, [r6, #8]
 801c2d4:	2250      	movs	r2, #80	; 0x50
 801c2d6:	f7fc ff2b 	bl	8019130 <GUI__memset>
 801c2da:	68b4      	ldr	r4, [r6, #8]
 801c2dc:	2c00      	cmp	r4, #0
 801c2de:	d1e9      	bne.n	801c2b4 <_SetVRAMAddr+0x10>
 801c2e0:	b002      	add	sp, #8
 801c2e2:	bd70      	pop	{r4, r5, r6, pc}

0801c2e4 <_SetVSize>:
 801c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2e6:	6884      	ldr	r4, [r0, #8]
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	460e      	mov	r6, r1
 801c2ec:	4617      	mov	r7, r2
 801c2ee:	b14c      	cbz	r4, 801c304 <_SetVSize+0x20>
 801c2f0:	69a8      	ldr	r0, [r5, #24]
 801c2f2:	f7fe f92f 	bl	801a554 <LCD_GetSwapXYEx>
 801c2f6:	61a6      	str	r6, [r4, #24]
 801c2f8:	61e7      	str	r7, [r4, #28]
 801c2fa:	b908      	cbnz	r0, 801c300 <_SetVSize+0x1c>
 801c2fc:	6226      	str	r6, [r4, #32]
 801c2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c300:	6227      	str	r7, [r4, #32]
 801c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c304:	2050      	movs	r0, #80	; 0x50
 801c306:	f7f6 f9b9 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c30a:	4621      	mov	r1, r4
 801c30c:	60a8      	str	r0, [r5, #8]
 801c30e:	2250      	movs	r2, #80	; 0x50
 801c310:	f7fc ff0e 	bl	8019130 <GUI__memset>
 801c314:	68ac      	ldr	r4, [r5, #8]
 801c316:	2c00      	cmp	r4, #0
 801c318:	d1ea      	bne.n	801c2f0 <_SetVSize+0xc>
 801c31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c31c <_SetSize>:
 801c31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c31e:	2300      	movs	r3, #0
 801c320:	b083      	sub	sp, #12
 801c322:	6884      	ldr	r4, [r0, #8]
 801c324:	4605      	mov	r5, r0
 801c326:	460f      	mov	r7, r1
 801c328:	4616      	mov	r6, r2
 801c32a:	9301      	str	r3, [sp, #4]
 801c32c:	9300      	str	r3, [sp, #0]
 801c32e:	b1ac      	cbz	r4, 801c35c <_SetSize+0x40>
 801c330:	6a23      	ldr	r3, [r4, #32]
 801c332:	b153      	cbz	r3, 801c34a <_SetSize+0x2e>
 801c334:	466a      	mov	r2, sp
 801c336:	2107      	movs	r1, #7
 801c338:	6127      	str	r7, [r4, #16]
 801c33a:	6166      	str	r6, [r4, #20]
 801c33c:	69a8      	ldr	r0, [r5, #24]
 801c33e:	9700      	str	r7, [sp, #0]
 801c340:	9601      	str	r6, [sp, #4]
 801c342:	f7e8 fa89 	bl	8004858 <LCD_X_DisplayDriver>
 801c346:	b003      	add	sp, #12
 801c348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c34a:	69a8      	ldr	r0, [r5, #24]
 801c34c:	f7fe f902 	bl	801a554 <LCD_GetSwapXYEx>
 801c350:	2800      	cmp	r0, #0
 801c352:	bf0c      	ite	eq
 801c354:	4638      	moveq	r0, r7
 801c356:	4630      	movne	r0, r6
 801c358:	6220      	str	r0, [r4, #32]
 801c35a:	e7eb      	b.n	801c334 <_SetSize+0x18>
 801c35c:	2050      	movs	r0, #80	; 0x50
 801c35e:	f7f6 f98d 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c362:	4621      	mov	r1, r4
 801c364:	60a8      	str	r0, [r5, #8]
 801c366:	2250      	movs	r2, #80	; 0x50
 801c368:	f7fc fee2 	bl	8019130 <GUI__memset>
 801c36c:	68ac      	ldr	r4, [r5, #8]
 801c36e:	2c00      	cmp	r4, #0
 801c370:	d1de      	bne.n	801c330 <_SetSize+0x14>
 801c372:	b003      	add	sp, #12
 801c374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c376:	bf00      	nop

0801c378 <_SetDevFunc>:
 801c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c37a:	6885      	ldr	r5, [r0, #8]
 801c37c:	460c      	mov	r4, r1
 801c37e:	4617      	mov	r7, r2
 801c380:	b325      	cbz	r5, 801c3cc <_SetDevFunc+0x54>
 801c382:	1ee3      	subs	r3, r4, #3
 801c384:	2b22      	cmp	r3, #34	; 0x22
 801c386:	d814      	bhi.n	801c3b2 <_SetDevFunc+0x3a>
 801c388:	e8df f003 	tbb	[pc, r3]
 801c38c:	13131316 	.word	0x13131316
 801c390:	13131313 	.word	0x13131313
 801c394:	13131313 	.word	0x13131313
 801c398:	13131313 	.word	0x13131313
 801c39c:	13131313 	.word	0x13131313
 801c3a0:	13181313 	.word	0x13181313
 801c3a4:	13131313 	.word	0x13131313
 801c3a8:	131c1a13 	.word	0x131c1a13
 801c3ac:	121e      	.short	0x121e
 801c3ae:	14          	.byte	0x14
 801c3af:	00          	.byte	0x00
 801c3b0:	64ef      	str	r7, [r5, #76]	; 0x4c
 801c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b4:	642f      	str	r7, [r5, #64]	; 0x40
 801c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b8:	64af      	str	r7, [r5, #72]	; 0x48
 801c3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3bc:	636f      	str	r7, [r5, #52]	; 0x34
 801c3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3c0:	63ef      	str	r7, [r5, #60]	; 0x3c
 801c3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3c4:	63af      	str	r7, [r5, #56]	; 0x38
 801c3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3c8:	646f      	str	r7, [r5, #68]	; 0x44
 801c3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3cc:	4606      	mov	r6, r0
 801c3ce:	2050      	movs	r0, #80	; 0x50
 801c3d0:	f7f6 f954 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c3d4:	4629      	mov	r1, r5
 801c3d6:	60b0      	str	r0, [r6, #8]
 801c3d8:	2250      	movs	r2, #80	; 0x50
 801c3da:	f7fc fea9 	bl	8019130 <GUI__memset>
 801c3de:	68b5      	ldr	r5, [r6, #8]
 801c3e0:	2d00      	cmp	r5, #0
 801c3e2:	d1ce      	bne.n	801c382 <_SetDevFunc+0xa>
 801c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3e6:	bf00      	nop

0801c3e8 <_CopyBuffer>:
 801c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3ec:	6884      	ldr	r4, [r0, #8]
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	460e      	mov	r6, r1
 801c3f2:	4617      	mov	r7, r2
 801c3f4:	b33c      	cbz	r4, 801c446 <_CopyBuffer+0x5e>
 801c3f6:	42be      	cmp	r6, r7
 801c3f8:	d01d      	beq.n	801c436 <_CopyBuffer+0x4e>
 801c3fa:	b1e4      	cbz	r4, 801c436 <_CopyBuffer+0x4e>
 801c3fc:	68eb      	ldr	r3, [r5, #12]
 801c3fe:	2108      	movs	r1, #8
 801c400:	4628      	mov	r0, r5
 801c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c404:	4798      	blx	r3
 801c406:	69a1      	ldr	r1, [r4, #24]
 801c408:	6963      	ldr	r3, [r4, #20]
 801c40a:	68a2      	ldr	r2, [r4, #8]
 801c40c:	fb03 f301 	mul.w	r3, r3, r1
 801c410:	fb00 f003 	mul.w	r0, r0, r3
 801c414:	08c3      	lsrs	r3, r0, #3
 801c416:	b182      	cbz	r2, 801c43a <_CopyBuffer+0x52>
 801c418:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 801c41c:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 801c420:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801c424:	f1b8 0f00 	cmp.w	r8, #0
 801c428:	d017      	beq.n	801c45a <_CopyBuffer+0x72>
 801c42a:	463a      	mov	r2, r7
 801c42c:	4631      	mov	r1, r6
 801c42e:	69a8      	ldr	r0, [r5, #24]
 801c430:	47c0      	blx	r8
 801c432:	f8c4 9000 	str.w	r9, [r4]
 801c436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c43a:	6862      	ldr	r2, [r4, #4]
 801c43c:	fb03 2106 	mla	r1, r3, r6, r2
 801c440:	fb03 2907 	mla	r9, r3, r7, r2
 801c444:	e7ec      	b.n	801c420 <_CopyBuffer+0x38>
 801c446:	2050      	movs	r0, #80	; 0x50
 801c448:	f7f6 f918 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c44c:	4621      	mov	r1, r4
 801c44e:	60a8      	str	r0, [r5, #8]
 801c450:	2250      	movs	r2, #80	; 0x50
 801c452:	f7fc fe6d 	bl	8019130 <GUI__memset>
 801c456:	68ac      	ldr	r4, [r5, #8]
 801c458:	e7cd      	b.n	801c3f6 <_CopyBuffer+0xe>
 801c45a:	4d03      	ldr	r5, [pc, #12]	; (801c468 <_CopyBuffer+0x80>)
 801c45c:	461a      	mov	r2, r3
 801c45e:	4648      	mov	r0, r9
 801c460:	682b      	ldr	r3, [r5, #0]
 801c462:	4798      	blx	r3
 801c464:	e7e5      	b.n	801c432 <_CopyBuffer+0x4a>
 801c466:	bf00      	nop
 801c468:	2000004c 	.word	0x2000004c

0801c46c <_SetPos>:
 801c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c470:	2300      	movs	r3, #0
 801c472:	b089      	sub	sp, #36	; 0x24
 801c474:	6884      	ldr	r4, [r0, #8]
 801c476:	4605      	mov	r5, r0
 801c478:	460f      	mov	r7, r1
 801c47a:	4616      	mov	r6, r2
 801c47c:	9303      	str	r3, [sp, #12]
 801c47e:	9302      	str	r3, [sp, #8]
 801c480:	9304      	str	r3, [sp, #16]
 801c482:	9305      	str	r3, [sp, #20]
 801c484:	9306      	str	r3, [sp, #24]
 801c486:	9307      	str	r3, [sp, #28]
 801c488:	2c00      	cmp	r4, #0
 801c48a:	d046      	beq.n	801c51a <_SetPos+0xae>
 801c48c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c48e:	b133      	cbz	r3, 801c49e <_SetPos+0x32>
 801c490:	4632      	mov	r2, r6
 801c492:	4639      	mov	r1, r7
 801c494:	69a8      	ldr	r0, [r5, #24]
 801c496:	4798      	blx	r3
 801c498:	b009      	add	sp, #36	; 0x24
 801c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c49e:	6267      	str	r7, [r4, #36]	; 0x24
 801c4a0:	62a6      	str	r6, [r4, #40]	; 0x28
 801c4a2:	f7fe f927 	bl	801a6f4 <LCD_GetXSizeDisplay>
 801c4a6:	4681      	mov	r9, r0
 801c4a8:	f7fe f92a 	bl	801a700 <LCD_GetYSizeDisplay>
 801c4ac:	68eb      	ldr	r3, [r5, #12]
 801c4ae:	4682      	mov	sl, r0
 801c4b0:	2108      	movs	r1, #8
 801c4b2:	4628      	mov	r0, r5
 801c4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c4b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c4ba:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801c4be:	4798      	blx	r3
 801c4c0:	1dc2      	adds	r2, r0, #7
 801c4c2:	bf48      	it	mi
 801c4c4:	f100 020e 	addmi.w	r2, r0, #14
 801c4c8:	2f00      	cmp	r7, #0
 801c4ca:	ea4f 02e2 	mov.w	r2, r2, asr #3
 801c4ce:	9206      	str	r2, [sp, #24]
 801c4d0:	db4b      	blt.n	801c56a <_SetPos+0xfe>
 801c4d2:	eb07 030b 	add.w	r3, r7, fp
 801c4d6:	9702      	str	r7, [sp, #8]
 801c4d8:	4599      	cmp	r9, r3
 801c4da:	db2c      	blt.n	801c536 <_SetPos+0xca>
 801c4dc:	f8cd b010 	str.w	fp, [sp, #16]
 801c4e0:	2e00      	cmp	r6, #0
 801c4e2:	db4c      	blt.n	801c57e <_SetPos+0x112>
 801c4e4:	eb06 0308 	add.w	r3, r6, r8
 801c4e8:	9603      	str	r6, [sp, #12]
 801c4ea:	459a      	cmp	sl, r3
 801c4ec:	db39      	blt.n	801c562 <_SetPos+0xf6>
 801c4ee:	4641      	mov	r1, r8
 801c4f0:	f8cd 8014 	str.w	r8, [sp, #20]
 801c4f4:	9b04      	ldr	r3, [sp, #16]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	dd21      	ble.n	801c53e <_SetPos+0xd2>
 801c4fa:	2900      	cmp	r1, #0
 801c4fc:	dd1f      	ble.n	801c53e <_SetPos+0xd2>
 801c4fe:	9b02      	ldr	r3, [sp, #8]
 801c500:	4599      	cmp	r9, r3
 801c502:	dd1c      	ble.n	801c53e <_SetPos+0xd2>
 801c504:	45b2      	cmp	sl, r6
 801c506:	dd1a      	ble.n	801c53e <_SetPos+0xd2>
 801c508:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d044      	beq.n	801c598 <_SetPos+0x12c>
 801c50e:	aa02      	add	r2, sp, #8
 801c510:	69a8      	ldr	r0, [r5, #24]
 801c512:	2108      	movs	r1, #8
 801c514:	f7e8 f9a0 	bl	8004858 <LCD_X_DisplayDriver>
 801c518:	e7be      	b.n	801c498 <_SetPos+0x2c>
 801c51a:	2050      	movs	r0, #80	; 0x50
 801c51c:	f7f6 f8ae 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c520:	4621      	mov	r1, r4
 801c522:	60a8      	str	r0, [r5, #8]
 801c524:	2250      	movs	r2, #80	; 0x50
 801c526:	f7fc fe03 	bl	8019130 <GUI__memset>
 801c52a:	68ac      	ldr	r4, [r5, #8]
 801c52c:	2c00      	cmp	r4, #0
 801c52e:	d1ad      	bne.n	801c48c <_SetPos+0x20>
 801c530:	b009      	add	sp, #36	; 0x24
 801c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c536:	ebc7 0709 	rsb	r7, r7, r9
 801c53a:	9704      	str	r7, [sp, #16]
 801c53c:	e7d0      	b.n	801c4e0 <_SetPos+0x74>
 801c53e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c540:	2b01      	cmp	r3, #1
 801c542:	d1a9      	bne.n	801c498 <_SetPos+0x2c>
 801c544:	2300      	movs	r3, #0
 801c546:	68ac      	ldr	r4, [r5, #8]
 801c548:	9301      	str	r3, [sp, #4]
 801c54a:	2c00      	cmp	r4, #0
 801c54c:	d031      	beq.n	801c5b2 <_SetPos+0x146>
 801c54e:	2300      	movs	r3, #0
 801c550:	aa08      	add	r2, sp, #32
 801c552:	69a8      	ldr	r0, [r5, #24]
 801c554:	2109      	movs	r1, #9
 801c556:	6323      	str	r3, [r4, #48]	; 0x30
 801c558:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801c55c:	f7e8 f97c 	bl	8004858 <LCD_X_DisplayDriver>
 801c560:	e79a      	b.n	801c498 <_SetPos+0x2c>
 801c562:	ebc6 010a 	rsb	r1, r6, sl
 801c566:	9105      	str	r1, [sp, #20]
 801c568:	e7c4      	b.n	801c4f4 <_SetPos+0x88>
 801c56a:	9b07      	ldr	r3, [sp, #28]
 801c56c:	eb07 010b 	add.w	r1, r7, fp
 801c570:	fb02 3717 	mls	r7, r2, r7, r3
 801c574:	2300      	movs	r3, #0
 801c576:	9104      	str	r1, [sp, #16]
 801c578:	9707      	str	r7, [sp, #28]
 801c57a:	9302      	str	r3, [sp, #8]
 801c57c:	e7b0      	b.n	801c4e0 <_SetPos+0x74>
 801c57e:	fb02 f206 	mul.w	r2, r2, r6
 801c582:	9b07      	ldr	r3, [sp, #28]
 801c584:	eb06 0108 	add.w	r1, r6, r8
 801c588:	2000      	movs	r0, #0
 801c58a:	fb0b 3312 	mls	r3, fp, r2, r3
 801c58e:	9105      	str	r1, [sp, #20]
 801c590:	4606      	mov	r6, r0
 801c592:	9307      	str	r3, [sp, #28]
 801c594:	9003      	str	r0, [sp, #12]
 801c596:	e7ad      	b.n	801c4f4 <_SetPos+0x88>
 801c598:	68ac      	ldr	r4, [r5, #8]
 801c59a:	9301      	str	r3, [sp, #4]
 801c59c:	b1b4      	cbz	r4, 801c5cc <_SetPos+0x160>
 801c59e:	2301      	movs	r3, #1
 801c5a0:	aa08      	add	r2, sp, #32
 801c5a2:	69a8      	ldr	r0, [r5, #24]
 801c5a4:	2109      	movs	r1, #9
 801c5a6:	6323      	str	r3, [r4, #48]	; 0x30
 801c5a8:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801c5ac:	f7e8 f954 	bl	8004858 <LCD_X_DisplayDriver>
 801c5b0:	e7ad      	b.n	801c50e <_SetPos+0xa2>
 801c5b2:	2050      	movs	r0, #80	; 0x50
 801c5b4:	f7f6 f862 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c5b8:	4621      	mov	r1, r4
 801c5ba:	60a8      	str	r0, [r5, #8]
 801c5bc:	2250      	movs	r2, #80	; 0x50
 801c5be:	f7fc fdb7 	bl	8019130 <GUI__memset>
 801c5c2:	68ac      	ldr	r4, [r5, #8]
 801c5c4:	2c00      	cmp	r4, #0
 801c5c6:	f43f af67 	beq.w	801c498 <_SetPos+0x2c>
 801c5ca:	e7c0      	b.n	801c54e <_SetPos+0xe2>
 801c5cc:	2050      	movs	r0, #80	; 0x50
 801c5ce:	f7f6 f855 	bl	801267c <GUI_ALLOC_GetFixedBlock>
 801c5d2:	4621      	mov	r1, r4
 801c5d4:	60a8      	str	r0, [r5, #8]
 801c5d6:	2250      	movs	r2, #80	; 0x50
 801c5d8:	f7fc fdaa 	bl	8019130 <GUI__memset>
 801c5dc:	68ac      	ldr	r4, [r5, #8]
 801c5de:	2c00      	cmp	r4, #0
 801c5e0:	d095      	beq.n	801c50e <_SetPos+0xa2>
 801c5e2:	e7dc      	b.n	801c59e <_SetPos+0x132>

0801c5e4 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 801c5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5e8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801c6e4 <GUI_MEMDEV_CopyToLCDAt.part.0+0x100>
 801c5ec:	b084      	sub	sp, #16
 801c5ee:	460c      	mov	r4, r1
 801c5f0:	4615      	mov	r5, r2
 801c5f2:	4606      	mov	r6, r0
 801c5f4:	f7fb fba0 	bl	8017d38 <GUI_Lock>
 801c5f8:	2000      	movs	r0, #0
 801c5fa:	f7f7 f973 	bl	80138e4 <GUI_SetDrawMode>
 801c5fe:	f8d8 3000 	ldr.w	r3, [r8]
 801c602:	4681      	mov	r9, r0
 801c604:	4630      	mov	r0, r6
 801c606:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 801c608:	f7f6 f96c 	bl	80128e4 <GUI_ALLOC_LockH>
 801c60c:	6803      	ldr	r3, [r0, #0]
 801c60e:	9000      	str	r0, [sp, #0]
 801c610:	6998      	ldr	r0, [r3, #24]
 801c612:	f7fa f985 	bl	8016920 <GUI_SelectLayer>
 801c616:	4b32      	ldr	r3, [pc, #200]	; (801c6e0 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>)
 801c618:	4682      	mov	sl, r0
 801c61a:	429c      	cmp	r4, r3
 801c61c:	9b00      	ldr	r3, [sp, #0]
 801c61e:	d053      	beq.n	801c6c8 <GUI_MEMDEV_CopyToLCDAt.part.0+0xe4>
 801c620:	891a      	ldrh	r2, [r3, #8]
 801c622:	895b      	ldrh	r3, [r3, #10]
 801c624:	3a01      	subs	r2, #1
 801c626:	f8ad 4008 	strh.w	r4, [sp, #8]
 801c62a:	3b01      	subs	r3, #1
 801c62c:	f8ad 500a 	strh.w	r5, [sp, #10]
 801c630:	4422      	add	r2, r4
 801c632:	442b      	add	r3, r5
 801c634:	f8ad 200c 	strh.w	r2, [sp, #12]
 801c638:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c63c:	f004 f8c8 	bl	80207d0 <WM_Activate>
 801c640:	4668      	mov	r0, sp
 801c642:	f7f6 f963 	bl	801290c <GUI_ALLOC_UnlockH>
 801c646:	a802      	add	r0, sp, #8
 801c648:	f003 fe4e 	bl	80202e8 <WM__InitIVRSearch>
 801c64c:	bb48      	cbnz	r0, 801c6a2 <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 801c64e:	4650      	mov	r0, sl
 801c650:	f7fa f966 	bl	8016920 <GUI_SelectLayer>
 801c654:	f7fb fb70 	bl	8017d38 <GUI_Lock>
 801c658:	2f00      	cmp	r7, #0
 801c65a:	d03d      	beq.n	801c6d8 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf4>
 801c65c:	f8d8 3000 	ldr.w	r3, [r8]
 801c660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c662:	bbb3      	cbnz	r3, 801c6d2 <GUI_MEMDEV_CopyToLCDAt.part.0+0xee>
 801c664:	f004 f8bc 	bl	80207e0 <WM_Deactivate>
 801c668:	4638      	mov	r0, r7
 801c66a:	f7f6 f93b 	bl	80128e4 <GUI_ALLOC_LockH>
 801c66e:	ac04      	add	r4, sp, #16
 801c670:	f8d8 3000 	ldr.w	r3, [r8]
 801c674:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801c678:	661f      	str	r7, [r3, #96]	; 0x60
 801c67a:	6800      	ldr	r0, [r0, #0]
 801c67c:	f7f7 fbfa 	bl	8013e74 <GUI_DEVICE_Link>
 801c680:	4620      	mov	r0, r4
 801c682:	f7f6 f943 	bl	801290c <GUI_ALLOC_UnlockH>
 801c686:	f7fe fea7 	bl	801b3d8 <LCD_UpdateColorIndices>
 801c68a:	f7fd fbb7 	bl	8019dfc <LCD_SetClipRectMax>
 801c68e:	f7fb fb49 	bl	8017d24 <GUI_Unlock>
 801c692:	4648      	mov	r0, r9
 801c694:	f7f7 f926 	bl	80138e4 <GUI_SetDrawMode>
 801c698:	f7fb fb44 	bl	8017d24 <GUI_Unlock>
 801c69c:	b004      	add	sp, #16
 801c69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6a2:	462a      	mov	r2, r5
 801c6a4:	4621      	mov	r1, r4
 801c6a6:	4630      	mov	r0, r6
 801c6a8:	f001 fbd0 	bl	801de4c <GUI_MEMDEV__WriteToActiveOpaque>
 801c6ac:	f003 fcf2 	bl	8020094 <WM__GetNextIVR>
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	d0cc      	beq.n	801c64e <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 801c6b4:	462a      	mov	r2, r5
 801c6b6:	4621      	mov	r1, r4
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f001 fbc7 	bl	801de4c <GUI_MEMDEV__WriteToActiveOpaque>
 801c6be:	f003 fce9 	bl	8020094 <WM__GetNextIVR>
 801c6c2:	2800      	cmp	r0, #0
 801c6c4:	d1ed      	bne.n	801c6a2 <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 801c6c6:	e7c2      	b.n	801c64e <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 801c6c8:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801c6cc:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801c6d0:	e7a6      	b.n	801c620 <GUI_MEMDEV_CopyToLCDAt.part.0+0x3c>
 801c6d2:	f7f7 f897 	bl	8013804 <GUI_SelectLCD>
 801c6d6:	e7c5      	b.n	801c664 <GUI_MEMDEV_CopyToLCDAt.part.0+0x80>
 801c6d8:	f7f7 f894 	bl	8013804 <GUI_SelectLCD>
 801c6dc:	e7d7      	b.n	801c68e <GUI_MEMDEV_CopyToLCDAt.part.0+0xaa>
 801c6de:	bf00      	nop
 801c6e0:	fffff001 	.word	0xfffff001
 801c6e4:	20000018 	.word	0x20000018

0801c6e8 <GUI_MEMDEV__WriteToActiveAt>:
 801c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6ec:	b082      	sub	sp, #8
 801c6ee:	460f      	mov	r7, r1
 801c6f0:	4690      	mov	r8, r2
 801c6f2:	4606      	mov	r6, r0
 801c6f4:	f7f6 f8f6 	bl	80128e4 <GUI_ALLOC_LockH>
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	ac02      	add	r4, sp, #8
 801c6fc:	2116      	movs	r1, #22
 801c6fe:	681d      	ldr	r5, [r3, #0]
 801c700:	2000      	movs	r0, #0
 801c702:	f844 3d04 	str.w	r3, [r4, #-4]!
 801c706:	68eb      	ldr	r3, [r5, #12]
 801c708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c70a:	4798      	blx	r3
 801c70c:	4605      	mov	r5, r0
 801c70e:	4620      	mov	r0, r4
 801c710:	f7f6 f8fc 	bl	801290c <GUI_ALLOC_UnlockH>
 801c714:	b11d      	cbz	r5, 801c71e <GUI_MEMDEV__WriteToActiveAt+0x36>
 801c716:	4642      	mov	r2, r8
 801c718:	4639      	mov	r1, r7
 801c71a:	4630      	mov	r0, r6
 801c71c:	47a8      	blx	r5
 801c71e:	b002      	add	sp, #8
 801c720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c724 <GUI_MEMDEV__CreateFixed>:
 801c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c728:	f8df 812c 	ldr.w	r8, [pc, #300]	; 801c858 <GUI_MEMDEV__CreateFixed+0x134>
 801c72c:	b087      	sub	sp, #28
 801c72e:	4682      	mov	sl, r0
 801c730:	468b      	mov	fp, r1
 801c732:	f8d8 0000 	ldr.w	r0, [r8]
 801c736:	4617      	mov	r7, r2
 801c738:	461e      	mov	r6, r3
 801c73a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c73c:	7c43      	ldrb	r3, [r0, #17]
 801c73e:	2200      	movs	r2, #0
 801c740:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c742:	f7f7 fb47 	bl	8013dd4 <GUI_DEVICE_Create>
 801c746:	2800      	cmp	r0, #0
 801c748:	d04d      	beq.n	801c7e6 <GUI_MEMDEV__CreateFixed+0xc2>
 801c74a:	6903      	ldr	r3, [r0, #16]
 801c74c:	4605      	mov	r5, r0
 801c74e:	689b      	ldr	r3, [r3, #8]
 801c750:	4798      	blx	r3
 801c752:	f7fd ffdb 	bl	801a70c <LCD__GetBPPDevice>
 801c756:	fb00 f407 	mul.w	r4, r0, r7
 801c75a:	4681      	mov	r9, r0
 801c75c:	f7f6 f98a 	bl	8012a74 <GUI_ALLOC_RequestSize>
 801c760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c762:	3407      	adds	r4, #7
 801c764:	f013 0301 	ands.w	r3, r3, #1
 801c768:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 801c76c:	d03f      	beq.n	801c7ee <GUI_MEMDEV__CreateFixed+0xca>
 801c76e:	2e00      	cmp	r6, #0
 801c770:	dd2c      	ble.n	801c7cc <GUI_MEMDEV__CreateFixed+0xa8>
 801c772:	2b00      	cmp	r3, #0
 801c774:	d042      	beq.n	801c7fc <GUI_MEMDEV__CreateFixed+0xd8>
 801c776:	fb04 f006 	mul.w	r0, r4, r6
 801c77a:	3018      	adds	r0, #24
 801c77c:	f7f6 f89a 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 801c780:	4602      	mov	r2, r0
 801c782:	b368      	cbz	r0, 801c7e0 <GUI_MEMDEV__CreateFixed+0xbc>
 801c784:	2300      	movs	r3, #0
 801c786:	9302      	str	r3, [sp, #8]
 801c788:	4610      	mov	r0, r2
 801c78a:	9203      	str	r2, [sp, #12]
 801c78c:	f7f6 f8aa 	bl	80128e4 <GUI_ALLOC_LockH>
 801c790:	9a02      	ldr	r2, [sp, #8]
 801c792:	4603      	mov	r3, r0
 801c794:	a806      	add	r0, sp, #24
 801c796:	f8a3 a004 	strh.w	sl, [r3, #4]
 801c79a:	f8a3 b006 	strh.w	fp, [r3, #6]
 801c79e:	811f      	strh	r7, [r3, #8]
 801c7a0:	815e      	strh	r6, [r3, #10]
 801c7a2:	60dc      	str	r4, [r3, #12]
 801c7a4:	f8c3 9010 	str.w	r9, [r3, #16]
 801c7a8:	615a      	str	r2, [r3, #20]
 801c7aa:	f840 3d04 	str.w	r3, [r0, #-4]!
 801c7ae:	601d      	str	r5, [r3, #0]
 801c7b0:	f7f6 f8ac 	bl	801290c <GUI_ALLOC_UnlockH>
 801c7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7b6:	f8d8 3000 	ldr.w	r3, [r8]
 801c7ba:	612a      	str	r2, [r5, #16]
 801c7bc:	9a03      	ldr	r2, [sp, #12]
 801c7be:	4610      	mov	r0, r2
 801c7c0:	60aa      	str	r2, [r5, #8]
 801c7c2:	7c5b      	ldrb	r3, [r3, #17]
 801c7c4:	61ab      	str	r3, [r5, #24]
 801c7c6:	b007      	add	sp, #28
 801c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7cc:	2c00      	cmp	r4, #0
 801c7ce:	d134      	bne.n	801c83a <GUI_MEMDEV__CreateFixed+0x116>
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	4276      	negs	r6, r6
 801c7d4:	4286      	cmp	r6, r0
 801c7d6:	bfa8      	it	ge
 801c7d8:	4606      	movge	r6, r0
 801c7da:	b393      	cbz	r3, 801c842 <GUI_MEMDEV__CreateFixed+0x11e>
 801c7dc:	2e00      	cmp	r6, #0
 801c7de:	dcca      	bgt.n	801c776 <GUI_MEMDEV__CreateFixed+0x52>
 801c7e0:	4628      	mov	r0, r5
 801c7e2:	f7f7 faf5 	bl	8013dd0 <GUI_DEVICE_Delete>
 801c7e6:	2000      	movs	r0, #0
 801c7e8:	b007      	add	sp, #28
 801c7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7ee:	2800      	cmp	r0, #0
 801c7f0:	bfb8      	it	lt
 801c7f2:	3003      	addlt	r0, #3
 801c7f4:	1080      	asrs	r0, r0, #2
 801c7f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c7fa:	e7b8      	b.n	801c76e <GUI_MEMDEV__CreateFixed+0x4a>
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	463a      	mov	r2, r7
 801c800:	4633      	mov	r3, r6
 801c802:	4659      	mov	r1, fp
 801c804:	4650      	mov	r0, sl
 801c806:	f001 faf1 	bl	801ddec <GUI_USAGE_BM_Create>
 801c80a:	9002      	str	r0, [sp, #8]
 801c80c:	fb04 f006 	mul.w	r0, r4, r6
 801c810:	3018      	adds	r0, #24
 801c812:	f7f6 fa1f 	bl	8012c54 <GUI_ALLOC_AllocZero>
 801c816:	4602      	mov	r2, r0
 801c818:	2800      	cmp	r0, #0
 801c81a:	d1b5      	bne.n	801c788 <GUI_MEMDEV__CreateFixed+0x64>
 801c81c:	4628      	mov	r0, r5
 801c81e:	9203      	str	r2, [sp, #12]
 801c820:	f7f7 fad6 	bl	8013dd0 <GUI_DEVICE_Delete>
 801c824:	9b02      	ldr	r3, [sp, #8]
 801c826:	2b00      	cmp	r3, #0
 801c828:	d0dd      	beq.n	801c7e6 <GUI_MEMDEV__CreateFixed+0xc2>
 801c82a:	4618      	mov	r0, r3
 801c82c:	f7f6 f9f2 	bl	8012c14 <GUI_ALLOC_Free>
 801c830:	9a03      	ldr	r2, [sp, #12]
 801c832:	4610      	mov	r0, r2
 801c834:	b007      	add	sp, #28
 801c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c83a:	3818      	subs	r0, #24
 801c83c:	fbb0 f0f4 	udiv	r0, r0, r4
 801c840:	e7c7      	b.n	801c7d2 <GUI_MEMDEV__CreateFixed+0xae>
 801c842:	9300      	str	r3, [sp, #0]
 801c844:	463a      	mov	r2, r7
 801c846:	4633      	mov	r3, r6
 801c848:	4659      	mov	r1, fp
 801c84a:	4650      	mov	r0, sl
 801c84c:	f001 face 	bl	801ddec <GUI_USAGE_BM_Create>
 801c850:	2e00      	cmp	r6, #0
 801c852:	9002      	str	r0, [sp, #8]
 801c854:	dcda      	bgt.n	801c80c <GUI_MEMDEV__CreateFixed+0xe8>
 801c856:	e7c3      	b.n	801c7e0 <GUI_MEMDEV__CreateFixed+0xbc>
 801c858:	20000018 	.word	0x20000018

0801c85c <GUI_MEMDEV_GetBitsPerPixel>:
 801c85c:	b530      	push	{r4, r5, lr}
 801c85e:	4604      	mov	r4, r0
 801c860:	b083      	sub	sp, #12
 801c862:	b198      	cbz	r0, 801c88c <GUI_MEMDEV_GetBitsPerPixel+0x30>
 801c864:	f7fb fa68 	bl	8017d38 <GUI_Lock>
 801c868:	4620      	mov	r0, r4
 801c86a:	f7f6 f83b 	bl	80128e4 <GUI_ALLOC_LockH>
 801c86e:	6803      	ldr	r3, [r0, #0]
 801c870:	ad02      	add	r5, sp, #8
 801c872:	691b      	ldr	r3, [r3, #16]
 801c874:	f845 0d04 	str.w	r0, [r5, #-4]!
 801c878:	689b      	ldr	r3, [r3, #8]
 801c87a:	4798      	blx	r3
 801c87c:	f7fd ff46 	bl	801a70c <LCD__GetBPPDevice>
 801c880:	4604      	mov	r4, r0
 801c882:	4628      	mov	r0, r5
 801c884:	f7f6 f842 	bl	801290c <GUI_ALLOC_UnlockH>
 801c888:	f7fb fa4c 	bl	8017d24 <GUI_Unlock>
 801c88c:	4620      	mov	r0, r4
 801c88e:	b003      	add	sp, #12
 801c890:	bd30      	pop	{r4, r5, pc}
 801c892:	bf00      	nop

0801c894 <GUI_MEMDEV_Delete>:
 801c894:	b900      	cbnz	r0, 801c898 <GUI_MEMDEV_Delete+0x4>
 801c896:	4770      	bx	lr
 801c898:	b510      	push	{r4, lr}
 801c89a:	b082      	sub	sp, #8
 801c89c:	4604      	mov	r4, r0
 801c89e:	f7fb fa4b 	bl	8017d38 <GUI_Lock>
 801c8a2:	4b10      	ldr	r3, [pc, #64]	; (801c8e4 <GUI_MEMDEV_Delete+0x50>)
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8a8:	429c      	cmp	r4, r3
 801c8aa:	d017      	beq.n	801c8dc <GUI_MEMDEV_Delete+0x48>
 801c8ac:	4620      	mov	r0, r4
 801c8ae:	f7f6 f819 	bl	80128e4 <GUI_ALLOC_LockH>
 801c8b2:	6943      	ldr	r3, [r0, #20]
 801c8b4:	9001      	str	r0, [sp, #4]
 801c8b6:	b963      	cbnz	r3, 801c8d2 <GUI_MEMDEV_Delete+0x3e>
 801c8b8:	6800      	ldr	r0, [r0, #0]
 801c8ba:	f7f7 fa89 	bl	8013dd0 <GUI_DEVICE_Delete>
 801c8be:	a801      	add	r0, sp, #4
 801c8c0:	f7f6 f824 	bl	801290c <GUI_ALLOC_UnlockH>
 801c8c4:	4620      	mov	r0, r4
 801c8c6:	f7f6 f9a5 	bl	8012c14 <GUI_ALLOC_Free>
 801c8ca:	f7fb fa2b 	bl	8017d24 <GUI_Unlock>
 801c8ce:	b002      	add	sp, #8
 801c8d0:	bd10      	pop	{r4, pc}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f001 f9a2 	bl	801dc1c <GUI_USAGE_DecUseCnt>
 801c8d8:	9801      	ldr	r0, [sp, #4]
 801c8da:	e7ed      	b.n	801c8b8 <GUI_MEMDEV_Delete+0x24>
 801c8dc:	f7f6 ff92 	bl	8013804 <GUI_SelectLCD>
 801c8e0:	e7e4      	b.n	801c8ac <GUI_MEMDEV_Delete+0x18>
 801c8e2:	bf00      	nop
 801c8e4:	20000018 	.word	0x20000018

0801c8e8 <GUI_MEMDEV_CreateEx>:
 801c8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8ec:	b085      	sub	sp, #20
 801c8ee:	4606      	mov	r6, r0
 801c8f0:	4690      	mov	r8, r2
 801c8f2:	4699      	mov	r9, r3
 801c8f4:	460f      	mov	r7, r1
 801c8f6:	f7fb fa1f 	bl	8017d38 <GUI_Lock>
 801c8fa:	4a1c      	ldr	r2, [pc, #112]	; (801c96c <GUI_MEMDEV_CreateEx+0x84>)
 801c8fc:	4b1c      	ldr	r3, [pc, #112]	; (801c970 <GUI_MEMDEV_CreateEx+0x88>)
 801c8fe:	6812      	ldr	r2, [r2, #0]
 801c900:	7c50      	ldrb	r0, [r2, #17]
 801c902:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801c906:	e001      	b.n	801c90c <GUI_MEMDEV_CreateEx+0x24>
 801c908:	6824      	ldr	r4, [r4, #0]
 801c90a:	b1fc      	cbz	r4, 801c94c <GUI_MEMDEV_CreateEx+0x64>
 801c90c:	68e3      	ldr	r3, [r4, #12]
 801c90e:	681a      	ldr	r2, [r3, #0]
 801c910:	2a04      	cmp	r2, #4
 801c912:	d1f9      	bne.n	801c908 <GUI_MEMDEV_CreateEx+0x20>
 801c914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c916:	2101      	movs	r1, #1
 801c918:	4620      	mov	r0, r4
 801c91a:	4798      	blx	r3
 801c91c:	4605      	mov	r5, r0
 801c91e:	b1d8      	cbz	r0, 801c958 <GUI_MEMDEV_CreateEx+0x70>
 801c920:	6924      	ldr	r4, [r4, #16]
 801c922:	68a3      	ldr	r3, [r4, #8]
 801c924:	4798      	blx	r3
 801c926:	3001      	adds	r0, #1
 801c928:	d018      	beq.n	801c95c <GUI_MEMDEV_CreateEx+0x74>
 801c92a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c92c:	464b      	mov	r3, r9
 801c92e:	9402      	str	r4, [sp, #8]
 801c930:	4642      	mov	r2, r8
 801c932:	9100      	str	r1, [sp, #0]
 801c934:	4630      	mov	r0, r6
 801c936:	9501      	str	r5, [sp, #4]
 801c938:	4639      	mov	r1, r7
 801c93a:	f7ff fef3 	bl	801c724 <GUI_MEMDEV__CreateFixed>
 801c93e:	4604      	mov	r4, r0
 801c940:	f7fb f9f0 	bl	8017d24 <GUI_Unlock>
 801c944:	4620      	mov	r0, r4
 801c946:	b005      	add	sp, #20
 801c948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c94c:	f7f7 fa2a 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 801c950:	4604      	mov	r4, r0
 801c952:	b148      	cbz	r0, 801c968 <GUI_MEMDEV_CreateEx+0x80>
 801c954:	68c3      	ldr	r3, [r0, #12]
 801c956:	e7dd      	b.n	801c914 <GUI_MEMDEV_CreateEx+0x2c>
 801c958:	4604      	mov	r4, r0
 801c95a:	e7f1      	b.n	801c940 <GUI_MEMDEV_CreateEx+0x58>
 801c95c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c95e:	4c05      	ldr	r4, [pc, #20]	; (801c974 <GUI_MEMDEV_CreateEx+0x8c>)
 801c960:	f043 0301 	orr.w	r3, r3, #1
 801c964:	930c      	str	r3, [sp, #48]	; 0x30
 801c966:	e7e0      	b.n	801c92a <GUI_MEMDEV_CreateEx+0x42>
 801c968:	4620      	mov	r0, r4
 801c96a:	e7ec      	b.n	801c946 <GUI_MEMDEV_CreateEx+0x5e>
 801c96c:	20000018 	.word	0x20000018
 801c970:	200467d0 	.word	0x200467d0
 801c974:	0802696c 	.word	0x0802696c

0801c978 <GUI_MEMDEV_Select>:
 801c978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c97a:	4f16      	ldr	r7, [pc, #88]	; (801c9d4 <GUI_MEMDEV_Select+0x5c>)
 801c97c:	b083      	sub	sp, #12
 801c97e:	4604      	mov	r4, r0
 801c980:	f7fb f9da 	bl	8017d38 <GUI_Lock>
 801c984:	683b      	ldr	r3, [r7, #0]
 801c986:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 801c988:	b1e4      	cbz	r4, 801c9c4 <GUI_MEMDEV_Select+0x4c>
 801c98a:	b9c6      	cbnz	r6, 801c9be <GUI_MEMDEV_Select+0x46>
 801c98c:	f003 ff28 	bl	80207e0 <WM_Deactivate>
 801c990:	4620      	mov	r0, r4
 801c992:	f7f5 ffa7 	bl	80128e4 <GUI_ALLOC_LockH>
 801c996:	ad02      	add	r5, sp, #8
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801c99e:	661c      	str	r4, [r3, #96]	; 0x60
 801c9a0:	6800      	ldr	r0, [r0, #0]
 801c9a2:	f7f7 fa67 	bl	8013e74 <GUI_DEVICE_Link>
 801c9a6:	4628      	mov	r0, r5
 801c9a8:	f7f5 ffb0 	bl	801290c <GUI_ALLOC_UnlockH>
 801c9ac:	f7fe fd14 	bl	801b3d8 <LCD_UpdateColorIndices>
 801c9b0:	f7fd fa24 	bl	8019dfc <LCD_SetClipRectMax>
 801c9b4:	f7fb f9b6 	bl	8017d24 <GUI_Unlock>
 801c9b8:	4630      	mov	r0, r6
 801c9ba:	b003      	add	sp, #12
 801c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9be:	f7f6 ff21 	bl	8013804 <GUI_SelectLCD>
 801c9c2:	e7e3      	b.n	801c98c <GUI_MEMDEV_Select+0x14>
 801c9c4:	f7f6 ff1e 	bl	8013804 <GUI_SelectLCD>
 801c9c8:	f7fb f9ac 	bl	8017d24 <GUI_Unlock>
 801c9cc:	4630      	mov	r0, r6
 801c9ce:	b003      	add	sp, #12
 801c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9d2:	bf00      	nop
 801c9d4:	20000018 	.word	0x20000018

0801c9d8 <GUI_MEMDEV_CopyToLCD>:
 801c9d8:	b900      	cbnz	r0, 801c9dc <GUI_MEMDEV_CopyToLCD+0x4>
 801c9da:	4770      	bx	lr
 801c9dc:	4a01      	ldr	r2, [pc, #4]	; (801c9e4 <GUI_MEMDEV_CopyToLCD+0xc>)
 801c9de:	4611      	mov	r1, r2
 801c9e0:	f7ff be00 	b.w	801c5e4 <GUI_MEMDEV_CopyToLCDAt.part.0>
 801c9e4:	fffff001 	.word	0xfffff001

0801c9e8 <_GetDevData>:
 801c9e8:	2901      	cmp	r1, #1
 801c9ea:	4802      	ldr	r0, [pc, #8]	; (801c9f4 <_GetDevData+0xc>)
 801c9ec:	bf18      	it	ne
 801c9ee:	2000      	movne	r0, #0
 801c9f0:	4770      	bx	lr
 801c9f2:	bf00      	nop
 801c9f4:	08033e10 	.word	0x08033e10

0801c9f8 <_GetDevFunc>:
 801c9f8:	2916      	cmp	r1, #22
 801c9fa:	4802      	ldr	r0, [pc, #8]	; (801ca04 <_GetDevFunc+0xc>)
 801c9fc:	bf18      	it	ne
 801c9fe:	2000      	movne	r0, #0
 801ca00:	4770      	bx	lr
 801ca02:	bf00      	nop
 801ca04:	0801de4d 	.word	0x0801de4d

0801ca08 <_SetOrg>:
 801ca08:	6800      	ldr	r0, [r0, #0]
 801ca0a:	b110      	cbz	r0, 801ca12 <_SetOrg+0xa>
 801ca0c:	68c3      	ldr	r3, [r0, #12]
 801ca0e:	6a1b      	ldr	r3, [r3, #32]
 801ca10:	4718      	bx	r3
 801ca12:	4770      	bx	lr

0801ca14 <_GetRect>:
 801ca14:	b570      	push	{r4, r5, r6, lr}
 801ca16:	b082      	sub	sp, #8
 801ca18:	6880      	ldr	r0, [r0, #8]
 801ca1a:	460d      	mov	r5, r1
 801ca1c:	f7f5 ff62 	bl	80128e4 <GUI_ALLOC_LockH>
 801ca20:	4602      	mov	r2, r0
 801ca22:	a802      	add	r0, sp, #8
 801ca24:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 801ca28:	8914      	ldrh	r4, [r2, #8]
 801ca2a:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 801ca2e:	8953      	ldrh	r3, [r2, #10]
 801ca30:	4434      	add	r4, r6
 801ca32:	802e      	strh	r6, [r5, #0]
 801ca34:	440b      	add	r3, r1
 801ca36:	3c01      	subs	r4, #1
 801ca38:	8069      	strh	r1, [r5, #2]
 801ca3a:	3b01      	subs	r3, #1
 801ca3c:	80ac      	strh	r4, [r5, #4]
 801ca3e:	f840 2d04 	str.w	r2, [r0, #-4]!
 801ca42:	80eb      	strh	r3, [r5, #6]
 801ca44:	f7f5 ff62 	bl	801290c <GUI_ALLOC_UnlockH>
 801ca48:	b002      	add	sp, #8
 801ca4a:	bd70      	pop	{r4, r5, r6, pc}

0801ca4c <_DrawBitmap>:
 801ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca50:	b095      	sub	sp, #84	; 0x54
 801ca52:	460c      	mov	r4, r1
 801ca54:	920b      	str	r2, [sp, #44]	; 0x2c
 801ca56:	4aaa      	ldr	r2, [pc, #680]	; (801cd00 <_DrawBitmap+0x2b4>)
 801ca58:	900d      	str	r0, [sp, #52]	; 0x34
 801ca5a:	6812      	ldr	r2, [r2, #0]
 801ca5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ca5e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801ca60:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801ca62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801ca66:	f7f5 ff3d 	bl	80128e4 <GUI_ALLOC_LockH>
 801ca6a:	6942      	ldr	r2, [r0, #20]
 801ca6c:	9011      	str	r0, [sp, #68]	; 0x44
 801ca6e:	2a00      	cmp	r2, #0
 801ca70:	f040 80b3 	bne.w	801cbda <_DrawBitmap+0x18e>
 801ca74:	4603      	mov	r3, r0
 801ca76:	4610      	mov	r0, r2
 801ca78:	68db      	ldr	r3, [r3, #12]
 801ca7a:	9012      	str	r0, [sp, #72]	; 0x48
 801ca7c:	a811      	add	r0, sp, #68	; 0x44
 801ca7e:	9307      	str	r3, [sp, #28]
 801ca80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ca82:	18e3      	adds	r3, r4, r3
 801ca84:	9308      	str	r3, [sp, #32]
 801ca86:	f7f5 ff41 	bl	801290c <GUI_ALLOC_UnlockH>
 801ca8a:	4b9d      	ldr	r3, [pc, #628]	; (801cd00 <_DrawBitmap+0x2b4>)
 801ca8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	b120      	cbz	r0, 801ca9c <_DrawBitmap+0x50>
 801ca92:	7c1a      	ldrb	r2, [r3, #16]
 801ca94:	4c9a      	ldr	r4, [pc, #616]	; (801cd00 <_DrawBitmap+0x2b4>)
 801ca96:	0791      	lsls	r1, r2, #30
 801ca98:	f000 80d4 	beq.w	801cc44 <_DrawBitmap+0x1f8>
 801ca9c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801ca9e:	f7f5 ff21 	bl	80128e4 <GUI_ALLOC_LockH>
 801caa2:	4604      	mov	r4, r0
 801caa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801caa6:	a814      	add	r0, sp, #80	; 0x50
 801caa8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801caac:	68e3      	ldr	r3, [r4, #12]
 801caae:	1a8a      	subs	r2, r1, r2
 801cab0:	f9b4 b004 	ldrsh.w	fp, [r4, #4]
 801cab4:	f840 4d04 	str.w	r4, [r0, #-4]!
 801cab8:	fb03 f302 	mul.w	r3, r3, r2
 801cabc:	9a08      	ldr	r2, [sp, #32]
 801cabe:	3318      	adds	r3, #24
 801cac0:	ebcb 0b02 	rsb	fp, fp, r2
 801cac4:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 801cac8:	18e3      	adds	r3, r4, r3
 801caca:	9302      	str	r3, [sp, #8]
 801cacc:	f7f5 ff1e 	bl	801290c <GUI_ALLOC_UnlockH>
 801cad0:	2d10      	cmp	r5, #16
 801cad2:	f000 8087 	beq.w	801cbe4 <_DrawBitmap+0x198>
 801cad6:	2d17      	cmp	r5, #23
 801cad8:	dd45      	ble.n	801cb66 <_DrawBitmap+0x11a>
 801cada:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cadc:	2b00      	cmp	r3, #0
 801cade:	f340 84b9 	ble.w	801d454 <_DrawBitmap+0xa08>
 801cae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cae4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801cae8:	f1a3 0a04 	sub.w	sl, r3, #4
 801caec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801caee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801caf0:	eb03 0b09 	add.w	fp, r3, r9
 801caf4:	f8cd b00c 	str.w	fp, [sp, #12]
 801caf8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801cafc:	f11a 0f04 	cmn.w	sl, #4
 801cb00:	d01f      	beq.n	801cb42 <_DrawBitmap+0xf6>
 801cb02:	9f02      	ldr	r7, [sp, #8]
 801cb04:	b1ef      	cbz	r7, 801cb42 <_DrawBitmap+0xf6>
 801cb06:	2e00      	cmp	r6, #0
 801cb08:	d059      	beq.n	801cbbe <_DrawBitmap+0x172>
 801cb0a:	68b0      	ldr	r0, [r6, #8]
 801cb0c:	464a      	mov	r2, r9
 801cb0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801cb10:	46d0      	mov	r8, sl
 801cb12:	6844      	ldr	r4, [r0, #4]
 801cb14:	4630      	mov	r0, r6
 801cb16:	462b      	mov	r3, r5
 801cb18:	9908      	ldr	r1, [sp, #32]
 801cb1a:	47a0      	blx	r4
 801cb1c:	9c08      	ldr	r4, [sp, #32]
 801cb1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801cb22:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	4798      	blx	r3
 801cb2a:	68b3      	ldr	r3, [r6, #8]
 801cb2c:	4621      	mov	r1, r4
 801cb2e:	f827 0b02 	strh.w	r0, [r7], #2
 801cb32:	464a      	mov	r2, r9
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	4630      	mov	r0, r6
 801cb38:	3401      	adds	r4, #1
 801cb3a:	4798      	blx	r3
 801cb3c:	3d01      	subs	r5, #1
 801cb3e:	d1ee      	bne.n	801cb1e <_DrawBitmap+0xd2>
 801cb40:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cb42:	9b02      	ldr	r3, [sp, #8]
 801cb44:	f109 0901 	add.w	r9, r9, #1
 801cb48:	9a07      	ldr	r2, [sp, #28]
 801cb4a:	4413      	add	r3, r2
 801cb4c:	9302      	str	r3, [sp, #8]
 801cb4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cb50:	449a      	add	sl, r3
 801cb52:	9b03      	ldr	r3, [sp, #12]
 801cb54:	4599      	cmp	r9, r3
 801cb56:	d1d1      	bne.n	801cafc <_DrawBitmap+0xb0>
 801cb58:	b116      	cbz	r6, 801cb60 <_DrawBitmap+0x114>
 801cb5a:	a812      	add	r0, sp, #72	; 0x48
 801cb5c:	f7f5 fed6 	bl	801290c <GUI_ALLOC_UnlockH>
 801cb60:	b015      	add	sp, #84	; 0x54
 801cb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb66:	2d08      	cmp	r5, #8
 801cb68:	d075      	beq.n	801cc56 <_DrawBitmap+0x20a>
 801cb6a:	4b66      	ldr	r3, [pc, #408]	; (801cd04 <_DrawBitmap+0x2b8>)
 801cb6c:	f1b9 0f00 	cmp.w	r9, #0
 801cb70:	bf08      	it	eq
 801cb72:	4699      	moveq	r9, r3
 801cb74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	f340 812f 	ble.w	801cdda <_DrawBitmap+0x38e>
 801cb7c:	461c      	mov	r4, r3
 801cb7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cb80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cb82:	0052      	lsls	r2, r2, #1
 801cb84:	9807      	ldr	r0, [sp, #28]
 801cb86:	009b      	lsls	r3, r3, #2
 801cb88:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801cb8a:	9206      	str	r2, [sp, #24]
 801cb8c:	9303      	str	r3, [sp, #12]
 801cb8e:	2300      	movs	r3, #0
 801cb90:	9a02      	ldr	r2, [sp, #8]
 801cb92:	9921      	ldr	r1, [sp, #132]	; 0x84
 801cb94:	2d02      	cmp	r5, #2
 801cb96:	f000 8127 	beq.w	801cde8 <_DrawBitmap+0x39c>
 801cb9a:	2d04      	cmp	r5, #4
 801cb9c:	f000 81fd 	beq.w	801cf9a <_DrawBitmap+0x54e>
 801cba0:	2d01      	cmp	r5, #1
 801cba2:	f000 8337 	beq.w	801d214 <_DrawBitmap+0x7c8>
 801cba6:	3301      	adds	r3, #1
 801cba8:	4431      	add	r1, r6
 801cbaa:	4402      	add	r2, r0
 801cbac:	429c      	cmp	r4, r3
 801cbae:	dcf1      	bgt.n	801cb94 <_DrawBitmap+0x148>
 801cbb0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801cbb4:	46de      	mov	lr, fp
 801cbb6:	f1be 0f00 	cmp.w	lr, #0
 801cbba:	d1ce      	bne.n	801cb5a <_DrawBitmap+0x10e>
 801cbbc:	e7d0      	b.n	801cb60 <_DrawBitmap+0x114>
 801cbbe:	463d      	mov	r5, r7
 801cbc0:	4656      	mov	r6, sl
 801cbc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cbc4:	f8db 3010 	ldr.w	r3, [fp, #16]
 801cbc8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	4798      	blx	r3
 801cbd0:	3c01      	subs	r4, #1
 801cbd2:	f825 0b02 	strh.w	r0, [r5], #2
 801cbd6:	d1f5      	bne.n	801cbc4 <_DrawBitmap+0x178>
 801cbd8:	e7b2      	b.n	801cb40 <_DrawBitmap+0xf4>
 801cbda:	4610      	mov	r0, r2
 801cbdc:	f7f5 fe82 	bl	80128e4 <GUI_ALLOC_LockH>
 801cbe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cbe2:	e749      	b.n	801ca78 <_DrawBitmap+0x2c>
 801cbe4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cbe6:	2d00      	cmp	r5, #0
 801cbe8:	f000 8426 	beq.w	801d438 <_DrawBitmap+0x9ec>
 801cbec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	ddb3      	ble.n	801cb5a <_DrawBitmap+0x10e>
 801cbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbf4:	2400      	movs	r4, #0
 801cbf6:	4f44      	ldr	r7, [pc, #272]	; (801cd08 <_DrawBitmap+0x2bc>)
 801cbf8:	005e      	lsls	r6, r3, #1
 801cbfa:	46a0      	mov	r8, r4
 801cbfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801cc00:	9603      	str	r6, [sp, #12]
 801cc02:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801cc06:	9e02      	ldr	r6, [sp, #8]
 801cc08:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801cc0c:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801cc0e:	b184      	cbz	r4, 801cc32 <_DrawBitmap+0x1e6>
 801cc10:	4621      	mov	r1, r4
 801cc12:	9a03      	ldr	r2, [sp, #12]
 801cc14:	4630      	mov	r0, r6
 801cc16:	b166      	cbz	r6, 801cc32 <_DrawBitmap+0x1e6>
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	4798      	blx	r3
 801cc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc1e:	4628      	mov	r0, r5
 801cc20:	9908      	ldr	r1, [sp, #32]
 801cc22:	eb03 0208 	add.w	r2, r3, r8
 801cc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc28:	b115      	cbz	r5, 801cc30 <_DrawBitmap+0x1e4>
 801cc2a:	68ad      	ldr	r5, [r5, #8]
 801cc2c:	686d      	ldr	r5, [r5, #4]
 801cc2e:	47a8      	blx	r5
 801cc30:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cc32:	f108 0801 	add.w	r8, r8, #1
 801cc36:	4454      	add	r4, sl
 801cc38:	445e      	add	r6, fp
 801cc3a:	45c1      	cmp	r9, r8
 801cc3c:	dce7      	bgt.n	801cc0e <_DrawBitmap+0x1c2>
 801cc3e:	2d00      	cmp	r5, #0
 801cc40:	d18b      	bne.n	801cb5a <_DrawBitmap+0x10e>
 801cc42:	e78d      	b.n	801cb60 <_DrawBitmap+0x114>
 801cc44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cc46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc48:	9300      	str	r3, [sp, #0]
 801cc4a:	9908      	ldr	r1, [sp, #32]
 801cc4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc4e:	f000 ffff 	bl	801dc50 <GUI_USAGE_AddRect>
 801cc52:	6823      	ldr	r3, [r4, #0]
 801cc54:	e722      	b.n	801ca9c <_DrawBitmap+0x50>
 801cc56:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	f340 8404 	ble.w	801d466 <_DrawBitmap+0xa1a>
 801cc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cc60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc62:	3b01      	subs	r3, #1
 801cc64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cc66:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801cc6a:	9303      	str	r3, [sp, #12]
 801cc6c:	9b02      	ldr	r3, [sp, #8]
 801cc6e:	4658      	mov	r0, fp
 801cc70:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801cc74:	46a9      	mov	r9, r5
 801cc76:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 801cc7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cc7c:	442b      	add	r3, r5
 801cc7e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801cc80:	9304      	str	r3, [sp, #16]
 801cc82:	9b03      	ldr	r3, [sp, #12]
 801cc84:	1c59      	adds	r1, r3, #1
 801cc86:	4b1e      	ldr	r3, [pc, #120]	; (801cd00 <_DrawBitmap+0x2b4>)
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	7c1b      	ldrb	r3, [r3, #16]
 801cc8c:	2d00      	cmp	r5, #0
 801cc8e:	d048      	beq.n	801cd22 <_DrawBitmap+0x2d6>
 801cc90:	f013 0303 	ands.w	r3, r3, #3
 801cc94:	d03a      	beq.n	801cd0c <_DrawBitmap+0x2c0>
 801cc96:	2b02      	cmp	r3, #2
 801cc98:	d11e      	bne.n	801ccd8 <_DrawBitmap+0x28c>
 801cc9a:	f1bb 0f00 	cmp.w	fp, #0
 801cc9e:	d063      	beq.n	801cd68 <_DrawBitmap+0x31c>
 801cca0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801cca4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ccaa:	9c08      	ldr	r4, [sp, #32]
 801ccac:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801ccb0:	4621      	mov	r1, r4
 801ccb2:	464a      	mov	r2, r9
 801ccb4:	3401      	adds	r4, #1
 801ccb6:	4658      	mov	r0, fp
 801ccb8:	b13b      	cbz	r3, 801ccca <_DrawBitmap+0x27e>
 801ccba:	f855 e023 	ldr.w	lr, [r5, r3, lsl #2]
 801ccbe:	f8db 3008 	ldr.w	r3, [fp, #8]
 801ccc2:	f8a8 e000 	strh.w	lr, [r8]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	4798      	blx	r3
 801ccca:	3f01      	subs	r7, #1
 801cccc:	f108 0802 	add.w	r8, r8, #2
 801ccd0:	d1ec      	bne.n	801ccac <_DrawBitmap+0x260>
 801ccd2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801ccd6:	4658      	mov	r0, fp
 801ccd8:	9b02      	ldr	r3, [sp, #8]
 801ccda:	f109 0901 	add.w	r9, r9, #1
 801ccde:	9a07      	ldr	r2, [sp, #28]
 801cce0:	4619      	mov	r1, r3
 801cce2:	9b03      	ldr	r3, [sp, #12]
 801cce4:	4416      	add	r6, r2
 801cce6:	4411      	add	r1, r2
 801cce8:	9102      	str	r1, [sp, #8]
 801ccea:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ccec:	440b      	add	r3, r1
 801ccee:	9303      	str	r3, [sp, #12]
 801ccf0:	9b04      	ldr	r3, [sp, #16]
 801ccf2:	454b      	cmp	r3, r9
 801ccf4:	d1c5      	bne.n	801cc82 <_DrawBitmap+0x236>
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	f47f af2f 	bne.w	801cb5a <_DrawBitmap+0x10e>
 801ccfc:	e730      	b.n	801cb60 <_DrawBitmap+0x114>
 801ccfe:	bf00      	nop
 801cd00:	20000018 	.word	0x20000018
 801cd04:	08033e44 	.word	0x08033e44
 801cd08:	2000004c 	.word	0x2000004c
 801cd0c:	9a03      	ldr	r2, [sp, #12]
 801cd0e:	9b02      	ldr	r3, [sp, #8]
 801cd10:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801cd14:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801cd18:	f823 1b02 	strh.w	r1, [r3], #2
 801cd1c:	42b3      	cmp	r3, r6
 801cd1e:	d1f7      	bne.n	801cd10 <_DrawBitmap+0x2c4>
 801cd20:	e7da      	b.n	801ccd8 <_DrawBitmap+0x28c>
 801cd22:	f013 0303 	ands.w	r3, r3, #3
 801cd26:	f000 8365 	beq.w	801d3f4 <_DrawBitmap+0x9a8>
 801cd2a:	2b02      	cmp	r3, #2
 801cd2c:	d1d4      	bne.n	801ccd8 <_DrawBitmap+0x28c>
 801cd2e:	f1bb 0f00 	cmp.w	fp, #0
 801cd32:	f000 8377 	beq.w	801d424 <_DrawBitmap+0x9d8>
 801cd36:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801cd3a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801cd3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cd40:	9c08      	ldr	r4, [sp, #32]
 801cd42:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801cd46:	4621      	mov	r1, r4
 801cd48:	464a      	mov	r2, r9
 801cd4a:	3401      	adds	r4, #1
 801cd4c:	4658      	mov	r0, fp
 801cd4e:	b133      	cbz	r3, 801cd5e <_DrawBitmap+0x312>
 801cd50:	f8db e008 	ldr.w	lr, [fp, #8]
 801cd54:	f8a8 3000 	strh.w	r3, [r8]
 801cd58:	f8de 3000 	ldr.w	r3, [lr]
 801cd5c:	4798      	blx	r3
 801cd5e:	3f01      	subs	r7, #1
 801cd60:	f108 0802 	add.w	r8, r8, #2
 801cd64:	d1ed      	bne.n	801cd42 <_DrawBitmap+0x2f6>
 801cd66:	e7b4      	b.n	801ccd2 <_DrawBitmap+0x286>
 801cd68:	9903      	ldr	r1, [sp, #12]
 801cd6a:	9b02      	ldr	r3, [sp, #8]
 801cd6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cd70:	b112      	cbz	r2, 801cd78 <_DrawBitmap+0x32c>
 801cd72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801cd76:	801a      	strh	r2, [r3, #0]
 801cd78:	3302      	adds	r3, #2
 801cd7a:	429e      	cmp	r6, r3
 801cd7c:	d1f6      	bne.n	801cd6c <_DrawBitmap+0x320>
 801cd7e:	e7aa      	b.n	801ccd6 <_DrawBitmap+0x28a>
 801cd80:	4642      	mov	r2, r8
 801cd82:	9b03      	ldr	r3, [sp, #12]
 801cd84:	f014 0f01 	tst.w	r4, #1
 801cd88:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801cd8c:	d003      	beq.n	801cd96 <_DrawBitmap+0x34a>
 801cd8e:	8819      	ldrh	r1, [r3, #0]
 801cd90:	ea8a 0101 	eor.w	r1, sl, r1
 801cd94:	8019      	strh	r1, [r3, #0]
 801cd96:	3a01      	subs	r2, #1
 801cd98:	f103 0302 	add.w	r3, r3, #2
 801cd9c:	d1f2      	bne.n	801cd84 <_DrawBitmap+0x338>
 801cd9e:	9b03      	ldr	r3, [sp, #12]
 801cda0:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801cda4:	9303      	str	r3, [sp, #12]
 801cda6:	f1b9 0f00 	cmp.w	r9, #0
 801cdaa:	f040 82c4 	bne.w	801d336 <_DrawBitmap+0x8ea>
 801cdae:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 801cdb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdb4:	a811      	add	r0, sp, #68	; 0x44
 801cdb6:	9a07      	ldr	r2, [sp, #28]
 801cdb8:	3301      	adds	r3, #1
 801cdba:	461c      	mov	r4, r3
 801cdbc:	930a      	str	r3, [sp, #40]	; 0x28
 801cdbe:	9b02      	ldr	r3, [sp, #8]
 801cdc0:	4413      	add	r3, r2
 801cdc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cdc4:	9302      	str	r3, [sp, #8]
 801cdc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdc8:	4413      	add	r3, r2
 801cdca:	930c      	str	r3, [sp, #48]	; 0x30
 801cdcc:	f7f5 fd9e 	bl	801290c <GUI_ALLOC_UnlockH>
 801cdd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cdd2:	461a      	mov	r2, r3
 801cdd4:	42a2      	cmp	r2, r4
 801cdd6:	f300 8228 	bgt.w	801d22a <_DrawBitmap+0x7de>
 801cdda:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 801cdde:	f1be 0f00 	cmp.w	lr, #0
 801cde2:	f47f aeba 	bne.w	801cb5a <_DrawBitmap+0x10e>
 801cde6:	e6bb      	b.n	801cb60 <_DrawBitmap+0x114>
 801cde8:	930a      	str	r3, [sp, #40]	; 0x28
 801cdea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cdec:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801cdf0:	f1c3 0304 	rsb	r3, r3, #4
 801cdf4:	9202      	str	r2, [sp, #8]
 801cdf6:	46da      	mov	sl, fp
 801cdf8:	46cb      	mov	fp, r9
 801cdfa:	b2db      	uxtb	r3, r3
 801cdfc:	9121      	str	r1, [sp, #132]	; 0x84
 801cdfe:	930c      	str	r3, [sp, #48]	; 0x30
 801ce00:	46d6      	mov	lr, sl
 801ce02:	4657      	mov	r7, sl
 801ce04:	4ba3      	ldr	r3, [pc, #652]	; (801d094 <_DrawBitmap+0x648>)
 801ce06:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	7814      	ldrb	r4, [r2, #0]
 801ce0c:	7c1b      	ldrb	r3, [r3, #16]
 801ce0e:	9a06      	ldr	r2, [sp, #24]
 801ce10:	f003 0303 	and.w	r3, r3, #3
 801ce14:	4094      	lsls	r4, r2
 801ce16:	2b01      	cmp	r3, #1
 801ce18:	b2e4      	uxtb	r4, r4
 801ce1a:	f000 809e 	beq.w	801cf5a <_DrawBitmap+0x50e>
 801ce1e:	d37c      	bcc.n	801cf1a <_DrawBitmap+0x4ce>
 801ce20:	2b02      	cmp	r3, #2
 801ce22:	d167      	bne.n	801cef4 <_DrawBitmap+0x4a8>
 801ce24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce28:	9303      	str	r3, [sp, #12]
 801ce2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ce2c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801ce30:	9305      	str	r3, [sp, #20]
 801ce32:	9b08      	ldr	r3, [sp, #32]
 801ce34:	9d02      	ldr	r5, [sp, #8]
 801ce36:	9304      	str	r3, [sp, #16]
 801ce38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce3a:	eb03 0a02 	add.w	sl, r3, r2
 801ce3e:	9a03      	ldr	r2, [sp, #12]
 801ce40:	9b03      	ldr	r3, [sp, #12]
 801ce42:	4591      	cmp	r9, r2
 801ce44:	bfc8      	it	gt
 801ce46:	fa5f f982 	uxtbgt.w	r9, r2
 801ce4a:	ebc9 0303 	rsb	r3, r9, r3
 801ce4e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce52:	9303      	str	r3, [sp, #12]
 801ce54:	b34f      	cbz	r7, 801ceaa <_DrawBitmap+0x45e>
 801ce56:	fa5f f989 	uxtb.w	r9, r9
 801ce5a:	9e04      	ldr	r6, [sp, #16]
 801ce5c:	f109 0801 	add.w	r8, r9, #1
 801ce60:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 801ce64:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801ce68:	4631      	mov	r1, r6
 801ce6a:	ea4f 1394 	mov.w	r3, r4, lsr #6
 801ce6e:	f106 0601 	add.w	r6, r6, #1
 801ce72:	4652      	mov	r2, sl
 801ce74:	4638      	mov	r0, r7
 801ce76:	d006      	beq.n	801ce86 <_DrawBitmap+0x43a>
 801ce78:	f85b e023 	ldr.w	lr, [fp, r3, lsl #2]
 801ce7c:	68bb      	ldr	r3, [r7, #8]
 801ce7e:	f8a5 e000 	strh.w	lr, [r5]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	4798      	blx	r3
 801ce86:	3502      	adds	r5, #2
 801ce88:	00a4      	lsls	r4, r4, #2
 801ce8a:	4545      	cmp	r5, r8
 801ce8c:	b2e4      	uxtb	r4, r4
 801ce8e:	d1e9      	bne.n	801ce64 <_DrawBitmap+0x418>
 801ce90:	9b04      	ldr	r3, [sp, #16]
 801ce92:	3301      	adds	r3, #1
 801ce94:	444b      	add	r3, r9
 801ce96:	9304      	str	r3, [sp, #16]
 801ce98:	9b03      	ldr	r3, [sp, #12]
 801ce9a:	b1d3      	cbz	r3, 801ced2 <_DrawBitmap+0x486>
 801ce9c:	9b05      	ldr	r3, [sp, #20]
 801ce9e:	f04f 0904 	mov.w	r9, #4
 801cea2:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801cea6:	9305      	str	r3, [sp, #20]
 801cea8:	e7c9      	b.n	801ce3e <_DrawBitmap+0x3f2>
 801ceaa:	fa5f f989 	uxtb.w	r9, r9
 801ceae:	f109 0101 	add.w	r1, r9, #1
 801ceb2:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 801ceb6:	00a3      	lsls	r3, r4, #2
 801ceb8:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801cebc:	ea4f 1294 	mov.w	r2, r4, lsr #6
 801cec0:	b2dc      	uxtb	r4, r3
 801cec2:	d002      	beq.n	801ceca <_DrawBitmap+0x47e>
 801cec4:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 801cec8:	802b      	strh	r3, [r5, #0]
 801ceca:	3502      	adds	r5, #2
 801cecc:	42a9      	cmp	r1, r5
 801cece:	d1f2      	bne.n	801ceb6 <_DrawBitmap+0x46a>
 801ced0:	e7de      	b.n	801ce90 <_DrawBitmap+0x444>
 801ced2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801ced4:	46be      	mov	lr, r7
 801ced6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ced8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ceda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cedc:	440a      	add	r2, r1
 801cede:	9907      	ldr	r1, [sp, #28]
 801cee0:	3301      	adds	r3, #1
 801cee2:	9221      	str	r2, [sp, #132]	; 0x84
 801cee4:	9a02      	ldr	r2, [sp, #8]
 801cee6:	930a      	str	r3, [sp, #40]	; 0x28
 801cee8:	440a      	add	r2, r1
 801ceea:	9202      	str	r2, [sp, #8]
 801ceec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ceee:	429a      	cmp	r2, r3
 801cef0:	dc88      	bgt.n	801ce04 <_DrawBitmap+0x3b8>
 801cef2:	e660      	b.n	801cbb6 <_DrawBitmap+0x16a>
 801cef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cef6:	46ba      	mov	sl, r7
 801cef8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801cefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cefc:	440a      	add	r2, r1
 801cefe:	9907      	ldr	r1, [sp, #28]
 801cf00:	3301      	adds	r3, #1
 801cf02:	9221      	str	r2, [sp, #132]	; 0x84
 801cf04:	9a02      	ldr	r2, [sp, #8]
 801cf06:	930a      	str	r3, [sp, #40]	; 0x28
 801cf08:	440a      	add	r2, r1
 801cf0a:	9202      	str	r2, [sp, #8]
 801cf0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cf0e:	429a      	cmp	r2, r3
 801cf10:	f73f af76 	bgt.w	801ce00 <_DrawBitmap+0x3b4>
 801cf14:	46bb      	mov	fp, r7
 801cf16:	46de      	mov	lr, fp
 801cf18:	e64d      	b.n	801cbb6 <_DrawBitmap+0x16a>
 801cf1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf1c:	9e02      	ldr	r6, [sp, #8]
 801cf1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801cf20:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 801cf24:	42ab      	cmp	r3, r5
 801cf26:	bfc8      	it	gt
 801cf28:	b2eb      	uxtbgt	r3, r5
 801cf2a:	1e58      	subs	r0, r3, #1
 801cf2c:	1aed      	subs	r5, r5, r3
 801cf2e:	1eb3      	subs	r3, r6, #2
 801cf30:	b2c0      	uxtb	r0, r0
 801cf32:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 801cf36:	09a2      	lsrs	r2, r4, #6
 801cf38:	00a4      	lsls	r4, r4, #2
 801cf3a:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 801cf3e:	b2e4      	uxtb	r4, r4
 801cf40:	f823 2f02 	strh.w	r2, [r3, #2]!
 801cf44:	4299      	cmp	r1, r3
 801cf46:	d1f6      	bne.n	801cf36 <_DrawBitmap+0x4ea>
 801cf48:	3001      	adds	r0, #1
 801cf4a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801cf4e:	2d00      	cmp	r5, #0
 801cf50:	d0c1      	beq.n	801ced6 <_DrawBitmap+0x48a>
 801cf52:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801cf56:	2304      	movs	r3, #4
 801cf58:	e7e4      	b.n	801cf24 <_DrawBitmap+0x4d8>
 801cf5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cf5c:	9b02      	ldr	r3, [sp, #8]
 801cf5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf60:	460a      	mov	r2, r1
 801cf62:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801cf64:	4282      	cmp	r2, r0
 801cf66:	bfc8      	it	gt
 801cf68:	b2c2      	uxtbgt	r2, r0
 801cf6a:	1e51      	subs	r1, r2, #1
 801cf6c:	1a80      	subs	r0, r0, r2
 801cf6e:	b2c9      	uxtb	r1, r1
 801cf70:	3101      	adds	r1, #1
 801cf72:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801cf76:	00a2      	lsls	r2, r4, #2
 801cf78:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801cf7c:	b2d4      	uxtb	r4, r2
 801cf7e:	d003      	beq.n	801cf88 <_DrawBitmap+0x53c>
 801cf80:	881a      	ldrh	r2, [r3, #0]
 801cf82:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 801cf86:	801a      	strh	r2, [r3, #0]
 801cf88:	3302      	adds	r3, #2
 801cf8a:	428b      	cmp	r3, r1
 801cf8c:	d1f3      	bne.n	801cf76 <_DrawBitmap+0x52a>
 801cf8e:	2800      	cmp	r0, #0
 801cf90:	d0a1      	beq.n	801ced6 <_DrawBitmap+0x48a>
 801cf92:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 801cf96:	2204      	movs	r2, #4
 801cf98:	e7e4      	b.n	801cf64 <_DrawBitmap+0x518>
 801cf9a:	9121      	str	r1, [sp, #132]	; 0x84
 801cf9c:	46ca      	mov	sl, r9
 801cf9e:	9922      	ldr	r1, [sp, #136]	; 0x88
 801cfa0:	930a      	str	r3, [sp, #40]	; 0x28
 801cfa2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801cfa6:	f1c1 0302 	rsb	r3, r1, #2
 801cfaa:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 801cfae:	b2d9      	uxtb	r1, r3
 801cfb0:	465f      	mov	r7, fp
 801cfb2:	4613      	mov	r3, r2
 801cfb4:	9106      	str	r1, [sp, #24]
 801cfb6:	3302      	adds	r3, #2
 801cfb8:	46be      	mov	lr, r7
 801cfba:	46cb      	mov	fp, r9
 801cfbc:	9302      	str	r3, [sp, #8]
 801cfbe:	4b35      	ldr	r3, [pc, #212]	; (801d094 <_DrawBitmap+0x648>)
 801cfc0:	9a02      	ldr	r2, [sp, #8]
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	f1a2 0802 	sub.w	r8, r2, #2
 801cfc8:	9903      	ldr	r1, [sp, #12]
 801cfca:	7c1b      	ldrb	r3, [r3, #16]
 801cfcc:	f89b 2000 	ldrb.w	r2, [fp]
 801cfd0:	f003 0303 	and.w	r3, r3, #3
 801cfd4:	408a      	lsls	r2, r1
 801cfd6:	2b01      	cmp	r3, #1
 801cfd8:	b2d4      	uxtb	r4, r2
 801cfda:	f000 80cb 	beq.w	801d174 <_DrawBitmap+0x728>
 801cfde:	f0c0 8096 	bcc.w	801d10e <_DrawBitmap+0x6c2>
 801cfe2:	2b02      	cmp	r3, #2
 801cfe4:	f040 8083 	bne.w	801d0ee <_DrawBitmap+0x6a2>
 801cfe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cfea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfec:	440b      	add	r3, r1
 801cfee:	4619      	mov	r1, r3
 801cff0:	9305      	str	r3, [sp, #20]
 801cff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	f000 80e1 	beq.w	801d1bc <_DrawBitmap+0x770>
 801cffa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 801cffe:	f040 8202 	bne.w	801d406 <_DrawBitmap+0x9ba>
 801d002:	9b08      	ldr	r3, [sp, #32]
 801d004:	f10b 0601 	add.w	r6, fp, #1
 801d008:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d00c:	1c59      	adds	r1, r3, #1
 801d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d010:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d014:	3b01      	subs	r3, #1
 801d016:	2b01      	cmp	r3, #1
 801d018:	dd4c      	ble.n	801d0b4 <_DrawBitmap+0x668>
 801d01a:	3b02      	subs	r3, #2
 801d01c:	2f00      	cmp	r7, #0
 801d01e:	f000 80d1 	beq.w	801d1c4 <_DrawBitmap+0x778>
 801d022:	9304      	str	r3, [sp, #16]
 801d024:	085b      	lsrs	r3, r3, #1
 801d026:	1c8a      	adds	r2, r1, #2
 801d028:	f108 0904 	add.w	r9, r8, #4
 801d02c:	930c      	str	r3, [sp, #48]	; 0x30
 801d02e:	005b      	lsls	r3, r3, #1
 801d030:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801d034:	460d      	mov	r5, r1
 801d036:	930d      	str	r3, [sp, #52]	; 0x34
 801d038:	18d3      	adds	r3, r2, r3
 801d03a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 801d03e:	920e      	str	r2, [sp, #56]	; 0x38
 801d040:	469b      	mov	fp, r3
 801d042:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d046:	e01a      	b.n	801d07e <_DrawBitmap+0x632>
 801d048:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 801d04c:	68bb      	ldr	r3, [r7, #8]
 801d04e:	f829 ec04 	strh.w	lr, [r9, #-4]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	4798      	blx	r3
 801d056:	f014 040f 	ands.w	r4, r4, #15
 801d05a:	d009      	beq.n	801d070 <_DrawBitmap+0x624>
 801d05c:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d060:	4642      	mov	r2, r8
 801d062:	1c69      	adds	r1, r5, #1
 801d064:	4638      	mov	r0, r7
 801d066:	f829 3c02 	strh.w	r3, [r9, #-2]
 801d06a:	68bb      	ldr	r3, [r7, #8]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	4798      	blx	r3
 801d070:	3502      	adds	r5, #2
 801d072:	f109 0904 	add.w	r9, r9, #4
 801d076:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801d07a:	455d      	cmp	r5, fp
 801d07c:	d00c      	beq.n	801d098 <_DrawBitmap+0x64c>
 801d07e:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801d082:	ea4f 1314 	mov.w	r3, r4, lsr #4
 801d086:	4629      	mov	r1, r5
 801d088:	4642      	mov	r2, r8
 801d08a:	4638      	mov	r0, r7
 801d08c:	d1dc      	bne.n	801d048 <_DrawBitmap+0x5fc>
 801d08e:	2c00      	cmp	r4, #0
 801d090:	d0ee      	beq.n	801d070 <_DrawBitmap+0x624>
 801d092:	e7e3      	b.n	801d05c <_DrawBitmap+0x610>
 801d094:	20000018 	.word	0x20000018
 801d098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d09a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d09c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d09e:	1c5a      	adds	r2, r3, #1
 801d0a0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 801d0a4:	4401      	add	r1, r0
 801d0a6:	9804      	ldr	r0, [sp, #16]
 801d0a8:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 801d0ac:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801d0b0:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801d0b4:	b15b      	cbz	r3, 801d0ce <_DrawBitmap+0x682>
 801d0b6:	0924      	lsrs	r4, r4, #4
 801d0b8:	d009      	beq.n	801d0ce <_DrawBitmap+0x682>
 801d0ba:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d0be:	f8a8 3000 	strh.w	r3, [r8]
 801d0c2:	b127      	cbz	r7, 801d0ce <_DrawBitmap+0x682>
 801d0c4:	68bb      	ldr	r3, [r7, #8]
 801d0c6:	4638      	mov	r0, r7
 801d0c8:	9a05      	ldr	r2, [sp, #20]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	4798      	blx	r3
 801d0ce:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d0d0:	46be      	mov	lr, r7
 801d0d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d0d4:	9907      	ldr	r1, [sp, #28]
 801d0d6:	4493      	add	fp, r2
 801d0d8:	9a02      	ldr	r2, [sp, #8]
 801d0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0dc:	440a      	add	r2, r1
 801d0de:	3301      	adds	r3, #1
 801d0e0:	9202      	str	r2, [sp, #8]
 801d0e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d0e4:	930a      	str	r3, [sp, #40]	; 0x28
 801d0e6:	4293      	cmp	r3, r2
 801d0e8:	f6ff af69 	blt.w	801cfbe <_DrawBitmap+0x572>
 801d0ec:	e563      	b.n	801cbb6 <_DrawBitmap+0x16a>
 801d0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0f0:	46d9      	mov	r9, fp
 801d0f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d0f4:	3301      	adds	r3, #1
 801d0f6:	461a      	mov	r2, r3
 801d0f8:	930a      	str	r3, [sp, #40]	; 0x28
 801d0fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d0fc:	428a      	cmp	r2, r1
 801d0fe:	4499      	add	r9, r3
 801d100:	9b07      	ldr	r3, [sp, #28]
 801d102:	4443      	add	r3, r8
 801d104:	f6ff af57 	blt.w	801cfb6 <_DrawBitmap+0x56a>
 801d108:	46bb      	mov	fp, r7
 801d10a:	46de      	mov	lr, fp
 801d10c:	e553      	b.n	801cbb6 <_DrawBitmap+0x16a>
 801d10e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d110:	2b00      	cmp	r3, #0
 801d112:	d050      	beq.n	801d1b6 <_DrawBitmap+0x76a>
 801d114:	0924      	lsrs	r4, r4, #4
 801d116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d118:	f10b 0201 	add.w	r2, fp, #1
 801d11c:	1e5d      	subs	r5, r3, #1
 801d11e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d122:	f8a8 3000 	strh.w	r3, [r8]
 801d126:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d12a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d12e:	2d01      	cmp	r5, #1
 801d130:	dd18      	ble.n	801d164 <_DrawBitmap+0x718>
 801d132:	106e      	asrs	r6, r5, #1
 801d134:	f108 0304 	add.w	r3, r8, #4
 801d138:	f005 0501 	and.w	r5, r5, #1
 801d13c:	1990      	adds	r0, r2, r6
 801d13e:	4684      	mov	ip, r0
 801d140:	0921      	lsrs	r1, r4, #4
 801d142:	f004 040f 	and.w	r4, r4, #15
 801d146:	3304      	adds	r3, #4
 801d148:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
 801d14c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801d150:	f823 0c08 	strh.w	r0, [r3, #-8]
 801d154:	f823 1c06 	strh.w	r1, [r3, #-6]
 801d158:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801d15c:	4562      	cmp	r2, ip
 801d15e:	d1ef      	bne.n	801d140 <_DrawBitmap+0x6f4>
 801d160:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 801d164:	2d00      	cmp	r5, #0
 801d166:	d0b4      	beq.n	801d0d2 <_DrawBitmap+0x686>
 801d168:	0924      	lsrs	r4, r4, #4
 801d16a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d16e:	f8a8 3000 	strh.w	r3, [r8]
 801d172:	e7ae      	b.n	801d0d2 <_DrawBitmap+0x686>
 801d174:	9b06      	ldr	r3, [sp, #24]
 801d176:	4658      	mov	r0, fp
 801d178:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d17a:	428b      	cmp	r3, r1
 801d17c:	bfc8      	it	gt
 801d17e:	b2cb      	uxtbgt	r3, r1
 801d180:	1e5a      	subs	r2, r3, #1
 801d182:	1ac9      	subs	r1, r1, r3
 801d184:	b2d2      	uxtb	r2, r2
 801d186:	3201      	adds	r2, #1
 801d188:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 801d18c:	0123      	lsls	r3, r4, #4
 801d18e:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801d192:	b2dc      	uxtb	r4, r3
 801d194:	d005      	beq.n	801d1a2 <_DrawBitmap+0x756>
 801d196:	f8b8 3000 	ldrh.w	r3, [r8]
 801d19a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 801d19e:	f8a8 3000 	strh.w	r3, [r8]
 801d1a2:	f108 0802 	add.w	r8, r8, #2
 801d1a6:	4590      	cmp	r8, r2
 801d1a8:	d1f0      	bne.n	801d18c <_DrawBitmap+0x740>
 801d1aa:	2900      	cmp	r1, #0
 801d1ac:	d091      	beq.n	801d0d2 <_DrawBitmap+0x686>
 801d1ae:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801d1b2:	2302      	movs	r3, #2
 801d1b4:	e7e1      	b.n	801d17a <_DrawBitmap+0x72e>
 801d1b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d1b8:	465a      	mov	r2, fp
 801d1ba:	e7b8      	b.n	801d12e <_DrawBitmap+0x6e2>
 801d1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1be:	465e      	mov	r6, fp
 801d1c0:	9908      	ldr	r1, [sp, #32]
 801d1c2:	e728      	b.n	801d016 <_DrawBitmap+0x5ca>
 801d1c4:	461a      	mov	r2, r3
 801d1c6:	9304      	str	r3, [sp, #16]
 801d1c8:	f108 0304 	add.w	r3, r8, #4
 801d1cc:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 801d1d0:	f10e 0c01 	add.w	ip, lr, #1
 801d1d4:	eb06 000c 	add.w	r0, r6, ip
 801d1d8:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801d1dc:	ea4f 1214 	mov.w	r2, r4, lsr #4
 801d1e0:	d003      	beq.n	801d1ea <_DrawBitmap+0x79e>
 801d1e2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d1e6:	f823 2c04 	strh.w	r2, [r3, #-4]
 801d1ea:	f014 040f 	ands.w	r4, r4, #15
 801d1ee:	d003      	beq.n	801d1f8 <_DrawBitmap+0x7ac>
 801d1f0:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
 801d1f4:	f823 2c02 	strh.w	r2, [r3, #-2]
 801d1f8:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801d1fc:	3304      	adds	r3, #4
 801d1fe:	42b0      	cmp	r0, r6
 801d200:	d1ea      	bne.n	801d1d8 <_DrawBitmap+0x78c>
 801d202:	3102      	adds	r1, #2
 801d204:	9b04      	ldr	r3, [sp, #16]
 801d206:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 801d20a:	eba3 034e 	sub.w	r3, r3, lr, lsl #1
 801d20e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 801d212:	e74f      	b.n	801d0b4 <_DrawBitmap+0x668>
 801d214:	930a      	str	r3, [sp, #40]	; 0x28
 801d216:	460b      	mov	r3, r1
 801d218:	46ca      	mov	sl, r9
 801d21a:	9202      	str	r2, [sp, #8]
 801d21c:	3301      	adds	r3, #1
 801d21e:	9121      	str	r1, [sp, #132]	; 0x84
 801d220:	930c      	str	r3, [sp, #48]	; 0x30
 801d222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d224:	f1c3 0308 	rsb	r3, r3, #8
 801d228:	930e      	str	r3, [sp, #56]	; 0x38
 801d22a:	4b92      	ldr	r3, [pc, #584]	; (801d474 <_DrawBitmap+0xa28>)
 801d22c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	440a      	add	r2, r1
 801d234:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d236:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d238:	9204      	str	r2, [sp, #16]
 801d23a:	f7f5 fb53 	bl	80128e4 <GUI_ALLOC_LockH>
 801d23e:	4b8d      	ldr	r3, [pc, #564]	; (801d474 <_DrawBitmap+0xa28>)
 801d240:	f104 38ff 	add.w	r8, r4, #4294967295
 801d244:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	498b      	ldr	r1, [pc, #556]	; (801d478 <_DrawBitmap+0xa2c>)
 801d24c:	7c1b      	ldrb	r3, [r3, #16]
 801d24e:	5c8c      	ldrb	r4, [r1, r2]
 801d250:	f003 0303 	and.w	r3, r3, #3
 801d254:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d256:	9011      	str	r0, [sp, #68]	; 0x44
 801d258:	2b02      	cmp	r3, #2
 801d25a:	fa44 f402 	asr.w	r4, r4, r2
 801d25e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d262:	d072      	beq.n	801d34a <_DrawBitmap+0x8fe>
 801d264:	2b03      	cmp	r3, #3
 801d266:	d01f      	beq.n	801d2a8 <_DrawBitmap+0x85c>
 801d268:	2b01      	cmp	r3, #1
 801d26a:	d01d      	beq.n	801d2a8 <_DrawBitmap+0x85c>
 801d26c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d26e:	9e02      	ldr	r6, [sp, #8]
 801d270:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d272:	42a8      	cmp	r0, r5
 801d274:	4631      	mov	r1, r6
 801d276:	bf28      	it	cs
 801d278:	4628      	movcs	r0, r5
 801d27a:	1a2d      	subs	r5, r5, r0
 801d27c:	4602      	mov	r2, r0
 801d27e:	f004 0301 	and.w	r3, r4, #1
 801d282:	3a01      	subs	r2, #1
 801d284:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d288:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801d28c:	f821 3b02 	strh.w	r3, [r1], #2
 801d290:	d1f5      	bne.n	801d27e <_DrawBitmap+0x832>
 801d292:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801d296:	2d00      	cmp	r5, #0
 801d298:	f43f ad8b 	beq.w	801cdb2 <_DrawBitmap+0x366>
 801d29c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 801d2a0:	2008      	movs	r0, #8
 801d2a2:	4a75      	ldr	r2, [pc, #468]	; (801d478 <_DrawBitmap+0xa2c>)
 801d2a4:	5cd4      	ldrb	r4, [r2, r3]
 801d2a6:	e7e4      	b.n	801d272 <_DrawBitmap+0x826>
 801d2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2ac:	9205      	str	r2, [sp, #20]
 801d2ae:	9a02      	ldr	r2, [sp, #8]
 801d2b0:	691b      	ldr	r3, [r3, #16]
 801d2b2:	9203      	str	r2, [sp, #12]
 801d2b4:	9a08      	ldr	r2, [sp, #32]
 801d2b6:	689b      	ldr	r3, [r3, #8]
 801d2b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d2bc:	9206      	str	r2, [sp, #24]
 801d2be:	4798      	blx	r3
 801d2c0:	b283      	uxth	r3, r0
 801d2c2:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801d2c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801d2ca:	469a      	mov	sl, r3
 801d2cc:	45c8      	cmp	r8, r9
 801d2ce:	bf28      	it	cs
 801d2d0:	46c8      	movcs	r8, r9
 801d2d2:	ebc8 0909 	rsb	r9, r8, r9
 801d2d6:	f1bb 0f00 	cmp.w	fp, #0
 801d2da:	f43f ad51 	beq.w	801cd80 <_DrawBitmap+0x334>
 801d2de:	4645      	mov	r5, r8
 801d2e0:	9e03      	ldr	r6, [sp, #12]
 801d2e2:	9f06      	ldr	r7, [sp, #24]
 801d2e4:	e005      	b.n	801d2f2 <_DrawBitmap+0x8a6>
 801d2e6:	3d01      	subs	r5, #1
 801d2e8:	f106 0602 	add.w	r6, r6, #2
 801d2ec:	f107 0701 	add.w	r7, r7, #1
 801d2f0:	d016      	beq.n	801d320 <_DrawBitmap+0x8d4>
 801d2f2:	f014 0f01 	tst.w	r4, #1
 801d2f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d2fa:	d0f4      	beq.n	801d2e6 <_DrawBitmap+0x89a>
 801d2fc:	f8db 3008 	ldr.w	r3, [fp, #8]
 801d300:	4639      	mov	r1, r7
 801d302:	9a04      	ldr	r2, [sp, #16]
 801d304:	4658      	mov	r0, fp
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	3602      	adds	r6, #2
 801d30a:	4798      	blx	r3
 801d30c:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 801d310:	3d01      	subs	r5, #1
 801d312:	f107 0701 	add.w	r7, r7, #1
 801d316:	ea8a 0303 	eor.w	r3, sl, r3
 801d31a:	f826 3c02 	strh.w	r3, [r6, #-2]
 801d31e:	d1e8      	bne.n	801d2f2 <_DrawBitmap+0x8a6>
 801d320:	9b03      	ldr	r3, [sp, #12]
 801d322:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801d326:	9303      	str	r3, [sp, #12]
 801d328:	9b06      	ldr	r3, [sp, #24]
 801d32a:	4443      	add	r3, r8
 801d32c:	9306      	str	r3, [sp, #24]
 801d32e:	f1b9 0f00 	cmp.w	r9, #0
 801d332:	f43f ad3c 	beq.w	801cdae <_DrawBitmap+0x362>
 801d336:	9b05      	ldr	r3, [sp, #20]
 801d338:	f04f 0808 	mov.w	r8, #8
 801d33c:	4a4e      	ldr	r2, [pc, #312]	; (801d478 <_DrawBitmap+0xa2c>)
 801d33e:	781b      	ldrb	r3, [r3, #0]
 801d340:	5cd4      	ldrb	r4, [r2, r3]
 801d342:	9b05      	ldr	r3, [sp, #20]
 801d344:	3301      	adds	r3, #1
 801d346:	9305      	str	r3, [sp, #20]
 801d348:	e7c0      	b.n	801d2cc <_DrawBitmap+0x880>
 801d34a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d34c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d34e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801d352:	42bd      	cmp	r5, r7
 801d354:	f8cd 800c 	str.w	r8, [sp, #12]
 801d358:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801d35c:	4698      	mov	r8, r3
 801d35e:	bf28      	it	cs
 801d360:	463d      	movcs	r5, r7
 801d362:	9e02      	ldr	r6, [sp, #8]
 801d364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d368:	f8dd a010 	ldr.w	sl, [sp, #16]
 801d36c:	1b7f      	subs	r7, r7, r5
 801d36e:	f1bb 0f00 	cmp.w	fp, #0
 801d372:	d02b      	beq.n	801d3cc <_DrawBitmap+0x980>
 801d374:	b944      	cbnz	r4, 801d388 <_DrawBitmap+0x93c>
 801d376:	e036      	b.n	801d3e6 <_DrawBitmap+0x99a>
 801d378:	3d01      	subs	r5, #1
 801d37a:	f109 0901 	add.w	r9, r9, #1
 801d37e:	f106 0602 	add.w	r6, r6, #2
 801d382:	d012      	beq.n	801d3aa <_DrawBitmap+0x95e>
 801d384:	0864      	lsrs	r4, r4, #1
 801d386:	d02e      	beq.n	801d3e6 <_DrawBitmap+0x99a>
 801d388:	07e2      	lsls	r2, r4, #31
 801d38a:	d5f5      	bpl.n	801d378 <_DrawBitmap+0x92c>
 801d38c:	f8db 3008 	ldr.w	r3, [fp, #8]
 801d390:	4649      	mov	r1, r9
 801d392:	4652      	mov	r2, sl
 801d394:	4658      	mov	r0, fp
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f109 0901 	add.w	r9, r9, #1
 801d39c:	4798      	blx	r3
 801d39e:	3d01      	subs	r5, #1
 801d3a0:	f8a6 8000 	strh.w	r8, [r6]
 801d3a4:	f106 0602 	add.w	r6, r6, #2
 801d3a8:	d1ec      	bne.n	801d384 <_DrawBitmap+0x938>
 801d3aa:	2f00      	cmp	r7, #0
 801d3ac:	f43f acff 	beq.w	801cdae <_DrawBitmap+0x362>
 801d3b0:	9a03      	ldr	r2, [sp, #12]
 801d3b2:	2508      	movs	r5, #8
 801d3b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801d3b8:	42bd      	cmp	r5, r7
 801d3ba:	9203      	str	r2, [sp, #12]
 801d3bc:	bf28      	it	cs
 801d3be:	463d      	movcs	r5, r7
 801d3c0:	4a2d      	ldr	r2, [pc, #180]	; (801d478 <_DrawBitmap+0xa2c>)
 801d3c2:	1b7f      	subs	r7, r7, r5
 801d3c4:	5cd4      	ldrb	r4, [r2, r3]
 801d3c6:	f1bb 0f00 	cmp.w	fp, #0
 801d3ca:	d1d3      	bne.n	801d374 <_DrawBitmap+0x928>
 801d3cc:	b914      	cbnz	r4, 801d3d4 <_DrawBitmap+0x988>
 801d3ce:	e00e      	b.n	801d3ee <_DrawBitmap+0x9a2>
 801d3d0:	0864      	lsrs	r4, r4, #1
 801d3d2:	d00c      	beq.n	801d3ee <_DrawBitmap+0x9a2>
 801d3d4:	07e3      	lsls	r3, r4, #31
 801d3d6:	f106 0602 	add.w	r6, r6, #2
 801d3da:	bf48      	it	mi
 801d3dc:	f826 8c02 	strhmi.w	r8, [r6, #-2]
 801d3e0:	3d01      	subs	r5, #1
 801d3e2:	d1f5      	bne.n	801d3d0 <_DrawBitmap+0x984>
 801d3e4:	e7e1      	b.n	801d3aa <_DrawBitmap+0x95e>
 801d3e6:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801d3ea:	44a9      	add	r9, r5
 801d3ec:	e7dd      	b.n	801d3aa <_DrawBitmap+0x95e>
 801d3ee:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801d3f2:	e7da      	b.n	801d3aa <_DrawBitmap+0x95e>
 801d3f4:	4b21      	ldr	r3, [pc, #132]	; (801d47c <_DrawBitmap+0xa30>)
 801d3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	9802      	ldr	r0, [sp, #8]
 801d3fc:	4798      	blx	r3
 801d3fe:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d402:	4658      	mov	r0, fp
 801d404:	e468      	b.n	801ccd8 <_DrawBitmap+0x28c>
 801d406:	0924      	lsrs	r4, r4, #4
 801d408:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d40c:	f8a8 3000 	strh.w	r3, [r8]
 801d410:	2f00      	cmp	r7, #0
 801d412:	f43f adf6 	beq.w	801d002 <_DrawBitmap+0x5b6>
 801d416:	68bb      	ldr	r3, [r7, #8]
 801d418:	460a      	mov	r2, r1
 801d41a:	4638      	mov	r0, r7
 801d41c:	9908      	ldr	r1, [sp, #32]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	4798      	blx	r3
 801d422:	e5ee      	b.n	801d002 <_DrawBitmap+0x5b6>
 801d424:	9903      	ldr	r1, [sp, #12]
 801d426:	9b02      	ldr	r3, [sp, #8]
 801d428:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d42c:	b102      	cbz	r2, 801d430 <_DrawBitmap+0x9e4>
 801d42e:	801a      	strh	r2, [r3, #0]
 801d430:	3302      	adds	r3, #2
 801d432:	42b3      	cmp	r3, r6
 801d434:	d1f8      	bne.n	801d428 <_DrawBitmap+0x9dc>
 801d436:	e44e      	b.n	801ccd6 <_DrawBitmap+0x28a>
 801d438:	4b11      	ldr	r3, [pc, #68]	; (801d480 <_DrawBitmap+0xa34>)
 801d43a:	681c      	ldr	r4, [r3, #0]
 801d43c:	b16c      	cbz	r4, 801d45a <_DrawBitmap+0xa0e>
 801d43e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d440:	9a07      	ldr	r2, [sp, #28]
 801d442:	9301      	str	r3, [sp, #4]
 801d444:	9200      	str	r2, [sp, #0]
 801d446:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d44a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d44c:	9802      	ldr	r0, [sp, #8]
 801d44e:	47a0      	blx	r4
 801d450:	f7ff bb86 	b.w	801cb60 <_DrawBitmap+0x114>
 801d454:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d456:	f7ff bb7f 	b.w	801cb58 <_DrawBitmap+0x10c>
 801d45a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	f77f ab7f 	ble.w	801cb60 <_DrawBitmap+0x114>
 801d462:	f7ff bbc6 	b.w	801cbf2 <_DrawBitmap+0x1a6>
 801d466:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d468:	2800      	cmp	r0, #0
 801d46a:	f47f ab76 	bne.w	801cb5a <_DrawBitmap+0x10e>
 801d46e:	f7ff bb77 	b.w	801cb60 <_DrawBitmap+0x114>
 801d472:	bf00      	nop
 801d474:	20000018 	.word	0x20000018
 801d478:	08033ecc 	.word	0x08033ecc
 801d47c:	2000004c 	.word	0x2000004c
 801d480:	200003dc 	.word	0x200003dc

0801d484 <_GetDevProp>:
 801d484:	2908      	cmp	r1, #8
 801d486:	d101      	bne.n	801d48c <_GetDevProp+0x8>
 801d488:	2010      	movs	r0, #16
 801d48a:	4770      	bx	lr
 801d48c:	6800      	ldr	r0, [r0, #0]
 801d48e:	b110      	cbz	r0, 801d496 <_GetDevProp+0x12>
 801d490:	68c3      	ldr	r3, [r0, #12]
 801d492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d494:	4718      	bx	r3
 801d496:	f04f 30ff 	mov.w	r0, #4294967295
 801d49a:	4770      	bx	lr

0801d49c <_GetPixelIndex>:
 801d49c:	4b0e      	ldr	r3, [pc, #56]	; (801d4d8 <_GetPixelIndex+0x3c>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	b570      	push	{r4, r5, r6, lr}
 801d4a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d4a4:	b082      	sub	sp, #8
 801d4a6:	460e      	mov	r6, r1
 801d4a8:	4614      	mov	r4, r2
 801d4aa:	f7f5 fa1b 	bl	80128e4 <GUI_ALLOC_LockH>
 801d4ae:	4605      	mov	r5, r0
 801d4b0:	a802      	add	r0, sp, #8
 801d4b2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801d4b6:	68eb      	ldr	r3, [r5, #12]
 801d4b8:	1aa2      	subs	r2, r4, r2
 801d4ba:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 801d4be:	f840 5d04 	str.w	r5, [r0, #-4]!
 801d4c2:	fb03 f302 	mul.w	r3, r3, r2
 801d4c6:	1b34      	subs	r4, r6, r4
 801d4c8:	3318      	adds	r3, #24
 801d4ca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801d4ce:	f7f5 fa1d 	bl	801290c <GUI_ALLOC_UnlockH>
 801d4d2:	5b28      	ldrh	r0, [r5, r4]
 801d4d4:	b002      	add	sp, #8
 801d4d6:	bd70      	pop	{r4, r5, r6, pc}
 801d4d8:	20000018 	.word	0x20000018

0801d4dc <_SetPixelIndex>:
 801d4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d4e0:	4c1b      	ldr	r4, [pc, #108]	; (801d550 <_SetPixelIndex+0x74>)
 801d4e2:	4699      	mov	r9, r3
 801d4e4:	b083      	sub	sp, #12
 801d4e6:	460f      	mov	r7, r1
 801d4e8:	6823      	ldr	r3, [r4, #0]
 801d4ea:	4690      	mov	r8, r2
 801d4ec:	ae02      	add	r6, sp, #8
 801d4ee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d4f0:	f7f5 f9f8 	bl	80128e4 <GUI_ALLOC_LockH>
 801d4f4:	6823      	ldr	r3, [r4, #0]
 801d4f6:	9000      	str	r0, [sp, #0]
 801d4f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d4fa:	f7f5 f9f3 	bl	80128e4 <GUI_ALLOC_LockH>
 801d4fe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d502:	68c1      	ldr	r1, [r0, #12]
 801d504:	4605      	mov	r5, r0
 801d506:	ebc2 0208 	rsb	r2, r2, r8
 801d50a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d50e:	f846 0d04 	str.w	r0, [r6, #-4]!
 801d512:	4630      	mov	r0, r6
 801d514:	fb01 f202 	mul.w	r2, r1, r2
 801d518:	1b3c      	subs	r4, r7, r4
 801d51a:	3218      	adds	r2, #24
 801d51c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d520:	f7f5 f9f4 	bl	801290c <GUI_ALLOC_UnlockH>
 801d524:	9b00      	ldr	r3, [sp, #0]
 801d526:	f825 9004 	strh.w	r9, [r5, r4]
 801d52a:	6958      	ldr	r0, [r3, #20]
 801d52c:	b150      	cbz	r0, 801d544 <_SetPixelIndex+0x68>
 801d52e:	f7f5 f9d9 	bl	80128e4 <GUI_ALLOC_LockH>
 801d532:	9001      	str	r0, [sp, #4]
 801d534:	6883      	ldr	r3, [r0, #8]
 801d536:	4642      	mov	r2, r8
 801d538:	4639      	mov	r1, r7
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	4798      	blx	r3
 801d53e:	4630      	mov	r0, r6
 801d540:	f7f5 f9e4 	bl	801290c <GUI_ALLOC_UnlockH>
 801d544:	4668      	mov	r0, sp
 801d546:	f7f5 f9e1 	bl	801290c <GUI_ALLOC_UnlockH>
 801d54a:	b003      	add	sp, #12
 801d54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d550:	20000018 	.word	0x20000018

0801d554 <_XorPixel>:
 801d554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d558:	4c1e      	ldr	r4, [pc, #120]	; (801d5d4 <_XorPixel+0x80>)
 801d55a:	b083      	sub	sp, #12
 801d55c:	4681      	mov	r9, r0
 801d55e:	460f      	mov	r7, r1
 801d560:	6823      	ldr	r3, [r4, #0]
 801d562:	4690      	mov	r8, r2
 801d564:	ae02      	add	r6, sp, #8
 801d566:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d568:	f7f5 f9bc 	bl	80128e4 <GUI_ALLOC_LockH>
 801d56c:	6823      	ldr	r3, [r4, #0]
 801d56e:	9000      	str	r0, [sp, #0]
 801d570:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d572:	f7f5 f9b7 	bl	80128e4 <GUI_ALLOC_LockH>
 801d576:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801d57a:	68c2      	ldr	r2, [r0, #12]
 801d57c:	4605      	mov	r5, r0
 801d57e:	ebc3 0308 	rsb	r3, r3, r8
 801d582:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d586:	f846 0d04 	str.w	r0, [r6, #-4]!
 801d58a:	4630      	mov	r0, r6
 801d58c:	fb02 f303 	mul.w	r3, r2, r3
 801d590:	1b3c      	subs	r4, r7, r4
 801d592:	3318      	adds	r3, #24
 801d594:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801d598:	f7f5 f9b8 	bl	801290c <GUI_ALLOC_UnlockH>
 801d59c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d5a0:	689b      	ldr	r3, [r3, #8]
 801d5a2:	4798      	blx	r3
 801d5a4:	5b2b      	ldrh	r3, [r5, r4]
 801d5a6:	9a00      	ldr	r2, [sp, #0]
 801d5a8:	4043      	eors	r3, r0
 801d5aa:	6950      	ldr	r0, [r2, #20]
 801d5ac:	532b      	strh	r3, [r5, r4]
 801d5ae:	b150      	cbz	r0, 801d5c6 <_XorPixel+0x72>
 801d5b0:	f7f5 f998 	bl	80128e4 <GUI_ALLOC_LockH>
 801d5b4:	9001      	str	r0, [sp, #4]
 801d5b6:	6883      	ldr	r3, [r0, #8]
 801d5b8:	4642      	mov	r2, r8
 801d5ba:	4639      	mov	r1, r7
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	4798      	blx	r3
 801d5c0:	4630      	mov	r0, r6
 801d5c2:	f7f5 f9a3 	bl	801290c <GUI_ALLOC_UnlockH>
 801d5c6:	4668      	mov	r0, sp
 801d5c8:	f7f5 f9a0 	bl	801290c <GUI_ALLOC_UnlockH>
 801d5cc:	b003      	add	sp, #12
 801d5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5d2:	bf00      	nop
 801d5d4:	20000018 	.word	0x20000018

0801d5d8 <_FillRect>:
 801d5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5dc:	4f5a      	ldr	r7, [pc, #360]	; (801d748 <_FillRect+0x170>)
 801d5de:	4689      	mov	r9, r1
 801d5e0:	4615      	mov	r5, r2
 801d5e2:	b089      	sub	sp, #36	; 0x24
 801d5e4:	683a      	ldr	r2, [r7, #0]
 801d5e6:	ebc9 0303 	rsb	r3, r9, r3
 801d5ea:	4683      	mov	fp, r0
 801d5ec:	f10d 0820 	add.w	r8, sp, #32
 801d5f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801d5f2:	461c      	mov	r4, r3
 801d5f4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801d5f6:	f8d1 a000 	ldr.w	sl, [r1]
 801d5fa:	1c66      	adds	r6, r4, #1
 801d5fc:	9305      	str	r3, [sp, #20]
 801d5fe:	f7f5 f971 	bl	80128e4 <GUI_ALLOC_LockH>
 801d602:	683b      	ldr	r3, [r7, #0]
 801d604:	9006      	str	r0, [sp, #24]
 801d606:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d608:	f7f5 f96c 	bl	80128e4 <GUI_ALLOC_LockH>
 801d60c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801d610:	68c2      	ldr	r2, [r0, #12]
 801d612:	4601      	mov	r1, r0
 801d614:	1aeb      	subs	r3, r5, r3
 801d616:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d61a:	f848 0d04 	str.w	r0, [r8, #-4]!
 801d61e:	4640      	mov	r0, r8
 801d620:	fb02 f303 	mul.w	r3, r2, r3
 801d624:	ebc4 0409 	rsb	r4, r4, r9
 801d628:	3318      	adds	r3, #24
 801d62a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d62e:	18cc      	adds	r4, r1, r3
 801d630:	f7f5 f96c 	bl	801290c <GUI_ALLOC_UnlockH>
 801d634:	9b06      	ldr	r3, [sp, #24]
 801d636:	6958      	ldr	r0, [r3, #20]
 801d638:	68db      	ldr	r3, [r3, #12]
 801d63a:	9302      	str	r3, [sp, #8]
 801d63c:	2800      	cmp	r0, #0
 801d63e:	d16f      	bne.n	801d720 <_FillRect+0x148>
 801d640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d642:	429d      	cmp	r5, r3
 801d644:	dc5e      	bgt.n	801d704 <_FillRect+0x12c>
 801d646:	fa1f f38a 	uxth.w	r3, sl
 801d64a:	9304      	str	r3, [sp, #16]
 801d64c:	683b      	ldr	r3, [r7, #0]
 801d64e:	7c1b      	ldrb	r3, [r3, #16]
 801d650:	07db      	lsls	r3, r3, #31
 801d652:	d55d      	bpl.n	801d710 <_FillRect+0x138>
 801d654:	f8db 3010 	ldr.w	r3, [fp, #16]
 801d658:	689b      	ldr	r3, [r3, #8]
 801d65a:	4798      	blx	r3
 801d65c:	f3c4 0340 	ubfx	r3, r4, #1, #1
 801d660:	b280      	uxth	r0, r0
 801d662:	42b3      	cmp	r3, r6
 801d664:	bf28      	it	cs
 801d666:	4633      	movcs	r3, r6
 801d668:	2e03      	cmp	r6, #3
 801d66a:	bf98      	it	ls
 801d66c:	4633      	movls	r3, r6
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d054      	beq.n	801d71c <_FillRect+0x144>
 801d672:	8822      	ldrh	r2, [r4, #0]
 801d674:	46a4      	mov	ip, r4
 801d676:	2b01      	cmp	r3, #1
 801d678:	ea82 0200 	eor.w	r2, r2, r0
 801d67c:	f82c 2b02 	strh.w	r2, [ip], #2
 801d680:	d00c      	beq.n	801d69c <_FillRect+0xc4>
 801d682:	8862      	ldrh	r2, [r4, #2]
 801d684:	2b03      	cmp	r3, #3
 801d686:	f104 0c04 	add.w	ip, r4, #4
 801d68a:	ea82 0200 	eor.w	r2, r2, r0
 801d68e:	8062      	strh	r2, [r4, #2]
 801d690:	d104      	bne.n	801d69c <_FillRect+0xc4>
 801d692:	88a2      	ldrh	r2, [r4, #4]
 801d694:	f104 0c06 	add.w	ip, r4, #6
 801d698:	4042      	eors	r2, r0
 801d69a:	80a2      	strh	r2, [r4, #4]
 801d69c:	42b3      	cmp	r3, r6
 801d69e:	d02b      	beq.n	801d6f8 <_FillRect+0x120>
 801d6a0:	ebc3 0a06 	rsb	sl, r3, r6
 801d6a4:	f1aa 0e02 	sub.w	lr, sl, #2
 801d6a8:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 801d6ac:	f10e 0e01 	add.w	lr, lr, #1
 801d6b0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d6b4:	9203      	str	r2, [sp, #12]
 801d6b6:	9a05      	ldr	r2, [sp, #20]
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	d018      	beq.n	801d6ee <_FillRect+0x116>
 801d6bc:	f04f 0900 	mov.w	r9, #0
 801d6c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d6c4:	4649      	mov	r1, r9
 801d6c6:	f360 090f 	bfi	r9, r0, #0, #16
 801d6ca:	f1a3 0804 	sub.w	r8, r3, #4
 801d6ce:	f360 491f 	bfi	r9, r0, #16, #16
 801d6d2:	f858 2f04 	ldr.w	r2, [r8, #4]!
 801d6d6:	3101      	adds	r1, #1
 801d6d8:	ea89 0202 	eor.w	r2, r9, r2
 801d6dc:	458e      	cmp	lr, r1
 801d6de:	f843 2b04 	str.w	r2, [r3], #4
 801d6e2:	d8f6      	bhi.n	801d6d2 <_FillRect+0xfa>
 801d6e4:	9a03      	ldr	r2, [sp, #12]
 801d6e6:	4592      	cmp	sl, r2
 801d6e8:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 801d6ec:	d004      	beq.n	801d6f8 <_FillRect+0x120>
 801d6ee:	f8bc 3000 	ldrh.w	r3, [ip]
 801d6f2:	4058      	eors	r0, r3
 801d6f4:	f8ac 0000 	strh.w	r0, [ip]
 801d6f8:	9b02      	ldr	r3, [sp, #8]
 801d6fa:	3501      	adds	r5, #1
 801d6fc:	441c      	add	r4, r3
 801d6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d700:	42ab      	cmp	r3, r5
 801d702:	daa3      	bge.n	801d64c <_FillRect+0x74>
 801d704:	a806      	add	r0, sp, #24
 801d706:	f7f5 f901 	bl	801290c <GUI_ALLOC_UnlockH>
 801d70a:	b009      	add	sp, #36	; 0x24
 801d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d710:	4632      	mov	r2, r6
 801d712:	9904      	ldr	r1, [sp, #16]
 801d714:	4620      	mov	r0, r4
 801d716:	f7fb fd4b 	bl	80191b0 <GUI__memset16>
 801d71a:	e7ed      	b.n	801d6f8 <_FillRect+0x120>
 801d71c:	46a4      	mov	ip, r4
 801d71e:	e7bf      	b.n	801d6a0 <_FillRect+0xc8>
 801d720:	f7f5 f8e0 	bl	80128e4 <GUI_ALLOC_LockH>
 801d724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d726:	4649      	mov	r1, r9
 801d728:	462a      	mov	r2, r5
 801d72a:	ebc5 0e03 	rsb	lr, r5, r3
 801d72e:	4633      	mov	r3, r6
 801d730:	9007      	str	r0, [sp, #28]
 801d732:	f10e 0e01 	add.w	lr, lr, #1
 801d736:	f8cd e000 	str.w	lr, [sp]
 801d73a:	f000 fa89 	bl	801dc50 <GUI_USAGE_AddRect>
 801d73e:	4640      	mov	r0, r8
 801d740:	f7f5 f8e4 	bl	801290c <GUI_ALLOC_UnlockH>
 801d744:	e77c      	b.n	801d640 <_FillRect+0x68>
 801d746:	bf00      	nop
 801d748:	20000018 	.word	0x20000018

0801d74c <_DrawHLine>:
 801d74c:	b500      	push	{lr}
 801d74e:	b083      	sub	sp, #12
 801d750:	9200      	str	r2, [sp, #0]
 801d752:	f7ff ff41 	bl	801d5d8 <_FillRect>
 801d756:	b003      	add	sp, #12
 801d758:	f85d fb04 	ldr.w	pc, [sp], #4

0801d75c <_DrawVLine>:
 801d75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d760:	4f37      	ldr	r7, [pc, #220]	; (801d840 <_DrawVLine+0xe4>)
 801d762:	4615      	mov	r5, r2
 801d764:	b085      	sub	sp, #20
 801d766:	4681      	mov	r9, r0
 801d768:	683a      	ldr	r2, [r7, #0]
 801d76a:	461e      	mov	r6, r3
 801d76c:	4688      	mov	r8, r1
 801d76e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801d770:	f7f5 f8b8 	bl	80128e4 <GUI_ALLOC_LockH>
 801d774:	6943      	ldr	r3, [r0, #20]
 801d776:	9001      	str	r0, [sp, #4]
 801d778:	4618      	mov	r0, r3
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d13d      	bne.n	801d7fa <_DrawVLine+0x9e>
 801d77e:	683b      	ldr	r3, [r7, #0]
 801d780:	9002      	str	r0, [sp, #8]
 801d782:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d784:	f7f5 f8ae 	bl	80128e4 <GUI_ALLOC_LockH>
 801d788:	4602      	mov	r2, r0
 801d78a:	a804      	add	r0, sp, #16
 801d78c:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 801d790:	68d3      	ldr	r3, [r2, #12]
 801d792:	1b2c      	subs	r4, r5, r4
 801d794:	f840 2d04 	str.w	r2, [r0, #-4]!
 801d798:	fb03 f304 	mul.w	r3, r3, r4
 801d79c:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 801d7a0:	3318      	adds	r3, #24
 801d7a2:	ebc4 0408 	rsb	r4, r4, r8
 801d7a6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d7aa:	18d4      	adds	r4, r2, r3
 801d7ac:	f7f5 f8ae 	bl	801290c <GUI_ALLOC_UnlockH>
 801d7b0:	683b      	ldr	r3, [r7, #0]
 801d7b2:	7c1a      	ldrb	r2, [r3, #16]
 801d7b4:	07d2      	lsls	r2, r2, #31
 801d7b6:	d423      	bmi.n	801d800 <_DrawVLine+0xa4>
 801d7b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d7ba:	9802      	ldr	r0, [sp, #8]
 801d7bc:	9b01      	ldr	r3, [sp, #4]
 801d7be:	6812      	ldr	r2, [r2, #0]
 801d7c0:	68df      	ldr	r7, [r3, #12]
 801d7c2:	2800      	cmp	r0, #0
 801d7c4:	d034      	beq.n	801d830 <_DrawVLine+0xd4>
 801d7c6:	fa1f f982 	uxth.w	r9, r2
 801d7ca:	e000      	b.n	801d7ce <_DrawVLine+0x72>
 801d7cc:	9802      	ldr	r0, [sp, #8]
 801d7ce:	6883      	ldr	r3, [r0, #8]
 801d7d0:	462a      	mov	r2, r5
 801d7d2:	3501      	adds	r5, #1
 801d7d4:	4641      	mov	r1, r8
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	4798      	blx	r3
 801d7da:	42ae      	cmp	r6, r5
 801d7dc:	f8a4 9000 	strh.w	r9, [r4]
 801d7e0:	443c      	add	r4, r7
 801d7e2:	daf3      	bge.n	801d7cc <_DrawVLine+0x70>
 801d7e4:	a801      	add	r0, sp, #4
 801d7e6:	f7f5 f891 	bl	801290c <GUI_ALLOC_UnlockH>
 801d7ea:	9b02      	ldr	r3, [sp, #8]
 801d7ec:	b113      	cbz	r3, 801d7f4 <_DrawVLine+0x98>
 801d7ee:	a802      	add	r0, sp, #8
 801d7f0:	f7f5 f88c 	bl	801290c <GUI_ALLOC_UnlockH>
 801d7f4:	b005      	add	sp, #20
 801d7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7fa:	f7f5 f873 	bl	80128e4 <GUI_ALLOC_LockH>
 801d7fe:	e7be      	b.n	801d77e <_DrawVLine+0x22>
 801d800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d804:	689b      	ldr	r3, [r3, #8]
 801d806:	4798      	blx	r3
 801d808:	b287      	uxth	r7, r0
 801d80a:	9b02      	ldr	r3, [sp, #8]
 801d80c:	462a      	mov	r2, r5
 801d80e:	4641      	mov	r1, r8
 801d810:	3501      	adds	r5, #1
 801d812:	4618      	mov	r0, r3
 801d814:	b113      	cbz	r3, 801d81c <_DrawVLine+0xc0>
 801d816:	689b      	ldr	r3, [r3, #8]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	4798      	blx	r3
 801d81c:	8823      	ldrh	r3, [r4, #0]
 801d81e:	42b5      	cmp	r5, r6
 801d820:	9a01      	ldr	r2, [sp, #4]
 801d822:	ea83 0307 	eor.w	r3, r3, r7
 801d826:	68d2      	ldr	r2, [r2, #12]
 801d828:	8023      	strh	r3, [r4, #0]
 801d82a:	4414      	add	r4, r2
 801d82c:	dded      	ble.n	801d80a <_DrawVLine+0xae>
 801d82e:	e7d9      	b.n	801d7e4 <_DrawVLine+0x88>
 801d830:	1b73      	subs	r3, r6, r5
 801d832:	b292      	uxth	r2, r2
 801d834:	3301      	adds	r3, #1
 801d836:	3b01      	subs	r3, #1
 801d838:	8022      	strh	r2, [r4, #0]
 801d83a:	443c      	add	r4, r7
 801d83c:	d1fb      	bne.n	801d836 <_DrawVLine+0xda>
 801d83e:	e7d1      	b.n	801d7e4 <_DrawVLine+0x88>
 801d840:	20000018 	.word	0x20000018

0801d844 <GUI_MEMDEV__SetAlphaCallback>:
 801d844:	4b01      	ldr	r3, [pc, #4]	; (801d84c <GUI_MEMDEV__SetAlphaCallback+0x8>)
 801d846:	6018      	str	r0, [r3, #0]
 801d848:	4770      	bx	lr
 801d84a:	bf00      	nop
 801d84c:	200003e0 	.word	0x200003e0

0801d850 <GUI_MEMDEV_Draw>:
 801d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d854:	b087      	sub	sp, #28
 801d856:	4604      	mov	r4, r0
 801d858:	4692      	mov	sl, r2
 801d85a:	461d      	mov	r5, r3
 801d85c:	4689      	mov	r9, r1
 801d85e:	f7fa fa6b 	bl	8017d38 <GUI_Lock>
 801d862:	4b57      	ldr	r3, [pc, #348]	; (801d9c0 <GUI_MEMDEV_Draw+0x170>)
 801d864:	681a      	ldr	r2, [r3, #0]
 801d866:	4b57      	ldr	r3, [pc, #348]	; (801d9c4 <GUI_MEMDEV_Draw+0x174>)
 801d868:	7c57      	ldrb	r7, [r2, #17]
 801d86a:	57db      	ldrsb	r3, [r3, r7]
 801d86c:	4638      	mov	r0, r7
 801d86e:	2b01      	cmp	r3, #1
 801d870:	f340 809a 	ble.w	801d9a8 <GUI_MEMDEV_Draw+0x158>
 801d874:	f7fc fdee 	bl	801a454 <LCD_GetXSizeEx>
 801d878:	4606      	mov	r6, r0
 801d87a:	4638      	mov	r0, r7
 801d87c:	f7fc fdfa 	bl	801a474 <LCD_GetYSizeEx>
 801d880:	4607      	mov	r7, r0
 801d882:	2c00      	cmp	r4, #0
 801d884:	f000 808d 	beq.w	801d9a2 <GUI_MEMDEV_Draw+0x152>
 801d888:	a905      	add	r1, sp, #20
 801d88a:	a804      	add	r0, sp, #16
 801d88c:	f7f5 fe52 	bl	8013534 <GUI_GetOrg>
 801d890:	9a04      	ldr	r2, [sp, #16]
 801d892:	9b05      	ldr	r3, [sp, #20]
 801d894:	4416      	add	r6, r2
 801d896:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d89a:	441f      	add	r7, r3
 801d89c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801d8a0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801d8a4:	3e01      	subs	r6, #1
 801d8a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8aa:	3f01      	subs	r7, #1
 801d8ac:	4611      	mov	r1, r2
 801d8ae:	9202      	str	r2, [sp, #8]
 801d8b0:	4618      	mov	r0, r3
 801d8b2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d8b6:	9303      	str	r3, [sp, #12]
 801d8b8:	4296      	cmp	r6, r2
 801d8ba:	bfd4      	ite	le
 801d8bc:	ebc1 0106 	rsble	r1, r1, r6
 801d8c0:	ebc1 0102 	rsbgt	r1, r1, r2
 801d8c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d8c8:	4602      	mov	r2, r0
 801d8ca:	460e      	mov	r6, r1
 801d8cc:	429f      	cmp	r7, r3
 801d8ce:	bfd4      	ite	le
 801d8d0:	ebc2 0207 	rsble	r2, r2, r7
 801d8d4:	ebc2 0203 	rsbgt	r2, r2, r3
 801d8d8:	3601      	adds	r6, #1
 801d8da:	4617      	mov	r7, r2
 801d8dc:	3701      	adds	r7, #1
 801d8de:	b905      	cbnz	r5, 801d8e2 <GUI_MEMDEV_Draw+0x92>
 801d8e0:	427d      	negs	r5, r7
 801d8e2:	2e00      	cmp	r6, #0
 801d8e4:	dd4f      	ble.n	801d986 <GUI_MEMDEV_Draw+0x136>
 801d8e6:	2f00      	cmp	r7, #0
 801d8e8:	dd4d      	ble.n	801d986 <GUI_MEMDEV_Draw+0x136>
 801d8ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8ec:	4632      	mov	r2, r6
 801d8ee:	9903      	ldr	r1, [sp, #12]
 801d8f0:	9300      	str	r3, [sp, #0]
 801d8f2:	462b      	mov	r3, r5
 801d8f4:	9802      	ldr	r0, [sp, #8]
 801d8f6:	f7fe fff7 	bl	801c8e8 <GUI_MEMDEV_CreateEx>
 801d8fa:	4680      	mov	r8, r0
 801d8fc:	2800      	cmp	r0, #0
 801d8fe:	d048      	beq.n	801d992 <GUI_MEMDEV_Draw+0x142>
 801d900:	f000 f90e 	bl	801db20 <GUI_MEMDEV_GetYSize>
 801d904:	4287      	cmp	r7, r0
 801d906:	4606      	mov	r6, r0
 801d908:	d004      	beq.n	801d914 <GUI_MEMDEV_Draw+0xc4>
 801d90a:	4b2d      	ldr	r3, [pc, #180]	; (801d9c0 <GUI_MEMDEV_Draw+0x170>)
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d910:	2800      	cmp	r0, #0
 801d912:	d151      	bne.n	801d9b8 <GUI_MEMDEV_Draw+0x168>
 801d914:	4640      	mov	r0, r8
 801d916:	463d      	mov	r5, r7
 801d918:	2400      	movs	r4, #0
 801d91a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801d9c8 <GUI_MEMDEV_Draw+0x178>
 801d91e:	f7ff f82b 	bl	801c978 <GUI_MEMDEV_Select>
 801d922:	e00e      	b.n	801d942 <GUI_MEMDEV_Draw+0xf2>
 801d924:	1bad      	subs	r5, r5, r6
 801d926:	b9ac      	cbnz	r4, 801d954 <GUI_MEMDEV_Draw+0x104>
 801d928:	4650      	mov	r0, sl
 801d92a:	4434      	add	r4, r6
 801d92c:	47c8      	blx	r9
 801d92e:	f8db 3000 	ldr.w	r3, [fp]
 801d932:	20ff      	movs	r0, #255	; 0xff
 801d934:	b103      	cbz	r3, 801d938 <GUI_MEMDEV_Draw+0xe8>
 801d936:	4798      	blx	r3
 801d938:	4640      	mov	r0, r8
 801d93a:	f7ff f84d 	bl	801c9d8 <GUI_MEMDEV_CopyToLCD>
 801d93e:	42a7      	cmp	r7, r4
 801d940:	dd12      	ble.n	801d968 <GUI_MEMDEV_Draw+0x118>
 801d942:	42ae      	cmp	r6, r5
 801d944:	ddee      	ble.n	801d924 <GUI_MEMDEV_Draw+0xd4>
 801d946:	4629      	mov	r1, r5
 801d948:	4640      	mov	r0, r8
 801d94a:	f000 f90b 	bl	801db64 <GUI_MEMDEV_ReduceYSize>
 801d94e:	1bad      	subs	r5, r5, r6
 801d950:	2c00      	cmp	r4, #0
 801d952:	d0e9      	beq.n	801d928 <GUI_MEMDEV_Draw+0xd8>
 801d954:	9b03      	ldr	r3, [sp, #12]
 801d956:	4640      	mov	r0, r8
 801d958:	9902      	ldr	r1, [sp, #8]
 801d95a:	191a      	adds	r2, r3, r4
 801d95c:	f000 f922 	bl	801dba4 <GUI_MEMDEV_SetOrg>
 801d960:	4640      	mov	r0, r8
 801d962:	f000 f833 	bl	801d9cc <GUI_MEMDEV_Clear>
 801d966:	e7df      	b.n	801d928 <GUI_MEMDEV_Draw+0xd8>
 801d968:	4640      	mov	r0, r8
 801d96a:	f7fe ff93 	bl	801c894 <GUI_MEMDEV_Delete>
 801d96e:	2000      	movs	r0, #0
 801d970:	f7ff f802 	bl	801c978 <GUI_MEMDEV_Select>
 801d974:	42b7      	cmp	r7, r6
 801d976:	d006      	beq.n	801d986 <GUI_MEMDEV_Draw+0x136>
 801d978:	4b11      	ldr	r3, [pc, #68]	; (801d9c0 <GUI_MEMDEV_Draw+0x170>)
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d97e:	b110      	cbz	r0, 801d986 <GUI_MEMDEV_Draw+0x136>
 801d980:	2133      	movs	r1, #51	; 0x33
 801d982:	f003 ff61 	bl	8021848 <WM__SendMessageNoPara>
 801d986:	f7fa f9cd 	bl	8017d24 <GUI_Unlock>
 801d98a:	2000      	movs	r0, #0
 801d98c:	b007      	add	sp, #28
 801d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d992:	4650      	mov	r0, sl
 801d994:	47c8      	blx	r9
 801d996:	f7fa f9c5 	bl	8017d24 <GUI_Unlock>
 801d99a:	2001      	movs	r0, #1
 801d99c:	b007      	add	sp, #28
 801d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9a2:	9403      	str	r4, [sp, #12]
 801d9a4:	9402      	str	r4, [sp, #8]
 801d9a6:	e79a      	b.n	801d8de <GUI_MEMDEV_Draw+0x8e>
 801d9a8:	f7fc fd74 	bl	801a494 <LCD_GetVXSizeEx>
 801d9ac:	4606      	mov	r6, r0
 801d9ae:	4638      	mov	r0, r7
 801d9b0:	f7fc fd80 	bl	801a4b4 <LCD_GetVYSizeEx>
 801d9b4:	4607      	mov	r7, r0
 801d9b6:	e764      	b.n	801d882 <GUI_MEMDEV_Draw+0x32>
 801d9b8:	2132      	movs	r1, #50	; 0x32
 801d9ba:	f003 ff45 	bl	8021848 <WM__SendMessageNoPara>
 801d9be:	e7a9      	b.n	801d914 <GUI_MEMDEV_Draw+0xc4>
 801d9c0:	20000018 	.word	0x20000018
 801d9c4:	20046780 	.word	0x20046780
 801d9c8:	200003e0 	.word	0x200003e0

0801d9cc <GUI_MEMDEV_Clear>:
 801d9cc:	b510      	push	{r4, lr}
 801d9ce:	b082      	sub	sp, #8
 801d9d0:	b928      	cbnz	r0, 801d9de <GUI_MEMDEV_Clear+0x12>
 801d9d2:	4b13      	ldr	r3, [pc, #76]	; (801da20 <GUI_MEMDEV_Clear+0x54>)
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801d9d8:	b914      	cbnz	r4, 801d9e0 <GUI_MEMDEV_Clear+0x14>
 801d9da:	b002      	add	sp, #8
 801d9dc:	bd10      	pop	{r4, pc}
 801d9de:	4604      	mov	r4, r0
 801d9e0:	f7fa f9aa 	bl	8017d38 <GUI_Lock>
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f7f4 ff7d 	bl	80128e4 <GUI_ALLOC_LockH>
 801d9ea:	ab02      	add	r3, sp, #8
 801d9ec:	6944      	ldr	r4, [r0, #20]
 801d9ee:	f843 0d08 	str.w	r0, [r3, #-8]!
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	f7f4 ff8a 	bl	801290c <GUI_ALLOC_UnlockH>
 801d9f8:	b91c      	cbnz	r4, 801da02 <GUI_MEMDEV_Clear+0x36>
 801d9fa:	f7fa f993 	bl	8017d24 <GUI_Unlock>
 801d9fe:	b002      	add	sp, #8
 801da00:	bd10      	pop	{r4, pc}
 801da02:	4620      	mov	r0, r4
 801da04:	ac02      	add	r4, sp, #8
 801da06:	f7f4 ff6d 	bl	80128e4 <GUI_ALLOC_LockH>
 801da0a:	6882      	ldr	r2, [r0, #8]
 801da0c:	f844 0d04 	str.w	r0, [r4, #-4]!
 801da10:	6893      	ldr	r3, [r2, #8]
 801da12:	4798      	blx	r3
 801da14:	4620      	mov	r0, r4
 801da16:	f7f4 ff79 	bl	801290c <GUI_ALLOC_UnlockH>
 801da1a:	f7fa f983 	bl	8017d24 <GUI_Unlock>
 801da1e:	e7ee      	b.n	801d9fe <GUI_MEMDEV_Clear+0x32>
 801da20:	20000018 	.word	0x20000018

0801da24 <GUI_MEMDEV_GetDataPtr>:
 801da24:	b1a0      	cbz	r0, 801da50 <GUI_MEMDEV_GetDataPtr+0x2c>
 801da26:	b510      	push	{r4, lr}
 801da28:	4604      	mov	r4, r0
 801da2a:	b082      	sub	sp, #8
 801da2c:	f7fa f984 	bl	8017d38 <GUI_Lock>
 801da30:	4620      	mov	r0, r4
 801da32:	f7f4 ff57 	bl	80128e4 <GUI_ALLOC_LockH>
 801da36:	ab02      	add	r3, sp, #8
 801da38:	f100 0418 	add.w	r4, r0, #24
 801da3c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801da40:	4618      	mov	r0, r3
 801da42:	f7f4 ff63 	bl	801290c <GUI_ALLOC_UnlockH>
 801da46:	f7fa f96d 	bl	8017d24 <GUI_Unlock>
 801da4a:	4620      	mov	r0, r4
 801da4c:	b002      	add	sp, #8
 801da4e:	bd10      	pop	{r4, pc}
 801da50:	4770      	bx	lr
 801da52:	bf00      	nop

0801da54 <GUI_MEMDEV_GetXPos>:
 801da54:	b510      	push	{r4, lr}
 801da56:	4604      	mov	r4, r0
 801da58:	b082      	sub	sp, #8
 801da5a:	f7fa f96d 	bl	8017d38 <GUI_Lock>
 801da5e:	b17c      	cbz	r4, 801da80 <GUI_MEMDEV_GetXPos+0x2c>
 801da60:	4620      	mov	r0, r4
 801da62:	f7f4 ff3f 	bl	80128e4 <GUI_ALLOC_LockH>
 801da66:	ab02      	add	r3, sp, #8
 801da68:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801da6c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801da70:	4618      	mov	r0, r3
 801da72:	f7f4 ff4b 	bl	801290c <GUI_ALLOC_UnlockH>
 801da76:	f7fa f955 	bl	8017d24 <GUI_Unlock>
 801da7a:	4620      	mov	r0, r4
 801da7c:	b002      	add	sp, #8
 801da7e:	bd10      	pop	{r4, pc}
 801da80:	4b04      	ldr	r3, [pc, #16]	; (801da94 <GUI_MEMDEV_GetXPos+0x40>)
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801da86:	2c00      	cmp	r4, #0
 801da88:	d1ea      	bne.n	801da60 <GUI_MEMDEV_GetXPos+0xc>
 801da8a:	f7fa f94b 	bl	8017d24 <GUI_Unlock>
 801da8e:	4620      	mov	r0, r4
 801da90:	b002      	add	sp, #8
 801da92:	bd10      	pop	{r4, pc}
 801da94:	20000018 	.word	0x20000018

0801da98 <GUI_MEMDEV_GetYPos>:
 801da98:	b510      	push	{r4, lr}
 801da9a:	4604      	mov	r4, r0
 801da9c:	b082      	sub	sp, #8
 801da9e:	f7fa f94b 	bl	8017d38 <GUI_Lock>
 801daa2:	b17c      	cbz	r4, 801dac4 <GUI_MEMDEV_GetYPos+0x2c>
 801daa4:	4620      	mov	r0, r4
 801daa6:	f7f4 ff1d 	bl	80128e4 <GUI_ALLOC_LockH>
 801daaa:	ab02      	add	r3, sp, #8
 801daac:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801dab0:	f843 0d04 	str.w	r0, [r3, #-4]!
 801dab4:	4618      	mov	r0, r3
 801dab6:	f7f4 ff29 	bl	801290c <GUI_ALLOC_UnlockH>
 801daba:	f7fa f933 	bl	8017d24 <GUI_Unlock>
 801dabe:	4620      	mov	r0, r4
 801dac0:	b002      	add	sp, #8
 801dac2:	bd10      	pop	{r4, pc}
 801dac4:	4b04      	ldr	r3, [pc, #16]	; (801dad8 <GUI_MEMDEV_GetYPos+0x40>)
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801daca:	2c00      	cmp	r4, #0
 801dacc:	d1ea      	bne.n	801daa4 <GUI_MEMDEV_GetYPos+0xc>
 801dace:	f7fa f929 	bl	8017d24 <GUI_Unlock>
 801dad2:	4620      	mov	r0, r4
 801dad4:	b002      	add	sp, #8
 801dad6:	bd10      	pop	{r4, pc}
 801dad8:	20000018 	.word	0x20000018

0801dadc <GUI_MEMDEV_GetXSize>:
 801dadc:	b510      	push	{r4, lr}
 801dade:	4604      	mov	r4, r0
 801dae0:	b082      	sub	sp, #8
 801dae2:	f7fa f929 	bl	8017d38 <GUI_Lock>
 801dae6:	b17c      	cbz	r4, 801db08 <GUI_MEMDEV_GetXSize+0x2c>
 801dae8:	4620      	mov	r0, r4
 801daea:	f7f4 fefb 	bl	80128e4 <GUI_ALLOC_LockH>
 801daee:	ab02      	add	r3, sp, #8
 801daf0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 801daf4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7f4 ff07 	bl	801290c <GUI_ALLOC_UnlockH>
 801dafe:	f7fa f911 	bl	8017d24 <GUI_Unlock>
 801db02:	4620      	mov	r0, r4
 801db04:	b002      	add	sp, #8
 801db06:	bd10      	pop	{r4, pc}
 801db08:	4b04      	ldr	r3, [pc, #16]	; (801db1c <GUI_MEMDEV_GetXSize+0x40>)
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801db0e:	2c00      	cmp	r4, #0
 801db10:	d1ea      	bne.n	801dae8 <GUI_MEMDEV_GetXSize+0xc>
 801db12:	f7fa f907 	bl	8017d24 <GUI_Unlock>
 801db16:	4620      	mov	r0, r4
 801db18:	b002      	add	sp, #8
 801db1a:	bd10      	pop	{r4, pc}
 801db1c:	20000018 	.word	0x20000018

0801db20 <GUI_MEMDEV_GetYSize>:
 801db20:	b510      	push	{r4, lr}
 801db22:	4604      	mov	r4, r0
 801db24:	b082      	sub	sp, #8
 801db26:	f7fa f907 	bl	8017d38 <GUI_Lock>
 801db2a:	b17c      	cbz	r4, 801db4c <GUI_MEMDEV_GetYSize+0x2c>
 801db2c:	4620      	mov	r0, r4
 801db2e:	f7f4 fed9 	bl	80128e4 <GUI_ALLOC_LockH>
 801db32:	ab02      	add	r3, sp, #8
 801db34:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801db38:	f843 0d04 	str.w	r0, [r3, #-4]!
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7f4 fee5 	bl	801290c <GUI_ALLOC_UnlockH>
 801db42:	f7fa f8ef 	bl	8017d24 <GUI_Unlock>
 801db46:	4620      	mov	r0, r4
 801db48:	b002      	add	sp, #8
 801db4a:	bd10      	pop	{r4, pc}
 801db4c:	4b04      	ldr	r3, [pc, #16]	; (801db60 <GUI_MEMDEV_GetYSize+0x40>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801db52:	2c00      	cmp	r4, #0
 801db54:	d1ea      	bne.n	801db2c <GUI_MEMDEV_GetYSize+0xc>
 801db56:	f7fa f8e5 	bl	8017d24 <GUI_Unlock>
 801db5a:	4620      	mov	r0, r4
 801db5c:	b002      	add	sp, #8
 801db5e:	bd10      	pop	{r4, pc}
 801db60:	20000018 	.word	0x20000018

0801db64 <GUI_MEMDEV_ReduceYSize>:
 801db64:	b530      	push	{r4, r5, lr}
 801db66:	460d      	mov	r5, r1
 801db68:	b083      	sub	sp, #12
 801db6a:	b928      	cbnz	r0, 801db78 <GUI_MEMDEV_ReduceYSize+0x14>
 801db6c:	4b0c      	ldr	r3, [pc, #48]	; (801dba0 <GUI_MEMDEV_ReduceYSize+0x3c>)
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801db72:	b914      	cbnz	r4, 801db7a <GUI_MEMDEV_ReduceYSize+0x16>
 801db74:	b003      	add	sp, #12
 801db76:	bd30      	pop	{r4, r5, pc}
 801db78:	4604      	mov	r4, r0
 801db7a:	f7fa f8dd 	bl	8017d38 <GUI_Lock>
 801db7e:	4620      	mov	r0, r4
 801db80:	f7f4 feb0 	bl	80128e4 <GUI_ALLOC_LockH>
 801db84:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801db88:	9001      	str	r0, [sp, #4]
 801db8a:	42ab      	cmp	r3, r5
 801db8c:	bfc8      	it	gt
 801db8e:	8145      	strhgt	r5, [r0, #10]
 801db90:	a801      	add	r0, sp, #4
 801db92:	f7f4 febb 	bl	801290c <GUI_ALLOC_UnlockH>
 801db96:	f7fa f8c5 	bl	8017d24 <GUI_Unlock>
 801db9a:	b003      	add	sp, #12
 801db9c:	bd30      	pop	{r4, r5, pc}
 801db9e:	bf00      	nop
 801dba0:	20000018 	.word	0x20000018

0801dba4 <GUI_MEMDEV_SetOrg>:
 801dba4:	b570      	push	{r4, r5, r6, lr}
 801dba6:	460d      	mov	r5, r1
 801dba8:	b082      	sub	sp, #8
 801dbaa:	4616      	mov	r6, r2
 801dbac:	b928      	cbnz	r0, 801dbba <GUI_MEMDEV_SetOrg+0x16>
 801dbae:	4b1a      	ldr	r3, [pc, #104]	; (801dc18 <GUI_MEMDEV_SetOrg+0x74>)
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801dbb4:	b914      	cbnz	r4, 801dbbc <GUI_MEMDEV_SetOrg+0x18>
 801dbb6:	b002      	add	sp, #8
 801dbb8:	bd70      	pop	{r4, r5, r6, pc}
 801dbba:	4604      	mov	r4, r0
 801dbbc:	b236      	sxth	r6, r6
 801dbbe:	b22d      	sxth	r5, r5
 801dbc0:	f7fa f8ba 	bl	8017d38 <GUI_Lock>
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	f7f4 fe8d 	bl	80128e4 <GUI_ALLOC_LockH>
 801dbca:	80c6      	strh	r6, [r0, #6]
 801dbcc:	8085      	strh	r5, [r0, #4]
 801dbce:	9000      	str	r0, [sp, #0]
 801dbd0:	f7fc f914 	bl	8019dfc <LCD_SetClipRectMax>
 801dbd4:	9b00      	ldr	r3, [sp, #0]
 801dbd6:	6958      	ldr	r0, [r3, #20]
 801dbd8:	b930      	cbnz	r0, 801dbe8 <GUI_MEMDEV_SetOrg+0x44>
 801dbda:	4668      	mov	r0, sp
 801dbdc:	f7f4 fe96 	bl	801290c <GUI_ALLOC_UnlockH>
 801dbe0:	f7fa f8a0 	bl	8017d24 <GUI_Unlock>
 801dbe4:	b002      	add	sp, #8
 801dbe6:	bd70      	pop	{r4, r5, r6, pc}
 801dbe8:	f7f4 fe7c 	bl	80128e4 <GUI_ALLOC_LockH>
 801dbec:	9b00      	ldr	r3, [sp, #0]
 801dbee:	9001      	str	r0, [sp, #4]
 801dbf0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801dbf4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801dbf8:	8082      	strh	r2, [r0, #4]
 801dbfa:	80c3      	strh	r3, [r0, #6]
 801dbfc:	b113      	cbz	r3, 801dc04 <GUI_MEMDEV_SetOrg+0x60>
 801dbfe:	b10a      	cbz	r2, 801dc04 <GUI_MEMDEV_SetOrg+0x60>
 801dc00:	8005      	strh	r5, [r0, #0]
 801dc02:	8046      	strh	r6, [r0, #2]
 801dc04:	a801      	add	r0, sp, #4
 801dc06:	f7f4 fe81 	bl	801290c <GUI_ALLOC_UnlockH>
 801dc0a:	4668      	mov	r0, sp
 801dc0c:	f7f4 fe7e 	bl	801290c <GUI_ALLOC_UnlockH>
 801dc10:	f7fa f888 	bl	8017d24 <GUI_Unlock>
 801dc14:	e7e6      	b.n	801dbe4 <GUI_MEMDEV_SetOrg+0x40>
 801dc16:	bf00      	nop
 801dc18:	20000018 	.word	0x20000018

0801dc1c <GUI_USAGE_DecUseCnt>:
 801dc1c:	b530      	push	{r4, r5, lr}
 801dc1e:	4605      	mov	r5, r0
 801dc20:	b083      	sub	sp, #12
 801dc22:	f7fa f889 	bl	8017d38 <GUI_Lock>
 801dc26:	4628      	mov	r0, r5
 801dc28:	f7f4 fe5c 	bl	80128e4 <GUI_ALLOC_LockH>
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	a802      	add	r0, sp, #8
 801dc30:	899c      	ldrh	r4, [r3, #12]
 801dc32:	f840 3d04 	str.w	r3, [r0, #-4]!
 801dc36:	3c01      	subs	r4, #1
 801dc38:	b224      	sxth	r4, r4
 801dc3a:	819c      	strh	r4, [r3, #12]
 801dc3c:	f7f4 fe66 	bl	801290c <GUI_ALLOC_UnlockH>
 801dc40:	b914      	cbnz	r4, 801dc48 <GUI_USAGE_DecUseCnt+0x2c>
 801dc42:	4628      	mov	r0, r5
 801dc44:	f7f4 ffe6 	bl	8012c14 <GUI_ALLOC_Free>
 801dc48:	f7fa f86c 	bl	8017d24 <GUI_Unlock>
 801dc4c:	b003      	add	sp, #12
 801dc4e:	bd30      	pop	{r4, r5, pc}

0801dc50 <GUI_USAGE_AddRect>:
 801dc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc54:	9c08      	ldr	r4, [sp, #32]
 801dc56:	4605      	mov	r5, r0
 801dc58:	4689      	mov	r9, r1
 801dc5a:	4698      	mov	r8, r3
 801dc5c:	68a9      	ldr	r1, [r5, #8]
 801dc5e:	4643      	mov	r3, r8
 801dc60:	4628      	mov	r0, r5
 801dc62:	1c56      	adds	r6, r2, #1
 801dc64:	684f      	ldr	r7, [r1, #4]
 801dc66:	4649      	mov	r1, r9
 801dc68:	47b8      	blx	r7
 801dc6a:	3c01      	subs	r4, #1
 801dc6c:	4632      	mov	r2, r6
 801dc6e:	d1f5      	bne.n	801dc5c <GUI_USAGE_AddRect+0xc>
 801dc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801dc74 <GUI_USAGE_BM_AddPixel>:
 801dc74:	b430      	push	{r4, r5}
 801dc76:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801dc7a:	2580      	movs	r5, #128	; 0x80
 801dc7c:	6903      	ldr	r3, [r0, #16]
 801dc7e:	1b12      	subs	r2, r2, r4
 801dc80:	f9b0 4000 	ldrsh.w	r4, [r0]
 801dc84:	fb03 f302 	mul.w	r3, r3, r2
 801dc88:	1b09      	subs	r1, r1, r4
 801dc8a:	3314      	adds	r3, #20
 801dc8c:	f001 0207 	and.w	r2, r1, #7
 801dc90:	eb03 01e1 	add.w	r1, r3, r1, asr #3
 801dc94:	4115      	asrs	r5, r2
 801dc96:	5c43      	ldrb	r3, [r0, r1]
 801dc98:	432b      	orrs	r3, r5
 801dc9a:	bc30      	pop	{r4, r5}
 801dc9c:	5443      	strb	r3, [r0, r1]
 801dc9e:	4770      	bx	lr

0801dca0 <GUI_USAGE_BM_GetNextDirty>:
 801dca0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801dca4:	4293      	cmp	r3, r2
 801dca6:	dd3b      	ble.n	801dd20 <GUI_USAGE_BM_GetNextDirty+0x80>
 801dca8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801dcac:	b4f0      	push	{r4, r5, r6, r7}
 801dcae:	680d      	ldr	r5, [r1, #0]
 801dcb0:	429d      	cmp	r5, r3
 801dcb2:	da32      	bge.n	801dd1a <GUI_USAGE_BM_GetNextDirty+0x7a>
 801dcb4:	10ee      	asrs	r6, r5, #3
 801dcb6:	6907      	ldr	r7, [r0, #16]
 801dcb8:	1e5c      	subs	r4, r3, #1
 801dcba:	f005 0307 	and.w	r3, r5, #7
 801dcbe:	fb07 6202 	mla	r2, r7, r2, r6
 801dcc2:	ebc6 06e4 	rsb	r6, r6, r4, asr #3
 801dcc6:	3214      	adds	r2, #20
 801dcc8:	5c84      	ldrb	r4, [r0, r2]
 801dcca:	3201      	adds	r2, #1
 801dccc:	fa04 f303 	lsl.w	r3, r4, r3
 801dcd0:	4410      	add	r0, r2
 801dcd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801dcd6:	d108      	bne.n	801dcea <GUI_USAGE_BM_GetNextDirty+0x4a>
 801dcd8:	b326      	cbz	r6, 801dd24 <GUI_USAGE_BM_GetNextDirty+0x84>
 801dcda:	3508      	adds	r5, #8
 801dcdc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801dce0:	3e01      	subs	r6, #1
 801dce2:	f025 0507 	bic.w	r5, r5, #7
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d0f6      	beq.n	801dcd8 <GUI_USAGE_BM_GetNextDirty+0x38>
 801dcea:	061c      	lsls	r4, r3, #24
 801dcec:	d434      	bmi.n	801dd58 <GUI_USAGE_BM_GetNextDirty+0xb8>
 801dcee:	005b      	lsls	r3, r3, #1
 801dcf0:	3501      	adds	r5, #1
 801dcf2:	b2db      	uxtb	r3, r3
 801dcf4:	061a      	lsls	r2, r3, #24
 801dcf6:	d5fa      	bpl.n	801dcee <GUI_USAGE_BM_GetNextDirty+0x4e>
 801dcf8:	065f      	lsls	r7, r3, #25
 801dcfa:	462a      	mov	r2, r5
 801dcfc:	d504      	bpl.n	801dd08 <GUI_USAGE_BM_GetNextDirty+0x68>
 801dcfe:	005b      	lsls	r3, r3, #1
 801dd00:	3201      	adds	r2, #1
 801dd02:	b2db      	uxtb	r3, r3
 801dd04:	065c      	lsls	r4, r3, #25
 801dd06:	d4fa      	bmi.n	801dcfe <GUI_USAGE_BM_GetNextDirty+0x5e>
 801dd08:	f002 0307 	and.w	r3, r2, #7
 801dd0c:	2b07      	cmp	r3, #7
 801dd0e:	d00c      	beq.n	801dd2a <GUI_USAGE_BM_GetNextDirty+0x8a>
 801dd10:	1b56      	subs	r6, r2, r5
 801dd12:	600d      	str	r5, [r1, #0]
 801dd14:	1c70      	adds	r0, r6, #1
 801dd16:	bcf0      	pop	{r4, r5, r6, r7}
 801dd18:	4770      	bx	lr
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	bcf0      	pop	{r4, r5, r6, r7}
 801dd1e:	4770      	bx	lr
 801dd20:	2000      	movs	r0, #0
 801dd22:	4770      	bx	lr
 801dd24:	4630      	mov	r0, r6
 801dd26:	bcf0      	pop	{r4, r5, r6, r7}
 801dd28:	4770      	bx	lr
 801dd2a:	2e00      	cmp	r6, #0
 801dd2c:	ddf0      	ble.n	801dd10 <GUI_USAGE_BM_GetNextDirty+0x70>
 801dd2e:	7804      	ldrb	r4, [r0, #0]
 801dd30:	1c47      	adds	r7, r0, #1
 801dd32:	2cff      	cmp	r4, #255	; 0xff
 801dd34:	d10d      	bne.n	801dd52 <GUI_USAGE_BM_GetNextDirty+0xb2>
 801dd36:	1983      	adds	r3, r0, r6
 801dd38:	e003      	b.n	801dd42 <GUI_USAGE_BM_GetNextDirty+0xa2>
 801dd3a:	f817 4b01 	ldrb.w	r4, [r7], #1
 801dd3e:	2cff      	cmp	r4, #255	; 0xff
 801dd40:	d107      	bne.n	801dd52 <GUI_USAGE_BM_GetNextDirty+0xb2>
 801dd42:	42bb      	cmp	r3, r7
 801dd44:	f102 0208 	add.w	r2, r2, #8
 801dd48:	d1f7      	bne.n	801dd3a <GUI_USAGE_BM_GetNextDirty+0x9a>
 801dd4a:	e7e1      	b.n	801dd10 <GUI_USAGE_BM_GetNextDirty+0x70>
 801dd4c:	0064      	lsls	r4, r4, #1
 801dd4e:	3201      	adds	r2, #1
 801dd50:	b2e4      	uxtb	r4, r4
 801dd52:	0623      	lsls	r3, r4, #24
 801dd54:	d4fa      	bmi.n	801dd4c <GUI_USAGE_BM_GetNextDirty+0xac>
 801dd56:	e7db      	b.n	801dd10 <GUI_USAGE_BM_GetNextDirty+0x70>
 801dd58:	2bff      	cmp	r3, #255	; 0xff
 801dd5a:	d1cd      	bne.n	801dcf8 <GUI_USAGE_BM_GetNextDirty+0x58>
 801dd5c:	1dea      	adds	r2, r5, #7
 801dd5e:	e7d3      	b.n	801dd08 <GUI_USAGE_BM_GetNextDirty+0x68>

0801dd60 <_GUI_USAGE_BM_Delete>:
 801dd60:	f7f4 bf58 	b.w	8012c14 <GUI_ALLOC_Free>

0801dd64 <GUI_USAGE_BM_Clear>:
 801dd64:	4603      	mov	r3, r0
 801dd66:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801dd6a:	2100      	movs	r1, #0
 801dd6c:	3014      	adds	r0, #20
 801dd6e:	691b      	ldr	r3, [r3, #16]
 801dd70:	fb03 f202 	mul.w	r2, r3, r2
 801dd74:	f006 bf02 	b.w	8024b7c <memset>

0801dd78 <GUI_USAGE_BM_AddHLine>:
 801dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd7a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801dd7e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801dd82:	1b0c      	subs	r4, r1, r4
 801dd84:	42ac      	cmp	r4, r5
 801dd86:	da2a      	bge.n	801ddde <GUI_USAGE_BM_AddHLine+0x66>
 801dd88:	4423      	add	r3, r4
 801dd8a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801dd8e:	10e7      	asrs	r7, r4, #3
 801dd90:	21ff      	movs	r1, #255	; 0xff
 801dd92:	3b01      	subs	r3, #1
 801dd94:	1b55      	subs	r5, r2, r5
 801dd96:	6902      	ldr	r2, [r0, #16]
 801dd98:	f004 0407 	and.w	r4, r4, #7
 801dd9c:	43de      	mvns	r6, r3
 801dd9e:	fb02 7505 	mla	r5, r2, r5, r7
 801dda2:	fa41 f404 	asr.w	r4, r1, r4
 801dda6:	f006 0607 	and.w	r6, r6, #7
 801ddaa:	ebd7 02e3 	rsbs	r2, r7, r3, asr #3
 801ddae:	f105 0514 	add.w	r5, r5, #20
 801ddb2:	b2e4      	uxtb	r4, r4
 801ddb4:	fa01 f606 	lsl.w	r6, r1, r6
 801ddb8:	eb00 0e05 	add.w	lr, r0, r5
 801ddbc:	b2f6      	uxtb	r6, r6
 801ddbe:	d00f      	beq.n	801dde0 <GUI_USAGE_BM_AddHLine+0x68>
 801ddc0:	5d43      	ldrb	r3, [r0, r5]
 801ddc2:	3a01      	subs	r2, #1
 801ddc4:	f10e 0701 	add.w	r7, lr, #1
 801ddc8:	431c      	orrs	r4, r3
 801ddca:	2a00      	cmp	r2, #0
 801ddcc:	5544      	strb	r4, [r0, r5]
 801ddce:	dd03      	ble.n	801ddd8 <GUI_USAGE_BM_AddHLine+0x60>
 801ddd0:	4638      	mov	r0, r7
 801ddd2:	4417      	add	r7, r2
 801ddd4:	f006 fed2 	bl	8024b7c <memset>
 801ddd8:	783c      	ldrb	r4, [r7, #0]
 801ddda:	4334      	orrs	r4, r6
 801dddc:	703c      	strb	r4, [r7, #0]
 801ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dde0:	5d43      	ldrb	r3, [r0, r5]
 801dde2:	4034      	ands	r4, r6
 801dde4:	431c      	orrs	r4, r3
 801dde6:	5544      	strb	r4, [r0, r5]
 801dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddea:	bf00      	nop

0801ddec <GUI_USAGE_BM_Create>:
 801ddec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddf0:	f102 040f 	add.w	r4, r2, #15
 801ddf4:	4680      	mov	r8, r0
 801ddf6:	b083      	sub	sp, #12
 801ddf8:	4691      	mov	r9, r2
 801ddfa:	1124      	asrs	r4, r4, #4
 801ddfc:	461e      	mov	r6, r3
 801ddfe:	460f      	mov	r7, r1
 801de00:	0064      	lsls	r4, r4, #1
 801de02:	fb03 f004 	mul.w	r0, r3, r4
 801de06:	3014      	adds	r0, #20
 801de08:	f7f4 ff24 	bl	8012c54 <GUI_ALLOC_AllocZero>
 801de0c:	4605      	mov	r5, r0
 801de0e:	b1b8      	cbz	r0, 801de40 <GUI_USAGE_BM_Create+0x54>
 801de10:	f7f9 ff92 	bl	8017d38 <GUI_Lock>
 801de14:	4628      	mov	r0, r5
 801de16:	f7f4 fd65 	bl	80128e4 <GUI_ALLOC_LockH>
 801de1a:	2301      	movs	r3, #1
 801de1c:	4601      	mov	r1, r0
 801de1e:	4a0a      	ldr	r2, [pc, #40]	; (801de48 <GUI_USAGE_BM_Create+0x5c>)
 801de20:	a802      	add	r0, sp, #8
 801de22:	f8a1 9004 	strh.w	r9, [r1, #4]
 801de26:	f840 1d04 	str.w	r1, [r0, #-4]!
 801de2a:	80ce      	strh	r6, [r1, #6]
 801de2c:	610c      	str	r4, [r1, #16]
 801de2e:	f8a1 8000 	strh.w	r8, [r1]
 801de32:	804f      	strh	r7, [r1, #2]
 801de34:	608a      	str	r2, [r1, #8]
 801de36:	818b      	strh	r3, [r1, #12]
 801de38:	f7f4 fd68 	bl	801290c <GUI_ALLOC_UnlockH>
 801de3c:	f7f9 ff72 	bl	8017d24 <GUI_Unlock>
 801de40:	4628      	mov	r0, r5
 801de42:	b003      	add	sp, #12
 801de44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de48:	08033e84 	.word	0x08033e84

0801de4c <GUI_MEMDEV__WriteToActiveOpaque>:
 801de4c:	b900      	cbnz	r0, 801de50 <GUI_MEMDEV__WriteToActiveOpaque+0x4>
 801de4e:	4770      	bx	lr
 801de50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de54:	b0a3      	sub	sp, #140	; 0x8c
 801de56:	468b      	mov	fp, r1
 801de58:	4692      	mov	sl, r2
 801de5a:	4604      	mov	r4, r0
 801de5c:	f7f4 fd42 	bl	80128e4 <GUI_ALLOC_LockH>
 801de60:	ab22      	add	r3, sp, #136	; 0x88
 801de62:	6945      	ldr	r5, [r0, #20]
 801de64:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801de68:	4618      	mov	r0, r3
 801de6a:	f7f4 fd4f 	bl	801290c <GUI_ALLOC_UnlockH>
 801de6e:	4620      	mov	r0, r4
 801de70:	f7fe fcf4 	bl	801c85c <GUI_MEMDEV_GetBitsPerPixel>
 801de74:	2808      	cmp	r0, #8
 801de76:	4681      	mov	r9, r0
 801de78:	dd40      	ble.n	801defc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801de7a:	2d00      	cmp	r5, #0
 801de7c:	d13e      	bne.n	801defc <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801de7e:	4620      	mov	r0, r4
 801de80:	f7f4 fd30 	bl	80128e4 <GUI_ALLOC_LockH>
 801de84:	aa22      	add	r2, sp, #136	; 0x88
 801de86:	4603      	mov	r3, r0
 801de88:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801de8c:	f842 0d10 	str.w	r0, [r2, #-16]!
 801de90:	4610      	mov	r0, r2
 801de92:	920d      	str	r2, [sp, #52]	; 0x34
 801de94:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801de98:	910a      	str	r1, [sp, #40]	; 0x28
 801de9a:	9209      	str	r2, [sp, #36]	; 0x24
 801de9c:	6819      	ldr	r1, [r3, #0]
 801de9e:	68da      	ldr	r2, [r3, #12]
 801dea0:	690e      	ldr	r6, [r1, #16]
 801dea2:	930b      	str	r3, [sp, #44]	; 0x2c
 801dea4:	920e      	str	r2, [sp, #56]	; 0x38
 801dea6:	f7f4 fd31 	bl	801290c <GUI_ALLOC_UnlockH>
 801deaa:	4892      	ldr	r0, [pc, #584]	; (801e0f4 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801deac:	4992      	ldr	r1, [pc, #584]	; (801e0f8 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>)
 801deae:	6800      	ldr	r0, [r0, #0]
 801deb0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801deb4:	7c40      	ldrb	r0, [r0, #17]
 801deb6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801deba:	690d      	ldr	r5, [r1, #16]
 801debc:	682b      	ldr	r3, [r5, #0]
 801debe:	930c      	str	r3, [sp, #48]	; 0x30
 801dec0:	f7fc fb9a 	bl	801a5f8 <GUI_GetBitsPerPixelEx>
 801dec4:	2808      	cmp	r0, #8
 801dec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dec8:	d914      	bls.n	801def4 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801deca:	2810      	cmp	r0, #16
 801decc:	bf8b      	itete	hi
 801dece:	2220      	movhi	r2, #32
 801ded0:	2210      	movls	r2, #16
 801ded2:	2704      	movhi	r7, #4
 801ded4:	2702      	movls	r7, #2
 801ded6:	920b      	str	r2, [sp, #44]	; 0x2c
 801ded8:	42ae      	cmp	r6, r5
 801deda:	f000 82f8 	beq.w	801e4ce <GUI_MEMDEV__WriteToActiveOpaque+0x682>
 801dede:	f1b9 0f20 	cmp.w	r9, #32
 801dee2:	f000 81b3 	beq.w	801e24c <GUI_MEMDEV__WriteToActiveOpaque+0x400>
 801dee6:	f1b9 0f10 	cmp.w	r9, #16
 801deea:	f000 8145 	beq.w	801e178 <GUI_MEMDEV__WriteToActiveOpaque+0x32c>
 801deee:	b023      	add	sp, #140	; 0x8c
 801def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def4:	2208      	movs	r2, #8
 801def6:	2701      	movs	r7, #1
 801def8:	920b      	str	r2, [sp, #44]	; 0x2c
 801defa:	e7ed      	b.n	801ded8 <GUI_MEMDEV__WriteToActiveOpaque+0x8c>
 801defc:	2100      	movs	r1, #0
 801defe:	2301      	movs	r3, #1
 801df00:	4620      	mov	r0, r4
 801df02:	4e7c      	ldr	r6, [pc, #496]	; (801e0f4 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801df04:	9120      	str	r1, [sp, #128]	; 0x80
 801df06:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801df0a:	910b      	str	r1, [sp, #44]	; 0x2c
 801df0c:	9321      	str	r3, [sp, #132]	; 0x84
 801df0e:	930a      	str	r3, [sp, #40]	; 0x28
 801df10:	f7f4 fce8 	bl	80128e4 <GUI_ALLOC_LockH>
 801df14:	4607      	mov	r7, r0
 801df16:	6830      	ldr	r0, [r6, #0]
 801df18:	683a      	ldr	r2, [r7, #0]
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801df20:	6912      	ldr	r2, [r2, #16]
 801df22:	9313      	str	r3, [sp, #76]	; 0x4c
 801df24:	9114      	str	r1, [sp, #80]	; 0x50
 801df26:	693b      	ldr	r3, [r7, #16]
 801df28:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801df2c:	7c40      	ldrb	r0, [r0, #17]
 801df2e:	9309      	str	r3, [sp, #36]	; 0x24
 801df30:	9116      	str	r1, [sp, #88]	; 0x58
 801df32:	f848 7d14 	str.w	r7, [r8, #-20]!
 801df36:	6855      	ldr	r5, [r2, #4]
 801df38:	f8d7 9014 	ldr.w	r9, [r7, #20]
 801df3c:	f7fc fb5c 	bl	801a5f8 <GUI_GetBitsPerPixelEx>
 801df40:	6832      	ldr	r2, [r6, #0]
 801df42:	900e      	str	r0, [sp, #56]	; 0x38
 801df44:	7c50      	ldrb	r0, [r2, #17]
 801df46:	f7fc fb71 	bl	801a62c <GUI_GetpfIndex2ColorEx>
 801df4a:	4607      	mov	r7, r0
 801df4c:	4640      	mov	r0, r8
 801df4e:	f7f4 fcdd 	bl	801290c <GUI_ALLOC_UnlockH>
 801df52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801df54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df56:	2a08      	cmp	r2, #8
 801df58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801df5a:	f240 809d 	bls.w	801e098 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 801df5e:	2a10      	cmp	r2, #16
 801df60:	4613      	mov	r3, r2
 801df62:	910a      	str	r1, [sp, #40]	; 0x28
 801df64:	bf8c      	ite	hi
 801df66:	2304      	movhi	r3, #4
 801df68:	2302      	movls	r3, #2
 801df6a:	930c      	str	r3, [sp, #48]	; 0x30
 801df6c:	42bd      	cmp	r5, r7
 801df6e:	f000 81c1 	beq.w	801e2f4 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801df72:	6833      	ldr	r3, [r6, #0]
 801df74:	7c58      	ldrb	r0, [r3, #17]
 801df76:	f7fc fb61 	bl	801a63c <GUI_GetpfColor2IndexEx>
 801df7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801df7c:	4606      	mov	r6, r0
 801df7e:	0098      	lsls	r0, r3, #2
 801df80:	f7f4 fc98 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 801df84:	9010      	str	r0, [sp, #64]	; 0x40
 801df86:	2800      	cmp	r0, #0
 801df88:	d0b1      	beq.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801df8a:	4620      	mov	r0, r4
 801df8c:	f7ff fd4a 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 801df90:	4604      	mov	r4, r0
 801df92:	f1b9 0f00 	cmp.w	r9, #0
 801df96:	f000 8088 	beq.w	801e0aa <GUI_MEMDEV__WriteToActiveOpaque+0x25e>
 801df9a:	4648      	mov	r0, r9
 801df9c:	f7f4 fca2 	bl	80128e4 <GUI_ALLOC_LockH>
 801dfa0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dfa2:	901e      	str	r0, [sp, #120]	; 0x78
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	f340 81a1 	ble.w	801e2ec <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801dfaa:	2300      	movs	r3, #0
 801dfac:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801dfb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801dfb4:	930b      	str	r3, [sp, #44]	; 0x2c
 801dfb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dfb8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801dfbc:	18e3      	adds	r3, r4, r3
 801dfbe:	9315      	str	r3, [sp, #84]	; 0x54
 801dfc0:	ab1f      	add	r3, sp, #124	; 0x7c
 801dfc2:	4619      	mov	r1, r3
 801dfc4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dfc6:	6883      	ldr	r3, [r0, #8]
 801dfc8:	2200      	movs	r2, #0
 801dfca:	695b      	ldr	r3, [r3, #20]
 801dfcc:	921f      	str	r2, [sp, #124]	; 0x7c
 801dfce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dfd0:	4798      	blx	r3
 801dfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dfd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dfd6:	4604      	mov	r4, r0
 801dfd8:	1a9b      	subs	r3, r3, r2
 801dfda:	930e      	str	r3, [sp, #56]	; 0x38
 801dfdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dfde:	4283      	cmp	r3, r0
 801dfe0:	f000 80f6 	beq.w	801e1d0 <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 801dfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfe6:	2b01      	cmp	r3, #1
 801dfe8:	f000 8088 	beq.w	801e0fc <GUI_MEMDEV__WriteToActiveOpaque+0x2b0>
 801dfec:	2800      	cmp	r0, #0
 801dfee:	d042      	beq.n	801e076 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801dff0:	ab1c      	add	r3, sp, #112	; 0x70
 801dff2:	9311      	str	r3, [sp, #68]	; 0x44
 801dff4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801dff6:	f7f4 fc75 	bl	80128e4 <GUI_ALLOC_LockH>
 801dffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dffc:	4607      	mov	r7, r0
 801dffe:	901c      	str	r0, [sp, #112]	; 0x70
 801e000:	2b08      	cmp	r3, #8
 801e002:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e004:	d965      	bls.n	801e0d2 <GUI_MEMDEV__WriteToActiveOpaque+0x286>
 801e006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e008:	46a3      	mov	fp, r4
 801e00a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e00c:	4682      	mov	sl, r0
 801e00e:	fb02 1903 	mla	r9, r2, r3, r1
 801e012:	f839 0b02 	ldrh.w	r0, [r9], #2
 801e016:	47a8      	blx	r5
 801e018:	47b0      	blx	r6
 801e01a:	f1bb 0b01 	subs.w	fp, fp, #1
 801e01e:	f84a 0b04 	str.w	r0, [sl], #4
 801e022:	d1f6      	bne.n	801e012 <GUI_MEMDEV__WriteToActiveOpaque+0x1c6>
 801e024:	f1b8 0f1f 	cmp.w	r8, #31
 801e028:	d804      	bhi.n	801e034 <GUI_MEMDEV__WriteToActiveOpaque+0x1e8>
 801e02a:	4638      	mov	r0, r7
 801e02c:	4642      	mov	r2, r8
 801e02e:	4621      	mov	r1, r4
 801e030:	f7fa fd4a 	bl	8018ac8 <GUI__CompactPixelIndices>
 801e034:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e036:	2301      	movs	r3, #1
 801e038:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e03a:	4622      	mov	r2, r4
 801e03c:	9105      	str	r1, [sp, #20]
 801e03e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e040:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801e042:	4408      	add	r0, r1
 801e044:	2100      	movs	r1, #0
 801e046:	9301      	str	r3, [sp, #4]
 801e048:	9300      	str	r3, [sp, #0]
 801e04a:	9103      	str	r1, [sp, #12]
 801e04c:	f8cd 8008 	str.w	r8, [sp, #8]
 801e050:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e052:	9704      	str	r7, [sp, #16]
 801e054:	f7fb fd4c 	bl	8019af0 <LCD_DrawBitmap>
 801e058:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e05a:	f7f4 fc57 	bl	801290c <GUI_ALLOC_UnlockH>
 801e05e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e060:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e062:	441c      	add	r4, r3
 801e064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e066:	6883      	ldr	r3, [r0, #8]
 801e068:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e06a:	941f      	str	r4, [sp, #124]	; 0x7c
 801e06c:	695b      	ldr	r3, [r3, #20]
 801e06e:	4798      	blx	r3
 801e070:	4604      	mov	r4, r0
 801e072:	2800      	cmp	r0, #0
 801e074:	d1be      	bne.n	801dff4 <GUI_MEMDEV__WriteToActiveOpaque+0x1a8>
 801e076:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e078:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e07c:	440a      	add	r2, r1
 801e07e:	3301      	adds	r3, #1
 801e080:	9215      	str	r2, [sp, #84]	; 0x54
 801e082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e084:	930b      	str	r3, [sp, #44]	; 0x2c
 801e086:	3201      	adds	r2, #1
 801e088:	920d      	str	r2, [sp, #52]	; 0x34
 801e08a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e08c:	429a      	cmp	r2, r3
 801e08e:	f000 812d 	beq.w	801e2ec <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801e092:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e094:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e096:	e796      	b.n	801dfc6 <GUI_MEMDEV__WriteToActiveOpaque+0x17a>
 801e098:	2a01      	cmp	r2, #1
 801e09a:	d103      	bne.n	801e0a4 <GUI_MEMDEV__WriteToActiveOpaque+0x258>
 801e09c:	ab20      	add	r3, sp, #128	; 0x80
 801e09e:	920c      	str	r2, [sp, #48]	; 0x30
 801e0a0:	930a      	str	r3, [sp, #40]	; 0x28
 801e0a2:	e763      	b.n	801df6c <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801e0a4:	930c      	str	r3, [sp, #48]	; 0x30
 801e0a6:	910a      	str	r1, [sp, #40]	; 0x28
 801e0a8:	e760      	b.n	801df6c <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801e0aa:	2501      	movs	r5, #1
 801e0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e0b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e0b2:	9305      	str	r3, [sp, #20]
 801e0b4:	9004      	str	r0, [sp, #16]
 801e0b6:	4658      	mov	r0, fp
 801e0b8:	9203      	str	r2, [sp, #12]
 801e0ba:	9102      	str	r1, [sp, #8]
 801e0bc:	4651      	mov	r1, sl
 801e0be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e0c2:	9501      	str	r5, [sp, #4]
 801e0c4:	9500      	str	r5, [sp, #0]
 801e0c6:	f7fb fd13 	bl	8019af0 <LCD_DrawBitmap>
 801e0ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e0cc:	f7f4 fda2 	bl	8012c14 <GUI_ALLOC_Free>
 801e0d0:	e70d      	b.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0d4:	46a2      	mov	sl, r4
 801e0d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e0d8:	4681      	mov	r9, r0
 801e0da:	fb02 1b03 	mla	fp, r2, r3, r1
 801e0de:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e0e2:	47a8      	blx	r5
 801e0e4:	47b0      	blx	r6
 801e0e6:	f1ba 0a01 	subs.w	sl, sl, #1
 801e0ea:	f849 0b04 	str.w	r0, [r9], #4
 801e0ee:	d1f6      	bne.n	801e0de <GUI_MEMDEV__WriteToActiveOpaque+0x292>
 801e0f0:	e798      	b.n	801e024 <GUI_MEMDEV__WriteToActiveOpaque+0x1d8>
 801e0f2:	bf00      	nop
 801e0f4:	20000018 	.word	0x20000018
 801e0f8:	200467d0 	.word	0x200467d0
 801e0fc:	2800      	cmp	r0, #0
 801e0fe:	d0ba      	beq.n	801e076 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e100:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 801e104:	9619      	str	r6, [sp, #100]	; 0x64
 801e106:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e108:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e10a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e10e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801e112:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 801e116:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801e11a:	9517      	str	r5, [sp, #92]	; 0x5c
 801e11c:	9211      	str	r2, [sp, #68]	; 0x44
 801e11e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801e122:	4622      	mov	r2, r4
 801e124:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e126:	2301      	movs	r3, #1
 801e128:	f00e 0007 	and.w	r0, lr, #7
 801e12c:	4649      	mov	r1, r9
 801e12e:	9503      	str	r5, [sp, #12]
 801e130:	2501      	movs	r5, #1
 801e132:	9006      	str	r0, [sp, #24]
 801e134:	eb0a 000e 	add.w	r0, sl, lr
 801e138:	f1be 0f00 	cmp.w	lr, #0
 801e13c:	9605      	str	r6, [sp, #20]
 801e13e:	9502      	str	r5, [sp, #8]
 801e140:	bfb8      	it	lt
 801e142:	f10e 0e07 	addlt.w	lr, lr, #7
 801e146:	9501      	str	r5, [sp, #4]
 801e148:	9500      	str	r5, [sp, #0]
 801e14a:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801e14e:	f8cd e010 	str.w	lr, [sp, #16]
 801e152:	f7fb fbbf 	bl	80198d4 <LCD__DrawBitmap_1bpp>
 801e156:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e158:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e15a:	463a      	mov	r2, r7
 801e15c:	441c      	add	r4, r3
 801e15e:	4659      	mov	r1, fp
 801e160:	6883      	ldr	r3, [r0, #8]
 801e162:	941f      	str	r4, [sp, #124]	; 0x7c
 801e164:	695b      	ldr	r3, [r3, #20]
 801e166:	4798      	blx	r3
 801e168:	4604      	mov	r4, r0
 801e16a:	2800      	cmp	r0, #0
 801e16c:	d1d7      	bne.n	801e11e <GUI_MEMDEV__WriteToActiveOpaque+0x2d2>
 801e16e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801e170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e174:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801e176:	e77e      	b.n	801e076 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e17a:	fb03 f007 	mul.w	r0, r3, r7
 801e17e:	f7f4 fb99 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 801e182:	9010      	str	r0, [sp, #64]	; 0x40
 801e184:	2800      	cmp	r0, #0
 801e186:	f43f aeb2 	beq.w	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e18a:	f7f4 fbab 	bl	80128e4 <GUI_ALLOC_LockH>
 801e18e:	9020      	str	r0, [sp, #128]	; 0x80
 801e190:	4620      	mov	r0, r4
 801e192:	f7f4 fba7 	bl	80128e4 <GUI_ALLOC_LockH>
 801e196:	f100 0318 	add.w	r3, r0, #24
 801e19a:	901e      	str	r0, [sp, #120]	; 0x78
 801e19c:	930e      	str	r3, [sp, #56]	; 0x38
 801e19e:	692b      	ldr	r3, [r5, #16]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	f000 81a6 	beq.w	801e4f2 <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801e1a6:	6973      	ldr	r3, [r6, #20]
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	f000 81a2 	beq.w	801e4f2 <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801e1ae:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801e1b2:	0080      	lsls	r0, r0, #2
 801e1b4:	f7f4 fb7e 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 801e1b8:	9011      	str	r0, [sp, #68]	; 0x44
 801e1ba:	2800      	cmp	r0, #0
 801e1bc:	f040 81ba 	bne.w	801e534 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 801e1c0:	901f      	str	r0, [sp, #124]	; 0x7c
 801e1c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e1c4:	f7f4 fba2 	bl	801290c <GUI_ALLOC_UnlockH>
 801e1c8:	a820      	add	r0, sp, #128	; 0x80
 801e1ca:	f7f4 fb9f 	bl	801290c <GUI_ALLOC_UnlockH>
 801e1ce:	e77c      	b.n	801e0ca <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801e1d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e1d2:	f7f4 fb87 	bl	80128e4 <GUI_ALLOC_LockH>
 801e1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1d8:	4681      	mov	r9, r0
 801e1da:	901c      	str	r0, [sp, #112]	; 0x70
 801e1dc:	2b08      	cmp	r3, #8
 801e1de:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e1e0:	4604      	mov	r4, r0
 801e1e2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801e1e6:	d928      	bls.n	801e23a <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801e1e8:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801e1ec:	47a8      	blx	r5
 801e1ee:	47b0      	blx	r6
 801e1f0:	3f01      	subs	r7, #1
 801e1f2:	f844 0b04 	str.w	r0, [r4], #4
 801e1f6:	d1f7      	bne.n	801e1e8 <GUI_MEMDEV__WriteToActiveOpaque+0x39c>
 801e1f8:	f1b8 0f1f 	cmp.w	r8, #31
 801e1fc:	d804      	bhi.n	801e208 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801e1fe:	4648      	mov	r0, r9
 801e200:	4642      	mov	r2, r8
 801e202:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e204:	f7fa fc60 	bl	8018ac8 <GUI__CompactPixelIndices>
 801e208:	ab22      	add	r3, sp, #136	; 0x88
 801e20a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e20c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e20e:	461a      	mov	r2, r3
 801e210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e212:	9305      	str	r3, [sp, #20]
 801e214:	2300      	movs	r3, #0
 801e216:	9303      	str	r3, [sp, #12]
 801e218:	2301      	movs	r3, #1
 801e21a:	f852 ed18 	ldr.w	lr, [r2, #-24]!
 801e21e:	f8cd 8008 	str.w	r8, [sp, #8]
 801e222:	4617      	mov	r7, r2
 801e224:	9301      	str	r3, [sp, #4]
 801e226:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e228:	9300      	str	r3, [sp, #0]
 801e22a:	f8cd e010 	str.w	lr, [sp, #16]
 801e22e:	f7fb fc5f 	bl	8019af0 <LCD_DrawBitmap>
 801e232:	4638      	mov	r0, r7
 801e234:	f7f4 fb6a 	bl	801290c <GUI_ALLOC_UnlockH>
 801e238:	e71d      	b.n	801e076 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e23a:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801e23e:	47a8      	blx	r5
 801e240:	47b0      	blx	r6
 801e242:	3f01      	subs	r7, #1
 801e244:	f844 0b04 	str.w	r0, [r4], #4
 801e248:	d1f7      	bne.n	801e23a <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801e24a:	e7d5      	b.n	801e1f8 <GUI_MEMDEV__WriteToActiveOpaque+0x3ac>
 801e24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e24e:	fb07 f003 	mul.w	r0, r7, r3
 801e252:	f7f4 fb2f 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 801e256:	900e      	str	r0, [sp, #56]	; 0x38
 801e258:	2800      	cmp	r0, #0
 801e25a:	f43f ae48 	beq.w	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e25e:	f7f4 fb41 	bl	80128e4 <GUI_ALLOC_LockH>
 801e262:	9020      	str	r0, [sp, #128]	; 0x80
 801e264:	4620      	mov	r0, r4
 801e266:	f7f4 fb3d 	bl	80128e4 <GUI_ALLOC_LockH>
 801e26a:	901e      	str	r0, [sp, #120]	; 0x78
 801e26c:	692c      	ldr	r4, [r5, #16]
 801e26e:	f100 0818 	add.w	r8, r0, #24
 801e272:	2c00      	cmp	r4, #0
 801e274:	f000 80eb 	beq.w	801e44e <GUI_MEMDEV__WriteToActiveOpaque+0x602>
 801e278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e27a:	465c      	mov	r4, fp
 801e27c:	2601      	movs	r6, #1
 801e27e:	950a      	str	r5, [sp, #40]	; 0x28
 801e280:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801e284:	4693      	mov	fp, r2
 801e286:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e28a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e28e:	e017      	b.n	801e2c0 <GUI_MEMDEV__WriteToActiveOpaque+0x474>
 801e290:	2f04      	cmp	r7, #4
 801e292:	d021      	beq.n	801e2d8 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 801e294:	2f01      	cmp	r7, #1
 801e296:	d015      	beq.n	801e2c4 <GUI_MEMDEV__WriteToActiveOpaque+0x478>
 801e298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e29a:	2000      	movs	r0, #0
 801e29c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e29e:	4651      	mov	r1, sl
 801e2a0:	9302      	str	r3, [sp, #8]
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	9005      	str	r0, [sp, #20]
 801e2a6:	465a      	mov	r2, fp
 801e2a8:	9003      	str	r0, [sp, #12]
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	9601      	str	r6, [sp, #4]
 801e2ae:	449a      	add	sl, r3
 801e2b0:	9600      	str	r6, [sp, #0]
 801e2b2:	9504      	str	r5, [sp, #16]
 801e2b4:	f7fb fc1c 	bl	8019af0 <LCD_DrawBitmap>
 801e2b8:	f1b9 0901 	subs.w	r9, r9, #1
 801e2bc:	f000 80e8 	beq.w	801e490 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801e2c0:	2f02      	cmp	r7, #2
 801e2c2:	d1e5      	bne.n	801e290 <GUI_MEMDEV__WriteToActiveOpaque+0x444>
 801e2c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e2c6:	4640      	mov	r0, r8
 801e2c8:	463b      	mov	r3, r7
 801e2ca:	465a      	mov	r2, fp
 801e2cc:	44a8      	add	r8, r5
 801e2ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e2d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e2d2:	692d      	ldr	r5, [r5, #16]
 801e2d4:	47a8      	blx	r5
 801e2d6:	e7df      	b.n	801e298 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801e2d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2da:	4640      	mov	r0, r8
 801e2dc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801e2de:	465a      	mov	r2, fp
 801e2e0:	4498      	add	r8, r3
 801e2e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e2e4:	463b      	mov	r3, r7
 801e2e6:	692d      	ldr	r5, [r5, #16]
 801e2e8:	47a8      	blx	r5
 801e2ea:	e7d5      	b.n	801e298 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801e2ec:	a81e      	add	r0, sp, #120	; 0x78
 801e2ee:	f7f4 fb0d 	bl	801290c <GUI_ALLOC_UnlockH>
 801e2f2:	e6ea      	b.n	801e0ca <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801e2f4:	4620      	mov	r0, r4
 801e2f6:	f7ff fb95 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 801e2fa:	4680      	mov	r8, r0
 801e2fc:	f1b9 0f00 	cmp.w	r9, #0
 801e300:	f000 80d4 	beq.w	801e4ac <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801e304:	4648      	mov	r0, r9
 801e306:	f7f4 faed 	bl	80128e4 <GUI_ALLOC_LockH>
 801e30a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e30c:	901e      	str	r0, [sp, #120]	; 0x78
 801e30e:	2b00      	cmp	r3, #0
 801e310:	f340 80c8 	ble.w	801e4a4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801e314:	2600      	movs	r6, #0
 801e316:	ab1f      	add	r3, sp, #124	; 0x7c
 801e318:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e31c:	2501      	movs	r5, #1
 801e31e:	46b1      	mov	r9, r6
 801e320:	46da      	mov	sl, fp
 801e322:	461f      	mov	r7, r3
 801e324:	6883      	ldr	r3, [r0, #8]
 801e326:	4632      	mov	r2, r6
 801e328:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 801e32c:	4639      	mov	r1, r7
 801e32e:	695b      	ldr	r3, [r3, #20]
 801e330:	4798      	blx	r3
 801e332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e334:	4604      	mov	r4, r0
 801e336:	4283      	cmp	r3, r0
 801e338:	d031      	beq.n	801e39e <GUI_MEMDEV__WriteToActiveOpaque+0x552>
 801e33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e33c:	2b01      	cmp	r3, #1
 801e33e:	d057      	beq.n	801e3f0 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 801e340:	b320      	cbz	r0, 801e38c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801e342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e344:	960b      	str	r6, [sp, #44]	; 0x2c
 801e346:	eb03 0b06 	add.w	fp, r3, r6
 801e34a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e34c:	2301      	movs	r3, #1
 801e34e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e352:	fb01 8e00 	mla	lr, r1, r0, r8
 801e356:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e358:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e35a:	4450      	add	r0, sl
 801e35c:	9205      	str	r2, [sp, #20]
 801e35e:	4622      	mov	r2, r4
 801e360:	9103      	str	r1, [sp, #12]
 801e362:	4659      	mov	r1, fp
 801e364:	f8cd e010 	str.w	lr, [sp, #16]
 801e368:	9602      	str	r6, [sp, #8]
 801e36a:	9501      	str	r5, [sp, #4]
 801e36c:	9500      	str	r5, [sp, #0]
 801e36e:	f7fb fbbf 	bl	8019af0 <LCD_DrawBitmap>
 801e372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e374:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e376:	4639      	mov	r1, r7
 801e378:	441c      	add	r4, r3
 801e37a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e37c:	6883      	ldr	r3, [r0, #8]
 801e37e:	941f      	str	r4, [sp, #124]	; 0x7c
 801e380:	695b      	ldr	r3, [r3, #20]
 801e382:	4798      	blx	r3
 801e384:	4604      	mov	r4, r0
 801e386:	2800      	cmp	r0, #0
 801e388:	d1df      	bne.n	801e34a <GUI_MEMDEV__WriteToActiveOpaque+0x4fe>
 801e38a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e38c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e38e:	3601      	adds	r6, #1
 801e390:	4498      	add	r8, r3
 801e392:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e394:	42b3      	cmp	r3, r6
 801e396:	f340 8085 	ble.w	801e4a4 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801e39a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e39c:	e7c2      	b.n	801e324 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 801e39e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801e3a2:	46b3      	mov	fp, r6
 801e3a4:	4698      	mov	r8, r3
 801e3a6:	e000      	b.n	801e3aa <GUI_MEMDEV__WriteToActiveOpaque+0x55e>
 801e3a8:	46a3      	mov	fp, r4
 801e3aa:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e3ac:	f10b 0401 	add.w	r4, fp, #1
 801e3b0:	4639      	mov	r1, r7
 801e3b2:	6883      	ldr	r3, [r0, #8]
 801e3b4:	4622      	mov	r2, r4
 801e3b6:	695b      	ldr	r3, [r3, #20]
 801e3b8:	4798      	blx	r3
 801e3ba:	4580      	cmp	r8, r0
 801e3bc:	d0f4      	beq.n	801e3a8 <GUI_MEMDEV__WriteToActiveOpaque+0x55c>
 801e3be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3c0:	ebc6 030b 	rsb	r3, r6, fp
 801e3c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801e3c8:	4650      	mov	r0, sl
 801e3ca:	9205      	str	r2, [sp, #20]
 801e3cc:	3301      	adds	r3, #1
 801e3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e3d0:	f8cd 8010 	str.w	r8, [sp, #16]
 801e3d4:	1991      	adds	r1, r2, r6
 801e3d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e3d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e3da:	9603      	str	r6, [sp, #12]
 801e3dc:	9202      	str	r2, [sp, #8]
 801e3de:	9501      	str	r5, [sp, #4]
 801e3e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e3e2:	fb06 8803 	mla	r8, r6, r3, r8
 801e3e6:	9500      	str	r5, [sp, #0]
 801e3e8:	4626      	mov	r6, r4
 801e3ea:	f7fb fb81 	bl	8019af0 <LCD_DrawBitmap>
 801e3ee:	e7d0      	b.n	801e392 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801e3f0:	2800      	cmp	r0, #0
 801e3f2:	d0cb      	beq.n	801e38c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801e3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3f6:	960b      	str	r6, [sp, #44]	; 0x2c
 801e3f8:	eb03 0b06 	add.w	fp, r3, r6
 801e3fc:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801e400:	4622      	mov	r2, r4
 801e402:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e404:	2301      	movs	r3, #1
 801e406:	f00e 0007 	and.w	r0, lr, #7
 801e40a:	4659      	mov	r1, fp
 801e40c:	9605      	str	r6, [sp, #20]
 801e40e:	9006      	str	r0, [sp, #24]
 801e410:	eb0a 000e 	add.w	r0, sl, lr
 801e414:	f1be 0f00 	cmp.w	lr, #0
 801e418:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e41a:	9502      	str	r5, [sp, #8]
 801e41c:	bfb8      	it	lt
 801e41e:	f10e 0e07 	addlt.w	lr, lr, #7
 801e422:	9603      	str	r6, [sp, #12]
 801e424:	9501      	str	r5, [sp, #4]
 801e426:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801e42a:	9500      	str	r5, [sp, #0]
 801e42c:	f8cd e010 	str.w	lr, [sp, #16]
 801e430:	f7fb fa50 	bl	80198d4 <LCD__DrawBitmap_1bpp>
 801e434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e436:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e438:	4639      	mov	r1, r7
 801e43a:	441c      	add	r4, r3
 801e43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e43e:	6883      	ldr	r3, [r0, #8]
 801e440:	941f      	str	r4, [sp, #124]	; 0x7c
 801e442:	695b      	ldr	r3, [r3, #20]
 801e444:	4798      	blx	r3
 801e446:	4604      	mov	r4, r0
 801e448:	2800      	cmp	r0, #0
 801e44a:	d1d7      	bne.n	801e3fc <GUI_MEMDEV__WriteToActiveOpaque+0x5b0>
 801e44c:	e79d      	b.n	801e38a <GUI_MEMDEV__WriteToActiveOpaque+0x53e>
 801e44e:	46a1      	mov	r9, r4
 801e450:	2501      	movs	r5, #1
 801e452:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e454:	2301      	movs	r3, #1
 801e456:	2f02      	cmp	r7, #2
 801e458:	4651      	mov	r1, sl
 801e45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e45c:	4658      	mov	r0, fp
 801e45e:	eb0a 0e03 	add.w	lr, sl, r3
 801e462:	f000 81a9 	beq.w	801e7b8 <GUI_MEMDEV__WriteToActiveOpaque+0x96c>
 801e466:	2f04      	cmp	r7, #4
 801e468:	f000 817d 	beq.w	801e766 <GUI_MEMDEV__WriteToActiveOpaque+0x91a>
 801e46c:	429f      	cmp	r7, r3
 801e46e:	f000 8152 	beq.w	801e716 <GUI_MEMDEV__WriteToActiveOpaque+0x8ca>
 801e472:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e474:	46f2      	mov	sl, lr
 801e476:	f8cd 9014 	str.w	r9, [sp, #20]
 801e47a:	9402      	str	r4, [sp, #8]
 801e47c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e47e:	f8cd 900c 	str.w	r9, [sp, #12]
 801e482:	9501      	str	r5, [sp, #4]
 801e484:	9500      	str	r5, [sp, #0]
 801e486:	9404      	str	r4, [sp, #16]
 801e488:	f7fb fb32 	bl	8019af0 <LCD_DrawBitmap>
 801e48c:	3e01      	subs	r6, #1
 801e48e:	d1e1      	bne.n	801e454 <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 801e490:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e492:	f7f4 fa3b 	bl	801290c <GUI_ALLOC_UnlockH>
 801e496:	a820      	add	r0, sp, #128	; 0x80
 801e498:	f7f4 fa38 	bl	801290c <GUI_ALLOC_UnlockH>
 801e49c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e49e:	f7f4 fbb9 	bl	8012c14 <GUI_ALLOC_Free>
 801e4a2:	e524      	b.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e4a4:	a81e      	add	r0, sp, #120	; 0x78
 801e4a6:	f7f4 fa31 	bl	801290c <GUI_ALLOC_UnlockH>
 801e4aa:	e520      	b.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e4ac:	2401      	movs	r4, #1
 801e4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e4b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4b4:	9305      	str	r3, [sp, #20]
 801e4b6:	9004      	str	r0, [sp, #16]
 801e4b8:	4658      	mov	r0, fp
 801e4ba:	9203      	str	r2, [sp, #12]
 801e4bc:	9102      	str	r1, [sp, #8]
 801e4be:	4651      	mov	r1, sl
 801e4c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e4c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e4c4:	9401      	str	r4, [sp, #4]
 801e4c6:	9400      	str	r4, [sp, #0]
 801e4c8:	f7fb fb12 	bl	8019af0 <LCD_DrawBitmap>
 801e4cc:	e50f      	b.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4d0:	2401      	movs	r4, #1
 801e4d2:	3318      	adds	r3, #24
 801e4d4:	2500      	movs	r5, #0
 801e4d6:	9203      	str	r2, [sp, #12]
 801e4d8:	4651      	mov	r1, sl
 801e4da:	9304      	str	r3, [sp, #16]
 801e4dc:	4658      	mov	r0, fp
 801e4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4e0:	f8cd 9008 	str.w	r9, [sp, #8]
 801e4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4e6:	9505      	str	r5, [sp, #20]
 801e4e8:	9401      	str	r4, [sp, #4]
 801e4ea:	9400      	str	r4, [sp, #0]
 801e4ec:	f7fb fb00 	bl	8019af0 <LCD_DrawBitmap>
 801e4f0:	e4fd      	b.n	801deee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e4f2:	2501      	movs	r5, #1
 801e4f4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e4f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	2f02      	cmp	r7, #2
 801e4fe:	4651      	mov	r1, sl
 801e500:	464a      	mov	r2, r9
 801e502:	4658      	mov	r0, fp
 801e504:	eb0a 0e03 	add.w	lr, sl, r3
 801e508:	f000 80d4 	beq.w	801e6b4 <GUI_MEMDEV__WriteToActiveOpaque+0x868>
 801e50c:	2f04      	cmp	r7, #4
 801e50e:	f000 80a0 	beq.w	801e652 <GUI_MEMDEV__WriteToActiveOpaque+0x806>
 801e512:	429f      	cmp	r7, r3
 801e514:	d06d      	beq.n	801e5f2 <GUI_MEMDEV__WriteToActiveOpaque+0x7a6>
 801e516:	2400      	movs	r4, #0
 801e518:	9501      	str	r5, [sp, #4]
 801e51a:	9500      	str	r5, [sp, #0]
 801e51c:	46f2      	mov	sl, lr
 801e51e:	9405      	str	r4, [sp, #20]
 801e520:	9403      	str	r4, [sp, #12]
 801e522:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e524:	9402      	str	r4, [sp, #8]
 801e526:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801e528:	9404      	str	r4, [sp, #16]
 801e52a:	f7fb fae1 	bl	8019af0 <LCD_DrawBitmap>
 801e52e:	3e01      	subs	r6, #1
 801e530:	d1e3      	bne.n	801e4fa <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 801e532:	e646      	b.n	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e534:	f7f4 f9d6 	bl	80128e4 <GUI_ALLOC_LockH>
 801e538:	901f      	str	r0, [sp, #124]	; 0x7c
 801e53a:	2800      	cmp	r0, #0
 801e53c:	f43f ae41 	beq.w	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e542:	2401      	movs	r4, #1
 801e544:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801e548:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801e54c:	4690      	mov	r8, r2
 801e54e:	950c      	str	r5, [sp, #48]	; 0x30
 801e550:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801e554:	46b1      	mov	r9, r6
 801e556:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801e55a:	e017      	b.n	801e58c <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 801e55c:	2f04      	cmp	r7, #4
 801e55e:	d02e      	beq.n	801e5be <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 801e560:	2f01      	cmp	r7, #1
 801e562:	d028      	beq.n	801e5b6 <GUI_MEMDEV__WriteToActiveOpaque+0x76a>
 801e564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e566:	2000      	movs	r0, #0
 801e568:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e56a:	4651      	mov	r1, sl
 801e56c:	9302      	str	r3, [sp, #8]
 801e56e:	2301      	movs	r3, #1
 801e570:	9005      	str	r0, [sp, #20]
 801e572:	4642      	mov	r2, r8
 801e574:	9003      	str	r0, [sp, #12]
 801e576:	449a      	add	sl, r3
 801e578:	9401      	str	r4, [sp, #4]
 801e57a:	9400      	str	r4, [sp, #0]
 801e57c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e57e:	9504      	str	r5, [sp, #16]
 801e580:	f7fb fab6 	bl	8019af0 <LCD_DrawBitmap>
 801e584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e586:	3b01      	subs	r3, #1
 801e588:	9309      	str	r3, [sp, #36]	; 0x24
 801e58a:	d02b      	beq.n	801e5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 801e58c:	2f02      	cmp	r7, #2
 801e58e:	d1e5      	bne.n	801e55c <GUI_MEMDEV__WriteToActiveOpaque+0x710>
 801e590:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e592:	461e      	mov	r6, r3
 801e594:	463b      	mov	r3, r7
 801e596:	4642      	mov	r2, r8
 801e598:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e59a:	4658      	mov	r0, fp
 801e59c:	f8d9 5014 	ldr.w	r5, [r9, #20]
 801e5a0:	47a8      	blx	r5
 801e5a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e5a4:	4631      	mov	r1, r6
 801e5a6:	463b      	mov	r3, r7
 801e5a8:	44ab      	add	fp, r5
 801e5aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e5ac:	4642      	mov	r2, r8
 801e5ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e5b0:	692d      	ldr	r5, [r5, #16]
 801e5b2:	47a8      	blx	r5
 801e5b4:	e7d6      	b.n	801e564 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801e5b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e5b8:	461e      	mov	r6, r3
 801e5ba:	2302      	movs	r3, #2
 801e5bc:	e7eb      	b.n	801e596 <GUI_MEMDEV__WriteToActiveOpaque+0x74a>
 801e5be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e5c0:	4642      	mov	r2, r8
 801e5c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e5c4:	4658      	mov	r0, fp
 801e5c6:	461d      	mov	r5, r3
 801e5c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e5ca:	2302      	movs	r3, #2
 801e5cc:	44b3      	add	fp, r6
 801e5ce:	f8d9 6014 	ldr.w	r6, [r9, #20]
 801e5d2:	47b0      	blx	r6
 801e5d4:	4629      	mov	r1, r5
 801e5d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e5d8:	463b      	mov	r3, r7
 801e5da:	4642      	mov	r2, r8
 801e5dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e5de:	692d      	ldr	r5, [r5, #16]
 801e5e0:	47a8      	blx	r5
 801e5e2:	e7bf      	b.n	801e564 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801e5e4:	a81f      	add	r0, sp, #124	; 0x7c
 801e5e6:	f7f4 f991 	bl	801290c <GUI_ALLOC_UnlockH>
 801e5ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e5ec:	f7f4 fb12 	bl	8012c14 <GUI_ALLOC_Free>
 801e5f0:	e5e7      	b.n	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5f4:	4644      	mov	r4, r8
 801e5f6:	9609      	str	r6, [sp, #36]	; 0x24
 801e5f8:	005d      	lsls	r5, r3, #1
 801e5fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e5fc:	950c      	str	r5, [sp, #48]	; 0x30
 801e5fe:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e600:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e604:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e608:	f838 0b02 	ldrh.w	r0, [r8], #2
 801e60c:	47a0      	blx	r4
 801e60e:	47b0      	blx	r6
 801e610:	f1b9 0901 	subs.w	r9, r9, #1
 801e614:	f805 0b01 	strb.w	r0, [r5], #1
 801e618:	d1f6      	bne.n	801e608 <GUI_MEMDEV__WriteToActiveOpaque+0x7bc>
 801e61a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801e61c:	2301      	movs	r3, #1
 801e61e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e620:	4651      	mov	r1, sl
 801e622:	46ae      	mov	lr, r5
 801e624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e626:	9002      	str	r0, [sp, #8]
 801e628:	4658      	mov	r0, fp
 801e62a:	44ae      	add	lr, r5
 801e62c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e62e:	f8cd 9014 	str.w	r9, [sp, #20]
 801e632:	449a      	add	sl, r3
 801e634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e636:	f8cd 900c 	str.w	r9, [sp, #12]
 801e63a:	9701      	str	r7, [sp, #4]
 801e63c:	9700      	str	r7, [sp, #0]
 801e63e:	9504      	str	r5, [sp, #16]
 801e640:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801e644:	f7fb fa54 	bl	8019af0 <LCD_DrawBitmap>
 801e648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e64a:	3b01      	subs	r3, #1
 801e64c:	9309      	str	r3, [sp, #36]	; 0x24
 801e64e:	d1d6      	bne.n	801e5fe <GUI_MEMDEV__WriteToActiveOpaque+0x7b2>
 801e650:	e5b7      	b.n	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e654:	2501      	movs	r5, #1
 801e656:	9609      	str	r6, [sp, #36]	; 0x24
 801e658:	4644      	mov	r4, r8
 801e65a:	005e      	lsls	r6, r3, #1
 801e65c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e65e:	960c      	str	r6, [sp, #48]	; 0x30
 801e660:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e662:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e666:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e66a:	f838 0b02 	ldrh.w	r0, [r8], #2
 801e66e:	47a0      	blx	r4
 801e670:	47b8      	blx	r7
 801e672:	f1b9 0901 	subs.w	r9, r9, #1
 801e676:	f846 0b04 	str.w	r0, [r6], #4
 801e67a:	d1f6      	bne.n	801e66a <GUI_MEMDEV__WriteToActiveOpaque+0x81e>
 801e67c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801e67e:	2301      	movs	r3, #1
 801e680:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e682:	4651      	mov	r1, sl
 801e684:	46b6      	mov	lr, r6
 801e686:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e688:	9002      	str	r0, [sp, #8]
 801e68a:	4658      	mov	r0, fp
 801e68c:	44b6      	add	lr, r6
 801e68e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e690:	f8cd 9014 	str.w	r9, [sp, #20]
 801e694:	449a      	add	sl, r3
 801e696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e698:	f8cd 900c 	str.w	r9, [sp, #12]
 801e69c:	9501      	str	r5, [sp, #4]
 801e69e:	9500      	str	r5, [sp, #0]
 801e6a0:	9604      	str	r6, [sp, #16]
 801e6a2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801e6a6:	f7fb fa23 	bl	8019af0 <LCD_DrawBitmap>
 801e6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6ac:	3b01      	subs	r3, #1
 801e6ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e6b0:	d1d6      	bne.n	801e660 <GUI_MEMDEV__WriteToActiveOpaque+0x814>
 801e6b2:	e586      	b.n	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6b6:	2501      	movs	r5, #1
 801e6b8:	9609      	str	r6, [sp, #36]	; 0x24
 801e6ba:	4644      	mov	r4, r8
 801e6bc:	005e      	lsls	r6, r3, #1
 801e6be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e6c0:	960c      	str	r6, [sp, #48]	; 0x30
 801e6c2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e6c4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e6c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e6cc:	f838 0b02 	ldrh.w	r0, [r8], #2
 801e6d0:	47a0      	blx	r4
 801e6d2:	47b8      	blx	r7
 801e6d4:	f1b9 0901 	subs.w	r9, r9, #1
 801e6d8:	f826 0b02 	strh.w	r0, [r6], #2
 801e6dc:	d1f6      	bne.n	801e6cc <GUI_MEMDEV__WriteToActiveOpaque+0x880>
 801e6de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801e6e0:	2301      	movs	r3, #1
 801e6e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e6e4:	4651      	mov	r1, sl
 801e6e6:	46b6      	mov	lr, r6
 801e6e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e6ea:	9002      	str	r0, [sp, #8]
 801e6ec:	4658      	mov	r0, fp
 801e6ee:	44b6      	add	lr, r6
 801e6f0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e6f2:	f8cd 9014 	str.w	r9, [sp, #20]
 801e6f6:	449a      	add	sl, r3
 801e6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e6fa:	f8cd 900c 	str.w	r9, [sp, #12]
 801e6fe:	9501      	str	r5, [sp, #4]
 801e700:	9500      	str	r5, [sp, #0]
 801e702:	9604      	str	r6, [sp, #16]
 801e704:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801e708:	f7fb f9f2 	bl	8019af0 <LCD_DrawBitmap>
 801e70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e70e:	3b01      	subs	r3, #1
 801e710:	9309      	str	r3, [sp, #36]	; 0x24
 801e712:	d1d6      	bne.n	801e6c2 <GUI_MEMDEV__WriteToActiveOpaque+0x876>
 801e714:	e555      	b.n	801e1c2 <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801e716:	0095      	lsls	r5, r2, #2
 801e718:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e71a:	9609      	str	r6, [sp, #36]	; 0x24
 801e71c:	950c      	str	r5, [sp, #48]	; 0x30
 801e71e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e720:	4646      	mov	r6, r8
 801e722:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e726:	f856 0b04 	ldr.w	r0, [r6], #4
 801e72a:	47a0      	blx	r4
 801e72c:	f1b9 0901 	subs.w	r9, r9, #1
 801e730:	f805 0b01 	strb.w	r0, [r5], #1
 801e734:	d1f7      	bne.n	801e726 <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 801e736:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e738:	2301      	movs	r3, #1
 801e73a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e73c:	4651      	mov	r1, sl
 801e73e:	9002      	str	r0, [sp, #8]
 801e740:	4658      	mov	r0, fp
 801e742:	f8cd 9014 	str.w	r9, [sp, #20]
 801e746:	449a      	add	sl, r3
 801e748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e74a:	f8cd 900c 	str.w	r9, [sp, #12]
 801e74e:	9701      	str	r7, [sp, #4]
 801e750:	9700      	str	r7, [sp, #0]
 801e752:	9604      	str	r6, [sp, #16]
 801e754:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e756:	f7fb f9cb 	bl	8019af0 <LCD_DrawBitmap>
 801e75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e75c:	44a8      	add	r8, r5
 801e75e:	3b01      	subs	r3, #1
 801e760:	9309      	str	r3, [sp, #36]	; 0x24
 801e762:	d1dc      	bne.n	801e71e <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 801e764:	e694      	b.n	801e490 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801e766:	9609      	str	r6, [sp, #36]	; 0x24
 801e768:	2501      	movs	r5, #1
 801e76a:	0096      	lsls	r6, r2, #2
 801e76c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e76e:	960c      	str	r6, [sp, #48]	; 0x30
 801e770:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e772:	4647      	mov	r7, r8
 801e774:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e778:	f857 0b04 	ldr.w	r0, [r7], #4
 801e77c:	47a0      	blx	r4
 801e77e:	f1b9 0901 	subs.w	r9, r9, #1
 801e782:	f846 0b04 	str.w	r0, [r6], #4
 801e786:	d1f7      	bne.n	801e778 <GUI_MEMDEV__WriteToActiveOpaque+0x92c>
 801e788:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e78a:	2301      	movs	r3, #1
 801e78c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801e78e:	4651      	mov	r1, sl
 801e790:	9002      	str	r0, [sp, #8]
 801e792:	4658      	mov	r0, fp
 801e794:	f8cd 9014 	str.w	r9, [sp, #20]
 801e798:	449a      	add	sl, r3
 801e79a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e79c:	f8cd 900c 	str.w	r9, [sp, #12]
 801e7a0:	9501      	str	r5, [sp, #4]
 801e7a2:	9500      	str	r5, [sp, #0]
 801e7a4:	9704      	str	r7, [sp, #16]
 801e7a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e7a8:	f7fb f9a2 	bl	8019af0 <LCD_DrawBitmap>
 801e7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7ae:	44b0      	add	r8, r6
 801e7b0:	3b01      	subs	r3, #1
 801e7b2:	9309      	str	r3, [sp, #36]	; 0x24
 801e7b4:	d1dc      	bne.n	801e770 <GUI_MEMDEV__WriteToActiveOpaque+0x924>
 801e7b6:	e66b      	b.n	801e490 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801e7b8:	9609      	str	r6, [sp, #36]	; 0x24
 801e7ba:	2501      	movs	r5, #1
 801e7bc:	0096      	lsls	r6, r2, #2
 801e7be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e7c0:	960c      	str	r6, [sp, #48]	; 0x30
 801e7c2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e7c4:	4647      	mov	r7, r8
 801e7c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801e7ca:	f857 0b04 	ldr.w	r0, [r7], #4
 801e7ce:	47a0      	blx	r4
 801e7d0:	f1b9 0901 	subs.w	r9, r9, #1
 801e7d4:	f826 0b02 	strh.w	r0, [r6], #2
 801e7d8:	d1f7      	bne.n	801e7ca <GUI_MEMDEV__WriteToActiveOpaque+0x97e>
 801e7da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e7dc:	2301      	movs	r3, #1
 801e7de:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801e7e0:	4651      	mov	r1, sl
 801e7e2:	9002      	str	r0, [sp, #8]
 801e7e4:	4658      	mov	r0, fp
 801e7e6:	f8cd 9014 	str.w	r9, [sp, #20]
 801e7ea:	449a      	add	sl, r3
 801e7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e7ee:	f8cd 900c 	str.w	r9, [sp, #12]
 801e7f2:	9501      	str	r5, [sp, #4]
 801e7f4:	9500      	str	r5, [sp, #0]
 801e7f6:	9704      	str	r7, [sp, #16]
 801e7f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e7fa:	f7fb f979 	bl	8019af0 <LCD_DrawBitmap>
 801e7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e800:	44b0      	add	r8, r6
 801e802:	3b01      	subs	r3, #1
 801e804:	9309      	str	r3, [sp, #36]	; 0x24
 801e806:	d1dc      	bne.n	801e7c2 <GUI_MEMDEV__WriteToActiveOpaque+0x976>
 801e808:	e642      	b.n	801e490 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801e80a:	bf00      	nop

0801e80c <_OnExit>:
 801e80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e810:	2400      	movs	r4, #0
 801e812:	4e18      	ldr	r6, [pc, #96]	; (801e874 <_OnExit+0x68>)
 801e814:	4d18      	ldr	r5, [pc, #96]	; (801e878 <_OnExit+0x6c>)
 801e816:	2218      	movs	r2, #24
 801e818:	6034      	str	r4, [r6, #0]
 801e81a:	4621      	mov	r1, r4
 801e81c:	602c      	str	r4, [r5, #0]
 801e81e:	4f17      	ldr	r7, [pc, #92]	; (801e87c <_OnExit+0x70>)
 801e820:	4e17      	ldr	r6, [pc, #92]	; (801e880 <_OnExit+0x74>)
 801e822:	4d18      	ldr	r5, [pc, #96]	; (801e884 <_OnExit+0x78>)
 801e824:	4b18      	ldr	r3, [pc, #96]	; (801e888 <_OnExit+0x7c>)
 801e826:	603c      	str	r4, [r7, #0]
 801e828:	6034      	str	r4, [r6, #0]
 801e82a:	f103 000c 	add.w	r0, r3, #12
 801e82e:	602c      	str	r4, [r5, #0]
 801e830:	4f16      	ldr	r7, [pc, #88]	; (801e88c <_OnExit+0x80>)
 801e832:	4d17      	ldr	r5, [pc, #92]	; (801e890 <_OnExit+0x84>)
 801e834:	4e17      	ldr	r6, [pc, #92]	; (801e894 <_OnExit+0x88>)
 801e836:	603c      	str	r4, [r7, #0]
 801e838:	6034      	str	r4, [r6, #0]
 801e83a:	6074      	str	r4, [r6, #4]
 801e83c:	607c      	str	r4, [r7, #4]
 801e83e:	682e      	ldr	r6, [r5, #0]
 801e840:	701c      	strb	r4, [r3, #0]
 801e842:	605c      	str	r4, [r3, #4]
 801e844:	609c      	str	r4, [r3, #8]
 801e846:	47b0      	blx	r6
 801e848:	4b13      	ldr	r3, [pc, #76]	; (801e898 <_OnExit+0x8c>)
 801e84a:	4621      	mov	r1, r4
 801e84c:	4813      	ldr	r0, [pc, #76]	; (801e89c <_OnExit+0x90>)
 801e84e:	2210      	movs	r2, #16
 801e850:	601c      	str	r4, [r3, #0]
 801e852:	6004      	str	r4, [r0, #0]
 801e854:	605c      	str	r4, [r3, #4]
 801e856:	4812      	ldr	r0, [pc, #72]	; (801e8a0 <_OnExit+0x94>)
 801e858:	682b      	ldr	r3, [r5, #0]
 801e85a:	4798      	blx	r3
 801e85c:	682b      	ldr	r3, [r5, #0]
 801e85e:	4621      	mov	r1, r4
 801e860:	2210      	movs	r2, #16
 801e862:	4810      	ldr	r0, [pc, #64]	; (801e8a4 <_OnExit+0x98>)
 801e864:	4798      	blx	r3
 801e866:	682b      	ldr	r3, [r5, #0]
 801e868:	4621      	mov	r1, r4
 801e86a:	2210      	movs	r2, #16
 801e86c:	480e      	ldr	r0, [pc, #56]	; (801e8a8 <_OnExit+0x9c>)
 801e86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e872:	4718      	bx	r3
 801e874:	20046838 	.word	0x20046838
 801e878:	2004684c 	.word	0x2004684c
 801e87c:	200467f8 	.word	0x200467f8
 801e880:	2004682c 	.word	0x2004682c
 801e884:	2004683c 	.word	0x2004683c
 801e888:	200003e4 	.word	0x200003e4
 801e88c:	2004680c 	.word	0x2004680c
 801e890:	20000050 	.word	0x20000050
 801e894:	20046840 	.word	0x20046840
 801e898:	200467fc 	.word	0x200467fc
 801e89c:	20046808 	.word	0x20046808
 801e8a0:	20046870 	.word	0x20046870
 801e8a4:	20046860 	.word	0x20046860
 801e8a8:	20046850 	.word	0x20046850

0801e8ac <_Findy1>:
 801e8ac:	2800      	cmp	r0, #0
 801e8ae:	d063      	beq.n	801e978 <_Findy1+0xcc>
 801e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8b2:	460e      	mov	r6, r1
 801e8b4:	b085      	sub	sp, #20
 801e8b6:	4617      	mov	r7, r2
 801e8b8:	4604      	mov	r4, r0
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	f7f4 f812 	bl	80128e4 <GUI_ALLOC_LockH>
 801e8c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801e8c2:	9001      	str	r0, [sp, #4]
 801e8c4:	07a2      	lsls	r2, r4, #30
 801e8c6:	d524      	bpl.n	801e912 <_Findy1+0x66>
 801e8c8:	ad02      	add	r5, sp, #8
 801e8ca:	2f00      	cmp	r7, #0
 801e8cc:	d03f      	beq.n	801e94e <_Findy1+0xa2>
 801e8ce:	4601      	mov	r1, r0
 801e8d0:	463a      	mov	r2, r7
 801e8d2:	4628      	mov	r0, r5
 801e8d4:	f7fa fc00 	bl	80190d8 <GUI__IntersectRects>
 801e8d8:	4629      	mov	r1, r5
 801e8da:	4630      	mov	r0, r6
 801e8dc:	f7f4 ff60 	bl	80137a0 <GUI_RectsIntersect>
 801e8e0:	b368      	cbz	r0, 801e93e <_Findy1+0x92>
 801e8e2:	07e3      	lsls	r3, r4, #31
 801e8e4:	9801      	ldr	r0, [sp, #4]
 801e8e6:	d41c      	bmi.n	801e922 <_Findy1+0x76>
 801e8e8:	2f00      	cmp	r7, #0
 801e8ea:	d042      	beq.n	801e972 <_Findy1+0xc6>
 801e8ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e8f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	bfb8      	it	lt
 801e8f8:	4613      	movlt	r3, r2
 801e8fa:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 801e8fe:	4293      	cmp	r3, r2
 801e900:	dd29      	ble.n	801e956 <_Findy1+0xaa>
 801e902:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801e906:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801e90a:	429a      	cmp	r2, r3
 801e90c:	db01      	blt.n	801e912 <_Findy1+0x66>
 801e90e:	3b01      	subs	r3, #1
 801e910:	80f3      	strh	r3, [r6, #6]
 801e912:	6a04      	ldr	r4, [r0, #32]
 801e914:	a801      	add	r0, sp, #4
 801e916:	f7f3 fff9 	bl	801290c <GUI_ALLOC_UnlockH>
 801e91a:	2c00      	cmp	r4, #0
 801e91c:	d1cd      	bne.n	801e8ba <_Findy1+0xe>
 801e91e:	b005      	add	sp, #20
 801e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e922:	69c4      	ldr	r4, [r0, #28]
 801e924:	2c00      	cmp	r4, #0
 801e926:	d0f4      	beq.n	801e912 <_Findy1+0x66>
 801e928:	4620      	mov	r0, r4
 801e92a:	462a      	mov	r2, r5
 801e92c:	4631      	mov	r1, r6
 801e92e:	f7ff ffbd 	bl	801e8ac <_Findy1>
 801e932:	4620      	mov	r0, r4
 801e934:	f7f3 ffcc 	bl	80128d0 <GUI_ALLOC_h2p>
 801e938:	6a04      	ldr	r4, [r0, #32]
 801e93a:	2c00      	cmp	r4, #0
 801e93c:	d1f4      	bne.n	801e928 <_Findy1+0x7c>
 801e93e:	9801      	ldr	r0, [sp, #4]
 801e940:	6a04      	ldr	r4, [r0, #32]
 801e942:	a801      	add	r0, sp, #4
 801e944:	f7f3 ffe2 	bl	801290c <GUI_ALLOC_UnlockH>
 801e948:	2c00      	cmp	r4, #0
 801e94a:	d1b6      	bne.n	801e8ba <_Findy1+0xe>
 801e94c:	e7e7      	b.n	801e91e <_Findy1+0x72>
 801e94e:	c803      	ldmia	r0, {r0, r1}
 801e950:	e885 0003 	stmia.w	r5, {r0, r1}
 801e954:	e7c0      	b.n	801e8d8 <_Findy1+0x2c>
 801e956:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801e95a:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801e95e:	429a      	cmp	r2, r3
 801e960:	ddd7      	ble.n	801e912 <_Findy1+0x66>
 801e962:	6a04      	ldr	r4, [r0, #32]
 801e964:	a801      	add	r0, sp, #4
 801e966:	80f3      	strh	r3, [r6, #6]
 801e968:	f7f3 ffd0 	bl	801290c <GUI_ALLOC_UnlockH>
 801e96c:	2c00      	cmp	r4, #0
 801e96e:	d1a4      	bne.n	801e8ba <_Findy1+0xe>
 801e970:	e7d5      	b.n	801e91e <_Findy1+0x72>
 801e972:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e976:	e7c0      	b.n	801e8fa <_Findy1+0x4e>
 801e978:	4770      	bx	lr
 801e97a:	bf00      	nop

0801e97c <_Findx0>:
 801e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e980:	4604      	mov	r4, r0
 801e982:	b084      	sub	sp, #16
 801e984:	2800      	cmp	r0, #0
 801e986:	d049      	beq.n	801ea1c <_Findx0+0xa0>
 801e988:	460f      	mov	r7, r1
 801e98a:	4690      	mov	r8, r2
 801e98c:	2600      	movs	r6, #0
 801e98e:	e00c      	b.n	801e9aa <_Findx0+0x2e>
 801e990:	07e3      	lsls	r3, r4, #31
 801e992:	d42f      	bmi.n	801e9f4 <_Findx0+0x78>
 801e994:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e998:	2601      	movs	r6, #1
 801e99a:	9801      	ldr	r0, [sp, #4]
 801e99c:	4433      	add	r3, r6
 801e99e:	803b      	strh	r3, [r7, #0]
 801e9a0:	6a04      	ldr	r4, [r0, #32]
 801e9a2:	a801      	add	r0, sp, #4
 801e9a4:	f7f3 ffb2 	bl	801290c <GUI_ALLOC_UnlockH>
 801e9a8:	b1e4      	cbz	r4, 801e9e4 <_Findx0+0x68>
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f7f3 ff9a 	bl	80128e4 <GUI_ALLOC_LockH>
 801e9b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801e9b2:	9001      	str	r0, [sp, #4]
 801e9b4:	07a2      	lsls	r2, r4, #30
 801e9b6:	d5f3      	bpl.n	801e9a0 <_Findx0+0x24>
 801e9b8:	ad02      	add	r5, sp, #8
 801e9ba:	f1b8 0f00 	cmp.w	r8, #0
 801e9be:	d015      	beq.n	801e9ec <_Findx0+0x70>
 801e9c0:	4601      	mov	r1, r0
 801e9c2:	4642      	mov	r2, r8
 801e9c4:	4628      	mov	r0, r5
 801e9c6:	f7fa fb87 	bl	80190d8 <GUI__IntersectRects>
 801e9ca:	4629      	mov	r1, r5
 801e9cc:	4638      	mov	r0, r7
 801e9ce:	f7f4 fee7 	bl	80137a0 <GUI_RectsIntersect>
 801e9d2:	2800      	cmp	r0, #0
 801e9d4:	d1dc      	bne.n	801e990 <_Findx0+0x14>
 801e9d6:	9801      	ldr	r0, [sp, #4]
 801e9d8:	6a04      	ldr	r4, [r0, #32]
 801e9da:	a801      	add	r0, sp, #4
 801e9dc:	f7f3 ff96 	bl	801290c <GUI_ALLOC_UnlockH>
 801e9e0:	2c00      	cmp	r4, #0
 801e9e2:	d1e2      	bne.n	801e9aa <_Findx0+0x2e>
 801e9e4:	4630      	mov	r0, r6
 801e9e6:	b004      	add	sp, #16
 801e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9ec:	c803      	ldmia	r0, {r0, r1}
 801e9ee:	e885 0003 	stmia.w	r5, {r0, r1}
 801e9f2:	e7ea      	b.n	801e9ca <_Findx0+0x4e>
 801e9f4:	9801      	ldr	r0, [sp, #4]
 801e9f6:	69c4      	ldr	r4, [r0, #28]
 801e9f8:	2c00      	cmp	r4, #0
 801e9fa:	d0d1      	beq.n	801e9a0 <_Findx0+0x24>
 801e9fc:	462a      	mov	r2, r5
 801e9fe:	4639      	mov	r1, r7
 801ea00:	4620      	mov	r0, r4
 801ea02:	f7ff ffbb 	bl	801e97c <_Findx0>
 801ea06:	2800      	cmp	r0, #0
 801ea08:	4620      	mov	r0, r4
 801ea0a:	bf18      	it	ne
 801ea0c:	2601      	movne	r6, #1
 801ea0e:	f7f3 ff5f 	bl	80128d0 <GUI_ALLOC_h2p>
 801ea12:	6a04      	ldr	r4, [r0, #32]
 801ea14:	2c00      	cmp	r4, #0
 801ea16:	d1f1      	bne.n	801e9fc <_Findx0+0x80>
 801ea18:	9801      	ldr	r0, [sp, #4]
 801ea1a:	e7dd      	b.n	801e9d8 <_Findx0+0x5c>
 801ea1c:	4606      	mov	r6, r0
 801ea1e:	e7e1      	b.n	801e9e4 <_Findx0+0x68>

0801ea20 <_Findx1>:
 801ea20:	2800      	cmp	r0, #0
 801ea22:	d043      	beq.n	801eaac <_Findx1+0x8c>
 801ea24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea26:	460e      	mov	r6, r1
 801ea28:	b085      	sub	sp, #20
 801ea2a:	4617      	mov	r7, r2
 801ea2c:	4604      	mov	r4, r0
 801ea2e:	e00b      	b.n	801ea48 <_Findx1+0x28>
 801ea30:	07e3      	lsls	r3, r4, #31
 801ea32:	d42a      	bmi.n	801ea8a <_Findx1+0x6a>
 801ea34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ea38:	9801      	ldr	r0, [sp, #4]
 801ea3a:	3b01      	subs	r3, #1
 801ea3c:	80b3      	strh	r3, [r6, #4]
 801ea3e:	6a04      	ldr	r4, [r0, #32]
 801ea40:	a801      	add	r0, sp, #4
 801ea42:	f7f3 ff63 	bl	801290c <GUI_ALLOC_UnlockH>
 801ea46:	b1d4      	cbz	r4, 801ea7e <_Findx1+0x5e>
 801ea48:	4620      	mov	r0, r4
 801ea4a:	f7f3 ff4b 	bl	80128e4 <GUI_ALLOC_LockH>
 801ea4e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ea50:	9001      	str	r0, [sp, #4]
 801ea52:	07a2      	lsls	r2, r4, #30
 801ea54:	d5f3      	bpl.n	801ea3e <_Findx1+0x1e>
 801ea56:	ad02      	add	r5, sp, #8
 801ea58:	b19f      	cbz	r7, 801ea82 <_Findx1+0x62>
 801ea5a:	4601      	mov	r1, r0
 801ea5c:	463a      	mov	r2, r7
 801ea5e:	4628      	mov	r0, r5
 801ea60:	f7fa fb3a 	bl	80190d8 <GUI__IntersectRects>
 801ea64:	4629      	mov	r1, r5
 801ea66:	4630      	mov	r0, r6
 801ea68:	f7f4 fe9a 	bl	80137a0 <GUI_RectsIntersect>
 801ea6c:	2800      	cmp	r0, #0
 801ea6e:	d1df      	bne.n	801ea30 <_Findx1+0x10>
 801ea70:	9801      	ldr	r0, [sp, #4]
 801ea72:	6a04      	ldr	r4, [r0, #32]
 801ea74:	a801      	add	r0, sp, #4
 801ea76:	f7f3 ff49 	bl	801290c <GUI_ALLOC_UnlockH>
 801ea7a:	2c00      	cmp	r4, #0
 801ea7c:	d1e4      	bne.n	801ea48 <_Findx1+0x28>
 801ea7e:	b005      	add	sp, #20
 801ea80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea82:	c803      	ldmia	r0, {r0, r1}
 801ea84:	e885 0003 	stmia.w	r5, {r0, r1}
 801ea88:	e7ec      	b.n	801ea64 <_Findx1+0x44>
 801ea8a:	9801      	ldr	r0, [sp, #4]
 801ea8c:	69c4      	ldr	r4, [r0, #28]
 801ea8e:	2c00      	cmp	r4, #0
 801ea90:	d0d5      	beq.n	801ea3e <_Findx1+0x1e>
 801ea92:	4620      	mov	r0, r4
 801ea94:	462a      	mov	r2, r5
 801ea96:	4631      	mov	r1, r6
 801ea98:	f7ff ffc2 	bl	801ea20 <_Findx1>
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	f7f3 ff17 	bl	80128d0 <GUI_ALLOC_h2p>
 801eaa2:	6a04      	ldr	r4, [r0, #32]
 801eaa4:	2c00      	cmp	r4, #0
 801eaa6:	d1f4      	bne.n	801ea92 <_Findx1+0x72>
 801eaa8:	9801      	ldr	r0, [sp, #4]
 801eaaa:	e7e2      	b.n	801ea72 <_Findx1+0x52>
 801eaac:	4770      	bx	lr
 801eaae:	bf00      	nop

0801eab0 <_Paint1Trans>:
 801eab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801eab4:	4d2a      	ldr	r5, [pc, #168]	; (801eb60 <_Paint1Trans+0xb0>)
 801eab6:	b083      	sub	sp, #12
 801eab8:	4606      	mov	r6, r0
 801eaba:	682b      	ldr	r3, [r5, #0]
 801eabc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801eabe:	f7f3 ff11 	bl	80128e4 <GUI_ALLOC_LockH>
 801eac2:	9000      	str	r0, [sp, #0]
 801eac4:	4630      	mov	r0, r6
 801eac6:	f7f3 ff0d 	bl	80128e4 <GUI_ALLOC_LockH>
 801eaca:	9b00      	ldr	r3, [sp, #0]
 801eacc:	4601      	mov	r1, r0
 801eace:	9001      	str	r0, [sp, #4]
 801ead0:	f103 0008 	add.w	r0, r3, #8
 801ead4:	f7f4 fe64 	bl	80137a0 <GUI_RectsIntersect>
 801ead8:	b950      	cbnz	r0, 801eaf0 <_Paint1Trans+0x40>
 801eada:	4604      	mov	r4, r0
 801eadc:	4668      	mov	r0, sp
 801eade:	f7f3 ff15 	bl	801290c <GUI_ALLOC_UnlockH>
 801eae2:	a801      	add	r0, sp, #4
 801eae4:	f7f3 ff12 	bl	801290c <GUI_ALLOC_UnlockH>
 801eae8:	4620      	mov	r0, r4
 801eaea:	b003      	add	sp, #12
 801eaec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eaf0:	af02      	add	r7, sp, #8
 801eaf2:	9901      	ldr	r1, [sp, #4]
 801eaf4:	682b      	ldr	r3, [r5, #0]
 801eaf6:	2401      	movs	r4, #1
 801eaf8:	f857 2d08 	ldr.w	r2, [r7, #-8]!
 801eafc:	f101 0008 	add.w	r0, r1, #8
 801eb00:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801eb04:	3208      	adds	r2, #8
 801eb06:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801eb0a:	f7fa fae5 	bl	80190d8 <GUI__IntersectRects>
 801eb0e:	4638      	mov	r0, r7
 801eb10:	f7f3 fefc 	bl	801290c <GUI_ALLOC_UnlockH>
 801eb14:	a802      	add	r0, sp, #8
 801eb16:	682b      	ldr	r3, [r5, #0]
 801eb18:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801eb1c:	4f11      	ldr	r7, [pc, #68]	; (801eb64 <_Paint1Trans+0xb4>)
 801eb1e:	f9b2 1000 	ldrsh.w	r1, [r2]
 801eb22:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801eb26:	64d9      	str	r1, [r3, #76]	; 0x4c
 801eb28:	651a      	str	r2, [r3, #80]	; 0x50
 801eb2a:	603e      	str	r6, [r7, #0]
 801eb2c:	f7f3 feee 	bl	801290c <GUI_ALLOC_UnlockH>
 801eb30:	4630      	mov	r0, r6
 801eb32:	f7f3 fecd 	bl	80128d0 <GUI_ALLOC_h2p>
 801eb36:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801eb38:	4b0b      	ldr	r3, [pc, #44]	; (801eb68 <_Paint1Trans+0xb8>)
 801eb3a:	4630      	mov	r0, r6
 801eb3c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801eb40:	4a0a      	ldr	r2, [pc, #40]	; (801eb6c <_Paint1Trans+0xbc>)
 801eb42:	bf08      	it	eq
 801eb44:	4613      	moveq	r3, r2
 801eb46:	4798      	blx	r3
 801eb48:	682b      	ldr	r3, [r5, #0]
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	4620      	mov	r0, r4
 801eb4e:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 801eb52:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 801eb56:	603a      	str	r2, [r7, #0]
 801eb58:	b003      	add	sp, #12
 801eb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb5e:	bf00      	nop
 801eb60:	20000018 	.word	0x20000018
 801eb64:	200467f8 	.word	0x200467f8
 801eb68:	08023411 	.word	0x08023411
 801eb6c:	08020481 	.word	0x08020481

0801eb70 <_PaintTransChildren>:
 801eb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb74:	b082      	sub	sp, #8
 801eb76:	4606      	mov	r6, r0
 801eb78:	f7f3 feb4 	bl	80128e4 <GUI_ALLOC_LockH>
 801eb7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801eb7e:	9001      	str	r0, [sp, #4]
 801eb80:	079b      	lsls	r3, r3, #30
 801eb82:	d524      	bpl.n	801ebce <_PaintTransChildren+0x5e>
 801eb84:	69c4      	ldr	r4, [r0, #28]
 801eb86:	b314      	cbz	r4, 801ebce <_PaintTransChildren+0x5e>
 801eb88:	ad01      	add	r5, sp, #4
 801eb8a:	e004      	b.n	801eb96 <_PaintTransChildren+0x26>
 801eb8c:	6a0c      	ldr	r4, [r1, #32]
 801eb8e:	4668      	mov	r0, sp
 801eb90:	f7f3 febc 	bl	801290c <GUI_ALLOC_UnlockH>
 801eb94:	b1ac      	cbz	r4, 801ebc2 <_PaintTransChildren+0x52>
 801eb96:	4620      	mov	r0, r4
 801eb98:	f7f3 fea4 	bl	80128e4 <GUI_ALLOC_LockH>
 801eb9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801eb9e:	4601      	mov	r1, r0
 801eba0:	9000      	str	r0, [sp, #0]
 801eba2:	f003 0303 	and.w	r3, r3, #3
 801eba6:	2b03      	cmp	r3, #3
 801eba8:	d1f0      	bne.n	801eb8c <_PaintTransChildren+0x1c>
 801ebaa:	9901      	ldr	r1, [sp, #4]
 801ebac:	3108      	adds	r1, #8
 801ebae:	f7f4 fdf7 	bl	80137a0 <GUI_RectsIntersect>
 801ebb2:	b998      	cbnz	r0, 801ebdc <_PaintTransChildren+0x6c>
 801ebb4:	9900      	ldr	r1, [sp, #0]
 801ebb6:	4668      	mov	r0, sp
 801ebb8:	6a0c      	ldr	r4, [r1, #32]
 801ebba:	f7f3 fea7 	bl	801290c <GUI_ALLOC_UnlockH>
 801ebbe:	2c00      	cmp	r4, #0
 801ebc0:	d1e9      	bne.n	801eb96 <_PaintTransChildren+0x26>
 801ebc2:	4628      	mov	r0, r5
 801ebc4:	f7f3 fea2 	bl	801290c <GUI_ALLOC_UnlockH>
 801ebc8:	b002      	add	sp, #8
 801ebca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebce:	ad01      	add	r5, sp, #4
 801ebd0:	4628      	mov	r0, r5
 801ebd2:	f7f3 fe9b 	bl	801290c <GUI_ALLOC_UnlockH>
 801ebd6:	b002      	add	sp, #8
 801ebd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebdc:	9b01      	ldr	r3, [sp, #4]
 801ebde:	4628      	mov	r0, r5
 801ebe0:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 801ebe4:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 801ebe8:	f9b3 800c 	ldrsh.w	r8, [r3, #12]
 801ebec:	f9b3 700e 	ldrsh.w	r7, [r3, #14]
 801ebf0:	f7f3 fe8c 	bl	801290c <GUI_ALLOC_UnlockH>
 801ebf4:	4668      	mov	r0, sp
 801ebf6:	f7f3 fe89 	bl	801290c <GUI_ALLOC_UnlockH>
 801ebfa:	4620      	mov	r0, r4
 801ebfc:	f7ff ff58 	bl	801eab0 <_Paint1Trans>
 801ec00:	b988      	cbnz	r0, 801ec26 <_PaintTransChildren+0xb6>
 801ec02:	4630      	mov	r0, r6
 801ec04:	f7f3 fe6e 	bl	80128e4 <GUI_ALLOC_LockH>
 801ec08:	9001      	str	r0, [sp, #4]
 801ec0a:	4620      	mov	r0, r4
 801ec0c:	f7f3 fe6a 	bl	80128e4 <GUI_ALLOC_LockH>
 801ec10:	9b01      	ldr	r3, [sp, #4]
 801ec12:	9000      	str	r0, [sp, #0]
 801ec14:	4601      	mov	r1, r0
 801ec16:	f8a3 a008 	strh.w	sl, [r3, #8]
 801ec1a:	f8a3 900a 	strh.w	r9, [r3, #10]
 801ec1e:	f8a3 800c 	strh.w	r8, [r3, #12]
 801ec22:	81df      	strh	r7, [r3, #14]
 801ec24:	e7b2      	b.n	801eb8c <_PaintTransChildren+0x1c>
 801ec26:	4620      	mov	r0, r4
 801ec28:	f7f3 fe52 	bl	80128d0 <GUI_ALLOC_h2p>
 801ec2c:	9000      	str	r0, [sp, #0]
 801ec2e:	4620      	mov	r0, r4
 801ec30:	f7ff ff9e 	bl	801eb70 <_PaintTransChildren>
 801ec34:	4620      	mov	r0, r4
 801ec36:	f7f3 fe4b 	bl	80128d0 <GUI_ALLOC_h2p>
 801ec3a:	9000      	str	r0, [sp, #0]
 801ec3c:	4630      	mov	r0, r6
 801ec3e:	f7f3 fe47 	bl	80128d0 <GUI_ALLOC_h2p>
 801ec42:	9001      	str	r0, [sp, #4]
 801ec44:	e7dd      	b.n	801ec02 <_PaintTransChildren+0x92>
 801ec46:	bf00      	nop

0801ec48 <_Findx0.constprop.10>:
 801ec48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec4a:	4604      	mov	r4, r0
 801ec4c:	b085      	sub	sp, #20
 801ec4e:	2800      	cmp	r0, #0
 801ec50:	d03e      	beq.n	801ecd0 <_Findx0.constprop.10+0x88>
 801ec52:	460f      	mov	r7, r1
 801ec54:	2600      	movs	r6, #0
 801ec56:	ad02      	add	r5, sp, #8
 801ec58:	e00c      	b.n	801ec74 <_Findx0.constprop.10+0x2c>
 801ec5a:	07e3      	lsls	r3, r4, #31
 801ec5c:	d424      	bmi.n	801eca8 <_Findx0.constprop.10+0x60>
 801ec5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ec62:	2601      	movs	r6, #1
 801ec64:	9801      	ldr	r0, [sp, #4]
 801ec66:	4433      	add	r3, r6
 801ec68:	803b      	strh	r3, [r7, #0]
 801ec6a:	6a04      	ldr	r4, [r0, #32]
 801ec6c:	a801      	add	r0, sp, #4
 801ec6e:	f7f3 fe4d 	bl	801290c <GUI_ALLOC_UnlockH>
 801ec72:	b1b4      	cbz	r4, 801eca2 <_Findx0.constprop.10+0x5a>
 801ec74:	4620      	mov	r0, r4
 801ec76:	f7f3 fe35 	bl	80128e4 <GUI_ALLOC_LockH>
 801ec7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ec7c:	9001      	str	r0, [sp, #4]
 801ec7e:	07a2      	lsls	r2, r4, #30
 801ec80:	d5f3      	bpl.n	801ec6a <_Findx0.constprop.10+0x22>
 801ec82:	c803      	ldmia	r0, {r0, r1}
 801ec84:	e885 0003 	stmia.w	r5, {r0, r1}
 801ec88:	4629      	mov	r1, r5
 801ec8a:	4638      	mov	r0, r7
 801ec8c:	f7f4 fd88 	bl	80137a0 <GUI_RectsIntersect>
 801ec90:	2800      	cmp	r0, #0
 801ec92:	d1e2      	bne.n	801ec5a <_Findx0.constprop.10+0x12>
 801ec94:	9801      	ldr	r0, [sp, #4]
 801ec96:	6a04      	ldr	r4, [r0, #32]
 801ec98:	a801      	add	r0, sp, #4
 801ec9a:	f7f3 fe37 	bl	801290c <GUI_ALLOC_UnlockH>
 801ec9e:	2c00      	cmp	r4, #0
 801eca0:	d1e8      	bne.n	801ec74 <_Findx0.constprop.10+0x2c>
 801eca2:	4630      	mov	r0, r6
 801eca4:	b005      	add	sp, #20
 801eca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eca8:	9801      	ldr	r0, [sp, #4]
 801ecaa:	69c4      	ldr	r4, [r0, #28]
 801ecac:	2c00      	cmp	r4, #0
 801ecae:	d0dc      	beq.n	801ec6a <_Findx0.constprop.10+0x22>
 801ecb0:	462a      	mov	r2, r5
 801ecb2:	4639      	mov	r1, r7
 801ecb4:	4620      	mov	r0, r4
 801ecb6:	f7ff fe61 	bl	801e97c <_Findx0>
 801ecba:	2800      	cmp	r0, #0
 801ecbc:	4620      	mov	r0, r4
 801ecbe:	bf18      	it	ne
 801ecc0:	2601      	movne	r6, #1
 801ecc2:	f7f3 fe05 	bl	80128d0 <GUI_ALLOC_h2p>
 801ecc6:	6a04      	ldr	r4, [r0, #32]
 801ecc8:	2c00      	cmp	r4, #0
 801ecca:	d1f1      	bne.n	801ecb0 <_Findx0.constprop.10+0x68>
 801eccc:	9801      	ldr	r0, [sp, #4]
 801ecce:	e7e2      	b.n	801ec96 <_Findx0.constprop.10+0x4e>
 801ecd0:	4606      	mov	r6, r0
 801ecd2:	e7e6      	b.n	801eca2 <_Findx0.constprop.10+0x5a>

0801ecd4 <_Findy1.constprop.11>:
 801ecd4:	2800      	cmp	r0, #0
 801ecd6:	d050      	beq.n	801ed7a <_Findy1.constprop.11+0xa6>
 801ecd8:	b570      	push	{r4, r5, r6, lr}
 801ecda:	b084      	sub	sp, #16
 801ecdc:	460e      	mov	r6, r1
 801ecde:	4604      	mov	r4, r0
 801ece0:	ad02      	add	r5, sp, #8
 801ece2:	4620      	mov	r0, r4
 801ece4:	f7f3 fdfe 	bl	80128e4 <GUI_ALLOC_LockH>
 801ece8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801ecea:	9001      	str	r0, [sp, #4]
 801ecec:	07a2      	lsls	r2, r4, #30
 801ecee:	d518      	bpl.n	801ed22 <_Findy1.constprop.11+0x4e>
 801ecf0:	c803      	ldmia	r0, {r0, r1}
 801ecf2:	e885 0003 	stmia.w	r5, {r0, r1}
 801ecf6:	4629      	mov	r1, r5
 801ecf8:	4630      	mov	r0, r6
 801ecfa:	f7f4 fd51 	bl	80137a0 <GUI_RectsIntersect>
 801ecfe:	b330      	cbz	r0, 801ed4e <_Findy1.constprop.11+0x7a>
 801ed00:	07e3      	lsls	r3, r4, #31
 801ed02:	9801      	ldr	r0, [sp, #4]
 801ed04:	d415      	bmi.n	801ed32 <_Findy1.constprop.11+0x5e>
 801ed06:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801ed0a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ed0e:	429a      	cmp	r2, r3
 801ed10:	dd25      	ble.n	801ed5e <_Findy1.constprop.11+0x8a>
 801ed12:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801ed16:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801ed1a:	429a      	cmp	r2, r3
 801ed1c:	db01      	blt.n	801ed22 <_Findy1.constprop.11+0x4e>
 801ed1e:	3b01      	subs	r3, #1
 801ed20:	80f3      	strh	r3, [r6, #6]
 801ed22:	6a04      	ldr	r4, [r0, #32]
 801ed24:	a801      	add	r0, sp, #4
 801ed26:	f7f3 fdf1 	bl	801290c <GUI_ALLOC_UnlockH>
 801ed2a:	2c00      	cmp	r4, #0
 801ed2c:	d1d9      	bne.n	801ece2 <_Findy1.constprop.11+0xe>
 801ed2e:	b004      	add	sp, #16
 801ed30:	bd70      	pop	{r4, r5, r6, pc}
 801ed32:	69c4      	ldr	r4, [r0, #28]
 801ed34:	2c00      	cmp	r4, #0
 801ed36:	d0f4      	beq.n	801ed22 <_Findy1.constprop.11+0x4e>
 801ed38:	4620      	mov	r0, r4
 801ed3a:	462a      	mov	r2, r5
 801ed3c:	4631      	mov	r1, r6
 801ed3e:	f7ff fdb5 	bl	801e8ac <_Findy1>
 801ed42:	4620      	mov	r0, r4
 801ed44:	f7f3 fdc4 	bl	80128d0 <GUI_ALLOC_h2p>
 801ed48:	6a04      	ldr	r4, [r0, #32]
 801ed4a:	2c00      	cmp	r4, #0
 801ed4c:	d1f4      	bne.n	801ed38 <_Findy1.constprop.11+0x64>
 801ed4e:	9801      	ldr	r0, [sp, #4]
 801ed50:	6a04      	ldr	r4, [r0, #32]
 801ed52:	a801      	add	r0, sp, #4
 801ed54:	f7f3 fdda 	bl	801290c <GUI_ALLOC_UnlockH>
 801ed58:	2c00      	cmp	r4, #0
 801ed5a:	d1c2      	bne.n	801ece2 <_Findy1.constprop.11+0xe>
 801ed5c:	e7e7      	b.n	801ed2e <_Findy1.constprop.11+0x5a>
 801ed5e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ed62:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801ed66:	429a      	cmp	r2, r3
 801ed68:	dddb      	ble.n	801ed22 <_Findy1.constprop.11+0x4e>
 801ed6a:	6a04      	ldr	r4, [r0, #32]
 801ed6c:	a801      	add	r0, sp, #4
 801ed6e:	80f3      	strh	r3, [r6, #6]
 801ed70:	f7f3 fdcc 	bl	801290c <GUI_ALLOC_UnlockH>
 801ed74:	2c00      	cmp	r4, #0
 801ed76:	d1b4      	bne.n	801ece2 <_Findy1.constprop.11+0xe>
 801ed78:	e7d9      	b.n	801ed2e <_Findy1.constprop.11+0x5a>
 801ed7a:	4770      	bx	lr

0801ed7c <WM__PaintWinAndOverlays>:
 801ed7c:	b530      	push	{r4, r5, lr}
 801ed7e:	b083      	sub	sp, #12
 801ed80:	4604      	mov	r4, r0
 801ed82:	f7f3 fdaf 	bl	80128e4 <GUI_ALLOC_LockH>
 801ed86:	f640 0301 	movw	r3, #2049	; 0x801
 801ed8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801ed8c:	9001      	str	r0, [sp, #4]
 801ed8e:	4013      	ands	r3, r2
 801ed90:	2b01      	cmp	r3, #1
 801ed92:	d00e      	beq.n	801edb2 <WM__PaintWinAndOverlays+0x36>
 801ed94:	a801      	add	r0, sp, #4
 801ed96:	f7f3 fdb9 	bl	801290c <GUI_ALLOC_UnlockH>
 801ed9a:	4620      	mov	r0, r4
 801ed9c:	f7f3 fd98 	bl	80128d0 <GUI_ALLOC_h2p>
 801eda0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801eda2:	4b1b      	ldr	r3, [pc, #108]	; (801ee10 <WM__PaintWinAndOverlays+0x94>)
 801eda4:	4620      	mov	r0, r4
 801eda6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801edaa:	4a1a      	ldr	r2, [pc, #104]	; (801ee14 <WM__PaintWinAndOverlays+0x98>)
 801edac:	bf08      	it	eq
 801edae:	4613      	moveq	r3, r2
 801edb0:	4798      	blx	r3
 801edb2:	4b19      	ldr	r3, [pc, #100]	; (801ee18 <WM__PaintWinAndOverlays+0x9c>)
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	b90b      	cbnz	r3, 801edbc <WM__PaintWinAndOverlays+0x40>
 801edb8:	b003      	add	sp, #12
 801edba:	bd30      	pop	{r4, r5, pc}
 801edbc:	4620      	mov	r0, r4
 801edbe:	f7ff fed7 	bl	801eb70 <_PaintTransChildren>
 801edc2:	4620      	mov	r0, r4
 801edc4:	f7f3 fd84 	bl	80128d0 <GUI_ALLOC_h2p>
 801edc8:	6985      	ldr	r5, [r0, #24]
 801edca:	6a04      	ldr	r4, [r0, #32]
 801edcc:	2d00      	cmp	r5, #0
 801edce:	d0f3      	beq.n	801edb8 <WM__PaintWinAndOverlays+0x3c>
 801edd0:	b184      	cbz	r4, 801edf4 <WM__PaintWinAndOverlays+0x78>
 801edd2:	4620      	mov	r0, r4
 801edd4:	f7f3 fd7c 	bl	80128d0 <GUI_ALLOC_h2p>
 801edd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801edda:	f003 0303 	and.w	r3, r3, #3
 801edde:	2b03      	cmp	r3, #3
 801ede0:	d011      	beq.n	801ee06 <WM__PaintWinAndOverlays+0x8a>
 801ede2:	4620      	mov	r0, r4
 801ede4:	f7ff fec4 	bl	801eb70 <_PaintTransChildren>
 801ede8:	4620      	mov	r0, r4
 801edea:	f7f3 fd71 	bl	80128d0 <GUI_ALLOC_h2p>
 801edee:	6a04      	ldr	r4, [r0, #32]
 801edf0:	2c00      	cmp	r4, #0
 801edf2:	d1ee      	bne.n	801edd2 <WM__PaintWinAndOverlays+0x56>
 801edf4:	4628      	mov	r0, r5
 801edf6:	f7f3 fd6b 	bl	80128d0 <GUI_ALLOC_h2p>
 801edfa:	6985      	ldr	r5, [r0, #24]
 801edfc:	6a04      	ldr	r4, [r0, #32]
 801edfe:	2d00      	cmp	r5, #0
 801ee00:	d1e6      	bne.n	801edd0 <WM__PaintWinAndOverlays+0x54>
 801ee02:	b003      	add	sp, #12
 801ee04:	bd30      	pop	{r4, r5, pc}
 801ee06:	4620      	mov	r0, r4
 801ee08:	f7ff fe52 	bl	801eab0 <_Paint1Trans>
 801ee0c:	e7e9      	b.n	801ede2 <WM__PaintWinAndOverlays+0x66>
 801ee0e:	bf00      	nop
 801ee10:	08023411 	.word	0x08023411
 801ee14:	08020481 	.word	0x08020481
 801ee18:	2004684c 	.word	0x2004684c

0801ee1c <_cbPaintMemDev>:
 801ee1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee20:	4d19      	ldr	r5, [pc, #100]	; (801ee88 <_cbPaintMemDev+0x6c>)
 801ee22:	b082      	sub	sp, #8
 801ee24:	4682      	mov	sl, r0
 801ee26:	682b      	ldr	r3, [r5, #0]
 801ee28:	ac02      	add	r4, sp, #8
 801ee2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801ee2c:	f7f3 fd5a 	bl	80128e4 <GUI_ALLOC_LockH>
 801ee30:	682b      	ldr	r3, [r5, #0]
 801ee32:	f100 0208 	add.w	r2, r0, #8
 801ee36:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801ee3a:	3308      	adds	r3, #8
 801ee3c:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 801ee40:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801ee44:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 801ee48:	f844 0d04 	str.w	r0, [r4, #-4]!
 801ee4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ee50:	e882 0003 	stmia.w	r2, {r0, r1}
 801ee54:	4620      	mov	r0, r4
 801ee56:	f7f3 fd59 	bl	801290c <GUI_ALLOC_UnlockH>
 801ee5a:	f8da 0000 	ldr.w	r0, [sl]
 801ee5e:	f7ff ff8d 	bl	801ed7c <WM__PaintWinAndOverlays>
 801ee62:	682b      	ldr	r3, [r5, #0]
 801ee64:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801ee66:	f7f3 fd3d 	bl	80128e4 <GUI_ALLOC_LockH>
 801ee6a:	4603      	mov	r3, r0
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	f8a3 9008 	strh.w	r9, [r3, #8]
 801ee72:	f8a3 800a 	strh.w	r8, [r3, #10]
 801ee76:	819f      	strh	r7, [r3, #12]
 801ee78:	81de      	strh	r6, [r3, #14]
 801ee7a:	9301      	str	r3, [sp, #4]
 801ee7c:	f7f3 fd46 	bl	801290c <GUI_ALLOC_UnlockH>
 801ee80:	b002      	add	sp, #8
 801ee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee86:	bf00      	nop
 801ee88:	20000018 	.word	0x20000018

0801ee8c <_Invalidate1Abs>:
 801ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee8e:	b085      	sub	sp, #20
 801ee90:	4616      	mov	r6, r2
 801ee92:	460c      	mov	r4, r1
 801ee94:	4605      	mov	r5, r0
 801ee96:	f7f3 fd1b 	bl	80128d0 <GUI_ALLOC_h2p>
 801ee9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ee9c:	9001      	str	r0, [sp, #4]
 801ee9e:	079a      	lsls	r2, r3, #30
 801eea0:	d505      	bpl.n	801eeae <_Invalidate1Abs+0x22>
 801eea2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801eea6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eeaa:	4291      	cmp	r1, r2
 801eeac:	da01      	bge.n	801eeb2 <_Invalidate1Abs+0x26>
 801eeae:	b005      	add	sp, #20
 801eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeb2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801eeb6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801eeba:	4291      	cmp	r1, r2
 801eebc:	dcf7      	bgt.n	801eeae <_Invalidate1Abs+0x22>
 801eebe:	f640 0201 	movw	r2, #2049	; 0x801
 801eec2:	401a      	ands	r2, r3
 801eec4:	2a01      	cmp	r2, #1
 801eec6:	d0f2      	beq.n	801eeae <_Invalidate1Abs+0x22>
 801eec8:	4628      	mov	r0, r5
 801eeca:	af02      	add	r7, sp, #8
 801eecc:	f7f3 fd0a 	bl	80128e4 <GUI_ALLOC_LockH>
 801eed0:	4603      	mov	r3, r0
 801eed2:	4621      	mov	r1, r4
 801eed4:	4638      	mov	r0, r7
 801eed6:	461a      	mov	r2, r3
 801eed8:	9301      	str	r3, [sp, #4]
 801eeda:	f7fa f8fd 	bl	80190d8 <GUI__IntersectRects>
 801eede:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801eee2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801eee6:	429a      	cmp	r2, r3
 801eee8:	dc2e      	bgt.n	801ef48 <_Invalidate1Abs+0xbc>
 801eeea:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801eeee:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801eef2:	429a      	cmp	r2, r3
 801eef4:	dc28      	bgt.n	801ef48 <_Invalidate1Abs+0xbc>
 801eef6:	9a01      	ldr	r2, [sp, #4]
 801eef8:	f244 0320 	movw	r3, #16416	; 0x4020
 801eefc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801eefe:	400b      	ands	r3, r1
 801ef00:	bb3b      	cbnz	r3, 801ef52 <_Invalidate1Abs+0xc6>
 801ef02:	4c18      	ldr	r4, [pc, #96]	; (801ef64 <_Invalidate1Abs+0xd8>)
 801ef04:	430e      	orrs	r6, r1
 801ef06:	f102 0e08 	add.w	lr, r2, #8
 801ef0a:	8823      	ldrh	r3, [r4, #0]
 801ef0c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ef10:	3301      	adds	r3, #1
 801ef12:	e88e 0003 	stmia.w	lr, {r0, r1}
 801ef16:	8023      	strh	r3, [r4, #0]
 801ef18:	6296      	str	r6, [r2, #40]	; 0x28
 801ef1a:	e000      	b.n	801ef1e <_Invalidate1Abs+0x92>
 801ef1c:	461d      	mov	r5, r3
 801ef1e:	4628      	mov	r0, r5
 801ef20:	f7f3 fcd6 	bl	80128d0 <GUI_ALLOC_h2p>
 801ef24:	6983      	ldr	r3, [r0, #24]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d1f8      	bne.n	801ef1c <_Invalidate1Abs+0x90>
 801ef2a:	4b0f      	ldr	r3, [pc, #60]	; (801ef68 <_Invalidate1Abs+0xdc>)
 801ef2c:	681a      	ldr	r2, [r3, #0]
 801ef2e:	4295      	cmp	r5, r2
 801ef30:	d016      	beq.n	801ef60 <_Invalidate1Abs+0xd4>
 801ef32:	685b      	ldr	r3, [r3, #4]
 801ef34:	42ab      	cmp	r3, r5
 801ef36:	bf0c      	ite	eq
 801ef38:	2302      	moveq	r3, #2
 801ef3a:	2300      	movne	r3, #0
 801ef3c:	4a0b      	ldr	r2, [pc, #44]	; (801ef6c <_Invalidate1Abs+0xe0>)
 801ef3e:	6811      	ldr	r1, [r2, #0]
 801ef40:	430b      	orrs	r3, r1
 801ef42:	6013      	str	r3, [r2, #0]
 801ef44:	f7f9 fb8e 	bl	8018664 <GUI_SignalEvent>
 801ef48:	a801      	add	r0, sp, #4
 801ef4a:	f7f3 fcdf 	bl	801290c <GUI_ALLOC_UnlockH>
 801ef4e:	b005      	add	sp, #20
 801ef50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef52:	f102 0108 	add.w	r1, r2, #8
 801ef56:	463a      	mov	r2, r7
 801ef58:	4608      	mov	r0, r1
 801ef5a:	f7f4 fb19 	bl	8013590 <GUI_MergeRect>
 801ef5e:	e7f3      	b.n	801ef48 <_Invalidate1Abs+0xbc>
 801ef60:	2301      	movs	r3, #1
 801ef62:	e7eb      	b.n	801ef3c <_Invalidate1Abs+0xb0>
 801ef64:	20046814 	.word	0x20046814
 801ef68:	200467fc 	.word	0x200467fc
 801ef6c:	20046824 	.word	0x20046824

0801ef70 <WM__ActivateClipRect>:
 801ef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef74:	4f45      	ldr	r7, [pc, #276]	; (801f08c <WM__ActivateClipRect+0x11c>)
 801ef76:	b086      	sub	sp, #24
 801ef78:	683b      	ldr	r3, [r7, #0]
 801ef7a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801ef7e:	2a00      	cmp	r2, #0
 801ef80:	d139      	bne.n	801eff6 <WM__ActivateClipRect+0x86>
 801ef82:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801ef84:	ae02      	add	r6, sp, #8
 801ef86:	f7f3 fcad 	bl	80128e4 <GUI_ALLOC_LockH>
 801ef8a:	9000      	str	r0, [sp, #0]
 801ef8c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801f090 <WM__ActivateClipRect+0x120>
 801ef90:	c803      	ldmia	r0, {r0, r1}
 801ef92:	e886 0003 	stmia.w	r6, {r0, r1}
 801ef96:	4668      	mov	r0, sp
 801ef98:	f7f3 fcb8 	bl	801290c <GUI_ALLOC_UnlockH>
 801ef9c:	f8d8 4000 	ldr.w	r4, [r8]
 801efa0:	2c00      	cmp	r4, #0
 801efa2:	d150      	bne.n	801f046 <WM__ActivateClipRect+0xd6>
 801efa4:	683f      	ldr	r7, [r7, #0]
 801efa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801efa8:	2a00      	cmp	r2, #0
 801efaa:	d067      	beq.n	801f07c <WM__ActivateClipRect+0x10c>
 801efac:	ad04      	add	r5, sp, #16
 801efae:	6810      	ldr	r0, [r2, #0]
 801efb0:	6851      	ldr	r1, [r2, #4]
 801efb2:	462b      	mov	r3, r5
 801efb4:	f8d8 4000 	ldr.w	r4, [r8]
 801efb8:	c303      	stmia	r3!, {r0, r1}
 801efba:	b1d4      	cbz	r4, 801eff2 <WM__ActivateClipRect+0x82>
 801efbc:	4620      	mov	r0, r4
 801efbe:	ac06      	add	r4, sp, #24
 801efc0:	f7f3 fc90 	bl	80128e4 <GUI_ALLOC_LockH>
 801efc4:	4603      	mov	r3, r0
 801efc6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801efca:	4628      	mov	r0, r5
 801efcc:	f9b3 1000 	ldrsh.w	r1, [r3]
 801efd0:	f844 3d14 	str.w	r3, [r4, #-20]!
 801efd4:	f7f4 fb0a 	bl	80135ec <GUI_MoveRect>
 801efd8:	4620      	mov	r0, r4
 801efda:	f7f3 fc97 	bl	801290c <GUI_ALLOC_UnlockH>
 801efde:	4628      	mov	r0, r5
 801efe0:	4631      	mov	r1, r6
 801efe2:	f7fa f85b 	bl	801909c <GUI__IntersectRect>
 801efe6:	4628      	mov	r0, r5
 801efe8:	f004 f9f8 	bl	80233dc <LCD_SetClipRectEx>
 801efec:	b006      	add	sp, #24
 801efee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eff2:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801eff4:	e7e2      	b.n	801efbc <WM__ActivateClipRect+0x4c>
 801eff6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801eff8:	2900      	cmp	r1, #0
 801effa:	d043      	beq.n	801f084 <WM__ActivateClipRect+0x114>
 801effc:	ad04      	add	r5, sp, #16
 801effe:	4c24      	ldr	r4, [pc, #144]	; (801f090 <WM__ActivateClipRect+0x120>)
 801f000:	6808      	ldr	r0, [r1, #0]
 801f002:	462a      	mov	r2, r5
 801f004:	6849      	ldr	r1, [r1, #4]
 801f006:	6824      	ldr	r4, [r4, #0]
 801f008:	c203      	stmia	r2!, {r0, r1}
 801f00a:	b1d4      	cbz	r4, 801f042 <WM__ActivateClipRect+0xd2>
 801f00c:	4620      	mov	r0, r4
 801f00e:	ac06      	add	r4, sp, #24
 801f010:	f7f3 fc68 	bl	80128e4 <GUI_ALLOC_LockH>
 801f014:	4603      	mov	r3, r0
 801f016:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f01a:	4628      	mov	r0, r5
 801f01c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f020:	f844 3d10 	str.w	r3, [r4, #-16]!
 801f024:	f7f4 fae2 	bl	80135ec <GUI_MoveRect>
 801f028:	4620      	mov	r0, r4
 801f02a:	f7f3 fc6f 	bl	801290c <GUI_ALLOC_UnlockH>
 801f02e:	4919      	ldr	r1, [pc, #100]	; (801f094 <WM__ActivateClipRect+0x124>)
 801f030:	4628      	mov	r0, r5
 801f032:	f7fa f833 	bl	801909c <GUI__IntersectRect>
 801f036:	4628      	mov	r0, r5
 801f038:	f004 f9d0 	bl	80233dc <LCD_SetClipRectEx>
 801f03c:	b006      	add	sp, #24
 801f03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f042:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801f044:	e7e2      	b.n	801f00c <WM__ActivateClipRect+0x9c>
 801f046:	ad04      	add	r5, sp, #16
 801f048:	e007      	b.n	801f05a <WM__ActivateClipRect+0xea>
 801f04a:	f7fa f827 	bl	801909c <GUI__IntersectRect>
 801f04e:	9b04      	ldr	r3, [sp, #16]
 801f050:	4628      	mov	r0, r5
 801f052:	699c      	ldr	r4, [r3, #24]
 801f054:	b17c      	cbz	r4, 801f076 <WM__ActivateClipRect+0x106>
 801f056:	f7f3 fc59 	bl	801290c <GUI_ALLOC_UnlockH>
 801f05a:	4620      	mov	r0, r4
 801f05c:	f7f3 fc42 	bl	80128e4 <GUI_ALLOC_LockH>
 801f060:	4603      	mov	r3, r0
 801f062:	4630      	mov	r0, r6
 801f064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f066:	4619      	mov	r1, r3
 801f068:	9304      	str	r3, [sp, #16]
 801f06a:	0793      	lsls	r3, r2, #30
 801f06c:	d4ed      	bmi.n	801f04a <WM__ActivateClipRect+0xda>
 801f06e:	4628      	mov	r0, r5
 801f070:	f7f3 fc4c 	bl	801290c <GUI_ALLOC_UnlockH>
 801f074:	e796      	b.n	801efa4 <WM__ActivateClipRect+0x34>
 801f076:	f7f3 fc49 	bl	801290c <GUI_ALLOC_UnlockH>
 801f07a:	e793      	b.n	801efa4 <WM__ActivateClipRect+0x34>
 801f07c:	4630      	mov	r0, r6
 801f07e:	f004 f9ad 	bl	80233dc <LCD_SetClipRectEx>
 801f082:	e7b3      	b.n	801efec <WM__ActivateClipRect+0x7c>
 801f084:	4803      	ldr	r0, [pc, #12]	; (801f094 <WM__ActivateClipRect+0x124>)
 801f086:	f004 f9a9 	bl	80233dc <LCD_SetClipRectEx>
 801f08a:	e7af      	b.n	801efec <WM__ActivateClipRect+0x7c>
 801f08c:	20000018 	.word	0x20000018
 801f090:	200467f8 	.word	0x200467f8
 801f094:	200003f8 	.word	0x200003f8

0801f098 <WM__InsertWindowIntoList>:
 801f098:	b901      	cbnz	r1, 801f09c <WM__InsertWindowIntoList+0x4>
 801f09a:	4770      	bx	lr
 801f09c:	b570      	push	{r4, r5, r6, lr}
 801f09e:	b084      	sub	sp, #16
 801f0a0:	460c      	mov	r4, r1
 801f0a2:	4605      	mov	r5, r0
 801f0a4:	f7f3 fc1e 	bl	80128e4 <GUI_ALLOC_LockH>
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	4620      	mov	r0, r4
 801f0ae:	619c      	str	r4, [r3, #24]
 801f0b0:	621a      	str	r2, [r3, #32]
 801f0b2:	9301      	str	r3, [sp, #4]
 801f0b4:	f7f3 fc16 	bl	80128e4 <GUI_ALLOC_LockH>
 801f0b8:	69c4      	ldr	r4, [r0, #28]
 801f0ba:	9002      	str	r0, [sp, #8]
 801f0bc:	b32c      	cbz	r4, 801f10a <WM__InsertWindowIntoList+0x72>
 801f0be:	9b01      	ldr	r3, [sp, #4]
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801f0c4:	f7f3 fc0e 	bl	80128e4 <GUI_ALLOC_LockH>
 801f0c8:	9003      	str	r0, [sp, #12]
 801f0ca:	f006 0608 	and.w	r6, r6, #8
 801f0ce:	bb2e      	cbnz	r6, 801f11c <WM__InsertWindowIntoList+0x84>
 801f0d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f0d2:	071a      	lsls	r2, r3, #28
 801f0d4:	d43c      	bmi.n	801f150 <WM__InsertWindowIntoList+0xb8>
 801f0d6:	a802      	add	r0, sp, #8
 801f0d8:	f7f3 fc18 	bl	801290c <GUI_ALLOC_UnlockH>
 801f0dc:	a803      	add	r0, sp, #12
 801f0de:	f7f3 fc15 	bl	801290c <GUI_ALLOC_UnlockH>
 801f0e2:	4620      	mov	r0, r4
 801f0e4:	f7f3 fbf4 	bl	80128d0 <GUI_ALLOC_h2p>
 801f0e8:	e005      	b.n	801f0f6 <WM__InsertWindowIntoList+0x5e>
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f7f3 fbf0 	bl	80128d0 <GUI_ALLOC_h2p>
 801f0f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f0f2:	071b      	lsls	r3, r3, #28
 801f0f4:	d427      	bmi.n	801f146 <WM__InsertWindowIntoList+0xae>
 801f0f6:	6a04      	ldr	r4, [r0, #32]
 801f0f8:	9003      	str	r0, [sp, #12]
 801f0fa:	2c00      	cmp	r4, #0
 801f0fc:	d1f5      	bne.n	801f0ea <WM__InsertWindowIntoList+0x52>
 801f0fe:	6205      	str	r5, [r0, #32]
 801f100:	a801      	add	r0, sp, #4
 801f102:	f7f3 fc03 	bl	801290c <GUI_ALLOC_UnlockH>
 801f106:	b004      	add	sp, #16
 801f108:	bd70      	pop	{r4, r5, r6, pc}
 801f10a:	61c5      	str	r5, [r0, #28]
 801f10c:	a801      	add	r0, sp, #4
 801f10e:	f7f3 fbfd 	bl	801290c <GUI_ALLOC_UnlockH>
 801f112:	a802      	add	r0, sp, #8
 801f114:	f7f3 fbfa 	bl	801290c <GUI_ALLOC_UnlockH>
 801f118:	b004      	add	sp, #16
 801f11a:	bd70      	pop	{r4, r5, r6, pc}
 801f11c:	a802      	add	r0, sp, #8
 801f11e:	f7f3 fbf5 	bl	801290c <GUI_ALLOC_UnlockH>
 801f122:	a803      	add	r0, sp, #12
 801f124:	f7f3 fbf2 	bl	801290c <GUI_ALLOC_UnlockH>
 801f128:	4620      	mov	r0, r4
 801f12a:	f7f3 fbd1 	bl	80128d0 <GUI_ALLOC_h2p>
 801f12e:	6a02      	ldr	r2, [r0, #32]
 801f130:	9003      	str	r0, [sp, #12]
 801f132:	2a00      	cmp	r2, #0
 801f134:	d0e3      	beq.n	801f0fe <WM__InsertWindowIntoList+0x66>
 801f136:	4610      	mov	r0, r2
 801f138:	f7f3 fbca 	bl	80128d0 <GUI_ALLOC_h2p>
 801f13c:	6a02      	ldr	r2, [r0, #32]
 801f13e:	9003      	str	r0, [sp, #12]
 801f140:	2a00      	cmp	r2, #0
 801f142:	d1f8      	bne.n	801f136 <WM__InsertWindowIntoList+0x9e>
 801f144:	e7db      	b.n	801f0fe <WM__InsertWindowIntoList+0x66>
 801f146:	9a03      	ldr	r2, [sp, #12]
 801f148:	9b01      	ldr	r3, [sp, #4]
 801f14a:	6215      	str	r5, [r2, #32]
 801f14c:	621c      	str	r4, [r3, #32]
 801f14e:	e7d7      	b.n	801f100 <WM__InsertWindowIntoList+0x68>
 801f150:	9a01      	ldr	r2, [sp, #4]
 801f152:	a801      	add	r0, sp, #4
 801f154:	9b02      	ldr	r3, [sp, #8]
 801f156:	6214      	str	r4, [r2, #32]
 801f158:	61dd      	str	r5, [r3, #28]
 801f15a:	f7f3 fbd7 	bl	801290c <GUI_ALLOC_UnlockH>
 801f15e:	a802      	add	r0, sp, #8
 801f160:	f7f3 fbd4 	bl	801290c <GUI_ALLOC_UnlockH>
 801f164:	a803      	add	r0, sp, #12
 801f166:	f7f3 fbd1 	bl	801290c <GUI_ALLOC_UnlockH>
 801f16a:	e7d5      	b.n	801f118 <WM__InsertWindowIntoList+0x80>

0801f16c <WM__IsWindow>:
 801f16c:	4b09      	ldr	r3, [pc, #36]	; (801f194 <WM__IsWindow+0x28>)
 801f16e:	b510      	push	{r4, lr}
 801f170:	4604      	mov	r4, r0
 801f172:	6818      	ldr	r0, [r3, #0]
 801f174:	b148      	cbz	r0, 801f18a <WM__IsWindow+0x1e>
 801f176:	42a0      	cmp	r0, r4
 801f178:	d102      	bne.n	801f180 <WM__IsWindow+0x14>
 801f17a:	e008      	b.n	801f18e <WM__IsWindow+0x22>
 801f17c:	4284      	cmp	r4, r0
 801f17e:	d006      	beq.n	801f18e <WM__IsWindow+0x22>
 801f180:	f7f3 fba6 	bl	80128d0 <GUI_ALLOC_h2p>
 801f184:	6940      	ldr	r0, [r0, #20]
 801f186:	2800      	cmp	r0, #0
 801f188:	d1f8      	bne.n	801f17c <WM__IsWindow+0x10>
 801f18a:	2000      	movs	r0, #0
 801f18c:	bd10      	pop	{r4, pc}
 801f18e:	2001      	movs	r0, #1
 801f190:	bd10      	pop	{r4, pc}
 801f192:	bf00      	nop
 801f194:	20046818 	.word	0x20046818

0801f198 <WM__InvalidateDrawAndDescs>:
 801f198:	b900      	cbnz	r0, 801f19c <WM__InvalidateDrawAndDescs+0x4>
 801f19a:	4770      	bx	lr
 801f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1a0:	b08f      	sub	sp, #60	; 0x3c
 801f1a2:	4604      	mov	r4, r0
 801f1a4:	f7f3 fb9e 	bl	80128e4 <GUI_ALLOC_LockH>
 801f1a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f1aa:	9005      	str	r0, [sp, #20]
 801f1ac:	079a      	lsls	r2, r3, #30
 801f1ae:	f140 813c 	bpl.w	801f42a <WM__InvalidateDrawAndDescs+0x292>
 801f1b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f1b4:	b140      	cbz	r0, 801f1c8 <WM__InvalidateDrawAndDescs+0x30>
 801f1b6:	4ba0      	ldr	r3, [pc, #640]	; (801f438 <WM__InvalidateDrawAndDescs+0x2a0>)
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	429c      	cmp	r4, r3
 801f1bc:	d004      	beq.n	801f1c8 <WM__InvalidateDrawAndDescs+0x30>
 801f1be:	f7fd fb69 	bl	801c894 <GUI_MEMDEV_Delete>
 801f1c2:	9b05      	ldr	r3, [sp, #20]
 801f1c4:	2200      	movs	r2, #0
 801f1c6:	625a      	str	r2, [r3, #36]	; 0x24
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f001 fcfb 	bl	8020bc4 <WM_GetFirstChild>
 801f1ce:	9003      	str	r0, [sp, #12]
 801f1d0:	2800      	cmp	r0, #0
 801f1d2:	f000 812a 	beq.w	801f42a <WM__InvalidateDrawAndDescs+0x292>
 801f1d6:	f8df 8260 	ldr.w	r8, [pc, #608]	; 801f438 <WM__InvalidateDrawAndDescs+0x2a0>
 801f1da:	9803      	ldr	r0, [sp, #12]
 801f1dc:	f7f3 fb82 	bl	80128e4 <GUI_ALLOC_LockH>
 801f1e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f1e2:	9006      	str	r0, [sp, #24]
 801f1e4:	079b      	lsls	r3, r3, #30
 801f1e6:	f140 8115 	bpl.w	801f414 <WM__InvalidateDrawAndDescs+0x27c>
 801f1ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f1ec:	b148      	cbz	r0, 801f202 <WM__InvalidateDrawAndDescs+0x6a>
 801f1ee:	f8d8 3000 	ldr.w	r3, [r8]
 801f1f2:	9a03      	ldr	r2, [sp, #12]
 801f1f4:	4293      	cmp	r3, r2
 801f1f6:	d004      	beq.n	801f202 <WM__InvalidateDrawAndDescs+0x6a>
 801f1f8:	f7fd fb4c 	bl	801c894 <GUI_MEMDEV_Delete>
 801f1fc:	9b06      	ldr	r3, [sp, #24]
 801f1fe:	2200      	movs	r2, #0
 801f200:	625a      	str	r2, [r3, #36]	; 0x24
 801f202:	9803      	ldr	r0, [sp, #12]
 801f204:	f001 fcde 	bl	8020bc4 <WM_GetFirstChild>
 801f208:	9002      	str	r0, [sp, #8]
 801f20a:	2800      	cmp	r0, #0
 801f20c:	f000 8102 	beq.w	801f414 <WM__InvalidateDrawAndDescs+0x27c>
 801f210:	9802      	ldr	r0, [sp, #8]
 801f212:	f7f3 fb67 	bl	80128e4 <GUI_ALLOC_LockH>
 801f216:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f218:	9007      	str	r0, [sp, #28]
 801f21a:	079f      	lsls	r7, r3, #30
 801f21c:	f140 80ef 	bpl.w	801f3fe <WM__InvalidateDrawAndDescs+0x266>
 801f220:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f222:	b148      	cbz	r0, 801f238 <WM__InvalidateDrawAndDescs+0xa0>
 801f224:	f8d8 3000 	ldr.w	r3, [r8]
 801f228:	9a02      	ldr	r2, [sp, #8]
 801f22a:	4293      	cmp	r3, r2
 801f22c:	d004      	beq.n	801f238 <WM__InvalidateDrawAndDescs+0xa0>
 801f22e:	f7fd fb31 	bl	801c894 <GUI_MEMDEV_Delete>
 801f232:	9b07      	ldr	r3, [sp, #28]
 801f234:	2200      	movs	r2, #0
 801f236:	625a      	str	r2, [r3, #36]	; 0x24
 801f238:	9802      	ldr	r0, [sp, #8]
 801f23a:	f001 fcc3 	bl	8020bc4 <WM_GetFirstChild>
 801f23e:	4683      	mov	fp, r0
 801f240:	2800      	cmp	r0, #0
 801f242:	f000 80dc 	beq.w	801f3fe <WM__InvalidateDrawAndDescs+0x266>
 801f246:	4658      	mov	r0, fp
 801f248:	f7f3 fb4c 	bl	80128e4 <GUI_ALLOC_LockH>
 801f24c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f24e:	9008      	str	r0, [sp, #32]
 801f250:	079e      	lsls	r6, r3, #30
 801f252:	f140 80c8 	bpl.w	801f3e6 <WM__InvalidateDrawAndDescs+0x24e>
 801f256:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f258:	b140      	cbz	r0, 801f26c <WM__InvalidateDrawAndDescs+0xd4>
 801f25a:	f8d8 3000 	ldr.w	r3, [r8]
 801f25e:	455b      	cmp	r3, fp
 801f260:	d004      	beq.n	801f26c <WM__InvalidateDrawAndDescs+0xd4>
 801f262:	f7fd fb17 	bl	801c894 <GUI_MEMDEV_Delete>
 801f266:	9b08      	ldr	r3, [sp, #32]
 801f268:	2200      	movs	r2, #0
 801f26a:	625a      	str	r2, [r3, #36]	; 0x24
 801f26c:	4658      	mov	r0, fp
 801f26e:	f001 fca9 	bl	8020bc4 <WM_GetFirstChild>
 801f272:	4682      	mov	sl, r0
 801f274:	2800      	cmp	r0, #0
 801f276:	f000 80b6 	beq.w	801f3e6 <WM__InvalidateDrawAndDescs+0x24e>
 801f27a:	4650      	mov	r0, sl
 801f27c:	f7f3 fb32 	bl	80128e4 <GUI_ALLOC_LockH>
 801f280:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f282:	9009      	str	r0, [sp, #36]	; 0x24
 801f284:	079d      	lsls	r5, r3, #30
 801f286:	f140 80a2 	bpl.w	801f3ce <WM__InvalidateDrawAndDescs+0x236>
 801f28a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f28c:	b140      	cbz	r0, 801f2a0 <WM__InvalidateDrawAndDescs+0x108>
 801f28e:	f8d8 3000 	ldr.w	r3, [r8]
 801f292:	4553      	cmp	r3, sl
 801f294:	d004      	beq.n	801f2a0 <WM__InvalidateDrawAndDescs+0x108>
 801f296:	f7fd fafd 	bl	801c894 <GUI_MEMDEV_Delete>
 801f29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f29c:	2200      	movs	r2, #0
 801f29e:	625a      	str	r2, [r3, #36]	; 0x24
 801f2a0:	4650      	mov	r0, sl
 801f2a2:	f001 fc8f 	bl	8020bc4 <WM_GetFirstChild>
 801f2a6:	9001      	str	r0, [sp, #4]
 801f2a8:	2800      	cmp	r0, #0
 801f2aa:	f000 8090 	beq.w	801f3ce <WM__InvalidateDrawAndDescs+0x236>
 801f2ae:	9801      	ldr	r0, [sp, #4]
 801f2b0:	f7f3 fb18 	bl	80128e4 <GUI_ALLOC_LockH>
 801f2b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f2b6:	900a      	str	r0, [sp, #40]	; 0x28
 801f2b8:	079c      	lsls	r4, r3, #30
 801f2ba:	d57d      	bpl.n	801f3b8 <WM__InvalidateDrawAndDescs+0x220>
 801f2bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f2be:	b148      	cbz	r0, 801f2d4 <WM__InvalidateDrawAndDescs+0x13c>
 801f2c0:	f8d8 3000 	ldr.w	r3, [r8]
 801f2c4:	9a01      	ldr	r2, [sp, #4]
 801f2c6:	4293      	cmp	r3, r2
 801f2c8:	d004      	beq.n	801f2d4 <WM__InvalidateDrawAndDescs+0x13c>
 801f2ca:	f7fd fae3 	bl	801c894 <GUI_MEMDEV_Delete>
 801f2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2d0:	2200      	movs	r2, #0
 801f2d2:	625a      	str	r2, [r3, #36]	; 0x24
 801f2d4:	9801      	ldr	r0, [sp, #4]
 801f2d6:	f001 fc75 	bl	8020bc4 <WM_GetFirstChild>
 801f2da:	4606      	mov	r6, r0
 801f2dc:	2800      	cmp	r0, #0
 801f2de:	d06b      	beq.n	801f3b8 <WM__InvalidateDrawAndDescs+0x220>
 801f2e0:	4630      	mov	r0, r6
 801f2e2:	f7f3 faff 	bl	80128e4 <GUI_ALLOC_LockH>
 801f2e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f2e8:	900b      	str	r0, [sp, #44]	; 0x2c
 801f2ea:	0799      	lsls	r1, r3, #30
 801f2ec:	d55b      	bpl.n	801f3a6 <WM__InvalidateDrawAndDescs+0x20e>
 801f2ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f2f0:	b140      	cbz	r0, 801f304 <WM__InvalidateDrawAndDescs+0x16c>
 801f2f2:	f8d8 3000 	ldr.w	r3, [r8]
 801f2f6:	42b3      	cmp	r3, r6
 801f2f8:	d004      	beq.n	801f304 <WM__InvalidateDrawAndDescs+0x16c>
 801f2fa:	f7fd facb 	bl	801c894 <GUI_MEMDEV_Delete>
 801f2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f300:	2200      	movs	r2, #0
 801f302:	625a      	str	r2, [r3, #36]	; 0x24
 801f304:	4630      	mov	r0, r6
 801f306:	f001 fc5d 	bl	8020bc4 <WM_GetFirstChild>
 801f30a:	4605      	mov	r5, r0
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d04a      	beq.n	801f3a6 <WM__InvalidateDrawAndDescs+0x20e>
 801f310:	4628      	mov	r0, r5
 801f312:	f7f3 fae7 	bl	80128e4 <GUI_ALLOC_LockH>
 801f316:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f318:	900c      	str	r0, [sp, #48]	; 0x30
 801f31a:	079a      	lsls	r2, r3, #30
 801f31c:	d53a      	bpl.n	801f394 <WM__InvalidateDrawAndDescs+0x1fc>
 801f31e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f320:	b140      	cbz	r0, 801f334 <WM__InvalidateDrawAndDescs+0x19c>
 801f322:	f8d8 3000 	ldr.w	r3, [r8]
 801f326:	42ab      	cmp	r3, r5
 801f328:	d004      	beq.n	801f334 <WM__InvalidateDrawAndDescs+0x19c>
 801f32a:	f7fd fab3 	bl	801c894 <GUI_MEMDEV_Delete>
 801f32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f330:	2200      	movs	r2, #0
 801f332:	625a      	str	r2, [r3, #36]	; 0x24
 801f334:	4628      	mov	r0, r5
 801f336:	f001 fc45 	bl	8020bc4 <WM_GetFirstChild>
 801f33a:	4604      	mov	r4, r0
 801f33c:	b350      	cbz	r0, 801f394 <WM__InvalidateDrawAndDescs+0x1fc>
 801f33e:	f04f 0900 	mov.w	r9, #0
 801f342:	4620      	mov	r0, r4
 801f344:	f7f3 face 	bl	80128e4 <GUI_ALLOC_LockH>
 801f348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f34a:	900d      	str	r0, [sp, #52]	; 0x34
 801f34c:	079b      	lsls	r3, r3, #30
 801f34e:	d518      	bpl.n	801f382 <WM__InvalidateDrawAndDescs+0x1ea>
 801f350:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f352:	b140      	cbz	r0, 801f366 <WM__InvalidateDrawAndDescs+0x1ce>
 801f354:	f8d8 3000 	ldr.w	r3, [r8]
 801f358:	42a3      	cmp	r3, r4
 801f35a:	d004      	beq.n	801f366 <WM__InvalidateDrawAndDescs+0x1ce>
 801f35c:	f7fd fa9a 	bl	801c894 <GUI_MEMDEV_Delete>
 801f360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f362:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 801f366:	4620      	mov	r0, r4
 801f368:	f001 fc2c 	bl	8020bc4 <WM_GetFirstChild>
 801f36c:	4607      	mov	r7, r0
 801f36e:	b140      	cbz	r0, 801f382 <WM__InvalidateDrawAndDescs+0x1ea>
 801f370:	4638      	mov	r0, r7
 801f372:	f7ff ff11 	bl	801f198 <WM__InvalidateDrawAndDescs>
 801f376:	4638      	mov	r0, r7
 801f378:	f7f3 faaa 	bl	80128d0 <GUI_ALLOC_h2p>
 801f37c:	6a07      	ldr	r7, [r0, #32]
 801f37e:	2f00      	cmp	r7, #0
 801f380:	d1f6      	bne.n	801f370 <WM__InvalidateDrawAndDescs+0x1d8>
 801f382:	a80d      	add	r0, sp, #52	; 0x34
 801f384:	f7f3 fac2 	bl	801290c <GUI_ALLOC_UnlockH>
 801f388:	4620      	mov	r0, r4
 801f38a:	f7f3 faa1 	bl	80128d0 <GUI_ALLOC_h2p>
 801f38e:	6a04      	ldr	r4, [r0, #32]
 801f390:	2c00      	cmp	r4, #0
 801f392:	d1d6      	bne.n	801f342 <WM__InvalidateDrawAndDescs+0x1aa>
 801f394:	a80c      	add	r0, sp, #48	; 0x30
 801f396:	f7f3 fab9 	bl	801290c <GUI_ALLOC_UnlockH>
 801f39a:	4628      	mov	r0, r5
 801f39c:	f7f3 fa98 	bl	80128d0 <GUI_ALLOC_h2p>
 801f3a0:	6a05      	ldr	r5, [r0, #32]
 801f3a2:	2d00      	cmp	r5, #0
 801f3a4:	d1b4      	bne.n	801f310 <WM__InvalidateDrawAndDescs+0x178>
 801f3a6:	a80b      	add	r0, sp, #44	; 0x2c
 801f3a8:	f7f3 fab0 	bl	801290c <GUI_ALLOC_UnlockH>
 801f3ac:	4630      	mov	r0, r6
 801f3ae:	f7f3 fa8f 	bl	80128d0 <GUI_ALLOC_h2p>
 801f3b2:	6a06      	ldr	r6, [r0, #32]
 801f3b4:	2e00      	cmp	r6, #0
 801f3b6:	d193      	bne.n	801f2e0 <WM__InvalidateDrawAndDescs+0x148>
 801f3b8:	a80a      	add	r0, sp, #40	; 0x28
 801f3ba:	f7f3 faa7 	bl	801290c <GUI_ALLOC_UnlockH>
 801f3be:	9801      	ldr	r0, [sp, #4]
 801f3c0:	f7f3 fa86 	bl	80128d0 <GUI_ALLOC_h2p>
 801f3c4:	6a03      	ldr	r3, [r0, #32]
 801f3c6:	9301      	str	r3, [sp, #4]
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	f47f af70 	bne.w	801f2ae <WM__InvalidateDrawAndDescs+0x116>
 801f3ce:	a809      	add	r0, sp, #36	; 0x24
 801f3d0:	f7f3 fa9c 	bl	801290c <GUI_ALLOC_UnlockH>
 801f3d4:	4650      	mov	r0, sl
 801f3d6:	f7f3 fa7b 	bl	80128d0 <GUI_ALLOC_h2p>
 801f3da:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801f3de:	f1ba 0f00 	cmp.w	sl, #0
 801f3e2:	f47f af4a 	bne.w	801f27a <WM__InvalidateDrawAndDescs+0xe2>
 801f3e6:	a808      	add	r0, sp, #32
 801f3e8:	f7f3 fa90 	bl	801290c <GUI_ALLOC_UnlockH>
 801f3ec:	4658      	mov	r0, fp
 801f3ee:	f7f3 fa6f 	bl	80128d0 <GUI_ALLOC_h2p>
 801f3f2:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801f3f6:	f1bb 0f00 	cmp.w	fp, #0
 801f3fa:	f47f af24 	bne.w	801f246 <WM__InvalidateDrawAndDescs+0xae>
 801f3fe:	a807      	add	r0, sp, #28
 801f400:	f7f3 fa84 	bl	801290c <GUI_ALLOC_UnlockH>
 801f404:	9802      	ldr	r0, [sp, #8]
 801f406:	f7f3 fa63 	bl	80128d0 <GUI_ALLOC_h2p>
 801f40a:	6a03      	ldr	r3, [r0, #32]
 801f40c:	9302      	str	r3, [sp, #8]
 801f40e:	2b00      	cmp	r3, #0
 801f410:	f47f aefe 	bne.w	801f210 <WM__InvalidateDrawAndDescs+0x78>
 801f414:	a806      	add	r0, sp, #24
 801f416:	f7f3 fa79 	bl	801290c <GUI_ALLOC_UnlockH>
 801f41a:	9803      	ldr	r0, [sp, #12]
 801f41c:	f7f3 fa58 	bl	80128d0 <GUI_ALLOC_h2p>
 801f420:	6a03      	ldr	r3, [r0, #32]
 801f422:	9303      	str	r3, [sp, #12]
 801f424:	2b00      	cmp	r3, #0
 801f426:	f47f aed8 	bne.w	801f1da <WM__InvalidateDrawAndDescs+0x42>
 801f42a:	a805      	add	r0, sp, #20
 801f42c:	f7f3 fa6e 	bl	801290c <GUI_ALLOC_UnlockH>
 801f430:	b00f      	add	sp, #60	; 0x3c
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f436:	bf00      	nop
 801f438:	20046848 	.word	0x20046848

0801f43c <WM_InvalidateWindowAndDescsEx>:
 801f43c:	b900      	cbnz	r0, 801f440 <WM_InvalidateWindowAndDescsEx+0x4>
 801f43e:	4770      	bx	lr
 801f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f444:	b0a1      	sub	sp, #132	; 0x84
 801f446:	4604      	mov	r4, r0
 801f448:	460d      	mov	r5, r1
 801f44a:	9201      	str	r2, [sp, #4]
 801f44c:	f7f3 fa4a 	bl	80128e4 <GUI_ALLOC_LockH>
 801f450:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f452:	9005      	str	r0, [sp, #20]
 801f454:	079a      	lsls	r2, r3, #30
 801f456:	f140 8156 	bpl.w	801f706 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801f45a:	4602      	mov	r2, r0
 801f45c:	4629      	mov	r1, r5
 801f45e:	a80e      	add	r0, sp, #56	; 0x38
 801f460:	f7f9 fe3a 	bl	80190d8 <GUI__IntersectRects>
 801f464:	2800      	cmp	r0, #0
 801f466:	f000 814e 	beq.w	801f706 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801f46a:	a805      	add	r0, sp, #20
 801f46c:	f7f3 fa4e 	bl	801290c <GUI_ALLOC_UnlockH>
 801f470:	4620      	mov	r0, r4
 801f472:	9a01      	ldr	r2, [sp, #4]
 801f474:	a90e      	add	r1, sp, #56	; 0x38
 801f476:	f7ff fd09 	bl	801ee8c <_Invalidate1Abs>
 801f47a:	4620      	mov	r0, r4
 801f47c:	f001 fba2 	bl	8020bc4 <WM_GetFirstChild>
 801f480:	4604      	mov	r4, r0
 801f482:	2800      	cmp	r0, #0
 801f484:	f000 8142 	beq.w	801f70c <WM_InvalidateWindowAndDescsEx+0x2d0>
 801f488:	4620      	mov	r0, r4
 801f48a:	f7f3 fa2b 	bl	80128e4 <GUI_ALLOC_LockH>
 801f48e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f490:	9006      	str	r0, [sp, #24]
 801f492:	079b      	lsls	r3, r3, #30
 801f494:	f140 813d 	bpl.w	801f712 <WM_InvalidateWindowAndDescsEx+0x2d6>
 801f498:	4602      	mov	r2, r0
 801f49a:	a90e      	add	r1, sp, #56	; 0x38
 801f49c:	a810      	add	r0, sp, #64	; 0x40
 801f49e:	f7f9 fe1b 	bl	80190d8 <GUI__IntersectRects>
 801f4a2:	2800      	cmp	r0, #0
 801f4a4:	f000 8135 	beq.w	801f712 <WM_InvalidateWindowAndDescsEx+0x2d6>
 801f4a8:	a806      	add	r0, sp, #24
 801f4aa:	f7f3 fa2f 	bl	801290c <GUI_ALLOC_UnlockH>
 801f4ae:	9a01      	ldr	r2, [sp, #4]
 801f4b0:	a910      	add	r1, sp, #64	; 0x40
 801f4b2:	4620      	mov	r0, r4
 801f4b4:	f7ff fcea 	bl	801ee8c <_Invalidate1Abs>
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	f001 fb83 	bl	8020bc4 <WM_GetFirstChild>
 801f4be:	4605      	mov	r5, r0
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	f000 8118 	beq.w	801f6f6 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801f4c6:	9402      	str	r4, [sp, #8]
 801f4c8:	4628      	mov	r0, r5
 801f4ca:	f7f3 fa0b 	bl	80128e4 <GUI_ALLOC_LockH>
 801f4ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f4d0:	9007      	str	r0, [sp, #28]
 801f4d2:	079f      	lsls	r7, r3, #30
 801f4d4:	f140 8121 	bpl.w	801f71a <WM_InvalidateWindowAndDescsEx+0x2de>
 801f4d8:	4602      	mov	r2, r0
 801f4da:	a910      	add	r1, sp, #64	; 0x40
 801f4dc:	a812      	add	r0, sp, #72	; 0x48
 801f4de:	f7f9 fdfb 	bl	80190d8 <GUI__IntersectRects>
 801f4e2:	2800      	cmp	r0, #0
 801f4e4:	f000 8119 	beq.w	801f71a <WM_InvalidateWindowAndDescsEx+0x2de>
 801f4e8:	a807      	add	r0, sp, #28
 801f4ea:	f7f3 fa0f 	bl	801290c <GUI_ALLOC_UnlockH>
 801f4ee:	f8dd a004 	ldr.w	sl, [sp, #4]
 801f4f2:	4628      	mov	r0, r5
 801f4f4:	a912      	add	r1, sp, #72	; 0x48
 801f4f6:	4652      	mov	r2, sl
 801f4f8:	f7ff fcc8 	bl	801ee8c <_Invalidate1Abs>
 801f4fc:	4628      	mov	r0, r5
 801f4fe:	f001 fb61 	bl	8020bc4 <WM_GetFirstChild>
 801f502:	2800      	cmp	r0, #0
 801f504:	f000 80ef 	beq.w	801f6e6 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801f508:	9503      	str	r5, [sp, #12]
 801f50a:	4605      	mov	r5, r0
 801f50c:	4628      	mov	r0, r5
 801f50e:	f7f3 f9e9 	bl	80128e4 <GUI_ALLOC_LockH>
 801f512:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f514:	9008      	str	r0, [sp, #32]
 801f516:	079e      	lsls	r6, r3, #30
 801f518:	f140 8103 	bpl.w	801f722 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801f51c:	4602      	mov	r2, r0
 801f51e:	a912      	add	r1, sp, #72	; 0x48
 801f520:	a814      	add	r0, sp, #80	; 0x50
 801f522:	f7f9 fdd9 	bl	80190d8 <GUI__IntersectRects>
 801f526:	2800      	cmp	r0, #0
 801f528:	f000 80fb 	beq.w	801f722 <WM_InvalidateWindowAndDescsEx+0x2e6>
 801f52c:	a808      	add	r0, sp, #32
 801f52e:	f7f3 f9ed 	bl	801290c <GUI_ALLOC_UnlockH>
 801f532:	4628      	mov	r0, r5
 801f534:	4652      	mov	r2, sl
 801f536:	a914      	add	r1, sp, #80	; 0x50
 801f538:	f7ff fca8 	bl	801ee8c <_Invalidate1Abs>
 801f53c:	4628      	mov	r0, r5
 801f53e:	f001 fb41 	bl	8020bc4 <WM_GetFirstChild>
 801f542:	2800      	cmp	r0, #0
 801f544:	f000 80c7 	beq.w	801f6d6 <WM_InvalidateWindowAndDescsEx+0x29a>
 801f548:	46ab      	mov	fp, r5
 801f54a:	4680      	mov	r8, r0
 801f54c:	4640      	mov	r0, r8
 801f54e:	f7f3 f9c9 	bl	80128e4 <GUI_ALLOC_LockH>
 801f552:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f554:	9009      	str	r0, [sp, #36]	; 0x24
 801f556:	079d      	lsls	r5, r3, #30
 801f558:	f140 80e7 	bpl.w	801f72a <WM_InvalidateWindowAndDescsEx+0x2ee>
 801f55c:	4602      	mov	r2, r0
 801f55e:	a914      	add	r1, sp, #80	; 0x50
 801f560:	a816      	add	r0, sp, #88	; 0x58
 801f562:	f7f9 fdb9 	bl	80190d8 <GUI__IntersectRects>
 801f566:	2800      	cmp	r0, #0
 801f568:	f000 80df 	beq.w	801f72a <WM_InvalidateWindowAndDescsEx+0x2ee>
 801f56c:	a809      	add	r0, sp, #36	; 0x24
 801f56e:	f7f3 f9cd 	bl	801290c <GUI_ALLOC_UnlockH>
 801f572:	4640      	mov	r0, r8
 801f574:	4652      	mov	r2, sl
 801f576:	a916      	add	r1, sp, #88	; 0x58
 801f578:	f7ff fc88 	bl	801ee8c <_Invalidate1Abs>
 801f57c:	4640      	mov	r0, r8
 801f57e:	f001 fb21 	bl	8020bc4 <WM_GetFirstChild>
 801f582:	2800      	cmp	r0, #0
 801f584:	f000 809d 	beq.w	801f6c2 <WM_InvalidateWindowAndDescsEx+0x286>
 801f588:	4681      	mov	r9, r0
 801f58a:	4648      	mov	r0, r9
 801f58c:	f7f3 f9aa 	bl	80128e4 <GUI_ALLOC_LockH>
 801f590:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f592:	900a      	str	r0, [sp, #40]	; 0x28
 801f594:	079c      	lsls	r4, r3, #30
 801f596:	f140 80d5 	bpl.w	801f744 <WM_InvalidateWindowAndDescsEx+0x308>
 801f59a:	4602      	mov	r2, r0
 801f59c:	a916      	add	r1, sp, #88	; 0x58
 801f59e:	a818      	add	r0, sp, #96	; 0x60
 801f5a0:	f7f9 fd9a 	bl	80190d8 <GUI__IntersectRects>
 801f5a4:	2800      	cmp	r0, #0
 801f5a6:	f000 80cd 	beq.w	801f744 <WM_InvalidateWindowAndDescsEx+0x308>
 801f5aa:	a80a      	add	r0, sp, #40	; 0x28
 801f5ac:	f7f3 f9ae 	bl	801290c <GUI_ALLOC_UnlockH>
 801f5b0:	4652      	mov	r2, sl
 801f5b2:	a918      	add	r1, sp, #96	; 0x60
 801f5b4:	4648      	mov	r0, r9
 801f5b6:	f7ff fc69 	bl	801ee8c <_Invalidate1Abs>
 801f5ba:	4648      	mov	r0, r9
 801f5bc:	f001 fb02 	bl	8020bc4 <WM_GetFirstChild>
 801f5c0:	4605      	mov	r5, r0
 801f5c2:	2800      	cmp	r0, #0
 801f5c4:	d074      	beq.n	801f6b0 <WM_InvalidateWindowAndDescsEx+0x274>
 801f5c6:	4628      	mov	r0, r5
 801f5c8:	f7f3 f98c 	bl	80128e4 <GUI_ALLOC_LockH>
 801f5cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f5ce:	900b      	str	r0, [sp, #44]	; 0x2c
 801f5d0:	0799      	lsls	r1, r3, #30
 801f5d2:	f140 80c4 	bpl.w	801f75e <WM_InvalidateWindowAndDescsEx+0x322>
 801f5d6:	4602      	mov	r2, r0
 801f5d8:	a918      	add	r1, sp, #96	; 0x60
 801f5da:	a81a      	add	r0, sp, #104	; 0x68
 801f5dc:	f7f9 fd7c 	bl	80190d8 <GUI__IntersectRects>
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	f000 80bc 	beq.w	801f75e <WM_InvalidateWindowAndDescsEx+0x322>
 801f5e6:	a80b      	add	r0, sp, #44	; 0x2c
 801f5e8:	f7f3 f990 	bl	801290c <GUI_ALLOC_UnlockH>
 801f5ec:	4652      	mov	r2, sl
 801f5ee:	a91a      	add	r1, sp, #104	; 0x68
 801f5f0:	4628      	mov	r0, r5
 801f5f2:	f7ff fc4b 	bl	801ee8c <_Invalidate1Abs>
 801f5f6:	4628      	mov	r0, r5
 801f5f8:	f001 fae4 	bl	8020bc4 <WM_GetFirstChild>
 801f5fc:	4606      	mov	r6, r0
 801f5fe:	2800      	cmp	r0, #0
 801f600:	d050      	beq.n	801f6a4 <WM_InvalidateWindowAndDescsEx+0x268>
 801f602:	4630      	mov	r0, r6
 801f604:	f7f3 f96e 	bl	80128e4 <GUI_ALLOC_LockH>
 801f608:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f60a:	900c      	str	r0, [sp, #48]	; 0x30
 801f60c:	079a      	lsls	r2, r3, #30
 801f60e:	f140 80b1 	bpl.w	801f774 <WM_InvalidateWindowAndDescsEx+0x338>
 801f612:	4602      	mov	r2, r0
 801f614:	a91a      	add	r1, sp, #104	; 0x68
 801f616:	a81c      	add	r0, sp, #112	; 0x70
 801f618:	f7f9 fd5e 	bl	80190d8 <GUI__IntersectRects>
 801f61c:	2800      	cmp	r0, #0
 801f61e:	f000 80a9 	beq.w	801f774 <WM_InvalidateWindowAndDescsEx+0x338>
 801f622:	a80c      	add	r0, sp, #48	; 0x30
 801f624:	f7f3 f972 	bl	801290c <GUI_ALLOC_UnlockH>
 801f628:	4652      	mov	r2, sl
 801f62a:	a91c      	add	r1, sp, #112	; 0x70
 801f62c:	4630      	mov	r0, r6
 801f62e:	f7ff fc2d 	bl	801ee8c <_Invalidate1Abs>
 801f632:	4630      	mov	r0, r6
 801f634:	f001 fac6 	bl	8020bc4 <WM_GetFirstChild>
 801f638:	4607      	mov	r7, r0
 801f63a:	b368      	cbz	r0, 801f698 <WM_InvalidateWindowAndDescsEx+0x25c>
 801f63c:	4638      	mov	r0, r7
 801f63e:	f7f3 f951 	bl	80128e4 <GUI_ALLOC_LockH>
 801f642:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f644:	900d      	str	r0, [sp, #52]	; 0x34
 801f646:	079b      	lsls	r3, r3, #30
 801f648:	f140 809f 	bpl.w	801f78a <WM_InvalidateWindowAndDescsEx+0x34e>
 801f64c:	4602      	mov	r2, r0
 801f64e:	a91c      	add	r1, sp, #112	; 0x70
 801f650:	a81e      	add	r0, sp, #120	; 0x78
 801f652:	f7f9 fd41 	bl	80190d8 <GUI__IntersectRects>
 801f656:	2800      	cmp	r0, #0
 801f658:	f000 8097 	beq.w	801f78a <WM_InvalidateWindowAndDescsEx+0x34e>
 801f65c:	a80d      	add	r0, sp, #52	; 0x34
 801f65e:	f7f3 f955 	bl	801290c <GUI_ALLOC_UnlockH>
 801f662:	4652      	mov	r2, sl
 801f664:	a91e      	add	r1, sp, #120	; 0x78
 801f666:	4638      	mov	r0, r7
 801f668:	f7ff fc10 	bl	801ee8c <_Invalidate1Abs>
 801f66c:	4638      	mov	r0, r7
 801f66e:	f001 faa9 	bl	8020bc4 <WM_GetFirstChild>
 801f672:	4604      	mov	r4, r0
 801f674:	b150      	cbz	r0, 801f68c <WM_InvalidateWindowAndDescsEx+0x250>
 801f676:	4620      	mov	r0, r4
 801f678:	4652      	mov	r2, sl
 801f67a:	a91e      	add	r1, sp, #120	; 0x78
 801f67c:	f7ff fede 	bl	801f43c <WM_InvalidateWindowAndDescsEx>
 801f680:	4620      	mov	r0, r4
 801f682:	f7f3 f925 	bl	80128d0 <GUI_ALLOC_h2p>
 801f686:	6a04      	ldr	r4, [r0, #32]
 801f688:	2c00      	cmp	r4, #0
 801f68a:	d1f4      	bne.n	801f676 <WM_InvalidateWindowAndDescsEx+0x23a>
 801f68c:	4638      	mov	r0, r7
 801f68e:	f7f3 f91f 	bl	80128d0 <GUI_ALLOC_h2p>
 801f692:	6a07      	ldr	r7, [r0, #32]
 801f694:	2f00      	cmp	r7, #0
 801f696:	d1d1      	bne.n	801f63c <WM_InvalidateWindowAndDescsEx+0x200>
 801f698:	4630      	mov	r0, r6
 801f69a:	f7f3 f919 	bl	80128d0 <GUI_ALLOC_h2p>
 801f69e:	6a06      	ldr	r6, [r0, #32]
 801f6a0:	2e00      	cmp	r6, #0
 801f6a2:	d1ae      	bne.n	801f602 <WM_InvalidateWindowAndDescsEx+0x1c6>
 801f6a4:	4628      	mov	r0, r5
 801f6a6:	f7f3 f913 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6aa:	6a05      	ldr	r5, [r0, #32]
 801f6ac:	2d00      	cmp	r5, #0
 801f6ae:	d18a      	bne.n	801f5c6 <WM_InvalidateWindowAndDescsEx+0x18a>
 801f6b0:	4648      	mov	r0, r9
 801f6b2:	f7f3 f90d 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6b6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801f6ba:	f1b9 0f00 	cmp.w	r9, #0
 801f6be:	f47f af64 	bne.w	801f58a <WM_InvalidateWindowAndDescsEx+0x14e>
 801f6c2:	4640      	mov	r0, r8
 801f6c4:	f7f3 f904 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6c8:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801f6cc:	f1b8 0f00 	cmp.w	r8, #0
 801f6d0:	f47f af3c 	bne.w	801f54c <WM_InvalidateWindowAndDescsEx+0x110>
 801f6d4:	465d      	mov	r5, fp
 801f6d6:	4628      	mov	r0, r5
 801f6d8:	f7f3 f8fa 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6dc:	6a05      	ldr	r5, [r0, #32]
 801f6de:	2d00      	cmp	r5, #0
 801f6e0:	f47f af14 	bne.w	801f50c <WM_InvalidateWindowAndDescsEx+0xd0>
 801f6e4:	9d03      	ldr	r5, [sp, #12]
 801f6e6:	4628      	mov	r0, r5
 801f6e8:	f7f3 f8f2 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6ec:	6a05      	ldr	r5, [r0, #32]
 801f6ee:	2d00      	cmp	r5, #0
 801f6f0:	f47f aeea 	bne.w	801f4c8 <WM_InvalidateWindowAndDescsEx+0x8c>
 801f6f4:	9c02      	ldr	r4, [sp, #8]
 801f6f6:	4620      	mov	r0, r4
 801f6f8:	f7f3 f8ea 	bl	80128d0 <GUI_ALLOC_h2p>
 801f6fc:	6a04      	ldr	r4, [r0, #32]
 801f6fe:	2c00      	cmp	r4, #0
 801f700:	f47f aec2 	bne.w	801f488 <WM_InvalidateWindowAndDescsEx+0x4c>
 801f704:	e002      	b.n	801f70c <WM_InvalidateWindowAndDescsEx+0x2d0>
 801f706:	a805      	add	r0, sp, #20
 801f708:	f7f3 f900 	bl	801290c <GUI_ALLOC_UnlockH>
 801f70c:	b021      	add	sp, #132	; 0x84
 801f70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f712:	a806      	add	r0, sp, #24
 801f714:	f7f3 f8fa 	bl	801290c <GUI_ALLOC_UnlockH>
 801f718:	e7ed      	b.n	801f6f6 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801f71a:	a807      	add	r0, sp, #28
 801f71c:	f7f3 f8f6 	bl	801290c <GUI_ALLOC_UnlockH>
 801f720:	e7e1      	b.n	801f6e6 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801f722:	a808      	add	r0, sp, #32
 801f724:	f7f3 f8f2 	bl	801290c <GUI_ALLOC_UnlockH>
 801f728:	e7d5      	b.n	801f6d6 <WM_InvalidateWindowAndDescsEx+0x29a>
 801f72a:	a809      	add	r0, sp, #36	; 0x24
 801f72c:	f7f3 f8ee 	bl	801290c <GUI_ALLOC_UnlockH>
 801f730:	4640      	mov	r0, r8
 801f732:	f7f3 f8cd 	bl	80128d0 <GUI_ALLOC_h2p>
 801f736:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801f73a:	f1b8 0f00 	cmp.w	r8, #0
 801f73e:	f47f af05 	bne.w	801f54c <WM_InvalidateWindowAndDescsEx+0x110>
 801f742:	e7c7      	b.n	801f6d4 <WM_InvalidateWindowAndDescsEx+0x298>
 801f744:	a80a      	add	r0, sp, #40	; 0x28
 801f746:	f7f3 f8e1 	bl	801290c <GUI_ALLOC_UnlockH>
 801f74a:	4648      	mov	r0, r9
 801f74c:	f7f3 f8c0 	bl	80128d0 <GUI_ALLOC_h2p>
 801f750:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801f754:	f1b9 0f00 	cmp.w	r9, #0
 801f758:	f47f af17 	bne.w	801f58a <WM_InvalidateWindowAndDescsEx+0x14e>
 801f75c:	e7b1      	b.n	801f6c2 <WM_InvalidateWindowAndDescsEx+0x286>
 801f75e:	a80b      	add	r0, sp, #44	; 0x2c
 801f760:	f7f3 f8d4 	bl	801290c <GUI_ALLOC_UnlockH>
 801f764:	4628      	mov	r0, r5
 801f766:	f7f3 f8b3 	bl	80128d0 <GUI_ALLOC_h2p>
 801f76a:	6a05      	ldr	r5, [r0, #32]
 801f76c:	2d00      	cmp	r5, #0
 801f76e:	f47f af2a 	bne.w	801f5c6 <WM_InvalidateWindowAndDescsEx+0x18a>
 801f772:	e79d      	b.n	801f6b0 <WM_InvalidateWindowAndDescsEx+0x274>
 801f774:	a80c      	add	r0, sp, #48	; 0x30
 801f776:	f7f3 f8c9 	bl	801290c <GUI_ALLOC_UnlockH>
 801f77a:	4630      	mov	r0, r6
 801f77c:	f7f3 f8a8 	bl	80128d0 <GUI_ALLOC_h2p>
 801f780:	6a06      	ldr	r6, [r0, #32]
 801f782:	2e00      	cmp	r6, #0
 801f784:	f47f af3d 	bne.w	801f602 <WM_InvalidateWindowAndDescsEx+0x1c6>
 801f788:	e78c      	b.n	801f6a4 <WM_InvalidateWindowAndDescsEx+0x268>
 801f78a:	a80d      	add	r0, sp, #52	; 0x34
 801f78c:	f7f3 f8be 	bl	801290c <GUI_ALLOC_UnlockH>
 801f790:	4638      	mov	r0, r7
 801f792:	f7f3 f89d 	bl	80128d0 <GUI_ALLOC_h2p>
 801f796:	6a07      	ldr	r7, [r0, #32]
 801f798:	2f00      	cmp	r7, #0
 801f79a:	f47f af4f 	bne.w	801f63c <WM_InvalidateWindowAndDescsEx+0x200>
 801f79e:	e77b      	b.n	801f698 <WM_InvalidateWindowAndDescsEx+0x25c>

0801f7a0 <WM__InvalidateRect>:
 801f7a0:	b901      	cbnz	r1, 801f7a4 <WM__InvalidateRect+0x4>
 801f7a2:	4770      	bx	lr
 801f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7a8:	4605      	mov	r5, r0
 801f7aa:	b086      	sub	sp, #24
 801f7ac:	4608      	mov	r0, r1
 801f7ae:	460c      	mov	r4, r1
 801f7b0:	461e      	mov	r6, r3
 801f7b2:	4617      	mov	r7, r2
 801f7b4:	f7f3 f896 	bl	80128e4 <GUI_ALLOC_LockH>
 801f7b8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801f7bc:	9000      	str	r0, [sp, #0]
 801f7be:	f018 0f02 	tst.w	r8, #2
 801f7c2:	d041      	beq.n	801f848 <WM__InvalidateRect+0xa8>
 801f7c4:	4602      	mov	r2, r0
 801f7c6:	4629      	mov	r1, r5
 801f7c8:	a802      	add	r0, sp, #8
 801f7ca:	f7f9 fc85 	bl	80190d8 <GUI__IntersectRects>
 801f7ce:	2800      	cmp	r0, #0
 801f7d0:	d03a      	beq.n	801f848 <WM__InvalidateRect+0xa8>
 801f7d2:	f640 0301 	movw	r3, #2049	; 0x801
 801f7d6:	ea08 0303 	and.w	r3, r8, r3
 801f7da:	2b01      	cmp	r3, #1
 801f7dc:	d044      	beq.n	801f868 <WM__InvalidateRect+0xc8>
 801f7de:	4620      	mov	r0, r4
 801f7e0:	4632      	mov	r2, r6
 801f7e2:	a902      	add	r1, sp, #8
 801f7e4:	f7ff fb52 	bl	801ee8c <_Invalidate1Abs>
 801f7e8:	9b00      	ldr	r3, [sp, #0]
 801f7ea:	69dc      	ldr	r4, [r3, #28]
 801f7ec:	42bc      	cmp	r4, r7
 801f7ee:	d02b      	beq.n	801f848 <WM__InvalidateRect+0xa8>
 801f7f0:	b354      	cbz	r4, 801f848 <WM__InvalidateRect+0xa8>
 801f7f2:	4620      	mov	r0, r4
 801f7f4:	f7f3 f876 	bl	80128e4 <GUI_ALLOC_LockH>
 801f7f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f7fa:	9001      	str	r0, [sp, #4]
 801f7fc:	079b      	lsls	r3, r3, #30
 801f7fe:	d529      	bpl.n	801f854 <WM__InvalidateRect+0xb4>
 801f800:	4602      	mov	r2, r0
 801f802:	a902      	add	r1, sp, #8
 801f804:	a804      	add	r0, sp, #16
 801f806:	f7f9 fc67 	bl	80190d8 <GUI__IntersectRects>
 801f80a:	b318      	cbz	r0, 801f854 <WM__InvalidateRect+0xb4>
 801f80c:	a801      	add	r0, sp, #4
 801f80e:	f7f3 f87d 	bl	801290c <GUI_ALLOC_UnlockH>
 801f812:	4632      	mov	r2, r6
 801f814:	a904      	add	r1, sp, #16
 801f816:	4620      	mov	r0, r4
 801f818:	f7ff fb38 	bl	801ee8c <_Invalidate1Abs>
 801f81c:	4620      	mov	r0, r4
 801f81e:	f001 f9d1 	bl	8020bc4 <WM_GetFirstChild>
 801f822:	4605      	mov	r5, r0
 801f824:	b150      	cbz	r0, 801f83c <WM__InvalidateRect+0x9c>
 801f826:	4628      	mov	r0, r5
 801f828:	4632      	mov	r2, r6
 801f82a:	a904      	add	r1, sp, #16
 801f82c:	f7ff fe06 	bl	801f43c <WM_InvalidateWindowAndDescsEx>
 801f830:	4628      	mov	r0, r5
 801f832:	f7f3 f84d 	bl	80128d0 <GUI_ALLOC_h2p>
 801f836:	6a05      	ldr	r5, [r0, #32]
 801f838:	2d00      	cmp	r5, #0
 801f83a:	d1f4      	bne.n	801f826 <WM__InvalidateRect+0x86>
 801f83c:	4620      	mov	r0, r4
 801f83e:	f7f3 f847 	bl	80128d0 <GUI_ALLOC_h2p>
 801f842:	6a04      	ldr	r4, [r0, #32]
 801f844:	42a7      	cmp	r7, r4
 801f846:	d1d3      	bne.n	801f7f0 <WM__InvalidateRect+0x50>
 801f848:	4668      	mov	r0, sp
 801f84a:	f7f3 f85f 	bl	801290c <GUI_ALLOC_UnlockH>
 801f84e:	b006      	add	sp, #24
 801f850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f854:	a801      	add	r0, sp, #4
 801f856:	f7f3 f859 	bl	801290c <GUI_ALLOC_UnlockH>
 801f85a:	4620      	mov	r0, r4
 801f85c:	f7f3 f838 	bl	80128d0 <GUI_ALLOC_h2p>
 801f860:	6a04      	ldr	r4, [r0, #32]
 801f862:	42a7      	cmp	r7, r4
 801f864:	d1c4      	bne.n	801f7f0 <WM__InvalidateRect+0x50>
 801f866:	e7ef      	b.n	801f848 <WM__InvalidateRect+0xa8>
 801f868:	9900      	ldr	r1, [sp, #0]
 801f86a:	4633      	mov	r3, r6
 801f86c:	a802      	add	r0, sp, #8
 801f86e:	6a0a      	ldr	r2, [r1, #32]
 801f870:	6989      	ldr	r1, [r1, #24]
 801f872:	f7ff ff95 	bl	801f7a0 <WM__InvalidateRect>
 801f876:	e7b7      	b.n	801f7e8 <WM__InvalidateRect+0x48>

0801f878 <WM_InvalidateRect.part.2>:
 801f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f87c:	4607      	mov	r7, r0
 801f87e:	b086      	sub	sp, #24
 801f880:	460c      	mov	r4, r1
 801f882:	f7f8 fa59 	bl	8017d38 <GUI_Lock>
 801f886:	4638      	mov	r0, r7
 801f888:	f7f3 f82c 	bl	80128e4 <GUI_ALLOC_LockH>
 801f88c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801f890:	9000      	str	r0, [sp, #0]
 801f892:	f018 0f02 	tst.w	r8, #2
 801f896:	d02f      	beq.n	801f8f8 <WM_InvalidateRect.part.2+0x80>
 801f898:	ae04      	add	r6, sp, #16
 801f89a:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 801f89e:	c803      	ldmia	r0, {r0, r1}
 801f8a0:	e886 0003 	stmia.w	r6, {r0, r1}
 801f8a4:	d145      	bne.n	801f932 <WM_InvalidateRect.part.2+0xba>
 801f8a6:	b17c      	cbz	r4, 801f8c8 <WM_InvalidateRect.part.2+0x50>
 801f8a8:	6820      	ldr	r0, [r4, #0]
 801f8aa:	ab02      	add	r3, sp, #8
 801f8ac:	6861      	ldr	r1, [r4, #4]
 801f8ae:	9c00      	ldr	r4, [sp, #0]
 801f8b0:	c303      	stmia	r3!, {r0, r1}
 801f8b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f8b6:	a802      	add	r0, sp, #8
 801f8b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f8bc:	f7f3 fe96 	bl	80135ec <GUI_MoveRect>
 801f8c0:	a902      	add	r1, sp, #8
 801f8c2:	4630      	mov	r0, r6
 801f8c4:	f7f9 fbea 	bl	801909c <GUI__IntersectRect>
 801f8c8:	463d      	mov	r5, r7
 801f8ca:	e008      	b.n	801f8de <WM_InvalidateRect.part.2+0x66>
 801f8cc:	f7f9 fbe6 	bl	801909c <GUI__IntersectRect>
 801f8d0:	9b01      	ldr	r3, [sp, #4]
 801f8d2:	a801      	add	r0, sp, #4
 801f8d4:	699c      	ldr	r4, [r3, #24]
 801f8d6:	b1bc      	cbz	r4, 801f908 <WM_InvalidateRect.part.2+0x90>
 801f8d8:	4625      	mov	r5, r4
 801f8da:	f7f3 f817 	bl	801290c <GUI_ALLOC_UnlockH>
 801f8de:	4628      	mov	r0, r5
 801f8e0:	f7f3 f800 	bl	80128e4 <GUI_ALLOC_LockH>
 801f8e4:	4603      	mov	r3, r0
 801f8e6:	4630      	mov	r0, r6
 801f8e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f8ea:	4619      	mov	r1, r3
 801f8ec:	9301      	str	r3, [sp, #4]
 801f8ee:	0793      	lsls	r3, r2, #30
 801f8f0:	d4ec      	bmi.n	801f8cc <WM_InvalidateRect.part.2+0x54>
 801f8f2:	a801      	add	r0, sp, #4
 801f8f4:	f7f3 f80a 	bl	801290c <GUI_ALLOC_UnlockH>
 801f8f8:	4668      	mov	r0, sp
 801f8fa:	f7f3 f807 	bl	801290c <GUI_ALLOC_UnlockH>
 801f8fe:	f7f8 fa11 	bl	8017d24 <GUI_Unlock>
 801f902:	b006      	add	sp, #24
 801f904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f908:	f7f3 f800 	bl	801290c <GUI_ALLOC_UnlockH>
 801f90c:	4b10      	ldr	r3, [pc, #64]	; (801f950 <WM_InvalidateRect.part.2+0xd8>)
 801f90e:	681a      	ldr	r2, [r3, #0]
 801f910:	42aa      	cmp	r2, r5
 801f912:	d002      	beq.n	801f91a <WM_InvalidateRect.part.2+0xa2>
 801f914:	685b      	ldr	r3, [r3, #4]
 801f916:	429d      	cmp	r5, r3
 801f918:	d1ee      	bne.n	801f8f8 <WM_InvalidateRect.part.2+0x80>
 801f91a:	f640 0301 	movw	r3, #2049	; 0x801
 801f91e:	ea08 0303 	and.w	r3, r8, r3
 801f922:	2b01      	cmp	r3, #1
 801f924:	d00b      	beq.n	801f93e <WM_InvalidateRect.part.2+0xc6>
 801f926:	4631      	mov	r1, r6
 801f928:	4638      	mov	r0, r7
 801f92a:	2220      	movs	r2, #32
 801f92c:	f7ff faae 	bl	801ee8c <_Invalidate1Abs>
 801f930:	e7e2      	b.n	801f8f8 <WM_InvalidateRect.part.2+0x80>
 801f932:	4638      	mov	r0, r7
 801f934:	f7ff fc30 	bl	801f198 <WM__InvalidateDrawAndDescs>
 801f938:	2c00      	cmp	r4, #0
 801f93a:	d1b5      	bne.n	801f8a8 <WM_InvalidateRect.part.2+0x30>
 801f93c:	e7c4      	b.n	801f8c8 <WM_InvalidateRect.part.2+0x50>
 801f93e:	9900      	ldr	r1, [sp, #0]
 801f940:	4630      	mov	r0, r6
 801f942:	2320      	movs	r3, #32
 801f944:	6a0a      	ldr	r2, [r1, #32]
 801f946:	6989      	ldr	r1, [r1, #24]
 801f948:	f7ff ff2a 	bl	801f7a0 <WM__InvalidateRect>
 801f94c:	e7d4      	b.n	801f8f8 <WM_InvalidateRect.part.2+0x80>
 801f94e:	bf00      	nop
 801f950:	200467fc 	.word	0x200467fc

0801f954 <_cbBackWin>:
 801f954:	6803      	ldr	r3, [r0, #0]
 801f956:	2b0e      	cmp	r3, #14
 801f958:	d034      	beq.n	801f9c4 <_cbBackWin+0x70>
 801f95a:	2b0f      	cmp	r3, #15
 801f95c:	b510      	push	{r4, lr}
 801f95e:	4604      	mov	r4, r0
 801f960:	d116      	bne.n	801f990 <_cbBackWin+0x3c>
 801f962:	4a26      	ldr	r2, [pc, #152]	; (801f9fc <_cbBackWin+0xa8>)
 801f964:	6843      	ldr	r3, [r0, #4]
 801f966:	6811      	ldr	r1, [r2, #0]
 801f968:	428b      	cmp	r3, r1
 801f96a:	d045      	beq.n	801f9f8 <_cbBackWin+0xa4>
 801f96c:	6852      	ldr	r2, [r2, #4]
 801f96e:	4293      	cmp	r3, r2
 801f970:	bf14      	ite	ne
 801f972:	f04f 33ff 	movne.w	r3, #4294967295
 801f976:	2301      	moveq	r3, #1
 801f978:	4921      	ldr	r1, [pc, #132]	; (801fa00 <_cbBackWin+0xac>)
 801f97a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 801f97e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801f982:	4290      	cmp	r0, r2
 801f984:	d01b      	beq.n	801f9be <_cbBackWin+0x6a>
 801f986:	f7f3 ff4b 	bl	8013820 <GUI_SetBkColor>
 801f98a:	f7f4 f889 	bl	8013aa0 <GUI_Clear>
 801f98e:	6823      	ldr	r3, [r4, #0]
 801f990:	3b0e      	subs	r3, #14
 801f992:	6860      	ldr	r0, [r4, #4]
 801f994:	2b1a      	cmp	r3, #26
 801f996:	d812      	bhi.n	801f9be <_cbBackWin+0x6a>
 801f998:	e8df f003 	tbb	[pc, r3]
 801f99c:	11111119 	.word	0x11111119
 801f9a0:	110e1111 	.word	0x110e1111
 801f9a4:	11111e11 	.word	0x11111e11
 801f9a8:	11111111 	.word	0x11111111
 801f9ac:	11111111 	.word	0x11111111
 801f9b0:	11111120 	.word	0x11111120
 801f9b4:	1111      	.short	0x1111
 801f9b6:	24          	.byte	0x24
 801f9b7:	00          	.byte	0x00
 801f9b8:	68e1      	ldr	r1, [r4, #12]
 801f9ba:	f002 f811 	bl	80219e0 <WM__GetClientRectEx>
 801f9be:	2300      	movs	r3, #0
 801f9c0:	60e3      	str	r3, [r4, #12]
 801f9c2:	bd10      	pop	{r4, pc}
 801f9c4:	68c3      	ldr	r3, [r0, #12]
 801f9c6:	685a      	ldr	r2, [r3, #4]
 801f9c8:	2a01      	cmp	r2, #1
 801f9ca:	d012      	beq.n	801f9f2 <_cbBackWin+0x9e>
 801f9cc:	4770      	bx	lr
 801f9ce:	4621      	mov	r1, r4
 801f9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9d4:	f001 b9a6 	b.w	8020d24 <WM_SendToParent>
 801f9d8:	60e0      	str	r0, [r4, #12]
 801f9da:	bd10      	pop	{r4, pc}
 801f9dc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801f9e0:	60e3      	str	r3, [r4, #12]
 801f9e2:	bd10      	pop	{r4, pc}
 801f9e4:	2800      	cmp	r0, #0
 801f9e6:	d0ec      	beq.n	801f9c2 <_cbBackWin+0x6e>
 801f9e8:	2100      	movs	r1, #0
 801f9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f9ee:	f7ff bf43 	b.w	801f878 <WM_InvalidateRect.part.2>
 801f9f2:	6818      	ldr	r0, [r3, #0]
 801f9f4:	f7f6 be4e 	b.w	8016694 <GUI_StoreKey>
 801f9f8:	2300      	movs	r3, #0
 801f9fa:	e7bd      	b.n	801f978 <_cbBackWin+0x24>
 801f9fc:	200467fc 	.word	0x200467fc
 801fa00:	20046830 	.word	0x20046830

0801fa04 <WM_DeleteWindow.part.3>:
 801fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa08:	4e84      	ldr	r6, [pc, #528]	; (801fc1c <WM_DeleteWindow.part.3+0x218>)
 801fa0a:	b086      	sub	sp, #24
 801fa0c:	4604      	mov	r4, r0
 801fa0e:	f7f8 f993 	bl	8017d38 <GUI_Lock>
 801fa12:	6830      	ldr	r0, [r6, #0]
 801fa14:	b148      	cbz	r0, 801fa2a <WM_DeleteWindow.part.3+0x26>
 801fa16:	42a0      	cmp	r0, r4
 801fa18:	d102      	bne.n	801fa20 <WM_DeleteWindow.part.3+0x1c>
 801fa1a:	e00b      	b.n	801fa34 <WM_DeleteWindow.part.3+0x30>
 801fa1c:	4284      	cmp	r4, r0
 801fa1e:	d009      	beq.n	801fa34 <WM_DeleteWindow.part.3+0x30>
 801fa20:	f7f2 ff56 	bl	80128d0 <GUI_ALLOC_h2p>
 801fa24:	6940      	ldr	r0, [r0, #20]
 801fa26:	2800      	cmp	r0, #0
 801fa28:	d1f8      	bne.n	801fa1c <WM_DeleteWindow.part.3+0x18>
 801fa2a:	f7f8 f97b 	bl	8017d24 <GUI_Unlock>
 801fa2e:	b006      	add	sp, #24
 801fa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa34:	4625      	mov	r5, r4
 801fa36:	e000      	b.n	801fa3a <WM_DeleteWindow.part.3+0x36>
 801fa38:	461d      	mov	r5, r3
 801fa3a:	4628      	mov	r0, r5
 801fa3c:	f7f2 ff48 	bl	80128d0 <GUI_ALLOC_h2p>
 801fa40:	6983      	ldr	r3, [r0, #24]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d1f8      	bne.n	801fa38 <WM_DeleteWindow.part.3+0x34>
 801fa46:	4f76      	ldr	r7, [pc, #472]	; (801fc20 <WM_DeleteWindow.part.3+0x21c>)
 801fa48:	683a      	ldr	r2, [r7, #0]
 801fa4a:	4295      	cmp	r5, r2
 801fa4c:	f000 80de 	beq.w	801fc0c <WM_DeleteWindow.part.3+0x208>
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	429d      	cmp	r5, r3
 801fa54:	bf14      	ite	ne
 801fa56:	f04f 35ff 	movne.w	r5, #4294967295
 801fa5a:	2501      	moveq	r5, #1
 801fa5c:	230b      	movs	r3, #11
 801fa5e:	f10d 0818 	add.w	r8, sp, #24
 801fa62:	4620      	mov	r0, r4
 801fa64:	9403      	str	r4, [sp, #12]
 801fa66:	f848 3d10 	str.w	r3, [r8, #-16]!
 801fa6a:	4641      	mov	r1, r8
 801fa6c:	f001 feaa 	bl	80217c4 <WM__SendMessage>
 801fa70:	4620      	mov	r0, r4
 801fa72:	f001 fb41 	bl	80210f8 <WM__DeleteAssocTimer>
 801fa76:	4620      	mov	r0, r4
 801fa78:	f7f2 ff34 	bl	80128e4 <GUI_ALLOC_LockH>
 801fa7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fa7e:	9001      	str	r0, [sp, #4]
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	f040 80a2 	bne.w	801fbca <WM_DeleteWindow.part.3+0x1c6>
 801fa86:	4b67      	ldr	r3, [pc, #412]	; (801fc24 <WM_DeleteWindow.part.3+0x220>)
 801fa88:	2100      	movs	r1, #0
 801fa8a:	4a67      	ldr	r2, [pc, #412]	; (801fc28 <WM_DeleteWindow.part.3+0x224>)
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	4867      	ldr	r0, [pc, #412]	; (801fc2c <WM_DeleteWindow.part.3+0x228>)
 801fa90:	6081      	str	r1, [r0, #8]
 801fa92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fa96:	4284      	cmp	r4, r0
 801fa98:	bf08      	it	eq
 801fa9a:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 801fa9e:	4a64      	ldr	r2, [pc, #400]	; (801fc30 <WM_DeleteWindow.part.3+0x22c>)
 801faa0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801faa4:	428c      	cmp	r4, r1
 801faa6:	f000 8094 	beq.w	801fbd2 <WM_DeleteWindow.part.3+0x1ce>
 801faaa:	4b62      	ldr	r3, [pc, #392]	; (801fc34 <WM_DeleteWindow.part.3+0x230>)
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	b153      	cbz	r3, 801fac6 <WM_DeleteWindow.part.3+0xc2>
 801fab0:	2100      	movs	r1, #0
 801fab2:	e001      	b.n	801fab8 <WM_DeleteWindow.part.3+0xb4>
 801fab4:	681b      	ldr	r3, [r3, #0]
 801fab6:	b133      	cbz	r3, 801fac6 <WM_DeleteWindow.part.3+0xc2>
 801fab8:	685a      	ldr	r2, [r3, #4]
 801faba:	4294      	cmp	r4, r2
 801fabc:	d1fa      	bne.n	801fab4 <WM_DeleteWindow.part.3+0xb0>
 801fabe:	6059      	str	r1, [r3, #4]
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d1f8      	bne.n	801fab8 <WM_DeleteWindow.part.3+0xb4>
 801fac6:	4620      	mov	r0, r4
 801fac8:	2107      	movs	r1, #7
 801faca:	f001 f8cb 	bl	8020c64 <WM_NotifyParent>
 801face:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fad2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801fad6:	2800      	cmp	r0, #0
 801fad8:	d15d      	bne.n	801fb96 <WM_DeleteWindow.part.3+0x192>
 801fada:	4620      	mov	r0, r4
 801fadc:	f7f2 ff02 	bl	80128e4 <GUI_ALLOC_LockH>
 801fae0:	6981      	ldr	r1, [r0, #24]
 801fae2:	9002      	str	r0, [sp, #8]
 801fae4:	2900      	cmp	r1, #0
 801fae6:	d162      	bne.n	801fbae <WM_DeleteWindow.part.3+0x1aa>
 801fae8:	4640      	mov	r0, r8
 801faea:	f7f2 ff0f 	bl	801290c <GUI_ALLOC_UnlockH>
 801faee:	6830      	ldr	r0, [r6, #0]
 801faf0:	b158      	cbz	r0, 801fb0a <WM_DeleteWindow.part.3+0x106>
 801faf2:	f7f2 feed 	bl	80128d0 <GUI_ALLOC_h2p>
 801faf6:	4680      	mov	r8, r0
 801faf8:	6940      	ldr	r0, [r0, #20]
 801fafa:	4284      	cmp	r4, r0
 801fafc:	d1f8      	bne.n	801faf0 <WM_DeleteWindow.part.3+0xec>
 801fafe:	4620      	mov	r0, r4
 801fb00:	f7f2 fee6 	bl	80128d0 <GUI_ALLOC_h2p>
 801fb04:	6943      	ldr	r3, [r0, #20]
 801fb06:	f8c8 3014 	str.w	r3, [r8, #20]
 801fb0a:	9b01      	ldr	r3, [sp, #4]
 801fb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb0e:	07d9      	lsls	r1, r3, #31
 801fb10:	d503      	bpl.n	801fb1a <WM_DeleteWindow.part.3+0x116>
 801fb12:	4949      	ldr	r1, [pc, #292]	; (801fc38 <WM_DeleteWindow.part.3+0x234>)
 801fb14:	680a      	ldr	r2, [r1, #0]
 801fb16:	3a01      	subs	r2, #1
 801fb18:	600a      	str	r2, [r1, #0]
 801fb1a:	069a      	lsls	r2, r3, #26
 801fb1c:	d442      	bmi.n	801fba4 <WM_DeleteWindow.part.3+0x1a0>
 801fb1e:	a801      	add	r0, sp, #4
 801fb20:	f7f2 fef4 	bl	801290c <GUI_ALLOC_UnlockH>
 801fb24:	4a45      	ldr	r2, [pc, #276]	; (801fc3c <WM_DeleteWindow.part.3+0x238>)
 801fb26:	4620      	mov	r0, r4
 801fb28:	8813      	ldrh	r3, [r2, #0]
 801fb2a:	3b01      	subs	r3, #1
 801fb2c:	8013      	strh	r3, [r2, #0]
 801fb2e:	f7f3 f871 	bl	8012c14 <GUI_ALLOC_Free>
 801fb32:	1c6b      	adds	r3, r5, #1
 801fb34:	f43f af79 	beq.w	801fa2a <WM_DeleteWindow.part.3+0x26>
 801fb38:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fb3c:	f7f8 f8fc 	bl	8017d38 <GUI_Lock>
 801fb40:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801fc44 <WM_DeleteWindow.part.3+0x240>
 801fb44:	f8d8 3000 	ldr.w	r3, [r8]
 801fb48:	b905      	cbnz	r5, 801fb4c <WM_DeleteWindow.part.3+0x148>
 801fb4a:	6835      	ldr	r5, [r6, #0]
 801fb4c:	649d      	str	r5, [r3, #72]	; 0x48
 801fb4e:	462c      	mov	r4, r5
 801fb50:	e000      	b.n	801fb54 <WM_DeleteWindow.part.3+0x150>
 801fb52:	461c      	mov	r4, r3
 801fb54:	4620      	mov	r0, r4
 801fb56:	f7f2 febb 	bl	80128d0 <GUI_ALLOC_h2p>
 801fb5a:	6983      	ldr	r3, [r0, #24]
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	d1f8      	bne.n	801fb52 <WM_DeleteWindow.part.3+0x14e>
 801fb60:	6839      	ldr	r1, [r7, #0]
 801fb62:	4a2f      	ldr	r2, [pc, #188]	; (801fc20 <WM_DeleteWindow.part.3+0x21c>)
 801fb64:	428c      	cmp	r4, r1
 801fb66:	d053      	beq.n	801fc10 <WM_DeleteWindow.part.3+0x20c>
 801fb68:	6853      	ldr	r3, [r2, #4]
 801fb6a:	429c      	cmp	r4, r3
 801fb6c:	d054      	beq.n	801fc18 <WM_DeleteWindow.part.3+0x214>
 801fb6e:	f7fa f945 	bl	8019dfc <LCD_SetClipRectMax>
 801fb72:	4628      	mov	r0, r5
 801fb74:	f7f2 feac 	bl	80128d0 <GUI_ALLOC_h2p>
 801fb78:	f8d8 3000 	ldr.w	r3, [r8]
 801fb7c:	f9b0 1000 	ldrsh.w	r1, [r0]
 801fb80:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801fb84:	64d9      	str	r1, [r3, #76]	; 0x4c
 801fb86:	651a      	str	r2, [r3, #80]	; 0x50
 801fb88:	f7f8 f8cc 	bl	8017d24 <GUI_Unlock>
 801fb8c:	f7f8 f8ca 	bl	8017d24 <GUI_Unlock>
 801fb90:	b006      	add	sp, #24
 801fb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb96:	f7ff ff35 	bl	801fa04 <WM_DeleteWindow.part.3>
 801fb9a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801fb9e:	2800      	cmp	r0, #0
 801fba0:	d199      	bne.n	801fad6 <WM_DeleteWindow.part.3+0xd2>
 801fba2:	e79a      	b.n	801fada <WM_DeleteWindow.part.3+0xd6>
 801fba4:	4a26      	ldr	r2, [pc, #152]	; (801fc40 <WM_DeleteWindow.part.3+0x23c>)
 801fba6:	8813      	ldrh	r3, [r2, #0]
 801fba8:	3b01      	subs	r3, #1
 801fbaa:	8013      	strh	r3, [r2, #0]
 801fbac:	e7b7      	b.n	801fb1e <WM_DeleteWindow.part.3+0x11a>
 801fbae:	6a02      	ldr	r2, [r0, #32]
 801fbb0:	2320      	movs	r3, #32
 801fbb2:	f7ff fdf5 	bl	801f7a0 <WM__InvalidateRect>
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	f7f2 fe8a 	bl	80128d0 <GUI_ALLOC_h2p>
 801fbbc:	4681      	mov	r9, r0
 801fbbe:	6980      	ldr	r0, [r0, #24]
 801fbc0:	b958      	cbnz	r0, 801fbda <WM_DeleteWindow.part.3+0x1d6>
 801fbc2:	9b02      	ldr	r3, [sp, #8]
 801fbc4:	2200      	movs	r2, #0
 801fbc6:	619a      	str	r2, [r3, #24]
 801fbc8:	e78e      	b.n	801fae8 <WM_DeleteWindow.part.3+0xe4>
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f7fc fe62 	bl	801c894 <GUI_MEMDEV_Delete>
 801fbd0:	e759      	b.n	801fa86 <WM_DeleteWindow.part.3+0x82>
 801fbd2:	2100      	movs	r1, #0
 801fbd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801fbd8:	e767      	b.n	801faaa <WM_DeleteWindow.part.3+0xa6>
 801fbda:	f7f2 fe79 	bl	80128d0 <GUI_ALLOC_h2p>
 801fbde:	69c3      	ldr	r3, [r0, #28]
 801fbe0:	4682      	mov	sl, r0
 801fbe2:	429c      	cmp	r4, r3
 801fbe4:	d00b      	beq.n	801fbfe <WM_DeleteWindow.part.3+0x1fa>
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	d0eb      	beq.n	801fbc2 <WM_DeleteWindow.part.3+0x1be>
 801fbea:	4618      	mov	r0, r3
 801fbec:	f7f2 fe70 	bl	80128d0 <GUI_ALLOC_h2p>
 801fbf0:	6a03      	ldr	r3, [r0, #32]
 801fbf2:	429c      	cmp	r4, r3
 801fbf4:	d1f7      	bne.n	801fbe6 <WM_DeleteWindow.part.3+0x1e2>
 801fbf6:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801fbfa:	6203      	str	r3, [r0, #32]
 801fbfc:	e7e1      	b.n	801fbc2 <WM_DeleteWindow.part.3+0x1be>
 801fbfe:	4620      	mov	r0, r4
 801fc00:	f7f2 fe66 	bl	80128d0 <GUI_ALLOC_h2p>
 801fc04:	6a03      	ldr	r3, [r0, #32]
 801fc06:	f8ca 301c 	str.w	r3, [sl, #28]
 801fc0a:	e7da      	b.n	801fbc2 <WM_DeleteWindow.part.3+0x1be>
 801fc0c:	461d      	mov	r5, r3
 801fc0e:	e725      	b.n	801fa5c <WM_DeleteWindow.part.3+0x58>
 801fc10:	4618      	mov	r0, r3
 801fc12:	f7f6 fe85 	bl	8016920 <GUI_SelectLayer>
 801fc16:	e7aa      	b.n	801fb6e <WM_DeleteWindow.part.3+0x16a>
 801fc18:	2001      	movs	r0, #1
 801fc1a:	e7fa      	b.n	801fc12 <WM_DeleteWindow.part.3+0x20e>
 801fc1c:	20046818 	.word	0x20046818
 801fc20:	200467fc 	.word	0x200467fc
 801fc24:	2004681c 	.word	0x2004681c
 801fc28:	2004680c 	.word	0x2004680c
 801fc2c:	200003e4 	.word	0x200003e4
 801fc30:	20046840 	.word	0x20046840
 801fc34:	20046838 	.word	0x20046838
 801fc38:	2004684c 	.word	0x2004684c
 801fc3c:	200467f4 	.word	0x200467f4
 801fc40:	20046814 	.word	0x20046814
 801fc44:	20000018 	.word	0x20000018

0801fc48 <_Exec1Input>:
 801fc48:	b570      	push	{r4, r5, r6, lr}
 801fc4a:	4e1f      	ldr	r6, [pc, #124]	; (801fcc8 <_Exec1Input+0x80>)
 801fc4c:	b082      	sub	sp, #8
 801fc4e:	6873      	ldr	r3, [r6, #4]
 801fc50:	b9cb      	cbnz	r3, 801fc86 <_Exec1Input+0x3e>
 801fc52:	4b1e      	ldr	r3, [pc, #120]	; (801fccc <_Exec1Input+0x84>)
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	b103      	cbz	r3, 801fc5a <_Exec1Input+0x12>
 801fc58:	4798      	blx	r3
 801fc5a:	4b1d      	ldr	r3, [pc, #116]	; (801fcd0 <_Exec1Input+0x88>)
 801fc5c:	681b      	ldr	r3, [r3, #0]
 801fc5e:	b10b      	cbz	r3, 801fc64 <_Exec1Input+0x1c>
 801fc60:	4798      	blx	r3
 801fc62:	b968      	cbnz	r0, 801fc80 <_Exec1Input+0x38>
 801fc64:	4b1b      	ldr	r3, [pc, #108]	; (801fcd4 <_Exec1Input+0x8c>)
 801fc66:	681b      	ldr	r3, [r3, #0]
 801fc68:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 801fc6c:	b908      	cbnz	r0, 801fc72 <_Exec1Input+0x2a>
 801fc6e:	b002      	add	sp, #8
 801fc70:	bd70      	pop	{r4, r5, r6, pc}
 801fc72:	f7f6 fd17 	bl	80166a4 <GUI_PollKeyMsg>
 801fc76:	3000      	adds	r0, #0
 801fc78:	bf18      	it	ne
 801fc7a:	2001      	movne	r0, #1
 801fc7c:	b002      	add	sp, #8
 801fc7e:	bd70      	pop	{r4, r5, r6, pc}
 801fc80:	2001      	movs	r0, #1
 801fc82:	b002      	add	sp, #8
 801fc84:	bd70      	pop	{r4, r5, r6, pc}
 801fc86:	f7f8 f857 	bl	8017d38 <GUI_Lock>
 801fc8a:	4b13      	ldr	r3, [pc, #76]	; (801fcd8 <_Exec1Input+0x90>)
 801fc8c:	681c      	ldr	r4, [r3, #0]
 801fc8e:	b18c      	cbz	r4, 801fcb4 <_Exec1Input+0x6c>
 801fc90:	4620      	mov	r0, r4
 801fc92:	f7f2 fe27 	bl	80128e4 <GUI_ALLOC_LockH>
 801fc96:	4603      	mov	r3, r0
 801fc98:	a801      	add	r0, sp, #4
 801fc9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fc9c:	9301      	str	r3, [sp, #4]
 801fc9e:	0412      	lsls	r2, r2, #16
 801fca0:	d50d      	bpl.n	801fcbe <_Exec1Input+0x76>
 801fca2:	695d      	ldr	r5, [r3, #20]
 801fca4:	f7f2 fe32 	bl	801290c <GUI_ALLOC_UnlockH>
 801fca8:	4620      	mov	r0, r4
 801fcaa:	462c      	mov	r4, r5
 801fcac:	f7ff feaa 	bl	801fa04 <WM_DeleteWindow.part.3>
 801fcb0:	2c00      	cmp	r4, #0
 801fcb2:	d1ed      	bne.n	801fc90 <_Exec1Input+0x48>
 801fcb4:	2300      	movs	r3, #0
 801fcb6:	6073      	str	r3, [r6, #4]
 801fcb8:	f7f8 f834 	bl	8017d24 <GUI_Unlock>
 801fcbc:	e7c9      	b.n	801fc52 <_Exec1Input+0xa>
 801fcbe:	a801      	add	r0, sp, #4
 801fcc0:	695c      	ldr	r4, [r3, #20]
 801fcc2:	f7f2 fe23 	bl	801290c <GUI_ALLOC_UnlockH>
 801fcc6:	e7e2      	b.n	801fc8e <_Exec1Input+0x46>
 801fcc8:	200003e4 	.word	0x200003e4
 801fccc:	20046804 	.word	0x20046804
 801fcd0:	200467dc 	.word	0x200467dc
 801fcd4:	20000018 	.word	0x20000018
 801fcd8:	20046818 	.word	0x20046818

0801fcdc <WM__InvalidateParent>:
 801fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fce0:	4605      	mov	r5, r0
 801fce2:	b086      	sub	sp, #24
 801fce4:	4608      	mov	r0, r1
 801fce6:	460c      	mov	r4, r1
 801fce8:	4617      	mov	r7, r2
 801fcea:	f7f2 fdf1 	bl	80128d0 <GUI_ALLOC_h2p>
 801fcee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fcf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801fcf4:	bf14      	ite	ne
 801fcf6:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 801fcfa:	2620      	moveq	r6, #32
 801fcfc:	b914      	cbnz	r4, 801fd04 <WM__InvalidateParent+0x28>
 801fcfe:	b006      	add	sp, #24
 801fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd04:	4620      	mov	r0, r4
 801fd06:	f7f2 fded 	bl	80128e4 <GUI_ALLOC_LockH>
 801fd0a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801fd0e:	9000      	str	r0, [sp, #0]
 801fd10:	f018 0f02 	tst.w	r8, #2
 801fd14:	d043      	beq.n	801fd9e <WM__InvalidateParent+0xc2>
 801fd16:	4602      	mov	r2, r0
 801fd18:	4629      	mov	r1, r5
 801fd1a:	a802      	add	r0, sp, #8
 801fd1c:	f7f9 f9dc 	bl	80190d8 <GUI__IntersectRects>
 801fd20:	2800      	cmp	r0, #0
 801fd22:	d03c      	beq.n	801fd9e <WM__InvalidateParent+0xc2>
 801fd24:	f640 0301 	movw	r3, #2049	; 0x801
 801fd28:	ea08 0303 	and.w	r3, r8, r3
 801fd2c:	2b01      	cmp	r3, #1
 801fd2e:	d040      	beq.n	801fdb2 <WM__InvalidateParent+0xd6>
 801fd30:	4620      	mov	r0, r4
 801fd32:	4632      	mov	r2, r6
 801fd34:	a902      	add	r1, sp, #8
 801fd36:	f7ff f8a9 	bl	801ee8c <_Invalidate1Abs>
 801fd3a:	9b00      	ldr	r3, [sp, #0]
 801fd3c:	69dc      	ldr	r4, [r3, #28]
 801fd3e:	b374      	cbz	r4, 801fd9e <WM__InvalidateParent+0xc2>
 801fd40:	42a7      	cmp	r7, r4
 801fd42:	d02c      	beq.n	801fd9e <WM__InvalidateParent+0xc2>
 801fd44:	4620      	mov	r0, r4
 801fd46:	f7f2 fdcd 	bl	80128e4 <GUI_ALLOC_LockH>
 801fd4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fd4c:	9001      	str	r0, [sp, #4]
 801fd4e:	079b      	lsls	r3, r3, #30
 801fd50:	d52b      	bpl.n	801fdaa <WM__InvalidateParent+0xce>
 801fd52:	4602      	mov	r2, r0
 801fd54:	a902      	add	r1, sp, #8
 801fd56:	a804      	add	r0, sp, #16
 801fd58:	f7f9 f9be 	bl	80190d8 <GUI__IntersectRects>
 801fd5c:	b328      	cbz	r0, 801fdaa <WM__InvalidateParent+0xce>
 801fd5e:	a801      	add	r0, sp, #4
 801fd60:	f7f2 fdd4 	bl	801290c <GUI_ALLOC_UnlockH>
 801fd64:	4632      	mov	r2, r6
 801fd66:	a904      	add	r1, sp, #16
 801fd68:	4620      	mov	r0, r4
 801fd6a:	f7ff f88f 	bl	801ee8c <_Invalidate1Abs>
 801fd6e:	4620      	mov	r0, r4
 801fd70:	f000 ff28 	bl	8020bc4 <WM_GetFirstChild>
 801fd74:	4605      	mov	r5, r0
 801fd76:	b150      	cbz	r0, 801fd8e <WM__InvalidateParent+0xb2>
 801fd78:	4628      	mov	r0, r5
 801fd7a:	4632      	mov	r2, r6
 801fd7c:	a904      	add	r1, sp, #16
 801fd7e:	f7ff fb5d 	bl	801f43c <WM_InvalidateWindowAndDescsEx>
 801fd82:	4628      	mov	r0, r5
 801fd84:	f7f2 fda4 	bl	80128d0 <GUI_ALLOC_h2p>
 801fd88:	6a05      	ldr	r5, [r0, #32]
 801fd8a:	2d00      	cmp	r5, #0
 801fd8c:	d1f4      	bne.n	801fd78 <WM__InvalidateParent+0x9c>
 801fd8e:	4620      	mov	r0, r4
 801fd90:	f7f2 fd9e 	bl	80128d0 <GUI_ALLOC_h2p>
 801fd94:	6a04      	ldr	r4, [r0, #32]
 801fd96:	42a7      	cmp	r7, r4
 801fd98:	d001      	beq.n	801fd9e <WM__InvalidateParent+0xc2>
 801fd9a:	2c00      	cmp	r4, #0
 801fd9c:	d1d2      	bne.n	801fd44 <WM__InvalidateParent+0x68>
 801fd9e:	4668      	mov	r0, sp
 801fda0:	f7f2 fdb4 	bl	801290c <GUI_ALLOC_UnlockH>
 801fda4:	b006      	add	sp, #24
 801fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdaa:	a801      	add	r0, sp, #4
 801fdac:	f7f2 fdae 	bl	801290c <GUI_ALLOC_UnlockH>
 801fdb0:	e7ed      	b.n	801fd8e <WM__InvalidateParent+0xb2>
 801fdb2:	9900      	ldr	r1, [sp, #0]
 801fdb4:	4633      	mov	r3, r6
 801fdb6:	a802      	add	r0, sp, #8
 801fdb8:	6a0a      	ldr	r2, [r1, #32]
 801fdba:	6989      	ldr	r1, [r1, #24]
 801fdbc:	f7ff fcf0 	bl	801f7a0 <WM__InvalidateRect>
 801fdc0:	e7bb      	b.n	801fd3a <WM__InvalidateParent+0x5e>
 801fdc2:	bf00      	nop

0801fdc4 <WM__InvalidateRectEx>:
 801fdc4:	b901      	cbnz	r1, 801fdc8 <WM__InvalidateRectEx+0x4>
 801fdc6:	4770      	bx	lr
 801fdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdca:	4605      	mov	r5, r0
 801fdcc:	b087      	sub	sp, #28
 801fdce:	4608      	mov	r0, r1
 801fdd0:	4616      	mov	r6, r2
 801fdd2:	460c      	mov	r4, r1
 801fdd4:	f7f2 fd86 	bl	80128e4 <GUI_ALLOC_LockH>
 801fdd8:	6a87      	ldr	r7, [r0, #40]	; 0x28
 801fdda:	9000      	str	r0, [sp, #0]
 801fddc:	07ba      	lsls	r2, r7, #30
 801fdde:	d542      	bpl.n	801fe66 <WM__InvalidateRectEx+0xa2>
 801fde0:	4602      	mov	r2, r0
 801fde2:	4629      	mov	r1, r5
 801fde4:	a802      	add	r0, sp, #8
 801fde6:	f7f9 f977 	bl	80190d8 <GUI__IntersectRects>
 801fdea:	2800      	cmp	r0, #0
 801fdec:	d03b      	beq.n	801fe66 <WM__InvalidateRectEx+0xa2>
 801fdee:	f640 0301 	movw	r3, #2049	; 0x801
 801fdf2:	403b      	ands	r3, r7
 801fdf4:	2b01      	cmp	r3, #1
 801fdf6:	d03f      	beq.n	801fe78 <WM__InvalidateRectEx+0xb4>
 801fdf8:	4620      	mov	r0, r4
 801fdfa:	2220      	movs	r2, #32
 801fdfc:	a902      	add	r1, sp, #8
 801fdfe:	f7ff f845 	bl	801ee8c <_Invalidate1Abs>
 801fe02:	9b00      	ldr	r3, [sp, #0]
 801fe04:	69dc      	ldr	r4, [r3, #28]
 801fe06:	b374      	cbz	r4, 801fe66 <WM__InvalidateRectEx+0xa2>
 801fe08:	42a6      	cmp	r6, r4
 801fe0a:	d02c      	beq.n	801fe66 <WM__InvalidateRectEx+0xa2>
 801fe0c:	4620      	mov	r0, r4
 801fe0e:	f7f2 fd69 	bl	80128e4 <GUI_ALLOC_LockH>
 801fe12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fe14:	9001      	str	r0, [sp, #4]
 801fe16:	079b      	lsls	r3, r3, #30
 801fe18:	d52a      	bpl.n	801fe70 <WM__InvalidateRectEx+0xac>
 801fe1a:	4602      	mov	r2, r0
 801fe1c:	a902      	add	r1, sp, #8
 801fe1e:	a804      	add	r0, sp, #16
 801fe20:	f7f9 f95a 	bl	80190d8 <GUI__IntersectRects>
 801fe24:	b320      	cbz	r0, 801fe70 <WM__InvalidateRectEx+0xac>
 801fe26:	a801      	add	r0, sp, #4
 801fe28:	f7f2 fd70 	bl	801290c <GUI_ALLOC_UnlockH>
 801fe2c:	2220      	movs	r2, #32
 801fe2e:	a904      	add	r1, sp, #16
 801fe30:	4620      	mov	r0, r4
 801fe32:	f7ff f82b 	bl	801ee8c <_Invalidate1Abs>
 801fe36:	4620      	mov	r0, r4
 801fe38:	f000 fec4 	bl	8020bc4 <WM_GetFirstChild>
 801fe3c:	4605      	mov	r5, r0
 801fe3e:	b150      	cbz	r0, 801fe56 <WM__InvalidateRectEx+0x92>
 801fe40:	4628      	mov	r0, r5
 801fe42:	2220      	movs	r2, #32
 801fe44:	a904      	add	r1, sp, #16
 801fe46:	f7ff faf9 	bl	801f43c <WM_InvalidateWindowAndDescsEx>
 801fe4a:	4628      	mov	r0, r5
 801fe4c:	f7f2 fd40 	bl	80128d0 <GUI_ALLOC_h2p>
 801fe50:	6a05      	ldr	r5, [r0, #32]
 801fe52:	2d00      	cmp	r5, #0
 801fe54:	d1f4      	bne.n	801fe40 <WM__InvalidateRectEx+0x7c>
 801fe56:	4620      	mov	r0, r4
 801fe58:	f7f2 fd3a 	bl	80128d0 <GUI_ALLOC_h2p>
 801fe5c:	6a04      	ldr	r4, [r0, #32]
 801fe5e:	42a6      	cmp	r6, r4
 801fe60:	d001      	beq.n	801fe66 <WM__InvalidateRectEx+0xa2>
 801fe62:	2c00      	cmp	r4, #0
 801fe64:	d1d2      	bne.n	801fe0c <WM__InvalidateRectEx+0x48>
 801fe66:	4668      	mov	r0, sp
 801fe68:	f7f2 fd50 	bl	801290c <GUI_ALLOC_UnlockH>
 801fe6c:	b007      	add	sp, #28
 801fe6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe70:	a801      	add	r0, sp, #4
 801fe72:	f7f2 fd4b 	bl	801290c <GUI_ALLOC_UnlockH>
 801fe76:	e7ee      	b.n	801fe56 <WM__InvalidateRectEx+0x92>
 801fe78:	9900      	ldr	r1, [sp, #0]
 801fe7a:	2320      	movs	r3, #32
 801fe7c:	a802      	add	r0, sp, #8
 801fe7e:	6a0a      	ldr	r2, [r1, #32]
 801fe80:	6989      	ldr	r1, [r1, #24]
 801fe82:	f7ff fc8d 	bl	801f7a0 <WM__InvalidateRect>
 801fe86:	e7bc      	b.n	801fe02 <WM__InvalidateRectEx+0x3e>

0801fe88 <WM__SendMsgNoData>:
 801fe88:	b500      	push	{lr}
 801fe8a:	b085      	sub	sp, #20
 801fe8c:	ab04      	add	r3, sp, #16
 801fe8e:	9001      	str	r0, [sp, #4]
 801fe90:	f843 1d10 	str.w	r1, [r3, #-16]!
 801fe94:	4619      	mov	r1, r3
 801fe96:	f001 fc95 	bl	80217c4 <WM__SendMessage>
 801fe9a:	b005      	add	sp, #20
 801fe9c:	f85d fb04 	ldr.w	pc, [sp], #4

0801fea0 <WM__GetClientRectWin>:
 801fea0:	2300      	movs	r3, #0
 801fea2:	8882      	ldrh	r2, [r0, #4]
 801fea4:	b430      	push	{r4, r5}
 801fea6:	800b      	strh	r3, [r1, #0]
 801fea8:	804b      	strh	r3, [r1, #2]
 801feaa:	8805      	ldrh	r5, [r0, #0]
 801feac:	8844      	ldrh	r4, [r0, #2]
 801feae:	88c3      	ldrh	r3, [r0, #6]
 801feb0:	1b52      	subs	r2, r2, r5
 801feb2:	1b1b      	subs	r3, r3, r4
 801feb4:	808a      	strh	r2, [r1, #4]
 801feb6:	80cb      	strh	r3, [r1, #6]
 801feb8:	bc30      	pop	{r4, r5}
 801feba:	4770      	bx	lr

0801febc <WM_CreateWindowAsChild>:
 801febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec0:	b087      	sub	sp, #28
 801fec2:	461e      	mov	r6, r3
 801fec4:	4681      	mov	r9, r0
 801fec6:	468a      	mov	sl, r1
 801fec8:	4615      	mov	r5, r2
 801feca:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801fece:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fed0:	f7f7 ff32 	bl	8017d38 <GUI_Lock>
 801fed4:	4b68      	ldr	r3, [pc, #416]	; (8020078 <WM_CreateWindowAsChild+0x1bc>)
 801fed6:	681f      	ldr	r7, [r3, #0]
 801fed8:	f1b8 0f00 	cmp.w	r8, #0
 801fedc:	d10f      	bne.n	801fefe <WM_CreateWindowAsChild+0x42>
 801fede:	4b67      	ldr	r3, [pc, #412]	; (802007c <WM_CreateWindowAsChild+0x1c0>)
 801fee0:	881b      	ldrh	r3, [r3, #0]
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d16c      	bne.n	801ffc0 <WM_CreateWindowAsChild+0x104>
 801fee6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801feea:	f7f2 feb3 	bl	8012c54 <GUI_ALLOC_AllocZero>
 801feee:	4604      	mov	r4, r0
 801fef0:	bb30      	cbnz	r0, 801ff40 <WM_CreateWindowAsChild+0x84>
 801fef2:	f7f7 ff17 	bl	8017d24 <GUI_Unlock>
 801fef6:	4620      	mov	r0, r4
 801fef8:	b007      	add	sp, #28
 801fefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fefe:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ff02:	d068      	beq.n	801ffd6 <WM_CreateWindowAsChild+0x11a>
 801ff04:	4640      	mov	r0, r8
 801ff06:	f7f2 fced 	bl	80128e4 <GUI_ALLOC_LockH>
 801ff0a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ff0e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ff12:	4491      	add	r9, r2
 801ff14:	9001      	str	r0, [sp, #4]
 801ff16:	449a      	add	sl, r3
 801ff18:	b91d      	cbnz	r5, 801ff22 <WM_CreateWindowAsChild+0x66>
 801ff1a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801ff1e:	1aad      	subs	r5, r5, r2
 801ff20:	3501      	adds	r5, #1
 801ff22:	b91e      	cbnz	r6, 801ff2c <WM_CreateWindowAsChild+0x70>
 801ff24:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 801ff28:	1af6      	subs	r6, r6, r3
 801ff2a:	3601      	adds	r6, #1
 801ff2c:	a801      	add	r0, sp, #4
 801ff2e:	f7f2 fced 	bl	801290c <GUI_ALLOC_UnlockH>
 801ff32:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801ff36:	f7f2 fe8d 	bl	8012c54 <GUI_ALLOC_AllocZero>
 801ff3a:	4604      	mov	r4, r0
 801ff3c:	2800      	cmp	r0, #0
 801ff3e:	d0d8      	beq.n	801fef2 <WM_CreateWindowAsChild+0x36>
 801ff40:	4a4e      	ldr	r2, [pc, #312]	; (802007c <WM_CreateWindowAsChild+0x1c0>)
 801ff42:	444d      	add	r5, r9
 801ff44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff46:	4456      	add	r6, sl
 801ff48:	f10d 0b18 	add.w	fp, sp, #24
 801ff4c:	3d01      	subs	r5, #1
 801ff4e:	431f      	orrs	r7, r3
 801ff50:	8813      	ldrh	r3, [r2, #0]
 801ff52:	3e01      	subs	r6, #1
 801ff54:	3301      	adds	r3, #1
 801ff56:	8013      	strh	r3, [r2, #0]
 801ff58:	f7f2 fcc4 	bl	80128e4 <GUI_ALLOC_LockH>
 801ff5c:	4a48      	ldr	r2, [pc, #288]	; (8020080 <WM_CreateWindowAsChild+0x1c4>)
 801ff5e:	4603      	mov	r3, r0
 801ff60:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801ff62:	403a      	ands	r2, r7
 801ff64:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff66:	f84b 3d18 	str.w	r3, [fp, #-24]!
 801ff6a:	430a      	orrs	r2, r1
 801ff6c:	6118      	str	r0, [r3, #16]
 801ff6e:	809d      	strh	r5, [r3, #4]
 801ff70:	4658      	mov	r0, fp
 801ff72:	80de      	strh	r6, [r3, #6]
 801ff74:	f8a3 9000 	strh.w	r9, [r3]
 801ff78:	f8a3 a002 	strh.w	sl, [r3, #2]
 801ff7c:	629a      	str	r2, [r3, #40]	; 0x28
 801ff7e:	f7f2 fcc5 	bl	801290c <GUI_ALLOC_UnlockH>
 801ff82:	4b40      	ldr	r3, [pc, #256]	; (8020084 <WM_CreateWindowAsChild+0x1c8>)
 801ff84:	6818      	ldr	r0, [r3, #0]
 801ff86:	2800      	cmp	r0, #0
 801ff88:	d157      	bne.n	802003a <WM_CreateWindowAsChild+0x17e>
 801ff8a:	601c      	str	r4, [r3, #0]
 801ff8c:	4641      	mov	r1, r8
 801ff8e:	4620      	mov	r0, r4
 801ff90:	f7ff f882 	bl	801f098 <WM__InsertWindowIntoList>
 801ff94:	06ba      	lsls	r2, r7, #26
 801ff96:	d42c      	bmi.n	801fff2 <WM_CreateWindowAsChild+0x136>
 801ff98:	07f8      	lsls	r0, r7, #31
 801ff9a:	d41f      	bmi.n	801ffdc <WM_CreateWindowAsChild+0x120>
 801ff9c:	0679      	lsls	r1, r7, #25
 801ff9e:	d424      	bmi.n	801ffea <WM_CreateWindowAsChild+0x12e>
 801ffa0:	07bb      	lsls	r3, r7, #30
 801ffa2:	d458      	bmi.n	8020056 <WM_CreateWindowAsChild+0x19a>
 801ffa4:	2301      	movs	r3, #1
 801ffa6:	a906      	add	r1, sp, #24
 801ffa8:	4620      	mov	r0, r4
 801ffaa:	9403      	str	r4, [sp, #12]
 801ffac:	f841 3d10 	str.w	r3, [r1, #-16]!
 801ffb0:	f001 fc08 	bl	80217c4 <WM__SendMessage>
 801ffb4:	f7f7 feb6 	bl	8017d24 <GUI_Unlock>
 801ffb8:	4620      	mov	r0, r4
 801ffba:	b007      	add	sp, #28
 801ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffc0:	4a31      	ldr	r2, [pc, #196]	; (8020088 <WM_CreateWindowAsChild+0x1cc>)
 801ffc2:	4b32      	ldr	r3, [pc, #200]	; (802008c <WM_CreateWindowAsChild+0x1d0>)
 801ffc4:	6812      	ldr	r2, [r2, #0]
 801ffc6:	7c52      	ldrb	r2, [r2, #17]
 801ffc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ffcc:	1c5a      	adds	r2, r3, #1
 801ffce:	2a01      	cmp	r2, #1
 801ffd0:	d989      	bls.n	801fee6 <WM_CreateWindowAsChild+0x2a>
 801ffd2:	4698      	mov	r8, r3
 801ffd4:	e796      	b.n	801ff04 <WM_CreateWindowAsChild+0x48>
 801ffd6:	f04f 0800 	mov.w	r8, #0
 801ffda:	e784      	b.n	801fee6 <WM_CreateWindowAsChild+0x2a>
 801ffdc:	4a2c      	ldr	r2, [pc, #176]	; (8020090 <WM_CreateWindowAsChild+0x1d4>)
 801ffde:	0679      	lsls	r1, r7, #25
 801ffe0:	6813      	ldr	r3, [r2, #0]
 801ffe2:	f103 0301 	add.w	r3, r3, #1
 801ffe6:	6013      	str	r3, [r2, #0]
 801ffe8:	d5da      	bpl.n	801ffa0 <WM_CreateWindowAsChild+0xe4>
 801ffea:	4620      	mov	r0, r4
 801ffec:	f000 fd96 	bl	8020b1c <WM_BringToBottom>
 801fff0:	e7d6      	b.n	801ffa0 <WM_CreateWindowAsChild+0xe4>
 801fff2:	4e25      	ldr	r6, [pc, #148]	; (8020088 <WM_CreateWindowAsChild+0x1cc>)
 801fff4:	f7f7 fea0 	bl	8017d38 <GUI_Lock>
 801fff8:	4625      	mov	r5, r4
 801fffa:	6833      	ldr	r3, [r6, #0]
 801fffc:	649c      	str	r4, [r3, #72]	; 0x48
 801fffe:	e000      	b.n	8020002 <WM_CreateWindowAsChild+0x146>
 8020000:	4605      	mov	r5, r0
 8020002:	4628      	mov	r0, r5
 8020004:	f7f2 fc64 	bl	80128d0 <GUI_ALLOC_h2p>
 8020008:	6980      	ldr	r0, [r0, #24]
 802000a:	2800      	cmp	r0, #0
 802000c:	d1f8      	bne.n	8020000 <WM_CreateWindowAsChild+0x144>
 802000e:	4b1f      	ldr	r3, [pc, #124]	; (802008c <WM_CreateWindowAsChild+0x1d0>)
 8020010:	681a      	ldr	r2, [r3, #0]
 8020012:	4295      	cmp	r5, r2
 8020014:	d01c      	beq.n	8020050 <WM_CreateWindowAsChild+0x194>
 8020016:	685b      	ldr	r3, [r3, #4]
 8020018:	429d      	cmp	r5, r3
 802001a:	d018      	beq.n	802004e <WM_CreateWindowAsChild+0x192>
 802001c:	f7f9 feee 	bl	8019dfc <LCD_SetClipRectMax>
 8020020:	4620      	mov	r0, r4
 8020022:	f7f2 fc55 	bl	80128d0 <GUI_ALLOC_h2p>
 8020026:	6833      	ldr	r3, [r6, #0]
 8020028:	f9b0 1000 	ldrsh.w	r1, [r0]
 802002c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020030:	64d9      	str	r1, [r3, #76]	; 0x4c
 8020032:	651a      	str	r2, [r3, #80]	; 0x50
 8020034:	f7f7 fe76 	bl	8017d24 <GUI_Unlock>
 8020038:	e7ae      	b.n	801ff98 <WM_CreateWindowAsChild+0xdc>
 802003a:	f7f2 fc49 	bl	80128d0 <GUI_ALLOC_h2p>
 802003e:	4605      	mov	r5, r0
 8020040:	4620      	mov	r0, r4
 8020042:	f7f2 fc45 	bl	80128d0 <GUI_ALLOC_h2p>
 8020046:	696b      	ldr	r3, [r5, #20]
 8020048:	6143      	str	r3, [r0, #20]
 802004a:	616c      	str	r4, [r5, #20]
 802004c:	e79e      	b.n	801ff8c <WM_CreateWindowAsChild+0xd0>
 802004e:	2001      	movs	r0, #1
 8020050:	f7f6 fc66 	bl	8016920 <GUI_SelectLayer>
 8020054:	e7e2      	b.n	802001c <WM_CreateWindowAsChild+0x160>
 8020056:	4620      	mov	r0, r4
 8020058:	f7f2 fc44 	bl	80128e4 <GUI_ALLOC_LockH>
 802005c:	4603      	mov	r3, r0
 802005e:	4658      	mov	r0, fp
 8020060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020062:	9300      	str	r3, [sp, #0]
 8020064:	f042 0202 	orr.w	r2, r2, #2
 8020068:	629a      	str	r2, [r3, #40]	; 0x28
 802006a:	f7f2 fc4f 	bl	801290c <GUI_ALLOC_UnlockH>
 802006e:	2100      	movs	r1, #0
 8020070:	4620      	mov	r0, r4
 8020072:	f7ff fc01 	bl	801f878 <WM_InvalidateRect.part.2>
 8020076:	e795      	b.n	801ffa4 <WM_CreateWindowAsChild+0xe8>
 8020078:	2004682c 	.word	0x2004682c
 802007c:	200467f4 	.word	0x200467f4
 8020080:	003f3f9f 	.word	0x003f3f9f
 8020084:	20046818 	.word	0x20046818
 8020088:	20000018 	.word	0x20000018
 802008c:	200467fc 	.word	0x200467fc
 8020090:	2004684c 	.word	0x2004684c

08020094 <WM__GetNextIVR>:
 8020094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020098:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80202e4 <WM__GetNextIVR+0x250>
 802009c:	b087      	sub	sp, #28
 802009e:	f8d8 3000 	ldr.w	r3, [r8]
 80200a2:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80200a6:	b130      	cbz	r0, 80200b6 <WM__GetNextIVR+0x22>
 80200a8:	4e8d      	ldr	r6, [pc, #564]	; (80202e0 <WM__GetNextIVR+0x24c>)
 80200aa:	6a33      	ldr	r3, [r6, #32]
 80200ac:	2b01      	cmp	r3, #1
 80200ae:	dd05      	ble.n	80200bc <WM__GetNextIVR+0x28>
 80200b0:	3b01      	subs	r3, #1
 80200b2:	2000      	movs	r0, #0
 80200b4:	6233      	str	r3, [r6, #32]
 80200b6:	b007      	add	sp, #28
 80200b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80200bc:	69f3      	ldr	r3, [r6, #28]
 80200be:	f106 0714 	add.w	r7, r6, #20
 80200c2:	ad02      	add	r5, sp, #8
 80200c4:	3301      	adds	r3, #1
 80200c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80200ca:	61f3      	str	r3, [r6, #28]
 80200cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80200d0:	b96b      	cbnz	r3, 80200ee <WM__GetNextIVR+0x5a>
 80200d2:	68f2      	ldr	r2, [r6, #12]
 80200d4:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 80200d8:	9202      	str	r2, [sp, #8]
 80200da:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 80200de:	4c80      	ldr	r4, [pc, #512]	; (80202e0 <WM__GetNextIVR+0x24c>)
 80200e0:	429a      	cmp	r2, r3
 80200e2:	da1a      	bge.n	802011a <WM__GetNextIVR+0x86>
 80200e4:	6a33      	ldr	r3, [r6, #32]
 80200e6:	2000      	movs	r0, #0
 80200e8:	3b01      	subs	r3, #1
 80200ea:	6233      	str	r3, [r6, #32]
 80200ec:	e7e3      	b.n	80200b6 <WM__GetNextIVR+0x22>
 80200ee:	8b32      	ldrh	r2, [r6, #24]
 80200f0:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 80200f4:	3201      	adds	r2, #1
 80200f6:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 80200fa:	b212      	sxth	r2, r2
 80200fc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020100:	4291      	cmp	r1, r2
 8020102:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020106:	dae8      	bge.n	80200da <WM__GetNextIVR+0x46>
 8020108:	8b73      	ldrh	r3, [r6, #26]
 802010a:	89b2      	ldrh	r2, [r6, #12]
 802010c:	3301      	adds	r3, #1
 802010e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020112:	b21b      	sxth	r3, r3
 8020114:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020118:	e7df      	b.n	80200da <WM__GetNextIVR+0x46>
 802011a:	f8d8 3000 	ldr.w	r3, [r8]
 802011e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80202e4 <WM__GetNextIVR+0x250>
 8020122:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8020124:	f7f2 fbde 	bl	80128e4 <GUI_ALLOC_LockH>
 8020128:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802012c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8020130:	4602      	mov	r2, r0
 8020132:	9000      	str	r0, [sp, #0]
 8020134:	4299      	cmp	r1, r3
 8020136:	f000 80bb 	beq.w	80202b0 <WM__GetNextIVR+0x21c>
 802013a:	f8d8 2000 	ldr.w	r2, [r8]
 802013e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020142:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8020144:	b910      	cbnz	r0, 802014c <WM__GetNextIVR+0xb8>
 8020146:	e00d      	b.n	8020164 <WM__GetNextIVR+0xd0>
 8020148:	69a0      	ldr	r0, [r4, #24]
 802014a:	b158      	cbz	r0, 8020164 <WM__GetNextIVR+0xd0>
 802014c:	f7f2 fbc0 	bl	80128d0 <GUI_ALLOC_h2p>
 8020150:	4629      	mov	r1, r5
 8020152:	4604      	mov	r4, r0
 8020154:	6a00      	ldr	r0, [r0, #32]
 8020156:	f7fe fd77 	bl	801ec48 <_Findx0.constprop.10>
 802015a:	2800      	cmp	r0, #0
 802015c:	d0f4      	beq.n	8020148 <WM__GetNextIVR+0xb4>
 802015e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020162:	e7ea      	b.n	802013a <WM__GetNextIVR+0xa6>
 8020164:	9b00      	ldr	r3, [sp, #0]
 8020166:	4629      	mov	r1, r5
 8020168:	69d8      	ldr	r0, [r3, #28]
 802016a:	f7fe fd6d 	bl	801ec48 <_Findx0.constprop.10>
 802016e:	2800      	cmp	r0, #0
 8020170:	d1f5      	bne.n	802015e <WM__GetNextIVR+0xca>
 8020172:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8020176:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802017a:	f8ad 300c 	strh.w	r3, [sp, #12]
 802017e:	429a      	cmp	r2, r3
 8020180:	f300 808e 	bgt.w	80202a0 <WM__GetNextIVR+0x20c>
 8020184:	f8d8 3000 	ldr.w	r3, [r8]
 8020188:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802018a:	2800      	cmp	r0, #0
 802018c:	d02f      	beq.n	80201ee <WM__GetNextIVR+0x15a>
 802018e:	f10d 0810 	add.w	r8, sp, #16
 8020192:	f7f2 fb9d 	bl	80128d0 <GUI_ALLOC_h2p>
 8020196:	6a04      	ldr	r4, [r0, #32]
 8020198:	4681      	mov	r9, r0
 802019a:	b96c      	cbnz	r4, 80201b8 <WM__GetNextIVR+0x124>
 802019c:	e023      	b.n	80201e6 <WM__GetNextIVR+0x152>
 802019e:	07e1      	lsls	r1, r4, #31
 80201a0:	d44c      	bmi.n	802023c <WM__GetNextIVR+0x1a8>
 80201a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80201a6:	9801      	ldr	r0, [sp, #4]
 80201a8:	3b01      	subs	r3, #1
 80201aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80201ae:	6a04      	ldr	r4, [r0, #32]
 80201b0:	a801      	add	r0, sp, #4
 80201b2:	f7f2 fbab 	bl	801290c <GUI_ALLOC_UnlockH>
 80201b6:	b1b4      	cbz	r4, 80201e6 <WM__GetNextIVR+0x152>
 80201b8:	4620      	mov	r0, r4
 80201ba:	f7f2 fb93 	bl	80128e4 <GUI_ALLOC_LockH>
 80201be:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80201c0:	9001      	str	r0, [sp, #4]
 80201c2:	07a3      	lsls	r3, r4, #30
 80201c4:	d5f3      	bpl.n	80201ae <WM__GetNextIVR+0x11a>
 80201c6:	c803      	ldmia	r0, {r0, r1}
 80201c8:	e888 0003 	stmia.w	r8, {r0, r1}
 80201cc:	4641      	mov	r1, r8
 80201ce:	4628      	mov	r0, r5
 80201d0:	f7f3 fae6 	bl	80137a0 <GUI_RectsIntersect>
 80201d4:	2800      	cmp	r0, #0
 80201d6:	d1e2      	bne.n	802019e <WM__GetNextIVR+0x10a>
 80201d8:	9801      	ldr	r0, [sp, #4]
 80201da:	6a04      	ldr	r4, [r0, #32]
 80201dc:	a801      	add	r0, sp, #4
 80201de:	f7f2 fb95 	bl	801290c <GUI_ALLOC_UnlockH>
 80201e2:	2c00      	cmp	r4, #0
 80201e4:	d1e8      	bne.n	80201b8 <WM__GetNextIVR+0x124>
 80201e6:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80201ea:	2800      	cmp	r0, #0
 80201ec:	d1d1      	bne.n	8020192 <WM__GetNextIVR+0xfe>
 80201ee:	9b00      	ldr	r3, [sp, #0]
 80201f0:	69dc      	ldr	r4, [r3, #28]
 80201f2:	2c00      	cmp	r4, #0
 80201f4:	d043      	beq.n	802027e <WM__GetNextIVR+0x1ea>
 80201f6:	f10d 0810 	add.w	r8, sp, #16
 80201fa:	e00d      	b.n	8020218 <WM__GetNextIVR+0x184>
 80201fc:	07e3      	lsls	r3, r4, #31
 80201fe:	d42e      	bmi.n	802025e <WM__GetNextIVR+0x1ca>
 8020200:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020204:	9801      	ldr	r0, [sp, #4]
 8020206:	3b01      	subs	r3, #1
 8020208:	f8ad 300c 	strh.w	r3, [sp, #12]
 802020c:	6a04      	ldr	r4, [r0, #32]
 802020e:	a801      	add	r0, sp, #4
 8020210:	f7f2 fb7c 	bl	801290c <GUI_ALLOC_UnlockH>
 8020214:	2c00      	cmp	r4, #0
 8020216:	d032      	beq.n	802027e <WM__GetNextIVR+0x1ea>
 8020218:	4620      	mov	r0, r4
 802021a:	f7f2 fb63 	bl	80128e4 <GUI_ALLOC_LockH>
 802021e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8020220:	9001      	str	r0, [sp, #4]
 8020222:	07a2      	lsls	r2, r4, #30
 8020224:	d5f2      	bpl.n	802020c <WM__GetNextIVR+0x178>
 8020226:	c803      	ldmia	r0, {r0, r1}
 8020228:	e888 0003 	stmia.w	r8, {r0, r1}
 802022c:	4641      	mov	r1, r8
 802022e:	4628      	mov	r0, r5
 8020230:	f7f3 fab6 	bl	80137a0 <GUI_RectsIntersect>
 8020234:	2800      	cmp	r0, #0
 8020236:	d1e1      	bne.n	80201fc <WM__GetNextIVR+0x168>
 8020238:	9801      	ldr	r0, [sp, #4]
 802023a:	e7e7      	b.n	802020c <WM__GetNextIVR+0x178>
 802023c:	9801      	ldr	r0, [sp, #4]
 802023e:	69c4      	ldr	r4, [r0, #28]
 8020240:	2c00      	cmp	r4, #0
 8020242:	d0b4      	beq.n	80201ae <WM__GetNextIVR+0x11a>
 8020244:	4620      	mov	r0, r4
 8020246:	4642      	mov	r2, r8
 8020248:	4629      	mov	r1, r5
 802024a:	f7fe fbe9 	bl	801ea20 <_Findx1>
 802024e:	4620      	mov	r0, r4
 8020250:	f7f2 fb3e 	bl	80128d0 <GUI_ALLOC_h2p>
 8020254:	6a04      	ldr	r4, [r0, #32]
 8020256:	2c00      	cmp	r4, #0
 8020258:	d1f4      	bne.n	8020244 <WM__GetNextIVR+0x1b0>
 802025a:	9801      	ldr	r0, [sp, #4]
 802025c:	e7bd      	b.n	80201da <WM__GetNextIVR+0x146>
 802025e:	9801      	ldr	r0, [sp, #4]
 8020260:	69c4      	ldr	r4, [r0, #28]
 8020262:	2c00      	cmp	r4, #0
 8020264:	d0d2      	beq.n	802020c <WM__GetNextIVR+0x178>
 8020266:	4620      	mov	r0, r4
 8020268:	4642      	mov	r2, r8
 802026a:	4629      	mov	r1, r5
 802026c:	f7fe fbd8 	bl	801ea20 <_Findx1>
 8020270:	4620      	mov	r0, r4
 8020272:	f7f2 fb2d 	bl	80128d0 <GUI_ALLOC_h2p>
 8020276:	6a04      	ldr	r4, [r0, #32]
 8020278:	2c00      	cmp	r4, #0
 802027a:	d1f4      	bne.n	8020266 <WM__GetNextIVR+0x1d2>
 802027c:	e7dc      	b.n	8020238 <WM__GetNextIVR+0x1a4>
 802027e:	4668      	mov	r0, sp
 8020280:	f7f2 fb44 	bl	801290c <GUI_ALLOC_UnlockH>
 8020284:	69f2      	ldr	r2, [r6, #28]
 8020286:	f644 6320 	movw	r3, #20000	; 0x4e20
 802028a:	429a      	cmp	r2, r3
 802028c:	f73f af2a 	bgt.w	80200e4 <WM__GetNextIVR+0x50>
 8020290:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020294:	e887 0003 	stmia.w	r7, {r0, r1}
 8020298:	f7fe fe6a 	bl	801ef70 <WM__ActivateClipRect>
 802029c:	2001      	movs	r0, #1
 802029e:	e70a      	b.n	80200b6 <WM__GetNextIVR+0x22>
 80202a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80202a4:	e887 0003 	stmia.w	r7, {r0, r1}
 80202a8:	4668      	mov	r0, sp
 80202aa:	f7f2 fb2f 	bl	801290c <GUI_ALLOC_UnlockH>
 80202ae:	e72b      	b.n	8020108 <WM__GetNextIVR+0x74>
 80202b0:	f8d9 1000 	ldr.w	r1, [r9]
 80202b4:	6923      	ldr	r3, [r4, #16]
 80202b6:	6c88      	ldr	r0, [r1, #72]	; 0x48
 80202b8:	9303      	str	r3, [sp, #12]
 80202ba:	b150      	cbz	r0, 80202d2 <WM__GetNextIVR+0x23e>
 80202bc:	f7f2 fb08 	bl	80128d0 <GUI_ALLOC_h2p>
 80202c0:	4604      	mov	r4, r0
 80202c2:	4629      	mov	r1, r5
 80202c4:	6a00      	ldr	r0, [r0, #32]
 80202c6:	f7fe fd05 	bl	801ecd4 <_Findy1.constprop.11>
 80202ca:	69a0      	ldr	r0, [r4, #24]
 80202cc:	2800      	cmp	r0, #0
 80202ce:	d1f5      	bne.n	80202bc <WM__GetNextIVR+0x228>
 80202d0:	9a00      	ldr	r2, [sp, #0]
 80202d2:	69d0      	ldr	r0, [r2, #28]
 80202d4:	4629      	mov	r1, r5
 80202d6:	f7fe fcfd 	bl	801ecd4 <_Findy1.constprop.11>
 80202da:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80202de:	e72c      	b.n	802013a <WM__GetNextIVR+0xa6>
 80202e0:	200003e4 	.word	0x200003e4
 80202e4:	20000018 	.word	0x20000018

080202e8 <WM__InitIVRSearch>:
 80202e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202ec:	4c5e      	ldr	r4, [pc, #376]	; (8020468 <WM__InitIVRSearch+0x180>)
 80202ee:	b089      	sub	sp, #36	; 0x24
 80202f0:	6822      	ldr	r2, [r4, #0]
 80202f2:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 80202f6:	b14b      	cbz	r3, 802030c <WM__InitIVRSearch+0x24>
 80202f8:	4d5c      	ldr	r5, [pc, #368]	; (802046c <WM__InitIVRSearch+0x184>)
 80202fa:	6a2b      	ldr	r3, [r5, #32]
 80202fc:	3301      	adds	r3, #1
 80202fe:	2b01      	cmp	r3, #1
 8020300:	622b      	str	r3, [r5, #32]
 8020302:	dd09      	ble.n	8020318 <WM__InitIVRSearch+0x30>
 8020304:	2001      	movs	r0, #1
 8020306:	b009      	add	sp, #36	; 0x24
 8020308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802030c:	f7fe fe30 	bl	801ef70 <WM__ActivateClipRect>
 8020310:	2001      	movs	r0, #1
 8020312:	b009      	add	sp, #36	; 0x24
 8020314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020318:	4607      	mov	r7, r0
 802031a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 802031c:	f7f2 fae2 	bl	80128e4 <GUI_ALLOC_LockH>
 8020320:	4b53      	ldr	r3, [pc, #332]	; (8020470 <WM__InitIVRSearch+0x188>)
 8020322:	f04f 32ff 	mov.w	r2, #4294967295
 8020326:	9001      	str	r0, [sp, #4]
 8020328:	781b      	ldrb	r3, [r3, #0]
 802032a:	61ea      	str	r2, [r5, #28]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d061      	beq.n	80203f4 <WM__InitIVRSearch+0x10c>
 8020330:	3008      	adds	r0, #8
 8020332:	ae04      	add	r6, sp, #16
 8020334:	c803      	ldmia	r0, {r0, r1}
 8020336:	e886 0003 	stmia.w	r6, {r0, r1}
 802033a:	b11f      	cbz	r7, 8020344 <WM__InitIVRSearch+0x5c>
 802033c:	4639      	mov	r1, r7
 802033e:	4630      	mov	r0, r6
 8020340:	f7f8 feac 	bl	801909c <GUI__IntersectRect>
 8020344:	6823      	ldr	r3, [r4, #0]
 8020346:	4f4b      	ldr	r7, [pc, #300]	; (8020474 <WM__InitIVRSearch+0x18c>)
 8020348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802034a:	2a00      	cmp	r2, #0
 802034c:	f000 8087 	beq.w	802045e <WM__InitIVRSearch+0x176>
 8020350:	6810      	ldr	r0, [r2, #0]
 8020352:	ab06      	add	r3, sp, #24
 8020354:	6851      	ldr	r1, [r2, #4]
 8020356:	f10d 0808 	add.w	r8, sp, #8
 802035a:	683a      	ldr	r2, [r7, #0]
 802035c:	c303      	stmia	r3!, {r0, r1}
 802035e:	9b01      	ldr	r3, [sp, #4]
 8020360:	9302      	str	r3, [sp, #8]
 8020362:	2a00      	cmp	r2, #0
 8020364:	d160      	bne.n	8020428 <WM__InitIVRSearch+0x140>
 8020366:	f9b3 1000 	ldrsh.w	r1, [r3]
 802036a:	a806      	add	r0, sp, #24
 802036c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020370:	f7f3 f93c 	bl	80135ec <GUI_MoveRect>
 8020374:	4630      	mov	r0, r6
 8020376:	a906      	add	r1, sp, #24
 8020378:	f7f8 fe90 	bl	801909c <GUI__IntersectRect>
 802037c:	4640      	mov	r0, r8
 802037e:	f7f2 fac5 	bl	801290c <GUI_ALLOC_UnlockH>
 8020382:	f8d7 9000 	ldr.w	r9, [r7]
 8020386:	f10d 080c 	add.w	r8, sp, #12
 802038a:	f1b9 0f00 	cmp.w	r9, #0
 802038e:	d126      	bne.n	80203de <WM__InitIVRSearch+0xf6>
 8020390:	6823      	ldr	r3, [r4, #0]
 8020392:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8020394:	e008      	b.n	80203a8 <WM__InitIVRSearch+0xc0>
 8020396:	f7f8 fe81 	bl	801909c <GUI__IntersectRect>
 802039a:	9b03      	ldr	r3, [sp, #12]
 802039c:	4640      	mov	r0, r8
 802039e:	699c      	ldr	r4, [r3, #24]
 80203a0:	b38c      	cbz	r4, 8020406 <WM__InitIVRSearch+0x11e>
 80203a2:	4627      	mov	r7, r4
 80203a4:	f7f2 fab2 	bl	801290c <GUI_ALLOC_UnlockH>
 80203a8:	4638      	mov	r0, r7
 80203aa:	f7f2 fa9b 	bl	80128e4 <GUI_ALLOC_LockH>
 80203ae:	4603      	mov	r3, r0
 80203b0:	4630      	mov	r0, r6
 80203b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80203b4:	4619      	mov	r1, r3
 80203b6:	9303      	str	r3, [sp, #12]
 80203b8:	0793      	lsls	r3, r2, #30
 80203ba:	d4ec      	bmi.n	8020396 <WM__InitIVRSearch+0xae>
 80203bc:	4640      	mov	r0, r8
 80203be:	f7f2 faa5 	bl	801290c <GUI_ALLOC_UnlockH>
 80203c2:	6a2b      	ldr	r3, [r5, #32]
 80203c4:	2000      	movs	r0, #0
 80203c6:	3b01      	subs	r3, #1
 80203c8:	622b      	str	r3, [r5, #32]
 80203ca:	e79c      	b.n	8020306 <WM__InitIVRSearch+0x1e>
 80203cc:	f7f8 fe66 	bl	801909c <GUI__IntersectRect>
 80203d0:	9b03      	ldr	r3, [sp, #12]
 80203d2:	4640      	mov	r0, r8
 80203d4:	699f      	ldr	r7, [r3, #24]
 80203d6:	b387      	cbz	r7, 802043a <WM__InitIVRSearch+0x152>
 80203d8:	46b9      	mov	r9, r7
 80203da:	f7f2 fa97 	bl	801290c <GUI_ALLOC_UnlockH>
 80203de:	4648      	mov	r0, r9
 80203e0:	f7f2 fa80 	bl	80128e4 <GUI_ALLOC_LockH>
 80203e4:	4603      	mov	r3, r0
 80203e6:	4630      	mov	r0, r6
 80203e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80203ea:	4619      	mov	r1, r3
 80203ec:	9303      	str	r3, [sp, #12]
 80203ee:	0792      	lsls	r2, r2, #30
 80203f0:	d5e4      	bpl.n	80203bc <WM__InitIVRSearch+0xd4>
 80203f2:	e7eb      	b.n	80203cc <WM__InitIVRSearch+0xe4>
 80203f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80203f6:	f013 0602 	ands.w	r6, r3, #2
 80203fa:	d028      	beq.n	802044e <WM__InitIVRSearch+0x166>
 80203fc:	ae04      	add	r6, sp, #16
 80203fe:	c803      	ldmia	r0, {r0, r1}
 8020400:	e886 0003 	stmia.w	r6, {r0, r1}
 8020404:	e799      	b.n	802033a <WM__InitIVRSearch+0x52>
 8020406:	f7f2 fa81 	bl	801290c <GUI_ALLOC_UnlockH>
 802040a:	4b1b      	ldr	r3, [pc, #108]	; (8020478 <WM__InitIVRSearch+0x190>)
 802040c:	681a      	ldr	r2, [r3, #0]
 802040e:	4297      	cmp	r7, r2
 8020410:	d002      	beq.n	8020418 <WM__InitIVRSearch+0x130>
 8020412:	685b      	ldr	r3, [r3, #4]
 8020414:	429f      	cmp	r7, r3
 8020416:	d1d4      	bne.n	80203c2 <WM__InitIVRSearch+0xda>
 8020418:	4b18      	ldr	r3, [pc, #96]	; (802047c <WM__InitIVRSearch+0x194>)
 802041a:	e896 0003 	ldmia.w	r6, {r0, r1}
 802041e:	e883 0003 	stmia.w	r3, {r0, r1}
 8020422:	f7ff fe37 	bl	8020094 <WM__GetNextIVR>
 8020426:	e76e      	b.n	8020306 <WM__InitIVRSearch+0x1e>
 8020428:	4640      	mov	r0, r8
 802042a:	f7f2 fa6f 	bl	801290c <GUI_ALLOC_UnlockH>
 802042e:	6838      	ldr	r0, [r7, #0]
 8020430:	f7f2 fa58 	bl	80128e4 <GUI_ALLOC_LockH>
 8020434:	4603      	mov	r3, r0
 8020436:	9002      	str	r0, [sp, #8]
 8020438:	e795      	b.n	8020366 <WM__InitIVRSearch+0x7e>
 802043a:	f7f2 fa67 	bl	801290c <GUI_ALLOC_UnlockH>
 802043e:	4b0e      	ldr	r3, [pc, #56]	; (8020478 <WM__InitIVRSearch+0x190>)
 8020440:	681a      	ldr	r2, [r3, #0]
 8020442:	4591      	cmp	r9, r2
 8020444:	d0a4      	beq.n	8020390 <WM__InitIVRSearch+0xa8>
 8020446:	685b      	ldr	r3, [r3, #4]
 8020448:	4599      	cmp	r9, r3
 802044a:	d0a1      	beq.n	8020390 <WM__InitIVRSearch+0xa8>
 802044c:	e7b9      	b.n	80203c2 <WM__InitIVRSearch+0xda>
 802044e:	6a2b      	ldr	r3, [r5, #32]
 8020450:	a801      	add	r0, sp, #4
 8020452:	3b01      	subs	r3, #1
 8020454:	622b      	str	r3, [r5, #32]
 8020456:	f7f2 fa59 	bl	801290c <GUI_ALLOC_UnlockH>
 802045a:	4630      	mov	r0, r6
 802045c:	e753      	b.n	8020306 <WM__InitIVRSearch+0x1e>
 802045e:	a801      	add	r0, sp, #4
 8020460:	f7f2 fa54 	bl	801290c <GUI_ALLOC_UnlockH>
 8020464:	e78d      	b.n	8020382 <WM__InitIVRSearch+0x9a>
 8020466:	bf00      	nop
 8020468:	20000018 	.word	0x20000018
 802046c:	200003e4 	.word	0x200003e4
 8020470:	20046828 	.word	0x20046828
 8020474:	200467f8 	.word	0x200467f8
 8020478:	200467fc 	.word	0x200467fc
 802047c:	200003f0 	.word	0x200003f0

08020480 <WM__Paint1>:
 8020480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020484:	b089      	sub	sp, #36	; 0x24
 8020486:	4606      	mov	r6, r0
 8020488:	f7f2 fa2c 	bl	80128e4 <GUI_ALLOC_LockH>
 802048c:	f100 0308 	add.w	r3, r0, #8
 8020490:	6907      	ldr	r7, [r0, #16]
 8020492:	ac02      	add	r4, sp, #8
 8020494:	9001      	str	r0, [sp, #4]
 8020496:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8020498:	e893 0003 	ldmia.w	r3, {r0, r1}
 802049c:	e884 0003 	stmia.w	r4, {r0, r1}
 80204a0:	a801      	add	r0, sp, #4
 80204a2:	f7f2 fa33 	bl	801290c <GUI_ALLOC_UnlockH>
 80204a6:	b10f      	cbz	r7, 80204ac <WM__Paint1+0x2c>
 80204a8:	07ab      	lsls	r3, r5, #30
 80204aa:	d402      	bmi.n	80204b2 <WM__Paint1+0x32>
 80204ac:	b009      	add	sp, #36	; 0x24
 80204ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204b2:	4f1f      	ldr	r7, [pc, #124]	; (8020530 <WM__Paint1+0xb0>)
 80204b4:	212e      	movs	r1, #46	; 0x2e
 80204b6:	4630      	mov	r0, r6
 80204b8:	f000 fc26 	bl	8020d08 <WM_SendMessageNoPara>
 80204bc:	783b      	ldrb	r3, [r7, #0]
 80204be:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 80204c2:	f103 0301 	add.w	r3, r3, #1
 80204c6:	703b      	strb	r3, [r7, #0]
 80204c8:	d119      	bne.n	80204fe <WM__Paint1+0x7e>
 80204ca:	4620      	mov	r0, r4
 80204cc:	f7ff ff0c 	bl	80202e8 <WM__InitIVRSearch>
 80204d0:	b318      	cbz	r0, 802051a <WM__Paint1+0x9a>
 80204d2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8020534 <WM__Paint1+0xb4>
 80204d6:	f04f 080f 	mov.w	r8, #15
 80204da:	9605      	str	r6, [sp, #20]
 80204dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80204e0:	9407      	str	r4, [sp, #28]
 80204e2:	f7f3 f9b5 	bl	8013850 <GL_SetDefault>
 80204e6:	f8d9 3000 	ldr.w	r3, [r9]
 80204ea:	a904      	add	r1, sp, #16
 80204ec:	4630      	mov	r0, r6
 80204ee:	645d      	str	r5, [r3, #68]	; 0x44
 80204f0:	f001 f968 	bl	80217c4 <WM__SendMessage>
 80204f4:	f7ff fdce 	bl	8020094 <WM__GetNextIVR>
 80204f8:	2800      	cmp	r0, #0
 80204fa:	d1ee      	bne.n	80204da <WM__Paint1+0x5a>
 80204fc:	e00d      	b.n	802051a <WM__Paint1+0x9a>
 80204fe:	230f      	movs	r3, #15
 8020500:	9605      	str	r6, [sp, #20]
 8020502:	9407      	str	r4, [sp, #28]
 8020504:	9304      	str	r3, [sp, #16]
 8020506:	f7f3 f9a3 	bl	8013850 <GL_SetDefault>
 802050a:	4b0a      	ldr	r3, [pc, #40]	; (8020534 <WM__Paint1+0xb4>)
 802050c:	2200      	movs	r2, #0
 802050e:	a904      	add	r1, sp, #16
 8020510:	4630      	mov	r0, r6
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	645a      	str	r2, [r3, #68]	; 0x44
 8020516:	f001 f955 	bl	80217c4 <WM__SendMessage>
 802051a:	783b      	ldrb	r3, [r7, #0]
 802051c:	4630      	mov	r0, r6
 802051e:	212f      	movs	r1, #47	; 0x2f
 8020520:	3b01      	subs	r3, #1
 8020522:	703b      	strb	r3, [r7, #0]
 8020524:	f000 fbf0 	bl	8020d08 <WM_SendMessageNoPara>
 8020528:	b009      	add	sp, #36	; 0x24
 802052a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802052e:	bf00      	nop
 8020530:	20046828 	.word	0x20046828
 8020534:	20000018 	.word	0x20000018

08020538 <WM_Exec>:
 8020538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802053c:	b0ab      	sub	sp, #172	; 0xac
 802053e:	f7f7 fbfb 	bl	8017d38 <GUI_Lock>
 8020542:	4b99      	ldr	r3, [pc, #612]	; (80207a8 <WM_Exec+0x270>)
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	b103      	cbz	r3, 802054a <WM_Exec+0x12>
 8020548:	4798      	blx	r3
 802054a:	2300      	movs	r3, #0
 802054c:	461c      	mov	r4, r3
 802054e:	e000      	b.n	8020552 <WM_Exec+0x1a>
 8020550:	2401      	movs	r4, #1
 8020552:	f7ff fb79 	bl	801fc48 <_Exec1Input>
 8020556:	2800      	cmp	r0, #0
 8020558:	d1fa      	bne.n	8020550 <WM_Exec+0x18>
 802055a:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80207b8 <WM_Exec+0x280>
 802055e:	9406      	str	r4, [sp, #24]
 8020560:	f8da 3000 	ldr.w	r3, [sl]
 8020564:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8020568:	b123      	cbz	r3, 8020574 <WM_Exec+0x3c>
 802056a:	4b90      	ldr	r3, [pc, #576]	; (80207ac <WM_Exec+0x274>)
 802056c:	881b      	ldrh	r3, [r3, #0]
 802056e:	2b00      	cmp	r3, #0
 8020570:	f040 8096 	bne.w	80206a0 <WM_Exec+0x168>
 8020574:	9307      	str	r3, [sp, #28]
 8020576:	f8df b24c 	ldr.w	fp, [pc, #588]	; 80207c4 <WM_Exec+0x28c>
 802057a:	f7f7 fbd3 	bl	8017d24 <GUI_Unlock>
 802057e:	e020      	b.n	80205c2 <WM_Exec+0x8a>
 8020580:	4618      	mov	r0, r3
 8020582:	9305      	str	r3, [sp, #20]
 8020584:	4b8a      	ldr	r3, [pc, #552]	; (80207b0 <WM_Exec+0x278>)
 8020586:	681e      	ldr	r6, [r3, #0]
 8020588:	f7f3 f928 	bl	80137dc <GUI_SaveContext_W>
 802058c:	6823      	ldr	r3, [r4, #0]
 802058e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020592:	9203      	str	r2, [sp, #12]
 8020594:	9304      	str	r3, [sp, #16]
 8020596:	2e00      	cmp	r6, #0
 8020598:	d132      	bne.n	8020600 <WM_Exec+0xc8>
 802059a:	4b86      	ldr	r3, [pc, #536]	; (80207b4 <WM_Exec+0x27c>)
 802059c:	9803      	ldr	r0, [sp, #12]
 802059e:	609e      	str	r6, [r3, #8]
 80205a0:	f7f3 f94a 	bl	8013838 <GUI_SetColor>
 80205a4:	9804      	ldr	r0, [sp, #16]
 80205a6:	f7f3 f93b 	bl	8013820 <GUI_SetBkColor>
 80205aa:	9805      	ldr	r0, [sp, #20]
 80205ac:	f7f3 f920 	bl	80137f0 <GUI_RestoreContext>
 80205b0:	f7f7 fbb8 	bl	8017d24 <GUI_Unlock>
 80205b4:	f8b8 3000 	ldrh.w	r3, [r8]
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	f000 80d0 	beq.w	802075e <WM_Exec+0x226>
 80205be:	2301      	movs	r3, #1
 80205c0:	9306      	str	r3, [sp, #24]
 80205c2:	f8da 3000 	ldr.w	r3, [sl]
 80205c6:	4c7c      	ldr	r4, [pc, #496]	; (80207b8 <WM_Exec+0x280>)
 80205c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	f000 80c6 	beq.w	802075e <WM_Exec+0x226>
 80205d2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80207ac <WM_Exec+0x274>
 80205d6:	f8b8 3000 	ldrh.w	r3, [r8]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	f000 80bf 	beq.w	802075e <WM_Exec+0x226>
 80205e0:	f7f7 fbaa 	bl	8017d38 <GUI_Lock>
 80205e4:	4b73      	ldr	r3, [pc, #460]	; (80207b4 <WM_Exec+0x27c>)
 80205e6:	689e      	ldr	r6, [r3, #8]
 80205e8:	ab0d      	add	r3, sp, #52	; 0x34
 80205ea:	2e00      	cmp	r6, #0
 80205ec:	d0c8      	beq.n	8020580 <WM_Exec+0x48>
 80205ee:	4618      	mov	r0, r3
 80205f0:	9305      	str	r3, [sp, #20]
 80205f2:	f7f3 f8f3 	bl	80137dc <GUI_SaveContext_W>
 80205f6:	6823      	ldr	r3, [r4, #0]
 80205f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80205fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80205fc:	9203      	str	r2, [sp, #12]
 80205fe:	9304      	str	r3, [sp, #16]
 8020600:	ad0b      	add	r5, sp, #44	; 0x2c
 8020602:	4630      	mov	r0, r6
 8020604:	9608      	str	r6, [sp, #32]
 8020606:	f7f2 f96d 	bl	80128e4 <GUI_ALLOC_LockH>
 802060a:	f100 0308 	add.w	r3, r0, #8
 802060e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020610:	9009      	str	r0, [sp, #36]	; 0x24
 8020612:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8020616:	4617      	mov	r7, r2
 8020618:	6904      	ldr	r4, [r0, #16]
 802061a:	9202      	str	r2, [sp, #8]
 802061c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020620:	e885 0003 	stmia.w	r5, {r0, r1}
 8020624:	a809      	add	r0, sp, #36	; 0x24
 8020626:	f7f2 f971 	bl	801290c <GUI_ALLOC_UnlockH>
 802062a:	f244 0320 	movw	r3, #16416	; 0x4020
 802062e:	403b      	ands	r3, r7
 8020630:	2b00      	cmp	r3, #0
 8020632:	d03e      	beq.n	80206b2 <WM_Exec+0x17a>
 8020634:	b1d4      	cbz	r4, 802066c <WM_Exec+0x134>
 8020636:	9c08      	ldr	r4, [sp, #32]
 8020638:	e009      	b.n	802064e <WM_Exec+0x116>
 802063a:	f7f8 fd2f 	bl	801909c <GUI__IntersectRect>
 802063e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020640:	a80a      	add	r0, sp, #40	; 0x28
 8020642:	699f      	ldr	r7, [r3, #24]
 8020644:	2f00      	cmp	r7, #0
 8020646:	d03b      	beq.n	80206c0 <WM_Exec+0x188>
 8020648:	463c      	mov	r4, r7
 802064a:	f7f2 f95f 	bl	801290c <GUI_ALLOC_UnlockH>
 802064e:	4620      	mov	r0, r4
 8020650:	f7f2 f948 	bl	80128e4 <GUI_ALLOC_LockH>
 8020654:	4602      	mov	r2, r0
 8020656:	4628      	mov	r0, r5
 8020658:	6a93      	ldr	r3, [r2, #40]	; 0x28
 802065a:	4611      	mov	r1, r2
 802065c:	920a      	str	r2, [sp, #40]	; 0x28
 802065e:	f013 0302 	ands.w	r3, r3, #2
 8020662:	d1ea      	bne.n	802063a <WM_Exec+0x102>
 8020664:	a80a      	add	r0, sp, #40	; 0x28
 8020666:	461c      	mov	r4, r3
 8020668:	f7f2 f950 	bl	801290c <GUI_ALLOC_UnlockH>
 802066c:	9808      	ldr	r0, [sp, #32]
 802066e:	f7f2 f939 	bl	80128e4 <GUI_ALLOC_LockH>
 8020672:	4b52      	ldr	r3, [pc, #328]	; (80207bc <WM_Exec+0x284>)
 8020674:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020676:	9009      	str	r0, [sp, #36]	; 0x24
 8020678:	4013      	ands	r3, r2
 802067a:	0492      	lsls	r2, r2, #18
 802067c:	bf48      	it	mi
 802067e:	f043 0304 	orrmi.w	r3, r3, #4
 8020682:	6283      	str	r3, [r0, #40]	; 0x28
 8020684:	a809      	add	r0, sp, #36	; 0x24
 8020686:	f7f2 f941 	bl	801290c <GUI_ALLOC_UnlockH>
 802068a:	f8b8 3000 	ldrh.w	r3, [r8]
 802068e:	3b01      	subs	r3, #1
 8020690:	f8a8 3000 	strh.w	r3, [r8]
 8020694:	b16c      	cbz	r4, 80206b2 <WM_Exec+0x17a>
 8020696:	4630      	mov	r0, r6
 8020698:	f7f2 f91a 	bl	80128d0 <GUI_ALLOC_h2p>
 802069c:	6946      	ldr	r6, [r0, #20]
 802069e:	e77c      	b.n	802059a <WM_Exec+0x62>
 80206a0:	4b47      	ldr	r3, [pc, #284]	; (80207c0 <WM_Exec+0x288>)
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d07a      	beq.n	802079e <WM_Exec+0x266>
 80206a8:	2201      	movs	r2, #1
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	9207      	str	r2, [sp, #28]
 80206ae:	4798      	blx	r3
 80206b0:	e761      	b.n	8020576 <WM_Exec+0x3e>
 80206b2:	4630      	mov	r0, r6
 80206b4:	f7f2 f90c 	bl	80128d0 <GUI_ALLOC_h2p>
 80206b8:	6946      	ldr	r6, [r0, #20]
 80206ba:	2e00      	cmp	r6, #0
 80206bc:	d1a1      	bne.n	8020602 <WM_Exec+0xca>
 80206be:	e76c      	b.n	802059a <WM_Exec+0x62>
 80206c0:	f7f2 f924 	bl	801290c <GUI_ALLOC_UnlockH>
 80206c4:	f8db 2000 	ldr.w	r2, [fp]
 80206c8:	42a2      	cmp	r2, r4
 80206ca:	d005      	beq.n	80206d8 <WM_Exec+0x1a0>
 80206cc:	4b3d      	ldr	r3, [pc, #244]	; (80207c4 <WM_Exec+0x28c>)
 80206ce:	685a      	ldr	r2, [r3, #4]
 80206d0:	4294      	cmp	r4, r2
 80206d2:	d001      	beq.n	80206d8 <WM_Exec+0x1a0>
 80206d4:	463c      	mov	r4, r7
 80206d6:	e7c9      	b.n	802066c <WM_Exec+0x134>
 80206d8:	9c08      	ldr	r4, [sp, #32]
 80206da:	f7f7 fb2d 	bl	8017d38 <GUI_Lock>
 80206de:	f8da 3000 	ldr.w	r3, [sl]
 80206e2:	b90c      	cbnz	r4, 80206e8 <WM_Exec+0x1b0>
 80206e4:	4a32      	ldr	r2, [pc, #200]	; (80207b0 <WM_Exec+0x278>)
 80206e6:	6814      	ldr	r4, [r2, #0]
 80206e8:	649c      	str	r4, [r3, #72]	; 0x48
 80206ea:	4627      	mov	r7, r4
 80206ec:	e000      	b.n	80206f0 <WM_Exec+0x1b8>
 80206ee:	461f      	mov	r7, r3
 80206f0:	4638      	mov	r0, r7
 80206f2:	f7f2 f8ed 	bl	80128d0 <GUI_ALLOC_h2p>
 80206f6:	6983      	ldr	r3, [r0, #24]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	d1f8      	bne.n	80206ee <WM_Exec+0x1b6>
 80206fc:	f8db 1000 	ldr.w	r1, [fp]
 8020700:	428f      	cmp	r7, r1
 8020702:	d042      	beq.n	802078a <WM_Exec+0x252>
 8020704:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020708:	429f      	cmp	r7, r3
 802070a:	d03a      	beq.n	8020782 <WM_Exec+0x24a>
 802070c:	f7f9 fb76 	bl	8019dfc <LCD_SetClipRectMax>
 8020710:	4620      	mov	r0, r4
 8020712:	f7f2 f8dd 	bl	80128d0 <GUI_ALLOC_h2p>
 8020716:	f8da 3000 	ldr.w	r3, [sl]
 802071a:	f9b0 1000 	ldrsh.w	r1, [r0]
 802071e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020722:	64d9      	str	r1, [r3, #76]	; 0x4c
 8020724:	651a      	str	r2, [r3, #80]	; 0x50
 8020726:	f7f7 fafd 	bl	8017d24 <GUI_Unlock>
 802072a:	9a02      	ldr	r2, [sp, #8]
 802072c:	0751      	lsls	r1, r2, #29
 802072e:	d511      	bpl.n	8020754 <WM_Exec+0x21c>
 8020730:	f1b9 0f00 	cmp.w	r9, #0
 8020734:	d00c      	beq.n	8020750 <WM_Exec+0x218>
 8020736:	f002 0301 	and.w	r3, r2, #1
 802073a:	f083 0301 	eor.w	r3, r3, #1
 802073e:	9300      	str	r3, [sp, #0]
 8020740:	2300      	movs	r3, #0
 8020742:	aa08      	add	r2, sp, #32
 8020744:	4920      	ldr	r1, [pc, #128]	; (80207c8 <WM_Exec+0x290>)
 8020746:	4628      	mov	r0, r5
 8020748:	461c      	mov	r4, r3
 802074a:	f7fd f881 	bl	801d850 <GUI_MEMDEV_Draw>
 802074e:	e78d      	b.n	802066c <WM_Exec+0x134>
 8020750:	2301      	movs	r3, #1
 8020752:	e7f4      	b.n	802073e <WM_Exec+0x206>
 8020754:	9808      	ldr	r0, [sp, #32]
 8020756:	2401      	movs	r4, #1
 8020758:	f7fe fb10 	bl	801ed7c <WM__PaintWinAndOverlays>
 802075c:	e786      	b.n	802066c <WM_Exec+0x134>
 802075e:	f7f7 faeb 	bl	8017d38 <GUI_Lock>
 8020762:	9b07      	ldr	r3, [sp, #28]
 8020764:	b13b      	cbz	r3, 8020776 <WM_Exec+0x23e>
 8020766:	4b16      	ldr	r3, [pc, #88]	; (80207c0 <WM_Exec+0x288>)
 8020768:	6818      	ldr	r0, [r3, #0]
 802076a:	b180      	cbz	r0, 802078e <WM_Exec+0x256>
 802076c:	6843      	ldr	r3, [r0, #4]
 802076e:	4798      	blx	r3
 8020770:	4b16      	ldr	r3, [pc, #88]	; (80207cc <WM_Exec+0x294>)
 8020772:	2200      	movs	r2, #0
 8020774:	601a      	str	r2, [r3, #0]
 8020776:	f7f7 fad5 	bl	8017d24 <GUI_Unlock>
 802077a:	9806      	ldr	r0, [sp, #24]
 802077c:	b02b      	add	sp, #172	; 0xac
 802077e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020782:	2001      	movs	r0, #1
 8020784:	f7f6 f8cc 	bl	8016920 <GUI_SelectLayer>
 8020788:	e7c0      	b.n	802070c <WM_Exec+0x1d4>
 802078a:	4618      	mov	r0, r3
 802078c:	e7fa      	b.n	8020784 <WM_Exec+0x24c>
 802078e:	f002 fdab 	bl	80232e8 <GUI__ManageCache>
 8020792:	f7f7 fac7 	bl	8017d24 <GUI_Unlock>
 8020796:	9806      	ldr	r0, [sp, #24]
 8020798:	b02b      	add	sp, #172	; 0xac
 802079a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802079e:	2001      	movs	r0, #1
 80207a0:	9007      	str	r0, [sp, #28]
 80207a2:	f002 fda1 	bl	80232e8 <GUI__ManageCache>
 80207a6:	e6e6      	b.n	8020576 <WM_Exec+0x3e>
 80207a8:	20046808 	.word	0x20046808
 80207ac:	20046814 	.word	0x20046814
 80207b0:	20046818 	.word	0x20046818
 80207b4:	200003e4 	.word	0x200003e4
 80207b8:	20000018 	.word	0x20000018
 80207bc:	ffffbfdf 	.word	0xffffbfdf
 80207c0:	2004683c 	.word	0x2004683c
 80207c4:	200467fc 	.word	0x200467fc
 80207c8:	0801ee1d 	.word	0x0801ee1d
 80207cc:	20046824 	.word	0x20046824

080207d0 <WM_Activate>:
 80207d0:	4b02      	ldr	r3, [pc, #8]	; (80207dc <WM_Activate+0xc>)
 80207d2:	2201      	movs	r2, #1
 80207d4:	681b      	ldr	r3, [r3, #0]
 80207d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80207da:	4770      	bx	lr
 80207dc:	20000018 	.word	0x20000018

080207e0 <WM_Deactivate>:
 80207e0:	b508      	push	{r3, lr}
 80207e2:	4b06      	ldr	r3, [pc, #24]	; (80207fc <WM_Deactivate+0x1c>)
 80207e4:	2200      	movs	r2, #0
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80207ec:	f7f7 faa4 	bl	8017d38 <GUI_Lock>
 80207f0:	f7f9 fb04 	bl	8019dfc <LCD_SetClipRectMax>
 80207f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80207f8:	f7f7 ba94 	b.w	8017d24 <GUI_Unlock>
 80207fc:	20000018 	.word	0x20000018

08020800 <WM_DefaultProc>:
 8020800:	6803      	ldr	r3, [r0, #0]
 8020802:	3b0e      	subs	r3, #14
 8020804:	b510      	push	{r4, lr}
 8020806:	4604      	mov	r4, r0
 8020808:	6840      	ldr	r0, [r0, #4]
 802080a:	2b1a      	cmp	r3, #26
 802080c:	d812      	bhi.n	8020834 <WM_DefaultProc+0x34>
 802080e:	e8df f003 	tbb	[pc, r3]
 8020812:	111b      	.short	0x111b
 8020814:	11111111 	.word	0x11111111
 8020818:	2011110e 	.word	0x2011110e
 802081c:	11111111 	.word	0x11111111
 8020820:	11111111 	.word	0x11111111
 8020824:	11221111 	.word	0x11221111
 8020828:	11111111 	.word	0x11111111
 802082c:	14          	.byte	0x14
 802082d:	00          	.byte	0x00
 802082e:	68e1      	ldr	r1, [r4, #12]
 8020830:	f001 f8d6 	bl	80219e0 <WM__GetClientRectEx>
 8020834:	2300      	movs	r3, #0
 8020836:	60e3      	str	r3, [r4, #12]
 8020838:	bd10      	pop	{r4, pc}
 802083a:	2800      	cmp	r0, #0
 802083c:	d0fc      	beq.n	8020838 <WM_DefaultProc+0x38>
 802083e:	2100      	movs	r1, #0
 8020840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020844:	f7ff b818 	b.w	801f878 <WM_InvalidateRect.part.2>
 8020848:	4621      	mov	r1, r4
 802084a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802084e:	f000 ba69 	b.w	8020d24 <WM_SendToParent>
 8020852:	60e0      	str	r0, [r4, #12]
 8020854:	bd10      	pop	{r4, pc}
 8020856:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 802085a:	60e3      	str	r3, [r4, #12]
 802085c:	bd10      	pop	{r4, pc}
 802085e:	bf00      	nop

08020860 <WM_Init>:
 8020860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020864:	4d45      	ldr	r5, [pc, #276]	; (802097c <WM_Init+0x11c>)
 8020866:	b085      	sub	sp, #20
 8020868:	782b      	ldrb	r3, [r5, #0]
 802086a:	2b00      	cmp	r3, #0
 802086c:	d17a      	bne.n	8020964 <WM_Init+0x104>
 802086e:	4f44      	ldr	r7, [pc, #272]	; (8020980 <WM_Init+0x120>)
 8020870:	461c      	mov	r4, r3
 8020872:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80209b4 <WM_Init+0x154>
 8020876:	469a      	mov	sl, r3
 8020878:	6838      	ldr	r0, [r7, #0]
 802087a:	4942      	ldr	r1, [pc, #264]	; (8020984 <WM_Init+0x124>)
 802087c:	4a42      	ldr	r2, [pc, #264]	; (8020988 <WM_Init+0x128>)
 802087e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80209a8 <WM_Init+0x148>
 8020882:	4e42      	ldr	r6, [pc, #264]	; (802098c <WM_Init+0x12c>)
 8020884:	f8df b130 	ldr.w	fp, [pc, #304]	; 80209b8 <WM_Init+0x158>
 8020888:	60ab      	str	r3, [r5, #8]
 802088a:	6443      	str	r3, [r0, #68]	; 0x44
 802088c:	f8c9 3000 	str.w	r3, [r9]
 8020890:	800b      	strh	r3, [r1, #0]
 8020892:	8013      	strh	r3, [r2, #0]
 8020894:	4620      	mov	r0, r4
 8020896:	f7f3 fa85 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 802089a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 802089e:	2100      	movs	r1, #0
 80208a0:	f04f 0c02 	mov.w	ip, #2
 80208a4:	f04f 3eff 	mov.w	lr, #4294967295
 80208a8:	461a      	mov	r2, r3
 80208aa:	b188      	cbz	r0, 80208d0 <WM_Init+0x70>
 80208ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80208b0:	4608      	mov	r0, r1
 80208b2:	9602      	str	r6, [sp, #8]
 80208b4:	f8cd c004 	str.w	ip, [sp, #4]
 80208b8:	f8cd e000 	str.w	lr, [sp]
 80208bc:	f7ff fafe 	bl	801febc <WM_CreateWindowAsChild>
 80208c0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80208c4:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 80208c8:	f84b 2024 	str.w	r2, [fp, r4, lsl #2]
 80208cc:	2800      	cmp	r0, #0
 80208ce:	d150      	bne.n	8020972 <WM_Init+0x112>
 80208d0:	3401      	adds	r4, #1
 80208d2:	2c02      	cmp	r4, #2
 80208d4:	d1de      	bne.n	8020894 <WM_Init+0x34>
 80208d6:	482e      	ldr	r0, [pc, #184]	; (8020990 <WM_Init+0x130>)
 80208d8:	f001 f85c 	bl	8021994 <WM__AddCriticalHandle>
 80208dc:	482d      	ldr	r0, [pc, #180]	; (8020994 <WM_Init+0x134>)
 80208de:	f001 f859 	bl	8021994 <WM__AddCriticalHandle>
 80208e2:	482d      	ldr	r0, [pc, #180]	; (8020998 <WM_Init+0x138>)
 80208e4:	f001 f856 	bl	8021994 <WM__AddCriticalHandle>
 80208e8:	482c      	ldr	r0, [pc, #176]	; (802099c <WM_Init+0x13c>)
 80208ea:	f001 f853 	bl	8021994 <WM__AddCriticalHandle>
 80208ee:	482c      	ldr	r0, [pc, #176]	; (80209a0 <WM_Init+0x140>)
 80208f0:	f001 f850 	bl	8021994 <WM__AddCriticalHandle>
 80208f4:	482b      	ldr	r0, [pc, #172]	; (80209a4 <WM_Init+0x144>)
 80208f6:	f001 f84d 	bl	8021994 <WM__AddCriticalHandle>
 80208fa:	f8d8 6000 	ldr.w	r6, [r8]
 80208fe:	f7f7 fa1b 	bl	8017d38 <GUI_Lock>
 8020902:	683b      	ldr	r3, [r7, #0]
 8020904:	b90e      	cbnz	r6, 802090a <WM_Init+0xaa>
 8020906:	f8d9 6000 	ldr.w	r6, [r9]
 802090a:	649e      	str	r6, [r3, #72]	; 0x48
 802090c:	4634      	mov	r4, r6
 802090e:	e000      	b.n	8020912 <WM_Init+0xb2>
 8020910:	4604      	mov	r4, r0
 8020912:	4620      	mov	r0, r4
 8020914:	f7f1 ffdc 	bl	80128d0 <GUI_ALLOC_h2p>
 8020918:	6980      	ldr	r0, [r0, #24]
 802091a:	2800      	cmp	r0, #0
 802091c:	d1f8      	bne.n	8020910 <WM_Init+0xb0>
 802091e:	f8d8 3000 	ldr.w	r3, [r8]
 8020922:	4a21      	ldr	r2, [pc, #132]	; (80209a8 <WM_Init+0x148>)
 8020924:	429c      	cmp	r4, r3
 8020926:	d021      	beq.n	802096c <WM_Init+0x10c>
 8020928:	6853      	ldr	r3, [r2, #4]
 802092a:	429c      	cmp	r4, r3
 802092c:	d01d      	beq.n	802096a <WM_Init+0x10a>
 802092e:	f7f9 fa65 	bl	8019dfc <LCD_SetClipRectMax>
 8020932:	4630      	mov	r0, r6
 8020934:	f7f1 ffcc 	bl	80128d0 <GUI_ALLOC_h2p>
 8020938:	683b      	ldr	r3, [r7, #0]
 802093a:	f9b0 1000 	ldrsh.w	r1, [r0]
 802093e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020942:	64d9      	str	r1, [r3, #76]	; 0x4c
 8020944:	651a      	str	r2, [r3, #80]	; 0x50
 8020946:	f7f7 f9ed 	bl	8017d24 <GUI_Unlock>
 802094a:	2301      	movs	r3, #1
 802094c:	6839      	ldr	r1, [r7, #0]
 802094e:	4a17      	ldr	r2, [pc, #92]	; (80209ac <WM_Init+0x14c>)
 8020950:	4817      	ldr	r0, [pc, #92]	; (80209b0 <WM_Init+0x150>)
 8020952:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 8020956:	702b      	strb	r3, [r5, #0]
 8020958:	626a      	str	r2, [r5, #36]	; 0x24
 802095a:	b005      	add	sp, #20
 802095c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020960:	f7f3 b9e2 	b.w	8013d28 <GUI__RegisterExit>
 8020964:	b005      	add	sp, #20
 8020966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802096a:	2001      	movs	r0, #1
 802096c:	f7f5 ffd8 	bl	8016920 <GUI_SelectLayer>
 8020970:	e7dd      	b.n	802092e <WM_Init+0xce>
 8020972:	2100      	movs	r1, #0
 8020974:	f7fe ff80 	bl	801f878 <WM_InvalidateRect.part.2>
 8020978:	e7aa      	b.n	80208d0 <WM_Init+0x70>
 802097a:	bf00      	nop
 802097c:	200003e4 	.word	0x200003e4
 8020980:	20000018 	.word	0x20000018
 8020984:	20046814 	.word	0x20046814
 8020988:	200467f4 	.word	0x200467f4
 802098c:	0801f955 	.word	0x0801f955
 8020990:	20046870 	.word	0x20046870
 8020994:	20046860 	.word	0x20046860
 8020998:	20046850 	.word	0x20046850
 802099c:	20046878 	.word	0x20046878
 80209a0:	20046868 	.word	0x20046868
 80209a4:	20046858 	.word	0x20046858
 80209a8:	200467fc 	.word	0x200467fc
 80209ac:	0801e80d 	.word	0x0801e80d
 80209b0:	20000408 	.word	0x20000408
 80209b4:	20046818 	.word	0x20046818
 80209b8:	20046830 	.word	0x20046830

080209bc <WM_ResizeWindow.part.11>:
 80209bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209c0:	4606      	mov	r6, r0
 80209c2:	b08a      	sub	sp, #40	; 0x28
 80209c4:	4688      	mov	r8, r1
 80209c6:	4617      	mov	r7, r2
 80209c8:	f7f7 f9b6 	bl	8017d38 <GUI_Lock>
 80209cc:	4630      	mov	r0, r6
 80209ce:	f7f1 ff89 	bl	80128e4 <GUI_ALLOC_LockH>
 80209d2:	ac04      	add	r4, sp, #16
 80209d4:	4603      	mov	r3, r0
 80209d6:	ad06      	add	r5, sp, #24
 80209d8:	9003      	str	r0, [sp, #12]
 80209da:	c803      	ldmia	r0, {r0, r1}
 80209dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80209e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80209e4:	f1b8 0f00 	cmp.w	r8, #0
 80209e8:	d009      	beq.n	80209fe <WM_ResizeWindow.part.11+0x42>
 80209ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80209ec:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80209f0:	2a80      	cmp	r2, #128	; 0x80
 80209f2:	d056      	beq.n	8020aa2 <WM_ResizeWindow.part.11+0xe6>
 80209f4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80209f8:	4490      	add	r8, r2
 80209fa:	f8ad 801c 	strh.w	r8, [sp, #28]
 80209fe:	b157      	cbz	r7, 8020a16 <WM_ResizeWindow.part.11+0x5a>
 8020a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020a02:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8020a06:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8020a0a:	d051      	beq.n	8020ab0 <WM_ResizeWindow.part.11+0xf4>
 8020a0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8020a10:	4417      	add	r7, r2
 8020a12:	f8ad 701e 	strh.w	r7, [sp, #30]
 8020a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020a18:	03d1      	lsls	r1, r2, #15
 8020a1a:	d43c      	bmi.n	8020a96 <WM_ResizeWindow.part.11+0xda>
 8020a1c:	0792      	lsls	r2, r2, #30
 8020a1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020a22:	e883 0003 	stmia.w	r3, {r0, r1}
 8020a26:	d50b      	bpl.n	8020a40 <WM_ResizeWindow.part.11+0x84>
 8020a28:	462a      	mov	r2, r5
 8020a2a:	4621      	mov	r1, r4
 8020a2c:	a808      	add	r0, sp, #32
 8020a2e:	f7f2 fdaf 	bl	8013590 <GUI_MergeRect>
 8020a32:	9b03      	ldr	r3, [sp, #12]
 8020a34:	a808      	add	r0, sp, #32
 8020a36:	6a1a      	ldr	r2, [r3, #32]
 8020a38:	6999      	ldr	r1, [r3, #24]
 8020a3a:	f7ff f9c3 	bl	801fdc4 <WM__InvalidateRectEx>
 8020a3e:	9b03      	ldr	r3, [sp, #12]
 8020a40:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 8020a44:	4618      	mov	r0, r3
 8020a46:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8020a4a:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8020a4e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020a52:	1b14      	subs	r4, r2, r4
 8020a54:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 8020a58:	1acb      	subs	r3, r1, r3
 8020a5a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8020a5e:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 8020a62:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8020a66:	1aba      	subs	r2, r7, r2
 8020a68:	9400      	str	r4, [sp, #0]
 8020a6a:	ac0a      	add	r4, sp, #40	; 0x28
 8020a6c:	1a69      	subs	r1, r5, r1
 8020a6e:	f000 feff 	bl	8021870 <WM__UpdateChildPositions>
 8020a72:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8020a76:	f101 0008 	add.w	r0, r1, #8
 8020a7a:	f7f8 fb0f 	bl	801909c <GUI__IntersectRect>
 8020a7e:	2105      	movs	r1, #5
 8020a80:	4630      	mov	r0, r6
 8020a82:	f7ff fa01 	bl	801fe88 <WM__SendMsgNoData>
 8020a86:	4620      	mov	r0, r4
 8020a88:	f7f1 ff40 	bl	801290c <GUI_ALLOC_UnlockH>
 8020a8c:	f7f7 f94a 	bl	8017d24 <GUI_Unlock>
 8020a90:	b00a      	add	sp, #40	; 0x28
 8020a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a96:	4630      	mov	r0, r6
 8020a98:	f7fe fb7e 	bl	801f198 <WM__InvalidateDrawAndDescs>
 8020a9c:	9b03      	ldr	r3, [sp, #12]
 8020a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020aa0:	e7bc      	b.n	8020a1c <WM_ResizeWindow.part.11+0x60>
 8020aa2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8020aa6:	ebc8 0802 	rsb	r8, r8, r2
 8020aaa:	f8ad 8018 	strh.w	r8, [sp, #24]
 8020aae:	e7a6      	b.n	80209fe <WM_ResizeWindow.part.11+0x42>
 8020ab0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8020ab4:	1bd7      	subs	r7, r2, r7
 8020ab6:	f8ad 701a 	strh.w	r7, [sp, #26]
 8020aba:	e7ac      	b.n	8020a16 <WM_ResizeWindow.part.11+0x5a>

08020abc <WM_GetClientRect>:
 8020abc:	b538      	push	{r3, r4, r5, lr}
 8020abe:	4605      	mov	r5, r0
 8020ac0:	f7f7 f93a 	bl	8017d38 <GUI_Lock>
 8020ac4:	4b08      	ldr	r3, [pc, #32]	; (8020ae8 <WM_GetClientRect+0x2c>)
 8020ac6:	681c      	ldr	r4, [r3, #0]
 8020ac8:	b914      	cbnz	r4, 8020ad0 <WM_GetClientRect+0x14>
 8020aca:	4b08      	ldr	r3, [pc, #32]	; (8020aec <WM_GetClientRect+0x30>)
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8020ad0:	f7f7 f932 	bl	8017d38 <GUI_Lock>
 8020ad4:	4629      	mov	r1, r5
 8020ad6:	4620      	mov	r0, r4
 8020ad8:	f000 ff82 	bl	80219e0 <WM__GetClientRectEx>
 8020adc:	f7f7 f922 	bl	8017d24 <GUI_Unlock>
 8020ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ae4:	f7f7 b91e 	b.w	8017d24 <GUI_Unlock>
 8020ae8:	200467f8 	.word	0x200467f8
 8020aec:	20000018 	.word	0x20000018

08020af0 <WM_GetDesktopWindow>:
 8020af0:	4a03      	ldr	r2, [pc, #12]	; (8020b00 <WM_GetDesktopWindow+0x10>)
 8020af2:	4b04      	ldr	r3, [pc, #16]	; (8020b04 <WM_GetDesktopWindow+0x14>)
 8020af4:	6812      	ldr	r2, [r2, #0]
 8020af6:	7c52      	ldrb	r2, [r2, #17]
 8020af8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020afc:	4770      	bx	lr
 8020afe:	bf00      	nop
 8020b00:	20000018 	.word	0x20000018
 8020b04:	200467fc 	.word	0x200467fc

08020b08 <WM_GetDesktopWindowEx>:
 8020b08:	2801      	cmp	r0, #1
 8020b0a:	d901      	bls.n	8020b10 <WM_GetDesktopWindowEx+0x8>
 8020b0c:	2000      	movs	r0, #0
 8020b0e:	4770      	bx	lr
 8020b10:	4b01      	ldr	r3, [pc, #4]	; (8020b18 <WM_GetDesktopWindowEx+0x10>)
 8020b12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020b16:	4770      	bx	lr
 8020b18:	200467fc 	.word	0x200467fc

08020b1c <WM_BringToBottom>:
 8020b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b20:	4604      	mov	r4, r0
 8020b22:	b087      	sub	sp, #28
 8020b24:	f7f7 f908 	bl	8017d38 <GUI_Lock>
 8020b28:	b924      	cbnz	r4, 8020b34 <WM_BringToBottom+0x18>
 8020b2a:	f7f7 f8fb 	bl	8017d24 <GUI_Unlock>
 8020b2e:	b007      	add	sp, #28
 8020b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b34:	4620      	mov	r0, r4
 8020b36:	ad04      	add	r5, sp, #16
 8020b38:	f7f1 fed4 	bl	80128e4 <GUI_ALLOC_LockH>
 8020b3c:	9001      	str	r0, [sp, #4]
 8020b3e:	6a07      	ldr	r7, [r0, #32]
 8020b40:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8020b44:	c803      	ldmia	r0, {r0, r1}
 8020b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8020b4a:	a801      	add	r0, sp, #4
 8020b4c:	f7f1 fede 	bl	801290c <GUI_ALLOC_UnlockH>
 8020b50:	4620      	mov	r0, r4
 8020b52:	f000 fe01 	bl	8021758 <WM__GetPrevSibling>
 8020b56:	4606      	mov	r6, r0
 8020b58:	2800      	cmp	r0, #0
 8020b5a:	d0e6      	beq.n	8020b2a <WM_BringToBottom+0xe>
 8020b5c:	f7f7 f8ec 	bl	8017d38 <GUI_Lock>
 8020b60:	4620      	mov	r0, r4
 8020b62:	f7f1 feb5 	bl	80128d0 <GUI_ALLOC_h2p>
 8020b66:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8020b6a:	f7f7 f8db 	bl	8017d24 <GUI_Unlock>
 8020b6e:	f018 0f02 	tst.w	r8, #2
 8020b72:	d120      	bne.n	8020bb6 <WM_BringToBottom+0x9a>
 8020b74:	4620      	mov	r0, r4
 8020b76:	f7f1 feb5 	bl	80128e4 <GUI_ALLOC_LockH>
 8020b7a:	9001      	str	r0, [sp, #4]
 8020b7c:	4648      	mov	r0, r9
 8020b7e:	f7f1 feb1 	bl	80128e4 <GUI_ALLOC_LockH>
 8020b82:	9003      	str	r0, [sp, #12]
 8020b84:	4630      	mov	r0, r6
 8020b86:	f7f1 fead 	bl	80128e4 <GUI_ALLOC_LockH>
 8020b8a:	9a03      	ldr	r2, [sp, #12]
 8020b8c:	4603      	mov	r3, r0
 8020b8e:	9901      	ldr	r1, [sp, #4]
 8020b90:	69d5      	ldr	r5, [r2, #28]
 8020b92:	a801      	add	r0, sp, #4
 8020b94:	621f      	str	r7, [r3, #32]
 8020b96:	620d      	str	r5, [r1, #32]
 8020b98:	61d4      	str	r4, [r2, #28]
 8020b9a:	9302      	str	r3, [sp, #8]
 8020b9c:	f7f1 feb6 	bl	801290c <GUI_ALLOC_UnlockH>
 8020ba0:	a803      	add	r0, sp, #12
 8020ba2:	f7f1 feb3 	bl	801290c <GUI_ALLOC_UnlockH>
 8020ba6:	a802      	add	r0, sp, #8
 8020ba8:	f7f1 feb0 	bl	801290c <GUI_ALLOC_UnlockH>
 8020bac:	f7f7 f8ba 	bl	8017d24 <GUI_Unlock>
 8020bb0:	b007      	add	sp, #28
 8020bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020bb6:	4628      	mov	r0, r5
 8020bb8:	463a      	mov	r2, r7
 8020bba:	4649      	mov	r1, r9
 8020bbc:	f7ff f902 	bl	801fdc4 <WM__InvalidateRectEx>
 8020bc0:	e7d8      	b.n	8020b74 <WM_BringToBottom+0x58>
 8020bc2:	bf00      	nop

08020bc4 <WM_GetFirstChild>:
 8020bc4:	b510      	push	{r4, lr}
 8020bc6:	4604      	mov	r4, r0
 8020bc8:	b138      	cbz	r0, 8020bda <WM_GetFirstChild+0x16>
 8020bca:	f7f7 f8b5 	bl	8017d38 <GUI_Lock>
 8020bce:	4620      	mov	r0, r4
 8020bd0:	f7f1 fe7e 	bl	80128d0 <GUI_ALLOC_h2p>
 8020bd4:	69c4      	ldr	r4, [r0, #28]
 8020bd6:	f7f7 f8a5 	bl	8017d24 <GUI_Unlock>
 8020bda:	4620      	mov	r0, r4
 8020bdc:	bd10      	pop	{r4, pc}
 8020bde:	bf00      	nop

08020be0 <WM_GetWindowOrgX>:
 8020be0:	b510      	push	{r4, lr}
 8020be2:	4604      	mov	r4, r0
 8020be4:	b140      	cbz	r0, 8020bf8 <WM_GetWindowOrgX+0x18>
 8020be6:	f7f7 f8a7 	bl	8017d38 <GUI_Lock>
 8020bea:	4620      	mov	r0, r4
 8020bec:	f7f1 fe70 	bl	80128d0 <GUI_ALLOC_h2p>
 8020bf0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8020bf4:	f7f7 f896 	bl	8017d24 <GUI_Unlock>
 8020bf8:	4620      	mov	r0, r4
 8020bfa:	bd10      	pop	{r4, pc}

08020bfc <WM_GetParent>:
 8020bfc:	b510      	push	{r4, lr}
 8020bfe:	4604      	mov	r4, r0
 8020c00:	b138      	cbz	r0, 8020c12 <WM_GetParent+0x16>
 8020c02:	f7f7 f899 	bl	8017d38 <GUI_Lock>
 8020c06:	4620      	mov	r0, r4
 8020c08:	f7f1 fe62 	bl	80128d0 <GUI_ALLOC_h2p>
 8020c0c:	6984      	ldr	r4, [r0, #24]
 8020c0e:	f7f7 f889 	bl	8017d24 <GUI_Unlock>
 8020c12:	4620      	mov	r0, r4
 8020c14:	bd10      	pop	{r4, pc}
 8020c16:	bf00      	nop

08020c18 <WM_GetWindowRect>:
 8020c18:	b510      	push	{r4, lr}
 8020c1a:	4604      	mov	r4, r0
 8020c1c:	f7f7 f88c 	bl	8017d38 <GUI_Lock>
 8020c20:	b144      	cbz	r4, 8020c34 <WM_GetWindowRect+0x1c>
 8020c22:	4b08      	ldr	r3, [pc, #32]	; (8020c44 <WM_GetWindowRect+0x2c>)
 8020c24:	6818      	ldr	r0, [r3, #0]
 8020c26:	b148      	cbz	r0, 8020c3c <WM_GetWindowRect+0x24>
 8020c28:	f7f1 fe52 	bl	80128d0 <GUI_ALLOC_h2p>
 8020c2c:	4603      	mov	r3, r0
 8020c2e:	cb03      	ldmia	r3!, {r0, r1}
 8020c30:	6020      	str	r0, [r4, #0]
 8020c32:	6061      	str	r1, [r4, #4]
 8020c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c38:	f7f7 b874 	b.w	8017d24 <GUI_Unlock>
 8020c3c:	4b02      	ldr	r3, [pc, #8]	; (8020c48 <WM_GetWindowRect+0x30>)
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8020c42:	e7f1      	b.n	8020c28 <WM_GetWindowRect+0x10>
 8020c44:	200467f8 	.word	0x200467f8
 8020c48:	20000018 	.word	0x20000018

08020c4c <WM_IsWindow>:
 8020c4c:	b510      	push	{r4, lr}
 8020c4e:	4604      	mov	r4, r0
 8020c50:	f7f7 f872 	bl	8017d38 <GUI_Lock>
 8020c54:	4620      	mov	r0, r4
 8020c56:	f7fe fa89 	bl	801f16c <WM__IsWindow>
 8020c5a:	4604      	mov	r4, r0
 8020c5c:	f7f7 f862 	bl	8017d24 <GUI_Unlock>
 8020c60:	4620      	mov	r0, r4
 8020c62:	bd10      	pop	{r4, pc}

08020c64 <WM_NotifyParent>:
 8020c64:	b530      	push	{r4, r5, lr}
 8020c66:	2326      	movs	r3, #38	; 0x26
 8020c68:	b085      	sub	sp, #20
 8020c6a:	4604      	mov	r4, r0
 8020c6c:	9103      	str	r1, [sp, #12]
 8020c6e:	9300      	str	r3, [sp, #0]
 8020c70:	f7f7 f862 	bl	8017d38 <GUI_Lock>
 8020c74:	b91c      	cbnz	r4, 8020c7e <WM_NotifyParent+0x1a>
 8020c76:	f7f7 f855 	bl	8017d24 <GUI_Unlock>
 8020c7a:	b005      	add	sp, #20
 8020c7c:	bd30      	pop	{r4, r5, pc}
 8020c7e:	f7f7 f85b 	bl	8017d38 <GUI_Lock>
 8020c82:	4620      	mov	r0, r4
 8020c84:	f7f1 fe24 	bl	80128d0 <GUI_ALLOC_h2p>
 8020c88:	6985      	ldr	r5, [r0, #24]
 8020c8a:	f7f7 f84b 	bl	8017d24 <GUI_Unlock>
 8020c8e:	2d00      	cmp	r5, #0
 8020c90:	d0f1      	beq.n	8020c76 <WM_NotifyParent+0x12>
 8020c92:	4628      	mov	r0, r5
 8020c94:	4669      	mov	r1, sp
 8020c96:	9402      	str	r4, [sp, #8]
 8020c98:	f000 fd94 	bl	80217c4 <WM__SendMessage>
 8020c9c:	f7f7 f842 	bl	8017d24 <GUI_Unlock>
 8020ca0:	b005      	add	sp, #20
 8020ca2:	bd30      	pop	{r4, r5, pc}

08020ca4 <WM_OnKey>:
 8020ca4:	b530      	push	{r4, r5, lr}
 8020ca6:	b087      	sub	sp, #28
 8020ca8:	4604      	mov	r4, r0
 8020caa:	460d      	mov	r5, r1
 8020cac:	f7f7 f844 	bl	8017d38 <GUI_Lock>
 8020cb0:	4a0d      	ldr	r2, [pc, #52]	; (8020ce8 <WM_OnKey+0x44>)
 8020cb2:	4b0e      	ldr	r3, [pc, #56]	; (8020cec <WM_OnKey+0x48>)
 8020cb4:	6812      	ldr	r2, [r2, #0]
 8020cb6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020cba:	b928      	cbnz	r0, 8020cc8 <WM_OnKey+0x24>
 8020cbc:	4604      	mov	r4, r0
 8020cbe:	f7f7 f831 	bl	8017d24 <GUI_Unlock>
 8020cc2:	4620      	mov	r0, r4
 8020cc4:	b007      	add	sp, #28
 8020cc6:	bd30      	pop	{r4, r5, pc}
 8020cc8:	230e      	movs	r3, #14
 8020cca:	9400      	str	r4, [sp, #0]
 8020ccc:	2401      	movs	r4, #1
 8020cce:	a902      	add	r1, sp, #8
 8020cd0:	9302      	str	r3, [sp, #8]
 8020cd2:	9501      	str	r5, [sp, #4]
 8020cd4:	f8cd d014 	str.w	sp, [sp, #20]
 8020cd8:	f000 fd74 	bl	80217c4 <WM__SendMessage>
 8020cdc:	f7f7 f822 	bl	8017d24 <GUI_Unlock>
 8020ce0:	4620      	mov	r0, r4
 8020ce2:	b007      	add	sp, #28
 8020ce4:	bd30      	pop	{r4, r5, pc}
 8020ce6:	bf00      	nop
 8020ce8:	2004681c 	.word	0x2004681c
 8020cec:	2004680c 	.word	0x2004680c

08020cf0 <WM_ResizeWindow>:
 8020cf0:	b500      	push	{lr}
 8020cf2:	ea51 0e02 	orrs.w	lr, r1, r2
 8020cf6:	d000      	beq.n	8020cfa <WM_ResizeWindow+0xa>
 8020cf8:	b908      	cbnz	r0, 8020cfe <WM_ResizeWindow+0xe>
 8020cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8020cfe:	f85d eb04 	ldr.w	lr, [sp], #4
 8020d02:	f7ff be5b 	b.w	80209bc <WM_ResizeWindow.part.11>
 8020d06:	bf00      	nop

08020d08 <WM_SendMessageNoPara>:
 8020d08:	b538      	push	{r3, r4, r5, lr}
 8020d0a:	4604      	mov	r4, r0
 8020d0c:	460d      	mov	r5, r1
 8020d0e:	f7f7 f813 	bl	8017d38 <GUI_Lock>
 8020d12:	4629      	mov	r1, r5
 8020d14:	4620      	mov	r0, r4
 8020d16:	f000 fd97 	bl	8021848 <WM__SendMessageNoPara>
 8020d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d1e:	f7f7 b801 	b.w	8017d24 <GUI_Unlock>
 8020d22:	bf00      	nop

08020d24 <WM_SendToParent>:
 8020d24:	b1e1      	cbz	r1, 8020d60 <WM_SendToParent+0x3c>
 8020d26:	b570      	push	{r4, r5, r6, lr}
 8020d28:	4605      	mov	r5, r0
 8020d2a:	460c      	mov	r4, r1
 8020d2c:	f7f7 f804 	bl	8017d38 <GUI_Lock>
 8020d30:	b91d      	cbnz	r5, 8020d3a <WM_SendToParent+0x16>
 8020d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020d36:	f7f6 bff5 	b.w	8017d24 <GUI_Unlock>
 8020d3a:	f7f6 fffd 	bl	8017d38 <GUI_Lock>
 8020d3e:	4628      	mov	r0, r5
 8020d40:	f7f1 fdc6 	bl	80128d0 <GUI_ALLOC_h2p>
 8020d44:	6986      	ldr	r6, [r0, #24]
 8020d46:	f7f6 ffed 	bl	8017d24 <GUI_Unlock>
 8020d4a:	2e00      	cmp	r6, #0
 8020d4c:	d0f1      	beq.n	8020d32 <WM_SendToParent+0xe>
 8020d4e:	60a5      	str	r5, [r4, #8]
 8020d50:	4621      	mov	r1, r4
 8020d52:	4630      	mov	r0, r6
 8020d54:	f000 fd36 	bl	80217c4 <WM__SendMessage>
 8020d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020d5c:	f7f6 bfe2 	b.w	8017d24 <GUI_Unlock>
 8020d60:	4770      	bx	lr
 8020d62:	bf00      	nop

08020d64 <WM_SetSize>:
 8020d64:	b900      	cbnz	r0, 8020d68 <WM_SetSize+0x4>
 8020d66:	4770      	bx	lr
 8020d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d6c:	4604      	mov	r4, r0
 8020d6e:	b082      	sub	sp, #8
 8020d70:	4617      	mov	r7, r2
 8020d72:	4688      	mov	r8, r1
 8020d74:	f7f6 ffe0 	bl	8017d38 <GUI_Lock>
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f7f1 fdb3 	bl	80128e4 <GUI_ALLOC_LockH>
 8020d7e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8020d82:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8020d86:	f10d 0e08 	add.w	lr, sp, #8
 8020d8a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020d8e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8020d92:	1aeb      	subs	r3, r5, r3
 8020d94:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8020d98:	1a76      	subs	r6, r6, r1
 8020d9a:	4670      	mov	r0, lr
 8020d9c:	3301      	adds	r3, #1
 8020d9e:	1c75      	adds	r5, r6, #1
 8020da0:	1afe      	subs	r6, r7, r3
 8020da2:	f7f1 fdb3 	bl	801290c <GUI_ALLOC_UnlockH>
 8020da6:	ebc5 0508 	rsb	r5, r5, r8
 8020daa:	ea55 0306 	orrs.w	r3, r5, r6
 8020dae:	d104      	bne.n	8020dba <WM_SetSize+0x56>
 8020db0:	f7f6 ffb8 	bl	8017d24 <GUI_Unlock>
 8020db4:	b002      	add	sp, #8
 8020db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020dba:	4632      	mov	r2, r6
 8020dbc:	4629      	mov	r1, r5
 8020dbe:	4620      	mov	r0, r4
 8020dc0:	f7ff fdfc 	bl	80209bc <WM_ResizeWindow.part.11>
 8020dc4:	e7f4      	b.n	8020db0 <WM_SetSize+0x4c>
 8020dc6:	bf00      	nop

08020dc8 <WM_SetUserClipRect>:
 8020dc8:	b538      	push	{r3, r4, r5, lr}
 8020dca:	4605      	mov	r5, r0
 8020dcc:	f7f6 ffb4 	bl	8017d38 <GUI_Lock>
 8020dd0:	4b04      	ldr	r3, [pc, #16]	; (8020de4 <WM_SetUserClipRect+0x1c>)
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8020dd6:	645d      	str	r5, [r3, #68]	; 0x44
 8020dd8:	f7fe f8ca 	bl	801ef70 <WM__ActivateClipRect>
 8020ddc:	f7f6 ffa2 	bl	8017d24 <GUI_Unlock>
 8020de0:	4620      	mov	r0, r4
 8020de2:	bd38      	pop	{r3, r4, r5, pc}
 8020de4:	20000018 	.word	0x20000018

08020de8 <_MoveDescendents>:
 8020de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dec:	2300      	movs	r3, #0
 8020dee:	b0b5      	sub	sp, #212	; 0xd4
 8020df0:	931d      	str	r3, [sp, #116]	; 0x74
 8020df2:	9006      	str	r0, [sp, #24]
 8020df4:	931c      	str	r3, [sp, #112]	; 0x70
 8020df6:	931e      	str	r3, [sp, #120]	; 0x78
 8020df8:	931f      	str	r3, [sp, #124]	; 0x7c
 8020dfa:	2800      	cmp	r0, #0
 8020dfc:	f000 811c 	beq.w	8021038 <_MoveDescendents+0x250>
 8020e00:	468a      	mov	sl, r1
 8020e02:	4691      	mov	r9, r2
 8020e04:	f04f 0b03 	mov.w	fp, #3
 8020e08:	9806      	ldr	r0, [sp, #24]
 8020e0a:	f7f1 fd6b 	bl	80128e4 <GUI_ALLOC_LockH>
 8020e0e:	464a      	mov	r2, r9
 8020e10:	4651      	mov	r1, sl
 8020e12:	900a      	str	r0, [sp, #40]	; 0x28
 8020e14:	f7f2 fbea 	bl	80135ec <GUI_MoveRect>
 8020e18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020e1a:	464a      	mov	r2, r9
 8020e1c:	4651      	mov	r1, sl
 8020e1e:	3008      	adds	r0, #8
 8020e20:	f7f2 fbe4 	bl	80135ec <GUI_MoveRect>
 8020e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e26:	a80a      	add	r0, sp, #40	; 0x28
 8020e28:	69da      	ldr	r2, [r3, #28]
 8020e2a:	6a1b      	ldr	r3, [r3, #32]
 8020e2c:	4614      	mov	r4, r2
 8020e2e:	9205      	str	r2, [sp, #20]
 8020e30:	9307      	str	r3, [sp, #28]
 8020e32:	f7f1 fd6b 	bl	801290c <GUI_ALLOC_UnlockH>
 8020e36:	2300      	movs	r3, #0
 8020e38:	9320      	str	r3, [sp, #128]	; 0x80
 8020e3a:	9321      	str	r3, [sp, #132]	; 0x84
 8020e3c:	9322      	str	r3, [sp, #136]	; 0x88
 8020e3e:	9323      	str	r3, [sp, #140]	; 0x8c
 8020e40:	2c00      	cmp	r4, #0
 8020e42:	f000 80e7 	beq.w	8021014 <_MoveDescendents+0x22c>
 8020e46:	9805      	ldr	r0, [sp, #20]
 8020e48:	f7f1 fd4c 	bl	80128e4 <GUI_ALLOC_LockH>
 8020e4c:	464a      	mov	r2, r9
 8020e4e:	4651      	mov	r1, sl
 8020e50:	900b      	str	r0, [sp, #44]	; 0x2c
 8020e52:	f7f2 fbcb 	bl	80135ec <GUI_MoveRect>
 8020e56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020e58:	464a      	mov	r2, r9
 8020e5a:	4651      	mov	r1, sl
 8020e5c:	3008      	adds	r0, #8
 8020e5e:	f7f2 fbc5 	bl	80135ec <GUI_MoveRect>
 8020e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e64:	a80b      	add	r0, sp, #44	; 0x2c
 8020e66:	69da      	ldr	r2, [r3, #28]
 8020e68:	6a1b      	ldr	r3, [r3, #32]
 8020e6a:	4614      	mov	r4, r2
 8020e6c:	9204      	str	r2, [sp, #16]
 8020e6e:	9308      	str	r3, [sp, #32]
 8020e70:	f7f1 fd4c 	bl	801290c <GUI_ALLOC_UnlockH>
 8020e74:	2300      	movs	r3, #0
 8020e76:	9324      	str	r3, [sp, #144]	; 0x90
 8020e78:	9325      	str	r3, [sp, #148]	; 0x94
 8020e7a:	9326      	str	r3, [sp, #152]	; 0x98
 8020e7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8020e7e:	2c00      	cmp	r4, #0
 8020e80:	f000 80b6 	beq.w	8020ff0 <_MoveDescendents+0x208>
 8020e84:	9804      	ldr	r0, [sp, #16]
 8020e86:	f7f1 fd2d 	bl	80128e4 <GUI_ALLOC_LockH>
 8020e8a:	464a      	mov	r2, r9
 8020e8c:	4651      	mov	r1, sl
 8020e8e:	900c      	str	r0, [sp, #48]	; 0x30
 8020e90:	f7f2 fbac 	bl	80135ec <GUI_MoveRect>
 8020e94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020e96:	464a      	mov	r2, r9
 8020e98:	4651      	mov	r1, sl
 8020e9a:	3008      	adds	r0, #8
 8020e9c:	f7f2 fba6 	bl	80135ec <GUI_MoveRect>
 8020ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ea2:	a80c      	add	r0, sp, #48	; 0x30
 8020ea4:	69da      	ldr	r2, [r3, #28]
 8020ea6:	6a1b      	ldr	r3, [r3, #32]
 8020ea8:	4614      	mov	r4, r2
 8020eaa:	9202      	str	r2, [sp, #8]
 8020eac:	9309      	str	r3, [sp, #36]	; 0x24
 8020eae:	f7f1 fd2d 	bl	801290c <GUI_ALLOC_UnlockH>
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8020eb6:	9329      	str	r3, [sp, #164]	; 0xa4
 8020eb8:	932a      	str	r3, [sp, #168]	; 0xa8
 8020eba:	932b      	str	r3, [sp, #172]	; 0xac
 8020ebc:	2c00      	cmp	r4, #0
 8020ebe:	f000 8085 	beq.w	8020fcc <_MoveDescendents+0x1e4>
 8020ec2:	4654      	mov	r4, sl
 8020ec4:	464d      	mov	r5, r9
 8020ec6:	9802      	ldr	r0, [sp, #8]
 8020ec8:	f7f1 fd0c 	bl	80128e4 <GUI_ALLOC_LockH>
 8020ecc:	462a      	mov	r2, r5
 8020ece:	4621      	mov	r1, r4
 8020ed0:	900d      	str	r0, [sp, #52]	; 0x34
 8020ed2:	f7f2 fb8b 	bl	80135ec <GUI_MoveRect>
 8020ed6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020ed8:	462a      	mov	r2, r5
 8020eda:	4621      	mov	r1, r4
 8020edc:	3008      	adds	r0, #8
 8020ede:	f7f2 fb85 	bl	80135ec <GUI_MoveRect>
 8020ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ee4:	a80d      	add	r0, sp, #52	; 0x34
 8020ee6:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8020eea:	6a1b      	ldr	r3, [r3, #32]
 8020eec:	9303      	str	r3, [sp, #12]
 8020eee:	f7f1 fd0d 	bl	801290c <GUI_ALLOC_UnlockH>
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	932c      	str	r3, [sp, #176]	; 0xb0
 8020ef6:	932d      	str	r3, [sp, #180]	; 0xb4
 8020ef8:	932e      	str	r3, [sp, #184]	; 0xb8
 8020efa:	932f      	str	r3, [sp, #188]	; 0xbc
 8020efc:	f1b9 0f00 	cmp.w	r9, #0
 8020f00:	d052      	beq.n	8020fa8 <_MoveDescendents+0x1c0>
 8020f02:	9301      	str	r3, [sp, #4]
 8020f04:	4648      	mov	r0, r9
 8020f06:	f7f1 fced 	bl	80128e4 <GUI_ALLOC_LockH>
 8020f0a:	462a      	mov	r2, r5
 8020f0c:	4621      	mov	r1, r4
 8020f0e:	900e      	str	r0, [sp, #56]	; 0x38
 8020f10:	f7f2 fb6c 	bl	80135ec <GUI_MoveRect>
 8020f14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020f16:	462a      	mov	r2, r5
 8020f18:	4621      	mov	r1, r4
 8020f1a:	3008      	adds	r0, #8
 8020f1c:	f7f2 fb66 	bl	80135ec <GUI_MoveRect>
 8020f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f22:	a80e      	add	r0, sp, #56	; 0x38
 8020f24:	69de      	ldr	r6, [r3, #28]
 8020f26:	6a1b      	ldr	r3, [r3, #32]
 8020f28:	9300      	str	r3, [sp, #0]
 8020f2a:	f7f1 fcef 	bl	801290c <GUI_ALLOC_UnlockH>
 8020f2e:	9b01      	ldr	r3, [sp, #4]
 8020f30:	9330      	str	r3, [sp, #192]	; 0xc0
 8020f32:	9331      	str	r3, [sp, #196]	; 0xc4
 8020f34:	9332      	str	r3, [sp, #200]	; 0xc8
 8020f36:	9333      	str	r3, [sp, #204]	; 0xcc
 8020f38:	b33e      	cbz	r6, 8020f8a <_MoveDescendents+0x1a2>
 8020f3a:	af1a      	add	r7, sp, #104	; 0x68
 8020f3c:	4630      	mov	r0, r6
 8020f3e:	f7f1 fcd1 	bl	80128e4 <GUI_ALLOC_LockH>
 8020f42:	462a      	mov	r2, r5
 8020f44:	4621      	mov	r1, r4
 8020f46:	900f      	str	r0, [sp, #60]	; 0x3c
 8020f48:	f7f2 fb50 	bl	80135ec <GUI_MoveRect>
 8020f4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020f4e:	462a      	mov	r2, r5
 8020f50:	4621      	mov	r1, r4
 8020f52:	3008      	adds	r0, #8
 8020f54:	f7f2 fb4a 	bl	80135ec <GUI_MoveRect>
 8020f58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f5a:	a80f      	add	r0, sp, #60	; 0x3c
 8020f5c:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8020f60:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8020f64:	f7f1 fcd2 	bl	801290c <GUI_ALLOC_UnlockH>
 8020f68:	4621      	mov	r1, r4
 8020f6a:	4650      	mov	r0, sl
 8020f6c:	462a      	mov	r2, r5
 8020f6e:	f7ff ff3b 	bl	8020de8 <_MoveDescendents>
 8020f72:	4630      	mov	r0, r6
 8020f74:	4646      	mov	r6, r8
 8020f76:	a930      	add	r1, sp, #192	; 0xc0
 8020f78:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 8020f7c:	9733      	str	r7, [sp, #204]	; 0xcc
 8020f7e:	941a      	str	r4, [sp, #104]	; 0x68
 8020f80:	951b      	str	r5, [sp, #108]	; 0x6c
 8020f82:	f000 fc1f 	bl	80217c4 <WM__SendMessage>
 8020f86:	2e00      	cmp	r6, #0
 8020f88:	d1d8      	bne.n	8020f3c <_MoveDescendents+0x154>
 8020f8a:	4648      	mov	r0, r9
 8020f8c:	ab18      	add	r3, sp, #96	; 0x60
 8020f8e:	f8dd 9000 	ldr.w	r9, [sp]
 8020f92:	a92c      	add	r1, sp, #176	; 0xb0
 8020f94:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 8020f98:	932f      	str	r3, [sp, #188]	; 0xbc
 8020f9a:	9418      	str	r4, [sp, #96]	; 0x60
 8020f9c:	9519      	str	r5, [sp, #100]	; 0x64
 8020f9e:	f000 fc11 	bl	80217c4 <WM__SendMessage>
 8020fa2:	f1b9 0f00 	cmp.w	r9, #0
 8020fa6:	d1ad      	bne.n	8020f04 <_MoveDescendents+0x11c>
 8020fa8:	9b03      	ldr	r3, [sp, #12]
 8020faa:	a928      	add	r1, sp, #160	; 0xa0
 8020fac:	9802      	ldr	r0, [sp, #8]
 8020fae:	461e      	mov	r6, r3
 8020fb0:	9302      	str	r3, [sp, #8]
 8020fb2:	ab16      	add	r3, sp, #88	; 0x58
 8020fb4:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 8020fb8:	9416      	str	r4, [sp, #88]	; 0x58
 8020fba:	932b      	str	r3, [sp, #172]	; 0xac
 8020fbc:	9517      	str	r5, [sp, #92]	; 0x5c
 8020fbe:	f000 fc01 	bl	80217c4 <WM__SendMessage>
 8020fc2:	2e00      	cmp	r6, #0
 8020fc4:	f47f af7f 	bne.w	8020ec6 <_MoveDescendents+0xde>
 8020fc8:	46a2      	mov	sl, r4
 8020fca:	46a9      	mov	r9, r5
 8020fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fce:	a924      	add	r1, sp, #144	; 0x90
 8020fd0:	9804      	ldr	r0, [sp, #16]
 8020fd2:	461c      	mov	r4, r3
 8020fd4:	9304      	str	r3, [sp, #16]
 8020fd6:	ab14      	add	r3, sp, #80	; 0x50
 8020fd8:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 8020fdc:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8020fe0:	9327      	str	r3, [sp, #156]	; 0x9c
 8020fe2:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8020fe6:	f000 fbed 	bl	80217c4 <WM__SendMessage>
 8020fea:	2c00      	cmp	r4, #0
 8020fec:	f47f af4a 	bne.w	8020e84 <_MoveDescendents+0x9c>
 8020ff0:	9b08      	ldr	r3, [sp, #32]
 8020ff2:	a920      	add	r1, sp, #128	; 0x80
 8020ff4:	9805      	ldr	r0, [sp, #20]
 8020ff6:	461c      	mov	r4, r3
 8020ff8:	9305      	str	r3, [sp, #20]
 8020ffa:	ab12      	add	r3, sp, #72	; 0x48
 8020ffc:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 8021000:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8021004:	9323      	str	r3, [sp, #140]	; 0x8c
 8021006:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802100a:	f000 fbdb 	bl	80217c4 <WM__SendMessage>
 802100e:	2c00      	cmp	r4, #0
 8021010:	f47f af19 	bne.w	8020e46 <_MoveDescendents+0x5e>
 8021014:	2303      	movs	r3, #3
 8021016:	9806      	ldr	r0, [sp, #24]
 8021018:	a91c      	add	r1, sp, #112	; 0x70
 802101a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 802101e:	931c      	str	r3, [sp, #112]	; 0x70
 8021020:	9b07      	ldr	r3, [sp, #28]
 8021022:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8021026:	461c      	mov	r4, r3
 8021028:	9306      	str	r3, [sp, #24]
 802102a:	ab10      	add	r3, sp, #64	; 0x40
 802102c:	931f      	str	r3, [sp, #124]	; 0x7c
 802102e:	f000 fbc9 	bl	80217c4 <WM__SendMessage>
 8021032:	2c00      	cmp	r4, #0
 8021034:	f47f aee8 	bne.w	8020e08 <_MoveDescendents+0x20>
 8021038:	b035      	add	sp, #212	; 0xd4
 802103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802103e:	bf00      	nop

08021040 <WM_MoveWindow>:
 8021040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021044:	b08b      	sub	sp, #44	; 0x2c
 8021046:	4604      	mov	r4, r0
 8021048:	460d      	mov	r5, r1
 802104a:	4616      	mov	r6, r2
 802104c:	f7f6 fe74 	bl	8017d38 <GUI_Lock>
 8021050:	2300      	movs	r3, #0
 8021052:	9307      	str	r3, [sp, #28]
 8021054:	9306      	str	r3, [sp, #24]
 8021056:	9308      	str	r3, [sp, #32]
 8021058:	9309      	str	r3, [sp, #36]	; 0x24
 802105a:	b10c      	cbz	r4, 8021060 <WM_MoveWindow+0x20>
 802105c:	b92d      	cbnz	r5, 802106a <WM_MoveWindow+0x2a>
 802105e:	b926      	cbnz	r6, 802106a <WM_MoveWindow+0x2a>
 8021060:	f7f6 fe60 	bl	8017d24 <GUI_Unlock>
 8021064:	b00b      	add	sp, #44	; 0x2c
 8021066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802106a:	4620      	mov	r0, r4
 802106c:	f10d 0808 	add.w	r8, sp, #8
 8021070:	f7f1 fc38 	bl	80128e4 <GUI_ALLOC_LockH>
 8021074:	4603      	mov	r3, r0
 8021076:	9001      	str	r0, [sp, #4]
 8021078:	4632      	mov	r2, r6
 802107a:	af0a      	add	r7, sp, #40	; 0x28
 802107c:	c803      	ldmia	r0, {r0, r1}
 802107e:	e888 0003 	stmia.w	r8, {r0, r1}
 8021082:	4618      	mov	r0, r3
 8021084:	4629      	mov	r1, r5
 8021086:	f7f2 fab1 	bl	80135ec <GUI_MoveRect>
 802108a:	9801      	ldr	r0, [sp, #4]
 802108c:	4632      	mov	r2, r6
 802108e:	4629      	mov	r1, r5
 8021090:	3008      	adds	r0, #8
 8021092:	f7f2 faab 	bl	80135ec <GUI_MoveRect>
 8021096:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 802109a:	f8d3 901c 	ldr.w	r9, [r3, #28]
 802109e:	4638      	mov	r0, r7
 80210a0:	f7f1 fc34 	bl	801290c <GUI_ALLOC_UnlockH>
 80210a4:	4632      	mov	r2, r6
 80210a6:	4629      	mov	r1, r5
 80210a8:	4648      	mov	r0, r9
 80210aa:	f7ff fe9d 	bl	8020de8 <_MoveDescendents>
 80210ae:	4620      	mov	r0, r4
 80210b0:	f7f1 fc18 	bl	80128e4 <GUI_ALLOC_LockH>
 80210b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80210b6:	9001      	str	r0, [sp, #4]
 80210b8:	0792      	lsls	r2, r2, #30
 80210ba:	d501      	bpl.n	80210c0 <WM_MoveWindow+0x80>
 80210bc:	6981      	ldr	r1, [r0, #24]
 80210be:	b989      	cbnz	r1, 80210e4 <WM_MoveWindow+0xa4>
 80210c0:	4638      	mov	r0, r7
 80210c2:	f7f1 fc23 	bl	801290c <GUI_ALLOC_UnlockH>
 80210c6:	2203      	movs	r2, #3
 80210c8:	ab04      	add	r3, sp, #16
 80210ca:	a906      	add	r1, sp, #24
 80210cc:	4620      	mov	r0, r4
 80210ce:	9206      	str	r2, [sp, #24]
 80210d0:	9309      	str	r3, [sp, #36]	; 0x24
 80210d2:	9504      	str	r5, [sp, #16]
 80210d4:	9605      	str	r6, [sp, #20]
 80210d6:	f000 fb75 	bl	80217c4 <WM__SendMessage>
 80210da:	f7f6 fe23 	bl	8017d24 <GUI_Unlock>
 80210de:	b00b      	add	sp, #44	; 0x2c
 80210e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210e4:	6a02      	ldr	r2, [r0, #32]
 80210e6:	f7fe fdf9 	bl	801fcdc <WM__InvalidateParent>
 80210ea:	9b01      	ldr	r3, [sp, #4]
 80210ec:	4640      	mov	r0, r8
 80210ee:	6a1a      	ldr	r2, [r3, #32]
 80210f0:	6999      	ldr	r1, [r3, #24]
 80210f2:	f7fe fdf3 	bl	801fcdc <WM__InvalidateParent>
 80210f6:	e7e3      	b.n	80210c0 <WM_MoveWindow+0x80>

080210f8 <WM__DeleteAssocTimer>:
 80210f8:	b570      	push	{r4, r5, r6, lr}
 80210fa:	b082      	sub	sp, #8
 80210fc:	4605      	mov	r5, r0
 80210fe:	f7f6 fe1b 	bl	8017d38 <GUI_Lock>
 8021102:	4668      	mov	r0, sp
 8021104:	f002 f830 	bl	8023168 <GUI_TIMER__GetFirstTimer>
 8021108:	b178      	cbz	r0, 802112a <WM__DeleteAssocTimer+0x32>
 802110a:	4604      	mov	r4, r0
 802110c:	2101      	movs	r1, #1
 802110e:	4620      	mov	r0, r4
 8021110:	f002 f8cc 	bl	80232ac <GUI_TIMER_GetFlag>
 8021114:	9b00      	ldr	r3, [sp, #0]
 8021116:	4602      	mov	r2, r0
 8021118:	4669      	mov	r1, sp
 802111a:	4620      	mov	r0, r4
 802111c:	b103      	cbz	r3, 8021120 <WM__DeleteAssocTimer+0x28>
 802111e:	b942      	cbnz	r2, 8021132 <WM__DeleteAssocTimer+0x3a>
 8021120:	f002 f83a 	bl	8023198 <GUI_TIMER__GetNextTimerLin>
 8021124:	4604      	mov	r4, r0
 8021126:	2c00      	cmp	r4, #0
 8021128:	d1f0      	bne.n	802110c <WM__DeleteAssocTimer+0x14>
 802112a:	f7f6 fdfb 	bl	8017d24 <GUI_Unlock>
 802112e:	b002      	add	sp, #8
 8021130:	bd70      	pop	{r4, r5, r6, pc}
 8021132:	4618      	mov	r0, r3
 8021134:	f7f1 fbcc 	bl	80128d0 <GUI_ALLOC_h2p>
 8021138:	6843      	ldr	r3, [r0, #4]
 802113a:	4669      	mov	r1, sp
 802113c:	4620      	mov	r0, r4
 802113e:	42ab      	cmp	r3, r5
 8021140:	d1ee      	bne.n	8021120 <WM__DeleteAssocTimer+0x28>
 8021142:	9e00      	ldr	r6, [sp, #0]
 8021144:	f002 f828 	bl	8023198 <GUI_TIMER__GetNextTimerLin>
 8021148:	4604      	mov	r4, r0
 802114a:	2e00      	cmp	r6, #0
 802114c:	d0eb      	beq.n	8021126 <WM__DeleteAssocTimer+0x2e>
 802114e:	f7f6 fdf3 	bl	8017d38 <GUI_Lock>
 8021152:	4630      	mov	r0, r6
 8021154:	f7f1 fbc6 	bl	80128e4 <GUI_ALLOC_LockH>
 8021158:	4603      	mov	r3, r0
 802115a:	6800      	ldr	r0, [r0, #0]
 802115c:	9301      	str	r3, [sp, #4]
 802115e:	f002 f83b 	bl	80231d8 <GUI_TIMER_Delete>
 8021162:	a801      	add	r0, sp, #4
 8021164:	f7f1 fbd2 	bl	801290c <GUI_ALLOC_UnlockH>
 8021168:	4630      	mov	r0, r6
 802116a:	f7f1 fd53 	bl	8012c14 <GUI_ALLOC_Free>
 802116e:	f7f6 fdd9 	bl	8017d24 <GUI_Unlock>
 8021172:	2c00      	cmp	r4, #0
 8021174:	d1ca      	bne.n	802110c <WM__DeleteAssocTimer+0x14>
 8021176:	e7d8      	b.n	802112a <WM__DeleteAssocTimer+0x32>

08021178 <WM__SendTouchMessage>:
 8021178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802117a:	68cc      	ldr	r4, [r1, #12]
 802117c:	b087      	sub	sp, #28
 802117e:	460d      	mov	r5, r1
 8021180:	4607      	mov	r7, r0
 8021182:	b18c      	cbz	r4, 80211a8 <WM__SendTouchMessage+0x30>
 8021184:	f7f1 fbae 	bl	80128e4 <GUI_ALLOC_LockH>
 8021188:	6822      	ldr	r2, [r4, #0]
 802118a:	f9b0 3000 	ldrsh.w	r3, [r0]
 802118e:	a906      	add	r1, sp, #24
 8021190:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8021194:	1ad2      	subs	r2, r2, r3
 8021196:	6863      	ldr	r3, [r4, #4]
 8021198:	f841 0d14 	str.w	r0, [r1, #-20]!
 802119c:	4608      	mov	r0, r1
 802119e:	1b9b      	subs	r3, r3, r6
 80211a0:	e884 000c 	stmia.w	r4, {r2, r3}
 80211a4:	f7f1 fbb2 	bl	801290c <GUI_ALLOC_UnlockH>
 80211a8:	ae02      	add	r6, sp, #8
 80211aa:	f04f 0e0d 	mov.w	lr, #13
 80211ae:	463c      	mov	r4, r7
 80211b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80211b4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80211b8:	9704      	str	r7, [sp, #16]
 80211ba:	f8cd e008 	str.w	lr, [sp, #8]
 80211be:	4620      	mov	r0, r4
 80211c0:	f7ff fd44 	bl	8020c4c <WM_IsWindow>
 80211c4:	b170      	cbz	r0, 80211e4 <WM__SendTouchMessage+0x6c>
 80211c6:	4620      	mov	r0, r4
 80211c8:	f7ff fd18 	bl	8020bfc <WM_GetParent>
 80211cc:	4604      	mov	r4, r0
 80211ce:	2800      	cmp	r0, #0
 80211d0:	d0f5      	beq.n	80211be <WM__SendTouchMessage+0x46>
 80211d2:	4631      	mov	r1, r6
 80211d4:	9505      	str	r5, [sp, #20]
 80211d6:	f000 fb13 	bl	8021800 <WM__SendMessageIfEnabled>
 80211da:	4620      	mov	r0, r4
 80211dc:	f7ff fd36 	bl	8020c4c <WM_IsWindow>
 80211e0:	2800      	cmp	r0, #0
 80211e2:	d1f0      	bne.n	80211c6 <WM__SendTouchMessage+0x4e>
 80211e4:	4629      	mov	r1, r5
 80211e6:	4638      	mov	r0, r7
 80211e8:	f000 fb0a 	bl	8021800 <WM__SendMessageIfEnabled>
 80211ec:	b007      	add	sp, #28
 80211ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080211f0 <WM_HandlePID>:
 80211f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f4:	b099      	sub	sp, #100	; 0x64
 80211f6:	2300      	movs	r3, #0
 80211f8:	ac08      	add	r4, sp, #32
 80211fa:	9308      	str	r3, [sp, #32]
 80211fc:	6063      	str	r3, [r4, #4]
 80211fe:	60a3      	str	r3, [r4, #8]
 8021200:	f001 fb82 	bl	8022908 <GUI_PID_IsEmpty>
 8021204:	b120      	cbz	r0, 8021210 <WM_HandlePID+0x20>
 8021206:	2700      	movs	r7, #0
 8021208:	4638      	mov	r0, r7
 802120a:	b019      	add	sp, #100	; 0x64
 802120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021210:	ae0b      	add	r6, sp, #44	; 0x2c
 8021212:	4607      	mov	r7, r0
 8021214:	4630      	mov	r0, r6
 8021216:	f001 fac5 	bl	80227a4 <GUI_PID_GetState>
 802121a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802121c:	3301      	adds	r3, #1
 802121e:	f000 80a2 	beq.w	8021366 <WM_HandlePID+0x176>
 8021222:	4db9      	ldr	r5, [pc, #740]	; (8021508 <WM_HandlePID+0x318>)
 8021224:	f7f6 fd88 	bl	8017d38 <GUI_Lock>
 8021228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802122a:	2b00      	cmp	r3, #0
 802122c:	f2c0 8115 	blt.w	802145a <WM_HandlePID+0x26a>
 8021230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021232:	2a00      	cmp	r2, #0
 8021234:	db09      	blt.n	802124a <WM_HandlePID+0x5a>
 8021236:	48b5      	ldr	r0, [pc, #724]	; (802150c <WM_HandlePID+0x31c>)
 8021238:	49b5      	ldr	r1, [pc, #724]	; (8021510 <WM_HandlePID+0x320>)
 802123a:	f9b0 0000 	ldrsh.w	r0, [r0]
 802123e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8021242:	4403      	add	r3, r0
 8021244:	440a      	add	r2, r1
 8021246:	930b      	str	r3, [sp, #44]	; 0x2c
 8021248:	920c      	str	r2, [sp, #48]	; 0x30
 802124a:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 802124e:	2801      	cmp	r0, #1
 8021250:	bf8c      	ite	hi
 8021252:	6828      	ldrhi	r0, [r5, #0]
 8021254:	6028      	strls	r0, [r5, #0]
 8021256:	f7f2 fda5 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 802125a:	2800      	cmp	r0, #0
 802125c:	d07d      	beq.n	802135a <WM_HandlePID+0x16a>
 802125e:	aa04      	add	r2, sp, #16
 8021260:	a903      	add	r1, sp, #12
 8021262:	6828      	ldr	r0, [r5, #0]
 8021264:	f7f5 fb48 	bl	80168f8 <GUI_GetLayerPosEx>
 8021268:	a806      	add	r0, sp, #24
 802126a:	f000 fb93 	bl	8021994 <WM__AddCriticalHandle>
 802126e:	682b      	ldr	r3, [r5, #0]
 8021270:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8021520 <WM_HandlePID+0x330>
 8021274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802127a:	9803      	ldr	r0, [sp, #12]
 802127c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8021280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021282:	1a10      	subs	r0, r2, r0
 8021284:	9f04      	ldr	r7, [sp, #16]
 8021286:	691a      	ldr	r2, [r3, #16]
 8021288:	1bc9      	subs	r1, r1, r7
 802128a:	900b      	str	r0, [sp, #44]	; 0x2c
 802128c:	4290      	cmp	r0, r2
 802128e:	910c      	str	r1, [sp, #48]	; 0x30
 8021290:	d103      	bne.n	802129a <WM_HandlePID+0xaa>
 8021292:	695a      	ldr	r2, [r3, #20]
 8021294:	4291      	cmp	r1, r2
 8021296:	f000 8158 	beq.w	802154a <WM_HandlePID+0x35a>
 802129a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 802129e:	f001 fa2f 	bl	8022700 <GUI_CURSOR_SetPositionEx>
 80212a2:	f8d8 3000 	ldr.w	r3, [r8]
 80212a6:	b113      	cbz	r3, 80212ae <WM_HandlePID+0xbe>
 80212a8:	2100      	movs	r1, #0
 80212aa:	4630      	mov	r0, r6
 80212ac:	4798      	blx	r3
 80212ae:	4b99      	ldr	r3, [pc, #612]	; (8021514 <WM_HandlePID+0x324>)
 80212b0:	682a      	ldr	r2, [r5, #0]
 80212b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80212b6:	2800      	cmp	r0, #0
 80212b8:	f000 813a 	beq.w	8021530 <WM_HandlePID+0x340>
 80212bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80212c0:	9007      	str	r0, [sp, #28]
 80212c2:	b113      	cbz	r3, 80212ca <WM_HandlePID+0xda>
 80212c4:	9907      	ldr	r1, [sp, #28]
 80212c6:	4630      	mov	r0, r6
 80212c8:	4798      	blx	r3
 80212ca:	682b      	ldr	r3, [r5, #0]
 80212cc:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8021528 <WM_HandlePID+0x338>
 80212d0:	00db      	lsls	r3, r3, #3
 80212d2:	4f8d      	ldr	r7, [pc, #564]	; (8021508 <WM_HandlePID+0x318>)
 80212d4:	eb09 0103 	add.w	r1, r9, r3
 80212d8:	684a      	ldr	r2, [r1, #4]
 80212da:	9807      	ldr	r0, [sp, #28]
 80212dc:	4282      	cmp	r2, r0
 80212de:	d002      	beq.n	80212e6 <WM_HandlePID+0xf6>
 80212e0:	2a00      	cmp	r2, #0
 80212e2:	f040 80cc 	bne.w	802147e <WM_HandlePID+0x28e>
 80212e6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80212ea:	f1ba 0f00 	cmp.w	sl, #0
 80212ee:	d04c      	beq.n	802138a <WM_HandlePID+0x19a>
 80212f0:	4b89      	ldr	r3, [pc, #548]	; (8021518 <WM_HandlePID+0x328>)
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	db07      	blt.n	8021308 <WM_HandlePID+0x118>
 80212f8:	4a88      	ldr	r2, [pc, #544]	; (802151c <WM_HandlePID+0x32c>)
 80212fa:	4650      	mov	r0, sl
 80212fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021300:	f000 fa44 	bl	802178c <WM__IsAncestor>
 8021304:	2800      	cmp	r0, #0
 8021306:	d040      	beq.n	802138a <WM_HandlePID+0x19a>
 8021308:	682a      	ldr	r2, [r5, #0]
 802130a:	4650      	mov	r0, sl
 802130c:	f8df b214 	ldr.w	fp, [pc, #532]	; 8021524 <WM_HandlePID+0x334>
 8021310:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8021314:	6851      	ldr	r1, [r2, #4]
 8021316:	f000 fa39 	bl	802178c <WM__IsAncestor>
 802131a:	682f      	ldr	r7, [r5, #0]
 802131c:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021320:	eb0b 030e 	add.w	r3, fp, lr
 8021324:	685a      	ldr	r2, [r3, #4]
 8021326:	685b      	ldr	r3, [r3, #4]
 8021328:	2a00      	cmp	r2, #0
 802132a:	bf18      	it	ne
 802132c:	459a      	cmpne	sl, r3
 802132e:	d02e      	beq.n	802138e <WM_HandlePID+0x19e>
 8021330:	bb68      	cbnz	r0, 802138e <WM_HandlePID+0x19e>
 8021332:	f04f 0900 	mov.w	r9, #0
 8021336:	007b      	lsls	r3, r7, #1
 8021338:	443b      	add	r3, r7
 802133a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 802133e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021342:	f108 0810 	add.w	r8, r8, #16
 8021346:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 802134a:	4639      	mov	r1, r7
 802134c:	4630      	mov	r0, r6
 802134e:	f002 f95b 	bl	8023608 <WM_PID__SetPrevState>
 8021352:	a806      	add	r0, sp, #24
 8021354:	464f      	mov	r7, r9
 8021356:	f000 fb25 	bl	80219a4 <WM__RemoveCriticalHandle>
 802135a:	f7f6 fce3 	bl	8017d24 <GUI_Unlock>
 802135e:	4638      	mov	r0, r7
 8021360:	b019      	add	sp, #100	; 0x64
 8021362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021368:	4d67      	ldr	r5, [pc, #412]	; (8021508 <WM_HandlePID+0x318>)
 802136a:	3301      	adds	r3, #1
 802136c:	f47f af5a 	bne.w	8021224 <WM_HandlePID+0x34>
 8021370:	682b      	ldr	r3, [r5, #0]
 8021372:	4a6b      	ldr	r2, [pc, #428]	; (8021520 <WM_HandlePID+0x330>)
 8021374:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021378:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 802137c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021380:	7e1b      	ldrb	r3, [r3, #24]
 8021382:	428b      	cmp	r3, r1
 8021384:	f47f af4e 	bne.w	8021224 <WM_HandlePID+0x34>
 8021388:	e73d      	b.n	8021206 <WM_HandlePID+0x16>
 802138a:	682f      	ldr	r7, [r5, #0]
 802138c:	e7d1      	b.n	8021332 <WM_HandlePID+0x142>
 802138e:	007b      	lsls	r3, r7, #1
 8021390:	44f1      	add	r9, lr
 8021392:	9907      	ldr	r1, [sp, #28]
 8021394:	19da      	adds	r2, r3, r7
 8021396:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802139a:	f8c9 1004 	str.w	r1, [r9, #4]
 802139e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80213a2:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8021520 <WM_HandlePID+0x330>
 80213a6:	f892 9018 	ldrb.w	r9, [r2, #24]
 80213aa:	45e1      	cmp	r9, ip
 80213ac:	d003      	beq.n	80213b6 <WM_HandlePID+0x1c6>
 80213ae:	9a07      	ldr	r2, [sp, #28]
 80213b0:	2a00      	cmp	r2, #0
 80213b2:	f040 80d3 	bne.w	802155c <WM_HandlePID+0x36c>
 80213b6:	ea59 0a0c 	orrs.w	sl, r9, ip
 80213ba:	f000 80be 	beq.w	802153a <WM_HandlePID+0x34a>
 80213be:	f8df 916c 	ldr.w	r9, [pc, #364]	; 802152c <WM_HandlePID+0x33c>
 80213c2:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 80213c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80213ca:	eb09 020e 	add.w	r2, r9, lr
 80213ce:	9114      	str	r1, [sp, #80]	; 0x50
 80213d0:	6850      	ldr	r0, [r2, #4]
 80213d2:	9907      	ldr	r1, [sp, #28]
 80213d4:	4288      	cmp	r0, r1
 80213d6:	d020      	beq.n	802141a <WM_HandlePID+0x22a>
 80213d8:	6852      	ldr	r2, [r2, #4]
 80213da:	b1f2      	cbz	r2, 802141a <WM_HandlePID+0x22a>
 80213dc:	f1bc 0f00 	cmp.w	ip, #0
 80213e0:	f040 8154 	bne.w	802168c <WM_HandlePID+0x49c>
 80213e4:	443b      	add	r3, r7
 80213e6:	4622      	mov	r2, r4
 80213e8:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
 80213ec:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80213f0:	6919      	ldr	r1, [r3, #16]
 80213f2:	695b      	ldr	r3, [r3, #20]
 80213f4:	9108      	str	r1, [sp, #32]
 80213f6:	9309      	str	r3, [sp, #36]	; 0x24
 80213f8:	44ce      	add	lr, r9
 80213fa:	a914      	add	r1, sp, #80	; 0x50
 80213fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80213fe:	f8de 0004 	ldr.w	r0, [lr, #4]
 8021402:	f7ff feb9 	bl	8021178 <WM__SendTouchMessage>
 8021406:	682f      	ldr	r7, [r5, #0]
 8021408:	2100      	movs	r1, #0
 802140a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802140e:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021412:	007b      	lsls	r3, r7, #1
 8021414:	eb09 020e 	add.w	r2, r9, lr
 8021418:	6051      	str	r1, [r2, #4]
 802141a:	19da      	adds	r2, r3, r7
 802141c:	9907      	ldr	r1, [sp, #28]
 802141e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8021422:	f882 c018 	strb.w	ip, [r2, #24]
 8021426:	2900      	cmp	r1, #0
 8021428:	f000 808c 	beq.w	8021544 <WM_HandlePID+0x354>
 802142c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021434:	f1bc 0f00 	cmp.w	ip, #0
 8021438:	f000 8107 	beq.w	802164a <WM_HandlePID+0x45a>
 802143c:	44f1      	add	r9, lr
 802143e:	9b07      	ldr	r3, [sp, #28]
 8021440:	f8c9 3004 	str.w	r3, [r9, #4]
 8021444:	9807      	ldr	r0, [sp, #28]
 8021446:	a914      	add	r1, sp, #80	; 0x50
 8021448:	9417      	str	r4, [sp, #92]	; 0x5c
 802144a:	f04f 0901 	mov.w	r9, #1
 802144e:	f7ff fe93 	bl	8021178 <WM__SendTouchMessage>
 8021452:	682f      	ldr	r7, [r5, #0]
 8021454:	fa07 f309 	lsl.w	r3, r7, r9
 8021458:	e76e      	b.n	8021338 <WM_HandlePID+0x148>
 802145a:	3301      	adds	r3, #1
 802145c:	f47f aef5 	bne.w	802124a <WM_HandlePID+0x5a>
 8021460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021462:	3301      	adds	r3, #1
 8021464:	f47f aef1 	bne.w	802124a <WM_HandlePID+0x5a>
 8021468:	682b      	ldr	r3, [r5, #0]
 802146a:	4a2d      	ldr	r2, [pc, #180]	; (8021520 <WM_HandlePID+0x330>)
 802146c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021474:	691a      	ldr	r2, [r3, #16]
 8021476:	695b      	ldr	r3, [r3, #20]
 8021478:	920b      	str	r2, [sp, #44]	; 0x2c
 802147a:	930c      	str	r3, [sp, #48]	; 0x30
 802147c:	e6e5      	b.n	802124a <WM_HandlePID+0x5a>
 802147e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8021482:	f1ba 0f00 	cmp.w	sl, #0
 8021486:	f43f af2e 	beq.w	80212e6 <WM_HandlePID+0xf6>
 802148a:	4a23      	ldr	r2, [pc, #140]	; (8021518 <WM_HandlePID+0x328>)
 802148c:	6812      	ldr	r2, [r2, #0]
 802148e:	2a00      	cmp	r2, #0
 8021490:	db0a      	blt.n	80214a8 <WM_HandlePID+0x2b8>
 8021492:	4b22      	ldr	r3, [pc, #136]	; (802151c <WM_HandlePID+0x32c>)
 8021494:	4650      	mov	r0, sl
 8021496:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802149a:	f000 f977 	bl	802178c <WM__IsAncestor>
 802149e:	2800      	cmp	r0, #0
 80214a0:	f43f af21 	beq.w	80212e6 <WM_HandlePID+0xf6>
 80214a4:	683b      	ldr	r3, [r7, #0]
 80214a6:	00db      	lsls	r3, r3, #3
 80214a8:	4f1e      	ldr	r7, [pc, #120]	; (8021524 <WM_HandlePID+0x334>)
 80214aa:	4650      	mov	r0, sl
 80214ac:	443b      	add	r3, r7
 80214ae:	6859      	ldr	r1, [r3, #4]
 80214b0:	f000 f96c 	bl	802178c <WM__IsAncestor>
 80214b4:	682b      	ldr	r3, [r5, #0]
 80214b6:	00db      	lsls	r3, r3, #3
 80214b8:	441f      	add	r7, r3
 80214ba:	6879      	ldr	r1, [r7, #4]
 80214bc:	687a      	ldr	r2, [r7, #4]
 80214be:	4592      	cmp	sl, r2
 80214c0:	bf18      	it	ne
 80214c2:	2900      	cmpne	r1, #0
 80214c4:	d002      	beq.n	80214cc <WM_HandlePID+0x2dc>
 80214c6:	2800      	cmp	r0, #0
 80214c8:	f43f af0d 	beq.w	80212e6 <WM_HandlePID+0xf6>
 80214cc:	444b      	add	r3, r9
 80214ce:	4f16      	ldr	r7, [pc, #88]	; (8021528 <WM_HandlePID+0x338>)
 80214d0:	6858      	ldr	r0, [r3, #4]
 80214d2:	f000 f96d 	bl	80217b0 <WM__IsEnabled>
 80214d6:	2800      	cmp	r0, #0
 80214d8:	f43f af05 	beq.w	80212e6 <WM_HandlePID+0xf6>
 80214dc:	682b      	ldr	r3, [r5, #0]
 80214de:	2212      	movs	r2, #18
 80214e0:	9417      	str	r4, [sp, #92]	; 0x5c
 80214e2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80214e6:	9214      	str	r2, [sp, #80]	; 0x50
 80214e8:	685b      	ldr	r3, [r3, #4]
 80214ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80214ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80214f2:	4618      	mov	r0, r3
 80214f4:	a914      	add	r1, sp, #80	; 0x50
 80214f6:	f7ff fe3f 	bl	8021178 <WM__SendTouchMessage>
 80214fa:	682b      	ldr	r3, [r5, #0]
 80214fc:	2200      	movs	r2, #0
 80214fe:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8021502:	605a      	str	r2, [r3, #4]
 8021504:	e6ef      	b.n	80212e6 <WM_HandlePID+0xf6>
 8021506:	bf00      	nop
 8021508:	2004681c 	.word	0x2004681c
 802150c:	200467a8 	.word	0x200467a8
 8021510:	20046798 	.word	0x20046798
 8021514:	20046840 	.word	0x20046840
 8021518:	20000088 	.word	0x20000088
 802151c:	200467fc 	.word	0x200467fc
 8021520:	20000414 	.word	0x20000414
 8021524:	20046870 	.word	0x20046870
 8021528:	20046850 	.word	0x20046850
 802152c:	20046860 	.word	0x20046860
 8021530:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021532:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021534:	f002 fa48 	bl	80239c8 <WM_Screen2hWin>
 8021538:	e6c0      	b.n	80212bc <WM_HandlePID+0xcc>
 802153a:	9807      	ldr	r0, [sp, #28]
 802153c:	2800      	cmp	r0, #0
 802153e:	d17b      	bne.n	8021638 <WM_HandlePID+0x448>
 8021540:	4681      	mov	r9, r0
 8021542:	e6f9      	b.n	8021338 <WM_HandlePID+0x148>
 8021544:	f04f 0901 	mov.w	r9, #1
 8021548:	e6f6      	b.n	8021338 <WM_HandlePID+0x148>
 802154a:	7e1a      	ldrb	r2, [r3, #24]
 802154c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8021550:	429a      	cmp	r2, r3
 8021552:	f47f aea2 	bne.w	802129a <WM_HandlePID+0xaa>
 8021556:	f04f 0900 	mov.w	r9, #0
 802155a:	e6fa      	b.n	8021352 <WM_HandlePID+0x162>
 802155c:	9807      	ldr	r0, [sp, #28]
 802155e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8021562:	f7f1 f9bf 	bl	80128e4 <GUI_ALLOC_LockH>
 8021566:	682b      	ldr	r3, [r5, #0]
 8021568:	4607      	mov	r7, r0
 802156a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 802156e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021574:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8021578:	a805      	add	r0, sp, #20
 802157a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 802157e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021580:	9705      	str	r7, [sp, #20]
 8021582:	7e1b      	ldrb	r3, [r3, #24]
 8021584:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8021588:	f9b7 e000 	ldrsh.w	lr, [r7]
 802158c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021590:	ebce 0101 	rsb	r1, lr, r1
 8021594:	1ad2      	subs	r2, r2, r3
 8021596:	9111      	str	r1, [sp, #68]	; 0x44
 8021598:	9212      	str	r2, [sp, #72]	; 0x48
 802159a:	f7f1 f9b7 	bl	801290c <GUI_ALLOC_UnlockH>
 802159e:	f8d5 e000 	ldr.w	lr, [r5]
 80215a2:	aa11      	add	r2, sp, #68	; 0x44
 80215a4:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80215a8:	f04f 0c11 	mov.w	ip, #17
 80215ac:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 80215b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80215b2:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80215b6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80215ba:	f103 0210 	add.w	r2, r3, #16
 80215be:	ca07      	ldmia	r2, {r0, r1, r2}
 80215c0:	761f      	strb	r7, [r3, #24]
 80215c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80215c6:	4f52      	ldr	r7, [pc, #328]	; (8021710 <WM_HandlePID+0x520>)
 80215c8:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d045      	beq.n	802165c <WM_HandlePID+0x46c>
 80215d0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 802171c <WM_HandlePID+0x52c>
 80215d4:	a914      	add	r1, sp, #80	; 0x50
 80215d6:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 80215da:	f8de b004 	ldr.w	fp, [lr, #4]
 80215de:	9b07      	ldr	r3, [sp, #28]
 80215e0:	f8ce 3004 	str.w	r3, [lr, #4]
 80215e4:	f8de 3004 	ldr.w	r3, [lr, #4]
 80215e8:	9807      	ldr	r0, [sp, #28]
 80215ea:	9300      	str	r3, [sp, #0]
 80215ec:	f000 f908 	bl	8021800 <WM__SendMessageIfEnabled>
 80215f0:	683f      	ldr	r7, [r7, #0]
 80215f2:	9b00      	ldr	r3, [sp, #0]
 80215f4:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 80215f8:	eb09 020e 	add.w	r2, r9, lr
 80215fc:	6852      	ldr	r2, [r2, #4]
 80215fe:	4293      	cmp	r3, r2
 8021600:	d003      	beq.n	802160a <WM_HandlePID+0x41a>
 8021602:	44ce      	add	lr, r9
 8021604:	f8de 3004 	ldr.w	r3, [lr, #4]
 8021608:	9307      	str	r3, [sp, #28]
 802160a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 802160e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8021612:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8021616:	3310      	adds	r3, #16
 8021618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802161c:	f1bb 0f00 	cmp.w	fp, #0
 8021620:	d136      	bne.n	8021690 <WM_HandlePID+0x4a0>
 8021622:	682f      	ldr	r7, [r5, #0]
 8021624:	493b      	ldr	r1, [pc, #236]	; (8021714 <WM_HandlePID+0x524>)
 8021626:	007b      	lsls	r3, r7, #1
 8021628:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802162c:	19da      	adds	r2, r3, r7
 802162e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021632:	f892 9018 	ldrb.w	r9, [r2, #24]
 8021636:	e6be      	b.n	80213b6 <WM_HandlePID+0x1c6>
 8021638:	9807      	ldr	r0, [sp, #28]
 802163a:	f000 f8b9 	bl	80217b0 <WM__IsEnabled>
 802163e:	2800      	cmp	r0, #0
 8021640:	d135      	bne.n	80216ae <WM_HandlePID+0x4be>
 8021642:	682f      	ldr	r7, [r5, #0]
 8021644:	4681      	mov	r9, r0
 8021646:	007b      	lsls	r3, r7, #1
 8021648:	e676      	b.n	8021338 <WM_HandlePID+0x148>
 802164a:	4b33      	ldr	r3, [pc, #204]	; (8021718 <WM_HandlePID+0x528>)
 802164c:	781b      	ldrb	r3, [r3, #0]
 802164e:	2b00      	cmp	r3, #0
 8021650:	d13d      	bne.n	80216ce <WM_HandlePID+0x4de>
 8021652:	44f1      	add	r9, lr
 8021654:	2300      	movs	r3, #0
 8021656:	f8c9 3004 	str.w	r3, [r9, #4]
 802165a:	e6f3      	b.n	8021444 <WM_HandlePID+0x254>
 802165c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 802171c <WM_HandlePID+0x52c>
 8021660:	a914      	add	r1, sp, #80	; 0x50
 8021662:	9301      	str	r3, [sp, #4]
 8021664:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 8021668:	f8de 2004 	ldr.w	r2, [lr, #4]
 802166c:	9807      	ldr	r0, [sp, #28]
 802166e:	9200      	str	r2, [sp, #0]
 8021670:	f000 f8c6 	bl	8021800 <WM__SendMessageIfEnabled>
 8021674:	683f      	ldr	r7, [r7, #0]
 8021676:	9a00      	ldr	r2, [sp, #0]
 8021678:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 802167c:	9b01      	ldr	r3, [sp, #4]
 802167e:	eb09 010e 	add.w	r1, r9, lr
 8021682:	6849      	ldr	r1, [r1, #4]
 8021684:	4291      	cmp	r1, r2
 8021686:	d033      	beq.n	80216f0 <WM_HandlePID+0x500>
 8021688:	469b      	mov	fp, r3
 802168a:	e7ba      	b.n	8021602 <WM_HandlePID+0x412>
 802168c:	2200      	movs	r2, #0
 802168e:	e6b3      	b.n	80213f8 <WM_HandlePID+0x208>
 8021690:	4658      	mov	r0, fp
 8021692:	f7ff fadb 	bl	8020c4c <WM_IsWindow>
 8021696:	682f      	ldr	r7, [r5, #0]
 8021698:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802169c:	007b      	lsls	r3, r7, #1
 802169e:	b9e0      	cbnz	r0, 80216da <WM_HandlePID+0x4ea>
 80216a0:	19da      	adds	r2, r3, r7
 80216a2:	491c      	ldr	r1, [pc, #112]	; (8021714 <WM_HandlePID+0x524>)
 80216a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80216a8:	f892 9018 	ldrb.w	r9, [r2, #24]
 80216ac:	e683      	b.n	80213b6 <WM_HandlePID+0x1c6>
 80216ae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80216b2:	9f07      	ldr	r7, [sp, #28]
 80216b4:	2310      	movs	r3, #16
 80216b6:	9417      	str	r4, [sp, #92]	; 0x5c
 80216b8:	46d1      	mov	r9, sl
 80216ba:	9314      	str	r3, [sp, #80]	; 0x50
 80216bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80216c0:	4638      	mov	r0, r7
 80216c2:	a914      	add	r1, sp, #80	; 0x50
 80216c4:	f7ff fd58 	bl	8021178 <WM__SendTouchMessage>
 80216c8:	682f      	ldr	r7, [r5, #0]
 80216ca:	007b      	lsls	r3, r7, #1
 80216cc:	e634      	b.n	8021338 <WM_HandlePID+0x148>
 80216ce:	f002 f991 	bl	80239f4 <WM_ReleaseCapture>
 80216d2:	682f      	ldr	r7, [r5, #0]
 80216d4:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 80216d8:	e7bb      	b.n	8021652 <WM_HandlePID+0x462>
 80216da:	19da      	adds	r2, r3, r7
 80216dc:	490d      	ldr	r1, [pc, #52]	; (8021714 <WM_HandlePID+0x524>)
 80216de:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80216e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80216e6:	f8c9 b004 	str.w	fp, [r9, #4]
 80216ea:	f892 9018 	ldrb.w	r9, [r2, #24]
 80216ee:	e662      	b.n	80213b6 <WM_HandlePID+0x1c6>
 80216f0:	007b      	lsls	r3, r7, #1
 80216f2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80216f6:	19da      	adds	r2, r3, r7
 80216f8:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80216fc:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8021700:	f10b 0e10 	add.w	lr, fp, #16
 8021704:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8021708:	f89b 9018 	ldrb.w	r9, [fp, #24]
 802170c:	e653      	b.n	80213b6 <WM_HandlePID+0x1c6>
 802170e:	bf00      	nop
 8021710:	2004681c 	.word	0x2004681c
 8021714:	20000414 	.word	0x20000414
 8021718:	20046820 	.word	0x20046820
 802171c:	20046860 	.word	0x20046860

08021720 <WM__GetOrgX_AA>:
 8021720:	4b05      	ldr	r3, [pc, #20]	; (8021738 <WM__GetOrgX_AA+0x18>)
 8021722:	681b      	ldr	r3, [r3, #0]
 8021724:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8021728:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802172a:	b11a      	cbz	r2, 8021734 <WM__GetOrgX_AA+0x14>
 802172c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8021730:	fb03 f000 	mul.w	r0, r3, r0
 8021734:	4770      	bx	lr
 8021736:	bf00      	nop
 8021738:	20000018 	.word	0x20000018

0802173c <WM__GetOrgY_AA>:
 802173c:	4b05      	ldr	r3, [pc, #20]	; (8021754 <WM__GetOrgY_AA+0x18>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8021744:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8021746:	b11a      	cbz	r2, 8021750 <WM__GetOrgY_AA+0x14>
 8021748:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 802174c:	fb03 f000 	mul.w	r0, r3, r0
 8021750:	4770      	bx	lr
 8021752:	bf00      	nop
 8021754:	20000018 	.word	0x20000018

08021758 <WM__GetPrevSibling>:
 8021758:	b538      	push	{r3, r4, r5, lr}
 802175a:	4605      	mov	r5, r0
 802175c:	f7ff fa4e 	bl	8020bfc <WM_GetParent>
 8021760:	b910      	cbnz	r0, 8021768 <WM__GetPrevSibling+0x10>
 8021762:	2400      	movs	r4, #0
 8021764:	4620      	mov	r0, r4
 8021766:	bd38      	pop	{r3, r4, r5, pc}
 8021768:	f7f1 f8b2 	bl	80128d0 <GUI_ALLOC_h2p>
 802176c:	69c4      	ldr	r4, [r0, #28]
 802176e:	e000      	b.n	8021772 <WM__GetPrevSibling+0x1a>
 8021770:	461c      	mov	r4, r3
 8021772:	42ac      	cmp	r4, r5
 8021774:	4620      	mov	r0, r4
 8021776:	d0f4      	beq.n	8021762 <WM__GetPrevSibling+0xa>
 8021778:	2c00      	cmp	r4, #0
 802177a:	d0f2      	beq.n	8021762 <WM__GetPrevSibling+0xa>
 802177c:	f7f1 f8a8 	bl	80128d0 <GUI_ALLOC_h2p>
 8021780:	6a03      	ldr	r3, [r0, #32]
 8021782:	429d      	cmp	r5, r3
 8021784:	d1f4      	bne.n	8021770 <WM__GetPrevSibling+0x18>
 8021786:	4620      	mov	r0, r4
 8021788:	bd38      	pop	{r3, r4, r5, pc}
 802178a:	bf00      	nop

0802178c <WM__IsAncestor>:
 802178c:	b168      	cbz	r0, 80217aa <WM__IsAncestor+0x1e>
 802178e:	b510      	push	{r4, lr}
 8021790:	460c      	mov	r4, r1
 8021792:	b131      	cbz	r1, 80217a2 <WM__IsAncestor+0x16>
 8021794:	f7f1 f89c 	bl	80128d0 <GUI_ALLOC_h2p>
 8021798:	6980      	ldr	r0, [r0, #24]
 802179a:	4284      	cmp	r4, r0
 802179c:	d003      	beq.n	80217a6 <WM__IsAncestor+0x1a>
 802179e:	2800      	cmp	r0, #0
 80217a0:	d1f8      	bne.n	8021794 <WM__IsAncestor+0x8>
 80217a2:	2000      	movs	r0, #0
 80217a4:	bd10      	pop	{r4, pc}
 80217a6:	2001      	movs	r0, #1
 80217a8:	bd10      	pop	{r4, pc}
 80217aa:	2000      	movs	r0, #0
 80217ac:	4770      	bx	lr
 80217ae:	bf00      	nop

080217b0 <WM__IsEnabled>:
 80217b0:	b508      	push	{r3, lr}
 80217b2:	f7f1 f88d 	bl	80128d0 <GUI_ALLOC_h2p>
 80217b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80217b8:	f080 0010 	eor.w	r0, r0, #16
 80217bc:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80217c0:	bd08      	pop	{r3, pc}
 80217c2:	bf00      	nop

080217c4 <WM__SendMessage>:
 80217c4:	b570      	push	{r4, r5, r6, lr}
 80217c6:	4c0d      	ldr	r4, [pc, #52]	; (80217fc <WM__SendMessage+0x38>)
 80217c8:	6822      	ldr	r2, [r4, #0]
 80217ca:	2a13      	cmp	r2, #19
 80217cc:	dd00      	ble.n	80217d0 <WM__SendMessage+0xc>
 80217ce:	bd70      	pop	{r4, r5, r6, pc}
 80217d0:	4606      	mov	r6, r0
 80217d2:	460d      	mov	r5, r1
 80217d4:	f7f1 f87c 	bl	80128d0 <GUI_ALLOC_h2p>
 80217d8:	6902      	ldr	r2, [r0, #16]
 80217da:	606e      	str	r6, [r5, #4]
 80217dc:	b142      	cbz	r2, 80217f0 <WM__SendMessage+0x2c>
 80217de:	6823      	ldr	r3, [r4, #0]
 80217e0:	4628      	mov	r0, r5
 80217e2:	3301      	adds	r3, #1
 80217e4:	6023      	str	r3, [r4, #0]
 80217e6:	4790      	blx	r2
 80217e8:	6823      	ldr	r3, [r4, #0]
 80217ea:	3b01      	subs	r3, #1
 80217ec:	6023      	str	r3, [r4, #0]
 80217ee:	bd70      	pop	{r4, r5, r6, pc}
 80217f0:	4628      	mov	r0, r5
 80217f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80217f6:	f7ff b803 	b.w	8020800 <WM_DefaultProc>
 80217fa:	bf00      	nop
 80217fc:	2000043c 	.word	0x2000043c

08021800 <WM__SendMessageIfEnabled>:
 8021800:	b570      	push	{r4, r5, r6, lr}
 8021802:	460e      	mov	r6, r1
 8021804:	4605      	mov	r5, r0
 8021806:	f7f1 f863 	bl	80128d0 <GUI_ALLOC_h2p>
 802180a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802180c:	06db      	lsls	r3, r3, #27
 802180e:	d403      	bmi.n	8021818 <WM__SendMessageIfEnabled+0x18>
 8021810:	4c0c      	ldr	r4, [pc, #48]	; (8021844 <WM__SendMessageIfEnabled+0x44>)
 8021812:	6823      	ldr	r3, [r4, #0]
 8021814:	2b13      	cmp	r3, #19
 8021816:	dd00      	ble.n	802181a <WM__SendMessageIfEnabled+0x1a>
 8021818:	bd70      	pop	{r4, r5, r6, pc}
 802181a:	4628      	mov	r0, r5
 802181c:	f7f1 f858 	bl	80128d0 <GUI_ALLOC_h2p>
 8021820:	6902      	ldr	r2, [r0, #16]
 8021822:	6075      	str	r5, [r6, #4]
 8021824:	b142      	cbz	r2, 8021838 <WM__SendMessageIfEnabled+0x38>
 8021826:	6823      	ldr	r3, [r4, #0]
 8021828:	4630      	mov	r0, r6
 802182a:	3301      	adds	r3, #1
 802182c:	6023      	str	r3, [r4, #0]
 802182e:	4790      	blx	r2
 8021830:	6823      	ldr	r3, [r4, #0]
 8021832:	3b01      	subs	r3, #1
 8021834:	6023      	str	r3, [r4, #0]
 8021836:	bd70      	pop	{r4, r5, r6, pc}
 8021838:	4630      	mov	r0, r6
 802183a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802183e:	f7fe bfdf 	b.w	8020800 <WM_DefaultProc>
 8021842:	bf00      	nop
 8021844:	2000043c 	.word	0x2000043c

08021848 <WM__SendMessageNoPara>:
 8021848:	b530      	push	{r4, r5, lr}
 802184a:	2300      	movs	r3, #0
 802184c:	b085      	sub	sp, #20
 802184e:	460c      	mov	r4, r1
 8021850:	4605      	mov	r5, r0
 8021852:	9301      	str	r3, [sp, #4]
 8021854:	9300      	str	r3, [sp, #0]
 8021856:	9302      	str	r3, [sp, #8]
 8021858:	9303      	str	r3, [sp, #12]
 802185a:	f7f1 f839 	bl	80128d0 <GUI_ALLOC_h2p>
 802185e:	6903      	ldr	r3, [r0, #16]
 8021860:	b11b      	cbz	r3, 802186a <WM__SendMessageNoPara+0x22>
 8021862:	9501      	str	r5, [sp, #4]
 8021864:	4668      	mov	r0, sp
 8021866:	9400      	str	r4, [sp, #0]
 8021868:	4798      	blx	r3
 802186a:	b005      	add	sp, #20
 802186c:	bd30      	pop	{r4, r5, pc}
 802186e:	bf00      	nop

08021870 <WM__UpdateChildPositions>:
 8021870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021874:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8021878:	b08b      	sub	sp, #44	; 0x2c
 802187a:	f1bb 0f00 	cmp.w	fp, #0
 802187e:	f000 8086 	beq.w	802198e <WM__UpdateChildPositions+0x11e>
 8021882:	9307      	str	r3, [sp, #28]
 8021884:	b29b      	uxth	r3, r3
 8021886:	9201      	str	r2, [sp, #4]
 8021888:	9303      	str	r3, [sp, #12]
 802188a:	b28b      	uxth	r3, r1
 802188c:	9106      	str	r1, [sp, #24]
 802188e:	9304      	str	r3, [sp, #16]
 8021890:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8021894:	9305      	str	r3, [sp, #20]
 8021896:	e035      	b.n	8021904 <WM__UpdateChildPositions+0x94>
 8021898:	9906      	ldr	r1, [sp, #24]
 802189a:	1877      	adds	r7, r6, r1
 802189c:	9907      	ldr	r1, [sp, #28]
 802189e:	185d      	adds	r5, r3, r1
 80218a0:	b23f      	sxth	r7, r7
 80218a2:	b22d      	sxth	r5, r5
 80218a4:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80218a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80218ac:	d048      	beq.n	8021940 <WM__UpdateChildPositions+0xd0>
 80218ae:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80218b2:	d15f      	bne.n	8021974 <WM__UpdateChildPositions+0x104>
 80218b4:	9a01      	ldr	r2, [sp, #4]
 80218b6:	eb0a 0802 	add.w	r8, sl, r2
 80218ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80218bc:	eb09 0402 	add.w	r4, r9, r2
 80218c0:	fa0f f888 	sxth.w	r8, r8
 80218c4:	b224      	sxth	r4, r4
 80218c6:	42b7      	cmp	r7, r6
 80218c8:	ebca 0208 	rsb	r2, sl, r8
 80218cc:	eba7 0106 	sub.w	r1, r7, r6
 80218d0:	d144      	bne.n	802195c <WM__UpdateChildPositions+0xec>
 80218d2:	2a00      	cmp	r2, #0
 80218d4:	d142      	bne.n	802195c <WM__UpdateChildPositions+0xec>
 80218d6:	1bed      	subs	r5, r5, r7
 80218d8:	1b9e      	subs	r6, r3, r6
 80218da:	ebc8 0404 	rsb	r4, r8, r4
 80218de:	ebca 0909 	rsb	r9, sl, r9
 80218e2:	42b5      	cmp	r5, r6
 80218e4:	eba5 0106 	sub.w	r1, r5, r6
 80218e8:	ebc9 0204 	rsb	r2, r9, r4
 80218ec:	d14b      	bne.n	8021986 <WM__UpdateChildPositions+0x116>
 80218ee:	2a00      	cmp	r2, #0
 80218f0:	d149      	bne.n	8021986 <WM__UpdateChildPositions+0x116>
 80218f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80218f4:	a809      	add	r0, sp, #36	; 0x24
 80218f6:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80218fa:	f7f1 f807 	bl	801290c <GUI_ALLOC_UnlockH>
 80218fe:	f1bb 0f00 	cmp.w	fp, #0
 8021902:	d044      	beq.n	802198e <WM__UpdateChildPositions+0x11e>
 8021904:	4658      	mov	r0, fp
 8021906:	f7f0 ffed 	bl	80128e4 <GUI_ALLOC_LockH>
 802190a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802190c:	9009      	str	r0, [sp, #36]	; 0x24
 802190e:	f402 7120 	and.w	r1, r2, #640	; 0x280
 8021912:	f9b0 6000 	ldrsh.w	r6, [r0]
 8021916:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 802191a:	2980      	cmp	r1, #128	; 0x80
 802191c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021920:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8021924:	d020      	beq.n	8021968 <WM__UpdateChildPositions+0xf8>
 8021926:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 802192a:	d0b5      	beq.n	8021898 <WM__UpdateChildPositions+0x28>
 802192c:	9904      	ldr	r1, [sp, #16]
 802192e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8021932:	198f      	adds	r7, r1, r6
 8021934:	18cd      	adds	r5, r1, r3
 8021936:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 802193a:	b23f      	sxth	r7, r7
 802193c:	b22d      	sxth	r5, r5
 802193e:	d1b6      	bne.n	80218ae <WM__UpdateChildPositions+0x3e>
 8021940:	9905      	ldr	r1, [sp, #20]
 8021942:	42b7      	cmp	r7, r6
 8021944:	eb01 080a 	add.w	r8, r1, sl
 8021948:	eb01 0409 	add.w	r4, r1, r9
 802194c:	eba7 0106 	sub.w	r1, r7, r6
 8021950:	fa0f f888 	sxth.w	r8, r8
 8021954:	b224      	sxth	r4, r4
 8021956:	ebca 0208 	rsb	r2, sl, r8
 802195a:	d0ba      	beq.n	80218d2 <WM__UpdateChildPositions+0x62>
 802195c:	4658      	mov	r0, fp
 802195e:	9302      	str	r3, [sp, #8]
 8021960:	f7ff fb6e 	bl	8021040 <WM_MoveWindow>
 8021964:	9b02      	ldr	r3, [sp, #8]
 8021966:	e7b6      	b.n	80218d6 <WM__UpdateChildPositions+0x66>
 8021968:	9903      	ldr	r1, [sp, #12]
 802196a:	198f      	adds	r7, r1, r6
 802196c:	18cd      	adds	r5, r1, r3
 802196e:	b23f      	sxth	r7, r7
 8021970:	b22d      	sxth	r5, r5
 8021972:	e797      	b.n	80218a4 <WM__UpdateChildPositions+0x34>
 8021974:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021978:	eb01 080a 	add.w	r8, r1, sl
 802197c:	4449      	add	r1, r9
 802197e:	fa0f f888 	sxth.w	r8, r8
 8021982:	b20c      	sxth	r4, r1
 8021984:	e79f      	b.n	80218c6 <WM__UpdateChildPositions+0x56>
 8021986:	4658      	mov	r0, fp
 8021988:	f7ff f9b2 	bl	8020cf0 <WM_ResizeWindow>
 802198c:	e7b1      	b.n	80218f2 <WM__UpdateChildPositions+0x82>
 802198e:	b00b      	add	sp, #44	; 0x2c
 8021990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021994 <WM__AddCriticalHandle>:
 8021994:	4b02      	ldr	r3, [pc, #8]	; (80219a0 <WM__AddCriticalHandle+0xc>)
 8021996:	681a      	ldr	r2, [r3, #0]
 8021998:	6002      	str	r2, [r0, #0]
 802199a:	6018      	str	r0, [r3, #0]
 802199c:	4770      	bx	lr
 802199e:	bf00      	nop
 80219a0:	20046838 	.word	0x20046838

080219a4 <WM__RemoveCriticalHandle>:
 80219a4:	b410      	push	{r4}
 80219a6:	4c0d      	ldr	r4, [pc, #52]	; (80219dc <WM__RemoveCriticalHandle+0x38>)
 80219a8:	6821      	ldr	r1, [r4, #0]
 80219aa:	b151      	cbz	r1, 80219c2 <WM__RemoveCriticalHandle+0x1e>
 80219ac:	4281      	cmp	r1, r0
 80219ae:	d011      	beq.n	80219d4 <WM__RemoveCriticalHandle+0x30>
 80219b0:	680b      	ldr	r3, [r1, #0]
 80219b2:	b133      	cbz	r3, 80219c2 <WM__RemoveCriticalHandle+0x1e>
 80219b4:	4298      	cmp	r0, r3
 80219b6:	d007      	beq.n	80219c8 <WM__RemoveCriticalHandle+0x24>
 80219b8:	681a      	ldr	r2, [r3, #0]
 80219ba:	4619      	mov	r1, r3
 80219bc:	4613      	mov	r3, r2
 80219be:	2a00      	cmp	r2, #0
 80219c0:	d1f8      	bne.n	80219b4 <WM__RemoveCriticalHandle+0x10>
 80219c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219c6:	4770      	bx	lr
 80219c8:	b129      	cbz	r1, 80219d6 <WM__RemoveCriticalHandle+0x32>
 80219ca:	6803      	ldr	r3, [r0, #0]
 80219cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80219d0:	600b      	str	r3, [r1, #0]
 80219d2:	4770      	bx	lr
 80219d4:	460b      	mov	r3, r1
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	6023      	str	r3, [r4, #0]
 80219da:	e7f2      	b.n	80219c2 <WM__RemoveCriticalHandle+0x1e>
 80219dc:	20046838 	.word	0x20046838

080219e0 <WM__GetClientRectEx>:
 80219e0:	b180      	cbz	r0, 8021a04 <WM__GetClientRectEx+0x24>
 80219e2:	b179      	cbz	r1, 8021a04 <WM__GetClientRectEx+0x24>
 80219e4:	b530      	push	{r4, r5, lr}
 80219e6:	b083      	sub	sp, #12
 80219e8:	460c      	mov	r4, r1
 80219ea:	f7f0 ff7b 	bl	80128e4 <GUI_ALLOC_LockH>
 80219ee:	ad02      	add	r5, sp, #8
 80219f0:	4621      	mov	r1, r4
 80219f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80219f6:	f7fe fa53 	bl	801fea0 <WM__GetClientRectWin>
 80219fa:	4628      	mov	r0, r5
 80219fc:	f7f0 ff86 	bl	801290c <GUI_ALLOC_UnlockH>
 8021a00:	b003      	add	sp, #12
 8021a02:	bd30      	pop	{r4, r5, pc}
 8021a04:	4770      	bx	lr
 8021a06:	bf00      	nop

08021a08 <_Color2Index_16>:
 8021a08:	b4f0      	push	{r4, r5, r6, r7}
 8021a0a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8021a0e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021a12:	b2c0      	uxtb	r0, r0
 8021a14:	1c65      	adds	r5, r4, #1
 8021a16:	1c56      	adds	r6, r2, #1
 8021a18:	1c47      	adds	r7, r0, #1
 8021a1a:	4613      	mov	r3, r2
 8021a1c:	2d54      	cmp	r5, #84	; 0x54
 8021a1e:	bf94      	ite	ls
 8021a20:	2500      	movls	r5, #0
 8021a22:	2501      	movhi	r5, #1
 8021a24:	2e54      	cmp	r6, #84	; 0x54
 8021a26:	ea4f 0185 	mov.w	r1, r5, lsl #2
 8021a2a:	bf94      	ite	ls
 8021a2c:	2600      	movls	r6, #0
 8021a2e:	2601      	movhi	r6, #1
 8021a30:	2f54      	cmp	r7, #84	; 0x54
 8021a32:	eb06 0205 	add.w	r2, r6, r5
 8021a36:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 8021a3a:	bf94      	ite	ls
 8021a3c:	2700      	movls	r7, #0
 8021a3e:	2701      	movhi	r7, #1
 8021a40:	4335      	orrs	r5, r6
 8021a42:	443a      	add	r2, r7
 8021a44:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8021a48:	d103      	bne.n	8021a52 <_Color2Index_16+0x4a>
 8021a4a:	b917      	cbnz	r7, 8021a52 <_Color2Index_16+0x4a>
 8021a4c:	4608      	mov	r0, r1
 8021a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8021a50:	4770      	bx	lr
 8021a52:	4423      	add	r3, r4
 8021a54:	ebc2 1582 	rsb	r5, r2, r2, lsl #6
 8021a58:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
 8021a5c:	4403      	add	r3, r0
 8021a5e:	1958      	adds	r0, r3, r5
 8021a60:	fbb0 f2f2 	udiv	r2, r0, r2
 8021a64:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 8021a68:	bcf0      	pop	{r4, r5, r6, r7}
 8021a6a:	4608      	mov	r0, r1
 8021a6c:	4770      	bx	lr
 8021a6e:	bf00      	nop

08021a70 <_Index2Color_16>:
 8021a70:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8021a74:	b4f0      	push	{r4, r5, r6, r7}
 8021a76:	ea00 0103 	and.w	r1, r0, r3
 8021a7a:	f3c0 0680 	ubfx	r6, r0, #2, #1
 8021a7e:	f3c0 0540 	ubfx	r5, r0, #1, #1
 8021a82:	ea00 0706 	and.w	r7, r0, r6
 8021a86:	01ca      	lsls	r2, r1, #7
 8021a88:	4028      	ands	r0, r5
 8021a8a:	1a52      	subs	r2, r2, r1
 8021a8c:	01fc      	lsls	r4, r7, #7
 8021a8e:	01c1      	lsls	r1, r0, #7
 8021a90:	1be4      	subs	r4, r4, r7
 8021a92:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 8021a96:	1a08      	subs	r0, r1, r0
 8021a98:	eb04 12c6 	add.w	r2, r4, r6, lsl #7
 8021a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021aa0:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 8021aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8021aaa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8021aae:	4770      	bx	lr

08021ab0 <_GetIndexMask_16>:
 8021ab0:	200f      	movs	r0, #15
 8021ab2:	4770      	bx	lr

08021ab4 <_GetIndexMask_0>:
 8021ab4:	b508      	push	{r3, lr}
 8021ab6:	f7f8 fd89 	bl	801a5cc <LCD_GetNumColors>
 8021aba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021abe:	d014      	beq.n	8021aea <_GetIndexMask_0+0x36>
 8021ac0:	287f      	cmp	r0, #127	; 0x7f
 8021ac2:	d80e      	bhi.n	8021ae2 <_GetIndexMask_0+0x2e>
 8021ac4:	283f      	cmp	r0, #63	; 0x3f
 8021ac6:	d812      	bhi.n	8021aee <_GetIndexMask_0+0x3a>
 8021ac8:	281f      	cmp	r0, #31
 8021aca:	d80c      	bhi.n	8021ae6 <_GetIndexMask_0+0x32>
 8021acc:	280f      	cmp	r0, #15
 8021ace:	d810      	bhi.n	8021af2 <_GetIndexMask_0+0x3e>
 8021ad0:	2807      	cmp	r0, #7
 8021ad2:	d812      	bhi.n	8021afa <_GetIndexMask_0+0x46>
 8021ad4:	2803      	cmp	r0, #3
 8021ad6:	d80e      	bhi.n	8021af6 <_GetIndexMask_0+0x42>
 8021ad8:	2801      	cmp	r0, #1
 8021ada:	bf94      	ite	ls
 8021adc:	2000      	movls	r0, #0
 8021ade:	2001      	movhi	r0, #1
 8021ae0:	bd08      	pop	{r3, pc}
 8021ae2:	207f      	movs	r0, #127	; 0x7f
 8021ae4:	bd08      	pop	{r3, pc}
 8021ae6:	201f      	movs	r0, #31
 8021ae8:	bd08      	pop	{r3, pc}
 8021aea:	20ff      	movs	r0, #255	; 0xff
 8021aec:	bd08      	pop	{r3, pc}
 8021aee:	203f      	movs	r0, #63	; 0x3f
 8021af0:	bd08      	pop	{r3, pc}
 8021af2:	200f      	movs	r0, #15
 8021af4:	bd08      	pop	{r3, pc}
 8021af6:	2003      	movs	r0, #3
 8021af8:	bd08      	pop	{r3, pc}
 8021afa:	2007      	movs	r0, #7
 8021afc:	bd08      	pop	{r3, pc}
 8021afe:	bf00      	nop

08021b00 <_Index2Color_0>:
 8021b00:	b538      	push	{r3, r4, r5, lr}
 8021b02:	4604      	mov	r4, r0
 8021b04:	f7f8 fd62 	bl	801a5cc <LCD_GetNumColors>
 8021b08:	4605      	mov	r5, r0
 8021b0a:	f7f8 fd7f 	bl	801a60c <LCD_GetPalette>
 8021b0e:	b120      	cbz	r0, 8021b1a <_Index2Color_0+0x1a>
 8021b10:	42a5      	cmp	r5, r4
 8021b12:	d902      	bls.n	8021b1a <_Index2Color_0+0x1a>
 8021b14:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8021b18:	bd38      	pop	{r3, r4, r5, pc}
 8021b1a:	2000      	movs	r0, #0
 8021b1c:	bd38      	pop	{r3, r4, r5, pc}
 8021b1e:	bf00      	nop

08021b20 <_Color2Index_0>:
 8021b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b24:	4606      	mov	r6, r0
 8021b26:	f7f8 fd51 	bl	801a5cc <LCD_GetNumColors>
 8021b2a:	4607      	mov	r7, r0
 8021b2c:	f7f8 fd6e 	bl	801a60c <LCD_GetPalette>
 8021b30:	b158      	cbz	r0, 8021b4a <_Color2Index_0+0x2a>
 8021b32:	f1a0 0804 	sub.w	r8, r0, #4
 8021b36:	2000      	movs	r0, #0
 8021b38:	4643      	mov	r3, r8
 8021b3a:	e002      	b.n	8021b42 <_Color2Index_0+0x22>
 8021b3c:	3001      	adds	r0, #1
 8021b3e:	4287      	cmp	r7, r0
 8021b40:	dd05      	ble.n	8021b4e <_Color2Index_0+0x2e>
 8021b42:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8021b46:	42b2      	cmp	r2, r6
 8021b48:	d1f8      	bne.n	8021b3c <_Color2Index_0+0x1c>
 8021b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b4e:	2400      	movs	r4, #0
 8021b50:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 8021b54:	4625      	mov	r5, r4
 8021b56:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8021b5a:	4630      	mov	r0, r6
 8021b5c:	f7f1 fc88 	bl	8013470 <GUI_CalcColorDist>
 8021b60:	4581      	cmp	r9, r0
 8021b62:	d901      	bls.n	8021b68 <_Color2Index_0+0x48>
 8021b64:	4681      	mov	r9, r0
 8021b66:	462c      	mov	r4, r5
 8021b68:	3501      	adds	r5, #1
 8021b6a:	42af      	cmp	r7, r5
 8021b6c:	dcf3      	bgt.n	8021b56 <_Color2Index_0+0x36>
 8021b6e:	4620      	mov	r0, r4
 8021b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08021b74 <_DrawArc.isra.0.constprop.1>:
 8021b74:	ee07 2a90 	vmov	s15, r2
 8021b78:	4ab6      	ldr	r2, [pc, #728]	; (8021e54 <_DrawArc.isra.0.constprop.1+0x2e0>)
 8021b7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021b7e:	6812      	ldr	r2, [r2, #0]
 8021b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b84:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8021b88:	4682      	mov	sl, r0
 8021b8a:	460f      	mov	r7, r1
 8021b8c:	fb04 f603 	mul.w	r6, r4, r3
 8021b90:	ed2d 8b0a 	vpush	{d8-d12}
 8021b94:	7e13      	ldrb	r3, [r2, #24]
 8021b96:	b083      	sub	sp, #12
 8021b98:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8021b9c:	4630      	mov	r0, r6
 8021b9e:	ee07 3a90 	vmov	s15, r3
 8021ba2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ba8:	fb04 f405 	mul.w	r4, r4, r5
 8021bac:	eeb0 ca69 	vmov.f32	s24, s19
 8021bb0:	eee7 9a87 	vfma.f32	s19, s15, s14
 8021bb4:	eea7 cac7 	vfms.f32	s24, s15, s14
 8021bb8:	f7f7 fbcc 	bl	8019354 <GUI__SinHQ>
 8021bbc:	ee09 0a10 	vmov	s18, r0
 8021bc0:	4620      	mov	r0, r4
 8021bc2:	f7f7 fbc7 	bl	8019354 <GUI__SinHQ>
 8021bc6:	ee08 0a90 	vmov	s17, r0
 8021bca:	4630      	mov	r0, r6
 8021bcc:	f7f7 fc18 	bl	8019400 <GUI__CosHQ>
 8021bd0:	ee08 0a10 	vmov	s16, r0
 8021bd4:	4620      	mov	r0, r4
 8021bd6:	f7f7 fc13 	bl	8019400 <GUI__CosHQ>
 8021bda:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 8021bde:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 8021be2:	ee07 0a10 	vmov	s14, r0
 8021be6:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8021bea:	ee6c 5a06 	vmul.f32	s11, s24, s12
 8021bee:	ee29 6a86 	vmul.f32	s12, s19, s12
 8021bf2:	ee6c 4a26 	vmul.f32	s9, s24, s13
 8021bf6:	eebd aae5 	vcvt.s32.f32	s20, s11
 8021bfa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8021bfe:	eefd aae4 	vcvt.s32.f32	s21, s9
 8021c02:	ee1a 3a10 	vmov	r3, s20
 8021c06:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8021c0a:	ee2c 5a27 	vmul.f32	s10, s24, s15
 8021c0e:	141b      	asrs	r3, r3, #16
 8021c10:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8021c14:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021c18:	ee0a 3a10 	vmov	s20, r3
 8021c1c:	ee16 3a10 	vmov	r3, s12
 8021c20:	eefd bac5 	vcvt.s32.f32	s23, s10
 8021c24:	141b      	asrs	r3, r3, #16
 8021c26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021c2e:	ee08 3a10 	vmov	s16, r3
 8021c32:	ee1a 3a90 	vmov	r3, s21
 8021c36:	ee6c 5a07 	vmul.f32	s11, s24, s14
 8021c3a:	141b      	asrs	r3, r3, #16
 8021c3c:	ee29 7a87 	vmul.f32	s14, s19, s14
 8021c40:	ee2c ca0c 	vmul.f32	s24, s24, s24
 8021c44:	ee0a 3a90 	vmov	s21, r3
 8021c48:	ee16 3a90 	vmov	r3, s13
 8021c4c:	eebd bae5 	vcvt.s32.f32	s22, s11
 8021c50:	141b      	asrs	r3, r3, #16
 8021c52:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021c56:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8021c5a:	ee08 3a90 	vmov	s17, r3
 8021c5e:	ee1b 3a90 	vmov	r3, s23
 8021c62:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8021c66:	141b      	asrs	r3, r3, #16
 8021c68:	ee1a 0a10 	vmov	r0, s20
 8021c6c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8021c70:	ee0b 3a90 	vmov	s23, r3
 8021c74:	ee17 3a90 	vmov	r3, s15
 8021c78:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8021c7c:	141b      	asrs	r3, r3, #16
 8021c7e:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8021c82:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8021c86:	ee09 3a10 	vmov	s18, r3
 8021c8a:	ee1b 3a10 	vmov	r3, s22
 8021c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021c92:	141b      	asrs	r3, r3, #16
 8021c94:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8021c98:	ee0b 3a10 	vmov	s22, r3
 8021c9c:	ee17 3a10 	vmov	r3, s14
 8021ca0:	ee17 8a90 	vmov	r8, s15
 8021ca4:	141b      	asrs	r3, r3, #16
 8021ca6:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8021caa:	ee07 3a10 	vmov	s14, r3
 8021cae:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 8021cb2:	eebc 7acc 	vcvt.u32.f32	s14, s24
 8021cb6:	ee17 9a10 	vmov	r9, s14
 8021cba:	f7de fc15 	bl	80004e8 <__aeabi_f2d>
 8021cbe:	ec41 0b10 	vmov	d0, r0, r1
 8021cc2:	f003 fbd1 	bl	8025468 <ceil>
 8021cc6:	ec51 0b10 	vmov	r0, r1, d0
 8021cca:	f7de ff11 	bl	8000af0 <__aeabi_d2iz>
 8021cce:	4683      	mov	fp, r0
 8021cd0:	ee18 0a90 	vmov	r0, s17
 8021cd4:	f7de fc08 	bl	80004e8 <__aeabi_f2d>
 8021cd8:	ec41 0b10 	vmov	d0, r0, r1
 8021cdc:	f003 fc48 	bl	8025570 <floor>
 8021ce0:	ec51 0b10 	vmov	r0, r1, d0
 8021ce4:	f7de ff04 	bl	8000af0 <__aeabi_d2iz>
 8021ce8:	4b5a      	ldr	r3, [pc, #360]	; (8021e54 <_DrawArc.isra.0.constprop.1+0x2e0>)
 8021cea:	4606      	mov	r6, r0
 8021cec:	6819      	ldr	r1, [r3, #0]
 8021cee:	694b      	ldr	r3, [r1, #20]
 8021cf0:	b133      	cbz	r3, 8021d00 <_DrawArc.isra.0.constprop.1+0x18c>
 8021cf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021cf4:	2a01      	cmp	r2, #1
 8021cf6:	f000 809f 	beq.w	8021e38 <_DrawArc.isra.0.constprop.1+0x2c4>
 8021cfa:	3201      	adds	r2, #1
 8021cfc:	f000 808f 	beq.w	8021e1e <_DrawArc.isra.0.constprop.1+0x2aa>
 8021d00:	45b3      	cmp	fp, r6
 8021d02:	f300 8087 	bgt.w	8021e14 <_DrawArc.isra.0.constprop.1+0x2a0>
 8021d06:	ee78 7a4a 	vsub.f32	s15, s16, s20
 8021d0a:	fb06 f006 	mul.w	r0, r6, r6
 8021d0e:	ee39 6a6b 	vsub.f32	s12, s18, s23
 8021d12:	2400      	movs	r4, #0
 8021d14:	ee39 7acb 	vsub.f32	s14, s19, s22
 8021d18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021d1a:	ee78 6aea 	vsub.f32	s13, s17, s21
 8021d1e:	4581      	cmp	r9, r0
 8021d20:	ee86 ca27 	vdiv.f32	s24, s12, s15
 8021d24:	fb06 7703 	mla	r7, r6, r3, r7
 8021d28:	4625      	mov	r5, r4
 8021d2a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8021d2e:	eec7 9a26 	vdiv.f32	s19, s14, s13
 8021d32:	edcd 7a01 	vstr	s15, [sp, #4]
 8021d36:	d95c      	bls.n	8021df2 <_DrawArc.isra.0.constprop.1+0x27e>
 8021d38:	ebc0 0e09 	rsb	lr, r0, r9
 8021d3c:	e000      	b.n	8021d40 <_DrawArc.isra.0.constprop.1+0x1cc>
 8021d3e:	461d      	mov	r5, r3
 8021d40:	1c6b      	adds	r3, r5, #1
 8021d42:	fb03 f203 	mul.w	r2, r3, r3
 8021d46:	4596      	cmp	lr, r2
 8021d48:	d8f9      	bhi.n	8021d3e <_DrawArc.isra.0.constprop.1+0x1ca>
 8021d4a:	4580      	cmp	r8, r0
 8021d4c:	d955      	bls.n	8021dfa <_DrawArc.isra.0.constprop.1+0x286>
 8021d4e:	ebc0 0008 	rsb	r0, r0, r8
 8021d52:	e000      	b.n	8021d56 <_DrawArc.isra.0.constprop.1+0x1e2>
 8021d54:	461c      	mov	r4, r3
 8021d56:	1c63      	adds	r3, r4, #1
 8021d58:	fb03 f203 	mul.w	r2, r3, r3
 8021d5c:	4290      	cmp	r0, r2
 8021d5e:	d8f9      	bhi.n	8021d54 <_DrawArc.isra.0.constprop.1+0x1e0>
 8021d60:	3c01      	subs	r4, #1
 8021d62:	ee07 6a90 	vmov	s15, r6
 8021d66:	9b01      	ldr	r3, [sp, #4]
 8021d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021d6c:	429c      	cmp	r4, r3
 8021d6e:	bfa8      	it	ge
 8021d70:	461c      	movge	r4, r3
 8021d72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d7a:	dd43      	ble.n	8021e04 <_DrawArc.isra.0.constprop.1+0x290>
 8021d7c:	eeb4 aa48 	vcmp.f32	s20, s16
 8021d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d84:	d043      	beq.n	8021e0e <_DrawArc.isra.0.constprop.1+0x29a>
 8021d86:	ee37 7aca 	vsub.f32	s14, s15, s20
 8021d8a:	eef0 6a6b 	vmov.f32	s13, s23
 8021d8e:	eeec 6a07 	vfma.f32	s13, s24, s14
 8021d92:	eeb0 7a66 	vmov.f32	s14, s13
 8021d96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021d9a:	ee17 0a10 	vmov	r0, s14
 8021d9e:	eef4 aae7 	vcmpe.f32	s21, s15
 8021da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021da6:	d52b      	bpl.n	8021e00 <_DrawArc.isra.0.constprop.1+0x28c>
 8021da8:	eef4 aa68 	vcmp.f32	s21, s17
 8021dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021db0:	d02a      	beq.n	8021e08 <_DrawArc.isra.0.constprop.1+0x294>
 8021db2:	ee77 7aea 	vsub.f32	s15, s15, s21
 8021db6:	eeb0 7a4b 	vmov.f32	s14, s22
 8021dba:	eea9 7aa7 	vfma.f32	s14, s19, s15
 8021dbe:	eef0 7a47 	vmov.f32	s15, s14
 8021dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021dc6:	ee17 2a90 	vmov	r2, s15
 8021dca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8021dcc:	3e01      	subs	r6, #1
 8021dce:	4639      	mov	r1, r7
 8021dd0:	ebc2 020a 	rsb	r2, r2, sl
 8021dd4:	681b      	ldr	r3, [r3, #0]
 8021dd6:	ebc0 000a 	rsb	r0, r0, sl
 8021dda:	4798      	blx	r3
 8021ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021dde:	455e      	cmp	r6, fp
 8021de0:	eba7 0703 	sub.w	r7, r7, r3
 8021de4:	db16      	blt.n	8021e14 <_DrawArc.isra.0.constprop.1+0x2a0>
 8021de6:	fb06 f006 	mul.w	r0, r6, r6
 8021dea:	4b1a      	ldr	r3, [pc, #104]	; (8021e54 <_DrawArc.isra.0.constprop.1+0x2e0>)
 8021dec:	4581      	cmp	r9, r0
 8021dee:	6819      	ldr	r1, [r3, #0]
 8021df0:	d8a2      	bhi.n	8021d38 <_DrawArc.isra.0.constprop.1+0x1c4>
 8021df2:	4580      	cmp	r8, r0
 8021df4:	f04f 0500 	mov.w	r5, #0
 8021df8:	d8a9      	bhi.n	8021d4e <_DrawArc.isra.0.constprop.1+0x1da>
 8021dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8021dfe:	e7b0      	b.n	8021d62 <_DrawArc.isra.0.constprop.1+0x1ee>
 8021e00:	462a      	mov	r2, r5
 8021e02:	e7e2      	b.n	8021dca <_DrawArc.isra.0.constprop.1+0x256>
 8021e04:	4620      	mov	r0, r4
 8021e06:	e7ca      	b.n	8021d9e <_DrawArc.isra.0.constprop.1+0x22a>
 8021e08:	eef0 7a68 	vmov.f32	s15, s17
 8021e0c:	e7d9      	b.n	8021dc2 <_DrawArc.isra.0.constprop.1+0x24e>
 8021e0e:	eeb0 7a48 	vmov.f32	s14, s16
 8021e12:	e7c0      	b.n	8021d96 <_DrawArc.isra.0.constprop.1+0x222>
 8021e14:	b003      	add	sp, #12
 8021e16:	ecbd 8b0a 	vpop	{d8-d12}
 8021e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e1e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8021e22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021e26:	1bd2      	subs	r2, r2, r7
 8021e28:	1bdb      	subs	r3, r3, r7
 8021e2a:	4593      	cmp	fp, r2
 8021e2c:	bfa8      	it	ge
 8021e2e:	4693      	movge	fp, r2
 8021e30:	4298      	cmp	r0, r3
 8021e32:	bfb8      	it	lt
 8021e34:	461e      	movlt	r6, r3
 8021e36:	e763      	b.n	8021d00 <_DrawArc.isra.0.constprop.1+0x18c>
 8021e38:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8021e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021e40:	1bd2      	subs	r2, r2, r7
 8021e42:	1bdb      	subs	r3, r3, r7
 8021e44:	4290      	cmp	r0, r2
 8021e46:	bfa8      	it	ge
 8021e48:	4616      	movge	r6, r2
 8021e4a:	459b      	cmp	fp, r3
 8021e4c:	bfb8      	it	lt
 8021e4e:	469b      	movlt	fp, r3
 8021e50:	e756      	b.n	8021d00 <_DrawArc.isra.0.constprop.1+0x18c>
 8021e52:	bf00      	nop
 8021e54:	20000018 	.word	0x20000018

08021e58 <_DrawArc.isra.0.constprop.2>:
 8021e58:	ee07 2a90 	vmov	s15, r2
 8021e5c:	4ab5      	ldr	r2, [pc, #724]	; (8022134 <_DrawArc.isra.0.constprop.2+0x2dc>)
 8021e5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021e62:	6812      	ldr	r2, [r2, #0]
 8021e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e68:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8021e6c:	4682      	mov	sl, r0
 8021e6e:	460f      	mov	r7, r1
 8021e70:	fb04 f603 	mul.w	r6, r4, r3
 8021e74:	ed2d 8b0a 	vpush	{d8-d12}
 8021e78:	7e13      	ldrb	r3, [r2, #24]
 8021e7a:	b083      	sub	sp, #12
 8021e7c:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8021e80:	4630      	mov	r0, r6
 8021e82:	ee07 3a90 	vmov	s15, r3
 8021e86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e8c:	fb04 f405 	mul.w	r4, r4, r5
 8021e90:	eeb0 ca69 	vmov.f32	s24, s19
 8021e94:	eee7 9a87 	vfma.f32	s19, s15, s14
 8021e98:	eea7 cac7 	vfms.f32	s24, s15, s14
 8021e9c:	f7f7 fa5a 	bl	8019354 <GUI__SinHQ>
 8021ea0:	ee09 0a10 	vmov	s18, r0
 8021ea4:	4620      	mov	r0, r4
 8021ea6:	f7f7 fa55 	bl	8019354 <GUI__SinHQ>
 8021eaa:	ee08 0a90 	vmov	s17, r0
 8021eae:	4630      	mov	r0, r6
 8021eb0:	f7f7 faa6 	bl	8019400 <GUI__CosHQ>
 8021eb4:	ee08 0a10 	vmov	s16, r0
 8021eb8:	4620      	mov	r0, r4
 8021eba:	f7f7 faa1 	bl	8019400 <GUI__CosHQ>
 8021ebe:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 8021ec2:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 8021ec6:	ee07 0a10 	vmov	s14, r0
 8021eca:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8021ece:	ee6c 5a06 	vmul.f32	s11, s24, s12
 8021ed2:	ee29 6a86 	vmul.f32	s12, s19, s12
 8021ed6:	ee6c 4a26 	vmul.f32	s9, s24, s13
 8021eda:	eebd aae5 	vcvt.s32.f32	s20, s11
 8021ede:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8021ee2:	eefd aae4 	vcvt.s32.f32	s21, s9
 8021ee6:	ee1a 3a10 	vmov	r3, s20
 8021eea:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8021eee:	ee2c 5a27 	vmul.f32	s10, s24, s15
 8021ef2:	141b      	asrs	r3, r3, #16
 8021ef4:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8021ef8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021efc:	ee0a 3a10 	vmov	s20, r3
 8021f00:	ee16 3a10 	vmov	r3, s12
 8021f04:	eefd bac5 	vcvt.s32.f32	s23, s10
 8021f08:	141b      	asrs	r3, r3, #16
 8021f0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021f12:	ee08 3a10 	vmov	s16, r3
 8021f16:	ee1a 3a90 	vmov	r3, s21
 8021f1a:	ee6c 5a07 	vmul.f32	s11, s24, s14
 8021f1e:	141b      	asrs	r3, r3, #16
 8021f20:	ee29 7a87 	vmul.f32	s14, s19, s14
 8021f24:	ee2c ca0c 	vmul.f32	s24, s24, s24
 8021f28:	ee0a 3a90 	vmov	s21, r3
 8021f2c:	ee16 3a90 	vmov	r3, s13
 8021f30:	eebd bae5 	vcvt.s32.f32	s22, s11
 8021f34:	141b      	asrs	r3, r3, #16
 8021f36:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021f3a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 8021f3e:	ee08 3a90 	vmov	s17, r3
 8021f42:	ee1b 3a90 	vmov	r3, s23
 8021f46:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8021f4a:	141b      	asrs	r3, r3, #16
 8021f4c:	ee1a 0a10 	vmov	r0, s20
 8021f50:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8021f54:	ee0b 3a90 	vmov	s23, r3
 8021f58:	ee17 3a90 	vmov	r3, s15
 8021f5c:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8021f60:	141b      	asrs	r3, r3, #16
 8021f62:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8021f66:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8021f6a:	ee09 3a10 	vmov	s18, r3
 8021f6e:	ee1b 3a10 	vmov	r3, s22
 8021f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021f76:	141b      	asrs	r3, r3, #16
 8021f78:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8021f7c:	ee0b 3a10 	vmov	s22, r3
 8021f80:	ee17 3a10 	vmov	r3, s14
 8021f84:	ee17 8a90 	vmov	r8, s15
 8021f88:	141b      	asrs	r3, r3, #16
 8021f8a:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8021f8e:	ee07 3a10 	vmov	s14, r3
 8021f92:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 8021f96:	eebc 7acc 	vcvt.u32.f32	s14, s24
 8021f9a:	ee17 9a10 	vmov	r9, s14
 8021f9e:	f7de faa3 	bl	80004e8 <__aeabi_f2d>
 8021fa2:	ec41 0b10 	vmov	d0, r0, r1
 8021fa6:	f003 fa5f 	bl	8025468 <ceil>
 8021faa:	ec51 0b10 	vmov	r0, r1, d0
 8021fae:	f7de fd9f 	bl	8000af0 <__aeabi_d2iz>
 8021fb2:	4683      	mov	fp, r0
 8021fb4:	ee18 0a90 	vmov	r0, s17
 8021fb8:	f7de fa96 	bl	80004e8 <__aeabi_f2d>
 8021fbc:	ec41 0b10 	vmov	d0, r0, r1
 8021fc0:	f003 fad6 	bl	8025570 <floor>
 8021fc4:	ec51 0b10 	vmov	r0, r1, d0
 8021fc8:	f7de fd92 	bl	8000af0 <__aeabi_d2iz>
 8021fcc:	4b59      	ldr	r3, [pc, #356]	; (8022134 <_DrawArc.isra.0.constprop.2+0x2dc>)
 8021fce:	4606      	mov	r6, r0
 8021fd0:	6819      	ldr	r1, [r3, #0]
 8021fd2:	694b      	ldr	r3, [r1, #20]
 8021fd4:	b133      	cbz	r3, 8021fe4 <_DrawArc.isra.0.constprop.2+0x18c>
 8021fd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8021fd8:	2a01      	cmp	r2, #1
 8021fda:	f000 809d 	beq.w	8022118 <_DrawArc.isra.0.constprop.2+0x2c0>
 8021fde:	3201      	adds	r2, #1
 8021fe0:	f000 808d 	beq.w	80220fe <_DrawArc.isra.0.constprop.2+0x2a6>
 8021fe4:	45b3      	cmp	fp, r6
 8021fe6:	f300 8085 	bgt.w	80220f4 <_DrawArc.isra.0.constprop.2+0x29c>
 8021fea:	ee78 7a4a 	vsub.f32	s15, s16, s20
 8021fee:	fb06 f006 	mul.w	r0, r6, r6
 8021ff2:	ee39 6a6b 	vsub.f32	s12, s18, s23
 8021ff6:	2400      	movs	r4, #0
 8021ff8:	ee39 7acb 	vsub.f32	s14, s19, s22
 8021ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021ffe:	ee78 6aea 	vsub.f32	s13, s17, s21
 8022002:	4581      	cmp	r9, r0
 8022004:	ee86 ca27 	vdiv.f32	s24, s12, s15
 8022008:	fb06 7703 	mla	r7, r6, r3, r7
 802200c:	4625      	mov	r5, r4
 802200e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8022012:	eec7 9a26 	vdiv.f32	s19, s14, s13
 8022016:	edcd 7a01 	vstr	s15, [sp, #4]
 802201a:	d95a      	bls.n	80220d2 <_DrawArc.isra.0.constprop.2+0x27a>
 802201c:	ebc0 0e09 	rsb	lr, r0, r9
 8022020:	e000      	b.n	8022024 <_DrawArc.isra.0.constprop.2+0x1cc>
 8022022:	461d      	mov	r5, r3
 8022024:	1c6b      	adds	r3, r5, #1
 8022026:	fb03 f203 	mul.w	r2, r3, r3
 802202a:	4596      	cmp	lr, r2
 802202c:	d8f9      	bhi.n	8022022 <_DrawArc.isra.0.constprop.2+0x1ca>
 802202e:	4580      	cmp	r8, r0
 8022030:	d953      	bls.n	80220da <_DrawArc.isra.0.constprop.2+0x282>
 8022032:	ebc0 0008 	rsb	r0, r0, r8
 8022036:	e000      	b.n	802203a <_DrawArc.isra.0.constprop.2+0x1e2>
 8022038:	461c      	mov	r4, r3
 802203a:	1c63      	adds	r3, r4, #1
 802203c:	fb03 f203 	mul.w	r2, r3, r3
 8022040:	4290      	cmp	r0, r2
 8022042:	d8f9      	bhi.n	8022038 <_DrawArc.isra.0.constprop.2+0x1e0>
 8022044:	3c01      	subs	r4, #1
 8022046:	ee07 6a90 	vmov	s15, r6
 802204a:	9b01      	ldr	r3, [sp, #4]
 802204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022050:	429c      	cmp	r4, r3
 8022052:	bfa8      	it	ge
 8022054:	461c      	movge	r4, r3
 8022056:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802205e:	dd41      	ble.n	80220e4 <_DrawArc.isra.0.constprop.2+0x28c>
 8022060:	eeb4 aa48 	vcmp.f32	s20, s16
 8022064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022068:	d041      	beq.n	80220ee <_DrawArc.isra.0.constprop.2+0x296>
 802206a:	ee37 7aca 	vsub.f32	s14, s15, s20
 802206e:	eef0 6a6b 	vmov.f32	s13, s23
 8022072:	eeec 6a07 	vfma.f32	s13, s24, s14
 8022076:	eeb0 7a66 	vmov.f32	s14, s13
 802207a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802207e:	ee17 2a10 	vmov	r2, s14
 8022082:	eef4 aae7 	vcmpe.f32	s21, s15
 8022086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802208a:	d529      	bpl.n	80220e0 <_DrawArc.isra.0.constprop.2+0x288>
 802208c:	eef4 aa68 	vcmp.f32	s21, s17
 8022090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022094:	d028      	beq.n	80220e8 <_DrawArc.isra.0.constprop.2+0x290>
 8022096:	ee77 7aea 	vsub.f32	s15, s15, s21
 802209a:	eeb0 7a4b 	vmov.f32	s14, s22
 802209e:	eea9 7aa7 	vfma.f32	s14, s19, s15
 80220a2:	eef0 7a47 	vmov.f32	s15, s14
 80220a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80220aa:	ee17 0a90 	vmov	r0, s15
 80220ae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80220b0:	3e01      	subs	r6, #1
 80220b2:	4639      	mov	r1, r7
 80220b4:	4452      	add	r2, sl
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	4450      	add	r0, sl
 80220ba:	4798      	blx	r3
 80220bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80220be:	455e      	cmp	r6, fp
 80220c0:	eba7 0703 	sub.w	r7, r7, r3
 80220c4:	db16      	blt.n	80220f4 <_DrawArc.isra.0.constprop.2+0x29c>
 80220c6:	fb06 f006 	mul.w	r0, r6, r6
 80220ca:	4b1a      	ldr	r3, [pc, #104]	; (8022134 <_DrawArc.isra.0.constprop.2+0x2dc>)
 80220cc:	4581      	cmp	r9, r0
 80220ce:	6819      	ldr	r1, [r3, #0]
 80220d0:	d8a4      	bhi.n	802201c <_DrawArc.isra.0.constprop.2+0x1c4>
 80220d2:	4580      	cmp	r8, r0
 80220d4:	f04f 0500 	mov.w	r5, #0
 80220d8:	d8ab      	bhi.n	8022032 <_DrawArc.isra.0.constprop.2+0x1da>
 80220da:	f04f 34ff 	mov.w	r4, #4294967295
 80220de:	e7b2      	b.n	8022046 <_DrawArc.isra.0.constprop.2+0x1ee>
 80220e0:	4628      	mov	r0, r5
 80220e2:	e7e4      	b.n	80220ae <_DrawArc.isra.0.constprop.2+0x256>
 80220e4:	4622      	mov	r2, r4
 80220e6:	e7cc      	b.n	8022082 <_DrawArc.isra.0.constprop.2+0x22a>
 80220e8:	eef0 7a68 	vmov.f32	s15, s17
 80220ec:	e7db      	b.n	80220a6 <_DrawArc.isra.0.constprop.2+0x24e>
 80220ee:	eeb0 7a48 	vmov.f32	s14, s16
 80220f2:	e7c2      	b.n	802207a <_DrawArc.isra.0.constprop.2+0x222>
 80220f4:	b003      	add	sp, #12
 80220f6:	ecbd 8b0a 	vpop	{d8-d12}
 80220fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220fe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8022102:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022106:	1bd2      	subs	r2, r2, r7
 8022108:	1bdb      	subs	r3, r3, r7
 802210a:	4593      	cmp	fp, r2
 802210c:	bfa8      	it	ge
 802210e:	4693      	movge	fp, r2
 8022110:	4298      	cmp	r0, r3
 8022112:	bfb8      	it	lt
 8022114:	461e      	movlt	r6, r3
 8022116:	e765      	b.n	8021fe4 <_DrawArc.isra.0.constprop.2+0x18c>
 8022118:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802211c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022120:	1bd2      	subs	r2, r2, r7
 8022122:	1bdb      	subs	r3, r3, r7
 8022124:	4290      	cmp	r0, r2
 8022126:	bfa8      	it	ge
 8022128:	4616      	movge	r6, r2
 802212a:	459b      	cmp	fp, r3
 802212c:	bfb8      	it	lt
 802212e:	469b      	movlt	fp, r3
 8022130:	e758      	b.n	8021fe4 <_DrawArc.isra.0.constprop.2+0x18c>
 8022132:	bf00      	nop
 8022134:	20000018 	.word	0x20000018

08022138 <GL_DrawArc>:
 8022138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802213c:	b083      	sub	sp, #12
 802213e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022142:	f506 74b4 	add.w	r4, r6, #360	; 0x168
 8022146:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 802214a:	db79      	blt.n	8022240 <GL_DrawArc+0x108>
 802214c:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 8022150:	18e5      	adds	r5, r4, r3
 8022152:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8022156:	eba5 0506 	sub.w	r5, r5, r6
 802215a:	daf7      	bge.n	802214c <GL_DrawArc+0x14>
 802215c:	2d00      	cmp	r5, #0
 802215e:	dd6c      	ble.n	802223a <GL_DrawArc+0x102>
 8022160:	4692      	mov	sl, r2
 8022162:	4689      	mov	r9, r1
 8022164:	4680      	mov	r8, r0
 8022166:	f5a5 7787 	sub.w	r7, r5, #270	; 0x10e
 802216a:	f1a5 06b4 	sub.w	r6, r5, #180	; 0xb4
 802216e:	f04f 3bff 	mov.w	fp, #4294967295
 8022172:	e04c      	b.n	802220e <GL_DrawArc+0xd6>
 8022174:	2c59      	cmp	r4, #89	; 0x59
 8022176:	dc11      	bgt.n	802219c <GL_DrawArc+0x64>
 8022178:	2b5a      	cmp	r3, #90	; 0x5a
 802217a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802217e:	f8cd b004 	str.w	fp, [sp, #4]
 8022182:	4652      	mov	r2, sl
 8022184:	bfa8      	it	ge
 8022186:	235a      	movge	r3, #90	; 0x5a
 8022188:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 802218c:	4649      	mov	r1, r9
 802218e:	4640      	mov	r0, r8
 8022190:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8022194:	f8cd e000 	str.w	lr, [sp]
 8022198:	f7ff fcec 	bl	8021b74 <_DrawArc.isra.0.constprop.1>
 802219c:	2e00      	cmp	r6, #0
 802219e:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 80221a2:	dd4a      	ble.n	802223a <GL_DrawArc+0x102>
 80221a4:	2c59      	cmp	r4, #89	; 0x59
 80221a6:	dc0f      	bgt.n	80221c8 <GL_DrawArc+0x90>
 80221a8:	2e5a      	cmp	r6, #90	; 0x5a
 80221aa:	4631      	mov	r1, r6
 80221ac:	f04f 0301 	mov.w	r3, #1
 80221b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80221b4:	bfa8      	it	ge
 80221b6:	215a      	movge	r1, #90	; 0x5a
 80221b8:	4652      	mov	r2, sl
 80221ba:	9301      	str	r3, [sp, #4]
 80221bc:	4640      	mov	r0, r8
 80221be:	9100      	str	r1, [sp, #0]
 80221c0:	4623      	mov	r3, r4
 80221c2:	4649      	mov	r1, r9
 80221c4:	f7ff fcd6 	bl	8021b74 <_DrawArc.isra.0.constprop.1>
 80221c8:	2f00      	cmp	r7, #0
 80221ca:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 80221ce:	dd34      	ble.n	802223a <GL_DrawArc+0x102>
 80221d0:	2c59      	cmp	r4, #89	; 0x59
 80221d2:	dc13      	bgt.n	80221fc <GL_DrawArc+0xc4>
 80221d4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80221d8:	2f5a      	cmp	r7, #90	; 0x5a
 80221da:	463b      	mov	r3, r7
 80221dc:	f04f 0201 	mov.w	r2, #1
 80221e0:	bfa8      	it	ge
 80221e2:	235a      	movge	r3, #90	; 0x5a
 80221e4:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 80221e8:	9201      	str	r2, [sp, #4]
 80221ea:	4649      	mov	r1, r9
 80221ec:	4652      	mov	r2, sl
 80221ee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80221f2:	4640      	mov	r0, r8
 80221f4:	f8cd e000 	str.w	lr, [sp]
 80221f8:	f7ff fe2e 	bl	8021e58 <_DrawArc.isra.0.constprop.2>
 80221fc:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8022200:	3c5a      	subs	r4, #90	; 0x5a
 8022202:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 8022206:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
 802220a:	2d00      	cmp	r5, #0
 802220c:	dd15      	ble.n	802223a <GL_DrawArc+0x102>
 802220e:	2c59      	cmp	r4, #89	; 0x59
 8022210:	dc0e      	bgt.n	8022230 <GL_DrawArc+0xf8>
 8022212:	2d5a      	cmp	r5, #90	; 0x5a
 8022214:	4629      	mov	r1, r5
 8022216:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802221a:	f8cd b004 	str.w	fp, [sp, #4]
 802221e:	bfa8      	it	ge
 8022220:	215a      	movge	r1, #90	; 0x5a
 8022222:	4652      	mov	r2, sl
 8022224:	4623      	mov	r3, r4
 8022226:	4640      	mov	r0, r8
 8022228:	9100      	str	r1, [sp, #0]
 802222a:	4649      	mov	r1, r9
 802222c:	f7ff fe14 	bl	8021e58 <_DrawArc.isra.0.constprop.2>
 8022230:	f1a5 035a 	sub.w	r3, r5, #90	; 0x5a
 8022234:	3c5a      	subs	r4, #90	; 0x5a
 8022236:	2b00      	cmp	r3, #0
 8022238:	dc9c      	bgt.n	8022174 <GL_DrawArc+0x3c>
 802223a:	b003      	add	sp, #12
 802223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022240:	f503 75b4 	add.w	r5, r3, #360	; 0x168
 8022244:	e78a      	b.n	802215c <GL_DrawArc+0x24>
 8022246:	bf00      	nop

08022248 <GUI_GetYAdjust>:
 8022248:	b510      	push	{r4, lr}
 802224a:	f7f5 fd75 	bl	8017d38 <GUI_Lock>
 802224e:	4b0f      	ldr	r3, [pc, #60]	; (802228c <GUI_GetYAdjust+0x44>)
 8022250:	681a      	ldr	r2, [r3, #0]
 8022252:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8022254:	f003 030c 	and.w	r3, r3, #12
 8022258:	2b08      	cmp	r3, #8
 802225a:	d008      	beq.n	802226e <GUI_GetYAdjust+0x26>
 802225c:	2b0c      	cmp	r3, #12
 802225e:	d006      	beq.n	802226e <GUI_GetYAdjust+0x26>
 8022260:	2b04      	cmp	r3, #4
 8022262:	d00b      	beq.n	802227c <GUI_GetYAdjust+0x34>
 8022264:	2400      	movs	r4, #0
 8022266:	f7f5 fd5d 	bl	8017d24 <GUI_Unlock>
 802226a:	4620      	mov	r0, r4
 802226c:	bd10      	pop	{r4, pc}
 802226e:	69d3      	ldr	r3, [r2, #28]
 8022270:	7e1c      	ldrb	r4, [r3, #24]
 8022272:	f7f5 fd57 	bl	8017d24 <GUI_Unlock>
 8022276:	0864      	lsrs	r4, r4, #1
 8022278:	4620      	mov	r0, r4
 802227a:	bd10      	pop	{r4, pc}
 802227c:	69d3      	ldr	r3, [r2, #28]
 802227e:	7e1c      	ldrb	r4, [r3, #24]
 8022280:	f7f5 fd50 	bl	8017d24 <GUI_Unlock>
 8022284:	3c01      	subs	r4, #1
 8022286:	4620      	mov	r0, r4
 8022288:	bd10      	pop	{r4, pc}
 802228a:	bf00      	nop
 802228c:	20000018 	.word	0x20000018

08022290 <GUI_GetFontDistY>:
 8022290:	b510      	push	{r4, lr}
 8022292:	f7f5 fd51 	bl	8017d38 <GUI_Lock>
 8022296:	4b04      	ldr	r3, [pc, #16]	; (80222a8 <GUI_GetFontDistY+0x18>)
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	69db      	ldr	r3, [r3, #28]
 802229c:	7e5c      	ldrb	r4, [r3, #25]
 802229e:	f7f5 fd41 	bl	8017d24 <GUI_Unlock>
 80222a2:	4620      	mov	r0, r4
 80222a4:	bd10      	pop	{r4, pc}
 80222a6:	bf00      	nop
 80222a8:	20000018 	.word	0x20000018

080222ac <GUI_GetCharDistX>:
 80222ac:	b510      	push	{r4, lr}
 80222ae:	4604      	mov	r4, r0
 80222b0:	f7f5 fd42 	bl	8017d38 <GUI_Lock>
 80222b4:	4b05      	ldr	r3, [pc, #20]	; (80222cc <GUI_GetCharDistX+0x20>)
 80222b6:	2100      	movs	r1, #0
 80222b8:	4620      	mov	r0, r4
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	69db      	ldr	r3, [r3, #28]
 80222be:	685b      	ldr	r3, [r3, #4]
 80222c0:	4798      	blx	r3
 80222c2:	4604      	mov	r4, r0
 80222c4:	f7f5 fd2e 	bl	8017d24 <GUI_Unlock>
 80222c8:	4620      	mov	r0, r4
 80222ca:	bd10      	pop	{r4, pc}
 80222cc:	20000018 	.word	0x20000018

080222d0 <GUI_GetCharDistXEx>:
 80222d0:	b538      	push	{r3, r4, r5, lr}
 80222d2:	4604      	mov	r4, r0
 80222d4:	460d      	mov	r5, r1
 80222d6:	f7f5 fd2f 	bl	8017d38 <GUI_Lock>
 80222da:	4b06      	ldr	r3, [pc, #24]	; (80222f4 <GUI_GetCharDistXEx+0x24>)
 80222dc:	4629      	mov	r1, r5
 80222de:	4620      	mov	r0, r4
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	69db      	ldr	r3, [r3, #28]
 80222e4:	685b      	ldr	r3, [r3, #4]
 80222e6:	4798      	blx	r3
 80222e8:	4604      	mov	r4, r0
 80222ea:	f7f5 fd1b 	bl	8017d24 <GUI_Unlock>
 80222ee:	4620      	mov	r0, r4
 80222f0:	bd38      	pop	{r3, r4, r5, pc}
 80222f2:	bf00      	nop
 80222f4:	20000018 	.word	0x20000018

080222f8 <_Log2VisBuffered>:
 80222f8:	4770      	bx	lr
 80222fa:	bf00      	nop

080222fc <_DispLine>:
 80222fc:	b570      	push	{r4, r5, r6, lr}
 80222fe:	b082      	sub	sp, #8
 8022300:	4d21      	ldr	r5, [pc, #132]	; (8022388 <_DispLine+0x8c>)
 8022302:	4c22      	ldr	r4, [pc, #136]	; (802238c <_DispLine+0x90>)
 8022304:	4616      	mov	r6, r2
 8022306:	ab02      	add	r3, sp, #8
 8022308:	9001      	str	r0, [sp, #4]
 802230a:	f843 1d08 	str.w	r1, [r3, #-8]!
 802230e:	4619      	mov	r1, r3
 8022310:	682b      	ldr	r3, [r5, #0]
 8022312:	4798      	blx	r3
 8022314:	6823      	ldr	r3, [r4, #0]
 8022316:	9001      	str	r0, [sp, #4]
 8022318:	6958      	ldr	r0, [r3, #20]
 802231a:	b118      	cbz	r0, 8022324 <_DispLine+0x28>
 802231c:	4631      	mov	r1, r6
 802231e:	f7f1 fa3f 	bl	80137a0 <GUI_RectsIntersect>
 8022322:	b1a8      	cbz	r0, 8022350 <_DispLine+0x54>
 8022324:	2001      	movs	r0, #1
 8022326:	f000 ffdf 	bl	80232e8 <GUI__ManageCache>
 802232a:	6822      	ldr	r2, [r4, #0]
 802232c:	69d3      	ldr	r3, [r2, #28]
 802232e:	695b      	ldr	r3, [r3, #20]
 8022330:	b1ab      	cbz	r3, 802235e <_DispLine+0x62>
 8022332:	4c17      	ldr	r4, [pc, #92]	; (8022390 <_DispLine+0x94>)
 8022334:	6821      	ldr	r1, [r4, #0]
 8022336:	b169      	cbz	r1, 8022354 <_DispLine+0x58>
 8022338:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 802233c:	689b      	ldr	r3, [r3, #8]
 802233e:	9801      	ldr	r0, [sp, #4]
 8022340:	9900      	ldr	r1, [sp, #0]
 8022342:	4798      	blx	r3
 8022344:	4628      	mov	r0, r5
 8022346:	6823      	ldr	r3, [r4, #0]
 8022348:	4798      	blx	r3
 802234a:	2000      	movs	r0, #0
 802234c:	f000 ffcc 	bl	80232e8 <GUI__ManageCache>
 8022350:	b002      	add	sp, #8
 8022352:	bd70      	pop	{r4, r5, r6, pc}
 8022354:	689b      	ldr	r3, [r3, #8]
 8022356:	9900      	ldr	r1, [sp, #0]
 8022358:	9801      	ldr	r0, [sp, #4]
 802235a:	4798      	blx	r3
 802235c:	e7f5      	b.n	802234a <_DispLine+0x4e>
 802235e:	4d0d      	ldr	r5, [pc, #52]	; (8022394 <_DispLine+0x98>)
 8022360:	9b00      	ldr	r3, [sp, #0]
 8022362:	a801      	add	r0, sp, #4
 8022364:	3b01      	subs	r3, #1
 8022366:	2b00      	cmp	r3, #0
 8022368:	9300      	str	r3, [sp, #0]
 802236a:	dbee      	blt.n	802234a <_DispLine+0x4e>
 802236c:	f7f5 fdfe 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 8022370:	6823      	ldr	r3, [r4, #0]
 8022372:	4606      	mov	r6, r0
 8022374:	69db      	ldr	r3, [r3, #28]
 8022376:	681b      	ldr	r3, [r3, #0]
 8022378:	4798      	blx	r3
 802237a:	682b      	ldr	r3, [r5, #0]
 802237c:	2b00      	cmp	r3, #0
 802237e:	d0ef      	beq.n	8022360 <_DispLine+0x64>
 8022380:	4630      	mov	r0, r6
 8022382:	4798      	blx	r3
 8022384:	e7ec      	b.n	8022360 <_DispLine+0x64>
 8022386:	bf00      	nop
 8022388:	2000008c 	.word	0x2000008c
 802238c:	20000018 	.word	0x20000018
 8022390:	200467a0 	.word	0x200467a0
 8022394:	200467ac 	.word	0x200467ac

08022398 <GUI__GetLineNumChars>:
 8022398:	b530      	push	{r4, r5, lr}
 802239a:	b083      	sub	sp, #12
 802239c:	9001      	str	r0, [sp, #4]
 802239e:	b1e0      	cbz	r0, 80223da <GUI__GetLineNumChars+0x42>
 80223a0:	4b10      	ldr	r3, [pc, #64]	; (80223e4 <GUI__GetLineNumChars+0x4c>)
 80223a2:	460d      	mov	r5, r1
 80223a4:	681b      	ldr	r3, [r3, #0]
 80223a6:	69db      	ldr	r3, [r3, #28]
 80223a8:	695b      	ldr	r3, [r3, #20]
 80223aa:	b123      	cbz	r3, 80223b6 <GUI__GetLineNumChars+0x1e>
 80223ac:	685b      	ldr	r3, [r3, #4]
 80223ae:	b113      	cbz	r3, 80223b6 <GUI__GetLineNumChars+0x1e>
 80223b0:	4798      	blx	r3
 80223b2:	b003      	add	sp, #12
 80223b4:	bd30      	pop	{r4, r5, pc}
 80223b6:	2d00      	cmp	r5, #0
 80223b8:	dd11      	ble.n	80223de <GUI__GetLineNumChars+0x46>
 80223ba:	2400      	movs	r4, #0
 80223bc:	a801      	add	r0, sp, #4
 80223be:	f7f5 fdd5 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 80223c2:	b138      	cbz	r0, 80223d4 <GUI__GetLineNumChars+0x3c>
 80223c4:	280a      	cmp	r0, #10
 80223c6:	d005      	beq.n	80223d4 <GUI__GetLineNumChars+0x3c>
 80223c8:	3401      	adds	r4, #1
 80223ca:	42a5      	cmp	r5, r4
 80223cc:	d1f6      	bne.n	80223bc <GUI__GetLineNumChars+0x24>
 80223ce:	4628      	mov	r0, r5
 80223d0:	b003      	add	sp, #12
 80223d2:	bd30      	pop	{r4, r5, pc}
 80223d4:	4620      	mov	r0, r4
 80223d6:	b003      	add	sp, #12
 80223d8:	bd30      	pop	{r4, r5, pc}
 80223da:	b003      	add	sp, #12
 80223dc:	bd30      	pop	{r4, r5, pc}
 80223de:	2000      	movs	r0, #0
 80223e0:	e7e7      	b.n	80223b2 <GUI__GetLineNumChars+0x1a>
 80223e2:	bf00      	nop
 80223e4:	20000018 	.word	0x20000018

080223e8 <GUI__GetLineDistX>:
 80223e8:	b570      	push	{r4, r5, r6, lr}
 80223ea:	b084      	sub	sp, #16
 80223ec:	4a1c      	ldr	r2, [pc, #112]	; (8022460 <GUI__GetLineDistX+0x78>)
 80223ee:	ab04      	add	r3, sp, #16
 80223f0:	9001      	str	r0, [sp, #4]
 80223f2:	f843 1d10 	str.w	r1, [r3, #-16]!
 80223f6:	4619      	mov	r1, r3
 80223f8:	6813      	ldr	r3, [r2, #0]
 80223fa:	4798      	blx	r3
 80223fc:	9001      	str	r0, [sp, #4]
 80223fe:	b350      	cbz	r0, 8022456 <GUI__GetLineDistX+0x6e>
 8022400:	4b18      	ldr	r3, [pc, #96]	; (8022464 <GUI__GetLineDistX+0x7c>)
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	69db      	ldr	r3, [r3, #28]
 8022406:	695b      	ldr	r3, [r3, #20]
 8022408:	b12b      	cbz	r3, 8022416 <GUI__GetLineDistX+0x2e>
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	b11b      	cbz	r3, 8022416 <GUI__GetLineDistX+0x2e>
 802240e:	9900      	ldr	r1, [sp, #0]
 8022410:	4798      	blx	r3
 8022412:	b004      	add	sp, #16
 8022414:	bd70      	pop	{r4, r5, r6, pc}
 8022416:	9b00      	ldr	r3, [sp, #0]
 8022418:	3b01      	subs	r3, #1
 802241a:	2b00      	cmp	r3, #0
 802241c:	9300      	str	r3, [sp, #0]
 802241e:	db1c      	blt.n	802245a <GUI__GetLineDistX+0x72>
 8022420:	2400      	movs	r4, #0
 8022422:	a801      	add	r0, sp, #4
 8022424:	f7f5 fda2 	bl	8017f6c <GUI_UC__GetCharCodeInc>
 8022428:	4605      	mov	r5, r0
 802242a:	f7ff ff3f 	bl	80222ac <GUI_GetCharDistX>
 802242e:	9b00      	ldr	r3, [sp, #0]
 8022430:	4404      	add	r4, r0
 8022432:	3b01      	subs	r3, #1
 8022434:	2b00      	cmp	r3, #0
 8022436:	9300      	str	r3, [sp, #0]
 8022438:	daf3      	bge.n	8022422 <GUI__GetLineDistX+0x3a>
 802243a:	2600      	movs	r6, #0
 802243c:	a904      	add	r1, sp, #16
 802243e:	4628      	mov	r0, r5
 8022440:	f841 6d04 	str.w	r6, [r1, #-4]!
 8022444:	f7ff ff44 	bl	80222d0 <GUI_GetCharDistXEx>
 8022448:	9b03      	ldr	r3, [sp, #12]
 802244a:	4298      	cmp	r0, r3
 802244c:	bfb8      	it	lt
 802244e:	1a1e      	sublt	r6, r3, r0
 8022450:	1930      	adds	r0, r6, r4
 8022452:	b004      	add	sp, #16
 8022454:	bd70      	pop	{r4, r5, r6, pc}
 8022456:	b004      	add	sp, #16
 8022458:	bd70      	pop	{r4, r5, r6, pc}
 802245a:	2500      	movs	r5, #0
 802245c:	462c      	mov	r4, r5
 802245e:	e7ec      	b.n	802243a <GUI__GetLineDistX+0x52>
 8022460:	2000008c 	.word	0x2000008c
 8022464:	20000018 	.word	0x20000018

08022468 <GUI__DispLine>:
 8022468:	4b2e      	ldr	r3, [pc, #184]	; (8022524 <GUI__DispLine+0xbc>)
 802246a:	681b      	ldr	r3, [r3, #0]
 802246c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022470:	4604      	mov	r4, r0
 8022472:	b082      	sub	sp, #8
 8022474:	460d      	mov	r5, r1
 8022476:	b183      	cbz	r3, 802249a <GUI__DispLine+0x32>
 8022478:	2000      	movs	r0, #0
 802247a:	f7fd ff35 	bl	80202e8 <WM__InitIVRSearch>
 802247e:	b148      	cbz	r0, 8022494 <GUI__DispLine+0x2c>
 8022480:	466e      	mov	r6, sp
 8022482:	4632      	mov	r2, r6
 8022484:	4629      	mov	r1, r5
 8022486:	4620      	mov	r0, r4
 8022488:	f7ff ff38 	bl	80222fc <_DispLine>
 802248c:	f7fd fe02 	bl	8020094 <WM__GetNextIVR>
 8022490:	2800      	cmp	r0, #0
 8022492:	d1f6      	bne.n	8022482 <GUI__DispLine+0x1a>
 8022494:	b002      	add	sp, #8
 8022496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802249a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8022528 <GUI__DispLine+0xc0>
 802249e:	466b      	mov	r3, sp
 80224a0:	6810      	ldr	r0, [r2, #0]
 80224a2:	466e      	mov	r6, sp
 80224a4:	f8d8 7000 	ldr.w	r7, [r8]
 80224a8:	6851      	ldr	r1, [r2, #4]
 80224aa:	f8b7 c04c 	ldrh.w	ip, [r7, #76]	; 0x4c
 80224ae:	f8b7 e050 	ldrh.w	lr, [r7, #80]	; 0x50
 80224b2:	c303      	stmia	r3!, {r0, r1}
 80224b4:	f8bd 7000 	ldrh.w	r7, [sp]
 80224b8:	4668      	mov	r0, sp
 80224ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80224be:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80224c2:	4467      	add	r7, ip
 80224c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80224c8:	4461      	add	r1, ip
 80224ca:	4472      	add	r2, lr
 80224cc:	f8ad 7000 	strh.w	r7, [sp]
 80224d0:	4473      	add	r3, lr
 80224d2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80224d6:	f8ad 2002 	strh.w	r2, [sp, #2]
 80224da:	f8ad 3006 	strh.w	r3, [sp, #6]
 80224de:	f7fd ff03 	bl	80202e8 <WM__InitIVRSearch>
 80224e2:	b960      	cbnz	r0, 80224fe <GUI__DispLine+0x96>
 80224e4:	f8d8 3000 	ldr.w	r3, [r8]
 80224e8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80224ea:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80224ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80224ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80224f0:	1b09      	subs	r1, r1, r4
 80224f2:	1a12      	subs	r2, r2, r0
 80224f4:	8459      	strh	r1, [r3, #34]	; 0x22
 80224f6:	849a      	strh	r2, [r3, #36]	; 0x24
 80224f8:	b002      	add	sp, #8
 80224fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224fe:	f8d8 3000 	ldr.w	r3, [r8]
 8022502:	4632      	mov	r2, r6
 8022504:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8022508:	4629      	mov	r1, r5
 802250a:	f8bd 7000 	ldrh.w	r7, [sp]
 802250e:	8498      	strh	r0, [r3, #36]	; 0x24
 8022510:	4620      	mov	r0, r4
 8022512:	845f      	strh	r7, [r3, #34]	; 0x22
 8022514:	f7ff fef2 	bl	80222fc <_DispLine>
 8022518:	f7fd fdbc 	bl	8020094 <WM__GetNextIVR>
 802251c:	2800      	cmp	r0, #0
 802251e:	d1ee      	bne.n	80224fe <GUI__DispLine+0x96>
 8022520:	e7e0      	b.n	80224e4 <GUI__DispLine+0x7c>
 8022522:	bf00      	nop
 8022524:	2004678c 	.word	0x2004678c
 8022528:	20000018 	.word	0x20000018

0802252c <GUIMONO_DispChar>:
 802252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022530:	4e5c      	ldr	r6, [pc, #368]	; (80226a4 <GUIMONO_DispChar+0x178>)
 8022532:	b08d      	sub	sp, #52	; 0x34
 8022534:	6833      	ldr	r3, [r6, #0]
 8022536:	69da      	ldr	r2, [r3, #28]
 8022538:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 802253c:	69d4      	ldr	r4, [r2, #28]
 802253e:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 8022542:	4583      	cmp	fp, r0
 8022544:	f200 8097 	bhi.w	8022676 <GUIMONO_DispChar+0x14a>
 8022548:	89e1      	ldrh	r1, [r4, #14]
 802254a:	4281      	cmp	r1, r0
 802254c:	f0c0 8093 	bcc.w	8022676 <GUIMONO_DispChar+0x14a>
 8022550:	6821      	ldr	r1, [r4, #0]
 8022552:	ebcb 0b00 	rsb	fp, fp, r0
 8022556:	9108      	str	r1, [sp, #32]
 8022558:	f04f 31ff 	mov.w	r1, #4294967295
 802255c:	910a      	str	r1, [sp, #40]	; 0x28
 802255e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8022562:	f000 8082 	beq.w	802266a <GUIMONO_DispChar+0x13e>
 8022566:	f892 8018 	ldrb.w	r8, [r2, #24]
 802256a:	7ca2      	ldrb	r2, [r4, #18]
 802256c:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 8022570:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 8022574:	fb18 f302 	smulbb	r3, r8, r2
 8022578:	4608      	mov	r0, r1
 802257a:	9107      	str	r1, [sp, #28]
 802257c:	461f      	mov	r7, r3
 802257e:	f894 a010 	ldrb.w	sl, [r4, #16]
 8022582:	f7f7 f8ef 	bl	8019764 <LCD_SetDrawMode>
 8022586:	f8d6 e000 	ldr.w	lr, [r6]
 802258a:	9908      	ldr	r1, [sp, #32]
 802258c:	4643      	mov	r3, r8
 802258e:	f8de c038 	ldr.w	ip, [lr, #56]	; 0x38
 8022592:	4652      	mov	r2, sl
 8022594:	9009      	str	r0, [sp, #36]	; 0x24
 8022596:	fb07 100b 	mla	r0, r7, fp, r1
 802259a:	f8de e01c 	ldr.w	lr, [lr, #28]
 802259e:	970b      	str	r7, [sp, #44]	; 0x2c
 80225a0:	2701      	movs	r7, #1
 80225a2:	9004      	str	r0, [sp, #16]
 80225a4:	4649      	mov	r1, r9
 80225a6:	f8cd c014 	str.w	ip, [sp, #20]
 80225aa:	4628      	mov	r0, r5
 80225ac:	f894 c012 	ldrb.w	ip, [r4, #18]
 80225b0:	9702      	str	r7, [sp, #8]
 80225b2:	f8cd c00c 	str.w	ip, [sp, #12]
 80225b6:	f89e c01b 	ldrb.w	ip, [lr, #27]
 80225ba:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80226a4 <GUIMONO_DispChar+0x178>
 80225be:	f8cd c004 	str.w	ip, [sp, #4]
 80225c2:	f89e e01a 	ldrb.w	lr, [lr, #26]
 80225c6:	f8cd e000 	str.w	lr, [sp]
 80225ca:	f7f7 fa91 	bl	8019af0 <LCD_DrawBitmap>
 80225ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80225d0:	1c7b      	adds	r3, r7, #1
 80225d2:	d025      	beq.n	8022620 <GUIMONO_DispChar+0xf4>
 80225d4:	9907      	ldr	r1, [sp, #28]
 80225d6:	f041 0002 	orr.w	r0, r1, #2
 80225da:	f7f7 f8c3 	bl	8019764 <LCD_SetDrawMode>
 80225de:	f8db 1000 	ldr.w	r1, [fp]
 80225e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225e4:	4643      	mov	r3, r8
 80225e6:	9808      	ldr	r0, [sp, #32]
 80225e8:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 80225ec:	fb02 0007 	mla	r0, r2, r7, r0
 80225f0:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80225f4:	2701      	movs	r7, #1
 80225f6:	f8cd c014 	str.w	ip, [sp, #20]
 80225fa:	9004      	str	r0, [sp, #16]
 80225fc:	4652      	mov	r2, sl
 80225fe:	f894 c012 	ldrb.w	ip, [r4, #18]
 8022602:	4649      	mov	r1, r9
 8022604:	9702      	str	r7, [sp, #8]
 8022606:	4628      	mov	r0, r5
 8022608:	f8cd c00c 	str.w	ip, [sp, #12]
 802260c:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8022610:	f8cd c004 	str.w	ip, [sp, #4]
 8022614:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8022618:	f8cd e000 	str.w	lr, [sp]
 802261c:	f7f7 fa68 	bl	8019af0 <LCD_DrawBitmap>
 8022620:	6833      	ldr	r3, [r6, #0]
 8022622:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80226a4 <GUIMONO_DispChar+0x178>
 8022626:	69db      	ldr	r3, [r3, #28]
 8022628:	7e5a      	ldrb	r2, [r3, #25]
 802262a:	7e1b      	ldrb	r3, [r3, #24]
 802262c:	429a      	cmp	r2, r3
 802262e:	d915      	bls.n	802265c <GUIMONO_DispChar+0x130>
 8022630:	9b07      	ldr	r3, [sp, #28]
 8022632:	2b02      	cmp	r3, #2
 8022634:	d012      	beq.n	802265c <GUIMONO_DispChar+0x130>
 8022636:	f083 0004 	eor.w	r0, r3, #4
 802263a:	f7f7 f893 	bl	8019764 <LCD_SetDrawMode>
 802263e:	f8d8 3000 	ldr.w	r3, [r8]
 8022642:	4628      	mov	r0, r5
 8022644:	69db      	ldr	r3, [r3, #28]
 8022646:	7e1f      	ldrb	r7, [r3, #24]
 8022648:	7ed9      	ldrb	r1, [r3, #27]
 802264a:	7e9a      	ldrb	r2, [r3, #26]
 802264c:	7e5b      	ldrb	r3, [r3, #25]
 802264e:	fb07 9101 	mla	r1, r7, r1, r9
 8022652:	fb0a 5202 	mla	r2, sl, r2, r5
 8022656:	444b      	add	r3, r9
 8022658:	f7f7 f90c 	bl	8019874 <LCD_FillRect>
 802265c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8022660:	f7f7 f880 	bl	8019764 <LCD_SetDrawMode>
 8022664:	6833      	ldr	r3, [r6, #0]
 8022666:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 802266a:	7c62      	ldrb	r2, [r4, #17]
 802266c:	4415      	add	r5, r2
 802266e:	845d      	strh	r5, [r3, #34]	; 0x22
 8022670:	b00d      	add	sp, #52	; 0x34
 8022672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022676:	68a1      	ldr	r1, [r4, #8]
 8022678:	2900      	cmp	r1, #0
 802267a:	d0f6      	beq.n	802266a <GUIMONO_DispChar+0x13e>
 802267c:	880f      	ldrh	r7, [r1, #0]
 802267e:	42b8      	cmp	r0, r7
 8022680:	d3f3      	bcc.n	802266a <GUIMONO_DispChar+0x13e>
 8022682:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8022686:	4586      	cmp	lr, r0
 8022688:	d3ef      	bcc.n	802266a <GUIMONO_DispChar+0x13e>
 802268a:	1bc0      	subs	r0, r0, r7
 802268c:	6849      	ldr	r1, [r1, #4]
 802268e:	6867      	ldr	r7, [r4, #4]
 8022690:	b280      	uxth	r0, r0
 8022692:	9708      	str	r7, [sp, #32]
 8022694:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 8022698:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 802269c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80226a0:	910a      	str	r1, [sp, #40]	; 0x28
 80226a2:	e75c      	b.n	802255e <GUIMONO_DispChar+0x32>
 80226a4:	20000018 	.word	0x20000018

080226a8 <GUIMONO_GetCharDistX>:
 80226a8:	4b04      	ldr	r3, [pc, #16]	; (80226bc <GUIMONO_GetCharDistX+0x14>)
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	69db      	ldr	r3, [r3, #28]
 80226ae:	69db      	ldr	r3, [r3, #28]
 80226b0:	b109      	cbz	r1, 80226b6 <GUIMONO_GetCharDistX+0xe>
 80226b2:	7c1a      	ldrb	r2, [r3, #16]
 80226b4:	600a      	str	r2, [r1, #0]
 80226b6:	7c58      	ldrb	r0, [r3, #17]
 80226b8:	4770      	bx	lr
 80226ba:	bf00      	nop
 80226bc:	20000018 	.word	0x20000018

080226c0 <GUIMONO_GetFontInfo>:
 80226c0:	2302      	movs	r3, #2
 80226c2:	800b      	strh	r3, [r1, #0]
 80226c4:	4770      	bx	lr
 80226c6:	bf00      	nop

080226c8 <GUIMONO_IsInFont>:
 80226c8:	69c3      	ldr	r3, [r0, #28]
 80226ca:	899a      	ldrh	r2, [r3, #12]
 80226cc:	428a      	cmp	r2, r1
 80226ce:	d802      	bhi.n	80226d6 <GUIMONO_IsInFont+0xe>
 80226d0:	89da      	ldrh	r2, [r3, #14]
 80226d2:	428a      	cmp	r2, r1
 80226d4:	d211      	bcs.n	80226fa <GUIMONO_IsInFont+0x32>
 80226d6:	6898      	ldr	r0, [r3, #8]
 80226d8:	b118      	cbz	r0, 80226e2 <GUIMONO_IsInFont+0x1a>
 80226da:	8803      	ldrh	r3, [r0, #0]
 80226dc:	4299      	cmp	r1, r3
 80226de:	d201      	bcs.n	80226e4 <GUIMONO_IsInFont+0x1c>
 80226e0:	2000      	movs	r0, #0
 80226e2:	4770      	bx	lr
 80226e4:	8842      	ldrh	r2, [r0, #2]
 80226e6:	428a      	cmp	r2, r1
 80226e8:	d3fa      	bcc.n	80226e0 <GUIMONO_IsInFont+0x18>
 80226ea:	1ac9      	subs	r1, r1, r3
 80226ec:	6843      	ldr	r3, [r0, #4]
 80226ee:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 80226f2:	43c0      	mvns	r0, r0
 80226f4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80226f8:	4770      	bx	lr
 80226fa:	2001      	movs	r0, #1
 80226fc:	4770      	bx	lr
 80226fe:	bf00      	nop

08022700 <GUI_CURSOR_SetPositionEx>:
 8022700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022704:	4614      	mov	r4, r2
 8022706:	4606      	mov	r6, r0
 8022708:	4688      	mov	r8, r1
 802270a:	f7f5 fb15 	bl	8017d38 <GUI_Lock>
 802270e:	4620      	mov	r0, r4
 8022710:	f7f4 f8e8 	bl	80168e4 <GUI_GetCursorLayer>
 8022714:	b9e8      	cbnz	r0, 8022752 <GUI_CURSOR_SetPositionEx+0x52>
 8022716:	00a7      	lsls	r7, r4, #2
 8022718:	4d1b      	ldr	r5, [pc, #108]	; (8022788 <GUI_CURSOR_SetPositionEx+0x88>)
 802271a:	193b      	adds	r3, r7, r4
 802271c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022720:	68da      	ldr	r2, [r3, #12]
 8022722:	42b2      	cmp	r2, r6
 8022724:	d106      	bne.n	8022734 <GUI_CURSOR_SetPositionEx+0x34>
 8022726:	691b      	ldr	r3, [r3, #16]
 8022728:	4543      	cmp	r3, r8
 802272a:	d103      	bne.n	8022734 <GUI_CURSOR_SetPositionEx+0x34>
 802272c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022730:	f7f5 baf8 	b.w	8017d24 <GUI_Unlock>
 8022734:	193b      	adds	r3, r7, r4
 8022736:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802273a:	6958      	ldr	r0, [r3, #20]
 802273c:	b9d0      	cbnz	r0, 8022774 <GUI_CURSOR_SetPositionEx+0x74>
 802273e:	443c      	add	r4, r7
 8022740:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8022744:	60e6      	str	r6, [r4, #12]
 8022746:	f8c4 8010 	str.w	r8, [r4, #16]
 802274a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802274e:	f7f5 bae9 	b.w	8017d24 <GUI_Unlock>
 8022752:	4b0d      	ldr	r3, [pc, #52]	; (8022788 <GUI_CURSOR_SetPositionEx+0x88>)
 8022754:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8022758:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802275c:	6863      	ldr	r3, [r4, #4]
 802275e:	689a      	ldr	r2, [r3, #8]
 8022760:	6859      	ldr	r1, [r3, #4]
 8022762:	ebc2 0208 	rsb	r2, r2, r8
 8022766:	1a71      	subs	r1, r6, r1
 8022768:	f7f4 f8fa 	bl	8016960 <GUI_SetLayerPosEx>
 802276c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022770:	f7f5 bad8 	b.w	8017d24 <GUI_Unlock>
 8022774:	685b      	ldr	r3, [r3, #4]
 8022776:	689a      	ldr	r2, [r3, #8]
 8022778:	6859      	ldr	r1, [r3, #4]
 802277a:	ebc2 0208 	rsb	r2, r2, r8
 802277e:	1a71      	subs	r1, r6, r1
 8022780:	f000 f9d4 	bl	8022b2c <GUI_SPRITE_SetPosition>
 8022784:	e7db      	b.n	802273e <GUI_CURSOR_SetPositionEx+0x3e>
 8022786:	bf00      	nop
 8022788:	20000440 	.word	0x20000440

0802278c <_OnExit>:
 802278c:	4b03      	ldr	r3, [pc, #12]	; (802279c <_OnExit+0x10>)
 802278e:	2200      	movs	r2, #0
 8022790:	4903      	ldr	r1, [pc, #12]	; (80227a0 <_OnExit+0x14>)
 8022792:	649a      	str	r2, [r3, #72]	; 0x48
 8022794:	600b      	str	r3, [r1, #0]
 8022796:	604b      	str	r3, [r1, #4]
 8022798:	64da      	str	r2, [r3, #76]	; 0x4c
 802279a:	4770      	bx	lr
 802279c:	2000048c 	.word	0x2000048c
 80227a0:	20000090 	.word	0x20000090

080227a4 <GUI_PID_GetState>:
 80227a4:	b470      	push	{r4, r5, r6}
 80227a6:	4d12      	ldr	r5, [pc, #72]	; (80227f0 <GUI_PID_GetState+0x4c>)
 80227a8:	4604      	mov	r4, r0
 80227aa:	682b      	ldr	r3, [r5, #0]
 80227ac:	686a      	ldr	r2, [r5, #4]
 80227ae:	4293      	cmp	r3, r2
 80227b0:	d00f      	beq.n	80227d2 <GUI_PID_GetState+0x2e>
 80227b2:	4e10      	ldr	r6, [pc, #64]	; (80227f4 <GUI_PID_GetState+0x50>)
 80227b4:	42b3      	cmp	r3, r6
 80227b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80227ba:	bf14      	ite	ne
 80227bc:	330c      	addne	r3, #12
 80227be:	3b3c      	subeq	r3, #60	; 0x3c
 80227c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80227c4:	602b      	str	r3, [r5, #0]
 80227c6:	7a20      	ldrb	r0, [r4, #8]
 80227c8:	3000      	adds	r0, #0
 80227ca:	bc70      	pop	{r4, r5, r6}
 80227cc:	bf18      	it	ne
 80227ce:	2001      	movne	r0, #1
 80227d0:	4770      	bx	lr
 80227d2:	4a09      	ldr	r2, [pc, #36]	; (80227f8 <GUI_PID_GetState+0x54>)
 80227d4:	4293      	cmp	r3, r2
 80227d6:	d004      	beq.n	80227e2 <GUI_PID_GetState+0x3e>
 80227d8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80227dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80227e0:	e7f1      	b.n	80227c6 <GUI_PID_GetState+0x22>
 80227e2:	333c      	adds	r3, #60	; 0x3c
 80227e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80227e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80227ec:	e7eb      	b.n	80227c6 <GUI_PID_GetState+0x22>
 80227ee:	bf00      	nop
 80227f0:	20000090 	.word	0x20000090
 80227f4:	200004c8 	.word	0x200004c8
 80227f8:	2000048c 	.word	0x2000048c

080227fc <GUI_PID_StoreState>:
 80227fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227fe:	4e3c      	ldr	r6, [pc, #240]	; (80228f0 <GUI_PID_StoreState+0xf4>)
 8022800:	b085      	sub	sp, #20
 8022802:	4604      	mov	r4, r0
 8022804:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8022806:	2b00      	cmp	r3, #0
 8022808:	d055      	beq.n	80228b6 <GUI_PID_StoreState+0xba>
 802280a:	4a3a      	ldr	r2, [pc, #232]	; (80228f4 <GUI_PID_StoreState+0xf8>)
 802280c:	ad01      	add	r5, sp, #4
 802280e:	493a      	ldr	r1, [pc, #232]	; (80228f8 <GUI_PID_StoreState+0xfc>)
 8022810:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8022812:	6011      	str	r1, [r2, #0]
 8022814:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8022818:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 802281c:	b10b      	cbz	r3, 8022822 <GUI_PID_StoreState+0x26>
 802281e:	4628      	mov	r0, r5
 8022820:	4798      	blx	r3
 8022822:	4f36      	ldr	r7, [pc, #216]	; (80228fc <GUI_PID_StoreState+0x100>)
 8022824:	683c      	ldr	r4, [r7, #0]
 8022826:	687b      	ldr	r3, [r7, #4]
 8022828:	429c      	cmp	r4, r3
 802282a:	d032      	beq.n	8022892 <GUI_PID_StoreState+0x96>
 802282c:	42b3      	cmp	r3, r6
 802282e:	4a30      	ldr	r2, [pc, #192]	; (80228f0 <GUI_PID_StoreState+0xf4>)
 8022830:	d032      	beq.n	8022898 <GUI_PID_StoreState+0x9c>
 8022832:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8022836:	f1a3 010c 	sub.w	r1, r3, #12
 802283a:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 802283e:	468c      	mov	ip, r1
 8022840:	4586      	cmp	lr, r0
 8022842:	d135      	bne.n	80228b0 <GUI_PID_StoreState+0xb4>
 8022844:	428c      	cmp	r4, r1
 8022846:	d033      	beq.n	80228b0 <GUI_PID_StoreState+0xb4>
 8022848:	4291      	cmp	r1, r2
 802284a:	d03b      	beq.n	80228c4 <GUI_PID_StoreState+0xc8>
 802284c:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 8022850:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8022854:	4282      	cmp	r2, r0
 8022856:	d03d      	beq.n	80228d4 <GUI_PID_StoreState+0xd8>
 8022858:	4573      	cmp	r3, lr
 802285a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802285e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022862:	d00b      	beq.n	802287c <GUI_PID_StoreState+0x80>
 8022864:	330c      	adds	r3, #12
 8022866:	429c      	cmp	r4, r3
 8022868:	607b      	str	r3, [r7, #4]
 802286a:	d00b      	beq.n	8022884 <GUI_PID_StoreState+0x88>
 802286c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 802286e:	b10b      	cbz	r3, 8022874 <GUI_PID_StoreState+0x78>
 8022870:	4628      	mov	r0, r5
 8022872:	4798      	blx	r3
 8022874:	f7f5 fef6 	bl	8018664 <GUI_SignalEvent>
 8022878:	b005      	add	sp, #20
 802287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802287c:	4b1c      	ldr	r3, [pc, #112]	; (80228f0 <GUI_PID_StoreState+0xf4>)
 802287e:	429c      	cmp	r4, r3
 8022880:	607b      	str	r3, [r7, #4]
 8022882:	d1f3      	bne.n	802286c <GUI_PID_StoreState+0x70>
 8022884:	4b1e      	ldr	r3, [pc, #120]	; (8022900 <GUI_PID_StoreState+0x104>)
 8022886:	429c      	cmp	r4, r3
 8022888:	bf14      	ite	ne
 802288a:	340c      	addne	r4, #12
 802288c:	3c3c      	subeq	r4, #60	; 0x3c
 802288e:	603c      	str	r4, [r7, #0]
 8022890:	e7ec      	b.n	802286c <GUI_PID_StoreState+0x70>
 8022892:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8022900 <GUI_PID_StoreState+0x104>
 8022896:	e7df      	b.n	8022858 <GUI_PID_StoreState+0x5c>
 8022898:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802289c:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 80228a0:	4282      	cmp	r2, r0
 80228a2:	d11d      	bne.n	80228e0 <GUI_PID_StoreState+0xe4>
 80228a4:	f106 0e3c 	add.w	lr, r6, #60	; 0x3c
 80228a8:	4574      	cmp	r4, lr
 80228aa:	d019      	beq.n	80228e0 <GUI_PID_StoreState+0xe4>
 80228ac:	4671      	mov	r1, lr
 80228ae:	e7cf      	b.n	8022850 <GUI_PID_StoreState+0x54>
 80228b0:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 80228b4:	e7d0      	b.n	8022858 <GUI_PID_StoreState+0x5c>
 80228b6:	4b13      	ldr	r3, [pc, #76]	; (8022904 <GUI_PID_StoreState+0x108>)
 80228b8:	4630      	mov	r0, r6
 80228ba:	f840 3f50 	str.w	r3, [r0, #80]!
 80228be:	f7f1 fa33 	bl	8013d28 <GUI__RegisterExit>
 80228c2:	e7a2      	b.n	802280a <GUI_PID_StoreState+0xe>
 80228c4:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 80228c8:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 80228cc:	4282      	cmp	r2, r0
 80228ce:	d1c3      	bne.n	8022858 <GUI_PID_StoreState+0x5c>
 80228d0:	4663      	mov	r3, ip
 80228d2:	e7c1      	b.n	8022858 <GUI_PID_StoreState+0x5c>
 80228d4:	42b3      	cmp	r3, r6
 80228d6:	d008      	beq.n	80228ea <GUI_PID_StoreState+0xee>
 80228d8:	f1a3 0c0c 	sub.w	ip, r3, #12
 80228dc:	4663      	mov	r3, ip
 80228de:	e7bb      	b.n	8022858 <GUI_PID_StoreState+0x5c>
 80228e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80228e4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80228e8:	e7bc      	b.n	8022864 <GUI_PID_StoreState+0x68>
 80228ea:	4b05      	ldr	r3, [pc, #20]	; (8022900 <GUI_PID_StoreState+0x104>)
 80228ec:	e7b4      	b.n	8022858 <GUI_PID_StoreState+0x5c>
 80228ee:	bf00      	nop
 80228f0:	2000048c 	.word	0x2000048c
 80228f4:	200467dc 	.word	0x200467dc
 80228f8:	080211f1 	.word	0x080211f1
 80228fc:	20000090 	.word	0x20000090
 8022900:	200004c8 	.word	0x200004c8
 8022904:	0802278d 	.word	0x0802278d

08022908 <GUI_PID_IsEmpty>:
 8022908:	4b03      	ldr	r3, [pc, #12]	; (8022918 <GUI_PID_IsEmpty+0x10>)
 802290a:	cb09      	ldmia	r3, {r0, r3}
 802290c:	1ac0      	subs	r0, r0, r3
 802290e:	fab0 f080 	clz	r0, r0
 8022912:	0940      	lsrs	r0, r0, #5
 8022914:	4770      	bx	lr
 8022916:	bf00      	nop
 8022918:	20000090 	.word	0x20000090

0802291c <_CreateBuffer.isra.4>:
 802291c:	680b      	ldr	r3, [r1, #0]
 802291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022922:	4680      	mov	r8, r0
 8022924:	8818      	ldrh	r0, [r3, #0]
 8022926:	460e      	mov	r6, r1
 8022928:	4615      	mov	r5, r2
 802292a:	300d      	adds	r0, #13
 802292c:	0080      	lsls	r0, r0, #2
 802292e:	f7ef ffc1 	bl	80128b4 <GUI_ALLOC_AllocNoInit>
 8022932:	2800      	cmp	r0, #0
 8022934:	d03d      	beq.n	80229b2 <_CreateBuffer.isra.4+0x96>
 8022936:	4607      	mov	r7, r0
 8022938:	f7ef ffd4 	bl	80128e4 <GUI_ALLOC_LockH>
 802293c:	f8d8 3000 	ldr.w	r3, [r8]
 8022940:	4604      	mov	r4, r0
 8022942:	6998      	ldr	r0, [r3, #24]
 8022944:	f7f1 fa2e 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 8022948:	2800      	cmp	r0, #0
 802294a:	d032      	beq.n	80229b2 <_CreateBuffer.isra.4+0x96>
 802294c:	68c3      	ldr	r3, [r0, #12]
 802294e:	2108      	movs	r1, #8
 8022950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022952:	4798      	blx	r3
 8022954:	2802      	cmp	r0, #2
 8022956:	dc22      	bgt.n	802299e <_CreateBuffer.isra.4+0x82>
 8022958:	2301      	movs	r3, #1
 802295a:	61a0      	str	r0, [r4, #24]
 802295c:	6832      	ldr	r2, [r6, #0]
 802295e:	6123      	str	r3, [r4, #16]
 8022960:	8812      	ldrh	r2, [r2, #0]
 8022962:	fb02 f303 	mul.w	r3, r2, r3
 8022966:	61e2      	str	r2, [r4, #28]
 8022968:	6163      	str	r3, [r4, #20]
 802296a:	f7ef ffe9 	bl	8012940 <GUI_ALLOC_GetMaxSize>
 802296e:	6963      	ldr	r3, [r4, #20]
 8022970:	2200      	movs	r2, #0
 8022972:	60a7      	str	r7, [r4, #8]
 8022974:	4298      	cmp	r0, r3
 8022976:	f104 0334 	add.w	r3, r4, #52	; 0x34
 802297a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 802297e:	bfb8      	it	lt
 8022980:	6160      	strlt	r0, [r4, #20]
 8022982:	2d01      	cmp	r5, #1
 8022984:	6023      	str	r3, [r4, #0]
 8022986:	60e2      	str	r2, [r4, #12]
 8022988:	d018      	beq.n	80229bc <_CreateBuffer.isra.4+0xa0>
 802298a:	69e1      	ldr	r1, [r4, #28]
 802298c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8022990:	4620      	mov	r0, r4
 8022992:	440a      	add	r2, r1
 8022994:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022998:	6063      	str	r3, [r4, #4]
 802299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802299e:	2804      	cmp	r0, #4
 80229a0:	dd0a      	ble.n	80229b8 <_CreateBuffer.isra.4+0x9c>
 80229a2:	2808      	cmp	r0, #8
 80229a4:	dd0e      	ble.n	80229c4 <_CreateBuffer.isra.4+0xa8>
 80229a6:	2810      	cmp	r0, #16
 80229a8:	dd0e      	ble.n	80229c8 <_CreateBuffer.isra.4+0xac>
 80229aa:	2220      	movs	r2, #32
 80229ac:	2304      	movs	r3, #4
 80229ae:	61a2      	str	r2, [r4, #24]
 80229b0:	e7d4      	b.n	802295c <_CreateBuffer.isra.4+0x40>
 80229b2:	2000      	movs	r0, #0
 80229b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229b8:	2004      	movs	r0, #4
 80229ba:	e7cd      	b.n	8022958 <_CreateBuffer.isra.4+0x3c>
 80229bc:	6063      	str	r3, [r4, #4]
 80229be:	4620      	mov	r0, r4
 80229c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229c4:	2008      	movs	r0, #8
 80229c6:	e7c7      	b.n	8022958 <_CreateBuffer.isra.4+0x3c>
 80229c8:	2210      	movs	r2, #16
 80229ca:	2302      	movs	r3, #2
 80229cc:	61a2      	str	r2, [r4, #24]
 80229ce:	e7c5      	b.n	802295c <_CreateBuffer.isra.4+0x40>

080229d0 <_SetBkIndexBuffered>:
 80229d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d4:	b087      	sub	sp, #28
 80229d6:	4617      	mov	r7, r2
 80229d8:	460d      	mov	r5, r1
 80229da:	4606      	mov	r6, r0
 80229dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80229de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80229e0:	428a      	cmp	r2, r1
 80229e2:	d045      	beq.n	8022a70 <_SetBkIndexBuffered+0xa0>
 80229e4:	68e1      	ldr	r1, [r4, #12]
 80229e6:	b399      	cbz	r1, 8022a50 <_SetBkIndexBuffered+0x80>
 80229e8:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80229ec:	2a01      	cmp	r2, #1
 80229ee:	d051      	beq.n	8022a94 <_SetBkIndexBuffered+0xc4>
 80229f0:	69e0      	ldr	r0, [r4, #28]
 80229f2:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 80229f6:	6822      	ldr	r2, [r4, #0]
 80229f8:	4486      	add	lr, r0
 80229fa:	6860      	ldr	r0, [r4, #4]
 80229fc:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8022a00:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8022a04:	f100 0a04 	add.w	sl, r0, #4
 8022a08:	6062      	str	r2, [r4, #4]
 8022a0a:	f8d3 9000 	ldr.w	r9, [r3]
 8022a0e:	f1b9 0f00 	cmp.w	r9, #0
 8022a12:	d01e      	beq.n	8022a52 <_SetBkIndexBuffered+0x82>
 8022a14:	69a2      	ldr	r2, [r4, #24]
 8022a16:	4650      	mov	r0, sl
 8022a18:	f7f6 f856 	bl	8018ac8 <GUI__CompactPixelIndices>
 8022a1c:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8022a20:	2300      	movs	r3, #0
 8022a22:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8022a26:	69a2      	ldr	r2, [r4, #24]
 8022a28:	f04f 0c01 	mov.w	ip, #1
 8022a2c:	f8cd a00c 	str.w	sl, [sp, #12]
 8022a30:	4641      	mov	r1, r8
 8022a32:	9305      	str	r3, [sp, #20]
 8022a34:	4648      	mov	r0, r9
 8022a36:	9304      	str	r3, [sp, #16]
 8022a38:	68e3      	ldr	r3, [r4, #12]
 8022a3a:	f8cd b008 	str.w	fp, [sp, #8]
 8022a3e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8022a42:	9201      	str	r2, [sp, #4]
 8022a44:	f8cd c000 	str.w	ip, [sp]
 8022a48:	4642      	mov	r2, r8
 8022a4a:	f8de 8004 	ldr.w	r8, [lr, #4]
 8022a4e:	47c0      	blx	r8
 8022a50:	6862      	ldr	r2, [r4, #4]
 8022a52:	6017      	str	r7, [r2, #0]
 8022a54:	2301      	movs	r3, #1
 8022a56:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 8022a5a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8022a5e:	6062      	str	r2, [r4, #4]
 8022a60:	62a6      	str	r6, [r4, #40]	; 0x28
 8022a62:	62e5      	str	r5, [r4, #44]	; 0x2c
 8022a64:	60e3      	str	r3, [r4, #12]
 8022a66:	6226      	str	r6, [r4, #32]
 8022a68:	6265      	str	r5, [r4, #36]	; 0x24
 8022a6a:	b007      	add	sp, #28
 8022a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a70:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 8022a74:	6a22      	ldr	r2, [r4, #32]
 8022a76:	440a      	add	r2, r1
 8022a78:	4282      	cmp	r2, r0
 8022a7a:	d1b3      	bne.n	80229e4 <_SetBkIndexBuffered+0x14>
 8022a7c:	6862      	ldr	r2, [r4, #4]
 8022a7e:	68e1      	ldr	r1, [r4, #12]
 8022a80:	6017      	str	r7, [r2, #0]
 8022a82:	f994 0030 	ldrsb.w	r0, [r4, #48]	; 0x30
 8022a86:	1c4b      	adds	r3, r1, #1
 8022a88:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8022a8c:	6062      	str	r2, [r4, #4]
 8022a8e:	2900      	cmp	r1, #0
 8022a90:	d1e8      	bne.n	8022a64 <_SetBkIndexBuffered+0x94>
 8022a92:	e7e5      	b.n	8022a60 <_SetBkIndexBuffered+0x90>
 8022a94:	f8d4 a000 	ldr.w	sl, [r4]
 8022a98:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8022a9c:	4652      	mov	r2, sl
 8022a9e:	e7b3      	b.n	8022a08 <_SetBkIndexBuffered+0x38>

08022aa0 <_ReleaseBuffer.isra.7>:
 8022aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aa2:	b089      	sub	sp, #36	; 0x24
 8022aa4:	460c      	mov	r4, r1
 8022aa6:	9107      	str	r1, [sp, #28]
 8022aa8:	68c9      	ldr	r1, [r1, #12]
 8022aaa:	2900      	cmp	r1, #0
 8022aac:	d02c      	beq.n	8022b08 <_ReleaseBuffer.isra.7+0x68>
 8022aae:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8022ab2:	2b01      	cmp	r3, #1
 8022ab4:	d031      	beq.n	8022b1a <_ReleaseBuffer.isra.7+0x7a>
 8022ab6:	69e5      	ldr	r5, [r4, #28]
 8022ab8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8022abc:	6823      	ldr	r3, [r4, #0]
 8022abe:	442a      	add	r2, r5
 8022ac0:	6865      	ldr	r5, [r4, #4]
 8022ac2:	6a27      	ldr	r7, [r4, #32]
 8022ac4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022ac8:	3504      	adds	r5, #4
 8022aca:	6063      	str	r3, [r4, #4]
 8022acc:	6806      	ldr	r6, [r0, #0]
 8022ace:	2e00      	cmp	r6, #0
 8022ad0:	d02a      	beq.n	8022b28 <_ReleaseBuffer.isra.7+0x88>
 8022ad2:	69a2      	ldr	r2, [r4, #24]
 8022ad4:	4628      	mov	r0, r5
 8022ad6:	f7f5 fff7 	bl	8018ac8 <GUI__CompactPixelIndices>
 8022ada:	2000      	movs	r0, #0
 8022adc:	68e3      	ldr	r3, [r4, #12]
 8022ade:	4639      	mov	r1, r7
 8022ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8022ae2:	f04f 0e01 	mov.w	lr, #1
 8022ae6:	68f7      	ldr	r7, [r6, #12]
 8022ae8:	9005      	str	r0, [sp, #20]
 8022aea:	9004      	str	r0, [sp, #16]
 8022aec:	4630      	mov	r0, r6
 8022aee:	9503      	str	r5, [sp, #12]
 8022af0:	6965      	ldr	r5, [r4, #20]
 8022af2:	9502      	str	r5, [sp, #8]
 8022af4:	69a5      	ldr	r5, [r4, #24]
 8022af6:	f8cd e000 	str.w	lr, [sp]
 8022afa:	9501      	str	r5, [sp, #4]
 8022afc:	687d      	ldr	r5, [r7, #4]
 8022afe:	47a8      	blx	r5
 8022b00:	9b07      	ldr	r3, [sp, #28]
 8022b02:	2200      	movs	r2, #0
 8022b04:	60e2      	str	r2, [r4, #12]
 8022b06:	461c      	mov	r4, r3
 8022b08:	68a4      	ldr	r4, [r4, #8]
 8022b0a:	a807      	add	r0, sp, #28
 8022b0c:	f7ef fefe 	bl	801290c <GUI_ALLOC_UnlockH>
 8022b10:	4620      	mov	r0, r4
 8022b12:	f7f0 f87f 	bl	8012c14 <GUI_ALLOC_Free>
 8022b16:	b009      	add	sp, #36	; 0x24
 8022b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b1a:	6825      	ldr	r5, [r4, #0]
 8022b1c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8022b1e:	462b      	mov	r3, r5
 8022b20:	6063      	str	r3, [r4, #4]
 8022b22:	6806      	ldr	r6, [r0, #0]
 8022b24:	2e00      	cmp	r6, #0
 8022b26:	d1d4      	bne.n	8022ad2 <_ReleaseBuffer.isra.7+0x32>
 8022b28:	4623      	mov	r3, r4
 8022b2a:	e7ea      	b.n	8022b02 <_ReleaseBuffer.isra.7+0x62>

08022b2c <GUI_SPRITE_SetPosition>:
 8022b2c:	b900      	cbnz	r0, 8022b30 <GUI_SPRITE_SetPosition+0x4>
 8022b2e:	4770      	bx	lr
 8022b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b34:	4604      	mov	r4, r0
 8022b36:	b0ab      	sub	sp, #172	; 0xac
 8022b38:	460d      	mov	r5, r1
 8022b3a:	4616      	mov	r6, r2
 8022b3c:	921c      	str	r2, [sp, #112]	; 0x70
 8022b3e:	911b      	str	r1, [sp, #108]	; 0x6c
 8022b40:	f7f5 f8fa 	bl	8017d38 <GUI_Lock>
 8022b44:	4620      	mov	r0, r4
 8022b46:	f7ef fecd 	bl	80128e4 <GUI_ALLOC_LockH>
 8022b4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8022b4e:	6804      	ldr	r4, [r0, #0]
 8022b50:	429d      	cmp	r5, r3
 8022b52:	9027      	str	r0, [sp, #156]	; 0x9c
 8022b54:	9411      	str	r4, [sp, #68]	; 0x44
 8022b56:	f000 815a 	beq.w	8022e0e <GUI_SPRITE_SetPosition+0x2e2>
 8022b5a:	2000      	movs	r0, #0
 8022b5c:	f7f9 ff0c 	bl	801c978 <GUI_MEMDEV_Select>
 8022b60:	4bae      	ldr	r3, [pc, #696]	; (8022e1c <GUI_SPRITE_SetPosition+0x2f0>)
 8022b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	6992      	ldr	r2, [r2, #24]
 8022b68:	7c59      	ldrb	r1, [r3, #17]
 8022b6a:	901f      	str	r0, [sp, #124]	; 0x7c
 8022b6c:	4608      	mov	r0, r1
 8022b6e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8022b70:	9219      	str	r2, [sp, #100]	; 0x64
 8022b72:	4282      	cmp	r2, r0
 8022b74:	9120      	str	r1, [sp, #128]	; 0x80
 8022b76:	bf18      	it	ne
 8022b78:	745a      	strbne	r2, [r3, #17]
 8022b7a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8022b7e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8022b82:	4619      	mov	r1, r3
 8022b84:	9307      	str	r3, [sp, #28]
 8022b86:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8022b8a:	4610      	mov	r0, r2
 8022b8c:	9212      	str	r2, [sp, #72]	; 0x48
 8022b8e:	1a5b      	subs	r3, r3, r1
 8022b90:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8022b94:	461c      	mov	r4, r3
 8022b96:	1a12      	subs	r2, r2, r0
 8022b98:	9308      	str	r3, [sp, #32]
 8022b9a:	4616      	mov	r6, r2
 8022b9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8022b9e:	4622      	mov	r2, r4
 8022ba0:	8a2b      	ldrh	r3, [r5, #16]
 8022ba2:	3201      	adds	r2, #1
 8022ba4:	079b      	lsls	r3, r3, #30
 8022ba6:	921a      	str	r2, [sp, #104]	; 0x68
 8022ba8:	4632      	mov	r2, r6
 8022baa:	f102 0201 	add.w	r2, r2, #1
 8022bae:	921d      	str	r2, [sp, #116]	; 0x74
 8022bb0:	f140 810e 	bpl.w	8022dd0 <GUI_SPRITE_SetPosition+0x2a4>
 8022bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022bb6:	696a      	ldr	r2, [r5, #20]
 8022bb8:	1a5b      	subs	r3, r3, r1
 8022bba:	9203      	str	r2, [sp, #12]
 8022bbc:	2b00      	cmp	r3, #0
 8022bbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022bc0:	9314      	str	r3, [sp, #80]	; 0x50
 8022bc2:	eba2 0400 	sub.w	r4, r2, r0
 8022bc6:	f340 81a7 	ble.w	8022f18 <GUI_SPRITE_SetPosition+0x3ec>
 8022bca:	9309      	str	r3, [sp, #36]	; 0x24
 8022bcc:	f04f 0b01 	mov.w	fp, #1
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8022bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8022bd8:	2c00      	cmp	r4, #0
 8022bda:	f340 81a8 	ble.w	8022f2e <GUI_SPRITE_SetPosition+0x402>
 8022bde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022be0:	f04f 0a00 	mov.w	sl, #0
 8022be4:	9417      	str	r4, [sp, #92]	; 0x5c
 8022be6:	9316      	str	r3, [sp, #88]	; 0x58
 8022be8:	2301      	movs	r3, #1
 8022bea:	9315      	str	r3, [sp, #84]	; 0x54
 8022bec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022bee:	4b8c      	ldr	r3, [pc, #560]	; (8022e20 <GUI_SPRITE_SetPosition+0x2f4>)
 8022bf0:	69b0      	ldr	r0, [r6, #24]
 8022bf2:	561b      	ldrsb	r3, [r3, r0]
 8022bf4:	2b01      	cmp	r3, #1
 8022bf6:	f340 8189 	ble.w	8022f0c <GUI_SPRITE_SetPosition+0x3e0>
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 8022c00:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8022c04:	f7f7 fc26 	bl	801a454 <LCD_GetXSizeEx>
 8022c08:	1e43      	subs	r3, r0, #1
 8022c0a:	69b0      	ldr	r0, [r6, #24]
 8022c0c:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 8022c10:	f7f7 fc30 	bl	801a474 <LCD_GetYSizeEx>
 8022c14:	3801      	subs	r0, #1
 8022c16:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 8022c1a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022c1c:	465a      	mov	r2, fp
 8022c1e:	f100 0114 	add.w	r1, r0, #20
 8022c22:	f7ff fe7b 	bl	802291c <_CreateBuffer.isra.4>
 8022c26:	9021      	str	r0, [sp, #132]	; 0x84
 8022c28:	2800      	cmp	r0, #0
 8022c2a:	f000 80d0 	beq.w	8022dce <GUI_SPRITE_SetPosition+0x2a2>
 8022c2e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022c30:	465a      	mov	r2, fp
 8022c32:	f100 0114 	add.w	r1, r0, #20
 8022c36:	f7ff fe71 	bl	802291c <_CreateBuffer.isra.4>
 8022c3a:	9023      	str	r0, [sp, #140]	; 0x8c
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	f000 80c1 	beq.w	8022dc4 <GUI_SPRITE_SetPosition+0x298>
 8022c42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022c44:	68d8      	ldr	r0, [r3, #12]
 8022c46:	2800      	cmp	r0, #0
 8022c48:	f040 8181 	bne.w	8022f4e <GUI_SPRITE_SetPosition+0x422>
 8022c4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022c4e:	4552      	cmp	r2, sl
 8022c50:	f000 80b4 	beq.w	8022dbc <GUI_SPRITE_SetPosition+0x290>
 8022c54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022c56:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022c58:	009a      	lsls	r2, r3, #2
 8022c5a:	f8cd 9010 	str.w	r9, [sp, #16]
 8022c5e:	fb0a 1303 	mla	r3, sl, r3, r1
 8022c62:	ebc4 010a 	rsb	r1, r4, sl
 8022c66:	46d9      	mov	r9, fp
 8022c68:	9022      	str	r0, [sp, #136]	; 0x88
 8022c6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022c6e:	910d      	str	r1, [sp, #52]	; 0x34
 8022c70:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022c72:	930e      	str	r3, [sp, #56]	; 0x38
 8022c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022c76:	fb01 f202 	mul.w	r2, r1, r2
 8022c7a:	4423      	add	r3, r4
 8022c7c:	921e      	str	r2, [sp, #120]	; 0x78
 8022c7e:	9318      	str	r3, [sp, #96]	; 0x60
 8022c80:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8022c84:	46d3      	mov	fp, sl
 8022c86:	9305      	str	r3, [sp, #20]
 8022c88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022c8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022c8c:	455b      	cmp	r3, fp
 8022c8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022c90:	bfcc      	ite	gt
 8022c92:	2300      	movgt	r3, #0
 8022c94:	2301      	movle	r3, #1
 8022c96:	455a      	cmp	r2, fp
 8022c98:	bfb8      	it	lt
 8022c9a:	2300      	movlt	r3, #0
 8022c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8022c9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022ca0:	445b      	add	r3, fp
 8022ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ca4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022ca6:	445b      	add	r3, fp
 8022ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8022caa:	9b04      	ldr	r3, [sp, #16]
 8022cac:	461a      	mov	r2, r3
 8022cae:	42a2      	cmp	r2, r4
 8022cb0:	d075      	beq.n	8022d9e <GUI_SPRITE_SetPosition+0x272>
 8022cb2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022cb4:	9b07      	ldr	r3, [sp, #28]
 8022cb6:	ebc0 0a04 	rsb	sl, r0, r4
 8022cba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022cbc:	4403      	add	r3, r0
 8022cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8022cc0:	465a      	mov	r2, fp
 8022cc2:	4621      	mov	r1, r4
 8022cc4:	9803      	ldr	r0, [sp, #12]
 8022cc6:	f7f0 fcd1 	bl	801366c <GUI_GetBitmapPixelIndex>
 8022cca:	0e03      	lsrs	r3, r0, #24
 8022ccc:	4606      	mov	r6, r0
 8022cce:	d05f      	beq.n	8022d90 <GUI_SPRITE_SetPosition+0x264>
 8022cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cd2:	9a08      	ldr	r2, [sp, #32]
 8022cd4:	42a3      	cmp	r3, r4
 8022cd6:	9907      	ldr	r1, [sp, #28]
 8022cd8:	bfcc      	ite	gt
 8022cda:	2300      	movgt	r3, #0
 8022cdc:	2301      	movle	r3, #1
 8022cde:	42a2      	cmp	r2, r4
 8022ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ce2:	4421      	add	r1, r4
 8022ce4:	eb02 0704 	add.w	r7, r2, r4
 8022ce8:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8022cec:	bfb8      	it	lt
 8022cee:	2300      	movlt	r3, #0
 8022cf0:	9106      	str	r1, [sp, #24]
 8022cf2:	42ba      	cmp	r2, r7
 8022cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022cf6:	ea03 0301 	and.w	r3, r3, r1
 8022cfa:	dc0d      	bgt.n	8022d18 <GUI_SPRITE_SetPosition+0x1ec>
 8022cfc:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8022d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022d02:	4282      	cmp	r2, r0
 8022d04:	dc08      	bgt.n	8022d18 <GUI_SPRITE_SetPosition+0x1ec>
 8022d06:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8022d0a:	42ba      	cmp	r2, r7
 8022d0c:	db04      	blt.n	8022d18 <GUI_SPRITE_SetPosition+0x1ec>
 8022d0e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8022d12:	4282      	cmp	r2, r0
 8022d14:	f280 80a9 	bge.w	8022e6a <GUI_SPRITE_SetPosition+0x33e>
 8022d18:	f04f 0800 	mov.w	r8, #0
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	f000 8085 	beq.w	8022e2c <GUI_SPRITE_SetPosition+0x300>
 8022d22:	f1ba 0f00 	cmp.w	sl, #0
 8022d26:	db09      	blt.n	8022d3c <GUI_SPRITE_SetPosition+0x210>
 8022d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	db06      	blt.n	8022d3c <GUI_SPRITE_SetPosition+0x210>
 8022d2e:	461a      	mov	r2, r3
 8022d30:	4651      	mov	r1, sl
 8022d32:	9803      	ldr	r0, [sp, #12]
 8022d34:	f7f0 fc9a 	bl	801366c <GUI_GetBitmapPixelIndex>
 8022d38:	0e03      	lsrs	r3, r0, #24
 8022d3a:	d077      	beq.n	8022e2c <GUI_SPRITE_SetPosition+0x300>
 8022d3c:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8022d40:	429f      	cmp	r7, r3
 8022d42:	db23      	blt.n	8022d8c <GUI_SPRITE_SetPosition+0x260>
 8022d44:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 8022d48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022d4a:	4283      	cmp	r3, r0
 8022d4c:	dc1e      	bgt.n	8022d8c <GUI_SPRITE_SetPosition+0x260>
 8022d4e:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8022d52:	42bb      	cmp	r3, r7
 8022d54:	db1a      	blt.n	8022d8c <GUI_SPRITE_SetPosition+0x260>
 8022d56:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 8022d5a:	4283      	cmp	r3, r0
 8022d5c:	db16      	blt.n	8022d8c <GUI_SPRITE_SetPosition+0x260>
 8022d5e:	4630      	mov	r0, r6
 8022d60:	4b30      	ldr	r3, [pc, #192]	; (8022e24 <GUI_SPRITE_SetPosition+0x2f8>)
 8022d62:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022d64:	22ff      	movs	r2, #255	; 0xff
 8022d66:	681b      	ldr	r3, [r3, #0]
 8022d68:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 8022d6c:	4798      	blx	r3
 8022d6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022d70:	4b2d      	ldr	r3, [pc, #180]	; (8022e28 <GUI_SPRITE_SetPosition+0x2fc>)
 8022d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022d76:	691b      	ldr	r3, [r3, #16]
 8022d78:	681b      	ldr	r3, [r3, #0]
 8022d7a:	4798      	blx	r3
 8022d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d7e:	4602      	mov	r2, r0
 8022d80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022d82:	9300      	str	r3, [sp, #0]
 8022d84:	4638      	mov	r0, r7
 8022d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d88:	f7ff fe22 	bl	80229d0 <_SetBkIndexBuffered>
 8022d8c:	f8c5 8020 	str.w	r8, [r5, #32]
 8022d90:	9b05      	ldr	r3, [sp, #20]
 8022d92:	444c      	add	r4, r9
 8022d94:	44ca      	add	sl, r9
 8022d96:	441d      	add	r5, r3
 8022d98:	9b04      	ldr	r3, [sp, #16]
 8022d9a:	42a3      	cmp	r3, r4
 8022d9c:	d190      	bne.n	8022cc0 <GUI_SPRITE_SetPosition+0x194>
 8022d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022da0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8022da2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022da4:	440b      	add	r3, r1
 8022da6:	4493      	add	fp, r2
 8022da8:	930e      	str	r3, [sp, #56]	; 0x38
 8022daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022dac:	4619      	mov	r1, r3
 8022dae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022db0:	4411      	add	r1, r2
 8022db2:	455b      	cmp	r3, fp
 8022db4:	910d      	str	r1, [sp, #52]	; 0x34
 8022db6:	f47f af67 	bne.w	8022c88 <GUI_SPRITE_SetPosition+0x15c>
 8022dba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022dbc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022dbe:	6818      	ldr	r0, [r3, #0]
 8022dc0:	f7ff fe6e 	bl	8022aa0 <_ReleaseBuffer.isra.7>
 8022dc4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022dc6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8022dc8:	6818      	ldr	r0, [r3, #0]
 8022dca:	f7ff fe69 	bl	8022aa0 <_ReleaseBuffer.isra.7>
 8022dce:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8022dd0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8022dd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022dd4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022dd6:	440b      	add	r3, r1
 8022dd8:	80a9      	strh	r1, [r5, #4]
 8022dda:	1e42      	subs	r2, r0, #1
 8022ddc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8022dde:	3b01      	subs	r3, #1
 8022de0:	80e8      	strh	r0, [r5, #6]
 8022de2:	440a      	add	r2, r1
 8022de4:	812b      	strh	r3, [r5, #8]
 8022de6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022de8:	816a      	strh	r2, [r5, #10]
 8022dea:	4619      	mov	r1, r3
 8022dec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022dee:	4291      	cmp	r1, r2
 8022df0:	d002      	beq.n	8022df8 <GUI_SPRITE_SetPosition+0x2cc>
 8022df2:	4b0a      	ldr	r3, [pc, #40]	; (8022e1c <GUI_SPRITE_SetPosition+0x2f0>)
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	745a      	strb	r2, [r3, #17]
 8022df8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022dfa:	f7f9 fdbd 	bl	801c978 <GUI_MEMDEV_Select>
 8022dfe:	a827      	add	r0, sp, #156	; 0x9c
 8022e00:	f7ef fd84 	bl	801290c <GUI_ALLOC_UnlockH>
 8022e04:	f7f4 ff8e 	bl	8017d24 <GUI_Unlock>
 8022e08:	b02b      	add	sp, #172	; 0xac
 8022e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e0e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022e12:	429e      	cmp	r6, r3
 8022e14:	f47f aea1 	bne.w	8022b5a <GUI_SPRITE_SetPosition+0x2e>
 8022e18:	e7f1      	b.n	8022dfe <GUI_SPRITE_SetPosition+0x2d2>
 8022e1a:	bf00      	nop
 8022e1c:	20000018 	.word	0x20000018
 8022e20:	20046780 	.word	0x20046780
 8022e24:	20000044 	.word	0x20000044
 8022e28:	200467d0 	.word	0x200467d0
 8022e2c:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8022e30:	9a06      	ldr	r2, [sp, #24]
 8022e32:	4293      	cmp	r3, r2
 8022e34:	dc84      	bgt.n	8022d40 <GUI_SPRITE_SetPosition+0x214>
 8022e36:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8022e3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022e3c:	4282      	cmp	r2, r0
 8022e3e:	f73f af7f 	bgt.w	8022d40 <GUI_SPRITE_SetPosition+0x214>
 8022e42:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8022e46:	9906      	ldr	r1, [sp, #24]
 8022e48:	428a      	cmp	r2, r1
 8022e4a:	f6ff af79 	blt.w	8022d40 <GUI_SPRITE_SetPosition+0x214>
 8022e4e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8022e52:	4601      	mov	r1, r0
 8022e54:	4282      	cmp	r2, r0
 8022e56:	f6ff af73 	blt.w	8022d40 <GUI_SPRITE_SetPosition+0x214>
 8022e5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022e5c:	6a2a      	ldr	r2, [r5, #32]
 8022e5e:	9806      	ldr	r0, [sp, #24]
 8022e60:	9300      	str	r3, [sp, #0]
 8022e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e64:	f7ff fdb4 	bl	80229d0 <_SetBkIndexBuffered>
 8022e68:	e768      	b.n	8022d3c <GUI_SPRITE_SetPosition+0x210>
 8022e6a:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
 8022e6e:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8022e72:	42ba      	cmp	r2, r7
 8022e74:	dc2f      	bgt.n	8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022e76:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 8022e7a:	42b9      	cmp	r1, r7
 8022e7c:	db2b      	blt.n	8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022e7e:	f9b8 e006 	ldrsh.w	lr, [r8, #6]
 8022e82:	4601      	mov	r1, r0
 8022e84:	4586      	cmp	lr, r0
 8022e86:	dc26      	bgt.n	8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022e88:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
 8022e8c:	4288      	cmp	r0, r1
 8022e8e:	db22      	blt.n	8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022e90:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8022e94:	b1f8      	cbz	r0, 8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022e96:	9325      	str	r3, [sp, #148]	; 0x94
 8022e98:	1abb      	subs	r3, r7, r2
 8022e9a:	4619      	mov	r1, r3
 8022e9c:	9322      	str	r3, [sp, #136]	; 0x88
 8022e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ea0:	ebce 0303 	rsb	r3, lr, r3
 8022ea4:	461a      	mov	r2, r3
 8022ea6:	9324      	str	r3, [sp, #144]	; 0x90
 8022ea8:	f7f0 fbe0 	bl	801366c <GUI_GetBitmapPixelIndex>
 8022eac:	0e03      	lsrs	r3, r0, #24
 8022eae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022eb0:	d011      	beq.n	8022ed6 <GUI_SPRITE_SetPosition+0x3aa>
 8022eb2:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8022eb6:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
 8022eba:	1a52      	subs	r2, r2, r1
 8022ebc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022ebe:	fb02 1201 	mla	r2, r2, r1, r1
 8022ec2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8022ec4:	440a      	add	r2, r1
 8022ec6:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8022eca:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8022ece:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 8022ed2:	4690      	mov	r8, r2
 8022ed4:	e00f      	b.n	8022ef6 <GUI_SPRITE_SetPosition+0x3ca>
 8022ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022ed8:	6810      	ldr	r0, [r2, #0]
 8022eda:	2800      	cmp	r0, #0
 8022edc:	d033      	beq.n	8022f46 <GUI_SPRITE_SetPosition+0x41a>
 8022ede:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8022ee2:	4639      	mov	r1, r7
 8022ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022ee6:	f8de 8014 	ldr.w	r8, [lr, #20]
 8022eea:	9322      	str	r3, [sp, #136]	; 0x88
 8022eec:	47c0      	blx	r8
 8022eee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022ef0:	4680      	mov	r8, r0
 8022ef2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022ef6:	9324      	str	r3, [sp, #144]	; 0x90
 8022ef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022efa:	4b9a      	ldr	r3, [pc, #616]	; (8023164 <GUI_SPRITE_SetPosition+0x638>)
 8022efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022f00:	6912      	ldr	r2, [r2, #16]
 8022f02:	6852      	ldr	r2, [r2, #4]
 8022f04:	4790      	blx	r2
 8022f06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022f08:	9022      	str	r0, [sp, #136]	; 0x88
 8022f0a:	e707      	b.n	8022d1c <GUI_SPRITE_SetPosition+0x1f0>
 8022f0c:	68f3      	ldr	r3, [r6, #12]
 8022f0e:	4630      	mov	r0, r6
 8022f10:	a928      	add	r1, sp, #160	; 0xa0
 8022f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f14:	4798      	blx	r3
 8022f16:	e680      	b.n	8022c1a <GUI_SPRITE_SetPosition+0xee>
 8022f18:	2200      	movs	r2, #0
 8022f1a:	9b08      	ldr	r3, [sp, #32]
 8022f1c:	f04f 39ff 	mov.w	r9, #4294967295
 8022f20:	9209      	str	r2, [sp, #36]	; 0x24
 8022f22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022f24:	46cb      	mov	fp, r9
 8022f26:	9310      	str	r3, [sp, #64]	; 0x40
 8022f28:	4413      	add	r3, r2
 8022f2a:	9308      	str	r3, [sp, #32]
 8022f2c:	e654      	b.n	8022bd8 <GUI_SPRITE_SetPosition+0xac>
 8022f2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022f30:	2200      	movs	r2, #0
 8022f32:	f04f 33ff 	mov.w	r3, #4294967295
 8022f36:	9217      	str	r2, [sp, #92]	; 0x5c
 8022f38:	460a      	mov	r2, r1
 8022f3a:	9316      	str	r3, [sp, #88]	; 0x58
 8022f3c:	468a      	mov	sl, r1
 8022f3e:	4422      	add	r2, r4
 8022f40:	9315      	str	r3, [sp, #84]	; 0x54
 8022f42:	9213      	str	r2, [sp, #76]	; 0x4c
 8022f44:	e652      	b.n	8022bec <GUI_SPRITE_SetPosition+0xc0>
 8022f46:	4680      	mov	r8, r0
 8022f48:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8022f4c:	e7d3      	b.n	8022ef6 <GUI_SPRITE_SetPosition+0x3ca>
 8022f4e:	f7ef fcc9 	bl	80128e4 <GUI_ALLOC_LockH>
 8022f52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022f54:	9026      	str	r0, [sp, #152]	; 0x98
 8022f56:	4553      	cmp	r3, sl
 8022f58:	f000 8099 	beq.w	802308e <GUI_SPRITE_SetPosition+0x562>
 8022f5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022f5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022f60:	009a      	lsls	r2, r3, #2
 8022f62:	f8cd 9010 	str.w	r9, [sp, #16]
 8022f66:	fb0a 1303 	mla	r3, sl, r3, r1
 8022f6a:	ebc4 010a 	rsb	r1, r4, sl
 8022f6e:	46d9      	mov	r9, fp
 8022f70:	910d      	str	r1, [sp, #52]	; 0x34
 8022f72:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022f76:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022f78:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f7a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8022f7e:	4421      	add	r1, r4
 8022f80:	46d3      	mov	fp, sl
 8022f82:	9305      	str	r3, [sp, #20]
 8022f84:	9118      	str	r1, [sp, #96]	; 0x60
 8022f86:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022f88:	9b07      	ldr	r3, [sp, #28]
 8022f8a:	fb01 f202 	mul.w	r2, r1, r2
 8022f8e:	9222      	str	r2, [sp, #136]	; 0x88
 8022f90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022f92:	4413      	add	r3, r2
 8022f94:	930c      	str	r3, [sp, #48]	; 0x30
 8022f96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022f98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022f9a:	455b      	cmp	r3, fp
 8022f9c:	bfcc      	ite	gt
 8022f9e:	2300      	movgt	r3, #0
 8022fa0:	2301      	movle	r3, #1
 8022fa2:	455a      	cmp	r2, fp
 8022fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022fa6:	bfb8      	it	lt
 8022fa8:	2300      	movlt	r3, #0
 8022faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8022fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022fae:	445b      	add	r3, fp
 8022fb0:	931e      	str	r3, [sp, #120]	; 0x78
 8022fb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022fb4:	445b      	add	r3, fp
 8022fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8022fb8:	9b04      	ldr	r3, [sp, #16]
 8022fba:	4293      	cmp	r3, r2
 8022fbc:	d05a      	beq.n	8023074 <GUI_SPRITE_SetPosition+0x548>
 8022fbe:	4614      	mov	r4, r2
 8022fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022fc4:	ebc2 0a04 	rsb	sl, r2, r4
 8022fc8:	465a      	mov	r2, fp
 8022fca:	4621      	mov	r1, r4
 8022fcc:	9803      	ldr	r0, [sp, #12]
 8022fce:	f7f0 fb4d 	bl	801366c <GUI_GetBitmapPixelIndex>
 8022fd2:	4606      	mov	r6, r0
 8022fd4:	2800      	cmp	r0, #0
 8022fd6:	d046      	beq.n	8023066 <GUI_SPRITE_SetPosition+0x53a>
 8022fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fda:	9a08      	ldr	r2, [sp, #32]
 8022fdc:	42a3      	cmp	r3, r4
 8022fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022fe0:	bfcc      	ite	gt
 8022fe2:	2300      	movgt	r3, #0
 8022fe4:	2301      	movle	r3, #1
 8022fe6:	42a2      	cmp	r2, r4
 8022fe8:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8022fec:	bfb8      	it	lt
 8022fee:	2300      	movlt	r3, #0
 8022ff0:	461f      	mov	r7, r3
 8022ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ff4:	eb03 0804 	add.w	r8, r3, r4
 8022ff8:	9b07      	ldr	r3, [sp, #28]
 8022ffa:	400f      	ands	r7, r1
 8022ffc:	4542      	cmp	r2, r8
 8022ffe:	4423      	add	r3, r4
 8023000:	dc0c      	bgt.n	802301c <GUI_SPRITE_SetPosition+0x4f0>
 8023002:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8023006:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023008:	4282      	cmp	r2, r0
 802300a:	dc07      	bgt.n	802301c <GUI_SPRITE_SetPosition+0x4f0>
 802300c:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8023010:	4542      	cmp	r2, r8
 8023012:	db03      	blt.n	802301c <GUI_SPRITE_SetPosition+0x4f0>
 8023014:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8023018:	4282      	cmp	r2, r0
 802301a:	da57      	bge.n	80230cc <GUI_SPRITE_SetPosition+0x5a0>
 802301c:	2200      	movs	r2, #0
 802301e:	9206      	str	r2, [sp, #24]
 8023020:	2f00      	cmp	r7, #0
 8023022:	d039      	beq.n	8023098 <GUI_SPRITE_SetPosition+0x56c>
 8023024:	f1ba 0f00 	cmp.w	sl, #0
 8023028:	930e      	str	r3, [sp, #56]	; 0x38
 802302a:	db09      	blt.n	8023040 <GUI_SPRITE_SetPosition+0x514>
 802302c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802302e:	2b00      	cmp	r3, #0
 8023030:	db06      	blt.n	8023040 <GUI_SPRITE_SetPosition+0x514>
 8023032:	461a      	mov	r2, r3
 8023034:	4651      	mov	r1, sl
 8023036:	9803      	ldr	r0, [sp, #12]
 8023038:	f7f0 fb18 	bl	801366c <GUI_GetBitmapPixelIndex>
 802303c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802303e:	b358      	cbz	r0, 8023098 <GUI_SPRITE_SetPosition+0x56c>
 8023040:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8023044:	4590      	cmp	r8, r2
 8023046:	db0c      	blt.n	8023062 <GUI_SPRITE_SetPosition+0x536>
 8023048:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 802304c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802304e:	428b      	cmp	r3, r1
 8023050:	dc07      	bgt.n	8023062 <GUI_SPRITE_SetPosition+0x536>
 8023052:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8023056:	4543      	cmp	r3, r8
 8023058:	db03      	blt.n	8023062 <GUI_SPRITE_SetPosition+0x536>
 802305a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 802305e:	428b      	cmp	r3, r1
 8023060:	da57      	bge.n	8023112 <GUI_SPRITE_SetPosition+0x5e6>
 8023062:	9b06      	ldr	r3, [sp, #24]
 8023064:	622b      	str	r3, [r5, #32]
 8023066:	9b05      	ldr	r3, [sp, #20]
 8023068:	444c      	add	r4, r9
 802306a:	44ca      	add	sl, r9
 802306c:	441d      	add	r5, r3
 802306e:	9b04      	ldr	r3, [sp, #16]
 8023070:	429c      	cmp	r4, r3
 8023072:	d1a9      	bne.n	8022fc8 <GUI_SPRITE_SetPosition+0x49c>
 8023074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023076:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023078:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802307a:	440b      	add	r3, r1
 802307c:	4493      	add	fp, r2
 802307e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023082:	4619      	mov	r1, r3
 8023084:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023086:	4411      	add	r1, r2
 8023088:	459b      	cmp	fp, r3
 802308a:	910d      	str	r1, [sp, #52]	; 0x34
 802308c:	d183      	bne.n	8022f96 <GUI_SPRITE_SetPosition+0x46a>
 802308e:	a826      	add	r0, sp, #152	; 0x98
 8023090:	f7ef fc3c 	bl	801290c <GUI_ALLOC_UnlockH>
 8023094:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023096:	e691      	b.n	8022dbc <GUI_SPRITE_SetPosition+0x290>
 8023098:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 802309c:	429a      	cmp	r2, r3
 802309e:	dcd1      	bgt.n	8023044 <GUI_SPRITE_SetPosition+0x518>
 80230a0:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 80230a4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80230a6:	42b9      	cmp	r1, r7
 80230a8:	dccc      	bgt.n	8023044 <GUI_SPRITE_SetPosition+0x518>
 80230aa:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 80230ae:	4299      	cmp	r1, r3
 80230b0:	dbc8      	blt.n	8023044 <GUI_SPRITE_SetPosition+0x518>
 80230b2:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
 80230b6:	42b9      	cmp	r1, r7
 80230b8:	dbc4      	blt.n	8023044 <GUI_SPRITE_SetPosition+0x518>
 80230ba:	4618      	mov	r0, r3
 80230bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80230be:	6a2a      	ldr	r2, [r5, #32]
 80230c0:	4639      	mov	r1, r7
 80230c2:	9300      	str	r3, [sp, #0]
 80230c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80230c6:	f7ff fc83 	bl	80229d0 <_SetBkIndexBuffered>
 80230ca:	e7b9      	b.n	8023040 <GUI_SPRITE_SetPosition+0x514>
 80230cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80230ce:	9206      	str	r2, [sp, #24]
 80230d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80230d4:	4542      	cmp	r2, r8
 80230d6:	dc0d      	bgt.n	80230f4 <GUI_SPRITE_SetPosition+0x5c8>
 80230d8:	9806      	ldr	r0, [sp, #24]
 80230da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80230de:	4541      	cmp	r1, r8
 80230e0:	db08      	blt.n	80230f4 <GUI_SPRITE_SetPosition+0x5c8>
 80230e2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80230e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80230e8:	458e      	cmp	lr, r1
 80230ea:	dc03      	bgt.n	80230f4 <GUI_SPRITE_SetPosition+0x5c8>
 80230ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80230f0:	4288      	cmp	r0, r1
 80230f2:	da18      	bge.n	8023126 <GUI_SPRITE_SetPosition+0x5fa>
 80230f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80230f6:	6810      	ldr	r0, [r2, #0]
 80230f8:	2800      	cmp	r0, #0
 80230fa:	d08f      	beq.n	802301c <GUI_SPRITE_SetPosition+0x4f0>
 80230fc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8023100:	4641      	mov	r1, r8
 8023102:	930e      	str	r3, [sp, #56]	; 0x38
 8023104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023106:	f8de 3014 	ldr.w	r3, [lr, #20]
 802310a:	4798      	blx	r3
 802310c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802310e:	9006      	str	r0, [sp, #24]
 8023110:	e786      	b.n	8023020 <GUI_SPRITE_SetPosition+0x4f4>
 8023112:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023114:	4640      	mov	r0, r8
 8023116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023118:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802311c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802311e:	9600      	str	r6, [sp, #0]
 8023120:	f7ff fc56 	bl	80229d0 <_SetBkIndexBuffered>
 8023124:	e79d      	b.n	8023062 <GUI_SPRITE_SetPosition+0x536>
 8023126:	9325      	str	r3, [sp, #148]	; 0x94
 8023128:	ebc2 0308 	rsb	r3, r2, r8
 802312c:	ebce 0201 	rsb	r2, lr, r1
 8023130:	9906      	ldr	r1, [sp, #24]
 8023132:	930e      	str	r3, [sp, #56]	; 0x38
 8023134:	6948      	ldr	r0, [r1, #20]
 8023136:	4619      	mov	r1, r3
 8023138:	9224      	str	r2, [sp, #144]	; 0x90
 802313a:	f7f0 fa97 	bl	801366c <GUI_GetBitmapPixelIndex>
 802313e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023140:	2800      	cmp	r0, #0
 8023142:	d0d7      	beq.n	80230f4 <GUI_SPRITE_SetPosition+0x5c8>
 8023144:	9806      	ldr	r0, [sp, #24]
 8023146:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802314a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 802314e:	1a52      	subs	r2, r2, r1
 8023150:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023152:	fb02 1201 	mla	r2, r2, r1, r1
 8023156:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023158:	440a      	add	r2, r1
 802315a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802315e:	6a12      	ldr	r2, [r2, #32]
 8023160:	9206      	str	r2, [sp, #24]
 8023162:	e75d      	b.n	8023020 <GUI_SPRITE_SetPosition+0x4f4>
 8023164:	200467d0 	.word	0x200467d0

08023168 <GUI_TIMER__GetFirstTimer>:
 8023168:	4a0a      	ldr	r2, [pc, #40]	; (8023194 <GUI_TIMER__GetFirstTimer+0x2c>)
 802316a:	2300      	movs	r3, #0
 802316c:	b530      	push	{r4, r5, lr}
 802316e:	6814      	ldr	r4, [r2, #0]
 8023170:	b083      	sub	sp, #12
 8023172:	6003      	str	r3, [r0, #0]
 8023174:	b15c      	cbz	r4, 802318e <GUI_TIMER__GetFirstTimer+0x26>
 8023176:	4605      	mov	r5, r0
 8023178:	4620      	mov	r0, r4
 802317a:	f7ef fbb3 	bl	80128e4 <GUI_ALLOC_LockH>
 802317e:	ab02      	add	r3, sp, #8
 8023180:	6902      	ldr	r2, [r0, #16]
 8023182:	f843 0d04 	str.w	r0, [r3, #-4]!
 8023186:	4618      	mov	r0, r3
 8023188:	602a      	str	r2, [r5, #0]
 802318a:	f7ef fbbf 	bl	801290c <GUI_ALLOC_UnlockH>
 802318e:	4620      	mov	r0, r4
 8023190:	b003      	add	sp, #12
 8023192:	bd30      	pop	{r4, r5, pc}
 8023194:	200004e4 	.word	0x200004e4

08023198 <GUI_TIMER__GetNextTimerLin>:
 8023198:	2300      	movs	r3, #0
 802319a:	b570      	push	{r4, r5, r6, lr}
 802319c:	600b      	str	r3, [r1, #0]
 802319e:	b082      	sub	sp, #8
 80231a0:	b918      	cbnz	r0, 80231aa <GUI_TIMER__GetNextTimerLin+0x12>
 80231a2:	4604      	mov	r4, r0
 80231a4:	4620      	mov	r0, r4
 80231a6:	b002      	add	sp, #8
 80231a8:	bd70      	pop	{r4, r5, r6, pc}
 80231aa:	460d      	mov	r5, r1
 80231ac:	f7ef fb9a 	bl	80128e4 <GUI_ALLOC_LockH>
 80231b0:	6884      	ldr	r4, [r0, #8]
 80231b2:	ae01      	add	r6, sp, #4
 80231b4:	9001      	str	r0, [sp, #4]
 80231b6:	b92c      	cbnz	r4, 80231c4 <GUI_TIMER__GetNextTimerLin+0x2c>
 80231b8:	4630      	mov	r0, r6
 80231ba:	f7ef fba7 	bl	801290c <GUI_ALLOC_UnlockH>
 80231be:	4620      	mov	r0, r4
 80231c0:	b002      	add	sp, #8
 80231c2:	bd70      	pop	{r4, r5, r6, pc}
 80231c4:	4630      	mov	r0, r6
 80231c6:	f7ef fba1 	bl	801290c <GUI_ALLOC_UnlockH>
 80231ca:	4620      	mov	r0, r4
 80231cc:	f7ef fb8a 	bl	80128e4 <GUI_ALLOC_LockH>
 80231d0:	6903      	ldr	r3, [r0, #16]
 80231d2:	9001      	str	r0, [sp, #4]
 80231d4:	602b      	str	r3, [r5, #0]
 80231d6:	e7ef      	b.n	80231b8 <GUI_TIMER__GetNextTimerLin+0x20>

080231d8 <GUI_TIMER_Delete>:
 80231d8:	b900      	cbnz	r0, 80231dc <GUI_TIMER_Delete+0x4>
 80231da:	4770      	bx	lr
 80231dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231e0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80232a8 <GUI_TIMER_Delete+0xd0>
 80231e4:	b082      	sub	sp, #8
 80231e6:	4605      	mov	r5, r0
 80231e8:	f7f4 fda6 	bl	8017d38 <GUI_Lock>
 80231ec:	f8d8 4000 	ldr.w	r4, [r8]
 80231f0:	42a5      	cmp	r5, r4
 80231f2:	d044      	beq.n	802327e <GUI_TIMER_Delete+0xa6>
 80231f4:	466e      	mov	r6, sp
 80231f6:	b91c      	cbnz	r4, 8023200 <GUI_TIMER_Delete+0x28>
 80231f8:	e019      	b.n	802322e <GUI_TIMER_Delete+0x56>
 80231fa:	f7ef fb87 	bl	801290c <GUI_ALLOC_UnlockH>
 80231fe:	b1b4      	cbz	r4, 802322e <GUI_TIMER_Delete+0x56>
 8023200:	4620      	mov	r0, r4
 8023202:	f7ef fb6f 	bl	80128e4 <GUI_ALLOC_LockH>
 8023206:	4603      	mov	r3, r0
 8023208:	4630      	mov	r0, r6
 802320a:	689c      	ldr	r4, [r3, #8]
 802320c:	9300      	str	r3, [sp, #0]
 802320e:	42a5      	cmp	r5, r4
 8023210:	d1f3      	bne.n	80231fa <GUI_TIMER_Delete+0x22>
 8023212:	4628      	mov	r0, r5
 8023214:	f7ef fb66 	bl	80128e4 <GUI_ALLOC_LockH>
 8023218:	4603      	mov	r3, r0
 802321a:	9a00      	ldr	r2, [sp, #0]
 802321c:	a801      	add	r0, sp, #4
 802321e:	6899      	ldr	r1, [r3, #8]
 8023220:	9301      	str	r3, [sp, #4]
 8023222:	6091      	str	r1, [r2, #8]
 8023224:	f7ef fb72 	bl	801290c <GUI_ALLOC_UnlockH>
 8023228:	4630      	mov	r0, r6
 802322a:	f7ef fb6f 	bl	801290c <GUI_ALLOC_UnlockH>
 802322e:	4628      	mov	r0, r5
 8023230:	f7ef fb58 	bl	80128e4 <GUI_ALLOC_LockH>
 8023234:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8023238:	9000      	str	r0, [sp, #0]
 802323a:	42a5      	cmp	r5, r4
 802323c:	4b1a      	ldr	r3, [pc, #104]	; (80232a8 <GUI_TIMER_Delete+0xd0>)
 802323e:	d02c      	beq.n	802329a <GUI_TIMER_Delete+0xc2>
 8023240:	b194      	cbz	r4, 8023268 <GUI_TIMER_Delete+0x90>
 8023242:	af01      	add	r7, sp, #4
 8023244:	e002      	b.n	802324c <GUI_TIMER_Delete+0x74>
 8023246:	f7ef fb61 	bl	801290c <GUI_ALLOC_UnlockH>
 802324a:	b16c      	cbz	r4, 8023268 <GUI_TIMER_Delete+0x90>
 802324c:	4620      	mov	r0, r4
 802324e:	f7ef fb49 	bl	80128e4 <GUI_ALLOC_LockH>
 8023252:	4603      	mov	r3, r0
 8023254:	4638      	mov	r0, r7
 8023256:	685c      	ldr	r4, [r3, #4]
 8023258:	9301      	str	r3, [sp, #4]
 802325a:	42a5      	cmp	r5, r4
 802325c:	d1f3      	bne.n	8023246 <GUI_TIMER_Delete+0x6e>
 802325e:	9a00      	ldr	r2, [sp, #0]
 8023260:	6852      	ldr	r2, [r2, #4]
 8023262:	605a      	str	r2, [r3, #4]
 8023264:	f7ef fb52 	bl	801290c <GUI_ALLOC_UnlockH>
 8023268:	4630      	mov	r0, r6
 802326a:	f7ef fb4f 	bl	801290c <GUI_ALLOC_UnlockH>
 802326e:	4628      	mov	r0, r5
 8023270:	f7ef fcd0 	bl	8012c14 <GUI_ALLOC_Free>
 8023274:	f7f4 fd56 	bl	8017d24 <GUI_Unlock>
 8023278:	b002      	add	sp, #8
 802327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802327e:	af02      	add	r7, sp, #8
 8023280:	4628      	mov	r0, r5
 8023282:	f7ef fb2f 	bl	80128e4 <GUI_ALLOC_LockH>
 8023286:	6883      	ldr	r3, [r0, #8]
 8023288:	f847 0d04 	str.w	r0, [r7, #-4]!
 802328c:	4638      	mov	r0, r7
 802328e:	466e      	mov	r6, sp
 8023290:	f8c8 3000 	str.w	r3, [r8]
 8023294:	f7ef fb3a 	bl	801290c <GUI_ALLOC_UnlockH>
 8023298:	e7c9      	b.n	802322e <GUI_TIMER_Delete+0x56>
 802329a:	6842      	ldr	r2, [r0, #4]
 802329c:	4630      	mov	r0, r6
 802329e:	605a      	str	r2, [r3, #4]
 80232a0:	f7ef fb34 	bl	801290c <GUI_ALLOC_UnlockH>
 80232a4:	e7e3      	b.n	802326e <GUI_TIMER_Delete+0x96>
 80232a6:	bf00      	nop
 80232a8:	200004e4 	.word	0x200004e4

080232ac <GUI_TIMER_GetFlag>:
 80232ac:	b530      	push	{r4, r5, lr}
 80232ae:	b083      	sub	sp, #12
 80232b0:	b918      	cbnz	r0, 80232ba <GUI_TIMER_GetFlag+0xe>
 80232b2:	2401      	movs	r4, #1
 80232b4:	4620      	mov	r0, r4
 80232b6:	b003      	add	sp, #12
 80232b8:	bd30      	pop	{r4, r5, pc}
 80232ba:	4604      	mov	r4, r0
 80232bc:	460d      	mov	r5, r1
 80232be:	f7f4 fd3b 	bl	8017d38 <GUI_Lock>
 80232c2:	4620      	mov	r0, r4
 80232c4:	f7ef fb0e 	bl	80128e4 <GUI_ALLOC_LockH>
 80232c8:	8982      	ldrh	r2, [r0, #12]
 80232ca:	ab02      	add	r3, sp, #8
 80232cc:	422a      	tst	r2, r5
 80232ce:	f843 0d04 	str.w	r0, [r3, #-4]!
 80232d2:	4618      	mov	r0, r3
 80232d4:	bf14      	ite	ne
 80232d6:	2401      	movne	r4, #1
 80232d8:	2400      	moveq	r4, #0
 80232da:	f7ef fb17 	bl	801290c <GUI_ALLOC_UnlockH>
 80232de:	f7f4 fd21 	bl	8017d24 <GUI_Unlock>
 80232e2:	4620      	mov	r0, r4
 80232e4:	b003      	add	sp, #12
 80232e6:	bd30      	pop	{r4, r5, pc}

080232e8 <GUI__ManageCache>:
 80232e8:	4b3a      	ldr	r3, [pc, #232]	; (80233d4 <GUI__ManageCache+0xec>)
 80232ea:	681b      	ldr	r3, [r3, #0]
 80232ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232f0:	7c5d      	ldrb	r5, [r3, #17]
 80232f2:	b082      	sub	sp, #8
 80232f4:	2d01      	cmp	r5, #1
 80232f6:	dd03      	ble.n	8023300 <GUI__ManageCache+0x18>
 80232f8:	2001      	movs	r0, #1
 80232fa:	b002      	add	sp, #8
 80232fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023300:	4e35      	ldr	r6, [pc, #212]	; (80233d8 <GUI__ManageCache+0xf0>)
 8023302:	4604      	mov	r4, r0
 8023304:	6873      	ldr	r3, [r6, #4]
 8023306:	b113      	cbz	r3, 802330e <GUI__ManageCache+0x26>
 8023308:	4601      	mov	r1, r0
 802330a:	4628      	mov	r0, r5
 802330c:	4798      	blx	r3
 802330e:	2c01      	cmp	r4, #1
 8023310:	d027      	beq.n	8023362 <GUI__ManageCache+0x7a>
 8023312:	2c02      	cmp	r4, #2
 8023314:	d00f      	beq.n	8023336 <GUI__ManageCache+0x4e>
 8023316:	2c00      	cmp	r4, #0
 8023318:	d1ee      	bne.n	80232f8 <GUI__ManageCache+0x10>
 802331a:	00ac      	lsls	r4, r5, #2
 802331c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80233d8 <GUI__ManageCache+0xf0>
 8023320:	1937      	adds	r7, r6, r4
 8023322:	68bb      	ldr	r3, [r7, #8]
 8023324:	2b01      	cmp	r3, #1
 8023326:	d03a      	beq.n	802339e <GUI__ManageCache+0xb6>
 8023328:	2001      	movs	r0, #1
 802332a:	4426      	add	r6, r4
 802332c:	2b00      	cmp	r3, #0
 802332e:	bf18      	it	ne
 8023330:	3b01      	subne	r3, #1
 8023332:	60b3      	str	r3, [r6, #8]
 8023334:	e7e1      	b.n	80232fa <GUI__ManageCache+0x12>
 8023336:	4628      	mov	r0, r5
 8023338:	f7f0 fd34 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 802333c:	9001      	str	r0, [sp, #4]
 802333e:	2800      	cmp	r0, #0
 8023340:	d0da      	beq.n	80232f8 <GUI__ManageCache+0x10>
 8023342:	68c3      	ldr	r3, [r0, #12]
 8023344:	210d      	movs	r1, #13
 8023346:	a801      	add	r0, sp, #4
 8023348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802334a:	4798      	blx	r3
 802334c:	4604      	mov	r4, r0
 802334e:	2800      	cmp	r0, #0
 8023350:	d0d2      	beq.n	80232f8 <GUI__ManageCache+0x10>
 8023352:	6833      	ldr	r3, [r6, #0]
 8023354:	b103      	cbz	r3, 8023358 <GUI__ManageCache+0x70>
 8023356:	4798      	blx	r3
 8023358:	2102      	movs	r1, #2
 802335a:	9801      	ldr	r0, [sp, #4]
 802335c:	47a0      	blx	r4
 802335e:	2000      	movs	r0, #0
 8023360:	e7cb      	b.n	80232fa <GUI__ManageCache+0x12>
 8023362:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8023366:	68b7      	ldr	r7, [r6, #8]
 8023368:	b11f      	cbz	r7, 8023372 <GUI__ManageCache+0x8a>
 802336a:	3701      	adds	r7, #1
 802336c:	4620      	mov	r0, r4
 802336e:	60b7      	str	r7, [r6, #8]
 8023370:	e7c3      	b.n	80232fa <GUI__ManageCache+0x12>
 8023372:	4628      	mov	r0, r5
 8023374:	f7f0 fd16 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 8023378:	9001      	str	r0, [sp, #4]
 802337a:	2800      	cmp	r0, #0
 802337c:	d0bc      	beq.n	80232f8 <GUI__ManageCache+0x10>
 802337e:	68c3      	ldr	r3, [r0, #12]
 8023380:	210d      	movs	r1, #13
 8023382:	a801      	add	r0, sp, #4
 8023384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023386:	4798      	blx	r3
 8023388:	4603      	mov	r3, r0
 802338a:	2800      	cmp	r0, #0
 802338c:	d0b4      	beq.n	80232f8 <GUI__ManageCache+0x10>
 802338e:	4621      	mov	r1, r4
 8023390:	9801      	ldr	r0, [sp, #4]
 8023392:	4798      	blx	r3
 8023394:	68b3      	ldr	r3, [r6, #8]
 8023396:	4638      	mov	r0, r7
 8023398:	3301      	adds	r3, #1
 802339a:	60b3      	str	r3, [r6, #8]
 802339c:	e7ad      	b.n	80232fa <GUI__ManageCache+0x12>
 802339e:	4628      	mov	r0, r5
 80233a0:	f7f0 fd00 	bl	8013da4 <GUI_DEVICE__GetpDriver>
 80233a4:	9001      	str	r0, [sp, #4]
 80233a6:	b188      	cbz	r0, 80233cc <GUI__ManageCache+0xe4>
 80233a8:	68c3      	ldr	r3, [r0, #12]
 80233aa:	210d      	movs	r1, #13
 80233ac:	a801      	add	r0, sp, #4
 80233ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233b0:	4798      	blx	r3
 80233b2:	4605      	mov	r5, r0
 80233b4:	b150      	cbz	r0, 80233cc <GUI__ManageCache+0xe4>
 80233b6:	f8d8 3000 	ldr.w	r3, [r8]
 80233ba:	b103      	cbz	r3, 80233be <GUI__ManageCache+0xd6>
 80233bc:	4798      	blx	r3
 80233be:	2100      	movs	r1, #0
 80233c0:	9801      	ldr	r0, [sp, #4]
 80233c2:	47a8      	blx	r5
 80233c4:	1933      	adds	r3, r6, r4
 80233c6:	2000      	movs	r0, #0
 80233c8:	689b      	ldr	r3, [r3, #8]
 80233ca:	e7ae      	b.n	802332a <GUI__ManageCache+0x42>
 80233cc:	68bb      	ldr	r3, [r7, #8]
 80233ce:	2001      	movs	r0, #1
 80233d0:	e7ab      	b.n	802332a <GUI__ManageCache+0x42>
 80233d2:	bf00      	nop
 80233d4:	20000018 	.word	0x20000018
 80233d8:	200004f8 	.word	0x200004f8

080233dc <LCD_SetClipRectEx>:
 80233dc:	b530      	push	{r4, r5, lr}
 80233de:	4c0a      	ldr	r4, [pc, #40]	; (8023408 <LCD_SetClipRectEx+0x2c>)
 80233e0:	4605      	mov	r5, r0
 80233e2:	4b0a      	ldr	r3, [pc, #40]	; (802340c <LCD_SetClipRectEx+0x30>)
 80233e4:	b083      	sub	sp, #12
 80233e6:	6822      	ldr	r2, [r4, #0]
 80233e8:	4669      	mov	r1, sp
 80233ea:	7c52      	ldrb	r2, [r2, #17]
 80233ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80233f0:	68c3      	ldr	r3, [r0, #12]
 80233f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233f4:	4798      	blx	r3
 80233f6:	6820      	ldr	r0, [r4, #0]
 80233f8:	466a      	mov	r2, sp
 80233fa:	4629      	mov	r1, r5
 80233fc:	3008      	adds	r0, #8
 80233fe:	f7f5 fe6b 	bl	80190d8 <GUI__IntersectRects>
 8023402:	b003      	add	sp, #12
 8023404:	bd30      	pop	{r4, r5, pc}
 8023406:	bf00      	nop
 8023408:	20000018 	.word	0x20000018
 802340c:	200467d0 	.word	0x200467d0

08023410 <GUI_MEMDEV_Paint1Static>:
 8023410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023414:	4680      	mov	r8, r0
 8023416:	b087      	sub	sp, #28
 8023418:	2700      	movs	r7, #0
 802341a:	e058      	b.n	80234ce <GUI_MEMDEV_Paint1Static+0xbe>
 802341c:	2e00      	cmp	r6, #0
 802341e:	d17e      	bne.n	802351e <GUI_MEMDEV_Paint1Static+0x10e>
 8023420:	f7fd fb66 	bl	8020af0 <WM_GetDesktopWindow>
 8023424:	4580      	cmp	r8, r0
 8023426:	f000 809a 	beq.w	802355e <GUI_MEMDEV_Paint1Static+0x14e>
 802342a:	4b58      	ldr	r3, [pc, #352]	; (802358c <GUI_MEMDEV_Paint1Static+0x17c>)
 802342c:	2601      	movs	r6, #1
 802342e:	4649      	mov	r1, r9
 8023430:	4622      	mov	r2, r4
 8023432:	9302      	str	r3, [sp, #8]
 8023434:	4658      	mov	r0, fp
 8023436:	4b56      	ldr	r3, [pc, #344]	; (8023590 <GUI_MEMDEV_Paint1Static+0x180>)
 8023438:	9600      	str	r6, [sp, #0]
 802343a:	9301      	str	r3, [sp, #4]
 802343c:	462b      	mov	r3, r5
 802343e:	f7f9 f971 	bl	801c724 <GUI_MEMDEV__CreateFixed>
 8023442:	4681      	mov	r9, r0
 8023444:	4640      	mov	r0, r8
 8023446:	f7ef fa4d 	bl	80128e4 <GUI_ALLOC_LockH>
 802344a:	4603      	mov	r3, r0
 802344c:	9005      	str	r0, [sp, #20]
 802344e:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 8023452:	f1b9 0f00 	cmp.w	r9, #0
 8023456:	d079      	beq.n	802354c <GUI_MEMDEV_Paint1Static+0x13c>
 8023458:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802345a:	a805      	add	r0, sp, #20
 802345c:	f8df b140 	ldr.w	fp, [pc, #320]	; 80235a0 <GUI_MEMDEV_Paint1Static+0x190>
 8023460:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8023464:	629a      	str	r2, [r3, #40]	; 0x28
 8023466:	f7ef fa51 	bl	801290c <GUI_ALLOC_UnlockH>
 802346a:	4648      	mov	r0, r9
 802346c:	f7f9 fa84 	bl	801c978 <GUI_MEMDEV_Select>
 8023470:	4682      	mov	sl, r0
 8023472:	4630      	mov	r0, r6
 8023474:	4e47      	ldr	r6, [pc, #284]	; (8023594 <GUI_MEMDEV_Paint1Static+0x184>)
 8023476:	f7f4 fc0b 	bl	8017c90 <GUI__AlphaPreserveTrans>
 802347a:	4648      	mov	r0, r9
 802347c:	f7fa fad2 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 8023480:	4b45      	ldr	r3, [pc, #276]	; (8023598 <GUI_MEMDEV_Paint1Static+0x188>)
 8023482:	fb05 f204 	mul.w	r2, r5, r4
 8023486:	4c45      	ldr	r4, [pc, #276]	; (802359c <GUI_MEMDEV_Paint1Static+0x18c>)
 8023488:	7819      	ldrb	r1, [r3, #0]
 802348a:	0092      	lsls	r2, r2, #2
 802348c:	6835      	ldr	r5, [r6, #0]
 802348e:	47a8      	blx	r5
 8023490:	4640      	mov	r0, r8
 8023492:	6825      	ldr	r5, [r4, #0]
 8023494:	f8cb 8000 	str.w	r8, [fp]
 8023498:	f7fd fba2 	bl	8020be0 <WM_GetWindowOrgX>
 802349c:	6020      	str	r0, [r4, #0]
 802349e:	4640      	mov	r0, r8
 80234a0:	f7fc ffee 	bl	8020480 <WM__Paint1>
 80234a4:	2200      	movs	r2, #0
 80234a6:	6025      	str	r5, [r4, #0]
 80234a8:	4610      	mov	r0, r2
 80234aa:	f8cb 2000 	str.w	r2, [fp]
 80234ae:	f7f4 fbef 	bl	8017c90 <GUI__AlphaPreserveTrans>
 80234b2:	4650      	mov	r0, sl
 80234b4:	f7f9 fa60 	bl	801c978 <GUI_MEMDEV_Select>
 80234b8:	4640      	mov	r0, r8
 80234ba:	f7ef fa09 	bl	80128d0 <GUI_ALLOC_h2p>
 80234be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80234c0:	fab0 f380 	clz	r3, r0
 80234c4:	095b      	lsrs	r3, r3, #5
 80234c6:	3701      	adds	r7, #1
 80234c8:	2f04      	cmp	r7, #4
 80234ca:	dc22      	bgt.n	8023512 <GUI_MEMDEV_Paint1Static+0x102>
 80234cc:	b30b      	cbz	r3, 8023512 <GUI_MEMDEV_Paint1Static+0x102>
 80234ce:	4640      	mov	r0, r8
 80234d0:	f7ef fa08 	bl	80128e4 <GUI_ALLOC_LockH>
 80234d4:	4603      	mov	r3, r0
 80234d6:	a805      	add	r0, sp, #20
 80234d8:	f9b3 b000 	ldrsh.w	fp, [r3]
 80234dc:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 80234e0:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80234e4:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 80234e8:	ebcb 0404 	rsb	r4, fp, r4
 80234ec:	9305      	str	r3, [sp, #20]
 80234ee:	ebc9 0505 	rsb	r5, r9, r5
 80234f2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80234f4:	3401      	adds	r4, #1
 80234f6:	f7ef fa09 	bl	801290c <GUI_ALLOC_UnlockH>
 80234fa:	3501      	adds	r5, #1
 80234fc:	2d00      	cmp	r5, #0
 80234fe:	bfc8      	it	gt
 8023500:	2c00      	cmpgt	r4, #0
 8023502:	bfd4      	ite	le
 8023504:	2301      	movle	r3, #1
 8023506:	2300      	movgt	r3, #0
 8023508:	dc88      	bgt.n	802341c <GUI_MEMDEV_Paint1Static+0xc>
 802350a:	3701      	adds	r7, #1
 802350c:	2000      	movs	r0, #0
 802350e:	2f04      	cmp	r7, #4
 8023510:	dddc      	ble.n	80234cc <GUI_MEMDEV_Paint1Static+0xbc>
 8023512:	b108      	cbz	r0, 8023518 <GUI_MEMDEV_Paint1Static+0x108>
 8023514:	f000 f846 	bl	80235a4 <GUI_MEMDEV_Write>
 8023518:	b007      	add	sp, #28
 802351a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802351e:	4630      	mov	r0, r6
 8023520:	f7ef f9e0 	bl	80128e4 <GUI_ALLOC_LockH>
 8023524:	4603      	mov	r3, r0
 8023526:	a806      	add	r0, sp, #24
 8023528:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 802352c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8023530:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8023534:	f7ef f9ea 	bl	801290c <GUI_ALLOC_UnlockH>
 8023538:	45a9      	cmp	r9, r5
 802353a:	d101      	bne.n	8023540 <GUI_MEMDEV_Paint1Static+0x130>
 802353c:	45a3      	cmp	fp, r4
 802353e:	d0bb      	beq.n	80234b8 <GUI_MEMDEV_Paint1Static+0xa8>
 8023540:	464a      	mov	r2, r9
 8023542:	4659      	mov	r1, fp
 8023544:	4630      	mov	r0, r6
 8023546:	f7fa fb2d 	bl	801dba4 <GUI_MEMDEV_SetOrg>
 802354a:	e7b5      	b.n	80234b8 <GUI_MEMDEV_Paint1Static+0xa8>
 802354c:	a805      	add	r0, sp, #20
 802354e:	f7ef f9dd 	bl	801290c <GUI_ALLOC_UnlockH>
 8023552:	4640      	mov	r0, r8
 8023554:	f7fc ff94 	bl	8020480 <WM__Paint1>
 8023558:	4633      	mov	r3, r6
 802355a:	4648      	mov	r0, r9
 802355c:	e7b3      	b.n	80234c6 <GUI_MEMDEV_Paint1Static+0xb6>
 802355e:	f7f7 f809 	bl	801a574 <LCD_GetXSize>
 8023562:	4606      	mov	r6, r0
 8023564:	f7f7 f81c 	bl	801a5a0 <LCD_GetYSize>
 8023568:	42b4      	cmp	r4, r6
 802356a:	dc02      	bgt.n	8023572 <GUI_MEMDEV_Paint1Static+0x162>
 802356c:	4285      	cmp	r5, r0
 802356e:	f77f af5c 	ble.w	802342a <GUI_MEMDEV_Paint1Static+0x1a>
 8023572:	42b4      	cmp	r4, r6
 8023574:	bfa8      	it	ge
 8023576:	4634      	movge	r4, r6
 8023578:	4285      	cmp	r5, r0
 802357a:	bfa8      	it	ge
 802357c:	4605      	movge	r5, r0
 802357e:	4621      	mov	r1, r4
 8023580:	4640      	mov	r0, r8
 8023582:	462a      	mov	r2, r5
 8023584:	f7fd fbee 	bl	8020d64 <WM_SetSize>
 8023588:	e74f      	b.n	802342a <GUI_MEMDEV_Paint1Static+0x1a>
 802358a:	bf00      	nop
 802358c:	0802696c 	.word	0x0802696c
 8023590:	08033fcc 	.word	0x08033fcc
 8023594:	20000050 	.word	0x20000050
 8023598:	20000510 	.word	0x20000510
 802359c:	20046790 	.word	0x20046790
 80235a0:	20046848 	.word	0x20046848

080235a4 <GUI_MEMDEV_Write>:
 80235a4:	b900      	cbnz	r0, 80235a8 <GUI_MEMDEV_Write+0x4>
 80235a6:	4770      	bx	lr
 80235a8:	b570      	push	{r4, r5, r6, lr}
 80235aa:	4604      	mov	r4, r0
 80235ac:	b084      	sub	sp, #16
 80235ae:	f7f4 fbc3 	bl	8017d38 <GUI_Lock>
 80235b2:	4620      	mov	r0, r4
 80235b4:	f7ef f996 	bl	80128e4 <GUI_ALLOC_LockH>
 80235b8:	4601      	mov	r1, r0
 80235ba:	a801      	add	r0, sp, #4
 80235bc:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 80235c0:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 80235c4:	890a      	ldrh	r2, [r1, #8]
 80235c6:	894b      	ldrh	r3, [r1, #10]
 80235c8:	4432      	add	r2, r6
 80235ca:	9101      	str	r1, [sp, #4]
 80235cc:	442b      	add	r3, r5
 80235ce:	f8ad 6008 	strh.w	r6, [sp, #8]
 80235d2:	3a01      	subs	r2, #1
 80235d4:	f8ad 500a 	strh.w	r5, [sp, #10]
 80235d8:	3b01      	subs	r3, #1
 80235da:	f8ad 200c 	strh.w	r2, [sp, #12]
 80235de:	f8ad 300e 	strh.w	r3, [sp, #14]
 80235e2:	f7ef f993 	bl	801290c <GUI_ALLOC_UnlockH>
 80235e6:	a802      	add	r0, sp, #8
 80235e8:	f7fc fe7e 	bl	80202e8 <WM__InitIVRSearch>
 80235ec:	b140      	cbz	r0, 8023600 <GUI_MEMDEV_Write+0x5c>
 80235ee:	462a      	mov	r2, r5
 80235f0:	4631      	mov	r1, r6
 80235f2:	4620      	mov	r0, r4
 80235f4:	f7f9 f878 	bl	801c6e8 <GUI_MEMDEV__WriteToActiveAt>
 80235f8:	f7fc fd4c 	bl	8020094 <WM__GetNextIVR>
 80235fc:	2800      	cmp	r0, #0
 80235fe:	d1f6      	bne.n	80235ee <GUI_MEMDEV_Write+0x4a>
 8023600:	f7f4 fb90 	bl	8017d24 <GUI_Unlock>
 8023604:	b004      	add	sp, #16
 8023606:	bd70      	pop	{r4, r5, r6, pc}

08023608 <WM_PID__SetPrevState>:
 8023608:	b410      	push	{r4}
 802360a:	4b05      	ldr	r3, [pc, #20]	; (8023620 <WM_PID__SetPrevState+0x18>)
 802360c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8023610:	c807      	ldmia	r0, {r0, r1, r2}
 8023612:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023616:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802361a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802361e:	4770      	bx	lr
 8023620:	20000514 	.word	0x20000514

08023624 <_Screen2hWin>:
 8023624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023628:	4606      	mov	r6, r0
 802362a:	b091      	sub	sp, #68	; 0x44
 802362c:	b910      	cbnz	r0, 8023634 <_Screen2hWin+0x10>
 802362e:	b011      	add	sp, #68	; 0x44
 8023630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023634:	4699      	mov	r9, r3
 8023636:	460d      	mov	r5, r1
 8023638:	4690      	mov	r8, r2
 802363a:	f7ef f953 	bl	80128e4 <GUI_ALLOC_LockH>
 802363e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023640:	9007      	str	r0, [sp, #28]
 8023642:	079c      	lsls	r4, r3, #30
 8023644:	f140 81b5 	bpl.w	80239b2 <_Screen2hWin+0x38e>
 8023648:	f9b0 3000 	ldrsh.w	r3, [r0]
 802364c:	4598      	cmp	r8, r3
 802364e:	f2c0 81b0 	blt.w	80239b2 <_Screen2hWin+0x38e>
 8023652:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023656:	4598      	cmp	r8, r3
 8023658:	f300 81ab 	bgt.w	80239b2 <_Screen2hWin+0x38e>
 802365c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023660:	4599      	cmp	r9, r3
 8023662:	f2c0 81a6 	blt.w	80239b2 <_Screen2hWin+0x38e>
 8023666:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802366a:	4599      	cmp	r9, r3
 802366c:	f300 81a1 	bgt.w	80239b2 <_Screen2hWin+0x38e>
 8023670:	69c3      	ldr	r3, [r0, #28]
 8023672:	9303      	str	r3, [sp, #12]
 8023674:	2b00      	cmp	r3, #0
 8023676:	f000 818d 	beq.w	8023994 <_Screen2hWin+0x370>
 802367a:	42ab      	cmp	r3, r5
 802367c:	f000 818a 	beq.w	8023994 <_Screen2hWin+0x370>
 8023680:	9803      	ldr	r0, [sp, #12]
 8023682:	f7ef f92f 	bl	80128e4 <GUI_ALLOC_LockH>
 8023686:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023688:	9008      	str	r0, [sp, #32]
 802368a:	0799      	lsls	r1, r3, #30
 802368c:	f140 8176 	bpl.w	802397c <_Screen2hWin+0x358>
 8023690:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023694:	4598      	cmp	r8, r3
 8023696:	f2c0 8171 	blt.w	802397c <_Screen2hWin+0x358>
 802369a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802369e:	4598      	cmp	r8, r3
 80236a0:	f300 816c 	bgt.w	802397c <_Screen2hWin+0x358>
 80236a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80236a8:	4599      	cmp	r9, r3
 80236aa:	f2c0 8167 	blt.w	802397c <_Screen2hWin+0x358>
 80236ae:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80236b2:	4599      	cmp	r9, r3
 80236b4:	f300 8162 	bgt.w	802397c <_Screen2hWin+0x358>
 80236b8:	69c3      	ldr	r3, [r0, #28]
 80236ba:	9304      	str	r3, [sp, #16]
 80236bc:	2b00      	cmp	r3, #0
 80236be:	f000 817d 	beq.w	80239bc <_Screen2hWin+0x398>
 80236c2:	429d      	cmp	r5, r3
 80236c4:	f000 817a 	beq.w	80239bc <_Screen2hWin+0x398>
 80236c8:	9e03      	ldr	r6, [sp, #12]
 80236ca:	9804      	ldr	r0, [sp, #16]
 80236cc:	f7ef f90a 	bl	80128e4 <GUI_ALLOC_LockH>
 80236d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80236d2:	9009      	str	r0, [sp, #36]	; 0x24
 80236d4:	079a      	lsls	r2, r3, #30
 80236d6:	f140 8145 	bpl.w	8023964 <_Screen2hWin+0x340>
 80236da:	f9b0 3000 	ldrsh.w	r3, [r0]
 80236de:	4598      	cmp	r8, r3
 80236e0:	f2c0 8140 	blt.w	8023964 <_Screen2hWin+0x340>
 80236e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80236e8:	4598      	cmp	r8, r3
 80236ea:	f300 813b 	bgt.w	8023964 <_Screen2hWin+0x340>
 80236ee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80236f2:	4599      	cmp	r9, r3
 80236f4:	f2c0 8136 	blt.w	8023964 <_Screen2hWin+0x340>
 80236f8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80236fc:	4599      	cmp	r9, r3
 80236fe:	f300 8131 	bgt.w	8023964 <_Screen2hWin+0x340>
 8023702:	69c3      	ldr	r3, [r0, #28]
 8023704:	9305      	str	r3, [sp, #20]
 8023706:	2b00      	cmp	r3, #0
 8023708:	f000 815c 	beq.w	80239c4 <_Screen2hWin+0x3a0>
 802370c:	429d      	cmp	r5, r3
 802370e:	f000 8159 	beq.w	80239c4 <_Screen2hWin+0x3a0>
 8023712:	9e04      	ldr	r6, [sp, #16]
 8023714:	9805      	ldr	r0, [sp, #20]
 8023716:	f7ef f8e5 	bl	80128e4 <GUI_ALLOC_LockH>
 802371a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802371c:	900a      	str	r0, [sp, #40]	; 0x28
 802371e:	079b      	lsls	r3, r3, #30
 8023720:	f140 8114 	bpl.w	802394c <_Screen2hWin+0x328>
 8023724:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023728:	4598      	cmp	r8, r3
 802372a:	f2c0 810f 	blt.w	802394c <_Screen2hWin+0x328>
 802372e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023732:	4598      	cmp	r8, r3
 8023734:	f300 810a 	bgt.w	802394c <_Screen2hWin+0x328>
 8023738:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802373c:	4599      	cmp	r9, r3
 802373e:	f2c0 8105 	blt.w	802394c <_Screen2hWin+0x328>
 8023742:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023746:	4599      	cmp	r9, r3
 8023748:	f300 8100 	bgt.w	802394c <_Screen2hWin+0x328>
 802374c:	69c3      	ldr	r3, [r0, #28]
 802374e:	9302      	str	r3, [sp, #8]
 8023750:	2b00      	cmp	r3, #0
 8023752:	f000 8135 	beq.w	80239c0 <_Screen2hWin+0x39c>
 8023756:	429d      	cmp	r5, r3
 8023758:	f000 8132 	beq.w	80239c0 <_Screen2hWin+0x39c>
 802375c:	9e05      	ldr	r6, [sp, #20]
 802375e:	9802      	ldr	r0, [sp, #8]
 8023760:	f7ef f8c0 	bl	80128e4 <GUI_ALLOC_LockH>
 8023764:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023766:	900b      	str	r0, [sp, #44]	; 0x2c
 8023768:	079f      	lsls	r7, r3, #30
 802376a:	f140 80e3 	bpl.w	8023934 <_Screen2hWin+0x310>
 802376e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023772:	4598      	cmp	r8, r3
 8023774:	f2c0 80de 	blt.w	8023934 <_Screen2hWin+0x310>
 8023778:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802377c:	4598      	cmp	r8, r3
 802377e:	f300 80d9 	bgt.w	8023934 <_Screen2hWin+0x310>
 8023782:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023786:	4599      	cmp	r9, r3
 8023788:	f2c0 80d4 	blt.w	8023934 <_Screen2hWin+0x310>
 802378c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023790:	4599      	cmp	r9, r3
 8023792:	f300 80cf 	bgt.w	8023934 <_Screen2hWin+0x310>
 8023796:	69c3      	ldr	r3, [r0, #28]
 8023798:	9301      	str	r3, [sp, #4]
 802379a:	2b00      	cmp	r3, #0
 802379c:	f000 8107 	beq.w	80239ae <_Screen2hWin+0x38a>
 80237a0:	429d      	cmp	r5, r3
 80237a2:	f000 8104 	beq.w	80239ae <_Screen2hWin+0x38a>
 80237a6:	9e02      	ldr	r6, [sp, #8]
 80237a8:	9801      	ldr	r0, [sp, #4]
 80237aa:	f7ef f89b 	bl	80128e4 <GUI_ALLOC_LockH>
 80237ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80237b0:	900c      	str	r0, [sp, #48]	; 0x30
 80237b2:	079c      	lsls	r4, r3, #30
 80237b4:	f140 80b2 	bpl.w	802391c <_Screen2hWin+0x2f8>
 80237b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80237bc:	4598      	cmp	r8, r3
 80237be:	f2c0 80ad 	blt.w	802391c <_Screen2hWin+0x2f8>
 80237c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80237c6:	4598      	cmp	r8, r3
 80237c8:	f300 80a8 	bgt.w	802391c <_Screen2hWin+0x2f8>
 80237cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80237d0:	4599      	cmp	r9, r3
 80237d2:	f2c0 80a3 	blt.w	802391c <_Screen2hWin+0x2f8>
 80237d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80237da:	4599      	cmp	r9, r3
 80237dc:	f300 809e 	bgt.w	802391c <_Screen2hWin+0x2f8>
 80237e0:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80237e4:	455d      	cmp	r5, fp
 80237e6:	f000 80e0 	beq.w	80239aa <_Screen2hWin+0x386>
 80237ea:	f1bb 0f00 	cmp.w	fp, #0
 80237ee:	f000 80dc 	beq.w	80239aa <_Screen2hWin+0x386>
 80237f2:	9e01      	ldr	r6, [sp, #4]
 80237f4:	4658      	mov	r0, fp
 80237f6:	f7ef f875 	bl	80128e4 <GUI_ALLOC_LockH>
 80237fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80237fc:	900d      	str	r0, [sp, #52]	; 0x34
 80237fe:	0799      	lsls	r1, r3, #30
 8023800:	d57e      	bpl.n	8023900 <_Screen2hWin+0x2dc>
 8023802:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023806:	4598      	cmp	r8, r3
 8023808:	db7a      	blt.n	8023900 <_Screen2hWin+0x2dc>
 802380a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802380e:	4598      	cmp	r8, r3
 8023810:	dc76      	bgt.n	8023900 <_Screen2hWin+0x2dc>
 8023812:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023816:	4599      	cmp	r9, r3
 8023818:	db72      	blt.n	8023900 <_Screen2hWin+0x2dc>
 802381a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802381e:	4599      	cmp	r9, r3
 8023820:	dc6e      	bgt.n	8023900 <_Screen2hWin+0x2dc>
 8023822:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8023826:	4555      	cmp	r5, sl
 8023828:	f000 80bd 	beq.w	80239a6 <_Screen2hWin+0x382>
 802382c:	f1ba 0f00 	cmp.w	sl, #0
 8023830:	f000 80b9 	beq.w	80239a6 <_Screen2hWin+0x382>
 8023834:	465e      	mov	r6, fp
 8023836:	4650      	mov	r0, sl
 8023838:	f7ef f854 	bl	80128e4 <GUI_ALLOC_LockH>
 802383c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802383e:	900e      	str	r0, [sp, #56]	; 0x38
 8023840:	079a      	lsls	r2, r3, #30
 8023842:	d550      	bpl.n	80238e6 <_Screen2hWin+0x2c2>
 8023844:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023848:	4598      	cmp	r8, r3
 802384a:	db4c      	blt.n	80238e6 <_Screen2hWin+0x2c2>
 802384c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023850:	4598      	cmp	r8, r3
 8023852:	dc48      	bgt.n	80238e6 <_Screen2hWin+0x2c2>
 8023854:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023858:	4599      	cmp	r9, r3
 802385a:	db44      	blt.n	80238e6 <_Screen2hWin+0x2c2>
 802385c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023860:	4599      	cmp	r9, r3
 8023862:	dc40      	bgt.n	80238e6 <_Screen2hWin+0x2c2>
 8023864:	69c7      	ldr	r7, [r0, #28]
 8023866:	42bd      	cmp	r5, r7
 8023868:	f000 809b 	beq.w	80239a2 <_Screen2hWin+0x37e>
 802386c:	2f00      	cmp	r7, #0
 802386e:	f000 8098 	beq.w	80239a2 <_Screen2hWin+0x37e>
 8023872:	4656      	mov	r6, sl
 8023874:	4638      	mov	r0, r7
 8023876:	f7ef f835 	bl	80128e4 <GUI_ALLOC_LockH>
 802387a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802387c:	900f      	str	r0, [sp, #60]	; 0x3c
 802387e:	079b      	lsls	r3, r3, #30
 8023880:	d527      	bpl.n	80238d2 <_Screen2hWin+0x2ae>
 8023882:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023886:	4598      	cmp	r8, r3
 8023888:	db23      	blt.n	80238d2 <_Screen2hWin+0x2ae>
 802388a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802388e:	4598      	cmp	r8, r3
 8023890:	dc1f      	bgt.n	80238d2 <_Screen2hWin+0x2ae>
 8023892:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023896:	4599      	cmp	r9, r3
 8023898:	db1b      	blt.n	80238d2 <_Screen2hWin+0x2ae>
 802389a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802389e:	4599      	cmp	r9, r3
 80238a0:	dc17      	bgt.n	80238d2 <_Screen2hWin+0x2ae>
 80238a2:	69c4      	ldr	r4, [r0, #28]
 80238a4:	42a5      	cmp	r5, r4
 80238a6:	d07a      	beq.n	802399e <_Screen2hWin+0x37a>
 80238a8:	2c00      	cmp	r4, #0
 80238aa:	d078      	beq.n	802399e <_Screen2hWin+0x37a>
 80238ac:	463e      	mov	r6, r7
 80238ae:	e001      	b.n	80238b4 <_Screen2hWin+0x290>
 80238b0:	42a5      	cmp	r5, r4
 80238b2:	d00e      	beq.n	80238d2 <_Screen2hWin+0x2ae>
 80238b4:	464b      	mov	r3, r9
 80238b6:	4642      	mov	r2, r8
 80238b8:	4629      	mov	r1, r5
 80238ba:	4620      	mov	r0, r4
 80238bc:	f7ff feb2 	bl	8023624 <_Screen2hWin>
 80238c0:	2800      	cmp	r0, #0
 80238c2:	bf18      	it	ne
 80238c4:	4606      	movne	r6, r0
 80238c6:	4620      	mov	r0, r4
 80238c8:	f7ef f802 	bl	80128d0 <GUI_ALLOC_h2p>
 80238cc:	6a04      	ldr	r4, [r0, #32]
 80238ce:	2c00      	cmp	r4, #0
 80238d0:	d1ee      	bne.n	80238b0 <_Screen2hWin+0x28c>
 80238d2:	a80f      	add	r0, sp, #60	; 0x3c
 80238d4:	f7ef f81a 	bl	801290c <GUI_ALLOC_UnlockH>
 80238d8:	4638      	mov	r0, r7
 80238da:	f7ee fff9 	bl	80128d0 <GUI_ALLOC_h2p>
 80238de:	6a07      	ldr	r7, [r0, #32]
 80238e0:	b10f      	cbz	r7, 80238e6 <_Screen2hWin+0x2c2>
 80238e2:	42bd      	cmp	r5, r7
 80238e4:	d1c6      	bne.n	8023874 <_Screen2hWin+0x250>
 80238e6:	a80e      	add	r0, sp, #56	; 0x38
 80238e8:	f7ef f810 	bl	801290c <GUI_ALLOC_UnlockH>
 80238ec:	4650      	mov	r0, sl
 80238ee:	f7ee ffef 	bl	80128d0 <GUI_ALLOC_h2p>
 80238f2:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80238f6:	f1ba 0f00 	cmp.w	sl, #0
 80238fa:	d001      	beq.n	8023900 <_Screen2hWin+0x2dc>
 80238fc:	4555      	cmp	r5, sl
 80238fe:	d19a      	bne.n	8023836 <_Screen2hWin+0x212>
 8023900:	a80d      	add	r0, sp, #52	; 0x34
 8023902:	f7ef f803 	bl	801290c <GUI_ALLOC_UnlockH>
 8023906:	4658      	mov	r0, fp
 8023908:	f7ee ffe2 	bl	80128d0 <GUI_ALLOC_h2p>
 802390c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8023910:	f1bb 0f00 	cmp.w	fp, #0
 8023914:	d002      	beq.n	802391c <_Screen2hWin+0x2f8>
 8023916:	455d      	cmp	r5, fp
 8023918:	f47f af6c 	bne.w	80237f4 <_Screen2hWin+0x1d0>
 802391c:	a80c      	add	r0, sp, #48	; 0x30
 802391e:	f7ee fff5 	bl	801290c <GUI_ALLOC_UnlockH>
 8023922:	9801      	ldr	r0, [sp, #4]
 8023924:	f7ee ffd4 	bl	80128d0 <GUI_ALLOC_h2p>
 8023928:	6a03      	ldr	r3, [r0, #32]
 802392a:	9301      	str	r3, [sp, #4]
 802392c:	b113      	cbz	r3, 8023934 <_Screen2hWin+0x310>
 802392e:	429d      	cmp	r5, r3
 8023930:	f47f af3a 	bne.w	80237a8 <_Screen2hWin+0x184>
 8023934:	a80b      	add	r0, sp, #44	; 0x2c
 8023936:	f7ee ffe9 	bl	801290c <GUI_ALLOC_UnlockH>
 802393a:	9802      	ldr	r0, [sp, #8]
 802393c:	f7ee ffc8 	bl	80128d0 <GUI_ALLOC_h2p>
 8023940:	6a03      	ldr	r3, [r0, #32]
 8023942:	9302      	str	r3, [sp, #8]
 8023944:	b113      	cbz	r3, 802394c <_Screen2hWin+0x328>
 8023946:	429d      	cmp	r5, r3
 8023948:	f47f af09 	bne.w	802375e <_Screen2hWin+0x13a>
 802394c:	a80a      	add	r0, sp, #40	; 0x28
 802394e:	f7ee ffdd 	bl	801290c <GUI_ALLOC_UnlockH>
 8023952:	9805      	ldr	r0, [sp, #20]
 8023954:	f7ee ffbc 	bl	80128d0 <GUI_ALLOC_h2p>
 8023958:	6a03      	ldr	r3, [r0, #32]
 802395a:	9305      	str	r3, [sp, #20]
 802395c:	b113      	cbz	r3, 8023964 <_Screen2hWin+0x340>
 802395e:	429d      	cmp	r5, r3
 8023960:	f47f aed8 	bne.w	8023714 <_Screen2hWin+0xf0>
 8023964:	a809      	add	r0, sp, #36	; 0x24
 8023966:	f7ee ffd1 	bl	801290c <GUI_ALLOC_UnlockH>
 802396a:	9804      	ldr	r0, [sp, #16]
 802396c:	f7ee ffb0 	bl	80128d0 <GUI_ALLOC_h2p>
 8023970:	6a03      	ldr	r3, [r0, #32]
 8023972:	9304      	str	r3, [sp, #16]
 8023974:	b113      	cbz	r3, 802397c <_Screen2hWin+0x358>
 8023976:	429d      	cmp	r5, r3
 8023978:	f47f aea7 	bne.w	80236ca <_Screen2hWin+0xa6>
 802397c:	a808      	add	r0, sp, #32
 802397e:	f7ee ffc5 	bl	801290c <GUI_ALLOC_UnlockH>
 8023982:	9803      	ldr	r0, [sp, #12]
 8023984:	f7ee ffa4 	bl	80128d0 <GUI_ALLOC_h2p>
 8023988:	6a03      	ldr	r3, [r0, #32]
 802398a:	9303      	str	r3, [sp, #12]
 802398c:	b113      	cbz	r3, 8023994 <_Screen2hWin+0x370>
 802398e:	429d      	cmp	r5, r3
 8023990:	f47f ae76 	bne.w	8023680 <_Screen2hWin+0x5c>
 8023994:	a807      	add	r0, sp, #28
 8023996:	f7ee ffb9 	bl	801290c <GUI_ALLOC_UnlockH>
 802399a:	4630      	mov	r0, r6
 802399c:	e647      	b.n	802362e <_Screen2hWin+0xa>
 802399e:	463e      	mov	r6, r7
 80239a0:	e797      	b.n	80238d2 <_Screen2hWin+0x2ae>
 80239a2:	4656      	mov	r6, sl
 80239a4:	e79f      	b.n	80238e6 <_Screen2hWin+0x2c2>
 80239a6:	465e      	mov	r6, fp
 80239a8:	e7aa      	b.n	8023900 <_Screen2hWin+0x2dc>
 80239aa:	9e01      	ldr	r6, [sp, #4]
 80239ac:	e7b6      	b.n	802391c <_Screen2hWin+0x2f8>
 80239ae:	9e02      	ldr	r6, [sp, #8]
 80239b0:	e7c0      	b.n	8023934 <_Screen2hWin+0x310>
 80239b2:	a807      	add	r0, sp, #28
 80239b4:	f7ee ffaa 	bl	801290c <GUI_ALLOC_UnlockH>
 80239b8:	2000      	movs	r0, #0
 80239ba:	e638      	b.n	802362e <_Screen2hWin+0xa>
 80239bc:	9e03      	ldr	r6, [sp, #12]
 80239be:	e7dd      	b.n	802397c <_Screen2hWin+0x358>
 80239c0:	9e05      	ldr	r6, [sp, #20]
 80239c2:	e7c3      	b.n	802394c <_Screen2hWin+0x328>
 80239c4:	9e04      	ldr	r6, [sp, #16]
 80239c6:	e7cd      	b.n	8023964 <_Screen2hWin+0x340>

080239c8 <WM_Screen2hWin>:
 80239c8:	b538      	push	{r3, r4, r5, lr}
 80239ca:	460d      	mov	r5, r1
 80239cc:	4604      	mov	r4, r0
 80239ce:	f7f4 f9b3 	bl	8017d38 <GUI_Lock>
 80239d2:	4b07      	ldr	r3, [pc, #28]	; (80239f0 <WM_Screen2hWin+0x28>)
 80239d4:	6818      	ldr	r0, [r3, #0]
 80239d6:	f7fd f897 	bl	8020b08 <WM_GetDesktopWindowEx>
 80239da:	4622      	mov	r2, r4
 80239dc:	462b      	mov	r3, r5
 80239de:	2100      	movs	r1, #0
 80239e0:	f7ff fe20 	bl	8023624 <_Screen2hWin>
 80239e4:	4604      	mov	r4, r0
 80239e6:	f7f4 f99d 	bl	8017d24 <GUI_Unlock>
 80239ea:	4620      	mov	r0, r4
 80239ec:	bd38      	pop	{r3, r4, r5, pc}
 80239ee:	bf00      	nop
 80239f0:	2004681c 	.word	0x2004681c

080239f4 <WM_ReleaseCapture>:
 80239f4:	b530      	push	{r4, r5, lr}
 80239f6:	4d0b      	ldr	r5, [pc, #44]	; (8023a24 <WM_ReleaseCapture+0x30>)
 80239f8:	b085      	sub	sp, #20
 80239fa:	f7f4 f99d 	bl	8017d38 <GUI_Lock>
 80239fe:	4c0a      	ldr	r4, [pc, #40]	; (8023a28 <WM_ReleaseCapture+0x34>)
 8023a00:	682b      	ldr	r3, [r5, #0]
 8023a02:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8023a06:	b148      	cbz	r0, 8023a1c <WM_ReleaseCapture+0x28>
 8023a08:	2318      	movs	r3, #24
 8023a0a:	a904      	add	r1, sp, #16
 8023a0c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8023a10:	f7fd fed8 	bl	80217c4 <WM__SendMessage>
 8023a14:	682b      	ldr	r3, [r5, #0]
 8023a16:	2200      	movs	r2, #0
 8023a18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8023a1c:	f7f4 f982 	bl	8017d24 <GUI_Unlock>
 8023a20:	b005      	add	sp, #20
 8023a22:	bd30      	pop	{r4, r5, pc}
 8023a24:	2004681c 	.word	0x2004681c
 8023a28:	20046840 	.word	0x20046840

08023a2c <_GetDevData>:
 8023a2c:	2901      	cmp	r1, #1
 8023a2e:	4802      	ldr	r0, [pc, #8]	; (8023a38 <_GetDevData+0xc>)
 8023a30:	bf18      	it	ne
 8023a32:	2000      	movne	r0, #0
 8023a34:	4770      	bx	lr
 8023a36:	bf00      	nop
 8023a38:	08033fcc 	.word	0x08033fcc

08023a3c <_GetDevFunc>:
 8023a3c:	2916      	cmp	r1, #22
 8023a3e:	4802      	ldr	r0, [pc, #8]	; (8023a48 <_GetDevFunc+0xc>)
 8023a40:	bf18      	it	ne
 8023a42:	2000      	movne	r0, #0
 8023a44:	4770      	bx	lr
 8023a46:	bf00      	nop
 8023a48:	0802490d 	.word	0x0802490d

08023a4c <_GetDevProp>:
 8023a4c:	2908      	cmp	r1, #8
 8023a4e:	bf0c      	ite	eq
 8023a50:	2020      	moveq	r0, #32
 8023a52:	2000      	movne	r0, #0
 8023a54:	4770      	bx	lr
 8023a56:	bf00      	nop

08023a58 <_SetOrg>:
 8023a58:	6800      	ldr	r0, [r0, #0]
 8023a5a:	68c3      	ldr	r3, [r0, #12]
 8023a5c:	6a1b      	ldr	r3, [r3, #32]
 8023a5e:	4718      	bx	r3

08023a60 <_GetRect>:
 8023a60:	b570      	push	{r4, r5, r6, lr}
 8023a62:	b082      	sub	sp, #8
 8023a64:	6880      	ldr	r0, [r0, #8]
 8023a66:	460d      	mov	r5, r1
 8023a68:	f7ee ff3c 	bl	80128e4 <GUI_ALLOC_LockH>
 8023a6c:	4602      	mov	r2, r0
 8023a6e:	a802      	add	r0, sp, #8
 8023a70:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8023a74:	8914      	ldrh	r4, [r2, #8]
 8023a76:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8023a7a:	8953      	ldrh	r3, [r2, #10]
 8023a7c:	4434      	add	r4, r6
 8023a7e:	802e      	strh	r6, [r5, #0]
 8023a80:	440b      	add	r3, r1
 8023a82:	3c01      	subs	r4, #1
 8023a84:	8069      	strh	r1, [r5, #2]
 8023a86:	3b01      	subs	r3, #1
 8023a88:	80ac      	strh	r4, [r5, #4]
 8023a8a:	f840 2d04 	str.w	r2, [r0, #-4]!
 8023a8e:	80eb      	strh	r3, [r5, #6]
 8023a90:	f7ee ff3c 	bl	801290c <GUI_ALLOC_UnlockH>
 8023a94:	b002      	add	sp, #8
 8023a96:	bd70      	pop	{r4, r5, r6, pc}

08023a98 <_DrawBitmap>:
 8023a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a9c:	4ca9      	ldr	r4, [pc, #676]	; (8023d44 <_DrawBitmap+0x2ac>)
 8023a9e:	b093      	sub	sp, #76	; 0x4c
 8023aa0:	6825      	ldr	r5, [r4, #0]
 8023aa2:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8023aa6:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8023aa8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8023aaa:	b916      	cbnz	r6, 8023ab2 <_DrawBitmap+0x1a>
 8023aac:	b013      	add	sp, #76	; 0x4c
 8023aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ab2:	4607      	mov	r7, r0
 8023ab4:	4630      	mov	r0, r6
 8023ab6:	9208      	str	r2, [sp, #32]
 8023ab8:	460c      	mov	r4, r1
 8023aba:	9303      	str	r3, [sp, #12]
 8023abc:	f7ee ff12 	bl	80128e4 <GUI_ALLOC_LockH>
 8023ac0:	6942      	ldr	r2, [r0, #20]
 8023ac2:	900f      	str	r0, [sp, #60]	; 0x3c
 8023ac4:	2a00      	cmp	r2, #0
 8023ac6:	f040 80d6 	bne.w	8023c76 <_DrawBitmap+0x1de>
 8023aca:	4603      	mov	r3, r0
 8023acc:	4610      	mov	r0, r2
 8023ace:	68db      	ldr	r3, [r3, #12]
 8023ad0:	9010      	str	r0, [sp, #64]	; 0x40
 8023ad2:	a80f      	add	r0, sp, #60	; 0x3c
 8023ad4:	9304      	str	r3, [sp, #16]
 8023ad6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023ad8:	18e3      	adds	r3, r4, r3
 8023ada:	9305      	str	r3, [sp, #20]
 8023adc:	f7ee ff16 	bl	801290c <GUI_ALLOC_UnlockH>
 8023ae0:	4b98      	ldr	r3, [pc, #608]	; (8023d44 <_DrawBitmap+0x2ac>)
 8023ae2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023ae4:	681b      	ldr	r3, [r3, #0]
 8023ae6:	b120      	cbz	r0, 8023af2 <_DrawBitmap+0x5a>
 8023ae8:	7c1a      	ldrb	r2, [r3, #16]
 8023aea:	4c96      	ldr	r4, [pc, #600]	; (8023d44 <_DrawBitmap+0x2ac>)
 8023aec:	0796      	lsls	r6, r2, #30
 8023aee:	f140 8099 	bpl.w	8023c24 <_DrawBitmap+0x18c>
 8023af2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8023af4:	f7ee fef6 	bl	80128e4 <GUI_ALLOC_LockH>
 8023af8:	4604      	mov	r4, r0
 8023afa:	9908      	ldr	r1, [sp, #32]
 8023afc:	a812      	add	r0, sp, #72	; 0x48
 8023afe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8023b02:	68e3      	ldr	r3, [r4, #12]
 8023b04:	1a8a      	subs	r2, r1, r2
 8023b06:	9905      	ldr	r1, [sp, #20]
 8023b08:	f840 4d04 	str.w	r4, [r0, #-4]!
 8023b0c:	fb03 f302 	mul.w	r3, r3, r2
 8023b10:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8023b14:	3318      	adds	r3, #24
 8023b16:	1a8a      	subs	r2, r1, r2
 8023b18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023b1c:	18e3      	adds	r3, r4, r3
 8023b1e:	9302      	str	r3, [sp, #8]
 8023b20:	f7ee fef4 	bl	801290c <GUI_ALLOC_UnlockH>
 8023b24:	2d17      	cmp	r5, #23
 8023b26:	dd4e      	ble.n	8023bc6 <_DrawBitmap+0x12e>
 8023b28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	dd41      	ble.n	8023bb2 <_DrawBitmap+0x11a>
 8023b2e:	9b03      	ldr	r3, [sp, #12]
 8023b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b34:	009b      	lsls	r3, r3, #2
 8023b36:	9707      	str	r7, [sp, #28]
 8023b38:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8023d50 <_DrawBitmap+0x2b8>
 8023b3c:	9308      	str	r3, [sp, #32]
 8023b3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b40:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8023b42:	4443      	add	r3, r8
 8023b44:	9306      	str	r3, [sp, #24]
 8023b46:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023b48:	b128      	cbz	r0, 8023b56 <_DrawBitmap+0xbe>
 8023b4a:	6881      	ldr	r1, [r0, #8]
 8023b4c:	4642      	mov	r2, r8
 8023b4e:	9b03      	ldr	r3, [sp, #12]
 8023b50:	684c      	ldr	r4, [r1, #4]
 8023b52:	9905      	ldr	r1, [sp, #20]
 8023b54:	47a0      	blx	r4
 8023b56:	9b07      	ldr	r3, [sp, #28]
 8023b58:	691b      	ldr	r3, [r3, #16]
 8023b5a:	68da      	ldr	r2, [r3, #12]
 8023b5c:	2a00      	cmp	r2, #0
 8023b5e:	f040 8083 	bne.w	8023c68 <_DrawBitmap+0x1d0>
 8023b62:	685b      	ldr	r3, [r3, #4]
 8023b64:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8023b68:	4798      	blx	r3
 8023b6a:	463e      	mov	r6, r7
 8023b6c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8023b70:	0e04      	lsrs	r4, r0, #24
 8023b72:	9d03      	ldr	r5, [sp, #12]
 8023b74:	971f      	str	r7, [sp, #124]	; 0x7c
 8023b76:	4633      	mov	r3, r6
 8023b78:	2700      	movs	r7, #0
 8023b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8023b7e:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 8023b82:	d058      	beq.n	8023c36 <_DrawBitmap+0x19e>
 8023b84:	2f00      	cmp	r7, #0
 8023b86:	d159      	bne.n	8023c3c <_DrawBitmap+0x1a4>
 8023b88:	6830      	ldr	r0, [r6, #0]
 8023b8a:	0e02      	lsrs	r2, r0, #24
 8023b8c:	d164      	bne.n	8023c58 <_DrawBitmap+0x1c0>
 8023b8e:	3d01      	subs	r5, #1
 8023b90:	f10a 0a04 	add.w	sl, sl, #4
 8023b94:	3604      	adds	r6, #4
 8023b96:	2d00      	cmp	r5, #0
 8023b98:	d1ed      	bne.n	8023b76 <_DrawBitmap+0xde>
 8023b9a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8023b9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023b9e:	f108 0801 	add.w	r8, r8, #1
 8023ba2:	9a04      	ldr	r2, [sp, #16]
 8023ba4:	441f      	add	r7, r3
 8023ba6:	9b02      	ldr	r3, [sp, #8]
 8023ba8:	4413      	add	r3, r2
 8023baa:	9302      	str	r3, [sp, #8]
 8023bac:	9b06      	ldr	r3, [sp, #24]
 8023bae:	4598      	cmp	r8, r3
 8023bb0:	d1c9      	bne.n	8023b46 <_DrawBitmap+0xae>
 8023bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bb4:	2b00      	cmp	r3, #0
 8023bb6:	f43f af79 	beq.w	8023aac <_DrawBitmap+0x14>
 8023bba:	a810      	add	r0, sp, #64	; 0x40
 8023bbc:	f7ee fea6 	bl	801290c <GUI_ALLOC_UnlockH>
 8023bc0:	b013      	add	sp, #76	; 0x4c
 8023bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bc6:	2d10      	cmp	r5, #16
 8023bc8:	d05a      	beq.n	8023c80 <_DrawBitmap+0x1e8>
 8023bca:	2d08      	cmp	r5, #8
 8023bcc:	f000 80c2 	beq.w	8023d54 <_DrawBitmap+0x2bc>
 8023bd0:	4b5d      	ldr	r3, [pc, #372]	; (8023d48 <_DrawBitmap+0x2b0>)
 8023bd2:	f1ba 0f00 	cmp.w	sl, #0
 8023bd6:	bf08      	it	eq
 8023bd8:	469a      	moveq	sl, r3
 8023bda:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023bdc:	2b00      	cmp	r3, #0
 8023bde:	f340 80a9 	ble.w	8023d34 <_DrawBitmap+0x29c>
 8023be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023be4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023be6:	009b      	lsls	r3, r3, #2
 8023be8:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8023bea:	0052      	lsls	r2, r2, #1
 8023bec:	930a      	str	r3, [sp, #40]	; 0x28
 8023bee:	2300      	movs	r3, #0
 8023bf0:	920c      	str	r2, [sp, #48]	; 0x30
 8023bf2:	9a02      	ldr	r2, [sp, #8]
 8023bf4:	2d02      	cmp	r5, #2
 8023bf6:	f000 8339 	beq.w	802426c <_DrawBitmap+0x7d4>
 8023bfa:	2d04      	cmp	r5, #4
 8023bfc:	f000 81f0 	beq.w	8023fe0 <_DrawBitmap+0x548>
 8023c00:	2d01      	cmp	r5, #1
 8023c02:	f000 812c 	beq.w	8023e5e <_DrawBitmap+0x3c6>
 8023c06:	981e      	ldr	r0, [sp, #120]	; 0x78
 8023c08:	3301      	adds	r3, #1
 8023c0a:	4401      	add	r1, r0
 8023c0c:	9804      	ldr	r0, [sp, #16]
 8023c0e:	4402      	add	r2, r0
 8023c10:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023c12:	4298      	cmp	r0, r3
 8023c14:	dcee      	bgt.n	8023bf4 <_DrawBitmap+0x15c>
 8023c16:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8023c1a:	46de      	mov	lr, fp
 8023c1c:	f1be 0f00 	cmp.w	lr, #0
 8023c20:	d1cb      	bne.n	8023bba <_DrawBitmap+0x122>
 8023c22:	e743      	b.n	8023aac <_DrawBitmap+0x14>
 8023c24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c26:	9a08      	ldr	r2, [sp, #32]
 8023c28:	9300      	str	r3, [sp, #0]
 8023c2a:	9905      	ldr	r1, [sp, #20]
 8023c2c:	9b03      	ldr	r3, [sp, #12]
 8023c2e:	f7fa f80f 	bl	801dc50 <GUI_USAGE_AddRect>
 8023c32:	6823      	ldr	r3, [r4, #0]
 8023c34:	e75d      	b.n	8023af2 <_DrawBitmap+0x5a>
 8023c36:	3701      	adds	r7, #1
 8023c38:	42af      	cmp	r7, r5
 8023c3a:	d19e      	bne.n	8023b7a <_DrawBitmap+0xe2>
 8023c3c:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8023c40:	1bed      	subs	r5, r5, r7
 8023c42:	4631      	mov	r1, r6
 8023c44:	4650      	mov	r0, sl
 8023c46:	f8d9 3000 	ldr.w	r3, [r9]
 8023c4a:	465a      	mov	r2, fp
 8023c4c:	445e      	add	r6, fp
 8023c4e:	4798      	blx	r3
 8023c50:	44da      	add	sl, fp
 8023c52:	2d00      	cmp	r5, #0
 8023c54:	d18f      	bne.n	8023b76 <_DrawBitmap+0xde>
 8023c56:	e7a0      	b.n	8023b9a <_DrawBitmap+0x102>
 8023c58:	4b3c      	ldr	r3, [pc, #240]	; (8023d4c <_DrawBitmap+0x2b4>)
 8023c5a:	f8da 1000 	ldr.w	r1, [sl]
 8023c5e:	681b      	ldr	r3, [r3, #0]
 8023c60:	4798      	blx	r3
 8023c62:	f8ca 0000 	str.w	r0, [sl]
 8023c66:	e792      	b.n	8023b8e <_DrawBitmap+0xf6>
 8023c68:	f8d9 3000 	ldr.w	r3, [r9]
 8023c6c:	4639      	mov	r1, r7
 8023c6e:	9a08      	ldr	r2, [sp, #32]
 8023c70:	9802      	ldr	r0, [sp, #8]
 8023c72:	4798      	blx	r3
 8023c74:	e792      	b.n	8023b9c <_DrawBitmap+0x104>
 8023c76:	4610      	mov	r0, r2
 8023c78:	f7ee fe34 	bl	80128e4 <GUI_ALLOC_LockH>
 8023c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023c7e:	e726      	b.n	8023ace <_DrawBitmap+0x36>
 8023c80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c82:	2b00      	cmp	r3, #0
 8023c84:	dd95      	ble.n	8023bb2 <_DrawBitmap+0x11a>
 8023c86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023c88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8023c8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8023c90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c92:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023c94:	4453      	add	r3, sl
 8023c96:	9306      	str	r3, [sp, #24]
 8023c98:	b356      	cbz	r6, 8023cf0 <_DrawBitmap+0x258>
 8023c9a:	68b0      	ldr	r0, [r6, #8]
 8023c9c:	4652      	mov	r2, sl
 8023c9e:	9d03      	ldr	r5, [sp, #12]
 8023ca0:	46d9      	mov	r9, fp
 8023ca2:	6844      	ldr	r4, [r0, #4]
 8023ca4:	4630      	mov	r0, r6
 8023ca6:	462b      	mov	r3, r5
 8023ca8:	9905      	ldr	r1, [sp, #20]
 8023caa:	47a0      	blx	r4
 8023cac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8023cb0:	9c05      	ldr	r4, [sp, #20]
 8023cb2:	693b      	ldr	r3, [r7, #16]
 8023cb4:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8023cb8:	685b      	ldr	r3, [r3, #4]
 8023cba:	4798      	blx	r3
 8023cbc:	68b3      	ldr	r3, [r6, #8]
 8023cbe:	4621      	mov	r1, r4
 8023cc0:	f848 0b04 	str.w	r0, [r8], #4
 8023cc4:	4652      	mov	r2, sl
 8023cc6:	681b      	ldr	r3, [r3, #0]
 8023cc8:	4630      	mov	r0, r6
 8023cca:	3401      	adds	r4, #1
 8023ccc:	4798      	blx	r3
 8023cce:	3d01      	subs	r5, #1
 8023cd0:	d1ef      	bne.n	8023cb2 <_DrawBitmap+0x21a>
 8023cd2:	9b02      	ldr	r3, [sp, #8]
 8023cd4:	f10a 0a01 	add.w	sl, sl, #1
 8023cd8:	9a04      	ldr	r2, [sp, #16]
 8023cda:	4413      	add	r3, r2
 8023cdc:	9302      	str	r3, [sp, #8]
 8023cde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023ce0:	449b      	add	fp, r3
 8023ce2:	9b06      	ldr	r3, [sp, #24]
 8023ce4:	459a      	cmp	sl, r3
 8023ce6:	f43f af64 	beq.w	8023bb2 <_DrawBitmap+0x11a>
 8023cea:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8023cec:	2e00      	cmp	r6, #0
 8023cee:	d1d4      	bne.n	8023c9a <_DrawBitmap+0x202>
 8023cf0:	465e      	mov	r6, fp
 8023cf2:	9d02      	ldr	r5, [sp, #8]
 8023cf4:	9c03      	ldr	r4, [sp, #12]
 8023cf6:	693b      	ldr	r3, [r7, #16]
 8023cf8:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8023cfc:	685b      	ldr	r3, [r3, #4]
 8023cfe:	4798      	blx	r3
 8023d00:	3c01      	subs	r4, #1
 8023d02:	f845 0b04 	str.w	r0, [r5], #4
 8023d06:	d1f6      	bne.n	8023cf6 <_DrawBitmap+0x25e>
 8023d08:	e7e3      	b.n	8023cd2 <_DrawBitmap+0x23a>
 8023d0a:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8023d0e:	9b06      	ldr	r3, [sp, #24]
 8023d10:	a80f      	add	r0, sp, #60	; 0x3c
 8023d12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023d14:	3301      	adds	r3, #1
 8023d16:	461c      	mov	r4, r3
 8023d18:	9306      	str	r3, [sp, #24]
 8023d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d1c:	4413      	add	r3, r2
 8023d1e:	9a04      	ldr	r2, [sp, #16]
 8023d20:	931f      	str	r3, [sp, #124]	; 0x7c
 8023d22:	9b02      	ldr	r3, [sp, #8]
 8023d24:	4413      	add	r3, r2
 8023d26:	9302      	str	r3, [sp, #8]
 8023d28:	f7ee fdf0 	bl	801290c <GUI_ALLOC_UnlockH>
 8023d2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023d2e:	4294      	cmp	r4, r2
 8023d30:	f2c0 809e 	blt.w	8023e70 <_DrawBitmap+0x3d8>
 8023d34:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8023d38:	f1be 0f00 	cmp.w	lr, #0
 8023d3c:	f47f af3d 	bne.w	8023bba <_DrawBitmap+0x122>
 8023d40:	e6b4      	b.n	8023aac <_DrawBitmap+0x14>
 8023d42:	bf00      	nop
 8023d44:	20000018 	.word	0x20000018
 8023d48:	08034000 	.word	0x08034000
 8023d4c:	20000044 	.word	0x20000044
 8023d50:	2000004c 	.word	0x2000004c
 8023d54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	f340 8369 	ble.w	802442e <_DrawBitmap+0x996>
 8023d5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d5e:	9a03      	ldr	r2, [sp, #12]
 8023d60:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8023d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023d68:	189c      	adds	r4, r3, r2
 8023d6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d6c:	4658      	mov	r0, fp
 8023d6e:	465d      	mov	r5, fp
 8023d70:	444b      	add	r3, r9
 8023d72:	9306      	str	r3, [sp, #24]
 8023d74:	4b98      	ldr	r3, [pc, #608]	; (8023fd8 <_DrawBitmap+0x540>)
 8023d76:	681b      	ldr	r3, [r3, #0]
 8023d78:	7c1b      	ldrb	r3, [r3, #16]
 8023d7a:	f1ba 0f00 	cmp.w	sl, #0
 8023d7e:	d03f      	beq.n	8023e00 <_DrawBitmap+0x368>
 8023d80:	f013 0303 	ands.w	r3, r3, #3
 8023d84:	d031      	beq.n	8023dea <_DrawBitmap+0x352>
 8023d86:	2b02      	cmp	r3, #2
 8023d88:	d11c      	bne.n	8023dc4 <_DrawBitmap+0x32c>
 8023d8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023d8c:	2d00      	cmp	r5, #0
 8023d8e:	d05a      	beq.n	8023e46 <_DrawBitmap+0x3ae>
 8023d90:	f103 3bff 	add.w	fp, r3, #4294967295
 8023d94:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8023d98:	9f03      	ldr	r7, [sp, #12]
 8023d9a:	9e05      	ldr	r6, [sp, #20]
 8023d9c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8023da0:	4631      	mov	r1, r6
 8023da2:	464a      	mov	r2, r9
 8023da4:	3601      	adds	r6, #1
 8023da6:	4628      	mov	r0, r5
 8023da8:	b133      	cbz	r3, 8023db8 <_DrawBitmap+0x320>
 8023daa:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8023dae:	f8c8 3000 	str.w	r3, [r8]
 8023db2:	68ab      	ldr	r3, [r5, #8]
 8023db4:	681b      	ldr	r3, [r3, #0]
 8023db6:	4798      	blx	r3
 8023db8:	3f01      	subs	r7, #1
 8023dba:	f108 0804 	add.w	r8, r8, #4
 8023dbe:	d1ed      	bne.n	8023d9c <_DrawBitmap+0x304>
 8023dc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023dc2:	4628      	mov	r0, r5
 8023dc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023dc6:	f109 0901 	add.w	r9, r9, #1
 8023dca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023dcc:	4413      	add	r3, r2
 8023dce:	9a04      	ldr	r2, [sp, #16]
 8023dd0:	931f      	str	r3, [sp, #124]	; 0x7c
 8023dd2:	9b02      	ldr	r3, [sp, #8]
 8023dd4:	4413      	add	r3, r2
 8023dd6:	9302      	str	r3, [sp, #8]
 8023dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023dda:	441c      	add	r4, r3
 8023ddc:	9b06      	ldr	r3, [sp, #24]
 8023dde:	454b      	cmp	r3, r9
 8023de0:	d1c8      	bne.n	8023d74 <_DrawBitmap+0x2dc>
 8023de2:	2800      	cmp	r0, #0
 8023de4:	f47f aee9 	bne.w	8023bba <_DrawBitmap+0x122>
 8023de8:	e660      	b.n	8023aac <_DrawBitmap+0x14>
 8023dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023dec:	9a02      	ldr	r2, [sp, #8]
 8023dee:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023df2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023df6:	429c      	cmp	r4, r3
 8023df8:	f842 1b04 	str.w	r1, [r2], #4
 8023dfc:	d1f7      	bne.n	8023dee <_DrawBitmap+0x356>
 8023dfe:	e7e1      	b.n	8023dc4 <_DrawBitmap+0x32c>
 8023e00:	f013 0303 	ands.w	r3, r3, #3
 8023e04:	f000 830a 	beq.w	802441c <_DrawBitmap+0x984>
 8023e08:	2b02      	cmp	r3, #2
 8023e0a:	d1db      	bne.n	8023dc4 <_DrawBitmap+0x32c>
 8023e0c:	2d00      	cmp	r5, #0
 8023e0e:	f000 8314 	beq.w	802443a <_DrawBitmap+0x9a2>
 8023e12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023e14:	9f02      	ldr	r7, [sp, #8]
 8023e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8023e1a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8023e1e:	9e05      	ldr	r6, [sp, #20]
 8023e20:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8023e24:	4631      	mov	r1, r6
 8023e26:	464a      	mov	r2, r9
 8023e28:	3601      	adds	r6, #1
 8023e2a:	4628      	mov	r0, r5
 8023e2c:	b12b      	cbz	r3, 8023e3a <_DrawBitmap+0x3a2>
 8023e2e:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8023e32:	603b      	str	r3, [r7, #0]
 8023e34:	f8de 3000 	ldr.w	r3, [lr]
 8023e38:	4798      	blx	r3
 8023e3a:	f1bb 0b01 	subs.w	fp, fp, #1
 8023e3e:	f107 0704 	add.w	r7, r7, #4
 8023e42:	d1ed      	bne.n	8023e20 <_DrawBitmap+0x388>
 8023e44:	e7bc      	b.n	8023dc0 <_DrawBitmap+0x328>
 8023e46:	9a02      	ldr	r2, [sp, #8]
 8023e48:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023e4c:	b111      	cbz	r1, 8023e54 <_DrawBitmap+0x3bc>
 8023e4e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023e52:	6011      	str	r1, [r2, #0]
 8023e54:	42a3      	cmp	r3, r4
 8023e56:	f102 0204 	add.w	r2, r2, #4
 8023e5a:	d1f5      	bne.n	8023e48 <_DrawBitmap+0x3b0>
 8023e5c:	e7b1      	b.n	8023dc2 <_DrawBitmap+0x32a>
 8023e5e:	9306      	str	r3, [sp, #24]
 8023e60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023e62:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8023fdc <_DrawBitmap+0x544>
 8023e66:	f1c3 0308 	rsb	r3, r3, #8
 8023e6a:	9202      	str	r2, [sp, #8]
 8023e6c:	911f      	str	r1, [sp, #124]	; 0x7c
 8023e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8023e70:	4b59      	ldr	r3, [pc, #356]	; (8023fd8 <_DrawBitmap+0x540>)
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8023e76:	f7ee fd35 	bl	80128e4 <GUI_ALLOC_LockH>
 8023e7a:	4b57      	ldr	r3, [pc, #348]	; (8023fd8 <_DrawBitmap+0x540>)
 8023e7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	7812      	ldrb	r2, [r2, #0]
 8023e82:	7c1b      	ldrb	r3, [r3, #16]
 8023e84:	f819 4002 	ldrb.w	r4, [r9, r2]
 8023e88:	f003 0303 	and.w	r3, r3, #3
 8023e8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023e8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8023e90:	2b02      	cmp	r3, #2
 8023e92:	fa44 f402 	asr.w	r4, r4, r2
 8023e96:	d048      	beq.n	8023f2a <_DrawBitmap+0x492>
 8023e98:	2b03      	cmp	r3, #3
 8023e9a:	d020      	beq.n	8023ede <_DrawBitmap+0x446>
 8023e9c:	2b01      	cmp	r3, #1
 8023e9e:	d01e      	beq.n	8023ede <_DrawBitmap+0x446>
 8023ea0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023ea2:	9e02      	ldr	r6, [sp, #8]
 8023ea4:	9d03      	ldr	r5, [sp, #12]
 8023ea6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8023ea8:	42a8      	cmp	r0, r5
 8023eaa:	4631      	mov	r1, r6
 8023eac:	bf28      	it	cs
 8023eae:	4628      	movcs	r0, r5
 8023eb0:	1a2d      	subs	r5, r5, r0
 8023eb2:	4602      	mov	r2, r0
 8023eb4:	f004 0301 	and.w	r3, r4, #1
 8023eb8:	3a01      	subs	r2, #1
 8023eba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8023ebe:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8023ec2:	f841 3b04 	str.w	r3, [r1], #4
 8023ec6:	d1f5      	bne.n	8023eb4 <_DrawBitmap+0x41c>
 8023ec8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8023ecc:	2d00      	cmp	r5, #0
 8023ece:	f43f af1e 	beq.w	8023d0e <_DrawBitmap+0x276>
 8023ed2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8023ed6:	2008      	movs	r0, #8
 8023ed8:	f819 4003 	ldrb.w	r4, [r9, r3]
 8023edc:	e7e4      	b.n	8023ea8 <_DrawBitmap+0x410>
 8023ede:	6803      	ldr	r3, [r0, #0]
 8023ee0:	691b      	ldr	r3, [r3, #16]
 8023ee2:	689b      	ldr	r3, [r3, #8]
 8023ee4:	4798      	blx	r3
 8023ee6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023ee8:	9f02      	ldr	r7, [sp, #8]
 8023eea:	9e03      	ldr	r6, [sp, #12]
 8023eec:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8023ef0:	42b5      	cmp	r5, r6
 8023ef2:	463a      	mov	r2, r7
 8023ef4:	bf28      	it	cs
 8023ef6:	4635      	movcs	r5, r6
 8023ef8:	1b76      	subs	r6, r6, r5
 8023efa:	462b      	mov	r3, r5
 8023efc:	f014 0f01 	tst.w	r4, #1
 8023f00:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8023f04:	d002      	beq.n	8023f0c <_DrawBitmap+0x474>
 8023f06:	6811      	ldr	r1, [r2, #0]
 8023f08:	4041      	eors	r1, r0
 8023f0a:	6011      	str	r1, [r2, #0]
 8023f0c:	3b01      	subs	r3, #1
 8023f0e:	f102 0204 	add.w	r2, r2, #4
 8023f12:	d1f3      	bne.n	8023efc <_DrawBitmap+0x464>
 8023f14:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8023f18:	2e00      	cmp	r6, #0
 8023f1a:	f43f aef8 	beq.w	8023d0e <_DrawBitmap+0x276>
 8023f1e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8023f22:	2508      	movs	r5, #8
 8023f24:	f819 4003 	ldrb.w	r4, [r9, r3]
 8023f28:	e7e2      	b.n	8023ef0 <_DrawBitmap+0x458>
 8023f2a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023f2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8023f30:	9209      	str	r2, [sp, #36]	; 0x24
 8023f32:	9908      	ldr	r1, [sp, #32]
 8023f34:	9a06      	ldr	r2, [sp, #24]
 8023f36:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8023f3a:	469a      	mov	sl, r3
 8023f3c:	440a      	add	r2, r1
 8023f3e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8023f42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023f44:	9e02      	ldr	r6, [sp, #8]
 8023f46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8023f4a:	9f05      	ldr	r7, [sp, #20]
 8023f4c:	9207      	str	r2, [sp, #28]
 8023f4e:	4545      	cmp	r5, r8
 8023f50:	bf28      	it	cs
 8023f52:	4645      	movcs	r5, r8
 8023f54:	ebc5 0808 	rsb	r8, r5, r8
 8023f58:	f1bb 0f00 	cmp.w	fp, #0
 8023f5c:	d029      	beq.n	8023fb2 <_DrawBitmap+0x51a>
 8023f5e:	b944      	cbnz	r4, 8023f72 <_DrawBitmap+0x4da>
 8023f60:	e023      	b.n	8023faa <_DrawBitmap+0x512>
 8023f62:	3d01      	subs	r5, #1
 8023f64:	f107 0701 	add.w	r7, r7, #1
 8023f68:	f106 0604 	add.w	r6, r6, #4
 8023f6c:	d011      	beq.n	8023f92 <_DrawBitmap+0x4fa>
 8023f6e:	0864      	lsrs	r4, r4, #1
 8023f70:	d01b      	beq.n	8023faa <_DrawBitmap+0x512>
 8023f72:	07e1      	lsls	r1, r4, #31
 8023f74:	d5f5      	bpl.n	8023f62 <_DrawBitmap+0x4ca>
 8023f76:	f8db 3008 	ldr.w	r3, [fp, #8]
 8023f7a:	4639      	mov	r1, r7
 8023f7c:	9a07      	ldr	r2, [sp, #28]
 8023f7e:	4658      	mov	r0, fp
 8023f80:	681b      	ldr	r3, [r3, #0]
 8023f82:	3701      	adds	r7, #1
 8023f84:	4798      	blx	r3
 8023f86:	3d01      	subs	r5, #1
 8023f88:	f8c6 a000 	str.w	sl, [r6]
 8023f8c:	f106 0604 	add.w	r6, r6, #4
 8023f90:	d1ed      	bne.n	8023f6e <_DrawBitmap+0x4d6>
 8023f92:	f1b8 0f00 	cmp.w	r8, #0
 8023f96:	f43f aeb8 	beq.w	8023d0a <_DrawBitmap+0x272>
 8023f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f9c:	2508      	movs	r5, #8
 8023f9e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8023fa4:	f819 4003 	ldrb.w	r4, [r9, r3]
 8023fa8:	e7d1      	b.n	8023f4e <_DrawBitmap+0x4b6>
 8023faa:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8023fae:	442f      	add	r7, r5
 8023fb0:	e7ef      	b.n	8023f92 <_DrawBitmap+0x4fa>
 8023fb2:	b174      	cbz	r4, 8023fd2 <_DrawBitmap+0x53a>
 8023fb4:	4653      	mov	r3, sl
 8023fb6:	e001      	b.n	8023fbc <_DrawBitmap+0x524>
 8023fb8:	0864      	lsrs	r4, r4, #1
 8023fba:	d009      	beq.n	8023fd0 <_DrawBitmap+0x538>
 8023fbc:	07e2      	lsls	r2, r4, #31
 8023fbe:	f106 0604 	add.w	r6, r6, #4
 8023fc2:	bf48      	it	mi
 8023fc4:	f846 3c04 	strmi.w	r3, [r6, #-4]
 8023fc8:	3d01      	subs	r5, #1
 8023fca:	d1f5      	bne.n	8023fb8 <_DrawBitmap+0x520>
 8023fcc:	469a      	mov	sl, r3
 8023fce:	e7e0      	b.n	8023f92 <_DrawBitmap+0x4fa>
 8023fd0:	469a      	mov	sl, r3
 8023fd2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8023fd6:	e7dc      	b.n	8023f92 <_DrawBitmap+0x4fa>
 8023fd8:	20000018 	.word	0x20000018
 8023fdc:	08033ecc 	.word	0x08033ecc
 8023fe0:	911f      	str	r1, [sp, #124]	; 0x7c
 8023fe2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023fe4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8023fe8:	9306      	str	r3, [sp, #24]
 8023fea:	f1c1 0302 	rsb	r3, r1, #2
 8023fee:	46d8      	mov	r8, fp
 8023ff0:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8023ff4:	b2d9      	uxtb	r1, r3
 8023ff6:	4613      	mov	r3, r2
 8023ff8:	910b      	str	r1, [sp, #44]	; 0x2c
 8023ffa:	3304      	adds	r3, #4
 8023ffc:	46c6      	mov	lr, r8
 8023ffe:	4645      	mov	r5, r8
 8024000:	9307      	str	r3, [sp, #28]
 8024002:	4b99      	ldr	r3, [pc, #612]	; (8024268 <_DrawBitmap+0x7d0>)
 8024004:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024006:	681a      	ldr	r2, [r3, #0]
 8024008:	9b07      	ldr	r3, [sp, #28]
 802400a:	7c12      	ldrb	r2, [r2, #16]
 802400c:	f1a3 0904 	sub.w	r9, r3, #4
 8024010:	f89b 3000 	ldrb.w	r3, [fp]
 8024014:	f002 0203 	and.w	r2, r2, #3
 8024018:	408b      	lsls	r3, r1
 802401a:	2a01      	cmp	r2, #1
 802401c:	b2dc      	uxtb	r4, r3
 802401e:	f000 80d4 	beq.w	80241ca <_DrawBitmap+0x732>
 8024022:	f0c0 80a0 	bcc.w	8024166 <_DrawBitmap+0x6ce>
 8024026:	2a02      	cmp	r2, #2
 8024028:	d15c      	bne.n	80240e4 <_DrawBitmap+0x64c>
 802402a:	9908      	ldr	r1, [sp, #32]
 802402c:	9a06      	ldr	r2, [sp, #24]
 802402e:	440a      	add	r2, r1
 8024030:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024032:	9209      	str	r2, [sp, #36]	; 0x24
 8024034:	2900      	cmp	r1, #0
 8024036:	f000 8112 	beq.w	802425e <_DrawBitmap+0x7c6>
 802403a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 802403e:	d00a      	beq.n	8024056 <_DrawBitmap+0x5be>
 8024040:	0924      	lsrs	r4, r4, #4
 8024042:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8024046:	f8c9 3000 	str.w	r3, [r9]
 802404a:	b125      	cbz	r5, 8024056 <_DrawBitmap+0x5be>
 802404c:	68ab      	ldr	r3, [r5, #8]
 802404e:	4628      	mov	r0, r5
 8024050:	9905      	ldr	r1, [sp, #20]
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	4798      	blx	r3
 8024056:	9b05      	ldr	r3, [sp, #20]
 8024058:	f10b 0701 	add.w	r7, fp, #1
 802405c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8024060:	3301      	adds	r3, #1
 8024062:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024066:	9302      	str	r3, [sp, #8]
 8024068:	9b03      	ldr	r3, [sp, #12]
 802406a:	1e5e      	subs	r6, r3, #1
 802406c:	2e01      	cmp	r6, #1
 802406e:	dd58      	ble.n	8024122 <_DrawBitmap+0x68a>
 8024070:	2d00      	cmp	r5, #0
 8024072:	f000 80ce 	beq.w	8024212 <_DrawBitmap+0x77a>
 8024076:	4632      	mov	r2, r6
 8024078:	9b02      	ldr	r3, [sp, #8]
 802407a:	f109 0808 	add.w	r8, r9, #8
 802407e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8024082:	960d      	str	r6, [sp, #52]	; 0x34
 8024084:	4691      	mov	r9, r2
 8024086:	461e      	mov	r6, r3
 8024088:	e01d      	b.n	80240c6 <_DrawBitmap+0x62e>
 802408a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802408e:	f848 3c08 	str.w	r3, [r8, #-8]
 8024092:	68ab      	ldr	r3, [r5, #8]
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	4798      	blx	r3
 8024098:	f014 040f 	ands.w	r4, r4, #15
 802409c:	d009      	beq.n	80240b2 <_DrawBitmap+0x61a>
 802409e:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80240a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240a4:	f848 3c04 	str.w	r3, [r8, #-4]
 80240a8:	68ab      	ldr	r3, [r5, #8]
 80240aa:	1c71      	adds	r1, r6, #1
 80240ac:	4628      	mov	r0, r5
 80240ae:	681b      	ldr	r3, [r3, #0]
 80240b0:	4798      	blx	r3
 80240b2:	f1a9 0902 	sub.w	r9, r9, #2
 80240b6:	3602      	adds	r6, #2
 80240b8:	f108 0808 	add.w	r8, r8, #8
 80240bc:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 80240c0:	f1b9 0f01 	cmp.w	r9, #1
 80240c4:	dd1e      	ble.n	8024104 <_DrawBitmap+0x66c>
 80240c6:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80240ca:	ea4f 1314 	mov.w	r3, r4, lsr #4
 80240ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240d0:	4631      	mov	r1, r6
 80240d2:	4628      	mov	r0, r5
 80240d4:	d1d9      	bne.n	802408a <_DrawBitmap+0x5f2>
 80240d6:	2c00      	cmp	r4, #0
 80240d8:	d0eb      	beq.n	80240b2 <_DrawBitmap+0x61a>
 80240da:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80240de:	f848 3c04 	str.w	r3, [r8, #-4]
 80240e2:	e7e1      	b.n	80240a8 <_DrawBitmap+0x610>
 80240e4:	9b06      	ldr	r3, [sp, #24]
 80240e6:	46a8      	mov	r8, r5
 80240e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80240ea:	3301      	adds	r3, #1
 80240ec:	461a      	mov	r2, r3
 80240ee:	9306      	str	r3, [sp, #24]
 80240f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80240f2:	428a      	cmp	r2, r1
 80240f4:	449b      	add	fp, r3
 80240f6:	9b04      	ldr	r3, [sp, #16]
 80240f8:	444b      	add	r3, r9
 80240fa:	f6ff af7e 	blt.w	8023ffa <_DrawBitmap+0x562>
 80240fe:	46ab      	mov	fp, r5
 8024100:	46de      	mov	lr, fp
 8024102:	e58b      	b.n	8023c1c <_DrawBitmap+0x184>
 8024104:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024106:	9902      	ldr	r1, [sp, #8]
 8024108:	3e02      	subs	r6, #2
 802410a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802410e:	3102      	adds	r1, #2
 8024110:	0873      	lsrs	r3, r6, #1
 8024112:	1c5a      	adds	r2, r3, #1
 8024114:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8024118:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 802411c:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 8024120:	9102      	str	r1, [sp, #8]
 8024122:	b166      	cbz	r6, 802413e <_DrawBitmap+0x6a6>
 8024124:	0924      	lsrs	r4, r4, #4
 8024126:	d00a      	beq.n	802413e <_DrawBitmap+0x6a6>
 8024128:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802412c:	f8c9 3000 	str.w	r3, [r9]
 8024130:	b12d      	cbz	r5, 802413e <_DrawBitmap+0x6a6>
 8024132:	68ab      	ldr	r3, [r5, #8]
 8024134:	4628      	mov	r0, r5
 8024136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024138:	9902      	ldr	r1, [sp, #8]
 802413a:	681b      	ldr	r3, [r3, #0]
 802413c:	4798      	blx	r3
 802413e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024140:	46ae      	mov	lr, r5
 8024142:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024144:	9904      	ldr	r1, [sp, #16]
 8024146:	4493      	add	fp, r2
 8024148:	9a07      	ldr	r2, [sp, #28]
 802414a:	9b06      	ldr	r3, [sp, #24]
 802414c:	440a      	add	r2, r1
 802414e:	3301      	adds	r3, #1
 8024150:	9207      	str	r2, [sp, #28]
 8024152:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024154:	9306      	str	r3, [sp, #24]
 8024156:	4293      	cmp	r3, r2
 8024158:	f6ff af53 	blt.w	8024002 <_DrawBitmap+0x56a>
 802415c:	f1be 0f00 	cmp.w	lr, #0
 8024160:	f47f ad2b 	bne.w	8023bba <_DrawBitmap+0x122>
 8024164:	e4a2      	b.n	8023aac <_DrawBitmap+0x14>
 8024166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024168:	2b00      	cmp	r3, #0
 802416a:	d04f      	beq.n	802420c <_DrawBitmap+0x774>
 802416c:	0924      	lsrs	r4, r4, #4
 802416e:	9b03      	ldr	r3, [sp, #12]
 8024170:	f10b 0201 	add.w	r2, fp, #1
 8024174:	1e59      	subs	r1, r3, #1
 8024176:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802417a:	f8c9 3000 	str.w	r3, [r9]
 802417e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8024182:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024186:	2901      	cmp	r1, #1
 8024188:	dd17      	ble.n	80241ba <_DrawBitmap+0x722>
 802418a:	104f      	asrs	r7, r1, #1
 802418c:	f109 0308 	add.w	r3, r9, #8
 8024190:	f001 0101 	and.w	r1, r1, #1
 8024194:	19d6      	adds	r6, r2, r7
 8024196:	0920      	lsrs	r0, r4, #4
 8024198:	f004 040f 	and.w	r4, r4, #15
 802419c:	3308      	adds	r3, #8
 802419e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 80241a2:	f843 0c10 	str.w	r0, [r3, #-16]
 80241a6:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80241aa:	f843 0c0c 	str.w	r0, [r3, #-12]
 80241ae:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80241b2:	42b2      	cmp	r2, r6
 80241b4:	d1ef      	bne.n	8024196 <_DrawBitmap+0x6fe>
 80241b6:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80241ba:	2900      	cmp	r1, #0
 80241bc:	d0c1      	beq.n	8024142 <_DrawBitmap+0x6aa>
 80241be:	0924      	lsrs	r4, r4, #4
 80241c0:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80241c4:	f8c9 3000 	str.w	r3, [r9]
 80241c8:	e7bb      	b.n	8024142 <_DrawBitmap+0x6aa>
 80241ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241cc:	4658      	mov	r0, fp
 80241ce:	9903      	ldr	r1, [sp, #12]
 80241d0:	428b      	cmp	r3, r1
 80241d2:	bfc8      	it	gt
 80241d4:	b2cb      	uxtbgt	r3, r1
 80241d6:	1e5a      	subs	r2, r3, #1
 80241d8:	1ac9      	subs	r1, r1, r3
 80241da:	b2d2      	uxtb	r2, r2
 80241dc:	3201      	adds	r2, #1
 80241de:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80241e2:	0123      	lsls	r3, r4, #4
 80241e4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80241e8:	b2dc      	uxtb	r4, r3
 80241ea:	d005      	beq.n	80241f8 <_DrawBitmap+0x760>
 80241ec:	f8d9 3000 	ldr.w	r3, [r9]
 80241f0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80241f4:	f8c9 3000 	str.w	r3, [r9]
 80241f8:	f109 0904 	add.w	r9, r9, #4
 80241fc:	4591      	cmp	r9, r2
 80241fe:	d1f0      	bne.n	80241e2 <_DrawBitmap+0x74a>
 8024200:	2900      	cmp	r1, #0
 8024202:	d09e      	beq.n	8024142 <_DrawBitmap+0x6aa>
 8024204:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8024208:	2302      	movs	r3, #2
 802420a:	e7e1      	b.n	80241d0 <_DrawBitmap+0x738>
 802420c:	9903      	ldr	r1, [sp, #12]
 802420e:	465a      	mov	r2, fp
 8024210:	e7b9      	b.n	8024186 <_DrawBitmap+0x6ee>
 8024212:	3e02      	subs	r6, #2
 8024214:	f109 0308 	add.w	r3, r9, #8
 8024218:	0872      	lsrs	r2, r6, #1
 802421a:	1c51      	adds	r1, r2, #1
 802421c:	4694      	mov	ip, r2
 802421e:	1878      	adds	r0, r7, r1
 8024220:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8024224:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 8024228:	d003      	beq.n	8024232 <_DrawBitmap+0x79a>
 802422a:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 802422e:	f843 2c08 	str.w	r2, [r3, #-8]
 8024232:	f014 040f 	ands.w	r4, r4, #15
 8024236:	d003      	beq.n	8024240 <_DrawBitmap+0x7a8>
 8024238:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 802423c:	f843 4c04 	str.w	r4, [r3, #-4]
 8024240:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8024244:	3308      	adds	r3, #8
 8024246:	42b8      	cmp	r0, r7
 8024248:	d1ea      	bne.n	8024220 <_DrawBitmap+0x788>
 802424a:	9b02      	ldr	r3, [sp, #8]
 802424c:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 8024250:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 8024254:	3302      	adds	r3, #2
 8024256:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 802425a:	9302      	str	r3, [sp, #8]
 802425c:	e761      	b.n	8024122 <_DrawBitmap+0x68a>
 802425e:	9b05      	ldr	r3, [sp, #20]
 8024260:	465f      	mov	r7, fp
 8024262:	9e03      	ldr	r6, [sp, #12]
 8024264:	9302      	str	r3, [sp, #8]
 8024266:	e701      	b.n	802406c <_DrawBitmap+0x5d4>
 8024268:	20000018 	.word	0x20000018
 802426c:	9306      	str	r3, [sp, #24]
 802426e:	46d0      	mov	r8, sl
 8024270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024272:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8024276:	f1c3 0304 	rsb	r3, r3, #4
 802427a:	9202      	str	r2, [sp, #8]
 802427c:	911f      	str	r1, [sp, #124]	; 0x7c
 802427e:	b2db      	uxtb	r3, r3
 8024280:	930b      	str	r3, [sp, #44]	; 0x2c
 8024282:	46de      	mov	lr, fp
 8024284:	465f      	mov	r7, fp
 8024286:	4b72      	ldr	r3, [pc, #456]	; (8024450 <_DrawBitmap+0x9b8>)
 8024288:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	7814      	ldrb	r4, [r2, #0]
 802428e:	7c1b      	ldrb	r3, [r3, #16]
 8024290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024292:	f003 0303 	and.w	r3, r3, #3
 8024296:	4094      	lsls	r4, r2
 8024298:	2b01      	cmp	r3, #1
 802429a:	b2e4      	uxtb	r4, r4
 802429c:	f000 809f 	beq.w	80243de <_DrawBitmap+0x946>
 80242a0:	d37d      	bcc.n	802439e <_DrawBitmap+0x906>
 80242a2:	2b02      	cmp	r3, #2
 80242a4:	d169      	bne.n	802437a <_DrawBitmap+0x8e2>
 80242a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80242a8:	9906      	ldr	r1, [sp, #24]
 80242aa:	9209      	str	r2, [sp, #36]	; 0x24
 80242ac:	9a05      	ldr	r2, [sp, #20]
 80242ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242b0:	9207      	str	r2, [sp, #28]
 80242b2:	9a08      	ldr	r2, [sp, #32]
 80242b4:	9d02      	ldr	r5, [sp, #8]
 80242b6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80242ba:	eb02 0b01 	add.w	fp, r2, r1
 80242be:	4553      	cmp	r3, sl
 80242c0:	bfc8      	it	gt
 80242c2:	fa5f f38a 	uxtbgt.w	r3, sl
 80242c6:	ebc3 0a0a 	rsb	sl, r3, sl
 80242ca:	3b01      	subs	r3, #1
 80242cc:	b34f      	cbz	r7, 8024322 <_DrawBitmap+0x88a>
 80242ce:	b2db      	uxtb	r3, r3
 80242d0:	9e07      	ldr	r6, [sp, #28]
 80242d2:	f103 0901 	add.w	r9, r3, #1
 80242d6:	930a      	str	r3, [sp, #40]	; 0x28
 80242d8:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 80242dc:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80242e0:	4631      	mov	r1, r6
 80242e2:	ea4f 1394 	mov.w	r3, r4, lsr #6
 80242e6:	f106 0601 	add.w	r6, r6, #1
 80242ea:	465a      	mov	r2, fp
 80242ec:	4638      	mov	r0, r7
 80242ee:	d005      	beq.n	80242fc <_DrawBitmap+0x864>
 80242f0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80242f4:	602b      	str	r3, [r5, #0]
 80242f6:	68bb      	ldr	r3, [r7, #8]
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	4798      	blx	r3
 80242fc:	3504      	adds	r5, #4
 80242fe:	00a4      	lsls	r4, r4, #2
 8024300:	454d      	cmp	r5, r9
 8024302:	b2e4      	uxtb	r4, r4
 8024304:	d1ea      	bne.n	80242dc <_DrawBitmap+0x844>
 8024306:	9b07      	ldr	r3, [sp, #28]
 8024308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802430a:	3301      	adds	r3, #1
 802430c:	441a      	add	r2, r3
 802430e:	9207      	str	r2, [sp, #28]
 8024310:	f1ba 0f00 	cmp.w	sl, #0
 8024314:	d01b      	beq.n	802434e <_DrawBitmap+0x8b6>
 8024316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024318:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802431c:	9309      	str	r3, [sp, #36]	; 0x24
 802431e:	2304      	movs	r3, #4
 8024320:	e7cd      	b.n	80242be <_DrawBitmap+0x826>
 8024322:	b2da      	uxtb	r2, r3
 8024324:	1c50      	adds	r0, r2, #1
 8024326:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 802432a:	00a3      	lsls	r3, r4, #2
 802432c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8024330:	ea4f 1194 	mov.w	r1, r4, lsr #6
 8024334:	b2dc      	uxtb	r4, r3
 8024336:	d002      	beq.n	802433e <_DrawBitmap+0x8a6>
 8024338:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 802433c:	602b      	str	r3, [r5, #0]
 802433e:	3504      	adds	r5, #4
 8024340:	42a8      	cmp	r0, r5
 8024342:	d1f2      	bne.n	802432a <_DrawBitmap+0x892>
 8024344:	9b07      	ldr	r3, [sp, #28]
 8024346:	3301      	adds	r3, #1
 8024348:	18d3      	adds	r3, r2, r3
 802434a:	9307      	str	r3, [sp, #28]
 802434c:	e7e0      	b.n	8024310 <_DrawBitmap+0x878>
 802434e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024350:	46be      	mov	lr, r7
 8024352:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024354:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024356:	9b06      	ldr	r3, [sp, #24]
 8024358:	440a      	add	r2, r1
 802435a:	9904      	ldr	r1, [sp, #16]
 802435c:	3301      	adds	r3, #1
 802435e:	921f      	str	r2, [sp, #124]	; 0x7c
 8024360:	9a02      	ldr	r2, [sp, #8]
 8024362:	9306      	str	r3, [sp, #24]
 8024364:	440a      	add	r2, r1
 8024366:	9202      	str	r2, [sp, #8]
 8024368:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802436a:	429a      	cmp	r2, r3
 802436c:	dc8b      	bgt.n	8024286 <_DrawBitmap+0x7ee>
 802436e:	f1be 0f00 	cmp.w	lr, #0
 8024372:	f47f ac22 	bne.w	8023bba <_DrawBitmap+0x122>
 8024376:	f7ff bb99 	b.w	8023aac <_DrawBitmap+0x14>
 802437a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802437c:	46bb      	mov	fp, r7
 802437e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024380:	9b06      	ldr	r3, [sp, #24]
 8024382:	440a      	add	r2, r1
 8024384:	9904      	ldr	r1, [sp, #16]
 8024386:	3301      	adds	r3, #1
 8024388:	921f      	str	r2, [sp, #124]	; 0x7c
 802438a:	9a02      	ldr	r2, [sp, #8]
 802438c:	9306      	str	r3, [sp, #24]
 802438e:	440a      	add	r2, r1
 8024390:	9202      	str	r2, [sp, #8]
 8024392:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024394:	429a      	cmp	r2, r3
 8024396:	f73f af74 	bgt.w	8024282 <_DrawBitmap+0x7ea>
 802439a:	46de      	mov	lr, fp
 802439c:	e43e      	b.n	8023c1c <_DrawBitmap+0x184>
 802439e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243a0:	9e02      	ldr	r6, [sp, #8]
 80243a2:	9d03      	ldr	r5, [sp, #12]
 80243a4:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 80243a8:	42ab      	cmp	r3, r5
 80243aa:	bfc8      	it	gt
 80243ac:	b2eb      	uxtbgt	r3, r5
 80243ae:	1e58      	subs	r0, r3, #1
 80243b0:	1aed      	subs	r5, r5, r3
 80243b2:	1f33      	subs	r3, r6, #4
 80243b4:	b2c0      	uxtb	r0, r0
 80243b6:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 80243ba:	09a2      	lsrs	r2, r4, #6
 80243bc:	00a4      	lsls	r4, r4, #2
 80243be:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80243c2:	b2e4      	uxtb	r4, r4
 80243c4:	f843 2f04 	str.w	r2, [r3, #4]!
 80243c8:	428b      	cmp	r3, r1
 80243ca:	d1f6      	bne.n	80243ba <_DrawBitmap+0x922>
 80243cc:	3001      	adds	r0, #1
 80243ce:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80243d2:	2d00      	cmp	r5, #0
 80243d4:	d0bd      	beq.n	8024352 <_DrawBitmap+0x8ba>
 80243d6:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80243da:	2304      	movs	r3, #4
 80243dc:	e7e4      	b.n	80243a8 <_DrawBitmap+0x910>
 80243de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80243e0:	9b02      	ldr	r3, [sp, #8]
 80243e2:	9803      	ldr	r0, [sp, #12]
 80243e4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80243e6:	4282      	cmp	r2, r0
 80243e8:	bfc8      	it	gt
 80243ea:	b2c2      	uxtbgt	r2, r0
 80243ec:	1e51      	subs	r1, r2, #1
 80243ee:	1a80      	subs	r0, r0, r2
 80243f0:	b2c9      	uxtb	r1, r1
 80243f2:	3101      	adds	r1, #1
 80243f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80243f8:	00a2      	lsls	r2, r4, #2
 80243fa:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80243fe:	b2d4      	uxtb	r4, r2
 8024400:	d003      	beq.n	802440a <_DrawBitmap+0x972>
 8024402:	681a      	ldr	r2, [r3, #0]
 8024404:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8024408:	601a      	str	r2, [r3, #0]
 802440a:	3304      	adds	r3, #4
 802440c:	428b      	cmp	r3, r1
 802440e:	d1f3      	bne.n	80243f8 <_DrawBitmap+0x960>
 8024410:	2800      	cmp	r0, #0
 8024412:	d09e      	beq.n	8024352 <_DrawBitmap+0x8ba>
 8024414:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8024418:	2204      	movs	r2, #4
 802441a:	e7e4      	b.n	80243e6 <_DrawBitmap+0x94e>
 802441c:	4b0d      	ldr	r3, [pc, #52]	; (8024454 <_DrawBitmap+0x9bc>)
 802441e:	9a03      	ldr	r2, [sp, #12]
 8024420:	681b      	ldr	r3, [r3, #0]
 8024422:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024424:	9802      	ldr	r0, [sp, #8]
 8024426:	4798      	blx	r3
 8024428:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802442a:	4628      	mov	r0, r5
 802442c:	e4ca      	b.n	8023dc4 <_DrawBitmap+0x32c>
 802442e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024430:	2800      	cmp	r0, #0
 8024432:	f47f abc2 	bne.w	8023bba <_DrawBitmap+0x122>
 8024436:	f7ff bb39 	b.w	8023aac <_DrawBitmap+0x14>
 802443a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802443c:	9b02      	ldr	r3, [sp, #8]
 802443e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8024442:	b101      	cbz	r1, 8024446 <_DrawBitmap+0x9ae>
 8024444:	6019      	str	r1, [r3, #0]
 8024446:	42a2      	cmp	r2, r4
 8024448:	f103 0304 	add.w	r3, r3, #4
 802444c:	d1f7      	bne.n	802443e <_DrawBitmap+0x9a6>
 802444e:	e4b8      	b.n	8023dc2 <_DrawBitmap+0x32a>
 8024450:	20000018 	.word	0x20000018
 8024454:	2000004c 	.word	0x2000004c

08024458 <_GetPixelIndex>:
 8024458:	4b0e      	ldr	r3, [pc, #56]	; (8024494 <_GetPixelIndex+0x3c>)
 802445a:	681b      	ldr	r3, [r3, #0]
 802445c:	b570      	push	{r4, r5, r6, lr}
 802445e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024460:	b082      	sub	sp, #8
 8024462:	460e      	mov	r6, r1
 8024464:	4614      	mov	r4, r2
 8024466:	f7ee fa3d 	bl	80128e4 <GUI_ALLOC_LockH>
 802446a:	4605      	mov	r5, r0
 802446c:	a802      	add	r0, sp, #8
 802446e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8024472:	68eb      	ldr	r3, [r5, #12]
 8024474:	1aa2      	subs	r2, r4, r2
 8024476:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 802447a:	f840 5d04 	str.w	r5, [r0, #-4]!
 802447e:	fb03 f302 	mul.w	r3, r3, r2
 8024482:	1b34      	subs	r4, r6, r4
 8024484:	3318      	adds	r3, #24
 8024486:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802448a:	f7ee fa3f 	bl	801290c <GUI_ALLOC_UnlockH>
 802448e:	5928      	ldr	r0, [r5, r4]
 8024490:	b002      	add	sp, #8
 8024492:	bd70      	pop	{r4, r5, r6, pc}
 8024494:	20000018 	.word	0x20000018

08024498 <_SetPixelIndex>:
 8024498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802449c:	4c1b      	ldr	r4, [pc, #108]	; (802450c <_SetPixelIndex+0x74>)
 802449e:	4699      	mov	r9, r3
 80244a0:	b083      	sub	sp, #12
 80244a2:	460f      	mov	r7, r1
 80244a4:	6823      	ldr	r3, [r4, #0]
 80244a6:	4690      	mov	r8, r2
 80244a8:	ae02      	add	r6, sp, #8
 80244aa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80244ac:	f7ee fa1a 	bl	80128e4 <GUI_ALLOC_LockH>
 80244b0:	6823      	ldr	r3, [r4, #0]
 80244b2:	9000      	str	r0, [sp, #0]
 80244b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80244b6:	f7ee fa15 	bl	80128e4 <GUI_ALLOC_LockH>
 80244ba:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80244be:	68c1      	ldr	r1, [r0, #12]
 80244c0:	4605      	mov	r5, r0
 80244c2:	ebc2 0208 	rsb	r2, r2, r8
 80244c6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80244ca:	f846 0d04 	str.w	r0, [r6, #-4]!
 80244ce:	4630      	mov	r0, r6
 80244d0:	fb01 f202 	mul.w	r2, r1, r2
 80244d4:	1b3c      	subs	r4, r7, r4
 80244d6:	3218      	adds	r2, #24
 80244d8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80244dc:	f7ee fa16 	bl	801290c <GUI_ALLOC_UnlockH>
 80244e0:	9b00      	ldr	r3, [sp, #0]
 80244e2:	f845 9004 	str.w	r9, [r5, r4]
 80244e6:	6958      	ldr	r0, [r3, #20]
 80244e8:	b150      	cbz	r0, 8024500 <_SetPixelIndex+0x68>
 80244ea:	f7ee f9fb 	bl	80128e4 <GUI_ALLOC_LockH>
 80244ee:	9001      	str	r0, [sp, #4]
 80244f0:	6883      	ldr	r3, [r0, #8]
 80244f2:	4642      	mov	r2, r8
 80244f4:	4639      	mov	r1, r7
 80244f6:	681b      	ldr	r3, [r3, #0]
 80244f8:	4798      	blx	r3
 80244fa:	4630      	mov	r0, r6
 80244fc:	f7ee fa06 	bl	801290c <GUI_ALLOC_UnlockH>
 8024500:	4668      	mov	r0, sp
 8024502:	f7ee fa03 	bl	801290c <GUI_ALLOC_UnlockH>
 8024506:	b003      	add	sp, #12
 8024508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802450c:	20000018 	.word	0x20000018

08024510 <_XorPixel>:
 8024510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024514:	4c1e      	ldr	r4, [pc, #120]	; (8024590 <_XorPixel+0x80>)
 8024516:	b082      	sub	sp, #8
 8024518:	460f      	mov	r7, r1
 802451a:	4690      	mov	r8, r2
 802451c:	6823      	ldr	r3, [r4, #0]
 802451e:	ae02      	add	r6, sp, #8
 8024520:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024522:	f7ee f9df 	bl	80128e4 <GUI_ALLOC_LockH>
 8024526:	6823      	ldr	r3, [r4, #0]
 8024528:	9000      	str	r0, [sp, #0]
 802452a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 802452c:	f7ee f9da 	bl	80128e4 <GUI_ALLOC_LockH>
 8024530:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8024534:	68c2      	ldr	r2, [r0, #12]
 8024536:	4605      	mov	r5, r0
 8024538:	ebc3 0308 	rsb	r3, r3, r8
 802453c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8024540:	f846 0d04 	str.w	r0, [r6, #-4]!
 8024544:	4630      	mov	r0, r6
 8024546:	fb02 f303 	mul.w	r3, r2, r3
 802454a:	1b3c      	subs	r4, r7, r4
 802454c:	3318      	adds	r3, #24
 802454e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024552:	f7ee f9db 	bl	801290c <GUI_ALLOC_UnlockH>
 8024556:	9b00      	ldr	r3, [sp, #0]
 8024558:	681b      	ldr	r3, [r3, #0]
 802455a:	691b      	ldr	r3, [r3, #16]
 802455c:	689b      	ldr	r3, [r3, #8]
 802455e:	4798      	blx	r3
 8024560:	592b      	ldr	r3, [r5, r4]
 8024562:	9a00      	ldr	r2, [sp, #0]
 8024564:	4058      	eors	r0, r3
 8024566:	5128      	str	r0, [r5, r4]
 8024568:	6950      	ldr	r0, [r2, #20]
 802456a:	b150      	cbz	r0, 8024582 <_XorPixel+0x72>
 802456c:	f7ee f9ba 	bl	80128e4 <GUI_ALLOC_LockH>
 8024570:	9001      	str	r0, [sp, #4]
 8024572:	6883      	ldr	r3, [r0, #8]
 8024574:	4642      	mov	r2, r8
 8024576:	4639      	mov	r1, r7
 8024578:	681b      	ldr	r3, [r3, #0]
 802457a:	4798      	blx	r3
 802457c:	4630      	mov	r0, r6
 802457e:	f7ee f9c5 	bl	801290c <GUI_ALLOC_UnlockH>
 8024582:	4668      	mov	r0, sp
 8024584:	f7ee f9c2 	bl	801290c <GUI_ALLOC_UnlockH>
 8024588:	b002      	add	sp, #8
 802458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802458e:	bf00      	nop
 8024590:	20000018 	.word	0x20000018

08024594 <_FillRect>:
 8024594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024598:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 802467c <_FillRect+0xe8>
 802459c:	461f      	mov	r7, r3
 802459e:	b087      	sub	sp, #28
 80245a0:	460c      	mov	r4, r1
 80245a2:	f8d8 3000 	ldr.w	r3, [r8]
 80245a6:	4616      	mov	r6, r2
 80245a8:	9103      	str	r1, [sp, #12]
 80245aa:	f10d 0b18 	add.w	fp, sp, #24
 80245ae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80245b0:	1b3f      	subs	r7, r7, r4
 80245b2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80245b6:	f7ee f995 	bl	80128e4 <GUI_ALLOC_LockH>
 80245ba:	f8d8 3000 	ldr.w	r3, [r8]
 80245be:	3701      	adds	r7, #1
 80245c0:	9004      	str	r0, [sp, #16]
 80245c2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80245c4:	f7ee f98e 	bl	80128e4 <GUI_ALLOC_LockH>
 80245c8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80245cc:	68c1      	ldr	r1, [r0, #12]
 80245ce:	4603      	mov	r3, r0
 80245d0:	1ab2      	subs	r2, r6, r2
 80245d2:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80245d6:	f84b 0d04 	str.w	r0, [fp, #-4]!
 80245da:	4658      	mov	r0, fp
 80245dc:	fb01 f202 	mul.w	r2, r1, r2
 80245e0:	1b65      	subs	r5, r4, r5
 80245e2:	3218      	adds	r2, #24
 80245e4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80245e8:	189d      	adds	r5, r3, r2
 80245ea:	f7ee f98f 	bl	801290c <GUI_ALLOC_UnlockH>
 80245ee:	9b04      	ldr	r3, [sp, #16]
 80245f0:	f8d8 2000 	ldr.w	r2, [r8]
 80245f4:	6958      	ldr	r0, [r3, #20]
 80245f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80245f8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80245fc:	6814      	ldr	r4, [r2, #0]
 80245fe:	bb58      	cbnz	r0, 8024658 <_FillRect+0xc4>
 8024600:	454e      	cmp	r6, r9
 8024602:	dc10      	bgt.n	8024626 <_FillRect+0x92>
 8024604:	f8d8 3000 	ldr.w	r3, [r8]
 8024608:	7c1b      	ldrb	r3, [r3, #16]
 802460a:	07db      	lsls	r3, r3, #31
 802460c:	d411      	bmi.n	8024632 <_FillRect+0x9e>
 802460e:	2f00      	cmp	r7, #0
 8024610:	dd05      	ble.n	802461e <_FillRect+0x8a>
 8024612:	463b      	mov	r3, r7
 8024614:	462a      	mov	r2, r5
 8024616:	3b01      	subs	r3, #1
 8024618:	f842 4b04 	str.w	r4, [r2], #4
 802461c:	d1fb      	bne.n	8024616 <_FillRect+0x82>
 802461e:	3601      	adds	r6, #1
 8024620:	4455      	add	r5, sl
 8024622:	45b1      	cmp	r9, r6
 8024624:	daee      	bge.n	8024604 <_FillRect+0x70>
 8024626:	a804      	add	r0, sp, #16
 8024628:	f7ee f970 	bl	801290c <GUI_ALLOC_UnlockH>
 802462c:	b007      	add	sp, #28
 802462e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024632:	9b04      	ldr	r3, [sp, #16]
 8024634:	681b      	ldr	r3, [r3, #0]
 8024636:	691b      	ldr	r3, [r3, #16]
 8024638:	689b      	ldr	r3, [r3, #8]
 802463a:	4798      	blx	r3
 802463c:	4629      	mov	r1, r5
 802463e:	463a      	mov	r2, r7
 8024640:	680b      	ldr	r3, [r1, #0]
 8024642:	3a01      	subs	r2, #1
 8024644:	ea83 0300 	eor.w	r3, r3, r0
 8024648:	f841 3b04 	str.w	r3, [r1], #4
 802464c:	d1f8      	bne.n	8024640 <_FillRect+0xac>
 802464e:	3601      	adds	r6, #1
 8024650:	4455      	add	r5, sl
 8024652:	45b1      	cmp	r9, r6
 8024654:	dad6      	bge.n	8024604 <_FillRect+0x70>
 8024656:	e7e6      	b.n	8024626 <_FillRect+0x92>
 8024658:	f7ee f944 	bl	80128e4 <GUI_ALLOC_LockH>
 802465c:	ebc6 0e09 	rsb	lr, r6, r9
 8024660:	9903      	ldr	r1, [sp, #12]
 8024662:	463b      	mov	r3, r7
 8024664:	f10e 0e01 	add.w	lr, lr, #1
 8024668:	4632      	mov	r2, r6
 802466a:	9005      	str	r0, [sp, #20]
 802466c:	f8cd e000 	str.w	lr, [sp]
 8024670:	f7f9 faee 	bl	801dc50 <GUI_USAGE_AddRect>
 8024674:	4658      	mov	r0, fp
 8024676:	f7ee f949 	bl	801290c <GUI_ALLOC_UnlockH>
 802467a:	e7c1      	b.n	8024600 <_FillRect+0x6c>
 802467c:	20000018 	.word	0x20000018

08024680 <_DrawHLine>:
 8024680:	b500      	push	{lr}
 8024682:	b083      	sub	sp, #12
 8024684:	9200      	str	r2, [sp, #0]
 8024686:	f7ff ff85 	bl	8024594 <_FillRect>
 802468a:	b003      	add	sp, #12
 802468c:	f85d fb04 	ldr.w	pc, [sp], #4

08024690 <_DrawVLine>:
 8024690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024694:	4f36      	ldr	r7, [pc, #216]	; (8024770 <_DrawVLine+0xe0>)
 8024696:	461e      	mov	r6, r3
 8024698:	b085      	sub	sp, #20
 802469a:	4689      	mov	r9, r1
 802469c:	683b      	ldr	r3, [r7, #0]
 802469e:	4615      	mov	r5, r2
 80246a0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80246a2:	f7ee f91f 	bl	80128e4 <GUI_ALLOC_LockH>
 80246a6:	6943      	ldr	r3, [r0, #20]
 80246a8:	9001      	str	r0, [sp, #4]
 80246aa:	4618      	mov	r0, r3
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	d13b      	bne.n	8024728 <_DrawVLine+0x98>
 80246b0:	683b      	ldr	r3, [r7, #0]
 80246b2:	9002      	str	r0, [sp, #8]
 80246b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80246b6:	f7ee f915 	bl	80128e4 <GUI_ALLOC_LockH>
 80246ba:	4602      	mov	r2, r0
 80246bc:	a804      	add	r0, sp, #16
 80246be:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 80246c2:	68d3      	ldr	r3, [r2, #12]
 80246c4:	1b2c      	subs	r4, r5, r4
 80246c6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80246ca:	fb03 f304 	mul.w	r3, r3, r4
 80246ce:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80246d2:	3318      	adds	r3, #24
 80246d4:	ebc4 0409 	rsb	r4, r4, r9
 80246d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80246dc:	18d4      	adds	r4, r2, r3
 80246de:	f7ee f915 	bl	801290c <GUI_ALLOC_UnlockH>
 80246e2:	683b      	ldr	r3, [r7, #0]
 80246e4:	9901      	ldr	r1, [sp, #4]
 80246e6:	7c1a      	ldrb	r2, [r3, #16]
 80246e8:	07d2      	lsls	r2, r2, #31
 80246ea:	d420      	bmi.n	802472e <_DrawVLine+0x9e>
 80246ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80246ee:	9802      	ldr	r0, [sp, #8]
 80246f0:	f8d3 8000 	ldr.w	r8, [r3]
 80246f4:	68cf      	ldr	r7, [r1, #12]
 80246f6:	b908      	cbnz	r0, 80246fc <_DrawVLine+0x6c>
 80246f8:	e031      	b.n	802475e <_DrawVLine+0xce>
 80246fa:	9802      	ldr	r0, [sp, #8]
 80246fc:	6883      	ldr	r3, [r0, #8]
 80246fe:	462a      	mov	r2, r5
 8024700:	3501      	adds	r5, #1
 8024702:	4649      	mov	r1, r9
 8024704:	681b      	ldr	r3, [r3, #0]
 8024706:	4798      	blx	r3
 8024708:	42ae      	cmp	r6, r5
 802470a:	f8c4 8000 	str.w	r8, [r4]
 802470e:	443c      	add	r4, r7
 8024710:	daf3      	bge.n	80246fa <_DrawVLine+0x6a>
 8024712:	a801      	add	r0, sp, #4
 8024714:	f7ee f8fa 	bl	801290c <GUI_ALLOC_UnlockH>
 8024718:	9b02      	ldr	r3, [sp, #8]
 802471a:	b113      	cbz	r3, 8024722 <_DrawVLine+0x92>
 802471c:	a802      	add	r0, sp, #8
 802471e:	f7ee f8f5 	bl	801290c <GUI_ALLOC_UnlockH>
 8024722:	b005      	add	sp, #20
 8024724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024728:	f7ee f8dc 	bl	80128e4 <GUI_ALLOC_LockH>
 802472c:	e7c0      	b.n	80246b0 <_DrawVLine+0x20>
 802472e:	680b      	ldr	r3, [r1, #0]
 8024730:	691b      	ldr	r3, [r3, #16]
 8024732:	689b      	ldr	r3, [r3, #8]
 8024734:	4798      	blx	r3
 8024736:	4607      	mov	r7, r0
 8024738:	9b02      	ldr	r3, [sp, #8]
 802473a:	462a      	mov	r2, r5
 802473c:	4649      	mov	r1, r9
 802473e:	3501      	adds	r5, #1
 8024740:	4618      	mov	r0, r3
 8024742:	b113      	cbz	r3, 802474a <_DrawVLine+0xba>
 8024744:	689b      	ldr	r3, [r3, #8]
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	4798      	blx	r3
 802474a:	6823      	ldr	r3, [r4, #0]
 802474c:	42b5      	cmp	r5, r6
 802474e:	9a01      	ldr	r2, [sp, #4]
 8024750:	ea83 0307 	eor.w	r3, r3, r7
 8024754:	68d2      	ldr	r2, [r2, #12]
 8024756:	6023      	str	r3, [r4, #0]
 8024758:	4414      	add	r4, r2
 802475a:	dded      	ble.n	8024738 <_DrawVLine+0xa8>
 802475c:	e7d9      	b.n	8024712 <_DrawVLine+0x82>
 802475e:	1b73      	subs	r3, r6, r5
 8024760:	3301      	adds	r3, #1
 8024762:	3b01      	subs	r3, #1
 8024764:	f8c4 8000 	str.w	r8, [r4]
 8024768:	443c      	add	r4, r7
 802476a:	d1fa      	bne.n	8024762 <_DrawVLine+0xd2>
 802476c:	e7d1      	b.n	8024712 <_DrawVLine+0x82>
 802476e:	bf00      	nop
 8024770:	20000018 	.word	0x20000018

08024774 <_WriteToActiveAlpha>:
 8024774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024778:	b091      	sub	sp, #68	; 0x44
 802477a:	4688      	mov	r8, r1
 802477c:	4614      	mov	r4, r2
 802477e:	469a      	mov	sl, r3
 8024780:	9008      	str	r0, [sp, #32]
 8024782:	f7ee f8af 	bl	80128e4 <GUI_ALLOC_LockH>
 8024786:	4603      	mov	r3, r0
 8024788:	a810      	add	r0, sp, #64	; 0x40
 802478a:	4d5d      	ldr	r5, [pc, #372]	; (8024900 <_WriteToActiveAlpha+0x18c>)
 802478c:	681a      	ldr	r2, [r3, #0]
 802478e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8024792:	6912      	ldr	r2, [r2, #16]
 8024794:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 8024798:	6852      	ldr	r2, [r2, #4]
 802479a:	9207      	str	r2, [sp, #28]
 802479c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80247a0:	9206      	str	r2, [sp, #24]
 80247a2:	f7ee f8b3 	bl	801290c <GUI_ALLOC_UnlockH>
 80247a6:	682a      	ldr	r2, [r5, #0]
 80247a8:	2108      	movs	r1, #8
 80247aa:	4b56      	ldr	r3, [pc, #344]	; (8024904 <_WriteToActiveAlpha+0x190>)
 80247ac:	7c52      	ldrb	r2, [r2, #17]
 80247ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80247b2:	68c3      	ldr	r3, [r0, #12]
 80247b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80247b6:	4798      	blx	r3
 80247b8:	2817      	cmp	r0, #23
 80247ba:	d810      	bhi.n	80247de <_WriteToActiveAlpha+0x6a>
 80247bc:	2803      	cmp	r0, #3
 80247be:	4606      	mov	r6, r0
 80247c0:	bf08      	it	eq
 80247c2:	2608      	moveq	r6, #8
 80247c4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80247c8:	2000      	movs	r0, #0
 80247ca:	9309      	str	r3, [sp, #36]	; 0x24
 80247cc:	f8da 3000 	ldr.w	r3, [sl]
 80247d0:	930c      	str	r3, [sp, #48]	; 0x30
 80247d2:	f7f4 f917 	bl	8018a04 <GUI__AllocAlphaBuffer>
 80247d6:	b120      	cbz	r0, 80247e2 <_WriteToActiveAlpha+0x6e>
 80247d8:	b011      	add	sp, #68	; 0x44
 80247da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247de:	2620      	movs	r6, #32
 80247e0:	e7f0      	b.n	80247c4 <_WriteToActiveAlpha+0x50>
 80247e2:	9906      	ldr	r1, [sp, #24]
 80247e4:	682a      	ldr	r2, [r5, #0]
 80247e6:	460b      	mov	r3, r1
 80247e8:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 80247ec:	4443      	add	r3, r8
 80247ee:	3b01      	subs	r3, #1
 80247f0:	1b5d      	subs	r5, r3, r5
 80247f2:	2d00      	cmp	r5, #0
 80247f4:	dd7d      	ble.n	80248f2 <_WriteToActiveAlpha+0x17e>
 80247f6:	1b4d      	subs	r5, r1, r5
 80247f8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80247fc:	4543      	cmp	r3, r8
 80247fe:	dc73      	bgt.n	80248e8 <_WriteToActiveAlpha+0x174>
 8024800:	2100      	movs	r1, #0
 8024802:	2d00      	cmp	r5, #0
 8024804:	dde8      	ble.n	80247d8 <_WriteToActiveAlpha+0x64>
 8024806:	eb09 0304 	add.w	r3, r9, r4
 802480a:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 802480e:	3b01      	subs	r3, #1
 8024810:	1a1b      	subs	r3, r3, r0
 8024812:	2b00      	cmp	r3, #0
 8024814:	bfc8      	it	gt
 8024816:	ebc3 0909 	rsbgt	r9, r3, r9
 802481a:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 802481e:	42a3      	cmp	r3, r4
 8024820:	dc69      	bgt.n	80248f6 <_WriteToActiveAlpha+0x182>
 8024822:	2700      	movs	r7, #0
 8024824:	f1b9 0f00 	cmp.w	r9, #0
 8024828:	ddd6      	ble.n	80247d8 <_WriteToActiveAlpha+0x64>
 802482a:	9b06      	ldr	r3, [sp, #24]
 802482c:	46b3      	mov	fp, r6
 802482e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8024832:	fb07 1703 	mla	r7, r7, r3, r1
 8024836:	eb04 0309 	add.w	r3, r4, r9
 802483a:	00bf      	lsls	r7, r7, #2
 802483c:	930a      	str	r3, [sp, #40]	; 0x28
 802483e:	e020      	b.n	8024882 <_WriteToActiveAlpha+0x10e>
 8024840:	2304      	movs	r3, #4
 8024842:	9a06      	ldr	r2, [sp, #24]
 8024844:	4631      	mov	r1, r6
 8024846:	4630      	mov	r0, r6
 8024848:	47c8      	blx	r9
 802484a:	f04f 0e01 	mov.w	lr, #1
 802484e:	2300      	movs	r3, #0
 8024850:	2100      	movs	r1, #0
 8024852:	462a      	mov	r2, r5
 8024854:	9305      	str	r3, [sp, #20]
 8024856:	4640      	mov	r0, r8
 8024858:	4673      	mov	r3, lr
 802485a:	9103      	str	r1, [sp, #12]
 802485c:	9604      	str	r6, [sp, #16]
 802485e:	4621      	mov	r1, r4
 8024860:	f8cd b008 	str.w	fp, [sp, #8]
 8024864:	eb04 090e 	add.w	r9, r4, lr
 8024868:	f8cd e004 	str.w	lr, [sp, #4]
 802486c:	f8cd e000 	str.w	lr, [sp]
 8024870:	9c06      	ldr	r4, [sp, #24]
 8024872:	f7f5 f93d 	bl	8019af0 <LCD_DrawBitmap>
 8024876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024878:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 802487c:	454b      	cmp	r3, r9
 802487e:	d0ab      	beq.n	80247d8 <_WriteToActiveAlpha+0x64>
 8024880:	464c      	mov	r4, r9
 8024882:	9808      	ldr	r0, [sp, #32]
 8024884:	f7f9 f8ce 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 8024888:	ab0f      	add	r3, sp, #60	; 0x3c
 802488a:	19c2      	adds	r2, r0, r7
 802488c:	4621      	mov	r1, r4
 802488e:	9301      	str	r3, [sp, #4]
 8024890:	4640      	mov	r0, r8
 8024892:	9b07      	ldr	r3, [sp, #28]
 8024894:	9300      	str	r3, [sp, #0]
 8024896:	462b      	mov	r3, r5
 8024898:	f7f3 ff76 	bl	8018788 <GUI__DoAlphaBlending>
 802489c:	4606      	mov	r6, r0
 802489e:	2800      	cmp	r0, #0
 80248a0:	d09a      	beq.n	80247d8 <_WriteToActiveAlpha+0x64>
 80248a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248a4:	461a      	mov	r2, r3
 80248a6:	4b18      	ldr	r3, [pc, #96]	; (8024908 <_WriteToActiveAlpha+0x194>)
 80248a8:	429a      	cmp	r2, r3
 80248aa:	d0ce      	beq.n	802484a <_WriteToActiveAlpha+0xd6>
 80248ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80248b0:	465a      	mov	r2, fp
 80248b2:	4629      	mov	r1, r5
 80248b4:	464b      	mov	r3, r9
 80248b6:	f7f4 f9db 	bl	8018c70 <GUI__CompactPixelIndicesEx>
 80248ba:	2800      	cmp	r0, #0
 80248bc:	d1c5      	bne.n	802484a <_WriteToActiveAlpha+0xd6>
 80248be:	f8d9 9010 	ldr.w	r9, [r9, #16]
 80248c2:	f1b9 0f00 	cmp.w	r9, #0
 80248c6:	d1bb      	bne.n	8024840 <_WriteToActiveAlpha+0xcc>
 80248c8:	950d      	str	r5, [sp, #52]	; 0x34
 80248ca:	46a2      	mov	sl, r4
 80248cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80248d0:	4635      	mov	r5, r6
 80248d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80248d4:	6828      	ldr	r0, [r5, #0]
 80248d6:	47a0      	blx	r4
 80248d8:	f1b9 0901 	subs.w	r9, r9, #1
 80248dc:	f845 0b04 	str.w	r0, [r5], #4
 80248e0:	d1f8      	bne.n	80248d4 <_WriteToActiveAlpha+0x160>
 80248e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80248e4:	4654      	mov	r4, sl
 80248e6:	e7b0      	b.n	802484a <_WriteToActiveAlpha+0xd6>
 80248e8:	ebc8 0103 	rsb	r1, r8, r3
 80248ec:	4698      	mov	r8, r3
 80248ee:	1a6d      	subs	r5, r5, r1
 80248f0:	e787      	b.n	8024802 <_WriteToActiveAlpha+0x8e>
 80248f2:	460d      	mov	r5, r1
 80248f4:	e780      	b.n	80247f8 <_WriteToActiveAlpha+0x84>
 80248f6:	1b1f      	subs	r7, r3, r4
 80248f8:	461c      	mov	r4, r3
 80248fa:	ebc7 0909 	rsb	r9, r7, r9
 80248fe:	e791      	b.n	8024824 <_WriteToActiveAlpha+0xb0>
 8024900:	20000018 	.word	0x20000018
 8024904:	200467d0 	.word	0x200467d0
 8024908:	08011c6d 	.word	0x08011c6d

0802490c <GUI_MEMDEV__WriteToActiveAlpha>:
 802490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024910:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8024a94 <GUI_MEMDEV__WriteToActiveAlpha+0x188>
 8024914:	b08b      	sub	sp, #44	; 0x2c
 8024916:	4b5d      	ldr	r3, [pc, #372]	; (8024a8c <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 8024918:	f8d9 c000 	ldr.w	ip, [r9]
 802491c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8024a98 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>
 8024920:	f89c e011 	ldrb.w	lr, [ip, #17]
 8024924:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 8024928:	f8d8 3000 	ldr.w	r3, [r8]
 802492c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8024930:	2b00      	cmp	r3, #0
 8024932:	f000 80a6 	beq.w	8024a82 <GUI_MEMDEV__WriteToActiveAlpha+0x176>
 8024936:	4616      	mov	r6, r2
 8024938:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 802493c:	4607      	mov	r7, r0
 802493e:	460d      	mov	r5, r1
 8024940:	2a00      	cmp	r2, #0
 8024942:	d075      	beq.n	8024a30 <GUI_MEMDEV__WriteToActiveAlpha+0x124>
 8024944:	68e2      	ldr	r2, [r4, #12]
 8024946:	6812      	ldr	r2, [r2, #0]
 8024948:	2a07      	cmp	r2, #7
 802494a:	d078      	beq.n	8024a3e <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 802494c:	4a50      	ldr	r2, [pc, #320]	; (8024a90 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 802494e:	ebc2 020e 	rsb	r2, r2, lr
 8024952:	fab2 f282 	clz	r2, r2
 8024956:	0952      	lsrs	r2, r2, #5
 8024958:	2a00      	cmp	r2, #0
 802495a:	d070      	beq.n	8024a3e <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 802495c:	4638      	mov	r0, r7
 802495e:	f7ed ffc1 	bl	80128e4 <GUI_ALLOC_LockH>
 8024962:	4603      	mov	r3, r0
 8024964:	a80a      	add	r0, sp, #40	; 0x28
 8024966:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 802496a:	f840 3d08 	str.w	r3, [r0, #-8]!
 802496e:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8024972:	eb0b 0405 	add.w	r4, fp, r5
 8024976:	68db      	ldr	r3, [r3, #12]
 8024978:	3c01      	subs	r4, #1
 802497a:	9305      	str	r3, [sp, #20]
 802497c:	f7ed ffc6 	bl	801290c <GUI_ALLOC_UnlockH>
 8024980:	f8d9 1000 	ldr.w	r1, [r9]
 8024984:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8024988:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 802498c:	1ae4      	subs	r4, r4, r3
 802498e:	2c00      	cmp	r4, #0
 8024990:	bfcc      	ite	gt
 8024992:	ebc4 040b 	rsbgt	r4, r4, fp
 8024996:	465c      	movle	r4, fp
 8024998:	4285      	cmp	r5, r0
 802499a:	db5e      	blt.n	8024a5a <GUI_MEMDEV__WriteToActiveAlpha+0x14e>
 802499c:	2300      	movs	r3, #0
 802499e:	2c00      	cmp	r4, #0
 80249a0:	dd43      	ble.n	8024a2a <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 80249a2:	eb0a 0006 	add.w	r0, sl, r6
 80249a6:	f9b1 e00e 	ldrsh.w	lr, [r1, #14]
 80249aa:	3801      	subs	r0, #1
 80249ac:	ebce 0000 	rsb	r0, lr, r0
 80249b0:	2800      	cmp	r0, #0
 80249b2:	bfc8      	it	gt
 80249b4:	ebc0 0a0a 	rsbgt	sl, r0, sl
 80249b8:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 80249bc:	42b0      	cmp	r0, r6
 80249be:	dc47      	bgt.n	8024a50 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80249c0:	2100      	movs	r1, #0
 80249c2:	f1ba 0f00 	cmp.w	sl, #0
 80249c6:	9307      	str	r3, [sp, #28]
 80249c8:	9106      	str	r1, [sp, #24]
 80249ca:	dd2e      	ble.n	8024a2a <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 80249cc:	4638      	mov	r0, r7
 80249ce:	f7f9 f829 	bl	801da24 <GUI_MEMDEV_GetDataPtr>
 80249d2:	9b07      	ldr	r3, [sp, #28]
 80249d4:	f8d9 2000 	ldr.w	r2, [r9]
 80249d8:	9906      	ldr	r1, [sp, #24]
 80249da:	fb01 310b 	mla	r1, r1, fp, r3
 80249de:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80249e0:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	d03c      	beq.n	8024a62 <GUI_MEMDEV__WriteToActiveAlpha+0x156>
 80249e8:	4618      	mov	r0, r3
 80249ea:	f7ed ff7b 	bl	80128e4 <GUI_ALLOC_LockH>
 80249ee:	4602      	mov	r2, r0
 80249f0:	a80a      	add	r0, sp, #40	; 0x28
 80249f2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80249f6:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80249fa:	1a6d      	subs	r5, r5, r1
 80249fc:	f840 2d04 	str.w	r2, [r0, #-4]!
 8024a00:	1af3      	subs	r3, r6, r3
 8024a02:	00a9      	lsls	r1, r5, #2
 8024a04:	68d5      	ldr	r5, [r2, #12]
 8024a06:	f101 0618 	add.w	r6, r1, #24
 8024a0a:	fb05 6603 	mla	r6, r5, r3, r6
 8024a0e:	4416      	add	r6, r2
 8024a10:	f7ed ff7c 	bl	801290c <GUI_ALLOC_UnlockH>
 8024a14:	b14e      	cbz	r6, 8024a2a <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8024a16:	9b05      	ldr	r3, [sp, #20]
 8024a18:	4622      	mov	r2, r4
 8024a1a:	9500      	str	r5, [sp, #0]
 8024a1c:	4639      	mov	r1, r7
 8024a1e:	9301      	str	r3, [sp, #4]
 8024a20:	4630      	mov	r0, r6
 8024a22:	4653      	mov	r3, sl
 8024a24:	f8d8 4000 	ldr.w	r4, [r8]
 8024a28:	47a0      	blx	r4
 8024a2a:	b00b      	add	sp, #44	; 0x2c
 8024a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a30:	68e2      	ldr	r2, [r4, #12]
 8024a32:	6812      	ldr	r2, [r2, #0]
 8024a34:	fab2 f282 	clz	r2, r2
 8024a38:	0952      	lsrs	r2, r2, #5
 8024a3a:	2a00      	cmp	r2, #0
 8024a3c:	d18e      	bne.n	802495c <GUI_MEMDEV__WriteToActiveAlpha+0x50>
 8024a3e:	4673      	mov	r3, lr
 8024a40:	4632      	mov	r2, r6
 8024a42:	4629      	mov	r1, r5
 8024a44:	4638      	mov	r0, r7
 8024a46:	f7ff fe95 	bl	8024774 <_WriteToActiveAlpha>
 8024a4a:	b00b      	add	sp, #44	; 0x2c
 8024a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a50:	1b81      	subs	r1, r0, r6
 8024a52:	4606      	mov	r6, r0
 8024a54:	ebc1 0a0a 	rsb	sl, r1, sl
 8024a58:	e7b3      	b.n	80249c2 <GUI_MEMDEV__WriteToActiveAlpha+0xb6>
 8024a5a:	1b43      	subs	r3, r0, r5
 8024a5c:	4605      	mov	r5, r0
 8024a5e:	1ae4      	subs	r4, r4, r3
 8024a60:	e79d      	b.n	802499e <GUI_MEMDEV__WriteToActiveAlpha+0x92>
 8024a62:	7c50      	ldrb	r0, [r2, #17]
 8024a64:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8024a68:	f8df e030 	ldr.w	lr, [pc, #48]	; 8024a9c <GUI_MEMDEV__WriteToActiveAlpha+0x190>
 8024a6c:	463b      	mov	r3, r7
 8024a6e:	9202      	str	r2, [sp, #8]
 8024a70:	4629      	mov	r1, r5
 8024a72:	f8cd a004 	str.w	sl, [sp, #4]
 8024a76:	4632      	mov	r2, r6
 8024a78:	9400      	str	r4, [sp, #0]
 8024a7a:	f8de 4000 	ldr.w	r4, [lr]
 8024a7e:	47a0      	blx	r4
 8024a80:	e7d3      	b.n	8024a2a <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8024a82:	4673      	mov	r3, lr
 8024a84:	f7ff fe76 	bl	8024774 <_WriteToActiveAlpha>
 8024a88:	e7cf      	b.n	8024a2a <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8024a8a:	bf00      	nop
 8024a8c:	200467d0 	.word	0x200467d0
 8024a90:	0802696c 	.word	0x0802696c
 8024a94:	20000018 	.word	0x20000018
 8024a98:	200467ec 	.word	0x200467ec
 8024a9c:	200467e8 	.word	0x200467e8

08024aa0 <__errno>:
 8024aa0:	4b01      	ldr	r3, [pc, #4]	; (8024aa8 <__errno+0x8>)
 8024aa2:	6818      	ldr	r0, [r3, #0]
 8024aa4:	4770      	bx	lr
 8024aa6:	bf00      	nop
 8024aa8:	200000f8 	.word	0x200000f8

08024aac <__libc_init_array>:
 8024aac:	b570      	push	{r4, r5, r6, lr}
 8024aae:	4e0d      	ldr	r6, [pc, #52]	; (8024ae4 <__libc_init_array+0x38>)
 8024ab0:	4c0d      	ldr	r4, [pc, #52]	; (8024ae8 <__libc_init_array+0x3c>)
 8024ab2:	1ba4      	subs	r4, r4, r6
 8024ab4:	10a4      	asrs	r4, r4, #2
 8024ab6:	2500      	movs	r5, #0
 8024ab8:	42a5      	cmp	r5, r4
 8024aba:	d109      	bne.n	8024ad0 <__libc_init_array+0x24>
 8024abc:	4e0b      	ldr	r6, [pc, #44]	; (8024aec <__libc_init_array+0x40>)
 8024abe:	4c0c      	ldr	r4, [pc, #48]	; (8024af0 <__libc_init_array+0x44>)
 8024ac0:	f001 fea6 	bl	8026810 <_init>
 8024ac4:	1ba4      	subs	r4, r4, r6
 8024ac6:	10a4      	asrs	r4, r4, #2
 8024ac8:	2500      	movs	r5, #0
 8024aca:	42a5      	cmp	r5, r4
 8024acc:	d105      	bne.n	8024ada <__libc_init_array+0x2e>
 8024ace:	bd70      	pop	{r4, r5, r6, pc}
 8024ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024ad4:	4798      	blx	r3
 8024ad6:	3501      	adds	r5, #1
 8024ad8:	e7ee      	b.n	8024ab8 <__libc_init_array+0xc>
 8024ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024ade:	4798      	blx	r3
 8024ae0:	3501      	adds	r5, #1
 8024ae2:	e7f2      	b.n	8024aca <__libc_init_array+0x1e>
 8024ae4:	08034b90 	.word	0x08034b90
 8024ae8:	08034b90 	.word	0x08034b90
 8024aec:	08034b90 	.word	0x08034b90
 8024af0:	08034b94 	.word	0x08034b94

08024af4 <malloc>:
 8024af4:	4b02      	ldr	r3, [pc, #8]	; (8024b00 <malloc+0xc>)
 8024af6:	4601      	mov	r1, r0
 8024af8:	6818      	ldr	r0, [r3, #0]
 8024afa:	f000 b895 	b.w	8024c28 <_malloc_r>
 8024afe:	bf00      	nop
 8024b00:	200000f8 	.word	0x200000f8

08024b04 <free>:
 8024b04:	4b02      	ldr	r3, [pc, #8]	; (8024b10 <free+0xc>)
 8024b06:	4601      	mov	r1, r0
 8024b08:	6818      	ldr	r0, [r3, #0]
 8024b0a:	f000 b83f 	b.w	8024b8c <_free_r>
 8024b0e:	bf00      	nop
 8024b10:	200000f8 	.word	0x200000f8

08024b14 <memcmp>:
 8024b14:	b510      	push	{r4, lr}
 8024b16:	3901      	subs	r1, #1
 8024b18:	4402      	add	r2, r0
 8024b1a:	4290      	cmp	r0, r2
 8024b1c:	d101      	bne.n	8024b22 <memcmp+0xe>
 8024b1e:	2000      	movs	r0, #0
 8024b20:	bd10      	pop	{r4, pc}
 8024b22:	f810 3b01 	ldrb.w	r3, [r0], #1
 8024b26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024b2a:	42a3      	cmp	r3, r4
 8024b2c:	d0f5      	beq.n	8024b1a <memcmp+0x6>
 8024b2e:	1b18      	subs	r0, r3, r4
 8024b30:	bd10      	pop	{r4, pc}

08024b32 <memcpy>:
 8024b32:	b510      	push	{r4, lr}
 8024b34:	1e43      	subs	r3, r0, #1
 8024b36:	440a      	add	r2, r1
 8024b38:	4291      	cmp	r1, r2
 8024b3a:	d100      	bne.n	8024b3e <memcpy+0xc>
 8024b3c:	bd10      	pop	{r4, pc}
 8024b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024b46:	e7f7      	b.n	8024b38 <memcpy+0x6>

08024b48 <memmove>:
 8024b48:	4288      	cmp	r0, r1
 8024b4a:	b510      	push	{r4, lr}
 8024b4c:	eb01 0302 	add.w	r3, r1, r2
 8024b50:	d803      	bhi.n	8024b5a <memmove+0x12>
 8024b52:	1e42      	subs	r2, r0, #1
 8024b54:	4299      	cmp	r1, r3
 8024b56:	d10c      	bne.n	8024b72 <memmove+0x2a>
 8024b58:	bd10      	pop	{r4, pc}
 8024b5a:	4298      	cmp	r0, r3
 8024b5c:	d2f9      	bcs.n	8024b52 <memmove+0xa>
 8024b5e:	1881      	adds	r1, r0, r2
 8024b60:	1ad2      	subs	r2, r2, r3
 8024b62:	42d3      	cmn	r3, r2
 8024b64:	d100      	bne.n	8024b68 <memmove+0x20>
 8024b66:	bd10      	pop	{r4, pc}
 8024b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8024b70:	e7f7      	b.n	8024b62 <memmove+0x1a>
 8024b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024b76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8024b7a:	e7eb      	b.n	8024b54 <memmove+0xc>

08024b7c <memset>:
 8024b7c:	4402      	add	r2, r0
 8024b7e:	4603      	mov	r3, r0
 8024b80:	4293      	cmp	r3, r2
 8024b82:	d100      	bne.n	8024b86 <memset+0xa>
 8024b84:	4770      	bx	lr
 8024b86:	f803 1b01 	strb.w	r1, [r3], #1
 8024b8a:	e7f9      	b.n	8024b80 <memset+0x4>

08024b8c <_free_r>:
 8024b8c:	b538      	push	{r3, r4, r5, lr}
 8024b8e:	4605      	mov	r5, r0
 8024b90:	2900      	cmp	r1, #0
 8024b92:	d045      	beq.n	8024c20 <_free_r+0x94>
 8024b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024b98:	1f0c      	subs	r4, r1, #4
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	bfb8      	it	lt
 8024b9e:	18e4      	addlt	r4, r4, r3
 8024ba0:	f000 fbb4 	bl	802530c <__malloc_lock>
 8024ba4:	4a1f      	ldr	r2, [pc, #124]	; (8024c24 <_free_r+0x98>)
 8024ba6:	6813      	ldr	r3, [r2, #0]
 8024ba8:	4610      	mov	r0, r2
 8024baa:	b933      	cbnz	r3, 8024bba <_free_r+0x2e>
 8024bac:	6063      	str	r3, [r4, #4]
 8024bae:	6014      	str	r4, [r2, #0]
 8024bb0:	4628      	mov	r0, r5
 8024bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024bb6:	f000 bbaa 	b.w	802530e <__malloc_unlock>
 8024bba:	42a3      	cmp	r3, r4
 8024bbc:	d90c      	bls.n	8024bd8 <_free_r+0x4c>
 8024bbe:	6821      	ldr	r1, [r4, #0]
 8024bc0:	1862      	adds	r2, r4, r1
 8024bc2:	4293      	cmp	r3, r2
 8024bc4:	bf04      	itt	eq
 8024bc6:	681a      	ldreq	r2, [r3, #0]
 8024bc8:	685b      	ldreq	r3, [r3, #4]
 8024bca:	6063      	str	r3, [r4, #4]
 8024bcc:	bf04      	itt	eq
 8024bce:	1852      	addeq	r2, r2, r1
 8024bd0:	6022      	streq	r2, [r4, #0]
 8024bd2:	6004      	str	r4, [r0, #0]
 8024bd4:	e7ec      	b.n	8024bb0 <_free_r+0x24>
 8024bd6:	4613      	mov	r3, r2
 8024bd8:	685a      	ldr	r2, [r3, #4]
 8024bda:	b10a      	cbz	r2, 8024be0 <_free_r+0x54>
 8024bdc:	42a2      	cmp	r2, r4
 8024bde:	d9fa      	bls.n	8024bd6 <_free_r+0x4a>
 8024be0:	6819      	ldr	r1, [r3, #0]
 8024be2:	1858      	adds	r0, r3, r1
 8024be4:	42a0      	cmp	r0, r4
 8024be6:	d10b      	bne.n	8024c00 <_free_r+0x74>
 8024be8:	6820      	ldr	r0, [r4, #0]
 8024bea:	4401      	add	r1, r0
 8024bec:	1858      	adds	r0, r3, r1
 8024bee:	4282      	cmp	r2, r0
 8024bf0:	6019      	str	r1, [r3, #0]
 8024bf2:	d1dd      	bne.n	8024bb0 <_free_r+0x24>
 8024bf4:	6810      	ldr	r0, [r2, #0]
 8024bf6:	6852      	ldr	r2, [r2, #4]
 8024bf8:	605a      	str	r2, [r3, #4]
 8024bfa:	4401      	add	r1, r0
 8024bfc:	6019      	str	r1, [r3, #0]
 8024bfe:	e7d7      	b.n	8024bb0 <_free_r+0x24>
 8024c00:	d902      	bls.n	8024c08 <_free_r+0x7c>
 8024c02:	230c      	movs	r3, #12
 8024c04:	602b      	str	r3, [r5, #0]
 8024c06:	e7d3      	b.n	8024bb0 <_free_r+0x24>
 8024c08:	6820      	ldr	r0, [r4, #0]
 8024c0a:	1821      	adds	r1, r4, r0
 8024c0c:	428a      	cmp	r2, r1
 8024c0e:	bf04      	itt	eq
 8024c10:	6811      	ldreq	r1, [r2, #0]
 8024c12:	6852      	ldreq	r2, [r2, #4]
 8024c14:	6062      	str	r2, [r4, #4]
 8024c16:	bf04      	itt	eq
 8024c18:	1809      	addeq	r1, r1, r0
 8024c1a:	6021      	streq	r1, [r4, #0]
 8024c1c:	605c      	str	r4, [r3, #4]
 8024c1e:	e7c7      	b.n	8024bb0 <_free_r+0x24>
 8024c20:	bd38      	pop	{r3, r4, r5, pc}
 8024c22:	bf00      	nop
 8024c24:	200453d0 	.word	0x200453d0

08024c28 <_malloc_r>:
 8024c28:	b570      	push	{r4, r5, r6, lr}
 8024c2a:	1ccd      	adds	r5, r1, #3
 8024c2c:	f025 0503 	bic.w	r5, r5, #3
 8024c30:	3508      	adds	r5, #8
 8024c32:	2d0c      	cmp	r5, #12
 8024c34:	bf38      	it	cc
 8024c36:	250c      	movcc	r5, #12
 8024c38:	2d00      	cmp	r5, #0
 8024c3a:	4606      	mov	r6, r0
 8024c3c:	db01      	blt.n	8024c42 <_malloc_r+0x1a>
 8024c3e:	42a9      	cmp	r1, r5
 8024c40:	d903      	bls.n	8024c4a <_malloc_r+0x22>
 8024c42:	230c      	movs	r3, #12
 8024c44:	6033      	str	r3, [r6, #0]
 8024c46:	2000      	movs	r0, #0
 8024c48:	bd70      	pop	{r4, r5, r6, pc}
 8024c4a:	f000 fb5f 	bl	802530c <__malloc_lock>
 8024c4e:	4a23      	ldr	r2, [pc, #140]	; (8024cdc <_malloc_r+0xb4>)
 8024c50:	6814      	ldr	r4, [r2, #0]
 8024c52:	4621      	mov	r1, r4
 8024c54:	b991      	cbnz	r1, 8024c7c <_malloc_r+0x54>
 8024c56:	4c22      	ldr	r4, [pc, #136]	; (8024ce0 <_malloc_r+0xb8>)
 8024c58:	6823      	ldr	r3, [r4, #0]
 8024c5a:	b91b      	cbnz	r3, 8024c64 <_malloc_r+0x3c>
 8024c5c:	4630      	mov	r0, r6
 8024c5e:	f000 f8a5 	bl	8024dac <_sbrk_r>
 8024c62:	6020      	str	r0, [r4, #0]
 8024c64:	4629      	mov	r1, r5
 8024c66:	4630      	mov	r0, r6
 8024c68:	f000 f8a0 	bl	8024dac <_sbrk_r>
 8024c6c:	1c43      	adds	r3, r0, #1
 8024c6e:	d126      	bne.n	8024cbe <_malloc_r+0x96>
 8024c70:	230c      	movs	r3, #12
 8024c72:	6033      	str	r3, [r6, #0]
 8024c74:	4630      	mov	r0, r6
 8024c76:	f000 fb4a 	bl	802530e <__malloc_unlock>
 8024c7a:	e7e4      	b.n	8024c46 <_malloc_r+0x1e>
 8024c7c:	680b      	ldr	r3, [r1, #0]
 8024c7e:	1b5b      	subs	r3, r3, r5
 8024c80:	d41a      	bmi.n	8024cb8 <_malloc_r+0x90>
 8024c82:	2b0b      	cmp	r3, #11
 8024c84:	d90f      	bls.n	8024ca6 <_malloc_r+0x7e>
 8024c86:	600b      	str	r3, [r1, #0]
 8024c88:	50cd      	str	r5, [r1, r3]
 8024c8a:	18cc      	adds	r4, r1, r3
 8024c8c:	4630      	mov	r0, r6
 8024c8e:	f000 fb3e 	bl	802530e <__malloc_unlock>
 8024c92:	f104 000b 	add.w	r0, r4, #11
 8024c96:	1d23      	adds	r3, r4, #4
 8024c98:	f020 0007 	bic.w	r0, r0, #7
 8024c9c:	1ac3      	subs	r3, r0, r3
 8024c9e:	d01b      	beq.n	8024cd8 <_malloc_r+0xb0>
 8024ca0:	425a      	negs	r2, r3
 8024ca2:	50e2      	str	r2, [r4, r3]
 8024ca4:	bd70      	pop	{r4, r5, r6, pc}
 8024ca6:	428c      	cmp	r4, r1
 8024ca8:	bf0d      	iteet	eq
 8024caa:	6863      	ldreq	r3, [r4, #4]
 8024cac:	684b      	ldrne	r3, [r1, #4]
 8024cae:	6063      	strne	r3, [r4, #4]
 8024cb0:	6013      	streq	r3, [r2, #0]
 8024cb2:	bf18      	it	ne
 8024cb4:	460c      	movne	r4, r1
 8024cb6:	e7e9      	b.n	8024c8c <_malloc_r+0x64>
 8024cb8:	460c      	mov	r4, r1
 8024cba:	6849      	ldr	r1, [r1, #4]
 8024cbc:	e7ca      	b.n	8024c54 <_malloc_r+0x2c>
 8024cbe:	1cc4      	adds	r4, r0, #3
 8024cc0:	f024 0403 	bic.w	r4, r4, #3
 8024cc4:	42a0      	cmp	r0, r4
 8024cc6:	d005      	beq.n	8024cd4 <_malloc_r+0xac>
 8024cc8:	1a21      	subs	r1, r4, r0
 8024cca:	4630      	mov	r0, r6
 8024ccc:	f000 f86e 	bl	8024dac <_sbrk_r>
 8024cd0:	3001      	adds	r0, #1
 8024cd2:	d0cd      	beq.n	8024c70 <_malloc_r+0x48>
 8024cd4:	6025      	str	r5, [r4, #0]
 8024cd6:	e7d9      	b.n	8024c8c <_malloc_r+0x64>
 8024cd8:	bd70      	pop	{r4, r5, r6, pc}
 8024cda:	bf00      	nop
 8024cdc:	200453d0 	.word	0x200453d0
 8024ce0:	200453d4 	.word	0x200453d4

08024ce4 <_puts_r>:
 8024ce4:	b570      	push	{r4, r5, r6, lr}
 8024ce6:	460e      	mov	r6, r1
 8024ce8:	4605      	mov	r5, r0
 8024cea:	b118      	cbz	r0, 8024cf4 <_puts_r+0x10>
 8024cec:	6983      	ldr	r3, [r0, #24]
 8024cee:	b90b      	cbnz	r3, 8024cf4 <_puts_r+0x10>
 8024cf0:	f000 fa1e 	bl	8025130 <__sinit>
 8024cf4:	69ab      	ldr	r3, [r5, #24]
 8024cf6:	68ac      	ldr	r4, [r5, #8]
 8024cf8:	b913      	cbnz	r3, 8024d00 <_puts_r+0x1c>
 8024cfa:	4628      	mov	r0, r5
 8024cfc:	f000 fa18 	bl	8025130 <__sinit>
 8024d00:	4b23      	ldr	r3, [pc, #140]	; (8024d90 <_puts_r+0xac>)
 8024d02:	429c      	cmp	r4, r3
 8024d04:	d117      	bne.n	8024d36 <_puts_r+0x52>
 8024d06:	686c      	ldr	r4, [r5, #4]
 8024d08:	89a3      	ldrh	r3, [r4, #12]
 8024d0a:	071b      	lsls	r3, r3, #28
 8024d0c:	d51d      	bpl.n	8024d4a <_puts_r+0x66>
 8024d0e:	6923      	ldr	r3, [r4, #16]
 8024d10:	b1db      	cbz	r3, 8024d4a <_puts_r+0x66>
 8024d12:	3e01      	subs	r6, #1
 8024d14:	68a3      	ldr	r3, [r4, #8]
 8024d16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024d1a:	3b01      	subs	r3, #1
 8024d1c:	60a3      	str	r3, [r4, #8]
 8024d1e:	b9e9      	cbnz	r1, 8024d5c <_puts_r+0x78>
 8024d20:	2b00      	cmp	r3, #0
 8024d22:	da2e      	bge.n	8024d82 <_puts_r+0x9e>
 8024d24:	4622      	mov	r2, r4
 8024d26:	210a      	movs	r1, #10
 8024d28:	4628      	mov	r0, r5
 8024d2a:	f000 f84f 	bl	8024dcc <__swbuf_r>
 8024d2e:	3001      	adds	r0, #1
 8024d30:	d011      	beq.n	8024d56 <_puts_r+0x72>
 8024d32:	200a      	movs	r0, #10
 8024d34:	bd70      	pop	{r4, r5, r6, pc}
 8024d36:	4b17      	ldr	r3, [pc, #92]	; (8024d94 <_puts_r+0xb0>)
 8024d38:	429c      	cmp	r4, r3
 8024d3a:	d101      	bne.n	8024d40 <_puts_r+0x5c>
 8024d3c:	68ac      	ldr	r4, [r5, #8]
 8024d3e:	e7e3      	b.n	8024d08 <_puts_r+0x24>
 8024d40:	4b15      	ldr	r3, [pc, #84]	; (8024d98 <_puts_r+0xb4>)
 8024d42:	429c      	cmp	r4, r3
 8024d44:	bf08      	it	eq
 8024d46:	68ec      	ldreq	r4, [r5, #12]
 8024d48:	e7de      	b.n	8024d08 <_puts_r+0x24>
 8024d4a:	4621      	mov	r1, r4
 8024d4c:	4628      	mov	r0, r5
 8024d4e:	f000 f88f 	bl	8024e70 <__swsetup_r>
 8024d52:	2800      	cmp	r0, #0
 8024d54:	d0dd      	beq.n	8024d12 <_puts_r+0x2e>
 8024d56:	f04f 30ff 	mov.w	r0, #4294967295
 8024d5a:	bd70      	pop	{r4, r5, r6, pc}
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	da04      	bge.n	8024d6a <_puts_r+0x86>
 8024d60:	69a2      	ldr	r2, [r4, #24]
 8024d62:	4293      	cmp	r3, r2
 8024d64:	db06      	blt.n	8024d74 <_puts_r+0x90>
 8024d66:	290a      	cmp	r1, #10
 8024d68:	d004      	beq.n	8024d74 <_puts_r+0x90>
 8024d6a:	6823      	ldr	r3, [r4, #0]
 8024d6c:	1c5a      	adds	r2, r3, #1
 8024d6e:	6022      	str	r2, [r4, #0]
 8024d70:	7019      	strb	r1, [r3, #0]
 8024d72:	e7cf      	b.n	8024d14 <_puts_r+0x30>
 8024d74:	4622      	mov	r2, r4
 8024d76:	4628      	mov	r0, r5
 8024d78:	f000 f828 	bl	8024dcc <__swbuf_r>
 8024d7c:	3001      	adds	r0, #1
 8024d7e:	d1c9      	bne.n	8024d14 <_puts_r+0x30>
 8024d80:	e7e9      	b.n	8024d56 <_puts_r+0x72>
 8024d82:	6823      	ldr	r3, [r4, #0]
 8024d84:	200a      	movs	r0, #10
 8024d86:	1c5a      	adds	r2, r3, #1
 8024d88:	6022      	str	r2, [r4, #0]
 8024d8a:	7018      	strb	r0, [r3, #0]
 8024d8c:	bd70      	pop	{r4, r5, r6, pc}
 8024d8e:	bf00      	nop
 8024d90:	08034964 	.word	0x08034964
 8024d94:	08034984 	.word	0x08034984
 8024d98:	08034944 	.word	0x08034944

08024d9c <puts>:
 8024d9c:	4b02      	ldr	r3, [pc, #8]	; (8024da8 <puts+0xc>)
 8024d9e:	4601      	mov	r1, r0
 8024da0:	6818      	ldr	r0, [r3, #0]
 8024da2:	f7ff bf9f 	b.w	8024ce4 <_puts_r>
 8024da6:	bf00      	nop
 8024da8:	200000f8 	.word	0x200000f8

08024dac <_sbrk_r>:
 8024dac:	b538      	push	{r3, r4, r5, lr}
 8024dae:	4c06      	ldr	r4, [pc, #24]	; (8024dc8 <_sbrk_r+0x1c>)
 8024db0:	2300      	movs	r3, #0
 8024db2:	4605      	mov	r5, r0
 8024db4:	4608      	mov	r0, r1
 8024db6:	6023      	str	r3, [r4, #0]
 8024db8:	f7dc f930 	bl	800101c <_sbrk>
 8024dbc:	1c43      	adds	r3, r0, #1
 8024dbe:	d102      	bne.n	8024dc6 <_sbrk_r+0x1a>
 8024dc0:	6823      	ldr	r3, [r4, #0]
 8024dc2:	b103      	cbz	r3, 8024dc6 <_sbrk_r+0x1a>
 8024dc4:	602b      	str	r3, [r5, #0]
 8024dc6:	bd38      	pop	{r3, r4, r5, pc}
 8024dc8:	20046880 	.word	0x20046880

08024dcc <__swbuf_r>:
 8024dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024dce:	460e      	mov	r6, r1
 8024dd0:	4614      	mov	r4, r2
 8024dd2:	4605      	mov	r5, r0
 8024dd4:	b118      	cbz	r0, 8024dde <__swbuf_r+0x12>
 8024dd6:	6983      	ldr	r3, [r0, #24]
 8024dd8:	b90b      	cbnz	r3, 8024dde <__swbuf_r+0x12>
 8024dda:	f000 f9a9 	bl	8025130 <__sinit>
 8024dde:	4b21      	ldr	r3, [pc, #132]	; (8024e64 <__swbuf_r+0x98>)
 8024de0:	429c      	cmp	r4, r3
 8024de2:	d12a      	bne.n	8024e3a <__swbuf_r+0x6e>
 8024de4:	686c      	ldr	r4, [r5, #4]
 8024de6:	69a3      	ldr	r3, [r4, #24]
 8024de8:	60a3      	str	r3, [r4, #8]
 8024dea:	89a3      	ldrh	r3, [r4, #12]
 8024dec:	071a      	lsls	r2, r3, #28
 8024dee:	d52e      	bpl.n	8024e4e <__swbuf_r+0x82>
 8024df0:	6923      	ldr	r3, [r4, #16]
 8024df2:	b363      	cbz	r3, 8024e4e <__swbuf_r+0x82>
 8024df4:	6923      	ldr	r3, [r4, #16]
 8024df6:	6820      	ldr	r0, [r4, #0]
 8024df8:	1ac0      	subs	r0, r0, r3
 8024dfa:	6963      	ldr	r3, [r4, #20]
 8024dfc:	b2f6      	uxtb	r6, r6
 8024dfe:	4298      	cmp	r0, r3
 8024e00:	4637      	mov	r7, r6
 8024e02:	db04      	blt.n	8024e0e <__swbuf_r+0x42>
 8024e04:	4621      	mov	r1, r4
 8024e06:	4628      	mov	r0, r5
 8024e08:	f000 f928 	bl	802505c <_fflush_r>
 8024e0c:	bb28      	cbnz	r0, 8024e5a <__swbuf_r+0x8e>
 8024e0e:	68a3      	ldr	r3, [r4, #8]
 8024e10:	3b01      	subs	r3, #1
 8024e12:	60a3      	str	r3, [r4, #8]
 8024e14:	6823      	ldr	r3, [r4, #0]
 8024e16:	1c5a      	adds	r2, r3, #1
 8024e18:	6022      	str	r2, [r4, #0]
 8024e1a:	701e      	strb	r6, [r3, #0]
 8024e1c:	6963      	ldr	r3, [r4, #20]
 8024e1e:	3001      	adds	r0, #1
 8024e20:	4298      	cmp	r0, r3
 8024e22:	d004      	beq.n	8024e2e <__swbuf_r+0x62>
 8024e24:	89a3      	ldrh	r3, [r4, #12]
 8024e26:	07db      	lsls	r3, r3, #31
 8024e28:	d519      	bpl.n	8024e5e <__swbuf_r+0x92>
 8024e2a:	2e0a      	cmp	r6, #10
 8024e2c:	d117      	bne.n	8024e5e <__swbuf_r+0x92>
 8024e2e:	4621      	mov	r1, r4
 8024e30:	4628      	mov	r0, r5
 8024e32:	f000 f913 	bl	802505c <_fflush_r>
 8024e36:	b190      	cbz	r0, 8024e5e <__swbuf_r+0x92>
 8024e38:	e00f      	b.n	8024e5a <__swbuf_r+0x8e>
 8024e3a:	4b0b      	ldr	r3, [pc, #44]	; (8024e68 <__swbuf_r+0x9c>)
 8024e3c:	429c      	cmp	r4, r3
 8024e3e:	d101      	bne.n	8024e44 <__swbuf_r+0x78>
 8024e40:	68ac      	ldr	r4, [r5, #8]
 8024e42:	e7d0      	b.n	8024de6 <__swbuf_r+0x1a>
 8024e44:	4b09      	ldr	r3, [pc, #36]	; (8024e6c <__swbuf_r+0xa0>)
 8024e46:	429c      	cmp	r4, r3
 8024e48:	bf08      	it	eq
 8024e4a:	68ec      	ldreq	r4, [r5, #12]
 8024e4c:	e7cb      	b.n	8024de6 <__swbuf_r+0x1a>
 8024e4e:	4621      	mov	r1, r4
 8024e50:	4628      	mov	r0, r5
 8024e52:	f000 f80d 	bl	8024e70 <__swsetup_r>
 8024e56:	2800      	cmp	r0, #0
 8024e58:	d0cc      	beq.n	8024df4 <__swbuf_r+0x28>
 8024e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8024e5e:	4638      	mov	r0, r7
 8024e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e62:	bf00      	nop
 8024e64:	08034964 	.word	0x08034964
 8024e68:	08034984 	.word	0x08034984
 8024e6c:	08034944 	.word	0x08034944

08024e70 <__swsetup_r>:
 8024e70:	4b32      	ldr	r3, [pc, #200]	; (8024f3c <__swsetup_r+0xcc>)
 8024e72:	b570      	push	{r4, r5, r6, lr}
 8024e74:	681d      	ldr	r5, [r3, #0]
 8024e76:	4606      	mov	r6, r0
 8024e78:	460c      	mov	r4, r1
 8024e7a:	b125      	cbz	r5, 8024e86 <__swsetup_r+0x16>
 8024e7c:	69ab      	ldr	r3, [r5, #24]
 8024e7e:	b913      	cbnz	r3, 8024e86 <__swsetup_r+0x16>
 8024e80:	4628      	mov	r0, r5
 8024e82:	f000 f955 	bl	8025130 <__sinit>
 8024e86:	4b2e      	ldr	r3, [pc, #184]	; (8024f40 <__swsetup_r+0xd0>)
 8024e88:	429c      	cmp	r4, r3
 8024e8a:	d10f      	bne.n	8024eac <__swsetup_r+0x3c>
 8024e8c:	686c      	ldr	r4, [r5, #4]
 8024e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e92:	b29a      	uxth	r2, r3
 8024e94:	0715      	lsls	r5, r2, #28
 8024e96:	d42c      	bmi.n	8024ef2 <__swsetup_r+0x82>
 8024e98:	06d0      	lsls	r0, r2, #27
 8024e9a:	d411      	bmi.n	8024ec0 <__swsetup_r+0x50>
 8024e9c:	2209      	movs	r2, #9
 8024e9e:	6032      	str	r2, [r6, #0]
 8024ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024ea4:	81a3      	strh	r3, [r4, #12]
 8024ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8024eaa:	bd70      	pop	{r4, r5, r6, pc}
 8024eac:	4b25      	ldr	r3, [pc, #148]	; (8024f44 <__swsetup_r+0xd4>)
 8024eae:	429c      	cmp	r4, r3
 8024eb0:	d101      	bne.n	8024eb6 <__swsetup_r+0x46>
 8024eb2:	68ac      	ldr	r4, [r5, #8]
 8024eb4:	e7eb      	b.n	8024e8e <__swsetup_r+0x1e>
 8024eb6:	4b24      	ldr	r3, [pc, #144]	; (8024f48 <__swsetup_r+0xd8>)
 8024eb8:	429c      	cmp	r4, r3
 8024eba:	bf08      	it	eq
 8024ebc:	68ec      	ldreq	r4, [r5, #12]
 8024ebe:	e7e6      	b.n	8024e8e <__swsetup_r+0x1e>
 8024ec0:	0751      	lsls	r1, r2, #29
 8024ec2:	d512      	bpl.n	8024eea <__swsetup_r+0x7a>
 8024ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024ec6:	b141      	cbz	r1, 8024eda <__swsetup_r+0x6a>
 8024ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024ecc:	4299      	cmp	r1, r3
 8024ece:	d002      	beq.n	8024ed6 <__swsetup_r+0x66>
 8024ed0:	4630      	mov	r0, r6
 8024ed2:	f7ff fe5b 	bl	8024b8c <_free_r>
 8024ed6:	2300      	movs	r3, #0
 8024ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8024eda:	89a3      	ldrh	r3, [r4, #12]
 8024edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024ee0:	81a3      	strh	r3, [r4, #12]
 8024ee2:	2300      	movs	r3, #0
 8024ee4:	6063      	str	r3, [r4, #4]
 8024ee6:	6923      	ldr	r3, [r4, #16]
 8024ee8:	6023      	str	r3, [r4, #0]
 8024eea:	89a3      	ldrh	r3, [r4, #12]
 8024eec:	f043 0308 	orr.w	r3, r3, #8
 8024ef0:	81a3      	strh	r3, [r4, #12]
 8024ef2:	6923      	ldr	r3, [r4, #16]
 8024ef4:	b94b      	cbnz	r3, 8024f0a <__swsetup_r+0x9a>
 8024ef6:	89a3      	ldrh	r3, [r4, #12]
 8024ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024f00:	d003      	beq.n	8024f0a <__swsetup_r+0x9a>
 8024f02:	4621      	mov	r1, r4
 8024f04:	4630      	mov	r0, r6
 8024f06:	f000 f9c1 	bl	802528c <__smakebuf_r>
 8024f0a:	89a2      	ldrh	r2, [r4, #12]
 8024f0c:	f012 0301 	ands.w	r3, r2, #1
 8024f10:	d00c      	beq.n	8024f2c <__swsetup_r+0xbc>
 8024f12:	2300      	movs	r3, #0
 8024f14:	60a3      	str	r3, [r4, #8]
 8024f16:	6963      	ldr	r3, [r4, #20]
 8024f18:	425b      	negs	r3, r3
 8024f1a:	61a3      	str	r3, [r4, #24]
 8024f1c:	6923      	ldr	r3, [r4, #16]
 8024f1e:	b953      	cbnz	r3, 8024f36 <__swsetup_r+0xc6>
 8024f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024f28:	d1ba      	bne.n	8024ea0 <__swsetup_r+0x30>
 8024f2a:	bd70      	pop	{r4, r5, r6, pc}
 8024f2c:	0792      	lsls	r2, r2, #30
 8024f2e:	bf58      	it	pl
 8024f30:	6963      	ldrpl	r3, [r4, #20]
 8024f32:	60a3      	str	r3, [r4, #8]
 8024f34:	e7f2      	b.n	8024f1c <__swsetup_r+0xac>
 8024f36:	2000      	movs	r0, #0
 8024f38:	e7f7      	b.n	8024f2a <__swsetup_r+0xba>
 8024f3a:	bf00      	nop
 8024f3c:	200000f8 	.word	0x200000f8
 8024f40:	08034964 	.word	0x08034964
 8024f44:	08034984 	.word	0x08034984
 8024f48:	08034944 	.word	0x08034944

08024f4c <__sflush_r>:
 8024f4c:	898a      	ldrh	r2, [r1, #12]
 8024f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f52:	4605      	mov	r5, r0
 8024f54:	0710      	lsls	r0, r2, #28
 8024f56:	460c      	mov	r4, r1
 8024f58:	d45a      	bmi.n	8025010 <__sflush_r+0xc4>
 8024f5a:	684b      	ldr	r3, [r1, #4]
 8024f5c:	2b00      	cmp	r3, #0
 8024f5e:	dc05      	bgt.n	8024f6c <__sflush_r+0x20>
 8024f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024f62:	2b00      	cmp	r3, #0
 8024f64:	dc02      	bgt.n	8024f6c <__sflush_r+0x20>
 8024f66:	2000      	movs	r0, #0
 8024f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024f6e:	2e00      	cmp	r6, #0
 8024f70:	d0f9      	beq.n	8024f66 <__sflush_r+0x1a>
 8024f72:	2300      	movs	r3, #0
 8024f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024f78:	682f      	ldr	r7, [r5, #0]
 8024f7a:	602b      	str	r3, [r5, #0]
 8024f7c:	d033      	beq.n	8024fe6 <__sflush_r+0x9a>
 8024f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024f80:	89a3      	ldrh	r3, [r4, #12]
 8024f82:	075a      	lsls	r2, r3, #29
 8024f84:	d505      	bpl.n	8024f92 <__sflush_r+0x46>
 8024f86:	6863      	ldr	r3, [r4, #4]
 8024f88:	1ac0      	subs	r0, r0, r3
 8024f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024f8c:	b10b      	cbz	r3, 8024f92 <__sflush_r+0x46>
 8024f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024f90:	1ac0      	subs	r0, r0, r3
 8024f92:	2300      	movs	r3, #0
 8024f94:	4602      	mov	r2, r0
 8024f96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024f98:	6a21      	ldr	r1, [r4, #32]
 8024f9a:	4628      	mov	r0, r5
 8024f9c:	47b0      	blx	r6
 8024f9e:	1c43      	adds	r3, r0, #1
 8024fa0:	89a3      	ldrh	r3, [r4, #12]
 8024fa2:	d106      	bne.n	8024fb2 <__sflush_r+0x66>
 8024fa4:	6829      	ldr	r1, [r5, #0]
 8024fa6:	291d      	cmp	r1, #29
 8024fa8:	d84b      	bhi.n	8025042 <__sflush_r+0xf6>
 8024faa:	4a2b      	ldr	r2, [pc, #172]	; (8025058 <__sflush_r+0x10c>)
 8024fac:	40ca      	lsrs	r2, r1
 8024fae:	07d6      	lsls	r6, r2, #31
 8024fb0:	d547      	bpl.n	8025042 <__sflush_r+0xf6>
 8024fb2:	2200      	movs	r2, #0
 8024fb4:	6062      	str	r2, [r4, #4]
 8024fb6:	04d9      	lsls	r1, r3, #19
 8024fb8:	6922      	ldr	r2, [r4, #16]
 8024fba:	6022      	str	r2, [r4, #0]
 8024fbc:	d504      	bpl.n	8024fc8 <__sflush_r+0x7c>
 8024fbe:	1c42      	adds	r2, r0, #1
 8024fc0:	d101      	bne.n	8024fc6 <__sflush_r+0x7a>
 8024fc2:	682b      	ldr	r3, [r5, #0]
 8024fc4:	b903      	cbnz	r3, 8024fc8 <__sflush_r+0x7c>
 8024fc6:	6560      	str	r0, [r4, #84]	; 0x54
 8024fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024fca:	602f      	str	r7, [r5, #0]
 8024fcc:	2900      	cmp	r1, #0
 8024fce:	d0ca      	beq.n	8024f66 <__sflush_r+0x1a>
 8024fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024fd4:	4299      	cmp	r1, r3
 8024fd6:	d002      	beq.n	8024fde <__sflush_r+0x92>
 8024fd8:	4628      	mov	r0, r5
 8024fda:	f7ff fdd7 	bl	8024b8c <_free_r>
 8024fde:	2000      	movs	r0, #0
 8024fe0:	6360      	str	r0, [r4, #52]	; 0x34
 8024fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024fe6:	6a21      	ldr	r1, [r4, #32]
 8024fe8:	2301      	movs	r3, #1
 8024fea:	4628      	mov	r0, r5
 8024fec:	47b0      	blx	r6
 8024fee:	1c41      	adds	r1, r0, #1
 8024ff0:	d1c6      	bne.n	8024f80 <__sflush_r+0x34>
 8024ff2:	682b      	ldr	r3, [r5, #0]
 8024ff4:	2b00      	cmp	r3, #0
 8024ff6:	d0c3      	beq.n	8024f80 <__sflush_r+0x34>
 8024ff8:	2b1d      	cmp	r3, #29
 8024ffa:	d001      	beq.n	8025000 <__sflush_r+0xb4>
 8024ffc:	2b16      	cmp	r3, #22
 8024ffe:	d101      	bne.n	8025004 <__sflush_r+0xb8>
 8025000:	602f      	str	r7, [r5, #0]
 8025002:	e7b0      	b.n	8024f66 <__sflush_r+0x1a>
 8025004:	89a3      	ldrh	r3, [r4, #12]
 8025006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802500a:	81a3      	strh	r3, [r4, #12]
 802500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025010:	690f      	ldr	r7, [r1, #16]
 8025012:	2f00      	cmp	r7, #0
 8025014:	d0a7      	beq.n	8024f66 <__sflush_r+0x1a>
 8025016:	0793      	lsls	r3, r2, #30
 8025018:	680e      	ldr	r6, [r1, #0]
 802501a:	bf08      	it	eq
 802501c:	694b      	ldreq	r3, [r1, #20]
 802501e:	600f      	str	r7, [r1, #0]
 8025020:	bf18      	it	ne
 8025022:	2300      	movne	r3, #0
 8025024:	eba6 0807 	sub.w	r8, r6, r7
 8025028:	608b      	str	r3, [r1, #8]
 802502a:	f1b8 0f00 	cmp.w	r8, #0
 802502e:	dd9a      	ble.n	8024f66 <__sflush_r+0x1a>
 8025030:	4643      	mov	r3, r8
 8025032:	463a      	mov	r2, r7
 8025034:	6a21      	ldr	r1, [r4, #32]
 8025036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025038:	4628      	mov	r0, r5
 802503a:	47b0      	blx	r6
 802503c:	2800      	cmp	r0, #0
 802503e:	dc07      	bgt.n	8025050 <__sflush_r+0x104>
 8025040:	89a3      	ldrh	r3, [r4, #12]
 8025042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025046:	81a3      	strh	r3, [r4, #12]
 8025048:	f04f 30ff 	mov.w	r0, #4294967295
 802504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025050:	4407      	add	r7, r0
 8025052:	eba8 0800 	sub.w	r8, r8, r0
 8025056:	e7e8      	b.n	802502a <__sflush_r+0xde>
 8025058:	20400001 	.word	0x20400001

0802505c <_fflush_r>:
 802505c:	b538      	push	{r3, r4, r5, lr}
 802505e:	690b      	ldr	r3, [r1, #16]
 8025060:	4605      	mov	r5, r0
 8025062:	460c      	mov	r4, r1
 8025064:	b1db      	cbz	r3, 802509e <_fflush_r+0x42>
 8025066:	b118      	cbz	r0, 8025070 <_fflush_r+0x14>
 8025068:	6983      	ldr	r3, [r0, #24]
 802506a:	b90b      	cbnz	r3, 8025070 <_fflush_r+0x14>
 802506c:	f000 f860 	bl	8025130 <__sinit>
 8025070:	4b0c      	ldr	r3, [pc, #48]	; (80250a4 <_fflush_r+0x48>)
 8025072:	429c      	cmp	r4, r3
 8025074:	d109      	bne.n	802508a <_fflush_r+0x2e>
 8025076:	686c      	ldr	r4, [r5, #4]
 8025078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802507c:	b17b      	cbz	r3, 802509e <_fflush_r+0x42>
 802507e:	4621      	mov	r1, r4
 8025080:	4628      	mov	r0, r5
 8025082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025086:	f7ff bf61 	b.w	8024f4c <__sflush_r>
 802508a:	4b07      	ldr	r3, [pc, #28]	; (80250a8 <_fflush_r+0x4c>)
 802508c:	429c      	cmp	r4, r3
 802508e:	d101      	bne.n	8025094 <_fflush_r+0x38>
 8025090:	68ac      	ldr	r4, [r5, #8]
 8025092:	e7f1      	b.n	8025078 <_fflush_r+0x1c>
 8025094:	4b05      	ldr	r3, [pc, #20]	; (80250ac <_fflush_r+0x50>)
 8025096:	429c      	cmp	r4, r3
 8025098:	bf08      	it	eq
 802509a:	68ec      	ldreq	r4, [r5, #12]
 802509c:	e7ec      	b.n	8025078 <_fflush_r+0x1c>
 802509e:	2000      	movs	r0, #0
 80250a0:	bd38      	pop	{r3, r4, r5, pc}
 80250a2:	bf00      	nop
 80250a4:	08034964 	.word	0x08034964
 80250a8:	08034984 	.word	0x08034984
 80250ac:	08034944 	.word	0x08034944

080250b0 <_cleanup_r>:
 80250b0:	4901      	ldr	r1, [pc, #4]	; (80250b8 <_cleanup_r+0x8>)
 80250b2:	f000 b8a9 	b.w	8025208 <_fwalk_reent>
 80250b6:	bf00      	nop
 80250b8:	0802505d 	.word	0x0802505d

080250bc <std.isra.0>:
 80250bc:	2300      	movs	r3, #0
 80250be:	b510      	push	{r4, lr}
 80250c0:	4604      	mov	r4, r0
 80250c2:	6003      	str	r3, [r0, #0]
 80250c4:	6043      	str	r3, [r0, #4]
 80250c6:	6083      	str	r3, [r0, #8]
 80250c8:	8181      	strh	r1, [r0, #12]
 80250ca:	6643      	str	r3, [r0, #100]	; 0x64
 80250cc:	81c2      	strh	r2, [r0, #14]
 80250ce:	6103      	str	r3, [r0, #16]
 80250d0:	6143      	str	r3, [r0, #20]
 80250d2:	6183      	str	r3, [r0, #24]
 80250d4:	4619      	mov	r1, r3
 80250d6:	2208      	movs	r2, #8
 80250d8:	305c      	adds	r0, #92	; 0x5c
 80250da:	f7ff fd4f 	bl	8024b7c <memset>
 80250de:	4b05      	ldr	r3, [pc, #20]	; (80250f4 <std.isra.0+0x38>)
 80250e0:	6263      	str	r3, [r4, #36]	; 0x24
 80250e2:	4b05      	ldr	r3, [pc, #20]	; (80250f8 <std.isra.0+0x3c>)
 80250e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80250e6:	4b05      	ldr	r3, [pc, #20]	; (80250fc <std.isra.0+0x40>)
 80250e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80250ea:	4b05      	ldr	r3, [pc, #20]	; (8025100 <std.isra.0+0x44>)
 80250ec:	6224      	str	r4, [r4, #32]
 80250ee:	6323      	str	r3, [r4, #48]	; 0x30
 80250f0:	bd10      	pop	{r4, pc}
 80250f2:	bf00      	nop
 80250f4:	08025311 	.word	0x08025311
 80250f8:	08025333 	.word	0x08025333
 80250fc:	0802536b 	.word	0x0802536b
 8025100:	0802538f 	.word	0x0802538f

08025104 <__sfmoreglue>:
 8025104:	b570      	push	{r4, r5, r6, lr}
 8025106:	1e4a      	subs	r2, r1, #1
 8025108:	2568      	movs	r5, #104	; 0x68
 802510a:	4355      	muls	r5, r2
 802510c:	460e      	mov	r6, r1
 802510e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025112:	f7ff fd89 	bl	8024c28 <_malloc_r>
 8025116:	4604      	mov	r4, r0
 8025118:	b140      	cbz	r0, 802512c <__sfmoreglue+0x28>
 802511a:	2100      	movs	r1, #0
 802511c:	e880 0042 	stmia.w	r0, {r1, r6}
 8025120:	300c      	adds	r0, #12
 8025122:	60a0      	str	r0, [r4, #8]
 8025124:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025128:	f7ff fd28 	bl	8024b7c <memset>
 802512c:	4620      	mov	r0, r4
 802512e:	bd70      	pop	{r4, r5, r6, pc}

08025130 <__sinit>:
 8025130:	6983      	ldr	r3, [r0, #24]
 8025132:	b510      	push	{r4, lr}
 8025134:	4604      	mov	r4, r0
 8025136:	bb33      	cbnz	r3, 8025186 <__sinit+0x56>
 8025138:	6483      	str	r3, [r0, #72]	; 0x48
 802513a:	64c3      	str	r3, [r0, #76]	; 0x4c
 802513c:	6503      	str	r3, [r0, #80]	; 0x50
 802513e:	4b12      	ldr	r3, [pc, #72]	; (8025188 <__sinit+0x58>)
 8025140:	4a12      	ldr	r2, [pc, #72]	; (802518c <__sinit+0x5c>)
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	6282      	str	r2, [r0, #40]	; 0x28
 8025146:	4298      	cmp	r0, r3
 8025148:	bf04      	itt	eq
 802514a:	2301      	moveq	r3, #1
 802514c:	6183      	streq	r3, [r0, #24]
 802514e:	f000 f81f 	bl	8025190 <__sfp>
 8025152:	6060      	str	r0, [r4, #4]
 8025154:	4620      	mov	r0, r4
 8025156:	f000 f81b 	bl	8025190 <__sfp>
 802515a:	60a0      	str	r0, [r4, #8]
 802515c:	4620      	mov	r0, r4
 802515e:	f000 f817 	bl	8025190 <__sfp>
 8025162:	2200      	movs	r2, #0
 8025164:	60e0      	str	r0, [r4, #12]
 8025166:	2104      	movs	r1, #4
 8025168:	6860      	ldr	r0, [r4, #4]
 802516a:	f7ff ffa7 	bl	80250bc <std.isra.0>
 802516e:	2201      	movs	r2, #1
 8025170:	2109      	movs	r1, #9
 8025172:	68a0      	ldr	r0, [r4, #8]
 8025174:	f7ff ffa2 	bl	80250bc <std.isra.0>
 8025178:	2202      	movs	r2, #2
 802517a:	2112      	movs	r1, #18
 802517c:	68e0      	ldr	r0, [r4, #12]
 802517e:	f7ff ff9d 	bl	80250bc <std.isra.0>
 8025182:	2301      	movs	r3, #1
 8025184:	61a3      	str	r3, [r4, #24]
 8025186:	bd10      	pop	{r4, pc}
 8025188:	08034940 	.word	0x08034940
 802518c:	080250b1 	.word	0x080250b1

08025190 <__sfp>:
 8025190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025192:	4b1c      	ldr	r3, [pc, #112]	; (8025204 <__sfp+0x74>)
 8025194:	681e      	ldr	r6, [r3, #0]
 8025196:	69b3      	ldr	r3, [r6, #24]
 8025198:	4607      	mov	r7, r0
 802519a:	b913      	cbnz	r3, 80251a2 <__sfp+0x12>
 802519c:	4630      	mov	r0, r6
 802519e:	f7ff ffc7 	bl	8025130 <__sinit>
 80251a2:	3648      	adds	r6, #72	; 0x48
 80251a4:	68b4      	ldr	r4, [r6, #8]
 80251a6:	6873      	ldr	r3, [r6, #4]
 80251a8:	3b01      	subs	r3, #1
 80251aa:	d503      	bpl.n	80251b4 <__sfp+0x24>
 80251ac:	6833      	ldr	r3, [r6, #0]
 80251ae:	b133      	cbz	r3, 80251be <__sfp+0x2e>
 80251b0:	6836      	ldr	r6, [r6, #0]
 80251b2:	e7f7      	b.n	80251a4 <__sfp+0x14>
 80251b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80251b8:	b16d      	cbz	r5, 80251d6 <__sfp+0x46>
 80251ba:	3468      	adds	r4, #104	; 0x68
 80251bc:	e7f4      	b.n	80251a8 <__sfp+0x18>
 80251be:	2104      	movs	r1, #4
 80251c0:	4638      	mov	r0, r7
 80251c2:	f7ff ff9f 	bl	8025104 <__sfmoreglue>
 80251c6:	6030      	str	r0, [r6, #0]
 80251c8:	2800      	cmp	r0, #0
 80251ca:	d1f1      	bne.n	80251b0 <__sfp+0x20>
 80251cc:	230c      	movs	r3, #12
 80251ce:	603b      	str	r3, [r7, #0]
 80251d0:	4604      	mov	r4, r0
 80251d2:	4620      	mov	r0, r4
 80251d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80251d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80251da:	81e3      	strh	r3, [r4, #14]
 80251dc:	2301      	movs	r3, #1
 80251de:	81a3      	strh	r3, [r4, #12]
 80251e0:	6665      	str	r5, [r4, #100]	; 0x64
 80251e2:	6025      	str	r5, [r4, #0]
 80251e4:	60a5      	str	r5, [r4, #8]
 80251e6:	6065      	str	r5, [r4, #4]
 80251e8:	6125      	str	r5, [r4, #16]
 80251ea:	6165      	str	r5, [r4, #20]
 80251ec:	61a5      	str	r5, [r4, #24]
 80251ee:	2208      	movs	r2, #8
 80251f0:	4629      	mov	r1, r5
 80251f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80251f6:	f7ff fcc1 	bl	8024b7c <memset>
 80251fa:	6365      	str	r5, [r4, #52]	; 0x34
 80251fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80251fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8025200:	64e5      	str	r5, [r4, #76]	; 0x4c
 8025202:	e7e6      	b.n	80251d2 <__sfp+0x42>
 8025204:	08034940 	.word	0x08034940

08025208 <_fwalk_reent>:
 8025208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802520c:	4680      	mov	r8, r0
 802520e:	4689      	mov	r9, r1
 8025210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025214:	2600      	movs	r6, #0
 8025216:	b914      	cbnz	r4, 802521e <_fwalk_reent+0x16>
 8025218:	4630      	mov	r0, r6
 802521a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802521e:	68a5      	ldr	r5, [r4, #8]
 8025220:	6867      	ldr	r7, [r4, #4]
 8025222:	3f01      	subs	r7, #1
 8025224:	d501      	bpl.n	802522a <_fwalk_reent+0x22>
 8025226:	6824      	ldr	r4, [r4, #0]
 8025228:	e7f5      	b.n	8025216 <_fwalk_reent+0xe>
 802522a:	89ab      	ldrh	r3, [r5, #12]
 802522c:	2b01      	cmp	r3, #1
 802522e:	d907      	bls.n	8025240 <_fwalk_reent+0x38>
 8025230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025234:	3301      	adds	r3, #1
 8025236:	d003      	beq.n	8025240 <_fwalk_reent+0x38>
 8025238:	4629      	mov	r1, r5
 802523a:	4640      	mov	r0, r8
 802523c:	47c8      	blx	r9
 802523e:	4306      	orrs	r6, r0
 8025240:	3568      	adds	r5, #104	; 0x68
 8025242:	e7ee      	b.n	8025222 <_fwalk_reent+0x1a>

08025244 <__swhatbuf_r>:
 8025244:	b570      	push	{r4, r5, r6, lr}
 8025246:	460e      	mov	r6, r1
 8025248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802524c:	2900      	cmp	r1, #0
 802524e:	b090      	sub	sp, #64	; 0x40
 8025250:	4614      	mov	r4, r2
 8025252:	461d      	mov	r5, r3
 8025254:	da07      	bge.n	8025266 <__swhatbuf_r+0x22>
 8025256:	2300      	movs	r3, #0
 8025258:	602b      	str	r3, [r5, #0]
 802525a:	89b3      	ldrh	r3, [r6, #12]
 802525c:	061a      	lsls	r2, r3, #24
 802525e:	d410      	bmi.n	8025282 <__swhatbuf_r+0x3e>
 8025260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025264:	e00e      	b.n	8025284 <__swhatbuf_r+0x40>
 8025266:	aa01      	add	r2, sp, #4
 8025268:	f000 f8b8 	bl	80253dc <_fstat_r>
 802526c:	2800      	cmp	r0, #0
 802526e:	dbf2      	blt.n	8025256 <__swhatbuf_r+0x12>
 8025270:	9a02      	ldr	r2, [sp, #8]
 8025272:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025276:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802527a:	425a      	negs	r2, r3
 802527c:	415a      	adcs	r2, r3
 802527e:	602a      	str	r2, [r5, #0]
 8025280:	e7ee      	b.n	8025260 <__swhatbuf_r+0x1c>
 8025282:	2340      	movs	r3, #64	; 0x40
 8025284:	2000      	movs	r0, #0
 8025286:	6023      	str	r3, [r4, #0]
 8025288:	b010      	add	sp, #64	; 0x40
 802528a:	bd70      	pop	{r4, r5, r6, pc}

0802528c <__smakebuf_r>:
 802528c:	898b      	ldrh	r3, [r1, #12]
 802528e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025290:	079d      	lsls	r5, r3, #30
 8025292:	4606      	mov	r6, r0
 8025294:	460c      	mov	r4, r1
 8025296:	d507      	bpl.n	80252a8 <__smakebuf_r+0x1c>
 8025298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802529c:	6023      	str	r3, [r4, #0]
 802529e:	6123      	str	r3, [r4, #16]
 80252a0:	2301      	movs	r3, #1
 80252a2:	6163      	str	r3, [r4, #20]
 80252a4:	b002      	add	sp, #8
 80252a6:	bd70      	pop	{r4, r5, r6, pc}
 80252a8:	ab01      	add	r3, sp, #4
 80252aa:	466a      	mov	r2, sp
 80252ac:	f7ff ffca 	bl	8025244 <__swhatbuf_r>
 80252b0:	9900      	ldr	r1, [sp, #0]
 80252b2:	4605      	mov	r5, r0
 80252b4:	4630      	mov	r0, r6
 80252b6:	f7ff fcb7 	bl	8024c28 <_malloc_r>
 80252ba:	b948      	cbnz	r0, 80252d0 <__smakebuf_r+0x44>
 80252bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80252c0:	059a      	lsls	r2, r3, #22
 80252c2:	d4ef      	bmi.n	80252a4 <__smakebuf_r+0x18>
 80252c4:	f023 0303 	bic.w	r3, r3, #3
 80252c8:	f043 0302 	orr.w	r3, r3, #2
 80252cc:	81a3      	strh	r3, [r4, #12]
 80252ce:	e7e3      	b.n	8025298 <__smakebuf_r+0xc>
 80252d0:	4b0d      	ldr	r3, [pc, #52]	; (8025308 <__smakebuf_r+0x7c>)
 80252d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80252d4:	89a3      	ldrh	r3, [r4, #12]
 80252d6:	6020      	str	r0, [r4, #0]
 80252d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80252dc:	81a3      	strh	r3, [r4, #12]
 80252de:	9b00      	ldr	r3, [sp, #0]
 80252e0:	6163      	str	r3, [r4, #20]
 80252e2:	9b01      	ldr	r3, [sp, #4]
 80252e4:	6120      	str	r0, [r4, #16]
 80252e6:	b15b      	cbz	r3, 8025300 <__smakebuf_r+0x74>
 80252e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80252ec:	4630      	mov	r0, r6
 80252ee:	f000 f887 	bl	8025400 <_isatty_r>
 80252f2:	b128      	cbz	r0, 8025300 <__smakebuf_r+0x74>
 80252f4:	89a3      	ldrh	r3, [r4, #12]
 80252f6:	f023 0303 	bic.w	r3, r3, #3
 80252fa:	f043 0301 	orr.w	r3, r3, #1
 80252fe:	81a3      	strh	r3, [r4, #12]
 8025300:	89a3      	ldrh	r3, [r4, #12]
 8025302:	431d      	orrs	r5, r3
 8025304:	81a5      	strh	r5, [r4, #12]
 8025306:	e7cd      	b.n	80252a4 <__smakebuf_r+0x18>
 8025308:	080250b1 	.word	0x080250b1

0802530c <__malloc_lock>:
 802530c:	4770      	bx	lr

0802530e <__malloc_unlock>:
 802530e:	4770      	bx	lr

08025310 <__sread>:
 8025310:	b510      	push	{r4, lr}
 8025312:	460c      	mov	r4, r1
 8025314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025318:	f000 f894 	bl	8025444 <_read_r>
 802531c:	2800      	cmp	r0, #0
 802531e:	bfab      	itete	ge
 8025320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025322:	89a3      	ldrhlt	r3, [r4, #12]
 8025324:	181b      	addge	r3, r3, r0
 8025326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802532a:	bfac      	ite	ge
 802532c:	6563      	strge	r3, [r4, #84]	; 0x54
 802532e:	81a3      	strhlt	r3, [r4, #12]
 8025330:	bd10      	pop	{r4, pc}

08025332 <__swrite>:
 8025332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025336:	461f      	mov	r7, r3
 8025338:	898b      	ldrh	r3, [r1, #12]
 802533a:	05db      	lsls	r3, r3, #23
 802533c:	4605      	mov	r5, r0
 802533e:	460c      	mov	r4, r1
 8025340:	4616      	mov	r6, r2
 8025342:	d505      	bpl.n	8025350 <__swrite+0x1e>
 8025344:	2302      	movs	r3, #2
 8025346:	2200      	movs	r2, #0
 8025348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802534c:	f000 f868 	bl	8025420 <_lseek_r>
 8025350:	89a3      	ldrh	r3, [r4, #12]
 8025352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802535a:	81a3      	strh	r3, [r4, #12]
 802535c:	4632      	mov	r2, r6
 802535e:	463b      	mov	r3, r7
 8025360:	4628      	mov	r0, r5
 8025362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025366:	f000 b817 	b.w	8025398 <_write_r>

0802536a <__sseek>:
 802536a:	b510      	push	{r4, lr}
 802536c:	460c      	mov	r4, r1
 802536e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025372:	f000 f855 	bl	8025420 <_lseek_r>
 8025376:	1c43      	adds	r3, r0, #1
 8025378:	89a3      	ldrh	r3, [r4, #12]
 802537a:	bf15      	itete	ne
 802537c:	6560      	strne	r0, [r4, #84]	; 0x54
 802537e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025386:	81a3      	strheq	r3, [r4, #12]
 8025388:	bf18      	it	ne
 802538a:	81a3      	strhne	r3, [r4, #12]
 802538c:	bd10      	pop	{r4, pc}

0802538e <__sclose>:
 802538e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025392:	f000 b813 	b.w	80253bc <_close_r>
	...

08025398 <_write_r>:
 8025398:	b538      	push	{r3, r4, r5, lr}
 802539a:	4c07      	ldr	r4, [pc, #28]	; (80253b8 <_write_r+0x20>)
 802539c:	4605      	mov	r5, r0
 802539e:	4608      	mov	r0, r1
 80253a0:	4611      	mov	r1, r2
 80253a2:	2200      	movs	r2, #0
 80253a4:	6022      	str	r2, [r4, #0]
 80253a6:	461a      	mov	r2, r3
 80253a8:	f7db fe29 	bl	8000ffe <_write>
 80253ac:	1c43      	adds	r3, r0, #1
 80253ae:	d102      	bne.n	80253b6 <_write_r+0x1e>
 80253b0:	6823      	ldr	r3, [r4, #0]
 80253b2:	b103      	cbz	r3, 80253b6 <_write_r+0x1e>
 80253b4:	602b      	str	r3, [r5, #0]
 80253b6:	bd38      	pop	{r3, r4, r5, pc}
 80253b8:	20046880 	.word	0x20046880

080253bc <_close_r>:
 80253bc:	b538      	push	{r3, r4, r5, lr}
 80253be:	4c06      	ldr	r4, [pc, #24]	; (80253d8 <_close_r+0x1c>)
 80253c0:	2300      	movs	r3, #0
 80253c2:	4605      	mov	r5, r0
 80253c4:	4608      	mov	r0, r1
 80253c6:	6023      	str	r3, [r4, #0]
 80253c8:	f7db fe42 	bl	8001050 <_close>
 80253cc:	1c43      	adds	r3, r0, #1
 80253ce:	d102      	bne.n	80253d6 <_close_r+0x1a>
 80253d0:	6823      	ldr	r3, [r4, #0]
 80253d2:	b103      	cbz	r3, 80253d6 <_close_r+0x1a>
 80253d4:	602b      	str	r3, [r5, #0]
 80253d6:	bd38      	pop	{r3, r4, r5, pc}
 80253d8:	20046880 	.word	0x20046880

080253dc <_fstat_r>:
 80253dc:	b538      	push	{r3, r4, r5, lr}
 80253de:	4c07      	ldr	r4, [pc, #28]	; (80253fc <_fstat_r+0x20>)
 80253e0:	2300      	movs	r3, #0
 80253e2:	4605      	mov	r5, r0
 80253e4:	4608      	mov	r0, r1
 80253e6:	4611      	mov	r1, r2
 80253e8:	6023      	str	r3, [r4, #0]
 80253ea:	f7db fe34 	bl	8001056 <_fstat>
 80253ee:	1c43      	adds	r3, r0, #1
 80253f0:	d102      	bne.n	80253f8 <_fstat_r+0x1c>
 80253f2:	6823      	ldr	r3, [r4, #0]
 80253f4:	b103      	cbz	r3, 80253f8 <_fstat_r+0x1c>
 80253f6:	602b      	str	r3, [r5, #0]
 80253f8:	bd38      	pop	{r3, r4, r5, pc}
 80253fa:	bf00      	nop
 80253fc:	20046880 	.word	0x20046880

08025400 <_isatty_r>:
 8025400:	b538      	push	{r3, r4, r5, lr}
 8025402:	4c06      	ldr	r4, [pc, #24]	; (802541c <_isatty_r+0x1c>)
 8025404:	2300      	movs	r3, #0
 8025406:	4605      	mov	r5, r0
 8025408:	4608      	mov	r0, r1
 802540a:	6023      	str	r3, [r4, #0]
 802540c:	f7db fe28 	bl	8001060 <_isatty>
 8025410:	1c43      	adds	r3, r0, #1
 8025412:	d102      	bne.n	802541a <_isatty_r+0x1a>
 8025414:	6823      	ldr	r3, [r4, #0]
 8025416:	b103      	cbz	r3, 802541a <_isatty_r+0x1a>
 8025418:	602b      	str	r3, [r5, #0]
 802541a:	bd38      	pop	{r3, r4, r5, pc}
 802541c:	20046880 	.word	0x20046880

08025420 <_lseek_r>:
 8025420:	b538      	push	{r3, r4, r5, lr}
 8025422:	4c07      	ldr	r4, [pc, #28]	; (8025440 <_lseek_r+0x20>)
 8025424:	4605      	mov	r5, r0
 8025426:	4608      	mov	r0, r1
 8025428:	4611      	mov	r1, r2
 802542a:	2200      	movs	r2, #0
 802542c:	6022      	str	r2, [r4, #0]
 802542e:	461a      	mov	r2, r3
 8025430:	f7db fe18 	bl	8001064 <_lseek>
 8025434:	1c43      	adds	r3, r0, #1
 8025436:	d102      	bne.n	802543e <_lseek_r+0x1e>
 8025438:	6823      	ldr	r3, [r4, #0]
 802543a:	b103      	cbz	r3, 802543e <_lseek_r+0x1e>
 802543c:	602b      	str	r3, [r5, #0]
 802543e:	bd38      	pop	{r3, r4, r5, pc}
 8025440:	20046880 	.word	0x20046880

08025444 <_read_r>:
 8025444:	b538      	push	{r3, r4, r5, lr}
 8025446:	4c07      	ldr	r4, [pc, #28]	; (8025464 <_read_r+0x20>)
 8025448:	4605      	mov	r5, r0
 802544a:	4608      	mov	r0, r1
 802544c:	4611      	mov	r1, r2
 802544e:	2200      	movs	r2, #0
 8025450:	6022      	str	r2, [r4, #0]
 8025452:	461a      	mov	r2, r3
 8025454:	f7db fdc5 	bl	8000fe2 <_read>
 8025458:	1c43      	adds	r3, r0, #1
 802545a:	d102      	bne.n	8025462 <_read_r+0x1e>
 802545c:	6823      	ldr	r3, [r4, #0]
 802545e:	b103      	cbz	r3, 8025462 <_read_r+0x1e>
 8025460:	602b      	str	r3, [r5, #0]
 8025462:	bd38      	pop	{r3, r4, r5, pc}
 8025464:	20046880 	.word	0x20046880

08025468 <ceil>:
 8025468:	ec51 0b10 	vmov	r0, r1, d0
 802546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025470:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025474:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025478:	2e13      	cmp	r6, #19
 802547a:	ee10 8a10 	vmov	r8, s0
 802547e:	460c      	mov	r4, r1
 8025480:	ee10 5a10 	vmov	r5, s0
 8025484:	dc31      	bgt.n	80254ea <ceil+0x82>
 8025486:	2e00      	cmp	r6, #0
 8025488:	da13      	bge.n	80254b2 <ceil+0x4a>
 802548a:	a335      	add	r3, pc, #212	; (adr r3, 8025560 <ceil+0xf8>)
 802548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025490:	f7da fecc 	bl	800022c <__adddf3>
 8025494:	2200      	movs	r2, #0
 8025496:	2300      	movs	r3, #0
 8025498:	f7db fb0a 	bl	8000ab0 <__aeabi_dcmpgt>
 802549c:	b130      	cbz	r0, 80254ac <ceil+0x44>
 802549e:	2c00      	cmp	r4, #0
 80254a0:	db56      	blt.n	8025550 <ceil+0xe8>
 80254a2:	ea54 0408 	orrs.w	r4, r4, r8
 80254a6:	d057      	beq.n	8025558 <ceil+0xf0>
 80254a8:	4c2f      	ldr	r4, [pc, #188]	; (8025568 <ceil+0x100>)
 80254aa:	2500      	movs	r5, #0
 80254ac:	4621      	mov	r1, r4
 80254ae:	4628      	mov	r0, r5
 80254b0:	e025      	b.n	80254fe <ceil+0x96>
 80254b2:	4f2e      	ldr	r7, [pc, #184]	; (802556c <ceil+0x104>)
 80254b4:	4137      	asrs	r7, r6
 80254b6:	ea01 0307 	and.w	r3, r1, r7
 80254ba:	4303      	orrs	r3, r0
 80254bc:	d01f      	beq.n	80254fe <ceil+0x96>
 80254be:	a328      	add	r3, pc, #160	; (adr r3, 8025560 <ceil+0xf8>)
 80254c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254c4:	f7da feb2 	bl	800022c <__adddf3>
 80254c8:	2200      	movs	r2, #0
 80254ca:	2300      	movs	r3, #0
 80254cc:	f7db faf0 	bl	8000ab0 <__aeabi_dcmpgt>
 80254d0:	2800      	cmp	r0, #0
 80254d2:	d0eb      	beq.n	80254ac <ceil+0x44>
 80254d4:	2c00      	cmp	r4, #0
 80254d6:	bfc2      	ittt	gt
 80254d8:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80254dc:	fa43 f606 	asrgt.w	r6, r3, r6
 80254e0:	19a4      	addgt	r4, r4, r6
 80254e2:	ea24 0407 	bic.w	r4, r4, r7
 80254e6:	2500      	movs	r5, #0
 80254e8:	e7e0      	b.n	80254ac <ceil+0x44>
 80254ea:	2e33      	cmp	r6, #51	; 0x33
 80254ec:	dd0b      	ble.n	8025506 <ceil+0x9e>
 80254ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80254f2:	d104      	bne.n	80254fe <ceil+0x96>
 80254f4:	ee10 2a10 	vmov	r2, s0
 80254f8:	460b      	mov	r3, r1
 80254fa:	f7da fe97 	bl	800022c <__adddf3>
 80254fe:	ec41 0b10 	vmov	d0, r0, r1
 8025502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025506:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802550a:	f04f 33ff 	mov.w	r3, #4294967295
 802550e:	fa23 f707 	lsr.w	r7, r3, r7
 8025512:	4238      	tst	r0, r7
 8025514:	d0f3      	beq.n	80254fe <ceil+0x96>
 8025516:	a312      	add	r3, pc, #72	; (adr r3, 8025560 <ceil+0xf8>)
 8025518:	e9d3 2300 	ldrd	r2, r3, [r3]
 802551c:	f7da fe86 	bl	800022c <__adddf3>
 8025520:	2200      	movs	r2, #0
 8025522:	2300      	movs	r3, #0
 8025524:	f7db fac4 	bl	8000ab0 <__aeabi_dcmpgt>
 8025528:	2800      	cmp	r0, #0
 802552a:	d0bf      	beq.n	80254ac <ceil+0x44>
 802552c:	2c00      	cmp	r4, #0
 802552e:	dd02      	ble.n	8025536 <ceil+0xce>
 8025530:	2e14      	cmp	r6, #20
 8025532:	d103      	bne.n	802553c <ceil+0xd4>
 8025534:	3401      	adds	r4, #1
 8025536:	ea25 0507 	bic.w	r5, r5, r7
 802553a:	e7b7      	b.n	80254ac <ceil+0x44>
 802553c:	2301      	movs	r3, #1
 802553e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025542:	fa03 f606 	lsl.w	r6, r3, r6
 8025546:	4435      	add	r5, r6
 8025548:	45a8      	cmp	r8, r5
 802554a:	bf88      	it	hi
 802554c:	18e4      	addhi	r4, r4, r3
 802554e:	e7f2      	b.n	8025536 <ceil+0xce>
 8025550:	2500      	movs	r5, #0
 8025552:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8025556:	e7a9      	b.n	80254ac <ceil+0x44>
 8025558:	4625      	mov	r5, r4
 802555a:	e7a7      	b.n	80254ac <ceil+0x44>
 802555c:	f3af 8000 	nop.w
 8025560:	8800759c 	.word	0x8800759c
 8025564:	7e37e43c 	.word	0x7e37e43c
 8025568:	3ff00000 	.word	0x3ff00000
 802556c:	000fffff 	.word	0x000fffff

08025570 <floor>:
 8025570:	ec51 0b10 	vmov	r0, r1, d0
 8025574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025578:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802557c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025580:	2e13      	cmp	r6, #19
 8025582:	ee10 8a10 	vmov	r8, s0
 8025586:	460c      	mov	r4, r1
 8025588:	ee10 5a10 	vmov	r5, s0
 802558c:	dc35      	bgt.n	80255fa <floor+0x8a>
 802558e:	2e00      	cmp	r6, #0
 8025590:	da17      	bge.n	80255c2 <floor+0x52>
 8025592:	a335      	add	r3, pc, #212	; (adr r3, 8025668 <floor+0xf8>)
 8025594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025598:	f7da fe48 	bl	800022c <__adddf3>
 802559c:	2200      	movs	r2, #0
 802559e:	2300      	movs	r3, #0
 80255a0:	f7db fa86 	bl	8000ab0 <__aeabi_dcmpgt>
 80255a4:	b150      	cbz	r0, 80255bc <floor+0x4c>
 80255a6:	2c00      	cmp	r4, #0
 80255a8:	da5a      	bge.n	8025660 <floor+0xf0>
 80255aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80255ae:	ea53 0308 	orrs.w	r3, r3, r8
 80255b2:	4b2f      	ldr	r3, [pc, #188]	; (8025670 <floor+0x100>)
 80255b4:	f04f 0500 	mov.w	r5, #0
 80255b8:	bf18      	it	ne
 80255ba:	461c      	movne	r4, r3
 80255bc:	4621      	mov	r1, r4
 80255be:	4628      	mov	r0, r5
 80255c0:	e025      	b.n	802560e <floor+0x9e>
 80255c2:	4f2c      	ldr	r7, [pc, #176]	; (8025674 <floor+0x104>)
 80255c4:	4137      	asrs	r7, r6
 80255c6:	ea01 0307 	and.w	r3, r1, r7
 80255ca:	4303      	orrs	r3, r0
 80255cc:	d01f      	beq.n	802560e <floor+0x9e>
 80255ce:	a326      	add	r3, pc, #152	; (adr r3, 8025668 <floor+0xf8>)
 80255d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255d4:	f7da fe2a 	bl	800022c <__adddf3>
 80255d8:	2200      	movs	r2, #0
 80255da:	2300      	movs	r3, #0
 80255dc:	f7db fa68 	bl	8000ab0 <__aeabi_dcmpgt>
 80255e0:	2800      	cmp	r0, #0
 80255e2:	d0eb      	beq.n	80255bc <floor+0x4c>
 80255e4:	2c00      	cmp	r4, #0
 80255e6:	bfbe      	ittt	lt
 80255e8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80255ec:	fa43 f606 	asrlt.w	r6, r3, r6
 80255f0:	19a4      	addlt	r4, r4, r6
 80255f2:	ea24 0407 	bic.w	r4, r4, r7
 80255f6:	2500      	movs	r5, #0
 80255f8:	e7e0      	b.n	80255bc <floor+0x4c>
 80255fa:	2e33      	cmp	r6, #51	; 0x33
 80255fc:	dd0b      	ble.n	8025616 <floor+0xa6>
 80255fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025602:	d104      	bne.n	802560e <floor+0x9e>
 8025604:	ee10 2a10 	vmov	r2, s0
 8025608:	460b      	mov	r3, r1
 802560a:	f7da fe0f 	bl	800022c <__adddf3>
 802560e:	ec41 0b10 	vmov	d0, r0, r1
 8025612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025616:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802561a:	f04f 33ff 	mov.w	r3, #4294967295
 802561e:	fa23 f707 	lsr.w	r7, r3, r7
 8025622:	4238      	tst	r0, r7
 8025624:	d0f3      	beq.n	802560e <floor+0x9e>
 8025626:	a310      	add	r3, pc, #64	; (adr r3, 8025668 <floor+0xf8>)
 8025628:	e9d3 2300 	ldrd	r2, r3, [r3]
 802562c:	f7da fdfe 	bl	800022c <__adddf3>
 8025630:	2200      	movs	r2, #0
 8025632:	2300      	movs	r3, #0
 8025634:	f7db fa3c 	bl	8000ab0 <__aeabi_dcmpgt>
 8025638:	2800      	cmp	r0, #0
 802563a:	d0bf      	beq.n	80255bc <floor+0x4c>
 802563c:	2c00      	cmp	r4, #0
 802563e:	da02      	bge.n	8025646 <floor+0xd6>
 8025640:	2e14      	cmp	r6, #20
 8025642:	d103      	bne.n	802564c <floor+0xdc>
 8025644:	3401      	adds	r4, #1
 8025646:	ea25 0507 	bic.w	r5, r5, r7
 802564a:	e7b7      	b.n	80255bc <floor+0x4c>
 802564c:	2301      	movs	r3, #1
 802564e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025652:	fa03 f606 	lsl.w	r6, r3, r6
 8025656:	4435      	add	r5, r6
 8025658:	45a8      	cmp	r8, r5
 802565a:	bf88      	it	hi
 802565c:	18e4      	addhi	r4, r4, r3
 802565e:	e7f2      	b.n	8025646 <floor+0xd6>
 8025660:	2500      	movs	r5, #0
 8025662:	462c      	mov	r4, r5
 8025664:	e7aa      	b.n	80255bc <floor+0x4c>
 8025666:	bf00      	nop
 8025668:	8800759c 	.word	0x8800759c
 802566c:	7e37e43c 	.word	0x7e37e43c
 8025670:	bff00000 	.word	0xbff00000
 8025674:	000fffff 	.word	0x000fffff

08025678 <sin>:
 8025678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802567a:	ec51 0b10 	vmov	r0, r1, d0
 802567e:	4a20      	ldr	r2, [pc, #128]	; (8025700 <sin+0x88>)
 8025680:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025684:	4293      	cmp	r3, r2
 8025686:	dc07      	bgt.n	8025698 <sin+0x20>
 8025688:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80256f8 <sin+0x80>
 802568c:	2000      	movs	r0, #0
 802568e:	f000 ff73 	bl	8026578 <__kernel_sin>
 8025692:	ec51 0b10 	vmov	r0, r1, d0
 8025696:	e007      	b.n	80256a8 <sin+0x30>
 8025698:	4a1a      	ldr	r2, [pc, #104]	; (8025704 <sin+0x8c>)
 802569a:	4293      	cmp	r3, r2
 802569c:	dd09      	ble.n	80256b2 <sin+0x3a>
 802569e:	ee10 2a10 	vmov	r2, s0
 80256a2:	460b      	mov	r3, r1
 80256a4:	f7da fdc0 	bl	8000228 <__aeabi_dsub>
 80256a8:	ec41 0b10 	vmov	d0, r0, r1
 80256ac:	b005      	add	sp, #20
 80256ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80256b2:	4668      	mov	r0, sp
 80256b4:	f000 f884 	bl	80257c0 <__ieee754_rem_pio2>
 80256b8:	f000 0003 	and.w	r0, r0, #3
 80256bc:	2801      	cmp	r0, #1
 80256be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80256c2:	ed9d 0b00 	vldr	d0, [sp]
 80256c6:	d004      	beq.n	80256d2 <sin+0x5a>
 80256c8:	2802      	cmp	r0, #2
 80256ca:	d005      	beq.n	80256d8 <sin+0x60>
 80256cc:	b970      	cbnz	r0, 80256ec <sin+0x74>
 80256ce:	2001      	movs	r0, #1
 80256d0:	e7dd      	b.n	802568e <sin+0x16>
 80256d2:	f000 fb19 	bl	8025d08 <__kernel_cos>
 80256d6:	e7dc      	b.n	8025692 <sin+0x1a>
 80256d8:	2001      	movs	r0, #1
 80256da:	f000 ff4d 	bl	8026578 <__kernel_sin>
 80256de:	ec53 2b10 	vmov	r2, r3, d0
 80256e2:	ee10 0a10 	vmov	r0, s0
 80256e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80256ea:	e7dd      	b.n	80256a8 <sin+0x30>
 80256ec:	f000 fb0c 	bl	8025d08 <__kernel_cos>
 80256f0:	e7f5      	b.n	80256de <sin+0x66>
 80256f2:	bf00      	nop
 80256f4:	f3af 8000 	nop.w
	...
 8025700:	3fe921fb 	.word	0x3fe921fb
 8025704:	7fefffff 	.word	0x7fefffff

08025708 <sqrt>:
 8025708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802570c:	ed2d 8b02 	vpush	{d8}
 8025710:	b08b      	sub	sp, #44	; 0x2c
 8025712:	ec55 4b10 	vmov	r4, r5, d0
 8025716:	f000 fa45 	bl	8025ba4 <__ieee754_sqrt>
 802571a:	4b26      	ldr	r3, [pc, #152]	; (80257b4 <sqrt+0xac>)
 802571c:	eeb0 8a40 	vmov.f32	s16, s0
 8025720:	eef0 8a60 	vmov.f32	s17, s1
 8025724:	f993 6000 	ldrsb.w	r6, [r3]
 8025728:	1c73      	adds	r3, r6, #1
 802572a:	d02a      	beq.n	8025782 <sqrt+0x7a>
 802572c:	4622      	mov	r2, r4
 802572e:	462b      	mov	r3, r5
 8025730:	4620      	mov	r0, r4
 8025732:	4629      	mov	r1, r5
 8025734:	f7db f9c6 	bl	8000ac4 <__aeabi_dcmpun>
 8025738:	4607      	mov	r7, r0
 802573a:	bb10      	cbnz	r0, 8025782 <sqrt+0x7a>
 802573c:	f04f 0800 	mov.w	r8, #0
 8025740:	f04f 0900 	mov.w	r9, #0
 8025744:	4642      	mov	r2, r8
 8025746:	464b      	mov	r3, r9
 8025748:	4620      	mov	r0, r4
 802574a:	4629      	mov	r1, r5
 802574c:	f7db f992 	bl	8000a74 <__aeabi_dcmplt>
 8025750:	b1b8      	cbz	r0, 8025782 <sqrt+0x7a>
 8025752:	2301      	movs	r3, #1
 8025754:	9300      	str	r3, [sp, #0]
 8025756:	4b18      	ldr	r3, [pc, #96]	; (80257b8 <sqrt+0xb0>)
 8025758:	9301      	str	r3, [sp, #4]
 802575a:	9708      	str	r7, [sp, #32]
 802575c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025760:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025764:	b9b6      	cbnz	r6, 8025794 <sqrt+0x8c>
 8025766:	e9cd 8906 	strd	r8, r9, [sp, #24]
 802576a:	4668      	mov	r0, sp
 802576c:	f000 ffc5 	bl	80266fa <matherr>
 8025770:	b1d0      	cbz	r0, 80257a8 <sqrt+0xa0>
 8025772:	9b08      	ldr	r3, [sp, #32]
 8025774:	b11b      	cbz	r3, 802577e <sqrt+0x76>
 8025776:	f7ff f993 	bl	8024aa0 <__errno>
 802577a:	9b08      	ldr	r3, [sp, #32]
 802577c:	6003      	str	r3, [r0, #0]
 802577e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025782:	eeb0 0a48 	vmov.f32	s0, s16
 8025786:	eef0 0a68 	vmov.f32	s1, s17
 802578a:	b00b      	add	sp, #44	; 0x2c
 802578c:	ecbd 8b02 	vpop	{d8}
 8025790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025794:	4642      	mov	r2, r8
 8025796:	464b      	mov	r3, r9
 8025798:	4640      	mov	r0, r8
 802579a:	4649      	mov	r1, r9
 802579c:	f7db f822 	bl	80007e4 <__aeabi_ddiv>
 80257a0:	2e02      	cmp	r6, #2
 80257a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80257a6:	d1e0      	bne.n	802576a <sqrt+0x62>
 80257a8:	f7ff f97a 	bl	8024aa0 <__errno>
 80257ac:	2321      	movs	r3, #33	; 0x21
 80257ae:	6003      	str	r3, [r0, #0]
 80257b0:	e7df      	b.n	8025772 <sqrt+0x6a>
 80257b2:	bf00      	nop
 80257b4:	2000015c 	.word	0x2000015c
 80257b8:	080349a4 	.word	0x080349a4
 80257bc:	00000000 	.word	0x00000000

080257c0 <__ieee754_rem_pio2>:
 80257c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257c4:	ec57 6b10 	vmov	r6, r7, d0
 80257c8:	4bc3      	ldr	r3, [pc, #780]	; (8025ad8 <__ieee754_rem_pio2+0x318>)
 80257ca:	b08d      	sub	sp, #52	; 0x34
 80257cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80257d0:	4598      	cmp	r8, r3
 80257d2:	4604      	mov	r4, r0
 80257d4:	9704      	str	r7, [sp, #16]
 80257d6:	dc07      	bgt.n	80257e8 <__ieee754_rem_pio2+0x28>
 80257d8:	2200      	movs	r2, #0
 80257da:	2300      	movs	r3, #0
 80257dc:	ed84 0b00 	vstr	d0, [r4]
 80257e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80257e4:	2500      	movs	r5, #0
 80257e6:	e027      	b.n	8025838 <__ieee754_rem_pio2+0x78>
 80257e8:	4bbc      	ldr	r3, [pc, #752]	; (8025adc <__ieee754_rem_pio2+0x31c>)
 80257ea:	4598      	cmp	r8, r3
 80257ec:	dc75      	bgt.n	80258da <__ieee754_rem_pio2+0x11a>
 80257ee:	9b04      	ldr	r3, [sp, #16]
 80257f0:	4dbb      	ldr	r5, [pc, #748]	; (8025ae0 <__ieee754_rem_pio2+0x320>)
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	ee10 0a10 	vmov	r0, s0
 80257f8:	a3a9      	add	r3, pc, #676	; (adr r3, 8025aa0 <__ieee754_rem_pio2+0x2e0>)
 80257fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257fe:	4639      	mov	r1, r7
 8025800:	dd36      	ble.n	8025870 <__ieee754_rem_pio2+0xb0>
 8025802:	f7da fd11 	bl	8000228 <__aeabi_dsub>
 8025806:	45a8      	cmp	r8, r5
 8025808:	4606      	mov	r6, r0
 802580a:	460f      	mov	r7, r1
 802580c:	d018      	beq.n	8025840 <__ieee754_rem_pio2+0x80>
 802580e:	a3a6      	add	r3, pc, #664	; (adr r3, 8025aa8 <__ieee754_rem_pio2+0x2e8>)
 8025810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025814:	f7da fd08 	bl	8000228 <__aeabi_dsub>
 8025818:	4602      	mov	r2, r0
 802581a:	460b      	mov	r3, r1
 802581c:	e9c4 2300 	strd	r2, r3, [r4]
 8025820:	4630      	mov	r0, r6
 8025822:	4639      	mov	r1, r7
 8025824:	f7da fd00 	bl	8000228 <__aeabi_dsub>
 8025828:	a39f      	add	r3, pc, #636	; (adr r3, 8025aa8 <__ieee754_rem_pio2+0x2e8>)
 802582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802582e:	f7da fcfb 	bl	8000228 <__aeabi_dsub>
 8025832:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025836:	2501      	movs	r5, #1
 8025838:	4628      	mov	r0, r5
 802583a:	b00d      	add	sp, #52	; 0x34
 802583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025840:	a39b      	add	r3, pc, #620	; (adr r3, 8025ab0 <__ieee754_rem_pio2+0x2f0>)
 8025842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025846:	f7da fcef 	bl	8000228 <__aeabi_dsub>
 802584a:	a39b      	add	r3, pc, #620	; (adr r3, 8025ab8 <__ieee754_rem_pio2+0x2f8>)
 802584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025850:	4606      	mov	r6, r0
 8025852:	460f      	mov	r7, r1
 8025854:	f7da fce8 	bl	8000228 <__aeabi_dsub>
 8025858:	4602      	mov	r2, r0
 802585a:	460b      	mov	r3, r1
 802585c:	e9c4 2300 	strd	r2, r3, [r4]
 8025860:	4630      	mov	r0, r6
 8025862:	4639      	mov	r1, r7
 8025864:	f7da fce0 	bl	8000228 <__aeabi_dsub>
 8025868:	a393      	add	r3, pc, #588	; (adr r3, 8025ab8 <__ieee754_rem_pio2+0x2f8>)
 802586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802586e:	e7de      	b.n	802582e <__ieee754_rem_pio2+0x6e>
 8025870:	f7da fcdc 	bl	800022c <__adddf3>
 8025874:	45a8      	cmp	r8, r5
 8025876:	4606      	mov	r6, r0
 8025878:	460f      	mov	r7, r1
 802587a:	d016      	beq.n	80258aa <__ieee754_rem_pio2+0xea>
 802587c:	a38a      	add	r3, pc, #552	; (adr r3, 8025aa8 <__ieee754_rem_pio2+0x2e8>)
 802587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025882:	f7da fcd3 	bl	800022c <__adddf3>
 8025886:	4602      	mov	r2, r0
 8025888:	460b      	mov	r3, r1
 802588a:	e9c4 2300 	strd	r2, r3, [r4]
 802588e:	4630      	mov	r0, r6
 8025890:	4639      	mov	r1, r7
 8025892:	f7da fcc9 	bl	8000228 <__aeabi_dsub>
 8025896:	a384      	add	r3, pc, #528	; (adr r3, 8025aa8 <__ieee754_rem_pio2+0x2e8>)
 8025898:	e9d3 2300 	ldrd	r2, r3, [r3]
 802589c:	f7da fcc6 	bl	800022c <__adddf3>
 80258a0:	f04f 35ff 	mov.w	r5, #4294967295
 80258a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80258a8:	e7c6      	b.n	8025838 <__ieee754_rem_pio2+0x78>
 80258aa:	a381      	add	r3, pc, #516	; (adr r3, 8025ab0 <__ieee754_rem_pio2+0x2f0>)
 80258ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258b0:	f7da fcbc 	bl	800022c <__adddf3>
 80258b4:	a380      	add	r3, pc, #512	; (adr r3, 8025ab8 <__ieee754_rem_pio2+0x2f8>)
 80258b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258ba:	4606      	mov	r6, r0
 80258bc:	460f      	mov	r7, r1
 80258be:	f7da fcb5 	bl	800022c <__adddf3>
 80258c2:	4602      	mov	r2, r0
 80258c4:	460b      	mov	r3, r1
 80258c6:	e9c4 2300 	strd	r2, r3, [r4]
 80258ca:	4630      	mov	r0, r6
 80258cc:	4639      	mov	r1, r7
 80258ce:	f7da fcab 	bl	8000228 <__aeabi_dsub>
 80258d2:	a379      	add	r3, pc, #484	; (adr r3, 8025ab8 <__ieee754_rem_pio2+0x2f8>)
 80258d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258d8:	e7e0      	b.n	802589c <__ieee754_rem_pio2+0xdc>
 80258da:	4b82      	ldr	r3, [pc, #520]	; (8025ae4 <__ieee754_rem_pio2+0x324>)
 80258dc:	4598      	cmp	r8, r3
 80258de:	f300 80d0 	bgt.w	8025a82 <__ieee754_rem_pio2+0x2c2>
 80258e2:	f000 ff03 	bl	80266ec <fabs>
 80258e6:	ec57 6b10 	vmov	r6, r7, d0
 80258ea:	ee10 0a10 	vmov	r0, s0
 80258ee:	a374      	add	r3, pc, #464	; (adr r3, 8025ac0 <__ieee754_rem_pio2+0x300>)
 80258f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258f4:	4639      	mov	r1, r7
 80258f6:	f7da fe4b 	bl	8000590 <__aeabi_dmul>
 80258fa:	2200      	movs	r2, #0
 80258fc:	4b7a      	ldr	r3, [pc, #488]	; (8025ae8 <__ieee754_rem_pio2+0x328>)
 80258fe:	f7da fc95 	bl	800022c <__adddf3>
 8025902:	f7db f8f5 	bl	8000af0 <__aeabi_d2iz>
 8025906:	4605      	mov	r5, r0
 8025908:	f7da fddc 	bl	80004c4 <__aeabi_i2d>
 802590c:	a364      	add	r3, pc, #400	; (adr r3, 8025aa0 <__ieee754_rem_pio2+0x2e0>)
 802590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025916:	f7da fe3b 	bl	8000590 <__aeabi_dmul>
 802591a:	4602      	mov	r2, r0
 802591c:	460b      	mov	r3, r1
 802591e:	4630      	mov	r0, r6
 8025920:	4639      	mov	r1, r7
 8025922:	f7da fc81 	bl	8000228 <__aeabi_dsub>
 8025926:	a360      	add	r3, pc, #384	; (adr r3, 8025aa8 <__ieee754_rem_pio2+0x2e8>)
 8025928:	e9d3 2300 	ldrd	r2, r3, [r3]
 802592c:	4682      	mov	sl, r0
 802592e:	468b      	mov	fp, r1
 8025930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025934:	f7da fe2c 	bl	8000590 <__aeabi_dmul>
 8025938:	2d1f      	cmp	r5, #31
 802593a:	4606      	mov	r6, r0
 802593c:	460f      	mov	r7, r1
 802593e:	dc2a      	bgt.n	8025996 <__ieee754_rem_pio2+0x1d6>
 8025940:	1e6a      	subs	r2, r5, #1
 8025942:	4b6a      	ldr	r3, [pc, #424]	; (8025aec <__ieee754_rem_pio2+0x32c>)
 8025944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025948:	4598      	cmp	r8, r3
 802594a:	d024      	beq.n	8025996 <__ieee754_rem_pio2+0x1d6>
 802594c:	4632      	mov	r2, r6
 802594e:	463b      	mov	r3, r7
 8025950:	4650      	mov	r0, sl
 8025952:	4659      	mov	r1, fp
 8025954:	f7da fc68 	bl	8000228 <__aeabi_dsub>
 8025958:	e9c4 0100 	strd	r0, r1, [r4]
 802595c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8025960:	4650      	mov	r0, sl
 8025962:	4642      	mov	r2, r8
 8025964:	464b      	mov	r3, r9
 8025966:	4659      	mov	r1, fp
 8025968:	f7da fc5e 	bl	8000228 <__aeabi_dsub>
 802596c:	463b      	mov	r3, r7
 802596e:	4632      	mov	r2, r6
 8025970:	f7da fc5a 	bl	8000228 <__aeabi_dsub>
 8025974:	9b04      	ldr	r3, [sp, #16]
 8025976:	2b00      	cmp	r3, #0
 8025978:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802597c:	f6bf af5c 	bge.w	8025838 <__ieee754_rem_pio2+0x78>
 8025980:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8025984:	6063      	str	r3, [r4, #4]
 8025986:	f8c4 8000 	str.w	r8, [r4]
 802598a:	60a0      	str	r0, [r4, #8]
 802598c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025990:	60e3      	str	r3, [r4, #12]
 8025992:	426d      	negs	r5, r5
 8025994:	e750      	b.n	8025838 <__ieee754_rem_pio2+0x78>
 8025996:	4632      	mov	r2, r6
 8025998:	463b      	mov	r3, r7
 802599a:	4650      	mov	r0, sl
 802599c:	4659      	mov	r1, fp
 802599e:	f7da fc43 	bl	8000228 <__aeabi_dsub>
 80259a2:	ea4f 5228 	mov.w	r2, r8, asr #20
 80259a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80259aa:	1ad3      	subs	r3, r2, r3
 80259ac:	2b10      	cmp	r3, #16
 80259ae:	e9c4 0100 	strd	r0, r1, [r4]
 80259b2:	9205      	str	r2, [sp, #20]
 80259b4:	ddd2      	ble.n	802595c <__ieee754_rem_pio2+0x19c>
 80259b6:	a33e      	add	r3, pc, #248	; (adr r3, 8025ab0 <__ieee754_rem_pio2+0x2f0>)
 80259b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80259c0:	f7da fde6 	bl	8000590 <__aeabi_dmul>
 80259c4:	4606      	mov	r6, r0
 80259c6:	460f      	mov	r7, r1
 80259c8:	4602      	mov	r2, r0
 80259ca:	460b      	mov	r3, r1
 80259cc:	4650      	mov	r0, sl
 80259ce:	4659      	mov	r1, fp
 80259d0:	f7da fc2a 	bl	8000228 <__aeabi_dsub>
 80259d4:	4602      	mov	r2, r0
 80259d6:	460b      	mov	r3, r1
 80259d8:	4680      	mov	r8, r0
 80259da:	4689      	mov	r9, r1
 80259dc:	4650      	mov	r0, sl
 80259de:	4659      	mov	r1, fp
 80259e0:	f7da fc22 	bl	8000228 <__aeabi_dsub>
 80259e4:	4632      	mov	r2, r6
 80259e6:	463b      	mov	r3, r7
 80259e8:	f7da fc1e 	bl	8000228 <__aeabi_dsub>
 80259ec:	a332      	add	r3, pc, #200	; (adr r3, 8025ab8 <__ieee754_rem_pio2+0x2f8>)
 80259ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259f2:	4606      	mov	r6, r0
 80259f4:	460f      	mov	r7, r1
 80259f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80259fa:	f7da fdc9 	bl	8000590 <__aeabi_dmul>
 80259fe:	4632      	mov	r2, r6
 8025a00:	463b      	mov	r3, r7
 8025a02:	f7da fc11 	bl	8000228 <__aeabi_dsub>
 8025a06:	4602      	mov	r2, r0
 8025a08:	460b      	mov	r3, r1
 8025a0a:	4606      	mov	r6, r0
 8025a0c:	460f      	mov	r7, r1
 8025a0e:	4640      	mov	r0, r8
 8025a10:	4649      	mov	r1, r9
 8025a12:	f7da fc09 	bl	8000228 <__aeabi_dsub>
 8025a16:	9a05      	ldr	r2, [sp, #20]
 8025a18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8025a1c:	1ad3      	subs	r3, r2, r3
 8025a1e:	2b31      	cmp	r3, #49	; 0x31
 8025a20:	e9c4 0100 	strd	r0, r1, [r4]
 8025a24:	dd2a      	ble.n	8025a7c <__ieee754_rem_pio2+0x2bc>
 8025a26:	a328      	add	r3, pc, #160	; (adr r3, 8025ac8 <__ieee754_rem_pio2+0x308>)
 8025a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025a30:	f7da fdae 	bl	8000590 <__aeabi_dmul>
 8025a34:	4606      	mov	r6, r0
 8025a36:	460f      	mov	r7, r1
 8025a38:	4602      	mov	r2, r0
 8025a3a:	460b      	mov	r3, r1
 8025a3c:	4640      	mov	r0, r8
 8025a3e:	4649      	mov	r1, r9
 8025a40:	f7da fbf2 	bl	8000228 <__aeabi_dsub>
 8025a44:	4602      	mov	r2, r0
 8025a46:	460b      	mov	r3, r1
 8025a48:	4682      	mov	sl, r0
 8025a4a:	468b      	mov	fp, r1
 8025a4c:	4640      	mov	r0, r8
 8025a4e:	4649      	mov	r1, r9
 8025a50:	f7da fbea 	bl	8000228 <__aeabi_dsub>
 8025a54:	4632      	mov	r2, r6
 8025a56:	463b      	mov	r3, r7
 8025a58:	f7da fbe6 	bl	8000228 <__aeabi_dsub>
 8025a5c:	a31c      	add	r3, pc, #112	; (adr r3, 8025ad0 <__ieee754_rem_pio2+0x310>)
 8025a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a62:	4606      	mov	r6, r0
 8025a64:	460f      	mov	r7, r1
 8025a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025a6a:	f7da fd91 	bl	8000590 <__aeabi_dmul>
 8025a6e:	4632      	mov	r2, r6
 8025a70:	463b      	mov	r3, r7
 8025a72:	f7da fbd9 	bl	8000228 <__aeabi_dsub>
 8025a76:	4606      	mov	r6, r0
 8025a78:	460f      	mov	r7, r1
 8025a7a:	e767      	b.n	802594c <__ieee754_rem_pio2+0x18c>
 8025a7c:	46c2      	mov	sl, r8
 8025a7e:	46cb      	mov	fp, r9
 8025a80:	e76c      	b.n	802595c <__ieee754_rem_pio2+0x19c>
 8025a82:	4b1b      	ldr	r3, [pc, #108]	; (8025af0 <__ieee754_rem_pio2+0x330>)
 8025a84:	4598      	cmp	r8, r3
 8025a86:	dd35      	ble.n	8025af4 <__ieee754_rem_pio2+0x334>
 8025a88:	ee10 2a10 	vmov	r2, s0
 8025a8c:	463b      	mov	r3, r7
 8025a8e:	4630      	mov	r0, r6
 8025a90:	4639      	mov	r1, r7
 8025a92:	f7da fbc9 	bl	8000228 <__aeabi_dsub>
 8025a96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8025a9a:	e9c4 0100 	strd	r0, r1, [r4]
 8025a9e:	e6a1      	b.n	80257e4 <__ieee754_rem_pio2+0x24>
 8025aa0:	54400000 	.word	0x54400000
 8025aa4:	3ff921fb 	.word	0x3ff921fb
 8025aa8:	1a626331 	.word	0x1a626331
 8025aac:	3dd0b461 	.word	0x3dd0b461
 8025ab0:	1a600000 	.word	0x1a600000
 8025ab4:	3dd0b461 	.word	0x3dd0b461
 8025ab8:	2e037073 	.word	0x2e037073
 8025abc:	3ba3198a 	.word	0x3ba3198a
 8025ac0:	6dc9c883 	.word	0x6dc9c883
 8025ac4:	3fe45f30 	.word	0x3fe45f30
 8025ac8:	2e000000 	.word	0x2e000000
 8025acc:	3ba3198a 	.word	0x3ba3198a
 8025ad0:	252049c1 	.word	0x252049c1
 8025ad4:	397b839a 	.word	0x397b839a
 8025ad8:	3fe921fb 	.word	0x3fe921fb
 8025adc:	4002d97b 	.word	0x4002d97b
 8025ae0:	3ff921fb 	.word	0x3ff921fb
 8025ae4:	413921fb 	.word	0x413921fb
 8025ae8:	3fe00000 	.word	0x3fe00000
 8025aec:	080349ac 	.word	0x080349ac
 8025af0:	7fefffff 	.word	0x7fefffff
 8025af4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8025af8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8025afc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8025b00:	4630      	mov	r0, r6
 8025b02:	460f      	mov	r7, r1
 8025b04:	f7da fff4 	bl	8000af0 <__aeabi_d2iz>
 8025b08:	f7da fcdc 	bl	80004c4 <__aeabi_i2d>
 8025b0c:	4602      	mov	r2, r0
 8025b0e:	460b      	mov	r3, r1
 8025b10:	4630      	mov	r0, r6
 8025b12:	4639      	mov	r1, r7
 8025b14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8025b18:	f7da fb86 	bl	8000228 <__aeabi_dsub>
 8025b1c:	2200      	movs	r2, #0
 8025b1e:	4b1f      	ldr	r3, [pc, #124]	; (8025b9c <__ieee754_rem_pio2+0x3dc>)
 8025b20:	f7da fd36 	bl	8000590 <__aeabi_dmul>
 8025b24:	460f      	mov	r7, r1
 8025b26:	4606      	mov	r6, r0
 8025b28:	f7da ffe2 	bl	8000af0 <__aeabi_d2iz>
 8025b2c:	f7da fcca 	bl	80004c4 <__aeabi_i2d>
 8025b30:	4602      	mov	r2, r0
 8025b32:	460b      	mov	r3, r1
 8025b34:	4630      	mov	r0, r6
 8025b36:	4639      	mov	r1, r7
 8025b38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025b3c:	f7da fb74 	bl	8000228 <__aeabi_dsub>
 8025b40:	2200      	movs	r2, #0
 8025b42:	4b16      	ldr	r3, [pc, #88]	; (8025b9c <__ieee754_rem_pio2+0x3dc>)
 8025b44:	f7da fd24 	bl	8000590 <__aeabi_dmul>
 8025b48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8025b4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8025b50:	f04f 0803 	mov.w	r8, #3
 8025b54:	2600      	movs	r6, #0
 8025b56:	2700      	movs	r7, #0
 8025b58:	4632      	mov	r2, r6
 8025b5a:	463b      	mov	r3, r7
 8025b5c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8025b60:	f108 3aff 	add.w	sl, r8, #4294967295
 8025b64:	f7da ff7c 	bl	8000a60 <__aeabi_dcmpeq>
 8025b68:	b9b0      	cbnz	r0, 8025b98 <__ieee754_rem_pio2+0x3d8>
 8025b6a:	4b0d      	ldr	r3, [pc, #52]	; (8025ba0 <__ieee754_rem_pio2+0x3e0>)
 8025b6c:	9301      	str	r3, [sp, #4]
 8025b6e:	2302      	movs	r3, #2
 8025b70:	9300      	str	r3, [sp, #0]
 8025b72:	462a      	mov	r2, r5
 8025b74:	4643      	mov	r3, r8
 8025b76:	4621      	mov	r1, r4
 8025b78:	a806      	add	r0, sp, #24
 8025b7a:	f000 f9ad 	bl	8025ed8 <__kernel_rem_pio2>
 8025b7e:	9b04      	ldr	r3, [sp, #16]
 8025b80:	2b00      	cmp	r3, #0
 8025b82:	4605      	mov	r5, r0
 8025b84:	f6bf ae58 	bge.w	8025838 <__ieee754_rem_pio2+0x78>
 8025b88:	6863      	ldr	r3, [r4, #4]
 8025b8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025b8e:	6063      	str	r3, [r4, #4]
 8025b90:	68e3      	ldr	r3, [r4, #12]
 8025b92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8025b96:	e6fb      	b.n	8025990 <__ieee754_rem_pio2+0x1d0>
 8025b98:	46d0      	mov	r8, sl
 8025b9a:	e7dd      	b.n	8025b58 <__ieee754_rem_pio2+0x398>
 8025b9c:	41700000 	.word	0x41700000
 8025ba0:	08034a2c 	.word	0x08034a2c

08025ba4 <__ieee754_sqrt>:
 8025ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ba8:	ec55 4b10 	vmov	r4, r5, d0
 8025bac:	4e54      	ldr	r6, [pc, #336]	; (8025d00 <__ieee754_sqrt+0x15c>)
 8025bae:	43ae      	bics	r6, r5
 8025bb0:	ee10 0a10 	vmov	r0, s0
 8025bb4:	462b      	mov	r3, r5
 8025bb6:	462a      	mov	r2, r5
 8025bb8:	4621      	mov	r1, r4
 8025bba:	d113      	bne.n	8025be4 <__ieee754_sqrt+0x40>
 8025bbc:	ee10 2a10 	vmov	r2, s0
 8025bc0:	462b      	mov	r3, r5
 8025bc2:	ee10 0a10 	vmov	r0, s0
 8025bc6:	4629      	mov	r1, r5
 8025bc8:	f7da fce2 	bl	8000590 <__aeabi_dmul>
 8025bcc:	4602      	mov	r2, r0
 8025bce:	460b      	mov	r3, r1
 8025bd0:	4620      	mov	r0, r4
 8025bd2:	4629      	mov	r1, r5
 8025bd4:	f7da fb2a 	bl	800022c <__adddf3>
 8025bd8:	4604      	mov	r4, r0
 8025bda:	460d      	mov	r5, r1
 8025bdc:	ec45 4b10 	vmov	d0, r4, r5
 8025be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025be4:	2d00      	cmp	r5, #0
 8025be6:	dc10      	bgt.n	8025c0a <__ieee754_sqrt+0x66>
 8025be8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8025bec:	4330      	orrs	r0, r6
 8025bee:	d0f5      	beq.n	8025bdc <__ieee754_sqrt+0x38>
 8025bf0:	b15d      	cbz	r5, 8025c0a <__ieee754_sqrt+0x66>
 8025bf2:	ee10 2a10 	vmov	r2, s0
 8025bf6:	462b      	mov	r3, r5
 8025bf8:	4620      	mov	r0, r4
 8025bfa:	4629      	mov	r1, r5
 8025bfc:	f7da fb14 	bl	8000228 <__aeabi_dsub>
 8025c00:	4602      	mov	r2, r0
 8025c02:	460b      	mov	r3, r1
 8025c04:	f7da fdee 	bl	80007e4 <__aeabi_ddiv>
 8025c08:	e7e6      	b.n	8025bd8 <__ieee754_sqrt+0x34>
 8025c0a:	151b      	asrs	r3, r3, #20
 8025c0c:	d10c      	bne.n	8025c28 <__ieee754_sqrt+0x84>
 8025c0e:	2a00      	cmp	r2, #0
 8025c10:	d06d      	beq.n	8025cee <__ieee754_sqrt+0x14a>
 8025c12:	2000      	movs	r0, #0
 8025c14:	02d6      	lsls	r6, r2, #11
 8025c16:	d56e      	bpl.n	8025cf6 <__ieee754_sqrt+0x152>
 8025c18:	1e44      	subs	r4, r0, #1
 8025c1a:	1b1b      	subs	r3, r3, r4
 8025c1c:	f1c0 0420 	rsb	r4, r0, #32
 8025c20:	fa21 f404 	lsr.w	r4, r1, r4
 8025c24:	4322      	orrs	r2, r4
 8025c26:	4081      	lsls	r1, r0
 8025c28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025c2c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8025c30:	07dd      	lsls	r5, r3, #31
 8025c32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8025c36:	bf42      	ittt	mi
 8025c38:	0052      	lslmi	r2, r2, #1
 8025c3a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8025c3e:	0049      	lslmi	r1, r1, #1
 8025c40:	1058      	asrs	r0, r3, #1
 8025c42:	2500      	movs	r5, #0
 8025c44:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8025c48:	441a      	add	r2, r3
 8025c4a:	0049      	lsls	r1, r1, #1
 8025c4c:	2316      	movs	r3, #22
 8025c4e:	462c      	mov	r4, r5
 8025c50:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8025c54:	19a7      	adds	r7, r4, r6
 8025c56:	4297      	cmp	r7, r2
 8025c58:	bfde      	ittt	le
 8025c5a:	1bd2      	suble	r2, r2, r7
 8025c5c:	19bc      	addle	r4, r7, r6
 8025c5e:	19ad      	addle	r5, r5, r6
 8025c60:	0052      	lsls	r2, r2, #1
 8025c62:	3b01      	subs	r3, #1
 8025c64:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8025c68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8025c6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025c70:	d1f0      	bne.n	8025c54 <__ieee754_sqrt+0xb0>
 8025c72:	f04f 0e20 	mov.w	lr, #32
 8025c76:	469c      	mov	ip, r3
 8025c78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8025c7c:	42a2      	cmp	r2, r4
 8025c7e:	eb06 070c 	add.w	r7, r6, ip
 8025c82:	dc02      	bgt.n	8025c8a <__ieee754_sqrt+0xe6>
 8025c84:	d112      	bne.n	8025cac <__ieee754_sqrt+0x108>
 8025c86:	428f      	cmp	r7, r1
 8025c88:	d810      	bhi.n	8025cac <__ieee754_sqrt+0x108>
 8025c8a:	2f00      	cmp	r7, #0
 8025c8c:	eb07 0c06 	add.w	ip, r7, r6
 8025c90:	da34      	bge.n	8025cfc <__ieee754_sqrt+0x158>
 8025c92:	f1bc 0f00 	cmp.w	ip, #0
 8025c96:	db31      	blt.n	8025cfc <__ieee754_sqrt+0x158>
 8025c98:	f104 0801 	add.w	r8, r4, #1
 8025c9c:	1b12      	subs	r2, r2, r4
 8025c9e:	428f      	cmp	r7, r1
 8025ca0:	bf88      	it	hi
 8025ca2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8025ca6:	1bc9      	subs	r1, r1, r7
 8025ca8:	4433      	add	r3, r6
 8025caa:	4644      	mov	r4, r8
 8025cac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8025cb0:	f1be 0e01 	subs.w	lr, lr, #1
 8025cb4:	443a      	add	r2, r7
 8025cb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8025cba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8025cbe:	d1dd      	bne.n	8025c7c <__ieee754_sqrt+0xd8>
 8025cc0:	430a      	orrs	r2, r1
 8025cc2:	d006      	beq.n	8025cd2 <__ieee754_sqrt+0x12e>
 8025cc4:	1c5c      	adds	r4, r3, #1
 8025cc6:	bf13      	iteet	ne
 8025cc8:	3301      	addne	r3, #1
 8025cca:	3501      	addeq	r5, #1
 8025ccc:	4673      	moveq	r3, lr
 8025cce:	f023 0301 	bicne.w	r3, r3, #1
 8025cd2:	106a      	asrs	r2, r5, #1
 8025cd4:	085b      	lsrs	r3, r3, #1
 8025cd6:	07e9      	lsls	r1, r5, #31
 8025cd8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8025cdc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8025ce0:	bf48      	it	mi
 8025ce2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8025ce6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8025cea:	461c      	mov	r4, r3
 8025cec:	e776      	b.n	8025bdc <__ieee754_sqrt+0x38>
 8025cee:	0aca      	lsrs	r2, r1, #11
 8025cf0:	3b15      	subs	r3, #21
 8025cf2:	0549      	lsls	r1, r1, #21
 8025cf4:	e78b      	b.n	8025c0e <__ieee754_sqrt+0x6a>
 8025cf6:	0052      	lsls	r2, r2, #1
 8025cf8:	3001      	adds	r0, #1
 8025cfa:	e78b      	b.n	8025c14 <__ieee754_sqrt+0x70>
 8025cfc:	46a0      	mov	r8, r4
 8025cfe:	e7cd      	b.n	8025c9c <__ieee754_sqrt+0xf8>
 8025d00:	7ff00000 	.word	0x7ff00000
 8025d04:	00000000 	.word	0x00000000

08025d08 <__kernel_cos>:
 8025d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d0c:	ec59 8b10 	vmov	r8, r9, d0
 8025d10:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8025d14:	b085      	sub	sp, #20
 8025d16:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8025d1a:	ed8d 1b00 	vstr	d1, [sp]
 8025d1e:	da07      	bge.n	8025d30 <__kernel_cos+0x28>
 8025d20:	ee10 0a10 	vmov	r0, s0
 8025d24:	4649      	mov	r1, r9
 8025d26:	f7da fee3 	bl	8000af0 <__aeabi_d2iz>
 8025d2a:	2800      	cmp	r0, #0
 8025d2c:	f000 80aa 	beq.w	8025e84 <__kernel_cos+0x17c>
 8025d30:	4642      	mov	r2, r8
 8025d32:	464b      	mov	r3, r9
 8025d34:	4640      	mov	r0, r8
 8025d36:	4649      	mov	r1, r9
 8025d38:	f7da fc2a 	bl	8000590 <__aeabi_dmul>
 8025d3c:	a359      	add	r3, pc, #356	; (adr r3, 8025ea4 <__kernel_cos+0x19c>)
 8025d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d42:	4604      	mov	r4, r0
 8025d44:	460d      	mov	r5, r1
 8025d46:	f7da fc23 	bl	8000590 <__aeabi_dmul>
 8025d4a:	a358      	add	r3, pc, #352	; (adr r3, 8025eac <__kernel_cos+0x1a4>)
 8025d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d50:	f7da fa6c 	bl	800022c <__adddf3>
 8025d54:	4622      	mov	r2, r4
 8025d56:	462b      	mov	r3, r5
 8025d58:	f7da fc1a 	bl	8000590 <__aeabi_dmul>
 8025d5c:	a355      	add	r3, pc, #340	; (adr r3, 8025eb4 <__kernel_cos+0x1ac>)
 8025d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d62:	f7da fa61 	bl	8000228 <__aeabi_dsub>
 8025d66:	4622      	mov	r2, r4
 8025d68:	462b      	mov	r3, r5
 8025d6a:	f7da fc11 	bl	8000590 <__aeabi_dmul>
 8025d6e:	a353      	add	r3, pc, #332	; (adr r3, 8025ebc <__kernel_cos+0x1b4>)
 8025d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d74:	f7da fa5a 	bl	800022c <__adddf3>
 8025d78:	4622      	mov	r2, r4
 8025d7a:	462b      	mov	r3, r5
 8025d7c:	f7da fc08 	bl	8000590 <__aeabi_dmul>
 8025d80:	a350      	add	r3, pc, #320	; (adr r3, 8025ec4 <__kernel_cos+0x1bc>)
 8025d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d86:	f7da fa4f 	bl	8000228 <__aeabi_dsub>
 8025d8a:	4622      	mov	r2, r4
 8025d8c:	462b      	mov	r3, r5
 8025d8e:	f7da fbff 	bl	8000590 <__aeabi_dmul>
 8025d92:	a34e      	add	r3, pc, #312	; (adr r3, 8025ecc <__kernel_cos+0x1c4>)
 8025d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d98:	f7da fa48 	bl	800022c <__adddf3>
 8025d9c:	462b      	mov	r3, r5
 8025d9e:	4622      	mov	r2, r4
 8025da0:	f7da fbf6 	bl	8000590 <__aeabi_dmul>
 8025da4:	4b3a      	ldr	r3, [pc, #232]	; (8025e90 <__kernel_cos+0x188>)
 8025da6:	429f      	cmp	r7, r3
 8025da8:	4682      	mov	sl, r0
 8025daa:	468b      	mov	fp, r1
 8025dac:	dc2c      	bgt.n	8025e08 <__kernel_cos+0x100>
 8025dae:	2200      	movs	r2, #0
 8025db0:	4b38      	ldr	r3, [pc, #224]	; (8025e94 <__kernel_cos+0x18c>)
 8025db2:	4620      	mov	r0, r4
 8025db4:	4629      	mov	r1, r5
 8025db6:	f7da fbeb 	bl	8000590 <__aeabi_dmul>
 8025dba:	4652      	mov	r2, sl
 8025dbc:	4606      	mov	r6, r0
 8025dbe:	460f      	mov	r7, r1
 8025dc0:	465b      	mov	r3, fp
 8025dc2:	4620      	mov	r0, r4
 8025dc4:	4629      	mov	r1, r5
 8025dc6:	f7da fbe3 	bl	8000590 <__aeabi_dmul>
 8025dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025dce:	4604      	mov	r4, r0
 8025dd0:	460d      	mov	r5, r1
 8025dd2:	4640      	mov	r0, r8
 8025dd4:	4649      	mov	r1, r9
 8025dd6:	f7da fbdb 	bl	8000590 <__aeabi_dmul>
 8025dda:	4602      	mov	r2, r0
 8025ddc:	460b      	mov	r3, r1
 8025dde:	4620      	mov	r0, r4
 8025de0:	4629      	mov	r1, r5
 8025de2:	f7da fa21 	bl	8000228 <__aeabi_dsub>
 8025de6:	4602      	mov	r2, r0
 8025de8:	460b      	mov	r3, r1
 8025dea:	4630      	mov	r0, r6
 8025dec:	4639      	mov	r1, r7
 8025dee:	f7da fa1b 	bl	8000228 <__aeabi_dsub>
 8025df2:	460b      	mov	r3, r1
 8025df4:	4928      	ldr	r1, [pc, #160]	; (8025e98 <__kernel_cos+0x190>)
 8025df6:	4602      	mov	r2, r0
 8025df8:	2000      	movs	r0, #0
 8025dfa:	f7da fa15 	bl	8000228 <__aeabi_dsub>
 8025dfe:	ec41 0b10 	vmov	d0, r0, r1
 8025e02:	b005      	add	sp, #20
 8025e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e08:	4b24      	ldr	r3, [pc, #144]	; (8025e9c <__kernel_cos+0x194>)
 8025e0a:	4923      	ldr	r1, [pc, #140]	; (8025e98 <__kernel_cos+0x190>)
 8025e0c:	429f      	cmp	r7, r3
 8025e0e:	bfd7      	itett	le
 8025e10:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8025e14:	4f22      	ldrgt	r7, [pc, #136]	; (8025ea0 <__kernel_cos+0x198>)
 8025e16:	2200      	movle	r2, #0
 8025e18:	4616      	movle	r6, r2
 8025e1a:	bfd4      	ite	le
 8025e1c:	461f      	movle	r7, r3
 8025e1e:	2600      	movgt	r6, #0
 8025e20:	4632      	mov	r2, r6
 8025e22:	463b      	mov	r3, r7
 8025e24:	2000      	movs	r0, #0
 8025e26:	f7da f9ff 	bl	8000228 <__aeabi_dsub>
 8025e2a:	2200      	movs	r2, #0
 8025e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025e30:	4b18      	ldr	r3, [pc, #96]	; (8025e94 <__kernel_cos+0x18c>)
 8025e32:	4620      	mov	r0, r4
 8025e34:	4629      	mov	r1, r5
 8025e36:	f7da fbab 	bl	8000590 <__aeabi_dmul>
 8025e3a:	4632      	mov	r2, r6
 8025e3c:	463b      	mov	r3, r7
 8025e3e:	f7da f9f3 	bl	8000228 <__aeabi_dsub>
 8025e42:	4652      	mov	r2, sl
 8025e44:	4606      	mov	r6, r0
 8025e46:	460f      	mov	r7, r1
 8025e48:	465b      	mov	r3, fp
 8025e4a:	4620      	mov	r0, r4
 8025e4c:	4629      	mov	r1, r5
 8025e4e:	f7da fb9f 	bl	8000590 <__aeabi_dmul>
 8025e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025e56:	4604      	mov	r4, r0
 8025e58:	460d      	mov	r5, r1
 8025e5a:	4640      	mov	r0, r8
 8025e5c:	4649      	mov	r1, r9
 8025e5e:	f7da fb97 	bl	8000590 <__aeabi_dmul>
 8025e62:	4602      	mov	r2, r0
 8025e64:	460b      	mov	r3, r1
 8025e66:	4620      	mov	r0, r4
 8025e68:	4629      	mov	r1, r5
 8025e6a:	f7da f9dd 	bl	8000228 <__aeabi_dsub>
 8025e6e:	4602      	mov	r2, r0
 8025e70:	460b      	mov	r3, r1
 8025e72:	4630      	mov	r0, r6
 8025e74:	4639      	mov	r1, r7
 8025e76:	f7da f9d7 	bl	8000228 <__aeabi_dsub>
 8025e7a:	4602      	mov	r2, r0
 8025e7c:	460b      	mov	r3, r1
 8025e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025e82:	e7ba      	b.n	8025dfa <__kernel_cos+0xf2>
 8025e84:	2000      	movs	r0, #0
 8025e86:	4904      	ldr	r1, [pc, #16]	; (8025e98 <__kernel_cos+0x190>)
 8025e88:	e7b9      	b.n	8025dfe <__kernel_cos+0xf6>
 8025e8a:	bf00      	nop
 8025e8c:	f3af 8000 	nop.w
 8025e90:	3fd33332 	.word	0x3fd33332
 8025e94:	3fe00000 	.word	0x3fe00000
 8025e98:	3ff00000 	.word	0x3ff00000
 8025e9c:	3fe90000 	.word	0x3fe90000
 8025ea0:	3fd20000 	.word	0x3fd20000
 8025ea4:	be8838d4 	.word	0xbe8838d4
 8025ea8:	bda8fae9 	.word	0xbda8fae9
 8025eac:	bdb4b1c4 	.word	0xbdb4b1c4
 8025eb0:	3e21ee9e 	.word	0x3e21ee9e
 8025eb4:	809c52ad 	.word	0x809c52ad
 8025eb8:	3e927e4f 	.word	0x3e927e4f
 8025ebc:	19cb1590 	.word	0x19cb1590
 8025ec0:	3efa01a0 	.word	0x3efa01a0
 8025ec4:	16c15177 	.word	0x16c15177
 8025ec8:	3f56c16c 	.word	0x3f56c16c
 8025ecc:	5555554c 	.word	0x5555554c
 8025ed0:	3fa55555 	.word	0x3fa55555
 8025ed4:	00000000 	.word	0x00000000

08025ed8 <__kernel_rem_pio2>:
 8025ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025edc:	ed2d 8b02 	vpush	{d8}
 8025ee0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8025ee4:	1ed4      	subs	r4, r2, #3
 8025ee6:	9306      	str	r3, [sp, #24]
 8025ee8:	9102      	str	r1, [sp, #8]
 8025eea:	4bc3      	ldr	r3, [pc, #780]	; (80261f8 <__kernel_rem_pio2+0x320>)
 8025eec:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8025eee:	9009      	str	r0, [sp, #36]	; 0x24
 8025ef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8025ef4:	9300      	str	r3, [sp, #0]
 8025ef6:	9b06      	ldr	r3, [sp, #24]
 8025ef8:	3b01      	subs	r3, #1
 8025efa:	9304      	str	r3, [sp, #16]
 8025efc:	2318      	movs	r3, #24
 8025efe:	fb94 f4f3 	sdiv	r4, r4, r3
 8025f02:	f06f 0317 	mvn.w	r3, #23
 8025f06:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8025f0a:	fb04 3303 	mla	r3, r4, r3, r3
 8025f0e:	eb03 0a02 	add.w	sl, r3, r2
 8025f12:	9b00      	ldr	r3, [sp, #0]
 8025f14:	9a04      	ldr	r2, [sp, #16]
 8025f16:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80261e8 <__kernel_rem_pio2+0x310>
 8025f1a:	eb03 0802 	add.w	r8, r3, r2
 8025f1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8025f20:	1aa7      	subs	r7, r4, r2
 8025f22:	ae20      	add	r6, sp, #128	; 0x80
 8025f24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8025f28:	2500      	movs	r5, #0
 8025f2a:	4545      	cmp	r5, r8
 8025f2c:	dd13      	ble.n	8025f56 <__kernel_rem_pio2+0x7e>
 8025f2e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80261e8 <__kernel_rem_pio2+0x310>
 8025f32:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8025f36:	2600      	movs	r6, #0
 8025f38:	9b00      	ldr	r3, [sp, #0]
 8025f3a:	429e      	cmp	r6, r3
 8025f3c:	dc32      	bgt.n	8025fa4 <__kernel_rem_pio2+0xcc>
 8025f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f40:	9303      	str	r3, [sp, #12]
 8025f42:	9b06      	ldr	r3, [sp, #24]
 8025f44:	199d      	adds	r5, r3, r6
 8025f46:	ab20      	add	r3, sp, #128	; 0x80
 8025f48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8025f4c:	9308      	str	r3, [sp, #32]
 8025f4e:	ec59 8b18 	vmov	r8, r9, d8
 8025f52:	2700      	movs	r7, #0
 8025f54:	e01f      	b.n	8025f96 <__kernel_rem_pio2+0xbe>
 8025f56:	42ef      	cmn	r7, r5
 8025f58:	d407      	bmi.n	8025f6a <__kernel_rem_pio2+0x92>
 8025f5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8025f5e:	f7da fab1 	bl	80004c4 <__aeabi_i2d>
 8025f62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8025f66:	3501      	adds	r5, #1
 8025f68:	e7df      	b.n	8025f2a <__kernel_rem_pio2+0x52>
 8025f6a:	ec51 0b18 	vmov	r0, r1, d8
 8025f6e:	e7f8      	b.n	8025f62 <__kernel_rem_pio2+0x8a>
 8025f70:	9908      	ldr	r1, [sp, #32]
 8025f72:	9d03      	ldr	r5, [sp, #12]
 8025f74:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8025f78:	9108      	str	r1, [sp, #32]
 8025f7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8025f7e:	9503      	str	r5, [sp, #12]
 8025f80:	f7da fb06 	bl	8000590 <__aeabi_dmul>
 8025f84:	4602      	mov	r2, r0
 8025f86:	460b      	mov	r3, r1
 8025f88:	4640      	mov	r0, r8
 8025f8a:	4649      	mov	r1, r9
 8025f8c:	f7da f94e 	bl	800022c <__adddf3>
 8025f90:	3701      	adds	r7, #1
 8025f92:	4680      	mov	r8, r0
 8025f94:	4689      	mov	r9, r1
 8025f96:	9b04      	ldr	r3, [sp, #16]
 8025f98:	429f      	cmp	r7, r3
 8025f9a:	dde9      	ble.n	8025f70 <__kernel_rem_pio2+0x98>
 8025f9c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8025fa0:	3601      	adds	r6, #1
 8025fa2:	e7c9      	b.n	8025f38 <__kernel_rem_pio2+0x60>
 8025fa4:	9b00      	ldr	r3, [sp, #0]
 8025fa6:	9f00      	ldr	r7, [sp, #0]
 8025fa8:	aa0c      	add	r2, sp, #48	; 0x30
 8025faa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fb0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8025fb2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8025fb8:	ab98      	add	r3, sp, #608	; 0x260
 8025fba:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8025fbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8025fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025fc6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8025fca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8025fce:	9308      	str	r3, [sp, #32]
 8025fd0:	9a08      	ldr	r2, [sp, #32]
 8025fd2:	ab98      	add	r3, sp, #608	; 0x260
 8025fd4:	4413      	add	r3, r2
 8025fd6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8025fda:	2600      	movs	r6, #0
 8025fdc:	1bbb      	subs	r3, r7, r6
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	dc77      	bgt.n	80260d2 <__kernel_rem_pio2+0x1fa>
 8025fe2:	ec49 8b10 	vmov	d0, r8, r9
 8025fe6:	4650      	mov	r0, sl
 8025fe8:	f000 fb8a 	bl	8026700 <scalbn>
 8025fec:	ec55 4b10 	vmov	r4, r5, d0
 8025ff0:	2200      	movs	r2, #0
 8025ff2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8025ff6:	ee10 0a10 	vmov	r0, s0
 8025ffa:	4629      	mov	r1, r5
 8025ffc:	f7da fac8 	bl	8000590 <__aeabi_dmul>
 8026000:	ec41 0b10 	vmov	d0, r0, r1
 8026004:	f7ff fab4 	bl	8025570 <floor>
 8026008:	2200      	movs	r2, #0
 802600a:	ec51 0b10 	vmov	r0, r1, d0
 802600e:	4b7b      	ldr	r3, [pc, #492]	; (80261fc <__kernel_rem_pio2+0x324>)
 8026010:	f7da fabe 	bl	8000590 <__aeabi_dmul>
 8026014:	4602      	mov	r2, r0
 8026016:	460b      	mov	r3, r1
 8026018:	4620      	mov	r0, r4
 802601a:	4629      	mov	r1, r5
 802601c:	f7da f904 	bl	8000228 <__aeabi_dsub>
 8026020:	460d      	mov	r5, r1
 8026022:	4604      	mov	r4, r0
 8026024:	f7da fd64 	bl	8000af0 <__aeabi_d2iz>
 8026028:	9003      	str	r0, [sp, #12]
 802602a:	f7da fa4b 	bl	80004c4 <__aeabi_i2d>
 802602e:	4602      	mov	r2, r0
 8026030:	460b      	mov	r3, r1
 8026032:	4620      	mov	r0, r4
 8026034:	4629      	mov	r1, r5
 8026036:	f7da f8f7 	bl	8000228 <__aeabi_dsub>
 802603a:	f1ba 0f00 	cmp.w	sl, #0
 802603e:	4680      	mov	r8, r0
 8026040:	4689      	mov	r9, r1
 8026042:	dd6b      	ble.n	802611c <__kernel_rem_pio2+0x244>
 8026044:	1e7a      	subs	r2, r7, #1
 8026046:	ab0c      	add	r3, sp, #48	; 0x30
 8026048:	f1ca 0118 	rsb	r1, sl, #24
 802604c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026050:	9c03      	ldr	r4, [sp, #12]
 8026052:	fa40 f301 	asr.w	r3, r0, r1
 8026056:	441c      	add	r4, r3
 8026058:	408b      	lsls	r3, r1
 802605a:	1ac0      	subs	r0, r0, r3
 802605c:	ab0c      	add	r3, sp, #48	; 0x30
 802605e:	9403      	str	r4, [sp, #12]
 8026060:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8026064:	f1ca 0317 	rsb	r3, sl, #23
 8026068:	fa40 fb03 	asr.w	fp, r0, r3
 802606c:	f1bb 0f00 	cmp.w	fp, #0
 8026070:	dd62      	ble.n	8026138 <__kernel_rem_pio2+0x260>
 8026072:	9b03      	ldr	r3, [sp, #12]
 8026074:	2200      	movs	r2, #0
 8026076:	3301      	adds	r3, #1
 8026078:	9303      	str	r3, [sp, #12]
 802607a:	4614      	mov	r4, r2
 802607c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8026080:	4297      	cmp	r7, r2
 8026082:	f300 8089 	bgt.w	8026198 <__kernel_rem_pio2+0x2c0>
 8026086:	f1ba 0f00 	cmp.w	sl, #0
 802608a:	dd07      	ble.n	802609c <__kernel_rem_pio2+0x1c4>
 802608c:	f1ba 0f01 	cmp.w	sl, #1
 8026090:	f000 8096 	beq.w	80261c0 <__kernel_rem_pio2+0x2e8>
 8026094:	f1ba 0f02 	cmp.w	sl, #2
 8026098:	f000 809c 	beq.w	80261d4 <__kernel_rem_pio2+0x2fc>
 802609c:	f1bb 0f02 	cmp.w	fp, #2
 80260a0:	d14a      	bne.n	8026138 <__kernel_rem_pio2+0x260>
 80260a2:	4642      	mov	r2, r8
 80260a4:	464b      	mov	r3, r9
 80260a6:	2000      	movs	r0, #0
 80260a8:	4955      	ldr	r1, [pc, #340]	; (8026200 <__kernel_rem_pio2+0x328>)
 80260aa:	f7da f8bd 	bl	8000228 <__aeabi_dsub>
 80260ae:	4680      	mov	r8, r0
 80260b0:	4689      	mov	r9, r1
 80260b2:	2c00      	cmp	r4, #0
 80260b4:	d040      	beq.n	8026138 <__kernel_rem_pio2+0x260>
 80260b6:	4650      	mov	r0, sl
 80260b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80261f0 <__kernel_rem_pio2+0x318>
 80260bc:	f000 fb20 	bl	8026700 <scalbn>
 80260c0:	4640      	mov	r0, r8
 80260c2:	4649      	mov	r1, r9
 80260c4:	ec53 2b10 	vmov	r2, r3, d0
 80260c8:	f7da f8ae 	bl	8000228 <__aeabi_dsub>
 80260cc:	4680      	mov	r8, r0
 80260ce:	4689      	mov	r9, r1
 80260d0:	e032      	b.n	8026138 <__kernel_rem_pio2+0x260>
 80260d2:	2200      	movs	r2, #0
 80260d4:	4b4b      	ldr	r3, [pc, #300]	; (8026204 <__kernel_rem_pio2+0x32c>)
 80260d6:	4640      	mov	r0, r8
 80260d8:	4649      	mov	r1, r9
 80260da:	f7da fa59 	bl	8000590 <__aeabi_dmul>
 80260de:	f7da fd07 	bl	8000af0 <__aeabi_d2iz>
 80260e2:	f7da f9ef 	bl	80004c4 <__aeabi_i2d>
 80260e6:	2200      	movs	r2, #0
 80260e8:	4b47      	ldr	r3, [pc, #284]	; (8026208 <__kernel_rem_pio2+0x330>)
 80260ea:	4604      	mov	r4, r0
 80260ec:	460d      	mov	r5, r1
 80260ee:	f7da fa4f 	bl	8000590 <__aeabi_dmul>
 80260f2:	4602      	mov	r2, r0
 80260f4:	460b      	mov	r3, r1
 80260f6:	4640      	mov	r0, r8
 80260f8:	4649      	mov	r1, r9
 80260fa:	f7da f895 	bl	8000228 <__aeabi_dsub>
 80260fe:	f7da fcf7 	bl	8000af0 <__aeabi_d2iz>
 8026102:	ab0c      	add	r3, sp, #48	; 0x30
 8026104:	4629      	mov	r1, r5
 8026106:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 802610a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802610e:	4620      	mov	r0, r4
 8026110:	f7da f88c 	bl	800022c <__adddf3>
 8026114:	3601      	adds	r6, #1
 8026116:	4680      	mov	r8, r0
 8026118:	4689      	mov	r9, r1
 802611a:	e75f      	b.n	8025fdc <__kernel_rem_pio2+0x104>
 802611c:	d106      	bne.n	802612c <__kernel_rem_pio2+0x254>
 802611e:	1e7b      	subs	r3, r7, #1
 8026120:	aa0c      	add	r2, sp, #48	; 0x30
 8026122:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8026126:	ea4f 5be0 	mov.w	fp, r0, asr #23
 802612a:	e79f      	b.n	802606c <__kernel_rem_pio2+0x194>
 802612c:	2200      	movs	r2, #0
 802612e:	4b37      	ldr	r3, [pc, #220]	; (802620c <__kernel_rem_pio2+0x334>)
 8026130:	f7da fcb4 	bl	8000a9c <__aeabi_dcmpge>
 8026134:	bb68      	cbnz	r0, 8026192 <__kernel_rem_pio2+0x2ba>
 8026136:	4683      	mov	fp, r0
 8026138:	2200      	movs	r2, #0
 802613a:	2300      	movs	r3, #0
 802613c:	4640      	mov	r0, r8
 802613e:	4649      	mov	r1, r9
 8026140:	f7da fc8e 	bl	8000a60 <__aeabi_dcmpeq>
 8026144:	2800      	cmp	r0, #0
 8026146:	f000 80c1 	beq.w	80262cc <__kernel_rem_pio2+0x3f4>
 802614a:	1e7c      	subs	r4, r7, #1
 802614c:	4623      	mov	r3, r4
 802614e:	2200      	movs	r2, #0
 8026150:	9900      	ldr	r1, [sp, #0]
 8026152:	428b      	cmp	r3, r1
 8026154:	da5c      	bge.n	8026210 <__kernel_rem_pio2+0x338>
 8026156:	2a00      	cmp	r2, #0
 8026158:	f040 808b 	bne.w	8026272 <__kernel_rem_pio2+0x39a>
 802615c:	2401      	movs	r4, #1
 802615e:	f06f 0203 	mvn.w	r2, #3
 8026162:	fb02 f304 	mul.w	r3, r2, r4
 8026166:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026168:	58cb      	ldr	r3, [r1, r3]
 802616a:	2b00      	cmp	r3, #0
 802616c:	d056      	beq.n	802621c <__kernel_rem_pio2+0x344>
 802616e:	9b08      	ldr	r3, [sp, #32]
 8026170:	aa98      	add	r2, sp, #608	; 0x260
 8026172:	4413      	add	r3, r2
 8026174:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8026178:	9b06      	ldr	r3, [sp, #24]
 802617a:	19dd      	adds	r5, r3, r7
 802617c:	ab20      	add	r3, sp, #128	; 0x80
 802617e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8026182:	19e3      	adds	r3, r4, r7
 8026184:	1c7e      	adds	r6, r7, #1
 8026186:	9303      	str	r3, [sp, #12]
 8026188:	9b03      	ldr	r3, [sp, #12]
 802618a:	429e      	cmp	r6, r3
 802618c:	dd48      	ble.n	8026220 <__kernel_rem_pio2+0x348>
 802618e:	461f      	mov	r7, r3
 8026190:	e712      	b.n	8025fb8 <__kernel_rem_pio2+0xe0>
 8026192:	f04f 0b02 	mov.w	fp, #2
 8026196:	e76c      	b.n	8026072 <__kernel_rem_pio2+0x19a>
 8026198:	ab0c      	add	r3, sp, #48	; 0x30
 802619a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802619e:	b94c      	cbnz	r4, 80261b4 <__kernel_rem_pio2+0x2dc>
 80261a0:	b12b      	cbz	r3, 80261ae <__kernel_rem_pio2+0x2d6>
 80261a2:	a80c      	add	r0, sp, #48	; 0x30
 80261a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80261a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80261ac:	2301      	movs	r3, #1
 80261ae:	3201      	adds	r2, #1
 80261b0:	461c      	mov	r4, r3
 80261b2:	e765      	b.n	8026080 <__kernel_rem_pio2+0x1a8>
 80261b4:	a80c      	add	r0, sp, #48	; 0x30
 80261b6:	1acb      	subs	r3, r1, r3
 80261b8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80261bc:	4623      	mov	r3, r4
 80261be:	e7f6      	b.n	80261ae <__kernel_rem_pio2+0x2d6>
 80261c0:	1e7a      	subs	r2, r7, #1
 80261c2:	ab0c      	add	r3, sp, #48	; 0x30
 80261c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80261c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80261cc:	a90c      	add	r1, sp, #48	; 0x30
 80261ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80261d2:	e763      	b.n	802609c <__kernel_rem_pio2+0x1c4>
 80261d4:	1e7a      	subs	r2, r7, #1
 80261d6:	ab0c      	add	r3, sp, #48	; 0x30
 80261d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80261dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80261e0:	e7f4      	b.n	80261cc <__kernel_rem_pio2+0x2f4>
 80261e2:	bf00      	nop
 80261e4:	f3af 8000 	nop.w
	...
 80261f4:	3ff00000 	.word	0x3ff00000
 80261f8:	08034b78 	.word	0x08034b78
 80261fc:	40200000 	.word	0x40200000
 8026200:	3ff00000 	.word	0x3ff00000
 8026204:	3e700000 	.word	0x3e700000
 8026208:	41700000 	.word	0x41700000
 802620c:	3fe00000 	.word	0x3fe00000
 8026210:	a90c      	add	r1, sp, #48	; 0x30
 8026212:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8026216:	3b01      	subs	r3, #1
 8026218:	430a      	orrs	r2, r1
 802621a:	e799      	b.n	8026150 <__kernel_rem_pio2+0x278>
 802621c:	3401      	adds	r4, #1
 802621e:	e7a0      	b.n	8026162 <__kernel_rem_pio2+0x28a>
 8026220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026222:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8026226:	f7da f94d 	bl	80004c4 <__aeabi_i2d>
 802622a:	e8e5 0102 	strd	r0, r1, [r5], #8
 802622e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026230:	9508      	str	r5, [sp, #32]
 8026232:	461c      	mov	r4, r3
 8026234:	2700      	movs	r7, #0
 8026236:	f04f 0800 	mov.w	r8, #0
 802623a:	f04f 0900 	mov.w	r9, #0
 802623e:	9b04      	ldr	r3, [sp, #16]
 8026240:	429f      	cmp	r7, r3
 8026242:	dd03      	ble.n	802624c <__kernel_rem_pio2+0x374>
 8026244:	e8eb 8902 	strd	r8, r9, [fp], #8
 8026248:	3601      	adds	r6, #1
 802624a:	e79d      	b.n	8026188 <__kernel_rem_pio2+0x2b0>
 802624c:	9908      	ldr	r1, [sp, #32]
 802624e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8026252:	9108      	str	r1, [sp, #32]
 8026254:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8026258:	f7da f99a 	bl	8000590 <__aeabi_dmul>
 802625c:	4602      	mov	r2, r0
 802625e:	460b      	mov	r3, r1
 8026260:	4640      	mov	r0, r8
 8026262:	4649      	mov	r1, r9
 8026264:	f7d9 ffe2 	bl	800022c <__adddf3>
 8026268:	3701      	adds	r7, #1
 802626a:	4680      	mov	r8, r0
 802626c:	4689      	mov	r9, r1
 802626e:	e7e6      	b.n	802623e <__kernel_rem_pio2+0x366>
 8026270:	3c01      	subs	r4, #1
 8026272:	ab0c      	add	r3, sp, #48	; 0x30
 8026274:	f1aa 0a18 	sub.w	sl, sl, #24
 8026278:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802627c:	2b00      	cmp	r3, #0
 802627e:	d0f7      	beq.n	8026270 <__kernel_rem_pio2+0x398>
 8026280:	4650      	mov	r0, sl
 8026282:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8026558 <__kernel_rem_pio2+0x680>
 8026286:	f000 fa3b 	bl	8026700 <scalbn>
 802628a:	00e5      	lsls	r5, r4, #3
 802628c:	ab98      	add	r3, sp, #608	; 0x260
 802628e:	eb03 0905 	add.w	r9, r3, r5
 8026292:	ec57 6b10 	vmov	r6, r7, d0
 8026296:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 802629a:	46a0      	mov	r8, r4
 802629c:	f1b8 0f00 	cmp.w	r8, #0
 80262a0:	da4d      	bge.n	802633e <__kernel_rem_pio2+0x466>
 80262a2:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8026560 <__kernel_rem_pio2+0x688>
 80262a6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 80262aa:	2300      	movs	r3, #0
 80262ac:	9304      	str	r3, [sp, #16]
 80262ae:	4657      	mov	r7, sl
 80262b0:	9b04      	ldr	r3, [sp, #16]
 80262b2:	ebb4 0903 	subs.w	r9, r4, r3
 80262b6:	d476      	bmi.n	80263a6 <__kernel_rem_pio2+0x4ce>
 80262b8:	4bab      	ldr	r3, [pc, #684]	; (8026568 <__kernel_rem_pio2+0x690>)
 80262ba:	461e      	mov	r6, r3
 80262bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80262be:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80262c2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80262c6:	f04f 0800 	mov.w	r8, #0
 80262ca:	e05e      	b.n	802638a <__kernel_rem_pio2+0x4b2>
 80262cc:	f1ca 0000 	rsb	r0, sl, #0
 80262d0:	ec49 8b10 	vmov	d0, r8, r9
 80262d4:	f000 fa14 	bl	8026700 <scalbn>
 80262d8:	ec55 4b10 	vmov	r4, r5, d0
 80262dc:	2200      	movs	r2, #0
 80262de:	4ba3      	ldr	r3, [pc, #652]	; (802656c <__kernel_rem_pio2+0x694>)
 80262e0:	ee10 0a10 	vmov	r0, s0
 80262e4:	4629      	mov	r1, r5
 80262e6:	f7da fbd9 	bl	8000a9c <__aeabi_dcmpge>
 80262ea:	b1f8      	cbz	r0, 802632c <__kernel_rem_pio2+0x454>
 80262ec:	2200      	movs	r2, #0
 80262ee:	4ba0      	ldr	r3, [pc, #640]	; (8026570 <__kernel_rem_pio2+0x698>)
 80262f0:	4620      	mov	r0, r4
 80262f2:	4629      	mov	r1, r5
 80262f4:	f7da f94c 	bl	8000590 <__aeabi_dmul>
 80262f8:	f7da fbfa 	bl	8000af0 <__aeabi_d2iz>
 80262fc:	4606      	mov	r6, r0
 80262fe:	f7da f8e1 	bl	80004c4 <__aeabi_i2d>
 8026302:	2200      	movs	r2, #0
 8026304:	4b99      	ldr	r3, [pc, #612]	; (802656c <__kernel_rem_pio2+0x694>)
 8026306:	f7da f943 	bl	8000590 <__aeabi_dmul>
 802630a:	460b      	mov	r3, r1
 802630c:	4602      	mov	r2, r0
 802630e:	4629      	mov	r1, r5
 8026310:	4620      	mov	r0, r4
 8026312:	f7d9 ff89 	bl	8000228 <__aeabi_dsub>
 8026316:	f7da fbeb 	bl	8000af0 <__aeabi_d2iz>
 802631a:	1c7c      	adds	r4, r7, #1
 802631c:	ab0c      	add	r3, sp, #48	; 0x30
 802631e:	f10a 0a18 	add.w	sl, sl, #24
 8026322:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8026326:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 802632a:	e7a9      	b.n	8026280 <__kernel_rem_pio2+0x3a8>
 802632c:	4620      	mov	r0, r4
 802632e:	4629      	mov	r1, r5
 8026330:	f7da fbde 	bl	8000af0 <__aeabi_d2iz>
 8026334:	ab0c      	add	r3, sp, #48	; 0x30
 8026336:	463c      	mov	r4, r7
 8026338:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 802633c:	e7a0      	b.n	8026280 <__kernel_rem_pio2+0x3a8>
 802633e:	ab0c      	add	r3, sp, #48	; 0x30
 8026340:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8026344:	f7da f8be 	bl	80004c4 <__aeabi_i2d>
 8026348:	4632      	mov	r2, r6
 802634a:	463b      	mov	r3, r7
 802634c:	f7da f920 	bl	8000590 <__aeabi_dmul>
 8026350:	2200      	movs	r2, #0
 8026352:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8026356:	4b86      	ldr	r3, [pc, #536]	; (8026570 <__kernel_rem_pio2+0x698>)
 8026358:	4630      	mov	r0, r6
 802635a:	4639      	mov	r1, r7
 802635c:	f7da f918 	bl	8000590 <__aeabi_dmul>
 8026360:	f108 38ff 	add.w	r8, r8, #4294967295
 8026364:	4606      	mov	r6, r0
 8026366:	460f      	mov	r7, r1
 8026368:	e798      	b.n	802629c <__kernel_rem_pio2+0x3c4>
 802636a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802636e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8026372:	f7da f90d 	bl	8000590 <__aeabi_dmul>
 8026376:	4602      	mov	r2, r0
 8026378:	460b      	mov	r3, r1
 802637a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802637e:	f7d9 ff55 	bl	800022c <__adddf3>
 8026382:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026386:	f108 0801 	add.w	r8, r8, #1
 802638a:	9b00      	ldr	r3, [sp, #0]
 802638c:	4598      	cmp	r8, r3
 802638e:	dc02      	bgt.n	8026396 <__kernel_rem_pio2+0x4be>
 8026390:	9b04      	ldr	r3, [sp, #16]
 8026392:	4598      	cmp	r8, r3
 8026394:	dde9      	ble.n	802636a <__kernel_rem_pio2+0x492>
 8026396:	9b04      	ldr	r3, [sp, #16]
 8026398:	ed9d 7b06 	vldr	d7, [sp, #24]
 802639c:	3301      	adds	r3, #1
 802639e:	ecaa 7b02 	vstmia	sl!, {d7}
 80263a2:	9304      	str	r3, [sp, #16]
 80263a4:	e784      	b.n	80262b0 <__kernel_rem_pio2+0x3d8>
 80263a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80263a8:	2b03      	cmp	r3, #3
 80263aa:	d85d      	bhi.n	8026468 <__kernel_rem_pio2+0x590>
 80263ac:	e8df f003 	tbb	[pc, r3]
 80263b0:	0226264b 	.word	0x0226264b
 80263b4:	ab98      	add	r3, sp, #608	; 0x260
 80263b6:	441d      	add	r5, r3
 80263b8:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80263bc:	462e      	mov	r6, r5
 80263be:	46a2      	mov	sl, r4
 80263c0:	f1ba 0f00 	cmp.w	sl, #0
 80263c4:	dc6e      	bgt.n	80264a4 <__kernel_rem_pio2+0x5cc>
 80263c6:	462e      	mov	r6, r5
 80263c8:	46a2      	mov	sl, r4
 80263ca:	f1ba 0f01 	cmp.w	sl, #1
 80263ce:	f300 808a 	bgt.w	80264e6 <__kernel_rem_pio2+0x60e>
 80263d2:	2000      	movs	r0, #0
 80263d4:	2100      	movs	r1, #0
 80263d6:	2c01      	cmp	r4, #1
 80263d8:	f300 80a6 	bgt.w	8026528 <__kernel_rem_pio2+0x650>
 80263dc:	f1bb 0f00 	cmp.w	fp, #0
 80263e0:	f040 80a8 	bne.w	8026534 <__kernel_rem_pio2+0x65c>
 80263e4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80263e8:	9c02      	ldr	r4, [sp, #8]
 80263ea:	e9c4 2300 	strd	r2, r3, [r4]
 80263ee:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80263f2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80263f6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80263fa:	e035      	b.n	8026468 <__kernel_rem_pio2+0x590>
 80263fc:	3508      	adds	r5, #8
 80263fe:	ab48      	add	r3, sp, #288	; 0x120
 8026400:	441d      	add	r5, r3
 8026402:	4626      	mov	r6, r4
 8026404:	2000      	movs	r0, #0
 8026406:	2100      	movs	r1, #0
 8026408:	2e00      	cmp	r6, #0
 802640a:	da3c      	bge.n	8026486 <__kernel_rem_pio2+0x5ae>
 802640c:	f1bb 0f00 	cmp.w	fp, #0
 8026410:	d03f      	beq.n	8026492 <__kernel_rem_pio2+0x5ba>
 8026412:	4602      	mov	r2, r0
 8026414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026418:	9d02      	ldr	r5, [sp, #8]
 802641a:	e9c5 2300 	strd	r2, r3, [r5]
 802641e:	4602      	mov	r2, r0
 8026420:	460b      	mov	r3, r1
 8026422:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8026426:	f7d9 feff 	bl	8000228 <__aeabi_dsub>
 802642a:	ae4a      	add	r6, sp, #296	; 0x128
 802642c:	2501      	movs	r5, #1
 802642e:	42ac      	cmp	r4, r5
 8026430:	da32      	bge.n	8026498 <__kernel_rem_pio2+0x5c0>
 8026432:	f1bb 0f00 	cmp.w	fp, #0
 8026436:	d002      	beq.n	802643e <__kernel_rem_pio2+0x566>
 8026438:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802643c:	4619      	mov	r1, r3
 802643e:	9b02      	ldr	r3, [sp, #8]
 8026440:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8026444:	e010      	b.n	8026468 <__kernel_rem_pio2+0x590>
 8026446:	ab98      	add	r3, sp, #608	; 0x260
 8026448:	441d      	add	r5, r3
 802644a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 802644e:	2000      	movs	r0, #0
 8026450:	2100      	movs	r1, #0
 8026452:	2c00      	cmp	r4, #0
 8026454:	da11      	bge.n	802647a <__kernel_rem_pio2+0x5a2>
 8026456:	f1bb 0f00 	cmp.w	fp, #0
 802645a:	d002      	beq.n	8026462 <__kernel_rem_pio2+0x58a>
 802645c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026460:	4619      	mov	r1, r3
 8026462:	9b02      	ldr	r3, [sp, #8]
 8026464:	e9c3 0100 	strd	r0, r1, [r3]
 8026468:	9b03      	ldr	r3, [sp, #12]
 802646a:	f003 0007 	and.w	r0, r3, #7
 802646e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8026472:	ecbd 8b02 	vpop	{d8}
 8026476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802647a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 802647e:	f7d9 fed5 	bl	800022c <__adddf3>
 8026482:	3c01      	subs	r4, #1
 8026484:	e7e5      	b.n	8026452 <__kernel_rem_pio2+0x57a>
 8026486:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 802648a:	f7d9 fecf 	bl	800022c <__adddf3>
 802648e:	3e01      	subs	r6, #1
 8026490:	e7ba      	b.n	8026408 <__kernel_rem_pio2+0x530>
 8026492:	4602      	mov	r2, r0
 8026494:	460b      	mov	r3, r1
 8026496:	e7bf      	b.n	8026418 <__kernel_rem_pio2+0x540>
 8026498:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802649c:	f7d9 fec6 	bl	800022c <__adddf3>
 80264a0:	3501      	adds	r5, #1
 80264a2:	e7c4      	b.n	802642e <__kernel_rem_pio2+0x556>
 80264a4:	ed16 7b02 	vldr	d7, [r6, #-8]
 80264a8:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80264ac:	ec53 2b17 	vmov	r2, r3, d7
 80264b0:	4640      	mov	r0, r8
 80264b2:	4649      	mov	r1, r9
 80264b4:	ed8d 7b00 	vstr	d7, [sp]
 80264b8:	f7d9 feb8 	bl	800022c <__adddf3>
 80264bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80264c0:	4602      	mov	r2, r0
 80264c2:	460b      	mov	r3, r1
 80264c4:	4640      	mov	r0, r8
 80264c6:	4649      	mov	r1, r9
 80264c8:	f7d9 feae 	bl	8000228 <__aeabi_dsub>
 80264cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80264d0:	f7d9 feac 	bl	800022c <__adddf3>
 80264d4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80264d8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80264dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80264e0:	ed06 7b02 	vstr	d7, [r6, #-8]
 80264e4:	e76c      	b.n	80263c0 <__kernel_rem_pio2+0x4e8>
 80264e6:	ed16 7b02 	vldr	d7, [r6, #-8]
 80264ea:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80264ee:	ec53 2b17 	vmov	r2, r3, d7
 80264f2:	4640      	mov	r0, r8
 80264f4:	4649      	mov	r1, r9
 80264f6:	ed8d 7b00 	vstr	d7, [sp]
 80264fa:	f7d9 fe97 	bl	800022c <__adddf3>
 80264fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026502:	4602      	mov	r2, r0
 8026504:	460b      	mov	r3, r1
 8026506:	4640      	mov	r0, r8
 8026508:	4649      	mov	r1, r9
 802650a:	f7d9 fe8d 	bl	8000228 <__aeabi_dsub>
 802650e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026512:	f7d9 fe8b 	bl	800022c <__adddf3>
 8026516:	ed9d 7b04 	vldr	d7, [sp, #16]
 802651a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 802651e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026522:	ed06 7b02 	vstr	d7, [r6, #-8]
 8026526:	e750      	b.n	80263ca <__kernel_rem_pio2+0x4f2>
 8026528:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 802652c:	f7d9 fe7e 	bl	800022c <__adddf3>
 8026530:	3c01      	subs	r4, #1
 8026532:	e750      	b.n	80263d6 <__kernel_rem_pio2+0x4fe>
 8026534:	9a02      	ldr	r2, [sp, #8]
 8026536:	683b      	ldr	r3, [r7, #0]
 8026538:	6013      	str	r3, [r2, #0]
 802653a:	687b      	ldr	r3, [r7, #4]
 802653c:	6110      	str	r0, [r2, #16]
 802653e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026542:	6053      	str	r3, [r2, #4]
 8026544:	68bb      	ldr	r3, [r7, #8]
 8026546:	6093      	str	r3, [r2, #8]
 8026548:	68fb      	ldr	r3, [r7, #12]
 802654a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802654e:	60d3      	str	r3, [r2, #12]
 8026550:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026554:	6153      	str	r3, [r2, #20]
 8026556:	e787      	b.n	8026468 <__kernel_rem_pio2+0x590>
 8026558:	00000000 	.word	0x00000000
 802655c:	3ff00000 	.word	0x3ff00000
	...
 8026568:	08034b38 	.word	0x08034b38
 802656c:	41700000 	.word	0x41700000
 8026570:	3e700000 	.word	0x3e700000
 8026574:	00000000 	.word	0x00000000

08026578 <__kernel_sin>:
 8026578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802657c:	ec55 4b10 	vmov	r4, r5, d0
 8026580:	b085      	sub	sp, #20
 8026582:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026586:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802658a:	ed8d 1b00 	vstr	d1, [sp]
 802658e:	9002      	str	r0, [sp, #8]
 8026590:	da06      	bge.n	80265a0 <__kernel_sin+0x28>
 8026592:	ee10 0a10 	vmov	r0, s0
 8026596:	4629      	mov	r1, r5
 8026598:	f7da faaa 	bl	8000af0 <__aeabi_d2iz>
 802659c:	2800      	cmp	r0, #0
 802659e:	d051      	beq.n	8026644 <__kernel_sin+0xcc>
 80265a0:	4622      	mov	r2, r4
 80265a2:	462b      	mov	r3, r5
 80265a4:	4620      	mov	r0, r4
 80265a6:	4629      	mov	r1, r5
 80265a8:	f7d9 fff2 	bl	8000590 <__aeabi_dmul>
 80265ac:	4682      	mov	sl, r0
 80265ae:	468b      	mov	fp, r1
 80265b0:	4602      	mov	r2, r0
 80265b2:	460b      	mov	r3, r1
 80265b4:	4620      	mov	r0, r4
 80265b6:	4629      	mov	r1, r5
 80265b8:	f7d9 ffea 	bl	8000590 <__aeabi_dmul>
 80265bc:	a341      	add	r3, pc, #260	; (adr r3, 80266c4 <__kernel_sin+0x14c>)
 80265be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265c2:	4680      	mov	r8, r0
 80265c4:	4689      	mov	r9, r1
 80265c6:	4650      	mov	r0, sl
 80265c8:	4659      	mov	r1, fp
 80265ca:	f7d9 ffe1 	bl	8000590 <__aeabi_dmul>
 80265ce:	a33f      	add	r3, pc, #252	; (adr r3, 80266cc <__kernel_sin+0x154>)
 80265d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265d4:	f7d9 fe28 	bl	8000228 <__aeabi_dsub>
 80265d8:	4652      	mov	r2, sl
 80265da:	465b      	mov	r3, fp
 80265dc:	f7d9 ffd8 	bl	8000590 <__aeabi_dmul>
 80265e0:	a33c      	add	r3, pc, #240	; (adr r3, 80266d4 <__kernel_sin+0x15c>)
 80265e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265e6:	f7d9 fe21 	bl	800022c <__adddf3>
 80265ea:	4652      	mov	r2, sl
 80265ec:	465b      	mov	r3, fp
 80265ee:	f7d9 ffcf 	bl	8000590 <__aeabi_dmul>
 80265f2:	a33a      	add	r3, pc, #232	; (adr r3, 80266dc <__kernel_sin+0x164>)
 80265f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265f8:	f7d9 fe16 	bl	8000228 <__aeabi_dsub>
 80265fc:	4652      	mov	r2, sl
 80265fe:	465b      	mov	r3, fp
 8026600:	f7d9 ffc6 	bl	8000590 <__aeabi_dmul>
 8026604:	a337      	add	r3, pc, #220	; (adr r3, 80266e4 <__kernel_sin+0x16c>)
 8026606:	e9d3 2300 	ldrd	r2, r3, [r3]
 802660a:	f7d9 fe0f 	bl	800022c <__adddf3>
 802660e:	9b02      	ldr	r3, [sp, #8]
 8026610:	4606      	mov	r6, r0
 8026612:	460f      	mov	r7, r1
 8026614:	b9db      	cbnz	r3, 802664e <__kernel_sin+0xd6>
 8026616:	4602      	mov	r2, r0
 8026618:	460b      	mov	r3, r1
 802661a:	4650      	mov	r0, sl
 802661c:	4659      	mov	r1, fp
 802661e:	f7d9 ffb7 	bl	8000590 <__aeabi_dmul>
 8026622:	a325      	add	r3, pc, #148	; (adr r3, 80266b8 <__kernel_sin+0x140>)
 8026624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026628:	f7d9 fdfe 	bl	8000228 <__aeabi_dsub>
 802662c:	4642      	mov	r2, r8
 802662e:	464b      	mov	r3, r9
 8026630:	f7d9 ffae 	bl	8000590 <__aeabi_dmul>
 8026634:	4602      	mov	r2, r0
 8026636:	460b      	mov	r3, r1
 8026638:	4620      	mov	r0, r4
 802663a:	4629      	mov	r1, r5
 802663c:	f7d9 fdf6 	bl	800022c <__adddf3>
 8026640:	4604      	mov	r4, r0
 8026642:	460d      	mov	r5, r1
 8026644:	ec45 4b10 	vmov	d0, r4, r5
 8026648:	b005      	add	sp, #20
 802664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802664e:	2200      	movs	r2, #0
 8026650:	4b1b      	ldr	r3, [pc, #108]	; (80266c0 <__kernel_sin+0x148>)
 8026652:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026656:	f7d9 ff9b 	bl	8000590 <__aeabi_dmul>
 802665a:	4632      	mov	r2, r6
 802665c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026660:	463b      	mov	r3, r7
 8026662:	4640      	mov	r0, r8
 8026664:	4649      	mov	r1, r9
 8026666:	f7d9 ff93 	bl	8000590 <__aeabi_dmul>
 802666a:	4602      	mov	r2, r0
 802666c:	460b      	mov	r3, r1
 802666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026672:	f7d9 fdd9 	bl	8000228 <__aeabi_dsub>
 8026676:	4652      	mov	r2, sl
 8026678:	465b      	mov	r3, fp
 802667a:	f7d9 ff89 	bl	8000590 <__aeabi_dmul>
 802667e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026682:	f7d9 fdd1 	bl	8000228 <__aeabi_dsub>
 8026686:	a30c      	add	r3, pc, #48	; (adr r3, 80266b8 <__kernel_sin+0x140>)
 8026688:	e9d3 2300 	ldrd	r2, r3, [r3]
 802668c:	4606      	mov	r6, r0
 802668e:	460f      	mov	r7, r1
 8026690:	4640      	mov	r0, r8
 8026692:	4649      	mov	r1, r9
 8026694:	f7d9 ff7c 	bl	8000590 <__aeabi_dmul>
 8026698:	4602      	mov	r2, r0
 802669a:	460b      	mov	r3, r1
 802669c:	4630      	mov	r0, r6
 802669e:	4639      	mov	r1, r7
 80266a0:	f7d9 fdc4 	bl	800022c <__adddf3>
 80266a4:	4602      	mov	r2, r0
 80266a6:	460b      	mov	r3, r1
 80266a8:	4620      	mov	r0, r4
 80266aa:	4629      	mov	r1, r5
 80266ac:	f7d9 fdbc 	bl	8000228 <__aeabi_dsub>
 80266b0:	e7c6      	b.n	8026640 <__kernel_sin+0xc8>
 80266b2:	bf00      	nop
 80266b4:	f3af 8000 	nop.w
 80266b8:	55555549 	.word	0x55555549
 80266bc:	3fc55555 	.word	0x3fc55555
 80266c0:	3fe00000 	.word	0x3fe00000
 80266c4:	5acfd57c 	.word	0x5acfd57c
 80266c8:	3de5d93a 	.word	0x3de5d93a
 80266cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80266d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80266d4:	57b1fe7d 	.word	0x57b1fe7d
 80266d8:	3ec71de3 	.word	0x3ec71de3
 80266dc:	19c161d5 	.word	0x19c161d5
 80266e0:	3f2a01a0 	.word	0x3f2a01a0
 80266e4:	1110f8a6 	.word	0x1110f8a6
 80266e8:	3f811111 	.word	0x3f811111

080266ec <fabs>:
 80266ec:	ec53 2b10 	vmov	r2, r3, d0
 80266f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80266f4:	ec43 2b10 	vmov	d0, r2, r3
 80266f8:	4770      	bx	lr

080266fa <matherr>:
 80266fa:	2000      	movs	r0, #0
 80266fc:	4770      	bx	lr
	...

08026700 <scalbn>:
 8026700:	b570      	push	{r4, r5, r6, lr}
 8026702:	ec55 4b10 	vmov	r4, r5, d0
 8026706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802670a:	4606      	mov	r6, r0
 802670c:	462b      	mov	r3, r5
 802670e:	b9b2      	cbnz	r2, 802673e <scalbn+0x3e>
 8026710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026714:	4323      	orrs	r3, r4
 8026716:	d03c      	beq.n	8026792 <scalbn+0x92>
 8026718:	2200      	movs	r2, #0
 802671a:	4b33      	ldr	r3, [pc, #204]	; (80267e8 <scalbn+0xe8>)
 802671c:	4629      	mov	r1, r5
 802671e:	ee10 0a10 	vmov	r0, s0
 8026722:	f7d9 ff35 	bl	8000590 <__aeabi_dmul>
 8026726:	4a31      	ldr	r2, [pc, #196]	; (80267ec <scalbn+0xec>)
 8026728:	4296      	cmp	r6, r2
 802672a:	4604      	mov	r4, r0
 802672c:	460d      	mov	r5, r1
 802672e:	460b      	mov	r3, r1
 8026730:	da13      	bge.n	802675a <scalbn+0x5a>
 8026732:	a329      	add	r3, pc, #164	; (adr r3, 80267d8 <scalbn+0xd8>)
 8026734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026738:	f7d9 ff2a 	bl	8000590 <__aeabi_dmul>
 802673c:	e00a      	b.n	8026754 <scalbn+0x54>
 802673e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8026742:	428a      	cmp	r2, r1
 8026744:	d10c      	bne.n	8026760 <scalbn+0x60>
 8026746:	ee10 2a10 	vmov	r2, s0
 802674a:	462b      	mov	r3, r5
 802674c:	4620      	mov	r0, r4
 802674e:	4629      	mov	r1, r5
 8026750:	f7d9 fd6c 	bl	800022c <__adddf3>
 8026754:	4604      	mov	r4, r0
 8026756:	460d      	mov	r5, r1
 8026758:	e01b      	b.n	8026792 <scalbn+0x92>
 802675a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802675e:	3a36      	subs	r2, #54	; 0x36
 8026760:	4432      	add	r2, r6
 8026762:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8026766:	428a      	cmp	r2, r1
 8026768:	dd0b      	ble.n	8026782 <scalbn+0x82>
 802676a:	ec45 4b11 	vmov	d1, r4, r5
 802676e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80267e0 <scalbn+0xe0>
 8026772:	f000 f83f 	bl	80267f4 <copysign>
 8026776:	a31a      	add	r3, pc, #104	; (adr r3, 80267e0 <scalbn+0xe0>)
 8026778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802677c:	ec51 0b10 	vmov	r0, r1, d0
 8026780:	e7da      	b.n	8026738 <scalbn+0x38>
 8026782:	2a00      	cmp	r2, #0
 8026784:	dd08      	ble.n	8026798 <scalbn+0x98>
 8026786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802678a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802678e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8026792:	ec45 4b10 	vmov	d0, r4, r5
 8026796:	bd70      	pop	{r4, r5, r6, pc}
 8026798:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802679c:	da0d      	bge.n	80267ba <scalbn+0xba>
 802679e:	f24c 3350 	movw	r3, #50000	; 0xc350
 80267a2:	429e      	cmp	r6, r3
 80267a4:	ec45 4b11 	vmov	d1, r4, r5
 80267a8:	dce1      	bgt.n	802676e <scalbn+0x6e>
 80267aa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80267d8 <scalbn+0xd8>
 80267ae:	f000 f821 	bl	80267f4 <copysign>
 80267b2:	a309      	add	r3, pc, #36	; (adr r3, 80267d8 <scalbn+0xd8>)
 80267b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80267b8:	e7e0      	b.n	802677c <scalbn+0x7c>
 80267ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80267be:	3236      	adds	r2, #54	; 0x36
 80267c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80267c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80267c8:	4620      	mov	r0, r4
 80267ca:	4629      	mov	r1, r5
 80267cc:	2200      	movs	r2, #0
 80267ce:	4b08      	ldr	r3, [pc, #32]	; (80267f0 <scalbn+0xf0>)
 80267d0:	e7b2      	b.n	8026738 <scalbn+0x38>
 80267d2:	bf00      	nop
 80267d4:	f3af 8000 	nop.w
 80267d8:	c2f8f359 	.word	0xc2f8f359
 80267dc:	01a56e1f 	.word	0x01a56e1f
 80267e0:	8800759c 	.word	0x8800759c
 80267e4:	7e37e43c 	.word	0x7e37e43c
 80267e8:	43500000 	.word	0x43500000
 80267ec:	ffff3cb0 	.word	0xffff3cb0
 80267f0:	3c900000 	.word	0x3c900000

080267f4 <copysign>:
 80267f4:	ec53 2b10 	vmov	r2, r3, d0
 80267f8:	ee11 0a90 	vmov	r0, s3
 80267fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8026800:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8026804:	ea41 0300 	orr.w	r3, r1, r0
 8026808:	ec43 2b10 	vmov	d0, r2, r3
 802680c:	4770      	bx	lr
	...

08026810 <_init>:
 8026810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026812:	bf00      	nop
 8026814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026816:	bc08      	pop	{r3}
 8026818:	469e      	mov	lr, r3
 802681a:	4770      	bx	lr

0802681c <_fini>:
 802681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802681e:	bf00      	nop
 8026820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026822:	bc08      	pop	{r3}
 8026824:	469e      	mov	lr, r3
 8026826:	4770      	bx	lr
