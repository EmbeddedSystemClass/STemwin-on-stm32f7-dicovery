
32F746Discovery_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e358  08027098  08027098  00037098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080353f0  080353f0  000453f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080353f8  080353f8  000453f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080353fc  080353fc  000453fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000000  08035400  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00046724  20000160  08035560  00050160  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  20046884  08035560  00056884  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00050160  2**0
                  CONTENTS, READONLY
 10 .debug_line   000229d8  00000000  00000000  00050190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000a48e8  00000000  00000000  00072b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000e06f  00000000  00000000  00117450  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003300  00000000  00000000  001254c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003fd8  00000000  00000000  001287c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002725c  00000000  00000000  0012c798  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00013775  00000000  00000000  001539f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00167169  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a7dc  00000000  00000000  00167254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08027080 	.word	0x08027080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	08027080 	.word	0x08027080

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	bf14      	ite	ne
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e720      	b.n	8000364 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aedc 	beq.w	8000312 <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6c1      	b.n	8000312 <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_ldivmod>:
 8000be0:	b97b      	cbnz	r3, 8000c02 <__aeabi_ldivmod+0x22>
 8000be2:	b972      	cbnz	r2, 8000c02 <__aeabi_ldivmod+0x22>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bfbe      	ittt	lt
 8000be8:	2000      	movlt	r0, #0
 8000bea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bee:	e006      	blt.n	8000bfe <__aeabi_ldivmod+0x1e>
 8000bf0:	bf08      	it	eq
 8000bf2:	2800      	cmpeq	r0, #0
 8000bf4:	bf1c      	itt	ne
 8000bf6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfe:	f000 b9c5 	b.w	8000f8c <__aeabi_idiv0>
 8000c02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	db09      	blt.n	8000c22 <__aeabi_ldivmod+0x42>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db1a      	blt.n	8000c48 <__aeabi_ldivmod+0x68>
 8000c12:	f000 f84d 	bl	8000cb0 <__udivmoddi4>
 8000c16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c1e:	b004      	add	sp, #16
 8000c20:	4770      	bx	lr
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db1b      	blt.n	8000c64 <__aeabi_ldivmod+0x84>
 8000c2c:	f000 f840 	bl	8000cb0 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	f000 f82f 	bl	8000cb0 <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4240      	negs	r0, r0
 8000c5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f821 	bl	8000cb0 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f96:	e003      	b.n	8000fa0 <LoopCopyDataInit>

08000f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f9e:	3104      	adds	r1, #4

08000fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa8:	d3f6      	bcc.n	8000f98 <CopyDataInit>
  ldr  r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fac:	e002      	b.n	8000fb4 <LoopFillZerobss>

08000fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb0:	f842 3b04 	str.w	r3, [r2], #4

08000fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb8:	d3f9      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fba:	f004 f9cf 	bl	800535c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f024 f9ab 	bl	8025318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f000 fd8f 	bl	8001ae4 <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000fcc:	08035400 	.word	0x08035400
  ldr  r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd4:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 8000fd8:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 8000fdc:	20046884 	.word	0x20046884

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>

08000fe2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe2:	b570      	push	{r4, r5, r6, lr}
 8000fe4:	460e      	mov	r6, r1
 8000fe6:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	460c      	mov	r4, r1
 8000fea:	1ba3      	subs	r3, r4, r6
 8000fec:	429d      	cmp	r5, r3
 8000fee:	dc01      	bgt.n	8000ff4 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000ff4:	f000 f9d0 	bl	8001398 <__io_getchar>
 8000ff8:	f804 0b01 	strb.w	r0, [r4], #1
 8000ffc:	e7f5      	b.n	8000fea <_read+0x8>

08000ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffe:	b570      	push	{r4, r5, r6, lr}
 8001000:	460e      	mov	r6, r1
 8001002:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	460c      	mov	r4, r1
 8001006:	1ba3      	subs	r3, r4, r6
 8001008:	429d      	cmp	r5, r3
 800100a:	dc01      	bgt.n	8001010 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800100c:	4628      	mov	r0, r5
 800100e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001010:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001014:	f000 f9b0 	bl	8001378 <__io_putchar>
 8001018:	e7f5      	b.n	8001006 <_write+0x8>
	...

0800101c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800101c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_sbrk+0x2c>)
{
 8001020:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001022:	6819      	ldr	r1, [r3, #0]
 8001024:	b909      	cbnz	r1, 800102a <_sbrk+0xe>
		heap_end = &end;
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <_sbrk+0x30>)
 8001028:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800102a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800102c:	4669      	mov	r1, sp
 800102e:	4402      	add	r2, r0
 8001030:	428a      	cmp	r2, r1
 8001032:	d906      	bls.n	8001042 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001034:	f024 f96a 	bl	802530c <__errno>
 8001038:	230c      	movs	r3, #12
 800103a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001042:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop
 8001048:	2000052c 	.word	0x2000052c
 800104c:	20046884 	.word	0x20046884

08001050 <_close>:

int _close(int file)
{
	return -1;
}
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	4770      	bx	lr

08001056 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800105a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800105c:	604b      	str	r3, [r1, #4]
}
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001060:	2001      	movs	r0, #1
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001064:	2000      	movs	r0, #0
 8001066:	4770      	bx	lr

08001068 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	2210      	movs	r2, #16
 800106c:	2100      	movs	r1, #0
 800106e:	4668      	mov	r0, sp

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001070:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001074:	f024 f9b8 	bl	80253e8 <memset>
  hadc3.Instance = ADC3;
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_ADC3_Init+0x5c>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_ADC3_Init+0x60>)
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_ADC3_Init+0x64>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107e:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	2300      	movs	r3, #0
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 8001084:	2401      	movs	r4, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	6282      	str	r2, [r0, #40]	; 0x28
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001088:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800108a:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800108c:	6183      	str	r3, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800108e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001094:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001096:	61c4      	str	r4, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001098:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109c:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109e:	f004 f9bd 	bl	800541c <HAL_ADC_Init>
 80010a2:	b108      	cbz	r0, 80010a8 <MX_ADC3_Init+0x40>
  {
    Error_Handler();
 80010a4:	f000 fd80 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a8:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010aa:	4669      	mov	r1, sp
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC3_Init+0x5c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b2:	2300      	movs	r3, #0
 80010b4:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b6:	f004 faeb 	bl	8005690 <HAL_ADC_ConfigChannel>
 80010ba:	b108      	cbz	r0, 80010c0 <MX_ADC3_Init+0x58>
  {
    Error_Handler();
 80010bc:	f000 fd74 	bl	8001ba8 <Error_Handler>
  }

}
 80010c0:	b004      	add	sp, #16
 80010c2:	bd10      	pop	{r4, pc}
 80010c4:	200453d8 	.word	0x200453d8
 80010c8:	40012200 	.word	0x40012200
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	2214      	movs	r2, #20
 80010d8:	2100      	movs	r1, #0
 80010da:	a803      	add	r0, sp, #12
 80010dc:	f024 f984 	bl	80253e8 <memset>
  if(adcHandle->Instance==ADC3)
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0x7c>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d12e      	bne.n	8001146 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010e8:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ee:	a903      	add	r1, sp, #12
 80010f0:	4817      	ldr	r0, [pc, #92]	; (8001150 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
 80010fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010fc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001106:	f042 0220 	orr.w	r2, r2, #32
 800110a:	631a      	str	r2, [r3, #48]	; 0x30
 800110c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110e:	f002 0220 	and.w	r2, r2, #32
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800112a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800112e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001130:	f004 fefa 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001134:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001136:	a903      	add	r1, sp, #12
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800113a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001142:	f004 fef1 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001146:	b008      	add	sp, #32
 8001148:	bd10      	pop	{r4, pc}
 800114a:	bf00      	nop
 800114c:	40012200 	.word	0x40012200
 8001150:	40021400 	.word	0x40021400
 8001154:	40020000 	.word	0x40020000

08001158 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001158:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <MX_CRC_Init+0x28>)
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_CRC_Init+0x2c>)
 800115e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001164:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001166:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001168:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800116a:	2301      	movs	r3, #1
 800116c:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800116e:	f004 fbe1 	bl	8005934 <HAL_CRC_Init>
 8001172:	b118      	cbz	r0, 800117c <MX_CRC_Init+0x24>
  {
    Error_Handler();
  }

}
 8001174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001178:	f000 bd16 	b.w	8001ba8 <Error_Handler>
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	20045420 	.word	0x20045420
 8001184:	40023000 	.word	0x40023000

08001188 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001188:	6802      	ldr	r2, [r0, #0]
{
 800118a:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_CRC_MspInit+0x28>)
 800118e:	429a      	cmp	r2, r3
 8001190:	d10b      	bne.n	80011aa <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001192:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800119a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011aa:	b002      	add	sp, #8
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023000 	.word	0x40023000

080011b4 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011b4:	b508      	push	{r3, lr}

  hdcmi.Instance = DCMI;
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <MX_DCMI_Init+0x30>)
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_DCMI_Init+0x34>)
 80011ba:	6003      	str	r3, [r0, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011bc:	2300      	movs	r3, #0
 80011be:	6043      	str	r3, [r0, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011c0:	6083      	str	r3, [r0, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80011c2:	60c3      	str	r3, [r0, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80011c4:	6103      	str	r3, [r0, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80011c6:	6143      	str	r3, [r0, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80011c8:	6183      	str	r3, [r0, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80011ca:	6203      	str	r3, [r0, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80011cc:	6243      	str	r3, [r0, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80011ce:	6283      	str	r3, [r0, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80011d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80011d2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80011d4:	f004 fc4c 	bl	8005a70 <HAL_DCMI_Init>
 80011d8:	b118      	cbz	r0, 80011e2 <MX_DCMI_Init+0x2e>
  {
    Error_Handler();
  }

}
 80011da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011de:	f000 bce3 	b.w	8001ba8 <Error_Handler>
 80011e2:	bd08      	pop	{r3, pc}
 80011e4:	20045444 	.word	0x20045444
 80011e8:	50050000 	.word	0x50050000

080011ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	2214      	movs	r2, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	a807      	add	r0, sp, #28
 80011f8:	f024 f8f6 	bl	80253e8 <memset>
  if(dcmiHandle->Instance==DCMI)
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_DCMI_MspInit+0xf4>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d16b      	bne.n	80012dc <HAL_DCMI_MspInit+0xf0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_DCMI_MspInit+0xf8>)
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001208:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120a:	a907      	add	r1, sp, #28
    __HAL_RCC_DCMI_CLK_ENABLE();
 800120c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001210:	4835      	ldr	r0, [pc, #212]	; (80012e8 <HAL_DCMI_MspInit+0xfc>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	f002 0201 	and.w	r2, r2, #1
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	f042 0210 	orr.w	r2, r2, #16
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
 800122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122c:	f002 0210 	and.w	r2, r2, #16
 8001230:	9202      	str	r2, [sp, #8]
 8001232:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001236:	f042 0208 	orr.w	r2, r2, #8
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
 800123c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123e:	f002 0208 	and.w	r2, r2, #8
 8001242:	9203      	str	r2, [sp, #12]
 8001244:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
 800124e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001250:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001254:	9204      	str	r2, [sp, #16]
 8001256:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
 8001260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001262:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001266:	9205      	str	r2, [sp, #20]
 8001268:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	9306      	str	r3, [sp, #24]
 800127c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800127e:	2360      	movs	r3, #96	; 0x60
 8001280:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001282:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f004 fe50 	bl	8005f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001288:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800128a:	a907      	add	r1, sp, #28
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <HAL_DCMI_MspInit+0x100>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800128e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001296:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001298:	f004 fe46 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012a0:	a907      	add	r1, sp, #28
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <HAL_DCMI_MspInit+0x104>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80012a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012ac:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f004 fe3b 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012b2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012b6:	a907      	add	r1, sp, #28
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <HAL_DCMI_MspInit+0x108>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80012ba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c4:	f004 fe30 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012c8:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	a907      	add	r1, sp, #28
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <HAL_DCMI_MspInit+0x10c>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012d6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f004 fe26 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80012dc:	b00c      	add	sp, #48	; 0x30
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	50050000 	.word	0x50050000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40020000 	.word	0x40020000

080012fc <dmc_itoa>:

/**
 * C version 0.4 char* style "itoa":
 */
char * dmc_itoa(int64_t value, char* result, int base)
{
 80012fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001300:	461e      	mov	r6, r3
	// check that the base if valid
	if (base < 2 || base > 36)
 8001302:	3b02      	subs	r3, #2
{
 8001304:	4614      	mov	r4, r2
	if (base < 2 || base > 36)
 8001306:	2b22      	cmp	r3, #34	; 0x22
 8001308:	d904      	bls.n	8001314 <dmc_itoa+0x18>
	{
		*result = '\0';
 800130a:	2300      	movs	r3, #0
 800130c:	7013      	strb	r3, [r2, #0]
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
 800130e:	4620      	mov	r0, r4
 8001310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001314:	4615      	mov	r5, r2
		value /= base;
 8001316:	46b0      	mov	r8, r6
 8001318:	ea4f 79e6 	mov.w	r9, r6, asr #31
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 800131c:	f8df a054 	ldr.w	sl, [pc, #84]	; 8001374 <dmc_itoa+0x78>
		tmp_value = value;
 8001320:	4607      	mov	r7, r0
		value /= base;
 8001322:	4642      	mov	r2, r8
 8001324:	464b      	mov	r3, r9
 8001326:	f7ff fc5b 	bl	8000be0 <__aeabi_ldivmod>
				+ (tmp_value - value * base)];
 800132a:	fba6 2300 	umull	r2, r3, r6, r0
 800132e:	eb0a 0307 	add.w	r3, sl, r7
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35
 8001332:	46ae      	mov	lr, r5
 8001334:	1a9a      	subs	r2, r3, r2
 8001336:	f892 3023 	ldrb.w	r3, [r2, #35]	; 0x23
 800133a:	f80e 3b01 	strb.w	r3, [lr], #1
	while (value);
 800133e:	ea50 0301 	orrs.w	r3, r0, r1
 8001342:	d115      	bne.n	8001370 <dmc_itoa+0x74>
	if (tmp_value < 0)
 8001344:	2f00      	cmp	r7, #0
		*ptr++ = '-';
 8001346:	bfbe      	ittt	lt
 8001348:	232d      	movlt	r3, #45	; 0x2d
 800134a:	f88e 3000 	strblt.w	r3, [lr]
 800134e:	f105 0e02 	addlt.w	lr, r5, #2
	*ptr-- = '\0';
 8001352:	2300      	movs	r3, #0
 8001354:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001358:	f88e 3000 	strb.w	r3, [lr]
 800135c:	4623      	mov	r3, r4
	while (ptr1 < ptr)
 800135e:	429a      	cmp	r2, r3
 8001360:	d9d5      	bls.n	800130e <dmc_itoa+0x12>
		tmp_char = *ptr;
 8001362:	7811      	ldrb	r1, [r2, #0]
		*ptr-- = *ptr1;
 8001364:	7818      	ldrb	r0, [r3, #0]
 8001366:	f802 0901 	strb.w	r0, [r2], #-1
		*ptr1++ = tmp_char;
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f6      	b.n	800135e <dmc_itoa+0x62>
	while (value);
 8001370:	4675      	mov	r5, lr
 8001372:	e7d5      	b.n	8001320 <dmc_itoa+0x24>
 8001374:	080348b0 	.word	0x080348b0

08001378 <__io_putchar>:
	VprintUart3(fmt, argp);
	va_end(argp);
}

int __io_putchar(int ch)
{
 8001378:	b513      	push	{r0, r1, r4, lr}
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800137a:	a902      	add	r1, sp, #8
{
 800137c:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800137e:	230a      	movs	r3, #10
 8001380:	2201      	movs	r2, #1
	c[0] = ch & 0x00FF;
 8001382:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <__io_putchar+0x1c>)
 8001388:	f00a ffdb 	bl	800c342 <HAL_UART_Transmit>
	return ch;
}
 800138c:	4620      	mov	r0, r4
 800138e:	b002      	add	sp, #8
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	20045998 	.word	0x20045998

08001398 <__io_getchar>:

int __io_getchar(void)
{
 8001398:	b513      	push	{r0, r1, r4, lr}
	HAL_StatusTypeDef Status = HAL_BUSY;
	uint8_t ch;
	// Remember RS485 TX_Enable
	while (Status != HAL_OK)
	{
		Status = HAL_UART_Receive(&huart1, &ch, 1, 10);
 800139a:	4c07      	ldr	r4, [pc, #28]	; (80013b8 <__io_getchar+0x20>)
 800139c:	230a      	movs	r3, #10
 800139e:	2201      	movs	r2, #1
 80013a0:	f10d 0107 	add.w	r1, sp, #7
 80013a4:	4620      	mov	r0, r4
 80013a6:	f00b f823 	bl	800c3f0 <HAL_UART_Receive>
	while (Status != HAL_OK)
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d1f6      	bne.n	800139c <__io_getchar+0x4>
	}
	return (ch);
}
 80013ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013b2:	b002      	add	sp, #8
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	bf00      	nop
 80013b8:	20045998 	.word	0x20045998

080013bc <dmc_putc>:
	__io_putchar(v & 0xff);
}

void dmc_putc(char c)
{
	__io_putchar(c);
 80013bc:	f7ff bfdc 	b.w	8001378 <__io_putchar>

080013c0 <dmc_putcr>:
	__io_putchar('\n');
}

void dmc_putcr(void)
{
	__io_putchar('\n');
 80013c0:	200a      	movs	r0, #10
 80013c2:	f7ff bfd9 	b.w	8001378 <__io_putchar>

080013c6 <dmc_puts>:
}

void dmc_puts(char* str)
{
 80013c6:	b510      	push	{r4, lr}
 80013c8:	1e44      	subs	r4, r0, #1
	while (*str)
 80013ca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80013ce:	b900      	cbnz	r0, 80013d2 <dmc_puts+0xc>
	{
		__io_putchar(*str++);
	}
}
 80013d0:	bd10      	pop	{r4, pc}
		__io_putchar(*str++);
 80013d2:	f7ff ffd1 	bl	8001378 <__io_putchar>
 80013d6:	e7f8      	b.n	80013ca <dmc_puts+0x4>

080013d8 <dmc_putint>:
{
 80013d8:	b500      	push	{lr}
 80013da:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 80013dc:	230a      	movs	r3, #10
 80013de:	17c1      	asrs	r1, r0, #31
 80013e0:	466a      	mov	r2, sp
 80013e2:	f7ff ff8b 	bl	80012fc <dmc_itoa>
	dmc_puts(myStr);
 80013e6:	4668      	mov	r0, sp
 80013e8:	f7ff ffed 	bl	80013c6 <dmc_puts>
}
 80013ec:	b009      	add	sp, #36	; 0x24
 80013ee:	f85d fb04 	ldr.w	pc, [sp], #4

080013f2 <dmc_puthex8>:
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	b088      	sub	sp, #32
	dmc_itoa(value, myStr, 16);
 80013f6:	2310      	movs	r3, #16
 80013f8:	2100      	movs	r1, #0
 80013fa:	466a      	mov	r2, sp
 80013fc:	f7ff ff7e 	bl	80012fc <dmc_itoa>
	uint8_t len = strlen(myStr);
 8001400:	4668      	mov	r0, sp
 8001402:	f7fe ff05 	bl	8000210 <strlen>
 8001406:	b2c4      	uxtb	r4, r0
	for (; len < 8; len++)
 8001408:	2c07      	cmp	r4, #7
 800140a:	d904      	bls.n	8001416 <dmc_puthex8+0x24>
	dmc_puts(myStr);
 800140c:	4668      	mov	r0, sp
 800140e:	f7ff ffda 	bl	80013c6 <dmc_puts>
}
 8001412:	b008      	add	sp, #32
 8001414:	bd10      	pop	{r4, pc}
	for (; len < 8; len++)
 8001416:	3401      	adds	r4, #1
		__io_putchar('0');
 8001418:	2030      	movs	r0, #48	; 0x30
 800141a:	f7ff ffad 	bl	8001378 <__io_putchar>
	for (; len < 8; len++)
 800141e:	b2e4      	uxtb	r4, r4
 8001420:	e7f2      	b.n	8001408 <dmc_puthex8+0x16>

08001422 <dmc_puthex8cr>:
{
 8001422:	b508      	push	{r3, lr}
	dmc_puthex8(value);
 8001424:	f7ff ffe5 	bl	80013f2 <dmc_puthex8>
	__io_putchar('\n');
 8001428:	200a      	movs	r0, #10
}
 800142a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 800142e:	f7ff bfa3 	b.w	8001378 <__io_putchar>

08001432 <dmc_putscr>:
  }
  __io_putchar('\n');
}

void dmc_putscr(char* str)
{
 8001432:	b508      	push	{r3, lr}
	dmc_puts(str);
 8001434:	f7ff ffc7 	bl	80013c6 <dmc_puts>
	__io_putchar('\n');
 8001438:	200a      	movs	r0, #10
}
 800143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_putchar('\n');
 800143e:	f7ff bf9b 	b.w	8001378 <__io_putchar>

08001442 <dmc_putintcr>:
{
 8001442:	b500      	push	{lr}
 8001444:	b089      	sub	sp, #36	; 0x24
	dmc_itoa(value, myStr, 10);
 8001446:	230a      	movs	r3, #10
 8001448:	17c1      	asrs	r1, r0, #31
 800144a:	466a      	mov	r2, sp
 800144c:	f7ff ff56 	bl	80012fc <dmc_itoa>
	dmc_putscr(myStr);
 8001450:	4668      	mov	r0, sp
 8001452:	f7ff ffee 	bl	8001432 <dmc_putscr>
}
 8001456:	b009      	add	sp, #36	; 0x24
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4

0800145c <rnd>:

static unsigned long m_z=12434,m_w=33254;

unsigned long rnd()
{
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <rnd+0x2c>)
 800145e:	f249 0169 	movw	r1, #36969	; 0x9069
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	b298      	uxth	r0, r3
 8001466:	0c1b      	lsrs	r3, r3, #16
 8001468:	fb01 3000 	mla	r0, r1, r0, r3
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <rnd+0x30>)
{
 800146e:	b510      	push	{r4, lr}
    m_z = 36969 * (m_z & 65535) + (m_z >>16);
 8001470:	6010      	str	r0, [r2, #0]
    m_w = 18000 * (m_w & 65535) + (m_w >>16);
 8001472:	f244 6450 	movw	r4, #18000	; 0x4650
 8001476:	680a      	ldr	r2, [r1, #0]
 8001478:	b293      	uxth	r3, r2
 800147a:	0c12      	lsrs	r2, r2, #16
 800147c:	fb04 2303 	mla	r3, r4, r3, r2
 8001480:	600b      	str	r3, [r1, #0]
    return ((m_z <<16) + m_w);
}
 8001482:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8001486:	bd10      	pop	{r4, pc}
 8001488:	2000009c 	.word	0x2000009c
 800148c:	20000098 	.word	0x20000098

08001490 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001490:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8001492:	f001 f9ed 	bl	8002870 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001496:	f003 fae7 	bl	8004a68 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 800149a:	f001 fc2c 	bl	8002cf6 <GRAPHICS_MainTask>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f00c fa11 	bl	800d8c6 <osDelay>
 80014a4:	e7fb      	b.n	800149e <StartDefaultTask+0xe>

080014a6 <vApplicationIdleHook>:
 80014a6:	4770      	bx	lr

080014a8 <vApplicationStackOverflowHook>:
{
 80014a8:	4770      	bx	lr

080014aa <vApplicationMallocFailedHook>:
{
 80014aa:	4770      	bx	lr

080014ac <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80014ac:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014ae:	4d07      	ldr	r5, [pc, #28]	; (80014cc <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 80014b0:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b4:	ac01      	add	r4, sp, #4
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014ba:	2100      	movs	r1, #0
 80014bc:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80014be:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014c0:	f00c f9e7 	bl	800d892 <osThreadCreate>
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <MX_FREERTOS_Init+0x24>)
 80014c6:	6018      	str	r0, [r3, #0]
}
 80014c8:	b007      	add	sp, #28
 80014ca:	bd30      	pop	{r4, r5, pc}
 80014cc:	08027098 	.word	0x08027098
 80014d0:	20045494 	.word	0x20045494

080014d4 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 80014d4:	4770      	bx	lr
	...

080014d8 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	2214      	movs	r2, #20
 80014e0:	2100      	movs	r1, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014e2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 80017a4 <MX_GPIO_Init+0x2cc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	a80d      	add	r0, sp, #52	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80014e8:	4fa4      	ldr	r7, [pc, #656]	; (800177c <MX_GPIO_Init+0x2a4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f023 ff7d 	bl	80253e8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	4ba4      	ldr	r3, [pc, #656]	; (8001780 <MX_GPIO_Init+0x2a8>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014f0:	4658      	mov	r0, fp
 80014f2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80014f8:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 80017a8 <MX_GPIO_Init+0x2d0>
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2503      	movs	r5, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001506:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
 800150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001510:	f002 0210 	and.w	r2, r2, #16
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152c:	f042 0202 	orr.w	r2, r2, #2
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f002 0202 	and.w	r2, r2, #2
 8001538:	9204      	str	r2, [sp, #16]
 800153a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
 8001544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001546:	f002 0208 	and.w	r2, r2, #8
 800154a:	9205      	str	r2, [sp, #20]
 800154c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f042 0204 	orr.w	r2, r2, #4
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f002 0204 	and.w	r2, r2, #4
 800155c:	9206      	str	r2, [sp, #24]
 800155e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156a:	f002 0201 	and.w	r2, r2, #1
 800156e:	9207      	str	r2, [sp, #28]
 8001570:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001580:	9208      	str	r2, [sp, #32]
 8001582:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001592:	9209      	str	r2, [sp, #36]	; 0x24
 8001594:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80015a4:	920a      	str	r2, [sp, #40]	; 0x28
 80015a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015aa:	f042 0220 	orr.w	r2, r2, #32
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f002 0220 	and.w	r2, r2, #32
 80015b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80015b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	930c      	str	r3, [sp, #48]	; 0x30
 80015cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015ce:	f004 fedb 	bl	8006388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80015d2:	4638      	mov	r0, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	210c      	movs	r1, #12
 80015d8:	f004 fed6 	bl	8006388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80015dc:	4b69      	ldr	r3, [pc, #420]	; (8001784 <MX_GPIO_Init+0x2ac>)
 80015de:	2201      	movs	r2, #1
 80015e0:	2108      	movs	r1, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f004 fecf 	bl	8006388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80015ea:	4638      	mov	r0, r7
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f2:	f004 fec9 	bl	8006388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80015f6:	4650      	mov	r0, sl
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fe:	f004 fec3 	bl	8006388 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	21c8      	movs	r1, #200	; 0xc8
 8001606:	4860      	ldr	r0, [pc, #384]	; (8001788 <MX_GPIO_Init+0x2b0>)
 8001608:	f004 febe 	bl	8006388 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800160c:	2308      	movs	r3, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800160e:	a90d      	add	r1, sp, #52	; 0x34
 8001610:	485e      	ldr	r0, [pc, #376]	; (800178c <MX_GPIO_Init+0x2b4>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001612:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001618:	f004 fc86 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800161c:	f643 4223 	movw	r2, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	a90d      	add	r1, sp, #52	; 0x34
 8001622:	485b      	ldr	r0, [pc, #364]	; (8001790 <MX_GPIO_Init+0x2b8>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001624:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800162e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f004 fc79 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800163a:	a90d      	add	r1, sp, #52	; 0x34
 800163c:	4855      	ldr	r0, [pc, #340]	; (8001794 <MX_GPIO_Init+0x2bc>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800163e:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001640:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001644:	f004 fc70 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <MX_GPIO_Init+0x2c0>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800164a:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800164c:	a90d      	add	r1, sp, #52	; 0x34
 800164e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001650:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001652:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001656:	f004 fc67 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800165a:	2220      	movs	r2, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800165c:	a90d      	add	r1, sp, #52	; 0x34
 800165e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001662:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001668:	f004 fc5e 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800166c:	f241 020c 	movw	r2, #4108	; 0x100c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001670:	a90d      	add	r1, sp, #52	; 0x34
 8001672:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001676:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800167c:	f004 fc54 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001680:	4a46      	ldr	r2, [pc, #280]	; (800179c <MX_GPIO_Init+0x2c4>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001686:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800168a:	4610      	mov	r0, r2
 800168c:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800168e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001692:	f004 fc49 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001696:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001698:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800169c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800169e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016a2:	4618      	mov	r0, r3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f004 fc3f 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016aa:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ac:	a90d      	add	r1, sp, #52	; 0x34
 80016ae:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016b0:	930d      	str	r3, [sp, #52]	; 0x34
 80016b2:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f004 fc36 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016bc:	f248 0104 	movw	r1, #32772	; 0x8004
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c0:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016c4:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c6:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ca:	f004 fc2d 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016d2:	a90d      	add	r1, sp, #52	; 0x34
 80016d4:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016d8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016de:	f004 fc23 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016e6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e8:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ea:	910d      	str	r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016ec:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016f0:	f004 fc1a 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80016f8:	a90d      	add	r1, sp, #52	; 0x34
 80016fa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016fe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_GPIO_Init+0x2c0>)
 8001702:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001704:	f004 fc10 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001708:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800170a:	a90d      	add	r1, sp, #52	; 0x34
 800170c:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001712:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001718:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800171c:	f004 fc04 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001720:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001722:	a90d      	add	r1, sp, #52	; 0x34
 8001724:	4818      	ldr	r0, [pc, #96]	; (8001788 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001726:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172e:	f004 fbfb 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001734:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	4610      	mov	r0, r2
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800173e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001744:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f004 fbee 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800174c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800174e:	a90d      	add	r1, sp, #52	; 0x34
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_GPIO_Init+0x2b0>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001752:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001758:	f004 fbe6 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800175c:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	a90d      	add	r1, sp, #52	; 0x34
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001762:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800176c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f004 fbda 	bl	8005f28 <HAL_GPIO_Init>

}
 8001774:	b013      	add	sp, #76	; 0x4c
 8001776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000
 8001780:	40023800 	.word	0x40023800
 8001784:	40022800 	.word	0x40022800
 8001788:	40021800 	.word	0x40021800
 800178c:	40021000 	.word	0x40021000
 8001790:	40020400 	.word	0x40020400
 8001794:	40022400 	.word	0x40022400
 8001798:	10120000 	.word	0x10120000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021c00 	.word	0x40021c00

080017ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017ac:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x00C0EAFF;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b0:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C1_Init+0x50>)
 80017b4:	4912      	ldr	r1, [pc, #72]	; (8001800 <MX_I2C1_Init+0x54>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017b8:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017c2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ca:	f005 fbc9 	bl	8006f60 <HAL_I2C_Init>
 80017ce:	b108      	cbz	r0, 80017d4 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 80017d0:	f000 f9ea 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_I2C1_Init+0x4c>)
 80017d8:	f005 fe2e 	bl	8007438 <HAL_I2CEx_ConfigAnalogFilter>
 80017dc:	b108      	cbz	r0, 80017e2 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 80017de:	f000 f9e3 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C1_Init+0x4c>)
 80017e6:	f005 fe6d 	bl	80074c4 <HAL_I2CEx_ConfigDigitalFilter>
 80017ea:	b118      	cbz	r0, 80017f4 <MX_I2C1_Init+0x48>
  {
    Error_Handler();
  }

}
 80017ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017f0:	f000 b9da 	b.w	8001ba8 <Error_Handler>
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop
 80017f8:	200454e4 	.word	0x200454e4
 80017fc:	00c0eaff 	.word	0x00c0eaff
 8001800:	40005400 	.word	0x40005400

08001804 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001804:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8001806:	4812      	ldr	r0, [pc, #72]	; (8001850 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x00C0EAFF;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	2201      	movs	r2, #1
  hi2c3.Init.Timing = 0x00C0EAFF;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_I2C3_Init+0x50>)
 800180c:	4912      	ldr	r1, [pc, #72]	; (8001858 <MX_I2C3_Init+0x54>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180e:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001810:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	6083      	str	r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800181a:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800181c:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181e:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001820:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001822:	f005 fb9d 	bl	8006f60 <HAL_I2C_Init>
 8001826:	b108      	cbz	r0, 800182c <MX_I2C3_Init+0x28>
  {
    Error_Handler();
 8001828:	f000 f9be 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <MX_I2C3_Init+0x4c>)
 8001830:	f005 fe02 	bl	8007438 <HAL_I2CEx_ConfigAnalogFilter>
 8001834:	b108      	cbz	r0, 800183a <MX_I2C3_Init+0x36>
  {
    Error_Handler();
 8001836:	f000 f9b7 	bl	8001ba8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C3_Init+0x4c>)
 800183e:	f005 fe41 	bl	80074c4 <HAL_I2CEx_ConfigDigitalFilter>
 8001842:	b118      	cbz	r0, 800184c <MX_I2C3_Init+0x48>
  {
    Error_Handler();
  }

}
 8001844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001848:	f000 b9ae 	b.w	8001ba8 <Error_Handler>
 800184c:	bd08      	pop	{r3, pc}
 800184e:	bf00      	nop
 8001850:	20045498 	.word	0x20045498
 8001854:	00c0eaff 	.word	0x00c0eaff
 8001858:	40005c00 	.word	0x40005c00

0800185c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	2214      	movs	r2, #20
{
 8001860:	b08a      	sub	sp, #40	; 0x28
 8001862:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	2100      	movs	r1, #0
 8001866:	eb0d 0002 	add.w	r0, sp, r2
 800186a:	f023 fdbd 	bl	80253e8 <memset>
  if(i2cHandle->Instance==I2C1)
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_I2C_MspInit+0xac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d121      	bne.n	80018ba <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4c25      	ldr	r4, [pc, #148]	; (800190c <HAL_I2C_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	a905      	add	r1, sp, #20
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	6323      	str	r3, [r4, #48]	; 0x30
 8001884:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800188e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001892:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189c:	2304      	movs	r3, #4
 800189e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f004 fb42 	bl	8005f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018aa:	6423      	str	r3, [r4, #64]	; 0x40
 80018ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80018b6:	b00a      	add	sp, #40	; 0x28
 80018b8:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C3)
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_I2C_MspInit+0xb8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d1fa      	bne.n	80018b6 <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c0:	4c12      	ldr	r4, [pc, #72]	; (800190c <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018c2:	a905      	add	r1, sp, #20
 80018c4:	4814      	ldr	r0, [pc, #80]	; (8001918 <HAL_I2C_MspInit+0xbc>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6323      	str	r3, [r4, #48]	; 0x30
 80018ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80018d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ea:	2304      	movs	r3, #4
 80018ec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ee:	f004 fb1b 	bl	8005f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f8:	6423      	str	r3, [r4, #64]	; 0x40
 80018fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	9b04      	ldr	r3, [sp, #16]
}
 8001904:	e7d7      	b.n	80018b6 <HAL_I2C_MspInit+0x5a>
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400
 8001914:	40005c00 	.word	0x40005c00
 8001918:	40021c00 	.word	0x40021c00

0800191c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_I2C_MspDeInit+0x3c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d10a      	bne.n	800193a <HAL_I2C_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001924:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8001928:	f44f 7140 	mov.w	r1, #768	; 0x300
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <HAL_I2C_MspDeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 800192e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001936:	f004 bc4b 	b.w	80061d0 <HAL_GPIO_DeInit>
  else if(i2cHandle->Instance==I2C3)
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_I2C_MspDeInit+0x44>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d109      	bne.n	8001954 <HAL_I2C_MspDeInit+0x38>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001940:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8001944:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001948:	4806      	ldr	r0, [pc, #24]	; (8001964 <HAL_I2C_MspDeInit+0x48>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800194a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800194c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	e7f0      	b.n	8001936 <HAL_I2C_MspDeInit+0x1a>
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40005400 	.word	0x40005400
 800195c:	40020400 	.word	0x40020400
 8001960:	40005c00 	.word	0x40005c00
 8001964:	40021c00 	.word	0x40021c00

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196c:	2230      	movs	r2, #48	; 0x30
 800196e:	2100      	movs	r1, #0
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001970:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001972:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001974:	2601      	movs	r6, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f023 fd37 	bl	80253e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197a:	2214      	movs	r2, #20
 800197c:	2100      	movs	r1, #0
 800197e:	a802      	add	r0, sp, #8
 8001980:	f023 fd32 	bl	80253e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	2100      	movs	r1, #0
 8001986:	2284      	movs	r2, #132	; 0x84
 8001988:	a813      	add	r0, sp, #76	; 0x4c
 800198a:	f023 fd2d 	bl	80253e8 <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2400      	movs	r4, #0
  HAL_PWR_EnableBkUpAccess();
 8001990:	f006 f9ba 	bl	8007d08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <SystemClock_Config+0xe8>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <SystemClock_Config+0xec>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c4:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019c8:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019ce:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019d0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019d6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLN = 400;
 80019d8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80019da:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019de:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f006 faac 	bl	8007f3c <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019e4:	f006 f998 	bl	8007d18 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80019ea:	2106      	movs	r1, #6
 80019ec:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ee:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f4:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fe:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a00:	f006 fcd8 	bl	80083b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a06:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001a08:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8001a0a:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001a0c:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a0e:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001a10:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a12:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a16:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a18:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a1a:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a1c:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a1e:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a20:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a22:	961c      	str	r6, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a24:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a2a:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a2c:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001a32:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a34:	931f      	str	r3, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001a36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a3a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001a3c:	9429      	str	r4, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a3e:	942c      	str	r4, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001a40:	942e      	str	r4, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001a42:	9332      	str	r3, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001a44:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a46:	f006 fdeb 	bl	8008620 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001a4a:	b034      	add	sp, #208	; 0xd0
 8001a4c:	bd70      	pop	{r4, r5, r6, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	01b14868 	.word	0x01b14868

08001a5c <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init()
{
 8001a5c:	b508      	push	{r3, lr}
  BSP_TS_Init(480, 272);
 8001a5e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a62:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001a66:	f003 fb69 	bl	800513c <BSP_TS_Init>

  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <TouchTimer_Init+0x24>)
 8001a6c:	f009 f98e 	bl	800ad8c <HAL_TIM_Base_Init>
 8001a70:	b100      	cbz	r0, 8001a74 <TouchTimer_Init+0x18>
 8001a72:	e7fe      	b.n	8001a72 <TouchTimer_Init+0x16>
  {
    while(1);
  }
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TouchTimer_Init+0x24>)
 8001a76:	f009 f817 	bl	800aaa8 <HAL_TIM_Base_Start_IT>
 8001a7a:	b100      	cbz	r0, 8001a7e <TouchTimer_Init+0x22>
 8001a7c:	e7fe      	b.n	8001a7c <TouchTimer_Init+0x20>
 8001a7e:	bd08      	pop	{r3, pc}
 8001a80:	20045898 	.word	0x20045898

08001a84 <PollTouchScreen2>:
    while(1);
  }
}

void PollTouchScreen2(void)
{
 8001a84:	b500      	push	{lr}
 8001a86:	b08f      	sub	sp, #60	; 0x3c
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8001a88:	a803      	add	r0, sp, #12
 8001a8a:	f003 fbaf 	bl	80051ec <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <PollTouchScreen2+0x5c>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a90:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a94:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8001a96:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8001a9a:	4291      	cmp	r1, r2
 8001a9c:	d01c      	beq.n	8001ad8 <PollTouchScreen2+0x54>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8001a9e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8001aa2:	b121      	cbz	r1, 8001aae <PollTouchScreen2+0x2a>
 8001aa4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8001aa8:	b10a      	cbz	r2, 8001aae <PollTouchScreen2+0x2a>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8001aaa:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8001aac:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8001aae:	2200      	movs	r2, #0
    TS_State.x = prev_state.touchX[0];
 8001ab0:	8858      	ldrh	r0, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8001ab2:	899b      	ldrh	r3, [r3, #12]
    TS_State.Layer = 0;
 8001ab4:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.y = prev_state.touchY[0];
 8001ab8:	9301      	str	r3, [sp, #4]
    TS_State.x = prev_state.touchX[0];
 8001aba:	9000      	str	r0, [sp, #0]

    dmc_putint((uint16_t)TS_State.x);
 8001abc:	f7ff fc8c 	bl	80013d8 <dmc_putint>
    dmc_putc(' ');
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f7ff fc7b 	bl	80013bc <dmc_putc>
    dmc_putint((uint16_t)TS_State.y);
 8001ac6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001aca:	f7ff fc85 	bl	80013d8 <dmc_putint>
    dmc_putcr();
 8001ace:	f7ff fc77 	bl	80013c0 <dmc_putcr>

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f016 fd28 	bl	8018528 <GUI_TOUCH_StoreStateEx>

  }
}
 8001ad8:	b00f      	add	sp, #60	; 0x3c
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop
 8001ae0:	20000530 	.word	0x20000530

08001ae4 <main>:
{
 8001ae4:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aea:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <main+0xa8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001afa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b04:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b0a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001b0e:	f003 fc4b 	bl	80053a8 <HAL_Init>
  SystemClock_Config();
 8001b12:	f7ff ff29 	bl	8001968 <SystemClock_Config>
  MX_GPIO_Init();
 8001b16:	f7ff fcdf 	bl	80014d8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001b1a:	f7ff faa5 	bl	8001068 <MX_ADC3_Init>
  MX_CRC_Init();
 8001b1e:	f7ff fb1b 	bl	8001158 <MX_CRC_Init>
  MX_DCMI_Init();
 8001b22:	f7ff fb47 	bl	80011b4 <MX_DCMI_Init>
  MX_GFXSIMULATOR_Init();
 8001b26:	f7ff fcd5 	bl	80014d4 <MX_GFXSIMULATOR_Init>
  MX_I2C1_Init();
 8001b2a:	f7ff fe3f 	bl	80017ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b2e:	f7ff fe69 	bl	8001804 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8001b32:	f000 f83b 	bl	8001bac <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001b36:	f000 f8c5 	bl	8001cc4 <MX_RTC_Init>
  MX_SAI2_Init();
 8001b3a:	f000 f945 	bl	8001dc8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001b3e:	f000 f9dd 	bl	8001efc <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001b42:	f000 fa37 	bl	8001fb4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001b46:	f000 fa7d 	bl	8002044 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b4a:	f000 fcaf 	bl	80024ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b4e:	f000 fd1d 	bl	800258c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b52:	f000 fb63 	bl	800221c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b56:	f000 fd67 	bl	8002628 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001b5a:	f000 fb91 	bl	8002280 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001b5e:	f000 fdb1 	bl	80026c4 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001b62:	f000 fddb 	bl	800271c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b66:	f000 fdf7 	bl	8002758 <MX_USART6_UART_Init>
  TouchTimer_Init();
 8001b6a:	f7ff ff77 	bl	8001a5c <TouchTimer_Init>
  printf("Hi\n");
 8001b6e:	4808      	ldr	r0, [pc, #32]	; (8001b90 <main+0xac>)
 8001b70:	f023 fd4a 	bl	8025608 <puts>
  GRAPHICS_HW_Init();
 8001b74:	f002 ff56 	bl	8004a24 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8001b78:	f002 ff61 	bl	8004a3e <GRAPHICS_Init>
  MX_FREERTOS_Init();
 8001b7c:	f7ff fc96 	bl	80014ac <MX_FREERTOS_Init>
  osKernelStart();
 8001b80:	f00b fe73 	bl	800d86a <osKernelStart>
    PollTouchScreen2();
 8001b84:	f7ff ff7e 	bl	8001a84 <PollTouchScreen2>
 8001b88:	e7fc      	b.n	8001b84 <main+0xa0>
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	08034904 	.word	0x08034904

08001b94 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001b9c:	f003 bc1a 	b.w	80053d4 <HAL_IncTick>
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40001000 	.word	0x40001000

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	4770      	bx	lr

08001baa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001baa:	4770      	bx	lr

08001bac <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bac:	b508      	push	{r3, lr}

  hqspi.Instance = QUADSPI;
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 255;
 8001bb0:	23ff      	movs	r3, #255	; 0xff
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <MX_QUADSPI_Init+0x34>)
 8001bb4:	e880 000c 	stmia.w	r0, {r2, r3}
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bb8:	2300      	movs	r3, #0
  hqspi.Init.FifoThreshold = 1;
 8001bba:	2201      	movs	r2, #1
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bbc:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
 8001bbe:	6082      	str	r2, [r0, #8]
  hqspi.Init.FlashSize = 1;
 8001bc0:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001bc2:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001bc4:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001bc6:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001bc8:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bca:	f006 f903 	bl	8007dd4 <HAL_QSPI_Init>
 8001bce:	b118      	cbz	r0, 8001bd8 <MX_QUADSPI_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001bd4:	f7ff bfe8 	b.w	8001ba8 <Error_Handler>
 8001bd8:	bd08      	pop	{r3, pc}
 8001bda:	bf00      	nop
 8001bdc:	20045530 	.word	0x20045530
 8001be0:	a0001000 	.word	0xa0001000

08001be4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	2214      	movs	r2, #20
{
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	2100      	movs	r1, #0
 8001bf0:	eb0d 0002 	add.w	r0, sp, r2
 8001bf4:	f023 fbf8 	bl	80253e8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_QSPI_MspInit+0xcc>)
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d153      	bne.n	8001ca8 <HAL_QSPI_MspInit+0xc4>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <HAL_QSPI_MspInit+0xd0>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c06:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c0a:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	a905      	add	r1, sp, #20
 8001c10:	4829      	ldr	r0, [pc, #164]	; (8001cb8 <HAL_QSPI_MspInit+0xd4>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c12:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c1c:	f002 0202 	and.w	r2, r2, #2
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c2e:	f002 0210 	and.w	r2, r2, #16
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c38:	f042 0202 	orr.w	r2, r2, #2
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c40:	f002 0202 	and.w	r2, r2, #2
 8001c44:	9203      	str	r2, [sp, #12]
 8001c46:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c52:	f8cd 8014 	str.w	r8, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	9304      	str	r3, [sp, #16]
 8001c60:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c62:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f004 f960 	bl	8005f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c68:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	a905      	add	r1, sp, #20
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001c6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c70:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c74:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f004 f955 	bl	8005f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	a905      	add	r1, sp, #20
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c82:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c8c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f004 f94b 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	a905      	add	r1, sp, #20
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_QSPI_MspInit+0xdc>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c9a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ca2:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	f004 f940 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001ca8:	b00a      	add	sp, #40	; 0x28
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cae:	bf00      	nop
 8001cb0:	a0001000 	.word	0xa0001000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020c00 	.word	0x40020c00

08001cc4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	b092      	sub	sp, #72	; 0x48
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8001cc8:	2400      	movs	r4, #0
  RTC_TimeTypeDef sTime = {0};
 8001cca:	2218      	movs	r2, #24
 8001ccc:	2100      	movs	r1, #0
 8001cce:	a801      	add	r0, sp, #4
 8001cd0:	f023 fb8a 	bl	80253e8 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8001cd4:	222c      	movs	r2, #44	; 0x2c
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	a807      	add	r0, sp, #28
  RTC_DateTypeDef sDate = {0};
 8001cda:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001cdc:	f023 fb84 	bl	80253e8 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001ce0:	4830      	ldr	r0, [pc, #192]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <MX_RTC_Init+0xe4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ce4:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ce6:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ce8:	6184      	str	r4, [r0, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cea:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 8001cee:	237f      	movs	r3, #127	; 0x7f
 8001cf0:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	60c3      	str	r3, [r0, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf6:	f007 f959 	bl	8008fac <HAL_RTC_Init>
 8001cfa:	b108      	cbz	r0, 8001d00 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001cfc:	f7ff ff54 	bl	8001ba8 <Error_Handler>
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d00:	2201      	movs	r2, #1
 8001d02:	a901      	add	r1, sp, #4
 8001d04:	4827      	ldr	r0, [pc, #156]	; (8001da4 <MX_RTC_Init+0xe0>)
  sTime.Hours = 0x0;
 8001d06:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8001d0a:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8001d0e:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d12:	9405      	str	r4, [sp, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d14:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d16:	f007 f9df 	bl	80090d8 <HAL_RTC_SetTime>
 8001d1a:	b108      	cbz	r0, 8001d20 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff ff44 	bl	8001ba8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d20:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 8001d22:	2400      	movs	r4, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d24:	4669      	mov	r1, sp
 8001d26:	481f      	ldr	r0, [pc, #124]	; (8001da4 <MX_RTC_Init+0xe0>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d28:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d2c:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8001d30:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8001d34:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d38:	f007 fab4 	bl	80092a4 <HAL_RTC_SetDate>
 8001d3c:	b108      	cbz	r0, 8001d42 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001d3e:	f7ff ff33 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001d42:	f88d 401c 	strb.w	r4, [sp, #28]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Minutes = 0x0;
 8001d4a:	f88d 401d 	strb.w	r4, [sp, #29]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d4e:	a907      	add	r1, sp, #28
  sAlarm.AlarmTime.Seconds = 0x0;
 8001d50:	f88d 401e 	strb.w	r4, [sp, #30]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d54:	9408      	str	r4, [sp, #32]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d56:	940b      	str	r4, [sp, #44]	; 0x2c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d58:	940c      	str	r4, [sp, #48]	; 0x30
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d5a:	940d      	str	r4, [sp, #52]	; 0x34
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d5c:	940e      	str	r4, [sp, #56]	; 0x38
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d5e:	940f      	str	r4, [sp, #60]	; 0x3c
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d60:	2401      	movs	r4, #1
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d62:	4810      	ldr	r0, [pc, #64]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001d64:	4622      	mov	r2, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d66:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_A;
 8001d6a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d6c:	f007 fb52 	bl	8009414 <HAL_RTC_SetAlarm>
 8001d70:	b108      	cbz	r0, 8001d76 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8001d72:	f7ff ff19 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_B;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	a907      	add	r1, sp, #28
 8001d7e:	4809      	ldr	r0, [pc, #36]	; (8001da4 <MX_RTC_Init+0xe0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d80:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  sAlarm.Alarm = RTC_ALARM_B;
 8001d84:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d86:	f007 fb45 	bl	8009414 <HAL_RTC_SetAlarm>
 8001d8a:	b108      	cbz	r0, 8001d90 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8001d8c:	f7ff ff0c 	bl	8001ba8 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d90:	2202      	movs	r2, #2
 8001d92:	2100      	movs	r1, #0
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <MX_RTC_Init+0xe0>)
 8001d96:	f007 fca1 	bl	80096dc <HAL_RTCEx_SetTimeStamp>
 8001d9a:	b108      	cbz	r0, 8001da0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8001d9c:	f7ff ff04 	bl	8001ba8 <Error_Handler>
  }

}
 8001da0:	b012      	add	sp, #72	; 0x48
 8001da2:	bd10      	pop	{r4, pc}
 8001da4:	2004557c 	.word	0x2004557c
 8001da8:	40002800 	.word	0x40002800

08001dac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_RTC_MspInit+0x14>)
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d104      	bne.n	8001dbe <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RTC_MspInit+0x18>)
 8001db6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4770      	bx	lr
 8001dc0:	40002800 	.word	0x40002800
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <MX_SAI2_Init>:

/* SAI2 init function */
void MX_SAI2_Init(void)
{

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dc8:	481e      	ldr	r0, [pc, #120]	; (8001e44 <MX_SAI2_Init+0x7c>)
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dca:	2240      	movs	r2, #64	; 0x40
{
 8001dcc:	b508      	push	{r3, lr}
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001dce:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	; (8001e48 <MX_SAI2_Init+0x80>)
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_SAI2_Init+0x84>)
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001dd4:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001dd6:	2208      	movs	r2, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001dd8:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dda:	2300      	movs	r3, #0
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001ddc:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001dde:	2201      	movs	r2, #1
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001de0:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001de2:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001de4:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001de6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001de8:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dea:	6103      	str	r3, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001dec:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dee:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df0:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001df2:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001df4:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001df6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001df8:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001dfa:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001dfc:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dfe:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001e00:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e02:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001e04:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001e06:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001e08:	f007 fcc2 	bl	8009790 <HAL_SAI_Init>
 8001e0c:	b108      	cbz	r0, 8001e12 <MX_SAI2_Init+0x4a>
  {
    Error_Handler();
 8001e0e:	f7ff fecb 	bl	8001ba8 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <MX_SAI2_Init+0x88>)
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e14:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_SAI2_Init+0x8c>)
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001e1a:	61c2      	str	r2, [r0, #28]
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e1c:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e22:	2300      	movs	r3, #0
 8001e24:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e26:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e28:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e2a:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e2c:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e2e:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e30:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e32:	f007 fcad 	bl	8009790 <HAL_SAI_Init>
 8001e36:	b118      	cbz	r0, 8001e40 <MX_SAI2_Init+0x78>
  {
    Error_Handler();
  }

}
 8001e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e3c:	f7ff beb4 	b.w	8001ba8 <Error_Handler>
 8001e40:	bd08      	pop	{r3, pc}
 8001e42:	bf00      	nop
 8001e44:	20045620 	.word	0x20045620
 8001e48:	0002ee00 	.word	0x0002ee00
 8001e4c:	40015c04 	.word	0x40015c04
 8001e50:	2004559c 	.word	0x2004559c
 8001e54:	40015c24 	.word	0x40015c24

08001e58 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_SAI_MspInit+0x8c>)
 8001e5c:	429a      	cmp	r2, r3
{
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8001e64:	d11b      	bne.n	8001e9e <HAL_SAI_MspInit+0x46>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_SAI_MspInit+0x90>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	b94a      	cbnz	r2, 8001e80 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e6c:	491f      	ldr	r1, [pc, #124]	; (8001eec <HAL_SAI_MspInit+0x94>)
 8001e6e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001e74:	6448      	str	r0, [r1, #68]	; 0x44
 8001e76:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001e78:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001e7c:	9101      	str	r1, [sp, #4]
 8001e7e:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 8001e80:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e82:	a903      	add	r1, sp, #12
 8001e84:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 8001e86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001e88:	23f0      	movs	r3, #240	; 0xf0
 8001e8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e96:	230a      	movs	r3, #10
 8001e98:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e9a:	f004 f845 	bl	8005f28 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_SAI_MspInit+0x9c>)
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_SAI_MspInit+0x88>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_SAI_MspInit+0x90>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	b94a      	cbnz	r2, 8001ec0 <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001eac:	490f      	ldr	r1, [pc, #60]	; (8001eec <HAL_SAI_MspInit+0x94>)
 8001eae:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8001eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001eb4:	6448      	str	r0, [r1, #68]	; 0x44
 8001eb6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001eb8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001ebc:	9102      	str	r1, [sp, #8]
 8001ebe:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 8001ec0:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	a903      	add	r1, sp, #12
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 8001ec6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ecc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ed8:	230a      	movs	r3, #10
 8001eda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f004 f824 	bl	8005f28 <HAL_GPIO_Init>

    }
}
 8001ee0:	b008      	add	sp, #32
 8001ee2:	bd10      	pop	{r4, pc}
 8001ee4:	40015c04 	.word	0x40015c04
 8001ee8:	2000055c 	.word	0x2000055c
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40015c24 	.word	0x40015c24
 8001ef8:	40021800 	.word	0x40021800

08001efc <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <MX_SDMMC1_SD_Init+0x18>)
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <MX_SDMMC1_SD_Init+0x1c>)
 8001f00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001f06:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001f08:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001f0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f0c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200456a4 	.word	0x200456a4
 8001f18:	40012c00 	.word	0x40012c00

08001f1c <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	2214      	movs	r2, #20
 8001f24:	2100      	movs	r1, #0
 8001f26:	a803      	add	r0, sp, #12
 8001f28:	f023 fa5e 	bl	80253e8 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_SD_MspInit+0x8c>)
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d136      	bne.n	8001fa2 <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f34:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f38:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	eb0d 0104 	add.w	r1, sp, r4
 8001f44:	4819      	ldr	r0, [pc, #100]	; (8001fac <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f60:	f002 0204 	and.w	r2, r2, #4
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f6a:	f042 0208 	orr.w	r2, r2, #8
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f7a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8001f80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f84:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	f003 ffcf 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f8a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	eb0d 0104 	add.w	r1, sp, r4
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001f92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f9c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f003 ffc3 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001fa2:	b008      	add	sp, #32
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00

08001fb4 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001fb4:	b508      	push	{r3, lr}

  hspdif.Instance = SPDIFRX;
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <MX_SPDIFRX_Init+0x30>)
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fbc:	6003      	str	r3, [r0, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6043      	str	r3, [r0, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001fc2:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001fc4:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001fc6:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001fc8:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001fca:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001fcc:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001fce:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001fd0:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001fd2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001fd4:	f008 faae 	bl	800a534 <HAL_SPDIFRX_Init>
 8001fd8:	b118      	cbz	r0, 8001fe2 <MX_SPDIFRX_Init+0x2e>
  {
    Error_Handler();
  }

}
 8001fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001fde:	f7ff bde3 	b.w	8001ba8 <Error_Handler>
 8001fe2:	bd08      	pop	{r3, pc}
 8001fe4:	20045728 	.word	0x20045728

08001fe8 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fee:	2214      	movs	r2, #20
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	a803      	add	r0, sp, #12
 8001ff4:	f023 f9f8 	bl	80253e8 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001ffe:	d11d      	bne.n	800203c <HAL_SPDIFRX_MspInit+0x54>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002000:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002004:	a903      	add	r1, sp, #12
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <HAL_SPDIFRX_MspInit+0x58>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
 8002010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002012:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	f042 0208 	orr.w	r2, r2, #8
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002034:	2308      	movs	r3, #8
 8002036:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002038:	f003 ff76 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800203c:	b008      	add	sp, #32
 800203e:	bd10      	pop	{r4, pc}
 8002040:	40020c00 	.word	0x40020c00

08002044 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002044:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8002046:	4810      	ldr	r0, [pc, #64]	; (8002088 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002048:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800204c:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <MX_SPI2_Init+0x48>)
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002052:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002058:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800205c:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800205e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8002060:	2207      	movs	r2, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002062:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002064:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002066:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002068:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800206c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002070:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002072:	2308      	movs	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8002074:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002076:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002078:	f008 faea 	bl	800a650 <HAL_SPI_Init>
 800207c:	b118      	cbz	r0, 8002086 <MX_SPI2_Init+0x42>
  {
    Error_Handler();
  }

}
 800207e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002082:	f7ff bd91 	b.w	8001ba8 <Error_Handler>
 8002086:	bd08      	pop	{r3, pc}
 8002088:	20045774 	.word	0x20045774
 800208c:	40003800 	.word	0x40003800

08002090 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002090:	b530      	push	{r4, r5, lr}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	2214      	movs	r2, #20
 8002098:	2100      	movs	r1, #0
 800209a:	a803      	add	r0, sp, #12
 800209c:	f023 f9a4 	bl	80253e8 <memset>
  if(spiHandle->Instance==SPI2)
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_SPI_MspInit+0x80>)
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d131      	bne.n	800210c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80020ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ae:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020b0:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020b4:	4817      	ldr	r0, [pc, #92]	; (8002114 <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
 80020bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020da:	f042 0202 	orr.w	r2, r2, #2
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80020e2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ea:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f003 ff1a 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	a903      	add	r1, sp, #12
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002106:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f003 ff0e 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800210c:	b009      	add	sp, #36	; 0x24
 800210e:	bd30      	pop	{r4, r5, pc}
 8002110:	40003800 	.word	0x40003800
 8002114:	40022000 	.word	0x40022000
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_MspInit+0x3c>)
{
 800211e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002122:	210f      	movs	r1, #15
 8002124:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
 800212e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002130:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002140:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214c:	f003 fb7c 	bl	8005848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002150:	b003      	add	sp, #12
 8002152:	f85d fb04 	ldr.w	pc, [sp], #4
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800215e:	4601      	mov	r1, r0
{
 8002160:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002162:	2200      	movs	r2, #0
 8002164:	2036      	movs	r0, #54	; 0x36
 8002166:	f003 fb6f 	bl	8005848 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800216a:	2036      	movs	r0, #54	; 0x36
 800216c:	f003 fbb4 	bl	80058d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002172:	a901      	add	r1, sp, #4
 8002174:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002178:	4c13      	ldr	r4, [pc, #76]	; (80021c8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217a:	f042 0210 	orr.w	r2, r2, #16
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800218a:	f006 fa2b 	bl	80085e4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800218e:	f006 fa09 	bl	80085a4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002194:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8002196:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002198:	f240 33e7 	movw	r3, #999	; 0x3e7
 800219c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_InitTick+0x74>)
 80021a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80021a4:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80021a6:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80021a8:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021aa:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80021ac:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021b0:	f008 fdec 	bl	800ad8c <HAL_TIM_Base_Init>
 80021b4:	b920      	cbnz	r0, 80021c0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021b6:	4620      	mov	r0, r4
 80021b8:	f008 fc76 	bl	800aaa8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80021bc:	b008      	add	sp, #32
 80021be:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7fb      	b.n	80021bc <HAL_InitTick+0x60>
 80021c4:	40023800 	.word	0x40023800
 80021c8:	200457d8 	.word	0x200457d8
 80021cc:	40001000 	.word	0x40001000
 80021d0:	000f4240 	.word	0x000f4240

080021d4 <NMI_Handler>:
 80021d4:	4770      	bx	lr

080021d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	e7fe      	b.n	80021da <BusFault_Handler>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler>

080021de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021de:	4770      	bx	lr

080021e0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021e0:	4801      	ldr	r0, [pc, #4]	; (80021e8 <TIM3_IRQHandler+0x8>)
 80021e2:	f008 bcbd 	b.w	800ab60 <HAL_TIM_IRQHandler>
 80021e6:	bf00      	nop
 80021e8:	20045898 	.word	0x20045898

080021ec <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021ec:	4801      	ldr	r0, [pc, #4]	; (80021f4 <TIM6_DAC_IRQHandler+0x8>)
 80021ee:	f008 bcb7 	b.w	800ab60 <HAL_TIM_IRQHandler>
 80021f2:	bf00      	nop
 80021f4:	200457d8 	.word	0x200457d8

080021f8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021f8:	4801      	ldr	r0, [pc, #4]	; (8002200 <OTG_FS_IRQHandler+0x8>)
 80021fa:	f004 b9e1 	b.w	80065c0 <HAL_HCD_IRQHandler>
 80021fe:	bf00      	nop
 8002200:	200463f8 	.word	0x200463f8

08002204 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002204:	4801      	ldr	r0, [pc, #4]	; (800220c <LTDC_IRQHandler+0x8>)
 8002206:	f005 bb0f 	b.w	8007828 <HAL_LTDC_IRQHandler>
 800220a:	bf00      	nop
 800220c:	20045f04 	.word	0x20045f04

08002210 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002210:	4801      	ldr	r0, [pc, #4]	; (8002218 <DMA2D_IRQHandler+0x8>)
 8002212:	f003 bd85 	b.w	8005d20 <HAL_DMA2D_IRQHandler>
 8002216:	bf00      	nop
 8002218:	20045fac 	.word	0x20045fac

0800221c <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800221c:	b510      	push	{r4, lr}
 800221e:	b088      	sub	sp, #32
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002220:	2214      	movs	r2, #20
 8002222:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002226:	a803      	add	r0, sp, #12
 8002228:	f023 f8de 	bl	80253e8 <memset>

  htim3.Instance = TIM3;
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <MX_TIM3_Init+0x5c>)
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_TIM3_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	9400      	str	r4, [sp, #0]
 8002232:	9401      	str	r4, [sp, #4]
 8002234:	9402      	str	r4, [sp, #8]
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 8002238:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	6184      	str	r4, [r0, #24]
  htim3.Init.Prescaler = 0;
 800223e:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002242:	f008 fda3 	bl	800ad8c <HAL_TIM_Base_Init>
 8002246:	b108      	cbz	r0, 800224c <MX_TIM3_Init+0x30>
  {
    Error_Handler();
 8002248:	f7ff fcae 	bl	8001ba8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800224c:	2304      	movs	r3, #4
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800224e:	a903      	add	r1, sp, #12
 8002250:	4809      	ldr	r0, [pc, #36]	; (8002278 <MX_TIM3_Init+0x5c>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002252:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002254:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002256:	f009 fc3b 	bl	800bad0 <HAL_TIM_SlaveConfigSynchro>
 800225a:	b108      	cbz	r0, 8002260 <MX_TIM3_Init+0x44>
  {
    Error_Handler();
 800225c:	f7ff fca4 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002262:	4669      	mov	r1, sp
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <MX_TIM3_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226a:	f009 fc97 	bl	800bb9c <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	b108      	cbz	r0, 8002274 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002270:	f7ff fc9a 	bl	8001ba8 <Error_Handler>
  }

}
 8002274:	b008      	add	sp, #32
 8002276:	bd10      	pop	{r4, pc}
 8002278:	20045898 	.word	0x20045898
 800227c:	40000400 	.word	0x40000400

08002280 <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim5);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002280:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	2210      	movs	r2, #16
{
 8002284:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	2100      	movs	r1, #0
 8002288:	eb0d 0002 	add.w	r0, sp, r2
 800228c:	f023 f8ac 	bl	80253e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	2300      	movs	r3, #0

  htim8.Instance = TIM8;
 8002292:	4814      	ldr	r0, [pc, #80]	; (80022e4 <MX_TIM8_Init+0x64>)
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <MX_TIM8_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	9303      	str	r3, [sp, #12]
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 800229e:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80022a2:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a4:	6183      	str	r3, [r0, #24]
  htim8.Init.Prescaler = 0;
 80022a6:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022aa:	f008 fd6f 	bl	800ad8c <HAL_TIM_Base_Init>
 80022ae:	b108      	cbz	r0, 80022b4 <MX_TIM8_Init+0x34>
  {
    Error_Handler();
 80022b0:	f7ff fc7a 	bl	8001ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022b8:	a904      	add	r1, sp, #16
 80022ba:	480a      	ldr	r0, [pc, #40]	; (80022e4 <MX_TIM8_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022be:	f009 f845 	bl	800b34c <HAL_TIM_ConfigClockSource>
 80022c2:	b108      	cbz	r0, 80022c8 <MX_TIM8_Init+0x48>
  {
    Error_Handler();
 80022c4:	f7ff fc70 	bl	8001ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c8:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022ca:	a901      	add	r1, sp, #4
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_TIM8_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022d0:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022d4:	f009 fc62 	bl	800bb9c <HAL_TIMEx_MasterConfigSynchronization>
 80022d8:	b108      	cbz	r0, 80022de <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 80022da:	f7ff fc65 	bl	8001ba8 <Error_Handler>
  }

}
 80022de:	b009      	add	sp, #36	; 0x24
 80022e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022e4:	20045818 	.word	0x20045818
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80022ec:	6803      	ldr	r3, [r0, #0]
{
 80022ee:	b086      	sub	sp, #24
  if(tim_baseHandle->Instance==TIM1)
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_TIM_Base_MspInit+0xa8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10b      	bne.n	800230e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 80022f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800230a:	b006      	add	sp, #24
 800230c:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM2)
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d10b      	bne.n	800232c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002314:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	e7ee      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM3)
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_TIM_Base_MspInit+0xb0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d113      	bne.n	800235a <HAL_TIM_Base_MspInit+0x6e>
      __HAL_RCC_TIM3_CLK_ENABLE();
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 8002334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002336:	f042 0202 	orr.w	r2, r2, #2
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233e:	f002 0202 	and.w	r2, r2, #2
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	9a02      	ldr	r2, [sp, #8]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	f042 0202 	orr.w	r2, r2, #2
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	9303      	str	r3, [sp, #12]
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	e7d7      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM5)
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_TIM_Base_MspInit+0xb4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10a      	bne.n	8002376 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	f042 0208 	orr.w	r2, r2, #8
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	9b04      	ldr	r3, [sp, #16]
 8002374:	e7c9      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM8)
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d1c6      	bne.n	800230a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_TIM_Base_MspInit+0xac>)
 800237e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002380:	f042 0202 	orr.w	r2, r2, #2
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	9305      	str	r3, [sp, #20]
 800238e:	9b05      	ldr	r3, [sp, #20]
}
 8002390:	e7bb      	b.n	800230a <HAL_TIM_Base_MspInit+0x1e>
 8002392:	bf00      	nop
 8002394:	40010000 	.word	0x40010000
 8002398:	40023800 	.word	0x40023800
 800239c:	40000400 	.word	0x40000400
 80023a0:	40000c00 	.word	0x40000c00
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM12)
 80023a8:	6802      	ldr	r2, [r0, #0]
{
 80023aa:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM12)
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <HAL_TIM_PWM_MspInit+0x24>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10a      	bne.n	80023c8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80023b2:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80023b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80023c8:	b002      	add	sp, #8
 80023ca:	4770      	bx	lr
 80023cc:	40001800 	.word	0x40001800

080023d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023d0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	2214      	movs	r2, #20
{
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	2100      	movs	r1, #0
 80023da:	eb0d 0002 	add.w	r0, sp, r2
 80023de:	f023 f803 	bl	80253e8 <memset>
  if(timHandle->Instance==TIM1)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_TIM_MspPostInit+0xc0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d116      	bne.n	8002418 <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	9b01      	ldr	r3, [sp, #4]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002402:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002406:	a905      	add	r1, sp, #20
 8002408:	4823      	ldr	r0, [pc, #140]	; (8002498 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800240c:	2301      	movs	r3, #1
 800240e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002410:	f003 fd8a 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002414:	b00a      	add	sp, #40	; 0x28
 8002416:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM2)
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d10d      	bne.n	800243a <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	631a      	str	r2, [r3, #48]	; 0x30
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002438:	e7e3      	b.n	8002402 <HAL_TIM_MspPostInit+0x32>
  else if(timHandle->Instance==TIM5)
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_TIM_MspPostInit+0xcc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002442:	a905      	add	r1, sp, #20
 8002444:	4816      	ldr	r0, [pc, #88]	; (80024a0 <HAL_TIM_MspPostInit+0xd0>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	9303      	str	r3, [sp, #12]
 8002456:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002458:	2301      	movs	r3, #1
 800245a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002460:	9309      	str	r3, [sp, #36]	; 0x24
 8002462:	e7d5      	b.n	8002410 <HAL_TIM_MspPostInit+0x40>
  else if(timHandle->Instance==TIM12)
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_TIM_MspPostInit+0xd4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d1d4      	bne.n	8002414 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_TIM_MspPostInit+0xc4>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800246c:	a905      	add	r1, sp, #20
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <HAL_TIM_MspPostInit+0xd8>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	9304      	str	r3, [sp, #16]
 8002480:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002482:	2340      	movs	r3, #64	; 0x40
 8002484:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800248a:	2309      	movs	r3, #9
 800248c:	9309      	str	r3, [sp, #36]	; 0x24
 800248e:	e7bf      	b.n	8002410 <HAL_TIM_MspPostInit+0x40>
 8002490:	40010000 	.word	0x40010000
 8002494:	40023800 	.word	0x40023800
 8002498:	40020000 	.word	0x40020000
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40001800 	.word	0x40001800
 80024a8:	40021c00 	.word	0x40021c00

080024ac <MX_TIM1_Init>:
{
 80024ac:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	2210      	movs	r2, #16
{
 80024b0:	b09a      	sub	sp, #104	; 0x68
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b2:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b4:	2100      	movs	r1, #0
 80024b6:	eb0d 0002 	add.w	r0, sp, r2
 80024ba:	f022 ff95 	bl	80253e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024be:	221c      	movs	r2, #28
 80024c0:	4621      	mov	r1, r4
 80024c2:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	9401      	str	r4, [sp, #4]
 80024c6:	9402      	str	r4, [sp, #8]
 80024c8:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	f022 ff8d 	bl	80253e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024ce:	222c      	movs	r2, #44	; 0x2c
 80024d0:	4621      	mov	r1, r4
 80024d2:	a80f      	add	r0, sp, #60	; 0x3c
 80024d4:	f022 ff88 	bl	80253e8 <memset>
  htim1.Instance = TIM1;
 80024d8:	482a      	ldr	r0, [pc, #168]	; (8002584 <MX_TIM1_Init+0xd8>)
 80024da:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <MX_TIM1_Init+0xdc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024dc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 0;
 80024de:	60c4      	str	r4, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80024e2:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 0;
 80024e6:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ea:	f008 fc4f 	bl	800ad8c <HAL_TIM_Base_Init>
 80024ee:	b108      	cbz	r0, 80024f4 <MX_TIM1_Init+0x48>
    Error_Handler();
 80024f0:	f7ff fb5a 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024f8:	a904      	add	r1, sp, #16
 80024fa:	4822      	ldr	r0, [pc, #136]	; (8002584 <MX_TIM1_Init+0xd8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024fe:	f008 ff25 	bl	800b34c <HAL_TIM_ConfigClockSource>
 8002502:	b108      	cbz	r0, 8002508 <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002504:	f7ff fb50 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002508:	481e      	ldr	r0, [pc, #120]	; (8002584 <MX_TIM1_Init+0xd8>)
 800250a:	f008 fcbf 	bl	800ae8c <HAL_TIM_PWM_Init>
 800250e:	b108      	cbz	r0, 8002514 <MX_TIM1_Init+0x68>
    Error_Handler();
 8002510:	f7ff fb4a 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002516:	a901      	add	r1, sp, #4
 8002518:	481a      	ldr	r0, [pc, #104]	; (8002584 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800251c:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002520:	f009 fb3c 	bl	800bb9c <HAL_TIMEx_MasterConfigSynchronization>
 8002524:	b108      	cbz	r0, 800252a <MX_TIM1_Init+0x7e>
    Error_Handler();
 8002526:	f7ff fb3f 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800252a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	2200      	movs	r2, #0
 800252e:	a908      	add	r1, sp, #32
 8002530:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_TIM1_Init+0xd8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002532:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 0;
 8002534:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002536:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002538:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800253c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800253e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002540:	f008 fd80 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 8002544:	b108      	cbz	r0, 800254a <MX_TIM1_Init+0x9e>
    Error_Handler();
 8002546:	f7ff fb2f 	bl	8001ba8 <Error_Handler>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800254a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800254e:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002550:	a90f      	add	r1, sp, #60	; 0x3c
 8002552:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002554:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800255a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800255c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800255e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8002560:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002562:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002564:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002566:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002568:	9217      	str	r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Filter = 0;
 800256a:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800256c:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800256e:	f009 fb91 	bl	800bc94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002572:	b108      	cbz	r0, 8002578 <MX_TIM1_Init+0xcc>
    Error_Handler();
 8002574:	f7ff fb18 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <MX_TIM1_Init+0xd8>)
 800257a:	f7ff ff29 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800257e:	b01a      	add	sp, #104	; 0x68
 8002580:	bd10      	pop	{r4, pc}
 8002582:	bf00      	nop
 8002584:	200458d8 	.word	0x200458d8
 8002588:	40010000 	.word	0x40010000

0800258c <MX_TIM2_Init>:
{
 800258c:	b510      	push	{r4, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002590:	2210      	movs	r2, #16
 8002592:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	a803      	add	r0, sp, #12
 8002598:	f022 ff26 	bl	80253e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	221c      	movs	r2, #28
 800259e:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	9401      	str	r4, [sp, #4]
 80025a8:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025aa:	f022 ff1d 	bl	80253e8 <memset>
  htim2.Instance = TIM2;
 80025ae:	481d      	ldr	r0, [pc, #116]	; (8002624 <MX_TIM2_Init+0x98>)
 80025b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80025b6:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ba:	6184      	str	r4, [r0, #24]
  htim2.Init.Prescaler = 0;
 80025bc:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025c0:	f008 fbe4 	bl	800ad8c <HAL_TIM_Base_Init>
 80025c4:	b108      	cbz	r0, 80025ca <MX_TIM2_Init+0x3e>
    Error_Handler();
 80025c6:	f7ff faef 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ce:	a903      	add	r1, sp, #12
 80025d0:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM2_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d4:	f008 feba 	bl	800b34c <HAL_TIM_ConfigClockSource>
 80025d8:	b108      	cbz	r0, 80025de <MX_TIM2_Init+0x52>
    Error_Handler();
 80025da:	f7ff fae5 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025de:	4811      	ldr	r0, [pc, #68]	; (8002624 <MX_TIM2_Init+0x98>)
 80025e0:	f008 fc54 	bl	800ae8c <HAL_TIM_PWM_Init>
 80025e4:	b108      	cbz	r0, 80025ea <MX_TIM2_Init+0x5e>
    Error_Handler();
 80025e6:	f7ff fadf 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ec:	4669      	mov	r1, sp
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM2_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f4:	f009 fad2 	bl	800bb9c <HAL_TIMEx_MasterConfigSynchronization>
 80025f8:	b108      	cbz	r0, 80025fe <MX_TIM2_Init+0x72>
    Error_Handler();
 80025fa:	f7ff fad5 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025fe:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002600:	2200      	movs	r2, #0
 8002602:	a907      	add	r1, sp, #28
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <MX_TIM2_Init+0x98>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002606:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8002608:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800260c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260e:	f008 fd19 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 8002612:	b108      	cbz	r0, 8002618 <MX_TIM2_Init+0x8c>
    Error_Handler();
 8002614:	f7ff fac8 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <MX_TIM2_Init+0x98>)
 800261a:	f7ff fed9 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800261e:	b00e      	add	sp, #56	; 0x38
 8002620:	bd10      	pop	{r4, pc}
 8002622:	bf00      	nop
 8002624:	20045918 	.word	0x20045918

08002628 <MX_TIM5_Init>:
{
 8002628:	b510      	push	{r4, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262c:	2210      	movs	r2, #16
 800262e:	2100      	movs	r1, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	2400      	movs	r4, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	a803      	add	r0, sp, #12
 8002634:	f022 fed8 	bl	80253e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002638:	221c      	movs	r2, #28
 800263a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002642:	9401      	str	r4, [sp, #4]
 8002644:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	f022 fecf 	bl	80253e8 <memset>
  htim5.Instance = TIM5;
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <MX_TIM5_Init+0x94>)
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_TIM5_Init+0x98>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264e:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 8002650:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	6184      	str	r4, [r0, #24]
  htim5.Init.Prescaler = 0;
 8002656:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800265a:	f008 fb97 	bl	800ad8c <HAL_TIM_Base_Init>
 800265e:	b108      	cbz	r0, 8002664 <MX_TIM5_Init+0x3c>
    Error_Handler();
 8002660:	f7ff faa2 	bl	8001ba8 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002668:	a903      	add	r1, sp, #12
 800266a:	4814      	ldr	r0, [pc, #80]	; (80026bc <MX_TIM5_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800266e:	f008 fe6d 	bl	800b34c <HAL_TIM_ConfigClockSource>
 8002672:	b108      	cbz	r0, 8002678 <MX_TIM5_Init+0x50>
    Error_Handler();
 8002674:	f7ff fa98 	bl	8001ba8 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <MX_TIM5_Init+0x94>)
 800267a:	f008 fc07 	bl	800ae8c <HAL_TIM_PWM_Init>
 800267e:	b108      	cbz	r0, 8002684 <MX_TIM5_Init+0x5c>
    Error_Handler();
 8002680:	f7ff fa92 	bl	8001ba8 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002686:	4669      	mov	r1, sp
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <MX_TIM5_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800268e:	f009 fa85 	bl	800bb9c <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	b108      	cbz	r0, 8002698 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002694:	f7ff fa88 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002698:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800269a:	220c      	movs	r2, #12
 800269c:	a907      	add	r1, sp, #28
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <MX_TIM5_Init+0x94>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80026a2:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026a8:	f008 fccc 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 80026ac:	b108      	cbz	r0, 80026b2 <MX_TIM5_Init+0x8a>
    Error_Handler();
 80026ae:	f7ff fa7b 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 80026b2:	4802      	ldr	r0, [pc, #8]	; (80026bc <MX_TIM5_Init+0x94>)
 80026b4:	f7ff fe8c 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 80026b8:	b00e      	add	sp, #56	; 0x38
 80026ba:	bd10      	pop	{r4, pc}
 80026bc:	20045858 	.word	0x20045858
 80026c0:	40000c00 	.word	0x40000c00

080026c4 <MX_TIM12_Init>:
{
 80026c4:	b510      	push	{r4, lr}
 80026c6:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c8:	221c      	movs	r2, #28
 80026ca:	2100      	movs	r1, #0
  htim12.Init.Prescaler = 0;
 80026cc:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ce:	a801      	add	r0, sp, #4
 80026d0:	f022 fe8a 	bl	80253e8 <memset>
  htim12.Instance = TIM12;
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <MX_TIM12_Init+0x50>)
  htim12.Init.Prescaler = 0;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_TIM12_Init+0x54>)
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	6084      	str	r4, [r0, #8]
  htim12.Init.Period = 0;
 80026da:	60c4      	str	r4, [r0, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026dc:	6104      	str	r4, [r0, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026de:	6184      	str	r4, [r0, #24]
  htim12.Init.Prescaler = 0;
 80026e0:	e880 0018 	stmia.w	r0, {r3, r4}
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80026e4:	f008 fbd2 	bl	800ae8c <HAL_TIM_PWM_Init>
 80026e8:	b108      	cbz	r0, 80026ee <MX_TIM12_Init+0x2a>
    Error_Handler();
 80026ea:	f7ff fa5d 	bl	8001ba8 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f0:	2200      	movs	r2, #0
 80026f2:	a901      	add	r1, sp, #4
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <MX_TIM12_Init+0x50>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80026f8:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fa:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fe:	f008 fca1 	bl	800b044 <HAL_TIM_PWM_ConfigChannel>
 8002702:	b108      	cbz	r0, 8002708 <MX_TIM12_Init+0x44>
    Error_Handler();
 8002704:	f7ff fa50 	bl	8001ba8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim12);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <MX_TIM12_Init+0x50>)
 800270a:	f7ff fe61 	bl	80023d0 <HAL_TIM_MspPostInit>
}
 800270e:	b008      	add	sp, #32
 8002710:	bd10      	pop	{r4, pc}
 8002712:	bf00      	nop
 8002714:	20045958 	.word	0x20045958
 8002718:	40001800 	.word	0x40001800

0800271c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800271c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8002720:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002726:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002728:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002730:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002732:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002734:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800273a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273e:	f009 fee9 	bl	800c514 <HAL_UART_Init>
 8002742:	b118      	cbz	r0, 800274c <MX_USART1_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002748:	f7ff ba2e 	b.w	8001ba8 <Error_Handler>
 800274c:	bd08      	pop	{r3, pc}
 800274e:	bf00      	nop
 8002750:	20045998 	.word	0x20045998
 8002754:	40011000 	.word	0x40011000

08002758 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002758:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_USART6_UART_Init+0x34>)
  huart6.Init.BaudRate = 115200;
 800275c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <MX_USART6_UART_Init+0x38>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002762:	220c      	movs	r2, #12
  huart6.Init.BaudRate = 115200;
 8002764:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002768:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800276a:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800276c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800276e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002770:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002774:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002776:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002778:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800277a:	f009 fecb 	bl	800c514 <HAL_UART_Init>
 800277e:	b118      	cbz	r0, 8002788 <MX_USART6_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8002780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002784:	f7ff ba10 	b.w	8001ba8 <Error_Handler>
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	20045a18 	.word	0x20045a18
 8002790:	40011400 	.word	0x40011400

08002794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002794:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	2214      	movs	r2, #20
{
 8002798:	b08b      	sub	sp, #44	; 0x2c
 800279a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	2100      	movs	r1, #0
 800279e:	eb0d 0002 	add.w	r0, sp, r2
 80027a2:	f022 fe21 	bl	80253e8 <memset>
  if(uartHandle->Instance==USART1)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_UART_MspInit+0xc4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d133      	bne.n	8002816 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2407      	movs	r4, #7
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027b4:	a905      	add	r1, sp, #20
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027b8:	4829      	ldr	r0, [pc, #164]	; (8002860 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	f042 0210 	orr.w	r2, r2, #16
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
 80027c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c2:	f002 0210 	and.w	r2, r2, #16
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027cc:	f042 0202 	orr.w	r2, r2, #2
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	f002 0202 	and.w	r2, r2, #2
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ec:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f003 fb97 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027fe:	a905      	add	r1, sp, #20
 8002800:	4818      	ldr	r0, [pc, #96]	; (8002864 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002802:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800280c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f003 fb8b 	bl	8005f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002812:	b00b      	add	sp, #44	; 0x2c
 8002814:	bd30      	pop	{r4, r5, pc}
  else if(uartHandle->Instance==USART6)
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_UART_MspInit+0xd4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d1fa      	bne.n	8002812 <HAL_UART_MspInit+0x7e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281e:	a905      	add	r1, sp, #20
 8002820:	4812      	ldr	r0, [pc, #72]	; (800286c <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	f042 0220 	orr.w	r2, r2, #32
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
 800282a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282c:	f002 0220 	and.w	r2, r2, #32
 8002830:	9203      	str	r2, [sp, #12]
 8002832:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002836:	f042 0204 	orr.w	r2, r2, #4
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	9304      	str	r3, [sp, #16]
 8002844:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002852:	2308      	movs	r3, #8
 8002854:	9309      	str	r3, [sp, #36]	; 0x24
 8002856:	e7da      	b.n	800280e <HAL_UART_MspInit+0x7a>
 8002858:	40011000 	.word	0x40011000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020400 	.word	0x40020400
 8002864:	40020000 	.word	0x40020000
 8002868:	40011400 	.word	0x40011400
 800286c:	40020800 	.word	0x40020800

08002870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002870:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8002872:	4903      	ldr	r1, [pc, #12]	; (8002880 <MX_FATFS_Init+0x10>)
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <MX_FATFS_Init+0x14>)
 8002876:	f00a fff5 	bl	800d864 <FATFS_LinkDriver>
 800287a:	4b03      	ldr	r3, [pc, #12]	; (8002888 <MX_FATFS_Init+0x18>)
 800287c:	7018      	strb	r0, [r3, #0]
 800287e:	bd08      	pop	{r3, pc}
 8002880:	20045a99 	.word	0x20045a99
 8002884:	08034908 	.word	0x08034908
 8002888:	20045a98 	.word	0x20045a98

0800288c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800288c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800288e:	4613      	mov	r3, r2
 8002890:	460a      	mov	r2, r1
 8002892:	4601      	mov	r1, r0
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <BSP_SD_ReadBlocks_DMA+0x18>)
 8002896:	f007 f9d3 	bl	8009c40 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 800289a:	3000      	adds	r0, #0
 800289c:	bf18      	it	ne
 800289e:	2001      	movne	r0, #1
 80028a0:	bd08      	pop	{r3, pc}
 80028a2:	bf00      	nop
 80028a4:	200456a4 	.word	0x200456a4

080028a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80028a8:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80028aa:	4613      	mov	r3, r2
 80028ac:	460a      	mov	r2, r1
 80028ae:	4601      	mov	r1, r0
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <BSP_SD_WriteBlocks_DMA+0x18>)
 80028b2:	f007 fa47 	bl	8009d44 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80028b6:	3000      	adds	r0, #0
 80028b8:	bf18      	it	ne
 80028ba:	2001      	movne	r0, #1
 80028bc:	bd08      	pop	{r3, pc}
 80028be:	bf00      	nop
 80028c0:	200456a4 	.word	0x200456a4

080028c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80028c4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <BSP_SD_GetCardState+0x10>)
 80028c8:	f007 fda8 	bl	800a41c <HAL_SD_GetCardState>
}
 80028cc:	3804      	subs	r0, #4
 80028ce:	bf18      	it	ne
 80028d0:	2001      	movne	r0, #1
 80028d2:	bd08      	pop	{r3, pc}
 80028d4:	200456a4 	.word	0x200456a4

080028d8 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80028d8:	4601      	mov	r1, r0
 80028da:	4801      	ldr	r0, [pc, #4]	; (80028e0 <BSP_SD_GetCardInfo+0x8>)
 80028dc:	f007 bd02 	b.w	800a2e4 <HAL_SD_GetCardInfo>
 80028e0:	200456a4 	.word	0x200456a4

080028e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80028e4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80028e6:	f000 f957 	bl	8002b98 <BSP_SD_ReadCpltCallback>
 80028ea:	bd08      	pop	{r3, pc}

080028ec <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80028ec:	2301      	movs	r3, #1
{
 80028ee:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80028f0:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80028f4:	f000 f81e 	bl	8002934 <BSP_PlatformIsDetected>
 80028f8:	b908      	cbnz	r0, 80028fe <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80028fa:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80028fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002902:	b003      	add	sp, #12
 8002904:	f85d fb04 	ldr.w	pc, [sp], #4

08002908 <BSP_SD_Init>:
{
 8002908:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800290a:	f7ff ffef 	bl	80028ec <BSP_SD_IsDetected>
 800290e:	2801      	cmp	r0, #1
 8002910:	d10c      	bne.n	800292c <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <BSP_SD_Init+0x28>)
 8002914:	f007 fc84 	bl	800a220 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8002918:	b948      	cbnz	r0, 800292e <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800291a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <BSP_SD_Init+0x28>)
 8002920:	f007 fcf2 	bl	800a308 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8002924:	3000      	adds	r0, #0
 8002926:	bf18      	it	ne
 8002928:	2001      	movne	r0, #1
 800292a:	bd08      	pop	{r3, pc}
 800292c:	2002      	movs	r0, #2
}
 800292e:	bd08      	pop	{r3, pc}
 8002930:	200456a4 	.word	0x200456a4

08002934 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8002934:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8002936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <BSP_PlatformIsDetected+0x14>)
 800293c:	f003 fd12 	bl	8006364 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 8002940:	fab0 f080 	clz	r0, r0
 8002944:	0940      	lsrs	r0, r0, #5
 8002946:	bd08      	pop	{r3, pc}
 8002948:	40020800 	.word	0x40020800

0800294c <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 800294c:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 800294e:	2301      	movs	r3, #1
 8002950:	4c05      	ldr	r4, [pc, #20]	; (8002968 <SD_CheckStatus.isra.0+0x1c>)
 8002952:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002954:	f7ff ffb6 	bl	80028c4 <BSP_SD_GetCardState>
 8002958:	4623      	mov	r3, r4
 800295a:	b918      	cbnz	r0, 8002964 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 800295c:	7822      	ldrb	r2, [r4, #0]
 800295e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002962:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8002964:	7818      	ldrb	r0, [r3, #0]
}
 8002966:	bd10      	pop	{r4, pc}
 8002968:	200000a0 	.word	0x200000a0

0800296c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800296c:	b537      	push	{r0, r1, r2, r4, r5, lr}
Stat = STA_NOINIT; 
 800296e:	2301      	movs	r3, #1
 8002970:	4c0e      	ldr	r4, [pc, #56]	; (80029ac <SD_initialize+0x40>)
 8002972:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8002974:	f00a ff7e 	bl	800d874 <osKernelRunning>
 8002978:	b1a0      	cbz	r0, 80029a4 <SD_initialize+0x38>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800297a:	f7ff ffc5 	bl	8002908 <BSP_SD_Init>
 800297e:	b910      	cbnz	r0, 8002986 <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 8002980:	f7ff ffe4 	bl	800294c <SD_CheckStatus.isra.0>
 8002984:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8002986:	7823      	ldrb	r3, [r4, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d00b      	beq.n	80029a4 <SD_initialize+0x38>
 800298c:	4d08      	ldr	r5, [pc, #32]	; (80029b0 <SD_initialize+0x44>)
 800298e:	682a      	ldr	r2, [r5, #0]
 8002990:	b942      	cbnz	r2, 80029a4 <SD_initialize+0x38>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <SD_initialize+0x48>)
 8002994:	c903      	ldmia	r1, {r0, r1}
 8002996:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800299a:	4611      	mov	r1, r2
 800299c:	4668      	mov	r0, sp
 800299e:	f00a ffff 	bl	800d9a0 <osMessageCreate>
 80029a2:	6028      	str	r0, [r5, #0]
    }
  }
  return Stat;
 80029a4:	7820      	ldrb	r0, [r4, #0]
}
 80029a6:	b003      	add	sp, #12
 80029a8:	bd30      	pop	{r4, r5, pc}
 80029aa:	bf00      	nop
 80029ac:	200000a0 	.word	0x200000a0
 80029b0:	20000560 	.word	0x20000560
 80029b4:	080270ac 	.word	0x080270ac

080029b8 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80029b8:	f7ff bfc8 	b.w	800294c <SD_CheckStatus.isra.0>

080029bc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <SD_ioctl+0x4c>)
{
 80029be:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029c0:	781b      	ldrb	r3, [r3, #0]
{
 80029c2:	b088      	sub	sp, #32
 80029c4:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80029c6:	07db      	lsls	r3, r3, #31
 80029c8:	d41b      	bmi.n	8002a02 <SD_ioctl+0x46>

  switch (cmd)
 80029ca:	2903      	cmp	r1, #3
 80029cc:	d803      	bhi.n	80029d6 <SD_ioctl+0x1a>
 80029ce:	e8df f001 	tbb	[pc, r1]
 80029d2:	0510      	.short	0x0510
 80029d4:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 80029d6:	2004      	movs	r0, #4
  }

  return res;
}
 80029d8:	b008      	add	sp, #32
 80029da:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80029dc:	4668      	mov	r0, sp
 80029de:	f7ff ff7b 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80029e2:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	e004      	b.n	80029f2 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 80029e8:	4668      	mov	r0, sp
 80029ea:	f7ff ff75 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80029ee:	9b07      	ldr	r3, [sp, #28]
 80029f0:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 80029f2:	2000      	movs	r0, #0
 80029f4:	e7f0      	b.n	80029d8 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 80029f6:	4668      	mov	r0, sp
 80029f8:	f7ff ff6e 	bl	80028d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80029fc:	9b07      	ldr	r3, [sp, #28]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	e7f0      	b.n	80029e4 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a02:	2003      	movs	r0, #3
 8002a04:	e7e8      	b.n	80029d8 <SD_ioctl+0x1c>
 8002a06:	bf00      	nop
 8002a08:	200000a0 	.word	0x200000a0

08002a0c <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8002a0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 8002a0e:	f00a ff39 	bl	800d884 <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 8002a12:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 8002a16:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 8002a18:	f00a ff34 	bl	800d884 <osKernelSysTick>
 8002a1c:	1b40      	subs	r0, r0, r5
 8002a1e:	42a0      	cmp	r0, r4
 8002a20:	d902      	bls.n	8002a28 <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 8002a22:	f04f 30ff 	mov.w	r0, #4294967295
 8002a26:	e003      	b.n	8002a30 <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002a28:	f7ff ff4c 	bl	80028c4 <BSP_SD_GetCardState>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d1f3      	bne.n	8002a18 <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 8002a30:	bd38      	pop	{r3, r4, r5, pc}
	...

08002a34 <SD_write>:
{
 8002a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	4617      	mov	r7, r2
 8002a3e:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002a40:	f7ff ffe4 	bl	8002a0c <SD_CheckStatusWithTimeout.constprop.2>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	da03      	bge.n	8002a50 <SD_write+0x1c>
    return res;
 8002a48:	2001      	movs	r0, #1
} 
 8002a4a:	b005      	add	sp, #20
 8002a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8002a50:	07a3      	lsls	r3, r4, #30
 8002a52:	d00a      	beq.n	8002a6a <SD_write+0x36>
 8002a54:	2500      	movs	r5, #0
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002a56:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002aec <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a5a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002ae8 <SD_write+0xb4>
    for (i = 0; i < count; i++) {
 8002a5e:	42b5      	cmp	r5, r6
 8002a60:	eb05 0107 	add.w	r1, r5, r7
 8002a64:	d123      	bne.n	8002aae <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 8002a66:	2000      	movs	r0, #0
 8002a68:	e7ef      	b.n	8002a4a <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8002a6a:	4632      	mov	r2, r6
 8002a6c:	4639      	mov	r1, r7
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ff1a 	bl	80028a8 <BSP_SD_WriteBlocks_DMA>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d1e7      	bne.n	8002a48 <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <SD_write+0xb4>)
 8002a7a:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a7e:	a801      	add	r0, sp, #4
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	f00a ffb9 	bl	800d9f8 <osMessageGet>
      if (event.status == osEventMessage)
 8002a86:	9b01      	ldr	r3, [sp, #4]
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d1dd      	bne.n	8002a48 <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 8002a8c:	9b02      	ldr	r3, [sp, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d1da      	bne.n	8002a48 <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8002a92:	f00a fef7 	bl	800d884 <osKernelSysTick>
 8002a96:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 8002a9a:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 8002a9c:	f00a fef2 	bl	800d884 <osKernelSysTick>
 8002aa0:	4284      	cmp	r4, r0
 8002aa2:	d9d1      	bls.n	8002a48 <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002aa4:	f7ff ff0e 	bl	80028c4 <BSP_SD_GetCardState>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	d1f7      	bne.n	8002a9c <SD_write+0x68>
 8002aac:	e7cd      	b.n	8002a4a <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <SD_write+0xb8>)
 8002ab2:	f7ff fef9 	bl	80028a8 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d1c6      	bne.n	8002a48 <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002aba:	f247 5230 	movw	r2, #30000	; 0x7530
 8002abe:	f8d9 1000 	ldr.w	r1, [r9]
 8002ac2:	a801      	add	r0, sp, #4
 8002ac4:	f00a ff98 	bl	800d9f8 <osMessageGet>
        if (event.status == osEventMessage) {
 8002ac8:	9b01      	ldr	r3, [sp, #4]
 8002aca:	2b10      	cmp	r3, #16
 8002acc:	d10a      	bne.n	8002ae4 <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d107      	bne.n	8002ae4 <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002ad4:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002ad6:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	4641      	mov	r1, r8
 8002ae0:	f022 fc5d 	bl	802539e <memcpy>
    for (i = 0; i < count; i++) {
 8002ae4:	3501      	adds	r5, #1
 8002ae6:	e7ba      	b.n	8002a5e <SD_write+0x2a>
 8002ae8:	20000560 	.word	0x20000560
 8002aec:	20000564 	.word	0x20000564

08002af0 <SD_read>:
{
 8002af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002af4:	b085      	sub	sp, #20
 8002af6:	460c      	mov	r4, r1
 8002af8:	4617      	mov	r7, r2
 8002afa:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8002afc:	f7ff ff86 	bl	8002a0c <SD_CheckStatusWithTimeout.constprop.2>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	da03      	bge.n	8002b0c <SD_read+0x1c>
    return res;
 8002b04:	2001      	movs	r0, #1
} 
 8002b06:	b005      	add	sp, #20
 8002b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8002b0c:	07a3      	lsls	r3, r4, #30
 8002b0e:	d00a      	beq.n	8002b26 <SD_read+0x36>
 8002b10:	2500      	movs	r5, #0
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002b12:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002b94 <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b16:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002b90 <SD_read+0xa0>
    for (i = 0; i < count; i++) {
 8002b1a:	42b5      	cmp	r5, r6
 8002b1c:	eb05 0107 	add.w	r1, r5, r7
 8002b20:	d118      	bne.n	8002b54 <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 8002b22:	2000      	movs	r0, #0
 8002b24:	e7ef      	b.n	8002b06 <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8002b26:	4632      	mov	r2, r6
 8002b28:	4639      	mov	r1, r7
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff feae 	bl	800288c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1e7      	bne.n	8002b04 <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <SD_read+0xa0>)
 8002b36:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b3a:	a801      	add	r0, sp, #4
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	f00a ff5b 	bl	800d9f8 <osMessageGet>
      if (event.status == osEventMessage) {
 8002b42:	9b01      	ldr	r3, [sp, #4]
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d1dd      	bne.n	8002b04 <SD_read+0x14>
    return res;
 8002b48:	9802      	ldr	r0, [sp, #8]
 8002b4a:	f110 30ff 	adds.w	r0, r0, #4294967295
 8002b4e:	bf18      	it	ne
 8002b50:	2001      	movne	r0, #1
 8002b52:	e7d8      	b.n	8002b06 <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8002b54:	2201      	movs	r2, #1
 8002b56:	480f      	ldr	r0, [pc, #60]	; (8002b94 <SD_read+0xa4>)
 8002b58:	f7ff fe98 	bl	800288c <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d1d1      	bne.n	8002b04 <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002b60:	f247 5230 	movw	r2, #30000	; 0x7530
 8002b64:	f8d9 1000 	ldr.w	r1, [r9]
 8002b68:	a801      	add	r0, sp, #4
 8002b6a:	f00a ff45 	bl	800d9f8 <osMessageGet>
        if (event.status == osEventMessage) {
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d10a      	bne.n	8002b8a <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 8002b74:	9b02      	ldr	r3, [sp, #8]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 8002b7a:	4620      	mov	r0, r4
            buff += BLOCKSIZE;
 8002b7c:	f504 7400 	add.w	r4, r4, #512	; 0x200
            memcpy(buff, scratch, BLOCKSIZE);
 8002b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b84:	4641      	mov	r1, r8
 8002b86:	f022 fc0a 	bl	802539e <memcpy>
    for (i = 0; i < count; i++) {
 8002b8a:	3501      	adds	r5, #1
 8002b8c:	e7c5      	b.n	8002b1a <SD_read+0x2a>
 8002b8e:	bf00      	nop
 8002b90:	20000560 	.word	0x20000560
 8002b94:	20000564 	.word	0x20000564

08002b98 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <BSP_SD_ReadCpltCallback+0x10>)
 8002b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f00a bf01 	b.w	800d9a8 <osMessagePut>
 8002ba6:	bf00      	nop
 8002ba8:	20000560 	.word	0x20000560

08002bac <PollTouchScreen>:
// Recommended memory to run the sample with adequate performance
//
#define RECOMMENDED_MEMORY (1024L * 100)

GUI_PID_STATE PollTouchScreen(void)
{
 8002bac:	b530      	push	{r4, r5, lr}
 8002bae:	b08f      	sub	sp, #60	; 0x3c
 8002bb0:	4604      	mov	r4, r0
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API) */
 8002bb2:	a803      	add	r0, sp, #12
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	f002 fb19 	bl	80051ec <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */

  if (prev_state.touchDetected != ts.touchDetected)
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <PollTouchScreen+0x50>)
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002bbc:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (prev_state.touchDetected != ts.touchDetected)
 8002bc0:	7819      	ldrb	r1, [r3, #0]
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure */
 8002bc2:	f88d 2008 	strb.w	r2, [sp, #8]
  if (prev_state.touchDetected != ts.touchDetected)
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	d011      	beq.n	8002bee <PollTouchScreen+0x42>
  {
//    dmc_putc('.');
    prev_state.touchDetected != ts.touchDetected;
    /* Check touch variations */
    if((ts.touchX[0] != 0) &&  (ts.touchY[0] != 0))
 8002bca:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002bce:	b121      	cbz	r1, 8002bda <PollTouchScreen+0x2e>
 8002bd0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002bd4:	b10a      	cbz	r2, 8002bda <PollTouchScreen+0x2e>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8002bd6:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8002bd8:	819a      	strh	r2, [r3, #12]
    }
    TS_State.Layer = 0;
 8002bda:	2200      	movs	r2, #0
//    dmc_putc(' ');
//    dmc_putint((uint16_t)TS_State.y);
//    dmc_putcr();

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002bdc:	4628      	mov	r0, r5
    TS_State.Layer = 0;
 8002bde:	f88d 2009 	strb.w	r2, [sp, #9]
    TS_State.x = prev_state.touchX[0];
 8002be2:	885a      	ldrh	r2, [r3, #2]
    TS_State.y = prev_state.touchY[0];
 8002be4:	899b      	ldrh	r3, [r3, #12]
    TS_State.x = prev_state.touchX[0];
 8002be6:	9200      	str	r2, [sp, #0]
    TS_State.y = prev_state.touchY[0];
 8002be8:	9301      	str	r3, [sp, #4]
    GUI_TOUCH_StoreStateEx(&TS_State);
 8002bea:	f015 fc9d 	bl	8018528 <GUI_TOUCH_StoreStateEx>

  }
  return TS_State;
 8002bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	b00f      	add	sp, #60	; 0x3c
 8002bfa:	bd30      	pop	{r4, r5, pc}
 8002bfc:	20000764 	.word	0x20000764

08002c00 <InitNew>:

void InitNew(void)
{
 8002c00:	b508      	push	{r3, lr}
  GUI_Init();
 8002c02:	f011 fbd3 	bl	80143ac <GUI_Init>

  GUI_SetBkColor(GUI_BLACK);
 8002c06:	2000      	movs	r0, #0
 8002c08:	f011 fa12 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8002c0c:	f011 fb50 	bl	80142b0 <GUI_Clear>
  GUI_EnableAlpha(0);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f013 fd21 	bl	8016658 <GUI_EnableAlpha>
  GUI_SetTextMode(GUI_TM_NORMAL);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f011 fab8 	bl	801418c <GUI_SetTextMode>
  GUI_SetColor(GUI_WHITE);
 8002c1c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002c20:	f011 fa12 	bl	8014048 <GUI_SetColor>
  GUI_SetFont(GUI_FONT_32_1);
 8002c24:	4804      	ldr	r0, [pc, #16]	; (8002c38 <InitNew+0x38>)
 8002c26:	f011 fa71 	bl	801410c <GUI_SetFont>
  GUI_AA_SetFactor(6);
 8002c2a:	2006      	movs	r0, #6
 8002c2c:	f00e fb84 	bl	8011338 <GUI_AA_SetFactor>
  //  GUI_AA_EnableHiRes();
  GUI_AA_DisableHiRes();
}
 8002c30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_AA_DisableHiRes();
 8002c34:	f00e bba4 	b.w	8011380 <GUI_AA_DisableHiRes>
 8002c38:	0802bef8 	.word	0x0802bef8

08002c3c <demos>:

void demos(void)
{
 8002c3c:	b508      	push	{r3, lr}
  uint16_t delay = 2000;

  J01_TextVersionString1();
 8002c3e:	f000 fc6b 	bl	8003518 <J01_TextVersionString1>
  HAL_Delay(delay);
 8002c42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c46:	f002 fbd7 	bl	80053f8 <HAL_Delay>
  J01_TextVersionString2();
 8002c4a:	f000 fc85 	bl	8003558 <J01_TextVersionString2>
  HAL_Delay(delay);
 8002c4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c52:	f002 fbd1 	bl	80053f8 <HAL_Delay>
  J01_TextModes();
 8002c56:	f000 fcdd 	bl	8003614 <J01_TextModes>
  HAL_Delay(delay);
 8002c5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c5e:	f002 fbcb 	bl	80053f8 <HAL_Delay>
  J01_DispFloat();
 8002c62:	f000 fd35 	bl	80036d0 <J01_DispFloat>
  HAL_Delay(delay);
 8002c66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c6a:	f002 fbc5 	bl	80053f8 <HAL_Delay>
  J01_TextInBox();
 8002c6e:	f000 fdb7 	bl	80037e0 <J01_TextInBox>
  HAL_Delay(delay);
 8002c72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c76:	f002 fbbf 	bl	80053f8 <HAL_Delay>
  J01_TextRotated();
 8002c7a:	f000 fe63 	bl	8003944 <J01_TextRotated>
  HAL_Delay(delay);
 8002c7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c82:	f002 fbb9 	bl	80053f8 <HAL_Delay>

  J01_DrawAlpha1();
 8002c86:	f000 f889 	bl	8002d9c <J01_DrawAlpha1>
  HAL_Delay(delay);
 8002c8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c8e:	f002 fbb3 	bl	80053f8 <HAL_Delay>
  J01_DrawAlpha2();
 8002c92:	f000 f8df 	bl	8002e54 <J01_DrawAlpha2>
  HAL_Delay(delay);
 8002c96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c9a:	f002 fbad 	bl	80053f8 <HAL_Delay>
  J01_DrawAlpha3();
 8002c9e:	f000 f95f 	bl	8002f60 <J01_DrawAlpha3>
  HAL_Delay(delay);
 8002ca2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ca6:	f002 fba7 	bl	80053f8 <HAL_Delay>
  J01_Shapes();
 8002caa:	f000 f9df 	bl	800306c <J01_Shapes>
  HAL_Delay(delay);
 8002cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cb2:	f002 fba1 	bl	80053f8 <HAL_Delay>
  J01_Sine();
 8002cb6:	f000 fa5f 	bl	8003178 <J01_Sine>
  HAL_Delay(delay);
 8002cba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cbe:	f002 fb9b 	bl	80053f8 <HAL_Delay>
  J01_BigDigits();
 8002cc2:	f000 faf3 	bl	80032ac <J01_BigDigits>
  HAL_Delay(delay);
 8002cc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cca:	f002 fb95 	bl	80053f8 <HAL_Delay>
  J01_PieChart();
 8002cce:	f000 fb07 	bl	80032e0 <J01_PieChart>
  HAL_Delay(delay);
 8002cd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd6:	f002 fb8f 	bl	80053f8 <HAL_Delay>
  J01_DrawModes();
 8002cda:	f000 fb4d 	bl	8003378 <J01_DrawModes>
  HAL_Delay(delay);
 8002cde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ce2:	f002 fb89 	bl	80053f8 <HAL_Delay>
  J01_PixelIndex();
 8002ce6:	f000 fbc1 	bl	800346c <J01_PixelIndex>
  HAL_Delay(delay);
 8002cea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0



}
 8002cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(delay);
 8002cf2:	f002 bb81 	b.w	80053f8 <HAL_Delay>

08002cf6 <GRAPHICS_MainTask>:

//extern WM_HWIN CreateWindow(void);


void GRAPHICS_MainTask(void)
{
 8002cf6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

  uint32_t x1 = 0;
  uint32_t x2 = 0;
  uint32_t y1 = 0;
  uint32_t y2 = 0;
  uint8_t started = 0;
 8002cfa:	2500      	movs	r5, #0
  GUI_Init();
 8002cfc:	f011 fb56 	bl	80143ac <GUI_Init>
  demos();
 8002d00:	f7ff ff9c 	bl	8002c3c <demos>
  GUI_SetBkColor(GUI_BLACK);
 8002d04:	2000      	movs	r0, #0
  uint32_t y1 = 0;
 8002d06:	46a9      	mov	r9, r5
  uint32_t x1 = 0;
 8002d08:	462e      	mov	r6, r5
  GUI_SetBkColor(GUI_BLACK);
 8002d0a:	f011 f991 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8002d0e:	f011 facf 	bl	80142b0 <GUI_Clear>
  GUI_SetPenSize(11);
 8002d12:	200b      	movs	r0, #11
 8002d14:	f011 f930 	bl	8013f78 <GUI_SetPenSize>
  uint8_t erasing = 0;

  while(1)
  {
//    loop();
    GUI_PID_STATE TS_State = PollTouchScreen();
 8002d18:	a801      	add	r0, sp, #4
 8002d1a:	f7ff ff47 	bl	8002bac <PollTouchScreen>
      if (TS_State.Pressed)
 8002d1e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002d22:	b3a3      	cbz	r3, 8002d8e <GRAPHICS_MainTask+0x98>
      {
        x2 = TS_State.x;
 8002d24:	9f01      	ldr	r7, [sp, #4]
        y2 = TS_State.y;
 8002d26:	f8dd 8008 	ldr.w	r8, [sp, #8]
//            GUI_Clear();
//            started = 0;
//            erasing = 1;
//          }
//        }
        if ((started) && (!erasing))
 8002d2a:	b3a5      	cbz	r5, 8002d96 <GRAPHICS_MainTask+0xa0>
        {
          uint8_t r = rnd() % 255;
 8002d2c:	f7fe fb96 	bl	800145c <rnd>
 8002d30:	4604      	mov	r4, r0
          uint8_t g = rnd() % 255;
 8002d32:	f7fe fb93 	bl	800145c <rnd>
 8002d36:	4682      	mov	sl, r0
          uint8_t b = rnd() % 255;
 8002d38:	f7fe fb90 	bl	800145c <rnd>
 8002d3c:	23ff      	movs	r3, #255	; 0xff
 8002d3e:	fbb0 f2f3 	udiv	r2, r0, r3
 8002d42:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 8002d46:	1a80      	subs	r0, r0, r2
          uint8_t g = rnd() % 255;
 8002d48:	fbba f2f3 	udiv	r2, sl, r3
          uint8_t r = rnd() % 255;
 8002d4c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d50:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002d54:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
          uint8_t g = rnd() % 255;
 8002d58:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
          uint8_t r = rnd() % 255;
 8002d5c:	1ae4      	subs	r4, r4, r3
          uint8_t g = rnd() % 255;
 8002d5e:	ebaa 0a02 	sub.w	sl, sl, r2
          uint32_t color = 0xff000000 | (r << 16) | (g << 8) | b;
 8002d62:	0424      	lsls	r4, r4, #16
 8002d64:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 8002d68:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
          GUI_SetColor(color);
 8002d6c:	4320      	orrs	r0, r4
 8002d6e:	f011 f96b 	bl	8014048 <GUI_SetColor>
          GUI_AA_DrawLine(x1, y1, x2, y2);
 8002d72:	4643      	mov	r3, r8
 8002d74:	463a      	mov	r2, r7
 8002d76:	4649      	mov	r1, r9
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f00e fb27 	bl	80113cc <GUI_AA_DrawLine>
      {
        started = 0;
        pressed = 0;
        erasing = 0;
      }
    GUI_MULTIBUF_End();
 8002d7e:	f014 f873 	bl	8016e68 <GUI_MULTIBUF_End>
    GUI_Delay(5);
 8002d82:	2005      	movs	r0, #5
 8002d84:	f015 fce8 	bl	8018758 <GUI_Delay>
  {
 8002d88:	46c1      	mov	r9, r8
 8002d8a:	463e      	mov	r6, r7
 8002d8c:	e7c4      	b.n	8002d18 <GRAPHICS_MainTask+0x22>
 8002d8e:	46c8      	mov	r8, r9
 8002d90:	4637      	mov	r7, r6
        started = 0;
 8002d92:	461d      	mov	r5, r3
 8002d94:	e7f3      	b.n	8002d7e <GRAPHICS_MainTask+0x88>
        started = 1;
 8002d96:	2501      	movs	r5, #1
 8002d98:	e7f1      	b.n	8002d7e <GRAPHICS_MainTask+0x88>
	...

08002d9c <J01_DrawAlpha1>:
#include <stdint.h>

uint32_t J01_GetPixel(int x, int y);

void J01_DrawAlpha1(void)
{
 8002d9c:	b570      	push	{r4, r5, r6, lr}
  GUI_SetColor(GUI_BLACK);
 8002d9e:	2000      	movs	r0, #0

  GUI_SetFont(&GUI_Font32B_1);
//  GUI_SetFont(GUI_FONT_16_1);

  GUI_SetColor(GUI_WHITE);
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002da0:	2402      	movs	r4, #2
  GUI_SetColor(GUI_BLACK);
 8002da2:	f011 f951 	bl	8014048 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002da6:	4e28      	ldr	r6, [pc, #160]	; (8002e48 <J01_DrawAlpha1+0xac>)
  GUI_Clear();
 8002da8:	f011 fa82 	bl	80142b0 <GUI_Clear>
  GUI_SetFont(&GUI_Font32B_1);
 8002dac:	4827      	ldr	r0, [pc, #156]	; (8002e4c <J01_DrawAlpha1+0xb0>)
 8002dae:	f011 f9ad 	bl	801410c <GUI_SetFont>
  GUI_SetColor(GUI_WHITE);
 8002db2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002db6:	f011 f947 	bl	8014048 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2);
 8002dba:	f018 f811 	bl	801ade0 <LCD_GetXSize>
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	f018 f824 	bl	801ae0c <LCD_GetYSize>
 8002dc4:	f1a0 0214 	sub.w	r2, r0, #20
 8002dc8:	f1a5 0164 	sub.w	r1, r5, #100	; 0x64
 8002dcc:	4630      	mov	r0, r6
 8002dce:	fb92 f2f4 	sdiv	r2, r2, r4
 8002dd2:	fb91 f1f4 	sdiv	r1, r1, r4
 8002dd6:	f011 ff07 	bl	8014be8 <GUI_DispStringAt>
  HAL_Delay(1000);
 8002dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dde:	f002 fb0b 	bl	80053f8 <HAL_Delay>

  GUI_EnableAlpha(1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f013 fc38 	bl	8016658 <GUI_EnableAlpha>
  GUI_SetColor(0xa0400000); // Blue
 8002de8:	4819      	ldr	r0, [pc, #100]	; (8002e50 <J01_DrawAlpha1+0xb4>)
 8002dea:	f011 f92d 	bl	8014048 <GUI_SetColor>
  GUI_FillRect(0, 0, LCD_GetXSize() - 1, LCD_GetYSize() - 1);
 8002dee:	f017 fff7 	bl	801ade0 <LCD_GetXSize>
 8002df2:	4605      	mov	r5, r0
 8002df4:	f018 f80a 	bl	801ae0c <LCD_GetYSize>
 8002df8:	2100      	movs	r1, #0
 8002dfa:	1e6a      	subs	r2, r5, #1
 8002dfc:	1e43      	subs	r3, r0, #1
 8002dfe:	4608      	mov	r0, r1
 8002e00:	f012 fafc 	bl	80153fc <GUI_FillRect>
  GUI_EnableAlpha(0);
 8002e04:	2000      	movs	r0, #0
 8002e06:	f013 fc27 	bl	8016658 <GUI_EnableAlpha>
  HAL_Delay(1000);
 8002e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e0e:	f002 faf3 	bl	80053f8 <HAL_Delay>

  GUI_SetTextMode(GUI_TM_TRANS);
 8002e12:	4620      	mov	r0, r4
 8002e14:	f011 f9ba 	bl	801418c <GUI_SetTextMode>
  GUI_SetColor(GUI_WHITE);
 8002e18:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002e1c:	f011 f914 	bl	8014048 <GUI_SetColor>
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2 + 30);
 8002e20:	f017 ffde 	bl	801ade0 <LCD_GetXSize>
 8002e24:	4605      	mov	r5, r0
 8002e26:	f017 fff1 	bl	801ae0c <LCD_GetYSize>
 8002e2a:	f1a0 0214 	sub.w	r2, r0, #20
 8002e2e:	f1a5 0164 	sub.w	r1, r5, #100	; 0x64
 8002e32:	4630      	mov	r0, r6
 8002e34:	fb92 f2f4 	sdiv	r2, r2, r4
 8002e38:	fb91 f1f4 	sdiv	r1, r1, r4
 8002e3c:	321e      	adds	r2, #30
}
 8002e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GUI_DispStringAt("Hello world!", (LCD_GetXSize()-100)/2, (LCD_GetYSize()-20)/2 + 30);
 8002e42:	f011 bed1 	b.w	8014be8 <GUI_DispStringAt>
 8002e46:	bf00      	nop
 8002e48:	08034925 	.word	0x08034925
 8002e4c:	080280a0 	.word	0x080280a0
 8002e50:	a0400000 	.word	0xa0400000

08002e54 <J01_DrawAlpha2>:

void J01_DrawAlpha2(void)
{
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8002e56:	2000      	movs	r0, #0
  GUI_SetBkColor(GUI_BLACK);
  GUI_Clear();

  GUI_SetColor(GUI_WHITE);
  GUI_SetFont(&GUI_Font32B_1);
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002e58:	2402      	movs	r4, #2
  GUI_EnableAlpha(0);
 8002e5a:	f013 fbfd 	bl	8016658 <GUI_EnableAlpha>
  GUI_SetBkColor(GUI_BLACK);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f011 f8e6 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8002e64:	f011 fa24 	bl	80142b0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8002e68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002e6c:	f011 f8ec 	bl	8014048 <GUI_SetColor>
  GUI_SetFont(&GUI_Font32B_1);
 8002e70:	4836      	ldr	r0, [pc, #216]	; (8002f4c <J01_DrawAlpha2+0xf8>)
 8002e72:	f011 f94b 	bl	801410c <GUI_SetFont>
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002e76:	f017 ffb3 	bl	801ade0 <LCD_GetXSize>
 8002e7a:	4605      	mov	r5, r0
 8002e7c:	f017 ffc6 	bl	801ae0c <LCD_GetYSize>
 8002e80:	fb95 f1f4 	sdiv	r1, r5, r4
 8002e84:	fb90 f2f4 	sdiv	r2, r0, r4
 8002e88:	4831      	ldr	r0, [pc, #196]	; (8002f50 <J01_DrawAlpha2+0xfc>)
 8002e8a:	f011 fec1 	bl	8014c10 <GUI_DispStringHCenterAt>

  GUI_EnableAlpha(1);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f013 fbe2 	bl	8016658 <GUI_EnableAlpha>
  GUI_SetColor(GUI_MAKE_COLOR((0xC0uL << 24) | 0x0000FF));
 8002e94:	482f      	ldr	r0, [pc, #188]	; (8002f54 <J01_DrawAlpha2+0x100>)
 8002e96:	f011 f8d7 	bl	8014048 <GUI_SetColor>
//  GUI_SetAlpha(0xc0);
  GUI_FillRect(LCD_GetXSize()/2 - 100, LCD_GetYSize()/2 - 100, LCD_GetXSize()/2 + 20, LCD_GetYSize()/2 + 20);
 8002e9a:	f017 ffa1 	bl	801ade0 <LCD_GetXSize>
 8002e9e:	4605      	mov	r5, r0
 8002ea0:	f017 ffb4 	bl	801ae0c <LCD_GetYSize>
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	f017 ff9b 	bl	801ade0 <LCD_GetXSize>
 8002eaa:	4607      	mov	r7, r0
 8002eac:	f017 ffae 	bl	801ae0c <LCD_GetYSize>
 8002eb0:	fb97 f2f4 	sdiv	r2, r7, r4
 8002eb4:	fb90 f3f4 	sdiv	r3, r0, r4
 8002eb8:	fb96 f1f4 	sdiv	r1, r6, r4
 8002ebc:	fb95 f5f4 	sdiv	r5, r5, r4
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	3214      	adds	r2, #20
 8002ec4:	3964      	subs	r1, #100	; 0x64
 8002ec6:	f1a5 0064 	sub.w	r0, r5, #100	; 0x64
 8002eca:	f012 fa97 	bl	80153fc <GUI_FillRect>
  GUI_SetColor(GUI_MAKE_COLOR((0x80uL << 24) | 0x00FF00));
 8002ece:	4822      	ldr	r0, [pc, #136]	; (8002f58 <J01_DrawAlpha2+0x104>)
 8002ed0:	f011 f8ba 	bl	8014048 <GUI_SetColor>
//  GUI_SetAlpha(0x80);
  GUI_FillRect(LCD_GetXSize()/2 - 60, LCD_GetYSize()/2 - 60, LCD_GetXSize()/2 + 60, LCD_GetYSize()/2 + 60);
 8002ed4:	f017 ff84 	bl	801ade0 <LCD_GetXSize>
 8002ed8:	4605      	mov	r5, r0
 8002eda:	f017 ff97 	bl	801ae0c <LCD_GetYSize>
 8002ede:	4606      	mov	r6, r0
 8002ee0:	f017 ff7e 	bl	801ade0 <LCD_GetXSize>
 8002ee4:	4607      	mov	r7, r0
 8002ee6:	f017 ff91 	bl	801ae0c <LCD_GetYSize>
 8002eea:	fb97 f2f4 	sdiv	r2, r7, r4
 8002eee:	fb90 f3f4 	sdiv	r3, r0, r4
 8002ef2:	fb96 f1f4 	sdiv	r1, r6, r4
 8002ef6:	fb95 f5f4 	sdiv	r5, r5, r4
 8002efa:	333c      	adds	r3, #60	; 0x3c
 8002efc:	323c      	adds	r2, #60	; 0x3c
 8002efe:	393c      	subs	r1, #60	; 0x3c
 8002f00:	f1a5 003c 	sub.w	r0, r5, #60	; 0x3c
 8002f04:	f012 fa7a 	bl	80153fc <GUI_FillRect>
  GUI_SetColor(GUI_MAKE_COLOR((0x40uL << 24) | 0xFF0000));
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <J01_DrawAlpha2+0x108>)
 8002f0a:	f011 f89d 	bl	8014048 <GUI_SetColor>
//  GUI_SetAlpha(0x40);
  GUI_FillRect(LCD_GetXSize()/2 - 20, LCD_GetYSize()/2 - 20, LCD_GetXSize()/2 + 100, LCD_GetYSize()/2 + 100);
 8002f0e:	f017 ff67 	bl	801ade0 <LCD_GetXSize>
 8002f12:	4605      	mov	r5, r0
 8002f14:	f017 ff7a 	bl	801ae0c <LCD_GetYSize>
 8002f18:	4606      	mov	r6, r0
 8002f1a:	f017 ff61 	bl	801ade0 <LCD_GetXSize>
 8002f1e:	4607      	mov	r7, r0
 8002f20:	f017 ff74 	bl	801ae0c <LCD_GetYSize>
 8002f24:	fb97 f2f4 	sdiv	r2, r7, r4
 8002f28:	fb90 f3f4 	sdiv	r3, r0, r4
 8002f2c:	fb96 f1f4 	sdiv	r1, r6, r4
 8002f30:	fb95 f4f4 	sdiv	r4, r5, r4
 8002f34:	3364      	adds	r3, #100	; 0x64
 8002f36:	f1a4 0014 	sub.w	r0, r4, #20
 8002f3a:	3264      	adds	r2, #100	; 0x64
 8002f3c:	3914      	subs	r1, #20
 8002f3e:	f012 fa5d 	bl	80153fc <GUI_FillRect>
  GUI_EnableAlpha(0);
 8002f42:	2000      	movs	r0, #0
}
 8002f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8002f48:	f013 bb86 	b.w	8016658 <GUI_EnableAlpha>
 8002f4c:	080280a0 	.word	0x080280a0
 8002f50:	08034932 	.word	0x08034932
 8002f54:	c00000ff 	.word	0xc00000ff
 8002f58:	8000ff00 	.word	0x8000ff00
 8002f5c:	40ff0000 	.word	0x40ff0000

08002f60 <J01_DrawAlpha3>:

void J01_DrawAlpha3(void)
{
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  GUI_ALPHA_STATE AlphaState;

  GUI_EnableAlpha(0);
 8002f62:	2000      	movs	r0, #0
  GUI_SetBkColor(GUI_BLACK);
  GUI_Clear();

  GUI_SetColor(GUI_WHITE);
  GUI_SetFont(&GUI_Font32B_1);
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002f64:	2402      	movs	r4, #2
  GUI_EnableAlpha(0);
 8002f66:	f013 fb77 	bl	8016658 <GUI_EnableAlpha>
  GUI_SetBkColor(GUI_BLACK);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f011 f860 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8002f70:	f011 f99e 	bl	80142b0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8002f74:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002f78:	f011 f866 	bl	8014048 <GUI_SetColor>
  GUI_SetFont(&GUI_Font32B_1);
 8002f7c:	4836      	ldr	r0, [pc, #216]	; (8003058 <J01_DrawAlpha3+0xf8>)
 8002f7e:	f011 f8c5 	bl	801410c <GUI_SetFont>
  GUI_DispStringHCenterAt("This is alphablending", LCD_GetXSize()/2, LCD_GetYSize()/2);
 8002f82:	f017 ff2d 	bl	801ade0 <LCD_GetXSize>
 8002f86:	4605      	mov	r5, r0
 8002f88:	f017 ff40 	bl	801ae0c <LCD_GetYSize>
 8002f8c:	fb95 f1f4 	sdiv	r1, r5, r4
 8002f90:	fb90 f2f4 	sdiv	r2, r0, r4
 8002f94:	4831      	ldr	r0, [pc, #196]	; (800305c <J01_DrawAlpha3+0xfc>)
 8002f96:	f011 fe3b 	bl	8014c10 <GUI_DispStringHCenterAt>

  GUI_EnableAlpha(1);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f013 fb5c 	bl	8016658 <GUI_EnableAlpha>
//  GUI_SetUserAlpha(&AlphaState, 0xC0);
  GUI_SetColor(GUI_RED | 0x80000000);
 8002fa0:	482f      	ldr	r0, [pc, #188]	; (8003060 <J01_DrawAlpha3+0x100>)
 8002fa2:	f011 f851 	bl	8014048 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 100, LCD_GetYSize()/2 - 100, LCD_GetXSize()/2 + 20, LCD_GetYSize()/2 + 20);
 8002fa6:	f017 ff1b 	bl	801ade0 <LCD_GetXSize>
 8002faa:	4605      	mov	r5, r0
 8002fac:	f017 ff2e 	bl	801ae0c <LCD_GetYSize>
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	f017 ff15 	bl	801ade0 <LCD_GetXSize>
 8002fb6:	4607      	mov	r7, r0
 8002fb8:	f017 ff28 	bl	801ae0c <LCD_GetYSize>
 8002fbc:	fb97 f2f4 	sdiv	r2, r7, r4
 8002fc0:	fb90 f3f4 	sdiv	r3, r0, r4
 8002fc4:	fb96 f1f4 	sdiv	r1, r6, r4
 8002fc8:	fb95 f5f4 	sdiv	r5, r5, r4
 8002fcc:	3314      	adds	r3, #20
 8002fce:	3214      	adds	r2, #20
 8002fd0:	3964      	subs	r1, #100	; 0x64
 8002fd2:	f1a5 0064 	sub.w	r0, r5, #100	; 0x64
 8002fd6:	f012 fa11 	bl	80153fc <GUI_FillRect>
  GUI_SetColor(GUI_GREEN | 0x80000000);
 8002fda:	4822      	ldr	r0, [pc, #136]	; (8003064 <J01_DrawAlpha3+0x104>)
 8002fdc:	f011 f834 	bl	8014048 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 60, LCD_GetYSize()/2 - 60, LCD_GetXSize()/2 + 60, LCD_GetYSize()/2 + 60);
 8002fe0:	f017 fefe 	bl	801ade0 <LCD_GetXSize>
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	f017 ff11 	bl	801ae0c <LCD_GetYSize>
 8002fea:	4606      	mov	r6, r0
 8002fec:	f017 fef8 	bl	801ade0 <LCD_GetXSize>
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	f017 ff0b 	bl	801ae0c <LCD_GetYSize>
 8002ff6:	fb97 f2f4 	sdiv	r2, r7, r4
 8002ffa:	fb90 f3f4 	sdiv	r3, r0, r4
 8002ffe:	fb96 f1f4 	sdiv	r1, r6, r4
 8003002:	fb95 f5f4 	sdiv	r5, r5, r4
 8003006:	333c      	adds	r3, #60	; 0x3c
 8003008:	323c      	adds	r2, #60	; 0x3c
 800300a:	393c      	subs	r1, #60	; 0x3c
 800300c:	f1a5 003c 	sub.w	r0, r5, #60	; 0x3c
 8003010:	f012 f9f4 	bl	80153fc <GUI_FillRect>
  GUI_SetColor(GUI_BLUE | 0x80000000);
 8003014:	4814      	ldr	r0, [pc, #80]	; (8003068 <J01_DrawAlpha3+0x108>)
 8003016:	f011 f817 	bl	8014048 <GUI_SetColor>
  GUI_FillRect(LCD_GetXSize()/2 - 20, LCD_GetYSize()/2 - 20, LCD_GetXSize()/2 + 100, LCD_GetYSize()/2 + 100);
 800301a:	f017 fee1 	bl	801ade0 <LCD_GetXSize>
 800301e:	4605      	mov	r5, r0
 8003020:	f017 fef4 	bl	801ae0c <LCD_GetYSize>
 8003024:	4606      	mov	r6, r0
 8003026:	f017 fedb 	bl	801ade0 <LCD_GetXSize>
 800302a:	4607      	mov	r7, r0
 800302c:	f017 feee 	bl	801ae0c <LCD_GetYSize>
 8003030:	fb97 f2f4 	sdiv	r2, r7, r4
 8003034:	fb90 f3f4 	sdiv	r3, r0, r4
 8003038:	fb96 f1f4 	sdiv	r1, r6, r4
 800303c:	fb95 f4f4 	sdiv	r4, r5, r4
 8003040:	3364      	adds	r3, #100	; 0x64
 8003042:	f1a4 0014 	sub.w	r0, r4, #20
 8003046:	3264      	adds	r2, #100	; 0x64
 8003048:	3914      	subs	r1, #20
 800304a:	f012 f9d7 	bl	80153fc <GUI_FillRect>
//  GUI_RestoreUserAlpha(&AlphaState);
  GUI_EnableAlpha(0);
 800304e:	2000      	movs	r0, #0
}
 8003050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  GUI_EnableAlpha(0);
 8003054:	f013 bb00 	b.w	8016658 <GUI_EnableAlpha>
 8003058:	080280a0 	.word	0x080280a0
 800305c:	08034932 	.word	0x08034932
 8003060:	800000ff 	.word	0x800000ff
 8003064:	8000ff00 	.word	0x8000ff00
 8003068:	80ff0000 	.word	0x80ff0000

0800306c <J01_Shapes>:

void J01_Shapes(void)
{
 800306c:	b513      	push	{r0, r1, r4, lr}
  //  GUI_SelectLayer(1);
    GUI_SetBkColor(GUI_DARKBLUE);
 800306e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    GUI_AA_DrawLine(120, 30, 420, 55);                // OK
    GUI_DrawRect(30, 38, 60, 63);                   // BUG PenSize wrong

    GUI_FillRect(20, 38, 100, 63);

    GUI_DrawRoundedRect(150, 75, 225, 125, 15);     // BUG PenSize wrong
 8003072:	240f      	movs	r4, #15
    GUI_SetBkColor(GUI_DARKBLUE);
 8003074:	f010 ffdc 	bl	8014030 <GUI_SetBkColor>
    GUI_Clear();
 8003078:	f011 f91a 	bl	80142b0 <GUI_Clear>
    GUI_SetColor(GUI_YELLOW);
 800307c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003080:	f010 ffe2 	bl	8014048 <GUI_SetColor>
    GUI_AA_SetFactor(6);
 8003084:	2006      	movs	r0, #6
 8003086:	f00e f957 	bl	8011338 <GUI_AA_SetFactor>
    GUI_SetPenSize(6);
 800308a:	2006      	movs	r0, #6
 800308c:	f010 ff74 	bl	8013f78 <GUI_SetPenSize>
    GUI_DrawPoint(15, 15);                            // OK
 8003090:	210f      	movs	r1, #15
 8003092:	4608      	mov	r0, r1
 8003094:	f012 f95a 	bl	801534c <GUI_DrawPoint>
    GUI_DrawLine(120, 15, 420, 40);                   // OK
 8003098:	2328      	movs	r3, #40	; 0x28
 800309a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800309e:	210f      	movs	r1, #15
 80030a0:	2078      	movs	r0, #120	; 0x78
 80030a2:	f012 fd33 	bl	8015b0c <GUI_DrawLine>
    GUI_AA_DrawLine(120, 30, 420, 55);                // OK
 80030a6:	2337      	movs	r3, #55	; 0x37
 80030a8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80030ac:	211e      	movs	r1, #30
 80030ae:	2078      	movs	r0, #120	; 0x78
 80030b0:	f00e f98c 	bl	80113cc <GUI_AA_DrawLine>
    GUI_DrawRect(30, 38, 60, 63);                   // BUG PenSize wrong
 80030b4:	233f      	movs	r3, #63	; 0x3f
 80030b6:	223c      	movs	r2, #60	; 0x3c
 80030b8:	2126      	movs	r1, #38	; 0x26
 80030ba:	201e      	movs	r0, #30
 80030bc:	f00f f83e 	bl	801213c <GUI_DrawRect>
    GUI_FillRect(20, 38, 100, 63);
 80030c0:	233f      	movs	r3, #63	; 0x3f
 80030c2:	2264      	movs	r2, #100	; 0x64
 80030c4:	2126      	movs	r1, #38	; 0x26
 80030c6:	2014      	movs	r0, #20
 80030c8:	f012 f998 	bl	80153fc <GUI_FillRect>
    GUI_DrawRoundedRect(150, 75, 225, 125, 15);     // BUG PenSize wrong
 80030cc:	9400      	str	r4, [sp, #0]
 80030ce:	237d      	movs	r3, #125	; 0x7d
 80030d0:	22e1      	movs	r2, #225	; 0xe1
 80030d2:	214b      	movs	r1, #75	; 0x4b
 80030d4:	2096      	movs	r0, #150	; 0x96
 80030d6:	f012 fe8d 	bl	8015df4 <GUI_DrawRoundedRect>
    GUI_AA_DrawRoundedRect(150, 75, 225, 125, 15);    // OK
 80030da:	9400      	str	r4, [sp, #0]
 80030dc:	237d      	movs	r3, #125	; 0x7d
 80030de:	22e1      	movs	r2, #225	; 0xe1
 80030e0:	214b      	movs	r1, #75	; 0x4b
 80030e2:	2096      	movs	r0, #150	; 0x96
 80030e4:	f00d fd86 	bl	8010bf4 <GUI_AA_DrawRoundedRect>

    GUI_FillRoundedRect(375, 75, 450, 125, 15);
 80030e8:	9400      	str	r4, [sp, #0]
 80030ea:	237d      	movs	r3, #125	; 0x7d
 80030ec:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80030f0:	214b      	movs	r1, #75	; 0x4b
 80030f2:	f240 1077 	movw	r0, #375	; 0x177
 80030f6:	f013 fe49 	bl	8016d8c <GUI_FillRoundedRect>
    GUI_AA_FillRoundedRect(375, 75, 450, 125, 15);
 80030fa:	237d      	movs	r3, #125	; 0x7d
 80030fc:	9400      	str	r4, [sp, #0]
 80030fe:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003102:	214b      	movs	r1, #75	; 0x4b
 8003104:	f240 1077 	movw	r0, #375	; 0x177
 8003108:	f00d fd86 	bl	8010c18 <GUI_AA_FillRoundedRect>

    GUI_DrawCircle(45, 150, 30);                   // BUG PenSize wrong
 800310c:	221e      	movs	r2, #30
 800310e:	2196      	movs	r1, #150	; 0x96
 8003110:	202d      	movs	r0, #45	; 0x2d
 8003112:	f010 f9db 	bl	80134cc <GUI_DrawCircle>
    GUI_AA_DrawCircle(240, 136, 100);                   // BUG Outside Edges Clipped Off
 8003116:	2264      	movs	r2, #100	; 0x64
 8003118:	2188      	movs	r1, #136	; 0x88
 800311a:	20f0      	movs	r0, #240	; 0xf0
 800311c:	f00d fab4 	bl	8010688 <GUI_AA_DrawCircle>

    GUI_FillCircle(270, 150, 30);
 8003120:	221e      	movs	r2, #30
 8003122:	2196      	movs	r1, #150	; 0x96
 8003124:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003128:	f010 fa72 	bl	8013610 <GUI_FillCircle>
    GUI_AA_FillCircle(270, 150, 30);
 800312c:	221e      	movs	r2, #30
 800312e:	2196      	movs	r1, #150	; 0x96
 8003130:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003134:	f00d fa40 	bl	80105b8 <GUI_AA_FillCircle>

    GUI_DrawEllipse(120, 225, 75, 34);                // OK
 8003138:	2322      	movs	r3, #34	; 0x22
 800313a:	224b      	movs	r2, #75	; 0x4b
 800313c:	21e1      	movs	r1, #225	; 0xe1
 800313e:	2078      	movs	r0, #120	; 0x78
 8003140:	f010 fb88 	bl	8013854 <GUI_DrawEllipse>
//    GUI_AA_DrawEllipse(120, 225, 75, 34);                // Does not exist!

    GUI_FillEllipse(360, 225, 75, 34);
 8003144:	2322      	movs	r3, #34	; 0x22
 8003146:	224b      	movs	r2, #75	; 0x4b
 8003148:	21e1      	movs	r1, #225	; 0xe1
 800314a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800314e:	f010 fa81 	bl	8013654 <GUI_FillEllipse>
    GUI_AA_FillEllipse(360, 225, 75, 34);
 8003152:	2322      	movs	r3, #34	; 0x22
 8003154:	224b      	movs	r2, #75	; 0x4b
 8003156:	21e1      	movs	r1, #225	; 0xe1
 8003158:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800315c:	f00d fafc 	bl	8010758 <GUI_AA_FillEllipse>

    GUI_DispStringHCenterAt("Shapes", 195, 225);
 8003160:	22e1      	movs	r2, #225	; 0xe1
 8003162:	21c3      	movs	r1, #195	; 0xc3
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <J01_Shapes+0x104>)
}
 8003166:	b002      	add	sp, #8
 8003168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    GUI_DispStringHCenterAt("Shapes", 195, 225);
 800316c:	f011 bd50 	b.w	8014c10 <GUI_DispStringHCenterAt>
 8003170:	0803496a 	.word	0x0803496a
 8003174:	00000000 	.word	0x00000000

08003178 <J01_Sine>:

void J01_Sine(void)
{
 8003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GUI_SetBkColor(GUI_BLACK);
 800317c:	2000      	movs	r0, #0
{
 800317e:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
  GUI_Clear();
  GUI_SetColor(GUI_WHITE);
  I16 aY[460];
  double step = 360.0/460.0;
  double angle = 0.0;
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 8003182:	f04f 0a00 	mov.w	sl, #0
  double angle = 0.0;
 8003186:	2400      	movs	r4, #0
 8003188:	2500      	movs	r5, #0
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 800318a:	2600      	movs	r6, #0
 800318c:	4f42      	ldr	r7, [pc, #264]	; (8003298 <J01_Sine+0x120>)
  GUI_SetBkColor(GUI_BLACK);
 800318e:	f010 ff4f 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8003192:	f011 f88d 	bl	80142b0 <GUI_Clear>
  GUI_SetColor(GUI_WHITE);
 8003196:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800319a:	f010 ff55 	bl	8014048 <GUI_SetColor>
    aY[i] = sin(angle*2*M_PI/180) * -68 + 68;
 800319e:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 80031a2:	e9d9 8900 	ldrd	r8, r9, [r9]
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f7fd f83d 	bl	800022c <__adddf3>
 80031b2:	4642      	mov	r2, r8
 80031b4:	464b      	mov	r3, r9
 80031b6:	f7fd f9eb 	bl	8000590 <__aeabi_dmul>
 80031ba:	4632      	mov	r2, r6
 80031bc:	463b      	mov	r3, r7
 80031be:	f7fd fb11 	bl	80007e4 <__aeabi_ddiv>
 80031c2:	ec41 0b10 	vmov	d0, r0, r1
 80031c6:	f022 fe8f 	bl	8025ee8 <sin>
 80031ca:	2200      	movs	r2, #0
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <J01_Sine+0x124>)
 80031ce:	ec51 0b10 	vmov	r0, r1, d0
 80031d2:	f7fd f9dd 	bl	8000590 <__aeabi_dmul>
 80031d6:	2200      	movs	r2, #0
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <J01_Sine+0x128>)
 80031da:	f7fd f827 	bl	800022c <__adddf3>
 80031de:	f7fd fc87 	bl	8000af0 <__aeabi_d2iz>
 80031e2:	f82d 001a 	strh.w	r0, [sp, sl, lsl #1]
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 80031e6:	f10a 0a01 	add.w	sl, sl, #1
    angle += step;
 80031ea:	4620      	mov	r0, r4
 80031ec:	4629      	mov	r1, r5
 80031ee:	a328      	add	r3, pc, #160	; (adr r3, 8003290 <J01_Sine+0x118>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f7fd f81a 	bl	800022c <__adddf3>
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 80031f8:	f5ba 7fe6 	cmp.w	sl, #460	; 0x1cc
    angle += step;
 80031fc:	4604      	mov	r4, r0
 80031fe:	460d      	mov	r5, r1
  for (int i = 0; i < GUI_COUNTOF(aY); i++) {
 8003200:	d1d1      	bne.n	80031a6 <J01_Sine+0x2e>
  }
  GUI_SetColor(0xff306890);
 8003202:	4828      	ldr	r0, [pc, #160]	; (80032a4 <J01_Sine+0x12c>)
  GUI_SetPenSize(2);
 8003204:	2404      	movs	r4, #4
  GUI_SetColor(0xff306890);
 8003206:	f010 ff1f 	bl	8014048 <GUI_SetColor>
  GUI_SetPenSize(2);
 800320a:	2002      	movs	r0, #2
 800320c:	f010 feb4 	bl	8013f78 <GUI_SetPenSize>
  for (uint16_t y = 4; y < 272; y += 44)
  {
    GUI_DrawHLine(y, 10, 470);
 8003210:	4620      	mov	r0, r4
 8003212:	342c      	adds	r4, #44	; 0x2c
 8003214:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003218:	210a      	movs	r1, #10
 800321a:	f011 fffb 	bl	8015214 <GUI_DrawHLine>
  for (uint16_t y = 4; y < 272; y += 44)
 800321e:	f5b4 7f9c 	cmp.w	r4, #312	; 0x138
 8003222:	d1f5      	bne.n	8003210 <J01_Sine+0x98>
 8003224:	240a      	movs	r4, #10
  }
  for (uint16_t x = 10; x < 480; x += 46)
  {
    GUI_DrawVLine(x, 4, 268);
 8003226:	4620      	mov	r0, r4
 8003228:	342e      	adds	r4, #46	; 0x2e
 800322a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800322e:	2104      	movs	r1, #4
 8003230:	f012 f8ba 	bl	80153a8 <GUI_DrawVLine>
  for (uint16_t x = 10; x < 480; x += 46)
 8003234:	f5b4 7f01 	cmp.w	r4, #516	; 0x204
 8003238:	d1f5      	bne.n	8003226 <J01_Sine+0xae>
  }
  GUI_SetPenSize(6);
 800323a:	2006      	movs	r0, #6
 800323c:	f010 fe9c 	bl	8013f78 <GUI_SetPenSize>
  GUI_SetColor(0xff00ff40);
 8003240:	4819      	ldr	r0, [pc, #100]	; (80032a8 <J01_Sine+0x130>)
 8003242:	f010 ff01 	bl	8014048 <GUI_SetColor>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 69);
 8003246:	4668      	mov	r0, sp
 8003248:	2345      	movs	r3, #69	; 0x45
 800324a:	220a      	movs	r2, #10
 800324c:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003250:	f011 ff54 	bl	80150fc <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 68);
 8003254:	4668      	mov	r0, sp
 8003256:	2344      	movs	r3, #68	; 0x44
 8003258:	220a      	movs	r2, #10
 800325a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800325e:	f011 ff4d 	bl	80150fc <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 67);
 8003262:	4668      	mov	r0, sp
 8003264:	2343      	movs	r3, #67	; 0x43
 8003266:	220a      	movs	r2, #10
 8003268:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800326c:	f011 ff46 	bl	80150fc <GUI_DrawGraph>
  GUI_DrawGraph(aY, GUI_COUNTOF(aY), 10, 66);
 8003270:	2342      	movs	r3, #66	; 0x42
 8003272:	220a      	movs	r2, #10
 8003274:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003278:	4668      	mov	r0, sp
 800327a:	f011 ff3f 	bl	80150fc <GUI_DrawGraph>
}
 800327e:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
 8003282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003286:	bf00      	nop
 8003288:	54442d18 	.word	0x54442d18
 800328c:	400921fb 	.word	0x400921fb
 8003290:	642c8591 	.word	0x642c8591
 8003294:	3fe90b21 	.word	0x3fe90b21
 8003298:	40668000 	.word	0x40668000
 800329c:	c0510000 	.word	0xc0510000
 80032a0:	40510000 	.word	0x40510000
 80032a4:	ff306890 	.word	0xff306890
 80032a8:	ff00ff40 	.word	0xff00ff40

080032ac <J01_BigDigits>:

void J01_BigDigits(void)
{
 80032ac:	b508      	push	{r3, lr}
  GUI_SetBkColor(GUI_DARKBLUE);
 80032ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80032b2:	f010 febd 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 80032b6:	f010 fffb 	bl	80142b0 <GUI_Clear>
  GUI_SetColor(GUI_YELLOW);
 80032ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032be:	f010 fec3 	bl	8014048 <GUI_SetColor>
  GUI_SetFont(&GUI_FontD80);
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <J01_BigDigits+0x2c>)
 80032c4:	f010 ff22 	bl	801410c <GUI_SetFont>
  GUI_DispStringAt("1234.456", 10, 100);
 80032c8:	2264      	movs	r2, #100	; 0x64
 80032ca:	210a      	movs	r1, #10
 80032cc:	4803      	ldr	r0, [pc, #12]	; (80032dc <J01_BigDigits+0x30>)
}
 80032ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispStringAt("1234.456", 10, 100);
 80032d2:	f011 bc89 	b.w	8014be8 <GUI_DispStringAt>
 80032d6:	bf00      	nop
 80032d8:	080322b8 	.word	0x080322b8
 80032dc:	0803491c 	.word	0x0803491c

080032e0 <J01_PieChart>:

void J01_PieChart(void)
{
 80032e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  //  GUI_SelectLayer(1);
    GUI_SetBkColor(GUI_GRAY);
 80032e4:	4820      	ldr	r0, [pc, #128]	; (8003368 <J01_PieChart+0x88>)
{
 80032e6:	b08f      	sub	sp, #60	; 0x3c
    GUI_Clear();
    GUI_SetPenSize(1);

    int a0, a1;
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 80032e8:	4c20      	ldr	r4, [pc, #128]	; (800336c <J01_PieChart+0x8c>)
    GUI_SetBkColor(GUI_GRAY);
 80032ea:	f010 fea1 	bl	8014030 <GUI_SetBkColor>
    GUI_Clear();
 80032ee:	f010 ffdf 	bl	80142b0 <GUI_Clear>
    GUI_SetPenSize(1);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f010 fe40 	bl	8013f78 <GUI_SetPenSize>
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 80032f8:	ad02      	add	r5, sp, #8
 80032fa:	f10d 0920 	add.w	r9, sp, #32
 80032fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003302:	e894 0003 	ldmia.w	r4, {r0, r1}
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8003306:	3408      	adds	r4, #8
    const unsigned aValues[]  = { 100, 135, 190, 240, 340, 360};
 8003308:	e885 0003 	stmia.w	r5, {r0, r1}
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 800330c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330e:	ad08      	add	r5, sp, #32
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	e894 0003 	ldmia.w	r4, {r0, r1}
        GUI_CYAN, GUI_MAGENTA, GUI_YELLOW };
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 8003316:	2400      	movs	r4, #0
    const GUI_COLOR aColors[] = { GUI_BLUE, GUI_GREEN,   GUI_RED,
 8003318:	e885 0003 	stmia.w	r5, {r0, r1}
 800331c:	4626      	mov	r6, r4
 800331e:	ad01      	add	r5, sp, #4
      a0 = (i == 0) ? 0 : aValues[i - 1];
      a1 = aValues[i];
      GUI_SetColor(aColors[i]);
      GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8003320:	46a0      	mov	r8, r4
      a1 = aValues[i];
 8003322:	f855 7f04 	ldr.w	r7, [r5, #4]!
      GUI_SetColor(aColors[i]);
 8003326:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 800332a:	3401      	adds	r4, #1
      GUI_SetColor(aColors[i]);
 800332c:	f010 fe8c 	bl	8014048 <GUI_SetColor>
      GUI_DrawPie(150, 136, 120, a0, a1, 0);
 8003330:	4633      	mov	r3, r6
 8003332:	2278      	movs	r2, #120	; 0x78
 8003334:	2188      	movs	r1, #136	; 0x88
 8003336:	2096      	movs	r0, #150	; 0x96
 8003338:	e88d 0180 	stmia.w	sp, {r7, r8}
 800333c:	f011 ff96 	bl	801526c <GUI_DrawPie>
    for (int i = 0; i < GUI_COUNTOF(aValues); i++) {
 8003340:	2c06      	cmp	r4, #6
 8003342:	d10f      	bne.n	8003364 <J01_PieChart+0x84>
    }
    GUI_SetFont(&GUI_Font32_1);
 8003344:	480a      	ldr	r0, [pc, #40]	; (8003370 <J01_PieChart+0x90>)
 8003346:	f010 fee1 	bl	801410c <GUI_SetFont>
    GUI_SetColor(GUI_WHITE);
 800334a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800334e:	f010 fe7b 	bl	8014048 <GUI_SetColor>
    GUI_DispStringHCenterAt("Pie", 320, 150);
 8003352:	2296      	movs	r2, #150	; 0x96
 8003354:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003358:	4806      	ldr	r0, [pc, #24]	; (8003374 <J01_PieChart+0x94>)
}
 800335a:	b00f      	add	sp, #60	; 0x3c
 800335c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GUI_DispStringHCenterAt("Pie", 320, 150);
 8003360:	f011 bc56 	b.w	8014c10 <GUI_DispStringHCenterAt>
      a0 = (i == 0) ? 0 : aValues[i - 1];
 8003364:	682e      	ldr	r6, [r5, #0]
 8003366:	e7dc      	b.n	8003322 <J01_PieChart+0x42>
 8003368:	00808080 	.word	0x00808080
 800336c:	080270b4 	.word	0x080270b4
 8003370:	0802bef8 	.word	0x0802bef8
 8003374:	08034948 	.word	0x08034948

08003378 <J01_DrawModes>:

void J01_DrawModes(void)
{
 8003378:	b570      	push	{r4, r5, r6, lr}
  const GUI_POINT aPoints[] = {
 800337a:	4a35      	ldr	r2, [pc, #212]	; (8003450 <J01_DrawModes+0xd8>)
{
 800337c:	b086      	sub	sp, #24
  };

  GUI_SetBkColor(GUI_GREEN);
  GUI_Clear();
  GUI_SetColor(GUI_RED);
  for (int i = 10; i <= 470; i += 10) {
 800337e:	240a      	movs	r4, #10
  const GUI_POINT aPoints[] = {
 8003380:	6810      	ldr	r0, [r2, #0]
 8003382:	466b      	mov	r3, sp
 8003384:	6851      	ldr	r1, [r2, #4]
 8003386:	c303      	stmia	r3!, {r0, r1}
 8003388:	6890      	ldr	r0, [r2, #8]
 800338a:	6018      	str	r0, [r3, #0]
  GUI_SetBkColor(GUI_GREEN);
 800338c:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8003390:	f010 fe4e 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8003394:	f010 ff8c 	bl	80142b0 <GUI_Clear>
  GUI_SetColor(GUI_RED);
 8003398:	20ff      	movs	r0, #255	; 0xff
 800339a:	f010 fe55 	bl	8014048 <GUI_SetColor>
    GUI_DrawLine(i, 30, i, 60);
 800339e:	4622      	mov	r2, r4
 80033a0:	4620      	mov	r0, r4
  for (int i = 10; i <= 470; i += 10) {
 80033a2:	340a      	adds	r4, #10
    GUI_DrawLine(i, 30, i, 60);
 80033a4:	233c      	movs	r3, #60	; 0x3c
 80033a6:	211e      	movs	r1, #30
 80033a8:	f012 fbb0 	bl	8015b0c <GUI_DrawLine>
  for (int i = 10; i <= 470; i += 10) {
 80033ac:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80033b0:	d1f5      	bne.n	800339e <J01_DrawModes+0x26>
 80033b2:	240a      	movs	r4, #10
//    HAL_Delay(20);
  };
  for (int i = 10; i < 50; i += 3) {
    GUI_DrawCircle(80, 160, i);
 80033b4:	4622      	mov	r2, r4
  for (int i = 10; i < 50; i += 3) {
 80033b6:	3403      	adds	r4, #3
    GUI_DrawCircle(80, 160, i);
 80033b8:	21a0      	movs	r1, #160	; 0xa0
 80033ba:	2050      	movs	r0, #80	; 0x50
 80033bc:	f010 f886 	bl	80134cc <GUI_DrawCircle>
  for (int i = 10; i < 50; i += 3) {
 80033c0:	2c34      	cmp	r4, #52	; 0x34
 80033c2:	d1f7      	bne.n	80033b4 <J01_DrawModes+0x3c>
//    HAL_Delay(20);
  };
  GUI_SetColor(0x00FFFF00);
 80033c4:	24c8      	movs	r4, #200	; 0xc8
 80033c6:	2500      	movs	r5, #0
  for (int i = 0; i < 4; i += 1) {
    GUI_SetColor(0x000FFFF0 << i*0x6);
 80033c8:	4e22      	ldr	r6, [pc, #136]	; (8003454 <J01_DrawModes+0xdc>)
  GUI_SetColor(0x00FFFF00);
 80033ca:	4823      	ldr	r0, [pc, #140]	; (8003458 <J01_DrawModes+0xe0>)
 80033cc:	f010 fe3c 	bl	8014048 <GUI_SetColor>
    GUI_SetColor(0x000FFFF0 << i*0x6);
 80033d0:	fa06 f005 	lsl.w	r0, r6, r5
 80033d4:	3506      	adds	r5, #6
 80033d6:	f010 fe37 	bl	8014048 <GUI_SetColor>
    GUI_FillCircle(200+(i*15),150+(i*15),30);
 80033da:	f1a4 0132 	sub.w	r1, r4, #50	; 0x32
 80033de:	4620      	mov	r0, r4
 80033e0:	340f      	adds	r4, #15
 80033e2:	221e      	movs	r2, #30
 80033e4:	f010 f914 	bl	8013610 <GUI_FillCircle>
  for (int i = 0; i < 4; i += 1) {
 80033e8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80033ec:	d1f0      	bne.n	80033d0 <J01_DrawModes+0x58>
 80033ee:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80033f2:	2500      	movs	r5, #0
//    HAL_Delay(20);
  };
  for (int i = 0; i < 4; i += 1) {
    GUI_SetColor(0x000FFFF0 << i*0x6);
 80033f4:	4e17      	ldr	r6, [pc, #92]	; (8003454 <J01_DrawModes+0xdc>)
 80033f6:	fa06 f005 	lsl.w	r0, r6, r5
 80033fa:	3506      	adds	r5, #6
 80033fc:	f010 fe24 	bl	8014048 <GUI_SetColor>
    GUI_AA_FillCircle(400+(i*15),150+(i*15),30);
 8003400:	f1a4 01fa 	sub.w	r1, r4, #250	; 0xfa
 8003404:	4620      	mov	r0, r4
 8003406:	340f      	adds	r4, #15
 8003408:	221e      	movs	r2, #30
 800340a:	f00d f8d5 	bl	80105b8 <GUI_AA_FillCircle>
  for (int i = 0; i < 4; i += 1) {
 800340e:	f5b4 7fe6 	cmp.w	r4, #460	; 0x1cc
 8003412:	d1f0      	bne.n	80033f6 <J01_DrawModes+0x7e>
//    HAL_Delay(20);
  };
  GUI_POINT aEnlargedPoints[GUI_COUNTOF(aPoints)];

  GUI_SetDrawMode(GUI_DM_XOR);
 8003414:	2001      	movs	r0, #1
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 8003416:	2405      	movs	r4, #5
  GUI_SetDrawMode(GUI_DM_XOR);
 8003418:	f010 fe6c 	bl	80140f4 <GUI_SetDrawMode>
  GUI_FillPolygon(aPoints, GUI_COUNTOF(aPoints), 140, 110);
 800341c:	236e      	movs	r3, #110	; 0x6e
 800341e:	228c      	movs	r2, #140	; 0x8c
 8003420:	2103      	movs	r1, #3
 8003422:	4668      	mov	r0, sp
 8003424:	f013 fc6e 	bl	8016d04 <GUI_FillPolygon>
  for (int i = 1; i < 10; i++) {
    GUI_EnlargePolygon(aEnlargedPoints, aPoints, GUI_COUNTOF(aPoints), i * 5);
 8003428:	4623      	mov	r3, r4
 800342a:	2203      	movs	r2, #3
 800342c:	4669      	mov	r1, sp
 800342e:	a803      	add	r0, sp, #12
 8003430:	3405      	adds	r4, #5
 8003432:	f013 fd8f 	bl	8016f54 <GUI_EnlargePolygon>
    GUI_FillPolygon(aEnlargedPoints, GUI_COUNTOF(aPoints), 140, 110);
 8003436:	236e      	movs	r3, #110	; 0x6e
 8003438:	228c      	movs	r2, #140	; 0x8c
 800343a:	2103      	movs	r1, #3
 800343c:	a803      	add	r0, sp, #12
 800343e:	f013 fc61 	bl	8016d04 <GUI_FillPolygon>
  for (int i = 1; i < 10; i++) {
 8003442:	2c32      	cmp	r4, #50	; 0x32
 8003444:	d1f0      	bne.n	8003428 <J01_DrawModes+0xb0>
  };
  GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 8003446:	2000      	movs	r0, #0
 8003448:	f010 fe54 	bl	80140f4 <GUI_SetDrawMode>
}
 800344c:	b006      	add	sp, #24
 800344e:	bd70      	pop	{r4, r5, r6, pc}
 8003450:	080270e4 	.word	0x080270e4
 8003454:	000ffff0 	.word	0x000ffff0
 8003458:	00ffff00 	.word	0x00ffff00

0800345c <J01_GetPixel>:
  dmc_puthex8cr(color);

}

uint32_t J01_GetPixel(int x, int y)
{
 800345c:	b508      	push	{r3, lr}
  // GUIConf.h: #define GUI_USE_ARGB 1
  return GUI_Index2Color(GUI_GetPixelIndex(x, y)) & 0x00ffffff;
 800345e:	f017 fdff 	bl	801b060 <GUI_GetPixelIndex>
 8003462:	f010 fc91 	bl	8013d88 <GUI_Index2Color>
}
 8003466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800346a:	bd08      	pop	{r3, pc}

0800346c <J01_PixelIndex>:
{
 800346c:	b538      	push	{r3, r4, r5, lr}
  dmc_puts("color 0: ");
 800346e:	4c27      	ldr	r4, [pc, #156]	; (800350c <J01_PixelIndex+0xa0>)
 8003470:	4620      	mov	r0, r4
 8003472:	f7fd ffa8 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 8003476:	2000      	movs	r0, #0
 8003478:	f7fd ffd3 	bl	8001422 <dmc_puthex8cr>
  GUI_SetBkColor(color);
 800347c:	2000      	movs	r0, #0
 800347e:	f010 fdd7 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8003482:	f010 ff15 	bl	80142b0 <GUI_Clear>
  color = J01_GetPixel(60, 60);
 8003486:	213c      	movs	r1, #60	; 0x3c
 8003488:	4608      	mov	r0, r1
 800348a:	f7ff ffe7 	bl	800345c <J01_GetPixel>
 800348e:	4605      	mov	r5, r0
  dmc_puts("color 0: ");
 8003490:	4620      	mov	r0, r4
  dmc_puts("color 1: ");
 8003492:	4c1f      	ldr	r4, [pc, #124]	; (8003510 <J01_PixelIndex+0xa4>)
  dmc_puts("color 0: ");
 8003494:	f7fd ff97 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 8003498:	4628      	mov	r0, r5
 800349a:	f7fd ffc2 	bl	8001422 <dmc_puthex8cr>
  dmc_puts("color 1: ");
 800349e:	4620      	mov	r0, r4
 80034a0:	f7fd ff91 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80034a4:	20ff      	movs	r0, #255	; 0xff
 80034a6:	f7fd ffbc 	bl	8001422 <dmc_puthex8cr>
  GUI_SetColor(color);
 80034aa:	20ff      	movs	r0, #255	; 0xff
 80034ac:	f010 fdcc 	bl	8014048 <GUI_SetColor>
  GUI_FillRect(10, 10, 100, 100);
 80034b0:	2364      	movs	r3, #100	; 0x64
 80034b2:	210a      	movs	r1, #10
 80034b4:	461a      	mov	r2, r3
 80034b6:	4608      	mov	r0, r1
 80034b8:	f011 ffa0 	bl	80153fc <GUI_FillRect>
  color = J01_GetPixel(60, 60);
 80034bc:	213c      	movs	r1, #60	; 0x3c
 80034be:	4608      	mov	r0, r1
 80034c0:	f7ff ffcc 	bl	800345c <J01_GetPixel>
 80034c4:	4605      	mov	r5, r0
  dmc_puts("color 1: ");
 80034c6:	4620      	mov	r0, r4
  dmc_puts("color 2: ");
 80034c8:	4c12      	ldr	r4, [pc, #72]	; (8003514 <J01_PixelIndex+0xa8>)
  dmc_puts("color 1: ");
 80034ca:	f7fd ff7c 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7fd ffa7 	bl	8001422 <dmc_puthex8cr>
  dmc_puts("color 2: ");
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7fd ff76 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 80034da:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80034de:	f7fd ffa0 	bl	8001422 <dmc_puthex8cr>
  GUI_SetColor(color);
 80034e2:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80034e6:	f010 fdaf 	bl	8014048 <GUI_SetColor>
  GUI_DrawPixel(60, 60);
 80034ea:	213c      	movs	r1, #60	; 0x3c
 80034ec:	4608      	mov	r0, r1
 80034ee:	f011 fef3 	bl	80152d8 <GUI_DrawPixel>
  color = J01_GetPixel(60, 60);
 80034f2:	213c      	movs	r1, #60	; 0x3c
 80034f4:	4608      	mov	r0, r1
 80034f6:	f7ff ffb1 	bl	800345c <J01_GetPixel>
 80034fa:	4605      	mov	r5, r0
  dmc_puts("color 2: ");
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7fd ff62 	bl	80013c6 <dmc_puts>
  dmc_puthex8cr(color);
 8003502:	4628      	mov	r0, r5
}
 8003504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  dmc_puthex8cr(color);
 8003508:	f7fd bf8b 	b.w	8001422 <dmc_puthex8cr>
 800350c:	0803494c 	.word	0x0803494c
 8003510:	08034956 	.word	0x08034956
 8003514:	08034960 	.word	0x08034960

08003518 <J01_TextVersionString1>:
#include "GUI.h"

void J01_TextVersionString1(void)
{
 8003518:	b538      	push	{r3, r4, r5, lr}
  // Erase the screen
  InitNew();
 800351a:	f7ff fb71 	bl	8002c00 <InitNew>

  // Set the font
  GUI_SetFont(GUI_FONT_32_1);
 800351e:	480d      	ldr	r0, [pc, #52]	; (8003554 <J01_TextVersionString1+0x3c>)
 8003520:	f010 fdf4 	bl	801410c <GUI_SetFont>
  // Get the current font height
//  int textWidth = GUI_GetStringDistX(GUI_GetVersionString());
  int fsize = GUI_GetFontSizeY();
 8003524:	f010 fbfe 	bl	8013d24 <GUI_GetFontSizeY>
  int xPos = LCD_GetXSize() / 2;
 8003528:	f017 fc5a 	bl	801ade0 <LCD_GetXSize>
 800352c:	4605      	mov	r5, r0
  int yPos = (LCD_GetYSize() - yPos) / 2;
 800352e:	f017 fc6d 	bl	801ae0c <LCD_GetYSize>
 8003532:	4604      	mov	r4, r0
  GUI_SetColor(GUI_WHITE);
 8003534:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003538:	f010 fd86 	bl	8014048 <GUI_SetColor>
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 800353c:	f010 fc18 	bl	8013d70 <GUI_GetVersionString>
  int yPos = (LCD_GetYSize() - yPos) / 2;
 8003540:	2102      	movs	r1, #2
 8003542:	fb94 f2f1 	sdiv	r2, r4, r1
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 8003546:	fb95 f1f1 	sdiv	r1, r5, r1
 800354a:	3a0a      	subs	r2, #10
}
 800354c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  GUI_DispStringHCenterAt(GUI_GetVersionString(), xPos, yPos - 10);
 8003550:	f011 bb5e 	b.w	8014c10 <GUI_DispStringHCenterAt>
 8003554:	0802bef8 	.word	0x0802bef8

08003558 <J01_TextVersionString2>:

void J01_TextVersionString2(void)
{
 8003558:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GUI_SetBkColor(GUI_BLUE);
 800355a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  GUI_Clear();
  GUI_SetDrawMode(GUI_DM_NORMAL);
  GUI_SetColor(GUI_WHITE);
  GUI_DrawGradientV(20, 20, LCD_GetXSize() - 20, LCD_GetYSize() - 20, GUI_RED, GUI_YELLOW);
  int xPos = LCD_GetXSize() / 2;
 800355e:	2602      	movs	r6, #2
  GUI_SetBkColor(GUI_BLUE);
 8003560:	f010 fd66 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8003564:	f010 fea4 	bl	80142b0 <GUI_Clear>
  GUI_SetDrawMode(GUI_DM_NORMAL);
 8003568:	2000      	movs	r0, #0
 800356a:	f010 fdc3 	bl	80140f4 <GUI_SetDrawMode>
  GUI_SetColor(GUI_WHITE);
 800356e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003572:	f010 fd69 	bl	8014048 <GUI_SetColor>
  GUI_DrawGradientV(20, 20, LCD_GetXSize() - 20, LCD_GetYSize() - 20, GUI_RED, GUI_YELLOW);
 8003576:	f017 fc33 	bl	801ade0 <LCD_GetXSize>
 800357a:	4604      	mov	r4, r0
 800357c:	f017 fc46 	bl	801ae0c <LCD_GetYSize>
 8003580:	2114      	movs	r1, #20
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003588:	e88d 000c 	stmia.w	sp, {r2, r3}
 800358c:	f1a0 0314 	sub.w	r3, r0, #20
 8003590:	f1a4 0214 	sub.w	r2, r4, #20
 8003594:	4608      	mov	r0, r1
 8003596:	f011 fcd7 	bl	8014f48 <GUI_DrawGradientV>
  int xPos = LCD_GetXSize() / 2;
 800359a:	f017 fc21 	bl	801ade0 <LCD_GetXSize>
 800359e:	fb90 f4f6 	sdiv	r4, r0, r6
  int yPos = LCD_GetYSize() / 2;
 80035a2:	f017 fc33 	bl	801ae0c <LCD_GetYSize>
 80035a6:	fb90 f5f6 	sdiv	r5, r0, r6
  GUI_SetTextMode(GUI_TM_TRANS);
 80035aa:	4630      	mov	r0, r6
 80035ac:	f010 fdee 	bl	801418c <GUI_SetTextMode>
  GUI_SetFont(GUI_FONT_COMIC24B_ASCII);
 80035b0:	4812      	ldr	r0, [pc, #72]	; (80035fc <J01_TextVersionString2+0xa4>)
 80035b2:	f010 fdab 	bl	801410c <GUI_SetFont>
  GUI_DispStringHCenterAt("Hello world!", xPos, yPos - 30);
 80035b6:	f1a5 021e 	sub.w	r2, r5, #30
 80035ba:	4621      	mov	r1, r4
 80035bc:	4810      	ldr	r0, [pc, #64]	; (8003600 <J01_TextVersionString2+0xa8>)
 80035be:	f011 fb27 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_DispStringHCenterAt("STemWin", xPos, yPos + 15);
 80035c2:	f105 020f 	add.w	r2, r5, #15
 80035c6:	4621      	mov	r1, r4
 80035c8:	480e      	ldr	r0, [pc, #56]	; (8003604 <J01_TextVersionString2+0xac>)
 80035ca:	f011 fb21 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_DispString(" ");
 80035ce:	480e      	ldr	r0, [pc, #56]	; (8003608 <J01_TextVersionString2+0xb0>)
 80035d0:	f011 fb06 	bl	8014be0 <GUI_DispString>
  GUI_DispString(GUI_GetVersionString());
 80035d4:	f010 fbcc 	bl	8013d70 <GUI_GetVersionString>
 80035d8:	f011 fb02 	bl	8014be0 <GUI_DispString>

  GUI_SetFont(&GUI_Font10S_ASCII);
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <J01_TextVersionString2+0xb4>)
 80035de:	f010 fd95 	bl	801410c <GUI_SetFont>
  GUI_DispStringHCenterAt("Compiled " __DATE__ " "__TIME__, xPos, yPos + 60);
 80035e2:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80035e6:	4621      	mov	r1, r4
 80035e8:	4809      	ldr	r0, [pc, #36]	; (8003610 <J01_TextVersionString2+0xb8>)
 80035ea:	f011 fb11 	bl	8014c10 <GUI_DispStringHCenterAt>

  GUI_SetTextMode(GUI_TM_NORMAL);
 80035ee:	2000      	movs	r0, #0
}
 80035f0:	b002      	add	sp, #8
 80035f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GUI_SetTextMode(GUI_TM_NORMAL);
 80035f6:	f010 bdc9 	b.w	801418c <GUI_SetTextMode>
 80035fa:	bf00      	nop
 80035fc:	08030db8 	.word	0x08030db8
 8003600:	08034925 	.word	0x08034925
 8003604:	08034a87 	.word	0x08034a87
 8003608:	08034954 	.word	0x08034954
 800360c:	080278fc 	.word	0x080278fc
 8003610:	08034a8f 	.word	0x08034a8f

08003614 <J01_TextModes>:

void J01_TextModes(void)
{
 8003614:	b508      	push	{r3, lr}
  InitNew();
 8003616:	f7ff faf3 	bl	8002c00 <InitNew>

//  GUI_SelectLayer(1);
  GUI_SetFont(&GUI_Font8x18);
 800361a:	4827      	ldr	r0, [pc, #156]	; (80036b8 <J01_TextModes+0xa4>)
 800361c:	f010 fd76 	bl	801410c <GUI_SetFont>
  GUI_SetBkColor(GUI_BLUE);
 8003620:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8003624:	f010 fd04 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 8003628:	f010 fe42 	bl	80142b0 <GUI_Clear>
  GUI_SetPenSize(10);
 800362c:	200a      	movs	r0, #10
 800362e:	f010 fca3 	bl	8013f78 <GUI_SetPenSize>
  GUI_SetColor(GUI_RED);
 8003632:	20ff      	movs	r0, #255	; 0xff
 8003634:	f010 fd08 	bl	8014048 <GUI_SetColor>
  GUI_DrawLine(100, 65, 380, 205);
 8003638:	23cd      	movs	r3, #205	; 0xcd
 800363a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800363e:	2141      	movs	r1, #65	; 0x41
 8003640:	2064      	movs	r0, #100	; 0x64
 8003642:	f012 fa63 	bl	8015b0c <GUI_DrawLine>
  GUI_DrawLine(100, 205, 380, 65);
 8003646:	2341      	movs	r3, #65	; 0x41
 8003648:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800364c:	21cd      	movs	r1, #205	; 0xcd
 800364e:	2064      	movs	r0, #100	; 0x64
 8003650:	f012 fa5c 	bl	8015b0c <GUI_DrawLine>
  GUI_SetBkColor(GUI_BLACK);
 8003654:	2000      	movs	r0, #0
 8003656:	f010 fceb 	bl	8014030 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 800365a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800365e:	f010 fcf3 	bl	8014048 <GUI_SetColor>
  GUI_SetTextMode(GUI_TM_NORMAL);
 8003662:	2000      	movs	r0, #0
 8003664:	f010 fd92 	bl	801418c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_NORMAL"            , 240, 70);
 8003668:	2246      	movs	r2, #70	; 0x46
 800366a:	21f0      	movs	r1, #240	; 0xf0
 800366c:	4813      	ldr	r0, [pc, #76]	; (80036bc <J01_TextModes+0xa8>)
 800366e:	f011 facf 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_REV);
 8003672:	2004      	movs	r0, #4
 8003674:	f010 fd8a 	bl	801418c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_REV"               , 240, 100);
 8003678:	2264      	movs	r2, #100	; 0x64
 800367a:	21f0      	movs	r1, #240	; 0xf0
 800367c:	4810      	ldr	r0, [pc, #64]	; (80036c0 <J01_TextModes+0xac>)
 800367e:	f011 fac7 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_TRANS);
 8003682:	2002      	movs	r0, #2
 8003684:	f010 fd82 	bl	801418c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS"             , 240, 130);
 8003688:	2282      	movs	r2, #130	; 0x82
 800368a:	21f0      	movs	r1, #240	; 0xf0
 800368c:	480d      	ldr	r0, [pc, #52]	; (80036c4 <J01_TextModes+0xb0>)
 800368e:	f011 fabf 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_XOR);
 8003692:	2001      	movs	r0, #1
 8003694:	f010 fd7a 	bl	801418c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_XOR"               , 240, 160);
 8003698:	22a0      	movs	r2, #160	; 0xa0
 800369a:	21f0      	movs	r1, #240	; 0xf0
 800369c:	480a      	ldr	r0, [pc, #40]	; (80036c8 <J01_TextModes+0xb4>)
 800369e:	f011 fab7 	bl	8014c10 <GUI_DispStringHCenterAt>
  GUI_SetTextMode(GUI_TM_TRANS | GUI_TM_REV);
 80036a2:	2006      	movs	r0, #6
 80036a4:	f010 fd72 	bl	801418c <GUI_SetTextMode>
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS | GUI_TM_REV", 240, 190);
 80036a8:	22be      	movs	r2, #190	; 0xbe
 80036aa:	21f0      	movs	r1, #240	; 0xf0
 80036ac:	4807      	ldr	r0, [pc, #28]	; (80036cc <J01_TextModes+0xb8>)
}
 80036ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispStringHCenterAt("Text mode GUI_TM_TRANS | GUI_TM_REV", 240, 190);
 80036b2:	f011 baad 	b.w	8014c10 <GUI_DispStringHCenterAt>
 80036b6:	bf00      	nop
 80036b8:	08030140 	.word	0x08030140
 80036bc:	080349f5 	.word	0x080349f5
 80036c0:	08034a0d 	.word	0x08034a0d
 80036c4:	08034a22 	.word	0x08034a22
 80036c8:	08034a39 	.word	0x08034a39
 80036cc:	08034a4e 	.word	0x08034a4e

080036d0 <J01_DispFloat>:

void J01_DispFloat(void)
{
 80036d0:	b508      	push	{r3, lr}
 80036d2:	ed2d 8b02 	vpush	{d8}
  //***** "floating point values" *********************************

//  GUI_SelectLayer(0);
  float f = 123.45678;
  GUI_Clear();
 80036d6:	f010 fdeb 	bl	80142b0 <GUI_Clear>
  GUI_SetBkColor(GUI_BLACK);
 80036da:	2000      	movs	r0, #0
 80036dc:	f010 fca8 	bl	8014030 <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 80036e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80036e4:	f010 fcb0 	bl	8014048 <GUI_SetColor>
  GUI_SetTextMode(GUI_TM_NORMAL);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f010 fd4f 	bl	801418c <GUI_SetTextMode>
  GUI_SetFont(&GUI_Font8x16);
  GUI_DispStringAt("GUI_DispFloat:\n", 0, 20);
  GUI_DispFloat(f, 9);
 80036ee:	eddf 8a34 	vldr	s17, [pc, #208]	; 80037c0 <J01_DispFloat+0xf0>
  GUI_SetFont(&GUI_Font8x16);
 80036f2:	4834      	ldr	r0, [pc, #208]	; (80037c4 <J01_DispFloat+0xf4>)
 80036f4:	f010 fd0a 	bl	801410c <GUI_SetFont>
  GUI_DispStringAt("GUI_DispFloat:\n", 0, 20);
 80036f8:	2214      	movs	r2, #20
 80036fa:	2100      	movs	r1, #0
 80036fc:	4832      	ldr	r0, [pc, #200]	; (80037c8 <J01_DispFloat+0xf8>)
 80036fe:	f011 fa73 	bl	8014be8 <GUI_DispStringAt>
  GUI_GotoX(100);
  GUI_DispFloat(-f, 9);
 8003702:	ed9f 8a32 	vldr	s16, [pc, #200]	; 80037cc <J01_DispFloat+0xfc>
  GUI_DispFloat(f, 9);
 8003706:	eeb0 0a68 	vmov.f32	s0, s17
 800370a:	2009      	movs	r0, #9
 800370c:	f015 fa2a 	bl	8018b64 <GUI_DispFloat>
  GUI_GotoX(100);
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	f010 fc07 	bl	8013f24 <GUI_GotoX>
  GUI_DispFloat(-f, 9);
 8003716:	eeb0 0a48 	vmov.f32	s0, s16
 800371a:	2009      	movs	r0, #9
 800371c:	f015 fa22 	bl	8018b64 <GUI_DispFloat>
  GUI_DispStringAt("GUI_DispFloatFix:\n", 0, 60);
 8003720:	223c      	movs	r2, #60	; 0x3c
 8003722:	2100      	movs	r1, #0
 8003724:	482a      	ldr	r0, [pc, #168]	; (80037d0 <J01_DispFloat+0x100>)
 8003726:	f011 fa5f 	bl	8014be8 <GUI_DispStringAt>
  GUI_DispFloatFix(f, 9, 2);
 800372a:	eeb0 0a68 	vmov.f32	s0, s17
 800372e:	2102      	movs	r1, #2
 8003730:	2009      	movs	r0, #9
 8003732:	f015 f8c5 	bl	80188c0 <GUI_DispFloatFix>
  GUI_GotoX(100);
 8003736:	2064      	movs	r0, #100	; 0x64
 8003738:	f010 fbf4 	bl	8013f24 <GUI_GotoX>
  GUI_DispFloatFix(-f, 9, 2);
 800373c:	eeb0 0a48 	vmov.f32	s0, s16
 8003740:	2102      	movs	r1, #2
 8003742:	2009      	movs	r0, #9
 8003744:	f015 f8bc 	bl	80188c0 <GUI_DispFloatFix>
  GUI_DispStringAt("GUI_DispSFloatFix:\n", 0, 100);
 8003748:	2264      	movs	r2, #100	; 0x64
 800374a:	2100      	movs	r1, #0
 800374c:	4821      	ldr	r0, [pc, #132]	; (80037d4 <J01_DispFloat+0x104>)
 800374e:	f011 fa4b 	bl	8014be8 <GUI_DispStringAt>
  GUI_DispSFloatFix(f, 9, 2);
 8003752:	eeb0 0a68 	vmov.f32	s0, s17
 8003756:	2102      	movs	r1, #2
 8003758:	2009      	movs	r0, #9
 800375a:	f015 fa61 	bl	8018c20 <GUI_DispSFloatFix>
  GUI_GotoX(100);
 800375e:	2064      	movs	r0, #100	; 0x64
 8003760:	f010 fbe0 	bl	8013f24 <GUI_GotoX>
  GUI_DispSFloatFix(-f, 9, 2);
 8003764:	eeb0 0a48 	vmov.f32	s0, s16
 8003768:	2102      	movs	r1, #2
 800376a:	2009      	movs	r0, #9
 800376c:	f015 fa58 	bl	8018c20 <GUI_DispSFloatFix>
  GUI_DispStringAt("GUI_DispFloatMin:\n", 0, 140);
 8003770:	228c      	movs	r2, #140	; 0x8c
 8003772:	2100      	movs	r1, #0
 8003774:	4818      	ldr	r0, [pc, #96]	; (80037d8 <J01_DispFloat+0x108>)
 8003776:	f011 fa37 	bl	8014be8 <GUI_DispStringAt>
  GUI_DispFloatMin(f, 3);
 800377a:	eeb0 0a68 	vmov.f32	s0, s17
 800377e:	2003      	movs	r0, #3
 8003780:	f015 f8de 	bl	8018940 <GUI_DispFloatMin>
  GUI_GotoX(100);
 8003784:	2064      	movs	r0, #100	; 0x64
 8003786:	f010 fbcd 	bl	8013f24 <GUI_GotoX>
  GUI_DispFloatMin(-f, 3);
 800378a:	eeb0 0a48 	vmov.f32	s0, s16
 800378e:	2003      	movs	r0, #3
 8003790:	f015 f8d6 	bl	8018940 <GUI_DispFloatMin>
  GUI_DispStringAt("GUI_DispSFloatMin:\n", 0, 180);
 8003794:	22b4      	movs	r2, #180	; 0xb4
 8003796:	2100      	movs	r1, #0
 8003798:	4810      	ldr	r0, [pc, #64]	; (80037dc <J01_DispFloat+0x10c>)
 800379a:	f011 fa25 	bl	8014be8 <GUI_DispStringAt>
  GUI_DispSFloatMin(f, 3);
 800379e:	eeb0 0a68 	vmov.f32	s0, s17
 80037a2:	2003      	movs	r0, #3
 80037a4:	f015 fa7c 	bl	8018ca0 <GUI_DispSFloatMin>
  GUI_GotoX(100);
 80037a8:	2064      	movs	r0, #100	; 0x64
 80037aa:	f010 fbbb 	bl	8013f24 <GUI_GotoX>
  GUI_DispSFloatMin(-f, 3);
 80037ae:	eeb0 0a48 	vmov.f32	s0, s16
 80037b2:	2003      	movs	r0, #3

}
 80037b4:	ecbd 8b02 	vpop	{d8}
 80037b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_DispSFloatMin(-f, 3);
 80037bc:	f015 ba70 	b.w	8018ca0 <GUI_DispSFloatMin>
 80037c0:	42f6e9df 	.word	0x42f6e9df
 80037c4:	08030188 	.word	0x08030188
 80037c8:	08034971 	.word	0x08034971
 80037cc:	c2f6e9df 	.word	0xc2f6e9df
 80037d0:	08034981 	.word	0x08034981
 80037d4:	08034994 	.word	0x08034994
 80037d8:	080349a8 	.word	0x080349a8
 80037dc:	080349bb 	.word	0x080349bb

080037e0 <J01_TextInBox>:

void J01_TextInBox(void)
{
 80037e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e2:	b08f      	sub	sp, #60	; 0x3c
  const char Text[] = "This text is wrapped in an rectangle.";
 80037e4:	4b47      	ldr	r3, [pc, #284]	; (8003904 <J01_TextInBox+0x124>)
 80037e6:	aa04      	add	r2, sp, #16
 80037e8:	f103 0620 	add.w	r6, r3, #32
 80037ec:	4615      	mov	r5, r2
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80037f6:	4614      	mov	r4, r2
 80037f8:	42b3      	cmp	r3, r6
 80037fa:	c403      	stmia	r4!, {r0, r1}
 80037fc:	4622      	mov	r2, r4
 80037fe:	d1f6      	bne.n	80037ee <J01_TextInBox+0xe>
 8003800:	6818      	ldr	r0, [r3, #0]

  // Adjust vertical rectangle size
  Rect.y1 = Rect.y0 + lines * fsize;

  // Move the rectangle to the center of the display
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 8003802:	2602      	movs	r6, #2
  GUI_RECT Rect = {0, 0, 160, 100};   // x0, y0, x1, y1
 8003804:	4a40      	ldr	r2, [pc, #256]	; (8003908 <J01_TextInBox+0x128>)

  // Draw a rounded rectangle, slightly bigger
  GUI_AA_SetFactor(6);
  GUI_SetPenSize(3);
  GUI_SetColor(GUI_BLUE);
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003806:	270c      	movs	r7, #12
  const char Text[] = "This text is wrapped in an rectangle.";
 8003808:	889b      	ldrh	r3, [r3, #4]
 800380a:	6020      	str	r0, [r4, #0]
 800380c:	80a3      	strh	r3, [r4, #4]
  GUI_RECT Rect = {0, 0, 160, 100};   // x0, y0, x1, y1
 800380e:	ab02      	add	r3, sp, #8
 8003810:	6810      	ldr	r0, [r2, #0]
 8003812:	6851      	ldr	r1, [r2, #4]
 8003814:	c303      	stmia	r3!, {r0, r1}
  GUI_SetFont(GUI_FONT_32_1);
 8003816:	483d      	ldr	r0, [pc, #244]	; (800390c <J01_TextInBox+0x12c>)
 8003818:	f010 fc78 	bl	801410c <GUI_SetFont>
  int lines = GUI_WrapGetNumLines(Text, Rect.x1 - Rect.x0, GUI_WRAPMODE_WORD);
 800381c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003820:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	4628      	mov	r0, r5
 8003828:	1ac9      	subs	r1, r1, r3
 800382a:	f011 fb03 	bl	8014e34 <GUI_WrapGetNumLines>
 800382e:	4604      	mov	r4, r0
  int fsize = GUI_GetFontSizeY();
 8003830:	f010 fa78 	bl	8013d24 <GUI_GetFontSizeY>
  Rect.y1 = Rect.y0 + lines * fsize;
 8003834:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003838:	fb14 3000 	smlabb	r0, r4, r0, r3
 800383c:	f8ad 000e 	strh.w	r0, [sp, #14]
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 8003840:	f017 face 	bl	801ade0 <LCD_GetXSize>
 8003844:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003848:	1ac3      	subs	r3, r0, r3
 800384a:	fb93 f4f6 	sdiv	r4, r3, r6
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 800384e:	f017 fadd 	bl	801ae0c <LCD_GetYSize>
 8003852:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  Rect.x0 += shiftX;
 8003856:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800385a:	b2a3      	uxth	r3, r4
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 800385c:	1a40      	subs	r0, r0, r1
  GUI_SetColor(GUI_WHITE);
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 800385e:	ac0e      	add	r4, sp, #56	; 0x38
  Rect.x0 += shiftX;
 8003860:	441a      	add	r2, r3
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 8003862:	fb90 f0f6 	sdiv	r0, r0, r6
  Rect.x0 += shiftX;
 8003866:	f8ad 2008 	strh.w	r2, [sp, #8]
  Rect.y0 += shiftY;
 800386a:	b280      	uxth	r0, r0
 800386c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8003870:	4402      	add	r2, r0
  Rect.y1 += shiftY;
 8003872:	4408      	add	r0, r1
  Rect.y0 += shiftY;
 8003874:	f8ad 200a 	strh.w	r2, [sp, #10]
  Rect.x1 += shiftX;
 8003878:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  Rect.y1 += shiftY;
 800387c:	f8ad 000e 	strh.w	r0, [sp, #14]
  GUI_SetBkColor(GUI_BLACK);
 8003880:	2000      	movs	r0, #0
  Rect.x1 += shiftX;
 8003882:	4413      	add	r3, r2
 8003884:	f8ad 300c 	strh.w	r3, [sp, #12]
  GUI_SetBkColor(GUI_BLACK);
 8003888:	f010 fbd2 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 800388c:	f010 fd10 	bl	80142b0 <GUI_Clear>
  GUI_AA_SetFactor(6);
 8003890:	2006      	movs	r0, #6
 8003892:	f00d fd51 	bl	8011338 <GUI_AA_SetFactor>
  GUI_SetPenSize(3);
 8003896:	2003      	movs	r0, #3
 8003898:	f010 fb6e 	bl	8013f78 <GUI_SetPenSize>
  GUI_SetColor(GUI_BLUE);
 800389c:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 80038a0:	f010 fbd2 	bl	8014048 <GUI_SetColor>
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80038a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80038a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80038ac:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80038b0:	330a      	adds	r3, #10
 80038b2:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80038b6:	320a      	adds	r2, #10
 80038b8:	390a      	subs	r1, #10
 80038ba:	9700      	str	r7, [sp, #0]
 80038bc:	380a      	subs	r0, #10
 80038be:	f013 fa65 	bl	8016d8c <GUI_FillRoundedRect>
  GUI_SetColor(GUI_WHITE);
 80038c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80038c6:	f010 fbbf 	bl	8014048 <GUI_SetColor>
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80038ca:	f934 0d30 	ldrsh.w	r0, [r4, #-48]!
 80038ce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80038d2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80038d6:	380a      	subs	r0, #10
 80038d8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80038dc:	330a      	adds	r3, #10
 80038de:	320a      	adds	r2, #10
 80038e0:	9700      	str	r7, [sp, #0]
 80038e2:	390a      	subs	r1, #10
 80038e4:	f00d f986 	bl	8010bf4 <GUI_AA_DrawRoundedRect>

  // Display the text inside the rectangle
  GUI_SetTextMode(GUI_TM_TRANS);
 80038e8:	4630      	mov	r0, r6
 80038ea:	f010 fc4f 	bl	801418c <GUI_SetTextMode>
  GUI_SetTextStyle(GUI_TS_NORMAL);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f010 fc5c 	bl	80141ac <GUI_SetTextStyle>
  GUI_DispStringInRectWrap(Text, &Rect, GUI_TA_VCENTER, GUI_WRAPMODE_WORD);
 80038f4:	2301      	movs	r3, #1
 80038f6:	463a      	mov	r2, r7
 80038f8:	4621      	mov	r1, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	f011 fab4 	bl	8014e68 <GUI_DispStringInRectWrap>
}
 8003900:	b00f      	add	sp, #60	; 0x3c
 8003902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003904:	080349cf 	.word	0x080349cf
 8003908:	080270f0 	.word	0x080270f0
 800390c:	0802bef8 	.word	0x0802bef8

08003910 <J01_GUI_GetClientRect>:
  dmc_putintcr(Rect.y0);
  dmc_putintcr(Rect.y1);  // 16382
}

void J01_GUI_GetClientRect(GUI_RECT *Rect)
{
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4604      	mov	r4, r0
  GUI_GetClientRect(Rect);
 8003914:	f010 f9de 	bl	8013cd4 <GUI_GetClientRect>
  if (Rect->x1 >= LCD_GetXSize())
 8003918:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 800391c:	f017 fa60 	bl	801ade0 <LCD_GetXSize>
 8003920:	4285      	cmp	r5, r0
 8003922:	db03      	blt.n	800392c <J01_GUI_GetClientRect+0x1c>
  {
    Rect->x1 = LCD_GetXSize() - 1;
 8003924:	f017 fa5c 	bl	801ade0 <LCD_GetXSize>
 8003928:	3801      	subs	r0, #1
 800392a:	80a0      	strh	r0, [r4, #4]
  }
  if (Rect->y1 >= LCD_GetYSize())
 800392c:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 8003930:	f017 fa6c 	bl	801ae0c <LCD_GetYSize>
 8003934:	4285      	cmp	r5, r0
 8003936:	db03      	blt.n	8003940 <J01_GUI_GetClientRect+0x30>
  {
    Rect->y1 = LCD_GetYSize() - 1;
 8003938:	f017 fa68 	bl	801ae0c <LCD_GetYSize>
 800393c:	3801      	subs	r0, #1
 800393e:	80e0      	strh	r0, [r4, #6]
 8003940:	bd38      	pop	{r3, r4, r5, pc}
	...

08003944 <J01_TextRotated>:
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b089      	sub	sp, #36	; 0x24
  const char Text[] = "Rotated\ntext";
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <J01_TextRotated+0x154>)
 800394a:	aa04      	add	r2, sp, #16
 800394c:	f103 0608 	add.w	r6, r3, #8
 8003950:	4615      	mov	r5, r2
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800395a:	4614      	mov	r4, r2
 800395c:	42b3      	cmp	r3, r6
 800395e:	c403      	stmia	r4!, {r0, r1}
 8003960:	4622      	mov	r2, r4
 8003962:	d1f6      	bne.n	8003952 <J01_TextRotated+0xe>
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 8003964:	4a4d      	ldr	r2, [pc, #308]	; (8003a9c <J01_TextRotated+0x158>)
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 8003966:	2602      	movs	r6, #2
  const char Text[] = "Rotated\ntext";
 8003968:	6818      	ldr	r0, [r3, #0]
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 800396a:	270c      	movs	r7, #12
  const char Text[] = "Rotated\ntext";
 800396c:	791b      	ldrb	r3, [r3, #4]
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 800396e:	6851      	ldr	r1, [r2, #4]
  const char Text[] = "Rotated\ntext";
 8003970:	6020      	str	r0, [r4, #0]
 8003972:	7123      	strb	r3, [r4, #4]
  GUI_RECT Rect = {0, 0, 100, 100};   // x0, y0, x1, y1
 8003974:	ab02      	add	r3, sp, #8
 8003976:	6810      	ldr	r0, [r2, #0]
 8003978:	c303      	stmia	r3!, {r0, r1}
  GUI_SetFont(GUI_FONT_32_1);
 800397a:	4849      	ldr	r0, [pc, #292]	; (8003aa0 <J01_TextRotated+0x15c>)
 800397c:	f010 fbc6 	bl	801410c <GUI_SetFont>
  int fsize = GUI_GetFontSizeY();
 8003980:	f010 f9d0 	bl	8013d24 <GUI_GetFontSizeY>
 8003984:	4604      	mov	r4, r0
  int textWidth = GUI_GetStringDistX("Rotated");
 8003986:	4847      	ldr	r0, [pc, #284]	; (8003aa4 <J01_TextRotated+0x160>)
 8003988:	f011 fa72 	bl	8014e70 <GUI_GetStringDistX>
  Rect.x1 = Rect.x0 + noOfLines * fsize;
 800398c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8003990:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8003994:	f8ad 300c 	strh.w	r3, [sp, #12]
  Rect.y1 = Rect.y0 + textWidth;
 8003998:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800399c:	4418      	add	r0, r3
 800399e:	f8ad 000e 	strh.w	r0, [sp, #14]
  int shiftX = (LCD_GetXSize() - Rect.x1) / 2;
 80039a2:	f017 fa1d 	bl	801ade0 <LCD_GetXSize>
 80039a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80039aa:	1ac3      	subs	r3, r0, r3
 80039ac:	fb93 f4f6 	sdiv	r4, r3, r6
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80039b0:	f017 fa2c 	bl	801ae0c <LCD_GetYSize>
 80039b4:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  Rect.x0 += shiftX;
 80039b8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80039bc:	b2a3      	uxth	r3, r4
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80039be:	1a40      	subs	r0, r0, r1
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 80039c0:	ac08      	add	r4, sp, #32
  Rect.x0 += shiftX;
 80039c2:	441a      	add	r2, r3
  int shiftY = (LCD_GetYSize() - Rect.y1) / 2;
 80039c4:	fb90 f0f6 	sdiv	r0, r0, r6
  Rect.x0 += shiftX;
 80039c8:	f8ad 2008 	strh.w	r2, [sp, #8]
  Rect.y0 += shiftY;
 80039cc:	b280      	uxth	r0, r0
 80039ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80039d2:	4402      	add	r2, r0
  Rect.y1 += shiftY;
 80039d4:	4408      	add	r0, r1
  Rect.y0 += shiftY;
 80039d6:	f8ad 200a 	strh.w	r2, [sp, #10]
  Rect.x1 += shiftX;
 80039da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  Rect.y1 += shiftY;
 80039de:	f8ad 000e 	strh.w	r0, [sp, #14]
  GUI_SetBkColor(GUI_BLACK);
 80039e2:	2000      	movs	r0, #0
  Rect.x1 += shiftX;
 80039e4:	4413      	add	r3, r2
 80039e6:	f8ad 300c 	strh.w	r3, [sp, #12]
  GUI_SetBkColor(GUI_BLACK);
 80039ea:	f010 fb21 	bl	8014030 <GUI_SetBkColor>
  GUI_Clear();
 80039ee:	f010 fc5f 	bl	80142b0 <GUI_Clear>
  GUI_AA_SetFactor(6);
 80039f2:	2006      	movs	r0, #6
 80039f4:	f00d fca0 	bl	8011338 <GUI_AA_SetFactor>
  GUI_SetPenSize(3);
 80039f8:	2003      	movs	r0, #3
 80039fa:	f010 fabd 	bl	8013f78 <GUI_SetPenSize>
  GUI_SetColor(GUI_BLUE);
 80039fe:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8003a02:	f010 fb21 	bl	8014048 <GUI_SetColor>
  GUI_FillRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003a06:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003a0a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003a0e:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8003a12:	330a      	adds	r3, #10
 8003a14:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003a18:	320a      	adds	r2, #10
 8003a1a:	390a      	subs	r1, #10
 8003a1c:	9700      	str	r7, [sp, #0]
 8003a1e:	380a      	subs	r0, #10
 8003a20:	f013 f9b4 	bl	8016d8c <GUI_FillRoundedRect>
  GUI_SetColor(GUI_WHITE);
 8003a24:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8003a28:	f010 fb0e 	bl	8014048 <GUI_SetColor>
  GUI_AA_DrawRoundedRect(Rect.x0 - 10, Rect.y0 - 10, Rect.x1 + 10, Rect.y1 + 10, 12);
 8003a2c:	f934 0d18 	ldrsh.w	r0, [r4, #-24]!
 8003a30:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8003a34:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003a38:	380a      	subs	r0, #10
 8003a3a:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8003a3e:	330a      	adds	r3, #10
 8003a40:	320a      	adds	r2, #10
 8003a42:	9700      	str	r7, [sp, #0]
 8003a44:	390a      	subs	r1, #10
 8003a46:	f00d f8d5 	bl	8010bf4 <GUI_AA_DrawRoundedRect>
  GUI_SetTextMode(GUI_TM_TRANS);
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f010 fb9e 	bl	801418c <GUI_SetTextMode>
  GUI_SetTextStyle(GUI_TS_NORMAL);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f010 fbab 	bl	80141ac <GUI_SetTextStyle>
  GUI_DispStringInRectEx(Text, &Rect, GUI_TA_HCENTER | GUI_TA_VCENTER, strlen(Text), GUI_ROTATE_CCW);
 8003a56:	4628      	mov	r0, r5
 8003a58:	f7fc fbda 	bl	8000210 <strlen>
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <J01_TextRotated+0x164>)
 8003a5e:	220e      	movs	r2, #14
 8003a60:	4621      	mov	r1, r4
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4603      	mov	r3, r0
 8003a66:	4628      	mov	r0, r5
 8003a68:	f011 fa0c 	bl	8014e84 <GUI_DispStringInRectEx>
  J01_GUI_GetClientRect(&Rect);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff ff4f 	bl	8003910 <J01_GUI_GetClientRect>
  dmc_putintcr(Rect.x0);
 8003a72:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003a76:	f7fd fce4 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.x1);  // 16382
 8003a7a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8003a7e:	f7fd fce0 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.y0);
 8003a82:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8003a86:	f7fd fcdc 	bl	8001442 <dmc_putintcr>
  dmc_putintcr(Rect.y1);  // 16382
 8003a8a:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8003a8e:	f7fd fcd8 	bl	8001442 <dmc_putintcr>
}
 8003a92:	b009      	add	sp, #36	; 0x24
 8003a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a96:	bf00      	nop
 8003a98:	08034a7a 	.word	0x08034a7a
 8003a9c:	080270f8 	.word	0x080270f8
 8003aa0:	0802bef8 	.word	0x0802bef8
 8003aa4:	08034a72 	.word	0x08034a72
 8003aa8:	2000007c 	.word	0x2000007c

08003aac <GUI_X_Config>:
void GUI_X_Config(void)
{
  //	 Jack
  // 32 bit aligned memory area  //
  // Assign memory to emWin  //
  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 8003aac:	f44f 315c 	mov.w	r1, #225280	; 0x37000
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <GUI_X_Config+0xc>)
 8003ab2:	f00f bb09 	b.w	80130c8 <GUI_ALLOC_AssignMemory>
 8003ab6:	bf00      	nop
 8003ab8:	20000790 	.word	0x20000790

08003abc <MX_LCD_Init>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8003abc:	b530      	push	{r4, r5, lr}
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8003abe:	4c29      	ldr	r4, [pc, #164]	; (8003b64 <MX_LCD_Init+0xa8>)
{ 
 8003ac0:	b08f      	sub	sp, #60	; 0x3c
/* Configure LTDC */

  hltdc.Instance = LTDC;
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ac2:	2500      	movs	r5, #0
  HAL_LTDC_DeInit(&hltdc);
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f003 fea1 	bl	800780c <HAL_LTDC_DeInit>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <MX_LCD_Init+0xac>)
  hltdc.Init.TotalWidth = 565;
  hltdc.Init.TotalHeigh = 285;
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003acc:	4620      	mov	r0, r4
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003ace:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003ad0:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003ad2:	6125      	str	r5, [r4, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8003ad4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003ad8:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003adc:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ae0:	e884 0028 	stmia.w	r4, {r3, r5}
  hltdc.Init.HorizontalSync = 40;
 8003ae4:	2328      	movs	r3, #40	; 0x28
 8003ae6:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8003ae8:	2309      	movs	r3, #9
 8003aea:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003aec:	2335      	movs	r3, #53	; 0x35
 8003aee:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003af0:	230b      	movs	r3, #11
 8003af2:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8003af4:	f240 2315 	movw	r3, #533	; 0x215
 8003af8:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003afa:	f240 131b 	movw	r3, #283	; 0x11b
 8003afe:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8003b00:	f240 2335 	movw	r3, #565	; 0x235
 8003b04:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003b06:	f240 131d 	movw	r3, #285	; 0x11d
 8003b0a:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003b0c:	f003 fda4 	bl	8007658 <HAL_LTDC_Init>
 8003b10:	b108      	cbz	r0, 8003b16 <MX_LCD_Init+0x5a>
  {
    Error_Handler( );
 8003b12:	f7fe f849 	bl	8001ba8 <Error_Handler>

  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 480;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 272;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003b16:	2102      	movs	r1, #2
  pLayerCfg.WindowX1 = 480;
 8003b18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8003b1c:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.ImageWidth = 480;
  pLayerCfg.ImageHeight = 272;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003b20:	4810      	ldr	r0, [pc, #64]	; (8003b64 <MX_LCD_Init+0xa8>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003b22:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 8003b24:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8003b26:	9202      	str	r2, [sp, #8]
  pLayerCfg.Alpha = 255;
 8003b28:	9106      	str	r1, [sp, #24]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003b2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.ImageWidth = 480;
 8003b2e:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003b30:	2200      	movs	r2, #0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003b32:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003b34:	2107      	movs	r1, #7
  pLayerCfg.WindowX0 = 0;
 8003b36:	9501      	str	r5, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003b38:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003b3a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8003b3e:	9503      	str	r5, [sp, #12]
  pLayerCfg.FBStartAdress = 0xC0000000;
 8003b40:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003b42:	a901      	add	r1, sp, #4
  pLayerCfg.WindowY1 = 272;
 8003b44:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 8003b46:	9507      	str	r5, [sp, #28]
  pLayerCfg.ImageHeight = 272;
 8003b48:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003b4a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003b4e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003b52:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003b56:	f003 fec5 	bl	80078e4 <HAL_LTDC_ConfigLayer>
 8003b5a:	b108      	cbz	r0, 8003b60 <MX_LCD_Init+0xa4>
  {
    Error_Handler( );
 8003b5c:	f7fe f824 	bl	8001ba8 <Error_Handler>
  }

}
 8003b60:	b00f      	add	sp, #60	; 0x3c
 8003b62:	bd30      	pop	{r4, r5, pc}
 8003b64:	20045f04 	.word	0x20045f04
 8003b68:	40016800 	.word	0x40016800

08003b6c <MX_FMC_Init>:
/* FMC initialization function */
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b6c:	4815      	ldr	r0, [pc, #84]	; (8003bc4 <MX_FMC_Init+0x58>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b6e:	2210      	movs	r2, #16
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <MX_FMC_Init+0x5c>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b72:	2104      	movs	r1, #4
{  
 8003b74:	b500      	push	{lr}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b76:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b78:	2240      	movs	r2, #64	; 0x40
{  
 8003b7a:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b7c:	6003      	str	r3, [r0, #0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b7e:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003b80:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b84:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b86:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003b88:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b8e:	6043      	str	r3, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003b90:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b96:	6083      	str	r3, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003b98:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003b9a:	2207      	movs	r2, #7
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b9c:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003b9e:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8003ba0:	2302      	movs	r3, #2
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003ba2:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 8003ba4:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003ba6:	2203      	movs	r2, #3
  SdramTiming.SelfRefreshTime = 4;
 8003ba8:	9103      	str	r1, [sp, #12]
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003baa:	4469      	add	r1, sp
  SdramTiming.LoadToActiveDelay = 2;
 8003bac:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 8003bae:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8003bb0:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8003bb2:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003bb4:	f006 fc74 	bl	800a4a0 <HAL_SDRAM_Init>
 8003bb8:	b108      	cbz	r0, 8003bbe <MX_FMC_Init+0x52>
  {
    Error_Handler( );
 8003bba:	f7fd fff5 	bl	8001ba8 <Error_Handler>
  }

}
 8003bbe:	b009      	add	sp, #36	; 0x24
 8003bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc4:	20045fec 	.word	0x20045fec
 8003bc8:	a0000140 	.word	0xa0000140

08003bcc <MX_SDRAM_InitEx>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8003bcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003bd0:	4c22      	ldr	r4, [pc, #136]	; (8003c5c <MX_SDRAM_InitEx+0x90>)
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003bd2:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003bd4:	4d22      	ldr	r5, [pc, #136]	; (8003c60 <MX_SDRAM_InitEx+0x94>)
  __IO uint32_t tmpmrd = 0;
 8003bd6:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003bda:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003bdc:	4621      	mov	r1, r4
 8003bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be2:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8003be4:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8003be8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8003bea:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8003bee:	e884 00c0 	stmia.w	r4, {r6, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003bf2:	f006 fc75 	bl	800a4e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f001 fbfe 	bl	80053f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003bfc:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8003bfe:	4621      	mov	r1, r4
 8003c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c04:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8003c06:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8003c08:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c0c:	e884 0088 	stmia.w	r4, {r3, r7}
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8003c10:	f006 fc66 	bl	800a4e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c14:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003c16:	4621      	mov	r1, r4
 8003c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1c:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = 0;
 8003c1e:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c22:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 8003c26:	2308      	movs	r3, #8
 8003c28:	60a3      	str	r3, [r4, #8]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003c2a:	f006 fc59 	bl	800a4e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003c2e:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003c3a:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003c3c:	2304      	movs	r3, #4
  Command.AutoRefreshNumber      = 1;
 8003c3e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c40:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.ModeRegisterDefinition = tmpmrd;
 8003c44:	9b01      	ldr	r3, [sp, #4]
 8003c46:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8003c48:	f006 fc4a 	bl	800a4e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8003c4c:	f240 616f 	movw	r1, #1647	; 0x66f
 8003c50:	4628      	mov	r0, r5
 8003c52:	f006 fc5c 	bl	800a50e <HAL_SDRAM_ProgramRefreshRate>
}
 8003c56:	b002      	add	sp, #8
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5c:	20037790 	.word	0x20037790
 8003c60:	20045fec 	.word	0x20045fec

08003c64 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) 
{
 8003c64:	b508      	push	{r3, lr}
/* Configure the DMA2D default mode */ 

  hdma2d.Instance = DMA2D;
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <MX_DMA2D_Init+0x38>)
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <MX_DMA2D_Init+0x3c>)
 8003c6a:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003c6c:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003c6e:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003c70:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003c72:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003c74:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 8003c76:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c78:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8003c7a:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003c7c:	f001 fffc 	bl	8005c78 <HAL_DMA2D_Init>
 8003c80:	b108      	cbz	r0, 8003c86 <MX_DMA2D_Init+0x22>
  {
    Error_Handler( );
 8003c82:	f7fd ff91 	bl	8001ba8 <Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003c86:	2101      	movs	r1, #1
 8003c88:	4804      	ldr	r0, [pc, #16]	; (8003c9c <MX_DMA2D_Init+0x38>)
 8003c8a:	f002 f8d3 	bl	8005e34 <HAL_DMA2D_ConfigLayer>
 8003c8e:	b118      	cbz	r0, 8003c98 <MX_DMA2D_Init+0x34>
  {
    Error_Handler( );
  }

}
 8003c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8003c94:	f7fd bf88 	b.w	8001ba8 <Error_Handler>
 8003c98:	bd08      	pop	{r3, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20045fac 	.word	0x20045fac
 8003ca0:	4002b000 	.word	0x4002b000

08003ca4 <HAL_LTDC_MspInit>:
/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ltdcHandle->Instance==LTDC)
 8003ca4:	6802      	ldr	r2, [r0, #0]
 8003ca6:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <HAL_LTDC_MspInit+0x104>)
 8003ca8:	429a      	cmp	r2, r3
{
 8003caa:	b570      	push	{r4, r5, r6, lr}
 8003cac:	b08c      	sub	sp, #48	; 0x30
  if(ltdcHandle->Instance==LTDC)
 8003cae:	d178      	bne.n	8003da2 <HAL_LTDC_MspInit+0xfe>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003cb0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cb8:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	a907      	add	r1, sp, #28
 8003cbe:	483b      	ldr	r0, [pc, #236]	; (8003dac <HAL_LTDC_MspInit+0x108>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003cc0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cc8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003ccc:	9201      	str	r2, [sp, #4]
 8003cce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd2:	f042 0210 	orr.w	r2, r2, #16
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	f002 0210 	and.w	r2, r2, #16
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8003cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cec:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003cf0:	9203      	str	r2, [sp, #12]
 8003cf2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003d02:	9204      	str	r2, [sp, #16]
 8003d04:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d10:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003d14:	9205      	str	r2, [sp, #20]
 8003d16:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	9306      	str	r3, [sp, #24]
 8003d2a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d34:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003d36:	f002 f8f7 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003d3a:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003d3e:	a907      	add	r1, sp, #28
 8003d40:	481b      	ldr	r0, [pc, #108]	; (8003db0 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003d42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d4a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003d4c:	f002 f8ec 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003d50:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003d52:	a907      	add	r1, sp, #28
 8003d54:	4817      	ldr	r0, [pc, #92]	; (8003db4 <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003d56:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d5e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003d60:	f002 f8e2 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003d68:	a907      	add	r1, sp, #28
 8003d6a:	4813      	ldr	r0, [pc, #76]	; (8003db8 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003d6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d6e:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003d72:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d76:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003d78:	f002 f8d6 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003d7c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d80:	a907      	add	r1, sp, #28
 8003d82:	480e      	ldr	r0, [pc, #56]	; (8003dbc <HAL_LTDC_MspInit+0x118>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003d84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d8c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d8e:	f002 f8cb 	bl	8005f28 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003d92:	2058      	movs	r0, #88	; 0x58
 8003d94:	4622      	mov	r2, r4
 8003d96:	2105      	movs	r1, #5
 8003d98:	f001 fd56 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003d9c:	2058      	movs	r0, #88	; 0x58
 8003d9e:	f001 fd9b 	bl	80058d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003da2:	b00c      	add	sp, #48	; 0x30
 8003da4:	bd70      	pop	{r4, r5, r6, pc}
 8003da6:	bf00      	nop
 8003da8:	40016800 	.word	0x40016800
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40022400 	.word	0x40022400
 8003db4:	40022800 	.word	0x40022800
 8003db8:	40021800 	.word	0x40021800
 8003dbc:	40022000 	.word	0x40022000

08003dc0 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003dc0:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 8003dc2:	6802      	ldr	r2, [r0, #0]
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_LTDC_MspDeInit+0x50>)
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d120      	bne.n	8003e0c <HAL_LTDC_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_LTDC_MspDeInit+0x54>)
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8003dcc:	2110      	movs	r1, #16
 8003dce:	4812      	ldr	r0, [pc, #72]	; (8003e18 <HAL_LTDC_MspDeInit+0x58>)
    __HAL_RCC_LTDC_CLK_DISABLE();
 8003dd0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003dd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dd6:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8003dd8:	f002 f9fa 	bl	80061d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8003ddc:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8003de0:	480e      	ldr	r0, [pc, #56]	; (8003e1c <HAL_LTDC_MspDeInit+0x5c>)
 8003de2:	f002 f9f5 	bl	80061d0 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8003de6:	21f7      	movs	r1, #247	; 0xf7
 8003de8:	480d      	ldr	r0, [pc, #52]	; (8003e20 <HAL_LTDC_MspDeInit+0x60>)
 8003dea:	f002 f9f1 	bl	80061d0 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8003dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003df2:	480c      	ldr	r0, [pc, #48]	; (8003e24 <HAL_LTDC_MspDeInit+0x64>)
 8003df4:	f002 f9ec 	bl	80061d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8003df8:	480b      	ldr	r0, [pc, #44]	; (8003e28 <HAL_LTDC_MspDeInit+0x68>)
 8003dfa:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8003dfe:	f002 f9e7 	bl	80061d0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8003e02:	2058      	movs	r0, #88	; 0x58

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8003e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8003e08:	f001 bd7a 	b.w	8005900 <HAL_NVIC_DisableIRQ>
 8003e0c:	bd08      	pop	{r3, pc}
 8003e0e:	bf00      	nop
 8003e10:	40016800 	.word	0x40016800
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40022400 	.word	0x40022400
 8003e20:	40022800 	.word	0x40022800
 8003e24:	40021800 	.word	0x40021800
 8003e28:	40022000 	.word	0x40022000

08003e2c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8003e30:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003e32:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8003e34:	2c00      	cmp	r4, #0
 8003e36:	d14e      	bne.n	8003ed6 <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8003e38:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3c:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e3e:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8003e40:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e42:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e44:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e46:	4827      	ldr	r0, [pc, #156]	; (8003ee4 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e54:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5a:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003e60:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e64:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8003e66:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e68:	f002 f85e 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003e6c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e70:	a901      	add	r1, sp, #4
 8003e72:	481d      	ldr	r0, [pc, #116]	; (8003ee8 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8003e74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e7c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e7e:	f002 f853 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003e82:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e86:	a901      	add	r1, sp, #4
 8003e88:	4818      	ldr	r0, [pc, #96]	; (8003eec <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8003e8a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e92:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e94:	f002 f848 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003e98:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e9c:	a901      	add	r1, sp, #4
 8003e9e:	4814      	ldr	r0, [pc, #80]	; (8003ef0 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8003ea0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ea8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eaa:	f002 f83d 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003eae:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003eb0:	a901      	add	r1, sp, #4
 8003eb2:	4810      	ldr	r0, [pc, #64]	; (8003ef4 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003eb4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ebc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003ebe:	f002 f833 	bl	8005f28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003ec2:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003ec4:	a901      	add	r1, sp, #4
 8003ec6:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003ec8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ece:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ed0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f002 f829 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ed6:	b007      	add	sp, #28
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	200377a0 	.word	0x200377a0
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021800 	.word	0x40021800
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	40021400 	.word	0x40021400
 8003ef4:	40021c00 	.word	0x40021c00
 8003ef8:	40020800 	.word	0x40020800

08003efc <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003efc:	b507      	push	{r0, r1, r2, lr}
  if(dma2dHandle->Instance==DMA2D)
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_DMA2D_MspInit+0x38>)
 8003f00:	6802      	ldr	r2, [r0, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d112      	bne.n	8003f2c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f06:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003f0a:	205a      	movs	r0, #90	; 0x5a
 8003f0c:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003f16:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003f22:	f001 fc91 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003f26:	205a      	movs	r0, #90	; 0x5a
 8003f28:	f001 fcd6 	bl	80058d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003f2c:	b003      	add	sp, #12
 8003f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f32:	bf00      	nop
 8003f34:	4002b000 	.word	0x4002b000

08003f38 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4b01      	ldr	r3, [pc, #4]	; (8003f40 <TransferComplete+0x8>)
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	4770      	bx	lr
 8003f40:	200377a4 	.word	0x200377a4

08003f44 <GetBufferSize>:
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <GetBufferSize+0x14>)
 8003f46:	231c      	movs	r3, #28
 8003f48:	fb03 2300 	mla	r3, r3, r0, r2
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	6918      	ldr	r0, [r3, #16]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4350      	muls	r0, r2
}
 8003f54:	4358      	muls	r0, r3
 8003f56:	4770      	bx	lr
 8003f58:	2003d1a8 	.word	0x2003d1a8

08003f5c <_DMA_ExecOperation>:
  if ( TransferInProgress == 0 )
 8003f5c:	4b02      	ldr	r3, [pc, #8]	; (8003f68 <_DMA_ExecOperation+0xc>)
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	d1fc      	bne.n	8003f5e <_DMA_ExecOperation+0x2>
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200377a4 	.word	0x200377a4

08003f6c <_DMA_ConvertColor>:
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	9d06      	ldr	r5, [sp, #24]
 8003f70:	4617      	mov	r7, r2
 8003f72:	461e      	mov	r6, r3
  _DMA_ExecOperation();
 8003f74:	f7ff fff2 	bl	8003f5c <_DMA_ExecOperation>
  TransferInProgress = 1;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <_DMA_ConvertColor+0x40>)
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003f7c:	4c0c      	ldr	r4, [pc, #48]	; (8003fb0 <_DMA_ConvertColor+0x44>)
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003f7e:	042d      	lsls	r5, r5, #16
  TransferInProgress = 1;
 8003f80:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003f82:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003f86:	4315      	orrs	r5, r2
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8003f88:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 8003f8a:	60e0      	str	r0, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 8003f8c:	63e1      	str	r1, [r4, #60]	; 0x3c
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 8003f8e:	2100      	movs	r1, #0
 8003f90:	6121      	str	r1, [r4, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8003f92:	6421      	str	r1, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8003f94:	61e7      	str	r7, [r4, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 8003f96:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8003f98:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	6023      	str	r3, [r4, #0]
}
 8003fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  _DMA_ExecOperation();
 8003fa8:	f7ff bfd8 	b.w	8003f5c <_DMA_ExecOperation>
 8003fac:	200377a4 	.word	0x200377a4
 8003fb0:	4002b000 	.word	0x4002b000

08003fb4 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003fba:	4690      	mov	r8, r2
 8003fbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	461d      	mov	r5, r3
 8003fc2:	9908      	ldr	r1, [sp, #32]

  _DMA_ExecOperation();
 8003fc4:	f7ff ffca 	bl	8003f5c <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 8003fc8:	2201      	movs	r2, #1
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <_DMA_DrawAlphaBitmap+0x50>)
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003fcc:	b2ad      	uxth	r5, r5
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8003fce:	4c0e      	ldr	r4, [pc, #56]	; (8004008 <_DMA_DrawAlphaBitmap+0x54>)
  TransferInProgress = 1;
 8003fd0:	701a      	strb	r2, [r3, #0]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003fd2:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <_DMA_DrawAlphaBitmap+0x58>)
 8003fd8:	6023      	str	r3, [r4, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8003fda:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 8003fdc:	f8c4 900c 	str.w	r9, [r4, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 8003fe0:	6160      	str	r0, [r4, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 8003fe2:	63e0      	str	r0, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 8003fe4:	6121      	str	r1, [r4, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 8003fe6:	61a7      	str	r7, [r4, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 8003fe8:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 8003fea:	61e3      	str	r3, [r4, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 8003fec:	6266      	str	r6, [r4, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 8003fee:	6366      	str	r6, [r4, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 8003ff0:	6465      	str	r5, [r4, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	6023      	str	r3, [r4, #0]

_DMA_ExecOperation();  
}
 8003ffc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
_DMA_ExecOperation();  
 8004000:	f7ff bfac 	b.w	8003f5c <_DMA_ExecOperation>
 8004004:	200377a4 	.word	0x200377a4
 8004008:	4002b000 	.word	0x4002b000
 800400c:	00020200 	.word	0x00020200

08004010 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
  OffLineDst = (BytesPerLineDst / 4) - xSize;
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8004012:	2400      	movs	r4, #0
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 8004014:	b085      	sub	sp, #20
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8004016:	2704      	movs	r7, #4
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 8004018:	9402      	str	r4, [sp, #8]
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800401a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800401c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800401e:	fb95 f5f7 	sdiv	r5, r5, r7
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8004022:	fb94 f4f7 	sdiv	r4, r4, r7
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 8004026:	1aad      	subs	r5, r5, r2
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 8004028:	1aa4      	subs	r4, r4, r2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 800402a:	9501      	str	r5, [sp, #4]
 800402c:	9400      	str	r4, [sp, #0]
 800402e:	f7ff ffc1 	bl	8003fb4 <_DMA_DrawAlphaBitmap>
}
 8004032:	b005      	add	sp, #20
 8004034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004038 <GetPixelformat>:
  if (LayerIndex >= GUI_COUNTOF(apColorConvAPI)) {
 8004038:	2801      	cmp	r0, #1
 800403a:	d835      	bhi.n	80040a8 <GetPixelformat+0x70>
  if ((apColorConvAPI[LayerIndex] == GUICC_M8888I)| (apColorConvAPI[LayerIndex] == GUICC_M8888)|(apColorConvAPI[LayerIndex] == GUICC_8888))
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <GetPixelformat+0x90>)
 800403e:	4a23      	ldr	r2, [pc, #140]	; (80040cc <GetPixelformat+0x94>)
 8004040:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004044:	4922      	ldr	r1, [pc, #136]	; (80040d0 <GetPixelformat+0x98>)
 8004046:	4293      	cmp	r3, r2
 8004048:	bf18      	it	ne
 800404a:	428b      	cmpne	r3, r1
 800404c:	d02c      	beq.n	80040a8 <GetPixelformat+0x70>
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <GetPixelformat+0x9c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d029      	beq.n	80040a8 <GetPixelformat+0x70>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_M888) | (apColorConvAPI[LayerIndex] == GUICC_888)   ) {
 8004054:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <GetPixelformat+0xa0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d028      	beq.n	80040ac <GetPixelformat+0x74>
 800405a:	4a20      	ldr	r2, [pc, #128]	; (80040dc <GetPixelformat+0xa4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d025      	beq.n	80040ac <GetPixelformat+0x74>
  } else if ((apColorConvAPI[LayerIndex] == GUICC_565) | (apColorConvAPI[LayerIndex] == GUICC_M565) ) {
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <GetPixelformat+0xa8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d024      	beq.n	80040b0 <GetPixelformat+0x78>
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <GetPixelformat+0xac>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d021      	beq.n	80040b0 <GetPixelformat+0x78>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M1555I) {
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <GetPixelformat+0xb0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d020      	beq.n	80040b4 <GetPixelformat+0x7c>
  } else if (apColorConvAPI[LayerIndex] == GUICC_M4444I) {
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <GetPixelformat+0xb4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01f      	beq.n	80040b8 <GetPixelformat+0x80>
  } else if ( (apColorConvAPI[LayerIndex] == GUICC_822216) | (apColorConvAPI[LayerIndex] == GUICC_84444) | (apColorConvAPI[LayerIndex] == GUICC_8666) |  (apColorConvAPI[LayerIndex]== GUICC_8666_1)) {
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <GetPixelformat+0xb8>)
 800407a:	491e      	ldr	r1, [pc, #120]	; (80040f4 <GetPixelformat+0xbc>)
 800407c:	428b      	cmp	r3, r1
 800407e:	bf18      	it	ne
 8004080:	4293      	cmpne	r3, r2
 8004082:	491d      	ldr	r1, [pc, #116]	; (80040f8 <GetPixelformat+0xc0>)
 8004084:	bf0c      	ite	eq
 8004086:	2201      	moveq	r2, #1
 8004088:	2200      	movne	r2, #0
 800408a:	428b      	cmp	r3, r1
 800408c:	bf08      	it	eq
 800408e:	f042 0201 	orreq.w	r2, r2, #1
 8004092:	b99a      	cbnz	r2, 80040bc <GetPixelformat+0x84>
 8004094:	4a19      	ldr	r2, [pc, #100]	; (80040fc <GetPixelformat+0xc4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d010      	beq.n	80040bc <GetPixelformat+0x84>
  } else if (apColorConvAPI[LayerIndex] == GUICC_1616I ) {
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <GetPixelformat+0xc8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00f      	beq.n	80040c0 <GetPixelformat+0x88>
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <GetPixelformat+0xcc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00e      	beq.n	80040c4 <GetPixelformat+0x8c>
 80040a6:	e7fe      	b.n	80040a6 <GetPixelformat+0x6e>
    return 0;
 80040a8:	2000      	movs	r0, #0
 80040aa:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB888;
 80040ac:	2001      	movs	r0, #1
 80040ae:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_RGB565;
 80040b0:	2002      	movs	r0, #2
 80040b2:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB1555;
 80040b4:	2003      	movs	r0, #3
 80040b6:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_ARGB4444;
 80040b8:	2004      	movs	r0, #4
 80040ba:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_L8;
 80040bc:	2005      	movs	r0, #5
 80040be:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL44;
 80040c0:	2006      	movs	r0, #6
 80040c2:	4770      	bx	lr
    return LTDC_PIXEL_FORMAT_AL88;
 80040c4:	2007      	movs	r0, #7
} 
 80040c6:	4770      	bx	lr
 80040c8:	08034ab0 	.word	0x08034ab0
 80040cc:	0802726c 	.word	0x0802726c
 80040d0:	080271dc 	.word	0x080271dc
 80040d4:	08027224 	.word	0x08027224
 80040d8:	08027254 	.word	0x08027254
 80040dc:	0802720c 	.word	0x0802720c
 80040e0:	080271f4 	.word	0x080271f4
 80040e4:	0802723c 	.word	0x0802723c
 80040e8:	080271ac 	.word	0x080271ac
 80040ec:	080271c4 	.word	0x080271c4
 80040f0:	08027134 	.word	0x08027134
 80040f4:	0802714c 	.word	0x0802714c
 80040f8:	08027164 	.word	0x08027164
 80040fc:	0802717c 	.word	0x0802717c
 8004100:	0802711c 	.word	0x0802711c
 8004104:	08027194 	.word	0x08027194

08004108 <DMA2D_CopyBuffer>:
{
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	9d08      	ldr	r5, [sp, #32]
 800410e:	468a      	mov	sl, r1
 8004110:	4691      	mov	r9, r2
 8004112:	461e      	mov	r6, r3
 8004114:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004118:	b2ad      	uxth	r5, r5
{
 800411a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  _DMA_ExecOperation();
 800411c:	f7ff ff1e 	bl	8003f5c <_DMA_ExecOperation>
  TransferInProgress = 1;	
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <DMA2D_CopyBuffer+0x50>)
 8004122:	2201      	movs	r2, #1
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8004124:	4c0d      	ldr	r4, [pc, #52]	; (800415c <DMA2D_CopyBuffer+0x54>)
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004126:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  TransferInProgress = 1;	
 800412a:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 800412c:	f7ff ff84 	bl	8004038 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8004130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004134:	6023      	str	r3, [r4, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       
 8004136:	f8c4 a00c 	str.w	sl, [r4, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800413a:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800413e:	f8c4 8010 	str.w	r8, [r4, #16]
  DMA2D->OOR     = OffLineDst; 
 8004142:	6427      	str	r7, [r4, #64]	; 0x40
  DMA2D->FGPFCCR = PixelFormat;  
 8004144:	61e0      	str	r0, [r4, #28]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004146:	6465      	str	r5, [r4, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6023      	str	r3, [r4, #0]
}
 8004150:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_DMA_ExecOperation();
 8004154:	f7ff bf02 	b.w	8003f5c <_DMA_ExecOperation>
 8004158:	200377a4 	.word	0x200377a4
 800415c:	4002b000 	.word	0x4002b000

08004160 <LCD_LL_CopyBuffer>:
{
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	b085      	sub	sp, #20
 8004164:	4615      	mov	r5, r2
 8004166:	4606      	mov	r6, r0
  BufferSize = GetBufferSize(LayerIndex);
 8004168:	f7ff feec 	bl	8003f44 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800416c:	231c      	movs	r3, #28
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <LCD_LL_CopyBuffer+0x38>)
 8004170:	4373      	muls	r3, r6
 8004172:	58d7      	ldr	r7, [r2, r3]
 8004174:	18d4      	adds	r4, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8004176:	2300      	movs	r3, #0
 8004178:	fb00 7205 	mla	r2, r0, r5, r7
 800417c:	9302      	str	r3, [sp, #8]
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	fb00 7101 	mla	r1, r0, r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	f7ff ffbc 	bl	8004108 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8004190:	60a5      	str	r5, [r4, #8]
}
 8004192:	b005      	add	sp, #20
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004196:	bf00      	nop
 8004198:	2003d1a8 	.word	0x2003d1a8

0800419c <LCD_LL_CopyRect>:
{
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	4607      	mov	r7, r0
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041a2:	261c      	movs	r6, #28
{
 80041a4:	469a      	mov	sl, r3
 80041a6:	4614      	mov	r4, r2
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041a8:	437e      	muls	r6, r7
  BufferSize = GetBufferSize(LayerIndex);
 80041aa:	f7ff fecb 	bl	8003f44 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <LCD_LL_CopyRect+0x58>)
{
 80041b0:	ad08      	add	r5, sp, #32
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041b2:	199a      	adds	r2, r3, r6
 80041b4:	599b      	ldr	r3, [r3, r6]
{
 80041b6:	e895 0320 	ldmia.w	r5, {r5, r8, r9}
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041ba:	68d6      	ldr	r6, [r2, #12]
 80041bc:	f8d2 e014 	ldr.w	lr, [r2, #20]
 80041c0:	6852      	ldr	r2, [r2, #4]
 80041c2:	fb04 1406 	mla	r4, r4, r6, r1
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80041c6:	f8cd 9020 	str.w	r9, [sp, #32]
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041ca:	4350      	muls	r0, r2
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80041cc:	fb05 a206 	mla	r2, r5, r6, sl
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80041d0:	eba6 0608 	sub.w	r6, r6, r8
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80041d4:	fb0e 3404 	mla	r4, lr, r4, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80041d8:	fb0e 3202 	mla	r2, lr, r2, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80041dc:	2300      	movs	r3, #0
 80041de:	1821      	adds	r1, r4, r0
 80041e0:	9609      	str	r6, [sp, #36]	; 0x24
 80041e2:	930a      	str	r3, [sp, #40]	; 0x28
 80041e4:	4402      	add	r2, r0
 80041e6:	4643      	mov	r3, r8
 80041e8:	4638      	mov	r0, r7
}
 80041ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 80041ee:	f7ff bf8b 	b.w	8004108 <DMA2D_CopyBuffer>
 80041f2:	bf00      	nop
 80041f4:	2003d1a8 	.word	0x2003d1a8

080041f8 <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 80041f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	4607      	mov	r7, r0
 80041fe:	4698      	mov	r8, r3
 8004200:	4614      	mov	r4, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004202:	f7ff fe9f 	bl	8003f44 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004206:	231c      	movs	r3, #28
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <LCD_LL_DrawBitmap16bpp+0x64>)
{
 800420a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800420c:	437b      	muls	r3, r7
{
 800420e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8004212:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004216:	eb02 0e03 	add.w	lr, r2, r3
 800421a:	f8de 600c 	ldr.w	r6, [lr, #12]
 800421e:	fb04 1406 	mla	r4, r4, r6, r1
 8004222:	58d1      	ldr	r1, [r2, r3]
 8004224:	f8de 3014 	ldr.w	r3, [lr, #20]
  OffLineSrc = (BytesPerLine / 2) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004228:	eba6 0609 	sub.w	r6, r6, r9
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800422c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004230:	fb03 1404 	mla	r4, r3, r4, r1
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004234:	2302      	movs	r3, #2
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004236:	4641      	mov	r1, r8
 8004238:	960c      	str	r6, [sp, #48]	; 0x30
 800423a:	fb02 4200 	mla	r2, r2, r0, r4
 800423e:	4638      	mov	r0, r7
 8004240:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8004244:	fb95 f5f3 	sdiv	r5, r5, r3
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004248:	464b      	mov	r3, r9
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800424a:	eba5 0509 	sub.w	r5, r5, r9
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800424e:	950b      	str	r5, [sp, #44]	; 0x2c
}
 8004250:	b001      	add	sp, #4
 8004252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004256:	f7ff bf57 	b.w	8004108 <DMA2D_CopyBuffer>
 800425a:	bf00      	nop
 800425c:	2003d1a8 	.word	0x2003d1a8

08004260 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	4681      	mov	r9, r0
 8004266:	469a      	mov	sl, r3
 8004268:	4617      	mov	r7, r2
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800426a:	f7ff fe6b 	bl	8003f44 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800426e:	221c      	movs	r2, #28
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <LCD_LL_DrawBitmap32bpp+0x90>)
{
 8004272:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004274:	fb02 f209 	mul.w	r2, r2, r9
{
 8004278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800427c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800427e:	eb03 0e02 	add.w	lr, r3, r2
 8004282:	589a      	ldr	r2, [r3, r2]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004284:	2304      	movs	r3, #4
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8004286:	b2a4      	uxth	r4, r4
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004288:	f8de 500c 	ldr.w	r5, [lr, #12]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800428c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004290:	fb07 1705 	mla	r7, r7, r5, r1
 8004294:	f8de 1014 	ldr.w	r1, [lr, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004298:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800429c:	fb01 2707 	mla	r7, r1, r7, r2
 80042a0:	f8de 2008 	ldr.w	r2, [lr, #8]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80042a4:	fb96 f6f3 	sdiv	r6, r6, r3
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80042a8:	fb02 7700 	mla	r7, r2, r0, r7
  _DMA_ExecOperation();
 80042ac:	f7ff fe56 	bl	8003f5c <_DMA_ExecOperation>
  TransferInProgress = 1;	
 80042b0:	2201      	movs	r2, #1
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <LCD_LL_DrawBitmap32bpp+0x94>)
  PixelFormat = GetPixelformat(LayerIndex);
 80042b4:	4648      	mov	r0, r9
  OffLineSrc = (BytesPerLine / 4) - xSize;
 80042b6:	eba6 0608 	sub.w	r6, r6, r8
  TransferInProgress = 1;	
 80042ba:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 80042bc:	f7ff febc 	bl	8004038 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <LCD_LL_DrawBitmap32bpp+0x98>)
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <LCD_LL_DrawBitmap32bpp+0x9c>)
 80042c4:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 80042c6:	2300      	movs	r3, #0
  DMA2D->FGMAR   = (U32)pSrc;                       
 80042c8:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 80042cc:	63d7      	str	r7, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 80042ce:	6157      	str	r7, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 80042d0:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 80042d2:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 80042d4:	6195      	str	r5, [r2, #24]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 80042d6:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 80042d8:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 80042da:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 80042dc:	6454      	str	r4, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;   
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	f043 0301 	orr.w	r3, r3, #1
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
}
 80042e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= DMA2D_CR_START;   
 80042e8:	6013      	str	r3, [r2, #0]
  _DMA_ExecOperation();
 80042ea:	f7ff be37 	b.w	8003f5c <_DMA_ExecOperation>
 80042ee:	bf00      	nop
 80042f0:	2003d1a8 	.word	0x2003d1a8
 80042f4:	200377a4 	.word	0x200377a4
 80042f8:	4002b000 	.word	0x4002b000
 80042fc:	00020200 	.word	0x00020200

08004300 <_LCD_DrawBitmapAlpha>:
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4606      	mov	r6, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004306:	271c      	movs	r7, #28
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004308:	4698      	mov	r8, r3
 800430a:	9101      	str	r1, [sp, #4]
 800430c:	4614      	mov	r4, r2
  PixelFormat = GetPixelformat(LayerIndex);
 800430e:	f7ff fe93 	bl	8004038 <GetPixelformat>
 8004312:	4683      	mov	fp, r0
  BufferSize = GetBufferSize(LayerIndex);
 8004314:	4630      	mov	r0, r6
 8004316:	f7ff fe15 	bl	8003f44 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800431a:	4377      	muls	r7, r6
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <_LCD_DrawBitmapAlpha+0x70>)
 800431e:	9901      	ldr	r1, [sp, #4]
 8004320:	eb02 0e07 	add.w	lr, r2, r7
 8004324:	59d2      	ldr	r2, [r2, r7]
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004328:	f8de 600c 	ldr.w	r6, [lr, #12]
 800432c:	f8de 3014 	ldr.w	r3, [lr, #20]
 8004330:	fb04 1406 	mla	r4, r4, r6, r1
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004334:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004338:	f8de 7008 	ldr.w	r7, [lr, #8]
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800433c:	4641      	mov	r1, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800433e:	fb03 2404 	mla	r4, r3, r4, r2
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004342:	2304      	movs	r3, #4
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 8004344:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004348:	eba6 0609 	sub.w	r6, r6, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800434c:	464a      	mov	r2, r9
 800434e:	fb07 4000 	mla	r0, r7, r0, r4
 8004352:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004356:	960d      	str	r6, [sp, #52]	; 0x34
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004358:	fb95 f5f3 	sdiv	r5, r5, r3
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800435c:	4653      	mov	r3, sl
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800435e:	eba5 0509 	sub.w	r5, r5, r9
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 8004362:	950c      	str	r5, [sp, #48]	; 0x30
}
 8004364:	b003      	add	sp, #12
 8004366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800436a:	f7ff be23 	b.w	8003fb4 <_DMA_DrawAlphaBitmap>
 800436e:	bf00      	nop
 8004370:	2003d1a8 	.word	0x2003d1a8

08004374 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8004374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	4681      	mov	r9, r0
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800437a:	261c      	movs	r6, #28
{
 800437c:	469a      	mov	sl, r3
 800437e:	9101      	str	r1, [sp, #4]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004380:	fb06 f609 	mul.w	r6, r6, r9
{
 8004384:	4614      	mov	r4, r2
  BufferSize = GetBufferSize(LayerIndex);
 8004386:	f7ff fddd 	bl	8003f44 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <LCD_LL_DrawBitmap8bpp+0x84>)
 800438c:	9901      	ldr	r1, [sp, #4]
 800438e:	1993      	adds	r3, r2, r6
{
 8004390:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8004396:	68dd      	ldr	r5, [r3, #12]
{
 8004398:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 800439c:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80043a0:	fb04 1405 	mla	r4, r4, r5, r1
 80043a4:	5991      	ldr	r1, [r2, r6]
 80043a6:	695a      	ldr	r2, [r3, #20]
  OffLineSrc = BytesPerLine - xSize;
 80043a8:	ebab 0608 	sub.w	r6, fp, r8
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 80043ac:	eba5 0508 	sub.w	r5, r5, r8
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80043b0:	fb02 1404 	mla	r4, r2, r4, r1
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	fb02 4400 	mla	r4, r2, r0, r4
  PixelFormat = GetPixelformat(LayerIndex);
 80043ba:	4648      	mov	r0, r9
 80043bc:	f7ff fe3c 	bl	8004038 <GetPixelformat>
  _DMA_ExecOperation();
 80043c0:	f7ff fdcc 	bl	8003f5c <_DMA_ExecOperation>
  TransferInProgress = 1;
 80043c4:	2201      	movs	r2, #1
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <LCD_LL_DrawBitmap8bpp+0x88>)
 80043c8:	701a      	strb	r2, [r3, #0]
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80043ca:	f44f 3381 	mov.w	r3, #66048	; 0x10200
 80043ce:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <LCD_LL_DrawBitmap8bpp+0x8c>)
 80043d0:	6013      	str	r3, [r2, #0]
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80043d2:	2305      	movs	r3, #5
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 80043d4:	f8c2 a00c 	str.w	sl, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 80043d8:	63d4      	str	r4, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 80043da:	6116      	str	r6, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 80043dc:	6415      	str	r5, [r2, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80043de:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 80043e0:	6350      	str	r0, [r2, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 80043e2:	6457      	str	r7, [r2, #68]	; 0x44
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6013      	str	r3, [r2, #0]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
}
 80043ec:	b003      	add	sp, #12
 80043ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  _DMA_ExecOperation();	
 80043f2:	f7ff bdb3 	b.w	8003f5c <_DMA_ExecOperation>
 80043f6:	bf00      	nop
 80043f8:	2003d1a8 	.word	0x2003d1a8
 80043fc:	200377a4 	.word	0x200377a4
 8004400:	4002b000 	.word	0x4002b000

08004404 <_DMA_Index2ColorBulk.isra.2>:
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 8004404:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004406:	4614      	mov	r4, r2
 8004408:	460d      	mov	r5, r1
 800440a:	461a      	mov	r2, r3
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 800440c:	2300      	movs	r3, #0
 800440e:	9400      	str	r4, [sp, #0]
 8004410:	f7ff fdac 	bl	8003f6c <_DMA_ConvertColor>
 8004414:	462b      	mov	r3, r5
 8004416:	4621      	mov	r1, r4
  while (NumItems >= 4) {
 8004418:	2903      	cmp	r1, #3
 800441a:	f103 0310 	add.w	r3, r3, #16
 800441e:	d80a      	bhi.n	8004436 <_DMA_Index2ColorBulk.isra.2+0x32>
 8004420:	08a3      	lsrs	r3, r4, #2
 8004422:	eb05 1103 	add.w	r1, r5, r3, lsl #4
 8004426:	eba4 0483 	sub.w	r4, r4, r3, lsl #2
 800442a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
  while (NumItems--) {
 800442e:	42a1      	cmp	r1, r4
 8004430:	d143      	bne.n	80044ba <_DMA_Index2ColorBulk.isra.2+0xb6>
}
 8004432:	b002      	add	sp, #8
 8004434:	bd70      	pop	{r4, r5, r6, pc}
    Color = *(pColor + 0);
 8004436:	f853 2c10 	ldr.w	r2, [r3, #-16]
    NumItems -= 4;
 800443a:	3904      	subs	r1, #4
    Color = ((Color << 24) >>  8)  // Red
 800443c:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800443e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004442:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8004446:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 800444a:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 800444c:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800444e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004452:	4302      	orrs	r2, r0
    *(pColor + 0) = Color;
 8004454:	f843 2c10 	str.w	r2, [r3, #-16]
    Color = *(pColor + 1);
 8004458:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    Color = ((Color << 24) >>  8)  // Red
 800445c:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800445e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004462:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8004466:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 800446a:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 800446c:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800446e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004472:	4302      	orrs	r2, r0
    *(pColor + 1) = Color;
 8004474:	f843 2c0c 	str.w	r2, [r3, #-12]
    Color = *(pColor + 2);
 8004478:	f853 2c08 	ldr.w	r2, [r3, #-8]
    Color = ((Color << 24) >>  8)  // Red
 800447c:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800447e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004482:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 8004486:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 800448a:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 800448c:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 800448e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004492:	4302      	orrs	r2, r0
    *(pColor + 2) = Color;
 8004494:	f843 2c08 	str.w	r2, [r3, #-8]
    Color = *(pColor + 3);
 8004498:	f853 2c04 	ldr.w	r2, [r3, #-4]
    Color = ((Color << 24) >>  8)  // Red
 800449c:	0616      	lsls	r6, r2, #24
          | ((Color <<  8) >> 24)  // Blue
 800449e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80044a2:	ea40 2016 	orr.w	r0, r0, r6, lsr #8
          |  (Color & 0xFF00)      // Green
 80044a6:	f402 467f 	and.w	r6, r2, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80044aa:	43d2      	mvns	r2, r2
          | ((Color <<  8) >> 24)  // Blue
 80044ac:	4330      	orrs	r0, r6
          | (~Color & 0xFF000000); // Alpha
 80044ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80044b2:	4302      	orrs	r2, r0
    *(pColor + 3) = Color;
 80044b4:	f843 2c04 	str.w	r2, [r3, #-4]
 80044b8:	e7ae      	b.n	8004418 <_DMA_Index2ColorBulk.isra.2+0x14>
    Color = *pColor;
 80044ba:	680b      	ldr	r3, [r1, #0]
    Color = ((Color << 24) >>  8)  // Red
 80044bc:	0618      	lsls	r0, r3, #24
          | ((Color <<  8) >> 24)  // Blue
 80044be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80044c2:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
          |  (Color & 0xFF00)      // Green
 80044c6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80044ca:	43db      	mvns	r3, r3
          | ((Color <<  8) >> 24)  // Blue
 80044cc:	4302      	orrs	r2, r0
          | (~Color & 0xFF000000); // Alpha
 80044ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80044d2:	4313      	orrs	r3, r2
    *pColor++ = Color;
 80044d4:	f841 3b04 	str.w	r3, [r1], #4
 80044d8:	e7a9      	b.n	800442e <_DMA_Index2ColorBulk.isra.2+0x2a>

080044da <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 80044da:	2300      	movs	r3, #0
 80044dc:	f7ff bf92 	b.w	8004404 <_DMA_Index2ColorBulk.isra.2>

080044e0 <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 80044e0:	2304      	movs	r3, #4
 80044e2:	f7ff bf8f 	b.w	8004404 <_DMA_Index2ColorBulk.isra.2>

080044e6 <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 80044e6:	2302      	movs	r3, #2
 80044e8:	f7ff bf8c 	b.w	8004404 <_DMA_Index2ColorBulk.isra.2>

080044ec <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 80044ec:	2303      	movs	r3, #3
 80044ee:	f7ff bf89 	b.w	8004404 <_DMA_Index2ColorBulk.isra.2>
	...

080044f4 <_DMA_Color2IndexBulk.isra.3>:
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 80044f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f6:	4606      	mov	r6, r0
 80044f8:	4d3d      	ldr	r5, [pc, #244]	; (80045f0 <_DMA_Color2IndexBulk.isra.3+0xfc>)
 80044fa:	4617      	mov	r7, r2
  while (NumItems >= 4) {
 80044fc:	2f03      	cmp	r7, #3
 80044fe:	f106 0610 	add.w	r6, r6, #16
 8004502:	f105 0510 	add.w	r5, r5, #16
 8004506:	d811      	bhi.n	800452c <_DMA_Color2IndexBulk.isra.3+0x38>
 8004508:	0894      	lsrs	r4, r2, #2
 800450a:	4f3a      	ldr	r7, [pc, #232]	; (80045f4 <_DMA_Color2IndexBulk.isra.3+0x100>)
 800450c:	0125      	lsls	r5, r4, #4
 800450e:	eba2 0484 	sub.w	r4, r2, r4, lsl #2
 8004512:	442f      	add	r7, r5
 8004514:	4428      	add	r0, r5
 8004516:	eb07 0684 	add.w	r6, r7, r4, lsl #2
  while (NumItems--) {
 800451a:	42b7      	cmp	r7, r6
 800451c:	d154      	bne.n	80045c8 <_DMA_Color2IndexBulk.isra.3+0xd4>
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	4834      	ldr	r0, [pc, #208]	; (80045f4 <_DMA_Color2IndexBulk.isra.3+0x100>)
 8004524:	f7ff fd22 	bl	8003f6c <_DMA_ConvertColor>
}
 8004528:	b003      	add	sp, #12
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Color = *(pColorSrc + 0);
 800452c:	f856 4c10 	ldr.w	r4, [r6, #-16]
    NumItems -= 4;
 8004530:	3f04      	subs	r7, #4
    Color = ((Color << 24) >>  8)  // Red
 8004532:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8004536:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800453a:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 800453e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004542:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8004544:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8004548:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 800454c:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 0) = Color;
 8004550:	f845 4c20 	str.w	r4, [r5, #-32]
    Color = *(pColorSrc + 1);
 8004554:	f856 4c0c 	ldr.w	r4, [r6, #-12]
    Color = ((Color << 24) >>  8)  // Red
 8004558:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 800455c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8004560:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 8004564:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 8004568:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 800456a:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 800456e:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004572:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 1) = Color;
 8004576:	f845 4c1c 	str.w	r4, [r5, #-28]
    Color = *(pColorSrc + 2);
 800457a:	f856 4c08 	ldr.w	r4, [r6, #-8]
    Color = ((Color << 24) >>  8)  // Red
 800457e:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 8004582:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8004586:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 800458a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 800458e:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 8004590:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 8004594:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 8004598:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 2) = Color;
 800459c:	f845 4c18 	str.w	r4, [r5, #-24]
    Color = *(pColorSrc + 3);
 80045a0:	f856 4c04 	ldr.w	r4, [r6, #-4]
    Color = ((Color << 24) >>  8)  // Red
 80045a4:	ea4f 6c04 	mov.w	ip, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 80045a8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80045ac:	ea4e 2e1c 	orr.w	lr, lr, ip, lsr #8
          |  (Color & 0xFF00)      // Green
 80045b0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80045b4:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 80045b6:	ea4e 0e0c 	orr.w	lr, lr, ip
          | (~Color & 0xFF000000); // Alpha
 80045ba:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80045be:	ea4e 0404 	orr.w	r4, lr, r4
    *(pColorDst + 3) = Color;
 80045c2:	f845 4c14 	str.w	r4, [r5, #-20]
 80045c6:	e799      	b.n	80044fc <_DMA_Color2IndexBulk.isra.3+0x8>
    Color = *pColorSrc++;
 80045c8:	f850 4b04 	ldr.w	r4, [r0], #4
    Color = ((Color << 24) >>  8)  // Red
 80045cc:	ea4f 6e04 	mov.w	lr, r4, lsl #24
          | ((Color <<  8) >> 24)  // Blue
 80045d0:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80045d4:	ea45 251e 	orr.w	r5, r5, lr, lsr #8
          |  (Color & 0xFF00)      // Green
 80045d8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
          | (~Color & 0xFF000000); // Alpha
 80045dc:	43e4      	mvns	r4, r4
          | ((Color <<  8) >> 24)  // Blue
 80045de:	ea45 050e 	orr.w	r5, r5, lr
          | (~Color & 0xFF000000); // Alpha
 80045e2:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
    Color = ((Color << 24) >>  8)  // Red
 80045e6:	432c      	orrs	r4, r5
    *pColorDst++ = Color;
 80045e8:	f847 4b04 	str.w	r4, [r7], #4
 80045ec:	e795      	b.n	800451a <_DMA_Color2IndexBulk.isra.3+0x26>
 80045ee:	bf00      	nop
 80045f0:	200377b8 	.word	0x200377b8
 80045f4:	200377a8 	.word	0x200377a8

080045f8 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 80045f8:	2300      	movs	r3, #0
 80045fa:	f7ff bf7b 	b.w	80044f4 <_DMA_Color2IndexBulk.isra.3>

080045fe <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 80045fe:	2304      	movs	r3, #4
 8004600:	f7ff bf78 	b.w	80044f4 <_DMA_Color2IndexBulk.isra.3>

08004604 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004604:	2302      	movs	r3, #2
 8004606:	f7ff bf75 	b.w	80044f4 <_DMA_Color2IndexBulk.isra.3>

0800460a <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800460a:	2303      	movs	r3, #3
 800460c:	f7ff bf72 	b.w	80044f4 <_DMA_Color2IndexBulk.isra.3>

08004610 <LCD_LL_FillRect>:
{
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	9c08      	ldr	r4, [sp, #32]
 8004616:	4681      	mov	r9, r0
 8004618:	460e      	mov	r6, r1
 800461a:	4617      	mov	r7, r2
 800461c:	461d      	mov	r5, r3
 800461e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 8004622:	f00f fb73 	bl	8013d0c <GUI_GetDrawMode>
 8004626:	2801      	cmp	r0, #1
 8004628:	d111      	bne.n	800464e <LCD_LL_FillRect+0x3e>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800462a:	2200      	movs	r2, #0
 800462c:	2119      	movs	r1, #25
 800462e:	4648      	mov	r0, r9
 8004630:	f017 fa6e 	bl	801bb10 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8004634:	462a      	mov	r2, r5
 8004636:	4639      	mov	r1, r7
 8004638:	4630      	mov	r0, r6
 800463a:	4623      	mov	r3, r4
 800463c:	f015 fd50 	bl	801a0e0 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8004640:	4648      	mov	r0, r9
 8004642:	4a20      	ldr	r2, [pc, #128]	; (80046c4 <LCD_LL_FillRect+0xb4>)
 8004644:	2119      	movs	r1, #25
}
 8004646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800464a:	f017 ba61 	b.w	801bb10 <LCD_SetDevFunc>
    BufferSize = GetBufferSize(LayerIndex);
 800464e:	4648      	mov	r0, r9
    xSize = x1 - x0 + 1;
 8004650:	1bad      	subs	r5, r5, r6
    BufferSize = GetBufferSize(LayerIndex);
 8004652:	f7ff fc77 	bl	8003f44 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004656:	211c      	movs	r1, #28
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <LCD_LL_FillRect+0xb8>)
    ySize = y1 - y0 + 1;
 800465a:	1be4      	subs	r4, r4, r7
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800465c:	fb01 f109 	mul.w	r1, r1, r9
    xSize = x1 - x0 + 1;
 8004660:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 8004662:	3401      	adds	r4, #1
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004664:	eb02 0e01 	add.w	lr, r2, r1
 8004668:	5851      	ldr	r1, [r2, r1]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800466a:	b2a4      	uxth	r4, r4
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800466c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8004670:	f8de 2014 	ldr.w	r2, [lr, #20]
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8004674:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004678:	fb03 6607 	mla	r6, r3, r7, r6
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800467c:	eba3 0a05 	sub.w	sl, r3, r5
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004680:	fb02 1606 	mla	r6, r2, r6, r1
 8004684:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004688:	fb02 6600 	mla	r6, r2, r0, r6
  _DMA_ExecOperation();
 800468c:	f7ff fc66 	bl	8003f5c <_DMA_ExecOperation>
  TransferInProgress = 1;	
 8004690:	2201      	movs	r2, #1
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <LCD_LL_FillRect+0xbc>)
  PixelFormat = GetPixelformat(LayerIndex);
 8004694:	4648      	mov	r0, r9
  TransferInProgress = 1;	
 8004696:	701a      	strb	r2, [r3, #0]
  PixelFormat = GetPixelformat(LayerIndex);
 8004698:	f7ff fcce 	bl	8004038 <GetPixelformat>
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <LCD_LL_FillRect+0xc0>)
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <LCD_LL_FillRect+0xc4>)
 80046a0:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 80046a2:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  DMA2D->OMAR    = (U32)pDst;                      
 80046a6:	63de      	str	r6, [r3, #60]	; 0x3c
  DMA2D->OOR     = OffLine;                        
 80046a8:	f8c3 a040 	str.w	sl, [r3, #64]	; 0x40
  DMA2D->OPFCCR  = PixelFormat;                    
 80046ac:	6358      	str	r0, [r3, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 80046ae:	645c      	str	r4, [r3, #68]	; 0x44
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	f042 0201 	orr.w	r2, r2, #1
}
 80046ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 80046be:	601a      	str	r2, [r3, #0]
  _DMA_ExecOperation();
 80046c0:	f7ff bc4c 	b.w	8003f5c <_DMA_ExecOperation>
 80046c4:	08004611 	.word	0x08004611
 80046c8:	2003d1a8 	.word	0x2003d1a8
 80046cc:	200377a4 	.word	0x200377a4
 80046d0:	4002b000 	.word	0x4002b000
 80046d4:	00030200 	.word	0x00030200

080046d8 <_Index2ColorBulk_M8888I_DMA2D>:
 80046d8:	2300      	movs	r3, #0
 80046da:	f7ff be93 	b.w	8004404 <_DMA_Index2ColorBulk.isra.2>

080046de <_Color2IndexBulk_M8888I_DMA2D>:
 80046de:	2300      	movs	r3, #0
 80046e0:	f7ff bf08 	b.w	80044f4 <_DMA_Color2IndexBulk.isra.3>

080046e4 <DMA2D_Init>:
{
 80046e4:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 80046e6:	4809      	ldr	r0, [pc, #36]	; (800470c <DMA2D_Init+0x28>)
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <DMA2D_Init+0x2c>)
 80046ea:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80046ec:	f001 fac4 	bl	8005c78 <HAL_DMA2D_Init>
 80046f0:	b108      	cbz	r0, 80046f6 <DMA2D_Init+0x12>
    Error_Handler( );
 80046f2:	f7fd fa59 	bl	8001ba8 <Error_Handler>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80046f6:	2101      	movs	r1, #1
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <DMA2D_Init+0x28>)
 80046fa:	f001 fb9b 	bl	8005e34 <HAL_DMA2D_ConfigLayer>
 80046fe:	b118      	cbz	r0, 8004708 <DMA2D_Init+0x24>
}
 8004700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler( );
 8004704:	f7fd ba50 	b.w	8001ba8 <Error_Handler>
 8004708:	bd08      	pop	{r3, pc}
 800470a:	bf00      	nop
 800470c:	20045fac 	.word	0x20045fac
 8004710:	08003f39 	.word	0x08003f39

08004714 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	4606      	mov	r6, r0
 8004718:	4c13      	ldr	r4, [pc, #76]	; (8004768 <HAL_LTDC_LineEventCallback+0x54>)
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 800471a:	2500      	movs	r5, #0
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 800471c:	f04f 37ff 	mov.w	r7, #4294967295
    if (layer_prop[layer].pending_buffer >= 0) 
 8004720:	6861      	ldr	r1, [r4, #4]
 8004722:	2900      	cmp	r1, #0
 8004724:	db15      	blt.n	8004752 <HAL_LTDC_LineEventCallback+0x3e>
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004726:	68e2      	ldr	r2, [r4, #12]
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6960      	ldr	r0, [r4, #20]
 800472c:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 800472e:	6822      	ldr	r2, [r4, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004730:	434b      	muls	r3, r1
      Addr = layer_prop[layer].address + \
 8004732:	fb00 2303 	mla	r3, r0, r3, r2
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8004736:	6832      	ldr	r2, [r6, #0]
 8004738:	f102 0084 	add.w	r0, r2, #132	; 0x84
 800473c:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 8004740:	6283      	str	r3, [r0, #40]	; 0x28
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8004742:	4628      	mov	r0, r5
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004744:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6253      	str	r3, [r2, #36]	; 0x24
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 800474c:	f012 fbc2 	bl	8016ed4 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[layer].pending_buffer = -1;
 8004750:	6067      	str	r7, [r4, #4]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004752:	3501      	adds	r5, #1
 8004754:	341c      	adds	r4, #28
 8004756:	2d02      	cmp	r5, #2
 8004758:	d1e2      	bne.n	8004720 <HAL_LTDC_LineEventCallback+0xc>
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 800475a:	4630      	mov	r0, r6
 800475c:	2100      	movs	r1, #0
}
 800475e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004762:	f003 baa9 	b.w	8007cb8 <HAL_LTDC_ProgramLineEvent>
 8004766:	bf00      	nop
 8004768:	2003d1a8 	.word	0x2003d1a8

0800476c <LCD_X_Config>:
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800476c:	2300      	movs	r3, #0
 800476e:	4951      	ldr	r1, [pc, #324]	; (80048b4 <LCD_X_Config+0x148>)
 8004770:	4851      	ldr	r0, [pc, #324]	; (80048b8 <LCD_X_Config+0x14c>)
 8004772:	461a      	mov	r2, r3
{
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8004778:	f00f ffd2 	bl	8014720 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 800477c:	2000      	movs	r0, #0
 800477e:	f016 fb1f 	bl	801adc0 <LCD_GetSwapXYEx>
 8004782:	4604      	mov	r4, r0
 8004784:	2800      	cmp	r0, #0
 8004786:	d07d      	beq.n	8004884 <LCD_X_Config+0x118>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004788:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800478c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004790:	2000      	movs	r0, #0
 8004792:	f017 fa0b 	bl	801bbac <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004796:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800479a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800479e:	2000      	movs	r0, #0
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80047a0:	f017 fa36 	bl	801bc10 <LCD_SetVSizeEx>
  }
#if (GUI_NUM_LAYERS > 1)
  /* Set display driver and color conversion for 2nd layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 80047a4:	2301      	movs	r3, #1
 80047a6:	2200      	movs	r2, #0
 80047a8:	4942      	ldr	r1, [pc, #264]	; (80048b4 <LCD_X_Config+0x148>)
 80047aa:	4843      	ldr	r0, [pc, #268]	; (80048b8 <LCD_X_Config+0x14c>)
 80047ac:	f00f ffb8 	bl	8014720 <GUI_DEVICE_CreateAndLink>

  /* Set size of 2nd layer */
  if (LCD_GetSwapXYEx(1)) {
 80047b0:	2001      	movs	r0, #1
 80047b2:	f016 fb05 	bl	801adc0 <LCD_GetSwapXYEx>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d070      	beq.n	800489c <LCD_X_Config+0x130>
    LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 80047ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047be:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047c2:	2001      	movs	r0, #1
 80047c4:	f017 f9f2 	bl	801bbac <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80047c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80047cc:	f44f 7188 	mov.w	r1, #272	; 0x110
  } else {
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80047d0:	2001      	movs	r0, #1
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80047d2:	4d3a      	ldr	r5, [pc, #232]	; (80048bc <LCD_X_Config+0x150>)
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80047d4:	f017 fa1c 	bl	801bc10 <LCD_SetVSizeEx>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80047d8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 80047dc:	2400      	movs	r4, #0
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80047de:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004908 <LCD_X_Config+0x19c>
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80047e2:	602b      	str	r3, [r5, #0]
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 80047e4:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
    layer_prop[i].pending_buffer = -1;

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 80047e8:	4f35      	ldr	r7, [pc, #212]	; (80048c0 <LCD_X_Config+0x154>)
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 80047ea:	4e36      	ldr	r6, [pc, #216]	; (80048c4 <LCD_X_Config+0x158>)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 80047ec:	61eb      	str	r3, [r5, #28]
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80047ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 80047f2:	4620      	mov	r0, r4
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80047f4:	61ab      	str	r3, [r5, #24]
    layer_prop[i].pending_buffer = -1;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
 80047fa:	606b      	str	r3, [r5, #4]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 80047fc:	f016 faa0 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 8004800:	10c0      	asrs	r0, r0, #3
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8004802:	463a      	mov	r2, r7
 8004804:	2121      	movs	r1, #33	; 0x21
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004806:	6168      	str	r0, [r5, #20]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8004808:	4620      	mov	r0, r4
 800480a:	f017 f981 	bl	801bb10 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800480e:	4632      	mov	r2, r6
 8004810:	2123      	movs	r1, #35	; 0x23
 8004812:	4620      	mov	r0, r4
 8004814:	f017 f97c 	bl	801bb10 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8004818:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <LCD_X_Config+0x15c>)
 800481a:	2119      	movs	r1, #25
 800481c:	4620      	mov	r0, r4
 800481e:	f017 f977 	bl	801bb10 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <LCD_X_Config+0x160>)
 8004824:	2125      	movs	r1, #37	; 0x25
 8004826:	4620      	mov	r0, r4
 8004828:	f017 f972 	bl	801bb10 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800482c:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <LCD_X_Config+0x164>)
 800482e:	2124      	movs	r1, #36	; 0x24
 8004830:	4620      	mov	r0, r4
 8004832:	f017 f96d 	bl	801bb10 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 8004836:	4a27      	ldr	r2, [pc, #156]	; (80048d4 <LCD_X_Config+0x168>)
 8004838:	2128      	movs	r1, #40	; 0x28
 800483a:	4620      	mov	r0, r4
 800483c:	f017 f968 	bl	801bb10 <LCD_SetDevFunc>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004840:	4620      	mov	r0, r4
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8004842:	3401      	adds	r4, #1
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004844:	f855 1b1c 	ldr.w	r1, [r5], #28
 8004848:	f017 f9ca 	bl	801bbe0 <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800484c:	2c02      	cmp	r4, #2
 800484e:	d1ce      	bne.n	80047ee <LCD_X_Config+0x82>
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 8004850:	4921      	ldr	r1, [pc, #132]	; (80048d8 <LCD_X_Config+0x16c>)
 8004852:	4822      	ldr	r0, [pc, #136]	; (80048dc <LCD_X_Config+0x170>)
 8004854:	f00d f98e 	bl	8011b74 <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 8004858:	4921      	ldr	r1, [pc, #132]	; (80048e0 <LCD_X_Config+0x174>)
 800485a:	4822      	ldr	r0, [pc, #136]	; (80048e4 <LCD_X_Config+0x178>)
 800485c:	f00d fc1c 	bl	8012098 <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 8004860:	4921      	ldr	r1, [pc, #132]	; (80048e8 <LCD_X_Config+0x17c>)
 8004862:	4822      	ldr	r0, [pc, #136]	; (80048ec <LCD_X_Config+0x180>)
 8004864:	f00d fa42 	bl	8011cec <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 8004868:	4921      	ldr	r1, [pc, #132]	; (80048f0 <LCD_X_Config+0x184>)
 800486a:	4822      	ldr	r0, [pc, #136]	; (80048f4 <LCD_X_Config+0x188>)
 800486c:	f00d fc3a 	bl	80120e4 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 8004870:	4921      	ldr	r1, [pc, #132]	; (80048f8 <LCD_X_Config+0x18c>)
 8004872:	4822      	ldr	r0, [pc, #136]	; (80048fc <LCD_X_Config+0x190>)
 8004874:	f00d fa5a 	bl	8011d2c <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8004878:	4921      	ldr	r1, [pc, #132]	; (8004900 <LCD_X_Config+0x194>)
 800487a:	4822      	ldr	r0, [pc, #136]	; (8004904 <LCD_X_Config+0x198>)
	
//	LCD_SetDevFunc(0, LCD_DEVFUNC_READPIXEL, LCD_DEVFUNC_READPIXEL_CUSTOM);

}
 800487c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 8004880:	f014 bd44 	b.w	801930c <GUI_SetFuncDrawAlpha>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8004884:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004888:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800488c:	f017 f98e 	bl	801bbac <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004890:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004894:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004898:	4620      	mov	r0, r4
 800489a:	e781      	b.n	80047a0 <LCD_X_Config+0x34>
    LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 800489c:	f44f 7288 	mov.w	r2, #272	; 0x110
 80048a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80048a4:	2001      	movs	r0, #1
 80048a6:	f017 f981 	bl	801bbac <LCD_SetSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80048aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80048ae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80048b2:	e78d      	b.n	80047d0 <LCD_X_Config+0x64>
 80048b4:	080271f4 	.word	0x080271f4
 80048b8:	080278c8 	.word	0x080278c8
 80048bc:	2003d1a8 	.word	0x2003d1a8
 80048c0:	08004161 	.word	0x08004161
 80048c4:	0800419d 	.word	0x0800419d
 80048c8:	08004611 	.word	0x08004611
 80048cc:	08004375 	.word	0x08004375
 80048d0:	080041f9 	.word	0x080041f9
 80048d4:	08004261 	.word	0x08004261
 80048d8:	080044ed 	.word	0x080044ed
 80048dc:	0800460b 	.word	0x0800460b
 80048e0:	080044e7 	.word	0x080044e7
 80048e4:	08004605 	.word	0x08004605
 80048e8:	080044e1 	.word	0x080044e1
 80048ec:	080045ff 	.word	0x080045ff
 80048f0:	080044db 	.word	0x080044db
 80048f4:	080045f9 	.word	0x080045f9
 80048f8:	080046d9 	.word	0x080046d9
 80048fc:	080046df 	.word	0x080046df
 8004900:	08004301 	.word	0x08004301
 8004904:	08004011 	.word	0x08004011
 8004908:	08034ab0 	.word	0x08034ab0

0800490c <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 800490c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 800490e:	3903      	subs	r1, #3
{
 8004910:	4604      	mov	r4, r0
 8004912:	4615      	mov	r5, r2
  switch (Cmd) 
 8004914:	290b      	cmp	r1, #11
 8004916:	d87e      	bhi.n	8004a16 <LCD_X_DisplayDriver+0x10a>
 8004918:	e8df f001 	tbb	[pc, r1]
 800491c:	2e272006 	.word	0x2e272006
 8004920:	5e34484e 	.word	0x5e34484e
 8004924:	196e647d 	.word	0x196e647d
  {

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8004928:	231c      	movs	r3, #28
 800492a:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <LCD_X_DisplayDriver+0x110>)
 800492c:	686d      	ldr	r5, [r5, #4]
 800492e:	4343      	muls	r3, r0
 8004930:	18d0      	adds	r0, r2, r3
 8004932:	58d3      	ldr	r3, [r2, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004934:	4622      	mov	r2, r4
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8004936:	68c1      	ldr	r1, [r0, #12]
 8004938:	6940      	ldr	r0, [r0, #20]
 800493a:	4369      	muls	r1, r5
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 800493c:	fb00 3101 	mla	r1, r0, r1, r3
 8004940:	4837      	ldr	r0, [pc, #220]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 8004942:	f003 f98f 	bl	8007c64 <HAL_LTDC_SetAddress>
 int r = 0;
 8004946:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r; 
}
 8004948:	4628      	mov	r0, r5
 800494a:	b003      	add	sp, #12
 800494c:	bd30      	pop	{r4, r5, pc}
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800494e:	231c      	movs	r3, #28
 8004950:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <LCD_X_DisplayDriver+0x110>)
 8004952:	fb03 2400 	mla	r4, r3, r0, r2
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	6063      	str	r3, [r4, #4]
 800495a:	e7f4      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 800495c:	4603      	mov	r3, r0
 800495e:	2201      	movs	r2, #1
 8004960:	4629      	mov	r1, r5
 8004962:	482f      	ldr	r0, [pc, #188]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 8004964:	f003 f87c 	bl	8007a60 <HAL_LTDC_ConfigCLUT>
 8004968:	e7ed      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    __HAL_LTDC_ENABLE(&hltdc);
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	6993      	ldr	r3, [r2, #24]
 8004970:	f043 0301 	orr.w	r3, r3, #1
    __HAL_LTDC_DISABLE(&hltdc);
 8004974:	6193      	str	r3, [r2, #24]
 8004976:	e7e6      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
 8004978:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	6993      	ldr	r3, [r2, #24]
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	e7f7      	b.n	8004974 <LCD_X_DisplayDriver+0x68>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	01c4      	lsls	r4, r0, #7
 8004988:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 800498a:	2b01      	cmp	r3, #1
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 800498c:	6813      	ldr	r3, [r2, #0]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 800498e:	6812      	ldr	r2, [r2, #0]
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8004990:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8004994:	5919      	ldr	r1, [r3, r4]
 8004996:	bf0c      	ite	eq
 8004998:	f041 0101 	orreq.w	r1, r1, #1
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 800499c:	f021 0101 	bicne.w	r1, r1, #1
 80049a0:	5119      	str	r1, [r3, r4]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 80049a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6253      	str	r3, [r2, #36]	; 0x24
 80049aa:	e7cc      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 80049ac:	4603      	mov	r3, r0
 80049ae:	ca06      	ldmia	r2, {r1, r2}
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80049b0:	481b      	ldr	r0, [pc, #108]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 80049b2:	f003 f8e3 	bl	8007b7c <HAL_LTDC_SetWindowPosition>
 80049b6:	e7c6      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 80049b8:	aa01      	add	r2, sp, #4
 80049ba:	4669      	mov	r1, sp
 80049bc:	f012 fbd2 	bl	8017164 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 80049c0:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <LCD_X_DisplayDriver+0x110>)
 80049c2:	231c      	movs	r3, #28
 80049c4:	fb03 2304 	mla	r3, r3, r4, r2
 80049c8:	682a      	ldr	r2, [r5, #0]
 80049ca:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80049d0:	4623      	mov	r3, r4
 80049d2:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80049d6:	e7eb      	b.n	80049b0 <LCD_X_DisplayDriver+0xa4>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80049d8:	4602      	mov	r2, r0
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	4810      	ldr	r0, [pc, #64]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 80049de:	f003 f911 	bl	8007c04 <HAL_LTDC_SetAlpha>
 80049e2:	e7b0      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80049e4:	6815      	ldr	r5, [r2, #0]
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80049e6:	4601      	mov	r1, r0
 80049e8:	480d      	ldr	r0, [pc, #52]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80049ea:	b115      	cbz	r5, 80049f2 <LCD_X_DisplayDriver+0xe6>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80049ec:	f003 f880 	bl	8007af0 <HAL_LTDC_EnableColorKeying>
 80049f0:	e7a9      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 80049f2:	f003 f89f 	bl	8007b34 <HAL_LTDC_DisableColorKeying>
 80049f6:	e7a7      	b.n	8004948 <LCD_X_DisplayDriver+0x3c>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80049f8:	6813      	ldr	r3, [r2, #0]
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80049fa:	041a      	lsls	r2, r3, #16
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80049fc:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8004a00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 8004a04:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8004a08:	4311      	orrs	r1, r2
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4804      	ldr	r0, [pc, #16]	; (8004a20 <LCD_X_DisplayDriver+0x114>)
 8004a0e:	4319      	orrs	r1, r3
 8004a10:	f003 f800 	bl	8007a14 <HAL_LTDC_ConfigColorKeying>
 8004a14:	e797      	b.n	8004946 <LCD_X_DisplayDriver+0x3a>
    r = -1;
 8004a16:	f04f 35ff 	mov.w	r5, #4294967295
  return r; 
 8004a1a:	e795      	b.n	8004948 <LCD_X_DisplayDriver+0x3c>
 8004a1c:	2003d1a8 	.word	0x2003d1a8
 8004a20:	20045f04 	.word	0x20045f04

08004a24 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 8004a24:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 8004a26:	f7ff f8a1 	bl	8003b6c <MX_FMC_Init>
  MX_SDRAM_InitEx();
 8004a2a:	f7ff f8cf 	bl	8003bcc <MX_SDRAM_InitEx>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 8004a2e:	f7ff f845 	bl	8003abc <MX_LCD_Init>
  MX_DMA2D_Init();
 8004a32:	f7ff f917 	bl	8003c64 <MX_DMA2D_Init>
  DMA2D_Init();
 
}
 8004a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DMA2D_Init();
 8004a3a:	f7ff be53 	b.w	80046e4 <DMA2D_Init>

08004a3e <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
  /* Initialize the GUI */
  GUI_Init();
 8004a3e:	f00f bcb5 	b.w	80143ac <GUI_Init>
	...

08004a44 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004a44:	2904      	cmp	r1, #4
 8004a46:	d00a      	beq.n	8004a5e <USBH_UserProcess+0x1a>
 8004a48:	2905      	cmp	r1, #5
 8004a4a:	d004      	beq.n	8004a56 <USBH_UserProcess+0x12>
 8004a4c:	2902      	cmp	r1, #2
 8004a4e:	d105      	bne.n	8004a5c <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <USBH_UserProcess+0x20>)
 8004a52:	7019      	strb	r1, [r3, #0]
  break;
 8004a54:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8004a56:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <USBH_UserProcess+0x20>)
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	4770      	bx	lr
 8004a5e:	2201      	movs	r2, #1
 8004a60:	e7fa      	b.n	8004a58 <USBH_UserProcess+0x14>
 8004a62:	bf00      	nop
 8004a64:	2003d1e0 	.word	0x2003d1e0

08004a68 <MX_USB_HOST_Init>:
{
 8004a68:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	490b      	ldr	r1, [pc, #44]	; (8004a9c <MX_USB_HOST_Init+0x34>)
 8004a6e:	480c      	ldr	r0, [pc, #48]	; (8004aa0 <MX_USB_HOST_Init+0x38>)
 8004a70:	f00a fe68 	bl	800f744 <USBH_Init>
 8004a74:	b108      	cbz	r0, 8004a7a <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8004a76:	f7fd f897 	bl	8001ba8 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <MX_USB_HOST_Init+0x3c>)
 8004a7c:	4808      	ldr	r0, [pc, #32]	; (8004aa0 <MX_USB_HOST_Init+0x38>)
 8004a7e:	f00a fe95 	bl	800f7ac <USBH_RegisterClass>
 8004a82:	b108      	cbz	r0, 8004a88 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8004a84:	f7fd f890 	bl	8001ba8 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004a88:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_USB_HOST_Init+0x38>)
 8004a8a:	f00a fec1 	bl	800f810 <USBH_Start>
 8004a8e:	b118      	cbz	r0, 8004a98 <MX_USB_HOST_Init+0x30>
}
 8004a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004a94:	f7fd b888 	b.w	8001ba8 <Error_Handler>
 8004a98:	bd08      	pop	{r3, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08004a45 	.word	0x08004a45
 8004aa0:	20046020 	.word	0x20046020
 8004aa4:	200000d8 	.word	0x200000d8

08004aa8 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8004aa8:	6803      	ldr	r3, [r0, #0]
 8004aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8004aae:	b530      	push	{r4, r5, lr}
 8004ab0:	b089      	sub	sp, #36	; 0x24
  if(hcdHandle->Instance==USB_OTG_FS)
 8004ab2:	d132      	bne.n	8004b1a <HAL_HCD_MspInit+0x72>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab4:	4c1a      	ldr	r4, [pc, #104]	; (8004b20 <HAL_HCD_MspInit+0x78>)
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab8:	a903      	add	r1, sp, #12
 8004aba:	481a      	ldr	r0, [pc, #104]	; (8004b24 <HAL_HCD_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8004ad0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004ad4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ada:	2303      	movs	r3, #3
 8004adc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004ade:	230a      	movs	r3, #10
 8004ae0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae2:	f001 fa21 	bl	8005f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004ae8:	2043      	movs	r0, #67	; 0x43
 8004aea:	462a      	mov	r2, r5
 8004aec:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	6363      	str	r3, [r4, #52]	; 0x34
 8004af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	9b01      	ldr	r3, [sp, #4]
 8004afe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	6463      	str	r3, [r4, #68]	; 0x44
 8004b06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8004b10:	f000 fe9a 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004b14:	2043      	movs	r0, #67	; 0x43
 8004b16:	f000 fedf 	bl	80058d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004b1a:	b009      	add	sp, #36	; 0x24
 8004b1c:	bd30      	pop	{r4, r5, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40020000 	.word	0x40020000

08004b28 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004b28:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b2c:	f00b b815 	b.w	800fb5a <USBH_LL_IncTimer>

08004b30 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8004b30:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b34:	f00b b827 	b.w	800fb86 <USBH_LL_Connect>

08004b38 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004b38:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b3c:	f00b b840 	b.w	800fbc0 <USBH_LL_Disconnect>

08004b40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8004b40:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b44:	f00b b860 	b.w	800fc08 <USBH_LL_NotifyURBChange>

08004b48 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004b48:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b4c:	f00b b813 	b.w	800fb76 <USBH_LL_PortEnabled>

08004b50 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8004b50:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004b54:	f00b b813 	b.w	800fb7e <USBH_LL_PortDisabled>

08004b58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8004b58:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004b5a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 8004b5e:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d11c      	bne.n	8004b9e <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8004b64:	480f      	ldr	r0, [pc, #60]	; (8004ba4 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004b6a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b6c:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004b6e:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 8004b70:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004b74:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004b76:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 8004b78:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004b7c:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004b7e:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004b80:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004b82:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b84:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004b86:	f001 fc65 	bl	8006454 <HAL_HCD_Init>
 8004b8a:	b108      	cbz	r0, 8004b90 <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 8004b8c:	f7fd f80c 	bl	8001ba8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004b90:	4804      	ldr	r0, [pc, #16]	; (8004ba4 <USBH_LL_Init+0x4c>)
 8004b92:	f002 f861 	bl	8006c58 <HAL_HCD_GetCurrentFrame>
 8004b96:	4601      	mov	r1, r0
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f00a ffdb 	bl	800fb54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200463f8 	.word	0x200463f8

08004ba8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004ba8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004baa:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004bae:	f002 f81d 	bl	8006bec <HAL_HCD_Start>
 8004bb2:	2803      	cmp	r0, #3
 8004bb4:	bf9a      	itte	ls
 8004bb6:	4b02      	ldrls	r3, [pc, #8]	; (8004bc0 <USBH_LL_Start+0x18>)
 8004bb8:	5c18      	ldrbls	r0, [r3, r0]
 8004bba:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004bbc:	bd08      	pop	{r3, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08034abb 	.word	0x08034abb

08004bc4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004bc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8004bc6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004bca:	f002 f825 	bl	8006c18 <HAL_HCD_Stop>
 8004bce:	2803      	cmp	r0, #3
 8004bd0:	bf9a      	itte	ls
 8004bd2:	4b02      	ldrls	r3, [pc, #8]	; (8004bdc <USBH_LL_Stop+0x18>)
 8004bd4:	5c18      	ldrbls	r0, [r3, r0]
 8004bd6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004bd8:	bd08      	pop	{r3, pc}
 8004bda:	bf00      	nop
 8004bdc:	08034abb 	.word	0x08034abb

08004be0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004be0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004be2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004be6:	f002 f83a 	bl	8006c5e <HAL_HCD_GetCurrentSpeed>
 8004bea:	2802      	cmp	r0, #2
 8004bec:	bf9a      	itte	ls
 8004bee:	4b02      	ldrls	r3, [pc, #8]	; (8004bf8 <USBH_LL_GetSpeed+0x18>)
 8004bf0:	5c18      	ldrbls	r0, [r3, r0]
 8004bf2:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004bf4:	bd08      	pop	{r3, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08034ab8 	.word	0x08034ab8

08004bfc <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004bfc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004bfe:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c02:	f002 f81b 	bl	8006c3c <HAL_HCD_ResetPort>
 8004c06:	2803      	cmp	r0, #3
 8004c08:	bf9a      	itte	ls
 8004c0a:	4b02      	ldrls	r3, [pc, #8]	; (8004c14 <USBH_LL_ResetPort+0x18>)
 8004c0c:	5c18      	ldrbls	r0, [r3, r0]
 8004c0e:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004c10:	bd08      	pop	{r3, pc}
 8004c12:	bf00      	nop
 8004c14:	08034abb 	.word	0x08034abb

08004c18 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004c18:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c1c:	f002 b817 	b.w	8006c4e <HAL_HCD_HC_GetXferCount>

08004c20 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004c22:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004c26:	9402      	str	r4, [sp, #8]
 8004c28:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004c2c:	9401      	str	r4, [sp, #4]
 8004c2e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004c32:	9400      	str	r4, [sp, #0]
 8004c34:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c38:	f001 fbc0 	bl	80063bc <HAL_HCD_HC_Init>
 8004c3c:	2803      	cmp	r0, #3
 8004c3e:	bf96      	itet	ls
 8004c40:	4b02      	ldrls	r3, [pc, #8]	; (8004c4c <USBH_LL_OpenPipe+0x2c>)
 8004c42:	2002      	movhi	r0, #2
 8004c44:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004c46:	b004      	add	sp, #16
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	08034abb 	.word	0x08034abb

08004c50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004c50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004c52:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c56:	f001 fbea 	bl	800642e <HAL_HCD_HC_Halt>
 8004c5a:	2803      	cmp	r0, #3
 8004c5c:	bf9a      	itte	ls
 8004c5e:	4b02      	ldrls	r3, [pc, #8]	; (8004c68 <USBH_LL_ClosePipe+0x18>)
 8004c60:	5c18      	ldrbls	r0, [r3, r0]
 8004c62:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004c64:	bd08      	pop	{r3, pc}
 8004c66:	bf00      	nop
 8004c68:	08034abb 	.word	0x08034abb

08004c6c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004c6e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004c72:	9403      	str	r4, [sp, #12]
 8004c74:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004c78:	9402      	str	r4, [sp, #8]
 8004c7a:	9c07      	ldr	r4, [sp, #28]
 8004c7c:	9401      	str	r4, [sp, #4]
 8004c7e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004c82:	9400      	str	r4, [sp, #0]
 8004c84:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004c88:	f001 fc38 	bl	80064fc <HAL_HCD_HC_SubmitRequest>
 8004c8c:	2803      	cmp	r0, #3
 8004c8e:	bf96      	itet	ls
 8004c90:	4b02      	ldrls	r3, [pc, #8]	; (8004c9c <USBH_LL_SubmitURB+0x30>)
 8004c92:	2002      	movhi	r0, #2
 8004c94:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004c96:	b004      	add	sp, #16
 8004c98:	bd10      	pop	{r4, pc}
 8004c9a:	bf00      	nop
 8004c9c:	08034abb 	.word	0x08034abb

08004ca0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004ca0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004ca4:	f001 bfcd 	b.w	8006c42 <HAL_HCD_HC_GetURBState>

08004ca8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004ca8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004caa:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d102      	bne.n	8004cb8 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8004cb2:	4608      	mov	r0, r1
 8004cb4:	f000 f816 	bl	8004ce4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004cb8:	20c8      	movs	r0, #200	; 0xc8
 8004cba:	f000 fb9d 	bl	80053f8 <HAL_Delay>
  return USBH_OK;
}
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	bd08      	pop	{r3, pc}

08004cc2 <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8004cc2:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 8004cc4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
  if(pHandle->hc[pipe].ep_is_in)
 8004cc8:	fb03 0101 	mla	r1, r3, r1, r0
 8004ccc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004cd0:	b11b      	cbz	r3, 8004cda <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004cd2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8004cda:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8004cde:	e7fa      	b.n	8004cd6 <USBH_LL_SetToggle+0x14>

08004ce0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004ce0:	f000 bb8a 	b.w	80053f8 <HAL_Delay>

08004ce4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8004ce4:	fab0 f280 	clz	r2, r0
 8004ce8:	2120      	movs	r1, #32
 8004cea:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <MX_DriverVbusFS+0x10>)
 8004cec:	0952      	lsrs	r2, r2, #5
 8004cee:	f001 bb4b 	b.w	8006388 <HAL_GPIO_WritePin>
 8004cf2:	bf00      	nop
 8004cf4:	40020c00 	.word	0x40020c00

08004cf8 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4770      	bx	lr

08004cfc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004cfc:	4770      	bx	lr
	...

08004d00 <ft5336_ReadID>:
{
 8004d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004d02:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004d04:	4c0f      	ldr	r4, [pc, #60]	; (8004d44 <ft5336_ReadID+0x44>)
{
 8004d06:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8004d08:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004d0c:	7823      	ldrb	r3, [r4, #0]
 8004d0e:	b91b      	cbnz	r3, 8004d18 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8004d10:	f000 f9e8 	bl	80050e4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004d14:	2301      	movs	r3, #1
 8004d16:	7023      	strb	r3, [r4, #0]
{
 8004d18:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004d1a:	b2ed      	uxtb	r5, r5
 8004d1c:	3c01      	subs	r4, #1
 8004d1e:	21a8      	movs	r1, #168	; 0xa8
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 f9f5 	bl	8005110 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004d26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004d2a:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004d2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d32:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004d34:	d103      	bne.n	8004d3e <ft5336_ReadID+0x3e>
  return (ucReadId);
 8004d36:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004d3e:	2b51      	cmp	r3, #81	; 0x51
 8004d40:	d1ec      	bne.n	8004d1c <ft5336_ReadID+0x1c>
 8004d42:	e7f8      	b.n	8004d36 <ft5336_ReadID+0x36>
 8004d44:	2003d1e4 	.word	0x2003d1e4

08004d48 <ft5336_TS_DetectTouch>:
{
 8004d48:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004d4a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004d50:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004d54:	f000 f9dc 	bl	8005110 <TS_IO_Read>
 8004d58:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d901      	bls.n	8004d74 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004d70:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004d74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004d7a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004d7e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004d80:	2200      	movs	r2, #0
 8004d82:	709a      	strb	r2, [r3, #2]
}
 8004d84:	b002      	add	sp, #8
 8004d86:	bd10      	pop	{r4, pc}
 8004d88:	2003d1e4 	.word	0x2003d1e4

08004d8c <ft5336_TS_GetXY>:
{
 8004d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004d90:	4d29      	ldr	r5, [pc, #164]	; (8004e38 <ft5336_TS_GetXY+0xac>)
{
 8004d92:	4617      	mov	r7, r2
  volatile uint8_t ucReadData = 0;
 8004d94:	2400      	movs	r4, #0
{
 8004d96:	4689      	mov	r9, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004d98:	78ab      	ldrb	r3, [r5, #2]
 8004d9a:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004d9c:	f88d 4007 	strb.w	r4, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d941      	bls.n	8004e28 <ft5336_TS_GetXY+0x9c>
 8004da4:	2b09      	cmp	r3, #9
 8004da6:	d842      	bhi.n	8004e2e <ft5336_TS_GetXY+0xa2>
 8004da8:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <ft5336_TS_GetXY+0xb0>)
 8004daa:	5cd1      	ldrb	r1, [r2, r3]
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <ft5336_TS_GetXY+0xb4>)
 8004dae:	f812 b003 	ldrb.w	fp, [r2, r3]
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <ft5336_TS_GetXY+0xb8>)
 8004db4:	f812 a003 	ldrb.w	sl, [r2, r3]
 8004db8:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <ft5336_TS_GetXY+0xbc>)
 8004dba:	5cd4      	ldrb	r4, [r2, r3]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004dbc:	fa5f f880 	uxtb.w	r8, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004dc0:	4e22      	ldr	r6, [pc, #136]	; (8004e4c <ft5336_TS_GetXY+0xc0>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f000 f9a4 	bl	8005110 <TS_IO_Read>
 8004dc8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004dd4:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004dd6:	f000 f99b 	bl	8005110 <TS_IO_Read>
 8004dda:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004dde:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004de0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004de4:	4640      	mov	r0, r8
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004de6:	8832      	ldrh	r2, [r6, #0]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dee:	4313      	orrs	r3, r2
    *X = coord;
 8004df0:	f8a9 3000 	strh.w	r3, [r9]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004df4:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004df6:	f000 f98b 	bl	8005110 <TS_IO_Read>
 8004dfa:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004dfe:	4621      	mov	r1, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004e04:	4640      	mov	r0, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004e06:	8033      	strh	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004e08:	f000 f982 	bl	8005110 <TS_IO_Read>
 8004e0c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e14:	8832      	ldrh	r2, [r6, #0]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	8033      	strh	r3, [r6, #0]
    *Y = coord;
 8004e20:	803b      	strh	r3, [r7, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004e22:	78ab      	ldrb	r3, [r5, #2]
 8004e24:	3301      	adds	r3, #1
 8004e26:	70ab      	strb	r3, [r5, #2]
}
 8004e28:	b003      	add	sp, #12
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	46a3      	mov	fp, r4
 8004e32:	4621      	mov	r1, r4
 8004e34:	e7c2      	b.n	8004dbc <ft5336_TS_GetXY+0x30>
 8004e36:	bf00      	nop
 8004e38:	2003d1e4 	.word	0x2003d1e4
 8004e3c:	08034abf 	.word	0x08034abf
 8004e40:	08034ac9 	.word	0x08034ac9
 8004e44:	08034ad3 	.word	0x08034ad3
 8004e48:	08034add 	.word	0x08034add
 8004e4c:	2003d1e2 	.word	0x2003d1e2

08004e50 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004e50:	2201      	movs	r2, #1
 8004e52:	21a4      	movs	r1, #164	; 0xa4
 8004e54:	b2c0      	uxtb	r0, r0
 8004e56:	f000 b94b 	b.w	80050f0 <TS_IO_Write>

08004e5a <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	21a4      	movs	r1, #164	; 0xa4
 8004e5e:	b2c0      	uxtb	r0, r0
 8004e60:	f000 b946 	b.w	80050f0 <TS_IO_Write>

08004e64 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004e64:	f7ff bff9 	b.w	8004e5a <ft5336_TS_DisableIT>

08004e68 <ft5336_Reset>:
 8004e68:	4770      	bx	lr
	...

08004e6c <ft5336_Init>:
{
 8004e6c:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 8004e6e:	4c05      	ldr	r4, [pc, #20]	; (8004e84 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 8004e70:	20c8      	movs	r0, #200	; 0xc8
 8004e72:	f000 f961 	bl	8005138 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004e76:	7823      	ldrb	r3, [r4, #0]
 8004e78:	b91b      	cbnz	r3, 8004e82 <ft5336_Init+0x16>
    TS_IO_Init();
 8004e7a:	f000 f933 	bl	80050e4 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	7023      	strb	r3, [r4, #0]
 8004e82:	bd10      	pop	{r4, pc}
 8004e84:	2003d1e4 	.word	0x2003d1e4

08004e88 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8004e88:	2300      	movs	r3, #0
{
 8004e8a:	b513      	push	{r0, r1, r4, lr}
 8004e8c:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004e8e:	b2c0      	uxtb	r0, r0
 8004e90:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 8004e92:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004e96:	f000 f93b 	bl	8005110 <TS_IO_Read>
 8004e9a:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8004e9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ea2:	6023      	str	r3, [r4, #0]
}
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd10      	pop	{r4, pc}

08004ea8 <ft5336_TS_GetTouchInfo>:
{
 8004ea8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004eac:	461f      	mov	r7, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 8004eb0:	2400      	movs	r4, #0
{
 8004eb2:	4690      	mov	r8, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004eb4:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8004eb6:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004eba:	428b      	cmp	r3, r1
 8004ebc:	d92d      	bls.n	8004f1a <ft5336_TS_GetTouchInfo+0x72>
 8004ebe:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004ec0:	b2c5      	uxtb	r5, r0
 8004ec2:	bf96      	itet	ls
 8004ec4:	4a17      	ldrls	r2, [pc, #92]	; (8004f24 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004ec6:	4623      	movhi	r3, r4
 8004ec8:	4b17      	ldrls	r3, [pc, #92]	; (8004f28 <ft5336_TS_GetTouchInfo+0x80>)
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004eca:	4628      	mov	r0, r5
 8004ecc:	bf97      	itett	ls
 8004ece:	5c56      	ldrbls	r6, [r2, r1]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004ed0:	4626      	movhi	r6, r4
 8004ed2:	5c5b      	ldrbls	r3, [r3, r1]
 8004ed4:	4a15      	ldrls	r2, [pc, #84]	; (8004f2c <ft5336_TS_GetTouchInfo+0x84>)
 8004ed6:	bf98      	it	ls
 8004ed8:	5c54      	ldrbls	r4, [r2, r1]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004eda:	4619      	mov	r1, r3
 8004edc:	f000 f918 	bl	8005110 <TS_IO_Read>
 8004ee0:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004ee4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004ee8:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004eea:	9b08      	ldr	r3, [sp, #32]
 8004eec:	0989      	lsrs	r1, r1, #6
 8004eee:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	f000 f90d 	bl	8005110 <TS_IO_Read>
 8004ef6:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004f02:	f8c8 3000 	str.w	r3, [r8]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004f06:	f000 f903 	bl	8005110 <TS_IO_Read>
 8004f0a:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8004f0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004f12:	0912      	lsrs	r2, r2, #4
 8004f14:	f002 0204 	and.w	r2, r2, #4
 8004f18:	603a      	str	r2, [r7, #0]
}
 8004f1a:	b002      	add	sp, #8
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	2003d1e4 	.word	0x2003d1e4
 8004f24:	08034af1 	.word	0x08034af1
 8004f28:	08034ae7 	.word	0x08034ae7
 8004f2c:	08034afb 	.word	0x08034afb

08004f30 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004f36:	f002 fa7b 	bl	8007430 <HAL_I2C_GetState>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d154      	bne.n	8004fe8 <I2Cx_Init+0xb8>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8004f40:	2600      	movs	r6, #0
 8004f42:	4c4a      	ldr	r4, [pc, #296]	; (800506c <I2Cx_Init+0x13c>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f44:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress1      = 0;
 8004f46:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004f48:	612e      	str	r6, [r5, #16]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004f4a:	bf0c      	ite	eq
 8004f4c:	4a48      	ldreq	r2, [pc, #288]	; (8005070 <I2Cx_Init+0x140>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004f4e:	4a49      	ldrne	r2, [pc, #292]	; (8005074 <I2Cx_Init+0x144>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f50:	429d      	cmp	r5, r3
    i2c_handler->Init.OwnAddress2      = 0;
 8004f52:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004f54:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004f56:	4a48      	ldr	r2, [pc, #288]	; (8005078 <I2Cx_Init+0x148>)
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004f58:	61ee      	str	r6, [r5, #28]
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004f5a:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004f5c:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004f60:	622e      	str	r6, [r5, #32]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004f62:	60ea      	str	r2, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f64:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004f66:	d141      	bne.n	8004fec <I2Cx_Init+0xbc>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f6c:	a905      	add	r1, sp, #20
 8004f6e:	4843      	ldr	r0, [pc, #268]	; (800507c <I2Cx_Init+0x14c>)
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f70:	6323      	str	r3, [r4, #48]	; 0x30
 8004f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004f74:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004f82:	2312      	movs	r3, #18
 8004f84:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004f86:	2302      	movs	r3, #2
 8004f88:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f8e:	f000 ffcb 	bl	8005f28 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004f92:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f96:	a905      	add	r1, sp, #20
 8004f98:	4838      	ldr	r0, [pc, #224]	; (800507c <I2Cx_Init+0x14c>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004f9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004f9c:	f000 ffc4 	bl	8005f28 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004fa2:	4632      	mov	r2, r6
 8004fa4:	210f      	movs	r1, #15
 8004fa6:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004fa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fac:	6423      	str	r3, [r4, #64]	; 0x40
 8004fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004fb8:	6a23      	ldr	r3, [r4, #32]
 8004fba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fbe:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004fc0:	6a23      	ldr	r3, [r4, #32]
 8004fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fc6:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004fc8:	f000 fc3e 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004fcc:	2048      	movs	r0, #72	; 0x48
 8004fce:	f000 fc83 	bl	80058d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004fd2:	2049      	movs	r0, #73	; 0x49
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	210f      	movs	r1, #15
 8004fd8:	f000 fc36 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004fdc:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004fde:	f000 fc7b 	bl	80058d8 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f001 ffbc 	bl	8006f60 <HAL_I2C_Init>
  }
}
 8004fe8:	b00a      	add	sp, #40	; 0x28
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004fec:	f043 0302 	orr.w	r3, r3, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004ff0:	a905      	add	r1, sp, #20
 8004ff2:	4823      	ldr	r0, [pc, #140]	; (8005080 <I2Cx_Init+0x150>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ff4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004ff8:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005006:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005008:	2312      	movs	r3, #18
 800500a:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800500c:	2302      	movs	r3, #2
 800500e:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005010:	2304      	movs	r3, #4
 8005012:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005014:	f000 ff88 	bl	8005f28 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005018:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800501c:	a905      	add	r1, sp, #20
 800501e:	4818      	ldr	r0, [pc, #96]	; (8005080 <I2Cx_Init+0x150>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005020:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005022:	f000 ff81 	bl	8005f28 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005026:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005028:	4632      	mov	r2, r6
 800502a:	210f      	movs	r1, #15
 800502c:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800502e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005032:	6423      	str	r3, [r4, #64]	; 0x40
 8005034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800503e:	6a23      	ldr	r3, [r4, #32]
 8005040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005044:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005046:	6a23      	ldr	r3, [r4, #32]
 8005048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800504c:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800504e:	f000 fbfb 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005052:	201f      	movs	r0, #31
 8005054:	f000 fc40 	bl	80058d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005058:	2020      	movs	r0, #32
 800505a:	4632      	mov	r2, r6
 800505c:	210f      	movs	r1, #15
 800505e:	f000 fbf3 	bl	8005848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005062:	2020      	movs	r0, #32
 8005064:	e7bb      	b.n	8004fde <I2Cx_Init+0xae>
 8005066:	bf00      	nop
 8005068:	2003d1e8 	.word	0x2003d1e8
 800506c:	40023800 	.word	0x40023800
 8005070:	40005c00 	.word	0x40005c00
 8005074:	40005400 	.word	0x40005400
 8005078:	40912732 	.word	0x40912732
 800507c:	40021c00 	.word	0x40021c00
 8005080:	40020400 	.word	0x40020400

08005084 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005084:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005086:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800508a:	b085      	sub	sp, #20
 800508c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800508e:	9402      	str	r4, [sp, #8]
 8005090:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8005094:	9401      	str	r4, [sp, #4]
 8005096:	9c08      	ldr	r4, [sp, #32]
 8005098:	9400      	str	r4, [sp, #0]
 800509a:	f002 f901 	bl	80072a0 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 800509e:	4604      	mov	r4, r0
 80050a0:	b128      	cbz	r0, 80050ae <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80050a2:	4628      	mov	r0, r5
 80050a4:	f002 f806 	bl	80070b4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80050a8:	4628      	mov	r0, r5
 80050aa:	f7ff ff41 	bl	8004f30 <I2Cx_Init>
}
 80050ae:	4620      	mov	r0, r4
 80050b0:	b005      	add	sp, #20
 80050b2:	bd30      	pop	{r4, r5, pc}

080050b4 <I2Cx_WriteMultiple>:
{
 80050b4:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80050b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80050ba:	b085      	sub	sp, #20
 80050bc:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80050be:	9402      	str	r4, [sp, #8]
 80050c0:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80050c4:	9401      	str	r4, [sp, #4]
 80050c6:	9c08      	ldr	r4, [sp, #32]
 80050c8:	9400      	str	r4, [sp, #0]
 80050ca:	f002 f827 	bl	800711c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80050ce:	4604      	mov	r4, r0
 80050d0:	b128      	cbz	r0, 80050de <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80050d2:	4628      	mov	r0, r5
 80050d4:	f001 ffee 	bl	80070b4 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80050d8:	4628      	mov	r0, r5
 80050da:	f7ff ff29 	bl	8004f30 <I2Cx_Init>
}
 80050de:	4620      	mov	r0, r4
 80050e0:	b005      	add	sp, #20
 80050e2:	bd30      	pop	{r4, r5, pc}

080050e4 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 80050e4:	4801      	ldr	r0, [pc, #4]	; (80050ec <TS_IO_Init+0x8>)
 80050e6:	f7ff bf23 	b.w	8004f30 <I2Cx_Init>
 80050ea:	bf00      	nop
 80050ec:	2003d1e8 	.word	0x2003d1e8

080050f0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80050f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050f2:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80050f4:	2301      	movs	r3, #1
{
 80050f6:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80050fa:	460a      	mov	r2, r1
 80050fc:	4601      	mov	r1, r0
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	9400      	str	r4, [sp, #0]
 8005102:	4802      	ldr	r0, [pc, #8]	; (800510c <TS_IO_Write+0x1c>)
 8005104:	f7ff ffd6 	bl	80050b4 <I2Cx_WriteMultiple>
}
 8005108:	b004      	add	sp, #16
 800510a:	bd10      	pop	{r4, pc}
 800510c:	2003d1e8 	.word	0x2003d1e8

08005110 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	aa04      	add	r2, sp, #16
 8005116:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800511a:	2301      	movs	r3, #1
 800511c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005120:	460a      	mov	r2, r1
 8005122:	4601      	mov	r1, r0
 8005124:	4803      	ldr	r0, [pc, #12]	; (8005134 <TS_IO_Read+0x24>)
 8005126:	f7ff ffad 	bl	8005084 <I2Cx_ReadMultiple>

  return read_value;
}
 800512a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800512e:	b005      	add	sp, #20
 8005130:	f85d fb04 	ldr.w	pc, [sp], #4
 8005134:	2003d1e8 	.word	0x2003d1e8

08005138 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8005138:	f000 b95e 	b.w	80053f8 <HAL_Delay>

0800513c <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <BSP_TS_Init+0x38>)
{
 800513e:	b510      	push	{r4, lr}
  tsXBoundary = ts_SizeX;
 8005140:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005142:	2070      	movs	r0, #112	; 0x70
  tsYBoundary = ts_SizeY;
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <BSP_TS_Init+0x3c>)
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005146:	4c0d      	ldr	r4, [pc, #52]	; (800517c <BSP_TS_Init+0x40>)
  tsYBoundary = ts_SizeY;
 8005148:	8019      	strh	r1, [r3, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	2070      	movs	r0, #112	; 0x70
 8005152:	4798      	blx	r3
 8005154:	2851      	cmp	r0, #81	; 0x51
 8005156:	d10b      	bne.n	8005170 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 800515a:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 800515c:	2208      	movs	r2, #8
    tsDriver = &ft5336_ts_drv;
 800515e:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <BSP_TS_Init+0x48>)
 8005162:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <BSP_TS_Init+0x4c>)
 8005166:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005168:	68e3      	ldr	r3, [r4, #12]
 800516a:	4798      	blx	r3
  uint8_t status = TS_OK;
 800516c:	2000      	movs	r0, #0
 800516e:	bd10      	pop	{r4, pc}
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005170:	2003      	movs	r0, #3
  }

  return status;
}
 8005172:	bd10      	pop	{r4, pc}
 8005174:	2003d266 	.word	0x2003d266
 8005178:	2003d268 	.word	0x2003d268
 800517c:	200000a4 	.word	0x200000a4
 8005180:	2003d260 	.word	0x2003d260
 8005184:	2003d234 	.word	0x2003d234
 8005188:	2003d264 	.word	0x2003d264

0800518c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800518c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 8005190:	a902      	add	r1, sp, #8
 8005192:	2400      	movs	r4, #0
{
 8005194:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005196:	7818      	ldrb	r0, [r3, #0]
  uint32_t gestureId = 0;
 8005198:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800519c:	f7ff fe74 	bl	8004e88 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80051a0:	9801      	ldr	r0, [sp, #4]
 80051a2:	2818      	cmp	r0, #24
 80051a4:	d017      	beq.n	80051d6 <BSP_TS_Get_GestureId+0x4a>
 80051a6:	d809      	bhi.n	80051bc <BSP_TS_Get_GestureId+0x30>
 80051a8:	2810      	cmp	r0, #16
 80051aa:	d00f      	beq.n	80051cc <BSP_TS_Get_GestureId+0x40>
 80051ac:	2814      	cmp	r0, #20
 80051ae:	d010      	beq.n	80051d2 <BSP_TS_Get_GestureId+0x46>
 80051b0:	b9b8      	cbnz	r0, 80051e2 <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 80051b2:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80051b4:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80051b6:	4620      	mov	r0, r4
 80051b8:	b003      	add	sp, #12
 80051ba:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 80051bc:	2840      	cmp	r0, #64	; 0x40
 80051be:	d00c      	beq.n	80051da <BSP_TS_Get_GestureId+0x4e>
 80051c0:	2849      	cmp	r0, #73	; 0x49
 80051c2:	d00c      	beq.n	80051de <BSP_TS_Get_GestureId+0x52>
 80051c4:	281c      	cmp	r0, #28
 80051c6:	d10c      	bne.n	80051e2 <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80051c8:	2304      	movs	r3, #4
 80051ca:	e000      	b.n	80051ce <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80051cc:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80051ce:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 80051d0:	e7f1      	b.n	80051b6 <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80051d2:	2302      	movs	r3, #2
 80051d4:	e7fb      	b.n	80051ce <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e7f9      	b.n	80051ce <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80051da:	2305      	movs	r3, #5
 80051dc:	e7f7      	b.n	80051ce <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80051de:	2306      	movs	r3, #6
 80051e0:	e7f5      	b.n	80051ce <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 80051e2:	2401      	movs	r4, #1
 80051e4:	e7e7      	b.n	80051b6 <BSP_TS_Get_GestureId+0x2a>
 80051e6:	bf00      	nop
 80051e8:	2003d234 	.word	0x2003d234

080051ec <BSP_TS_GetState>:
{
 80051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80051f0:	4d53      	ldr	r5, [pc, #332]	; (8005340 <BSP_TS_GetState+0x154>)
{
 80051f2:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 80051f4:	2400      	movs	r4, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80051f6:	4e53      	ldr	r6, [pc, #332]	; (8005344 <BSP_TS_GetState+0x158>)
 80051f8:	682b      	ldr	r3, [r5, #0]
{
 80051fa:	4681      	mov	r9, r0
  uint32_t weight = 0;
 80051fc:	9405      	str	r4, [sp, #20]
 80051fe:	46aa      	mov	sl, r5
  uint32_t area = 0;
 8005200:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 8005202:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	7830      	ldrb	r0, [r6, #0]
 8005208:	4798      	blx	r3
 800520a:	9603      	str	r6, [sp, #12]
 800520c:	f889 0000 	strb.w	r0, [r9]
  if(TS_State->touchDetected)
 8005210:	b178      	cbz	r0, 8005232 <BSP_TS_GetState+0x46>
 8005212:	f109 0516 	add.w	r5, r9, #22
 8005216:	f109 0602 	add.w	r6, r9, #2
 800521a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800521e:	af11      	add	r7, sp, #68	; 0x44
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005220:	f8df b130 	ldr.w	fp, [pc, #304]	; 8005354 <BSP_TS_GetState+0x168>
    for(index=0; index < TS_State->touchDetected; index++)
 8005224:	f899 3000 	ldrb.w	r3, [r9]
 8005228:	429c      	cmp	r4, r3
 800522a:	d305      	bcc.n	8005238 <BSP_TS_GetState+0x4c>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800522c:	4648      	mov	r0, r9
 800522e:	f7ff ffad 	bl	800518c <BSP_TS_Get_GestureId>
}
 8005232:	b015      	add	sp, #84	; 0x54
 8005234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005238:	f8da 3000 	ldr.w	r3, [sl]
 800523c:	463a      	mov	r2, r7
 800523e:	9803      	ldr	r0, [sp, #12]
 8005240:	4641      	mov	r1, r8
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	7800      	ldrb	r0, [r0, #0]
 8005246:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8005248:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <BSP_TS_GetState+0x15c>)
 800524a:	a90b      	add	r1, sp, #44	; 0x2c
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800524c:	f8df c108 	ldr.w	ip, [pc, #264]	; 8005358 <BSP_TS_GetState+0x16c>
      if(tsOrientation == TS_SWAP_NONE)
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	ab08      	add	r3, sp, #32
 8005254:	2a01      	cmp	r2, #1
        x[index] = brute_x[index];
 8005256:	bf01      	itttt	eq
 8005258:	f8b8 0000 	ldrheq.w	r0, [r8]
 800525c:	f823 0014 	strheq.w	r0, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 8005260:	8838      	ldrheq	r0, [r7, #0]
 8005262:	f821 0014 	strheq.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 8005266:	0790      	lsls	r0, r2, #30
        x[index] = 4096 - brute_x[index];
 8005268:	bf42      	ittt	mi
 800526a:	f8b8 0000 	ldrhmi.w	r0, [r8]
 800526e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8005272:	f823 0014 	strhmi.w	r0, [r3, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 8005276:	0750      	lsls	r0, r2, #29
        y[index] = 4096 - brute_y[index];
 8005278:	bf42      	ittt	mi
 800527a:	8838      	ldrhmi	r0, [r7, #0]
 800527c:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8005280:	f821 0014 	strhmi.w	r0, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 8005284:	0712      	lsls	r2, r2, #28
        y[index] = brute_x[index];
 8005286:	bf42      	ittt	mi
 8005288:	f8b8 2000 	ldrhmi.w	r2, [r8]
 800528c:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 8005290:	883a      	ldrhmi	r2, [r7, #0]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8005292:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 8005296:	bf48      	it	mi
 8005298:	f823 2014 	strhmi.w	r2, [r3, r4, lsl #1]
 800529c:	00a2      	lsls	r2, r4, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800529e:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 80052a2:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80052a6:	f852 000c 	ldr.w	r0, [r2, ip]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80052aa:	459e      	cmp	lr, r3
 80052ac:	bf8c      	ite	hi
 80052ae:	ebae 0303 	subhi.w	r3, lr, r3
 80052b2:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80052b6:	4281      	cmp	r1, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80052b8:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80052ba:	bf8c      	ite	hi
 80052bc:	1a08      	subhi	r0, r1, r0
 80052be:	1a40      	subls	r0, r0, r1
 80052c0:	b280      	uxth	r0, r0
      if ((x_diff + y_diff) > 5)
 80052c2:	4418      	add	r0, r3
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80052c4:	9b03      	ldr	r3, [sp, #12]
      if ((x_diff + y_diff) > 5)
 80052c6:	2805      	cmp	r0, #5
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80052c8:	7818      	ldrb	r0, [r3, #0]
        _x[index] = x[index];
 80052ca:	bfc4      	itt	gt
 80052cc:	f84b e002 	strgt.w	lr, [fp, r2]
        _y[index] = y[index];
 80052d0:	f84c 1002 	strgt.w	r1, [ip, r2]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80052d4:	2870      	cmp	r0, #112	; 0x70
 80052d6:	d115      	bne.n	8005304 <BSP_TS_GetState+0x118>
        TS_State->touchX[index] = x[index];
 80052d8:	f8a6 e000 	strh.w	lr, [r6]
        TS_State->touchY[index] = y[index];
 80052dc:	8171      	strh	r1, [r6, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80052de:	ab07      	add	r3, sp, #28
 80052e0:	aa05      	add	r2, sp, #20
 80052e2:	4621      	mov	r1, r4
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	ab06      	add	r3, sp, #24
 80052e8:	f7ff fdde 	bl	8004ea8 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80052ec:	9b05      	ldr	r3, [sp, #20]
 80052ee:	f805 3b01 	strb.w	r3, [r5], #1
      TS_State->touchArea[index]   = area;
 80052f2:	9b06      	ldr	r3, [sp, #24]
 80052f4:	726b      	strb	r3, [r5, #9]
      switch(event)
 80052f6:	9b07      	ldr	r3, [sp, #28]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d814      	bhi.n	8005326 <BSP_TS_GetState+0x13a>
 80052fc:	e8df f003 	tbb	[pc, r3]
 8005300:	1d1b1911 	.word	0x1d1b1911
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <BSP_TS_GetState+0x160>)
 8005306:	8819      	ldrh	r1, [r3, #0]
 8005308:	f85b 3002 	ldr.w	r3, [fp, r2]
 800530c:	434b      	muls	r3, r1
 800530e:	0b1b      	lsrs	r3, r3, #12
 8005310:	8033      	strh	r3, [r6, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <BSP_TS_GetState+0x164>)
 8005314:	8819      	ldrh	r1, [r3, #0]
 8005316:	f85c 3002 	ldr.w	r3, [ip, r2]
 800531a:	434b      	muls	r3, r1
 800531c:	0b1b      	lsrs	r3, r3, #12
 800531e:	8173      	strh	r3, [r6, #10]
 8005320:	e7dd      	b.n	80052de <BSP_TS_GetState+0xf2>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005322:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005324:	712b      	strb	r3, [r5, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 8005326:	3401      	adds	r4, #1
 8005328:	3602      	adds	r6, #2
 800532a:	f108 0802 	add.w	r8, r8, #2
 800532e:	3702      	adds	r7, #2
 8005330:	e778      	b.n	8005224 <BSP_TS_GetState+0x38>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005332:	2302      	movs	r3, #2
 8005334:	e7f6      	b.n	8005324 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005336:	2303      	movs	r3, #3
 8005338:	e7f4      	b.n	8005324 <BSP_TS_GetState+0x138>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800533a:	2300      	movs	r3, #0
 800533c:	e7f2      	b.n	8005324 <BSP_TS_GetState+0x138>
 800533e:	bf00      	nop
 8005340:	2003d260 	.word	0x2003d260
 8005344:	2003d234 	.word	0x2003d234
 8005348:	2003d264 	.word	0x2003d264
 800534c:	2003d266 	.word	0x2003d266
 8005350:	2003d268 	.word	0x2003d268
 8005354:	2003d238 	.word	0x2003d238
 8005358:	2003d24c 	.word	0x2003d24c

0800535c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800535c:	490f      	ldr	r1, [pc, #60]	; (800539c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800535e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005360:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <SystemInit+0x44>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005376:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800537e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005382:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005384:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <SystemInit+0x48>)
 8005386:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800538e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005390:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005392:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005396:	608b      	str	r3, [r1, #8]
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000ed00 	.word	0xe000ed00
 80053a0:	40023800 	.word	0x40023800
 80053a4:	24003010 	.word	0x24003010

080053a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a8:	b508      	push	{r3, lr}
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <HAL_Init+0x28>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053ac:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053bc:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053be:	f000 fa25 	bl	800580c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f7fc feca 	bl	800215c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80053c8:	f7fc fea8 	bl	800211c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80053cc:	2000      	movs	r0, #0
 80053ce:	bd08      	pop	{r3, pc}
 80053d0:	40023c00 	.word	0x40023c00

080053d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80053d4:	4a03      	ldr	r2, [pc, #12]	; (80053e4 <HAL_IncTick+0x10>)
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <HAL_IncTick+0x14>)
 80053d8:	6811      	ldr	r1, [r2, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	440b      	add	r3, r1
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	200466bc 	.word	0x200466bc
 80053e8:	200000d0 	.word	0x200000d0

080053ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80053ec:	4b01      	ldr	r3, [pc, #4]	; (80053f4 <HAL_GetTick+0x8>)
 80053ee:	6818      	ldr	r0, [r3, #0]
}
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	200466bc 	.word	0x200466bc

080053f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80053fc:	f7ff fff6 	bl	80053ec <HAL_GetTick>
 8005400:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005402:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005404:	bf1e      	ittt	ne
 8005406:	4b04      	ldrne	r3, [pc, #16]	; (8005418 <HAL_Delay+0x20>)
 8005408:	781b      	ldrbne	r3, [r3, #0]
 800540a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800540c:	f7ff ffee 	bl	80053ec <HAL_GetTick>
 8005410:	1b40      	subs	r0, r0, r5
 8005412:	4284      	cmp	r4, r0
 8005414:	d8fa      	bhi.n	800540c <HAL_Delay+0x14>
  {
  }
}
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	200000d0 	.word	0x200000d0

0800541c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800541c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800541e:	4604      	mov	r4, r0
 8005420:	2800      	cmp	r0, #0
 8005422:	f000 812b 	beq.w	800567c <HAL_ADC_Init+0x260>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005426:	6803      	ldr	r3, [r0, #0]
 8005428:	4a95      	ldr	r2, [pc, #596]	; (8005680 <HAL_ADC_Init+0x264>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00c      	beq.n	8005448 <HAL_ADC_Init+0x2c>
 800542e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005432:	4293      	cmp	r3, r2
 8005434:	d008      	beq.n	8005448 <HAL_ADC_Init+0x2c>
 8005436:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_ADC_Init+0x2c>
 800543e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005442:	4890      	ldr	r0, [pc, #576]	; (8005684 <HAL_ADC_Init+0x268>)
 8005444:	f7fc fbb1 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800544e:	d004      	beq.n	800545a <HAL_ADC_Init+0x3e>
 8005450:	f240 114d 	movw	r1, #333	; 0x14d
 8005454:	488b      	ldr	r0, [pc, #556]	; (8005684 <HAL_ADC_Init+0x268>)
 8005456:	f7fc fba8 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800545a:	68a3      	ldr	r3, [r4, #8]
 800545c:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8005460:	d004      	beq.n	800546c <HAL_ADC_Init+0x50>
 8005462:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8005466:	4887      	ldr	r0, [pc, #540]	; (8005684 <HAL_ADC_Init+0x268>)
 8005468:	f7fc fb9f 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d904      	bls.n	800547c <HAL_ADC_Init+0x60>
 8005472:	f240 114f 	movw	r1, #335	; 0x14f
 8005476:	4883      	ldr	r0, [pc, #524]	; (8005684 <HAL_ADC_Init+0x268>)
 8005478:	f7fc fb97 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800547c:	69a3      	ldr	r3, [r4, #24]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d904      	bls.n	800548c <HAL_ADC_Init+0x70>
 8005482:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005486:	487f      	ldr	r0, [pc, #508]	; (8005684 <HAL_ADC_Init+0x268>)
 8005488:	f7fc fb8f 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800548c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800548e:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8005492:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005496:	d011      	beq.n	80054bc <HAL_ADC_Init+0xa0>
 8005498:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800549c:	d00e      	beq.n	80054bc <HAL_ADC_Init+0xa0>
 800549e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80054a2:	d00b      	beq.n	80054bc <HAL_ADC_Init+0xa0>
 80054a4:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 80054a8:	d008      	beq.n	80054bc <HAL_ADC_Init+0xa0>
 80054aa:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d904      	bls.n	80054bc <HAL_ADC_Init+0xa0>
 80054b2:	f240 1151 	movw	r1, #337	; 0x151
 80054b6:	4873      	ldr	r0, [pc, #460]	; (8005684 <HAL_ADC_Init+0x268>)
 80054b8:	f7fc fb77 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80054bc:	68e3      	ldr	r3, [r4, #12]
 80054be:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80054c2:	d004      	beq.n	80054ce <HAL_ADC_Init+0xb2>
 80054c4:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80054c8:	486e      	ldr	r0, [pc, #440]	; (8005684 <HAL_ADC_Init+0x268>)
 80054ca:	f7fc fb6e 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80054ce:	69e3      	ldr	r3, [r4, #28]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	d904      	bls.n	80054e0 <HAL_ADC_Init+0xc4>
 80054d6:	f240 1153 	movw	r1, #339	; 0x153
 80054da:	486a      	ldr	r0, [pc, #424]	; (8005684 <HAL_ADC_Init+0x268>)
 80054dc:	f7fc fb65 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80054e0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d904      	bls.n	80054f2 <HAL_ADC_Init+0xd6>
 80054e8:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80054ec:	4865      	ldr	r0, [pc, #404]	; (8005684 <HAL_ADC_Init+0x268>)
 80054ee:	f7fc fb5c 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80054f2:	6963      	ldr	r3, [r4, #20]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d904      	bls.n	8005502 <HAL_ADC_Init+0xe6>
 80054f8:	f240 1155 	movw	r1, #341	; 0x155
 80054fc:	4861      	ldr	r0, [pc, #388]	; (8005684 <HAL_ADC_Init+0x268>)
 80054fe:	f7fc fb54 	bl	8001baa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8005502:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d904      	bls.n	8005514 <HAL_ADC_Init+0xf8>
 800550a:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800550e:	485d      	ldr	r0, [pc, #372]	; (8005684 <HAL_ADC_Init+0x268>)
 8005510:	f7fc fb4b 	bl	8001baa <assert_failed>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005514:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005516:	4b5c      	ldr	r3, [pc, #368]	; (8005688 <HAL_ADC_Init+0x26c>)
 8005518:	429a      	cmp	r2, r3
 800551a:	d008      	beq.n	800552e <HAL_ADC_Init+0x112>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800551c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800551e:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8005522:	d004      	beq.n	800552e <HAL_ADC_Init+0x112>
 8005524:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8005528:	4856      	ldr	r0, [pc, #344]	; (8005684 <HAL_ADC_Init+0x268>)
 800552a:	f7fc fb3e 	bl	8001baa <assert_failed>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800552e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8005530:	b92d      	cbnz	r5, 800553e <HAL_ADC_Init+0x122>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005532:	4620      	mov	r0, r4
 8005534:	f7fb fdcc 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005538:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800553a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800553e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005540:	06db      	lsls	r3, r3, #27
 8005542:	f100 8099 	bmi.w	8005678 <HAL_ADC_Init+0x25c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005556:	4b4d      	ldr	r3, [pc, #308]	; (800568c <HAL_ADC_Init+0x270>)
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800555e:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	6861      	ldr	r1, [r4, #4]
 8005564:	430a      	orrs	r2, r1
 8005566:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005568:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800556a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005572:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800557a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800557c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800558a:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800558c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800559a:	493b      	ldr	r1, [pc, #236]	; (8005688 <HAL_ADC_Init+0x26c>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800559c:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800559e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055a0:	428a      	cmp	r2, r1
 80055a2:	d05d      	beq.n	8005660 <HAL_ADC_Init+0x244>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055a4:	6899      	ldr	r1, [r3, #8]
 80055a6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80055aa:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055ac:	6899      	ldr	r1, [r3, #8]
 80055ae:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055c4:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055c6:	f022 0202 	bic.w	r2, r2, #2
 80055ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80055d2:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055d4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80055d8:	2a00      	cmp	r2, #0
 80055da:	d049      	beq.n	8005670 <HAL_ADC_Init+0x254>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80055dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055de:	3b01      	subs	r3, #1
 80055e0:	2b07      	cmp	r3, #7
 80055e2:	d904      	bls.n	80055ee <HAL_ADC_Init+0x1d2>
 80055e4:	f44f 61ee 	mov.w	r1, #1904	; 0x770
 80055e8:	4826      	ldr	r0, [pc, #152]	; (8005684 <HAL_ADC_Init+0x268>)
 80055ea:	f7fc fade 	bl	8001baa <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055ee:	6823      	ldr	r3, [r4, #0]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055f2:	685a      	ldr	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80055f4:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80055f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005602:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800560a:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800560c:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800560e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005610:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005614:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005622:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800562e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005636:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8005648:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800564a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800564c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005658:	2300      	movs	r3, #0
 800565a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800565e:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005666:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800566e:	e7a7      	b.n	80055c0 <HAL_ADC_Init+0x1a4>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005676:	e7c8      	b.n	800560a <HAL_ADC_Init+0x1ee>
    tmp_hal_status = HAL_ERROR;
 8005678:	2001      	movs	r0, #1
 800567a:	e7ed      	b.n	8005658 <HAL_ADC_Init+0x23c>
    return HAL_ERROR;
 800567c:	2001      	movs	r0, #1
}
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	40012000 	.word	0x40012000
 8005684:	08034b1d 	.word	0x08034b1d
 8005688:	0f000001 	.word	0x0f000001
 800568c:	40012300 	.word	0x40012300

08005690 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8005690:	2300      	movs	r3, #0
{
 8005692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8005694:	9301      	str	r3, [sp, #4]
{
 8005696:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005698:	680b      	ldr	r3, [r1, #0]
{
 800569a:	460f      	mov	r7, r1
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800569c:	2b12      	cmp	r3, #18
 800569e:	d907      	bls.n	80056b0 <HAL_ADC_ConfigChannel+0x20>
 80056a0:	4a54      	ldr	r2, [pc, #336]	; (80057f4 <HAL_ADC_ConfigChannel+0x164>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_ADC_ConfigChannel+0x20>
 80056a6:	f240 615c 	movw	r1, #1628	; 0x65c
 80056aa:	4853      	ldr	r0, [pc, #332]	; (80057f8 <HAL_ADC_ConfigChannel+0x168>)
 80056ac:	f7fc fa7d 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	2b0f      	cmp	r3, #15
 80056b6:	d904      	bls.n	80056c2 <HAL_ADC_ConfigChannel+0x32>
 80056b8:	f240 615d 	movw	r1, #1629	; 0x65d
 80056bc:	484e      	ldr	r0, [pc, #312]	; (80057f8 <HAL_ADC_ConfigChannel+0x168>)
 80056be:	f7fc fa74 	bl	8001baa <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b07      	cmp	r3, #7
 80056c6:	d904      	bls.n	80056d2 <HAL_ADC_ConfigChannel+0x42>
 80056c8:	f240 615e 	movw	r1, #1630	; 0x65e
 80056cc:	484a      	ldr	r0, [pc, #296]	; (80057f8 <HAL_ADC_ConfigChannel+0x168>)
 80056ce:	f7fc fa6c 	bl	8001baa <assert_failed>
  __HAL_LOCK(hadc);
 80056d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d070      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x12c>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80056da:	683d      	ldr	r5, [r7, #0]
  __HAL_LOCK(hadc);
 80056dc:	2301      	movs	r3, #1
 80056de:	68ba      	ldr	r2, [r7, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80056e0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80056e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80056e6:	6820      	ldr	r0, [r4, #0]
 80056e8:	b2ae      	uxth	r6, r5
	if (sConfig->Channel > ADC_CHANNEL_9)
 80056ea:	d930      	bls.n	800574e <HAL_ADC_ConfigChannel+0xbe>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056ec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80056f0:	f04f 0e07 	mov.w	lr, #7
 80056f4:	68c1      	ldr	r1, [r0, #12]
 80056f6:	3b1e      	subs	r3, #30
 80056f8:	fa0e fe03 	lsl.w	lr, lr, r3
 80056fc:	ea21 010e 	bic.w	r1, r1, lr
 8005700:	60c1      	str	r1, [r0, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005702:	493c      	ldr	r1, [pc, #240]	; (80057f4 <HAL_ADC_ConfigChannel+0x164>)
 8005704:	428d      	cmp	r5, r1
 8005706:	d11d      	bne.n	8005744 <HAL_ADC_ConfigChannel+0xb4>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005708:	68c3      	ldr	r3, [r0, #12]
 800570a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800570e:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	2a06      	cmp	r2, #6
 8005714:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8005718:	d829      	bhi.n	800576e <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800571a:	4413      	add	r3, r2
 800571c:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800571e:	1f59      	subs	r1, r3, #5
 8005720:	231f      	movs	r3, #31
 8005722:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005724:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005728:	ea27 0303 	bic.w	r3, r7, r3
 800572c:	6343      	str	r3, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800572e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005730:	4311      	orrs	r1, r2
 8005732:	6341      	str	r1, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005734:	4b31      	ldr	r3, [pc, #196]	; (80057fc <HAL_ADC_ConfigChannel+0x16c>)
 8005736:	4298      	cmp	r0, r3
 8005738:	d038      	beq.n	80057ac <HAL_ADC_ConfigChannel+0x11c>
  __HAL_UNLOCK(hadc);
 800573a:	2000      	movs	r0, #0
 800573c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005740:	b003      	add	sp, #12
 8005742:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005744:	68c1      	ldr	r1, [r0, #12]
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	430b      	orrs	r3, r1
 800574c:	e7df      	b.n	800570e <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800574e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005752:	f04f 0e07 	mov.w	lr, #7
 8005756:	6901      	ldr	r1, [r0, #16]
 8005758:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005760:	ea21 010e 	bic.w	r1, r1, lr
 8005764:	6101      	str	r1, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005766:	6901      	ldr	r1, [r0, #16]
 8005768:	430b      	orrs	r3, r1
 800576a:	6103      	str	r3, [r0, #16]
 800576c:	e7d0      	b.n	8005710 <HAL_ADC_ConfigChannel+0x80>
  else if (sConfig->Rank < 13)
 800576e:	2a0c      	cmp	r2, #12
 8005770:	d80e      	bhi.n	8005790 <HAL_ADC_ConfigChannel+0x100>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005772:	4413      	add	r3, r2
 8005774:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005776:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800577a:	231f      	movs	r3, #31
 800577c:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800577e:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005782:	ea21 0303 	bic.w	r3, r1, r3
 8005786:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005788:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800578a:	431a      	orrs	r2, r3
 800578c:	6302      	str	r2, [r0, #48]	; 0x30
 800578e:	e7d1      	b.n	8005734 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005790:	4413      	add	r3, r2
 8005792:	221f      	movs	r2, #31
 8005794:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005796:	3b41      	subs	r3, #65	; 0x41
 8005798:	409a      	lsls	r2, r3
 800579a:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800579e:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057a2:	62c2      	str	r2, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80057a6:	4311      	orrs	r1, r2
 80057a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80057aa:	e7c3      	b.n	8005734 <HAL_ADC_ConfigChannel+0xa4>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057ac:	2d12      	cmp	r5, #18
 80057ae:	d107      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x130>
    ADC->CCR |= ADC_CCR_VBATE;
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <HAL_ADC_ConfigChannel+0x170>)
 80057b2:	6853      	ldr	r3, [r2, #4]
 80057b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	e7be      	b.n	800573a <HAL_ADC_ConfigChannel+0xaa>
  __HAL_LOCK(hadc);
 80057bc:	2002      	movs	r0, #2
 80057be:	e7bf      	b.n	8005740 <HAL_ADC_ConfigChannel+0xb0>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_ADC_ConfigChannel+0x164>)
 80057c2:	429d      	cmp	r5, r3
 80057c4:	d001      	beq.n	80057ca <HAL_ADC_ConfigChannel+0x13a>
 80057c6:	2d11      	cmp	r5, #17
 80057c8:	d1b7      	bne.n	800573a <HAL_ADC_ConfigChannel+0xaa>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80057ca:	490d      	ldr	r1, [pc, #52]	; (8005800 <HAL_ADC_ConfigChannel+0x170>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057cc:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80057ce:	684a      	ldr	r2, [r1, #4]
 80057d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057d4:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057d6:	d1b0      	bne.n	800573a <HAL_ADC_ConfigChannel+0xaa>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <HAL_ADC_ConfigChannel+0x174>)
 80057da:	4a0b      	ldr	r2, [pc, #44]	; (8005808 <HAL_ADC_ConfigChannel+0x178>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	fbb3 f2f2 	udiv	r2, r3, r2
 80057e2:	230a      	movs	r3, #10
 80057e4:	4353      	muls	r3, r2
        counter--;
 80057e6:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0a5      	beq.n	800573a <HAL_ADC_ConfigChannel+0xaa>
        counter--;
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	e7f8      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x156>
 80057f4:	10000012 	.word	0x10000012
 80057f8:	08034b1d 	.word	0x08034b1d
 80057fc:	40012000 	.word	0x40012000
 8005800:	40012300 	.word	0x40012300
 8005804:	200000cc 	.word	0x200000cc
 8005808:	000f4240 	.word	0x000f4240

0800580c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800580c:	1ec3      	subs	r3, r0, #3
 800580e:	2b04      	cmp	r3, #4
{
 8005810:	b510      	push	{r4, lr}
 8005812:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005814:	d903      	bls.n	800581e <HAL_NVIC_SetPriorityGrouping+0x12>
 8005816:	2192      	movs	r1, #146	; 0x92
 8005818:	4809      	ldr	r0, [pc, #36]	; (8005840 <HAL_NVIC_SetPriorityGrouping+0x34>)
 800581a:	f7fc f9c6 	bl	8001baa <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005820:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005822:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005824:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005838:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800583a:	60d4      	str	r4, [r2, #12]
 800583c:	bd10      	pop	{r4, pc}
 800583e:	bf00      	nop
 8005840:	08034b5b 	.word	0x08034b5b
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005848:	2a0f      	cmp	r2, #15
{ 
 800584a:	b570      	push	{r4, r5, r6, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	460e      	mov	r6, r1
 8005850:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005852:	d903      	bls.n	800585c <HAL_NVIC_SetPriority+0x14>
 8005854:	21aa      	movs	r1, #170	; 0xaa
 8005856:	481d      	ldr	r0, [pc, #116]	; (80058cc <HAL_NVIC_SetPriority+0x84>)
 8005858:	f7fc f9a7 	bl	8001baa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800585c:	2e0f      	cmp	r6, #15
 800585e:	d903      	bls.n	8005868 <HAL_NVIC_SetPriority+0x20>
 8005860:	21ab      	movs	r1, #171	; 0xab
 8005862:	481a      	ldr	r0, [pc, #104]	; (80058cc <HAL_NVIC_SetPriority+0x84>)
 8005864:	f7fc f9a1 	bl	8001baa <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <HAL_NVIC_SetPriority+0x88>)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586a:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800586c:	68d9      	ldr	r1, [r3, #12]
 800586e:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005872:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005876:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	2b04      	cmp	r3, #4
 800587a:	bf28      	it	cs
 800587c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800587e:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005880:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005884:	bf8c      	ite	hi
 8005886:	3903      	subhi	r1, #3
 8005888:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) >= 0)
 800588a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005890:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005898:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589c:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a0:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a4:	ea42 0205 	orr.w	r2, r2, r5
 80058a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80058ac:	db07      	blt.n	80058be <HAL_NVIC_SetPriority+0x76>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ae:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80058b8:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058be:	f004 040f 	and.w	r4, r4, #15
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_NVIC_SetPriority+0x8c>)
 80058c6:	551a      	strb	r2, [r3, r4]
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	bf00      	nop
 80058cc:	08034b5b 	.word	0x08034b5b
 80058d0:	e000ed00 	.word	0xe000ed00
 80058d4:	e000ed14 	.word	0xe000ed14

080058d8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80058d8:	2800      	cmp	r0, #0
 80058da:	da03      	bge.n	80058e4 <HAL_NVIC_EnableIRQ+0xc>
 80058dc:	21be      	movs	r1, #190	; 0xbe
 80058de:	4806      	ldr	r0, [pc, #24]	; (80058f8 <HAL_NVIC_EnableIRQ+0x20>)
 80058e0:	f7fc b963 	b.w	8001baa <assert_failed>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058e4:	0942      	lsrs	r2, r0, #5
 80058e6:	2301      	movs	r3, #1
 80058e8:	f000 001f 	and.w	r0, r0, #31
 80058ec:	fa03 f000 	lsl.w	r0, r3, r0
 80058f0:	4b02      	ldr	r3, [pc, #8]	; (80058fc <HAL_NVIC_EnableIRQ+0x24>)
 80058f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80058f6:	4770      	bx	lr
 80058f8:	08034b5b 	.word	0x08034b5b
 80058fc:	e000e100 	.word	0xe000e100

08005900 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005900:	2800      	cmp	r0, #0
 8005902:	da03      	bge.n	800590c <HAL_NVIC_DisableIRQ+0xc>
 8005904:	21ce      	movs	r1, #206	; 0xce
 8005906:	4809      	ldr	r0, [pc, #36]	; (800592c <HAL_NVIC_DisableIRQ+0x2c>)
 8005908:	f7fc b94f 	b.w	8001baa <assert_failed>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800590c:	0943      	lsrs	r3, r0, #5
 800590e:	2201      	movs	r2, #1
 8005910:	f000 001f 	and.w	r0, r0, #31
 8005914:	3320      	adds	r3, #32
 8005916:	fa02 f000 	lsl.w	r0, r2, r0
 800591a:	4a05      	ldr	r2, [pc, #20]	; (8005930 <HAL_NVIC_DisableIRQ+0x30>)
 800591c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	08034b5b 	.word	0x08034b5b
 8005930:	e000e100 	.word	0xe000e100

08005934 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005934:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005936:	4604      	mov	r4, r0
 8005938:	b908      	cbnz	r0, 800593e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800593a:	2001      	movs	r0, #1
 800593c:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800593e:	6802      	ldr	r2, [r0, #0]
 8005940:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <HAL_CRC_Init+0xd4>)
 8005942:	429a      	cmp	r2, r3
 8005944:	d003      	beq.n	800594e <HAL_CRC_Init+0x1a>
 8005946:	2170      	movs	r1, #112	; 0x70
 8005948:	4830      	ldr	r0, [pc, #192]	; (8005a0c <HAL_CRC_Init+0xd8>)
 800594a:	f7fc f92e 	bl	8001baa <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800594e:	7f63      	ldrb	r3, [r4, #29]
 8005950:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005954:	b91b      	cbnz	r3, 800595e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005956:	7722      	strb	r2, [r4, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005958:	4620      	mov	r0, r4
 800595a:	f7fb fc15 	bl	8001188 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800595e:	2302      	movs	r3, #2
 8005960:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8005962:	7923      	ldrb	r3, [r4, #4]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d903      	bls.n	8005970 <HAL_CRC_Init+0x3c>
 8005968:	217e      	movs	r1, #126	; 0x7e
 800596a:	4828      	ldr	r0, [pc, #160]	; (8005a0c <HAL_CRC_Init+0xd8>)
 800596c:	f7fc f91d 	bl	8001baa <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005970:	7923      	ldrb	r3, [r4, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d13e      	bne.n	80059f4 <HAL_CRC_Init+0xc0>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	4a25      	ldr	r2, [pc, #148]	; (8005a10 <HAL_CRC_Init+0xdc>)
 800597a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	f022 0218 	bic.w	r2, r2, #24
 8005982:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8005984:	7963      	ldrb	r3, [r4, #5]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d903      	bls.n	8005992 <HAL_CRC_Init+0x5e>
 800598a:	2190      	movs	r1, #144	; 0x90
 800598c:	481f      	ldr	r0, [pc, #124]	; (8005a0c <HAL_CRC_Init+0xd8>)
 800598e:	f7fc f90c 	bl	8001baa <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005992:	7962      	ldrb	r2, [r4, #5]
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	2a00      	cmp	r2, #0
 8005998:	d134      	bne.n	8005a04 <HAL_CRC_Init+0xd0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800599a:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800599e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 80059a0:	6963      	ldr	r3, [r4, #20]
 80059a2:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 80059a6:	d003      	beq.n	80059b0 <HAL_CRC_Init+0x7c>
 80059a8:	219c      	movs	r1, #156	; 0x9c
 80059aa:	4818      	ldr	r0, [pc, #96]	; (8005a0c <HAL_CRC_Init+0xd8>)
 80059ac:	f7fc f8fd 	bl	8001baa <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80059b0:	6822      	ldr	r2, [r4, #0]
 80059b2:	6961      	ldr	r1, [r4, #20]
 80059b4:	6893      	ldr	r3, [r2, #8]
 80059b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80059be:	69a3      	ldr	r3, [r4, #24]
 80059c0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80059c4:	d003      	beq.n	80059ce <HAL_CRC_Init+0x9a>
 80059c6:	21a0      	movs	r1, #160	; 0xa0
 80059c8:	4810      	ldr	r0, [pc, #64]	; (8005a0c <HAL_CRC_Init+0xd8>)
 80059ca:	f7fc f8ee 	bl	8001baa <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	69a1      	ldr	r1, [r4, #24]
 80059d2:	6893      	ldr	r3, [r2, #8]
 80059d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d8:	430b      	orrs	r3, r1
 80059da:	6093      	str	r3, [r2, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80059dc:	6a23      	ldr	r3, [r4, #32]
 80059de:	3b01      	subs	r3, #1
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d903      	bls.n	80059ec <HAL_CRC_Init+0xb8>
 80059e4:	21a5      	movs	r1, #165	; 0xa5
 80059e6:	4809      	ldr	r0, [pc, #36]	; (8005a0c <HAL_CRC_Init+0xd8>)
 80059e8:	f7fc f8df 	bl	8001baa <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80059ec:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80059ee:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80059f0:	7763      	strb	r3, [r4, #29]
}
 80059f2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80059f4:	68e2      	ldr	r2, [r4, #12]
 80059f6:	4620      	mov	r0, r4
 80059f8:	68a1      	ldr	r1, [r4, #8]
 80059fa:	f000 f80b 	bl	8005a14 <HAL_CRCEx_Polynomial_Set>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0c0      	beq.n	8005984 <HAL_CRC_Init+0x50>
 8005a02:	e79a      	b.n	800593a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	e7ca      	b.n	800599e <HAL_CRC_Init+0x6a>
 8005a08:	40023000 	.word	0x40023000
 8005a0c:	08034b9c 	.word	0x08034b9c
 8005a10:	04c11db7 	.word	0x04c11db7

08005a14 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005a14:	f032 0318 	bics.w	r3, r2, #24
{
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4614      	mov	r4, r2
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8005a20:	d003      	beq.n	8005a2a <HAL_CRCEx_Polynomial_Set+0x16>
 8005a22:	215f      	movs	r1, #95	; 0x5f
 8005a24:	4811      	ldr	r0, [pc, #68]	; (8005a6c <HAL_CRCEx_Polynomial_Set+0x58>)
 8005a26:	f7fc f8c0 	bl	8001baa <assert_failed>
{
 8005a2a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005a2c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005a30:	d306      	bcc.n	8005a40 <HAL_CRCEx_Polynomial_Set+0x2c>
 8005a32:	fa25 f203 	lsr.w	r2, r5, r3
 8005a36:	07d2      	lsls	r2, r2, #31
 8005a38:	d5f8      	bpl.n	8005a2c <HAL_CRCEx_Polynomial_Set+0x18>
  {
  }

  switch (PolyLength)
 8005a3a:	2c08      	cmp	r4, #8
 8005a3c:	d014      	beq.n	8005a68 <HAL_CRCEx_Polynomial_Set+0x54>
 8005a3e:	d809      	bhi.n	8005a54 <HAL_CRCEx_Polynomial_Set+0x40>
 8005a40:	b974      	cbnz	r4, 8005a60 <HAL_CRCEx_Polynomial_Set+0x4c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a42:	6833      	ldr	r3, [r6, #0]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a44:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005a46:	615d      	str	r5, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	f022 0218 	bic.w	r2, r2, #24
 8005a4e:	4314      	orrs	r4, r2
 8005a50:	609c      	str	r4, [r3, #8]
  }
  /* Return function status */
  return status;
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
  switch (PolyLength)
 8005a54:	2c10      	cmp	r4, #16
 8005a56:	d005      	beq.n	8005a64 <HAL_CRCEx_Polynomial_Set+0x50>
 8005a58:	2c18      	cmp	r4, #24
 8005a5a:	d101      	bne.n	8005a60 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8005a5c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8005a5e:	d9f0      	bls.n	8005a42 <HAL_CRCEx_Polynomial_Set+0x2e>
  switch (PolyLength)
 8005a60:	2001      	movs	r0, #1
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8005a64:	2b07      	cmp	r3, #7
 8005a66:	e7fa      	b.n	8005a5e <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	e7f8      	b.n	8005a5e <HAL_CRCEx_Polynomial_Set+0x4a>
 8005a6c:	08034bda 	.word	0x08034bda

08005a70 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8005a70:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8005a72:	4604      	mov	r4, r0
 8005a74:	2800      	cmp	r0, #0
 8005a76:	f000 80a2 	beq.w	8005bbe <HAL_DCMI_Init+0x14e>
  {
     return HAL_ERROR;
  }
  
  /* Check function parameters */
  assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
 8005a7a:	6802      	ldr	r2, [r0, #0]
 8005a7c:	4b51      	ldr	r3, [pc, #324]	; (8005bc4 <HAL_DCMI_Init+0x154>)
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d003      	beq.n	8005a8a <HAL_DCMI_Init+0x1a>
 8005a82:	21ba      	movs	r1, #186	; 0xba
 8005a84:	4850      	ldr	r0, [pc, #320]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005a86:	f7fc f890 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
 8005a8a:	68a3      	ldr	r3, [r4, #8]
 8005a8c:	f033 0320 	bics.w	r3, r3, #32
 8005a90:	d003      	beq.n	8005a9a <HAL_DCMI_Init+0x2a>
 8005a92:	21bb      	movs	r1, #187	; 0xbb
 8005a94:	484c      	ldr	r0, [pc, #304]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005a96:	f7fc f888 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005aa0:	d003      	beq.n	8005aaa <HAL_DCMI_Init+0x3a>
 8005aa2:	21bc      	movs	r1, #188	; 0xbc
 8005aa4:	4848      	ldr	r0, [pc, #288]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005aa6:	f7fc f880 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8005ab0:	d003      	beq.n	8005aba <HAL_DCMI_Init+0x4a>
 8005ab2:	21bd      	movs	r1, #189	; 0xbd
 8005ab4:	4844      	ldr	r0, [pc, #272]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005ab6:	f7fc f878 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	f033 0310 	bics.w	r3, r3, #16
 8005ac0:	d003      	beq.n	8005aca <HAL_DCMI_Init+0x5a>
 8005ac2:	21be      	movs	r1, #190	; 0xbe
 8005ac4:	4840      	ldr	r0, [pc, #256]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005ac6:	f7fc f870 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
 8005aca:	6963      	ldr	r3, [r4, #20]
 8005acc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8005ad0:	d006      	beq.n	8005ae0 <HAL_DCMI_Init+0x70>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad6:	d003      	beq.n	8005ae0 <HAL_DCMI_Init+0x70>
 8005ad8:	21bf      	movs	r1, #191	; 0xbf
 8005ada:	483b      	ldr	r0, [pc, #236]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005adc:	f7fc f865 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
 8005ae0:	69a3      	ldr	r3, [r4, #24]
 8005ae2:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8005ae6:	d003      	beq.n	8005af0 <HAL_DCMI_Init+0x80>
 8005ae8:	21c0      	movs	r1, #192	; 0xc0
 8005aea:	4837      	ldr	r0, [pc, #220]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005aec:	f7fc f85d 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
 8005af0:	6a23      	ldr	r3, [r4, #32]
 8005af2:	f033 0308 	bics.w	r3, r3, #8
 8005af6:	d003      	beq.n	8005b00 <HAL_DCMI_Init+0x90>
 8005af8:	21c1      	movs	r1, #193	; 0xc1
 8005afa:	4833      	ldr	r0, [pc, #204]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005afc:	f7fc f855 	bl	8001baa <assert_failed>

  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
 8005b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b02:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005b06:	d003      	beq.n	8005b10 <HAL_DCMI_Init+0xa0>
 8005b08:	21c3      	movs	r1, #195	; 0xc3
 8005b0a:	482f      	ldr	r0, [pc, #188]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005b0c:	f7fc f84d 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
 8005b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b12:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8005b16:	d003      	beq.n	8005b20 <HAL_DCMI_Init+0xb0>
 8005b18:	21c4      	movs	r1, #196	; 0xc4
 8005b1a:	482b      	ldr	r0, [pc, #172]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005b1c:	f7fc f845 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
 8005b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b22:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8005b26:	d003      	beq.n	8005b30 <HAL_DCMI_Init+0xc0>
 8005b28:	21c5      	movs	r1, #197	; 0xc5
 8005b2a:	4827      	ldr	r0, [pc, #156]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005b2c:	f7fc f83d 	bl	8001baa <assert_failed>
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
 8005b30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b32:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8005b36:	d003      	beq.n	8005b40 <HAL_DCMI_Init+0xd0>
 8005b38:	21c6      	movs	r1, #198	; 0xc6
 8005b3a:	4823      	ldr	r0, [pc, #140]	; (8005bc8 <HAL_DCMI_Init+0x158>)
 8005b3c:	f7fc f835 	bl	8001baa <assert_failed>
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8005b40:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005b44:	b913      	cbnz	r3, 8005b4c <HAL_DCMI_Init+0xdc>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005b46:	4620      	mov	r0, r4
 8005b48:	f7fb fb50 	bl	80011ec <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005b4c:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8005b4e:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005b50:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8005b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005b56:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <HAL_DCMI_Init+0x15c>)
 8005b58:	6811      	ldr	r1, [r2, #0]
 8005b5a:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005b5c:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8005b5e:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005b60:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005b62:	6963      	ldr	r3, [r4, #20]
 8005b64:	6810      	ldr	r0, [r2, #0]
 8005b66:	ea43 0301 	orr.w	r3, r3, r1
 8005b6a:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8005b6e:	6925      	ldr	r5, [r4, #16]
 8005b70:	ea43 0305 	orr.w	r3, r3, r5
 8005b74:	68a5      	ldr	r5, [r4, #8]
 8005b76:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8005b7a:	69a5      	ldr	r5, [r4, #24]
 8005b7c:	ea43 0305 	orr.w	r3, r3, r5
 8005b80:	6a25      	ldr	r5, [r4, #32]
 8005b82:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8005b86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b88:	ea43 0305 	orr.w	r3, r3, r5
 8005b8c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005b8e:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8005b92:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005b94:	ea43 0305 	orr.w	r3, r3, r5
 8005b98:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005b9a:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8005b9e:	ea43 0300 	orr.w	r3, r3, r0
 8005ba2:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005ba4:	d101      	bne.n	8005baa <HAL_DCMI_Init+0x13a>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8005ba6:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8005ba8:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005baa:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005bac:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005bae:	f043 031e 	orr.w	r3, r3, #30
 8005bb2:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005bb4:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005bb6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005bb8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8005bbe:	2001      	movs	r0, #1
}
 8005bc0:	bd38      	pop	{r3, r4, r5, pc}
 8005bc2:	bf00      	nop
 8005bc4:	50050000 	.word	0x50050000
 8005bc8:	08034c1b 	.word	0x08034c1b
 8005bcc:	ffe0f007 	.word	0xffe0f007

08005bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd4:	4617      	mov	r7, r2
 8005bd6:	4698      	mov	r8, r3

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005bd8:	1e5a      	subs	r2, r3, #1
 8005bda:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8005bde:	4604      	mov	r4, r0
 8005be0:	460d      	mov	r5, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005be2:	429a      	cmp	r2, r3
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005be4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005be6:	d904      	bls.n	8005bf2 <HAL_DMA_Start_IT+0x22>
 8005be8:	f240 11cd 	movw	r1, #461	; 0x1cd
 8005bec:	4820      	ldr	r0, [pc, #128]	; (8005c70 <HAL_DMA_Start_IT+0xa0>)
 8005bee:	f7fb ffdc 	bl	8001baa <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bf2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d037      	beq.n	8005c6a <HAL_DMA_Start_IT+0x9a>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	2100      	movs	r1, #0
 8005c00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c04:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12a      	bne.n	8005c62 <HAL_DMA_Start_IT+0x92>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c0c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c10:	6561      	str	r1, [r4, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c12:	6821      	ldr	r1, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c14:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c16:	6808      	ldr	r0, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c18:	2b40      	cmp	r3, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c1a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8005c1e:	6008      	str	r0, [r1, #0]
  hdma->Instance->NDTR = DataLength;
 8005c20:	f8c1 8004 	str.w	r8, [r1, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c24:	d11a      	bne.n	8005c5c <HAL_DMA_Start_IT+0x8c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c26:	608f      	str	r7, [r1, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c28:	60cd      	str	r5, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005c2c:	233f      	movs	r3, #63	; 0x3f
 8005c2e:	4093      	lsls	r3, r2
 8005c30:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	f043 0316 	orr.w	r3, r3, #22
 8005c38:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c3a:	694b      	ldr	r3, [r1, #20]
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8005c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c44:	b11b      	cbz	r3, 8005c4e <HAL_DMA_Start_IT+0x7e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c46:	680b      	ldr	r3, [r1, #0]
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c4e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c50:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	600b      	str	r3, [r1, #0]
 8005c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8005c5c:	608d      	str	r5, [r1, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8005c5e:	60cf      	str	r7, [r1, #12]
 8005c60:	e7e3      	b.n	8005c2a <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);	  
 8005c62:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdma);
 8005c6a:	2002      	movs	r0, #2
}
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	08034c5a 	.word	0x08034c5a

08005c74 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005c74:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005c76:	4770      	bx	lr

08005c78 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005c78:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d046      	beq.n	8005d0e <HAL_DMA2D_Init+0x96>
  {
     return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
 8005c80:	6802      	ldr	r2, [r0, #0]
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <HAL_DMA2D_Init+0x9c>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d003      	beq.n	8005c90 <HAL_DMA2D_Init+0x18>
 8005c88:	21f6      	movs	r1, #246	; 0xf6
 8005c8a:	4823      	ldr	r0, [pc, #140]	; (8005d18 <HAL_DMA2D_Init+0xa0>)
 8005c8c:	f7fb ff8d 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8005c96:	d003      	beq.n	8005ca0 <HAL_DMA2D_Init+0x28>
 8005c98:	21f7      	movs	r1, #247	; 0xf7
 8005c9a:	481f      	ldr	r0, [pc, #124]	; (8005d18 <HAL_DMA2D_Init+0xa0>)
 8005c9c:	f7fb ff85 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
 8005ca0:	68a3      	ldr	r3, [r4, #8]
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d903      	bls.n	8005cae <HAL_DMA2D_Init+0x36>
 8005ca6:	21f8      	movs	r1, #248	; 0xf8
 8005ca8:	481b      	ldr	r0, [pc, #108]	; (8005d18 <HAL_DMA2D_Init+0xa0>)
 8005caa:	f7fb ff7e 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb4:	d303      	bcc.n	8005cbe <HAL_DMA2D_Init+0x46>
 8005cb6:	21f9      	movs	r1, #249	; 0xf9
 8005cb8:	4817      	ldr	r0, [pc, #92]	; (8005d18 <HAL_DMA2D_Init+0xa0>)
 8005cba:	f7fb ff76 	bl	8001baa <assert_failed>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005cbe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cc6:	b923      	cbnz	r3, 8005cd2 <HAL_DMA2D_Init+0x5a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005cc8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7fe f915 	bl	8003efc <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005cd2:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cd4:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005cd6:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005cd8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005cde:	6813      	ldr	r3, [r2, #0]
 8005ce0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005ce4:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005ce6:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005ce8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005cea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005cf2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005cf4:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005cf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005cf8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d04:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005d06:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8005d0c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8005d0e:	2001      	movs	r0, #1
}
 8005d10:	bd10      	pop	{r4, pc}
 8005d12:	bf00      	nop
 8005d14:	4002b000 	.word	0x4002b000
 8005d18:	08034c98 	.word	0x08034c98

08005d1c <HAL_DMA2D_LineEventCallback>:
 8005d1c:	4770      	bx	lr

08005d1e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d1e:	4770      	bx	lr

08005d20 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d20:	6803      	ldr	r3, [r0, #0]
{
 8005d22:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d24:	685e      	ldr	r6, [r3, #4]
{
 8005d26:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005d28:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d2a:	07f2      	lsls	r2, r6, #31
 8005d2c:	d514      	bpl.n	8005d58 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005d2e:	05e9      	lsls	r1, r5, #23
 8005d30:	d512      	bpl.n	8005d58 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d38:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005d42:	2201      	movs	r2, #1
 8005d44:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d46:	2304      	movs	r3, #4
 8005d48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005d52:	6943      	ldr	r3, [r0, #20]
 8005d54:	b103      	cbz	r3, 8005d58 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8005d56:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d58:	06b2      	lsls	r2, r6, #26
 8005d5a:	d516      	bpl.n	8005d8a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d5c:	04ab      	lsls	r3, r5, #18
 8005d5e:	d514      	bpl.n	8005d8a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d76:	2304      	movs	r3, #4
 8005d78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005d82:	6963      	ldr	r3, [r4, #20]
 8005d84:	b10b      	cbz	r3, 8005d8a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8005d86:	4620      	mov	r0, r4
 8005d88:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d8a:	0730      	lsls	r0, r6, #28
 8005d8c:	d516      	bpl.n	8005dbc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005d8e:	0529      	lsls	r1, r5, #20
 8005d90:	d514      	bpl.n	8005dbc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005da2:	f043 0304 	orr.w	r3, r3, #4
 8005da6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005da8:	2304      	movs	r3, #4
 8005daa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005dae:	2300      	movs	r3, #0
 8005db0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8005db4:	6963      	ldr	r3, [r4, #20]
 8005db6:	b10b      	cbz	r3, 8005dbc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8005db8:	4620      	mov	r0, r4
 8005dba:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005dbc:	0772      	lsls	r2, r6, #29
 8005dbe:	d50b      	bpl.n	8005dd8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005dc0:	056b      	lsls	r3, r5, #21
 8005dc2:	d509      	bpl.n	8005dd8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005dc4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005dc6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dce:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005dd4:	f7ff ffa2 	bl	8005d1c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005dd8:	07b0      	lsls	r0, r6, #30
 8005dda:	d514      	bpl.n	8005e06 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005ddc:	05a9      	lsls	r1, r5, #22
 8005dde:	d512      	bpl.n	8005e06 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005de8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005dea:	2202      	movs	r2, #2
 8005dec:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005df0:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8005dfe:	6923      	ldr	r3, [r4, #16]
 8005e00:	b10b      	cbz	r3, 8005e06 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8005e02:	4620      	mov	r0, r4
 8005e04:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005e06:	06f2      	lsls	r2, r6, #27
 8005e08:	d513      	bpl.n	8005e32 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005e0a:	04eb      	lsls	r3, r5, #19
 8005e0c:	d511      	bpl.n	8005e32 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005e0e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005e10:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e18:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005e1a:	2210      	movs	r2, #16
 8005e1c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e20:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005e2e:	f7ff ff76 	bl	8005d1e <HAL_DMA2D_CLUTLoadingCpltCallback>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}

08005e34 <HAL_DMA2D_ConfigLayer>:
{
  DMA2D_LayerCfgTypeDef *pLayerCfg;
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005e34:	2901      	cmp	r1, #1
{
 8005e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460e      	mov	r6, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
 8005e3c:	d904      	bls.n	8005e48 <HAL_DMA2D_ConfigLayer+0x14>
 8005e3e:	f240 614a 	movw	r1, #1610	; 0x64a
 8005e42:	4837      	ldr	r0, [pc, #220]	; (8005f20 <HAL_DMA2D_ConfigLayer+0xec>)
 8005e44:	f7fb feb1 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
 8005e48:	0135      	lsls	r5, r6, #4
 8005e4a:	1963      	adds	r3, r4, r5
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e52:	d304      	bcc.n	8005e5e <HAL_DMA2D_ConfigLayer+0x2a>
 8005e54:	f240 614b 	movw	r1, #1611	; 0x64b
 8005e58:	4831      	ldr	r0, [pc, #196]	; (8005f20 <HAL_DMA2D_ConfigLayer+0xec>)
 8005e5a:	f7fb fea6 	bl	8001baa <assert_failed>
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005e5e:	6863      	ldr	r3, [r4, #4]
 8005e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e64:	d014      	beq.n	8005e90 <HAL_DMA2D_ConfigLayer+0x5c>
  {
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
 8005e66:	1963      	adds	r3, r4, r5
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	2b0a      	cmp	r3, #10
 8005e6c:	d904      	bls.n	8005e78 <HAL_DMA2D_ConfigLayer+0x44>
 8005e6e:	f240 614e 	movw	r1, #1614	; 0x64e
 8005e72:	482b      	ldr	r0, [pc, #172]	; (8005f20 <HAL_DMA2D_ConfigLayer+0xec>)
 8005e74:	f7fb fe99 	bl	8001baa <assert_failed>
    if(hdma2d->Init.Mode != DMA2D_M2M)
 8005e78:	6863      	ldr	r3, [r4, #4]
 8005e7a:	b14b      	cbz	r3, 8005e90 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
 8005e7c:	eb04 1306 	add.w	r3, r4, r6, lsl #4
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d904      	bls.n	8005e90 <HAL_DMA2D_ConfigLayer+0x5c>
 8005e86:	f240 6151 	movw	r1, #1617	; 0x651
 8005e8a:	4825      	ldr	r0, [pc, #148]	; (8005f20 <HAL_DMA2D_ConfigLayer+0xec>)
 8005e8c:	f7fb fe8d 	bl	8001baa <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005e94:	2002      	movs	r0, #2
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d040      	beq.n	8005f1c <HAL_DMA2D_ConfigLayer+0xe8>
 8005e9a:	2301      	movs	r3, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e9c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8005ea0:	f8df e080 	ldr.w	lr, [pc, #128]	; 8005f24 <HAL_DMA2D_ConfigLayer+0xf0>
  __HAL_LOCK(hdma2d);
 8005ea4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ea8:	1963      	adds	r3, r4, r5
 8005eaa:	69df      	ldr	r7, [r3, #28]
 8005eac:	6a1a      	ldr	r2, [r3, #32]
 8005eae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005eb0:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005eb4:	3f09      	subs	r7, #9
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	2f01      	cmp	r7, #1
 8005eba:	d80f      	bhi.n	8005edc <HAL_DMA2D_ConfigLayer+0xa8>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ebc:	f000 417f 	and.w	r1, r0, #4278190080	; 0xff000000
 8005ec0:	430a      	orrs	r2, r1
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ec2:	b976      	cbnz	r6, 8005ee2 <HAL_DMA2D_ConfigLayer+0xae>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005ec6:	ea01 010e 	and.w	r1, r1, lr
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ece:	69a2      	ldr	r2, [r4, #24]
 8005ed0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005ed2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ed4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8005eda:	e010      	b.n	8005efe <HAL_DMA2D_ConfigLayer+0xca>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005edc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ee0:	b1a6      	cbz	r6, 8005f0c <HAL_DMA2D_ConfigLayer+0xd8>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ee2:	69d9      	ldr	r1, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ee4:	4425      	add	r5, r4

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ee6:	2f01      	cmp	r7, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ee8:	ea01 010e 	and.w	r1, r1, lr
 8005eec:	ea42 0201 	orr.w	r2, r2, r1
 8005ef0:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ef2:	69aa      	ldr	r2, [r5, #24]
 8005ef4:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ef6:	d802      	bhi.n	8005efe <HAL_DMA2D_ConfigLayer+0xca>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005ef8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005efc:	6218      	str	r0, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005efe:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005f00:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8005f06:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
 8005f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f0e:	ea01 010e 	and.w	r1, r1, lr
 8005f12:	430a      	orrs	r2, r1
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f16:	69a2      	ldr	r2, [r4, #24]
 8005f18:	619a      	str	r2, [r3, #24]
 8005f1a:	e7f0      	b.n	8005efe <HAL_DMA2D_ConfigLayer+0xca>
}
 8005f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08034c98 	.word	0x08034c98
 8005f24:	00fcfff0 	.word	0x00fcfff0

08005f28 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005f28:	4ba3      	ldr	r3, [pc, #652]	; (80061b8 <HAL_GPIO_Init+0x290>)
 8005f2a:	4298      	cmp	r0, r3
{
 8005f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005f34:	d02b      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	d027      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f42:	4298      	cmp	r0, r3
 8005f44:	d023      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4a:	4298      	cmp	r0, r3
 8005f4c:	d01f      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f52:	4298      	cmp	r0, r3
 8005f54:	d01b      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5a:	4298      	cmp	r0, r3
 8005f5c:	d017      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f62:	4298      	cmp	r0, r3
 8005f64:	d013      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6a:	4298      	cmp	r0, r3
 8005f6c:	d00f      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f72:	4298      	cmp	r0, r3
 8005f74:	d00b      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	d007      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f82:	4298      	cmp	r0, r3
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x66>
 8005f86:	21b1      	movs	r1, #177	; 0xb1
 8005f88:	488c      	ldr	r0, [pc, #560]	; (80061bc <HAL_GPIO_Init+0x294>)
 8005f8a:	f7fb fe0e 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005f8e:	882b      	ldrh	r3, [r5, #0]
 8005f90:	b91b      	cbnz	r3, 8005f9a <HAL_GPIO_Init+0x72>
 8005f92:	21b2      	movs	r1, #178	; 0xb2
 8005f94:	4889      	ldr	r0, [pc, #548]	; (80061bc <HAL_GPIO_Init+0x294>)
 8005f96:	f7fb fe08 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005f9a:	686b      	ldr	r3, [r5, #4]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d917      	bls.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fa0:	f1a3 0211 	sub.w	r2, r3, #17
 8005fa4:	2a01      	cmp	r2, #1
 8005fa6:	d913      	bls.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fac:	4984      	ldr	r1, [pc, #528]	; (80061c0 <HAL_GPIO_Init+0x298>)
 8005fae:	428a      	cmp	r2, r1
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fb2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8005fb6:	428b      	cmp	r3, r1
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fba:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8005fbe:	428a      	cmp	r2, r1
 8005fc0:	d006      	beq.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fc2:	4a80      	ldr	r2, [pc, #512]	; (80061c4 <HAL_GPIO_Init+0x29c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <HAL_GPIO_Init+0xa8>
 8005fc8:	21b3      	movs	r1, #179	; 0xb3
 8005fca:	487c      	ldr	r0, [pc, #496]	; (80061bc <HAL_GPIO_Init+0x294>)
 8005fcc:	f7fb fded 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005fd0:	68ab      	ldr	r3, [r5, #8]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d903      	bls.n	8005fde <HAL_GPIO_Init+0xb6>
 8005fd6:	21b4      	movs	r1, #180	; 0xb4
 8005fd8:	4878      	ldr	r0, [pc, #480]	; (80061bc <HAL_GPIO_Init+0x294>)
 8005fda:	f7fb fde6 	bl	8001baa <assert_failed>
{
 8005fde:	2600      	movs	r6, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fe0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80061cc <HAL_GPIO_Init+0x2a4>
    ioposition = ((uint32_t)0x01) << position;
 8005fe4:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fe6:	682a      	ldr	r2, [r5, #0]
    ioposition = ((uint32_t)0x01) << position;
 8005fe8:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fec:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8005ff0:	454f      	cmp	r7, r9
 8005ff2:	f040 80c7 	bne.w	8006184 <HAL_GPIO_Init+0x25c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ff6:	686a      	ldr	r2, [r5, #4]
 8005ff8:	f022 0210 	bic.w	r2, r2, #16
 8005ffc:	2a02      	cmp	r2, #2
 8005ffe:	d116      	bne.n	800602e <HAL_GPIO_Init+0x106>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006000:	692a      	ldr	r2, [r5, #16]
 8006002:	2a0f      	cmp	r2, #15
 8006004:	d903      	bls.n	800600e <HAL_GPIO_Init+0xe6>
 8006006:	21c5      	movs	r1, #197	; 0xc5
 8006008:	486c      	ldr	r0, [pc, #432]	; (80061bc <HAL_GPIO_Init+0x294>)
 800600a:	f7fb fdce 	bl	8001baa <assert_failed>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800600e:	f006 0207 	and.w	r2, r6, #7
        temp = GPIOx->AFR[position >> 3];
 8006012:	08f1      	lsrs	r1, r6, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006014:	0090      	lsls	r0, r2, #2
 8006016:	220f      	movs	r2, #15
 8006018:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800601c:	4082      	lsls	r2, r0
        temp = GPIOx->AFR[position >> 3];
 800601e:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006020:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006024:	692a      	ldr	r2, [r5, #16]
 8006026:	4082      	lsls	r2, r0
 8006028:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 800602c:	620a      	str	r2, [r1, #32]
 800602e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006032:	f04f 0a03 	mov.w	sl, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006036:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006038:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp = GPIOx->MODER;
 800603c:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800603e:	f002 0103 	and.w	r1, r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006042:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006046:	ea6f 0a0a 	mvn.w	sl, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800604a:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800604e:	3a01      	subs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006050:	ea00 000a 	and.w	r0, r0, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006054:	2a01      	cmp	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006056:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 800605a:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800605c:	d817      	bhi.n	800608e <HAL_GPIO_Init+0x166>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800605e:	68ea      	ldr	r2, [r5, #12]
 8006060:	2a03      	cmp	r2, #3
 8006062:	d903      	bls.n	800606c <HAL_GPIO_Init+0x144>
 8006064:	21d9      	movs	r1, #217	; 0xd9
 8006066:	4855      	ldr	r0, [pc, #340]	; (80061bc <HAL_GPIO_Init+0x294>)
 8006068:	f7fb fd9f 	bl	8001baa <assert_failed>
        temp = GPIOx->OSPEEDR; 
 800606c:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800606e:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006070:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006074:	686b      	ldr	r3, [r5, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006076:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800607a:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
 800607e:	430a      	orrs	r2, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006080:	40b3      	lsls	r3, r6
        GPIOx->OSPEEDR = temp;
 8006082:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8006084:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006086:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800608a:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800608c:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 800608e:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006090:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006092:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006096:	68ab      	ldr	r3, [r5, #8]
 8006098:	fa03 f30b 	lsl.w	r3, r3, fp
 800609c:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80060a0:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060a2:	00c3      	lsls	r3, r0, #3
 80060a4:	d56e      	bpl.n	8006184 <HAL_GPIO_Init+0x25c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060a6:	4b48      	ldr	r3, [pc, #288]	; (80061c8 <HAL_GPIO_Init+0x2a0>)
 80060a8:	f026 0103 	bic.w	r1, r6, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060ac:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80060b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ba:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060ca:	f006 0303 	and.w	r3, r6, #3
        temp = SYSCFG->EXTICR[position >> 2];
 80060ce:	688a      	ldr	r2, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060d0:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80060d4:	fa0c f30e 	lsl.w	r3, ip, lr
 80060d8:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80060dc:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <HAL_GPIO_Init+0x290>)
 80060de:	429c      	cmp	r4, r3
 80060e0:	d057      	beq.n	8006192 <HAL_GPIO_Init+0x26a>
 80060e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d055      	beq.n	8006196 <HAL_GPIO_Init+0x26e>
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	429c      	cmp	r4, r3
 80060f0:	d053      	beq.n	800619a <HAL_GPIO_Init+0x272>
 80060f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f6:	429c      	cmp	r4, r3
 80060f8:	d051      	beq.n	800619e <HAL_GPIO_Init+0x276>
 80060fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fe:	429c      	cmp	r4, r3
 8006100:	d04f      	beq.n	80061a2 <HAL_GPIO_Init+0x27a>
 8006102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006106:	429c      	cmp	r4, r3
 8006108:	d04d      	beq.n	80061a6 <HAL_GPIO_Init+0x27e>
 800610a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610e:	429c      	cmp	r4, r3
 8006110:	d04b      	beq.n	80061aa <HAL_GPIO_Init+0x282>
 8006112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006116:	429c      	cmp	r4, r3
 8006118:	d049      	beq.n	80061ae <HAL_GPIO_Init+0x286>
 800611a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611e:	429c      	cmp	r4, r3
 8006120:	d047      	beq.n	80061b2 <HAL_GPIO_Init+0x28a>
 8006122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006126:	429c      	cmp	r4, r3
 8006128:	bf14      	ite	ne
 800612a:	230a      	movne	r3, #10
 800612c:	2309      	moveq	r3, #9
 800612e:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006132:	03c7      	lsls	r7, r0, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006134:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8006138:	608b      	str	r3, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
 800613a:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI->IMR;
 800613e:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 8006142:	bf54      	ite	pl
 8006144:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006146:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800614a:	0383      	lsls	r3, r0, #14
        EXTI->IMR = temp;
 800614c:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->EMR;
 8006150:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
 8006154:	bf54      	ite	pl
 8006156:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8006158:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800615c:	02c7      	lsls	r7, r0, #11
        EXTI->EMR = temp;
 800615e:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI->RTSR;
 8006162:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8006166:	bf54      	ite	pl
 8006168:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800616a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 800616e:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006172:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR;
 8006174:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
 8006178:	bf54      	ite	pl
 800617a:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800617c:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8006180:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006184:	3601      	adds	r6, #1
 8006186:	2e10      	cmp	r6, #16
 8006188:	f47f af2c 	bne.w	8005fe4 <HAL_GPIO_Init+0xbc>
      }
    }
  }
}
 800618c:	b003      	add	sp, #12
 800618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006192:	2300      	movs	r3, #0
 8006194:	e7cb      	b.n	800612e <HAL_GPIO_Init+0x206>
 8006196:	2301      	movs	r3, #1
 8006198:	e7c9      	b.n	800612e <HAL_GPIO_Init+0x206>
 800619a:	2302      	movs	r3, #2
 800619c:	e7c7      	b.n	800612e <HAL_GPIO_Init+0x206>
 800619e:	2303      	movs	r3, #3
 80061a0:	e7c5      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061a2:	2304      	movs	r3, #4
 80061a4:	e7c3      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061a6:	2305      	movs	r3, #5
 80061a8:	e7c1      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061aa:	2306      	movs	r3, #6
 80061ac:	e7bf      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061ae:	2307      	movs	r3, #7
 80061b0:	e7bd      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061b2:	2308      	movs	r3, #8
 80061b4:	e7bb      	b.n	800612e <HAL_GPIO_Init+0x206>
 80061b6:	bf00      	nop
 80061b8:	40020000 	.word	0x40020000
 80061bc:	08034cd8 	.word	0x08034cd8
 80061c0:	10110000 	.word	0x10110000
 80061c4:	10220000 	.word	0x10220000
 80061c8:	40023800 	.word	0x40023800
 80061cc:	40013c00 	.word	0x40013c00

080061d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061d4:	4b5d      	ldr	r3, [pc, #372]	; (800634c <HAL_GPIO_DeInit+0x17c>)
{
 80061d6:	4604      	mov	r4, r0
 80061d8:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061da:	4298      	cmp	r0, r3
 80061dc:	d02c      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 80061de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e2:	4298      	cmp	r0, r3
 80061e4:	d028      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 80061e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ea:	4298      	cmp	r0, r3
 80061ec:	d024      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 80061ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f2:	4298      	cmp	r0, r3
 80061f4:	d020      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 80061f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fa:	4298      	cmp	r0, r3
 80061fc:	d01c      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 80061fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006202:	4298      	cmp	r0, r3
 8006204:	d018      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 8006206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620a:	4298      	cmp	r0, r3
 800620c:	d014      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 800620e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006212:	4298      	cmp	r0, r3
 8006214:	d010      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 8006216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800621a:	4298      	cmp	r0, r3
 800621c:	d00c      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	4298      	cmp	r0, r3
 8006224:	d008      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 8006226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622a:	4298      	cmp	r0, r3
 800622c:	d004      	beq.n	8006238 <HAL_GPIO_DeInit+0x68>
 800622e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8006232:	4847      	ldr	r0, [pc, #284]	; (8006350 <HAL_GPIO_DeInit+0x180>)
 8006234:	f7fb fcb9 	bl	8001baa <assert_failed>
{
 8006238:	2200      	movs	r2, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800623a:	4846      	ldr	r0, [pc, #280]	; (8006354 <HAL_GPIO_DeInit+0x184>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800623c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8006358 <HAL_GPIO_DeInit+0x188>
 8006240:	f8df a118 	ldr.w	sl, [pc, #280]	; 800635c <HAL_GPIO_DeInit+0x18c>
 8006244:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006360 <HAL_GPIO_DeInit+0x190>
    ioposition = ((uint32_t)0x01) << position;
 8006248:	2301      	movs	r3, #1
 800624a:	fa03 fe02 	lsl.w	lr, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 800624e:	ea0e 0108 	and.w	r1, lr, r8
    if(iocurrent == ioposition)
 8006252:	458e      	cmp	lr, r1
 8006254:	d163      	bne.n	800631e <HAL_GPIO_DeInit+0x14e>
 8006256:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800625a:	f002 0703 	and.w	r7, r2, #3
 800625e:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006260:	4b3a      	ldr	r3, [pc, #232]	; (800634c <HAL_GPIO_DeInit+0x17c>)
 8006262:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006266:	00bf      	lsls	r7, r7, #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006268:	429c      	cmp	r4, r3
 800626a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800626e:	fa06 f607 	lsl.w	r6, r6, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 8006272:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006276:	ea0c 0c06 	and.w	ip, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800627a:	d055      	beq.n	8006328 <HAL_GPIO_DeInit+0x158>
 800627c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006280:	429c      	cmp	r4, r3
 8006282:	d053      	beq.n	800632c <HAL_GPIO_DeInit+0x15c>
 8006284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006288:	429c      	cmp	r4, r3
 800628a:	d051      	beq.n	8006330 <HAL_GPIO_DeInit+0x160>
 800628c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006290:	429c      	cmp	r4, r3
 8006292:	d04f      	beq.n	8006334 <HAL_GPIO_DeInit+0x164>
 8006294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006298:	429c      	cmp	r4, r3
 800629a:	d04d      	beq.n	8006338 <HAL_GPIO_DeInit+0x168>
 800629c:	454c      	cmp	r4, r9
 800629e:	d04d      	beq.n	800633c <HAL_GPIO_DeInit+0x16c>
 80062a0:	4554      	cmp	r4, sl
 80062a2:	d04d      	beq.n	8006340 <HAL_GPIO_DeInit+0x170>
 80062a4:	455c      	cmp	r4, fp
 80062a6:	d04d      	beq.n	8006344 <HAL_GPIO_DeInit+0x174>
 80062a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d04b      	beq.n	8006348 <HAL_GPIO_DeInit+0x178>
 80062b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b4:	429c      	cmp	r4, r3
 80062b6:	bf0c      	ite	eq
 80062b8:	2309      	moveq	r3, #9
 80062ba:	230a      	movne	r3, #10
 80062bc:	40bb      	lsls	r3, r7
 80062be:	459c      	cmp	ip, r3
 80062c0:	d110      	bne.n	80062e4 <HAL_GPIO_DeInit+0x114>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80062c2:	68ab      	ldr	r3, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062c4:	43c9      	mvns	r1, r1
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80062c6:	ea23 0606 	bic.w	r6, r3, r6
 80062ca:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062cc:	6803      	ldr	r3, [r0, #0]
 80062ce:	400b      	ands	r3, r1
 80062d0:	6003      	str	r3, [r0, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80062d2:	6843      	ldr	r3, [r0, #4]
 80062d4:	400b      	ands	r3, r1
 80062d6:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80062d8:	6883      	ldr	r3, [r0, #8]
 80062da:	400b      	ands	r3, r1
 80062dc:	6083      	str	r3, [r0, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80062de:	68c3      	ldr	r3, [r0, #12]
 80062e0:	4019      	ands	r1, r3
 80062e2:	60c1      	str	r1, [r0, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062e4:	0055      	lsls	r5, r2, #1
 80062e6:	2303      	movs	r3, #3
 80062e8:	6821      	ldr	r1, [r4, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062ea:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062ee:	40ab      	lsls	r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062f0:	260f      	movs	r6, #15
 80062f2:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062f4:	43db      	mvns	r3, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062f6:	40be      	lsls	r6, r7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062f8:	4019      	ands	r1, r3
 80062fa:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80062fc:	08d1      	lsrs	r1, r2, #3
 80062fe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006302:	6a0d      	ldr	r5, [r1, #32]
 8006304:	ea25 0606 	bic.w	r6, r5, r6
 8006308:	620e      	str	r6, [r1, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800630a:	68a1      	ldr	r1, [r4, #8]
 800630c:	4019      	ands	r1, r3
 800630e:	60a1      	str	r1, [r4, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	ea21 010e 	bic.w	r1, r1, lr
 8006316:	6061      	str	r1, [r4, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006318:	68e1      	ldr	r1, [r4, #12]
 800631a:	400b      	ands	r3, r1
 800631c:	60e3      	str	r3, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800631e:	3201      	adds	r2, #1
 8006320:	2a10      	cmp	r2, #16
 8006322:	d191      	bne.n	8006248 <HAL_GPIO_DeInit+0x78>
    }
  }
}
 8006324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006328:	2300      	movs	r3, #0
 800632a:	e7c7      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 800632c:	2301      	movs	r3, #1
 800632e:	e7c5      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006330:	2302      	movs	r3, #2
 8006332:	e7c3      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006334:	2303      	movs	r3, #3
 8006336:	e7c1      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006338:	2304      	movs	r3, #4
 800633a:	e7bf      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 800633c:	2305      	movs	r3, #5
 800633e:	e7bd      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006340:	2306      	movs	r3, #6
 8006342:	e7bb      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006344:	2307      	movs	r3, #7
 8006346:	e7b9      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 8006348:	2308      	movs	r3, #8
 800634a:	e7b7      	b.n	80062bc <HAL_GPIO_DeInit+0xec>
 800634c:	40020000 	.word	0x40020000
 8006350:	08034cd8 	.word	0x08034cd8
 8006354:	40013c00 	.word	0x40013c00
 8006358:	40021400 	.word	0x40021400
 800635c:	40021800 	.word	0x40021800
 8006360:	40021c00 	.word	0x40021c00

08006364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006368:	460c      	mov	r4, r1
 800636a:	b921      	cbnz	r1, 8006376 <HAL_GPIO_ReadPin+0x12>
 800636c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8006370:	4804      	ldr	r0, [pc, #16]	; (8006384 <HAL_GPIO_ReadPin+0x20>)
 8006372:	f7fb fc1a 	bl	8001baa <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006376:	692b      	ldr	r3, [r5, #16]
 8006378:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800637a:	bf14      	ite	ne
 800637c:	2001      	movne	r0, #1
 800637e:	2000      	moveq	r0, #0
 8006380:	bd38      	pop	{r3, r4, r5, pc}
 8006382:	bf00      	nop
 8006384:	08034cd8 	.word	0x08034cd8

08006388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4605      	mov	r5, r0
 800638c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800638e:	460c      	mov	r4, r1
 8006390:	b921      	cbnz	r1, 800639c <HAL_GPIO_WritePin+0x14>
 8006392:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8006396:	4808      	ldr	r0, [pc, #32]	; (80063b8 <HAL_GPIO_WritePin+0x30>)
 8006398:	f7fb fc07 	bl	8001baa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800639c:	2e01      	cmp	r6, #1
 800639e:	d906      	bls.n	80063ae <HAL_GPIO_WritePin+0x26>
 80063a0:	f240 119b 	movw	r1, #411	; 0x19b
 80063a4:	4804      	ldr	r0, [pc, #16]	; (80063b8 <HAL_GPIO_WritePin+0x30>)
 80063a6:	f7fb fc00 	bl	8001baa <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063aa:	61ac      	str	r4, [r5, #24]
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	d1fb      	bne.n	80063aa <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063b2:	0424      	lsls	r4, r4, #16
 80063b4:	e7f9      	b.n	80063aa <HAL_GPIO_WritePin+0x22>
 80063b6:	bf00      	nop
 80063b8:	08034cd8 	.word	0x08034cd8

080063bc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80063bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80063c2:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 80063c6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 80063ca:	2801      	cmp	r0, #1
{
 80063cc:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80063d0:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80063d4:	d029      	beq.n	800642a <HAL_HCD_HC_Init+0x6e>
 80063d6:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 80063d8:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80063da:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 80063de:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 80063e2:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80063e6:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 80063ea:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 80063ee:	bf08      	it	eq
 80063f0:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 80063f2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80063f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 80063fa:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 80063fe:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8006402:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006406:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800640a:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800640e:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8006412:	f8cd c008 	str.w	ip, [sp, #8]
 8006416:	6820      	ldr	r0, [r4, #0]
 8006418:	e88d 4080 	stmia.w	sp, {r7, lr}
 800641c:	f007 f826 	bl	800d46c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006420:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8006424:	b004      	add	sp, #16
 8006426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 800642a:	2002      	movs	r0, #2
 800642c:	e7fa      	b.n	8006424 <HAL_HCD_HC_Init+0x68>

0800642e <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800642e:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006432:	2b01      	cmp	r3, #1
{
 8006434:	b510      	push	{r4, lr}
 8006436:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006438:	d009      	beq.n	800644e <HAL_HCD_HC_Halt+0x20>
 800643a:	2301      	movs	r3, #1
 800643c:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006440:	6800      	ldr	r0, [r0, #0]
 8006442:	f007 f8a1 	bl	800d588 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006446:	2000      	movs	r0, #0
 8006448:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 800644c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800644e:	2002      	movs	r0, #2
}
 8006450:	bd10      	pop	{r4, pc}
	...

08006454 <HAL_HCD_Init>:
{
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8006458:	4607      	mov	r7, r0
{
 800645a:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800645c:	2800      	cmp	r0, #0
 800645e:	d047      	beq.n	80064f0 <HAL_HCD_Init+0x9c>
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8006460:	6803      	ldr	r3, [r0, #0]
 8006462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006466:	d006      	beq.n	8006476 <HAL_HCD_Init+0x22>
 8006468:	4a22      	ldr	r2, [pc, #136]	; (80064f4 <HAL_HCD_Init+0xa0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <HAL_HCD_Init+0x22>
 800646e:	217c      	movs	r1, #124	; 0x7c
 8006470:	4821      	ldr	r0, [pc, #132]	; (80064f8 <HAL_HCD_Init+0xa4>)
 8006472:	f7fb fb9a 	bl	8001baa <assert_failed>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006476:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 800647a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800647e:	b923      	cbnz	r3, 800648a <HAL_HCD_Init+0x36>
    hhcd->Lock = HAL_UNLOCKED;
 8006480:	f887 22b8 	strb.w	r2, [r7, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8006484:	4638      	mov	r0, r7
 8006486:	f7fe fb0f 	bl	8004aa8 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 800648a:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 800648c:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800648e:	466d      	mov	r5, sp
 8006490:	f107 0804 	add.w	r8, r7, #4
  __HAL_HCD_DISABLE(hhcd);
 8006494:	f854 0b10 	ldr.w	r0, [r4], #16
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006498:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 800649a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  __HAL_HCD_DISABLE(hhcd);
 800649e:	f006 fea8 	bl	800d1f2 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80064a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80064b2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80064b6:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80064b8:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80064ba:	f006 fe59 	bl	800d170 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80064be:	f856 0b10 	ldr.w	r0, [r6], #16
 80064c2:	2101      	movs	r1, #1
 80064c4:	f006 fe9b 	bl	800d1fe <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80064c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80064ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80064ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80064d8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80064dc:	6838      	ldr	r0, [r7, #0]
 80064de:	f006 ff4d 	bl	800d37c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80064e2:	2301      	movs	r3, #1
  return HAL_OK;
 80064e4:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 80064e6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 80064ea:	b00a      	add	sp, #40	; 0x28
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7fa      	b.n	80064ea <HAL_HCD_Init+0x96>
 80064f4:	40040000 	.word	0x40040000
 80064f8:	08034d17 	.word	0x08034d17

080064fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80064fe:	2428      	movs	r4, #40	; 0x28
{
 8006500:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8006504:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006506:	fb04 0401 	mla	r4, r4, r1, r0
{
 800650a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800650e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006512:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8006516:	b96f      	cbnz	r7, 8006534 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006518:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800651a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800651c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8006520:	d02b      	beq.n	800657a <HAL_HCD_HC_SubmitRequest+0x7e>
 8006522:	42bb      	cmp	r3, r7
 8006524:	d029      	beq.n	800657a <HAL_HCD_HC_SubmitRequest+0x7e>
 8006526:	2b01      	cmp	r3, #1
 8006528:	d131      	bne.n	800658e <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800652a:	2328      	movs	r3, #40	; 0x28
 800652c:	2200      	movs	r2, #0
 800652e:	fb03 0301 	mla	r3, r3, r1, r0
 8006532:	e02a      	b.n	800658a <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006534:	f04f 0e02 	mov.w	lr, #2
 8006538:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 800653c:	2b03      	cmp	r3, #3
 800653e:	d826      	bhi.n	800658e <HAL_HCD_HC_SubmitRequest+0x92>
 8006540:	a401      	add	r4, pc, #4	; (adr r4, 8006548 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8006542:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006559 	.word	0x08006559
 800654c:	0800652b 	.word	0x0800652b
 8006550:	0800657b 	.word	0x0800657b
 8006554:	0800657b 	.word	0x0800657b
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006558:	2f01      	cmp	r7, #1
 800655a:	d118      	bne.n	800658e <HAL_HCD_HC_SubmitRequest+0x92>
 800655c:	b9ba      	cbnz	r2, 800658e <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 800655e:	b925      	cbnz	r5, 800656a <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 8006560:	2328      	movs	r3, #40	; 0x28
 8006562:	fb03 0301 	mla	r3, r3, r1, r0
 8006566:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800656a:	2328      	movs	r3, #40	; 0x28
 800656c:	fb03 0301 	mla	r3, r3, r1, r0
 8006570:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006574:	b14a      	cbz	r2, 800658a <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006576:	2202      	movs	r2, #2
 8006578:	e007      	b.n	800658a <HAL_HCD_HC_SubmitRequest+0x8e>
 800657a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800657c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8006580:	b9d2      	cbnz	r2, 80065b8 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006582:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8006586:	2c00      	cmp	r4, #0
 8006588:	d1f5      	bne.n	8006576 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800658a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800658e:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006590:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006592:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8006596:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800659a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800659c:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800659e:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80065a0:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80065a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80065a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80065a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80065ac:	7c02      	ldrb	r2, [r0, #16]
 80065ae:	6800      	ldr	r0, [r0, #0]
}
 80065b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80065b4:	f007 b84c 	b.w	800d650 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80065b8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80065bc:	e7da      	b.n	8006574 <HAL_HCD_HC_SubmitRequest+0x78>
 80065be:	bf00      	nop

080065c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065c4:	6806      	ldr	r6, [r0, #0]
{
 80065c6:	b087      	sub	sp, #28
 80065c8:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80065ca:	4630      	mov	r0, r6
 80065cc:	f006 fe76 	bl	800d2bc <USB_GetMode>
 80065d0:	2801      	cmp	r0, #1
 80065d2:	f040 80b0 	bne.w	8006736 <HAL_HCD_IRQHandler+0x176>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	f006 fe6c 	bl	800d2b4 <USB_ReadInterrupts>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f000 80aa 	beq.w	8006736 <HAL_HCD_IRQHandler+0x176>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	f006 fe66 	bl	800d2b4 <USB_ReadInterrupts>
 80065e8:	0287      	lsls	r7, r0, #10
 80065ea:	d503      	bpl.n	80065f4 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80065f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80065f4:	6820      	ldr	r0, [r4, #0]
 80065f6:	f006 fe5d 	bl	800d2b4 <USB_ReadInterrupts>
 80065fa:	02c5      	lsls	r5, r0, #11
 80065fc:	d503      	bpl.n	8006606 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006604:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	f006 fe54 	bl	800d2b4 <USB_ReadInterrupts>
 800660c:	0140      	lsls	r0, r0, #5
 800660e:	d503      	bpl.n	8006618 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006616:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	f006 fe4b 	bl	800d2b4 <USB_ReadInterrupts>
 800661e:	0781      	lsls	r1, r0, #30
 8006620:	d502      	bpl.n	8006628 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	2202      	movs	r2, #2
 8006626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006628:	6820      	ldr	r0, [r4, #0]
 800662a:	f006 fe43 	bl	800d2b4 <USB_ReadInterrupts>
 800662e:	0082      	lsls	r2, r0, #2
 8006630:	d510      	bpl.n	8006654 <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006632:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8006636:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800663c:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8006640:	f7fe fa7a 	bl	8004b38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006644:	2101      	movs	r1, #1
 8006646:	6820      	ldr	r0, [r4, #0]
 8006648:	f006 fe3c 	bl	800d2c4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	f006 fe2d 	bl	800d2b4 <USB_ReadInterrupts>
 800665a:	01c3      	lsls	r3, r0, #7
 800665c:	d542      	bpl.n	80066e4 <HAL_HCD_IRQHandler+0x124>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800665e:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006660:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8006664:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8006666:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800666a:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800666c:	9b05      	ldr	r3, [sp, #20]
 800666e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006672:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	079f      	lsls	r7, r3, #30
 8006678:	d50d      	bpl.n	8006696 <HAL_HCD_IRQHandler+0xd6>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800667a:	9b04      	ldr	r3, [sp, #16]
 800667c:	07d8      	lsls	r0, r3, #31
 800667e:	d506      	bpl.n	800668e <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006680:	69ab      	ldr	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006682:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006688:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800668a:	f7fe fa51 	bl	8004b30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800668e:	9b05      	ldr	r3, [sp, #20]
 8006690:	f043 0302 	orr.w	r3, r3, #2
 8006694:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	0719      	lsls	r1, r3, #28
 800669a:	d519      	bpl.n	80066d0 <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800669c:	9b05      	ldr	r3, [sp, #20]
 800669e:	f043 0308 	orr.w	r3, r3, #8
 80066a2:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	075a      	lsls	r2, r3, #29
 80066a8:	d550      	bpl.n	800674c <HAL_HCD_IRQHandler+0x18c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80066aa:	69a1      	ldr	r1, [r4, #24]
 80066ac:	2902      	cmp	r1, #2
 80066ae:	d145      	bne.n	800673c <HAL_HCD_IRQHandler+0x17c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80066b0:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80066b2:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80066b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80066b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80066bc:	bf18      	it	ne
 80066be:	2101      	movne	r1, #1
 80066c0:	f006 fe00 	bl	800d2c4 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7fe fa3f 	bl	8004b48 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7fe fa30 	bl	8004b30 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80066d0:	9b04      	ldr	r3, [sp, #16]
 80066d2:	069b      	lsls	r3, r3, #26
 80066d4:	d503      	bpl.n	80066de <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80066d6:	9b05      	ldr	r3, [sp, #20]
 80066d8:	f043 0320 	orr.w	r3, r3, #32
 80066dc:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80066de:	9b05      	ldr	r3, [sp, #20]
 80066e0:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	f006 fde5 	bl	800d2b4 <USB_ReadInterrupts>
 80066ea:	0707      	lsls	r7, r0, #28
 80066ec:	d505      	bpl.n	80066fa <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7fe fa1a 	bl	8004b28 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	2208      	movs	r2, #8
 80066f8:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	f006 fdda 	bl	800d2b4 <USB_ReadInterrupts>
 8006700:	0185      	lsls	r5, r0, #6
 8006702:	d512      	bpl.n	800672a <HAL_HCD_IRQHandler+0x16a>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006704:	f04f 0a00 	mov.w	sl, #0
 8006708:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800670c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800670e:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006712:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	f006 ff32 	bl	800d57e <USB_HC_ReadInterrupt>
 800671a:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800671c:	68a3      	ldr	r3, [r4, #8]
 800671e:	459a      	cmp	sl, r3
 8006720:	d323      	bcc.n	800676a <HAL_HCD_IRQHandler+0x1aa>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006728:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	f006 fdc2 	bl	800d2b4 <USB_ReadInterrupts>
 8006730:	06c3      	lsls	r3, r0, #27
 8006732:	f100 821e 	bmi.w	8006b72 <HAL_HCD_IRQHandler+0x5b2>
}
 8006736:	b007      	add	sp, #28
 8006738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800673c:	68e3      	ldr	r3, [r4, #12]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d1c0      	bne.n	80066c4 <HAL_HCD_IRQHandler+0x104>
          USBx_HOST->HFIR = 60000U;
 8006742:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006746:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800674a:	e7bb      	b.n	80066c4 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800674c:	4620      	mov	r0, r4
 800674e:	f7fe f9ff 	bl	8004b50 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006752:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006756:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006758:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800675c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8006760:	6993      	ldr	r3, [r2, #24]
 8006762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006766:	6193      	str	r3, [r2, #24]
 8006768:	e7b2      	b.n	80066d0 <HAL_HCD_IRQHandler+0x110>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800676a:	f00a 030f 	and.w	r3, sl, #15
 800676e:	9a01      	ldr	r2, [sp, #4]
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
 8006774:	07d8      	lsls	r0, r3, #31
 8006776:	f140 808a 	bpl.w	800688e <HAL_HCD_IRQHandler+0x2ce>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800677a:	f8d8 3000 	ldr.w	r3, [r8]
 800677e:	fa5f f58a 	uxtb.w	r5, sl
 8006782:	6820      	ldr	r0, [r4, #0]
 8006784:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006788:	f000 8104 	beq.w	8006994 <HAL_HCD_IRQHandler+0x3d4>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800678c:	016a      	lsls	r2, r5, #5
 800678e:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8006792:	18d6      	adds	r6, r2, r3
 8006794:	68b1      	ldr	r1, [r6, #8]
 8006796:	0749      	lsls	r1, r1, #29
 8006798:	d513      	bpl.n	80067c2 <HAL_HCD_IRQHandler+0x202>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800679a:	2104      	movs	r1, #4
 800679c:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800679e:	68f1      	ldr	r1, [r6, #12]
 80067a0:	f041 0102 	orr.w	r1, r1, #2
 80067a4:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80067a6:	68b1      	ldr	r1, [r6, #8]
 80067a8:	0589      	lsls	r1, r1, #22
 80067aa:	d542      	bpl.n	8006832 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067ac:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ae:	4629      	mov	r1, r5
 80067b0:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067b8:	f006 fee6 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c0:	e0c7      	b.n	8006952 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80067c2:	68b1      	ldr	r1, [r6, #8]
 80067c4:	0689      	lsls	r1, r1, #26
 80067c6:	d502      	bpl.n	80067ce <HAL_HCD_IRQHandler+0x20e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80067c8:	2120      	movs	r1, #32
 80067ca:	60b1      	str	r1, [r6, #8]
 80067cc:	e7eb      	b.n	80067a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80067ce:	68b1      	ldr	r1, [r6, #8]
 80067d0:	0709      	lsls	r1, r1, #28
 80067d2:	d515      	bpl.n	8006800 <HAL_HCD_IRQHandler+0x240>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067d4:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80067d6:	f04f 0e05 	mov.w	lr, #5
 80067da:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067dc:	f041 0102 	orr.w	r1, r1, #2
 80067e0:	9202      	str	r2, [sp, #8]
 80067e2:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80067e4:	fb07 4105 	mla	r1, r7, r5, r4
 80067e8:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067ec:	2110      	movs	r1, #16
 80067ee:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80067f0:	2108      	movs	r1, #8
 80067f2:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067f4:	4629      	mov	r1, r5
 80067f6:	f006 fec7 	bl	800d588 <USB_HC_Halt>
 80067fa:	9a02      	ldr	r2, [sp, #8]
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	e7d2      	b.n	80067a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006800:	68b1      	ldr	r1, [r6, #8]
 8006802:	0549      	lsls	r1, r1, #21
 8006804:	d5cf      	bpl.n	80067a6 <HAL_HCD_IRQHandler+0x1e6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006806:	68f1      	ldr	r1, [r6, #12]
 8006808:	9303      	str	r3, [sp, #12]
 800680a:	f041 0102 	orr.w	r1, r1, #2
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006812:	4629      	mov	r1, r5
 8006814:	f006 feb8 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006818:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800681a:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800681c:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800681e:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006820:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006824:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006826:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800682a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800682e:	60b1      	str	r1, [r6, #8]
 8006830:	e7b9      	b.n	80067a6 <HAL_HCD_IRQHandler+0x1e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006832:	68b1      	ldr	r1, [r6, #8]
 8006834:	07c8      	lsls	r0, r1, #31
 8006836:	d53d      	bpl.n	80068b4 <HAL_HCD_IRQHandler+0x2f4>
    if (hhcd->Init.dma_enable != 0U)
 8006838:	6921      	ldr	r1, [r4, #16]
 800683a:	b149      	cbz	r1, 8006850 <HAL_HCD_IRQHandler+0x290>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800683c:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800683e:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006842:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006846:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 800684a:	1a09      	subs	r1, r1, r0
 800684c:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8006850:	fb07 4e05 	mla	lr, r7, r5, r4
 8006854:	2001      	movs	r0, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006856:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 800685a:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800685e:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006860:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8006864:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8006868:	d116      	bne.n	8006898 <HAL_HCD_IRQHandler+0x2d8>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800686a:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800686c:	4629      	mov	r1, r5
 800686e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006870:	f043 0302 	orr.w	r3, r3, #2
 8006874:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006876:	f006 fe87 	bl	800d588 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800687a:	2310      	movs	r3, #16
 800687c:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800687e:	fb07 4505 	mla	r5, r7, r5, r4
 8006882:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8006886:	f083 0301 	eor.w	r3, r3, #1
 800688a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800688e:	f10a 0a01 	add.w	sl, sl, #1
 8006892:	f108 0820 	add.w	r8, r8, #32
 8006896:	e741      	b.n	800671c <HAL_HCD_IRQHandler+0x15c>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006898:	2903      	cmp	r1, #3
 800689a:	d1f0      	bne.n	800687e <HAL_HCD_IRQHandler+0x2be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800689c:	58d1      	ldr	r1, [r2, r3]
 800689e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80068a2:	50d1      	str	r1, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068a4:	4602      	mov	r2, r0
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80068a6:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068aa:	4629      	mov	r1, r5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7fe f947 	bl	8004b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80068b2:	e7e4      	b.n	800687e <HAL_HCD_IRQHandler+0x2be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80068b4:	68b1      	ldr	r1, [r6, #8]
 80068b6:	0789      	lsls	r1, r1, #30
 80068b8:	d536      	bpl.n	8006928 <HAL_HCD_IRQHandler+0x368>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80068ba:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80068bc:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80068c0:	f021 0102 	bic.w	r1, r1, #2
 80068c4:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80068c6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80068ca:	2901      	cmp	r1, #1
 80068cc:	d10c      	bne.n	80068e8 <HAL_HCD_IRQHandler+0x328>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80068ce:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068d2:	fb07 4305 	mla	r3, r7, r5, r4
 80068d6:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80068d8:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80068dc:	4620      	mov	r0, r4
 80068de:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80068e2:	f7fe f92d 	bl	8004b40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80068e6:	e7d2      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80068e8:	2905      	cmp	r1, #5
 80068ea:	d0f0      	beq.n	80068ce <HAL_HCD_IRQHandler+0x30e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80068ec:	2906      	cmp	r1, #6
 80068ee:	d001      	beq.n	80068f4 <HAL_HCD_IRQHandler+0x334>
 80068f0:	2908      	cmp	r1, #8
 80068f2:	d114      	bne.n	800691e <HAL_HCD_IRQHandler+0x35e>
      hhcd->hc[ch_num].ErrCnt++;
 80068f4:	fb07 4105 	mla	r1, r7, r5, r4
 80068f8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80068fa:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80068fc:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80068fe:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006900:	bf85      	ittet	hi
 8006902:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006904:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006908:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800690c:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006910:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006912:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006916:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800691a:	50d1      	str	r1, [r2, r3]
 800691c:	e7d9      	b.n	80068d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800691e:	2903      	cmp	r1, #3
 8006920:	d1d7      	bne.n	80068d2 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006922:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8006926:	e7f3      	b.n	8006910 <HAL_HCD_IRQHandler+0x350>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006928:	68b1      	ldr	r1, [r6, #8]
 800692a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800692e:	d012      	beq.n	8006956 <HAL_HCD_IRQHandler+0x396>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006930:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006932:	4629      	mov	r1, r5
 8006934:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006936:	f043 0302 	orr.w	r3, r3, #2
 800693a:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800693c:	fb07 4305 	mla	r3, r7, r5, r4
 8006940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006942:	3201      	adds	r2, #1
 8006944:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006946:	2206      	movs	r2, #6
 8006948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800694c:	f006 fe1c 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	60b3      	str	r3, [r6, #8]
 8006954:	e79b      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006956:	68b3      	ldr	r3, [r6, #8]
 8006958:	06da      	lsls	r2, r3, #27
 800695a:	d598      	bpl.n	800688e <HAL_HCD_IRQHandler+0x2ce>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800695c:	fb07 4205 	mla	r2, r7, r5, r4
 8006960:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8006964:	2b03      	cmp	r3, #3
 8006966:	d10a      	bne.n	800697e <HAL_HCD_IRQHandler+0x3be>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006968:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800696a:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800696c:	4629      	mov	r1, r5
 800696e:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006976:	f006 fe07 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800697a:	2310      	movs	r3, #16
 800697c:	e7e9      	b.n	8006952 <HAL_HCD_IRQHandler+0x392>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800697e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8006982:	d1fa      	bne.n	800697a <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006984:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f6      	bne.n	800697a <HAL_HCD_IRQHandler+0x3ba>
        hhcd->hc[ch_num].state = HC_NAK;
 800698c:	2303      	movs	r3, #3
 800698e:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8006992:	e7ea      	b.n	800696a <HAL_HCD_IRQHandler+0x3aa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006994:	0169      	lsls	r1, r5, #5
 8006996:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 800699a:	188e      	adds	r6, r1, r2
 800699c:	68b3      	ldr	r3, [r6, #8]
 800699e:	f013 0e04 	ands.w	lr, r3, #4
 80069a2:	d006      	beq.n	80069b2 <HAL_HCD_IRQHandler+0x3f2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80069a4:	2304      	movs	r3, #4
 80069a6:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069a8:	68f3      	ldr	r3, [r6, #12]
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	60f3      	str	r3, [r6, #12]
 80069b0:	e76d      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80069b2:	68b3      	ldr	r3, [r6, #8]
 80069b4:	f013 0320 	ands.w	r3, r3, #32
 80069b8:	d014      	beq.n	80069e4 <HAL_HCD_IRQHandler+0x424>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80069ba:	2320      	movs	r3, #32
 80069bc:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80069be:	fb07 4305 	mla	r3, r7, r5, r4
 80069c2:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80069c6:	2a01      	cmp	r2, #1
 80069c8:	f47f af61 	bne.w	800688e <HAL_HCD_IRQHandler+0x2ce>
      hhcd->hc[ch_num].do_ping = 0U;
 80069cc:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069d0:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069d2:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069d6:	68f3      	ldr	r3, [r6, #12]
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069de:	f006 fdd3 	bl	800d588 <USB_HC_Halt>
 80069e2:	e754      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80069e4:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80069e8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80069ec:	d011      	beq.n	8006a12 <HAL_HCD_IRQHandler+0x452>
    hhcd->hc[ch_num].state = HC_NYET;
 80069ee:	fb07 4205 	mla	r2, r7, r5, r4
 80069f2:	2104      	movs	r1, #4
 80069f4:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80069f8:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80069fa:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 80069fc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a00:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a02:	68f3      	ldr	r3, [r6, #12]
 8006a04:	f043 0302 	orr.w	r3, r3, #2
 8006a08:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a0a:	f006 fdbd 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	e79f      	b.n	8006952 <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006a12:	68b3      	ldr	r3, [r6, #8]
 8006a14:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8006a18:	d005      	beq.n	8006a26 <HAL_HCD_IRQHandler+0x466>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a1a:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a1c:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	60f3      	str	r3, [r6, #12]
 8006a24:	e6c8      	b.n	80067b8 <HAL_HCD_IRQHandler+0x1f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006a26:	68b3      	ldr	r3, [r6, #8]
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d511      	bpl.n	8006a50 <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a2c:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a2e:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a32:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a34:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a38:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 8006a3c:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a3e:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a40:	f006 fda2 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a44:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8006a46:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006a48:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006a4e:	e71e      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006a50:	68b3      	ldr	r3, [r6, #8]
 8006a52:	071b      	lsls	r3, r3, #28
 8006a54:	d50e      	bpl.n	8006a74 <HAL_HCD_IRQHandler+0x4b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a56:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a58:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 8006a5a:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a5e:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a60:	68f3      	ldr	r3, [r6, #12]
 8006a62:	f043 0302 	orr.w	r3, r3, #2
 8006a66:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a68:	f006 fd8e 	bl	800d588 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006a6c:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a6e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8006a72:	e70c      	b.n	800688e <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006a74:	68b3      	ldr	r3, [r6, #8]
 8006a76:	06db      	lsls	r3, r3, #27
 8006a78:	d515      	bpl.n	8006aa6 <HAL_HCD_IRQHandler+0x4e6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a7a:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8006a7e:	2203      	movs	r2, #3
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006a84:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a88:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006a8c:	b92a      	cbnz	r2, 8006a9a <HAL_HCD_IRQHandler+0x4da>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006a8e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006a92:	b912      	cbnz	r2, 8006a9a <HAL_HCD_IRQHandler+0x4da>
        hhcd->hc[ch_num].do_ping = 1U;
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a9a:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a9c:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a9e:	f043 0302 	orr.w	r3, r3, #2
 8006aa2:	60f3      	str	r3, [r6, #12]
 8006aa4:	e767      	b.n	8006976 <HAL_HCD_IRQHandler+0x3b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006aa6:	68b3      	ldr	r3, [r6, #8]
 8006aa8:	061b      	lsls	r3, r3, #24
 8006aaa:	d50c      	bpl.n	8006ac6 <HAL_HCD_IRQHandler+0x506>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006aac:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aae:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ab0:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ab4:	f043 0302 	orr.w	r3, r3, #2
 8006ab8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aba:	f006 fd65 	bl	800d588 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006abe:	2306      	movs	r3, #6
 8006ac0:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8006ac4:	e744      	b.n	8006950 <HAL_HCD_IRQHandler+0x390>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ac6:	68b3      	ldr	r3, [r6, #8]
 8006ac8:	055b      	lsls	r3, r3, #21
 8006aca:	d50f      	bpl.n	8006aec <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006acc:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ace:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ad0:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ada:	f006 fd55 	bl	800d588 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ade:	2310      	movs	r3, #16
 8006ae0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ae8:	2308      	movs	r3, #8
 8006aea:	e7c0      	b.n	8006a6e <HAL_HCD_IRQHandler+0x4ae>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006aec:	68b3      	ldr	r3, [r6, #8]
 8006aee:	0798      	lsls	r0, r3, #30
 8006af0:	f57f aecd 	bpl.w	800688e <HAL_HCD_IRQHandler+0x2ce>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006af4:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006af6:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006afa:	f023 0302 	bic.w	r3, r3, #2
 8006afe:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b00:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d10e      	bne.n	8006b26 <HAL_HCD_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006b08:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b0c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006b10:	3b02      	subs	r3, #2
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	f63f aedd 	bhi.w	80068d2 <HAL_HCD_IRQHandler+0x312>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b18:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8006b24:	e6d5      	b.n	80068d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d102      	bne.n	8006b30 <HAL_HCD_IRQHandler+0x570>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006b2a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8006b2e:	e6d0      	b.n	80068d2 <HAL_HCD_IRQHandler+0x312>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d0fa      	beq.n	8006b2a <HAL_HCD_IRQHandler+0x56a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d102      	bne.n	8006b3e <HAL_HCD_IRQHandler+0x57e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b38:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8006b3c:	e6c9      	b.n	80068d2 <HAL_HCD_IRQHandler+0x312>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b3e:	2b06      	cmp	r3, #6
 8006b40:	d002      	beq.n	8006b48 <HAL_HCD_IRQHandler+0x588>
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	f47f aec5 	bne.w	80068d2 <HAL_HCD_IRQHandler+0x312>
      hhcd->hc[ch_num].ErrCnt++;
 8006b48:	fb07 4005 	mla	r0, r7, r5, r4
 8006b4c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006b4e:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006b50:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8006b52:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b54:	bf85      	ittet	hi
 8006b56:	2304      	movhi	r3, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b58:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b5c:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b60:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b64:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b6e:	508b      	str	r3, [r1, r2]
 8006b70:	e6af      	b.n	80068d2 <HAL_HCD_IRQHandler+0x312>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b72:	6826      	ldr	r6, [r4, #0]
 8006b74:	69b3      	ldr	r3, [r6, #24]
 8006b76:	f023 0310 	bic.w	r3, r3, #16
 8006b7a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8006b7c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b7e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8006b82:	2a02      	cmp	r2, #2
 8006b84:	d129      	bne.n	8006bda <HAL_HCD_IRQHandler+0x61a>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b86:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d024      	beq.n	8006bda <HAL_HCD_IRQHandler+0x61a>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006b90:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b94:	2728      	movs	r7, #40	; 0x28
 8006b96:	fb07 4705 	mla	r7, r7, r5, r4
 8006b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b9c:	b1e9      	cbz	r1, 8006bda <HAL_HCD_IRQHandler+0x61a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f006 fb79 	bl	800d298 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006ba8:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006bac:	4443      	add	r3, r8
 8006bae:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	4443      	add	r3, r8
 8006bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006bb6:	016b      	lsls	r3, r5, #5
 8006bb8:	199a      	adds	r2, r3, r6
 8006bba:	6911      	ldr	r1, [r2, #16]
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <HAL_HCD_IRQHandler+0x628>)
 8006bbe:	400a      	ands	r2, r1
 8006bc0:	b15a      	cbz	r2, 8006bda <HAL_HCD_IRQHandler+0x61a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bc2:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bc4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bcc:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006bd2:	f083 0301 	eor.w	r3, r3, #1
 8006bd6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	6993      	ldr	r3, [r2, #24]
 8006bde:	f043 0310 	orr.w	r3, r3, #16
 8006be2:	6193      	str	r3, [r2, #24]
 8006be4:	e5a7      	b.n	8006736 <HAL_HCD_IRQHandler+0x176>
 8006be6:	bf00      	nop
 8006be8:	1ff80000 	.word	0x1ff80000

08006bec <HAL_HCD_Start>:
{
 8006bec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8006bee:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 8006bf2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d00d      	beq.n	8006c14 <HAL_HCD_Start+0x28>
 8006bf8:	2501      	movs	r5, #1
 8006bfa:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006bfe:	6800      	ldr	r0, [r0, #0]
 8006c00:	f006 faf1 	bl	800d1e6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006c04:	4629      	mov	r1, r5
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	f006 fb97 	bl	800d33a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8006c14:	2002      	movs	r0, #2
}
 8006c16:	bd38      	pop	{r3, r4, r5, pc}

08006c18 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8006c18:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8006c1c:	2b01      	cmp	r3, #1
{
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8006c22:	d009      	beq.n	8006c38 <HAL_HCD_Stop+0x20>
 8006c24:	2301      	movs	r3, #1
 8006c26:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	f006 fdc2 	bl	800d7b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c30:	2000      	movs	r0, #0
 8006c32:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8006c36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8006c38:	2002      	movs	r0, #2
}
 8006c3a:	bd10      	pop	{r4, pc}

08006c3c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f006 bb5e 	b.w	800d2fe <USB_ResetPort>

08006c42 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8006c42:	2328      	movs	r3, #40	; 0x28
 8006c44:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006c48:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8006c4c:	4770      	bx	lr

08006c4e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8006c4e:	2328      	movs	r3, #40	; 0x28
 8006c50:	fb03 0101 	mla	r1, r3, r1, r0
}
 8006c54:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8006c56:	4770      	bx	lr

08006c58 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006c58:	6800      	ldr	r0, [r0, #0]
 8006c5a:	f006 bc02 	b.w	800d462 <USB_GetCurrentFrame>

08006c5e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	f006 bbf4 	b.w	800d44c <USB_GetHostSpeed>

08006c64 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c64:	6803      	ldr	r3, [r0, #0]
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	0791      	lsls	r1, r2, #30
 8006c6a:	d501      	bpl.n	8006c70 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	07d2      	lsls	r2, r2, #31
 8006c74:	d403      	bmi.n	8006c7e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c76:	699a      	ldr	r2, [r3, #24]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	619a      	str	r2, [r3, #24]
 8006c7e:	4770      	bx	lr

08006c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	4616      	mov	r6, r2
 8006c86:	461f      	mov	r7, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006c88:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <I2C_TransferConfig+0xa0>)
{
 8006c8a:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006c8c:	6803      	ldr	r3, [r0, #0]
{
 8006c8e:	460c      	mov	r4, r1
 8006c90:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d010      	beq.n	8006cb8 <I2C_TransferConfig+0x38>
 8006c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00c      	beq.n	8006cb8 <I2C_TransferConfig+0x38>
 8006c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d008      	beq.n	8006cb8 <I2C_TransferConfig+0x38>
 8006ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <I2C_TransferConfig+0x38>
 8006cae:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8006cb2:	481c      	ldr	r0, [pc, #112]	; (8006d24 <I2C_TransferConfig+0xa4>)
 8006cb4:	f7fa ff79 	bl	8001baa <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8006cb8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8006cbc:	d007      	beq.n	8006cce <I2C_TransferConfig+0x4e>
 8006cbe:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 8006cc2:	d004      	beq.n	8006cce <I2C_TransferConfig+0x4e>
 8006cc4:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8006cc8:	4816      	ldr	r0, [pc, #88]	; (8006d24 <I2C_TransferConfig+0xa4>)
 8006cca:	f7fa ff6e 	bl	8001baa <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <I2C_TransferConfig+0xa8>)
 8006cd0:	429d      	cmp	r5, r3
 8006cd2:	d00b      	beq.n	8006cec <I2C_TransferConfig+0x6c>
 8006cd4:	f425 6280 	bic.w	r2, r5, #1024	; 0x400
 8006cd8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d005      	beq.n	8006cec <I2C_TransferConfig+0x6c>
 8006ce0:	b125      	cbz	r5, 8006cec <I2C_TransferConfig+0x6c>
 8006ce2:	f641 01c3 	movw	r1, #6339	; 0x18c3
 8006ce6:	480f      	ldr	r0, [pc, #60]	; (8006d24 <I2C_TransferConfig+0xa4>)
 8006ce8:	f7fa ff5f 	bl	8001baa <assert_failed>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006cec:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8006cf0:	f8d8 1000 	ldr.w	r1, [r8]
 8006cf4:	433b      	orrs	r3, r7
 8006cf6:	684a      	ldr	r2, [r1, #4]
 8006cf8:	432b      	orrs	r3, r5
 8006cfa:	0d6d      	lsrs	r5, r5, #21
 8006cfc:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 8006d00:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006d04:	f045 757f 	orr.w	r5, r5, #66846720	; 0x3fc0000
 8006d08:	f445 3558 	orr.w	r5, r5, #221184	; 0x36000
 8006d0c:	f445 757f 	orr.w	r5, r5, #1020	; 0x3fc
 8006d10:	f045 0503 	orr.w	r5, r5, #3
 8006d14:	ea22 0505 	bic.w	r5, r2, r5
 8006d18:	432b      	orrs	r3, r5
 8006d1a:	604b      	str	r3, [r1, #4]
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	40005400 	.word	0x40005400
 8006d24:	08034d55 	.word	0x08034d55
 8006d28:	80004000 	.word	0x80004000

08006d2c <I2C_WaitOnFlagUntilTimeout>:
{
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	9f06      	ldr	r7, [sp, #24]
 8006d32:	4604      	mov	r4, r0
 8006d34:	4688      	mov	r8, r1
 8006d36:	4616      	mov	r6, r2
 8006d38:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	6993      	ldr	r3, [r2, #24]
 8006d3e:	ea38 0303 	bics.w	r3, r8, r3
 8006d42:	bf0c      	ite	eq
 8006d44:	2301      	moveq	r3, #1
 8006d46:	2300      	movne	r3, #0
 8006d48:	42b3      	cmp	r3, r6
 8006d4a:	d002      	beq.n	8006d52 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006d4c:	2000      	movs	r0, #0
}
 8006d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8006d52:	1c6b      	adds	r3, r5, #1
 8006d54:	d0f2      	beq.n	8006d3c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fe fb49 	bl	80053ec <HAL_GetTick>
 8006d5a:	1bc0      	subs	r0, r0, r7
 8006d5c:	4285      	cmp	r5, r0
 8006d5e:	d301      	bcc.n	8006d64 <I2C_WaitOnFlagUntilTimeout+0x38>
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	d1ea      	bne.n	8006d3a <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d64:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006d66:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	f043 0320 	orr.w	r3, r3, #32
 8006d6c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006d6e:	2320      	movs	r3, #32
 8006d70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d82 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d82:	6803      	ldr	r3, [r0, #0]
{
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d88:	6998      	ldr	r0, [r3, #24]
{
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d8e:	f010 0010 	ands.w	r0, r0, #16
 8006d92:	d116      	bne.n	8006dc2 <I2C_IsAcknowledgeFailed+0x40>
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8006d96:	1c69      	adds	r1, r5, #1
 8006d98:	d014      	beq.n	8006dc4 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9a:	f7fe fb27 	bl	80053ec <HAL_GetTick>
 8006d9e:	1b80      	subs	r0, r0, r6
 8006da0:	4285      	cmp	r5, r0
 8006da2:	d300      	bcc.n	8006da6 <I2C_IsAcknowledgeFailed+0x24>
 8006da4:	b96d      	cbnz	r5, 8006dc2 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006da6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006dae:	2320      	movs	r3, #32
 8006db0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	2300      	movs	r3, #0
    return HAL_ERROR;
 8006db6:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006dbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	068a      	lsls	r2, r1, #26
 8006dc8:	d5e5      	bpl.n	8006d96 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dca:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dcc:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8006dce:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dd0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd2:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8006dd4:	f7ff ff46 	bl	8006c64 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	6853      	ldr	r3, [r2, #4]
 8006ddc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006de0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006de4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006df0:	f043 0304 	orr.w	r3, r3, #4
 8006df4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006df6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8006dfa:	e7db      	b.n	8006db4 <I2C_IsAcknowledgeFailed+0x32>

08006dfc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	460d      	mov	r5, r1
 8006e02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	079b      	lsls	r3, r3, #30
 8006e0a:	d501      	bpl.n	8006e10 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e10:	4632      	mov	r2, r6
 8006e12:	4629      	mov	r1, r5
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7ff ffb4 	bl	8006d82 <I2C_IsAcknowledgeFailed>
 8006e1a:	b9a0      	cbnz	r0, 8006e46 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8006e1c:	1c6a      	adds	r2, r5, #1
 8006e1e:	d0f1      	beq.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e20:	f7fe fae4 	bl	80053ec <HAL_GetTick>
 8006e24:	1b80      	subs	r0, r0, r6
 8006e26:	4285      	cmp	r5, r0
 8006e28:	d301      	bcc.n	8006e2e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	d1ea      	bne.n	8006e04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e30:	f043 0320 	orr.w	r3, r3, #32
 8006e34:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e36:	2320      	movs	r3, #32
 8006e38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006e42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006e46:	2001      	movs	r0, #1
}
 8006e48:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e4c <I2C_RequestMemoryWrite>:
{
 8006e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e50:	4b16      	ldr	r3, [pc, #88]	; (8006eac <I2C_RequestMemoryWrite+0x60>)
{
 8006e52:	4605      	mov	r5, r0
 8006e54:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e56:	9300      	str	r3, [sp, #0]
{
 8006e58:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e5e:	b2fa      	uxtb	r2, r7
 8006e60:	f7ff ff0e 	bl	8006c80 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e64:	4632      	mov	r2, r6
 8006e66:	9908      	ldr	r1, [sp, #32]
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7ff ffc7 	bl	8006dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e6e:	b110      	cbz	r0, 8006e76 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8006e70:	2001      	movs	r0, #1
}
 8006e72:	b003      	add	sp, #12
 8006e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e76:	2f01      	cmp	r7, #1
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	d10c      	bne.n	8006e96 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e7c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e84:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e86:	9b08      	ldr	r3, [sp, #32]
 8006e88:	9600      	str	r6, [sp, #0]
 8006e8a:	f7ff ff4f 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006e8e:	3000      	adds	r0, #0
 8006e90:	bf18      	it	ne
 8006e92:	2001      	movne	r0, #1
 8006e94:	e7ed      	b.n	8006e72 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e96:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e98:	9908      	ldr	r1, [sp, #32]
 8006e9a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	f7ff ffac 	bl	8006dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1e3      	bne.n	8006e70 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	e7e7      	b.n	8006e7c <I2C_RequestMemoryWrite+0x30>
 8006eac:	80002000 	.word	0x80002000

08006eb0 <I2C_RequestMemoryRead>:
{
 8006eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb2:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <I2C_RequestMemoryRead+0x60>)
{
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006eba:	9300      	str	r3, [sp, #0]
{
 8006ebc:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	b2fa      	uxtb	r2, r7
 8006ec2:	f7ff fedd 	bl	8006c80 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	9908      	ldr	r1, [sp, #32]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7ff ff96 	bl	8006dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006ed0:	b110      	cbz	r0, 8006ed8 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8006ed2:	2001      	movs	r0, #1
}
 8006ed4:	b003      	add	sp, #12
 8006ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ed8:	2f01      	cmp	r7, #1
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	d10c      	bne.n	8006ef8 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ede:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee6:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	9600      	str	r6, [sp, #0]
 8006eec:	f7ff ff1e 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8006ef0:	3000      	adds	r0, #0
 8006ef2:	bf18      	it	ne
 8006ef4:	2001      	movne	r0, #1
 8006ef6:	e7ed      	b.n	8006ed4 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ef8:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006efa:	9908      	ldr	r1, [sp, #32]
 8006efc:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f00:	4632      	mov	r2, r6
 8006f02:	f7ff ff7b 	bl	8006dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d1e3      	bne.n	8006ed2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	e7e7      	b.n	8006ede <I2C_RequestMemoryRead+0x2e>
 8006f0e:	bf00      	nop
 8006f10:	80002000 	.word	0x80002000

08006f14 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	069b      	lsls	r3, r3, #26
 8006f22:	d501      	bpl.n	8006f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8006f24:	2000      	movs	r0, #0
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f28:	4632      	mov	r2, r6
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff ff28 	bl	8006d82 <I2C_IsAcknowledgeFailed>
 8006f32:	b990      	cbnz	r0, 8006f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f34:	f7fe fa5a 	bl	80053ec <HAL_GetTick>
 8006f38:	1b80      	subs	r0, r0, r6
 8006f3a:	4285      	cmp	r5, r0
 8006f3c:	d301      	bcc.n	8006f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	d1ec      	bne.n	8006f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f44:	f043 0320 	orr.w	r3, r3, #32
 8006f48:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	2320      	movs	r3, #32
 8006f4c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006f56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006f5a:	2001      	movs	r0, #1
}
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f60 <HAL_I2C_Init>:
{
 8006f60:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8006f62:	4604      	mov	r4, r0
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f000 809e 	beq.w	80070a6 <HAL_I2C_Init+0x146>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006f6a:	6803      	ldr	r3, [r0, #0]
 8006f6c:	4a4f      	ldr	r2, [pc, #316]	; (80070ac <HAL_I2C_Init+0x14c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d010      	beq.n	8006f94 <HAL_I2C_Init+0x34>
 8006f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00c      	beq.n	8006f94 <HAL_I2C_Init+0x34>
 8006f7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d008      	beq.n	8006f94 <HAL_I2C_Init+0x34>
 8006f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <HAL_I2C_Init+0x34>
 8006f8a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006f8e:	4848      	ldr	r0, [pc, #288]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006f90:	f7fa fe0b 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d304      	bcc.n	8006fa6 <HAL_I2C_Init+0x46>
 8006f9c:	f240 11df 	movw	r1, #479	; 0x1df
 8006fa0:	4843      	ldr	r0, [pc, #268]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006fa2:	f7fa fe02 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d904      	bls.n	8006fb8 <HAL_I2C_Init+0x58>
 8006fae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006fb2:	483f      	ldr	r0, [pc, #252]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006fb4:	f7fa fdf9 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8006fbe:	d004      	beq.n	8006fca <HAL_I2C_Init+0x6a>
 8006fc0:	f240 11e1 	movw	r1, #481	; 0x1e1
 8006fc4:	483a      	ldr	r0, [pc, #232]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006fc6:	f7fa fdf0 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006fca:	6963      	ldr	r3, [r4, #20]
 8006fcc:	2bff      	cmp	r3, #255	; 0xff
 8006fce:	d904      	bls.n	8006fda <HAL_I2C_Init+0x7a>
 8006fd0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006fd4:	4836      	ldr	r0, [pc, #216]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006fd6:	f7fa fde8 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8006fda:	69a3      	ldr	r3, [r4, #24]
 8006fdc:	2b07      	cmp	r3, #7
 8006fde:	d904      	bls.n	8006fea <HAL_I2C_Init+0x8a>
 8006fe0:	f240 11e3 	movw	r1, #483	; 0x1e3
 8006fe4:	4832      	ldr	r0, [pc, #200]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006fe6:	f7fa fde0 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006fea:	69e3      	ldr	r3, [r4, #28]
 8006fec:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8006ff0:	d004      	beq.n	8006ffc <HAL_I2C_Init+0x9c>
 8006ff2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8006ff6:	482e      	ldr	r0, [pc, #184]	; (80070b0 <HAL_I2C_Init+0x150>)
 8006ff8:	f7fa fdd7 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006ffc:	6a23      	ldr	r3, [r4, #32]
 8006ffe:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8007002:	d004      	beq.n	800700e <HAL_I2C_Init+0xae>
 8007004:	f240 11e5 	movw	r1, #485	; 0x1e5
 8007008:	4829      	ldr	r0, [pc, #164]	; (80070b0 <HAL_I2C_Init+0x150>)
 800700a:	f7fa fdce 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800700e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007016:	b923      	cbnz	r3, 8007022 <HAL_I2C_Init+0xc2>
    hi2c->Lock = HAL_UNLOCKED;
 8007018:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800701c:	4620      	mov	r0, r4
 800701e:	f7fa fc1d 	bl	800185c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007022:	2324      	movs	r3, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007024:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007026:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800702a:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800703c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007044:	609a      	str	r2, [r3, #8]
 8007046:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007048:	d124      	bne.n	8007094 <HAL_I2C_Init+0x134>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800704a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800704e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007050:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007052:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007054:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007056:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800705a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800705e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007066:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	430a      	orrs	r2, r1
 800706c:	69a1      	ldr	r1, [r4, #24]
 800706e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007072:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007074:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007076:	69e2      	ldr	r2, [r4, #28]
 8007078:	430a      	orrs	r2, r1
 800707a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007084:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007086:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007088:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800708c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8007092:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007094:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007098:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800709a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800709c:	d1d8      	bne.n	8007050 <HAL_I2C_Init+0xf0>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800709e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	e7d4      	b.n	8007050 <HAL_I2C_Init+0xf0>
    return HAL_ERROR;
 80070a6:	2001      	movs	r0, #1
}
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	40005400 	.word	0x40005400
 80070b0:	08034d55 	.word	0x08034d55

080070b4 <HAL_I2C_DeInit>:
{
 80070b4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80070b6:	4604      	mov	r4, r0
 80070b8:	b348      	cbz	r0, 800710e <HAL_I2C_DeInit+0x5a>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80070ba:	6803      	ldr	r3, [r0, #0]
 80070bc:	4a15      	ldr	r2, [pc, #84]	; (8007114 <HAL_I2C_DeInit+0x60>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d010      	beq.n	80070e4 <HAL_I2C_DeInit+0x30>
 80070c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00c      	beq.n	80070e4 <HAL_I2C_DeInit+0x30>
 80070ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d008      	beq.n	80070e4 <HAL_I2C_DeInit+0x30>
 80070d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_I2C_DeInit+0x30>
 80070da:	f240 214b 	movw	r1, #587	; 0x24b
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <HAL_I2C_DeInit+0x64>)
 80070e0:	f7fa fd63 	bl	8001baa <assert_failed>
  __HAL_I2C_DISABLE(hi2c);
 80070e4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80070e6:	2324      	movs	r3, #36	; 0x24
  HAL_I2C_MspDeInit(hi2c);
 80070e8:	4620      	mov	r0, r4
  hi2c->State = HAL_I2C_STATE_BUSY;
 80070ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80070ee:	6813      	ldr	r3, [r2, #0]
 80070f0:	f023 0301 	bic.w	r3, r3, #1
 80070f4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80070f6:	f7fa fc11 	bl	800191c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070fa:	2000      	movs	r0, #0
 80070fc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80070fe:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007102:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007106:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007108:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800710c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800710e:	2001      	movs	r0, #1
}
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	40005400 	.word	0x40005400
 8007118:	08034d55 	.word	0x08034d55

0800711c <HAL_I2C_Mem_Write>:
{
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007122:	3b01      	subs	r3, #1
{
 8007124:	b085      	sub	sp, #20
 8007126:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007128:	2b01      	cmp	r3, #1
{
 800712a:	460f      	mov	r7, r1
 800712c:	9203      	str	r2, [sp, #12]
 800712e:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8007132:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007136:	d904      	bls.n	8007142 <HAL_I2C_Mem_Write+0x26>
 8007138:	f640 01ed 	movw	r1, #2285	; 0x8ed
 800713c:	4857      	ldr	r0, [pc, #348]	; (800729c <HAL_I2C_Mem_Write+0x180>)
 800713e:	f7fa fd34 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007142:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007146:	2b20      	cmp	r3, #32
 8007148:	f040 80a5 	bne.w	8007296 <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 800714c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714e:	b113      	cbz	r3, 8007156 <HAL_I2C_Mem_Write+0x3a>
 8007150:	f1bb 0f00 	cmp.w	fp, #0
 8007154:	d106      	bne.n	8007164 <HAL_I2C_Mem_Write+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800715a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800715c:	2001      	movs	r0, #1
}
 800715e:	b005      	add	sp, #20
 8007160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007164:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007168:	2b01      	cmp	r3, #1
 800716a:	f000 8094 	beq.w	8007296 <HAL_I2C_Mem_Write+0x17a>
 800716e:	2501      	movs	r5, #1
 8007170:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007174:	f7fe f93a 	bl	80053ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007178:	2319      	movs	r3, #25
 800717a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800717c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800717e:	462a      	mov	r2, r5
 8007180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff fdd1 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
 800718a:	4681      	mov	r9, r0
 800718c:	2800      	cmp	r0, #0
 800718e:	d1e5      	bne.n	800715c <HAL_I2C_Mem_Write+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007190:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8007192:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007194:	9601      	str	r6, [sp, #4]
 8007196:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007198:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800719c:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800719e:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80071a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071a8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071aa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80071ac:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071ae:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 80071b0:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071b4:	9a03      	ldr	r2, [sp, #12]
 80071b6:	f7ff fe49 	bl	8006e4c <I2C_RequestMemoryWrite>
 80071ba:	b110      	cbz	r0, 80071c2 <HAL_I2C_Mem_Write+0xa6>
      __HAL_UNLOCK(hi2c);
 80071bc:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80071c0:	e7cc      	b.n	800715c <HAL_I2C_Mem_Write+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2bff      	cmp	r3, #255	; 0xff
 80071c8:	d955      	bls.n	8007276 <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071ca:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071d0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071d4:	4639      	mov	r1, r7
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7ff fd52 	bl	8006c80 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071dc:	4632      	mov	r2, r6
 80071de:	4641      	mov	r1, r8
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff fe0b 	bl	8006dfc <I2C_WaitOnTXISFlagUntilTimeout>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d1b8      	bne.n	800715c <HAL_I2C_Mem_Write+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80071ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80071f2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80071f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80071f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80071f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80071fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80071fc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80071fe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007200:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007202:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007204:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007206:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007208:	b29b      	uxth	r3, r3
 800720a:	b1ab      	cbz	r3, 8007238 <HAL_I2C_Mem_Write+0x11c>
 800720c:	b9a2      	cbnz	r2, 8007238 <HAL_I2C_Mem_Write+0x11c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800720e:	9600      	str	r6, [sp, #0]
 8007210:	4643      	mov	r3, r8
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	4620      	mov	r0, r4
 8007216:	f7ff fd89 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
 800721a:	2800      	cmp	r0, #0
 800721c:	d19e      	bne.n	800715c <HAL_I2C_Mem_Write+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800721e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	2bff      	cmp	r3, #255	; 0xff
 8007224:	d92f      	bls.n	8007286 <HAL_I2C_Mem_Write+0x16a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007226:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800722c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800722e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007230:	4639      	mov	r1, r7
 8007232:	4620      	mov	r0, r4
 8007234:	f7ff fd24 	bl	8006c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8007238:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1cd      	bne.n	80071dc <HAL_I2C_Mem_Write+0xc0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007240:	4632      	mov	r2, r6
 8007242:	4641      	mov	r1, r8
 8007244:	4620      	mov	r0, r4
 8007246:	f7ff fe65 	bl	8006f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800724a:	2800      	cmp	r0, #0
 800724c:	d186      	bne.n	800715c <HAL_I2C_Mem_Write+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	2120      	movs	r1, #32
 8007252:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800725a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800725e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007268:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800726c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007270:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007274:	e773      	b.n	800715e <HAL_I2C_Mem_Write+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8007276:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800727c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800727e:	b292      	uxth	r2, r2
 8007280:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	e7a6      	b.n	80071d4 <HAL_I2C_Mem_Write+0xb8>
          hi2c->XferSize = hi2c->XferCount;
 8007286:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800728c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800728e:	b292      	uxth	r2, r2
 8007290:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	e7cc      	b.n	8007230 <HAL_I2C_Mem_Write+0x114>
    return HAL_BUSY;
 8007296:	2002      	movs	r0, #2
 8007298:	e761      	b.n	800715e <HAL_I2C_Mem_Write+0x42>
 800729a:	bf00      	nop
 800729c:	08034d55 	.word	0x08034d55

080072a0 <HAL_I2C_Mem_Read>:
{
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	469a      	mov	sl, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80072a6:	3b01      	subs	r3, #1
{
 80072a8:	b085      	sub	sp, #20
 80072aa:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80072ac:	2b01      	cmp	r3, #1
{
 80072ae:	460f      	mov	r7, r1
 80072b0:	9203      	str	r2, [sp, #12]
 80072b2:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 80072b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80072ba:	d904      	bls.n	80072c6 <HAL_I2C_Mem_Read+0x26>
 80072bc:	f640 1174 	movw	r1, #2420	; 0x974
 80072c0:	4859      	ldr	r0, [pc, #356]	; (8007428 <HAL_I2C_Mem_Read+0x188>)
 80072c2:	f7fa fc72 	bl	8001baa <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	f040 80a9 	bne.w	8007422 <HAL_I2C_Mem_Read+0x182>
    if ((pData == NULL) || (Size == 0U))
 80072d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d2:	b113      	cbz	r3, 80072da <HAL_I2C_Mem_Read+0x3a>
 80072d4:	f1bb 0f00 	cmp.w	fp, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_I2C_Mem_Read+0x48>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072de:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80072e0:	2001      	movs	r0, #1
}
 80072e2:	b005      	add	sp, #20
 80072e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80072e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	f000 8098 	beq.w	8007422 <HAL_I2C_Mem_Read+0x182>
 80072f2:	2501      	movs	r5, #1
 80072f4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 80072f8:	f7fe f878 	bl	80053ec <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072fc:	2319      	movs	r3, #25
 80072fe:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007300:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007302:	462a      	mov	r2, r5
 8007304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff fd0f 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
 800730e:	4681      	mov	r9, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d1e5      	bne.n	80072e0 <HAL_I2C_Mem_Read+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007314:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8007316:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007318:	9601      	str	r6, [sp, #4]
 800731a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800731c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007320:	2340      	movs	r3, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007322:	f8cd 8000 	str.w	r8, [sp]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007326:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800732a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800732c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800732e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007330:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007332:	4653      	mov	r3, sl
    hi2c->XferCount = Size;
 8007334:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007338:	9a03      	ldr	r2, [sp, #12]
 800733a:	f7ff fdb9 	bl	8006eb0 <I2C_RequestMemoryRead>
 800733e:	b110      	cbz	r0, 8007346 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8007340:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8007344:	e7cc      	b.n	80072e0 <HAL_I2C_Mem_Read+0x40>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007346:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	2bff      	cmp	r3, #255	; 0xff
 800734c:	4b37      	ldr	r3, [pc, #220]	; (800742c <HAL_I2C_Mem_Read+0x18c>)
 800734e:	d958      	bls.n	8007402 <HAL_I2C_Mem_Read+0x162>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007350:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007358:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800735a:	4639      	mov	r1, r7
 800735c:	4620      	mov	r0, r4
 800735e:	f7ff fc8f 	bl	8006c80 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007362:	9600      	str	r6, [sp, #0]
 8007364:	4643      	mov	r3, r8
 8007366:	2200      	movs	r2, #0
 8007368:	2104      	movs	r1, #4
 800736a:	4620      	mov	r0, r4
 800736c:	f7ff fcde 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
 8007370:	2800      	cmp	r0, #0
 8007372:	d1b5      	bne.n	80072e0 <HAL_I2C_Mem_Read+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007374:	6822      	ldr	r2, [r4, #0]
 8007376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800737a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800737c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800737e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007380:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007382:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007384:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007388:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800738a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800738c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800738e:	b29b      	uxth	r3, r3
 8007390:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007392:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	b1ab      	cbz	r3, 80073c4 <HAL_I2C_Mem_Read+0x124>
 8007398:	b9a2      	cbnz	r2, 80073c4 <HAL_I2C_Mem_Read+0x124>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800739a:	9600      	str	r6, [sp, #0]
 800739c:	4643      	mov	r3, r8
 800739e:	2180      	movs	r1, #128	; 0x80
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7ff fcc3 	bl	8006d2c <I2C_WaitOnFlagUntilTimeout>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d19a      	bne.n	80072e0 <HAL_I2C_Mem_Read+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2bff      	cmp	r3, #255	; 0xff
 80073b0:	d92f      	bls.n	8007412 <HAL_I2C_Mem_Read+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b2:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073bc:	4639      	mov	r1, r7
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff fc5e 	bl	8006c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80073c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1ca      	bne.n	8007362 <HAL_I2C_Mem_Read+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	4632      	mov	r2, r6
 80073ce:	4641      	mov	r1, r8
 80073d0:	4620      	mov	r0, r4
 80073d2:	f7ff fd9f 	bl	8006f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d182      	bne.n	80072e0 <HAL_I2C_Mem_Read+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	2120      	movs	r1, #32
 80073de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80073e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80073ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80073f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80073f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007400:	e76f      	b.n	80072e2 <HAL_I2C_Mem_Read+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8007402:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800740a:	b292      	uxth	r2, r2
 800740c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	e7a3      	b.n	800735a <HAL_I2C_Mem_Read+0xba>
          hi2c->XferSize = hi2c->XferCount;
 8007412:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007418:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800741a:	b292      	uxth	r2, r2
 800741c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	e7cc      	b.n	80073bc <HAL_I2C_Mem_Read+0x11c>
    return HAL_BUSY;
 8007422:	2002      	movs	r0, #2
 8007424:	e75d      	b.n	80072e2 <HAL_I2C_Mem_Read+0x42>
 8007426:	bf00      	nop
 8007428:	08034d55 	.word	0x08034d55
 800742c:	80002400 	.word	0x80002400

08007430 <HAL_I2C_GetState>:
  return hi2c->State;
 8007430:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007434:	4770      	bx	lr
	...

08007438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007438:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800743a:	4a20      	ldr	r2, [pc, #128]	; (80074bc <HAL_I2CEx_ConfigAnalogFilter+0x84>)
{
 800743c:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800743e:	6803      	ldr	r3, [r0, #0]
{
 8007440:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8007446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800744e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 8007456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <HAL_I2CEx_ConfigAnalogFilter+0x2e>
 800745e:	215f      	movs	r1, #95	; 0x5f
 8007460:	4817      	ldr	r0, [pc, #92]	; (80074c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 8007462:	f7fa fba2 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007466:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800746a:	d003      	beq.n	8007474 <HAL_I2CEx_ConfigAnalogFilter+0x3c>
 800746c:	2160      	movs	r1, #96	; 0x60
 800746e:	4814      	ldr	r0, [pc, #80]	; (80074c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>)
 8007470:	f7fa fb9b 	bl	8001baa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007474:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	2a20      	cmp	r2, #32
 800747c:	d11c      	bne.n	80074b8 <HAL_I2CEx_ConfigAnalogFilter+0x80>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007482:	2b01      	cmp	r3, #1
 8007484:	d018      	beq.n	80074b8 <HAL_I2CEx_ConfigAnalogFilter+0x80>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007486:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007488:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800748a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	f021 0101 	bic.w	r1, r1, #1
 8007496:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007498:	6819      	ldr	r1, [r3, #0]
 800749a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800749e:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	430d      	orrs	r5, r1
 80074a4:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80074a6:	6819      	ldr	r1, [r3, #0]
 80074a8:	f041 0101 	orr.w	r1, r1, #1
 80074ac:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80074ae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80074b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2002      	movs	r0, #2
  }
}
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	40005400 	.word	0x40005400
 80074c0:	08034d93 	.word	0x08034d93

080074c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80074c6:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <HAL_I2CEx_ConfigDigitalFilter+0x80>)
{
 80074c8:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80074ca:	6803      	ldr	r3, [r0, #0]
{
 80074cc:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80074d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80074e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x2e>
 80074ea:	218d      	movs	r1, #141	; 0x8d
 80074ec:	4816      	ldr	r0, [pc, #88]	; (8007548 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 80074ee:	f7fa fb5c 	bl	8001baa <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80074f2:	2d0f      	cmp	r5, #15
 80074f4:	d903      	bls.n	80074fe <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80074f6:	218e      	movs	r1, #142	; 0x8e
 80074f8:	4813      	ldr	r0, [pc, #76]	; (8007548 <HAL_I2CEx_ConfigDigitalFilter+0x84>)
 80074fa:	f7fa fb56 	bl	8001baa <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074fe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	2a20      	cmp	r2, #32
 8007506:	d11b      	bne.n	8007540 <HAL_I2CEx_ConfigDigitalFilter+0x7c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007508:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800750c:	2b01      	cmp	r3, #1
 800750e:	d017      	beq.n	8007540 <HAL_I2CEx_ConfigDigitalFilter+0x7c>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007510:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007512:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007514:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	6819      	ldr	r1, [r3, #0]
 800751c:	f021 0101 	bic.w	r1, r1, #1
 8007520:	6019      	str	r1, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8007522:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8007524:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8007528:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800752c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	f041 0101 	orr.w	r1, r1, #1
 8007534:	6019      	str	r1, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007536:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800753a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    return HAL_OK;
 800753e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8007540:	2002      	movs	r0, #2
  }
}
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	40005400 	.word	0x40005400
 8007548:	08034d93 	.word	0x08034d93

0800754c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800754c:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800754e:	f04f 0c00 	mov.w	ip, #0
{
 8007552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007556:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007558:	6804      	ldr	r4, [r0, #0]
 800755a:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800755c:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800755e:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007560:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007564:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007566:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800756a:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800756e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007572:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007576:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007578:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8007580:	4430      	add	r0, r6
 8007582:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007586:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007588:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800758a:	68e0      	ldr	r0, [r4, #12]
 800758c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8007590:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007592:	6898      	ldr	r0, [r3, #8]
 8007594:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8007598:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800759a:	6888      	ldr	r0, [r1, #8]
 800759c:	68e6      	ldr	r6, [r4, #12]
 800759e:	3001      	adds	r0, #1
 80075a0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80075a4:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075a6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80075a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80075ac:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80075ae:	6918      	ldr	r0, [r3, #16]
 80075b0:	f020 0007 	bic.w	r0, r0, #7
 80075b4:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075b6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80075b8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075ba:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075be:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80075c2:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80075c6:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80075ca:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80075ce:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80075d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80075d6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075d8:	6958      	ldr	r0, [r3, #20]
 80075da:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80075de:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075e0:	6948      	ldr	r0, [r1, #20]
 80075e2:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075e4:	69d8      	ldr	r0, [r3, #28]
 80075e6:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80075ea:	f020 0007 	bic.w	r0, r0, #7
 80075ee:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80075f0:	6a08      	ldr	r0, [r1, #32]
 80075f2:	69cd      	ldr	r5, [r1, #28]
 80075f4:	4305      	orrs	r5, r0
 80075f6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80075f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80075fa:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80075fc:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007600:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007602:	b31e      	cbz	r6, 800764c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007604:	2e01      	cmp	r6, #1
 8007606:	d023      	beq.n	8007650 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007608:	1eb0      	subs	r0, r6, #2
 800760a:	2802      	cmp	r0, #2
 800760c:	d922      	bls.n	8007654 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800760e:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007610:	bf0c      	ite	eq
 8007612:	2002      	moveq	r0, #2
 8007614:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007616:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007618:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800761c:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8007620:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007622:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007624:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007626:	4345      	muls	r5, r0
 8007628:	4378      	muls	r0, r7
 800762a:	3003      	adds	r0, #3
 800762c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007630:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007632:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007634:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8007638:	f020 0007 	bic.w	r0, r0, #7
 800763c:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800763e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007640:	58a3      	ldr	r3, [r4, r2]
 8007642:	f043 0301 	orr.w	r3, r3, #1
 8007646:	50a3      	str	r3, [r4, r2]
 8007648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800764c:	2004      	movs	r0, #4
 800764e:	e7e2      	b.n	8007616 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8007650:	2003      	movs	r0, #3
 8007652:	e7e0      	b.n	8007616 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8007654:	2002      	movs	r0, #2
 8007656:	e7de      	b.n	8007616 <LTDC_SetConfig+0xca>

08007658 <HAL_LTDC_Init>:
{
 8007658:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800765a:	4604      	mov	r4, r0
 800765c:	2800      	cmp	r0, #0
 800765e:	f000 80cd 	beq.w	80077fc <HAL_LTDC_Init+0x1a4>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
 8007662:	6802      	ldr	r2, [r0, #0]
 8007664:	4b66      	ldr	r3, [pc, #408]	; (8007800 <HAL_LTDC_Init+0x1a8>)
 8007666:	429a      	cmp	r2, r3
 8007668:	d003      	beq.n	8007672 <HAL_LTDC_Init+0x1a>
 800766a:	21ca      	movs	r1, #202	; 0xca
 800766c:	4865      	ldr	r0, [pc, #404]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800766e:	f7fa fa9c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007678:	d303      	bcc.n	8007682 <HAL_LTDC_Init+0x2a>
 800767a:	21cb      	movs	r1, #203	; 0xcb
 800767c:	4861      	ldr	r0, [pc, #388]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800767e:	f7fa fa94 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
 8007682:	69a3      	ldr	r3, [r4, #24]
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007688:	d303      	bcc.n	8007692 <HAL_LTDC_Init+0x3a>
 800768a:	21cc      	movs	r1, #204	; 0xcc
 800768c:	485d      	ldr	r0, [pc, #372]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800768e:	f7fa fa8c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
 8007692:	69e3      	ldr	r3, [r4, #28]
 8007694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007698:	d303      	bcc.n	80076a2 <HAL_LTDC_Init+0x4a>
 800769a:	21cd      	movs	r1, #205	; 0xcd
 800769c:	4859      	ldr	r0, [pc, #356]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800769e:	f7fa fa84 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
 80076a2:	6a23      	ldr	r3, [r4, #32]
 80076a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a8:	d303      	bcc.n	80076b2 <HAL_LTDC_Init+0x5a>
 80076aa:	21ce      	movs	r1, #206	; 0xce
 80076ac:	4855      	ldr	r0, [pc, #340]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076ae:	f7fa fa7c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
 80076b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b8:	d303      	bcc.n	80076c2 <HAL_LTDC_Init+0x6a>
 80076ba:	21cf      	movs	r1, #207	; 0xcf
 80076bc:	4851      	ldr	r0, [pc, #324]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076be:	f7fa fa74 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
 80076c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	d303      	bcc.n	80076d2 <HAL_LTDC_Init+0x7a>
 80076ca:	21d0      	movs	r1, #208	; 0xd0
 80076cc:	484d      	ldr	r0, [pc, #308]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076ce:	f7fa fa6c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
 80076d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d8:	d303      	bcc.n	80076e2 <HAL_LTDC_Init+0x8a>
 80076da:	21d1      	movs	r1, #209	; 0xd1
 80076dc:	4849      	ldr	r0, [pc, #292]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076de:	f7fa fa64 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
 80076e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e8:	d303      	bcc.n	80076f2 <HAL_LTDC_Init+0x9a>
 80076ea:	21d2      	movs	r1, #210	; 0xd2
 80076ec:	4845      	ldr	r0, [pc, #276]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076ee:	f7fa fa5c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 80076f8:	d003      	beq.n	8007702 <HAL_LTDC_Init+0xaa>
 80076fa:	21d3      	movs	r1, #211	; 0xd3
 80076fc:	4841      	ldr	r0, [pc, #260]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 80076fe:	f7fa fa54 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 8007708:	d003      	beq.n	8007712 <HAL_LTDC_Init+0xba>
 800770a:	21d4      	movs	r1, #212	; 0xd4
 800770c:	483d      	ldr	r0, [pc, #244]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800770e:	f7fa fa4c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8007718:	d003      	beq.n	8007722 <HAL_LTDC_Init+0xca>
 800771a:	21d5      	movs	r1, #213	; 0xd5
 800771c:	4839      	ldr	r0, [pc, #228]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800771e:	f7fa fa44 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8007728:	d003      	beq.n	8007732 <HAL_LTDC_Init+0xda>
 800772a:	21d6      	movs	r1, #214	; 0xd6
 800772c:	4835      	ldr	r0, [pc, #212]	; (8007804 <HAL_LTDC_Init+0x1ac>)
 800772e:	f7fa fa3c 	bl	8001baa <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007732:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8007736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800773a:	b923      	cbnz	r3, 8007746 <HAL_LTDC_Init+0xee>
    hltdc->Lock = HAL_UNLOCKED;
 800773c:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007740:	4620      	mov	r0, r4
 8007742:	f7fc faaf 	bl	8003ca4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007746:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007748:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800774a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007756:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007758:	6862      	ldr	r2, [r4, #4]
 800775a:	6999      	ldr	r1, [r3, #24]
 800775c:	4302      	orrs	r2, r0
 800775e:	68e0      	ldr	r0, [r4, #12]
 8007760:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007762:	6920      	ldr	r0, [r4, #16]
 8007764:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007766:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007768:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800776a:	4927      	ldr	r1, [pc, #156]	; (8007808 <HAL_LTDC_Init+0x1b0>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800776c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	400a      	ands	r2, r1
 8007772:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800777a:	69a0      	ldr	r0, [r4, #24]
 800777c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800777e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007780:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	400a      	ands	r2, r1
 8007786:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800778e:	6a20      	ldr	r0, [r4, #32]
 8007790:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007792:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007794:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	400a      	ands	r2, r1
 800779a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80077a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80077a4:	4302      	orrs	r2, r0
 80077a6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	4011      	ands	r1, r2
 80077ac:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80077ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80077b8:	430a      	orrs	r2, r1
 80077ba:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80077bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80077be:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80077c2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80077c6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80077ca:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80077cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077ce:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80077d2:	430a      	orrs	r2, r1
 80077d4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80077d8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077dc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80077e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e2:	f042 0206 	orr.w	r2, r2, #6
 80077e6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80077f0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80077f2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80077f6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80077fc:	2001      	movs	r0, #1
}
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	40016800 	.word	0x40016800
 8007804:	08034dd4 	.word	0x08034dd4
 8007808:	f000f800 	.word	0xf000f800

0800780c <HAL_LTDC_DeInit>:
{
 800780c:	b510      	push	{r4, lr}
 800780e:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8007810:	f7fc fad6 	bl	8003dc0 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007814:	2000      	movs	r0, #0
 8007816:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  __HAL_UNLOCK(hltdc);
 800781a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_RESET;
 800781e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
}
 8007822:	bd10      	pop	{r4, pc}

08007824 <HAL_LTDC_ErrorCallback>:
 8007824:	4770      	bx	lr

08007826 <HAL_LTDC_ReloadEventCallback>:
{
 8007826:	4770      	bx	lr

08007828 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007828:	6803      	ldr	r3, [r0, #0]
{
 800782a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800782c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800782e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007830:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007832:	0772      	lsls	r2, r6, #29
 8007834:	d514      	bpl.n	8007860 <HAL_LTDC_IRQHandler+0x38>
 8007836:	0769      	lsls	r1, r5, #29
 8007838:	d512      	bpl.n	8007860 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800783a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800783c:	f022 0204 	bic.w	r2, r2, #4
 8007840:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007842:	2204      	movs	r2, #4
 8007844:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007846:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007852:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007854:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007858:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800785c:	f7ff ffe2 	bl	8007824 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007860:	07b2      	lsls	r2, r6, #30
 8007862:	d516      	bpl.n	8007892 <HAL_LTDC_IRQHandler+0x6a>
 8007864:	07ab      	lsls	r3, r5, #30
 8007866:	d514      	bpl.n	8007892 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007868:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800786a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800786c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786e:	f022 0202 	bic.w	r2, r2, #2
 8007872:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007874:	2202      	movs	r2, #2
 8007876:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007878:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007882:	2304      	movs	r3, #4
 8007884:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007888:	2300      	movs	r3, #0
 800788a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800788e:	f7ff ffc9 	bl	8007824 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007892:	07f0      	lsls	r0, r6, #31
 8007894:	d510      	bpl.n	80078b8 <HAL_LTDC_IRQHandler+0x90>
 8007896:	07e9      	lsls	r1, r5, #31
 8007898:	d50e      	bpl.n	80078b8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800789a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800789c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800789e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078a0:	f022 0201 	bic.w	r2, r2, #1
 80078a4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80078a6:	2201      	movs	r2, #1
 80078a8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80078aa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80078ac:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80078b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80078b4:	f7fc ff2e 	bl	8004714 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80078b8:	0732      	lsls	r2, r6, #28
 80078ba:	d511      	bpl.n	80078e0 <HAL_LTDC_IRQHandler+0xb8>
 80078bc:	072b      	lsls	r3, r5, #28
 80078be:	d50f      	bpl.n	80078e0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80078c0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80078c2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80078c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078c6:	f022 0208 	bic.w	r2, r2, #8
 80078ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80078cc:	2208      	movs	r2, #8
 80078ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80078d6:	2300      	movs	r3, #0
 80078d8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80078dc:	f7ff ffa3 	bl	8007826 <HAL_LTDC_ReloadEventCallback>
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080078e4 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80078e4:	2a01      	cmp	r2, #1
{
 80078e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ea:	4607      	mov	r7, r0
 80078ec:	460e      	mov	r6, r1
 80078ee:	4691      	mov	r9, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 80078f0:	d904      	bls.n	80078fc <HAL_LTDC_ConfigLayer+0x18>
 80078f2:	f240 21fe 	movw	r1, #766	; 0x2fe
 80078f6:	4846      	ldr	r0, [pc, #280]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 80078f8:	f7fa f957 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d304      	bcc.n	800790e <HAL_LTDC_ConfigLayer+0x2a>
 8007904:	f240 21ff 	movw	r1, #767	; 0x2ff
 8007908:	4841      	ldr	r0, [pc, #260]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 800790a:	f7fa f94e 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
 800790e:	6873      	ldr	r3, [r6, #4]
 8007910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007914:	d304      	bcc.n	8007920 <HAL_LTDC_ConfigLayer+0x3c>
 8007916:	f44f 7140 	mov.w	r1, #768	; 0x300
 800791a:	483d      	ldr	r0, [pc, #244]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 800791c:	f7fa f945 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
 8007920:	68b3      	ldr	r3, [r6, #8]
 8007922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007926:	d304      	bcc.n	8007932 <HAL_LTDC_ConfigLayer+0x4e>
 8007928:	f240 3101 	movw	r1, #769	; 0x301
 800792c:	4838      	ldr	r0, [pc, #224]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 800792e:	f7fa f93c 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
 8007932:	68f3      	ldr	r3, [r6, #12]
 8007934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007938:	d304      	bcc.n	8007944 <HAL_LTDC_ConfigLayer+0x60>
 800793a:	f240 3102 	movw	r1, #770	; 0x302
 800793e:	4834      	ldr	r0, [pc, #208]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 8007940:	f7fa f933 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
 8007944:	6933      	ldr	r3, [r6, #16]
 8007946:	2b07      	cmp	r3, #7
 8007948:	d904      	bls.n	8007954 <HAL_LTDC_ConfigLayer+0x70>
 800794a:	f240 3103 	movw	r1, #771	; 0x303
 800794e:	4830      	ldr	r0, [pc, #192]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 8007950:	f7fa f92b 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
 8007954:	6973      	ldr	r3, [r6, #20]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d904      	bls.n	8007964 <HAL_LTDC_ConfigLayer+0x80>
 800795a:	f44f 7141 	mov.w	r1, #772	; 0x304
 800795e:	482c      	ldr	r0, [pc, #176]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 8007960:	f7fa f923 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
 8007964:	69b3      	ldr	r3, [r6, #24]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d904      	bls.n	8007974 <HAL_LTDC_ConfigLayer+0x90>
 800796a:	f240 3105 	movw	r1, #773	; 0x305
 800796e:	4828      	ldr	r0, [pc, #160]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 8007970:	f7fa f91b 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 8007974:	69f3      	ldr	r3, [r6, #28]
 8007976:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797e:	d004      	beq.n	800798a <HAL_LTDC_ConfigLayer+0xa6>
 8007980:	f240 3106 	movw	r1, #774	; 0x306
 8007984:	4822      	ldr	r0, [pc, #136]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 8007986:	f7fa f910 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
 800798a:	6a33      	ldr	r3, [r6, #32]
 800798c:	f023 0302 	bic.w	r3, r3, #2
 8007990:	2b05      	cmp	r3, #5
 8007992:	d004      	beq.n	800799e <HAL_LTDC_ConfigLayer+0xba>
 8007994:	f240 3107 	movw	r1, #775	; 0x307
 8007998:	481d      	ldr	r0, [pc, #116]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 800799a:	f7fa f906 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
 800799e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80079a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a4:	d304      	bcc.n	80079b0 <HAL_LTDC_ConfigLayer+0xcc>
 80079a6:	f44f 7142 	mov.w	r1, #776	; 0x308
 80079aa:	4819      	ldr	r0, [pc, #100]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 80079ac:	f7fa f8fd 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 80079b0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d304      	bcc.n	80079c2 <HAL_LTDC_ConfigLayer+0xde>
 80079b8:	f240 3109 	movw	r1, #777	; 0x309
 80079bc:	4814      	ldr	r0, [pc, #80]	; (8007a10 <HAL_LTDC_ConfigLayer+0x12c>)
 80079be:	f7fa f8f4 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 80079c2:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 80079c6:	2002      	movs	r0, #2
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d01f      	beq.n	8007a0c <HAL_LTDC_ConfigLayer+0x128>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079cc:	2434      	movs	r4, #52	; 0x34
 80079ce:	4635      	mov	r5, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079d0:	f887 00a1 	strb.w	r0, [r7, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 80079d4:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079d8:	fb04 7409 	mla	r4, r4, r9, r7
  __HAL_LOCK(hltdc);
 80079dc:	f887 80a0 	strb.w	r8, [r7, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079e0:	3438      	adds	r4, #56	; 0x38
 80079e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ee:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079f0:	4638      	mov	r0, r7
 80079f2:	464a      	mov	r2, r9
 80079f4:	4631      	mov	r1, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079f6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079f8:	f7ff fda8 	bl	800754c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079fc:	683b      	ldr	r3, [r7, #0]
  __HAL_UNLOCK(hltdc);
 80079fe:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a00:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a04:	f887 80a1 	strb.w	r8, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007a08:	f887 00a0 	strb.w	r0, [r7, #160]	; 0xa0
}
 8007a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a10:	08034dd4 	.word	0x08034dd4

08007a14 <HAL_LTDC_ConfigColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a14:	2a01      	cmp	r2, #1
{
 8007a16:	b570      	push	{r4, r5, r6, lr}
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	4615      	mov	r5, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a1e:	d904      	bls.n	8007a2a <HAL_LTDC_ConfigColorKeying+0x16>
 8007a20:	f44f 714c 	mov.w	r1, #816	; 0x330
 8007a24:	480d      	ldr	r0, [pc, #52]	; (8007a5c <HAL_LTDC_ConfigColorKeying+0x48>)
 8007a26:	f7fa f8c0 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007a2a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007a2e:	2002      	movs	r0, #2
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d012      	beq.n	8007a5a <HAL_LTDC_ConfigColorKeying+0x46>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007a34:	6821      	ldr	r1, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a36:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007a3a:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8007a3c:	f101 0384 	add.w	r3, r1, #132	; 0x84
 8007a40:	eb03 12c5 	add.w	r2, r3, r5, lsl #7
 8007a44:	68d3      	ldr	r3, [r2, #12]
 8007a46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a4a:	60d3      	str	r3, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a4c:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8007a4e:	60d6      	str	r6, [r2, #12]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a50:	624b      	str	r3, [r1, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a52:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007a56:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	08034dd4 	.word	0x08034dd4

08007a60 <HAL_LTDC_ConfigCLUT>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a60:	2b01      	cmp	r3, #1
{
 8007a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	4604      	mov	r4, r0
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4616      	mov	r6, r2
 8007a6c:	4698      	mov	r8, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007a6e:	d904      	bls.n	8007a7a <HAL_LTDC_ConfigCLUT+0x1a>
 8007a70:	f240 3159 	movw	r1, #857	; 0x359
 8007a74:	481d      	ldr	r0, [pc, #116]	; (8007aec <HAL_LTDC_ConfigCLUT+0x8c>)
 8007a76:	f7fa f898 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007a7a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007a7e:	2002      	movs	r0, #2
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d014      	beq.n	8007aae <HAL_LTDC_ConfigCLUT+0x4e>
 8007a84:	2301      	movs	r3, #1
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8007a86:	ea4f 17c8 	mov.w	r7, r8, lsl #7
  for (counter = 0U; (counter < CLUTSize); counter++)
 8007a8a:	2200      	movs	r2, #0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007a8c:	f04f 5e88 	mov.w	lr, #285212672	; 0x11000000
  __HAL_LOCK(hltdc);
 8007a90:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8007a94:	2334      	movs	r3, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a96:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8007a9a:	fb03 4308 	mla	r3, r3, r8, r4
  for (counter = 0U; (counter < CLUTSize); counter++)
 8007a9e:	42b2      	cmp	r2, r6
 8007aa0:	d107      	bne.n	8007ab2 <HAL_LTDC_ConfigCLUT+0x52>
  hltdc->State = HAL_LTDC_STATE_READY;
 8007aa2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 8007aa4:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8007aa6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007aaa:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8007ab2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007ab4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8007ab8:	2906      	cmp	r1, #6
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007aba:	bf05      	ittet	eq
 8007abc:	b2c1      	uxtbeq	r1, r0
 8007abe:	fb0e fc02 	muleq.w	ip, lr, r2
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007ac2:	b281      	uxthne	r1, r0
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007ac4:	ea41 010c 	orreq.w	r1, r1, ip
 8007ac8:	bf0c      	ite	eq
 8007aca:	f400 4c7f 	andeq.w	ip, r0, #65280	; 0xff00
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007ace:	ea41 6102 	orrne.w	r1, r1, r2, lsl #24
 8007ad2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
      tmp  = (((counter + (16U*counter)) << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007ad6:	bf08      	it	eq
 8007ad8:	ea41 010c 	orreq.w	r1, r1, ip
  for (counter = 0U; (counter < CLUTSize); counter++)
 8007adc:	3201      	adds	r2, #1
      tmp  = ((counter << 24U) | ((uint32_t)(*pcolorlut) & 0xFFU) | ((uint32_t)(*pcolorlut) & 0xFF00U) | ((uint32_t)(*pcolorlut) & 0xFF0000U));
 8007ade:	4301      	orrs	r1, r0
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	3084      	adds	r0, #132	; 0x84
 8007ae4:	4438      	add	r0, r7
 8007ae6:	6401      	str	r1, [r0, #64]	; 0x40
 8007ae8:	e7d9      	b.n	8007a9e <HAL_LTDC_ConfigCLUT+0x3e>
 8007aea:	bf00      	nop
 8007aec:	08034dd4 	.word	0x08034dd4

08007af0 <HAL_LTDC_EnableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007af0:	2901      	cmp	r1, #1
{
 8007af2:	b538      	push	{r3, r4, r5, lr}
 8007af4:	4604      	mov	r4, r0
 8007af6:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007af8:	d904      	bls.n	8007b04 <HAL_LTDC_EnableColorKeying+0x14>
 8007afa:	f240 3187 	movw	r1, #903	; 0x387
 8007afe:	480c      	ldr	r0, [pc, #48]	; (8007b30 <HAL_LTDC_EnableColorKeying+0x40>)
 8007b00:	f7fa f853 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007b04:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007b08:	2002      	movs	r0, #2
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d00f      	beq.n	8007b2e <HAL_LTDC_EnableColorKeying+0x3e>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b12:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007b16:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8007b1a:	586b      	ldr	r3, [r5, r1]
 8007b1c:	4303      	orrs	r3, r0
  __HAL_UNLOCK(hltdc);
 8007b1e:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8007b20:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b26:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007b2a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	08034dd4 	.word	0x08034dd4

08007b34 <HAL_LTDC_DisableColorKeying>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007b34:	2901      	cmp	r1, #1
{
 8007b36:	b538      	push	{r3, r4, r5, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007b3c:	d904      	bls.n	8007b48 <HAL_LTDC_DisableColorKeying+0x14>
 8007b3e:	f240 31aa 	movw	r1, #938	; 0x3aa
 8007b42:	480d      	ldr	r0, [pc, #52]	; (8007b78 <HAL_LTDC_DisableColorKeying+0x44>)
 8007b44:	f7fa f831 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007b48:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007b4c:	2002      	movs	r0, #2
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d010      	beq.n	8007b74 <HAL_LTDC_DisableColorKeying+0x40>
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	01ed      	lsls	r5, r5, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b56:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007b5a:	2000      	movs	r0, #0
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8007b5c:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8007b60:	586b      	ldr	r3, [r5, r1]
 8007b62:	f023 0302 	bic.w	r3, r3, #2
 8007b66:	506b      	str	r3, [r5, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b6c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007b70:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
 8007b76:	bf00      	nop
 8007b78:	08034dd4 	.word	0x08034dd4

08007b7c <HAL_LTDC_SetWindowPosition>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007b7c:	2b01      	cmp	r3, #1
{
 8007b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	4688      	mov	r8, r1
 8007b86:	4617      	mov	r7, r2
 8007b88:	461e      	mov	r6, r3
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007b8a:	d904      	bls.n	8007b96 <HAL_LTDC_SetWindowPosition+0x1a>
 8007b8c:	f240 4185 	movw	r1, #1157	; 0x485
 8007b90:	481b      	ldr	r0, [pc, #108]	; (8007c00 <HAL_LTDC_SetWindowPosition+0x84>)
 8007b92:	f7fa f80a 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLL(X0));
 8007b96:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8007b9a:	d304      	bcc.n	8007ba6 <HAL_LTDC_SetWindowPosition+0x2a>
 8007b9c:	f240 4186 	movw	r1, #1158	; 0x486
 8007ba0:	4817      	ldr	r0, [pc, #92]	; (8007c00 <HAL_LTDC_SetWindowPosition+0x84>)
 8007ba2:	f7fa f802 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(Y0));
 8007ba6:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8007baa:	d304      	bcc.n	8007bb6 <HAL_LTDC_SetWindowPosition+0x3a>
 8007bac:	f240 4187 	movw	r1, #1159	; 0x487
 8007bb0:	4813      	ldr	r0, [pc, #76]	; (8007c00 <HAL_LTDC_SetWindowPosition+0x84>)
 8007bb2:	f7f9 fffa 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007bb6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007bba:	2002      	movs	r0, #2
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d01d      	beq.n	8007bfc <HAL_LTDC_SetWindowPosition+0x80>
  pLayerCfg->WindowX0 = X0;
 8007bc0:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007bc2:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bc4:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bc8:	4620      	mov	r0, r4
  pLayerCfg->WindowX0 = X0;
 8007bca:	4371      	muls	r1, r6
  __HAL_LOCK(hltdc);
 8007bcc:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->WindowX0 = X0;
 8007bd0:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007bd2:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bd6:	4421      	add	r1, r4
  pLayerCfg->WindowY0 = Y0;
 8007bd8:	641f      	str	r7, [r3, #64]	; 0x40
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007bda:	4442      	add	r2, r8
  pLayerCfg->WindowX0 = X0;
 8007bdc:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8007be2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007be4:	4417      	add	r7, r2
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007be6:	4632      	mov	r2, r6
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8007be8:	645f      	str	r7, [r3, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007bea:	f7ff fcaf 	bl	800754c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bee:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007bf0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007bf2:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007bf4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007bf8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	08034dd4 	.word	0x08034dd4

08007c04 <HAL_LTDC_SetAlpha>:
  assert_param(IS_LTDC_ALPHA(Alpha));
 8007c04:	29ff      	cmp	r1, #255	; 0xff
{
 8007c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	4616      	mov	r6, r2
  assert_param(IS_LTDC_ALPHA(Alpha));
 8007c0e:	d904      	bls.n	8007c1a <HAL_LTDC_SetAlpha+0x16>
 8007c10:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8007c14:	4812      	ldr	r0, [pc, #72]	; (8007c60 <HAL_LTDC_SetAlpha+0x5c>)
 8007c16:	f7f9 ffc8 	bl	8001baa <assert_failed>
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007c1a:	2e01      	cmp	r6, #1
 8007c1c:	d904      	bls.n	8007c28 <HAL_LTDC_SetAlpha+0x24>
 8007c1e:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8007c22:	480f      	ldr	r0, [pc, #60]	; (8007c60 <HAL_LTDC_SetAlpha+0x5c>)
 8007c24:	f7f9 ffc1 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007c28:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007c2c:	2002      	movs	r0, #2
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d015      	beq.n	8007c5e <HAL_LTDC_SetAlpha+0x5a>
  pLayerCfg->Alpha = Alpha;
 8007c32:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007c34:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c36:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c3a:	4632      	mov	r2, r6
  pLayerCfg->Alpha = Alpha;
 8007c3c:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c3e:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 8007c40:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8007c44:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007c46:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8007c48:	64df      	str	r7, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c4a:	4421      	add	r1, r4
 8007c4c:	f7ff fc7e 	bl	800754c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c50:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007c52:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c54:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c56:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007c5a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c60:	08034dd4 	.word	0x08034dd4

08007c64 <HAL_LTDC_SetAddress>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007c64:	2a01      	cmp	r2, #1
{
 8007c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c68:	4604      	mov	r4, r0
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	4616      	mov	r6, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
 8007c6e:	d904      	bls.n	8007c7a <HAL_LTDC_SetAddress+0x16>
 8007c70:	f240 5111 	movw	r1, #1297	; 0x511
 8007c74:	480f      	ldr	r0, [pc, #60]	; (8007cb4 <HAL_LTDC_SetAddress+0x50>)
 8007c76:	f7f9 ff98 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007c7a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007c7e:	2002      	movs	r0, #2
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d015      	beq.n	8007cb0 <HAL_LTDC_SetAddress+0x4c>
  pLayerCfg->FBStartAdress = Address;
 8007c84:	2134      	movs	r1, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007c86:	2501      	movs	r5, #1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c88:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c8c:	4632      	mov	r2, r6
  pLayerCfg->FBStartAdress = Address;
 8007c8e:	4371      	muls	r1, r6
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c90:	4620      	mov	r0, r4
  __HAL_LOCK(hltdc);
 8007c92:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8007c96:	1863      	adds	r3, r4, r1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8007c98:	3138      	adds	r1, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 8007c9a:	65df      	str	r7, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c9c:	4421      	add	r1, r4
 8007c9e:	f7ff fc55 	bl	800754c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ca2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8007ca4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007ca6:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ca8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007cac:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8007cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	08034dd4 	.word	0x08034dd4

08007cb8 <HAL_LTDC_ProgramLineEvent>:
  assert_param(IS_LTDC_LIPOS(Line));
 8007cb8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
{
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	460d      	mov	r5, r1
  assert_param(IS_LTDC_LIPOS(Line));
 8007cc2:	d304      	bcc.n	8007cce <HAL_LTDC_ProgramLineEvent+0x16>
 8007cc4:	f240 5183 	movw	r1, #1411	; 0x583
 8007cc8:	480d      	ldr	r0, [pc, #52]	; (8007d00 <HAL_LTDC_ProgramLineEvent+0x48>)
 8007cca:	f7f9 ff6e 	bl	8001baa <assert_failed>
  __HAL_LOCK(hltdc);
 8007cce:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d012      	beq.n	8007cfe <HAL_LTDC_ProgramLineEvent+0x46>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007cd8:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007cda:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007cde:	2000      	movs	r0, #0
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce2:	f022 0201 	bic.w	r2, r2, #1
 8007ce6:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8007ce8:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <HAL_LTDC_ProgramLineEvent+0x4c>)
 8007cea:	6415      	str	r5, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cf4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
 8007cf6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cfa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	08034dd4 	.word	0x08034dd4
 8007d04:	40016800 	.word	0x40016800

08007d08 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d08:	4a02      	ldr	r2, [pc, #8]	; (8007d14 <HAL_PWR_EnableBkUpAccess+0xc>)
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	4770      	bx	lr
 8007d14:	40007000 	.word	0x40007000

08007d18 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8007d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d1e:	4c19      	ldr	r4, [pc, #100]	; (8007d84 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d36:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d38:	f7fd fb58 	bl	80053ec <HAL_GetTick>
 8007d3c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d3e:	6863      	ldr	r3, [r4, #4]
 8007d40:	03da      	lsls	r2, r3, #15
 8007d42:	d50c      	bpl.n	8007d5e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d4a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d4c:	f7fd fb4e 	bl	80053ec <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d50:	4c0c      	ldr	r4, [pc, #48]	; (8007d84 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8007d52:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d54:	6863      	ldr	r3, [r4, #4]
 8007d56:	039b      	lsls	r3, r3, #14
 8007d58:	d50a      	bpl.n	8007d70 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e006      	b.n	8007d6c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d5e:	f7fd fb45 	bl	80053ec <HAL_GetTick>
 8007d62:	1b40      	subs	r0, r0, r5
 8007d64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d68:	d9e9      	bls.n	8007d3e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8007d6a:	2003      	movs	r0, #3
}
 8007d6c:	b003      	add	sp, #12
 8007d6e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d70:	f7fd fb3c 	bl	80053ec <HAL_GetTick>
 8007d74:	1b40      	subs	r0, r0, r5
 8007d76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007d7a:	d9eb      	bls.n	8007d54 <HAL_PWREx_EnableOverDrive+0x3c>
 8007d7c:	e7f5      	b.n	8007d6a <HAL_PWREx_EnableOverDrive+0x52>
 8007d7e:	bf00      	nop
 8007d80:	40023800 	.word	0x40023800
 8007d84:	40007000 	.word	0x40007000

08007d88 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8007d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8c:	9d06      	ldr	r5, [sp, #24]
 8007d8e:	4604      	mov	r4, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	4616      	mov	r6, r2
 8007d94:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007d96:	6821      	ldr	r1, [r4, #0]
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	423a      	tst	r2, r7
 8007d9c:	bf14      	ite	ne
 8007d9e:	2201      	movne	r2, #1
 8007da0:	2200      	moveq	r2, #0
 8007da2:	42b2      	cmp	r2, r6
 8007da4:	d102      	bne.n	8007dac <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007da6:	2000      	movs	r0, #0
}
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007dac:	1c6b      	adds	r3, r5, #1
 8007dae:	d0f3      	beq.n	8007d98 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007db0:	b94d      	cbnz	r5, 8007dc6 <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007db2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007db4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007dba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6463      	str	r3, [r4, #68]	; 0x44
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8007dc6:	f7fd fb11 	bl	80053ec <HAL_GetTick>
 8007dca:	eba0 0008 	sub.w	r0, r0, r8
 8007dce:	4285      	cmp	r5, r0
 8007dd0:	d2e1      	bcs.n	8007d96 <QSPI_WaitFlagStateUntilTimeout+0xe>
 8007dd2:	e7ee      	b.n	8007db2 <QSPI_WaitFlagStateUntilTimeout+0x2a>

08007dd4 <HAL_QSPI_Init>:
{
 8007dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007dd8:	f7fd fb08 	bl	80053ec <HAL_GetTick>
 8007ddc:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	f000 80a2 	beq.w	8007f28 <HAL_QSPI_Init+0x154>
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	4b52      	ldr	r3, [pc, #328]	; (8007f30 <HAL_QSPI_Init+0x15c>)
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d004      	beq.n	8007df6 <HAL_QSPI_Init+0x22>
 8007dec:	f44f 7198 	mov.w	r1, #304	; 0x130
 8007df0:	4850      	ldr	r0, [pc, #320]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007df2:	f7f9 feda 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 8007df6:	6863      	ldr	r3, [r4, #4]
 8007df8:	2bff      	cmp	r3, #255	; 0xff
 8007dfa:	d904      	bls.n	8007e06 <HAL_QSPI_Init+0x32>
 8007dfc:	f240 1131 	movw	r1, #305	; 0x131
 8007e00:	484c      	ldr	r0, [pc, #304]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e02:	f7f9 fed2 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	2b1f      	cmp	r3, #31
 8007e0c:	d904      	bls.n	8007e18 <HAL_QSPI_Init+0x44>
 8007e0e:	f44f 7199 	mov.w	r1, #306	; 0x132
 8007e12:	4848      	ldr	r0, [pc, #288]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e14:	f7f9 fec9 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	f033 0310 	bics.w	r3, r3, #16
 8007e1e:	d004      	beq.n	8007e2a <HAL_QSPI_Init+0x56>
 8007e20:	f240 1133 	movw	r1, #307	; 0x133
 8007e24:	4843      	ldr	r0, [pc, #268]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e26:	f7f9 fec0 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	2b1f      	cmp	r3, #31
 8007e2e:	d904      	bls.n	8007e3a <HAL_QSPI_Init+0x66>
 8007e30:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007e34:	483f      	ldr	r0, [pc, #252]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e36:	f7f9 feb8 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 8007e3a:	6963      	ldr	r3, [r4, #20]
 8007e3c:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8007e40:	d007      	beq.n	8007e52 <HAL_QSPI_Init+0x7e>
 8007e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e46:	d004      	beq.n	8007e52 <HAL_QSPI_Init+0x7e>
 8007e48:	f240 1135 	movw	r1, #309	; 0x135
 8007e4c:	4839      	ldr	r0, [pc, #228]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e4e:	f7f9 feac 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 8007e52:	69a3      	ldr	r3, [r4, #24]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d904      	bls.n	8007e62 <HAL_QSPI_Init+0x8e>
 8007e58:	f44f 719b 	mov.w	r1, #310	; 0x136
 8007e5c:	4835      	ldr	r0, [pc, #212]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e5e:	f7f9 fea4 	bl	8001baa <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 8007e62:	6a23      	ldr	r3, [r4, #32]
 8007e64:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8007e68:	d004      	beq.n	8007e74 <HAL_QSPI_Init+0xa0>
 8007e6a:	f240 1137 	movw	r1, #311	; 0x137
 8007e6e:	4831      	ldr	r0, [pc, #196]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e70:	f7f9 fe9b 	bl	8001baa <assert_failed>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 8007e74:	6a23      	ldr	r3, [r4, #32]
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	d008      	beq.n	8007e8c <HAL_QSPI_Init+0xb8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 8007e7a:	69e3      	ldr	r3, [r4, #28]
 8007e7c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007e80:	d004      	beq.n	8007e8c <HAL_QSPI_Init+0xb8>
 8007e82:	f240 113b 	movw	r1, #315	; 0x13b
 8007e86:	482b      	ldr	r0, [pc, #172]	; (8007f34 <HAL_QSPI_Init+0x160>)
 8007e88:	f7f9 fe8f 	bl	8001baa <assert_failed>
  __HAL_LOCK(hqspi);
 8007e8c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d04b      	beq.n	8007f2c <HAL_QSPI_Init+0x158>
 8007e94:	2301      	movs	r3, #1
 8007e96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007e9a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007e9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ea2:	b93b      	cbnz	r3, 8007eb4 <HAL_QSPI_Init+0xe0>
    hqspi->Lock = HAL_UNLOCKED;
 8007ea4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7f9 fe9b 	bl	8001be4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8007eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8007eb2:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007eb4:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007eb6:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007eb8:	68a2      	ldr	r2, [r4, #8]
 8007eba:	680b      	ldr	r3, [r1, #0]
 8007ebc:	3a01      	subs	r2, #1
 8007ebe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ec6:	2200      	movs	r2, #0
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8007ec8:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007eca:	2120      	movs	r1, #32
 8007ecc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	f7ff ff59 	bl	8007d88 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8007ed6:	bb10      	cbnz	r0, 8007f1e <HAL_QSPI_Init+0x14a>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007ed8:	6822      	ldr	r2, [r4, #0]
 8007eda:	69e5      	ldr	r5, [r4, #28]
 8007edc:	68e3      	ldr	r3, [r4, #12]
 8007ede:	6811      	ldr	r1, [r2, #0]
 8007ee0:	432b      	orrs	r3, r5
 8007ee2:	6a25      	ldr	r5, [r4, #32]
 8007ee4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007ee8:	432b      	orrs	r3, r5
 8007eea:	6865      	ldr	r5, [r4, #4]
 8007eec:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8007ef0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8007ef4:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007ef6:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8007ef8:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007efa:	6963      	ldr	r3, [r4, #20]
 8007efc:	6855      	ldr	r5, [r2, #4]
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6921      	ldr	r1, [r4, #16]
 8007f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007f06:	490c      	ldr	r1, [pc, #48]	; (8007f38 <HAL_QSPI_Init+0x164>)
 8007f08:	4029      	ands	r1, r5
 8007f0a:	430b      	orrs	r3, r1
 8007f0c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8007f16:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007f18:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8007f1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007f24:	b003      	add	sp, #12
 8007f26:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e7fb      	b.n	8007f24 <HAL_QSPI_Init+0x150>
  __HAL_LOCK(hqspi);
 8007f2c:	2002      	movs	r0, #2
 8007f2e:	e7f9      	b.n	8007f24 <HAL_QSPI_Init+0x150>
 8007f30:	a0001000 	.word	0xa0001000
 8007f34:	08034e13 	.word	0x08034e13
 8007f38:	ffe0f8fe 	.word	0xffe0f8fe

08007f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f40:	4604      	mov	r4, r0
 8007f42:	b918      	cbnz	r0, 8007f4c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8007f44:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8007f46:	b002      	add	sp, #8
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007f4c:	6803      	ldr	r3, [r0, #0]
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	d904      	bls.n	8007f5c <HAL_RCC_OscConfig+0x20>
 8007f52:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8007f56:	48a5      	ldr	r0, [pc, #660]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 8007f58:	f7f9 fe27 	bl	8001baa <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07d8      	lsls	r0, r3, #31
 8007f60:	d418      	bmi.n	8007f94 <HAL_RCC_OscConfig+0x58>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	0799      	lsls	r1, r3, #30
 8007f66:	d472      	bmi.n	800804e <HAL_RCC_OscConfig+0x112>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	0719      	lsls	r1, r3, #28
 8007f6c:	f100 80c8 	bmi.w	8008100 <HAL_RCC_OscConfig+0x1c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	075a      	lsls	r2, r3, #29
 8007f74:	f100 80f1 	bmi.w	800815a <HAL_RCC_OscConfig+0x21e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007f78:	69a3      	ldr	r3, [r4, #24]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d904      	bls.n	8007f88 <HAL_RCC_OscConfig+0x4c>
 8007f7e:	f240 214b 	movw	r1, #587	; 0x24b
 8007f82:	489a      	ldr	r0, [pc, #616]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 8007f84:	f7f9 fe11 	bl	8001baa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f88:	69a2      	ldr	r2, [r4, #24]
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	f040 8160 	bne.w	8008250 <HAL_RCC_OscConfig+0x314>
  return HAL_OK;
 8007f90:	2000      	movs	r0, #0
 8007f92:	e7d8      	b.n	8007f46 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8007f9a:	d007      	beq.n	8007fac <HAL_RCC_OscConfig+0x70>
 8007f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fa0:	d004      	beq.n	8007fac <HAL_RCC_OscConfig+0x70>
 8007fa2:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8007fa6:	4891      	ldr	r0, [pc, #580]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 8007fa8:	f7f9 fdff 	bl	8001baa <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007fac:	4b90      	ldr	r3, [pc, #576]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	f002 020c 	and.w	r2, r2, #12
 8007fb4:	2a04      	cmp	r2, #4
 8007fb6:	d007      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	f002 020c 	and.w	r2, r2, #12
 8007fbe:	2a08      	cmp	r2, #8
 8007fc0:	d10a      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x9c>
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	025a      	lsls	r2, r3, #9
 8007fc6:	d507      	bpl.n	8007fd8 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc8:	4b89      	ldr	r3, [pc, #548]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	039b      	lsls	r3, r3, #14
 8007fce:	d5c8      	bpl.n	8007f62 <HAL_RCC_OscConfig+0x26>
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1c5      	bne.n	8007f62 <HAL_RCC_OscConfig+0x26>
 8007fd6:	e7b5      	b.n	8007f44 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	4d85      	ldr	r5, [pc, #532]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8007fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe0:	d111      	bne.n	8008006 <HAL_RCC_OscConfig+0xca>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007fea:	f7fd f9ff 	bl	80053ec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fee:	4d80      	ldr	r5, [pc, #512]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 8007ff0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff2:	682b      	ldr	r3, [r5, #0]
 8007ff4:	039f      	lsls	r7, r3, #14
 8007ff6:	d4b4      	bmi.n	8007f62 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ff8:	f7fd f9f8 	bl	80053ec <HAL_GetTick>
 8007ffc:	1b80      	subs	r0, r0, r6
 8007ffe:	2864      	cmp	r0, #100	; 0x64
 8008000:	d9f7      	bls.n	8007ff2 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8008002:	2003      	movs	r0, #3
 8008004:	e79f      	b.n	8007f46 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008006:	b99b      	cbnz	r3, 8008030 <HAL_RCC_OscConfig+0xf4>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800800e:	602b      	str	r3, [r5, #0]
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008016:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008018:	f7fd f9e8 	bl	80053ec <HAL_GetTick>
 800801c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	0398      	lsls	r0, r3, #14
 8008022:	d59e      	bpl.n	8007f62 <HAL_RCC_OscConfig+0x26>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008024:	f7fd f9e2 	bl	80053ec <HAL_GetTick>
 8008028:	1b80      	subs	r0, r0, r6
 800802a:	2864      	cmp	r0, #100	; 0x64
 800802c:	d9f7      	bls.n	800801e <HAL_RCC_OscConfig+0xe2>
 800802e:	e7e8      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	d103      	bne.n	8008040 <HAL_RCC_OscConfig+0x104>
 8008038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800803c:	602b      	str	r3, [r5, #0]
 800803e:	e7d0      	b.n	8007fe2 <HAL_RCC_OscConfig+0xa6>
 8008040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008044:	602b      	str	r3, [r5, #0]
 8008046:	682b      	ldr	r3, [r5, #0]
 8008048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800804c:	e7cc      	b.n	8007fe8 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800804e:	68e3      	ldr	r3, [r4, #12]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d904      	bls.n	800805e <HAL_RCC_OscConfig+0x122>
 8008054:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8008058:	4864      	ldr	r0, [pc, #400]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 800805a:	f7f9 fda6 	bl	8001baa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	2b1f      	cmp	r3, #31
 8008062:	d904      	bls.n	800806e <HAL_RCC_OscConfig+0x132>
 8008064:	f240 119d 	movw	r1, #413	; 0x19d
 8008068:	4860      	ldr	r0, [pc, #384]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 800806a:	f7f9 fd9e 	bl	8001baa <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800806e:	4b60      	ldr	r3, [pc, #384]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	f012 0f0c 	tst.w	r2, #12
 8008076:	d007      	beq.n	8008088 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	f002 020c 	and.w	r2, r2, #12
 800807e:	2a08      	cmp	r2, #8
 8008080:	d112      	bne.n	80080a8 <HAL_RCC_OscConfig+0x16c>
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	0259      	lsls	r1, r3, #9
 8008086:	d40f      	bmi.n	80080a8 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008088:	4b59      	ldr	r3, [pc, #356]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	0792      	lsls	r2, r2, #30
 800808e:	d503      	bpl.n	8008098 <HAL_RCC_OscConfig+0x15c>
 8008090:	68e2      	ldr	r2, [r4, #12]
 8008092:	2a01      	cmp	r2, #1
 8008094:	f47f af56 	bne.w	8007f44 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	6921      	ldr	r1, [r4, #16]
 800809c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80080a0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80080a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a6:	e75f      	b.n	8007f68 <HAL_RCC_OscConfig+0x2c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080a8:	68e3      	ldr	r3, [r4, #12]
 80080aa:	4d51      	ldr	r5, [pc, #324]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 80080ac:	b1bb      	cbz	r3, 80080de <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 80080ae:	682b      	ldr	r3, [r5, #0]
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080b6:	f7fd f999 	bl	80053ec <HAL_GetTick>
 80080ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	079f      	lsls	r7, r3, #30
 80080c0:	d507      	bpl.n	80080d2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	e74a      	b.n	8007f68 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d2:	f7fd f98b 	bl	80053ec <HAL_GetTick>
 80080d6:	1b80      	subs	r0, r0, r6
 80080d8:	2802      	cmp	r0, #2
 80080da:	d9ef      	bls.n	80080bc <HAL_RCC_OscConfig+0x180>
 80080dc:	e791      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 80080de:	682b      	ldr	r3, [r5, #0]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080e6:	f7fd f981 	bl	80053ec <HAL_GetTick>
 80080ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	0798      	lsls	r0, r3, #30
 80080f0:	f57f af3a 	bpl.w	8007f68 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080f4:	f7fd f97a 	bl	80053ec <HAL_GetTick>
 80080f8:	1b80      	subs	r0, r0, r6
 80080fa:	2802      	cmp	r0, #2
 80080fc:	d9f6      	bls.n	80080ec <HAL_RCC_OscConfig+0x1b0>
 80080fe:	e780      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008100:	6963      	ldr	r3, [r4, #20]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d904      	bls.n	8008110 <HAL_RCC_OscConfig+0x1d4>
 8008106:	f240 11dd 	movw	r1, #477	; 0x1dd
 800810a:	4838      	ldr	r0, [pc, #224]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 800810c:	f7f9 fd4d 	bl	8001baa <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008110:	6963      	ldr	r3, [r4, #20]
 8008112:	4d37      	ldr	r5, [pc, #220]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8008114:	b183      	cbz	r3, 8008138 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8008116:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008118:	f043 0301 	orr.w	r3, r3, #1
 800811c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800811e:	f7fd f965 	bl	80053ec <HAL_GetTick>
 8008122:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008124:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008126:	079b      	lsls	r3, r3, #30
 8008128:	f53f af22 	bmi.w	8007f70 <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800812c:	f7fd f95e 	bl	80053ec <HAL_GetTick>
 8008130:	1b80      	subs	r0, r0, r6
 8008132:	2802      	cmp	r0, #2
 8008134:	d9f6      	bls.n	8008124 <HAL_RCC_OscConfig+0x1e8>
 8008136:	e764      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8008138:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800813a:	f023 0301 	bic.w	r3, r3, #1
 800813e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008140:	f7fd f954 	bl	80053ec <HAL_GetTick>
 8008144:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008146:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008148:	079f      	lsls	r7, r3, #30
 800814a:	f57f af11 	bpl.w	8007f70 <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800814e:	f7fd f94d 	bl	80053ec <HAL_GetTick>
 8008152:	1b80      	subs	r0, r0, r6
 8008154:	2802      	cmp	r0, #2
 8008156:	d9f6      	bls.n	8008146 <HAL_RCC_OscConfig+0x20a>
 8008158:	e753      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d906      	bls.n	800816e <HAL_RCC_OscConfig+0x232>
 8008160:	2b05      	cmp	r3, #5
 8008162:	d004      	beq.n	800816e <HAL_RCC_OscConfig+0x232>
 8008164:	f240 2107 	movw	r1, #519	; 0x207
 8008168:	4820      	ldr	r0, [pc, #128]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 800816a:	f7f9 fd1e 	bl	8001baa <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800816e:	4b20      	ldr	r3, [pc, #128]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8008170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008172:	00d5      	lsls	r5, r2, #3
 8008174:	d427      	bmi.n	80081c6 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8008178:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800817a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800817e:	641a      	str	r2, [r3, #64]	; 0x40
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800818a:	4d1a      	ldr	r5, [pc, #104]	; (80081f4 <HAL_RCC_OscConfig+0x2b8>)
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	05d8      	lsls	r0, r3, #23
 8008190:	d51b      	bpl.n	80081ca <HAL_RCC_OscConfig+0x28e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008192:	68a3      	ldr	r3, [r4, #8]
 8008194:	4d16      	ldr	r5, [pc, #88]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8008196:	2b01      	cmp	r3, #1
 8008198:	d12e      	bne.n	80081f8 <HAL_RCC_OscConfig+0x2bc>
 800819a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081a2:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80081a6:	f7fd f921 	bl	80053ec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081aa:	4f11      	ldr	r7, [pc, #68]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
      tickstart = HAL_GetTick();
 80081ac:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081b0:	079a      	lsls	r2, r3, #30
 80081b2:	d546      	bpl.n	8008242 <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	f43f aedf 	beq.w	8007f78 <HAL_RCC_OscConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80081ba:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 80081bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80081be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081c2:	6413      	str	r3, [r2, #64]	; 0x40
 80081c4:	e6d8      	b.n	8007f78 <HAL_RCC_OscConfig+0x3c>
  FlagStatus pwrclkchanged = RESET;
 80081c6:	2600      	movs	r6, #0
 80081c8:	e7df      	b.n	800818a <HAL_RCC_OscConfig+0x24e>
      PWR->CR1 |= PWR_CR1_DBP;
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80081d2:	f7fd f90b 	bl	80053ec <HAL_GetTick>
 80081d6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	05d9      	lsls	r1, r3, #23
 80081dc:	d4d9      	bmi.n	8008192 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081de:	f7fd f905 	bl	80053ec <HAL_GetTick>
 80081e2:	1bc0      	subs	r0, r0, r7
 80081e4:	2864      	cmp	r0, #100	; 0x64
 80081e6:	d9f7      	bls.n	80081d8 <HAL_RCC_OscConfig+0x29c>
 80081e8:	e70b      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
 80081ea:	bf00      	nop
 80081ec:	08034e52 	.word	0x08034e52
 80081f0:	40023800 	.word	0x40023800
 80081f4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081f8:	b9ab      	cbnz	r3, 8008226 <HAL_RCC_OscConfig+0x2ea>
 80081fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	672b      	str	r3, [r5, #112]	; 0x70
 8008206:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008208:	f023 0304 	bic.w	r3, r3, #4
 800820c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800820e:	f7fd f8ed 	bl	80053ec <HAL_GetTick>
 8008212:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008214:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008216:	079b      	lsls	r3, r3, #30
 8008218:	d5cc      	bpl.n	80081b4 <HAL_RCC_OscConfig+0x278>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f7fd f8e7 	bl	80053ec <HAL_GetTick>
 800821e:	1bc0      	subs	r0, r0, r7
 8008220:	4540      	cmp	r0, r8
 8008222:	d9f7      	bls.n	8008214 <HAL_RCC_OscConfig+0x2d8>
 8008224:	e6ed      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008226:	2b05      	cmp	r3, #5
 8008228:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800822a:	d103      	bne.n	8008234 <HAL_RCC_OscConfig+0x2f8>
 800822c:	f043 0304 	orr.w	r3, r3, #4
 8008230:	672b      	str	r3, [r5, #112]	; 0x70
 8008232:	e7b2      	b.n	800819a <HAL_RCC_OscConfig+0x25e>
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	672b      	str	r3, [r5, #112]	; 0x70
 800823a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800823c:	f023 0304 	bic.w	r3, r3, #4
 8008240:	e7ae      	b.n	80081a0 <HAL_RCC_OscConfig+0x264>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fd f8d3 	bl	80053ec <HAL_GetTick>
 8008246:	eba0 0008 	sub.w	r0, r0, r8
 800824a:	42a8      	cmp	r0, r5
 800824c:	d9af      	bls.n	80081ae <HAL_RCC_OscConfig+0x272>
 800824e:	e6d8      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008250:	4d3f      	ldr	r5, [pc, #252]	; (8008350 <HAL_RCC_OscConfig+0x414>)
 8008252:	68ab      	ldr	r3, [r5, #8]
 8008254:	f003 030c 	and.w	r3, r3, #12
 8008258:	2b08      	cmp	r3, #8
 800825a:	f43f ae73 	beq.w	8007f44 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800825e:	2a02      	cmp	r2, #2
 8008260:	d165      	bne.n	800832e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008268:	d004      	beq.n	8008274 <HAL_RCC_OscConfig+0x338>
 800826a:	f44f 7115 	mov.w	r1, #596	; 0x254
 800826e:	4839      	ldr	r0, [pc, #228]	; (8008354 <HAL_RCC_OscConfig+0x418>)
 8008270:	f7f9 fc9b 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008274:	6a23      	ldr	r3, [r4, #32]
 8008276:	3b02      	subs	r3, #2
 8008278:	2b3d      	cmp	r3, #61	; 0x3d
 800827a:	d904      	bls.n	8008286 <HAL_RCC_OscConfig+0x34a>
 800827c:	f240 2155 	movw	r1, #597	; 0x255
 8008280:	4834      	ldr	r0, [pc, #208]	; (8008354 <HAL_RCC_OscConfig+0x418>)
 8008282:	f7f9 fc92 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008288:	3b32      	subs	r3, #50	; 0x32
 800828a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800828e:	d904      	bls.n	800829a <HAL_RCC_OscConfig+0x35e>
 8008290:	f240 2156 	movw	r1, #598	; 0x256
 8008294:	482f      	ldr	r0, [pc, #188]	; (8008354 <HAL_RCC_OscConfig+0x418>)
 8008296:	f7f9 fc88 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800829a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800829c:	2a08      	cmp	r2, #8
 800829e:	d804      	bhi.n	80082aa <HAL_RCC_OscConfig+0x36e>
 80082a0:	f44f 73aa 	mov.w	r3, #340	; 0x154
 80082a4:	40d3      	lsrs	r3, r2
 80082a6:	07d8      	lsls	r0, r3, #31
 80082a8:	d404      	bmi.n	80082b4 <HAL_RCC_OscConfig+0x378>
 80082aa:	f240 2157 	movw	r1, #599	; 0x257
 80082ae:	4829      	ldr	r0, [pc, #164]	; (8008354 <HAL_RCC_OscConfig+0x418>)
 80082b0:	f7f9 fc7b 	bl	8001baa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80082b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082b6:	3b02      	subs	r3, #2
 80082b8:	2b0d      	cmp	r3, #13
 80082ba:	d904      	bls.n	80082c6 <HAL_RCC_OscConfig+0x38a>
 80082bc:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082c0:	4824      	ldr	r0, [pc, #144]	; (8008354 <HAL_RCC_OscConfig+0x418>)
 80082c2:	f7f9 fc72 	bl	8001baa <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80082c6:	4d22      	ldr	r5, [pc, #136]	; (8008350 <HAL_RCC_OscConfig+0x414>)
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082d0:	f7fd f88c 	bl	80053ec <HAL_GetTick>
 80082d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082d6:	682b      	ldr	r3, [r5, #0]
 80082d8:	0199      	lsls	r1, r3, #6
 80082da:	d422      	bmi.n	8008322 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082dc:	6a22      	ldr	r2, [r4, #32]
 80082de:	69e3      	ldr	r3, [r4, #28]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80082ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80082ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80082f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082f4:	4c16      	ldr	r4, [pc, #88]	; (8008350 <HAL_RCC_OscConfig+0x414>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f6:	0852      	lsrs	r2, r2, #1
 80082f8:	3a01      	subs	r2, #1
 80082fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008306:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008308:	f7fd f870 	bl	80053ec <HAL_GetTick>
 800830c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	019a      	lsls	r2, r3, #6
 8008312:	f53f ae3d 	bmi.w	8007f90 <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008316:	f7fd f869 	bl	80053ec <HAL_GetTick>
 800831a:	1b40      	subs	r0, r0, r5
 800831c:	2802      	cmp	r0, #2
 800831e:	d9f6      	bls.n	800830e <HAL_RCC_OscConfig+0x3d2>
 8008320:	e66f      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008322:	f7fd f863 	bl	80053ec <HAL_GetTick>
 8008326:	1b80      	subs	r0, r0, r6
 8008328:	2802      	cmp	r0, #2
 800832a:	d9d4      	bls.n	80082d6 <HAL_RCC_OscConfig+0x39a>
 800832c:	e669      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008334:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008336:	f7fd f859 	bl	80053ec <HAL_GetTick>
 800833a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	019b      	lsls	r3, r3, #6
 8008340:	f57f ae26 	bpl.w	8007f90 <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008344:	f7fd f852 	bl	80053ec <HAL_GetTick>
 8008348:	1b00      	subs	r0, r0, r4
 800834a:	2802      	cmp	r0, #2
 800834c:	d9f6      	bls.n	800833c <HAL_RCC_OscConfig+0x400>
 800834e:	e658      	b.n	8008002 <HAL_RCC_OscConfig+0xc6>
 8008350:	40023800 	.word	0x40023800
 8008354:	08034e52 	.word	0x08034e52

08008358 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008358:	4913      	ldr	r1, [pc, #76]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800835a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800835c:	688b      	ldr	r3, [r1, #8]
 800835e:	f003 030c 	and.w	r3, r3, #12
 8008362:	2b04      	cmp	r3, #4
 8008364:	d003      	beq.n	800836e <HAL_RCC_GetSysClockFreq+0x16>
 8008366:	2b08      	cmp	r3, #8
 8008368:	d003      	beq.n	8008372 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800836a:	4810      	ldr	r0, [pc, #64]	; (80083ac <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800836c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800836e:	4810      	ldr	r0, [pc, #64]	; (80083b0 <HAL_RCC_GetSysClockFreq+0x58>)
 8008370:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008372:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008374:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008376:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008378:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800837c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008380:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008384:	bf1a      	itte	ne
 8008386:	480a      	ldrne	r0, [pc, #40]	; (80083b0 <HAL_RCC_GetSysClockFreq+0x58>)
 8008388:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800838a:	4808      	ldreq	r0, [pc, #32]	; (80083ac <HAL_RCC_GetSysClockFreq+0x54>)
 800838c:	fba1 0100 	umull	r0, r1, r1, r0
 8008390:	f7f8 fc76 	bl	8000c80 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8008394:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800839c:	3301      	adds	r3, #1
 800839e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80083a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80083a4:	bd08      	pop	{r3, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800
 80083ac:	00f42400 	.word	0x00f42400
 80083b0:	017d7840 	.word	0x017d7840

080083b4 <HAL_RCC_ClockConfig>:
{
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80083ba:	4604      	mov	r4, r0
 80083bc:	b910      	cbnz	r0, 80083c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80083be:	2001      	movs	r0, #1
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80083c4:	6803      	ldr	r3, [r0, #0]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	2b0e      	cmp	r3, #14
 80083ca:	d904      	bls.n	80083d6 <HAL_RCC_ClockConfig+0x22>
 80083cc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80083d0:	486f      	ldr	r0, [pc, #444]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 80083d2:	f7f9 fbea 	bl	8001baa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80083d6:	2d0f      	cmp	r5, #15
 80083d8:	d904      	bls.n	80083e4 <HAL_RCC_ClockConfig+0x30>
 80083da:	f240 21cb 	movw	r1, #715	; 0x2cb
 80083de:	486c      	ldr	r0, [pc, #432]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 80083e0:	f7f9 fbe3 	bl	8001baa <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083e4:	4a6b      	ldr	r2, [pc, #428]	; (8008594 <HAL_RCC_ClockConfig+0x1e0>)
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	429d      	cmp	r5, r3
 80083ee:	d83d      	bhi.n	800846c <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	0796      	lsls	r6, r2, #30
 80083f4:	d445      	bmi.n	8008482 <HAL_RCC_ClockConfig+0xce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	07d9      	lsls	r1, r3, #31
 80083fa:	d46f      	bmi.n	80084dc <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083fc:	4a65      	ldr	r2, [pc, #404]	; (8008594 <HAL_RCC_ClockConfig+0x1e0>)
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	f003 030f 	and.w	r3, r3, #15
 8008404:	429d      	cmp	r5, r3
 8008406:	f0c0 809d 	bcc.w	8008544 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	075a      	lsls	r2, r3, #29
 800840e:	f100 80a5 	bmi.w	800855c <HAL_RCC_ClockConfig+0x1a8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	071b      	lsls	r3, r3, #28
 8008416:	d518      	bpl.n	800844a <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800841e:	d00c      	beq.n	800843a <HAL_RCC_ClockConfig+0x86>
 8008420:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008424:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8008428:	d007      	beq.n	800843a <HAL_RCC_ClockConfig+0x86>
 800842a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800842e:	d004      	beq.n	800843a <HAL_RCC_ClockConfig+0x86>
 8008430:	f240 313a 	movw	r1, #826	; 0x33a
 8008434:	4856      	ldr	r0, [pc, #344]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 8008436:	f7f9 fbb8 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800843a:	4a57      	ldr	r2, [pc, #348]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 800843c:	6921      	ldr	r1, [r4, #16]
 800843e:	6893      	ldr	r3, [r2, #8]
 8008440:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008444:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008448:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800844a:	f7ff ff85 	bl	8008358 <HAL_RCC_GetSysClockFreq>
 800844e:	4b52      	ldr	r3, [pc, #328]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 8008450:	4a52      	ldr	r2, [pc, #328]	; (800859c <HAL_RCC_ClockConfig+0x1e8>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008458:	5cd3      	ldrb	r3, [r2, r3]
 800845a:	40d8      	lsrs	r0, r3
 800845c:	4b50      	ldr	r3, [pc, #320]	; (80085a0 <HAL_RCC_ClockConfig+0x1ec>)
 800845e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008460:	2000      	movs	r0, #0
 8008462:	f7f9 fe7b 	bl	800215c <HAL_InitTick>
  return HAL_OK;
 8008466:	2000      	movs	r0, #0
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	f023 030f 	bic.w	r3, r3, #15
 8008472:	432b      	orrs	r3, r5
 8008474:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	429d      	cmp	r5, r3
 800847e:	d19e      	bne.n	80083be <HAL_RCC_ClockConfig+0xa>
 8008480:	e7b6      	b.n	80083f0 <HAL_RCC_ClockConfig+0x3c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008482:	f012 0f04 	tst.w	r2, #4
 8008486:	4b44      	ldr	r3, [pc, #272]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 8008488:	d003      	beq.n	8008492 <HAL_RCC_ClockConfig+0xde>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800848a:	6899      	ldr	r1, [r3, #8]
 800848c:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8008490:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008492:	0710      	lsls	r0, r2, #28
 8008494:	d503      	bpl.n	800849e <HAL_RCC_ClockConfig+0xea>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800849c:	609a      	str	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80084a4:	d012      	beq.n	80084cc <HAL_RCC_ClockConfig+0x118>
 80084a6:	f023 0220 	bic.w	r2, r3, #32
 80084aa:	2a90      	cmp	r2, #144	; 0x90
 80084ac:	d00e      	beq.n	80084cc <HAL_RCC_ClockConfig+0x118>
 80084ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80084b2:	2aa0      	cmp	r2, #160	; 0xa0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCC_ClockConfig+0x118>
 80084b6:	f023 0210 	bic.w	r2, r3, #16
 80084ba:	2ac0      	cmp	r2, #192	; 0xc0
 80084bc:	d006      	beq.n	80084cc <HAL_RCC_ClockConfig+0x118>
 80084be:	2bf0      	cmp	r3, #240	; 0xf0
 80084c0:	d004      	beq.n	80084cc <HAL_RCC_ClockConfig+0x118>
 80084c2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80084c6:	4832      	ldr	r0, [pc, #200]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 80084c8:	f7f9 fb6f 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084cc:	4a32      	ldr	r2, [pc, #200]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 80084ce:	68a1      	ldr	r1, [r4, #8]
 80084d0:	6893      	ldr	r3, [r2, #8]
 80084d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d6:	430b      	orrs	r3, r1
 80084d8:	6093      	str	r3, [r2, #8]
 80084da:	e78c      	b.n	80083f6 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d904      	bls.n	80084ec <HAL_RCC_ClockConfig+0x138>
 80084e2:	f240 21f6 	movw	r1, #758	; 0x2f6
 80084e6:	482a      	ldr	r0, [pc, #168]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 80084e8:	f7f9 fb5f 	bl	8001baa <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ec:	6861      	ldr	r1, [r4, #4]
 80084ee:	4b2a      	ldr	r3, [pc, #168]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 80084f0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f2:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f4:	d11e      	bne.n	8008534 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084fa:	f43f af60 	beq.w	80083be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084fe:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008500:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008504:	4e24      	ldr	r6, [pc, #144]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008506:	f022 0203 	bic.w	r2, r2, #3
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800850e:	f7fc ff6d 	bl	80053ec <HAL_GetTick>
 8008512:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008514:	68b3      	ldr	r3, [r6, #8]
 8008516:	6862      	ldr	r2, [r4, #4]
 8008518:	f003 030c 	and.w	r3, r3, #12
 800851c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008520:	f43f af6c 	beq.w	80083fc <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008524:	f7fc ff62 	bl	80053ec <HAL_GetTick>
 8008528:	1bc0      	subs	r0, r0, r7
 800852a:	4540      	cmp	r0, r8
 800852c:	d9f2      	bls.n	8008514 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800852e:	2003      	movs	r0, #3
}
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008534:	2902      	cmp	r1, #2
 8008536:	d102      	bne.n	800853e <HAL_RCC_ClockConfig+0x18a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008538:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800853c:	e7dd      	b.n	80084fa <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853e:	f012 0f02 	tst.w	r2, #2
 8008542:	e7da      	b.n	80084fa <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	f023 030f 	bic.w	r3, r3, #15
 800854a:	432b      	orrs	r3, r5
 800854c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800854e:	6813      	ldr	r3, [r2, #0]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	429d      	cmp	r5, r3
 8008556:	f47f af32 	bne.w	80083be <HAL_RCC_ClockConfig+0xa>
 800855a:	e756      	b.n	800840a <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800855c:	68e3      	ldr	r3, [r4, #12]
 800855e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8008562:	d00c      	beq.n	800857e <HAL_RCC_ClockConfig+0x1ca>
 8008564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008568:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 800856c:	d007      	beq.n	800857e <HAL_RCC_ClockConfig+0x1ca>
 800856e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008572:	d004      	beq.n	800857e <HAL_RCC_ClockConfig+0x1ca>
 8008574:	f240 3133 	movw	r1, #819	; 0x333
 8008578:	4805      	ldr	r0, [pc, #20]	; (8008590 <HAL_RCC_ClockConfig+0x1dc>)
 800857a:	f7f9 fb16 	bl	8001baa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800857e:	4a06      	ldr	r2, [pc, #24]	; (8008598 <HAL_RCC_ClockConfig+0x1e4>)
 8008580:	68e1      	ldr	r1, [r4, #12]
 8008582:	6893      	ldr	r3, [r2, #8]
 8008584:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008588:	430b      	orrs	r3, r1
 800858a:	6093      	str	r3, [r2, #8]
 800858c:	e741      	b.n	8008412 <HAL_RCC_ClockConfig+0x5e>
 800858e:	bf00      	nop
 8008590:	08034e52 	.word	0x08034e52
 8008594:	40023c00 	.word	0x40023c00
 8008598:	40023800 	.word	0x40023800
 800859c:	08034b05 	.word	0x08034b05
 80085a0:	200000cc 	.word	0x200000cc

080085a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80085a6:	4a05      	ldr	r2, [pc, #20]	; (80085bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80085ae:	5cd3      	ldrb	r3, [r2, r3]
 80085b0:	4a03      	ldr	r2, [pc, #12]	; (80085c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80085b2:	6810      	ldr	r0, [r2, #0]
}
 80085b4:	40d8      	lsrs	r0, r3
 80085b6:	4770      	bx	lr
 80085b8:	40023800 	.word	0x40023800
 80085bc:	08034b15 	.word	0x08034b15
 80085c0:	200000cc 	.word	0x200000cc

080085c4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085c4:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80085c6:	4a05      	ldr	r2, [pc, #20]	; (80085dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80085ce:	5cd3      	ldrb	r3, [r2, r3]
 80085d0:	4a03      	ldr	r2, [pc, #12]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80085d2:	6810      	ldr	r0, [r2, #0]
}
 80085d4:	40d8      	lsrs	r0, r3
 80085d6:	4770      	bx	lr
 80085d8:	40023800 	.word	0x40023800
 80085dc:	08034b15 	.word	0x08034b15
 80085e0:	200000cc 	.word	0x200000cc

080085e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085e4:	230f      	movs	r3, #15
 80085e6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_RCC_GetClockConfig+0x34>)
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	f002 0203 	and.w	r2, r2, #3
 80085f0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80085f8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8008600:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	08db      	lsrs	r3, r3, #3
 8008606:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800860a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800860c:	4b03      	ldr	r3, [pc, #12]	; (800861c <HAL_RCC_GetClockConfig+0x38>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	600b      	str	r3, [r1, #0]
 8008616:	4770      	bx	lr
 8008618:	40023800 	.word	0x40023800
 800861c:	40023c00 	.word	0x40023c00

08008620 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008620:	6803      	ldr	r3, [r0, #0]
 8008622:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008626:	f023 0306 	bic.w	r3, r3, #6
{
 800862a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800862e:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8008630:	b91b      	cbnz	r3, 800863a <HAL_RCCEx_PeriphCLKConfig+0x1a>
 8008632:	2174      	movs	r1, #116	; 0x74
 8008634:	48b3      	ldr	r0, [pc, #716]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008636:	f7f9 fab8 	bl	8001baa <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800863a:	6826      	ldr	r6, [r4, #0]
 800863c:	f016 0601 	ands.w	r6, r6, #1
 8008640:	d013      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8008642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008644:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008648:	d003      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800864a:	217a      	movs	r1, #122	; 0x7a
 800864c:	48ad      	ldr	r0, [pc, #692]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800864e:	f7f9 faac 	bl	8001baa <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008652:	4bad      	ldr	r3, [pc, #692]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800865a:	609a      	str	r2, [r3, #8]
 800865c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	4332      	orrs	r2, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008662:	fab6 f686 	clz	r6, r6
 8008666:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008668:	609a      	str	r2, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800866a:	6825      	ldr	r5, [r4, #0]
 800866c:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8008670:	d01d      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8008672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008674:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 8008678:	d006      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800867a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800867e:	d003      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008680:	218a      	movs	r1, #138	; 0x8a
 8008682:	48a0      	ldr	r0, [pc, #640]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008684:	f7f9 fa91 	bl	8001baa <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008688:	4a9f      	ldr	r2, [pc, #636]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800868a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800868c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008690:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008694:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8008698:	bf08      	it	eq
 800869a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800869c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80086a0:	bf16      	itet	ne
 80086a2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80086a6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80086a8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	02d8      	lsls	r0, r3, #11
 80086b2:	d51b      	bpl.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80086b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086b6:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 80086ba:	d006      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80086bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80086c2:	219e      	movs	r1, #158	; 0x9e
 80086c4:	488f      	ldr	r0, [pc, #572]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80086c6:	f7f9 fa70 	bl	8001baa <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80086ca:	498f      	ldr	r1, [pc, #572]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80086cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80086ce:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80086d2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80086d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80086da:	ea43 0302 	orr.w	r3, r3, r2
 80086de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80086e2:	f000 82b3 	beq.w	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	bf08      	it	eq
 80086ea:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086ec:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 80086ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80086f2:	bf18      	it	ne
 80086f4:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086f6:	0699      	lsls	r1, r3, #26
 80086f8:	d563      	bpl.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80086fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80086fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008700:	d02d      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008706:	d02a      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008708:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 800870c:	4a7f      	ldr	r2, [pc, #508]	; (800890c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800870e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008712:	4290      	cmp	r0, r2
 8008714:	d023      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008716:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 800871a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800871e:	4290      	cmp	r0, r2
 8008720:	d01d      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008722:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008726:	487a      	ldr	r0, [pc, #488]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008728:	4282      	cmp	r2, r0
 800872a:	d018      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800872c:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 8008730:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 8008734:	4283      	cmp	r3, r0
 8008736:	d012      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008738:	4b76      	ldr	r3, [pc, #472]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800873a:	429a      	cmp	r2, r3
 800873c:	d00f      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800873e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8008742:	429a      	cmp	r2, r3
 8008744:	d00b      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008746:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800874a:	429a      	cmp	r2, r3
 800874c:	d007      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800874e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8008752:	4299      	cmp	r1, r3
 8008754:	d003      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008756:	21b9      	movs	r1, #185	; 0xb9
 8008758:	486a      	ldr	r0, [pc, #424]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800875a:	f7f9 fa26 	bl	8001baa <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800875e:	4b6a      	ldr	r3, [pc, #424]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008760:	4f6d      	ldr	r7, [pc, #436]	; (8008918 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8008762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008764:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008768:	641a      	str	r2, [r3, #64]	; 0x40
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877a:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877c:	f7fc fe36 	bl	80053ec <HAL_GetTick>
 8008780:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	05da      	lsls	r2, r3, #23
 8008786:	f140 8263 	bpl.w	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x630>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800878a:	4f5f      	ldr	r7, [pc, #380]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800878c:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800878e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008792:	f040 8268 	bne.w	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x646>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008798:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800879c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80087a0:	4a59      	ldr	r2, [pc, #356]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087a2:	f040 8286 	bne.w	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x692>
 80087a6:	6891      	ldr	r1, [r2, #8]
 80087a8:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80087ac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80087b0:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80087b4:	4301      	orrs	r1, r0
 80087b6:	6091      	str	r1, [r2, #8]
 80087b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087bc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80087be:	430b      	orrs	r3, r1
 80087c0:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	06d9      	lsls	r1, r3, #27
 80087c6:	d514      	bpl.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80087c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80087ca:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80087ce:	d003      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80087d0:	21f3      	movs	r1, #243	; 0xf3
 80087d2:	484c      	ldr	r0, [pc, #304]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80087d4:	f7f9 f9e9 	bl	8001baa <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087d8:	4b4b      	ldr	r3, [pc, #300]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80087da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80087de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80087e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80087e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80087ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087ec:	430a      	orrs	r2, r1
 80087ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	045a      	lsls	r2, r3, #17
 80087f6:	d513      	bpl.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80087f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087fa:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80087fe:	d006      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008804:	d003      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008806:	21fd      	movs	r1, #253	; 0xfd
 8008808:	483e      	ldr	r0, [pc, #248]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800880a:	f7f9 f9ce 	bl	8001baa <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800880e:	4a3e      	ldr	r2, [pc, #248]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008810:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008812:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008816:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800881a:	430b      	orrs	r3, r1
 800881c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	041b      	lsls	r3, r3, #16
 8008824:	d514      	bpl.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8008826:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008828:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
 800882c:	d007      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800882e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008834:	f240 1107 	movw	r1, #263	; 0x107
 8008838:	4832      	ldr	r0, [pc, #200]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800883a:	f7f9 f9b6 	bl	8001baa <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800883e:	4a32      	ldr	r2, [pc, #200]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008840:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008842:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008846:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800884a:	430b      	orrs	r3, r1
 800884c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	03df      	lsls	r7, r3, #15
 8008854:	d514      	bpl.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8008856:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008858:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 800885c:	d007      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800885e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008862:	d004      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008864:	f240 1111 	movw	r1, #273	; 0x111
 8008868:	4826      	ldr	r0, [pc, #152]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800886a:	f7f9 f99e 	bl	8001baa <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800886e:	4a26      	ldr	r2, [pc, #152]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008870:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008872:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008876:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800887a:	430b      	orrs	r3, r1
 800887c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	0398      	lsls	r0, r3, #14
 8008884:	d514      	bpl.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8008886:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008888:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 800888c:	d007      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800888e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008892:	d004      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8008894:	f240 111b 	movw	r1, #283	; 0x11b
 8008898:	481a      	ldr	r0, [pc, #104]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800889a:	f7f9 f986 	bl	8001baa <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800889e:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088a0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80088a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80088a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088aa:	430b      	orrs	r3, r1
 80088ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	0659      	lsls	r1, r3, #25
 80088b4:	d510      	bpl.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80088b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d904      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80088bc:	f240 1125 	movw	r1, #293	; 0x125
 80088c0:	4810      	ldr	r0, [pc, #64]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80088c2:	f7f9 f972 	bl	8001baa <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80088ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	430b      	orrs	r3, r1
 80088d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	061a      	lsls	r2, r3, #24
 80088dc:	d51e      	bpl.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80088de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80088e0:	f033 030c 	bics.w	r3, r3, #12
 80088e4:	d004      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80088e6:	f240 112f 	movw	r1, #303	; 0x12f
 80088ea:	4806      	ldr	r0, [pc, #24]	; (8008904 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80088ec:	f7f9 f95d 	bl	8001baa <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088f0:	4a05      	ldr	r2, [pc, #20]	; (8008908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80088f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80088f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80088f8:	f023 030c 	bic.w	r3, r3, #12
 80088fc:	430b      	orrs	r3, r1
 80088fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008902:	e00b      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008904:	08034e90 	.word	0x08034e90
 8008908:	40023800 	.word	0x40023800
 800890c:	00020300 	.word	0x00020300
 8008910:	00080300 	.word	0x00080300
 8008914:	00100300 	.word	0x00100300
 8008918:	40007000 	.word	0x40007000
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	05db      	lsls	r3, r3, #23
 8008920:	d511      	bpl.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8008922:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008924:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008928:	d004      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800892a:	f240 1139 	movw	r1, #313	; 0x139
 800892e:	48bd      	ldr	r0, [pc, #756]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008930:	f7f9 f93b 	bl	8001baa <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008934:	4abc      	ldr	r2, [pc, #752]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008936:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008938:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800893c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008940:	430b      	orrs	r3, r1
 8008942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	059f      	lsls	r7, r3, #22
 800894a:	d511      	bpl.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800894c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800894e:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8008952:	d004      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008954:	f240 1143 	movw	r1, #323	; 0x143
 8008958:	48b2      	ldr	r0, [pc, #712]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800895a:	f7f9 f926 	bl	8001baa <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800895e:	4ab2      	ldr	r2, [pc, #712]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008960:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008962:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008966:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800896a:	430b      	orrs	r3, r1
 800896c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	0558      	lsls	r0, r3, #21
 8008974:	d511      	bpl.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8008976:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008978:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800897c:	d004      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800897e:	f240 114d 	movw	r1, #333	; 0x14d
 8008982:	48a8      	ldr	r0, [pc, #672]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008984:	f7f9 f911 	bl	8001baa <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008988:	4aa7      	ldr	r2, [pc, #668]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 800898a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800898c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008994:	430b      	orrs	r3, r1
 8008996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	0519      	lsls	r1, r3, #20
 800899e:	d511      	bpl.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80089a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a2:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 80089a6:	d004      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80089a8:	f240 1157 	movw	r1, #343	; 0x157
 80089ac:	489d      	ldr	r0, [pc, #628]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80089ae:	f7f9 f8fc 	bl	8001baa <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80089b2:	4a9d      	ldr	r2, [pc, #628]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80089b4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80089b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80089ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089be:	430b      	orrs	r3, r1
 80089c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	04da      	lsls	r2, r3, #19
 80089c8:	d511      	bpl.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 80089ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80089cc:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80089d0:	d004      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80089d2:	f240 1161 	movw	r1, #353	; 0x161
 80089d6:	4893      	ldr	r0, [pc, #588]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 80089d8:	f7f9 f8e7 	bl	8001baa <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80089dc:	4a92      	ldr	r2, [pc, #584]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80089de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80089e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80089e8:	430b      	orrs	r3, r1
 80089ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	049b      	lsls	r3, r3, #18
 80089f2:	d511      	bpl.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80089f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80089f6:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80089fa:	d004      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80089fc:	f240 116b 	movw	r1, #363	; 0x16b
 8008a00:	4888      	ldr	r0, [pc, #544]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a02:	f7f9 f8d2 	bl	8001baa <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008a06:	4a88      	ldr	r2, [pc, #544]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a08:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008a0a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008a0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008a12:	430b      	orrs	r3, r1
 8008a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	025f      	lsls	r7, r3, #9
 8008a1c:	d511      	bpl.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8008a1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008a20:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 8008a24:	d004      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008a26:	f240 1175 	movw	r1, #373	; 0x175
 8008a2a:	487e      	ldr	r0, [pc, #504]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a2c:	f7f9 f8bd 	bl	8001baa <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a30:	4a7d      	ldr	r2, [pc, #500]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a32:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008a34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008a38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0298      	lsls	r0, r3, #10
 8008a46:	d515      	bpl.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8008a48:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008a4a:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8008a50:	f240 117f 	movw	r1, #383	; 0x17f
 8008a54:	4873      	ldr	r0, [pc, #460]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a56:	f7f9 f8a8 	bl	8001baa <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a5a:	4973      	ldr	r1, [pc, #460]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a5c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8008a5e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8008a62:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a66:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
      pllsaiused = 1;
 8008a6a:	bf08      	it	eq
 8008a6c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a74:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 8008a76:	f013 0f08 	tst.w	r3, #8
 8008a7a:	bf18      	it	ne
 8008a7c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a7e:	0359      	lsls	r1, r3, #13
 8008a80:	d511      	bpl.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8008a82:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008a84:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8008a88:	d004      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8008a8a:	f240 1197 	movw	r1, #407	; 0x197
 8008a8e:	4865      	ldr	r0, [pc, #404]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008a90:	f7f9 f88b 	bl	8001baa <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a94:	4a64      	ldr	r2, [pc, #400]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008a96:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008a98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008a9c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	021a      	lsls	r2, r3, #8
 8008aaa:	d513      	bpl.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8008aac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008ab0:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	d004      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008ab6:	f240 11a1 	movw	r1, #417	; 0x1a1
 8008aba:	485a      	ldr	r0, [pc, #360]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008abc:	f7f9 f875 	bl	8001baa <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ac0:	4a59      	ldr	r2, [pc, #356]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008ac2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008ac6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008ad4:	2e01      	cmp	r6, #1
 8008ad6:	f000 80f0 	beq.w	8008cba <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ae0:	f000 80eb 	beq.w	8008cba <HAL_RCCEx_PeriphCLKConfig+0x69a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008ae4:	2d01      	cmp	r5, #1
 8008ae6:	f040 80af 	bne.w	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008aea:	4d4f      	ldr	r5, [pc, #316]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af2:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af4:	f7fc fc7a 	bl	80053ec <HAL_GetTick>
 8008af8:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	009f      	lsls	r7, r3, #2
 8008afe:	f100 81ad 	bmi.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
        return HAL_TIMEOUT;
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8008b02:	6963      	ldr	r3, [r4, #20]
 8008b04:	3b32      	subs	r3, #50	; 0x32
 8008b06:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8008b0a:	d904      	bls.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008b0c:	f240 2146 	movw	r1, #582	; 0x246
 8008b10:	4844      	ldr	r0, [pc, #272]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b12:	f7f9 f84a 	bl	8001baa <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	031d      	lsls	r5, r3, #12
 8008b1a:	d501      	bpl.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008b1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008b1e:	b11a      	cbz	r2, 8008b28 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008b20:	02d8      	lsls	r0, r3, #11
 8008b22:	d52f      	bpl.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x564>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b26:	bb6b      	cbnz	r3, 8008b84 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8008b28:	69a3      	ldr	r3, [r4, #24]
 8008b2a:	3b02      	subs	r3, #2
 8008b2c:	2b0d      	cmp	r3, #13
 8008b2e:	d904      	bls.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b30:	f240 214d 	movw	r1, #589	; 0x24d
 8008b34:	483b      	ldr	r0, [pc, #236]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b36:	f7f9 f838 	bl	8001baa <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8008b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	2b1f      	cmp	r3, #31
 8008b40:	d904      	bls.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008b42:	f240 214f 	movw	r1, #591	; 0x24f
 8008b46:	4837      	ldr	r0, [pc, #220]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b48:	f7f9 f82f 	bl	8001baa <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b4c:	4a36      	ldr	r2, [pc, #216]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008b4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b52:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b5a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6961      	ldr	r1, [r4, #20]
 8008b62:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008b66:	69a1      	ldr	r1, [r4, #24]
 8008b68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b70:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008b74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008b76:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8008b7a:	3901      	subs	r1, #1
 8008b7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008b80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	0299      	lsls	r1, r3, #10
 8008b88:	d51d      	bpl.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008b8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8008b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b90:	d119      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8008b92:	6a23      	ldr	r3, [r4, #32]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d904      	bls.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008b98:	f240 2162 	movw	r1, #610	; 0x262
 8008b9c:	4821      	ldr	r0, [pc, #132]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008b9e:	f7f9 f804 	bl	8001baa <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008ba4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ba8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008bac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008bb0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6961      	ldr	r1, [r4, #20]
 8008bb8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bc2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	071a      	lsls	r2, r3, #28
 8008bca:	d531      	bpl.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8008bcc:	69e3      	ldr	r3, [r4, #28]
 8008bce:	3b02      	subs	r3, #2
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	d904      	bls.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8008bd4:	f240 2171 	movw	r1, #625	; 0x271
 8008bd8:	4812      	ldr	r0, [pc, #72]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008bda:	f7f8 ffe6 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8008bde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008be0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008be4:	d004      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008be6:	f240 2172 	movw	r1, #626	; 0x272
 8008bea:	480e      	ldr	r0, [pc, #56]	; (8008c24 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8008bec:	f7f8 ffdd 	bl	8001baa <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008bf0:	4a0d      	ldr	r2, [pc, #52]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8008bf2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008bfa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c02:	430b      	orrs	r3, r1
 8008c04:	6961      	ldr	r1, [r4, #20]
 8008c06:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008c0a:	69e1      	ldr	r1, [r4, #28]
 8008c0c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008c14:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008c18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008c1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	e004      	b.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008c22:	bf00      	nop
 8008c24:	08034e90 	.word	0x08034e90
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c30:	4c91      	ldr	r4, [pc, #580]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3a:	f7fc fbd7 	bl	80053ec <HAL_GetTick>
 8008c3e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	f140 8111 	bpl.w	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e009      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x640>
      plli2sused = 1;
 8008c4c:	2601      	movs	r6, #1
 8008c4e:	e54d      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c50:	f7fc fbcc 	bl	80053ec <HAL_GetTick>
 8008c54:	eba0 0008 	sub.w	r0, r0, r8
 8008c58:	2864      	cmp	r0, #100	; 0x64
 8008c5a:	f67f ad92 	bls.w	8008782 <HAL_RCCEx_PeriphCLKConfig+0x162>
        return HAL_TIMEOUT;
 8008c5e:	2003      	movs	r0, #3
}
 8008c60:	b003      	add	sp, #12
 8008c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008c68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	f43f ad92 	beq.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008c7e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c86:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8008c88:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c8c:	07db      	lsls	r3, r3, #31
 8008c8e:	f57f ad82 	bpl.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x176>
        tickstart = HAL_GetTick();
 8008c92:	f7fc fbab 	bl	80053ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c96:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008c9a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c9e:	0798      	lsls	r0, r3, #30
 8008ca0:	f53f ad79 	bmi.w	8008796 <HAL_RCCEx_PeriphCLKConfig+0x176>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ca4:	f7fc fba2 	bl	80053ec <HAL_GetTick>
 8008ca8:	eba0 0008 	sub.w	r0, r0, r8
 8008cac:	4548      	cmp	r0, r9
 8008cae:	d9f5      	bls.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8008cb0:	e7d5      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cb2:	6891      	ldr	r1, [r2, #8]
 8008cb4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8008cb8:	e57d      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_PLLI2S_DISABLE();
 8008cba:	4e6f      	ldr	r6, [pc, #444]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008cc2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008cc4:	f7fc fb92 	bl	80053ec <HAL_GetTick>
 8008cc8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cca:	6833      	ldr	r3, [r6, #0]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	f100 80be 	bmi.w	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	3b32      	subs	r3, #50	; 0x32
 8008cd6:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8008cda:	d904      	bls.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8008cdc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008ce0:	4866      	ldr	r0, [pc, #408]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008ce2:	f7f8 ff62 	bl	8001baa <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	07df      	lsls	r7, r3, #31
 8008cea:	d51c      	bpl.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8008cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cee:	b9d3      	cbnz	r3, 8008d26 <HAL_RCCEx_PeriphCLKConfig+0x706>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008cf0:	68a3      	ldr	r3, [r4, #8]
 8008cf2:	3b02      	subs	r3, #2
 8008cf4:	2b05      	cmp	r3, #5
 8008cf6:	d904      	bls.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008cf8:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8008cfc:	485f      	ldr	r0, [pc, #380]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008cfe:	f7f8 ff54 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008d02:	4a5d      	ldr	r2, [pc, #372]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008d04:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d08:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d10:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8008d14:	430b      	orrs	r3, r1
 8008d16:	6861      	ldr	r1, [r4, #4]
 8008d18:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008d1c:	68a1      	ldr	r1, [r4, #8]
 8008d1e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8008d22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	031e      	lsls	r6, r3, #12
 8008d2a:	d503      	bpl.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8008d2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008d2e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008d32:	d005      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8008d34:	02d8      	lsls	r0, r3, #11
 8008d36:	d530      	bpl.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x77a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d3e:	d12c      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008d40:	68e3      	ldr	r3, [r4, #12]
 8008d42:	3b02      	subs	r3, #2
 8008d44:	2b0d      	cmp	r3, #13
 8008d46:	d904      	bls.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8008d48:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8008d4c:	484b      	ldr	r0, [pc, #300]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008d4e:	f7f8 ff2c 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8008d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d54:	3b01      	subs	r3, #1
 8008d56:	2b1f      	cmp	r3, #31
 8008d58:	d904      	bls.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8008d5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008d5e:	4847      	ldr	r0, [pc, #284]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008d60:	f7f8 ff23 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008d64:	4a44      	ldr	r2, [pc, #272]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008d66:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d6a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d72:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6861      	ldr	r1, [r4, #4]
 8008d7a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008d7e:	68e1      	ldr	r1, [r4, #12]
 8008d80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d88:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8008d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d8e:	f021 011f 	bic.w	r1, r1, #31
 8008d92:	3b01      	subs	r3, #1
 8008d94:	430b      	orrs	r3, r1
 8008d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	01d9      	lsls	r1, r3, #7
 8008d9e:	d519      	bpl.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d904      	bls.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8008da6:	f240 2107 	movw	r1, #519	; 0x207
 8008daa:	4834      	ldr	r0, [pc, #208]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008dac:	f7f8 fefd 	bl	8001baa <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008db0:	4a31      	ldr	r2, [pc, #196]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008db2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008db6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008dba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8008dbe:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	6861      	ldr	r1, [r4, #4]
 8008dc6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8008dca:	6921      	ldr	r1, [r4, #16]
 8008dcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008dd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	019a      	lsls	r2, r3, #6
 8008dd8:	d527      	bpl.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d904      	bls.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 8008de0:	f240 2116 	movw	r1, #534	; 0x216
 8008de4:	4825      	ldr	r0, [pc, #148]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008de6:	f7f8 fee0 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	3b02      	subs	r3, #2
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d904      	bls.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8008df2:	f240 2117 	movw	r1, #535	; 0x217
 8008df6:	4821      	ldr	r0, [pc, #132]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008df8:	f7f8 fed7 	bl	8001baa <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8008dfc:	68e3      	ldr	r3, [r4, #12]
 8008dfe:	3b02      	subs	r3, #2
 8008e00:	2b0d      	cmp	r3, #13
 8008e02:	d904      	bls.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8008e04:	f44f 7106 	mov.w	r1, #536	; 0x218
 8008e08:	481c      	ldr	r0, [pc, #112]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x85c>)
 8008e0a:	f7f8 fece 	bl	8001baa <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6862      	ldr	r2, [r4, #4]
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008e18:	68e2      	ldr	r2, [r4, #12]
 8008e1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e1e:	68a2      	ldr	r2, [r4, #8]
 8008e20:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8008e24:	4a14      	ldr	r2, [pc, #80]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8008e2a:	4e13      	ldr	r6, [pc, #76]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x858>)
 8008e2c:	6833      	ldr	r3, [r6, #0]
 8008e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e32:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008e34:	f7fc fada 	bl	80053ec <HAL_GetTick>
 8008e38:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e3a:	6833      	ldr	r3, [r6, #0]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	f53f ae51 	bmi.w	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e42:	f7fc fad3 	bl	80053ec <HAL_GetTick>
 8008e46:	1bc0      	subs	r0, r0, r7
 8008e48:	2864      	cmp	r0, #100	; 0x64
 8008e4a:	d9f6      	bls.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008e4c:	e707      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e4e:	f7fc facd 	bl	80053ec <HAL_GetTick>
 8008e52:	1bc0      	subs	r0, r0, r7
 8008e54:	2864      	cmp	r0, #100	; 0x64
 8008e56:	f67f af38 	bls.w	8008cca <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8008e5a:	e700      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e5c:	f7fc fac6 	bl	80053ec <HAL_GetTick>
 8008e60:	1b80      	subs	r0, r0, r6
 8008e62:	2864      	cmp	r0, #100	; 0x64
 8008e64:	f67f ae49 	bls.w	8008afa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008e68:	e6f9      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e6a:	f7fc fabf 	bl	80053ec <HAL_GetTick>
 8008e6e:	1b40      	subs	r0, r0, r5
 8008e70:	2864      	cmp	r0, #100	; 0x64
 8008e72:	f67f aee5 	bls.w	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x620>
 8008e76:	e6f2      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	08034e90 	.word	0x08034e90

08008e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008e80:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8008e84:	d12a      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008e86:	4b2c      	ldr	r3, [pc, #176]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008e88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008e8c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8008e90:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8008e94:	d032      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008e96:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8008e9a:	d02d      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8008e9c:	2a00      	cmp	r2, #0
 8008e9e:	d148      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ea0:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ea2:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008ea4:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008ea6:	4a24      	ldr	r2, [pc, #144]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ea8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008eac:	bf54      	ite	pl
 8008eae:	4b23      	ldrpl	r3, [pc, #140]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008eb0:	4b23      	ldrmi	r3, [pc, #140]	; (8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008eb2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008eb6:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008eba:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8008ebe:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008ec2:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008ec4:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008ec8:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008ecc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008ed0:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);

        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008ed4:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8008ed6:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8008eda:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008edc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8008ee0:	d127      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008ee4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008ee8:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8008eec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008ef0:	d004      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008ef2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008ef6:	e7d0      	b.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ef8:	4812      	ldr	r0, [pc, #72]	; (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8008efa:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008efc:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008efe:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008f00:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008f02:	4a0d      	ldr	r2, [pc, #52]	; (8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008f04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008f08:	bf54      	ite	pl
 8008f0a:	4b0c      	ldrpl	r3, [pc, #48]	; (8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f0c:	4b0c      	ldrmi	r3, [pc, #48]	; (8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008f0e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008f12:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008f16:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8008f1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008f1e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008f20:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008f24:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008f28:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8008f2c:	f003 031f 	and.w	r3, r3, #31
 8008f30:	e7d0      	b.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8008f32:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	00f42400 	.word	0x00f42400
 8008f40:	017d7840 	.word	0x017d7840
 8008f44:	00bb8000 	.word	0x00bb8000

08008f48 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f48:	6802      	ldr	r2, [r0, #0]
{
 8008f4a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f4c:	68d3      	ldr	r3, [r2, #12]
{
 8008f4e:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f54:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f56:	f7fc fa49 	bl	80053ec <HAL_GetTick>
 8008f5a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	069b      	lsls	r3, r3, #26
 8008f62:	d501      	bpl.n	8008f68 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8008f64:	2000      	movs	r0, #0
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f68:	f7fc fa40 	bl	80053ec <HAL_GetTick>
 8008f6c:	1b40      	subs	r0, r0, r5
 8008f6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008f72:	d9f3      	bls.n	8008f5c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8008f74:	2003      	movs	r0, #3
}
 8008f76:	bd38      	pop	{r3, r4, r5, pc}

08008f78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008f78:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f7a:	6803      	ldr	r3, [r0, #0]
{
 8008f7c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	0652      	lsls	r2, r2, #25
 8008f82:	d501      	bpl.n	8008f88 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008f84:	2000      	movs	r0, #0
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f88:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8008f8e:	f7fc fa2d 	bl	80053ec <HAL_GetTick>
 8008f92:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	065b      	lsls	r3, r3, #25
 8008f9a:	d4f3      	bmi.n	8008f84 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f9c:	f7fc fa26 	bl	80053ec <HAL_GetTick>
 8008fa0:	1b40      	subs	r0, r0, r5
 8008fa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008fa6:	d9f5      	bls.n	8008f94 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8008fa8:	2003      	movs	r0, #3
}
 8008faa:	bd38      	pop	{r3, r4, r5, pc}

08008fac <HAL_RTC_Init>:
{
 8008fac:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8008fae:	4604      	mov	r4, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d050      	beq.n	8009056 <HAL_RTC_Init+0xaa>
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008fb4:	6802      	ldr	r2, [r0, #0]
 8008fb6:	4b3c      	ldr	r3, [pc, #240]	; (80090a8 <HAL_RTC_Init+0xfc>)
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d003      	beq.n	8008fc4 <HAL_RTC_Init+0x18>
 8008fbc:	21fb      	movs	r1, #251	; 0xfb
 8008fbe:	483b      	ldr	r0, [pc, #236]	; (80090ac <HAL_RTC_Init+0x100>)
 8008fc0:	f7f8 fdf3 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008fc4:	6863      	ldr	r3, [r4, #4]
 8008fc6:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8008fca:	d003      	beq.n	8008fd4 <HAL_RTC_Init+0x28>
 8008fcc:	21fc      	movs	r1, #252	; 0xfc
 8008fce:	4837      	ldr	r0, [pc, #220]	; (80090ac <HAL_RTC_Init+0x100>)
 8008fd0:	f7f8 fdeb 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fd8:	d903      	bls.n	8008fe2 <HAL_RTC_Init+0x36>
 8008fda:	21fd      	movs	r1, #253	; 0xfd
 8008fdc:	4833      	ldr	r0, [pc, #204]	; (80090ac <HAL_RTC_Init+0x100>)
 8008fde:	f7f8 fde4 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008fe2:	68e3      	ldr	r3, [r4, #12]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe8:	d303      	bcc.n	8008ff2 <HAL_RTC_Init+0x46>
 8008fea:	21fe      	movs	r1, #254	; 0xfe
 8008fec:	482f      	ldr	r0, [pc, #188]	; (80090ac <HAL_RTC_Init+0x100>)
 8008fee:	f7f8 fddc 	bl	8001baa <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008ff8:	d003      	beq.n	8009002 <HAL_RTC_Init+0x56>
 8008ffa:	21ff      	movs	r1, #255	; 0xff
 8008ffc:	482b      	ldr	r0, [pc, #172]	; (80090ac <HAL_RTC_Init+0x100>)
 8008ffe:	f7f8 fdd4 	bl	8001baa <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8009002:	6963      	ldr	r3, [r4, #20]
 8009004:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 8009008:	d004      	beq.n	8009014 <HAL_RTC_Init+0x68>
 800900a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800900e:	4827      	ldr	r0, [pc, #156]	; (80090ac <HAL_RTC_Init+0x100>)
 8009010:	f7f8 fdcb 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8009014:	69a3      	ldr	r3, [r4, #24]
 8009016:	f033 0308 	bics.w	r3, r3, #8
 800901a:	d004      	beq.n	8009026 <HAL_RTC_Init+0x7a>
 800901c:	f240 1101 	movw	r1, #257	; 0x101
 8009020:	4822      	ldr	r0, [pc, #136]	; (80090ac <HAL_RTC_Init+0x100>)
 8009022:	f7f8 fdc2 	bl	8001baa <assert_failed>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009026:	7f63      	ldrb	r3, [r4, #29]
 8009028:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800902c:	b91b      	cbnz	r3, 8009036 <HAL_RTC_Init+0x8a>
    hrtc->Lock = HAL_UNLOCKED;
 800902e:	7722      	strb	r2, [r4, #28]
    HAL_RTC_MspInit(hrtc);
 8009030:	4620      	mov	r0, r4
 8009032:	f7f8 febb 	bl	8001dac <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009036:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009038:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800903a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 800903c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	625a      	str	r2, [r3, #36]	; 0x24
 8009042:	2253      	movs	r2, #83	; 0x53
 8009044:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009046:	f7ff ff97 	bl	8008f78 <RTC_EnterInitMode>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	b128      	cbz	r0, 800905a <HAL_RTC_Init+0xae>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800904e:	22ff      	movs	r2, #255	; 0xff
 8009050:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009052:	2304      	movs	r3, #4
 8009054:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8009056:	2001      	movs	r0, #1
}
 8009058:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800905a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800905c:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800905e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8009062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009066:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009068:	6862      	ldr	r2, [r4, #4]
 800906a:	6899      	ldr	r1, [r3, #8]
 800906c:	432a      	orrs	r2, r5
 800906e:	6965      	ldr	r5, [r4, #20]
 8009070:	432a      	orrs	r2, r5
 8009072:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009074:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009076:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009078:	68e2      	ldr	r2, [r4, #12]
 800907a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009082:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009084:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800908c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800908e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009090:	f022 0208 	bic.w	r2, r2, #8
 8009094:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009098:	430a      	orrs	r2, r1
 800909a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80090a0:	2301      	movs	r3, #1
 80090a2:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	40002800 	.word	0x40002800
 80090ac:	08034ed1 	.word	0x08034ed1

080090b0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80090b0:	2300      	movs	r3, #0

  while(Value >= 10)
 80090b2:	2809      	cmp	r0, #9
 80090b4:	d803      	bhi.n	80090be <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80090b6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80090ba:	b2c0      	uxtb	r0, r0
 80090bc:	4770      	bx	lr
    Value -= 10;
 80090be:	380a      	subs	r0, #10
    bcdhigh++;
 80090c0:	3301      	adds	r3, #1
    Value -= 10;
 80090c2:	b2c0      	uxtb	r0, r0
 80090c4:	e7f5      	b.n	80090b2 <RTC_ByteToBcd2+0x2>

080090c6 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80090c6:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80090c8:	f000 000f 	and.w	r0, r0, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80090cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80090d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80090d4:	b2c0      	uxtb	r0, r0
 80090d6:	4770      	bx	lr

080090d8 <HAL_RTC_SetTime>:
  assert_param(IS_RTC_FORMAT(Format));
 80090d8:	2a01      	cmp	r2, #1
{
 80090da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090dc:	4606      	mov	r6, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 80090e2:	d904      	bls.n	80090ee <HAL_RTC_SetTime+0x16>
 80090e4:	f240 21db 	movw	r1, #731	; 0x2db
 80090e8:	486d      	ldr	r0, [pc, #436]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 80090ea:	f7f8 fd5e 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f4:	d007      	beq.n	8009106 <HAL_RTC_SetTime+0x2e>
 80090f6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 80090fa:	d004      	beq.n	8009106 <HAL_RTC_SetTime+0x2e>
 80090fc:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8009100:	4867      	ldr	r0, [pc, #412]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009102:	f7f8 fd52 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800910c:	d004      	beq.n	8009118 <HAL_RTC_SetTime+0x40>
 800910e:	f240 21dd 	movw	r1, #733	; 0x2dd
 8009112:	4863      	ldr	r0, [pc, #396]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009114:	f7f8 fd49 	bl	8001baa <assert_failed>
  __HAL_LOCK(hrtc);
 8009118:	7f33      	ldrb	r3, [r6, #28]
 800911a:	2702      	movs	r7, #2
 800911c:	2b01      	cmp	r3, #1
 800911e:	d04f      	beq.n	80091c0 <HAL_RTC_SetTime+0xe8>
 8009120:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009122:	7777      	strb	r7, [r6, #29]
  __HAL_LOCK(hrtc);
 8009124:	7733      	strb	r3, [r6, #28]
 8009126:	6833      	ldr	r3, [r6, #0]
 8009128:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800912a:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800912c:	2d00      	cmp	r5, #0
 800912e:	d14f      	bne.n	80091d0 <HAL_RTC_SetTime+0xf8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009130:	065a      	lsls	r2, r3, #25
 8009132:	d547      	bpl.n	80091c4 <HAL_RTC_SetTime+0xec>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8009134:	3801      	subs	r0, #1
 8009136:	280b      	cmp	r0, #11
 8009138:	d904      	bls.n	8009144 <HAL_RTC_SetTime+0x6c>
 800913a:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 800913e:	4858      	ldr	r0, [pc, #352]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009140:	f7f8 fd33 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8009144:	7b23      	ldrb	r3, [r4, #12]
 8009146:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 800914a:	d004      	beq.n	8009156 <HAL_RTC_SetTime+0x7e>
 800914c:	f240 21e9 	movw	r1, #745	; 0x2e9
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8009150:	4853      	ldr	r0, [pc, #332]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009152:	f7f8 fd2a 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b3b      	cmp	r3, #59	; 0x3b
 800915a:	d904      	bls.n	8009166 <HAL_RTC_SetTime+0x8e>
 800915c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8009160:	484f      	ldr	r0, [pc, #316]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009162:	f7f8 fd22 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8009166:	78a3      	ldrb	r3, [r4, #2]
 8009168:	2b3b      	cmp	r3, #59	; 0x3b
 800916a:	d904      	bls.n	8009176 <HAL_RTC_SetTime+0x9e>
 800916c:	f240 21f1 	movw	r1, #753	; 0x2f1
 8009170:	484b      	ldr	r0, [pc, #300]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009172:	f7f8 fd1a 	bl	8001baa <assert_failed>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009176:	7820      	ldrb	r0, [r4, #0]
 8009178:	f7ff ff9a 	bl	80090b0 <RTC_ByteToBcd2>
 800917c:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800917e:	7860      	ldrb	r0, [r4, #1]
 8009180:	f7ff ff96 	bl	80090b0 <RTC_ByteToBcd2>
 8009184:	4605      	mov	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009186:	78a0      	ldrb	r0, [r4, #2]
 8009188:	f7ff ff92 	bl	80090b0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800918c:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800918e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8009192:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009196:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919a:	6833      	ldr	r3, [r6, #0]
 800919c:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800919e:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091a0:	625a      	str	r2, [r3, #36]	; 0x24
 80091a2:	2253      	movs	r2, #83	; 0x53
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091a6:	f7ff fee7 	bl	8008f78 <RTC_EnterInitMode>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	4607      	mov	r7, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d04c      	beq.n	800924c <HAL_RTC_SetTime+0x174>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091b2:	22ff      	movs	r2, #255	; 0xff
 80091b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091b6:	2304      	movs	r3, #4
 80091b8:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 80091ba:	2300      	movs	r3, #0
 80091bc:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 80091be:	2701      	movs	r7, #1
}
 80091c0:	4638      	mov	r0, r7
 80091c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80091c4:	2817      	cmp	r0, #23
      sTime->TimeFormat = 0x00;
 80091c6:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80091c8:	d9c5      	bls.n	8009156 <HAL_RTC_SetTime+0x7e>
 80091ca:	f240 21ee 	movw	r1, #750	; 0x2ee
 80091ce:	e7bf      	b.n	8009150 <HAL_RTC_SetTime+0x78>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80091d0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80091d4:	d032      	beq.n	800923c <HAL_RTC_SetTime+0x164>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80091d6:	f7ff ff76 	bl	80090c6 <RTC_Bcd2ToByte>
 80091da:	3801      	subs	r0, #1
 80091dc:	b2c0      	uxtb	r0, r0
 80091de:	280b      	cmp	r0, #11
 80091e0:	d904      	bls.n	80091ec <HAL_RTC_SetTime+0x114>
 80091e2:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80091e6:	482e      	ldr	r0, [pc, #184]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 80091e8:	f7f8 fcdf 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80091ec:	7b23      	ldrb	r3, [r4, #12]
 80091ee:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80091f2:	d004      	beq.n	80091fe <HAL_RTC_SetTime+0x126>
 80091f4:	f240 21fd 	movw	r1, #765	; 0x2fd
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80091f8:	4829      	ldr	r0, [pc, #164]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 80091fa:	f7f8 fcd6 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80091fe:	7860      	ldrb	r0, [r4, #1]
 8009200:	f7ff ff61 	bl	80090c6 <RTC_Bcd2ToByte>
 8009204:	283b      	cmp	r0, #59	; 0x3b
 8009206:	d904      	bls.n	8009212 <HAL_RTC_SetTime+0x13a>
 8009208:	f44f 7141 	mov.w	r1, #772	; 0x304
 800920c:	4824      	ldr	r0, [pc, #144]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 800920e:	f7f8 fccc 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8009212:	78a0      	ldrb	r0, [r4, #2]
 8009214:	f7ff ff57 	bl	80090c6 <RTC_Bcd2ToByte>
 8009218:	283b      	cmp	r0, #59	; 0x3b
 800921a:	d904      	bls.n	8009226 <HAL_RTC_SetTime+0x14e>
 800921c:	f240 3105 	movw	r1, #773	; 0x305
 8009220:	481f      	ldr	r0, [pc, #124]	; (80092a0 <HAL_RTC_SetTime+0x1c8>)
 8009222:	f7f8 fcc2 	bl	8001baa <assert_failed>
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009226:	7860      	ldrb	r0, [r4, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009228:	7825      	ldrb	r5, [r4, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800922a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800922c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8009230:	78a5      	ldrb	r5, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009232:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009234:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009236:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800923a:	e7ae      	b.n	800919a <HAL_RTC_SetTime+0xc2>
      sTime->TimeFormat = 0x00;
 800923c:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800923e:	f7ff ff42 	bl	80090c6 <RTC_Bcd2ToByte>
 8009242:	2817      	cmp	r0, #23
 8009244:	d9db      	bls.n	80091fe <HAL_RTC_SetTime+0x126>
 8009246:	f240 3102 	movw	r1, #770	; 0x302
 800924a:	e7d5      	b.n	80091f8 <HAL_RTC_SetTime+0x120>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800924c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009250:	6921      	ldr	r1, [r4, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009252:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8009256:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800925e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	430a      	orrs	r2, r1
 8009264:	6961      	ldr	r1, [r4, #20]
 8009266:	430a      	orrs	r2, r1
 8009268:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009270:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	069b      	lsls	r3, r3, #26
 8009276:	d40a      	bmi.n	800928e <HAL_RTC_SetTime+0x1b6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff fe65 	bl	8008f48 <HAL_RTC_WaitForSynchro>
 800927e:	b130      	cbz	r0, 800928e <HAL_RTC_SetTime+0x1b6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009280:	6833      	ldr	r3, [r6, #0]
 8009282:	22ff      	movs	r2, #255	; 0xff
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009286:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8009288:	7737      	strb	r7, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 800928a:	7773      	strb	r3, [r6, #29]
 800928c:	e797      	b.n	80091be <HAL_RTC_SetTime+0xe6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800928e:	6833      	ldr	r3, [r6, #0]
 8009290:	22ff      	movs	r2, #255	; 0xff
 8009292:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8009294:	2301      	movs	r3, #1
 8009296:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc);
 8009298:	2300      	movs	r3, #0
 800929a:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 800929c:	e790      	b.n	80091c0 <HAL_RTC_SetTime+0xe8>
 800929e:	bf00      	nop
 80092a0:	08034ed1 	.word	0x08034ed1

080092a4 <HAL_RTC_SetDate>:
  assert_param(IS_RTC_FORMAT(Format));
 80092a4:	2a01      	cmp	r2, #1
{
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	4605      	mov	r5, r0
 80092aa:	460e      	mov	r6, r1
 80092ac:	4614      	mov	r4, r2
  assert_param(IS_RTC_FORMAT(Format));
 80092ae:	d904      	bls.n	80092ba <HAL_RTC_SetDate+0x16>
 80092b0:	f240 318e 	movw	r1, #910	; 0x38e
 80092b4:	4856      	ldr	r0, [pc, #344]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 80092b6:	f7f8 fc78 	bl	8001baa <assert_failed>
 __HAL_LOCK(hrtc);
 80092ba:	7f2b      	ldrb	r3, [r5, #28]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	f04f 0302 	mov.w	r3, #2
 80092c2:	f000 80a2 	beq.w	800940a <HAL_RTC_SetDate+0x166>
 80092c6:	2201      	movs	r2, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80092c8:	776b      	strb	r3, [r5, #29]
 __HAL_LOCK(hrtc);
 80092ca:	772a      	strb	r2, [r5, #28]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092cc:	b934      	cbnz	r4, 80092dc <HAL_RTC_SetDate+0x38>
 80092ce:	7873      	ldrb	r3, [r6, #1]
 80092d0:	06da      	lsls	r2, r3, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092d2:	bf42      	ittt	mi
 80092d4:	f023 0310 	bicmi.w	r3, r3, #16
 80092d8:	330a      	addmi	r3, #10
 80092da:	7073      	strbmi	r3, [r6, #1]
  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 80092dc:	7833      	ldrb	r3, [r6, #0]
 80092de:	3b01      	subs	r3, #1
 80092e0:	2b06      	cmp	r3, #6
 80092e2:	d904      	bls.n	80092ee <HAL_RTC_SetDate+0x4a>
 80092e4:	f240 319a 	movw	r1, #922	; 0x39a
 80092e8:	4849      	ldr	r0, [pc, #292]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 80092ea:	f7f8 fc5e 	bl	8001baa <assert_failed>
 80092ee:	78f0      	ldrb	r0, [r6, #3]
  if(Format == RTC_FORMAT_BIN)
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	d13f      	bne.n	8009374 <HAL_RTC_SetDate+0xd0>
    assert_param(IS_RTC_YEAR(sDate->Year));
 80092f4:	2863      	cmp	r0, #99	; 0x63
 80092f6:	d904      	bls.n	8009302 <HAL_RTC_SetDate+0x5e>
 80092f8:	f240 319e 	movw	r1, #926	; 0x39e
 80092fc:	4844      	ldr	r0, [pc, #272]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 80092fe:	f7f8 fc54 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8009302:	7873      	ldrb	r3, [r6, #1]
 8009304:	3b01      	subs	r3, #1
 8009306:	2b0b      	cmp	r3, #11
 8009308:	d904      	bls.n	8009314 <HAL_RTC_SetDate+0x70>
 800930a:	f240 319f 	movw	r1, #927	; 0x39f
 800930e:	4840      	ldr	r0, [pc, #256]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 8009310:	f7f8 fc4b 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8009314:	78b3      	ldrb	r3, [r6, #2]
 8009316:	3b01      	subs	r3, #1
 8009318:	2b1e      	cmp	r3, #30
 800931a:	d904      	bls.n	8009326 <HAL_RTC_SetDate+0x82>
 800931c:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8009320:	483b      	ldr	r0, [pc, #236]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 8009322:	f7f8 fc42 	bl	8001baa <assert_failed>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009326:	78f0      	ldrb	r0, [r6, #3]
 8009328:	f7ff fec2 	bl	80090b0 <RTC_ByteToBcd2>
 800932c:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800932e:	7870      	ldrb	r0, [r6, #1]
 8009330:	f7ff febe 	bl	80090b0 <RTC_ByteToBcd2>
 8009334:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009336:	78b0      	ldrb	r0, [r6, #2]
 8009338:	f7ff feba 	bl	80090b0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));
 800933c:	7833      	ldrb	r3, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800933e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8009342:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009346:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800934e:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009350:	625a      	str	r2, [r3, #36]	; 0x24
 8009352:	2253      	movs	r2, #83	; 0x53
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009356:	f7ff fe0f 	bl	8008f78 <RTC_EnterInitMode>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	4606      	mov	r6, r0
 800935e:	2800      	cmp	r0, #0
 8009360:	d034      	beq.n	80093cc <HAL_RTC_SetDate+0x128>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009362:	22ff      	movs	r2, #255	; 0xff
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009366:	2304      	movs	r3, #4
 8009368:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 800936a:	2300      	movs	r3, #0
 800936c:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 800936e:	2601      	movs	r6, #1
}
 8009370:	4630      	mov	r0, r6
 8009372:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8009374:	f7ff fea7 	bl	80090c6 <RTC_Bcd2ToByte>
 8009378:	2863      	cmp	r0, #99	; 0x63
 800937a:	d904      	bls.n	8009386 <HAL_RTC_SetDate+0xe2>
 800937c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8009380:	4823      	ldr	r0, [pc, #140]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 8009382:	f7f8 fc12 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8009386:	7870      	ldrb	r0, [r6, #1]
 8009388:	f7ff fe9d 	bl	80090c6 <RTC_Bcd2ToByte>
 800938c:	3801      	subs	r0, #1
 800938e:	b2c0      	uxtb	r0, r0
 8009390:	280b      	cmp	r0, #11
 8009392:	d904      	bls.n	800939e <HAL_RTC_SetDate+0xfa>
 8009394:	f240 31aa 	movw	r1, #938	; 0x3aa
 8009398:	481d      	ldr	r0, [pc, #116]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 800939a:	f7f8 fc06 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800939e:	78b0      	ldrb	r0, [r6, #2]
 80093a0:	f7ff fe91 	bl	80090c6 <RTC_Bcd2ToByte>
 80093a4:	3801      	subs	r0, #1
 80093a6:	b2c0      	uxtb	r0, r0
 80093a8:	281e      	cmp	r0, #30
 80093aa:	d904      	bls.n	80093b6 <HAL_RTC_SetDate+0x112>
 80093ac:	f240 31ab 	movw	r1, #939	; 0x3ab
 80093b0:	4817      	ldr	r0, [pc, #92]	; (8009410 <HAL_RTC_SetDate+0x16c>)
 80093b2:	f7f8 fbfa 	bl	8001baa <assert_failed>
                  (((uint32_t)sDate->Month) << 8) | \
 80093b6:	7870      	ldrb	r0, [r6, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80093b8:	78f4      	ldrb	r4, [r6, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80093ba:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80093bc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
                  ((uint32_t)sDate->Date) | \
 80093c0:	78b4      	ldrb	r4, [r6, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80093c2:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));
 80093c4:	7834      	ldrb	r4, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80093c6:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 80093ca:	e7be      	b.n	800934a <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80093cc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80093d0:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80093d4:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093dc:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	069b      	lsls	r3, r3, #26
 80093e2:	d40a      	bmi.n	80093fa <HAL_RTC_SetDate+0x156>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff fdaf 	bl	8008f48 <HAL_RTC_WaitForSynchro>
 80093ea:	b130      	cbz	r0, 80093fa <HAL_RTC_SetDate+0x156>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	22ff      	movs	r2, #255	; 0xff
 80093f0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80093f2:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 80093f4:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80093f6:	776b      	strb	r3, [r5, #29]
 80093f8:	e7b9      	b.n	800936e <HAL_RTC_SetDate+0xca>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093fa:	682b      	ldr	r3, [r5, #0]
 80093fc:	22ff      	movs	r2, #255	; 0xff
 80093fe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8009400:	2301      	movs	r3, #1
 8009402:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8009404:	2300      	movs	r3, #0
 8009406:	772b      	strb	r3, [r5, #28]
    return HAL_OK;
 8009408:	e7b2      	b.n	8009370 <HAL_RTC_SetDate+0xcc>
 __HAL_LOCK(hrtc);
 800940a:	461e      	mov	r6, r3
 800940c:	e7b0      	b.n	8009370 <HAL_RTC_SetDate+0xcc>
 800940e:	bf00      	nop
 8009410:	08034ed1 	.word	0x08034ed1

08009414 <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_FORMAT(Format));
 8009414:	2a01      	cmp	r2, #1
{
 8009416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941a:	4606      	mov	r6, r0
 800941c:	460c      	mov	r4, r1
 800941e:	4615      	mov	r5, r2
  assert_param(IS_RTC_FORMAT(Format));
 8009420:	d904      	bls.n	800942c <HAL_RTC_SetAlarm+0x18>
 8009422:	f240 4134 	movw	r1, #1076	; 0x434
 8009426:	48ac      	ldr	r0, [pc, #688]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009428:	f7f8 fbbf 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 800942c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800942e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009432:	d007      	beq.n	8009444 <HAL_RTC_SetAlarm+0x30>
 8009434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009438:	d004      	beq.n	8009444 <HAL_RTC_SetAlarm+0x30>
 800943a:	f240 4135 	movw	r1, #1077	; 0x435
 800943e:	48a6      	ldr	r0, [pc, #664]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009440:	f7f8 fbb3 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8009444:	69a3      	ldr	r3, [r4, #24]
 8009446:	f013 3f7f 	tst.w	r3, #2139062143	; 0x7f7f7f7f
 800944a:	d004      	beq.n	8009456 <HAL_RTC_SetAlarm+0x42>
 800944c:	f240 4136 	movw	r1, #1078	; 0x436
 8009450:	48a1      	ldr	r0, [pc, #644]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009452:	f7f8 fbaa 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8009456:	6a23      	ldr	r3, [r4, #32]
 8009458:	f033 4380 	bics.w	r3, r3, #1073741824	; 0x40000000
 800945c:	d004      	beq.n	8009468 <HAL_RTC_SetAlarm+0x54>
 800945e:	f240 4137 	movw	r1, #1079	; 0x437
 8009462:	489d      	ldr	r0, [pc, #628]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009464:	f7f8 fba1 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800946e:	d304      	bcc.n	800947a <HAL_RTC_SetAlarm+0x66>
 8009470:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8009474:	4898      	ldr	r0, [pc, #608]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009476:	f7f8 fb98 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 800947a:	69e3      	ldr	r3, [r4, #28]
 800947c:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8009480:	d00d      	beq.n	800949e <HAL_RTC_SetAlarm+0x8a>
 8009482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009486:	d00a      	beq.n	800949e <HAL_RTC_SetAlarm+0x8a>
 8009488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948c:	d007      	beq.n	800949e <HAL_RTC_SetAlarm+0x8a>
 800948e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009492:	d004      	beq.n	800949e <HAL_RTC_SetAlarm+0x8a>
 8009494:	f240 4139 	movw	r1, #1081	; 0x439
 8009498:	488f      	ldr	r0, [pc, #572]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 800949a:	f7f8 fb86 	bl	8001baa <assert_failed>
  __HAL_LOCK(hrtc);
 800949e:	7f33      	ldrb	r3, [r6, #28]
 80094a0:	2002      	movs	r0, #2
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d07f      	beq.n	80095a6 <HAL_RTC_SetAlarm+0x192>
 80094a6:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a8:	7770      	strb	r0, [r6, #29]
  __HAL_LOCK(hrtc);
 80094aa:	7733      	strb	r3, [r6, #28]
 80094ac:	6833      	ldr	r3, [r6, #0]
 80094ae:	7820      	ldrb	r0, [r4, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80094b0:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	f040 8084 	bne.w	80095c0 <HAL_RTC_SetAlarm+0x1ac>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	d576      	bpl.n	80095aa <HAL_RTC_SetAlarm+0x196>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80094bc:	3801      	subs	r0, #1
 80094be:	280b      	cmp	r0, #11
 80094c0:	d904      	bls.n	80094cc <HAL_RTC_SetAlarm+0xb8>
 80094c2:	f240 4144 	movw	r1, #1092	; 0x444
 80094c6:	4884      	ldr	r0, [pc, #528]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80094c8:	f7f8 fb6f 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80094cc:	7b23      	ldrb	r3, [r4, #12]
 80094ce:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80094d2:	d004      	beq.n	80094de <HAL_RTC_SetAlarm+0xca>
 80094d4:	f240 4145 	movw	r1, #1093	; 0x445
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80094d8:	487f      	ldr	r0, [pc, #508]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80094da:	f7f8 fb66 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 80094de:	7863      	ldrb	r3, [r4, #1]
 80094e0:	2b3b      	cmp	r3, #59	; 0x3b
 80094e2:	d904      	bls.n	80094ee <HAL_RTC_SetAlarm+0xda>
 80094e4:	f240 414c 	movw	r1, #1100	; 0x44c
 80094e8:	487b      	ldr	r0, [pc, #492]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80094ea:	f7f8 fb5e 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 80094ee:	78a3      	ldrb	r3, [r4, #2]
 80094f0:	2b3b      	cmp	r3, #59	; 0x3b
 80094f2:	d904      	bls.n	80094fe <HAL_RTC_SetAlarm+0xea>
 80094f4:	f240 414d 	movw	r1, #1101	; 0x44d
 80094f8:	4877      	ldr	r0, [pc, #476]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80094fa:	f7f8 fb56 	bl	8001baa <assert_failed>
 80094fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009502:	6a22      	ldr	r2, [r4, #32]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8009504:	3b01      	subs	r3, #1
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009506:	2a00      	cmp	r2, #0
 8009508:	d155      	bne.n	80095b6 <HAL_RTC_SetAlarm+0x1a2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 800950a:	2b1e      	cmp	r3, #30
 800950c:	d904      	bls.n	8009518 <HAL_RTC_SetAlarm+0x104>
 800950e:	f240 4151 	movw	r1, #1105	; 0x451
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8009512:	4871      	ldr	r0, [pc, #452]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009514:	f7f8 fb49 	bl	8001baa <assert_failed>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009518:	7820      	ldrb	r0, [r4, #0]
 800951a:	f7ff fdc9 	bl	80090b0 <RTC_ByteToBcd2>
 800951e:	4601      	mov	r1, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009520:	7860      	ldrb	r0, [r4, #1]
 8009522:	f7ff fdc5 	bl	80090b0 <RTC_ByteToBcd2>
 8009526:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009528:	78a0      	ldrb	r0, [r4, #2]
 800952a:	f7ff fdc1 	bl	80090b0 <RTC_ByteToBcd2>
 800952e:	4607      	mov	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009530:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009534:	f7ff fdbc 	bl	80090b0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009538:	69a5      	ldr	r5, [r4, #24]
 800953a:	6a23      	ldr	r3, [r4, #32]
 800953c:	432b      	orrs	r3, r5
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800953e:	7b25      	ldrb	r5, [r4, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009540:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8009544:	433d      	orrs	r5, r7
 8009546:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800954a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 800954e:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009552:	69e3      	ldr	r3, [r4, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009554:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009556:	6867      	ldr	r7, [r4, #4]
 8009558:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800955a:	6833      	ldr	r3, [r6, #0]
 800955c:	625a      	str	r2, [r3, #36]	; 0x24
 800955e:	2253      	movs	r2, #83	; 0x53
 8009560:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009562:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009564:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009568:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800956a:	f040 8097 	bne.w	800969c <HAL_RTC_SetAlarm+0x288>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800956e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009572:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800957a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800957c:	f7fb ff36 	bl	80053ec <HAL_GetTick>
 8009580:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009582:	6833      	ldr	r3, [r6, #0]
 8009584:	68dc      	ldr	r4, [r3, #12]
 8009586:	f014 0401 	ands.w	r4, r4, #1
 800958a:	d077      	beq.n	800967c <HAL_RTC_SetAlarm+0x268>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800958c:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800958e:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009596:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009598:	22ff      	movs	r2, #255	; 0xff
 800959a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hrtc);
 800959c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800959e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80095a0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80095a2:	7730      	strb	r0, [r6, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 80095a4:	7773      	strb	r3, [r6, #29]
}
 80095a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80095aa:	2817      	cmp	r0, #23
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80095ac:	7325      	strb	r5, [r4, #12]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 80095ae:	d996      	bls.n	80094de <HAL_RTC_SetAlarm+0xca>
 80095b0:	f240 414a 	movw	r1, #1098	; 0x44a
 80095b4:	e790      	b.n	80094d8 <HAL_RTC_SetAlarm+0xc4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 80095b6:	2b06      	cmp	r3, #6
 80095b8:	d9ae      	bls.n	8009518 <HAL_RTC_SetAlarm+0x104>
 80095ba:	f240 4155 	movw	r1, #1109	; 0x455
 80095be:	e7a8      	b.n	8009512 <HAL_RTC_SetAlarm+0xfe>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80095c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80095c4:	d049      	beq.n	800965a <HAL_RTC_SetAlarm+0x246>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80095c6:	f7ff fd7e 	bl	80090c6 <RTC_Bcd2ToByte>
 80095ca:	3801      	subs	r0, #1
 80095cc:	b2c0      	uxtb	r0, r0
 80095ce:	280b      	cmp	r0, #11
 80095d0:	d904      	bls.n	80095dc <HAL_RTC_SetAlarm+0x1c8>
 80095d2:	f240 4164 	movw	r1, #1124	; 0x464
 80095d6:	4840      	ldr	r0, [pc, #256]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80095d8:	f7f8 fae7 	bl	8001baa <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80095dc:	7b23      	ldrb	r3, [r4, #12]
 80095de:	f013 0fbf 	tst.w	r3, #191	; 0xbf
 80095e2:	d004      	beq.n	80095ee <HAL_RTC_SetAlarm+0x1da>
 80095e4:	f240 4165 	movw	r1, #1125	; 0x465
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 80095e8:	483b      	ldr	r0, [pc, #236]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80095ea:	f7f8 fade 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80095ee:	7860      	ldrb	r0, [r4, #1]
 80095f0:	f7ff fd69 	bl	80090c6 <RTC_Bcd2ToByte>
 80095f4:	283b      	cmp	r0, #59	; 0x3b
 80095f6:	d904      	bls.n	8009602 <HAL_RTC_SetAlarm+0x1ee>
 80095f8:	f240 416d 	movw	r1, #1133	; 0x46d
 80095fc:	4836      	ldr	r0, [pc, #216]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 80095fe:	f7f8 fad4 	bl	8001baa <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8009602:	78a0      	ldrb	r0, [r4, #2]
 8009604:	f7ff fd5f 	bl	80090c6 <RTC_Bcd2ToByte>
 8009608:	283b      	cmp	r0, #59	; 0x3b
 800960a:	d904      	bls.n	8009616 <HAL_RTC_SetAlarm+0x202>
 800960c:	f240 416e 	movw	r1, #1134	; 0x46e
 8009610:	4831      	ldr	r0, [pc, #196]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009612:	f7f8 faca 	bl	8001baa <assert_failed>
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8009616:	6a23      	ldr	r3, [r4, #32]
 8009618:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800961c:	bb2b      	cbnz	r3, 800966a <HAL_RTC_SetAlarm+0x256>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800961e:	f7ff fd52 	bl	80090c6 <RTC_Bcd2ToByte>
 8009622:	3801      	subs	r0, #1
 8009624:	b2c0      	uxtb	r0, r0
 8009626:	281e      	cmp	r0, #30
 8009628:	d904      	bls.n	8009634 <HAL_RTC_SetAlarm+0x220>
 800962a:	f240 4172 	movw	r1, #1138	; 0x472
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800962e:	482a      	ldr	r0, [pc, #168]	; (80096d8 <HAL_RTC_SetAlarm+0x2c4>)
 8009630:	f7f8 fabb 	bl	8001baa <assert_failed>
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009634:	6a23      	ldr	r3, [r4, #32]
 8009636:	69a5      	ldr	r5, [r4, #24]
 8009638:	431d      	orrs	r5, r3
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800963a:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800963c:	431d      	orrs	r5, r3
 800963e:	7823      	ldrb	r3, [r4, #0]
 8009640:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009644:	7863      	ldrb	r3, [r4, #1]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009646:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800964a:	7b23      	ldrb	r3, [r4, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800964c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009650:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009654:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8009658:	e77b      	b.n	8009552 <HAL_RTC_SetAlarm+0x13e>
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800965a:	7323      	strb	r3, [r4, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800965c:	f7ff fd33 	bl	80090c6 <RTC_Bcd2ToByte>
 8009660:	2817      	cmp	r0, #23
 8009662:	d9c4      	bls.n	80095ee <HAL_RTC_SetAlarm+0x1da>
 8009664:	f240 416a 	movw	r1, #1130	; 0x46a
 8009668:	e7be      	b.n	80095e8 <HAL_RTC_SetAlarm+0x1d4>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 800966a:	f7ff fd2c 	bl	80090c6 <RTC_Bcd2ToByte>
 800966e:	3801      	subs	r0, #1
 8009670:	b2c0      	uxtb	r0, r0
 8009672:	2806      	cmp	r0, #6
 8009674:	d9de      	bls.n	8009634 <HAL_RTC_SetAlarm+0x220>
 8009676:	f240 4176 	movw	r1, #1142	; 0x476
 800967a:	e7d8      	b.n	800962e <HAL_RTC_SetAlarm+0x21a>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800967c:	f7fb feb6 	bl	80053ec <HAL_GetTick>
 8009680:	eba0 0008 	sub.w	r0, r0, r8
 8009684:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009688:	f67f af7b 	bls.w	8009582 <HAL_RTC_SetAlarm+0x16e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009690:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009692:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009694:	7770      	strb	r0, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8009696:	7734      	strb	r4, [r6, #28]
        return HAL_TIMEOUT;
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800969c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80096a0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096a8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80096aa:	f7fb fe9f 	bl	80053ec <HAL_GetTick>
 80096ae:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80096b0:	6833      	ldr	r3, [r6, #0]
 80096b2:	68dc      	ldr	r4, [r3, #12]
 80096b4:	f014 0402 	ands.w	r4, r4, #2
 80096b8:	d005      	beq.n	80096c6 <HAL_RTC_SetAlarm+0x2b2>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80096ba:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80096bc:	649f      	str	r7, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096c4:	e767      	b.n	8009596 <HAL_RTC_SetAlarm+0x182>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80096c6:	f7fb fe91 	bl	80053ec <HAL_GetTick>
 80096ca:	eba0 0008 	sub.w	r0, r0, r8
 80096ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80096d2:	d9ed      	bls.n	80096b0 <HAL_RTC_SetAlarm+0x29c>
 80096d4:	e7da      	b.n	800968c <HAL_RTC_SetAlarm+0x278>
 80096d6:	bf00      	nop
 80096d8:	08034ed1 	.word	0x08034ed1

080096dc <HAL_RTCEx_SetTimeStamp>:
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 80096dc:	f031 0308 	bics.w	r3, r1, #8
{
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	4604      	mov	r4, r0
 80096e4:	460e      	mov	r6, r1
 80096e6:	4615      	mov	r5, r2
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
 80096e8:	d003      	beq.n	80096f2 <HAL_RTCEx_SetTimeStamp+0x16>
 80096ea:	2192      	movs	r1, #146	; 0x92
 80096ec:	4817      	ldr	r0, [pc, #92]	; (800974c <HAL_RTCEx_SetTimeStamp+0x70>)
 80096ee:	f7f8 fa5c 	bl	8001baa <assert_failed>
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
 80096f2:	f035 0302 	bics.w	r3, r5, #2
 80096f6:	d005      	beq.n	8009704 <HAL_RTCEx_SetTimeStamp+0x28>
 80096f8:	2d04      	cmp	r5, #4
 80096fa:	d003      	beq.n	8009704 <HAL_RTCEx_SetTimeStamp+0x28>
 80096fc:	2193      	movs	r1, #147	; 0x93
 80096fe:	4813      	ldr	r0, [pc, #76]	; (800974c <HAL_RTCEx_SetTimeStamp+0x70>)
 8009700:	f7f8 fa53 	bl	8001baa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009704:	7f23      	ldrb	r3, [r4, #28]
 8009706:	2002      	movs	r0, #2
 8009708:	2b01      	cmp	r3, #1
 800970a:	d01d      	beq.n	8009748 <HAL_RTCEx_SetTimeStamp+0x6c>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800970c:	6823      	ldr	r3, [r4, #0]

  tmpreg|= TimeStampEdge;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800970e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009710:	7760      	strb	r0, [r4, #29]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009712:	2000      	movs	r0, #0
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009714:	6899      	ldr	r1, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009716:	625a      	str	r2, [r3, #36]	; 0x24
 8009718:	2253      	movs	r2, #83	; 0x53
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800971a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800971e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009722:	f021 0108 	bic.w	r1, r1, #8
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009726:	f022 0206 	bic.w	r2, r2, #6
  tmpreg|= TimeStampEdge;
 800972a:	4331      	orrs	r1, r6
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800972c:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800972e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009730:	4315      	orrs	r5, r2
 8009732:	64dd      	str	r5, [r3, #76]	; 0x4c
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009734:	6099      	str	r1, [r3, #8]
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800973e:	22ff      	movs	r2, #255	; 0xff
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8009742:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8009744:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 8009746:	7763      	strb	r3, [r4, #29]

  return HAL_OK;
}
 8009748:	bd70      	pop	{r4, r5, r6, pc}
 800974a:	bf00      	nop
 800974c:	08034f0f 	.word	0x08034f0f

08009750 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8009750:	4b0e      	ldr	r3, [pc, #56]	; (800978c <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009752:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	f641 3358 	movw	r3, #7000	; 0x1b58
 800975a:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800975e:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8009760:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8009762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009766:	600b      	str	r3, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009768:	f112 32ff 	adds.w	r2, r2, #4294967295
 800976c:	d207      	bcs.n	800977e <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800976e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8009772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009776:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800977a:	2003      	movs	r0, #3
      break;
 800977c:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800977e:	680b      	ldr	r3, [r1, #0]
 8009780:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8009784:	d1f0      	bne.n	8009768 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8009786:	4618      	mov	r0, r3

  return status;
}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	200000cc 	.word	0x200000cc

08009790 <HAL_SAI_Init>:
{
 8009790:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8009792:	4604      	mov	r4, r0
 8009794:	2800      	cmp	r0, #0
 8009796:	f000 81e0 	beq.w	8009b5a <HAL_SAI_Init+0x3ca>
  assert_param(IS_SAI_ALL_INSTANCE(hsai->Instance));
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	4eba      	ldr	r6, [pc, #744]	; (8009a88 <HAL_SAI_Init+0x2f8>)
 800979e:	42b3      	cmp	r3, r6
 80097a0:	d00e      	beq.n	80097c0 <HAL_SAI_Init+0x30>
 80097a2:	4aba      	ldr	r2, [pc, #744]	; (8009a8c <HAL_SAI_Init+0x2fc>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00b      	beq.n	80097c0 <HAL_SAI_Init+0x30>
 80097a8:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d007      	beq.n	80097c0 <HAL_SAI_Init+0x30>
 80097b0:	3220      	adds	r2, #32
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d004      	beq.n	80097c0 <HAL_SAI_Init+0x30>
 80097b6:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80097ba:	48b5      	ldr	r0, [pc, #724]	; (8009a90 <HAL_SAI_Init+0x300>)
 80097bc:	f7f8 f9f5 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_AUDIO_FREQUENCY(hsai->Init.AudioFrequency));
 80097c0:	69e3      	ldr	r3, [r4, #28]
 80097c2:	4ab4      	ldr	r2, [pc, #720]	; (8009a94 <HAL_SAI_Init+0x304>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d021      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097c8:	4ab3      	ldr	r2, [pc, #716]	; (8009a98 <HAL_SAI_Init+0x308>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d01e      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097ce:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01a      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097d6:	f64a 4244 	movw	r2, #44100	; 0xac44
 80097da:	4293      	cmp	r3, r2
 80097dc:	d016      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097de:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80097e2:	d013      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097e4:	f245 6222 	movw	r2, #22050	; 0x5622
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d00f      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80097f0:	d00c      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097f2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d008      	beq.n	800980c <HAL_SAI_Init+0x7c>
 80097fa:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80097fe:	d005      	beq.n	800980c <HAL_SAI_Init+0x7c>
 8009800:	b123      	cbz	r3, 800980c <HAL_SAI_Init+0x7c>
 8009802:	f240 1173 	movw	r1, #371	; 0x173
 8009806:	48a2      	ldr	r0, [pc, #648]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009808:	f7f8 f9cf 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_PROTOCOL(hsai->Init.Protocol));
 800980c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800980e:	f033 0204 	bics.w	r2, r3, #4
 8009812:	d006      	beq.n	8009822 <HAL_SAI_Init+0x92>
 8009814:	2b08      	cmp	r3, #8
 8009816:	d004      	beq.n	8009822 <HAL_SAI_Init+0x92>
 8009818:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800981c:	489c      	ldr	r0, [pc, #624]	; (8009a90 <HAL_SAI_Init+0x300>)
 800981e:	f7f8 f9c4 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_MODE(hsai->Init.AudioMode));
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	2b03      	cmp	r3, #3
 8009826:	d904      	bls.n	8009832 <HAL_SAI_Init+0xa2>
 8009828:	f240 1175 	movw	r1, #373	; 0x175
 800982c:	4898      	ldr	r0, [pc, #608]	; (8009a90 <HAL_SAI_Init+0x300>)
 800982e:	f7f8 f9bc 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_DATASIZE(hsai->Init.DataSize));
 8009832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009834:	f023 0220 	bic.w	r2, r3, #32
 8009838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d006      	beq.n	800984e <HAL_SAI_Init+0xbe>
 8009840:	2a80      	cmp	r2, #128	; 0x80
 8009842:	d004      	beq.n	800984e <HAL_SAI_Init+0xbe>
 8009844:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8009848:	4891      	ldr	r0, [pc, #580]	; (8009a90 <HAL_SAI_Init+0x300>)
 800984a:	f7f8 f9ae 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
 800984e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009850:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8009854:	d004      	beq.n	8009860 <HAL_SAI_Init+0xd0>
 8009856:	f240 1177 	movw	r1, #375	; 0x177
 800985a:	488d      	ldr	r0, [pc, #564]	; (8009a90 <HAL_SAI_Init+0x300>)
 800985c:	f7f8 f9a5 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
 8009860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d904      	bls.n	8009870 <HAL_SAI_Init+0xe0>
 8009866:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800986a:	4889      	ldr	r0, [pc, #548]	; (8009a90 <HAL_SAI_Init+0x300>)
 800986c:	f7f8 f99d 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
 8009870:	68a3      	ldr	r3, [r4, #8]
 8009872:	2b03      	cmp	r3, #3
 8009874:	d904      	bls.n	8009880 <HAL_SAI_Init+0xf0>
 8009876:	f240 1179 	movw	r1, #377	; 0x179
 800987a:	4885      	ldr	r0, [pc, #532]	; (8009a90 <HAL_SAI_Init+0x300>)
 800987c:	f7f8 f995 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(hsai->Init.OutputDrive));
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009886:	d004      	beq.n	8009892 <HAL_SAI_Init+0x102>
 8009888:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800988c:	4880      	ldr	r0, [pc, #512]	; (8009a90 <HAL_SAI_Init+0x300>)
 800988e:	f7f8 f98c 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_NODIVIDER(hsai->Init.NoDivider));
 8009892:	6963      	ldr	r3, [r4, #20]
 8009894:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8009898:	d004      	beq.n	80098a4 <HAL_SAI_Init+0x114>
 800989a:	f240 117b 	movw	r1, #379	; 0x17b
 800989e:	487c      	ldr	r0, [pc, #496]	; (8009a90 <HAL_SAI_Init+0x300>)
 80098a0:	f7f8 f983 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(hsai->Init.FIFOThreshold));
 80098a4:	69a3      	ldr	r3, [r4, #24]
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d904      	bls.n	80098b4 <HAL_SAI_Init+0x124>
 80098aa:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80098ae:	4878      	ldr	r0, [pc, #480]	; (8009a90 <HAL_SAI_Init+0x300>)
 80098b0:	f7f8 f97b 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_MONO_STEREO_MODE(hsai->Init.MonoStereoMode));
 80098b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b6:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80098ba:	d004      	beq.n	80098c6 <HAL_SAI_Init+0x136>
 80098bc:	f240 117d 	movw	r1, #381	; 0x17d
 80098c0:	4873      	ldr	r0, [pc, #460]	; (8009a90 <HAL_SAI_Init+0x300>)
 80098c2:	f7f8 f972 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(hsai->Init.CompandingMode));
 80098c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098c8:	f433 4200 	bics.w	r2, r3, #32768	; 0x8000
 80098cc:	d00c      	beq.n	80098e8 <HAL_SAI_Init+0x158>
 80098ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80098d2:	d009      	beq.n	80098e8 <HAL_SAI_Init+0x158>
 80098d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80098dc:	d004      	beq.n	80098e8 <HAL_SAI_Init+0x158>
 80098de:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80098e2:	486b      	ldr	r0, [pc, #428]	; (8009a90 <HAL_SAI_Init+0x300>)
 80098e4:	f7f8 f961 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(hsai->Init.TriState));
 80098e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098ea:	f033 0310 	bics.w	r3, r3, #16
 80098ee:	d004      	beq.n	80098fa <HAL_SAI_Init+0x16a>
 80098f0:	f240 117f 	movw	r1, #383	; 0x17f
 80098f4:	4866      	ldr	r0, [pc, #408]	; (8009a90 <HAL_SAI_Init+0x300>)
 80098f6:	f7f8 f958 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SYNCEXT(hsai->Init.SynchroExt));
 80098fa:	68e3      	ldr	r3, [r4, #12]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d904      	bls.n	800990a <HAL_SAI_Init+0x17a>
 8009900:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009904:	4862      	ldr	r0, [pc, #392]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009906:	f7f8 f950 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FRAME_LENGTH(hsai->FrameInit.FrameLength));
 800990a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800990c:	3b08      	subs	r3, #8
 800990e:	2bf8      	cmp	r3, #248	; 0xf8
 8009910:	d904      	bls.n	800991c <HAL_SAI_Init+0x18c>
 8009912:	f240 1183 	movw	r1, #387	; 0x183
 8009916:	485e      	ldr	r0, [pc, #376]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009918:	f7f8 f947 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(hsai->FrameInit.ActiveFrameLength));
 800991c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800991e:	3b01      	subs	r3, #1
 8009920:	2b7f      	cmp	r3, #127	; 0x7f
 8009922:	d904      	bls.n	800992e <HAL_SAI_Init+0x19e>
 8009924:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8009928:	4859      	ldr	r0, [pc, #356]	; (8009a90 <HAL_SAI_Init+0x300>)
 800992a:	f7f8 f93e 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_DEFINITION(hsai->FrameInit.FSDefinition));
 800992e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009930:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009934:	d004      	beq.n	8009940 <HAL_SAI_Init+0x1b0>
 8009936:	f240 1185 	movw	r1, #389	; 0x185
 800993a:	4855      	ldr	r0, [pc, #340]	; (8009a90 <HAL_SAI_Init+0x300>)
 800993c:	f7f8 f935 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_POLARITY(hsai->FrameInit.FSPolarity));
 8009940:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009942:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009946:	d004      	beq.n	8009952 <HAL_SAI_Init+0x1c2>
 8009948:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800994c:	4850      	ldr	r0, [pc, #320]	; (8009a90 <HAL_SAI_Init+0x300>)
 800994e:	f7f8 f92c 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FS_OFFSET(hsai->FrameInit.FSOffset));
 8009952:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009954:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 8009958:	d004      	beq.n	8009964 <HAL_SAI_Init+0x1d4>
 800995a:	f240 1187 	movw	r1, #391	; 0x187
 800995e:	484c      	ldr	r0, [pc, #304]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009960:	f7f8 f923 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
 8009964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009966:	2b18      	cmp	r3, #24
 8009968:	d904      	bls.n	8009974 <HAL_SAI_Init+0x1e4>
 800996a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800996e:	4848      	ldr	r0, [pc, #288]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009970:	f7f8 f91b 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
 8009974:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009976:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800997a:	d006      	beq.n	800998a <HAL_SAI_Init+0x1fa>
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d004      	beq.n	800998a <HAL_SAI_Init+0x1fa>
 8009980:	f240 118b 	movw	r1, #395	; 0x18b
 8009984:	4842      	ldr	r0, [pc, #264]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009986:	f7f8 f910 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
 800998a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800998c:	3b01      	subs	r3, #1
 800998e:	2b0f      	cmp	r3, #15
 8009990:	d904      	bls.n	800999c <HAL_SAI_Init+0x20c>
 8009992:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8009996:	483e      	ldr	r0, [pc, #248]	; (8009a90 <HAL_SAI_Init+0x300>)
 8009998:	f7f8 f907 	bl	8001baa <assert_failed>
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
 800999c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800999e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a2:	d304      	bcc.n	80099ae <HAL_SAI_Init+0x21e>
 80099a4:	f240 118d 	movw	r1, #397	; 0x18d
 80099a8:	4839      	ldr	r0, [pc, #228]	; (8009a90 <HAL_SAI_Init+0x300>)
 80099aa:	f7f8 f8fe 	bl	8001baa <assert_failed>
  if(hsai->State == HAL_SAI_STATE_RESET)
 80099ae:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80099b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80099b6:	b923      	cbnz	r3, 80099c2 <HAL_SAI_Init+0x232>
    hsai->Lock = HAL_UNLOCKED;
 80099b8:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80099bc:	4620      	mov	r0, r4
 80099be:	f7f8 fa4b 	bl	8001e58 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80099c2:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80099c4:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80099c6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80099ca:	f7ff fec1 	bl	8009750 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80099ce:	68e3      	ldr	r3, [r4, #12]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	f000 80b1 	beq.w	8009b38 <HAL_SAI_Init+0x3a8>
  uint32_t tmpregisterGCR = 0;
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	bf0c      	ite	eq
 80099da:	2320      	moveq	r3, #32
 80099dc:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 80099de:	68a2      	ldr	r2, [r4, #8]
 80099e0:	2a02      	cmp	r2, #2
 80099e2:	f000 80ad 	beq.w	8009b40 <HAL_SAI_Init+0x3b0>
 80099e6:	2a03      	cmp	r2, #3
 80099e8:	f000 80a8 	beq.w	8009b3c <HAL_SAI_Init+0x3ac>
  uint32_t syncen_bits = 0;
 80099ec:	2a01      	cmp	r2, #1
 80099ee:	bf0c      	ite	eq
 80099f0:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 80099f4:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	42b2      	cmp	r2, r6
 80099fa:	d003      	beq.n	8009a04 <HAL_SAI_Init+0x274>
 80099fc:	4923      	ldr	r1, [pc, #140]	; (8009a8c <HAL_SAI_Init+0x2fc>)
 80099fe:	428a      	cmp	r2, r1
 8009a00:	f040 80a1 	bne.w	8009b46 <HAL_SAI_Init+0x3b6>
    SAI1->GCR = tmpregisterGCR;
 8009a04:	4925      	ldr	r1, [pc, #148]	; (8009a9c <HAL_SAI_Init+0x30c>)
    SAI2->GCR = tmpregisterGCR;
 8009a06:	600b      	str	r3, [r1, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009a08:	69e3      	ldr	r3, [r4, #28]
 8009a0a:	b313      	cbz	r3, 8009a52 <HAL_SAI_Init+0x2c2>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009a0c:	42b2      	cmp	r2, r6
 8009a0e:	d003      	beq.n	8009a18 <HAL_SAI_Init+0x288>
 8009a10:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <HAL_SAI_Init+0x2fc>)
 8009a12:	429a      	cmp	r2, r3
 8009a14:	f040 8099 	bne.w	8009b4a <HAL_SAI_Init+0x3ba>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009a18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009a1c:	f7ff fa30 	bl	8008e80 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <HAL_SAI_Init+0x310>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d002      	beq.n	8009a2e <HAL_SAI_Init+0x29e>
 8009a28:	3220      	adds	r2, #32
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d103      	bne.n	8009a36 <HAL_SAI_Init+0x2a6>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009a2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a32:	f7ff fa25 	bl	8008e80 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009a36:	220a      	movs	r2, #10
 8009a38:	69e3      	ldr	r3, [r4, #28]
 8009a3a:	4350      	muls	r0, r2
 8009a3c:	025b      	lsls	r3, r3, #9
 8009a3e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8009a42:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8009a46:	fb02 0013 	mls	r0, r2, r3, r0
 8009a4a:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8009a4c:	bf08      	it	eq
 8009a4e:	3301      	addeq	r3, #1
 8009a50:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a52:	6863      	ldr	r3, [r4, #4]
 8009a54:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009a56:	f033 0102 	bics.w	r1, r3, #2
 8009a5a:	d178      	bne.n	8009b4e <HAL_SAI_Init+0x3be>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009a5c:	2a01      	cmp	r2, #1
 8009a5e:	bf18      	it	ne
 8009a60:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	480f      	ldr	r0, [pc, #60]	; (8009aa4 <HAL_SAI_Init+0x314>)
 8009a68:	6816      	ldr	r6, [r2, #0]
 8009a6a:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a6c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8009a6e:	4333      	orrs	r3, r6
 8009a70:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a72:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a74:	4333      	orrs	r3, r6
 8009a76:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009a78:	6810      	ldr	r0, [r2, #0]
 8009a7a:	4333      	orrs	r3, r6
 8009a7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a7e:	4333      	orrs	r3, r6
 8009a80:	6926      	ldr	r6, [r4, #16]
 8009a82:	4333      	orrs	r3, r6
 8009a84:	e010      	b.n	8009aa8 <HAL_SAI_Init+0x318>
 8009a86:	bf00      	nop
 8009a88:	40015804 	.word	0x40015804
 8009a8c:	40015824 	.word	0x40015824
 8009a90:	08034f50 	.word	0x08034f50
 8009a94:	0002ee00 	.word	0x0002ee00
 8009a98:	00017700 	.word	0x00017700
 8009a9c:	40015800 	.word	0x40015800
 8009aa0:	40015c04 	.word	0x40015c04
 8009aa4:	ff05c010 	.word	0xff05c010
 8009aa8:	6966      	ldr	r6, [r4, #20]
 8009aaa:	4333      	orrs	r3, r6
 8009aac:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009aae:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ab0:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ab4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ab6:	432b      	orrs	r3, r5
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009abc:	6853      	ldr	r3, [r2, #4]
 8009abe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ac2:	f023 030f 	bic.w	r3, r3, #15
 8009ac6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ac8:	69a3      	ldr	r3, [r4, #24]
 8009aca:	6851      	ldr	r1, [r2, #4]
 8009acc:	4303      	orrs	r3, r0
 8009ace:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009ad0:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009ad2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ad4:	430b      	orrs	r3, r1
 8009ad6:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009ad8:	4b21      	ldr	r3, [pc, #132]	; (8009b60 <HAL_SAI_Init+0x3d0>)
 8009ada:	6891      	ldr	r1, [r2, #8]
 8009adc:	400b      	ands	r3, r1
 8009ade:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009ae0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ae2:	6891      	ldr	r1, [r2, #8]
 8009ae4:	4303      	orrs	r3, r0
 8009ae6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009ae8:	4303      	orrs	r3, r0
 8009aea:	430b      	orrs	r3, r1
 8009aec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009aee:	3901      	subs	r1, #1
 8009af0:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009af2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009af4:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009af6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009afa:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009afc:	68d3      	ldr	r3, [r2, #12]
 8009afe:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8009b02:	f023 030f 	bic.w	r3, r3, #15
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	0c1b      	lsrs	r3, r3, #16
 8009b0a:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b0e:	68d1      	ldr	r1, [r2, #12]
 8009b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b12:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b14:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b16:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009b18:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009b1e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b20:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009b26:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8009b28:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b2a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8009b2e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8009b32:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009b38:	2310      	movs	r3, #16
 8009b3a:	e750      	b.n	80099de <HAL_SAI_Init+0x24e>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009b3c:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009b40:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8009b44:	e757      	b.n	80099f6 <HAL_SAI_Init+0x266>
    SAI2->GCR = tmpregisterGCR;
 8009b46:	4907      	ldr	r1, [pc, #28]	; (8009b64 <HAL_SAI_Init+0x3d4>)
 8009b48:	e75d      	b.n	8009a06 <HAL_SAI_Init+0x276>
    uint32_t freq = 0;
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e768      	b.n	8009a20 <HAL_SAI_Init+0x290>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009b4e:	2a01      	cmp	r2, #1
 8009b50:	bf14      	ite	ne
 8009b52:	2100      	movne	r1, #0
 8009b54:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8009b58:	e784      	b.n	8009a64 <HAL_SAI_Init+0x2d4>
    return HAL_ERROR;
 8009b5a:	2001      	movs	r0, #1
}
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	bf00      	nop
 8009b60:	fff88000 	.word	0xfff88000
 8009b64:	40015c00 	.word	0x40015c00

08009b68 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009b68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b72:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009b74:	4770      	bx	lr

08009b76 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009b76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	b089      	sub	sp, #36	; 0x24
 8009b7e:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8009b80:	f7fb fc34 	bl	80053ec <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8009b84:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8009b86:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009b88:	2108      	movs	r1, #8
 8009b8a:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8009b90:	f003 f8d2 	bl	800cd38 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8009b94:	4604      	mov	r4, r0
 8009b96:	bb40      	cbnz	r0, 8009bea <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8009b98:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009b9a:	6828      	ldr	r0, [r5, #0]
 8009b9c:	0409      	lsls	r1, r1, #16
 8009b9e:	f003 f9d5 	bl	800cf4c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	bb08      	cbnz	r0, 8009bea <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009baa:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8009bac:	a902      	add	r1, sp, #8
 8009bae:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bb0:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 8009bb2:	2308      	movs	r3, #8
 8009bb4:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009bb6:	2330      	movs	r3, #48	; 0x30
 8009bb8:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 8009bc2:	f003 f86b 	bl	800cc9c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009bc6:	6828      	ldr	r0, [r5, #0]
 8009bc8:	f003 f9f1 	bl	800cfae <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8009bcc:	4604      	mov	r4, r0
 8009bce:	b960      	cbnz	r0, 8009bea <SD_FindSCR+0x74>
 8009bd0:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009bd2:	f240 482a 	movw	r8, #1066	; 0x42a
 8009bd6:	6828      	ldr	r0, [r5, #0]
 8009bd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009bda:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009be0:	d007      	beq.n	8009bf2 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009be2:	0719      	lsls	r1, r3, #28
 8009be4:	d518      	bpl.n	8009c18 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009be6:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009be8:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8009bea:	4620      	mov	r0, r4
 8009bec:	b009      	add	sp, #36	; 0x24
 8009bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009bf2:	029b      	lsls	r3, r3, #10
 8009bf4:	d507      	bpl.n	8009c06 <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009bf6:	f002 ff61 	bl	800cabc <SDMMC_ReadFIFO>
 8009bfa:	ab08      	add	r3, sp, #32
 8009bfc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8009c00:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009c02:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c06:	f7fb fbf1 	bl	80053ec <HAL_GetTick>
 8009c0a:	eba0 0009 	sub.w	r0, r0, r9
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d1e1      	bne.n	8009bd6 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8009c12:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009c16:	e7e8      	b.n	8009bea <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009c18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c1a:	079a      	lsls	r2, r3, #30
 8009c1c:	d501      	bpl.n	8009c22 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009c1e:	2402      	movs	r4, #2
 8009c20:	e7e2      	b.n	8009be8 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c24:	069b      	lsls	r3, r3, #26
 8009c26:	d501      	bpl.n	8009c2c <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009c28:	2420      	movs	r4, #32
 8009c2a:	e7dd      	b.n	8009be8 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c2c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8009c30:	6383      	str	r3, [r0, #56]	; 0x38
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009c36:	6073      	str	r3, [r6, #4]
 8009c38:	9b01      	ldr	r3, [sp, #4]
 8009c3a:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009c3c:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8009c3e:	e7d4      	b.n	8009bea <SD_FindSCR+0x74>

08009c40 <HAL_SD_ReadBlocks_DMA>:
{
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	4616      	mov	r6, r2
 8009c46:	b086      	sub	sp, #24
 8009c48:	4605      	mov	r5, r0
 8009c4a:	461f      	mov	r7, r3
  if(NULL == pData)
 8009c4c:	460a      	mov	r2, r1
 8009c4e:	b939      	cbnz	r1, 8009c60 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c56:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009c58:	2001      	movs	r0, #1
}
 8009c5a:	b006      	add	sp, #24
 8009c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009c60:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009c64:	b2c0      	uxtb	r0, r0
 8009c66:	2801      	cmp	r0, #1
 8009c68:	d166      	bne.n	8009d38 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c6a:	19f4      	adds	r4, r6, r7
 8009c6c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c6e:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c70:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c72:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c74:	d904      	bls.n	8009c80 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c76:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c7c:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8009c7e:	e7ec      	b.n	8009c5a <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8009c80:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8009c82:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009c84:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8009c88:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009c8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009c90:	492a      	ldr	r1, [pc, #168]	; (8009d3c <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009c92:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 8009c96:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009c98:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8009c9a:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009c9c:	4928      	ldr	r1, [pc, #160]	; (8009d40 <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8009c9e:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009ca0:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009ca4:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009ca6:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8009caa:	f7fb ff91 	bl	8005bd0 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8009cae:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cb0:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 8009cb2:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 8009cb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cb6:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cbe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009cc0:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009cc6:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009cca:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 8009cce:	bf18      	it	ne
 8009cd0:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009cd2:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8009cdc:	f002 ffde 	bl	800cc9c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ce4:	6828      	ldr	r0, [r5, #0]
 8009ce6:	f003 f827 	bl	800cd38 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cea:	b148      	cbz	r0, 8009d00 <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009cf4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009cf6:	4318      	orrs	r0, r3
 8009cf8:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009cfa:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8009cfe:	e7ab      	b.n	8009c58 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8009d00:	2f01      	cmp	r7, #1
 8009d02:	d912      	bls.n	8009d2a <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d04:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009d06:	4631      	mov	r1, r6
 8009d08:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009d0a:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8009d0c:	f003 f844 	bl	800cd98 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d0a2      	beq.n	8009c5a <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009d1e:	4318      	orrs	r0, r3
 8009d20:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d22:	2001      	movs	r0, #1
 8009d24:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009d28:	e797      	b.n	8009c5a <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d2a:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009d30:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009d32:	f003 f819 	bl	800cd68 <SDMMC_CmdReadSingleBlock>
 8009d36:	e7eb      	b.n	8009d10 <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 8009d38:	2002      	movs	r0, #2
 8009d3a:	e78e      	b.n	8009c5a <HAL_SD_ReadBlocks_DMA+0x1a>
 8009d3c:	08009e3f 	.word	0x08009e3f
 8009d40:	0800a445 	.word	0x0800a445

08009d44 <HAL_SD_WriteBlocks_DMA>:
{
 8009d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d46:	4604      	mov	r4, r0
 8009d48:	b087      	sub	sp, #28
 8009d4a:	4615      	mov	r5, r2
 8009d4c:	461e      	mov	r6, r3
  if(NULL == pData)
 8009d4e:	460f      	mov	r7, r1
 8009d50:	b931      	cbnz	r1, 8009d60 <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009d54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d58:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8009d5a:	2001      	movs	r0, #1
}
 8009d5c:	b007      	add	sp, #28
 8009d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8009d60:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009d64:	b2c0      	uxtb	r0, r0
 8009d66:	2801      	cmp	r0, #1
 8009d68:	d162      	bne.n	8009e30 <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d6a:	18eb      	adds	r3, r5, r3
 8009d6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d6e:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d70:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d72:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d74:	d904      	bls.n	8009d80 <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d7c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8009d7e:	e7ed      	b.n	8009d5c <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 8009d80:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8009d82:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009d84:	492b      	ldr	r1, [pc, #172]	; (8009e34 <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 8009d86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8009d8a:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8009d8c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009d8e:	f043 031a 	orr.w	r3, r3, #26
 8009d92:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d96:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009d98:	4927      	ldr	r1, [pc, #156]	; (8009e38 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8009d9a:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009d9c:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009da2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009da4:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 8009da6:	bf18      	it	ne
 8009da8:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009daa:	f002 ffc5 	bl	800cd38 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dae:	b150      	cbz	r0, 8009dc6 <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dba:	4318      	orrs	r0, r3
 8009dbc:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8009dc4:	e7ca      	b.n	8009d5c <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8009dc6:	2e01      	cmp	r6, #1
 8009dc8:	d90f      	bls.n	8009dea <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009dca:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009dcc:	4629      	mov	r1, r5
 8009dce:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009dd0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009dd2:	f003 f811 	bl	800cdf8 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	b168      	cbz	r0, 8009df8 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009ddc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8009de0:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009de2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009de4:	4305      	orrs	r5, r0
 8009de6:	63a5      	str	r5, [r4, #56]	; 0x38
 8009de8:	e7e9      	b.n	8009dbe <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009dea:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009dec:	4629      	mov	r1, r5
 8009dee:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009df0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009df2:	f002 ffe9 	bl	800cdc8 <SDMMC_CmdWriteSingleBlock>
 8009df6:	e7ee      	b.n	8009dd6 <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 8009df8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009dfa:	0276      	lsls	r6, r6, #9
 8009dfc:	3280      	adds	r2, #128	; 0x80
 8009dfe:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 8009e00:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009e04:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8009e06:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009e0a:	08b3      	lsrs	r3, r6, #2
 8009e0c:	f7fb fee0 	bl	8005bd0 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 8009e14:	4669      	mov	r1, sp
 8009e16:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009e18:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009e1a:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009e1c:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009e20:	2390      	movs	r3, #144	; 0x90
 8009e22:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e24:	2301      	movs	r3, #1
 8009e26:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8009e28:	f002 ff38 	bl	800cc9c <SDMMC_ConfigData>
    return HAL_OK;
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	e795      	b.n	8009d5c <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8009e30:	2002      	movs	r0, #2
 8009e32:	e793      	b.n	8009d5c <HAL_SD_WriteBlocks_DMA+0x18>
 8009e34:	08009b69 	.word	0x08009b69
 8009e38:	0800a445 	.word	0x0800a445

08009e3c <HAL_SD_ErrorCallback>:
 8009e3c:	4770      	bx	lr

08009e3e <SD_DMAReceiveCplt>:
{
 8009e3e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e40:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009e42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e44:	2b82      	cmp	r3, #130	; 0x82
 8009e46:	d109      	bne.n	8009e5c <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e48:	6820      	ldr	r0, [r4, #0]
 8009e4a:	f002 ffed 	bl	800ce28 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	b128      	cbz	r0, 8009e5c <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 8009e50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e52:	4318      	orrs	r0, r3
 8009e54:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8009e56:	4620      	mov	r0, r4
 8009e58:	f7ff fff0 	bl	8009e3c <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009e5c:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 8009e5e:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e62:	f022 0208 	bic.w	r2, r2, #8
 8009e66:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8009e74:	f7f8 fd36 	bl	80028e4 <HAL_SD_RxCpltCallback>
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8009e7a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8009e7c:	0f9a      	lsrs	r2, r3, #30
 8009e7e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8009e80:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8009e84:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8009e86:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8009e8a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8009e8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009e90:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8009e92:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009e96:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8009e98:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009e9a:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8009e9c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009e9e:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8009ea0:	0112      	lsls	r2, r2, #4
 8009ea2:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009ea4:	88ca      	ldrh	r2, [r1, #6]
{
 8009ea6:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009ea8:	b292      	uxth	r2, r2
 8009eaa:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8009eae:	4322      	orrs	r2, r4
 8009eb0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8009eb2:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8009eb6:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8009eb8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8009ebc:	09d4      	lsrs	r4, r2, #7
 8009ebe:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8009ec0:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8009ec4:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8009ec6:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8009eca:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8009ecc:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8009ed0:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8009ed2:	2400      	movs	r4, #0
 8009ed4:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009ed6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	f040 8083 	bne.w	8009fe4 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009ede:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 8009ee0:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009ee2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8009ee6:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009eea:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8009eec:	690a      	ldr	r2, [r1, #16]
 8009eee:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009ef0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 8009ef2:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8009ef4:	690b      	ldr	r3, [r1, #16]
 8009ef6:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8009efa:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8009efc:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8009f00:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8009f02:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8009f06:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8009f08:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8009f0c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8009f0e:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8009f12:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8009f14:	0bd3      	lsrs	r3, r2, #15
 8009f16:	f003 0306 	and.w	r3, r3, #6
 8009f1a:	760b      	strb	r3, [r1, #24]
 8009f1c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8009f20:	7e0c      	ldrb	r4, [r1, #24]
 8009f22:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009f26:	4322      	orrs	r2, r4
 8009f28:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009f2a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009f2c:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009f2e:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009f30:	3402      	adds	r4, #2
 8009f32:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009f34:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009f36:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009f38:	7a0d      	ldrb	r5, [r1, #8]
 8009f3a:	40ac      	lsls	r4, r5
 8009f3c:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8009f3e:	0a64      	lsrs	r4, r4, #9
 8009f40:	4362      	muls	r2, r4
 8009f42:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8009f44:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009f48:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009f4a:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009f4e:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009f50:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009f52:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009f56:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8009f58:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009f5a:	7e8a      	ldrb	r2, [r1, #26]
 8009f5c:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009f64:	4322      	orrs	r2, r4
 8009f66:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009f68:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8009f6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009f6c:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009f6e:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009f72:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8009f74:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8009f78:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8009f7a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8009f7e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8009f80:	0d9a      	lsrs	r2, r3, #22
 8009f82:	f002 020c 	and.w	r2, r2, #12
 8009f86:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009f88:	7fca      	ldrb	r2, [r1, #31]
 8009f8a:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8009f8c:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009f8e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8009f90:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8009f94:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009f98:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8009f9c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009fa0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8009fa4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8009fa8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8009fac:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8009fb0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8009fb4:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8009fb8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8009fbc:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8009fc0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8009fc4:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8009fc8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8009fcc:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8009fd0:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8009fd4:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8009fd8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009fe2:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fe4:	2c01      	cmp	r4, #1
 8009fe6:	d11a      	bne.n	800a01e <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8009fe8:	041b      	lsls	r3, r3, #16
 8009fea:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009fee:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009ff0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 8009ff2:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009ff4:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8009ff6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8009ffa:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8009ffc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800a000:	690c      	ldr	r4, [r1, #16]
 800a002:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800a006:	4322      	orrs	r2, r4
 800a008:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800a00a:	690a      	ldr	r2, [r1, #16]
 800a00c:	0292      	lsls	r2, r2, #10
 800a00e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a012:	6542      	str	r2, [r0, #84]	; 0x54
 800a014:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800a016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a01a:	6582      	str	r2, [r0, #88]	; 0x58
 800a01c:	e794      	b.n	8009f48 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800a01e:	6803      	ldr	r3, [r0, #0]
 800a020:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a024:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a026:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a02e:	2301      	movs	r3, #1
 800a030:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800a034:	4618      	mov	r0, r3
 800a036:	bd30      	pop	{r4, r5, pc}

0800a038 <HAL_SD_InitCard>:
{
 800a038:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a03a:	2376      	movs	r3, #118	; 0x76
{
 800a03c:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a03e:	2500      	movs	r5, #0
{
 800a040:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a042:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 800a044:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a046:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a048:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a04a:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a04c:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a04e:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 800a050:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a054:	ab07      	add	r3, sp, #28
 800a056:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a05e:	f002 fcd1 	bl	800ca04 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800a062:	6820      	ldr	r0, [r4, #0]
 800a064:	6843      	ldr	r3, [r0, #4]
 800a066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06a:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 800a06c:	f002 fd29 	bl	800cac2 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800a070:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800a072:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 800a074:	6853      	ldr	r3, [r2, #4]
 800a076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07a:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800a07c:	f7fb f9bc 	bl	80053f8 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a080:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800a082:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a084:	f002 ff02 	bl	800ce8c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a088:	4606      	mov	r6, r0
 800a08a:	b968      	cbnz	r0, 800a0a8 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a08c:	6820      	ldr	r0, [r4, #0]
 800a08e:	f002 ff25 	bl	800cedc <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a092:	b380      	cbz	r0, 800a0f6 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a094:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a098:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a09a:	9b06      	ldr	r3, [sp, #24]
 800a09c:	1c5a      	adds	r2, r3, #1
 800a09e:	42ab      	cmp	r3, r5
 800a0a0:	9206      	str	r2, [sp, #24]
 800a0a2:	d108      	bne.n	800a0b6 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a0a4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a0ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a0b0:	430e      	orrs	r6, r1
 800a0b2:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 800a0b4:	e083      	b.n	800a1be <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	f002 ff47 	bl	800cf4c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a0be:	4601      	mov	r1, r0
 800a0c0:	b110      	cbz	r0, 800a0c8 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0c2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 800a0c6:	e7ef      	b.n	800a0a8 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	f002 ff57 	bl	800cf7c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1f6      	bne.n	800a0c2 <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	f002 fd3d 	bl	800cb54 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	dadd      	bge.n	800a09a <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 800a0de:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a0e0:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 800a0e2:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a0e4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 800a0e6:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a0ea:	f002 fcee 	bl	800caca <SDMMC_GetPowerState>
 800a0ee:	bb20      	cbnz	r0, 800a13a <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0f0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800a0f4:	e06d      	b.n	800a1d2 <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0f6:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a0f8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a0fc:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a0fe:	9b06      	ldr	r3, [sp, #24]
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	42ab      	cmp	r3, r5
 800a104:	9206      	str	r2, [sp, #24]
 800a106:	d0cd      	beq.n	800a0a4 <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a108:	2100      	movs	r1, #0
 800a10a:	6820      	ldr	r0, [r4, #0]
 800a10c:	f002 ff1e 	bl	800cf4c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a110:	4606      	mov	r6, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d1c8      	bne.n	800a0a8 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800a116:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a11a:	6820      	ldr	r0, [r4, #0]
 800a11c:	f002 ff2e 	bl	800cf7c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800a120:	4606      	mov	r6, r0
 800a122:	2800      	cmp	r0, #0
 800a124:	d1c0      	bne.n	800a0a8 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a126:	4601      	mov	r1, r0
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	f002 fd13 	bl	800cb54 <SDMMC_GetResponse>
    while(validvoltage == 0)
 800a12e:	2800      	cmp	r0, #0
 800a130:	dae5      	bge.n	800a0fe <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a132:	0043      	lsls	r3, r0, #1
 800a134:	d5d3      	bpl.n	800a0de <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a136:	2301      	movs	r3, #1
 800a138:	e7d2      	b.n	800a0e0 <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a13a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d01a      	beq.n	800a176 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	f002 ff4c 	bl	800cfde <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a146:	4605      	mov	r5, r0
 800a148:	2800      	cmp	r0, #0
 800a14a:	d142      	bne.n	800a1d2 <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a14c:	4601      	mov	r1, r0
 800a14e:	6820      	ldr	r0, [r4, #0]
 800a150:	f002 fd00 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a154:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a156:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a158:	6820      	ldr	r0, [r4, #0]
 800a15a:	f002 fcfb 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a15e:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a160:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a162:	6820      	ldr	r0, [r4, #0]
 800a164:	f002 fcf6 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a168:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a16a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a16c:	6820      	ldr	r0, [r4, #0]
 800a16e:	f002 fcf1 	bl	800cb54 <SDMMC_GetResponse>
 800a172:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a176:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d122      	bne.n	800a1c2 <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a17c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d12e      	bne.n	800a1e0 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a182:	2104      	movs	r1, #4
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	f002 fce5 	bl	800cb54 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a18a:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a18c:	0d00      	lsrs	r0, r0, #20
 800a18e:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a190:	4620      	mov	r0, r4
 800a192:	f7ff fe72 	bl	8009e7a <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800a196:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a198:	2300      	movs	r3, #0
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	0412      	lsls	r2, r2, #16
 800a19e:	f002 fe5d 	bl	800ce5c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	b9a8      	cbnz	r0, 800a1d2 <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 800a1a6:	f104 0310 	add.w	r3, r4, #16
 800a1aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1ae:	1d23      	adds	r3, r4, #4
 800a1b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1b8:	f002 fc24 	bl	800ca04 <SDMMC_Init>
  return HAL_OK;
 800a1bc:	4628      	mov	r0, r5
}
 800a1be:	b018      	add	sp, #96	; 0x60
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a1c2:	f10d 0116 	add.w	r1, sp, #22
 800a1c6:	6820      	ldr	r0, [r4, #0]
 800a1c8:	f002 ff34 	bl	800d034 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d0d4      	beq.n	800a17c <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a1da:	431d      	orrs	r5, r3
 800a1dc:	63a5      	str	r5, [r4, #56]	; 0x38
 800a1de:	e7ee      	b.n	800a1be <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 800a1e0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e4:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a1e6:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e8:	0409      	lsls	r1, r1, #16
 800a1ea:	f002 ff0d 	bl	800d008 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1ee      	bne.n	800a1d2 <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1f4:	4601      	mov	r1, r0
 800a1f6:	6820      	ldr	r0, [r4, #0]
 800a1f8:	f002 fcac 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a1fc:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1fe:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a200:	6820      	ldr	r0, [r4, #0]
 800a202:	f002 fca7 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a206:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a208:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a20a:	6820      	ldr	r0, [r4, #0]
 800a20c:	f002 fca2 	bl	800cb54 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a210:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a212:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a214:	6820      	ldr	r0, [r4, #0]
 800a216:	f002 fc9d 	bl	800cb54 <SDMMC_GetResponse>
 800a21a:	6720      	str	r0, [r4, #112]	; 0x70
 800a21c:	e7b1      	b.n	800a182 <HAL_SD_InitCard+0x14a>
	...

0800a220 <HAL_SD_Init>:
{
 800a220:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800a222:	4604      	mov	r4, r0
 800a224:	2800      	cmp	r0, #0
 800a226:	d056      	beq.n	800a2d6 <HAL_SD_Init+0xb6>
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 800a228:	6802      	ldr	r2, [r0, #0]
 800a22a:	4b2c      	ldr	r3, [pc, #176]	; (800a2dc <HAL_SD_Init+0xbc>)
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d004      	beq.n	800a23a <HAL_SD_Init+0x1a>
 800a230:	f240 1155 	movw	r1, #341	; 0x155
 800a234:	482a      	ldr	r0, [pc, #168]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a236:	f7f7 fcb8 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a240:	d004      	beq.n	800a24c <HAL_SD_Init+0x2c>
 800a242:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800a246:	4826      	ldr	r0, [pc, #152]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a248:	f7f7 fcaf 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a252:	d004      	beq.n	800a25e <HAL_SD_Init+0x3e>
 800a254:	f240 1157 	movw	r1, #343	; 0x157
 800a258:	4821      	ldr	r0, [pc, #132]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a25a:	f7f7 fca6 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a264:	d004      	beq.n	800a270 <HAL_SD_Init+0x50>
 800a266:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800a26a:	481d      	ldr	r0, [pc, #116]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a26c:	f7f7 fc9d 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a276:	d007      	beq.n	800a288 <HAL_SD_Init+0x68>
 800a278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27c:	d004      	beq.n	800a288 <HAL_SD_Init+0x68>
 800a27e:	f240 1159 	movw	r1, #345	; 0x159
 800a282:	4817      	ldr	r0, [pc, #92]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a284:	f7f7 fc91 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 800a288:	6963      	ldr	r3, [r4, #20]
 800a28a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a28e:	d004      	beq.n	800a29a <HAL_SD_Init+0x7a>
 800a290:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 800a294:	4812      	ldr	r0, [pc, #72]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a296:	f7f7 fc88 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 800a29a:	69a3      	ldr	r3, [r4, #24]
 800a29c:	2bff      	cmp	r3, #255	; 0xff
 800a29e:	d904      	bls.n	800a2aa <HAL_SD_Init+0x8a>
 800a2a0:	f240 115b 	movw	r1, #347	; 0x15b
 800a2a4:	480e      	ldr	r0, [pc, #56]	; (800a2e0 <HAL_SD_Init+0xc0>)
 800a2a6:	f7f7 fc80 	bl	8001baa <assert_failed>
  if(hsd->State == HAL_SD_STATE_RESET)
 800a2aa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a2ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a2b2:	b91b      	cbnz	r3, 800a2bc <HAL_SD_Init+0x9c>
    hsd->Lock = HAL_UNLOCKED;
 800a2b4:	7722      	strb	r2, [r4, #28]
    HAL_SD_MspInit(hsd);
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7f7 fe30 	bl	8001f1c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800a2bc:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 800a2be:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800a2c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 800a2c4:	f7ff feb8 	bl	800a038 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2c8:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800a2ca:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2cc:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800a2ce:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800a2d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a2d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a2d6:	2001      	movs	r0, #1
}
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	40012c00 	.word	0x40012c00
 800a2e0:	08034f8e 	.word	0x08034f8e

0800a2e4 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a2e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a2e6:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a2e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a2ea:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a2ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a2ee:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a2f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a2f2:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a2f4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a2f6:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a2f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a2fa:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a2fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800a2fe:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a300:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 800a302:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a304:	61cb      	str	r3, [r1, #28]
}
 800a306:	4770      	bx	lr

0800a308 <HAL_SD_ConfigWideBusOperation>:
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a308:	f431 6300 	bics.w	r3, r1, #2048	; 0x800
{
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4604      	mov	r4, r0
 800a310:	b08a      	sub	sp, #40	; 0x28
 800a312:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800a314:	d007      	beq.n	800a326 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a316:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a31a:	d004      	beq.n	800a326 <HAL_SD_ConfigWideBusOperation+0x1e>
 800a31c:	f640 01b6 	movw	r1, #2230	; 0x8b6
 800a320:	483d      	ldr	r0, [pc, #244]	; (800a418 <HAL_SD_ConfigWideBusOperation+0x110>)
 800a322:	f7f7 fc42 	bl	8001baa <assert_failed>
  hsd->State = HAL_SD_STATE_BUSY;
 800a326:	2303      	movs	r3, #3
 800a328:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a32c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d002      	beq.n	800a338 <HAL_SD_ConfigWideBusOperation+0x30>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a332:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a336:	d103      	bne.n	800a340 <HAL_SD_ConfigWideBusOperation+0x38>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a33a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a33e:	e04f      	b.n	800a3e0 <HAL_SD_ConfigWideBusOperation+0xd8>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a340:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a344:	d128      	bne.n	800a398 <HAL_SD_ConfigWideBusOperation+0x90>
  uint32_t scr[2] = {0, 0};
 800a346:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a348:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a34a:	9104      	str	r1, [sp, #16]
 800a34c:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a34e:	f002 fc01 	bl	800cb54 <SDMMC_GetResponse>
 800a352:	0180      	lsls	r0, r0, #6
 800a354:	d43b      	bmi.n	800a3ce <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800a356:	a904      	add	r1, sp, #16
 800a358:	4620      	mov	r0, r4
 800a35a:	f7ff fc0c 	bl	8009b76 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800a35e:	b960      	cbnz	r0, 800a37a <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a360:	9b05      	ldr	r3, [sp, #20]
 800a362:	0359      	lsls	r1, r3, #13
 800a364:	d536      	bpl.n	800a3d4 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a366:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	0409      	lsls	r1, r1, #16
 800a36c:	f002 fdee 	bl	800cf4c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800a370:	b918      	cbnz	r0, 800a37a <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800a372:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a374:	6820      	ldr	r0, [r4, #0]
 800a376:	f002 fee1 	bl	800d13c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a37a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a37c:	4318      	orrs	r0, r3
 800a37e:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a380:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a382:	2e00      	cmp	r6, #0
 800a384:	d02e      	beq.n	800a3e4 <HAL_SD_ConfigWideBusOperation+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800a38c:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a390:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 800a394:	b00a      	add	sp, #40	; 0x28
 800a396:	bd70      	pop	{r4, r5, r6, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a398:	b9fd      	cbnz	r5, 800a3da <HAL_SD_ConfigWideBusOperation+0xd2>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a39a:	4629      	mov	r1, r5
 800a39c:	6820      	ldr	r0, [r4, #0]
  uint32_t scr[2] = {0, 0};
 800a39e:	9504      	str	r5, [sp, #16]
 800a3a0:	9505      	str	r5, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a3a2:	f002 fbd7 	bl	800cb54 <SDMMC_GetResponse>
 800a3a6:	0182      	lsls	r2, r0, #6
 800a3a8:	d411      	bmi.n	800a3ce <HAL_SD_ConfigWideBusOperation+0xc6>
  errorstate = SD_FindSCR(hsd, scr);
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f7ff fbe2 	bl	8009b76 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d1e1      	bne.n	800a37a <HAL_SD_ConfigWideBusOperation+0x72>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3b6:	9b05      	ldr	r3, [sp, #20]
 800a3b8:	03db      	lsls	r3, r3, #15
 800a3ba:	d50b      	bpl.n	800a3d4 <HAL_SD_ConfigWideBusOperation+0xcc>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a3bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a3be:	6820      	ldr	r0, [r4, #0]
 800a3c0:	0409      	lsls	r1, r1, #16
 800a3c2:	f002 fdc3 	bl	800cf4c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d1d7      	bne.n	800a37a <HAL_SD_ConfigWideBusOperation+0x72>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	e7d2      	b.n	800a374 <HAL_SD_ConfigWideBusOperation+0x6c>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a3ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a3d2:	e7d2      	b.n	800a37a <HAL_SD_ConfigWideBusOperation+0x72>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a3d8:	e7cf      	b.n	800a37a <HAL_SD_ConfigWideBusOperation+0x72>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3e2:	e7cd      	b.n	800a380 <HAL_SD_ConfigWideBusOperation+0x78>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a3e4:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 800a3e6:	9507      	str	r5, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a3e8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a3f2:	6963      	ldr	r3, [r4, #20]
 800a3f4:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a3f6:	69a3      	ldr	r3, [r4, #24]
 800a3f8:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 800a3fa:	ab0a      	add	r3, sp, #40	; 0x28
 800a3fc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a400:	ab04      	add	r3, sp, #16
 800a402:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a40a:	f002 fafb 	bl	800ca04 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800a40e:	2301      	movs	r3, #1
  return HAL_OK;
 800a410:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 800a412:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800a416:	e7bd      	b.n	800a394 <HAL_SD_ConfigWideBusOperation+0x8c>
 800a418:	08034f8e 	.word	0x08034f8e

0800a41c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a41c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800a41e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a420:	0409      	lsls	r1, r1, #16
{
 800a422:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a424:	6800      	ldr	r0, [r0, #0]
 800a426:	f002 fe59 	bl	800d0dc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800a42a:	4601      	mov	r1, r0
 800a42c:	b928      	cbnz	r0, 800a43a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a42e:	6820      	ldr	r0, [r4, #0]
 800a430:	f002 fb90 	bl	800cb54 <SDMMC_GetResponse>
  return cardstate;
 800a434:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a438:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800a43a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800a43c:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800a43e:	4319      	orrs	r1, r3
 800a440:	63a1      	str	r1, [r4, #56]	; 0x38
 800a442:	e7f7      	b.n	800a434 <HAL_SD_GetCardState+0x18>

0800a444 <SD_DMAError>:
{
 800a444:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a446:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a448:	f7fb fc14 	bl	8005c74 <HAL_DMA_GetError>
 800a44c:	2802      	cmp	r0, #2
 800a44e:	d026      	beq.n	800a49e <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800a450:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a454:	2b01      	cmp	r3, #1
 800a456:	d003      	beq.n	800a460 <SD_DMAError+0x1c>
 800a458:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d11b      	bne.n	800a498 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 800a466:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a46a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a470:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a478:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a47a:	f7ff ffcf 	bl	800a41c <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a47e:	3805      	subs	r0, #5
 800a480:	b2c0      	uxtb	r0, r0
 800a482:	2801      	cmp	r0, #1
 800a484:	d805      	bhi.n	800a492 <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a486:	6820      	ldr	r0, [r4, #0]
 800a488:	f002 fcce 	bl	800ce28 <SDMMC_CmdStopTransfer>
 800a48c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a48e:	4318      	orrs	r0, r3
 800a490:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a492:	2301      	movs	r3, #1
 800a494:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 800a498:	4620      	mov	r0, r4
 800a49a:	f7ff fccf 	bl	8009e3c <HAL_SD_ErrorCallback>
 800a49e:	bd10      	pop	{r4, pc}

0800a4a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	b1c8      	cbz	r0, 800a4dc <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a4a8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a4ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a4b0:	b91b      	cbnz	r3, 800a4ba <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a4b2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a4b6:	f7f9 fcb9 	bl	8003e2c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4ba:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4bc:	1d21      	adds	r1, r4, #4
 800a4be:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4c4:	f002 f8a4 	bl	800c610 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a4c8:	6862      	ldr	r2, [r4, #4]
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	f002 f94d 	bl	800c76c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4d2:	2301      	movs	r3, #1
  
  return HAL_OK;
 800a4d4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a4da:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a4dc:	2001      	movs	r0, #1
}
 800a4de:	bd38      	pop	{r3, r4, r5, pc}

0800a4e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4e4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800a4e8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4ea:	b2c0      	uxtb	r0, r0
 800a4ec:	2802      	cmp	r0, #2
 800a4ee:	d00d      	beq.n	800a50c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4f0:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4f2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4f4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4f8:	f002 f9d6 	bl	800c8a8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4fc:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800a4fe:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a500:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a502:	bf0c      	ite	eq
 800a504:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a506:	2301      	movne	r3, #1
 800a508:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a50c:	bd38      	pop	{r3, r4, r5, pc}

0800a50e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a50e:	b510      	push	{r4, lr}
 800a510:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a512:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800a516:	b2c0      	uxtb	r0, r0
 800a518:	2802      	cmp	r0, #2
 800a51a:	d009      	beq.n	800a530 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a51c:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a51e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a520:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a524:	f002 fa08 	bl	800c938 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a528:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800a52a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a52c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a530:	bd10      	pop	{r4, pc}
	...

0800a534 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a534:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a536:	4604      	mov	r4, r0
 800a538:	2800      	cmp	r0, #0
 800a53a:	f000 8085 	beq.w	800a648 <HAL_SPDIFRX_Init+0x114>
  {
    return HAL_ERROR;
  }

  /* Check the SPDIFRX parameters */
  assert_param(IS_STEREO_MODE(hspdif->Init.StereoMode));
 800a53e:	6983      	ldr	r3, [r0, #24]
 800a540:	f033 0308 	bics.w	r3, r3, #8
 800a544:	d003      	beq.n	800a54e <HAL_SPDIFRX_Init+0x1a>
 800a546:	21f7      	movs	r1, #247	; 0xf7
 800a548:	4840      	ldr	r0, [pc, #256]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a54a:	f7f7 fb2e 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_INPUT_SELECT(hspdif->Init.InputSelection));
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800a554:	d003      	beq.n	800a55e <HAL_SPDIFRX_Init+0x2a>
 800a556:	21f8      	movs	r1, #248	; 0xf8
 800a558:	483c      	ldr	r0, [pc, #240]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a55a:	f7f7 fb26 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_MAX_RETRIES(hspdif->Init.Retries));
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800a564:	d003      	beq.n	800a56e <HAL_SPDIFRX_Init+0x3a>
 800a566:	21f9      	movs	r1, #249	; 0xf9
 800a568:	4838      	ldr	r0, [pc, #224]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a56a:	f7f7 fb1e 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_WAIT_FOR_ACTIVITY(hspdif->Init.WaitForActivity));
 800a56e:	68e3      	ldr	r3, [r4, #12]
 800a570:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a574:	d003      	beq.n	800a57e <HAL_SPDIFRX_Init+0x4a>
 800a576:	21fa      	movs	r1, #250	; 0xfa
 800a578:	4834      	ldr	r0, [pc, #208]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a57a:	f7f7 fb16 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_CHANNEL(hspdif->Init.ChannelSelection));
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a584:	d003      	beq.n	800a58e <HAL_SPDIFRX_Init+0x5a>
 800a586:	21fb      	movs	r1, #251	; 0xfb
 800a588:	4830      	ldr	r0, [pc, #192]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a58a:	f7f7 fb0e 	bl	8001baa <assert_failed>
  assert_param(IS_SPDIFRX_DATA_FORMAT(hspdif->Init.DataFormat));
 800a58e:	6963      	ldr	r3, [r4, #20]
 800a590:	f033 0210 	bics.w	r2, r3, #16
 800a594:	d005      	beq.n	800a5a2 <HAL_SPDIFRX_Init+0x6e>
 800a596:	2b20      	cmp	r3, #32
 800a598:	d003      	beq.n	800a5a2 <HAL_SPDIFRX_Init+0x6e>
 800a59a:	21fc      	movs	r1, #252	; 0xfc
 800a59c:	482b      	ldr	r0, [pc, #172]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a59e:	f7f7 fb04 	bl	8001baa <assert_failed>
  assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
 800a5a2:	69e3      	ldr	r3, [r4, #28]
 800a5a4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a5a8:	d003      	beq.n	800a5b2 <HAL_SPDIFRX_Init+0x7e>
 800a5aa:	21fd      	movs	r1, #253	; 0xfd
 800a5ac:	4827      	ldr	r0, [pc, #156]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a5ae:	f7f7 fafc 	bl	8001baa <assert_failed>
  assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
 800a5b2:	6a23      	ldr	r3, [r4, #32]
 800a5b4:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a5b8:	d003      	beq.n	800a5c2 <HAL_SPDIFRX_Init+0x8e>
 800a5ba:	21fe      	movs	r1, #254	; 0xfe
 800a5bc:	4823      	ldr	r0, [pc, #140]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a5be:	f7f7 faf4 	bl	8001baa <assert_failed>
  assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
 800a5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5c4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a5c8:	d003      	beq.n	800a5d2 <HAL_SPDIFRX_Init+0x9e>
 800a5ca:	21ff      	movs	r1, #255	; 0xff
 800a5cc:	481f      	ldr	r0, [pc, #124]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a5ce:	f7f7 faec 	bl	8001baa <assert_failed>
  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
 800a5d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5d4:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800a5d8:	d004      	beq.n	800a5e4 <HAL_SPDIFRX_Init+0xb0>
 800a5da:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5de:	481b      	ldr	r0, [pc, #108]	; (800a64c <HAL_SPDIFRX_Init+0x118>)
 800a5e0:	f7f7 fae3 	bl	8001baa <assert_failed>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a5e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a5e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5ec:	b923      	cbnz	r3, 800a5f8 <HAL_SPDIFRX_Init+0xc4>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a5ee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f7f7 fcf8 	bl	8001fe8 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a5f8:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a5fa:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a5fc:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 800a602:	680b      	ldr	r3, [r1, #0]
 800a604:	f023 0303 	bic.w	r3, r3, #3
 800a608:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 800a60a:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 800a60c:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 800a60e:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 800a610:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a612:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 800a616:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 800a618:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a61a:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 800a61e:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 800a620:	6920      	ldr	r0, [r4, #16]
 800a622:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 800a624:	6960      	ldr	r0, [r4, #20]
 800a626:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 800a628:	69e0      	ldr	r0, [r4, #28]
 800a62a:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 800a62c:	6a20      	ldr	r0, [r4, #32]
 800a62e:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 800a630:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a632:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 800a634:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a636:	4303      	orrs	r3, r0
             );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a638:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 800a63a:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 800a63c:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a63e:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a640:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 800a646:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a648:	2001      	movs	r0, #1
}
 800a64a:	bd10      	pop	{r4, pc}
 800a64c:	08034fcb 	.word	0x08034fcb

0800a650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a650:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a652:	4604      	mov	r4, r0
 800a654:	2800      	cmp	r0, #0
 800a656:	f000 80e5 	beq.w	800a824 <HAL_SPI_Init+0x1d4>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a65a:	6803      	ldr	r3, [r0, #0]
 800a65c:	4a72      	ldr	r2, [pc, #456]	; (800a828 <HAL_SPI_Init+0x1d8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a662:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a666:	4293      	cmp	r3, r2
 800a668:	d014      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a66a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a66e:	4293      	cmp	r3, r2
 800a670:	d010      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a672:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a676:	4293      	cmp	r3, r2
 800a678:	d00c      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a67a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800a67e:	4293      	cmp	r3, r2
 800a680:	d008      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_SPI_Init+0x44>
 800a68a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a68e:	4867      	ldr	r0, [pc, #412]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a690:	f7f7 fa8b 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	b13b      	cbz	r3, 800a6a8 <HAL_SPI_Init+0x58>
 800a698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a69c:	d004      	beq.n	800a6a8 <HAL_SPI_Init+0x58>
 800a69e:	f240 1145 	movw	r1, #325	; 0x145
 800a6a2:	4862      	ldr	r0, [pc, #392]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a6a4:	f7f7 fa81 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800a6ae:	d007      	beq.n	800a6c0 <HAL_SPI_Init+0x70>
 800a6b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b4:	d004      	beq.n	800a6c0 <HAL_SPI_Init+0x70>
 800a6b6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a6ba:	485c      	ldr	r0, [pc, #368]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a6bc:	f7f7 fa75 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a6c0:	68e3      	ldr	r3, [r4, #12]
 800a6c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6c6:	d018      	beq.n	800a6fa <HAL_SPI_Init+0xaa>
 800a6c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6cc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800a6d0:	d013      	beq.n	800a6fa <HAL_SPI_Init+0xaa>
 800a6d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6d6:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800a6da:	d00e      	beq.n	800a6fa <HAL_SPI_Init+0xaa>
 800a6dc:	f423 6210 	bic.w	r2, r3, #2304	; 0x900
 800a6e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a6e4:	d009      	beq.n	800a6fa <HAL_SPI_Init+0xaa>
 800a6e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ee:	d004      	beq.n	800a6fa <HAL_SPI_Init+0xaa>
 800a6f0:	f240 1147 	movw	r1, #327	; 0x147
 800a6f4:	484d      	ldr	r0, [pc, #308]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a6f6:	f7f7 fa58 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a6fa:	69a3      	ldr	r3, [r4, #24]
 800a6fc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a700:	d007      	beq.n	800a712 <HAL_SPI_Init+0xc2>
 800a702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a706:	d004      	beq.n	800a712 <HAL_SPI_Init+0xc2>
 800a708:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a70c:	4847      	ldr	r0, [pc, #284]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a70e:	f7f7 fa4c 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a714:	f033 0308 	bics.w	r3, r3, #8
 800a718:	d004      	beq.n	800a724 <HAL_SPI_Init+0xd4>
 800a71a:	f240 1149 	movw	r1, #329	; 0x149
 800a71e:	4843      	ldr	r0, [pc, #268]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a720:	f7f7 fa43 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a724:	69e3      	ldr	r3, [r4, #28]
 800a726:	f033 0318 	bics.w	r3, r3, #24
 800a72a:	d006      	beq.n	800a73a <HAL_SPI_Init+0xea>
 800a72c:	2b20      	cmp	r3, #32
 800a72e:	d004      	beq.n	800a73a <HAL_SPI_Init+0xea>
 800a730:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a734:	483d      	ldr	r0, [pc, #244]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a736:	f7f7 fa38 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a73a:	6a23      	ldr	r3, [r4, #32]
 800a73c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a740:	d004      	beq.n	800a74c <HAL_SPI_Init+0xfc>
 800a742:	f240 114b 	movw	r1, #331	; 0x14b
 800a746:	4839      	ldr	r0, [pc, #228]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a748:	f7f7 fa2f 	bl	8001baa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74e:	f033 0310 	bics.w	r3, r3, #16
 800a752:	d004      	beq.n	800a75e <HAL_SPI_Init+0x10e>
 800a754:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a758:	4834      	ldr	r0, [pc, #208]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a75a:	f7f7 fa26 	bl	8001baa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a760:	b983      	cbnz	r3, 800a784 <HAL_SPI_Init+0x134>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	f033 0302 	bics.w	r3, r3, #2
 800a768:	d004      	beq.n	800a774 <HAL_SPI_Init+0x124>
 800a76a:	f240 114f 	movw	r1, #335	; 0x14f
 800a76e:	482f      	ldr	r0, [pc, #188]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a770:	f7f7 fa1b 	bl	8001baa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a774:	6963      	ldr	r3, [r4, #20]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d904      	bls.n	800a784 <HAL_SPI_Init+0x134>
 800a77a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a77e:	482b      	ldr	r0, [pc, #172]	; (800a82c <HAL_SPI_Init+0x1dc>)
 800a780:	f7f7 fa13 	bl	8001baa <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a784:	2300      	movs	r3, #0
 800a786:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a788:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800a78c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a790:	b923      	cbnz	r3, 800a79c <HAL_SPI_Init+0x14c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a792:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a796:	4620      	mov	r0, r4
 800a798:	f7f7 fc7a 	bl	8002090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a79c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a79e:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7a0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a7a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a7a6:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7a8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a7ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b0:	600b      	str	r3, [r1, #0]
 800a7b2:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7b6:	d932      	bls.n	800a81e <HAL_SPI_Init+0x1ce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a7b8:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a7ba:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7be:	bf18      	it	ne
 800a7c0:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a7c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a7c4:	b92b      	cbnz	r3, 800a7d2 <HAL_SPI_Init+0x182>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7c6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a7ca:	bf8c      	ite	hi
 800a7cc:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a7ce:	2301      	movls	r3, #1
 800a7d0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a7d2:	68a6      	ldr	r6, [r4, #8]
 800a7d4:	6863      	ldr	r3, [r4, #4]
 800a7d6:	69a5      	ldr	r5, [r4, #24]
 800a7d8:	4333      	orrs	r3, r6
 800a7da:	6926      	ldr	r6, [r4, #16]
 800a7dc:	4333      	orrs	r3, r6
 800a7de:	6966      	ldr	r6, [r4, #20]
 800a7e0:	4333      	orrs	r3, r6
 800a7e2:	69e6      	ldr	r6, [r4, #28]
 800a7e4:	4333      	orrs	r3, r6
 800a7e6:	6a26      	ldr	r6, [r4, #32]
 800a7e8:	4333      	orrs	r3, r6
 800a7ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7ec:	4333      	orrs	r3, r6
 800a7ee:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a7f2:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a7f4:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a7f6:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a7fa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a7fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7fe:	431a      	orrs	r2, r3
 800a800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a802:	431a      	orrs	r2, r3
 800a804:	432a      	orrs	r2, r5
 800a806:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a808:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a80a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a80c:	69cb      	ldr	r3, [r1, #28]
 800a80e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a812:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800a814:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a816:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a818:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a81e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a822:	e7cc      	b.n	800a7be <HAL_SPI_Init+0x16e>
    return HAL_ERROR;
 800a824:	2001      	movs	r0, #1
}
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	40013000 	.word	0x40013000
 800a82c:	0803500d 	.word	0x0803500d

0800a830 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a830:	6a03      	ldr	r3, [r0, #32]
 800a832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800a836:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a838:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a83a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a83c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a83e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a840:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800a844:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a84a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800a84e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a850:	688d      	ldr	r5, [r1, #8]
 800a852:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a856:	4d09      	ldr	r5, [pc, #36]	; (800a87c <TIM_OC5_SetConfig+0x4c>)
 800a858:	42a8      	cmp	r0, r5
 800a85a:	d003      	beq.n	800a864 <TIM_OC5_SetConfig+0x34>
 800a85c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a860:	42a8      	cmp	r0, r5
 800a862:	d104      	bne.n	800a86e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a864:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a868:	694d      	ldr	r5, [r1, #20]
 800a86a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a86e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a870:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a872:	684b      	ldr	r3, [r1, #4]
 800a874:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a876:	6202      	str	r2, [r0, #32]
 800a878:	bd30      	pop	{r4, r5, pc}
 800a87a:	bf00      	nop
 800a87c:	40010000 	.word	0x40010000

0800a880 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a880:	6a03      	ldr	r3, [r0, #32]
 800a882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800a886:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a888:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a88c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a88e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a890:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a894:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a89a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a89e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8a2:	688d      	ldr	r5, [r1, #8]
 800a8a4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8a8:	4d08      	ldr	r5, [pc, #32]	; (800a8cc <TIM_OC6_SetConfig+0x4c>)
 800a8aa:	42a8      	cmp	r0, r5
 800a8ac:	d003      	beq.n	800a8b6 <TIM_OC6_SetConfig+0x36>
 800a8ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a8b2:	42a8      	cmp	r0, r5
 800a8b4:	d104      	bne.n	800a8c0 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8b6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8ba:	694d      	ldr	r5, [r1, #20]
 800a8bc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8c2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a8c4:	684b      	ldr	r3, [r1, #4]
 800a8c6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c8:	6202      	str	r2, [r0, #32]
 800a8ca:	bd30      	pop	{r4, r5, pc}
 800a8cc:	40010000 	.word	0x40010000

0800a8d0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	f023 0301 	bic.w	r3, r3, #1
{
 800a8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8da:	6203      	str	r3, [r0, #32]
{
 800a8dc:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a8de:	6a05      	ldr	r5, [r0, #32]
{
 800a8e0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800a8e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a8e6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800a8e8:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx |= OC_Config->OCMode;
 800a8ec:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8f2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a8f6:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800a8f8:	688b      	ldr	r3, [r1, #8]
 800a8fa:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <TIM_OC1_SetConfig+0xa8>)
 800a8fe:	4298      	cmp	r0, r3
 800a900:	d003      	beq.n	800a90a <TIM_OC1_SetConfig+0x3a>
 800a902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a906:	4298      	cmp	r0, r3
 800a908:	d12e      	bne.n	800a968 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a90a:	68f3      	ldr	r3, [r6, #12]
 800a90c:	f033 0308 	bics.w	r3, r3, #8
 800a910:	d004      	beq.n	800a91c <TIM_OC1_SetConfig+0x4c>
 800a912:	f241 7176 	movw	r1, #6006	; 0x1776
 800a916:	4819      	ldr	r0, [pc, #100]	; (800a97c <TIM_OC1_SetConfig+0xac>)
 800a918:	f7f7 f947 	bl	8001baa <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800a91c:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a91e:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a922:	431d      	orrs	r5, r3
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	4b14      	ldr	r3, [pc, #80]	; (800a978 <TIM_OC1_SetConfig+0xa8>)
 800a926:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800a928:	f025 0504 	bic.w	r5, r5, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a92c:	d003      	beq.n	800a936 <TIM_OC1_SetConfig+0x66>
 800a92e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a932:	429c      	cmp	r4, r3
 800a934:	d118      	bne.n	800a968 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a936:	69b3      	ldr	r3, [r6, #24]
 800a938:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a93c:	d004      	beq.n	800a948 <TIM_OC1_SetConfig+0x78>
 800a93e:	f241 7183 	movw	r1, #6019	; 0x1783
 800a942:	480e      	ldr	r0, [pc, #56]	; (800a97c <TIM_OC1_SetConfig+0xac>)
 800a944:	f7f7 f931 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a948:	6973      	ldr	r3, [r6, #20]
 800a94a:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800a94e:	d004      	beq.n	800a95a <TIM_OC1_SetConfig+0x8a>
 800a950:	f241 7184 	movw	r1, #6020	; 0x1784
 800a954:	4809      	ldr	r0, [pc, #36]	; (800a97c <TIM_OC1_SetConfig+0xac>)
 800a956:	f7f7 f928 	bl	8001baa <assert_failed>
    tmpcr2 |= OC_Config->OCNIdleState;
 800a95a:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a95c:	f428 7840 	bic.w	r8, r8, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a960:	69b2      	ldr	r2, [r6, #24]
 800a962:	4313      	orrs	r3, r2
 800a964:	ea43 0808 	orr.w	r8, r3, r8
  TIMx->CCR1 = OC_Config->Pulse;
 800a968:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800a96a:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a96e:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800a970:	6363      	str	r3, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800a972:	6225      	str	r5, [r4, #32]
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	40010000 	.word	0x40010000
 800a97c:	0803504b 	.word	0x0803504b

0800a980 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a980:	6a03      	ldr	r3, [r0, #32]
 800a982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800a986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a98a:	6203      	str	r3, [r0, #32]
{
 800a98c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800a98e:	6a05      	ldr	r5, [r0, #32]
{
 800a990:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800a992:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800a996:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800a998:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800a99c:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a99e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a9a6:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9a8:	688b      	ldr	r3, [r1, #8]
 800a9aa:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9ae:	4b1f      	ldr	r3, [pc, #124]	; (800aa2c <TIM_OC3_SetConfig+0xac>)
 800a9b0:	4298      	cmp	r0, r3
 800a9b2:	d003      	beq.n	800a9bc <TIM_OC3_SetConfig+0x3c>
 800a9b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9b8:	4298      	cmp	r0, r3
 800a9ba:	d12f      	bne.n	800aa1c <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a9bc:	68f3      	ldr	r3, [r6, #12]
 800a9be:	f033 0308 	bics.w	r3, r3, #8
 800a9c2:	d004      	beq.n	800a9ce <TIM_OC3_SetConfig+0x4e>
 800a9c4:	f641 010c 	movw	r1, #6156	; 0x180c
 800a9c8:	4819      	ldr	r0, [pc, #100]	; (800aa30 <TIM_OC3_SetConfig+0xb0>)
 800a9ca:	f7f7 f8ee 	bl	8001baa <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9ce:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9d0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9d4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d8:	4b14      	ldr	r3, [pc, #80]	; (800aa2c <TIM_OC3_SetConfig+0xac>)
 800a9da:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9dc:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e0:	d003      	beq.n	800a9ea <TIM_OC3_SetConfig+0x6a>
 800a9e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9e6:	429c      	cmp	r4, r3
 800a9e8:	d118      	bne.n	800aa1c <TIM_OC3_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a9ea:	69b3      	ldr	r3, [r6, #24]
 800a9ec:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a9f0:	d004      	beq.n	800a9fc <TIM_OC3_SetConfig+0x7c>
 800a9f2:	f641 0119 	movw	r1, #6169	; 0x1819
 800a9f6:	480e      	ldr	r0, [pc, #56]	; (800aa30 <TIM_OC3_SetConfig+0xb0>)
 800a9f8:	f7f7 f8d7 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a9fc:	6973      	ldr	r3, [r6, #20]
 800a9fe:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800aa02:	d004      	beq.n	800aa0e <TIM_OC3_SetConfig+0x8e>
 800aa04:	f641 011a 	movw	r1, #6170	; 0x181a
 800aa08:	4809      	ldr	r0, [pc, #36]	; (800aa30 <TIM_OC3_SetConfig+0xb0>)
 800aa0a:	f7f7 f8ce 	bl	8001baa <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa0e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa10:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa14:	69b2      	ldr	r2, [r6, #24]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800aa1c:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800aa1e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800aa22:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800aa24:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800aa26:	6225      	str	r5, [r4, #32]
 800aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2c:	40010000 	.word	0x40010000
 800aa30:	0803504b 	.word	0x0803504b

0800aa34 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa34:	6a03      	ldr	r3, [r0, #32]
 800aa36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800aa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa3e:	6203      	str	r3, [r0, #32]
{
 800aa40:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800aa42:	6a05      	ldr	r5, [r0, #32]
{
 800aa44:	460f      	mov	r7, r1
  tmpcr2 =  TIMx->CR2;
 800aa46:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800aa4a:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800aa4c:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa50:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa56:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa5a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa5e:	688b      	ldr	r3, [r1, #8]
 800aa60:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa64:	4b0e      	ldr	r3, [pc, #56]	; (800aaa0 <TIM_OC4_SetConfig+0x6c>)
 800aa66:	4298      	cmp	r0, r3
 800aa68:	d003      	beq.n	800aa72 <TIM_OC4_SetConfig+0x3e>
 800aa6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	d10d      	bne.n	800aa8e <TIM_OC4_SetConfig+0x5a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800aa78:	d004      	beq.n	800aa84 <TIM_OC4_SetConfig+0x50>
 800aa7a:	f641 0158 	movw	r1, #6232	; 0x1858
 800aa7e:	4809      	ldr	r0, [pc, #36]	; (800aaa4 <TIM_OC4_SetConfig+0x70>)
 800aa80:	f7f7 f893 	bl	8001baa <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa84:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 800aa8e:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 800aa90:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800aa94:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800aa96:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800aa98:	6225      	str	r5, [r4, #32]
 800aa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40010000 	.word	0x40010000
 800aaa4:	0803504b 	.word	0x0803504b

0800aaa8 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aaa8:	6803      	ldr	r3, [r0, #0]
 800aaaa:	4a28      	ldr	r2, [pc, #160]	; (800ab4c <HAL_TIM_Base_Start_IT+0xa4>)
 800aaac:	4293      	cmp	r3, r2
{
 800aaae:	b510      	push	{r4, lr}
 800aab0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aab2:	d037      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aab8:	d034      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aaba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d030      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d02c      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aaca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aace:	4293      	cmp	r3, r2
 800aad0:	d028      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d024      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aade:	4293      	cmp	r3, r2
 800aae0:	d020      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aae2:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d01c      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aaea:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d018      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aaf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d014      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800aafa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d010      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800ab02:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d00c      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800ab0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d008      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800ab12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d004      	beq.n	800ab24 <HAL_TIM_Base_Start_IT+0x7c>
 800ab1a:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800ab1e:	480c      	ldr	r0, [pc, #48]	; (800ab50 <HAL_TIM_Base_Start_IT+0xa8>)
 800ab20:	f7f7 f843 	bl	8001baa <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	f042 0201 	orr.w	r2, r2, #1
 800ab2c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <HAL_TIM_Base_Start_IT+0xac>)
 800ab30:	6899      	ldr	r1, [r3, #8]
 800ab32:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab34:	2a06      	cmp	r2, #6
 800ab36:	d006      	beq.n	800ab46 <HAL_TIM_Base_Start_IT+0x9e>
 800ab38:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ab3c:	d003      	beq.n	800ab46 <HAL_TIM_Base_Start_IT+0x9e>
    __HAL_TIM_ENABLE(htim);
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	f042 0201 	orr.w	r2, r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
}
 800ab46:	2000      	movs	r0, #0
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	bf00      	nop
 800ab4c:	40010000 	.word	0x40010000
 800ab50:	0803504b 	.word	0x0803504b
 800ab54:	00010007 	.word	0x00010007

0800ab58 <HAL_TIM_OC_DelayElapsedCallback>:
 800ab58:	4770      	bx	lr

0800ab5a <HAL_TIM_IC_CaptureCallback>:
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIM_PWM_PulseFinishedCallback>:
 800ab5c:	4770      	bx	lr

0800ab5e <HAL_TIM_TriggerCallback>:
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab60:	6803      	ldr	r3, [r0, #0]
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	0791      	lsls	r1, r2, #30
{
 800ab66:	b510      	push	{r4, lr}
 800ab68:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab6a:	d50f      	bpl.n	800ab8c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab6c:	68da      	ldr	r2, [r3, #12]
 800ab6e:	0792      	lsls	r2, r2, #30
 800ab70:	d50c      	bpl.n	800ab8c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab72:	f06f 0202 	mvn.w	r2, #2
 800ab76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab78:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab7a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab7c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab7e:	0799      	lsls	r1, r3, #30
 800ab80:	f000 8085 	beq.w	800ac8e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ab84:	f7ff ffe9 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	691a      	ldr	r2, [r3, #16]
 800ab90:	0752      	lsls	r2, r2, #29
 800ab92:	d510      	bpl.n	800abb6 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	0750      	lsls	r0, r2, #29
 800ab98:	d50d      	bpl.n	800abb6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab9a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ab9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aba2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aba4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aba6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aba8:	f413 7f40 	tst.w	r3, #768	; 0x300
 800abac:	d075      	beq.n	800ac9a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800abae:	f7ff ffd4 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb2:	2300      	movs	r3, #0
 800abb4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	691a      	ldr	r2, [r3, #16]
 800abba:	0711      	lsls	r1, r2, #28
 800abbc:	d50f      	bpl.n	800abde <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abbe:	68da      	ldr	r2, [r3, #12]
 800abc0:	0712      	lsls	r2, r2, #28
 800abc2:	d50c      	bpl.n	800abde <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abc4:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800abc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abcc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abd0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abd2:	079b      	lsls	r3, r3, #30
 800abd4:	d067      	beq.n	800aca6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800abd6:	f7ff ffc0 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abda:	2300      	movs	r3, #0
 800abdc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	06d0      	lsls	r0, r2, #27
 800abe4:	d510      	bpl.n	800ac08 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	06d1      	lsls	r1, r2, #27
 800abea:	d50d      	bpl.n	800ac08 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abec:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800abf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abf4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abf6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abf8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abfa:	f413 7f40 	tst.w	r3, #768	; 0x300
 800abfe:	d058      	beq.n	800acb2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac00:	f7ff ffab 	bl	800ab5a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac04:	2300      	movs	r3, #0
 800ac06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	691a      	ldr	r2, [r3, #16]
 800ac0c:	07d2      	lsls	r2, r2, #31
 800ac0e:	d508      	bpl.n	800ac22 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	07d0      	lsls	r0, r2, #31
 800ac14:	d505      	bpl.n	800ac22 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac16:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac1e:	f7f6 ffb9 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	691a      	ldr	r2, [r3, #16]
 800ac26:	0611      	lsls	r1, r2, #24
 800ac28:	d508      	bpl.n	800ac3c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	0612      	lsls	r2, r2, #24
 800ac2e:	d505      	bpl.n	800ac3c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac30:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ac34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ac38:	f001 f8e3 	bl	800be02 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac3c:	6823      	ldr	r3, [r4, #0]
 800ac3e:	691a      	ldr	r2, [r3, #16]
 800ac40:	05d0      	lsls	r0, r2, #23
 800ac42:	d508      	bpl.n	800ac56 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	0611      	lsls	r1, r2, #24
 800ac48:	d505      	bpl.n	800ac56 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ac4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ac52:	f001 f8d7 	bl	800be04 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	691a      	ldr	r2, [r3, #16]
 800ac5a:	0652      	lsls	r2, r2, #25
 800ac5c:	d508      	bpl.n	800ac70 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	0650      	lsls	r0, r2, #25
 800ac62:	d505      	bpl.n	800ac70 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac64:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ac68:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ac6c:	f7ff ff77 	bl	800ab5e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	691a      	ldr	r2, [r3, #16]
 800ac74:	0691      	lsls	r1, r2, #26
 800ac76:	d522      	bpl.n	800acbe <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	0692      	lsls	r2, r2, #26
 800ac7c:	d51f      	bpl.n	800acbe <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac7e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ac82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac84:	611a      	str	r2, [r3, #16]
}
 800ac86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ac8a:	f001 b8b9 	b.w	800be00 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8e:	f7ff ff63 	bl	800ab58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac92:	4620      	mov	r0, r4
 800ac94:	f7ff ff62 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
 800ac98:	e776      	b.n	800ab88 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9a:	f7ff ff5d 	bl	800ab58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7ff ff5c 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
 800aca4:	e785      	b.n	800abb2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca6:	f7ff ff57 	bl	800ab58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acaa:	4620      	mov	r0, r4
 800acac:	f7ff ff56 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
 800acb0:	e793      	b.n	800abda <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	f7ff ff51 	bl	800ab58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff ff50 	bl	800ab5c <HAL_TIM_PWM_PulseFinishedCallback>
 800acbc:	e7a2      	b.n	800ac04 <HAL_TIM_IRQHandler+0xa4>
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc0:	4a30      	ldr	r2, [pc, #192]	; (800ad84 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800acc2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc4:	4290      	cmp	r0, r2
 800acc6:	d012      	beq.n	800acee <TIM_Base_SetConfig+0x2e>
 800acc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800accc:	d00f      	beq.n	800acee <TIM_Base_SetConfig+0x2e>
 800acce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800acd2:	4290      	cmp	r0, r2
 800acd4:	d00b      	beq.n	800acee <TIM_Base_SetConfig+0x2e>
 800acd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800acda:	4290      	cmp	r0, r2
 800acdc:	d007      	beq.n	800acee <TIM_Base_SetConfig+0x2e>
 800acde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ace2:	4290      	cmp	r0, r2
 800ace4:	d003      	beq.n	800acee <TIM_Base_SetConfig+0x2e>
 800ace6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800acea:	4290      	cmp	r0, r2
 800acec:	d119      	bne.n	800ad22 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800acee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800acf4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acf6:	4a23      	ldr	r2, [pc, #140]	; (800ad84 <TIM_Base_SetConfig+0xc4>)
 800acf8:	4290      	cmp	r0, r2
 800acfa:	d029      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800acfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ad00:	d026      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ad06:	4290      	cmp	r0, r2
 800ad08:	d022      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad0e:	4290      	cmp	r0, r2
 800ad10:	d01e      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad16:	4290      	cmp	r0, r2
 800ad18:	d01a      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ad1e:	4290      	cmp	r0, r2
 800ad20:	d016      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad22:	4a19      	ldr	r2, [pc, #100]	; (800ad88 <TIM_Base_SetConfig+0xc8>)
 800ad24:	4290      	cmp	r0, r2
 800ad26:	d013      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad2c:	4290      	cmp	r0, r2
 800ad2e:	d00f      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad34:	4290      	cmp	r0, r2
 800ad36:	d00b      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad38:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800ad3c:	4290      	cmp	r0, r2
 800ad3e:	d007      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad44:	4290      	cmp	r0, r2
 800ad46:	d003      	beq.n	800ad50 <TIM_Base_SetConfig+0x90>
 800ad48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad4c:	4290      	cmp	r0, r2
 800ad4e:	d103      	bne.n	800ad58 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad54:	68ca      	ldr	r2, [r1, #12]
 800ad56:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad58:	694a      	ldr	r2, [r1, #20]
 800ad5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad5e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800ad60:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad62:	688b      	ldr	r3, [r1, #8]
 800ad64:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ad66:	680b      	ldr	r3, [r1, #0]
 800ad68:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad6a:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <TIM_Base_SetConfig+0xc4>)
 800ad6c:	4298      	cmp	r0, r3
 800ad6e:	d003      	beq.n	800ad78 <TIM_Base_SetConfig+0xb8>
 800ad70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad74:	4298      	cmp	r0, r3
 800ad76:	d101      	bne.n	800ad7c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800ad78:	690b      	ldr	r3, [r1, #16]
 800ad7a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	6143      	str	r3, [r0, #20]
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	40010000 	.word	0x40010000
 800ad88:	40014000 	.word	0x40014000

0800ad8c <HAL_TIM_Base_Init>:
{
 800ad8c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ad8e:	4604      	mov	r4, r0
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d075      	beq.n	800ae80 <HAL_TIM_Base_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ad94:	6803      	ldr	r3, [r0, #0]
 800ad96:	4a3b      	ldr	r2, [pc, #236]	; (800ae84 <HAL_TIM_Base_Init+0xf8>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d037      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800ad9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada0:	d034      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800ada2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d030      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adae:	4293      	cmp	r3, r2
 800adb0:	d02c      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d028      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d024      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d020      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adca:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800adce:	4293      	cmp	r3, r2
 800add0:	d01c      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800add2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800add6:	4293      	cmp	r3, r2
 800add8:	d018      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adde:	4293      	cmp	r3, r2
 800ade0:	d014      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800ade2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d010      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adea:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800adee:	4293      	cmp	r3, r2
 800adf0:	d00c      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d008      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800adfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d004      	beq.n	800ae0c <HAL_TIM_Base_Init+0x80>
 800ae02:	f240 110d 	movw	r1, #269	; 0x10d
 800ae06:	4820      	ldr	r0, [pc, #128]	; (800ae88 <HAL_TIM_Base_Init+0xfc>)
 800ae08:	f7f6 fecf 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ae0c:	68a3      	ldr	r3, [r4, #8]
 800ae0e:	f033 0210 	bics.w	r2, r3, #16
 800ae12:	d00a      	beq.n	800ae2a <HAL_TIM_Base_Init+0x9e>
 800ae14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ae18:	2a20      	cmp	r2, #32
 800ae1a:	d006      	beq.n	800ae2a <HAL_TIM_Base_Init+0x9e>
 800ae1c:	2b40      	cmp	r3, #64	; 0x40
 800ae1e:	d004      	beq.n	800ae2a <HAL_TIM_Base_Init+0x9e>
 800ae20:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800ae24:	4818      	ldr	r0, [pc, #96]	; (800ae88 <HAL_TIM_Base_Init+0xfc>)
 800ae26:	f7f6 fec0 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ae30:	d007      	beq.n	800ae42 <HAL_TIM_Base_Init+0xb6>
 800ae32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae36:	d004      	beq.n	800ae42 <HAL_TIM_Base_Init+0xb6>
 800ae38:	f240 110f 	movw	r1, #271	; 0x10f
 800ae3c:	4812      	ldr	r0, [pc, #72]	; (800ae88 <HAL_TIM_Base_Init+0xfc>)
 800ae3e:	f7f6 feb4 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ae42:	69a3      	ldr	r3, [r4, #24]
 800ae44:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ae48:	d004      	beq.n	800ae54 <HAL_TIM_Base_Init+0xc8>
 800ae4a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ae4e:	480e      	ldr	r0, [pc, #56]	; (800ae88 <HAL_TIM_Base_Init+0xfc>)
 800ae50:	f7f6 feab 	bl	8001baa <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ae54:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ae58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ae5c:	b923      	cbnz	r3, 800ae68 <HAL_TIM_Base_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800ae5e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ae62:	4620      	mov	r0, r4
 800ae64:	f7f7 fa42 	bl	80022ec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ae68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae6a:	6820      	ldr	r0, [r4, #0]
 800ae6c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae72:	f7ff ff25 	bl	800acc0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800ae76:	2301      	movs	r3, #1
  return HAL_OK;
 800ae78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ae7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800ae7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ae80:	2001      	movs	r0, #1
}
 800ae82:	bd10      	pop	{r4, pc}
 800ae84:	40010000 	.word	0x40010000
 800ae88:	0803504b 	.word	0x0803504b

0800ae8c <HAL_TIM_PWM_Init>:
{
 800ae8c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ae8e:	4604      	mov	r4, r0
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d075      	beq.n	800af80 <HAL_TIM_PWM_Init+0xf4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ae94:	6803      	ldr	r3, [r0, #0]
 800ae96:	4a3b      	ldr	r2, [pc, #236]	; (800af84 <HAL_TIM_PWM_Init+0xf8>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d037      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea0:	d034      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aea2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d030      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d02c      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d028      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d024      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d020      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeca:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800aece:	4293      	cmp	r3, r2
 800aed0:	d01c      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aed2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d018      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aede:	4293      	cmp	r3, r2
 800aee0:	d014      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d010      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aeea:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00c      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d008      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800aefa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aefe:	4293      	cmp	r3, r2
 800af00:	d004      	beq.n	800af0c <HAL_TIM_PWM_Init+0x80>
 800af02:	f240 419a 	movw	r1, #1178	; 0x49a
 800af06:	4820      	ldr	r0, [pc, #128]	; (800af88 <HAL_TIM_PWM_Init+0xfc>)
 800af08:	f7f6 fe4f 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800af0c:	68a3      	ldr	r3, [r4, #8]
 800af0e:	f033 0210 	bics.w	r2, r3, #16
 800af12:	d00a      	beq.n	800af2a <HAL_TIM_PWM_Init+0x9e>
 800af14:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800af18:	2a20      	cmp	r2, #32
 800af1a:	d006      	beq.n	800af2a <HAL_TIM_PWM_Init+0x9e>
 800af1c:	2b40      	cmp	r3, #64	; 0x40
 800af1e:	d004      	beq.n	800af2a <HAL_TIM_PWM_Init+0x9e>
 800af20:	f240 419b 	movw	r1, #1179	; 0x49b
 800af24:	4818      	ldr	r0, [pc, #96]	; (800af88 <HAL_TIM_PWM_Init+0xfc>)
 800af26:	f7f6 fe40 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800af30:	d007      	beq.n	800af42 <HAL_TIM_PWM_Init+0xb6>
 800af32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af36:	d004      	beq.n	800af42 <HAL_TIM_PWM_Init+0xb6>
 800af38:	f240 419c 	movw	r1, #1180	; 0x49c
 800af3c:	4812      	ldr	r0, [pc, #72]	; (800af88 <HAL_TIM_PWM_Init+0xfc>)
 800af3e:	f7f6 fe34 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800af42:	69a3      	ldr	r3, [r4, #24]
 800af44:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800af48:	d004      	beq.n	800af54 <HAL_TIM_PWM_Init+0xc8>
 800af4a:	f240 419d 	movw	r1, #1181	; 0x49d
 800af4e:	480e      	ldr	r0, [pc, #56]	; (800af88 <HAL_TIM_PWM_Init+0xfc>)
 800af50:	f7f6 fe2b 	bl	8001baa <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800af54:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800af58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af5c:	b923      	cbnz	r3, 800af68 <HAL_TIM_PWM_Init+0xdc>
    htim->Lock = HAL_UNLOCKED;
 800af5e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800af62:	4620      	mov	r0, r4
 800af64:	f7f7 fa20 	bl	80023a8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800af68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af6a:	6820      	ldr	r0, [r4, #0]
 800af6c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800af6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af72:	f7ff fea5 	bl	800acc0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800af76:	2301      	movs	r3, #1
  return HAL_OK;
 800af78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800af7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800af7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800af80:	2001      	movs	r0, #1
}
 800af82:	bd10      	pop	{r4, pc}
 800af84:	40010000 	.word	0x40010000
 800af88:	0803504b 	.word	0x0803504b

0800af8c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8c:	6a03      	ldr	r3, [r0, #32]
 800af8e:	f023 0310 	bic.w	r3, r3, #16
{
 800af92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af96:	6203      	str	r3, [r0, #32]
{
 800af98:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800af9a:	6a05      	ldr	r5, [r0, #32]
{
 800af9c:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800af9e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800afa2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800afa4:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afa8:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afae:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb2:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afb6:	688b      	ldr	r3, [r1, #8]
 800afb8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afbc:	4b1f      	ldr	r3, [pc, #124]	; (800b03c <TIM_OC2_SetConfig+0xb0>)
 800afbe:	4298      	cmp	r0, r3
 800afc0:	d003      	beq.n	800afca <TIM_OC2_SetConfig+0x3e>
 800afc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afc6:	4298      	cmp	r0, r3
 800afc8:	d12f      	bne.n	800b02a <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800afca:	68f3      	ldr	r3, [r6, #12]
 800afcc:	f033 0308 	bics.w	r3, r3, #8
 800afd0:	d004      	beq.n	800afdc <TIM_OC2_SetConfig+0x50>
 800afd2:	f241 71c1 	movw	r1, #6081	; 0x17c1
 800afd6:	481a      	ldr	r0, [pc, #104]	; (800b040 <TIM_OC2_SetConfig+0xb4>)
 800afd8:	f7f6 fde7 	bl	8001baa <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afdc:	68f3      	ldr	r3, [r6, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800afde:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afe2:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe6:	4b15      	ldr	r3, [pc, #84]	; (800b03c <TIM_OC2_SetConfig+0xb0>)
 800afe8:	429c      	cmp	r4, r3
    tmpccer &= ~TIM_CCER_CC2NE;
 800afea:	f025 0540 	bic.w	r5, r5, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afee:	d003      	beq.n	800aff8 <TIM_OC2_SetConfig+0x6c>
 800aff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aff4:	429c      	cmp	r4, r3
 800aff6:	d118      	bne.n	800b02a <TIM_OC2_SetConfig+0x9e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aff8:	69b3      	ldr	r3, [r6, #24]
 800affa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800affe:	d004      	beq.n	800b00a <TIM_OC2_SetConfig+0x7e>
 800b000:	f241 71cf 	movw	r1, #6095	; 0x17cf
 800b004:	480e      	ldr	r0, [pc, #56]	; (800b040 <TIM_OC2_SetConfig+0xb4>)
 800b006:	f7f6 fdd0 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b00a:	6973      	ldr	r3, [r6, #20]
 800b00c:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 800b010:	d004      	beq.n	800b01c <TIM_OC2_SetConfig+0x90>
 800b012:	f241 71d0 	movw	r1, #6096	; 0x17d0
 800b016:	480a      	ldr	r0, [pc, #40]	; (800b040 <TIM_OC2_SetConfig+0xb4>)
 800b018:	f7f6 fdc7 	bl	8001baa <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b01c:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b01e:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b022:	69b2      	ldr	r2, [r6, #24]
 800b024:	4313      	orrs	r3, r2
 800b026:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800b02a:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800b02c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b030:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b032:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800b034:	6225      	str	r5, [r4, #32]
 800b036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03a:	bf00      	nop
 800b03c:	40010000 	.word	0x40010000
 800b040:	0803504b 	.word	0x0803504b

0800b044 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800b044:	2a14      	cmp	r2, #20
{
 800b046:	b570      	push	{r4, r5, r6, lr}
 800b048:	4604      	mov	r4, r0
 800b04a:	460d      	mov	r5, r1
 800b04c:	4616      	mov	r6, r2
  assert_param(IS_TIM_CHANNELS(Channel));
 800b04e:	f200 8165 	bhi.w	800b31c <HAL_TIM_PWM_ConfigChannel+0x2d8>
 800b052:	4bb5      	ldr	r3, [pc, #724]	; (800b328 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800b054:	40d3      	lsrs	r3, r2
 800b056:	07db      	lsls	r3, r3, #31
 800b058:	d404      	bmi.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x20>
 800b05a:	f640 6113 	movw	r1, #3603	; 0xe13
 800b05e:	48b3      	ldr	r0, [pc, #716]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b060:	f7f6 fda3 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	f023 0210 	bic.w	r2, r3, #16
 800b06a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b06e:	f023 0310 	bic.w	r3, r3, #16
 800b072:	2b60      	cmp	r3, #96	; 0x60
 800b074:	d007      	beq.n	800b086 <HAL_TIM_PWM_ConfigChannel+0x42>
 800b076:	4bae      	ldr	r3, [pc, #696]	; (800b330 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 800b078:	429a      	cmp	r2, r3
 800b07a:	d004      	beq.n	800b086 <HAL_TIM_PWM_ConfigChannel+0x42>
 800b07c:	f640 6114 	movw	r1, #3604	; 0xe14
 800b080:	48aa      	ldr	r0, [pc, #680]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b082:	f7f6 fd92 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b086:	68ab      	ldr	r3, [r5, #8]
 800b088:	f033 0302 	bics.w	r3, r3, #2
 800b08c:	d004      	beq.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x54>
 800b08e:	f640 6115 	movw	r1, #3605	; 0xe15
 800b092:	48a6      	ldr	r0, [pc, #664]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b094:	f7f6 fd89 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b098:	692b      	ldr	r3, [r5, #16]
 800b09a:	f033 0304 	bics.w	r3, r3, #4
 800b09e:	d004      	beq.n	800b0aa <HAL_TIM_PWM_ConfigChannel+0x66>
 800b0a0:	f640 6116 	movw	r1, #3606	; 0xe16
 800b0a4:	48a1      	ldr	r0, [pc, #644]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b0a6:	f7f6 fd80 	bl	8001baa <assert_failed>
  __HAL_LOCK(htim);
 800b0aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b0ae:	2002      	movs	r0, #2
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f000 8137 	beq.w	800b324 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800b0b6:	2301      	movs	r3, #1
  switch (Channel)
 800b0b8:	2e08      	cmp	r6, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ba:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b0be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800b0c2:	f000 80bf 	beq.w	800b244 <HAL_TIM_PWM_ConfigChannel+0x200>
 800b0c6:	d80b      	bhi.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x9c>
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	d03f      	beq.n	800b14c <HAL_TIM_PWM_ConfigChannel+0x108>
 800b0cc:	2e04      	cmp	r6, #4
 800b0ce:	f000 8083 	beq.w	800b1d8 <HAL_TIM_PWM_ConfigChannel+0x194>
  htim->State = HAL_TIM_STATE_READY;
 800b0d2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b0d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b0d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b0da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800b0e0:	2e10      	cmp	r6, #16
 800b0e2:	f000 80dd 	beq.w	800b2a0 <HAL_TIM_PWM_ConfigChannel+0x25c>
 800b0e6:	2e14      	cmp	r6, #20
 800b0e8:	f000 80f9 	beq.w	800b2de <HAL_TIM_PWM_ConfigChannel+0x29a>
 800b0ec:	2e0c      	cmp	r6, #12
 800b0ee:	d1f0      	bne.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	4a90      	ldr	r2, [pc, #576]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d017      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fc:	d014      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b0fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b102:	4293      	cmp	r3, r2
 800b104:	d010      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d00c      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b10e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b112:	4293      	cmp	r3, r2
 800b114:	d008      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b116:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_TIM_PWM_ConfigChannel+0xe4>
 800b11e:	f640 6155 	movw	r1, #3669	; 0xe55
 800b122:	4882      	ldr	r0, [pc, #520]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b124:	f7f6 fd41 	bl	8001baa <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b128:	4629      	mov	r1, r5
 800b12a:	6820      	ldr	r0, [r4, #0]
 800b12c:	f7ff fc82 	bl	800aa34 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b130:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b132:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b134:	69da      	ldr	r2, [r3, #28]
 800b136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b13a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b13c:	69da      	ldr	r2, [r3, #28]
 800b13e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b142:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b14a:	e0a7      	b.n	800b29c <HAL_TIM_PWM_ConfigChannel+0x258>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	4a79      	ldr	r2, [pc, #484]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d02f      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b158:	d02c      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b15a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b15e:	4293      	cmp	r3, r2
 800b160:	d028      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b166:	4293      	cmp	r3, r2
 800b168:	d024      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b16a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b16e:	4293      	cmp	r3, r2
 800b170:	d020      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b172:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b176:	4293      	cmp	r3, r2
 800b178:	d01c      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b17a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b17e:	4293      	cmp	r3, r2
 800b180:	d018      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b186:	4293      	cmp	r3, r2
 800b188:	d014      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b18a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b18e:	4293      	cmp	r3, r2
 800b190:	d010      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b192:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b196:	4293      	cmp	r3, r2
 800b198:	d00c      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b19a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d008      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b1a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d004      	beq.n	800b1b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b1aa:	f640 6122 	movw	r1, #3618	; 0xe22
 800b1ae:	485f      	ldr	r0, [pc, #380]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b1b0:	f7f6 fcfb 	bl	8001baa <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	f7ff fb8a 	bl	800a8d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1be:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1c0:	699a      	ldr	r2, [r3, #24]
 800b1c2:	f042 0208 	orr.w	r2, r2, #8
 800b1c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	f022 0204 	bic.w	r2, r2, #4
 800b1ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1d4:	619a      	str	r2, [r3, #24]
      break;
 800b1d6:	e77c      	b.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	4a56      	ldr	r2, [pc, #344]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d01f      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e4:	d01c      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b1e6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d018      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b1ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d014      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b1f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d010      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b1fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b202:	4293      	cmp	r3, r2
 800b204:	d00c      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b206:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d008      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b20e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_TIM_PWM_ConfigChannel+0x1dc>
 800b216:	f640 6133 	movw	r1, #3635	; 0xe33
 800b21a:	4844      	ldr	r0, [pc, #272]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b21c:	f7f6 fcc5 	bl	8001baa <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b220:	4629      	mov	r1, r5
 800b222:	6820      	ldr	r0, [r4, #0]
 800b224:	f7ff feb2 	bl	800af8c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b228:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b22a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b23a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b242:	e7c7      	b.n	800b1d4 <HAL_TIM_PWM_ConfigChannel+0x190>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	4a3b      	ldr	r2, [pc, #236]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d017      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b24c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b250:	d014      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b252:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b256:	4293      	cmp	r3, r2
 800b258:	d010      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b25a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00c      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b266:	4293      	cmp	r3, r2
 800b268:	d008      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b26a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b26e:	4293      	cmp	r3, r2
 800b270:	d004      	beq.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x238>
 800b272:	f640 6144 	movw	r1, #3652	; 0xe44
 800b276:	482d      	ldr	r0, [pc, #180]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b278:	f7f6 fc97 	bl	8001baa <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b27c:	4629      	mov	r1, r5
 800b27e:	6820      	ldr	r0, [r4, #0]
 800b280:	f7ff fb7e 	bl	800a980 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b284:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b286:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b288:	69da      	ldr	r2, [r3, #28]
 800b28a:	f042 0208 	orr.w	r2, r2, #8
 800b28e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b290:	69da      	ldr	r2, [r3, #28]
 800b292:	f022 0204 	bic.w	r2, r2, #4
 800b296:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b298:	69da      	ldr	r2, [r3, #28]
 800b29a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b29c:	61da      	str	r2, [r3, #28]
      break;
 800b29e:	e718      	b.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	4a24      	ldr	r2, [pc, #144]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d008      	beq.n	800b2ba <HAL_TIM_PWM_ConfigChannel+0x276>
 800b2a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d004      	beq.n	800b2ba <HAL_TIM_PWM_ConfigChannel+0x276>
 800b2b0:	f640 6166 	movw	r1, #3686	; 0xe66
 800b2b4:	481d      	ldr	r0, [pc, #116]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b2b6:	f7f6 fc78 	bl	8001baa <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	6820      	ldr	r0, [r4, #0]
 800b2be:	f7ff fab7 	bl	800a830 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2c4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2c8:	f042 0208 	orr.w	r2, r2, #8
 800b2cc:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2d0:	f022 0204 	bic.w	r2, r2, #4
 800b2d4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2d8:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b2da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b2dc:	e6f9      	b.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	4a14      	ldr	r2, [pc, #80]	; (800b334 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d008      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800b2e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d004      	beq.n	800b2f8 <HAL_TIM_PWM_ConfigChannel+0x2b4>
 800b2ee:	f640 6177 	movw	r1, #3703	; 0xe77
 800b2f2:	480e      	ldr	r0, [pc, #56]	; (800b32c <HAL_TIM_PWM_ConfigChannel+0x2e8>)
 800b2f4:	f7f6 fc59 	bl	8001baa <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	f7ff fac0 	bl	800a880 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b300:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b302:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b30a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b30e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b31a:	e7de      	b.n	800b2da <HAL_TIM_PWM_ConfigChannel+0x296>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b31c:	2a3c      	cmp	r2, #60	; 0x3c
 800b31e:	f47f ae9c 	bne.w	800b05a <HAL_TIM_PWM_ConfigChannel+0x16>
 800b322:	e69f      	b.n	800b064 <HAL_TIM_PWM_ConfigChannel+0x20>
}
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	bf00      	nop
 800b328:	00111111 	.word	0x00111111
 800b32c:	0803504b 	.word	0x0803504b
 800b330:	00010040 	.word	0x00010040
 800b334:	40010000 	.word	0x40010000

0800b338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b338:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b33a:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800b33c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b33e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b342:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b346:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b348:	6083      	str	r3, [r0, #8]
 800b34a:	bd10      	pop	{r4, pc}

0800b34c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b34c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b350:	2b01      	cmp	r3, #1
{
 800b352:	b570      	push	{r4, r5, r6, lr}
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800b35c:	d029      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x66>
 800b35e:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800b360:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800b364:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b368:	680b      	ldr	r3, [r1, #0]
 800b36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b36e:	d00c      	beq.n	800b38a <HAL_TIM_ConfigClockSource+0x3e>
 800b370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b374:	d009      	beq.n	800b38a <HAL_TIM_ConfigClockSource+0x3e>
 800b376:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800b37a:	d006      	beq.n	800b38a <HAL_TIM_ConfigClockSource+0x3e>
 800b37c:	2b40      	cmp	r3, #64	; 0x40
 800b37e:	d004      	beq.n	800b38a <HAL_TIM_ConfigClockSource+0x3e>
 800b380:	f241 11f6 	movw	r1, #4598	; 0x11f6
 800b384:	48bb      	ldr	r0, [pc, #748]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b386:	f7f6 fc10 	bl	8001baa <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 800b38a:	682b      	ldr	r3, [r5, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b38c:	4aba      	ldr	r2, [pc, #744]	; (800b678 <HAL_TIM_ConfigClockSource+0x32c>)
  tmpsmcr = htim->Instance->SMCR;
 800b38e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b390:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800b392:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800b394:	6822      	ldr	r2, [r4, #0]
 800b396:	2a40      	cmp	r2, #64	; 0x40
 800b398:	f000 81bc 	beq.w	800b714 <HAL_TIM_ConfigClockSource+0x3c8>
 800b39c:	d833      	bhi.n	800b406 <HAL_TIM_ConfigClockSource+0xba>
 800b39e:	2a10      	cmp	r2, #16
 800b3a0:	d00c      	beq.n	800b3bc <HAL_TIM_ConfigClockSource+0x70>
 800b3a2:	d807      	bhi.n	800b3b4 <HAL_TIM_ConfigClockSource+0x68>
 800b3a4:	b152      	cbz	r2, 800b3bc <HAL_TIM_ConfigClockSource+0x70>
  htim->State = HAL_TIM_STATE_READY;
 800b3a6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800b3a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b3aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b3ae:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
}
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800b3b4:	2a20      	cmp	r2, #32
 800b3b6:	d001      	beq.n	800b3bc <HAL_TIM_ConfigClockSource+0x70>
 800b3b8:	2a30      	cmp	r2, #48	; 0x30
 800b3ba:	d1f4      	bne.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b3bc:	4aaf      	ldr	r2, [pc, #700]	; (800b67c <HAL_TIM_ConfigClockSource+0x330>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d017      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3c6:	d014      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3c8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d010      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00c      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d008      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3e0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d004      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xa6>
 800b3e8:	f241 2168 	movw	r1, #4712	; 0x1268
 800b3ec:	48a1      	ldr	r0, [pc, #644]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b3ee:	f7f6 fbdc 	bl	8001baa <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3f2:	6829      	ldr	r1, [r5, #0]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3f4:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800b3f6:	688a      	ldr	r2, [r1, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3f8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b400:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800b402:	608b      	str	r3, [r1, #8]
 800b404:	e7cf      	b.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800b406:	2a70      	cmp	r2, #112	; 0x70
 800b408:	f000 80e6 	beq.w	800b5d8 <HAL_TIM_ConfigClockSource+0x28c>
 800b40c:	d84e      	bhi.n	800b4ac <HAL_TIM_ConfigClockSource+0x160>
 800b40e:	2a50      	cmp	r2, #80	; 0x50
 800b410:	f000 8136 	beq.w	800b680 <HAL_TIM_ConfigClockSource+0x334>
 800b414:	2a60      	cmp	r2, #96	; 0x60
 800b416:	d1c6      	bne.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b418:	4a98      	ldr	r2, [pc, #608]	; (800b67c <HAL_TIM_ConfigClockSource+0x330>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d017      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b422:	d014      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b424:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b428:	4293      	cmp	r3, r2
 800b42a:	d010      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b42c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b430:	4293      	cmp	r3, r2
 800b432:	d00c      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b438:	4293      	cmp	r3, r2
 800b43a:	d008      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b43c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b440:	4293      	cmp	r3, r2
 800b442:	d004      	beq.n	800b44e <HAL_TIM_ConfigClockSource+0x102>
 800b444:	f241 2145 	movw	r1, #4677	; 0x1245
 800b448:	488a      	ldr	r0, [pc, #552]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b44a:	f7f6 fbae 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b44e:	6863      	ldr	r3, [r4, #4]
 800b450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b454:	d009      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x11e>
 800b456:	f033 0202 	bics.w	r2, r3, #2
 800b45a:	d006      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x11e>
 800b45c:	2b0a      	cmp	r3, #10
 800b45e:	d004      	beq.n	800b46a <HAL_TIM_ConfigClockSource+0x11e>
 800b460:	f241 2148 	movw	r1, #4680	; 0x1248
 800b464:	4883      	ldr	r0, [pc, #524]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b466:	f7f6 fba0 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b46a:	68e3      	ldr	r3, [r4, #12]
 800b46c:	2b0f      	cmp	r3, #15
 800b46e:	d904      	bls.n	800b47a <HAL_TIM_ConfigClockSource+0x12e>
 800b470:	f241 2149 	movw	r1, #4681	; 0x1249
 800b474:	487f      	ldr	r0, [pc, #508]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b476:	f7f6 fb98 	bl	8001baa <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b47a:	682b      	ldr	r3, [r5, #0]
 800b47c:	6866      	ldr	r6, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b47e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b480:	68e4      	ldr	r4, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b482:	f020 0010 	bic.w	r0, r0, #16
 800b486:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b488:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800b48a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b48c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b494:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b498:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b49c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800b49e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b4a0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4a6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800b4aa:	e131      	b.n	800b710 <HAL_TIM_ConfigClockSource+0x3c4>
  switch (sClockSourceConfig->ClockSource)
 800b4ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b4b0:	d048      	beq.n	800b544 <HAL_TIM_ConfigClockSource+0x1f8>
 800b4b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b4b6:	f47f af76 	bne.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b4ba:	4a70      	ldr	r2, [pc, #448]	; (800b67c <HAL_TIM_ConfigClockSource+0x330>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d017      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c4:	d014      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d010      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d00c      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d008      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d004      	beq.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800b4e6:	f241 2121 	movw	r1, #4641	; 0x1221
 800b4ea:	4862      	ldr	r0, [pc, #392]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b4ec:	f7f6 fb5d 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b4f6:	d004      	beq.n	800b502 <HAL_TIM_ConfigClockSource+0x1b6>
 800b4f8:	f241 2124 	movw	r1, #4644	; 0x1224
 800b4fc:	485d      	ldr	r0, [pc, #372]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b4fe:	f7f6 fb54 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b502:	6863      	ldr	r3, [r4, #4]
 800b504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b508:	d009      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x1d2>
 800b50a:	f033 0202 	bics.w	r2, r3, #2
 800b50e:	d006      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x1d2>
 800b510:	2b0a      	cmp	r3, #10
 800b512:	d004      	beq.n	800b51e <HAL_TIM_ConfigClockSource+0x1d2>
 800b514:	f241 2125 	movw	r1, #4645	; 0x1225
 800b518:	4856      	ldr	r0, [pc, #344]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b51a:	f7f6 fb46 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b51e:	68e3      	ldr	r3, [r4, #12]
 800b520:	2b0f      	cmp	r3, #15
 800b522:	d904      	bls.n	800b52e <HAL_TIM_ConfigClockSource+0x1e2>
 800b524:	f241 2126 	movw	r1, #4646	; 0x1226
 800b528:	4852      	ldr	r0, [pc, #328]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b52a:	f7f6 fb3e 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b52e:	68e3      	ldr	r3, [r4, #12]
 800b530:	6862      	ldr	r2, [r4, #4]
 800b532:	68a1      	ldr	r1, [r4, #8]
 800b534:	6828      	ldr	r0, [r5, #0]
 800b536:	f7ff feff 	bl	800b338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b53a:	682a      	ldr	r2, [r5, #0]
 800b53c:	6893      	ldr	r3, [r2, #8]
 800b53e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b542:	e095      	b.n	800b670 <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b544:	4a4d      	ldr	r2, [pc, #308]	; (800b67c <HAL_TIM_ConfigClockSource+0x330>)
 800b546:	4293      	cmp	r3, r2
 800b548:	f43f af2d 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b550:	f43f af29 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b554:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b558:	4293      	cmp	r3, r2
 800b55a:	f43f af24 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b55e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b562:	4293      	cmp	r3, r2
 800b564:	f43f af1f 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b568:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b56c:	4293      	cmp	r3, r2
 800b56e:	f43f af1a 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b576:	4293      	cmp	r3, r2
 800b578:	f43f af15 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b57c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b580:	4293      	cmp	r3, r2
 800b582:	f43f af10 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b586:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800b58a:	4293      	cmp	r3, r2
 800b58c:	f43f af0b 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b590:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b594:	4293      	cmp	r3, r2
 800b596:	f43f af06 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b59a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	f43f af01 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b5a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	f43f aefc 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b5ae:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	f43f aef7 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b5b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	f43f aef2 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b5c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	f43f aeed 	beq.w	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b5cc:	f241 2102 	movw	r1, #4610	; 0x1202
 800b5d0:	4828      	ldr	r0, [pc, #160]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b5d2:	f7f6 faea 	bl	8001baa <assert_failed>
 800b5d6:	e6e6      	b.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b5d8:	4a28      	ldr	r2, [pc, #160]	; (800b67c <HAL_TIM_ConfigClockSource+0x330>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d01f      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5e2:	d01c      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b5e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d018      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b5ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d014      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b5f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d010      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b5fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b600:	4293      	cmp	r3, r2
 800b602:	d00c      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b604:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b608:	4293      	cmp	r3, r2
 800b60a:	d008      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b60c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b610:	4293      	cmp	r3, r2
 800b612:	d004      	beq.n	800b61e <HAL_TIM_ConfigClockSource+0x2d2>
 800b614:	f241 2109 	movw	r1, #4617	; 0x1209
 800b618:	4816      	ldr	r0, [pc, #88]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b61a:	f7f6 fac6 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b624:	d004      	beq.n	800b630 <HAL_TIM_ConfigClockSource+0x2e4>
 800b626:	f241 210c 	movw	r1, #4620	; 0x120c
 800b62a:	4812      	ldr	r0, [pc, #72]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b62c:	f7f6 fabd 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b636:	d009      	beq.n	800b64c <HAL_TIM_ConfigClockSource+0x300>
 800b638:	f033 0202 	bics.w	r2, r3, #2
 800b63c:	d006      	beq.n	800b64c <HAL_TIM_ConfigClockSource+0x300>
 800b63e:	2b0a      	cmp	r3, #10
 800b640:	d004      	beq.n	800b64c <HAL_TIM_ConfigClockSource+0x300>
 800b642:	f241 210d 	movw	r1, #4621	; 0x120d
 800b646:	480b      	ldr	r0, [pc, #44]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b648:	f7f6 faaf 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b64c:	68e3      	ldr	r3, [r4, #12]
 800b64e:	2b0f      	cmp	r3, #15
 800b650:	d904      	bls.n	800b65c <HAL_TIM_ConfigClockSource+0x310>
 800b652:	f241 210e 	movw	r1, #4622	; 0x120e
 800b656:	4807      	ldr	r0, [pc, #28]	; (800b674 <HAL_TIM_ConfigClockSource+0x328>)
 800b658:	f7f6 faa7 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b65c:	68e3      	ldr	r3, [r4, #12]
 800b65e:	6862      	ldr	r2, [r4, #4]
 800b660:	68a1      	ldr	r1, [r4, #8]
 800b662:	6828      	ldr	r0, [r5, #0]
 800b664:	f7ff fe68 	bl	800b338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b668:	682a      	ldr	r2, [r5, #0]
 800b66a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b66c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b670:	6093      	str	r3, [r2, #8]
      break;
 800b672:	e698      	b.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
 800b674:	0803504b 	.word	0x0803504b
 800b678:	fffe0088 	.word	0xfffe0088
 800b67c:	40010000 	.word	0x40010000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b680:	4a49      	ldr	r2, [pc, #292]	; (800b7a8 <HAL_TIM_ConfigClockSource+0x45c>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d017      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b68a:	d014      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b68c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b690:	4293      	cmp	r3, r2
 800b692:	d010      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b694:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00c      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b69c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d008      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b6a4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d004      	beq.n	800b6b6 <HAL_TIM_ConfigClockSource+0x36a>
 800b6ac:	f241 2135 	movw	r1, #4661	; 0x1235
 800b6b0:	483e      	ldr	r0, [pc, #248]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b6b2:	f7f6 fa7a 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6bc:	d009      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x386>
 800b6be:	f033 0202 	bics.w	r2, r3, #2
 800b6c2:	d006      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x386>
 800b6c4:	2b0a      	cmp	r3, #10
 800b6c6:	d004      	beq.n	800b6d2 <HAL_TIM_ConfigClockSource+0x386>
 800b6c8:	f241 2138 	movw	r1, #4664	; 0x1238
 800b6cc:	4837      	ldr	r0, [pc, #220]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b6ce:	f7f6 fa6c 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b6d2:	68e3      	ldr	r3, [r4, #12]
 800b6d4:	2b0f      	cmp	r3, #15
 800b6d6:	d904      	bls.n	800b6e2 <HAL_TIM_ConfigClockSource+0x396>
 800b6d8:	f241 2139 	movw	r1, #4665	; 0x1239
 800b6dc:	4833      	ldr	r0, [pc, #204]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b6de:	f7f6 fa64 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800b6e6:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6e8:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ea:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6ec:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f0:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b6f4:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6f8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6fe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b704:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b706:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b708:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b70c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800b710:	609a      	str	r2, [r3, #8]
 800b712:	e648      	b.n	800b3a6 <HAL_TIM_ConfigClockSource+0x5a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b714:	4a24      	ldr	r2, [pc, #144]	; (800b7a8 <HAL_TIM_ConfigClockSource+0x45c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d017      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b71a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71e:	d014      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b720:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b724:	4293      	cmp	r3, r2
 800b726:	d010      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d00c      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b730:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b734:	4293      	cmp	r3, r2
 800b736:	d008      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b738:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d004      	beq.n	800b74a <HAL_TIM_ConfigClockSource+0x3fe>
 800b740:	f241 2155 	movw	r1, #4693	; 0x1255
 800b744:	4819      	ldr	r0, [pc, #100]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b746:	f7f6 fa30 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b750:	d009      	beq.n	800b766 <HAL_TIM_ConfigClockSource+0x41a>
 800b752:	f033 0202 	bics.w	r2, r3, #2
 800b756:	d006      	beq.n	800b766 <HAL_TIM_ConfigClockSource+0x41a>
 800b758:	2b0a      	cmp	r3, #10
 800b75a:	d004      	beq.n	800b766 <HAL_TIM_ConfigClockSource+0x41a>
 800b75c:	f241 2158 	movw	r1, #4696	; 0x1258
 800b760:	4812      	ldr	r0, [pc, #72]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b762:	f7f6 fa22 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	2b0f      	cmp	r3, #15
 800b76a:	d904      	bls.n	800b776 <HAL_TIM_ConfigClockSource+0x42a>
 800b76c:	f241 2159 	movw	r1, #4697	; 0x1259
 800b770:	480e      	ldr	r0, [pc, #56]	; (800b7ac <HAL_TIM_ConfigClockSource+0x460>)
 800b772:	f7f6 fa1a 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	6861      	ldr	r1, [r4, #4]
  tmpccer = TIMx->CCER;
 800b77a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b77c:	68e6      	ldr	r6, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b77e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b780:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b784:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800b788:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b78c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b78e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b792:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b798:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800b79a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b79c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7a0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800b7a4:	e7b4      	b.n	800b710 <HAL_TIM_ConfigClockSource+0x3c4>
 800b7a6:	bf00      	nop
 800b7a8:	40010000 	.word	0x40010000
 800b7ac:	0803504b 	.word	0x0803504b

0800b7b0 <TIM_SlaveTimer_SetConfig>:
{
 800b7b0:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800b7b2:	6803      	ldr	r3, [r0, #0]
{
 800b7b4:	460c      	mov	r4, r1
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b7b6:	6849      	ldr	r1, [r1, #4]
{
 800b7b8:	4605      	mov	r5, r0
  tmpsmcr = htim->Instance->SMCR;
 800b7ba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b7bc:	6820      	ldr	r0, [r4, #0]
  switch (sSlaveConfig->InputTrigger)
 800b7be:	2930      	cmp	r1, #48	; 0x30
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b7c4:	ea42 0201 	orr.w	r2, r2, r1
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b7c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b7cc:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b7d0:	ea42 0200 	orr.w	r2, r2, r0
  htim->Instance->SMCR = tmpsmcr;
 800b7d4:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800b7d6:	d005      	beq.n	800b7e4 <TIM_SlaveTimer_SetConfig+0x34>
 800b7d8:	d828      	bhi.n	800b82c <TIM_SlaveTimer_SetConfig+0x7c>
 800b7da:	2910      	cmp	r1, #16
 800b7dc:	d002      	beq.n	800b7e4 <TIM_SlaveTimer_SetConfig+0x34>
 800b7de:	2920      	cmp	r1, #32
 800b7e0:	d000      	beq.n	800b7e4 <TIM_SlaveTimer_SetConfig+0x34>
 800b7e2:	bb49      	cbnz	r1, 800b838 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b7e4:	4ab8      	ldr	r2, [pc, #736]	; (800bac8 <TIM_SlaveTimer_SetConfig+0x318>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d026      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ee:	d023      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b7f0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d01f      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b7f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d01b      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b800:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b804:	4293      	cmp	r3, r2
 800b806:	d017      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b808:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d013      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b810:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b814:	4293      	cmp	r3, r2
 800b816:	d00f      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b818:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d00b      	beq.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
 800b820:	f641 1144 	movw	r1, #6468	; 0x1944
 800b824:	48a9      	ldr	r0, [pc, #676]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b826:	f7f6 f9c0 	bl	8001baa <assert_failed>
 800b82a:	e005      	b.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 800b82c:	2950      	cmp	r1, #80	; 0x50
 800b82e:	f000 80a1 	beq.w	800b974 <TIM_SlaveTimer_SetConfig+0x1c4>
 800b832:	d803      	bhi.n	800b83c <TIM_SlaveTimer_SetConfig+0x8c>
 800b834:	2940      	cmp	r1, #64	; 0x40
 800b836:	d04f      	beq.n	800b8d8 <TIM_SlaveTimer_SetConfig+0x128>
  return HAL_OK;
 800b838:	2000      	movs	r0, #0
}
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800b83c:	2960      	cmp	r1, #96	; 0x60
 800b83e:	f000 80f3 	beq.w	800ba28 <TIM_SlaveTimer_SetConfig+0x278>
 800b842:	2970      	cmp	r1, #112	; 0x70
 800b844:	d1f8      	bne.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b846:	4aa0      	ldr	r2, [pc, #640]	; (800bac8 <TIM_SlaveTimer_SetConfig+0x318>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d01f      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b850:	d01c      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b852:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b856:	4293      	cmp	r3, r2
 800b858:	d018      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b85a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b85e:	4293      	cmp	r3, r2
 800b860:	d014      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b866:	4293      	cmp	r3, r2
 800b868:	d010      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b86a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b86e:	4293      	cmp	r3, r2
 800b870:	d00c      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b872:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b876:	4293      	cmp	r3, r2
 800b878:	d008      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b87a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b87e:	4293      	cmp	r3, r2
 800b880:	d004      	beq.n	800b88c <TIM_SlaveTimer_SetConfig+0xdc>
 800b882:	f641 01fc 	movw	r1, #6396	; 0x18fc
 800b886:	4891      	ldr	r0, [pc, #580]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b888:	f7f6 f98f 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800b88c:	68e3      	ldr	r3, [r4, #12]
 800b88e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800b892:	d004      	beq.n	800b89e <TIM_SlaveTimer_SetConfig+0xee>
 800b894:	f641 01fd 	movw	r1, #6397	; 0x18fd
 800b898:	488c      	ldr	r0, [pc, #560]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b89a:	f7f6 f986 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b89e:	68a3      	ldr	r3, [r4, #8]
 800b8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8a4:	d009      	beq.n	800b8ba <TIM_SlaveTimer_SetConfig+0x10a>
 800b8a6:	f033 0202 	bics.w	r2, r3, #2
 800b8aa:	d006      	beq.n	800b8ba <TIM_SlaveTimer_SetConfig+0x10a>
 800b8ac:	2b0a      	cmp	r3, #10
 800b8ae:	d004      	beq.n	800b8ba <TIM_SlaveTimer_SetConfig+0x10a>
 800b8b0:	f641 01fe 	movw	r1, #6398	; 0x18fe
 800b8b4:	4885      	ldr	r0, [pc, #532]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b8b6:	f7f6 f978 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	2b0f      	cmp	r3, #15
 800b8be:	d904      	bls.n	800b8ca <TIM_SlaveTimer_SetConfig+0x11a>
 800b8c0:	f641 01ff 	movw	r1, #6399	; 0x18ff
 800b8c4:	4881      	ldr	r0, [pc, #516]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b8c6:	f7f6 f970 	bl	8001baa <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	68a2      	ldr	r2, [r4, #8]
 800b8ce:	68e1      	ldr	r1, [r4, #12]
 800b8d0:	6828      	ldr	r0, [r5, #0]
 800b8d2:	f7ff fd31 	bl	800b338 <TIM_ETR_SetConfig>
 800b8d6:	e7af      	b.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b8d8:	4a7b      	ldr	r2, [pc, #492]	; (800bac8 <TIM_SlaveTimer_SetConfig+0x318>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d02f      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e2:	d02c      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b8e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d028      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b8ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d024      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b8f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d020      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b8fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b900:	4293      	cmp	r3, r2
 800b902:	d01c      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b904:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b908:	4293      	cmp	r3, r2
 800b90a:	d018      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b90c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b910:	4293      	cmp	r3, r2
 800b912:	d014      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b918:	4293      	cmp	r3, r2
 800b91a:	d010      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b91c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b920:	4293      	cmp	r3, r2
 800b922:	d00c      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b928:	4293      	cmp	r3, r2
 800b92a:	d008      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b92c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b930:	4293      	cmp	r3, r2
 800b932:	d004      	beq.n	800b93e <TIM_SlaveTimer_SetConfig+0x18e>
 800b934:	f641 110b 	movw	r1, #6411	; 0x190b
 800b938:	4864      	ldr	r0, [pc, #400]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b93a:	f7f6 f936 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	2b0f      	cmp	r3, #15
 800b942:	d904      	bls.n	800b94e <TIM_SlaveTimer_SetConfig+0x19e>
 800b944:	f641 110c 	movw	r1, #6412	; 0x190c
 800b948:	4860      	ldr	r0, [pc, #384]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b94a:	f7f6 f92e 	bl	8001baa <assert_failed>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	2b05      	cmp	r3, #5
 800b952:	f000 80b6 	beq.w	800bac2 <TIM_SlaveTimer_SetConfig+0x312>
      tmpccer = htim->Instance->CCER;
 800b956:	682b      	ldr	r3, [r5, #0]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b958:	6920      	ldr	r0, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800b95a:	6a19      	ldr	r1, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b95c:	6a1a      	ldr	r2, [r3, #32]
 800b95e:	f022 0201 	bic.w	r2, r2, #1
 800b962:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b964:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b966:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b96a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b970:	6219      	str	r1, [r3, #32]
 800b972:	e761      	b.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b974:	4a54      	ldr	r2, [pc, #336]	; (800bac8 <TIM_SlaveTimer_SetConfig+0x318>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d02f      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97e:	d02c      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b980:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800b984:	4293      	cmp	r3, r2
 800b986:	d028      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d024      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b994:	4293      	cmp	r3, r2
 800b996:	d020      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b998:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d01c      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9a0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d018      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d014      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d010      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00c      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d008      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d004      	beq.n	800b9da <TIM_SlaveTimer_SetConfig+0x22a>
 800b9d0:	f641 1125 	movw	r1, #6437	; 0x1925
 800b9d4:	483d      	ldr	r0, [pc, #244]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b9d6:	f7f6 f8e8 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e0:	d009      	beq.n	800b9f6 <TIM_SlaveTimer_SetConfig+0x246>
 800b9e2:	f033 0202 	bics.w	r2, r3, #2
 800b9e6:	d006      	beq.n	800b9f6 <TIM_SlaveTimer_SetConfig+0x246>
 800b9e8:	2b0a      	cmp	r3, #10
 800b9ea:	d004      	beq.n	800b9f6 <TIM_SlaveTimer_SetConfig+0x246>
 800b9ec:	f641 1126 	movw	r1, #6438	; 0x1926
 800b9f0:	4836      	ldr	r0, [pc, #216]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800b9f2:	f7f6 f8da 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	2b0f      	cmp	r3, #15
 800b9fa:	d904      	bls.n	800ba06 <TIM_SlaveTimer_SetConfig+0x256>
 800b9fc:	f641 1127 	movw	r1, #6439	; 0x1927
 800ba00:	4832      	ldr	r0, [pc, #200]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800ba02:	f7f6 f8d2 	bl	8001baa <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800ba0a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba0c:	6925      	ldr	r5, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba0e:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba10:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba14:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800ba18:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba1a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba1c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba22:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800ba26:	e7a2      	b.n	800b96e <TIM_SlaveTimer_SetConfig+0x1be>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ba28:	4a27      	ldr	r2, [pc, #156]	; (800bac8 <TIM_SlaveTimer_SetConfig+0x318>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d01f      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba32:	d01c      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba34:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d018      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d014      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d010      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba4c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d00c      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba54:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d008      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba5c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d004      	beq.n	800ba6e <TIM_SlaveTimer_SetConfig+0x2be>
 800ba64:	f641 1133 	movw	r1, #6451	; 0x1933
 800ba68:	4818      	ldr	r0, [pc, #96]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800ba6a:	f7f6 f89e 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba74:	d009      	beq.n	800ba8a <TIM_SlaveTimer_SetConfig+0x2da>
 800ba76:	f033 0202 	bics.w	r2, r3, #2
 800ba7a:	d006      	beq.n	800ba8a <TIM_SlaveTimer_SetConfig+0x2da>
 800ba7c:	2b0a      	cmp	r3, #10
 800ba7e:	d004      	beq.n	800ba8a <TIM_SlaveTimer_SetConfig+0x2da>
 800ba80:	f641 1134 	movw	r1, #6452	; 0x1934
 800ba84:	4811      	ldr	r0, [pc, #68]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800ba86:	f7f6 f890 	bl	8001baa <assert_failed>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	2b0f      	cmp	r3, #15
 800ba8e:	d904      	bls.n	800ba9a <TIM_SlaveTimer_SetConfig+0x2ea>
 800ba90:	f641 1135 	movw	r1, #6453	; 0x1935
 800ba94:	480d      	ldr	r0, [pc, #52]	; (800bacc <TIM_SlaveTimer_SetConfig+0x31c>)
 800ba96:	f7f6 f888 	bl	8001baa <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	68a5      	ldr	r5, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba9e:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800baa0:	6924      	ldr	r4, [r4, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baa2:	f020 0010 	bic.w	r0, r0, #16
 800baa6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baa8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800baaa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baac:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bab4:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800bab8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800babc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800babe:	621a      	str	r2, [r3, #32]
 800bac0:	e6ba      	b.n	800b838 <TIM_SlaveTimer_SetConfig+0x88>
        return HAL_ERROR;
 800bac2:	2001      	movs	r0, #1
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	40010000 	.word	0x40010000
 800bacc:	0803504b 	.word	0x0803504b

0800bad0 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800bad0:	6803      	ldr	r3, [r0, #0]
 800bad2:	4a30      	ldr	r2, [pc, #192]	; (800bb94 <HAL_TIM_SlaveConfigSynchro+0xc4>)
 800bad4:	4293      	cmp	r3, r2
{
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	4604      	mov	r4, r0
 800bada:	460e      	mov	r6, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800badc:	d01f      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae2:	d01c      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bae4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bae8:	4293      	cmp	r3, r2
 800baea:	d018      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800baec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d014      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800baf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d010      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bafc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d00c      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bb04:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d008      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bb0c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d004      	beq.n	800bb1e <HAL_TIM_SlaveConfigSynchro+0x4e>
 800bb14:	f241 21a7 	movw	r1, #4775	; 0x12a7
 800bb18:	481f      	ldr	r0, [pc, #124]	; (800bb98 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800bb1a:	f7f6 f846 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800bb1e:	6833      	ldr	r3, [r6, #0]
 800bb20:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800bb24:	d007      	beq.n	800bb36 <HAL_TIM_SlaveConfigSynchro+0x66>
 800bb26:	3b04      	subs	r3, #4
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d904      	bls.n	800bb36 <HAL_TIM_SlaveConfigSynchro+0x66>
 800bb2c:	f241 21a8 	movw	r1, #4776	; 0x12a8
 800bb30:	4819      	ldr	r0, [pc, #100]	; (800bb98 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800bb32:	f7f6 f83a 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800bb36:	6873      	ldr	r3, [r6, #4]
 800bb38:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bb3c:	d006      	beq.n	800bb4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bb3e:	2b40      	cmp	r3, #64	; 0x40
 800bb40:	d004      	beq.n	800bb4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bb42:	f241 21a9 	movw	r1, #4777	; 0x12a9
 800bb46:	4814      	ldr	r0, [pc, #80]	; (800bb98 <HAL_TIM_SlaveConfigSynchro+0xc8>)
 800bb48:	f7f6 f82f 	bl	8001baa <assert_failed>
  __HAL_LOCK(htim);
 800bb4c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800bb50:	2002      	movs	r0, #2
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d01d      	beq.n	800bb92 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800bb56:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800bb58:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800bb60:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bb64:	f7ff fe24 	bl	800b7b0 <TIM_SlaveTimer_SetConfig>
 800bb68:	b130      	cbz	r0, 800bb78 <HAL_TIM_SlaveConfigSynchro+0xa8>
    __HAL_UNLOCK(htim);
 800bb6a:	2300      	movs	r3, #0
      htim->State = HAL_TIM_STATE_READY;
 800bb6c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800bb70:	4628      	mov	r0, r5
    __HAL_UNLOCK(htim);
 800bb72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	68da      	ldr	r2, [r3, #12]
 800bb7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb80:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb88:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800bb8a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800bb8e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	40010000 	.word	0x40010000
 800bb98:	0803504b 	.word	0x0803504b

0800bb9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800bb9e:	4a3b      	ldr	r2, [pc, #236]	; (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
{
 800bba0:	4605      	mov	r5, r0
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800bba2:	6803      	ldr	r3, [r0, #0]
{
 800bba4:	460e      	mov	r6, r1
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d01f      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbae:	d01c      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbb0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d018      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d014      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d010      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d00c      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d008      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbd8:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d004      	beq.n	800bbea <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800bbe0:	f240 6163 	movw	r1, #1635	; 0x663
 800bbe4:	482a      	ldr	r0, [pc, #168]	; (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bbe6:	f7f5 ffe0 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800bbea:	6833      	ldr	r3, [r6, #0]
 800bbec:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800bbf0:	d006      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbf2:	2b40      	cmp	r3, #64	; 0x40
 800bbf4:	d004      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800bbf6:	f240 6164 	movw	r1, #1636	; 0x664
 800bbfa:	4825      	ldr	r0, [pc, #148]	; (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bbfc:	f7f5 ffd5 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800bc00:	68b3      	ldr	r3, [r6, #8]
 800bc02:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800bc06:	d004      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800bc08:	f240 6165 	movw	r1, #1637	; 0x665
 800bc0c:	4820      	ldr	r0, [pc, #128]	; (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc0e:	f7f5 ffcc 	bl	8001baa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bc12:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800bc16:	2002      	movs	r0, #2
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d035      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xec>
 800bc1c:	2301      	movs	r3, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc1e:	4a1b      	ldr	r2, [pc, #108]	; (800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bc20:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
  __HAL_LOCK(htim);
 800bc24:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 800bc28:	682b      	ldr	r3, [r5, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc2a:	4293      	cmp	r3, r2
  tmpcr2 = htim->Instance->CR2;
 800bc2c:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800bc2e:	689f      	ldr	r7, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc30:	d003      	beq.n	800bc3a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800bc32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d115      	bne.n	800bc66 <HAL_TIMEx_MasterConfigSynchronization+0xca>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800bc3a:	6873      	ldr	r3, [r6, #4]
 800bc3c:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 800bc40:	d00d      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bc42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc46:	d00a      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bc48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc4c:	d007      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bc4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bc52:	d004      	beq.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800bc54:	f240 6177 	movw	r1, #1655	; 0x677
 800bc58:	480d      	ldr	r0, [pc, #52]	; (800bc90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc5a:	f7f5 ffa6 	bl	8001baa <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc5e:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc62:	6873      	ldr	r3, [r6, #4]
 800bc64:	431c      	orrs	r4, r3
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc66:	6833      	ldr	r3, [r6, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc68:	f024 0470 	bic.w	r4, r4, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800bc6c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bc70:	2000      	movs	r0, #0
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc72:	431c      	orrs	r4, r3
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc74:	68b3      	ldr	r3, [r6, #8]
 800bc76:	431f      	orrs	r7, r3
  htim->Instance->CR2 = tmpcr2;
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	605c      	str	r4, [r3, #4]
  htim->Instance->SMCR = tmpsmcr;
 800bc7c:	609f      	str	r7, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800bc7e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800bc80:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800bc84:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d

  return HAL_OK;
}
 800bc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40010000 	.word	0x40010000
 800bc90:	08035089 	.word	0x08035089

0800bc94 <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bc94:	6803      	ldr	r3, [r0, #0]
 800bc96:	4a58      	ldr	r2, [pc, #352]	; (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
 800bc98:	4293      	cmp	r3, r2
{
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460e      	mov	r6, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800bca0:	d008      	beq.n	800bcb4 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800bca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d004      	beq.n	800bcb4 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
 800bcaa:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800bcae:	4853      	ldr	r0, [pc, #332]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bcb0:	f7f5 ff7b 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800bcb4:	6833      	ldr	r3, [r6, #0]
 800bcb6:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800bcba:	d004      	beq.n	800bcc6 <HAL_TIMEx_ConfigBreakDeadTime+0x32>
 800bcbc:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800bcc0:	484e      	ldr	r0, [pc, #312]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bcc2:	f7f5 ff72 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800bcc6:	6873      	ldr	r3, [r6, #4]
 800bcc8:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800bccc:	d004      	beq.n	800bcd8 <HAL_TIMEx_ConfigBreakDeadTime+0x44>
 800bcce:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800bcd2:	484a      	ldr	r0, [pc, #296]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bcd4:	f7f5 ff69 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800bcd8:	68b3      	ldr	r3, [r6, #8]
 800bcda:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800bcde:	d004      	beq.n	800bcea <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800bce0:	f240 61a9 	movw	r1, #1705	; 0x6a9
 800bce4:	4845      	ldr	r0, [pc, #276]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bce6:	f7f5 ff60 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800bcea:	68f3      	ldr	r3, [r6, #12]
 800bcec:	2bff      	cmp	r3, #255	; 0xff
 800bcee:	d904      	bls.n	800bcfa <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800bcf0:	f240 61aa 	movw	r1, #1706	; 0x6aa
 800bcf4:	4841      	ldr	r0, [pc, #260]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bcf6:	f7f5 ff58 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800bcfa:	6933      	ldr	r3, [r6, #16]
 800bcfc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800bd00:	d004      	beq.n	800bd0c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
 800bd02:	f240 61ab 	movw	r1, #1707	; 0x6ab
 800bd06:	483d      	ldr	r0, [pc, #244]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd08:	f7f5 ff4f 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800bd0c:	6973      	ldr	r3, [r6, #20]
 800bd0e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800bd12:	d004      	beq.n	800bd1e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800bd14:	f240 61ac 	movw	r1, #1708	; 0x6ac
 800bd18:	4838      	ldr	r0, [pc, #224]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd1a:	f7f5 ff46 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800bd1e:	69b3      	ldr	r3, [r6, #24]
 800bd20:	2b0f      	cmp	r3, #15
 800bd22:	d904      	bls.n	800bd2e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800bd24:	f240 61ad 	movw	r1, #1709	; 0x6ad
 800bd28:	4834      	ldr	r0, [pc, #208]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd2a:	f7f5 ff3e 	bl	8001baa <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800bd2e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800bd30:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800bd34:	d004      	beq.n	800bd40 <HAL_TIMEx_ConfigBreakDeadTime+0xac>
 800bd36:	f240 61ae 	movw	r1, #1710	; 0x6ae
 800bd3a:	4830      	ldr	r0, [pc, #192]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bd3c:	f7f5 ff35 	bl	8001baa <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800bd40:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d055      	beq.n	800bdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 800bd48:	2301      	movs	r3, #1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd4a:	4a2b      	ldr	r2, [pc, #172]	; (800bdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x164>)
  __HAL_LOCK(htim);
 800bd4c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd50:	68f3      	ldr	r3, [r6, #12]
 800bd52:	f423 7440 	bic.w	r4, r3, #768	; 0x300
 800bd56:	68b3      	ldr	r3, [r6, #8]
 800bd58:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd5a:	6873      	ldr	r3, [r6, #4]
 800bd5c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800bd60:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd62:	6833      	ldr	r3, [r6, #0]
 800bd64:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800bd68:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd6a:	6933      	ldr	r3, [r6, #16]
 800bd6c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800bd70:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd72:	6973      	ldr	r3, [r6, #20]
 800bd74:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 800bd78:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd7a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800bd7c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 800bd80:	431c      	orrs	r4, r3
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bd82:	69b3      	ldr	r3, [r6, #24]
 800bd84:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 800bd88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d003      	beq.n	800bd9a <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800bd92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d126      	bne.n	800bde8 <HAL_TIMEx_ConfigBreakDeadTime+0x154>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800bd9a:	69f3      	ldr	r3, [r6, #28]
 800bd9c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 800bda0:	d004      	beq.n	800bdac <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800bda2:	f240 61c3 	movw	r1, #1731	; 0x6c3
 800bda6:	4815      	ldr	r0, [pc, #84]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bda8:	f7f5 feff 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800bdac:	6a33      	ldr	r3, [r6, #32]
 800bdae:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 800bdb2:	d004      	beq.n	800bdbe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800bdb4:	f240 61c4 	movw	r1, #1732	; 0x6c4
 800bdb8:	4810      	ldr	r0, [pc, #64]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bdba:	f7f5 fef6 	bl	8001baa <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800bdbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bdc0:	2b0f      	cmp	r3, #15
 800bdc2:	d904      	bls.n	800bdce <HAL_TIMEx_ConfigBreakDeadTime+0x13a>
 800bdc4:	f240 61c5 	movw	r1, #1733	; 0x6c5
 800bdc8:	480c      	ldr	r0, [pc, #48]	; (800bdfc <HAL_TIMEx_ConfigBreakDeadTime+0x168>)
 800bdca:	f7f5 feee 	bl	8001baa <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bdd0:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 800bdd4:	ea44 5403 	orr.w	r4, r4, r3, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bdd8:	69f3      	ldr	r3, [r6, #28]
 800bdda:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800bdde:	431c      	orrs	r4, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bde0:	6a33      	ldr	r3, [r6, #32]
 800bde2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 800bde6:	431c      	orrs	r4, r3
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bde8:	682b      	ldr	r3, [r5, #0]

  __HAL_UNLOCK(htim);
 800bdea:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 800bdec:	645c      	str	r4, [r3, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800bdee:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c

  return HAL_OK;
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800bdf4:	2002      	movs	r0, #2
}
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	40010000 	.word	0x40010000
 800bdfc:	08035089 	.word	0x08035089

0800be00 <HAL_TIMEx_CommutCallback>:
 800be00:	4770      	bx	lr

0800be02 <HAL_TIMEx_BreakCallback>:
 800be02:	4770      	bx	lr

0800be04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be04:	4770      	bx	lr
	...

0800be08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be08:	b538      	push	{r3, r4, r5, lr}
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800be0a:	6842      	ldr	r2, [r0, #4]
{
 800be0c:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800be0e:	4baf      	ldr	r3, [pc, #700]	; (800c0cc <UART_SetConfig+0x2c4>)
 800be10:	429a      	cmp	r2, r3
 800be12:	d904      	bls.n	800be1e <UART_SetConfig+0x16>
 800be14:	f640 2151 	movw	r1, #2641	; 0xa51
 800be18:	48ad      	ldr	r0, [pc, #692]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be1a:	f7f5 fec6 	bl	8001baa <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800be1e:	68a3      	ldr	r3, [r4, #8]
 800be20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be24:	d007      	beq.n	800be36 <UART_SetConfig+0x2e>
 800be26:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800be2a:	d004      	beq.n	800be36 <UART_SetConfig+0x2e>
 800be2c:	f640 2152 	movw	r1, #2642	; 0xa52
 800be30:	48a7      	ldr	r0, [pc, #668]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be32:	f7f5 feba 	bl	8001baa <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800be36:	68e3      	ldr	r3, [r4, #12]
 800be38:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800be3c:	d004      	beq.n	800be48 <UART_SetConfig+0x40>
 800be3e:	f640 2153 	movw	r1, #2643	; 0xa53
 800be42:	48a3      	ldr	r0, [pc, #652]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be44:	f7f5 feb1 	bl	8001baa <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800be48:	6a23      	ldr	r3, [r4, #32]
 800be4a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800be4e:	d004      	beq.n	800be5a <UART_SetConfig+0x52>
 800be50:	f640 2154 	movw	r1, #2644	; 0xa54
 800be54:	489e      	ldr	r0, [pc, #632]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be56:	f7f5 fea8 	bl	8001baa <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800be60:	d007      	beq.n	800be72 <UART_SetConfig+0x6a>
 800be62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800be66:	d004      	beq.n	800be72 <UART_SetConfig+0x6a>
 800be68:	f640 2156 	movw	r1, #2646	; 0xa56
 800be6c:	4898      	ldr	r0, [pc, #608]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be6e:	f7f5 fe9c 	bl	8001baa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800be72:	6963      	ldr	r3, [r4, #20]
 800be74:	f033 020c 	bics.w	r2, r3, #12
 800be78:	d100      	bne.n	800be7c <UART_SetConfig+0x74>
 800be7a:	b923      	cbnz	r3, 800be86 <UART_SetConfig+0x7e>
 800be7c:	f640 2157 	movw	r1, #2647	; 0xa57
 800be80:	4893      	ldr	r0, [pc, #588]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be82:	f7f5 fe92 	bl	8001baa <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800be86:	69a3      	ldr	r3, [r4, #24]
 800be88:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800be8c:	d004      	beq.n	800be98 <UART_SetConfig+0x90>
 800be8e:	f640 2158 	movw	r1, #2648	; 0xa58
 800be92:	488f      	ldr	r0, [pc, #572]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800be94:	f7f5 fe89 	bl	8001baa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800be98:	69e3      	ldr	r3, [r4, #28]
 800be9a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800be9e:	d004      	beq.n	800beaa <UART_SetConfig+0xa2>
 800bea0:	f640 2159 	movw	r1, #2649	; 0xa59
 800bea4:	488a      	ldr	r0, [pc, #552]	; (800c0d0 <UART_SetConfig+0x2c8>)
 800bea6:	f7f5 fe80 	bl	8001baa <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800beaa:	6920      	ldr	r0, [r4, #16]
 800beac:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beae:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800beb0:	4301      	orrs	r1, r0
 800beb2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beb4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800beb6:	69e2      	ldr	r2, [r4, #28]
 800beb8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beba:	4886      	ldr	r0, [pc, #536]	; (800c0d4 <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bebc:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bebe:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800bec0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bec2:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bec4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bec6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bec8:	6859      	ldr	r1, [r3, #4]
 800beca:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bece:	4301      	orrs	r1, r0
 800bed0:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bed2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bed4:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800bed6:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bed8:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800bedc:	4301      	orrs	r1, r0
 800bede:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee0:	497d      	ldr	r1, [pc, #500]	; (800c0d8 <UART_SetConfig+0x2d0>)
 800bee2:	428b      	cmp	r3, r1
 800bee4:	d117      	bne.n	800bf16 <UART_SetConfig+0x10e>
 800bee6:	4b7d      	ldr	r3, [pc, #500]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bee8:	497d      	ldr	r1, [pc, #500]	; (800c0e0 <UART_SetConfig+0x2d8>)
 800beea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beee:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bef2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bef6:	5ccb      	ldrb	r3, [r1, r3]
 800bef8:	d12b      	bne.n	800bf52 <UART_SetConfig+0x14a>
  {
    switch (clocksource)
 800befa:	2b08      	cmp	r3, #8
 800befc:	f200 8114 	bhi.w	800c128 <UART_SetConfig+0x320>
 800bf00:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf04:	00780103 	.word	0x00780103
 800bf08:	01120117 	.word	0x01120117
 800bf0c:	011200e0 	.word	0x011200e0
 800bf10:	01120112 	.word	0x01120112
 800bf14:	003e      	.short	0x003e
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf16:	4973      	ldr	r1, [pc, #460]	; (800c0e4 <UART_SetConfig+0x2dc>)
 800bf18:	428b      	cmp	r3, r1
 800bf1a:	d106      	bne.n	800bf2a <UART_SetConfig+0x122>
 800bf1c:	4b6f      	ldr	r3, [pc, #444]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bf1e:	4972      	ldr	r1, [pc, #456]	; (800c0e8 <UART_SetConfig+0x2e0>)
 800bf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf24:	f003 030c 	and.w	r3, r3, #12
 800bf28:	e7e3      	b.n	800bef2 <UART_SetConfig+0xea>
 800bf2a:	4970      	ldr	r1, [pc, #448]	; (800c0ec <UART_SetConfig+0x2e4>)
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	d12c      	bne.n	800bf8a <UART_SetConfig+0x182>
 800bf30:	4b6a      	ldr	r3, [pc, #424]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bf32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf3a:	2b10      	cmp	r3, #16
 800bf3c:	f000 80bf 	beq.w	800c0be <UART_SetConfig+0x2b6>
 800bf40:	d815      	bhi.n	800bf6e <UART_SetConfig+0x166>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80de 	beq.w	800c104 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bf4c:	f000 80ec 	beq.w	800c128 <UART_SetConfig+0x320>
 800bf50:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800bf52:	2b08      	cmp	r3, #8
 800bf54:	f200 80e8 	bhi.w	800c128 <UART_SetConfig+0x320>
 800bf58:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf5c:	0094008e 	.word	0x0094008e
 800bf60:	00e60097 	.word	0x00e60097
 800bf64:	00e600a9 	.word	0x00e600a9
 800bf68:	00e600e6 	.word	0x00e600e6
 800bf6c:	00ac      	.short	0x00ac
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	f000 80dc 	beq.w	800c12c <UART_SetConfig+0x324>
 800bf74:	2b30      	cmp	r3, #48	; 0x30
 800bf76:	d1e7      	bne.n	800bf48 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf78:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bf7c:	f040 809a 	bne.w	800c0b4 <UART_SetConfig+0x2ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	0858      	lsrs	r0, r3, #1
 800bf84:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800bf88:	e0d9      	b.n	800c13e <UART_SetConfig+0x336>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf8a:	4959      	ldr	r1, [pc, #356]	; (800c0f0 <UART_SetConfig+0x2e8>)
 800bf8c:	428b      	cmp	r3, r1
 800bf8e:	d10d      	bne.n	800bfac <UART_SetConfig+0x1a4>
 800bf90:	4b52      	ldr	r3, [pc, #328]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bf92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf9a:	2b40      	cmp	r3, #64	; 0x40
 800bf9c:	f000 808f 	beq.w	800c0be <UART_SetConfig+0x2b6>
 800bfa0:	d9cf      	bls.n	800bf42 <UART_SetConfig+0x13a>
 800bfa2:	2b80      	cmp	r3, #128	; 0x80
 800bfa4:	f000 80c2 	beq.w	800c12c <UART_SetConfig+0x324>
 800bfa8:	2bc0      	cmp	r3, #192	; 0xc0
 800bfaa:	e7e4      	b.n	800bf76 <UART_SetConfig+0x16e>
 800bfac:	4951      	ldr	r1, [pc, #324]	; (800c0f4 <UART_SetConfig+0x2ec>)
 800bfae:	428b      	cmp	r3, r1
 800bfb0:	d10f      	bne.n	800bfd2 <UART_SetConfig+0x1ca>
 800bfb2:	4b4a      	ldr	r3, [pc, #296]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bfb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc0:	d07d      	beq.n	800c0be <UART_SetConfig+0x2b6>
 800bfc2:	d9be      	bls.n	800bf42 <UART_SetConfig+0x13a>
 800bfc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc8:	f000 80b0 	beq.w	800c12c <UART_SetConfig+0x324>
 800bfcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfd0:	e7d1      	b.n	800bf76 <UART_SetConfig+0x16e>
 800bfd2:	4949      	ldr	r1, [pc, #292]	; (800c0f8 <UART_SetConfig+0x2f0>)
 800bfd4:	428b      	cmp	r3, r1
 800bfd6:	d117      	bne.n	800c008 <UART_SetConfig+0x200>
 800bfd8:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <UART_SetConfig+0x2d4>)
 800bfda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bfe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe6:	d06a      	beq.n	800c0be <UART_SetConfig+0x2b6>
 800bfe8:	d807      	bhi.n	800bffa <UART_SetConfig+0x1f2>
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1ac      	bne.n	800bf48 <UART_SetConfig+0x140>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800bff2:	d147      	bne.n	800c084 <UART_SetConfig+0x27c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800bff4:	f7fc fae6 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 800bff8:	e089      	b.n	800c10e <UART_SetConfig+0x306>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bffe:	f000 8095 	beq.w	800c12c <UART_SetConfig+0x324>
 800c002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c006:	e7b6      	b.n	800bf76 <UART_SetConfig+0x16e>
 800c008:	493c      	ldr	r1, [pc, #240]	; (800c0fc <UART_SetConfig+0x2f4>)
 800c00a:	428b      	cmp	r3, r1
 800c00c:	d116      	bne.n	800c03c <UART_SetConfig+0x234>
 800c00e:	4b33      	ldr	r3, [pc, #204]	; (800c0dc <UART_SetConfig+0x2d4>)
 800c010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c014:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c01c:	d04f      	beq.n	800c0be <UART_SetConfig+0x2b6>
 800c01e:	d806      	bhi.n	800c02e <UART_SetConfig+0x226>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d06f      	beq.n	800c104 <UART_SetConfig+0x2fc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c024:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c028:	d17e      	bne.n	800c128 <UART_SetConfig+0x320>
 800c02a:	2310      	movs	r3, #16
 800c02c:	e765      	b.n	800befa <UART_SetConfig+0xf2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c02e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c032:	d07b      	beq.n	800c12c <UART_SetConfig+0x324>
 800c034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c038:	d09e      	beq.n	800bf78 <UART_SetConfig+0x170>
 800c03a:	e7f3      	b.n	800c024 <UART_SetConfig+0x21c>
 800c03c:	4930      	ldr	r1, [pc, #192]	; (800c100 <UART_SetConfig+0x2f8>)
 800c03e:	428b      	cmp	r3, r1
 800c040:	d172      	bne.n	800c128 <UART_SetConfig+0x320>
 800c042:	4b26      	ldr	r3, [pc, #152]	; (800c0dc <UART_SetConfig+0x2d4>)
 800c044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c048:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c04c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c050:	d035      	beq.n	800c0be <UART_SetConfig+0x2b6>
 800c052:	d9e5      	bls.n	800c020 <UART_SetConfig+0x218>
 800c054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c058:	d068      	beq.n	800c12c <UART_SetConfig+0x324>
 800c05a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c05e:	e7eb      	b.n	800c038 <UART_SetConfig+0x230>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c060:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c064:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 800c068:	6822      	ldr	r2, [r4, #0]
 800c06a:	4318      	orrs	r0, r3
 800c06c:	60d0      	str	r0, [r2, #12]
 800c06e:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c070:	2300      	movs	r3, #0
 800c072:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800c074:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800c076:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c078:	f7fc fa94 	bl	80085a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c082:	e008      	b.n	800c096 <UART_SetConfig+0x28e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c084:	f7fc fa9e 	bl	80085c4 <HAL_RCC_GetPCLK2Freq>
 800c088:	e7f8      	b.n	800c07c <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c08a:	6863      	ldr	r3, [r4, #4]
 800c08c:	0858      	lsrs	r0, r3, #1
 800c08e:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800c092:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c096:	fbb0 f0f3 	udiv	r0, r0, r3
 800c09a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c09c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c0a0:	f1a0 0210 	sub.w	r2, r0, #16
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d83f      	bhi.n	800c128 <UART_SetConfig+0x320>
      huart->Instance->BRR = usartdiv;
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	60d8      	str	r0, [r3, #12]
 800c0ac:	e7df      	b.n	800c06e <UART_SetConfig+0x266>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c0ae:	f7fc f953 	bl	8008358 <HAL_RCC_GetSysClockFreq>
 800c0b2:	e7e3      	b.n	800c07c <UART_SetConfig+0x274>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c0b4:	6863      	ldr	r3, [r4, #4]
 800c0b6:	0858      	lsrs	r0, r3, #1
 800c0b8:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800c0bc:	e7eb      	b.n	800c096 <UART_SetConfig+0x28e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0be:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c0c2:	d1f4      	bne.n	800c0ae <UART_SetConfig+0x2a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c0c4:	f7fc f948 	bl	8008358 <HAL_RCC_GetSysClockFreq>
 800c0c8:	e021      	b.n	800c10e <UART_SetConfig+0x306>
 800c0ca:	bf00      	nop
 800c0cc:	019bfcc0 	.word	0x019bfcc0
 800c0d0:	080350db 	.word	0x080350db
 800c0d4:	efff69f3 	.word	0xefff69f3
 800c0d8:	40011000 	.word	0x40011000
 800c0dc:	40023800 	.word	0x40023800
 800c0e0:	080350ca 	.word	0x080350ca
 800c0e4:	40004400 	.word	0x40004400
 800c0e8:	080350ce 	.word	0x080350ce
 800c0ec:	40004800 	.word	0x40004800
 800c0f0:	40004c00 	.word	0x40004c00
 800c0f4:	40005000 	.word	0x40005000
 800c0f8:	40011400 	.word	0x40011400
 800c0fc:	40007800 	.word	0x40007800
 800c100:	40007c00 	.word	0x40007c00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c104:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c108:	d1b6      	bne.n	800c078 <UART_SetConfig+0x270>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c10a:	f7fc fa4b 	bl	80085a4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c10e:	6862      	ldr	r2, [r4, #4]
 800c110:	0853      	lsrs	r3, r2, #1
 800c112:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c116:	fbb0 f0f2 	udiv	r0, r0, r2
 800c11a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c120:	f1a0 0210 	sub.w	r2, r0, #16
 800c124:	429a      	cmp	r2, r3
 800c126:	d99b      	bls.n	800c060 <UART_SetConfig+0x258>
      ret = HAL_ERROR;
 800c128:	2001      	movs	r0, #1
 800c12a:	e7a1      	b.n	800c070 <UART_SetConfig+0x268>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c12c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c130:	d1ab      	bne.n	800c08a <UART_SetConfig+0x282>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c132:	6863      	ldr	r3, [r4, #4]
 800c134:	0858      	lsrs	r0, r3, #1
 800c136:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 800c13a:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c13e:	fbb0 f0f3 	udiv	r0, r0, r3
 800c142:	e7ea      	b.n	800c11a <UART_SetConfig+0x312>

0800c144 <UART_AdvFeatureConfig>:
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c144:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c146:	2bff      	cmp	r3, #255	; 0xff
{
 800c148:	b510      	push	{r4, lr}
 800c14a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800c14c:	d904      	bls.n	800c158 <UART_AdvFeatureConfig+0x14>
 800c14e:	f640 21d2 	movw	r1, #2770	; 0xad2
 800c152:	4862      	ldr	r0, [pc, #392]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c154:	f7f5 fd29 	bl	8001baa <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c15a:	07d8      	lsls	r0, r3, #31
 800c15c:	d50f      	bpl.n	800c17e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800c15e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c160:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c164:	d004      	beq.n	800c170 <UART_AdvFeatureConfig+0x2c>
 800c166:	f640 21d7 	movw	r1, #2775	; 0xad7
 800c16a:	485c      	ldr	r0, [pc, #368]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c16c:	f7f5 fd1d 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c170:	6822      	ldr	r2, [r4, #0]
 800c172:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c174:	6853      	ldr	r3, [r2, #4]
 800c176:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c17a:	430b      	orrs	r3, r1
 800c17c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c180:	0799      	lsls	r1, r3, #30
 800c182:	d50f      	bpl.n	800c1a4 <UART_AdvFeatureConfig+0x60>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800c184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c186:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800c18a:	d004      	beq.n	800c196 <UART_AdvFeatureConfig+0x52>
 800c18c:	f640 21de 	movw	r1, #2782	; 0xade
 800c190:	4852      	ldr	r0, [pc, #328]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c192:	f7f5 fd0a 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c196:	6822      	ldr	r2, [r4, #0]
 800c198:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c19a:	6853      	ldr	r3, [r2, #4]
 800c19c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a6:	075a      	lsls	r2, r3, #29
 800c1a8:	d50f      	bpl.n	800c1ca <UART_AdvFeatureConfig+0x86>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800c1aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c1ac:	f433 2380 	bics.w	r3, r3, #262144	; 0x40000
 800c1b0:	d004      	beq.n	800c1bc <UART_AdvFeatureConfig+0x78>
 800c1b2:	f640 21e5 	movw	r1, #2789	; 0xae5
 800c1b6:	4849      	ldr	r0, [pc, #292]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c1b8:	f7f5 fcf7 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1bc:	6822      	ldr	r2, [r4, #0]
 800c1be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c1c0:	6853      	ldr	r3, [r2, #4]
 800c1c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1cc:	071b      	lsls	r3, r3, #28
 800c1ce:	d50f      	bpl.n	800c1f0 <UART_AdvFeatureConfig+0xac>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800c1d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c1d6:	d004      	beq.n	800c1e2 <UART_AdvFeatureConfig+0x9e>
 800c1d8:	f640 21ec 	movw	r1, #2796	; 0xaec
 800c1dc:	483f      	ldr	r0, [pc, #252]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c1de:	f7f5 fce4 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1e2:	6822      	ldr	r2, [r4, #0]
 800c1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1e6:	6853      	ldr	r3, [r2, #4]
 800c1e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1ec:	430b      	orrs	r3, r1
 800c1ee:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1f2:	06d8      	lsls	r0, r3, #27
 800c1f4:	d50f      	bpl.n	800c216 <UART_AdvFeatureConfig+0xd2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800c1f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1f8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c1fc:	d004      	beq.n	800c208 <UART_AdvFeatureConfig+0xc4>
 800c1fe:	f640 21f3 	movw	r1, #2803	; 0xaf3
 800c202:	4836      	ldr	r0, [pc, #216]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c204:	f7f5 fcd1 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c20c:	6893      	ldr	r3, [r2, #8]
 800c20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c212:	430b      	orrs	r3, r1
 800c214:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c218:	0699      	lsls	r1, r3, #26
 800c21a:	d50f      	bpl.n	800c23c <UART_AdvFeatureConfig+0xf8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800c21c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c21e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800c222:	d004      	beq.n	800c22e <UART_AdvFeatureConfig+0xea>
 800c224:	f640 21fa 	movw	r1, #2810	; 0xafa
 800c228:	482c      	ldr	r0, [pc, #176]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c22a:	f7f5 fcbe 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c22e:	6822      	ldr	r2, [r4, #0]
 800c230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c232:	6893      	ldr	r3, [r2, #8]
 800c234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c238:	430b      	orrs	r3, r1
 800c23a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c23c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c23e:	065a      	lsls	r2, r3, #25
 800c240:	d538      	bpl.n	800c2b4 <UART_AdvFeatureConfig+0x170>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	4a26      	ldr	r2, [pc, #152]	; (800c2e0 <UART_AdvFeatureConfig+0x19c>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d010      	beq.n	800c26c <UART_AdvFeatureConfig+0x128>
 800c24a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c24e:	4293      	cmp	r3, r2
 800c250:	d00c      	beq.n	800c26c <UART_AdvFeatureConfig+0x128>
 800c252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c256:	4293      	cmp	r3, r2
 800c258:	d008      	beq.n	800c26c <UART_AdvFeatureConfig+0x128>
 800c25a:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 800c25e:	4293      	cmp	r3, r2
 800c260:	d004      	beq.n	800c26c <UART_AdvFeatureConfig+0x128>
 800c262:	f640 3101 	movw	r1, #2817	; 0xb01
 800c266:	481d      	ldr	r0, [pc, #116]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c268:	f7f5 fc9f 	bl	8001baa <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800c26c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c26e:	f433 1380 	bics.w	r3, r3, #1048576	; 0x100000
 800c272:	d004      	beq.n	800c27e <UART_AdvFeatureConfig+0x13a>
 800c274:	f640 3102 	movw	r1, #2818	; 0xb02
 800c278:	4818      	ldr	r0, [pc, #96]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c27a:	f7f5 fc96 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c27e:	6821      	ldr	r1, [r4, #0]
 800c280:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c282:	684b      	ldr	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c284:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c288:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c28c:	ea43 0302 	orr.w	r3, r3, r2
 800c290:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c292:	d10f      	bne.n	800c2b4 <UART_AdvFeatureConfig+0x170>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800c294:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c296:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800c29a:	d004      	beq.n	800c2a6 <UART_AdvFeatureConfig+0x162>
 800c29c:	f640 3107 	movw	r1, #2823	; 0xb07
 800c2a0:	480e      	ldr	r0, [pc, #56]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c2a2:	f7f5 fc82 	bl	8001baa <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2a6:	6822      	ldr	r2, [r4, #0]
 800c2a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c2aa:	6853      	ldr	r3, [r2, #4]
 800c2ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c2b0:	430b      	orrs	r3, r1
 800c2b2:	6053      	str	r3, [r2, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2b6:	061b      	lsls	r3, r3, #24
 800c2b8:	d50f      	bpl.n	800c2da <UART_AdvFeatureConfig+0x196>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800c2ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c2bc:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c2c0:	d004      	beq.n	800c2cc <UART_AdvFeatureConfig+0x188>
 800c2c2:	f640 310f 	movw	r1, #2831	; 0xb0f
 800c2c6:	4805      	ldr	r0, [pc, #20]	; (800c2dc <UART_AdvFeatureConfig+0x198>)
 800c2c8:	f7f5 fc6f 	bl	8001baa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c2d0:	6853      	ldr	r3, [r2, #4]
 800c2d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c2d6:	430b      	orrs	r3, r1
 800c2d8:	6053      	str	r3, [r2, #4]
 800c2da:	bd10      	pop	{r4, pc}
 800c2dc:	080350db 	.word	0x080350db
 800c2e0:	40011000 	.word	0x40011000

0800c2e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e8:	9d06      	ldr	r5, [sp, #24]
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460f      	mov	r7, r1
 800c2ee:	4616      	mov	r6, r2
 800c2f0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2f2:	6821      	ldr	r1, [r4, #0]
 800c2f4:	69ca      	ldr	r2, [r1, #28]
 800c2f6:	ea37 0302 	bics.w	r3, r7, r2
 800c2fa:	bf0c      	ite	eq
 800c2fc:	2201      	moveq	r2, #1
 800c2fe:	2200      	movne	r2, #0
 800c300:	42b2      	cmp	r2, r6
 800c302:	d002      	beq.n	800c30a <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c304:	2000      	movs	r0, #0
}
 800c306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c30a:	1c6b      	adds	r3, r5, #1
 800c30c:	d0f2      	beq.n	800c2f4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c30e:	f7f9 f86d 	bl	80053ec <HAL_GetTick>
 800c312:	eba0 0008 	sub.w	r0, r0, r8
 800c316:	4285      	cmp	r5, r0
 800c318:	d301      	bcc.n	800c31e <UART_WaitOnFlagUntilTimeout+0x3a>
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	d1e9      	bne.n	800c2f2 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c31e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800c320:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c328:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	f022 0201 	bic.w	r2, r2, #1
 800c330:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c332:	2320      	movs	r3, #32
 800c334:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c336:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800c338:	2300      	movs	r3, #0
 800c33a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c342 <HAL_UART_Transmit>:
{
 800c342:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c346:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c348:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800c34a:	4604      	mov	r4, r0
 800c34c:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800c34e:	2b20      	cmp	r3, #32
{
 800c350:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c352:	d14b      	bne.n	800c3ec <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 800c354:	2900      	cmp	r1, #0
 800c356:	d047      	beq.n	800c3e8 <HAL_UART_Transmit+0xa6>
 800c358:	2a00      	cmp	r2, #0
 800c35a:	d045      	beq.n	800c3e8 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800c35c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c360:	2b01      	cmp	r3, #1
 800c362:	d043      	beq.n	800c3ec <HAL_UART_Transmit+0xaa>
 800c364:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c366:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800c368:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c36c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c36e:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c370:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800c372:	f7f9 f83b 	bl	80053ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c376:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c378:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800c37a:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800c382:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c386:	d103      	bne.n	800c390 <HAL_UART_Transmit+0x4e>
 800c388:	6923      	ldr	r3, [r4, #16]
 800c38a:	b90b      	cbnz	r3, 800c390 <HAL_UART_Transmit+0x4e>
 800c38c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c38e:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800c390:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c394:	463b      	mov	r3, r7
 800c396:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c39a:	b292      	uxth	r2, r2
 800c39c:	b94a      	cbnz	r2, 800c3b2 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c39e:	2140      	movs	r1, #64	; 0x40
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f7ff ff9f 	bl	800c2e4 <UART_WaitOnFlagUntilTimeout>
 800c3a6:	b950      	cbnz	r0, 800c3be <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800c3a8:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c3aa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800c3ae:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800c3b0:	e006      	b.n	800c3c0 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2180      	movs	r1, #128	; 0x80
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff ff94 	bl	800c2e4 <UART_WaitOnFlagUntilTimeout>
 800c3bc:	b118      	cbz	r0, 800c3c6 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800c3be:	2003      	movs	r0, #3
}
 800c3c0:	b003      	add	sp, #12
 800c3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3c6:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c3c8:	b95e      	cbnz	r6, 800c3e2 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3ca:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3d2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800c3d4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800c3e0:	e7d6      	b.n	800c390 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3e2:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c3e6:	e7f4      	b.n	800c3d2 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	e7e9      	b.n	800c3c0 <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 800c3ec:	2002      	movs	r0, #2
 800c3ee:	e7e7      	b.n	800c3c0 <HAL_UART_Transmit+0x7e>

0800c3f0 <HAL_UART_Receive>:
{
 800c3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3f4:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3f6:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3fc:	2b20      	cmp	r3, #32
{
 800c3fe:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800c400:	d163      	bne.n	800c4ca <HAL_UART_Receive+0xda>
    if ((pData == NULL) || (Size == 0U))
 800c402:	2900      	cmp	r1, #0
 800c404:	d05f      	beq.n	800c4c6 <HAL_UART_Receive+0xd6>
 800c406:	2a00      	cmp	r2, #0
 800c408:	d05d      	beq.n	800c4c6 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 800c40a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d05b      	beq.n	800c4ca <HAL_UART_Receive+0xda>
 800c412:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c414:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800c416:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c41a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c41c:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c41e:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800c420:	f7f8 ffe4 	bl	80053ec <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c424:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c426:	4680      	mov	r8, r0
    huart->RxXferSize  = Size;
 800c428:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c42c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800c430:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c434:	d11b      	bne.n	800c46e <HAL_UART_Receive+0x7e>
 800c436:	6922      	ldr	r2, [r4, #16]
 800c438:	b9ba      	cbnz	r2, 800c46a <HAL_UART_Receive+0x7a>
 800c43a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c43e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800c446:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c44a:	d121      	bne.n	800c490 <HAL_UART_Receive+0xa0>
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	b9fb      	cbnz	r3, 800c490 <HAL_UART_Receive+0xa0>
 800c450:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800c452:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 800c454:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800c458:	b280      	uxth	r0, r0
 800c45a:	b9d8      	cbnz	r0, 800c494 <HAL_UART_Receive+0xa4>
    huart->RxState = HAL_UART_STATE_READY;
 800c45c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800c45e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 800c462:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c464:	b003      	add	sp, #12
 800c466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800c46a:	22ff      	movs	r2, #255	; 0xff
 800c46c:	e7e7      	b.n	800c43e <HAL_UART_Receive+0x4e>
 800c46e:	b923      	cbnz	r3, 800c47a <HAL_UART_Receive+0x8a>
 800c470:	6922      	ldr	r2, [r4, #16]
 800c472:	2a00      	cmp	r2, #0
 800c474:	d0f9      	beq.n	800c46a <HAL_UART_Receive+0x7a>
 800c476:	227f      	movs	r2, #127	; 0x7f
 800c478:	e7e1      	b.n	800c43e <HAL_UART_Receive+0x4e>
 800c47a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c47e:	d104      	bne.n	800c48a <HAL_UART_Receive+0x9a>
 800c480:	6922      	ldr	r2, [r4, #16]
 800c482:	2a00      	cmp	r2, #0
 800c484:	d0f7      	beq.n	800c476 <HAL_UART_Receive+0x86>
 800c486:	223f      	movs	r2, #63	; 0x3f
 800c488:	e7d9      	b.n	800c43e <HAL_UART_Receive+0x4e>
 800c48a:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 800c48e:	e7d8      	b.n	800c442 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 800c490:	2600      	movs	r6, #0
 800c492:	e7df      	b.n	800c454 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c494:	f8cd 9000 	str.w	r9, [sp]
 800c498:	4643      	mov	r3, r8
 800c49a:	2200      	movs	r2, #0
 800c49c:	2120      	movs	r1, #32
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f7ff ff20 	bl	800c2e4 <UART_WaitOnFlagUntilTimeout>
 800c4a4:	b998      	cbnz	r0, 800c4ce <HAL_UART_Receive+0xde>
 800c4a6:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4aa:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800c4ac:	b945      	cbnz	r5, 800c4c0 <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c4ae:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800c4b2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800c4be:	e7c9      	b.n	800c454 <HAL_UART_Receive+0x64>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c4c0:	f805 3b01 	strb.w	r3, [r5], #1
 800c4c4:	e7f5      	b.n	800c4b2 <HAL_UART_Receive+0xc2>
      return  HAL_ERROR;
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	e7cc      	b.n	800c464 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 800c4ca:	2002      	movs	r0, #2
 800c4cc:	e7ca      	b.n	800c464 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800c4ce:	2003      	movs	r0, #3
 800c4d0:	e7c8      	b.n	800c464 <HAL_UART_Receive+0x74>

0800c4d2 <UART_CheckIdleState>:
{
 800c4d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d4:	2500      	movs	r5, #0
{
 800c4d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d8:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800c4da:	f7f8 ff87 	bl	80053ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4de:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800c4e0:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4e2:	6812      	ldr	r2, [r2, #0]
 800c4e4:	0712      	lsls	r2, r2, #28
 800c4e6:	d407      	bmi.n	800c4f8 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800c4e8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c4ea:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c4ec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800c4ee:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800c4f2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c4f4:	b003      	add	sp, #12
 800c4f6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c4fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c500:	4620      	mov	r0, r4
 800c502:	9200      	str	r2, [sp, #0]
 800c504:	462a      	mov	r2, r5
 800c506:	f7ff feed 	bl	800c2e4 <UART_WaitOnFlagUntilTimeout>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0ec      	beq.n	800c4e8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800c50e:	2003      	movs	r0, #3
 800c510:	e7f0      	b.n	800c4f4 <UART_CheckIdleState+0x22>
	...

0800c514 <HAL_UART_Init>:
{
 800c514:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c516:	4604      	mov	r4, r0
 800c518:	2800      	cmp	r0, #0
 800c51a:	d071      	beq.n	800c600 <HAL_UART_Init+0xec>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800c51c:	6981      	ldr	r1, [r0, #24]
 800c51e:	6803      	ldr	r3, [r0, #0]
 800c520:	4a38      	ldr	r2, [pc, #224]	; (800c604 <HAL_UART_Init+0xf0>)
 800c522:	2900      	cmp	r1, #0
 800c524:	d04c      	beq.n	800c5c0 <HAL_UART_Init+0xac>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800c526:	4293      	cmp	r3, r2
 800c528:	d020      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c52a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800c52e:	4293      	cmp	r3, r2
 800c530:	d01c      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c536:	4293      	cmp	r3, r2
 800c538:	d018      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c53a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c53e:	4293      	cmp	r3, r2
 800c540:	d014      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c546:	4293      	cmp	r3, r2
 800c548:	d010      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c54a:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c54e:	4293      	cmp	r3, r2
 800c550:	d00c      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c552:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c556:	4293      	cmp	r3, r2
 800c558:	d008      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c55a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c55e:	4293      	cmp	r3, r2
 800c560:	d004      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c562:	f44f 7195 	mov.w	r1, #298	; 0x12a
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c566:	4828      	ldr	r0, [pc, #160]	; (800c608 <HAL_UART_Init+0xf4>)
 800c568:	f7f5 fb1f 	bl	8001baa <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c56c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c56e:	b923      	cbnz	r3, 800c57a <HAL_UART_Init+0x66>
    huart->Lock = HAL_UNLOCKED;
 800c570:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c574:	4620      	mov	r0, r4
 800c576:	f7f6 f90d 	bl	8002794 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c57a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c57c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c57e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800c580:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	f023 0301 	bic.w	r3, r3, #1
 800c588:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c58a:	f7ff fc3d 	bl	800be08 <UART_SetConfig>
 800c58e:	2801      	cmp	r0, #1
 800c590:	d036      	beq.n	800c600 <HAL_UART_Init+0xec>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c594:	b113      	cbz	r3, 800c59c <HAL_UART_Init+0x88>
    UART_AdvFeatureConfig(huart);
 800c596:	4620      	mov	r0, r4
 800c598:	f7ff fdd4 	bl	800c144 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c59c:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c59e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5a8:	689a      	ldr	r2, [r3, #8]
 800c5aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5ae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	f042 0201 	orr.w	r2, r2, #1
}
 800c5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c5ba:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c5bc:	f7ff bf89 	b.w	800c4d2 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d0d3      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5c4:	4a11      	ldr	r2, [pc, #68]	; (800c60c <HAL_UART_Init+0xf8>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d0d0      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d0cc      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d0c8      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d0c4      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5e2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d0c0      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5ea:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d0bc      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d0b8      	beq.n	800c56c <HAL_UART_Init+0x58>
 800c5fa:	f240 112f 	movw	r1, #303	; 0x12f
 800c5fe:	e7b2      	b.n	800c566 <HAL_UART_Init+0x52>
}
 800c600:	2001      	movs	r0, #1
 800c602:	bd10      	pop	{r4, pc}
 800c604:	40011000 	.word	0x40011000
 800c608:	080350db 	.word	0x080350db
 800c60c:	40004400 	.word	0x40004400

0800c610 <FMC_SDRAM_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c610:	4b54      	ldr	r3, [pc, #336]	; (800c764 <FMC_SDRAM_Init+0x154>)
 800c612:	4298      	cmp	r0, r3
{
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	4605      	mov	r5, r0
 800c61a:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c61c:	d004      	beq.n	800c628 <FMC_SDRAM_Init+0x18>
 800c61e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 800c622:	4851      	ldr	r0, [pc, #324]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c624:	f7f5 fac1 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Init->SDBank));
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d904      	bls.n	800c638 <FMC_SDRAM_Init+0x28>
 800c62e:	f240 21ed 	movw	r1, #749	; 0x2ed
 800c632:	484d      	ldr	r0, [pc, #308]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c634:	f7f5 fab9 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COLUMNBITS_NUMBER(Init->ColumnBitsNumber));
 800c638:	6863      	ldr	r3, [r4, #4]
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d904      	bls.n	800c648 <FMC_SDRAM_Init+0x38>
 800c63e:	f240 21ee 	movw	r1, #750	; 0x2ee
 800c642:	4849      	ldr	r0, [pc, #292]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c644:	f7f5 fab1 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_ROWBITS_NUMBER(Init->RowBitsNumber));
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	f033 0204 	bics.w	r2, r3, #4
 800c64e:	d006      	beq.n	800c65e <FMC_SDRAM_Init+0x4e>
 800c650:	2b08      	cmp	r3, #8
 800c652:	d004      	beq.n	800c65e <FMC_SDRAM_Init+0x4e>
 800c654:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c658:	4843      	ldr	r0, [pc, #268]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c65a:	f7f5 faa6 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDMEMORY_WIDTH(Init->MemoryDataWidth));
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	f033 0210 	bics.w	r2, r3, #16
 800c664:	d006      	beq.n	800c674 <FMC_SDRAM_Init+0x64>
 800c666:	2b20      	cmp	r3, #32
 800c668:	d004      	beq.n	800c674 <FMC_SDRAM_Init+0x64>
 800c66a:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800c66e:	483e      	ldr	r0, [pc, #248]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c670:	f7f5 fa9b 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_INTERNALBANK_NUMBER(Init->InternalBankNumber));
 800c674:	6923      	ldr	r3, [r4, #16]
 800c676:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800c67a:	d004      	beq.n	800c686 <FMC_SDRAM_Init+0x76>
 800c67c:	f240 21f1 	movw	r1, #753	; 0x2f1
 800c680:	4839      	ldr	r0, [pc, #228]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c682:	f7f5 fa92 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_CAS_LATENCY(Init->CASLatency));
 800c686:	6963      	ldr	r3, [r4, #20]
 800c688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c68c:	2a80      	cmp	r2, #128	; 0x80
 800c68e:	d007      	beq.n	800c6a0 <FMC_SDRAM_Init+0x90>
 800c690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c694:	d004      	beq.n	800c6a0 <FMC_SDRAM_Init+0x90>
 800c696:	f240 21f2 	movw	r1, #754	; 0x2f2
 800c69a:	4833      	ldr	r0, [pc, #204]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c69c:	f7f5 fa85 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_WRITE_PROTECTION(Init->WriteProtection));
 800c6a0:	69a3      	ldr	r3, [r4, #24]
 800c6a2:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800c6a6:	d004      	beq.n	800c6b2 <FMC_SDRAM_Init+0xa2>
 800c6a8:	f240 21f3 	movw	r1, #755	; 0x2f3
 800c6ac:	482e      	ldr	r0, [pc, #184]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c6ae:	f7f5 fa7c 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
 800c6b2:	69e3      	ldr	r3, [r4, #28]
 800c6b4:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800c6b8:	d007      	beq.n	800c6ca <FMC_SDRAM_Init+0xba>
 800c6ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c6be:	d004      	beq.n	800c6ca <FMC_SDRAM_Init+0xba>
 800c6c0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800c6c4:	4828      	ldr	r0, [pc, #160]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c6c6:	f7f5 fa70 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
 800c6ca:	6a23      	ldr	r3, [r4, #32]
 800c6cc:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800c6d0:	d004      	beq.n	800c6dc <FMC_SDRAM_Init+0xcc>
 800c6d2:	f240 21f5 	movw	r1, #757	; 0x2f5
 800c6d6:	4824      	ldr	r0, [pc, #144]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c6d8:	f7f5 fa67 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   
 800c6dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6de:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800c6e2:	d007      	beq.n	800c6f4 <FMC_SDRAM_Init+0xe4>
 800c6e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6e8:	d004      	beq.n	800c6f4 <FMC_SDRAM_Init+0xe4>
 800c6ea:	f240 21f6 	movw	r1, #758	; 0x2f6
 800c6ee:	481e      	ldr	r0, [pc, #120]	; (800c768 <FMC_SDRAM_Init+0x158>)
 800c6f0:	f7f5 fa5b 	bl	8001baa <assert_failed>

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	1d22      	adds	r2, r4, #4
 800c6f8:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	69a0      	ldr	r0, [r4, #24]
 800c700:	69e7      	ldr	r7, [r4, #28]
 800c702:	6a26      	ldr	r6, [r4, #32]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c704:	6829      	ldr	r1, [r5, #0]
 800c706:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800c708:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c70c:	d014      	beq.n	800c738 <FMC_SDRAM_Init+0x128>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c70e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c710:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                        Init->RowBitsNumber      |\
 800c714:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c718:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
                        Init->MemoryDataWidth    |\
 800c71c:	ea42 020c 	orr.w	r2, r2, ip
                        Init->InternalBankNumber |\
 800c720:	ea42 020e 	orr.w	r2, r2, lr
                        Init->CASLatency         |\
 800c724:	ea42 0300 	orr.w	r3, r2, r0
                        Init->WriteProtection    |\
 800c728:	433b      	orrs	r3, r7
                        Init->SDClockPeriod      |\
 800c72a:	4333      	orrs	r3, r6
                        Init->ReadBurst          |\
 800c72c:	4323      	orrs	r3, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c72e:	430b      	orrs	r3, r1
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c730:	602b      	str	r3, [r5, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c732:	2000      	movs	r0, #0
 800c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c738:	433e      	orrs	r6, r7
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c73a:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c73c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                        Init->ReadBurst          |\
 800c740:	4334      	orrs	r4, r6
                       Init->RowBitsNumber       |\
 800c742:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c746:	430c      	orrs	r4, r1
                       Init->MemoryDataWidth     |\
 800c748:	ea42 020c 	orr.w	r2, r2, ip
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c74c:	6869      	ldr	r1, [r5, #4]
                       Init->InternalBankNumber  |\
 800c74e:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c752:	602c      	str	r4, [r5, #0]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c754:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
                       Init->CASLatency          |\
 800c758:	4302      	orrs	r2, r0
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c75a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c75e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c760:	606a      	str	r2, [r5, #4]
 800c762:	e7e6      	b.n	800c732 <FMC_SDRAM_Init+0x122>
 800c764:	a0000140 	.word	0xa0000140
 800c768:	0803511a 	.word	0x0803511a

0800c76c <FMC_SDRAM_Timing_Init>:
{
  uint32_t tmpr1 = 0;
  uint32_t tmpr2 = 0;
    
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c76c:	4b4c      	ldr	r3, [pc, #304]	; (800c8a0 <FMC_SDRAM_Timing_Init+0x134>)
 800c76e:	4298      	cmp	r0, r3
{
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	4605      	mov	r5, r0
 800c774:	460c      	mov	r4, r1
 800c776:	4616      	mov	r6, r2
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c778:	d004      	beq.n	800c784 <FMC_SDRAM_Timing_Init+0x18>
 800c77a:	f240 313d 	movw	r1, #829	; 0x33d
 800c77e:	4849      	ldr	r0, [pc, #292]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c780:	f7f5 fa13 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_LOADTOACTIVE_DELAY(Timing->LoadToActiveDelay));
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	3b01      	subs	r3, #1
 800c788:	2b0f      	cmp	r3, #15
 800c78a:	d904      	bls.n	800c796 <FMC_SDRAM_Timing_Init+0x2a>
 800c78c:	f240 313e 	movw	r1, #830	; 0x33e
 800c790:	4844      	ldr	r0, [pc, #272]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c792:	f7f5 fa0a 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_EXITSELFREFRESH_DELAY(Timing->ExitSelfRefreshDelay));
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	3b01      	subs	r3, #1
 800c79a:	2b0f      	cmp	r3, #15
 800c79c:	d904      	bls.n	800c7a8 <FMC_SDRAM_Timing_Init+0x3c>
 800c79e:	f240 313f 	movw	r1, #831	; 0x33f
 800c7a2:	4840      	ldr	r0, [pc, #256]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7a4:	f7f5 fa01 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SELFREFRESH_TIME(Timing->SelfRefreshTime));
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	2b0f      	cmp	r3, #15
 800c7ae:	d904      	bls.n	800c7ba <FMC_SDRAM_Timing_Init+0x4e>
 800c7b0:	f44f 7150 	mov.w	r1, #832	; 0x340
 800c7b4:	483b      	ldr	r0, [pc, #236]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7b6:	f7f5 f9f8 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_ROWCYCLE_DELAY(Timing->RowCycleDelay));
 800c7ba:	68e3      	ldr	r3, [r4, #12]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	2b0f      	cmp	r3, #15
 800c7c0:	d904      	bls.n	800c7cc <FMC_SDRAM_Timing_Init+0x60>
 800c7c2:	f240 3141 	movw	r1, #833	; 0x341
 800c7c6:	4837      	ldr	r0, [pc, #220]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7c8:	f7f5 f9ef 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(Timing->WriteRecoveryTime));
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	2b0f      	cmp	r3, #15
 800c7d2:	d904      	bls.n	800c7de <FMC_SDRAM_Timing_Init+0x72>
 800c7d4:	f240 3142 	movw	r1, #834	; 0x342
 800c7d8:	4832      	ldr	r0, [pc, #200]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7da:	f7f5 f9e6 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
 800c7de:	6963      	ldr	r3, [r4, #20]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	2b0f      	cmp	r3, #15
 800c7e4:	d904      	bls.n	800c7f0 <FMC_SDRAM_Timing_Init+0x84>
 800c7e6:	f240 3143 	movw	r1, #835	; 0x343
 800c7ea:	482e      	ldr	r0, [pc, #184]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7ec:	f7f5 f9dd 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
 800c7f0:	69a3      	ldr	r3, [r4, #24]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	2b0f      	cmp	r3, #15
 800c7f6:	d904      	bls.n	800c802 <FMC_SDRAM_Timing_Init+0x96>
 800c7f8:	f44f 7151 	mov.w	r1, #836	; 0x344
 800c7fc:	4829      	ldr	r0, [pc, #164]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c7fe:	f7f5 f9d4 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_SDRAM_BANK(Bank));
 800c802:	2e01      	cmp	r6, #1
 800c804:	d925      	bls.n	800c852 <FMC_SDRAM_Timing_Init+0xe6>
 800c806:	f240 3145 	movw	r1, #837	; 0x345
 800c80a:	4826      	ldr	r0, [pc, #152]	; (800c8a4 <FMC_SDRAM_Timing_Init+0x138>)
 800c80c:	f7f5 f9cd 	bl	8001baa <assert_failed>
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c810:	6863      	ldr	r3, [r4, #4]
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c812:	68aa      	ldr	r2, [r5, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c814:	1e59      	subs	r1, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c816:	68a3      	ldr	r3, [r4, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c818:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c81c:	3b01      	subs	r3, #1
 800c81e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c820:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c824:	6821      	ldr	r1, [r4, #0]
 800c826:	3901      	subs	r1, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c828:	430b      	orrs	r3, r1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c82a:	68e1      	ldr	r1, [r4, #12]
 800c82c:	3901      	subs	r1, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c82e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c832:	6921      	ldr	r1, [r4, #16]
 800c834:	3901      	subs	r1, #1
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c836:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                       (((Timing->RPDelay)-1) << 20)             |\
 800c83a:	6961      	ldr	r1, [r4, #20]
 800c83c:	3901      	subs	r1, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c83e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                       (((Timing->RCDDelay)-1) << 24));
 800c842:	69a1      	ldr	r1, [r4, #24]
 800c844:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c846:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c84a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c84c:	60ab      	str	r3, [r5, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800c84e:	2000      	movs	r0, #0
 800c850:	bd70      	pop	{r4, r5, r6, pc}
  if (Bank != FMC_SDRAM_BANK2) 
 800c852:	d1dd      	bne.n	800c810 <FMC_SDRAM_Timing_Init+0xa4>
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c854:	68e2      	ldr	r2, [r4, #12]
                        (((Timing->RPDelay)-1) << 20)); 
 800c856:	6963      	ldr	r3, [r4, #20]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c858:	1e50      	subs	r0, r2, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c85a:	68a9      	ldr	r1, [r5, #8]
                        (((Timing->RPDelay)-1) << 20)); 
 800c85c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c85e:	6863      	ldr	r3, [r4, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c860:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
                        (((Timing->RPDelay)-1) << 20)); 
 800c864:	0512      	lsls	r2, r2, #20
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c866:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c86a:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c86e:	1e58      	subs	r0, r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c870:	68a3      	ldr	r3, [r4, #8]
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c872:	430a      	orrs	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c874:	68e9      	ldr	r1, [r5, #12]
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c876:	3b01      	subs	r3, #1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c878:	f001 4170 	and.w	r1, r1, #4026531840	; 0xf0000000
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c87c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c87e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c882:	6820      	ldr	r0, [r4, #0]
 800c884:	3801      	subs	r0, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c886:	4303      	orrs	r3, r0
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c888:	6920      	ldr	r0, [r4, #16]
 800c88a:	3801      	subs	r0, #1
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c88c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                       (((Timing->RCDDelay)-1) << 24));   
 800c890:	69a0      	ldr	r0, [r4, #24]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c892:	60aa      	str	r2, [r5, #8]
                       (((Timing->RCDDelay)-1) << 24));   
 800c894:	3801      	subs	r0, #1
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c896:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c89a:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c89c:	60eb      	str	r3, [r5, #12]
 800c89e:	e7d6      	b.n	800c84e <FMC_SDRAM_Timing_Init+0xe2>
 800c8a0:	a0000140 	.word	0xa0000140
 800c8a4:	0803511a 	.word	0x0803511a

0800c8a8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 800c8a8:	2300      	movs	r3, #0
{
 800c8aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpr = 0;
 800c8ac:	9301      	str	r3, [sp, #4]
{
 800c8ae:	4605      	mov	r5, r0
  
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c8b0:	4b1f      	ldr	r3, [pc, #124]	; (800c930 <FMC_SDRAM_SendCommand+0x88>)
{
 800c8b2:	460c      	mov	r4, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c8b4:	4298      	cmp	r0, r3
 800c8b6:	d004      	beq.n	800c8c2 <FMC_SDRAM_SendCommand+0x1a>
 800c8b8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 800c8bc:	481d      	ldr	r0, [pc, #116]	; (800c934 <FMC_SDRAM_SendCommand+0x8c>)
 800c8be:	f7f5 f974 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COMMAND_MODE(Command->CommandMode));
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	2b06      	cmp	r3, #6
 800c8c6:	d904      	bls.n	800c8d2 <FMC_SDRAM_SendCommand+0x2a>
 800c8c8:	f240 31d1 	movw	r1, #977	; 0x3d1
 800c8cc:	4819      	ldr	r0, [pc, #100]	; (800c934 <FMC_SDRAM_SendCommand+0x8c>)
 800c8ce:	f7f5 f96c 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
 800c8d2:	6863      	ldr	r3, [r4, #4]
 800c8d4:	2b10      	cmp	r3, #16
 800c8d6:	d008      	beq.n	800c8ea <FMC_SDRAM_SendCommand+0x42>
 800c8d8:	f023 0310 	bic.w	r3, r3, #16
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	d004      	beq.n	800c8ea <FMC_SDRAM_SendCommand+0x42>
 800c8e0:	f240 31d2 	movw	r1, #978	; 0x3d2
 800c8e4:	4813      	ldr	r0, [pc, #76]	; (800c934 <FMC_SDRAM_SendCommand+0x8c>)
 800c8e6:	f7f5 f960 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
 800c8ea:	68a3      	ldr	r3, [r4, #8]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	2b0f      	cmp	r3, #15
 800c8f0:	d904      	bls.n	800c8fc <FMC_SDRAM_SendCommand+0x54>
 800c8f2:	f240 31d3 	movw	r1, #979	; 0x3d3
 800c8f6:	480f      	ldr	r0, [pc, #60]	; (800c934 <FMC_SDRAM_SendCommand+0x8c>)
 800c8f8:	f7f5 f957 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  
 800c8fc:	68e3      	ldr	r3, [r4, #12]
 800c8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c902:	d304      	bcc.n	800c90e <FMC_SDRAM_SendCommand+0x66>
 800c904:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 800c908:	480a      	ldr	r0, [pc, #40]	; (800c934 <FMC_SDRAM_SendCommand+0x8c>)
 800c90a:	f7f5 f94e 	bl	8001baa <assert_failed>
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800c90e:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c910:	e894 000c 	ldmia.w	r4, {r2, r3}
 800c914:	4313      	orrs	r3, r2
                    ((Command->ModeRegisterDefinition) << 9)
 800c916:	68e2      	ldr	r2, [r4, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c918:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c91c:	68a2      	ldr	r2, [r4, #8]
 800c91e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c920:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c924:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	612b      	str	r3, [r5, #16]
}
 800c92a:	b003      	add	sp, #12
 800c92c:	bd30      	pop	{r4, r5, pc}
 800c92e:	bf00      	nop
 800c930:	a0000140 	.word	0xa0000140
 800c934:	0803511a 	.word	0x0803511a

0800c938 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c938:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c93a:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <FMC_SDRAM_ProgramRefreshRate+0x34>)
{
 800c93c:	4604      	mov	r4, r0
 800c93e:	460d      	mov	r5, r1
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
 800c940:	4298      	cmp	r0, r3
 800c942:	d004      	beq.n	800c94e <FMC_SDRAM_ProgramRefreshRate+0x16>
 800c944:	f240 31eb 	movw	r1, #1003	; 0x3eb
 800c948:	4809      	ldr	r0, [pc, #36]	; (800c970 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800c94a:	f7f5 f92e 	bl	8001baa <assert_failed>
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
 800c94e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800c952:	d304      	bcc.n	800c95e <FMC_SDRAM_ProgramRefreshRate+0x26>
 800c954:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 800c958:	4805      	ldr	r0, [pc, #20]	; (800c970 <FMC_SDRAM_ProgramRefreshRate+0x38>)
 800c95a:	f7f5 f926 	bl	8001baa <assert_failed>
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c95e:	6961      	ldr	r1, [r4, #20]
  
  return HAL_OK;   
}
 800c960:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 800c962:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800c966:	6161      	str	r1, [r4, #20]
}
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	a0000140 	.word	0xa0000140
 800c970:	0803511a 	.word	0x0803511a

0800c974 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c974:	4b11      	ldr	r3, [pc, #68]	; (800c9bc <SDMMC_GetCmdResp2+0x48>)
 800c976:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c980:	f241 3388 	movw	r3, #5000	; 0x1388
 800c984:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800c986:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c98a:	d314      	bcc.n	800c9b6 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c98c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c98e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c992:	d0f8      	beq.n	800c986 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c994:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c996:	075b      	lsls	r3, r3, #29
 800c998:	d503      	bpl.n	800c9a2 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c99a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c99c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9a4:	f013 0301 	ands.w	r3, r3, #1
 800c9a8:	d001      	beq.n	800c9ae <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7f6      	b.n	800c99c <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c9ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c9b2:	6382      	str	r2, [r0, #56]	; 0x38
 800c9b4:	e7f3      	b.n	800c99e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9ba:	e7f0      	b.n	800c99e <SDMMC_GetCmdResp2+0x2a>
 800c9bc:	200000cc 	.word	0x200000cc

0800c9c0 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800c9c0:	4b0f      	ldr	r3, [pc, #60]	; (800ca00 <SDMMC_GetCmdResp3+0x40>)
 800c9c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9cc:	f241 3388 	movw	r3, #5000	; 0x1388
 800c9d0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800c9d2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c9d6:	d30f      	bcc.n	800c9f8 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800c9d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c9da:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c9de:	d0f8      	beq.n	800c9d2 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9e2:	f013 0304 	ands.w	r3, r3, #4
 800c9e6:	d003      	beq.n	800c9f0 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800c9f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c9f4:	6382      	str	r2, [r0, #56]	; 0x38
 800c9f6:	e7f9      	b.n	800c9ec <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800c9f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	200000cc 	.word	0x200000cc

0800ca04 <SDMMC_Init>:
{
 800ca04:	b084      	sub	sp, #16
 800ca06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	a809      	add	r0, sp, #36	; 0x24
 800ca0e:	460c      	mov	r4, r1
 800ca10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 800ca14:	4b27      	ldr	r3, [pc, #156]	; (800cab4 <SDMMC_Init+0xb0>)
 800ca16:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ca20:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ca24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ca26:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ca28:	d003      	beq.n	800ca32 <SDMMC_Init+0x2e>
 800ca2a:	21d8      	movs	r1, #216	; 0xd8
 800ca2c:	4822      	ldr	r0, [pc, #136]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca2e:	f7f5 f8bc 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge)); 
 800ca32:	f434 5300 	bics.w	r3, r4, #8192	; 0x2000
 800ca36:	d003      	beq.n	800ca40 <SDMMC_Init+0x3c>
 800ca38:	21d9      	movs	r1, #217	; 0xd9
 800ca3a:	481f      	ldr	r0, [pc, #124]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca3c:	f7f5 f8b5 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 800ca40:	f43a 6380 	bics.w	r3, sl, #1024	; 0x400
 800ca44:	d003      	beq.n	800ca4e <SDMMC_Init+0x4a>
 800ca46:	21da      	movs	r1, #218	; 0xda
 800ca48:	481b      	ldr	r0, [pc, #108]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca4a:	f7f5 f8ae 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 800ca4e:	f439 7300 	bics.w	r3, r9, #512	; 0x200
 800ca52:	d003      	beq.n	800ca5c <SDMMC_Init+0x58>
 800ca54:	21db      	movs	r1, #219	; 0xdb
 800ca56:	4818      	ldr	r0, [pc, #96]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca58:	f7f5 f8a7 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800ca5c:	f438 6300 	bics.w	r3, r8, #2048	; 0x800
 800ca60:	d006      	beq.n	800ca70 <SDMMC_Init+0x6c>
 800ca62:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 800ca66:	d003      	beq.n	800ca70 <SDMMC_Init+0x6c>
 800ca68:	21dc      	movs	r1, #220	; 0xdc
 800ca6a:	4813      	ldr	r0, [pc, #76]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca6c:	f7f5 f89d 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800ca70:	f437 4380 	bics.w	r3, r7, #16384	; 0x4000
 800ca74:	d003      	beq.n	800ca7e <SDMMC_Init+0x7a>
 800ca76:	21dd      	movs	r1, #221	; 0xdd
 800ca78:	480f      	ldr	r0, [pc, #60]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca7a:	f7f5 f896 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800ca7e:	2eff      	cmp	r6, #255	; 0xff
 800ca80:	d903      	bls.n	800ca8a <SDMMC_Init+0x86>
 800ca82:	21de      	movs	r1, #222	; 0xde
 800ca84:	480c      	ldr	r0, [pc, #48]	; (800cab8 <SDMMC_Init+0xb4>)
 800ca86:	f7f5 f890 	bl	8001baa <assert_failed>
  tmpreg |= (Init.ClockEdge           |\
 800ca8a:	ea44 030a 	orr.w	r3, r4, sl
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca8e:	686a      	ldr	r2, [r5, #4]
}
 800ca90:	2000      	movs	r0, #0
             Init.ClockBypass         |\
 800ca92:	ea43 0309 	orr.w	r3, r3, r9
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca96:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockPowerSave      |\
 800ca9a:	ea43 0308 	orr.w	r3, r3, r8
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.BusWide             |\
 800caa2:	433b      	orrs	r3, r7
             Init.HardwareFlowControl |\
 800caa4:	4333      	orrs	r3, r6
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800caa6:	4313      	orrs	r3, r2
 800caa8:	606b      	str	r3, [r5, #4]
}
 800caaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caae:	b004      	add	sp, #16
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	40012c00 	.word	0x40012c00
 800cab8:	08035157 	.word	0x08035157

0800cabc <SDMMC_ReadFIFO>:
 800cabc:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800cac0:	4770      	bx	lr

0800cac2 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800cac2:	2303      	movs	r3, #3
 800cac4:	6003      	str	r3, [r0, #0]
}
 800cac6:	2000      	movs	r0, #0
 800cac8:	4770      	bx	lr

0800caca <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800caca:	6800      	ldr	r0, [r0, #0]
}
 800cacc:	f000 0003 	and.w	r0, r0, #3
 800cad0:	4770      	bx	lr
	...

0800cad4 <SDMMC_SendCommand>:
{
 800cad4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800cad6:	684b      	ldr	r3, [r1, #4]
{
 800cad8:	4605      	mov	r5, r0
 800cada:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800cadc:	2b3f      	cmp	r3, #63	; 0x3f
 800cade:	d904      	bls.n	800caea <SDMMC_SendCommand+0x16>
 800cae0:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800cae4:	481a      	ldr	r0, [pc, #104]	; (800cb50 <SDMMC_SendCommand+0x7c>)
 800cae6:	f7f5 f860 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 800caea:	68a3      	ldr	r3, [r4, #8]
 800caec:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 800caf0:	d006      	beq.n	800cb00 <SDMMC_SendCommand+0x2c>
 800caf2:	2bc0      	cmp	r3, #192	; 0xc0
 800caf4:	d004      	beq.n	800cb00 <SDMMC_SendCommand+0x2c>
 800caf6:	f240 1165 	movw	r1, #357	; 0x165
 800cafa:	4815      	ldr	r0, [pc, #84]	; (800cb50 <SDMMC_SendCommand+0x7c>)
 800cafc:	f7f5 f855 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 800cb00:	68e3      	ldr	r3, [r4, #12]
 800cb02:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800cb06:	d007      	beq.n	800cb18 <SDMMC_SendCommand+0x44>
 800cb08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb0c:	d004      	beq.n	800cb18 <SDMMC_SendCommand+0x44>
 800cb0e:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800cb12:	480f      	ldr	r0, [pc, #60]	; (800cb50 <SDMMC_SendCommand+0x7c>)
 800cb14:	f7f5 f849 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 800cb18:	6923      	ldr	r3, [r4, #16]
 800cb1a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800cb1e:	d004      	beq.n	800cb2a <SDMMC_SendCommand+0x56>
 800cb20:	f240 1167 	movw	r1, #359	; 0x167
 800cb24:	480a      	ldr	r0, [pc, #40]	; (800cb50 <SDMMC_SendCommand+0x7c>)
 800cb26:	f7f5 f840 	bl	8001baa <assert_failed>
  SDMMCx->ARG = Command->Argument;
 800cb2a:	6823      	ldr	r3, [r4, #0]
}
 800cb2c:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb2e:	68a1      	ldr	r1, [r4, #8]
  SDMMCx->ARG = Command->Argument;
 800cb30:	60ab      	str	r3, [r5, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb32:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb34:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb36:	430b      	orrs	r3, r1
                       Command->Response         |\
 800cb38:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb3a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->Response         |\
 800cb3e:	430b      	orrs	r3, r1
                       Command->WaitForInterrupt |\
 800cb40:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb42:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 800cb46:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	60eb      	str	r3, [r5, #12]
}
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	08035157 	.word	0x08035157

0800cb54 <SDMMC_GetResponse>:
  __IO uint32_t tmp = 0;
 800cb54:	2300      	movs	r3, #0
{
 800cb56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmp = 0;
 800cb58:	9301      	str	r3, [sp, #4]
  assert_param(IS_SDMMC_RESP(Response));
 800cb5a:	f031 030c 	bics.w	r3, r1, #12
{
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
  assert_param(IS_SDMMC_RESP(Response));
 800cb62:	d004      	beq.n	800cb6e <SDMMC_GetResponse+0x1a>
 800cb64:	f240 1193 	movw	r1, #403	; 0x193
 800cb68:	4804      	ldr	r0, [pc, #16]	; (800cb7c <SDMMC_GetResponse+0x28>)
 800cb6a:	f7f5 f81e 	bl	8001baa <assert_failed>
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800cb6e:	3414      	adds	r4, #20
 800cb70:	442c      	add	r4, r5
 800cb72:	9401      	str	r4, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800cb74:	9b01      	ldr	r3, [sp, #4]
 800cb76:	6818      	ldr	r0, [r3, #0]
}  
 800cb78:	b003      	add	sp, #12
 800cb7a:	bd30      	pop	{r4, r5, pc}
 800cb7c:	08035157 	.word	0x08035157

0800cb80 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800cb80:	4b44      	ldr	r3, [pc, #272]	; (800cc94 <SDMMC_GetCmdResp1+0x114>)
{
 800cb82:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800cb8a:	fbb3 f3f4 	udiv	r3, r3, r4
 800cb8e:	435a      	muls	r2, r3
    if (count-- == 0)
 800cb90:	2a00      	cmp	r2, #0
 800cb92:	d049      	beq.n	800cc28 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cb94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb96:	3a01      	subs	r2, #1
 800cb98:	f013 0f45 	tst.w	r3, #69	; 0x45
 800cb9c:	d0f8      	beq.n	800cb90 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cba0:	075c      	lsls	r4, r3, #29
 800cba2:	d503      	bpl.n	800cbac <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cba4:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cba6:	6383      	str	r3, [r0, #56]	; 0x38
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cbac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbae:	f013 0301 	ands.w	r3, r3, #1
 800cbb2:	d001      	beq.n	800cbb8 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e7f6      	b.n	800cba6 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 800cbb8:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cbba:	b2d2      	uxtb	r2, r2
 800cbbc:	4291      	cmp	r1, r2
 800cbbe:	d136      	bne.n	800cc2e <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cbc0:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cbc4:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cbc6:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cbc8:	f7ff ffc4 	bl	800cb54 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cbcc:	4b32      	ldr	r3, [pc, #200]	; (800cc98 <SDMMC_GetCmdResp1+0x118>)
 800cbce:	4003      	ands	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d0e9      	beq.n	800cba8 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	db2c      	blt.n	800cc32 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cbd8:	0042      	lsls	r2, r0, #1
 800cbda:	d42d      	bmi.n	800cc38 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cbdc:	0084      	lsls	r4, r0, #2
 800cbde:	d42d      	bmi.n	800cc3c <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cbe0:	00c1      	lsls	r1, r0, #3
 800cbe2:	d42d      	bmi.n	800cc40 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cbe4:	0102      	lsls	r2, r0, #4
 800cbe6:	d42e      	bmi.n	800cc46 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cbe8:	0144      	lsls	r4, r0, #5
 800cbea:	d42f      	bmi.n	800cc4c <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cbec:	01c1      	lsls	r1, r0, #7
 800cbee:	d430      	bmi.n	800cc52 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cbf0:	0202      	lsls	r2, r0, #8
 800cbf2:	d431      	bmi.n	800cc58 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cbf4:	0244      	lsls	r4, r0, #9
 800cbf6:	d432      	bmi.n	800cc5e <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbf8:	0281      	lsls	r1, r0, #10
 800cbfa:	d433      	bmi.n	800cc64 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbfc:	02c2      	lsls	r2, r0, #11
 800cbfe:	d434      	bmi.n	800cc6a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc00:	0344      	lsls	r4, r0, #13
 800cc02:	d435      	bmi.n	800cc70 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc04:	0381      	lsls	r1, r0, #14
 800cc06:	d436      	bmi.n	800cc76 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc08:	03c2      	lsls	r2, r0, #15
 800cc0a:	d437      	bmi.n	800cc7c <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc0c:	0404      	lsls	r4, r0, #16
 800cc0e:	d438      	bmi.n	800cc82 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc10:	0441      	lsls	r1, r0, #17
 800cc12:	d439      	bmi.n	800cc88 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc14:	0482      	lsls	r2, r0, #18
 800cc16:	d43a      	bmi.n	800cc8e <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc18:	f010 0f08 	tst.w	r0, #8
 800cc1c:	bf14      	ite	ne
 800cc1e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800cc22:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800cc26:	e7bf      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800cc28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc2c:	e7bc      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e7ba      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cc32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc36:	e7b7      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cc38:	2340      	movs	r3, #64	; 0x40
 800cc3a:	e7b5      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cc3c:	2380      	movs	r3, #128	; 0x80
 800cc3e:	e7b3      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cc40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc44:	e7b0      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cc46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc4a:	e7ad      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cc4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc50:	e7aa      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cc52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc56:	e7a7      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cc58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc5c:	e7a4      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cc5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc62:	e7a1      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cc64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc68:	e79e      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 800cc6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc6e:	e79b      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cc74:	e798      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cc7a:	e795      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cc80:	e792      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cc86:	e78f      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cc8c:	e78c      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 800cc8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc92:	e789      	b.n	800cba8 <SDMMC_GetCmdResp1+0x28>
 800cc94:	200000cc 	.word	0x200000cc
 800cc98:	fdffe008 	.word	0xfdffe008

0800cc9c <SDMMC_ConfigData>:
{
 800cc9c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cc9e:	684b      	ldr	r3, [r1, #4]
{
 800cca0:	4605      	mov	r5, r0
 800cca2:	460c      	mov	r4, r1
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800cca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cca8:	d304      	bcc.n	800ccb4 <SDMMC_ConfigData+0x18>
 800ccaa:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800ccae:	4821      	ldr	r0, [pc, #132]	; (800cd34 <SDMMC_ConfigData+0x98>)
 800ccb0:	f7f4 ff7b 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 800ccb4:	68a3      	ldr	r3, [r4, #8]
 800ccb6:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 800ccba:	f023 0110 	bic.w	r1, r3, #16
 800ccbe:	d00c      	beq.n	800ccda <SDMMC_ConfigData+0x3e>
 800ccc0:	2a40      	cmp	r2, #64	; 0x40
 800ccc2:	d00a      	beq.n	800ccda <SDMMC_ConfigData+0x3e>
 800ccc4:	2a80      	cmp	r2, #128	; 0x80
 800ccc6:	d008      	beq.n	800ccda <SDMMC_ConfigData+0x3e>
 800ccc8:	29c0      	cmp	r1, #192	; 0xc0
 800ccca:	d006      	beq.n	800ccda <SDMMC_ConfigData+0x3e>
 800cccc:	2be0      	cmp	r3, #224	; 0xe0
 800ccce:	d004      	beq.n	800ccda <SDMMC_ConfigData+0x3e>
 800ccd0:	f240 11a9 	movw	r1, #425	; 0x1a9
 800ccd4:	4817      	ldr	r0, [pc, #92]	; (800cd34 <SDMMC_ConfigData+0x98>)
 800ccd6:	f7f4 ff68 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800ccda:	68e3      	ldr	r3, [r4, #12]
 800ccdc:	f033 0302 	bics.w	r3, r3, #2
 800cce0:	d004      	beq.n	800ccec <SDMMC_ConfigData+0x50>
 800cce2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cce6:	4813      	ldr	r0, [pc, #76]	; (800cd34 <SDMMC_ConfigData+0x98>)
 800cce8:	f7f4 ff5f 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800ccec:	6923      	ldr	r3, [r4, #16]
 800ccee:	f033 0304 	bics.w	r3, r3, #4
 800ccf2:	d004      	beq.n	800ccfe <SDMMC_ConfigData+0x62>
 800ccf4:	f240 11ab 	movw	r1, #427	; 0x1ab
 800ccf8:	480e      	ldr	r0, [pc, #56]	; (800cd34 <SDMMC_ConfigData+0x98>)
 800ccfa:	f7f4 ff56 	bl	8001baa <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 800ccfe:	6963      	ldr	r3, [r4, #20]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d904      	bls.n	800cd0e <SDMMC_ConfigData+0x72>
 800cd04:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800cd08:	480a      	ldr	r0, [pc, #40]	; (800cd34 <SDMMC_ConfigData+0x98>)
 800cd0a:	f7f4 ff4e 	bl	8001baa <assert_failed>
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cd0e:	6823      	ldr	r3, [r4, #0]
}
 800cd10:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd12:	68e1      	ldr	r1, [r4, #12]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cd14:	626b      	str	r3, [r5, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800cd16:	6863      	ldr	r3, [r4, #4]
 800cd18:	62ab      	str	r3, [r5, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd1a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd1c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cd1e:	430b      	orrs	r3, r1
                       Data->TransferDir   |\
 800cd20:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd22:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 800cd26:	430b      	orrs	r3, r1
                       Data->TransferMode  |\
 800cd28:	6961      	ldr	r1, [r4, #20]
 800cd2a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800cd30:	bd38      	pop	{r3, r4, r5, pc}
 800cd32:	bf00      	nop
 800cd34:	08035157 	.word	0x08035157

0800cd38 <SDMMC_CmdBlockLength>:
{
 800cd38:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd3a:	2340      	movs	r3, #64	; 0x40
{
 800cd3c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cd3e:	2410      	movs	r4, #16
{
 800cd40:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd42:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd44:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cd46:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd4a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cd50:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd52:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd54:	f7ff febe 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cd58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd5c:	4621      	mov	r1, r4
 800cd5e:	4628      	mov	r0, r5
 800cd60:	f7ff ff0e 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cd64:	b007      	add	sp, #28
 800cd66:	bd30      	pop	{r4, r5, pc}

0800cd68 <SDMMC_CmdReadSingleBlock>:
{
 800cd68:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd6a:	2340      	movs	r3, #64	; 0x40
{
 800cd6c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd6e:	2411      	movs	r4, #17
{
 800cd70:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd76:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd78:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd7a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd80:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd82:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd84:	f7ff fea6 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cd88:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f7ff fef6 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cd94:	b007      	add	sp, #28
 800cd96:	bd30      	pop	{r4, r5, pc}

0800cd98 <SDMMC_CmdReadMultiBlock>:
{
 800cd98:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd9a:	2340      	movs	r3, #64	; 0x40
{
 800cd9c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd9e:	2412      	movs	r4, #18
{
 800cda0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cda2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cda4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cda6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cda8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdaa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cdb0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb4:	f7ff fe8e 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cdb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f7ff fede 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cdc4:	b007      	add	sp, #28
 800cdc6:	bd30      	pop	{r4, r5, pc}

0800cdc8 <SDMMC_CmdWriteSingleBlock>:
{
 800cdc8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdca:	2340      	movs	r3, #64	; 0x40
{
 800cdcc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cdce:	2418      	movs	r4, #24
{
 800cdd0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdd2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdd4:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdd6:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdd8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdda:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cde0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cde2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cde4:	f7ff fe76 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cde8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdec:	4621      	mov	r1, r4
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7ff fec6 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cdf4:	b007      	add	sp, #28
 800cdf6:	bd30      	pop	{r4, r5, pc}

0800cdf8 <SDMMC_CmdWriteMultiBlock>:
{
 800cdf8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cdfa:	2340      	movs	r3, #64	; 0x40
{
 800cdfc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cdfe:	2419      	movs	r4, #25
{
 800ce00:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce02:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce04:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ce06:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce08:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce0a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ce10:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce12:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce14:	f7ff fe5e 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ce18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f7ff feae 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800ce24:	b007      	add	sp, #28
 800ce26:	bd30      	pop	{r4, r5, pc}

0800ce28 <SDMMC_CmdStopTransfer>:
{
 800ce28:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800ce2a:	2300      	movs	r3, #0
{
 800ce2c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce2e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce30:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800ce32:	9301      	str	r3, [sp, #4]
{
 800ce34:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce36:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce3c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce3e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce40:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce42:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce44:	f7ff fe46 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ce48:	4a03      	ldr	r2, [pc, #12]	; (800ce58 <SDMMC_CmdStopTransfer+0x30>)
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7ff fe97 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800ce52:	b007      	add	sp, #28
 800ce54:	bd30      	pop	{r4, r5, pc}
 800ce56:	bf00      	nop
 800ce58:	05f5e100 	.word	0x05f5e100

0800ce5c <SDMMC_CmdSelDesel>:
{
 800ce5c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce5e:	2340      	movs	r3, #64	; 0x40
{
 800ce60:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce62:	2407      	movs	r4, #7
{
 800ce64:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce66:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce68:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce6a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce6c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce6e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce74:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce76:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce78:	f7ff fe2c 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ce7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce80:	4621      	mov	r1, r4
 800ce82:	4628      	mov	r0, r5
 800ce84:	f7ff fe7c 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800ce88:	b007      	add	sp, #28
 800ce8a:	bd30      	pop	{r4, r5, pc}

0800ce8c <SDMMC_CmdGoIdleState>:
{
 800ce8c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800ce8e:	2300      	movs	r3, #0
{
 800ce90:	b086      	sub	sp, #24
 800ce92:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800ce94:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce98:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ce9a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce9c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cea2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cea4:	f7ff fe16 	bl	800cad4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <SDMMC_CmdGoIdleState+0x4c>)
 800ceaa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800ceb4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ceb8:	4353      	muls	r3, r2
    if (count-- == 0)
 800ceba:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cebe:	d308      	bcc.n	800ced2 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cec0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cec2:	0612      	lsls	r2, r2, #24
 800cec4:	d5f9      	bpl.n	800ceba <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cec6:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 800ceca:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cecc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800cece:	b006      	add	sp, #24
 800ced0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800ced2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800ced6:	e7fa      	b.n	800cece <SDMMC_CmdGoIdleState+0x42>
 800ced8:	200000cc 	.word	0x200000cc

0800cedc <SDMMC_CmdOperCond>:
{
 800cedc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cede:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 800cee2:	b086      	sub	sp, #24
 800cee4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cee6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cee8:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ceea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ceec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cef2:	2300      	movs	r3, #0
 800cef4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cefa:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cefc:	f7ff fdea 	bl	800cad4 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cf00:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <SDMMC_CmdOperCond+0x6c>)
 800cf02:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf0c:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf10:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800cf12:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cf16:	d314      	bcc.n	800cf42 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cf18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cf1a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800cf1e:	d0f8      	beq.n	800cf12 <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cf22:	f012 0204 	ands.w	r2, r2, #4
 800cf26:	d004      	beq.n	800cf32 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf28:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf2a:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf2c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800cf2e:	b006      	add	sp, #24
 800cf30:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cf32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cf34:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800cf38:	d0f9      	beq.n	800cf2e <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf3a:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 800cf3c:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cf3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cf40:	e7f5      	b.n	800cf2e <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 800cf42:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cf46:	e7f2      	b.n	800cf2e <SDMMC_CmdOperCond+0x52>
 800cf48:	200000cc 	.word	0x200000cc

0800cf4c <SDMMC_CmdAppCommand>:
{
 800cf4c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf4e:	2340      	movs	r3, #64	; 0x40
{
 800cf50:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf52:	2437      	movs	r4, #55	; 0x37
{
 800cf54:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf56:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf58:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf5a:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf5c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf5e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf60:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf64:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf66:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf68:	f7ff fdb4 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cf6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf70:	4621      	mov	r1, r4
 800cf72:	4628      	mov	r0, r5
 800cf74:	f7ff fe04 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cf78:	b007      	add	sp, #28
 800cf7a:	bd30      	pop	{r4, r5, pc}

0800cf7c <SDMMC_CmdAppOperCommand>:
{
 800cf7c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf7e:	2329      	movs	r3, #41	; 0x29
{
 800cf80:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cf82:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 800cf86:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf88:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf8a:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cf8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf92:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800cf94:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf96:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf98:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf9e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfa0:	f7ff fd98 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f7ff fd0b 	bl	800c9c0 <SDMMC_GetCmdResp3>
}
 800cfaa:	b006      	add	sp, #24
 800cfac:	bd10      	pop	{r4, pc}

0800cfae <SDMMC_CmdSendSCR>:
{
 800cfae:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cfb0:	2300      	movs	r3, #0
{
 800cfb2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfb4:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfb6:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 800cfb8:	9301      	str	r3, [sp, #4]
{
 800cfba:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfbc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfc2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfc4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfc6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cfc8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfca:	f7ff fd83 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cfce:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f7ff fdd3 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800cfda:	b007      	add	sp, #28
 800cfdc:	bd30      	pop	{r4, r5, pc}

0800cfde <SDMMC_CmdSendCID>:
{
 800cfde:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 800cfe0:	2300      	movs	r3, #0
{
 800cfe2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfe4:	2202      	movs	r2, #2
{
 800cfe6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800cfe8:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfea:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cfec:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cfee:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cff0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cff6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cff8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cffa:	f7ff fd6b 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cffe:	4620      	mov	r0, r4
 800d000:	f7ff fcb8 	bl	800c974 <SDMMC_GetCmdResp2>
}
 800d004:	b006      	add	sp, #24
 800d006:	bd10      	pop	{r4, pc}

0800d008 <SDMMC_CmdSendCSD>:
{
 800d008:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d00a:	2309      	movs	r3, #9
{
 800d00c:	b086      	sub	sp, #24
 800d00e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d010:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d012:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d014:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d016:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d018:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d01a:	2300      	movs	r3, #0
 800d01c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d022:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d024:	f7ff fd56 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d028:	4620      	mov	r0, r4
 800d02a:	f7ff fca3 	bl	800c974 <SDMMC_GetCmdResp2>
}
 800d02e:	b006      	add	sp, #24
 800d030:	bd10      	pop	{r4, pc}
	...

0800d034 <SDMMC_CmdSetRelAdd>:
{
 800d034:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 800d036:	2300      	movs	r3, #0
{
 800d038:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d03a:	2203      	movs	r2, #3
{
 800d03c:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 800d03e:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d040:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d042:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d044:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d046:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d048:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d04c:	9203      	str	r2, [sp, #12]
{
 800d04e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d050:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d052:	f7ff fd3f 	bl	800cad4 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800d056:	4b20      	ldr	r3, [pc, #128]	; (800d0d8 <SDMMC_CmdSetRelAdd+0xa4>)
 800d058:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d062:	f241 3388 	movw	r3, #5000	; 0x1388
 800d066:	4353      	muls	r3, r2
    if (count-- == 0)
 800d068:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d06c:	d32b      	bcc.n	800d0c6 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d06e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d070:	f012 0f45 	tst.w	r2, #69	; 0x45
 800d074:	d0f8      	beq.n	800d068 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d076:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d078:	075a      	lsls	r2, r3, #29
 800d07a:	d503      	bpl.n	800d084 <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d07c:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d07e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800d080:	b007      	add	sp, #28
 800d082:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d086:	f011 0101 	ands.w	r1, r1, #1
 800d08a:	d001      	beq.n	800d090 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d08c:	2001      	movs	r0, #1
 800d08e:	e7f6      	b.n	800d07e <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 800d090:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b03      	cmp	r3, #3
 800d096:	d119      	bne.n	800d0cc <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800d098:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d09c:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800d09e:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d0a0:	f7ff fd58 	bl	800cb54 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d0a4:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 800d0a8:	d103      	bne.n	800d0b2 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d0aa:	0c00      	lsrs	r0, r0, #16
 800d0ac:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	e7e6      	b.n	800d080 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d0b2:	0443      	lsls	r3, r0, #17
 800d0b4:	d40c      	bmi.n	800d0d0 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d0b6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800d0ba:	bf14      	ite	ne
 800d0bc:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800d0c0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d0c4:	e7dc      	b.n	800d080 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800d0c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800d0ca:	e7d9      	b.n	800d080 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0cc:	2001      	movs	r0, #1
 800d0ce:	e7d7      	b.n	800d080 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d0d4:	e7d4      	b.n	800d080 <SDMMC_CmdSetRelAdd+0x4c>
 800d0d6:	bf00      	nop
 800d0d8:	200000cc 	.word	0x200000cc

0800d0dc <SDMMC_CmdSendStatus>:
{
 800d0dc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0de:	2340      	movs	r3, #64	; 0x40
{
 800d0e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0e2:	240d      	movs	r4, #13
{
 800d0e4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d0e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0e8:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d0ea:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0ee:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0f4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0f6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0f8:	f7ff fcec 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f7ff fd3c 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800d108:	b007      	add	sp, #28
 800d10a:	bd30      	pop	{r4, r5, pc}

0800d10c <SDMMC_CmdSwitch>:
{
 800d10c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d10e:	2340      	movs	r3, #64	; 0x40
{
 800d110:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d112:	2406      	movs	r4, #6
{
 800d114:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d116:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d118:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 800d11a:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d11c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d11e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d120:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800d124:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d126:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d128:	f7ff fcd4 	bl	800cad4 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800d12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d130:	4621      	mov	r1, r4
 800d132:	4628      	mov	r0, r5
 800d134:	f7ff fd24 	bl	800cb80 <SDMMC_GetCmdResp1>
}
 800d138:	b007      	add	sp, #28
 800d13a:	bd30      	pop	{r4, r5, pc}

0800d13c <SDMMC_CmdBusWidth>:
 800d13c:	f7ff bfe6 	b.w	800d10c <SDMMC_CmdSwitch>

0800d140 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d142:	3b01      	subs	r3, #1
 800d144:	d101      	bne.n	800d14a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800d146:	2003      	movs	r0, #3
 800d148:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d14a:	6902      	ldr	r2, [r0, #16]
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	daf8      	bge.n	800d142 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d150:	6903      	ldr	r3, [r0, #16]
 800d152:	4a06      	ldr	r2, [pc, #24]	; (800d16c <USB_CoreReset+0x2c>)
 800d154:	f043 0301 	orr.w	r3, r3, #1
 800d158:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800d15a:	3a01      	subs	r2, #1
 800d15c:	d0f3      	beq.n	800d146 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d15e:	6903      	ldr	r3, [r0, #16]
 800d160:	f013 0301 	ands.w	r3, r3, #1
 800d164:	d1f9      	bne.n	800d15a <USB_CoreReset+0x1a>

  return HAL_OK;
 800d166:	4618      	mov	r0, r3
}
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	00030d41 	.word	0x00030d41

0800d170 <USB_CoreInit>:
{
 800d170:	b084      	sub	sp, #16
 800d172:	b538      	push	{r3, r4, r5, lr}
 800d174:	ad05      	add	r5, sp, #20
 800d176:	4604      	mov	r4, r0
 800d178:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d126      	bne.n	800d1d0 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d182:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d188:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d18a:	68c3      	ldr	r3, [r0, #12]
 800d18c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d194:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d196:	68c3      	ldr	r3, [r0, #12]
 800d198:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d19c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800d19e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d103      	bne.n	800d1ac <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d1a4:	68c3      	ldr	r3, [r0, #12]
 800d1a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1aa:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f7ff ffc7 	bl	800d140 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800d1b2:	9b08      	ldr	r3, [sp, #32]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d107      	bne.n	800d1c8 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d1b8:	68a3      	ldr	r3, [r4, #8]
 800d1ba:	f043 0306 	orr.w	r3, r3, #6
 800d1be:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d1c0:	68a3      	ldr	r3, [r4, #8]
 800d1c2:	f043 0320 	orr.w	r3, r3, #32
 800d1c6:	60a3      	str	r3, [r4, #8]
}
 800d1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1cc:	b004      	add	sp, #16
 800d1ce:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d1d0:	68c3      	ldr	r3, [r0, #12]
 800d1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800d1d8:	f7ff ffb2 	bl	800d140 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d1dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d1de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1e2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1e4:	e7e5      	b.n	800d1b2 <USB_CoreInit+0x42>

0800d1e6 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d1e6:	6883      	ldr	r3, [r0, #8]
 800d1e8:	f043 0301 	orr.w	r3, r3, #1
 800d1ec:	6083      	str	r3, [r0, #8]
}
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	4770      	bx	lr

0800d1f2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d1f2:	6883      	ldr	r3, [r0, #8]
 800d1f4:	f023 0301 	bic.w	r3, r3, #1
 800d1f8:	6083      	str	r3, [r0, #8]
}
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	4770      	bx	lr

0800d1fe <USB_SetCurrentMode>:
{
 800d1fe:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d200:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d202:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d208:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800d20a:	d108      	bne.n	800d21e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d20c:	68c3      	ldr	r3, [r0, #12]
 800d20e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d212:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800d214:	2032      	movs	r0, #50	; 0x32
 800d216:	f7f8 f8ef 	bl	80053f8 <HAL_Delay>
  return HAL_OK;
 800d21a:	2000      	movs	r0, #0
 800d21c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800d21e:	b919      	cbnz	r1, 800d228 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d220:	68c3      	ldr	r3, [r0, #12]
 800d222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d226:	e7f4      	b.n	800d212 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800d228:	2001      	movs	r0, #1
}
 800d22a:	bd08      	pop	{r3, pc}

0800d22c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d22c:	0189      	lsls	r1, r1, #6
 800d22e:	4a07      	ldr	r2, [pc, #28]	; (800d24c <USB_FlushTxFifo+0x20>)
 800d230:	f041 0120 	orr.w	r1, r1, #32
 800d234:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800d236:	3a01      	subs	r2, #1
 800d238:	d005      	beq.n	800d246 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d23a:	6903      	ldr	r3, [r0, #16]
 800d23c:	f013 0320 	ands.w	r3, r3, #32
 800d240:	d1f9      	bne.n	800d236 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800d242:	4618      	mov	r0, r3
 800d244:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d246:	2003      	movs	r0, #3
}
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	00030d41 	.word	0x00030d41

0800d250 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d250:	2310      	movs	r3, #16
 800d252:	4a06      	ldr	r2, [pc, #24]	; (800d26c <USB_FlushRxFifo+0x1c>)
 800d254:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800d256:	3a01      	subs	r2, #1
 800d258:	d005      	beq.n	800d266 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d25a:	6903      	ldr	r3, [r0, #16]
 800d25c:	f013 0310 	ands.w	r3, r3, #16
 800d260:	d1f9      	bne.n	800d256 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800d262:	4618      	mov	r0, r3
 800d264:	4770      	bx	lr
      return HAL_TIMEOUT;
 800d266:	2003      	movs	r0, #3
}
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	00030d41 	.word	0x00030d41

0800d270 <USB_WritePacket>:
{
 800d270:	b510      	push	{r4, lr}
 800d272:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800d276:	b94c      	cbnz	r4, 800d28c <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800d278:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d27a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800d27e:	f023 0303 	bic.w	r3, r3, #3
 800d282:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d286:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800d288:	4299      	cmp	r1, r3
 800d28a:	d101      	bne.n	800d290 <USB_WritePacket+0x20>
}
 800d28c:	2000      	movs	r0, #0
 800d28e:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d290:	f851 2b04 	ldr.w	r2, [r1], #4
 800d294:	6002      	str	r2, [r0, #0]
 800d296:	e7f7      	b.n	800d288 <USB_WritePacket+0x18>

0800d298 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d298:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d29a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800d29e:	f022 0203 	bic.w	r2, r2, #3
 800d2a2:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 800d2a4:	4291      	cmp	r1, r2
 800d2a6:	d101      	bne.n	800d2ac <USB_ReadPacket+0x14>
}
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d2ac:	6803      	ldr	r3, [r0, #0]
 800d2ae:	f841 3b04 	str.w	r3, [r1], #4
 800d2b2:	e7f7      	b.n	800d2a4 <USB_ReadPacket+0xc>

0800d2b4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800d2b4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800d2b6:	6980      	ldr	r0, [r0, #24]
}
 800d2b8:	4010      	ands	r0, r2
 800d2ba:	4770      	bx	lr

0800d2bc <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800d2bc:	6940      	ldr	r0, [r0, #20]
}
 800d2be:	f000 0001 	and.w	r0, r0, #1
 800d2c2:	4770      	bx	lr

0800d2c4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d2c4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 800d2c8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d2ca:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800d2ce:	f023 0303 	bic.w	r3, r3, #3
{
 800d2d2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d2d4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d2d8:	f001 0303 	and.w	r3, r1, #3
 800d2dc:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 800d2e0:	ea43 0304 	orr.w	r3, r3, r4
 800d2e4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 800d2e8:	d104      	bne.n	800d2f4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 800d2ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800d2ee:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 800d2f4:	2902      	cmp	r1, #2
 800d2f6:	d1fb      	bne.n	800d2f0 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 800d2f8:	f241 7370 	movw	r3, #6000	; 0x1770
 800d2fc:	e7f7      	b.n	800d2ee <USB_InitFSLSPClkSel+0x2a>

0800d2fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d2fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800d300:	2500      	movs	r5, #0
{
 800d302:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 800d304:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d306:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d30a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d312:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d314:	9b01      	ldr	r3, [sp, #4]
 800d316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d31a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800d31e:	2064      	movs	r0, #100	; 0x64
 800d320:	f7f8 f86a 	bl	80053f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d324:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800d326:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d32c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800d330:	f7f8 f862 	bl	80053f8 <HAL_Delay>

  return HAL_OK;
}
 800d334:	4628      	mov	r0, r5
 800d336:	b003      	add	sp, #12
 800d338:	bd30      	pop	{r4, r5, pc}

0800d33a <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d33a:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800d33c:	2300      	movs	r3, #0
 800d33e:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d340:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d344:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d34c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	04da      	lsls	r2, r3, #19
 800d352:	d406      	bmi.n	800d362 <USB_DriveVbus+0x28>
 800d354:	2901      	cmp	r1, #1
 800d356:	d104      	bne.n	800d362 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d358:	9b01      	ldr	r3, [sp, #4]
 800d35a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d35e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	04db      	lsls	r3, r3, #19
 800d366:	d505      	bpl.n	800d374 <USB_DriveVbus+0x3a>
 800d368:	b921      	cbnz	r1, 800d374 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d36a:	9b01      	ldr	r3, [sp, #4]
 800d36c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d370:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800d374:	2000      	movs	r0, #0
 800d376:	b002      	add	sp, #8
 800d378:	4770      	bx	lr
	...

0800d37c <USB_HostInit>:
{
 800d37c:	b084      	sub	sp, #16
 800d37e:	b538      	push	{r3, r4, r5, lr}
 800d380:	4604      	mov	r4, r0
 800d382:	a805      	add	r0, sp, #20
 800d384:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d38e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d394:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d398:	05da      	lsls	r2, r3, #23
 800d39a:	d53f      	bpl.n	800d41c <USB_HostInit+0xa0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3a0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d3a4:	d13c      	bne.n	800d420 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d3a6:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d3aa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d3ae:	2110      	movs	r1, #16
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f7ff ff3b 	bl	800d22c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f7ff ff4a 	bl	800d250 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	9906      	ldr	r1, [sp, #24]
 800d3c0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 800d3c8:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 800d3ca:	428b      	cmp	r3, r1
 800d3cc:	d12b      	bne.n	800d426 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 800d3ce:	2101      	movs	r1, #1
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7ff ffb2 	bl	800d33a <USB_DriveVbus>
  HAL_Delay(200U);
 800d3d6:	20c8      	movs	r0, #200	; 0xc8
 800d3d8:	f7f8 f80e 	bl	80053f8 <HAL_Delay>
  USBx->GINTMSK = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e4:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d3e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d3e8:	05db      	lsls	r3, r3, #23
 800d3ea:	d521      	bpl.n	800d430 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 800d3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3f0:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d3f2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800d3f6:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d3f8:	4b11      	ldr	r3, [pc, #68]	; (800d440 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d3fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 800d3fe:	9b08      	ldr	r3, [sp, #32]
 800d400:	b91b      	cbnz	r3, 800d40a <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d402:	69a3      	ldr	r3, [r4, #24]
 800d404:	f043 0310 	orr.w	r3, r3, #16
 800d408:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d40a:	69a2      	ldr	r2, [r4, #24]
}
 800d40c:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d40e:	4b0d      	ldr	r3, [pc, #52]	; (800d444 <USB_HostInit+0xc8>)
 800d410:	4313      	orrs	r3, r2
 800d412:	61a3      	str	r3, [r4, #24]
}
 800d414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d418:	b004      	add	sp, #16
 800d41a:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d41c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800d420:	f023 0304 	bic.w	r3, r3, #4
 800d424:	e7c1      	b.n	800d3aa <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d426:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d428:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 800d42a:	60d5      	str	r5, [r2, #12]
 800d42c:	3220      	adds	r2, #32
 800d42e:	e7cc      	b.n	800d3ca <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 800d430:	2380      	movs	r3, #128	; 0x80
 800d432:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d434:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800d438:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d43a:	4b03      	ldr	r3, [pc, #12]	; (800d448 <USB_HostInit+0xcc>)
 800d43c:	e7dd      	b.n	800d3fa <USB_HostInit+0x7e>
 800d43e:	bf00      	nop
 800d440:	00e00300 	.word	0x00e00300
 800d444:	a3200008 	.word	0xa3200008
 800d448:	004000e0 	.word	0x004000e0

0800d44c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d44c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800d44e:	2300      	movs	r3, #0
 800d450:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800d452:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800d456:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d458:	9801      	ldr	r0, [sp, #4]
}
 800d45a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800d45e:	b002      	add	sp, #8
 800d460:	4770      	bx	lr

0800d462 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d462:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d466:	6880      	ldr	r0, [r0, #8]
}
 800d468:	b280      	uxth	r0, r0
 800d46a:	4770      	bx	lr

0800d46c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800d46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d470:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 800d474:	4605      	mov	r5, r0
 800d476:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d47a:	f04f 30ff 	mov.w	r0, #4294967295
 800d47e:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 800d482:	fa4f f882 	sxtb.w	r8, r2
 800d486:	60a0      	str	r0, [r4, #8]
 800d488:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 800d48c:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d490:	2e03      	cmp	r6, #3
 800d492:	d870      	bhi.n	800d576 <USB_HC_Init+0x10a>
 800d494:	e8df f006 	tbb	[pc, r6]
 800d498:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d49c:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d4a0:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d4a4:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d4a6:	da03      	bge.n	800d4b0 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d4a8:	68e1      	ldr	r1, [r4, #12]
 800d4aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800d4ae:	e005      	b.n	800d4bc <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d4b0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800d4b2:	05c9      	lsls	r1, r1, #23
 800d4b4:	d546      	bpl.n	800d544 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d4b6:	68e1      	ldr	r1, [r4, #12]
 800d4b8:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 800d4bc:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d4be:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800d4c6:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d4ca:	fa01 f10e 	lsl.w	r1, r1, lr
 800d4ce:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 800d4d2:	bfb4      	ite	lt
 800d4d4:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 800d4d8:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d4da:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d4de:	69a9      	ldr	r1, [r5, #24]
 800d4e0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800d4e4:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d4e6:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d4e8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d4ec:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 800d4ee:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d4f2:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d4f6:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d4fa:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 800d4fe:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d500:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 800d504:	bf0c      	ite	eq
 800d506:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800d50a:	2100      	movne	r1, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d50c:	4313      	orrs	r3, r2
 800d50e:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 800d510:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d512:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800d516:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d51a:	ea43 0304 	orr.w	r3, r3, r4
 800d51e:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d522:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800d526:	d128      	bne.n	800d57a <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d528:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800d52c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d530:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d538:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800d53c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d540:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d542:	dbb1      	blt.n	800d4a8 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d544:	2101      	movs	r1, #1
 800d546:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800d54a:	fa01 f10e 	lsl.w	r1, r1, lr
 800d54e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 800d550:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d552:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 800d556:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d558:	69a9      	ldr	r1, [r5, #24]
 800d55a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800d55e:	61a9      	str	r1, [r5, #24]
 800d560:	e7c1      	b.n	800d4e6 <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d562:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800d566:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d56a:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800d56c:	daea      	bge.n	800d544 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d56e:	68e1      	ldr	r1, [r4, #12]
 800d570:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d574:	e7a2      	b.n	800d4bc <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 800d576:	2001      	movs	r0, #1
 800d578:	e7a2      	b.n	800d4c0 <USB_HC_Init+0x54>
}
 800d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d57e <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d57e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800d582:	6940      	ldr	r0, [r0, #20]
}
 800d584:	b280      	uxth	r0, r0
 800d586:	4770      	bx	lr

0800d588 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d588:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800d58c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d590:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d594:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d598:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d59c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5a0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d5a4:	d11e      	bne.n	800d5e4 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d5a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d5a8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d5ac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d5b0:	d137      	bne.n	800d622 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d5b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5ba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d5be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d5c6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d5ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5ce:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d5d2:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	d002      	beq.n	800d5e0 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d5da:	6811      	ldr	r1, [r2, #0]
 800d5dc:	2900      	cmp	r1, #0
 800d5de:	dbfa      	blt.n	800d5d6 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d5e4:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800d5e8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d5ec:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d5f0:	d117      	bne.n	800d622 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d5f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5f6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5fa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d5fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d602:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d606:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800d60a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d60e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d612:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800d616:	3b01      	subs	r3, #1
 800d618:	d0e2      	beq.n	800d5e0 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d61a:	6811      	ldr	r1, [r2, #0]
 800d61c:	2900      	cmp	r1, #0
 800d61e:	dbfa      	blt.n	800d616 <USB_HC_Halt+0x8e>
 800d620:	e7de      	b.n	800d5e0 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d626:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800d62a:	e7d9      	b.n	800d5e0 <USB_HC_Halt+0x58>

0800d62c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d62c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800d630:	4a06      	ldr	r2, [pc, #24]	; (800d64c <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 800d632:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d634:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d638:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d63c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d644:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	80080000 	.word	0x80080000

0800d650 <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800d650:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d652:	05db      	lsls	r3, r3, #23
{
 800d654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d658:	4616      	mov	r6, r2
 800d65a:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d65c:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800d65e:	d517      	bpl.n	800d690 <USB_HC_StartXfer+0x40>
 800d660:	790d      	ldrb	r5, [r1, #4]
 800d662:	b9ad      	cbnz	r5, 800d690 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d664:	b94e      	cbnz	r6, 800d67a <USB_HC_StartXfer+0x2a>
 800d666:	794b      	ldrb	r3, [r1, #5]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d111      	bne.n	800d690 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 800d66c:	4611      	mov	r1, r2
 800d66e:	f7ff ffdd 	bl	800d62c <USB_DoPing>
}
 800d672:	2000      	movs	r0, #0
 800d674:	b002      	add	sp, #8
 800d676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 800d67a:	2e01      	cmp	r6, #1
 800d67c:	d108      	bne.n	800d690 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d67e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800d682:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 800d686:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800d68a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800d68e:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 800d690:	6908      	ldr	r0, [r1, #16]
 800d692:	2800      	cmp	r0, #0
 800d694:	d066      	beq.n	800d764 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d696:	890b      	ldrh	r3, [r1, #8]
 800d698:	3801      	subs	r0, #1
 800d69a:	4418      	add	r0, r3
 800d69c:	fbb0 f0f3 	udiv	r0, r0, r3
 800d6a0:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 800d6a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d6a6:	d903      	bls.n	800d6b0 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d6a8:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 800d6aa:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d6ae:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 800d6b0:	78cf      	ldrb	r7, [r1, #3]
 800d6b2:	b117      	cbz	r7, 800d6ba <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d6b4:	890b      	ldrh	r3, [r1, #8]
 800d6b6:	4343      	muls	r3, r0
 800d6b8:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d6ba:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6be:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 800d6c2:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d6c4:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6c8:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d6cc:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d6d0:	ea4e 0e08 	orr.w	lr, lr, r8
 800d6d4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800d7b0 <USB_HC_StartXfer+0x160>
 800d6d8:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 800d6dc:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d6e0:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 800d6e4:	b116      	cbz	r6, 800d6ec <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d6e6:	68c8      	ldr	r0, [r1, #12]
 800d6e8:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d6ec:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 800d6f0:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d6f4:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d6f8:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d6fa:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d6fe:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d700:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d704:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800d708:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800d70c:	ea40 000c 	orr.w	r0, r0, ip
 800d710:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d714:	4825      	ldr	r0, [pc, #148]	; (800d7ac <USB_HC_StartXfer+0x15c>)
 800d716:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800d71a:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d71e:	f8d0 c000 	ldr.w	ip, [r0]
 800d722:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 800d726:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d72a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 800d72e:	b1df      	cbz	r7, 800d768 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d730:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d734:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d738:	f8d0 c000 	ldr.w	ip, [r0]
 800d73c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 800d740:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d744:	6800      	ldr	r0, [r0, #0]
 800d746:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	d191      	bne.n	800d672 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d74e:	2f00      	cmp	r7, #0
 800d750:	d18f      	bne.n	800d672 <USB_HC_StartXfer+0x22>
 800d752:	2b00      	cmp	r3, #0
 800d754:	d08d      	beq.n	800d672 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 800d756:	79c8      	ldrb	r0, [r1, #7]
 800d758:	2803      	cmp	r0, #3
 800d75a:	d813      	bhi.n	800d784 <USB_HC_StartXfer+0x134>
 800d75c:	e8df f000 	tbb	[pc, r0]
 800d760:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 800d764:	2001      	movs	r0, #1
 800d766:	e7a3      	b.n	800d6b0 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d768:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800d76c:	e7e2      	b.n	800d734 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d76e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d770:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d772:	b280      	uxth	r0, r0
 800d774:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800d778:	4285      	cmp	r5, r0
 800d77a:	d903      	bls.n	800d784 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d77c:	69a0      	ldr	r0, [r4, #24]
 800d77e:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d782:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d784:	2000      	movs	r0, #0
 800d786:	b29b      	uxth	r3, r3
 800d788:	9000      	str	r0, [sp, #0]
 800d78a:	4620      	mov	r0, r4
 800d78c:	68c9      	ldr	r1, [r1, #12]
 800d78e:	f7ff fd6f 	bl	800d270 <USB_WritePacket>
 800d792:	e76e      	b.n	800d672 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d794:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d798:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d79a:	b280      	uxth	r0, r0
 800d79c:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800d7a0:	4285      	cmp	r5, r0
 800d7a2:	d9ef      	bls.n	800d784 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d7a4:	69a0      	ldr	r0, [r4, #24]
 800d7a6:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 800d7aa:	e7ea      	b.n	800d782 <USB_HC_StartXfer+0x132>
 800d7ac:	2003d26c 	.word	0x2003d26c
 800d7b0:	1ff80000 	.word	0x1ff80000

0800d7b4 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7b4:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d7b6:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7b8:	f023 0301 	bic.w	r3, r3, #1
{
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d7c0:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d7c2:	f7ff fd33 	bl	800d22c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f7ff fd42 	bl	800d250 <USB_FlushRxFifo>
 800d7cc:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800d7d0:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800d7d4:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800d7d6:	6811      	ldr	r1, [r2, #0]
 800d7d8:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d7dc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800d7e0:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 800d7e4:	4290      	cmp	r0, r2
 800d7e6:	d1f6      	bne.n	800d7d6 <USB_StopHost+0x22>
 800d7e8:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800d7ea:	6819      	ldr	r1, [r3, #0]
 800d7ec:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d7f0:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800d7f4:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d7fc:	d802      	bhi.n	800d804 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d7fe:	6819      	ldr	r1, [r3, #0]
 800d800:	2900      	cmp	r1, #0
 800d802:	dbf8      	blt.n	800d7f6 <USB_StopHost+0x42>
 800d804:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 800d806:	429a      	cmp	r2, r3
 800d808:	d1ef      	bne.n	800d7ea <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d80a:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800d80e:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d810:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d814:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d816:	68a3      	ldr	r3, [r4, #8]
 800d818:	f043 0301 	orr.w	r3, r3, #1
 800d81c:	60a3      	str	r3, [r4, #8]
}
 800d81e:	bd10      	pop	{r4, pc}

0800d820 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d820:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <FATFS_LinkDriverEx+0x40>)
{
 800d822:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 800d824:	7a5d      	ldrb	r5, [r3, #9]
 800d826:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800d82a:	b9b5      	cbnz	r5, 800d85a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d82c:	7a5d      	ldrb	r5, [r3, #9]
 800d82e:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800d830:	7a5d      	ldrb	r5, [r3, #9]
 800d832:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d836:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800d838:	7a58      	ldrb	r0, [r3, #9]
 800d83a:	4418      	add	r0, r3
 800d83c:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800d83e:	7a5a      	ldrb	r2, [r3, #9]
 800d840:	b2d2      	uxtb	r2, r2
 800d842:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800d844:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800d846:	b2c0      	uxtb	r0, r0
 800d848:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800d84a:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800d84c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 800d84e:	4620      	mov	r0, r4
    path[1] = ':';
 800d850:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800d852:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800d854:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800d856:	708b      	strb	r3, [r1, #2]
 800d858:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800d85a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 800d85c:	bd30      	pop	{r4, r5, pc}
 800d85e:	bf00      	nop
 800d860:	2003d270 	.word	0x2003d270

0800d864 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800d864:	2200      	movs	r2, #0
 800d866:	f7ff bfdb 	b.w	800d820 <FATFS_LinkDriverEx>

0800d86a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d86a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800d86c:	f001 f9b0 	bl	800ebd0 <vTaskStartScheduler>
  
  return osOK;
}
 800d870:	2000      	movs	r0, #0
 800d872:	bd08      	pop	{r3, pc}

0800d874 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d874:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d876:	f001 fc41 	bl	800f0fc <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800d87a:	f110 30ff 	adds.w	r0, r0, #4294967295
 800d87e:	bf18      	it	ne
 800d880:	2001      	movne	r0, #1
 800d882:	bd08      	pop	{r3, pc}

0800d884 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d884:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800d888:	b10b      	cbz	r3, 800d88e <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800d88a:	f001 b9ef 	b.w	800ec6c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800d88e:	f001 b9e7 	b.w	800ec60 <xTaskGetTickCount>

0800d892 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d892:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d894:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800d898:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d89a:	8a02      	ldrh	r2, [r0, #16]
{
 800d89c:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 800d89e:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8a0:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800d8a4:	bf14      	ite	ne
 800d8a6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d8a8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8aa:	a803      	add	r0, sp, #12
 800d8ac:	9400      	str	r4, [sp, #0]
 800d8ae:	9001      	str	r0, [sp, #4]
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f001 f8b5 	bl	800ea20 <xTaskCreate>
 800d8b6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d8b8:	bf0c      	ite	eq
 800d8ba:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800d8bc:	2000      	movne	r0, #0
}
 800d8be:	b005      	add	sp, #20
 800d8c0:	bd30      	pop	{r4, r5, pc}

0800d8c2 <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800d8c2:	f001 bc15 	b.w	800f0f0 <xTaskGetCurrentTaskHandle>

0800d8c6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	bf08      	it	eq
 800d8ca:	2001      	moveq	r0, #1
{
 800d8cc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d8ce:	f001 fae3 	bl	800ee98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	bd08      	pop	{r3, pc}

0800d8d6 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	f000 bd70 	b.w	800e3bc <xQueueCreateMutex>

0800d8dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d8dc:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d8de:	2400      	movs	r4, #0
 800d8e0:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800d8e2:	b1e0      	cbz	r0, 800d91e <osMutexWait+0x42>
 800d8e4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d8e8:	b1a3      	cbz	r3, 800d914 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d8ea:	aa01      	add	r2, sp, #4
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f000 ffb1 	bl	800e854 <xQueueReceiveFromISR>
 800d8f2:	2801      	cmp	r0, #1
 800d8f4:	d002      	beq.n	800d8fc <osMutexWait+0x20>
      return osErrorOS;
 800d8f6:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800d8f8:	b002      	add	sp, #8
 800d8fa:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800d8fc:	9b01      	ldr	r3, [sp, #4]
 800d8fe:	b13b      	cbz	r3, 800d910 <osMutexWait+0x34>
 800d900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d904:	4b07      	ldr	r3, [pc, #28]	; (800d924 <osMutexWait+0x48>)
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	f3bf 8f6f 	isb	sy
  return osOK;
 800d910:	2000      	movs	r0, #0
 800d912:	e7f1      	b.n	800d8f8 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d914:	f000 fed6 	bl	800e6c4 <xQueueSemaphoreTake>
 800d918:	2801      	cmp	r0, #1
 800d91a:	d1ec      	bne.n	800d8f6 <osMutexWait+0x1a>
 800d91c:	e7f8      	b.n	800d910 <osMutexWait+0x34>
    return osErrorParameter;
 800d91e:	2080      	movs	r0, #128	; 0x80
 800d920:	e7ea      	b.n	800d8f8 <osMutexWait+0x1c>
 800d922:	bf00      	nop
 800d924:	e000ed04 	.word	0xe000ed04

0800d928 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800d928:	2901      	cmp	r1, #1
{ 
 800d92a:	4608      	mov	r0, r1
 800d92c:	b510      	push	{r4, lr}
  if (count == 1) {
 800d92e:	d10c      	bne.n	800d94a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800d930:	2203      	movs	r2, #3
 800d932:	2100      	movs	r1, #0
 800d934:	f000 fc3e 	bl	800e1b4 <xQueueGenericCreate>
 800d938:	4604      	mov	r4, r0
 800d93a:	b120      	cbz	r0, 800d946 <osSemaphoreCreate+0x1e>
 800d93c:	2300      	movs	r3, #0
 800d93e:	461a      	mov	r2, r3
 800d940:	4619      	mov	r1, r3
 800d942:	f000 fc7d 	bl	800e240 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 800d946:	4620      	mov	r0, r4
 800d948:	bd10      	pop	{r4, pc}
 800d94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800d94e:	f000 bc54 	b.w	800e1fa <xQueueCreateCountingSemaphore>
	...

0800d954 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d954:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d956:	2400      	movs	r4, #0
 800d958:	9401      	str	r4, [sp, #4]
 800d95a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d95e:	b193      	cbz	r3, 800d986 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d960:	a901      	add	r1, sp, #4
 800d962:	f000 fda7 	bl	800e4b4 <xQueueGiveFromISR>
 800d966:	2801      	cmp	r0, #1
 800d968:	d113      	bne.n	800d992 <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	b913      	cbnz	r3, 800d974 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 800d96e:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 800d970:	b002      	add	sp, #8
 800d972:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d978:	4b07      	ldr	r3, [pc, #28]	; (800d998 <osSemaphoreRelease+0x44>)
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	e7f3      	b.n	800d96e <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d986:	461a      	mov	r2, r3
 800d988:	4619      	mov	r1, r3
 800d98a:	f000 fc59 	bl	800e240 <xQueueGenericSend>
 800d98e:	2801      	cmp	r0, #1
 800d990:	d0ed      	beq.n	800d96e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800d992:	20ff      	movs	r0, #255	; 0xff
 800d994:	e7ec      	b.n	800d970 <osSemaphoreRelease+0x1c>
 800d996:	bf00      	nop
 800d998:	e000ed04 	.word	0xe000ed04

0800d99c <osMutexRelease>:
 800d99c:	f7ff bfda 	b.w	800d954 <osSemaphoreRelease>

0800d9a0 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	c803      	ldmia	r0, {r0, r1}
 800d9a4:	f000 bc06 	b.w	800e1b4 <xQueueGenericCreate>

0800d9a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800d9aa:	2400      	movs	r4, #0
{
 800d9ac:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d9ae:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 800d9b0:	42a2      	cmp	r2, r4
 800d9b2:	bf08      	it	eq
 800d9b4:	2201      	moveq	r2, #1
 800d9b6:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800d9ba:	b1ab      	cbz	r3, 800d9e8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d9bc:	4623      	mov	r3, r4
 800d9be:	aa03      	add	r2, sp, #12
 800d9c0:	a901      	add	r1, sp, #4
 800d9c2:	f000 fd0d 	bl	800e3e0 <xQueueGenericSendFromISR>
 800d9c6:	2801      	cmp	r0, #1
 800d9c8:	d002      	beq.n	800d9d0 <osMessagePut+0x28>
      return osErrorOS;
 800d9ca:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800d9cc:	b004      	add	sp, #16
 800d9ce:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800d9d0:	9b03      	ldr	r3, [sp, #12]
 800d9d2:	b13b      	cbz	r3, 800d9e4 <osMessagePut+0x3c>
 800d9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d8:	4b06      	ldr	r3, [pc, #24]	; (800d9f4 <osMessagePut+0x4c>)
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	f3bf 8f6f 	isb	sy
  return osOK;
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	e7f1      	b.n	800d9cc <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d9e8:	a901      	add	r1, sp, #4
 800d9ea:	f000 fc29 	bl	800e240 <xQueueGenericSend>
 800d9ee:	2801      	cmp	r0, #1
 800d9f0:	d1eb      	bne.n	800d9ca <osMessagePut+0x22>
 800d9f2:	e7f7      	b.n	800d9e4 <osMessagePut+0x3c>
 800d9f4:	e000ed04 	.word	0xe000ed04

0800d9f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800d9fa:	2600      	movs	r6, #0
{
 800d9fc:	b085      	sub	sp, #20
 800d9fe:	4604      	mov	r4, r0
 800da00:	4617      	mov	r7, r2
 800da02:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800da04:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800da06:	9602      	str	r6, [sp, #8]
 800da08:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 800da0a:	b911      	cbnz	r1, 800da12 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 800da0c:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	e016      	b.n	800da40 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800da12:	9600      	str	r6, [sp, #0]
 800da14:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800da18:	b1cb      	cbz	r3, 800da4e <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800da1a:	466a      	mov	r2, sp
 800da1c:	a902      	add	r1, sp, #8
 800da1e:	f000 ff19 	bl	800e854 <xQueueReceiveFromISR>
 800da22:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800da24:	bf0a      	itet	eq
 800da26:	2310      	moveq	r3, #16
      event.status = osOK;
 800da28:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 800da2a:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800da2c:	9b00      	ldr	r3, [sp, #0]
 800da2e:	b13b      	cbz	r3, 800da40 <osMessageGet+0x48>
 800da30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da34:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <osMessageGet+0x70>)
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 800da40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800da48:	4620      	mov	r0, r4
 800da4a:	b005      	add	sp, #20
 800da4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800da4e:	a902      	add	r1, sp, #8
 800da50:	f000 fd8e 	bl	800e570 <xQueueReceive>
 800da54:	2801      	cmp	r0, #1
 800da56:	d101      	bne.n	800da5c <osMessageGet+0x64>
      event.status = osEventMessage;
 800da58:	2310      	movs	r3, #16
 800da5a:	e7d8      	b.n	800da0e <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800da5c:	2f00      	cmp	r7, #0
 800da5e:	bf0c      	ite	eq
 800da60:	2300      	moveq	r3, #0
 800da62:	2340      	movne	r3, #64	; 0x40
 800da64:	e7d3      	b.n	800da0e <osMessageGet+0x16>
 800da66:	bf00      	nop
 800da68:	e000ed04 	.word	0xe000ed04

0800da6c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da6c:	4b0f      	ldr	r3, [pc, #60]	; (800daac <prvInsertBlockIntoFreeList+0x40>)
{
 800da6e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	4282      	cmp	r2, r0
 800da74:	d318      	bcc.n	800daa8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da76:	685c      	ldr	r4, [r3, #4]
 800da78:	1919      	adds	r1, r3, r4
 800da7a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da7c:	bf01      	itttt	eq
 800da7e:	6841      	ldreq	r1, [r0, #4]
 800da80:	4618      	moveq	r0, r3
 800da82:	1909      	addeq	r1, r1, r4
 800da84:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da86:	6844      	ldr	r4, [r0, #4]
 800da88:	1901      	adds	r1, r0, r4
 800da8a:	428a      	cmp	r2, r1
 800da8c:	d107      	bne.n	800da9e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da8e:	4908      	ldr	r1, [pc, #32]	; (800dab0 <prvInsertBlockIntoFreeList+0x44>)
 800da90:	6809      	ldr	r1, [r1, #0]
 800da92:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da94:	bf1f      	itttt	ne
 800da96:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da98:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da9a:	1909      	addne	r1, r1, r4
 800da9c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da9e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800daa0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800daa2:	bf18      	it	ne
 800daa4:	6018      	strne	r0, [r3, #0]
 800daa6:	bd10      	pop	{r4, pc}
 800daa8:	4613      	mov	r3, r2
 800daaa:	e7e1      	b.n	800da70 <prvInsertBlockIntoFreeList+0x4>
 800daac:	2004528c 	.word	0x2004528c
 800dab0:	2003d27c 	.word	0x2003d27c

0800dab4 <pvPortMalloc>:
{
 800dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800daba:	f001 f8c9 	bl	800ec50 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800dabe:	4941      	ldr	r1, [pc, #260]	; (800dbc4 <pvPortMalloc+0x110>)
 800dac0:	4d41      	ldr	r5, [pc, #260]	; (800dbc8 <pvPortMalloc+0x114>)
 800dac2:	680b      	ldr	r3, [r1, #0]
 800dac4:	bb0b      	cbnz	r3, 800db0a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800dac6:	4a41      	ldr	r2, [pc, #260]	; (800dbcc <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dac8:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800daca:	4e41      	ldr	r6, [pc, #260]	; (800dbd0 <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dacc:	bf1b      	ittet	ne
 800dace:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dad0:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dad4:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dad8:	f020 0007 	bicne.w	r0, r0, #7
 800dadc:	bf1c      	itt	ne
 800dade:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dae0:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800dae2:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dae4:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dae6:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dae8:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800daea:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800daec:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800daf0:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800daf2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800daf4:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800daf6:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800daf8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dafa:	4b36      	ldr	r3, [pc, #216]	; (800dbd4 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dafc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dafe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db00:	4b35      	ldr	r3, [pc, #212]	; (800dbd8 <pvPortMalloc+0x124>)
 800db02:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db08:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db0a:	682f      	ldr	r7, [r5, #0]
 800db0c:	4227      	tst	r7, r4
 800db0e:	d116      	bne.n	800db3e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800db10:	2c00      	cmp	r4, #0
 800db12:	d042      	beq.n	800db9a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800db14:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db18:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db1a:	bf1c      	itt	ne
 800db1c:	f023 0307 	bicne.w	r3, r3, #7
 800db20:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800db22:	b163      	cbz	r3, 800db3e <pvPortMalloc+0x8a>
 800db24:	4a2c      	ldr	r2, [pc, #176]	; (800dbd8 <pvPortMalloc+0x124>)
 800db26:	6816      	ldr	r6, [r2, #0]
 800db28:	4690      	mov	r8, r2
 800db2a:	42b3      	cmp	r3, r6
 800db2c:	d807      	bhi.n	800db3e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800db2e:	4a28      	ldr	r2, [pc, #160]	; (800dbd0 <pvPortMalloc+0x11c>)
 800db30:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db32:	6868      	ldr	r0, [r5, #4]
 800db34:	4283      	cmp	r3, r0
 800db36:	d804      	bhi.n	800db42 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800db38:	6809      	ldr	r1, [r1, #0]
 800db3a:	428d      	cmp	r5, r1
 800db3c:	d107      	bne.n	800db4e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800db3e:	2400      	movs	r4, #0
 800db40:	e02b      	b.n	800db9a <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db42:	682c      	ldr	r4, [r5, #0]
 800db44:	2c00      	cmp	r4, #0
 800db46:	d0f7      	beq.n	800db38 <pvPortMalloc+0x84>
 800db48:	462a      	mov	r2, r5
 800db4a:	4625      	mov	r5, r4
 800db4c:	e7f1      	b.n	800db32 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db4e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db50:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db52:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db54:	1ac2      	subs	r2, r0, r3
 800db56:	2a10      	cmp	r2, #16
 800db58:	d911      	bls.n	800db7e <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db5a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db5c:	0741      	lsls	r1, r0, #29
 800db5e:	d00a      	beq.n	800db76 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	b672      	cpsid	i
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	b662      	cpsie	i
 800db74:	e7fe      	b.n	800db74 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db76:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db78:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db7a:	f7ff ff77 	bl	800da6c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db7e:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db80:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db82:	4914      	ldr	r1, [pc, #80]	; (800dbd4 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db84:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db86:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db88:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800db8a:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db8c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db90:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db92:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db94:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db96:	bf38      	it	cc
 800db98:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 800db9a:	f001 f903 	bl	800eda4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800db9e:	b90c      	cbnz	r4, 800dba4 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 800dba0:	f7f3 fc83 	bl	80014aa <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dba4:	0763      	lsls	r3, r4, #29
 800dba6:	d00a      	beq.n	800dbbe <pvPortMalloc+0x10a>
 800dba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbac:	b672      	cpsid	i
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	b662      	cpsie	i
 800dbbc:	e7fe      	b.n	800dbbc <pvPortMalloc+0x108>
}
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc4:	2003d27c 	.word	0x2003d27c
 800dbc8:	20045280 	.word	0x20045280
 800dbcc:	2003d280 	.word	0x2003d280
 800dbd0:	2004528c 	.word	0x2004528c
 800dbd4:	20045288 	.word	0x20045288
 800dbd8:	20045284 	.word	0x20045284

0800dbdc <vPortFree>:
{
 800dbdc:	b510      	push	{r4, lr}
	if( pv != NULL )
 800dbde:	4604      	mov	r4, r0
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	d032      	beq.n	800dc4a <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbe4:	4a19      	ldr	r2, [pc, #100]	; (800dc4c <vPortFree+0x70>)
 800dbe6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800dbea:	6812      	ldr	r2, [r2, #0]
 800dbec:	4213      	tst	r3, r2
 800dbee:	d10a      	bne.n	800dc06 <vPortFree+0x2a>
 800dbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf4:	b672      	cpsid	i
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	b662      	cpsie	i
 800dc04:	e7fe      	b.n	800dc04 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc06:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800dc0a:	b151      	cbz	r1, 800dc22 <vPortFree+0x46>
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	b672      	cpsid	i
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	b662      	cpsie	i
 800dc20:	e7fe      	b.n	800dc20 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc22:	ea23 0302 	bic.w	r3, r3, r2
 800dc26:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800dc2a:	f001 f811 	bl	800ec50 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc2e:	4a08      	ldr	r2, [pc, #32]	; (800dc50 <vPortFree+0x74>)
 800dc30:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc34:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc38:	6811      	ldr	r1, [r2, #0]
 800dc3a:	440b      	add	r3, r1
 800dc3c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc3e:	f7ff ff15 	bl	800da6c <prvInsertBlockIntoFreeList>
}
 800dc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800dc46:	f001 b8ad 	b.w	800eda4 <xTaskResumeAll>
 800dc4a:	bd10      	pop	{r4, pc}
 800dc4c:	20045280 	.word	0x20045280
 800dc50:	20045284 	.word	0x20045284

0800dc54 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc54:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc58:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc5c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc5e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc60:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc62:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc64:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc66:	6003      	str	r3, [r0, #0]
 800dc68:	4770      	bx	lr

0800dc6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	6103      	str	r3, [r0, #16]
 800dc6e:	4770      	bx	lr

0800dc70 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc70:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc72:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800dc74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc76:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dc78:	689a      	ldr	r2, [r3, #8]
 800dc7a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc7c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dc7e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dc80:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dc82:	3301      	adds	r3, #1
 800dc84:	6003      	str	r3, [r0, #0]
 800dc86:	4770      	bx	lr

0800dc88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc88:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dc8a:	1c53      	adds	r3, r2, #1
{
 800dc8c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800dc8e:	d10a      	bne.n	800dca6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc90:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc96:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc98:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc9a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800dc9c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dc9e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800dca0:	3301      	adds	r3, #1
 800dca2:	6003      	str	r3, [r0, #0]
 800dca4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dca6:	f100 0308 	add.w	r3, r0, #8
 800dcaa:	685c      	ldr	r4, [r3, #4]
 800dcac:	6825      	ldr	r5, [r4, #0]
 800dcae:	42aa      	cmp	r2, r5
 800dcb0:	d3ef      	bcc.n	800dc92 <vListInsert+0xa>
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	e7f9      	b.n	800dcaa <vListInsert+0x22>

0800dcb6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dcb6:	6841      	ldr	r1, [r0, #4]
 800dcb8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dcba:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dcbc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dcbe:	6882      	ldr	r2, [r0, #8]
 800dcc0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dcc2:	6859      	ldr	r1, [r3, #4]
 800dcc4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dcc6:	bf08      	it	eq
 800dcc8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800dcca:	2200      	movs	r2, #0
 800dccc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	3a01      	subs	r2, #1
 800dcd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dcd4:	6818      	ldr	r0, [r3, #0]
}
 800dcd6:	4770      	bx	lr

0800dcd8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800dcd8:	2300      	movs	r3, #0
{
 800dcda:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800dcdc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <prvTaskExitError+0x44>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	d00a      	beq.n	800dcfc <prvTaskExitError+0x24>
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	b672      	cpsid	i
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	b662      	cpsie	i
 800dcfa:	e7fe      	b.n	800dcfa <prvTaskExitError+0x22>
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	b672      	cpsid	i
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dd10:	9b01      	ldr	r3, [sp, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0fc      	beq.n	800dd10 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dd16:	b002      	add	sp, #8
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	200000d4 	.word	0x200000d4

0800dd20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dd20:	4808      	ldr	r0, [pc, #32]	; (800dd44 <prvPortStartFirstTask+0x24>)
 800dd22:	6800      	ldr	r0, [r0, #0]
 800dd24:	6800      	ldr	r0, [r0, #0]
 800dd26:	f380 8808 	msr	MSP, r0
 800dd2a:	f04f 0000 	mov.w	r0, #0
 800dd2e:	f380 8814 	msr	CONTROL, r0
 800dd32:	b662      	cpsie	i
 800dd34:	b661      	cpsie	f
 800dd36:	f3bf 8f4f 	dsb	sy
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	df00      	svc	0
 800dd40:	bf00      	nop
 800dd42:	0000      	.short	0x0000
 800dd44:	e000ed08 	.word	0xe000ed08

0800dd48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd58 <vPortEnableVFP+0x10>
 800dd4c:	6801      	ldr	r1, [r0, #0]
 800dd4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd52:	6001      	str	r1, [r0, #0]
 800dd54:	4770      	bx	lr
 800dd56:	0000      	.short	0x0000
 800dd58:	e000ed88 	.word	0xe000ed88

0800dd5c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd60:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd64:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800dd68:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd6a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd6c:	4b03      	ldr	r3, [pc, #12]	; (800dd7c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd6e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd70:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd72:	f06f 0302 	mvn.w	r3, #2
 800dd76:	6203      	str	r3, [r0, #32]
}
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	0800dcd9 	.word	0x0800dcd9

0800dd80 <SVC_Handler>:
	__asm volatile (
 800dd80:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <pxCurrentTCBConst2>)
 800dd82:	6819      	ldr	r1, [r3, #0]
 800dd84:	6808      	ldr	r0, [r1, #0]
 800dd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	f380 8809 	msr	PSP, r0
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f04f 0000 	mov.w	r0, #0
 800dd96:	f380 8811 	msr	BASEPRI, r0
 800dd9a:	4770      	bx	lr
 800dd9c:	f3af 8000 	nop.w

0800dda0 <pxCurrentTCBConst2>:
 800dda0:	2004529c 	.word	0x2004529c

0800dda4 <vPortEnterCritical>:
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	b672      	cpsid	i
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	b662      	cpsie	i
	uxCriticalNesting++;
 800ddb8:	4a0b      	ldr	r2, [pc, #44]	; (800dde8 <vPortEnterCritical+0x44>)
 800ddba:	6813      	ldr	r3, [r2, #0]
 800ddbc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ddbe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ddc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ddc2:	d10f      	bne.n	800dde4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ddc4:	4b09      	ldr	r3, [pc, #36]	; (800ddec <vPortEnterCritical+0x48>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ddcc:	d00a      	beq.n	800dde4 <vPortEnterCritical+0x40>
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	b672      	cpsid	i
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	b662      	cpsie	i
 800dde2:	e7fe      	b.n	800dde2 <vPortEnterCritical+0x3e>
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	200000d4 	.word	0x200000d4
 800ddec:	e000ed04 	.word	0xe000ed04

0800ddf0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ddf0:	4a09      	ldr	r2, [pc, #36]	; (800de18 <vPortExitCritical+0x28>)
 800ddf2:	6813      	ldr	r3, [r2, #0]
 800ddf4:	b953      	cbnz	r3, 800de0c <vPortExitCritical+0x1c>
 800ddf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfa:	b672      	cpsid	i
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	b662      	cpsie	i
 800de0a:	e7fe      	b.n	800de0a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800de0c:	3b01      	subs	r3, #1
 800de0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de10:	b90b      	cbnz	r3, 800de16 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	4770      	bx	lr
 800de18:	200000d4 	.word	0x200000d4
 800de1c:	00000000 	.word	0x00000000

0800de20 <PendSV_Handler>:
	__asm volatile
 800de20:	f3ef 8009 	mrs	r0, PSP
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	4b15      	ldr	r3, [pc, #84]	; (800de80 <pxCurrentTCBConst>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	f01e 0f10 	tst.w	lr, #16
 800de30:	bf08      	it	eq
 800de32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3a:	6010      	str	r0, [r2, #0]
 800de3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de44:	b672      	cpsid	i
 800de46:	f380 8811 	msr	BASEPRI, r0
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	b662      	cpsie	i
 800de54:	f001 f846 	bl	800eee4 <vTaskSwitchContext>
 800de58:	f04f 0000 	mov.w	r0, #0
 800de5c:	f380 8811 	msr	BASEPRI, r0
 800de60:	bc09      	pop	{r0, r3}
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	6808      	ldr	r0, [r1, #0]
 800de66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	f01e 0f10 	tst.w	lr, #16
 800de6e:	bf08      	it	eq
 800de70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de74:	f380 8809 	msr	PSP, r0
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop

0800de80 <pxCurrentTCBConst>:
 800de80:	2004529c 	.word	0x2004529c

0800de84 <SysTick_Handler>:
{
 800de84:	b508      	push	{r3, lr}
	__asm volatile
 800de86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8a:	b672      	cpsid	i
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800de9a:	f000 feef 	bl	800ec7c <xTaskIncrementTick>
 800de9e:	b118      	cbz	r0, 800dea8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <SysTick_Handler+0x2c>)
 800dea6:	601a      	str	r2, [r3, #0]
	__asm volatile
 800dea8:	2300      	movs	r3, #0
 800deaa:	f383 8811 	msr	BASEPRI, r3
 800deae:	bd08      	pop	{r3, pc}
 800deb0:	e000ed04 	.word	0xe000ed04

0800deb4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800deb4:	2300      	movs	r3, #0
 800deb6:	4a08      	ldr	r2, [pc, #32]	; (800ded8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800deb8:	4908      	ldr	r1, [pc, #32]	; (800dedc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800deba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800debc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800debe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dec2:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <vPortSetupTimerInterrupt+0x2c>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	fbb3 f3f1 	udiv	r3, r3, r1
 800deca:	4906      	ldr	r1, [pc, #24]	; (800dee4 <vPortSetupTimerInterrupt+0x30>)
 800decc:	3b01      	subs	r3, #1
 800dece:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ded0:	2307      	movs	r3, #7
 800ded2:	6013      	str	r3, [r2, #0]
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	e000e010 	.word	0xe000e010
 800dedc:	e000e018 	.word	0xe000e018
 800dee0:	200000cc 	.word	0x200000cc
 800dee4:	e000e014 	.word	0xe000e014

0800dee8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dee8:	4b2c      	ldr	r3, [pc, #176]	; (800df9c <xPortStartScheduler+0xb4>)
{
 800deea:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deec:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800def0:	b2d2      	uxtb	r2, r2
 800def2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800def4:	22ff      	movs	r2, #255	; 0xff
 800def6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800def8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800defa:	4a29      	ldr	r2, [pc, #164]	; (800dfa0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800df06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df0c:	2207      	movs	r2, #7
 800df0e:	4b25      	ldr	r3, [pc, #148]	; (800dfa4 <xPortStartScheduler+0xbc>)
 800df10:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df12:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800df16:	1e54      	subs	r4, r2, #1
 800df18:	0600      	lsls	r0, r0, #24
 800df1a:	d40f      	bmi.n	800df3c <xPortStartScheduler+0x54>
 800df1c:	b101      	cbz	r1, 800df20 <xPortStartScheduler+0x38>
 800df1e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	2a03      	cmp	r2, #3
 800df24:	d013      	beq.n	800df4e <xPortStartScheduler+0x66>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2a:	b672      	cpsid	i
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	b662      	cpsie	i
 800df3a:	e7fe      	b.n	800df3a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df40:	2101      	movs	r1, #1
 800df42:	0052      	lsls	r2, r2, #1
 800df44:	b2d2      	uxtb	r2, r2
 800df46:	f88d 2003 	strb.w	r2, [sp, #3]
 800df4a:	4622      	mov	r2, r4
 800df4c:	e7e1      	b.n	800df12 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df4e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800df50:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800df56:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df58:	9b01      	ldr	r3, [sp, #4]
 800df5a:	4a10      	ldr	r2, [pc, #64]	; (800df9c <xPortStartScheduler+0xb4>)
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df60:	4b11      	ldr	r3, [pc, #68]	; (800dfa8 <xPortStartScheduler+0xc0>)
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800df68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800df70:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800df72:	f7ff ff9f 	bl	800deb4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800df76:	4b0d      	ldr	r3, [pc, #52]	; (800dfac <xPortStartScheduler+0xc4>)
 800df78:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800df7a:	f7ff fee5 	bl	800dd48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df7e:	4a0c      	ldr	r2, [pc, #48]	; (800dfb0 <xPortStartScheduler+0xc8>)
 800df80:	6813      	ldr	r3, [r2, #0]
 800df82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df86:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800df88:	f7ff feca 	bl	800dd20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800df8c:	f000 ffaa 	bl	800eee4 <vTaskSwitchContext>
	prvTaskExitError();
 800df90:	f7ff fea2 	bl	800dcd8 <prvTaskExitError>
}
 800df94:	4620      	mov	r0, r4
 800df96:	b002      	add	sp, #8
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	bf00      	nop
 800df9c:	e000e400 	.word	0xe000e400
 800dfa0:	20045294 	.word	0x20045294
 800dfa4:	20045298 	.word	0x20045298
 800dfa8:	e000ed20 	.word	0xe000ed20
 800dfac:	200000d4 	.word	0x200000d4
 800dfb0:	e000ef34 	.word	0xe000ef34

0800dfb4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfb4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dfb8:	2b0f      	cmp	r3, #15
 800dfba:	d910      	bls.n	800dfde <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dfbc:	4a12      	ldr	r2, [pc, #72]	; (800e008 <vPortValidateInterruptPriority+0x54>)
 800dfbe:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dfc0:	4a12      	ldr	r2, [pc, #72]	; (800e00c <vPortValidateInterruptPriority+0x58>)
 800dfc2:	7812      	ldrb	r2, [r2, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d90a      	bls.n	800dfde <vPortValidateInterruptPriority+0x2a>
 800dfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfcc:	b672      	cpsid	i
 800dfce:	f383 8811 	msr	BASEPRI, r3
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	f3bf 8f4f 	dsb	sy
 800dfda:	b662      	cpsie	i
 800dfdc:	e7fe      	b.n	800dfdc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfde:	4b0c      	ldr	r3, [pc, #48]	; (800e010 <vPortValidateInterruptPriority+0x5c>)
 800dfe0:	4a0c      	ldr	r2, [pc, #48]	; (800e014 <vPortValidateInterruptPriority+0x60>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6812      	ldr	r2, [r2, #0]
 800dfe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d90a      	bls.n	800e004 <vPortValidateInterruptPriority+0x50>
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	b672      	cpsid	i
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	b662      	cpsie	i
 800e002:	e7fe      	b.n	800e002 <vPortValidateInterruptPriority+0x4e>
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	e000e3f0 	.word	0xe000e3f0
 800e00c:	20045294 	.word	0x20045294
 800e010:	e000ed0c 	.word	0xe000ed0c
 800e014:	20045298 	.word	0x20045298

0800e018 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e018:	b510      	push	{r4, lr}
 800e01a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e01c:	f7ff fec2 	bl	800dda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e020:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e022:	f7ff fee5 	bl	800ddf0 <vPortExitCritical>

	return xReturn;
}
 800e026:	fab4 f084 	clz	r0, r4
 800e02a:	0940      	lsrs	r0, r0, #5
 800e02c:	bd10      	pop	{r4, pc}

0800e02e <prvCopyDataToQueue>:
{
 800e02e:	b570      	push	{r4, r5, r6, lr}
 800e030:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e032:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e034:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e036:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e038:	b942      	cbnz	r2, 800e04c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e03a:	6805      	ldr	r5, [r0, #0]
 800e03c:	b99d      	cbnz	r5, 800e066 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e03e:	6840      	ldr	r0, [r0, #4]
 800e040:	f001 f8c0 	bl	800f1c4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e044:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e046:	3601      	adds	r6, #1
 800e048:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e04c:	b96d      	cbnz	r5, 800e06a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e04e:	6880      	ldr	r0, [r0, #8]
 800e050:	f017 f9a5 	bl	802539e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e054:	68a3      	ldr	r3, [r4, #8]
 800e056:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e058:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e05a:	6862      	ldr	r2, [r4, #4]
 800e05c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e05e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e060:	d301      	bcc.n	800e066 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e066:	2000      	movs	r0, #0
 800e068:	e7ed      	b.n	800e046 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e06a:	68c0      	ldr	r0, [r0, #12]
 800e06c:	f017 f997 	bl	802539e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e072:	68e2      	ldr	r2, [r4, #12]
 800e074:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e076:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e078:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e07a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e07c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e07e:	bf3e      	ittt	cc
 800e080:	6862      	ldrcc	r2, [r4, #4]
 800e082:	189b      	addcc	r3, r3, r2
 800e084:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e086:	2d02      	cmp	r5, #2
 800e088:	d1ed      	bne.n	800e066 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e08a:	b10e      	cbz	r6, 800e090 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800e08c:	3e01      	subs	r6, #1
 800e08e:	e7ea      	b.n	800e066 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800e090:	4630      	mov	r0, r6
 800e092:	e7d8      	b.n	800e046 <prvCopyDataToQueue+0x18>

0800e094 <prvCopyDataFromQueue>:
{
 800e094:	4603      	mov	r3, r0
 800e096:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800e09a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e09c:	b162      	cbz	r2, 800e0b8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e09e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0a0:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e0a2:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0a4:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e0a6:	60d9      	str	r1, [r3, #12]
}
 800e0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e0ac:	bf24      	itt	cs
 800e0ae:	6819      	ldrcs	r1, [r3, #0]
 800e0b0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e0b2:	68d9      	ldr	r1, [r3, #12]
 800e0b4:	f017 b973 	b.w	802539e <memcpy>
}
 800e0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <prvUnlockQueue>:
{
 800e0be:	b570      	push	{r4, r5, r6, lr}
 800e0c0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e0c2:	f7ff fe6f 	bl	800dda4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e0c6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e0ce:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	dc14      	bgt.n	800e0fe <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e0d4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0d6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e0da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800e0de:	f7ff fe87 	bl	800ddf0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e0e2:	f7ff fe5f 	bl	800dda4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e0e6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800e0ea:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e0ec:	2d00      	cmp	r5, #0
 800e0ee:	dc12      	bgt.n	800e116 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e0f0:	23ff      	movs	r3, #255	; 0xff
 800e0f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800e0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e0fa:	f7ff be79 	b.w	800ddf0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	2b00      	cmp	r3, #0
 800e102:	d0e7      	beq.n	800e0d4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e104:	4630      	mov	r0, r6
 800e106:	f000 ff5d 	bl	800efc4 <xTaskRemoveFromEventList>
 800e10a:	b108      	cbz	r0, 800e110 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e10c:	f000 ffea 	bl	800f0e4 <vTaskMissedYield>
 800e110:	3d01      	subs	r5, #1
 800e112:	b26d      	sxtb	r5, r5
 800e114:	e7dc      	b.n	800e0d0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e116:	6923      	ldr	r3, [r4, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0e9      	beq.n	800e0f0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e11c:	4630      	mov	r0, r6
 800e11e:	f000 ff51 	bl	800efc4 <xTaskRemoveFromEventList>
 800e122:	b108      	cbz	r0, 800e128 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e124:	f000 ffde 	bl	800f0e4 <vTaskMissedYield>
 800e128:	3d01      	subs	r5, #1
 800e12a:	b26d      	sxtb	r5, r5
 800e12c:	e7de      	b.n	800e0ec <prvUnlockQueue+0x2e>
	...

0800e130 <xQueueGenericReset>:
{
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e134:	4604      	mov	r4, r0
 800e136:	b950      	cbnz	r0, 800e14e <xQueueGenericReset+0x1e>
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	b672      	cpsid	i
 800e13e:	f383 8811 	msr	BASEPRI, r3
 800e142:	f3bf 8f6f 	isb	sy
 800e146:	f3bf 8f4f 	dsb	sy
 800e14a:	b662      	cpsie	i
 800e14c:	e7fe      	b.n	800e14c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800e14e:	f7ff fe29 	bl	800dda4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e152:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e15a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e15c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e15e:	1a1b      	subs	r3, r3, r0
 800e160:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e162:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e164:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e166:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e168:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e16a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e16c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e170:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800e174:	b995      	cbnz	r5, 800e19c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e176:	6923      	ldr	r3, [r4, #16]
 800e178:	b163      	cbz	r3, 800e194 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e17a:	f104 0010 	add.w	r0, r4, #16
 800e17e:	f000 ff21 	bl	800efc4 <xTaskRemoveFromEventList>
 800e182:	b138      	cbz	r0, 800e194 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e188:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <xQueueGenericReset+0x80>)
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e194:	f7ff fe2c 	bl	800ddf0 <vPortExitCritical>
}
 800e198:	2001      	movs	r0, #1
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e19c:	f104 0010 	add.w	r0, r4, #16
 800e1a0:	f7ff fd58 	bl	800dc54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e1a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e1a8:	f7ff fd54 	bl	800dc54 <vListInitialise>
 800e1ac:	e7f2      	b.n	800e194 <xQueueGenericReset+0x64>
 800e1ae:	bf00      	nop
 800e1b0:	e000ed04 	.word	0xe000ed04

0800e1b4 <xQueueGenericCreate>:
	{
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	b950      	cbnz	r0, 800e1d2 <xQueueGenericCreate+0x1e>
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	b672      	cpsid	i
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	b662      	cpsie	i
 800e1d0:	e7fe      	b.n	800e1d0 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1d2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e1d4:	3048      	adds	r0, #72	; 0x48
 800e1d6:	f7ff fc6d 	bl	800dab4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e1da:	4604      	mov	r4, r0
 800e1dc:	b138      	cbz	r0, 800e1ee <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1de:	b945      	cbnz	r5, 800e1f2 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e1e0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800e1e2:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1e4:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800e1e6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f7ff ffa1 	bl	800e130 <xQueueGenericReset>
	}
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e1f2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1f6:	6003      	str	r3, [r0, #0]
 800e1f8:	e7f3      	b.n	800e1e2 <xQueueGenericCreate+0x2e>

0800e1fa <xQueueCreateCountingSemaphore>:
	{
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e1fe:	b950      	cbnz	r0, 800e216 <xQueueCreateCountingSemaphore+0x1c>
 800e200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e204:	b672      	cpsid	i
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	b662      	cpsie	i
 800e214:	e7fe      	b.n	800e214 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e216:	4288      	cmp	r0, r1
 800e218:	d20a      	bcs.n	800e230 <xQueueCreateCountingSemaphore+0x36>
 800e21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21e:	b672      	cpsid	i
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	b662      	cpsie	i
 800e22e:	e7fe      	b.n	800e22e <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e230:	2202      	movs	r2, #2
 800e232:	2100      	movs	r1, #0
 800e234:	f7ff ffbe 	bl	800e1b4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e238:	b100      	cbz	r0, 800e23c <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e23a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e23c:	bd10      	pop	{r4, pc}
	...

0800e240 <xQueueGenericSend>:
{
 800e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	4689      	mov	r9, r1
 800e246:	9201      	str	r2, [sp, #4]
 800e248:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e24a:	4604      	mov	r4, r0
 800e24c:	b950      	cbnz	r0, 800e264 <xQueueGenericSend+0x24>
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	b672      	cpsid	i
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	b662      	cpsie	i
 800e262:	e7fe      	b.n	800e262 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e264:	2900      	cmp	r1, #0
 800e266:	f040 808c 	bne.w	800e382 <xQueueGenericSend+0x142>
 800e26a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 8088 	beq.w	800e382 <xQueueGenericSend+0x142>
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	b672      	cpsid	i
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	b662      	cpsie	i
 800e286:	e7fe      	b.n	800e286 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e288:	9e01      	ldr	r6, [sp, #4]
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	f000 8084 	beq.w	800e398 <xQueueGenericSend+0x158>
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	b672      	cpsid	i
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	b662      	cpsie	i
 800e2a4:	e7fe      	b.n	800e2a4 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2a6:	9d01      	ldr	r5, [sp, #4]
 800e2a8:	b91d      	cbnz	r5, 800e2b2 <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 800e2aa:	f7ff fda1 	bl	800ddf0 <vPortExitCritical>
			return errQUEUE_FULL;
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	e058      	b.n	800e364 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 800e2b2:	b916      	cbnz	r6, 800e2ba <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2b4:	a802      	add	r0, sp, #8
 800e2b6:	f000 fec9 	bl	800f04c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e2ba:	f7ff fd99 	bl	800ddf0 <vPortExitCritical>
		vTaskSuspendAll();
 800e2be:	f000 fcc7 	bl	800ec50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2c2:	f7ff fd6f 	bl	800dda4 <vPortEnterCritical>
 800e2c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e2ca:	2bff      	cmp	r3, #255	; 0xff
 800e2cc:	d101      	bne.n	800e2d2 <xQueueGenericSend+0x92>
 800e2ce:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800e2d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e2d6:	2bff      	cmp	r3, #255	; 0xff
 800e2d8:	d101      	bne.n	800e2de <xQueueGenericSend+0x9e>
 800e2da:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800e2de:	f7ff fd87 	bl	800ddf0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2e2:	a901      	add	r1, sp, #4
 800e2e4:	a802      	add	r0, sp, #8
 800e2e6:	f000 febd 	bl	800f064 <xTaskCheckForTimeOut>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d143      	bne.n	800e376 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2ee:	f7ff fd59 	bl	800dda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e2f2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e2f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e2f6:	f7ff fd7b 	bl	800ddf0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2fa:	42ae      	cmp	r6, r5
 800e2fc:	d135      	bne.n	800e36a <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e2fe:	9901      	ldr	r1, [sp, #4]
 800e300:	f104 0010 	add.w	r0, r4, #16
 800e304:	f000 fe42 	bl	800ef8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff fed8 	bl	800e0be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e30e:	f000 fd49 	bl	800eda4 <xTaskResumeAll>
 800e312:	b938      	cbnz	r0, 800e324 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800e314:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e318:	f8ca 3000 	str.w	r3, [sl]
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e326:	f7ff fd3d 	bl	800dda4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e32a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e32c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e32e:	429a      	cmp	r2, r3
 800e330:	d301      	bcc.n	800e336 <xQueueGenericSend+0xf6>
 800e332:	2f02      	cmp	r7, #2
 800e334:	d1b7      	bne.n	800e2a6 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e336:	463a      	mov	r2, r7
 800e338:	4649      	mov	r1, r9
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff fe77 	bl	800e02e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e342:	b11b      	cbz	r3, 800e34c <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e344:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e348:	f000 fe3c 	bl	800efc4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800e34c:	b138      	cbz	r0, 800e35e <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 800e34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e352:	4b19      	ldr	r3, [pc, #100]	; (800e3b8 <xQueueGenericSend+0x178>)
 800e354:	601a      	str	r2, [r3, #0]
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e35e:	f7ff fd47 	bl	800ddf0 <vPortExitCritical>
				return pdPASS;
 800e362:	2001      	movs	r0, #1
}
 800e364:	b004      	add	sp, #16
 800e366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7ff fea7 	bl	800e0be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e370:	f000 fd18 	bl	800eda4 <xTaskResumeAll>
 800e374:	e7d6      	b.n	800e324 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800e376:	4620      	mov	r0, r4
 800e378:	f7ff fea1 	bl	800e0be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e37c:	f000 fd12 	bl	800eda4 <xTaskResumeAll>
 800e380:	e795      	b.n	800e2ae <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e382:	2f02      	cmp	r7, #2
 800e384:	d102      	bne.n	800e38c <xQueueGenericSend+0x14c>
 800e386:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d10a      	bne.n	800e3a2 <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e38c:	f000 feb6 	bl	800f0fc <xTaskGetSchedulerState>
 800e390:	2800      	cmp	r0, #0
 800e392:	f43f af79 	beq.w	800e288 <xQueueGenericSend+0x48>
 800e396:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e398:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800e39c:	f8df a018 	ldr.w	sl, [pc, #24]	; 800e3b8 <xQueueGenericSend+0x178>
 800e3a0:	e7c1      	b.n	800e326 <xQueueGenericSend+0xe6>
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	b672      	cpsid	i
 800e3a8:	f383 8811 	msr	BASEPRI, r3
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	b662      	cpsie	i
 800e3b6:	e7fe      	b.n	800e3b6 <xQueueGenericSend+0x176>
 800e3b8:	e000ed04 	.word	0xe000ed04

0800e3bc <xQueueCreateMutex>:
	{
 800e3bc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e3be:	4602      	mov	r2, r0
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	f7ff fef6 	bl	800e1b4 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	b138      	cbz	r0, 800e3dc <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e3d0:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e3d2:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e3d4:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800e3d6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e3d8:	f7ff ff32 	bl	800e240 <xQueueGenericSend>
	}
 800e3dc:	4620      	mov	r0, r4
 800e3de:	bd10      	pop	{r4, pc}

0800e3e0 <xQueueGenericSendFromISR>:
{
 800e3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e4:	4688      	mov	r8, r1
 800e3e6:	4691      	mov	r9, r2
 800e3e8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	b950      	cbnz	r0, 800e404 <xQueueGenericSendFromISR+0x24>
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	b672      	cpsid	i
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	b662      	cpsie	i
 800e402:	e7fe      	b.n	800e402 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e404:	bb19      	cbnz	r1, 800e44e <xQueueGenericSendFromISR+0x6e>
 800e406:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e408:	b30b      	cbz	r3, 800e44e <xQueueGenericSendFromISR+0x6e>
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	b672      	cpsid	i
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	b662      	cpsie	i
 800e41e:	e7fe      	b.n	800e41e <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e420:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e424:	f000 fdce 	bl	800efc4 <xTaskRemoveFromEventList>
 800e428:	2800      	cmp	r0, #0
 800e42a:	d036      	beq.n	800e49a <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 800e42c:	f1b9 0f00 	cmp.w	r9, #0
 800e430:	d033      	beq.n	800e49a <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e432:	2001      	movs	r0, #1
 800e434:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800e438:	f386 8811 	msr	BASEPRI, r6
}
 800e43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e440:	3501      	adds	r5, #1
 800e442:	b26d      	sxtb	r5, r5
 800e444:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800e448:	e027      	b.n	800e49a <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800e44a:	2000      	movs	r0, #0
 800e44c:	e7f4      	b.n	800e438 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e44e:	2f02      	cmp	r7, #2
 800e450:	d102      	bne.n	800e458 <xQueueGenericSendFromISR+0x78>
 800e452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e454:	2b01      	cmp	r3, #1
 800e456:	d122      	bne.n	800e49e <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e458:	f7ff fdac 	bl	800dfb4 <vPortValidateInterruptPriority>
	__asm volatile
 800e45c:	f3ef 8611 	mrs	r6, BASEPRI
 800e460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e464:	b672      	cpsid	i
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e474:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e476:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e478:	429a      	cmp	r2, r3
 800e47a:	d301      	bcc.n	800e480 <xQueueGenericSendFromISR+0xa0>
 800e47c:	2f02      	cmp	r7, #2
 800e47e:	d1e4      	bne.n	800e44a <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e480:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e484:	463a      	mov	r2, r7
 800e486:	4641      	mov	r1, r8
 800e488:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800e48a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e48c:	f7ff fdcf 	bl	800e02e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800e490:	1c6b      	adds	r3, r5, #1
 800e492:	d1d5      	bne.n	800e440 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1c2      	bne.n	800e420 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 800e49a:	2001      	movs	r0, #1
 800e49c:	e7cc      	b.n	800e438 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	b672      	cpsid	i
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	b662      	cpsie	i
 800e4b2:	e7fe      	b.n	800e4b2 <xQueueGenericSendFromISR+0xd2>

0800e4b4 <xQueueGiveFromISR>:
{
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	b950      	cbnz	r0, 800e4d2 <xQueueGiveFromISR+0x1e>
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	b672      	cpsid	i
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	b662      	cpsie	i
 800e4d0:	e7fe      	b.n	800e4d0 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e4d4:	b153      	cbz	r3, 800e4ec <xQueueGiveFromISR+0x38>
 800e4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4da:	b672      	cpsid	i
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	b662      	cpsie	i
 800e4ea:	e7fe      	b.n	800e4ea <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800e4ec:	6803      	ldr	r3, [r0, #0]
 800e4ee:	b913      	cbnz	r3, 800e4f6 <xQueueGiveFromISR+0x42>
 800e4f0:	6843      	ldr	r3, [r0, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d130      	bne.n	800e558 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4f6:	f7ff fd5d 	bl	800dfb4 <vPortValidateInterruptPriority>
	__asm volatile
 800e4fa:	f3ef 8611 	mrs	r6, BASEPRI
 800e4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e502:	b672      	cpsid	i
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e512:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e514:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e516:	429a      	cmp	r2, r3
 800e518:	d301      	bcc.n	800e51e <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 800e51a:	2000      	movs	r0, #0
 800e51c:	e014      	b.n	800e548 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e51e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e522:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800e524:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e526:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	d110      	bne.n	800e54e <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e52e:	b90b      	cbnz	r3, 800e534 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800e530:	2001      	movs	r0, #1
 800e532:	e009      	b.n	800e548 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e534:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e538:	f000 fd44 	bl	800efc4 <xTaskRemoveFromEventList>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d0f7      	beq.n	800e530 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e540:	2d00      	cmp	r5, #0
 800e542:	d0f5      	beq.n	800e530 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e544:	2001      	movs	r0, #1
 800e546:	6028      	str	r0, [r5, #0]
	__asm volatile
 800e548:	f386 8811 	msr	BASEPRI, r6
}
 800e54c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e54e:	3301      	adds	r3, #1
 800e550:	b25b      	sxtb	r3, r3
 800e552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e556:	e7eb      	b.n	800e530 <xQueueGiveFromISR+0x7c>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	b672      	cpsid	i
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	b662      	cpsie	i
 800e56c:	e7fe      	b.n	800e56c <xQueueGiveFromISR+0xb8>
	...

0800e570 <xQueueReceive>:
{
 800e570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e574:	b085      	sub	sp, #20
 800e576:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 800e578:	4604      	mov	r4, r0
{
 800e57a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e57c:	b950      	cbnz	r0, 800e594 <xQueueReceive+0x24>
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	b672      	cpsid	i
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	b662      	cpsie	i
 800e592:	e7fe      	b.n	800e592 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e594:	2900      	cmp	r1, #0
 800e596:	f040 808a 	bne.w	800e6ae <xQueueReceive+0x13e>
 800e59a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 8086 	beq.w	800e6ae <xQueueReceive+0x13e>
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	b672      	cpsid	i
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	b662      	cpsie	i
 800e5b6:	e7fe      	b.n	800e5b6 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5b8:	9e01      	ldr	r6, [sp, #4]
 800e5ba:	2e00      	cmp	r6, #0
 800e5bc:	d07c      	beq.n	800e6b8 <xQueueReceive+0x148>
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	b672      	cpsid	i
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	b662      	cpsie	i
 800e5d2:	e7fe      	b.n	800e5d2 <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5d4:	9d01      	ldr	r5, [sp, #4]
 800e5d6:	b91d      	cbnz	r5, 800e5e0 <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 800e5d8:	f7ff fc0a 	bl	800ddf0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e052      	b.n	800e686 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800e5e0:	b916      	cbnz	r6, 800e5e8 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5e2:	a802      	add	r0, sp, #8
 800e5e4:	f000 fd32 	bl	800f04c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e5e8:	f7ff fc02 	bl	800ddf0 <vPortExitCritical>
		vTaskSuspendAll();
 800e5ec:	f000 fb30 	bl	800ec50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5f0:	f7ff fbd8 	bl	800dda4 <vPortEnterCritical>
 800e5f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e5f8:	2bff      	cmp	r3, #255	; 0xff
 800e5fa:	d101      	bne.n	800e600 <xQueueReceive+0x90>
 800e5fc:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e600:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e604:	2bff      	cmp	r3, #255	; 0xff
 800e606:	d101      	bne.n	800e60c <xQueueReceive+0x9c>
 800e608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e60c:	f7ff fbf0 	bl	800ddf0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e610:	a901      	add	r1, sp, #4
 800e612:	a802      	add	r0, sp, #8
 800e614:	f000 fd26 	bl	800f064 <xTaskCheckForTimeOut>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d13d      	bne.n	800e698 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e61c:	4620      	mov	r0, r4
 800e61e:	f7ff fcfb 	bl	800e018 <prvIsQueueEmpty>
 800e622:	b398      	cbz	r0, 800e68c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e624:	9901      	ldr	r1, [sp, #4]
 800e626:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e62a:	f000 fcaf 	bl	800ef8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e62e:	4620      	mov	r0, r4
 800e630:	f7ff fd45 	bl	800e0be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e634:	f000 fbb6 	bl	800eda4 <xTaskResumeAll>
 800e638:	b938      	cbnz	r0, 800e64a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800e63a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e63e:	f8c9 3000 	str.w	r3, [r9]
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800e64c:	f7ff fbaa 	bl	800dda4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e650:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e652:	2d00      	cmp	r5, #0
 800e654:	d0be      	beq.n	800e5d4 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e656:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e658:	4641      	mov	r1, r8
 800e65a:	4620      	mov	r0, r4
 800e65c:	f7ff fd1a 	bl	800e094 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e660:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	b163      	cbz	r3, 800e680 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e666:	f104 0010 	add.w	r0, r4, #16
 800e66a:	f000 fcab 	bl	800efc4 <xTaskRemoveFromEventList>
 800e66e:	b138      	cbz	r0, 800e680 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800e670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e674:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <xQueueReceive+0x150>)
 800e676:	601a      	str	r2, [r3, #0]
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e680:	f7ff fbb6 	bl	800ddf0 <vPortExitCritical>
				return pdPASS;
 800e684:	2001      	movs	r0, #1
}
 800e686:	b005      	add	sp, #20
 800e688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800e68c:	4620      	mov	r0, r4
 800e68e:	f7ff fd16 	bl	800e0be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e692:	f000 fb87 	bl	800eda4 <xTaskResumeAll>
 800e696:	e7d8      	b.n	800e64a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800e698:	4620      	mov	r0, r4
 800e69a:	f7ff fd10 	bl	800e0be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e69e:	f000 fb81 	bl	800eda4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f7ff fcb8 	bl	800e018 <prvIsQueueEmpty>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d0ce      	beq.n	800e64a <xQueueReceive+0xda>
 800e6ac:	e796      	b.n	800e5dc <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6ae:	f000 fd25 	bl	800f0fc <xTaskGetSchedulerState>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d080      	beq.n	800e5b8 <xQueueReceive+0x48>
 800e6b6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e6b8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800e6ba:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800e6c0 <xQueueReceive+0x150>
 800e6be:	e7c5      	b.n	800e64c <xQueueReceive+0xdc>
 800e6c0:	e000ed04 	.word	0xe000ed04

0800e6c4 <xQueueSemaphoreTake>:
{
 800e6c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800e6c8:	4604      	mov	r4, r0
{
 800e6ca:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e6cc:	b950      	cbnz	r0, 800e6e4 <xQueueSemaphoreTake+0x20>
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	b672      	cpsid	i
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	b662      	cpsie	i
 800e6e2:	e7fe      	b.n	800e6e2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e6e4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800e6e6:	b155      	cbz	r5, 800e6fe <xQueueSemaphoreTake+0x3a>
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	b672      	cpsid	i
 800e6ee:	f383 8811 	msr	BASEPRI, r3
 800e6f2:	f3bf 8f6f 	isb	sy
 800e6f6:	f3bf 8f4f 	dsb	sy
 800e6fa:	b662      	cpsie	i
 800e6fc:	e7fe      	b.n	800e6fc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6fe:	f000 fcfd 	bl	800f0fc <xTaskGetSchedulerState>
 800e702:	b918      	cbnz	r0, 800e70c <xQueueSemaphoreTake+0x48>
 800e704:	9d01      	ldr	r5, [sp, #4]
 800e706:	2d00      	cmp	r5, #0
 800e708:	f040 8097 	bne.w	800e83a <xQueueSemaphoreTake+0x176>
 800e70c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e70e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800e710:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800e850 <xQueueSemaphoreTake+0x18c>
		taskENTER_CRITICAL();
 800e714:	f7ff fb46 	bl	800dda4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e718:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e71a:	b1e3      	cbz	r3, 800e756 <xQueueSemaphoreTake+0x92>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e71c:	3b01      	subs	r3, #1
 800e71e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	b913      	cbnz	r3, 800e72a <xQueueSemaphoreTake+0x66>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e724:	f000 fdfe 	bl	800f324 <pvTaskIncrementMutexHeldCount>
 800e728:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e72a:	6923      	ldr	r3, [r4, #16]
 800e72c:	b163      	cbz	r3, 800e748 <xQueueSemaphoreTake+0x84>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e72e:	f104 0010 	add.w	r0, r4, #16
 800e732:	f000 fc47 	bl	800efc4 <xTaskRemoveFromEventList>
 800e736:	b138      	cbz	r0, 800e748 <xQueueSemaphoreTake+0x84>
						queueYIELD_IF_USING_PREEMPTION();
 800e738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73c:	4b44      	ldr	r3, [pc, #272]	; (800e850 <xQueueSemaphoreTake+0x18c>)
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	f3bf 8f4f 	dsb	sy
 800e744:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800e748:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800e74a:	f7ff fb51 	bl	800ddf0 <vPortExitCritical>
}
 800e74e:	4628      	mov	r0, r5
 800e750:	b004      	add	sp, #16
 800e752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	b973      	cbnz	r3, 800e778 <xQueueSemaphoreTake+0xb4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e75a:	b155      	cbz	r5, 800e772 <xQueueSemaphoreTake+0xae>
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	b672      	cpsid	i
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	b662      	cpsie	i
 800e770:	e7fe      	b.n	800e770 <xQueueSemaphoreTake+0xac>
					taskEXIT_CRITICAL();
 800e772:	f7ff fb3d 	bl	800ddf0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e776:	e7ea      	b.n	800e74e <xQueueSemaphoreTake+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800e778:	b916      	cbnz	r6, 800e780 <xQueueSemaphoreTake+0xbc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e77a:	a802      	add	r0, sp, #8
 800e77c:	f000 fc66 	bl	800f04c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e780:	f7ff fb36 	bl	800ddf0 <vPortExitCritical>
		vTaskSuspendAll();
 800e784:	f000 fa64 	bl	800ec50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e788:	f7ff fb0c 	bl	800dda4 <vPortEnterCritical>
 800e78c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e790:	2bff      	cmp	r3, #255	; 0xff
 800e792:	d101      	bne.n	800e798 <xQueueSemaphoreTake+0xd4>
 800e794:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800e798:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e79c:	2bff      	cmp	r3, #255	; 0xff
 800e79e:	d101      	bne.n	800e7a4 <xQueueSemaphoreTake+0xe0>
 800e7a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e7a4:	f7ff fb24 	bl	800ddf0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7a8:	a901      	add	r1, sp, #4
 800e7aa:	a802      	add	r0, sp, #8
 800e7ac:	f000 fc5a 	bl	800f064 <xTaskCheckForTimeOut>
 800e7b0:	bb40      	cbnz	r0, 800e804 <xQueueSemaphoreTake+0x140>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7ff fc30 	bl	800e018 <prvIsQueueEmpty>
 800e7b8:	b1f0      	cbz	r0, 800e7f8 <xQueueSemaphoreTake+0x134>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	b93b      	cbnz	r3, 800e7ce <xQueueSemaphoreTake+0x10a>
						taskENTER_CRITICAL();
 800e7be:	f7ff faf1 	bl	800dda4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e7c2:	6860      	ldr	r0, [r4, #4]
 800e7c4:	f000 fcaa 	bl	800f11c <xTaskPriorityInherit>
 800e7c8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e7ca:	f7ff fb11 	bl	800ddf0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7ce:	9901      	ldr	r1, [sp, #4]
 800e7d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e7d4:	f000 fbda 	bl	800ef8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f7ff fc70 	bl	800e0be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7de:	f000 fae1 	bl	800eda4 <xTaskResumeAll>
 800e7e2:	b938      	cbnz	r0, 800e7f4 <xQueueSemaphoreTake+0x130>
					portYIELD_WITHIN_API();
 800e7e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7e8:	f8c8 3000 	str.w	r3, [r8]
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	2601      	movs	r6, #1
 800e7f6:	e78d      	b.n	800e714 <xQueueSemaphoreTake+0x50>
				prvUnlockQueue( pxQueue );
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f7ff fc60 	bl	800e0be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7fe:	f000 fad1 	bl	800eda4 <xTaskResumeAll>
 800e802:	e7f7      	b.n	800e7f4 <xQueueSemaphoreTake+0x130>
			prvUnlockQueue( pxQueue );
 800e804:	4620      	mov	r0, r4
 800e806:	f7ff fc5a 	bl	800e0be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e80a:	f000 facb 	bl	800eda4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e80e:	4620      	mov	r0, r4
 800e810:	f7ff fc02 	bl	800e018 <prvIsQueueEmpty>
 800e814:	2800      	cmp	r0, #0
 800e816:	d0ed      	beq.n	800e7f4 <xQueueSemaphoreTake+0x130>
					if( xInheritanceOccurred != pdFALSE )
 800e818:	2d00      	cmp	r5, #0
 800e81a:	d098      	beq.n	800e74e <xQueueSemaphoreTake+0x8a>
						taskENTER_CRITICAL();
 800e81c:	f7ff fac2 	bl	800dda4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800e820:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e822:	b119      	cbz	r1, 800e82c <xQueueSemaphoreTake+0x168>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e824:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e826:	6819      	ldr	r1, [r3, #0]
 800e828:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e82c:	6860      	ldr	r0, [r4, #4]
				return errQUEUE_EMPTY;
 800e82e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800e830:	f000 fd1c 	bl	800f26c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e834:	f7ff fadc 	bl	800ddf0 <vPortExitCritical>
 800e838:	e789      	b.n	800e74e <xQueueSemaphoreTake+0x8a>
 800e83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83e:	b672      	cpsid	i
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	b662      	cpsie	i
 800e84e:	e7fe      	b.n	800e84e <xQueueSemaphoreTake+0x18a>
 800e850:	e000ed04 	.word	0xe000ed04

0800e854 <xQueueReceiveFromISR>:
{
 800e854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e858:	4689      	mov	r9, r1
 800e85a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e85c:	4605      	mov	r5, r0
 800e85e:	b950      	cbnz	r0, 800e876 <xQueueReceiveFromISR+0x22>
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	b672      	cpsid	i
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	b662      	cpsie	i
 800e874:	e7fe      	b.n	800e874 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e876:	bb81      	cbnz	r1, 800e8da <xQueueReceiveFromISR+0x86>
 800e878:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e87a:	b373      	cbz	r3, 800e8da <xQueueReceiveFromISR+0x86>
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	b672      	cpsid	i
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	b662      	cpsie	i
 800e890:	e7fe      	b.n	800e890 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e892:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e896:	4649      	mov	r1, r9
 800e898:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e89a:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e89c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e89e:	f7ff fbf9 	bl	800e094 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8a2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800e8a4:	1c73      	adds	r3, r6, #1
 800e8a6:	d113      	bne.n	800e8d0 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8a8:	692b      	ldr	r3, [r5, #16]
 800e8aa:	b90b      	cbnz	r3, 800e8b0 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 800e8ac:	2001      	movs	r0, #1
 800e8ae:	e00b      	b.n	800e8c8 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8b0:	f105 0010 	add.w	r0, r5, #16
 800e8b4:	f000 fb86 	bl	800efc4 <xTaskRemoveFromEventList>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d0f7      	beq.n	800e8ac <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 800e8bc:	f1b8 0f00 	cmp.w	r8, #0
 800e8c0:	d0f4      	beq.n	800e8ac <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e8c2:	2001      	movs	r0, #1
 800e8c4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800e8c8:	f387 8811 	msr	BASEPRI, r7
}
 800e8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e8d0:	3601      	adds	r6, #1
 800e8d2:	b276      	sxtb	r6, r6
 800e8d4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800e8d8:	e7e8      	b.n	800e8ac <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8da:	f7ff fb6b 	bl	800dfb4 <vPortValidateInterruptPriority>
	__asm volatile
 800e8de:	f3ef 8711 	mrs	r7, BASEPRI
 800e8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e6:	b672      	cpsid	i
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8f6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8f8:	2c00      	cmp	r4, #0
 800e8fa:	d1ca      	bne.n	800e892 <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	e7e3      	b.n	800e8c8 <xQueueReceiveFromISR+0x74>

0800e900 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e900:	4a06      	ldr	r2, [pc, #24]	; (800e91c <prvResetNextTaskUnblockTime+0x1c>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	6819      	ldr	r1, [r3, #0]
 800e906:	4b06      	ldr	r3, [pc, #24]	; (800e920 <prvResetNextTaskUnblockTime+0x20>)
 800e908:	b919      	cbnz	r1, 800e912 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e90a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e90e:	601a      	str	r2, [r3, #0]
 800e910:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e912:	6812      	ldr	r2, [r2, #0]
 800e914:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e916:	68d2      	ldr	r2, [r2, #12]
 800e918:	6852      	ldr	r2, [r2, #4]
 800e91a:	e7f8      	b.n	800e90e <prvResetNextTaskUnblockTime+0xe>
 800e91c:	200452a0 	.word	0x200452a0
 800e920:	20045378 	.word	0x20045378

0800e924 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e926:	4b1b      	ldr	r3, [pc, #108]	; (800e994 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800e928:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e92a:	4e1b      	ldr	r6, [pc, #108]	; (800e998 <prvAddCurrentTaskToDelayedList+0x74>)
{
 800e92c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e92e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e930:	6830      	ldr	r0, [r6, #0]
 800e932:	3004      	adds	r0, #4
 800e934:	f7ff f9bf 	bl	800dcb6 <uxListRemove>
 800e938:	4633      	mov	r3, r6
 800e93a:	b940      	cbnz	r0, 800e94e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800e93c:	6831      	ldr	r1, [r6, #0]
 800e93e:	2001      	movs	r0, #1
 800e940:	4e16      	ldr	r6, [pc, #88]	; (800e99c <prvAddCurrentTaskToDelayedList+0x78>)
 800e942:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e944:	6832      	ldr	r2, [r6, #0]
 800e946:	4088      	lsls	r0, r1
 800e948:	ea22 0200 	bic.w	r2, r2, r0
 800e94c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e94e:	1c62      	adds	r2, r4, #1
 800e950:	d107      	bne.n	800e962 <prvAddCurrentTaskToDelayedList+0x3e>
 800e952:	b137      	cbz	r7, 800e962 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e954:	6819      	ldr	r1, [r3, #0]
 800e956:	4812      	ldr	r0, [pc, #72]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0x7c>)
 800e958:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e95e:	f7ff b987 	b.w	800dc70 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e962:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e964:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800e966:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e968:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800e96a:	d907      	bls.n	800e97c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e96c:	4a0d      	ldr	r2, [pc, #52]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0x80>)
 800e96e:	6810      	ldr	r0, [r2, #0]
 800e970:	6819      	ldr	r1, [r3, #0]
}
 800e972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e976:	3104      	adds	r1, #4
 800e978:	f7ff b986 	b.w	800dc88 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e97c:	4a0a      	ldr	r2, [pc, #40]	; (800e9a8 <prvAddCurrentTaskToDelayedList+0x84>)
 800e97e:	6810      	ldr	r0, [r2, #0]
 800e980:	6819      	ldr	r1, [r3, #0]
 800e982:	3104      	adds	r1, #4
 800e984:	f7ff f980 	bl	800dc88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e988:	4b08      	ldr	r3, [pc, #32]	; (800e9ac <prvAddCurrentTaskToDelayedList+0x88>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	4294      	cmp	r4, r2
 800e98e:	d200      	bcs.n	800e992 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 800e990:	601c      	str	r4, [r3, #0]
 800e992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e994:	200453c0 	.word	0x200453c0
 800e998:	2004529c 	.word	0x2004529c
 800e99c:	20045348 	.word	0x20045348
 800e9a0:	20045398 	.word	0x20045398
 800e9a4:	200452a4 	.word	0x200452a4
 800e9a8:	200452a0 	.word	0x200452a0
 800e9ac:	20045378 	.word	0x20045378

0800e9b0 <prvIdleTask>:
{
 800e9b0:	b580      	push	{r7, lr}
				taskYIELD();
 800e9b2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800ea1c <prvIdleTask+0x6c>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e9b6:	4f15      	ldr	r7, [pc, #84]	; (800ea0c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9b8:	4c15      	ldr	r4, [pc, #84]	; (800ea10 <prvIdleTask+0x60>)
				--uxCurrentNumberOfTasks;
 800e9ba:	4e16      	ldr	r6, [pc, #88]	; (800ea14 <prvIdleTask+0x64>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	b973      	cbnz	r3, 800e9de <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9c0:	4b15      	ldr	r3, [pc, #84]	; (800ea18 <prvIdleTask+0x68>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d907      	bls.n	800e9d8 <prvIdleTask+0x28>
				taskYIELD();
 800e9c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e9cc:	f8c8 3000 	str.w	r3, [r8]
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e9d8:	f7f2 fd65 	bl	80014a6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e9dc:	e7ec      	b.n	800e9b8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800e9de:	f7ff f9e1 	bl	800dda4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9e6:	1d28      	adds	r0, r5, #4
 800e9e8:	f7ff f965 	bl	800dcb6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9ec:	6833      	ldr	r3, [r6, #0]
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e9f8:	f7ff f9fa 	bl	800ddf0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800e9fc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e9fe:	f7ff f8ed 	bl	800dbdc <vPortFree>
			vPortFree( pxTCB );
 800ea02:	4628      	mov	r0, r5
 800ea04:	f7ff f8ea 	bl	800dbdc <vPortFree>
 800ea08:	e7d8      	b.n	800e9bc <prvIdleTask+0xc>
 800ea0a:	bf00      	nop
 800ea0c:	200453ac 	.word	0x200453ac
 800ea10:	20045338 	.word	0x20045338
 800ea14:	20045334 	.word	0x20045334
 800ea18:	200452a8 	.word	0x200452a8
 800ea1c:	e000ed04 	.word	0xe000ed04

0800ea20 <xTaskCreate>:
	{
 800ea20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea24:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800ea28:	4680      	mov	r8, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2e:	4650      	mov	r0, sl
	{
 800ea30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea32:	f7ff f83f 	bl	800dab4 <pvPortMalloc>
			if( pxStack != NULL )
 800ea36:	4607      	mov	r7, r0
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	f000 809e 	beq.w	800eb7a <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ea3e:	2058      	movs	r0, #88	; 0x58
 800ea40:	f7ff f838 	bl	800dab4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ea44:	4604      	mov	r4, r0
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f000 8094 	beq.w	800eb74 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea4c:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 800ea4e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea50:	21a5      	movs	r1, #165	; 0xa5
 800ea52:	4638      	mov	r0, r7
 800ea54:	f016 fcc8 	bl	80253e8 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ea58:	f1aa 0a04 	sub.w	sl, sl, #4
 800ea5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ea5e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800ea62:	449a      	add	sl, r3
 800ea64:	1e6b      	subs	r3, r5, #1
 800ea66:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ea68:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ea6c:	7859      	ldrb	r1, [r3, #1]
 800ea6e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800ea72:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ea76:	b109      	cbz	r1, 800ea7c <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ea78:	42ab      	cmp	r3, r5
 800ea7a:	d1f7      	bne.n	800ea6c <xTaskCreate+0x4c>
 800ea7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea7e:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea82:	1d27      	adds	r7, r4, #4
 800ea84:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ea86:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea8a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800ea8c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800ea90:	bf28      	it	cs
 800ea92:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800ea94:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ea96:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea98:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea9c:	f7ff f8e5 	bl	800dc6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eaa0:	f104 0018 	add.w	r0, r4, #24
 800eaa4:	f7ff f8e1 	bl	800dc6a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800eaa8:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eaac:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eaae:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab0:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eab2:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eab4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eab6:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 800eab8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eabc:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eac0:	f7ff f94c 	bl	800dd5c <pxPortInitialiseStack>
 800eac4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800eac6:	b106      	cbz	r6, 800eaca <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eac8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800eaca:	f7ff f96b 	bl	800dda4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800eace:	4b32      	ldr	r3, [pc, #200]	; (800eb98 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 800ead0:	4e32      	ldr	r6, [pc, #200]	; (800eb9c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800ebc8 <xTaskCreate+0x1a8>
 800ead8:	3201      	adds	r2, #1
 800eada:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800eadc:	6835      	ldr	r5, [r6, #0]
 800eade:	2d00      	cmp	r5, #0
 800eae0:	d14e      	bne.n	800eb80 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 800eae2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d11d      	bne.n	800eb26 <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaea:	eb08 0005 	add.w	r0, r8, r5
 800eaee:	3514      	adds	r5, #20
 800eaf0:	f7ff f8b0 	bl	800dc54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaf4:	2d8c      	cmp	r5, #140	; 0x8c
 800eaf6:	d1f8      	bne.n	800eaea <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 800eaf8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800ebcc <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 800eafc:	4d28      	ldr	r5, [pc, #160]	; (800eba0 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 800eafe:	4648      	mov	r0, r9
 800eb00:	f7ff f8a8 	bl	800dc54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb04:	4628      	mov	r0, r5
 800eb06:	f7ff f8a5 	bl	800dc54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb0a:	4826      	ldr	r0, [pc, #152]	; (800eba4 <xTaskCreate+0x184>)
 800eb0c:	f7ff f8a2 	bl	800dc54 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800eb10:	4825      	ldr	r0, [pc, #148]	; (800eba8 <xTaskCreate+0x188>)
 800eb12:	f7ff f89f 	bl	800dc54 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800eb16:	4825      	ldr	r0, [pc, #148]	; (800ebac <xTaskCreate+0x18c>)
 800eb18:	f7ff f89c 	bl	800dc54 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb1c:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <xTaskCreate+0x190>)
 800eb1e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb22:	4b24      	ldr	r3, [pc, #144]	; (800ebb4 <xTaskCreate+0x194>)
 800eb24:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800eb26:	4a24      	ldr	r2, [pc, #144]	; (800ebb8 <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 800eb28:	2501      	movs	r5, #1
 800eb2a:	4924      	ldr	r1, [pc, #144]	; (800ebbc <xTaskCreate+0x19c>)
		uxTaskNumber++;
 800eb2c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800eb2e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800eb30:	3301      	adds	r3, #1
 800eb32:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800eb34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eb36:	fa05 f302 	lsl.w	r3, r5, r2
 800eb3a:	4303      	orrs	r3, r0
 800eb3c:	2014      	movs	r0, #20
 800eb3e:	600b      	str	r3, [r1, #0]
 800eb40:	4639      	mov	r1, r7
 800eb42:	fb00 8002 	mla	r0, r0, r2, r8
 800eb46:	f7ff f893 	bl	800dc70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800eb4a:	f7ff f951 	bl	800ddf0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800eb4e:	4b1c      	ldr	r3, [pc, #112]	; (800ebc0 <xTaskCreate+0x1a0>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	b163      	cbz	r3, 800eb6e <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d207      	bcs.n	800eb6e <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb62:	4b18      	ldr	r3, [pc, #96]	; (800ebc4 <xTaskCreate+0x1a4>)
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	f3bf 8f6f 	isb	sy
	}
 800eb6e:	4628      	mov	r0, r5
 800eb70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800eb74:	4638      	mov	r0, r7
 800eb76:	f7ff f831 	bl	800dbdc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb7a:	f04f 35ff 	mov.w	r5, #4294967295
 800eb7e:	e7f6      	b.n	800eb6e <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 800eb80:	4b0f      	ldr	r3, [pc, #60]	; (800ebc0 <xTaskCreate+0x1a0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1ce      	bne.n	800eb26 <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eb88:	6833      	ldr	r3, [r6, #0]
 800eb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d8c9      	bhi.n	800eb26 <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 800eb92:	6034      	str	r4, [r6, #0]
 800eb94:	e7c7      	b.n	800eb26 <xTaskCreate+0x106>
 800eb96:	bf00      	nop
 800eb98:	20045334 	.word	0x20045334
 800eb9c:	2004529c 	.word	0x2004529c
 800eba0:	20045360 	.word	0x20045360
 800eba4:	20045380 	.word	0x20045380
 800eba8:	200453ac 	.word	0x200453ac
 800ebac:	20045398 	.word	0x20045398
 800ebb0:	200452a0 	.word	0x200452a0
 800ebb4:	200452a4 	.word	0x200452a4
 800ebb8:	20045344 	.word	0x20045344
 800ebbc:	20045348 	.word	0x20045348
 800ebc0:	20045394 	.word	0x20045394
 800ebc4:	e000ed04 	.word	0xe000ed04
 800ebc8:	200452a8 	.word	0x200452a8
 800ebcc:	2004534c 	.word	0x2004534c

0800ebd0 <vTaskStartScheduler>:
{
 800ebd0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800ebd2:	4b19      	ldr	r3, [pc, #100]	; (800ec38 <vTaskStartScheduler+0x68>)
 800ebd4:	2400      	movs	r4, #0
 800ebd6:	2280      	movs	r2, #128	; 0x80
 800ebd8:	4918      	ldr	r1, [pc, #96]	; (800ec3c <vTaskStartScheduler+0x6c>)
 800ebda:	9301      	str	r3, [sp, #4]
 800ebdc:	4623      	mov	r3, r4
 800ebde:	9400      	str	r4, [sp, #0]
 800ebe0:	4817      	ldr	r0, [pc, #92]	; (800ec40 <vTaskStartScheduler+0x70>)
 800ebe2:	f7ff ff1d 	bl	800ea20 <xTaskCreate>
	if( xReturn == pdPASS )
 800ebe6:	2801      	cmp	r0, #1
 800ebe8:	d116      	bne.n	800ec18 <vTaskStartScheduler+0x48>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	b672      	cpsid	i
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ec02:	4b10      	ldr	r3, [pc, #64]	; (800ec44 <vTaskStartScheduler+0x74>)
 800ec04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec06:	4b10      	ldr	r3, [pc, #64]	; (800ec48 <vTaskStartScheduler+0x78>)
 800ec08:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ec0a:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <vTaskStartScheduler+0x7c>)
 800ec0c:	601c      	str	r4, [r3, #0]
}
 800ec0e:	b002      	add	sp, #8
 800ec10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800ec14:	f7ff b968 	b.w	800dee8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d10a      	bne.n	800ec32 <vTaskStartScheduler+0x62>
 800ec1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec20:	b672      	cpsid	i
 800ec22:	f383 8811 	msr	BASEPRI, r3
 800ec26:	f3bf 8f6f 	isb	sy
 800ec2a:	f3bf 8f4f 	dsb	sy
 800ec2e:	b662      	cpsie	i
 800ec30:	e7fe      	b.n	800ec30 <vTaskStartScheduler+0x60>
}
 800ec32:	b002      	add	sp, #8
 800ec34:	bd10      	pop	{r4, pc}
 800ec36:	bf00      	nop
 800ec38:	20045374 	.word	0x20045374
 800ec3c:	08035196 	.word	0x08035196
 800ec40:	0800e9b1 	.word	0x0800e9b1
 800ec44:	20045378 	.word	0x20045378
 800ec48:	20045394 	.word	0x20045394
 800ec4c:	200453c0 	.word	0x200453c0

0800ec50 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ec50:	4a02      	ldr	r2, [pc, #8]	; (800ec5c <vTaskSuspendAll+0xc>)
 800ec52:	6813      	ldr	r3, [r2, #0]
 800ec54:	3301      	adds	r3, #1
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop
 800ec5c:	20045340 	.word	0x20045340

0800ec60 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ec60:	4b01      	ldr	r3, [pc, #4]	; (800ec68 <xTaskGetTickCount+0x8>)
 800ec62:	6818      	ldr	r0, [r3, #0]
}
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	200453c0 	.word	0x200453c0

0800ec6c <xTaskGetTickCountFromISR>:
{
 800ec6c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec6e:	f7ff f9a1 	bl	800dfb4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800ec72:	4b01      	ldr	r3, [pc, #4]	; (800ec78 <xTaskGetTickCountFromISR+0xc>)
 800ec74:	6818      	ldr	r0, [r3, #0]
}
 800ec76:	bd08      	pop	{r3, pc}
 800ec78:	200453c0 	.word	0x200453c0

0800ec7c <xTaskIncrementTick>:
{
 800ec7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec80:	4b3d      	ldr	r3, [pc, #244]	; (800ed78 <xTaskIncrementTick+0xfc>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d155      	bne.n	800ed34 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec88:	4b3c      	ldr	r3, [pc, #240]	; (800ed7c <xTaskIncrementTick+0x100>)
 800ec8a:	681c      	ldr	r4, [r3, #0]
 800ec8c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800ec8e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec90:	b9cc      	cbnz	r4, 800ecc6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800ec92:	4b3b      	ldr	r3, [pc, #236]	; (800ed80 <xTaskIncrementTick+0x104>)
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	6812      	ldr	r2, [r2, #0]
 800ec98:	b152      	cbz	r2, 800ecb0 <xTaskIncrementTick+0x34>
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	b672      	cpsid	i
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	b662      	cpsie	i
 800ecae:	e7fe      	b.n	800ecae <xTaskIncrementTick+0x32>
 800ecb0:	4a34      	ldr	r2, [pc, #208]	; (800ed84 <xTaskIncrementTick+0x108>)
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	6810      	ldr	r0, [r2, #0]
 800ecb6:	6018      	str	r0, [r3, #0]
 800ecb8:	6011      	str	r1, [r2, #0]
 800ecba:	4a33      	ldr	r2, [pc, #204]	; (800ed88 <xTaskIncrementTick+0x10c>)
 800ecbc:	6813      	ldr	r3, [r2, #0]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	f7ff fe1d 	bl	800e900 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ecc6:	4d31      	ldr	r5, [pc, #196]	; (800ed8c <xTaskIncrementTick+0x110>)
 800ecc8:	f04f 0b00 	mov.w	fp, #0
 800eccc:	4f30      	ldr	r7, [pc, #192]	; (800ed90 <xTaskIncrementTick+0x114>)
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	429c      	cmp	r4, r3
 800ecd2:	d33e      	bcc.n	800ed52 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecd4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800ed80 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 800ecd8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800eda0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecdc:	f8d8 2000 	ldr.w	r2, [r8]
 800ece0:	6812      	ldr	r2, [r2, #0]
 800ece2:	bb72      	cbnz	r2, 800ed42 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295
 800ece8:	602a      	str	r2, [r5, #0]
					break;
 800ecea:	e032      	b.n	800ed52 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecec:	f106 0a04 	add.w	sl, r6, #4
 800ecf0:	4650      	mov	r0, sl
 800ecf2:	f7fe ffe0 	bl	800dcb6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecf6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800ecf8:	b119      	cbz	r1, 800ed02 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecfa:	f106 0018 	add.w	r0, r6, #24
 800ecfe:	f7fe ffda 	bl	800dcb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed02:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ed04:	2201      	movs	r2, #1
 800ed06:	f8d9 3000 	ldr.w	r3, [r9]
 800ed0a:	f04f 0e14 	mov.w	lr, #20
 800ed0e:	fa02 f100 	lsl.w	r1, r2, r0
 800ed12:	4319      	orrs	r1, r3
 800ed14:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <xTaskIncrementTick+0x118>)
 800ed16:	f8c9 1000 	str.w	r1, [r9]
 800ed1a:	4651      	mov	r1, sl
 800ed1c:	fb0e 3000 	mla	r0, lr, r0, r3
 800ed20:	f7fe ffa6 	bl	800dc70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed24:	6838      	ldr	r0, [r7, #0]
 800ed26:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ed28:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ed2a:	4291      	cmp	r1, r2
 800ed2c:	bf28      	it	cs
 800ed2e:	f04f 0b01 	movcs.w	fp, #1
 800ed32:	e7d3      	b.n	800ecdc <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800ed34:	4a18      	ldr	r2, [pc, #96]	; (800ed98 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ed36:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800ed3a:	6813      	ldr	r3, [r2, #0]
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	e011      	b.n	800ed66 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ed42:	f8d8 2000 	ldr.w	r2, [r8]
 800ed46:	68d2      	ldr	r2, [r2, #12]
 800ed48:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ed4a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800ed4c:	428c      	cmp	r4, r1
 800ed4e:	d2cd      	bcs.n	800ecec <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 800ed50:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	4b0f      	ldr	r3, [pc, #60]	; (800ed94 <xTaskIncrementTick+0x118>)
 800ed56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ed58:	2214      	movs	r2, #20
 800ed5a:	434a      	muls	r2, r1
 800ed5c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800ed5e:	2a02      	cmp	r2, #2
 800ed60:	bf28      	it	cs
 800ed62:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800ed66:	4a0d      	ldr	r2, [pc, #52]	; (800ed9c <xTaskIncrementTick+0x120>)
 800ed68:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800ed6a:	2a00      	cmp	r2, #0
 800ed6c:	bf18      	it	ne
 800ed6e:	f04f 0b01 	movne.w	fp, #1
}
 800ed72:	4658      	mov	r0, fp
 800ed74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed78:	20045340 	.word	0x20045340
 800ed7c:	200453c0 	.word	0x200453c0
 800ed80:	200452a0 	.word	0x200452a0
 800ed84:	200452a4 	.word	0x200452a4
 800ed88:	2004537c 	.word	0x2004537c
 800ed8c:	20045378 	.word	0x20045378
 800ed90:	2004529c 	.word	0x2004529c
 800ed94:	200452a8 	.word	0x200452a8
 800ed98:	2004533c 	.word	0x2004533c
 800ed9c:	200453c4 	.word	0x200453c4
 800eda0:	20045348 	.word	0x20045348

0800eda4 <xTaskResumeAll>:
{
 800eda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800eda8:	4c32      	ldr	r4, [pc, #200]	; (800ee74 <xTaskResumeAll+0xd0>)
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	b953      	cbnz	r3, 800edc4 <xTaskResumeAll+0x20>
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	b672      	cpsid	i
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	b662      	cpsie	i
 800edc2:	e7fe      	b.n	800edc2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800edc4:	f7fe ffee 	bl	800dda4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800edc8:	6823      	ldr	r3, [r4, #0]
 800edca:	3b01      	subs	r3, #1
 800edcc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edce:	6824      	ldr	r4, [r4, #0]
 800edd0:	b12c      	cbz	r4, 800edde <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800edd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800edd4:	f7ff f80c 	bl	800ddf0 <vPortExitCritical>
}
 800edd8:	4620      	mov	r0, r4
 800edda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edde:	4b26      	ldr	r3, [pc, #152]	; (800ee78 <xTaskResumeAll+0xd4>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0f5      	beq.n	800edd2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ede6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800ee90 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800edea:	4f24      	ldr	r7, [pc, #144]	; (800ee7c <xTaskResumeAll+0xd8>)
 800edec:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ee94 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edf0:	f8d9 3000 	ldr.w	r3, [r9]
 800edf4:	b9e3      	cbnz	r3, 800ee30 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800edf6:	b10c      	cbz	r4, 800edfc <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800edf8:	f7ff fd82 	bl	800e900 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800edfc:	4d20      	ldr	r5, [pc, #128]	; (800ee80 <xTaskResumeAll+0xdc>)
 800edfe:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ee00:	b144      	cbz	r4, 800ee14 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800ee02:	4e20      	ldr	r6, [pc, #128]	; (800ee84 <xTaskResumeAll+0xe0>)
 800ee04:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800ee06:	f7ff ff39 	bl	800ec7c <xTaskIncrementTick>
 800ee0a:	b100      	cbz	r0, 800ee0e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800ee0c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ee0e:	3c01      	subs	r4, #1
 800ee10:	d1f9      	bne.n	800ee06 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800ee12:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ee14:	4b1b      	ldr	r3, [pc, #108]	; (800ee84 <xTaskResumeAll+0xe0>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d0da      	beq.n	800edd2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800ee1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee20:	4b19      	ldr	r3, [pc, #100]	; (800ee88 <xTaskResumeAll+0xe4>)
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ee2c:	2401      	movs	r4, #1
 800ee2e:	e7d1      	b.n	800edd4 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ee30:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800ee34:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ee36:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee38:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee3a:	f104 0018 	add.w	r0, r4, #24
 800ee3e:	f7fe ff3a 	bl	800dcb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7fe ff37 	bl	800dcb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	2014      	movs	r0, #20
 800ee4e:	fa05 f302 	lsl.w	r3, r5, r2
 800ee52:	fb00 8002 	mla	r0, r0, r2, r8
 800ee56:	430b      	orrs	r3, r1
 800ee58:	4631      	mov	r1, r6
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	f7fe ff08 	bl	800dc70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee60:	4b0a      	ldr	r3, [pc, #40]	; (800ee8c <xTaskResumeAll+0xe8>)
 800ee62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d3c1      	bcc.n	800edf0 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <xTaskResumeAll+0xe0>)
 800ee6e:	601d      	str	r5, [r3, #0]
 800ee70:	e7be      	b.n	800edf0 <xTaskResumeAll+0x4c>
 800ee72:	bf00      	nop
 800ee74:	20045340 	.word	0x20045340
 800ee78:	20045334 	.word	0x20045334
 800ee7c:	20045348 	.word	0x20045348
 800ee80:	2004533c 	.word	0x2004533c
 800ee84:	200453c4 	.word	0x200453c4
 800ee88:	e000ed04 	.word	0xe000ed04
 800ee8c:	2004529c 	.word	0x2004529c
 800ee90:	20045380 	.word	0x20045380
 800ee94:	200452a8 	.word	0x200452a8

0800ee98 <vTaskDelay>:
	{
 800ee98:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ee9a:	b940      	cbnz	r0, 800eeae <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800ee9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea0:	4b0e      	ldr	r3, [pc, #56]	; (800eedc <vTaskDelay+0x44>)
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800eeae:	4b0c      	ldr	r3, [pc, #48]	; (800eee0 <vTaskDelay+0x48>)
 800eeb0:	6819      	ldr	r1, [r3, #0]
 800eeb2:	b151      	cbz	r1, 800eeca <vTaskDelay+0x32>
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	b672      	cpsid	i
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	b662      	cpsie	i
 800eec8:	e7fe      	b.n	800eec8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800eeca:	f7ff fec1 	bl	800ec50 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eece:	f7ff fd29 	bl	800e924 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800eed2:	f7ff ff67 	bl	800eda4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d0e0      	beq.n	800ee9c <vTaskDelay+0x4>
 800eeda:	bd08      	pop	{r3, pc}
 800eedc:	e000ed04 	.word	0xe000ed04
 800eee0:	20045340 	.word	0x20045340

0800eee4 <vTaskSwitchContext>:
{
 800eee4:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eee6:	4b24      	ldr	r3, [pc, #144]	; (800ef78 <vTaskSwitchContext+0x94>)
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	4b24      	ldr	r3, [pc, #144]	; (800ef7c <vTaskSwitchContext+0x98>)
 800eeec:	b112      	cbz	r2, 800eef4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800eeee:	2201      	movs	r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800eef4:	4c22      	ldr	r4, [pc, #136]	; (800ef80 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800eef6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ef02:	d10b      	bne.n	800ef1c <vTaskSwitchContext+0x38>
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ef0a:	d107      	bne.n	800ef1c <vTaskSwitchContext+0x38>
 800ef0c:	689a      	ldr	r2, [r3, #8]
 800ef0e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800ef12:	d103      	bne.n	800ef1c <vTaskSwitchContext+0x38>
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800ef1a:	d004      	beq.n	800ef26 <vTaskSwitchContext+0x42>
 800ef1c:	6820      	ldr	r0, [r4, #0]
 800ef1e:	6821      	ldr	r1, [r4, #0]
 800ef20:	3134      	adds	r1, #52	; 0x34
 800ef22:	f7f2 fac1 	bl	80014a8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ef26:	4b17      	ldr	r3, [pc, #92]	; (800ef84 <vTaskSwitchContext+0xa0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ef2a:	fab3 f383 	clz	r3, r3
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2214      	movs	r2, #20
 800ef32:	4915      	ldr	r1, [pc, #84]	; (800ef88 <vTaskSwitchContext+0xa4>)
 800ef34:	f1c3 031f 	rsb	r3, r3, #31
 800ef38:	435a      	muls	r2, r3
 800ef3a:	588d      	ldr	r5, [r1, r2]
 800ef3c:	1888      	adds	r0, r1, r2
 800ef3e:	b955      	cbnz	r5, 800ef56 <vTaskSwitchContext+0x72>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	b672      	cpsid	i
 800ef46:	f383 8811 	msr	BASEPRI, r3
 800ef4a:	f3bf 8f6f 	isb	sy
 800ef4e:	f3bf 8f4f 	dsb	sy
 800ef52:	b662      	cpsie	i
 800ef54:	e7fe      	b.n	800ef54 <vTaskSwitchContext+0x70>
 800ef56:	6845      	ldr	r5, [r0, #4]
 800ef58:	3208      	adds	r2, #8
 800ef5a:	686d      	ldr	r5, [r5, #4]
 800ef5c:	440a      	add	r2, r1
 800ef5e:	4295      	cmp	r5, r2
 800ef60:	6045      	str	r5, [r0, #4]
 800ef62:	bf04      	itt	eq
 800ef64:	686a      	ldreq	r2, [r5, #4]
 800ef66:	6042      	streq	r2, [r0, #4]
 800ef68:	2214      	movs	r2, #20
 800ef6a:	fb02 1303 	mla	r3, r2, r3, r1
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	6023      	str	r3, [r4, #0]
 800ef74:	bd38      	pop	{r3, r4, r5, pc}
 800ef76:	bf00      	nop
 800ef78:	20045340 	.word	0x20045340
 800ef7c:	200453c4 	.word	0x200453c4
 800ef80:	2004529c 	.word	0x2004529c
 800ef84:	20045348 	.word	0x20045348
 800ef88:	200452a8 	.word	0x200452a8

0800ef8c <vTaskPlaceOnEventList>:
{
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ef90:	b950      	cbnz	r0, 800efa8 <vTaskPlaceOnEventList+0x1c>
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	b672      	cpsid	i
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	b662      	cpsie	i
 800efa6:	e7fe      	b.n	800efa6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800efa8:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <vTaskPlaceOnEventList+0x34>)
 800efaa:	6819      	ldr	r1, [r3, #0]
 800efac:	3118      	adds	r1, #24
 800efae:	f7fe fe6b 	bl	800dc88 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efb2:	4620      	mov	r0, r4
 800efb4:	2101      	movs	r1, #1
}
 800efb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efba:	f7ff bcb3 	b.w	800e924 <prvAddCurrentTaskToDelayedList>
 800efbe:	bf00      	nop
 800efc0:	2004529c 	.word	0x2004529c

0800efc4 <xTaskRemoveFromEventList>:
{
 800efc4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800efc6:	68c3      	ldr	r3, [r0, #12]
 800efc8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800efca:	b954      	cbnz	r4, 800efe2 <xTaskRemoveFromEventList+0x1e>
 800efcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd0:	b672      	cpsid	i
 800efd2:	f383 8811 	msr	BASEPRI, r3
 800efd6:	f3bf 8f6f 	isb	sy
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	b662      	cpsie	i
 800efe0:	e7fe      	b.n	800efe0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800efe2:	f104 0518 	add.w	r5, r4, #24
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7fe fe65 	bl	800dcb6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efec:	4b11      	ldr	r3, [pc, #68]	; (800f034 <xTaskRemoveFromEventList+0x70>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	b9db      	cbnz	r3, 800f02a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eff2:	1d25      	adds	r5, r4, #4
 800eff4:	4628      	mov	r0, r5
 800eff6:	f7fe fe5e 	bl	800dcb6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800effa:	490f      	ldr	r1, [pc, #60]	; (800f038 <xTaskRemoveFromEventList+0x74>)
 800effc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800effe:	2301      	movs	r3, #1
 800f000:	6808      	ldr	r0, [r1, #0]
 800f002:	4093      	lsls	r3, r2
 800f004:	4303      	orrs	r3, r0
 800f006:	2014      	movs	r0, #20
 800f008:	600b      	str	r3, [r1, #0]
 800f00a:	4629      	mov	r1, r5
 800f00c:	4b0b      	ldr	r3, [pc, #44]	; (800f03c <xTaskRemoveFromEventList+0x78>)
 800f00e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f012:	f7fe fe2d 	bl	800dc70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f016:	4b0a      	ldr	r3, [pc, #40]	; (800f040 <xTaskRemoveFromEventList+0x7c>)
 800f018:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f01e:	429a      	cmp	r2, r3
 800f020:	d906      	bls.n	800f030 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800f022:	2001      	movs	r0, #1
 800f024:	4b07      	ldr	r3, [pc, #28]	; (800f044 <xTaskRemoveFromEventList+0x80>)
 800f026:	6018      	str	r0, [r3, #0]
 800f028:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f02a:	4629      	mov	r1, r5
 800f02c:	4806      	ldr	r0, [pc, #24]	; (800f048 <xTaskRemoveFromEventList+0x84>)
 800f02e:	e7f0      	b.n	800f012 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800f030:	2000      	movs	r0, #0
}
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	20045340 	.word	0x20045340
 800f038:	20045348 	.word	0x20045348
 800f03c:	200452a8 	.word	0x200452a8
 800f040:	2004529c 	.word	0x2004529c
 800f044:	200453c4 	.word	0x200453c4
 800f048:	20045380 	.word	0x20045380

0800f04c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f04c:	4b03      	ldr	r3, [pc, #12]	; (800f05c <vTaskInternalSetTimeOutState+0x10>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f052:	4b03      	ldr	r3, [pc, #12]	; (800f060 <vTaskInternalSetTimeOutState+0x14>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	6043      	str	r3, [r0, #4]
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	2004537c 	.word	0x2004537c
 800f060:	200453c0 	.word	0x200453c0

0800f064 <xTaskCheckForTimeOut>:
{
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800f068:	4605      	mov	r5, r0
 800f06a:	b950      	cbnz	r0, 800f082 <xTaskCheckForTimeOut+0x1e>
 800f06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f070:	b672      	cpsid	i
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	b662      	cpsie	i
 800f080:	e7fe      	b.n	800f080 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800f082:	b951      	cbnz	r1, 800f09a <xTaskCheckForTimeOut+0x36>
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	b672      	cpsid	i
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	b662      	cpsie	i
 800f098:	e7fe      	b.n	800f098 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800f09a:	f7fe fe83 	bl	800dda4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f09e:	4b0f      	ldr	r3, [pc, #60]	; (800f0dc <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f0a0:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800f0a2:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	1c58      	adds	r0, r3, #1
 800f0a8:	d00e      	beq.n	800f0c8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0aa:	480d      	ldr	r0, [pc, #52]	; (800f0e0 <xTaskCheckForTimeOut+0x7c>)
 800f0ac:	682e      	ldr	r6, [r5, #0]
 800f0ae:	6800      	ldr	r0, [r0, #0]
 800f0b0:	4286      	cmp	r6, r0
 800f0b2:	d001      	beq.n	800f0b8 <xTaskCheckForTimeOut+0x54>
 800f0b4:	428a      	cmp	r2, r1
 800f0b6:	d20e      	bcs.n	800f0d6 <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f0b8:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d209      	bcs.n	800f0d2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800f0be:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f0c0:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800f0c2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f0c4:	f7ff ffc2 	bl	800f04c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800f0c8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f0ca:	f7fe fe91 	bl	800ddf0 <vPortExitCritical>
}
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f0d6:	2401      	movs	r4, #1
 800f0d8:	e7f7      	b.n	800f0ca <xTaskCheckForTimeOut+0x66>
 800f0da:	bf00      	nop
 800f0dc:	200453c0 	.word	0x200453c0
 800f0e0:	2004537c 	.word	0x2004537c

0800f0e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	4b01      	ldr	r3, [pc, #4]	; (800f0ec <vTaskMissedYield+0x8>)
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	4770      	bx	lr
 800f0ec:	200453c4 	.word	0x200453c4

0800f0f0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f0f0:	4b01      	ldr	r3, [pc, #4]	; (800f0f8 <xTaskGetCurrentTaskHandle+0x8>)
 800f0f2:	6818      	ldr	r0, [r3, #0]
	}
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	2004529c 	.word	0x2004529c

0800f0fc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f0fc:	4b05      	ldr	r3, [pc, #20]	; (800f114 <xTaskGetSchedulerState+0x18>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	b133      	cbz	r3, 800f110 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f102:	4b05      	ldr	r3, [pc, #20]	; (800f118 <xTaskGetSchedulerState+0x1c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800f108:	bf0c      	ite	eq
 800f10a:	2002      	moveq	r0, #2
 800f10c:	2000      	movne	r0, #0
 800f10e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f110:	2001      	movs	r0, #1
	}
 800f112:	4770      	bx	lr
 800f114:	20045394 	.word	0x20045394
 800f118:	20045340 	.word	0x20045340

0800f11c <xTaskPriorityInherit>:
	{
 800f11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800f120:	4604      	mov	r4, r0
 800f122:	2800      	cmp	r0, #0
 800f124:	d041      	beq.n	800f1aa <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f126:	4a24      	ldr	r2, [pc, #144]	; (800f1b8 <xTaskPriorityInherit+0x9c>)
 800f128:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f12a:	6811      	ldr	r1, [r2, #0]
 800f12c:	4617      	mov	r7, r2
 800f12e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800f130:	428b      	cmp	r3, r1
 800f132:	d231      	bcs.n	800f198 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f134:	6982      	ldr	r2, [r0, #24]
 800f136:	2a00      	cmp	r2, #0
 800f138:	db04      	blt.n	800f144 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f13e:	f1c2 0207 	rsb	r2, r2, #7
 800f142:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f144:	4d1d      	ldr	r5, [pc, #116]	; (800f1bc <xTaskPriorityInherit+0xa0>)
 800f146:	2614      	movs	r6, #20
 800f148:	6962      	ldr	r2, [r4, #20]
 800f14a:	fb06 5303 	mla	r3, r6, r3, r5
 800f14e:	429a      	cmp	r2, r3
 800f150:	d12d      	bne.n	800f1ae <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f152:	f104 0804 	add.w	r8, r4, #4
 800f156:	4640      	mov	r0, r8
 800f158:	f7fe fdad 	bl	800dcb6 <uxListRemove>
 800f15c:	4b18      	ldr	r3, [pc, #96]	; (800f1c0 <xTaskPriorityInherit+0xa4>)
 800f15e:	b948      	cbnz	r0, 800f174 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f160:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f162:	4346      	muls	r6, r0
 800f164:	59aa      	ldr	r2, [r5, r6]
 800f166:	b92a      	cbnz	r2, 800f174 <xTaskPriorityInherit+0x58>
 800f168:	2101      	movs	r1, #1
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	4081      	lsls	r1, r0
 800f16e:	ea22 0201 	bic.w	r2, r2, r1
 800f172:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f174:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f176:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f178:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f17a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f17c:	2401      	movs	r4, #1
 800f17e:	fa04 f002 	lsl.w	r0, r4, r2
 800f182:	4308      	orrs	r0, r1
 800f184:	4641      	mov	r1, r8
 800f186:	6018      	str	r0, [r3, #0]
 800f188:	2014      	movs	r0, #20
 800f18a:	fb00 5002 	mla	r0, r0, r2, r5
 800f18e:	f7fe fd6f 	bl	800dc70 <vListInsertEnd>
				xReturn = pdTRUE;
 800f192:	2001      	movs	r0, #1
	}
 800f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f198:	6813      	ldr	r3, [r2, #0]
 800f19a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800f19c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f19e:	42a0      	cmp	r0, r4
 800f1a0:	bf2c      	ite	cs
 800f1a2:	2000      	movcs	r0, #0
 800f1a4:	2001      	movcc	r0, #1
 800f1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 800f1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1b4:	e7ed      	b.n	800f192 <xTaskPriorityInherit+0x76>
 800f1b6:	bf00      	nop
 800f1b8:	2004529c 	.word	0x2004529c
 800f1bc:	200452a8 	.word	0x200452a8
 800f1c0:	20045348 	.word	0x20045348

0800f1c4 <xTaskPriorityDisinherit>:
	{
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	b908      	cbnz	r0, 800f1ce <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800f1ce:	4b24      	ldr	r3, [pc, #144]	; (800f260 <xTaskPriorityDisinherit+0x9c>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4298      	cmp	r0, r3
 800f1d4:	d00a      	beq.n	800f1ec <xTaskPriorityDisinherit+0x28>
 800f1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1da:	b672      	cpsid	i
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	b662      	cpsie	i
 800f1ea:	e7fe      	b.n	800f1ea <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800f1ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800f1ee:	b953      	cbnz	r3, 800f206 <xTaskPriorityDisinherit+0x42>
 800f1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f4:	b672      	cpsid	i
 800f1f6:	f383 8811 	msr	BASEPRI, r3
 800f1fa:	f3bf 8f6f 	isb	sy
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	b662      	cpsie	i
 800f204:	e7fe      	b.n	800f204 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f206:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800f208:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f20a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800f20c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f20e:	4291      	cmp	r1, r2
 800f210:	d0db      	beq.n	800f1ca <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1d9      	bne.n	800f1ca <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f216:	1d05      	adds	r5, r0, #4
 800f218:	4e12      	ldr	r6, [pc, #72]	; (800f264 <xTaskPriorityDisinherit+0xa0>)
 800f21a:	4628      	mov	r0, r5
 800f21c:	f7fe fd4b 	bl	800dcb6 <uxListRemove>
 800f220:	4a11      	ldr	r2, [pc, #68]	; (800f268 <xTaskPriorityDisinherit+0xa4>)
 800f222:	b950      	cbnz	r0, 800f23a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f224:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800f226:	2114      	movs	r1, #20
 800f228:	4379      	muls	r1, r7
 800f22a:	5873      	ldr	r3, [r6, r1]
 800f22c:	b92b      	cbnz	r3, 800f23a <xTaskPriorityDisinherit+0x76>
 800f22e:	2001      	movs	r0, #1
 800f230:	6813      	ldr	r3, [r2, #0]
 800f232:	40b8      	lsls	r0, r7
 800f234:	ea23 0300 	bic.w	r3, r3, r0
 800f238:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f23a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f23c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f240:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f242:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f244:	2401      	movs	r4, #1
 800f246:	6811      	ldr	r1, [r2, #0]
 800f248:	fa04 f003 	lsl.w	r0, r4, r3
 800f24c:	4308      	orrs	r0, r1
 800f24e:	4629      	mov	r1, r5
 800f250:	6010      	str	r0, [r2, #0]
 800f252:	2014      	movs	r0, #20
 800f254:	fb00 6003 	mla	r0, r0, r3, r6
 800f258:	f7fe fd0a 	bl	800dc70 <vListInsertEnd>
					xReturn = pdTRUE;
 800f25c:	4620      	mov	r0, r4
	}
 800f25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f260:	2004529c 	.word	0x2004529c
 800f264:	200452a8 	.word	0x200452a8
 800f268:	20045348 	.word	0x20045348

0800f26c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f26e:	4604      	mov	r4, r0
 800f270:	2800      	cmp	r0, #0
 800f272:	d04f      	beq.n	800f314 <vTaskPriorityDisinheritAfterTimeout+0xa8>
			configASSERT( pxTCB->uxMutexesHeld );
 800f274:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f276:	b952      	cbnz	r2, 800f28e <vTaskPriorityDisinheritAfterTimeout+0x22>
 800f278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f27c:	b672      	cpsid	i
 800f27e:	f383 8811 	msr	BASEPRI, r3
 800f282:	f3bf 8f6f 	isb	sy
 800f286:	f3bf 8f4f 	dsb	sy
 800f28a:	b662      	cpsie	i
 800f28c:	e7fe      	b.n	800f28c <vTaskPriorityDisinheritAfterTimeout+0x20>
 800f28e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f290:	4299      	cmp	r1, r3
 800f292:	bf38      	it	cc
 800f294:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f296:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f298:	428b      	cmp	r3, r1
 800f29a:	d03b      	beq.n	800f314 <vTaskPriorityDisinheritAfterTimeout+0xa8>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f29c:	2a01      	cmp	r2, #1
 800f29e:	d139      	bne.n	800f314 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					configASSERT( pxTCB != pxCurrentTCB );
 800f2a0:	4a1d      	ldr	r2, [pc, #116]	; (800f318 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800f2a2:	6812      	ldr	r2, [r2, #0]
 800f2a4:	4290      	cmp	r0, r2
 800f2a6:	d10a      	bne.n	800f2be <vTaskPriorityDisinheritAfterTimeout+0x52>
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	b672      	cpsid	i
 800f2ae:	f383 8811 	msr	BASEPRI, r3
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	f3bf 8f4f 	dsb	sy
 800f2ba:	b662      	cpsie	i
 800f2bc:	e7fe      	b.n	800f2bc <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2be:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2c0:	2614      	movs	r6, #20
 800f2c2:	4d16      	ldr	r5, [pc, #88]	; (800f31c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2c4:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800f2c6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2c8:	fb06 5303 	mla	r3, r6, r3, r5
 800f2cc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ce:	bfa4      	itt	ge
 800f2d0:	f1c1 0107 	rsbge	r1, r1, #7
 800f2d4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d11c      	bne.n	800f314 <vTaskPriorityDisinheritAfterTimeout+0xa8>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2da:	1d07      	adds	r7, r0, #4
 800f2dc:	4638      	mov	r0, r7
 800f2de:	f7fe fcea 	bl	800dcb6 <uxListRemove>
 800f2e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f2e4:	4c0e      	ldr	r4, [pc, #56]	; (800f320 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 800f2e6:	b940      	cbnz	r0, 800f2fa <vTaskPriorityDisinheritAfterTimeout+0x8e>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f2e8:	4356      	muls	r6, r2
 800f2ea:	59ab      	ldr	r3, [r5, r6]
 800f2ec:	b92b      	cbnz	r3, 800f2fa <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	4091      	lsls	r1, r2
 800f2f4:	ea23 0301 	bic.w	r3, r3, r1
 800f2f8:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	6821      	ldr	r1, [r4, #0]
 800f2fe:	2014      	movs	r0, #20
 800f300:	4093      	lsls	r3, r2
 800f302:	fb00 5002 	mla	r0, r0, r2, r5
 800f306:	430b      	orrs	r3, r1
 800f308:	4639      	mov	r1, r7
 800f30a:	6023      	str	r3, [r4, #0]
	}
 800f30c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800f310:	f7fe bcae 	b.w	800dc70 <vListInsertEnd>
 800f314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f316:	bf00      	nop
 800f318:	2004529c 	.word	0x2004529c
 800f31c:	200452a8 	.word	0x200452a8
 800f320:	20045348 	.word	0x20045348

0800f324 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800f324:	4b04      	ldr	r3, [pc, #16]	; (800f338 <pvTaskIncrementMutexHeldCount+0x14>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	b11a      	cbz	r2, 800f332 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800f32a:	6819      	ldr	r1, [r3, #0]
 800f32c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800f32e:	3201      	adds	r2, #1
 800f330:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800f332:	6818      	ldr	r0, [r3, #0]
	}
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	2004529c 	.word	0x2004529c

0800f33c <GUI_X_GetTime>:
1 ms.
*/

int GUI_X_GetTime(void)
{
  return ((int) osKernelSysTick());
 800f33c:	f7fe baa2 	b.w	800d884 <osKernelSysTick>

0800f340 <GUI_X_Delay>:
}

void GUI_X_Delay(int ms)
{
  osDelay( ms );
 800f340:	f7fe bac1 	b.w	800d8c6 <osDelay>

0800f344 <GUI_X_Init>:
 800f344:	4770      	bx	lr
	...

0800f348 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 800f348:	b513      	push	{r0, r1, r4, lr}
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 800f34a:	2400      	movs	r4, #0
 800f34c:	a802      	add	r0, sp, #8
 800f34e:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800f352:	f7fe fac0 	bl	800d8d6 <osMutexCreate>
 800f356:	4b06      	ldr	r3, [pc, #24]	; (800f370 <GUI_X_InitOS+0x28>)
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800f358:	2101      	movs	r1, #1
  osMutex = osMutexCreate(osMutex(MUTEX));
 800f35a:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(SEM);
 800f35c:	a802      	add	r0, sp, #8
 800f35e:	f840 4d04 	str.w	r4, [r0, #-4]!
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800f362:	f7fe fae1 	bl	800d928 <osSemaphoreCreate>
 800f366:	4b03      	ldr	r3, [pc, #12]	; (800f374 <GUI_X_InitOS+0x2c>)
 800f368:	6018      	str	r0, [r3, #0]
}
 800f36a:	b002      	add	sp, #8
 800f36c:	bd10      	pop	{r4, pc}
 800f36e:	bf00      	nop
 800f370:	200453c8 	.word	0x200453c8
 800f374:	200453cc 	.word	0x200453cc

0800f378 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
  osMutexRelease(osMutex);
 800f378:	4b01      	ldr	r3, [pc, #4]	; (800f380 <GUI_X_Unlock+0x8>)
 800f37a:	6818      	ldr	r0, [r3, #0]
 800f37c:	f7fe bb0e 	b.w	800d99c <osMutexRelease>
 800f380:	200453c8 	.word	0x200453c8

0800f384 <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
  osMutexWait(osMutex , osWaitForever) ;
 800f384:	4b02      	ldr	r3, [pc, #8]	; (800f390 <GUI_X_Lock+0xc>)
 800f386:	f04f 31ff 	mov.w	r1, #4294967295
 800f38a:	6818      	ldr	r0, [r3, #0]
 800f38c:	f7fe baa6 	b.w	800d8dc <osMutexWait>
 800f390:	200453c8 	.word	0x200453c8

0800f394 <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
  return ((U32) osThreadGetId());
 800f394:	f7fe ba95 	b.w	800d8c2 <osThreadGetId>

0800f398 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 800f398:	2000      	movs	r0, #0
 800f39a:	4770      	bx	lr

0800f39c <USBH_CDC_InterfaceDeInit>:
{
 800f39c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f39e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800f3a2:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f3a4:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800f3a6:	7821      	ldrb	r1, [r4, #0]
 800f3a8:	b139      	cbz	r1, 800f3ba <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f3aa:	f000 fed3 	bl	8010154 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800f3ae:	7821      	ldrb	r1, [r4, #0]
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f000 feeb 	bl	801018c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 800f3ba:	7b21      	ldrb	r1, [r4, #12]
 800f3bc:	b141      	cbz	r1, 800f3d0 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f000 fec8 	bl	8010154 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800f3c4:	7b21      	ldrb	r1, [r4, #12]
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	f000 fee0 	bl	801018c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 800f3d0:	7b61      	ldrb	r1, [r4, #13]
 800f3d2:	b141      	cbz	r1, 800f3e6 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f000 febd 	bl	8010154 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800f3da:	7b61      	ldrb	r1, [r4, #13]
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f000 fed5 	bl	801018c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800f3e6:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f3ea:	69d8      	ldr	r0, [r3, #28]
 800f3ec:	b128      	cbz	r0, 800f3fa <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 800f3ee:	f015 ffbf 	bl	8025370 <free>
    phost->pActiveClass->pData = 0U;
 800f3f2:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	61da      	str	r2, [r3, #28]
}
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	bd38      	pop	{r3, r4, r5, pc}

0800f3fe <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost,
 800f3fe:	2202      	movs	r2, #2
 800f400:	2301      	movs	r3, #1
{
 800f402:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 800f404:	4611      	mov	r1, r2
{
 800f406:	b085      	sub	sp, #20
 800f408:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800f40a:	f000 f9e5 	bl	800f7d8 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 800f40e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 800f410:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 800f412:	d102      	bne.n	800f41a <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800f414:	2002      	movs	r0, #2
}
 800f416:	b005      	add	sp, #20
 800f418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800f41a:	4601      	mov	r1, r0
 800f41c:	4628      	mov	r0, r5
 800f41e:	f000 f9d2 	bl	800f7c6 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800f422:	2050      	movs	r0, #80	; 0x50
 800f424:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 800f428:	f015 ff9a 	bl	8025360 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f42c:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800f42e:	4604      	mov	r4, r0
 800f430:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f432:	fb03 5606 	mla	r6, r3, r6, r5
 800f436:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800f43a:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f43c:	bf44      	itt	mi
 800f43e:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f440:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f444:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f446:	bf48      	it	mi
 800f448:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 fe87 	bl	801015e <USBH_AllocPipe>
 800f450:	4601      	mov	r1, r0
 800f452:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 800f454:	8960      	ldrh	r0, [r4, #10]
 800f456:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f45a:	9002      	str	r0, [sp, #8]
 800f45c:	2003      	movs	r0, #3
 800f45e:	7862      	ldrb	r2, [r4, #1]
 800f460:	9001      	str	r0, [sp, #4]
 800f462:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f466:	9000      	str	r0, [sp, #0]
 800f468:	4628      	mov	r0, r5
 800f46a:	f000 fe64 	bl	8010136 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f46e:	2200      	movs	r2, #0
 800f470:	7821      	ldrb	r1, [r4, #0]
 800f472:	4628      	mov	r0, r5
 800f474:	f7f5 fc25 	bl	8004cc2 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800f478:	2300      	movs	r3, #0
 800f47a:	210a      	movs	r1, #10
 800f47c:	4628      	mov	r0, r5
 800f47e:	461a      	mov	r2, r3
 800f480:	f000 f9aa 	bl	800f7d8 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800f484:	28ff      	cmp	r0, #255	; 0xff
 800f486:	d0c5      	beq.n	800f414 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f488:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 800f48a:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f48c:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f490:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f494:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f498:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f49c:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f4a0:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f4a4:	bf0d      	iteet	eq
 800f4a6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f4a8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f4aa:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f4ac:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f4ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4b2:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f4b6:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f4b8:	bf08      	it	eq
 800f4ba:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f4bc:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f4be:	bf1a      	itte	ne
 800f4c0:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f4c2:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f4c4:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f4c6:	f000 fe4a 	bl	801015e <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f4ca:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f4cc:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f000 fe45 	bl	801015e <USBH_AllocPipe>
 800f4d4:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 800f4d6:	8b20      	ldrh	r0, [r4, #24]
 800f4d8:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f4dc:	9002      	str	r0, [sp, #8]
 800f4de:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f4e2:	7ba2      	ldrb	r2, [r4, #14]
 800f4e4:	7b61      	ldrb	r1, [r4, #13]
 800f4e6:	9601      	str	r6, [sp, #4]
 800f4e8:	9000      	str	r0, [sp, #0]
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f000 fe23 	bl	8010136 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 800f4f0:	8b60      	ldrh	r0, [r4, #26]
 800f4f2:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 800f4f4:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800f4f6:	9002      	str	r0, [sp, #8]
 800f4f8:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800f4fc:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800f500:	7be2      	ldrb	r2, [r4, #15]
 800f502:	7b21      	ldrb	r1, [r4, #12]
 800f504:	9000      	str	r0, [sp, #0]
 800f506:	4628      	mov	r0, r5
 800f508:	f000 fe15 	bl	8010136 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f50c:	4632      	mov	r2, r6
 800f50e:	7b61      	ldrb	r1, [r4, #13]
 800f510:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 800f512:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f516:	f7f5 fbd4 	bl	8004cc2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800f51a:	4632      	mov	r2, r6
 800f51c:	7b21      	ldrb	r1, [r4, #12]
 800f51e:	4628      	mov	r0, r5
 800f520:	f7f5 fbcf 	bl	8004cc2 <USBH_LL_SetToggle>
      status = USBH_OK;
 800f524:	4630      	mov	r0, r6
 800f526:	e776      	b.n	800f416 <USBH_CDC_InterfaceInit+0x18>

0800f528 <USBH_CDC_ClassRequest>:
{
 800f528:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f52a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f52e:	2207      	movs	r2, #7
{
 800f530:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f532:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f534:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f536:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f538:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f53a:	2321      	movs	r3, #33	; 0x21

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f53c:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f53e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f540:	2300      	movs	r3, #0
 800f542:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f544:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f546:	f000 fb6a 	bl	800fc1e <USBH_CtlReq>
  if(status == USBH_OK)
 800f54a:	4605      	mov	r5, r0
 800f54c:	b920      	cbnz	r0, 800f558 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f54e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800f552:	2102      	movs	r1, #2
 800f554:	4620      	mov	r0, r4
 800f556:	4798      	blx	r3
}
 800f558:	4628      	mov	r0, r5
 800f55a:	bd38      	pop	{r3, r4, r5, pc}

0800f55c <USBH_CDC_TransmitCallback>:
 800f55c:	4770      	bx	lr

0800f55e <USBH_CDC_ReceiveCallback>:
 800f55e:	4770      	bx	lr

0800f560 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f560:	4770      	bx	lr

0800f562 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f562:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800f566:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f568:	69dc      	ldr	r4, [r3, #28]
{
 800f56a:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800f56c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800f570:	2b04      	cmp	r3, #4
 800f572:	d817      	bhi.n	800f5a4 <USBH_CDC_Process+0x42>
 800f574:	e8df f003 	tbb	[pc, r3]
 800f578:	42180603 	.word	0x42180603
 800f57c:	ba          	.byte	0xba
 800f57d:	00          	.byte	0x00
    status = USBH_OK;
 800f57e:	2000      	movs	r0, #0
}
 800f580:	b003      	add	sp, #12
 800f582:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f584:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f586:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f588:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f58a:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f58c:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f58e:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f590:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f592:	2300      	movs	r3, #0
 800f594:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f596:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f598:	f000 fb41 	bl	800fc1e <USBH_CtlReq>
    if(req_status == USBH_OK)
 800f59c:	bb50      	cbnz	r0, 800f5f4 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f59e:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 800f5a0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 800f5a4:	2001      	movs	r0, #1
 800f5a6:	e7eb      	b.n	800f580 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f5a8:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f5aa:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f5ac:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f5b0:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f5b2:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f5b4:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f5b6:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f5bc:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f5be:	f000 fb2e 	bl	800fc1e <USBH_CtlReq>
    if(req_status == USBH_OK)
 800f5c2:	b9b8      	cbnz	r0, 800f5f4 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f5c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f5c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5c8:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE;
 800f5cc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f5d0:	685a      	ldr	r2, [r3, #4]
 800f5d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800f5d6:	4291      	cmp	r1, r2
 800f5d8:	d1e4      	bne.n	800f5a4 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f5da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5de:	795a      	ldrb	r2, [r3, #5]
 800f5e0:	4291      	cmp	r1, r2
 800f5e2:	d1df      	bne.n	800f5a4 <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f5e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d1db      	bne.n	800f5a4 <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f7ff ffb7 	bl	800f560 <USBH_CDC_LineCodingChanged>
 800f5f2:	e7d7      	b.n	800f5a4 <USBH_CDC_Process+0x42>
      if(req_status != USBH_BUSY)
 800f5f4:	2801      	cmp	r0, #1
 800f5f6:	d0d5      	beq.n	800f5a4 <USBH_CDC_Process+0x42>
        CDC_Handle->state = CDC_ERROR_STATE;
 800f5f8:	2304      	movs	r3, #4
 800f5fa:	e7d1      	b.n	800f5a0 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 800f5fc:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 800f600:	2901      	cmp	r1, #1
 800f602:	d02b      	beq.n	800f65c <USBH_CDC_Process+0xfa>
 800f604:	2902      	cmp	r1, #2
 800f606:	d038      	beq.n	800f67a <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800f608:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800f60c:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 800f60e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800f612:	2b03      	cmp	r3, #3
 800f614:	d059      	beq.n	800f6ca <USBH_CDC_Process+0x168>
 800f616:	2b04      	cmp	r3, #4
 800f618:	d1c4      	bne.n	800f5a4 <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f61a:	7b21      	ldrb	r1, [r4, #12]
 800f61c:	4628      	mov	r0, r5
 800f61e:	f7f5 fb3f 	bl	8004ca0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800f622:	2801      	cmp	r0, #1
 800f624:	d1be      	bne.n	800f5a4 <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f626:	7b21      	ldrb	r1, [r4, #12]
 800f628:	4628      	mov	r0, r5
 800f62a:	f7f5 faf5 	bl	8004c18 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f62e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f630:	4298      	cmp	r0, r3
 800f632:	d054      	beq.n	800f6de <USBH_CDC_Process+0x17c>
 800f634:	8b62      	ldrh	r2, [r4, #26]
 800f636:	4290      	cmp	r0, r2
 800f638:	d951      	bls.n	800f6de <USBH_CDC_Process+0x17c>
        CDC_Handle->RxDataLength -= length ;
 800f63a:	1a1b      	subs	r3, r3, r0
 800f63c:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800f63e:	6a23      	ldr	r3, [r4, #32]
 800f640:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f642:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 800f644:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f646:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f64a:	2104      	movs	r1, #4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f64c:	2200      	movs	r2, #0
 800f64e:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f652:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f656:	f7fe f9a7 	bl	800d9a8 <osMessagePut>
 800f65a:	e7a3      	b.n	800f5a4 <USBH_CDC_Process+0x42>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f65c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f65e:	8b22      	ldrh	r2, [r4, #24]
 800f660:	7b63      	ldrb	r3, [r4, #13]
 800f662:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800f664:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 800f666:	69e1      	ldr	r1, [r4, #28]
 800f668:	bf98      	it	ls
 800f66a:	b282      	uxthls	r2, r0
 800f66c:	4628      	mov	r0, r5
 800f66e:	f000 fd3a 	bl	80100e6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f672:	2302      	movs	r3, #2
 800f674:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800f678:	e7c6      	b.n	800f608 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f67a:	7b61      	ldrb	r1, [r4, #13]
 800f67c:	f7f5 fb10 	bl	8004ca0 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 800f680:	2801      	cmp	r0, #1
 800f682:	d11f      	bne.n	800f6c4 <USBH_CDC_Process+0x162>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f686:	8b22      	ldrh	r2, [r4, #24]
 800f688:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f68a:	bf89      	itett	hi
 800f68c:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800f68e:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f690:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f692:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 800f694:	bf92      	itee	ls
 800f696:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f698:	189b      	addhi	r3, r3, r2
 800f69a:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 800f69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f69e:	b11b      	cbz	r3, 800f6a8 <USBH_CDC_Process+0x146>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800f6a6:	e004      	b.n	800f6b2 <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800f6a8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7ff ff55 	bl	800f55c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f6b2:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f8d5 03cc 	ldr.w	r0, [r5, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f6ba:	f8c5 13d4 	str.w	r1, [r5, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6be:	f7fe f973 	bl	800d9a8 <osMessagePut>
 800f6c2:	e7a1      	b.n	800f608 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 800f6c4:	2802      	cmp	r0, #2
 800f6c6:	d19f      	bne.n	800f608 <USBH_CDC_Process+0xa6>
 800f6c8:	e7ea      	b.n	800f6a0 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 800f6ca:	7b23      	ldrb	r3, [r4, #12]
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	8b62      	ldrh	r2, [r4, #26]
 800f6d0:	6a21      	ldr	r1, [r4, #32]
 800f6d2:	f000 fd20 	bl	8010116 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f6d6:	2304      	movs	r3, #4
 800f6d8:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 800f6dc:	e762      	b.n	800f5a4 <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800f6de:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 800f6e0:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 800f6e2:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800f6e6:	f7ff ff3a 	bl	800f55e <USBH_CDC_ReceiveCallback>
 800f6ea:	e7ae      	b.n	800f64a <USBH_CDC_Process+0xe8>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	f000 fcb4 	bl	801005a <USBH_ClrFeature>
    if(req_status == USBH_OK )
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	f47f af56 	bne.w	800f5a4 <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 800f6f8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 800f6fc:	e752      	b.n	800f5a4 <USBH_CDC_Process+0x42>

0800f6fe <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f6fe:	f500 7360 	add.w	r3, r0, #896	; 0x380
 800f702:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800f706:	2100      	movs	r1, #0
 800f708:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d1fb      	bne.n	800f708 <DeInitStateMachine+0xa>
 800f710:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800f714:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800f718:	2300      	movs	r3, #0
 800f71a:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800f71e:	4291      	cmp	r1, r2
 800f720:	d1fb      	bne.n	800f71a <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800f722:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f724:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800f726:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800f728:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800f72a:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 800f72c:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800f730:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f732:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800f734:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f736:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800f73a:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 800f73e:	2000      	movs	r0, #0
 800f740:	4770      	bx	lr
	...

0800f744 <USBH_Init>:
{
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	460c      	mov	r4, r1
 800f748:	b088      	sub	sp, #32
  if(phost == NULL)
 800f74a:	4605      	mov	r5, r0
 800f74c:	b348      	cbz	r0, 800f7a2 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 800f74e:	2300      	movs	r3, #0
  phost->id = id;
 800f750:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800f754:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800f758:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 800f75c:	f7ff ffcf 	bl	800f6fe <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800f760:	b10c      	cbz	r4, 800f766 <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 800f762:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f766:	4c10      	ldr	r4, [pc, #64]	; (800f7a8 <USBH_Init+0x64>)
 800f768:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f76a:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f76c:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f770:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f772:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800f776:	2100      	movs	r1, #0
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe f911 	bl	800d9a0 <osMessageCreate>
 800f77e:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f784:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f786:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800f788:	4629      	mov	r1, r5
 800f78a:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f78c:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800f78e:	f7fe f880 	bl	800d892 <osThreadCreate>
 800f792:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  USBH_LL_Init(phost);
 800f796:	4628      	mov	r0, r5
 800f798:	f7f5 f9de 	bl	8004b58 <USBH_LL_Init>
  return USBH_OK;
 800f79c:	2000      	movs	r0, #0
}
 800f79e:	b008      	add	sp, #32
 800f7a0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 800f7a2:	2002      	movs	r0, #2
 800f7a4:	e7fb      	b.n	800f79e <USBH_Init+0x5a>
 800f7a6:	bf00      	nop
 800f7a8:	08027100 	.word	0x08027100

0800f7ac <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800f7ac:	b149      	cbz	r1, 800f7c2 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f7ae:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800f7b2:	b933      	cbnz	r3, 800f7c2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800f7ba:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 800f7be:	4618      	mov	r0, r3
 800f7c0:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f7c2:	2002      	movs	r0, #2
  }

  return status;
}
 800f7c4:	4770      	bx	lr

0800f7c6 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800f7c6:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800f7ca:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800f7cc:	bf86      	itte	hi
 800f7ce:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 800f7d2:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f7d4:	2002      	movls	r0, #2
  }
  return status;
}
 800f7d6:	4770      	bx	lr

0800f7d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800f7dc:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800f7e0:	b2e5      	uxtb	r5, r4
 800f7e2:	428e      	cmp	r6, r1
 800f7e4:	d001      	beq.n	800f7ea <USBH_FindInterface+0x12>
 800f7e6:	29ff      	cmp	r1, #255	; 0xff
 800f7e8:	d10b      	bne.n	800f802 <USBH_FindInterface+0x2a>
 800f7ea:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 800f7ee:	4296      	cmp	r6, r2
 800f7f0:	d001      	beq.n	800f7f6 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800f7f2:	2aff      	cmp	r2, #255	; 0xff
 800f7f4:	d105      	bne.n	800f802 <USBH_FindInterface+0x2a>
 800f7f6:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800f7fa:	429e      	cmp	r6, r3
 800f7fc:	d006      	beq.n	800f80c <USBH_FindInterface+0x34>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f7fe:	2bff      	cmp	r3, #255	; 0xff
 800f800:	d004      	beq.n	800f80c <USBH_FindInterface+0x34>
 800f802:	3401      	adds	r4, #1
 800f804:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f806:	2c02      	cmp	r4, #2
 800f808:	d1e8      	bne.n	800f7dc <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800f80a:	25ff      	movs	r5, #255	; 0xff
}
 800f80c:	4628      	mov	r0, r5
 800f80e:	bd70      	pop	{r4, r5, r6, pc}

0800f810 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800f810:	b510      	push	{r4, lr}
 800f812:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f814:	f7f5 f9c8 	bl	8004ba8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800f818:	2101      	movs	r1, #1
 800f81a:	4620      	mov	r0, r4
 800f81c:	f7f5 fa44 	bl	8004ca8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800f820:	2000      	movs	r0, #0
 800f822:	bd10      	pop	{r4, pc}

0800f824 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f824:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f826:	2302      	movs	r3, #2
{
 800f828:	b087      	sub	sp, #28
 800f82a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f82c:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 800f830:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800f834:	b933      	cbnz	r3, 800f844 <USBH_Process+0x20>
 800f836:	7802      	ldrb	r2, [r0, #0]
 800f838:	b122      	cbz	r2, 800f844 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800f83a:	7802      	ldrb	r2, [r0, #0]
 800f83c:	2a03      	cmp	r2, #3
 800f83e:	d001      	beq.n	800f844 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 800f840:	2203      	movs	r2, #3
 800f842:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 800f844:	7822      	ldrb	r2, [r4, #0]
 800f846:	2a0b      	cmp	r2, #11
 800f848:	d820      	bhi.n	800f88c <USBH_Process+0x68>
 800f84a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f84e:	000c      	.short	0x000c
 800f850:	00270022 	.word	0x00270022
 800f854:	001f0164 	.word	0x001f0164
 800f858:	0149005b 	.word	0x0149005b
 800f85c:	010f0104 	.word	0x010f0104
 800f860:	0128011c 	.word	0x0128011c
 800f864:	015b      	.short	0x015b
    if (phost->device.is_connected)
 800f866:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800f86a:	b17b      	cbz	r3, 800f88c <USBH_Process+0x68>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f86c:	2501      	movs	r5, #1
      USBH_Delay(200U);
 800f86e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f870:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 800f872:	f7f5 fa35 	bl	8004ce0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800f876:	4620      	mov	r0, r4
 800f878:	f7f5 f9c0 	bl	8004bfc <USBH_LL_ResetPort>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f87c:	2200      	movs	r2, #0
 800f87e:	4629      	mov	r1, r5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f880:	f8c4 53d4 	str.w	r5, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f884:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800f888:	f7fe f88e 	bl	800d9a8 <osMessagePut>
}
 800f88c:	2000      	movs	r0, #0
 800f88e:	b007      	add	sp, #28
 800f890:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 800f892:	2b01      	cmp	r3, #1
 800f894:	d1fa      	bne.n	800f88c <USBH_Process+0x68>
      phost->gState = HOST_DEV_ATTACHED;
 800f896:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 800f898:	7023      	strb	r3, [r4, #0]
 800f89a:	e7f7      	b.n	800f88c <USBH_Process+0x68>
    USBH_Delay(100U);
 800f89c:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 800f89e:	2500      	movs	r5, #0
    USBH_Delay(100U);
 800f8a0:	f7f5 fa1e 	bl	8004ce0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7f5 f99b 	bl	8004be0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800f8aa:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800f8ac:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f8b0:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 800f8b2:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f000 fc52 	bl	801015e <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f8ba:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800f8bc:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f000 fc4d 	bl	801015e <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 800f8c4:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800f8c6:	4601      	mov	r1, r0
 800f8c8:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 800f8ca:	9202      	str	r2, [sp, #8]
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f8d2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f8d6:	9200      	str	r2, [sp, #0]
 800f8d8:	2280      	movs	r2, #128	; 0x80
 800f8da:	9501      	str	r5, [sp, #4]
 800f8dc:	f000 fc2b 	bl	8010136 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 800f8e0:	79a2      	ldrb	r2, [r4, #6]
 800f8e2:	7961      	ldrb	r1, [r4, #5]
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	9202      	str	r2, [sp, #8]
 800f8e8:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f8ec:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f8f0:	9200      	str	r2, [sp, #0]
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	9501      	str	r5, [sp, #4]
 800f8f6:	f000 fc1e 	bl	8010136 <USBH_OpenPipe>
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8fa:	2101      	movs	r1, #1
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8fc:	462a      	mov	r2, r5
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8fe:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800f902:	e7bf      	b.n	800f884 <USBH_Process+0x60>
  switch (phost->EnumState)
 800f904:	7863      	ldrb	r3, [r4, #1]
 800f906:	2b07      	cmp	r3, #7
 800f908:	d8c0      	bhi.n	800f88c <USBH_Process+0x68>
 800f90a:	e8df f003 	tbb	[pc, r3]
 800f90e:	2a04      	.short	0x2a04
 800f910:	584e4533 	.word	0x584e4533
 800f914:	8373      	.short	0x8373
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800f916:	2108      	movs	r1, #8
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 fa77 	bl	800fe0c <USBH_Get_DevDesc>
 800f91e:	4605      	mov	r5, r0
 800f920:	2800      	cmp	r0, #0
 800f922:	d1b3      	bne.n	800f88c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f924:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f926:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 800f92a:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f92c:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800f92e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f932:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800f934:	9202      	str	r2, [sp, #8]
 800f936:	4620      	mov	r0, r4
 800f938:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f93c:	9501      	str	r5, [sp, #4]
 800f93e:	9200      	str	r2, [sp, #0]
 800f940:	2280      	movs	r2, #128	; 0x80
 800f942:	f000 fbf8 	bl	8010136 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 800f946:	79a2      	ldrb	r2, [r4, #6]
 800f948:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800f94c:	4620      	mov	r0, r4
 800f94e:	9202      	str	r2, [sp, #8]
 800f950:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800f954:	7961      	ldrb	r1, [r4, #5]
 800f956:	9200      	str	r2, [sp, #0]
 800f958:	462a      	mov	r2, r5
 800f95a:	9501      	str	r5, [sp, #4]
 800f95c:	f000 fbeb 	bl	8010136 <USBH_OpenPipe>
 800f960:	e794      	b.n	800f88c <USBH_Process+0x68>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800f962:	2112      	movs	r1, #18
 800f964:	4620      	mov	r0, r4
 800f966:	f000 fa51 	bl	800fe0c <USBH_Get_DevDesc>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d18e      	bne.n	800f88c <USBH_Process+0x68>
      phost->EnumState = ENUM_SET_ADDR;
 800f96e:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f970:	7063      	strb	r3, [r4, #1]
 800f972:	e78b      	b.n	800f88c <USBH_Process+0x68>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800f974:	2101      	movs	r1, #1
 800f976:	4620      	mov	r0, r4
 800f978:	f000 fb45 	bl	8010006 <USBH_SetAddress>
 800f97c:	4605      	mov	r5, r0
 800f97e:	2800      	cmp	r0, #0
 800f980:	d184      	bne.n	800f88c <USBH_Process+0x68>
      USBH_Delay(2U);
 800f982:	2002      	movs	r0, #2
 800f984:	f7f5 f9ac 	bl	8004ce0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f988:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f98a:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 800f98c:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f98e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f990:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800f994:	79a2      	ldrb	r2, [r4, #6]
 800f996:	e7cd      	b.n	800f934 <USBH_Process+0x110>
    if ( USBH_Get_CfgDesc(phost,
 800f998:	2109      	movs	r1, #9
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fa7e 	bl	800fe9c <USBH_Get_CfgDesc>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	f47f af73 	bne.w	800f88c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f9a6:	2304      	movs	r3, #4
 800f9a8:	e7e2      	b.n	800f970 <USBH_Process+0x14c>
    if (USBH_Get_CfgDesc(phost,
 800f9aa:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f000 fa74 	bl	800fe9c <USBH_Get_CfgDesc>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	f47f af69 	bne.w	800f88c <USBH_Process+0x68>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f9ba:	2305      	movs	r3, #5
 800f9bc:	e7d8      	b.n	800f970 <USBH_Process+0x14c>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800f9be:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800f9c2:	b179      	cbz	r1, 800f9e4 <USBH_Process+0x1c0>
      if ( USBH_Get_StringDesc(phost,
 800f9c4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800f9c8:	23ff      	movs	r3, #255	; 0xff
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f000 faf4 	bl	800ffb8 <USBH_Get_StringDesc>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f47f af5a 	bne.w	800f88c <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f9d8:	2306      	movs	r3, #6
 800f9da:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9dc:	2105      	movs	r1, #5
 800f9de:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
 800f9e2:	e74f      	b.n	800f884 <USBH_Process+0x60>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f9e4:	2306      	movs	r3, #6
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f9e6:	7063      	strb	r3, [r4, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9e8:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9ea:	460a      	mov	r2, r1
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9ec:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	e747      	b.n	800f884 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 800f9f4:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800f9f8:	b151      	cbz	r1, 800fa10 <USBH_Process+0x1ec>
      if ( USBH_Get_StringDesc(phost,
 800f9fa:	23ff      	movs	r3, #255	; 0xff
 800f9fc:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fad9 	bl	800ffb8 <USBH_Get_StringDesc>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	f47f af40 	bne.w	800f88c <USBH_Process+0x68>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fa0c:	2307      	movs	r3, #7
 800fa0e:	e7af      	b.n	800f970 <USBH_Process+0x14c>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fa10:	2307      	movs	r3, #7
 800fa12:	e7e8      	b.n	800f9e6 <USBH_Process+0x1c2>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800fa14:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800fa18:	b189      	cbz	r1, 800fa3e <USBH_Process+0x21a>
      if ( USBH_Get_StringDesc(phost,
 800fa1a:	23ff      	movs	r3, #255	; 0xff
 800fa1c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800fa20:	4620      	mov	r0, r4
 800fa22:	f000 fac9 	bl	800ffb8 <USBH_Get_StringDesc>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	f47f af30 	bne.w	800f88c <USBH_Process+0x68>
      phost->device.current_interface = 0U;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800fa32:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d10b      	bne.n	800fa52 <USBH_Process+0x22e>
        phost->gState  = HOST_SET_CONFIGURATION;
 800fa3a:	2308      	movs	r3, #8
 800fa3c:	e72c      	b.n	800f898 <USBH_Process+0x74>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa3e:	2305      	movs	r3, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa40:	460a      	mov	r2, r1
 800fa42:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa46:	f8c4 33d4 	str.w	r3, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	f7fd ffac 	bl	800d9a8 <osMessagePut>
 800fa50:	e7ec      	b.n	800fa2c <USBH_Process+0x208>
        phost->gState  = HOST_INPUT;
 800fa52:	2307      	movs	r3, #7
 800fa54:	e720      	b.n	800f898 <USBH_Process+0x74>
      if(phost->pUser != NULL)
 800fa56:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f43f af16 	beq.w	800f88c <USBH_Process+0x68>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fa60:	2101      	movs	r1, #1
 800fa62:	4620      	mov	r0, r4
 800fa64:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fa66:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 800fa68:	7023      	strb	r3, [r4, #0]
 800fa6a:	e035      	b.n	800fad8 <USBH_Process+0x2b4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fa6c:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fad6 	bl	8010022 <USBH_SetCfg>
 800fa76:	b908      	cbnz	r0, 800fa7c <USBH_Process+0x258>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800fa78:	2309      	movs	r3, #9
      phost->gState  = HOST_CHECK_CLASS;
 800fa7a:	7023      	strb	r3, [r4, #0]
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fa7c:	2101      	movs	r1, #1
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fa7e:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa82:	2200      	movs	r2, #0
 800fa84:	e6fe      	b.n	800f884 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800fa86:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800fa8a:	069b      	lsls	r3, r3, #26
 800fa8c:	d505      	bpl.n	800fa9a <USBH_Process+0x276>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800fa8e:	2101      	movs	r1, #1
 800fa90:	4620      	mov	r0, r4
 800fa92:	f000 fad4 	bl	801003e <USBH_SetFeature>
 800fa96:	2800      	cmp	r0, #0
 800fa98:	d1f0      	bne.n	800fa7c <USBH_Process+0x258>
      phost->gState  = HOST_CHECK_CLASS;
 800fa9a:	230a      	movs	r3, #10
 800fa9c:	e7ed      	b.n	800fa7a <USBH_Process+0x256>
    if(phost->ClassNumber == 0U)
 800fa9e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800faa2:	b1cb      	cbz	r3, 800fad8 <USBH_Process+0x2b4>
      phost->pActiveClass = NULL;
 800faa4:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800faa6:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 800faaa:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800faae:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800fab2:	7919      	ldrb	r1, [r3, #4]
 800fab4:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 800fab6:	bf08      	it	eq
 800fab8:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 800fabc:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fac0:	b163      	cbz	r3, 800fadc <USBH_Process+0x2b8>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	4620      	mov	r0, r4
 800fac6:	4798      	blx	r3
 800fac8:	b940      	cbnz	r0, 800fadc <USBH_Process+0x2b8>
          phost->gState  = HOST_CLASS_REQUEST;
 800faca:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800facc:	2103      	movs	r1, #3
 800face:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST;
 800fad0:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fad2:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800fad6:	4798      	blx	r3
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fad8:	2105      	movs	r1, #5
 800fada:	e7d0      	b.n	800fa7e <USBH_Process+0x25a>
        phost->gState  = HOST_ABORT_STATE;
 800fadc:	230d      	movs	r3, #13
 800fade:	e7c3      	b.n	800fa68 <USBH_Process+0x244>
    if(phost->pActiveClass != NULL)
 800fae0:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
 800fae4:	b15a      	cbz	r2, 800fafe <USBH_Process+0x2da>
      status = phost->pActiveClass->Requests(phost);
 800fae6:	6913      	ldr	r3, [r2, #16]
 800fae8:	4620      	mov	r0, r4
 800faea:	4798      	blx	r3
 800faec:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800faf0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f47f aec9 	bne.w	800f88c <USBH_Process+0x68>
        phost->gState  = HOST_CLASS;
 800fafa:	230b      	movs	r3, #11
 800fafc:	e6cc      	b.n	800f898 <USBH_Process+0x74>
      phost->gState  = HOST_ABORT_STATE;
 800fafe:	230d      	movs	r3, #13
 800fb00:	7023      	strb	r3, [r4, #0]
 800fb02:	e76b      	b.n	800f9dc <USBH_Process+0x1b8>
    if(phost->pActiveClass != NULL)
 800fb04:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f43f aebf 	beq.w	800f88c <USBH_Process+0x68>
      phost->pActiveClass->BgndProcess(phost);
 800fb0e:	695b      	ldr	r3, [r3, #20]
 800fb10:	4620      	mov	r0, r4
 800fb12:	4798      	blx	r3
 800fb14:	e6ba      	b.n	800f88c <USBH_Process+0x68>
    DeInitStateMachine(phost);
 800fb16:	4620      	mov	r0, r4
 800fb18:	f7ff fdf1 	bl	800f6fe <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800fb1c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f43f aeb3 	beq.w	800f88c <USBH_Process+0x68>
      phost->pActiveClass->DeInit(phost);
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	4620      	mov	r0, r4
 800fb2a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 800fb32:	e6ab      	b.n	800f88c <USBH_Process+0x68>

0800fb34 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800fb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb36:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800fb38:	f04f 32ff 	mov.w	r2, #4294967295
 800fb3c:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 800fb40:	a801      	add	r0, sp, #4
 800fb42:	f7fd ff59 	bl	800d9f8 <osMessageGet>
    if(event.status == osEventMessage)
 800fb46:	9b01      	ldr	r3, [sp, #4]
 800fb48:	2b10      	cmp	r3, #16
 800fb4a:	d1f5      	bne.n	800fb38 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f7ff fe69 	bl	800f824 <USBH_Process>
 800fb52:	e7f1      	b.n	800fb38 <USBH_Process_OS+0x4>

0800fb54 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800fb54:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 800fb58:	4770      	bx	lr

0800fb5a <USBH_LL_IncTimer>:
  phost->Timer ++;
 800fb5a:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 800fb5e:	3201      	adds	r2, #1
 800fb60:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800fb64:	7802      	ldrb	r2, [r0, #0]
 800fb66:	2a0b      	cmp	r2, #11
 800fb68:	d104      	bne.n	800fb74 <USBH_LL_IncTimer+0x1a>
 800fb6a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800fb6e:	b10b      	cbz	r3, 800fb74 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800fb70:	699b      	ldr	r3, [r3, #24]
 800fb72:	4718      	bx	r3
 800fb74:	4770      	bx	lr

0800fb76 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800fb76:	2301      	movs	r3, #1
 800fb78:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800fb7c:	4770      	bx	lr

0800fb7e <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 800fb84:	4770      	bx	lr

0800fb86 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 800fb86:	7803      	ldrb	r3, [r0, #0]
{
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 800fb8c:	b98b      	cbnz	r3, 800fbb2 <USBH_LL_Connect+0x2c>
    phost->device.is_connected = 1U;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 800fb94:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800fb98:	b10b      	cbz	r3, 800fb9e <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 800fb9a:	2104      	movs	r1, #4
 800fb9c:	4798      	blx	r3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb9e:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fba0:	2200      	movs	r2, #0
 800fba2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fba6:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbaa:	f7fd fefd 	bl	800d9a8 <osMessagePut>
}
 800fbae:	2000      	movs	r0, #0
 800fbb0:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 800fbb2:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d1f1      	bne.n	800fb9e <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 800fbba:	2302      	movs	r3, #2
 800fbbc:	7003      	strb	r3, [r0, #0]
 800fbbe:	e7ee      	b.n	800fb9e <USBH_LL_Connect+0x18>

0800fbc0 <USBH_LL_Disconnect>:
{
 800fbc0:	b510      	push	{r4, lr}
 800fbc2:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 800fbc4:	f7f4 fffe 	bl	8004bc4 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800fbc8:	7921      	ldrb	r1, [r4, #4]
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 fade 	bl	801018c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800fbd0:	7961      	ldrb	r1, [r4, #5]
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 fada 	bl	801018c <USBH_FreePipe>
  phost->device.is_connected = 0U;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 800fbde:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800fbe2:	b113      	cbz	r3, 800fbea <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fbe4:	2105      	movs	r1, #5
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	4798      	blx	r3
  USBH_LL_Start(phost);
 800fbea:	4620      	mov	r0, r4
 800fbec:	f7f4 ffdc 	bl	8004ba8 <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 800fbf0:	2303      	movs	r3, #3
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbf2:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbf4:	2200      	movs	r2, #0
  phost->gState = HOST_DEV_DISCONNECTED;
 800fbf6:	7023      	strb	r3, [r4, #0]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbf8:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fbfc:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800fc00:	f7fd fed2 	bl	800d9a8 <osMessagePut>
}
 800fc04:	2000      	movs	r0, #0
 800fc06:	bd10      	pop	{r4, pc}

0800fc08 <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fc08:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc0a:	2200      	movs	r2, #0
{
 800fc0c:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fc0e:	f8c0 13d4 	str.w	r1, [r0, #980]	; 0x3d4
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc12:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 800fc16:	f7fd fec7 	bl	800d9a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	bd08      	pop	{r3, pc}

0800fc1e <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800fc1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 800fc20:	7885      	ldrb	r5, [r0, #2]
{
 800fc22:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800fc24:	2d01      	cmp	r5, #1
 800fc26:	d003      	beq.n	800fc30 <USBH_CtlReq+0x12>
 800fc28:	2d02      	cmp	r5, #2
 800fc2a:	d00f      	beq.n	800fc4c <USBH_CtlReq+0x2e>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 800fc2c:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 800fc2e:	e057      	b.n	800fce0 <USBH_CtlReq+0xc2>
    phost->RequestState = CMD_WAIT;
 800fc30:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 800fc32:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 800fc34:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 800fc36:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 800fc38:	7083      	strb	r3, [r0, #2]
          phost->Control.state = CTRL_STATUS_IN;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc3a:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fc42:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fc46:	f7fd feaf 	bl	800d9a8 <osMessagePut>
 800fc4a:	e7ef      	b.n	800fc2c <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 800fc4c:	7e03      	ldrb	r3, [r0, #24]
 800fc4e:	2101      	movs	r1, #1
 800fc50:	3b01      	subs	r3, #1
 800fc52:	2b0a      	cmp	r3, #10
 800fc54:	d8ea      	bhi.n	800fc2c <USBH_CtlReq+0xe>
 800fc56:	e8df f003 	tbb	[pc, r3]
 800fc5a:	0e06      	.short	0x0e06
 800fc5c:	50452f25 	.word	0x50452f25
 800fc60:	a1967a70 	.word	0xa1967a70
 800fc64:	ab          	.byte	0xab
 800fc65:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fc66:	7942      	ldrb	r2, [r0, #5]
 800fc68:	f100 0110 	add.w	r1, r0, #16
 800fc6c:	f000 fa03 	bl	8010076 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 800fc70:	2302      	movs	r3, #2
    USBH_CtlReceiveData(phost,
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800fc72:	7623      	strb	r3, [r4, #24]
 800fc74:	e7da      	b.n	800fc2c <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fc76:	7941      	ldrb	r1, [r0, #5]
 800fc78:	f7f5 f812 	bl	8004ca0 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800fc7c:	2801      	cmp	r0, #1
 800fc7e:	d10c      	bne.n	800fc9a <USBH_CtlReq+0x7c>
      if (phost->Control.setup.b.wLength.w != 0U)
 800fc80:	8ae2      	ldrh	r2, [r4, #22]
 800fc82:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800fc86:	b122      	cbz	r2, 800fc92 <USBH_CtlReq+0x74>
        if (direction == USB_D2H)
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	da44      	bge.n	800fd16 <USBH_CtlReq+0xf8>
          phost->Control.state = CTRL_DATA_IN;
 800fc8c:	2303      	movs	r3, #3
          phost->Control.state = CTRL_STATUS_IN;
 800fc8e:	7623      	strb	r3, [r4, #24]
 800fc90:	e7d3      	b.n	800fc3a <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	da36      	bge.n	800fd04 <USBH_CtlReq+0xe6>
#endif
#endif
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800fc96:	2309      	movs	r3, #9
 800fc98:	e7f9      	b.n	800fc8e <USBH_CtlReq+0x70>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fc9a:	2804      	cmp	r0, #4
 800fc9c:	d06d      	beq.n	800fd7a <USBH_CtlReq+0x15c>
 800fc9e:	2802      	cmp	r0, #2
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 800fca0:	d1c4      	bne.n	800fc2c <USBH_CtlReq+0xe>
 800fca2:	e06a      	b.n	800fd7a <USBH_CtlReq+0x15c>
    phost->Control.timer = (uint16_t)phost->Timer;
 800fca4:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 800fca8:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 800fcaa:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800fcac:	6881      	ldr	r1, [r0, #8]
 800fcae:	7903      	ldrb	r3, [r0, #4]
 800fcb0:	f000 fa09 	bl	80100c6 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800fcb4:	2304      	movs	r3, #4
 800fcb6:	e7dc      	b.n	800fc72 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800fcb8:	7901      	ldrb	r1, [r0, #4]
 800fcba:	f7f4 fff1 	bl	8004ca0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fcbe:	2801      	cmp	r0, #1
 800fcc0:	d0e9      	beq.n	800fc96 <USBH_CtlReq+0x78>
    if  (URB_Status == USBH_URB_STALL)
 800fcc2:	2805      	cmp	r0, #5
 800fcc4:	d172      	bne.n	800fdac <USBH_CtlReq+0x18e>
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcc6:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcce:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fcd2:	f7fd fe69 	bl	800d9a8 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800fcd6:	2301      	movs	r3, #1
      status = USBH_NOT_SUPPORTED;
 800fcd8:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 800fcda:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	7623      	strb	r3, [r4, #24]
}
 800fce0:	b003      	add	sp, #12
 800fce2:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 800fce4:	7943      	ldrb	r3, [r0, #5]
 800fce6:	8982      	ldrh	r2, [r0, #12]
 800fce8:	9100      	str	r1, [sp, #0]
 800fcea:	6881      	ldr	r1, [r0, #8]
 800fcec:	f000 f9d4 	bl	8010098 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800fcf0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fcf4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fcf6:	2306      	movs	r3, #6
 800fcf8:	e7bb      	b.n	800fc72 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800fcfa:	7941      	ldrb	r1, [r0, #5]
 800fcfc:	f7f4 ffd0 	bl	8004ca0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fd00:	2801      	cmp	r0, #1
 800fd02:	d101      	bne.n	800fd08 <USBH_CtlReq+0xea>
          phost->Control.state = CTRL_STATUS_IN;
 800fd04:	2307      	movs	r3, #7
 800fd06:	e7c2      	b.n	800fc8e <USBH_CtlReq+0x70>
    else if  (URB_Status == USBH_URB_STALL)
 800fd08:	2805      	cmp	r0, #5
 800fd0a:	d102      	bne.n	800fd12 <USBH_CtlReq+0xf4>
      phost->Control.state = CTRL_STALLED;
 800fd0c:	230c      	movs	r3, #12
 800fd0e:	7623      	strb	r3, [r4, #24]
 800fd10:	e7d9      	b.n	800fcc6 <USBH_CtlReq+0xa8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fd12:	2802      	cmp	r0, #2
 800fd14:	d101      	bne.n	800fd1a <USBH_CtlReq+0xfc>
      phost->Control.state = CTRL_DATA_OUT;
 800fd16:	2305      	movs	r3, #5
 800fd18:	e7b9      	b.n	800fc8e <USBH_CtlReq+0x70>
      if (URB_Status == USBH_URB_ERROR)
 800fd1a:	2804      	cmp	r0, #4
 800fd1c:	d186      	bne.n	800fc2c <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 800fd1e:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd20:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd22:	2200      	movs	r2, #0
 800fd24:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 800fd28:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd2a:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd2e:	f7fd fe3b 	bl	800d9a8 <osMessagePut>
        phost->RequestState = CMD_SEND;
 800fd32:	2301      	movs	r3, #1
        status = USBH_FAIL;
 800fd34:	2002      	movs	r0, #2
        phost->RequestState = CMD_SEND;
 800fd36:	70a3      	strb	r3, [r4, #2]
 800fd38:	e7d2      	b.n	800fce0 <USBH_CtlReq+0xc2>
    USBH_CtlReceiveData (phost,
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	7903      	ldrb	r3, [r0, #4]
 800fd3e:	4611      	mov	r1, r2
 800fd40:	f000 f9c1 	bl	80100c6 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 800fd44:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fd48:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fd4a:	2308      	movs	r3, #8
 800fd4c:	e791      	b.n	800fc72 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800fd4e:	7901      	ldrb	r1, [r0, #4]
 800fd50:	f7f4 ffa6 	bl	8004ca0 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800fd54:	2801      	cmp	r0, #1
 800fd56:	d10e      	bne.n	800fd76 <USBH_CtlReq+0x158>
      phost->Control.state = CTRL_COMPLETE;
 800fd58:	230d      	movs	r3, #13
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd5a:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 800fd62:	7623      	strb	r3, [r4, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd64:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd68:	f7fd fe1e 	bl	800d9a8 <osMessagePut>
      phost->RequestState = CMD_SEND;
 800fd6c:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800fd6e:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 800fd70:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 800fd72:	7620      	strb	r0, [r4, #24]
 800fd74:	e7b4      	b.n	800fce0 <USBH_CtlReq+0xc2>
    else if (URB_Status == USBH_URB_ERROR)
 800fd76:	2804      	cmp	r0, #4
 800fd78:	d101      	bne.n	800fd7e <USBH_CtlReq+0x160>
      {
        phost->Control.state = CTRL_ERROR;
 800fd7a:	230b      	movs	r3, #11
 800fd7c:	e787      	b.n	800fc8e <USBH_CtlReq+0x70>
      if(URB_Status == USBH_URB_STALL)
 800fd7e:	2805      	cmp	r0, #5
 800fd80:	f47f af54 	bne.w	800fc2c <USBH_CtlReq+0xe>
 800fd84:	e79f      	b.n	800fcc6 <USBH_CtlReq+0xa8>
    USBH_CtlSendData (phost,
 800fd86:	2200      	movs	r2, #0
 800fd88:	7943      	ldrb	r3, [r0, #5]
 800fd8a:	9100      	str	r1, [sp, #0]
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	f000 f983 	bl	8010098 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800fd92:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800fd96:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fd98:	230a      	movs	r3, #10
 800fd9a:	e76a      	b.n	800fc72 <USBH_CtlReq+0x54>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800fd9c:	7941      	ldrb	r1, [r0, #5]
 800fd9e:	f7f4 ff7f 	bl	8004ca0 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800fda2:	2801      	cmp	r0, #1
 800fda4:	d0d8      	beq.n	800fd58 <USBH_CtlReq+0x13a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800fda6:	2802      	cmp	r0, #2
 800fda8:	f43f af75 	beq.w	800fc96 <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_ERROR)
 800fdac:	2804      	cmp	r0, #4
 800fdae:	e777      	b.n	800fca0 <USBH_CtlReq+0x82>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fdb0:	7e43      	ldrb	r3, [r0, #25]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	7643      	strb	r3, [r0, #25]
 800fdba:	d805      	bhi.n	800fdc8 <USBH_CtlReq+0x1aa>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800fdbc:	f7f4 ff02 	bl	8004bc4 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 800fdc4:	70a3      	strb	r3, [r4, #2]
 800fdc6:	e731      	b.n	800fc2c <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fdc8:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800fdcc:	2106      	movs	r1, #6
 800fdce:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	7663      	strb	r3, [r4, #25]
 800fdd4:	e7ad      	b.n	800fd32 <USBH_CtlReq+0x114>

0800fdd6 <USBH_GetDescriptor>:
{
 800fdd6:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800fdd8:	7884      	ldrb	r4, [r0, #2]
{
 800fdda:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800fdde:	2c01      	cmp	r4, #1
 800fde0:	d10f      	bne.n	800fe02 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fde2:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 800fde6:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fde8:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 800fdea:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fdec:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fdee:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fdf2:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fdf4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fdf8:	bf0c      	ite	eq
 800fdfa:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 800fdfe:	2200      	movne	r2, #0
 800fe00:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800fe02:	462a      	mov	r2, r5
 800fe04:	4619      	mov	r1, r3
}
 800fe06:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800fe08:	f7ff bf09 	b.w	800fc1e <USBH_CtlReq>

0800fe0c <USBH_Get_DevDesc>:
{
 800fe0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800fe0e:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800fe12:	460d      	mov	r5, r1
 800fe14:	9100      	str	r1, [sp, #0]
 800fe16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe1a:	2100      	movs	r1, #0
{
 800fe1c:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800fe1e:	f7ff ffda 	bl	800fdd6 <USBH_GetDescriptor>
 800fe22:	bbc8      	cbnz	r0, 800fe98 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800fe24:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 800fe28:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800fe2a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800fe2e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800fe32:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800fe36:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800fe3a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800fe3e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800fe42:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800fe46:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800fe4a:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800fe4e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800fe52:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800fe56:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800fe5a:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 800fe5e:	d91b      	bls.n	800fe98 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 800fe60:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800fe64:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 800fe68:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800fe6c:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800fe70:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800fe74:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800fe78:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800fe7c:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800fe80:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800fe84:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800fe88:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800fe8c:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800fe90:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800fe94:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 800fe98:	b003      	add	sp, #12
 800fe9a:	bd30      	pop	{r4, r5, pc}

0800fe9c <USBH_Get_CfgDesc>:
{
 800fe9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 800fea0:	f100 051c 	add.w	r5, r0, #28
{
 800fea4:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 800fea6:	9100      	str	r1, [sp, #0]
 800fea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800feac:	462b      	mov	r3, r5
 800feae:	2100      	movs	r1, #0
{
 800feb0:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800feb2:	f7ff ff90 	bl	800fdd6 <USBH_GetDescriptor>
 800feb6:	bb48      	cbnz	r0, 800ff0c <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800feb8:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800feba:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800febc:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800fec0:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800fec4:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800fec6:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800feca:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800fece:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fed2:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800fed6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800feda:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800fede:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800fee2:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800fee6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800feea:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800feee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800fef2:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fef6:	d909      	bls.n	800ff0c <USBH_Get_CfgDesc+0x70>
 800fef8:	4627      	mov	r7, r4
 800fefa:	462b      	mov	r3, r5
 800fefc:	4606      	mov	r6, r0
 800fefe:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800ff00:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ff04:	2e02      	cmp	r6, #2
 800ff06:	d001      	beq.n	800ff0c <USBH_Get_CfgDesc+0x70>
 800ff08:	4596      	cmp	lr, r2
 800ff0a:	d802      	bhi.n	800ff12 <USBH_Get_CfgDesc+0x76>
}
 800ff0c:	b003      	add	sp, #12
 800ff0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff12:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ff14:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff16:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ff18:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff1a:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ff1c:	2904      	cmp	r1, #4
 800ff1e:	d1f1      	bne.n	800ff04 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800ff20:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800ff22:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800ff26:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800ff2a:	7859      	ldrb	r1, [r3, #1]
 800ff2c:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800ff30:	7899      	ldrb	r1, [r3, #2]
 800ff32:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800ff36:	78d9      	ldrb	r1, [r3, #3]
 800ff38:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800ff3c:	7919      	ldrb	r1, [r3, #4]
 800ff3e:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800ff42:	7959      	ldrb	r1, [r3, #5]
 800ff44:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800ff48:	7999      	ldrb	r1, [r3, #6]
 800ff4a:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800ff4e:	79d9      	ldrb	r1, [r3, #7]
 800ff50:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800ff54:	7a19      	ldrb	r1, [r3, #8]
 800ff56:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
        ep_ix = 0U;
 800ff5a:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ff5c:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 800ff60:	428d      	cmp	r5, r1
 800ff62:	d802      	bhi.n	800ff6a <USBH_Get_CfgDesc+0xce>
 800ff64:	3601      	adds	r6, #1
 800ff66:	371a      	adds	r7, #26
 800ff68:	e7cc      	b.n	800ff04 <USBH_Get_CfgDesc+0x68>
 800ff6a:	4596      	cmp	lr, r2
 800ff6c:	d9fa      	bls.n	800ff64 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff6e:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ff70:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff72:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ff74:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ff76:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ff78:	2d05      	cmp	r5, #5
 800ff7a:	d1ef      	bne.n	800ff5c <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800ff7c:	1c4d      	adds	r5, r1, #1
 800ff7e:	f893 9000 	ldrb.w	r9, [r3]
 800ff82:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 800ff86:	4421      	add	r1, r4
 800ff88:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800ff8c:	f893 9001 	ldrb.w	r9, [r3, #1]
 800ff90:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800ff94:	f893 9002 	ldrb.w	r9, [r3, #2]
 800ff98:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800ff9c:	f893 9003 	ldrb.w	r9, [r3, #3]
 800ffa0:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800ffa4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800ffa8:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800ffac:	f893 9006 	ldrb.w	r9, [r3, #6]
 800ffb0:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 800ffb4:	b2e9      	uxtb	r1, r5
 800ffb6:	e7d1      	b.n	800ff5c <USBH_Get_CfgDesc+0xc0>

0800ffb8 <USBH_Get_StringDesc>:
{
 800ffb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800ffba:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800ffbe:	4614      	mov	r4, r2
 800ffc0:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800ffc2:	9300      	str	r3, [sp, #0]
 800ffc4:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800ffc8:	462b      	mov	r3, r5
 800ffca:	2100      	movs	r1, #0
{
 800ffcc:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 800ffce:	f7ff ff02 	bl	800fdd6 <USBH_GetDescriptor>
 800ffd2:	b978      	cbnz	r0, 800fff4 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ffd4:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800ffd8:	2b03      	cmp	r3, #3
 800ffda:	d10b      	bne.n	800fff4 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ffdc:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffe0:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ffe2:	3b02      	subs	r3, #2
 800ffe4:	42bb      	cmp	r3, r7
 800ffe6:	bf28      	it	cs
 800ffe8:	463b      	movcs	r3, r7
 800ffea:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d803      	bhi.n	800fff8 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800fff0:	2300      	movs	r3, #0
 800fff2:	7023      	strb	r3, [r4, #0]
}
 800fff4:	b003      	add	sp, #12
 800fff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800fff8:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 800fffa:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800fffc:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fffe:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 8010000:	f804 1b01 	strb.w	r1, [r4], #1
 8010004:	e7f2      	b.n	800ffec <USBH_Get_StringDesc+0x34>

08010006 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8010006:	7883      	ldrb	r3, [r0, #2]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d106      	bne.n	801001a <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801000c:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801000e:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010010:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010012:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010014:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8010016:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010018:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 801001a:	2200      	movs	r2, #0
 801001c:	4611      	mov	r1, r2
 801001e:	f7ff bdfe 	b.w	800fc1e <USBH_CtlReq>

08010022 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8010022:	7883      	ldrb	r3, [r0, #2]
 8010024:	2b01      	cmp	r3, #1
 8010026:	d106      	bne.n	8010036 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010028:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801002a:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 801002c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801002e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010030:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8010032:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010034:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8010036:	2200      	movs	r2, #0
 8010038:	4611      	mov	r1, r2
 801003a:	f7ff bdf0 	b.w	800fc1e <USBH_CtlReq>

0801003e <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 801003e:	7883      	ldrb	r3, [r0, #2]
 8010040:	2b01      	cmp	r3, #1
 8010042:	d106      	bne.n	8010052 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010044:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010046:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 8010048:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801004a:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801004c:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 801004e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010050:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8010052:	2200      	movs	r2, #0
 8010054:	4611      	mov	r1, r2
 8010056:	f7ff bde2 	b.w	800fc1e <USBH_CtlReq>

0801005a <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 801005a:	7883      	ldrb	r3, [r0, #2]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d106      	bne.n	801006e <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010060:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010062:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010064:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8010066:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010068:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801006a:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0U;
 801006c:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 801006e:	2200      	movs	r2, #0
 8010070:	4611      	mov	r1, r2
 8010072:	f7ff bdd4 	b.w	800fc1e <USBH_CtlReq>

08010076 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8010076:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010078:	2308      	movs	r3, #8
{
 801007a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801007c:	2400      	movs	r4, #0
{
 801007e:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010080:	9302      	str	r3, [sp, #8]
 8010082:	9101      	str	r1, [sp, #4]
 8010084:	4623      	mov	r3, r4
 8010086:	9403      	str	r4, [sp, #12]
 8010088:	4622      	mov	r2, r4
 801008a:	9400      	str	r4, [sp, #0]
 801008c:	4629      	mov	r1, r5
 801008e:	f7f4 fded 	bl	8004c6c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8010092:	4620      	mov	r0, r4
 8010094:	b005      	add	sp, #20
 8010096:	bd30      	pop	{r4, r5, pc}

08010098 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8010098:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 801009a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 801009e:	b085      	sub	sp, #20
 80100a0:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80100a2:	2d00      	cmp	r5, #0
{
 80100a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80100a8:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80100aa:	bf18      	it	ne
 80100ac:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80100ae:	9101      	str	r1, [sp, #4]
 80100b0:	4621      	mov	r1, r4
 80100b2:	9303      	str	r3, [sp, #12]
 80100b4:	2301      	movs	r3, #1
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	2300      	movs	r3, #0
 80100ba:	461a      	mov	r2, r3
 80100bc:	f7f4 fdd6 	bl	8004c6c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80100c0:	2000      	movs	r0, #0
 80100c2:	b005      	add	sp, #20
 80100c4:	bd30      	pop	{r4, r5, pc}

080100c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80100c6:	b530      	push	{r4, r5, lr}
 80100c8:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80100ca:	2400      	movs	r4, #0
{
 80100cc:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80100ce:	9202      	str	r2, [sp, #8]
 80100d0:	2201      	movs	r2, #1
 80100d2:	9101      	str	r1, [sp, #4]
 80100d4:	4623      	mov	r3, r4
 80100d6:	9403      	str	r4, [sp, #12]
 80100d8:	4629      	mov	r1, r5
 80100da:	9200      	str	r2, [sp, #0]
 80100dc:	f7f4 fdc6 	bl	8004c6c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80100e0:	4620      	mov	r0, r4
 80100e2:	b005      	add	sp, #20
 80100e4:	bd30      	pop	{r4, r5, pc}

080100e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80100e6:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80100e8:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80100ec:	b085      	sub	sp, #20
 80100ee:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80100f0:	2d00      	cmp	r5, #0
{
 80100f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80100f6:	9202      	str	r2, [sp, #8]
 80100f8:	f04f 0200 	mov.w	r2, #0
    do_ping = 0U;
 80100fc:	bf18      	it	ne
 80100fe:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010100:	9101      	str	r1, [sp, #4]
 8010102:	4621      	mov	r1, r4
 8010104:	9303      	str	r3, [sp, #12]
 8010106:	2301      	movs	r3, #1
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	2302      	movs	r3, #2
 801010c:	f7f4 fdae 	bl	8004c6c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8010110:	2000      	movs	r0, #0
 8010112:	b005      	add	sp, #20
 8010114:	bd30      	pop	{r4, r5, pc}

08010116 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010116:	b530      	push	{r4, r5, lr}
 8010118:	b085      	sub	sp, #20
 801011a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801011c:	2400      	movs	r4, #0
 801011e:	2302      	movs	r3, #2
 8010120:	9202      	str	r2, [sp, #8]
 8010122:	2201      	movs	r2, #1
 8010124:	9101      	str	r1, [sp, #4]
 8010126:	4629      	mov	r1, r5
 8010128:	9403      	str	r4, [sp, #12]
 801012a:	9200      	str	r2, [sp, #0]
 801012c:	f7f4 fd9e 	bl	8004c6c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8010130:	4620      	mov	r0, r4
 8010132:	b005      	add	sp, #20
 8010134:	bd30      	pop	{r4, r5, pc}

08010136 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8010136:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8010138:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801013c:	9402      	str	r4, [sp, #8]
 801013e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8010142:	9401      	str	r4, [sp, #4]
 8010144:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8010148:	9400      	str	r4, [sp, #0]
 801014a:	f7f4 fd69 	bl	8004c20 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 801014e:	2000      	movs	r0, #0
 8010150:	b004      	add	sp, #16
 8010152:	bd10      	pop	{r4, pc}

08010154 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8010154:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8010156:	f7f4 fd7b 	bl	8004c50 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 801015a:	2000      	movs	r0, #0
 801015c:	bd08      	pop	{r3, pc}

0801015e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801015e:	b530      	push	{r4, r5, lr}
 8010160:	2300      	movs	r3, #0
 8010162:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010166:	f854 5b04 	ldr.w	r5, [r4], #4
 801016a:	b2da      	uxtb	r2, r3
 801016c:	042d      	lsls	r5, r5, #16
 801016e:	d407      	bmi.n	8010180 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8010170:	33e0      	adds	r3, #224	; 0xe0
 8010172:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 8010176:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8010178:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 801017c:	b2d0      	uxtb	r0, r2
 801017e:	bd30      	pop	{r4, r5, pc}
 8010180:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8010182:	2b0b      	cmp	r3, #11
 8010184:	d1ef      	bne.n	8010166 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8010186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801018a:	e7f7      	b.n	801017c <USBH_AllocPipe+0x1e>

0801018c <USBH_FreePipe>:
   if(idx < 11U)
 801018c:	290a      	cmp	r1, #10
 801018e:	bf9f      	itttt	ls
 8010190:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8010194:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8010198:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 801019c:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 80101a0:	2000      	movs	r0, #0
 80101a2:	4770      	bx	lr

080101a4 <GL_FillCircleAA_HiRes>:
 80101a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a8:	4607      	mov	r7, r0
 80101aa:	b083      	sub	sp, #12
 80101ac:	4616      	mov	r6, r2
 80101ae:	1a80      	subs	r0, r0, r2
 80101b0:	9101      	str	r1, [sp, #4]
 80101b2:	18b9      	adds	r1, r7, r2
 80101b4:	f001 f82c 	bl	8011210 <GUI_AA_Init_HiRes>
 80101b8:	2e00      	cmp	r6, #0
 80101ba:	9a01      	ldr	r2, [sp, #4]
 80101bc:	fb06 f506 	mul.w	r5, r6, r6
 80101c0:	bfb4      	ite	lt
 80101c2:	1c73      	addlt	r3, r6, #1
 80101c4:	4633      	movge	r3, r6
 80101c6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8010298 <GL_FillCircleAA_HiRes+0xf4>
 80101ca:	ebc6 0802 	rsb	r8, r6, r2
 80101ce:	eb05 0563 	add.w	r5, r5, r3, asr #1
 80101d2:	18b3      	adds	r3, r6, r2
 80101d4:	4619      	mov	r1, r3
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	f8d9 3000 	ldr.w	r3, [r9]
 80101dc:	695b      	ldr	r3, [r3, #20]
 80101de:	b153      	cbz	r3, 80101f6 <GL_FillCircleAA_HiRes+0x52>
 80101e0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80101e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80101e8:	4291      	cmp	r1, r2
 80101ea:	bfa8      	it	ge
 80101ec:	4611      	movge	r1, r2
 80101ee:	4598      	cmp	r8, r3
 80101f0:	bfb8      	it	lt
 80101f2:	4698      	movlt	r8, r3
 80101f4:	9100      	str	r1, [sp, #0]
 80101f6:	2e01      	cmp	r6, #1
 80101f8:	dd4b      	ble.n	8010292 <GL_FillCircleAA_HiRes+0xee>
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	4634      	mov	r4, r6
 80101fe:	f04f 0b01 	mov.w	fp, #1
 8010202:	f103 3aff 	add.w	sl, r3, #4294967295
 8010206:	45c2      	cmp	sl, r8
 8010208:	db15      	blt.n	8010236 <GL_FillCircleAA_HiRes+0x92>
 801020a:	9b00      	ldr	r3, [sp, #0]
 801020c:	459a      	cmp	sl, r3
 801020e:	dc12      	bgt.n	8010236 <GL_FillCircleAA_HiRes+0x92>
 8010210:	fb0b f20b 	mul.w	r2, fp, fp
 8010214:	fb04 2304 	mla	r3, r4, r4, r2
 8010218:	429d      	cmp	r5, r3
 801021a:	da04      	bge.n	8010226 <GL_FillCircleAA_HiRes+0x82>
 801021c:	3c01      	subs	r4, #1
 801021e:	fb04 2304 	mla	r3, r4, r4, r2
 8010222:	429d      	cmp	r5, r3
 8010224:	dbfa      	blt.n	801021c <GL_FillCircleAA_HiRes+0x78>
 8010226:	f8d9 3000 	ldr.w	r3, [r9]
 801022a:	193a      	adds	r2, r7, r4
 801022c:	4651      	mov	r1, sl
 801022e:	1b38      	subs	r0, r7, r4
 8010230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4798      	blx	r3
 8010236:	f10b 0b01 	add.w	fp, fp, #1
 801023a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801023e:	455e      	cmp	r6, fp
 8010240:	d1e1      	bne.n	8010206 <GL_FillCircleAA_HiRes+0x62>
 8010242:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010246:	4634      	mov	r4, r6
 8010248:	f04f 0b00 	mov.w	fp, #0
 801024c:	45d0      	cmp	r8, sl
 801024e:	dc15      	bgt.n	801027c <GL_FillCircleAA_HiRes+0xd8>
 8010250:	9b00      	ldr	r3, [sp, #0]
 8010252:	4553      	cmp	r3, sl
 8010254:	db12      	blt.n	801027c <GL_FillCircleAA_HiRes+0xd8>
 8010256:	fb0b f20b 	mul.w	r2, fp, fp
 801025a:	fb04 2304 	mla	r3, r4, r4, r2
 801025e:	429d      	cmp	r5, r3
 8010260:	da04      	bge.n	801026c <GL_FillCircleAA_HiRes+0xc8>
 8010262:	3c01      	subs	r4, #1
 8010264:	fb04 2304 	mla	r3, r4, r4, r2
 8010268:	429d      	cmp	r5, r3
 801026a:	dbfa      	blt.n	8010262 <GL_FillCircleAA_HiRes+0xbe>
 801026c:	f8d9 3000 	ldr.w	r3, [r9]
 8010270:	193a      	adds	r2, r7, r4
 8010272:	4651      	mov	r1, sl
 8010274:	1b38      	subs	r0, r7, r4
 8010276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4798      	blx	r3
 801027c:	f10b 0b01 	add.w	fp, fp, #1
 8010280:	f10a 0a01 	add.w	sl, sl, #1
 8010284:	455e      	cmp	r6, fp
 8010286:	d1e1      	bne.n	801024c <GL_FillCircleAA_HiRes+0xa8>
 8010288:	b003      	add	sp, #12
 801028a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028e:	f001 b88d 	b.w	80113ac <GUI_AA_Exit>
 8010292:	2e00      	cmp	r6, #0
 8010294:	ddf8      	ble.n	8010288 <GL_FillCircleAA_HiRes+0xe4>
 8010296:	e7d4      	b.n	8010242 <GL_FillCircleAA_HiRes+0x9e>
 8010298:	20000018 	.word	0x20000018

0801029c <GL_DrawCircleAA_HiRes>:
 801029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a0:	b08b      	sub	sp, #44	; 0x2c
 80102a2:	4614      	mov	r4, r2
 80102a4:	4605      	mov	r5, r0
 80102a6:	9106      	str	r1, [sp, #24]
 80102a8:	9007      	str	r0, [sp, #28]
 80102aa:	f003 fe59 	bl	8013f60 <GUI_GetPenSize>
 80102ae:	4b7f      	ldr	r3, [pc, #508]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 80102b0:	1b2a      	subs	r2, r5, r4
 80102b2:	1929      	adds	r1, r5, r4
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80102ba:	fb00 f003 	mul.w	r0, r0, r3
 80102be:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80102c2:	4401      	add	r1, r0
 80102c4:	1a10      	subs	r0, r2, r0
 80102c6:	f000 ffa3 	bl	8011210 <GUI_AA_Init_HiRes>
 80102ca:	f003 fe49 	bl	8013f60 <GUI_GetPenSize>
 80102ce:	4b77      	ldr	r3, [pc, #476]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 80102d6:	695b      	ldr	r3, [r3, #20]
 80102d8:	fb00 f005 	mul.w	r0, r0, r5
 80102dc:	f000 05ff 	and.w	r5, r0, #255	; 0xff
 80102e0:	eb04 0255 	add.w	r2, r4, r5, lsr #1
 80102e4:	2a00      	cmp	r2, #0
 80102e6:	eba2 0505 	sub.w	r5, r2, r5
 80102ea:	9201      	str	r2, [sp, #4]
 80102ec:	fb02 f602 	mul.w	r6, r2, r2
 80102f0:	bfb8      	it	lt
 80102f2:	3201      	addlt	r2, #1
 80102f4:	9901      	ldr	r1, [sp, #4]
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	eb06 0662 	add.w	r6, r6, r2, asr #1
 80102fc:	9a06      	ldr	r2, [sp, #24]
 80102fe:	46a8      	mov	r8, r5
 8010300:	fb05 f905 	mul.w	r9, r5, r5
 8010304:	eba2 0001 	sub.w	r0, r2, r1
 8010308:	eba2 0405 	sub.w	r4, r2, r5
 801030c:	4411      	add	r1, r2
 801030e:	bfb8      	it	lt
 8010310:	f105 0801 	addlt.w	r8, r5, #1
 8010314:	442a      	add	r2, r5
 8010316:	9003      	str	r0, [sp, #12]
 8010318:	eb09 0868 	add.w	r8, r9, r8, asr #1
 801031c:	9102      	str	r1, [sp, #8]
 801031e:	9404      	str	r4, [sp, #16]
 8010320:	9205      	str	r2, [sp, #20]
 8010322:	b15b      	cbz	r3, 801033c <GL_DrawCircleAA_HiRes+0xa0>
 8010324:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010328:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801032c:	4291      	cmp	r1, r2
 801032e:	bfa8      	it	ge
 8010330:	4611      	movge	r1, r2
 8010332:	4298      	cmp	r0, r3
 8010334:	bfb8      	it	lt
 8010336:	4618      	movlt	r0, r3
 8010338:	9102      	str	r1, [sp, #8]
 801033a:	9003      	str	r0, [sp, #12]
 801033c:	9b01      	ldr	r3, [sp, #4]
 801033e:	2b01      	cmp	r3, #1
 8010340:	f340 80b1 	ble.w	80104a6 <GL_DrawCircleAA_HiRes+0x20a>
 8010344:	461c      	mov	r4, r3
 8010346:	9b06      	ldr	r3, [sp, #24]
 8010348:	462f      	mov	r7, r5
 801034a:	9508      	str	r5, [sp, #32]
 801034c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010350:	f103 3aff 	add.w	sl, r3, #4294967295
 8010354:	f04f 0b01 	mov.w	fp, #1
 8010358:	9d07      	ldr	r5, [sp, #28]
 801035a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801035e:	45ca      	cmp	sl, r9
 8010360:	db18      	blt.n	8010394 <GL_DrawCircleAA_HiRes+0xf8>
 8010362:	9b02      	ldr	r3, [sp, #8]
 8010364:	459a      	cmp	sl, r3
 8010366:	dc15      	bgt.n	8010394 <GL_DrawCircleAA_HiRes+0xf8>
 8010368:	9b04      	ldr	r3, [sp, #16]
 801036a:	4553      	cmp	r3, sl
 801036c:	dd76      	ble.n	801045c <GL_DrawCircleAA_HiRes+0x1c0>
 801036e:	fb0b f20b 	mul.w	r2, fp, fp
 8010372:	fb04 2304 	mla	r3, r4, r4, r2
 8010376:	429e      	cmp	r6, r3
 8010378:	da04      	bge.n	8010384 <GL_DrawCircleAA_HiRes+0xe8>
 801037a:	3c01      	subs	r4, #1
 801037c:	fb04 2304 	mla	r3, r4, r4, r2
 8010380:	429e      	cmp	r6, r3
 8010382:	dbfa      	blt.n	801037a <GL_DrawCircleAA_HiRes+0xde>
 8010384:	4b49      	ldr	r3, [pc, #292]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 8010386:	192a      	adds	r2, r5, r4
 8010388:	4651      	mov	r1, sl
 801038a:	1b28      	subs	r0, r5, r4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4798      	blx	r3
 8010394:	f10b 0b01 	add.w	fp, fp, #1
 8010398:	9b01      	ldr	r3, [sp, #4]
 801039a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801039e:	455b      	cmp	r3, fp
 80103a0:	d1dd      	bne.n	801035e <GL_DrawCircleAA_HiRes+0xc2>
 80103a2:	9d08      	ldr	r5, [sp, #32]
 80103a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80103a8:	461c      	mov	r4, r3
 80103aa:	9f06      	ldr	r7, [sp, #24]
 80103ac:	f04f 0a00 	mov.w	sl, #0
 80103b0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	42bb      	cmp	r3, r7
 80103b8:	dc1a      	bgt.n	80103f0 <GL_DrawCircleAA_HiRes+0x154>
 80103ba:	9b02      	ldr	r3, [sp, #8]
 80103bc:	42bb      	cmp	r3, r7
 80103be:	db17      	blt.n	80103f0 <GL_DrawCircleAA_HiRes+0x154>
 80103c0:	9b05      	ldr	r3, [sp, #20]
 80103c2:	42bb      	cmp	r3, r7
 80103c4:	da1f      	bge.n	8010406 <GL_DrawCircleAA_HiRes+0x16a>
 80103c6:	fb0a f20a 	mul.w	r2, sl, sl
 80103ca:	fb04 2304 	mla	r3, r4, r4, r2
 80103ce:	429e      	cmp	r6, r3
 80103d0:	da04      	bge.n	80103dc <GL_DrawCircleAA_HiRes+0x140>
 80103d2:	3c01      	subs	r4, #1
 80103d4:	fb04 2304 	mla	r3, r4, r4, r2
 80103d8:	429e      	cmp	r6, r3
 80103da:	dbfa      	blt.n	80103d2 <GL_DrawCircleAA_HiRes+0x136>
 80103dc:	4b33      	ldr	r3, [pc, #204]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 80103de:	eb0b 0204 	add.w	r2, fp, r4
 80103e2:	4639      	mov	r1, r7
 80103e4:	ebc4 000b 	rsb	r0, r4, fp
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4798      	blx	r3
 80103f0:	f10a 0a01 	add.w	sl, sl, #1
 80103f4:	9b01      	ldr	r3, [sp, #4]
 80103f6:	3701      	adds	r7, #1
 80103f8:	4553      	cmp	r3, sl
 80103fa:	d1db      	bne.n	80103b4 <GL_DrawCircleAA_HiRes+0x118>
 80103fc:	b00b      	add	sp, #44	; 0x2c
 80103fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010402:	f000 bfd3 	b.w	80113ac <GUI_AA_Exit>
 8010406:	fb0a f30a 	mul.w	r3, sl, sl
 801040a:	fb04 3204 	mla	r2, r4, r4, r3
 801040e:	4296      	cmp	r6, r2
 8010410:	da0b      	bge.n	801042a <GL_DrawCircleAA_HiRes+0x18e>
 8010412:	3c01      	subs	r4, #1
 8010414:	fb04 3204 	mla	r2, r4, r4, r3
 8010418:	4296      	cmp	r6, r2
 801041a:	dbfa      	blt.n	8010412 <GL_DrawCircleAA_HiRes+0x176>
 801041c:	eb09 0203 	add.w	r2, r9, r3
 8010420:	4590      	cmp	r8, r2
 8010422:	da06      	bge.n	8010432 <GL_DrawCircleAA_HiRes+0x196>
 8010424:	3d01      	subs	r5, #1
 8010426:	fb05 f905 	mul.w	r9, r5, r5
 801042a:	eb09 0203 	add.w	r2, r9, r3
 801042e:	4590      	cmp	r8, r2
 8010430:	dbf8      	blt.n	8010424 <GL_DrawCircleAA_HiRes+0x188>
 8010432:	4b1e      	ldr	r3, [pc, #120]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 8010434:	ebc5 020b 	rsb	r2, r5, fp
 8010438:	4639      	mov	r1, r7
 801043a:	ebc4 000b 	rsb	r0, r4, fp
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4798      	blx	r3
 8010446:	4b19      	ldr	r3, [pc, #100]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 8010448:	eb0b 0204 	add.w	r2, fp, r4
 801044c:	4639      	mov	r1, r7
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	eb0b 0005 	add.w	r0, fp, r5
 8010454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4798      	blx	r3
 801045a:	e7c9      	b.n	80103f0 <GL_DrawCircleAA_HiRes+0x154>
 801045c:	fb0b f30b 	mul.w	r3, fp, fp
 8010460:	fb04 3204 	mla	r2, r4, r4, r3
 8010464:	4296      	cmp	r6, r2
 8010466:	da09      	bge.n	801047c <GL_DrawCircleAA_HiRes+0x1e0>
 8010468:	3c01      	subs	r4, #1
 801046a:	fb04 3204 	mla	r2, r4, r4, r3
 801046e:	4296      	cmp	r6, r2
 8010470:	dbfa      	blt.n	8010468 <GL_DrawCircleAA_HiRes+0x1cc>
 8010472:	fb07 3207 	mla	r2, r7, r7, r3
 8010476:	4590      	cmp	r8, r2
 8010478:	da04      	bge.n	8010484 <GL_DrawCircleAA_HiRes+0x1e8>
 801047a:	3f01      	subs	r7, #1
 801047c:	fb07 3207 	mla	r2, r7, r7, r3
 8010480:	4590      	cmp	r8, r2
 8010482:	dbfa      	blt.n	801047a <GL_DrawCircleAA_HiRes+0x1de>
 8010484:	4b09      	ldr	r3, [pc, #36]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 8010486:	1bea      	subs	r2, r5, r7
 8010488:	4651      	mov	r1, sl
 801048a:	1b28      	subs	r0, r5, r4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4798      	blx	r3
 8010494:	4b05      	ldr	r3, [pc, #20]	; (80104ac <GL_DrawCircleAA_HiRes+0x210>)
 8010496:	192a      	adds	r2, r5, r4
 8010498:	4651      	mov	r1, sl
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	19e8      	adds	r0, r5, r7
 801049e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	4798      	blx	r3
 80104a4:	e776      	b.n	8010394 <GL_DrawCircleAA_HiRes+0xf8>
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	dda8      	ble.n	80103fc <GL_DrawCircleAA_HiRes+0x160>
 80104aa:	e77d      	b.n	80103a8 <GL_DrawCircleAA_HiRes+0x10c>
 80104ac:	20000018 	.word	0x20000018

080104b0 <GL_FillEllipseAA_HiRes>:
 80104b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b4:	4604      	mov	r4, r0
 80104b6:	b087      	sub	sp, #28
 80104b8:	4616      	mov	r6, r2
 80104ba:	1a80      	subs	r0, r0, r2
 80104bc:	9104      	str	r1, [sp, #16]
 80104be:	460f      	mov	r7, r1
 80104c0:	18a1      	adds	r1, r4, r2
 80104c2:	4698      	mov	r8, r3
 80104c4:	f000 fea4 	bl	8011210 <GUI_AA_Init_HiRes>
 80104c8:	fb06 f306 	mul.w	r3, r6, r6
 80104cc:	f1b8 0f00 	cmp.w	r8, #0
 80104d0:	461a      	mov	r2, r3
 80104d2:	9300      	str	r3, [sp, #0]
 80104d4:	fb08 f308 	mul.w	r3, r8, r8
 80104d8:	ea4f 1222 	mov.w	r2, r2, asr #4
 80104dc:	ea4f 1323 	mov.w	r3, r3, asr #4
 80104e0:	9202      	str	r2, [sp, #8]
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	dd61      	ble.n	80105aa <GL_FillEllipseAA_HiRes+0xfa>
 80104e6:	1e63      	subs	r3, r4, #1
 80104e8:	2501      	movs	r5, #1
 80104ea:	46b1      	mov	r9, r6
 80104ec:	9605      	str	r6, [sp, #20]
 80104ee:	9303      	str	r3, [sp, #12]
 80104f0:	463b      	mov	r3, r7
 80104f2:	4f30      	ldr	r7, [pc, #192]	; (80105b4 <GL_FillEllipseAA_HiRes+0x104>)
 80104f4:	442b      	add	r3, r5
 80104f6:	469a      	mov	sl, r3
 80104f8:	9b02      	ldr	r3, [sp, #8]
 80104fa:	fb05 f005 	mul.w	r0, r5, r5
 80104fe:	ebc5 060a 	rsb	r6, r5, sl
 8010502:	3501      	adds	r5, #1
 8010504:	fb03 f000 	mul.w	r0, r3, r0
 8010508:	9b01      	ldr	r3, [sp, #4]
 801050a:	fbb0 f0f3 	udiv	r0, r0, r3
 801050e:	9b00      	ldr	r3, [sp, #0]
 8010510:	1a18      	subs	r0, r3, r0
 8010512:	f009 fab7 	bl	8019a84 <GUI__sqrt32>
 8010516:	4686      	mov	lr, r0
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	4631      	mov	r1, r6
 801051c:	45ce      	cmp	lr, r9
 801051e:	4620      	mov	r0, r4
 8010520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010522:	bf18      	it	ne
 8010524:	f109 39ff 	addne.w	r9, r9, #4294967295
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	eb04 0209 	add.w	r2, r4, r9
 801052e:	ebc9 0b04 	rsb	fp, r9, r4
 8010532:	46f1      	mov	r9, lr
 8010534:	4798      	blx	r3
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	4658      	mov	r0, fp
 801053a:	4631      	mov	r1, r6
 801053c:	9a03      	ldr	r2, [sp, #12]
 801053e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4798      	blx	r3
 8010544:	45a8      	cmp	r8, r5
 8010546:	dad7      	bge.n	80104f8 <GL_FillEllipseAA_HiRes+0x48>
 8010548:	9e05      	ldr	r6, [sp, #20]
 801054a:	9b04      	ldr	r3, [sp, #16]
 801054c:	2500      	movs	r5, #0
 801054e:	f103 3aff 	add.w	sl, r3, #4294967295
 8010552:	9b02      	ldr	r3, [sp, #8]
 8010554:	fb05 f005 	mul.w	r0, r5, r5
 8010558:	eb0a 0905 	add.w	r9, sl, r5
 801055c:	3501      	adds	r5, #1
 801055e:	fb03 f000 	mul.w	r0, r3, r0
 8010562:	9b01      	ldr	r3, [sp, #4]
 8010564:	fbb0 f0f3 	udiv	r0, r0, r3
 8010568:	9b00      	ldr	r3, [sp, #0]
 801056a:	1a18      	subs	r0, r3, r0
 801056c:	f009 fa8a 	bl	8019a84 <GUI__sqrt32>
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	42b0      	cmp	r0, r6
 8010574:	4686      	mov	lr, r0
 8010576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010578:	4649      	mov	r1, r9
 801057a:	bf18      	it	ne
 801057c:	f106 36ff 	addne.w	r6, r6, #4294967295
 8010580:	9a03      	ldr	r2, [sp, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	1ba0      	subs	r0, r4, r6
 8010586:	eb04 0b06 	add.w	fp, r4, r6
 801058a:	4676      	mov	r6, lr
 801058c:	4798      	blx	r3
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	465a      	mov	r2, fp
 8010592:	4649      	mov	r1, r9
 8010594:	4620      	mov	r0, r4
 8010596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4798      	blx	r3
 801059c:	45a8      	cmp	r8, r5
 801059e:	dad8      	bge.n	8010552 <GL_FillEllipseAA_HiRes+0xa2>
 80105a0:	b007      	add	sp, #28
 80105a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a6:	f000 bf01 	b.w	80113ac <GUI_AA_Exit>
 80105aa:	d1f9      	bne.n	80105a0 <GL_FillEllipseAA_HiRes+0xf0>
 80105ac:	1e63      	subs	r3, r4, #1
 80105ae:	4f01      	ldr	r7, [pc, #4]	; (80105b4 <GL_FillEllipseAA_HiRes+0x104>)
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	e7ca      	b.n	801054a <GL_FillEllipseAA_HiRes+0x9a>
 80105b4:	20000018 	.word	0x20000018

080105b8 <GUI_AA_FillCircle>:
 80105b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105bc:	4f30      	ldr	r7, [pc, #192]	; (8010680 <GUI_AA_FillCircle+0xc8>)
 80105be:	b083      	sub	sp, #12
 80105c0:	4605      	mov	r5, r0
 80105c2:	460c      	mov	r4, r1
 80105c4:	4616      	mov	r6, r2
 80105c6:	f007 ffed 	bl	80185a4 <GUI_Lock>
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8010684 <GUI_AA_FillCircle+0xcc>
 80105d0:	b1db      	cbz	r3, 801060a <GUI_AA_FillCircle+0x52>
 80105d2:	f8d9 3000 	ldr.w	r3, [r9]
 80105d6:	2000      	movs	r0, #0
 80105d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80105da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105dc:	4415      	add	r5, r2
 80105de:	441c      	add	r4, r3
 80105e0:	f010 fab8 	bl	8020b54 <WM__InitIVRSearch>
 80105e4:	b188      	cbz	r0, 801060a <GUI_AA_FillCircle+0x52>
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	4632      	mov	r2, r6
 80105ea:	4621      	mov	r1, r4
 80105ec:	4628      	mov	r0, r5
 80105ee:	4798      	blx	r3
 80105f0:	4680      	mov	r8, r0
 80105f2:	f010 f985 	bl	8020900 <WM__GetNextIVR>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d1f5      	bne.n	80105e6 <GUI_AA_FillCircle+0x2e>
 80105fa:	f1b8 0f00 	cmp.w	r8, #0
 80105fe:	d104      	bne.n	801060a <GUI_AA_FillCircle+0x52>
 8010600:	f007 ffc6 	bl	8018590 <GUI_Unlock>
 8010604:	b003      	add	sp, #12
 8010606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801060a:	f011 fcbf 	bl	8021f8c <WM__GetOrgX_AA>
 801060e:	4405      	add	r5, r0
 8010610:	f011 fcca 	bl	8021fa8 <WM__GetOrgY_AA>
 8010614:	f8d9 3000 	ldr.w	r3, [r9]
 8010618:	4404      	add	r4, r0
 801061a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801061e:	b332      	cbz	r2, 801066e <GUI_AA_FillCircle+0xb6>
 8010620:	1ba8      	subs	r0, r5, r6
 8010622:	f000 feb5 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010626:	f8ad 0000 	strh.w	r0, [sp]
 801062a:	19a8      	adds	r0, r5, r6
 801062c:	f000 feb0 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010630:	f8ad 0004 	strh.w	r0, [sp, #4]
 8010634:	1ba0      	subs	r0, r4, r6
 8010636:	f000 feab 	bl	8011390 <GUI_AA_HiRes2Pixel>
 801063a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801063e:	19a0      	adds	r0, r4, r6
 8010640:	f000 fea6 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010644:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010648:	4668      	mov	r0, sp
 801064a:	f010 fa83 	bl	8020b54 <WM__InitIVRSearch>
 801064e:	2800      	cmp	r0, #0
 8010650:	d0d6      	beq.n	8010600 <GUI_AA_FillCircle+0x48>
 8010652:	4632      	mov	r2, r6
 8010654:	4621      	mov	r1, r4
 8010656:	4628      	mov	r0, r5
 8010658:	f7ff fda4 	bl	80101a4 <GL_FillCircleAA_HiRes>
 801065c:	f010 f950 	bl	8020900 <WM__GetNextIVR>
 8010660:	2800      	cmp	r0, #0
 8010662:	d1f6      	bne.n	8010652 <GUI_AA_FillCircle+0x9a>
 8010664:	f007 ff94 	bl	8018590 <GUI_Unlock>
 8010668:	b003      	add	sp, #12
 801066a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801066e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010672:	fb03 f505 	mul.w	r5, r3, r5
 8010676:	fb03 f404 	mul.w	r4, r3, r4
 801067a:	fb03 f606 	mul.w	r6, r3, r6
 801067e:	e7cf      	b.n	8010620 <GUI_AA_FillCircle+0x68>
 8010680:	2000017c 	.word	0x2000017c
 8010684:	20000018 	.word	0x20000018

08010688 <GUI_AA_DrawCircle>:
 8010688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801068c:	4f30      	ldr	r7, [pc, #192]	; (8010750 <GUI_AA_DrawCircle+0xc8>)
 801068e:	b083      	sub	sp, #12
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	4616      	mov	r6, r2
 8010696:	f007 ff85 	bl	80185a4 <GUI_Lock>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8010754 <GUI_AA_DrawCircle+0xcc>
 80106a0:	b1db      	cbz	r3, 80106da <GUI_AA_DrawCircle+0x52>
 80106a2:	f8d9 3000 	ldr.w	r3, [r9]
 80106a6:	2000      	movs	r0, #0
 80106a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106ac:	4415      	add	r5, r2
 80106ae:	441c      	add	r4, r3
 80106b0:	f010 fa50 	bl	8020b54 <WM__InitIVRSearch>
 80106b4:	b188      	cbz	r0, 80106da <GUI_AA_DrawCircle+0x52>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4632      	mov	r2, r6
 80106ba:	4621      	mov	r1, r4
 80106bc:	4628      	mov	r0, r5
 80106be:	4798      	blx	r3
 80106c0:	4680      	mov	r8, r0
 80106c2:	f010 f91d 	bl	8020900 <WM__GetNextIVR>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d1f5      	bne.n	80106b6 <GUI_AA_DrawCircle+0x2e>
 80106ca:	f1b8 0f00 	cmp.w	r8, #0
 80106ce:	d104      	bne.n	80106da <GUI_AA_DrawCircle+0x52>
 80106d0:	f007 ff5e 	bl	8018590 <GUI_Unlock>
 80106d4:	b003      	add	sp, #12
 80106d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106da:	f011 fc57 	bl	8021f8c <WM__GetOrgX_AA>
 80106de:	4405      	add	r5, r0
 80106e0:	f011 fc62 	bl	8021fa8 <WM__GetOrgY_AA>
 80106e4:	f8d9 3000 	ldr.w	r3, [r9]
 80106e8:	4404      	add	r4, r0
 80106ea:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80106ee:	b332      	cbz	r2, 801073e <GUI_AA_DrawCircle+0xb6>
 80106f0:	1ba8      	subs	r0, r5, r6
 80106f2:	f000 fe4d 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80106f6:	f8ad 0000 	strh.w	r0, [sp]
 80106fa:	19a8      	adds	r0, r5, r6
 80106fc:	f000 fe48 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010700:	f8ad 0004 	strh.w	r0, [sp, #4]
 8010704:	1ba0      	subs	r0, r4, r6
 8010706:	f000 fe43 	bl	8011390 <GUI_AA_HiRes2Pixel>
 801070a:	f8ad 0002 	strh.w	r0, [sp, #2]
 801070e:	19a0      	adds	r0, r4, r6
 8010710:	f000 fe3e 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010714:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010718:	4668      	mov	r0, sp
 801071a:	f010 fa1b 	bl	8020b54 <WM__InitIVRSearch>
 801071e:	2800      	cmp	r0, #0
 8010720:	d0d6      	beq.n	80106d0 <GUI_AA_DrawCircle+0x48>
 8010722:	4632      	mov	r2, r6
 8010724:	4621      	mov	r1, r4
 8010726:	4628      	mov	r0, r5
 8010728:	f7ff fdb8 	bl	801029c <GL_DrawCircleAA_HiRes>
 801072c:	f010 f8e8 	bl	8020900 <WM__GetNextIVR>
 8010730:	2800      	cmp	r0, #0
 8010732:	d1f6      	bne.n	8010722 <GUI_AA_DrawCircle+0x9a>
 8010734:	f007 ff2c 	bl	8018590 <GUI_Unlock>
 8010738:	b003      	add	sp, #12
 801073a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801073e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010742:	fb03 f505 	mul.w	r5, r3, r5
 8010746:	fb03 f404 	mul.w	r4, r3, r4
 801074a:	fb03 f606 	mul.w	r6, r3, r6
 801074e:	e7cf      	b.n	80106f0 <GUI_AA_DrawCircle+0x68>
 8010750:	2000017c 	.word	0x2000017c
 8010754:	20000018 	.word	0x20000018

08010758 <GUI_AA_FillEllipse>:
 8010758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801075a:	4605      	mov	r5, r0
 801075c:	b083      	sub	sp, #12
 801075e:	460c      	mov	r4, r1
 8010760:	4617      	mov	r7, r2
 8010762:	461e      	mov	r6, r3
 8010764:	f007 ff1e 	bl	80185a4 <GUI_Lock>
 8010768:	f011 fc10 	bl	8021f8c <WM__GetOrgX_AA>
 801076c:	4405      	add	r5, r0
 801076e:	f011 fc1b 	bl	8021fa8 <WM__GetOrgY_AA>
 8010772:	4b1b      	ldr	r3, [pc, #108]	; (80107e0 <GUI_AA_FillEllipse+0x88>)
 8010774:	4404      	add	r4, r0
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 801077c:	b94a      	cbnz	r2, 8010792 <GUI_AA_FillEllipse+0x3a>
 801077e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010782:	fb03 f505 	mul.w	r5, r3, r5
 8010786:	fb03 f404 	mul.w	r4, r3, r4
 801078a:	fb03 f707 	mul.w	r7, r3, r7
 801078e:	fb03 f606 	mul.w	r6, r3, r6
 8010792:	1be8      	subs	r0, r5, r7
 8010794:	f000 fdfc 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010798:	f8ad 0000 	strh.w	r0, [sp]
 801079c:	19e8      	adds	r0, r5, r7
 801079e:	f000 fdf7 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80107a2:	f8ad 0004 	strh.w	r0, [sp, #4]
 80107a6:	1ba0      	subs	r0, r4, r6
 80107a8:	f000 fdf2 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80107ac:	f8ad 0002 	strh.w	r0, [sp, #2]
 80107b0:	19a0      	adds	r0, r4, r6
 80107b2:	f000 fded 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80107b6:	f8ad 0006 	strh.w	r0, [sp, #6]
 80107ba:	4668      	mov	r0, sp
 80107bc:	f010 f9ca 	bl	8020b54 <WM__InitIVRSearch>
 80107c0:	b148      	cbz	r0, 80107d6 <GUI_AA_FillEllipse+0x7e>
 80107c2:	4633      	mov	r3, r6
 80107c4:	463a      	mov	r2, r7
 80107c6:	4621      	mov	r1, r4
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7ff fe71 	bl	80104b0 <GL_FillEllipseAA_HiRes>
 80107ce:	f010 f897 	bl	8020900 <WM__GetNextIVR>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	d1f5      	bne.n	80107c2 <GUI_AA_FillEllipse+0x6a>
 80107d6:	f007 fedb 	bl	8018590 <GUI_Unlock>
 80107da:	b003      	add	sp, #12
 80107dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107de:	bf00      	nop
 80107e0:	20000018 	.word	0x20000018

080107e4 <GUI_AA_DrawRoundedRect.part.0>:
 80107e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e8:	f8df 9404 	ldr.w	r9, [pc, #1028]	; 8010bf0 <GUI_AA_DrawRoundedRect.part.0+0x40c>
 80107ec:	b095      	sub	sp, #84	; 0x54
 80107ee:	4616      	mov	r6, r2
 80107f0:	469b      	mov	fp, r3
 80107f2:	4607      	mov	r7, r0
 80107f4:	460d      	mov	r5, r1
 80107f6:	f007 fed5 	bl	80185a4 <GUI_Lock>
 80107fa:	f8d9 3000 	ldr.w	r3, [r9]
 80107fe:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010802:	2a00      	cmp	r2, #0
 8010804:	f040 81f0 	bne.w	8010be8 <GUI_AA_DrawRoundedRect.part.0+0x404>
 8010808:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801080c:	2204      	movs	r2, #4
 801080e:	9111      	str	r1, [sp, #68]	; 0x44
 8010810:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010814:	f011 fbba 	bl	8021f8c <WM__GetOrgX_AA>
 8010818:	4407      	add	r7, r0
 801081a:	f011 fbc5 	bl	8021fa8 <WM__GetOrgY_AA>
 801081e:	4405      	add	r5, r0
 8010820:	f011 fbb4 	bl	8021f8c <WM__GetOrgX_AA>
 8010824:	4406      	add	r6, r0
 8010826:	f011 fbbf 	bl	8021fa8 <WM__GetOrgY_AA>
 801082a:	f8d9 3000 	ldr.w	r3, [r9]
 801082e:	4483      	add	fp, r0
 8010830:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010834:	b96a      	cbnz	r2, 8010852 <GUI_AA_DrawRoundedRect.part.0+0x6e>
 8010836:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801083a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801083c:	fb03 f707 	mul.w	r7, r3, r7
 8010840:	fb03 f202 	mul.w	r2, r3, r2
 8010844:	fb03 f505 	mul.w	r5, r3, r5
 8010848:	fb03 f606 	mul.w	r6, r3, r6
 801084c:	fb03 fb0b 	mul.w	fp, r3, fp
 8010850:	921e      	str	r2, [sp, #120]	; 0x78
 8010852:	f003 fb85 	bl	8013f60 <GUI_GetPenSize>
 8010856:	f8d9 3000 	ldr.w	r3, [r9]
 801085a:	f893 a068 	ldrb.w	sl, [r3, #104]	; 0x68
 801085e:	fb00 f00a 	mul.w	r0, r0, sl
 8010862:	f10a 0301 	add.w	r3, sl, #1
 8010866:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 801086a:	105b      	asrs	r3, r3, #1
 801086c:	ea4f 0854 	mov.w	r8, r4, lsr #1
 8010870:	eb08 0106 	add.w	r1, r8, r6
 8010874:	ebc8 0707 	rsb	r7, r8, r7
 8010878:	ebc8 0205 	rsb	r2, r8, r5
 801087c:	44c3      	add	fp, r8
 801087e:	4419      	add	r1, r3
 8010880:	19d8      	adds	r0, r3, r7
 8010882:	441a      	add	r2, r3
 8010884:	445b      	add	r3, fp
 8010886:	9008      	str	r0, [sp, #32]
 8010888:	461d      	mov	r5, r3
 801088a:	930f      	str	r3, [sp, #60]	; 0x3c
 801088c:	1e4b      	subs	r3, r1, #1
 801088e:	461e      	mov	r6, r3
 8010890:	9309      	str	r3, [sp, #36]	; 0x24
 8010892:	1e53      	subs	r3, r2, #1
 8010894:	461f      	mov	r7, r3
 8010896:	930e      	str	r3, [sp, #56]	; 0x38
 8010898:	f000 fd7a 	bl	8011390 <GUI_AA_HiRes2Pixel>
 801089c:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 80108a0:	4630      	mov	r0, r6
 80108a2:	f000 fd75 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80108a6:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 80108aa:	4638      	mov	r0, r7
 80108ac:	f000 fd70 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80108b0:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
 80108b4:	4628      	mov	r0, r5
 80108b6:	f000 fd6b 	bl	8011390 <GUI_AA_HiRes2Pixel>
 80108ba:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
 80108be:	a812      	add	r0, sp, #72	; 0x48
 80108c0:	f010 f948 	bl	8020b54 <WM__InitIVRSearch>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f000 816f 	beq.w	8010ba8 <GUI_AA_DrawRoundedRect.part.0+0x3c4>
 80108ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80108cc:	eb08 0103 	add.w	r1, r8, r3
 80108d0:	9b08      	ldr	r3, [sp, #32]
 80108d2:	191a      	adds	r2, r3, r4
 80108d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d6:	eba1 015a 	sub.w	r1, r1, sl, lsr #1
 80108da:	1b1b      	subs	r3, r3, r4
 80108dc:	3a01      	subs	r2, #1
 80108de:	2900      	cmp	r1, #0
 80108e0:	9107      	str	r1, [sp, #28]
 80108e2:	f103 0301 	add.w	r3, r3, #1
 80108e6:	9210      	str	r2, [sp, #64]	; 0x40
 80108e8:	fb01 f201 	mul.w	r2, r1, r1
 80108ec:	9807      	ldr	r0, [sp, #28]
 80108ee:	9303      	str	r3, [sp, #12]
 80108f0:	eba1 0304 	sub.w	r3, r1, r4
 80108f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80108f6:	930a      	str	r3, [sp, #40]	; 0x28
 80108f8:	460b      	mov	r3, r1
 80108fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80108fc:	bfb8      	it	lt
 80108fe:	3301      	addlt	r3, #1
 8010900:	2900      	cmp	r1, #0
 8010902:	eb02 0763 	add.w	r7, r2, r3, asr #1
 8010906:	460b      	mov	r3, r1
 8010908:	fb01 f201 	mul.w	r2, r1, r1
 801090c:	eb04 0100 	add.w	r1, r4, r0
 8010910:	bfb8      	it	lt
 8010912:	3301      	addlt	r3, #1
 8010914:	910d      	str	r1, [sp, #52]	; 0x34
 8010916:	eb02 0863 	add.w	r8, r2, r3, asr #1
 801091a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801091c:	1a13      	subs	r3, r2, r0
 801091e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010920:	930b      	str	r3, [sp, #44]	; 0x2c
 8010922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010924:	4413      	add	r3, r2
 8010926:	9304      	str	r3, [sp, #16]
 8010928:	1c4b      	adds	r3, r1, #1
 801092a:	930c      	str	r3, [sp, #48]	; 0x30
 801092c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801092e:	9808      	ldr	r0, [sp, #32]
 8010930:	f000 fc6e 	bl	8011210 <GUI_AA_Init_HiRes>
 8010934:	f8d9 3000 	ldr.w	r3, [r9]
 8010938:	695b      	ldr	r3, [r3, #20]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 8142 	beq.w	8010bc4 <GUI_AA_DrawRoundedRect.part.0+0x3e0>
 8010940:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010944:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801094a:	428a      	cmp	r2, r1
 801094c:	bfa8      	it	ge
 801094e:	460a      	movge	r2, r1
 8010950:	9201      	str	r2, [sp, #4]
 8010952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010954:	4293      	cmp	r3, r2
 8010956:	bfb8      	it	lt
 8010958:	4613      	movlt	r3, r2
 801095a:	9302      	str	r3, [sp, #8]
 801095c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801095e:	2b00      	cmp	r3, #0
 8010960:	f340 8138 	ble.w	8010bd4 <GUI_AA_DrawRoundedRect.part.0+0x3f0>
 8010964:	9a07      	ldr	r2, [sp, #28]
 8010966:	461d      	mov	r5, r3
 8010968:	9908      	ldr	r1, [sp, #32]
 801096a:	f04f 0a00 	mov.w	sl, #0
 801096e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010970:	4614      	mov	r4, r2
 8010972:	4411      	add	r1, r2
 8010974:	9105      	str	r1, [sp, #20]
 8010976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010978:	ebc2 0b01 	rsb	fp, r2, r1
 801097c:	f8cd b018 	str.w	fp, [sp, #24]
 8010980:	469b      	mov	fp, r3
 8010982:	9b02      	ldr	r3, [sp, #8]
 8010984:	429e      	cmp	r6, r3
 8010986:	db2c      	blt.n	80109e2 <GUI_AA_DrawRoundedRect.part.0+0x1fe>
 8010988:	9b01      	ldr	r3, [sp, #4]
 801098a:	429e      	cmp	r6, r3
 801098c:	dc29      	bgt.n	80109e2 <GUI_AA_DrawRoundedRect.part.0+0x1fe>
 801098e:	fb0a f30a 	mul.w	r3, sl, sl
 8010992:	fb04 3204 	mla	r2, r4, r4, r3
 8010996:	42ba      	cmp	r2, r7
 8010998:	dd09      	ble.n	80109ae <GUI_AA_DrawRoundedRect.part.0+0x1ca>
 801099a:	3c01      	subs	r4, #1
 801099c:	fb04 3204 	mla	r2, r4, r4, r3
 80109a0:	42ba      	cmp	r2, r7
 80109a2:	dcfa      	bgt.n	801099a <GUI_AA_DrawRoundedRect.part.0+0x1b6>
 80109a4:	fb05 3205 	mla	r2, r5, r5, r3
 80109a8:	4542      	cmp	r2, r8
 80109aa:	dd04      	ble.n	80109b6 <GUI_AA_DrawRoundedRect.part.0+0x1d2>
 80109ac:	3d01      	subs	r5, #1
 80109ae:	fb05 3205 	mla	r2, r5, r5, r3
 80109b2:	4542      	cmp	r2, r8
 80109b4:	dcfa      	bgt.n	80109ac <GUI_AA_DrawRoundedRect.part.0+0x1c8>
 80109b6:	f8d9 3000 	ldr.w	r3, [r9]
 80109ba:	4631      	mov	r1, r6
 80109bc:	9a04      	ldr	r2, [sp, #16]
 80109be:	9805      	ldr	r0, [sp, #20]
 80109c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109c2:	1b52      	subs	r2, r2, r5
 80109c4:	1b00      	subs	r0, r0, r4
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4798      	blx	r3
 80109ca:	9a03      	ldr	r2, [sp, #12]
 80109cc:	f8d9 3000 	ldr.w	r3, [r9]
 80109d0:	4631      	mov	r1, r6
 80109d2:	ebcb 0002 	rsb	r0, fp, r2
 80109d6:	9a06      	ldr	r2, [sp, #24]
 80109d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109da:	4422      	add	r2, r4
 80109dc:	4428      	add	r0, r5
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4798      	blx	r3
 80109e2:	f10a 0a01 	add.w	sl, sl, #1
 80109e6:	3e01      	subs	r6, #1
 80109e8:	45da      	cmp	sl, fp
 80109ea:	d1ca      	bne.n	8010982 <GUI_AA_DrawRoundedRect.part.0+0x19e>
 80109ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80109f0:	9b07      	ldr	r3, [sp, #28]
 80109f2:	455b      	cmp	r3, fp
 80109f4:	dd2f      	ble.n	8010a56 <GUI_AA_DrawRoundedRect.part.0+0x272>
 80109f6:	461a      	mov	r2, r3
 80109f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80109fe:	ebcb 0503 	rsb	r5, fp, r3
 8010a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a04:	4690      	mov	r8, r2
 8010a06:	4619      	mov	r1, r3
 8010a08:	ebc2 0a01 	rsb	sl, r2, r1
 8010a0c:	9908      	ldr	r1, [sp, #32]
 8010a0e:	188e      	adds	r6, r1, r2
 8010a10:	9605      	str	r6, [sp, #20]
 8010a12:	9e02      	ldr	r6, [sp, #8]
 8010a14:	42ae      	cmp	r6, r5
 8010a16:	dc17      	bgt.n	8010a48 <GUI_AA_DrawRoundedRect.part.0+0x264>
 8010a18:	9b01      	ldr	r3, [sp, #4]
 8010a1a:	42ab      	cmp	r3, r5
 8010a1c:	db14      	blt.n	8010a48 <GUI_AA_DrawRoundedRect.part.0+0x264>
 8010a1e:	fb0b f20b 	mul.w	r2, fp, fp
 8010a22:	fb04 2304 	mla	r3, r4, r4, r2
 8010a26:	42bb      	cmp	r3, r7
 8010a28:	dd04      	ble.n	8010a34 <GUI_AA_DrawRoundedRect.part.0+0x250>
 8010a2a:	3c01      	subs	r4, #1
 8010a2c:	fb04 2304 	mla	r3, r4, r4, r2
 8010a30:	42bb      	cmp	r3, r7
 8010a32:	dcfa      	bgt.n	8010a2a <GUI_AA_DrawRoundedRect.part.0+0x246>
 8010a34:	f8d9 3000 	ldr.w	r3, [r9]
 8010a38:	eb0a 0204 	add.w	r2, sl, r4
 8010a3c:	9805      	ldr	r0, [sp, #20]
 8010a3e:	4629      	mov	r1, r5
 8010a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a42:	1b00      	subs	r0, r0, r4
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4798      	blx	r3
 8010a48:	f10b 0b01 	add.w	fp, fp, #1
 8010a4c:	3d01      	subs	r5, #1
 8010a4e:	45d8      	cmp	r8, fp
 8010a50:	d1e0      	bne.n	8010a14 <GUI_AA_DrawRoundedRect.part.0+0x230>
 8010a52:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	da1b      	bge.n	8010a96 <GUI_AA_DrawRoundedRect.part.0+0x2b2>
 8010a5e:	9705      	str	r7, [sp, #20]
 8010a60:	461c      	mov	r4, r3
 8010a62:	4693      	mov	fp, r2
 8010a64:	9d08      	ldr	r5, [sp, #32]
 8010a66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010a68:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010a6c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8010a72:	4621      	mov	r1, r4
 8010a74:	463a      	mov	r2, r7
 8010a76:	4628      	mov	r0, r5
 8010a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4798      	blx	r3
 8010a7e:	f8d9 3000 	ldr.w	r3, [r9]
 8010a82:	4621      	mov	r1, r4
 8010a84:	3401      	adds	r4, #1
 8010a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010a88:	4632      	mov	r2, r6
 8010a8a:	4650      	mov	r0, sl
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	4798      	blx	r3
 8010a90:	455c      	cmp	r4, fp
 8010a92:	d1ec      	bne.n	8010a6e <GUI_AA_DrawRoundedRect.part.0+0x28a>
 8010a94:	9f05      	ldr	r7, [sp, #20]
 8010a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f340 80a0 	ble.w	8010bde <GUI_AA_DrawRoundedRect.part.0+0x3fa>
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	461d      	mov	r5, r3
 8010aa2:	9a08      	ldr	r2, [sp, #32]
 8010aa4:	f04f 0a00 	mov.w	sl, #0
 8010aa8:	9b07      	ldr	r3, [sp, #28]
 8010aaa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010aac:	441a      	add	r2, r3
 8010aae:	461c      	mov	r4, r3
 8010ab0:	9205      	str	r2, [sp, #20]
 8010ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ab4:	ebc3 0b02 	rsb	fp, r3, r2
 8010ab8:	f8cd b018 	str.w	fp, [sp, #24]
 8010abc:	468b      	mov	fp, r1
 8010abe:	9b02      	ldr	r3, [sp, #8]
 8010ac0:	42b3      	cmp	r3, r6
 8010ac2:	dc2c      	bgt.n	8010b1e <GUI_AA_DrawRoundedRect.part.0+0x33a>
 8010ac4:	9b01      	ldr	r3, [sp, #4]
 8010ac6:	42b3      	cmp	r3, r6
 8010ac8:	db29      	blt.n	8010b1e <GUI_AA_DrawRoundedRect.part.0+0x33a>
 8010aca:	fb0a f30a 	mul.w	r3, sl, sl
 8010ace:	fb04 3204 	mla	r2, r4, r4, r3
 8010ad2:	42ba      	cmp	r2, r7
 8010ad4:	dd09      	ble.n	8010aea <GUI_AA_DrawRoundedRect.part.0+0x306>
 8010ad6:	3c01      	subs	r4, #1
 8010ad8:	fb04 3204 	mla	r2, r4, r4, r3
 8010adc:	42ba      	cmp	r2, r7
 8010ade:	dcfa      	bgt.n	8010ad6 <GUI_AA_DrawRoundedRect.part.0+0x2f2>
 8010ae0:	fb05 3205 	mla	r2, r5, r5, r3
 8010ae4:	4542      	cmp	r2, r8
 8010ae6:	dd04      	ble.n	8010af2 <GUI_AA_DrawRoundedRect.part.0+0x30e>
 8010ae8:	3d01      	subs	r5, #1
 8010aea:	fb05 3205 	mla	r2, r5, r5, r3
 8010aee:	4542      	cmp	r2, r8
 8010af0:	dcfa      	bgt.n	8010ae8 <GUI_AA_DrawRoundedRect.part.0+0x304>
 8010af2:	f8d9 3000 	ldr.w	r3, [r9]
 8010af6:	4631      	mov	r1, r6
 8010af8:	9a04      	ldr	r2, [sp, #16]
 8010afa:	9805      	ldr	r0, [sp, #20]
 8010afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010afe:	1b52      	subs	r2, r2, r5
 8010b00:	1b00      	subs	r0, r0, r4
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4798      	blx	r3
 8010b06:	9a03      	ldr	r2, [sp, #12]
 8010b08:	f8d9 3000 	ldr.w	r3, [r9]
 8010b0c:	4631      	mov	r1, r6
 8010b0e:	ebcb 0002 	rsb	r0, fp, r2
 8010b12:	9a06      	ldr	r2, [sp, #24]
 8010b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b16:	4422      	add	r2, r4
 8010b18:	4428      	add	r0, r5
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4798      	blx	r3
 8010b1e:	f10a 0a01 	add.w	sl, sl, #1
 8010b22:	3601      	adds	r6, #1
 8010b24:	45da      	cmp	sl, fp
 8010b26:	d1ca      	bne.n	8010abe <GUI_AA_DrawRoundedRect.part.0+0x2da>
 8010b28:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010b2c:	9b07      	ldr	r3, [sp, #28]
 8010b2e:	455b      	cmp	r3, fp
 8010b30:	dd33      	ble.n	8010b9a <GUI_AA_DrawRoundedRect.part.0+0x3b6>
 8010b32:	461a      	mov	r2, r3
 8010b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b36:	f8cd 8014 	str.w	r8, [sp, #20]
 8010b3a:	eb0b 0503 	add.w	r5, fp, r3
 8010b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b40:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b44:	4619      	mov	r1, r3
 8010b46:	ebc2 0a01 	rsb	sl, r2, r1
 8010b4a:	9908      	ldr	r1, [sp, #32]
 8010b4c:	188e      	adds	r6, r1, r2
 8010b4e:	f8cd a008 	str.w	sl, [sp, #8]
 8010b52:	f8dd a004 	ldr.w	sl, [sp, #4]
 8010b56:	9601      	str	r6, [sp, #4]
 8010b58:	4616      	mov	r6, r2
 8010b5a:	45a8      	cmp	r8, r5
 8010b5c:	dc16      	bgt.n	8010b8c <GUI_AA_DrawRoundedRect.part.0+0x3a8>
 8010b5e:	45aa      	cmp	sl, r5
 8010b60:	db14      	blt.n	8010b8c <GUI_AA_DrawRoundedRect.part.0+0x3a8>
 8010b62:	fb0b f20b 	mul.w	r2, fp, fp
 8010b66:	fb04 2304 	mla	r3, r4, r4, r2
 8010b6a:	42bb      	cmp	r3, r7
 8010b6c:	dd04      	ble.n	8010b78 <GUI_AA_DrawRoundedRect.part.0+0x394>
 8010b6e:	3c01      	subs	r4, #1
 8010b70:	fb04 2304 	mla	r3, r4, r4, r2
 8010b74:	42bb      	cmp	r3, r7
 8010b76:	dcfa      	bgt.n	8010b6e <GUI_AA_DrawRoundedRect.part.0+0x38a>
 8010b78:	f8d9 3000 	ldr.w	r3, [r9]
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	9a02      	ldr	r2, [sp, #8]
 8010b80:	9801      	ldr	r0, [sp, #4]
 8010b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b84:	4422      	add	r2, r4
 8010b86:	1b00      	subs	r0, r0, r4
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4798      	blx	r3
 8010b8c:	f10b 0b01 	add.w	fp, fp, #1
 8010b90:	3501      	adds	r5, #1
 8010b92:	455e      	cmp	r6, fp
 8010b94:	d1e1      	bne.n	8010b5a <GUI_AA_DrawRoundedRect.part.0+0x376>
 8010b96:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010b9a:	f000 fc07 	bl	80113ac <GUI_AA_Exit>
 8010b9e:	f00f feaf 	bl	8020900 <WM__GetNextIVR>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f47f aec2 	bne.w	801092c <GUI_AA_DrawRoundedRect.part.0+0x148>
 8010ba8:	f8d9 3000 	ldr.w	r3, [r9]
 8010bac:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010bb0:	b91a      	cbnz	r2, 8010bba <GUI_AA_DrawRoundedRect.part.0+0x3d6>
 8010bb2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8010bb6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010bba:	f007 fce9 	bl	8018590 <GUI_Unlock>
 8010bbe:	b015      	add	sp, #84	; 0x54
 8010bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bca:	9302      	str	r3, [sp, #8]
 8010bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f73f aec8 	bgt.w	8010964 <GUI_AA_DrawRoundedRect.part.0+0x180>
 8010bd4:	9c07      	ldr	r4, [sp, #28]
 8010bd6:	f04f 0b00 	mov.w	fp, #0
 8010bda:	4623      	mov	r3, r4
 8010bdc:	e709      	b.n	80109f2 <GUI_AA_DrawRoundedRect.part.0+0x20e>
 8010bde:	9c07      	ldr	r4, [sp, #28]
 8010be0:	f04f 0b00 	mov.w	fp, #0
 8010be4:	4623      	mov	r3, r4
 8010be6:	e7a2      	b.n	8010b2e <GUI_AA_DrawRoundedRect.part.0+0x34a>
 8010be8:	2300      	movs	r3, #0
 8010bea:	9311      	str	r3, [sp, #68]	; 0x44
 8010bec:	e612      	b.n	8010814 <GUI_AA_DrawRoundedRect.part.0+0x30>
 8010bee:	bf00      	nop
 8010bf0:	20000018 	.word	0x20000018

08010bf4 <GUI_AA_DrawRoundedRect>:
 8010bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf6:	9d05      	ldr	r5, [sp, #20]
 8010bf8:	1a16      	subs	r6, r2, r0
 8010bfa:	ebb6 0645 	subs.w	r6, r6, r5, lsl #1
 8010bfe:	d409      	bmi.n	8010c14 <GUI_AA_DrawRoundedRect+0x20>
 8010c00:	006f      	lsls	r7, r5, #1
 8010c02:	1a5c      	subs	r4, r3, r1
 8010c04:	468e      	mov	lr, r1
 8010c06:	1be4      	subs	r4, r4, r7
 8010c08:	2c00      	cmp	r4, #0
 8010c0a:	db03      	blt.n	8010c14 <GUI_AA_DrawRoundedRect+0x20>
 8010c0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c10:	f7ff bde8 	b.w	80107e4 <GUI_AA_DrawRoundedRect.part.0>
 8010c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c16:	bf00      	nop

08010c18 <GUI_AA_FillRoundedRect>:
 8010c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1c:	1a15      	subs	r5, r2, r0
 8010c1e:	b08d      	sub	sp, #52	; 0x34
 8010c20:	3501      	adds	r5, #1
 8010c22:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010c26:	ebb5 0548 	subs.w	r5, r5, r8, lsl #1
 8010c2a:	f100 8127 	bmi.w	8010e7c <GUI_AA_FillRoundedRect+0x264>
 8010c2e:	ea4f 0448 	mov.w	r4, r8, lsl #1
 8010c32:	1a5e      	subs	r6, r3, r1
 8010c34:	1b36      	subs	r6, r6, r4
 8010c36:	f116 0f01 	cmn.w	r6, #1
 8010c3a:	f100 811f 	bmi.w	8010e7c <GUI_AA_FillRoundedRect+0x264>
 8010c3e:	4f95      	ldr	r7, [pc, #596]	; (8010e94 <GUI_AA_FillRoundedRect+0x27c>)
 8010c40:	461d      	mov	r5, r3
 8010c42:	4614      	mov	r4, r2
 8010c44:	460e      	mov	r6, r1
 8010c46:	4681      	mov	r9, r0
 8010c48:	f007 fcac 	bl	80185a4 <GUI_Lock>
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010c52:	2a00      	cmp	r2, #0
 8010c54:	f040 811a 	bne.w	8010e8c <GUI_AA_FillRoundedRect+0x274>
 8010c58:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010c5c:	2204      	movs	r2, #4
 8010c5e:	9109      	str	r1, [sp, #36]	; 0x24
 8010c60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010c64:	f011 f992 	bl	8021f8c <WM__GetOrgX_AA>
 8010c68:	eb09 0300 	add.w	r3, r9, r0
 8010c6c:	9306      	str	r3, [sp, #24]
 8010c6e:	f011 f99b 	bl	8021fa8 <WM__GetOrgY_AA>
 8010c72:	1833      	adds	r3, r6, r0
 8010c74:	9308      	str	r3, [sp, #32]
 8010c76:	f011 f989 	bl	8021f8c <WM__GetOrgX_AA>
 8010c7a:	4404      	add	r4, r0
 8010c7c:	f011 f994 	bl	8021fa8 <WM__GetOrgY_AA>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	4405      	add	r5, r0
 8010c84:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010c88:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010c8c:	b96a      	cbnz	r2, 8010caa <GUI_AA_FillRoundedRect+0x92>
 8010c8e:	9a06      	ldr	r2, [sp, #24]
 8010c90:	fb03 f404 	mul.w	r4, r3, r4
 8010c94:	fb03 f505 	mul.w	r5, r3, r5
 8010c98:	fb03 f202 	mul.w	r2, r3, r2
 8010c9c:	fb03 f808 	mul.w	r8, r3, r8
 8010ca0:	9206      	str	r2, [sp, #24]
 8010ca2:	9a08      	ldr	r2, [sp, #32]
 8010ca4:	fb03 f202 	mul.w	r2, r3, r2
 8010ca8:	9208      	str	r2, [sp, #32]
 8010caa:	441c      	add	r4, r3
 8010cac:	18eb      	adds	r3, r5, r3
 8010cae:	9806      	ldr	r0, [sp, #24]
 8010cb0:	461d      	mov	r5, r3
 8010cb2:	9305      	str	r3, [sp, #20]
 8010cb4:	9b08      	ldr	r3, [sp, #32]
 8010cb6:	3b01      	subs	r3, #1
 8010cb8:	461e      	mov	r6, r3
 8010cba:	9307      	str	r3, [sp, #28]
 8010cbc:	1e63      	subs	r3, r4, #1
 8010cbe:	461c      	mov	r4, r3
 8010cc0:	9304      	str	r3, [sp, #16]
 8010cc2:	f000 fb65 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010cc6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f000 fb60 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010cd0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f000 fb5b 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010cda:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f000 fb56 	bl	8011390 <GUI_AA_HiRes2Pixel>
 8010ce4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8010ce8:	a80a      	add	r0, sp, #40	; 0x28
 8010cea:	f00f ff33 	bl	8020b54 <WM__InitIVRSearch>
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	f000 80ba 	beq.w	8010e68 <GUI_AA_FillRoundedRect+0x250>
 8010cf4:	f1b8 0f00 	cmp.w	r8, #0
 8010cf8:	9a06      	ldr	r2, [sp, #24]
 8010cfa:	4643      	mov	r3, r8
 8010cfc:	fb08 f508 	mul.w	r5, r8, r8
 8010d00:	bfb8      	it	lt
 8010d02:	f108 0301 	addlt.w	r3, r8, #1
 8010d06:	4442      	add	r2, r8
 8010d08:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8010d0c:	1e53      	subs	r3, r2, #1
 8010d0e:	9202      	str	r2, [sp, #8]
 8010d10:	9303      	str	r3, [sp, #12]
 8010d12:	9904      	ldr	r1, [sp, #16]
 8010d14:	9806      	ldr	r0, [sp, #24]
 8010d16:	f000 fa7b 	bl	8011210 <GUI_AA_Init_HiRes>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	695b      	ldr	r3, [r3, #20]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 80af 	beq.w	8010e82 <GUI_AA_FillRoundedRect+0x26a>
 8010d24:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010d28:	9905      	ldr	r1, [sp, #20]
 8010d2a:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	428a      	cmp	r2, r1
 8010d32:	bfa8      	it	ge
 8010d34:	460b      	movge	r3, r1
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	9b07      	ldr	r3, [sp, #28]
 8010d3a:	4599      	cmp	r9, r3
 8010d3c:	bfb8      	it	lt
 8010d3e:	4699      	movlt	r9, r3
 8010d40:	f1b8 0f00 	cmp.w	r8, #0
 8010d44:	dd5d      	ble.n	8010e02 <GUI_AA_FillRoundedRect+0x1ea>
 8010d46:	9b07      	ldr	r3, [sp, #28]
 8010d48:	4644      	mov	r4, r8
 8010d4a:	f04f 0b00 	mov.w	fp, #0
 8010d4e:	eb03 0608 	add.w	r6, r3, r8
 8010d52:	9b04      	ldr	r3, [sp, #16]
 8010d54:	ebc8 0a03 	rsb	sl, r8, r3
 8010d58:	454e      	cmp	r6, r9
 8010d5a:	db1e      	blt.n	8010d9a <GUI_AA_FillRoundedRect+0x182>
 8010d5c:	9b01      	ldr	r3, [sp, #4]
 8010d5e:	429e      	cmp	r6, r3
 8010d60:	dc1b      	bgt.n	8010d9a <GUI_AA_FillRoundedRect+0x182>
 8010d62:	fb0b f20b 	mul.w	r2, fp, fp
 8010d66:	fb04 2304 	mla	r3, r4, r4, r2
 8010d6a:	42ab      	cmp	r3, r5
 8010d6c:	dd04      	ble.n	8010d78 <GUI_AA_FillRoundedRect+0x160>
 8010d6e:	3c01      	subs	r4, #1
 8010d70:	fb04 2304 	mla	r3, r4, r4, r2
 8010d74:	42ab      	cmp	r3, r5
 8010d76:	dcfa      	bgt.n	8010d6e <GUI_AA_FillRoundedRect+0x156>
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	9802      	ldr	r0, [sp, #8]
 8010d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d80:	9a03      	ldr	r2, [sp, #12]
 8010d82:	1b00      	subs	r0, r0, r4
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	4798      	blx	r3
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	eb0a 0204 	add.w	r2, sl, r4
 8010d8e:	4631      	mov	r1, r6
 8010d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d92:	f10a 0001 	add.w	r0, sl, #1
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4798      	blx	r3
 8010d9a:	f10b 0b01 	add.w	fp, fp, #1
 8010d9e:	3e01      	subs	r6, #1
 8010da0:	45d8      	cmp	r8, fp
 8010da2:	d1d9      	bne.n	8010d58 <GUI_AA_FillRoundedRect+0x140>
 8010da4:	9b05      	ldr	r3, [sp, #20]
 8010da6:	4644      	mov	r4, r8
 8010da8:	f04f 0b00 	mov.w	fp, #0
 8010dac:	ebc8 0603 	rsb	r6, r8, r3
 8010db0:	9b04      	ldr	r3, [sp, #16]
 8010db2:	ebc8 0a03 	rsb	sl, r8, r3
 8010db6:	45b1      	cmp	r9, r6
 8010db8:	dc1e      	bgt.n	8010df8 <GUI_AA_FillRoundedRect+0x1e0>
 8010dba:	9b01      	ldr	r3, [sp, #4]
 8010dbc:	42b3      	cmp	r3, r6
 8010dbe:	db1b      	blt.n	8010df8 <GUI_AA_FillRoundedRect+0x1e0>
 8010dc0:	fb0b f20b 	mul.w	r2, fp, fp
 8010dc4:	fb04 2304 	mla	r3, r4, r4, r2
 8010dc8:	42ab      	cmp	r3, r5
 8010dca:	dd04      	ble.n	8010dd6 <GUI_AA_FillRoundedRect+0x1be>
 8010dcc:	3c01      	subs	r4, #1
 8010dce:	fb04 2304 	mla	r3, r4, r4, r2
 8010dd2:	42ab      	cmp	r3, r5
 8010dd4:	dcfa      	bgt.n	8010dcc <GUI_AA_FillRoundedRect+0x1b4>
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	4631      	mov	r1, r6
 8010dda:	9802      	ldr	r0, [sp, #8]
 8010ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010dde:	9a03      	ldr	r2, [sp, #12]
 8010de0:	1b00      	subs	r0, r0, r4
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4798      	blx	r3
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	eb0a 0204 	add.w	r2, sl, r4
 8010dec:	4631      	mov	r1, r6
 8010dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010df0:	f10a 0001 	add.w	r0, sl, #1
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4798      	blx	r3
 8010df8:	f10b 0b01 	add.w	fp, fp, #1
 8010dfc:	3601      	adds	r6, #1
 8010dfe:	45d8      	cmp	r8, fp
 8010e00:	d1d9      	bne.n	8010db6 <GUI_AA_FillRoundedRect+0x19e>
 8010e02:	f000 fad3 	bl	80113ac <GUI_AA_Exit>
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	9a04      	ldr	r2, [sp, #16]
 8010e0a:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8010e0e:	9b05      	ldr	r3, [sp, #20]
 8010e10:	1e4e      	subs	r6, r1, #1
 8010e12:	1a5b      	subs	r3, r3, r1
 8010e14:	1b96      	subs	r6, r2, r6
 8010e16:	9a06      	ldr	r2, [sp, #24]
 8010e18:	fb92 faf1 	sdiv	sl, r2, r1
 8010e1c:	9a08      	ldr	r2, [sp, #32]
 8010e1e:	fb98 f4f1 	sdiv	r4, r8, r1
 8010e22:	fb93 f3f1 	sdiv	r3, r3, r1
 8010e26:	fb96 f6f1 	sdiv	r6, r6, r1
 8010e2a:	fb92 f1f1 	sdiv	r1, r2, r1
 8010e2e:	eb0a 0b04 	add.w	fp, sl, r4
 8010e32:	1b32      	subs	r2, r6, r4
 8010e34:	ebc4 0903 	rsb	r9, r4, r3
 8010e38:	440c      	add	r4, r1
 8010e3a:	4658      	mov	r0, fp
 8010e3c:	9201      	str	r2, [sp, #4]
 8010e3e:	f009 f94f 	bl	801a0e0 <LCD_FillRect>
 8010e42:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010e46:	4650      	mov	r0, sl
 8010e48:	464b      	mov	r3, r9
 8010e4a:	4621      	mov	r1, r4
 8010e4c:	f009 f948 	bl	801a0e0 <LCD_FillRect>
 8010e50:	9801      	ldr	r0, [sp, #4]
 8010e52:	464b      	mov	r3, r9
 8010e54:	4632      	mov	r2, r6
 8010e56:	4621      	mov	r1, r4
 8010e58:	3001      	adds	r0, #1
 8010e5a:	f009 f941 	bl	801a0e0 <LCD_FillRect>
 8010e5e:	f00f fd4f 	bl	8020900 <WM__GetNextIVR>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f47f af55 	bne.w	8010d12 <GUI_AA_FillRoundedRect+0xfa>
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8010e6e:	b91a      	cbnz	r2, 8010e78 <GUI_AA_FillRoundedRect+0x260>
 8010e70:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8010e74:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8010e78:	f007 fb8a 	bl	8018590 <GUI_Unlock>
 8010e7c:	b00d      	add	sp, #52	; 0x34
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	9b05      	ldr	r3, [sp, #20]
 8010e84:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010e88:	9301      	str	r3, [sp, #4]
 8010e8a:	e759      	b.n	8010d40 <GUI_AA_FillRoundedRect+0x128>
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e90:	e6e8      	b.n	8010c64 <GUI_AA_FillRoundedRect+0x4c>
 8010e92:	bf00      	nop
 8010e94:	20000018 	.word	0x20000018

08010e98 <_FlushLine>:
 8010e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	f8df a110 	ldr.w	sl, [pc, #272]	; 8010fb0 <_FlushLine+0x118>
 8010ea0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8010fc0 <_FlushLine+0x128>
 8010ea4:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010ea8:	f8d9 3000 	ldr.w	r3, [r9]
 8010eac:	e89a 0014 	ldmia.w	sl, {r2, r4}
 8010eb0:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 8010eb4:	1aa4      	subs	r4, r4, r2
 8010eb6:	fb15 f505 	smulbb	r5, r5, r5
 8010eba:	428c      	cmp	r4, r1
 8010ebc:	bfa8      	it	ge
 8010ebe:	f101 34ff 	addge.w	r4, r1, #4294967295
 8010ec2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ec4:	2900      	cmp	r1, #0
 8010ec6:	d06f      	beq.n	8010fa8 <_FlushLine+0x110>
 8010ec8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8010ecc:	4b38      	ldr	r3, [pc, #224]	; (8010fb0 <_FlushLine+0x118>)
 8010ece:	ebc2 0e01 	rsb	lr, r2, r1
 8010ed2:	6918      	ldr	r0, [r3, #16]
 8010ed4:	4574      	cmp	r4, lr
 8010ed6:	db32      	blt.n	8010f3e <_FlushLine+0xa6>
 8010ed8:	ea4f 0865 	mov.w	r8, r5, asr #1
 8010edc:	270f      	movs	r7, #15
 8010ede:	e004      	b.n	8010eea <_FlushLine+0x52>
 8010ee0:	f10e 0601 	add.w	r6, lr, #1
 8010ee4:	42b4      	cmp	r4, r6
 8010ee6:	46b6      	mov	lr, r6
 8010ee8:	db29      	blt.n	8010f3e <_FlushLine+0xa6>
 8010eea:	f810 300e 	ldrb.w	r3, [r0, lr]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d0f6      	beq.n	8010ee0 <_FlushLine+0x48>
 8010ef2:	429d      	cmp	r5, r3
 8010ef4:	d136      	bne.n	8010f64 <_FlushLine+0xcc>
 8010ef6:	4574      	cmp	r4, lr
 8010ef8:	f10e 0601 	add.w	r6, lr, #1
 8010efc:	dd46      	ble.n	8010f8c <_FlushLine+0xf4>
 8010efe:	5d83      	ldrb	r3, [r0, r6]
 8010f00:	4430      	add	r0, r6
 8010f02:	429d      	cmp	r5, r3
 8010f04:	d142      	bne.n	8010f8c <_FlushLine+0xf4>
 8010f06:	4673      	mov	r3, lr
 8010f08:	e003      	b.n	8010f12 <_FlushLine+0x7a>
 8010f0a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8010f0e:	428d      	cmp	r5, r1
 8010f10:	d13a      	bne.n	8010f88 <_FlushLine+0xf0>
 8010f12:	3301      	adds	r3, #1
 8010f14:	429c      	cmp	r4, r3
 8010f16:	d1f8      	bne.n	8010f0a <_FlushLine+0x72>
 8010f18:	4623      	mov	r3, r4
 8010f1a:	f8da 6018 	ldr.w	r6, [sl, #24]
 8010f1e:	eb0e 0002 	add.w	r0, lr, r2
 8010f22:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010f26:	441a      	add	r2, r3
 8010f28:	f8d6 b000 	ldr.w	fp, [r6]
 8010f2c:	1c5e      	adds	r6, r3, #1
 8010f2e:	47d8      	blx	fp
 8010f30:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010f34:	42b4      	cmp	r4, r6
 8010f36:	f8da 2000 	ldr.w	r2, [sl]
 8010f3a:	46b6      	mov	lr, r6
 8010f3c:	dad5      	bge.n	8010eea <_FlushLine+0x52>
 8010f3e:	f8da 301c 	ldr.w	r3, [sl, #28]
 8010f42:	2100      	movs	r1, #0
 8010f44:	4c1b      	ldr	r4, [pc, #108]	; (8010fb4 <_FlushLine+0x11c>)
 8010f46:	1a9a      	subs	r2, r3, r2
 8010f48:	6823      	ldr	r3, [r4, #0]
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	4798      	blx	r3
 8010f4e:	4b1a      	ldr	r3, [pc, #104]	; (8010fb8 <_FlushLine+0x120>)
 8010f50:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8010f54:	f8ca 3014 	str.w	r3, [sl, #20]
 8010f58:	f8ca 3004 	str.w	r3, [sl, #4]
 8010f5c:	f8ca 200c 	str.w	r2, [sl, #12]
 8010f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f64:	fb17 8303 	smlabb	r3, r7, r3, r8
 8010f68:	eb0e 0002 	add.w	r0, lr, r2
 8010f6c:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010f70:	f10e 0601 	add.w	r6, lr, #1
 8010f74:	fb93 f2f5 	sdiv	r2, r3, r5
 8010f78:	b2d2      	uxtb	r2, r2
 8010f7a:	f009 fd1d 	bl	801a9b8 <LCD_SetPixelAA4_Trans>
 8010f7e:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010f82:	f8da 2000 	ldr.w	r2, [sl]
 8010f86:	e7ad      	b.n	8010ee4 <_FlushLine+0x4c>
 8010f88:	4573      	cmp	r3, lr
 8010f8a:	d1c6      	bne.n	8010f1a <_FlushLine+0x82>
 8010f8c:	f8d9 3000 	ldr.w	r3, [r9]
 8010f90:	eb0e 0002 	add.w	r0, lr, r2
 8010f94:	f8da 1014 	ldr.w	r1, [sl, #20]
 8010f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	4798      	blx	r3
 8010f9e:	f8da 0010 	ldr.w	r0, [sl, #16]
 8010fa2:	f8da 2000 	ldr.w	r2, [sl]
 8010fa6:	e79d      	b.n	8010ee4 <_FlushLine+0x4c>
 8010fa8:	4904      	ldr	r1, [pc, #16]	; (8010fbc <_FlushLine+0x124>)
 8010faa:	66d9      	str	r1, [r3, #108]	; 0x6c
 8010fac:	e78c      	b.n	8010ec8 <_FlushLine+0x30>
 8010fae:	bf00      	nop
 8010fb0:	20000184 	.word	0x20000184
 8010fb4:	20000050 	.word	0x20000050
 8010fb8:	ffffc001 	.word	0xffffc001
 8010fbc:	0801a9b9 	.word	0x0801a9b9
 8010fc0:	20000018 	.word	0x20000018

08010fc4 <_OnExit>:
 8010fc4:	b510      	push	{r4, lr}
 8010fc6:	4c03      	ldr	r4, [pc, #12]	; (8010fd4 <_OnExit+0x10>)
 8010fc8:	6a20      	ldr	r0, [r4, #32]
 8010fca:	f001 fdaf 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	6223      	str	r3, [r4, #32]
 8010fd2:	bd10      	pop	{r4, pc}
 8010fd4:	20000184 	.word	0x20000184

08010fd8 <_DrawHLine>:
 8010fd8:	4282      	cmp	r2, r0
 8010fda:	db7a      	blt.n	80110d2 <_DrawHLine+0xfa>
 8010fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe0:	4d41      	ldr	r5, [pc, #260]	; (80110e8 <_DrawHLine+0x110>)
 8010fe2:	4614      	mov	r4, r2
 8010fe4:	4680      	mov	r8, r0
 8010fe6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80110ec <_DrawHLine+0x114>
 8010fea:	682a      	ldr	r2, [r5, #0]
 8010fec:	460e      	mov	r6, r1
 8010fee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010ff2:	f892 0068 	ldrb.w	r0, [r2, #104]	; 0x68
 8010ff6:	fb91 f2f0 	sdiv	r2, r1, r0
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d008      	beq.n	8011010 <_DrawHLine+0x38>
 8010ffe:	f7ff ff4b 	bl	8010e98 <_FlushLine>
 8011002:	682b      	ldr	r3, [r5, #0]
 8011004:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 8011008:	fb96 f6f0 	sdiv	r6, r6, r0
 801100c:	f8c9 6014 	str.w	r6, [r9, #20]
 8011010:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8011014:	4935      	ldr	r1, [pc, #212]	; (80110ec <_DrawHLine+0x114>)
 8011016:	f8d9 7000 	ldr.w	r7, [r9]
 801101a:	fb98 f3f0 	sdiv	r3, r8, r0
 801101e:	fb94 f6f0 	sdiv	r6, r4, r0
 8011022:	4293      	cmp	r3, r2
 8011024:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011028:	bfb8      	it	lt
 801102a:	60cb      	strlt	r3, [r1, #12]
 801102c:	4296      	cmp	r6, r2
 801102e:	492f      	ldr	r1, [pc, #188]	; (80110ec <_DrawHLine+0x114>)
 8011030:	4a2e      	ldr	r2, [pc, #184]	; (80110ec <_DrawHLine+0x114>)
 8011032:	bfc8      	it	gt
 8011034:	604e      	strgt	r6, [r1, #4]
 8011036:	42bb      	cmp	r3, r7
 8011038:	69d2      	ldr	r2, [r2, #28]
 801103a:	da41      	bge.n	80110c0 <_DrawHLine+0xe8>
 801103c:	4296      	cmp	r6, r2
 801103e:	fb00 f807 	mul.w	r8, r0, r7
 8011042:	dc3f      	bgt.n	80110c4 <_DrawHLine+0xec>
 8011044:	4544      	cmp	r4, r8
 8011046:	db42      	blt.n	80110ce <_DrawHLine+0xf6>
 8011048:	fb98 f3f0 	sdiv	r3, r8, r0
 801104c:	fb94 f6f0 	sdiv	r6, r4, r0
 8011050:	f8d9 9010 	ldr.w	r9, [r9, #16]
 8011054:	ebc7 0c03 	rsb	ip, r7, r3
 8011058:	1af2      	subs	r2, r6, r3
 801105a:	eb09 010c 	add.w	r1, r9, ip
 801105e:	d039      	beq.n	80110d4 <_DrawHLine+0xfc>
 8011060:	3301      	adds	r3, #1
 8011062:	f819 a00c 	ldrb.w	sl, [r9, ip]
 8011066:	2a01      	cmp	r2, #1
 8011068:	f101 0e01 	add.w	lr, r1, #1
 801106c:	fb13 f300 	smulbb	r3, r3, r0
 8011070:	ebc8 0003 	rsb	r0, r8, r3
 8011074:	4450      	add	r0, sl
 8011076:	f809 000c 	strb.w	r0, [r9, ip]
 801107a:	dd0e      	ble.n	801109a <_DrawHLine+0xc2>
 801107c:	eb01 0c02 	add.w	ip, r1, r2
 8011080:	4673      	mov	r3, lr
 8011082:	6828      	ldr	r0, [r5, #0]
 8011084:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011088:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 801108c:	4563      	cmp	r3, ip
 801108e:	4401      	add	r1, r0
 8011090:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011094:	d1f5      	bne.n	8011082 <_DrawHLine+0xaa>
 8011096:	3a01      	subs	r2, #1
 8011098:	4496      	add	lr, r2
 801109a:	682b      	ldr	r3, [r5, #0]
 801109c:	2f00      	cmp	r7, #0
 801109e:	f104 0401 	add.w	r4, r4, #1
 80110a2:	f89e 1000 	ldrb.w	r1, [lr]
 80110a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80110aa:	bfb8      	it	lt
 80110ac:	f106 36ff 	addlt.w	r6, r6, #4294967295
 80110b0:	fb13 f306 	smulbb	r3, r3, r6
 80110b4:	1ae3      	subs	r3, r4, r3
 80110b6:	440b      	add	r3, r1
 80110b8:	f88e 3000 	strb.w	r3, [lr]
 80110bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c0:	4296      	cmp	r6, r2
 80110c2:	ddc5      	ble.n	8011050 <_DrawHLine+0x78>
 80110c4:	fb02 0200 	mla	r2, r2, r0, r0
 80110c8:	1e54      	subs	r4, r2, #1
 80110ca:	4544      	cmp	r4, r8
 80110cc:	dabc      	bge.n	8011048 <_DrawHLine+0x70>
 80110ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d2:	4770      	bx	lr
 80110d4:	1c60      	adds	r0, r4, #1
 80110d6:	f819 300c 	ldrb.w	r3, [r9, ip]
 80110da:	ebc8 0000 	rsb	r0, r8, r0
 80110de:	4418      	add	r0, r3
 80110e0:	f809 000c 	strb.w	r0, [r9, ip]
 80110e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e8:	20000018 	.word	0x20000018
 80110ec:	20000184 	.word	0x20000184

080110f0 <GUI_AA_Init>:
 80110f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110f4:	4c3d      	ldr	r4, [pc, #244]	; (80111ec <GUI_AA_Init+0xfc>)
 80110f6:	4606      	mov	r6, r0
 80110f8:	460d      	mov	r5, r1
 80110fa:	6a27      	ldr	r7, [r4, #32]
 80110fc:	2f00      	cmp	r7, #0
 80110fe:	d058      	beq.n	80111b2 <GUI_AA_Init+0xc2>
 8011100:	f04f 0800 	mov.w	r8, #0
 8011104:	4b3a      	ldr	r3, [pc, #232]	; (80111f0 <GUI_AA_Init+0x100>)
 8011106:	68a1      	ldr	r1, [r4, #8]
 8011108:	6818      	ldr	r0, [r3, #0]
 801110a:	42b0      	cmp	r0, r6
 801110c:	bfb8      	it	lt
 801110e:	4630      	movlt	r0, r6
 8011110:	1a2b      	subs	r3, r5, r0
 8011112:	428b      	cmp	r3, r1
 8011114:	db01      	blt.n	801111a <GUI_AA_Init+0x2a>
 8011116:	4401      	add	r1, r0
 8011118:	1e4d      	subs	r5, r1, #1
 801111a:	4285      	cmp	r5, r0
 801111c:	da46      	bge.n	80111ac <GUI_AA_Init+0xbc>
 801111e:	f04f 0801 	mov.w	r8, #1
 8011122:	4605      	mov	r5, r0
 8011124:	4642      	mov	r2, r8
 8011126:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8011208 <GUI_AA_Init+0x118>
 801112a:	4932      	ldr	r1, [pc, #200]	; (80111f4 <GUI_AA_Init+0x104>)
 801112c:	f8d9 e000 	ldr.w	lr, [r9]
 8011130:	4e31      	ldr	r6, [pc, #196]	; (80111f8 <GUI_AA_Init+0x108>)
 8011132:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 8011136:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 801120c <GUI_AA_Init+0x11c>
 801113a:	6020      	str	r0, [r4, #0]
 801113c:	61e5      	str	r5, [r4, #28]
 801113e:	680d      	ldr	r5, [r1, #0]
 8011140:	6127      	str	r7, [r4, #16]
 8011142:	61a3      	str	r3, [r4, #24]
 8011144:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011148:	f8ce 6064 	str.w	r6, [lr, #100]	; 0x64
 801114c:	e886 0003 	stmia.w	r6, {r0, r1}
 8011150:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 8011154:	4638      	mov	r0, r7
 8011156:	2100      	movs	r1, #0
 8011158:	f643 77ff 	movw	r7, #16383	; 0x3fff
 801115c:	47a8      	blx	r5
 801115e:	f8d9 5000 	ldr.w	r5, [r9]
 8011162:	f106 0e08 	add.w	lr, r6, #8
 8011166:	4e25      	ldr	r6, [pc, #148]	; (80111fc <GUI_AA_Init+0x10c>)
 8011168:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 801116c:	4640      	mov	r0, r8
 801116e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011172:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 8011176:	3201      	adds	r2, #1
 8011178:	3301      	adds	r3, #1
 801117a:	f8c5 e014 	str.w	lr, [r5, #20]
 801117e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8011182:	fb12 f201 	smulbb	r2, r2, r1
 8011186:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 801118a:	fb13 f301 	smulbb	r3, r3, r1
 801118e:	fb1c f501 	smulbb	r5, ip, r1
 8011192:	3a01      	subs	r2, #1
 8011194:	3b01      	subs	r3, #1
 8011196:	6166      	str	r6, [r4, #20]
 8011198:	fb1e f101 	smulbb	r1, lr, r1
 801119c:	6066      	str	r6, [r4, #4]
 801119e:	8722      	strh	r2, [r4, #56]	; 0x38
 80111a0:	8763      	strh	r3, [r4, #58]	; 0x3a
 80111a2:	86a5      	strh	r5, [r4, #52]	; 0x34
 80111a4:	86e1      	strh	r1, [r4, #54]	; 0x36
 80111a6:	60e7      	str	r7, [r4, #12]
 80111a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ac:	1a2a      	subs	r2, r5, r0
 80111ae:	3201      	adds	r2, #1
 80111b0:	e7b9      	b.n	8011126 <GUI_AA_Init+0x36>
 80111b2:	4b13      	ldr	r3, [pc, #76]	; (8011200 <GUI_AA_Init+0x110>)
 80111b4:	6818      	ldr	r0, [r3, #0]
 80111b6:	60a0      	str	r0, [r4, #8]
 80111b8:	b198      	cbz	r0, 80111e2 <GUI_AA_Init+0xf2>
 80111ba:	f001 fcc1 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80111be:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80111ec <GUI_AA_Init+0xfc>
 80111c2:	6220      	str	r0, [r4, #32]
 80111c4:	b150      	cbz	r0, 80111dc <GUI_AA_Init+0xec>
 80111c6:	4b0f      	ldr	r3, [pc, #60]	; (8011204 <GUI_AA_Init+0x114>)
 80111c8:	4648      	mov	r0, r9
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	f840 3f24 	str.w	r3, [r0, #36]!
 80111d2:	f003 f9b1 	bl	8014538 <GUI__RegisterExit>
 80111d6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80111da:	e793      	b.n	8011104 <GUI_AA_Init+0x14>
 80111dc:	f04f 0801 	mov.w	r8, #1
 80111e0:	e790      	b.n	8011104 <GUI_AA_Init+0x14>
 80111e2:	f009 fe9d 	bl	801af20 <LCD_GetVXSizeMax>
 80111e6:	60a0      	str	r0, [r4, #8]
 80111e8:	e7e7      	b.n	80111ba <GUI_AA_Init+0xca>
 80111ea:	bf00      	nop
 80111ec:	20000184 	.word	0x20000184
 80111f0:	20046790 	.word	0x20046790
 80111f4:	20000050 	.word	0x20000050
 80111f8:	200001b0 	.word	0x200001b0
 80111fc:	ffffc001 	.word	0xffffc001
 8011200:	200467d8 	.word	0x200467d8
 8011204:	08010fc5 	.word	0x08010fc5
 8011208:	20000018 	.word	0x20000018
 801120c:	08010fd9 	.word	0x08010fd9

08011210 <GUI_AA_Init_HiRes>:
 8011210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011214:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8011330 <GUI_AA_Init_HiRes+0x120>
 8011218:	4c3e      	ldr	r4, [pc, #248]	; (8011314 <GUI_AA_Init_HiRes+0x104>)
 801121a:	f8d9 3000 	ldr.w	r3, [r9]
 801121e:	6a27      	ldr	r7, [r4, #32]
 8011220:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 8011224:	fb90 f6f5 	sdiv	r6, r0, r5
 8011228:	fb91 f5f5 	sdiv	r5, r1, r5
 801122c:	2f00      	cmp	r7, #0
 801122e:	d051      	beq.n	80112d4 <GUI_AA_Init_HiRes+0xc4>
 8011230:	f04f 0800 	mov.w	r8, #0
 8011234:	4a38      	ldr	r2, [pc, #224]	; (8011318 <GUI_AA_Init_HiRes+0x108>)
 8011236:	68a1      	ldr	r1, [r4, #8]
 8011238:	6810      	ldr	r0, [r2, #0]
 801123a:	42b0      	cmp	r0, r6
 801123c:	bfb8      	it	lt
 801123e:	4630      	movlt	r0, r6
 8011240:	1a2a      	subs	r2, r5, r0
 8011242:	428a      	cmp	r2, r1
 8011244:	db01      	blt.n	801124a <GUI_AA_Init_HiRes+0x3a>
 8011246:	4401      	add	r1, r0
 8011248:	1e4d      	subs	r5, r1, #1
 801124a:	42a8      	cmp	r0, r5
 801124c:	dd3f      	ble.n	80112ce <GUI_AA_Init_HiRes+0xbe>
 801124e:	f04f 0801 	mov.w	r8, #1
 8011252:	4605      	mov	r5, r0
 8011254:	4642      	mov	r2, r8
 8011256:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8011258:	6020      	str	r0, [r4, #0]
 801125a:	4830      	ldr	r0, [pc, #192]	; (801131c <GUI_AA_Init_HiRes+0x10c>)
 801125c:	4e30      	ldr	r6, [pc, #192]	; (8011320 <GUI_AA_Init_HiRes+0x110>)
 801125e:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8011334 <GUI_AA_Init_HiRes+0x124>
 8011262:	61e5      	str	r5, [r4, #28]
 8011264:	61a1      	str	r1, [r4, #24]
 8011266:	6805      	ldr	r5, [r0, #0]
 8011268:	6127      	str	r7, [r4, #16]
 801126a:	c903      	ldmia	r1, {r0, r1}
 801126c:	665e      	str	r6, [r3, #100]	; 0x64
 801126e:	e886 0003 	stmia.w	r6, {r0, r1}
 8011272:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8011276:	4638      	mov	r0, r7
 8011278:	2100      	movs	r1, #0
 801127a:	4f2a      	ldr	r7, [pc, #168]	; (8011324 <GUI_AA_Init_HiRes+0x114>)
 801127c:	47a8      	blx	r5
 801127e:	f8d9 5000 	ldr.w	r5, [r9]
 8011282:	f106 0e08 	add.w	lr, r6, #8
 8011286:	f643 76ff 	movw	r6, #16383	; 0x3fff
 801128a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 801128e:	4640      	mov	r0, r8
 8011290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011294:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
 8011298:	3201      	adds	r2, #1
 801129a:	3301      	adds	r3, #1
 801129c:	f8c5 e014 	str.w	lr, [r5, #20]
 80112a0:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80112a4:	fb12 f201 	smulbb	r2, r2, r1
 80112a8:	f8b5 e00a 	ldrh.w	lr, [r5, #10]
 80112ac:	fb13 f301 	smulbb	r3, r3, r1
 80112b0:	fb1c f501 	smulbb	r5, ip, r1
 80112b4:	3a01      	subs	r2, #1
 80112b6:	3b01      	subs	r3, #1
 80112b8:	6167      	str	r7, [r4, #20]
 80112ba:	fb1e f101 	smulbb	r1, lr, r1
 80112be:	6067      	str	r7, [r4, #4]
 80112c0:	8722      	strh	r2, [r4, #56]	; 0x38
 80112c2:	8763      	strh	r3, [r4, #58]	; 0x3a
 80112c4:	86a5      	strh	r5, [r4, #52]	; 0x34
 80112c6:	86e1      	strh	r1, [r4, #54]	; 0x36
 80112c8:	60e6      	str	r6, [r4, #12]
 80112ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ce:	1a2a      	subs	r2, r5, r0
 80112d0:	3201      	adds	r2, #1
 80112d2:	e7c0      	b.n	8011256 <GUI_AA_Init_HiRes+0x46>
 80112d4:	4b14      	ldr	r3, [pc, #80]	; (8011328 <GUI_AA_Init_HiRes+0x118>)
 80112d6:	6818      	ldr	r0, [r3, #0]
 80112d8:	60a0      	str	r0, [r4, #8]
 80112da:	b1b8      	cbz	r0, 801130c <GUI_AA_Init_HiRes+0xfc>
 80112dc:	f001 fc30 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80112e0:	f8df a030 	ldr.w	sl, [pc, #48]	; 8011314 <GUI_AA_Init_HiRes+0x104>
 80112e4:	6220      	str	r0, [r4, #32]
 80112e6:	b160      	cbz	r0, 8011302 <GUI_AA_Init_HiRes+0xf2>
 80112e8:	4b10      	ldr	r3, [pc, #64]	; (801132c <GUI_AA_Init_HiRes+0x11c>)
 80112ea:	4650      	mov	r0, sl
 80112ec:	f04f 0800 	mov.w	r8, #0
 80112f0:	f840 3f24 	str.w	r3, [r0, #36]!
 80112f4:	f003 f920 	bl	8014538 <GUI__RegisterExit>
 80112f8:	f8da 7020 	ldr.w	r7, [sl, #32]
 80112fc:	f8d9 3000 	ldr.w	r3, [r9]
 8011300:	e798      	b.n	8011234 <GUI_AA_Init_HiRes+0x24>
 8011302:	f8d9 3000 	ldr.w	r3, [r9]
 8011306:	f04f 0801 	mov.w	r8, #1
 801130a:	e793      	b.n	8011234 <GUI_AA_Init_HiRes+0x24>
 801130c:	f009 fe08 	bl	801af20 <LCD_GetVXSizeMax>
 8011310:	60a0      	str	r0, [r4, #8]
 8011312:	e7e3      	b.n	80112dc <GUI_AA_Init_HiRes+0xcc>
 8011314:	20000184 	.word	0x20000184
 8011318:	20046790 	.word	0x20046790
 801131c:	20000050 	.word	0x20000050
 8011320:	200001b0 	.word	0x200001b0
 8011324:	ffffc001 	.word	0xffffc001
 8011328:	200467d8 	.word	0x200467d8
 801132c:	08010fc5 	.word	0x08010fc5
 8011330:	20000018 	.word	0x20000018
 8011334:	08010fd9 	.word	0x08010fd9

08011338 <GUI_AA_SetFactor>:
 8011338:	4b0f      	ldr	r3, [pc, #60]	; (8011378 <GUI_AA_SetFactor+0x40>)
 801133a:	b4f0      	push	{r4, r5, r6, r7}
 801133c:	681c      	ldr	r4, [r3, #0]
 801133e:	b2c6      	uxtb	r6, r0
 8011340:	4d0e      	ldr	r5, [pc, #56]	; (801137c <GUI_AA_SetFactor+0x44>)
 8011342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011346:	b2b1      	uxth	r1, r6
 8011348:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801134c:	3201      	adds	r2, #1
 801134e:	8920      	ldrh	r0, [r4, #8]
 8011350:	3301      	adds	r3, #1
 8011352:	8967      	ldrh	r7, [r4, #10]
 8011354:	fb12 f201 	smulbb	r2, r2, r1
 8011358:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
 801135c:	fb13 f301 	smulbb	r3, r3, r1
 8011360:	fb10 f001 	smulbb	r0, r0, r1
 8011364:	3a01      	subs	r2, #1
 8011366:	fb17 f101 	smulbb	r1, r7, r1
 801136a:	3b01      	subs	r3, #1
 801136c:	872a      	strh	r2, [r5, #56]	; 0x38
 801136e:	86a8      	strh	r0, [r5, #52]	; 0x34
 8011370:	86e9      	strh	r1, [r5, #54]	; 0x36
 8011372:	876b      	strh	r3, [r5, #58]	; 0x3a
 8011374:	bcf0      	pop	{r4, r5, r6, r7}
 8011376:	4770      	bx	lr
 8011378:	20000018 	.word	0x20000018
 801137c:	20000184 	.word	0x20000184

08011380 <GUI_AA_DisableHiRes>:
 8011380:	4b02      	ldr	r3, [pc, #8]	; (801138c <GUI_AA_DisableHiRes+0xc>)
 8011382:	2200      	movs	r2, #0
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801138a:	4770      	bx	lr
 801138c:	20000018 	.word	0x20000018

08011390 <GUI_AA_HiRes2Pixel>:
 8011390:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <GUI_AA_HiRes2Pixel+0x18>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011398:	b90b      	cbnz	r3, 801139e <GUI_AA_HiRes2Pixel+0xe>
 801139a:	b200      	sxth	r0, r0
 801139c:	4770      	bx	lr
 801139e:	fb90 f0f3 	sdiv	r0, r0, r3
 80113a2:	b200      	sxth	r0, r0
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	20000018 	.word	0x20000018

080113ac <GUI_AA_Exit>:
 80113ac:	b508      	push	{r3, lr}
 80113ae:	f7ff fd73 	bl	8010e98 <_FlushLine>
 80113b2:	4b04      	ldr	r3, [pc, #16]	; (80113c4 <GUI_AA_Exit+0x18>)
 80113b4:	4a04      	ldr	r2, [pc, #16]	; (80113c8 <GUI_AA_Exit+0x1c>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	6991      	ldr	r1, [r2, #24]
 80113ba:	f103 0208 	add.w	r2, r3, #8
 80113be:	6659      	str	r1, [r3, #100]	; 0x64
 80113c0:	615a      	str	r2, [r3, #20]
 80113c2:	bd08      	pop	{r3, pc}
 80113c4:	20000018 	.word	0x20000018
 80113c8:	20000184 	.word	0x20000184

080113cc <GUI_AA_DrawLine>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8011548 <GUI_AA_DrawLine+0x17c>
 80113d4:	b087      	sub	sp, #28
 80113d6:	4698      	mov	r8, r3
 80113d8:	4606      	mov	r6, r0
 80113da:	460d      	mov	r5, r1
 80113dc:	4692      	mov	sl, r2
 80113de:	f007 f8e1 	bl	80185a4 <GUI_Lock>
 80113e2:	f8d9 3000 	ldr.w	r3, [r9]
 80113e6:	b15b      	cbz	r3, 8011400 <GUI_AA_DrawLine+0x34>
 80113e8:	4f56      	ldr	r7, [pc, #344]	; (8011544 <GUI_AA_DrawLine+0x178>)
 80113ea:	2000      	movs	r0, #0
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113f2:	4416      	add	r6, r2
 80113f4:	441d      	add	r5, r3
 80113f6:	f00f fbad 	bl	8020b54 <WM__InitIVRSearch>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	f040 808d 	bne.w	801151a <GUI_AA_DrawLine+0x14e>
 8011400:	f010 fdc4 	bl	8021f8c <WM__GetOrgX_AA>
 8011404:	4683      	mov	fp, r0
 8011406:	f010 fdcf 	bl	8021fa8 <WM__GetOrgY_AA>
 801140a:	4607      	mov	r7, r0
 801140c:	f010 fdbe 	bl	8021f8c <WM__GetOrgX_AA>
 8011410:	4681      	mov	r9, r0
 8011412:	f010 fdc9 	bl	8021fa8 <WM__GetOrgY_AA>
 8011416:	4604      	mov	r4, r0
 8011418:	2000      	movs	r0, #0
 801141a:	f00f fb9b 	bl	8020b54 <WM__InitIVRSearch>
 801141e:	2800      	cmp	r0, #0
 8011420:	f000 808a 	beq.w	8011538 <GUI_AA_DrawLine+0x16c>
 8011424:	eb0a 0209 	add.w	r2, sl, r9
 8011428:	eb0b 0306 	add.w	r3, fp, r6
 801142c:	4610      	mov	r0, r2
 801142e:	9203      	str	r2, [sp, #12]
 8011430:	197a      	adds	r2, r7, r5
 8011432:	4f44      	ldr	r7, [pc, #272]	; (8011544 <GUI_AA_DrawLine+0x178>)
 8011434:	4283      	cmp	r3, r0
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	9202      	str	r2, [sp, #8]
 801143a:	eb08 0204 	add.w	r2, r8, r4
 801143e:	46bb      	mov	fp, r7
 8011440:	9204      	str	r2, [sp, #16]
 8011442:	461a      	mov	r2, r3
 8011444:	bfa8      	it	ge
 8011446:	4602      	movge	r2, r0
 8011448:	4283      	cmp	r3, r0
 801144a:	9205      	str	r2, [sp, #20]
 801144c:	461a      	mov	r2, r3
 801144e:	bfb8      	it	lt
 8011450:	4602      	movlt	r2, r0
 8011452:	9200      	str	r2, [sp, #0]
 8011454:	e02e      	b.n	80114b4 <GUI_AA_DrawLine+0xe8>
 8011456:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 801145a:	fb9c f0f1 	sdiv	r0, ip, r1
 801145e:	fb9e f1f1 	sdiv	r1, lr, r1
 8011462:	f7ff fe45 	bl	80110f0 <GUI_AA_Init>
 8011466:	4620      	mov	r0, r4
 8011468:	f002 fd86 	bl	8013f78 <GUI_SetPenSize>
 801146c:	4633      	mov	r3, r6
 801146e:	4642      	mov	r2, r8
 8011470:	4651      	mov	r1, sl
 8011472:	4648      	mov	r0, r9
 8011474:	f004 f9f2 	bl	801585c <GL_DrawLine>
 8011478:	f7ff ff98 	bl	80113ac <GUI_AA_Exit>
 801147c:	b987      	cbnz	r7, 80114a0 <GUI_AA_DrawLine+0xd4>
 801147e:	f8db 3000 	ldr.w	r3, [fp]
 8011482:	4651      	mov	r1, sl
 8011484:	4648      	mov	r0, r9
 8011486:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 801148a:	fb14 f405 	smulbb	r4, r4, r5
 801148e:	1064      	asrs	r4, r4, #1
 8011490:	4622      	mov	r2, r4
 8011492:	f7fe fe87 	bl	80101a4 <GL_FillCircleAA_HiRes>
 8011496:	4622      	mov	r2, r4
 8011498:	4631      	mov	r1, r6
 801149a:	4640      	mov	r0, r8
 801149c:	f7fe fe82 	bl	80101a4 <GL_FillCircleAA_HiRes>
 80114a0:	4628      	mov	r0, r5
 80114a2:	f002 fd69 	bl	8013f78 <GUI_SetPenSize>
 80114a6:	4638      	mov	r0, r7
 80114a8:	f002 fd74 	bl	8013f94 <GUI_SetPenShape>
 80114ac:	f00f fa28 	bl	8020900 <WM__GetNextIVR>
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d041      	beq.n	8011538 <GUI_AA_DrawLine+0x16c>
 80114b4:	f002 fd54 	bl	8013f60 <GUI_GetPenSize>
 80114b8:	f8db 3000 	ldr.w	r3, [fp]
 80114bc:	4605      	mov	r5, r0
 80114be:	2001      	movs	r0, #1
 80114c0:	f893 4068 	ldrb.w	r4, [r3, #104]	; 0x68
 80114c4:	9e04      	ldr	r6, [sp, #16]
 80114c6:	fb14 f405 	smulbb	r4, r4, r5
 80114ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80114ce:	f8dd a008 	ldr.w	sl, [sp, #8]
 80114d2:	b2e4      	uxtb	r4, r4
 80114d4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80114d8:	f002 fd5c 	bl	8013f94 <GUI_SetPenShape>
 80114dc:	9905      	ldr	r1, [sp, #20]
 80114de:	9a00      	ldr	r2, [sp, #0]
 80114e0:	4607      	mov	r7, r0
 80114e2:	f8db 3000 	ldr.w	r3, [fp]
 80114e6:	ebc4 0c01 	rsb	ip, r4, r1
 80114ea:	eb04 0e02 	add.w	lr, r4, r2
 80114ee:	1b48      	subs	r0, r1, r5
 80114f0:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 80114f4:	9900      	ldr	r1, [sp, #0]
 80114f6:	4429      	add	r1, r5
 80114f8:	2a00      	cmp	r2, #0
 80114fa:	d1ac      	bne.n	8011456 <GUI_AA_DrawLine+0x8a>
 80114fc:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 8011500:	9b01      	ldr	r3, [sp, #4]
 8011502:	fb06 f903 	mul.w	r9, r6, r3
 8011506:	9b03      	ldr	r3, [sp, #12]
 8011508:	fb06 f803 	mul.w	r8, r6, r3
 801150c:	9b02      	ldr	r3, [sp, #8]
 801150e:	fb06 fa03 	mul.w	sl, r6, r3
 8011512:	9b04      	ldr	r3, [sp, #16]
 8011514:	fb06 f603 	mul.w	r6, r6, r3
 8011518:	e7a3      	b.n	8011462 <GUI_AA_DrawLine+0x96>
 801151a:	f8d9 4000 	ldr.w	r4, [r9]
 801151e:	4643      	mov	r3, r8
 8011520:	4652      	mov	r2, sl
 8011522:	4629      	mov	r1, r5
 8011524:	4630      	mov	r0, r6
 8011526:	47a0      	blx	r4
 8011528:	4604      	mov	r4, r0
 801152a:	f00f f9e9 	bl	8020900 <WM__GetNextIVR>
 801152e:	2800      	cmp	r0, #0
 8011530:	d1f3      	bne.n	801151a <GUI_AA_DrawLine+0x14e>
 8011532:	2c00      	cmp	r4, #0
 8011534:	f47f af64 	bne.w	8011400 <GUI_AA_DrawLine+0x34>
 8011538:	b007      	add	sp, #28
 801153a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153e:	f007 b827 	b.w	8018590 <GUI_Unlock>
 8011542:	bf00      	nop
 8011544:	20000018 	.word	0x20000018
 8011548:	200001c0 	.word	0x200001c0

0801154c <_Color2Index_1616I>:
 801154c:	4b06      	ldr	r3, [pc, #24]	; (8011568 <_Color2Index_1616I+0x1c>)
 801154e:	b510      	push	{r4, lr}
 8011550:	4604      	mov	r4, r0
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011558:	4798      	blx	r3
 801155a:	4b04      	ldr	r3, [pc, #16]	; (801156c <_Color2Index_1616I+0x20>)
 801155c:	0e24      	lsrs	r4, r4, #24
 801155e:	5d1b      	ldrb	r3, [r3, r4]
 8011560:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8011564:	bd10      	pop	{r4, pc}
 8011566:	bf00      	nop
 8011568:	0803470c 	.word	0x0803470c
 801156c:	080275d0 	.word	0x080275d0

08011570 <_Index2Color_1616I>:
 8011570:	4b05      	ldr	r3, [pc, #20]	; (8011588 <_Index2Color_1616I+0x18>)
 8011572:	b510      	push	{r4, lr}
 8011574:	4604      	mov	r4, r0
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	b2c0      	uxtb	r0, r0
 801157a:	4798      	blx	r3
 801157c:	4b03      	ldr	r3, [pc, #12]	; (801158c <_Index2Color_1616I+0x1c>)
 801157e:	0924      	lsrs	r4, r4, #4
 8011580:	5d1b      	ldrb	r3, [r3, r4]
 8011582:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8011586:	bd10      	pop	{r4, pc}
 8011588:	0803470c 	.word	0x0803470c
 801158c:	08027730 	.word	0x08027730

08011590 <_GetIndexMask_1616I>:
 8011590:	20ff      	movs	r0, #255	; 0xff
 8011592:	4770      	bx	lr

08011594 <_Color2IndexBulk_1616I>:
 8011594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011598:	4c0b      	ldr	r4, [pc, #44]	; (80115c8 <_Color2IndexBulk_1616I+0x34>)
 801159a:	4605      	mov	r5, r0
 801159c:	4689      	mov	r9, r1
 801159e:	4692      	mov	sl, r2
 80115a0:	4698      	mov	r8, r3
 80115a2:	6827      	ldr	r7, [r4, #0]
 80115a4:	4e09      	ldr	r6, [pc, #36]	; (80115cc <_Color2IndexBulk_1616I+0x38>)
 80115a6:	f855 4b04 	ldr.w	r4, [r5], #4
 80115aa:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80115ae:	0e24      	lsrs	r4, r4, #24
 80115b0:	47b8      	blx	r7
 80115b2:	f1ba 0a01 	subs.w	sl, sl, #1
 80115b6:	5d33      	ldrb	r3, [r6, r4]
 80115b8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 80115bc:	f889 0000 	strb.w	r0, [r9]
 80115c0:	44c1      	add	r9, r8
 80115c2:	d1f0      	bne.n	80115a6 <_Color2IndexBulk_1616I+0x12>
 80115c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c8:	0803470c 	.word	0x0803470c
 80115cc:	080275d0 	.word	0x080275d0

080115d0 <_Index2ColorBulk_1616I>:
 80115d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d4:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 80115d8:	4c0e      	ldr	r4, [pc, #56]	; (8011614 <_Index2ColorBulk_1616I+0x44>)
 80115da:	f102 39ff 	add.w	r9, r2, #4294967295
 80115de:	f1c3 0800 	rsb	r8, r3, #0
 80115e2:	4492      	add	sl, r2
 80115e4:	6867      	ldr	r7, [r4, #4]
 80115e6:	fb03 0509 	mla	r5, r3, r9, r0
 80115ea:	4e0b      	ldr	r6, [pc, #44]	; (8011618 <_Index2ColorBulk_1616I+0x48>)
 80115ec:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 80115f0:	e001      	b.n	80115f6 <_Index2ColorBulk_1616I+0x26>
 80115f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80115f6:	782c      	ldrb	r4, [r5, #0]
 80115f8:	4445      	add	r5, r8
 80115fa:	4620      	mov	r0, r4
 80115fc:	0924      	lsrs	r4, r4, #4
 80115fe:	47b8      	blx	r7
 8011600:	5d32      	ldrb	r2, [r6, r4]
 8011602:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8011606:	f84a 0904 	str.w	r0, [sl], #-4
 801160a:	f1b9 0f00 	cmp.w	r9, #0
 801160e:	d1f0      	bne.n	80115f2 <_Index2ColorBulk_1616I+0x22>
 8011610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011614:	0803470c 	.word	0x0803470c
 8011618:	08027730 	.word	0x08027730

0801161c <_Color2Index_822216>:
 801161c:	b430      	push	{r4, r5}
 801161e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011622:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011626:	4d0e      	ldr	r5, [pc, #56]	; (8011660 <_Color2Index_822216+0x44>)
 8011628:	0e01      	lsrs	r1, r0, #24
 801162a:	b2c2      	uxtb	r2, r0
 801162c:	429c      	cmp	r4, r3
 801162e:	fba5 1001 	umull	r1, r0, r5, r1
 8011632:	ea4f 1010 	mov.w	r0, r0, lsr #4
 8011636:	d106      	bne.n	8011646 <_Color2Index_822216+0x2a>
 8011638:	42a2      	cmp	r2, r4
 801163a:	d104      	bne.n	8011646 <_Color2Index_822216+0x2a>
 801163c:	0100      	lsls	r0, r0, #4
 801163e:	bc30      	pop	{r4, r5}
 8011640:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 8011644:	4770      	bx	lr
 8011646:	09d1      	lsrs	r1, r2, #7
 8011648:	09da      	lsrs	r2, r3, #7
 801164a:	09e4      	lsrs	r4, r4, #7
 801164c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8011650:	f042 0208 	orr.w	r2, r2, #8
 8011654:	ea42 1300 	orr.w	r3, r2, r0, lsl #4
 8011658:	ea43 0044 	orr.w	r0, r3, r4, lsl #1
 801165c:	bc30      	pop	{r4, r5}
 801165e:	4770      	bx	lr
 8011660:	f0f0f0f1 	.word	0xf0f0f0f1

08011664 <_Index2Color_822216>:
 8011664:	0703      	lsls	r3, r0, #28
 8011666:	d516      	bpl.n	8011696 <_Index2Color_822216+0x32>
 8011668:	f000 0201 	and.w	r2, r0, #1
 801166c:	4b13      	ldr	r3, [pc, #76]	; (80116bc <_Index2Color_822216+0x58>)
 801166e:	2a00      	cmp	r2, #0
 8011670:	bf06      	itte	eq
 8011672:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 8011676:	f04f 22ff 	moveq.w	r2, #4278255360	; 0xff00ff00
 801167a:	f46f 027f 	mvnne.w	r2, #16711680	; 0xff0000
 801167e:	f010 0f02 	tst.w	r0, #2
 8011682:	bf18      	it	ne
 8011684:	4613      	movne	r3, r2
 8011686:	f010 0f04 	tst.w	r0, #4
 801168a:	bf0c      	ite	eq
 801168c:	2000      	moveq	r0, #0
 801168e:	f44f 007f 	movne.w	r0, #16711680	; 0xff0000
 8011692:	4318      	orrs	r0, r3
 8011694:	4770      	bx	lr
 8011696:	f000 0107 	and.w	r1, r0, #7
 801169a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801169e:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80116a2:	0849      	lsrs	r1, r1, #1
 80116a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80116a8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80116ac:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 80116b0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80116b4:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	ff0000ff 	.word	0xff0000ff

080116c0 <_GetIndexMask_822216>:
 80116c0:	20ff      	movs	r0, #255	; 0xff
 80116c2:	4770      	bx	lr

080116c4 <_Color2Index_84444>:
 80116c4:	4603      	mov	r3, r0
 80116c6:	0f80      	lsrs	r0, r0, #30
 80116c8:	d017      	beq.n	80116fa <_Color2Index_84444+0x36>
 80116ca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80116ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	4291      	cmp	r1, r2
 80116d6:	d105      	bne.n	80116e4 <_Color2Index_84444+0x20>
 80116d8:	428b      	cmp	r3, r1
 80116da:	d103      	bne.n	80116e4 <_Color2Index_84444+0x20>
 80116dc:	0912      	lsrs	r2, r2, #4
 80116de:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80116e2:	4770      	bx	lr
 80116e4:	099b      	lsrs	r3, r3, #6
 80116e6:	0992      	lsrs	r2, r2, #6
 80116e8:	0989      	lsrs	r1, r1, #6
 80116ea:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80116ee:	0180      	lsls	r0, r0, #6
 80116f0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80116f4:	f400 507f 	and.w	r0, r0, #16320	; 0x3fc0
 80116f8:	4318      	orrs	r0, r3
 80116fa:	4770      	bx	lr

080116fc <_GetIndexMask_84444>:
 80116fc:	20ff      	movs	r0, #255	; 0xff
 80116fe:	4770      	bx	lr

08011700 <_Index2Color_84444>:
 8011700:	283f      	cmp	r0, #63	; 0x3f
 8011702:	d804      	bhi.n	801170e <_Index2Color_84444+0xe>
 8011704:	280f      	cmp	r0, #15
 8011706:	d826      	bhi.n	8011756 <_Index2Color_84444+0x56>
 8011708:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801170c:	4770      	bx	lr
 801170e:	f3c0 0281 	ubfx	r2, r0, #2, #2
 8011712:	f3c0 1301 	ubfx	r3, r0, #4, #2
 8011716:	f000 0103 	and.w	r1, r0, #3
 801171a:	0980      	lsrs	r0, r0, #6
 801171c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8011720:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011724:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011728:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801172c:	b410      	push	{r4}
 801172e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8011732:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 8011736:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801173a:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 801173e:	b2e4      	uxtb	r4, r4
 8011740:	b2d2      	uxtb	r2, r2
 8011742:	b2c8      	uxtb	r0, r1
 8011744:	061b      	lsls	r3, r3, #24
 8011746:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801174a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801174e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011752:	4310      	orrs	r0, r2
 8011754:	4770      	bx	lr
 8011756:	f000 030f 	and.w	r3, r0, #15
 801175a:	0900      	lsrs	r0, r0, #4
 801175c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011764:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011768:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801176c:	eb03 3303 	add.w	r3, r3, r3, lsl #12
 8011770:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop

08011778 <LCD_Color2Index_8666>:
 8011778:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801177c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011780:	b2c0      	uxtb	r0, r0
 8011782:	4299      	cmp	r1, r3
 8011784:	b410      	push	{r4}
 8011786:	d10a      	bne.n	801179e <LCD_Color2Index_8666+0x26>
 8011788:	4288      	cmp	r0, r1
 801178a:	d108      	bne.n	801179e <LCD_Color2Index_8666+0x26>
 801178c:	3308      	adds	r3, #8
 801178e:	4814      	ldr	r0, [pc, #80]	; (80117e0 <LCD_Color2Index_8666+0x68>)
 8011790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011794:	fba0 3003 	umull	r3, r0, r0, r3
 8011798:	0900      	lsrs	r0, r0, #4
 801179a:	3078      	adds	r0, #120	; 0x78
 801179c:	4770      	bx	lr
 801179e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80117a2:	4c10      	ldr	r4, [pc, #64]	; (80117e4 <LCD_Color2Index_8666+0x6c>)
 80117a4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80117a8:	307f      	adds	r0, #127	; 0x7f
 80117aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80117ae:	327f      	adds	r2, #127	; 0x7f
 80117b0:	fba4 3000 	umull	r3, r0, r4, r0
 80117b4:	317f      	adds	r1, #127	; 0x7f
 80117b6:	fba4 3202 	umull	r3, r2, r4, r2
 80117ba:	fba4 3101 	umull	r3, r1, r4, r1
 80117be:	09c0      	lsrs	r0, r0, #7
 80117c0:	09d2      	lsrs	r2, r2, #7
 80117c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117c6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80117ca:	09c9      	lsrs	r1, r1, #7
 80117cc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80117d0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80117d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80117d8:	286b      	cmp	r0, #107	; 0x6b
 80117da:	bf88      	it	hi
 80117dc:	3028      	addhi	r0, #40	; 0x28
 80117de:	4770      	bx	lr
 80117e0:	f0f0f0f1 	.word	0xf0f0f0f1
 80117e4:	80808081 	.word	0x80808081

080117e8 <_GetIndexMask_8666>:
 80117e8:	20ff      	movs	r0, #255	; 0xff
 80117ea:	4770      	bx	lr

080117ec <LCD_Index2Color_8666>:
 80117ec:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80117f0:	2b0f      	cmp	r3, #15
 80117f2:	b410      	push	{r4}
 80117f4:	d92d      	bls.n	8011852 <LCD_Index2Color_8666+0x66>
 80117f6:	286b      	cmp	r0, #107	; 0x6b
 80117f8:	d827      	bhi.n	801184a <LCD_Index2Color_8666+0x5e>
 80117fa:	491e      	ldr	r1, [pc, #120]	; (8011874 <LCD_Index2Color_8666+0x88>)
 80117fc:	4b1e      	ldr	r3, [pc, #120]	; (8011878 <LCD_Index2Color_8666+0x8c>)
 80117fe:	fba1 4200 	umull	r4, r2, r1, r0
 8011802:	fba3 4300 	umull	r4, r3, r3, r0
 8011806:	0892      	lsrs	r2, r2, #2
 8011808:	08db      	lsrs	r3, r3, #3
 801180a:	fba1 4102 	umull	r4, r1, r1, r2
 801180e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8011812:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011816:	0889      	lsrs	r1, r1, #2
 8011818:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 801181c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011824:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011828:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 801182c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8011830:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011834:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8011838:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801183c:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8011840:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8011844:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011848:	4770      	bx	lr
 801184a:	2893      	cmp	r0, #147	; 0x93
 801184c:	d90e      	bls.n	801186c <LCD_Index2Color_8666+0x80>
 801184e:	3828      	subs	r0, #40	; 0x28
 8011850:	e7d3      	b.n	80117fa <LCD_Index2Color_8666+0xe>
 8011852:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 8011856:	4b09      	ldr	r3, [pc, #36]	; (801187c <LCD_Index2Color_8666+0x90>)
 8011858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801185c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8011860:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8011864:	4403      	add	r3, r0
 8011866:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 801186a:	4770      	bx	lr
 801186c:	2000      	movs	r0, #0
 801186e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011872:	4770      	bx	lr
 8011874:	aaaaaaab 	.word	0xaaaaaaab
 8011878:	38e38e39 	.word	0x38e38e39
 801187c:	f8000008 	.word	0xf8000008

08011880 <_GetIndexMask_8666_1>:
 8011880:	20ff      	movs	r0, #255	; 0xff
 8011882:	4770      	bx	lr

08011884 <_Color2Index_8666_1>:
 8011884:	b410      	push	{r4}
 8011886:	b170      	cbz	r0, 80118a6 <_Color2Index_8666_1+0x22>
 8011888:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801188c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011890:	b2c0      	uxtb	r0, r0
 8011892:	4299      	cmp	r1, r3
 8011894:	d10a      	bne.n	80118ac <_Color2Index_8666_1+0x28>
 8011896:	4288      	cmp	r0, r1
 8011898:	d108      	bne.n	80118ac <_Color2Index_8666_1+0x28>
 801189a:	3308      	adds	r3, #8
 801189c:	4815      	ldr	r0, [pc, #84]	; (80118f4 <_Color2Index_8666_1+0x70>)
 801189e:	fba0 3003 	umull	r3, r0, r0, r3
 80118a2:	0900      	lsrs	r0, r0, #4
 80118a4:	3078      	adds	r0, #120	; 0x78
 80118a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80118b0:	4c11      	ldr	r4, [pc, #68]	; (80118f8 <_Color2Index_8666_1+0x74>)
 80118b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80118b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80118ba:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 80118be:	f102 007f 	add.w	r0, r2, #127	; 0x7f
 80118c2:	317f      	adds	r1, #127	; 0x7f
 80118c4:	fba4 2303 	umull	r2, r3, r4, r3
 80118c8:	fba4 2000 	umull	r2, r0, r4, r0
 80118cc:	fba4 2101 	umull	r2, r1, r4, r1
 80118d0:	09db      	lsrs	r3, r3, #7
 80118d2:	09c0      	lsrs	r0, r0, #7
 80118d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80118dc:	09c9      	lsrs	r1, r1, #7
 80118de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80118e2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80118e6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80118ea:	286b      	cmp	r0, #107	; 0x6b
 80118ec:	bf94      	ite	ls
 80118ee:	300c      	addls	r0, #12
 80118f0:	301c      	addhi	r0, #28
 80118f2:	4770      	bx	lr
 80118f4:	f0f0f0f1 	.word	0xf0f0f0f1
 80118f8:	80808081 	.word	0x80808081

080118fc <_Index2Color_8666_1>:
 80118fc:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8011900:	2b0f      	cmp	r3, #15
 8011902:	d932      	bls.n	801196a <_Index2Color_8666_1+0x6e>
 8011904:	f1a0 030c 	sub.w	r3, r0, #12
 8011908:	2be7      	cmp	r3, #231	; 0xe7
 801190a:	d82b      	bhi.n	8011964 <_Index2Color_8666_1+0x68>
 801190c:	2877      	cmp	r0, #119	; 0x77
 801190e:	4a1c      	ldr	r2, [pc, #112]	; (8011980 <_Index2Color_8666_1+0x84>)
 8011910:	bf88      	it	hi
 8011912:	f1a0 031c 	subhi.w	r3, r0, #28
 8011916:	481b      	ldr	r0, [pc, #108]	; (8011984 <_Index2Color_8666_1+0x88>)
 8011918:	b410      	push	{r4}
 801191a:	fba0 4103 	umull	r4, r1, r0, r3
 801191e:	fba2 4203 	umull	r4, r2, r2, r3
 8011922:	0889      	lsrs	r1, r1, #2
 8011924:	08d2      	lsrs	r2, r2, #3
 8011926:	fba0 4001 	umull	r4, r0, r0, r1
 801192a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801192e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011932:	0880      	lsrs	r0, r0, #2
 8011934:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8011938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801193c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8011940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011944:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
 8011948:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801194c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011950:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011954:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8011958:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 801195c:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8011960:	4618      	mov	r0, r3
 8011962:	4770      	bx	lr
 8011964:	2300      	movs	r3, #0
 8011966:	4618      	mov	r0, r3
 8011968:	4770      	bx	lr
 801196a:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 801196e:	4b06      	ldr	r3, [pc, #24]	; (8011988 <_Index2Color_8666_1+0x8c>)
 8011970:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8011974:	eb00 3000 	add.w	r0, r0, r0, lsl #12
 8011978:	4403      	add	r3, r0
 801197a:	4618      	mov	r0, r3
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	38e38e39 	.word	0x38e38e39
 8011984:	aaaaaaab 	.word	0xaaaaaaab
 8011988:	f8000008 	.word	0xf8000008

0801198c <_Color2Index_88666I>:
 801198c:	b510      	push	{r4, lr}
 801198e:	4604      	mov	r4, r0
 8011990:	4b04      	ldr	r3, [pc, #16]	; (80119a4 <_Color2Index_88666I+0x18>)
 8011992:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8011996:	0c24      	lsrs	r4, r4, #16
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4798      	blx	r3
 801199c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80119a0:	4320      	orrs	r0, r4
 80119a2:	bd10      	pop	{r4, pc}
 80119a4:	08027164 	.word	0x08027164

080119a8 <_Index2Color_88666I>:
 80119a8:	b510      	push	{r4, lr}
 80119aa:	4604      	mov	r4, r0
 80119ac:	4b04      	ldr	r3, [pc, #16]	; (80119c0 <_Index2Color_88666I+0x18>)
 80119ae:	b2c0      	uxtb	r0, r0
 80119b0:	0424      	lsls	r4, r4, #16
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	4798      	blx	r3
 80119b6:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80119ba:	4320      	orrs	r0, r4
 80119bc:	bd10      	pop	{r4, pc}
 80119be:	bf00      	nop
 80119c0:	08027164 	.word	0x08027164

080119c4 <_GetIndexMask_88666I>:
 80119c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop

080119cc <_Color2IndexBulk_88666I>:
 80119cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119d0:	4c0b      	ldr	r4, [pc, #44]	; (8011a00 <_Color2IndexBulk_88666I+0x34>)
 80119d2:	4606      	mov	r6, r0
 80119d4:	4689      	mov	r9, r1
 80119d6:	4615      	mov	r5, r2
 80119d8:	4698      	mov	r8, r3
 80119da:	6827      	ldr	r7, [r4, #0]
 80119dc:	f856 4b04 	ldr.w	r4, [r6], #4
 80119e0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 80119e4:	0c24      	lsrs	r4, r4, #16
 80119e6:	47b8      	blx	r7
 80119e8:	3d01      	subs	r5, #1
 80119ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80119ee:	ea40 0004 	orr.w	r0, r0, r4
 80119f2:	f8a9 0000 	strh.w	r0, [r9]
 80119f6:	44c1      	add	r9, r8
 80119f8:	d1f0      	bne.n	80119dc <_Color2IndexBulk_88666I+0x10>
 80119fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119fe:	bf00      	nop
 8011a00:	08027164 	.word	0x08027164

08011a04 <_Index2ColorBulk_88666I>:
 8011a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a08:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 8011a0c:	4c0d      	ldr	r4, [pc, #52]	; (8011a44 <_Index2ColorBulk_88666I+0x40>)
 8011a0e:	f102 38ff 	add.w	r8, r2, #4294967295
 8011a12:	425f      	negs	r7, r3
 8011a14:	4491      	add	r9, r2
 8011a16:	6866      	ldr	r6, [r4, #4]
 8011a18:	fb03 0508 	mla	r5, r3, r8, r0
 8011a1c:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 8011a20:	e001      	b.n	8011a26 <_Index2ColorBulk_88666I+0x22>
 8011a22:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a26:	882c      	ldrh	r4, [r5, #0]
 8011a28:	443d      	add	r5, r7
 8011a2a:	b2e0      	uxtb	r0, r4
 8011a2c:	0424      	lsls	r4, r4, #16
 8011a2e:	47b0      	blx	r6
 8011a30:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8011a34:	4320      	orrs	r0, r4
 8011a36:	f849 0904 	str.w	r0, [r9], #-4
 8011a3a:	f1b8 0f00 	cmp.w	r8, #0
 8011a3e:	d1f0      	bne.n	8011a22 <_Index2ColorBulk_88666I+0x1e>
 8011a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a44:	08027164 	.word	0x08027164

08011a48 <_Color2Index_M1555I>:
 8011a48:	4909      	ldr	r1, [pc, #36]	; (8011a70 <_Color2Index_M1555I+0x28>)
 8011a4a:	b2c2      	uxtb	r2, r0
 8011a4c:	0fc3      	lsrs	r3, r0, #31
 8011a4e:	5c8a      	ldrb	r2, [r1, r2]
 8011a50:	b410      	push	{r4}
 8011a52:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011a56:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8011a5a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8011a5e:	5d0c      	ldrb	r4, [r1, r4]
 8011a60:	5c08      	ldrb	r0, [r1, r0]
 8011a62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8011a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a6a:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8011a6e:	4770      	bx	lr
 8011a70:	080274d0 	.word	0x080274d0

08011a74 <_Index2Color_M1555I>:
 8011a74:	490a      	ldr	r1, [pc, #40]	; (8011aa0 <_Index2Color_M1555I+0x2c>)
 8011a76:	f000 021f 	and.w	r2, r0, #31
 8011a7a:	f340 33c0 	sbfx	r3, r0, #15, #1
 8011a7e:	5c8a      	ldrb	r2, [r1, r2]
 8011a80:	b410      	push	{r4}
 8011a82:	f3c0 1444 	ubfx	r4, r0, #5, #5
 8011a86:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 8011a8a:	f3c0 2084 	ubfx	r0, r0, #10, #5
 8011a8e:	5d0c      	ldrb	r4, [r1, r4]
 8011a90:	5c08      	ldrb	r0, [r1, r0]
 8011a92:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8011a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a9a:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8011a9e:	4770      	bx	lr
 8011aa0:	08027710 	.word	0x08027710

08011aa4 <_GetIndexMask_M1555I>:
 8011aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop

08011aac <_Color2IndexBulk_M1555I>:
 8011aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aae:	4f14      	ldr	r7, [pc, #80]	; (8011b00 <_Color2IndexBulk_M1555I+0x54>)
 8011ab0:	f8d7 e000 	ldr.w	lr, [r7]
 8011ab4:	f1be 0f00 	cmp.w	lr, #0
 8011ab8:	d003      	beq.n	8011ac2 <_Color2IndexBulk_M1555I+0x16>
 8011aba:	46f4      	mov	ip, lr
 8011abc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ac0:	4760      	bx	ip
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	4615      	mov	r5, r2
 8011ac8:	461f      	mov	r7, r3
 8011aca:	480e      	ldr	r0, [pc, #56]	; (8011b04 <_Color2IndexBulk_M1555I+0x58>)
 8011acc:	f856 2b04 	ldr.w	r2, [r6], #4
 8011ad0:	3d01      	subs	r5, #1
 8011ad2:	fa5f fe82 	uxtb.w	lr, r2
 8011ad6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011ada:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011ade:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011ae2:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8011ae6:	f810 200c 	ldrb.w	r2, [r0, ip]
 8011aea:	5c41      	ldrb	r1, [r0, r1]
 8011aec:	eb02 228e 	add.w	r2, r2, lr, lsl #10
 8011af0:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8011af4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011af8:	8023      	strh	r3, [r4, #0]
 8011afa:	443c      	add	r4, r7
 8011afc:	d1e6      	bne.n	8011acc <_Color2IndexBulk_M1555I+0x20>
 8011afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b00:	200001c4 	.word	0x200001c4
 8011b04:	080274d0 	.word	0x080274d0

08011b08 <_Index2ColorBulk_M1555I>:
 8011b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0c:	4c17      	ldr	r4, [pc, #92]	; (8011b6c <_Index2ColorBulk_M1555I+0x64>)
 8011b0e:	6864      	ldr	r4, [r4, #4]
 8011b10:	b11c      	cbz	r4, 8011b1a <_Index2ColorBulk_M1555I+0x12>
 8011b12:	46a4      	mov	ip, r4
 8011b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b18:	4760      	bx	ip
 8011b1a:	468c      	mov	ip, r1
 8011b1c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8011b20:	4680      	mov	r8, r0
 8011b22:	1e56      	subs	r6, r2, #1
 8011b24:	4411      	add	r1, r2
 8011b26:	f1c3 0e00 	rsb	lr, r3, #0
 8011b2a:	4811      	ldr	r0, [pc, #68]	; (8011b70 <_Index2ColorBulk_M1555I+0x68>)
 8011b2c:	fb03 8306 	mla	r3, r3, r6, r8
 8011b30:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8011b34:	e000      	b.n	8011b38 <_Index2ColorBulk_M1555I+0x30>
 8011b36:	3e01      	subs	r6, #1
 8011b38:	881d      	ldrh	r5, [r3, #0]
 8011b3a:	4473      	add	r3, lr
 8011b3c:	f005 041f 	and.w	r4, r5, #31
 8011b40:	f345 37c0 	sbfx	r7, r5, #15, #1
 8011b44:	f3c5 1244 	ubfx	r2, r5, #5, #5
 8011b48:	f3c5 2584 	ubfx	r5, r5, #10, #5
 8011b4c:	5d04      	ldrb	r4, [r0, r4]
 8011b4e:	5c82      	ldrb	r2, [r0, r2]
 8011b50:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8011b54:	5d45      	ldrb	r5, [r0, r5]
 8011b56:	eb04 2202 	add.w	r2, r4, r2, lsl #8
 8011b5a:	eb02 4205 	add.w	r2, r2, r5, lsl #16
 8011b5e:	f841 2904 	str.w	r2, [r1], #-4
 8011b62:	2e00      	cmp	r6, #0
 8011b64:	d1e7      	bne.n	8011b36 <_Index2ColorBulk_M1555I+0x2e>
 8011b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6a:	bf00      	nop
 8011b6c:	200001c4 	.word	0x200001c4
 8011b70:	08027710 	.word	0x08027710

08011b74 <GUICC_M1555I_SetCustColorConv>:
 8011b74:	4b01      	ldr	r3, [pc, #4]	; (8011b7c <GUICC_M1555I_SetCustColorConv+0x8>)
 8011b76:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b7a:	4770      	bx	lr
 8011b7c:	200001c4 	.word	0x200001c4

08011b80 <_Color2Index_M4444I>:
 8011b80:	b510      	push	{r4, lr}
 8011b82:	b2c2      	uxtb	r2, r0
 8011b84:	4b0e      	ldr	r3, [pc, #56]	; (8011bc0 <_Color2Index_M4444I+0x40>)
 8011b86:	0e04      	lsrs	r4, r0, #24
 8011b88:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011b8c:	3208      	adds	r2, #8
 8011b8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8011b92:	3408      	adds	r4, #8
 8011b94:	3108      	adds	r1, #8
 8011b96:	fba3 e202 	umull	lr, r2, r3, r2
 8011b9a:	3008      	adds	r0, #8
 8011b9c:	fba3 e404 	umull	lr, r4, r3, r4
 8011ba0:	fba3 e101 	umull	lr, r1, r3, r1
 8011ba4:	0912      	lsrs	r2, r2, #4
 8011ba6:	0924      	lsrs	r4, r4, #4
 8011ba8:	fba3 0300 	umull	r0, r3, r3, r0
 8011bac:	0909      	lsrs	r1, r1, #4
 8011bae:	eb02 3004 	add.w	r0, r2, r4, lsl #12
 8011bb2:	f023 030f 	bic.w	r3, r3, #15
 8011bb6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8011bba:	4418      	add	r0, r3
 8011bbc:	bd10      	pop	{r4, pc}
 8011bbe:	bf00      	nop
 8011bc0:	f0f0f0f1 	.word	0xf0f0f0f1

08011bc4 <_Index2Color_M4444I>:
 8011bc4:	490b      	ldr	r1, [pc, #44]	; (8011bf4 <_Index2Color_M4444I+0x30>)
 8011bc6:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8011bca:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8011bce:	5c8a      	ldrb	r2, [r1, r2]
 8011bd0:	5ccb      	ldrb	r3, [r1, r3]
 8011bd2:	0412      	lsls	r2, r2, #16
 8011bd4:	b410      	push	{r4}
 8011bd6:	f000 040f 	and.w	r4, r0, #15
 8011bda:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 8011bde:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8011be2:	5d0c      	ldrb	r4, [r1, r4]
 8011be4:	5c08      	ldrb	r0, [r1, r0]
 8011be6:	4423      	add	r3, r4
 8011be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bec:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	08027730 	.word	0x08027730

08011bf8 <_GetIndexMask_M4444I>:
 8011bf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011bfc:	4770      	bx	lr
 8011bfe:	bf00      	nop

08011c00 <_Color2IndexBulk_M4444I>:
 8011c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c02:	4f1d      	ldr	r7, [pc, #116]	; (8011c78 <_Color2IndexBulk_M4444I+0x78>)
 8011c04:	f8d7 e000 	ldr.w	lr, [r7]
 8011c08:	f1be 0f00 	cmp.w	lr, #0
 8011c0c:	d003      	beq.n	8011c16 <_Color2IndexBulk_M4444I+0x16>
 8011c0e:	46f4      	mov	ip, lr
 8011c10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011c14:	4760      	bx	ip
 8011c16:	4606      	mov	r6, r0
 8011c18:	460c      	mov	r4, r1
 8011c1a:	4615      	mov	r5, r2
 8011c1c:	461f      	mov	r7, r3
 8011c1e:	4817      	ldr	r0, [pc, #92]	; (8011c7c <_Color2IndexBulk_M4444I+0x7c>)
 8011c20:	f856 3b04 	ldr.w	r3, [r6], #4
 8011c24:	3d01      	subs	r5, #1
 8011c26:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8011c2a:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 8011c2e:	b2d9      	uxtb	r1, r3
 8011c30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011c34:	f10c 0308 	add.w	r3, ip, #8
 8011c38:	f10e 0e08 	add.w	lr, lr, #8
 8011c3c:	f101 0108 	add.w	r1, r1, #8
 8011c40:	f102 0208 	add.w	r2, r2, #8
 8011c44:	fba0 c303 	umull	ip, r3, r0, r3
 8011c48:	fba0 c101 	umull	ip, r1, r0, r1
 8011c4c:	fba0 ce0e 	umull	ip, lr, r0, lr
 8011c50:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011c54:	ea4f 1111 	mov.w	r1, r1, lsr #4
 8011c58:	fba0 c202 	umull	ip, r2, r0, r2
 8011c5c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011c60:	eb01 3303 	add.w	r3, r1, r3, lsl #12
 8011c64:	f022 020f 	bic.w	r2, r2, #15
 8011c68:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8011c6c:	4413      	add	r3, r2
 8011c6e:	8023      	strh	r3, [r4, #0]
 8011c70:	443c      	add	r4, r7
 8011c72:	d1d5      	bne.n	8011c20 <_Color2IndexBulk_M4444I+0x20>
 8011c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c76:	bf00      	nop
 8011c78:	200001cc 	.word	0x200001cc
 8011c7c:	f0f0f0f1 	.word	0xf0f0f0f1

08011c80 <_Index2ColorBulk_M4444I>:
 8011c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c84:	4c17      	ldr	r4, [pc, #92]	; (8011ce4 <_Index2ColorBulk_M4444I+0x64>)
 8011c86:	6864      	ldr	r4, [r4, #4]
 8011c88:	b11c      	cbz	r4, 8011c92 <_Index2ColorBulk_M4444I+0x12>
 8011c8a:	46a4      	mov	ip, r4
 8011c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c90:	4760      	bx	ip
 8011c92:	468c      	mov	ip, r1
 8011c94:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8011c98:	4680      	mov	r8, r0
 8011c9a:	1e50      	subs	r0, r2, #1
 8011c9c:	4411      	add	r1, r2
 8011c9e:	f1c3 0e00 	rsb	lr, r3, #0
 8011ca2:	4e11      	ldr	r6, [pc, #68]	; (8011ce8 <_Index2ColorBulk_M4444I+0x68>)
 8011ca4:	fb03 8300 	mla	r3, r3, r0, r8
 8011ca8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8011cac:	e000      	b.n	8011cb0 <_Index2ColorBulk_M4444I+0x30>
 8011cae:	3801      	subs	r0, #1
 8011cb0:	881a      	ldrh	r2, [r3, #0]
 8011cb2:	4473      	add	r3, lr
 8011cb4:	0b17      	lsrs	r7, r2, #12
 8011cb6:	f002 040f 	and.w	r4, r2, #15
 8011cba:	f3c2 2c03 	ubfx	ip, r2, #8, #4
 8011cbe:	f3c2 1503 	ubfx	r5, r2, #4, #4
 8011cc2:	5df7      	ldrb	r7, [r6, r7]
 8011cc4:	5d34      	ldrb	r4, [r6, r4]
 8011cc6:	f816 200c 	ldrb.w	r2, [r6, ip]
 8011cca:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8011cce:	5d75      	ldrb	r5, [r6, r5]
 8011cd0:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8011cd4:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8011cd8:	f841 2904 	str.w	r2, [r1], #-4
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d1e6      	bne.n	8011cae <_Index2ColorBulk_M4444I+0x2e>
 8011ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce4:	200001cc 	.word	0x200001cc
 8011ce8:	08027730 	.word	0x08027730

08011cec <GUICC_M4444I_SetCustColorConv>:
 8011cec:	4b01      	ldr	r3, [pc, #4]	; (8011cf4 <GUICC_M4444I_SetCustColorConv+0x8>)
 8011cee:	e883 0003 	stmia.w	r3, {r0, r1}
 8011cf2:	4770      	bx	lr
 8011cf4:	200001cc 	.word	0x200001cc

08011cf8 <_Color2Index_M8888I>:
 8011cf8:	4770      	bx	lr
 8011cfa:	bf00      	nop

08011cfc <_GetIndexMask_M8888I>:
 8011cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop

08011d04 <_Color2IndexBulk_M8888I>:
 8011d04:	b410      	push	{r4}
 8011d06:	f850 4b04 	ldr.w	r4, [r0], #4
 8011d0a:	3a01      	subs	r2, #1
 8011d0c:	600c      	str	r4, [r1, #0]
 8011d0e:	4419      	add	r1, r3
 8011d10:	d1f9      	bne.n	8011d06 <_Color2IndexBulk_M8888I+0x2>
 8011d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <_Index2ColorBulk_M8888I>:
 8011d18:	b410      	push	{r4}
 8011d1a:	6804      	ldr	r4, [r0, #0]
 8011d1c:	3a01      	subs	r2, #1
 8011d1e:	4418      	add	r0, r3
 8011d20:	f841 4b04 	str.w	r4, [r1], #4
 8011d24:	d1f9      	bne.n	8011d1a <_Index2ColorBulk_M8888I+0x2>
 8011d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <GUICC_M8888I_SetCustColorConv>:
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop

08011d30 <LCD_Index2Color_565>:
 8011d30:	b430      	push	{r4, r5}
 8011d32:	4909      	ldr	r1, [pc, #36]	; (8011d58 <LCD_Index2Color_565+0x28>)
 8011d34:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8011d38:	f000 051f 	and.w	r5, r0, #31
 8011d3c:	4c07      	ldr	r4, [pc, #28]	; (8011d5c <LCD_Index2Color_565+0x2c>)
 8011d3e:	f3c0 1245 	ubfx	r2, r0, #5, #6
 8011d42:	5ccb      	ldrb	r3, [r1, r3]
 8011d44:	5d48      	ldrb	r0, [r1, r5]
 8011d46:	5ca2      	ldrb	r2, [r4, r2]
 8011d48:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8011d4c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8011d50:	bc30      	pop	{r4, r5}
 8011d52:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011d56:	4770      	bx	lr
 8011d58:	08027710 	.word	0x08027710
 8011d5c:	080276d0 	.word	0x080276d0

08011d60 <_Color2Index_565>:
 8011d60:	b410      	push	{r4}
 8011d62:	4a08      	ldr	r2, [pc, #32]	; (8011d84 <_Color2Index_565+0x24>)
 8011d64:	b2c4      	uxtb	r4, r0
 8011d66:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011d6a:	4907      	ldr	r1, [pc, #28]	; (8011d88 <_Color2Index_565+0x28>)
 8011d6c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8011d70:	5cd3      	ldrb	r3, [r2, r3]
 8011d72:	5d12      	ldrb	r2, [r2, r4]
 8011d74:	5c08      	ldrb	r0, [r1, r0]
 8011d76:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8011d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d7e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8011d82:	4770      	bx	lr
 8011d84:	080274d0 	.word	0x080274d0
 8011d88:	080273d0 	.word	0x080273d0

08011d8c <_GetIndexMask_565>:
 8011d8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop

08011d94 <_Color2IndexBulk>:
 8011d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d96:	f8df c034 	ldr.w	ip, [pc, #52]	; 8011dcc <_Color2IndexBulk+0x38>
 8011d9a:	4f0b      	ldr	r7, [pc, #44]	; (8011dc8 <_Color2IndexBulk+0x34>)
 8011d9c:	f850 4b04 	ldr.w	r4, [r0], #4
 8011da0:	3a01      	subs	r2, #1
 8011da2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8011da6:	fa5f fe84 	uxtb.w	lr, r4
 8011daa:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8011dae:	5d7d      	ldrb	r5, [r7, r5]
 8011db0:	f817 400e 	ldrb.w	r4, [r7, lr]
 8011db4:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8011db8:	eb05 24c4 	add.w	r4, r5, r4, lsl #11
 8011dbc:	eb04 1446 	add.w	r4, r4, r6, lsl #5
 8011dc0:	800c      	strh	r4, [r1, #0]
 8011dc2:	4419      	add	r1, r3
 8011dc4:	d1ea      	bne.n	8011d9c <_Color2IndexBulk+0x8>
 8011dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dc8:	080274d0 	.word	0x080274d0
 8011dcc:	080273d0 	.word	0x080273d0

08011dd0 <_Index2ColorBulk>:
 8011dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dd2:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8011dd6:	1e56      	subs	r6, r2, #1
 8011dd8:	4f10      	ldr	r7, [pc, #64]	; (8011e1c <_Index2ColorBulk+0x4c>)
 8011dda:	f1c3 0c00 	rsb	ip, r3, #0
 8011dde:	4414      	add	r4, r2
 8011de0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8011e20 <_Index2ColorBulk+0x50>
 8011de4:	fb03 0006 	mla	r0, r3, r6, r0
 8011de8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011dec:	e000      	b.n	8011df0 <_Index2ColorBulk+0x20>
 8011dee:	3e01      	subs	r6, #1
 8011df0:	8802      	ldrh	r2, [r0, #0]
 8011df2:	4460      	add	r0, ip
 8011df4:	0ad3      	lsrs	r3, r2, #11
 8011df6:	f002 041f 	and.w	r4, r2, #31
 8011dfa:	f3c2 1545 	ubfx	r5, r2, #5, #6
 8011dfe:	5d3a      	ldrb	r2, [r7, r4]
 8011e00:	5cfc      	ldrb	r4, [r7, r3]
 8011e02:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8011e06:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8011e0a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8011e0e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8011e12:	f841 2904 	str.w	r2, [r1], #-4
 8011e16:	2e00      	cmp	r6, #0
 8011e18:	d1e9      	bne.n	8011dee <_Index2ColorBulk+0x1e>
 8011e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e1c:	08027710 	.word	0x08027710
 8011e20:	080276d0 	.word	0x080276d0

08011e24 <_Color2Index_888>:
 8011e24:	0403      	lsls	r3, r0, #16
 8011e26:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011e2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011e2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011e32:	4313      	orrs	r3, r2
 8011e34:	4318      	orrs	r0, r3
 8011e36:	4770      	bx	lr

08011e38 <_GetIndexMask_888>:
 8011e38:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop

08011e40 <_Color2IndexBulk>:
 8011e40:	b470      	push	{r4, r5, r6}
 8011e42:	f850 4b04 	ldr.w	r4, [r0], #4
 8011e46:	3a01      	subs	r2, #1
 8011e48:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8011e4c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011e50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011e54:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8011e58:	ea45 0506 	orr.w	r5, r5, r6
 8011e5c:	ea44 0405 	orr.w	r4, r4, r5
 8011e60:	600c      	str	r4, [r1, #0]
 8011e62:	4419      	add	r1, r3
 8011e64:	d1ed      	bne.n	8011e42 <_Color2IndexBulk+0x2>
 8011e66:	bc70      	pop	{r4, r5, r6}
 8011e68:	4770      	bx	lr
 8011e6a:	bf00      	nop

08011e6c <_Index2ColorBulk>:
 8011e6c:	b470      	push	{r4, r5, r6}
 8011e6e:	6804      	ldr	r4, [r0, #0]
 8011e70:	3a01      	subs	r2, #1
 8011e72:	4418      	add	r0, r3
 8011e74:	ea4f 4504 	mov.w	r5, r4, lsl #16
 8011e78:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8011e7c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011e80:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8011e84:	ea45 0506 	orr.w	r5, r5, r6
 8011e88:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8011e8c:	ea44 0405 	orr.w	r4, r4, r5
 8011e90:	f841 4b04 	str.w	r4, [r1], #4
 8011e94:	d1eb      	bne.n	8011e6e <_Index2ColorBulk+0x2>
 8011e96:	bc70      	pop	{r4, r5, r6}
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop

08011e9c <_Color2Index_8888>:
 8011e9c:	43c3      	mvns	r3, r0
 8011e9e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011ea2:	0402      	lsls	r2, r0, #16
 8011ea4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011ea8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011eac:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011eb0:	430b      	orrs	r3, r1
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	4318      	orrs	r0, r3
 8011eb6:	4770      	bx	lr

08011eb8 <_GetIndexMask_8888>:
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop

08011ec0 <_Color2IndexBulk>:
 8011ec0:	b4f0      	push	{r4, r5, r6, r7}
 8011ec2:	f850 4b04 	ldr.w	r4, [r0], #4
 8011ec6:	3a01      	subs	r2, #1
 8011ec8:	ea6f 0504 	mvn.w	r5, r4
 8011ecc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8011ed0:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8011ed4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011ed8:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8011edc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8011ee0:	ea45 0507 	orr.w	r5, r5, r7
 8011ee4:	ea45 0506 	orr.w	r5, r5, r6
 8011ee8:	ea44 0405 	orr.w	r4, r4, r5
 8011eec:	600c      	str	r4, [r1, #0]
 8011eee:	4419      	add	r1, r3
 8011ef0:	d1e7      	bne.n	8011ec2 <_Color2IndexBulk+0x2>
 8011ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop

08011ef8 <_Index2ColorBulk>:
 8011ef8:	b4f0      	push	{r4, r5, r6, r7}
 8011efa:	6804      	ldr	r4, [r0, #0]
 8011efc:	3a01      	subs	r2, #1
 8011efe:	4418      	add	r0, r3
 8011f00:	ea6f 0504 	mvn.w	r5, r4
 8011f04:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8011f08:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8011f0c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8011f10:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8011f14:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8011f18:	ea45 0507 	orr.w	r5, r5, r7
 8011f1c:	ea45 0506 	orr.w	r5, r5, r6
 8011f20:	ea44 0405 	orr.w	r4, r4, r5
 8011f24:	f841 4b04 	str.w	r4, [r1], #4
 8011f28:	d1e7      	bne.n	8011efa <_Index2ColorBulk+0x2>
 8011f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8011f2c:	4770      	bx	lr
 8011f2e:	bf00      	nop

08011f30 <LCD_Index2Color_8888>:
 8011f30:	43c3      	mvns	r3, r0
 8011f32:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011f36:	0402      	lsls	r2, r0, #16
 8011f38:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011f3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011f40:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011f44:	430b      	orrs	r3, r1
 8011f46:	4313      	orrs	r3, r2
 8011f48:	4318      	orrs	r0, r3
 8011f4a:	4770      	bx	lr

08011f4c <LCD_Index2Color_888>:
 8011f4c:	0403      	lsls	r3, r0, #16
 8011f4e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011f52:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8011f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f60:	4318      	orrs	r0, r3
 8011f62:	4770      	bx	lr

08011f64 <LCD_Index2Color_M565>:
 8011f64:	490a      	ldr	r1, [pc, #40]	; (8011f90 <LCD_Index2Color_M565+0x2c>)
 8011f66:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8011f6a:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8011f6e:	f000 001f 	and.w	r0, r0, #31
 8011f72:	5c8a      	ldrb	r2, [r1, r2]
 8011f74:	5c08      	ldrb	r0, [r1, r0]
 8011f76:	0412      	lsls	r2, r2, #16
 8011f78:	b410      	push	{r4}
 8011f7a:	4c06      	ldr	r4, [pc, #24]	; (8011f94 <LCD_Index2Color_M565+0x30>)
 8011f7c:	5ce3      	ldrb	r3, [r4, r3]
 8011f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f82:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8011f86:	4418      	add	r0, r3
 8011f88:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop
 8011f90:	08027710 	.word	0x08027710
 8011f94:	080276d0 	.word	0x080276d0

08011f98 <_Color2Index_M565>:
 8011f98:	4a08      	ldr	r2, [pc, #32]	; (8011fbc <_Color2Index_M565+0x24>)
 8011f9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011f9e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011fa2:	b2c0      	uxtb	r0, r0
 8011fa4:	5cd3      	ldrb	r3, [r2, r3]
 8011fa6:	5c10      	ldrb	r0, [r2, r0]
 8011fa8:	02db      	lsls	r3, r3, #11
 8011faa:	b410      	push	{r4}
 8011fac:	4c04      	ldr	r4, [pc, #16]	; (8011fc0 <_Color2Index_M565+0x28>)
 8011fae:	5c61      	ldrb	r1, [r4, r1]
 8011fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fb4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011fb8:	4418      	add	r0, r3
 8011fba:	4770      	bx	lr
 8011fbc:	080274d0 	.word	0x080274d0
 8011fc0:	080273d0 	.word	0x080273d0

08011fc4 <_GetIndexMask_M565>:
 8011fc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011fc8:	4770      	bx	lr
 8011fca:	bf00      	nop

08011fcc <_Color2IndexBulk>:
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	4f13      	ldr	r7, [pc, #76]	; (801201c <_Color2IndexBulk+0x50>)
 8011fd0:	f8d7 e000 	ldr.w	lr, [r7]
 8011fd4:	f1be 0f00 	cmp.w	lr, #0
 8011fd8:	d003      	beq.n	8011fe2 <_Color2IndexBulk+0x16>
 8011fda:	46f4      	mov	ip, lr
 8011fdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011fe0:	4760      	bx	ip
 8011fe2:	4606      	mov	r6, r0
 8011fe4:	460c      	mov	r4, r1
 8011fe6:	4615      	mov	r5, r2
 8011fe8:	461f      	mov	r7, r3
 8011fea:	f8df e038 	ldr.w	lr, [pc, #56]	; 8012024 <_Color2IndexBulk+0x58>
 8011fee:	480c      	ldr	r0, [pc, #48]	; (8012020 <_Color2IndexBulk+0x54>)
 8011ff0:	f856 3b04 	ldr.w	r3, [r6], #4
 8011ff4:	3d01      	subs	r5, #1
 8011ff6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ffa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011ffe:	b2d9      	uxtb	r1, r3
 8012000:	5c82      	ldrb	r2, [r0, r2]
 8012002:	f81e 300c 	ldrb.w	r3, [lr, ip]
 8012006:	ea4f 22c2 	mov.w	r2, r2, lsl #11
 801200a:	5c41      	ldrb	r1, [r0, r1]
 801200c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8012010:	440b      	add	r3, r1
 8012012:	8023      	strh	r3, [r4, #0]
 8012014:	443c      	add	r4, r7
 8012016:	d1eb      	bne.n	8011ff0 <_Color2IndexBulk+0x24>
 8012018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801201a:	bf00      	nop
 801201c:	200001d4 	.word	0x200001d4
 8012020:	080274d0 	.word	0x080274d0
 8012024:	080273d0 	.word	0x080273d0

08012028 <_Index2ColorBulk>:
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202c:	4c17      	ldr	r4, [pc, #92]	; (801208c <_Index2ColorBulk+0x64>)
 801202e:	6864      	ldr	r4, [r4, #4]
 8012030:	b11c      	cbz	r4, 801203a <_Index2ColorBulk+0x12>
 8012032:	46a4      	mov	ip, r4
 8012034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012038:	4760      	bx	ip
 801203a:	468c      	mov	ip, r1
 801203c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8012040:	4680      	mov	r8, r0
 8012042:	1e50      	subs	r0, r2, #1
 8012044:	4411      	add	r1, r2
 8012046:	f1c3 0e00 	rsb	lr, r3, #0
 801204a:	4e11      	ldr	r6, [pc, #68]	; (8012090 <_Index2ColorBulk+0x68>)
 801204c:	fb03 8300 	mla	r3, r3, r0, r8
 8012050:	4f10      	ldr	r7, [pc, #64]	; (8012094 <_Index2ColorBulk+0x6c>)
 8012052:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8012056:	e000      	b.n	801205a <_Index2ColorBulk+0x32>
 8012058:	3801      	subs	r0, #1
 801205a:	881a      	ldrh	r2, [r3, #0]
 801205c:	4473      	add	r3, lr
 801205e:	f002 041f 	and.w	r4, r2, #31
 8012062:	ea4f 2cd2 	mov.w	ip, r2, lsr #11
 8012066:	f3c2 1545 	ubfx	r5, r2, #5, #6
 801206a:	5d34      	ldrb	r4, [r6, r4]
 801206c:	f816 200c 	ldrb.w	r2, [r6, ip]
 8012070:	5d7d      	ldrb	r5, [r7, r5]
 8012072:	eb04 4202 	add.w	r2, r4, r2, lsl #16
 8012076:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 801207a:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 801207e:	f841 2904 	str.w	r2, [r1], #-4
 8012082:	2800      	cmp	r0, #0
 8012084:	d1e8      	bne.n	8012058 <_Index2ColorBulk+0x30>
 8012086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208a:	bf00      	nop
 801208c:	200001d4 	.word	0x200001d4
 8012090:	08027710 	.word	0x08027710
 8012094:	080276d0 	.word	0x080276d0

08012098 <GUICC_M565_SetCustColorConv>:
 8012098:	4b01      	ldr	r3, [pc, #4]	; (80120a0 <GUICC_M565_SetCustColorConv+0x8>)
 801209a:	e883 0003 	stmia.w	r3, {r0, r1}
 801209e:	4770      	bx	lr
 80120a0:	200001d4 	.word	0x200001d4

080120a4 <_Color2Index_M888>:
 80120a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop

080120ac <_GetIndexMask_M888>:
 80120ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop

080120b4 <_Color2IndexBulk>:
 80120b4:	b410      	push	{r4}
 80120b6:	f850 4b04 	ldr.w	r4, [r0], #4
 80120ba:	3a01      	subs	r2, #1
 80120bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80120c0:	600c      	str	r4, [r1, #0]
 80120c2:	4419      	add	r1, r3
 80120c4:	d1f7      	bne.n	80120b6 <_Color2IndexBulk+0x2>
 80120c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <_Index2ColorBulk>:
 80120cc:	b410      	push	{r4}
 80120ce:	6804      	ldr	r4, [r0, #0]
 80120d0:	3a01      	subs	r2, #1
 80120d2:	4418      	add	r0, r3
 80120d4:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
 80120d8:	f841 4b04 	str.w	r4, [r1], #4
 80120dc:	d1f7      	bne.n	80120ce <_Index2ColorBulk+0x2>
 80120de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <GUICC_M888_SetCustColorConv>:
 80120e4:	4770      	bx	lr
 80120e6:	bf00      	nop

080120e8 <_Color2Index_M8888>:
 80120e8:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop

080120f0 <_GetIndexMask_M8888>:
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop

080120f8 <_Color2IndexBulk>:
 80120f8:	b410      	push	{r4}
 80120fa:	f850 4b04 	ldr.w	r4, [r0], #4
 80120fe:	3a01      	subs	r2, #1
 8012100:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8012104:	600c      	str	r4, [r1, #0]
 8012106:	4419      	add	r1, r3
 8012108:	d1f7      	bne.n	80120fa <_Color2IndexBulk+0x2>
 801210a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_Index2ColorBulk>:
 8012110:	b410      	push	{r4}
 8012112:	6804      	ldr	r4, [r0, #0]
 8012114:	3a01      	subs	r2, #1
 8012116:	4418      	add	r0, r3
 8012118:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 801211c:	f841 4b04 	str.w	r4, [r1], #4
 8012120:	d1f7      	bne.n	8012112 <_Index2ColorBulk+0x2>
 8012122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012126:	4770      	bx	lr

08012128 <_Index2Color_M8888>:
 8012128:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop

08012130 <LCD_Index2Color_M8888I>:
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop

08012134 <LCD_Index2Color_M888>:
 8012134:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop

0801213c <GUI_DrawRect>:
 801213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012140:	b082      	sub	sp, #8
 8012142:	4604      	mov	r4, r0
 8012144:	4689      	mov	r9, r1
 8012146:	4692      	mov	sl, r2
 8012148:	4698      	mov	r8, r3
 801214a:	f006 fa2b 	bl	80185a4 <GUI_Lock>
 801214e:	4b1e      	ldr	r3, [pc, #120]	; (80121c8 <GUI_DrawRect+0x8c>)
 8012150:	4668      	mov	r0, sp
 8012152:	681f      	ldr	r7, [r3, #0]
 8012154:	7e3e      	ldrb	r6, [r7, #24]
 8012156:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8012158:	3e01      	subs	r6, #1
 801215a:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 801215c:	442c      	add	r4, r5
 801215e:	4455      	add	r5, sl
 8012160:	b2b2      	uxth	r2, r6
 8012162:	44b9      	add	r9, r7
 8012164:	44b8      	add	r8, r7
 8012166:	1aa6      	subs	r6, r4, r2
 8012168:	1951      	adds	r1, r2, r5
 801216a:	ebc2 0309 	rsb	r3, r2, r9
 801216e:	4442      	add	r2, r8
 8012170:	f8ad 6000 	strh.w	r6, [sp]
 8012174:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012178:	f8ad 3002 	strh.w	r3, [sp, #2]
 801217c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012180:	f00e fce8 	bl	8020b54 <WM__InitIVRSearch>
 8012184:	b1d8      	cbz	r0, 80121be <GUI_DrawRect+0x82>
 8012186:	f109 0701 	add.w	r7, r9, #1
 801218a:	f108 36ff 	add.w	r6, r8, #4294967295
 801218e:	462a      	mov	r2, r5
 8012190:	4649      	mov	r1, r9
 8012192:	4620      	mov	r0, r4
 8012194:	f007 ff54 	bl	801a040 <LCD_DrawHLine>
 8012198:	462a      	mov	r2, r5
 801219a:	4641      	mov	r1, r8
 801219c:	4620      	mov	r0, r4
 801219e:	f007 ff4f 	bl	801a040 <LCD_DrawHLine>
 80121a2:	4632      	mov	r2, r6
 80121a4:	4639      	mov	r1, r7
 80121a6:	4620      	mov	r0, r4
 80121a8:	f007 ff72 	bl	801a090 <LCD_DrawVLine>
 80121ac:	4632      	mov	r2, r6
 80121ae:	4639      	mov	r1, r7
 80121b0:	4628      	mov	r0, r5
 80121b2:	f007 ff6d 	bl	801a090 <LCD_DrawVLine>
 80121b6:	f00e fba3 	bl	8020900 <WM__GetNextIVR>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d1e7      	bne.n	801218e <GUI_DrawRect+0x52>
 80121be:	f006 f9e7 	bl	8018590 <GUI_Unlock>
 80121c2:	b002      	add	sp, #8
 80121c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c8:	20000018 	.word	0x20000018

080121cc <_AddFreeMemory>:
 80121cc:	4bc0      	ldr	r3, [pc, #768]	; (80124d0 <_AddFreeMemory+0x304>)
 80121ce:	68da      	ldr	r2, [r3, #12]
 80121d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121d2:	3a01      	subs	r2, #1
 80121d4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80121d6:	180d      	adds	r5, r1, r0
 80121d8:	4422      	add	r2, r4
 80121da:	42aa      	cmp	r2, r5
 80121dc:	d303      	bcc.n	80121e6 <_AddFreeMemory+0x1a>
 80121de:	580a      	ldr	r2, [r1, r0]
 80121e0:	2a00      	cmp	r2, #0
 80121e2:	f000 80a1 	beq.w	8012328 <_AddFreeMemory+0x15c>
 80121e6:	428c      	cmp	r4, r1
 80121e8:	d205      	bcs.n	80121f6 <_AddFreeMemory+0x2a>
 80121ea:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80121ee:	1a8a      	subs	r2, r1, r2
 80121f0:	6814      	ldr	r4, [r2, #0]
 80121f2:	2c00      	cmp	r4, #0
 80121f4:	d04a      	beq.n	801228c <_AddFreeMemory+0xc0>
 80121f6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80121fa:	4ab5      	ldr	r2, [pc, #724]	; (80124d0 <_AddFreeMemory+0x304>)
 80121fc:	42a0      	cmp	r0, r4
 80121fe:	f080 811e 	bcs.w	801243e <_AddFreeMemory+0x272>
 8012202:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8012206:	42a0      	cmp	r0, r4
 8012208:	f080 811b 	bcs.w	8012442 <_AddFreeMemory+0x276>
 801220c:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8012210:	42a0      	cmp	r0, r4
 8012212:	f080 8118 	bcs.w	8012446 <_AddFreeMemory+0x27a>
 8012216:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 801221a:	42a0      	cmp	r0, r4
 801221c:	f080 8115 	bcs.w	801244a <_AddFreeMemory+0x27e>
 8012220:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 8012224:	42a0      	cmp	r0, r4
 8012226:	f080 8112 	bcs.w	801244e <_AddFreeMemory+0x282>
 801222a:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 801222e:	42a0      	cmp	r0, r4
 8012230:	f080 810f 	bcs.w	8012452 <_AddFreeMemory+0x286>
 8012234:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 8012238:	42a0      	cmp	r0, r4
 801223a:	f080 810c 	bcs.w	8012456 <_AddFreeMemory+0x28a>
 801223e:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 8012242:	42a0      	cmp	r0, r4
 8012244:	f080 8109 	bcs.w	801245a <_AddFreeMemory+0x28e>
 8012248:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801224a:	42a0      	cmp	r0, r4
 801224c:	f080 8107 	bcs.w	801245e <_AddFreeMemory+0x292>
 8012250:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8012252:	4290      	cmp	r0, r2
 8012254:	f080 8105 	bcs.w	8012462 <_AddFreeMemory+0x296>
 8012258:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 801225a:	4a9d      	ldr	r2, [pc, #628]	; (80124d0 <_AddFreeMemory+0x304>)
 801225c:	42a0      	cmp	r0, r4
 801225e:	f080 8102 	bcs.w	8012466 <_AddFreeMemory+0x29a>
 8012262:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8012264:	42a0      	cmp	r0, r4
 8012266:	f080 8100 	bcs.w	801246a <_AddFreeMemory+0x29e>
 801226a:	6d94      	ldr	r4, [r2, #88]	; 0x58
 801226c:	42a0      	cmp	r0, r4
 801226e:	f080 80fe 	bcs.w	801246e <_AddFreeMemory+0x2a2>
 8012272:	6d14      	ldr	r4, [r2, #80]	; 0x50
 8012274:	42a0      	cmp	r0, r4
 8012276:	f080 80fc 	bcs.w	8012472 <_AddFreeMemory+0x2a6>
 801227a:	6c94      	ldr	r4, [r2, #72]	; 0x48
 801227c:	42a0      	cmp	r0, r4
 801227e:	f080 80fa 	bcs.w	8012476 <_AddFreeMemory+0x2aa>
 8012282:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012284:	4290      	cmp	r0, r2
 8012286:	f080 80a6 	bcs.w	80123d6 <_AddFreeMemory+0x20a>
 801228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801228c:	6851      	ldr	r1, [r2, #4]
 801228e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012292:	4408      	add	r0, r1
 8012294:	4c8e      	ldr	r4, [pc, #568]	; (80124d0 <_AddFreeMemory+0x304>)
 8012296:	42a9      	cmp	r1, r5
 8012298:	f080 80f9 	bcs.w	801248e <_AddFreeMemory+0x2c2>
 801229c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80122a0:	42a9      	cmp	r1, r5
 80122a2:	f080 8106 	bcs.w	80124b2 <_AddFreeMemory+0x2e6>
 80122a6:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 80122aa:	42a9      	cmp	r1, r5
 80122ac:	f080 80ff 	bcs.w	80124ae <_AddFreeMemory+0x2e2>
 80122b0:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80122b4:	42a9      	cmp	r1, r5
 80122b6:	f080 80f8 	bcs.w	80124aa <_AddFreeMemory+0x2de>
 80122ba:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 80122be:	42a9      	cmp	r1, r5
 80122c0:	f080 80fc 	bcs.w	80124bc <_AddFreeMemory+0x2f0>
 80122c4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80122c8:	42a9      	cmp	r1, r5
 80122ca:	f080 80ff 	bcs.w	80124cc <_AddFreeMemory+0x300>
 80122ce:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80122d2:	42a9      	cmp	r1, r5
 80122d4:	f080 80f8 	bcs.w	80124c8 <_AddFreeMemory+0x2fc>
 80122d8:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 80122dc:	42a1      	cmp	r1, r4
 80122de:	f080 80f1 	bcs.w	80124c4 <_AddFreeMemory+0x2f8>
 80122e2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80122e4:	4c7a      	ldr	r4, [pc, #488]	; (80124d0 <_AddFreeMemory+0x304>)
 80122e6:	42a9      	cmp	r1, r5
 80122e8:	f080 80ea 	bcs.w	80124c0 <_AddFreeMemory+0x2f4>
 80122ec:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80122ee:	42a9      	cmp	r1, r5
 80122f0:	f080 8113 	bcs.w	801251a <_AddFreeMemory+0x34e>
 80122f4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80122f6:	42a9      	cmp	r1, r5
 80122f8:	f080 810d 	bcs.w	8012516 <_AddFreeMemory+0x34a>
 80122fc:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80122fe:	42a9      	cmp	r1, r5
 8012300:	f080 8107 	bcs.w	8012512 <_AddFreeMemory+0x346>
 8012304:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8012306:	42a9      	cmp	r1, r5
 8012308:	f080 8101 	bcs.w	801250e <_AddFreeMemory+0x342>
 801230c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801230e:	42a9      	cmp	r1, r5
 8012310:	f080 80fb 	bcs.w	801250a <_AddFreeMemory+0x33e>
 8012314:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8012316:	42a9      	cmp	r1, r5
 8012318:	f080 8104 	bcs.w	8012524 <_AddFreeMemory+0x358>
 801231c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801231e:	42a1      	cmp	r1, r4
 8012320:	f080 8081 	bcs.w	8012426 <_AddFreeMemory+0x25a>
 8012324:	4611      	mov	r1, r2
 8012326:	e766      	b.n	80121f6 <_AddFreeMemory+0x2a>
 8012328:	686a      	ldr	r2, [r5, #4]
 801232a:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 801232e:	4410      	add	r0, r2
 8012330:	42b2      	cmp	r2, r6
 8012332:	f080 80ae 	bcs.w	8012492 <_AddFreeMemory+0x2c6>
 8012336:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 801233a:	42b2      	cmp	r2, r6
 801233c:	f080 80b2 	bcs.w	80124a4 <_AddFreeMemory+0x2d8>
 8012340:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8012344:	42b2      	cmp	r2, r6
 8012346:	f080 80aa 	bcs.w	801249e <_AddFreeMemory+0x2d2>
 801234a:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801234e:	42b2      	cmp	r2, r6
 8012350:	f080 80a2 	bcs.w	8012498 <_AddFreeMemory+0x2cc>
 8012354:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8012358:	42b2      	cmp	r2, r6
 801235a:	f080 80ac 	bcs.w	80124b6 <_AddFreeMemory+0x2ea>
 801235e:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8012362:	42b2      	cmp	r2, r6
 8012364:	f080 80bf 	bcs.w	80124e6 <_AddFreeMemory+0x31a>
 8012368:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 801236c:	42b2      	cmp	r2, r6
 801236e:	f080 80b7 	bcs.w	80124e0 <_AddFreeMemory+0x314>
 8012372:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8012376:	42b2      	cmp	r2, r6
 8012378:	f080 80af 	bcs.w	80124da <_AddFreeMemory+0x30e>
 801237c:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 801237e:	42ba      	cmp	r2, r7
 8012380:	f080 80a8 	bcs.w	80124d4 <_AddFreeMemory+0x308>
 8012384:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8012386:	42ba      	cmp	r2, r7
 8012388:	f080 80b9 	bcs.w	80124fe <_AddFreeMemory+0x332>
 801238c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 801238e:	42ba      	cmp	r2, r7
 8012390:	f080 80b2 	bcs.w	80124f8 <_AddFreeMemory+0x32c>
 8012394:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8012396:	42ba      	cmp	r2, r7
 8012398:	f080 80ab 	bcs.w	80124f2 <_AddFreeMemory+0x326>
 801239c:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801239e:	42ba      	cmp	r2, r7
 80123a0:	f080 80a4 	bcs.w	80124ec <_AddFreeMemory+0x320>
 80123a4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80123a6:	42ba      	cmp	r2, r7
 80123a8:	f080 80ac 	bcs.w	8012504 <_AddFreeMemory+0x338>
 80123ac:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80123ae:	42ba      	cmp	r2, r7
 80123b0:	f080 80b5 	bcs.w	801251e <_AddFreeMemory+0x352>
 80123b4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80123b6:	42b2      	cmp	r2, r6
 80123b8:	f4ff af15 	bcc.w	80121e6 <_AddFreeMemory+0x1a>
 80123bc:	f04f 0e00 	mov.w	lr, #0
 80123c0:	681e      	ldr	r6, [r3, #0]
 80123c2:	68af      	ldr	r7, [r5, #8]
 80123c4:	1ab2      	subs	r2, r6, r2
 80123c6:	68ed      	ldr	r5, [r5, #12]
 80123c8:	601a      	str	r2, [r3, #0]
 80123ca:	b107      	cbz	r7, 80123ce <_AddFreeMemory+0x202>
 80123cc:	607d      	str	r5, [r7, #4]
 80123ce:	2d00      	cmp	r5, #0
 80123d0:	d058      	beq.n	8012484 <_AddFreeMemory+0x2b8>
 80123d2:	602f      	str	r7, [r5, #0]
 80123d4:	e707      	b.n	80121e6 <_AddFreeMemory+0x1a>
 80123d6:	2200      	movs	r2, #0
 80123d8:	3208      	adds	r2, #8
 80123da:	2700      	movs	r7, #0
 80123dc:	180d      	adds	r5, r1, r0
 80123de:	f101 0608 	add.w	r6, r1, #8
 80123e2:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 80123e6:	6864      	ldr	r4, [r4, #4]
 80123e8:	6048      	str	r0, [r1, #4]
 80123ea:	608c      	str	r4, [r1, #8]
 80123ec:	6109      	str	r1, [r1, #16]
 80123ee:	600f      	str	r7, [r1, #0]
 80123f0:	f845 0c04 	str.w	r0, [r5, #-4]
 80123f4:	b104      	cbz	r4, 80123f8 <_AddFreeMemory+0x22c>
 80123f6:	6066      	str	r6, [r4, #4]
 80123f8:	681d      	ldr	r5, [r3, #0]
 80123fa:	2700      	movs	r7, #0
 80123fc:	608c      	str	r4, [r1, #8]
 80123fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012402:	60cf      	str	r7, [r1, #12]
 8012404:	1941      	adds	r1, r0, r5
 8012406:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 801240a:	6056      	str	r6, [r2, #4]
 801240c:	6019      	str	r1, [r3, #0]
 801240e:	4a30      	ldr	r2, [pc, #192]	; (80124d0 <_AddFreeMemory+0x304>)
 8012410:	2c00      	cmp	r4, #0
 8012412:	f47f af3a 	bne.w	801228a <_AddFreeMemory+0xbe>
 8012416:	68d3      	ldr	r3, [r2, #12]
 8012418:	6894      	ldr	r4, [r2, #8]
 801241a:	1a59      	subs	r1, r3, r1
 801241c:	42a1      	cmp	r1, r4
 801241e:	f67f af34 	bls.w	801228a <_AddFreeMemory+0xbe>
 8012422:	6091      	str	r1, [r2, #8]
 8012424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012426:	2600      	movs	r6, #0
 8012428:	681c      	ldr	r4, [r3, #0]
 801242a:	6895      	ldr	r5, [r2, #8]
 801242c:	1a61      	subs	r1, r4, r1
 801242e:	68d4      	ldr	r4, [r2, #12]
 8012430:	6019      	str	r1, [r3, #0]
 8012432:	b105      	cbz	r5, 8012436 <_AddFreeMemory+0x26a>
 8012434:	606c      	str	r4, [r5, #4]
 8012436:	b304      	cbz	r4, 801247a <_AddFreeMemory+0x2ae>
 8012438:	6025      	str	r5, [r4, #0]
 801243a:	4611      	mov	r1, r2
 801243c:	e6db      	b.n	80121f6 <_AddFreeMemory+0x2a>
 801243e:	220f      	movs	r2, #15
 8012440:	e7ca      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012442:	220e      	movs	r2, #14
 8012444:	e7c8      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012446:	220d      	movs	r2, #13
 8012448:	e7c6      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801244a:	220c      	movs	r2, #12
 801244c:	e7c4      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801244e:	220b      	movs	r2, #11
 8012450:	e7c2      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012452:	220a      	movs	r2, #10
 8012454:	e7c0      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012456:	2209      	movs	r2, #9
 8012458:	e7be      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801245a:	2208      	movs	r2, #8
 801245c:	e7bc      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801245e:	2207      	movs	r2, #7
 8012460:	e7ba      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012462:	2206      	movs	r2, #6
 8012464:	e7b8      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012466:	2205      	movs	r2, #5
 8012468:	e7b6      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801246a:	2204      	movs	r2, #4
 801246c:	e7b4      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801246e:	2203      	movs	r2, #3
 8012470:	e7b2      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012472:	2202      	movs	r2, #2
 8012474:	e7b0      	b.n	80123d8 <_AddFreeMemory+0x20c>
 8012476:	2201      	movs	r2, #1
 8012478:	e7ae      	b.n	80123d8 <_AddFreeMemory+0x20c>
 801247a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801247e:	4611      	mov	r1, r2
 8012480:	6475      	str	r5, [r6, #68]	; 0x44
 8012482:	e6b8      	b.n	80121f6 <_AddFreeMemory+0x2a>
 8012484:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 8012488:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 801248c:	e6ab      	b.n	80121e6 <_AddFreeMemory+0x1a>
 801248e:	260f      	movs	r6, #15
 8012490:	e7ca      	b.n	8012428 <_AddFreeMemory+0x25c>
 8012492:	f04f 0e0f 	mov.w	lr, #15
 8012496:	e793      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 8012498:	f04f 0e0c 	mov.w	lr, #12
 801249c:	e790      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 801249e:	f04f 0e0d 	mov.w	lr, #13
 80124a2:	e78d      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124a4:	f04f 0e0e 	mov.w	lr, #14
 80124a8:	e78a      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124aa:	260c      	movs	r6, #12
 80124ac:	e7bc      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124ae:	260d      	movs	r6, #13
 80124b0:	e7ba      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124b2:	260e      	movs	r6, #14
 80124b4:	e7b8      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124b6:	f04f 0e0b 	mov.w	lr, #11
 80124ba:	e781      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124bc:	260b      	movs	r6, #11
 80124be:	e7b3      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124c0:	2607      	movs	r6, #7
 80124c2:	e7b1      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124c4:	2608      	movs	r6, #8
 80124c6:	e7af      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124c8:	2609      	movs	r6, #9
 80124ca:	e7ad      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124cc:	260a      	movs	r6, #10
 80124ce:	e7ab      	b.n	8012428 <_AddFreeMemory+0x25c>
 80124d0:	200466c0 	.word	0x200466c0
 80124d4:	f04f 0e07 	mov.w	lr, #7
 80124d8:	e772      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124da:	f04f 0e08 	mov.w	lr, #8
 80124de:	e76f      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124e0:	f04f 0e09 	mov.w	lr, #9
 80124e4:	e76c      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124e6:	f04f 0e0a 	mov.w	lr, #10
 80124ea:	e769      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124ec:	f04f 0e03 	mov.w	lr, #3
 80124f0:	e766      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124f2:	f04f 0e04 	mov.w	lr, #4
 80124f6:	e763      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124f8:	f04f 0e05 	mov.w	lr, #5
 80124fc:	e760      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 80124fe:	f04f 0e06 	mov.w	lr, #6
 8012502:	e75d      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 8012504:	f04f 0e02 	mov.w	lr, #2
 8012508:	e75a      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 801250a:	2602      	movs	r6, #2
 801250c:	e78c      	b.n	8012428 <_AddFreeMemory+0x25c>
 801250e:	2603      	movs	r6, #3
 8012510:	e78a      	b.n	8012428 <_AddFreeMemory+0x25c>
 8012512:	2604      	movs	r6, #4
 8012514:	e788      	b.n	8012428 <_AddFreeMemory+0x25c>
 8012516:	2605      	movs	r6, #5
 8012518:	e786      	b.n	8012428 <_AddFreeMemory+0x25c>
 801251a:	2606      	movs	r6, #6
 801251c:	e784      	b.n	8012428 <_AddFreeMemory+0x25c>
 801251e:	f04f 0e01 	mov.w	lr, #1
 8012522:	e74d      	b.n	80123c0 <_AddFreeMemory+0x1f4>
 8012524:	2601      	movs	r6, #1
 8012526:	e77f      	b.n	8012428 <_AddFreeMemory+0x25c>

08012528 <_RemoveHoles>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80126d4 <_RemoveHoles+0x1ac>
 8012530:	b083      	sub	sp, #12
 8012532:	4682      	mov	sl, r0
 8012534:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8012538:	46c1      	mov	r9, r8
 801253a:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801253e:	3f01      	subs	r7, #1
 8012540:	685e      	ldr	r6, [r3, #4]
 8012542:	441f      	add	r7, r3
 8012544:	681d      	ldr	r5, [r3, #0]
 8012546:	b135      	cbz	r5, 8012556 <_RemoveHoles+0x2e>
 8012548:	4433      	add	r3, r6
 801254a:	429f      	cmp	r7, r3
 801254c:	d906      	bls.n	801255c <_RemoveHoles+0x34>
 801254e:	e893 0060 	ldmia.w	r3, {r5, r6}
 8012552:	2d00      	cmp	r5, #0
 8012554:	d1f8      	bne.n	8012548 <_RemoveHoles+0x20>
 8012556:	1999      	adds	r1, r3, r6
 8012558:	428f      	cmp	r7, r1
 801255a:	d803      	bhi.n	8012564 <_RemoveHoles+0x3c>
 801255c:	2001      	movs	r0, #1
 801255e:	b003      	add	sp, #12
 8012560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012564:	599d      	ldr	r5, [r3, r6]
 8012566:	684c      	ldr	r4, [r1, #4]
 8012568:	b155      	cbz	r5, 8012580 <_RemoveHoles+0x58>
 801256a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801256e:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 8012572:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012576:	2801      	cmp	r0, #1
 8012578:	d005      	beq.n	8012586 <_RemoveHoles+0x5e>
 801257a:	4626      	mov	r6, r4
 801257c:	460b      	mov	r3, r1
 801257e:	e7e2      	b.n	8012546 <_RemoveHoles+0x1e>
 8012580:	4626      	mov	r6, r4
 8012582:	460b      	mov	r3, r1
 8012584:	e7e7      	b.n	8012556 <_RemoveHoles+0x2e>
 8012586:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 801258a:	f8d9 b02c 	ldr.w	fp, [r9, #44]	; 0x2c
 801258e:	42b0      	cmp	r0, r6
 8012590:	d973      	bls.n	801267a <_RemoveHoles+0x152>
 8012592:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 8012596:	42b0      	cmp	r0, r6
 8012598:	d975      	bls.n	8012686 <_RemoveHoles+0x15e>
 801259a:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 801259e:	42b0      	cmp	r0, r6
 80125a0:	d974      	bls.n	801268c <_RemoveHoles+0x164>
 80125a2:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80125a6:	42b0      	cmp	r0, r6
 80125a8:	d96a      	bls.n	8012680 <_RemoveHoles+0x158>
 80125aa:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 80125ae:	42b0      	cmp	r0, r6
 80125b0:	d978      	bls.n	80126a4 <_RemoveHoles+0x17c>
 80125b2:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 80125b6:	4286      	cmp	r6, r0
 80125b8:	d26e      	bcs.n	8012698 <_RemoveHoles+0x170>
 80125ba:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 80125be:	4286      	cmp	r6, r0
 80125c0:	d26d      	bcs.n	801269e <_RemoveHoles+0x176>
 80125c2:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 80125c6:	4286      	cmp	r6, r0
 80125c8:	d263      	bcs.n	8012692 <_RemoveHoles+0x16a>
 80125ca:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 80125ce:	4286      	cmp	r6, r0
 80125d0:	d274      	bcs.n	80126bc <_RemoveHoles+0x194>
 80125d2:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 80125d6:	4286      	cmp	r6, r0
 80125d8:	d273      	bcs.n	80126c2 <_RemoveHoles+0x19a>
 80125da:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 80125de:	4286      	cmp	r6, r0
 80125e0:	d266      	bcs.n	80126b0 <_RemoveHoles+0x188>
 80125e2:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 80125e6:	4286      	cmp	r6, r0
 80125e8:	d265      	bcs.n	80126b6 <_RemoveHoles+0x18e>
 80125ea:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80125ee:	4286      	cmp	r6, r0
 80125f0:	d25b      	bcs.n	80126aa <_RemoveHoles+0x182>
 80125f2:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 80125f6:	4286      	cmp	r6, r0
 80125f8:	d269      	bcs.n	80126ce <_RemoveHoles+0x1a6>
 80125fa:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 80125fe:	4286      	cmp	r6, r0
 8012600:	d21f      	bcs.n	8012642 <_RemoveHoles+0x11a>
 8012602:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8012606:	4286      	cmp	r6, r0
 8012608:	d25e      	bcs.n	80126c8 <_RemoveHoles+0x1a0>
 801260a:	6053      	str	r3, [r2, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	4622      	mov	r2, r4
 8012610:	f012 fed0 	bl	80253b4 <memmove>
 8012614:	455d      	cmp	r5, fp
 8012616:	4603      	mov	r3, r0
 8012618:	d00b      	beq.n	8012632 <_RemoveHoles+0x10a>
 801261a:	441c      	add	r4, r3
 801261c:	4630      	mov	r0, r6
 801261e:	4621      	mov	r1, r4
 8012620:	f7ff fdd4 	bl	80121cc <_AddFreeMemory>
 8012624:	f1ba 0f00 	cmp.w	sl, #0
 8012628:	d001      	beq.n	801262e <_RemoveHoles+0x106>
 801262a:	4550      	cmp	r0, sl
 801262c:	d207      	bcs.n	801263e <_RemoveHoles+0x116>
 801262e:	4623      	mov	r3, r4
 8012630:	e78b      	b.n	801254a <_RemoveHoles+0x22>
 8012632:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8012636:	1b92      	subs	r2, r2, r6
 8012638:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 801263c:	e7ed      	b.n	801261a <_RemoveHoles+0xf2>
 801263e:	2000      	movs	r0, #0
 8012640:	e78d      	b.n	801255e <_RemoveHoles+0x36>
 8012642:	2001      	movs	r0, #1
 8012644:	9001      	str	r0, [sp, #4]
 8012646:	f8d8 0000 	ldr.w	r0, [r8]
 801264a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801264e:	1b80      	subs	r0, r0, r6
 8012650:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8012654:	f8c8 0000 	str.w	r0, [r8]
 8012658:	f1be 0f00 	cmp.w	lr, #0
 801265c:	d001      	beq.n	8012662 <_RemoveHoles+0x13a>
 801265e:	f8ce c004 	str.w	ip, [lr, #4]
 8012662:	f1bc 0f00 	cmp.w	ip, #0
 8012666:	d002      	beq.n	801266e <_RemoveHoles+0x146>
 8012668:	f8cc e000 	str.w	lr, [ip]
 801266c:	e7cd      	b.n	801260a <_RemoveHoles+0xe2>
 801266e:	9801      	ldr	r0, [sp, #4]
 8012670:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 8012674:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 8012678:	e7c7      	b.n	801260a <_RemoveHoles+0xe2>
 801267a:	200f      	movs	r0, #15
 801267c:	9001      	str	r0, [sp, #4]
 801267e:	e7e2      	b.n	8012646 <_RemoveHoles+0x11e>
 8012680:	200c      	movs	r0, #12
 8012682:	9001      	str	r0, [sp, #4]
 8012684:	e7df      	b.n	8012646 <_RemoveHoles+0x11e>
 8012686:	200e      	movs	r0, #14
 8012688:	9001      	str	r0, [sp, #4]
 801268a:	e7dc      	b.n	8012646 <_RemoveHoles+0x11e>
 801268c:	200d      	movs	r0, #13
 801268e:	9001      	str	r0, [sp, #4]
 8012690:	e7d9      	b.n	8012646 <_RemoveHoles+0x11e>
 8012692:	2008      	movs	r0, #8
 8012694:	9001      	str	r0, [sp, #4]
 8012696:	e7d6      	b.n	8012646 <_RemoveHoles+0x11e>
 8012698:	200a      	movs	r0, #10
 801269a:	9001      	str	r0, [sp, #4]
 801269c:	e7d3      	b.n	8012646 <_RemoveHoles+0x11e>
 801269e:	2009      	movs	r0, #9
 80126a0:	9001      	str	r0, [sp, #4]
 80126a2:	e7d0      	b.n	8012646 <_RemoveHoles+0x11e>
 80126a4:	200b      	movs	r0, #11
 80126a6:	9001      	str	r0, [sp, #4]
 80126a8:	e7cd      	b.n	8012646 <_RemoveHoles+0x11e>
 80126aa:	2003      	movs	r0, #3
 80126ac:	9001      	str	r0, [sp, #4]
 80126ae:	e7ca      	b.n	8012646 <_RemoveHoles+0x11e>
 80126b0:	2005      	movs	r0, #5
 80126b2:	9001      	str	r0, [sp, #4]
 80126b4:	e7c7      	b.n	8012646 <_RemoveHoles+0x11e>
 80126b6:	2004      	movs	r0, #4
 80126b8:	9001      	str	r0, [sp, #4]
 80126ba:	e7c4      	b.n	8012646 <_RemoveHoles+0x11e>
 80126bc:	2007      	movs	r0, #7
 80126be:	9001      	str	r0, [sp, #4]
 80126c0:	e7c1      	b.n	8012646 <_RemoveHoles+0x11e>
 80126c2:	2006      	movs	r0, #6
 80126c4:	9001      	str	r0, [sp, #4]
 80126c6:	e7be      	b.n	8012646 <_RemoveHoles+0x11e>
 80126c8:	2000      	movs	r0, #0
 80126ca:	9001      	str	r0, [sp, #4]
 80126cc:	e7bb      	b.n	8012646 <_RemoveHoles+0x11e>
 80126ce:	2002      	movs	r0, #2
 80126d0:	9001      	str	r0, [sp, #4]
 80126d2:	e7b8      	b.n	8012646 <_RemoveHoles+0x11e>
 80126d4:	200466c0 	.word	0x200466c0

080126d8 <_EnlargeBlocks>:
 80126d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126dc:	4d33      	ldr	r5, [pc, #204]	; (80127ac <_EnlargeBlocks+0xd4>)
 80126de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80126e0:	b973      	cbnz	r3, 8012700 <_EnlargeBlocks+0x28>
 80126e2:	4b33      	ldr	r3, [pc, #204]	; (80127b0 <_EnlargeBlocks+0xd8>)
 80126e4:	689c      	ldr	r4, [r3, #8]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	3408      	adds	r4, #8
 80126ea:	fbb3 f4f4 	udiv	r4, r3, r4
 80126ee:	3402      	adds	r4, #2
 80126f0:	00e0      	lsls	r0, r4, #3
 80126f2:	f000 f861 	bl	80127b8 <_Alloc>
 80126f6:	4680      	mov	r8, r0
 80126f8:	b960      	cbnz	r0, 8012714 <_EnlargeBlocks+0x3c>
 80126fa:	2001      	movs	r0, #1
 80126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012700:	692b      	ldr	r3, [r5, #16]
 8012702:	1d1c      	adds	r4, r3, #4
 8012704:	eb04 04d3 	add.w	r4, r4, r3, lsr #3
 8012708:	00e0      	lsls	r0, r4, #3
 801270a:	f000 f855 	bl	80127b8 <_Alloc>
 801270e:	4680      	mov	r8, r0
 8012710:	2800      	cmp	r0, #0
 8012712:	d0f2      	beq.n	80126fa <_EnlargeBlocks+0x22>
 8012714:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8012716:	692a      	ldr	r2, [r5, #16]
 8012718:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801271c:	4b25      	ldr	r3, [pc, #148]	; (80127b4 <_EnlargeBlocks+0xdc>)
 801271e:	00d2      	lsls	r2, r2, #3
 8012720:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8012722:	6846      	ldr	r6, [r0, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	3608      	adds	r6, #8
 8012728:	4630      	mov	r0, r6
 801272a:	4798      	blx	r3
 801272c:	6928      	ldr	r0, [r5, #16]
 801272e:	1e61      	subs	r1, r4, #1
 8012730:	636e      	str	r6, [r5, #52]	; 0x34
 8012732:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8012736:	4288      	cmp	r0, r1
 8012738:	d236      	bcs.n	80127a8 <_EnlargeBlocks+0xd0>
 801273a:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 801273e:	4603      	mov	r3, r0
 8012740:	3301      	adds	r3, #1
 8012742:	3208      	adds	r2, #8
 8012744:	428b      	cmp	r3, r1
 8012746:	f842 3c04 	str.w	r3, [r2, #-4]
 801274a:	d1f9      	bne.n	8012740 <_EnlargeBlocks+0x68>
 801274c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8012750:	2600      	movs	r6, #0
 8012752:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80127ac <_EnlargeBlocks+0xd4>
 8012756:	604e      	str	r6, [r1, #4]
 8012758:	686b      	ldr	r3, [r5, #4]
 801275a:	6268      	str	r0, [r5, #36]	; 0x24
 801275c:	1a18      	subs	r0, r3, r0
 801275e:	612c      	str	r4, [r5, #16]
 8012760:	4404      	add	r4, r0
 8012762:	606c      	str	r4, [r5, #4]
 8012764:	b1ef      	cbz	r7, 80127a2 <_EnlargeBlocks+0xca>
 8012766:	f005 ff1d 	bl	80185a4 <GUI_Lock>
 801276a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 801276e:	00fc      	lsls	r4, r7, #3
 8012770:	4423      	add	r3, r4
 8012772:	6859      	ldr	r1, [r3, #4]
 8012774:	6848      	ldr	r0, [r1, #4]
 8012776:	f7ff fd29 	bl	80121cc <_AddFreeMemory>
 801277a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801277e:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8012782:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8012786:	3301      	adds	r3, #1
 8012788:	4414      	add	r4, r2
 801278a:	f8c8 3004 	str.w	r3, [r8, #4]
 801278e:	6061      	str	r1, [r4, #4]
 8012790:	f802 6037 	strb.w	r6, [r2, r7, lsl #3]
 8012794:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 8012798:	f005 fefa 	bl	8018590 <GUI_Unlock>
 801279c:	4630      	mov	r0, r6
 801279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a2:	4638      	mov	r0, r7
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	4601      	mov	r1, r0
 80127aa:	e7cf      	b.n	801274c <_EnlargeBlocks+0x74>
 80127ac:	200466c0 	.word	0x200466c0
 80127b0:	200001dc 	.word	0x200001dc
 80127b4:	2000004c 	.word	0x2000004c

080127b8 <_Alloc>:
 80127b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127bc:	4cc1      	ldr	r4, [pc, #772]	; (8012ac4 <_Alloc+0x30c>)
 80127be:	4605      	mov	r5, r0
 80127c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f000 80f7 	beq.w	80129b8 <_Alloc+0x200>
 80127ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80127cc:	4285      	cmp	r5, r0
 80127ce:	d302      	bcc.n	80127d6 <_Alloc+0x1e>
 80127d0:	1ce8      	adds	r0, r5, #3
 80127d2:	f020 0003 	bic.w	r0, r0, #3
 80127d6:	f100 060c 	add.w	r6, r0, #12
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	4db9      	ldr	r5, [pc, #740]	; (8012ac4 <_Alloc+0x30c>)
 80127de:	42b3      	cmp	r3, r6
 80127e0:	d202      	bcs.n	80127e8 <_Alloc+0x30>
 80127e2:	2000      	movs	r0, #0
 80127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e8:	686b      	ldr	r3, [r5, #4]
 80127ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80127ec:	4293      	cmp	r3, r2
 80127ee:	f240 8156 	bls.w	8012a9e <_Alloc+0x2e6>
 80127f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80127f4:	3b01      	subs	r3, #1
 80127f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80127f8:	2101      	movs	r1, #1
 80127fa:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80127fe:	6063      	str	r3, [r4, #4]
 8012800:	eb02 0308 	add.w	r3, r2, r8
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	6263      	str	r3, [r4, #36]	; 0x24
 8012808:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 801280c:	2d00      	cmp	r5, #0
 801280e:	d0e8      	beq.n	80127e2 <_Alloc+0x2a>
 8012810:	4fac      	ldr	r7, [pc, #688]	; (8012ac4 <_Alloc+0x30c>)
 8012812:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 8012816:	4576      	cmp	r6, lr
 8012818:	f080 8123 	bcs.w	8012a62 <_Alloc+0x2aa>
 801281c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012820:	429e      	cmp	r6, r3
 8012822:	f080 8120 	bcs.w	8012a66 <_Alloc+0x2ae>
 8012826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801282a:	429e      	cmp	r6, r3
 801282c:	f080 811d 	bcs.w	8012a6a <_Alloc+0x2b2>
 8012830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012834:	429e      	cmp	r6, r3
 8012836:	f080 811c 	bcs.w	8012a72 <_Alloc+0x2ba>
 801283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801283e:	429e      	cmp	r6, r3
 8012840:	f080 8115 	bcs.w	8012a6e <_Alloc+0x2b6>
 8012844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012848:	429e      	cmp	r6, r3
 801284a:	f080 8116 	bcs.w	8012a7a <_Alloc+0x2c2>
 801284e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012852:	429e      	cmp	r6, r3
 8012854:	f080 810f 	bcs.w	8012a76 <_Alloc+0x2be>
 8012858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801285c:	429e      	cmp	r6, r3
 801285e:	f080 8110 	bcs.w	8012a82 <_Alloc+0x2ca>
 8012862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012864:	429e      	cmp	r6, r3
 8012866:	f080 810a 	bcs.w	8012a7e <_Alloc+0x2c6>
 801286a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801286c:	429e      	cmp	r6, r3
 801286e:	f080 810c 	bcs.w	8012a8a <_Alloc+0x2d2>
 8012872:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012874:	429e      	cmp	r6, r3
 8012876:	f080 8106 	bcs.w	8012a86 <_Alloc+0x2ce>
 801287a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801287c:	429e      	cmp	r6, r3
 801287e:	f080 8106 	bcs.w	8012a8e <_Alloc+0x2d6>
 8012882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012884:	429e      	cmp	r6, r3
 8012886:	f080 8104 	bcs.w	8012a92 <_Alloc+0x2da>
 801288a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288c:	429e      	cmp	r6, r3
 801288e:	f080 8104 	bcs.w	8012a9a <_Alloc+0x2e2>
 8012892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012894:	429e      	cmp	r6, r3
 8012896:	f080 80fe 	bcs.w	8012a96 <_Alloc+0x2de>
 801289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801289c:	429e      	cmp	r6, r3
 801289e:	f04f 33ff 	mov.w	r3, #4294967295
 80128a2:	bf28      	it	cs
 80128a4:	2300      	movcs	r3, #0
 80128a6:	2b0f      	cmp	r3, #15
 80128a8:	d811      	bhi.n	80128ce <_Alloc+0x116>
 80128aa:	2100      	movs	r1, #0
 80128ac:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 80128b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80128b2:	b92b      	cbnz	r3, 80128c0 <_Alloc+0x108>
 80128b4:	e007      	b.n	80128c6 <_Alloc+0x10e>
 80128b6:	685a      	ldr	r2, [r3, #4]
 80128b8:	4296      	cmp	r6, r2
 80128ba:	d91c      	bls.n	80128f6 <_Alloc+0x13e>
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	b113      	cbz	r3, 80128c6 <_Alloc+0x10e>
 80128c0:	689b      	ldr	r3, [r3, #8]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d1f7      	bne.n	80128b6 <_Alloc+0xfe>
 80128c6:	3101      	adds	r1, #1
 80128c8:	3008      	adds	r0, #8
 80128ca:	2910      	cmp	r1, #16
 80128cc:	d1f0      	bne.n	80128b0 <_Alloc+0xf8>
 80128ce:	4630      	mov	r0, r6
 80128d0:	f7ff fe2a 	bl	8012528 <_RemoveHoles>
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d09c      	beq.n	8012812 <_Alloc+0x5a>
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	2100      	movs	r1, #0
 80128dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80128de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128e0:	3301      	adds	r3, #1
 80128e2:	4490      	add	r8, r2
 80128e4:	4608      	mov	r0, r1
 80128e6:	6063      	str	r3, [r4, #4]
 80128e8:	f8c8 6004 	str.w	r6, [r8, #4]
 80128ec:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 80128f0:	6265      	str	r5, [r4, #36]	; 0x24
 80128f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80128f8:	1b97      	subs	r7, r2, r6
 80128fa:	f101 000c 	add.w	r0, r1, #12
 80128fe:	4287      	cmp	r7, r0
 8012900:	bf2c      	ite	cs
 8012902:	4630      	movcs	r0, r6
 8012904:	4610      	movcc	r0, r2
 8012906:	4596      	cmp	lr, r2
 8012908:	f240 80f5 	bls.w	8012af6 <_Alloc+0x33e>
 801290c:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8012910:	4e6c      	ldr	r6, [pc, #432]	; (8012ac4 <_Alloc+0x30c>)
 8012912:	42ba      	cmp	r2, r7
 8012914:	f080 80f1 	bcs.w	8012afa <_Alloc+0x342>
 8012918:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 801291c:	42ba      	cmp	r2, r7
 801291e:	f080 80e8 	bcs.w	8012af2 <_Alloc+0x33a>
 8012922:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8012926:	42ba      	cmp	r2, r7
 8012928:	f080 80d0 	bcs.w	8012acc <_Alloc+0x314>
 801292c:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8012930:	42ba      	cmp	r2, r7
 8012932:	f080 80d8 	bcs.w	8012ae6 <_Alloc+0x32e>
 8012936:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 801293a:	4297      	cmp	r7, r2
 801293c:	f240 80df 	bls.w	8012afe <_Alloc+0x346>
 8012940:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8012944:	4297      	cmp	r7, r2
 8012946:	f240 80de 	bls.w	8012b06 <_Alloc+0x34e>
 801294a:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 801294e:	4297      	cmp	r7, r2
 8012950:	f240 80d7 	bls.w	8012b02 <_Alloc+0x34a>
 8012954:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8012956:	4297      	cmp	r7, r2
 8012958:	f240 80e5 	bls.w	8012b26 <_Alloc+0x36e>
 801295c:	6f36      	ldr	r6, [r6, #112]	; 0x70
 801295e:	4296      	cmp	r6, r2
 8012960:	f240 80df 	bls.w	8012b22 <_Alloc+0x36a>
 8012964:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 8012966:	4f57      	ldr	r7, [pc, #348]	; (8012ac4 <_Alloc+0x30c>)
 8012968:	4296      	cmp	r6, r2
 801296a:	f240 80d8 	bls.w	8012b1e <_Alloc+0x366>
 801296e:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8012970:	4296      	cmp	r6, r2
 8012972:	f240 80d2 	bls.w	8012b1a <_Alloc+0x362>
 8012976:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8012978:	42b2      	cmp	r2, r6
 801297a:	f080 80cc 	bcs.w	8012b16 <_Alloc+0x35e>
 801297e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8012980:	4296      	cmp	r6, r2
 8012982:	f240 80c6 	bls.w	8012b12 <_Alloc+0x35a>
 8012986:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8012988:	42b2      	cmp	r2, r6
 801298a:	f080 80c0 	bcs.w	8012b0e <_Alloc+0x356>
 801298e:	4291      	cmp	r1, r2
 8012990:	f240 80bb 	bls.w	8012b0a <_Alloc+0x352>
 8012994:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8012996:	2600      	movs	r6, #0
 8012998:	1819      	adds	r1, r3, r0
 801299a:	4290      	cmp	r0, r2
 801299c:	44a0      	add	r8, r4
 801299e:	f8c8 3004 	str.w	r3, [r8, #4]
 80129a2:	601d      	str	r5, [r3, #0]
 80129a4:	6058      	str	r0, [r3, #4]
 80129a6:	611b      	str	r3, [r3, #16]
 80129a8:	609e      	str	r6, [r3, #8]
 80129aa:	f841 0c04 	str.w	r0, [r1, #-4]
 80129ae:	f2c0 8082 	blt.w	8012ab6 <_Alloc+0x2fe>
 80129b2:	4628      	mov	r0, r5
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	4b43      	ldr	r3, [pc, #268]	; (8012ac8 <_Alloc+0x310>)
 80129ba:	2101      	movs	r1, #1
 80129bc:	689a      	ldr	r2, [r3, #8]
 80129be:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80129c2:	6858      	ldr	r0, [r3, #4]
 80129c4:	b90a      	cbnz	r2, 80129ca <_Alloc+0x212>
 80129c6:	0882      	lsrs	r2, r0, #2
 80129c8:	609a      	str	r2, [r3, #8]
 80129ca:	275a      	movs	r7, #90	; 0x5a
 80129cc:	2210      	movs	r2, #16
 80129ce:	2620      	movs	r6, #32
 80129d0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80129d4:	6227      	str	r7, [r4, #32]
 80129d6:	2780      	movs	r7, #128	; 0x80
 80129d8:	6422      	str	r2, [r4, #64]	; 0x40
 80129da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80129de:	64a6      	str	r6, [r4, #72]	; 0x48
 80129e0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80129e4:	6819      	ldr	r1, [r3, #0]
 80129e6:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 80129ea:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80129ee:	65a7      	str	r7, [r4, #88]	; 0x58
 80129f0:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80129f4:	6622      	str	r2, [r4, #96]	; 0x60
 80129f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80129fa:	66a6      	str	r6, [r4, #104]	; 0x68
 80129fc:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8012a00:	f1a1 0314 	sub.w	r3, r1, #20
 8012a04:	f8c4 e070 	str.w	lr, [r4, #112]	; 0x70
 8012a08:	67a7      	str	r7, [r4, #120]	; 0x78
 8012a0a:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 8012a0e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8012a12:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8012a16:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8012a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012a1e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8012a22:	4403      	add	r3, r0
 8012a24:	f8c4 e090 	str.w	lr, [r4, #144]	; 0x90
 8012a28:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8012a2c:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 8012a30:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8012a34:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8012a38:	2202      	movs	r2, #2
 8012a3a:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8012a3e:	2601      	movs	r6, #1
 8012a40:	63a1      	str	r1, [r4, #56]	; 0x38
 8012a42:	6363      	str	r3, [r4, #52]	; 0x34
 8012a44:	f8c4 e0b0 	str.w	lr, [r4, #176]	; 0xb0
 8012a48:	6122      	str	r2, [r4, #16]
 8012a4a:	60e0      	str	r0, [r4, #12]
 8012a4c:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 8012a50:	605e      	str	r6, [r3, #4]
 8012a52:	6266      	str	r6, [r4, #36]	; 0x24
 8012a54:	6066      	str	r6, [r4, #4]
 8012a56:	f7ff fbb9 	bl	80121cc <_AddFreeMemory>
 8012a5a:	f7ff fe3d 	bl	80126d8 <_EnlargeBlocks>
 8012a5e:	6326      	str	r6, [r4, #48]	; 0x30
 8012a60:	e6b3      	b.n	80127ca <_Alloc+0x12>
 8012a62:	210f      	movs	r1, #15
 8012a64:	e722      	b.n	80128ac <_Alloc+0xf4>
 8012a66:	210e      	movs	r1, #14
 8012a68:	e720      	b.n	80128ac <_Alloc+0xf4>
 8012a6a:	210d      	movs	r1, #13
 8012a6c:	e71e      	b.n	80128ac <_Alloc+0xf4>
 8012a6e:	210b      	movs	r1, #11
 8012a70:	e71c      	b.n	80128ac <_Alloc+0xf4>
 8012a72:	210c      	movs	r1, #12
 8012a74:	e71a      	b.n	80128ac <_Alloc+0xf4>
 8012a76:	2109      	movs	r1, #9
 8012a78:	e718      	b.n	80128ac <_Alloc+0xf4>
 8012a7a:	210a      	movs	r1, #10
 8012a7c:	e716      	b.n	80128ac <_Alloc+0xf4>
 8012a7e:	2107      	movs	r1, #7
 8012a80:	e714      	b.n	80128ac <_Alloc+0xf4>
 8012a82:	2108      	movs	r1, #8
 8012a84:	e712      	b.n	80128ac <_Alloc+0xf4>
 8012a86:	2105      	movs	r1, #5
 8012a88:	e710      	b.n	80128ac <_Alloc+0xf4>
 8012a8a:	2106      	movs	r1, #6
 8012a8c:	e70e      	b.n	80128ac <_Alloc+0xf4>
 8012a8e:	2104      	movs	r1, #4
 8012a90:	e70c      	b.n	80128ac <_Alloc+0xf4>
 8012a92:	2103      	movs	r1, #3
 8012a94:	e70a      	b.n	80128ac <_Alloc+0xf4>
 8012a96:	2101      	movs	r1, #1
 8012a98:	e708      	b.n	80128ac <_Alloc+0xf4>
 8012a9a:	2102      	movs	r1, #2
 8012a9c:	e706      	b.n	80128ac <_Alloc+0xf4>
 8012a9e:	3a01      	subs	r2, #1
 8012aa0:	632a      	str	r2, [r5, #48]	; 0x30
 8012aa2:	f7ff fe19 	bl	80126d8 <_EnlargeBlocks>
 8012aa6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	632b      	str	r3, [r5, #48]	; 0x30
 8012aac:	2800      	cmp	r0, #0
 8012aae:	f47f ae98 	bne.w	80127e2 <_Alloc+0x2a>
 8012ab2:	686b      	ldr	r3, [r5, #4]
 8012ab4:	e69d      	b.n	80127f2 <_Alloc+0x3a>
 8012ab6:	1a10      	subs	r0, r2, r0
 8012ab8:	f7ff fb88 	bl	80121cc <_AddFreeMemory>
 8012abc:	4628      	mov	r0, r5
 8012abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac2:	bf00      	nop
 8012ac4:	200466c0 	.word	0x200466c0
 8012ac8:	200001dc 	.word	0x200001dc
 8012acc:	210c      	movs	r1, #12
 8012ace:	6826      	ldr	r6, [r4, #0]
 8012ad0:	689f      	ldr	r7, [r3, #8]
 8012ad2:	ebc2 0e06 	rsb	lr, r2, r6
 8012ad6:	68de      	ldr	r6, [r3, #12]
 8012ad8:	f8c4 e000 	str.w	lr, [r4]
 8012adc:	b107      	cbz	r7, 8012ae0 <_Alloc+0x328>
 8012ade:	607e      	str	r6, [r7, #4]
 8012ae0:	b11e      	cbz	r6, 8012aea <_Alloc+0x332>
 8012ae2:	6037      	str	r7, [r6, #0]
 8012ae4:	e756      	b.n	8012994 <_Alloc+0x1dc>
 8012ae6:	210b      	movs	r1, #11
 8012ae8:	e7f1      	b.n	8012ace <_Alloc+0x316>
 8012aea:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8012aee:	644f      	str	r7, [r1, #68]	; 0x44
 8012af0:	e750      	b.n	8012994 <_Alloc+0x1dc>
 8012af2:	210d      	movs	r1, #13
 8012af4:	e7eb      	b.n	8012ace <_Alloc+0x316>
 8012af6:	210f      	movs	r1, #15
 8012af8:	e7e9      	b.n	8012ace <_Alloc+0x316>
 8012afa:	210e      	movs	r1, #14
 8012afc:	e7e7      	b.n	8012ace <_Alloc+0x316>
 8012afe:	210a      	movs	r1, #10
 8012b00:	e7e5      	b.n	8012ace <_Alloc+0x316>
 8012b02:	2108      	movs	r1, #8
 8012b04:	e7e3      	b.n	8012ace <_Alloc+0x316>
 8012b06:	2109      	movs	r1, #9
 8012b08:	e7e1      	b.n	8012ace <_Alloc+0x316>
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	e7df      	b.n	8012ace <_Alloc+0x316>
 8012b0e:	2101      	movs	r1, #1
 8012b10:	e7dd      	b.n	8012ace <_Alloc+0x316>
 8012b12:	2102      	movs	r1, #2
 8012b14:	e7db      	b.n	8012ace <_Alloc+0x316>
 8012b16:	2103      	movs	r1, #3
 8012b18:	e7d9      	b.n	8012ace <_Alloc+0x316>
 8012b1a:	2104      	movs	r1, #4
 8012b1c:	e7d7      	b.n	8012ace <_Alloc+0x316>
 8012b1e:	2105      	movs	r1, #5
 8012b20:	e7d5      	b.n	8012ace <_Alloc+0x316>
 8012b22:	2106      	movs	r1, #6
 8012b24:	e7d3      	b.n	8012ace <_Alloc+0x316>
 8012b26:	2107      	movs	r1, #7
 8012b28:	e7d1      	b.n	8012ace <_Alloc+0x316>
 8012b2a:	bf00      	nop

08012b2c <GUI_ALLOC_FreeFixedBlock>:
 8012b2c:	b128      	cbz	r0, 8012b3a <GUI_ALLOC_FreeFixedBlock+0xe>
 8012b2e:	4a03      	ldr	r2, [pc, #12]	; (8012b3c <GUI_ALLOC_FreeFixedBlock+0x10>)
 8012b30:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8012b32:	6003      	str	r3, [r0, #0]
 8012b34:	b103      	cbz	r3, 8012b38 <GUI_ALLOC_FreeFixedBlock+0xc>
 8012b36:	6058      	str	r0, [r3, #4]
 8012b38:	63d0      	str	r0, [r2, #60]	; 0x3c
 8012b3a:	4770      	bx	lr
 8012b3c:	200466c0 	.word	0x200466c0

08012b40 <GUI_ALLOC_GetFixedBlock>:
 8012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b42:	4e8b      	ldr	r6, [pc, #556]	; (8012d70 <GUI_ALLOC_GetFixedBlock+0x230>)
 8012b44:	4604      	mov	r4, r0
 8012b46:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d02f      	beq.n	8012bae <GUI_ALLOC_GetFixedBlock+0x6e>
 8012b4e:	3403      	adds	r4, #3
 8012b50:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8012b52:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8012b54:	f024 0403 	bic.w	r4, r4, #3
 8012b58:	3404      	adds	r4, #4
 8012b5a:	42a5      	cmp	r5, r4
 8012b5c:	bf38      	it	cc
 8012b5e:	4625      	movcc	r5, r4
 8012b60:	b162      	cbz	r2, 8012b7c <GUI_ALLOC_GetFixedBlock+0x3c>
 8012b62:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8012b66:	4614      	mov	r4, r2
 8012b68:	429d      	cmp	r5, r3
 8012b6a:	d104      	bne.n	8012b76 <GUI_ALLOC_GetFixedBlock+0x36>
 8012b6c:	e014      	b.n	8012b98 <GUI_ALLOC_GetFixedBlock+0x58>
 8012b6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012b72:	429d      	cmp	r5, r3
 8012b74:	d010      	beq.n	8012b98 <GUI_ALLOC_GetFixedBlock+0x58>
 8012b76:	6824      	ldr	r4, [r4, #0]
 8012b78:	2c00      	cmp	r4, #0
 8012b7a:	d1f8      	bne.n	8012b6e <GUI_ALLOC_GetFixedBlock+0x2e>
 8012b7c:	68f3      	ldr	r3, [r6, #12]
 8012b7e:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8012b80:	441c      	add	r4, r3
 8012b82:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8012b86:	1a61      	subs	r1, r4, r1
 8012b88:	680b      	ldr	r3, [r1, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d168      	bne.n	8012c60 <GUI_ALLOC_GetFixedBlock+0x120>
 8012b8e:	684b      	ldr	r3, [r1, #4]
 8012b90:	429d      	cmp	r5, r3
 8012b92:	dd6f      	ble.n	8012c74 <GUI_ALLOC_GetFixedBlock+0x134>
 8012b94:	2400      	movs	r4, #0
 8012b96:	e008      	b.n	8012baa <GUI_ALLOC_GetFixedBlock+0x6a>
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	b10b      	cbz	r3, 8012ba0 <GUI_ALLOC_GetFixedBlock+0x60>
 8012b9c:	6861      	ldr	r1, [r4, #4]
 8012b9e:	6059      	str	r1, [r3, #4]
 8012ba0:	6861      	ldr	r1, [r4, #4]
 8012ba2:	b101      	cbz	r1, 8012ba6 <GUI_ALLOC_GetFixedBlock+0x66>
 8012ba4:	600b      	str	r3, [r1, #0]
 8012ba6:	42a2      	cmp	r2, r4
 8012ba8:	d056      	beq.n	8012c58 <GUI_ALLOC_GetFixedBlock+0x118>
 8012baa:	4620      	mov	r0, r4
 8012bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bae:	4b71      	ldr	r3, [pc, #452]	; (8012d74 <GUI_ALLOC_GetFixedBlock+0x234>)
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	689a      	ldr	r2, [r3, #8]
 8012bb4:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 8012bb8:	6858      	ldr	r0, [r3, #4]
 8012bba:	b90a      	cbnz	r2, 8012bc0 <GUI_ALLOC_GetFixedBlock+0x80>
 8012bbc:	0882      	lsrs	r2, r0, #2
 8012bbe:	609a      	str	r2, [r3, #8]
 8012bc0:	275a      	movs	r7, #90	; 0x5a
 8012bc2:	2210      	movs	r2, #16
 8012bc4:	2520      	movs	r5, #32
 8012bc6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8012bca:	6237      	str	r7, [r6, #32]
 8012bcc:	2780      	movs	r7, #128	; 0x80
 8012bce:	6432      	str	r2, [r6, #64]	; 0x40
 8012bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bd4:	64b5      	str	r5, [r6, #72]	; 0x48
 8012bd6:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012bda:	6819      	ldr	r1, [r3, #0]
 8012bdc:	f8c6 e050 	str.w	lr, [r6, #80]	; 0x50
 8012be0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 8012be4:	65b7      	str	r7, [r6, #88]	; 0x58
 8012be6:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8012bea:	6632      	str	r2, [r6, #96]	; 0x60
 8012bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012bf0:	66b5      	str	r5, [r6, #104]	; 0x68
 8012bf2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012bf6:	f1a1 0314 	sub.w	r3, r1, #20
 8012bfa:	f8c6 e070 	str.w	lr, [r6, #112]	; 0x70
 8012bfe:	67b7      	str	r7, [r6, #120]	; 0x78
 8012c00:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
 8012c04:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
 8012c08:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8012c0c:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
 8012c10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012c14:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8012c18:	4403      	add	r3, r0
 8012c1a:	f8c6 e090 	str.w	lr, [r6, #144]	; 0x90
 8012c1e:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8012c22:	f8c6 7098 	str.w	r7, [r6, #152]	; 0x98
 8012c26:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 8012c2a:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
 8012c2e:	2202      	movs	r2, #2
 8012c30:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
 8012c34:	2501      	movs	r5, #1
 8012c36:	63b1      	str	r1, [r6, #56]	; 0x38
 8012c38:	6373      	str	r3, [r6, #52]	; 0x34
 8012c3a:	f8c6 e0b0 	str.w	lr, [r6, #176]	; 0xb0
 8012c3e:	6132      	str	r2, [r6, #16]
 8012c40:	60f0      	str	r0, [r6, #12]
 8012c42:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 8012c46:	605d      	str	r5, [r3, #4]
 8012c48:	6275      	str	r5, [r6, #36]	; 0x24
 8012c4a:	6075      	str	r5, [r6, #4]
 8012c4c:	f7ff fabe 	bl	80121cc <_AddFreeMemory>
 8012c50:	f7ff fd42 	bl	80126d8 <_EnlargeBlocks>
 8012c54:	6335      	str	r5, [r6, #48]	; 0x30
 8012c56:	e77a      	b.n	8012b4e <GUI_ALLOC_GetFixedBlock+0xe>
 8012c58:	6823      	ldr	r3, [r4, #0]
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	63f3      	str	r3, [r6, #60]	; 0x3c
 8012c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c60:	2000      	movs	r0, #0
 8012c62:	f7ff fc61 	bl	8012528 <_RemoveHoles>
 8012c66:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8012c6a:	1a61      	subs	r1, r4, r1
 8012c6c:	680b      	ldr	r3, [r1, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d190      	bne.n	8012b94 <GUI_ALLOC_GetFixedBlock+0x54>
 8012c72:	e78c      	b.n	8012b8e <GUI_ALLOC_GetFixedBlock+0x4e>
 8012c74:	1b58      	subs	r0, r3, r5
 8012c76:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 8012c7a:	4a3d      	ldr	r2, [pc, #244]	; (8012d70 <GUI_ALLOC_GetFixedBlock+0x230>)
 8012c7c:	1d04      	adds	r4, r0, #4
 8012c7e:	42bb      	cmp	r3, r7
 8012c80:	440c      	add	r4, r1
 8012c82:	d272      	bcs.n	8012d6a <GUI_ALLOC_GetFixedBlock+0x22a>
 8012c84:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 8012c88:	42bb      	cmp	r3, r7
 8012c8a:	d26c      	bcs.n	8012d66 <GUI_ALLOC_GetFixedBlock+0x226>
 8012c8c:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 8012c90:	42bb      	cmp	r3, r7
 8012c92:	d266      	bcs.n	8012d62 <GUI_ALLOC_GetFixedBlock+0x222>
 8012c94:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8012c98:	42bb      	cmp	r3, r7
 8012c9a:	d260      	bcs.n	8012d5e <GUI_ALLOC_GetFixedBlock+0x21e>
 8012c9c:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 8012ca0:	429f      	cmp	r7, r3
 8012ca2:	d95a      	bls.n	8012d5a <GUI_ALLOC_GetFixedBlock+0x21a>
 8012ca4:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 8012ca8:	42bb      	cmp	r3, r7
 8012caa:	d254      	bcs.n	8012d56 <GUI_ALLOC_GetFixedBlock+0x216>
 8012cac:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8012cb0:	42bb      	cmp	r3, r7
 8012cb2:	d24e      	bcs.n	8012d52 <GUI_ALLOC_GetFixedBlock+0x212>
 8012cb4:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 8012cb8:	42bb      	cmp	r3, r7
 8012cba:	d248      	bcs.n	8012d4e <GUI_ALLOC_GetFixedBlock+0x20e>
 8012cbc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d243      	bcs.n	8012d4a <GUI_ALLOC_GetFixedBlock+0x20a>
 8012cc2:	6f37      	ldr	r7, [r6, #112]	; 0x70
 8012cc4:	4a2a      	ldr	r2, [pc, #168]	; (8012d70 <GUI_ALLOC_GetFixedBlock+0x230>)
 8012cc6:	42bb      	cmp	r3, r7
 8012cc8:	d23d      	bcs.n	8012d46 <GUI_ALLOC_GetFixedBlock+0x206>
 8012cca:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8012ccc:	42bb      	cmp	r3, r7
 8012cce:	d238      	bcs.n	8012d42 <GUI_ALLOC_GetFixedBlock+0x202>
 8012cd0:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8012cd2:	42bb      	cmp	r3, r7
 8012cd4:	d233      	bcs.n	8012d3e <GUI_ALLOC_GetFixedBlock+0x1fe>
 8012cd6:	6d97      	ldr	r7, [r2, #88]	; 0x58
 8012cd8:	42bb      	cmp	r3, r7
 8012cda:	d22e      	bcs.n	8012d3a <GUI_ALLOC_GetFixedBlock+0x1fa>
 8012cdc:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8012cde:	42bb      	cmp	r3, r7
 8012ce0:	d229      	bcs.n	8012d36 <GUI_ALLOC_GetFixedBlock+0x1f6>
 8012ce2:	6c97      	ldr	r7, [r2, #72]	; 0x48
 8012ce4:	42bb      	cmp	r3, r7
 8012ce6:	d224      	bcs.n	8012d32 <GUI_ALLOC_GetFixedBlock+0x1f2>
 8012ce8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d20c      	bcs.n	8012d08 <GUI_ALLOC_GetFixedBlock+0x1c8>
 8012cee:	68f2      	ldr	r2, [r6, #12]
 8012cf0:	6973      	ldr	r3, [r6, #20]
 8012cf2:	1b52      	subs	r2, r2, r5
 8012cf4:	442b      	add	r3, r5
 8012cf6:	60f2      	str	r2, [r6, #12]
 8012cf8:	6173      	str	r3, [r6, #20]
 8012cfa:	b910      	cbnz	r0, 8012d02 <GUI_ALLOC_GetFixedBlock+0x1c2>
 8012cfc:	f844 5c04 	str.w	r5, [r4, #-4]
 8012d00:	e753      	b.n	8012baa <GUI_ALLOC_GetFixedBlock+0x6a>
 8012d02:	f7ff fa63 	bl	80121cc <_AddFreeMemory>
 8012d06:	e7f9      	b.n	8012cfc <GUI_ALLOC_GetFixedBlock+0x1bc>
 8012d08:	2200      	movs	r2, #0
 8012d0a:	6837      	ldr	r7, [r6, #0]
 8012d0c:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8012d10:	1aff      	subs	r7, r7, r3
 8012d12:	68cb      	ldr	r3, [r1, #12]
 8012d14:	6037      	str	r7, [r6, #0]
 8012d16:	f1be 0f00 	cmp.w	lr, #0
 8012d1a:	d001      	beq.n	8012d20 <GUI_ALLOC_GetFixedBlock+0x1e0>
 8012d1c:	f8ce 3004 	str.w	r3, [lr, #4]
 8012d20:	b113      	cbz	r3, 8012d28 <GUI_ALLOC_GetFixedBlock+0x1e8>
 8012d22:	f8c3 e000 	str.w	lr, [r3]
 8012d26:	e7e2      	b.n	8012cee <GUI_ALLOC_GetFixedBlock+0x1ae>
 8012d28:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012d2c:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 8012d30:	e7dd      	b.n	8012cee <GUI_ALLOC_GetFixedBlock+0x1ae>
 8012d32:	2201      	movs	r2, #1
 8012d34:	e7e9      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d36:	2202      	movs	r2, #2
 8012d38:	e7e7      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d3a:	2203      	movs	r2, #3
 8012d3c:	e7e5      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d3e:	2204      	movs	r2, #4
 8012d40:	e7e3      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d42:	2205      	movs	r2, #5
 8012d44:	e7e1      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d46:	2206      	movs	r2, #6
 8012d48:	e7df      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d4a:	2207      	movs	r2, #7
 8012d4c:	e7dd      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d4e:	2208      	movs	r2, #8
 8012d50:	e7db      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d52:	2209      	movs	r2, #9
 8012d54:	e7d9      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d56:	220a      	movs	r2, #10
 8012d58:	e7d7      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d5a:	220b      	movs	r2, #11
 8012d5c:	e7d5      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d5e:	220c      	movs	r2, #12
 8012d60:	e7d3      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d62:	220d      	movs	r2, #13
 8012d64:	e7d1      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d66:	220e      	movs	r2, #14
 8012d68:	e7cf      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d6a:	220f      	movs	r2, #15
 8012d6c:	e7cd      	b.n	8012d0a <GUI_ALLOC_GetFixedBlock+0x1ca>
 8012d6e:	bf00      	nop
 8012d70:	200466c0 	.word	0x200466c0
 8012d74:	200001dc 	.word	0x200001dc

08012d78 <GUI_ALLOC_AllocNoInit>:
 8012d78:	b900      	cbnz	r0, 8012d7c <GUI_ALLOC_AllocNoInit+0x4>
 8012d7a:	4770      	bx	lr
 8012d7c:	b510      	push	{r4, lr}
 8012d7e:	4604      	mov	r4, r0
 8012d80:	f005 fc10 	bl	80185a4 <GUI_Lock>
 8012d84:	4620      	mov	r0, r4
 8012d86:	f7ff fd17 	bl	80127b8 <_Alloc>
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	f005 fc00 	bl	8018590 <GUI_Unlock>
 8012d90:	4620      	mov	r0, r4
 8012d92:	bd10      	pop	{r4, pc}

08012d94 <GUI_ALLOC_h2p>:
 8012d94:	4b03      	ldr	r3, [pc, #12]	; (8012da4 <GUI_ALLOC_h2p+0x10>)
 8012d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d98:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012d9c:	6840      	ldr	r0, [r0, #4]
 8012d9e:	3008      	adds	r0, #8
 8012da0:	4770      	bx	lr
 8012da2:	bf00      	nop
 8012da4:	200466c0 	.word	0x200466c0

08012da8 <GUI_ALLOC_LockH>:
 8012da8:	4a08      	ldr	r2, [pc, #32]	; (8012dcc <GUI_ALLOC_LockH+0x24>)
 8012daa:	69d1      	ldr	r1, [r2, #28]
 8012dac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012dae:	3101      	adds	r1, #1
 8012db0:	b410      	push	{r4}
 8012db2:	61d1      	str	r1, [r2, #28]
 8012db4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8012db8:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8012dbc:	3201      	adds	r2, #1
 8012dbe:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8012dc2:	6860      	ldr	r0, [r4, #4]
 8012dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012dc8:	3008      	adds	r0, #8
 8012dca:	4770      	bx	lr
 8012dcc:	200466c0 	.word	0x200466c0

08012dd0 <GUI_ALLOC_UnlockH>:
 8012dd0:	6803      	ldr	r3, [r0, #0]
 8012dd2:	4a0b      	ldr	r2, [pc, #44]	; (8012e00 <GUI_ALLOC_UnlockH+0x30>)
 8012dd4:	b430      	push	{r4, r5}
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012ddc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8012dde:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 8012de2:	2b01      	cmp	r3, #1
 8012de4:	d903      	bls.n	8012dee <GUI_ALLOC_UnlockH+0x1e>
 8012de6:	69d1      	ldr	r1, [r2, #28]
 8012de8:	b109      	cbz	r1, 8012dee <GUI_ALLOC_UnlockH+0x1e>
 8012dea:	3901      	subs	r1, #1
 8012dec:	61d1      	str	r1, [r2, #28]
 8012dee:	2200      	movs	r2, #0
 8012df0:	3b01      	subs	r3, #1
 8012df2:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 8012df6:	4610      	mov	r0, r2
 8012df8:	6022      	str	r2, [r4, #0]
 8012dfa:	bc30      	pop	{r4, r5}
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	200466c0 	.word	0x200466c0

08012e04 <GUI_ALLOC_GetMaxSize>:
 8012e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e06:	4c4a      	ldr	r4, [pc, #296]	; (8012f30 <GUI_ALLOC_GetMaxSize+0x12c>)
 8012e08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d03d      	beq.n	8012e8c <GUI_ALLOC_GetMaxSize+0x88>
 8012e10:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8012e14:	4a46      	ldr	r2, [pc, #280]	; (8012f30 <GUI_ALLOC_GetMaxSize+0x12c>)
 8012e16:	bb3b      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e18:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8012e1c:	bb23      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e1e:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8012e22:	bb0b      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e24:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8012e28:	b9f3      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e2a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8012e2e:	b9db      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e30:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8012e34:	b9c3      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8012e3a:	b9ab      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e3c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8012e40:	b993      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e42:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8012e44:	b983      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e46:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8012e48:	b973      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012e4c:	b963      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012e50:	b953      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e52:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8012e54:	b943      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e56:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8012e58:	b933      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012e5c:	b923      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e5e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8012e60:	b913      	cbnz	r3, 8012e68 <GUI_ALLOC_GetMaxSize+0x64>
 8012e62:	f06f 000b 	mvn.w	r0, #11
 8012e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e68:	689b      	ldr	r3, [r3, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d0f9      	beq.n	8012e62 <GUI_ALLOC_GetMaxSize+0x5e>
 8012e6e:	2200      	movs	r2, #0
 8012e70:	e001      	b.n	8012e76 <GUI_ALLOC_GetMaxSize+0x72>
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	b143      	cbz	r3, 8012e88 <GUI_ALLOC_GetMaxSize+0x84>
 8012e76:	6859      	ldr	r1, [r3, #4]
 8012e78:	4610      	mov	r0, r2
 8012e7a:	4291      	cmp	r1, r2
 8012e7c:	d901      	bls.n	8012e82 <GUI_ALLOC_GetMaxSize+0x7e>
 8012e7e:	460a      	mov	r2, r1
 8012e80:	4608      	mov	r0, r1
 8012e82:	689b      	ldr	r3, [r3, #8]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d1f4      	bne.n	8012e72 <GUI_ALLOC_GetMaxSize+0x6e>
 8012e88:	380c      	subs	r0, #12
 8012e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e8c:	4b29      	ldr	r3, [pc, #164]	; (8012f34 <GUI_ALLOC_GetMaxSize+0x130>)
 8012e8e:	2101      	movs	r1, #1
 8012e90:	689a      	ldr	r2, [r3, #8]
 8012e92:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8012e96:	6858      	ldr	r0, [r3, #4]
 8012e98:	b90a      	cbnz	r2, 8012e9e <GUI_ALLOC_GetMaxSize+0x9a>
 8012e9a:	0882      	lsrs	r2, r0, #2
 8012e9c:	609a      	str	r2, [r3, #8]
 8012e9e:	265a      	movs	r6, #90	; 0x5a
 8012ea0:	2210      	movs	r2, #16
 8012ea2:	2520      	movs	r5, #32
 8012ea4:	2740      	movs	r7, #64	; 0x40
 8012ea6:	6226      	str	r6, [r4, #32]
 8012ea8:	2680      	movs	r6, #128	; 0x80
 8012eaa:	6422      	str	r2, [r4, #64]	; 0x40
 8012eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012eb0:	64a5      	str	r5, [r4, #72]	; 0x48
 8012eb2:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012eb6:	6819      	ldr	r1, [r3, #0]
 8012eb8:	6527      	str	r7, [r4, #80]	; 0x50
 8012eba:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8012ebe:	65a6      	str	r6, [r4, #88]	; 0x58
 8012ec0:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8012ec4:	6622      	str	r2, [r4, #96]	; 0x60
 8012ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012eca:	66a5      	str	r5, [r4, #104]	; 0x68
 8012ecc:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8012ed0:	f1a1 0314 	sub.w	r3, r1, #20
 8012ed4:	6727      	str	r7, [r4, #112]	; 0x70
 8012ed6:	67a6      	str	r6, [r4, #120]	; 0x78
 8012ed8:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8012edc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8012ee0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8012ee4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8012ee8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012eec:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8012ef0:	4403      	add	r3, r0
 8012ef2:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8012ef6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8012efa:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 8012efe:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 8012f02:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8012f06:	2202      	movs	r2, #2
 8012f08:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8012f0c:	2501      	movs	r5, #1
 8012f0e:	63a1      	str	r1, [r4, #56]	; 0x38
 8012f10:	6363      	str	r3, [r4, #52]	; 0x34
 8012f12:	6122      	str	r2, [r4, #16]
 8012f14:	60e0      	str	r0, [r4, #12]
 8012f16:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8012f1a:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8012f1e:	605d      	str	r5, [r3, #4]
 8012f20:	6265      	str	r5, [r4, #36]	; 0x24
 8012f22:	6065      	str	r5, [r4, #4]
 8012f24:	f7ff f952 	bl	80121cc <_AddFreeMemory>
 8012f28:	f7ff fbd6 	bl	80126d8 <_EnlargeBlocks>
 8012f2c:	6325      	str	r5, [r4, #48]	; 0x30
 8012f2e:	e76f      	b.n	8012e10 <GUI_ALLOC_GetMaxSize+0xc>
 8012f30:	200466c0 	.word	0x200466c0
 8012f34:	200001dc 	.word	0x200001dc

08012f38 <GUI_ALLOC_RequestSize>:
 8012f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3a:	4c58      	ldr	r4, [pc, #352]	; (801309c <GUI_ALLOC_RequestSize+0x164>)
 8012f3c:	f005 fb32 	bl	80185a4 <GUI_Lock>
 8012f40:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d057      	beq.n	8012ff8 <GUI_ALLOC_RequestSize+0xc0>
 8012f48:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8012f4c:	4a53      	ldr	r2, [pc, #332]	; (801309c <GUI_ALLOC_RequestSize+0x164>)
 8012f4e:	bb9b      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f50:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8012f54:	bb83      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f56:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8012f5a:	bb6b      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f5c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8012f60:	bb53      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f62:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8012f66:	bb3b      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f68:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8012f6c:	bb23      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8012f72:	bb0b      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f74:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8012f78:	b9f3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f7a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8012f7c:	b9e3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f7e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8012f80:	b9d3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f84:	b9c3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f86:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012f88:	b9b3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f8a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8012f8c:	b9a3      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f8e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8012f90:	b993      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012f94:	b983      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f96:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8012f98:	b973      	cbnz	r3, 8012fb8 <GUI_ALLOC_RequestSize+0x80>
 8012f9a:	f06f 030b 	mvn.w	r3, #11
 8012f9e:	4940      	ldr	r1, [pc, #256]	; (80130a0 <GUI_ALLOC_RequestSize+0x168>)
 8012fa0:	17da      	asrs	r2, r3, #31
 8012fa2:	fb81 1303 	smull	r1, r3, r1, r3
 8012fa6:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 8012faa:	6a24      	ldr	r4, [r4, #32]
 8012fac:	fb04 f403 	mul.w	r4, r4, r3
 8012fb0:	f005 faee 	bl	8018590 <GUI_Unlock>
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0f5      	beq.n	8012faa <GUI_ALLOC_RequestSize+0x72>
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	e001      	b.n	8012fc6 <GUI_ALLOC_RequestSize+0x8e>
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	b143      	cbz	r3, 8012fd8 <GUI_ALLOC_RequestSize+0xa0>
 8012fc6:	6859      	ldr	r1, [r3, #4]
 8012fc8:	4610      	mov	r0, r2
 8012fca:	4291      	cmp	r1, r2
 8012fcc:	d901      	bls.n	8012fd2 <GUI_ALLOC_RequestSize+0x9a>
 8012fce:	460a      	mov	r2, r1
 8012fd0:	4608      	mov	r0, r1
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1f4      	bne.n	8012fc2 <GUI_ALLOC_RequestSize+0x8a>
 8012fd8:	380c      	subs	r0, #12
 8012fda:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8012fde:	4603      	mov	r3, r0
 8012fe0:	d8dd      	bhi.n	8012f9e <GUI_ALLOC_RequestSize+0x66>
 8012fe2:	6a22      	ldr	r2, [r4, #32]
 8012fe4:	4b2e      	ldr	r3, [pc, #184]	; (80130a0 <GUI_ALLOC_RequestSize+0x168>)
 8012fe6:	fb02 f000 	mul.w	r0, r2, r0
 8012fea:	fba3 2300 	umull	r2, r3, r3, r0
 8012fee:	095c      	lsrs	r4, r3, #5
 8012ff0:	f005 face 	bl	8018590 <GUI_Unlock>
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ff8:	4b2a      	ldr	r3, [pc, #168]	; (80130a4 <GUI_ALLOC_RequestSize+0x16c>)
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	689a      	ldr	r2, [r3, #8]
 8012ffe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8013002:	6858      	ldr	r0, [r3, #4]
 8013004:	b90a      	cbnz	r2, 801300a <GUI_ALLOC_RequestSize+0xd2>
 8013006:	0882      	lsrs	r2, r0, #2
 8013008:	609a      	str	r2, [r3, #8]
 801300a:	265a      	movs	r6, #90	; 0x5a
 801300c:	2210      	movs	r2, #16
 801300e:	2520      	movs	r5, #32
 8013010:	2740      	movs	r7, #64	; 0x40
 8013012:	6226      	str	r6, [r4, #32]
 8013014:	2680      	movs	r6, #128	; 0x80
 8013016:	6422      	str	r2, [r4, #64]	; 0x40
 8013018:	f44f 7280 	mov.w	r2, #256	; 0x100
 801301c:	64a5      	str	r5, [r4, #72]	; 0x48
 801301e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013022:	6819      	ldr	r1, [r3, #0]
 8013024:	6527      	str	r7, [r4, #80]	; 0x50
 8013026:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801302a:	65a6      	str	r6, [r4, #88]	; 0x58
 801302c:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8013030:	6622      	str	r2, [r4, #96]	; 0x60
 8013032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013036:	66a5      	str	r5, [r4, #104]	; 0x68
 8013038:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801303c:	f1a1 0314 	sub.w	r3, r1, #20
 8013040:	6727      	str	r7, [r4, #112]	; 0x70
 8013042:	67a6      	str	r6, [r4, #120]	; 0x78
 8013044:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8013048:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 801304c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8013050:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8013054:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013058:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 801305c:	4403      	add	r3, r0
 801305e:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 8013062:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8013066:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 801306a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 801306e:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8013072:	2202      	movs	r2, #2
 8013074:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8013078:	2501      	movs	r5, #1
 801307a:	63a1      	str	r1, [r4, #56]	; 0x38
 801307c:	6363      	str	r3, [r4, #52]	; 0x34
 801307e:	6122      	str	r2, [r4, #16]
 8013080:	60e0      	str	r0, [r4, #12]
 8013082:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8013086:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801308a:	605d      	str	r5, [r3, #4]
 801308c:	6265      	str	r5, [r4, #36]	; 0x24
 801308e:	6065      	str	r5, [r4, #4]
 8013090:	f7ff f89c 	bl	80121cc <_AddFreeMemory>
 8013094:	f7ff fb20 	bl	80126d8 <_EnlargeBlocks>
 8013098:	6325      	str	r5, [r4, #48]	; 0x30
 801309a:	e755      	b.n	8012f48 <GUI_ALLOC_RequestSize+0x10>
 801309c:	200466c0 	.word	0x200466c0
 80130a0:	51eb851f 	.word	0x51eb851f
 80130a4:	200001dc 	.word	0x200001dc

080130a8 <GUI_ALLOC_Lock>:
 80130a8:	4a02      	ldr	r2, [pc, #8]	; (80130b4 <GUI_ALLOC_Lock+0xc>)
 80130aa:	6993      	ldr	r3, [r2, #24]
 80130ac:	3301      	adds	r3, #1
 80130ae:	6193      	str	r3, [r2, #24]
 80130b0:	4770      	bx	lr
 80130b2:	bf00      	nop
 80130b4:	200466c0 	.word	0x200466c0

080130b8 <GUI_ALLOC_Unlock>:
 80130b8:	4a02      	ldr	r2, [pc, #8]	; (80130c4 <GUI_ALLOC_Unlock+0xc>)
 80130ba:	6993      	ldr	r3, [r2, #24]
 80130bc:	3b01      	subs	r3, #1
 80130be:	6193      	str	r3, [r2, #24]
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	200466c0 	.word	0x200466c0

080130c8 <GUI_ALLOC_AssignMemory>:
 80130c8:	f021 0103 	bic.w	r1, r1, #3
 80130cc:	4b01      	ldr	r3, [pc, #4]	; (80130d4 <GUI_ALLOC_AssignMemory+0xc>)
 80130ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80130d2:	4770      	bx	lr
 80130d4:	200001dc 	.word	0x200001dc

080130d8 <GUI_ALLOC_Free>:
 80130d8:	b900      	cbnz	r0, 80130dc <GUI_ALLOC_Free+0x4>
 80130da:	4770      	bx	lr
 80130dc:	b570      	push	{r4, r5, r6, lr}
 80130de:	4c0d      	ldr	r4, [pc, #52]	; (8013114 <GUI_ALLOC_Free+0x3c>)
 80130e0:	4605      	mov	r5, r0
 80130e2:	f005 fa5f 	bl	80185a4 <GUI_Lock>
 80130e6:	00ee      	lsls	r6, r5, #3
 80130e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130ea:	4433      	add	r3, r6
 80130ec:	6859      	ldr	r1, [r3, #4]
 80130ee:	6848      	ldr	r0, [r1, #4]
 80130f0:	f7ff f86c 	bl	80121cc <_AddFreeMemory>
 80130f4:	6863      	ldr	r3, [r4, #4]
 80130f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80130f8:	2100      	movs	r1, #0
 80130fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80130fc:	3301      	adds	r3, #1
 80130fe:	4416      	add	r6, r2
 8013100:	6063      	str	r3, [r4, #4]
 8013102:	6070      	str	r0, [r6, #4]
 8013104:	f802 1035 	strb.w	r1, [r2, r5, lsl #3]
 8013108:	6265      	str	r5, [r4, #36]	; 0x24
 801310a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801310e:	f005 ba3f 	b.w	8018590 <GUI_Unlock>
 8013112:	bf00      	nop
 8013114:	200466c0 	.word	0x200466c0

08013118 <GUI_ALLOC_AllocZero>:
 8013118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311a:	4605      	mov	r5, r0
 801311c:	f005 fa42 	bl	80185a4 <GUI_Lock>
 8013120:	b925      	cbnz	r5, 801312c <GUI_ALLOC_AllocZero+0x14>
 8013122:	2400      	movs	r4, #0
 8013124:	f005 fa34 	bl	8018590 <GUI_Unlock>
 8013128:	4620      	mov	r0, r4
 801312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801312c:	f005 fa3a 	bl	80185a4 <GUI_Lock>
 8013130:	4628      	mov	r0, r5
 8013132:	f7ff fb41 	bl	80127b8 <_Alloc>
 8013136:	4604      	mov	r4, r0
 8013138:	f005 fa2a 	bl	8018590 <GUI_Unlock>
 801313c:	2c00      	cmp	r4, #0
 801313e:	d0f0      	beq.n	8013122 <GUI_ALLOC_AllocZero+0xa>
 8013140:	4e14      	ldr	r6, [pc, #80]	; (8013194 <GUI_ALLOC_AllocZero+0x7c>)
 8013142:	462a      	mov	r2, r5
 8013144:	4f14      	ldr	r7, [pc, #80]	; (8013198 <GUI_ALLOC_AllocZero+0x80>)
 8013146:	2100      	movs	r1, #0
 8013148:	69f0      	ldr	r0, [r6, #28]
 801314a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801314c:	3001      	adds	r0, #1
 801314e:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8013152:	61f0      	str	r0, [r6, #28]
 8013154:	f813 0034 	ldrb.w	r0, [r3, r4, lsl #3]
 8013158:	3001      	adds	r0, #1
 801315a:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 801315e:	686d      	ldr	r5, [r5, #4]
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	f105 0008 	add.w	r0, r5, #8
 8013166:	4798      	blx	r3
 8013168:	6829      	ldr	r1, [r5, #0]
 801316a:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801316c:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d901      	bls.n	8013178 <GUI_ALLOC_AllocZero+0x60>
 8013174:	69f0      	ldr	r0, [r6, #28]
 8013176:	b930      	cbnz	r0, 8013186 <GUI_ALLOC_AllocZero+0x6e>
 8013178:	3b01      	subs	r3, #1
 801317a:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 801317e:	f005 fa07 	bl	8018590 <GUI_Unlock>
 8013182:	4620      	mov	r0, r4
 8013184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013186:	3801      	subs	r0, #1
 8013188:	3b01      	subs	r3, #1
 801318a:	61f0      	str	r0, [r6, #28]
 801318c:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 8013190:	e7f5      	b.n	801317e <GUI_ALLOC_AllocZero+0x66>
 8013192:	bf00      	nop
 8013194:	200466c0 	.word	0x200466c0
 8013198:	20000050 	.word	0x20000050

0801319c <GUIPROP_DispChar>:
 801319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a0:	4d3a      	ldr	r5, [pc, #232]	; (801328c <GUIPROP_DispChar+0xf0>)
 80131a2:	b089      	sub	sp, #36	; 0x24
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	69da      	ldr	r2, [r3, #28]
 80131a8:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 80131ac:	69d3      	ldr	r3, [r2, #28]
 80131ae:	b143      	cbz	r3, 80131c2 <GUIPROP_DispChar+0x26>
 80131b0:	881a      	ldrh	r2, [r3, #0]
 80131b2:	4290      	cmp	r0, r2
 80131b4:	d302      	bcc.n	80131bc <GUIPROP_DispChar+0x20>
 80131b6:	8859      	ldrh	r1, [r3, #2]
 80131b8:	4281      	cmp	r1, r0
 80131ba:	d205      	bcs.n	80131c8 <GUIPROP_DispChar+0x2c>
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1f6      	bne.n	80131b0 <GUIPROP_DispChar+0x14>
 80131c2:	b009      	add	sp, #36	; 0x24
 80131c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c8:	1a84      	subs	r4, r0, r2
 80131ca:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80131ce:	4648      	mov	r0, r9
 80131d0:	eb08 06c4 	add.w	r6, r8, r4, lsl #3
 80131d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80131d8:	f006 fefa 	bl	8019fd0 <LCD_SetDrawMode>
 80131dc:	4682      	mov	sl, r0
 80131de:	6828      	ldr	r0, [r5, #0]
 80131e0:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 80131e4:	f04f 0e01 	mov.w	lr, #1
 80131e8:	69c7      	ldr	r7, [r0, #28]
 80131ea:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 80131ee:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 80131f2:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80131f6:	7e3b      	ldrb	r3, [r7, #24]
 80131f8:	9007      	str	r0, [sp, #28]
 80131fa:	f8cd c014 	str.w	ip, [sp, #20]
 80131fe:	6870      	ldr	r0, [r6, #4]
 8013200:	f8cd b00c 	str.w	fp, [sp, #12]
 8013204:	9004      	str	r0, [sp, #16]
 8013206:	f8cd e008 	str.w	lr, [sp, #8]
 801320a:	f897 e01b 	ldrb.w	lr, [r7, #27]
 801320e:	9807      	ldr	r0, [sp, #28]
 8013210:	f8cd e004 	str.w	lr, [sp, #4]
 8013214:	7ebf      	ldrb	r7, [r7, #26]
 8013216:	9700      	str	r7, [sp, #0]
 8013218:	f007 f8a0 	bl	801a35c <LCD_DrawBitmap>
 801321c:	682b      	ldr	r3, [r5, #0]
 801321e:	69da      	ldr	r2, [r3, #28]
 8013220:	7e53      	ldrb	r3, [r2, #25]
 8013222:	7e17      	ldrb	r7, [r2, #24]
 8013224:	42bb      	cmp	r3, r7
 8013226:	d923      	bls.n	8013270 <GUIPROP_DispChar+0xd4>
 8013228:	f1b9 0f02 	cmp.w	r9, #2
 801322c:	9307      	str	r3, [sp, #28]
 801322e:	d01f      	beq.n	8013270 <GUIPROP_DispChar+0xd4>
 8013230:	f892 b01b 	ldrb.w	fp, [r2, #27]
 8013234:	f000 fd5e 	bl	8013cf4 <GUI_GetColor>
 8013238:	4681      	mov	r9, r0
 801323a:	f000 fd4f 	bl	8013cdc <GUI_GetBkColor>
 801323e:	f000 ff03 	bl	8014048 <GUI_SetColor>
 8013242:	4b12      	ldr	r3, [pc, #72]	; (801328c <GUIPROP_DispChar+0xf0>)
 8013244:	f818 e034 	ldrb.w	lr, [r8, r4, lsl #3]
 8013248:	6818      	ldr	r0, [r3, #0]
 801324a:	9b07      	ldr	r3, [sp, #28]
 801324c:	69c1      	ldr	r1, [r0, #28]
 801324e:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	; 0x22
 8013252:	7eca      	ldrb	r2, [r1, #27]
 8013254:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 8013258:	4620      	mov	r0, r4
 801325a:	fb0e 4202 	mla	r2, lr, r2, r4
 801325e:	fb0b 1303 	mla	r3, fp, r3, r1
 8013262:	fb0b 1107 	mla	r1, fp, r7, r1
 8013266:	f006 ff3b 	bl	801a0e0 <LCD_FillRect>
 801326a:	4648      	mov	r0, r9
 801326c:	f000 feec 	bl	8014048 <GUI_SetColor>
 8013270:	4650      	mov	r0, sl
 8013272:	f006 fead 	bl	8019fd0 <LCD_SetDrawMode>
 8013276:	682b      	ldr	r3, [r5, #0]
 8013278:	7871      	ldrb	r1, [r6, #1]
 801327a:	69d8      	ldr	r0, [r3, #28]
 801327c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801327e:	7e80      	ldrb	r0, [r0, #26]
 8013280:	fb00 2201 	mla	r2, r0, r1, r2
 8013284:	845a      	strh	r2, [r3, #34]	; 0x22
 8013286:	b009      	add	sp, #36	; 0x24
 8013288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801328c:	20000018 	.word	0x20000018

08013290 <GUIPROP_GetCharDistX>:
 8013290:	4b11      	ldr	r3, [pc, #68]	; (80132d8 <GUIPROP_GetCharDistX+0x48>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	b470      	push	{r4, r5, r6}
 8013296:	69dd      	ldr	r5, [r3, #28]
 8013298:	69eb      	ldr	r3, [r5, #28]
 801329a:	b143      	cbz	r3, 80132ae <GUIPROP_GetCharDistX+0x1e>
 801329c:	881a      	ldrh	r2, [r3, #0]
 801329e:	4290      	cmp	r0, r2
 80132a0:	d302      	bcc.n	80132a8 <GUIPROP_GetCharDistX+0x18>
 80132a2:	885c      	ldrh	r4, [r3, #2]
 80132a4:	4284      	cmp	r4, r0
 80132a6:	d205      	bcs.n	80132b4 <GUIPROP_GetCharDistX+0x24>
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d1f6      	bne.n	801329c <GUIPROP_GetCharDistX+0xc>
 80132ae:	4618      	mov	r0, r3
 80132b0:	bc70      	pop	{r4, r5, r6}
 80132b2:	4770      	bx	lr
 80132b4:	1a82      	subs	r2, r0, r2
 80132b6:	685e      	ldr	r6, [r3, #4]
 80132b8:	7eac      	ldrb	r4, [r5, #26]
 80132ba:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 80132be:	785b      	ldrb	r3, [r3, #1]
 80132c0:	fb13 f004 	smulbb	r0, r3, r4
 80132c4:	2900      	cmp	r1, #0
 80132c6:	d0f3      	beq.n	80132b0 <GUIPROP_GetCharDistX+0x20>
 80132c8:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 80132cc:	fb14 f303 	smulbb	r3, r4, r3
 80132d0:	bc70      	pop	{r4, r5, r6}
 80132d2:	600b      	str	r3, [r1, #0]
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	20000018 	.word	0x20000018

080132dc <GUIPROP_GetFontInfo>:
 80132dc:	2301      	movs	r3, #1
 80132de:	800b      	strh	r3, [r1, #0]
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop

080132e4 <GUIPROP_IsInFont>:
 80132e4:	69c0      	ldr	r0, [r0, #28]
 80132e6:	b150      	cbz	r0, 80132fe <GUIPROP_IsInFont+0x1a>
 80132e8:	8803      	ldrh	r3, [r0, #0]
 80132ea:	428b      	cmp	r3, r1
 80132ec:	d802      	bhi.n	80132f4 <GUIPROP_IsInFont+0x10>
 80132ee:	8843      	ldrh	r3, [r0, #2]
 80132f0:	428b      	cmp	r3, r1
 80132f2:	d203      	bcs.n	80132fc <GUIPROP_IsInFont+0x18>
 80132f4:	6880      	ldr	r0, [r0, #8]
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d1f6      	bne.n	80132e8 <GUIPROP_IsInFont+0x4>
 80132fa:	4770      	bx	lr
 80132fc:	2001      	movs	r0, #1
 80132fe:	4770      	bx	lr

08013300 <GL_DrawCircle>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	f240 23c3 	movw	r3, #707	; 0x2c3
 8013308:	4692      	mov	sl, r2
 801330a:	b089      	sub	sp, #36	; 0x24
 801330c:	4a6d      	ldr	r2, [pc, #436]	; (80134c4 <GL_DrawCircle+0x1c4>)
 801330e:	fb03 f30a 	mul.w	r3, r3, sl
 8013312:	4680      	mov	r8, r0
 8013314:	9104      	str	r1, [sp, #16]
 8013316:	f1ba 0f00 	cmp.w	sl, #0
 801331a:	fb82 1203 	smull	r1, r2, r2, r3
 801331e:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8013322:	bfb4      	ite	lt
 8013324:	f10a 0001 	addlt.w	r0, sl, #1
 8013328:	4650      	movge	r0, sl
 801332a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801332e:	fb0a f60a 	mul.w	r6, sl, sl
 8013332:	4d65      	ldr	r5, [pc, #404]	; (80134c8 <GL_DrawCircle+0x1c8>)
 8013334:	3301      	adds	r3, #1
 8013336:	9c04      	ldr	r4, [sp, #16]
 8013338:	9305      	str	r3, [sp, #20]
 801333a:	eb0a 0308 	add.w	r3, sl, r8
 801333e:	4621      	mov	r1, r4
 8013340:	eb0a 0b04 	add.w	fp, sl, r4
 8013344:	461f      	mov	r7, r3
 8013346:	eb06 0360 	add.w	r3, r6, r0, asr #1
 801334a:	9306      	str	r3, [sp, #24]
 801334c:	4638      	mov	r0, r7
 801334e:	682b      	ldr	r3, [r5, #0]
 8013350:	46b9      	mov	r9, r7
 8013352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	4798      	blx	r3
 8013358:	682b      	ldr	r3, [r5, #0]
 801335a:	4621      	mov	r1, r4
 801335c:	ebca 0008 	rsb	r0, sl, r8
 8013360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	4798      	blx	r3
 8013366:	682b      	ldr	r3, [r5, #0]
 8013368:	4659      	mov	r1, fp
 801336a:	4640      	mov	r0, r8
 801336c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801336e:	685b      	ldr	r3, [r3, #4]
 8013370:	4798      	blx	r3
 8013372:	682b      	ldr	r3, [r5, #0]
 8013374:	ebca 0104 	rsb	r1, sl, r4
 8013378:	4640      	mov	r0, r8
 801337a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	4798      	blx	r3
 8013380:	9b05      	ldr	r3, [sp, #20]
 8013382:	2b00      	cmp	r3, #0
 8013384:	f340 809b 	ble.w	80134be <GL_DrawCircle+0x1be>
 8013388:	4633      	mov	r3, r6
 801338a:	2401      	movs	r4, #1
 801338c:	4656      	mov	r6, sl
 801338e:	462f      	mov	r7, r5
 8013390:	46c2      	mov	sl, r8
 8013392:	46c8      	mov	r8, r9
 8013394:	e046      	b.n	8013424 <GL_DrawCircle+0x124>
 8013396:	ebc4 030a 	rsb	r3, r4, sl
 801339a:	eb04 090a 	add.w	r9, r4, sl
 801339e:	9301      	str	r3, [sp, #4]
 80133a0:	9b04      	ldr	r3, [sp, #16]
 80133a2:	191a      	adds	r2, r3, r4
 80133a4:	1b1b      	subs	r3, r3, r4
 80133a6:	9202      	str	r2, [sp, #8]
 80133a8:	9303      	str	r3, [sp, #12]
 80133aa:	682b      	ldr	r3, [r5, #0]
 80133ac:	4659      	mov	r1, fp
 80133ae:	4648      	mov	r0, r9
 80133b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	4798      	blx	r3
 80133b6:	682b      	ldr	r3, [r5, #0]
 80133b8:	4659      	mov	r1, fp
 80133ba:	9801      	ldr	r0, [sp, #4]
 80133bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	4798      	blx	r3
 80133c2:	682b      	ldr	r3, [r5, #0]
 80133c4:	9902      	ldr	r1, [sp, #8]
 80133c6:	4640      	mov	r0, r8
 80133c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	4798      	blx	r3
 80133ce:	682b      	ldr	r3, [r5, #0]
 80133d0:	9903      	ldr	r1, [sp, #12]
 80133d2:	4640      	mov	r0, r8
 80133d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	4798      	blx	r3
 80133da:	b1ee      	cbz	r6, 8013418 <GL_DrawCircle+0x118>
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	4648      	mov	r0, r9
 80133e0:	9a04      	ldr	r2, [sp, #16]
 80133e2:	ebc6 090a 	rsb	r9, r6, sl
 80133e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133e8:	1b92      	subs	r2, r2, r6
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	4611      	mov	r1, r2
 80133ee:	9207      	str	r2, [sp, #28]
 80133f0:	4798      	blx	r3
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	9a07      	ldr	r2, [sp, #28]
 80133f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133f8:	4611      	mov	r1, r2
 80133fa:	9801      	ldr	r0, [sp, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	4798      	blx	r3
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	9902      	ldr	r1, [sp, #8]
 8013404:	4648      	mov	r0, r9
 8013406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	4798      	blx	r3
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	4648      	mov	r0, r9
 8013410:	9903      	ldr	r1, [sp, #12]
 8013412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	4798      	blx	r3
 8013418:	3401      	adds	r4, #1
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	42a3      	cmp	r3, r4
 801341e:	db4e      	blt.n	80134be <GL_DrawCircle+0x1be>
 8013420:	fb06 f306 	mul.w	r3, r6, r6
 8013424:	fb04 3304 	mla	r3, r4, r4, r3
 8013428:	9a06      	ldr	r2, [sp, #24]
 801342a:	429a      	cmp	r2, r3
 801342c:	dab3      	bge.n	8013396 <GL_DrawCircle+0x96>
 801342e:	ebc4 020a 	rsb	r2, r4, sl
 8013432:	682b      	ldr	r3, [r5, #0]
 8013434:	eb04 090a 	add.w	r9, r4, sl
 8013438:	4659      	mov	r1, fp
 801343a:	9201      	str	r2, [sp, #4]
 801343c:	9a04      	ldr	r2, [sp, #16]
 801343e:	4648      	mov	r0, r9
 8013440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013442:	18a2      	adds	r2, r4, r2
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	9202      	str	r2, [sp, #8]
 8013448:	4798      	blx	r3
 801344a:	682b      	ldr	r3, [r5, #0]
 801344c:	4659      	mov	r1, fp
 801344e:	9a04      	ldr	r2, [sp, #16]
 8013450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013452:	1b12      	subs	r2, r2, r4
 8013454:	9801      	ldr	r0, [sp, #4]
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	9203      	str	r2, [sp, #12]
 801345a:	4798      	blx	r3
 801345c:	682b      	ldr	r3, [r5, #0]
 801345e:	4640      	mov	r0, r8
 8013460:	9902      	ldr	r1, [sp, #8]
 8013462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	4798      	blx	r3
 8013468:	682b      	ldr	r3, [r5, #0]
 801346a:	4640      	mov	r0, r8
 801346c:	9903      	ldr	r1, [sp, #12]
 801346e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	4798      	blx	r3
 8013474:	b1e6      	cbz	r6, 80134b0 <GL_DrawCircle+0x1b0>
 8013476:	9a04      	ldr	r2, [sp, #16]
 8013478:	4648      	mov	r0, r9
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	ebc6 0b0a 	rsb	fp, r6, sl
 8013480:	ebc6 0802 	rsb	r8, r6, r2
 8013484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013486:	4641      	mov	r1, r8
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	4798      	blx	r3
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	4641      	mov	r1, r8
 8013490:	9801      	ldr	r0, [sp, #4]
 8013492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	4798      	blx	r3
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	4658      	mov	r0, fp
 801349c:	9902      	ldr	r1, [sp, #8]
 801349e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	4798      	blx	r3
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	4658      	mov	r0, fp
 80134a8:	9903      	ldr	r1, [sp, #12]
 80134aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	4798      	blx	r3
 80134b0:	3e01      	subs	r6, #1
 80134b2:	9b04      	ldr	r3, [sp, #16]
 80134b4:	eb06 080a 	add.w	r8, r6, sl
 80134b8:	eb06 0b03 	add.w	fp, r6, r3
 80134bc:	e775      	b.n	80133aa <GL_DrawCircle+0xaa>
 80134be:	b009      	add	sp, #36	; 0x24
 80134c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134c4:	10624dd3 	.word	0x10624dd3
 80134c8:	20000018 	.word	0x20000018

080134cc <GUI_DrawCircle>:
 80134cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ce:	b083      	sub	sp, #12
 80134d0:	4605      	mov	r5, r0
 80134d2:	460c      	mov	r4, r1
 80134d4:	4616      	mov	r6, r2
 80134d6:	f005 f865 	bl	80185a4 <GUI_Lock>
 80134da:	4b13      	ldr	r3, [pc, #76]	; (8013528 <GUI_DrawCircle+0x5c>)
 80134dc:	b2b7      	uxth	r7, r6
 80134de:	4668      	mov	r0, sp
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80134e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134e6:	4415      	add	r5, r2
 80134e8:	441c      	add	r4, r3
 80134ea:	b2aa      	uxth	r2, r5
 80134ec:	b2a3      	uxth	r3, r4
 80134ee:	ebc7 0e02 	rsb	lr, r7, r2
 80134f2:	443a      	add	r2, r7
 80134f4:	1bd9      	subs	r1, r3, r7
 80134f6:	443b      	add	r3, r7
 80134f8:	f8ad e000 	strh.w	lr, [sp]
 80134fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013500:	f8ad 1002 	strh.w	r1, [sp, #2]
 8013504:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013508:	f00d fb24 	bl	8020b54 <WM__InitIVRSearch>
 801350c:	b140      	cbz	r0, 8013520 <GUI_DrawCircle+0x54>
 801350e:	4632      	mov	r2, r6
 8013510:	4621      	mov	r1, r4
 8013512:	4628      	mov	r0, r5
 8013514:	f7ff fef4 	bl	8013300 <GL_DrawCircle>
 8013518:	f00d f9f2 	bl	8020900 <WM__GetNextIVR>
 801351c:	2800      	cmp	r0, #0
 801351e:	d1f6      	bne.n	801350e <GUI_DrawCircle+0x42>
 8013520:	f005 f836 	bl	8018590 <GUI_Unlock>
 8013524:	b003      	add	sp, #12
 8013526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013528:	20000018 	.word	0x20000018

0801352c <GL_FillCircle>:
 801352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013530:	f240 23c3 	movw	r3, #707	; 0x2c3
 8013534:	4615      	mov	r5, r2
 8013536:	4a34      	ldr	r2, [pc, #208]	; (8013608 <GL_FillCircle+0xdc>)
 8013538:	b085      	sub	sp, #20
 801353a:	fb03 f305 	mul.w	r3, r3, r5
 801353e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801360c <GL_FillCircle+0xe0>
 8013542:	9001      	str	r0, [sp, #4]
 8013544:	2d00      	cmp	r5, #0
 8013546:	fb82 2803 	smull	r2, r8, r2, r3
 801354a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 801354e:	bfb4      	ite	lt
 8013550:	1c6c      	addlt	r4, r5, #1
 8013552:	462c      	movge	r4, r5
 8013554:	ebc3 18a8 	rsb	r8, r3, r8, asr #6
 8013558:	9b01      	ldr	r3, [sp, #4]
 801355a:	fb05 fb05 	mul.w	fp, r5, r5
 801355e:	4689      	mov	r9, r1
 8013560:	18ee      	adds	r6, r5, r3
 8013562:	1b5f      	subs	r7, r3, r5
 8013564:	f8da 3000 	ldr.w	r3, [sl]
 8013568:	f108 0801 	add.w	r8, r8, #1
 801356c:	eb0b 0464 	add.w	r4, fp, r4, asr #1
 8013570:	4632      	mov	r2, r6
 8013572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013574:	4638      	mov	r0, r7
 8013576:	9400      	str	r4, [sp, #0]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4798      	blx	r3
 801357c:	f1b8 0f00 	cmp.w	r8, #0
 8013580:	dd3f      	ble.n	8013602 <GL_FillCircle+0xd6>
 8013582:	9b01      	ldr	r3, [sp, #4]
 8013584:	2401      	movs	r4, #1
 8013586:	191a      	adds	r2, r3, r4
 8013588:	3b01      	subs	r3, #1
 801358a:	9202      	str	r2, [sp, #8]
 801358c:	9303      	str	r3, [sp, #12]
 801358e:	e01a      	b.n	80135c6 <GL_FillCircle+0x9a>
 8013590:	3d01      	subs	r5, #1
 8013592:	9b01      	ldr	r3, [sp, #4]
 8013594:	18ee      	adds	r6, r5, r3
 8013596:	1b5f      	subs	r7, r3, r5
 8013598:	f8da 3000 	ldr.w	r3, [sl]
 801359c:	eb09 0104 	add.w	r1, r9, r4
 80135a0:	4632      	mov	r2, r6
 80135a2:	4638      	mov	r0, r7
 80135a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135a6:	fb05 fb05 	mul.w	fp, r5, r5
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4798      	blx	r3
 80135ae:	f8da 3000 	ldr.w	r3, [sl]
 80135b2:	ebc4 0109 	rsb	r1, r4, r9
 80135b6:	3401      	adds	r4, #1
 80135b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135ba:	4632      	mov	r2, r6
 80135bc:	4638      	mov	r0, r7
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4798      	blx	r3
 80135c2:	45a0      	cmp	r8, r4
 80135c4:	db1d      	blt.n	8013602 <GL_FillCircle+0xd6>
 80135c6:	fb04 bb04 	mla	fp, r4, r4, fp
 80135ca:	9b00      	ldr	r3, [sp, #0]
 80135cc:	455b      	cmp	r3, fp
 80135ce:	dae3      	bge.n	8013598 <GL_FillCircle+0x6c>
 80135d0:	45a8      	cmp	r8, r5
 80135d2:	dadd      	bge.n	8013590 <GL_FillCircle+0x64>
 80135d4:	9a02      	ldr	r2, [sp, #8]
 80135d6:	eb09 0105 	add.w	r1, r9, r5
 80135da:	f8da 3000 	ldr.w	r3, [sl]
 80135de:	1b16      	subs	r6, r2, r4
 80135e0:	9a03      	ldr	r2, [sp, #12]
 80135e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135e4:	1917      	adds	r7, r2, r4
 80135e6:	4630      	mov	r0, r6
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	463a      	mov	r2, r7
 80135ec:	4798      	blx	r3
 80135ee:	f8da 3000 	ldr.w	r3, [sl]
 80135f2:	463a      	mov	r2, r7
 80135f4:	4630      	mov	r0, r6
 80135f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135f8:	ebc5 0109 	rsb	r1, r5, r9
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4798      	blx	r3
 8013600:	e7c6      	b.n	8013590 <GL_FillCircle+0x64>
 8013602:	b005      	add	sp, #20
 8013604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013608:	10624dd3 	.word	0x10624dd3
 801360c:	20000018 	.word	0x20000018

08013610 <GUI_FillCircle>:
 8013610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	460d      	mov	r5, r1
 8013618:	4616      	mov	r6, r2
 801361a:	f004 ffc3 	bl	80185a4 <GUI_Lock>
 801361e:	4b0c      	ldr	r3, [pc, #48]	; (8013650 <GUI_FillCircle+0x40>)
 8013620:	2000      	movs	r0, #0
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8013626:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801362a:	f00d fa93 	bl	8020b54 <WM__InitIVRSearch>
 801362e:	b150      	cbz	r0, 8013646 <GUI_FillCircle+0x36>
 8013630:	4445      	add	r5, r8
 8013632:	443c      	add	r4, r7
 8013634:	4632      	mov	r2, r6
 8013636:	4629      	mov	r1, r5
 8013638:	4620      	mov	r0, r4
 801363a:	f7ff ff77 	bl	801352c <GL_FillCircle>
 801363e:	f00d f95f 	bl	8020900 <WM__GetNextIVR>
 8013642:	2800      	cmp	r0, #0
 8013644:	d1f6      	bne.n	8013634 <GUI_FillCircle+0x24>
 8013646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364a:	f004 bfa1 	b.w	8018590 <GUI_Unlock>
 801364e:	bf00      	nop
 8013650:	20000018 	.word	0x20000018

08013654 <GUI_FillEllipse>:
 8013654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013658:	b089      	sub	sp, #36	; 0x24
 801365a:	4617      	mov	r7, r2
 801365c:	460c      	mov	r4, r1
 801365e:	461e      	mov	r6, r3
 8013660:	4605      	mov	r5, r0
 8013662:	f000 fc7d 	bl	8013f60 <GUI_GetPenSize>
 8013666:	3001      	adds	r0, #1
 8013668:	1040      	asrs	r0, r0, #1
 801366a:	19c3      	adds	r3, r0, r7
 801366c:	461f      	mov	r7, r3
 801366e:	9305      	str	r3, [sp, #20]
 8013670:	1983      	adds	r3, r0, r6
 8013672:	461e      	mov	r6, r3
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	f004 ff95 	bl	80185a4 <GUI_Lock>
 801367a:	4b37      	ldr	r3, [pc, #220]	; (8013758 <GUI_FillEllipse+0x104>)
 801367c:	b2ba      	uxth	r2, r7
 801367e:	a806      	add	r0, sp, #24
 8013680:	6819      	ldr	r1, [r3, #0]
 8013682:	b2b3      	uxth	r3, r6
 8013684:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 8013686:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8013688:	4435      	add	r5, r6
 801368a:	440c      	add	r4, r1
 801368c:	b2ae      	uxth	r6, r5
 801368e:	b2a1      	uxth	r1, r4
 8013690:	1ab7      	subs	r7, r6, r2
 8013692:	4432      	add	r2, r6
 8013694:	1ace      	subs	r6, r1, r3
 8013696:	440b      	add	r3, r1
 8013698:	f8ad 7018 	strh.w	r7, [sp, #24]
 801369c:	f8ad 201c 	strh.w	r2, [sp, #28]
 80136a0:	f8ad 601a 	strh.w	r6, [sp, #26]
 80136a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80136a8:	f00d fa54 	bl	8020b54 <WM__InitIVRSearch>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	d04d      	beq.n	801374c <GUI_FillEllipse+0xf8>
 80136b0:	9b00      	ldr	r3, [sp, #0]
 80136b2:	f105 3bff 	add.w	fp, r5, #4294967295
 80136b6:	fb03 f303 	mul.w	r3, r3, r3
 80136ba:	9301      	str	r3, [sp, #4]
 80136bc:	9b05      	ldr	r3, [sp, #20]
 80136be:	fb03 f303 	mul.w	r3, r3, r3
 80136c2:	9302      	str	r3, [sp, #8]
 80136c4:	1c63      	adds	r3, r4, #1
 80136c6:	9303      	str	r3, [sp, #12]
 80136c8:	1e63      	subs	r3, r4, #1
 80136ca:	9304      	str	r3, [sp, #16]
 80136cc:	9b00      	ldr	r3, [sp, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	dd38      	ble.n	8013744 <GUI_FillEllipse+0xf0>
 80136d2:	9c05      	ldr	r4, [sp, #20]
 80136d4:	f04f 0a01 	mov.w	sl, #1
 80136d8:	9b03      	ldr	r3, [sp, #12]
 80136da:	fb0a f00a 	mul.w	r0, sl, sl
 80136de:	9a01      	ldr	r2, [sp, #4]
 80136e0:	ebca 0703 	rsb	r7, sl, r3
 80136e4:	9b04      	ldr	r3, [sp, #16]
 80136e6:	eb03 080a 	add.w	r8, r3, sl
 80136ea:	9b02      	ldr	r3, [sp, #8]
 80136ec:	fb03 f000 	mul.w	r0, r3, r0
 80136f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80136f4:	1a18      	subs	r0, r3, r0
 80136f6:	f006 f9c5 	bl	8019a84 <GUI__sqrt32>
 80136fa:	4602      	mov	r2, r0
 80136fc:	4639      	mov	r1, r7
 80136fe:	4628      	mov	r0, r5
 8013700:	42a2      	cmp	r2, r4
 8013702:	bf18      	it	ne
 8013704:	f104 34ff 	addne.w	r4, r4, #4294967295
 8013708:	eb05 0904 	add.w	r9, r5, r4
 801370c:	1b2e      	subs	r6, r5, r4
 801370e:	4614      	mov	r4, r2
 8013710:	464a      	mov	r2, r9
 8013712:	f006 fc95 	bl	801a040 <LCD_DrawHLine>
 8013716:	465a      	mov	r2, fp
 8013718:	4639      	mov	r1, r7
 801371a:	4630      	mov	r0, r6
 801371c:	f006 fc90 	bl	801a040 <LCD_DrawHLine>
 8013720:	f1ba 0f01 	cmp.w	sl, #1
 8013724:	465a      	mov	r2, fp
 8013726:	f10a 0a01 	add.w	sl, sl, #1
 801372a:	4641      	mov	r1, r8
 801372c:	4630      	mov	r0, r6
 801372e:	d006      	beq.n	801373e <GUI_FillEllipse+0xea>
 8013730:	f006 fc86 	bl	801a040 <LCD_DrawHLine>
 8013734:	464a      	mov	r2, r9
 8013736:	4641      	mov	r1, r8
 8013738:	4628      	mov	r0, r5
 801373a:	f006 fc81 	bl	801a040 <LCD_DrawHLine>
 801373e:	9b00      	ldr	r3, [sp, #0]
 8013740:	4553      	cmp	r3, sl
 8013742:	dac9      	bge.n	80136d8 <GUI_FillEllipse+0x84>
 8013744:	f00d f8dc 	bl	8020900 <WM__GetNextIVR>
 8013748:	2800      	cmp	r0, #0
 801374a:	d1bf      	bne.n	80136cc <GUI_FillEllipse+0x78>
 801374c:	f004 ff20 	bl	8018590 <GUI_Unlock>
 8013750:	b009      	add	sp, #36	; 0x24
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	bf00      	nop
 8013758:	20000018 	.word	0x20000018

0801375c <GL_DrawEllipse>:
 801375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013760:	b08b      	sub	sp, #44	; 0x2c
 8013762:	4615      	mov	r5, r2
 8013764:	4606      	mov	r6, r0
 8013766:	4618      	mov	r0, r3
 8013768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801376a:	fb05 f405 	mul.w	r4, r5, r5
 801376e:	9305      	str	r3, [sp, #20]
 8013770:	2800      	cmp	r0, #0
 8013772:	fb03 f303 	mul.w	r3, r3, r3
 8013776:	9404      	str	r4, [sp, #16]
 8013778:	9303      	str	r3, [sp, #12]
 801377a:	eba5 0302 	sub.w	r3, r5, r2
 801377e:	eba0 0202 	sub.w	r2, r0, r2
 8013782:	f103 0301 	add.w	r3, r3, #1
 8013786:	f102 0201 	add.w	r2, r2, #1
 801378a:	fb03 f303 	mul.w	r3, r3, r3
 801378e:	9202      	str	r2, [sp, #8]
 8013790:	9309      	str	r3, [sp, #36]	; 0x24
 8013792:	fb02 f302 	mul.w	r3, r2, r2
 8013796:	9308      	str	r3, [sp, #32]
 8013798:	dd55      	ble.n	8013846 <GL_DrawEllipse+0xea>
 801379a:	2401      	movs	r4, #1
 801379c:	f04f 0b00 	mov.w	fp, #0
 80137a0:	190b      	adds	r3, r1, r4
 80137a2:	f8cd b000 	str.w	fp, [sp]
 80137a6:	9307      	str	r3, [sp, #28]
 80137a8:	1e4b      	subs	r3, r1, #1
 80137aa:	9306      	str	r3, [sp, #24]
 80137ac:	e01c      	b.n	80137e8 <GL_DrawEllipse+0x8c>
 80137ae:	d04d      	beq.n	801384c <GL_DrawEllipse+0xf0>
 80137b0:	4652      	mov	r2, sl
 80137b2:	4641      	mov	r1, r8
 80137b4:	9800      	ldr	r0, [sp, #0]
 80137b6:	461d      	mov	r5, r3
 80137b8:	f006 fc42 	bl	801a040 <LCD_DrawHLine>
 80137bc:	465a      	mov	r2, fp
 80137be:	4641      	mov	r1, r8
 80137c0:	4638      	mov	r0, r7
 80137c2:	f006 fc3d 	bl	801a040 <LCD_DrawHLine>
 80137c6:	2c01      	cmp	r4, #1
 80137c8:	465a      	mov	r2, fp
 80137ca:	f104 0401 	add.w	r4, r4, #1
 80137ce:	4649      	mov	r1, r9
 80137d0:	4638      	mov	r0, r7
 80137d2:	d006      	beq.n	80137e2 <GL_DrawEllipse+0x86>
 80137d4:	f006 fc34 	bl	801a040 <LCD_DrawHLine>
 80137d8:	4652      	mov	r2, sl
 80137da:	4649      	mov	r1, r9
 80137dc:	9800      	ldr	r0, [sp, #0]
 80137de:	f006 fc2f 	bl	801a040 <LCD_DrawHLine>
 80137e2:	9b05      	ldr	r3, [sp, #20]
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	db2e      	blt.n	8013846 <GL_DrawEllipse+0xea>
 80137e8:	9b07      	ldr	r3, [sp, #28]
 80137ea:	fb04 f204 	mul.w	r2, r4, r4
 80137ee:	9904      	ldr	r1, [sp, #16]
 80137f0:	ebc4 0803 	rsb	r8, r4, r3
 80137f4:	9b06      	ldr	r3, [sp, #24]
 80137f6:	fb02 f001 	mul.w	r0, r2, r1
 80137fa:	eb03 0904 	add.w	r9, r3, r4
 80137fe:	9b03      	ldr	r3, [sp, #12]
 8013800:	9201      	str	r2, [sp, #4]
 8013802:	fbb0 f0f3 	udiv	r0, r0, r3
 8013806:	1a08      	subs	r0, r1, r0
 8013808:	f006 f93c 	bl	8019a84 <GUI__sqrt32>
 801380c:	9902      	ldr	r1, [sp, #8]
 801380e:	42a8      	cmp	r0, r5
 8013810:	4603      	mov	r3, r0
 8013812:	9a01      	ldr	r2, [sp, #4]
 8013814:	bf18      	it	ne
 8013816:	f105 35ff 	addne.w	r5, r5, #4294967295
 801381a:	42a1      	cmp	r1, r4
 801381c:	eba6 0705 	sub.w	r7, r6, r5
 8013820:	eb05 0a06 	add.w	sl, r5, r6
 8013824:	ddc3      	ble.n	80137ae <GL_DrawEllipse+0x52>
 8013826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013828:	9b08      	ldr	r3, [sp, #32]
 801382a:	9001      	str	r0, [sp, #4]
 801382c:	fb02 f001 	mul.w	r0, r2, r1
 8013830:	fbb0 f0f3 	udiv	r0, r0, r3
 8013834:	1a08      	subs	r0, r1, r0
 8013836:	f006 f925 	bl	8019a84 <GUI__sqrt32>
 801383a:	1833      	adds	r3, r6, r0
 801383c:	ebc0 0b06 	rsb	fp, r0, r6
 8013840:	9300      	str	r3, [sp, #0]
 8013842:	9b01      	ldr	r3, [sp, #4]
 8013844:	e7b4      	b.n	80137b0 <GL_DrawEllipse+0x54>
 8013846:	b00b      	add	sp, #44	; 0x2c
 8013848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384c:	f106 3bff 	add.w	fp, r6, #4294967295
 8013850:	9600      	str	r6, [sp, #0]
 8013852:	e7ad      	b.n	80137b0 <GL_DrawEllipse+0x54>

08013854 <GUI_DrawEllipse>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	b08f      	sub	sp, #60	; 0x3c
 801385a:	461c      	mov	r4, r3
 801385c:	460e      	mov	r6, r1
 801385e:	4617      	mov	r7, r2
 8013860:	4605      	mov	r5, r0
 8013862:	f000 fb7d 	bl	8013f60 <GUI_GetPenSize>
 8013866:	1c41      	adds	r1, r0, #1
 8013868:	4603      	mov	r3, r0
 801386a:	9009      	str	r0, [sp, #36]	; 0x24
 801386c:	1049      	asrs	r1, r1, #1
 801386e:	19ca      	adds	r2, r1, r7
 8013870:	4610      	mov	r0, r2
 8013872:	9208      	str	r2, [sp, #32]
 8013874:	190a      	adds	r2, r1, r4
 8013876:	4283      	cmp	r3, r0
 8013878:	9204      	str	r2, [sp, #16]
 801387a:	dc02      	bgt.n	8013882 <GUI_DrawEllipse+0x2e>
 801387c:	4617      	mov	r7, r2
 801387e:	42bb      	cmp	r3, r7
 8013880:	dd02      	ble.n	8013888 <GUI_DrawEllipse+0x34>
 8013882:	b00f      	add	sp, #60	; 0x3c
 8013884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013888:	4604      	mov	r4, r0
 801388a:	f004 fe8b 	bl	80185a4 <GUI_Lock>
 801388e:	4b43      	ldr	r3, [pc, #268]	; (801399c <GUI_DrawEllipse+0x148>)
 8013890:	a80c      	add	r0, sp, #48	; 0x30
 8013892:	b2a2      	uxth	r2, r4
 8013894:	6819      	ldr	r1, [r3, #0]
 8013896:	b2bb      	uxth	r3, r7
 8013898:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801389a:	6d09      	ldr	r1, [r1, #80]	; 0x50
 801389c:	4425      	add	r5, r4
 801389e:	1871      	adds	r1, r6, r1
 80138a0:	b2ac      	uxth	r4, r5
 80138a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80138a4:	b289      	uxth	r1, r1
 80138a6:	1aa6      	subs	r6, r4, r2
 80138a8:	4422      	add	r2, r4
 80138aa:	1acc      	subs	r4, r1, r3
 80138ac:	440b      	add	r3, r1
 80138ae:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80138b2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80138b6:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 80138ba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80138be:	f00d f949 	bl	8020b54 <WM__InitIVRSearch>
 80138c2:	2800      	cmp	r0, #0
 80138c4:	d065      	beq.n	8013992 <GUI_DrawEllipse+0x13e>
 80138c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138c8:	9a04      	ldr	r2, [sp, #16]
 80138ca:	461c      	mov	r4, r3
 80138cc:	9808      	ldr	r0, [sp, #32]
 80138ce:	4613      	mov	r3, r2
 80138d0:	4284      	cmp	r4, r0
 80138d2:	bf18      	it	ne
 80138d4:	4294      	cmpne	r4, r2
 80138d6:	fb00 fb00 	mul.w	fp, r0, r0
 80138da:	bf0c      	ite	eq
 80138dc:	2301      	moveq	r3, #1
 80138de:	2300      	movne	r3, #0
 80138e0:	930a      	str	r3, [sp, #40]	; 0x28
 80138e2:	4613      	mov	r3, r2
 80138e4:	fb03 f302 	mul.w	r3, r3, r2
 80138e8:	9305      	str	r3, [sp, #20]
 80138ea:	1e6b      	subs	r3, r5, #1
 80138ec:	9303      	str	r3, [sp, #12]
 80138ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138f0:	1c5a      	adds	r2, r3, #1
 80138f2:	3b01      	subs	r3, #1
 80138f4:	9206      	str	r2, [sp, #24]
 80138f6:	9307      	str	r3, [sp, #28]
 80138f8:	e00b      	b.n	8013912 <GUI_DrawEllipse+0xbe>
 80138fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138fc:	4628      	mov	r0, r5
 80138fe:	9a08      	ldr	r2, [sp, #32]
 8013900:	9300      	str	r3, [sp, #0]
 8013902:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013904:	9b04      	ldr	r3, [sp, #16]
 8013906:	f7ff ff29 	bl	801375c <GL_DrawEllipse>
 801390a:	f00c fff9 	bl	8020900 <WM__GetNextIVR>
 801390e:	2800      	cmp	r0, #0
 8013910:	d03f      	beq.n	8013992 <GUI_DrawEllipse+0x13e>
 8013912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013914:	2b00      	cmp	r3, #0
 8013916:	d0f0      	beq.n	80138fa <GUI_DrawEllipse+0xa6>
 8013918:	9b04      	ldr	r3, [sp, #16]
 801391a:	2b00      	cmp	r3, #0
 801391c:	ddf5      	ble.n	801390a <GUI_DrawEllipse+0xb6>
 801391e:	9c08      	ldr	r4, [sp, #32]
 8013920:	f04f 0a01 	mov.w	sl, #1
 8013924:	9b06      	ldr	r3, [sp, #24]
 8013926:	fb0a f00a 	mul.w	r0, sl, sl
 801392a:	ebca 0703 	rsb	r7, sl, r3
 801392e:	9b07      	ldr	r3, [sp, #28]
 8013930:	fb0b f000 	mul.w	r0, fp, r0
 8013934:	eb03 080a 	add.w	r8, r3, sl
 8013938:	9b05      	ldr	r3, [sp, #20]
 801393a:	fbb0 f0f3 	udiv	r0, r0, r3
 801393e:	ebc0 000b 	rsb	r0, r0, fp
 8013942:	f006 f89f 	bl	8019a84 <GUI__sqrt32>
 8013946:	4602      	mov	r2, r0
 8013948:	4639      	mov	r1, r7
 801394a:	4628      	mov	r0, r5
 801394c:	42a2      	cmp	r2, r4
 801394e:	bf18      	it	ne
 8013950:	f104 34ff 	addne.w	r4, r4, #4294967295
 8013954:	eb05 0904 	add.w	r9, r5, r4
 8013958:	1b2e      	subs	r6, r5, r4
 801395a:	4614      	mov	r4, r2
 801395c:	464a      	mov	r2, r9
 801395e:	f006 fb6f 	bl	801a040 <LCD_DrawHLine>
 8013962:	9a03      	ldr	r2, [sp, #12]
 8013964:	4639      	mov	r1, r7
 8013966:	4630      	mov	r0, r6
 8013968:	f006 fb6a 	bl	801a040 <LCD_DrawHLine>
 801396c:	f1ba 0f01 	cmp.w	sl, #1
 8013970:	9a03      	ldr	r2, [sp, #12]
 8013972:	f10a 0a01 	add.w	sl, sl, #1
 8013976:	4641      	mov	r1, r8
 8013978:	4630      	mov	r0, r6
 801397a:	d006      	beq.n	801398a <GUI_DrawEllipse+0x136>
 801397c:	f006 fb60 	bl	801a040 <LCD_DrawHLine>
 8013980:	464a      	mov	r2, r9
 8013982:	4641      	mov	r1, r8
 8013984:	4628      	mov	r0, r5
 8013986:	f006 fb5b 	bl	801a040 <LCD_DrawHLine>
 801398a:	9b04      	ldr	r3, [sp, #16]
 801398c:	4553      	cmp	r3, sl
 801398e:	dac9      	bge.n	8013924 <GUI_DrawEllipse+0xd0>
 8013990:	e7bb      	b.n	801390a <GUI_DrawEllipse+0xb6>
 8013992:	f004 fdfd 	bl	8018590 <GUI_Unlock>
 8013996:	b00f      	add	sp, #60	; 0x3c
 8013998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801399c:	20000018 	.word	0x20000018

080139a0 <_cbDrawTextStyle>:
 80139a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a4:	4e2a      	ldr	r6, [pc, #168]	; (8013a50 <_cbDrawTextStyle+0xb0>)
 80139a6:	2100      	movs	r1, #0
 80139a8:	6833      	ldr	r3, [r6, #0]
 80139aa:	69da      	ldr	r2, [r3, #28]
 80139ac:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 80139b0:	6853      	ldr	r3, [r2, #4]
 80139b2:	4798      	blx	r3
 80139b4:	6834      	ldr	r4, [r6, #0]
 80139b6:	7ee3      	ldrb	r3, [r4, #27]
 80139b8:	b38b      	cbz	r3, 8013a1e <_cbDrawTextStyle+0x7e>
 80139ba:	7ca1      	ldrb	r1, [r4, #18]
 80139bc:	1a2f      	subs	r7, r5, r0
 80139be:	3d01      	subs	r5, #1
 80139c0:	07c8      	lsls	r0, r1, #31
 80139c2:	d512      	bpl.n	80139ea <_cbDrawTextStyle+0x4a>
 80139c4:	69e2      	ldr	r2, [r4, #28]
 80139c6:	4638      	mov	r0, r7
 80139c8:	f9b4 4024 	ldrsh.w	r4, [r4, #36]	; 0x24
 80139cc:	f892 1020 	ldrb.w	r1, [r2, #32]
 80139d0:	7e12      	ldrb	r2, [r2, #24]
 80139d2:	4291      	cmp	r1, r2
 80139d4:	bfa8      	it	ge
 80139d6:	f102 31ff 	addge.w	r1, r2, #4294967295
 80139da:	462a      	mov	r2, r5
 80139dc:	4421      	add	r1, r4
 80139de:	440b      	add	r3, r1
 80139e0:	3b01      	subs	r3, #1
 80139e2:	f006 fb7d 	bl	801a0e0 <LCD_FillRect>
 80139e6:	6834      	ldr	r4, [r6, #0]
 80139e8:	7ca1      	ldrb	r1, [r4, #18]
 80139ea:	078a      	lsls	r2, r1, #30
 80139ec:	d419      	bmi.n	8013a22 <_cbDrawTextStyle+0x82>
 80139ee:	074b      	lsls	r3, r1, #29
 80139f0:	d515      	bpl.n	8013a1e <_cbDrawTextStyle+0x7e>
 80139f2:	69e3      	ldr	r3, [r4, #28]
 80139f4:	462a      	mov	r2, r5
 80139f6:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
 80139fa:	4638      	mov	r0, r7
 80139fc:	f893 5020 	ldrb.w	r5, [r3, #32]
 8013a00:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8013a04:	7ee3      	ldrb	r3, [r4, #27]
 8013a06:	1a69      	subs	r1, r5, r1
 8013a08:	3901      	subs	r1, #1
 8013a0a:	2900      	cmp	r1, #0
 8013a0c:	bfac      	ite	ge
 8013a0e:	1871      	addge	r1, r6, r1
 8013a10:	1c31      	addlt	r1, r6, #0
 8013a12:	440b      	add	r3, r1
 8013a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	f006 bb61 	b.w	801a0e0 <LCD_FillRect>
 8013a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a22:	69e3      	ldr	r3, [r4, #28]
 8013a24:	462a      	mov	r2, r5
 8013a26:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
 8013a2a:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8013a2e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8013a32:	3101      	adds	r1, #1
 8013a34:	7ee3      	ldrb	r3, [r4, #27]
 8013a36:	eba0 0161 	sub.w	r1, r0, r1, asr #1
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	4471      	add	r1, lr
 8013a3e:	440b      	add	r3, r1
 8013a40:	3b01      	subs	r3, #1
 8013a42:	f006 fb4d 	bl	801a0e0 <LCD_FillRect>
 8013a46:	6834      	ldr	r4, [r6, #0]
 8013a48:	7ca1      	ldrb	r1, [r4, #18]
 8013a4a:	074b      	lsls	r3, r1, #29
 8013a4c:	d5e7      	bpl.n	8013a1e <_cbDrawTextStyle+0x7e>
 8013a4e:	e7d0      	b.n	80139f2 <_cbDrawTextStyle+0x52>
 8013a50:	20000018 	.word	0x20000018

08013a54 <_cbDrawTextLine>:
 8013a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a58:	4f29      	ldr	r7, [pc, #164]	; (8013b00 <_cbDrawTextLine+0xac>)
 8013a5a:	683c      	ldr	r4, [r7, #0]
 8013a5c:	7ee3      	ldrb	r3, [r4, #27]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d034      	beq.n	8013acc <_cbDrawTextLine+0x78>
 8013a62:	7ca1      	ldrb	r1, [r4, #18]
 8013a64:	4605      	mov	r5, r0
 8013a66:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
 8013a6a:	07c8      	lsls	r0, r1, #31
 8013a6c:	f106 36ff 	add.w	r6, r6, #4294967295
 8013a70:	d512      	bpl.n	8013a98 <_cbDrawTextLine+0x44>
 8013a72:	69e2      	ldr	r2, [r4, #28]
 8013a74:	4628      	mov	r0, r5
 8013a76:	f9b4 4024 	ldrsh.w	r4, [r4, #36]	; 0x24
 8013a7a:	f892 1020 	ldrb.w	r1, [r2, #32]
 8013a7e:	7e12      	ldrb	r2, [r2, #24]
 8013a80:	4291      	cmp	r1, r2
 8013a82:	bfa8      	it	ge
 8013a84:	f102 31ff 	addge.w	r1, r2, #4294967295
 8013a88:	4632      	mov	r2, r6
 8013a8a:	4421      	add	r1, r4
 8013a8c:	440b      	add	r3, r1
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	f006 fb26 	bl	801a0e0 <LCD_FillRect>
 8013a94:	683c      	ldr	r4, [r7, #0]
 8013a96:	7ca1      	ldrb	r1, [r4, #18]
 8013a98:	078a      	lsls	r2, r1, #30
 8013a9a:	d419      	bmi.n	8013ad0 <_cbDrawTextLine+0x7c>
 8013a9c:	074b      	lsls	r3, r1, #29
 8013a9e:	d515      	bpl.n	8013acc <_cbDrawTextLine+0x78>
 8013aa0:	69e3      	ldr	r3, [r4, #28]
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	4632      	mov	r2, r6
 8013aa6:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
 8013aaa:	f893 5020 	ldrb.w	r5, [r3, #32]
 8013aae:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8013ab2:	7ee3      	ldrb	r3, [r4, #27]
 8013ab4:	1a69      	subs	r1, r5, r1
 8013ab6:	3901      	subs	r1, #1
 8013ab8:	2900      	cmp	r1, #0
 8013aba:	bfac      	ite	ge
 8013abc:	1871      	addge	r1, r6, r1
 8013abe:	1c31      	addlt	r1, r6, #0
 8013ac0:	440b      	add	r3, r1
 8013ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac6:	3b01      	subs	r3, #1
 8013ac8:	f006 bb0a 	b.w	801a0e0 <LCD_FillRect>
 8013acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad0:	69e3      	ldr	r3, [r4, #28]
 8013ad2:	4632      	mov	r2, r6
 8013ad4:	f9b4 e024 	ldrsh.w	lr, [r4, #36]	; 0x24
 8013ad8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8013adc:	f893 0020 	ldrb.w	r0, [r3, #32]
 8013ae0:	3101      	adds	r1, #1
 8013ae2:	7ee3      	ldrb	r3, [r4, #27]
 8013ae4:	eba0 0161 	sub.w	r1, r0, r1, asr #1
 8013ae8:	4628      	mov	r0, r5
 8013aea:	4471      	add	r1, lr
 8013aec:	440b      	add	r3, r1
 8013aee:	3b01      	subs	r3, #1
 8013af0:	f006 faf6 	bl	801a0e0 <LCD_FillRect>
 8013af4:	683c      	ldr	r4, [r7, #0]
 8013af6:	7ca1      	ldrb	r1, [r4, #18]
 8013af8:	074b      	lsls	r3, r1, #29
 8013afa:	d5e7      	bpl.n	8013acc <_cbDrawTextLine+0x78>
 8013afc:	e7d0      	b.n	8013aa0 <_cbDrawTextLine+0x4c>
 8013afe:	bf00      	nop
 8013b00:	20000018 	.word	0x20000018

08013b04 <GUI_Long2Len>:
 8013b04:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8013b08:	4602      	mov	r2, r0
 8013b0a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8013b0e:	2b09      	cmp	r3, #9
 8013b10:	dd1f      	ble.n	8013b52 <GUI_Long2Len+0x4e>
 8013b12:	2b63      	cmp	r3, #99	; 0x63
 8013b14:	d920      	bls.n	8013b58 <GUI_Long2Len+0x54>
 8013b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b1a:	d320      	bcc.n	8013b5e <GUI_Long2Len+0x5a>
 8013b1c:	f242 710f 	movw	r1, #9999	; 0x270f
 8013b20:	428b      	cmp	r3, r1
 8013b22:	d91f      	bls.n	8013b64 <GUI_Long2Len+0x60>
 8013b24:	4917      	ldr	r1, [pc, #92]	; (8013b84 <GUI_Long2Len+0x80>)
 8013b26:	428b      	cmp	r3, r1
 8013b28:	d91f      	bls.n	8013b6a <GUI_Long2Len+0x66>
 8013b2a:	4917      	ldr	r1, [pc, #92]	; (8013b88 <GUI_Long2Len+0x84>)
 8013b2c:	428b      	cmp	r3, r1
 8013b2e:	d91f      	bls.n	8013b70 <GUI_Long2Len+0x6c>
 8013b30:	4916      	ldr	r1, [pc, #88]	; (8013b8c <GUI_Long2Len+0x88>)
 8013b32:	428b      	cmp	r3, r1
 8013b34:	d91f      	bls.n	8013b76 <GUI_Long2Len+0x72>
 8013b36:	4916      	ldr	r1, [pc, #88]	; (8013b90 <GUI_Long2Len+0x8c>)
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	d91f      	bls.n	8013b7c <GUI_Long2Len+0x78>
 8013b3c:	4915      	ldr	r1, [pc, #84]	; (8013b94 <GUI_Long2Len+0x90>)
 8013b3e:	428b      	cmp	r3, r1
 8013b40:	bf8b      	itete	hi
 8013b42:	200a      	movhi	r0, #10
 8013b44:	2009      	movls	r0, #9
 8013b46:	2309      	movhi	r3, #9
 8013b48:	2308      	movls	r3, #8
 8013b4a:	2a00      	cmp	r2, #0
 8013b4c:	bfb8      	it	lt
 8013b4e:	1c98      	addlt	r0, r3, #2
 8013b50:	4770      	bx	lr
 8013b52:	2001      	movs	r0, #1
 8013b54:	2300      	movs	r3, #0
 8013b56:	e7f8      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b58:	2002      	movs	r0, #2
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e7f5      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b5e:	2003      	movs	r0, #3
 8013b60:	2302      	movs	r3, #2
 8013b62:	e7f2      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b64:	2004      	movs	r0, #4
 8013b66:	2303      	movs	r3, #3
 8013b68:	e7ef      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b6a:	2005      	movs	r0, #5
 8013b6c:	2304      	movs	r3, #4
 8013b6e:	e7ec      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b70:	2006      	movs	r0, #6
 8013b72:	2305      	movs	r3, #5
 8013b74:	e7e9      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b76:	2007      	movs	r0, #7
 8013b78:	2306      	movs	r3, #6
 8013b7a:	e7e6      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b7c:	2008      	movs	r0, #8
 8013b7e:	2307      	movs	r3, #7
 8013b80:	e7e3      	b.n	8013b4a <GUI_Long2Len+0x46>
 8013b82:	bf00      	nop
 8013b84:	0001869f 	.word	0x0001869f
 8013b88:	000f423f 	.word	0x000f423f
 8013b8c:	0098967f 	.word	0x0098967f
 8013b90:	05f5e0ff 	.word	0x05f5e0ff
 8013b94:	3b9ac9ff 	.word	0x3b9ac9ff

08013b98 <GUI_AddSign>:
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	dd09      	ble.n	8013bb0 <GUI_AddSign+0x18>
 8013b9c:	680b      	ldr	r3, [r1, #0]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	b430      	push	{r4, r5}
 8013ba2:	1c5d      	adds	r5, r3, #1
 8013ba4:	242b      	movs	r4, #43	; 0x2b
 8013ba6:	600d      	str	r5, [r1, #0]
 8013ba8:	701c      	strb	r4, [r3, #0]
 8013baa:	680b      	ldr	r3, [r1, #0]
 8013bac:	701a      	strb	r2, [r3, #0]
 8013bae:	bc30      	pop	{r4, r5}
 8013bb0:	4770      	bx	lr
 8013bb2:	bf00      	nop

08013bb4 <GUI_AddDecShift>:
 8013bb4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8013bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013bbc:	d046      	beq.n	8013c4c <GUI_AddDecShift+0x98>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	db51      	blt.n	8013c66 <GUI_AddDecShift+0xb2>
 8013bc2:	2500      	movs	r5, #0
 8013bc4:	1b4d      	subs	r5, r1, r5
 8013bc6:	f04f 0e00 	mov.w	lr, #0
 8013bca:	b2ed      	uxtb	r5, r5
 8013bcc:	b10a      	cbz	r2, 8013bd2 <GUI_AddDecShift+0x1e>
 8013bce:	3d01      	subs	r5, #1
 8013bd0:	b2ed      	uxtb	r5, r5
 8013bd2:	b375      	cbz	r5, 8013c32 <GUI_AddDecShift+0x7e>
 8013bd4:	1e6c      	subs	r4, r5, #1
 8013bd6:	42aa      	cmp	r2, r5
 8013bd8:	4f27      	ldr	r7, [pc, #156]	; (8013c78 <GUI_AddDecShift+0xc4>)
 8013bda:	f04f 0831 	mov.w	r8, #49	; 0x31
 8013bde:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8013c7c <GUI_AddDecShift+0xc8>
 8013be2:	b2e4      	uxtb	r4, r4
 8013be4:	d01e      	beq.n	8013c24 <GUI_AddDecShift+0x70>
 8013be6:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8013bea:	fb90 f1f6 	sdiv	r1, r0, r6
 8013bee:	b2c9      	uxtb	r1, r1
 8013bf0:	290a      	cmp	r1, #10
 8013bf2:	f101 0901 	add.w	r9, r1, #1
 8013bf6:	fb06 0011 	mls	r0, r6, r1, r0
 8013bfa:	d81a      	bhi.n	8013c32 <GUI_AddDecShift+0x7e>
 8013bfc:	b924      	cbnz	r4, 8013c08 <GUI_AddDecShift+0x54>
 8013bfe:	f1be 0f00 	cmp.w	lr, #0
 8013c02:	d001      	beq.n	8013c08 <GUI_AddDecShift+0x54>
 8013c04:	fa5f f189 	uxtb.w	r1, r9
 8013c08:	290a      	cmp	r1, #10
 8013c0a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8013c0e:	d015      	beq.n	8013c3c <GUI_AddDecShift+0x88>
 8013c10:	681d      	ldr	r5, [r3, #0]
 8013c12:	1c6e      	adds	r6, r5, #1
 8013c14:	601e      	str	r6, [r3, #0]
 8013c16:	7029      	strb	r1, [r5, #0]
 8013c18:	b15c      	cbz	r4, 8013c32 <GUI_AddDecShift+0x7e>
 8013c1a:	4625      	mov	r5, r4
 8013c1c:	1e6c      	subs	r4, r5, #1
 8013c1e:	42aa      	cmp	r2, r5
 8013c20:	b2e4      	uxtb	r4, r4
 8013c22:	d1e0      	bne.n	8013be6 <GUI_AddDecShift+0x32>
 8013c24:	6819      	ldr	r1, [r3, #0]
 8013c26:	1c4e      	adds	r6, r1, #1
 8013c28:	601e      	str	r6, [r3, #0]
 8013c2a:	f89c 6000 	ldrb.w	r6, [ip]
 8013c2e:	700e      	strb	r6, [r1, #0]
 8013c30:	e7d9      	b.n	8013be6 <GUI_AddDecShift+0x32>
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2200      	movs	r2, #0
 8013c36:	701a      	strb	r2, [r3, #0]
 8013c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c3c:	6819      	ldr	r1, [r3, #0]
 8013c3e:	462c      	mov	r4, r5
 8013c40:	1c4d      	adds	r5, r1, #1
 8013c42:	601d      	str	r5, [r3, #0]
 8013c44:	4625      	mov	r5, r4
 8013c46:	f881 8000 	strb.w	r8, [r1]
 8013c4a:	e7e7      	b.n	8013c1c <GUI_AddDecShift+0x68>
 8013c4c:	681c      	ldr	r4, [r3, #0]
 8013c4e:	f04f 0e01 	mov.w	lr, #1
 8013c52:	1e4d      	subs	r5, r1, #1
 8013c54:	212d      	movs	r1, #45	; 0x2d
 8013c56:	eb04 060e 	add.w	r6, r4, lr
 8013c5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013c5e:	b2ed      	uxtb	r5, r5
 8013c60:	601e      	str	r6, [r3, #0]
 8013c62:	7021      	strb	r1, [r4, #0]
 8013c64:	e7b2      	b.n	8013bcc <GUI_AddDecShift+0x18>
 8013c66:	681c      	ldr	r4, [r3, #0]
 8013c68:	2501      	movs	r5, #1
 8013c6a:	262d      	movs	r6, #45	; 0x2d
 8013c6c:	4240      	negs	r0, r0
 8013c6e:	1967      	adds	r7, r4, r5
 8013c70:	601f      	str	r7, [r3, #0]
 8013c72:	7026      	strb	r6, [r4, #0]
 8013c74:	e7a6      	b.n	8013bc4 <GUI_AddDecShift+0x10>
 8013c76:	bf00      	nop
 8013c78:	08027284 	.word	0x08027284
 8013c7c:	20046788 	.word	0x20046788

08013c80 <GUI_CalcColorDist>:
 8013c80:	b2c3      	uxtb	r3, r0
 8013c82:	b2ca      	uxtb	r2, r1
 8013c84:	1a9a      	subs	r2, r3, r2
 8013c86:	b292      	uxth	r2, r2
 8013c88:	b410      	push	{r4}
 8013c8a:	b214      	sxth	r4, r2
 8013c8c:	2c00      	cmp	r4, #0
 8013c8e:	db1e      	blt.n	8013cce <GUI_CalcColorDist+0x4e>
 8013c90:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013c94:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013c98:	1a9b      	subs	r3, r3, r2
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	b21a      	sxth	r2, r3
 8013c9e:	2a00      	cmp	r2, #0
 8013ca0:	db12      	blt.n	8013cc8 <GUI_CalcColorDist+0x48>
 8013ca2:	0c09      	lsrs	r1, r1, #16
 8013ca4:	fb02 f202 	mul.w	r2, r2, r2
 8013ca8:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8013cac:	fb04 2004 	mla	r0, r4, r4, r2
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	b20c      	sxth	r4, r1
 8013cb4:	2c00      	cmp	r4, #0
 8013cb6:	da01      	bge.n	8013cbc <GUI_CalcColorDist+0x3c>
 8013cb8:	4249      	negs	r1, r1
 8013cba:	b20c      	sxth	r4, r1
 8013cbc:	b2a1      	uxth	r1, r4
 8013cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cc2:	fb01 0001 	mla	r0, r1, r1, r0
 8013cc6:	4770      	bx	lr
 8013cc8:	425b      	negs	r3, r3
 8013cca:	b21a      	sxth	r2, r3
 8013ccc:	e7e9      	b.n	8013ca2 <GUI_CalcColorDist+0x22>
 8013cce:	4252      	negs	r2, r2
 8013cd0:	b214      	sxth	r4, r2
 8013cd2:	e7dd      	b.n	8013c90 <GUI_CalcColorDist+0x10>

08013cd4 <GUI_GetClientRect>:
 8013cd4:	b108      	cbz	r0, 8013cda <GUI_GetClientRect+0x6>
 8013cd6:	f00d bb27 	b.w	8021328 <WM_GetClientRect>
 8013cda:	4770      	bx	lr

08013cdc <GUI_GetBkColor>:
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	f004 fc61 	bl	80185a4 <GUI_Lock>
 8013ce2:	f006 ffdd 	bl	801aca0 <LCD_GetBkColorIndex>
 8013ce6:	f006 fd63 	bl	801a7b0 <LCD_Index2Color>
 8013cea:	4604      	mov	r4, r0
 8013cec:	f004 fc50 	bl	8018590 <GUI_Unlock>
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	bd10      	pop	{r4, pc}

08013cf4 <GUI_GetColor>:
 8013cf4:	b510      	push	{r4, lr}
 8013cf6:	f004 fc55 	bl	80185a4 <GUI_Lock>
 8013cfa:	f006 ffd9 	bl	801acb0 <LCD_GetColorIndex>
 8013cfe:	f006 fd57 	bl	801a7b0 <LCD_Index2Color>
 8013d02:	4604      	mov	r4, r0
 8013d04:	f004 fc44 	bl	8018590 <GUI_Unlock>
 8013d08:	4620      	mov	r0, r4
 8013d0a:	bd10      	pop	{r4, pc}

08013d0c <GUI_GetDrawMode>:
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	f004 fc49 	bl	80185a4 <GUI_Lock>
 8013d12:	4b03      	ldr	r3, [pc, #12]	; (8013d20 <GUI_GetDrawMode+0x14>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	7c1c      	ldrb	r4, [r3, #16]
 8013d18:	f004 fc3a 	bl	8018590 <GUI_Unlock>
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	bd10      	pop	{r4, pc}
 8013d20:	20000018 	.word	0x20000018

08013d24 <GUI_GetFontSizeY>:
 8013d24:	b510      	push	{r4, lr}
 8013d26:	f004 fc3d 	bl	80185a4 <GUI_Lock>
 8013d2a:	4b05      	ldr	r3, [pc, #20]	; (8013d40 <GUI_GetFontSizeY+0x1c>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	69db      	ldr	r3, [r3, #28]
 8013d30:	7e1c      	ldrb	r4, [r3, #24]
 8013d32:	7edb      	ldrb	r3, [r3, #27]
 8013d34:	fb14 f403 	smulbb	r4, r4, r3
 8013d38:	f004 fc2a 	bl	8018590 <GUI_Unlock>
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	bd10      	pop	{r4, pc}
 8013d40:	20000018 	.word	0x20000018

08013d44 <GUI_GetOrg>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4605      	mov	r5, r0
 8013d48:	460c      	mov	r4, r1
 8013d4a:	f004 fc2b 	bl	80185a4 <GUI_Lock>
 8013d4e:	4a06      	ldr	r2, [pc, #24]	; (8013d68 <GUI_GetOrg+0x24>)
 8013d50:	4b06      	ldr	r3, [pc, #24]	; (8013d6c <GUI_GetOrg+0x28>)
 8013d52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d5a:	602a      	str	r2, [r5, #0]
 8013d5c:	6023      	str	r3, [r4, #0]
 8013d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d62:	f004 bc15 	b.w	8018590 <GUI_Unlock>
 8013d66:	bf00      	nop
 8013d68:	200467a8 	.word	0x200467a8
 8013d6c:	20046798 	.word	0x20046798

08013d70 <GUI_GetVersionString>:
 8013d70:	4b04      	ldr	r3, [pc, #16]	; (8013d84 <GUI_GetVersionString+0x14>)
 8013d72:	2234      	movs	r2, #52	; 0x34
 8013d74:	2035      	movs	r0, #53	; 0x35
 8013d76:	2161      	movs	r1, #97	; 0x61
 8013d78:	709a      	strb	r2, [r3, #2]
 8013d7a:	7018      	strb	r0, [r3, #0]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	7119      	strb	r1, [r3, #4]
 8013d80:	70da      	strb	r2, [r3, #3]
 8013d82:	4770      	bx	lr
 8013d84:	20000000 	.word	0x20000000

08013d88 <GUI_Index2Color>:
 8013d88:	b510      	push	{r4, lr}
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	f004 fc0a 	bl	80185a4 <GUI_Lock>
 8013d90:	4620      	mov	r0, r4
 8013d92:	f006 fd0d 	bl	801a7b0 <LCD_Index2Color>
 8013d96:	4604      	mov	r4, r0
 8013d98:	f004 fbfa 	bl	8018590 <GUI_Unlock>
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	bd10      	pop	{r4, pc}

08013da0 <GUI_MergeRect>:
 8013da0:	b358      	cbz	r0, 8013dfa <GUI_MergeRect+0x5a>
 8013da2:	b311      	cbz	r1, 8013dea <GUI_MergeRect+0x4a>
 8013da4:	b30a      	cbz	r2, 8013dea <GUI_MergeRect+0x4a>
 8013da6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dac:	f9b2 5000 	ldrsh.w	r5, [r2]
 8013db0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8013db4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8013db8:	429d      	cmp	r5, r3
 8013dba:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8013dbe:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013dc2:	bfa8      	it	ge
 8013dc4:	461d      	movge	r5, r3
 8013dc6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8013dca:	4574      	cmp	r4, lr
 8013dcc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013dd0:	bfa8      	it	ge
 8013dd2:	4674      	movge	r4, lr
 8013dd4:	42ba      	cmp	r2, r7
 8013dd6:	8005      	strh	r5, [r0, #0]
 8013dd8:	bfb8      	it	lt
 8013dda:	463a      	movlt	r2, r7
 8013ddc:	42b3      	cmp	r3, r6
 8013dde:	8044      	strh	r4, [r0, #2]
 8013de0:	bfb8      	it	lt
 8013de2:	4633      	movlt	r3, r6
 8013de4:	8082      	strh	r2, [r0, #4]
 8013de6:	80c3      	strh	r3, [r0, #6]
 8013de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dea:	2900      	cmp	r1, #0
 8013dec:	bf08      	it	eq
 8013dee:	4611      	moveq	r1, r2
 8013df0:	680a      	ldr	r2, [r1, #0]
 8013df2:	684b      	ldr	r3, [r1, #4]
 8013df4:	6002      	str	r2, [r0, #0]
 8013df6:	6043      	str	r3, [r0, #4]
 8013df8:	4770      	bx	lr
 8013dfa:	4770      	bx	lr

08013dfc <GUI_MoveRect>:
 8013dfc:	b178      	cbz	r0, 8013e1e <GUI_MoveRect+0x22>
 8013dfe:	b289      	uxth	r1, r1
 8013e00:	88c3      	ldrh	r3, [r0, #6]
 8013e02:	b292      	uxth	r2, r2
 8013e04:	b470      	push	{r4, r5, r6}
 8013e06:	8806      	ldrh	r6, [r0, #0]
 8013e08:	8844      	ldrh	r4, [r0, #2]
 8013e0a:	8885      	ldrh	r5, [r0, #4]
 8013e0c:	440e      	add	r6, r1
 8013e0e:	4414      	add	r4, r2
 8013e10:	441a      	add	r2, r3
 8013e12:	4429      	add	r1, r5
 8013e14:	8006      	strh	r6, [r0, #0]
 8013e16:	8044      	strh	r4, [r0, #2]
 8013e18:	8081      	strh	r1, [r0, #4]
 8013e1a:	80c2      	strh	r2, [r0, #6]
 8013e1c:	bc70      	pop	{r4, r5, r6}
 8013e1e:	4770      	bx	lr

08013e20 <GUI_Exec>:
 8013e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e24:	2500      	movs	r5, #0
 8013e26:	4f12      	ldr	r7, [pc, #72]	; (8013e70 <GUI_Exec+0x50>)
 8013e28:	4e12      	ldr	r6, [pc, #72]	; (8013e74 <GUI_Exec+0x54>)
 8013e2a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8013e78 <GUI_Exec+0x58>
 8013e2e:	683c      	ldr	r4, [r7, #0]
 8013e30:	b11c      	cbz	r4, 8013e3a <GUI_Exec+0x1a>
 8013e32:	47a0      	blx	r4
 8013e34:	1c04      	adds	r4, r0, #0
 8013e36:	bf18      	it	ne
 8013e38:	2401      	movne	r4, #1
 8013e3a:	f00c ffb3 	bl	8020da4 <WM_Exec>
 8013e3e:	6833      	ldr	r3, [r6, #0]
 8013e40:	2800      	cmp	r0, #0
 8013e42:	bf18      	it	ne
 8013e44:	2401      	movne	r4, #1
 8013e46:	b14b      	cbz	r3, 8013e5c <GUI_Exec+0x3c>
 8013e48:	4798      	blx	r3
 8013e4a:	b138      	cbz	r0, 8013e5c <GUI_Exec+0x3c>
 8013e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e50:	b113      	cbz	r3, 8013e58 <GUI_Exec+0x38>
 8013e52:	2401      	movs	r4, #1
 8013e54:	4798      	blx	r3
 8013e56:	b13c      	cbz	r4, 8013e68 <GUI_Exec+0x48>
 8013e58:	2501      	movs	r5, #1
 8013e5a:	e7e8      	b.n	8013e2e <GUI_Exec+0xe>
 8013e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d1f7      	bne.n	8013e54 <GUI_Exec+0x34>
 8013e64:	2c00      	cmp	r4, #0
 8013e66:	d1f7      	bne.n	8013e58 <GUI_Exec+0x38>
 8013e68:	4628      	mov	r0, r5
 8013e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6e:	bf00      	nop
 8013e70:	200467a4 	.word	0x200467a4
 8013e74:	200467cc 	.word	0x200467cc
 8013e78:	200467c4 	.word	0x200467c4

08013e7c <GUI_GetBitmapPixelIndex>:
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	d050      	beq.n	8013f22 <GUI_GetBitmapPixelIndex+0xa6>
 8013e80:	88c3      	ldrh	r3, [r0, #6]
 8013e82:	3b01      	subs	r3, #1
 8013e84:	b510      	push	{r4, lr}
 8013e86:	8884      	ldrh	r4, [r0, #4]
 8013e88:	6880      	ldr	r0, [r0, #8]
 8013e8a:	2b1f      	cmp	r3, #31
 8013e8c:	d847      	bhi.n	8013f1e <GUI_GetBitmapPixelIndex+0xa2>
 8013e8e:	e8df f003 	tbb	[pc, r3]
 8013e92:	2316      	.short	0x2316
 8013e94:	46463146 	.word	0x46463146
 8013e98:	46463c46 	.word	0x46463c46
 8013e9c:	46464646 	.word	0x46464646
 8013ea0:	46464046 	.word	0x46464046
 8013ea4:	46464646 	.word	0x46464646
 8013ea8:	46464646 	.word	0x46464646
 8013eac:	46464646 	.word	0x46464646
 8013eb0:	1046      	.short	0x1046
 8013eb2:	10a3      	asrs	r3, r4, #2
 8013eb4:	fb02 1103 	mla	r1, r2, r3, r1
 8013eb8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8013ebc:	bd10      	pop	{r4, pc}
 8013ebe:	fb02 f204 	mul.w	r2, r2, r4
 8013ec2:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 8013ec6:	43c8      	mvns	r0, r1
 8013ec8:	5ca3      	ldrb	r3, [r4, r2]
 8013eca:	f000 0007 	and.w	r0, r0, #7
 8013ece:	fa23 f000 	lsr.w	r0, r3, r0
 8013ed2:	f000 0001 	and.w	r0, r0, #1
 8013ed6:	bd10      	pop	{r4, pc}
 8013ed8:	fb02 f204 	mul.w	r2, r2, r4
 8013edc:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 8013ee0:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 8013ee4:	5ca3      	ldrb	r3, [r4, r2]
 8013ee6:	f000 0006 	and.w	r0, r0, #6
 8013eea:	fa23 f000 	lsr.w	r0, r3, r0
 8013eee:	f000 0003 	and.w	r0, r0, #3
 8013ef2:	bd10      	pop	{r4, pc}
 8013ef4:	fb02 f204 	mul.w	r2, r2, r4
 8013ef8:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 8013efc:	07cb      	lsls	r3, r1, #31
 8013efe:	5ca0      	ldrb	r0, [r4, r2]
 8013f00:	bf4c      	ite	mi
 8013f02:	f000 000f 	andmi.w	r0, r0, #15
 8013f06:	0900      	lsrpl	r0, r0, #4
 8013f08:	bd10      	pop	{r4, pc}
 8013f0a:	fb02 0404 	mla	r4, r2, r4, r0
 8013f0e:	5c60      	ldrb	r0, [r4, r1]
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	1063      	asrs	r3, r4, #1
 8013f14:	fb02 1103 	mla	r1, r2, r3, r1
 8013f18:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8013f1c:	bd10      	pop	{r4, pc}
 8013f1e:	2000      	movs	r0, #0
 8013f20:	bd10      	pop	{r4, pc}
 8013f22:	4770      	bx	lr

08013f24 <GUI_GotoX>:
 8013f24:	b510      	push	{r4, lr}
 8013f26:	4604      	mov	r4, r0
 8013f28:	f004 fb3c 	bl	80185a4 <GUI_Lock>
 8013f2c:	4b03      	ldr	r3, [pc, #12]	; (8013f3c <GUI_GotoX+0x18>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	845c      	strh	r4, [r3, #34]	; 0x22
 8013f32:	f004 fb2d 	bl	8018590 <GUI_Unlock>
 8013f36:	2000      	movs	r0, #0
 8013f38:	bd10      	pop	{r4, pc}
 8013f3a:	bf00      	nop
 8013f3c:	20000018 	.word	0x20000018

08013f40 <GUI_GotoXY>:
 8013f40:	b538      	push	{r3, r4, r5, lr}
 8013f42:	4605      	mov	r5, r0
 8013f44:	460c      	mov	r4, r1
 8013f46:	f004 fb2d 	bl	80185a4 <GUI_Lock>
 8013f4a:	4b04      	ldr	r3, [pc, #16]	; (8013f5c <GUI_GotoXY+0x1c>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	845d      	strh	r5, [r3, #34]	; 0x22
 8013f50:	849c      	strh	r4, [r3, #36]	; 0x24
 8013f52:	f004 fb1d 	bl	8018590 <GUI_Unlock>
 8013f56:	2000      	movs	r0, #0
 8013f58:	bd38      	pop	{r3, r4, r5, pc}
 8013f5a:	bf00      	nop
 8013f5c:	20000018 	.word	0x20000018

08013f60 <GUI_GetPenSize>:
 8013f60:	b510      	push	{r4, lr}
 8013f62:	f004 fb1f 	bl	80185a4 <GUI_Lock>
 8013f66:	4b03      	ldr	r3, [pc, #12]	; (8013f74 <GUI_GetPenSize+0x14>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	7e1c      	ldrb	r4, [r3, #24]
 8013f6c:	f004 fb10 	bl	8018590 <GUI_Unlock>
 8013f70:	4620      	mov	r0, r4
 8013f72:	bd10      	pop	{r4, pc}
 8013f74:	20000018 	.word	0x20000018

08013f78 <GUI_SetPenSize>:
 8013f78:	b538      	push	{r3, r4, r5, lr}
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	f004 fb12 	bl	80185a4 <GUI_Lock>
 8013f80:	4b03      	ldr	r3, [pc, #12]	; (8013f90 <GUI_SetPenSize+0x18>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	7e1c      	ldrb	r4, [r3, #24]
 8013f86:	761d      	strb	r5, [r3, #24]
 8013f88:	f004 fb02 	bl	8018590 <GUI_Unlock>
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	bd38      	pop	{r3, r4, r5, pc}
 8013f90:	20000018 	.word	0x20000018

08013f94 <GUI_SetPenShape>:
 8013f94:	b538      	push	{r3, r4, r5, lr}
 8013f96:	4605      	mov	r5, r0
 8013f98:	f004 fb04 	bl	80185a4 <GUI_Lock>
 8013f9c:	4b03      	ldr	r3, [pc, #12]	; (8013fac <GUI_SetPenShape+0x18>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	7e5c      	ldrb	r4, [r3, #25]
 8013fa2:	765d      	strb	r5, [r3, #25]
 8013fa4:	f004 faf4 	bl	8018590 <GUI_Unlock>
 8013fa8:	4620      	mov	r0, r4
 8013faa:	bd38      	pop	{r3, r4, r5, pc}
 8013fac:	20000018 	.word	0x20000018

08013fb0 <GUI_RectsIntersect>:
 8013fb0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013fb4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	dc14      	bgt.n	8013fe6 <GUI_RectsIntersect+0x36>
 8013fbc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8013fc0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	dc0e      	bgt.n	8013fe6 <GUI_RectsIntersect+0x36>
 8013fc8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013fcc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	dc08      	bgt.n	8013fe6 <GUI_RectsIntersect+0x36>
 8013fd4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8013fd8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8013fdc:	4283      	cmp	r3, r0
 8013fde:	bfcc      	ite	gt
 8013fe0:	2000      	movgt	r0, #0
 8013fe2:	2001      	movle	r0, #1
 8013fe4:	4770      	bx	lr
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	4770      	bx	lr
 8013fea:	bf00      	nop

08013fec <GUI_SaveContext_W>:
 8013fec:	b508      	push	{r3, lr}
 8013fee:	4b03      	ldr	r3, [pc, #12]	; (8013ffc <GUI_SaveContext_W+0x10>)
 8013ff0:	2274      	movs	r2, #116	; 0x74
 8013ff2:	6819      	ldr	r1, [r3, #0]
 8013ff4:	f011 f9d3 	bl	802539e <memcpy>
 8013ff8:	bd08      	pop	{r3, pc}
 8013ffa:	bf00      	nop
 8013ffc:	20000018 	.word	0x20000018

08014000 <GUI_RestoreContext>:
 8014000:	b508      	push	{r3, lr}
 8014002:	4b03      	ldr	r3, [pc, #12]	; (8014010 <GUI_RestoreContext+0x10>)
 8014004:	4601      	mov	r1, r0
 8014006:	2274      	movs	r2, #116	; 0x74
 8014008:	6818      	ldr	r0, [r3, #0]
 801400a:	f011 f9c8 	bl	802539e <memcpy>
 801400e:	bd08      	pop	{r3, pc}
 8014010:	20000018 	.word	0x20000018

08014014 <GUI_SelectLCD>:
 8014014:	b508      	push	{r3, lr}
 8014016:	f004 fac5 	bl	80185a4 <GUI_Lock>
 801401a:	f007 fd3d 	bl	801ba98 <LCD_SelectLCD>
 801401e:	f007 fe11 	bl	801bc44 <LCD_UpdateColorIndices>
 8014022:	f00d f80b 	bl	802103c <WM_Activate>
 8014026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801402a:	f004 bab1 	b.w	8018590 <GUI_Unlock>
 801402e:	bf00      	nop

08014030 <GUI_SetBkColor>:
 8014030:	b510      	push	{r4, lr}
 8014032:	4604      	mov	r4, r0
 8014034:	f004 fab6 	bl	80185a4 <GUI_Lock>
 8014038:	4620      	mov	r0, r4
 801403a:	f006 fbdf 	bl	801a7fc <LCD_SetBkColor>
 801403e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014042:	f004 baa5 	b.w	8018590 <GUI_Unlock>
 8014046:	bf00      	nop

08014048 <GUI_SetColor>:
 8014048:	b510      	push	{r4, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	f004 faaa 	bl	80185a4 <GUI_Lock>
 8014050:	4620      	mov	r0, r4
 8014052:	f006 fbd9 	bl	801a808 <LCD_SetColor>
 8014056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801405a:	f004 ba99 	b.w	8018590 <GUI_Unlock>
 801405e:	bf00      	nop

08014060 <GL_SetDefault>:
 8014060:	4b20      	ldr	r3, [pc, #128]	; (80140e4 <GL_SetDefault+0x84>)
 8014062:	b570      	push	{r4, r5, r6, lr}
 8014064:	681e      	ldr	r6, [r3, #0]
 8014066:	f004 fa9d 	bl	80185a4 <GUI_Lock>
 801406a:	4c1f      	ldr	r4, [pc, #124]	; (80140e8 <GL_SetDefault+0x88>)
 801406c:	2500      	movs	r5, #0
 801406e:	4630      	mov	r0, r6
 8014070:	f006 fbc4 	bl	801a7fc <LCD_SetBkColor>
 8014074:	f004 fa8c 	bl	8018590 <GUI_Unlock>
 8014078:	4b1c      	ldr	r3, [pc, #112]	; (80140ec <GL_SetDefault+0x8c>)
 801407a:	681e      	ldr	r6, [r3, #0]
 801407c:	f004 fa92 	bl	80185a4 <GUI_Lock>
 8014080:	4630      	mov	r0, r6
 8014082:	f006 fbc1 	bl	801a808 <LCD_SetColor>
 8014086:	f004 fa83 	bl	8018590 <GUI_Unlock>
 801408a:	f004 fa8b 	bl	80185a4 <GUI_Lock>
 801408e:	2201      	movs	r2, #1
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	761a      	strb	r2, [r3, #24]
 8014094:	f004 fa7c 	bl	8018590 <GUI_Unlock>
 8014098:	f004 fa84 	bl	80185a4 <GUI_Lock>
 801409c:	6823      	ldr	r3, [r4, #0]
 801409e:	859d      	strh	r5, [r3, #44]	; 0x2c
 80140a0:	f004 fa76 	bl	8018590 <GUI_Unlock>
 80140a4:	f004 fa7e 	bl	80185a4 <GUI_Lock>
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	855d      	strh	r5, [r3, #42]	; 0x2a
 80140ac:	f004 fa70 	bl	8018590 <GUI_Unlock>
 80140b0:	f004 fa78 	bl	80185a4 <GUI_Lock>
 80140b4:	4628      	mov	r0, r5
 80140b6:	f005 ff8b 	bl	8019fd0 <LCD_SetDrawMode>
 80140ba:	f004 fa69 	bl	8018590 <GUI_Unlock>
 80140be:	4b0c      	ldr	r3, [pc, #48]	; (80140f0 <GL_SetDefault+0x90>)
 80140c0:	681d      	ldr	r5, [r3, #0]
 80140c2:	f004 fa6f 	bl	80185a4 <GUI_Lock>
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	b105      	cbz	r5, 80140cc <GL_SetDefault+0x6c>
 80140ca:	61dd      	str	r5, [r3, #28]
 80140cc:	f004 fa60 	bl	8018590 <GUI_Unlock>
 80140d0:	f004 fa68 	bl	80185a4 <GUI_Lock>
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	2200      	movs	r2, #0
 80140d8:	769a      	strb	r2, [r3, #26]
 80140da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140de:	f004 ba57 	b.w	8018590 <GUI_Unlock>
 80140e2:	bf00      	nop
 80140e4:	20000014 	.word	0x20000014
 80140e8:	20000018 	.word	0x20000018
 80140ec:	20000010 	.word	0x20000010
 80140f0:	2000000c 	.word	0x2000000c

080140f4 <GUI_SetDrawMode>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	4604      	mov	r4, r0
 80140f8:	f004 fa54 	bl	80185a4 <GUI_Lock>
 80140fc:	4620      	mov	r0, r4
 80140fe:	f005 ff67 	bl	8019fd0 <LCD_SetDrawMode>
 8014102:	4604      	mov	r4, r0
 8014104:	f004 fa44 	bl	8018590 <GUI_Unlock>
 8014108:	4620      	mov	r0, r4
 801410a:	bd10      	pop	{r4, pc}

0801410c <GUI_SetFont>:
 801410c:	b538      	push	{r3, r4, r5, lr}
 801410e:	4604      	mov	r4, r0
 8014110:	f004 fa48 	bl	80185a4 <GUI_Lock>
 8014114:	4b04      	ldr	r3, [pc, #16]	; (8014128 <GUI_SetFont+0x1c>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	69dd      	ldr	r5, [r3, #28]
 801411a:	b104      	cbz	r4, 801411e <GUI_SetFont+0x12>
 801411c:	61dc      	str	r4, [r3, #28]
 801411e:	f004 fa37 	bl	8018590 <GUI_Unlock>
 8014122:	4628      	mov	r0, r5
 8014124:	bd38      	pop	{r3, r4, r5, pc}
 8014126:	bf00      	nop
 8014128:	20000018 	.word	0x20000018

0801412c <GUI_SetOrg>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	4605      	mov	r5, r0
 8014130:	460c      	mov	r4, r1
 8014132:	f004 fa37 	bl	80185a4 <GUI_Lock>
 8014136:	4a09      	ldr	r2, [pc, #36]	; (801415c <GUI_SetOrg+0x30>)
 8014138:	4b09      	ldr	r3, [pc, #36]	; (8014160 <GUI_SetOrg+0x34>)
 801413a:	4629      	mov	r1, r5
 801413c:	6810      	ldr	r0, [r2, #0]
 801413e:	4622      	mov	r2, r4
 8014140:	4e08      	ldr	r6, [pc, #32]	; (8014164 <GUI_SetOrg+0x38>)
 8014142:	7c40      	ldrb	r0, [r0, #17]
 8014144:	8035      	strh	r5, [r6, #0]
 8014146:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801414a:	4d07      	ldr	r5, [pc, #28]	; (8014168 <GUI_SetOrg+0x3c>)
 801414c:	68c3      	ldr	r3, [r0, #12]
 801414e:	802c      	strh	r4, [r5, #0]
 8014150:	6a1b      	ldr	r3, [r3, #32]
 8014152:	4798      	blx	r3
 8014154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014158:	f004 ba1a 	b.w	8018590 <GUI_Unlock>
 801415c:	20000018 	.word	0x20000018
 8014160:	200467d0 	.word	0x200467d0
 8014164:	200467a8 	.word	0x200467a8
 8014168:	20046798 	.word	0x20046798

0801416c <GUI_SetTextAlign>:
 801416c:	b538      	push	{r3, r4, r5, lr}
 801416e:	4605      	mov	r5, r0
 8014170:	f004 fa18 	bl	80185a4 <GUI_Lock>
 8014174:	4b04      	ldr	r3, [pc, #16]	; (8014188 <GUI_SetTextAlign+0x1c>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 801417c:	859d      	strh	r5, [r3, #44]	; 0x2c
 801417e:	f004 fa07 	bl	8018590 <GUI_Unlock>
 8014182:	4620      	mov	r0, r4
 8014184:	bd38      	pop	{r3, r4, r5, pc}
 8014186:	bf00      	nop
 8014188:	20000018 	.word	0x20000018

0801418c <GUI_SetTextMode>:
 801418c:	b538      	push	{r3, r4, r5, lr}
 801418e:	4605      	mov	r5, r0
 8014190:	f004 fa08 	bl	80185a4 <GUI_Lock>
 8014194:	4b04      	ldr	r3, [pc, #16]	; (80141a8 <GUI_SetTextMode+0x1c>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 801419c:	855d      	strh	r5, [r3, #42]	; 0x2a
 801419e:	f004 f9f7 	bl	8018590 <GUI_Unlock>
 80141a2:	4620      	mov	r0, r4
 80141a4:	bd38      	pop	{r3, r4, r5, pc}
 80141a6:	bf00      	nop
 80141a8:	20000018 	.word	0x20000018

080141ac <GUI_SetTextStyle>:
 80141ac:	b570      	push	{r4, r5, r6, lr}
 80141ae:	4604      	mov	r4, r0
 80141b0:	f004 f9f8 	bl	80185a4 <GUI_Lock>
 80141b4:	4a08      	ldr	r2, [pc, #32]	; (80141d8 <GUI_SetTextStyle+0x2c>)
 80141b6:	2c00      	cmp	r4, #0
 80141b8:	4b08      	ldr	r3, [pc, #32]	; (80141dc <GUI_SetTextStyle+0x30>)
 80141ba:	6812      	ldr	r2, [r2, #0]
 80141bc:	bf08      	it	eq
 80141be:	2300      	moveq	r3, #0
 80141c0:	4907      	ldr	r1, [pc, #28]	; (80141e0 <GUI_SetTextStyle+0x34>)
 80141c2:	7c95      	ldrb	r5, [r2, #18]
 80141c4:	4807      	ldr	r0, [pc, #28]	; (80141e4 <GUI_SetTextStyle+0x38>)
 80141c6:	4e08      	ldr	r6, [pc, #32]	; (80141e8 <GUI_SetTextStyle+0x3c>)
 80141c8:	7494      	strb	r4, [r2, #18]
 80141ca:	6008      	str	r0, [r1, #0]
 80141cc:	6033      	str	r3, [r6, #0]
 80141ce:	f004 f9df 	bl	8018590 <GUI_Unlock>
 80141d2:	4628      	mov	r0, r5
 80141d4:	bd70      	pop	{r4, r5, r6, pc}
 80141d6:	bf00      	nop
 80141d8:	20000018 	.word	0x20000018
 80141dc:	08013a55 	.word	0x08013a55
 80141e0:	200467ac 	.word	0x200467ac
 80141e4:	080139a1 	.word	0x080139a1
 80141e8:	200467a0 	.word	0x200467a0

080141ec <_InitContext>:
 80141ec:	b538      	push	{r3, r4, r5, lr}
 80141ee:	4d19      	ldr	r5, [pc, #100]	; (8014254 <_InitContext+0x68>)
 80141f0:	4604      	mov	r4, r0
 80141f2:	4a19      	ldr	r2, [pc, #100]	; (8014258 <_InitContext+0x6c>)
 80141f4:	f100 0108 	add.w	r1, r0, #8
 80141f8:	692b      	ldr	r3, [r5, #16]
 80141fa:	6702      	str	r2, [r0, #112]	; 0x70
 80141fc:	1d1a      	adds	r2, r3, #4
 80141fe:	f103 0008 	add.w	r0, r3, #8
 8014202:	639b      	str	r3, [r3, #56]	; 0x38
 8014204:	63da      	str	r2, [r3, #60]	; 0x3c
 8014206:	641b      	str	r3, [r3, #64]	; 0x40
 8014208:	4a14      	ldr	r2, [pc, #80]	; (801425c <_InitContext+0x70>)
 801420a:	6160      	str	r0, [r4, #20]
 801420c:	7c5b      	ldrb	r3, [r3, #17]
 801420e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014212:	68c3      	ldr	r3, [r0, #12]
 8014214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014216:	4798      	blx	r3
 8014218:	692b      	ldr	r3, [r5, #16]
 801421a:	2201      	movs	r2, #1
 801421c:	6869      	ldr	r1, [r5, #4]
 801421e:	3308      	adds	r3, #8
 8014220:	480f      	ldr	r0, [pc, #60]	; (8014260 <_InitContext+0x74>)
 8014222:	61e1      	str	r1, [r4, #28]
 8014224:	6163      	str	r3, [r4, #20]
 8014226:	7622      	strb	r2, [r4, #24]
 8014228:	76e2      	strb	r2, [r4, #27]
 801422a:	6660      	str	r0, [r4, #100]	; 0x64
 801422c:	f00d f896 	bl	802135c <WM_GetDesktopWindow>
 8014230:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8014234:	2203      	movs	r2, #3
 8014236:	64a0      	str	r0, [r4, #72]	; 0x48
 8014238:	6323      	str	r3, [r4, #48]	; 0x30
 801423a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 801423e:	6363      	str	r3, [r4, #52]	; 0x34
 8014240:	68e8      	ldr	r0, [r5, #12]
 8014242:	f006 fadb 	bl	801a7fc <LCD_SetBkColor>
 8014246:	68a8      	ldr	r0, [r5, #8]
 8014248:	f006 fade 	bl	801a808 <LCD_SetColor>
 801424c:	4b05      	ldr	r3, [pc, #20]	; (8014264 <_InitContext+0x78>)
 801424e:	4a06      	ldr	r2, [pc, #24]	; (8014268 <_InitContext+0x7c>)
 8014250:	601a      	str	r2, [r3, #0]
 8014252:	bd38      	pop	{r3, r4, r5, pc}
 8014254:	20000008 	.word	0x20000008
 8014258:	20000270 	.word	0x20000270
 801425c:	200467d0 	.word	0x200467d0
 8014260:	080272bc 	.word	0x080272bc
 8014264:	200467c8 	.word	0x200467c8
 8014268:	080273c0 	.word	0x080273c0

0801426c <_OnExit>:
 801426c:	b570      	push	{r4, r5, r6, lr}
 801426e:	2400      	movs	r4, #0
 8014270:	4d09      	ldr	r5, [pc, #36]	; (8014298 <_OnExit+0x2c>)
 8014272:	4e0a      	ldr	r6, [pc, #40]	; (801429c <_OnExit+0x30>)
 8014274:	2274      	movs	r2, #116	; 0x74
 8014276:	4621      	mov	r1, r4
 8014278:	4628      	mov	r0, r5
 801427a:	6833      	ldr	r3, [r6, #0]
 801427c:	67ec      	str	r4, [r5, #124]	; 0x7c
 801427e:	4798      	blx	r3
 8014280:	6833      	ldr	r3, [r6, #0]
 8014282:	4621      	mov	r1, r4
 8014284:	2208      	movs	r2, #8
 8014286:	4806      	ldr	r0, [pc, #24]	; (80142a0 <_OnExit+0x34>)
 8014288:	4798      	blx	r3
 801428a:	4906      	ldr	r1, [pc, #24]	; (80142a4 <_OnExit+0x38>)
 801428c:	4a06      	ldr	r2, [pc, #24]	; (80142a8 <_OnExit+0x3c>)
 801428e:	4b07      	ldr	r3, [pc, #28]	; (80142ac <_OnExit+0x40>)
 8014290:	610d      	str	r5, [r1, #16]
 8014292:	7014      	strb	r4, [r2, #0]
 8014294:	601c      	str	r4, [r3, #0]
 8014296:	bd70      	pop	{r4, r5, r6, pc}
 8014298:	200001f0 	.word	0x200001f0
 801429c:	20000050 	.word	0x20000050
 80142a0:	200467d0 	.word	0x200467d0
 80142a4:	20000008 	.word	0x20000008
 80142a8:	200467b8 	.word	0x200467b8
 80142ac:	20046794 	.word	0x20046794

080142b0 <GUI_Clear>:
 80142b0:	2100      	movs	r1, #0
 80142b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b6:	4608      	mov	r0, r1
 80142b8:	b082      	sub	sp, #8
 80142ba:	f7ff fe41 	bl	8013f40 <GUI_GotoXY>
 80142be:	4f18      	ldr	r7, [pc, #96]	; (8014320 <GUI_Clear+0x70>)
 80142c0:	f004 f970 	bl	80185a4 <GUI_Lock>
 80142c4:	2004      	movs	r0, #4
 80142c6:	f005 fe83 	bl	8019fd0 <LCD_SetDrawMode>
 80142ca:	4b16      	ldr	r3, [pc, #88]	; (8014324 <GUI_Clear+0x74>)
 80142cc:	f643 76ff 	movw	r6, #16383	; 0x3fff
 80142d0:	463d      	mov	r5, r7
 80142d2:	691b      	ldr	r3, [r3, #16]
 80142d4:	4680      	mov	r8, r0
 80142d6:	4634      	mov	r4, r6
 80142d8:	4668      	mov	r0, sp
 80142da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142de:	4417      	add	r7, r2
 80142e0:	4416      	add	r6, r2
 80142e2:	441d      	add	r5, r3
 80142e4:	441c      	add	r4, r3
 80142e6:	f8ad 7000 	strh.w	r7, [sp]
 80142ea:	f8ad 6004 	strh.w	r6, [sp, #4]
 80142ee:	f8ad 5002 	strh.w	r5, [sp, #2]
 80142f2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80142f6:	f00c fc2d 	bl	8020b54 <WM__InitIVRSearch>
 80142fa:	b148      	cbz	r0, 8014310 <GUI_Clear+0x60>
 80142fc:	4623      	mov	r3, r4
 80142fe:	4632      	mov	r2, r6
 8014300:	4629      	mov	r1, r5
 8014302:	4638      	mov	r0, r7
 8014304:	f005 feec 	bl	801a0e0 <LCD_FillRect>
 8014308:	f00c fafa 	bl	8020900 <WM__GetNextIVR>
 801430c:	2800      	cmp	r0, #0
 801430e:	d1f5      	bne.n	80142fc <GUI_Clear+0x4c>
 8014310:	4640      	mov	r0, r8
 8014312:	f005 fe5d 	bl	8019fd0 <LCD_SetDrawMode>
 8014316:	f004 f93b 	bl	8018590 <GUI_Unlock>
 801431a:	b002      	add	sp, #8
 801431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014320:	ffffc001 	.word	0xffffc001
 8014324:	20000008 	.word	0x20000008

08014328 <GUI__Config>:
 8014328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432a:	4e1c      	ldr	r6, [pc, #112]	; (801439c <GUI__Config+0x74>)
 801432c:	b085      	sub	sp, #20
 801432e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8014330:	b10b      	cbz	r3, 8014336 <GUI__Config+0xe>
 8014332:	b005      	add	sp, #20
 8014334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014336:	4b1a      	ldr	r3, [pc, #104]	; (80143a0 <GUI__Config+0x78>)
 8014338:	466f      	mov	r7, sp
 801433a:	ad04      	add	r5, sp, #16
 801433c:	f04f 0e01 	mov.w	lr, #1
 8014340:	f106 0480 	add.w	r4, r6, #128	; 0x80
 8014344:	f8c6 e07c 	str.w	lr, [r6, #124]	; 0x7c
 8014348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801434a:	c707      	stmia	r7!, {r0, r1, r2}
 801434c:	0c19      	lsrs	r1, r3, #16
 801434e:	f815 2d10 	ldrb.w	r2, [r5, #-16]!
 8014352:	f827 3b02 	strh.w	r3, [r7], #2
 8014356:	7039      	strb	r1, [r7, #0]
 8014358:	f804 2b01 	strb.w	r2, [r4], #1
 801435c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8014360:	2a00      	cmp	r2, #0
 8014362:	d1f9      	bne.n	8014358 <GUI__Config+0x30>
 8014364:	f7ff fd04 	bl	8013d70 <GUI_GetVersionString>
 8014368:	4623      	mov	r3, r4
 801436a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801436e:	4619      	mov	r1, r3
 8014370:	f803 2b01 	strb.w	r2, [r3], #1
 8014374:	7802      	ldrb	r2, [r0, #0]
 8014376:	2a00      	cmp	r2, #0
 8014378:	d1f7      	bne.n	801436a <GUI__Config+0x42>
 801437a:	704a      	strb	r2, [r1, #1]
 801437c:	f7ef fb96 	bl	8003aac <GUI_X_Config>
 8014380:	f004 f95e 	bl	8018640 <GUITASK_Init>
 8014384:	f7f0 f9f2 	bl	800476c <LCD_X_Config>
 8014388:	4b06      	ldr	r3, [pc, #24]	; (80143a4 <GUI__Config+0x7c>)
 801438a:	4807      	ldr	r0, [pc, #28]	; (80143a8 <GUI__Config+0x80>)
 801438c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
 8014390:	b005      	add	sp, #20
 8014392:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014396:	f000 b8cf 	b.w	8014538 <GUI__RegisterExit>
 801439a:	bf00      	nop
 801439c:	200001f0 	.word	0x200001f0
 80143a0:	080272c4 	.word	0x080272c4
 80143a4:	0801426d 	.word	0x0801426d
 80143a8:	20000284 	.word	0x20000284

080143ac <GUI_Init>:
 80143ac:	b590      	push	{r4, r7, lr}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4a54      	ldr	r2, [pc, #336]	; (8014504 <GUI_Init+0x158>)
 80143b4:	4b53      	ldr	r3, [pc, #332]	; (8014504 <GUI_Init+0x158>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	f023 0301 	bic.w	r3, r3, #1
 80143bc:	6013      	str	r3, [r2, #0]
 80143be:	4b52      	ldr	r3, [pc, #328]	; (8014508 <GUI_Init+0x15c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80143c6:	f240 4249 	movw	r2, #1097	; 0x449
 80143ca:	4293      	cmp	r3, r2
 80143cc:	bf0c      	ite	eq
 80143ce:	2301      	moveq	r3, #1
 80143d0:	2300      	movne	r3, #0
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	4b4c      	ldr	r3, [pc, #304]	; (8014508 <GUI_Init+0x15c>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80143dc:	f240 4151 	movw	r1, #1105	; 0x451
 80143e0:	428b      	cmp	r3, r1
 80143e2:	bf0c      	ite	eq
 80143e4:	2301      	moveq	r3, #1
 80143e6:	2300      	movne	r3, #0
 80143e8:	b2db      	uxtb	r3, r3
 80143ea:	4313      	orrs	r3, r2
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	4619      	mov	r1, r3
 80143f0:	4b45      	ldr	r3, [pc, #276]	; (8014508 <GUI_Init+0x15c>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80143f8:	f240 4252 	movw	r2, #1106	; 0x452
 80143fc:	4293      	cmp	r3, r2
 80143fe:	bf0c      	ite	eq
 8014400:	2301      	moveq	r3, #1
 8014402:	2300      	movne	r3, #0
 8014404:	b2db      	uxtb	r3, r3
 8014406:	430b      	orrs	r3, r1
 8014408:	2b00      	cmp	r3, #0
 801440a:	d010      	beq.n	801442e <GUI_Init+0x82>
 801440c:	4b3f      	ldr	r3, [pc, #252]	; (801450c <GUI_Init+0x160>)
 801440e:	2201      	movs	r2, #1
 8014410:	601a      	str	r2, [r3, #0]
 8014412:	bf00      	nop
 8014414:	4b3d      	ldr	r3, [pc, #244]	; (801450c <GUI_Init+0x160>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1fb      	bne.n	8014414 <GUI_Init+0x68>
 801441c:	4b3c      	ldr	r3, [pc, #240]	; (8014510 <GUI_Init+0x164>)
 801441e:	4a3d      	ldr	r2, [pc, #244]	; (8014514 <GUI_Init+0x168>)
 8014420:	601a      	str	r2, [r3, #0]
 8014422:	4b3b      	ldr	r3, [pc, #236]	; (8014510 <GUI_Init+0x164>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4a3c      	ldr	r2, [pc, #240]	; (8014518 <GUI_Init+0x16c>)
 8014428:	4293      	cmp	r3, r2
 801442a:	d018      	beq.n	801445e <GUI_Init+0xb2>
 801442c:	e7fe      	b.n	801442c <GUI_Init+0x80>
 801442e:	4b3b      	ldr	r3, [pc, #236]	; (801451c <GUI_Init+0x170>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014436:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801443a:	d110      	bne.n	801445e <GUI_Init+0xb2>
 801443c:	4b38      	ldr	r3, [pc, #224]	; (8014520 <GUI_Init+0x174>)
 801443e:	2201      	movs	r2, #1
 8014440:	601a      	str	r2, [r3, #0]
 8014442:	bf00      	nop
 8014444:	4b36      	ldr	r3, [pc, #216]	; (8014520 <GUI_Init+0x174>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1fb      	bne.n	8014444 <GUI_Init+0x98>
 801444c:	4b35      	ldr	r3, [pc, #212]	; (8014524 <GUI_Init+0x178>)
 801444e:	4a31      	ldr	r2, [pc, #196]	; (8014514 <GUI_Init+0x168>)
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	4b34      	ldr	r3, [pc, #208]	; (8014524 <GUI_Init+0x178>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	4a30      	ldr	r2, [pc, #192]	; (8014518 <GUI_Init+0x16c>)
 8014458:	4293      	cmp	r3, r2
 801445a:	d000      	beq.n	801445e <GUI_Init+0xb2>
 801445c:	e7fe      	b.n	801445c <GUI_Init+0xb0>
 801445e:	f7ff ff63 	bl	8014328 <GUI__Config>
 8014462:	4b31      	ldr	r3, [pc, #196]	; (8014528 <GUI_Init+0x17c>)
 8014464:	222e      	movs	r2, #46	; 0x2e
 8014466:	701a      	strb	r2, [r3, #0]
 8014468:	f7fa ff6c 	bl	800f344 <GUI_X_Init>
 801446c:	482f      	ldr	r0, [pc, #188]	; (801452c <GUI_Init+0x180>)
 801446e:	f7ff febd 	bl	80141ec <_InitContext>
 8014472:	f006 f907 	bl	801a684 <emWin_LCD_Init>
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	f006 fd72 	bl	801af60 <LCD_GetXSizeDisplay>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	bf0c      	ite	eq
 8014482:	2301      	moveq	r3, #1
 8014484:	2300      	movne	r3, #0
 8014486:	b2dc      	uxtb	r4, r3
 8014488:	f006 fd70 	bl	801af6c <LCD_GetYSizeDisplay>
 801448c:	4603      	mov	r3, r0
 801448e:	2b00      	cmp	r3, #0
 8014490:	bf0c      	ite	eq
 8014492:	2301      	moveq	r3, #1
 8014494:	2300      	movne	r3, #0
 8014496:	b2db      	uxtb	r3, r3
 8014498:	4323      	orrs	r3, r4
 801449a:	b2db      	uxtb	r3, r3
 801449c:	2b00      	cmp	r3, #0
 801449e:	d009      	beq.n	80144b4 <GUI_Init+0x108>
 80144a0:	f006 fd0a 	bl	801aeb8 <LCD_GetXSizeMax>
 80144a4:	4604      	mov	r4, r0
 80144a6:	f006 fd21 	bl	801aeec <LCD_GetYSizeMax>
 80144aa:	4603      	mov	r3, r0
 80144ac:	4619      	mov	r1, r3
 80144ae:	4620      	mov	r0, r4
 80144b0:	f006 fd50 	bl	801af54 <LCD_SetDisplaySize>
 80144b4:	2100      	movs	r1, #0
 80144b6:	2000      	movs	r0, #0
 80144b8:	f7ff fe38 	bl	801412c <GUI_SetOrg>
 80144bc:	f00c fe06 	bl	80210cc <WM_Init>
 80144c0:	f004 f8f8 	bl	80186b4 <GUITASK_CopyContext>
 80144c4:	4b1a      	ldr	r3, [pc, #104]	; (8014530 <GUI_Init+0x184>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d012      	beq.n	80144f2 <GUI_Init+0x146>
 80144cc:	e00d      	b.n	80144ea <GUI_Init+0x13e>
 80144ce:	4b18      	ldr	r3, [pc, #96]	; (8014530 <GUI_Init+0x184>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d003      	beq.n	80144e0 <GUI_Init+0x134>
 80144d8:	4b15      	ldr	r3, [pc, #84]	; (8014530 <GUI_Init+0x184>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	4798      	blx	r3
 80144e0:	4b13      	ldr	r3, [pc, #76]	; (8014530 <GUI_Init+0x184>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	4a12      	ldr	r2, [pc, #72]	; (8014530 <GUI_Init+0x184>)
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	4b11      	ldr	r3, [pc, #68]	; (8014530 <GUI_Init+0x184>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d1ed      	bne.n	80144ce <GUI_Init+0x122>
 80144f2:	4b10      	ldr	r3, [pc, #64]	; (8014534 <GUI_Init+0x188>)
 80144f4:	2201      	movs	r2, #1
 80144f6:	701a      	strb	r2, [r3, #0]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	4618      	mov	r0, r3
 80144fc:	370c      	adds	r7, #12
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd90      	pop	{r4, r7, pc}
 8014502:	bf00      	nop
 8014504:	e0002000 	.word	0xe0002000
 8014508:	e0042000 	.word	0xe0042000
 801450c:	40023008 	.word	0x40023008
 8014510:	40023000 	.word	0x40023000
 8014514:	f407a5c2 	.word	0xf407a5c2
 8014518:	b5e8b5cd 	.word	0xb5e8b5cd
 801451c:	5c001000 	.word	0x5c001000
 8014520:	58024c08 	.word	0x58024c08
 8014524:	58024c00 	.word	0x58024c00
 8014528:	20046788 	.word	0x20046788
 801452c:	200001f0 	.word	0x200001f0
 8014530:	20000268 	.word	0x20000268
 8014534:	200467b0 	.word	0x200467b0

08014538 <GUI__RegisterExit>:
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	4b06      	ldr	r3, [pc, #24]	; (801455c <GUI__RegisterExit+0x24>)
 8014542:	681a      	ldr	r2, [r3, #0]
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	605a      	str	r2, [r3, #4]
 8014548:	4a04      	ldr	r2, [pc, #16]	; (801455c <GUI__RegisterExit+0x24>)
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6013      	str	r3, [r2, #0]
 801454e:	bf00      	nop
 8014550:	370c      	adds	r7, #12
 8014552:	46bd      	mov	sp, r7
 8014554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop
 801455c:	20000264 	.word	0x20000264

08014560 <GUI_DCACHE_Clear>:
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	4b05      	ldr	r3, [pc, #20]	; (8014580 <GUI_DCACHE_Clear+0x20>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d003      	beq.n	8014578 <GUI_DCACHE_Clear+0x18>
 8014570:	4b03      	ldr	r3, [pc, #12]	; (8014580 <GUI_DCACHE_Clear+0x20>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	4798      	blx	r3
 8014578:	bf00      	nop
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	20046794 	.word	0x20046794

08014584 <GUI_DEVICE__GetpDevice>:
 8014584:	2801      	cmp	r0, #1
 8014586:	dc10      	bgt.n	80145aa <GUI_DEVICE__GetpDevice+0x26>
 8014588:	4b09      	ldr	r3, [pc, #36]	; (80145b0 <GUI_DEVICE__GetpDevice+0x2c>)
 801458a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801458e:	b168      	cbz	r0, 80145ac <GUI_DEVICE__GetpDevice+0x28>
 8014590:	68c3      	ldr	r3, [r0, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4299      	cmp	r1, r3
 8014596:	d104      	bne.n	80145a2 <GUI_DEVICE__GetpDevice+0x1e>
 8014598:	e009      	b.n	80145ae <GUI_DEVICE__GetpDevice+0x2a>
 801459a:	68c3      	ldr	r3, [r0, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	428b      	cmp	r3, r1
 80145a0:	d004      	beq.n	80145ac <GUI_DEVICE__GetpDevice+0x28>
 80145a2:	6800      	ldr	r0, [r0, #0]
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d1f8      	bne.n	801459a <GUI_DEVICE__GetpDevice+0x16>
 80145a8:	4770      	bx	lr
 80145aa:	2000      	movs	r0, #0
 80145ac:	4770      	bx	lr
 80145ae:	4770      	bx	lr
 80145b0:	200467d0 	.word	0x200467d0

080145b4 <GUI_DEVICE__GetpDriver>:
 80145b4:	2801      	cmp	r0, #1
 80145b6:	dc0e      	bgt.n	80145d6 <GUI_DEVICE__GetpDriver+0x22>
 80145b8:	4b08      	ldr	r3, [pc, #32]	; (80145dc <GUI_DEVICE__GetpDriver+0x28>)
 80145ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80145be:	b158      	cbz	r0, 80145d8 <GUI_DEVICE__GetpDriver+0x24>
 80145c0:	68c3      	ldr	r3, [r0, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	b91b      	cbnz	r3, 80145ce <GUI_DEVICE__GetpDriver+0x1a>
 80145c6:	e008      	b.n	80145da <GUI_DEVICE__GetpDriver+0x26>
 80145c8:	68c3      	ldr	r3, [r0, #12]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	b123      	cbz	r3, 80145d8 <GUI_DEVICE__GetpDriver+0x24>
 80145ce:	6800      	ldr	r0, [r0, #0]
 80145d0:	2800      	cmp	r0, #0
 80145d2:	d1f9      	bne.n	80145c8 <GUI_DEVICE__GetpDriver+0x14>
 80145d4:	4770      	bx	lr
 80145d6:	2000      	movs	r0, #0
 80145d8:	4770      	bx	lr
 80145da:	4770      	bx	lr
 80145dc:	200467d0 	.word	0x200467d0

080145e0 <GUI_DEVICE_Delete>:
 80145e0:	f7fe baa4 	b.w	8012b2c <GUI_ALLOC_FreeFixedBlock>

080145e4 <GUI_DEVICE_Create>:
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	dc17      	bgt.n	8014618 <GUI_DEVICE_Create+0x34>
 80145e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ec:	4607      	mov	r7, r0
 80145ee:	201c      	movs	r0, #28
 80145f0:	4690      	mov	r8, r2
 80145f2:	460d      	mov	r5, r1
 80145f4:	461e      	mov	r6, r3
 80145f6:	f7fe faa3 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80145fa:	4604      	mov	r4, r0
 80145fc:	b1d0      	cbz	r0, 8014634 <GUI_DEVICE_Create+0x50>
 80145fe:	b16d      	cbz	r5, 801461c <GUI_DEVICE_Create+0x38>
 8014600:	6105      	str	r5, [r0, #16]
 8014602:	2300      	movs	r3, #0
 8014604:	4620      	mov	r0, r4
 8014606:	61a6      	str	r6, [r4, #24]
 8014608:	f8a4 8014 	strh.w	r8, [r4, #20]
 801460c:	60e7      	str	r7, [r4, #12]
 801460e:	6023      	str	r3, [r4, #0]
 8014610:	6063      	str	r3, [r4, #4]
 8014612:	60a3      	str	r3, [r4, #8]
 8014614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014618:	2000      	movs	r0, #0
 801461a:	4770      	bx	lr
 801461c:	4b07      	ldr	r3, [pc, #28]	; (801463c <GUI_DEVICE_Create+0x58>)
 801461e:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8014622:	b90a      	cbnz	r2, 8014628 <GUI_DEVICE_Create+0x44>
 8014624:	e7ed      	b.n	8014602 <GUI_DEVICE_Create+0x1e>
 8014626:	461a      	mov	r2, r3
 8014628:	6813      	ldr	r3, [r2, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1fb      	bne.n	8014626 <GUI_DEVICE_Create+0x42>
 801462e:	6913      	ldr	r3, [r2, #16]
 8014630:	6123      	str	r3, [r4, #16]
 8014632:	e7e6      	b.n	8014602 <GUI_DEVICE_Create+0x1e>
 8014634:	2000      	movs	r0, #0
 8014636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463a:	bf00      	nop
 801463c:	200467d0 	.word	0x200467d0

08014640 <GUI_DEVICE_Unlink>:
 8014640:	4a0f      	ldr	r2, [pc, #60]	; (8014680 <GUI_DEVICE_Unlink+0x40>)
 8014642:	6981      	ldr	r1, [r0, #24]
 8014644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014648:	4298      	cmp	r0, r3
 801464a:	d00a      	beq.n	8014662 <GUI_DEVICE_Unlink+0x22>
 801464c:	6842      	ldr	r2, [r0, #4]
 801464e:	b10a      	cbz	r2, 8014654 <GUI_DEVICE_Unlink+0x14>
 8014650:	6803      	ldr	r3, [r0, #0]
 8014652:	6013      	str	r3, [r2, #0]
 8014654:	6803      	ldr	r3, [r0, #0]
 8014656:	b103      	cbz	r3, 801465a <GUI_DEVICE_Unlink+0x1a>
 8014658:	605a      	str	r2, [r3, #4]
 801465a:	2300      	movs	r3, #0
 801465c:	6003      	str	r3, [r0, #0]
 801465e:	6043      	str	r3, [r0, #4]
 8014660:	4770      	bx	lr
 8014662:	6803      	ldr	r3, [r0, #0]
 8014664:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014668:	b12b      	cbz	r3, 8014676 <GUI_DEVICE_Unlink+0x36>
 801466a:	2200      	movs	r2, #0
 801466c:	605a      	str	r2, [r3, #4]
 801466e:	6842      	ldr	r2, [r0, #4]
 8014670:	2a00      	cmp	r2, #0
 8014672:	d1ee      	bne.n	8014652 <GUI_DEVICE_Unlink+0x12>
 8014674:	e7f0      	b.n	8014658 <GUI_DEVICE_Unlink+0x18>
 8014676:	6842      	ldr	r2, [r0, #4]
 8014678:	2a00      	cmp	r2, #0
 801467a:	d1ea      	bne.n	8014652 <GUI_DEVICE_Unlink+0x12>
 801467c:	e7ed      	b.n	801465a <GUI_DEVICE_Unlink+0x1a>
 801467e:	bf00      	nop
 8014680:	200467d0 	.word	0x200467d0

08014684 <GUI_DEVICE_Link>:
 8014684:	2800      	cmp	r0, #0
 8014686:	d03d      	beq.n	8014704 <GUI_DEVICE_Link+0x80>
 8014688:	b470      	push	{r4, r5, r6}
 801468a:	6984      	ldr	r4, [r0, #24]
 801468c:	2c01      	cmp	r4, #1
 801468e:	dd03      	ble.n	8014698 <GUI_DEVICE_Link+0x14>
 8014690:	2301      	movs	r3, #1
 8014692:	4618      	mov	r0, r3
 8014694:	bc70      	pop	{r4, r5, r6}
 8014696:	4770      	bx	lr
 8014698:	4b1f      	ldr	r3, [pc, #124]	; (8014718 <GUI_DEVICE_Link+0x94>)
 801469a:	781a      	ldrb	r2, [r3, #0]
 801469c:	4294      	cmp	r4, r2
 801469e:	da21      	bge.n	80146e4 <GUI_DEVICE_Link+0x60>
 80146a0:	4d1e      	ldr	r5, [pc, #120]	; (801471c <GUI_DEVICE_Link+0x98>)
 80146a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80146a6:	b90b      	cbnz	r3, 80146ac <GUI_DEVICE_Link+0x28>
 80146a8:	e032      	b.n	8014710 <GUI_DEVICE_Link+0x8c>
 80146aa:	4613      	mov	r3, r2
 80146ac:	685a      	ldr	r2, [r3, #4]
 80146ae:	2a00      	cmp	r2, #0
 80146b0:	d1fb      	bne.n	80146aa <GUI_DEVICE_Link+0x26>
 80146b2:	68c2      	ldr	r2, [r0, #12]
 80146b4:	6811      	ldr	r1, [r2, #0]
 80146b6:	e002      	b.n	80146be <GUI_DEVICE_Link+0x3a>
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d0e8      	beq.n	8014690 <GUI_DEVICE_Link+0xc>
 80146be:	68da      	ldr	r2, [r3, #12]
 80146c0:	6812      	ldr	r2, [r2, #0]
 80146c2:	4291      	cmp	r1, r2
 80146c4:	dbf8      	blt.n	80146b8 <GUI_DEVICE_Link+0x34>
 80146c6:	d010      	beq.n	80146ea <GUI_DEVICE_Link+0x66>
 80146c8:	685a      	ldr	r2, [r3, #4]
 80146ca:	b1f2      	cbz	r2, 801470a <GUI_DEVICE_Link+0x86>
 80146cc:	6010      	str	r0, [r2, #0]
 80146ce:	6042      	str	r2, [r0, #4]
 80146d0:	4298      	cmp	r0, r3
 80146d2:	bf14      	ite	ne
 80146d4:	461a      	movne	r2, r3
 80146d6:	2200      	moveq	r2, #0
 80146d8:	6058      	str	r0, [r3, #4]
 80146da:	2300      	movs	r3, #0
 80146dc:	6002      	str	r2, [r0, #0]
 80146de:	4618      	mov	r0, r3
 80146e0:	bc70      	pop	{r4, r5, r6}
 80146e2:	4770      	bx	lr
 80146e4:	1c62      	adds	r2, r4, #1
 80146e6:	701a      	strb	r2, [r3, #0]
 80146e8:	e7da      	b.n	80146a0 <GUI_DEVICE_Link+0x1c>
 80146ea:	8a82      	ldrh	r2, [r0, #20]
 80146ec:	2a01      	cmp	r2, #1
 80146ee:	d1eb      	bne.n	80146c8 <GUI_DEVICE_Link+0x44>
 80146f0:	e004      	b.n	80146fc <GUI_DEVICE_Link+0x78>
 80146f2:	68d6      	ldr	r6, [r2, #12]
 80146f4:	4613      	mov	r3, r2
 80146f6:	6832      	ldr	r2, [r6, #0]
 80146f8:	4291      	cmp	r1, r2
 80146fa:	dce5      	bgt.n	80146c8 <GUI_DEVICE_Link+0x44>
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	2a00      	cmp	r2, #0
 8014700:	d1f7      	bne.n	80146f2 <GUI_DEVICE_Link+0x6e>
 8014702:	e7e1      	b.n	80146c8 <GUI_DEVICE_Link+0x44>
 8014704:	2301      	movs	r3, #1
 8014706:	4618      	mov	r0, r3
 8014708:	4770      	bx	lr
 801470a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 801470e:	e7df      	b.n	80146d0 <GUI_DEVICE_Link+0x4c>
 8014710:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8014714:	e7bd      	b.n	8014692 <GUI_DEVICE_Link+0xe>
 8014716:	bf00      	nop
 8014718:	20046782 	.word	0x20046782
 801471c:	200467d0 	.word	0x200467d0

08014720 <GUI_DEVICE_CreateAndLink>:
 8014720:	2b01      	cmp	r3, #1
 8014722:	dc3b      	bgt.n	801479c <GUI_DEVICE_CreateAndLink+0x7c>
 8014724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014728:	4681      	mov	r9, r0
 801472a:	201c      	movs	r0, #28
 801472c:	4690      	mov	r8, r2
 801472e:	460f      	mov	r7, r1
 8014730:	461e      	mov	r6, r3
 8014732:	f7fe fa05 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 8014736:	4605      	mov	r5, r0
 8014738:	2800      	cmp	r0, #0
 801473a:	d07f      	beq.n	801483c <GUI_DEVICE_CreateAndLink+0x11c>
 801473c:	4a41      	ldr	r2, [pc, #260]	; (8014844 <GUI_DEVICE_CreateAndLink+0x124>)
 801473e:	2f00      	cmp	r7, #0
 8014740:	d031      	beq.n	80147a6 <GUI_DEVICE_CreateAndLink+0x86>
 8014742:	2300      	movs	r3, #0
 8014744:	f8df e104 	ldr.w	lr, [pc, #260]	; 801484c <GUI_DEVICE_CreateAndLink+0x12c>
 8014748:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 801474c:	6003      	str	r3, [r0, #0]
 801474e:	f89e 1000 	ldrb.w	r1, [lr]
 8014752:	6107      	str	r7, [r0, #16]
 8014754:	428e      	cmp	r6, r1
 8014756:	6186      	str	r6, [r0, #24]
 8014758:	f8a0 8014 	strh.w	r8, [r0, #20]
 801475c:	f8c0 900c 	str.w	r9, [r0, #12]
 8014760:	6043      	str	r3, [r0, #4]
 8014762:	6083      	str	r3, [r0, #8]
 8014764:	db02      	blt.n	801476c <GUI_DEVICE_CreateAndLink+0x4c>
 8014766:	1c73      	adds	r3, r6, #1
 8014768:	f88e 3000 	strb.w	r3, [lr]
 801476c:	2c00      	cmp	r4, #0
 801476e:	d05d      	beq.n	801482c <GUI_DEVICE_CreateAndLink+0x10c>
 8014770:	4621      	mov	r1, r4
 8014772:	684c      	ldr	r4, [r1, #4]
 8014774:	2c00      	cmp	r4, #0
 8014776:	d1fb      	bne.n	8014770 <GUI_DEVICE_CreateAndLink+0x50>
 8014778:	f8d9 0000 	ldr.w	r0, [r9]
 801477c:	68cb      	ldr	r3, [r1, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4283      	cmp	r3, r0
 8014782:	dd2c      	ble.n	80147de <GUI_DEVICE_CreateAndLink+0xbe>
 8014784:	6809      	ldr	r1, [r1, #0]
 8014786:	2900      	cmp	r1, #0
 8014788:	d1f8      	bne.n	801477c <GUI_DEVICE_CreateAndLink+0x5c>
 801478a:	b948      	cbnz	r0, 80147a0 <GUI_DEVICE_CreateAndLink+0x80>
 801478c:	4b2e      	ldr	r3, [pc, #184]	; (8014848 <GUI_DEVICE_CreateAndLink+0x128>)
 801478e:	3616      	adds	r6, #22
 8014790:	4628      	mov	r0, r5
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8014798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801479c:	2000      	movs	r0, #0
 801479e:	4770      	bx	lr
 80147a0:	4628      	mov	r0, r5
 80147a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147a6:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 80147aa:	2900      	cmp	r1, #0
 80147ac:	d030      	beq.n	8014810 <GUI_DEVICE_CreateAndLink+0xf0>
 80147ae:	4608      	mov	r0, r1
 80147b0:	e000      	b.n	80147b4 <GUI_DEVICE_CreateAndLink+0x94>
 80147b2:	4618      	mov	r0, r3
 80147b4:	6803      	ldr	r3, [r0, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1fb      	bne.n	80147b2 <GUI_DEVICE_CreateAndLink+0x92>
 80147ba:	6900      	ldr	r0, [r0, #16]
 80147bc:	f8df e08c 	ldr.w	lr, [pc, #140]	; 801484c <GUI_DEVICE_CreateAndLink+0x12c>
 80147c0:	602b      	str	r3, [r5, #0]
 80147c2:	6128      	str	r0, [r5, #16]
 80147c4:	f89e 0000 	ldrb.w	r0, [lr]
 80147c8:	61ae      	str	r6, [r5, #24]
 80147ca:	4286      	cmp	r6, r0
 80147cc:	f8a5 8014 	strh.w	r8, [r5, #20]
 80147d0:	f8c5 900c 	str.w	r9, [r5, #12]
 80147d4:	606b      	str	r3, [r5, #4]
 80147d6:	60ab      	str	r3, [r5, #8]
 80147d8:	dbcb      	blt.n	8014772 <GUI_DEVICE_CreateAndLink+0x52>
 80147da:	460c      	mov	r4, r1
 80147dc:	e7c3      	b.n	8014766 <GUI_DEVICE_CreateAndLink+0x46>
 80147de:	d00a      	beq.n	80147f6 <GUI_DEVICE_CreateAndLink+0xd6>
 80147e0:	684b      	ldr	r3, [r1, #4]
 80147e2:	b343      	cbz	r3, 8014836 <GUI_DEVICE_CreateAndLink+0x116>
 80147e4:	601d      	str	r5, [r3, #0]
 80147e6:	606b      	str	r3, [r5, #4]
 80147e8:	428d      	cmp	r5, r1
 80147ea:	bf14      	ite	ne
 80147ec:	460b      	movne	r3, r1
 80147ee:	2300      	moveq	r3, #0
 80147f0:	604d      	str	r5, [r1, #4]
 80147f2:	602b      	str	r3, [r5, #0]
 80147f4:	e7c9      	b.n	801478a <GUI_DEVICE_CreateAndLink+0x6a>
 80147f6:	f1b8 0f01 	cmp.w	r8, #1
 80147fa:	d1f1      	bne.n	80147e0 <GUI_DEVICE_CreateAndLink+0xc0>
 80147fc:	e004      	b.n	8014808 <GUI_DEVICE_CreateAndLink+0xe8>
 80147fe:	68dc      	ldr	r4, [r3, #12]
 8014800:	4619      	mov	r1, r3
 8014802:	6823      	ldr	r3, [r4, #0]
 8014804:	4283      	cmp	r3, r0
 8014806:	dbeb      	blt.n	80147e0 <GUI_DEVICE_CreateAndLink+0xc0>
 8014808:	680b      	ldr	r3, [r1, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1f7      	bne.n	80147fe <GUI_DEVICE_CreateAndLink+0xde>
 801480e:	e7e7      	b.n	80147e0 <GUI_DEVICE_CreateAndLink+0xc0>
 8014810:	f8df e038 	ldr.w	lr, [pc, #56]	; 801484c <GUI_DEVICE_CreateAndLink+0x12c>
 8014814:	6001      	str	r1, [r0, #0]
 8014816:	f89e 3000 	ldrb.w	r3, [lr]
 801481a:	6186      	str	r6, [r0, #24]
 801481c:	429e      	cmp	r6, r3
 801481e:	f8a0 8014 	strh.w	r8, [r0, #20]
 8014822:	f8c0 900c 	str.w	r9, [r0, #12]
 8014826:	6041      	str	r1, [r0, #4]
 8014828:	6081      	str	r1, [r0, #8]
 801482a:	dad6      	bge.n	80147da <GUI_DEVICE_CreateAndLink+0xba>
 801482c:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8014830:	f8d9 0000 	ldr.w	r0, [r9]
 8014834:	e7a9      	b.n	801478a <GUI_DEVICE_CreateAndLink+0x6a>
 8014836:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 801483a:	e7d5      	b.n	80147e8 <GUI_DEVICE_CreateAndLink+0xc8>
 801483c:	2000      	movs	r0, #0
 801483e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014842:	bf00      	nop
 8014844:	200467d0 	.word	0x200467d0
 8014848:	20000018 	.word	0x20000018
 801484c:	20046782 	.word	0x20046782

08014850 <GUI_DEVICE_UnlinkTaskDevices>:
 8014850:	2000      	movs	r0, #0
 8014852:	4770      	bx	lr

08014854 <GUI_DEVICE_LinkDevices>:
 8014854:	2800      	cmp	r0, #0
 8014856:	d04d      	beq.n	80148f4 <GUI_DEVICE_LinkDevices+0xa0>
 8014858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801485c:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80148fc <GUI_DEVICE_LinkDevices+0xa8>
 8014860:	4f25      	ldr	r7, [pc, #148]	; (80148f8 <GUI_DEVICE_LinkDevices+0xa4>)
 8014862:	f89e 6000 	ldrb.w	r6, [lr]
 8014866:	46bc      	mov	ip, r7
 8014868:	e001      	b.n	801486e <GUI_DEVICE_LinkDevices+0x1a>
 801486a:	4628      	mov	r0, r5
 801486c:	b33d      	cbz	r5, 80148be <GUI_DEVICE_LinkDevices+0x6a>
 801486e:	6984      	ldr	r4, [r0, #24]
 8014870:	6805      	ldr	r5, [r0, #0]
 8014872:	2c01      	cmp	r4, #1
 8014874:	dcf9      	bgt.n	801486a <GUI_DEVICE_LinkDevices+0x16>
 8014876:	42b4      	cmp	r4, r6
 8014878:	db01      	blt.n	801487e <GUI_DEVICE_LinkDevices+0x2a>
 801487a:	1c66      	adds	r6, r4, #1
 801487c:	b2f6      	uxtb	r6, r6
 801487e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8014882:	b90b      	cbnz	r3, 8014888 <GUI_DEVICE_LinkDevices+0x34>
 8014884:	e033      	b.n	80148ee <GUI_DEVICE_LinkDevices+0x9a>
 8014886:	4613      	mov	r3, r2
 8014888:	685a      	ldr	r2, [r3, #4]
 801488a:	2a00      	cmp	r2, #0
 801488c:	d1fb      	bne.n	8014886 <GUI_DEVICE_LinkDevices+0x32>
 801488e:	68c2      	ldr	r2, [r0, #12]
 8014890:	6811      	ldr	r1, [r2, #0]
 8014892:	e002      	b.n	801489a <GUI_DEVICE_LinkDevices+0x46>
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d0e7      	beq.n	801486a <GUI_DEVICE_LinkDevices+0x16>
 801489a:	68da      	ldr	r2, [r3, #12]
 801489c:	6812      	ldr	r2, [r2, #0]
 801489e:	428a      	cmp	r2, r1
 80148a0:	dcf8      	bgt.n	8014894 <GUI_DEVICE_LinkDevices+0x40>
 80148a2:	d010      	beq.n	80148c6 <GUI_DEVICE_LinkDevices+0x72>
 80148a4:	685a      	ldr	r2, [r3, #4]
 80148a6:	b1a2      	cbz	r2, 80148d2 <GUI_DEVICE_LinkDevices+0x7e>
 80148a8:	6010      	str	r0, [r2, #0]
 80148aa:	6042      	str	r2, [r0, #4]
 80148ac:	4298      	cmp	r0, r3
 80148ae:	bf14      	ite	ne
 80148b0:	461a      	movne	r2, r3
 80148b2:	2200      	moveq	r2, #0
 80148b4:	6058      	str	r0, [r3, #4]
 80148b6:	6002      	str	r2, [r0, #0]
 80148b8:	4628      	mov	r0, r5
 80148ba:	2d00      	cmp	r5, #0
 80148bc:	d1d7      	bne.n	801486e <GUI_DEVICE_LinkDevices+0x1a>
 80148be:	f88e 6000 	strb.w	r6, [lr]
 80148c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c6:	8a82      	ldrh	r2, [r0, #20]
 80148c8:	2a01      	cmp	r2, #1
 80148ca:	d00c      	beq.n	80148e6 <GUI_DEVICE_LinkDevices+0x92>
 80148cc:	685a      	ldr	r2, [r3, #4]
 80148ce:	2a00      	cmp	r2, #0
 80148d0:	d1ea      	bne.n	80148a8 <GUI_DEVICE_LinkDevices+0x54>
 80148d2:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 80148d6:	e7e9      	b.n	80148ac <GUI_DEVICE_LinkDevices+0x58>
 80148d8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80148dc:	4613      	mov	r3, r2
 80148de:	f8d8 2000 	ldr.w	r2, [r8]
 80148e2:	428a      	cmp	r2, r1
 80148e4:	dbde      	blt.n	80148a4 <GUI_DEVICE_LinkDevices+0x50>
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	2a00      	cmp	r2, #0
 80148ea:	d1f5      	bne.n	80148d8 <GUI_DEVICE_LinkDevices+0x84>
 80148ec:	e7da      	b.n	80148a4 <GUI_DEVICE_LinkDevices+0x50>
 80148ee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80148f2:	e7ba      	b.n	801486a <GUI_DEVICE_LinkDevices+0x16>
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop
 80148f8:	200467d0 	.word	0x200467d0
 80148fc:	20046782 	.word	0x20046782

08014900 <GUI_DispString.part.0>:
 8014900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014904:	4d4a      	ldr	r5, [pc, #296]	; (8014a30 <GUI_DispString.part.0+0x130>)
 8014906:	b083      	sub	sp, #12
 8014908:	4604      	mov	r4, r0
 801490a:	f003 fe4b 	bl	80185a4 <GUI_Lock>
 801490e:	f00e f8f5 	bl	8022afc <GUI_GetFontDistY>
 8014912:	682b      	ldr	r3, [r5, #0]
 8014914:	4606      	mov	r6, r0
 8014916:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 801491a:	f00e f8cb 	bl	8022ab4 <GUI_GetYAdjust>
 801491e:	682b      	ldr	r3, [r5, #0]
 8014920:	fa1f f980 	uxth.w	r9, r0
 8014924:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8014926:	ebc9 0202 	rsb	r2, r9, r2
 801492a:	b212      	sxth	r2, r2
 801492c:	849a      	strh	r2, [r3, #36]	; 0x24
 801492e:	7821      	ldrb	r1, [r4, #0]
 8014930:	2900      	cmp	r1, #0
 8014932:	d04f      	beq.n	80149d4 <GUI_DispString.part.0+0xd4>
 8014934:	b2b6      	uxth	r6, r6
 8014936:	462f      	mov	r7, r5
 8014938:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801493c:	4620      	mov	r0, r4
 801493e:	f00e f961 	bl	8022c04 <GUI__GetLineNumChars>
 8014942:	4601      	mov	r1, r0
 8014944:	4683      	mov	fp, r0
 8014946:	4620      	mov	r0, r4
 8014948:	f00e f984 	bl	8022c54 <GUI__GetLineDistX>
 801494c:	6829      	ldr	r1, [r5, #0]
 801494e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8014950:	f003 0303 	and.w	r3, r3, #3
 8014954:	2b01      	cmp	r3, #1
 8014956:	d05a      	beq.n	8014a0e <GUI_DispString.part.0+0x10e>
 8014958:	2b02      	cmp	r3, #2
 801495a:	d05c      	beq.n	8014a16 <GUI_DispString.part.0+0x116>
 801495c:	fa1f fa80 	uxth.w	sl, r0
 8014960:	f04f 0e00 	mov.w	lr, #0
 8014964:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8014966:	f10a 3cff 	add.w	ip, sl, #4294967295
 801496a:	f9b1 2024 	ldrsh.w	r2, [r1, #36]	; 0x24
 801496e:	ebce 0303 	rsb	r3, lr, r3
 8014972:	f8ad 2002 	strh.w	r2, [sp, #2]
 8014976:	3a01      	subs	r2, #1
 8014978:	b29b      	uxth	r3, r3
 801497a:	18b0      	adds	r0, r6, r2
 801497c:	466a      	mov	r2, sp
 801497e:	fa0f fe83 	sxth.w	lr, r3
 8014982:	4463      	add	r3, ip
 8014984:	f8ad 0006 	strh.w	r0, [sp, #6]
 8014988:	4620      	mov	r0, r4
 801498a:	f8a1 e022 	strh.w	lr, [r1, #34]	; 0x22
 801498e:	4659      	mov	r1, fp
 8014990:	f8ad e000 	strh.w	lr, [sp]
 8014994:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014998:	f00e f99c 	bl	8022cd4 <GUI__DispLine>
 801499c:	682b      	ldr	r3, [r5, #0]
 801499e:	4620      	mov	r0, r4
 80149a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80149a4:	4659      	mov	r1, fp
 80149a6:	849a      	strh	r2, [r3, #36]	; 0x24
 80149a8:	f003 ff2a 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 80149ac:	5c23      	ldrb	r3, [r4, r0]
 80149ae:	4404      	add	r4, r0
 80149b0:	2b0a      	cmp	r3, #10
 80149b2:	d01b      	beq.n	80149ec <GUI_DispString.part.0+0xec>
 80149b4:	2b0d      	cmp	r3, #13
 80149b6:	d019      	beq.n	80149ec <GUI_DispString.part.0+0xec>
 80149b8:	f8bd 0000 	ldrh.w	r0, [sp]
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	4482      	add	sl, r0
 80149c0:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 80149c4:	7822      	ldrb	r2, [r4, #0]
 80149c6:	b11a      	cbz	r2, 80149d0 <GUI_DispString.part.0+0xd0>
 80149c8:	7862      	ldrb	r2, [r4, #1]
 80149ca:	3401      	adds	r4, #1
 80149cc:	2a00      	cmp	r2, #0
 80149ce:	d1b3      	bne.n	8014938 <GUI_DispString.part.0+0x38>
 80149d0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80149d4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 80149d6:	4491      	add	r9, r2
 80149d8:	f021 0203 	bic.w	r2, r1, #3
 80149dc:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
 80149e0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80149e2:	f003 fdd5 	bl	8018590 <GUI_Unlock>
 80149e6:	b003      	add	sp, #12
 80149e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ec:	682b      	ldr	r3, [r5, #0]
 80149ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80149f0:	f002 0203 	and.w	r2, r2, #3
 80149f4:	3a01      	subs	r2, #1
 80149f6:	2a01      	cmp	r2, #1
 80149f8:	d816      	bhi.n	8014a28 <GUI_DispString.part.0+0x128>
 80149fa:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 80149fe:	7822      	ldrb	r2, [r4, #0]
 8014a00:	2a0a      	cmp	r2, #10
 8014a02:	d1e0      	bne.n	80149c6 <GUI_DispString.part.0+0xc6>
 8014a04:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8014a06:	4432      	add	r2, r6
 8014a08:	849a      	strh	r2, [r3, #36]	; 0x24
 8014a0a:	7822      	ldrb	r2, [r4, #0]
 8014a0c:	e7db      	b.n	80149c6 <GUI_DispString.part.0+0xc6>
 8014a0e:	fa1f fe80 	uxth.w	lr, r0
 8014a12:	46f2      	mov	sl, lr
 8014a14:	e7a6      	b.n	8014964 <GUI_DispString.part.0+0x64>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	4603      	mov	r3, r0
 8014a1a:	fa1f fa80 	uxth.w	sl, r0
 8014a1e:	bfb8      	it	lt
 8014a20:	1c43      	addlt	r3, r0, #1
 8014a22:	f3c3 0e4f 	ubfx	lr, r3, #1, #16
 8014a26:	e79d      	b.n	8014964 <GUI_DispString.part.0+0x64>
 8014a28:	8c1a      	ldrh	r2, [r3, #32]
 8014a2a:	845a      	strh	r2, [r3, #34]	; 0x22
 8014a2c:	e7e7      	b.n	80149fe <GUI_DispString.part.0+0xfe>
 8014a2e:	bf00      	nop
 8014a30:	20000018 	.word	0x20000018

08014a34 <GUI_DispStringInRectWrap.part.1>:
 8014a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a38:	4689      	mov	r9, r1
 8014a3a:	b08b      	sub	sp, #44	; 0x2c
 8014a3c:	4615      	mov	r5, r2
 8014a3e:	4604      	mov	r4, r0
 8014a40:	9203      	str	r2, [sp, #12]
 8014a42:	461f      	mov	r7, r3
 8014a44:	f003 fdae 	bl	80185a4 <GUI_Lock>
 8014a48:	f9b9 3000 	ldrsh.w	r3, [r9]
 8014a4c:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 8014a50:	9301      	str	r3, [sp, #4]
 8014a52:	1ace      	subs	r6, r1, r3
 8014a54:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8014a58:	9102      	str	r1, [sp, #8]
 8014a5a:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 8014a5e:	3601      	adds	r6, #1
 8014a60:	9305      	str	r3, [sp, #20]
 8014a62:	f00e f84b 	bl	8022afc <GUI_GetFontDistY>
 8014a66:	f015 0a0c 	ands.w	sl, r5, #12
 8014a6a:	9004      	str	r0, [sp, #16]
 8014a6c:	d176      	bne.n	8014b5c <GUI_DispStringInRectWrap.part.1+0x128>
 8014a6e:	fa1f fa80 	uxth.w	sl, r0
 8014a72:	4648      	mov	r0, r9
 8014a74:	f00c fdde 	bl	8021634 <WM_SetUserClipRect>
 8014a78:	4602      	mov	r2, r0
 8014a7a:	9004      	str	r0, [sp, #16]
 8014a7c:	b1a8      	cbz	r0, 8014aaa <GUI_DispStringInRectWrap.part.1+0x76>
 8014a7e:	9901      	ldr	r1, [sp, #4]
 8014a80:	2500      	movs	r5, #0
 8014a82:	a806      	add	r0, sp, #24
 8014a84:	462b      	mov	r3, r5
 8014a86:	f361 050f 	bfi	r5, r1, #0, #16
 8014a8a:	9902      	ldr	r1, [sp, #8]
 8014a8c:	f36b 451f 	bfi	r5, fp, #16, #16
 8014a90:	f361 030f 	bfi	r3, r1, #0, #16
 8014a94:	9905      	ldr	r1, [sp, #20]
 8014a96:	9506      	str	r5, [sp, #24]
 8014a98:	f361 431f 	bfi	r3, r1, #16, #16
 8014a9c:	4649      	mov	r1, r9
 8014a9e:	9307      	str	r3, [sp, #28]
 8014aa0:	f004 ff50 	bl	8019944 <GUI__IntersectRects>
 8014aa4:	a806      	add	r0, sp, #24
 8014aa6:	f00c fdc5 	bl	8021634 <WM_SetUserClipRect>
 8014aaa:	9b03      	ldr	r3, [sp, #12]
 8014aac:	fa1f f58b 	uxth.w	r5, fp
 8014ab0:	f003 0803 	and.w	r8, r3, #3
 8014ab4:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014ab8:	9303      	str	r3, [sp, #12]
 8014aba:	4643      	mov	r3, r8
 8014abc:	46b0      	mov	r8, r6
 8014abe:	461e      	mov	r6, r3
 8014ac0:	e015      	b.n	8014aee <GUI_DispStringInRectWrap.part.1+0xba>
 8014ac2:	2e02      	cmp	r6, #2
 8014ac4:	d034      	beq.n	8014b30 <GUI_DispStringInRectWrap.part.1+0xfc>
 8014ac6:	b91e      	cbnz	r6, 8014ad0 <GUI_DispStringInRectWrap.part.1+0x9c>
 8014ac8:	f8b9 3000 	ldrh.w	r3, [r9]
 8014acc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	4659      	mov	r1, fp
 8014ad4:	aa08      	add	r2, sp, #32
 8014ad6:	4455      	add	r5, sl
 8014ad8:	f00e f8fc 	bl	8022cd4 <GUI__DispLine>
 8014adc:	4620      	mov	r0, r4
 8014ade:	463a      	mov	r2, r7
 8014ae0:	4641      	mov	r1, r8
 8014ae2:	f005 f9c3 	bl	8019e6c <GUI__WrapGetNumBytesToNextLine>
 8014ae6:	4404      	add	r4, r0
 8014ae8:	b2ad      	uxth	r5, r5
 8014aea:	7823      	ldrb	r3, [r4, #0]
 8014aec:	b373      	cbz	r3, 8014b4c <GUI_DispStringInRectWrap.part.1+0x118>
 8014aee:	463a      	mov	r2, r7
 8014af0:	4641      	mov	r1, r8
 8014af2:	4620      	mov	r0, r4
 8014af4:	f005 f9a8 	bl	8019e48 <GUI__WrapGetNumCharsDisp>
 8014af8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014afc:	9b03      	ldr	r3, [sp, #12]
 8014afe:	4683      	mov	fp, r0
 8014b00:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014b04:	4620      	mov	r0, r4
 8014b06:	18eb      	adds	r3, r5, r3
 8014b08:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014b0c:	4659      	mov	r1, fp
 8014b0e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8014b12:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8014b16:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014b1a:	f00e f89b 	bl	8022c54 <GUI__GetLineDistX>
 8014b1e:	2e01      	cmp	r6, #1
 8014b20:	d1cf      	bne.n	8014ac2 <GUI_DispStringInRectWrap.part.1+0x8e>
 8014b22:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8014b26:	3301      	adds	r3, #1
 8014b28:	1a18      	subs	r0, r3, r0
 8014b2a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8014b2e:	e7cf      	b.n	8014ad0 <GUI_DispStringInRectWrap.part.1+0x9c>
 8014b30:	f9b9 1000 	ldrsh.w	r1, [r9]
 8014b34:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8014b38:	1a5b      	subs	r3, r3, r1
 8014b3a:	1a18      	subs	r0, r3, r0
 8014b3c:	3001      	adds	r0, #1
 8014b3e:	bf48      	it	mi
 8014b40:	3001      	addmi	r0, #1
 8014b42:	eb01 0060 	add.w	r0, r1, r0, asr #1
 8014b46:	f8ad 0020 	strh.w	r0, [sp, #32]
 8014b4a:	e7c1      	b.n	8014ad0 <GUI_DispStringInRectWrap.part.1+0x9c>
 8014b4c:	9804      	ldr	r0, [sp, #16]
 8014b4e:	f00c fd71 	bl	8021634 <WM_SetUserClipRect>
 8014b52:	f003 fd1d 	bl	8018590 <GUI_Unlock>
 8014b56:	b00b      	add	sp, #44	; 0x2c
 8014b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5c:	4625      	mov	r5, r4
 8014b5e:	f003 fd21 	bl	80185a4 <GUI_Lock>
 8014b62:	463a      	mov	r2, r7
 8014b64:	4631      	mov	r1, r6
 8014b66:	4628      	mov	r0, r5
 8014b68:	f04f 0800 	mov.w	r8, #0
 8014b6c:	f005 f97e 	bl	8019e6c <GUI__WrapGetNumBytesToNextLine>
 8014b70:	b148      	cbz	r0, 8014b86 <GUI_DispStringInRectWrap.part.1+0x152>
 8014b72:	4405      	add	r5, r0
 8014b74:	463a      	mov	r2, r7
 8014b76:	4631      	mov	r1, r6
 8014b78:	f108 0801 	add.w	r8, r8, #1
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f005 f975 	bl	8019e6c <GUI__WrapGetNumBytesToNextLine>
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d1f5      	bne.n	8014b72 <GUI_DispStringInRectWrap.part.1+0x13e>
 8014b86:	f003 fd03 	bl	8018590 <GUI_Unlock>
 8014b8a:	f1ba 0f08 	cmp.w	sl, #8
 8014b8e:	d008      	beq.n	8014ba2 <GUI_DispStringInRectWrap.part.1+0x16e>
 8014b90:	f1ba 0f0c 	cmp.w	sl, #12
 8014b94:	d010      	beq.n	8014bb8 <GUI_DispStringInRectWrap.part.1+0x184>
 8014b96:	f1ba 0f04 	cmp.w	sl, #4
 8014b9a:	d002      	beq.n	8014ba2 <GUI_DispStringInRectWrap.part.1+0x16e>
 8014b9c:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8014ba0:	e767      	b.n	8014a72 <GUI_DispStringInRectWrap.part.1+0x3e>
 8014ba2:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8014ba6:	9b05      	ldr	r3, [sp, #20]
 8014ba8:	fb18 f80a 	smulbb	r8, r8, sl
 8014bac:	1c5d      	adds	r5, r3, #1
 8014bae:	ebc8 0505 	rsb	r5, r8, r5
 8014bb2:	fa0f fb85 	sxth.w	fp, r5
 8014bb6:	e75c      	b.n	8014a72 <GUI_DispStringInRectWrap.part.1+0x3e>
 8014bb8:	9b05      	ldr	r3, [sp, #20]
 8014bba:	9a04      	ldr	r2, [sp, #16]
 8014bbc:	ebcb 0303 	rsb	r3, fp, r3
 8014bc0:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	fb08 3812 	mls	r8, r8, r2, r3
 8014bca:	f1b8 0f00 	cmp.w	r8, #0
 8014bce:	bfb8      	it	lt
 8014bd0:	f108 0801 	addlt.w	r8, r8, #1
 8014bd4:	eb0b 0568 	add.w	r5, fp, r8, asr #1
 8014bd8:	fa0f fb85 	sxth.w	fp, r5
 8014bdc:	e749      	b.n	8014a72 <GUI_DispStringInRectWrap.part.1+0x3e>
 8014bde:	bf00      	nop

08014be0 <GUI_DispString>:
 8014be0:	b108      	cbz	r0, 8014be6 <GUI_DispString+0x6>
 8014be2:	f7ff be8d 	b.w	8014900 <GUI_DispString.part.0>
 8014be6:	4770      	bx	lr

08014be8 <GUI_DispStringAt>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	460e      	mov	r6, r1
 8014bec:	4615      	mov	r5, r2
 8014bee:	4604      	mov	r4, r0
 8014bf0:	f003 fcd8 	bl	80185a4 <GUI_Lock>
 8014bf4:	4b05      	ldr	r3, [pc, #20]	; (8014c0c <GUI_DispStringAt+0x24>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	845e      	strh	r6, [r3, #34]	; 0x22
 8014bfa:	849d      	strh	r5, [r3, #36]	; 0x24
 8014bfc:	b114      	cbz	r4, 8014c04 <GUI_DispStringAt+0x1c>
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7ff fe7e 	bl	8014900 <GUI_DispString.part.0>
 8014c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c08:	f003 bcc2 	b.w	8018590 <GUI_Unlock>
 8014c0c:	20000018 	.word	0x20000018

08014c10 <GUI_DispStringHCenterAt>:
 8014c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c14:	4c0e      	ldr	r4, [pc, #56]	; (8014c50 <GUI_DispStringHCenterAt+0x40>)
 8014c16:	4605      	mov	r5, r0
 8014c18:	4688      	mov	r8, r1
 8014c1a:	4617      	mov	r7, r2
 8014c1c:	6823      	ldr	r3, [r4, #0]
 8014c1e:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8014c22:	f040 0002 	orr.w	r0, r0, #2
 8014c26:	f7ff faa1 	bl	801416c <GUI_SetTextAlign>
 8014c2a:	4606      	mov	r6, r0
 8014c2c:	f003 fcba 	bl	80185a4 <GUI_Lock>
 8014c30:	6823      	ldr	r3, [r4, #0]
 8014c32:	f8a3 8022 	strh.w	r8, [r3, #34]	; 0x22
 8014c36:	849f      	strh	r7, [r3, #36]	; 0x24
 8014c38:	b115      	cbz	r5, 8014c40 <GUI_DispStringHCenterAt+0x30>
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f7ff fe60 	bl	8014900 <GUI_DispString.part.0>
 8014c40:	f003 fca6 	bl	8018590 <GUI_Unlock>
 8014c44:	4630      	mov	r0, r6
 8014c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c4a:	f7ff ba8f 	b.w	801416c <GUI_SetTextAlign>
 8014c4e:	bf00      	nop
 8014c50:	20000018 	.word	0x20000018

08014c54 <GUI__DispStringInRect>:
 8014c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c58:	460c      	mov	r4, r1
 8014c5a:	b087      	sub	sp, #28
 8014c5c:	4617      	mov	r7, r2
 8014c5e:	461d      	mov	r5, r3
 8014c60:	9001      	str	r0, [sp, #4]
 8014c62:	f00d ff4b 	bl	8022afc <GUI_GetFontDistY>
 8014c66:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014c6a:	4681      	mov	r9, r0
 8014c6c:	2c00      	cmp	r4, #0
 8014c6e:	f000 80a4 	beq.w	8014dba <GUI__DispStringInRect+0x166>
 8014c72:	ab04      	add	r3, sp, #16
 8014c74:	6820      	ldr	r0, [r4, #0]
 8014c76:	6861      	ldr	r1, [r4, #4]
 8014c78:	c303      	stmia	r3!, {r0, r1}
 8014c7a:	f017 0b0c 	ands.w	fp, r7, #12
 8014c7e:	d15f      	bne.n	8014d40 <GUI__DispStringInRect+0xec>
 8014c80:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8014c84:	f8cd a004 	str.w	sl, [sp, #4]
 8014c88:	2d00      	cmp	r5, #0
 8014c8a:	d056      	beq.n	8014d3a <GUI__DispStringInRect+0xe6>
 8014c8c:	f10d 0804 	add.w	r8, sp, #4
 8014c90:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c94:	4650      	mov	r0, sl
 8014c96:	f007 0703 	and.w	r7, r7, #3
 8014c9a:	2400      	movs	r4, #0
 8014c9c:	fa1f f989 	uxth.w	r9, r9
 8014ca0:	f8df a138 	ldr.w	sl, [pc, #312]	; 8014ddc <GUI__DispStringInRect+0x188>
 8014ca4:	e02d      	b.n	8014d02 <GUI__DispStringInRect+0xae>
 8014ca6:	2f02      	cmp	r7, #2
 8014ca8:	d03c      	beq.n	8014d24 <GUI__DispStringInRect+0xd0>
 8014caa:	b90f      	cbnz	r7, 8014cb0 <GUI__DispStringInRect+0x5c>
 8014cac:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8014cb0:	3801      	subs	r0, #1
 8014cb2:	b233      	sxth	r3, r6
 8014cb4:	fa0f fc84 	sxth.w	ip, r4
 8014cb8:	f8da 2000 	ldr.w	r2, [sl]
 8014cbc:	4420      	add	r0, r4
 8014cbe:	eb09 0e06 	add.w	lr, r9, r6
 8014cc2:	f8a2 c022 	strh.w	ip, [r2, #34]	; 0x22
 8014cc6:	4659      	mov	r1, fp
 8014cc8:	8493      	strh	r3, [r2, #36]	; 0x24
 8014cca:	aa02      	add	r2, sp, #8
 8014ccc:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014cd0:	9801      	ldr	r0, [sp, #4]
 8014cd2:	f8ad c008 	strh.w	ip, [sp, #8]
 8014cd6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8014cda:	f8ad e00e 	strh.w	lr, [sp, #14]
 8014cde:	f00d fff9 	bl	8022cd4 <GUI__DispLine>
 8014ce2:	4659      	mov	r1, fp
 8014ce4:	9801      	ldr	r0, [sp, #4]
 8014ce6:	f003 fd8b 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8014cea:	9b01      	ldr	r3, [sp, #4]
 8014cec:	4418      	add	r0, r3
 8014cee:	9001      	str	r0, [sp, #4]
 8014cf0:	f00d ff04 	bl	8022afc <GUI_GetFontDistY>
 8014cf4:	4406      	add	r6, r0
 8014cf6:	4640      	mov	r0, r8
 8014cf8:	f004 fdee 	bl	80198d8 <GUI__HandleEOLine>
 8014cfc:	b9e8      	cbnz	r0, 8014d3a <GUI__DispStringInRect+0xe6>
 8014cfe:	b1e5      	cbz	r5, 8014d3a <GUI__DispStringInRect+0xe6>
 8014d00:	9801      	ldr	r0, [sp, #4]
 8014d02:	4629      	mov	r1, r5
 8014d04:	f00d ff7e 	bl	8022c04 <GUI__GetLineNumChars>
 8014d08:	4683      	mov	fp, r0
 8014d0a:	9801      	ldr	r0, [sp, #4]
 8014d0c:	4659      	mov	r1, fp
 8014d0e:	ebcb 0505 	rsb	r5, fp, r5
 8014d12:	f00d ff9f 	bl	8022c54 <GUI__GetLineDistX>
 8014d16:	2f01      	cmp	r7, #1
 8014d18:	d1c5      	bne.n	8014ca6 <GUI__DispStringInRect+0x52>
 8014d1a:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8014d1e:	1a24      	subs	r4, r4, r0
 8014d20:	3401      	adds	r4, #1
 8014d22:	e7c5      	b.n	8014cb0 <GUI__DispStringInRect+0x5c>
 8014d24:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8014d28:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014d2c:	1b1b      	subs	r3, r3, r4
 8014d2e:	1a1b      	subs	r3, r3, r0
 8014d30:	bf48      	it	mi
 8014d32:	3301      	addmi	r3, #1
 8014d34:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8014d38:	e7ba      	b.n	8014cb0 <GUI__DispStringInRect+0x5c>
 8014d3a:	b007      	add	sp, #28
 8014d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d40:	2d00      	cmp	r5, #0
 8014d42:	d03e      	beq.n	8014dc2 <GUI__DispStringInRect+0x16e>
 8014d44:	462c      	mov	r4, r5
 8014d46:	2600      	movs	r6, #0
 8014d48:	f10d 0804 	add.w	r8, sp, #4
 8014d4c:	e000      	b.n	8014d50 <GUI__DispStringInRect+0xfc>
 8014d4e:	b194      	cbz	r4, 8014d76 <GUI__DispStringInRect+0x122>
 8014d50:	4621      	mov	r1, r4
 8014d52:	9801      	ldr	r0, [sp, #4]
 8014d54:	f00d ff56 	bl	8022c04 <GUI__GetLineNumChars>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	9801      	ldr	r0, [sp, #4]
 8014d5c:	3601      	adds	r6, #1
 8014d5e:	4619      	mov	r1, r3
 8014d60:	1ae4      	subs	r4, r4, r3
 8014d62:	f003 fd4d 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8014d66:	9b01      	ldr	r3, [sp, #4]
 8014d68:	4403      	add	r3, r0
 8014d6a:	4640      	mov	r0, r8
 8014d6c:	9301      	str	r3, [sp, #4]
 8014d6e:	f004 fdb3 	bl	80198d8 <GUI__HandleEOLine>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	d0eb      	beq.n	8014d4e <GUI__DispStringInRect+0xfa>
 8014d76:	f1bb 0f08 	cmp.w	fp, #8
 8014d7a:	d009      	beq.n	8014d90 <GUI__DispStringInRect+0x13c>
 8014d7c:	f1bb 0f0c 	cmp.w	fp, #12
 8014d80:	d00d      	beq.n	8014d9e <GUI__DispStringInRect+0x14a>
 8014d82:	f1bb 0f04 	cmp.w	fp, #4
 8014d86:	d003      	beq.n	8014d90 <GUI__DispStringInRect+0x13c>
 8014d88:	f8cd a004 	str.w	sl, [sp, #4]
 8014d8c:	2600      	movs	r6, #0
 8014d8e:	e77f      	b.n	8014c90 <GUI__DispStringInRect+0x3c>
 8014d90:	fb06 f609 	mul.w	r6, r6, r9
 8014d94:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014d98:	1b9e      	subs	r6, r3, r6
 8014d9a:	3601      	adds	r6, #1
 8014d9c:	e772      	b.n	8014c84 <GUI__DispStringInRect+0x30>
 8014d9e:	fb06 f609 	mul.w	r6, r6, r9
 8014da2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8014da6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8014daa:	1a52      	subs	r2, r2, r1
 8014dac:	1c53      	adds	r3, r2, #1
 8014dae:	1b9b      	subs	r3, r3, r6
 8014db0:	bf48      	it	mi
 8014db2:	3301      	addmi	r3, #1
 8014db4:	eb01 0663 	add.w	r6, r1, r3, asr #1
 8014db8:	e764      	b.n	8014c84 <GUI__DispStringInRect+0x30>
 8014dba:	a804      	add	r0, sp, #16
 8014dbc:	f7fe ff8a 	bl	8013cd4 <GUI_GetClientRect>
 8014dc0:	e75b      	b.n	8014c7a <GUI__DispStringInRect+0x26>
 8014dc2:	f1bb 0f08 	cmp.w	fp, #8
 8014dc6:	d005      	beq.n	8014dd4 <GUI__DispStringInRect+0x180>
 8014dc8:	f1bb 0f0c 	cmp.w	fp, #12
 8014dcc:	d004      	beq.n	8014dd8 <GUI__DispStringInRect+0x184>
 8014dce:	f1bb 0f04 	cmp.w	fp, #4
 8014dd2:	d1b2      	bne.n	8014d3a <GUI__DispStringInRect+0xe6>
 8014dd4:	2600      	movs	r6, #0
 8014dd6:	e7dd      	b.n	8014d94 <GUI__DispStringInRect+0x140>
 8014dd8:	462e      	mov	r6, r5
 8014dda:	e7e2      	b.n	8014da2 <GUI__DispStringInRect+0x14e>
 8014ddc:	20000018 	.word	0x20000018

08014de0 <GUI_DispStringInRectMax>:
 8014de0:	b330      	cbz	r0, 8014e30 <GUI_DispStringInRectMax+0x50>
 8014de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de6:	460c      	mov	r4, r1
 8014de8:	b082      	sub	sp, #8
 8014dea:	4605      	mov	r5, r0
 8014dec:	461f      	mov	r7, r3
 8014dee:	4616      	mov	r6, r2
 8014df0:	f003 fbd8 	bl	80185a4 <GUI_Lock>
 8014df4:	b1d4      	cbz	r4, 8014e2c <GUI_DispStringInRectMax+0x4c>
 8014df6:	4620      	mov	r0, r4
 8014df8:	f00c fc1c 	bl	8021634 <WM_SetUserClipRect>
 8014dfc:	4680      	mov	r8, r0
 8014dfe:	b138      	cbz	r0, 8014e10 <GUI_DispStringInRectMax+0x30>
 8014e00:	4602      	mov	r2, r0
 8014e02:	4621      	mov	r1, r4
 8014e04:	4668      	mov	r0, sp
 8014e06:	f004 fd9d 	bl	8019944 <GUI__IntersectRects>
 8014e0a:	4668      	mov	r0, sp
 8014e0c:	f00c fc12 	bl	8021634 <WM_SetUserClipRect>
 8014e10:	463b      	mov	r3, r7
 8014e12:	4632      	mov	r2, r6
 8014e14:	4621      	mov	r1, r4
 8014e16:	4628      	mov	r0, r5
 8014e18:	f7ff ff1c 	bl	8014c54 <GUI__DispStringInRect>
 8014e1c:	4640      	mov	r0, r8
 8014e1e:	f00c fc09 	bl	8021634 <WM_SetUserClipRect>
 8014e22:	f003 fbb5 	bl	8018590 <GUI_Unlock>
 8014e26:	b002      	add	sp, #8
 8014e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e2c:	46a0      	mov	r8, r4
 8014e2e:	e7ef      	b.n	8014e10 <GUI_DispStringInRectMax+0x30>
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop

08014e34 <GUI_WrapGetNumLines>:
 8014e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e36:	4604      	mov	r4, r0
 8014e38:	460f      	mov	r7, r1
 8014e3a:	4616      	mov	r6, r2
 8014e3c:	f003 fbb2 	bl	80185a4 <GUI_Lock>
 8014e40:	4639      	mov	r1, r7
 8014e42:	4620      	mov	r0, r4
 8014e44:	4632      	mov	r2, r6
 8014e46:	2500      	movs	r5, #0
 8014e48:	f005 f810 	bl	8019e6c <GUI__WrapGetNumBytesToNextLine>
 8014e4c:	b140      	cbz	r0, 8014e60 <GUI_WrapGetNumLines+0x2c>
 8014e4e:	4404      	add	r4, r0
 8014e50:	4632      	mov	r2, r6
 8014e52:	4639      	mov	r1, r7
 8014e54:	3501      	adds	r5, #1
 8014e56:	4620      	mov	r0, r4
 8014e58:	f005 f808 	bl	8019e6c <GUI__WrapGetNumBytesToNextLine>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d1f6      	bne.n	8014e4e <GUI_WrapGetNumLines+0x1a>
 8014e60:	f003 fb96 	bl	8018590 <GUI_Unlock>
 8014e64:	4628      	mov	r0, r5
 8014e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e68 <GUI_DispStringInRectWrap>:
 8014e68:	b108      	cbz	r0, 8014e6e <GUI_DispStringInRectWrap+0x6>
 8014e6a:	f7ff bde3 	b.w	8014a34 <GUI_DispStringInRectWrap.part.1>
 8014e6e:	4770      	bx	lr

08014e70 <GUI_GetStringDistX>:
 8014e70:	b510      	push	{r4, lr}
 8014e72:	4604      	mov	r4, r0
 8014e74:	f003 fcd8 	bl	8018828 <GUI__GetNumChars>
 8014e78:	4601      	mov	r1, r0
 8014e7a:	4620      	mov	r0, r4
 8014e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e80:	f00d bee8 	b.w	8022c54 <GUI__GetLineDistX>

08014e84 <GUI_DispStringInRectEx>:
 8014e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e88:	b085      	sub	sp, #20
 8014e8a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014e8c:	2d00      	cmp	r5, #0
 8014e8e:	d04f      	beq.n	8014f30 <GUI_DispStringInRectEx+0xac>
 8014e90:	460c      	mov	r4, r1
 8014e92:	469b      	mov	fp, r3
 8014e94:	2300      	movs	r3, #0
 8014e96:	4681      	mov	r9, r0
 8014e98:	4692      	mov	sl, r2
 8014e9a:	9303      	str	r3, [sp, #12]
 8014e9c:	9302      	str	r3, [sp, #8]
 8014e9e:	f003 fb81 	bl	80185a4 <GUI_Lock>
 8014ea2:	2c00      	cmp	r4, #0
 8014ea4:	d03e      	beq.n	8014f24 <GUI_DispStringInRectEx+0xa0>
 8014ea6:	aa02      	add	r2, sp, #8
 8014ea8:	6820      	ldr	r0, [r4, #0]
 8014eaa:	6861      	ldr	r1, [r4, #4]
 8014eac:	4613      	mov	r3, r2
 8014eae:	c203      	stmia	r2!, {r0, r1}
 8014eb0:	4a22      	ldr	r2, [pc, #136]	; (8014f3c <GUI_DispStringInRectEx+0xb8>)
 8014eb2:	cb03      	ldmia	r3!, {r0, r1}
 8014eb4:	6010      	str	r0, [r2, #0]
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	6051      	str	r1, [r2, #4]
 8014eba:	f00c fbbb 	bl	8021634 <WM_SetUserClipRect>
 8014ebe:	4605      	mov	r5, r0
 8014ec0:	b138      	cbz	r0, 8014ed2 <GUI_DispStringInRectEx+0x4e>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	4668      	mov	r0, sp
 8014ec8:	f004 fd3c 	bl	8019944 <GUI__IntersectRects>
 8014ecc:	4668      	mov	r0, sp
 8014ece:	f00c fbb1 	bl	8021634 <WM_SetUserClipRect>
 8014ed2:	4f1b      	ldr	r7, [pc, #108]	; (8014f40 <GUI_DispStringInRectEx+0xbc>)
 8014ed4:	f003 fb66 	bl	80185a4 <GUI_Lock>
 8014ed8:	f04f 0800 	mov.w	r8, #0
 8014edc:	4c19      	ldr	r4, [pc, #100]	; (8014f44 <GUI_DispStringInRectEx+0xc0>)
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	6826      	ldr	r6, [r4, #0]
 8014ee2:	f8c3 8014 	str.w	r8, [r3, #20]
 8014ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ee8:	6023      	str	r3, [r4, #0]
 8014eea:	f003 fb51 	bl	8018590 <GUI_Unlock>
 8014eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ef0:	a802      	add	r0, sp, #8
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	4798      	blx	r3
 8014ef6:	465b      	mov	r3, fp
 8014ef8:	4652      	mov	r2, sl
 8014efa:	a902      	add	r1, sp, #8
 8014efc:	4648      	mov	r0, r9
 8014efe:	f7ff fea9 	bl	8014c54 <GUI__DispStringInRect>
 8014f02:	4628      	mov	r0, r5
 8014f04:	f00c fb96 	bl	8021634 <WM_SetUserClipRect>
 8014f08:	f003 fb4c 	bl	80185a4 <GUI_Lock>
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	b15e      	cbz	r6, 8014f28 <GUI_DispStringInRectEx+0xa4>
 8014f10:	f8c3 8014 	str.w	r8, [r3, #20]
 8014f14:	6026      	str	r6, [r4, #0]
 8014f16:	f003 fb3b 	bl	8018590 <GUI_Unlock>
 8014f1a:	f003 fb39 	bl	8018590 <GUI_Unlock>
 8014f1e:	b005      	add	sp, #20
 8014f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f24:	4625      	mov	r5, r4
 8014f26:	e7d4      	b.n	8014ed2 <GUI_DispStringInRectEx+0x4e>
 8014f28:	f103 0208 	add.w	r2, r3, #8
 8014f2c:	615a      	str	r2, [r3, #20]
 8014f2e:	e7f1      	b.n	8014f14 <GUI_DispStringInRectEx+0x90>
 8014f30:	f7ff ff56 	bl	8014de0 <GUI_DispStringInRectMax>
 8014f34:	b005      	add	sp, #20
 8014f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f3a:	bf00      	nop
 8014f3c:	200467e0 	.word	0x200467e0
 8014f40:	20000018 	.word	0x20000018
 8014f44:	2004678c 	.word	0x2004678c

08014f48 <GUI_DrawGradientV>:
 8014f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4c:	b091      	sub	sp, #68	; 0x44
 8014f4e:	4680      	mov	r8, r0
 8014f50:	461e      	mov	r6, r3
 8014f52:	460f      	mov	r7, r1
 8014f54:	4691      	mov	r9, r2
 8014f56:	f003 fb25 	bl	80185a4 <GUI_Lock>
 8014f5a:	4b67      	ldr	r3, [pc, #412]	; (80150f8 <GUI_DrawGradientV+0x1b0>)
 8014f5c:	a80e      	add	r0, sp, #56	; 0x38
 8014f5e:	681c      	ldr	r4, [r3, #0]
 8014f60:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8014f62:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8014f64:	eb05 0308 	add.w	r3, r5, r8
 8014f68:	eb05 0209 	add.w	r2, r5, r9
 8014f6c:	19e1      	adds	r1, r4, r7
 8014f6e:	4434      	add	r4, r6
 8014f70:	9307      	str	r3, [sp, #28]
 8014f72:	9208      	str	r2, [sp, #32]
 8014f74:	9102      	str	r1, [sp, #8]
 8014f76:	9401      	str	r4, [sp, #4]
 8014f78:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8014f7c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8014f80:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 8014f84:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8014f88:	f00b fde4 	bl	8020b54 <WM__InitIVRSearch>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	f000 8097 	beq.w	80150c0 <GUI_DrawGradientV+0x178>
 8014f92:	9b01      	ldr	r3, [sp, #4]
 8014f94:	9a02      	ldr	r2, [sp, #8]
 8014f96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014f98:	ebc2 0b03 	rsb	fp, r2, r3
 8014f9c:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8014fa0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014fa4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fa6:	f1bb 0f00 	cmp.w	fp, #0
 8014faa:	465b      	mov	r3, fp
 8014fac:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8014fb0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014fb2:	bfb8      	it	lt
 8014fb4:	f10b 0301 	addlt.w	r3, fp, #1
 8014fb8:	fb0b fe02 	mul.w	lr, fp, r2
 8014fbc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8014fc0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fc2:	105b      	asrs	r3, r3, #1
 8014fc4:	f89d c06c 	ldrb.w	ip, [sp, #108]	; 0x6c
 8014fc8:	f3c1 4607 	ubfx	r6, r1, #16, #8
 8014fcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014fce:	eb03 050e 	add.w	r5, r3, lr
 8014fd2:	0e09      	lsrs	r1, r1, #24
 8014fd4:	950a      	str	r5, [sp, #40]	; 0x28
 8014fd6:	fb0b 3504 	mla	r5, fp, r4, r3
 8014fda:	1b3c      	subs	r4, r7, r4
 8014fdc:	9403      	str	r4, [sp, #12]
 8014fde:	fb0b 3400 	mla	r4, fp, r0, r3
 8014fe2:	1a30      	subs	r0, r6, r0
 8014fe4:	fb0b 3301 	mla	r3, fp, r1, r3
 8014fe8:	465e      	mov	r6, fp
 8014fea:	950b      	str	r5, [sp, #44]	; 0x2c
 8014fec:	930d      	str	r3, [sp, #52]	; 0x34
 8014fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ff0:	940c      	str	r4, [sp, #48]	; 0x30
 8014ff2:	ebc1 6313 	rsb	r3, r1, r3, lsr #24
 8014ff6:	9004      	str	r0, [sp, #16]
 8014ff8:	9305      	str	r3, [sp, #20]
 8014ffa:	ebc2 030c 	rsb	r3, r2, ip
 8014ffe:	9306      	str	r3, [sp, #24]
 8015000:	f7fe fe78 	bl	8013cf4 <GUI_GetColor>
 8015004:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015006:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015008:	9009      	str	r0, [sp, #36]	; 0x24
 801500a:	4293      	cmp	r3, r2
 801500c:	d069      	beq.n	80150e2 <GUI_DrawGradientV+0x19a>
 801500e:	2e00      	cmp	r6, #0
 8015010:	d052      	beq.n	80150b8 <GUI_DrawGradientV+0x170>
 8015012:	9d02      	ldr	r5, [sp, #8]
 8015014:	9a01      	ldr	r2, [sp, #4]
 8015016:	4295      	cmp	r5, r2
 8015018:	dc5b      	bgt.n	80150d2 <GUI_DrawGradientV+0x18a>
 801501a:	af0a      	add	r7, sp, #40	; 0x28
 801501c:	4686      	mov	lr, r0
 801501e:	f04f 0b01 	mov.w	fp, #1
 8015022:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 8015026:	e006      	b.n	8015036 <GUI_DrawGradientV+0xee>
 8015028:	f10b 0b01 	add.w	fp, fp, #1
 801502c:	3501      	adds	r5, #1
 801502e:	9b01      	ldr	r3, [sp, #4]
 8015030:	46a6      	mov	lr, r4
 8015032:	42ab      	cmp	r3, r5
 8015034:	db2f      	blt.n	8015096 <GUI_DrawGradientV+0x14e>
 8015036:	4670      	mov	r0, lr
 8015038:	fb9a f4f6 	sdiv	r4, sl, r6
 801503c:	fb99 f1f6 	sdiv	r1, r9, r6
 8015040:	fb97 f3f6 	sdiv	r3, r7, r6
 8015044:	fb98 fcf6 	sdiv	ip, r8, r6
 8015048:	0622      	lsls	r2, r4, #24
 801504a:	9c05      	ldr	r4, [sp, #20]
 801504c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8015050:	44a2      	add	sl, r4
 8015052:	ea42 4401 	orr.w	r4, r2, r1, lsl #16
 8015056:	9a04      	ldr	r2, [sp, #16]
 8015058:	431c      	orrs	r4, r3
 801505a:	9b02      	ldr	r3, [sp, #8]
 801505c:	4491      	add	r9, r2
 801505e:	9a06      	ldr	r2, [sp, #24]
 8015060:	42ab      	cmp	r3, r5
 8015062:	4417      	add	r7, r2
 8015064:	9a03      	ldr	r2, [sp, #12]
 8015066:	4490      	add	r8, r2
 8015068:	dae0      	bge.n	801502c <GUI_DrawGradientV+0xe4>
 801506a:	4574      	cmp	r4, lr
 801506c:	d0dc      	beq.n	8015028 <GUI_DrawGradientV+0xe0>
 801506e:	f005 fbcb 	bl	801a808 <LCD_SetColor>
 8015072:	f1bb 0f01 	cmp.w	fp, #1
 8015076:	ebcb 0105 	rsb	r1, fp, r5
 801507a:	f105 33ff 	add.w	r3, r5, #4294967295
 801507e:	9a08      	ldr	r2, [sp, #32]
 8015080:	9807      	ldr	r0, [sp, #28]
 8015082:	d022      	beq.n	80150ca <GUI_DrawGradientV+0x182>
 8015084:	f005 f82c 	bl	801a0e0 <LCD_FillRect>
 8015088:	3501      	adds	r5, #1
 801508a:	9b01      	ldr	r3, [sp, #4]
 801508c:	f04f 0b01 	mov.w	fp, #1
 8015090:	46a6      	mov	lr, r4
 8015092:	42ab      	cmp	r3, r5
 8015094:	dacf      	bge.n	8015036 <GUI_DrawGradientV+0xee>
 8015096:	4620      	mov	r0, r4
 8015098:	f005 fbb6 	bl	801a808 <LCD_SetColor>
 801509c:	f1bb 0f01 	cmp.w	fp, #1
 80150a0:	d019      	beq.n	80150d6 <GUI_DrawGradientV+0x18e>
 80150a2:	9b01      	ldr	r3, [sp, #4]
 80150a4:	9a08      	ldr	r2, [sp, #32]
 80150a6:	ebcb 0103 	rsb	r1, fp, r3
 80150aa:	9807      	ldr	r0, [sp, #28]
 80150ac:	3101      	adds	r1, #1
 80150ae:	f005 f817 	bl	801a0e0 <LCD_FillRect>
 80150b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150b4:	f005 fba8 	bl	801a808 <LCD_SetColor>
 80150b8:	f00b fc22 	bl	8020900 <WM__GetNextIVR>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d19f      	bne.n	8015000 <GUI_DrawGradientV+0xb8>
 80150c0:	f003 fa66 	bl	8018590 <GUI_Unlock>
 80150c4:	b011      	add	sp, #68	; 0x44
 80150c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ca:	1e69      	subs	r1, r5, #1
 80150cc:	f004 ffb8 	bl	801a040 <LCD_DrawHLine>
 80150d0:	e7ac      	b.n	801502c <GUI_DrawGradientV+0xe4>
 80150d2:	f005 fb99 	bl	801a808 <LCD_SetColor>
 80150d6:	9a08      	ldr	r2, [sp, #32]
 80150d8:	9901      	ldr	r1, [sp, #4]
 80150da:	9807      	ldr	r0, [sp, #28]
 80150dc:	f004 ffb0 	bl	801a040 <LCD_DrawHLine>
 80150e0:	e7e7      	b.n	80150b2 <GUI_DrawGradientV+0x16a>
 80150e2:	4618      	mov	r0, r3
 80150e4:	f005 fb90 	bl	801a808 <LCD_SetColor>
 80150e8:	9b01      	ldr	r3, [sp, #4]
 80150ea:	9a08      	ldr	r2, [sp, #32]
 80150ec:	9902      	ldr	r1, [sp, #8]
 80150ee:	9807      	ldr	r0, [sp, #28]
 80150f0:	f004 fff6 	bl	801a0e0 <LCD_FillRect>
 80150f4:	e7dd      	b.n	80150b2 <GUI_DrawGradientV+0x16a>
 80150f6:	bf00      	nop
 80150f8:	20000018 	.word	0x20000018

080150fc <GUI_DrawGraph>:
 80150fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	b085      	sub	sp, #20
 8015102:	461c      	mov	r4, r3
 8015104:	4616      	mov	r6, r2
 8015106:	9003      	str	r0, [sp, #12]
 8015108:	9101      	str	r1, [sp, #4]
 801510a:	f003 fa4b 	bl	80185a4 <GUI_Lock>
 801510e:	4b40      	ldr	r3, [pc, #256]	; (8015210 <GUI_DrawGraph+0x114>)
 8015110:	2000      	movs	r0, #0
 8015112:	6819      	ldr	r1, [r3, #0]
 8015114:	6ccf      	ldr	r7, [r1, #76]	; 0x4c
 8015116:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8015118:	f00b fd1c 	bl	8020b54 <WM__InitIVRSearch>
 801511c:	2800      	cmp	r0, #0
 801511e:	d05f      	beq.n	80151e0 <GUI_DrawGraph+0xe4>
 8015120:	eb07 0b06 	add.w	fp, r7, r6
 8015124:	eb05 0a04 	add.w	sl, r5, r4
 8015128:	4b39      	ldr	r3, [pc, #228]	; (8015210 <GUI_DrawGraph+0x114>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	6959      	ldr	r1, [r3, #20]
 801512e:	2900      	cmp	r1, #0
 8015130:	d067      	beq.n	8015202 <GUI_DrawGraph+0x106>
 8015132:	9801      	ldr	r0, [sp, #4]
 8015134:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015138:	4458      	add	r0, fp
 801513a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801513e:	45ab      	cmp	fp, r5
 8015140:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8015144:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015148:	f100 31ff 	add.w	r1, r0, #4294967295
 801514c:	bfb4      	ite	lt
 801514e:	ebcb 0205 	rsblt	r2, fp, r5
 8015152:	2200      	movge	r2, #0
 8015154:	42b9      	cmp	r1, r7
 8015156:	dd52      	ble.n	80151fe <GUI_DrawGraph+0x102>
 8015158:	ebcb 0707 	rsb	r7, fp, r7
 801515c:	3701      	adds	r7, #1
 801515e:	4297      	cmp	r7, r2
 8015160:	dd3a      	ble.n	80151d8 <GUI_DrawGraph+0xdc>
 8015162:	9803      	ldr	r0, [sp, #12]
 8015164:	1c51      	adds	r1, r2, #1
 8015166:	f930 e012 	ldrsh.w	lr, [r0, r2, lsl #1]
 801516a:	428f      	cmp	r7, r1
 801516c:	eb00 0642 	add.w	r6, r0, r2, lsl #1
 8015170:	44d6      	add	lr, sl
 8015172:	dd31      	ble.n	80151d8 <GUI_DrawGraph+0xdc>
 8015174:	f10b 0501 	add.w	r5, fp, #1
 8015178:	445f      	add	r7, fp
 801517a:	f8cd b008 	str.w	fp, [sp, #8]
 801517e:	469b      	mov	fp, r3
 8015180:	4415      	add	r5, r2
 8015182:	e005      	b.n	8015190 <GUI_DrawGraph+0x94>
 8015184:	4544      	cmp	r4, r8
 8015186:	da08      	bge.n	801519a <GUI_DrawGraph+0x9e>
 8015188:	3501      	adds	r5, #1
 801518a:	46a6      	mov	lr, r4
 801518c:	42af      	cmp	r7, r5
 801518e:	d021      	beq.n	80151d4 <GUI_DrawGraph+0xd8>
 8015190:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
 8015194:	45c6      	cmp	lr, r8
 8015196:	4454      	add	r4, sl
 8015198:	dbf4      	blt.n	8015184 <GUI_DrawGraph+0x88>
 801519a:	45de      	cmp	lr, fp
 801519c:	dd01      	ble.n	80151a2 <GUI_DrawGraph+0xa6>
 801519e:	455c      	cmp	r4, fp
 80151a0:	dcf2      	bgt.n	8015188 <GUI_DrawGraph+0x8c>
 80151a2:	eb14 090e 	adds.w	r9, r4, lr
 80151a6:	4671      	mov	r1, lr
 80151a8:	f105 30ff 	add.w	r0, r5, #4294967295
 80151ac:	4672      	mov	r2, lr
 80151ae:	bf48      	it	mi
 80151b0:	f109 0901 	addmi.w	r9, r9, #1
 80151b4:	4574      	cmp	r4, lr
 80151b6:	ea4f 0969 	mov.w	r9, r9, asr #1
 80151ba:	db16      	blt.n	80151ea <GUI_DrawGraph+0xee>
 80151bc:	464a      	mov	r2, r9
 80151be:	f004 ff67 	bl	801a090 <LCD_DrawVLine>
 80151c2:	4628      	mov	r0, r5
 80151c4:	3501      	adds	r5, #1
 80151c6:	4622      	mov	r2, r4
 80151c8:	4649      	mov	r1, r9
 80151ca:	f004 ff61 	bl	801a090 <LCD_DrawVLine>
 80151ce:	42af      	cmp	r7, r5
 80151d0:	46a6      	mov	lr, r4
 80151d2:	d1dd      	bne.n	8015190 <GUI_DrawGraph+0x94>
 80151d4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80151d8:	f00b fb92 	bl	8020900 <WM__GetNextIVR>
 80151dc:	2800      	cmp	r0, #0
 80151de:	d1a3      	bne.n	8015128 <GUI_DrawGraph+0x2c>
 80151e0:	b005      	add	sp, #20
 80151e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e6:	f003 b9d3 	b.w	8018590 <GUI_Unlock>
 80151ea:	4649      	mov	r1, r9
 80151ec:	1e68      	subs	r0, r5, #1
 80151ee:	f004 ff4f 	bl	801a090 <LCD_DrawVLine>
 80151f2:	464a      	mov	r2, r9
 80151f4:	4621      	mov	r1, r4
 80151f6:	4628      	mov	r0, r5
 80151f8:	f004 ff4a 	bl	801a090 <LCD_DrawVLine>
 80151fc:	e7c4      	b.n	8015188 <GUI_DrawGraph+0x8c>
 80151fe:	9f01      	ldr	r7, [sp, #4]
 8015200:	e7ad      	b.n	801515e <GUI_DrawGraph+0x62>
 8015202:	f04f 33ff 	mov.w	r3, #4294967295
 8015206:	460a      	mov	r2, r1
 8015208:	9f01      	ldr	r7, [sp, #4]
 801520a:	4698      	mov	r8, r3
 801520c:	e7a7      	b.n	801515e <GUI_DrawGraph+0x62>
 801520e:	bf00      	nop
 8015210:	20000018 	.word	0x20000018

08015214 <GUI_DrawHLine>:
 8015214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015216:	4f14      	ldr	r7, [pc, #80]	; (8015268 <GUI_DrawHLine+0x54>)
 8015218:	b083      	sub	sp, #12
 801521a:	4606      	mov	r6, r0
 801521c:	460d      	mov	r5, r1
 801521e:	4614      	mov	r4, r2
 8015220:	f003 f9c0 	bl	80185a4 <GUI_Lock>
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	4668      	mov	r0, sp
 8015228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801522a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801522c:	440e      	add	r6, r1
 801522e:	4415      	add	r5, r2
 8015230:	4414      	add	r4, r2
 8015232:	b233      	sxth	r3, r6
 8015234:	f8ad 5000 	strh.w	r5, [sp]
 8015238:	f8ad 4004 	strh.w	r4, [sp, #4]
 801523c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015240:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015244:	f00b fc86 	bl	8020b54 <WM__InitIVRSearch>
 8015248:	b150      	cbz	r0, 8015260 <GUI_DrawHLine+0x4c>
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	4622      	mov	r2, r4
 801524e:	4631      	mov	r1, r6
 8015250:	4628      	mov	r0, r5
 8015252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	4798      	blx	r3
 8015258:	f00b fb52 	bl	8020900 <WM__GetNextIVR>
 801525c:	2800      	cmp	r0, #0
 801525e:	d1f4      	bne.n	801524a <GUI_DrawHLine+0x36>
 8015260:	f003 f996 	bl	8018590 <GUI_Unlock>
 8015264:	b003      	add	sp, #12
 8015266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015268:	20000018 	.word	0x20000018

0801526c <GUI_DrawPie>:
 801526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015270:	b082      	sub	sp, #8
 8015272:	4605      	mov	r5, r0
 8015274:	4698      	mov	r8, r3
 8015276:	460f      	mov	r7, r1
 8015278:	4614      	mov	r4, r2
 801527a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801527e:	f003 f991 	bl	80185a4 <GUI_Lock>
 8015282:	4b14      	ldr	r3, [pc, #80]	; (80152d4 <GUI_DrawPie+0x68>)
 8015284:	2000      	movs	r0, #0
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801528a:	f8d3 a050 	ldr.w	sl, [r3, #80]	; 0x50
 801528e:	f00b fc61 	bl	8020b54 <WM__InitIVRSearch>
 8015292:	b1c8      	cbz	r0, 80152c8 <GUI_DrawPie+0x5c>
 8015294:	4457      	add	r7, sl
 8015296:	442e      	add	r6, r5
 8015298:	fa5f fa84 	uxtb.w	sl, r4
 801529c:	0864      	lsrs	r4, r4, #1
 801529e:	f7fe fe5f 	bl	8013f60 <GUI_GetPenSize>
 80152a2:	4605      	mov	r5, r0
 80152a4:	4650      	mov	r0, sl
 80152a6:	f7fe fe67 	bl	8013f78 <GUI_SetPenSize>
 80152aa:	4623      	mov	r3, r4
 80152ac:	4622      	mov	r2, r4
 80152ae:	4639      	mov	r1, r7
 80152b0:	4630      	mov	r0, r6
 80152b2:	e88d 0300 	stmia.w	sp, {r8, r9}
 80152b6:	f00d fb75 	bl	80229a4 <GL_DrawArc>
 80152ba:	4628      	mov	r0, r5
 80152bc:	f7fe fe5c 	bl	8013f78 <GUI_SetPenSize>
 80152c0:	f00b fb1e 	bl	8020900 <WM__GetNextIVR>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d1ea      	bne.n	801529e <GUI_DrawPie+0x32>
 80152c8:	b002      	add	sp, #8
 80152ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152ce:	f003 b95f 	b.w	8018590 <GUI_Unlock>
 80152d2:	bf00      	nop
 80152d4:	20000018 	.word	0x20000018

080152d8 <GUI_DrawPixel>:
 80152d8:	b570      	push	{r4, r5, r6, lr}
 80152da:	4e13      	ldr	r6, [pc, #76]	; (8015328 <GUI_DrawPixel+0x50>)
 80152dc:	b082      	sub	sp, #8
 80152de:	4605      	mov	r5, r0
 80152e0:	460c      	mov	r4, r1
 80152e2:	f003 f95f 	bl	80185a4 <GUI_Lock>
 80152e6:	6833      	ldr	r3, [r6, #0]
 80152e8:	4668      	mov	r0, sp
 80152ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80152ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152ee:	4415      	add	r5, r2
 80152f0:	441c      	add	r4, r3
 80152f2:	b22a      	sxth	r2, r5
 80152f4:	b223      	sxth	r3, r4
 80152f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80152fa:	f8ad 2000 	strh.w	r2, [sp]
 80152fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015302:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015306:	f00b fc25 	bl	8020b54 <WM__InitIVRSearch>
 801530a:	b148      	cbz	r0, 8015320 <GUI_DrawPixel+0x48>
 801530c:	6833      	ldr	r3, [r6, #0]
 801530e:	4621      	mov	r1, r4
 8015310:	4628      	mov	r0, r5
 8015312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4798      	blx	r3
 8015318:	f00b faf2 	bl	8020900 <WM__GetNextIVR>
 801531c:	2800      	cmp	r0, #0
 801531e:	d1f5      	bne.n	801530c <GUI_DrawPixel+0x34>
 8015320:	f003 f936 	bl	8018590 <GUI_Unlock>
 8015324:	b002      	add	sp, #8
 8015326:	bd70      	pop	{r4, r5, r6, pc}
 8015328:	20000018 	.word	0x20000018

0801532c <GL_DrawPoint>:
 801532c:	4b06      	ldr	r3, [pc, #24]	; (8015348 <GL_DrawPoint+0x1c>)
 801532e:	681a      	ldr	r2, [r3, #0]
 8015330:	7e13      	ldrb	r3, [r2, #24]
 8015332:	2b01      	cmp	r3, #1
 8015334:	d005      	beq.n	8015342 <GL_DrawPoint+0x16>
 8015336:	1e5a      	subs	r2, r3, #1
 8015338:	bf48      	it	mi
 801533a:	461a      	movmi	r2, r3
 801533c:	1052      	asrs	r2, r2, #1
 801533e:	f7fe b8f5 	b.w	801352c <GL_FillCircle>
 8015342:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	4718      	bx	r3
 8015348:	20000018 	.word	0x20000018

0801534c <GUI_DrawPoint>:
 801534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015350:	4e14      	ldr	r6, [pc, #80]	; (80153a4 <GUI_DrawPoint+0x58>)
 8015352:	4605      	mov	r5, r0
 8015354:	460c      	mov	r4, r1
 8015356:	f003 f925 	bl	80185a4 <GUI_Lock>
 801535a:	6833      	ldr	r3, [r6, #0]
 801535c:	2000      	movs	r0, #0
 801535e:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8015362:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8015364:	f00b fbf6 	bl	8020b54 <WM__InitIVRSearch>
 8015368:	b1c0      	cbz	r0, 801539c <GUI_DrawPoint+0x50>
 801536a:	4445      	add	r5, r8
 801536c:	443c      	add	r4, r7
 801536e:	e008      	b.n	8015382 <GUI_DrawPoint+0x36>
 8015370:	1e5a      	subs	r2, r3, #1
 8015372:	bf48      	it	mi
 8015374:	461a      	movmi	r2, r3
 8015376:	1052      	asrs	r2, r2, #1
 8015378:	f7fe f8d8 	bl	801352c <GL_FillCircle>
 801537c:	f00b fac0 	bl	8020900 <WM__GetNextIVR>
 8015380:	b160      	cbz	r0, 801539c <GUI_DrawPoint+0x50>
 8015382:	6832      	ldr	r2, [r6, #0]
 8015384:	4621      	mov	r1, r4
 8015386:	4628      	mov	r0, r5
 8015388:	7e13      	ldrb	r3, [r2, #24]
 801538a:	2b01      	cmp	r3, #1
 801538c:	d1f0      	bne.n	8015370 <GUI_DrawPoint+0x24>
 801538e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	4798      	blx	r3
 8015394:	f00b fab4 	bl	8020900 <WM__GetNextIVR>
 8015398:	2800      	cmp	r0, #0
 801539a:	d1f2      	bne.n	8015382 <GUI_DrawPoint+0x36>
 801539c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153a0:	f003 b8f6 	b.w	8018590 <GUI_Unlock>
 80153a4:	20000018 	.word	0x20000018

080153a8 <GUI_DrawVLine>:
 80153a8:	b570      	push	{r4, r5, r6, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	4606      	mov	r6, r0
 80153ae:	4614      	mov	r4, r2
 80153b0:	460d      	mov	r5, r1
 80153b2:	f003 f8f7 	bl	80185a4 <GUI_Lock>
 80153b6:	4b10      	ldr	r3, [pc, #64]	; (80153f8 <GUI_DrawVLine+0x50>)
 80153b8:	4668      	mov	r0, sp
 80153ba:	681a      	ldr	r2, [r3, #0]
 80153bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80153be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80153c0:	441e      	add	r6, r3
 80153c2:	4415      	add	r5, r2
 80153c4:	4414      	add	r4, r2
 80153c6:	b233      	sxth	r3, r6
 80153c8:	f8ad 5002 	strh.w	r5, [sp, #2]
 80153cc:	f8ad 4006 	strh.w	r4, [sp, #6]
 80153d0:	f8ad 3000 	strh.w	r3, [sp]
 80153d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80153d8:	f00b fbbc 	bl	8020b54 <WM__InitIVRSearch>
 80153dc:	b140      	cbz	r0, 80153f0 <GUI_DrawVLine+0x48>
 80153de:	4622      	mov	r2, r4
 80153e0:	4629      	mov	r1, r5
 80153e2:	4630      	mov	r0, r6
 80153e4:	f004 fe54 	bl	801a090 <LCD_DrawVLine>
 80153e8:	f00b fa8a 	bl	8020900 <WM__GetNextIVR>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d1f6      	bne.n	80153de <GUI_DrawVLine+0x36>
 80153f0:	f003 f8ce 	bl	8018590 <GUI_Unlock>
 80153f4:	b002      	add	sp, #8
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
 80153f8:	20000018 	.word	0x20000018

080153fc <GUI_FillRect>:
 80153fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153fe:	b083      	sub	sp, #12
 8015400:	4607      	mov	r7, r0
 8015402:	4616      	mov	r6, r2
 8015404:	461c      	mov	r4, r3
 8015406:	460d      	mov	r5, r1
 8015408:	f003 f8cc 	bl	80185a4 <GUI_Lock>
 801540c:	4b10      	ldr	r3, [pc, #64]	; (8015450 <GUI_FillRect+0x54>)
 801540e:	4668      	mov	r0, sp
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015416:	4417      	add	r7, r2
 8015418:	4416      	add	r6, r2
 801541a:	441d      	add	r5, r3
 801541c:	441c      	add	r4, r3
 801541e:	f8ad 7000 	strh.w	r7, [sp]
 8015422:	f8ad 6004 	strh.w	r6, [sp, #4]
 8015426:	f8ad 5002 	strh.w	r5, [sp, #2]
 801542a:	f8ad 4006 	strh.w	r4, [sp, #6]
 801542e:	f00b fb91 	bl	8020b54 <WM__InitIVRSearch>
 8015432:	b148      	cbz	r0, 8015448 <GUI_FillRect+0x4c>
 8015434:	4623      	mov	r3, r4
 8015436:	4632      	mov	r2, r6
 8015438:	4629      	mov	r1, r5
 801543a:	4638      	mov	r0, r7
 801543c:	f004 fe50 	bl	801a0e0 <LCD_FillRect>
 8015440:	f00b fa5e 	bl	8020900 <WM__GetNextIVR>
 8015444:	2800      	cmp	r0, #0
 8015446:	d1f5      	bne.n	8015434 <GUI_FillRect+0x38>
 8015448:	f003 f8a2 	bl	8018590 <GUI_Unlock>
 801544c:	b003      	add	sp, #12
 801544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015450:	20000018 	.word	0x20000018

08015454 <GL_DrawLine1Ex>:
 8015454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015458:	1a16      	subs	r6, r2, r0
 801545a:	1a5d      	subs	r5, r3, r1
 801545c:	b085      	sub	sp, #20
 801545e:	469e      	mov	lr, r3
 8015460:	ea56 0305 	orrs.w	r3, r6, r5
 8015464:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8015468:	d079      	beq.n	801555e <GL_DrawLine1Ex+0x10a>
 801546a:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 801546e:	4607      	mov	r7, r0
 8015470:	ea85 74e5 	eor.w	r4, r5, r5, asr #31
 8015474:	4689      	mov	r9, r1
 8015476:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 801547a:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
 801547e:	429c      	cmp	r4, r3
 8015480:	dc2f      	bgt.n	80154e2 <GL_DrawLine1Ex+0x8e>
 8015482:	461c      	mov	r4, r3
 8015484:	2300      	movs	r3, #0
 8015486:	42a6      	cmp	r6, r4
 8015488:	9301      	str	r3, [sp, #4]
 801548a:	d038      	beq.n	80154fe <GL_DrawLine1Ex+0xaa>
 801548c:	4639      	mov	r1, r7
 801548e:	f04f 33ff 	mov.w	r3, #4294967295
 8015492:	426d      	negs	r5, r5
 8015494:	4617      	mov	r7, r2
 8015496:	4274      	negs	r4, r6
 8015498:	460a      	mov	r2, r1
 801549a:	46f1      	mov	r9, lr
 801549c:	9303      	str	r3, [sp, #12]
 801549e:	f8db 1000 	ldr.w	r1, [fp]
 80154a2:	bb95      	cbnz	r5, 801550a <GL_DrawLine1Ex+0xb6>
 80154a4:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80157b4 <GL_DrawLine1Ex+0x360>
 80154a8:	4608      	mov	r0, r1
 80154aa:	9b01      	ldr	r3, [sp, #4]
 80154ac:	f8d8 e000 	ldr.w	lr, [r8]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f000 80d1 	beq.w	8015658 <GL_DrawLine1Ex+0x204>
 80154b6:	f89e 301a 	ldrb.w	r3, [lr, #26]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	f000 81c4 	beq.w	8015848 <GL_DrawLine1Ex+0x3f4>
 80154c0:	2c00      	cmp	r4, #0
 80154c2:	f2c0 81c8 	blt.w	8015856 <GL_DrawLine1Ex+0x402>
 80154c6:	46aa      	mov	sl, r5
 80154c8:	4eb6      	ldr	r6, [pc, #728]	; (80157a4 <GL_DrawLine1Ex+0x350>)
 80154ca:	4672      	mov	r2, lr
 80154cc:	3b01      	subs	r3, #1
 80154ce:	1c45      	adds	r5, r0, #1
 80154d0:	2b03      	cmp	r3, #3
 80154d2:	f200 8134 	bhi.w	801573e <GL_DrawLine1Ex+0x2ea>
 80154d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80154da:	014c      	.short	0x014c
 80154dc:	01580141 	.word	0x01580141
 80154e0:	0121      	.short	0x0121
 80154e2:	463b      	mov	r3, r7
 80154e4:	4630      	mov	r0, r6
 80154e6:	462e      	mov	r6, r5
 80154e8:	4611      	mov	r1, r2
 80154ea:	464f      	mov	r7, r9
 80154ec:	4699      	mov	r9, r3
 80154ee:	42a6      	cmp	r6, r4
 80154f0:	f04f 0301 	mov.w	r3, #1
 80154f4:	4672      	mov	r2, lr
 80154f6:	4605      	mov	r5, r0
 80154f8:	468e      	mov	lr, r1
 80154fa:	9301      	str	r3, [sp, #4]
 80154fc:	d1c6      	bne.n	801548c <GL_DrawLine1Ex+0x38>
 80154fe:	2301      	movs	r3, #1
 8015500:	f8db 1000 	ldr.w	r1, [fp]
 8015504:	9303      	str	r3, [sp, #12]
 8015506:	2d00      	cmp	r5, #0
 8015508:	d0cc      	beq.n	80154a4 <GL_DrawLine1Ex+0x50>
 801550a:	2c00      	cmp	r4, #0
 801550c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80157b4 <GL_DrawLine1Ex+0x360>
 8015510:	4626      	mov	r6, r4
 8015512:	f8d8 0000 	ldr.w	r0, [r8]
 8015516:	bfb8      	it	lt
 8015518:	1c66      	addlt	r6, r4, #1
 801551a:	2d00      	cmp	r5, #0
 801551c:	ea4f 0666 	mov.w	r6, r6, asr #1
 8015520:	7e82      	ldrb	r2, [r0, #26]
 8015522:	bfb8      	it	lt
 8015524:	4276      	neglt	r6, r6
 8015526:	b9fa      	cbnz	r2, 8015568 <GL_DrawLine1Ex+0x114>
 8015528:	2c00      	cmp	r4, #0
 801552a:	db15      	blt.n	8015558 <GL_DrawLine1Ex+0x104>
 801552c:	9b01      	ldr	r3, [sp, #4]
 801552e:	2b00      	cmp	r3, #0
 8015530:	f000 8151 	beq.w	80157d6 <GL_DrawLine1Ex+0x382>
 8015534:	4692      	mov	sl, r2
 8015536:	4603      	mov	r3, r0
 8015538:	e001      	b.n	801553e <GL_DrawLine1Ex+0xea>
 801553a:	f8d8 3000 	ldr.w	r3, [r8]
 801553e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015540:	eb0a 0107 	add.w	r1, sl, r7
 8015544:	f10a 0a01 	add.w	sl, sl, #1
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	fb96 f0f4 	sdiv	r0, r6, r4
 801554e:	4448      	add	r0, r9
 8015550:	442e      	add	r6, r5
 8015552:	4798      	blx	r3
 8015554:	4554      	cmp	r4, sl
 8015556:	daf0      	bge.n	801553a <GL_DrawLine1Ex+0xe6>
 8015558:	b005      	add	sp, #20
 801555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801555e:	b005      	add	sp, #20
 8015560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015564:	f7ff bee2 	b.w	801532c <GL_DrawPoint>
 8015568:	1c5a      	adds	r2, r3, #1
 801556a:	f000 812c 	beq.w	80157c6 <GL_DrawLine1Ex+0x372>
 801556e:	2c00      	cmp	r4, #0
 8015570:	db51      	blt.n	8015616 <GL_DrawLine1Ex+0x1c2>
 8015572:	f8cd 9008 	str.w	r9, [sp, #8]
 8015576:	f04f 0a00 	mov.w	sl, #0
 801557a:	46c1      	mov	r9, r8
 801557c:	4698      	mov	r8, r3
 801557e:	4441      	add	r1, r8
 8015580:	f8cb 1000 	str.w	r1, [fp]
 8015584:	7e82      	ldrb	r2, [r0, #26]
 8015586:	3a01      	subs	r2, #1
 8015588:	2a03      	cmp	r2, #3
 801558a:	d815      	bhi.n	80155b8 <GL_DrawLine1Ex+0x164>
 801558c:	e8df f002 	tbb	[pc, r2]
 8015590:	022b4955 	.word	0x022b4955
 8015594:	4b84      	ldr	r3, [pc, #528]	; (80157a8 <GL_DrawLine1Ex+0x354>)
 8015596:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 801559a:	fb83 3201 	smull	r3, r2, r3, r1
 801559e:	ebce 02a2 	rsb	r2, lr, r2, asr #2
 80155a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80155a6:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80155aa:	2a0b      	cmp	r2, #11
 80155ac:	dd12      	ble.n	80155d4 <GL_DrawLine1Ex+0x180>
 80155ae:	f022 0204 	bic.w	r2, r2, #4
 80155b2:	3a10      	subs	r2, #16
 80155b4:	2a01      	cmp	r2, #1
 80155b6:	d90d      	bls.n	80155d4 <GL_DrawLine1Ex+0x180>
 80155b8:	9b02      	ldr	r3, [sp, #8]
 80155ba:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80155bc:	fb96 f1f4 	sdiv	r1, r6, r4
 80155c0:	4419      	add	r1, r3
 80155c2:	9b01      	ldr	r3, [sp, #4]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	f040 80f7 	bne.w	80157b8 <GL_DrawLine1Ex+0x364>
 80155ca:	4638      	mov	r0, r7
 80155cc:	6852      	ldr	r2, [r2, #4]
 80155ce:	4790      	blx	r2
 80155d0:	f8db 1000 	ldr.w	r1, [fp]
 80155d4:	f10a 0a01 	add.w	sl, sl, #1
 80155d8:	3701      	adds	r7, #1
 80155da:	442e      	add	r6, r5
 80155dc:	4554      	cmp	r4, sl
 80155de:	db15      	blt.n	801560c <GL_DrawLine1Ex+0x1b8>
 80155e0:	f8d9 0000 	ldr.w	r0, [r9]
 80155e4:	e7cb      	b.n	801557e <GL_DrawLine1Ex+0x12a>
 80155e6:	4b6f      	ldr	r3, [pc, #444]	; (80157a4 <GL_DrawLine1Ex+0x350>)
 80155e8:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 80155ec:	fb83 3201 	smull	r3, r2, r3, r1
 80155f0:	ebce 02e2 	rsb	r2, lr, r2, asr #3
 80155f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80155f8:	eba1 0282 	sub.w	r2, r1, r2, lsl #2
 80155fc:	2a0b      	cmp	r2, #11
 80155fe:	dcd8      	bgt.n	80155b2 <GL_DrawLine1Ex+0x15e>
 8015600:	f10a 0a01 	add.w	sl, sl, #1
 8015604:	3701      	adds	r7, #1
 8015606:	442e      	add	r6, r5
 8015608:	4554      	cmp	r4, sl
 801560a:	dae9      	bge.n	80155e0 <GL_DrawLine1Ex+0x18c>
 801560c:	9a03      	ldr	r2, [sp, #12]
 801560e:	4643      	mov	r3, r8
 8015610:	3201      	adds	r2, #1
 8015612:	f000 80de 	beq.w	80157d2 <GL_DrawLine1Ex+0x37e>
 8015616:	1acb      	subs	r3, r1, r3
 8015618:	f8cb 3000 	str.w	r3, [fp]
 801561c:	b005      	add	sp, #20
 801561e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015622:	4a62      	ldr	r2, [pc, #392]	; (80157ac <GL_DrawLine1Ex+0x358>)
 8015624:	400a      	ands	r2, r1
 8015626:	2a00      	cmp	r2, #0
 8015628:	f2c0 80e7 	blt.w	80157fa <GL_DrawLine1Ex+0x3a6>
 801562c:	2a01      	cmp	r2, #1
 801562e:	bfcc      	ite	gt
 8015630:	2200      	movgt	r2, #0
 8015632:	2201      	movle	r2, #1
 8015634:	2a00      	cmp	r2, #0
 8015636:	d1cd      	bne.n	80155d4 <GL_DrawLine1Ex+0x180>
 8015638:	e7be      	b.n	80155b8 <GL_DrawLine1Ex+0x164>
 801563a:	f101 0e06 	add.w	lr, r1, #6
 801563e:	4a5c      	ldr	r2, [pc, #368]	; (80157b0 <GL_DrawLine1Ex+0x35c>)
 8015640:	ea0e 0202 	and.w	r2, lr, r2
 8015644:	2a00      	cmp	r2, #0
 8015646:	f2c0 80dd 	blt.w	8015804 <GL_DrawLine1Ex+0x3b0>
 801564a:	2a0b      	cmp	r2, #11
 801564c:	bfcc      	ite	gt
 801564e:	2200      	movgt	r2, #0
 8015650:	2201      	movle	r2, #1
 8015652:	2a00      	cmp	r2, #0
 8015654:	d1be      	bne.n	80155d4 <GL_DrawLine1Ex+0x180>
 8015656:	e7af      	b.n	80155b8 <GL_DrawLine1Ex+0x164>
 8015658:	f89e 301a 	ldrb.w	r3, [lr, #26]
 801565c:	2b00      	cmp	r3, #0
 801565e:	f000 80ea 	beq.w	8015836 <GL_DrawLine1Ex+0x3e2>
 8015662:	2c00      	cmp	r4, #0
 8015664:	f2c0 80f7 	blt.w	8015856 <GL_DrawLine1Ex+0x402>
 8015668:	f8dd a004 	ldr.w	sl, [sp, #4]
 801566c:	4672      	mov	r2, lr
 801566e:	4e4e      	ldr	r6, [pc, #312]	; (80157a8 <GL_DrawLine1Ex+0x354>)
 8015670:	3b01      	subs	r3, #1
 8015672:	1c45      	adds	r5, r0, #1
 8015674:	2b03      	cmp	r3, #3
 8015676:	d813      	bhi.n	80156a0 <GL_DrawLine1Ex+0x24c>
 8015678:	e8df f003 	tbb	[pc, r3]
 801567c:	02213743 	.word	0x02213743
 8015680:	fb86 3100 	smull	r3, r1, r6, r0
 8015684:	17c3      	asrs	r3, r0, #31
 8015686:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 801568a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801568e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8015692:	2b0b      	cmp	r3, #11
 8015694:	dd0a      	ble.n	80156ac <GL_DrawLine1Ex+0x258>
 8015696:	f023 0304 	bic.w	r3, r3, #4
 801569a:	3b10      	subs	r3, #16
 801569c:	2b01      	cmp	r3, #1
 801569e:	d905      	bls.n	80156ac <GL_DrawLine1Ex+0x258>
 80156a0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80156a2:	4649      	mov	r1, r9
 80156a4:	eb07 000a 	add.w	r0, r7, sl
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4798      	blx	r3
 80156ac:	f10a 0a01 	add.w	sl, sl, #1
 80156b0:	4554      	cmp	r4, sl
 80156b2:	db14      	blt.n	80156de <GL_DrawLine1Ex+0x28a>
 80156b4:	f8d8 2000 	ldr.w	r2, [r8]
 80156b8:	4628      	mov	r0, r5
 80156ba:	7e93      	ldrb	r3, [r2, #26]
 80156bc:	e7d8      	b.n	8015670 <GL_DrawLine1Ex+0x21c>
 80156be:	4b39      	ldr	r3, [pc, #228]	; (80157a4 <GL_DrawLine1Ex+0x350>)
 80156c0:	fb83 3100 	smull	r3, r1, r3, r0
 80156c4:	17c3      	asrs	r3, r0, #31
 80156c6:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 80156ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80156ce:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 80156d2:	2b0b      	cmp	r3, #11
 80156d4:	dce1      	bgt.n	801569a <GL_DrawLine1Ex+0x246>
 80156d6:	f10a 0a01 	add.w	sl, sl, #1
 80156da:	4554      	cmp	r4, sl
 80156dc:	daea      	bge.n	80156b4 <GL_DrawLine1Ex+0x260>
 80156de:	1e69      	subs	r1, r5, #1
 80156e0:	f8cb 1000 	str.w	r1, [fp]
 80156e4:	b005      	add	sp, #20
 80156e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ea:	4b30      	ldr	r3, [pc, #192]	; (80157ac <GL_DrawLine1Ex+0x358>)
 80156ec:	4003      	ands	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	f2c0 8097 	blt.w	8015822 <GL_DrawLine1Ex+0x3ce>
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	bfcc      	ite	gt
 80156f8:	2300      	movgt	r3, #0
 80156fa:	2301      	movle	r3, #1
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d1d5      	bne.n	80156ac <GL_DrawLine1Ex+0x258>
 8015700:	e7ce      	b.n	80156a0 <GL_DrawLine1Ex+0x24c>
 8015702:	1d69      	adds	r1, r5, #5
 8015704:	4b2a      	ldr	r3, [pc, #168]	; (80157b0 <GL_DrawLine1Ex+0x35c>)
 8015706:	400b      	ands	r3, r1
 8015708:	2b00      	cmp	r3, #0
 801570a:	f2c0 808f 	blt.w	801582c <GL_DrawLine1Ex+0x3d8>
 801570e:	2b0b      	cmp	r3, #11
 8015710:	bfcc      	ite	gt
 8015712:	2300      	movgt	r3, #0
 8015714:	2301      	movle	r3, #1
 8015716:	2b00      	cmp	r3, #0
 8015718:	d1c8      	bne.n	80156ac <GL_DrawLine1Ex+0x258>
 801571a:	e7c1      	b.n	80156a0 <GL_DrawLine1Ex+0x24c>
 801571c:	4b22      	ldr	r3, [pc, #136]	; (80157a8 <GL_DrawLine1Ex+0x354>)
 801571e:	fb83 3100 	smull	r3, r1, r3, r0
 8015722:	17c3      	asrs	r3, r0, #31
 8015724:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8015728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801572c:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
 8015730:	2b0b      	cmp	r3, #11
 8015732:	dd0a      	ble.n	801574a <GL_DrawLine1Ex+0x2f6>
 8015734:	f023 0304 	bic.w	r3, r3, #4
 8015738:	3b10      	subs	r3, #16
 801573a:	2b01      	cmp	r3, #1
 801573c:	d905      	bls.n	801574a <GL_DrawLine1Ex+0x2f6>
 801573e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015740:	eb0a 0107 	add.w	r1, sl, r7
 8015744:	4648      	mov	r0, r9
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	4798      	blx	r3
 801574a:	f10a 0a01 	add.w	sl, sl, #1
 801574e:	4554      	cmp	r4, sl
 8015750:	dbc5      	blt.n	80156de <GL_DrawLine1Ex+0x28a>
 8015752:	f8d8 2000 	ldr.w	r2, [r8]
 8015756:	4628      	mov	r0, r5
 8015758:	7e93      	ldrb	r3, [r2, #26]
 801575a:	e6b7      	b.n	80154cc <GL_DrawLine1Ex+0x78>
 801575c:	4b13      	ldr	r3, [pc, #76]	; (80157ac <GL_DrawLine1Ex+0x358>)
 801575e:	4003      	ands	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	db54      	blt.n	801580e <GL_DrawLine1Ex+0x3ba>
 8015764:	2b01      	cmp	r3, #1
 8015766:	bfcc      	ite	gt
 8015768:	2300      	movgt	r3, #0
 801576a:	2301      	movle	r3, #1
 801576c:	2b00      	cmp	r3, #0
 801576e:	d1ec      	bne.n	801574a <GL_DrawLine1Ex+0x2f6>
 8015770:	e7e5      	b.n	801573e <GL_DrawLine1Ex+0x2ea>
 8015772:	1d69      	adds	r1, r5, #5
 8015774:	4b0e      	ldr	r3, [pc, #56]	; (80157b0 <GL_DrawLine1Ex+0x35c>)
 8015776:	400b      	ands	r3, r1
 8015778:	2b00      	cmp	r3, #0
 801577a:	db4d      	blt.n	8015818 <GL_DrawLine1Ex+0x3c4>
 801577c:	2b0b      	cmp	r3, #11
 801577e:	bfcc      	ite	gt
 8015780:	2300      	movgt	r3, #0
 8015782:	2301      	movle	r3, #1
 8015784:	2b00      	cmp	r3, #0
 8015786:	d1e0      	bne.n	801574a <GL_DrawLine1Ex+0x2f6>
 8015788:	e7d9      	b.n	801573e <GL_DrawLine1Ex+0x2ea>
 801578a:	fb86 3100 	smull	r3, r1, r6, r0
 801578e:	17c3      	asrs	r3, r0, #31
 8015790:	ebc3 03e1 	rsb	r3, r3, r1, asr #3
 8015794:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015798:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 801579c:	2b0b      	cmp	r3, #11
 801579e:	dccb      	bgt.n	8015738 <GL_DrawLine1Ex+0x2e4>
 80157a0:	e7d3      	b.n	801574a <GL_DrawLine1Ex+0x2f6>
 80157a2:	bf00      	nop
 80157a4:	66666667 	.word	0x66666667
 80157a8:	2aaaaaab 	.word	0x2aaaaaab
 80157ac:	80000003 	.word	0x80000003
 80157b0:	8000000f 	.word	0x8000000f
 80157b4:	20000018 	.word	0x20000018
 80157b8:	4608      	mov	r0, r1
 80157ba:	6852      	ldr	r2, [r2, #4]
 80157bc:	4639      	mov	r1, r7
 80157be:	4790      	blx	r2
 80157c0:	f8db 1000 	ldr.w	r1, [fp]
 80157c4:	e706      	b.n	80155d4 <GL_DrawLine1Ex+0x180>
 80157c6:	4421      	add	r1, r4
 80157c8:	2c00      	cmp	r4, #0
 80157ca:	f8cb 1000 	str.w	r1, [fp]
 80157ce:	f6bf aed0 	bge.w	8015572 <GL_DrawLine1Ex+0x11e>
 80157d2:	4421      	add	r1, r4
 80157d4:	e71f      	b.n	8015616 <GL_DrawLine1Ex+0x1c2>
 80157d6:	469a      	mov	sl, r3
 80157d8:	e001      	b.n	80157de <GL_DrawLine1Ex+0x38a>
 80157da:	f8d8 0000 	ldr.w	r0, [r8]
 80157de:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80157e0:	eb0a 0007 	add.w	r0, sl, r7
 80157e4:	f10a 0a01 	add.w	sl, sl, #1
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	fb96 f1f4 	sdiv	r1, r6, r4
 80157ee:	4449      	add	r1, r9
 80157f0:	442e      	add	r6, r5
 80157f2:	4798      	blx	r3
 80157f4:	4554      	cmp	r4, sl
 80157f6:	daf0      	bge.n	80157da <GL_DrawLine1Ex+0x386>
 80157f8:	e6ae      	b.n	8015558 <GL_DrawLine1Ex+0x104>
 80157fa:	3a01      	subs	r2, #1
 80157fc:	f062 0203 	orn	r2, r2, #3
 8015800:	3201      	adds	r2, #1
 8015802:	e713      	b.n	801562c <GL_DrawLine1Ex+0x1d8>
 8015804:	3a01      	subs	r2, #1
 8015806:	f062 020f 	orn	r2, r2, #15
 801580a:	3201      	adds	r2, #1
 801580c:	e71d      	b.n	801564a <GL_DrawLine1Ex+0x1f6>
 801580e:	3b01      	subs	r3, #1
 8015810:	f063 0303 	orn	r3, r3, #3
 8015814:	3301      	adds	r3, #1
 8015816:	e7a5      	b.n	8015764 <GL_DrawLine1Ex+0x310>
 8015818:	3b01      	subs	r3, #1
 801581a:	f063 030f 	orn	r3, r3, #15
 801581e:	3301      	adds	r3, #1
 8015820:	e7ac      	b.n	801577c <GL_DrawLine1Ex+0x328>
 8015822:	3b01      	subs	r3, #1
 8015824:	f063 0303 	orn	r3, r3, #3
 8015828:	3301      	adds	r3, #1
 801582a:	e763      	b.n	80156f4 <GL_DrawLine1Ex+0x2a0>
 801582c:	3b01      	subs	r3, #1
 801582e:	f063 030f 	orn	r3, r3, #15
 8015832:	3301      	adds	r3, #1
 8015834:	e76b      	b.n	801570e <GL_DrawLine1Ex+0x2ba>
 8015836:	f8de 3064 	ldr.w	r3, [lr, #100]	; 0x64
 801583a:	4649      	mov	r1, r9
 801583c:	4638      	mov	r0, r7
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	b005      	add	sp, #20
 8015842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015846:	4718      	bx	r3
 8015848:	4639      	mov	r1, r7
 801584a:	4648      	mov	r0, r9
 801584c:	b005      	add	sp, #20
 801584e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015852:	f004 bc1d 	b.w	801a090 <LCD_DrawVLine>
 8015856:	460d      	mov	r5, r1
 8015858:	e741      	b.n	80156de <GL_DrawLine1Ex+0x28a>
 801585a:	bf00      	nop

0801585c <GL_DrawLine>:
 801585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015860:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8015b08 <GL_DrawLine+0x2ac>
 8015864:	b089      	sub	sp, #36	; 0x24
 8015866:	f04f 0c00 	mov.w	ip, #0
 801586a:	f8d9 4000 	ldr.w	r4, [r9]
 801586e:	f8cd c00c 	str.w	ip, [sp, #12]
 8015872:	7e24      	ldrb	r4, [r4, #24]
 8015874:	2c01      	cmp	r4, #1
 8015876:	f000 813b 	beq.w	8015af0 <GL_DrawLine+0x294>
 801587a:	461e      	mov	r6, r3
 801587c:	ebc2 0e00 	rsb	lr, r2, r0
 8015880:	1acb      	subs	r3, r1, r3
 8015882:	4615      	mov	r5, r2
 8015884:	4607      	mov	r7, r0
 8015886:	4688      	mov	r8, r1
 8015888:	ea5e 0203 	orrs.w	r2, lr, r3
 801588c:	d102      	bne.n	8015894 <GL_DrawLine+0x38>
 801588e:	b009      	add	sp, #36	; 0x24
 8015890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015894:	f1be 0f00 	cmp.w	lr, #0
 8015898:	f104 34ff 	add.w	r4, r4, #4294967295
 801589c:	f2c0 8109 	blt.w	8015ab2 <GL_DrawLine+0x256>
 80158a0:	4660      	mov	r0, ip
 80158a2:	2202      	movs	r2, #2
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f2c0 8101 	blt.w	8015aac <GL_DrawLine+0x250>
 80158aa:	459e      	cmp	lr, r3
 80158ac:	f2c0 80f4 	blt.w	8015a98 <GL_DrawLine+0x23c>
 80158b0:	ea4f 026e 	mov.w	r2, lr, asr #1
 80158b4:	4993      	ldr	r1, [pc, #588]	; (8015b04 <GL_DrawLine+0x2a8>)
 80158b6:	eb02 2383 	add.w	r3, r2, r3, lsl #10
 80158ba:	fb93 f3fe 	sdiv	r3, r3, lr
 80158be:	119a      	asrs	r2, r3, #6
 80158c0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80158c4:	eb01 0c42 	add.w	ip, r1, r2, lsl #1
 80158c8:	f1c3 0e10 	rsb	lr, r3, #16
 80158cc:	f9bc c024 	ldrsh.w	ip, [ip, #36]	; 0x24
 80158d0:	f1be 0f10 	cmp.w	lr, #16
 80158d4:	fb0e fc0c 	mul.w	ip, lr, ip
 80158d8:	d005      	beq.n	80158e6 <GL_DrawLine+0x8a>
 80158da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80158de:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 80158e2:	fb03 cc02 	mla	ip, r3, r2, ip
 80158e6:	f11c 0308 	adds.w	r3, ip, #8
 80158ea:	bf48      	it	mi
 80158ec:	f10c 0317 	addmi.w	r3, ip, #23
 80158f0:	0742      	lsls	r2, r0, #29
 80158f2:	ea4f 1323 	mov.w	r3, r3, asr #4
 80158f6:	bf48      	it	mi
 80158f8:	f5c3 6380 	rsbmi	r3, r3, #1024	; 0x400
 80158fc:	07c2      	lsls	r2, r0, #31
 80158fe:	bf48      	it	mi
 8015900:	f5c3 6300 	rsbmi	r3, r3, #2048	; 0x800
 8015904:	0782      	lsls	r2, r0, #30
 8015906:	bf48      	it	mi
 8015908:	f5c3 5380 	rsbmi	r3, r3, #4096	; 0x1000
 801590c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8015910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015914:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8015918:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801591c:	f300 80b7 	bgt.w	8015a8e <GL_DrawLine+0x232>
 8015920:	f04f 0c00 	mov.w	ip, #0
 8015924:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8015928:	4876      	ldr	r0, [pc, #472]	; (8015b04 <GL_DrawLine+0x2a8>)
 801592a:	bfc8      	it	gt
 801592c:	f5c2 6200 	rsbgt	r2, r2, #2048	; 0x800
 8015930:	f002 0e3f 	and.w	lr, r2, #63	; 0x3f
 8015934:	1192      	asrs	r2, r2, #6
 8015936:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 801593a:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 801593e:	fa1f fe8e 	uxth.w	lr, lr
 8015942:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8015946:	fb0e fa0a 	mul.w	sl, lr, sl
 801594a:	d008      	beq.n	801595e <GL_DrawLine+0x102>
 801594c:	2a10      	cmp	r2, #16
 801594e:	d006      	beq.n	801595e <GL_DrawLine+0x102>
 8015950:	3201      	adds	r2, #1
 8015952:	f1ce 0e40 	rsb	lr, lr, #64	; 0x40
 8015956:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801595a:	fb0e aa02 	mla	sl, lr, r2, sl
 801595e:	f10a 0020 	add.w	r0, sl, #32
 8015962:	0980      	lsrs	r0, r0, #6
 8015964:	f1bc 0f00 	cmp.w	ip, #0
 8015968:	d000      	beq.n	801596c <GL_DrawLine+0x110>
 801596a:	4240      	negs	r0, r0
 801596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015970:	fb00 f004 	mul.w	r0, r0, r4
 8015974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015978:	f340 8095 	ble.w	8015aa6 <GL_DrawLine+0x24a>
 801597c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015980:	f04f 0e01 	mov.w	lr, #1
 8015984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015988:	f8df a178 	ldr.w	sl, [pc, #376]	; 8015b04 <GL_DrawLine+0x2a8>
 801598c:	bfc8      	it	gt
 801598e:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 8015992:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
 8015996:	119a      	asrs	r2, r3, #6
 8015998:	f1cc 0c40 	rsb	ip, ip, #64	; 0x40
 801599c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80159a0:	fa1f f18c 	uxth.w	r1, ip
 80159a4:	2940      	cmp	r1, #64	; 0x40
 80159a6:	fb01 f303 	mul.w	r3, r1, r3
 80159aa:	d008      	beq.n	80159be <GL_DrawLine+0x162>
 80159ac:	2a10      	cmp	r2, #16
 80159ae:	d006      	beq.n	80159be <GL_DrawLine+0x162>
 80159b0:	3201      	adds	r2, #1
 80159b2:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
 80159b6:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 80159ba:	fb01 3302 	mla	r3, r1, r2, r3
 80159be:	3320      	adds	r3, #32
 80159c0:	099b      	lsrs	r3, r3, #6
 80159c2:	f1be 0f00 	cmp.w	lr, #0
 80159c6:	d000      	beq.n	80159ca <GL_DrawLine+0x16e>
 80159c8:	425b      	negs	r3, r3
 80159ca:	2800      	cmp	r0, #0
 80159cc:	fb03 f404 	mul.w	r4, r3, r4
 80159d0:	f2c0 8089 	blt.w	8015ae6 <GL_DrawLine+0x28a>
 80159d4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 80159d8:	1280      	asrs	r0, r0, #10
 80159da:	2c00      	cmp	r4, #0
 80159dc:	f2c0 808d 	blt.w	8015afa <GL_DrawLine+0x29e>
 80159e0:	f504 7400 	add.w	r4, r4, #512	; 0x200
 80159e4:	12a4      	asrs	r4, r4, #10
 80159e6:	2800      	cmp	r0, #0
 80159e8:	dd72      	ble.n	8015ad0 <GL_DrawLine+0x274>
 80159ea:	f100 0c01 	add.w	ip, r0, #1
 80159ee:	1040      	asrs	r0, r0, #1
 80159f0:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 80159f4:	2c00      	cmp	r4, #0
 80159f6:	dd61      	ble.n	8015abc <GL_DrawLine+0x260>
 80159f8:	1c61      	adds	r1, r4, #1
 80159fa:	1064      	asrs	r4, r4, #1
 80159fc:	1049      	asrs	r1, r1, #1
 80159fe:	fa1f fa8c 	uxth.w	sl, ip
 8015a02:	2300      	movs	r3, #0
 8015a04:	fa1f fb87 	uxth.w	fp, r7
 8015a08:	b280      	uxth	r0, r0
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	eb0b 0e0a 	add.w	lr, fp, sl
 8015a10:	fa1f fc85 	uxth.w	ip, r5
 8015a14:	b289      	uxth	r1, r1
 8015a16:	ebc0 0b0b 	rsb	fp, r0, fp
 8015a1a:	b2a4      	uxth	r4, r4
 8015a1c:	ebc0 000c 	rsb	r0, r0, ip
 8015a20:	f8ad e010 	strh.w	lr, [sp, #16]
 8015a24:	44d4      	add	ip, sl
 8015a26:	fa1f fe86 	uxth.w	lr, r6
 8015a2a:	f8ad b014 	strh.w	fp, [sp, #20]
 8015a2e:	fa1f fa88 	uxth.w	sl, r8
 8015a32:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015a36:	a804      	add	r0, sp, #16
 8015a38:	f8ad c01c 	strh.w	ip, [sp, #28]
 8015a3c:	eb0a 0b01 	add.w	fp, sl, r1
 8015a40:	ebc4 0a0a 	rsb	sl, r4, sl
 8015a44:	ebc4 040e 	rsb	r4, r4, lr
 8015a48:	448e      	add	lr, r1
 8015a4a:	2104      	movs	r1, #4
 8015a4c:	f8ad b012 	strh.w	fp, [sp, #18]
 8015a50:	f8ad 401a 	strh.w	r4, [sp, #26]
 8015a54:	f8ad a016 	strh.w	sl, [sp, #22]
 8015a58:	f8ad e01e 	strh.w	lr, [sp, #30]
 8015a5c:	f000 fe5c 	bl	8016718 <GL_FillPolygon>
 8015a60:	f8d9 3000 	ldr.w	r3, [r9]
 8015a64:	4c28      	ldr	r4, [pc, #160]	; (8015b08 <GL_DrawLine+0x2ac>)
 8015a66:	7e5b      	ldrb	r3, [r3, #25]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	f47f af10 	bne.w	801588e <GL_DrawLine+0x32>
 8015a6e:	4641      	mov	r1, r8
 8015a70:	4638      	mov	r0, r7
 8015a72:	f7ff fc5b 	bl	801532c <GL_DrawPoint>
 8015a76:	6823      	ldr	r3, [r4, #0]
 8015a78:	7e5b      	ldrb	r3, [r3, #25]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f47f af07 	bne.w	801588e <GL_DrawLine+0x32>
 8015a80:	4631      	mov	r1, r6
 8015a82:	4628      	mov	r0, r5
 8015a84:	f7ff fc52 	bl	801532c <GL_DrawPoint>
 8015a88:	b009      	add	sp, #36	; 0x24
 8015a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8015a92:	f04f 0c01 	mov.w	ip, #1
 8015a96:	e745      	b.n	8015924 <GL_DrawLine+0xc8>
 8015a98:	4672      	mov	r2, lr
 8015a9a:	f040 0004 	orr.w	r0, r0, #4
 8015a9e:	469e      	mov	lr, r3
 8015aa0:	b2c0      	uxtb	r0, r0
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	e704      	b.n	80158b0 <GL_DrawLine+0x54>
 8015aa6:	f04f 0e00 	mov.w	lr, #0
 8015aaa:	e76b      	b.n	8015984 <GL_DrawLine+0x128>
 8015aac:	425b      	negs	r3, r3
 8015aae:	4610      	mov	r0, r2
 8015ab0:	e6fb      	b.n	80158aa <GL_DrawLine+0x4e>
 8015ab2:	f1ce 0e00 	rsb	lr, lr, #0
 8015ab6:	2203      	movs	r2, #3
 8015ab8:	2001      	movs	r0, #1
 8015aba:	e6f3      	b.n	80158a4 <GL_DrawLine+0x48>
 8015abc:	4621      	mov	r1, r4
 8015abe:	bfb8      	it	lt
 8015ac0:	1c61      	addlt	r1, r4, #1
 8015ac2:	1e63      	subs	r3, r4, #1
 8015ac4:	ea4f 0161 	mov.w	r1, r1, asr #1
 8015ac8:	bf48      	it	mi
 8015aca:	4623      	movmi	r3, r4
 8015acc:	105c      	asrs	r4, r3, #1
 8015ace:	e796      	b.n	80159fe <GL_DrawLine+0x1a2>
 8015ad0:	4684      	mov	ip, r0
 8015ad2:	bfb8      	it	lt
 8015ad4:	f100 0c01 	addlt.w	ip, r0, #1
 8015ad8:	1e43      	subs	r3, r0, #1
 8015ada:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 8015ade:	bf48      	it	mi
 8015ae0:	4603      	movmi	r3, r0
 8015ae2:	1058      	asrs	r0, r3, #1
 8015ae4:	e786      	b.n	80159f4 <GL_DrawLine+0x198>
 8015ae6:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8015aea:	1280      	asrs	r0, r0, #10
 8015aec:	4240      	negs	r0, r0
 8015aee:	e774      	b.n	80159da <GL_DrawLine+0x17e>
 8015af0:	ac03      	add	r4, sp, #12
 8015af2:	9400      	str	r4, [sp, #0]
 8015af4:	f7ff fcae 	bl	8015454 <GL_DrawLine1Ex>
 8015af8:	e6c9      	b.n	801588e <GL_DrawLine+0x32>
 8015afa:	f5c4 7400 	rsb	r4, r4, #512	; 0x200
 8015afe:	12a4      	asrs	r4, r4, #10
 8015b00:	4264      	negs	r4, r4
 8015b02:	e770      	b.n	80159e6 <GL_DrawLine+0x18a>
 8015b04:	080272d4 	.word	0x080272d4
 8015b08:	20000018 	.word	0x20000018

08015b0c <GUI_DrawLine>:
 8015b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b10:	4eb6      	ldr	r6, [pc, #728]	; (8015dec <GUI_DrawLine+0x2e0>)
 8015b12:	b08f      	sub	sp, #60	; 0x3c
 8015b14:	4680      	mov	r8, r0
 8015b16:	468a      	mov	sl, r1
 8015b18:	4617      	mov	r7, r2
 8015b1a:	4699      	mov	r9, r3
 8015b1c:	f002 fd42 	bl	80185a4 <GUI_Lock>
 8015b20:	6834      	ldr	r4, [r6, #0]
 8015b22:	2000      	movs	r0, #0
 8015b24:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015b26:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8015b28:	f00b f814 	bl	8020b54 <WM__InitIVRSearch>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	f000 8121 	beq.w	8015d74 <GUI_DrawLine+0x268>
 8015b32:	eb04 0209 	add.w	r2, r4, r9
 8015b36:	eb04 030a 	add.w	r3, r4, sl
 8015b3a:	eb05 0108 	add.w	r1, r5, r8
 8015b3e:	19e8      	adds	r0, r5, r7
 8015b40:	9303      	str	r3, [sp, #12]
 8015b42:	1a9b      	subs	r3, r3, r2
 8015b44:	ebc0 0901 	rsb	r9, r0, r1
 8015b48:	9102      	str	r1, [sp, #8]
 8015b4a:	9307      	str	r3, [sp, #28]
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	425b      	negs	r3, r3
 8015b50:	9205      	str	r2, [sp, #20]
 8015b52:	9004      	str	r0, [sp, #16]
 8015b54:	ea49 0801 	orr.w	r8, r9, r1
 8015b58:	ea13 0321 	ands.w	r3, r3, r1, asr #32
 8015b5c:	bf38      	it	cc
 8015b5e:	460b      	movcc	r3, r1
 8015b60:	4fa3      	ldr	r7, [pc, #652]	; (8015df0 <GUI_DrawLine+0x2e4>)
 8015b62:	9306      	str	r3, [sp, #24]
 8015b64:	e004      	b.n	8015b70 <GUI_DrawLine+0x64>
 8015b66:	f00a fecb 	bl	8020900 <WM__GetNextIVR>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	f000 8102 	beq.w	8015d74 <GUI_DrawLine+0x268>
 8015b70:	6832      	ldr	r2, [r6, #0]
 8015b72:	2300      	movs	r3, #0
 8015b74:	7e11      	ldrb	r1, [r2, #24]
 8015b76:	9309      	str	r3, [sp, #36]	; 0x24
 8015b78:	2901      	cmp	r1, #1
 8015b7a:	f000 812f 	beq.w	8015ddc <GUI_DrawLine+0x2d0>
 8015b7e:	f1b8 0f00 	cmp.w	r8, #0
 8015b82:	d0f0      	beq.n	8015b66 <GUI_DrawLine+0x5a>
 8015b84:	f1b9 0f00 	cmp.w	r9, #0
 8015b88:	f101 31ff 	add.w	r1, r1, #4294967295
 8015b8c:	f2c0 8121 	blt.w	8015dd2 <GUI_DrawLine+0x2c6>
 8015b90:	464c      	mov	r4, r9
 8015b92:	2202      	movs	r2, #2
 8015b94:	9807      	ldr	r0, [sp, #28]
 8015b96:	ea33 0320 	bics.w	r3, r3, r0, asr #32
 8015b9a:	bf28      	it	cs
 8015b9c:	4613      	movcs	r3, r2
 8015b9e:	9806      	ldr	r0, [sp, #24]
 8015ba0:	4284      	cmp	r4, r0
 8015ba2:	f280 80f0 	bge.w	8015d86 <GUI_DrawLine+0x27a>
 8015ba6:	f043 0304 	orr.w	r3, r3, #4
 8015baa:	4622      	mov	r2, r4
 8015bac:	4604      	mov	r4, r0
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	1060      	asrs	r0, r4, #1
 8015bb2:	eb00 2282 	add.w	r2, r0, r2, lsl #10
 8015bb6:	fb92 f2f4 	sdiv	r2, r2, r4
 8015bba:	1194      	asrs	r4, r2, #6
 8015bbc:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8015bc0:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8015bc4:	f1c2 0510 	rsb	r5, r2, #16
 8015bc8:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8015bcc:	2d10      	cmp	r5, #16
 8015bce:	fb05 f000 	mul.w	r0, r5, r0
 8015bd2:	d006      	beq.n	8015be2 <GUI_DrawLine+0xd6>
 8015bd4:	4d86      	ldr	r5, [pc, #536]	; (8015df0 <GUI_DrawLine+0x2e4>)
 8015bd6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8015bda:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
 8015bde:	fb02 0004 	mla	r0, r2, r4, r0
 8015be2:	f110 0408 	adds.w	r4, r0, #8
 8015be6:	bf48      	it	mi
 8015be8:	f100 0417 	addmi.w	r4, r0, #23
 8015bec:	0758      	lsls	r0, r3, #29
 8015bee:	ea4f 1424 	mov.w	r4, r4, asr #4
 8015bf2:	bf48      	it	mi
 8015bf4:	f5c4 6480 	rsbmi	r4, r4, #1024	; 0x400
 8015bf8:	07da      	lsls	r2, r3, #31
 8015bfa:	bf48      	it	mi
 8015bfc:	f5c4 6400 	rsbmi	r4, r4, #2048	; 0x800
 8015c00:	079b      	lsls	r3, r3, #30
 8015c02:	bf48      	it	mi
 8015c04:	f5c4 5480 	rsbmi	r4, r4, #4096	; 0x1000
 8015c08:	f504 6300 	add.w	r3, r4, #2048	; 0x800
 8015c0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8015c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015c18:	f340 80b3 	ble.w	8015d82 <GUI_DrawLine+0x276>
 8015c1c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015c20:	2201      	movs	r2, #1
 8015c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c26:	bfc8      	it	gt
 8015c28:	f5c3 6300 	rsbgt	r3, r3, #2048	; 0x800
 8015c2c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8015c30:	119b      	asrs	r3, r3, #6
 8015c32:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8015c36:	f837 0013 	ldrh.w	r0, [r7, r3, lsl #1]
 8015c3a:	b2ad      	uxth	r5, r5
 8015c3c:	2d40      	cmp	r5, #64	; 0x40
 8015c3e:	fb05 f000 	mul.w	r0, r5, r0
 8015c42:	d008      	beq.n	8015c56 <GUI_DrawLine+0x14a>
 8015c44:	2b10      	cmp	r3, #16
 8015c46:	d006      	beq.n	8015c56 <GUI_DrawLine+0x14a>
 8015c48:	3301      	adds	r3, #1
 8015c4a:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8015c4e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8015c52:	fb05 0003 	mla	r0, r5, r3, r0
 8015c56:	3020      	adds	r0, #32
 8015c58:	0980      	lsrs	r0, r0, #6
 8015c5a:	b102      	cbz	r2, 8015c5e <GUI_DrawLine+0x152>
 8015c5c:	4240      	negs	r0, r0
 8015c5e:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8015c62:	fb00 f001 	mul.w	r0, r0, r1
 8015c66:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8015c6a:	f340 8088 	ble.w	8015d7e <GUI_DrawLine+0x272>
 8015c6e:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8015c72:	2201      	movs	r2, #1
 8015c74:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8015c78:	bfc8      	it	gt
 8015c7a:	f5c4 6400 	rsbgt	r4, r4, #2048	; 0x800
 8015c7e:	f004 053f 	and.w	r5, r4, #63	; 0x3f
 8015c82:	11a4      	asrs	r4, r4, #6
 8015c84:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8015c88:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8015c8c:	b2ad      	uxth	r5, r5
 8015c8e:	2d40      	cmp	r5, #64	; 0x40
 8015c90:	fb05 f303 	mul.w	r3, r5, r3
 8015c94:	d008      	beq.n	8015ca8 <GUI_DrawLine+0x19c>
 8015c96:	2c10      	cmp	r4, #16
 8015c98:	d006      	beq.n	8015ca8 <GUI_DrawLine+0x19c>
 8015c9a:	3401      	adds	r4, #1
 8015c9c:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
 8015ca0:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
 8015ca4:	fb05 3304 	mla	r3, r5, r4, r3
 8015ca8:	3320      	adds	r3, #32
 8015caa:	099b      	lsrs	r3, r3, #6
 8015cac:	b102      	cbz	r2, 8015cb0 <GUI_DrawLine+0x1a4>
 8015cae:	425b      	negs	r3, r3
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	fb03 f101 	mul.w	r1, r3, r1
 8015cb6:	db7e      	blt.n	8015db6 <GUI_DrawLine+0x2aa>
 8015cb8:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8015cbc:	2900      	cmp	r1, #0
 8015cbe:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8015cc2:	f2c0 8081 	blt.w	8015dc8 <GUI_DrawLine+0x2bc>
 8015cc6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8015cca:	1289      	asrs	r1, r1, #10
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	dd5c      	ble.n	8015d8a <GUI_DrawLine+0x27e>
 8015cd0:	1c45      	adds	r5, r0, #1
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	ea4f 0060 	mov.w	r0, r0, asr #1
 8015cd8:	ea4f 0565 	mov.w	r5, r5, asr #1
 8015cdc:	dd61      	ble.n	8015da2 <GUI_DrawLine+0x296>
 8015cde:	1c4c      	adds	r4, r1, #1
 8015ce0:	1049      	asrs	r1, r1, #1
 8015ce2:	1064      	asrs	r4, r4, #1
 8015ce4:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8015ce8:	b2ad      	uxth	r5, r5
 8015cea:	b280      	uxth	r0, r0
 8015cec:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8015cf0:	eb0a 0e05 	add.w	lr, sl, r5
 8015cf4:	b289      	uxth	r1, r1
 8015cf6:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8015cfa:	ebc0 0a0a 	rsb	sl, r0, sl
 8015cfe:	b2a4      	uxth	r4, r4
 8015d00:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8015d04:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8015d08:	2300      	movs	r3, #0
 8015d0a:	ebc0 000b 	rsb	r0, r0, fp
 8015d0e:	445d      	add	r5, fp
 8015d10:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 8015d14:	eb0c 0b04 	add.w	fp, ip, r4
 8015d18:	ebc1 0a0e 	rsb	sl, r1, lr
 8015d1c:	ebc1 0c0c 	rsb	ip, r1, ip
 8015d20:	44a6      	add	lr, r4
 8015d22:	461a      	mov	r2, r3
 8015d24:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8015d28:	2104      	movs	r1, #4
 8015d2a:	a80a      	add	r0, sp, #40	; 0x28
 8015d2c:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
 8015d30:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 8015d34:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
 8015d38:	f8ad a032 	strh.w	sl, [sp, #50]	; 0x32
 8015d3c:	f8ad e036 	strh.w	lr, [sp, #54]	; 0x36
 8015d40:	f000 fcea 	bl	8016718 <GL_FillPolygon>
 8015d44:	6833      	ldr	r3, [r6, #0]
 8015d46:	7e5b      	ldrb	r3, [r3, #25]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	f47f af0c 	bne.w	8015b66 <GUI_DrawLine+0x5a>
 8015d4e:	9903      	ldr	r1, [sp, #12]
 8015d50:	9802      	ldr	r0, [sp, #8]
 8015d52:	f7ff faeb 	bl	801532c <GL_DrawPoint>
 8015d56:	4b25      	ldr	r3, [pc, #148]	; (8015dec <GUI_DrawLine+0x2e0>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	7e5b      	ldrb	r3, [r3, #25]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f47f af02 	bne.w	8015b66 <GUI_DrawLine+0x5a>
 8015d62:	9905      	ldr	r1, [sp, #20]
 8015d64:	9804      	ldr	r0, [sp, #16]
 8015d66:	f7ff fae1 	bl	801532c <GL_DrawPoint>
 8015d6a:	f00a fdc9 	bl	8020900 <WM__GetNextIVR>
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	f47f aefe 	bne.w	8015b70 <GUI_DrawLine+0x64>
 8015d74:	f002 fc0c 	bl	8018590 <GUI_Unlock>
 8015d78:	b00f      	add	sp, #60	; 0x3c
 8015d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7e:	2200      	movs	r2, #0
 8015d80:	e778      	b.n	8015c74 <GUI_DrawLine+0x168>
 8015d82:	2200      	movs	r2, #0
 8015d84:	e74d      	b.n	8015c22 <GUI_DrawLine+0x116>
 8015d86:	4602      	mov	r2, r0
 8015d88:	e712      	b.n	8015bb0 <GUI_DrawLine+0xa4>
 8015d8a:	4605      	mov	r5, r0
 8015d8c:	bfb8      	it	lt
 8015d8e:	1c45      	addlt	r5, r0, #1
 8015d90:	1e43      	subs	r3, r0, #1
 8015d92:	ea4f 0565 	mov.w	r5, r5, asr #1
 8015d96:	bf48      	it	mi
 8015d98:	4603      	movmi	r3, r0
 8015d9a:	2900      	cmp	r1, #0
 8015d9c:	ea4f 0063 	mov.w	r0, r3, asr #1
 8015da0:	dc9d      	bgt.n	8015cde <GUI_DrawLine+0x1d2>
 8015da2:	460c      	mov	r4, r1
 8015da4:	bfb8      	it	lt
 8015da6:	1c4c      	addlt	r4, r1, #1
 8015da8:	1e4b      	subs	r3, r1, #1
 8015daa:	ea4f 0464 	mov.w	r4, r4, asr #1
 8015dae:	bf48      	it	mi
 8015db0:	460b      	movmi	r3, r1
 8015db2:	1059      	asrs	r1, r3, #1
 8015db4:	e796      	b.n	8015ce4 <GUI_DrawLine+0x1d8>
 8015db6:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8015dba:	2900      	cmp	r1, #0
 8015dbc:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8015dc0:	f1c0 0000 	rsb	r0, r0, #0
 8015dc4:	f6bf af7f 	bge.w	8015cc6 <GUI_DrawLine+0x1ba>
 8015dc8:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
 8015dcc:	1289      	asrs	r1, r1, #10
 8015dce:	4249      	negs	r1, r1
 8015dd0:	e77c      	b.n	8015ccc <GUI_DrawLine+0x1c0>
 8015dd2:	f1c9 0400 	rsb	r4, r9, #0
 8015dd6:	2203      	movs	r2, #3
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e6db      	b.n	8015b94 <GUI_DrawLine+0x88>
 8015ddc:	a809      	add	r0, sp, #36	; 0x24
 8015dde:	a903      	add	r1, sp, #12
 8015de0:	c90e      	ldmia	r1, {r1, r2, r3}
 8015de2:	9000      	str	r0, [sp, #0]
 8015de4:	9802      	ldr	r0, [sp, #8]
 8015de6:	f7ff fb35 	bl	8015454 <GL_DrawLine1Ex>
 8015dea:	e6bc      	b.n	8015b66 <GUI_DrawLine+0x5a>
 8015dec:	20000018 	.word	0x20000018
 8015df0:	080272d4 	.word	0x080272d4

08015df4 <GUI_DrawRoundedRect>:
 8015df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df8:	b091      	sub	sp, #68	; 0x44
 8015dfa:	4681      	mov	r9, r0
 8015dfc:	461e      	mov	r6, r3
 8015dfe:	460f      	mov	r7, r1
 8015e00:	4690      	mov	r8, r2
 8015e02:	f002 fbcf 	bl	80185a4 <GUI_Lock>
 8015e06:	4b5c      	ldr	r3, [pc, #368]	; (8015f78 <GUI_DrawRoundedRect+0x184>)
 8015e08:	a80e      	add	r0, sp, #56	; 0x38
 8015e0a:	681c      	ldr	r4, [r3, #0]
 8015e0c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015e0e:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8015e10:	eb05 0309 	add.w	r3, r5, r9
 8015e14:	eb05 0208 	add.w	r2, r5, r8
 8015e18:	19e1      	adds	r1, r4, r7
 8015e1a:	4434      	add	r4, r6
 8015e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e1e:	920c      	str	r2, [sp, #48]	; 0x30
 8015e20:	9106      	str	r1, [sp, #24]
 8015e22:	9409      	str	r4, [sp, #36]	; 0x24
 8015e24:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015e28:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8015e2c:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 8015e30:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8015e34:	f00a fe8e 	bl	8020b54 <WM__InitIVRSearch>
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	f000 8098 	beq.w	8015f6e <GUI_DrawRoundedRect+0x17a>
 8015e3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015e40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015e42:	9906      	ldr	r1, [sp, #24]
 8015e44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8015e46:	1b03      	subs	r3, r0, r4
 8015e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	1a52      	subs	r2, r2, r1
 8015e4e:	4429      	add	r1, r5
 8015e50:	930a      	str	r3, [sp, #40]	; 0x28
 8015e52:	006d      	lsls	r5, r5, #1
 8015e54:	1c4b      	adds	r3, r1, #1
 8015e56:	3201      	adds	r2, #1
 8015e58:	9102      	str	r1, [sp, #8]
 8015e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8015e5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015e5e:	9207      	str	r2, [sp, #28]
 8015e60:	fb03 f303 	mul.w	r3, r3, r3
 8015e64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015e66:	9508      	str	r5, [sp, #32]
 8015e68:	9305      	str	r3, [sp, #20]
 8015e6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015e6c:	18e3      	adds	r3, r4, r3
 8015e6e:	9303      	str	r3, [sp, #12]
 8015e70:	1a83      	subs	r3, r0, r2
 8015e72:	9304      	str	r3, [sp, #16]
 8015e74:	9b07      	ldr	r3, [sp, #28]
 8015e76:	9a08      	ldr	r2, [sp, #32]
 8015e78:	4619      	mov	r1, r3
 8015e7a:	4291      	cmp	r1, r2
 8015e7c:	db73      	blt.n	8015f66 <GUI_DrawRoundedRect+0x172>
 8015e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e80:	4619      	mov	r1, r3
 8015e82:	4291      	cmp	r1, r2
 8015e84:	db6f      	blt.n	8015f66 <GUI_DrawRoundedRect+0x172>
 8015e86:	9b06      	ldr	r3, [sp, #24]
 8015e88:	9a02      	ldr	r2, [sp, #8]
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	dc4b      	bgt.n	8015f26 <GUI_DrawRoundedRect+0x132>
 8015e8e:	461d      	mov	r5, r3
 8015e90:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e94:	f04f 34ff 	mov.w	r4, #4294967295
 8015e98:	1b9b      	subs	r3, r3, r6
 8015e9a:	9301      	str	r3, [sp, #4]
 8015e9c:	e01a      	b.n	8015ed4 <GUI_DrawRoundedRect+0xe0>
 8015e9e:	ebc4 0409 	rsb	r4, r4, r9
 8015ea2:	4642      	mov	r2, r8
 8015ea4:	f004 f8cc 	bl	801a040 <LCD_DrawHLine>
 8015ea8:	464a      	mov	r2, r9
 8015eaa:	3401      	adds	r4, #1
 8015eac:	4629      	mov	r1, r5
 8015eae:	4620      	mov	r0, r4
 8015eb0:	f004 f8c6 	bl	801a040 <LCD_DrawHLine>
 8015eb4:	4642      	mov	r2, r8
 8015eb6:	4651      	mov	r1, sl
 8015eb8:	4658      	mov	r0, fp
 8015eba:	f004 f8c1 	bl	801a040 <LCD_DrawHLine>
 8015ebe:	464a      	mov	r2, r9
 8015ec0:	4651      	mov	r1, sl
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f004 f8bc 	bl	801a040 <LCD_DrawHLine>
 8015ec8:	3501      	adds	r5, #1
 8015eca:	9b02      	ldr	r3, [sp, #8]
 8015ecc:	3e01      	subs	r6, #1
 8015ece:	463c      	mov	r4, r7
 8015ed0:	429d      	cmp	r5, r3
 8015ed2:	dc2c      	bgt.n	8015f2e <GUI_DrawRoundedRect+0x13a>
 8015ed4:	9b05      	ldr	r3, [sp, #20]
 8015ed6:	fb06 3016 	mls	r0, r6, r6, r3
 8015eda:	9b01      	ldr	r3, [sp, #4]
 8015edc:	eb03 0a06 	add.w	sl, r3, r6
 8015ee0:	f003 fdd0 	bl	8019a84 <GUI__sqrt32>
 8015ee4:	9b03      	ldr	r3, [sp, #12]
 8015ee6:	1b04      	subs	r4, r0, r4
 8015ee8:	4607      	mov	r7, r0
 8015eea:	4629      	mov	r1, r5
 8015eec:	ebc0 0b03 	rsb	fp, r0, r3
 8015ef0:	2c01      	cmp	r4, #1
 8015ef2:	9b04      	ldr	r3, [sp, #16]
 8015ef4:	eb0b 0804 	add.w	r8, fp, r4
 8015ef8:	eb00 0903 	add.w	r9, r0, r3
 8015efc:	4658      	mov	r0, fp
 8015efe:	f108 38ff 	add.w	r8, r8, #4294967295
 8015f02:	dccc      	bgt.n	8015e9e <GUI_DrawRoundedRect+0xaa>
 8015f04:	4629      	mov	r1, r5
 8015f06:	4658      	mov	r0, fp
 8015f08:	f004 f868 	bl	8019fdc <LCD_DrawPixel>
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	4648      	mov	r0, r9
 8015f10:	f004 f864 	bl	8019fdc <LCD_DrawPixel>
 8015f14:	4651      	mov	r1, sl
 8015f16:	4658      	mov	r0, fp
 8015f18:	f004 f860 	bl	8019fdc <LCD_DrawPixel>
 8015f1c:	4651      	mov	r1, sl
 8015f1e:	4648      	mov	r0, r9
 8015f20:	f004 f85c 	bl	8019fdc <LCD_DrawPixel>
 8015f24:	e7d0      	b.n	8015ec8 <GUI_DrawRoundedRect+0xd4>
 8015f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015f2a:	1a9b      	subs	r3, r3, r2
 8015f2c:	9301      	str	r3, [sp, #4]
 8015f2e:	9b03      	ldr	r3, [sp, #12]
 8015f30:	9906      	ldr	r1, [sp, #24]
 8015f32:	1c5c      	adds	r4, r3, #1
 8015f34:	9b04      	ldr	r3, [sp, #16]
 8015f36:	1e5d      	subs	r5, r3, #1
 8015f38:	9b01      	ldr	r3, [sp, #4]
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	462a      	mov	r2, r5
 8015f3e:	f103 3bff 	add.w	fp, r3, #4294967295
 8015f42:	f004 f87d 	bl	801a040 <LCD_DrawHLine>
 8015f46:	4620      	mov	r0, r4
 8015f48:	462a      	mov	r2, r5
 8015f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f4c:	f004 f878 	bl	801a040 <LCD_DrawHLine>
 8015f50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015f52:	465a      	mov	r2, fp
 8015f54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015f56:	4621      	mov	r1, r4
 8015f58:	f004 f89a 	bl	801a090 <LCD_DrawVLine>
 8015f5c:	465a      	mov	r2, fp
 8015f5e:	4621      	mov	r1, r4
 8015f60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015f62:	f004 f895 	bl	801a090 <LCD_DrawVLine>
 8015f66:	f00a fccb 	bl	8020900 <WM__GetNextIVR>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d182      	bne.n	8015e74 <GUI_DrawRoundedRect+0x80>
 8015f6e:	f002 fb0f 	bl	8018590 <GUI_Unlock>
 8015f72:	b011      	add	sp, #68	; 0x44
 8015f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f78:	20000018 	.word	0x20000018

08015f7c <_Color2Index>:
 8015f7c:	4b02      	ldr	r3, [pc, #8]	; (8015f88 <_Color2Index+0xc>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	691b      	ldr	r3, [r3, #16]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	4718      	bx	r3
 8015f88:	2000028c 	.word	0x2000028c

08015f8c <_Index2Color>:
 8015f8c:	4b02      	ldr	r3, [pc, #8]	; (8015f98 <_Index2Color+0xc>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	691b      	ldr	r3, [r3, #16]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	4718      	bx	r3
 8015f98:	2000028c 	.word	0x2000028c

08015f9c <_GetIndexMask>:
 8015f9c:	4b02      	ldr	r3, [pc, #8]	; (8015fa8 <_GetIndexMask+0xc>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	691b      	ldr	r3, [r3, #16]
 8015fa4:	689b      	ldr	r3, [r3, #8]
 8015fa6:	4718      	bx	r3
 8015fa8:	2000028c 	.word	0x2000028c

08015fac <_DrawHLine>:
 8015fac:	6800      	ldr	r0, [r0, #0]
 8015fae:	b130      	cbz	r0, 8015fbe <_DrawHLine+0x12>
 8015fb0:	b410      	push	{r4}
 8015fb2:	68c4      	ldr	r4, [r0, #12]
 8015fb4:	68a4      	ldr	r4, [r4, #8]
 8015fb6:	46a4      	mov	ip, r4
 8015fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fbc:	4760      	bx	ip
 8015fbe:	4770      	bx	lr

08015fc0 <_DrawVLine>:
 8015fc0:	6800      	ldr	r0, [r0, #0]
 8015fc2:	b130      	cbz	r0, 8015fd2 <_DrawVLine+0x12>
 8015fc4:	b410      	push	{r4}
 8015fc6:	68c4      	ldr	r4, [r0, #12]
 8015fc8:	68e4      	ldr	r4, [r4, #12]
 8015fca:	46a4      	mov	ip, r4
 8015fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fd0:	4760      	bx	ip
 8015fd2:	4770      	bx	lr

08015fd4 <_FillRect>:
 8015fd4:	6800      	ldr	r0, [r0, #0]
 8015fd6:	b430      	push	{r4, r5}
 8015fd8:	b120      	cbz	r0, 8015fe4 <_FillRect+0x10>
 8015fda:	68c5      	ldr	r5, [r0, #12]
 8015fdc:	692c      	ldr	r4, [r5, #16]
 8015fde:	46a4      	mov	ip, r4
 8015fe0:	bc30      	pop	{r4, r5}
 8015fe2:	4760      	bx	ip
 8015fe4:	bc30      	pop	{r4, r5}
 8015fe6:	4770      	bx	lr

08015fe8 <_GetPixelIndex>:
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	b110      	cbz	r0, 8015ff2 <_GetPixelIndex+0xa>
 8015fec:	68c3      	ldr	r3, [r0, #12]
 8015fee:	695b      	ldr	r3, [r3, #20]
 8015ff0:	4718      	bx	r3
 8015ff2:	4770      	bx	lr

08015ff4 <_SetPixelIndex>:
 8015ff4:	6800      	ldr	r0, [r0, #0]
 8015ff6:	b130      	cbz	r0, 8016006 <_SetPixelIndex+0x12>
 8015ff8:	b410      	push	{r4}
 8015ffa:	68c4      	ldr	r4, [r0, #12]
 8015ffc:	69a4      	ldr	r4, [r4, #24]
 8015ffe:	46a4      	mov	ip, r4
 8016000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016004:	4760      	bx	ip
 8016006:	4770      	bx	lr

08016008 <_XorPixel>:
 8016008:	6800      	ldr	r0, [r0, #0]
 801600a:	b110      	cbz	r0, 8016012 <_XorPixel+0xa>
 801600c:	68c3      	ldr	r3, [r0, #12]
 801600e:	69db      	ldr	r3, [r3, #28]
 8016010:	4718      	bx	r3
 8016012:	4770      	bx	lr

08016014 <_GetDevData>:
 8016014:	6800      	ldr	r0, [r0, #0]
 8016016:	b110      	cbz	r0, 801601e <_GetDevData+0xa>
 8016018:	68c3      	ldr	r3, [r0, #12]
 801601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801601c:	4718      	bx	r3
 801601e:	4770      	bx	lr

08016020 <_SetOrg>:
 8016020:	6800      	ldr	r0, [r0, #0]
 8016022:	b110      	cbz	r0, 801602a <_SetOrg+0xa>
 8016024:	68c3      	ldr	r3, [r0, #12]
 8016026:	6a1b      	ldr	r3, [r3, #32]
 8016028:	4718      	bx	r3
 801602a:	4770      	bx	lr

0801602c <_GetDevFunc>:
 801602c:	6803      	ldr	r3, [r0, #0]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	6003      	str	r3, [r0, #0]
 8016032:	b113      	cbz	r3, 801603a <_GetDevFunc+0xe>
 8016034:	68db      	ldr	r3, [r3, #12]
 8016036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016038:	4718      	bx	r3
 801603a:	4618      	mov	r0, r3
 801603c:	4770      	bx	lr
 801603e:	bf00      	nop

08016040 <_GetDevProp>:
 8016040:	6800      	ldr	r0, [r0, #0]
 8016042:	b110      	cbz	r0, 801604a <_GetDevProp+0xa>
 8016044:	68c3      	ldr	r3, [r0, #12]
 8016046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016048:	4718      	bx	r3
 801604a:	4770      	bx	lr

0801604c <_GetRect>:
 801604c:	6800      	ldr	r0, [r0, #0]
 801604e:	b110      	cbz	r0, 8016056 <_GetRect+0xa>
 8016050:	68c3      	ldr	r3, [r0, #12]
 8016052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016054:	4718      	bx	r3
 8016056:	4770      	bx	lr

08016058 <_OnExit>:
 8016058:	b538      	push	{r3, r4, r5, lr}
 801605a:	4c05      	ldr	r4, [pc, #20]	; (8016070 <_OnExit+0x18>)
 801605c:	2500      	movs	r5, #0
 801605e:	6820      	ldr	r0, [r4, #0]
 8016060:	f7fc fd64 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8016064:	6860      	ldr	r0, [r4, #4]
 8016066:	6025      	str	r5, [r4, #0]
 8016068:	f7fc fd60 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 801606c:	6065      	str	r5, [r4, #4]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	2000028c 	.word	0x2000028c

08016074 <_Color2IndexBulk>:
 8016074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016078:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801610c <_Color2IndexBulk+0x98>
 801607c:	f8d8 5000 	ldr.w	r5, [r8]
 8016080:	682d      	ldr	r5, [r5, #0]
 8016082:	692d      	ldr	r5, [r5, #16]
 8016084:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8016088:	f1be 0f00 	cmp.w	lr, #0
 801608c:	d003      	beq.n	8016096 <_Color2IndexBulk+0x22>
 801608e:	46f4      	mov	ip, lr
 8016090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016094:	4760      	bx	ip
 8016096:	2b02      	cmp	r3, #2
 8016098:	4607      	mov	r7, r0
 801609a:	4614      	mov	r4, r2
 801609c:	d025      	beq.n	80160ea <_Color2IndexBulk+0x76>
 801609e:	2b04      	cmp	r3, #4
 80160a0:	d013      	beq.n	80160ca <_Color2IndexBulk+0x56>
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d001      	beq.n	80160aa <_Color2IndexBulk+0x36>
 80160a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160aa:	1e4e      	subs	r6, r1, #1
 80160ac:	e003      	b.n	80160b6 <_Color2IndexBulk+0x42>
 80160ae:	f8d8 3000 	ldr.w	r3, [r8]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	691d      	ldr	r5, [r3, #16]
 80160b6:	682b      	ldr	r3, [r5, #0]
 80160b8:	f857 0b04 	ldr.w	r0, [r7], #4
 80160bc:	4798      	blx	r3
 80160be:	3c01      	subs	r4, #1
 80160c0:	f806 0f01 	strb.w	r0, [r6, #1]!
 80160c4:	d1f3      	bne.n	80160ae <_Color2IndexBulk+0x3a>
 80160c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ca:	1f0e      	subs	r6, r1, #4
 80160cc:	e003      	b.n	80160d6 <_Color2IndexBulk+0x62>
 80160ce:	f8d8 3000 	ldr.w	r3, [r8]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	691d      	ldr	r5, [r3, #16]
 80160d6:	682b      	ldr	r3, [r5, #0]
 80160d8:	f857 0b04 	ldr.w	r0, [r7], #4
 80160dc:	4798      	blx	r3
 80160de:	3c01      	subs	r4, #1
 80160e0:	f846 0f04 	str.w	r0, [r6, #4]!
 80160e4:	d1f3      	bne.n	80160ce <_Color2IndexBulk+0x5a>
 80160e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ea:	1e8e      	subs	r6, r1, #2
 80160ec:	e003      	b.n	80160f6 <_Color2IndexBulk+0x82>
 80160ee:	f8d8 3000 	ldr.w	r3, [r8]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	691d      	ldr	r5, [r3, #16]
 80160f6:	682b      	ldr	r3, [r5, #0]
 80160f8:	f857 0b04 	ldr.w	r0, [r7], #4
 80160fc:	4798      	blx	r3
 80160fe:	3c01      	subs	r4, #1
 8016100:	f826 0f02 	strh.w	r0, [r6, #2]!
 8016104:	d1f3      	bne.n	80160ee <_Color2IndexBulk+0x7a>
 8016106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801610a:	bf00      	nop
 801610c:	2000028c 	.word	0x2000028c

08016110 <_Index2ColorBulk>:
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80161a8 <_Index2ColorBulk+0x98>
 8016118:	f8d8 5000 	ldr.w	r5, [r8]
 801611c:	682d      	ldr	r5, [r5, #0]
 801611e:	692d      	ldr	r5, [r5, #16]
 8016120:	f8d5 e014 	ldr.w	lr, [r5, #20]
 8016124:	f1be 0f00 	cmp.w	lr, #0
 8016128:	d003      	beq.n	8016132 <_Index2ColorBulk+0x22>
 801612a:	46f4      	mov	ip, lr
 801612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016130:	4760      	bx	ip
 8016132:	2b02      	cmp	r3, #2
 8016134:	4607      	mov	r7, r0
 8016136:	4614      	mov	r4, r2
 8016138:	d025      	beq.n	8016186 <_Index2ColorBulk+0x76>
 801613a:	2b04      	cmp	r3, #4
 801613c:	d013      	beq.n	8016166 <_Index2ColorBulk+0x56>
 801613e:	2b01      	cmp	r3, #1
 8016140:	d001      	beq.n	8016146 <_Index2ColorBulk+0x36>
 8016142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016146:	1f0e      	subs	r6, r1, #4
 8016148:	e003      	b.n	8016152 <_Index2ColorBulk+0x42>
 801614a:	f8d8 3000 	ldr.w	r3, [r8]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	691d      	ldr	r5, [r3, #16]
 8016152:	686b      	ldr	r3, [r5, #4]
 8016154:	f817 0b01 	ldrb.w	r0, [r7], #1
 8016158:	4798      	blx	r3
 801615a:	3c01      	subs	r4, #1
 801615c:	f846 0f04 	str.w	r0, [r6, #4]!
 8016160:	d1f3      	bne.n	801614a <_Index2ColorBulk+0x3a>
 8016162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016166:	1f0e      	subs	r6, r1, #4
 8016168:	e003      	b.n	8016172 <_Index2ColorBulk+0x62>
 801616a:	f8d8 3000 	ldr.w	r3, [r8]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	691d      	ldr	r5, [r3, #16]
 8016172:	686b      	ldr	r3, [r5, #4]
 8016174:	f857 0b04 	ldr.w	r0, [r7], #4
 8016178:	4798      	blx	r3
 801617a:	3c01      	subs	r4, #1
 801617c:	f846 0f04 	str.w	r0, [r6, #4]!
 8016180:	d1f3      	bne.n	801616a <_Index2ColorBulk+0x5a>
 8016182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016186:	1f0e      	subs	r6, r1, #4
 8016188:	e003      	b.n	8016192 <_Index2ColorBulk+0x82>
 801618a:	f8d8 3000 	ldr.w	r3, [r8]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	691d      	ldr	r5, [r3, #16]
 8016192:	686b      	ldr	r3, [r5, #4]
 8016194:	f837 0b02 	ldrh.w	r0, [r7], #2
 8016198:	4798      	blx	r3
 801619a:	3c01      	subs	r4, #1
 801619c:	f846 0f04 	str.w	r0, [r6, #4]!
 80161a0:	d1f3      	bne.n	801618a <_Index2ColorBulk+0x7a>
 80161a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a6:	bf00      	nop
 80161a8:	2000028c 	.word	0x2000028c

080161ac <_SetBkColor>:
 80161ac:	4b20      	ldr	r3, [pc, #128]	; (8016230 <_SetBkColor+0x84>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b4:	7c1b      	ldrb	r3, [r3, #16]
 80161b6:	4606      	mov	r6, r0
 80161b8:	4d1e      	ldr	r5, [pc, #120]	; (8016234 <_SetBkColor+0x88>)
 80161ba:	075b      	lsls	r3, r3, #29
 80161bc:	d42e      	bmi.n	801621c <_SetBkColor+0x70>
 80161be:	4603      	mov	r3, r0
 80161c0:	682c      	ldr	r4, [r5, #0]
 80161c2:	6068      	str	r0, [r5, #4]
 80161c4:	0e24      	lsrs	r4, r4, #24
 80161c6:	4f1c      	ldr	r7, [pc, #112]	; (8016238 <_SetBkColor+0x8c>)
 80161c8:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 80161cc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	d01b      	beq.n	801620c <_SetBkColor+0x60>
 80161d4:	b333      	cbz	r3, 8016224 <_SetBkColor+0x78>
 80161d6:	68ab      	ldr	r3, [r5, #8]
 80161d8:	2bfe      	cmp	r3, #254	; 0xfe
 80161da:	d808      	bhi.n	80161ee <_SetBkColor+0x42>
 80161dc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80161e0:	4a16      	ldr	r2, [pc, #88]	; (801623c <_SetBkColor+0x90>)
 80161e2:	fb04 f303 	mul.w	r3, r4, r3
 80161e6:	fba2 2303 	umull	r2, r3, r2, r3
 80161ea:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 80161ee:	68eb      	ldr	r3, [r5, #12]
 80161f0:	4d10      	ldr	r5, [pc, #64]	; (8016234 <_SetBkColor+0x88>)
 80161f2:	42a3      	cmp	r3, r4
 80161f4:	d003      	beq.n	80161fe <_SetBkColor+0x52>
 80161f6:	b2e0      	uxtb	r0, r4
 80161f8:	f001 f850 	bl	801729c <GUI_SetAlpha>
 80161fc:	60ec      	str	r4, [r5, #12]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801620a:	4718      	bx	r3
 801620c:	2b01      	cmp	r3, #1
 801620e:	d1e2      	bne.n	80161d6 <_SetBkColor+0x2a>
 8016210:	6838      	ldr	r0, [r7, #0]
 8016212:	f7fe fa15 	bl	8014640 <GUI_DEVICE_Unlink>
 8016216:	2300      	movs	r3, #0
 8016218:	60bb      	str	r3, [r7, #8]
 801621a:	e7dc      	b.n	80161d6 <_SetBkColor+0x2a>
 801621c:	4604      	mov	r4, r0
 801621e:	6028      	str	r0, [r5, #0]
 8016220:	686b      	ldr	r3, [r5, #4]
 8016222:	e7cf      	b.n	80161c4 <_SetBkColor+0x18>
 8016224:	6838      	ldr	r0, [r7, #0]
 8016226:	f7fe fa2d 	bl	8014684 <GUI_DEVICE_Link>
 801622a:	2301      	movs	r3, #1
 801622c:	60bb      	str	r3, [r7, #8]
 801622e:	e7d2      	b.n	80161d6 <_SetBkColor+0x2a>
 8016230:	20000018 	.word	0x20000018
 8016234:	2000001c 	.word	0x2000001c
 8016238:	2000028c 	.word	0x2000028c
 801623c:	80808081 	.word	0x80808081

08016240 <_SetColor>:
 8016240:	4b20      	ldr	r3, [pc, #128]	; (80162c4 <_SetColor+0x84>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016248:	7c1b      	ldrb	r3, [r3, #16]
 801624a:	4606      	mov	r6, r0
 801624c:	4d1e      	ldr	r5, [pc, #120]	; (80162c8 <_SetColor+0x88>)
 801624e:	075b      	lsls	r3, r3, #29
 8016250:	d42e      	bmi.n	80162b0 <_SetColor+0x70>
 8016252:	4604      	mov	r4, r0
 8016254:	686b      	ldr	r3, [r5, #4]
 8016256:	6028      	str	r0, [r5, #0]
 8016258:	0e24      	lsrs	r4, r4, #24
 801625a:	4f1c      	ldr	r7, [pc, #112]	; (80162cc <_SetColor+0x8c>)
 801625c:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 8016260:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	d01b      	beq.n	80162a0 <_SetColor+0x60>
 8016268:	b333      	cbz	r3, 80162b8 <_SetColor+0x78>
 801626a:	68ab      	ldr	r3, [r5, #8]
 801626c:	2bfe      	cmp	r3, #254	; 0xfe
 801626e:	d808      	bhi.n	8016282 <_SetColor+0x42>
 8016270:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016274:	4a16      	ldr	r2, [pc, #88]	; (80162d0 <_SetColor+0x90>)
 8016276:	fb04 f303 	mul.w	r3, r4, r3
 801627a:	fba2 2303 	umull	r2, r3, r2, r3
 801627e:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 8016282:	68eb      	ldr	r3, [r5, #12]
 8016284:	4d10      	ldr	r5, [pc, #64]	; (80162c8 <_SetColor+0x88>)
 8016286:	42a3      	cmp	r3, r4
 8016288:	d003      	beq.n	8016292 <_SetColor+0x52>
 801628a:	b2e0      	uxtb	r0, r4
 801628c:	f001 f806 	bl	801729c <GUI_SetAlpha>
 8016290:	60ec      	str	r4, [r5, #12]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f046 407f 	orr.w	r0, r6, #4278190080	; 0xff000000
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801629e:	4718      	bx	r3
 80162a0:	2b01      	cmp	r3, #1
 80162a2:	d1e2      	bne.n	801626a <_SetColor+0x2a>
 80162a4:	6838      	ldr	r0, [r7, #0]
 80162a6:	f7fe f9cb 	bl	8014640 <GUI_DEVICE_Unlink>
 80162aa:	2300      	movs	r3, #0
 80162ac:	60bb      	str	r3, [r7, #8]
 80162ae:	e7dc      	b.n	801626a <_SetColor+0x2a>
 80162b0:	4603      	mov	r3, r0
 80162b2:	6068      	str	r0, [r5, #4]
 80162b4:	682c      	ldr	r4, [r5, #0]
 80162b6:	e7cf      	b.n	8016258 <_SetColor+0x18>
 80162b8:	6838      	ldr	r0, [r7, #0]
 80162ba:	f7fe f9e3 	bl	8014684 <GUI_DEVICE_Link>
 80162be:	2301      	movs	r3, #1
 80162c0:	60bb      	str	r3, [r7, #8]
 80162c2:	e7d2      	b.n	801626a <_SetColor+0x2a>
 80162c4:	20000018 	.word	0x20000018
 80162c8:	2000001c 	.word	0x2000001c
 80162cc:	2000028c 	.word	0x2000028c
 80162d0:	80808081 	.word	0x80808081

080162d4 <_SetDrawMode>:
 80162d4:	4b21      	ldr	r3, [pc, #132]	; (801635c <_SetDrawMode+0x88>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162dc:	7c1b      	ldrb	r3, [r3, #16]
 80162de:	4606      	mov	r6, r0
 80162e0:	4f1f      	ldr	r7, [pc, #124]	; (8016360 <_SetDrawMode+0x8c>)
 80162e2:	4043      	eors	r3, r0
 80162e4:	075b      	lsls	r3, r3, #29
 80162e6:	d52f      	bpl.n	8016348 <_SetDrawMode+0x74>
 80162e8:	e897 0014 	ldmia.w	r7, {r2, r4}
 80162ec:	4613      	mov	r3, r2
 80162ee:	607a      	str	r2, [r7, #4]
 80162f0:	603c      	str	r4, [r7, #0]
 80162f2:	0e24      	lsrs	r4, r4, #24
 80162f4:	4d1b      	ldr	r5, [pc, #108]	; (8016364 <_SetDrawMode+0x90>)
 80162f6:	eb04 6313 	add.w	r3, r4, r3, lsr #24
 80162fa:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80162fe:	68ab      	ldr	r3, [r5, #8]
 8016300:	d01a      	beq.n	8016338 <_SetDrawMode+0x64>
 8016302:	b323      	cbz	r3, 801634e <_SetDrawMode+0x7a>
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	2bfe      	cmp	r3, #254	; 0xfe
 8016308:	d808      	bhi.n	801631c <_SetDrawMode+0x48>
 801630a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801630e:	4a16      	ldr	r2, [pc, #88]	; (8016368 <_SetDrawMode+0x94>)
 8016310:	fb04 f303 	mul.w	r3, r4, r3
 8016314:	fba2 2303 	umull	r2, r3, r2, r3
 8016318:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	4f10      	ldr	r7, [pc, #64]	; (8016360 <_SetDrawMode+0x8c>)
 8016320:	42a3      	cmp	r3, r4
 8016322:	d003      	beq.n	801632c <_SetDrawMode+0x58>
 8016324:	b2e0      	uxtb	r0, r4
 8016326:	f000 ffb9 	bl	801729c <GUI_SetAlpha>
 801632a:	60fc      	str	r4, [r7, #12]
 801632c:	68eb      	ldr	r3, [r5, #12]
 801632e:	4630      	mov	r0, r6
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016336:	4718      	bx	r3
 8016338:	2b01      	cmp	r3, #1
 801633a:	d1e3      	bne.n	8016304 <_SetDrawMode+0x30>
 801633c:	6828      	ldr	r0, [r5, #0]
 801633e:	f7fe f97f 	bl	8014640 <GUI_DEVICE_Unlink>
 8016342:	2300      	movs	r3, #0
 8016344:	60ab      	str	r3, [r5, #8]
 8016346:	e7dd      	b.n	8016304 <_SetDrawMode+0x30>
 8016348:	683c      	ldr	r4, [r7, #0]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	e7d1      	b.n	80162f2 <_SetDrawMode+0x1e>
 801634e:	6828      	ldr	r0, [r5, #0]
 8016350:	f7fe f998 	bl	8014684 <GUI_DEVICE_Link>
 8016354:	2301      	movs	r3, #1
 8016356:	60ab      	str	r3, [r5, #8]
 8016358:	e7d4      	b.n	8016304 <_SetDrawMode+0x30>
 801635a:	bf00      	nop
 801635c:	20000018 	.word	0x20000018
 8016360:	2000001c 	.word	0x2000001c
 8016364:	2000028c 	.word	0x2000028c
 8016368:	80808081 	.word	0x80808081

0801636c <_DrawBitmap>:
 801636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016370:	b091      	sub	sp, #68	; 0x44
 8016372:	4607      	mov	r7, r0
 8016374:	4689      	mov	r9, r1
 8016376:	4698      	mov	r8, r3
 8016378:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801637a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801637c:	2c01      	cmp	r4, #1
 801637e:	9208      	str	r2, [sp, #32]
 8016380:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8016384:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8016388:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801638a:	9007      	str	r0, [sp, #28]
 801638c:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8016390:	d017      	beq.n	80163c2 <_DrawBitmap+0x56>
 8016392:	6838      	ldr	r0, [r7, #0]
 8016394:	2800      	cmp	r0, #0
 8016396:	f000 8120 	beq.w	80165da <_DrawBitmap+0x26e>
 801639a:	9e07      	ldr	r6, [sp, #28]
 801639c:	4643      	mov	r3, r8
 801639e:	68c7      	ldr	r7, [r0, #12]
 80163a0:	4649      	mov	r1, r9
 80163a2:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
 80163a6:	961e      	str	r6, [sp, #120]	; 0x78
 80163a8:	951d      	str	r5, [sp, #116]	; 0x74
 80163aa:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80163ae:	941b      	str	r4, [sp, #108]	; 0x6c
 80163b0:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 80163b4:	687c      	ldr	r4, [r7, #4]
 80163b6:	9a08      	ldr	r2, [sp, #32]
 80163b8:	46a4      	mov	ip, r4
 80163ba:	b011      	add	sp, #68	; 0x44
 80163bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c0:	4760      	bx	ip
 80163c2:	48a1      	ldr	r0, [pc, #644]	; (8016648 <_DrawBitmap+0x2dc>)
 80163c4:	6800      	ldr	r0, [r0, #0]
 80163c6:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80163c8:	4576      	cmp	r6, lr
 80163ca:	9609      	str	r6, [sp, #36]	; 0x24
 80163cc:	d1e1      	bne.n	8016392 <_DrawBitmap+0x26>
 80163ce:	7c06      	ldrb	r6, [r0, #16]
 80163d0:	960b      	str	r6, [sp, #44]	; 0x2c
 80163d2:	2e00      	cmp	r6, #0
 80163d4:	d1dd      	bne.n	8016392 <_DrawBitmap+0x26>
 80163d6:	f04f 0e02 	mov.w	lr, #2
 80163da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80163dc:	f880 e010 	strb.w	lr, [r0, #16]
 80163e0:	6838      	ldr	r0, [r7, #0]
 80163e2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80163e6:	9605      	str	r6, [sp, #20]
 80163e8:	9e07      	ldr	r6, [sp, #28]
 80163ea:	9503      	str	r5, [sp, #12]
 80163ec:	9604      	str	r6, [sp, #16]
 80163ee:	f8cd b008 	str.w	fp, [sp, #8]
 80163f2:	9401      	str	r4, [sp, #4]
 80163f4:	f8cd a000 	str.w	sl, [sp]
 80163f8:	f8de 6004 	ldr.w	r6, [lr, #4]
 80163fc:	47b0      	blx	r6
 80163fe:	4b92      	ldr	r3, [pc, #584]	; (8016648 <_DrawBitmap+0x2dc>)
 8016400:	4a92      	ldr	r2, [pc, #584]	; (801664c <_DrawBitmap+0x2e0>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8016408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801640a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801640c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8016410:	6816      	ldr	r6, [r2, #0]
 8016412:	4b8e      	ldr	r3, [pc, #568]	; (801664c <_DrawBitmap+0x2e0>)
 8016414:	f8d0 e000 	ldr.w	lr, [r0]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	6006      	str	r6, [r0, #0]
 801641c:	488b      	ldr	r0, [pc, #556]	; (801664c <_DrawBitmap+0x2e0>)
 801641e:	f8c2 e000 	str.w	lr, [r2]
 8016422:	f8c0 c000 	str.w	ip, [r0]
 8016426:	eb01 6013 	add.w	r0, r1, r3, lsr #24
 801642a:	4a88      	ldr	r2, [pc, #544]	; (801664c <_DrawBitmap+0x2e0>)
 801642c:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8016430:	6053      	str	r3, [r2, #4]
 8016432:	4b87      	ldr	r3, [pc, #540]	; (8016650 <_DrawBitmap+0x2e4>)
 8016434:	930a      	str	r3, [sp, #40]	; 0x28
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	f000 80eb 	beq.w	8016612 <_DrawBitmap+0x2a6>
 801643c:	2b00      	cmp	r3, #0
 801643e:	f000 80fa 	beq.w	8016636 <_DrawBitmap+0x2ca>
 8016442:	4b82      	ldr	r3, [pc, #520]	; (801664c <_DrawBitmap+0x2e0>)
 8016444:	689b      	ldr	r3, [r3, #8]
 8016446:	2bfe      	cmp	r3, #254	; 0xfe
 8016448:	d808      	bhi.n	801645c <_DrawBitmap+0xf0>
 801644a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801644e:	4a81      	ldr	r2, [pc, #516]	; (8016654 <_DrawBitmap+0x2e8>)
 8016450:	fb01 f303 	mul.w	r3, r1, r3
 8016454:	fba2 2303 	umull	r2, r3, r2, r3
 8016458:	eba1 11d3 	sub.w	r1, r1, r3, lsr #7
 801645c:	4b7b      	ldr	r3, [pc, #492]	; (801664c <_DrawBitmap+0x2e0>)
 801645e:	4c7b      	ldr	r4, [pc, #492]	; (801664c <_DrawBitmap+0x2e0>)
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	428b      	cmp	r3, r1
 8016464:	d005      	beq.n	8016472 <_DrawBitmap+0x106>
 8016466:	b2c8      	uxtb	r0, r1
 8016468:	910b      	str	r1, [sp, #44]	; 0x2c
 801646a:	f000 ff17 	bl	801729c <GUI_SetAlpha>
 801646e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016470:	60e1      	str	r1, [r4, #12]
 8016472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016474:	6858      	ldr	r0, [r3, #4]
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	4619      	mov	r1, r3
 801647a:	4b75      	ldr	r3, [pc, #468]	; (8016650 <_DrawBitmap+0x2e4>)
 801647c:	2800      	cmp	r0, #0
 801647e:	d078      	beq.n	8016572 <_DrawBitmap+0x206>
 8016480:	691f      	ldr	r7, [r3, #16]
 8016482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016486:	9e08      	ldr	r6, [sp, #32]
 8016488:	45bb      	cmp	fp, r7
 801648a:	9108      	str	r1, [sp, #32]
 801648c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8016490:	bfd4      	ite	le
 8016492:	465f      	movle	r7, fp
 8016494:	ea4f 08c7 	movgt.w	r8, r7, lsl #3
 8016498:	1f3b      	subs	r3, r7, #4
 801649a:	1e7a      	subs	r2, r7, #1
 801649c:	089b      	lsrs	r3, r3, #2
 801649e:	920d      	str	r2, [sp, #52]	; 0x34
 80164a0:	eb0a 0206 	add.w	r2, sl, r6
 80164a4:	3301      	adds	r3, #1
 80164a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80164a8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80164ac:	930e      	str	r3, [sp, #56]	; 0x38
 80164ae:	ebca 0307 	rsb	r3, sl, r7
 80164b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80164b4:	e043      	b.n	801653e <_DrawBitmap+0x1d2>
 80164b6:	f1a5 0e04 	sub.w	lr, r5, #4
 80164ba:	4601      	mov	r1, r0
 80164bc:	2200      	movs	r2, #0
 80164be:	9c08      	ldr	r4, [sp, #32]
 80164c0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80164c4:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80164c8:	3201      	adds	r2, #1
 80164ca:	43db      	mvns	r3, r3
 80164cc:	4562      	cmp	r2, ip
 80164ce:	f841 3b04 	str.w	r3, [r1], #4
 80164d2:	d3f7      	bcc.n	80164c4 <_DrawBitmap+0x158>
 80164d4:	45ba      	cmp	sl, r7
 80164d6:	9408      	str	r4, [sp, #32]
 80164d8:	eb05 020a 	add.w	r2, r5, sl
 80164dc:	eb00 030a 	add.w	r3, r0, sl
 80164e0:	d012      	beq.n	8016508 <_DrawBitmap+0x19c>
 80164e2:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 80164e6:	7811      	ldrb	r1, [r2, #0]
 80164e8:	f1be 0f01 	cmp.w	lr, #1
 80164ec:	ea6f 0101 	mvn.w	r1, r1
 80164f0:	7019      	strb	r1, [r3, #0]
 80164f2:	d009      	beq.n	8016508 <_DrawBitmap+0x19c>
 80164f4:	7851      	ldrb	r1, [r2, #1]
 80164f6:	f1be 0f02 	cmp.w	lr, #2
 80164fa:	ea6f 0101 	mvn.w	r1, r1
 80164fe:	7059      	strb	r1, [r3, #1]
 8016500:	d002      	beq.n	8016508 <_DrawBitmap+0x19c>
 8016502:	7892      	ldrb	r2, [r2, #2]
 8016504:	43d2      	mvns	r2, r2
 8016506:	709a      	strb	r2, [r3, #2]
 8016508:	9c08      	ldr	r4, [sp, #32]
 801650a:	4643      	mov	r3, r8
 801650c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801650e:	445d      	add	r5, fp
 8016510:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8016514:	9907      	ldr	r1, [sp, #28]
 8016516:	9003      	str	r0, [sp, #12]
 8016518:	4620      	mov	r0, r4
 801651a:	2401      	movs	r4, #1
 801651c:	9205      	str	r2, [sp, #20]
 801651e:	9104      	str	r1, [sp, #16]
 8016520:	4632      	mov	r2, r6
 8016522:	f8cd b008 	str.w	fp, [sp, #8]
 8016526:	9401      	str	r4, [sp, #4]
 8016528:	9400      	str	r4, [sp, #0]
 801652a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801652c:	f8de 9004 	ldr.w	r9, [lr, #4]
 8016530:	47c8      	blx	r9
 8016532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016534:	429e      	cmp	r6, r3
 8016536:	d01c      	beq.n	8016572 <_DrawBitmap+0x206>
 8016538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801653a:	4426      	add	r6, r4
 801653c:	6858      	ldr	r0, [r3, #4]
 801653e:	1d2b      	adds	r3, r5, #4
 8016540:	1d02      	adds	r2, r0, #4
 8016542:	4295      	cmp	r5, r2
 8016544:	bf38      	it	cc
 8016546:	4298      	cmpcc	r0, r3
 8016548:	bf2c      	ite	cs
 801654a:	2301      	movcs	r3, #1
 801654c:	2300      	movcc	r3, #0
 801654e:	2f06      	cmp	r7, #6
 8016550:	bf94      	ite	ls
 8016552:	2300      	movls	r3, #0
 8016554:	f003 0301 	andhi.w	r3, r3, #1
 8016558:	2b00      	cmp	r3, #0
 801655a:	d041      	beq.n	80165e0 <_DrawBitmap+0x274>
 801655c:	ea40 0305 	orr.w	r3, r0, r5
 8016560:	079b      	lsls	r3, r3, #30
 8016562:	d13d      	bne.n	80165e0 <_DrawBitmap+0x274>
 8016564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016566:	2b02      	cmp	r3, #2
 8016568:	d8a5      	bhi.n	80164b6 <_DrawBitmap+0x14a>
 801656a:	4603      	mov	r3, r0
 801656c:	462a      	mov	r2, r5
 801656e:	46be      	mov	lr, r7
 8016570:	e7b9      	b.n	80164e6 <_DrawBitmap+0x17a>
 8016572:	4b35      	ldr	r3, [pc, #212]	; (8016648 <_DrawBitmap+0x2dc>)
 8016574:	4a35      	ldr	r2, [pc, #212]	; (801664c <_DrawBitmap+0x2e0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	6851      	ldr	r1, [r2, #4]
 801657a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801657c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801657e:	0e0c      	lsrs	r4, r1, #24
 8016580:	6810      	ldr	r0, [r2, #0]
 8016582:	4b32      	ldr	r3, [pc, #200]	; (801664c <_DrawBitmap+0x2e0>)
 8016584:	682e      	ldr	r6, [r5, #0]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	6028      	str	r0, [r5, #0]
 801658a:	4830      	ldr	r0, [pc, #192]	; (801664c <_DrawBitmap+0x2e0>)
 801658c:	6016      	str	r6, [r2, #0]
 801658e:	6001      	str	r1, [r0, #0]
 8016590:	eb04 6113 	add.w	r1, r4, r3, lsr #24
 8016594:	6043      	str	r3, [r0, #4]
 8016596:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 801659a:	d02f      	beq.n	80165fc <_DrawBitmap+0x290>
 801659c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801659e:	4d2c      	ldr	r5, [pc, #176]	; (8016650 <_DrawBitmap+0x2e4>)
 80165a0:	689b      	ldr	r3, [r3, #8]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d041      	beq.n	801662a <_DrawBitmap+0x2be>
 80165a6:	4b29      	ldr	r3, [pc, #164]	; (801664c <_DrawBitmap+0x2e0>)
 80165a8:	689b      	ldr	r3, [r3, #8]
 80165aa:	2bfe      	cmp	r3, #254	; 0xfe
 80165ac:	d808      	bhi.n	80165c0 <_DrawBitmap+0x254>
 80165ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80165b2:	4a28      	ldr	r2, [pc, #160]	; (8016654 <_DrawBitmap+0x2e8>)
 80165b4:	fb04 f303 	mul.w	r3, r4, r3
 80165b8:	fba2 2303 	umull	r2, r3, r2, r3
 80165bc:	eba4 14d3 	sub.w	r4, r4, r3, lsr #7
 80165c0:	4b22      	ldr	r3, [pc, #136]	; (801664c <_DrawBitmap+0x2e0>)
 80165c2:	4d22      	ldr	r5, [pc, #136]	; (801664c <_DrawBitmap+0x2e0>)
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	42a3      	cmp	r3, r4
 80165c8:	d003      	beq.n	80165d2 <_DrawBitmap+0x266>
 80165ca:	b2e0      	uxtb	r0, r4
 80165cc:	f000 fe66 	bl	801729c <GUI_SetAlpha>
 80165d0:	60ec      	str	r4, [r5, #12]
 80165d2:	4b1d      	ldr	r3, [pc, #116]	; (8016648 <_DrawBitmap+0x2dc>)
 80165d4:	2200      	movs	r2, #0
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	741a      	strb	r2, [r3, #16]
 80165da:	b011      	add	sp, #68	; 0x44
 80165dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165e0:	1e41      	subs	r1, r0, #1
 80165e2:	eb05 0e07 	add.w	lr, r5, r7
 80165e6:	462a      	mov	r2, r5
 80165e8:	9c08      	ldr	r4, [sp, #32]
 80165ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80165ee:	43db      	mvns	r3, r3
 80165f0:	4572      	cmp	r2, lr
 80165f2:	f801 3f01 	strb.w	r3, [r1, #1]!
 80165f6:	d1f8      	bne.n	80165ea <_DrawBitmap+0x27e>
 80165f8:	9408      	str	r4, [sp, #32]
 80165fa:	e785      	b.n	8016508 <_DrawBitmap+0x19c>
 80165fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165fe:	4d14      	ldr	r5, [pc, #80]	; (8016650 <_DrawBitmap+0x2e4>)
 8016600:	689b      	ldr	r3, [r3, #8]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d1cf      	bne.n	80165a6 <_DrawBitmap+0x23a>
 8016606:	6828      	ldr	r0, [r5, #0]
 8016608:	f7fe f81a 	bl	8014640 <GUI_DEVICE_Unlink>
 801660c:	2300      	movs	r3, #0
 801660e:	60ab      	str	r3, [r5, #8]
 8016610:	e7c9      	b.n	80165a6 <_DrawBitmap+0x23a>
 8016612:	2b01      	cmp	r3, #1
 8016614:	f47f af15 	bne.w	8016442 <_DrawBitmap+0xd6>
 8016618:	4c0d      	ldr	r4, [pc, #52]	; (8016650 <_DrawBitmap+0x2e4>)
 801661a:	910c      	str	r1, [sp, #48]	; 0x30
 801661c:	6820      	ldr	r0, [r4, #0]
 801661e:	f7fe f80f 	bl	8014640 <GUI_DEVICE_Unlink>
 8016622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016626:	60a2      	str	r2, [r4, #8]
 8016628:	e70b      	b.n	8016442 <_DrawBitmap+0xd6>
 801662a:	6828      	ldr	r0, [r5, #0]
 801662c:	f7fe f82a 	bl	8014684 <GUI_DEVICE_Link>
 8016630:	2301      	movs	r3, #1
 8016632:	60ab      	str	r3, [r5, #8]
 8016634:	e7b7      	b.n	80165a6 <_DrawBitmap+0x23a>
 8016636:	4e06      	ldr	r6, [pc, #24]	; (8016650 <_DrawBitmap+0x2e4>)
 8016638:	910b      	str	r1, [sp, #44]	; 0x2c
 801663a:	6830      	ldr	r0, [r6, #0]
 801663c:	f7fe f822 	bl	8014684 <GUI_DEVICE_Link>
 8016640:	60b4      	str	r4, [r6, #8]
 8016642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016644:	e6fd      	b.n	8016442 <_DrawBitmap+0xd6>
 8016646:	bf00      	nop
 8016648:	20000018 	.word	0x20000018
 801664c:	2000001c 	.word	0x2000001c
 8016650:	2000028c 	.word	0x2000028c
 8016654:	80808081 	.word	0x80808081

08016658 <GUI_EnableAlpha>:
 8016658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801665a:	4c27      	ldr	r4, [pc, #156]	; (80166f8 <GUI_EnableAlpha+0xa0>)
 801665c:	4606      	mov	r6, r0
 801665e:	f001 ffa1 	bl	80185a4 <GUI_Lock>
 8016662:	6825      	ldr	r5, [r4, #0]
 8016664:	b345      	cbz	r5, 80166b8 <GUI_EnableAlpha+0x60>
 8016666:	b13e      	cbz	r6, 8016678 <GUI_EnableAlpha+0x20>
 8016668:	68e4      	ldr	r4, [r4, #12]
 801666a:	4b23      	ldr	r3, [pc, #140]	; (80166f8 <GUI_EnableAlpha+0xa0>)
 801666c:	b1bc      	cbz	r4, 801669e <GUI_EnableAlpha+0x46>
 801666e:	2401      	movs	r4, #1
 8016670:	f001 ff8e 	bl	8018590 <GUI_Unlock>
 8016674:	4620      	mov	r0, r4
 8016676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016678:	68e3      	ldr	r3, [r4, #12]
 801667a:	4a1f      	ldr	r2, [pc, #124]	; (80166f8 <GUI_EnableAlpha+0xa0>)
 801667c:	b153      	cbz	r3, 8016694 <GUI_EnableAlpha+0x3c>
 801667e:	491f      	ldr	r1, [pc, #124]	; (80166fc <GUI_EnableAlpha+0xa4>)
 8016680:	2401      	movs	r4, #1
 8016682:	7f10      	ldrb	r0, [r2, #28]
 8016684:	60d6      	str	r6, [r2, #12]
 8016686:	600b      	str	r3, [r1, #0]
 8016688:	f000 fe08 	bl	801729c <GUI_SetAlpha>
 801668c:	f001 ff80 	bl	8018590 <GUI_Unlock>
 8016690:	4620      	mov	r0, r4
 8016692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016694:	4634      	mov	r4, r6
 8016696:	f001 ff7b 	bl	8018590 <GUI_Unlock>
 801669a:	4620      	mov	r0, r4
 801669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801669e:	4917      	ldr	r1, [pc, #92]	; (80166fc <GUI_EnableAlpha+0xa4>)
 80166a0:	4817      	ldr	r0, [pc, #92]	; (8016700 <GUI_EnableAlpha+0xa8>)
 80166a2:	4a18      	ldr	r2, [pc, #96]	; (8016704 <GUI_EnableAlpha+0xac>)
 80166a4:	680f      	ldr	r7, [r1, #0]
 80166a6:	6805      	ldr	r5, [r0, #0]
 80166a8:	4e17      	ldr	r6, [pc, #92]	; (8016708 <GUI_EnableAlpha+0xb0>)
 80166aa:	6810      	ldr	r0, [r2, #0]
 80166ac:	4a17      	ldr	r2, [pc, #92]	; (801670c <GUI_EnableAlpha+0xb4>)
 80166ae:	60df      	str	r7, [r3, #12]
 80166b0:	600e      	str	r6, [r1, #0]
 80166b2:	6015      	str	r5, [r2, #0]
 80166b4:	6050      	str	r0, [r2, #4]
 80166b6:	e7db      	b.n	8016670 <GUI_EnableAlpha+0x18>
 80166b8:	4b15      	ldr	r3, [pc, #84]	; (8016710 <GUI_EnableAlpha+0xb8>)
 80166ba:	4620      	mov	r0, r4
 80166bc:	f840 3f14 	str.w	r3, [r0, #20]!
 80166c0:	f7fd ff3a 	bl	8014538 <GUI__RegisterExit>
 80166c4:	2001      	movs	r0, #1
 80166c6:	f000 fde9 	bl	801729c <GUI_SetAlpha>
 80166ca:	4603      	mov	r3, r0
 80166cc:	b2c0      	uxtb	r0, r0
 80166ce:	61e3      	str	r3, [r4, #28]
 80166d0:	f000 fde4 	bl	801729c <GUI_SetAlpha>
 80166d4:	490f      	ldr	r1, [pc, #60]	; (8016714 <GUI_EnableAlpha+0xbc>)
 80166d6:	462b      	mov	r3, r5
 80166d8:	462a      	mov	r2, r5
 80166da:	f101 0018 	add.w	r0, r1, #24
 80166de:	f7fd ff81 	bl	80145e4 <GUI_DEVICE_Create>
 80166e2:	6020      	str	r0, [r4, #0]
 80166e4:	f004 fc1c 	bl	801af20 <LCD_GetVXSizeMax>
 80166e8:	3007      	adds	r0, #7
 80166ea:	08c3      	lsrs	r3, r0, #3
 80166ec:	4618      	mov	r0, r3
 80166ee:	6123      	str	r3, [r4, #16]
 80166f0:	f7fc fa26 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80166f4:	6060      	str	r0, [r4, #4]
 80166f6:	e7b6      	b.n	8016666 <GUI_EnableAlpha+0xe>
 80166f8:	2000028c 	.word	0x2000028c
 80166fc:	2000005c 	.word	0x2000005c
 8016700:	20000010 	.word	0x20000010
 8016704:	20000014 	.word	0x20000014
 8016708:	08027368 	.word	0x08027368
 801670c:	2000001c 	.word	0x2000001c
 8016710:	08016059 	.word	0x08016059
 8016714:	0802731c 	.word	0x0802731c

08016718 <GL_FillPolygon>:
 8016718:	2900      	cmp	r1, #0
 801671a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671e:	b087      	sub	sp, #28
 8016720:	f340 82e4 	ble.w	8016cec <GL_FillPolygon+0x5d4>
 8016724:	4c1e      	ldr	r4, [pc, #120]	; (80167a0 <GL_FillPolygon+0x88>)
 8016726:	4605      	mov	r5, r0
 8016728:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
 801672c:	4627      	mov	r7, r4
 801672e:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8016732:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8016736:	3504      	adds	r5, #4
 8016738:	42b4      	cmp	r4, r6
 801673a:	bfa8      	it	ge
 801673c:	4634      	movge	r4, r6
 801673e:	42b7      	cmp	r7, r6
 8016740:	bfb8      	it	lt
 8016742:	4637      	movlt	r7, r6
 8016744:	45ae      	cmp	lr, r5
 8016746:	d1f4      	bne.n	8016732 <GL_FillPolygon+0x1a>
 8016748:	9704      	str	r7, [sp, #16]
 801674a:	4d16      	ldr	r5, [pc, #88]	; (80167a4 <GL_FillPolygon+0x8c>)
 801674c:	682d      	ldr	r5, [r5, #0]
 801674e:	696d      	ldr	r5, [r5, #20]
 8016750:	b175      	cbz	r5, 8016770 <GL_FillPolygon+0x58>
 8016752:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8016756:	9f04      	ldr	r7, [sp, #16]
 8016758:	1af6      	subs	r6, r6, r3
 801675a:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 801675e:	42b7      	cmp	r7, r6
 8016760:	eba5 0503 	sub.w	r5, r5, r3
 8016764:	bfa8      	it	ge
 8016766:	4637      	movge	r7, r6
 8016768:	42ac      	cmp	r4, r5
 801676a:	bfb8      	it	lt
 801676c:	462c      	movlt	r4, r5
 801676e:	9704      	str	r7, [sp, #16]
 8016770:	9d04      	ldr	r5, [sp, #16]
 8016772:	42ac      	cmp	r4, r5
 8016774:	f300 8269 	bgt.w	8016c4a <GL_FillPolygon+0x532>
 8016778:	4693      	mov	fp, r2
 801677a:	4606      	mov	r6, r0
 801677c:	1e4d      	subs	r5, r1, #1
 801677e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80167a8 <GL_FillPolygon+0x90>
 8016782:	468a      	mov	sl, r1
 8016784:	9305      	str	r3, [sp, #20]
 8016786:	2200      	movs	r2, #0
 8016788:	4b07      	ldr	r3, [pc, #28]	; (80167a8 <GL_FillPolygon+0x90>)
 801678a:	4592      	cmp	sl, r2
 801678c:	601a      	str	r2, [r3, #0]
 801678e:	f340 8257 	ble.w	8016c40 <GL_FillPolygon+0x528>
 8016792:	9b05      	ldr	r3, [sp, #20]
 8016794:	f8cd b00c 	str.w	fp, [sp, #12]
 8016798:	4423      	add	r3, r4
 801679a:	9302      	str	r3, [sp, #8]
 801679c:	e0eb      	b.n	8016976 <GL_FillPolygon+0x25e>
 801679e:	bf00      	nop
 80167a0:	ffffc001 	.word	0xffffc001
 80167a4:	20000018 	.word	0x20000018
 80167a8:	200002ac 	.word	0x200002ac
 80167ac:	45a6      	cmp	lr, r4
 80167ae:	f000 80de 	beq.w	801696e <GL_FillPolygon+0x256>
 80167b2:	db01      	blt.n	80167b8 <GL_FillPolygon+0xa0>
 80167b4:	42a0      	cmp	r0, r4
 80167b6:	dd05      	ble.n	80167c4 <GL_FillPolygon+0xac>
 80167b8:	42a0      	cmp	r0, r4
 80167ba:	f2c0 80d8 	blt.w	801696e <GL_FillPolygon+0x256>
 80167be:	45a6      	cmp	lr, r4
 80167c0:	f300 80d5 	bgt.w	801696e <GL_FillPolygon+0x256>
 80167c4:	4570      	cmp	r0, lr
 80167c6:	f300 8243 	bgt.w	8016c50 <GL_FillPolygon+0x538>
 80167ca:	45a6      	cmp	lr, r4
 80167cc:	f2c0 80cf 	blt.w	801696e <GL_FillPolygon+0x256>
 80167d0:	42a0      	cmp	r0, r4
 80167d2:	f300 80cc 	bgt.w	801696e <GL_FillPolygon+0x256>
 80167d6:	f936 b022 	ldrsh.w	fp, [r6, r2, lsl #2]
 80167da:	f9bc 3000 	ldrsh.w	r3, [ip]
 80167de:	ebcb 0203 	rsb	r2, fp, r3
 80167e2:	ebc8 0304 	rsb	r3, r8, r4
 80167e6:	ebc8 0e0e 	rsb	lr, r8, lr
 80167ea:	fb03 f302 	mul.w	r3, r3, r2
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	f340 8258 	ble.w	8016ca4 <GL_FillPolygon+0x58c>
 80167f4:	eb03 016e 	add.w	r1, r3, lr, asr #1
 80167f8:	4bdf      	ldr	r3, [pc, #892]	; (8016b78 <GL_FillPolygon+0x460>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	2b0b      	cmp	r3, #11
 80167fe:	f300 80b6 	bgt.w	801696e <GL_FillPolygon+0x256>
 8016802:	2b00      	cmp	r3, #0
 8016804:	fb91 f1fe 	sdiv	r1, r1, lr
 8016808:	eb01 020b 	add.w	r2, r1, fp
 801680c:	9201      	str	r2, [sp, #4]
 801680e:	f340 8236 	ble.w	8016c7e <GL_FillPolygon+0x566>
 8016812:	1e58      	subs	r0, r3, #1
 8016814:	4611      	mov	r1, r2
 8016816:	0042      	lsls	r2, r0, #1
 8016818:	eb09 0e02 	add.w	lr, r9, r2
 801681c:	f9be c004 	ldrsh.w	ip, [lr, #4]
 8016820:	4561      	cmp	r1, ip
 8016822:	f300 824f 	bgt.w	8016cc4 <GL_FillPolygon+0x5ac>
 8016826:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 801682a:	f8a8 c004 	strh.w	ip, [r8, #4]
 801682e:	2800      	cmp	r0, #0
 8016830:	f000 8225 	beq.w	8016c7e <GL_FillPolygon+0x566>
 8016834:	1e98      	subs	r0, r3, #2
 8016836:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 801683a:	eb09 0c0b 	add.w	ip, r9, fp
 801683e:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 8016842:	4541      	cmp	r1, r8
 8016844:	f300 808c 	bgt.w	8016960 <GL_FillPolygon+0x248>
 8016848:	f8ae 8004 	strh.w	r8, [lr, #4]
 801684c:	2800      	cmp	r0, #0
 801684e:	f000 8216 	beq.w	8016c7e <GL_FillPolygon+0x566>
 8016852:	1ed8      	subs	r0, r3, #3
 8016854:	0042      	lsls	r2, r0, #1
 8016856:	eb09 0802 	add.w	r8, r9, r2
 801685a:	f9b8 e004 	ldrsh.w	lr, [r8, #4]
 801685e:	4571      	cmp	r1, lr
 8016860:	f300 822e 	bgt.w	8016cc0 <GL_FillPolygon+0x5a8>
 8016864:	f8ac e004 	strh.w	lr, [ip, #4]
 8016868:	2800      	cmp	r0, #0
 801686a:	f000 8208 	beq.w	8016c7e <GL_FillPolygon+0x566>
 801686e:	f1a3 0c04 	sub.w	ip, r3, #4
 8016872:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8016876:	eb09 000e 	add.w	r0, r9, lr
 801687a:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 801687e:	4281      	cmp	r1, r0
 8016880:	dc6e      	bgt.n	8016960 <GL_FillPolygon+0x248>
 8016882:	f8a8 0004 	strh.w	r0, [r8, #4]
 8016886:	f1bc 0f00 	cmp.w	ip, #0
 801688a:	f000 81f8 	beq.w	8016c7e <GL_FillPolygon+0x566>
 801688e:	1f58      	subs	r0, r3, #5
 8016890:	49b9      	ldr	r1, [pc, #740]	; (8016b78 <GL_FillPolygon+0x460>)
 8016892:	0042      	lsls	r2, r0, #1
 8016894:	eb01 0802 	add.w	r8, r1, r2
 8016898:	9901      	ldr	r1, [sp, #4]
 801689a:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 801689e:	4559      	cmp	r1, fp
 80168a0:	f300 8218 	bgt.w	8016cd4 <GL_FillPolygon+0x5bc>
 80168a4:	44ce      	add	lr, r9
 80168a6:	f8ae b004 	strh.w	fp, [lr, #4]
 80168aa:	2800      	cmp	r0, #0
 80168ac:	f000 81e7 	beq.w	8016c7e <GL_FillPolygon+0x566>
 80168b0:	1f98      	subs	r0, r3, #6
 80168b2:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80168b6:	eb09 0e0b 	add.w	lr, r9, fp
 80168ba:	f9be c004 	ldrsh.w	ip, [lr, #4]
 80168be:	4561      	cmp	r1, ip
 80168c0:	dc4e      	bgt.n	8016960 <GL_FillPolygon+0x248>
 80168c2:	f8a8 c004 	strh.w	ip, [r8, #4]
 80168c6:	2800      	cmp	r0, #0
 80168c8:	f000 81d9 	beq.w	8016c7e <GL_FillPolygon+0x566>
 80168cc:	1fd8      	subs	r0, r3, #7
 80168ce:	0042      	lsls	r2, r0, #1
 80168d0:	eb09 0c02 	add.w	ip, r9, r2
 80168d4:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 80168d8:	4541      	cmp	r1, r8
 80168da:	f300 81f1 	bgt.w	8016cc0 <GL_FillPolygon+0x5a8>
 80168de:	f8ae 8004 	strh.w	r8, [lr, #4]
 80168e2:	2800      	cmp	r0, #0
 80168e4:	f000 81cb 	beq.w	8016c7e <GL_FillPolygon+0x566>
 80168e8:	f1a3 0008 	sub.w	r0, r3, #8
 80168ec:	ea4f 0840 	mov.w	r8, r0, lsl #1
 80168f0:	eb09 0e08 	add.w	lr, r9, r8
 80168f4:	f9be b004 	ldrsh.w	fp, [lr, #4]
 80168f8:	4559      	cmp	r1, fp
 80168fa:	dc31      	bgt.n	8016960 <GL_FillPolygon+0x248>
 80168fc:	f8ac b004 	strh.w	fp, [ip, #4]
 8016900:	2800      	cmp	r0, #0
 8016902:	f000 81bc 	beq.w	8016c7e <GL_FillPolygon+0x566>
 8016906:	f1a3 0009 	sub.w	r0, r3, #9
 801690a:	0042      	lsls	r2, r0, #1
 801690c:	eb09 0c02 	add.w	ip, r9, r2
 8016910:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 8016914:	4561      	cmp	r1, ip
 8016916:	f300 81db 	bgt.w	8016cd0 <GL_FillPolygon+0x5b8>
 801691a:	f8ae c004 	strh.w	ip, [lr, #4]
 801691e:	2800      	cmp	r0, #0
 8016920:	f000 81ad 	beq.w	8016c7e <GL_FillPolygon+0x566>
 8016924:	f1a3 000a 	sub.w	r0, r3, #10
 8016928:	4993      	ldr	r1, [pc, #588]	; (8016b78 <GL_FillPolygon+0x460>)
 801692a:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 801692e:	eb01 0e0c 	add.w	lr, r1, ip
 8016932:	9901      	ldr	r1, [sp, #4]
 8016934:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 8016938:	4541      	cmp	r1, r8
 801693a:	dc11      	bgt.n	8016960 <GL_FillPolygon+0x248>
 801693c:	444a      	add	r2, r9
 801693e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8016942:	2800      	cmp	r0, #0
 8016944:	f000 819b 	beq.w	8016c7e <GL_FillPolygon+0x566>
 8016948:	f1a3 000b 	sub.w	r0, r3, #11
 801694c:	0042      	lsls	r2, r0, #1
 801694e:	eb09 0002 	add.w	r0, r9, r2
 8016952:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8016956:	4281      	cmp	r1, r0
 8016958:	f300 81b8 	bgt.w	8016ccc <GL_FillPolygon+0x5b4>
 801695c:	f8ae 0004 	strh.w	r0, [lr, #4]
 8016960:	4885      	ldr	r0, [pc, #532]	; (8016b78 <GL_FillPolygon+0x460>)
 8016962:	3301      	adds	r3, #1
 8016964:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8016968:	4402      	add	r2, r0
 801696a:	6003      	str	r3, [r0, #0]
 801696c:	8091      	strh	r1, [r2, #4]
 801696e:	45ba      	cmp	sl, r7
 8016970:	463a      	mov	r2, r7
 8016972:	f340 80ef 	ble.w	8016b54 <GL_FillPolygon+0x43c>
 8016976:	42aa      	cmp	r2, r5
 8016978:	f102 0701 	add.w	r7, r2, #1
 801697c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8016980:	4613      	mov	r3, r2
 8016982:	bfac      	ite	ge
 8016984:	f04f 0c00 	movge.w	ip, #0
 8016988:	ea4f 0c87 	movlt.w	ip, r7, lsl #2
 801698c:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8016990:	44b4      	add	ip, r6
 8016992:	42a0      	cmp	r0, r4
 8016994:	4680      	mov	r8, r0
 8016996:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801699a:	f47f af07 	bne.w	80167ac <GL_FillPolygon+0x94>
 801699e:	45a6      	cmp	lr, r4
 80169a0:	f000 816f 	beq.w	8016c82 <GL_FillPolygon+0x56a>
 80169a4:	2d00      	cmp	r5, #0
 80169a6:	dde2      	ble.n	801696e <GL_FillPolygon+0x256>
 80169a8:	2100      	movs	r1, #0
 80169aa:	b15b      	cbz	r3, 80169c4 <GL_FillPolygon+0x2ac>
 80169ac:	3b01      	subs	r3, #1
 80169ae:	3101      	adds	r1, #1
 80169b0:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80169b4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80169b8:	42a0      	cmp	r0, r4
 80169ba:	d10b      	bne.n	80169d4 <GL_FillPolygon+0x2bc>
 80169bc:	42a9      	cmp	r1, r5
 80169be:	d0d6      	beq.n	801696e <GL_FillPolygon+0x256>
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d1f3      	bne.n	80169ac <GL_FillPolygon+0x294>
 80169c4:	462b      	mov	r3, r5
 80169c6:	3101      	adds	r1, #1
 80169c8:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80169cc:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80169d0:	42a0      	cmp	r0, r4
 80169d2:	d0f3      	beq.n	80169bc <GL_FillPolygon+0x2a4>
 80169d4:	1b00      	subs	r0, r0, r4
 80169d6:	ebc4 0e0e 	rsb	lr, r4, lr
 80169da:	f936 2022 	ldrsh.w	r2, [r6, r2, lsl #2]
 80169de:	ea90 0f0e 	teq	r0, lr
 80169e2:	f140 8142 	bpl.w	8016c6a <GL_FillPolygon+0x552>
 80169e6:	4b64      	ldr	r3, [pc, #400]	; (8016b78 <GL_FillPolygon+0x460>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	2b0b      	cmp	r3, #11
 80169ec:	dcbf      	bgt.n	801696e <GL_FillPolygon+0x256>
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	f340 815d 	ble.w	8016cae <GL_FillPolygon+0x596>
 80169f4:	1e58      	subs	r0, r3, #1
 80169f6:	0041      	lsls	r1, r0, #1
 80169f8:	eb09 0c01 	add.w	ip, r9, r1
 80169fc:	f9bc e004 	ldrsh.w	lr, [ip, #4]
 8016a00:	4572      	cmp	r2, lr
 8016a02:	f300 816a 	bgt.w	8016cda <GL_FillPolygon+0x5c2>
 8016a06:	eb09 0843 	add.w	r8, r9, r3, lsl #1
 8016a0a:	f8a8 e004 	strh.w	lr, [r8, #4]
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f000 814d 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016a14:	1e98      	subs	r0, r3, #2
 8016a16:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8016a1a:	eb09 0e08 	add.w	lr, r9, r8
 8016a1e:	f9be b004 	ldrsh.w	fp, [lr, #4]
 8016a22:	455a      	cmp	r2, fp
 8016a24:	f300 808d 	bgt.w	8016b42 <GL_FillPolygon+0x42a>
 8016a28:	f8ac b004 	strh.w	fp, [ip, #4]
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	f000 813e 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016a32:	1ed8      	subs	r0, r3, #3
 8016a34:	0041      	lsls	r1, r0, #1
 8016a36:	eb09 0c01 	add.w	ip, r9, r1
 8016a3a:	f9bc c004 	ldrsh.w	ip, [ip, #4]
 8016a3e:	4562      	cmp	r2, ip
 8016a40:	f300 8152 	bgt.w	8016ce8 <GL_FillPolygon+0x5d0>
 8016a44:	f8ae c004 	strh.w	ip, [lr, #4]
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	f000 8130 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016a4e:	f1a3 0804 	sub.w	r8, r3, #4
 8016a52:	4849      	ldr	r0, [pc, #292]	; (8016b78 <GL_FillPolygon+0x460>)
 8016a54:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8016a58:	eb00 0e0b 	add.w	lr, r0, fp
 8016a5c:	f9be c004 	ldrsh.w	ip, [lr, #4]
 8016a60:	4562      	cmp	r2, ip
 8016a62:	dc6e      	bgt.n	8016b42 <GL_FillPolygon+0x42a>
 8016a64:	4449      	add	r1, r9
 8016a66:	f8a1 c004 	strh.w	ip, [r1, #4]
 8016a6a:	f1b8 0f00 	cmp.w	r8, #0
 8016a6e:	f000 811e 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016a72:	1f58      	subs	r0, r3, #5
 8016a74:	0041      	lsls	r1, r0, #1
 8016a76:	eb09 0c01 	add.w	ip, r9, r1
 8016a7a:	f9bc 8004 	ldrsh.w	r8, [ip, #4]
 8016a7e:	4542      	cmp	r2, r8
 8016a80:	f300 8122 	bgt.w	8016cc8 <GL_FillPolygon+0x5b0>
 8016a84:	f8ae 8004 	strh.w	r8, [lr, #4]
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	f000 8110 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016a8e:	1f98      	subs	r0, r3, #6
 8016a90:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8016a94:	eb09 0e0b 	add.w	lr, r9, fp
 8016a98:	f9be 8004 	ldrsh.w	r8, [lr, #4]
 8016a9c:	4542      	cmp	r2, r8
 8016a9e:	dc50      	bgt.n	8016b42 <GL_FillPolygon+0x42a>
 8016aa0:	f8ac 8004 	strh.w	r8, [ip, #4]
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	f000 8102 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016aaa:	1fd8      	subs	r0, r3, #7
 8016aac:	0041      	lsls	r1, r0, #1
 8016aae:	eb09 0801 	add.w	r8, r9, r1
 8016ab2:	f9b8 c004 	ldrsh.w	ip, [r8, #4]
 8016ab6:	4562      	cmp	r2, ip
 8016ab8:	f300 8106 	bgt.w	8016cc8 <GL_FillPolygon+0x5b0>
 8016abc:	f8ae c004 	strh.w	ip, [lr, #4]
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	f000 80f4 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016ac6:	f1a3 0c08 	sub.w	ip, r3, #8
 8016aca:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 8016ace:	eb09 000e 	add.w	r0, r9, lr
 8016ad2:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8016ad6:	4282      	cmp	r2, r0
 8016ad8:	dc33      	bgt.n	8016b42 <GL_FillPolygon+0x42a>
 8016ada:	f8a8 0004 	strh.w	r0, [r8, #4]
 8016ade:	f1bc 0f00 	cmp.w	ip, #0
 8016ae2:	f000 80e4 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016ae6:	f1a3 0009 	sub.w	r0, r3, #9
 8016aea:	0041      	lsls	r1, r0, #1
 8016aec:	9001      	str	r0, [sp, #4]
 8016aee:	4822      	ldr	r0, [pc, #136]	; (8016b78 <GL_FillPolygon+0x460>)
 8016af0:	eb00 0801 	add.w	r8, r0, r1
 8016af4:	f9b8 b004 	ldrsh.w	fp, [r8, #4]
 8016af8:	455a      	cmp	r2, fp
 8016afa:	f300 80f0 	bgt.w	8016cde <GL_FillPolygon+0x5c6>
 8016afe:	44ce      	add	lr, r9
 8016b00:	9801      	ldr	r0, [sp, #4]
 8016b02:	f8ae b004 	strh.w	fp, [lr, #4]
 8016b06:	2800      	cmp	r0, #0
 8016b08:	f000 80d1 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016b0c:	f1a3 000a 	sub.w	r0, r3, #10
 8016b10:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8016b14:	eb09 0e0c 	add.w	lr, r9, ip
 8016b18:	f9be b004 	ldrsh.w	fp, [lr, #4]
 8016b1c:	455a      	cmp	r2, fp
 8016b1e:	dc10      	bgt.n	8016b42 <GL_FillPolygon+0x42a>
 8016b20:	f8a8 b004 	strh.w	fp, [r8, #4]
 8016b24:	2800      	cmp	r0, #0
 8016b26:	f000 80c2 	beq.w	8016cae <GL_FillPolygon+0x596>
 8016b2a:	f1a3 010b 	sub.w	r1, r3, #11
 8016b2e:	0049      	lsls	r1, r1, #1
 8016b30:	eb09 0001 	add.w	r0, r9, r1
 8016b34:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8016b38:	4282      	cmp	r2, r0
 8016b3a:	f300 80d3 	bgt.w	8016ce4 <GL_FillPolygon+0x5cc>
 8016b3e:	f8ae 0004 	strh.w	r0, [lr, #4]
 8016b42:	480d      	ldr	r0, [pc, #52]	; (8016b78 <GL_FillPolygon+0x460>)
 8016b44:	3301      	adds	r3, #1
 8016b46:	45ba      	cmp	sl, r7
 8016b48:	4401      	add	r1, r0
 8016b4a:	6003      	str	r3, [r0, #0]
 8016b4c:	808a      	strh	r2, [r1, #4]
 8016b4e:	463a      	mov	r2, r7
 8016b50:	f73f af11 	bgt.w	8016976 <GL_FillPolygon+0x25e>
 8016b54:	4b08      	ldr	r3, [pc, #32]	; (8016b78 <GL_FillPolygon+0x460>)
 8016b56:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	dd6f      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016b60:	2b01      	cmp	r3, #1
 8016b62:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
 8016b66:	d06b      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016b68:	4b04      	ldr	r3, [pc, #16]	; (8016b7c <GL_FillPolygon+0x464>)
 8016b6a:	4458      	add	r0, fp
 8016b6c:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	9f02      	ldr	r7, [sp, #8]
 8016b74:	e004      	b.n	8016b80 <GL_FillPolygon+0x468>
 8016b76:	bf00      	nop
 8016b78:	200002ac 	.word	0x200002ac
 8016b7c:	20000018 	.word	0x20000018
 8016b80:	445a      	add	r2, fp
 8016b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016b84:	4639      	mov	r1, r7
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	4798      	blx	r3
 8016b8a:	f8d9 3000 	ldr.w	r3, [r9]
 8016b8e:	2b02      	cmp	r3, #2
 8016b90:	dd56      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016b92:	2b03      	cmp	r3, #3
 8016b94:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 8016b98:	d052      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016b9a:	4b57      	ldr	r3, [pc, #348]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016b9c:	4458      	add	r0, fp
 8016b9e:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
 8016ba2:	4639      	mov	r1, r7
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	445a      	add	r2, fp
 8016ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	4798      	blx	r3
 8016bae:	f8d9 3000 	ldr.w	r3, [r9]
 8016bb2:	2b04      	cmp	r3, #4
 8016bb4:	dd44      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016bb6:	2b05      	cmp	r3, #5
 8016bb8:	f9b9 000c 	ldrsh.w	r0, [r9, #12]
 8016bbc:	d040      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016bbe:	4b4e      	ldr	r3, [pc, #312]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016bc0:	4458      	add	r0, fp
 8016bc2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 8016bc6:	4639      	mov	r1, r7
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	445a      	add	r2, fp
 8016bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4798      	blx	r3
 8016bd2:	f8d9 3000 	ldr.w	r3, [r9]
 8016bd6:	2b06      	cmp	r3, #6
 8016bd8:	dd32      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016bda:	2b07      	cmp	r3, #7
 8016bdc:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
 8016be0:	d02e      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016be2:	4b45      	ldr	r3, [pc, #276]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016be4:	4458      	add	r0, fp
 8016be6:	f9b9 2012 	ldrsh.w	r2, [r9, #18]
 8016bea:	4639      	mov	r1, r7
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	445a      	add	r2, fp
 8016bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	4798      	blx	r3
 8016bf6:	f8d9 3000 	ldr.w	r3, [r9]
 8016bfa:	2b08      	cmp	r3, #8
 8016bfc:	dd20      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016bfe:	4a3f      	ldr	r2, [pc, #252]	; (8016cfc <GL_FillPolygon+0x5e4>)
 8016c00:	2b09      	cmp	r3, #9
 8016c02:	f9b2 0014 	ldrsh.w	r0, [r2, #20]
 8016c06:	d01b      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016c08:	4b3b      	ldr	r3, [pc, #236]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016c0a:	4458      	add	r0, fp
 8016c0c:	f9b9 2016 	ldrsh.w	r2, [r9, #22]
 8016c10:	4639      	mov	r1, r7
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	445a      	add	r2, fp
 8016c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	4798      	blx	r3
 8016c1c:	f8d9 3000 	ldr.w	r3, [r9]
 8016c20:	2b0a      	cmp	r3, #10
 8016c22:	dd0d      	ble.n	8016c40 <GL_FillPolygon+0x528>
 8016c24:	2b0b      	cmp	r3, #11
 8016c26:	f9b9 0018 	ldrsh.w	r0, [r9, #24]
 8016c2a:	d009      	beq.n	8016c40 <GL_FillPolygon+0x528>
 8016c2c:	4b32      	ldr	r3, [pc, #200]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016c2e:	4639      	mov	r1, r7
 8016c30:	f9b9 201a 	ldrsh.w	r2, [r9, #26]
 8016c34:	4458      	add	r0, fp
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	445a      	add	r2, fp
 8016c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4798      	blx	r3
 8016c40:	3401      	adds	r4, #1
 8016c42:	9b04      	ldr	r3, [sp, #16]
 8016c44:	42a3      	cmp	r3, r4
 8016c46:	f6bf ad9e 	bge.w	8016786 <GL_FillPolygon+0x6e>
 8016c4a:	b007      	add	sp, #28
 8016c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c50:	42a0      	cmp	r0, r4
 8016c52:	f6ff ae8c 	blt.w	801696e <GL_FillPolygon+0x256>
 8016c56:	45a6      	cmp	lr, r4
 8016c58:	f73f ae89 	bgt.w	801696e <GL_FillPolygon+0x256>
 8016c5c:	46f0      	mov	r8, lr
 8016c5e:	f9bc b000 	ldrsh.w	fp, [ip]
 8016c62:	f936 3022 	ldrsh.w	r3, [r6, r2, lsl #2]
 8016c66:	4686      	mov	lr, r0
 8016c68:	e5b9      	b.n	80167de <GL_FillPolygon+0xc6>
 8016c6a:	4b23      	ldr	r3, [pc, #140]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016c6c:	9903      	ldr	r1, [sp, #12]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	440a      	add	r2, r1
 8016c72:	9902      	ldr	r1, [sp, #8]
 8016c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c76:	4610      	mov	r0, r2
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	4798      	blx	r3
 8016c7c:	e677      	b.n	801696e <GL_FillPolygon+0x256>
 8016c7e:	2200      	movs	r2, #0
 8016c80:	e66e      	b.n	8016960 <GL_FillPolygon+0x248>
 8016c82:	f9bc 3000 	ldrsh.w	r3, [ip]
 8016c86:	9803      	ldr	r0, [sp, #12]
 8016c88:	f936 1022 	ldrsh.w	r1, [r6, r2, lsl #2]
 8016c8c:	4401      	add	r1, r0
 8016c8e:	1818      	adds	r0, r3, r0
 8016c90:	4b19      	ldr	r3, [pc, #100]	; (8016cf8 <GL_FillPolygon+0x5e0>)
 8016c92:	4281      	cmp	r1, r0
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	db0c      	blt.n	8016cb2 <GL_FillPolygon+0x59a>
 8016c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c9a:	460a      	mov	r2, r1
 8016c9c:	9902      	ldr	r1, [sp, #8]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4798      	blx	r3
 8016ca2:	e664      	b.n	801696e <GL_FillPolygon+0x256>
 8016ca4:	ea4f 016e 	mov.w	r1, lr, asr #1
 8016ca8:	3901      	subs	r1, #1
 8016caa:	1a59      	subs	r1, r3, r1
 8016cac:	e5a4      	b.n	80167f8 <GL_FillPolygon+0xe0>
 8016cae:	2100      	movs	r1, #0
 8016cb0:	e747      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016cb4:	4602      	mov	r2, r0
 8016cb6:	4608      	mov	r0, r1
 8016cb8:	9902      	ldr	r1, [sp, #8]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	4798      	blx	r3
 8016cbe:	e656      	b.n	801696e <GL_FillPolygon+0x256>
 8016cc0:	465a      	mov	r2, fp
 8016cc2:	e64d      	b.n	8016960 <GL_FillPolygon+0x248>
 8016cc4:	005a      	lsls	r2, r3, #1
 8016cc6:	e64b      	b.n	8016960 <GL_FillPolygon+0x248>
 8016cc8:	4659      	mov	r1, fp
 8016cca:	e73a      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016ccc:	4662      	mov	r2, ip
 8016cce:	e647      	b.n	8016960 <GL_FillPolygon+0x248>
 8016cd0:	4642      	mov	r2, r8
 8016cd2:	e645      	b.n	8016960 <GL_FillPolygon+0x248>
 8016cd4:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8016cd8:	e642      	b.n	8016960 <GL_FillPolygon+0x248>
 8016cda:	0059      	lsls	r1, r3, #1
 8016cdc:	e731      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016cde:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8016ce2:	e72e      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016ce4:	4661      	mov	r1, ip
 8016ce6:	e72c      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016ce8:	4641      	mov	r1, r8
 8016cea:	e72a      	b.n	8016b42 <GL_FillPolygon+0x42a>
 8016cec:	4c04      	ldr	r4, [pc, #16]	; (8016d00 <GL_FillPolygon+0x5e8>)
 8016cee:	9404      	str	r4, [sp, #16]
 8016cf0:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8016cf4:	e529      	b.n	801674a <GL_FillPolygon+0x32>
 8016cf6:	bf00      	nop
 8016cf8:	20000018 	.word	0x20000018
 8016cfc:	200002ac 	.word	0x200002ac
 8016d00:	ffffc001 	.word	0xffffc001

08016d04 <GUI_FillPolygon>:
 8016d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d08:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8016d84 <GUI_FillPolygon+0x80>
 8016d0c:	b084      	sub	sp, #16
 8016d0e:	4607      	mov	r7, r0
 8016d10:	4688      	mov	r8, r1
 8016d12:	4615      	mov	r5, r2
 8016d14:	461c      	mov	r4, r3
 8016d16:	f001 fc45 	bl	80185a4 <GUI_Lock>
 8016d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8016d1e:	2000      	movs	r0, #0
 8016d20:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 8016d24:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 8016d26:	f009 ff15 	bl	8020b54 <WM__InitIVRSearch>
 8016d2a:	b328      	cbz	r0, 8016d78 <GUI_FillPolygon+0x74>
 8016d2c:	4455      	add	r5, sl
 8016d2e:	4426      	add	r6, r4
 8016d30:	f8df a054 	ldr.w	sl, [pc, #84]	; 8016d88 <GUI_FillPolygon+0x84>
 8016d34:	e005      	b.n	8016d42 <GUI_FillPolygon+0x3e>
 8016d36:	9803      	ldr	r0, [sp, #12]
 8016d38:	9600      	str	r6, [sp, #0]
 8016d3a:	47a0      	blx	r4
 8016d3c:	f009 fde0 	bl	8020900 <WM__GetNextIVR>
 8016d40:	b1d0      	cbz	r0, 8016d78 <GUI_FillPolygon+0x74>
 8016d42:	f8d9 3000 	ldr.w	r3, [r9]
 8016d46:	2111      	movs	r1, #17
 8016d48:	a803      	add	r0, sp, #12
 8016d4a:	7c5b      	ldrb	r3, [r3, #17]
 8016d4c:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 8016d50:	68e3      	ldr	r3, [r4, #12]
 8016d52:	9403      	str	r4, [sp, #12]
 8016d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d56:	4798      	blx	r3
 8016d58:	462b      	mov	r3, r5
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	4642      	mov	r2, r8
 8016d5e:	4639      	mov	r1, r7
 8016d60:	2800      	cmp	r0, #0
 8016d62:	d1e8      	bne.n	8016d36 <GUI_FillPolygon+0x32>
 8016d64:	4633      	mov	r3, r6
 8016d66:	462a      	mov	r2, r5
 8016d68:	4641      	mov	r1, r8
 8016d6a:	4638      	mov	r0, r7
 8016d6c:	f7ff fcd4 	bl	8016718 <GL_FillPolygon>
 8016d70:	f009 fdc6 	bl	8020900 <WM__GetNextIVR>
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d1e4      	bne.n	8016d42 <GUI_FillPolygon+0x3e>
 8016d78:	f001 fc0a 	bl	8018590 <GUI_Unlock>
 8016d7c:	b004      	add	sp, #16
 8016d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d82:	bf00      	nop
 8016d84:	20000018 	.word	0x20000018
 8016d88:	200467d0 	.word	0x200467d0

08016d8c <GUI_FillRoundedRect>:
 8016d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d90:	b08b      	sub	sp, #44	; 0x2c
 8016d92:	4681      	mov	r9, r0
 8016d94:	4690      	mov	r8, r2
 8016d96:	461c      	mov	r4, r3
 8016d98:	460e      	mov	r6, r1
 8016d9a:	f001 fc03 	bl	80185a4 <GUI_Lock>
 8016d9e:	4b31      	ldr	r3, [pc, #196]	; (8016e64 <GUI_FillRoundedRect+0xd8>)
 8016da0:	a808      	add	r0, sp, #32
 8016da2:	681d      	ldr	r5, [r3, #0]
 8016da4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016da6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8016da8:	eb03 0209 	add.w	r2, r3, r9
 8016dac:	4443      	add	r3, r8
 8016dae:	19b9      	adds	r1, r7, r6
 8016db0:	4427      	add	r7, r4
 8016db2:	9206      	str	r2, [sp, #24]
 8016db4:	9307      	str	r3, [sp, #28]
 8016db6:	9105      	str	r1, [sp, #20]
 8016db8:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016dbc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016dc0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8016dc4:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8016dc8:	f009 fec4 	bl	8020b54 <WM__InitIVRSearch>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d043      	beq.n	8016e58 <GUI_FillRoundedRect+0xcc>
 8016dd0:	9905      	ldr	r1, [sp, #20]
 8016dd2:	9807      	ldr	r0, [sp, #28]
 8016dd4:	9c06      	ldr	r4, [sp, #24]
 8016dd6:	1a7a      	subs	r2, r7, r1
 8016dd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016dda:	1b03      	subs	r3, r0, r4
 8016ddc:	3201      	adds	r2, #1
 8016dde:	1b7f      	subs	r7, r7, r5
 8016de0:	006d      	lsls	r5, r5, #1
 8016de2:	3301      	adds	r3, #1
 8016de4:	9203      	str	r2, [sp, #12]
 8016de6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016de8:	9304      	str	r3, [sp, #16]
 8016dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016dec:	eb01 0802 	add.w	r8, r1, r2
 8016df0:	eb04 0a02 	add.w	sl, r4, r2
 8016df4:	9502      	str	r5, [sp, #8]
 8016df6:	fb03 fb03 	mul.w	fp, r3, r3
 8016dfa:	1a83      	subs	r3, r0, r2
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	9a02      	ldr	r2, [sp, #8]
 8016e00:	9903      	ldr	r1, [sp, #12]
 8016e02:	4613      	mov	r3, r2
 8016e04:	428a      	cmp	r2, r1
 8016e06:	dc23      	bgt.n	8016e50 <GUI_FillRoundedRect+0xc4>
 8016e08:	9a04      	ldr	r2, [sp, #16]
 8016e0a:	4293      	cmp	r3, r2
 8016e0c:	dc20      	bgt.n	8016e50 <GUI_FillRoundedRect+0xc4>
 8016e0e:	9e05      	ldr	r6, [sp, #20]
 8016e10:	4546      	cmp	r6, r8
 8016e12:	dc17      	bgt.n	8016e44 <GUI_FillRoundedRect+0xb8>
 8016e14:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016e16:	fb05 b015 	mls	r0, r5, r5, fp
 8016e1a:	f002 fe33 	bl	8019a84 <GUI__sqrt32>
 8016e1e:	9b01      	ldr	r3, [sp, #4]
 8016e20:	ebc0 090a 	rsb	r9, r0, sl
 8016e24:	4631      	mov	r1, r6
 8016e26:	18c4      	adds	r4, r0, r3
 8016e28:	3601      	adds	r6, #1
 8016e2a:	4648      	mov	r0, r9
 8016e2c:	4622      	mov	r2, r4
 8016e2e:	f003 f907 	bl	801a040 <LCD_DrawHLine>
 8016e32:	1979      	adds	r1, r7, r5
 8016e34:	4622      	mov	r2, r4
 8016e36:	4648      	mov	r0, r9
 8016e38:	f003 f902 	bl	801a040 <LCD_DrawHLine>
 8016e3c:	4546      	cmp	r6, r8
 8016e3e:	f105 35ff 	add.w	r5, r5, #4294967295
 8016e42:	dde8      	ble.n	8016e16 <GUI_FillRoundedRect+0x8a>
 8016e44:	4631      	mov	r1, r6
 8016e46:	1e7b      	subs	r3, r7, #1
 8016e48:	9a07      	ldr	r2, [sp, #28]
 8016e4a:	9806      	ldr	r0, [sp, #24]
 8016e4c:	f003 f948 	bl	801a0e0 <LCD_FillRect>
 8016e50:	f009 fd56 	bl	8020900 <WM__GetNextIVR>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d1d2      	bne.n	8016dfe <GUI_FillRoundedRect+0x72>
 8016e58:	f001 fb9a 	bl	8018590 <GUI_Unlock>
 8016e5c:	b00b      	add	sp, #44	; 0x2c
 8016e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e62:	bf00      	nop
 8016e64:	20000018 	.word	0x20000018

08016e68 <GUI_MULTIBUF_End>:
 8016e68:	4a17      	ldr	r2, [pc, #92]	; (8016ec8 <GUI_MULTIBUF_End+0x60>)
 8016e6a:	4b18      	ldr	r3, [pc, #96]	; (8016ecc <GUI_MULTIBUF_End+0x64>)
 8016e6c:	6811      	ldr	r1, [r2, #0]
 8016e6e:	6a1a      	ldr	r2, [r3, #32]
 8016e70:	b570      	push	{r4, r5, r6, lr}
 8016e72:	2a00      	cmp	r2, #0
 8016e74:	7c4d      	ldrb	r5, [r1, #17]
 8016e76:	4a16      	ldr	r2, [pc, #88]	; (8016ed0 <GUI_MULTIBUF_End+0x68>)
 8016e78:	b082      	sub	sp, #8
 8016e7a:	bf0c      	ite	eq
 8016e7c:	462c      	moveq	r4, r5
 8016e7e:	2400      	movne	r4, #0
 8016e80:	5712      	ldrsb	r2, [r2, r4]
 8016e82:	2a01      	cmp	r2, #1
 8016e84:	dd05      	ble.n	8016e92 <GUI_MULTIBUF_End+0x2a>
 8016e86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016e8a:	6923      	ldr	r3, [r4, #16]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	6123      	str	r3, [r4, #16]
 8016e90:	b10b      	cbz	r3, 8016e96 <GUI_MULTIBUF_End+0x2e>
 8016e92:	b002      	add	sp, #8
 8016e94:	bd70      	pop	{r4, r5, r6, pc}
 8016e96:	2001      	movs	r0, #1
 8016e98:	40a8      	lsls	r0, r5
 8016e9a:	f7fd fb61 	bl	8014560 <GUI_DCACHE_Clear>
 8016e9e:	68a6      	ldr	r6, [r4, #8]
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	61a6      	str	r6, [r4, #24]
 8016ea4:	f7fd fb86 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8016ea8:	9001      	str	r0, [sp, #4]
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	d0f1      	beq.n	8016e92 <GUI_MULTIBUF_End+0x2a>
 8016eae:	68c3      	ldr	r3, [r0, #12]
 8016eb0:	2122      	movs	r1, #34	; 0x22
 8016eb2:	a801      	add	r0, sp, #4
 8016eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb6:	4798      	blx	r3
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d0e9      	beq.n	8016e92 <GUI_MULTIBUF_End+0x2a>
 8016ebe:	4631      	mov	r1, r6
 8016ec0:	9801      	ldr	r0, [sp, #4]
 8016ec2:	4798      	blx	r3
 8016ec4:	b002      	add	sp, #8
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	20000018 	.word	0x20000018
 8016ecc:	200002c8 	.word	0x200002c8
 8016ed0:	20046780 	.word	0x20046780

08016ed4 <GUI_MULTIBUF_ConfirmEx>:
 8016ed4:	4b09      	ldr	r3, [pc, #36]	; (8016efc <GUI_MULTIBUF_ConfirmEx+0x28>)
 8016ed6:	6a1a      	ldr	r2, [r3, #32]
 8016ed8:	2a00      	cmp	r2, #0
 8016eda:	bf18      	it	ne
 8016edc:	2000      	movne	r0, #0
 8016ede:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8016ee2:	b410      	push	{r4}
 8016ee4:	6994      	ldr	r4, [r2, #24]
 8016ee6:	2c00      	cmp	r4, #0
 8016ee8:	db04      	blt.n	8016ef4 <GUI_MULTIBUF_ConfirmEx+0x20>
 8016eea:	f04f 34ff 	mov.w	r4, #4294967295
 8016eee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016ef2:	6194      	str	r4, [r2, #24]
 8016ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop
 8016efc:	200002c8 	.word	0x200002c8

08016f00 <GUI_StoreKey>:
 8016f00:	4b02      	ldr	r3, [pc, #8]	; (8016f0c <GUI_StoreKey+0xc>)
 8016f02:	681a      	ldr	r2, [r3, #0]
 8016f04:	b902      	cbnz	r2, 8016f08 <GUI_StoreKey+0x8>
 8016f06:	6018      	str	r0, [r3, #0]
 8016f08:	f001 bfe2 	b.w	8018ed0 <GUI_SignalEvent>
 8016f0c:	200002f4 	.word	0x200002f4

08016f10 <GUI_PollKeyMsg>:
 8016f10:	b510      	push	{r4, lr}
 8016f12:	f001 fb47 	bl	80185a4 <GUI_Lock>
 8016f16:	4a0d      	ldr	r2, [pc, #52]	; (8016f4c <GUI_PollKeyMsg+0x3c>)
 8016f18:	6813      	ldr	r3, [r2, #0]
 8016f1a:	6851      	ldr	r1, [r2, #4]
 8016f1c:	428b      	cmp	r3, r1
 8016f1e:	d00f      	beq.n	8016f40 <GUI_PollKeyMsg+0x30>
 8016f20:	4c0b      	ldr	r4, [pc, #44]	; (8016f50 <GUI_PollKeyMsg+0x40>)
 8016f22:	42a3      	cmp	r3, r4
 8016f24:	f04f 0401 	mov.w	r4, #1
 8016f28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f2c:	bf14      	ite	ne
 8016f2e:	3308      	addne	r3, #8
 8016f30:	3b50      	subeq	r3, #80	; 0x50
 8016f32:	6013      	str	r3, [r2, #0]
 8016f34:	f00a faec 	bl	8021510 <WM_OnKey>
 8016f38:	f001 fb2a 	bl	8018590 <GUI_Unlock>
 8016f3c:	4620      	mov	r0, r4
 8016f3e:	bd10      	pop	{r4, pc}
 8016f40:	2400      	movs	r4, #0
 8016f42:	f001 fb25 	bl	8018590 <GUI_Unlock>
 8016f46:	4620      	mov	r0, r4
 8016f48:	bd10      	pop	{r4, pc}
 8016f4a:	bf00      	nop
 8016f4c:	2000002c 	.word	0x2000002c
 8016f50:	20000348 	.word	0x20000348

08016f54 <GUI_EnlargePolygon>:
 8016f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	ed2d 8b06 	vpush	{d8-d10}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	9301      	str	r3, [sp, #4]
 8016f62:	f340 80f0 	ble.w	8017146 <GUI_EnlargePolygon+0x1f2>
 8016f66:	ee0a 3a90 	vmov	s21, r3
 8016f6a:	2600      	movs	r6, #0
 8016f6c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8016f70:	4614      	mov	r4, r2
 8016f72:	eef8 aaea 	vcvt.f32.s32	s21, s21
 8016f76:	460d      	mov	r5, r1
 8016f78:	4681      	mov	r9, r0
 8016f7a:	4637      	mov	r7, r6
 8016f7c:	468a      	mov	sl, r1
 8016f7e:	4690      	mov	r8, r2
 8016f80:	f108 31ff 	add.w	r1, r8, #4294967295
 8016f84:	fb04 6717 	mls	r7, r4, r7, r6
 8016f88:	3601      	adds	r6, #1
 8016f8a:	f10a 0a04 	add.w	sl, sl, #4
 8016f8e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8016f92:	f935 3027 	ldrsh.w	r3, [r5, r7, lsl #2]
 8016f96:	f109 0904 	add.w	r9, r9, #4
 8016f9a:	fbb1 f2f4 	udiv	r2, r1, r4
 8016f9e:	fb04 1112 	mls	r1, r4, r2, r1
 8016fa2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016fa6:	f935 c021 	ldrsh.w	ip, [r5, r1, lsl #2]
 8016faa:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8016fae:	ebcc 0303 	rsb	r3, ip, r3
 8016fb2:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8016fb6:	ee08 3a10 	vmov	s16, r3
 8016fba:	ebce 0302 	rsb	r3, lr, r2
 8016fbe:	ee09 3a10 	vmov	s18, r3
 8016fc2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8016fc6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8016fca:	fbb8 f1f4 	udiv	r1, r8, r4
 8016fce:	fbb6 f7f4 	udiv	r7, r6, r4
 8016fd2:	ee69 7a09 	vmul.f32	s15, s18, s18
 8016fd6:	fb04 6017 	mls	r0, r4, r7, r6
 8016fda:	fb04 8111 	mls	r1, r4, r1, r8
 8016fde:	f108 0801 	add.w	r8, r8, #1
 8016fe2:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8016fe6:	eb05 0e81 	add.w	lr, r5, r1, lsl #2
 8016fea:	eee8 7a08 	vfma.f32	s15, s16, s16
 8016fee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016ff2:	f935 3020 	ldrsh.w	r3, [r5, r0, lsl #2]
 8016ff6:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8016ffa:	f935 1021 	ldrsh.w	r1, [r5, r1, lsl #2]
 8016ffe:	1a12      	subs	r2, r2, r0
 8017000:	1a5b      	subs	r3, r3, r1
 8017002:	ee17 0a90 	vmov	r0, s15
 8017006:	ee07 2a90 	vmov	s15, r2
 801700a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801700e:	ee07 3a90 	vmov	s15, r3
 8017012:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017016:	f7e9 fa67 	bl	80004e8 <__aeabi_f2d>
 801701a:	ec41 0b10 	vmov	d0, r0, r1
 801701e:	f00e ffab 	bl	8025f78 <sqrt>
 8017022:	ec51 0b10 	vmov	r0, r1, d0
 8017026:	f7e9 fd8b 	bl	8000b40 <__aeabi_d2f>
 801702a:	ee07 0a90 	vmov	s15, r0
 801702e:	ee29 6aa9 	vmul.f32	s12, s19, s19
 8017032:	eec9 6a27 	vdiv.f32	s13, s18, s15
 8017036:	ee88 7a27 	vdiv.f32	s14, s16, s15
 801703a:	eea8 6aa8 	vfma.f32	s12, s17, s17
 801703e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017046:	ee16 0a10 	vmov	r0, s12
 801704a:	bf88      	it	hi
 801704c:	eeb0 9a66 	vmovhi.f32	s18, s13
 8017050:	bf88      	it	hi
 8017052:	eeb0 8a47 	vmovhi.f32	s16, s14
 8017056:	f7e9 fa47 	bl	80004e8 <__aeabi_f2d>
 801705a:	ec41 0b10 	vmov	d0, r0, r1
 801705e:	f00e ff8b 	bl	8025f78 <sqrt>
 8017062:	ec51 0b10 	vmov	r0, r1, d0
 8017066:	f7e9 fd6b 	bl	8000b40 <__aeabi_d2f>
 801706a:	ee07 0a90 	vmov	s15, r0
 801706e:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8017072:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8017076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801707e:	bf88      	it	hi
 8017080:	eef0 9a66 	vmovhi.f32	s19, s13
 8017084:	ee39 9a89 	vadd.f32	s18, s19, s18
 8017088:	bf88      	it	hi
 801708a:	eef0 8a47 	vmovhi.f32	s17, s14
 801708e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8017092:	ee38 8a88 	vadd.f32	s16, s17, s16
 8017096:	eee8 7a08 	vfma.f32	s15, s16, s16
 801709a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801709e:	ee17 0a90 	vmov	r0, s15
 80170a2:	f7e9 fa21 	bl	80004e8 <__aeabi_f2d>
 80170a6:	ec41 0b10 	vmov	d0, r0, r1
 80170aa:	f00e ff65 	bl	8025f78 <sqrt>
 80170ae:	ec51 0b10 	vmov	r0, r1, d0
 80170b2:	f7e9 fd45 	bl	8000b40 <__aeabi_d2f>
 80170b6:	ee07 0a90 	vmov	s15, r0
 80170ba:	f83a 2c04 	ldrh.w	r2, [sl, #-4]
 80170be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80170c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80170c6:	eec9 6a07 	vdiv.f32	s13, s18, s14
 80170ca:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80170ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170d2:	bf88      	it	hi
 80170d4:	eeb0 9a66 	vmovhi.f32	s18, s13
 80170d8:	ee29 9a2a 	vmul.f32	s18, s18, s21
 80170dc:	bf88      	it	hi
 80170de:	eeb0 8a67 	vmovhi.f32	s16, s15
 80170e2:	ee79 7a0a 	vadd.f32	s15, s18, s20
 80170e6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80170ea:	ee39 9a4a 	vsub.f32	s18, s18, s20
 80170ee:	ee28 8a2a 	vmul.f32	s16, s16, s21
 80170f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80170f6:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 80170fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170fe:	ee17 3a90 	vmov	r3, s15
 8017102:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017106:	ee78 7a0a 	vadd.f32	s15, s16, s20
 801710a:	ee19 1a10 	vmov	r1, s18
 801710e:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8017112:	bfd8      	it	le
 8017114:	460b      	movle	r3, r1
 8017116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801711a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801711e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8017122:	4413      	add	r3, r2
 8017124:	f829 3c04 	strh.w	r3, [r9, #-4]
 8017128:	ee17 3a90 	vmov	r3, s15
 801712c:	ee18 1a10 	vmov	r1, s16
 8017130:	f83a 2c02 	ldrh.w	r2, [sl, #-2]
 8017134:	bfd8      	it	le
 8017136:	460b      	movle	r3, r1
 8017138:	42b4      	cmp	r4, r6
 801713a:	eba2 0303 	sub.w	r3, r2, r3
 801713e:	f829 3c02 	strh.w	r3, [r9, #-2]
 8017142:	f47f af1d 	bne.w	8016f80 <GUI_EnlargePolygon+0x2c>
 8017146:	b002      	add	sp, #8
 8017148:	ecbd 8b06 	vpop	{d8-d10}
 801714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017150 <GUI_GetCursorLayer>:
 8017150:	2801      	cmp	r0, #1
 8017152:	d901      	bls.n	8017158 <GUI_GetCursorLayer+0x8>
 8017154:	2000      	movs	r0, #0
 8017156:	4770      	bx	lr
 8017158:	4b01      	ldr	r3, [pc, #4]	; (8017160 <GUI_GetCursorLayer+0x10>)
 801715a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801715e:	4770      	bx	lr
 8017160:	20000354 	.word	0x20000354

08017164 <GUI_GetLayerPosEx>:
 8017164:	b570      	push	{r4, r5, r6, lr}
 8017166:	4604      	mov	r4, r0
 8017168:	460e      	mov	r6, r1
 801716a:	4615      	mov	r5, r2
 801716c:	f001 fa1a 	bl	80185a4 <GUI_Lock>
 8017170:	4620      	mov	r0, r4
 8017172:	4631      	mov	r1, r6
 8017174:	462a      	mov	r2, r5
 8017176:	f004 fcb1 	bl	801badc <LCD_GetPosEx>
 801717a:	4604      	mov	r4, r0
 801717c:	b110      	cbz	r0, 8017184 <GUI_GetLayerPosEx+0x20>
 801717e:	2300      	movs	r3, #0
 8017180:	6033      	str	r3, [r6, #0]
 8017182:	602b      	str	r3, [r5, #0]
 8017184:	f001 fa04 	bl	8018590 <GUI_Unlock>
 8017188:	4620      	mov	r0, r4
 801718a:	bd70      	pop	{r4, r5, r6, pc}

0801718c <GUI_SelectLayer>:
 801718c:	b570      	push	{r4, r5, r6, lr}
 801718e:	4d0d      	ldr	r5, [pc, #52]	; (80171c4 <GUI_SelectLayer+0x38>)
 8017190:	4604      	mov	r4, r0
 8017192:	682b      	ldr	r3, [r5, #0]
 8017194:	7c5e      	ldrb	r6, [r3, #17]
 8017196:	f001 fa05 	bl	80185a4 <GUI_Lock>
 801719a:	2c01      	cmp	r4, #1
 801719c:	d903      	bls.n	80171a6 <GUI_SelectLayer+0x1a>
 801719e:	f001 f9f7 	bl	8018590 <GUI_Unlock>
 80171a2:	4630      	mov	r0, r6
 80171a4:	bd70      	pop	{r4, r5, r6, pc}
 80171a6:	4620      	mov	r0, r4
 80171a8:	f7fd fa04 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 80171ac:	2800      	cmp	r0, #0
 80171ae:	d0f6      	beq.n	801719e <GUI_SelectLayer+0x12>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	745c      	strb	r4, [r3, #17]
 80171b4:	f7fc ff2e 	bl	8014014 <GUI_SelectLCD>
 80171b8:	4b03      	ldr	r3, [pc, #12]	; (80171c8 <GUI_SelectLayer+0x3c>)
 80171ba:	601c      	str	r4, [r3, #0]
 80171bc:	f001 f9e8 	bl	8018590 <GUI_Unlock>
 80171c0:	4630      	mov	r0, r6
 80171c2:	bd70      	pop	{r4, r5, r6, pc}
 80171c4:	20000018 	.word	0x20000018
 80171c8:	2004681c 	.word	0x2004681c

080171cc <GUI_SetLayerPosEx>:
 80171cc:	b570      	push	{r4, r5, r6, lr}
 80171ce:	4604      	mov	r4, r0
 80171d0:	460d      	mov	r5, r1
 80171d2:	4616      	mov	r6, r2
 80171d4:	f001 f9e6 	bl	80185a4 <GUI_Lock>
 80171d8:	4629      	mov	r1, r5
 80171da:	4620      	mov	r0, r4
 80171dc:	4632      	mov	r2, r6
 80171de:	f004 fccb 	bl	801bb78 <LCD_SetPosEx>
 80171e2:	4604      	mov	r4, r0
 80171e4:	f001 f9d4 	bl	8018590 <GUI_Unlock>
 80171e8:	4620      	mov	r0, r4
 80171ea:	bd70      	pop	{r4, r5, r6, pc}

080171ec <_Color2Index>:
 80171ec:	4a04      	ldr	r2, [pc, #16]	; (8017200 <_Color2Index+0x14>)
 80171ee:	4b05      	ldr	r3, [pc, #20]	; (8017204 <_Color2Index+0x18>)
 80171f0:	6812      	ldr	r2, [r2, #0]
 80171f2:	7c52      	ldrb	r2, [r2, #17]
 80171f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	691b      	ldr	r3, [r3, #16]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	4718      	bx	r3
 8017200:	20000018 	.word	0x20000018
 8017204:	2000035c 	.word	0x2000035c

08017208 <_Index2Color>:
 8017208:	4a04      	ldr	r2, [pc, #16]	; (801721c <_Index2Color+0x14>)
 801720a:	4b05      	ldr	r3, [pc, #20]	; (8017220 <_Index2Color+0x18>)
 801720c:	6812      	ldr	r2, [r2, #0]
 801720e:	7c52      	ldrb	r2, [r2, #17]
 8017210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	691b      	ldr	r3, [r3, #16]
 8017218:	685b      	ldr	r3, [r3, #4]
 801721a:	4718      	bx	r3
 801721c:	20000018 	.word	0x20000018
 8017220:	2000035c 	.word	0x2000035c

08017224 <_GetIndexMask>:
 8017224:	4a04      	ldr	r2, [pc, #16]	; (8017238 <_GetIndexMask+0x14>)
 8017226:	4b05      	ldr	r3, [pc, #20]	; (801723c <_GetIndexMask+0x18>)
 8017228:	6812      	ldr	r2, [r2, #0]
 801722a:	7c52      	ldrb	r2, [r2, #17]
 801722c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	691b      	ldr	r3, [r3, #16]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	4718      	bx	r3
 8017238:	20000018 	.word	0x20000018
 801723c:	2000035c 	.word	0x2000035c

08017240 <_GetPixelIndex>:
 8017240:	6800      	ldr	r0, [r0, #0]
 8017242:	68c3      	ldr	r3, [r0, #12]
 8017244:	695b      	ldr	r3, [r3, #20]
 8017246:	4718      	bx	r3

08017248 <_GetDevData>:
 8017248:	2000      	movs	r0, #0
 801724a:	4770      	bx	lr

0801724c <_SetOrg>:
 801724c:	6800      	ldr	r0, [r0, #0]
 801724e:	b110      	cbz	r0, 8017256 <_SetOrg+0xa>
 8017250:	68c3      	ldr	r3, [r0, #12]
 8017252:	6a1b      	ldr	r3, [r3, #32]
 8017254:	4718      	bx	r3
 8017256:	4770      	bx	lr

08017258 <_GetDevFunc>:
 8017258:	b510      	push	{r4, lr}
 801725a:	6803      	ldr	r3, [r0, #0]
 801725c:	b082      	sub	sp, #8
 801725e:	9301      	str	r3, [sp, #4]
 8017260:	b163      	cbz	r3, 801727c <_GetDevFunc+0x24>
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	9301      	str	r3, [sp, #4]
 8017266:	b14b      	cbz	r3, 801727c <_GetDevFunc+0x24>
 8017268:	68db      	ldr	r3, [r3, #12]
 801726a:	4604      	mov	r4, r0
 801726c:	a801      	add	r0, sp, #4
 801726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017270:	4798      	blx	r3
 8017272:	b108      	cbz	r0, 8017278 <_GetDevFunc+0x20>
 8017274:	9b01      	ldr	r3, [sp, #4]
 8017276:	6023      	str	r3, [r4, #0]
 8017278:	b002      	add	sp, #8
 801727a:	bd10      	pop	{r4, pc}
 801727c:	2000      	movs	r0, #0
 801727e:	e7fb      	b.n	8017278 <_GetDevFunc+0x20>

08017280 <_GetDevProp>:
 8017280:	6800      	ldr	r0, [r0, #0]
 8017282:	b110      	cbz	r0, 801728a <_GetDevProp+0xa>
 8017284:	68c3      	ldr	r3, [r0, #12]
 8017286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017288:	4718      	bx	r3
 801728a:	f04f 30ff 	mov.w	r0, #4294967295
 801728e:	4770      	bx	lr

08017290 <_GetRect>:
 8017290:	6800      	ldr	r0, [r0, #0]
 8017292:	b110      	cbz	r0, 801729a <_GetRect+0xa>
 8017294:	68c3      	ldr	r3, [r0, #12]
 8017296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017298:	4718      	bx	r3
 801729a:	4770      	bx	lr

0801729c <GUI_SetAlpha>:
 801729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172a0:	4f44      	ldr	r7, [pc, #272]	; (80173b4 <GUI_SetAlpha+0x118>)
 80172a2:	4605      	mov	r5, r0
 80172a4:	4b44      	ldr	r3, [pc, #272]	; (80173b8 <GUI_SetAlpha+0x11c>)
 80172a6:	683a      	ldr	r2, [r7, #0]
 80172a8:	2dff      	cmp	r5, #255	; 0xff
 80172aa:	4e44      	ldr	r6, [pc, #272]	; (80173bc <GUI_SetAlpha+0x120>)
 80172ac:	7c50      	ldrb	r0, [r2, #17]
 80172ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80172b2:	699c      	ldr	r4, [r3, #24]
 80172b4:	f816 8004 	ldrb.w	r8, [r6, r4]
 80172b8:	d00c      	beq.n	80172d4 <GUI_SetAlpha+0x38>
 80172ba:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80173cc <GUI_SetAlpha+0x130>
 80172be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80172c2:	b1bb      	cbz	r3, 80172f4 <GUI_SetAlpha+0x58>
 80172c4:	2105      	movs	r1, #5
 80172c6:	f7fd f95d 	bl	8014584 <GUI_DEVICE__GetpDevice>
 80172ca:	b350      	cbz	r0, 8017322 <GUI_SetAlpha+0x86>
 80172cc:	5535      	strb	r5, [r6, r4]
 80172ce:	4640      	mov	r0, r8
 80172d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172d4:	2105      	movs	r1, #5
 80172d6:	f7fd f955 	bl	8014584 <GUI_DEVICE__GetpDevice>
 80172da:	4607      	mov	r7, r0
 80172dc:	2800      	cmp	r0, #0
 80172de:	d0f6      	beq.n	80172ce <GUI_SetAlpha+0x32>
 80172e0:	2000      	movs	r0, #0
 80172e2:	f006 fee5 	bl	801e0b0 <GUI_MEMDEV__SetAlphaCallback>
 80172e6:	4638      	mov	r0, r7
 80172e8:	f7fd f9aa 	bl	8014640 <GUI_DEVICE_Unlink>
 80172ec:	5535      	strb	r5, [r6, r4]
 80172ee:	4640      	mov	r0, r8
 80172f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172f4:	4b32      	ldr	r3, [pc, #200]	; (80173c0 <GUI_SetAlpha+0x124>)
 80172f6:	4648      	mov	r0, r9
 80172f8:	f840 3f0c 	str.w	r3, [r0, #12]!
 80172fc:	f7fd f91c 	bl	8014538 <GUI__RegisterExit>
 8017300:	f003 fe0e 	bl	801af20 <LCD_GetVXSizeMax>
 8017304:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8017308:	4650      	mov	r0, sl
 801730a:	f7fb fc19 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801730e:	f8c9 0008 	str.w	r0, [r9, #8]
 8017312:	2800      	cmp	r0, #0
 8017314:	d0db      	beq.n	80172ce <GUI_SetAlpha+0x32>
 8017316:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801731a:	b173      	cbz	r3, 801733a <GUI_SetAlpha+0x9e>
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	7c58      	ldrb	r0, [r3, #17]
 8017320:	e7d0      	b.n	80172c4 <GUI_SetAlpha+0x28>
 8017322:	4828      	ldr	r0, [pc, #160]	; (80173c4 <GUI_SetAlpha+0x128>)
 8017324:	f006 fec4 	bl	801e0b0 <GUI_MEMDEV__SetAlphaCallback>
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	7c5b      	ldrb	r3, [r3, #17]
 801732c:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8017330:	2800      	cmp	r0, #0
 8017332:	d0cb      	beq.n	80172cc <GUI_SetAlpha+0x30>
 8017334:	f7fd f9a6 	bl	8014684 <GUI_DEVICE_Link>
 8017338:	e7c8      	b.n	80172cc <GUI_SetAlpha+0x30>
 801733a:	4650      	mov	r0, sl
 801733c:	f7fb fc00 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 8017340:	f8c9 0014 	str.w	r0, [r9, #20]
 8017344:	b388      	cbz	r0, 80173aa <GUI_SetAlpha+0x10e>
 8017346:	f8d9 3000 	ldr.w	r3, [r9]
 801734a:	b31b      	cbz	r3, 8017394 <GUI_SetAlpha+0xf8>
 801734c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8017350:	f8df a078 	ldr.w	sl, [pc, #120]	; 80173cc <GUI_SetAlpha+0x130>
 8017354:	2a00      	cmp	r2, #0
 8017356:	d1e1      	bne.n	801731c <GUI_SetAlpha+0x80>
 8017358:	491b      	ldr	r1, [pc, #108]	; (80173c8 <GUI_SetAlpha+0x12c>)
 801735a:	2301      	movs	r3, #1
 801735c:	f101 0018 	add.w	r0, r1, #24
 8017360:	f7fd f940 	bl	80145e4 <GUI_DEVICE_Create>
 8017364:	f8ca 0004 	str.w	r0, [sl, #4]
 8017368:	2800      	cmp	r0, #0
 801736a:	d1d7      	bne.n	801731c <GUI_SetAlpha+0x80>
 801736c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8017370:	f7fb fbdc 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8017374:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8017378:	f7fb fbd8 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 801737c:	f8d9 0000 	ldr.w	r0, [r9]
 8017380:	b108      	cbz	r0, 8017386 <GUI_SetAlpha+0xea>
 8017382:	f7fd f92d 	bl	80145e0 <GUI_DEVICE_Delete>
 8017386:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801738a:	2800      	cmp	r0, #0
 801738c:	d09f      	beq.n	80172ce <GUI_SetAlpha+0x32>
 801738e:	f7fd f927 	bl	80145e0 <GUI_DEVICE_Delete>
 8017392:	e79c      	b.n	80172ce <GUI_SetAlpha+0x32>
 8017394:	490c      	ldr	r1, [pc, #48]	; (80173c8 <GUI_SetAlpha+0x12c>)
 8017396:	461a      	mov	r2, r3
 8017398:	f101 0018 	add.w	r0, r1, #24
 801739c:	f7fd f922 	bl	80145e4 <GUI_DEVICE_Create>
 80173a0:	f8c9 0000 	str.w	r0, [r9]
 80173a4:	2800      	cmp	r0, #0
 80173a6:	d1d1      	bne.n	801734c <GUI_SetAlpha+0xb0>
 80173a8:	e7e0      	b.n	801736c <GUI_SetAlpha+0xd0>
 80173aa:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80173ae:	f7fb fbbd 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 80173b2:	e78c      	b.n	80172ce <GUI_SetAlpha+0x32>
 80173b4:	20000018 	.word	0x20000018
 80173b8:	200467d0 	.word	0x200467d0
 80173bc:	20000034 	.word	0x20000034
 80173c0:	080173d1 	.word	0x080173d1
 80173c4:	0801729d 	.word	0x0801729d
 80173c8:	08027374 	.word	0x08027374
 80173cc:	2000035c 	.word	0x2000035c

080173d0 <_OnExit>:
 80173d0:	b538      	push	{r3, r4, r5, lr}
 80173d2:	4c0b      	ldr	r4, [pc, #44]	; (8017400 <_OnExit+0x30>)
 80173d4:	2500      	movs	r5, #0
 80173d6:	68a0      	ldr	r0, [r4, #8]
 80173d8:	f7fb fba8 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 80173dc:	6960      	ldr	r0, [r4, #20]
 80173de:	60a5      	str	r5, [r4, #8]
 80173e0:	f7fb fba4 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 80173e4:	6820      	ldr	r0, [r4, #0]
 80173e6:	6165      	str	r5, [r4, #20]
 80173e8:	b110      	cbz	r0, 80173f0 <_OnExit+0x20>
 80173ea:	f7fd f8f9 	bl	80145e0 <GUI_DEVICE_Delete>
 80173ee:	6025      	str	r5, [r4, #0]
 80173f0:	6860      	ldr	r0, [r4, #4]
 80173f2:	4c03      	ldr	r4, [pc, #12]	; (8017400 <_OnExit+0x30>)
 80173f4:	b118      	cbz	r0, 80173fe <_OnExit+0x2e>
 80173f6:	f7fd f8f3 	bl	80145e0 <GUI_DEVICE_Delete>
 80173fa:	2300      	movs	r3, #0
 80173fc:	6063      	str	r3, [r4, #4]
 80173fe:	bd38      	pop	{r3, r4, r5, pc}
 8017400:	2000035c 	.word	0x2000035c

08017404 <_ReadRectFromMemdev>:
 8017404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017408:	4c27      	ldr	r4, [pc, #156]	; (80174a8 <_ReadRectFromMemdev+0xa4>)
 801740a:	461e      	mov	r6, r3
 801740c:	b085      	sub	sp, #20
 801740e:	4615      	mov	r5, r2
 8017410:	6823      	ldr	r3, [r4, #0]
 8017412:	4689      	mov	r9, r1
 8017414:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8017418:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801741a:	f006 ff51 	bl	801e2c0 <GUI_MEMDEV_GetXPos>
 801741e:	6823      	ldr	r3, [r4, #0]
 8017420:	4607      	mov	r7, r0
 8017422:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017424:	f006 ff6e 	bl	801e304 <GUI_MEMDEV_GetYPos>
 8017428:	6823      	ldr	r3, [r4, #0]
 801742a:	4680      	mov	r8, r0
 801742c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801742e:	f006 ff8b 	bl	801e348 <GUI_MEMDEV_GetXSize>
 8017432:	45a8      	cmp	r8, r5
 8017434:	dc2e      	bgt.n	8017494 <_ReadRectFromMemdev+0x90>
 8017436:	454f      	cmp	r7, r9
 8017438:	dc2c      	bgt.n	8017494 <_ReadRectFromMemdev+0x90>
 801743a:	6823      	ldr	r3, [r4, #0]
 801743c:	4683      	mov	fp, r0
 801743e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8017440:	f005 fe42 	bl	801d0c8 <GUI_MEMDEV_GetBitsPerPixel>
 8017444:	2808      	cmp	r0, #8
 8017446:	9001      	str	r0, [sp, #4]
 8017448:	dd27      	ble.n	801749a <_ReadRectFromMemdev+0x96>
 801744a:	2810      	cmp	r0, #16
 801744c:	dc28      	bgt.n	80174a0 <_ReadRectFromMemdev+0x9c>
 801744e:	2302      	movs	r3, #2
 8017450:	461a      	mov	r2, r3
 8017452:	6820      	ldr	r0, [r4, #0]
 8017454:	ebc8 0505 	rsb	r5, r8, r5
 8017458:	ebc7 0709 	rsb	r7, r7, r9
 801745c:	ebc9 0606 	rsb	r6, r9, r6
 8017460:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017462:	9303      	str	r3, [sp, #12]
 8017464:	3601      	adds	r6, #1
 8017466:	9202      	str	r2, [sp, #8]
 8017468:	f006 ff12 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 801746c:	4c0f      	ldr	r4, [pc, #60]	; (80174ac <_ReadRectFromMemdev+0xa8>)
 801746e:	fb0b 7105 	mla	r1, fp, r5, r7
 8017472:	9b03      	ldr	r3, [sp, #12]
 8017474:	9a02      	ldr	r2, [sp, #8]
 8017476:	fb03 0101 	mla	r1, r3, r1, r0
 801747a:	6824      	ldr	r4, [r4, #0]
 801747c:	fb06 f202 	mul.w	r2, r6, r2
 8017480:	4650      	mov	r0, sl
 8017482:	47a0      	blx	r4
 8017484:	9a01      	ldr	r2, [sp, #4]
 8017486:	4631      	mov	r1, r6
 8017488:	4650      	mov	r0, sl
 801748a:	b005      	add	sp, #20
 801748c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017490:	f002 b8ea 	b.w	8019668 <GUI__ExpandPixelIndices>
 8017494:	b005      	add	sp, #20
 8017496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801749a:	2301      	movs	r3, #1
 801749c:	461a      	mov	r2, r3
 801749e:	e7d8      	b.n	8017452 <_ReadRectFromMemdev+0x4e>
 80174a0:	2304      	movs	r3, #4
 80174a2:	461a      	mov	r2, r3
 80174a4:	e7d5      	b.n	8017452 <_ReadRectFromMemdev+0x4e>
 80174a6:	bf00      	nop
 80174a8:	20000018 	.word	0x20000018
 80174ac:	2000004c 	.word	0x2000004c

080174b0 <_GetLine>:
 80174b0:	6800      	ldr	r0, [r0, #0]
 80174b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174b6:	68c5      	ldr	r5, [r0, #12]
 80174b8:	461f      	mov	r7, r3
 80174ba:	b084      	sub	sp, #16
 80174bc:	460c      	mov	r4, r1
 80174be:	682b      	ldr	r3, [r5, #0]
 80174c0:	4691      	mov	r9, r2
 80174c2:	9003      	str	r0, [sp, #12]
 80174c4:	2b04      	cmp	r3, #4
 80174c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80174c8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80174cc:	d03d      	beq.n	801754a <_GetLine+0x9a>
 80174ce:	eb01 0a07 	add.w	sl, r1, r7
 80174d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80174d4:	2101      	movs	r1, #1
 80174d6:	a803      	add	r0, sp, #12
 80174d8:	4798      	blx	r3
 80174da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80174de:	4605      	mov	r5, r0
 80174e0:	b9f0      	cbnz	r0, 8017520 <_GetLine+0x70>
 80174e2:	429c      	cmp	r4, r3
 80174e4:	dc0b      	bgt.n	80174fe <_GetLine+0x4e>
 80174e6:	4635      	mov	r5, r6
 80174e8:	9803      	ldr	r0, [sp, #12]
 80174ea:	4621      	mov	r1, r4
 80174ec:	3401      	adds	r4, #1
 80174ee:	464a      	mov	r2, r9
 80174f0:	68c3      	ldr	r3, [r0, #12]
 80174f2:	695b      	ldr	r3, [r3, #20]
 80174f4:	4798      	blx	r3
 80174f6:	4554      	cmp	r4, sl
 80174f8:	f845 0b04 	str.w	r0, [r5], #4
 80174fc:	d1f4      	bne.n	80174e8 <_GetLine+0x38>
 80174fe:	2f00      	cmp	r7, #0
 8017500:	dd0b      	ble.n	801751a <_GetLine+0x6a>
 8017502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017504:	3e04      	subs	r6, #4
 8017506:	2400      	movs	r4, #0
 8017508:	1f1d      	subs	r5, r3, #4
 801750a:	3401      	adds	r4, #1
 801750c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8017510:	47c0      	blx	r8
 8017512:	f845 0f04 	str.w	r0, [r5, #4]!
 8017516:	42a7      	cmp	r7, r4
 8017518:	d1f7      	bne.n	801750a <_GetLine+0x5a>
 801751a:	b004      	add	sp, #16
 801751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017520:	4621      	mov	r1, r4
 8017522:	464a      	mov	r2, r9
 8017524:	9803      	ldr	r0, [sp, #12]
 8017526:	9601      	str	r6, [sp, #4]
 8017528:	f8cd 9000 	str.w	r9, [sp]
 801752c:	47a8      	blx	r5
 801752e:	4b0a      	ldr	r3, [pc, #40]	; (8017558 <_GetLine+0xa8>)
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	7c58      	ldrb	r0, [r3, #17]
 8017534:	f003 fc04 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 8017538:	4639      	mov	r1, r7
 801753a:	2818      	cmp	r0, #24
 801753c:	bf14      	ite	ne
 801753e:	4602      	movne	r2, r0
 8017540:	2220      	moveq	r2, #32
 8017542:	4630      	mov	r0, r6
 8017544:	f002 f890 	bl	8019668 <GUI__ExpandPixelIndices>
 8017548:	e7d9      	b.n	80174fe <_GetLine+0x4e>
 801754a:	19cb      	adds	r3, r1, r7
 801754c:	9601      	str	r6, [sp, #4]
 801754e:	9200      	str	r2, [sp, #0]
 8017550:	3b01      	subs	r3, #1
 8017552:	f7ff ff57 	bl	8017404 <_ReadRectFromMemdev>
 8017556:	e7d2      	b.n	80174fe <_GetLine+0x4e>
 8017558:	20000018 	.word	0x20000018

0801755c <_Color2IndexBulk>:
 801755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017560:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 801760c <_Color2IndexBulk+0xb0>
 8017564:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8017610 <_Color2IndexBulk+0xb4>
 8017568:	f8d9 5000 	ldr.w	r5, [r9]
 801756c:	7c6d      	ldrb	r5, [r5, #17]
 801756e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8017572:	682d      	ldr	r5, [r5, #0]
 8017574:	692d      	ldr	r5, [r5, #16]
 8017576:	692e      	ldr	r6, [r5, #16]
 8017578:	b11e      	cbz	r6, 8017582 <_Color2IndexBulk+0x26>
 801757a:	46b4      	mov	ip, r6
 801757c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017580:	4760      	bx	ip
 8017582:	2b02      	cmp	r3, #2
 8017584:	4607      	mov	r7, r0
 8017586:	468e      	mov	lr, r1
 8017588:	4614      	mov	r4, r2
 801758a:	d02b      	beq.n	80175e4 <_Color2IndexBulk+0x88>
 801758c:	2b04      	cmp	r3, #4
 801758e:	d016      	beq.n	80175be <_Color2IndexBulk+0x62>
 8017590:	2b01      	cmp	r3, #1
 8017592:	d001      	beq.n	8017598 <_Color2IndexBulk+0x3c>
 8017594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017598:	1e4e      	subs	r6, r1, #1
 801759a:	e006      	b.n	80175aa <_Color2IndexBulk+0x4e>
 801759c:	f8d9 3000 	ldr.w	r3, [r9]
 80175a0:	7c5b      	ldrb	r3, [r3, #17]
 80175a2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	691d      	ldr	r5, [r3, #16]
 80175aa:	682b      	ldr	r3, [r5, #0]
 80175ac:	f857 0b04 	ldr.w	r0, [r7], #4
 80175b0:	4798      	blx	r3
 80175b2:	3c01      	subs	r4, #1
 80175b4:	f806 0f01 	strb.w	r0, [r6, #1]!
 80175b8:	d1f0      	bne.n	801759c <_Color2IndexBulk+0x40>
 80175ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175be:	1f0e      	subs	r6, r1, #4
 80175c0:	e006      	b.n	80175d0 <_Color2IndexBulk+0x74>
 80175c2:	f8d9 3000 	ldr.w	r3, [r9]
 80175c6:	7c5b      	ldrb	r3, [r3, #17]
 80175c8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	691d      	ldr	r5, [r3, #16]
 80175d0:	682b      	ldr	r3, [r5, #0]
 80175d2:	f857 0b04 	ldr.w	r0, [r7], #4
 80175d6:	4798      	blx	r3
 80175d8:	3c01      	subs	r4, #1
 80175da:	f846 0f04 	str.w	r0, [r6, #4]!
 80175de:	d1f0      	bne.n	80175c2 <_Color2IndexBulk+0x66>
 80175e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175e4:	1e8e      	subs	r6, r1, #2
 80175e6:	e006      	b.n	80175f6 <_Color2IndexBulk+0x9a>
 80175e8:	f8d9 3000 	ldr.w	r3, [r9]
 80175ec:	7c5b      	ldrb	r3, [r3, #17]
 80175ee:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	691d      	ldr	r5, [r3, #16]
 80175f6:	682b      	ldr	r3, [r5, #0]
 80175f8:	f857 0b04 	ldr.w	r0, [r7], #4
 80175fc:	4798      	blx	r3
 80175fe:	3c01      	subs	r4, #1
 8017600:	f826 0f02 	strh.w	r0, [r6, #2]!
 8017604:	d1f0      	bne.n	80175e8 <_Color2IndexBulk+0x8c>
 8017606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801760a:	bf00      	nop
 801760c:	20000018 	.word	0x20000018
 8017610:	2000035c 	.word	0x2000035c

08017614 <_Index2ColorBulk>:
 8017614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017618:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80176c4 <_Index2ColorBulk+0xb0>
 801761c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80176c8 <_Index2ColorBulk+0xb4>
 8017620:	f8d9 5000 	ldr.w	r5, [r9]
 8017624:	7c6d      	ldrb	r5, [r5, #17]
 8017626:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 801762a:	682d      	ldr	r5, [r5, #0]
 801762c:	692d      	ldr	r5, [r5, #16]
 801762e:	696e      	ldr	r6, [r5, #20]
 8017630:	b11e      	cbz	r6, 801763a <_Index2ColorBulk+0x26>
 8017632:	46b4      	mov	ip, r6
 8017634:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017638:	4760      	bx	ip
 801763a:	2b02      	cmp	r3, #2
 801763c:	4607      	mov	r7, r0
 801763e:	468e      	mov	lr, r1
 8017640:	4614      	mov	r4, r2
 8017642:	d02b      	beq.n	801769c <_Index2ColorBulk+0x88>
 8017644:	2b04      	cmp	r3, #4
 8017646:	d016      	beq.n	8017676 <_Index2ColorBulk+0x62>
 8017648:	2b01      	cmp	r3, #1
 801764a:	d001      	beq.n	8017650 <_Index2ColorBulk+0x3c>
 801764c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017650:	1f0e      	subs	r6, r1, #4
 8017652:	e006      	b.n	8017662 <_Index2ColorBulk+0x4e>
 8017654:	f8d9 3000 	ldr.w	r3, [r9]
 8017658:	7c5b      	ldrb	r3, [r3, #17]
 801765a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	691d      	ldr	r5, [r3, #16]
 8017662:	686b      	ldr	r3, [r5, #4]
 8017664:	f817 0b01 	ldrb.w	r0, [r7], #1
 8017668:	4798      	blx	r3
 801766a:	3c01      	subs	r4, #1
 801766c:	f846 0f04 	str.w	r0, [r6, #4]!
 8017670:	d1f0      	bne.n	8017654 <_Index2ColorBulk+0x40>
 8017672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017676:	1f0e      	subs	r6, r1, #4
 8017678:	e006      	b.n	8017688 <_Index2ColorBulk+0x74>
 801767a:	f8d9 3000 	ldr.w	r3, [r9]
 801767e:	7c5b      	ldrb	r3, [r3, #17]
 8017680:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	691d      	ldr	r5, [r3, #16]
 8017688:	686b      	ldr	r3, [r5, #4]
 801768a:	f857 0b04 	ldr.w	r0, [r7], #4
 801768e:	4798      	blx	r3
 8017690:	3c01      	subs	r4, #1
 8017692:	f846 0f04 	str.w	r0, [r6, #4]!
 8017696:	d1f0      	bne.n	801767a <_Index2ColorBulk+0x66>
 8017698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801769c:	1f0e      	subs	r6, r1, #4
 801769e:	e006      	b.n	80176ae <_Index2ColorBulk+0x9a>
 80176a0:	f8d9 3000 	ldr.w	r3, [r9]
 80176a4:	7c5b      	ldrb	r3, [r3, #17]
 80176a6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	691d      	ldr	r5, [r3, #16]
 80176ae:	686b      	ldr	r3, [r5, #4]
 80176b0:	f837 0b02 	ldrh.w	r0, [r7], #2
 80176b4:	4798      	blx	r3
 80176b6:	3c01      	subs	r4, #1
 80176b8:	f846 0f04 	str.w	r0, [r6, #4]!
 80176bc:	d1f0      	bne.n	80176a0 <_Index2ColorBulk+0x8c>
 80176be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176c2:	bf00      	nop
 80176c4:	20000018 	.word	0x20000018
 80176c8:	2000035c 	.word	0x2000035c

080176cc <_SetPixelIndex>:
 80176cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d0:	6804      	ldr	r4, [r0, #0]
 80176d2:	4698      	mov	r8, r3
 80176d4:	460e      	mov	r6, r1
 80176d6:	4617      	mov	r7, r2
 80176d8:	68e3      	ldr	r3, [r4, #12]
 80176da:	4620      	mov	r0, r4
 80176dc:	695b      	ldr	r3, [r3, #20]
 80176de:	4798      	blx	r3
 80176e0:	6923      	ldr	r3, [r4, #16]
 80176e2:	685b      	ldr	r3, [r3, #4]
 80176e4:	4798      	blx	r3
 80176e6:	6922      	ldr	r2, [r4, #16]
 80176e8:	4605      	mov	r5, r0
 80176ea:	4640      	mov	r0, r8
 80176ec:	6853      	ldr	r3, [r2, #4]
 80176ee:	4798      	blx	r3
 80176f0:	4b1a      	ldr	r3, [pc, #104]	; (801775c <_SetPixelIndex+0x90>)
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	b30b      	cbz	r3, 801773a <_SetPixelIndex+0x6e>
 80176f6:	4602      	mov	r2, r0
 80176f8:	4819      	ldr	r0, [pc, #100]	; (8017760 <_SetPixelIndex+0x94>)
 80176fa:	491a      	ldr	r1, [pc, #104]	; (8017764 <_SetPixelIndex+0x98>)
 80176fc:	6800      	ldr	r0, [r0, #0]
 80176fe:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
 8017702:	0e12      	lsrs	r2, r2, #24
 8017704:	7c40      	ldrb	r0, [r0, #17]
 8017706:	2aff      	cmp	r2, #255	; 0xff
 8017708:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801770c:	4816      	ldr	r0, [pc, #88]	; (8017768 <_SetPixelIndex+0x9c>)
 801770e:	6989      	ldr	r1, [r1, #24]
 8017710:	5c40      	ldrb	r0, [r0, r1]
 8017712:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8017716:	d003      	beq.n	8017720 <_SetPixelIndex+0x54>
 8017718:	4b14      	ldr	r3, [pc, #80]	; (801776c <_SetPixelIndex+0xa0>)
 801771a:	4629      	mov	r1, r5
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	4798      	blx	r3
 8017720:	6923      	ldr	r3, [r4, #16]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	4798      	blx	r3
 8017726:	68e5      	ldr	r5, [r4, #12]
 8017728:	4603      	mov	r3, r0
 801772a:	463a      	mov	r2, r7
 801772c:	69ad      	ldr	r5, [r5, #24]
 801772e:	4631      	mov	r1, r6
 8017730:	4620      	mov	r0, r4
 8017732:	46ac      	mov	ip, r5
 8017734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017738:	4760      	bx	ip
 801773a:	4a09      	ldr	r2, [pc, #36]	; (8017760 <_SetPixelIndex+0x94>)
 801773c:	4629      	mov	r1, r5
 801773e:	4b09      	ldr	r3, [pc, #36]	; (8017764 <_SetPixelIndex+0x98>)
 8017740:	6812      	ldr	r2, [r2, #0]
 8017742:	4d09      	ldr	r5, [pc, #36]	; (8017768 <_SetPixelIndex+0x9c>)
 8017744:	7c52      	ldrb	r2, [r2, #17]
 8017746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801774a:	4b08      	ldr	r3, [pc, #32]	; (801776c <_SetPixelIndex+0xa0>)
 801774c:	6992      	ldr	r2, [r2, #24]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	5caa      	ldrb	r2, [r5, r2]
 8017752:	4798      	blx	r3
 8017754:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017758:	e7e2      	b.n	8017720 <_SetPixelIndex+0x54>
 801775a:	bf00      	nop
 801775c:	200467b8 	.word	0x200467b8
 8017760:	20000018 	.word	0x20000018
 8017764:	200467d0 	.word	0x200467d0
 8017768:	20000034 	.word	0x20000034
 801776c:	20000044 	.word	0x20000044

08017770 <_XorPixel>:
 8017770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017774:	4604      	mov	r4, r0
 8017776:	6800      	ldr	r0, [r0, #0]
 8017778:	460d      	mov	r5, r1
 801777a:	4617      	mov	r7, r2
 801777c:	68c3      	ldr	r3, [r0, #12]
 801777e:	695b      	ldr	r3, [r3, #20]
 8017780:	4798      	blx	r3
 8017782:	6823      	ldr	r3, [r4, #0]
 8017784:	4606      	mov	r6, r0
 8017786:	691b      	ldr	r3, [r3, #16]
 8017788:	689b      	ldr	r3, [r3, #8]
 801778a:	4798      	blx	r3
 801778c:	463a      	mov	r2, r7
 801778e:	ea80 0306 	eor.w	r3, r0, r6
 8017792:	4629      	mov	r1, r5
 8017794:	4620      	mov	r0, r4
 8017796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801779a:	f7ff bf97 	b.w	80176cc <_SetPixelIndex>
 801779e:	bf00      	nop

080177a0 <_DrawHLine>:
 80177a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a4:	6806      	ldr	r6, [r0, #0]
 80177a6:	1a5b      	subs	r3, r3, r1
 80177a8:	4c60      	ldr	r4, [pc, #384]	; (801792c <_DrawHLine+0x18c>)
 80177aa:	b091      	sub	sp, #68	; 0x44
 80177ac:	6937      	ldr	r7, [r6, #16]
 80177ae:	1c5d      	adds	r5, r3, #1
 80177b0:	68a6      	ldr	r6, [r4, #8]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	9606      	str	r6, [sp, #24]
 80177b6:	683f      	ldr	r7, [r7, #0]
 80177b8:	9302      	str	r3, [sp, #8]
 80177ba:	462b      	mov	r3, r5
 80177bc:	6966      	ldr	r6, [r4, #20]
 80177be:	900d      	str	r0, [sp, #52]	; 0x34
 80177c0:	9601      	str	r6, [sp, #4]
 80177c2:	9e06      	ldr	r6, [sp, #24]
 80177c4:	910e      	str	r1, [sp, #56]	; 0x38
 80177c6:	9600      	str	r6, [sp, #0]
 80177c8:	4e59      	ldr	r6, [pc, #356]	; (8017930 <_DrawHLine+0x190>)
 80177ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80177cc:	f7ff fe70 	bl	80174b0 <_GetLine>
 80177d0:	6833      	ldr	r3, [r6, #0]
 80177d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177d4:	6818      	ldr	r0, [r3, #0]
 80177d6:	f002 ffeb 	bl	801a7b0 <LCD_Index2Color>
 80177da:	2d00      	cmp	r5, #0
 80177dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80177de:	dd48      	ble.n	8017872 <_DrawHLine+0xd2>
 80177e0:	0e03      	lsrs	r3, r0, #24
 80177e2:	b2d9      	uxtb	r1, r3
 80177e4:	2bff      	cmp	r3, #255	; 0xff
 80177e6:	9108      	str	r1, [sp, #32]
 80177e8:	d068      	beq.n	80178bc <_DrawHLine+0x11c>
 80177ea:	4b52      	ldr	r3, [pc, #328]	; (8017934 <_DrawHLine+0x194>)
 80177ec:	f04f 0a00 	mov.w	sl, #0
 80177f0:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8017940 <_DrawHLine+0x1a0>
 80177f4:	9306      	str	r3, [sp, #24]
 80177f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177f8:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801793c <_DrawHLine+0x19c>
 80177fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017800:	9507      	str	r5, [sp, #28]
 8017802:	970a      	str	r7, [sp, #40]	; 0x28
 8017804:	930c      	str	r3, [sp, #48]	; 0x30
 8017806:	4b4c      	ldr	r3, [pc, #304]	; (8017938 <_DrawHLine+0x198>)
 8017808:	9309      	str	r3, [sp, #36]	; 0x24
 801780a:	e018      	b.n	801783e <_DrawHLine+0x9e>
 801780c:	6830      	ldr	r0, [r6, #0]
 801780e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017810:	7c40      	ldrb	r0, [r0, #17]
 8017812:	f8d9 3000 	ldr.w	r3, [r9]
 8017816:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801781a:	9d06      	ldr	r5, [sp, #24]
 801781c:	6980      	ldr	r0, [r0, #24]
 801781e:	5c28      	ldrb	r0, [r5, r0]
 8017820:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017822:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 8017826:	4798      	blx	r3
 8017828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801782a:	f10a 0a01 	add.w	sl, sl, #1
 801782e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8017832:	4798      	blx	r3
 8017834:	9b07      	ldr	r3, [sp, #28]
 8017836:	f848 0007 	str.w	r0, [r8, r7]
 801783a:	459a      	cmp	sl, r3
 801783c:	d018      	beq.n	8017870 <_DrawHLine+0xd0>
 801783e:	6961      	ldr	r1, [r4, #20]
 8017840:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8017844:	f89b 3000 	ldrb.w	r3, [fp]
 8017848:	9a08      	ldr	r2, [sp, #32]
 801784a:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d1dc      	bne.n	801780c <_DrawHLine+0x6c>
 8017852:	6832      	ldr	r2, [r6, #0]
 8017854:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017856:	7c52      	ldrb	r2, [r2, #17]
 8017858:	f8d9 3000 	ldr.w	r3, [r9]
 801785c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017860:	9d06      	ldr	r5, [sp, #24]
 8017862:	6992      	ldr	r2, [r2, #24]
 8017864:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017866:	5caa      	ldrb	r2, [r5, r2]
 8017868:	4798      	blx	r3
 801786a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801786e:	e7db      	b.n	8017828 <_DrawHLine+0x88>
 8017870:	461d      	mov	r5, r3
 8017872:	6833      	ldr	r3, [r6, #0]
 8017874:	7c58      	ldrb	r0, [r3, #17]
 8017876:	f003 fa63 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 801787a:	2818      	cmp	r0, #24
 801787c:	bf14      	ite	ne
 801787e:	4606      	movne	r6, r0
 8017880:	2620      	moveq	r6, #32
 8017882:	4629      	mov	r1, r5
 8017884:	68a0      	ldr	r0, [r4, #8]
 8017886:	4632      	mov	r2, r6
 8017888:	f001 fd54 	bl	8019334 <GUI__CompactPixelIndices>
 801788c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801788e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8017892:	f04f 0e01 	mov.w	lr, #1
 8017896:	6818      	ldr	r0, [r3, #0]
 8017898:	2400      	movs	r4, #0
 801789a:	462b      	mov	r3, r5
 801789c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801789e:	68c7      	ldr	r7, [r0, #12]
 80178a0:	f8cd c00c 	str.w	ip, [sp, #12]
 80178a4:	9601      	str	r6, [sp, #4]
 80178a6:	9405      	str	r4, [sp, #20]
 80178a8:	9404      	str	r4, [sp, #16]
 80178aa:	9402      	str	r4, [sp, #8]
 80178ac:	f8cd e000 	str.w	lr, [sp]
 80178b0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80178b2:	687c      	ldr	r4, [r7, #4]
 80178b4:	47a0      	blx	r4
 80178b6:	b011      	add	sp, #68	; 0x44
 80178b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178bc:	4b1d      	ldr	r3, [pc, #116]	; (8017934 <_DrawHLine+0x194>)
 80178be:	f04f 0900 	mov.w	r9, #0
 80178c2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8017940 <_DrawHLine+0x1a0>
 80178c6:	9306      	str	r3, [sp, #24]
 80178c8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 80178cc:	9707      	str	r7, [sp, #28]
 80178ce:	9308      	str	r3, [sp, #32]
 80178d0:	4b19      	ldr	r3, [pc, #100]	; (8017938 <_DrawHLine+0x198>)
 80178d2:	469a      	mov	sl, r3
 80178d4:	e012      	b.n	80178fc <_DrawHLine+0x15c>
 80178d6:	6833      	ldr	r3, [r6, #0]
 80178d8:	9a06      	ldr	r2, [sp, #24]
 80178da:	7c5b      	ldrb	r3, [r3, #17]
 80178dc:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80178e0:	699b      	ldr	r3, [r3, #24]
 80178e2:	5cd0      	ldrb	r0, [r2, r3]
 80178e4:	9b08      	ldr	r3, [sp, #32]
 80178e6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80178ea:	f109 0901 	add.w	r9, r9, #1
 80178ee:	9b07      	ldr	r3, [sp, #28]
 80178f0:	68a7      	ldr	r7, [r4, #8]
 80178f2:	4798      	blx	r3
 80178f4:	45a9      	cmp	r9, r5
 80178f6:	f847 0008 	str.w	r0, [r7, r8]
 80178fa:	d0ba      	beq.n	8017872 <_DrawHLine+0xd2>
 80178fc:	6962      	ldr	r2, [r4, #20]
 80178fe:	ea4f 0889 	mov.w	r8, r9, lsl #2
 8017902:	f89b 3000 	ldrb.w	r3, [fp]
 8017906:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d1e3      	bne.n	80178d6 <_DrawHLine+0x136>
 801790e:	6832      	ldr	r2, [r6, #0]
 8017910:	9f06      	ldr	r7, [sp, #24]
 8017912:	7c52      	ldrb	r2, [r2, #17]
 8017914:	4b09      	ldr	r3, [pc, #36]	; (801793c <_DrawHLine+0x19c>)
 8017916:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	6992      	ldr	r2, [r2, #24]
 801791e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017920:	5cba      	ldrb	r2, [r7, r2]
 8017922:	4798      	blx	r3
 8017924:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017928:	e7df      	b.n	80178ea <_DrawHLine+0x14a>
 801792a:	bf00      	nop
 801792c:	2000035c 	.word	0x2000035c
 8017930:	20000018 	.word	0x20000018
 8017934:	20000034 	.word	0x20000034
 8017938:	200467d0 	.word	0x200467d0
 801793c:	20000044 	.word	0x20000044
 8017940:	200467b8 	.word	0x200467b8

08017944 <_FillRect>:
 8017944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017948:	9d06      	ldr	r5, [sp, #24]
 801794a:	42aa      	cmp	r2, r5
 801794c:	dc0c      	bgt.n	8017968 <_FillRect+0x24>
 801794e:	4614      	mov	r4, r2
 8017950:	4680      	mov	r8, r0
 8017952:	460f      	mov	r7, r1
 8017954:	461e      	mov	r6, r3
 8017956:	4622      	mov	r2, r4
 8017958:	3401      	adds	r4, #1
 801795a:	4633      	mov	r3, r6
 801795c:	4639      	mov	r1, r7
 801795e:	4640      	mov	r0, r8
 8017960:	f7ff ff1e 	bl	80177a0 <_DrawHLine>
 8017964:	42a5      	cmp	r5, r4
 8017966:	daf6      	bge.n	8017956 <_FillRect+0x12>
 8017968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801796c <_DrawVLine>:
 801796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017970:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8017b0c <_DrawVLine+0x1a0>
 8017974:	460e      	mov	r6, r1
 8017976:	4699      	mov	r9, r3
 8017978:	b085      	sub	sp, #20
 801797a:	f8d8 1000 	ldr.w	r1, [r8]
 801797e:	4607      	mov	r7, r0
 8017980:	4614      	mov	r4, r2
 8017982:	7c0b      	ldrb	r3, [r1, #16]
 8017984:	07db      	lsls	r3, r3, #31
 8017986:	d456      	bmi.n	8017a36 <_DrawVLine+0xca>
 8017988:	454a      	cmp	r2, r9
 801798a:	dc56      	bgt.n	8017a3a <_DrawVLine+0xce>
 801798c:	4b5b      	ldr	r3, [pc, #364]	; (8017afc <_DrawVLine+0x190>)
 801798e:	4682      	mov	sl, r0
 8017990:	9301      	str	r3, [sp, #4]
 8017992:	4b5b      	ldr	r3, [pc, #364]	; (8017b00 <_DrawVLine+0x194>)
 8017994:	9302      	str	r3, [sp, #8]
 8017996:	4b5b      	ldr	r3, [pc, #364]	; (8017b04 <_DrawVLine+0x198>)
 8017998:	9303      	str	r3, [sp, #12]
 801799a:	e023      	b.n	80179e4 <_DrawVLine+0x78>
 801799c:	f8d8 0000 	ldr.w	r0, [r8]
 80179a0:	2bff      	cmp	r3, #255	; 0xff
 80179a2:	9f03      	ldr	r7, [sp, #12]
 80179a4:	461a      	mov	r2, r3
 80179a6:	7c40      	ldrb	r0, [r0, #17]
 80179a8:	4659      	mov	r1, fp
 80179aa:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80179ae:	9f02      	ldr	r7, [sp, #8]
 80179b0:	6980      	ldr	r0, [r0, #24]
 80179b2:	5c38      	ldrb	r0, [r7, r0]
 80179b4:	ea4e 6700 	orr.w	r7, lr, r0, lsl #24
 80179b8:	4638      	mov	r0, r7
 80179ba:	d003      	beq.n	80179c4 <_DrawVLine+0x58>
 80179bc:	4b52      	ldr	r3, [pc, #328]	; (8017b08 <_DrawVLine+0x19c>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	4798      	blx	r3
 80179c2:	4607      	mov	r7, r0
 80179c4:	692b      	ldr	r3, [r5, #16]
 80179c6:	4638      	mov	r0, r7
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	4798      	blx	r3
 80179cc:	68e9      	ldr	r1, [r5, #12]
 80179ce:	4622      	mov	r2, r4
 80179d0:	3401      	adds	r4, #1
 80179d2:	4603      	mov	r3, r0
 80179d4:	698f      	ldr	r7, [r1, #24]
 80179d6:	4628      	mov	r0, r5
 80179d8:	4631      	mov	r1, r6
 80179da:	47b8      	blx	r7
 80179dc:	45a1      	cmp	r9, r4
 80179de:	db2c      	blt.n	8017a3a <_DrawVLine+0xce>
 80179e0:	f8d8 1000 	ldr.w	r1, [r8]
 80179e4:	f8da 5000 	ldr.w	r5, [sl]
 80179e8:	4622      	mov	r2, r4
 80179ea:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 80179ec:	4631      	mov	r1, r6
 80179ee:	68eb      	ldr	r3, [r5, #12]
 80179f0:	4628      	mov	r0, r5
 80179f2:	683f      	ldr	r7, [r7, #0]
 80179f4:	695b      	ldr	r3, [r3, #20]
 80179f6:	4798      	blx	r3
 80179f8:	692b      	ldr	r3, [r5, #16]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	4798      	blx	r3
 80179fe:	692b      	ldr	r3, [r5, #16]
 8017a00:	4683      	mov	fp, r0
 8017a02:	4638      	mov	r0, r7
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	4798      	blx	r3
 8017a08:	9a01      	ldr	r2, [sp, #4]
 8017a0a:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017a0e:	0e03      	lsrs	r3, r0, #24
 8017a10:	7812      	ldrb	r2, [r2, #0]
 8017a12:	2a00      	cmp	r2, #0
 8017a14:	d1c2      	bne.n	801799c <_DrawVLine+0x30>
 8017a16:	f8d8 2000 	ldr.w	r2, [r8]
 8017a1a:	4659      	mov	r1, fp
 8017a1c:	9f03      	ldr	r7, [sp, #12]
 8017a1e:	7c52      	ldrb	r2, [r2, #17]
 8017a20:	4b39      	ldr	r3, [pc, #228]	; (8017b08 <_DrawVLine+0x19c>)
 8017a22:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017a26:	9f02      	ldr	r7, [sp, #8]
 8017a28:	6992      	ldr	r2, [r2, #24]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	5cba      	ldrb	r2, [r7, r2]
 8017a2e:	4798      	blx	r3
 8017a30:	f040 477f 	orr.w	r7, r0, #4278190080	; 0xff000000
 8017a34:	e7c6      	b.n	80179c4 <_DrawVLine+0x58>
 8017a36:	454a      	cmp	r2, r9
 8017a38:	dd02      	ble.n	8017a40 <_DrawVLine+0xd4>
 8017a3a:	b005      	add	sp, #20
 8017a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a40:	4b2e      	ldr	r3, [pc, #184]	; (8017afc <_DrawVLine+0x190>)
 8017a42:	9600      	str	r6, [sp, #0]
 8017a44:	9301      	str	r3, [sp, #4]
 8017a46:	4b2e      	ldr	r3, [pc, #184]	; (8017b00 <_DrawVLine+0x194>)
 8017a48:	9302      	str	r3, [sp, #8]
 8017a4a:	4b2e      	ldr	r3, [pc, #184]	; (8017b04 <_DrawVLine+0x198>)
 8017a4c:	9303      	str	r3, [sp, #12]
 8017a4e:	e022      	b.n	8017a96 <_DrawVLine+0x12a>
 8017a50:	f8d8 0000 	ldr.w	r0, [r8]
 8017a54:	2bff      	cmp	r3, #255	; 0xff
 8017a56:	9e03      	ldr	r6, [sp, #12]
 8017a58:	461a      	mov	r2, r3
 8017a5a:	7c40      	ldrb	r0, [r0, #17]
 8017a5c:	4651      	mov	r1, sl
 8017a5e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017a62:	9e02      	ldr	r6, [sp, #8]
 8017a64:	6980      	ldr	r0, [r0, #24]
 8017a66:	5c30      	ldrb	r0, [r6, r0]
 8017a68:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017a6c:	4670      	mov	r0, lr
 8017a6e:	d003      	beq.n	8017a78 <_DrawVLine+0x10c>
 8017a70:	4b25      	ldr	r3, [pc, #148]	; (8017b08 <_DrawVLine+0x19c>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	4798      	blx	r3
 8017a76:	4686      	mov	lr, r0
 8017a78:	692b      	ldr	r3, [r5, #16]
 8017a7a:	4670      	mov	r0, lr
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4798      	blx	r3
 8017a80:	68e9      	ldr	r1, [r5, #12]
 8017a82:	4622      	mov	r2, r4
 8017a84:	3401      	adds	r4, #1
 8017a86:	4603      	mov	r3, r0
 8017a88:	f8d1 b018 	ldr.w	fp, [r1, #24]
 8017a8c:	4628      	mov	r0, r5
 8017a8e:	9900      	ldr	r1, [sp, #0]
 8017a90:	47d8      	blx	fp
 8017a92:	45a1      	cmp	r9, r4
 8017a94:	dbd1      	blt.n	8017a3a <_DrawVLine+0xce>
 8017a96:	6838      	ldr	r0, [r7, #0]
 8017a98:	4622      	mov	r2, r4
 8017a9a:	9900      	ldr	r1, [sp, #0]
 8017a9c:	68c3      	ldr	r3, [r0, #12]
 8017a9e:	695b      	ldr	r3, [r3, #20]
 8017aa0:	4798      	blx	r3
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	4683      	mov	fp, r0
 8017aa6:	691b      	ldr	r3, [r3, #16]
 8017aa8:	689b      	ldr	r3, [r3, #8]
 8017aaa:	4798      	blx	r3
 8017aac:	683d      	ldr	r5, [r7, #0]
 8017aae:	4622      	mov	r2, r4
 8017ab0:	9900      	ldr	r1, [sp, #0]
 8017ab2:	68eb      	ldr	r3, [r5, #12]
 8017ab4:	ea8b 0b00 	eor.w	fp, fp, r0
 8017ab8:	4628      	mov	r0, r5
 8017aba:	695b      	ldr	r3, [r3, #20]
 8017abc:	4798      	blx	r3
 8017abe:	692b      	ldr	r3, [r5, #16]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	4798      	blx	r3
 8017ac4:	692b      	ldr	r3, [r5, #16]
 8017ac6:	4682      	mov	sl, r0
 8017ac8:	4658      	mov	r0, fp
 8017aca:	685b      	ldr	r3, [r3, #4]
 8017acc:	4798      	blx	r3
 8017ace:	9a01      	ldr	r2, [sp, #4]
 8017ad0:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017ad4:	0e03      	lsrs	r3, r0, #24
 8017ad6:	7812      	ldrb	r2, [r2, #0]
 8017ad8:	2a00      	cmp	r2, #0
 8017ada:	d1b9      	bne.n	8017a50 <_DrawVLine+0xe4>
 8017adc:	f8d8 2000 	ldr.w	r2, [r8]
 8017ae0:	4651      	mov	r1, sl
 8017ae2:	9e03      	ldr	r6, [sp, #12]
 8017ae4:	7c52      	ldrb	r2, [r2, #17]
 8017ae6:	4b08      	ldr	r3, [pc, #32]	; (8017b08 <_DrawVLine+0x19c>)
 8017ae8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8017aec:	9e02      	ldr	r6, [sp, #8]
 8017aee:	6992      	ldr	r2, [r2, #24]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	5cb2      	ldrb	r2, [r6, r2]
 8017af4:	4798      	blx	r3
 8017af6:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8017afa:	e7bd      	b.n	8017a78 <_DrawVLine+0x10c>
 8017afc:	200467b8 	.word	0x200467b8
 8017b00:	20000034 	.word	0x20000034
 8017b04:	200467d0 	.word	0x200467d0
 8017b08:	20000044 	.word	0x20000044
 8017b0c:	20000018 	.word	0x20000018

08017b10 <_DrawBitmap>:
 8017b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b14:	b093      	sub	sp, #76	; 0x4c
 8017b16:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017b18:	2c00      	cmp	r4, #0
 8017b1a:	dd32      	ble.n	8017b82 <_DrawBitmap+0x72>
 8017b1c:	930c      	str	r3, [sp, #48]	; 0x30
 8017b1e:	2300      	movs	r3, #0
 8017b20:	920e      	str	r2, [sp, #56]	; 0x38
 8017b22:	461a      	mov	r2, r3
 8017b24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b26:	9110      	str	r1, [sp, #64]	; 0x40
 8017b28:	3b01      	subs	r3, #1
 8017b2a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8017b2c:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b2e:	2b1f      	cmp	r3, #31
 8017b30:	d821      	bhi.n	8017b76 <_DrawBitmap+0x66>
 8017b32:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017b36:	0029      	.short	0x0029
 8017b38:	002001fb 	.word	0x002001fb
 8017b3c:	00200223 	.word	0x00200223
 8017b40:	00200020 	.word	0x00200020
 8017b44:	0020024b 	.word	0x0020024b
 8017b48:	00200020 	.word	0x00200020
 8017b4c:	00200020 	.word	0x00200020
 8017b50:	00200020 	.word	0x00200020
 8017b54:	00200193 	.word	0x00200193
 8017b58:	00200020 	.word	0x00200020
 8017b5c:	00200020 	.word	0x00200020
 8017b60:	00200020 	.word	0x00200020
 8017b64:	00200020 	.word	0x00200020
 8017b68:	00200020 	.word	0x00200020
 8017b6c:	00200020 	.word	0x00200020
 8017b70:	00200020 	.word	0x00200020
 8017b74:	0271      	.short	0x0271
 8017b76:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017b78:	3201      	adds	r2, #1
 8017b7a:	4401      	add	r1, r0
 8017b7c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017b7e:	4290      	cmp	r0, r2
 8017b80:	dcd5      	bgt.n	8017b2e <_DrawBitmap+0x1e>
 8017b82:	b013      	add	sp, #76	; 0x4c
 8017b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8017b8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b8e:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8017e58 <_DrawBitmap+0x348>
 8017b92:	4413      	add	r3, r2
 8017b94:	4fab      	ldr	r7, [pc, #684]	; (8017e44 <_DrawBitmap+0x334>)
 8017b96:	911f      	str	r1, [sp, #124]	; 0x7c
 8017b98:	9310      	str	r3, [sp, #64]	; 0x40
 8017b9a:	f8db 3000 	ldr.w	r3, [fp]
 8017b9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ba0:	7c1b      	ldrb	r3, [r3, #16]
 8017ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ba4:	f003 0303 	and.w	r3, r3, #3
 8017ba8:	440a      	add	r2, r1
 8017baa:	9921      	ldr	r1, [sp, #132]	; 0x84
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	920d      	str	r2, [sp, #52]	; 0x34
 8017bb0:	684e      	ldr	r6, [r1, #4]
 8017bb2:	f000 80dc 	beq.w	8017d6e <_DrawBitmap+0x25e>
 8017bb6:	2b03      	cmp	r3, #3
 8017bb8:	f000 8093 	beq.w	8017ce2 <_DrawBitmap+0x1d2>
 8017bbc:	2b01      	cmp	r3, #1
 8017bbe:	f000 8090 	beq.w	8017ce2 <_DrawBitmap+0x1d2>
 8017bc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017bc4:	f04f 0a00 	mov.w	sl, #0
 8017bc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017bca:	6801      	ldr	r1, [r0, #0]
 8017bcc:	462b      	mov	r3, r5
 8017bce:	690c      	ldr	r4, [r1, #16]
 8017bd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017bd2:	e894 0110 	ldmia.w	r4, {r4, r8}
 8017bd6:	f8cd 8008 	str.w	r8, [sp, #8]
 8017bda:	9408      	str	r4, [sp, #32]
 8017bdc:	697c      	ldr	r4, [r7, #20]
 8017bde:	9401      	str	r4, [sp, #4]
 8017be0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017be2:	9407      	str	r4, [sp, #28]
 8017be4:	68bc      	ldr	r4, [r7, #8]
 8017be6:	9400      	str	r4, [sp, #0]
 8017be8:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8017bea:	f8d4 9000 	ldr.w	r9, [r4]
 8017bee:	f7ff fc5f 	bl	80174b0 <_GetLine>
 8017bf2:	4648      	mov	r0, r9
 8017bf4:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8017e54 <_DrawBitmap+0x344>
 8017bf8:	47c0      	blx	r8
 8017bfa:	900a      	str	r0, [sp, #40]	; 0x28
 8017bfc:	4630      	mov	r0, r6
 8017bfe:	47c0      	blx	r8
 8017c00:	9c07      	ldr	r4, [sp, #28]
 8017c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8017c04:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8017c06:	9507      	str	r5, [sp, #28]
 8017c08:	e023      	b.n	8017c52 <_DrawBitmap+0x142>
 8017c0a:	0e03      	lsrs	r3, r0, #24
 8017c0c:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017c10:	4d8d      	ldr	r5, [pc, #564]	; (8017e48 <_DrawBitmap+0x338>)
 8017c12:	7c50      	ldrb	r0, [r2, #17]
 8017c14:	2bff      	cmp	r3, #255	; 0xff
 8017c16:	461a      	mov	r2, r3
 8017c18:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8017c1c:	4d8b      	ldr	r5, [pc, #556]	; (8017e4c <_DrawBitmap+0x33c>)
 8017c1e:	6980      	ldr	r0, [r0, #24]
 8017c20:	5c28      	ldrb	r0, [r5, r0]
 8017c22:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017c26:	4670      	mov	r0, lr
 8017c28:	d003      	beq.n	8017c32 <_DrawBitmap+0x122>
 8017c2a:	f8d9 3000 	ldr.w	r3, [r9]
 8017c2e:	4798      	blx	r3
 8017c30:	4686      	mov	lr, r0
 8017c32:	3401      	adds	r4, #1
 8017c34:	4670      	mov	r0, lr
 8017c36:	9b08      	ldr	r3, [sp, #32]
 8017c38:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8017c3c:	4798      	blx	r3
 8017c3e:	2c08      	cmp	r4, #8
 8017c40:	f848 000a 	str.w	r0, [r8, sl]
 8017c44:	f10a 0a04 	add.w	sl, sl, #4
 8017c48:	d021      	beq.n	8017c8e <_DrawBitmap+0x17e>
 8017c4a:	9b07      	ldr	r3, [sp, #28]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	9307      	str	r3, [sp, #28]
 8017c50:	d023      	beq.n	8017c9a <_DrawBitmap+0x18a>
 8017c52:	2380      	movs	r3, #128	; 0x80
 8017c54:	7831      	ldrb	r1, [r6, #0]
 8017c56:	697a      	ldr	r2, [r7, #20]
 8017c58:	4123      	asrs	r3, r4
 8017c5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017c5c:	4219      	tst	r1, r3
 8017c5e:	4b7c      	ldr	r3, [pc, #496]	; (8017e50 <_DrawBitmap+0x340>)
 8017c60:	f852 100a 	ldr.w	r1, [r2, sl]
 8017c64:	781b      	ldrb	r3, [r3, #0]
 8017c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c68:	bf08      	it	eq
 8017c6a:	4610      	moveq	r0, r2
 8017c6c:	f8db 2000 	ldr.w	r2, [fp]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d1ca      	bne.n	8017c0a <_DrawBitmap+0xfa>
 8017c74:	7c52      	ldrb	r2, [r2, #17]
 8017c76:	4d74      	ldr	r5, [pc, #464]	; (8017e48 <_DrawBitmap+0x338>)
 8017c78:	f8d9 3000 	ldr.w	r3, [r9]
 8017c7c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8017c80:	4d72      	ldr	r5, [pc, #456]	; (8017e4c <_DrawBitmap+0x33c>)
 8017c82:	6992      	ldr	r2, [r2, #24]
 8017c84:	5caa      	ldrb	r2, [r5, r2]
 8017c86:	4798      	blx	r3
 8017c88:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8017c8c:	e7d1      	b.n	8017c32 <_DrawBitmap+0x122>
 8017c8e:	9b07      	ldr	r3, [sp, #28]
 8017c90:	3601      	adds	r6, #1
 8017c92:	2400      	movs	r4, #0
 8017c94:	3b01      	subs	r3, #1
 8017c96:	9307      	str	r3, [sp, #28]
 8017c98:	d1db      	bne.n	8017c52 <_DrawBitmap+0x142>
 8017c9a:	461d      	mov	r5, r3
 8017c9c:	f8db 3000 	ldr.w	r3, [fp]
 8017ca0:	7c58      	ldrb	r0, [r3, #17]
 8017ca2:	f003 f84d 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 8017ca6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8017caa:	2818      	cmp	r0, #24
 8017cac:	bf14      	ite	ne
 8017cae:	4606      	movne	r6, r0
 8017cb0:	2620      	moveq	r6, #32
 8017cb2:	68b8      	ldr	r0, [r7, #8]
 8017cb4:	4641      	mov	r1, r8
 8017cb6:	4632      	mov	r2, r6
 8017cb8:	f001 fb3c 	bl	8019334 <GUI__CompactPixelIndices>
 8017cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017cbe:	f04f 0c01 	mov.w	ip, #1
 8017cc2:	4643      	mov	r3, r8
 8017cc4:	6810      	ldr	r0, [r2, #0]
 8017cc6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017cc8:	68c4      	ldr	r4, [r0, #12]
 8017cca:	9601      	str	r6, [sp, #4]
 8017ccc:	9505      	str	r5, [sp, #20]
 8017cce:	9504      	str	r5, [sp, #16]
 8017cd0:	9502      	str	r5, [sp, #8]
 8017cd2:	68bd      	ldr	r5, [r7, #8]
 8017cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017cd6:	9503      	str	r5, [sp, #12]
 8017cd8:	f8cd c000 	str.w	ip, [sp]
 8017cdc:	6864      	ldr	r4, [r4, #4]
 8017cde:	47a0      	blx	r4
 8017ce0:	e039      	b.n	8017d56 <_DrawBitmap+0x246>
 8017ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ce4:	f04f 0980 	mov.w	r9, #128	; 0x80
 8017ce8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017cea:	691b      	ldr	r3, [r3, #16]
 8017cec:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017cee:	689b      	ldr	r3, [r3, #8]
 8017cf0:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8017cf4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017cf6:	4798      	blx	r3
 8017cf8:	f8cd b020 	str.w	fp, [sp, #32]
 8017cfc:	9007      	str	r0, [sp, #28]
 8017cfe:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8017d02:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8017d06:	e005      	b.n	8017d14 <_DrawBitmap+0x204>
 8017d08:	2c08      	cmp	r4, #8
 8017d0a:	f106 0601 	add.w	r6, r6, #1
 8017d0e:	d01a      	beq.n	8017d46 <_DrawBitmap+0x236>
 8017d10:	3d01      	subs	r5, #1
 8017d12:	d01e      	beq.n	8017d52 <_DrawBitmap+0x242>
 8017d14:	fa49 f304 	asr.w	r3, r9, r4
 8017d18:	f898 2000 	ldrb.w	r2, [r8]
 8017d1c:	3401      	adds	r4, #1
 8017d1e:	421a      	tst	r2, r3
 8017d20:	d0f2      	beq.n	8017d08 <_DrawBitmap+0x1f8>
 8017d22:	f8db 0000 	ldr.w	r0, [fp]
 8017d26:	4631      	mov	r1, r6
 8017d28:	4652      	mov	r2, sl
 8017d2a:	68c3      	ldr	r3, [r0, #12]
 8017d2c:	695b      	ldr	r3, [r3, #20]
 8017d2e:	4798      	blx	r3
 8017d30:	9b07      	ldr	r3, [sp, #28]
 8017d32:	4631      	mov	r1, r6
 8017d34:	4652      	mov	r2, sl
 8017d36:	4043      	eors	r3, r0
 8017d38:	4658      	mov	r0, fp
 8017d3a:	f7ff fcc7 	bl	80176cc <_SetPixelIndex>
 8017d3e:	2c08      	cmp	r4, #8
 8017d40:	f106 0601 	add.w	r6, r6, #1
 8017d44:	d1e4      	bne.n	8017d10 <_DrawBitmap+0x200>
 8017d46:	3d01      	subs	r5, #1
 8017d48:	f108 0801 	add.w	r8, r8, #1
 8017d4c:	f04f 0400 	mov.w	r4, #0
 8017d50:	d1e0      	bne.n	8017d14 <_DrawBitmap+0x204>
 8017d52:	f8dd b020 	ldr.w	fp, [sp, #32]
 8017d56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017d58:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d5c:	440a      	add	r2, r1
 8017d5e:	3301      	adds	r3, #1
 8017d60:	921f      	str	r2, [sp, #124]	; 0x7c
 8017d62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017d64:	9309      	str	r3, [sp, #36]	; 0x24
 8017d66:	429a      	cmp	r2, r3
 8017d68:	f73f af17 	bgt.w	8017b9a <_DrawBitmap+0x8a>
 8017d6c:	e709      	b.n	8017b82 <_DrawBitmap+0x72>
 8017d6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017d70:	697c      	ldr	r4, [r7, #20]
 8017d72:	6801      	ldr	r1, [r0, #0]
 8017d74:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8017d78:	690d      	ldr	r5, [r1, #16]
 8017d7a:	4673      	mov	r3, lr
 8017d7c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017d7e:	e895 0120 	ldmia.w	r5, {r5, r8}
 8017d82:	9401      	str	r4, [sp, #4]
 8017d84:	f8cd 8008 	str.w	r8, [sp, #8]
 8017d88:	68bc      	ldr	r4, [r7, #8]
 8017d8a:	9507      	str	r5, [sp, #28]
 8017d8c:	4675      	mov	r5, lr
 8017d8e:	9400      	str	r4, [sp, #0]
 8017d90:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8017d92:	f7ff fb8d 	bl	80174b0 <_GetLine>
 8017d96:	4630      	mov	r0, r6
 8017d98:	2600      	movs	r6, #0
 8017d9a:	47c0      	blx	r8
 8017d9c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8017da0:	0e03      	lsrs	r3, r0, #24
 8017da2:	4681      	mov	r9, r0
 8017da4:	9308      	str	r3, [sp, #32]
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	930a      	str	r3, [sp, #40]	; 0x28
 8017daa:	e006      	b.n	8017dba <_DrawBitmap+0x2aa>
 8017dac:	3401      	adds	r4, #1
 8017dae:	3604      	adds	r6, #4
 8017db0:	2c08      	cmp	r4, #8
 8017db2:	d031      	beq.n	8017e18 <_DrawBitmap+0x308>
 8017db4:	3d01      	subs	r5, #1
 8017db6:	f43f af71 	beq.w	8017c9c <_DrawBitmap+0x18c>
 8017dba:	2380      	movs	r3, #128	; 0x80
 8017dbc:	f898 2000 	ldrb.w	r2, [r8]
 8017dc0:	4123      	asrs	r3, r4
 8017dc2:	421a      	tst	r2, r3
 8017dc4:	d0f2      	beq.n	8017dac <_DrawBitmap+0x29c>
 8017dc6:	4a22      	ldr	r2, [pc, #136]	; (8017e50 <_DrawBitmap+0x340>)
 8017dc8:	f029 4c7f 	bic.w	ip, r9, #4278190080	; 0xff000000
 8017dcc:	6979      	ldr	r1, [r7, #20]
 8017dce:	7812      	ldrb	r2, [r2, #0]
 8017dd0:	5989      	ldr	r1, [r1, r6]
 8017dd2:	b32a      	cbz	r2, 8017e20 <_DrawBitmap+0x310>
 8017dd4:	f8db 0000 	ldr.w	r0, [fp]
 8017dd8:	4b1b      	ldr	r3, [pc, #108]	; (8017e48 <_DrawBitmap+0x338>)
 8017dda:	7c40      	ldrb	r0, [r0, #17]
 8017ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dde:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017de2:	4b1a      	ldr	r3, [pc, #104]	; (8017e4c <_DrawBitmap+0x33c>)
 8017de4:	6980      	ldr	r0, [r0, #24]
 8017de6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8017e54 <_DrawBitmap+0x344>
 8017dea:	5c18      	ldrb	r0, [r3, r0]
 8017dec:	ea4c 6300 	orr.w	r3, ip, r0, lsl #24
 8017df0:	9808      	ldr	r0, [sp, #32]
 8017df2:	28ff      	cmp	r0, #255	; 0xff
 8017df4:	4618      	mov	r0, r3
 8017df6:	d003      	beq.n	8017e00 <_DrawBitmap+0x2f0>
 8017df8:	f8de 3000 	ldr.w	r3, [lr]
 8017dfc:	4798      	blx	r3
 8017dfe:	4603      	mov	r3, r0
 8017e00:	3401      	adds	r4, #1
 8017e02:	4618      	mov	r0, r3
 8017e04:	9b07      	ldr	r3, [sp, #28]
 8017e06:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017e0a:	4798      	blx	r3
 8017e0c:	2c08      	cmp	r4, #8
 8017e0e:	f84a 0006 	str.w	r0, [sl, r6]
 8017e12:	f106 0604 	add.w	r6, r6, #4
 8017e16:	d1cd      	bne.n	8017db4 <_DrawBitmap+0x2a4>
 8017e18:	f108 0801 	add.w	r8, r8, #1
 8017e1c:	2400      	movs	r4, #0
 8017e1e:	e7c9      	b.n	8017db4 <_DrawBitmap+0x2a4>
 8017e20:	f8db 2000 	ldr.w	r2, [fp]
 8017e24:	4648      	mov	r0, r9
 8017e26:	4b0b      	ldr	r3, [pc, #44]	; (8017e54 <_DrawBitmap+0x344>)
 8017e28:	7c52      	ldrb	r2, [r2, #17]
 8017e2a:	f8d3 c000 	ldr.w	ip, [r3]
 8017e2e:	4b06      	ldr	r3, [pc, #24]	; (8017e48 <_DrawBitmap+0x338>)
 8017e30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017e34:	4b05      	ldr	r3, [pc, #20]	; (8017e4c <_DrawBitmap+0x33c>)
 8017e36:	6992      	ldr	r2, [r2, #24]
 8017e38:	5c9a      	ldrb	r2, [r3, r2]
 8017e3a:	47e0      	blx	ip
 8017e3c:	f040 437f 	orr.w	r3, r0, #4278190080	; 0xff000000
 8017e40:	e7de      	b.n	8017e00 <_DrawBitmap+0x2f0>
 8017e42:	bf00      	nop
 8017e44:	2000035c 	.word	0x2000035c
 8017e48:	200467d0 	.word	0x200467d0
 8017e4c:	20000034 	.word	0x20000034
 8017e50:	200467b8 	.word	0x200467b8
 8017e54:	20000044 	.word	0x20000044
 8017e58:	20000018 	.word	0x20000018
 8017e5c:	4ba2      	ldr	r3, [pc, #648]	; (80180e8 <_DrawBitmap+0x5d8>)
 8017e5e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80180f4 <_DrawBitmap+0x5e4>
 8017e62:	930d      	str	r3, [sp, #52]	; 0x34
 8017e64:	f8df b290 	ldr.w	fp, [pc, #656]	; 80180f8 <_DrawBitmap+0x5e8>
 8017e68:	46ca      	mov	sl, r9
 8017e6a:	4ba0      	ldr	r3, [pc, #640]	; (80180ec <_DrawBitmap+0x5dc>)
 8017e6c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 80180fc <_DrawBitmap+0x5ec>
 8017e70:	9209      	str	r2, [sp, #36]	; 0x24
 8017e72:	911f      	str	r1, [sp, #124]	; 0x7c
 8017e74:	9308      	str	r3, [sp, #32]
 8017e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e78:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e7c:	6802      	ldr	r2, [r0, #0]
 8017e7e:	440b      	add	r3, r1
 8017e80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017e82:	6916      	ldr	r6, [r2, #16]
 8017e84:	461d      	mov	r5, r3
 8017e86:	694c      	ldr	r4, [r1, #20]
 8017e88:	6877      	ldr	r7, [r6, #4]
 8017e8a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8017e8e:	462a      	mov	r2, r5
 8017e90:	688d      	ldr	r5, [r1, #8]
 8017e92:	6836      	ldr	r6, [r6, #0]
 8017e94:	9311      	str	r3, [sp, #68]	; 0x44
 8017e96:	4673      	mov	r3, lr
 8017e98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017e9a:	9702      	str	r7, [sp, #8]
 8017e9c:	9401      	str	r4, [sp, #4]
 8017e9e:	4674      	mov	r4, lr
 8017ea0:	9500      	str	r5, [sp, #0]
 8017ea2:	970a      	str	r7, [sp, #40]	; 0x28
 8017ea4:	960b      	str	r6, [sp, #44]	; 0x2c
 8017ea6:	f7ff fb03 	bl	80174b0 <_GetLine>
 8017eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017eac:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8017eae:	694e      	ldr	r6, [r1, #20]
 8017eb0:	688d      	ldr	r5, [r1, #8]
 8017eb2:	9407      	str	r4, [sp, #28]
 8017eb4:	e01d      	b.n	8017ef2 <_DrawBitmap+0x3e2>
 8017eb6:	f8db 0000 	ldr.w	r0, [fp]
 8017eba:	2bff      	cmp	r3, #255	; 0xff
 8017ebc:	9c08      	ldr	r4, [sp, #32]
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	7c40      	ldrb	r0, [r0, #17]
 8017ec2:	4649      	mov	r1, r9
 8017ec4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017ec8:	6980      	ldr	r0, [r0, #24]
 8017eca:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8017ece:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 8017ed2:	4670      	mov	r0, lr
 8017ed4:	d003      	beq.n	8017ede <_DrawBitmap+0x3ce>
 8017ed6:	4b86      	ldr	r3, [pc, #536]	; (80180f0 <_DrawBitmap+0x5e0>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4798      	blx	r3
 8017edc:	4686      	mov	lr, r0
 8017ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ee0:	4670      	mov	r0, lr
 8017ee2:	4798      	blx	r3
 8017ee4:	9b07      	ldr	r3, [sp, #28]
 8017ee6:	f845 0b04 	str.w	r0, [r5], #4
 8017eea:	3b01      	subs	r3, #1
 8017eec:	9307      	str	r3, [sp, #28]
 8017eee:	f000 8107 	beq.w	8018100 <_DrawBitmap+0x5f0>
 8017ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ef4:	f837 0b02 	ldrh.w	r0, [r7], #2
 8017ef8:	f856 9b04 	ldr.w	r9, [r6], #4
 8017efc:	4798      	blx	r3
 8017efe:	f898 2000 	ldrb.w	r2, [r8]
 8017f02:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 8017f06:	0e03      	lsrs	r3, r0, #24
 8017f08:	2a00      	cmp	r2, #0
 8017f0a:	d1d4      	bne.n	8017eb6 <_DrawBitmap+0x3a6>
 8017f0c:	f8db 2000 	ldr.w	r2, [fp]
 8017f10:	4649      	mov	r1, r9
 8017f12:	9c08      	ldr	r4, [sp, #32]
 8017f14:	7c52      	ldrb	r2, [r2, #17]
 8017f16:	4b76      	ldr	r3, [pc, #472]	; (80180f0 <_DrawBitmap+0x5e0>)
 8017f18:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	6992      	ldr	r2, [r2, #24]
 8017f20:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8017f24:	4798      	blx	r3
 8017f26:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 8017f2a:	e7d8      	b.n	8017ede <_DrawBitmap+0x3ce>
 8017f2c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80180f8 <_DrawBitmap+0x5e8>
 8017f30:	27c0      	movs	r7, #192	; 0xc0
 8017f32:	9209      	str	r2, [sp, #36]	; 0x24
 8017f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f38:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017f3c:	4413      	add	r3, r2
 8017f3e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8017f42:	911f      	str	r1, [sp, #124]	; 0x7c
 8017f44:	9308      	str	r3, [sp, #32]
 8017f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f4e:	7c1b      	ldrb	r3, [r3, #16]
 8017f50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017f52:	eb01 0800 	add.w	r8, r1, r0
 8017f56:	f013 0303 	ands.w	r3, r3, #3
 8017f5a:	7816      	ldrb	r6, [r2, #0]
 8017f5c:	f000 8263 	beq.w	8018426 <_DrawBitmap+0x916>
 8017f60:	2b02      	cmp	r3, #2
 8017f62:	f000 8166 	beq.w	8018232 <_DrawBitmap+0x722>
 8017f66:	4613      	mov	r3, r2
 8017f68:	460a      	mov	r2, r1
 8017f6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f6c:	3201      	adds	r2, #1
 8017f6e:	440b      	add	r3, r1
 8017f70:	9209      	str	r2, [sp, #36]	; 0x24
 8017f72:	931f      	str	r3, [sp, #124]	; 0x7c
 8017f74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017f76:	4293      	cmp	r3, r2
 8017f78:	dce5      	bgt.n	8017f46 <_DrawBitmap+0x436>
 8017f7a:	e602      	b.n	8017b82 <_DrawBitmap+0x72>
 8017f7c:	f8df b178 	ldr.w	fp, [pc, #376]	; 80180f8 <_DrawBitmap+0x5e8>
 8017f80:	27f0      	movs	r7, #240	; 0xf0
 8017f82:	9209      	str	r2, [sp, #36]	; 0x24
 8017f84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f88:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017f8c:	4413      	add	r3, r2
 8017f8e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8017f92:	911f      	str	r1, [sp, #124]	; 0x7c
 8017f94:	9308      	str	r3, [sp, #32]
 8017f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f9e:	7c1b      	ldrb	r3, [r3, #16]
 8017fa0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017fa2:	eb01 0800 	add.w	r8, r1, r0
 8017fa6:	f013 0303 	ands.w	r3, r3, #3
 8017faa:	7816      	ldrb	r6, [r2, #0]
 8017fac:	f000 81f3 	beq.w	8018396 <_DrawBitmap+0x886>
 8017fb0:	2b02      	cmp	r3, #2
 8017fb2:	f000 8197 	beq.w	80182e4 <_DrawBitmap+0x7d4>
 8017fb6:	4613      	mov	r3, r2
 8017fb8:	460a      	mov	r2, r1
 8017fba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017fbc:	3201      	adds	r2, #1
 8017fbe:	440b      	add	r3, r1
 8017fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8017fc2:	931f      	str	r3, [sp, #124]	; 0x7c
 8017fc4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	dce5      	bgt.n	8017f96 <_DrawBitmap+0x486>
 8017fca:	e5da      	b.n	8017b82 <_DrawBitmap+0x72>
 8017fcc:	f8df b128 	ldr.w	fp, [pc, #296]	; 80180f8 <_DrawBitmap+0x5e8>
 8017fd0:	4692      	mov	sl, r2
 8017fd2:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8017fd6:	f8cd b01c 	str.w	fp, [sp, #28]
 8017fda:	468b      	mov	fp, r1
 8017fdc:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8017fe0:	911f      	str	r1, [sp, #124]	; 0x7c
 8017fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fe4:	ebcb 0603 	rsb	r6, fp, r3
 8017fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fea:	eb0b 0503 	add.w	r5, fp, r3
 8017fee:	9b07      	ldr	r3, [sp, #28]
 8017ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	eb0a 0702 	add.w	r7, sl, r2
 8017ff8:	7c1b      	ldrb	r3, [r3, #16]
 8017ffa:	f013 0303 	ands.w	r3, r3, #3
 8017ffe:	f000 8104 	beq.w	801820a <_DrawBitmap+0x6fa>
 8018002:	2b02      	cmp	r3, #2
 8018004:	f000 80de 	beq.w	80181c4 <_DrawBitmap+0x6b4>
 8018008:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801800a:	f10a 0a01 	add.w	sl, sl, #1
 801800e:	449b      	add	fp, r3
 8018010:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018012:	4553      	cmp	r3, sl
 8018014:	dce5      	bgt.n	8017fe2 <_DrawBitmap+0x4d2>
 8018016:	e5b4      	b.n	8017b82 <_DrawBitmap+0x72>
 8018018:	4b33      	ldr	r3, [pc, #204]	; (80180e8 <_DrawBitmap+0x5d8>)
 801801a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80180f4 <_DrawBitmap+0x5e4>
 801801e:	930d      	str	r3, [sp, #52]	; 0x34
 8018020:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 80180f8 <_DrawBitmap+0x5e8>
 8018024:	46ca      	mov	sl, r9
 8018026:	4b31      	ldr	r3, [pc, #196]	; (80180ec <_DrawBitmap+0x5dc>)
 8018028:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80180fc <_DrawBitmap+0x5ec>
 801802c:	9209      	str	r2, [sp, #36]	; 0x24
 801802e:	911f      	str	r1, [sp, #124]	; 0x7c
 8018030:	9308      	str	r3, [sp, #32]
 8018032:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018034:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018038:	6802      	ldr	r2, [r0, #0]
 801803a:	440b      	add	r3, r1
 801803c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801803e:	6916      	ldr	r6, [r2, #16]
 8018040:	461d      	mov	r5, r3
 8018042:	694c      	ldr	r4, [r1, #20]
 8018044:	6877      	ldr	r7, [r6, #4]
 8018046:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801804a:	462a      	mov	r2, r5
 801804c:	688d      	ldr	r5, [r1, #8]
 801804e:	6836      	ldr	r6, [r6, #0]
 8018050:	9311      	str	r3, [sp, #68]	; 0x44
 8018052:	4673      	mov	r3, lr
 8018054:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018056:	9702      	str	r7, [sp, #8]
 8018058:	9401      	str	r4, [sp, #4]
 801805a:	4674      	mov	r4, lr
 801805c:	9500      	str	r5, [sp, #0]
 801805e:	970a      	str	r7, [sp, #40]	; 0x28
 8018060:	960b      	str	r6, [sp, #44]	; 0x2c
 8018062:	f7ff fa25 	bl	80174b0 <_GetLine>
 8018066:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018068:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801806a:	694e      	ldr	r6, [r1, #20]
 801806c:	688d      	ldr	r5, [r1, #8]
 801806e:	9407      	str	r4, [sp, #28]
 8018070:	e01c      	b.n	80180ac <_DrawBitmap+0x59c>
 8018072:	f8db 0000 	ldr.w	r0, [fp]
 8018076:	2bff      	cmp	r3, #255	; 0xff
 8018078:	9c08      	ldr	r4, [sp, #32]
 801807a:	461a      	mov	r2, r3
 801807c:	7c40      	ldrb	r0, [r0, #17]
 801807e:	4649      	mov	r1, r9
 8018080:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018084:	6980      	ldr	r0, [r0, #24]
 8018086:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801808a:	ea4e 6e00 	orr.w	lr, lr, r0, lsl #24
 801808e:	4670      	mov	r0, lr
 8018090:	d003      	beq.n	801809a <_DrawBitmap+0x58a>
 8018092:	4b17      	ldr	r3, [pc, #92]	; (80180f0 <_DrawBitmap+0x5e0>)
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4798      	blx	r3
 8018098:	4686      	mov	lr, r0
 801809a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801809c:	4670      	mov	r0, lr
 801809e:	4798      	blx	r3
 80180a0:	9b07      	ldr	r3, [sp, #28]
 80180a2:	f845 0b04 	str.w	r0, [r5], #4
 80180a6:	3b01      	subs	r3, #1
 80180a8:	9307      	str	r3, [sp, #28]
 80180aa:	d05a      	beq.n	8018162 <_DrawBitmap+0x652>
 80180ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180ae:	f857 0b04 	ldr.w	r0, [r7], #4
 80180b2:	f856 9b04 	ldr.w	r9, [r6], #4
 80180b6:	4798      	blx	r3
 80180b8:	f898 2000 	ldrb.w	r2, [r8]
 80180bc:	f020 4e7f 	bic.w	lr, r0, #4278190080	; 0xff000000
 80180c0:	0e03      	lsrs	r3, r0, #24
 80180c2:	2a00      	cmp	r2, #0
 80180c4:	d1d5      	bne.n	8018072 <_DrawBitmap+0x562>
 80180c6:	f8db 2000 	ldr.w	r2, [fp]
 80180ca:	4649      	mov	r1, r9
 80180cc:	9c08      	ldr	r4, [sp, #32]
 80180ce:	7c52      	ldrb	r2, [r2, #17]
 80180d0:	4b07      	ldr	r3, [pc, #28]	; (80180f0 <_DrawBitmap+0x5e0>)
 80180d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	6992      	ldr	r2, [r2, #24]
 80180da:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80180de:	4798      	blx	r3
 80180e0:	f040 4e7f 	orr.w	lr, r0, #4278190080	; 0xff000000
 80180e4:	e7d9      	b.n	801809a <_DrawBitmap+0x58a>
 80180e6:	bf00      	nop
 80180e8:	2000035c 	.word	0x2000035c
 80180ec:	200467d0 	.word	0x200467d0
 80180f0:	20000044 	.word	0x20000044
 80180f4:	20000034 	.word	0x20000034
 80180f8:	20000018 	.word	0x20000018
 80180fc:	200467b8 	.word	0x200467b8
 8018100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018102:	2601      	movs	r6, #1
 8018104:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018106:	3201      	adds	r2, #1
 8018108:	f8db 3000 	ldr.w	r3, [fp]
 801810c:	4617      	mov	r7, r2
 801810e:	9209      	str	r2, [sp, #36]	; 0x24
 8018110:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018112:	7c58      	ldrb	r0, [r3, #17]
 8018114:	440a      	add	r2, r1
 8018116:	921f      	str	r2, [sp, #124]	; 0x7c
 8018118:	f002 fe12 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 801811c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801811e:	2818      	cmp	r0, #24
 8018120:	bf14      	ite	ne
 8018122:	4604      	movne	r4, r0
 8018124:	2420      	moveq	r4, #32
 8018126:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801812a:	4622      	mov	r2, r4
 801812c:	68a8      	ldr	r0, [r5, #8]
 801812e:	4649      	mov	r1, r9
 8018130:	f001 f900 	bl	8019334 <GUI__CompactPixelIndices>
 8018134:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018136:	68a9      	ldr	r1, [r5, #8]
 8018138:	464b      	mov	r3, r9
 801813a:	6810      	ldr	r0, [r2, #0]
 801813c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801813e:	68c5      	ldr	r5, [r0, #12]
 8018140:	9401      	str	r4, [sp, #4]
 8018142:	2400      	movs	r4, #0
 8018144:	9103      	str	r1, [sp, #12]
 8018146:	9405      	str	r4, [sp, #20]
 8018148:	9404      	str	r4, [sp, #16]
 801814a:	9402      	str	r4, [sp, #8]
 801814c:	9600      	str	r6, [sp, #0]
 801814e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018150:	686c      	ldr	r4, [r5, #4]
 8018152:	47a0      	blx	r4
 8018154:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018156:	42bb      	cmp	r3, r7
 8018158:	f73f ae8d 	bgt.w	8017e76 <_DrawBitmap+0x366>
 801815c:	b013      	add	sp, #76	; 0x4c
 801815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018164:	2601      	movs	r6, #1
 8018166:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018168:	3201      	adds	r2, #1
 801816a:	f8db 3000 	ldr.w	r3, [fp]
 801816e:	4617      	mov	r7, r2
 8018170:	9209      	str	r2, [sp, #36]	; 0x24
 8018172:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018174:	7c58      	ldrb	r0, [r3, #17]
 8018176:	440a      	add	r2, r1
 8018178:	921f      	str	r2, [sp, #124]	; 0x7c
 801817a:	f002 fde1 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 801817e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018180:	2818      	cmp	r0, #24
 8018182:	bf14      	ite	ne
 8018184:	4604      	movne	r4, r0
 8018186:	2420      	moveq	r4, #32
 8018188:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801818c:	4622      	mov	r2, r4
 801818e:	68a8      	ldr	r0, [r5, #8]
 8018190:	4649      	mov	r1, r9
 8018192:	f001 f8cf 	bl	8019334 <GUI__CompactPixelIndices>
 8018196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018198:	68a9      	ldr	r1, [r5, #8]
 801819a:	464b      	mov	r3, r9
 801819c:	6810      	ldr	r0, [r2, #0]
 801819e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80181a0:	68c5      	ldr	r5, [r0, #12]
 80181a2:	9401      	str	r4, [sp, #4]
 80181a4:	2400      	movs	r4, #0
 80181a6:	9103      	str	r1, [sp, #12]
 80181a8:	9405      	str	r4, [sp, #20]
 80181aa:	9404      	str	r4, [sp, #16]
 80181ac:	9402      	str	r4, [sp, #8]
 80181ae:	9600      	str	r6, [sp, #0]
 80181b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80181b2:	686c      	ldr	r4, [r5, #4]
 80181b4:	47a0      	blx	r4
 80181b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80181b8:	42bb      	cmp	r3, r7
 80181ba:	f73f af3a 	bgt.w	8018032 <_DrawBitmap+0x522>
 80181be:	b013      	add	sp, #76	; 0x4c
 80181c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181c6:	f1b8 0f00 	cmp.w	r8, #0
 80181ca:	f000 8184 	beq.w	80184d6 <_DrawBitmap+0x9c6>
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	dd10      	ble.n	80181f4 <_DrawBitmap+0x6e4>
 80181d2:	465c      	mov	r4, fp
 80181d4:	e001      	b.n	80181da <_DrawBitmap+0x6ca>
 80181d6:	42ac      	cmp	r4, r5
 80181d8:	d00c      	beq.n	80181f4 <_DrawBitmap+0x6e4>
 80181da:	1931      	adds	r1, r6, r4
 80181dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d0f8      	beq.n	80181d6 <_DrawBitmap+0x6c6>
 80181e4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80181e8:	463a      	mov	r2, r7
 80181ea:	4648      	mov	r0, r9
 80181ec:	f7ff fa6e 	bl	80176cc <_SetPixelIndex>
 80181f0:	42ac      	cmp	r4, r5
 80181f2:	d1f2      	bne.n	80181da <_DrawBitmap+0x6ca>
 80181f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80181f6:	f10a 0a01 	add.w	sl, sl, #1
 80181fa:	449b      	add	fp, r3
 80181fc:	1af6      	subs	r6, r6, r3
 80181fe:	441d      	add	r5, r3
 8018200:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018202:	4553      	cmp	r3, sl
 8018204:	f73f aef3 	bgt.w	8017fee <_DrawBitmap+0x4de>
 8018208:	e4bb      	b.n	8017b82 <_DrawBitmap+0x72>
 801820a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801820c:	f1b8 0f00 	cmp.w	r8, #0
 8018210:	f000 8153 	beq.w	80184ba <_DrawBitmap+0x9aa>
 8018214:	2b00      	cmp	r3, #0
 8018216:	dded      	ble.n	80181f4 <_DrawBitmap+0x6e4>
 8018218:	465c      	mov	r4, fp
 801821a:	7823      	ldrb	r3, [r4, #0]
 801821c:	19a1      	adds	r1, r4, r6
 801821e:	3401      	adds	r4, #1
 8018220:	463a      	mov	r2, r7
 8018222:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8018226:	4648      	mov	r0, r9
 8018228:	f7ff fa50 	bl	80176cc <_SetPixelIndex>
 801822c:	42ac      	cmp	r4, r5
 801822e:	d1f4      	bne.n	801821a <_DrawBitmap+0x70a>
 8018230:	e7e0      	b.n	80181f4 <_DrawBitmap+0x6e4>
 8018232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018234:	4692      	mov	sl, r2
 8018236:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8018238:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801823a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801823e:	b933      	cbnz	r3, 801824e <_DrawBitmap+0x73e>
 8018240:	e03b      	b.n	80182ba <_DrawBitmap+0x7aa>
 8018242:	2c04      	cmp	r4, #4
 8018244:	f109 0901 	add.w	r9, r9, #1
 8018248:	d018      	beq.n	801827c <_DrawBitmap+0x76c>
 801824a:	3d01      	subs	r5, #1
 801824c:	d01e      	beq.n	801828c <_DrawBitmap+0x77c>
 801824e:	f1c4 0303 	rsb	r3, r4, #3
 8018252:	3401      	adds	r4, #1
 8018254:	005a      	lsls	r2, r3, #1
 8018256:	f1c2 0306 	rsb	r3, r2, #6
 801825a:	fa47 f303 	asr.w	r3, r7, r3
 801825e:	4033      	ands	r3, r6
 8018260:	40d3      	lsrs	r3, r2
 8018262:	d0ee      	beq.n	8018242 <_DrawBitmap+0x732>
 8018264:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018266:	4649      	mov	r1, r9
 8018268:	4658      	mov	r0, fp
 801826a:	f109 0901 	add.w	r9, r9, #1
 801826e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018272:	4642      	mov	r2, r8
 8018274:	f7ff fa2a 	bl	80176cc <_SetPixelIndex>
 8018278:	2c04      	cmp	r4, #4
 801827a:	d1e6      	bne.n	801824a <_DrawBitmap+0x73a>
 801827c:	3d01      	subs	r5, #1
 801827e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8018282:	f04f 0400 	mov.w	r4, #0
 8018286:	f10a 0a01 	add.w	sl, sl, #1
 801828a:	d1e0      	bne.n	801824e <_DrawBitmap+0x73e>
 801828c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801828e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018292:	440a      	add	r2, r1
 8018294:	3301      	adds	r3, #1
 8018296:	921f      	str	r2, [sp, #124]	; 0x7c
 8018298:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801829a:	9309      	str	r3, [sp, #36]	; 0x24
 801829c:	429a      	cmp	r2, r3
 801829e:	f73f ae52 	bgt.w	8017f46 <_DrawBitmap+0x436>
 80182a2:	e46e      	b.n	8017b82 <_DrawBitmap+0x72>
 80182a4:	4649      	mov	r1, r9
 80182a6:	4642      	mov	r2, r8
 80182a8:	4658      	mov	r0, fp
 80182aa:	f109 0901 	add.w	r9, r9, #1
 80182ae:	f7ff fa0d 	bl	80176cc <_SetPixelIndex>
 80182b2:	2c04      	cmp	r4, #4
 80182b4:	d010      	beq.n	80182d8 <_DrawBitmap+0x7c8>
 80182b6:	3d01      	subs	r5, #1
 80182b8:	d0e8      	beq.n	801828c <_DrawBitmap+0x77c>
 80182ba:	f1c4 0303 	rsb	r3, r4, #3
 80182be:	3401      	adds	r4, #1
 80182c0:	005a      	lsls	r2, r3, #1
 80182c2:	f1c2 0306 	rsb	r3, r2, #6
 80182c6:	fa47 f303 	asr.w	r3, r7, r3
 80182ca:	4033      	ands	r3, r6
 80182cc:	40d3      	lsrs	r3, r2
 80182ce:	d1e9      	bne.n	80182a4 <_DrawBitmap+0x794>
 80182d0:	2c04      	cmp	r4, #4
 80182d2:	f109 0901 	add.w	r9, r9, #1
 80182d6:	d1ee      	bne.n	80182b6 <_DrawBitmap+0x7a6>
 80182d8:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80182dc:	2400      	movs	r4, #0
 80182de:	f10a 0a01 	add.w	sl, sl, #1
 80182e2:	e7e8      	b.n	80182b6 <_DrawBitmap+0x7a6>
 80182e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182e6:	4692      	mov	sl, r2
 80182e8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80182ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80182ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80182f0:	b933      	cbnz	r3, 8018300 <_DrawBitmap+0x7f0>
 80182f2:	e03b      	b.n	801836c <_DrawBitmap+0x85c>
 80182f4:	2c02      	cmp	r4, #2
 80182f6:	f109 0901 	add.w	r9, r9, #1
 80182fa:	d018      	beq.n	801832e <_DrawBitmap+0x81e>
 80182fc:	3d01      	subs	r5, #1
 80182fe:	d01e      	beq.n	801833e <_DrawBitmap+0x82e>
 8018300:	f1c4 0301 	rsb	r3, r4, #1
 8018304:	3401      	adds	r4, #1
 8018306:	009a      	lsls	r2, r3, #2
 8018308:	f1c2 0304 	rsb	r3, r2, #4
 801830c:	fa47 f303 	asr.w	r3, r7, r3
 8018310:	4033      	ands	r3, r6
 8018312:	40d3      	lsrs	r3, r2
 8018314:	d0ee      	beq.n	80182f4 <_DrawBitmap+0x7e4>
 8018316:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018318:	4649      	mov	r1, r9
 801831a:	4658      	mov	r0, fp
 801831c:	f109 0901 	add.w	r9, r9, #1
 8018320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018324:	4642      	mov	r2, r8
 8018326:	f7ff f9d1 	bl	80176cc <_SetPixelIndex>
 801832a:	2c02      	cmp	r4, #2
 801832c:	d1e6      	bne.n	80182fc <_DrawBitmap+0x7ec>
 801832e:	3d01      	subs	r5, #1
 8018330:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8018334:	f04f 0400 	mov.w	r4, #0
 8018338:	f10a 0a01 	add.w	sl, sl, #1
 801833c:	d1e0      	bne.n	8018300 <_DrawBitmap+0x7f0>
 801833e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018340:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018344:	440a      	add	r2, r1
 8018346:	3301      	adds	r3, #1
 8018348:	921f      	str	r2, [sp, #124]	; 0x7c
 801834a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801834c:	9309      	str	r3, [sp, #36]	; 0x24
 801834e:	429a      	cmp	r2, r3
 8018350:	f73f ae21 	bgt.w	8017f96 <_DrawBitmap+0x486>
 8018354:	e415      	b.n	8017b82 <_DrawBitmap+0x72>
 8018356:	4649      	mov	r1, r9
 8018358:	4642      	mov	r2, r8
 801835a:	4658      	mov	r0, fp
 801835c:	f109 0901 	add.w	r9, r9, #1
 8018360:	f7ff f9b4 	bl	80176cc <_SetPixelIndex>
 8018364:	2c02      	cmp	r4, #2
 8018366:	d010      	beq.n	801838a <_DrawBitmap+0x87a>
 8018368:	3d01      	subs	r5, #1
 801836a:	d0e8      	beq.n	801833e <_DrawBitmap+0x82e>
 801836c:	f1c4 0301 	rsb	r3, r4, #1
 8018370:	3401      	adds	r4, #1
 8018372:	009a      	lsls	r2, r3, #2
 8018374:	f1c2 0304 	rsb	r3, r2, #4
 8018378:	fa47 f303 	asr.w	r3, r7, r3
 801837c:	4033      	ands	r3, r6
 801837e:	40d3      	lsrs	r3, r2
 8018380:	d1e9      	bne.n	8018356 <_DrawBitmap+0x846>
 8018382:	2c02      	cmp	r4, #2
 8018384:	f109 0901 	add.w	r9, r9, #1
 8018388:	d1ee      	bne.n	8018368 <_DrawBitmap+0x858>
 801838a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801838e:	2400      	movs	r4, #0
 8018390:	f10a 0a01 	add.w	sl, sl, #1
 8018394:	e7e8      	b.n	8018368 <_DrawBitmap+0x858>
 8018396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018398:	4692      	mov	sl, r2
 801839a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801839c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80183a0:	9c08      	ldr	r4, [sp, #32]
 80183a2:	b35b      	cbz	r3, 80183fc <_DrawBitmap+0x8ec>
 80183a4:	9607      	str	r6, [sp, #28]
 80183a6:	e002      	b.n	80183ae <_DrawBitmap+0x89e>
 80183a8:	f1b9 0901 	subs.w	r9, r9, #1
 80183ac:	d0c7      	beq.n	801833e <_DrawBitmap+0x82e>
 80183ae:	f1c5 0301 	rsb	r3, r5, #1
 80183b2:	9e07      	ldr	r6, [sp, #28]
 80183b4:	3501      	adds	r5, #1
 80183b6:	4621      	mov	r1, r4
 80183b8:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80183bc:	4642      	mov	r2, r8
 80183be:	4658      	mov	r0, fp
 80183c0:	3401      	adds	r4, #1
 80183c2:	f1ce 0304 	rsb	r3, lr, #4
 80183c6:	fa47 f303 	asr.w	r3, r7, r3
 80183ca:	4033      	ands	r3, r6
 80183cc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80183ce:	fa23 f30e 	lsr.w	r3, r3, lr
 80183d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80183d6:	f7ff f979 	bl	80176cc <_SetPixelIndex>
 80183da:	2d02      	cmp	r5, #2
 80183dc:	d1e4      	bne.n	80183a8 <_DrawBitmap+0x898>
 80183de:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80183e2:	2500      	movs	r5, #0
 80183e4:	f10a 0a01 	add.w	sl, sl, #1
 80183e8:	9307      	str	r3, [sp, #28]
 80183ea:	e7dd      	b.n	80183a8 <_DrawBitmap+0x898>
 80183ec:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80183f0:	2500      	movs	r5, #0
 80183f2:	f10a 0a01 	add.w	sl, sl, #1
 80183f6:	f1b9 0901 	subs.w	r9, r9, #1
 80183fa:	d0a0      	beq.n	801833e <_DrawBitmap+0x82e>
 80183fc:	f1c5 0e01 	rsb	lr, r5, #1
 8018400:	3501      	adds	r5, #1
 8018402:	4621      	mov	r1, r4
 8018404:	4642      	mov	r2, r8
 8018406:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801840a:	4658      	mov	r0, fp
 801840c:	3401      	adds	r4, #1
 801840e:	f1ce 0304 	rsb	r3, lr, #4
 8018412:	fa47 f303 	asr.w	r3, r7, r3
 8018416:	4033      	ands	r3, r6
 8018418:	fa23 f30e 	lsr.w	r3, r3, lr
 801841c:	f7ff f956 	bl	80176cc <_SetPixelIndex>
 8018420:	2d02      	cmp	r5, #2
 8018422:	d1e8      	bne.n	80183f6 <_DrawBitmap+0x8e6>
 8018424:	e7e2      	b.n	80183ec <_DrawBitmap+0x8dc>
 8018426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018428:	4692      	mov	sl, r2
 801842a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801842c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8018430:	9c08      	ldr	r4, [sp, #32]
 8018432:	b36b      	cbz	r3, 8018490 <_DrawBitmap+0x980>
 8018434:	9607      	str	r6, [sp, #28]
 8018436:	e003      	b.n	8018440 <_DrawBitmap+0x930>
 8018438:	f1b9 0901 	subs.w	r9, r9, #1
 801843c:	f43f af26 	beq.w	801828c <_DrawBitmap+0x77c>
 8018440:	f1c5 0303 	rsb	r3, r5, #3
 8018444:	9e07      	ldr	r6, [sp, #28]
 8018446:	3501      	adds	r5, #1
 8018448:	4621      	mov	r1, r4
 801844a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 801844e:	4642      	mov	r2, r8
 8018450:	4658      	mov	r0, fp
 8018452:	3401      	adds	r4, #1
 8018454:	f1ce 0306 	rsb	r3, lr, #6
 8018458:	fa47 f303 	asr.w	r3, r7, r3
 801845c:	4033      	ands	r3, r6
 801845e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8018460:	fa23 f30e 	lsr.w	r3, r3, lr
 8018464:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018468:	f7ff f930 	bl	80176cc <_SetPixelIndex>
 801846c:	2d04      	cmp	r5, #4
 801846e:	d1e3      	bne.n	8018438 <_DrawBitmap+0x928>
 8018470:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018474:	2500      	movs	r5, #0
 8018476:	f10a 0a01 	add.w	sl, sl, #1
 801847a:	9307      	str	r3, [sp, #28]
 801847c:	e7dc      	b.n	8018438 <_DrawBitmap+0x928>
 801847e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8018482:	2500      	movs	r5, #0
 8018484:	f10a 0a01 	add.w	sl, sl, #1
 8018488:	f1b9 0901 	subs.w	r9, r9, #1
 801848c:	f43f aefe 	beq.w	801828c <_DrawBitmap+0x77c>
 8018490:	f1c5 0e03 	rsb	lr, r5, #3
 8018494:	3501      	adds	r5, #1
 8018496:	4621      	mov	r1, r4
 8018498:	4642      	mov	r2, r8
 801849a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801849e:	4658      	mov	r0, fp
 80184a0:	3401      	adds	r4, #1
 80184a2:	f1ce 0306 	rsb	r3, lr, #6
 80184a6:	fa47 f303 	asr.w	r3, r7, r3
 80184aa:	4033      	ands	r3, r6
 80184ac:	fa23 f30e 	lsr.w	r3, r3, lr
 80184b0:	f7ff f90c 	bl	80176cc <_SetPixelIndex>
 80184b4:	2d04      	cmp	r5, #4
 80184b6:	d1e7      	bne.n	8018488 <_DrawBitmap+0x978>
 80184b8:	e7e1      	b.n	801847e <_DrawBitmap+0x96e>
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	f77f ae9a 	ble.w	80181f4 <_DrawBitmap+0x6e4>
 80184c0:	465c      	mov	r4, fp
 80184c2:	7823      	ldrb	r3, [r4, #0]
 80184c4:	19a1      	adds	r1, r4, r6
 80184c6:	3401      	adds	r4, #1
 80184c8:	463a      	mov	r2, r7
 80184ca:	4648      	mov	r0, r9
 80184cc:	f7ff f8fe 	bl	80176cc <_SetPixelIndex>
 80184d0:	42ac      	cmp	r4, r5
 80184d2:	d1f6      	bne.n	80184c2 <_DrawBitmap+0x9b2>
 80184d4:	e68e      	b.n	80181f4 <_DrawBitmap+0x6e4>
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f77f ae8c 	ble.w	80181f4 <_DrawBitmap+0x6e4>
 80184dc:	465c      	mov	r4, fp
 80184de:	e002      	b.n	80184e6 <_DrawBitmap+0x9d6>
 80184e0:	42ac      	cmp	r4, r5
 80184e2:	f43f ae87 	beq.w	80181f4 <_DrawBitmap+0x6e4>
 80184e6:	1931      	adds	r1, r6, r4
 80184e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d0f7      	beq.n	80184e0 <_DrawBitmap+0x9d0>
 80184f0:	463a      	mov	r2, r7
 80184f2:	4648      	mov	r0, r9
 80184f4:	f7ff f8ea 	bl	80176cc <_SetPixelIndex>
 80184f8:	e7f2      	b.n	80184e0 <_DrawBitmap+0x9d0>
 80184fa:	bf00      	nop

080184fc <GUI__AlphaPreserveTrans>:
 80184fc:	4b09      	ldr	r3, [pc, #36]	; (8018524 <GUI__AlphaPreserveTrans+0x28>)
 80184fe:	b510      	push	{r4, lr}
 8018500:	781c      	ldrb	r4, [r3, #0]
 8018502:	b938      	cbnz	r0, 8018514 <GUI__AlphaPreserveTrans+0x18>
 8018504:	4602      	mov	r2, r0
 8018506:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801850a:	701a      	strb	r2, [r3, #0]
 801850c:	f002 faf2 	bl	801aaf4 <LCD_AA_SetOrMask>
 8018510:	4620      	mov	r0, r4
 8018512:	bd10      	pop	{r4, pc}
 8018514:	2201      	movs	r2, #1
 8018516:	2000      	movs	r0, #0
 8018518:	701a      	strb	r2, [r3, #0]
 801851a:	f002 faeb 	bl	801aaf4 <LCD_AA_SetOrMask>
 801851e:	4620      	mov	r0, r4
 8018520:	bd10      	pop	{r4, pc}
 8018522:	bf00      	nop
 8018524:	200467b8 	.word	0x200467b8

08018528 <GUI_TOUCH_StoreStateEx>:
 8018528:	b570      	push	{r4, r5, r6, lr}
 801852a:	4c13      	ldr	r4, [pc, #76]	; (8018578 <GUI_TOUCH_StoreStateEx+0x50>)
 801852c:	b084      	sub	sp, #16
 801852e:	220c      	movs	r2, #12
 8018530:	4606      	mov	r6, r0
 8018532:	4621      	mov	r1, r4
 8018534:	f00c ff24 	bl	8025380 <memcmp>
 8018538:	b178      	cbz	r0, 801855a <GUI_TOUCH_StoreStateEx+0x32>
 801853a:	68e3      	ldr	r3, [r4, #12]
 801853c:	b1a3      	cbz	r3, 8018568 <GUI_TOUCH_StoreStateEx+0x40>
 801853e:	ad01      	add	r5, sp, #4
 8018540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8018544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018548:	a902      	add	r1, sp, #8
 801854a:	4628      	mov	r0, r5
 801854c:	4798      	blx	r3
 801854e:	4603      	mov	r3, r0
 8018550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018558:	b10b      	cbz	r3, 801855e <GUI_TOUCH_StoreStateEx+0x36>
 801855a:	b004      	add	sp, #16
 801855c:	bd70      	pop	{r4, r5, r6, pc}
 801855e:	4628      	mov	r0, r5
 8018560:	f00a fd82 	bl	8023068 <GUI_PID_StoreState>
 8018564:	b004      	add	sp, #16
 8018566:	bd70      	pop	{r4, r5, r6, pc}
 8018568:	4630      	mov	r0, r6
 801856a:	f00a fd7d 	bl	8023068 <GUI_PID_StoreState>
 801856e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8018572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018576:	e7f0      	b.n	801855a <GUI_TOUCH_StoreStateEx+0x32>
 8018578:	20000374 	.word	0x20000374

0801857c <_OnExit>:
 801857c:	b510      	push	{r4, lr}
 801857e:	4c03      	ldr	r4, [pc, #12]	; (801858c <_OnExit+0x10>)
 8018580:	6820      	ldr	r0, [r4, #0]
 8018582:	f7fa fad3 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8018586:	2300      	movs	r3, #0
 8018588:	6023      	str	r3, [r4, #0]
 801858a:	bd10      	pop	{r4, pc}
 801858c:	20000384 	.word	0x20000384

08018590 <GUI_Unlock>:
 8018590:	4a03      	ldr	r2, [pc, #12]	; (80185a0 <GUI_Unlock+0x10>)
 8018592:	6853      	ldr	r3, [r2, #4]
 8018594:	3b01      	subs	r3, #1
 8018596:	6053      	str	r3, [r2, #4]
 8018598:	b103      	cbz	r3, 801859c <GUI_Unlock+0xc>
 801859a:	4770      	bx	lr
 801859c:	f7f6 beec 	b.w	800f378 <GUI_X_Unlock>
 80185a0:	20000384 	.word	0x20000384

080185a4 <GUI_Lock>:
 80185a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185a8:	4d22      	ldr	r5, [pc, #136]	; (8018634 <GUI_Lock+0x90>)
 80185aa:	686b      	ldr	r3, [r5, #4]
 80185ac:	b123      	cbz	r3, 80185b8 <GUI_Lock+0x14>
 80185ae:	f7f6 fef1 	bl	800f394 <GUI_X_GetTaskId>
 80185b2:	68ab      	ldr	r3, [r5, #8]
 80185b4:	4298      	cmp	r0, r3
 80185b6:	d004      	beq.n	80185c2 <GUI_Lock+0x1e>
 80185b8:	f7f6 fee4 	bl	800f384 <GUI_X_Lock>
 80185bc:	f7f6 feea 	bl	800f394 <GUI_X_GetTaskId>
 80185c0:	60a8      	str	r0, [r5, #8]
 80185c2:	686b      	ldr	r3, [r5, #4]
 80185c4:	3301      	adds	r3, #1
 80185c6:	2b01      	cmp	r3, #1
 80185c8:	606b      	str	r3, [r5, #4]
 80185ca:	d001      	beq.n	80185d0 <GUI_Lock+0x2c>
 80185cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d0:	4f19      	ldr	r7, [pc, #100]	; (8018638 <GUI_Lock+0x94>)
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	dd28      	ble.n	801862a <GUI_Lock+0x86>
 80185d8:	2400      	movs	r4, #0
 80185da:	4626      	mov	r6, r4
 80185dc:	e005      	b.n	80185ea <GUI_Lock+0x46>
 80185de:	b33a      	cbz	r2, 8018630 <GUI_Lock+0x8c>
 80185e0:	3601      	adds	r6, #1
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	347c      	adds	r4, #124	; 0x7c
 80185e6:	429e      	cmp	r6, r3
 80185e8:	da1f      	bge.n	801862a <GUI_Lock+0x86>
 80185ea:	f7f6 fed3 	bl	800f394 <GUI_X_GetTaskId>
 80185ee:	682b      	ldr	r3, [r5, #0]
 80185f0:	591a      	ldr	r2, [r3, r4]
 80185f2:	4423      	add	r3, r4
 80185f4:	4290      	cmp	r0, r2
 80185f6:	d1f2      	bne.n	80185de <GUI_Lock+0x3a>
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	42b3      	cmp	r3, r6
 80185fc:	d0e6      	beq.n	80185cc <GUI_Lock+0x28>
 80185fe:	2b00      	cmp	r3, #0
 8018600:	db10      	blt.n	8018624 <GUI_Lock+0x80>
 8018602:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8018606:	682a      	ldr	r2, [r5, #0]
 8018608:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 801860c:	f7fc f920 	bl	8014850 <GUI_DEVICE_UnlinkTaskDevices>
 8018610:	682a      	ldr	r2, [r5, #0]
 8018612:	4b0a      	ldr	r3, [pc, #40]	; (801863c <GUI_Lock+0x98>)
 8018614:	4414      	add	r4, r2
 8018616:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 801861a:	1d22      	adds	r2, r4, #4
 801861c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 801861e:	601a      	str	r2, [r3, #0]
 8018620:	f7fc f918 	bl	8014854 <GUI_DEVICE_LinkDevices>
 8018624:	607e      	str	r6, [r7, #4]
 8018626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801862a:	2400      	movs	r4, #0
 801862c:	4626      	mov	r6, r4
 801862e:	e7e3      	b.n	80185f8 <GUI_Lock+0x54>
 8018630:	6018      	str	r0, [r3, #0]
 8018632:	e7e1      	b.n	80185f8 <GUI_Lock+0x54>
 8018634:	20000384 	.word	0x20000384
 8018638:	20000038 	.word	0x20000038
 801863c:	20000018 	.word	0x20000018

08018640 <GUITASK_Init>:
 8018640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018642:	4f18      	ldr	r7, [pc, #96]	; (80186a4 <GUITASK_Init+0x64>)
 8018644:	4b18      	ldr	r3, [pc, #96]	; (80186a8 <GUITASK_Init+0x68>)
 8018646:	4638      	mov	r0, r7
 8018648:	4e18      	ldr	r6, [pc, #96]	; (80186ac <GUITASK_Init+0x6c>)
 801864a:	f840 3f0c 	str.w	r3, [r0, #12]!
 801864e:	f7fb ff73 	bl	8014538 <GUI__RegisterExit>
 8018652:	6834      	ldr	r4, [r6, #0]
 8018654:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8018658:	00a4      	lsls	r4, r4, #2
 801865a:	4620      	mov	r0, r4
 801865c:	f7fa fa70 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 8018660:	4b13      	ldr	r3, [pc, #76]	; (80186b0 <GUITASK_Init+0x70>)
 8018662:	4622      	mov	r2, r4
 8018664:	2100      	movs	r1, #0
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	6038      	str	r0, [r7, #0]
 801866a:	4798      	blx	r3
 801866c:	f04f 33ff 	mov.w	r3, #4294967295
 8018670:	6073      	str	r3, [r6, #4]
 8018672:	f7f6 fe69 	bl	800f348 <GUI_X_InitOS>
 8018676:	6833      	ldr	r3, [r6, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	dd0f      	ble.n	801869c <GUITASK_Init+0x5c>
 801867c:	2400      	movs	r4, #0
 801867e:	4625      	mov	r5, r4
 8018680:	e003      	b.n	801868a <GUITASK_Init+0x4a>
 8018682:	b162      	cbz	r2, 801869e <GUITASK_Init+0x5e>
 8018684:	6833      	ldr	r3, [r6, #0]
 8018686:	429d      	cmp	r5, r3
 8018688:	da08      	bge.n	801869c <GUITASK_Init+0x5c>
 801868a:	f7f6 fe83 	bl	800f394 <GUI_X_GetTaskId>
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	3501      	adds	r5, #1
 8018692:	591a      	ldr	r2, [r3, r4]
 8018694:	4423      	add	r3, r4
 8018696:	347c      	adds	r4, #124	; 0x7c
 8018698:	4290      	cmp	r0, r2
 801869a:	d1f2      	bne.n	8018682 <GUITASK_Init+0x42>
 801869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801869e:	6018      	str	r0, [r3, #0]
 80186a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186a2:	bf00      	nop
 80186a4:	20000384 	.word	0x20000384
 80186a8:	0801857d 	.word	0x0801857d
 80186ac:	20000038 	.word	0x20000038
 80186b0:	20000050 	.word	0x20000050

080186b4 <GUITASK_CopyContext>:
 80186b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b8:	4f24      	ldr	r7, [pc, #144]	; (801874c <GUITASK_CopyContext+0x98>)
 80186ba:	683d      	ldr	r5, [r7, #0]
 80186bc:	2d00      	cmp	r5, #0
 80186be:	dd3f      	ble.n	8018740 <GUITASK_CopyContext+0x8c>
 80186c0:	4e23      	ldr	r6, [pc, #140]	; (8018750 <GUITASK_CopyContext+0x9c>)
 80186c2:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 80186c6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8018754 <GUITASK_CopyContext+0xa0>
 80186ca:	f04f 0a00 	mov.w	sl, #0
 80186ce:	6834      	ldr	r4, [r6, #0]
 80186d0:	f8d8 9000 	ldr.w	r9, [r8]
 80186d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80186d8:	340c      	adds	r4, #12
 80186da:	350c      	adds	r5, #12
 80186dc:	f1a4 0308 	sub.w	r3, r4, #8
 80186e0:	2274      	movs	r2, #116	; 0x74
 80186e2:	4649      	mov	r1, r9
 80186e4:	4618      	mov	r0, r3
 80186e6:	f00c fe5a 	bl	802539e <memcpy>
 80186ea:	1f22      	subs	r2, r4, #4
 80186ec:	6320      	str	r0, [r4, #48]	; 0x30
 80186ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80186f0:	f844 ac0c 	str.w	sl, [r4, #-12]
 80186f4:	6362      	str	r2, [r4, #52]	; 0x34
 80186f6:	60e4      	str	r4, [r4, #12]
 80186f8:	347c      	adds	r4, #124	; 0x7c
 80186fa:	42a5      	cmp	r5, r4
 80186fc:	d1ee      	bne.n	80186dc <GUITASK_CopyContext+0x28>
 80186fe:	2400      	movs	r4, #0
 8018700:	4625      	mov	r5, r4
 8018702:	e003      	b.n	801870c <GUITASK_CopyContext+0x58>
 8018704:	b182      	cbz	r2, 8018728 <GUITASK_CopyContext+0x74>
 8018706:	683a      	ldr	r2, [r7, #0]
 8018708:	4295      	cmp	r5, r2
 801870a:	da13      	bge.n	8018734 <GUITASK_CopyContext+0x80>
 801870c:	f7f6 fe42 	bl	800f394 <GUI_X_GetTaskId>
 8018710:	6833      	ldr	r3, [r6, #0]
 8018712:	3501      	adds	r5, #1
 8018714:	591a      	ldr	r2, [r3, r4]
 8018716:	1919      	adds	r1, r3, r4
 8018718:	347c      	adds	r4, #124	; 0x7c
 801871a:	4290      	cmp	r0, r2
 801871c:	d1f2      	bne.n	8018704 <GUITASK_CopyContext+0x50>
 801871e:	3104      	adds	r1, #4
 8018720:	f8c8 1000 	str.w	r1, [r8]
 8018724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018728:	6008      	str	r0, [r1, #0]
 801872a:	3104      	adds	r1, #4
 801872c:	f8c8 1000 	str.w	r1, [r8]
 8018730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018734:	4619      	mov	r1, r3
 8018736:	3104      	adds	r1, #4
 8018738:	f8c8 1000 	str.w	r1, [r8]
 801873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018740:	4b03      	ldr	r3, [pc, #12]	; (8018750 <GUITASK_CopyContext+0x9c>)
 8018742:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8018754 <GUITASK_CopyContext+0xa0>
 8018746:	6819      	ldr	r1, [r3, #0]
 8018748:	e7e9      	b.n	801871e <GUITASK_CopyContext+0x6a>
 801874a:	bf00      	nop
 801874c:	20000038 	.word	0x20000038
 8018750:	20000384 	.word	0x20000384
 8018754:	20000018 	.word	0x20000018

08018758 <GUI_Delay>:
 8018758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801875c:	4607      	mov	r7, r0
 801875e:	f7f6 fded 	bl	800f33c <GUI_X_GetTime>
 8018762:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80187d0 <GUI_Delay+0x78>
 8018766:	4407      	add	r7, r0
 8018768:	f7f6 fde8 	bl	800f33c <GUI_X_GetTime>
 801876c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80187d4 <GUI_Delay+0x7c>
 8018770:	1a3e      	subs	r6, r7, r0
 8018772:	2e00      	cmp	r6, #0
 8018774:	dd22      	ble.n	80187bc <GUI_Delay+0x64>
 8018776:	f7fb fb53 	bl	8013e20 <GUI_Exec>
 801877a:	f8d9 3000 	ldr.w	r3, [r9]
 801877e:	429e      	cmp	r6, r3
 8018780:	bfa8      	it	ge
 8018782:	461e      	movge	r6, r3
 8018784:	f7ff ff0e 	bl	80185a4 <GUI_Lock>
 8018788:	f8d8 4000 	ldr.w	r4, [r8]
 801878c:	f7fa fc8c 	bl	80130a8 <GUI_ALLOC_Lock>
 8018790:	b1b4      	cbz	r4, 80187c0 <GUI_Delay+0x68>
 8018792:	4625      	mov	r5, r4
 8018794:	f7ff fefc 	bl	8018590 <GUI_Unlock>
 8018798:	3d01      	subs	r5, #1
 801879a:	d1fb      	bne.n	8018794 <GUI_Delay+0x3c>
 801879c:	4630      	mov	r0, r6
 801879e:	f7f6 fdcf 	bl	800f340 <GUI_X_Delay>
 80187a2:	f7ff feff 	bl	80185a4 <GUI_Lock>
 80187a6:	3c01      	subs	r4, #1
 80187a8:	d1fb      	bne.n	80187a2 <GUI_Delay+0x4a>
 80187aa:	f7fa fc85 	bl	80130b8 <GUI_ALLOC_Unlock>
 80187ae:	f7ff feef 	bl	8018590 <GUI_Unlock>
 80187b2:	f7f6 fdc3 	bl	800f33c <GUI_X_GetTime>
 80187b6:	1a3e      	subs	r6, r7, r0
 80187b8:	2e00      	cmp	r6, #0
 80187ba:	dcdc      	bgt.n	8018776 <GUI_Delay+0x1e>
 80187bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187c0:	4630      	mov	r0, r6
 80187c2:	f7f6 fdbd 	bl	800f340 <GUI_X_Delay>
 80187c6:	f7fa fc77 	bl	80130b8 <GUI_ALLOC_Unlock>
 80187ca:	f7ff fee1 	bl	8018590 <GUI_Unlock>
 80187ce:	e7f0      	b.n	80187b2 <GUI_Delay+0x5a>
 80187d0:	20000040 	.word	0x20000040
 80187d4:	20000388 	.word	0x20000388

080187d8 <GUI_UC__GetCharCodeInc>:
 80187d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187da:	4e08      	ldr	r6, [pc, #32]	; (80187fc <GUI_UC__GetCharCodeInc+0x24>)
 80187dc:	4605      	mov	r5, r0
 80187de:	6804      	ldr	r4, [r0, #0]
 80187e0:	6833      	ldr	r3, [r6, #0]
 80187e2:	4620      	mov	r0, r4
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	4798      	blx	r3
 80187e8:	6833      	ldr	r3, [r6, #0]
 80187ea:	4607      	mov	r7, r0
 80187ec:	4620      	mov	r0, r4
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	4798      	blx	r3
 80187f2:	4404      	add	r4, r0
 80187f4:	4638      	mov	r0, r7
 80187f6:	602c      	str	r4, [r5, #0]
 80187f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187fa:	bf00      	nop
 80187fc:	200467c8 	.word	0x200467c8

08018800 <GUI_UC__NumChars2NumBytes>:
 8018800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018802:	b169      	cbz	r1, 8018820 <GUI_UC__NumChars2NumBytes+0x20>
 8018804:	4605      	mov	r5, r0
 8018806:	460c      	mov	r4, r1
 8018808:	2600      	movs	r6, #0
 801880a:	4f06      	ldr	r7, [pc, #24]	; (8018824 <GUI_UC__NumChars2NumBytes+0x24>)
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	4628      	mov	r0, r5
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	4798      	blx	r3
 8018814:	3c01      	subs	r4, #1
 8018816:	4405      	add	r5, r0
 8018818:	4406      	add	r6, r0
 801881a:	d1f7      	bne.n	801880c <GUI_UC__NumChars2NumBytes+0xc>
 801881c:	4630      	mov	r0, r6
 801881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018820:	460e      	mov	r6, r1
 8018822:	e7fb      	b.n	801881c <GUI_UC__NumChars2NumBytes+0x1c>
 8018824:	200467c8 	.word	0x200467c8

08018828 <GUI__GetNumChars>:
 8018828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882a:	4604      	mov	r4, r0
 801882c:	b188      	cbz	r0, 8018852 <GUI__GetNumChars+0x2a>
 801882e:	2600      	movs	r6, #0
 8018830:	4d09      	ldr	r5, [pc, #36]	; (8018858 <GUI__GetNumChars+0x30>)
 8018832:	e000      	b.n	8018836 <GUI__GetNumChars+0xe>
 8018834:	3601      	adds	r6, #1
 8018836:	682b      	ldr	r3, [r5, #0]
 8018838:	4620      	mov	r0, r4
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4798      	blx	r3
 801883e:	682b      	ldr	r3, [r5, #0]
 8018840:	4607      	mov	r7, r0
 8018842:	4620      	mov	r0, r4
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	4798      	blx	r3
 8018848:	4404      	add	r4, r0
 801884a:	2f00      	cmp	r7, #0
 801884c:	d1f2      	bne.n	8018834 <GUI__GetNumChars+0xc>
 801884e:	4630      	mov	r0, r6
 8018850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018852:	4606      	mov	r6, r0
 8018854:	4630      	mov	r0, r6
 8018856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018858:	200467c8 	.word	0x200467c8

0801885c <_GetCharCode>:
 801885c:	7800      	ldrb	r0, [r0, #0]
 801885e:	4770      	bx	lr

08018860 <_GetCharSize>:
 8018860:	2001      	movs	r0, #1
 8018862:	4770      	bx	lr

08018864 <_CalcSizeOfChar>:
 8018864:	2001      	movs	r0, #1
 8018866:	4770      	bx	lr

08018868 <_Encode>:
 8018868:	7001      	strb	r1, [r0, #0]
 801886a:	2001      	movs	r0, #1
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop

08018870 <GUI_DispDecShift>:
 8018870:	b510      	push	{r4, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	ab04      	add	r3, sp, #16
 8018876:	ac01      	add	r4, sp, #4
 8018878:	f843 4d10 	str.w	r4, [r3, #-16]!
 801887c:	f7fb f99a 	bl	8013bb4 <GUI_AddDecShift>
 8018880:	4620      	mov	r0, r4
 8018882:	f7fc f9ad 	bl	8014be0 <GUI_DispString>
 8018886:	b004      	add	sp, #16
 8018888:	bd10      	pop	{r4, pc}
 801888a:	bf00      	nop

0801888c <GUI_DispSDecShift>:
 801888c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801888e:	b085      	sub	sp, #20
 8018890:	460c      	mov	r4, r1
 8018892:	4617      	mov	r7, r2
 8018894:	ad04      	add	r5, sp, #16
 8018896:	ae01      	add	r6, sp, #4
 8018898:	f845 6d10 	str.w	r6, [r5, #-16]!
 801889c:	4629      	mov	r1, r5
 801889e:	f7fb f97b 	bl	8013b98 <GUI_AddSign>
 80188a2:	2800      	cmp	r0, #0
 80188a4:	dd01      	ble.n	80188aa <GUI_DispSDecShift+0x1e>
 80188a6:	3c01      	subs	r4, #1
 80188a8:	b2e4      	uxtb	r4, r4
 80188aa:	462b      	mov	r3, r5
 80188ac:	463a      	mov	r2, r7
 80188ae:	4621      	mov	r1, r4
 80188b0:	f7fb f980 	bl	8013bb4 <GUI_AddDecShift>
 80188b4:	4630      	mov	r0, r6
 80188b6:	f7fc f993 	bl	8014be0 <GUI_DispString>
 80188ba:	b005      	add	sp, #20
 80188bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188be:	bf00      	nop

080188c0 <GUI_DispFloatFix>:
 80188c0:	b538      	push	{r3, r4, r5, lr}
 80188c2:	4b1e      	ldr	r3, [pc, #120]	; (801893c <GUI_DispFloatFix+0x7c>)
 80188c4:	460c      	mov	r4, r1
 80188c6:	4605      	mov	r5, r0
 80188c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80188cc:	ee07 3a90 	vmov	s15, r3
 80188d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80188d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80188d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80188dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80188e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e4:	d419      	bmi.n	801891a <GUI_DispFloatFix+0x5a>
 80188e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80188ea:	ee17 0a90 	vmov	r0, s15
 80188ee:	f7e7 fdfb 	bl	80004e8 <__aeabi_f2d>
 80188f2:	ec41 0b10 	vmov	d0, r0, r1
 80188f6:	f00d fa73 	bl	8025de0 <floor>
 80188fa:	ec51 0b10 	vmov	r0, r1, d0
 80188fe:	f7e8 f91f 	bl	8000b40 <__aeabi_d2f>
 8018902:	ee07 0a90 	vmov	s15, r0
 8018906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801890a:	4622      	mov	r2, r4
 801890c:	4629      	mov	r1, r5
 801890e:	ee17 0a90 	vmov	r0, s15
 8018912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018916:	f7ff bfab 	b.w	8018870 <GUI_DispDecShift>
 801891a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801891e:	ee17 0a90 	vmov	r0, s15
 8018922:	f7e7 fde1 	bl	80004e8 <__aeabi_f2d>
 8018926:	ec41 0b10 	vmov	d0, r0, r1
 801892a:	f00d f9d5 	bl	8025cd8 <ceil>
 801892e:	ec51 0b10 	vmov	r0, r1, d0
 8018932:	f7e8 f905 	bl	8000b40 <__aeabi_d2f>
 8018936:	ee07 0a90 	vmov	s15, r0
 801893a:	e7e4      	b.n	8018906 <GUI_DispFloatFix+0x46>
 801893c:	08027284 	.word	0x08027284

08018940 <GUI_DispFloatMin>:
 8018940:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018944:	b530      	push	{r4, r5, lr}
 8018946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801894a:	4604      	mov	r4, r0
 801894c:	ed2d 8b02 	vpush	{d8}
 8018950:	b083      	sub	sp, #12
 8018952:	d15d      	bne.n	8018a10 <GUI_DispFloatMin+0xd0>
 8018954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018958:	eddf 8a7f 	vldr	s17, [pc, #508]	; 8018b58 <GUI_DispFloatMin+0x218>
 801895c:	4b7f      	ldr	r3, [pc, #508]	; (8018b5c <GUI_DispFloatMin+0x21c>)
 801895e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018962:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018966:	ee00 3a10 	vmov	s0, r3
 801896a:	eeb8 8a40 	vcvt.f32.u32	s16, s0
 801896e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801897a:	f100 80b6 	bmi.w	8018aea <GUI_DispFloatMin+0x1aa>
 801897e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018982:	ee17 0a90 	vmov	r0, s15
 8018986:	f7e7 fdaf 	bl	80004e8 <__aeabi_f2d>
 801898a:	ec41 0b10 	vmov	d0, r0, r1
 801898e:	f00d fa27 	bl	8025de0 <floor>
 8018992:	ec51 0b10 	vmov	r0, r1, d0
 8018996:	f7e8 f8d3 	bl	8000b40 <__aeabi_d2f>
 801899a:	ee07 0a90 	vmov	s15, r0
 801899e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80189a2:	ee17 0a90 	vmov	r0, s15
 80189a6:	edcd 7a00 	vstr	s15, [sp]
 80189aa:	f7fb f8ab 	bl	8013b04 <GUI_Long2Len>
 80189ae:	ee28 0a28 	vmul.f32	s0, s16, s17
 80189b2:	2c00      	cmp	r4, #0
 80189b4:	bf0c      	ite	eq
 80189b6:	4623      	moveq	r3, r4
 80189b8:	1c63      	addne	r3, r4, #1
 80189ba:	1b00      	subs	r0, r0, r4
 80189bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80189c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80189c4:	2800      	cmp	r0, #0
 80189c6:	bfac      	ite	ge
 80189c8:	181d      	addge	r5, r3, r0
 80189ca:	1c1d      	addlt	r5, r3, #0
 80189cc:	b2ed      	uxtb	r5, r5
 80189ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d2:	f100 8095 	bmi.w	8018b00 <GUI_DispFloatMin+0x1c0>
 80189d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80189da:	ee17 0a90 	vmov	r0, s15
 80189de:	f7e7 fd83 	bl	80004e8 <__aeabi_f2d>
 80189e2:	ec41 0b10 	vmov	d0, r0, r1
 80189e6:	f00d f9fb 	bl	8025de0 <floor>
 80189ea:	ec51 0b10 	vmov	r0, r1, d0
 80189ee:	f7e8 f8a7 	bl	8000b40 <__aeabi_d2f>
 80189f2:	ee07 0a90 	vmov	s15, r0
 80189f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80189fa:	4622      	mov	r2, r4
 80189fc:	4629      	mov	r1, r5
 80189fe:	ee17 0a90 	vmov	r0, s15
 8018a02:	b003      	add	sp, #12
 8018a04:	ecbd 8b02 	vpop	{d8}
 8018a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a0c:	f7ff bf30 	b.w	8018870 <GUI_DispDecShift>
 8018a10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018a14:	eef0 8a40 	vmov.f32	s17, s0
 8018a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a1c:	db2c      	blt.n	8018a78 <GUI_DispFloatMin+0x138>
 8018a1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018a22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2a:	d525      	bpl.n	8018a78 <GUI_DispFloatMin+0x138>
 8018a2c:	eef0 7ac0 	vabs.f32	s15, s0
 8018a30:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018b60 <GUI_DispFloatMin+0x220>
 8018a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	d04e      	beq.n	8018ae0 <GUI_DispFloatMin+0x1a0>
 8018a42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018a46:	2300      	movs	r3, #0
 8018a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a4c:	3301      	adds	r3, #1
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8018a54:	ee16 2a90 	vmov	r2, s13
 8018a58:	2a00      	cmp	r2, #0
 8018a5a:	d0f5      	beq.n	8018a48 <GUI_DispFloatMin+0x108>
 8018a5c:	42a3      	cmp	r3, r4
 8018a5e:	dd3f      	ble.n	8018ae0 <GUI_DispFloatMin+0x1a0>
 8018a60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018a64:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a6c:	db5e      	blt.n	8018b2c <GUI_DispFloatMin+0x1ec>
 8018a6e:	2c00      	cmp	r4, #0
 8018a70:	d06f      	beq.n	8018b52 <GUI_DispFloatMin+0x212>
 8018a72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018a76:	e771      	b.n	801895c <GUI_DispFloatMin+0x1c>
 8018a78:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a80:	d52b      	bpl.n	8018ada <GUI_DispFloatMin+0x19a>
 8018a82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018a86:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8e:	dd24      	ble.n	8018ada <GUI_DispFloatMin+0x19a>
 8018a90:	eef0 7ae8 	vabs.f32	s15, s17
 8018a94:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8018b60 <GUI_DispFloatMin+0x220>
 8018a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa4:	d03d      	beq.n	8018b22 <GUI_DispFloatMin+0x1e2>
 8018aa6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018aaa:	2300      	movs	r3, #0
 8018aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018ab0:	3301      	adds	r3, #1
 8018ab2:	b2db      	uxtb	r3, r3
 8018ab4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8018ab8:	ee16 2a90 	vmov	r2, s13
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	d0f5      	beq.n	8018aac <GUI_DispFloatMin+0x16c>
 8018ac0:	42a3      	cmp	r3, r4
 8018ac2:	dd2e      	ble.n	8018b22 <GUI_DispFloatMin+0x1e2>
 8018ac4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8018ac8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ad0:	d83c      	bhi.n	8018b4c <GUI_DispFloatMin+0x20c>
 8018ad2:	2c00      	cmp	r4, #0
 8018ad4:	d1cd      	bne.n	8018a72 <GUI_DispFloatMin+0x132>
 8018ad6:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8018ada:	eef0 7a68 	vmov.f32	s15, s17
 8018ade:	e73d      	b.n	801895c <GUI_DispFloatMin+0x1c>
 8018ae0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018ae4:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8018ae8:	e738      	b.n	801895c <GUI_DispFloatMin+0x1c>
 8018aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018aee:	ee17 0a90 	vmov	r0, s15
 8018af2:	f7e7 fcf9 	bl	80004e8 <__aeabi_f2d>
 8018af6:	ec41 0b10 	vmov	d0, r0, r1
 8018afa:	f00d f8ed 	bl	8025cd8 <ceil>
 8018afe:	e748      	b.n	8018992 <GUI_DispFloatMin+0x52>
 8018b00:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018b04:	ee17 0a90 	vmov	r0, s15
 8018b08:	f7e7 fcee 	bl	80004e8 <__aeabi_f2d>
 8018b0c:	ec41 0b10 	vmov	d0, r0, r1
 8018b10:	f00d f8e2 	bl	8025cd8 <ceil>
 8018b14:	ec51 0b10 	vmov	r0, r1, d0
 8018b18:	f7e8 f812 	bl	8000b40 <__aeabi_d2f>
 8018b1c:	ee07 0a90 	vmov	s15, r0
 8018b20:	e769      	b.n	80189f6 <GUI_DispFloatMin+0xb6>
 8018b22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018b26:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018b2a:	e717      	b.n	801895c <GUI_DispFloatMin+0x1c>
 8018b2c:	2c00      	cmp	r4, #0
 8018b2e:	f47f af11 	bne.w	8018954 <GUI_DispFloatMin+0x14>
 8018b32:	eddf 8a09 	vldr	s17, [pc, #36]	; 8018b58 <GUI_DispFloatMin+0x218>
 8018b36:	4b09      	ldr	r3, [pc, #36]	; (8018b5c <GUI_DispFloatMin+0x21c>)
 8018b38:	2200      	movs	r2, #0
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	4610      	mov	r0, r2
 8018b3e:	9200      	str	r2, [sp, #0]
 8018b40:	ee07 3a90 	vmov	s15, r3
 8018b44:	9301      	str	r3, [sp, #4]
 8018b46:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8018b4a:	e72e      	b.n	80189aa <GUI_DispFloatMin+0x6a>
 8018b4c:	2c00      	cmp	r4, #0
 8018b4e:	d0f0      	beq.n	8018b32 <GUI_DispFloatMin+0x1f2>
 8018b50:	e78f      	b.n	8018a72 <GUI_DispFloatMin+0x132>
 8018b52:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018b56:	e7ee      	b.n	8018b36 <GUI_DispFloatMin+0x1f6>
 8018b58:	00000000 	.word	0x00000000
 8018b5c:	08027284 	.word	0x08027284
 8018b60:	3089705f 	.word	0x3089705f

08018b64 <GUI_DispFloat>:
 8018b64:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018b68:	b538      	push	{r3, r4, r5, lr}
 8018b6a:	ed2d 8b02 	vpush	{d8}
 8018b6e:	eeb0 8a40 	vmov.f32	s16, s0
 8018b72:	4605      	mov	r5, r0
 8018b74:	ee17 0a90 	vmov	r0, s15
 8018b78:	f7fa ffc4 	bl	8013b04 <GUI_Long2Len>
 8018b7c:	1a28      	subs	r0, r5, r0
 8018b7e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b86:	d536      	bpl.n	8018bf6 <GUI_DispFloat+0x92>
 8018b88:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018b8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b94:	dd2f      	ble.n	8018bf6 <GUI_DispFloat+0x92>
 8018b96:	1e84      	subs	r4, r0, #2
 8018b98:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8018b9c:	4b1f      	ldr	r3, [pc, #124]	; (8018c1c <GUI_DispFloat+0xb8>)
 8018b9e:	b2e4      	uxtb	r4, r4
 8018ba0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018ba4:	ee07 3a90 	vmov	s15, r3
 8018ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018bac:	ee27 0a88 	vmul.f32	s0, s15, s16
 8018bb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018bb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bbc:	d41d      	bmi.n	8018bfa <GUI_DispFloat+0x96>
 8018bbe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018bc2:	ee17 0a90 	vmov	r0, s15
 8018bc6:	f7e7 fc8f 	bl	80004e8 <__aeabi_f2d>
 8018bca:	ec41 0b10 	vmov	d0, r0, r1
 8018bce:	f00d f907 	bl	8025de0 <floor>
 8018bd2:	ec51 0b10 	vmov	r0, r1, d0
 8018bd6:	f7e7 ffb3 	bl	8000b40 <__aeabi_d2f>
 8018bda:	ee07 0a90 	vmov	s15, r0
 8018bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018be2:	4622      	mov	r2, r4
 8018be4:	4629      	mov	r1, r5
 8018be6:	ecbd 8b02 	vpop	{d8}
 8018bea:	ee17 0a90 	vmov	r0, s15
 8018bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018bf2:	f7ff be3d 	b.w	8018870 <GUI_DispDecShift>
 8018bf6:	1e44      	subs	r4, r0, #1
 8018bf8:	e7ce      	b.n	8018b98 <GUI_DispFloat+0x34>
 8018bfa:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018bfe:	ee17 0a90 	vmov	r0, s15
 8018c02:	f7e7 fc71 	bl	80004e8 <__aeabi_f2d>
 8018c06:	ec41 0b10 	vmov	d0, r0, r1
 8018c0a:	f00d f865 	bl	8025cd8 <ceil>
 8018c0e:	ec51 0b10 	vmov	r0, r1, d0
 8018c12:	f7e7 ff95 	bl	8000b40 <__aeabi_d2f>
 8018c16:	ee07 0a90 	vmov	s15, r0
 8018c1a:	e7e0      	b.n	8018bde <GUI_DispFloat+0x7a>
 8018c1c:	08027284 	.word	0x08027284

08018c20 <GUI_DispSFloatFix>:
 8018c20:	b538      	push	{r3, r4, r5, lr}
 8018c22:	4b1e      	ldr	r3, [pc, #120]	; (8018c9c <GUI_DispSFloatFix+0x7c>)
 8018c24:	460c      	mov	r4, r1
 8018c26:	4605      	mov	r5, r0
 8018c28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c2c:	ee07 3a90 	vmov	s15, r3
 8018c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018c34:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018c38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018c3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c44:	d419      	bmi.n	8018c7a <GUI_DispSFloatFix+0x5a>
 8018c46:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018c4a:	ee17 0a90 	vmov	r0, s15
 8018c4e:	f7e7 fc4b 	bl	80004e8 <__aeabi_f2d>
 8018c52:	ec41 0b10 	vmov	d0, r0, r1
 8018c56:	f00d f8c3 	bl	8025de0 <floor>
 8018c5a:	ec51 0b10 	vmov	r0, r1, d0
 8018c5e:	f7e7 ff6f 	bl	8000b40 <__aeabi_d2f>
 8018c62:	ee07 0a90 	vmov	s15, r0
 8018c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018c6a:	4622      	mov	r2, r4
 8018c6c:	4629      	mov	r1, r5
 8018c6e:	ee17 0a90 	vmov	r0, s15
 8018c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c76:	f7ff be09 	b.w	801888c <GUI_DispSDecShift>
 8018c7a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018c7e:	ee17 0a90 	vmov	r0, s15
 8018c82:	f7e7 fc31 	bl	80004e8 <__aeabi_f2d>
 8018c86:	ec41 0b10 	vmov	d0, r0, r1
 8018c8a:	f00d f825 	bl	8025cd8 <ceil>
 8018c8e:	ec51 0b10 	vmov	r0, r1, d0
 8018c92:	f7e7 ff55 	bl	8000b40 <__aeabi_d2f>
 8018c96:	ee07 0a90 	vmov	s15, r0
 8018c9a:	e7e4      	b.n	8018c66 <GUI_DispSFloatFix+0x46>
 8018c9c:	08027284 	.word	0x08027284

08018ca0 <GUI_DispSFloatMin>:
 8018ca0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018ca4:	b530      	push	{r4, r5, lr}
 8018ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018caa:	4605      	mov	r5, r0
 8018cac:	ed2d 8b02 	vpush	{d8}
 8018cb0:	b083      	sub	sp, #12
 8018cb2:	d162      	bne.n	8018d7a <GUI_DispSFloatMin+0xda>
 8018cb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018cb8:	ed9f 8a82 	vldr	s16, [pc, #520]	; 8018ec4 <GUI_DispSFloatMin+0x224>
 8018cbc:	4b82      	ldr	r3, [pc, #520]	; (8018ec8 <GUI_DispSFloatMin+0x228>)
 8018cbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018cc2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018cc6:	ee08 3a90 	vmov	s17, r3
 8018cca:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8018cce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cda:	f100 80bb 	bmi.w	8018e54 <GUI_DispSFloatMin+0x1b4>
 8018cde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ce2:	ee17 0a90 	vmov	r0, s15
 8018ce6:	f7e7 fbff 	bl	80004e8 <__aeabi_f2d>
 8018cea:	ec41 0b10 	vmov	d0, r0, r1
 8018cee:	f00d f877 	bl	8025de0 <floor>
 8018cf2:	ec51 0b10 	vmov	r0, r1, d0
 8018cf6:	f7e7 ff23 	bl	8000b40 <__aeabi_d2f>
 8018cfa:	ee07 0a90 	vmov	s15, r0
 8018cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d02:	ee17 0a90 	vmov	r0, s15
 8018d06:	edcd 7a00 	vstr	s15, [sp]
 8018d0a:	f7fa fefb 	bl	8013b04 <GUI_Long2Len>
 8018d0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018d12:	ee28 8a28 	vmul.f32	s16, s16, s17
 8018d16:	1b40      	subs	r0, r0, r5
 8018d18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8018d24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018d28:	bfc8      	it	gt
 8018d2a:	3001      	addgt	r0, #1
 8018d2c:	2d00      	cmp	r5, #0
 8018d2e:	bf0c      	ite	eq
 8018d30:	462c      	moveq	r4, r5
 8018d32:	1c6c      	addne	r4, r5, #1
 8018d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d38:	4420      	add	r0, r4
 8018d3a:	b2c4      	uxtb	r4, r0
 8018d3c:	f100 8095 	bmi.w	8018e6a <GUI_DispSFloatMin+0x1ca>
 8018d40:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018d44:	ee17 0a90 	vmov	r0, s15
 8018d48:	f7e7 fbce 	bl	80004e8 <__aeabi_f2d>
 8018d4c:	ec41 0b10 	vmov	d0, r0, r1
 8018d50:	f00d f846 	bl	8025de0 <floor>
 8018d54:	ec51 0b10 	vmov	r0, r1, d0
 8018d58:	f7e7 fef2 	bl	8000b40 <__aeabi_d2f>
 8018d5c:	ee07 0a90 	vmov	s15, r0
 8018d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018d64:	462a      	mov	r2, r5
 8018d66:	4621      	mov	r1, r4
 8018d68:	ee17 0a90 	vmov	r0, s15
 8018d6c:	b003      	add	sp, #12
 8018d6e:	ecbd 8b02 	vpop	{d8}
 8018d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d76:	f7ff bd89 	b.w	801888c <GUI_DispSDecShift>
 8018d7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d7e:	eeb0 8a40 	vmov.f32	s16, s0
 8018d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d86:	db2c      	blt.n	8018de2 <GUI_DispSFloatMin+0x142>
 8018d88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018d8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d94:	d525      	bpl.n	8018de2 <GUI_DispSFloatMin+0x142>
 8018d96:	eef0 7ac0 	vabs.f32	s15, s0
 8018d9a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8018ecc <GUI_DispSFloatMin+0x22c>
 8018d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018da2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018daa:	d04e      	beq.n	8018e4a <GUI_DispSFloatMin+0x1aa>
 8018dac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018db0:	2300      	movs	r3, #0
 8018db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018db6:	3301      	adds	r3, #1
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8018dbe:	ee16 2a90 	vmov	r2, s13
 8018dc2:	2a00      	cmp	r2, #0
 8018dc4:	d0f5      	beq.n	8018db2 <GUI_DispSFloatMin+0x112>
 8018dc6:	42ab      	cmp	r3, r5
 8018dc8:	dd3f      	ble.n	8018e4a <GUI_DispSFloatMin+0x1aa>
 8018dca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018dce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd6:	db5e      	blt.n	8018e96 <GUI_DispSFloatMin+0x1f6>
 8018dd8:	2d00      	cmp	r5, #0
 8018dda:	d06f      	beq.n	8018ebc <GUI_DispSFloatMin+0x21c>
 8018ddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018de0:	e76c      	b.n	8018cbc <GUI_DispSFloatMin+0x1c>
 8018de2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dea:	d52b      	bpl.n	8018e44 <GUI_DispSFloatMin+0x1a4>
 8018dec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018df0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018df8:	dd24      	ble.n	8018e44 <GUI_DispSFloatMin+0x1a4>
 8018dfa:	eef0 7ac8 	vabs.f32	s15, s16
 8018dfe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018ecc <GUI_DispSFloatMin+0x22c>
 8018e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e0e:	d03d      	beq.n	8018e8c <GUI_DispSFloatMin+0x1ec>
 8018e10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018e14:	2300      	movs	r3, #0
 8018e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8018e22:	ee16 2a90 	vmov	r2, s13
 8018e26:	2a00      	cmp	r2, #0
 8018e28:	d0f5      	beq.n	8018e16 <GUI_DispSFloatMin+0x176>
 8018e2a:	42ab      	cmp	r3, r5
 8018e2c:	dd2e      	ble.n	8018e8c <GUI_DispSFloatMin+0x1ec>
 8018e2e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8018e32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e3a:	d83c      	bhi.n	8018eb6 <GUI_DispSFloatMin+0x216>
 8018e3c:	2d00      	cmp	r5, #0
 8018e3e:	d1cd      	bne.n	8018ddc <GUI_DispSFloatMin+0x13c>
 8018e40:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 8018e44:	eef0 7a48 	vmov.f32	s15, s16
 8018e48:	e738      	b.n	8018cbc <GUI_DispSFloatMin+0x1c>
 8018e4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e4e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8018e52:	e733      	b.n	8018cbc <GUI_DispSFloatMin+0x1c>
 8018e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e58:	ee17 0a90 	vmov	r0, s15
 8018e5c:	f7e7 fb44 	bl	80004e8 <__aeabi_f2d>
 8018e60:	ec41 0b10 	vmov	d0, r0, r1
 8018e64:	f00c ff38 	bl	8025cd8 <ceil>
 8018e68:	e743      	b.n	8018cf2 <GUI_DispSFloatMin+0x52>
 8018e6a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018e6e:	ee17 0a90 	vmov	r0, s15
 8018e72:	f7e7 fb39 	bl	80004e8 <__aeabi_f2d>
 8018e76:	ec41 0b10 	vmov	d0, r0, r1
 8018e7a:	f00c ff2d 	bl	8025cd8 <ceil>
 8018e7e:	ec51 0b10 	vmov	r0, r1, d0
 8018e82:	f7e7 fe5d 	bl	8000b40 <__aeabi_d2f>
 8018e86:	ee07 0a90 	vmov	s15, r0
 8018e8a:	e769      	b.n	8018d60 <GUI_DispSFloatMin+0xc0>
 8018e8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018e90:	ee78 7a67 	vsub.f32	s15, s16, s15
 8018e94:	e712      	b.n	8018cbc <GUI_DispSFloatMin+0x1c>
 8018e96:	2d00      	cmp	r5, #0
 8018e98:	f47f af0c 	bne.w	8018cb4 <GUI_DispSFloatMin+0x14>
 8018e9c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 8018ec4 <GUI_DispSFloatMin+0x224>
 8018ea0:	4b09      	ldr	r3, [pc, #36]	; (8018ec8 <GUI_DispSFloatMin+0x228>)
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	4610      	mov	r0, r2
 8018ea8:	9200      	str	r2, [sp, #0]
 8018eaa:	ee07 3a90 	vmov	s15, r3
 8018eae:	9301      	str	r3, [sp, #4]
 8018eb0:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8018eb4:	e729      	b.n	8018d0a <GUI_DispSFloatMin+0x6a>
 8018eb6:	2d00      	cmp	r5, #0
 8018eb8:	d0f0      	beq.n	8018e9c <GUI_DispSFloatMin+0x1fc>
 8018eba:	e78f      	b.n	8018ddc <GUI_DispSFloatMin+0x13c>
 8018ebc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018ec0:	e7ee      	b.n	8018ea0 <GUI_DispSFloatMin+0x200>
 8018ec2:	bf00      	nop
 8018ec4:	00000000 	.word	0x00000000
 8018ec8:	08027284 	.word	0x08027284
 8018ecc:	3089705f 	.word	0x3089705f

08018ed0 <GUI_SignalEvent>:
 8018ed0:	4b02      	ldr	r3, [pc, #8]	; (8018edc <GUI_SignalEvent+0xc>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	b103      	cbz	r3, 8018ed8 <GUI_SignalEvent+0x8>
 8018ed6:	4718      	bx	r3
 8018ed8:	4770      	bx	lr
 8018eda:	bf00      	nop
 8018edc:	20000398 	.word	0x20000398

08018ee0 <GUI__MixColorsBulk>:
 8018ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ee4:	b087      	sub	sp, #28
 8018ee6:	4692      	mov	sl, r2
 8018ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018eea:	9001      	str	r0, [sp, #4]
 8018eec:	9102      	str	r1, [sp, #8]
 8018eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ef0:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8018ef4:	2a00      	cmp	r2, #0
 8018ef6:	d035      	beq.n	8018f64 <GUI__MixColorsBulk+0x84>
 8018ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018efa:	2100      	movs	r1, #0
 8018efc:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8018f6c <GUI__MixColorsBulk+0x8c>
 8018f00:	0092      	lsls	r2, r2, #2
 8018f02:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8018f70 <GUI__MixColorsBulk+0x90>
 8018f06:	9103      	str	r1, [sp, #12]
 8018f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f0c:	9205      	str	r2, [sp, #20]
 8018f0e:	9304      	str	r3, [sp, #16]
 8018f10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018f12:	4657      	mov	r7, sl
 8018f14:	9e02      	ldr	r6, [sp, #8]
 8018f16:	9d01      	ldr	r5, [sp, #4]
 8018f18:	f855 0b04 	ldr.w	r0, [r5], #4
 8018f1c:	f8db 3000 	ldr.w	r3, [fp]
 8018f20:	0e02      	lsrs	r2, r0, #24
 8018f22:	f856 1b04 	ldr.w	r1, [r6], #4
 8018f26:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8018f2a:	fb09 f202 	mul.w	r2, r9, r2
 8018f2e:	fba8 e202 	umull	lr, r2, r8, r2
 8018f32:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8018f36:	4798      	blx	r3
 8018f38:	3c01      	subs	r4, #1
 8018f3a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8018f3e:	f847 0b04 	str.w	r0, [r7], #4
 8018f42:	d1e9      	bne.n	8018f18 <GUI__MixColorsBulk+0x38>
 8018f44:	9a01      	ldr	r2, [sp, #4]
 8018f46:	9905      	ldr	r1, [sp, #20]
 8018f48:	4610      	mov	r0, r2
 8018f4a:	9a02      	ldr	r2, [sp, #8]
 8018f4c:	448a      	add	sl, r1
 8018f4e:	9b03      	ldr	r3, [sp, #12]
 8018f50:	4408      	add	r0, r1
 8018f52:	9904      	ldr	r1, [sp, #16]
 8018f54:	3301      	adds	r3, #1
 8018f56:	440a      	add	r2, r1
 8018f58:	9001      	str	r0, [sp, #4]
 8018f5a:	9303      	str	r3, [sp, #12]
 8018f5c:	9202      	str	r2, [sp, #8]
 8018f5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f60:	429a      	cmp	r2, r3
 8018f62:	d1d5      	bne.n	8018f10 <GUI__MixColorsBulk+0x30>
 8018f64:	b007      	add	sp, #28
 8018f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6a:	bf00      	nop
 8018f6c:	20000044 	.word	0x20000044
 8018f70:	80808081 	.word	0x80808081

08018f74 <GUI__MixColors>:
 8018f74:	0e0b      	lsrs	r3, r1, #24
 8018f76:	ea4f 6310 	mov.w	r3, r0, lsr #24
 8018f7a:	b4f0      	push	{r4, r5, r6, r7}
 8018f7c:	bf08      	it	eq
 8018f7e:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8018f82:	4c11      	ldr	r4, [pc, #68]	; (8018fc8 <GUI__MixColors+0x54>)
 8018f84:	fb02 f203 	mul.w	r2, r2, r3
 8018f88:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8018f8c:	0a0d      	lsrs	r5, r1, #8
 8018f8e:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8018f92:	fba4 1202 	umull	r1, r2, r4, r2
 8018f96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018f9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018f9e:	09d2      	lsrs	r2, r2, #7
 8018fa0:	f040 7480 	orr.w	r4, r0, #16777216	; 0x1000000
 8018fa4:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 8018fa8:	fb02 f106 	mul.w	r1, r2, r6
 8018fac:	fb07 f005 	mul.w	r0, r7, r5
 8018fb0:	fb07 1103 	mla	r1, r7, r3, r1
 8018fb4:	fb02 0004 	mla	r0, r2, r4, r0
 8018fb8:	0a09      	lsrs	r1, r1, #8
 8018fba:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8018fbe:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8018fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8018fc4:	4308      	orrs	r0, r1
 8018fc6:	4770      	bx	lr
 8018fc8:	80808081 	.word	0x80808081

08018fcc <_OnExit>:
 8018fcc:	b510      	push	{r4, lr}
 8018fce:	4c08      	ldr	r4, [pc, #32]	; (8018ff0 <_OnExit+0x24>)
 8018fd0:	6820      	ldr	r0, [r4, #0]
 8018fd2:	f7f9 fdab 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8018fd6:	6860      	ldr	r0, [r4, #4]
 8018fd8:	f7f9 fda8 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8018fdc:	68a0      	ldr	r0, [r4, #8]
 8018fde:	f7f9 fda5 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	60a3      	str	r3, [r4, #8]
 8018fe6:	6063      	str	r3, [r4, #4]
 8018fe8:	6023      	str	r3, [r4, #0]
 8018fea:	60e3      	str	r3, [r4, #12]
 8018fec:	6123      	str	r3, [r4, #16]
 8018fee:	bd10      	pop	{r4, pc}
 8018ff0:	200003a0 	.word	0x200003a0

08018ff4 <GUI__DoAlphaBlending>:
 8018ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff8:	b08f      	sub	sp, #60	; 0x3c
 8018ffa:	2400      	movs	r4, #0
 8018ffc:	461f      	mov	r7, r3
 8018ffe:	4693      	mov	fp, r2
 8019000:	9005      	str	r0, [sp, #20]
 8019002:	4893      	ldr	r0, [pc, #588]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019004:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019006:	6900      	ldr	r0, [r0, #16]
 8019008:	9107      	str	r1, [sp, #28]
 801900a:	601c      	str	r4, [r3, #0]
 801900c:	2800      	cmp	r0, #0
 801900e:	f000 80f1 	beq.w	80191f4 <GUI__DoAlphaBlending+0x200>
 8019012:	4b8f      	ldr	r3, [pc, #572]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019014:	68dc      	ldr	r4, [r3, #12]
 8019016:	461d      	mov	r5, r3
 8019018:	b92c      	cbnz	r4, 8019026 <GUI__DoAlphaBlending+0x32>
 801901a:	4b8e      	ldr	r3, [pc, #568]	; (8019254 <GUI__DoAlphaBlending+0x260>)
 801901c:	681c      	ldr	r4, [r3, #0]
 801901e:	60ec      	str	r4, [r5, #12]
 8019020:	2c00      	cmp	r4, #0
 8019022:	f000 80f1 	beq.w	8019208 <GUI__DoAlphaBlending+0x214>
 8019026:	4b8a      	ldr	r3, [pc, #552]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019028:	4d89      	ldr	r5, [pc, #548]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	9302      	str	r3, [sp, #8]
 801902e:	2b00      	cmp	r3, #0
 8019030:	f000 80fd 	beq.w	801922e <GUI__DoAlphaBlending+0x23a>
 8019034:	4b86      	ldr	r3, [pc, #536]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019036:	4d86      	ldr	r5, [pc, #536]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019038:	685b      	ldr	r3, [r3, #4]
 801903a:	9303      	str	r3, [sp, #12]
 801903c:	2b00      	cmp	r3, #0
 801903e:	f000 80e8 	beq.w	8019212 <GUI__DoAlphaBlending+0x21e>
 8019042:	42a7      	cmp	r7, r4
 8019044:	4b84      	ldr	r3, [pc, #528]	; (8019258 <GUI__DoAlphaBlending+0x264>)
 8019046:	4a85      	ldr	r2, [pc, #532]	; (801925c <GUI__DoAlphaBlending+0x268>)
 8019048:	f04f 0600 	mov.w	r6, #0
 801904c:	bfa8      	it	ge
 801904e:	4627      	movge	r7, r4
 8019050:	6819      	ldr	r1, [r3, #0]
 8019052:	9b05      	ldr	r3, [sp, #20]
 8019054:	4634      	mov	r4, r6
 8019056:	7c48      	ldrb	r0, [r1, #17]
 8019058:	46ba      	mov	sl, r7
 801905a:	443b      	add	r3, r7
 801905c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8019060:	930c      	str	r3, [sp, #48]	; 0x30
 8019062:	3b01      	subs	r3, #1
 8019064:	9208      	str	r2, [sp, #32]
 8019066:	9309      	str	r3, [sp, #36]	; 0x24
 8019068:	6913      	ldr	r3, [r2, #16]
 801906a:	930d      	str	r3, [sp, #52]	; 0x34
 801906c:	f001 fefa 	bl	801ae64 <GUI_GetBitsPerPixelEx>
 8019070:	4b79      	ldr	r3, [pc, #484]	; (8019258 <GUI__DoAlphaBlending+0x264>)
 8019072:	9004      	str	r0, [sp, #16]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	7c58      	ldrb	r0, [r3, #17]
 8019078:	f001 ff0e 	bl	801ae98 <GUI_GetpfIndex2ColorEx>
 801907c:	4b78      	ldr	r3, [pc, #480]	; (8019260 <GUI__DoAlphaBlending+0x26c>)
 801907e:	4a79      	ldr	r2, [pc, #484]	; (8019264 <GUI__DoAlphaBlending+0x270>)
 8019080:	900b      	str	r0, [sp, #44]	; 0x2c
 8019082:	4290      	cmp	r0, r2
 8019084:	bf18      	it	ne
 8019086:	4298      	cmpne	r0, r3
 8019088:	bf14      	ite	ne
 801908a:	2301      	movne	r3, #1
 801908c:	2300      	moveq	r3, #0
 801908e:	930a      	str	r3, [sp, #40]	; 0x28
 8019090:	465f      	mov	r7, fp
 8019092:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019094:	f857 0b04 	ldr.w	r0, [r7], #4
 8019098:	4798      	blx	r3
 801909a:	4681      	mov	r9, r0
 801909c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80190a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80190a4:	d047      	beq.n	8019136 <GUI__DoAlphaBlending+0x142>
 80190a6:	2c00      	cmp	r4, #0
 80190a8:	d12b      	bne.n	8019102 <GUI__DoAlphaBlending+0x10e>
 80190aa:	4b6b      	ldr	r3, [pc, #428]	; (8019258 <GUI__DoAlphaBlending+0x264>)
 80190ac:	9a05      	ldr	r2, [sp, #20]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	1995      	adds	r5, r2, r6
 80190b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80190b6:	42ab      	cmp	r3, r5
 80190b8:	dd59      	ble.n	801916e <GUI__DoAlphaBlending+0x17a>
 80190ba:	1b5a      	subs	r2, r3, r5
 80190bc:	461d      	mov	r5, r3
 80190be:	4614      	mov	r4, r2
 80190c0:	9206      	str	r2, [sp, #24]
 80190c2:	9802      	ldr	r0, [sp, #8]
 80190c4:	4434      	add	r4, r6
 80190c6:	9b08      	ldr	r3, [sp, #32]
 80190c8:	9907      	ldr	r1, [sp, #28]
 80190ca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80190ce:	9301      	str	r3, [sp, #4]
 80190d0:	4628      	mov	r0, r5
 80190d2:	460b      	mov	r3, r1
 80190d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190d6:	9400      	str	r4, [sp, #0]
 80190d8:	f002 f910 	bl	801b2fc <GUI_ReadRectEx>
 80190dc:	9b04      	ldr	r3, [sp, #16]
 80190de:	2b17      	cmp	r3, #23
 80190e0:	dd7e      	ble.n	80191e0 <GUI__DoAlphaBlending+0x1ec>
 80190e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d044      	beq.n	8019172 <GUI__DoAlphaBlending+0x17e>
 80190e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190ea:	9606      	str	r6, [sp, #24]
 80190ec:	1b5d      	subs	r5, r3, r5
 80190ee:	462e      	mov	r6, r5
 80190f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80190f2:	6820      	ldr	r0, [r4, #0]
 80190f4:	47a8      	blx	r5
 80190f6:	3e01      	subs	r6, #1
 80190f8:	f844 0b04 	str.w	r0, [r4], #4
 80190fc:	d1f9      	bne.n	80190f2 <GUI__DoAlphaBlending+0xfe>
 80190fe:	9e06      	ldr	r6, [sp, #24]
 8019100:	2401      	movs	r4, #1
 8019102:	4b53      	ldr	r3, [pc, #332]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019104:	69dd      	ldr	r5, [r3, #28]
 8019106:	2d00      	cmp	r5, #0
 8019108:	d138      	bne.n	801917c <GUI__DoAlphaBlending+0x188>
 801910a:	fa5f f288 	uxtb.w	r2, r8
 801910e:	f1b8 0f00 	cmp.w	r8, #0
 8019112:	d11a      	bne.n	801914a <GUI__DoAlphaBlending+0x156>
 8019114:	9b02      	ldr	r3, [sp, #8]
 8019116:	9a03      	ldr	r2, [sp, #12]
 8019118:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 801911c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8019120:	f1ba 0a01 	subs.w	sl, sl, #1
 8019124:	f106 0601 	add.w	r6, r6, #1
 8019128:	46bb      	mov	fp, r7
 801912a:	d1b1      	bne.n	8019090 <GUI__DoAlphaBlending+0x9c>
 801912c:	9c03      	ldr	r4, [sp, #12]
 801912e:	4620      	mov	r0, r4
 8019130:	b00f      	add	sp, #60	; 0x3c
 8019132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019138:	9a03      	ldr	r2, [sp, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8019140:	f043 0301 	orr.w	r3, r3, #1
 8019144:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019146:	6013      	str	r3, [r2, #0]
 8019148:	e7ea      	b.n	8019120 <GUI__DoAlphaBlending+0x12c>
 801914a:	9902      	ldr	r1, [sp, #8]
 801914c:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 8019150:	4b45      	ldr	r3, [pc, #276]	; (8019268 <GUI__DoAlphaBlending+0x274>)
 8019152:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	4798      	blx	r3
 801915a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801915c:	9a03      	ldr	r2, [sp, #12]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8019164:	f043 0301 	orr.w	r3, r3, #1
 8019168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801916a:	6013      	str	r3, [r2, #0]
 801916c:	e7d8      	b.n	8019120 <GUI__DoAlphaBlending+0x12c>
 801916e:	9406      	str	r4, [sp, #24]
 8019170:	e7a7      	b.n	80190c2 <GUI__DoAlphaBlending+0xce>
 8019172:	4b37      	ldr	r3, [pc, #220]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019174:	2401      	movs	r4, #1
 8019176:	69dd      	ldr	r5, [r3, #28]
 8019178:	2d00      	cmp	r5, #0
 801917a:	d0c6      	beq.n	801910a <GUI__DoAlphaBlending+0x116>
 801917c:	00b6      	lsls	r6, r6, #2
 801917e:	9a02      	ldr	r2, [sp, #8]
 8019180:	4653      	mov	r3, sl
 8019182:	4658      	mov	r0, fp
 8019184:	4432      	add	r2, r6
 8019186:	4657      	mov	r7, sl
 8019188:	4614      	mov	r4, r2
 801918a:	9a03      	ldr	r2, [sp, #12]
 801918c:	4416      	add	r6, r2
 801918e:	4621      	mov	r1, r4
 8019190:	4632      	mov	r2, r6
 8019192:	47a8      	blx	r5
 8019194:	f1ab 0204 	sub.w	r2, fp, #4
 8019198:	e008      	b.n	80191ac <GUI__DoAlphaBlending+0x1b8>
 801919a:	6823      	ldr	r3, [r4, #0]
 801919c:	3f01      	subs	r7, #1
 801919e:	f104 0404 	add.w	r4, r4, #4
 80191a2:	f106 0604 	add.w	r6, r6, #4
 80191a6:	f846 3c04 	str.w	r3, [r6, #-4]
 80191aa:	d00e      	beq.n	80191ca <GUI__DoAlphaBlending+0x1d6>
 80191ac:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80191b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80191b4:	d0f1      	beq.n	801919a <GUI__DoAlphaBlending+0x1a6>
 80191b6:	6821      	ldr	r1, [r4, #0]
 80191b8:	3604      	adds	r6, #4
 80191ba:	3404      	adds	r4, #4
 80191bc:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80191c0:	bf08      	it	eq
 80191c2:	f846 3c04 	streq.w	r3, [r6, #-4]
 80191c6:	3f01      	subs	r7, #1
 80191c8:	d1f0      	bne.n	80191ac <GUI__DoAlphaBlending+0x1b8>
 80191ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80191cc:	9c03      	ldr	r4, [sp, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80191d2:	4620      	mov	r0, r4
 80191d4:	f043 0301 	orr.w	r3, r3, #1
 80191d8:	6013      	str	r3, [r2, #0]
 80191da:	b00f      	add	sp, #60	; 0x3c
 80191dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191e0:	461a      	mov	r2, r3
 80191e2:	9b06      	ldr	r3, [sp, #24]
 80191e4:	4620      	mov	r0, r4
 80191e6:	2401      	movs	r4, #1
 80191e8:	ebc3 010a 	rsb	r1, r3, sl
 80191ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191ee:	f000 faaf 	bl	8019750 <GUI__ExpandPixelIndicesEx>
 80191f2:	e786      	b.n	8019102 <GUI__DoAlphaBlending+0x10e>
 80191f4:	4a1d      	ldr	r2, [pc, #116]	; (801926c <GUI__DoAlphaBlending+0x278>)
 80191f6:	2301      	movs	r3, #1
 80191f8:	4815      	ldr	r0, [pc, #84]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 80191fa:	f840 2f14 	str.w	r2, [r0, #20]!
 80191fe:	4a14      	ldr	r2, [pc, #80]	; (8019250 <GUI__DoAlphaBlending+0x25c>)
 8019200:	6113      	str	r3, [r2, #16]
 8019202:	f7fb f999 	bl	8014538 <GUI__RegisterExit>
 8019206:	e704      	b.n	8019012 <GUI__DoAlphaBlending+0x1e>
 8019208:	f001 fe8a 	bl	801af20 <LCD_GetVXSizeMax>
 801920c:	4604      	mov	r4, r0
 801920e:	60e8      	str	r0, [r5, #12]
 8019210:	e709      	b.n	8019026 <GUI__DoAlphaBlending+0x32>
 8019212:	68e8      	ldr	r0, [r5, #12]
 8019214:	0080      	lsls	r0, r0, #2
 8019216:	f7f9 fc93 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801921a:	9003      	str	r0, [sp, #12]
 801921c:	6068      	str	r0, [r5, #4]
 801921e:	2800      	cmp	r0, #0
 8019220:	f47f af0f 	bne.w	8019042 <GUI__DoAlphaBlending+0x4e>
 8019224:	2400      	movs	r4, #0
 8019226:	4620      	mov	r0, r4
 8019228:	b00f      	add	sp, #60	; 0x3c
 801922a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922e:	00a0      	lsls	r0, r4, #2
 8019230:	f7f9 fc86 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 8019234:	6028      	str	r0, [r5, #0]
 8019236:	b108      	cbz	r0, 801923c <GUI__DoAlphaBlending+0x248>
 8019238:	9002      	str	r0, [sp, #8]
 801923a:	e6fb      	b.n	8019034 <GUI__DoAlphaBlending+0x40>
 801923c:	686c      	ldr	r4, [r5, #4]
 801923e:	2c00      	cmp	r4, #0
 8019240:	d1f0      	bne.n	8019224 <GUI__DoAlphaBlending+0x230>
 8019242:	68e8      	ldr	r0, [r5, #12]
 8019244:	0080      	lsls	r0, r0, #2
 8019246:	f7f9 fc7b 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801924a:	6068      	str	r0, [r5, #4]
 801924c:	e76f      	b.n	801912e <GUI__DoAlphaBlending+0x13a>
 801924e:	bf00      	nop
 8019250:	200003a0 	.word	0x200003a0
 8019254:	200467d8 	.word	0x200467d8
 8019258:	20000018 	.word	0x20000018
 801925c:	200467d0 	.word	0x200467d0
 8019260:	08012135 	.word	0x08012135
 8019264:	08012131 	.word	0x08012131
 8019268:	20000044 	.word	0x20000044
 801926c:	08018fcd 	.word	0x08018fcd

08019270 <GUI__AllocAlphaBuffer>:
 8019270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019272:	b083      	sub	sp, #12
 8019274:	b9c0      	cbnz	r0, 80192a8 <GUI__AllocAlphaBuffer+0x38>
 8019276:	4c22      	ldr	r4, [pc, #136]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 8019278:	4605      	mov	r5, r0
 801927a:	6923      	ldr	r3, [r4, #16]
 801927c:	b1cb      	cbz	r3, 80192b2 <GUI__AllocAlphaBuffer+0x42>
 801927e:	68e0      	ldr	r0, [r4, #12]
 8019280:	4e1f      	ldr	r6, [pc, #124]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 8019282:	b918      	cbnz	r0, 801928c <GUI__AllocAlphaBuffer+0x1c>
 8019284:	4b1f      	ldr	r3, [pc, #124]	; (8019304 <GUI__AllocAlphaBuffer+0x94>)
 8019286:	6818      	ldr	r0, [r3, #0]
 8019288:	60f0      	str	r0, [r6, #12]
 801928a:	b1d8      	cbz	r0, 80192c4 <GUI__AllocAlphaBuffer+0x54>
 801928c:	6823      	ldr	r3, [r4, #0]
 801928e:	4f1c      	ldr	r7, [pc, #112]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 8019290:	b32b      	cbz	r3, 80192de <GUI__AllocAlphaBuffer+0x6e>
 8019292:	2600      	movs	r6, #0
 8019294:	6863      	ldr	r3, [r4, #4]
 8019296:	4f1a      	ldr	r7, [pc, #104]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 8019298:	b1c3      	cbz	r3, 80192cc <GUI__AllocAlphaBuffer+0x5c>
 801929a:	b115      	cbz	r5, 80192a2 <GUI__AllocAlphaBuffer+0x32>
 801929c:	68a3      	ldr	r3, [r4, #8]
 801929e:	4c18      	ldr	r4, [pc, #96]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 80192a0:	b32b      	cbz	r3, 80192ee <GUI__AllocAlphaBuffer+0x7e>
 80192a2:	4630      	mov	r0, r6
 80192a4:	b003      	add	sp, #12
 80192a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192a8:	4c15      	ldr	r4, [pc, #84]	; (8019300 <GUI__AllocAlphaBuffer+0x90>)
 80192aa:	ad01      	add	r5, sp, #4
 80192ac:	6923      	ldr	r3, [r4, #16]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d1e5      	bne.n	801927e <GUI__AllocAlphaBuffer+0xe>
 80192b2:	4a15      	ldr	r2, [pc, #84]	; (8019308 <GUI__AllocAlphaBuffer+0x98>)
 80192b4:	4620      	mov	r0, r4
 80192b6:	2301      	movs	r3, #1
 80192b8:	f840 2f14 	str.w	r2, [r0, #20]!
 80192bc:	6123      	str	r3, [r4, #16]
 80192be:	f7fb f93b 	bl	8014538 <GUI__RegisterExit>
 80192c2:	e7dc      	b.n	801927e <GUI__AllocAlphaBuffer+0xe>
 80192c4:	f001 fe2c 	bl	801af20 <LCD_GetVXSizeMax>
 80192c8:	60f0      	str	r0, [r6, #12]
 80192ca:	e7df      	b.n	801928c <GUI__AllocAlphaBuffer+0x1c>
 80192cc:	68f8      	ldr	r0, [r7, #12]
 80192ce:	0080      	lsls	r0, r0, #2
 80192d0:	f7f9 fc36 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80192d4:	2800      	cmp	r0, #0
 80192d6:	6078      	str	r0, [r7, #4]
 80192d8:	bf08      	it	eq
 80192da:	2601      	moveq	r6, #1
 80192dc:	e7dd      	b.n	801929a <GUI__AllocAlphaBuffer+0x2a>
 80192de:	0080      	lsls	r0, r0, #2
 80192e0:	f7f9 fc2e 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80192e4:	fab0 f680 	clz	r6, r0
 80192e8:	6038      	str	r0, [r7, #0]
 80192ea:	0976      	lsrs	r6, r6, #5
 80192ec:	e7d2      	b.n	8019294 <GUI__AllocAlphaBuffer+0x24>
 80192ee:	68e0      	ldr	r0, [r4, #12]
 80192f0:	0080      	lsls	r0, r0, #2
 80192f2:	f7f9 fc25 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 80192f6:	2800      	cmp	r0, #0
 80192f8:	60a0      	str	r0, [r4, #8]
 80192fa:	bf08      	it	eq
 80192fc:	2601      	moveq	r6, #1
 80192fe:	e7d0      	b.n	80192a2 <GUI__AllocAlphaBuffer+0x32>
 8019300:	200003a0 	.word	0x200003a0
 8019304:	200467d8 	.word	0x200467d8
 8019308:	08018fcd 	.word	0x08018fcd

0801930c <GUI_SetFuncDrawAlpha>:
 801930c:	b410      	push	{r4}
 801930e:	b118      	cbz	r0, 8019318 <GUI_SetFuncDrawAlpha+0xc>
 8019310:	b111      	cbz	r1, 8019318 <GUI_SetFuncDrawAlpha+0xc>
 8019312:	4603      	mov	r3, r0
 8019314:	2000      	movs	r0, #0
 8019316:	e002      	b.n	801931e <GUI_SetFuncDrawAlpha+0x12>
 8019318:	2100      	movs	r1, #0
 801931a:	2001      	movs	r0, #1
 801931c:	460b      	mov	r3, r1
 801931e:	4c03      	ldr	r4, [pc, #12]	; (801932c <GUI_SetFuncDrawAlpha+0x20>)
 8019320:	4a03      	ldr	r2, [pc, #12]	; (8019330 <GUI_SetFuncDrawAlpha+0x24>)
 8019322:	6021      	str	r1, [r4, #0]
 8019324:	6013      	str	r3, [r2, #0]
 8019326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801932a:	4770      	bx	lr
 801932c:	200467e8 	.word	0x200467e8
 8019330:	200467ec 	.word	0x200467ec

08019334 <GUI__CompactPixelIndices>:
 8019334:	2a08      	cmp	r2, #8
 8019336:	b410      	push	{r4}
 8019338:	dd0e      	ble.n	8019358 <GUI__CompactPixelIndices+0x24>
 801933a:	2a10      	cmp	r2, #16
 801933c:	dc1c      	bgt.n	8019378 <GUI__CompactPixelIndices+0x44>
 801933e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019342:	4603      	mov	r3, r0
 8019344:	f850 2b04 	ldr.w	r2, [r0], #4
 8019348:	f823 2b02 	strh.w	r2, [r3], #2
 801934c:	4299      	cmp	r1, r3
 801934e:	d1f9      	bne.n	8019344 <GUI__CompactPixelIndices+0x10>
 8019350:	2001      	movs	r0, #1
 8019352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019356:	4770      	bx	lr
 8019358:	2a02      	cmp	r2, #2
 801935a:	d011      	beq.n	8019380 <GUI__CompactPixelIndices+0x4c>
 801935c:	2a04      	cmp	r2, #4
 801935e:	f000 809a 	beq.w	8019496 <GUI__CompactPixelIndices+0x162>
 8019362:	2a01      	cmp	r2, #1
 8019364:	d03f      	beq.n	80193e6 <GUI__CompactPixelIndices+0xb2>
 8019366:	4401      	add	r1, r0
 8019368:	4603      	mov	r3, r0
 801936a:	f850 2b04 	ldr.w	r2, [r0], #4
 801936e:	f803 2b01 	strb.w	r2, [r3], #1
 8019372:	4299      	cmp	r1, r3
 8019374:	d1f9      	bne.n	801936a <GUI__CompactPixelIndices+0x36>
 8019376:	e7eb      	b.n	8019350 <GUI__CompactPixelIndices+0x1c>
 8019378:	2000      	movs	r0, #0
 801937a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801937e:	4770      	bx	lr
 8019380:	f100 0210 	add.w	r2, r0, #16
 8019384:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8019388:	2901      	cmp	r1, #1
 801938a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801938e:	b2db      	uxtb	r3, r3
 8019390:	d026      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 8019392:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8019396:	2902      	cmp	r1, #2
 8019398:	ea4f 1404 	mov.w	r4, r4, lsl #4
 801939c:	f004 0430 	and.w	r4, r4, #48	; 0x30
 80193a0:	ea43 0304 	orr.w	r3, r3, r4
 80193a4:	d01c      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 80193a6:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80193aa:	2903      	cmp	r1, #3
 80193ac:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80193b0:	f004 040c 	and.w	r4, r4, #12
 80193b4:	ea43 0304 	orr.w	r3, r3, r4
 80193b8:	d012      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 80193ba:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80193be:	3904      	subs	r1, #4
 80193c0:	f102 0210 	add.w	r2, r2, #16
 80193c4:	f004 0403 	and.w	r4, r4, #3
 80193c8:	ea43 0304 	orr.w	r3, r3, r4
 80193cc:	f800 3b01 	strb.w	r3, [r0], #1
 80193d0:	d0be      	beq.n	8019350 <GUI__CompactPixelIndices+0x1c>
 80193d2:	f852 3c10 	ldr.w	r3, [r2, #-16]
 80193d6:	2901      	cmp	r1, #1
 80193d8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	d1d8      	bne.n	8019392 <GUI__CompactPixelIndices+0x5e>
 80193e0:	7003      	strb	r3, [r0, #0]
 80193e2:	2001      	movs	r0, #1
 80193e4:	e7b5      	b.n	8019352 <GUI__CompactPixelIndices+0x1e>
 80193e6:	f100 0220 	add.w	r2, r0, #32
 80193ea:	f852 3c20 	ldr.w	r3, [r2, #-32]
 80193ee:	2901      	cmp	r1, #1
 80193f0:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	d0f3      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 80193f8:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 80193fc:	2902      	cmp	r1, #2
 80193fe:	ea4f 1484 	mov.w	r4, r4, lsl #6
 8019402:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8019406:	ea43 0304 	orr.w	r3, r3, r4
 801940a:	d0e9      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 801940c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8019410:	2903      	cmp	r1, #3
 8019412:	ea4f 1444 	mov.w	r4, r4, lsl #5
 8019416:	f004 0420 	and.w	r4, r4, #32
 801941a:	ea43 0304 	orr.w	r3, r3, r4
 801941e:	d0df      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 8019420:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8019424:	2904      	cmp	r1, #4
 8019426:	ea4f 1404 	mov.w	r4, r4, lsl #4
 801942a:	f004 0410 	and.w	r4, r4, #16
 801942e:	ea43 0304 	orr.w	r3, r3, r4
 8019432:	d0d5      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 8019434:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8019438:	2905      	cmp	r1, #5
 801943a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801943e:	f004 0408 	and.w	r4, r4, #8
 8019442:	ea43 0304 	orr.w	r3, r3, r4
 8019446:	d0cb      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 8019448:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801944c:	2906      	cmp	r1, #6
 801944e:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8019452:	f004 0404 	and.w	r4, r4, #4
 8019456:	ea43 0304 	orr.w	r3, r3, r4
 801945a:	d0c1      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 801945c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8019460:	3907      	subs	r1, #7
 8019462:	f102 0220 	add.w	r2, r2, #32
 8019466:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801946a:	f004 0402 	and.w	r4, r4, #2
 801946e:	ea43 0304 	orr.w	r3, r3, r4
 8019472:	d0b5      	beq.n	80193e0 <GUI__CompactPixelIndices+0xac>
 8019474:	f852 4c24 	ldr.w	r4, [r2, #-36]
 8019478:	2901      	cmp	r1, #1
 801947a:	f004 0401 	and.w	r4, r4, #1
 801947e:	ea43 0304 	orr.w	r3, r3, r4
 8019482:	f800 3b01 	strb.w	r3, [r0], #1
 8019486:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801948a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801948e:	b2db      	uxtb	r3, r3
 8019490:	d1b2      	bne.n	80193f8 <GUI__CompactPixelIndices+0xc4>
 8019492:	7003      	strb	r3, [r0, #0]
 8019494:	e7a5      	b.n	80193e2 <GUI__CompactPixelIndices+0xae>
 8019496:	f100 0408 	add.w	r4, r0, #8
 801949a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801949e:	2901      	cmp	r1, #1
 80194a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	d013      	beq.n	80194d0 <GUI__CompactPixelIndices+0x19c>
 80194a8:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80194ac:	3902      	subs	r1, #2
 80194ae:	f104 0408 	add.w	r4, r4, #8
 80194b2:	f002 020f 	and.w	r2, r2, #15
 80194b6:	ea43 0302 	orr.w	r3, r3, r2
 80194ba:	f800 3b01 	strb.w	r3, [r0], #1
 80194be:	f43f af47 	beq.w	8019350 <GUI__CompactPixelIndices+0x1c>
 80194c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80194c6:	2901      	cmp	r1, #1
 80194c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80194cc:	b2db      	uxtb	r3, r3
 80194ce:	d1eb      	bne.n	80194a8 <GUI__CompactPixelIndices+0x174>
 80194d0:	7003      	strb	r3, [r0, #0]
 80194d2:	4608      	mov	r0, r1
 80194d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194d8:	4770      	bx	lr
 80194da:	bf00      	nop

080194dc <GUI__CompactPixelIndicesEx>:
 80194dc:	2a08      	cmp	r2, #8
 80194de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194e2:	460c      	mov	r4, r1
 80194e4:	4605      	mov	r5, r0
 80194e6:	681f      	ldr	r7, [r3, #0]
 80194e8:	dd0c      	ble.n	8019504 <GUI__CompactPixelIndicesEx+0x28>
 80194ea:	2a10      	cmp	r2, #16
 80194ec:	dc21      	bgt.n	8019532 <GUI__CompactPixelIndicesEx+0x56>
 80194ee:	691e      	ldr	r6, [r3, #16]
 80194f0:	2e00      	cmp	r6, #0
 80194f2:	f000 8091 	beq.w	8019618 <GUI__CompactPixelIndicesEx+0x13c>
 80194f6:	4622      	mov	r2, r4
 80194f8:	4629      	mov	r1, r5
 80194fa:	2302      	movs	r3, #2
 80194fc:	47b0      	blx	r6
 80194fe:	2001      	movs	r0, #1
 8019500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019504:	3a01      	subs	r2, #1
 8019506:	2a07      	cmp	r2, #7
 8019508:	d810      	bhi.n	801952c <GUI__CompactPixelIndicesEx+0x50>
 801950a:	e8df f002 	tbb	[pc, r2]
 801950e:	5104      	.short	0x5104
 8019510:	0f0f770f 	.word	0x0f0f770f
 8019514:	9a0f      	.short	0x9a0f
 8019516:	f100 0820 	add.w	r8, r0, #32
 801951a:	f858 0c20 	ldr.w	r0, [r8, #-32]
 801951e:	47b8      	blx	r7
 8019520:	2c01      	cmp	r4, #1
 8019522:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8019526:	b2c6      	uxtb	r6, r0
 8019528:	d106      	bne.n	8019538 <GUI__CompactPixelIndicesEx+0x5c>
 801952a:	702e      	strb	r6, [r5, #0]
 801952c:	2001      	movs	r0, #1
 801952e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019532:	2000      	movs	r0, #0
 8019534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019538:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 801953c:	47b8      	blx	r7
 801953e:	2c02      	cmp	r4, #2
 8019540:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8019544:	b2c6      	uxtb	r6, r0
 8019546:	d0f0      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019548:	f858 0c18 	ldr.w	r0, [r8, #-24]
 801954c:	47b8      	blx	r7
 801954e:	2c03      	cmp	r4, #3
 8019550:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8019554:	b2c6      	uxtb	r6, r0
 8019556:	d0e8      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019558:	f858 0c14 	ldr.w	r0, [r8, #-20]
 801955c:	47b8      	blx	r7
 801955e:	2c04      	cmp	r4, #4
 8019560:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8019564:	b2c6      	uxtb	r6, r0
 8019566:	d0e0      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019568:	f858 0c10 	ldr.w	r0, [r8, #-16]
 801956c:	47b8      	blx	r7
 801956e:	2c05      	cmp	r4, #5
 8019570:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8019574:	b2c6      	uxtb	r6, r0
 8019576:	d0d8      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019578:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801957c:	47b8      	blx	r7
 801957e:	2c06      	cmp	r4, #6
 8019580:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8019584:	b2c6      	uxtb	r6, r0
 8019586:	d0d0      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019588:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801958c:	47b8      	blx	r7
 801958e:	2c07      	cmp	r4, #7
 8019590:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 8019594:	b2c6      	uxtb	r6, r0
 8019596:	d0c8      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 8019598:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801959c:	f108 0820 	add.w	r8, r8, #32
 80195a0:	47b8      	blx	r7
 80195a2:	3c08      	subs	r4, #8
 80195a4:	ea40 0006 	orr.w	r0, r0, r6
 80195a8:	f805 0b01 	strb.w	r0, [r5], #1
 80195ac:	d1b5      	bne.n	801951a <GUI__CompactPixelIndicesEx+0x3e>
 80195ae:	e7bd      	b.n	801952c <GUI__CompactPixelIndicesEx+0x50>
 80195b0:	f100 0810 	add.w	r8, r0, #16
 80195b4:	f858 0c10 	ldr.w	r0, [r8, #-16]
 80195b8:	47b8      	blx	r7
 80195ba:	2c01      	cmp	r4, #1
 80195bc:	ea4f 1080 	mov.w	r0, r0, lsl #6
 80195c0:	b2c6      	uxtb	r6, r0
 80195c2:	d0b2      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 80195c4:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 80195c8:	47b8      	blx	r7
 80195ca:	2c02      	cmp	r4, #2
 80195cc:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 80195d0:	b2c6      	uxtb	r6, r0
 80195d2:	d0aa      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 80195d4:	f858 0c08 	ldr.w	r0, [r8, #-8]
 80195d8:	47b8      	blx	r7
 80195da:	2c03      	cmp	r4, #3
 80195dc:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 80195e0:	b2c6      	uxtb	r6, r0
 80195e2:	d0a2      	beq.n	801952a <GUI__CompactPixelIndicesEx+0x4e>
 80195e4:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80195e8:	f108 0810 	add.w	r8, r8, #16
 80195ec:	47b8      	blx	r7
 80195ee:	3c04      	subs	r4, #4
 80195f0:	ea40 0006 	orr.w	r0, r0, r6
 80195f4:	f805 0b01 	strb.w	r0, [r5], #1
 80195f8:	d1dc      	bne.n	80195b4 <GUI__CompactPixelIndicesEx+0xd8>
 80195fa:	e797      	b.n	801952c <GUI__CompactPixelIndicesEx+0x50>
 80195fc:	f100 0808 	add.w	r8, r0, #8
 8019600:	f858 0c08 	ldr.w	r0, [r8, #-8]
 8019604:	47b8      	blx	r7
 8019606:	2c01      	cmp	r4, #1
 8019608:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801960c:	b2c6      	uxtb	r6, r0
 801960e:	d10c      	bne.n	801962a <GUI__CompactPixelIndicesEx+0x14e>
 8019610:	702e      	strb	r6, [r5, #0]
 8019612:	4620      	mov	r0, r4
 8019614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019618:	1e86      	subs	r6, r0, #2
 801961a:	f855 0b04 	ldr.w	r0, [r5], #4
 801961e:	47b8      	blx	r7
 8019620:	3c01      	subs	r4, #1
 8019622:	f826 0f02 	strh.w	r0, [r6, #2]!
 8019626:	d1f8      	bne.n	801961a <GUI__CompactPixelIndicesEx+0x13e>
 8019628:	e780      	b.n	801952c <GUI__CompactPixelIndicesEx+0x50>
 801962a:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801962e:	f108 0808 	add.w	r8, r8, #8
 8019632:	47b8      	blx	r7
 8019634:	3c02      	subs	r4, #2
 8019636:	ea40 0006 	orr.w	r0, r0, r6
 801963a:	f805 0b01 	strb.w	r0, [r5], #1
 801963e:	d1df      	bne.n	8019600 <GUI__CompactPixelIndicesEx+0x124>
 8019640:	e774      	b.n	801952c <GUI__CompactPixelIndicesEx+0x50>
 8019642:	691e      	ldr	r6, [r3, #16]
 8019644:	b13e      	cbz	r6, 8019656 <GUI__CompactPixelIndicesEx+0x17a>
 8019646:	4628      	mov	r0, r5
 8019648:	4622      	mov	r2, r4
 801964a:	2301      	movs	r3, #1
 801964c:	4629      	mov	r1, r5
 801964e:	47b0      	blx	r6
 8019650:	2001      	movs	r0, #1
 8019652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019656:	1e6e      	subs	r6, r5, #1
 8019658:	f855 0b04 	ldr.w	r0, [r5], #4
 801965c:	47b8      	blx	r7
 801965e:	3c01      	subs	r4, #1
 8019660:	f806 0f01 	strb.w	r0, [r6, #1]!
 8019664:	d1f8      	bne.n	8019658 <GUI__CompactPixelIndicesEx+0x17c>
 8019666:	e761      	b.n	801952c <GUI__CompactPixelIndicesEx+0x50>

08019668 <GUI__ExpandPixelIndices>:
 8019668:	2a08      	cmp	r2, #8
 801966a:	dd0c      	ble.n	8019686 <GUI__ExpandPixelIndices+0x1e>
 801966c:	2a10      	cmp	r2, #16
 801966e:	dc31      	bgt.n	80196d4 <GUI__ExpandPixelIndices+0x6c>
 8019670:	0049      	lsls	r1, r1, #1
 8019672:	4408      	add	r0, r1
 8019674:	1843      	adds	r3, r0, r1
 8019676:	1a41      	subs	r1, r0, r1
 8019678:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 801967c:	4288      	cmp	r0, r1
 801967e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8019682:	d1f9      	bne.n	8019678 <GUI__ExpandPixelIndices+0x10>
 8019684:	4770      	bx	lr
 8019686:	3a01      	subs	r2, #1
 8019688:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801968c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801968e:	2a07      	cmp	r2, #7
 8019690:	d81f      	bhi.n	80196d2 <GUI__ExpandPixelIndices+0x6a>
 8019692:	e8df f002 	tbb	[pc, r2]
 8019696:	0443      	.short	0x0443
 8019698:	20202929 	.word	0x20202929
 801969c:	2020      	.short	0x2020
 801969e:	1e4a      	subs	r2, r1, #1
 80196a0:	424c      	negs	r4, r1
 80196a2:	f04f 0e03 	mov.w	lr, #3
 80196a6:	eb00 00a2 	add.w	r0, r0, r2, asr #2
 80196aa:	ea04 010e 	and.w	r1, r4, lr
 80196ae:	e000      	b.n	80196b2 <GUI__ExpandPixelIndices+0x4a>
 80196b0:	3a01      	subs	r2, #1
 80196b2:	004e      	lsls	r6, r1, #1
 80196b4:	7804      	ldrb	r4, [r0, #0]
 80196b6:	3101      	adds	r1, #1
 80196b8:	fa0e f506 	lsl.w	r5, lr, r6
 80196bc:	f021 0703 	bic.w	r7, r1, #3
 80196c0:	eba0 00a1 	sub.w	r0, r0, r1, asr #2
 80196c4:	402c      	ands	r4, r5
 80196c6:	4139      	asrs	r1, r7
 80196c8:	4134      	asrs	r4, r6
 80196ca:	f843 4d04 	str.w	r4, [r3, #-4]!
 80196ce:	2a00      	cmp	r2, #0
 80196d0:	d1ee      	bne.n	80196b0 <GUI__ExpandPixelIndices+0x48>
 80196d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196d4:	4770      	bx	lr
 80196d6:	4408      	add	r0, r1
 80196d8:	1a41      	subs	r1, r0, r1
 80196da:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 80196de:	4288      	cmp	r0, r1
 80196e0:	f843 2d04 	str.w	r2, [r3, #-4]!
 80196e4:	d1f9      	bne.n	80196da <GUI__ExpandPixelIndices+0x72>
 80196e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196e8:	1e4a      	subs	r2, r1, #1
 80196ea:	f04f 0e0f 	mov.w	lr, #15
 80196ee:	f001 0101 	and.w	r1, r1, #1
 80196f2:	eb00 0062 	add.w	r0, r0, r2, asr #1
 80196f6:	e000      	b.n	80196fa <GUI__ExpandPixelIndices+0x92>
 80196f8:	3a01      	subs	r2, #1
 80196fa:	008e      	lsls	r6, r1, #2
 80196fc:	7804      	ldrb	r4, [r0, #0]
 80196fe:	3101      	adds	r1, #1
 8019700:	fa0e f506 	lsl.w	r5, lr, r6
 8019704:	f021 0701 	bic.w	r7, r1, #1
 8019708:	eba0 0061 	sub.w	r0, r0, r1, asr #1
 801970c:	402c      	ands	r4, r5
 801970e:	4139      	asrs	r1, r7
 8019710:	4134      	asrs	r4, r6
 8019712:	f843 4d04 	str.w	r4, [r3, #-4]!
 8019716:	2a00      	cmp	r2, #0
 8019718:	d1ee      	bne.n	80196f8 <GUI__ExpandPixelIndices+0x90>
 801971a:	e7da      	b.n	80196d2 <GUI__ExpandPixelIndices+0x6a>
 801971c:	424c      	negs	r4, r1
 801971e:	1e4a      	subs	r2, r1, #1
 8019720:	2701      	movs	r7, #1
 8019722:	f004 0407 	and.w	r4, r4, #7
 8019726:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 801972a:	e000      	b.n	801972e <GUI__ExpandPixelIndices+0xc6>
 801972c:	3a01      	subs	r2, #1
 801972e:	7806      	ldrb	r6, [r0, #0]
 8019730:	fa07 f104 	lsl.w	r1, r7, r4
 8019734:	1c65      	adds	r5, r4, #1
 8019736:	4031      	ands	r1, r6
 8019738:	f025 0607 	bic.w	r6, r5, #7
 801973c:	eba0 00e5 	sub.w	r0, r0, r5, asr #3
 8019740:	4121      	asrs	r1, r4
 8019742:	fa45 f406 	asr.w	r4, r5, r6
 8019746:	f843 1d04 	str.w	r1, [r3, #-4]!
 801974a:	2a00      	cmp	r2, #0
 801974c:	d1ee      	bne.n	801972c <GUI__ExpandPixelIndices+0xc4>
 801974e:	e7c0      	b.n	80196d2 <GUI__ExpandPixelIndices+0x6a>

08019750 <GUI__ExpandPixelIndicesEx>:
 8019750:	2900      	cmp	r1, #0
 8019752:	dd2a      	ble.n	80197aa <GUI__ExpandPixelIndicesEx+0x5a>
 8019754:	2a08      	cmp	r2, #8
 8019756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801975a:	4604      	mov	r4, r0
 801975c:	685d      	ldr	r5, [r3, #4]
 801975e:	dd03      	ble.n	8019768 <GUI__ExpandPixelIndicesEx+0x18>
 8019760:	2a10      	cmp	r2, #16
 8019762:	dd0c      	ble.n	801977e <GUI__ExpandPixelIndicesEx+0x2e>
 8019764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019768:	1e53      	subs	r3, r2, #1
 801976a:	2b07      	cmp	r3, #7
 801976c:	d805      	bhi.n	801977a <GUI__ExpandPixelIndicesEx+0x2a>
 801976e:	e8df f003 	tbb	[pc, r3]
 8019772:	512a      	.short	0x512a
 8019774:	04047b04 	.word	0x04047b04
 8019778:	1d04      	.short	0x1d04
 801977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801977e:	695e      	ldr	r6, [r3, #20]
 8019780:	b136      	cbz	r6, 8019790 <GUI__ExpandPixelIndicesEx+0x40>
 8019782:	460a      	mov	r2, r1
 8019784:	46b4      	mov	ip, r6
 8019786:	4621      	mov	r1, r4
 8019788:	2302      	movs	r3, #2
 801978a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801978e:	4760      	bx	ip
 8019790:	0049      	lsls	r1, r1, #1
 8019792:	440c      	add	r4, r1
 8019794:	1866      	adds	r6, r4, r1
 8019796:	1a67      	subs	r7, r4, r1
 8019798:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 801979c:	47a8      	blx	r5
 801979e:	f846 0d04 	str.w	r0, [r6, #-4]!
 80197a2:	42bc      	cmp	r4, r7
 80197a4:	d1f8      	bne.n	8019798 <GUI__ExpandPixelIndicesEx+0x48>
 80197a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197aa:	4770      	bx	lr
 80197ac:	1866      	adds	r6, r4, r1
 80197ae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80197b2:	1a77      	subs	r7, r6, r1
 80197b4:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80197b8:	47a8      	blx	r5
 80197ba:	f844 0d04 	str.w	r0, [r4, #-4]!
 80197be:	42be      	cmp	r6, r7
 80197c0:	d1f8      	bne.n	80197b4 <GUI__ExpandPixelIndicesEx+0x64>
 80197c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197c6:	1e4f      	subs	r7, r1, #1
 80197c8:	2680      	movs	r6, #128	; 0x80
 80197ca:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 80197ce:	10fb      	asrs	r3, r7, #3
 80197d0:	f007 0807 	and.w	r8, r7, #7
 80197d4:	448a      	add	sl, r1
 80197d6:	fa46 f608 	asr.w	r6, r6, r8
 80197da:	1e59      	subs	r1, r3, #1
 80197dc:	f814 9003 	ldrb.w	r9, [r4, r3]
 80197e0:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 80197e4:	b2f6      	uxtb	r6, r6
 80197e6:	440c      	add	r4, r1
 80197e8:	ea06 0009 	and.w	r0, r6, r9
 80197ec:	f1c8 0307 	rsb	r3, r8, #7
 80197f0:	0076      	lsls	r6, r6, #1
 80197f2:	4118      	asrs	r0, r3
 80197f4:	47a8      	blx	r5
 80197f6:	f84a 0904 	str.w	r0, [sl], #-4
 80197fa:	f1b8 0f00 	cmp.w	r8, #0
 80197fe:	d15f      	bne.n	80198c0 <GUI__ExpandPixelIndicesEx+0x170>
 8019800:	f894 9000 	ldrb.w	r9, [r4]
 8019804:	2601      	movs	r6, #1
 8019806:	3c01      	subs	r4, #1
 8019808:	f04f 0807 	mov.w	r8, #7
 801980c:	2f00      	cmp	r7, #0
 801980e:	d0b4      	beq.n	801977a <GUI__ExpandPixelIndicesEx+0x2a>
 8019810:	3f01      	subs	r7, #1
 8019812:	e7e9      	b.n	80197e8 <GUI__ExpandPixelIndicesEx+0x98>
 8019814:	1e4f      	subs	r7, r1, #1
 8019816:	26c0      	movs	r6, #192	; 0xc0
 8019818:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 801981c:	f007 0903 	and.w	r9, r7, #3
 8019820:	10bb      	asrs	r3, r7, #2
 8019822:	448a      	add	sl, r1
 8019824:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8019828:	1e59      	subs	r1, r3, #1
 801982a:	f814 8003 	ldrb.w	r8, [r4, r3]
 801982e:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8019832:	4106      	asrs	r6, r0
 8019834:	440c      	add	r4, r1
 8019836:	b2f6      	uxtb	r6, r6
 8019838:	ea06 0308 	and.w	r3, r6, r8
 801983c:	f1c0 0006 	rsb	r0, r0, #6
 8019840:	00b6      	lsls	r6, r6, #2
 8019842:	fa43 f000 	asr.w	r0, r3, r0
 8019846:	47a8      	blx	r5
 8019848:	f84a 0904 	str.w	r0, [sl], #-4
 801984c:	f1b9 0f00 	cmp.w	r9, #0
 8019850:	d13e      	bne.n	80198d0 <GUI__ExpandPixelIndicesEx+0x180>
 8019852:	2603      	movs	r6, #3
 8019854:	f894 8000 	ldrb.w	r8, [r4]
 8019858:	3c01      	subs	r4, #1
 801985a:	46b1      	mov	r9, r6
 801985c:	2f00      	cmp	r7, #0
 801985e:	d08c      	beq.n	801977a <GUI__ExpandPixelIndicesEx+0x2a>
 8019860:	3f01      	subs	r7, #1
 8019862:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8019866:	e7e7      	b.n	8019838 <GUI__ExpandPixelIndicesEx+0xe8>
 8019868:	1e4f      	subs	r7, r1, #1
 801986a:	26f0      	movs	r6, #240	; 0xf0
 801986c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8019870:	f007 0901 	and.w	r9, r7, #1
 8019874:	107b      	asrs	r3, r7, #1
 8019876:	448a      	add	sl, r1
 8019878:	ea4f 0089 	mov.w	r0, r9, lsl #2
 801987c:	1e59      	subs	r1, r3, #1
 801987e:	f814 8003 	ldrb.w	r8, [r4, r3]
 8019882:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8019886:	4106      	asrs	r6, r0
 8019888:	440c      	add	r4, r1
 801988a:	b2f6      	uxtb	r6, r6
 801988c:	ea06 0308 	and.w	r3, r6, r8
 8019890:	f1c0 0004 	rsb	r0, r0, #4
 8019894:	0136      	lsls	r6, r6, #4
 8019896:	fa43 f000 	asr.w	r0, r3, r0
 801989a:	47a8      	blx	r5
 801989c:	f84a 0904 	str.w	r0, [sl], #-4
 80198a0:	f1b9 0f00 	cmp.w	r9, #0
 80198a4:	d110      	bne.n	80198c8 <GUI__ExpandPixelIndicesEx+0x178>
 80198a6:	f894 8000 	ldrb.w	r8, [r4]
 80198aa:	260f      	movs	r6, #15
 80198ac:	3c01      	subs	r4, #1
 80198ae:	f04f 0901 	mov.w	r9, #1
 80198b2:	2f00      	cmp	r7, #0
 80198b4:	f43f af61 	beq.w	801977a <GUI__ExpandPixelIndicesEx+0x2a>
 80198b8:	3f01      	subs	r7, #1
 80198ba:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80198be:	e7e5      	b.n	801988c <GUI__ExpandPixelIndicesEx+0x13c>
 80198c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80198c4:	b2f6      	uxtb	r6, r6
 80198c6:	e7a1      	b.n	801980c <GUI__ExpandPixelIndicesEx+0xbc>
 80198c8:	b2f6      	uxtb	r6, r6
 80198ca:	f04f 0900 	mov.w	r9, #0
 80198ce:	e7f0      	b.n	80198b2 <GUI__ExpandPixelIndicesEx+0x162>
 80198d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80198d4:	b2f6      	uxtb	r6, r6
 80198d6:	e7c1      	b.n	801985c <GUI__ExpandPixelIndicesEx+0x10c>

080198d8 <GUI__HandleEOLine>:
 80198d8:	b510      	push	{r4, lr}
 80198da:	4604      	mov	r4, r0
 80198dc:	b082      	sub	sp, #8
 80198de:	6823      	ldr	r3, [r4, #0]
 80198e0:	a802      	add	r0, sp, #8
 80198e2:	f840 3d04 	str.w	r3, [r0, #-4]!
 80198e6:	f7fe ff77 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 80198ea:	b148      	cbz	r0, 8019900 <GUI__HandleEOLine+0x28>
 80198ec:	280a      	cmp	r0, #10
 80198ee:	d002      	beq.n	80198f6 <GUI__HandleEOLine+0x1e>
 80198f0:	2000      	movs	r0, #0
 80198f2:	b002      	add	sp, #8
 80198f4:	bd10      	pop	{r4, pc}
 80198f6:	9b01      	ldr	r3, [sp, #4]
 80198f8:	2000      	movs	r0, #0
 80198fa:	6023      	str	r3, [r4, #0]
 80198fc:	b002      	add	sp, #8
 80198fe:	bd10      	pop	{r4, pc}
 8019900:	2001      	movs	r0, #1
 8019902:	b002      	add	sp, #8
 8019904:	bd10      	pop	{r4, pc}
 8019906:	bf00      	nop

08019908 <GUI__IntersectRect>:
 8019908:	f9b1 3000 	ldrsh.w	r3, [r1]
 801990c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019910:	429a      	cmp	r2, r3
 8019912:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019916:	bfb8      	it	lt
 8019918:	8003      	strhlt	r3, [r0, #0]
 801991a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801991e:	429a      	cmp	r2, r3
 8019920:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019924:	bfb8      	it	lt
 8019926:	8043      	strhlt	r3, [r0, #2]
 8019928:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801992c:	429a      	cmp	r2, r3
 801992e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019932:	bfc8      	it	gt
 8019934:	8083      	strhgt	r3, [r0, #4]
 8019936:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801993a:	429a      	cmp	r2, r3
 801993c:	bfc8      	it	gt
 801993e:	80c3      	strhgt	r3, [r0, #6]
 8019940:	4770      	bx	lr
 8019942:	bf00      	nop

08019944 <GUI__IntersectRects>:
 8019944:	f9b2 3000 	ldrsh.w	r3, [r2]
 8019948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801994a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801994e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019952:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8019956:	42a3      	cmp	r3, r4
 8019958:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801995c:	bfb8      	it	lt
 801995e:	4623      	movlt	r3, r4
 8019960:	45ae      	cmp	lr, r5
 8019962:	4674      	mov	r4, lr
 8019964:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8019968:	bfb8      	it	lt
 801996a:	462c      	movlt	r4, r5
 801996c:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8019970:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8019974:	4639      	mov	r1, r7
 8019976:	42af      	cmp	r7, r5
 8019978:	8003      	strh	r3, [r0, #0]
 801997a:	8044      	strh	r4, [r0, #2]
 801997c:	bfa8      	it	ge
 801997e:	4629      	movge	r1, r5
 8019980:	42b2      	cmp	r2, r6
 8019982:	bfa8      	it	ge
 8019984:	4632      	movge	r2, r6
 8019986:	8081      	strh	r1, [r0, #4]
 8019988:	4294      	cmp	r4, r2
 801998a:	bfd8      	it	le
 801998c:	428b      	cmple	r3, r1
 801998e:	80c2      	strh	r2, [r0, #6]
 8019990:	bfcc      	ite	gt
 8019992:	2301      	movgt	r3, #1
 8019994:	2300      	movle	r3, #0
 8019996:	f083 0001 	eor.w	r0, r3, #1
 801999a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801999c <GUI__memset>:
 801999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801999e:	4606      	mov	r6, r0
 80199a0:	b14a      	cbz	r2, 80199b6 <GUI__memset+0x1a>
 80199a2:	0784      	lsls	r4, r0, #30
 80199a4:	b2c9      	uxtb	r1, r1
 80199a6:	d008      	beq.n	80199ba <GUI__memset+0x1e>
 80199a8:	e001      	b.n	80199ae <GUI__memset+0x12>
 80199aa:	0783      	lsls	r3, r0, #30
 80199ac:	d005      	beq.n	80199ba <GUI__memset+0x1e>
 80199ae:	3a01      	subs	r2, #1
 80199b0:	f800 1b01 	strb.w	r1, [r0], #1
 80199b4:	d1f9      	bne.n	80199aa <GUI__memset+0xe>
 80199b6:	4630      	mov	r0, r6
 80199b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199ba:	0897      	lsrs	r7, r2, #2
 80199bc:	463b      	mov	r3, r7
 80199be:	b34f      	cbz	r7, 8019a14 <GUI__memset+0x78>
 80199c0:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 80199c4:	2f03      	cmp	r7, #3
 80199c6:	f002 0203 	and.w	r2, r2, #3
 80199ca:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 80199ce:	d915      	bls.n	80199fc <GUI__memset+0x60>
 80199d0:	f100 0310 	add.w	r3, r0, #16
 80199d4:	463d      	mov	r5, r7
 80199d6:	3d04      	subs	r5, #4
 80199d8:	f843 4c10 	str.w	r4, [r3, #-16]
 80199dc:	f843 4c0c 	str.w	r4, [r3, #-12]
 80199e0:	3310      	adds	r3, #16
 80199e2:	2d03      	cmp	r5, #3
 80199e4:	f843 4c18 	str.w	r4, [r3, #-24]
 80199e8:	f843 4c14 	str.w	r4, [r3, #-20]
 80199ec:	dcf3      	bgt.n	80199d6 <GUI__memset+0x3a>
 80199ee:	3f04      	subs	r7, #4
 80199f0:	08bb      	lsrs	r3, r7, #2
 80199f2:	1c5d      	adds	r5, r3, #1
 80199f4:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 80199f8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80199fc:	b143      	cbz	r3, 8019a10 <GUI__memset+0x74>
 80199fe:	2b01      	cmp	r3, #1
 8019a00:	6004      	str	r4, [r0, #0]
 8019a02:	d003      	beq.n	8019a0c <GUI__memset+0x70>
 8019a04:	2b02      	cmp	r3, #2
 8019a06:	6044      	str	r4, [r0, #4]
 8019a08:	bf18      	it	ne
 8019a0a:	6084      	strne	r4, [r0, #8]
 8019a0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019a10:	2a00      	cmp	r2, #0
 8019a12:	d0d0      	beq.n	80199b6 <GUI__memset+0x1a>
 8019a14:	f00b fce8 	bl	80253e8 <memset>
 8019a18:	4630      	mov	r0, r6
 8019a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019a1c <GUI__memset16>:
 8019a1c:	b470      	push	{r4, r5, r6}
 8019a1e:	0784      	lsls	r4, r0, #30
 8019a20:	d502      	bpl.n	8019a28 <GUI__memset16+0xc>
 8019a22:	8001      	strh	r1, [r0, #0]
 8019a24:	3a01      	subs	r2, #1
 8019a26:	3002      	adds	r0, #2
 8019a28:	0856      	lsrs	r6, r2, #1
 8019a2a:	d00d      	beq.n	8019a48 <GUI__memset16+0x2c>
 8019a2c:	2e03      	cmp	r6, #3
 8019a2e:	4633      	mov	r3, r6
 8019a30:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8019a34:	d80d      	bhi.n	8019a52 <GUI__memset16+0x36>
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	6004      	str	r4, [r0, #0]
 8019a3a:	d003      	beq.n	8019a44 <GUI__memset16+0x28>
 8019a3c:	2b02      	cmp	r3, #2
 8019a3e:	6044      	str	r4, [r0, #4]
 8019a40:	bf18      	it	ne
 8019a42:	6084      	strne	r4, [r0, #8]
 8019a44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019a48:	07d3      	lsls	r3, r2, #31
 8019a4a:	bc70      	pop	{r4, r5, r6}
 8019a4c:	bf48      	it	mi
 8019a4e:	8001      	strhmi	r1, [r0, #0]
 8019a50:	4770      	bx	lr
 8019a52:	f100 0310 	add.w	r3, r0, #16
 8019a56:	4635      	mov	r5, r6
 8019a58:	3d04      	subs	r5, #4
 8019a5a:	f843 4c10 	str.w	r4, [r3, #-16]
 8019a5e:	f843 4c0c 	str.w	r4, [r3, #-12]
 8019a62:	3310      	adds	r3, #16
 8019a64:	2d03      	cmp	r5, #3
 8019a66:	f843 4c18 	str.w	r4, [r3, #-24]
 8019a6a:	f843 4c14 	str.w	r4, [r3, #-20]
 8019a6e:	dcf3      	bgt.n	8019a58 <GUI__memset16+0x3c>
 8019a70:	3e04      	subs	r6, #4
 8019a72:	08b3      	lsrs	r3, r6, #2
 8019a74:	1c5d      	adds	r5, r3, #1
 8019a76:	ebb6 0383 	subs.w	r3, r6, r3, lsl #2
 8019a7a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8019a7e:	d1da      	bne.n	8019a36 <GUI__memset16+0x1a>
 8019a80:	e7e2      	b.n	8019a48 <GUI__memset16+0x2c>
 8019a82:	bf00      	nop

08019a84 <GUI__sqrt32>:
 8019a84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8019a88:	bf2b      	itete	cs
 8019a8a:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 8019a8e:	2300      	movcc	r3, #0
 8019a90:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8019a94:	2200      	movcc	r2, #0
 8019a96:	085b      	lsrs	r3, r3, #1
 8019a98:	1a80      	subs	r0, r0, r2
 8019a9a:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8019a9e:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 8019aa2:	4290      	cmp	r0, r2
 8019aa4:	bf2c      	ite	cs
 8019aa6:	460b      	movcs	r3, r1
 8019aa8:	2200      	movcc	r2, #0
 8019aaa:	085b      	lsrs	r3, r3, #1
 8019aac:	1a82      	subs	r2, r0, r2
 8019aae:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 8019ab2:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 8019ab6:	428a      	cmp	r2, r1
 8019ab8:	bf2c      	ite	cs
 8019aba:	4603      	movcs	r3, r0
 8019abc:	2100      	movcc	r1, #0
 8019abe:	085b      	lsrs	r3, r3, #1
 8019ac0:	1a50      	subs	r0, r2, r1
 8019ac2:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 8019ac6:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 8019aca:	4290      	cmp	r0, r2
 8019acc:	bf2c      	ite	cs
 8019ace:	460b      	movcs	r3, r1
 8019ad0:	2200      	movcc	r2, #0
 8019ad2:	085b      	lsrs	r3, r3, #1
 8019ad4:	1a81      	subs	r1, r0, r2
 8019ad6:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 8019ada:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 8019ade:	4291      	cmp	r1, r2
 8019ae0:	bf2c      	ite	cs
 8019ae2:	4603      	movcs	r3, r0
 8019ae4:	2200      	movcc	r2, #0
 8019ae6:	085b      	lsrs	r3, r3, #1
 8019ae8:	1a8a      	subs	r2, r1, r2
 8019aea:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 8019aee:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 8019af2:	428a      	cmp	r2, r1
 8019af4:	bf2c      	ite	cs
 8019af6:	4603      	movcs	r3, r0
 8019af8:	2100      	movcc	r1, #0
 8019afa:	085b      	lsrs	r3, r3, #1
 8019afc:	1a50      	subs	r0, r2, r1
 8019afe:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8019b02:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 8019b06:	4290      	cmp	r0, r2
 8019b08:	bf2c      	ite	cs
 8019b0a:	460b      	movcs	r3, r1
 8019b0c:	2200      	movcc	r2, #0
 8019b0e:	085b      	lsrs	r3, r3, #1
 8019b10:	1a81      	subs	r1, r0, r2
 8019b12:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8019b16:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8019b1a:	4291      	cmp	r1, r2
 8019b1c:	bf2c      	ite	cs
 8019b1e:	4603      	movcs	r3, r0
 8019b20:	2200      	movcc	r2, #0
 8019b22:	085b      	lsrs	r3, r3, #1
 8019b24:	1a8a      	subs	r2, r1, r2
 8019b26:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8019b2a:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8019b2e:	428a      	cmp	r2, r1
 8019b30:	bf2c      	ite	cs
 8019b32:	4603      	movcs	r3, r0
 8019b34:	2100      	movcc	r1, #0
 8019b36:	085b      	lsrs	r3, r3, #1
 8019b38:	1a50      	subs	r0, r2, r1
 8019b3a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8019b3e:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 8019b42:	4290      	cmp	r0, r2
 8019b44:	bf2c      	ite	cs
 8019b46:	460b      	movcs	r3, r1
 8019b48:	2200      	movcc	r2, #0
 8019b4a:	085b      	lsrs	r3, r3, #1
 8019b4c:	1a81      	subs	r1, r0, r2
 8019b4e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8019b52:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8019b56:	4291      	cmp	r1, r2
 8019b58:	bf2c      	ite	cs
 8019b5a:	4603      	movcs	r3, r0
 8019b5c:	2200      	movcc	r2, #0
 8019b5e:	085b      	lsrs	r3, r3, #1
 8019b60:	1a8a      	subs	r2, r1, r2
 8019b62:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8019b66:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8019b6a:	428a      	cmp	r2, r1
 8019b6c:	bf2c      	ite	cs
 8019b6e:	4603      	movcs	r3, r0
 8019b70:	2100      	movcc	r1, #0
 8019b72:	085b      	lsrs	r3, r3, #1
 8019b74:	1a50      	subs	r0, r2, r1
 8019b76:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019b7a:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8019b7e:	4290      	cmp	r0, r2
 8019b80:	bf2c      	ite	cs
 8019b82:	460b      	movcs	r3, r1
 8019b84:	2200      	movcc	r2, #0
 8019b86:	085b      	lsrs	r3, r3, #1
 8019b88:	1a81      	subs	r1, r0, r2
 8019b8a:	f103 0210 	add.w	r2, r3, #16
 8019b8e:	f103 0020 	add.w	r0, r3, #32
 8019b92:	4291      	cmp	r1, r2
 8019b94:	bf2c      	ite	cs
 8019b96:	4603      	movcs	r3, r0
 8019b98:	2200      	movcc	r2, #0
 8019b9a:	085b      	lsrs	r3, r3, #1
 8019b9c:	1a8a      	subs	r2, r1, r2
 8019b9e:	1d19      	adds	r1, r3, #4
 8019ba0:	f103 0008 	add.w	r0, r3, #8
 8019ba4:	428a      	cmp	r2, r1
 8019ba6:	bf2c      	ite	cs
 8019ba8:	4603      	movcs	r3, r0
 8019baa:	2100      	movcc	r1, #0
 8019bac:	085b      	lsrs	r3, r3, #1
 8019bae:	1a52      	subs	r2, r2, r1
 8019bb0:	1c58      	adds	r0, r3, #1
 8019bb2:	1c99      	adds	r1, r3, #2
 8019bb4:	4290      	cmp	r0, r2
 8019bb6:	bf94      	ite	ls
 8019bb8:	4608      	movls	r0, r1
 8019bba:	4618      	movhi	r0, r3
 8019bbc:	0840      	lsrs	r0, r0, #1
 8019bbe:	4770      	bx	lr

08019bc0 <GUI__SinHQ>:
 8019bc0:	2800      	cmp	r0, #0
 8019bc2:	b4f0      	push	{r4, r5, r6, r7}
 8019bc4:	db3f      	blt.n	8019c46 <GUI__SinHQ+0x86>
 8019bc6:	f04f 36ff 	mov.w	r6, #4294967295
 8019bca:	2101      	movs	r1, #1
 8019bcc:	4b20      	ldr	r3, [pc, #128]	; (8019c50 <GUI__SinHQ+0x90>)
 8019bce:	17c5      	asrs	r5, r0, #31
 8019bd0:	4c20      	ldr	r4, [pc, #128]	; (8019c54 <GUI__SinHQ+0x94>)
 8019bd2:	fb83 2300 	smull	r2, r3, r3, r0
 8019bd6:	4a20      	ldr	r2, [pc, #128]	; (8019c58 <GUI__SinHQ+0x98>)
 8019bd8:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 8019bdc:	fb04 0313 	mls	r3, r4, r3, r0
 8019be0:	4293      	cmp	r3, r2
 8019be2:	dd04      	ble.n	8019bee <GUI__SinHQ+0x2e>
 8019be4:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 8019be8:	4631      	mov	r1, r6
 8019bea:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019bee:	4a1b      	ldr	r2, [pc, #108]	; (8019c5c <GUI__SinHQ+0x9c>)
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	dd03      	ble.n	8019bfc <GUI__SinHQ+0x3c>
 8019bf4:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 8019bf8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8019bfc:	4c18      	ldr	r4, [pc, #96]	; (8019c60 <GUI__SinHQ+0xa0>)
 8019bfe:	17da      	asrs	r2, r3, #31
 8019c00:	fb84 5003 	smull	r5, r0, r4, r3
 8019c04:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 8019c08:	2a5a      	cmp	r2, #90	; 0x5a
 8019c0a:	d015      	beq.n	8019c38 <GUI__SinHQ+0x78>
 8019c0c:	1c57      	adds	r7, r2, #1
 8019c0e:	4d15      	ldr	r5, [pc, #84]	; (8019c64 <GUI__SinHQ+0xa4>)
 8019c10:	4e15      	ldr	r6, [pc, #84]	; (8019c68 <GUI__SinHQ+0xa8>)
 8019c12:	2901      	cmp	r1, #1
 8019c14:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8019c18:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8019c1c:	fb06 3202 	mla	r2, r6, r2, r3
 8019c20:	eba5 0300 	sub.w	r3, r5, r0
 8019c24:	fb02 f203 	mul.w	r2, r2, r3
 8019c28:	fba4 2302 	umull	r2, r3, r4, r2
 8019c2c:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 8019c30:	bcf0      	pop	{r4, r5, r6, r7}
 8019c32:	bf18      	it	ne
 8019c34:	4240      	negne	r0, r0
 8019c36:	4770      	bx	lr
 8019c38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8019c3c:	2901      	cmp	r1, #1
 8019c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8019c40:	bf18      	it	ne
 8019c42:	4240      	negne	r0, r0
 8019c44:	4770      	bx	lr
 8019c46:	4240      	negs	r0, r0
 8019c48:	2601      	movs	r6, #1
 8019c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8019c4e:	e7bd      	b.n	8019bcc <GUI__SinHQ+0xc>
 8019c50:	5d34edef 	.word	0x5d34edef
 8019c54:	00057e40 	.word	0x00057e40
 8019c58:	0002bf20 	.word	0x0002bf20
 8019c5c:	00015f90 	.word	0x00015f90
 8019c60:	10624dd3 	.word	0x10624dd3
 8019c64:	08027740 	.word	0x08027740
 8019c68:	fffffc18 	.word	0xfffffc18

08019c6c <GUI__CosHQ>:
 8019c6c:	4a24      	ldr	r2, [pc, #144]	; (8019d00 <GUI__CosHQ+0x94>)
 8019c6e:	4402      	add	r2, r0
 8019c70:	2a00      	cmp	r2, #0
 8019c72:	b4f0      	push	{r4, r5, r6, r7}
 8019c74:	db3f      	blt.n	8019cf6 <GUI__CosHQ+0x8a>
 8019c76:	f04f 36ff 	mov.w	r6, #4294967295
 8019c7a:	2101      	movs	r1, #1
 8019c7c:	4b21      	ldr	r3, [pc, #132]	; (8019d04 <GUI__CosHQ+0x98>)
 8019c7e:	17d5      	asrs	r5, r2, #31
 8019c80:	4c21      	ldr	r4, [pc, #132]	; (8019d08 <GUI__CosHQ+0x9c>)
 8019c82:	fb83 0302 	smull	r0, r3, r3, r2
 8019c86:	4821      	ldr	r0, [pc, #132]	; (8019d0c <GUI__CosHQ+0xa0>)
 8019c88:	ebc5 4363 	rsb	r3, r5, r3, asr #17
 8019c8c:	fb04 2313 	mls	r3, r4, r3, r2
 8019c90:	4283      	cmp	r3, r0
 8019c92:	dd04      	ble.n	8019c9e <GUI__CosHQ+0x32>
 8019c94:	f5a3 332f 	sub.w	r3, r3, #179200	; 0x2bc00
 8019c98:	4631      	mov	r1, r6
 8019c9a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8019c9e:	4a18      	ldr	r2, [pc, #96]	; (8019d00 <GUI__CosHQ+0x94>)
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	dd03      	ble.n	8019cac <GUI__CosHQ+0x40>
 8019ca4:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
 8019ca8:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8019cac:	4c18      	ldr	r4, [pc, #96]	; (8019d10 <GUI__CosHQ+0xa4>)
 8019cae:	17da      	asrs	r2, r3, #31
 8019cb0:	fb84 5003 	smull	r5, r0, r4, r3
 8019cb4:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
 8019cb8:	2a5a      	cmp	r2, #90	; 0x5a
 8019cba:	d015      	beq.n	8019ce8 <GUI__CosHQ+0x7c>
 8019cbc:	1c57      	adds	r7, r2, #1
 8019cbe:	4d15      	ldr	r5, [pc, #84]	; (8019d14 <GUI__CosHQ+0xa8>)
 8019cc0:	4e15      	ldr	r6, [pc, #84]	; (8019d18 <GUI__CosHQ+0xac>)
 8019cc2:	2901      	cmp	r1, #1
 8019cc4:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8019cc8:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 8019ccc:	fb06 3202 	mla	r2, r6, r2, r3
 8019cd0:	eba5 0300 	sub.w	r3, r5, r0
 8019cd4:	fb02 f203 	mul.w	r2, r2, r3
 8019cd8:	fba4 2302 	umull	r2, r3, r4, r2
 8019cdc:	eb00 1093 	add.w	r0, r0, r3, lsr #6
 8019ce0:	bcf0      	pop	{r4, r5, r6, r7}
 8019ce2:	bf18      	it	ne
 8019ce4:	4240      	negne	r0, r0
 8019ce6:	4770      	bx	lr
 8019ce8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8019cec:	2901      	cmp	r1, #1
 8019cee:	bcf0      	pop	{r4, r5, r6, r7}
 8019cf0:	bf18      	it	ne
 8019cf2:	4240      	negne	r0, r0
 8019cf4:	4770      	bx	lr
 8019cf6:	4252      	negs	r2, r2
 8019cf8:	2601      	movs	r6, #1
 8019cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8019cfe:	e7bd      	b.n	8019c7c <GUI__CosHQ+0x10>
 8019d00:	00015f90 	.word	0x00015f90
 8019d04:	5d34edef 	.word	0x5d34edef
 8019d08:	00057e40 	.word	0x00057e40
 8019d0c:	0002bf20 	.word	0x0002bf20
 8019d10:	10624dd3 	.word	0x10624dd3
 8019d14:	08027740 	.word	0x08027740
 8019d18:	fffffc18 	.word	0xfffffc18

08019d1c <_GetWordWrap>:
 8019d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d20:	b085      	sub	sp, #20
 8019d22:	4689      	mov	r9, r1
 8019d24:	f10d 0810 	add.w	r8, sp, #16
 8019d28:	9202      	str	r2, [sp, #8]
 8019d2a:	f848 0d04 	str.w	r0, [r8, #-4]!
 8019d2e:	4640      	mov	r0, r8
 8019d30:	f7fe fd52 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019d34:	f04f 0e00 	mov.w	lr, #0
 8019d38:	4604      	mov	r4, r0
 8019d3a:	4682      	mov	sl, r0
 8019d3c:	46f3      	mov	fp, lr
 8019d3e:	4677      	mov	r7, lr
 8019d40:	4675      	mov	r5, lr
 8019d42:	4676      	mov	r6, lr
 8019d44:	b1dc      	cbz	r4, 8019d7e <_GetWordWrap+0x62>
 8019d46:	2c0a      	cmp	r4, #10
 8019d48:	d019      	beq.n	8019d7e <_GetWordWrap+0x62>
 8019d4a:	2c20      	cmp	r4, #32
 8019d4c:	d024      	beq.n	8019d98 <_GetWordWrap+0x7c>
 8019d4e:	f1ba 0f20 	cmp.w	sl, #32
 8019d52:	d121      	bne.n	8019d98 <_GetWordWrap+0x7c>
 8019d54:	4620      	mov	r0, r4
 8019d56:	f008 fedf 	bl	8022b18 <GUI_GetCharDistX>
 8019d5a:	4406      	add	r6, r0
 8019d5c:	4683      	mov	fp, r0
 8019d5e:	45b1      	cmp	r9, r6
 8019d60:	da00      	bge.n	8019d64 <_GetWordWrap+0x48>
 8019d62:	b965      	cbnz	r5, 8019d7e <_GetWordWrap+0x62>
 8019d64:	1c6b      	adds	r3, r5, #1
 8019d66:	4640      	mov	r0, r8
 8019d68:	462f      	mov	r7, r5
 8019d6a:	9301      	str	r3, [sp, #4]
 8019d6c:	f7fe fd34 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019d70:	9b01      	ldr	r3, [sp, #4]
 8019d72:	4682      	mov	sl, r0
 8019d74:	461d      	mov	r5, r3
 8019d76:	46a6      	mov	lr, r4
 8019d78:	4604      	mov	r4, r0
 8019d7a:	2c00      	cmp	r4, #0
 8019d7c:	d1e3      	bne.n	8019d46 <_GetWordWrap+0x2a>
 8019d7e:	462f      	mov	r7, r5
 8019d80:	9b02      	ldr	r3, [sp, #8]
 8019d82:	2f00      	cmp	r7, #0
 8019d84:	bf08      	it	eq
 8019d86:	462f      	moveq	r7, r5
 8019d88:	b113      	cbz	r3, 8019d90 <_GetWordWrap+0x74>
 8019d8a:	ebcb 0606 	rsb	r6, fp, r6
 8019d8e:	601e      	str	r6, [r3, #0]
 8019d90:	4638      	mov	r0, r7
 8019d92:	b005      	add	sp, #20
 8019d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d98:	f1ae 0320 	sub.w	r3, lr, #32
 8019d9c:	fab3 f383 	clz	r3, r3
 8019da0:	095b      	lsrs	r3, r3, #5
 8019da2:	45a6      	cmp	lr, r4
 8019da4:	bf18      	it	ne
 8019da6:	f043 0301 	orrne.w	r3, r3, #1
 8019daa:	2c20      	cmp	r4, #32
 8019dac:	bf14      	ite	ne
 8019dae:	2300      	movne	r3, #0
 8019db0:	f003 0301 	andeq.w	r3, r3, #1
 8019db4:	bb23      	cbnz	r3, 8019e00 <_GetWordWrap+0xe4>
 8019db6:	4b14      	ldr	r3, [pc, #80]	; (8019e08 <_GetWordWrap+0xec>)
 8019db8:	6858      	ldr	r0, [r3, #4]
 8019dba:	6819      	ldr	r1, [r3, #0]
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	dd0d      	ble.n	8019ddc <_GetWordWrap+0xc0>
 8019dc0:	f8b1 e000 	ldrh.w	lr, [r1]
 8019dc4:	1c8b      	adds	r3, r1, #2
 8019dc6:	45a6      	cmp	lr, r4
 8019dc8:	d01c      	beq.n	8019e04 <_GetWordWrap+0xe8>
 8019dca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8019dce:	e003      	b.n	8019dd8 <_GetWordWrap+0xbc>
 8019dd0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8019dd4:	42a1      	cmp	r1, r4
 8019dd6:	d015      	beq.n	8019e04 <_GetWordWrap+0xe8>
 8019dd8:	4298      	cmp	r0, r3
 8019dda:	d1f9      	bne.n	8019dd0 <_GetWordWrap+0xb4>
 8019ddc:	4620      	mov	r0, r4
 8019dde:	f008 fe9b 	bl	8022b18 <GUI_GetCharDistX>
 8019de2:	4406      	add	r6, r0
 8019de4:	4683      	mov	fp, r0
 8019de6:	454e      	cmp	r6, r9
 8019de8:	dd01      	ble.n	8019dee <_GetWordWrap+0xd2>
 8019dea:	2d00      	cmp	r5, #0
 8019dec:	d1c8      	bne.n	8019d80 <_GetWordWrap+0x64>
 8019dee:	4640      	mov	r0, r8
 8019df0:	3501      	adds	r5, #1
 8019df2:	f7fe fcf1 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019df6:	f1ba 0f00 	cmp.w	sl, #0
 8019dfa:	bf08      	it	eq
 8019dfc:	4682      	moveq	sl, r0
 8019dfe:	e7ba      	b.n	8019d76 <_GetWordWrap+0x5a>
 8019e00:	462f      	mov	r7, r5
 8019e02:	e7eb      	b.n	8019ddc <_GetWordWrap+0xc0>
 8019e04:	1c6f      	adds	r7, r5, #1
 8019e06:	e7e9      	b.n	8019ddc <_GetWordWrap+0xc0>
 8019e08:	200003c0 	.word	0x200003c0

08019e0c <_GetCharWrap>:
 8019e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e10:	b082      	sub	sp, #8
 8019e12:	2400      	movs	r4, #0
 8019e14:	4688      	mov	r8, r1
 8019e16:	af02      	add	r7, sp, #8
 8019e18:	4625      	mov	r5, r4
 8019e1a:	f847 0d04 	str.w	r0, [r7, #-4]!
 8019e1e:	e009      	b.n	8019e34 <_GetCharWrap+0x28>
 8019e20:	f008 fe7a 	bl	8022b18 <GUI_GetCharDistX>
 8019e24:	4405      	add	r5, r0
 8019e26:	2c00      	cmp	r4, #0
 8019e28:	bf18      	it	ne
 8019e2a:	4545      	cmpne	r5, r8
 8019e2c:	dc08      	bgt.n	8019e40 <_GetCharWrap+0x34>
 8019e2e:	2e0a      	cmp	r6, #10
 8019e30:	d006      	beq.n	8019e40 <_GetCharWrap+0x34>
 8019e32:	3401      	adds	r4, #1
 8019e34:	4638      	mov	r0, r7
 8019e36:	f7fe fccf 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019e3a:	4606      	mov	r6, r0
 8019e3c:	2800      	cmp	r0, #0
 8019e3e:	d1ef      	bne.n	8019e20 <_GetCharWrap+0x14>
 8019e40:	4620      	mov	r0, r4
 8019e42:	b002      	add	sp, #8
 8019e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e48 <GUI__WrapGetNumCharsDisp>:
 8019e48:	2a01      	cmp	r2, #1
 8019e4a:	d008      	beq.n	8019e5e <GUI__WrapGetNumCharsDisp+0x16>
 8019e4c:	2a02      	cmp	r2, #2
 8019e4e:	d102      	bne.n	8019e56 <GUI__WrapGetNumCharsDisp+0xe>
 8019e50:	4b05      	ldr	r3, [pc, #20]	; (8019e68 <GUI__WrapGetNumCharsDisp+0x20>)
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	4718      	bx	r3
 8019e56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019e5a:	f008 bed3 	b.w	8022c04 <GUI__GetLineNumChars>
 8019e5e:	4b02      	ldr	r3, [pc, #8]	; (8019e68 <GUI__WrapGetNumCharsDisp+0x20>)
 8019e60:	2200      	movs	r2, #0
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4718      	bx	r3
 8019e66:	bf00      	nop
 8019e68:	20000054 	.word	0x20000054

08019e6c <GUI__WrapGetNumBytesToNextLine>:
 8019e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e70:	2a01      	cmp	r2, #1
 8019e72:	b082      	sub	sp, #8
 8019e74:	4617      	mov	r7, r2
 8019e76:	4680      	mov	r8, r0
 8019e78:	460e      	mov	r6, r1
 8019e7a:	9000      	str	r0, [sp, #0]
 8019e7c:	d048      	beq.n	8019f10 <GUI__WrapGetNumBytesToNextLine+0xa4>
 8019e7e:	2a02      	cmp	r2, #2
 8019e80:	d02d      	beq.n	8019ede <GUI__WrapGetNumBytesToNextLine+0x72>
 8019e82:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019e86:	f008 febd 	bl	8022c04 <GUI__GetLineNumChars>
 8019e8a:	4604      	mov	r4, r0
 8019e8c:	4621      	mov	r1, r4
 8019e8e:	9800      	ldr	r0, [sp, #0]
 8019e90:	f7fe fcb6 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8019e94:	9b00      	ldr	r3, [sp, #0]
 8019e96:	ad02      	add	r5, sp, #8
 8019e98:	4418      	add	r0, r3
 8019e9a:	f845 0d08 	str.w	r0, [r5, #-8]!
 8019e9e:	4628      	mov	r0, r5
 8019ea0:	f7fe fc9a 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019ea4:	280a      	cmp	r0, #10
 8019ea6:	d039      	beq.n	8019f1c <GUI__WrapGetNumBytesToNextLine+0xb0>
 8019ea8:	2f01      	cmp	r7, #1
 8019eaa:	d12a      	bne.n	8019f02 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019eac:	2820      	cmp	r0, #32
 8019eae:	d128      	bne.n	8019f02 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019eb0:	f008 fe32 	bl	8022b18 <GUI_GetCharDistX>
 8019eb4:	4607      	mov	r7, r0
 8019eb6:	9b01      	ldr	r3, [sp, #4]
 8019eb8:	4628      	mov	r0, r5
 8019eba:	429e      	cmp	r6, r3
 8019ebc:	eb07 0203 	add.w	r2, r7, r3
 8019ec0:	db1f      	blt.n	8019f02 <GUI__WrapGetNumBytesToNextLine+0x96>
 8019ec2:	9201      	str	r2, [sp, #4]
 8019ec4:	f7fe fc88 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019ec8:	2820      	cmp	r0, #32
 8019eca:	f104 0401 	add.w	r4, r4, #1
 8019ece:	d0f2      	beq.n	8019eb6 <GUI__WrapGetNumBytesToNextLine+0x4a>
 8019ed0:	4621      	mov	r1, r4
 8019ed2:	4640      	mov	r0, r8
 8019ed4:	f7fe fc94 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8019ed8:	b002      	add	sp, #8
 8019eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ede:	4b13      	ldr	r3, [pc, #76]	; (8019f2c <GUI__WrapGetNumBytesToNextLine+0xc0>)
 8019ee0:	685b      	ldr	r3, [r3, #4]
 8019ee2:	4798      	blx	r3
 8019ee4:	4601      	mov	r1, r0
 8019ee6:	4604      	mov	r4, r0
 8019ee8:	9800      	ldr	r0, [sp, #0]
 8019eea:	f7fe fc89 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8019eee:	9a00      	ldr	r2, [sp, #0]
 8019ef0:	ab02      	add	r3, sp, #8
 8019ef2:	4410      	add	r0, r2
 8019ef4:	f843 0d08 	str.w	r0, [r3, #-8]!
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7fe fc6d 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8019efe:	280a      	cmp	r0, #10
 8019f00:	d00c      	beq.n	8019f1c <GUI__WrapGetNumBytesToNextLine+0xb0>
 8019f02:	4621      	mov	r1, r4
 8019f04:	4640      	mov	r0, r8
 8019f06:	f7fe fc7b 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8019f0a:	b002      	add	sp, #8
 8019f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f10:	4b06      	ldr	r3, [pc, #24]	; (8019f2c <GUI__WrapGetNumBytesToNextLine+0xc0>)
 8019f12:	aa01      	add	r2, sp, #4
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	4798      	blx	r3
 8019f18:	4604      	mov	r4, r0
 8019f1a:	e7b7      	b.n	8019e8c <GUI__WrapGetNumBytesToNextLine+0x20>
 8019f1c:	3401      	adds	r4, #1
 8019f1e:	4640      	mov	r0, r8
 8019f20:	4621      	mov	r1, r4
 8019f22:	f7fe fc6d 	bl	8018800 <GUI_UC__NumChars2NumBytes>
 8019f26:	b002      	add	sp, #8
 8019f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f2c:	20000054 	.word	0x20000054

08019f30 <_SetBkColor>:
 8019f30:	b538      	push	{r3, r4, r5, lr}
 8019f32:	4c0b      	ldr	r4, [pc, #44]	; (8019f60 <_SetBkColor+0x30>)
 8019f34:	6822      	ldr	r2, [r4, #0]
 8019f36:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8019f38:	4281      	cmp	r1, r0
 8019f3a:	d00d      	beq.n	8019f58 <_SetBkColor+0x28>
 8019f3c:	7c55      	ldrb	r5, [r2, #17]
 8019f3e:	4909      	ldr	r1, [pc, #36]	; (8019f64 <_SetBkColor+0x34>)
 8019f40:	6350      	str	r0, [r2, #52]	; 0x34
 8019f42:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8019f46:	691b      	ldr	r3, [r3, #16]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	4798      	blx	r3
 8019f4c:	6823      	ldr	r3, [r4, #0]
 8019f4e:	7c1a      	ldrb	r2, [r3, #16]
 8019f50:	0752      	lsls	r2, r2, #29
 8019f52:	d402      	bmi.n	8019f5a <_SetBkColor+0x2a>
 8019f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f56:	6018      	str	r0, [r3, #0]
 8019f58:	bd38      	pop	{r3, r4, r5, pc}
 8019f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f5c:	6018      	str	r0, [r3, #0]
 8019f5e:	bd38      	pop	{r3, r4, r5, pc}
 8019f60:	20000018 	.word	0x20000018
 8019f64:	200467d0 	.word	0x200467d0

08019f68 <_SetColor>:
 8019f68:	b538      	push	{r3, r4, r5, lr}
 8019f6a:	4c0b      	ldr	r4, [pc, #44]	; (8019f98 <_SetColor+0x30>)
 8019f6c:	6822      	ldr	r2, [r4, #0]
 8019f6e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8019f70:	4281      	cmp	r1, r0
 8019f72:	d00d      	beq.n	8019f90 <_SetColor+0x28>
 8019f74:	7c55      	ldrb	r5, [r2, #17]
 8019f76:	4909      	ldr	r1, [pc, #36]	; (8019f9c <_SetColor+0x34>)
 8019f78:	6310      	str	r0, [r2, #48]	; 0x30
 8019f7a:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8019f7e:	691b      	ldr	r3, [r3, #16]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	4798      	blx	r3
 8019f84:	6823      	ldr	r3, [r4, #0]
 8019f86:	7c1a      	ldrb	r2, [r3, #16]
 8019f88:	0752      	lsls	r2, r2, #29
 8019f8a:	d402      	bmi.n	8019f92 <_SetColor+0x2a>
 8019f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f8e:	6018      	str	r0, [r3, #0]
 8019f90:	bd38      	pop	{r3, r4, r5, pc}
 8019f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f94:	6018      	str	r0, [r3, #0]
 8019f96:	bd38      	pop	{r3, r4, r5, pc}
 8019f98:	20000018 	.word	0x20000018
 8019f9c:	200467d0 	.word	0x200467d0

08019fa0 <_SetDrawMode>:
 8019fa0:	4b0a      	ldr	r3, [pc, #40]	; (8019fcc <_SetDrawMode+0x2c>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	7c1a      	ldrb	r2, [r3, #16]
 8019fa6:	ea82 0100 	eor.w	r1, r2, r0
 8019faa:	0749      	lsls	r1, r1, #29
 8019fac:	d50a      	bpl.n	8019fc4 <_SetDrawMode+0x24>
 8019fae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8019fb0:	b470      	push	{r4, r5, r6}
 8019fb2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8019fb4:	680e      	ldr	r6, [r1, #0]
 8019fb6:	6825      	ldr	r5, [r4, #0]
 8019fb8:	6026      	str	r6, [r4, #0]
 8019fba:	600d      	str	r5, [r1, #0]
 8019fbc:	7418      	strb	r0, [r3, #16]
 8019fbe:	4610      	mov	r0, r2
 8019fc0:	bc70      	pop	{r4, r5, r6}
 8019fc2:	4770      	bx	lr
 8019fc4:	7418      	strb	r0, [r3, #16]
 8019fc6:	4610      	mov	r0, r2
 8019fc8:	4770      	bx	lr
 8019fca:	bf00      	nop
 8019fcc:	20000018 	.word	0x20000018

08019fd0 <LCD_SetDrawMode>:
 8019fd0:	4b01      	ldr	r3, [pc, #4]	; (8019fd8 <LCD_SetDrawMode+0x8>)
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	689b      	ldr	r3, [r3, #8]
 8019fd6:	4718      	bx	r3
 8019fd8:	2000005c 	.word	0x2000005c

08019fdc <LCD_DrawPixel>:
 8019fdc:	4b16      	ldr	r3, [pc, #88]	; (801a038 <LCD_DrawPixel+0x5c>)
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8019fe4:	428a      	cmp	r2, r1
 8019fe6:	dc1c      	bgt.n	801a022 <LCD_DrawPixel+0x46>
 8019fe8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8019fec:	4291      	cmp	r1, r2
 8019fee:	dc18      	bgt.n	801a022 <LCD_DrawPixel+0x46>
 8019ff0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8019ff4:	4282      	cmp	r2, r0
 8019ff6:	dc14      	bgt.n	801a022 <LCD_DrawPixel+0x46>
 8019ff8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019ffc:	4290      	cmp	r0, r2
 8019ffe:	dc10      	bgt.n	801a022 <LCD_DrawPixel+0x46>
 801a000:	b430      	push	{r4, r5}
 801a002:	7c1a      	ldrb	r2, [r3, #16]
 801a004:	07d2      	lsls	r2, r2, #31
 801a006:	d40d      	bmi.n	801a024 <LCD_DrawPixel+0x48>
 801a008:	7c5d      	ldrb	r5, [r3, #17]
 801a00a:	460a      	mov	r2, r1
 801a00c:	4c0b      	ldr	r4, [pc, #44]	; (801a03c <LCD_DrawPixel+0x60>)
 801a00e:	4601      	mov	r1, r0
 801a010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a012:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	68c4      	ldr	r4, [r0, #12]
 801a01a:	69a4      	ldr	r4, [r4, #24]
 801a01c:	46a4      	mov	ip, r4
 801a01e:	bc30      	pop	{r4, r5}
 801a020:	4760      	bx	ip
 801a022:	4770      	bx	lr
 801a024:	7c5c      	ldrb	r4, [r3, #17]
 801a026:	460a      	mov	r2, r1
 801a028:	4b04      	ldr	r3, [pc, #16]	; (801a03c <LCD_DrawPixel+0x60>)
 801a02a:	4601      	mov	r1, r0
 801a02c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a030:	68c3      	ldr	r3, [r0, #12]
 801a032:	bc30      	pop	{r4, r5}
 801a034:	69db      	ldr	r3, [r3, #28]
 801a036:	4718      	bx	r3
 801a038:	20000018 	.word	0x20000018
 801a03c:	200467d0 	.word	0x200467d0

0801a040 <LCD_DrawHLine>:
 801a040:	4b11      	ldr	r3, [pc, #68]	; (801a088 <LCD_DrawHLine+0x48>)
 801a042:	b430      	push	{r4, r5}
 801a044:	681c      	ldr	r4, [r3, #0]
 801a046:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a04a:	428b      	cmp	r3, r1
 801a04c:	dc0f      	bgt.n	801a06e <LCD_DrawHLine+0x2e>
 801a04e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801a052:	4299      	cmp	r1, r3
 801a054:	dc0b      	bgt.n	801a06e <LCD_DrawHLine+0x2e>
 801a056:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801a05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a05e:	42a8      	cmp	r0, r5
 801a060:	bfb8      	it	lt
 801a062:	4628      	movlt	r0, r5
 801a064:	4293      	cmp	r3, r2
 801a066:	bfa8      	it	ge
 801a068:	4613      	movge	r3, r2
 801a06a:	4298      	cmp	r0, r3
 801a06c:	dd01      	ble.n	801a072 <LCD_DrawHLine+0x32>
 801a06e:	bc30      	pop	{r4, r5}
 801a070:	4770      	bx	lr
 801a072:	7c65      	ldrb	r5, [r4, #17]
 801a074:	460a      	mov	r2, r1
 801a076:	4c05      	ldr	r4, [pc, #20]	; (801a08c <LCD_DrawHLine+0x4c>)
 801a078:	4601      	mov	r1, r0
 801a07a:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a07e:	68c4      	ldr	r4, [r0, #12]
 801a080:	68a4      	ldr	r4, [r4, #8]
 801a082:	46a4      	mov	ip, r4
 801a084:	bc30      	pop	{r4, r5}
 801a086:	4760      	bx	ip
 801a088:	20000018 	.word	0x20000018
 801a08c:	200467d0 	.word	0x200467d0

0801a090 <LCD_DrawVLine>:
 801a090:	4b11      	ldr	r3, [pc, #68]	; (801a0d8 <LCD_DrawVLine+0x48>)
 801a092:	b430      	push	{r4, r5}
 801a094:	681c      	ldr	r4, [r3, #0]
 801a096:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a09a:	4283      	cmp	r3, r0
 801a09c:	dc0f      	bgt.n	801a0be <LCD_DrawVLine+0x2e>
 801a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0a2:	4298      	cmp	r0, r3
 801a0a4:	dc0b      	bgt.n	801a0be <LCD_DrawVLine+0x2e>
 801a0a6:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801a0aa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801a0ae:	42a9      	cmp	r1, r5
 801a0b0:	bfb8      	it	lt
 801a0b2:	4629      	movlt	r1, r5
 801a0b4:	4293      	cmp	r3, r2
 801a0b6:	bfa8      	it	ge
 801a0b8:	4613      	movge	r3, r2
 801a0ba:	4299      	cmp	r1, r3
 801a0bc:	dd01      	ble.n	801a0c2 <LCD_DrawVLine+0x32>
 801a0be:	bc30      	pop	{r4, r5}
 801a0c0:	4770      	bx	lr
 801a0c2:	7c65      	ldrb	r5, [r4, #17]
 801a0c4:	460a      	mov	r2, r1
 801a0c6:	4c05      	ldr	r4, [pc, #20]	; (801a0dc <LCD_DrawVLine+0x4c>)
 801a0c8:	4601      	mov	r1, r0
 801a0ca:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a0ce:	68c4      	ldr	r4, [r0, #12]
 801a0d0:	68e4      	ldr	r4, [r4, #12]
 801a0d2:	46a4      	mov	ip, r4
 801a0d4:	bc30      	pop	{r4, r5}
 801a0d6:	4760      	bx	ip
 801a0d8:	20000018 	.word	0x20000018
 801a0dc:	200467d0 	.word	0x200467d0

0801a0e0 <LCD_FillRect>:
 801a0e0:	b570      	push	{r4, r5, r6, lr}
 801a0e2:	4c15      	ldr	r4, [pc, #84]	; (801a138 <LCD_FillRect+0x58>)
 801a0e4:	b082      	sub	sp, #8
 801a0e6:	6824      	ldr	r4, [r4, #0]
 801a0e8:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801a0ec:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a0f0:	42a8      	cmp	r0, r5
 801a0f2:	bfb8      	it	lt
 801a0f4:	4628      	movlt	r0, r5
 801a0f6:	42b2      	cmp	r2, r6
 801a0f8:	bfa8      	it	ge
 801a0fa:	4632      	movge	r2, r6
 801a0fc:	4282      	cmp	r2, r0
 801a0fe:	db0b      	blt.n	801a118 <LCD_FillRect+0x38>
 801a100:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 801a104:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 801a108:	42b1      	cmp	r1, r6
 801a10a:	bfb8      	it	lt
 801a10c:	4631      	movlt	r1, r6
 801a10e:	429d      	cmp	r5, r3
 801a110:	bfa8      	it	ge
 801a112:	461d      	movge	r5, r3
 801a114:	42a9      	cmp	r1, r5
 801a116:	dd01      	ble.n	801a11c <LCD_FillRect+0x3c>
 801a118:	b002      	add	sp, #8
 801a11a:	bd70      	pop	{r4, r5, r6, pc}
 801a11c:	7c66      	ldrb	r6, [r4, #17]
 801a11e:	4613      	mov	r3, r2
 801a120:	4c06      	ldr	r4, [pc, #24]	; (801a13c <LCD_FillRect+0x5c>)
 801a122:	460a      	mov	r2, r1
 801a124:	4601      	mov	r1, r0
 801a126:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 801a12a:	68c4      	ldr	r4, [r0, #12]
 801a12c:	9500      	str	r5, [sp, #0]
 801a12e:	6924      	ldr	r4, [r4, #16]
 801a130:	47a0      	blx	r4
 801a132:	b002      	add	sp, #8
 801a134:	bd70      	pop	{r4, r5, r6, pc}
 801a136:	bf00      	nop
 801a138:	20000018 	.word	0x20000018
 801a13c:	200467d0 	.word	0x200467d0

0801a140 <LCD__DrawBitmap_1bpp>:
 801a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a144:	b091      	sub	sp, #68	; 0x44
 801a146:	4c82      	ldr	r4, [pc, #520]	; (801a350 <LCD__DrawBitmap_1bpp+0x210>)
 801a148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a14a:	6824      	ldr	r4, [r4, #0]
 801a14c:	462e      	mov	r6, r5
 801a14e:	950e      	str	r5, [sp, #56]	; 0x38
 801a150:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801a152:	900f      	str	r0, [sp, #60]	; 0x3c
 801a154:	950c      	str	r5, [sp, #48]	; 0x30
 801a156:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801a158:	9205      	str	r2, [sp, #20]
 801a15a:	9506      	str	r5, [sp, #24]
 801a15c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801a15e:	930d      	str	r3, [sp, #52]	; 0x34
 801a160:	9508      	str	r5, [sp, #32]
 801a162:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a166:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 801a16a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a16c:	b12c      	cbz	r4, 801a17a <LCD__DrawBitmap_1bpp+0x3a>
 801a16e:	6824      	ldr	r4, [r4, #0]
 801a170:	46a4      	mov	ip, r4
 801a172:	b011      	add	sp, #68	; 0x44
 801a174:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a178:	4760      	bx	ip
 801a17a:	ea4a 0306 	orr.w	r3, sl, r6
 801a17e:	4689      	mov	r9, r1
 801a180:	2b01      	cmp	r3, #1
 801a182:	f000 8092 	beq.w	801a2aa <LCD__DrawBitmap_1bpp+0x16a>
 801a186:	f1ce 0308 	rsb	r3, lr, #8
 801a18a:	9302      	str	r3, [sp, #8]
 801a18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a18e:	2b00      	cmp	r3, #0
 801a190:	f340 8088 	ble.w	801a2a4 <LCD__DrawBitmap_1bpp+0x164>
 801a194:	4b6f      	ldr	r3, [pc, #444]	; (801a354 <LCD__DrawBitmap_1bpp+0x214>)
 801a196:	46a0      	mov	r8, r4
 801a198:	46f1      	mov	r9, lr
 801a19a:	940a      	str	r4, [sp, #40]	; 0x28
 801a19c:	6818      	ldr	r0, [r3, #0]
 801a19e:	9104      	str	r1, [sp, #16]
 801a1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a1a2:	9904      	ldr	r1, [sp, #16]
 801a1a4:	1853      	adds	r3, r2, r1
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 801a1aa:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a1ae:	3a01      	subs	r2, #1
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	9209      	str	r2, [sp, #36]	; 0x24
 801a1b4:	dc69      	bgt.n	801a28a <LCD__DrawBitmap_1bpp+0x14a>
 801a1b6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801a1ba:	428b      	cmp	r3, r1
 801a1bc:	db65      	blt.n	801a28a <LCD__DrawBitmap_1bpp+0x14a>
 801a1be:	9b05      	ldr	r3, [sp, #20]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	dd62      	ble.n	801a28a <LCD__DrawBitmap_1bpp+0x14a>
 801a1c4:	2600      	movs	r6, #0
 801a1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1c8:	9f06      	ldr	r7, [sp, #24]
 801a1ca:	eb03 040a 	add.w	r4, r3, sl
 801a1ce:	4635      	mov	r5, r6
 801a1d0:	9707      	str	r7, [sp, #28]
 801a1d2:	e04d      	b.n	801a270 <LCD__DrawBitmap_1bpp+0x130>
 801a1d4:	ebc9 0606 	rsb	r6, r9, r6
 801a1d8:	9b02      	ldr	r3, [sp, #8]
 801a1da:	fa48 f203 	asr.w	r2, r8, r3
 801a1de:	fa08 f809 	lsl.w	r8, r8, r9
 801a1e2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801a1e6:	fa5f f888 	uxtb.w	r8, r8
 801a1ea:	d102      	bne.n	801a1f2 <LCD__DrawBitmap_1bpp+0xb2>
 801a1ec:	7c03      	ldrb	r3, [r0, #16]
 801a1ee:	079b      	lsls	r3, r3, #30
 801a1f0:	d439      	bmi.n	801a266 <LCD__DrawBitmap_1bpp+0x126>
 801a1f2:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801a1f6:	f8dc 3000 	ldr.w	r3, [ip]
 801a1fa:	9303      	str	r3, [sp, #12]
 801a1fc:	9b08      	ldr	r3, [sp, #32]
 801a1fe:	b10b      	cbz	r3, 801a204 <LCD__DrawBitmap_1bpp+0xc4>
 801a200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a204:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a208:	f104 3eff 	add.w	lr, r4, #4294967295
 801a20c:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 801a210:	4299      	cmp	r1, r3
 801a212:	f8cc 2000 	str.w	r2, [ip]
 801a216:	bfb8      	it	lt
 801a218:	4619      	movlt	r1, r3
 801a21a:	45de      	cmp	lr, fp
 801a21c:	4673      	mov	r3, lr
 801a21e:	bfa8      	it	ge
 801a220:	465b      	movge	r3, fp
 801a222:	428b      	cmp	r3, r1
 801a224:	db1c      	blt.n	801a260 <LCD__DrawBitmap_1bpp+0x120>
 801a226:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a22a:	9f04      	ldr	r7, [sp, #16]
 801a22c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a230:	42ba      	cmp	r2, r7
 801a232:	bfb8      	it	lt
 801a234:	463a      	movlt	r2, r7
 801a236:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a238:	45be      	cmp	lr, r7
 801a23a:	bfa8      	it	ge
 801a23c:	46be      	movge	lr, r7
 801a23e:	4572      	cmp	r2, lr
 801a240:	dc0e      	bgt.n	801a260 <LCD__DrawBitmap_1bpp+0x120>
 801a242:	7c40      	ldrb	r0, [r0, #17]
 801a244:	4f44      	ldr	r7, [pc, #272]	; (801a358 <LCD__DrawBitmap_1bpp+0x218>)
 801a246:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801a24a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a24e:	f8cd e000 	str.w	lr, [sp]
 801a252:	f8dc b010 	ldr.w	fp, [ip, #16]
 801a256:	47d8      	blx	fp
 801a258:	4b3e      	ldr	r3, [pc, #248]	; (801a354 <LCD__DrawBitmap_1bpp+0x214>)
 801a25a:	6818      	ldr	r0, [r3, #0]
 801a25c:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801a260:	9b03      	ldr	r3, [sp, #12]
 801a262:	f8cc 3000 	str.w	r3, [ip]
 801a266:	3501      	adds	r5, #1
 801a268:	9b05      	ldr	r3, [sp, #20]
 801a26a:	4454      	add	r4, sl
 801a26c:	42ab      	cmp	r3, r5
 801a26e:	d00c      	beq.n	801a28a <LCD__DrawBitmap_1bpp+0x14a>
 801a270:	ebca 0104 	rsb	r1, sl, r4
 801a274:	2e00      	cmp	r6, #0
 801a276:	d1ad      	bne.n	801a1d4 <LCD__DrawBitmap_1bpp+0x94>
 801a278:	9a07      	ldr	r2, [sp, #28]
 801a27a:	9e02      	ldr	r6, [sp, #8]
 801a27c:	4613      	mov	r3, r2
 801a27e:	f892 8000 	ldrb.w	r8, [r2]
 801a282:	3301      	adds	r3, #1
 801a284:	9307      	str	r3, [sp, #28]
 801a286:	4633      	mov	r3, r6
 801a288:	e7a7      	b.n	801a1da <LCD__DrawBitmap_1bpp+0x9a>
 801a28a:	9a06      	ldr	r2, [sp, #24]
 801a28c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a290:	440a      	add	r2, r1
 801a292:	3301      	adds	r3, #1
 801a294:	9206      	str	r2, [sp, #24]
 801a296:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a298:	930a      	str	r3, [sp, #40]	; 0x28
 801a29a:	9204      	str	r2, [sp, #16]
 801a29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	f47f af7e 	bne.w	801a1a0 <LCD__DrawBitmap_1bpp+0x60>
 801a2a4:	b011      	add	sp, #68	; 0x44
 801a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2aa:	4b2a      	ldr	r3, [pc, #168]	; (801a354 <LCD__DrawBitmap_1bpp+0x214>)
 801a2ac:	6818      	ldr	r0, [r3, #0]
 801a2ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a2b2:	1a53      	subs	r3, r2, r1
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	dd46      	ble.n	801a346 <LCD__DrawBitmap_1bpp+0x206>
 801a2b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a2ba:	1acc      	subs	r4, r1, r3
 801a2bc:	2c00      	cmp	r4, #0
 801a2be:	ddf1      	ble.n	801a2a4 <LCD__DrawBitmap_1bpp+0x164>
 801a2c0:	9e06      	ldr	r6, [sp, #24]
 801a2c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a2c4:	fb01 6303 	mla	r3, r1, r3, r6
 801a2c8:	9306      	str	r3, [sp, #24]
 801a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2cc:	444b      	add	r3, r9
 801a2ce:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 801a2d2:	3b01      	subs	r3, #1
 801a2d4:	1a5b      	subs	r3, r3, r1
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	dd02      	ble.n	801a2e0 <LCD__DrawBitmap_1bpp+0x1a0>
 801a2da:	1ae4      	subs	r4, r4, r3
 801a2dc:	2c00      	cmp	r4, #0
 801a2de:	dde1      	ble.n	801a2a4 <LCD__DrawBitmap_1bpp+0x164>
 801a2e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a2e2:	9e05      	ldr	r6, [sp, #20]
 801a2e4:	198b      	adds	r3, r1, r6
 801a2e6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 801a2ea:	3b01      	subs	r3, #1
 801a2ec:	1a5b      	subs	r3, r3, r1
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	dd01      	ble.n	801a2f6 <LCD__DrawBitmap_1bpp+0x1b6>
 801a2f2:	1af3      	subs	r3, r6, r3
 801a2f4:	9305      	str	r3, [sp, #20]
 801a2f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2f8:	1b59      	subs	r1, r3, r5
 801a2fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a2fe:	4299      	cmp	r1, r3
 801a300:	da0d      	bge.n	801a31e <LCD__DrawBitmap_1bpp+0x1de>
 801a302:	1a5b      	subs	r3, r3, r1
 801a304:	9f05      	ldr	r7, [sp, #20]
 801a306:	441d      	add	r5, r3
 801a308:	f023 0607 	bic.w	r6, r3, #7
 801a30c:	1afb      	subs	r3, r7, r3
 801a30e:	4431      	add	r1, r6
 801a310:	9305      	str	r3, [sp, #20]
 801a312:	9b06      	ldr	r3, [sp, #24]
 801a314:	eb03 03e5 	add.w	r3, r3, r5, asr #3
 801a318:	f005 0507 	and.w	r5, r5, #7
 801a31c:	9306      	str	r3, [sp, #24]
 801a31e:	9b05      	ldr	r3, [sp, #20]
 801a320:	2b00      	cmp	r3, #0
 801a322:	ddbf      	ble.n	801a2a4 <LCD__DrawBitmap_1bpp+0x164>
 801a324:	7c46      	ldrb	r6, [r0, #17]
 801a326:	480c      	ldr	r0, [pc, #48]	; (801a358 <LCD__DrawBitmap_1bpp+0x218>)
 801a328:	9f08      	ldr	r7, [sp, #32]
 801a32a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801a32e:	68c6      	ldr	r6, [r0, #12]
 801a330:	951e      	str	r5, [sp, #120]	; 0x78
 801a332:	9d06      	ldr	r5, [sp, #24]
 801a334:	971f      	str	r7, [sp, #124]	; 0x7c
 801a336:	951d      	str	r5, [sp, #116]	; 0x74
 801a338:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a33a:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 801a33e:	951c      	str	r5, [sp, #112]	; 0x70
 801a340:	941a      	str	r4, [sp, #104]	; 0x68
 801a342:	6874      	ldr	r4, [r6, #4]
 801a344:	e714      	b.n	801a170 <LCD__DrawBitmap_1bpp+0x30>
 801a346:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a348:	460a      	mov	r2, r1
 801a34a:	4623      	mov	r3, r4
 801a34c:	e7be      	b.n	801a2cc <LCD__DrawBitmap_1bpp+0x18c>
 801a34e:	bf00      	nop
 801a350:	2004678c 	.word	0x2004678c
 801a354:	20000018 	.word	0x20000018
 801a358:	200467d0 	.word	0x200467d0

0801a35c <LCD_DrawBitmap>:
 801a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a360:	4cb6      	ldr	r4, [pc, #728]	; (801a63c <LCD_DrawBitmap+0x2e0>)
 801a362:	b091      	sub	sp, #68	; 0x44
 801a364:	f8d4 e000 	ldr.w	lr, [r4]
 801a368:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a36a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a36c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801a36e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 801a370:	900f      	str	r0, [sp, #60]	; 0x3c
 801a372:	9205      	str	r2, [sp, #20]
 801a374:	930c      	str	r3, [sp, #48]	; 0x30
 801a376:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a37a:	950d      	str	r5, [sp, #52]	; 0x34
 801a37c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 801a380:	960e      	str	r6, [sp, #56]	; 0x38
 801a382:	9707      	str	r7, [sp, #28]
 801a384:	9408      	str	r4, [sp, #32]
 801a386:	f1be 0f00 	cmp.w	lr, #0
 801a38a:	d006      	beq.n	801a39a <LCD_DrawBitmap+0x3e>
 801a38c:	f8de 4000 	ldr.w	r4, [lr]
 801a390:	46a4      	mov	ip, r4
 801a392:	b011      	add	sp, #68	; 0x44
 801a394:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a398:	4760      	bx	ip
 801a39a:	ea4a 0305 	orr.w	r3, sl, r5
 801a39e:	4689      	mov	r9, r1
 801a3a0:	2b01      	cmp	r3, #1
 801a3a2:	f000 8093 	beq.w	801a4cc <LCD_DrawBitmap+0x170>
 801a3a6:	f1cc 0308 	rsb	r3, ip, #8
 801a3aa:	9302      	str	r3, [sp, #8]
 801a3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	f340 8089 	ble.w	801a4c6 <LCD_DrawBitmap+0x16a>
 801a3b4:	4ba2      	ldr	r3, [pc, #648]	; (801a640 <LCD_DrawBitmap+0x2e4>)
 801a3b6:	46f0      	mov	r8, lr
 801a3b8:	46e1      	mov	r9, ip
 801a3ba:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801a3be:	6818      	ldr	r0, [r3, #0]
 801a3c0:	9104      	str	r1, [sp, #16]
 801a3c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a3c4:	9904      	ldr	r1, [sp, #16]
 801a3c6:	1853      	adds	r3, r2, r1
 801a3c8:	461a      	mov	r2, r3
 801a3ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801a3cc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a3d0:	3a01      	subs	r2, #1
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 801a3d6:	dc69      	bgt.n	801a4ac <LCD_DrawBitmap+0x150>
 801a3d8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 801a3dc:	428b      	cmp	r3, r1
 801a3de:	db65      	blt.n	801a4ac <LCD_DrawBitmap+0x150>
 801a3e0:	9b05      	ldr	r3, [sp, #20]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	dd62      	ble.n	801a4ac <LCD_DrawBitmap+0x150>
 801a3e6:	2600      	movs	r6, #0
 801a3e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3ea:	9f07      	ldr	r7, [sp, #28]
 801a3ec:	eb03 040a 	add.w	r4, r3, sl
 801a3f0:	4635      	mov	r5, r6
 801a3f2:	9706      	str	r7, [sp, #24]
 801a3f4:	e04d      	b.n	801a492 <LCD_DrawBitmap+0x136>
 801a3f6:	ebc9 0606 	rsb	r6, r9, r6
 801a3fa:	9b02      	ldr	r3, [sp, #8]
 801a3fc:	fa48 f203 	asr.w	r2, r8, r3
 801a400:	fa08 f809 	lsl.w	r8, r8, r9
 801a404:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801a408:	fa5f f888 	uxtb.w	r8, r8
 801a40c:	d102      	bne.n	801a414 <LCD_DrawBitmap+0xb8>
 801a40e:	7c03      	ldrb	r3, [r0, #16]
 801a410:	079b      	lsls	r3, r3, #30
 801a412:	d439      	bmi.n	801a488 <LCD_DrawBitmap+0x12c>
 801a414:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801a418:	f8dc 3000 	ldr.w	r3, [ip]
 801a41c:	9303      	str	r3, [sp, #12]
 801a41e:	9b08      	ldr	r3, [sp, #32]
 801a420:	b10b      	cbz	r3, 801a426 <LCD_DrawBitmap+0xca>
 801a422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a426:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801a42a:	f104 3eff 	add.w	lr, r4, #4294967295
 801a42e:	f9b0 b00c 	ldrsh.w	fp, [r0, #12]
 801a432:	4299      	cmp	r1, r3
 801a434:	f8cc 2000 	str.w	r2, [ip]
 801a438:	bfb8      	it	lt
 801a43a:	4619      	movlt	r1, r3
 801a43c:	45de      	cmp	lr, fp
 801a43e:	4673      	mov	r3, lr
 801a440:	bfa8      	it	ge
 801a442:	465b      	movge	r3, fp
 801a444:	428b      	cmp	r3, r1
 801a446:	db1c      	blt.n	801a482 <LCD_DrawBitmap+0x126>
 801a448:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a44c:	9f04      	ldr	r7, [sp, #16]
 801a44e:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a452:	42ba      	cmp	r2, r7
 801a454:	bfb8      	it	lt
 801a456:	463a      	movlt	r2, r7
 801a458:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a45a:	45be      	cmp	lr, r7
 801a45c:	bfa8      	it	ge
 801a45e:	46be      	movge	lr, r7
 801a460:	4572      	cmp	r2, lr
 801a462:	dc0e      	bgt.n	801a482 <LCD_DrawBitmap+0x126>
 801a464:	7c40      	ldrb	r0, [r0, #17]
 801a466:	4f77      	ldr	r7, [pc, #476]	; (801a644 <LCD_DrawBitmap+0x2e8>)
 801a468:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801a46c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a470:	f8cd e000 	str.w	lr, [sp]
 801a474:	f8dc b010 	ldr.w	fp, [ip, #16]
 801a478:	47d8      	blx	fp
 801a47a:	4b71      	ldr	r3, [pc, #452]	; (801a640 <LCD_DrawBitmap+0x2e4>)
 801a47c:	6818      	ldr	r0, [r3, #0]
 801a47e:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 801a482:	9b03      	ldr	r3, [sp, #12]
 801a484:	f8cc 3000 	str.w	r3, [ip]
 801a488:	3501      	adds	r5, #1
 801a48a:	9b05      	ldr	r3, [sp, #20]
 801a48c:	4454      	add	r4, sl
 801a48e:	42ab      	cmp	r3, r5
 801a490:	d00c      	beq.n	801a4ac <LCD_DrawBitmap+0x150>
 801a492:	ebca 0104 	rsb	r1, sl, r4
 801a496:	2e00      	cmp	r6, #0
 801a498:	d1ad      	bne.n	801a3f6 <LCD_DrawBitmap+0x9a>
 801a49a:	9a06      	ldr	r2, [sp, #24]
 801a49c:	9e02      	ldr	r6, [sp, #8]
 801a49e:	4613      	mov	r3, r2
 801a4a0:	f892 8000 	ldrb.w	r8, [r2]
 801a4a4:	3301      	adds	r3, #1
 801a4a6:	9306      	str	r3, [sp, #24]
 801a4a8:	4633      	mov	r3, r6
 801a4aa:	e7a7      	b.n	801a3fc <LCD_DrawBitmap+0xa0>
 801a4ac:	9a07      	ldr	r2, [sp, #28]
 801a4ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4b2:	440a      	add	r2, r1
 801a4b4:	3301      	adds	r3, #1
 801a4b6:	9207      	str	r2, [sp, #28]
 801a4b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a4ba:	930a      	str	r3, [sp, #40]	; 0x28
 801a4bc:	9204      	str	r2, [sp, #16]
 801a4be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	f47f af7e 	bne.w	801a3c2 <LCD_DrawBitmap+0x66>
 801a4c6:	b011      	add	sp, #68	; 0x44
 801a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4cc:	4b5c      	ldr	r3, [pc, #368]	; (801a640 <LCD_DrawBitmap+0x2e4>)
 801a4ce:	6819      	ldr	r1, [r3, #0]
 801a4d0:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801a4d4:	ebc9 0302 	rsb	r3, r9, r2
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	f340 80c1 	ble.w	801a660 <LCD_DrawBitmap+0x304>
 801a4de:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a4e0:	1ac4      	subs	r4, r0, r3
 801a4e2:	2c00      	cmp	r4, #0
 801a4e4:	ddef      	ble.n	801a4c6 <LCD_DrawBitmap+0x16a>
 801a4e6:	fb06 7303 	mla	r3, r6, r3, r7
 801a4ea:	9307      	str	r3, [sp, #28]
 801a4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4ee:	444b      	add	r3, r9
 801a4f0:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	1a1b      	subs	r3, r3, r0
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	dd02      	ble.n	801a502 <LCD_DrawBitmap+0x1a6>
 801a4fc:	1ae4      	subs	r4, r4, r3
 801a4fe:	2c00      	cmp	r4, #0
 801a500:	dde1      	ble.n	801a4c6 <LCD_DrawBitmap+0x16a>
 801a502:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a504:	9d05      	ldr	r5, [sp, #20]
 801a506:	1943      	adds	r3, r0, r5
 801a508:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801a50c:	3b01      	subs	r3, #1
 801a50e:	1a1b      	subs	r3, r3, r0
 801a510:	2b00      	cmp	r3, #0
 801a512:	dd01      	ble.n	801a518 <LCD_DrawBitmap+0x1bc>
 801a514:	1aeb      	subs	r3, r5, r3
 801a516:	9305      	str	r3, [sp, #20]
 801a518:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 801a51c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a51e:	429d      	cmp	r5, r3
 801a520:	db15      	blt.n	801a54e <LCD_DrawBitmap+0x1f2>
 801a522:	2500      	movs	r5, #0
 801a524:	9b05      	ldr	r3, [sp, #20]
 801a526:	2b00      	cmp	r3, #0
 801a528:	ddcd      	ble.n	801a4c6 <LCD_DrawBitmap+0x16a>
 801a52a:	7c4e      	ldrb	r6, [r1, #17]
 801a52c:	4845      	ldr	r0, [pc, #276]	; (801a644 <LCD_DrawBitmap+0x2e8>)
 801a52e:	9f08      	ldr	r7, [sp, #32]
 801a530:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801a534:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a536:	68c6      	ldr	r6, [r0, #12]
 801a538:	951e      	str	r5, [sp, #120]	; 0x78
 801a53a:	9d07      	ldr	r5, [sp, #28]
 801a53c:	971f      	str	r7, [sp, #124]	; 0x7c
 801a53e:	951d      	str	r5, [sp, #116]	; 0x74
 801a540:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a542:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 801a546:	951c      	str	r5, [sp, #112]	; 0x70
 801a548:	941a      	str	r4, [sp, #104]	; 0x68
 801a54a:	6874      	ldr	r4, [r6, #4]
 801a54c:	e720      	b.n	801a390 <LCD_DrawBitmap+0x34>
 801a54e:	9e05      	ldr	r6, [sp, #20]
 801a550:	1b5d      	subs	r5, r3, r5
 801a552:	f10c 30ff 	add.w	r0, ip, #4294967295
 801a556:	1b76      	subs	r6, r6, r5
 801a558:	9605      	str	r6, [sp, #20]
 801a55a:	281f      	cmp	r0, #31
 801a55c:	d8e2      	bhi.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a55e:	a601      	add	r6, pc, #4	; (adr r6, 801a564 <LCD_DrawBitmap+0x208>)
 801a560:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 801a564:	0801a649 	.word	0x0801a649
 801a568:	0801a625 	.word	0x0801a625
 801a56c:	0801a525 	.word	0x0801a525
 801a570:	0801a60d 	.word	0x0801a60d
 801a574:	0801a525 	.word	0x0801a525
 801a578:	0801a525 	.word	0x0801a525
 801a57c:	0801a525 	.word	0x0801a525
 801a580:	0801a601 	.word	0x0801a601
 801a584:	0801a525 	.word	0x0801a525
 801a588:	0801a525 	.word	0x0801a525
 801a58c:	0801a525 	.word	0x0801a525
 801a590:	0801a525 	.word	0x0801a525
 801a594:	0801a525 	.word	0x0801a525
 801a598:	0801a525 	.word	0x0801a525
 801a59c:	0801a525 	.word	0x0801a525
 801a5a0:	0801a5f3 	.word	0x0801a5f3
 801a5a4:	0801a525 	.word	0x0801a525
 801a5a8:	0801a525 	.word	0x0801a525
 801a5ac:	0801a525 	.word	0x0801a525
 801a5b0:	0801a525 	.word	0x0801a525
 801a5b4:	0801a525 	.word	0x0801a525
 801a5b8:	0801a525 	.word	0x0801a525
 801a5bc:	0801a525 	.word	0x0801a525
 801a5c0:	0801a5e5 	.word	0x0801a5e5
 801a5c4:	0801a525 	.word	0x0801a525
 801a5c8:	0801a525 	.word	0x0801a525
 801a5cc:	0801a525 	.word	0x0801a525
 801a5d0:	0801a525 	.word	0x0801a525
 801a5d4:	0801a525 	.word	0x0801a525
 801a5d8:	0801a525 	.word	0x0801a525
 801a5dc:	0801a525 	.word	0x0801a525
 801a5e0:	0801a5e5 	.word	0x0801a5e5
 801a5e4:	9807      	ldr	r0, [sp, #28]
 801a5e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801a5e8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801a5ec:	2500      	movs	r5, #0
 801a5ee:	9007      	str	r0, [sp, #28]
 801a5f0:	e798      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a5f2:	9807      	ldr	r0, [sp, #28]
 801a5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 801a5f6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 801a5fa:	2500      	movs	r5, #0
 801a5fc:	9007      	str	r0, [sp, #28]
 801a5fe:	e791      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a600:	9807      	ldr	r0, [sp, #28]
 801a602:	930f      	str	r3, [sp, #60]	; 0x3c
 801a604:	4428      	add	r0, r5
 801a606:	2500      	movs	r5, #0
 801a608:	9007      	str	r0, [sp, #28]
 801a60a:	e78b      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a60c:	9807      	ldr	r0, [sp, #28]
 801a60e:	f025 0301 	bic.w	r3, r5, #1
 801a612:	eb00 0065 	add.w	r0, r0, r5, asr #1
 801a616:	f005 0501 	and.w	r5, r5, #1
 801a61a:	9007      	str	r0, [sp, #28]
 801a61c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a61e:	4418      	add	r0, r3
 801a620:	900f      	str	r0, [sp, #60]	; 0x3c
 801a622:	e77f      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a624:	9807      	ldr	r0, [sp, #28]
 801a626:	f025 0303 	bic.w	r3, r5, #3
 801a62a:	eb00 00a5 	add.w	r0, r0, r5, asr #2
 801a62e:	f005 0503 	and.w	r5, r5, #3
 801a632:	9007      	str	r0, [sp, #28]
 801a634:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a636:	4418      	add	r0, r3
 801a638:	900f      	str	r0, [sp, #60]	; 0x3c
 801a63a:	e773      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a63c:	2004678c 	.word	0x2004678c
 801a640:	20000018 	.word	0x20000018
 801a644:	200467d0 	.word	0x200467d0
 801a648:	9807      	ldr	r0, [sp, #28]
 801a64a:	f025 0307 	bic.w	r3, r5, #7
 801a64e:	eb00 00e5 	add.w	r0, r0, r5, asr #3
 801a652:	f005 0507 	and.w	r5, r5, #7
 801a656:	9007      	str	r0, [sp, #28]
 801a658:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a65a:	4418      	add	r0, r3
 801a65c:	900f      	str	r0, [sp, #60]	; 0x3c
 801a65e:	e761      	b.n	801a524 <LCD_DrawBitmap+0x1c8>
 801a660:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a662:	464a      	mov	r2, r9
 801a664:	4623      	mov	r3, r4
 801a666:	e742      	b.n	801a4ee <LCD_DrawBitmap+0x192>

0801a668 <LCD_SetClipRectMax>:
 801a668:	4a04      	ldr	r2, [pc, #16]	; (801a67c <LCD_SetClipRectMax+0x14>)
 801a66a:	4b05      	ldr	r3, [pc, #20]	; (801a680 <LCD_SetClipRectMax+0x18>)
 801a66c:	6811      	ldr	r1, [r2, #0]
 801a66e:	7c4a      	ldrb	r2, [r1, #17]
 801a670:	3108      	adds	r1, #8
 801a672:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a676:	68c3      	ldr	r3, [r0, #12]
 801a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a67a:	4718      	bx	r3
 801a67c:	20000018 	.word	0x20000018
 801a680:	200467d0 	.word	0x200467d0

0801a684 <emWin_LCD_Init>:
 801a684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a688:	4e3e      	ldr	r6, [pc, #248]	; (801a784 <emWin_LCD_Init+0x100>)
 801a68a:	b084      	sub	sp, #16
 801a68c:	4f3e      	ldr	r7, [pc, #248]	; (801a788 <emWin_LCD_Init+0x104>)
 801a68e:	6831      	ldr	r1, [r6, #0]
 801a690:	7c4b      	ldrb	r3, [r1, #17]
 801a692:	3108      	adds	r1, #8
 801a694:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801a698:	68c3      	ldr	r3, [r0, #12]
 801a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a69c:	4798      	blx	r3
 801a69e:	f000 fa65 	bl	801ab6c <LCD_InitColors>
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	2800      	cmp	r0, #0
 801a6a6:	d15c      	bne.n	801a762 <emWin_LCD_Init+0xde>
 801a6a8:	4605      	mov	r5, r0
 801a6aa:	4628      	mov	r0, r5
 801a6ac:	3501      	adds	r5, #1
 801a6ae:	f7f9 ff81 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801a6b2:	210c      	movs	r1, #12
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	eb0d 0001 	add.w	r0, sp, r1
 801a6ba:	9303      	str	r3, [sp, #12]
 801a6bc:	b143      	cbz	r3, 801a6d0 <emWin_LCD_Init+0x4c>
 801a6be:	68db      	ldr	r3, [r3, #12]
 801a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c2:	4798      	blx	r3
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	d05a      	beq.n	801a780 <emWin_LCD_Init+0xfc>
 801a6ca:	9803      	ldr	r0, [sp, #12]
 801a6cc:	4798      	blx	r3
 801a6ce:	4304      	orrs	r4, r0
 801a6d0:	2d02      	cmp	r5, #2
 801a6d2:	d1ea      	bne.n	801a6aa <emWin_LCD_Init+0x26>
 801a6d4:	2c00      	cmp	r4, #0
 801a6d6:	d144      	bne.n	801a762 <emWin_LCD_Init+0xde>
 801a6d8:	f000 faa2 	bl	801ac20 <LCD_InitLUT>
 801a6dc:	4a2b      	ldr	r2, [pc, #172]	; (801a78c <emWin_LCD_Init+0x108>)
 801a6de:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801a6e2:	6812      	ldr	r2, [r2, #0]
 801a6e4:	429a      	cmp	r2, r3
 801a6e6:	d038      	beq.n	801a75a <emWin_LCD_Init+0xd6>
 801a6e8:	2401      	movs	r4, #1
 801a6ea:	4d29      	ldr	r5, [pc, #164]	; (801a790 <emWin_LCD_Init+0x10c>)
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	f7f9 ff61 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	3c01      	subs	r4, #1
 801a6f8:	9303      	str	r3, [sp, #12]
 801a6fa:	b363      	cbz	r3, 801a756 <emWin_LCD_Init+0xd2>
 801a6fc:	f7fc fd46 	bl	801718c <GUI_SelectLayer>
 801a700:	682b      	ldr	r3, [r5, #0]
 801a702:	2004      	movs	r0, #4
 801a704:	689b      	ldr	r3, [r3, #8]
 801a706:	4798      	blx	r3
 801a708:	6830      	ldr	r0, [r6, #0]
 801a70a:	f643 7cff 	movw	ip, #16383	; 0x3fff
 801a70e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 801a712:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a716:	4563      	cmp	r3, ip
 801a718:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801a71c:	bfa8      	it	ge
 801a71e:	4663      	movge	r3, ip
 801a720:	428b      	cmp	r3, r1
 801a722:	db0a      	blt.n	801a73a <emWin_LCD_Init+0xb6>
 801a724:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a728:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a72c:	45e6      	cmp	lr, ip
 801a72e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801a732:	bfa8      	it	ge
 801a734:	46e6      	movge	lr, ip
 801a736:	4596      	cmp	lr, r2
 801a738:	da17      	bge.n	801a76a <emWin_LCD_Init+0xe6>
 801a73a:	682b      	ldr	r3, [r5, #0]
 801a73c:	2000      	movs	r0, #0
 801a73e:	689b      	ldr	r3, [r3, #8]
 801a740:	4798      	blx	r3
 801a742:	9b03      	ldr	r3, [sp, #12]
 801a744:	210e      	movs	r1, #14
 801a746:	a803      	add	r0, sp, #12
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a74c:	4798      	blx	r3
 801a74e:	4603      	mov	r3, r0
 801a750:	b108      	cbz	r0, 801a756 <emWin_LCD_Init+0xd2>
 801a752:	9803      	ldr	r0, [sp, #12]
 801a754:	4798      	blx	r3
 801a756:	1c63      	adds	r3, r4, #1
 801a758:	d1c8      	bne.n	801a6ec <emWin_LCD_Init+0x68>
 801a75a:	2000      	movs	r0, #0
 801a75c:	b004      	add	sp, #16
 801a75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a762:	4620      	mov	r0, r4
 801a764:	b004      	add	sp, #16
 801a766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a76a:	7c40      	ldrb	r0, [r0, #17]
 801a76c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 801a770:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a774:	f8cd e000 	str.w	lr, [sp]
 801a778:	f8dc 8010 	ldr.w	r8, [ip, #16]
 801a77c:	47c0      	blx	r8
 801a77e:	e7dc      	b.n	801a73a <emWin_LCD_Init+0xb6>
 801a780:	2001      	movs	r0, #1
 801a782:	e7ef      	b.n	801a764 <emWin_LCD_Init+0xe0>
 801a784:	20000018 	.word	0x20000018
 801a788:	200467d0 	.word	0x200467d0
 801a78c:	20000014 	.word	0x20000014
 801a790:	2000005c 	.word	0x2000005c

0801a794 <LCD_Color2Index>:
 801a794:	4a04      	ldr	r2, [pc, #16]	; (801a7a8 <LCD_Color2Index+0x14>)
 801a796:	4b05      	ldr	r3, [pc, #20]	; (801a7ac <LCD_Color2Index+0x18>)
 801a798:	6812      	ldr	r2, [r2, #0]
 801a79a:	7c52      	ldrb	r2, [r2, #17]
 801a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7a0:	691b      	ldr	r3, [r3, #16]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	4718      	bx	r3
 801a7a6:	bf00      	nop
 801a7a8:	20000018 	.word	0x20000018
 801a7ac:	200467d0 	.word	0x200467d0

0801a7b0 <LCD_Index2Color>:
 801a7b0:	4a04      	ldr	r2, [pc, #16]	; (801a7c4 <LCD_Index2Color+0x14>)
 801a7b2:	4b05      	ldr	r3, [pc, #20]	; (801a7c8 <LCD_Index2Color+0x18>)
 801a7b4:	6812      	ldr	r2, [r2, #0]
 801a7b6:	7c52      	ldrb	r2, [r2, #17]
 801a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7bc:	691b      	ldr	r3, [r3, #16]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	4718      	bx	r3
 801a7c2:	bf00      	nop
 801a7c4:	20000018 	.word	0x20000018
 801a7c8:	200467d0 	.word	0x200467d0

0801a7cc <LCD_SetColorIndex>:
 801a7cc:	4b04      	ldr	r3, [pc, #16]	; (801a7e0 <LCD_SetColorIndex+0x14>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	7c1a      	ldrb	r2, [r3, #16]
 801a7d2:	0752      	lsls	r2, r2, #29
 801a7d4:	bf4c      	ite	mi
 801a7d6:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 801a7d8:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 801a7da:	6018      	str	r0, [r3, #0]
 801a7dc:	4770      	bx	lr
 801a7de:	bf00      	nop
 801a7e0:	20000018 	.word	0x20000018

0801a7e4 <LCD_SetBkColorIndex>:
 801a7e4:	4b04      	ldr	r3, [pc, #16]	; (801a7f8 <LCD_SetBkColorIndex+0x14>)
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	7c1a      	ldrb	r2, [r3, #16]
 801a7ea:	0752      	lsls	r2, r2, #29
 801a7ec:	bf4c      	ite	mi
 801a7ee:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 801a7f0:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 801a7f2:	6018      	str	r0, [r3, #0]
 801a7f4:	4770      	bx	lr
 801a7f6:	bf00      	nop
 801a7f8:	20000018 	.word	0x20000018

0801a7fc <LCD_SetBkColor>:
 801a7fc:	4b01      	ldr	r3, [pc, #4]	; (801a804 <LCD_SetBkColor+0x8>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	685b      	ldr	r3, [r3, #4]
 801a802:	4718      	bx	r3
 801a804:	2000005c 	.word	0x2000005c

0801a808 <LCD_SetColor>:
 801a808:	4b01      	ldr	r3, [pc, #4]	; (801a810 <LCD_SetColor+0x8>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	4718      	bx	r3
 801a810:	2000005c 	.word	0x2000005c

0801a814 <LCD_SetPixelAA4_NoTrans>:
 801a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a818:	4d25      	ldr	r5, [pc, #148]	; (801a8b0 <LCD_SetPixelAA4_NoTrans+0x9c>)
 801a81a:	682b      	ldr	r3, [r5, #0]
 801a81c:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a820:	428c      	cmp	r4, r1
 801a822:	dc31      	bgt.n	801a888 <LCD_SetPixelAA4_NoTrans+0x74>
 801a824:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a828:	42a1      	cmp	r1, r4
 801a82a:	dc2d      	bgt.n	801a888 <LCD_SetPixelAA4_NoTrans+0x74>
 801a82c:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a830:	4284      	cmp	r4, r0
 801a832:	dc29      	bgt.n	801a888 <LCD_SetPixelAA4_NoTrans+0x74>
 801a834:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a838:	42a0      	cmp	r0, r4
 801a83a:	dc25      	bgt.n	801a888 <LCD_SetPixelAA4_NoTrans+0x74>
 801a83c:	b332      	cbz	r2, 801a88c <LCD_SetPixelAA4_NoTrans+0x78>
 801a83e:	2a0f      	cmp	r2, #15
 801a840:	d02d      	beq.n	801a89e <LCD_SetPixelAA4_NoTrans+0x8a>
 801a842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a844:	4606      	mov	r6, r0
 801a846:	460c      	mov	r4, r1
 801a848:	4617      	mov	r7, r2
 801a84a:	6818      	ldr	r0, [r3, #0]
 801a84c:	f7ff ffb0 	bl	801a7b0 <LCD_Index2Color>
 801a850:	682b      	ldr	r3, [r5, #0]
 801a852:	4680      	mov	r8, r0
 801a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a856:	6818      	ldr	r0, [r3, #0]
 801a858:	f7ff ffaa 	bl	801a7b0 <LCD_Index2Color>
 801a85c:	4b15      	ldr	r3, [pc, #84]	; (801a8b4 <LCD_SetPixelAA4_NoTrans+0xa0>)
 801a85e:	4601      	mov	r1, r0
 801a860:	463a      	mov	r2, r7
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	4640      	mov	r0, r8
 801a866:	4798      	blx	r3
 801a868:	f7ff ff94 	bl	801a794 <LCD_Color2Index>
 801a86c:	682a      	ldr	r2, [r5, #0]
 801a86e:	4603      	mov	r3, r0
 801a870:	4d11      	ldr	r5, [pc, #68]	; (801a8b8 <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a872:	7c50      	ldrb	r0, [r2, #17]
 801a874:	4631      	mov	r1, r6
 801a876:	4622      	mov	r2, r4
 801a878:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a87c:	68c4      	ldr	r4, [r0, #12]
 801a87e:	69a4      	ldr	r4, [r4, #24]
 801a880:	46a4      	mov	ip, r4
 801a882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a886:	4760      	bx	ip
 801a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a88c:	7c5d      	ldrb	r5, [r3, #17]
 801a88e:	460a      	mov	r2, r1
 801a890:	4c09      	ldr	r4, [pc, #36]	; (801a8b8 <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a892:	4601      	mov	r1, r0
 801a894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a896:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	e7ee      	b.n	801a87c <LCD_SetPixelAA4_NoTrans+0x68>
 801a89e:	7c5d      	ldrb	r5, [r3, #17]
 801a8a0:	460a      	mov	r2, r1
 801a8a2:	4c05      	ldr	r4, [pc, #20]	; (801a8b8 <LCD_SetPixelAA4_NoTrans+0xa4>)
 801a8a4:	4601      	mov	r1, r0
 801a8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8a8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	e7e5      	b.n	801a87c <LCD_SetPixelAA4_NoTrans+0x68>
 801a8b0:	20000018 	.word	0x20000018
 801a8b4:	20000060 	.word	0x20000060
 801a8b8:	200467d0 	.word	0x200467d0

0801a8bc <LCD_SetPixelAA8_NoTrans>:
 801a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8c0:	4d27      	ldr	r5, [pc, #156]	; (801a960 <LCD_SetPixelAA8_NoTrans+0xa4>)
 801a8c2:	682b      	ldr	r3, [r5, #0]
 801a8c4:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a8c8:	428c      	cmp	r4, r1
 801a8ca:	dc34      	bgt.n	801a936 <LCD_SetPixelAA8_NoTrans+0x7a>
 801a8cc:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a8d0:	42a1      	cmp	r1, r4
 801a8d2:	dc30      	bgt.n	801a936 <LCD_SetPixelAA8_NoTrans+0x7a>
 801a8d4:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a8d8:	4284      	cmp	r4, r0
 801a8da:	dc2c      	bgt.n	801a936 <LCD_SetPixelAA8_NoTrans+0x7a>
 801a8dc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a8e0:	42a0      	cmp	r0, r4
 801a8e2:	dc28      	bgt.n	801a936 <LCD_SetPixelAA8_NoTrans+0x7a>
 801a8e4:	b34a      	cbz	r2, 801a93a <LCD_SetPixelAA8_NoTrans+0x7e>
 801a8e6:	2aff      	cmp	r2, #255	; 0xff
 801a8e8:	d030      	beq.n	801a94c <LCD_SetPixelAA8_NoTrans+0x90>
 801a8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	460c      	mov	r4, r1
 801a8f0:	4617      	mov	r7, r2
 801a8f2:	6818      	ldr	r0, [r3, #0]
 801a8f4:	f7ff ff5c 	bl	801a7b0 <LCD_Index2Color>
 801a8f8:	682b      	ldr	r3, [r5, #0]
 801a8fa:	4680      	mov	r8, r0
 801a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8fe:	6818      	ldr	r0, [r3, #0]
 801a900:	f7ff ff56 	bl	801a7b0 <LCD_Index2Color>
 801a904:	4b17      	ldr	r3, [pc, #92]	; (801a964 <LCD_SetPixelAA8_NoTrans+0xa8>)
 801a906:	4601      	mov	r1, r0
 801a908:	463a      	mov	r2, r7
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4640      	mov	r0, r8
 801a90e:	4798      	blx	r3
 801a910:	4b15      	ldr	r3, [pc, #84]	; (801a968 <LCD_SetPixelAA8_NoTrans+0xac>)
 801a912:	685b      	ldr	r3, [r3, #4]
 801a914:	4318      	orrs	r0, r3
 801a916:	f7ff ff3d 	bl	801a794 <LCD_Color2Index>
 801a91a:	682a      	ldr	r2, [r5, #0]
 801a91c:	4603      	mov	r3, r0
 801a91e:	4d13      	ldr	r5, [pc, #76]	; (801a96c <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a920:	7c50      	ldrb	r0, [r2, #17]
 801a922:	4631      	mov	r1, r6
 801a924:	4622      	mov	r2, r4
 801a926:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801a92a:	68c4      	ldr	r4, [r0, #12]
 801a92c:	69a4      	ldr	r4, [r4, #24]
 801a92e:	46a4      	mov	ip, r4
 801a930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a934:	4760      	bx	ip
 801a936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a93a:	7c5d      	ldrb	r5, [r3, #17]
 801a93c:	460a      	mov	r2, r1
 801a93e:	4c0b      	ldr	r4, [pc, #44]	; (801a96c <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a940:	4601      	mov	r1, r0
 801a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a944:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	e7ee      	b.n	801a92a <LCD_SetPixelAA8_NoTrans+0x6e>
 801a94c:	7c5d      	ldrb	r5, [r3, #17]
 801a94e:	460a      	mov	r2, r1
 801a950:	4c06      	ldr	r4, [pc, #24]	; (801a96c <LCD_SetPixelAA8_NoTrans+0xb0>)
 801a952:	4601      	mov	r1, r0
 801a954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a956:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	e7e5      	b.n	801a92a <LCD_SetPixelAA8_NoTrans+0x6e>
 801a95e:	bf00      	nop
 801a960:	20000018 	.word	0x20000018
 801a964:	20000044 	.word	0x20000044
 801a968:	20000060 	.word	0x20000060
 801a96c:	200467d0 	.word	0x200467d0

0801a970 <LCD_AA_MixColors16>:
 801a970:	b508      	push	{r3, lr}
 801a972:	0e0b      	lsrs	r3, r1, #24
 801a974:	d103      	bne.n	801a97e <LCD_AA_MixColors16+0xe>
 801a976:	0e03      	lsrs	r3, r0, #24
 801a978:	2bff      	cmp	r3, #255	; 0xff
 801a97a:	d00f      	beq.n	801a99c <LCD_AA_MixColors16+0x2c>
 801a97c:	b14b      	cbz	r3, 801a992 <LCD_AA_MixColors16+0x22>
 801a97e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a982:	4b0b      	ldr	r3, [pc, #44]	; (801a9b0 <LCD_AA_MixColors16+0x40>)
 801a984:	b2d2      	uxtb	r2, r2
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	4798      	blx	r3
 801a98a:	4b0a      	ldr	r3, [pc, #40]	; (801a9b4 <LCD_AA_MixColors16+0x44>)
 801a98c:	685a      	ldr	r2, [r3, #4]
 801a98e:	4310      	orrs	r0, r2
 801a990:	bd08      	pop	{r3, pc}
 801a992:	4b08      	ldr	r3, [pc, #32]	; (801a9b4 <LCD_AA_MixColors16+0x44>)
 801a994:	685a      	ldr	r2, [r3, #4]
 801a996:	ea41 0002 	orr.w	r0, r1, r2
 801a99a:	bd08      	pop	{r3, pc}
 801a99c:	4b05      	ldr	r3, [pc, #20]	; (801a9b4 <LCD_AA_MixColors16+0x44>)
 801a99e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801a9a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801a9a6:	685b      	ldr	r3, [r3, #4]
 801a9a8:	4318      	orrs	r0, r3
 801a9aa:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 801a9ae:	bd08      	pop	{r3, pc}
 801a9b0:	20000044 	.word	0x20000044
 801a9b4:	20000060 	.word	0x20000060

0801a9b8 <LCD_SetPixelAA4_Trans>:
 801a9b8:	2a00      	cmp	r2, #0
 801a9ba:	d039      	beq.n	801aa30 <LCD_SetPixelAA4_Trans+0x78>
 801a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9c0:	4f20      	ldr	r7, [pc, #128]	; (801aa44 <LCD_SetPixelAA4_Trans+0x8c>)
 801a9c2:	683b      	ldr	r3, [r7, #0]
 801a9c4:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801a9c8:	42a1      	cmp	r1, r4
 801a9ca:	db2f      	blt.n	801aa2c <LCD_SetPixelAA4_Trans+0x74>
 801a9cc:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801a9d0:	42a1      	cmp	r1, r4
 801a9d2:	dc2b      	bgt.n	801aa2c <LCD_SetPixelAA4_Trans+0x74>
 801a9d4:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801a9d8:	42a0      	cmp	r0, r4
 801a9da:	db27      	blt.n	801aa2c <LCD_SetPixelAA4_Trans+0x74>
 801a9dc:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a9e0:	42a0      	cmp	r0, r4
 801a9e2:	dc23      	bgt.n	801aa2c <LCD_SetPixelAA4_Trans+0x74>
 801a9e4:	2a0e      	cmp	r2, #14
 801a9e6:	d824      	bhi.n	801aa32 <LCD_SetPixelAA4_Trans+0x7a>
 801a9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9ea:	460d      	mov	r5, r1
 801a9ec:	4606      	mov	r6, r0
 801a9ee:	4614      	mov	r4, r2
 801a9f0:	6818      	ldr	r0, [r3, #0]
 801a9f2:	f7ff fedd 	bl	801a7b0 <LCD_Index2Color>
 801a9f6:	4629      	mov	r1, r5
 801a9f8:	4680      	mov	r8, r0
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	f000 fb66 	bl	801b0cc <LCD_GetPixelColor>
 801aa00:	4b11      	ldr	r3, [pc, #68]	; (801aa48 <LCD_SetPixelAA4_Trans+0x90>)
 801aa02:	4601      	mov	r1, r0
 801aa04:	4622      	mov	r2, r4
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	4640      	mov	r0, r8
 801aa0a:	4798      	blx	r3
 801aa0c:	4c0f      	ldr	r4, [pc, #60]	; (801aa4c <LCD_SetPixelAA4_Trans+0x94>)
 801aa0e:	f7ff fec1 	bl	801a794 <LCD_Color2Index>
 801aa12:	683a      	ldr	r2, [r7, #0]
 801aa14:	4603      	mov	r3, r0
 801aa16:	4631      	mov	r1, r6
 801aa18:	7c50      	ldrb	r0, [r2, #17]
 801aa1a:	462a      	mov	r2, r5
 801aa1c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801aa20:	68c4      	ldr	r4, [r0, #12]
 801aa22:	69a4      	ldr	r4, [r4, #24]
 801aa24:	46a4      	mov	ip, r4
 801aa26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa2a:	4760      	bx	ip
 801aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa30:	4770      	bx	lr
 801aa32:	7c5d      	ldrb	r5, [r3, #17]
 801aa34:	460a      	mov	r2, r1
 801aa36:	4c05      	ldr	r4, [pc, #20]	; (801aa4c <LCD_SetPixelAA4_Trans+0x94>)
 801aa38:	4601      	mov	r1, r0
 801aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa3c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	e7ed      	b.n	801aa20 <LCD_SetPixelAA4_Trans+0x68>
 801aa44:	20000018 	.word	0x20000018
 801aa48:	20000060 	.word	0x20000060
 801aa4c:	200467d0 	.word	0x200467d0

0801aa50 <LCD_SetPixelAA8_Trans>:
 801aa50:	2a00      	cmp	r2, #0
 801aa52:	d03c      	beq.n	801aace <LCD_SetPixelAA8_Trans+0x7e>
 801aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa58:	4f22      	ldr	r7, [pc, #136]	; (801aae4 <LCD_SetPixelAA8_Trans+0x94>)
 801aa5a:	683b      	ldr	r3, [r7, #0]
 801aa5c:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 801aa60:	42a1      	cmp	r1, r4
 801aa62:	db32      	blt.n	801aaca <LCD_SetPixelAA8_Trans+0x7a>
 801aa64:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 801aa68:	42a1      	cmp	r1, r4
 801aa6a:	dc2e      	bgt.n	801aaca <LCD_SetPixelAA8_Trans+0x7a>
 801aa6c:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801aa70:	42a0      	cmp	r0, r4
 801aa72:	db2a      	blt.n	801aaca <LCD_SetPixelAA8_Trans+0x7a>
 801aa74:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801aa78:	42a0      	cmp	r0, r4
 801aa7a:	dc26      	bgt.n	801aaca <LCD_SetPixelAA8_Trans+0x7a>
 801aa7c:	2aff      	cmp	r2, #255	; 0xff
 801aa7e:	d027      	beq.n	801aad0 <LCD_SetPixelAA8_Trans+0x80>
 801aa80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa82:	460d      	mov	r5, r1
 801aa84:	4606      	mov	r6, r0
 801aa86:	4614      	mov	r4, r2
 801aa88:	6818      	ldr	r0, [r3, #0]
 801aa8a:	f7ff fe91 	bl	801a7b0 <LCD_Index2Color>
 801aa8e:	4629      	mov	r1, r5
 801aa90:	4680      	mov	r8, r0
 801aa92:	4630      	mov	r0, r6
 801aa94:	f000 fb1a 	bl	801b0cc <LCD_GetPixelColor>
 801aa98:	4b13      	ldr	r3, [pc, #76]	; (801aae8 <LCD_SetPixelAA8_Trans+0x98>)
 801aa9a:	4601      	mov	r1, r0
 801aa9c:	4622      	mov	r2, r4
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	4640      	mov	r0, r8
 801aaa2:	4798      	blx	r3
 801aaa4:	4b11      	ldr	r3, [pc, #68]	; (801aaec <LCD_SetPixelAA8_Trans+0x9c>)
 801aaa6:	4c12      	ldr	r4, [pc, #72]	; (801aaf0 <LCD_SetPixelAA8_Trans+0xa0>)
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	4318      	orrs	r0, r3
 801aaac:	f7ff fe72 	bl	801a794 <LCD_Color2Index>
 801aab0:	683a      	ldr	r2, [r7, #0]
 801aab2:	4603      	mov	r3, r0
 801aab4:	4631      	mov	r1, r6
 801aab6:	7c50      	ldrb	r0, [r2, #17]
 801aab8:	462a      	mov	r2, r5
 801aaba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801aabe:	68c4      	ldr	r4, [r0, #12]
 801aac0:	69a4      	ldr	r4, [r4, #24]
 801aac2:	46a4      	mov	ip, r4
 801aac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aac8:	4760      	bx	ip
 801aaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aace:	4770      	bx	lr
 801aad0:	7c5d      	ldrb	r5, [r3, #17]
 801aad2:	460a      	mov	r2, r1
 801aad4:	4c06      	ldr	r4, [pc, #24]	; (801aaf0 <LCD_SetPixelAA8_Trans+0xa0>)
 801aad6:	4601      	mov	r1, r0
 801aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aada:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	e7ed      	b.n	801aabe <LCD_SetPixelAA8_Trans+0x6e>
 801aae2:	bf00      	nop
 801aae4:	20000018 	.word	0x20000018
 801aae8:	20000044 	.word	0x20000044
 801aaec:	20000060 	.word	0x20000060
 801aaf0:	200467d0 	.word	0x200467d0

0801aaf4 <LCD_AA_SetOrMask>:
 801aaf4:	4b02      	ldr	r3, [pc, #8]	; (801ab00 <LCD_AA_SetOrMask+0xc>)
 801aaf6:	685a      	ldr	r2, [r3, #4]
 801aaf8:	6058      	str	r0, [r3, #4]
 801aafa:	4610      	mov	r0, r2
 801aafc:	4770      	bx	lr
 801aafe:	bf00      	nop
 801ab00:	20000060 	.word	0x20000060

0801ab04 <LCD__GetPfSetPixel>:
 801ab04:	2804      	cmp	r0, #4
 801ab06:	d005      	beq.n	801ab14 <LCD__GetPfSetPixel+0x10>
 801ab08:	2808      	cmp	r0, #8
 801ab0a:	d00d      	beq.n	801ab28 <LCD__GetPfSetPixel+0x24>
 801ab0c:	2802      	cmp	r0, #2
 801ab0e:	d001      	beq.n	801ab14 <LCD__GetPfSetPixel+0x10>
 801ab10:	2000      	movs	r0, #0
 801ab12:	4770      	bx	lr
 801ab14:	4a09      	ldr	r2, [pc, #36]	; (801ab3c <LCD__GetPfSetPixel+0x38>)
 801ab16:	4b0a      	ldr	r3, [pc, #40]	; (801ab40 <LCD__GetPfSetPixel+0x3c>)
 801ab18:	6812      	ldr	r2, [r2, #0]
 801ab1a:	480a      	ldr	r0, [pc, #40]	; (801ab44 <LCD__GetPfSetPixel+0x40>)
 801ab1c:	7c12      	ldrb	r2, [r2, #16]
 801ab1e:	f012 0f02 	tst.w	r2, #2
 801ab22:	bf08      	it	eq
 801ab24:	4618      	moveq	r0, r3
 801ab26:	4770      	bx	lr
 801ab28:	4a04      	ldr	r2, [pc, #16]	; (801ab3c <LCD__GetPfSetPixel+0x38>)
 801ab2a:	4b07      	ldr	r3, [pc, #28]	; (801ab48 <LCD__GetPfSetPixel+0x44>)
 801ab2c:	6812      	ldr	r2, [r2, #0]
 801ab2e:	4807      	ldr	r0, [pc, #28]	; (801ab4c <LCD__GetPfSetPixel+0x48>)
 801ab30:	7c12      	ldrb	r2, [r2, #16]
 801ab32:	f012 0f02 	tst.w	r2, #2
 801ab36:	bf08      	it	eq
 801ab38:	4618      	moveq	r0, r3
 801ab3a:	4770      	bx	lr
 801ab3c:	20000018 	.word	0x20000018
 801ab40:	0801a815 	.word	0x0801a815
 801ab44:	0801a9b9 	.word	0x0801a9b9
 801ab48:	0801a8bd 	.word	0x0801a8bd
 801ab4c:	0801aa51 	.word	0x0801aa51

0801ab50 <_OnExit>:
 801ab50:	b510      	push	{r4, lr}
 801ab52:	4c04      	ldr	r4, [pc, #16]	; (801ab64 <_OnExit+0x14>)
 801ab54:	6820      	ldr	r0, [r4, #0]
 801ab56:	f7f7 ffe9 	bl	8012b2c <GUI_ALLOC_FreeFixedBlock>
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	4a02      	ldr	r2, [pc, #8]	; (801ab68 <_OnExit+0x18>)
 801ab5e:	6023      	str	r3, [r4, #0]
 801ab60:	6013      	str	r3, [r2, #0]
 801ab62:	bd10      	pop	{r4, pc}
 801ab64:	200467f0 	.word	0x200467f0
 801ab68:	200003c8 	.word	0x200003c8

0801ab6c <LCD_InitColors>:
 801ab6c:	b538      	push	{r3, r4, r5, lr}
 801ab6e:	4d0b      	ldr	r5, [pc, #44]	; (801ab9c <LCD_InitColors+0x30>)
 801ab70:	682c      	ldr	r4, [r5, #0]
 801ab72:	b10c      	cbz	r4, 801ab78 <LCD_InitColors+0xc>
 801ab74:	2000      	movs	r0, #0
 801ab76:	bd38      	pop	{r3, r4, r5, pc}
 801ab78:	4b09      	ldr	r3, [pc, #36]	; (801aba0 <LCD_InitColors+0x34>)
 801ab7a:	6818      	ldr	r0, [r3, #0]
 801ab7c:	0080      	lsls	r0, r0, #2
 801ab7e:	f7f7 ffdf 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ab82:	6028      	str	r0, [r5, #0]
 801ab84:	b138      	cbz	r0, 801ab96 <LCD_InitColors+0x2a>
 801ab86:	4b07      	ldr	r3, [pc, #28]	; (801aba4 <LCD_InitColors+0x38>)
 801ab88:	4807      	ldr	r0, [pc, #28]	; (801aba8 <LCD_InitColors+0x3c>)
 801ab8a:	f840 3f04 	str.w	r3, [r0, #4]!
 801ab8e:	f7f9 fcd3 	bl	8014538 <GUI__RegisterExit>
 801ab92:	4620      	mov	r0, r4
 801ab94:	bd38      	pop	{r3, r4, r5, pc}
 801ab96:	2001      	movs	r0, #1
 801ab98:	bd38      	pop	{r3, r4, r5, pc}
 801ab9a:	bf00      	nop
 801ab9c:	200467f0 	.word	0x200467f0
 801aba0:	20000078 	.word	0x20000078
 801aba4:	0801ab51 	.word	0x0801ab51
 801aba8:	200003c8 	.word	0x200003c8

0801abac <LCD_GetpPalConvTableBM>:
 801abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abb0:	b360      	cbz	r0, 801ac0c <LCD_GetpPalConvTableBM+0x60>
 801abb2:	6885      	ldr	r5, [r0, #8]
 801abb4:	b365      	cbz	r5, 801ac10 <LCD_GetpPalConvTableBM+0x64>
 801abb6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801ac1c <LCD_GetpPalConvTableBM+0x70>
 801abba:	f8d8 6000 	ldr.w	r6, [r8]
 801abbe:	b306      	cbz	r6, 801ac02 <LCD_GetpPalConvTableBM+0x56>
 801abc0:	6807      	ldr	r7, [r0, #0]
 801abc2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 801abc6:	dc1f      	bgt.n	801ac08 <LCD_GetpPalConvTableBM+0x5c>
 801abc8:	4b12      	ldr	r3, [pc, #72]	; (801ac14 <LCD_GetpPalConvTableBM+0x68>)
 801abca:	4681      	mov	r9, r0
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	429f      	cmp	r7, r3
 801abd0:	bfa8      	it	ge
 801abd2:	461f      	movge	r7, r3
 801abd4:	2f00      	cmp	r7, #0
 801abd6:	dd0d      	ble.n	801abf4 <LCD_GetpPalConvTableBM+0x48>
 801abd8:	3d04      	subs	r5, #4
 801abda:	2400      	movs	r4, #0
 801abdc:	e001      	b.n	801abe2 <LCD_GetpPalConvTableBM+0x36>
 801abde:	f8d8 6000 	ldr.w	r6, [r8]
 801abe2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801abe6:	f7ff fdd5 	bl	801a794 <LCD_Color2Index>
 801abea:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 801abee:	3401      	adds	r4, #1
 801abf0:	42bc      	cmp	r4, r7
 801abf2:	d1f4      	bne.n	801abde <LCD_GetpPalConvTableBM+0x32>
 801abf4:	4b08      	ldr	r3, [pc, #32]	; (801ac18 <LCD_GetpPalConvTableBM+0x6c>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	b10b      	cbz	r3, 801abfe <LCD_GetpPalConvTableBM+0x52>
 801abfa:	4648      	mov	r0, r9
 801abfc:	4798      	blx	r3
 801abfe:	f8d8 6000 	ldr.w	r6, [r8]
 801ac02:	4630      	mov	r0, r6
 801ac04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac08:	2600      	movs	r6, #0
 801ac0a:	e7fa      	b.n	801ac02 <LCD_GetpPalConvTableBM+0x56>
 801ac0c:	4606      	mov	r6, r0
 801ac0e:	e7f8      	b.n	801ac02 <LCD_GetpPalConvTableBM+0x56>
 801ac10:	462e      	mov	r6, r5
 801ac12:	e7f6      	b.n	801ac02 <LCD_GetpPalConvTableBM+0x56>
 801ac14:	20000078 	.word	0x20000078
 801ac18:	200003c8 	.word	0x200003c8
 801ac1c:	200467f0 	.word	0x200467f0

0801ac20 <LCD_InitLUT>:
 801ac20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	f000 f9dc 	bl	801afe0 <LCD_GetNumLayers>
 801ac28:	f1b0 0900 	subs.w	r9, r0, #0
 801ac2c:	dd2f      	ble.n	801ac8e <LCD_InitLUT+0x6e>
 801ac2e:	2500      	movs	r5, #0
 801ac30:	4f18      	ldr	r7, [pc, #96]	; (801ac94 <LCD_InitLUT+0x74>)
 801ac32:	f8df b068 	ldr.w	fp, [pc, #104]	; 801ac9c <LCD_InitLUT+0x7c>
 801ac36:	4628      	mov	r0, r5
 801ac38:	f7f9 fcbc 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ac3c:	b320      	cbz	r0, 801ac88 <LCD_InitLUT+0x68>
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	4628      	mov	r0, r5
 801ac42:	f893 8011 	ldrb.w	r8, [r3, #17]
 801ac46:	745d      	strb	r5, [r3, #17]
 801ac48:	f000 f87a 	bl	801ad40 <LCD_GetBitsPerPixelEx>
 801ac4c:	2808      	cmp	r0, #8
 801ac4e:	dc18      	bgt.n	801ac82 <LCD_InitLUT+0x62>
 801ac50:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 801ac54:	4a10      	ldr	r2, [pc, #64]	; (801ac98 <LCD_InitLUT+0x78>)
 801ac56:	691b      	ldr	r3, [r3, #16]
 801ac58:	4293      	cmp	r3, r2
 801ac5a:	d012      	beq.n	801ac82 <LCD_InitLUT+0x62>
 801ac5c:	4628      	mov	r0, r5
 801ac5e:	f000 f87f 	bl	801ad60 <LCD_GetNumColorsEx>
 801ac62:	1e06      	subs	r6, r0, #0
 801ac64:	dd0d      	ble.n	801ac82 <LCD_InitLUT+0x62>
 801ac66:	2400      	movs	r4, #0
 801ac68:	fa5f fa84 	uxtb.w	sl, r4
 801ac6c:	3401      	adds	r4, #1
 801ac6e:	4650      	mov	r0, sl
 801ac70:	f7ff fd9e 	bl	801a7b0 <LCD_Index2Color>
 801ac74:	4651      	mov	r1, sl
 801ac76:	4602      	mov	r2, r0
 801ac78:	4628      	mov	r0, r5
 801ac7a:	f000 ff63 	bl	801bb44 <LCD_SetLUTEntryEx>
 801ac7e:	42a6      	cmp	r6, r4
 801ac80:	d1f2      	bne.n	801ac68 <LCD_InitLUT+0x48>
 801ac82:	683b      	ldr	r3, [r7, #0]
 801ac84:	f883 8011 	strb.w	r8, [r3, #17]
 801ac88:	3501      	adds	r5, #1
 801ac8a:	45a9      	cmp	r9, r5
 801ac8c:	d1d3      	bne.n	801ac36 <LCD_InitLUT+0x16>
 801ac8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac92:	bf00      	nop
 801ac94:	20000018 	.word	0x20000018
 801ac98:	08034724 	.word	0x08034724
 801ac9c:	200467d0 	.word	0x200467d0

0801aca0 <LCD_GetBkColorIndex>:
 801aca0:	4b02      	ldr	r3, [pc, #8]	; (801acac <LCD_GetBkColorIndex+0xc>)
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aca6:	6818      	ldr	r0, [r3, #0]
 801aca8:	4770      	bx	lr
 801acaa:	bf00      	nop
 801acac:	20000018 	.word	0x20000018

0801acb0 <LCD_GetColorIndex>:
 801acb0:	4b02      	ldr	r3, [pc, #8]	; (801acbc <LCD_GetColorIndex+0xc>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801acb6:	6818      	ldr	r0, [r3, #0]
 801acb8:	4770      	bx	lr
 801acba:	bf00      	nop
 801acbc:	20000018 	.word	0x20000018

0801acc0 <LCD_GetXSizeEx>:
 801acc0:	2801      	cmp	r0, #1
 801acc2:	dd01      	ble.n	801acc8 <LCD_GetXSizeEx+0x8>
 801acc4:	2000      	movs	r0, #0
 801acc6:	4770      	bx	lr
 801acc8:	b510      	push	{r4, lr}
 801acca:	f7f9 fc73 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801acce:	b128      	cbz	r0, 801acdc <LCD_GetXSizeEx+0x1c>
 801acd0:	68c3      	ldr	r3, [r0, #12]
 801acd2:	2101      	movs	r1, #1
 801acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acda:	4718      	bx	r3
 801acdc:	2000      	movs	r0, #0
 801acde:	bd10      	pop	{r4, pc}

0801ace0 <LCD_GetYSizeEx>:
 801ace0:	2801      	cmp	r0, #1
 801ace2:	dd01      	ble.n	801ace8 <LCD_GetYSizeEx+0x8>
 801ace4:	2000      	movs	r0, #0
 801ace6:	4770      	bx	lr
 801ace8:	b510      	push	{r4, lr}
 801acea:	f7f9 fc63 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801acee:	b128      	cbz	r0, 801acfc <LCD_GetYSizeEx+0x1c>
 801acf0:	68c3      	ldr	r3, [r0, #12]
 801acf2:	2102      	movs	r1, #2
 801acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acfa:	4718      	bx	r3
 801acfc:	2000      	movs	r0, #0
 801acfe:	bd10      	pop	{r4, pc}

0801ad00 <LCD_GetVXSizeEx>:
 801ad00:	2801      	cmp	r0, #1
 801ad02:	dd01      	ble.n	801ad08 <LCD_GetVXSizeEx+0x8>
 801ad04:	2000      	movs	r0, #0
 801ad06:	4770      	bx	lr
 801ad08:	b510      	push	{r4, lr}
 801ad0a:	f7f9 fc53 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ad0e:	b128      	cbz	r0, 801ad1c <LCD_GetVXSizeEx+0x1c>
 801ad10:	68c3      	ldr	r3, [r0, #12]
 801ad12:	2103      	movs	r1, #3
 801ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad1a:	4718      	bx	r3
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	bd10      	pop	{r4, pc}

0801ad20 <LCD_GetVYSizeEx>:
 801ad20:	2801      	cmp	r0, #1
 801ad22:	dd01      	ble.n	801ad28 <LCD_GetVYSizeEx+0x8>
 801ad24:	2000      	movs	r0, #0
 801ad26:	4770      	bx	lr
 801ad28:	b510      	push	{r4, lr}
 801ad2a:	f7f9 fc43 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ad2e:	b128      	cbz	r0, 801ad3c <LCD_GetVYSizeEx+0x1c>
 801ad30:	68c3      	ldr	r3, [r0, #12]
 801ad32:	2104      	movs	r1, #4
 801ad34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad3a:	4718      	bx	r3
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	bd10      	pop	{r4, pc}

0801ad40 <LCD_GetBitsPerPixelEx>:
 801ad40:	2801      	cmp	r0, #1
 801ad42:	dd01      	ble.n	801ad48 <LCD_GetBitsPerPixelEx+0x8>
 801ad44:	2000      	movs	r0, #0
 801ad46:	4770      	bx	lr
 801ad48:	b510      	push	{r4, lr}
 801ad4a:	f7f9 fc33 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ad4e:	b128      	cbz	r0, 801ad5c <LCD_GetBitsPerPixelEx+0x1c>
 801ad50:	68c3      	ldr	r3, [r0, #12]
 801ad52:	2108      	movs	r1, #8
 801ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad5a:	4718      	bx	r3
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	bd10      	pop	{r4, pc}

0801ad60 <LCD_GetNumColorsEx>:
 801ad60:	2801      	cmp	r0, #1
 801ad62:	dd01      	ble.n	801ad68 <LCD_GetNumColorsEx+0x8>
 801ad64:	2000      	movs	r0, #0
 801ad66:	4770      	bx	lr
 801ad68:	b510      	push	{r4, lr}
 801ad6a:	f7f9 fc23 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ad6e:	b128      	cbz	r0, 801ad7c <LCD_GetNumColorsEx+0x1c>
 801ad70:	68c3      	ldr	r3, [r0, #12]
 801ad72:	2109      	movs	r1, #9
 801ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad7a:	4718      	bx	r3
 801ad7c:	2000      	movs	r0, #0
 801ad7e:	bd10      	pop	{r4, pc}

0801ad80 <LCD_GetMirrorXEx>:
 801ad80:	2801      	cmp	r0, #1
 801ad82:	dd01      	ble.n	801ad88 <LCD_GetMirrorXEx+0x8>
 801ad84:	2000      	movs	r0, #0
 801ad86:	4770      	bx	lr
 801ad88:	b510      	push	{r4, lr}
 801ad8a:	f7f9 fc13 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ad8e:	b128      	cbz	r0, 801ad9c <LCD_GetMirrorXEx+0x1c>
 801ad90:	68c3      	ldr	r3, [r0, #12]
 801ad92:	210c      	movs	r1, #12
 801ad94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad9a:	4718      	bx	r3
 801ad9c:	2000      	movs	r0, #0
 801ad9e:	bd10      	pop	{r4, pc}

0801ada0 <LCD_GetMirrorYEx>:
 801ada0:	2801      	cmp	r0, #1
 801ada2:	dd01      	ble.n	801ada8 <LCD_GetMirrorYEx+0x8>
 801ada4:	2000      	movs	r0, #0
 801ada6:	4770      	bx	lr
 801ada8:	b510      	push	{r4, lr}
 801adaa:	f7f9 fc03 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801adae:	b128      	cbz	r0, 801adbc <LCD_GetMirrorYEx+0x1c>
 801adb0:	68c3      	ldr	r3, [r0, #12]
 801adb2:	210d      	movs	r1, #13
 801adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adba:	4718      	bx	r3
 801adbc:	2000      	movs	r0, #0
 801adbe:	bd10      	pop	{r4, pc}

0801adc0 <LCD_GetSwapXYEx>:
 801adc0:	2801      	cmp	r0, #1
 801adc2:	dd01      	ble.n	801adc8 <LCD_GetSwapXYEx+0x8>
 801adc4:	2000      	movs	r0, #0
 801adc6:	4770      	bx	lr
 801adc8:	b510      	push	{r4, lr}
 801adca:	f7f9 fbf3 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801adce:	b128      	cbz	r0, 801addc <LCD_GetSwapXYEx+0x1c>
 801add0:	68c3      	ldr	r3, [r0, #12]
 801add2:	210e      	movs	r1, #14
 801add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801add6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adda:	4718      	bx	r3
 801addc:	2000      	movs	r0, #0
 801adde:	bd10      	pop	{r4, pc}

0801ade0 <LCD_GetXSize>:
 801ade0:	4b09      	ldr	r3, [pc, #36]	; (801ae08 <LCD_GetXSize+0x28>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	7c58      	ldrb	r0, [r3, #17]
 801ade6:	2801      	cmp	r0, #1
 801ade8:	dd01      	ble.n	801adee <LCD_GetXSize+0xe>
 801adea:	2000      	movs	r0, #0
 801adec:	4770      	bx	lr
 801adee:	b510      	push	{r4, lr}
 801adf0:	f7f9 fbe0 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801adf4:	b128      	cbz	r0, 801ae02 <LCD_GetXSize+0x22>
 801adf6:	68c3      	ldr	r3, [r0, #12]
 801adf8:	2101      	movs	r1, #1
 801adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae00:	4718      	bx	r3
 801ae02:	2000      	movs	r0, #0
 801ae04:	bd10      	pop	{r4, pc}
 801ae06:	bf00      	nop
 801ae08:	20000018 	.word	0x20000018

0801ae0c <LCD_GetYSize>:
 801ae0c:	4b09      	ldr	r3, [pc, #36]	; (801ae34 <LCD_GetYSize+0x28>)
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	7c58      	ldrb	r0, [r3, #17]
 801ae12:	2801      	cmp	r0, #1
 801ae14:	dd01      	ble.n	801ae1a <LCD_GetYSize+0xe>
 801ae16:	2000      	movs	r0, #0
 801ae18:	4770      	bx	lr
 801ae1a:	b510      	push	{r4, lr}
 801ae1c:	f7f9 fbca 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ae20:	b128      	cbz	r0, 801ae2e <LCD_GetYSize+0x22>
 801ae22:	68c3      	ldr	r3, [r0, #12]
 801ae24:	2102      	movs	r1, #2
 801ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae2c:	4718      	bx	r3
 801ae2e:	2000      	movs	r0, #0
 801ae30:	bd10      	pop	{r4, pc}
 801ae32:	bf00      	nop
 801ae34:	20000018 	.word	0x20000018

0801ae38 <LCD_GetNumColors>:
 801ae38:	4b09      	ldr	r3, [pc, #36]	; (801ae60 <LCD_GetNumColors+0x28>)
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	7c58      	ldrb	r0, [r3, #17]
 801ae3e:	2801      	cmp	r0, #1
 801ae40:	dd01      	ble.n	801ae46 <LCD_GetNumColors+0xe>
 801ae42:	2000      	movs	r0, #0
 801ae44:	4770      	bx	lr
 801ae46:	b510      	push	{r4, lr}
 801ae48:	f7f9 fbb4 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ae4c:	b128      	cbz	r0, 801ae5a <LCD_GetNumColors+0x22>
 801ae4e:	68c3      	ldr	r3, [r0, #12]
 801ae50:	2109      	movs	r1, #9
 801ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae58:	4718      	bx	r3
 801ae5a:	2000      	movs	r0, #0
 801ae5c:	bd10      	pop	{r4, pc}
 801ae5e:	bf00      	nop
 801ae60:	20000018 	.word	0x20000018

0801ae64 <GUI_GetBitsPerPixelEx>:
 801ae64:	4b03      	ldr	r3, [pc, #12]	; (801ae74 <GUI_GetBitsPerPixelEx+0x10>)
 801ae66:	2108      	movs	r1, #8
 801ae68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801ae6c:	68c3      	ldr	r3, [r0, #12]
 801ae6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae70:	4718      	bx	r3
 801ae72:	bf00      	nop
 801ae74:	200467d0 	.word	0x200467d0

0801ae78 <LCD_GetPalette>:
 801ae78:	4b06      	ldr	r3, [pc, #24]	; (801ae94 <LCD_GetPalette+0x1c>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	b510      	push	{r4, lr}
 801ae7e:	7c58      	ldrb	r0, [r3, #17]
 801ae80:	f7f9 fb98 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801ae84:	b128      	cbz	r0, 801ae92 <LCD_GetPalette+0x1a>
 801ae86:	68c3      	ldr	r3, [r0, #12]
 801ae88:	2102      	movs	r1, #2
 801ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae90:	4718      	bx	r3
 801ae92:	bd10      	pop	{r4, pc}
 801ae94:	20000018 	.word	0x20000018

0801ae98 <GUI_GetpfIndex2ColorEx>:
 801ae98:	4b02      	ldr	r3, [pc, #8]	; (801aea4 <GUI_GetpfIndex2ColorEx+0xc>)
 801ae9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ae9e:	691b      	ldr	r3, [r3, #16]
 801aea0:	6858      	ldr	r0, [r3, #4]
 801aea2:	4770      	bx	lr
 801aea4:	200467d0 	.word	0x200467d0

0801aea8 <GUI_GetpfColor2IndexEx>:
 801aea8:	4b02      	ldr	r3, [pc, #8]	; (801aeb4 <GUI_GetpfColor2IndexEx+0xc>)
 801aeaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801aeae:	691b      	ldr	r3, [r3, #16]
 801aeb0:	6818      	ldr	r0, [r3, #0]
 801aeb2:	4770      	bx	lr
 801aeb4:	200467d0 	.word	0x200467d0

0801aeb8 <LCD_GetXSizeMax>:
 801aeb8:	b538      	push	{r3, r4, r5, lr}
 801aeba:	2501      	movs	r5, #1
 801aebc:	2400      	movs	r4, #0
 801aebe:	4628      	mov	r0, r5
 801aec0:	f7f9 fb78 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801aec4:	2101      	movs	r1, #1
 801aec6:	b178      	cbz	r0, 801aee8 <LCD_GetXSizeMax+0x30>
 801aec8:	68c3      	ldr	r3, [r0, #12]
 801aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aecc:	4798      	blx	r3
 801aece:	4284      	cmp	r4, r0
 801aed0:	bfb8      	it	lt
 801aed2:	4604      	movlt	r4, r0
 801aed4:	b90d      	cbnz	r5, 801aeda <LCD_GetXSizeMax+0x22>
 801aed6:	4620      	mov	r0, r4
 801aed8:	bd38      	pop	{r3, r4, r5, pc}
 801aeda:	2500      	movs	r5, #0
 801aedc:	4628      	mov	r0, r5
 801aede:	f7f9 fb69 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801aee2:	2101      	movs	r1, #1
 801aee4:	2800      	cmp	r0, #0
 801aee6:	d1ef      	bne.n	801aec8 <LCD_GetXSizeMax+0x10>
 801aee8:	e7f1      	b.n	801aece <LCD_GetXSizeMax+0x16>
 801aeea:	bf00      	nop

0801aeec <LCD_GetYSizeMax>:
 801aeec:	b538      	push	{r3, r4, r5, lr}
 801aeee:	2501      	movs	r5, #1
 801aef0:	2400      	movs	r4, #0
 801aef2:	4628      	mov	r0, r5
 801aef4:	f7f9 fb5e 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801aef8:	2102      	movs	r1, #2
 801aefa:	b178      	cbz	r0, 801af1c <LCD_GetYSizeMax+0x30>
 801aefc:	68c3      	ldr	r3, [r0, #12]
 801aefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af00:	4798      	blx	r3
 801af02:	4284      	cmp	r4, r0
 801af04:	bfb8      	it	lt
 801af06:	4604      	movlt	r4, r0
 801af08:	b90d      	cbnz	r5, 801af0e <LCD_GetYSizeMax+0x22>
 801af0a:	4620      	mov	r0, r4
 801af0c:	bd38      	pop	{r3, r4, r5, pc}
 801af0e:	2500      	movs	r5, #0
 801af10:	4628      	mov	r0, r5
 801af12:	f7f9 fb4f 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801af16:	2102      	movs	r1, #2
 801af18:	2800      	cmp	r0, #0
 801af1a:	d1ef      	bne.n	801aefc <LCD_GetYSizeMax+0x10>
 801af1c:	e7f1      	b.n	801af02 <LCD_GetYSizeMax+0x16>
 801af1e:	bf00      	nop

0801af20 <LCD_GetVXSizeMax>:
 801af20:	b538      	push	{r3, r4, r5, lr}
 801af22:	2501      	movs	r5, #1
 801af24:	2400      	movs	r4, #0
 801af26:	4628      	mov	r0, r5
 801af28:	f7f9 fb44 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801af2c:	2103      	movs	r1, #3
 801af2e:	b178      	cbz	r0, 801af50 <LCD_GetVXSizeMax+0x30>
 801af30:	68c3      	ldr	r3, [r0, #12]
 801af32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af34:	4798      	blx	r3
 801af36:	4284      	cmp	r4, r0
 801af38:	bfb8      	it	lt
 801af3a:	4604      	movlt	r4, r0
 801af3c:	b90d      	cbnz	r5, 801af42 <LCD_GetVXSizeMax+0x22>
 801af3e:	4620      	mov	r0, r4
 801af40:	bd38      	pop	{r3, r4, r5, pc}
 801af42:	2500      	movs	r5, #0
 801af44:	4628      	mov	r0, r5
 801af46:	f7f9 fb35 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801af4a:	2103      	movs	r1, #3
 801af4c:	2800      	cmp	r0, #0
 801af4e:	d1ef      	bne.n	801af30 <LCD_GetVXSizeMax+0x10>
 801af50:	e7f1      	b.n	801af36 <LCD_GetVXSizeMax+0x16>
 801af52:	bf00      	nop

0801af54 <LCD_SetDisplaySize>:
 801af54:	4b01      	ldr	r3, [pc, #4]	; (801af5c <LCD_SetDisplaySize+0x8>)
 801af56:	e883 0003 	stmia.w	r3, {r0, r1}
 801af5a:	4770      	bx	lr
 801af5c:	200003d4 	.word	0x200003d4

0801af60 <LCD_GetXSizeDisplay>:
 801af60:	4b01      	ldr	r3, [pc, #4]	; (801af68 <LCD_GetXSizeDisplay+0x8>)
 801af62:	6818      	ldr	r0, [r3, #0]
 801af64:	4770      	bx	lr
 801af66:	bf00      	nop
 801af68:	200003d4 	.word	0x200003d4

0801af6c <LCD_GetYSizeDisplay>:
 801af6c:	4b01      	ldr	r3, [pc, #4]	; (801af74 <LCD_GetYSizeDisplay+0x8>)
 801af6e:	6858      	ldr	r0, [r3, #4]
 801af70:	4770      	bx	lr
 801af72:	bf00      	nop
 801af74:	200003d4 	.word	0x200003d4

0801af78 <LCD__GetBPPDevice>:
 801af78:	b1b8      	cbz	r0, 801afaa <LCD__GetBPPDevice+0x32>
 801af7a:	f030 0301 	bics.w	r3, r0, #1
 801af7e:	d015      	beq.n	801afac <LCD__GetBPPDevice+0x34>
 801af80:	f030 0303 	bics.w	r3, r0, #3
 801af84:	d101      	bne.n	801af8a <LCD__GetBPPDevice+0x12>
 801af86:	2008      	movs	r0, #8
 801af88:	4770      	bx	lr
 801af8a:	f030 0307 	bics.w	r3, r0, #7
 801af8e:	d0fa      	beq.n	801af86 <LCD__GetBPPDevice+0xe>
 801af90:	f030 030f 	bics.w	r3, r0, #15
 801af94:	d0f7      	beq.n	801af86 <LCD__GetBPPDevice+0xe>
 801af96:	f030 031f 	bics.w	r3, r0, #31
 801af9a:	d0f4      	beq.n	801af86 <LCD__GetBPPDevice+0xe>
 801af9c:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 801afa0:	d0f1      	beq.n	801af86 <LCD__GetBPPDevice+0xe>
 801afa2:	4b0b      	ldr	r3, [pc, #44]	; (801afd0 <LCD__GetBPPDevice+0x58>)
 801afa4:	4003      	ands	r3, r0
 801afa6:	b91b      	cbnz	r3, 801afb0 <LCD__GetBPPDevice+0x38>
 801afa8:	2010      	movs	r0, #16
 801afaa:	4770      	bx	lr
 801afac:	2001      	movs	r0, #1
 801afae:	4770      	bx	lr
 801afb0:	4b08      	ldr	r3, [pc, #32]	; (801afd4 <LCD__GetBPPDevice+0x5c>)
 801afb2:	4003      	ands	r3, r0
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d0f7      	beq.n	801afa8 <LCD__GetBPPDevice+0x30>
 801afb8:	4b07      	ldr	r3, [pc, #28]	; (801afd8 <LCD__GetBPPDevice+0x60>)
 801afba:	4003      	ands	r3, r0
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d0f3      	beq.n	801afa8 <LCD__GetBPPDevice+0x30>
 801afc0:	4b06      	ldr	r3, [pc, #24]	; (801afdc <LCD__GetBPPDevice+0x64>)
 801afc2:	4003      	ands	r3, r0
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	bf0c      	ite	eq
 801afc8:	2010      	moveq	r0, #16
 801afca:	2020      	movne	r0, #32
 801afcc:	4770      	bx	lr
 801afce:	bf00      	nop
 801afd0:	fffffe00 	.word	0xfffffe00
 801afd4:	fffff000 	.word	0xfffff000
 801afd8:	ffff8000 	.word	0xffff8000
 801afdc:	ffff0000 	.word	0xffff0000

0801afe0 <LCD_GetNumLayers>:
 801afe0:	b510      	push	{r4, lr}
 801afe2:	2000      	movs	r0, #0
 801afe4:	f7f9 fae6 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801afe8:	1c04      	adds	r4, r0, #0
 801afea:	f04f 0001 	mov.w	r0, #1
 801afee:	bf18      	it	ne
 801aff0:	2401      	movne	r4, #1
 801aff2:	f7f9 fadf 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801aff6:	b100      	cbz	r0, 801affa <LCD_GetNumLayers+0x1a>
 801aff8:	3401      	adds	r4, #1
 801affa:	4620      	mov	r0, r4
 801affc:	bd10      	pop	{r4, pc}
 801affe:	bf00      	nop

0801b000 <LCD_GetPixelIndex>:
 801b000:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b002:	4e15      	ldr	r6, [pc, #84]	; (801b058 <LCD_GetPixelIndex+0x58>)
 801b004:	4604      	mov	r4, r0
 801b006:	4d15      	ldr	r5, [pc, #84]	; (801b05c <LCD_GetPixelIndex+0x5c>)
 801b008:	b083      	sub	sp, #12
 801b00a:	6833      	ldr	r3, [r6, #0]
 801b00c:	460f      	mov	r7, r1
 801b00e:	4669      	mov	r1, sp
 801b010:	7c5b      	ldrb	r3, [r3, #17]
 801b012:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b016:	68c3      	ldr	r3, [r0, #12]
 801b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b01a:	4798      	blx	r3
 801b01c:	f9bd 3000 	ldrsh.w	r3, [sp]
 801b020:	42a3      	cmp	r3, r4
 801b022:	dc0b      	bgt.n	801b03c <LCD_GetPixelIndex+0x3c>
 801b024:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b028:	429c      	cmp	r4, r3
 801b02a:	dc07      	bgt.n	801b03c <LCD_GetPixelIndex+0x3c>
 801b02c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801b030:	42bb      	cmp	r3, r7
 801b032:	dc03      	bgt.n	801b03c <LCD_GetPixelIndex+0x3c>
 801b034:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801b038:	429f      	cmp	r7, r3
 801b03a:	dd02      	ble.n	801b042 <LCD_GetPixelIndex+0x42>
 801b03c:	2000      	movs	r0, #0
 801b03e:	b003      	add	sp, #12
 801b040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b042:	6833      	ldr	r3, [r6, #0]
 801b044:	463a      	mov	r2, r7
 801b046:	4621      	mov	r1, r4
 801b048:	7c5b      	ldrb	r3, [r3, #17]
 801b04a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b04e:	68c3      	ldr	r3, [r0, #12]
 801b050:	695b      	ldr	r3, [r3, #20]
 801b052:	4798      	blx	r3
 801b054:	e7f3      	b.n	801b03e <LCD_GetPixelIndex+0x3e>
 801b056:	bf00      	nop
 801b058:	20000018 	.word	0x20000018
 801b05c:	200467d0 	.word	0x200467d0

0801b060 <GUI_GetPixelIndex>:
 801b060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b062:	4e18      	ldr	r6, [pc, #96]	; (801b0c4 <GUI_GetPixelIndex+0x64>)
 801b064:	b083      	sub	sp, #12
 801b066:	4604      	mov	r4, r0
 801b068:	460f      	mov	r7, r1
 801b06a:	f7fd fa9b 	bl	80185a4 <GUI_Lock>
 801b06e:	6833      	ldr	r3, [r6, #0]
 801b070:	4d15      	ldr	r5, [pc, #84]	; (801b0c8 <GUI_GetPixelIndex+0x68>)
 801b072:	4669      	mov	r1, sp
 801b074:	7c5b      	ldrb	r3, [r3, #17]
 801b076:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b07a:	68c3      	ldr	r3, [r0, #12]
 801b07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b07e:	4798      	blx	r3
 801b080:	f9bd 3000 	ldrsh.w	r3, [sp]
 801b084:	429c      	cmp	r4, r3
 801b086:	db0b      	blt.n	801b0a0 <GUI_GetPixelIndex+0x40>
 801b088:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b08c:	429c      	cmp	r4, r3
 801b08e:	dc07      	bgt.n	801b0a0 <GUI_GetPixelIndex+0x40>
 801b090:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801b094:	429f      	cmp	r7, r3
 801b096:	db03      	blt.n	801b0a0 <GUI_GetPixelIndex+0x40>
 801b098:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801b09c:	429f      	cmp	r7, r3
 801b09e:	dd05      	ble.n	801b0ac <GUI_GetPixelIndex+0x4c>
 801b0a0:	2400      	movs	r4, #0
 801b0a2:	f7fd fa75 	bl	8018590 <GUI_Unlock>
 801b0a6:	4620      	mov	r0, r4
 801b0a8:	b003      	add	sp, #12
 801b0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0ac:	6833      	ldr	r3, [r6, #0]
 801b0ae:	4621      	mov	r1, r4
 801b0b0:	463a      	mov	r2, r7
 801b0b2:	7c5b      	ldrb	r3, [r3, #17]
 801b0b4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b0b8:	68c3      	ldr	r3, [r0, #12]
 801b0ba:	695b      	ldr	r3, [r3, #20]
 801b0bc:	4798      	blx	r3
 801b0be:	4604      	mov	r4, r0
 801b0c0:	e7ef      	b.n	801b0a2 <GUI_GetPixelIndex+0x42>
 801b0c2:	bf00      	nop
 801b0c4:	20000018 	.word	0x20000018
 801b0c8:	200467d0 	.word	0x200467d0

0801b0cc <LCD_GetPixelColor>:
 801b0cc:	b508      	push	{r3, lr}
 801b0ce:	f7ff ff97 	bl	801b000 <LCD_GetPixelIndex>
 801b0d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b0d6:	f7ff bb6b 	b.w	801a7b0 <LCD_Index2Color>
 801b0da:	bf00      	nop

0801b0dc <LCD_ReadRectEx>:
 801b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e0:	b085      	sub	sp, #20
 801b0e2:	4617      	mov	r7, r2
 801b0e4:	469a      	mov	sl, r3
 801b0e6:	4681      	mov	r9, r0
 801b0e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b0ea:	460e      	mov	r6, r1
 801b0ec:	68e2      	ldr	r2, [r4, #12]
 801b0ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b0f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801b0f2:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801b0f6:	b17b      	cbz	r3, 801b118 <LCD_ReadRectEx+0x3c>
 801b0f8:	2101      	movs	r1, #1
 801b0fa:	a80f      	add	r0, sp, #60	; 0x3c
 801b0fc:	4798      	blx	r3
 801b0fe:	4605      	mov	r5, r0
 801b100:	b150      	cbz	r0, 801b118 <LCD_ReadRectEx+0x3c>
 801b102:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b104:	463b      	mov	r3, r7
 801b106:	9401      	str	r4, [sp, #4]
 801b108:	4632      	mov	r2, r6
 801b10a:	f8cd a000 	str.w	sl, [sp]
 801b10e:	4649      	mov	r1, r9
 801b110:	47a8      	blx	r5
 801b112:	b005      	add	sp, #20
 801b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b118:	4b77      	ldr	r3, [pc, #476]	; (801b2f8 <LCD_ReadRectEx+0x21c>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	7c58      	ldrb	r0, [r3, #17]
 801b11e:	f7ff fea1 	bl	801ae64 <GUI_GetBitsPerPixelEx>
 801b122:	2808      	cmp	r0, #8
 801b124:	dc30      	bgt.n	801b188 <LCD_ReadRectEx+0xac>
 801b126:	2301      	movs	r3, #1
 801b128:	4556      	cmp	r6, sl
 801b12a:	dcf2      	bgt.n	801b112 <LCD_ReadRectEx+0x36>
 801b12c:	2b02      	cmp	r3, #2
 801b12e:	d00a      	beq.n	801b146 <LCD_ReadRectEx+0x6a>
 801b130:	2b04      	cmp	r3, #4
 801b132:	d01b      	beq.n	801b16c <LCD_ReadRectEx+0x90>
 801b134:	2b01      	cmp	r3, #1
 801b136:	d02c      	beq.n	801b192 <LCD_ReadRectEx+0xb6>
 801b138:	3601      	adds	r6, #1
 801b13a:	45b2      	cmp	sl, r6
 801b13c:	daf6      	bge.n	801b12c <LCD_ReadRectEx+0x50>
 801b13e:	e7e8      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b140:	3601      	adds	r6, #1
 801b142:	4556      	cmp	r6, sl
 801b144:	dce5      	bgt.n	801b112 <LCD_ReadRectEx+0x36>
 801b146:	45b9      	cmp	r9, r7
 801b148:	dcfa      	bgt.n	801b140 <LCD_ReadRectEx+0x64>
 801b14a:	464d      	mov	r5, r9
 801b14c:	4629      	mov	r1, r5
 801b14e:	3501      	adds	r5, #1
 801b150:	4632      	mov	r2, r6
 801b152:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b154:	47c0      	blx	r8
 801b156:	42af      	cmp	r7, r5
 801b158:	f824 0b02 	strh.w	r0, [r4], #2
 801b15c:	daf6      	bge.n	801b14c <LCD_ReadRectEx+0x70>
 801b15e:	3601      	adds	r6, #1
 801b160:	45b2      	cmp	sl, r6
 801b162:	daf0      	bge.n	801b146 <LCD_ReadRectEx+0x6a>
 801b164:	e7d5      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b166:	3601      	adds	r6, #1
 801b168:	45b2      	cmp	sl, r6
 801b16a:	dbd2      	blt.n	801b112 <LCD_ReadRectEx+0x36>
 801b16c:	45b9      	cmp	r9, r7
 801b16e:	f300 80ba 	bgt.w	801b2e6 <LCD_ReadRectEx+0x20a>
 801b172:	464d      	mov	r5, r9
 801b174:	4629      	mov	r1, r5
 801b176:	3501      	adds	r5, #1
 801b178:	4632      	mov	r2, r6
 801b17a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b17c:	47c0      	blx	r8
 801b17e:	42af      	cmp	r7, r5
 801b180:	f844 0b04 	str.w	r0, [r4], #4
 801b184:	daf6      	bge.n	801b174 <LCD_ReadRectEx+0x98>
 801b186:	e7ee      	b.n	801b166 <LCD_ReadRectEx+0x8a>
 801b188:	2811      	cmp	r0, #17
 801b18a:	bfb4      	ite	lt
 801b18c:	2302      	movlt	r3, #2
 801b18e:	2304      	movge	r3, #4
 801b190:	e7ca      	b.n	801b128 <LCD_ReadRectEx+0x4c>
 801b192:	1e43      	subs	r3, r0, #1
 801b194:	2500      	movs	r5, #0
 801b196:	f8cd a008 	str.w	sl, [sp, #8]
 801b19a:	9303      	str	r3, [sp, #12]
 801b19c:	9b03      	ldr	r3, [sp, #12]
 801b19e:	2b07      	cmp	r3, #7
 801b1a0:	f200 809b 	bhi.w	801b2da <LCD_ReadRectEx+0x1fe>
 801b1a4:	e8df f003 	tbb	[pc, r3]
 801b1a8:	18186d44 	.word	0x18186d44
 801b1ac:	04040404 	.word	0x04040404
 801b1b0:	45b9      	cmp	r9, r7
 801b1b2:	dc38      	bgt.n	801b226 <LCD_ReadRectEx+0x14a>
 801b1b4:	4643      	mov	r3, r8
 801b1b6:	46cb      	mov	fp, r9
 801b1b8:	46a8      	mov	r8, r5
 801b1ba:	461d      	mov	r5, r3
 801b1bc:	4659      	mov	r1, fp
 801b1be:	f10b 0b01 	add.w	fp, fp, #1
 801b1c2:	4632      	mov	r2, r6
 801b1c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b1c6:	47a8      	blx	r5
 801b1c8:	455f      	cmp	r7, fp
 801b1ca:	f804 0b01 	strb.w	r0, [r4], #1
 801b1ce:	daf5      	bge.n	801b1bc <LCD_ReadRectEx+0xe0>
 801b1d0:	462b      	mov	r3, r5
 801b1d2:	4645      	mov	r5, r8
 801b1d4:	4698      	mov	r8, r3
 801b1d6:	e026      	b.n	801b226 <LCD_ReadRectEx+0x14a>
 801b1d8:	45b9      	cmp	r9, r7
 801b1da:	dc24      	bgt.n	801b226 <LCD_ReadRectEx+0x14a>
 801b1dc:	940e      	str	r4, [sp, #56]	; 0x38
 801b1de:	46ca      	mov	sl, r9
 801b1e0:	4644      	mov	r4, r8
 801b1e2:	f04f 0b0f 	mov.w	fp, #15
 801b1e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b1ea:	4651      	mov	r1, sl
 801b1ec:	4632      	mov	r2, r6
 801b1ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b1f0:	f10a 0a01 	add.w	sl, sl, #1
 801b1f4:	47a0      	blx	r4
 801b1f6:	f898 1000 	ldrb.w	r1, [r8]
 801b1fa:	00ab      	lsls	r3, r5, #2
 801b1fc:	4557      	cmp	r7, sl
 801b1fe:	f1c3 0204 	rsb	r2, r3, #4
 801b202:	fa0b f303 	lsl.w	r3, fp, r3
 801b206:	fa00 f002 	lsl.w	r0, r0, r2
 801b20a:	ea03 0301 	and.w	r3, r3, r1
 801b20e:	ea43 0300 	orr.w	r3, r3, r0
 801b212:	f888 3000 	strb.w	r3, [r8]
 801b216:	44a8      	add	r8, r5
 801b218:	f085 0501 	eor.w	r5, r5, #1
 801b21c:	dae5      	bge.n	801b1ea <LCD_ReadRectEx+0x10e>
 801b21e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b222:	46a0      	mov	r8, r4
 801b224:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b226:	3601      	adds	r6, #1
 801b228:	9b02      	ldr	r3, [sp, #8]
 801b22a:	42b3      	cmp	r3, r6
 801b22c:	dab6      	bge.n	801b19c <LCD_ReadRectEx+0xc0>
 801b22e:	e770      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b230:	46a3      	mov	fp, r4
 801b232:	4644      	mov	r4, r8
 801b234:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b238:	45b9      	cmp	r9, r7
 801b23a:	dc59      	bgt.n	801b2f0 <LCD_ReadRectEx+0x214>
 801b23c:	46ca      	mov	sl, r9
 801b23e:	4651      	mov	r1, sl
 801b240:	4632      	mov	r2, r6
 801b242:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b244:	f10a 0a01 	add.w	sl, sl, #1
 801b248:	47a0      	blx	r4
 801b24a:	f64f 727f 	movw	r2, #65407	; 0xff7f
 801b24e:	f89b e000 	ldrb.w	lr, [fp]
 801b252:	f1c5 0307 	rsb	r3, r5, #7
 801b256:	fa42 f105 	asr.w	r1, r2, r5
 801b25a:	1c6a      	adds	r2, r5, #1
 801b25c:	4098      	lsls	r0, r3
 801b25e:	4557      	cmp	r7, sl
 801b260:	ea0e 0101 	and.w	r1, lr, r1
 801b264:	f022 0507 	bic.w	r5, r2, #7
 801b268:	ea40 0001 	orr.w	r0, r0, r1
 801b26c:	fa42 f505 	asr.w	r5, r2, r5
 801b270:	f88b 0000 	strb.w	r0, [fp]
 801b274:	eb0b 0be2 	add.w	fp, fp, r2, asr #3
 801b278:	dae1      	bge.n	801b23e <LCD_ReadRectEx+0x162>
 801b27a:	3601      	adds	r6, #1
 801b27c:	45b0      	cmp	r8, r6
 801b27e:	dadb      	bge.n	801b238 <LCD_ReadRectEx+0x15c>
 801b280:	e747      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b282:	940e      	str	r4, [sp, #56]	; 0x38
 801b284:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 801b288:	4644      	mov	r4, r8
 801b28a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801b28e:	45b9      	cmp	r9, r7
 801b290:	dcc5      	bgt.n	801b21e <LCD_ReadRectEx+0x142>
 801b292:	46ca      	mov	sl, r9
 801b294:	4651      	mov	r1, sl
 801b296:	4632      	mov	r2, r6
 801b298:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b29a:	f10a 0a01 	add.w	sl, sl, #1
 801b29e:	47a0      	blx	r4
 801b2a0:	1c6a      	adds	r2, r5, #1
 801b2a2:	006d      	lsls	r5, r5, #1
 801b2a4:	f898 1000 	ldrb.w	r1, [r8]
 801b2a8:	4557      	cmp	r7, sl
 801b2aa:	f1c5 0306 	rsb	r3, r5, #6
 801b2ae:	fa4b f505 	asr.w	r5, fp, r5
 801b2b2:	fa00 f003 	lsl.w	r0, r0, r3
 801b2b6:	ea05 0501 	and.w	r5, r5, r1
 801b2ba:	f022 0303 	bic.w	r3, r2, #3
 801b2be:	ea40 0005 	orr.w	r0, r0, r5
 801b2c2:	fa42 f503 	asr.w	r5, r2, r3
 801b2c6:	f888 0000 	strb.w	r0, [r8]
 801b2ca:	eb08 08a2 	add.w	r8, r8, r2, asr #2
 801b2ce:	dae1      	bge.n	801b294 <LCD_ReadRectEx+0x1b8>
 801b2d0:	3601      	adds	r6, #1
 801b2d2:	9b02      	ldr	r3, [sp, #8]
 801b2d4:	42b3      	cmp	r3, r6
 801b2d6:	dada      	bge.n	801b28e <LCD_ReadRectEx+0x1b2>
 801b2d8:	e71b      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b2da:	3601      	adds	r6, #1
 801b2dc:	9b02      	ldr	r3, [sp, #8]
 801b2de:	429e      	cmp	r6, r3
 801b2e0:	f77f af5c 	ble.w	801b19c <LCD_ReadRectEx+0xc0>
 801b2e4:	e715      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b2e6:	3601      	adds	r6, #1
 801b2e8:	4556      	cmp	r6, sl
 801b2ea:	f77f af3f 	ble.w	801b16c <LCD_ReadRectEx+0x90>
 801b2ee:	e710      	b.n	801b112 <LCD_ReadRectEx+0x36>
 801b2f0:	46a0      	mov	r8, r4
 801b2f2:	465c      	mov	r4, fp
 801b2f4:	e797      	b.n	801b226 <LCD_ReadRectEx+0x14a>
 801b2f6:	bf00      	nop
 801b2f8:	20000018 	.word	0x20000018

0801b2fc <GUI_ReadRectEx>:
 801b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2fe:	4c16      	ldr	r4, [pc, #88]	; (801b358 <GUI_ReadRectEx+0x5c>)
 801b300:	9f05      	ldr	r7, [sp, #20]
 801b302:	6825      	ldr	r5, [r4, #0]
 801b304:	9c06      	ldr	r4, [sp, #24]
 801b306:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801b30a:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 801b30e:	4570      	cmp	r0, lr
 801b310:	bfb8      	it	lt
 801b312:	4670      	movlt	r0, lr
 801b314:	42b2      	cmp	r2, r6
 801b316:	bfa8      	it	ge
 801b318:	4632      	movge	r2, r6
 801b31a:	4290      	cmp	r0, r2
 801b31c:	dc1a      	bgt.n	801b354 <GUI_ReadRectEx+0x58>
 801b31e:	f9b5 600a 	ldrsh.w	r6, [r5, #10]
 801b322:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 801b326:	42b1      	cmp	r1, r6
 801b328:	bfb8      	it	lt
 801b32a:	4631      	movlt	r1, r6
 801b32c:	42ab      	cmp	r3, r5
 801b32e:	bfa8      	it	ge
 801b330:	462b      	movge	r3, r5
 801b332:	428b      	cmp	r3, r1
 801b334:	da03      	bge.n	801b33e <GUI_ReadRectEx+0x42>
 801b336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b338:	6825      	ldr	r5, [r4, #0]
 801b33a:	b12d      	cbz	r5, 801b348 <GUI_ReadRectEx+0x4c>
 801b33c:	462c      	mov	r4, r5
 801b33e:	68e5      	ldr	r5, [r4, #12]
 801b340:	682d      	ldr	r5, [r5, #0]
 801b342:	f035 0504 	bics.w	r5, r5, #4
 801b346:	d1f7      	bne.n	801b338 <GUI_ReadRectEx+0x3c>
 801b348:	9406      	str	r4, [sp, #24]
 801b34a:	9705      	str	r7, [sp, #20]
 801b34c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b350:	f7ff bec4 	b.w	801b0dc <LCD_ReadRectEx>
 801b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b356:	bf00      	nop
 801b358:	20000018 	.word	0x20000018

0801b35c <_Rect2TextRect>:
 801b35c:	b410      	push	{r4}
 801b35e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b362:	8844      	ldrh	r4, [r0, #2]
 801b364:	8801      	ldrh	r1, [r0, #0]
 801b366:	88c2      	ldrh	r2, [r0, #6]
 801b368:	4423      	add	r3, r4
 801b36a:	440a      	add	r2, r1
 801b36c:	1a5b      	subs	r3, r3, r1
 801b36e:	1b12      	subs	r2, r2, r4
 801b370:	80c3      	strh	r3, [r0, #6]
 801b372:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b376:	8082      	strh	r2, [r0, #4]
 801b378:	4770      	bx	lr
 801b37a:	bf00      	nop

0801b37c <_TransformRect>:
 801b37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b380:	b083      	sub	sp, #12
 801b382:	4604      	mov	r4, r0
 801b384:	2300      	movs	r3, #0
 801b386:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801b434 <_TransformRect+0xb8>
 801b38a:	4668      	mov	r0, sp
 801b38c:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b390:	9301      	str	r3, [sp, #4]
 801b392:	9300      	str	r3, [sp, #0]
 801b394:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 801b398:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801b39c:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 801b3a0:	f006 f870 	bl	8021484 <WM_GetWindowRect>
 801b3a4:	f7ff fd1c 	bl	801ade0 <LCD_GetXSize>
 801b3a8:	f7ff fd30 	bl	801ae0c <LCD_GetYSize>
 801b3ac:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801b3b0:	3801      	subs	r0, #1
 801b3b2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801b3b6:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b3ba:	4288      	cmp	r0, r1
 801b3bc:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 801b3c0:	bfb8      	it	lt
 801b3c2:	b201      	sxthlt	r1, r0
 801b3c4:	f9bd 0000 	ldrsh.w	r0, [sp]
 801b3c8:	1bcf      	subs	r7, r1, r7
 801b3ca:	4406      	add	r6, r0
 801b3cc:	1a89      	subs	r1, r1, r2
 801b3ce:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b3d2:	441f      	add	r7, r3
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	4416      	add	r6, r2
 801b3d8:	4668      	mov	r0, sp
 801b3da:	1a79      	subs	r1, r7, r1
 801b3dc:	9300      	str	r3, [sp, #0]
 801b3de:	ebce 0606 	rsb	r6, lr, r6
 801b3e2:	9301      	str	r3, [sp, #4]
 801b3e4:	1857      	adds	r7, r2, r1
 801b3e6:	f006 f84d 	bl	8021484 <WM_GetWindowRect>
 801b3ea:	f7ff fcf9 	bl	801ade0 <LCD_GetXSize>
 801b3ee:	f7ff fd0d 	bl	801ae0c <LCD_GetYSize>
 801b3f2:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801b3f6:	3801      	subs	r0, #1
 801b3f8:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
 801b3fc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801b400:	4288      	cmp	r0, r1
 801b402:	80e7      	strh	r7, [r4, #6]
 801b404:	bfb8      	it	lt
 801b406:	b201      	sxthlt	r1, r0
 801b408:	f9bd 0000 	ldrsh.w	r0, [sp]
 801b40c:	ebc9 0901 	rsb	r9, r9, r1
 801b410:	1acb      	subs	r3, r1, r3
 801b412:	4405      	add	r5, r0
 801b414:	f9b8 1000 	ldrsh.w	r1, [r8]
 801b418:	444a      	add	r2, r9
 801b41a:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 801b41e:	440d      	add	r5, r1
 801b420:	8026      	strh	r6, [r4, #0]
 801b422:	1ad3      	subs	r3, r2, r3
 801b424:	1a2d      	subs	r5, r5, r0
 801b426:	440b      	add	r3, r1
 801b428:	80a5      	strh	r5, [r4, #4]
 801b42a:	8063      	strh	r3, [r4, #2]
 801b42c:	b003      	add	sp, #12
 801b42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b432:	bf00      	nop
 801b434:	200467e0 	.word	0x200467e0

0801b438 <_DrawBitmapCCW>:
 801b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b43c:	b08f      	sub	sp, #60	; 0x3c
 801b43e:	2600      	movs	r6, #0
 801b440:	4604      	mov	r4, r0
 801b442:	460d      	mov	r5, r1
 801b444:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 801b448:	9201      	str	r2, [sp, #4]
 801b44a:	9306      	str	r3, [sp, #24]
 801b44c:	4658      	mov	r0, fp
 801b44e:	f8cb 6004 	str.w	r6, [fp, #4]
 801b452:	960a      	str	r6, [sp, #40]	; 0x28
 801b454:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 801b458:	f006 f814 	bl	8021484 <WM_GetWindowRect>
 801b45c:	f7ff fcc0 	bl	801ade0 <LCD_GetXSize>
 801b460:	4eba      	ldr	r6, [pc, #744]	; (801b74c <_DrawBitmapCCW+0x314>)
 801b462:	f7ff fcd3 	bl	801ae0c <LCD_GetYSize>
 801b466:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b46a:	3801      	subs	r0, #1
 801b46c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b470:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801b474:	2100      	movs	r1, #0
 801b476:	4298      	cmp	r0, r3
 801b478:	f9b6 c000 	ldrsh.w	ip, [r6]
 801b47c:	f9b6 8002 	ldrsh.w	r8, [r6, #2]
 801b480:	bfb8      	it	lt
 801b482:	b203      	sxthlt	r3, r0
 801b484:	4658      	mov	r0, fp
 801b486:	f8cb 1004 	str.w	r1, [fp, #4]
 801b48a:	1b1f      	subs	r7, r3, r4
 801b48c:	ebce 0303 	rsb	r3, lr, r3
 801b490:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b494:	443a      	add	r2, r7
 801b496:	910a      	str	r1, [sp, #40]	; 0x28
 801b498:	44ae      	add	lr, r5
 801b49a:	1ad3      	subs	r3, r2, r3
 801b49c:	44e6      	add	lr, ip
 801b49e:	4463      	add	r3, ip
 801b4a0:	9308      	str	r3, [sp, #32]
 801b4a2:	ebc8 030e 	rsb	r3, r8, lr
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	f005 ffec 	bl	8021484 <WM_GetWindowRect>
 801b4ac:	f7ff fc98 	bl	801ade0 <LCD_GetXSize>
 801b4b0:	1e47      	subs	r7, r0, #1
 801b4b2:	f7ff fcab 	bl	801ae0c <LCD_GetYSize>
 801b4b6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801b4ba:	3801      	subs	r0, #1
 801b4bc:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801b4c0:	429f      	cmp	r7, r3
 801b4c2:	f9b6 e006 	ldrsh.w	lr, [r6, #6]
 801b4c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801b4ca:	bfb8      	it	lt
 801b4cc:	f8ad 702c 	strhlt.w	r7, [sp, #44]	; 0x2c
 801b4d0:	4290      	cmp	r0, r2
 801b4d2:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
 801b4d6:	bfb8      	it	lt
 801b4d8:	b202      	sxthlt	r2, r0
 801b4da:	f1ba 0f01 	cmp.w	sl, #1
 801b4de:	f9b6 0000 	ldrsh.w	r0, [r6]
 801b4e2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b4e6:	d157      	bne.n	801b598 <_DrawBitmapCCW+0x160>
 801b4e8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801b4ea:	2e01      	cmp	r6, #1
 801b4ec:	d154      	bne.n	801b598 <_DrawBitmapCCW+0x160>
 801b4ee:	9e06      	ldr	r6, [sp, #24]
 801b4f0:	4435      	add	r5, r6
 801b4f2:	4e97      	ldr	r6, [pc, #604]	; (801b750 <_DrawBitmapCCW+0x318>)
 801b4f4:	3d01      	subs	r5, #1
 801b4f6:	9605      	str	r6, [sp, #20]
 801b4f8:	6836      	ldr	r6, [r6, #0]
 801b4fa:	442b      	add	r3, r5
 801b4fc:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
 801b500:	4403      	add	r3, r0
 801b502:	1bdb      	subs	r3, r3, r7
 801b504:	429d      	cmp	r5, r3
 801b506:	da03      	bge.n	801b510 <_DrawBitmapCCW+0xd8>
 801b508:	1b5b      	subs	r3, r3, r5
 801b50a:	9d06      	ldr	r5, [sp, #24]
 801b50c:	1aeb      	subs	r3, r5, r3
 801b50e:	9306      	str	r3, [sp, #24]
 801b510:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801b514:	9f00      	ldr	r7, [sp, #0]
 801b516:	42bb      	cmp	r3, r7
 801b518:	dd09      	ble.n	801b52e <_DrawBitmapCCW+0xf6>
 801b51a:	1bdd      	subs	r5, r3, r7
 801b51c:	9300      	str	r3, [sp, #0]
 801b51e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801b520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b522:	fb03 7305 	mla	r3, r3, r5, r7
 801b526:	931c      	str	r3, [sp, #112]	; 0x70
 801b528:	9b06      	ldr	r3, [sp, #24]
 801b52a:	1b5b      	subs	r3, r3, r5
 801b52c:	9306      	str	r3, [sp, #24]
 801b52e:	9d01      	ldr	r5, [sp, #4]
 801b530:	1a51      	subs	r1, r2, r1
 801b532:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 801b536:	442c      	add	r4, r5
 801b538:	3c01      	subs	r4, #1
 801b53a:	1b14      	subs	r4, r2, r4
 801b53c:	44a6      	add	lr, r4
 801b53e:	ebc1 010e 	rsb	r1, r1, lr
 801b542:	4408      	add	r0, r1
 801b544:	4283      	cmp	r3, r0
 801b546:	dd02      	ble.n	801b54e <_DrawBitmapCCW+0x116>
 801b548:	1a18      	subs	r0, r3, r0
 801b54a:	1a2b      	subs	r3, r5, r0
 801b54c:	9301      	str	r3, [sp, #4]
 801b54e:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 801b552:	9908      	ldr	r1, [sp, #32]
 801b554:	428b      	cmp	r3, r1
 801b556:	f2c0 80ca 	blt.w	801b6ee <_DrawBitmapCCW+0x2b6>
 801b55a:	2300      	movs	r3, #0
 801b55c:	9303      	str	r3, [sp, #12]
 801b55e:	9b06      	ldr	r3, [sp, #24]
 801b560:	2b00      	cmp	r3, #0
 801b562:	f340 80b9 	ble.w	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b566:	9b01      	ldr	r3, [sp, #4]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	bfcc      	ite	gt
 801b56c:	2300      	movgt	r3, #0
 801b56e:	2301      	movle	r3, #1
 801b570:	2b00      	cmp	r3, #0
 801b572:	f040 80b1 	bne.w	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b576:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b578:	461a      	mov	r2, r3
 801b57a:	1e4b      	subs	r3, r1, #1
 801b57c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b57e:	2b07      	cmp	r3, #7
 801b580:	f200 80ad 	bhi.w	801b6de <_DrawBitmapCCW+0x2a6>
 801b584:	e8df f013 	tbh	[pc, r3, lsl #1]
 801b588:	01ab007c 	.word	0x01ab007c
 801b58c:	016900ab 	.word	0x016900ab
 801b590:	00ab00ab 	.word	0x00ab00ab
 801b594:	00f800ab 	.word	0x00f800ab
 801b598:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b59a:	f1c3 0b08 	rsb	fp, r3, #8
 801b59e:	9b06      	ldr	r3, [sp, #24]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	f340 8099 	ble.w	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b5a6:	4b6a      	ldr	r3, [pc, #424]	; (801b750 <_DrawBitmapCCW+0x318>)
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	f8dd 9000 	ldr.w	r9, [sp]
 801b5ae:	f8d3 e000 	ldr.w	lr, [r3]
 801b5b2:	4614      	mov	r4, r2
 801b5b4:	9305      	str	r3, [sp, #20]
 801b5b6:	9204      	str	r2, [sp, #16]
 801b5b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b5bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b5be:	444b      	add	r3, r9
 801b5c0:	461a      	mov	r2, r3
 801b5c2:	9307      	str	r3, [sp, #28]
 801b5c4:	f9be 3008 	ldrsh.w	r3, [lr, #8]
 801b5c8:	f102 3bff 	add.w	fp, r2, #4294967295
 801b5cc:	455b      	cmp	r3, fp
 801b5ce:	f300 80ac 	bgt.w	801b72a <_DrawBitmapCCW+0x2f2>
 801b5d2:	f9be 300c 	ldrsh.w	r3, [lr, #12]
 801b5d6:	454b      	cmp	r3, r9
 801b5d8:	f2c0 80a7 	blt.w	801b72a <_DrawBitmapCCW+0x2f2>
 801b5dc:	9b01      	ldr	r3, [sp, #4]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	f340 80a3 	ble.w	801b72a <_DrawBitmapCCW+0x2f2>
 801b5e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	f000 80e5 	beq.w	801b7b6 <_DrawBitmapCCW+0x37e>
 801b5ec:	9b08      	ldr	r3, [sp, #32]
 801b5ee:	f04f 0800 	mov.w	r8, #0
 801b5f2:	f8cd 9008 	str.w	r9, [sp, #8]
 801b5f6:	ebca 0603 	rsb	r6, sl, r3
 801b5fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b5fc:	f8cd b00c 	str.w	fp, [sp, #12]
 801b600:	4699      	mov	r9, r3
 801b602:	f8cd 8000 	str.w	r8, [sp]
 801b606:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801b60a:	e02d      	b.n	801b668 <_DrawBitmapCCW+0x230>
 801b60c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b60e:	ebc2 0808 	rsb	r8, r2, r8
 801b612:	4617      	mov	r7, r2
 801b614:	fa44 f50b 	asr.w	r5, r4, fp
 801b618:	40bc      	lsls	r4, r7
 801b61a:	9f00      	ldr	r7, [sp, #0]
 801b61c:	1c71      	adds	r1, r6, #1
 801b61e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 801b622:	9a03      	ldr	r2, [sp, #12]
 801b624:	f107 0701 	add.w	r7, r7, #1
 801b628:	9802      	ldr	r0, [sp, #8]
 801b62a:	ebca 0606 	rsb	r6, sl, r6
 801b62e:	b2e4      	uxtb	r4, r4
 801b630:	9700      	str	r7, [sp, #0]
 801b632:	d104      	bne.n	801b63e <_DrawBitmapCCW+0x206>
 801b634:	f89e c010 	ldrb.w	ip, [lr, #16]
 801b638:	f01c 0f02 	tst.w	ip, #2
 801b63c:	d110      	bne.n	801b660 <_DrawBitmapCCW+0x228>
 801b63e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801b640:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
 801b644:	f857 c025 	ldr.w	ip, [r7, r5, lsl #2]
 801b648:	f8de 5000 	ldr.w	r5, [lr]
 801b64c:	f8ce c000 	str.w	ip, [lr]
 801b650:	f7fe fd46 	bl	801a0e0 <LCD_FillRect>
 801b654:	9b05      	ldr	r3, [sp, #20]
 801b656:	f8d3 e000 	ldr.w	lr, [r3]
 801b65a:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 801b65e:	601d      	str	r5, [r3, #0]
 801b660:	e89d 000c 	ldmia.w	sp, {r2, r3}
 801b664:	4293      	cmp	r3, r2
 801b666:	d060      	beq.n	801b72a <_DrawBitmapCCW+0x2f2>
 801b668:	eb0a 0306 	add.w	r3, sl, r6
 801b66c:	f1b8 0f00 	cmp.w	r8, #0
 801b670:	d1cc      	bne.n	801b60c <_DrawBitmapCCW+0x1d4>
 801b672:	f899 4000 	ldrb.w	r4, [r9]
 801b676:	46d8      	mov	r8, fp
 801b678:	f109 0901 	add.w	r9, r9, #1
 801b67c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801b67e:	e7c9      	b.n	801b614 <_DrawBitmapCCW+0x1dc>
 801b680:	9202      	str	r2, [sp, #8]
 801b682:	9b08      	ldr	r3, [sp, #32]
 801b684:	9a03      	ldr	r2, [sp, #12]
 801b686:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 801b754 <_DrawBitmapCCW+0x31c>
 801b68a:	1a9b      	subs	r3, r3, r2
 801b68c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b68e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801b692:	6852      	ldr	r2, [r2, #4]
 801b694:	911c      	str	r1, [sp, #112]	; 0x70
 801b696:	9204      	str	r2, [sp, #16]
 801b698:	9a01      	ldr	r2, [sp, #4]
 801b69a:	9307      	str	r3, [sp, #28]
 801b69c:	ebc2 0b03 	rsb	fp, r2, r3
 801b6a0:	9a00      	ldr	r2, [sp, #0]
 801b6a2:	f8d9 3000 	ldr.w	r3, [r9]
 801b6a6:	4610      	mov	r0, r2
 801b6a8:	9902      	ldr	r1, [sp, #8]
 801b6aa:	7c1a      	ldrb	r2, [r3, #16]
 801b6ac:	eb00 0801 	add.w	r8, r0, r1
 801b6b0:	f002 0203 	and.w	r2, r2, #3
 801b6b4:	2a01      	cmp	r2, #1
 801b6b6:	f000 81b8 	beq.w	801ba2a <_DrawBitmapCCW+0x5f2>
 801b6ba:	f0c0 8192 	bcc.w	801b9e2 <_DrawBitmapCCW+0x5aa>
 801b6be:	2a02      	cmp	r2, #2
 801b6c0:	f000 815a 	beq.w	801b978 <_DrawBitmapCCW+0x540>
 801b6c4:	460a      	mov	r2, r1
 801b6c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b6c8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b6ca:	3201      	adds	r2, #1
 801b6cc:	440b      	add	r3, r1
 801b6ce:	9202      	str	r2, [sp, #8]
 801b6d0:	931c      	str	r3, [sp, #112]	; 0x70
 801b6d2:	9b06      	ldr	r3, [sp, #24]
 801b6d4:	4293      	cmp	r3, r2
 801b6d6:	dce3      	bgt.n	801b6a0 <_DrawBitmapCCW+0x268>
 801b6d8:	b00f      	add	sp, #60	; 0x3c
 801b6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6de:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b6e0:	3201      	adds	r2, #1
 801b6e2:	4401      	add	r1, r0
 801b6e4:	9806      	ldr	r0, [sp, #24]
 801b6e6:	4290      	cmp	r0, r2
 801b6e8:	f73f af49 	bgt.w	801b57e <_DrawBitmapCCW+0x146>
 801b6ec:	e7f4      	b.n	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b6ee:	1acb      	subs	r3, r1, r3
 801b6f0:	9a01      	ldr	r2, [sp, #4]
 801b6f2:	9303      	str	r3, [sp, #12]
 801b6f4:	1ad3      	subs	r3, r2, r3
 801b6f6:	9301      	str	r3, [sp, #4]
 801b6f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b6fa:	2b02      	cmp	r3, #2
 801b6fc:	d02c      	beq.n	801b758 <_DrawBitmapCCW+0x320>
 801b6fe:	2b04      	cmp	r3, #4
 801b700:	f000 809b 	beq.w	801b83a <_DrawBitmapCCW+0x402>
 801b704:	2b01      	cmp	r3, #1
 801b706:	f47f af2a 	bne.w	801b55e <_DrawBitmapCCW+0x126>
 801b70a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b70c:	9a03      	ldr	r2, [sp, #12]
 801b70e:	4608      	mov	r0, r1
 801b710:	f022 0307 	bic.w	r3, r2, #7
 801b714:	4611      	mov	r1, r2
 801b716:	eb00 02e2 	add.w	r2, r0, r2, asr #3
 801b71a:	921c      	str	r2, [sp, #112]	; 0x70
 801b71c:	9a08      	ldr	r2, [sp, #32]
 801b71e:	1ad3      	subs	r3, r2, r3
 801b720:	9308      	str	r3, [sp, #32]
 801b722:	f001 0307 	and.w	r3, r1, #7
 801b726:	9303      	str	r3, [sp, #12]
 801b728:	e719      	b.n	801b55e <_DrawBitmapCCW+0x126>
 801b72a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b72c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b72e:	9b04      	ldr	r3, [sp, #16]
 801b730:	440a      	add	r2, r1
 801b732:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801b736:	3301      	adds	r3, #1
 801b738:	921c      	str	r2, [sp, #112]	; 0x70
 801b73a:	9a06      	ldr	r2, [sp, #24]
 801b73c:	9304      	str	r3, [sp, #16]
 801b73e:	429a      	cmp	r2, r3
 801b740:	f47f af3c 	bne.w	801b5bc <_DrawBitmapCCW+0x184>
 801b744:	b00f      	add	sp, #60	; 0x3c
 801b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b74a:	bf00      	nop
 801b74c:	200467e0 	.word	0x200467e0
 801b750:	20000018 	.word	0x20000018
 801b754:	200467d0 	.word	0x200467d0
 801b758:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b75a:	9a03      	ldr	r2, [sp, #12]
 801b75c:	4608      	mov	r0, r1
 801b75e:	f022 0303 	bic.w	r3, r2, #3
 801b762:	4611      	mov	r1, r2
 801b764:	eb00 02a2 	add.w	r2, r0, r2, asr #2
 801b768:	921c      	str	r2, [sp, #112]	; 0x70
 801b76a:	9a08      	ldr	r2, [sp, #32]
 801b76c:	1ad3      	subs	r3, r2, r3
 801b76e:	9308      	str	r3, [sp, #32]
 801b770:	f001 0303 	and.w	r3, r1, #3
 801b774:	9303      	str	r3, [sp, #12]
 801b776:	e6f2      	b.n	801b55e <_DrawBitmapCCW+0x126>
 801b778:	4690      	mov	r8, r2
 801b77a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 801b77e:	4689      	mov	r9, r1
 801b780:	9b00      	ldr	r3, [sp, #0]
 801b782:	2008      	movs	r0, #8
 801b784:	46ca      	mov	sl, r9
 801b786:	eb03 0708 	add.w	r7, r3, r8
 801b78a:	f7ff f9bb 	bl	801ab04 <LCD__GetPfSetPixel>
 801b78e:	9b01      	ldr	r3, [sp, #4]
 801b790:	4606      	mov	r6, r0
 801b792:	9c08      	ldr	r4, [sp, #32]
 801b794:	eb09 0503 	add.w	r5, r9, r3
 801b798:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801b79c:	4621      	mov	r1, r4
 801b79e:	4638      	mov	r0, r7
 801b7a0:	3c01      	subs	r4, #1
 801b7a2:	47b0      	blx	r6
 801b7a4:	45aa      	cmp	sl, r5
 801b7a6:	d1f7      	bne.n	801b798 <_DrawBitmapCCW+0x360>
 801b7a8:	f108 0801 	add.w	r8, r8, #1
 801b7ac:	9b06      	ldr	r3, [sp, #24]
 801b7ae:	44d9      	add	r9, fp
 801b7b0:	4543      	cmp	r3, r8
 801b7b2:	dce5      	bgt.n	801b780 <_DrawBitmapCCW+0x348>
 801b7b4:	e790      	b.n	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b7b6:	461e      	mov	r6, r3
 801b7b8:	9b08      	ldr	r3, [sp, #32]
 801b7ba:	f8cd b00c 	str.w	fp, [sp, #12]
 801b7be:	ebca 0503 	rsb	r5, sl, r3
 801b7c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b7c4:	46b0      	mov	r8, r6
 801b7c6:	f8cd 9000 	str.w	r9, [sp]
 801b7ca:	9302      	str	r3, [sp, #8]
 801b7cc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801b7d0:	e027      	b.n	801b822 <_DrawBitmapCCW+0x3ea>
 801b7d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b7d4:	1ab6      	subs	r6, r6, r2
 801b7d6:	4617      	mov	r7, r2
 801b7d8:	fa44 fc0b 	asr.w	ip, r4, fp
 801b7dc:	40bc      	lsls	r4, r7
 801b7de:	9a03      	ldr	r2, [sp, #12]
 801b7e0:	1c69      	adds	r1, r5, #1
 801b7e2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 801b7e6:	9800      	ldr	r0, [sp, #0]
 801b7e8:	b2e4      	uxtb	r4, r4
 801b7ea:	d104      	bne.n	801b7f6 <_DrawBitmapCCW+0x3be>
 801b7ec:	f89e 9010 	ldrb.w	r9, [lr, #16]
 801b7f0:	f019 0f02 	tst.w	r9, #2
 801b7f4:	d10e      	bne.n	801b814 <_DrawBitmapCCW+0x3dc>
 801b7f6:	f8de e03c 	ldr.w	lr, [lr, #60]	; 0x3c
 801b7fa:	f8de 9000 	ldr.w	r9, [lr]
 801b7fe:	f8ce c000 	str.w	ip, [lr]
 801b802:	f7fe fc6d 	bl	801a0e0 <LCD_FillRect>
 801b806:	9b05      	ldr	r3, [sp, #20]
 801b808:	f8d3 e000 	ldr.w	lr, [r3]
 801b80c:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 801b810:	f8c3 9000 	str.w	r9, [r3]
 801b814:	f108 0801 	add.w	r8, r8, #1
 801b818:	9b01      	ldr	r3, [sp, #4]
 801b81a:	ebca 0505 	rsb	r5, sl, r5
 801b81e:	4543      	cmp	r3, r8
 801b820:	d083      	beq.n	801b72a <_DrawBitmapCCW+0x2f2>
 801b822:	eb0a 0305 	add.w	r3, sl, r5
 801b826:	2e00      	cmp	r6, #0
 801b828:	d1d3      	bne.n	801b7d2 <_DrawBitmapCCW+0x39a>
 801b82a:	9902      	ldr	r1, [sp, #8]
 801b82c:	465e      	mov	r6, fp
 801b82e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801b830:	460a      	mov	r2, r1
 801b832:	780c      	ldrb	r4, [r1, #0]
 801b834:	3201      	adds	r2, #1
 801b836:	9202      	str	r2, [sp, #8]
 801b838:	e7ce      	b.n	801b7d8 <_DrawBitmapCCW+0x3a0>
 801b83a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b83c:	9a03      	ldr	r2, [sp, #12]
 801b83e:	4608      	mov	r0, r1
 801b840:	f022 0301 	bic.w	r3, r2, #1
 801b844:	4611      	mov	r1, r2
 801b846:	eb00 0262 	add.w	r2, r0, r2, asr #1
 801b84a:	921c      	str	r2, [sp, #112]	; 0x70
 801b84c:	9a08      	ldr	r2, [sp, #32]
 801b84e:	1ad3      	subs	r3, r2, r3
 801b850:	9308      	str	r3, [sp, #32]
 801b852:	f001 0301 	and.w	r3, r1, #1
 801b856:	9303      	str	r3, [sp, #12]
 801b858:	e681      	b.n	801b55e <_DrawBitmapCCW+0x126>
 801b85a:	9202      	str	r2, [sp, #8]
 801b85c:	f04f 09f0 	mov.w	r9, #240	; 0xf0
 801b860:	9a03      	ldr	r2, [sp, #12]
 801b862:	9b08      	ldr	r3, [sp, #32]
 801b864:	911c      	str	r1, [sp, #112]	; 0x70
 801b866:	1a9b      	subs	r3, r3, r2
 801b868:	9a01      	ldr	r2, [sp, #4]
 801b86a:	ebc2 0803 	rsb	r8, r2, r3
 801b86e:	9304      	str	r3, [sp, #16]
 801b870:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b872:	2004      	movs	r0, #4
 801b874:	9a02      	ldr	r2, [sp, #8]
 801b876:	781d      	ldrb	r5, [r3, #0]
 801b878:	9b00      	ldr	r3, [sp, #0]
 801b87a:	189f      	adds	r7, r3, r2
 801b87c:	f7ff f942 	bl	801ab04 <LCD__GetPfSetPixel>
 801b880:	9c03      	ldr	r4, [sp, #12]
 801b882:	4606      	mov	r6, r0
 801b884:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 801b888:	f8dd b010 	ldr.w	fp, [sp, #16]
 801b88c:	e001      	b.n	801b892 <_DrawBitmapCCW+0x45a>
 801b88e:	45c3      	cmp	fp, r8
 801b890:	d01a      	beq.n	801b8c8 <_DrawBitmapCCW+0x490>
 801b892:	f1c4 0201 	rsb	r2, r4, #1
 801b896:	3401      	adds	r4, #1
 801b898:	4659      	mov	r1, fp
 801b89a:	4638      	mov	r0, r7
 801b89c:	0092      	lsls	r2, r2, #2
 801b89e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b8a2:	f1c2 0304 	rsb	r3, r2, #4
 801b8a6:	fa49 f303 	asr.w	r3, r9, r3
 801b8aa:	402b      	ands	r3, r5
 801b8ac:	fa23 f202 	lsr.w	r2, r3, r2
 801b8b0:	b2d2      	uxtb	r2, r2
 801b8b2:	47b0      	blx	r6
 801b8b4:	2c02      	cmp	r4, #2
 801b8b6:	d1ea      	bne.n	801b88e <_DrawBitmapCCW+0x456>
 801b8b8:	45c3      	cmp	fp, r8
 801b8ba:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b8be:	f04f 0400 	mov.w	r4, #0
 801b8c2:	f10a 0a01 	add.w	sl, sl, #1
 801b8c6:	d1e4      	bne.n	801b892 <_DrawBitmapCCW+0x45a>
 801b8c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b8ca:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b8cc:	9b02      	ldr	r3, [sp, #8]
 801b8ce:	440a      	add	r2, r1
 801b8d0:	3301      	adds	r3, #1
 801b8d2:	921c      	str	r2, [sp, #112]	; 0x70
 801b8d4:	9a06      	ldr	r2, [sp, #24]
 801b8d6:	9302      	str	r3, [sp, #8]
 801b8d8:	429a      	cmp	r2, r3
 801b8da:	dcc9      	bgt.n	801b870 <_DrawBitmapCCW+0x438>
 801b8dc:	e6fc      	b.n	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b8de:	9202      	str	r2, [sp, #8]
 801b8e0:	f04f 09c0 	mov.w	r9, #192	; 0xc0
 801b8e4:	9a03      	ldr	r2, [sp, #12]
 801b8e6:	9b08      	ldr	r3, [sp, #32]
 801b8e8:	911c      	str	r1, [sp, #112]	; 0x70
 801b8ea:	1a9b      	subs	r3, r3, r2
 801b8ec:	9a01      	ldr	r2, [sp, #4]
 801b8ee:	ebc2 0803 	rsb	r8, r2, r3
 801b8f2:	9304      	str	r3, [sp, #16]
 801b8f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b8f6:	9a02      	ldr	r2, [sp, #8]
 801b8f8:	781d      	ldrb	r5, [r3, #0]
 801b8fa:	9b00      	ldr	r3, [sp, #0]
 801b8fc:	9c03      	ldr	r4, [sp, #12]
 801b8fe:	189f      	adds	r7, r3, r2
 801b900:	4b64      	ldr	r3, [pc, #400]	; (801ba94 <_DrawBitmapCCW+0x65c>)
 801b902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b904:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
 801b908:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b90a:	2002      	movs	r0, #2
 801b90c:	9301      	str	r3, [sp, #4]
 801b90e:	f7ff f8f9 	bl	801ab04 <LCD__GetPfSetPixel>
 801b912:	f8dd a010 	ldr.w	sl, [sp, #16]
 801b916:	4606      	mov	r6, r0
 801b918:	e001      	b.n	801b91e <_DrawBitmapCCW+0x4e6>
 801b91a:	45c2      	cmp	sl, r8
 801b91c:	d021      	beq.n	801b962 <_DrawBitmapCCW+0x52a>
 801b91e:	f1c4 0203 	rsb	r2, r4, #3
 801b922:	ab0e      	add	r3, sp, #56	; 0x38
 801b924:	3401      	adds	r4, #1
 801b926:	4651      	mov	r1, sl
 801b928:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 801b92c:	4638      	mov	r0, r7
 801b92e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b932:	f1ce 0206 	rsb	r2, lr, #6
 801b936:	fa49 f202 	asr.w	r2, r9, r2
 801b93a:	402a      	ands	r2, r5
 801b93c:	fa22 f20e 	lsr.w	r2, r2, lr
 801b940:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b944:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 801b948:	47b0      	blx	r6
 801b94a:	2c04      	cmp	r4, #4
 801b94c:	d1e5      	bne.n	801b91a <_DrawBitmapCCW+0x4e2>
 801b94e:	9a01      	ldr	r2, [sp, #4]
 801b950:	45c2      	cmp	sl, r8
 801b952:	f04f 0400 	mov.w	r4, #0
 801b956:	4613      	mov	r3, r2
 801b958:	7855      	ldrb	r5, [r2, #1]
 801b95a:	f103 0301 	add.w	r3, r3, #1
 801b95e:	9301      	str	r3, [sp, #4]
 801b960:	d1dd      	bne.n	801b91e <_DrawBitmapCCW+0x4e6>
 801b962:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b964:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b966:	9b02      	ldr	r3, [sp, #8]
 801b968:	440a      	add	r2, r1
 801b96a:	3301      	adds	r3, #1
 801b96c:	921c      	str	r2, [sp, #112]	; 0x70
 801b96e:	9a06      	ldr	r2, [sp, #24]
 801b970:	9302      	str	r3, [sp, #8]
 801b972:	429a      	cmp	r2, r3
 801b974:	dcbe      	bgt.n	801b8f4 <_DrawBitmapCCW+0x4bc>
 801b976:	e6af      	b.n	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b978:	9c03      	ldr	r4, [sp, #12]
 801b97a:	2780      	movs	r7, #128	; 0x80
 801b97c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801b97e:	9d07      	ldr	r5, [sp, #28]
 801b980:	f8cd 8004 	str.w	r8, [sp, #4]
 801b984:	e005      	b.n	801b992 <_DrawBitmapCCW+0x55a>
 801b986:	2c08      	cmp	r4, #8
 801b988:	f105 35ff 	add.w	r5, r5, #4294967295
 801b98c:	d017      	beq.n	801b9be <_DrawBitmapCCW+0x586>
 801b98e:	455d      	cmp	r5, fp
 801b990:	d018      	beq.n	801b9c4 <_DrawBitmapCCW+0x58c>
 801b992:	fa47 f304 	asr.w	r3, r7, r4
 801b996:	7832      	ldrb	r2, [r6, #0]
 801b998:	3401      	adds	r4, #1
 801b99a:	421a      	tst	r2, r3
 801b99c:	d0f3      	beq.n	801b986 <_DrawBitmapCCW+0x54e>
 801b99e:	f8d9 0000 	ldr.w	r0, [r9]
 801b9a2:	462a      	mov	r2, r5
 801b9a4:	9b04      	ldr	r3, [sp, #16]
 801b9a6:	3d01      	subs	r5, #1
 801b9a8:	7c40      	ldrb	r0, [r0, #17]
 801b9aa:	9901      	ldr	r1, [sp, #4]
 801b9ac:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801b9b0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801b9b4:	f8de 8018 	ldr.w	r8, [lr, #24]
 801b9b8:	47c0      	blx	r8
 801b9ba:	2c08      	cmp	r4, #8
 801b9bc:	d1e7      	bne.n	801b98e <_DrawBitmapCCW+0x556>
 801b9be:	3601      	adds	r6, #1
 801b9c0:	2400      	movs	r4, #0
 801b9c2:	e7e4      	b.n	801b98e <_DrawBitmapCCW+0x556>
 801b9c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b9c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b9c8:	9b02      	ldr	r3, [sp, #8]
 801b9ca:	440a      	add	r2, r1
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	921c      	str	r2, [sp, #112]	; 0x70
 801b9d0:	9a06      	ldr	r2, [sp, #24]
 801b9d2:	9302      	str	r3, [sp, #8]
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	f77f ae7f 	ble.w	801b6d8 <_DrawBitmapCCW+0x2a0>
 801b9da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	9304      	str	r3, [sp, #16]
 801b9e0:	e65e      	b.n	801b6a0 <_DrawBitmapCCW+0x268>
 801b9e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b9e4:	9c03      	ldr	r4, [sp, #12]
 801b9e6:	6812      	ldr	r2, [r2, #0]
 801b9e8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801b9ea:	9201      	str	r2, [sp, #4]
 801b9ec:	9d07      	ldr	r5, [sp, #28]
 801b9ee:	e003      	b.n	801b9f8 <_DrawBitmapCCW+0x5c0>
 801b9f0:	455d      	cmp	r5, fp
 801b9f2:	d0e7      	beq.n	801b9c4 <_DrawBitmapCCW+0x58c>
 801b9f4:	f8d9 3000 	ldr.w	r3, [r9]
 801b9f8:	7c5a      	ldrb	r2, [r3, #17]
 801b9fa:	2380      	movs	r3, #128	; 0x80
 801b9fc:	7839      	ldrb	r1, [r7, #0]
 801b9fe:	4123      	asrs	r3, r4
 801ba00:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
 801ba04:	3401      	adds	r4, #1
 801ba06:	462a      	mov	r2, r5
 801ba08:	4219      	tst	r1, r3
 801ba0a:	9b01      	ldr	r3, [sp, #4]
 801ba0c:	68c6      	ldr	r6, [r0, #12]
 801ba0e:	4641      	mov	r1, r8
 801ba10:	469e      	mov	lr, r3
 801ba12:	9b04      	ldr	r3, [sp, #16]
 801ba14:	69b6      	ldr	r6, [r6, #24]
 801ba16:	f105 35ff 	add.w	r5, r5, #4294967295
 801ba1a:	bf08      	it	eq
 801ba1c:	4673      	moveq	r3, lr
 801ba1e:	47b0      	blx	r6
 801ba20:	2c08      	cmp	r4, #8
 801ba22:	d1e5      	bne.n	801b9f0 <_DrawBitmapCCW+0x5b8>
 801ba24:	3701      	adds	r7, #1
 801ba26:	2400      	movs	r4, #0
 801ba28:	e7e2      	b.n	801b9f0 <_DrawBitmapCCW+0x5b8>
 801ba2a:	7c5b      	ldrb	r3, [r3, #17]
 801ba2c:	9c03      	ldr	r4, [sp, #12]
 801ba2e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801ba32:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801ba34:	691b      	ldr	r3, [r3, #16]
 801ba36:	9d07      	ldr	r5, [sp, #28]
 801ba38:	689b      	ldr	r3, [r3, #8]
 801ba3a:	4798      	blx	r3
 801ba3c:	9001      	str	r0, [sp, #4]
 801ba3e:	e005      	b.n	801ba4c <_DrawBitmapCCW+0x614>
 801ba40:	2c08      	cmp	r4, #8
 801ba42:	f105 35ff 	add.w	r5, r5, #4294967295
 801ba46:	d022      	beq.n	801ba8e <_DrawBitmapCCW+0x656>
 801ba48:	455d      	cmp	r5, fp
 801ba4a:	d0bb      	beq.n	801b9c4 <_DrawBitmapCCW+0x58c>
 801ba4c:	2380      	movs	r3, #128	; 0x80
 801ba4e:	7832      	ldrb	r2, [r6, #0]
 801ba50:	4123      	asrs	r3, r4
 801ba52:	3401      	adds	r4, #1
 801ba54:	421a      	tst	r2, r3
 801ba56:	d0f3      	beq.n	801ba40 <_DrawBitmapCCW+0x608>
 801ba58:	f8d9 3000 	ldr.w	r3, [r9]
 801ba5c:	462a      	mov	r2, r5
 801ba5e:	4641      	mov	r1, r8
 801ba60:	7c5b      	ldrb	r3, [r3, #17]
 801ba62:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801ba66:	68c3      	ldr	r3, [r0, #12]
 801ba68:	695b      	ldr	r3, [r3, #20]
 801ba6a:	4798      	blx	r3
 801ba6c:	f8d9 1000 	ldr.w	r1, [r9]
 801ba70:	9b01      	ldr	r3, [sp, #4]
 801ba72:	462a      	mov	r2, r5
 801ba74:	3d01      	subs	r5, #1
 801ba76:	4043      	eors	r3, r0
 801ba78:	7c48      	ldrb	r0, [r1, #17]
 801ba7a:	4641      	mov	r1, r8
 801ba7c:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 801ba80:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801ba84:	f8de 7018 	ldr.w	r7, [lr, #24]
 801ba88:	47b8      	blx	r7
 801ba8a:	2c08      	cmp	r4, #8
 801ba8c:	d1dc      	bne.n	801ba48 <_DrawBitmapCCW+0x610>
 801ba8e:	3601      	adds	r6, #1
 801ba90:	2400      	movs	r4, #0
 801ba92:	e7d9      	b.n	801ba48 <_DrawBitmapCCW+0x610>
 801ba94:	080278b8 	.word	0x080278b8

0801ba98 <LCD_SelectLCD>:
 801ba98:	b510      	push	{r4, lr}
 801ba9a:	4c0e      	ldr	r4, [pc, #56]	; (801bad4 <LCD_SelectLCD+0x3c>)
 801ba9c:	4b0e      	ldr	r3, [pc, #56]	; (801bad8 <LCD_SelectLCD+0x40>)
 801ba9e:	6822      	ldr	r2, [r4, #0]
 801baa0:	7c51      	ldrb	r1, [r2, #17]
 801baa2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801baa6:	b138      	cbz	r0, 801bab8 <LCD_SelectLCD+0x20>
 801baa8:	68c3      	ldr	r3, [r0, #12]
 801baaa:	b113      	cbz	r3, 801bab2 <LCD_SelectLCD+0x1a>
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b04      	cmp	r3, #4
 801bab0:	d00b      	beq.n	801baca <LCD_SelectLCD+0x32>
 801bab2:	6800      	ldr	r0, [r0, #0]
 801bab4:	2800      	cmp	r0, #0
 801bab6:	d1f7      	bne.n	801baa8 <LCD_SelectLCD+0x10>
 801bab8:	2100      	movs	r1, #0
 801baba:	f102 0308 	add.w	r3, r2, #8
 801babe:	6611      	str	r1, [r2, #96]	; 0x60
 801bac0:	6153      	str	r3, [r2, #20]
 801bac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bac6:	f7fe bdcf 	b.w	801a668 <LCD_SetClipRectMax>
 801baca:	f7f8 fdb9 	bl	8014640 <GUI_DEVICE_Unlink>
 801bace:	6822      	ldr	r2, [r4, #0]
 801bad0:	e7f2      	b.n	801bab8 <LCD_SelectLCD+0x20>
 801bad2:	bf00      	nop
 801bad4:	20000018 	.word	0x20000018
 801bad8:	200467d0 	.word	0x200467d0

0801badc <LCD_GetPosEx>:
 801badc:	b530      	push	{r4, r5, lr}
 801bade:	b083      	sub	sp, #12
 801bae0:	460c      	mov	r4, r1
 801bae2:	4615      	mov	r5, r2
 801bae4:	f7f8 fd66 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bae8:	9001      	str	r0, [sp, #4]
 801baea:	b170      	cbz	r0, 801bb0a <LCD_GetPosEx+0x2e>
 801baec:	68c3      	ldr	r3, [r0, #12]
 801baee:	2104      	movs	r1, #4
 801baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801baf2:	eb0d 0001 	add.w	r0, sp, r1
 801baf6:	4798      	blx	r3
 801baf8:	4603      	mov	r3, r0
 801bafa:	b130      	cbz	r0, 801bb0a <LCD_GetPosEx+0x2e>
 801bafc:	9801      	ldr	r0, [sp, #4]
 801bafe:	462a      	mov	r2, r5
 801bb00:	4621      	mov	r1, r4
 801bb02:	4798      	blx	r3
 801bb04:	2000      	movs	r0, #0
 801bb06:	b003      	add	sp, #12
 801bb08:	bd30      	pop	{r4, r5, pc}
 801bb0a:	2001      	movs	r0, #1
 801bb0c:	b003      	add	sp, #12
 801bb0e:	bd30      	pop	{r4, r5, pc}

0801bb10 <LCD_SetDevFunc>:
 801bb10:	b530      	push	{r4, r5, lr}
 801bb12:	b083      	sub	sp, #12
 801bb14:	460c      	mov	r4, r1
 801bb16:	4615      	mov	r5, r2
 801bb18:	f7f8 fd4c 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bb1c:	9001      	str	r0, [sp, #4]
 801bb1e:	b168      	cbz	r0, 801bb3c <LCD_SetDevFunc+0x2c>
 801bb20:	68c3      	ldr	r3, [r0, #12]
 801bb22:	2116      	movs	r1, #22
 801bb24:	a801      	add	r0, sp, #4
 801bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb28:	4798      	blx	r3
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	b130      	cbz	r0, 801bb3c <LCD_SetDevFunc+0x2c>
 801bb2e:	9801      	ldr	r0, [sp, #4]
 801bb30:	462a      	mov	r2, r5
 801bb32:	4621      	mov	r1, r4
 801bb34:	4798      	blx	r3
 801bb36:	2000      	movs	r0, #0
 801bb38:	b003      	add	sp, #12
 801bb3a:	bd30      	pop	{r4, r5, pc}
 801bb3c:	2001      	movs	r0, #1
 801bb3e:	b003      	add	sp, #12
 801bb40:	bd30      	pop	{r4, r5, pc}
 801bb42:	bf00      	nop

0801bb44 <LCD_SetLUTEntryEx>:
 801bb44:	b530      	push	{r4, r5, lr}
 801bb46:	b083      	sub	sp, #12
 801bb48:	460c      	mov	r4, r1
 801bb4a:	4615      	mov	r5, r2
 801bb4c:	f7f8 fd32 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bb50:	9001      	str	r0, [sp, #4]
 801bb52:	b168      	cbz	r0, 801bb70 <LCD_SetLUTEntryEx+0x2c>
 801bb54:	68c3      	ldr	r3, [r0, #12]
 801bb56:	2110      	movs	r1, #16
 801bb58:	a801      	add	r0, sp, #4
 801bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb5c:	4798      	blx	r3
 801bb5e:	4603      	mov	r3, r0
 801bb60:	b130      	cbz	r0, 801bb70 <LCD_SetLUTEntryEx+0x2c>
 801bb62:	9801      	ldr	r0, [sp, #4]
 801bb64:	462a      	mov	r2, r5
 801bb66:	4621      	mov	r1, r4
 801bb68:	4798      	blx	r3
 801bb6a:	2000      	movs	r0, #0
 801bb6c:	b003      	add	sp, #12
 801bb6e:	bd30      	pop	{r4, r5, pc}
 801bb70:	2001      	movs	r0, #1
 801bb72:	b003      	add	sp, #12
 801bb74:	bd30      	pop	{r4, r5, pc}
 801bb76:	bf00      	nop

0801bb78 <LCD_SetPosEx>:
 801bb78:	b530      	push	{r4, r5, lr}
 801bb7a:	b083      	sub	sp, #12
 801bb7c:	460c      	mov	r4, r1
 801bb7e:	4615      	mov	r5, r2
 801bb80:	f7f8 fd18 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bb84:	9001      	str	r0, [sp, #4]
 801bb86:	b168      	cbz	r0, 801bba4 <LCD_SetPosEx+0x2c>
 801bb88:	68c3      	ldr	r3, [r0, #12]
 801bb8a:	2103      	movs	r1, #3
 801bb8c:	a801      	add	r0, sp, #4
 801bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb90:	4798      	blx	r3
 801bb92:	4603      	mov	r3, r0
 801bb94:	b130      	cbz	r0, 801bba4 <LCD_SetPosEx+0x2c>
 801bb96:	9801      	ldr	r0, [sp, #4]
 801bb98:	462a      	mov	r2, r5
 801bb9a:	4621      	mov	r1, r4
 801bb9c:	4798      	blx	r3
 801bb9e:	2000      	movs	r0, #0
 801bba0:	b003      	add	sp, #12
 801bba2:	bd30      	pop	{r4, r5, pc}
 801bba4:	2001      	movs	r0, #1
 801bba6:	b003      	add	sp, #12
 801bba8:	bd30      	pop	{r4, r5, pc}
 801bbaa:	bf00      	nop

0801bbac <LCD_SetSizeEx>:
 801bbac:	b530      	push	{r4, r5, lr}
 801bbae:	b083      	sub	sp, #12
 801bbb0:	460c      	mov	r4, r1
 801bbb2:	4615      	mov	r5, r2
 801bbb4:	f7f8 fcfe 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bbb8:	9001      	str	r0, [sp, #4]
 801bbba:	b168      	cbz	r0, 801bbd8 <LCD_SetSizeEx+0x2c>
 801bbbc:	68c3      	ldr	r3, [r0, #12]
 801bbbe:	210b      	movs	r1, #11
 801bbc0:	a801      	add	r0, sp, #4
 801bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbc4:	4798      	blx	r3
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	b130      	cbz	r0, 801bbd8 <LCD_SetSizeEx+0x2c>
 801bbca:	9801      	ldr	r0, [sp, #4]
 801bbcc:	462a      	mov	r2, r5
 801bbce:	4621      	mov	r1, r4
 801bbd0:	4798      	blx	r3
 801bbd2:	2000      	movs	r0, #0
 801bbd4:	b003      	add	sp, #12
 801bbd6:	bd30      	pop	{r4, r5, pc}
 801bbd8:	2001      	movs	r0, #1
 801bbda:	b003      	add	sp, #12
 801bbdc:	bd30      	pop	{r4, r5, pc}
 801bbde:	bf00      	nop

0801bbe0 <LCD_SetVRAMAddrEx>:
 801bbe0:	b510      	push	{r4, lr}
 801bbe2:	b082      	sub	sp, #8
 801bbe4:	460c      	mov	r4, r1
 801bbe6:	f7f8 fce5 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bbea:	9001      	str	r0, [sp, #4]
 801bbec:	b160      	cbz	r0, 801bc08 <LCD_SetVRAMAddrEx+0x28>
 801bbee:	68c3      	ldr	r3, [r0, #12]
 801bbf0:	2109      	movs	r1, #9
 801bbf2:	a801      	add	r0, sp, #4
 801bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbf6:	4798      	blx	r3
 801bbf8:	4603      	mov	r3, r0
 801bbfa:	b128      	cbz	r0, 801bc08 <LCD_SetVRAMAddrEx+0x28>
 801bbfc:	9801      	ldr	r0, [sp, #4]
 801bbfe:	4621      	mov	r1, r4
 801bc00:	4798      	blx	r3
 801bc02:	2000      	movs	r0, #0
 801bc04:	b002      	add	sp, #8
 801bc06:	bd10      	pop	{r4, pc}
 801bc08:	2001      	movs	r0, #1
 801bc0a:	b002      	add	sp, #8
 801bc0c:	bd10      	pop	{r4, pc}
 801bc0e:	bf00      	nop

0801bc10 <LCD_SetVSizeEx>:
 801bc10:	b530      	push	{r4, r5, lr}
 801bc12:	b083      	sub	sp, #12
 801bc14:	460c      	mov	r4, r1
 801bc16:	4615      	mov	r5, r2
 801bc18:	f7f8 fccc 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801bc1c:	9001      	str	r0, [sp, #4]
 801bc1e:	b168      	cbz	r0, 801bc3c <LCD_SetVSizeEx+0x2c>
 801bc20:	68c3      	ldr	r3, [r0, #12]
 801bc22:	210a      	movs	r1, #10
 801bc24:	a801      	add	r0, sp, #4
 801bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc28:	4798      	blx	r3
 801bc2a:	4603      	mov	r3, r0
 801bc2c:	b130      	cbz	r0, 801bc3c <LCD_SetVSizeEx+0x2c>
 801bc2e:	9801      	ldr	r0, [sp, #4]
 801bc30:	462a      	mov	r2, r5
 801bc32:	4621      	mov	r1, r4
 801bc34:	4798      	blx	r3
 801bc36:	2000      	movs	r0, #0
 801bc38:	b003      	add	sp, #12
 801bc3a:	bd30      	pop	{r4, r5, pc}
 801bc3c:	2001      	movs	r0, #1
 801bc3e:	b003      	add	sp, #12
 801bc40:	bd30      	pop	{r4, r5, pc}
 801bc42:	bf00      	nop

0801bc44 <LCD_UpdateColorIndices>:
 801bc44:	b510      	push	{r4, lr}
 801bc46:	4c07      	ldr	r4, [pc, #28]	; (801bc64 <LCD_UpdateColorIndices+0x20>)
 801bc48:	6823      	ldr	r3, [r4, #0]
 801bc4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801bc4c:	f7fe fda2 	bl	801a794 <LCD_Color2Index>
 801bc50:	f7fe fdbc 	bl	801a7cc <LCD_SetColorIndex>
 801bc54:	6823      	ldr	r3, [r4, #0]
 801bc56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801bc58:	f7fe fd9c 	bl	801a794 <LCD_Color2Index>
 801bc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc60:	f7fe bdc0 	b.w	801a7e4 <LCD_SetBkColorIndex>
 801bc64:	20000018 	.word	0x20000018

0801bc68 <_GetRect>:
 801bc68:	6883      	ldr	r3, [r0, #8]
 801bc6a:	2000      	movs	r0, #0
 801bc6c:	699a      	ldr	r2, [r3, #24]
 801bc6e:	69db      	ldr	r3, [r3, #28]
 801bc70:	3a01      	subs	r2, #1
 801bc72:	8008      	strh	r0, [r1, #0]
 801bc74:	3b01      	subs	r3, #1
 801bc76:	8048      	strh	r0, [r1, #2]
 801bc78:	808a      	strh	r2, [r1, #4]
 801bc7a:	80cb      	strh	r3, [r1, #6]
 801bc7c:	4770      	bx	lr
 801bc7e:	bf00      	nop

0801bc80 <_SetPixelIndex>:
 801bc80:	b410      	push	{r4}
 801bc82:	6884      	ldr	r4, [r0, #8]
 801bc84:	6a20      	ldr	r0, [r4, #32]
 801bc86:	6824      	ldr	r4, [r4, #0]
 801bc88:	fb00 1202 	mla	r2, r0, r2, r1
 801bc8c:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801bc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc94:	4770      	bx	lr
 801bc96:	bf00      	nop

0801bc98 <_GetPixelIndex>:
 801bc98:	6880      	ldr	r0, [r0, #8]
 801bc9a:	6a03      	ldr	r3, [r0, #32]
 801bc9c:	6800      	ldr	r0, [r0, #0]
 801bc9e:	fb03 1202 	mla	r2, r3, r2, r1
 801bca2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 801bca6:	4770      	bx	lr

0801bca8 <_XorPixel>:
 801bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcaa:	4614      	mov	r4, r2
 801bcac:	6882      	ldr	r2, [r0, #8]
 801bcae:	460f      	mov	r7, r1
 801bcb0:	4606      	mov	r6, r0
 801bcb2:	6a13      	ldr	r3, [r2, #32]
 801bcb4:	6900      	ldr	r0, [r0, #16]
 801bcb6:	6811      	ldr	r1, [r2, #0]
 801bcb8:	fb03 7304 	mla	r3, r3, r4, r7
 801bcbc:	6882      	ldr	r2, [r0, #8]
 801bcbe:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801bcc2:	4790      	blx	r2
 801bcc4:	68b3      	ldr	r3, [r6, #8]
 801bcc6:	4068      	eors	r0, r5
 801bcc8:	6a19      	ldr	r1, [r3, #32]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	fb01 7404 	mla	r4, r1, r4, r7
 801bcd0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 801bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcd6:	bf00      	nop

0801bcd8 <_GetDevProp>:
 801bcd8:	3901      	subs	r1, #1
 801bcda:	6883      	ldr	r3, [r0, #8]
 801bcdc:	290d      	cmp	r1, #13
 801bcde:	d816      	bhi.n	801bd0e <_GetDevProp+0x36>
 801bce0:	e8df f001 	tbb	[pc, r1]
 801bce4:	0d13110f 	.word	0x0d13110f
 801bce8:	0b151515 	.word	0x0b151515
 801bcec:	07090907 	.word	0x07090907
 801bcf0:	0707      	.short	0x0707
 801bcf2:	2000      	movs	r0, #0
 801bcf4:	4770      	bx	lr
 801bcf6:	2001      	movs	r0, #1
 801bcf8:	4770      	bx	lr
 801bcfa:	2010      	movs	r0, #16
 801bcfc:	4770      	bx	lr
 801bcfe:	69d8      	ldr	r0, [r3, #28]
 801bd00:	4770      	bx	lr
 801bd02:	6918      	ldr	r0, [r3, #16]
 801bd04:	4770      	bx	lr
 801bd06:	6958      	ldr	r0, [r3, #20]
 801bd08:	4770      	bx	lr
 801bd0a:	6998      	ldr	r0, [r3, #24]
 801bd0c:	4770      	bx	lr
 801bd0e:	f04f 30ff 	mov.w	r0, #4294967295
 801bd12:	4770      	bx	lr

0801bd14 <_GetDevData>:
 801bd14:	2901      	cmp	r1, #1
 801bd16:	4802      	ldr	r0, [pc, #8]	; (801bd20 <_GetDevData+0xc>)
 801bd18:	bf18      	it	ne
 801bd1a:	2000      	movne	r0, #0
 801bd1c:	4770      	bx	lr
 801bd1e:	bf00      	nop
 801bd20:	08034680 	.word	0x08034680

0801bd24 <_ReadRect>:
 801bd24:	1a5b      	subs	r3, r3, r1
 801bd26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd2a:	1e5e      	subs	r6, r3, #1
 801bd2c:	6880      	ldr	r0, [r0, #8]
 801bd2e:	b085      	sub	sp, #20
 801bd30:	f103 0e01 	add.w	lr, r3, #1
 801bd34:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	0876      	lsrs	r6, r6, #1
 801bd3c:	f8d0 c000 	ldr.w	ip, [r0]
 801bd40:	fb09 1702 	mla	r7, r9, r2, r1
 801bd44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bd46:	3601      	adds	r6, #1
 801bd48:	9303      	str	r3, [sp, #12]
 801bd4a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 801bd4e:	eb0c 0547 	add.w	r5, ip, r7, lsl #1
 801bd52:	9301      	str	r3, [sp, #4]
 801bd54:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801bd58:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801bd5c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801bd60:	9302      	str	r3, [sp, #8]
 801bd62:	1d0b      	adds	r3, r1, #4
 801bd64:	1d28      	adds	r0, r5, #4
 801bd66:	42ab      	cmp	r3, r5
 801bd68:	bf8c      	ite	hi
 801bd6a:	2300      	movhi	r3, #0
 801bd6c:	2301      	movls	r3, #1
 801bd6e:	4281      	cmp	r1, r0
 801bd70:	bf28      	it	cs
 801bd72:	f043 0301 	orrcs.w	r3, r3, #1
 801bd76:	b36b      	cbz	r3, 801bdd4 <_ReadRect+0xb0>
 801bd78:	ea41 0305 	orr.w	r3, r1, r5
 801bd7c:	f1be 0f0c 	cmp.w	lr, #12
 801bd80:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801bd84:	bf94      	ite	ls
 801bd86:	2000      	movls	r0, #0
 801bd88:	2001      	movhi	r0, #1
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	bf18      	it	ne
 801bd8e:	2000      	movne	r0, #0
 801bd90:	b300      	cbz	r0, 801bdd4 <_ReadRect+0xb0>
 801bd92:	1f2c      	subs	r4, r5, #4
 801bd94:	4608      	mov	r0, r1
 801bd96:	2300      	movs	r3, #0
 801bd98:	4693      	mov	fp, r2
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	f854 2f04 	ldr.w	r2, [r4, #4]!
 801bda0:	429e      	cmp	r6, r3
 801bda2:	f840 2b04 	str.w	r2, [r0], #4
 801bda6:	d8f8      	bhi.n	801bd9a <_ReadRect+0x76>
 801bda8:	45d6      	cmp	lr, sl
 801bdaa:	465a      	mov	r2, fp
 801bdac:	eb07 030a 	add.w	r3, r7, sl
 801bdb0:	d003      	beq.n	801bdba <_ReadRect+0x96>
 801bdb2:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 801bdb6:	f821 3008 	strh.w	r3, [r1, r8]
 801bdba:	9b01      	ldr	r3, [sp, #4]
 801bdbc:	3201      	adds	r2, #1
 801bdbe:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bdc0:	444f      	add	r7, r9
 801bdc2:	4419      	add	r1, r3
 801bdc4:	9b02      	ldr	r3, [sp, #8]
 801bdc6:	441d      	add	r5, r3
 801bdc8:	1e53      	subs	r3, r2, #1
 801bdca:	4298      	cmp	r0, r3
 801bdcc:	dcc9      	bgt.n	801bd62 <_ReadRect+0x3e>
 801bdce:	b005      	add	sp, #20
 801bdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd4:	9803      	ldr	r0, [sp, #12]
 801bdd6:	1e8b      	subs	r3, r1, #2
 801bdd8:	eb01 0b00 	add.w	fp, r1, r0
 801bddc:	4628      	mov	r0, r5
 801bdde:	f830 4b02 	ldrh.w	r4, [r0], #2
 801bde2:	f823 4f02 	strh.w	r4, [r3, #2]!
 801bde6:	455b      	cmp	r3, fp
 801bde8:	d1f9      	bne.n	801bdde <_ReadRect+0xba>
 801bdea:	e7e6      	b.n	801bdba <_ReadRect+0x96>

0801bdec <_GetDevFunc>:
 801bdec:	3901      	subs	r1, #1
 801bdee:	2928      	cmp	r1, #40	; 0x28
 801bdf0:	d84a      	bhi.n	801be88 <_GetDevFunc+0x9c>
 801bdf2:	e8df f001 	tbb	[pc, r1]
 801bdf6:	1d1f      	.short	0x1d1f
 801bdf8:	1749191b 	.word	0x1749191b
 801bdfc:	47154949 	.word	0x47154949
 801be00:	41494345 	.word	0x41494345
 801be04:	4949493f 	.word	0x4949493f
 801be08:	37393b3d 	.word	0x37393b3d
 801be0c:	49334949 	.word	0x49334949
 801be10:	49494949 	.word	0x49494949
 801be14:	2b2d2f49 	.word	0x2b2d2f49
 801be18:	49234927 	.word	0x49234927
 801be1c:	4949      	.short	0x4949
 801be1e:	21          	.byte	0x21
 801be1f:	00          	.byte	0x00
 801be20:	481a      	ldr	r0, [pc, #104]	; (801be8c <_GetDevFunc+0xa0>)
 801be22:	4770      	bx	lr
 801be24:	481a      	ldr	r0, [pc, #104]	; (801be90 <_GetDevFunc+0xa4>)
 801be26:	4770      	bx	lr
 801be28:	481a      	ldr	r0, [pc, #104]	; (801be94 <_GetDevFunc+0xa8>)
 801be2a:	4770      	bx	lr
 801be2c:	481a      	ldr	r0, [pc, #104]	; (801be98 <_GetDevFunc+0xac>)
 801be2e:	4770      	bx	lr
 801be30:	481a      	ldr	r0, [pc, #104]	; (801be9c <_GetDevFunc+0xb0>)
 801be32:	4770      	bx	lr
 801be34:	481a      	ldr	r0, [pc, #104]	; (801bea0 <_GetDevFunc+0xb4>)
 801be36:	4770      	bx	lr
 801be38:	481a      	ldr	r0, [pc, #104]	; (801bea4 <_GetDevFunc+0xb8>)
 801be3a:	4770      	bx	lr
 801be3c:	6803      	ldr	r3, [r0, #0]
 801be3e:	689b      	ldr	r3, [r3, #8]
 801be40:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801be42:	4770      	bx	lr
 801be44:	6803      	ldr	r3, [r0, #0]
 801be46:	689b      	ldr	r3, [r3, #8]
 801be48:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801be4a:	4770      	bx	lr
 801be4c:	4816      	ldr	r0, [pc, #88]	; (801bea8 <_GetDevFunc+0xbc>)
 801be4e:	4770      	bx	lr
 801be50:	4816      	ldr	r0, [pc, #88]	; (801beac <_GetDevFunc+0xc0>)
 801be52:	4770      	bx	lr
 801be54:	6803      	ldr	r3, [r0, #0]
 801be56:	689b      	ldr	r3, [r3, #8]
 801be58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801be5a:	4770      	bx	lr
 801be5c:	6803      	ldr	r3, [r0, #0]
 801be5e:	689b      	ldr	r3, [r3, #8]
 801be60:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801be62:	4770      	bx	lr
 801be64:	4812      	ldr	r0, [pc, #72]	; (801beb0 <_GetDevFunc+0xc4>)
 801be66:	4770      	bx	lr
 801be68:	4812      	ldr	r0, [pc, #72]	; (801beb4 <_GetDevFunc+0xc8>)
 801be6a:	4770      	bx	lr
 801be6c:	4812      	ldr	r0, [pc, #72]	; (801beb8 <_GetDevFunc+0xcc>)
 801be6e:	4770      	bx	lr
 801be70:	4812      	ldr	r0, [pc, #72]	; (801bebc <_GetDevFunc+0xd0>)
 801be72:	4770      	bx	lr
 801be74:	4812      	ldr	r0, [pc, #72]	; (801bec0 <_GetDevFunc+0xd4>)
 801be76:	4770      	bx	lr
 801be78:	4812      	ldr	r0, [pc, #72]	; (801bec4 <_GetDevFunc+0xd8>)
 801be7a:	4770      	bx	lr
 801be7c:	4812      	ldr	r0, [pc, #72]	; (801bec8 <_GetDevFunc+0xdc>)
 801be7e:	4770      	bx	lr
 801be80:	4812      	ldr	r0, [pc, #72]	; (801becc <_GetDevFunc+0xe0>)
 801be82:	4770      	bx	lr
 801be84:	4812      	ldr	r0, [pc, #72]	; (801bed0 <_GetDevFunc+0xe4>)
 801be86:	4770      	bx	lr
 801be88:	2000      	movs	r0, #0
 801be8a:	4770      	bx	lr
 801be8c:	0801cb11 	.word	0x0801cb11
 801be90:	0801cad1 	.word	0x0801cad1
 801be94:	0801ca25 	.word	0x0801ca25
 801be98:	0801ccd9 	.word	0x0801ccd9
 801be9c:	0801ca91 	.word	0x0801ca91
 801bea0:	0801bd25 	.word	0x0801bd25
 801bea4:	0801c9f9 	.word	0x0801c9f9
 801bea8:	0801ca55 	.word	0x0801ca55
 801beac:	0801cc55 	.word	0x0801cc55
 801beb0:	0801cbe5 	.word	0x0801cbe5
 801beb4:	0801bed5 	.word	0x0801bed5
 801beb8:	0801beed 	.word	0x0801beed
 801bebc:	0801bf05 	.word	0x0801bf05
 801bec0:	0801bf1d 	.word	0x0801bf1d
 801bec4:	0801bf29 	.word	0x0801bf29
 801bec8:	0801c9c9 	.word	0x0801c9c9
 801becc:	0801cb89 	.word	0x0801cb89
 801bed0:	0801cb51 	.word	0x0801cb51

0801bed4 <_SetChroma>:
 801bed4:	b500      	push	{lr}
 801bed6:	b083      	sub	sp, #12
 801bed8:	6980      	ldr	r0, [r0, #24]
 801beda:	9100      	str	r1, [sp, #0]
 801bedc:	210d      	movs	r1, #13
 801bede:	9201      	str	r2, [sp, #4]
 801bee0:	466a      	mov	r2, sp
 801bee2:	f7e8 fd13 	bl	800490c <LCD_X_DisplayDriver>
 801bee6:	b003      	add	sp, #12
 801bee8:	f85d fb04 	ldr.w	pc, [sp], #4

0801beec <_SetChromaMode>:
 801beec:	b500      	push	{lr}
 801beee:	b083      	sub	sp, #12
 801bef0:	6980      	ldr	r0, [r0, #24]
 801bef2:	aa02      	add	r2, sp, #8
 801bef4:	f842 1d04 	str.w	r1, [r2, #-4]!
 801bef8:	210c      	movs	r1, #12
 801befa:	f7e8 fd07 	bl	800490c <LCD_X_DisplayDriver>
 801befe:	b003      	add	sp, #12
 801bf00:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf04 <_SetAlphaMode>:
 801bf04:	b500      	push	{lr}
 801bf06:	b083      	sub	sp, #12
 801bf08:	6980      	ldr	r0, [r0, #24]
 801bf0a:	aa02      	add	r2, sp, #8
 801bf0c:	f842 1d04 	str.w	r1, [r2, #-4]!
 801bf10:	210b      	movs	r1, #11
 801bf12:	f7e8 fcfb 	bl	800490c <LCD_X_DisplayDriver>
 801bf16:	b003      	add	sp, #12
 801bf18:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf1c <_Off>:
 801bf1c:	6980      	ldr	r0, [r0, #24]
 801bf1e:	2200      	movs	r2, #0
 801bf20:	2106      	movs	r1, #6
 801bf22:	f7e8 bcf3 	b.w	800490c <LCD_X_DisplayDriver>
 801bf26:	bf00      	nop

0801bf28 <_On>:
 801bf28:	6980      	ldr	r0, [r0, #24]
 801bf2a:	2200      	movs	r2, #0
 801bf2c:	2105      	movs	r1, #5
 801bf2e:	f7e8 bced 	b.w	800490c <LCD_X_DisplayDriver>
 801bf32:	bf00      	nop

0801bf34 <_SetOrg>:
 801bf34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf38:	2300      	movs	r3, #0
 801bf3a:	b083      	sub	sp, #12
 801bf3c:	4604      	mov	r4, r0
 801bf3e:	6980      	ldr	r0, [r0, #24]
 801bf40:	460f      	mov	r7, r1
 801bf42:	4690      	mov	r8, r2
 801bf44:	9301      	str	r3, [sp, #4]
 801bf46:	9300      	str	r3, [sp, #0]
 801bf48:	68a6      	ldr	r6, [r4, #8]
 801bf4a:	f7fe ff19 	bl	801ad80 <LCD_GetMirrorXEx>
 801bf4e:	4605      	mov	r5, r0
 801bf50:	69a0      	ldr	r0, [r4, #24]
 801bf52:	f7fe ff25 	bl	801ada0 <LCD_GetMirrorYEx>
 801bf56:	4681      	mov	r9, r0
 801bf58:	69a0      	ldr	r0, [r4, #24]
 801bf5a:	f7fe ff31 	bl	801adc0 <LCD_GetSwapXYEx>
 801bf5e:	0080      	lsls	r0, r0, #2
 801bf60:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 801bf64:	4328      	orrs	r0, r5
 801bf66:	2807      	cmp	r0, #7
 801bf68:	d810      	bhi.n	801bf8c <_SetOrg+0x58>
 801bf6a:	e8df f000 	tbb	[pc, r0]
 801bf6e:	1a17      	.short	0x1a17
 801bf70:	3a362a22 	.word	0x3a362a22
 801bf74:	0442      	.short	0x0442
 801bf76:	69f2      	ldr	r2, [r6, #28]
 801bf78:	6970      	ldr	r0, [r6, #20]
 801bf7a:	69b3      	ldr	r3, [r6, #24]
 801bf7c:	6931      	ldr	r1, [r6, #16]
 801bf7e:	1a12      	subs	r2, r2, r0
 801bf80:	1a59      	subs	r1, r3, r1
 801bf82:	ebc8 0202 	rsb	r2, r8, r2
 801bf86:	1bcf      	subs	r7, r1, r7
 801bf88:	e88d 0084 	stmia.w	sp, {r2, r7}
 801bf8c:	466a      	mov	r2, sp
 801bf8e:	2103      	movs	r1, #3
 801bf90:	69a0      	ldr	r0, [r4, #24]
 801bf92:	f7e8 fcbb 	bl	800490c <LCD_X_DisplayDriver>
 801bf96:	b003      	add	sp, #12
 801bf98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf9c:	e88d 0180 	stmia.w	sp, {r7, r8}
 801bfa0:	e7f4      	b.n	801bf8c <_SetOrg+0x58>
 801bfa2:	69b3      	ldr	r3, [r6, #24]
 801bfa4:	6931      	ldr	r1, [r6, #16]
 801bfa6:	f8cd 8004 	str.w	r8, [sp, #4]
 801bfaa:	1a59      	subs	r1, r3, r1
 801bfac:	1bcf      	subs	r7, r1, r7
 801bfae:	9700      	str	r7, [sp, #0]
 801bfb0:	e7ec      	b.n	801bf8c <_SetOrg+0x58>
 801bfb2:	69f3      	ldr	r3, [r6, #28]
 801bfb4:	6972      	ldr	r2, [r6, #20]
 801bfb6:	9700      	str	r7, [sp, #0]
 801bfb8:	1a9a      	subs	r2, r3, r2
 801bfba:	ebc8 0202 	rsb	r2, r8, r2
 801bfbe:	9201      	str	r2, [sp, #4]
 801bfc0:	e7e4      	b.n	801bf8c <_SetOrg+0x58>
 801bfc2:	69b1      	ldr	r1, [r6, #24]
 801bfc4:	6930      	ldr	r0, [r6, #16]
 801bfc6:	69f3      	ldr	r3, [r6, #28]
 801bfc8:	6972      	ldr	r2, [r6, #20]
 801bfca:	1a09      	subs	r1, r1, r0
 801bfcc:	1a9a      	subs	r2, r3, r2
 801bfce:	1bcf      	subs	r7, r1, r7
 801bfd0:	ebc8 0202 	rsb	r2, r8, r2
 801bfd4:	9700      	str	r7, [sp, #0]
 801bfd6:	9201      	str	r2, [sp, #4]
 801bfd8:	e7d8      	b.n	801bf8c <_SetOrg+0x58>
 801bfda:	f8cd 8000 	str.w	r8, [sp]
 801bfde:	9701      	str	r7, [sp, #4]
 801bfe0:	e7d4      	b.n	801bf8c <_SetOrg+0x58>
 801bfe2:	69f3      	ldr	r3, [r6, #28]
 801bfe4:	6972      	ldr	r2, [r6, #20]
 801bfe6:	9701      	str	r7, [sp, #4]
 801bfe8:	1a9a      	subs	r2, r3, r2
 801bfea:	ebc8 0202 	rsb	r2, r8, r2
 801bfee:	9200      	str	r2, [sp, #0]
 801bff0:	e7cc      	b.n	801bf8c <_SetOrg+0x58>
 801bff2:	69b3      	ldr	r3, [r6, #24]
 801bff4:	6931      	ldr	r1, [r6, #16]
 801bff6:	f8cd 8000 	str.w	r8, [sp]
 801bffa:	1a59      	subs	r1, r3, r1
 801bffc:	1bcf      	subs	r7, r1, r7
 801bffe:	9701      	str	r7, [sp, #4]
 801c000:	e7c4      	b.n	801bf8c <_SetOrg+0x58>
 801c002:	bf00      	nop

0801c004 <_FillRect>:
 801c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c008:	6887      	ldr	r7, [r0, #8]
 801c00a:	b087      	sub	sp, #28
 801c00c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 801c00e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c010:	b156      	cbz	r6, 801c028 <_FillRect+0x24>
 801c012:	4d99      	ldr	r5, [pc, #612]	; (801c278 <_FillRect+0x274>)
 801c014:	6980      	ldr	r0, [r0, #24]
 801c016:	682d      	ldr	r5, [r5, #0]
 801c018:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801c01a:	682d      	ldr	r5, [r5, #0]
 801c01c:	e88d 0030 	stmia.w	sp, {r4, r5}
 801c020:	47b0      	blx	r6
 801c022:	b007      	add	sp, #28
 801c024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c028:	469c      	mov	ip, r3
 801c02a:	6a3b      	ldr	r3, [r7, #32]
 801c02c:	460d      	mov	r5, r1
 801c02e:	4992      	ldr	r1, [pc, #584]	; (801c278 <_FillRect+0x274>)
 801c030:	105b      	asrs	r3, r3, #1
 801c032:	4696      	mov	lr, r2
 801c034:	1aa2      	subs	r2, r4, r2
 801c036:	ebc5 0c0c 	rsb	ip, r5, ip
 801c03a:	4618      	mov	r0, r3
 801c03c:	680b      	ldr	r3, [r1, #0]
 801c03e:	4614      	mov	r4, r2
 801c040:	9203      	str	r2, [sp, #12]
 801c042:	7c19      	ldrb	r1, [r3, #16]
 801c044:	086a      	lsrs	r2, r5, #1
 801c046:	1c66      	adds	r6, r4, #1
 801c048:	683c      	ldr	r4, [r7, #0]
 801c04a:	fb00 2e0e 	mla	lr, r0, lr, r2
 801c04e:	07c9      	lsls	r1, r1, #31
 801c050:	9002      	str	r0, [sp, #8]
 801c052:	4630      	mov	r0, r6
 801c054:	eb04 028e 	add.w	r2, r4, lr, lsl #2
 801c058:	f10c 0401 	add.w	r4, ip, #1
 801c05c:	d550      	bpl.n	801c100 <_FillRect+0xfc>
 801c05e:	f015 0701 	ands.w	r7, r5, #1
 801c062:	d012      	beq.n	801c08a <_FillRect+0x86>
 801c064:	2e00      	cmp	r6, #0
 801c066:	f000 8102 	beq.w	801c26e <_FillRect+0x26a>
 801c06a:	9902      	ldr	r1, [sp, #8]
 801c06c:	4635      	mov	r5, r6
 801c06e:	4613      	mov	r3, r2
 801c070:	008f      	lsls	r7, r1, #2
 801c072:	681c      	ldr	r4, [r3, #0]
 801c074:	3d01      	subs	r5, #1
 801c076:	4981      	ldr	r1, [pc, #516]	; (801c27c <_FillRect+0x278>)
 801c078:	ea81 0104 	eor.w	r1, r1, r4
 801c07c:	6019      	str	r1, [r3, #0]
 801c07e:	443b      	add	r3, r7
 801c080:	d1f7      	bne.n	801c072 <_FillRect+0x6e>
 801c082:	fb07 2706 	mla	r7, r7, r6, r2
 801c086:	3204      	adds	r2, #4
 801c088:	4664      	mov	r4, ip
 801c08a:	2c01      	cmp	r4, #1
 801c08c:	dd28      	ble.n	801c0e0 <_FillRect+0xdc>
 801c08e:	2e00      	cmp	r6, #0
 801c090:	f000 80e5 	beq.w	801c25e <_FillRect+0x25a>
 801c094:	9b02      	ldr	r3, [sp, #8]
 801c096:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801c09a:	9b03      	ldr	r3, [sp, #12]
 801c09c:	fb0c f903 	mul.w	r9, ip, r3
 801c0a0:	f1cc 0800 	rsb	r8, ip, #0
 801c0a4:	eb02 0709 	add.w	r7, r2, r9
 801c0a8:	463b      	mov	r3, r7
 801c0aa:	4637      	mov	r7, r6
 801c0ac:	469e      	mov	lr, r3
 801c0ae:	3f01      	subs	r7, #1
 801c0b0:	4675      	mov	r5, lr
 801c0b2:	4621      	mov	r1, r4
 801c0b4:	682b      	ldr	r3, [r5, #0]
 801c0b6:	3902      	subs	r1, #2
 801c0b8:	43db      	mvns	r3, r3
 801c0ba:	2901      	cmp	r1, #1
 801c0bc:	f845 3b04 	str.w	r3, [r5], #4
 801c0c0:	dcf8      	bgt.n	801c0b4 <_FillRect+0xb0>
 801c0c2:	ebcc 0e0e 	rsb	lr, ip, lr
 801c0c6:	2f00      	cmp	r7, #0
 801c0c8:	d1f1      	bne.n	801c0ae <_FillRect+0xaa>
 801c0ca:	1ea3      	subs	r3, r4, #2
 801c0cc:	9903      	ldr	r1, [sp, #12]
 801c0ce:	085b      	lsrs	r3, r3, #1
 801c0d0:	fb08 9801 	mla	r8, r8, r1, r9
 801c0d4:	3301      	adds	r3, #1
 801c0d6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801c0da:	441a      	add	r2, r3
 801c0dc:	f004 0401 	and.w	r4, r4, #1
 801c0e0:	2c01      	cmp	r4, #1
 801c0e2:	d19e      	bne.n	801c022 <_FillRect+0x1e>
 801c0e4:	2e00      	cmp	r6, #0
 801c0e6:	d09c      	beq.n	801c022 <_FillRect+0x1e>
 801c0e8:	9b02      	ldr	r3, [sp, #8]
 801c0ea:	009c      	lsls	r4, r3, #2
 801c0ec:	6811      	ldr	r1, [r2, #0]
 801c0ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0f2:	3801      	subs	r0, #1
 801c0f4:	ea83 0301 	eor.w	r3, r3, r1
 801c0f8:	6013      	str	r3, [r2, #0]
 801c0fa:	4422      	add	r2, r4
 801c0fc:	d1f6      	bne.n	801c0ec <_FillRect+0xe8>
 801c0fe:	e790      	b.n	801c022 <_FillRect+0x1e>
 801c100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c102:	f015 0501 	ands.w	r5, r5, #1
 801c106:	f8d3 e000 	ldr.w	lr, [r3]
 801c10a:	d014      	beq.n	801c136 <_FillRect+0x132>
 801c10c:	2e00      	cmp	r6, #0
 801c10e:	f000 80aa 	beq.w	801c266 <_FillRect+0x262>
 801c112:	9b02      	ldr	r3, [sp, #8]
 801c114:	4637      	mov	r7, r6
 801c116:	4614      	mov	r4, r2
 801c118:	0099      	lsls	r1, r3, #2
 801c11a:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801c11e:	8825      	ldrh	r5, [r4, #0]
 801c120:	3f01      	subs	r7, #1
 801c122:	ea45 0503 	orr.w	r5, r5, r3
 801c126:	6025      	str	r5, [r4, #0]
 801c128:	440c      	add	r4, r1
 801c12a:	d1f8      	bne.n	801c11e <_FillRect+0x11a>
 801c12c:	fb01 2506 	mla	r5, r1, r6, r2
 801c130:	3204      	adds	r2, #4
 801c132:	4664      	mov	r4, ip
 801c134:	e001      	b.n	801c13a <_FillRect+0x136>
 801c136:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801c13a:	2c0f      	cmp	r4, #15
 801c13c:	4473      	add	r3, lr
 801c13e:	dd39      	ble.n	801c1b4 <_FillRect+0x1b0>
 801c140:	f1a4 0810 	sub.w	r8, r4, #16
 801c144:	2e00      	cmp	r6, #0
 801c146:	f000 8094 	beq.w	801c272 <_FillRect+0x26e>
 801c14a:	9902      	ldr	r1, [sp, #8]
 801c14c:	ea4f 0981 	mov.w	r9, r1, lsl #2
 801c150:	9903      	ldr	r1, [sp, #12]
 801c152:	fb01 fa09 	mul.w	sl, r1, r9
 801c156:	f1c9 0b00 	rsb	fp, r9, #0
 801c15a:	f10a 0720 	add.w	r7, sl, #32
 801c15e:	4417      	add	r7, r2
 801c160:	4639      	mov	r1, r7
 801c162:	4637      	mov	r7, r6
 801c164:	468c      	mov	ip, r1
 801c166:	3f01      	subs	r7, #1
 801c168:	4661      	mov	r1, ip
 801c16a:	4645      	mov	r5, r8
 801c16c:	3d10      	subs	r5, #16
 801c16e:	f841 3c20 	str.w	r3, [r1, #-32]
 801c172:	f841 3c1c 	str.w	r3, [r1, #-28]
 801c176:	f101 0120 	add.w	r1, r1, #32
 801c17a:	f841 3c38 	str.w	r3, [r1, #-56]
 801c17e:	f841 3c34 	str.w	r3, [r1, #-52]
 801c182:	f841 3c30 	str.w	r3, [r1, #-48]
 801c186:	f841 3c2c 	str.w	r3, [r1, #-44]
 801c18a:	f841 3c28 	str.w	r3, [r1, #-40]
 801c18e:	f841 3c24 	str.w	r3, [r1, #-36]
 801c192:	d5eb      	bpl.n	801c16c <_FillRect+0x168>
 801c194:	ebc9 0c0c 	rsb	ip, r9, ip
 801c198:	2f00      	cmp	r7, #0
 801c19a:	d1e4      	bne.n	801c166 <_FillRect+0x162>
 801c19c:	ea4f 1118 	mov.w	r1, r8, lsr #4
 801c1a0:	9d03      	ldr	r5, [sp, #12]
 801c1a2:	3101      	adds	r1, #1
 801c1a4:	fb05 aa0b 	mla	sl, r5, fp, sl
 801c1a8:	eb0a 1141 	add.w	r1, sl, r1, lsl #5
 801c1ac:	440a      	add	r2, r1
 801c1ae:	f004 040f 	and.w	r4, r4, #15
 801c1b2:	4615      	mov	r5, r2
 801c1b4:	2c01      	cmp	r4, #1
 801c1b6:	dd3f      	ble.n	801c238 <_FillRect+0x234>
 801c1b8:	2e00      	cmp	r6, #0
 801c1ba:	d052      	beq.n	801c262 <_FillRect+0x25e>
 801c1bc:	9902      	ldr	r1, [sp, #8]
 801c1be:	1ea7      	subs	r7, r4, #2
 801c1c0:	f1a4 0b04 	sub.w	fp, r4, #4
 801c1c4:	f1a4 0a06 	sub.w	sl, r4, #6
 801c1c8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 801c1cc:	9903      	ldr	r1, [sp, #12]
 801c1ce:	f1a4 0908 	sub.w	r9, r4, #8
 801c1d2:	f1a4 080a 	sub.w	r8, r4, #10
 801c1d6:	fb01 f10c 	mul.w	r1, r1, ip
 801c1da:	f1cc 0500 	rsb	r5, ip, #0
 801c1de:	9105      	str	r1, [sp, #20]
 801c1e0:	1851      	adds	r1, r2, r1
 801c1e2:	9504      	str	r5, [sp, #16]
 801c1e4:	4635      	mov	r5, r6
 801c1e6:	2f01      	cmp	r7, #1
 801c1e8:	f105 35ff 	add.w	r5, r5, #4294967295
 801c1ec:	600b      	str	r3, [r1, #0]
 801c1ee:	dd13      	ble.n	801c218 <_FillRect+0x214>
 801c1f0:	f1bb 0f01 	cmp.w	fp, #1
 801c1f4:	604b      	str	r3, [r1, #4]
 801c1f6:	dd0f      	ble.n	801c218 <_FillRect+0x214>
 801c1f8:	f1ba 0f01 	cmp.w	sl, #1
 801c1fc:	608b      	str	r3, [r1, #8]
 801c1fe:	dd0b      	ble.n	801c218 <_FillRect+0x214>
 801c200:	f1b9 0f01 	cmp.w	r9, #1
 801c204:	60cb      	str	r3, [r1, #12]
 801c206:	dd07      	ble.n	801c218 <_FillRect+0x214>
 801c208:	f1b8 0f01 	cmp.w	r8, #1
 801c20c:	610b      	str	r3, [r1, #16]
 801c20e:	dd03      	ble.n	801c218 <_FillRect+0x214>
 801c210:	2c0d      	cmp	r4, #13
 801c212:	614b      	str	r3, [r1, #20]
 801c214:	dd00      	ble.n	801c218 <_FillRect+0x214>
 801c216:	618b      	str	r3, [r1, #24]
 801c218:	ebcc 0101 	rsb	r1, ip, r1
 801c21c:	2d00      	cmp	r5, #0
 801c21e:	d1e2      	bne.n	801c1e6 <_FillRect+0x1e2>
 801c220:	087b      	lsrs	r3, r7, #1
 801c222:	9904      	ldr	r1, [sp, #16]
 801c224:	9d03      	ldr	r5, [sp, #12]
 801c226:	9f05      	ldr	r7, [sp, #20]
 801c228:	3301      	adds	r3, #1
 801c22a:	fb05 7101 	mla	r1, r5, r1, r7
 801c22e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c232:	441a      	add	r2, r3
 801c234:	f004 0401 	and.w	r4, r4, #1
 801c238:	2c01      	cmp	r4, #1
 801c23a:	f47f aef2 	bne.w	801c022 <_FillRect+0x1e>
 801c23e:	2e00      	cmp	r6, #0
 801c240:	f43f aeef 	beq.w	801c022 <_FillRect+0x1e>
 801c244:	9b02      	ldr	r3, [sp, #8]
 801c246:	0099      	lsls	r1, r3, #2
 801c248:	6814      	ldr	r4, [r2, #0]
 801c24a:	3801      	subs	r0, #1
 801c24c:	4b0b      	ldr	r3, [pc, #44]	; (801c27c <_FillRect+0x278>)
 801c24e:	ea03 0304 	and.w	r3, r3, r4
 801c252:	ea4e 0303 	orr.w	r3, lr, r3
 801c256:	6013      	str	r3, [r2, #0]
 801c258:	440a      	add	r2, r1
 801c25a:	d1f5      	bne.n	801c248 <_FillRect+0x244>
 801c25c:	e6e1      	b.n	801c022 <_FillRect+0x1e>
 801c25e:	463a      	mov	r2, r7
 801c260:	e73c      	b.n	801c0dc <_FillRect+0xd8>
 801c262:	462a      	mov	r2, r5
 801c264:	e7e6      	b.n	801c234 <_FillRect+0x230>
 801c266:	4615      	mov	r5, r2
 801c268:	ea4f 430e 	mov.w	r3, lr, lsl #16
 801c26c:	e760      	b.n	801c130 <_FillRect+0x12c>
 801c26e:	4617      	mov	r7, r2
 801c270:	e709      	b.n	801c086 <_FillRect+0x82>
 801c272:	462a      	mov	r2, r5
 801c274:	e79b      	b.n	801c1ae <_FillRect+0x1aa>
 801c276:	bf00      	nop
 801c278:	20000018 	.word	0x20000018
 801c27c:	ffff0000 	.word	0xffff0000

0801c280 <_DrawHLine>:
 801c280:	b500      	push	{lr}
 801c282:	b083      	sub	sp, #12
 801c284:	9200      	str	r2, [sp, #0]
 801c286:	f7ff febd 	bl	801c004 <_FillRect>
 801c28a:	b003      	add	sp, #12
 801c28c:	f85d fb04 	ldr.w	pc, [sp], #4

0801c290 <_DrawVLine>:
 801c290:	b500      	push	{lr}
 801c292:	b083      	sub	sp, #12
 801c294:	9300      	str	r3, [sp, #0]
 801c296:	460b      	mov	r3, r1
 801c298:	f7ff feb4 	bl	801c004 <_FillRect>
 801c29c:	b003      	add	sp, #12
 801c29e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c2a2:	bf00      	nop

0801c2a4 <_DrawBitmap>:
 801c2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2a8:	b08b      	sub	sp, #44	; 0x2c
 801c2aa:	460c      	mov	r4, r1
 801c2ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c2ae:	9002      	str	r0, [sp, #8]
 801c2b0:	9303      	str	r3, [sp, #12]
 801c2b2:	1e69      	subs	r1, r5, #1
 801c2b4:	6883      	ldr	r3, [r0, #8]
 801c2b6:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c2b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c2ba:	9000      	str	r0, [sp, #0]
 801c2bc:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c2be:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c2c2:	9001      	str	r0, [sp, #4]
 801c2c4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 801c2c6:	290f      	cmp	r1, #15
 801c2c8:	d837      	bhi.n	801c33a <_DrawBitmap+0x96>
 801c2ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 801c2ce:	0039      	.short	0x0039
 801c2d0:	003600ab 	.word	0x003600ab
 801c2d4:	003600f7 	.word	0x003600f7
 801c2d8:	00360036 	.word	0x00360036
 801c2dc:	00360144 	.word	0x00360144
 801c2e0:	00360036 	.word	0x00360036
 801c2e4:	00360036 	.word	0x00360036
 801c2e8:	00360036 	.word	0x00360036
 801c2ec:	0010      	.short	0x0010
 801c2ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801c2f0:	b12d      	cbz	r5, 801c2fe <_DrawBitmap+0x5a>
 801c2f2:	49be      	ldr	r1, [pc, #760]	; (801c5ec <_DrawBitmap+0x348>)
 801c2f4:	6809      	ldr	r1, [r1, #0]
 801c2f6:	7c09      	ldrb	r1, [r1, #16]
 801c2f8:	07c9      	lsls	r1, r1, #31
 801c2fa:	f140 8354 	bpl.w	801c9a6 <_DrawBitmap+0x702>
 801c2fe:	2e00      	cmp	r6, #0
 801c300:	dd1b      	ble.n	801c33a <_DrawBitmap+0x96>
 801c302:	4615      	mov	r5, r2
 801c304:	9a03      	ldr	r2, [sp, #12]
 801c306:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 801c5f0 <_DrawBitmap+0x34c>
 801c30a:	0057      	lsls	r7, r2, #1
 801c30c:	442e      	add	r6, r5
 801c30e:	f8dd b008 	ldr.w	fp, [sp, #8]
 801c312:	f8dd 9000 	ldr.w	r9, [sp]
 801c316:	e001      	b.n	801c31c <_DrawBitmap+0x78>
 801c318:	f8db 3008 	ldr.w	r3, [fp, #8]
 801c31c:	6a18      	ldr	r0, [r3, #32]
 801c31e:	4641      	mov	r1, r8
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	463a      	mov	r2, r7
 801c324:	fb00 4005 	mla	r0, r0, r5, r4
 801c328:	3501      	adds	r5, #1
 801c32a:	44c8      	add	r8, r9
 801c32c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801c330:	f8da 3000 	ldr.w	r3, [sl]
 801c334:	4798      	blx	r3
 801c336:	42b5      	cmp	r5, r6
 801c338:	d1ee      	bne.n	801c318 <_DrawBitmap+0x74>
 801c33a:	b00b      	add	sp, #44	; 0x2c
 801c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c340:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801c342:	b12f      	cbz	r7, 801c350 <_DrawBitmap+0xac>
 801c344:	49a9      	ldr	r1, [pc, #676]	; (801c5ec <_DrawBitmap+0x348>)
 801c346:	6809      	ldr	r1, [r1, #0]
 801c348:	7c09      	ldrb	r1, [r1, #16]
 801c34a:	07c9      	lsls	r1, r1, #31
 801c34c:	f140 831a 	bpl.w	801c984 <_DrawBitmap+0x6e0>
 801c350:	2e00      	cmp	r6, #0
 801c352:	ddf2      	ble.n	801c33a <_DrawBitmap+0x96>
 801c354:	9901      	ldr	r1, [sp, #4]
 801c356:	4699      	mov	r9, r3
 801c358:	4613      	mov	r3, r2
 801c35a:	18b2      	adds	r2, r6, r2
 801c35c:	1860      	adds	r0, r4, r1
 801c35e:	f1c1 0108 	rsb	r1, r1, #8
 801c362:	9204      	str	r2, [sp, #16]
 801c364:	469a      	mov	sl, r3
 801c366:	4aa1      	ldr	r2, [pc, #644]	; (801c5ec <_DrawBitmap+0x348>)
 801c368:	464e      	mov	r6, r9
 801c36a:	9108      	str	r1, [sp, #32]
 801c36c:	4629      	mov	r1, r5
 801c36e:	f8df b284 	ldr.w	fp, [pc, #644]	; 801c5f4 <_DrawBitmap+0x350>
 801c372:	4613      	mov	r3, r2
 801c374:	9005      	str	r0, [sp, #20]
 801c376:	9206      	str	r2, [sp, #24]
 801c378:	9507      	str	r5, [sp, #28]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f898 2000 	ldrb.w	r2, [r8]
 801c380:	7c1b      	ldrb	r3, [r3, #16]
 801c382:	f81b 4002 	ldrb.w	r4, [fp, r2]
 801c386:	f003 0303 	and.w	r3, r3, #3
 801c38a:	9a01      	ldr	r2, [sp, #4]
 801c38c:	6a35      	ldr	r5, [r6, #32]
 801c38e:	4114      	asrs	r4, r2
 801c390:	2b02      	cmp	r3, #2
 801c392:	9a05      	ldr	r2, [sp, #20]
 801c394:	6848      	ldr	r0, [r1, #4]
 801c396:	fb05 250a 	mla	r5, r5, sl, r2
 801c39a:	f000 81b4 	beq.w	801c706 <_DrawBitmap+0x462>
 801c39e:	2b03      	cmp	r3, #3
 801c3a0:	f000 8191 	beq.w	801c6c6 <_DrawBitmap+0x422>
 801c3a4:	2b01      	cmp	r3, #1
 801c3a6:	f000 818e 	beq.w	801c6c6 <_DrawBitmap+0x422>
 801c3aa:	6833      	ldr	r3, [r6, #0]
 801c3ac:	462a      	mov	r2, r5
 801c3ae:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801c3b2:	46c1      	mov	r9, r8
 801c3b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c3b8:	469a      	mov	sl, r3
 801c3ba:	4665      	mov	r5, ip
 801c3bc:	f8dd e020 	ldr.w	lr, [sp, #32]
 801c3c0:	680e      	ldr	r6, [r1, #0]
 801c3c2:	4694      	mov	ip, r2
 801c3c4:	4575      	cmp	r5, lr
 801c3c6:	462f      	mov	r7, r5
 801c3c8:	eb0a 024c 	add.w	r2, sl, ip, lsl #1
 801c3cc:	bf28      	it	cs
 801c3ce:	4677      	movcs	r7, lr
 801c3d0:	463b      	mov	r3, r7
 801c3d2:	f014 0f01 	tst.w	r4, #1
 801c3d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c3da:	bf0c      	ite	eq
 801c3dc:	4631      	moveq	r1, r6
 801c3de:	4601      	movne	r1, r0
 801c3e0:	3b01      	subs	r3, #1
 801c3e2:	f822 1b02 	strh.w	r1, [r2], #2
 801c3e6:	d1f4      	bne.n	801c3d2 <_DrawBitmap+0x12e>
 801c3e8:	ebbe 0e07 	subs.w	lr, lr, r7
 801c3ec:	44bc      	add	ip, r7
 801c3ee:	eba5 0507 	sub.w	r5, r5, r7
 801c3f2:	d107      	bne.n	801c404 <_DrawBitmap+0x160>
 801c3f4:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c3f8:	f04f 0e08 	mov.w	lr, #8
 801c3fc:	f109 0901 	add.w	r9, r9, #1
 801c400:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801c404:	2d00      	cmp	r5, #0
 801c406:	d1dd      	bne.n	801c3c4 <_DrawBitmap+0x120>
 801c408:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801c40c:	9b00      	ldr	r3, [sp, #0]
 801c40e:	f10a 0a01 	add.w	sl, sl, #1
 801c412:	4498      	add	r8, r3
 801c414:	9b04      	ldr	r3, [sp, #16]
 801c416:	459a      	cmp	sl, r3
 801c418:	d08f      	beq.n	801c33a <_DrawBitmap+0x96>
 801c41a:	9b02      	ldr	r3, [sp, #8]
 801c41c:	9907      	ldr	r1, [sp, #28]
 801c41e:	689e      	ldr	r6, [r3, #8]
 801c420:	9b06      	ldr	r3, [sp, #24]
 801c422:	e7aa      	b.n	801c37a <_DrawBitmap+0xd6>
 801c424:	2e00      	cmp	r6, #0
 801c426:	dd88      	ble.n	801c33a <_DrawBitmap+0x96>
 801c428:	9901      	ldr	r1, [sp, #4]
 801c42a:	eb06 0b02 	add.w	fp, r6, r2
 801c42e:	486f      	ldr	r0, [pc, #444]	; (801c5ec <_DrawBitmap+0x348>)
 801c430:	1861      	adds	r1, r4, r1
 801c432:	9f03      	ldr	r7, [sp, #12]
 801c434:	6800      	ldr	r0, [r0, #0]
 801c436:	460c      	mov	r4, r1
 801c438:	9104      	str	r1, [sp, #16]
 801c43a:	21c0      	movs	r1, #192	; 0xc0
 801c43c:	9002      	str	r0, [sp, #8]
 801c43e:	4427      	add	r7, r4
 801c440:	9802      	ldr	r0, [sp, #8]
 801c442:	7c04      	ldrb	r4, [r0, #16]
 801c444:	f898 0000 	ldrb.w	r0, [r8]
 801c448:	f014 0403 	ands.w	r4, r4, #3
 801c44c:	f000 809f 	beq.w	801c58e <_DrawBitmap+0x2ea>
 801c450:	2c02      	cmp	r4, #2
 801c452:	d12d      	bne.n	801c4b0 <_DrawBitmap+0x20c>
 801c454:	2d00      	cmp	r5, #0
 801c456:	f000 816e 	beq.w	801c736 <_DrawBitmap+0x492>
 801c45a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c45e:	46c2      	mov	sl, r8
 801c460:	f8dd c010 	ldr.w	ip, [sp, #16]
 801c464:	4691      	mov	r9, r2
 801c466:	e001      	b.n	801c46c <_DrawBitmap+0x1c8>
 801c468:	4567      	cmp	r7, ip
 801c46a:	d020      	beq.n	801c4ae <_DrawBitmap+0x20a>
 801c46c:	f1ce 0603 	rsb	r6, lr, #3
 801c470:	f10e 0e01 	add.w	lr, lr, #1
 801c474:	0076      	lsls	r6, r6, #1
 801c476:	f1c6 0406 	rsb	r4, r6, #6
 801c47a:	fa41 f404 	asr.w	r4, r1, r4
 801c47e:	4004      	ands	r4, r0
 801c480:	40f4      	lsrs	r4, r6
 801c482:	d007      	beq.n	801c494 <_DrawBitmap+0x1f0>
 801c484:	6a1e      	ldr	r6, [r3, #32]
 801c486:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801c48a:	fb06 c609 	mla	r6, r6, r9, ip
 801c48e:	681a      	ldr	r2, [r3, #0]
 801c490:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 801c494:	f1be 0f04 	cmp.w	lr, #4
 801c498:	f10c 0c01 	add.w	ip, ip, #1
 801c49c:	d1e4      	bne.n	801c468 <_DrawBitmap+0x1c4>
 801c49e:	4567      	cmp	r7, ip
 801c4a0:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801c4a4:	f04f 0e00 	mov.w	lr, #0
 801c4a8:	f10a 0a01 	add.w	sl, sl, #1
 801c4ac:	d1de      	bne.n	801c46c <_DrawBitmap+0x1c8>
 801c4ae:	464a      	mov	r2, r9
 801c4b0:	3201      	adds	r2, #1
 801c4b2:	9800      	ldr	r0, [sp, #0]
 801c4b4:	455a      	cmp	r2, fp
 801c4b6:	4480      	add	r8, r0
 801c4b8:	d1c2      	bne.n	801c440 <_DrawBitmap+0x19c>
 801c4ba:	e73e      	b.n	801c33a <_DrawBitmap+0x96>
 801c4bc:	2e00      	cmp	r6, #0
 801c4be:	f77f af3c 	ble.w	801c33a <_DrawBitmap+0x96>
 801c4c2:	9901      	ldr	r1, [sp, #4]
 801c4c4:	eb06 0b02 	add.w	fp, r6, r2
 801c4c8:	4848      	ldr	r0, [pc, #288]	; (801c5ec <_DrawBitmap+0x348>)
 801c4ca:	1861      	adds	r1, r4, r1
 801c4cc:	9f03      	ldr	r7, [sp, #12]
 801c4ce:	6800      	ldr	r0, [r0, #0]
 801c4d0:	460c      	mov	r4, r1
 801c4d2:	9104      	str	r1, [sp, #16]
 801c4d4:	21f0      	movs	r1, #240	; 0xf0
 801c4d6:	9002      	str	r0, [sp, #8]
 801c4d8:	4427      	add	r7, r4
 801c4da:	9802      	ldr	r0, [sp, #8]
 801c4dc:	7c04      	ldrb	r4, [r0, #16]
 801c4de:	f898 0000 	ldrb.w	r0, [r8]
 801c4e2:	f014 0403 	ands.w	r4, r4, #3
 801c4e6:	f000 80a3 	beq.w	801c630 <_DrawBitmap+0x38c>
 801c4ea:	2c02      	cmp	r4, #2
 801c4ec:	d12d      	bne.n	801c54a <_DrawBitmap+0x2a6>
 801c4ee:	2d00      	cmp	r5, #0
 801c4f0:	f000 814a 	beq.w	801c788 <_DrawBitmap+0x4e4>
 801c4f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c4f8:	46c2      	mov	sl, r8
 801c4fa:	f8dd c010 	ldr.w	ip, [sp, #16]
 801c4fe:	4691      	mov	r9, r2
 801c500:	e001      	b.n	801c506 <_DrawBitmap+0x262>
 801c502:	4567      	cmp	r7, ip
 801c504:	d020      	beq.n	801c548 <_DrawBitmap+0x2a4>
 801c506:	f1ce 0601 	rsb	r6, lr, #1
 801c50a:	f10e 0e01 	add.w	lr, lr, #1
 801c50e:	00b6      	lsls	r6, r6, #2
 801c510:	f1c6 0404 	rsb	r4, r6, #4
 801c514:	fa41 f404 	asr.w	r4, r1, r4
 801c518:	4004      	ands	r4, r0
 801c51a:	40f4      	lsrs	r4, r6
 801c51c:	d007      	beq.n	801c52e <_DrawBitmap+0x28a>
 801c51e:	6a1e      	ldr	r6, [r3, #32]
 801c520:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801c524:	fb06 c609 	mla	r6, r6, r9, ip
 801c528:	681a      	ldr	r2, [r3, #0]
 801c52a:	f822 4016 	strh.w	r4, [r2, r6, lsl #1]
 801c52e:	f1be 0f02 	cmp.w	lr, #2
 801c532:	f10c 0c01 	add.w	ip, ip, #1
 801c536:	d1e4      	bne.n	801c502 <_DrawBitmap+0x25e>
 801c538:	4567      	cmp	r7, ip
 801c53a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801c53e:	f04f 0e00 	mov.w	lr, #0
 801c542:	f10a 0a01 	add.w	sl, sl, #1
 801c546:	d1de      	bne.n	801c506 <_DrawBitmap+0x262>
 801c548:	464a      	mov	r2, r9
 801c54a:	3201      	adds	r2, #1
 801c54c:	9800      	ldr	r0, [sp, #0]
 801c54e:	455a      	cmp	r2, fp
 801c550:	4480      	add	r8, r0
 801c552:	d1c2      	bne.n	801c4da <_DrawBitmap+0x236>
 801c554:	e6f1      	b.n	801c33a <_DrawBitmap+0x96>
 801c556:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 801c558:	2f00      	cmp	r7, #0
 801c55a:	f000 813e 	beq.w	801c7da <_DrawBitmap+0x536>
 801c55e:	4923      	ldr	r1, [pc, #140]	; (801c5ec <_DrawBitmap+0x348>)
 801c560:	6809      	ldr	r1, [r1, #0]
 801c562:	7c09      	ldrb	r1, [r1, #16]
 801c564:	0788      	lsls	r0, r1, #30
 801c566:	f100 8138 	bmi.w	801c7da <_DrawBitmap+0x536>
 801c56a:	2d00      	cmp	r5, #0
 801c56c:	f000 8135 	beq.w	801c7da <_DrawBitmap+0x536>
 801c570:	9b02      	ldr	r3, [sp, #8]
 801c572:	46bc      	mov	ip, r7
 801c574:	9900      	ldr	r1, [sp, #0]
 801c576:	6998      	ldr	r0, [r3, #24]
 801c578:	4643      	mov	r3, r8
 801c57a:	9116      	str	r1, [sp, #88]	; 0x58
 801c57c:	4621      	mov	r1, r4
 801c57e:	9c03      	ldr	r4, [sp, #12]
 801c580:	9517      	str	r5, [sp, #92]	; 0x5c
 801c582:	9615      	str	r6, [sp, #84]	; 0x54
 801c584:	9414      	str	r4, [sp, #80]	; 0x50
 801c586:	b00b      	add	sp, #44	; 0x2c
 801c588:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c58c:	4760      	bx	ip
 801c58e:	6a1c      	ldr	r4, [r3, #32]
 801c590:	46c1      	mov	r9, r8
 801c592:	681e      	ldr	r6, [r3, #0]
 801c594:	fb04 fa02 	mul.w	sl, r4, r2
 801c598:	9c04      	ldr	r4, [sp, #16]
 801c59a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c59e:	eb04 0c0a 	add.w	ip, r4, sl
 801c5a2:	44ba      	add	sl, r7
 801c5a4:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 801c5a8:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 801c5ac:	b91d      	cbnz	r5, 801c5b6 <_DrawBitmap+0x312>
 801c5ae:	e02c      	b.n	801c60a <_DrawBitmap+0x366>
 801c5b0:	45d4      	cmp	ip, sl
 801c5b2:	f43f af7d 	beq.w	801c4b0 <_DrawBitmap+0x20c>
 801c5b6:	f1ce 0403 	rsb	r4, lr, #3
 801c5ba:	f10e 0e01 	add.w	lr, lr, #1
 801c5be:	0066      	lsls	r6, r4, #1
 801c5c0:	f1be 0f04 	cmp.w	lr, #4
 801c5c4:	f1c6 0406 	rsb	r4, r6, #6
 801c5c8:	fa41 f404 	asr.w	r4, r1, r4
 801c5cc:	ea04 0400 	and.w	r4, r4, r0
 801c5d0:	fa24 f406 	lsr.w	r4, r4, r6
 801c5d4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801c5d8:	f82c 4b02 	strh.w	r4, [ip], #2
 801c5dc:	d1e8      	bne.n	801c5b0 <_DrawBitmap+0x30c>
 801c5de:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c5e2:	f04f 0e00 	mov.w	lr, #0
 801c5e6:	f109 0901 	add.w	r9, r9, #1
 801c5ea:	e7e1      	b.n	801c5b0 <_DrawBitmap+0x30c>
 801c5ec:	20000018 	.word	0x20000018
 801c5f0:	2000004c 	.word	0x2000004c
 801c5f4:	0803473c 	.word	0x0803473c
 801c5f8:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c5fc:	f04f 0e00 	mov.w	lr, #0
 801c600:	f109 0901 	add.w	r9, r9, #1
 801c604:	45d4      	cmp	ip, sl
 801c606:	f43f af53 	beq.w	801c4b0 <_DrawBitmap+0x20c>
 801c60a:	f1ce 0403 	rsb	r4, lr, #3
 801c60e:	f10e 0e01 	add.w	lr, lr, #1
 801c612:	0066      	lsls	r6, r4, #1
 801c614:	f1be 0f04 	cmp.w	lr, #4
 801c618:	f1c6 0406 	rsb	r4, r6, #6
 801c61c:	fa41 f404 	asr.w	r4, r1, r4
 801c620:	ea04 0400 	and.w	r4, r4, r0
 801c624:	fa24 f406 	lsr.w	r4, r4, r6
 801c628:	f82c 4b02 	strh.w	r4, [ip], #2
 801c62c:	d1ea      	bne.n	801c604 <_DrawBitmap+0x360>
 801c62e:	e7e3      	b.n	801c5f8 <_DrawBitmap+0x354>
 801c630:	6a1c      	ldr	r4, [r3, #32]
 801c632:	46c1      	mov	r9, r8
 801c634:	681e      	ldr	r6, [r3, #0]
 801c636:	fb04 fa02 	mul.w	sl, r4, r2
 801c63a:	9c04      	ldr	r4, [sp, #16]
 801c63c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801c640:	eb04 0c0a 	add.w	ip, r4, sl
 801c644:	44ba      	add	sl, r7
 801c646:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 801c64a:	eb06 0a4a 	add.w	sl, r6, sl, lsl #1
 801c64e:	b91d      	cbnz	r5, 801c658 <_DrawBitmap+0x3b4>
 801c650:	e026      	b.n	801c6a0 <_DrawBitmap+0x3fc>
 801c652:	45d4      	cmp	ip, sl
 801c654:	f43f af79 	beq.w	801c54a <_DrawBitmap+0x2a6>
 801c658:	f1ce 0401 	rsb	r4, lr, #1
 801c65c:	f10e 0e01 	add.w	lr, lr, #1
 801c660:	00a6      	lsls	r6, r4, #2
 801c662:	f1be 0f02 	cmp.w	lr, #2
 801c666:	f1c6 0404 	rsb	r4, r6, #4
 801c66a:	fa41 f404 	asr.w	r4, r1, r4
 801c66e:	ea04 0400 	and.w	r4, r4, r0
 801c672:	fa24 f406 	lsr.w	r4, r4, r6
 801c676:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801c67a:	f82c 4b02 	strh.w	r4, [ip], #2
 801c67e:	d1e8      	bne.n	801c652 <_DrawBitmap+0x3ae>
 801c680:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c684:	f04f 0e00 	mov.w	lr, #0
 801c688:	f109 0901 	add.w	r9, r9, #1
 801c68c:	e7e1      	b.n	801c652 <_DrawBitmap+0x3ae>
 801c68e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c692:	f04f 0e00 	mov.w	lr, #0
 801c696:	f109 0901 	add.w	r9, r9, #1
 801c69a:	45d4      	cmp	ip, sl
 801c69c:	f43f af55 	beq.w	801c54a <_DrawBitmap+0x2a6>
 801c6a0:	f1ce 0401 	rsb	r4, lr, #1
 801c6a4:	f10e 0e01 	add.w	lr, lr, #1
 801c6a8:	00a6      	lsls	r6, r4, #2
 801c6aa:	f1be 0f02 	cmp.w	lr, #2
 801c6ae:	f1c6 0404 	rsb	r4, r6, #4
 801c6b2:	fa41 f404 	asr.w	r4, r1, r4
 801c6b6:	ea04 0400 	and.w	r4, r4, r0
 801c6ba:	fa24 f406 	lsr.w	r4, r4, r6
 801c6be:	f82c 4b02 	strh.w	r4, [ip], #2
 801c6c2:	d1ea      	bne.n	801c69a <_DrawBitmap+0x3f6>
 801c6c4:	e7e3      	b.n	801c68e <_DrawBitmap+0x3ea>
 801c6c6:	9b02      	ldr	r3, [sp, #8]
 801c6c8:	691b      	ldr	r3, [r3, #16]
 801c6ca:	689b      	ldr	r3, [r3, #8]
 801c6cc:	4798      	blx	r3
 801c6ce:	9b03      	ldr	r3, [sp, #12]
 801c6d0:	4641      	mov	r1, r8
 801c6d2:	eb03 0e05 	add.w	lr, r3, r5
 801c6d6:	006d      	lsls	r5, r5, #1
 801c6d8:	9b08      	ldr	r3, [sp, #32]
 801c6da:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 801c6de:	f014 0f01 	tst.w	r4, #1
 801c6e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c6e6:	d003      	beq.n	801c6f0 <_DrawBitmap+0x44c>
 801c6e8:	6837      	ldr	r7, [r6, #0]
 801c6ea:	5bea      	ldrh	r2, [r5, r7]
 801c6ec:	4042      	eors	r2, r0
 801c6ee:	53ea      	strh	r2, [r5, r7]
 801c6f0:	3b01      	subs	r3, #1
 801c6f2:	d104      	bne.n	801c6fe <_DrawBitmap+0x45a>
 801c6f4:	784a      	ldrb	r2, [r1, #1]
 801c6f6:	2308      	movs	r3, #8
 801c6f8:	3101      	adds	r1, #1
 801c6fa:	f81b 4002 	ldrb.w	r4, [fp, r2]
 801c6fe:	3502      	adds	r5, #2
 801c700:	4575      	cmp	r5, lr
 801c702:	d1ec      	bne.n	801c6de <_DrawBitmap+0x43a>
 801c704:	e682      	b.n	801c40c <_DrawBitmap+0x168>
 801c706:	9b03      	ldr	r3, [sp, #12]
 801c708:	4641      	mov	r1, r8
 801c70a:	9a08      	ldr	r2, [sp, #32]
 801c70c:	195f      	adds	r7, r3, r5
 801c70e:	006d      	lsls	r5, r5, #1
 801c710:	007f      	lsls	r7, r7, #1
 801c712:	f014 0f01 	tst.w	r4, #1
 801c716:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801c71a:	d001      	beq.n	801c720 <_DrawBitmap+0x47c>
 801c71c:	6833      	ldr	r3, [r6, #0]
 801c71e:	5358      	strh	r0, [r3, r5]
 801c720:	3a01      	subs	r2, #1
 801c722:	d104      	bne.n	801c72e <_DrawBitmap+0x48a>
 801c724:	784b      	ldrb	r3, [r1, #1]
 801c726:	2208      	movs	r2, #8
 801c728:	3101      	adds	r1, #1
 801c72a:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801c72e:	3502      	adds	r5, #2
 801c730:	42af      	cmp	r7, r5
 801c732:	d1ee      	bne.n	801c712 <_DrawBitmap+0x46e>
 801c734:	e66a      	b.n	801c40c <_DrawBitmap+0x168>
 801c736:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c73a:	46c2      	mov	sl, r8
 801c73c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c740:	46ae      	mov	lr, r5
 801c742:	e001      	b.n	801c748 <_DrawBitmap+0x4a4>
 801c744:	454f      	cmp	r7, r9
 801c746:	d01d      	beq.n	801c784 <_DrawBitmap+0x4e0>
 801c748:	f1cc 0603 	rsb	r6, ip, #3
 801c74c:	f10c 0c01 	add.w	ip, ip, #1
 801c750:	0076      	lsls	r6, r6, #1
 801c752:	f1c6 0406 	rsb	r4, r6, #6
 801c756:	fa41 f404 	asr.w	r4, r1, r4
 801c75a:	4004      	ands	r4, r0
 801c75c:	40f4      	lsrs	r4, r6
 801c75e:	d005      	beq.n	801c76c <_DrawBitmap+0x4c8>
 801c760:	6a1e      	ldr	r6, [r3, #32]
 801c762:	681d      	ldr	r5, [r3, #0]
 801c764:	fb06 9602 	mla	r6, r6, r2, r9
 801c768:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801c76c:	f1bc 0f04 	cmp.w	ip, #4
 801c770:	f109 0901 	add.w	r9, r9, #1
 801c774:	d1e6      	bne.n	801c744 <_DrawBitmap+0x4a0>
 801c776:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801c77a:	f04f 0c00 	mov.w	ip, #0
 801c77e:	f10a 0a01 	add.w	sl, sl, #1
 801c782:	e7df      	b.n	801c744 <_DrawBitmap+0x4a0>
 801c784:	4675      	mov	r5, lr
 801c786:	e693      	b.n	801c4b0 <_DrawBitmap+0x20c>
 801c788:	f8dd c004 	ldr.w	ip, [sp, #4]
 801c78c:	46c2      	mov	sl, r8
 801c78e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801c792:	46ae      	mov	lr, r5
 801c794:	e001      	b.n	801c79a <_DrawBitmap+0x4f6>
 801c796:	454f      	cmp	r7, r9
 801c798:	d01d      	beq.n	801c7d6 <_DrawBitmap+0x532>
 801c79a:	f1cc 0601 	rsb	r6, ip, #1
 801c79e:	f10c 0c01 	add.w	ip, ip, #1
 801c7a2:	00b6      	lsls	r6, r6, #2
 801c7a4:	f1c6 0404 	rsb	r4, r6, #4
 801c7a8:	fa41 f404 	asr.w	r4, r1, r4
 801c7ac:	4004      	ands	r4, r0
 801c7ae:	40f4      	lsrs	r4, r6
 801c7b0:	d005      	beq.n	801c7be <_DrawBitmap+0x51a>
 801c7b2:	6a1e      	ldr	r6, [r3, #32]
 801c7b4:	681d      	ldr	r5, [r3, #0]
 801c7b6:	fb06 9602 	mla	r6, r6, r2, r9
 801c7ba:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 801c7be:	f1bc 0f02 	cmp.w	ip, #2
 801c7c2:	f109 0901 	add.w	r9, r9, #1
 801c7c6:	d1e6      	bne.n	801c796 <_DrawBitmap+0x4f2>
 801c7c8:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801c7cc:	f04f 0c00 	mov.w	ip, #0
 801c7d0:	f10a 0a01 	add.w	sl, sl, #1
 801c7d4:	e7df      	b.n	801c796 <_DrawBitmap+0x4f2>
 801c7d6:	4675      	mov	r5, lr
 801c7d8:	e6b7      	b.n	801c54a <_DrawBitmap+0x2a6>
 801c7da:	2e00      	cmp	r6, #0
 801c7dc:	f77f adad 	ble.w	801c33a <_DrawBitmap+0x96>
 801c7e0:	9803      	ldr	r0, [sp, #12]
 801c7e2:	4416      	add	r6, r2
 801c7e4:	4f77      	ldr	r7, [pc, #476]	; (801c9c4 <_DrawBitmap+0x720>)
 801c7e6:	f1a0 0108 	sub.w	r1, r0, #8
 801c7ea:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 801c7ee:	f8d7 e000 	ldr.w	lr, [r7]
 801c7f2:	08c8      	lsrs	r0, r1, #3
 801c7f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801c7f8:	f8cd a014 	str.w	sl, [sp, #20]
 801c7fc:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 801c800:	1c47      	adds	r7, r0, #1
 801c802:	eba1 0bc0 	sub.w	fp, r1, r0, lsl #3
 801c806:	f10c 0020 	add.w	r0, ip, #32
 801c80a:	f8dd c000 	ldr.w	ip, [sp]
 801c80e:	f8cd b018 	str.w	fp, [sp, #24]
 801c812:	9004      	str	r0, [sp, #16]
 801c814:	00f8      	lsls	r0, r7, #3
 801c816:	9001      	str	r0, [sp, #4]
 801c818:	0138      	lsls	r0, r7, #4
 801c81a:	9002      	str	r0, [sp, #8]
 801c81c:	b1f5      	cbz	r5, 801c85c <_DrawBitmap+0x5b8>
 801c81e:	6a18      	ldr	r0, [r3, #32]
 801c820:	f89e a010 	ldrb.w	sl, [lr, #16]
 801c824:	681f      	ldr	r7, [r3, #0]
 801c826:	fb00 4102 	mla	r1, r0, r2, r4
 801c82a:	f01a 0a03 	ands.w	sl, sl, #3
 801c82e:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 801c832:	d01a      	beq.n	801c86a <_DrawBitmap+0x5c6>
 801c834:	f1ba 0f02 	cmp.w	sl, #2
 801c838:	d110      	bne.n	801c85c <_DrawBitmap+0x5b8>
 801c83a:	f1b9 0f00 	cmp.w	r9, #0
 801c83e:	dd0d      	ble.n	801c85c <_DrawBitmap+0x5b8>
 801c840:	9805      	ldr	r0, [sp, #20]
 801c842:	f108 37ff 	add.w	r7, r8, #4294967295
 801c846:	eb01 0a00 	add.w	sl, r1, r0
 801c84a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 801c84e:	b110      	cbz	r0, 801c856 <_DrawBitmap+0x5b2>
 801c850:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c854:	8008      	strh	r0, [r1, #0]
 801c856:	3102      	adds	r1, #2
 801c858:	4551      	cmp	r1, sl
 801c85a:	d1f6      	bne.n	801c84a <_DrawBitmap+0x5a6>
 801c85c:	3201      	adds	r2, #1
 801c85e:	44e0      	add	r8, ip
 801c860:	42b2      	cmp	r2, r6
 801c862:	d1db      	bne.n	801c81c <_DrawBitmap+0x578>
 801c864:	b00b      	add	sp, #44	; 0x2c
 801c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c86a:	f1b9 0f07 	cmp.w	r9, #7
 801c86e:	f340 8086 	ble.w	801c97e <_DrawBitmap+0x6da>
 801c872:	f101 0010 	add.w	r0, r1, #16
 801c876:	f108 0708 	add.w	r7, r8, #8
 801c87a:	469a      	mov	sl, r3
 801c87c:	9000      	str	r0, [sp, #0]
 801c87e:	9804      	ldr	r0, [sp, #16]
 801c880:	eb00 0b01 	add.w	fp, r0, r1
 801c884:	9800      	ldr	r0, [sp, #0]
 801c886:	f817 3c08 	ldrb.w	r3, [r7, #-8]
 801c88a:	3010      	adds	r0, #16
 801c88c:	3708      	adds	r7, #8
 801c88e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c892:	f820 3c20 	strh.w	r3, [r0, #-32]
 801c896:	f817 3c0f 	ldrb.w	r3, [r7, #-15]
 801c89a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c89e:	f820 3c1e 	strh.w	r3, [r0, #-30]
 801c8a2:	f817 3c0e 	ldrb.w	r3, [r7, #-14]
 801c8a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8aa:	f820 3c1c 	strh.w	r3, [r0, #-28]
 801c8ae:	f817 3c0d 	ldrb.w	r3, [r7, #-13]
 801c8b2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8b6:	f820 3c1a 	strh.w	r3, [r0, #-26]
 801c8ba:	f817 3c0c 	ldrb.w	r3, [r7, #-12]
 801c8be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8c2:	f820 3c18 	strh.w	r3, [r0, #-24]
 801c8c6:	f817 3c0b 	ldrb.w	r3, [r7, #-11]
 801c8ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8ce:	f820 3c16 	strh.w	r3, [r0, #-22]
 801c8d2:	f817 3c0a 	ldrb.w	r3, [r7, #-10]
 801c8d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8da:	f820 3c14 	strh.w	r3, [r0, #-20]
 801c8de:	f817 3c09 	ldrb.w	r3, [r7, #-9]
 801c8e2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c8e6:	f820 3c12 	strh.w	r3, [r0, #-18]
 801c8ea:	4583      	cmp	fp, r0
 801c8ec:	d1cb      	bne.n	801c886 <_DrawBitmap+0x5e2>
 801c8ee:	9802      	ldr	r0, [sp, #8]
 801c8f0:	4653      	mov	r3, sl
 801c8f2:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c8f6:	4401      	add	r1, r0
 801c8f8:	9801      	ldr	r0, [sp, #4]
 801c8fa:	4440      	add	r0, r8
 801c8fc:	f1ba 0f03 	cmp.w	sl, #3
 801c900:	dd21      	ble.n	801c946 <_DrawBitmap+0x6a2>
 801c902:	7807      	ldrb	r7, [r0, #0]
 801c904:	f1aa 0a04 	sub.w	sl, sl, #4
 801c908:	f855 b027 	ldr.w	fp, [r5, r7, lsl #2]
 801c90c:	ea4f 079a 	mov.w	r7, sl, lsr #2
 801c910:	f8a1 b000 	strh.w	fp, [r1]
 801c914:	ebaa 0a87 	sub.w	sl, sl, r7, lsl #2
 801c918:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c91c:	3701      	adds	r7, #1
 801c91e:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c922:	f8a1 b002 	strh.w	fp, [r1, #2]
 801c926:	f890 b002 	ldrb.w	fp, [r0, #2]
 801c92a:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c92e:	f8a1 b004 	strh.w	fp, [r1, #4]
 801c932:	f890 b003 	ldrb.w	fp, [r0, #3]
 801c936:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801c93a:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 801c93e:	f8a1 b006 	strh.w	fp, [r1, #6]
 801c942:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 801c946:	f1ba 0f00 	cmp.w	sl, #0
 801c94a:	d087      	beq.n	801c85c <_DrawBitmap+0x5b8>
 801c94c:	7807      	ldrb	r7, [r0, #0]
 801c94e:	f1ba 0f01 	cmp.w	sl, #1
 801c952:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801c956:	800f      	strh	r7, [r1, #0]
 801c958:	d080      	beq.n	801c85c <_DrawBitmap+0x5b8>
 801c95a:	7847      	ldrb	r7, [r0, #1]
 801c95c:	f1ba 0f02 	cmp.w	sl, #2
 801c960:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801c964:	804f      	strh	r7, [r1, #2]
 801c966:	f43f af79 	beq.w	801c85c <_DrawBitmap+0x5b8>
 801c96a:	7880      	ldrb	r0, [r0, #2]
 801c96c:	3201      	adds	r2, #1
 801c96e:	44e0      	add	r8, ip
 801c970:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801c974:	42b2      	cmp	r2, r6
 801c976:	8088      	strh	r0, [r1, #4]
 801c978:	f47f af50 	bne.w	801c81c <_DrawBitmap+0x578>
 801c97c:	e772      	b.n	801c864 <_DrawBitmap+0x5c0>
 801c97e:	46ca      	mov	sl, r9
 801c980:	4640      	mov	r0, r8
 801c982:	e7bb      	b.n	801c8fc <_DrawBitmap+0x658>
 801c984:	9b02      	ldr	r3, [sp, #8]
 801c986:	46bc      	mov	ip, r7
 801c988:	9900      	ldr	r1, [sp, #0]
 801c98a:	6998      	ldr	r0, [r3, #24]
 801c98c:	4643      	mov	r3, r8
 801c98e:	9117      	str	r1, [sp, #92]	; 0x5c
 801c990:	4621      	mov	r1, r4
 801c992:	9c03      	ldr	r4, [sp, #12]
 801c994:	9518      	str	r5, [sp, #96]	; 0x60
 801c996:	9415      	str	r4, [sp, #84]	; 0x54
 801c998:	9c01      	ldr	r4, [sp, #4]
 801c99a:	9616      	str	r6, [sp, #88]	; 0x58
 801c99c:	9414      	str	r4, [sp, #80]	; 0x50
 801c99e:	b00b      	add	sp, #44	; 0x2c
 801c9a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a4:	4760      	bx	ip
 801c9a6:	9b02      	ldr	r3, [sp, #8]
 801c9a8:	46ac      	mov	ip, r5
 801c9aa:	9900      	ldr	r1, [sp, #0]
 801c9ac:	6998      	ldr	r0, [r3, #24]
 801c9ae:	4643      	mov	r3, r8
 801c9b0:	9116      	str	r1, [sp, #88]	; 0x58
 801c9b2:	9903      	ldr	r1, [sp, #12]
 801c9b4:	9615      	str	r6, [sp, #84]	; 0x54
 801c9b6:	9114      	str	r1, [sp, #80]	; 0x50
 801c9b8:	4621      	mov	r1, r4
 801c9ba:	b00b      	add	sp, #44	; 0x2c
 801c9bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9c0:	4760      	bx	ip
 801c9c2:	bf00      	nop
 801c9c4:	20000018 	.word	0x20000018

0801c9c8 <_Init>:
 801c9c8:	b538      	push	{r3, r4, r5, lr}
 801c9ca:	6884      	ldr	r4, [r0, #8]
 801c9cc:	4605      	mov	r5, r0
 801c9ce:	b14c      	cbz	r4, 801c9e4 <_Init+0x1c>
 801c9d0:	69a8      	ldr	r0, [r5, #24]
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	2101      	movs	r1, #1
 801c9d6:	f7e7 ff99 	bl	800490c <LCD_X_DisplayDriver>
 801c9da:	2c00      	cmp	r4, #0
 801c9dc:	bf08      	it	eq
 801c9de:	f040 0001 	orreq.w	r0, r0, #1
 801c9e2:	bd38      	pop	{r3, r4, r5, pc}
 801c9e4:	2050      	movs	r0, #80	; 0x50
 801c9e6:	f7f6 f8ab 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801c9ea:	4621      	mov	r1, r4
 801c9ec:	60a8      	str	r0, [r5, #8]
 801c9ee:	2250      	movs	r2, #80	; 0x50
 801c9f0:	f7fc ffd4 	bl	801999c <GUI__memset>
 801c9f4:	68ac      	ldr	r4, [r5, #8]
 801c9f6:	e7eb      	b.n	801c9d0 <_Init+0x8>

0801c9f8 <_SetVRAM_BufferPTR>:
 801c9f8:	b570      	push	{r4, r5, r6, lr}
 801c9fa:	6884      	ldr	r4, [r0, #8]
 801c9fc:	460d      	mov	r5, r1
 801c9fe:	b11c      	cbz	r4, 801ca08 <_SetVRAM_BufferPTR+0x10>
 801ca00:	682b      	ldr	r3, [r5, #0]
 801ca02:	60a5      	str	r5, [r4, #8]
 801ca04:	6023      	str	r3, [r4, #0]
 801ca06:	bd70      	pop	{r4, r5, r6, pc}
 801ca08:	4606      	mov	r6, r0
 801ca0a:	2050      	movs	r0, #80	; 0x50
 801ca0c:	f7f6 f898 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ca10:	4621      	mov	r1, r4
 801ca12:	60b0      	str	r0, [r6, #8]
 801ca14:	2250      	movs	r2, #80	; 0x50
 801ca16:	f7fc ffc1 	bl	801999c <GUI__memset>
 801ca1a:	68b4      	ldr	r4, [r6, #8]
 801ca1c:	2c00      	cmp	r4, #0
 801ca1e:	d1ef      	bne.n	801ca00 <_SetVRAM_BufferPTR+0x8>
 801ca20:	bd70      	pop	{r4, r5, r6, pc}
 801ca22:	bf00      	nop

0801ca24 <_GetPos>:
 801ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca26:	6884      	ldr	r4, [r0, #8]
 801ca28:	460f      	mov	r7, r1
 801ca2a:	4616      	mov	r6, r2
 801ca2c:	b124      	cbz	r4, 801ca38 <_GetPos+0x14>
 801ca2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca30:	603b      	str	r3, [r7, #0]
 801ca32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ca34:	6033      	str	r3, [r6, #0]
 801ca36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca38:	4605      	mov	r5, r0
 801ca3a:	2050      	movs	r0, #80	; 0x50
 801ca3c:	f7f6 f880 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ca40:	4621      	mov	r1, r4
 801ca42:	60a8      	str	r0, [r5, #8]
 801ca44:	2250      	movs	r2, #80	; 0x50
 801ca46:	f7fc ffa9 	bl	801999c <GUI__memset>
 801ca4a:	68ac      	ldr	r4, [r5, #8]
 801ca4c:	2c00      	cmp	r4, #0
 801ca4e:	d1ee      	bne.n	801ca2e <_GetPos+0xa>
 801ca50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca52:	bf00      	nop

0801ca54 <_ShowBuffer>:
 801ca54:	b570      	push	{r4, r5, r6, lr}
 801ca56:	2300      	movs	r3, #0
 801ca58:	b082      	sub	sp, #8
 801ca5a:	6885      	ldr	r5, [r0, #8]
 801ca5c:	4604      	mov	r4, r0
 801ca5e:	460e      	mov	r6, r1
 801ca60:	9301      	str	r3, [sp, #4]
 801ca62:	b145      	cbz	r5, 801ca76 <_ShowBuffer+0x22>
 801ca64:	aa02      	add	r2, sp, #8
 801ca66:	210e      	movs	r1, #14
 801ca68:	69a0      	ldr	r0, [r4, #24]
 801ca6a:	f842 6d04 	str.w	r6, [r2, #-4]!
 801ca6e:	f7e7 ff4d 	bl	800490c <LCD_X_DisplayDriver>
 801ca72:	b002      	add	sp, #8
 801ca74:	bd70      	pop	{r4, r5, r6, pc}
 801ca76:	2050      	movs	r0, #80	; 0x50
 801ca78:	f7f6 f862 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ca7c:	4629      	mov	r1, r5
 801ca7e:	60a0      	str	r0, [r4, #8]
 801ca80:	2250      	movs	r2, #80	; 0x50
 801ca82:	f7fc ff8b 	bl	801999c <GUI__memset>
 801ca86:	68a3      	ldr	r3, [r4, #8]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d1eb      	bne.n	801ca64 <_ShowBuffer+0x10>
 801ca8c:	b002      	add	sp, #8
 801ca8e:	bd70      	pop	{r4, r5, r6, pc}

0801ca90 <_SetAlpha>:
 801ca90:	b570      	push	{r4, r5, r6, lr}
 801ca92:	2300      	movs	r3, #0
 801ca94:	b082      	sub	sp, #8
 801ca96:	6884      	ldr	r4, [r0, #8]
 801ca98:	4605      	mov	r5, r0
 801ca9a:	460e      	mov	r6, r1
 801ca9c:	9301      	str	r3, [sp, #4]
 801ca9e:	b14c      	cbz	r4, 801cab4 <_SetAlpha+0x24>
 801caa0:	aa02      	add	r2, sp, #8
 801caa2:	210a      	movs	r1, #10
 801caa4:	62e6      	str	r6, [r4, #44]	; 0x2c
 801caa6:	69a8      	ldr	r0, [r5, #24]
 801caa8:	f842 6d04 	str.w	r6, [r2, #-4]!
 801caac:	f7e7 ff2e 	bl	800490c <LCD_X_DisplayDriver>
 801cab0:	b002      	add	sp, #8
 801cab2:	bd70      	pop	{r4, r5, r6, pc}
 801cab4:	2050      	movs	r0, #80	; 0x50
 801cab6:	f7f6 f843 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801caba:	4621      	mov	r1, r4
 801cabc:	60a8      	str	r0, [r5, #8]
 801cabe:	2250      	movs	r2, #80	; 0x50
 801cac0:	f7fc ff6c 	bl	801999c <GUI__memset>
 801cac4:	68ac      	ldr	r4, [r5, #8]
 801cac6:	2c00      	cmp	r4, #0
 801cac8:	d1ea      	bne.n	801caa0 <_SetAlpha+0x10>
 801caca:	b002      	add	sp, #8
 801cacc:	bd70      	pop	{r4, r5, r6, pc}
 801cace:	bf00      	nop

0801cad0 <_SetVis>:
 801cad0:	b570      	push	{r4, r5, r6, lr}
 801cad2:	2300      	movs	r3, #0
 801cad4:	b082      	sub	sp, #8
 801cad6:	6884      	ldr	r4, [r0, #8]
 801cad8:	4605      	mov	r5, r0
 801cada:	460e      	mov	r6, r1
 801cadc:	9301      	str	r3, [sp, #4]
 801cade:	b14c      	cbz	r4, 801caf4 <_SetVis+0x24>
 801cae0:	aa02      	add	r2, sp, #8
 801cae2:	2109      	movs	r1, #9
 801cae4:	6326      	str	r6, [r4, #48]	; 0x30
 801cae6:	69a8      	ldr	r0, [r5, #24]
 801cae8:	f842 6d04 	str.w	r6, [r2, #-4]!
 801caec:	f7e7 ff0e 	bl	800490c <LCD_X_DisplayDriver>
 801caf0:	b002      	add	sp, #8
 801caf2:	bd70      	pop	{r4, r5, r6, pc}
 801caf4:	2050      	movs	r0, #80	; 0x50
 801caf6:	f7f6 f823 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cafa:	4621      	mov	r1, r4
 801cafc:	60a8      	str	r0, [r5, #8]
 801cafe:	2250      	movs	r2, #80	; 0x50
 801cb00:	f7fc ff4c 	bl	801999c <GUI__memset>
 801cb04:	68ac      	ldr	r4, [r5, #8]
 801cb06:	2c00      	cmp	r4, #0
 801cb08:	d1ea      	bne.n	801cae0 <_SetVis+0x10>
 801cb0a:	b002      	add	sp, #8
 801cb0c:	bd70      	pop	{r4, r5, r6, pc}
 801cb0e:	bf00      	nop

0801cb10 <_SetVRAMAddr>:
 801cb10:	b570      	push	{r4, r5, r6, lr}
 801cb12:	2300      	movs	r3, #0
 801cb14:	b082      	sub	sp, #8
 801cb16:	6884      	ldr	r4, [r0, #8]
 801cb18:	4606      	mov	r6, r0
 801cb1a:	460d      	mov	r5, r1
 801cb1c:	9301      	str	r3, [sp, #4]
 801cb1e:	b154      	cbz	r4, 801cb36 <_SetVRAMAddr+0x26>
 801cb20:	aa02      	add	r2, sp, #8
 801cb22:	2102      	movs	r1, #2
 801cb24:	6025      	str	r5, [r4, #0]
 801cb26:	6065      	str	r5, [r4, #4]
 801cb28:	69b0      	ldr	r0, [r6, #24]
 801cb2a:	f842 5d04 	str.w	r5, [r2, #-4]!
 801cb2e:	f7e7 feed 	bl	800490c <LCD_X_DisplayDriver>
 801cb32:	b002      	add	sp, #8
 801cb34:	bd70      	pop	{r4, r5, r6, pc}
 801cb36:	2050      	movs	r0, #80	; 0x50
 801cb38:	f7f6 f802 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cb3c:	4621      	mov	r1, r4
 801cb3e:	60b0      	str	r0, [r6, #8]
 801cb40:	2250      	movs	r2, #80	; 0x50
 801cb42:	f7fc ff2b 	bl	801999c <GUI__memset>
 801cb46:	68b4      	ldr	r4, [r6, #8]
 801cb48:	2c00      	cmp	r4, #0
 801cb4a:	d1e9      	bne.n	801cb20 <_SetVRAMAddr+0x10>
 801cb4c:	b002      	add	sp, #8
 801cb4e:	bd70      	pop	{r4, r5, r6, pc}

0801cb50 <_SetVSize>:
 801cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb52:	6884      	ldr	r4, [r0, #8]
 801cb54:	4605      	mov	r5, r0
 801cb56:	460e      	mov	r6, r1
 801cb58:	4617      	mov	r7, r2
 801cb5a:	b14c      	cbz	r4, 801cb70 <_SetVSize+0x20>
 801cb5c:	69a8      	ldr	r0, [r5, #24]
 801cb5e:	f7fe f92f 	bl	801adc0 <LCD_GetSwapXYEx>
 801cb62:	61a6      	str	r6, [r4, #24]
 801cb64:	61e7      	str	r7, [r4, #28]
 801cb66:	b908      	cbnz	r0, 801cb6c <_SetVSize+0x1c>
 801cb68:	6226      	str	r6, [r4, #32]
 801cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb6c:	6227      	str	r7, [r4, #32]
 801cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb70:	2050      	movs	r0, #80	; 0x50
 801cb72:	f7f5 ffe5 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cb76:	4621      	mov	r1, r4
 801cb78:	60a8      	str	r0, [r5, #8]
 801cb7a:	2250      	movs	r2, #80	; 0x50
 801cb7c:	f7fc ff0e 	bl	801999c <GUI__memset>
 801cb80:	68ac      	ldr	r4, [r5, #8]
 801cb82:	2c00      	cmp	r4, #0
 801cb84:	d1ea      	bne.n	801cb5c <_SetVSize+0xc>
 801cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cb88 <_SetSize>:
 801cb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb8a:	2300      	movs	r3, #0
 801cb8c:	b083      	sub	sp, #12
 801cb8e:	6884      	ldr	r4, [r0, #8]
 801cb90:	4605      	mov	r5, r0
 801cb92:	460f      	mov	r7, r1
 801cb94:	4616      	mov	r6, r2
 801cb96:	9301      	str	r3, [sp, #4]
 801cb98:	9300      	str	r3, [sp, #0]
 801cb9a:	b1ac      	cbz	r4, 801cbc8 <_SetSize+0x40>
 801cb9c:	6a23      	ldr	r3, [r4, #32]
 801cb9e:	b153      	cbz	r3, 801cbb6 <_SetSize+0x2e>
 801cba0:	466a      	mov	r2, sp
 801cba2:	2107      	movs	r1, #7
 801cba4:	6127      	str	r7, [r4, #16]
 801cba6:	6166      	str	r6, [r4, #20]
 801cba8:	69a8      	ldr	r0, [r5, #24]
 801cbaa:	9700      	str	r7, [sp, #0]
 801cbac:	9601      	str	r6, [sp, #4]
 801cbae:	f7e7 fead 	bl	800490c <LCD_X_DisplayDriver>
 801cbb2:	b003      	add	sp, #12
 801cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbb6:	69a8      	ldr	r0, [r5, #24]
 801cbb8:	f7fe f902 	bl	801adc0 <LCD_GetSwapXYEx>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	bf0c      	ite	eq
 801cbc0:	4638      	moveq	r0, r7
 801cbc2:	4630      	movne	r0, r6
 801cbc4:	6220      	str	r0, [r4, #32]
 801cbc6:	e7eb      	b.n	801cba0 <_SetSize+0x18>
 801cbc8:	2050      	movs	r0, #80	; 0x50
 801cbca:	f7f5 ffb9 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cbce:	4621      	mov	r1, r4
 801cbd0:	60a8      	str	r0, [r5, #8]
 801cbd2:	2250      	movs	r2, #80	; 0x50
 801cbd4:	f7fc fee2 	bl	801999c <GUI__memset>
 801cbd8:	68ac      	ldr	r4, [r5, #8]
 801cbda:	2c00      	cmp	r4, #0
 801cbdc:	d1de      	bne.n	801cb9c <_SetSize+0x14>
 801cbde:	b003      	add	sp, #12
 801cbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbe2:	bf00      	nop

0801cbe4 <_SetDevFunc>:
 801cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe6:	6885      	ldr	r5, [r0, #8]
 801cbe8:	460c      	mov	r4, r1
 801cbea:	4617      	mov	r7, r2
 801cbec:	b325      	cbz	r5, 801cc38 <_SetDevFunc+0x54>
 801cbee:	1ee3      	subs	r3, r4, #3
 801cbf0:	2b22      	cmp	r3, #34	; 0x22
 801cbf2:	d814      	bhi.n	801cc1e <_SetDevFunc+0x3a>
 801cbf4:	e8df f003 	tbb	[pc, r3]
 801cbf8:	13131316 	.word	0x13131316
 801cbfc:	13131313 	.word	0x13131313
 801cc00:	13131313 	.word	0x13131313
 801cc04:	13131313 	.word	0x13131313
 801cc08:	13131313 	.word	0x13131313
 801cc0c:	13181313 	.word	0x13181313
 801cc10:	13131313 	.word	0x13131313
 801cc14:	131c1a13 	.word	0x131c1a13
 801cc18:	121e      	.short	0x121e
 801cc1a:	14          	.byte	0x14
 801cc1b:	00          	.byte	0x00
 801cc1c:	64ef      	str	r7, [r5, #76]	; 0x4c
 801cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc20:	642f      	str	r7, [r5, #64]	; 0x40
 801cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc24:	64af      	str	r7, [r5, #72]	; 0x48
 801cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc28:	636f      	str	r7, [r5, #52]	; 0x34
 801cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc2c:	63ef      	str	r7, [r5, #60]	; 0x3c
 801cc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc30:	63af      	str	r7, [r5, #56]	; 0x38
 801cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc34:	646f      	str	r7, [r5, #68]	; 0x44
 801cc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc38:	4606      	mov	r6, r0
 801cc3a:	2050      	movs	r0, #80	; 0x50
 801cc3c:	f7f5 ff80 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cc40:	4629      	mov	r1, r5
 801cc42:	60b0      	str	r0, [r6, #8]
 801cc44:	2250      	movs	r2, #80	; 0x50
 801cc46:	f7fc fea9 	bl	801999c <GUI__memset>
 801cc4a:	68b5      	ldr	r5, [r6, #8]
 801cc4c:	2d00      	cmp	r5, #0
 801cc4e:	d1ce      	bne.n	801cbee <_SetDevFunc+0xa>
 801cc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc52:	bf00      	nop

0801cc54 <_CopyBuffer>:
 801cc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc58:	6884      	ldr	r4, [r0, #8]
 801cc5a:	4605      	mov	r5, r0
 801cc5c:	460e      	mov	r6, r1
 801cc5e:	4617      	mov	r7, r2
 801cc60:	b33c      	cbz	r4, 801ccb2 <_CopyBuffer+0x5e>
 801cc62:	42be      	cmp	r6, r7
 801cc64:	d01d      	beq.n	801cca2 <_CopyBuffer+0x4e>
 801cc66:	b1e4      	cbz	r4, 801cca2 <_CopyBuffer+0x4e>
 801cc68:	68eb      	ldr	r3, [r5, #12]
 801cc6a:	2108      	movs	r1, #8
 801cc6c:	4628      	mov	r0, r5
 801cc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc70:	4798      	blx	r3
 801cc72:	69a1      	ldr	r1, [r4, #24]
 801cc74:	6963      	ldr	r3, [r4, #20]
 801cc76:	68a2      	ldr	r2, [r4, #8]
 801cc78:	fb03 f301 	mul.w	r3, r3, r1
 801cc7c:	fb00 f003 	mul.w	r0, r0, r3
 801cc80:	08c3      	lsrs	r3, r0, #3
 801cc82:	b182      	cbz	r2, 801cca6 <_CopyBuffer+0x52>
 801cc84:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 801cc88:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 801cc8c:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801cc90:	f1b8 0f00 	cmp.w	r8, #0
 801cc94:	d017      	beq.n	801ccc6 <_CopyBuffer+0x72>
 801cc96:	463a      	mov	r2, r7
 801cc98:	4631      	mov	r1, r6
 801cc9a:	69a8      	ldr	r0, [r5, #24]
 801cc9c:	47c0      	blx	r8
 801cc9e:	f8c4 9000 	str.w	r9, [r4]
 801cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cca6:	6862      	ldr	r2, [r4, #4]
 801cca8:	fb03 2106 	mla	r1, r3, r6, r2
 801ccac:	fb03 2907 	mla	r9, r3, r7, r2
 801ccb0:	e7ec      	b.n	801cc8c <_CopyBuffer+0x38>
 801ccb2:	2050      	movs	r0, #80	; 0x50
 801ccb4:	f7f5 ff44 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ccb8:	4621      	mov	r1, r4
 801ccba:	60a8      	str	r0, [r5, #8]
 801ccbc:	2250      	movs	r2, #80	; 0x50
 801ccbe:	f7fc fe6d 	bl	801999c <GUI__memset>
 801ccc2:	68ac      	ldr	r4, [r5, #8]
 801ccc4:	e7cd      	b.n	801cc62 <_CopyBuffer+0xe>
 801ccc6:	4d03      	ldr	r5, [pc, #12]	; (801ccd4 <_CopyBuffer+0x80>)
 801ccc8:	461a      	mov	r2, r3
 801ccca:	4648      	mov	r0, r9
 801cccc:	682b      	ldr	r3, [r5, #0]
 801ccce:	4798      	blx	r3
 801ccd0:	e7e5      	b.n	801cc9e <_CopyBuffer+0x4a>
 801ccd2:	bf00      	nop
 801ccd4:	2000004c 	.word	0x2000004c

0801ccd8 <_SetPos>:
 801ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccdc:	2300      	movs	r3, #0
 801ccde:	b089      	sub	sp, #36	; 0x24
 801cce0:	6884      	ldr	r4, [r0, #8]
 801cce2:	4605      	mov	r5, r0
 801cce4:	460f      	mov	r7, r1
 801cce6:	4616      	mov	r6, r2
 801cce8:	9303      	str	r3, [sp, #12]
 801ccea:	9302      	str	r3, [sp, #8]
 801ccec:	9304      	str	r3, [sp, #16]
 801ccee:	9305      	str	r3, [sp, #20]
 801ccf0:	9306      	str	r3, [sp, #24]
 801ccf2:	9307      	str	r3, [sp, #28]
 801ccf4:	2c00      	cmp	r4, #0
 801ccf6:	d046      	beq.n	801cd86 <_SetPos+0xae>
 801ccf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801ccfa:	b133      	cbz	r3, 801cd0a <_SetPos+0x32>
 801ccfc:	4632      	mov	r2, r6
 801ccfe:	4639      	mov	r1, r7
 801cd00:	69a8      	ldr	r0, [r5, #24]
 801cd02:	4798      	blx	r3
 801cd04:	b009      	add	sp, #36	; 0x24
 801cd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd0a:	6267      	str	r7, [r4, #36]	; 0x24
 801cd0c:	62a6      	str	r6, [r4, #40]	; 0x28
 801cd0e:	f7fe f927 	bl	801af60 <LCD_GetXSizeDisplay>
 801cd12:	4681      	mov	r9, r0
 801cd14:	f7fe f92a 	bl	801af6c <LCD_GetYSizeDisplay>
 801cd18:	68eb      	ldr	r3, [r5, #12]
 801cd1a:	4682      	mov	sl, r0
 801cd1c:	2108      	movs	r1, #8
 801cd1e:	4628      	mov	r0, r5
 801cd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cd26:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801cd2a:	4798      	blx	r3
 801cd2c:	1dc2      	adds	r2, r0, #7
 801cd2e:	bf48      	it	mi
 801cd30:	f100 020e 	addmi.w	r2, r0, #14
 801cd34:	2f00      	cmp	r7, #0
 801cd36:	ea4f 02e2 	mov.w	r2, r2, asr #3
 801cd3a:	9206      	str	r2, [sp, #24]
 801cd3c:	db4b      	blt.n	801cdd6 <_SetPos+0xfe>
 801cd3e:	eb07 030b 	add.w	r3, r7, fp
 801cd42:	9702      	str	r7, [sp, #8]
 801cd44:	4599      	cmp	r9, r3
 801cd46:	db2c      	blt.n	801cda2 <_SetPos+0xca>
 801cd48:	f8cd b010 	str.w	fp, [sp, #16]
 801cd4c:	2e00      	cmp	r6, #0
 801cd4e:	db4c      	blt.n	801cdea <_SetPos+0x112>
 801cd50:	eb06 0308 	add.w	r3, r6, r8
 801cd54:	9603      	str	r6, [sp, #12]
 801cd56:	459a      	cmp	sl, r3
 801cd58:	db39      	blt.n	801cdce <_SetPos+0xf6>
 801cd5a:	4641      	mov	r1, r8
 801cd5c:	f8cd 8014 	str.w	r8, [sp, #20]
 801cd60:	9b04      	ldr	r3, [sp, #16]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	dd21      	ble.n	801cdaa <_SetPos+0xd2>
 801cd66:	2900      	cmp	r1, #0
 801cd68:	dd1f      	ble.n	801cdaa <_SetPos+0xd2>
 801cd6a:	9b02      	ldr	r3, [sp, #8]
 801cd6c:	4599      	cmp	r9, r3
 801cd6e:	dd1c      	ble.n	801cdaa <_SetPos+0xd2>
 801cd70:	45b2      	cmp	sl, r6
 801cd72:	dd1a      	ble.n	801cdaa <_SetPos+0xd2>
 801cd74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d044      	beq.n	801ce04 <_SetPos+0x12c>
 801cd7a:	aa02      	add	r2, sp, #8
 801cd7c:	69a8      	ldr	r0, [r5, #24]
 801cd7e:	2108      	movs	r1, #8
 801cd80:	f7e7 fdc4 	bl	800490c <LCD_X_DisplayDriver>
 801cd84:	e7be      	b.n	801cd04 <_SetPos+0x2c>
 801cd86:	2050      	movs	r0, #80	; 0x50
 801cd88:	f7f5 feda 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801cd8c:	4621      	mov	r1, r4
 801cd8e:	60a8      	str	r0, [r5, #8]
 801cd90:	2250      	movs	r2, #80	; 0x50
 801cd92:	f7fc fe03 	bl	801999c <GUI__memset>
 801cd96:	68ac      	ldr	r4, [r5, #8]
 801cd98:	2c00      	cmp	r4, #0
 801cd9a:	d1ad      	bne.n	801ccf8 <_SetPos+0x20>
 801cd9c:	b009      	add	sp, #36	; 0x24
 801cd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cda2:	ebc7 0709 	rsb	r7, r7, r9
 801cda6:	9704      	str	r7, [sp, #16]
 801cda8:	e7d0      	b.n	801cd4c <_SetPos+0x74>
 801cdaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cdac:	2b01      	cmp	r3, #1
 801cdae:	d1a9      	bne.n	801cd04 <_SetPos+0x2c>
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	68ac      	ldr	r4, [r5, #8]
 801cdb4:	9301      	str	r3, [sp, #4]
 801cdb6:	2c00      	cmp	r4, #0
 801cdb8:	d031      	beq.n	801ce1e <_SetPos+0x146>
 801cdba:	2300      	movs	r3, #0
 801cdbc:	aa08      	add	r2, sp, #32
 801cdbe:	69a8      	ldr	r0, [r5, #24]
 801cdc0:	2109      	movs	r1, #9
 801cdc2:	6323      	str	r3, [r4, #48]	; 0x30
 801cdc4:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801cdc8:	f7e7 fda0 	bl	800490c <LCD_X_DisplayDriver>
 801cdcc:	e79a      	b.n	801cd04 <_SetPos+0x2c>
 801cdce:	ebc6 010a 	rsb	r1, r6, sl
 801cdd2:	9105      	str	r1, [sp, #20]
 801cdd4:	e7c4      	b.n	801cd60 <_SetPos+0x88>
 801cdd6:	9b07      	ldr	r3, [sp, #28]
 801cdd8:	eb07 010b 	add.w	r1, r7, fp
 801cddc:	fb02 3717 	mls	r7, r2, r7, r3
 801cde0:	2300      	movs	r3, #0
 801cde2:	9104      	str	r1, [sp, #16]
 801cde4:	9707      	str	r7, [sp, #28]
 801cde6:	9302      	str	r3, [sp, #8]
 801cde8:	e7b0      	b.n	801cd4c <_SetPos+0x74>
 801cdea:	fb02 f206 	mul.w	r2, r2, r6
 801cdee:	9b07      	ldr	r3, [sp, #28]
 801cdf0:	eb06 0108 	add.w	r1, r6, r8
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	fb0b 3312 	mls	r3, fp, r2, r3
 801cdfa:	9105      	str	r1, [sp, #20]
 801cdfc:	4606      	mov	r6, r0
 801cdfe:	9307      	str	r3, [sp, #28]
 801ce00:	9003      	str	r0, [sp, #12]
 801ce02:	e7ad      	b.n	801cd60 <_SetPos+0x88>
 801ce04:	68ac      	ldr	r4, [r5, #8]
 801ce06:	9301      	str	r3, [sp, #4]
 801ce08:	b1b4      	cbz	r4, 801ce38 <_SetPos+0x160>
 801ce0a:	2301      	movs	r3, #1
 801ce0c:	aa08      	add	r2, sp, #32
 801ce0e:	69a8      	ldr	r0, [r5, #24]
 801ce10:	2109      	movs	r1, #9
 801ce12:	6323      	str	r3, [r4, #48]	; 0x30
 801ce14:	f842 3d1c 	str.w	r3, [r2, #-28]!
 801ce18:	f7e7 fd78 	bl	800490c <LCD_X_DisplayDriver>
 801ce1c:	e7ad      	b.n	801cd7a <_SetPos+0xa2>
 801ce1e:	2050      	movs	r0, #80	; 0x50
 801ce20:	f7f5 fe8e 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ce24:	4621      	mov	r1, r4
 801ce26:	60a8      	str	r0, [r5, #8]
 801ce28:	2250      	movs	r2, #80	; 0x50
 801ce2a:	f7fc fdb7 	bl	801999c <GUI__memset>
 801ce2e:	68ac      	ldr	r4, [r5, #8]
 801ce30:	2c00      	cmp	r4, #0
 801ce32:	f43f af67 	beq.w	801cd04 <_SetPos+0x2c>
 801ce36:	e7c0      	b.n	801cdba <_SetPos+0xe2>
 801ce38:	2050      	movs	r0, #80	; 0x50
 801ce3a:	f7f5 fe81 	bl	8012b40 <GUI_ALLOC_GetFixedBlock>
 801ce3e:	4621      	mov	r1, r4
 801ce40:	60a8      	str	r0, [r5, #8]
 801ce42:	2250      	movs	r2, #80	; 0x50
 801ce44:	f7fc fdaa 	bl	801999c <GUI__memset>
 801ce48:	68ac      	ldr	r4, [r5, #8]
 801ce4a:	2c00      	cmp	r4, #0
 801ce4c:	d095      	beq.n	801cd7a <_SetPos+0xa2>
 801ce4e:	e7dc      	b.n	801ce0a <_SetPos+0x132>

0801ce50 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 801ce50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce54:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801cf50 <GUI_MEMDEV_CopyToLCDAt.part.0+0x100>
 801ce58:	b084      	sub	sp, #16
 801ce5a:	460c      	mov	r4, r1
 801ce5c:	4615      	mov	r5, r2
 801ce5e:	4606      	mov	r6, r0
 801ce60:	f7fb fba0 	bl	80185a4 <GUI_Lock>
 801ce64:	2000      	movs	r0, #0
 801ce66:	f7f7 f945 	bl	80140f4 <GUI_SetDrawMode>
 801ce6a:	f8d8 3000 	ldr.w	r3, [r8]
 801ce6e:	4681      	mov	r9, r0
 801ce70:	4630      	mov	r0, r6
 801ce72:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 801ce74:	f7f5 ff98 	bl	8012da8 <GUI_ALLOC_LockH>
 801ce78:	6803      	ldr	r3, [r0, #0]
 801ce7a:	9000      	str	r0, [sp, #0]
 801ce7c:	6998      	ldr	r0, [r3, #24]
 801ce7e:	f7fa f985 	bl	801718c <GUI_SelectLayer>
 801ce82:	4b32      	ldr	r3, [pc, #200]	; (801cf4c <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>)
 801ce84:	4682      	mov	sl, r0
 801ce86:	429c      	cmp	r4, r3
 801ce88:	9b00      	ldr	r3, [sp, #0]
 801ce8a:	d053      	beq.n	801cf34 <GUI_MEMDEV_CopyToLCDAt.part.0+0xe4>
 801ce8c:	891a      	ldrh	r2, [r3, #8]
 801ce8e:	895b      	ldrh	r3, [r3, #10]
 801ce90:	3a01      	subs	r2, #1
 801ce92:	f8ad 4008 	strh.w	r4, [sp, #8]
 801ce96:	3b01      	subs	r3, #1
 801ce98:	f8ad 500a 	strh.w	r5, [sp, #10]
 801ce9c:	4422      	add	r2, r4
 801ce9e:	442b      	add	r3, r5
 801cea0:	f8ad 200c 	strh.w	r2, [sp, #12]
 801cea4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cea8:	f004 f8c8 	bl	802103c <WM_Activate>
 801ceac:	4668      	mov	r0, sp
 801ceae:	f7f5 ff8f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ceb2:	a802      	add	r0, sp, #8
 801ceb4:	f003 fe4e 	bl	8020b54 <WM__InitIVRSearch>
 801ceb8:	bb48      	cbnz	r0, 801cf0e <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 801ceba:	4650      	mov	r0, sl
 801cebc:	f7fa f966 	bl	801718c <GUI_SelectLayer>
 801cec0:	f7fb fb70 	bl	80185a4 <GUI_Lock>
 801cec4:	2f00      	cmp	r7, #0
 801cec6:	d03d      	beq.n	801cf44 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf4>
 801cec8:	f8d8 3000 	ldr.w	r3, [r8]
 801cecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cece:	bbb3      	cbnz	r3, 801cf3e <GUI_MEMDEV_CopyToLCDAt.part.0+0xee>
 801ced0:	f004 f8bc 	bl	802104c <WM_Deactivate>
 801ced4:	4638      	mov	r0, r7
 801ced6:	f7f5 ff67 	bl	8012da8 <GUI_ALLOC_LockH>
 801ceda:	ac04      	add	r4, sp, #16
 801cedc:	f8d8 3000 	ldr.w	r3, [r8]
 801cee0:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801cee4:	661f      	str	r7, [r3, #96]	; 0x60
 801cee6:	6800      	ldr	r0, [r0, #0]
 801cee8:	f7f7 fbcc 	bl	8014684 <GUI_DEVICE_Link>
 801ceec:	4620      	mov	r0, r4
 801ceee:	f7f5 ff6f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801cef2:	f7fe fea7 	bl	801bc44 <LCD_UpdateColorIndices>
 801cef6:	f7fd fbb7 	bl	801a668 <LCD_SetClipRectMax>
 801cefa:	f7fb fb49 	bl	8018590 <GUI_Unlock>
 801cefe:	4648      	mov	r0, r9
 801cf00:	f7f7 f8f8 	bl	80140f4 <GUI_SetDrawMode>
 801cf04:	f7fb fb44 	bl	8018590 <GUI_Unlock>
 801cf08:	b004      	add	sp, #16
 801cf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf0e:	462a      	mov	r2, r5
 801cf10:	4621      	mov	r1, r4
 801cf12:	4630      	mov	r0, r6
 801cf14:	f001 fbd0 	bl	801e6b8 <GUI_MEMDEV__WriteToActiveOpaque>
 801cf18:	f003 fcf2 	bl	8020900 <WM__GetNextIVR>
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	d0cc      	beq.n	801ceba <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 801cf20:	462a      	mov	r2, r5
 801cf22:	4621      	mov	r1, r4
 801cf24:	4630      	mov	r0, r6
 801cf26:	f001 fbc7 	bl	801e6b8 <GUI_MEMDEV__WriteToActiveOpaque>
 801cf2a:	f003 fce9 	bl	8020900 <WM__GetNextIVR>
 801cf2e:	2800      	cmp	r0, #0
 801cf30:	d1ed      	bne.n	801cf0e <GUI_MEMDEV_CopyToLCDAt.part.0+0xbe>
 801cf32:	e7c2      	b.n	801ceba <GUI_MEMDEV_CopyToLCDAt.part.0+0x6a>
 801cf34:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801cf38:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801cf3c:	e7a6      	b.n	801ce8c <GUI_MEMDEV_CopyToLCDAt.part.0+0x3c>
 801cf3e:	f7f7 f869 	bl	8014014 <GUI_SelectLCD>
 801cf42:	e7c5      	b.n	801ced0 <GUI_MEMDEV_CopyToLCDAt.part.0+0x80>
 801cf44:	f7f7 f866 	bl	8014014 <GUI_SelectLCD>
 801cf48:	e7d7      	b.n	801cefa <GUI_MEMDEV_CopyToLCDAt.part.0+0xaa>
 801cf4a:	bf00      	nop
 801cf4c:	fffff001 	.word	0xfffff001
 801cf50:	20000018 	.word	0x20000018

0801cf54 <GUI_MEMDEV__WriteToActiveAt>:
 801cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf58:	b082      	sub	sp, #8
 801cf5a:	460f      	mov	r7, r1
 801cf5c:	4690      	mov	r8, r2
 801cf5e:	4606      	mov	r6, r0
 801cf60:	f7f5 ff22 	bl	8012da8 <GUI_ALLOC_LockH>
 801cf64:	4603      	mov	r3, r0
 801cf66:	ac02      	add	r4, sp, #8
 801cf68:	2116      	movs	r1, #22
 801cf6a:	681d      	ldr	r5, [r3, #0]
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	f844 3d04 	str.w	r3, [r4, #-4]!
 801cf72:	68eb      	ldr	r3, [r5, #12]
 801cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf76:	4798      	blx	r3
 801cf78:	4605      	mov	r5, r0
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	f7f5 ff28 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801cf80:	b11d      	cbz	r5, 801cf8a <GUI_MEMDEV__WriteToActiveAt+0x36>
 801cf82:	4642      	mov	r2, r8
 801cf84:	4639      	mov	r1, r7
 801cf86:	4630      	mov	r0, r6
 801cf88:	47a8      	blx	r5
 801cf8a:	b002      	add	sp, #8
 801cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cf90 <GUI_MEMDEV__CreateFixed>:
 801cf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf94:	f8df 812c 	ldr.w	r8, [pc, #300]	; 801d0c4 <GUI_MEMDEV__CreateFixed+0x134>
 801cf98:	b087      	sub	sp, #28
 801cf9a:	4682      	mov	sl, r0
 801cf9c:	468b      	mov	fp, r1
 801cf9e:	f8d8 0000 	ldr.w	r0, [r8]
 801cfa2:	4617      	mov	r7, r2
 801cfa4:	461e      	mov	r6, r3
 801cfa6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cfa8:	7c43      	ldrb	r3, [r0, #17]
 801cfaa:	2200      	movs	r2, #0
 801cfac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cfae:	f7f7 fb19 	bl	80145e4 <GUI_DEVICE_Create>
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	d04d      	beq.n	801d052 <GUI_MEMDEV__CreateFixed+0xc2>
 801cfb6:	6903      	ldr	r3, [r0, #16]
 801cfb8:	4605      	mov	r5, r0
 801cfba:	689b      	ldr	r3, [r3, #8]
 801cfbc:	4798      	blx	r3
 801cfbe:	f7fd ffdb 	bl	801af78 <LCD__GetBPPDevice>
 801cfc2:	fb00 f407 	mul.w	r4, r0, r7
 801cfc6:	4681      	mov	r9, r0
 801cfc8:	f7f5 ffb6 	bl	8012f38 <GUI_ALLOC_RequestSize>
 801cfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cfce:	3407      	adds	r4, #7
 801cfd0:	f013 0301 	ands.w	r3, r3, #1
 801cfd4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 801cfd8:	d03f      	beq.n	801d05a <GUI_MEMDEV__CreateFixed+0xca>
 801cfda:	2e00      	cmp	r6, #0
 801cfdc:	dd2c      	ble.n	801d038 <GUI_MEMDEV__CreateFixed+0xa8>
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d042      	beq.n	801d068 <GUI_MEMDEV__CreateFixed+0xd8>
 801cfe2:	fb04 f006 	mul.w	r0, r4, r6
 801cfe6:	3018      	adds	r0, #24
 801cfe8:	f7f5 fec6 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 801cfec:	4602      	mov	r2, r0
 801cfee:	b368      	cbz	r0, 801d04c <GUI_MEMDEV__CreateFixed+0xbc>
 801cff0:	2300      	movs	r3, #0
 801cff2:	9302      	str	r3, [sp, #8]
 801cff4:	4610      	mov	r0, r2
 801cff6:	9203      	str	r2, [sp, #12]
 801cff8:	f7f5 fed6 	bl	8012da8 <GUI_ALLOC_LockH>
 801cffc:	9a02      	ldr	r2, [sp, #8]
 801cffe:	4603      	mov	r3, r0
 801d000:	a806      	add	r0, sp, #24
 801d002:	f8a3 a004 	strh.w	sl, [r3, #4]
 801d006:	f8a3 b006 	strh.w	fp, [r3, #6]
 801d00a:	811f      	strh	r7, [r3, #8]
 801d00c:	815e      	strh	r6, [r3, #10]
 801d00e:	60dc      	str	r4, [r3, #12]
 801d010:	f8c3 9010 	str.w	r9, [r3, #16]
 801d014:	615a      	str	r2, [r3, #20]
 801d016:	f840 3d04 	str.w	r3, [r0, #-4]!
 801d01a:	601d      	str	r5, [r3, #0]
 801d01c:	f7f5 fed8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d020:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d022:	f8d8 3000 	ldr.w	r3, [r8]
 801d026:	612a      	str	r2, [r5, #16]
 801d028:	9a03      	ldr	r2, [sp, #12]
 801d02a:	4610      	mov	r0, r2
 801d02c:	60aa      	str	r2, [r5, #8]
 801d02e:	7c5b      	ldrb	r3, [r3, #17]
 801d030:	61ab      	str	r3, [r5, #24]
 801d032:	b007      	add	sp, #28
 801d034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d038:	2c00      	cmp	r4, #0
 801d03a:	d134      	bne.n	801d0a6 <GUI_MEMDEV__CreateFixed+0x116>
 801d03c:	4620      	mov	r0, r4
 801d03e:	4276      	negs	r6, r6
 801d040:	4286      	cmp	r6, r0
 801d042:	bfa8      	it	ge
 801d044:	4606      	movge	r6, r0
 801d046:	b393      	cbz	r3, 801d0ae <GUI_MEMDEV__CreateFixed+0x11e>
 801d048:	2e00      	cmp	r6, #0
 801d04a:	dcca      	bgt.n	801cfe2 <GUI_MEMDEV__CreateFixed+0x52>
 801d04c:	4628      	mov	r0, r5
 801d04e:	f7f7 fac7 	bl	80145e0 <GUI_DEVICE_Delete>
 801d052:	2000      	movs	r0, #0
 801d054:	b007      	add	sp, #28
 801d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05a:	2800      	cmp	r0, #0
 801d05c:	bfb8      	it	lt
 801d05e:	3003      	addlt	r0, #3
 801d060:	1080      	asrs	r0, r0, #2
 801d062:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d066:	e7b8      	b.n	801cfda <GUI_MEMDEV__CreateFixed+0x4a>
 801d068:	9300      	str	r3, [sp, #0]
 801d06a:	463a      	mov	r2, r7
 801d06c:	4633      	mov	r3, r6
 801d06e:	4659      	mov	r1, fp
 801d070:	4650      	mov	r0, sl
 801d072:	f001 faf1 	bl	801e658 <GUI_USAGE_BM_Create>
 801d076:	9002      	str	r0, [sp, #8]
 801d078:	fb04 f006 	mul.w	r0, r4, r6
 801d07c:	3018      	adds	r0, #24
 801d07e:	f7f6 f84b 	bl	8013118 <GUI_ALLOC_AllocZero>
 801d082:	4602      	mov	r2, r0
 801d084:	2800      	cmp	r0, #0
 801d086:	d1b5      	bne.n	801cff4 <GUI_MEMDEV__CreateFixed+0x64>
 801d088:	4628      	mov	r0, r5
 801d08a:	9203      	str	r2, [sp, #12]
 801d08c:	f7f7 faa8 	bl	80145e0 <GUI_DEVICE_Delete>
 801d090:	9b02      	ldr	r3, [sp, #8]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d0dd      	beq.n	801d052 <GUI_MEMDEV__CreateFixed+0xc2>
 801d096:	4618      	mov	r0, r3
 801d098:	f7f6 f81e 	bl	80130d8 <GUI_ALLOC_Free>
 801d09c:	9a03      	ldr	r2, [sp, #12]
 801d09e:	4610      	mov	r0, r2
 801d0a0:	b007      	add	sp, #28
 801d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a6:	3818      	subs	r0, #24
 801d0a8:	fbb0 f0f4 	udiv	r0, r0, r4
 801d0ac:	e7c7      	b.n	801d03e <GUI_MEMDEV__CreateFixed+0xae>
 801d0ae:	9300      	str	r3, [sp, #0]
 801d0b0:	463a      	mov	r2, r7
 801d0b2:	4633      	mov	r3, r6
 801d0b4:	4659      	mov	r1, fp
 801d0b6:	4650      	mov	r0, sl
 801d0b8:	f001 face 	bl	801e658 <GUI_USAGE_BM_Create>
 801d0bc:	2e00      	cmp	r6, #0
 801d0be:	9002      	str	r0, [sp, #8]
 801d0c0:	dcda      	bgt.n	801d078 <GUI_MEMDEV__CreateFixed+0xe8>
 801d0c2:	e7c3      	b.n	801d04c <GUI_MEMDEV__CreateFixed+0xbc>
 801d0c4:	20000018 	.word	0x20000018

0801d0c8 <GUI_MEMDEV_GetBitsPerPixel>:
 801d0c8:	b530      	push	{r4, r5, lr}
 801d0ca:	4604      	mov	r4, r0
 801d0cc:	b083      	sub	sp, #12
 801d0ce:	b198      	cbz	r0, 801d0f8 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 801d0d0:	f7fb fa68 	bl	80185a4 <GUI_Lock>
 801d0d4:	4620      	mov	r0, r4
 801d0d6:	f7f5 fe67 	bl	8012da8 <GUI_ALLOC_LockH>
 801d0da:	6803      	ldr	r3, [r0, #0]
 801d0dc:	ad02      	add	r5, sp, #8
 801d0de:	691b      	ldr	r3, [r3, #16]
 801d0e0:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d0e4:	689b      	ldr	r3, [r3, #8]
 801d0e6:	4798      	blx	r3
 801d0e8:	f7fd ff46 	bl	801af78 <LCD__GetBPPDevice>
 801d0ec:	4604      	mov	r4, r0
 801d0ee:	4628      	mov	r0, r5
 801d0f0:	f7f5 fe6e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d0f4:	f7fb fa4c 	bl	8018590 <GUI_Unlock>
 801d0f8:	4620      	mov	r0, r4
 801d0fa:	b003      	add	sp, #12
 801d0fc:	bd30      	pop	{r4, r5, pc}
 801d0fe:	bf00      	nop

0801d100 <GUI_MEMDEV_Delete>:
 801d100:	b900      	cbnz	r0, 801d104 <GUI_MEMDEV_Delete+0x4>
 801d102:	4770      	bx	lr
 801d104:	b510      	push	{r4, lr}
 801d106:	b082      	sub	sp, #8
 801d108:	4604      	mov	r4, r0
 801d10a:	f7fb fa4b 	bl	80185a4 <GUI_Lock>
 801d10e:	4b10      	ldr	r3, [pc, #64]	; (801d150 <GUI_MEMDEV_Delete+0x50>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d114:	429c      	cmp	r4, r3
 801d116:	d017      	beq.n	801d148 <GUI_MEMDEV_Delete+0x48>
 801d118:	4620      	mov	r0, r4
 801d11a:	f7f5 fe45 	bl	8012da8 <GUI_ALLOC_LockH>
 801d11e:	6943      	ldr	r3, [r0, #20]
 801d120:	9001      	str	r0, [sp, #4]
 801d122:	b963      	cbnz	r3, 801d13e <GUI_MEMDEV_Delete+0x3e>
 801d124:	6800      	ldr	r0, [r0, #0]
 801d126:	f7f7 fa5b 	bl	80145e0 <GUI_DEVICE_Delete>
 801d12a:	a801      	add	r0, sp, #4
 801d12c:	f7f5 fe50 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d130:	4620      	mov	r0, r4
 801d132:	f7f5 ffd1 	bl	80130d8 <GUI_ALLOC_Free>
 801d136:	f7fb fa2b 	bl	8018590 <GUI_Unlock>
 801d13a:	b002      	add	sp, #8
 801d13c:	bd10      	pop	{r4, pc}
 801d13e:	4618      	mov	r0, r3
 801d140:	f001 f9a2 	bl	801e488 <GUI_USAGE_DecUseCnt>
 801d144:	9801      	ldr	r0, [sp, #4]
 801d146:	e7ed      	b.n	801d124 <GUI_MEMDEV_Delete+0x24>
 801d148:	f7f6 ff64 	bl	8014014 <GUI_SelectLCD>
 801d14c:	e7e4      	b.n	801d118 <GUI_MEMDEV_Delete+0x18>
 801d14e:	bf00      	nop
 801d150:	20000018 	.word	0x20000018

0801d154 <GUI_MEMDEV_CreateEx>:
 801d154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d158:	b085      	sub	sp, #20
 801d15a:	4606      	mov	r6, r0
 801d15c:	4690      	mov	r8, r2
 801d15e:	4699      	mov	r9, r3
 801d160:	460f      	mov	r7, r1
 801d162:	f7fb fa1f 	bl	80185a4 <GUI_Lock>
 801d166:	4a1c      	ldr	r2, [pc, #112]	; (801d1d8 <GUI_MEMDEV_CreateEx+0x84>)
 801d168:	4b1c      	ldr	r3, [pc, #112]	; (801d1dc <GUI_MEMDEV_CreateEx+0x88>)
 801d16a:	6812      	ldr	r2, [r2, #0]
 801d16c:	7c50      	ldrb	r0, [r2, #17]
 801d16e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801d172:	e001      	b.n	801d178 <GUI_MEMDEV_CreateEx+0x24>
 801d174:	6824      	ldr	r4, [r4, #0]
 801d176:	b1fc      	cbz	r4, 801d1b8 <GUI_MEMDEV_CreateEx+0x64>
 801d178:	68e3      	ldr	r3, [r4, #12]
 801d17a:	681a      	ldr	r2, [r3, #0]
 801d17c:	2a04      	cmp	r2, #4
 801d17e:	d1f9      	bne.n	801d174 <GUI_MEMDEV_CreateEx+0x20>
 801d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d182:	2101      	movs	r1, #1
 801d184:	4620      	mov	r0, r4
 801d186:	4798      	blx	r3
 801d188:	4605      	mov	r5, r0
 801d18a:	b1d8      	cbz	r0, 801d1c4 <GUI_MEMDEV_CreateEx+0x70>
 801d18c:	6924      	ldr	r4, [r4, #16]
 801d18e:	68a3      	ldr	r3, [r4, #8]
 801d190:	4798      	blx	r3
 801d192:	3001      	adds	r0, #1
 801d194:	d018      	beq.n	801d1c8 <GUI_MEMDEV_CreateEx+0x74>
 801d196:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d198:	464b      	mov	r3, r9
 801d19a:	9402      	str	r4, [sp, #8]
 801d19c:	4642      	mov	r2, r8
 801d19e:	9100      	str	r1, [sp, #0]
 801d1a0:	4630      	mov	r0, r6
 801d1a2:	9501      	str	r5, [sp, #4]
 801d1a4:	4639      	mov	r1, r7
 801d1a6:	f7ff fef3 	bl	801cf90 <GUI_MEMDEV__CreateFixed>
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	f7fb f9f0 	bl	8018590 <GUI_Unlock>
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	b005      	add	sp, #20
 801d1b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1b8:	f7f7 f9fc 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 801d1bc:	4604      	mov	r4, r0
 801d1be:	b148      	cbz	r0, 801d1d4 <GUI_MEMDEV_CreateEx+0x80>
 801d1c0:	68c3      	ldr	r3, [r0, #12]
 801d1c2:	e7dd      	b.n	801d180 <GUI_MEMDEV_CreateEx+0x2c>
 801d1c4:	4604      	mov	r4, r0
 801d1c6:	e7f1      	b.n	801d1ac <GUI_MEMDEV_CreateEx+0x58>
 801d1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d1ca:	4c05      	ldr	r4, [pc, #20]	; (801d1e0 <GUI_MEMDEV_CreateEx+0x8c>)
 801d1cc:	f043 0301 	orr.w	r3, r3, #1
 801d1d0:	930c      	str	r3, [sp, #48]	; 0x30
 801d1d2:	e7e0      	b.n	801d196 <GUI_MEMDEV_CreateEx+0x42>
 801d1d4:	4620      	mov	r0, r4
 801d1d6:	e7ec      	b.n	801d1b2 <GUI_MEMDEV_CreateEx+0x5e>
 801d1d8:	20000018 	.word	0x20000018
 801d1dc:	200467d0 	.word	0x200467d0
 801d1e0:	080271dc 	.word	0x080271dc

0801d1e4 <GUI_MEMDEV_Select>:
 801d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1e6:	4f16      	ldr	r7, [pc, #88]	; (801d240 <GUI_MEMDEV_Select+0x5c>)
 801d1e8:	b083      	sub	sp, #12
 801d1ea:	4604      	mov	r4, r0
 801d1ec:	f7fb f9da 	bl	80185a4 <GUI_Lock>
 801d1f0:	683b      	ldr	r3, [r7, #0]
 801d1f2:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 801d1f4:	b1e4      	cbz	r4, 801d230 <GUI_MEMDEV_Select+0x4c>
 801d1f6:	b9c6      	cbnz	r6, 801d22a <GUI_MEMDEV_Select+0x46>
 801d1f8:	f003 ff28 	bl	802104c <WM_Deactivate>
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	f7f5 fdd3 	bl	8012da8 <GUI_ALLOC_LockH>
 801d202:	ad02      	add	r5, sp, #8
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d20a:	661c      	str	r4, [r3, #96]	; 0x60
 801d20c:	6800      	ldr	r0, [r0, #0]
 801d20e:	f7f7 fa39 	bl	8014684 <GUI_DEVICE_Link>
 801d212:	4628      	mov	r0, r5
 801d214:	f7f5 fddc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d218:	f7fe fd14 	bl	801bc44 <LCD_UpdateColorIndices>
 801d21c:	f7fd fa24 	bl	801a668 <LCD_SetClipRectMax>
 801d220:	f7fb f9b6 	bl	8018590 <GUI_Unlock>
 801d224:	4630      	mov	r0, r6
 801d226:	b003      	add	sp, #12
 801d228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d22a:	f7f6 fef3 	bl	8014014 <GUI_SelectLCD>
 801d22e:	e7e3      	b.n	801d1f8 <GUI_MEMDEV_Select+0x14>
 801d230:	f7f6 fef0 	bl	8014014 <GUI_SelectLCD>
 801d234:	f7fb f9ac 	bl	8018590 <GUI_Unlock>
 801d238:	4630      	mov	r0, r6
 801d23a:	b003      	add	sp, #12
 801d23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d23e:	bf00      	nop
 801d240:	20000018 	.word	0x20000018

0801d244 <GUI_MEMDEV_CopyToLCD>:
 801d244:	b900      	cbnz	r0, 801d248 <GUI_MEMDEV_CopyToLCD+0x4>
 801d246:	4770      	bx	lr
 801d248:	4a01      	ldr	r2, [pc, #4]	; (801d250 <GUI_MEMDEV_CopyToLCD+0xc>)
 801d24a:	4611      	mov	r1, r2
 801d24c:	f7ff be00 	b.w	801ce50 <GUI_MEMDEV_CopyToLCDAt.part.0>
 801d250:	fffff001 	.word	0xfffff001

0801d254 <_GetDevData>:
 801d254:	2901      	cmp	r1, #1
 801d256:	4802      	ldr	r0, [pc, #8]	; (801d260 <_GetDevData+0xc>)
 801d258:	bf18      	it	ne
 801d25a:	2000      	movne	r0, #0
 801d25c:	4770      	bx	lr
 801d25e:	bf00      	nop
 801d260:	08034680 	.word	0x08034680

0801d264 <_GetDevFunc>:
 801d264:	2916      	cmp	r1, #22
 801d266:	4802      	ldr	r0, [pc, #8]	; (801d270 <_GetDevFunc+0xc>)
 801d268:	bf18      	it	ne
 801d26a:	2000      	movne	r0, #0
 801d26c:	4770      	bx	lr
 801d26e:	bf00      	nop
 801d270:	0801e6b9 	.word	0x0801e6b9

0801d274 <_SetOrg>:
 801d274:	6800      	ldr	r0, [r0, #0]
 801d276:	b110      	cbz	r0, 801d27e <_SetOrg+0xa>
 801d278:	68c3      	ldr	r3, [r0, #12]
 801d27a:	6a1b      	ldr	r3, [r3, #32]
 801d27c:	4718      	bx	r3
 801d27e:	4770      	bx	lr

0801d280 <_GetRect>:
 801d280:	b570      	push	{r4, r5, r6, lr}
 801d282:	b082      	sub	sp, #8
 801d284:	6880      	ldr	r0, [r0, #8]
 801d286:	460d      	mov	r5, r1
 801d288:	f7f5 fd8e 	bl	8012da8 <GUI_ALLOC_LockH>
 801d28c:	4602      	mov	r2, r0
 801d28e:	a802      	add	r0, sp, #8
 801d290:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 801d294:	8914      	ldrh	r4, [r2, #8]
 801d296:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 801d29a:	8953      	ldrh	r3, [r2, #10]
 801d29c:	4434      	add	r4, r6
 801d29e:	802e      	strh	r6, [r5, #0]
 801d2a0:	440b      	add	r3, r1
 801d2a2:	3c01      	subs	r4, #1
 801d2a4:	8069      	strh	r1, [r5, #2]
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	80ac      	strh	r4, [r5, #4]
 801d2aa:	f840 2d04 	str.w	r2, [r0, #-4]!
 801d2ae:	80eb      	strh	r3, [r5, #6]
 801d2b0:	f7f5 fd8e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d2b4:	b002      	add	sp, #8
 801d2b6:	bd70      	pop	{r4, r5, r6, pc}

0801d2b8 <_DrawBitmap>:
 801d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2bc:	b095      	sub	sp, #84	; 0x54
 801d2be:	460c      	mov	r4, r1
 801d2c0:	920b      	str	r2, [sp, #44]	; 0x2c
 801d2c2:	4aaa      	ldr	r2, [pc, #680]	; (801d56c <_DrawBitmap+0x2b4>)
 801d2c4:	900d      	str	r0, [sp, #52]	; 0x34
 801d2c6:	6812      	ldr	r2, [r2, #0]
 801d2c8:	9309      	str	r3, [sp, #36]	; 0x24
 801d2ca:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801d2cc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d2ce:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801d2d2:	f7f5 fd69 	bl	8012da8 <GUI_ALLOC_LockH>
 801d2d6:	6942      	ldr	r2, [r0, #20]
 801d2d8:	9011      	str	r0, [sp, #68]	; 0x44
 801d2da:	2a00      	cmp	r2, #0
 801d2dc:	f040 80b3 	bne.w	801d446 <_DrawBitmap+0x18e>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	4610      	mov	r0, r2
 801d2e4:	68db      	ldr	r3, [r3, #12]
 801d2e6:	9012      	str	r0, [sp, #72]	; 0x48
 801d2e8:	a811      	add	r0, sp, #68	; 0x44
 801d2ea:	9307      	str	r3, [sp, #28]
 801d2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d2ee:	18e3      	adds	r3, r4, r3
 801d2f0:	9308      	str	r3, [sp, #32]
 801d2f2:	f7f5 fd6d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d2f6:	4b9d      	ldr	r3, [pc, #628]	; (801d56c <_DrawBitmap+0x2b4>)
 801d2f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	b120      	cbz	r0, 801d308 <_DrawBitmap+0x50>
 801d2fe:	7c1a      	ldrb	r2, [r3, #16]
 801d300:	4c9a      	ldr	r4, [pc, #616]	; (801d56c <_DrawBitmap+0x2b4>)
 801d302:	0791      	lsls	r1, r2, #30
 801d304:	f000 80d4 	beq.w	801d4b0 <_DrawBitmap+0x1f8>
 801d308:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801d30a:	f7f5 fd4d 	bl	8012da8 <GUI_ALLOC_LockH>
 801d30e:	4604      	mov	r4, r0
 801d310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d312:	a814      	add	r0, sp, #80	; 0x50
 801d314:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d318:	68e3      	ldr	r3, [r4, #12]
 801d31a:	1a8a      	subs	r2, r1, r2
 801d31c:	f9b4 b004 	ldrsh.w	fp, [r4, #4]
 801d320:	f840 4d04 	str.w	r4, [r0, #-4]!
 801d324:	fb03 f302 	mul.w	r3, r3, r2
 801d328:	9a08      	ldr	r2, [sp, #32]
 801d32a:	3318      	adds	r3, #24
 801d32c:	ebcb 0b02 	rsb	fp, fp, r2
 801d330:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 801d334:	18e3      	adds	r3, r4, r3
 801d336:	9302      	str	r3, [sp, #8]
 801d338:	f7f5 fd4a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d33c:	2d10      	cmp	r5, #16
 801d33e:	f000 8087 	beq.w	801d450 <_DrawBitmap+0x198>
 801d342:	2d17      	cmp	r5, #23
 801d344:	dd45      	ble.n	801d3d2 <_DrawBitmap+0x11a>
 801d346:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f340 84b9 	ble.w	801dcc0 <_DrawBitmap+0xa08>
 801d34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d350:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801d354:	f1a3 0a04 	sub.w	sl, r3, #4
 801d358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d35a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d35c:	eb03 0b09 	add.w	fp, r3, r9
 801d360:	f8cd b00c 	str.w	fp, [sp, #12]
 801d364:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801d368:	f11a 0f04 	cmn.w	sl, #4
 801d36c:	d01f      	beq.n	801d3ae <_DrawBitmap+0xf6>
 801d36e:	9f02      	ldr	r7, [sp, #8]
 801d370:	b1ef      	cbz	r7, 801d3ae <_DrawBitmap+0xf6>
 801d372:	2e00      	cmp	r6, #0
 801d374:	d059      	beq.n	801d42a <_DrawBitmap+0x172>
 801d376:	68b0      	ldr	r0, [r6, #8]
 801d378:	464a      	mov	r2, r9
 801d37a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d37c:	46d0      	mov	r8, sl
 801d37e:	6844      	ldr	r4, [r0, #4]
 801d380:	4630      	mov	r0, r6
 801d382:	462b      	mov	r3, r5
 801d384:	9908      	ldr	r1, [sp, #32]
 801d386:	47a0      	blx	r4
 801d388:	9c08      	ldr	r4, [sp, #32]
 801d38a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801d38e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4798      	blx	r3
 801d396:	68b3      	ldr	r3, [r6, #8]
 801d398:	4621      	mov	r1, r4
 801d39a:	f827 0b02 	strh.w	r0, [r7], #2
 801d39e:	464a      	mov	r2, r9
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	4630      	mov	r0, r6
 801d3a4:	3401      	adds	r4, #1
 801d3a6:	4798      	blx	r3
 801d3a8:	3d01      	subs	r5, #1
 801d3aa:	d1ee      	bne.n	801d38a <_DrawBitmap+0xd2>
 801d3ac:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d3ae:	9b02      	ldr	r3, [sp, #8]
 801d3b0:	f109 0901 	add.w	r9, r9, #1
 801d3b4:	9a07      	ldr	r2, [sp, #28]
 801d3b6:	4413      	add	r3, r2
 801d3b8:	9302      	str	r3, [sp, #8]
 801d3ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d3bc:	449a      	add	sl, r3
 801d3be:	9b03      	ldr	r3, [sp, #12]
 801d3c0:	4599      	cmp	r9, r3
 801d3c2:	d1d1      	bne.n	801d368 <_DrawBitmap+0xb0>
 801d3c4:	b116      	cbz	r6, 801d3cc <_DrawBitmap+0x114>
 801d3c6:	a812      	add	r0, sp, #72	; 0x48
 801d3c8:	f7f5 fd02 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d3cc:	b015      	add	sp, #84	; 0x54
 801d3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3d2:	2d08      	cmp	r5, #8
 801d3d4:	d075      	beq.n	801d4c2 <_DrawBitmap+0x20a>
 801d3d6:	4b66      	ldr	r3, [pc, #408]	; (801d570 <_DrawBitmap+0x2b8>)
 801d3d8:	f1b9 0f00 	cmp.w	r9, #0
 801d3dc:	bf08      	it	eq
 801d3de:	4699      	moveq	r9, r3
 801d3e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	f340 812f 	ble.w	801d646 <_DrawBitmap+0x38e>
 801d3e8:	461c      	mov	r4, r3
 801d3ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d3ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d3ee:	0052      	lsls	r2, r2, #1
 801d3f0:	9807      	ldr	r0, [sp, #28]
 801d3f2:	009b      	lsls	r3, r3, #2
 801d3f4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801d3f6:	9206      	str	r2, [sp, #24]
 801d3f8:	9303      	str	r3, [sp, #12]
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	9a02      	ldr	r2, [sp, #8]
 801d3fe:	9921      	ldr	r1, [sp, #132]	; 0x84
 801d400:	2d02      	cmp	r5, #2
 801d402:	f000 8127 	beq.w	801d654 <_DrawBitmap+0x39c>
 801d406:	2d04      	cmp	r5, #4
 801d408:	f000 81fd 	beq.w	801d806 <_DrawBitmap+0x54e>
 801d40c:	2d01      	cmp	r5, #1
 801d40e:	f000 8337 	beq.w	801da80 <_DrawBitmap+0x7c8>
 801d412:	3301      	adds	r3, #1
 801d414:	4431      	add	r1, r6
 801d416:	4402      	add	r2, r0
 801d418:	429c      	cmp	r4, r3
 801d41a:	dcf1      	bgt.n	801d400 <_DrawBitmap+0x148>
 801d41c:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d420:	46de      	mov	lr, fp
 801d422:	f1be 0f00 	cmp.w	lr, #0
 801d426:	d1ce      	bne.n	801d3c6 <_DrawBitmap+0x10e>
 801d428:	e7d0      	b.n	801d3cc <_DrawBitmap+0x114>
 801d42a:	463d      	mov	r5, r7
 801d42c:	4656      	mov	r6, sl
 801d42e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d430:	f8db 3010 	ldr.w	r3, [fp, #16]
 801d434:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	4798      	blx	r3
 801d43c:	3c01      	subs	r4, #1
 801d43e:	f825 0b02 	strh.w	r0, [r5], #2
 801d442:	d1f5      	bne.n	801d430 <_DrawBitmap+0x178>
 801d444:	e7b2      	b.n	801d3ac <_DrawBitmap+0xf4>
 801d446:	4610      	mov	r0, r2
 801d448:	f7f5 fcae 	bl	8012da8 <GUI_ALLOC_LockH>
 801d44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d44e:	e749      	b.n	801d2e4 <_DrawBitmap+0x2c>
 801d450:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d452:	2d00      	cmp	r5, #0
 801d454:	f000 8426 	beq.w	801dca4 <_DrawBitmap+0x9ec>
 801d458:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	ddb3      	ble.n	801d3c6 <_DrawBitmap+0x10e>
 801d45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d460:	2400      	movs	r4, #0
 801d462:	4f44      	ldr	r7, [pc, #272]	; (801d574 <_DrawBitmap+0x2bc>)
 801d464:	005e      	lsls	r6, r3, #1
 801d466:	46a0      	mov	r8, r4
 801d468:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d46c:	9603      	str	r6, [sp, #12]
 801d46e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801d472:	9e02      	ldr	r6, [sp, #8]
 801d474:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801d478:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801d47a:	b184      	cbz	r4, 801d49e <_DrawBitmap+0x1e6>
 801d47c:	4621      	mov	r1, r4
 801d47e:	9a03      	ldr	r2, [sp, #12]
 801d480:	4630      	mov	r0, r6
 801d482:	b166      	cbz	r6, 801d49e <_DrawBitmap+0x1e6>
 801d484:	683b      	ldr	r3, [r7, #0]
 801d486:	4798      	blx	r3
 801d488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d48a:	4628      	mov	r0, r5
 801d48c:	9908      	ldr	r1, [sp, #32]
 801d48e:	eb03 0208 	add.w	r2, r3, r8
 801d492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d494:	b115      	cbz	r5, 801d49c <_DrawBitmap+0x1e4>
 801d496:	68ad      	ldr	r5, [r5, #8]
 801d498:	686d      	ldr	r5, [r5, #4]
 801d49a:	47a8      	blx	r5
 801d49c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d49e:	f108 0801 	add.w	r8, r8, #1
 801d4a2:	4454      	add	r4, sl
 801d4a4:	445e      	add	r6, fp
 801d4a6:	45c1      	cmp	r9, r8
 801d4a8:	dce7      	bgt.n	801d47a <_DrawBitmap+0x1c2>
 801d4aa:	2d00      	cmp	r5, #0
 801d4ac:	d18b      	bne.n	801d3c6 <_DrawBitmap+0x10e>
 801d4ae:	e78d      	b.n	801d3cc <_DrawBitmap+0x114>
 801d4b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d4b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4b4:	9300      	str	r3, [sp, #0]
 801d4b6:	9908      	ldr	r1, [sp, #32]
 801d4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4ba:	f000 ffff 	bl	801e4bc <GUI_USAGE_AddRect>
 801d4be:	6823      	ldr	r3, [r4, #0]
 801d4c0:	e722      	b.n	801d308 <_DrawBitmap+0x50>
 801d4c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	f340 8404 	ble.w	801dcd2 <_DrawBitmap+0xa1a>
 801d4ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4ce:	3b01      	subs	r3, #1
 801d4d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d4d2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d4d6:	9303      	str	r3, [sp, #12]
 801d4d8:	9b02      	ldr	r3, [sp, #8]
 801d4da:	4658      	mov	r0, fp
 801d4dc:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801d4e0:	46a9      	mov	r9, r5
 801d4e2:	eb03 0642 	add.w	r6, r3, r2, lsl #1
 801d4e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d4e8:	442b      	add	r3, r5
 801d4ea:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801d4ec:	9304      	str	r3, [sp, #16]
 801d4ee:	9b03      	ldr	r3, [sp, #12]
 801d4f0:	1c59      	adds	r1, r3, #1
 801d4f2:	4b1e      	ldr	r3, [pc, #120]	; (801d56c <_DrawBitmap+0x2b4>)
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	7c1b      	ldrb	r3, [r3, #16]
 801d4f8:	2d00      	cmp	r5, #0
 801d4fa:	d048      	beq.n	801d58e <_DrawBitmap+0x2d6>
 801d4fc:	f013 0303 	ands.w	r3, r3, #3
 801d500:	d03a      	beq.n	801d578 <_DrawBitmap+0x2c0>
 801d502:	2b02      	cmp	r3, #2
 801d504:	d11e      	bne.n	801d544 <_DrawBitmap+0x28c>
 801d506:	f1bb 0f00 	cmp.w	fp, #0
 801d50a:	d063      	beq.n	801d5d4 <_DrawBitmap+0x31c>
 801d50c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801d510:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d514:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d516:	9c08      	ldr	r4, [sp, #32]
 801d518:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801d51c:	4621      	mov	r1, r4
 801d51e:	464a      	mov	r2, r9
 801d520:	3401      	adds	r4, #1
 801d522:	4658      	mov	r0, fp
 801d524:	b13b      	cbz	r3, 801d536 <_DrawBitmap+0x27e>
 801d526:	f855 e023 	ldr.w	lr, [r5, r3, lsl #2]
 801d52a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801d52e:	f8a8 e000 	strh.w	lr, [r8]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	4798      	blx	r3
 801d536:	3f01      	subs	r7, #1
 801d538:	f108 0802 	add.w	r8, r8, #2
 801d53c:	d1ec      	bne.n	801d518 <_DrawBitmap+0x260>
 801d53e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d542:	4658      	mov	r0, fp
 801d544:	9b02      	ldr	r3, [sp, #8]
 801d546:	f109 0901 	add.w	r9, r9, #1
 801d54a:	9a07      	ldr	r2, [sp, #28]
 801d54c:	4619      	mov	r1, r3
 801d54e:	9b03      	ldr	r3, [sp, #12]
 801d550:	4416      	add	r6, r2
 801d552:	4411      	add	r1, r2
 801d554:	9102      	str	r1, [sp, #8]
 801d556:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d558:	440b      	add	r3, r1
 801d55a:	9303      	str	r3, [sp, #12]
 801d55c:	9b04      	ldr	r3, [sp, #16]
 801d55e:	454b      	cmp	r3, r9
 801d560:	d1c5      	bne.n	801d4ee <_DrawBitmap+0x236>
 801d562:	2800      	cmp	r0, #0
 801d564:	f47f af2f 	bne.w	801d3c6 <_DrawBitmap+0x10e>
 801d568:	e730      	b.n	801d3cc <_DrawBitmap+0x114>
 801d56a:	bf00      	nop
 801d56c:	20000018 	.word	0x20000018
 801d570:	080346b4 	.word	0x080346b4
 801d574:	2000004c 	.word	0x2000004c
 801d578:	9a03      	ldr	r2, [sp, #12]
 801d57a:	9b02      	ldr	r3, [sp, #8]
 801d57c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801d580:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801d584:	f823 1b02 	strh.w	r1, [r3], #2
 801d588:	42b3      	cmp	r3, r6
 801d58a:	d1f7      	bne.n	801d57c <_DrawBitmap+0x2c4>
 801d58c:	e7da      	b.n	801d544 <_DrawBitmap+0x28c>
 801d58e:	f013 0303 	ands.w	r3, r3, #3
 801d592:	f000 8365 	beq.w	801dc60 <_DrawBitmap+0x9a8>
 801d596:	2b02      	cmp	r3, #2
 801d598:	d1d4      	bne.n	801d544 <_DrawBitmap+0x28c>
 801d59a:	f1bb 0f00 	cmp.w	fp, #0
 801d59e:	f000 8377 	beq.w	801dc90 <_DrawBitmap+0x9d8>
 801d5a2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 801d5a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d5aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d5ac:	9c08      	ldr	r4, [sp, #32]
 801d5ae:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 801d5b2:	4621      	mov	r1, r4
 801d5b4:	464a      	mov	r2, r9
 801d5b6:	3401      	adds	r4, #1
 801d5b8:	4658      	mov	r0, fp
 801d5ba:	b133      	cbz	r3, 801d5ca <_DrawBitmap+0x312>
 801d5bc:	f8db e008 	ldr.w	lr, [fp, #8]
 801d5c0:	f8a8 3000 	strh.w	r3, [r8]
 801d5c4:	f8de 3000 	ldr.w	r3, [lr]
 801d5c8:	4798      	blx	r3
 801d5ca:	3f01      	subs	r7, #1
 801d5cc:	f108 0802 	add.w	r8, r8, #2
 801d5d0:	d1ed      	bne.n	801d5ae <_DrawBitmap+0x2f6>
 801d5d2:	e7b4      	b.n	801d53e <_DrawBitmap+0x286>
 801d5d4:	9903      	ldr	r1, [sp, #12]
 801d5d6:	9b02      	ldr	r3, [sp, #8]
 801d5d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d5dc:	b112      	cbz	r2, 801d5e4 <_DrawBitmap+0x32c>
 801d5de:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801d5e2:	801a      	strh	r2, [r3, #0]
 801d5e4:	3302      	adds	r3, #2
 801d5e6:	429e      	cmp	r6, r3
 801d5e8:	d1f6      	bne.n	801d5d8 <_DrawBitmap+0x320>
 801d5ea:	e7aa      	b.n	801d542 <_DrawBitmap+0x28a>
 801d5ec:	4642      	mov	r2, r8
 801d5ee:	9b03      	ldr	r3, [sp, #12]
 801d5f0:	f014 0f01 	tst.w	r4, #1
 801d5f4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d5f8:	d003      	beq.n	801d602 <_DrawBitmap+0x34a>
 801d5fa:	8819      	ldrh	r1, [r3, #0]
 801d5fc:	ea8a 0101 	eor.w	r1, sl, r1
 801d600:	8019      	strh	r1, [r3, #0]
 801d602:	3a01      	subs	r2, #1
 801d604:	f103 0302 	add.w	r3, r3, #2
 801d608:	d1f2      	bne.n	801d5f0 <_DrawBitmap+0x338>
 801d60a:	9b03      	ldr	r3, [sp, #12]
 801d60c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801d610:	9303      	str	r3, [sp, #12]
 801d612:	f1b9 0f00 	cmp.w	r9, #0
 801d616:	f040 82c4 	bne.w	801dba2 <_DrawBitmap+0x8ea>
 801d61a:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 801d61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d620:	a811      	add	r0, sp, #68	; 0x44
 801d622:	9a07      	ldr	r2, [sp, #28]
 801d624:	3301      	adds	r3, #1
 801d626:	461c      	mov	r4, r3
 801d628:	930a      	str	r3, [sp, #40]	; 0x28
 801d62a:	9b02      	ldr	r3, [sp, #8]
 801d62c:	4413      	add	r3, r2
 801d62e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d630:	9302      	str	r3, [sp, #8]
 801d632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d634:	4413      	add	r3, r2
 801d636:	930c      	str	r3, [sp, #48]	; 0x30
 801d638:	f7f5 fbca 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801d63c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d63e:	461a      	mov	r2, r3
 801d640:	42a2      	cmp	r2, r4
 801d642:	f300 8228 	bgt.w	801da96 <_DrawBitmap+0x7de>
 801d646:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 801d64a:	f1be 0f00 	cmp.w	lr, #0
 801d64e:	f47f aeba 	bne.w	801d3c6 <_DrawBitmap+0x10e>
 801d652:	e6bb      	b.n	801d3cc <_DrawBitmap+0x114>
 801d654:	930a      	str	r3, [sp, #40]	; 0x28
 801d656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d658:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d65c:	f1c3 0304 	rsb	r3, r3, #4
 801d660:	9202      	str	r2, [sp, #8]
 801d662:	46da      	mov	sl, fp
 801d664:	46cb      	mov	fp, r9
 801d666:	b2db      	uxtb	r3, r3
 801d668:	9121      	str	r1, [sp, #132]	; 0x84
 801d66a:	930c      	str	r3, [sp, #48]	; 0x30
 801d66c:	46d6      	mov	lr, sl
 801d66e:	4657      	mov	r7, sl
 801d670:	4ba3      	ldr	r3, [pc, #652]	; (801d900 <_DrawBitmap+0x648>)
 801d672:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	7814      	ldrb	r4, [r2, #0]
 801d678:	7c1b      	ldrb	r3, [r3, #16]
 801d67a:	9a06      	ldr	r2, [sp, #24]
 801d67c:	f003 0303 	and.w	r3, r3, #3
 801d680:	4094      	lsls	r4, r2
 801d682:	2b01      	cmp	r3, #1
 801d684:	b2e4      	uxtb	r4, r4
 801d686:	f000 809e 	beq.w	801d7c6 <_DrawBitmap+0x50e>
 801d68a:	d37c      	bcc.n	801d786 <_DrawBitmap+0x4ce>
 801d68c:	2b02      	cmp	r3, #2
 801d68e:	d167      	bne.n	801d760 <_DrawBitmap+0x4a8>
 801d690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d694:	9303      	str	r3, [sp, #12]
 801d696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d698:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d69c:	9305      	str	r3, [sp, #20]
 801d69e:	9b08      	ldr	r3, [sp, #32]
 801d6a0:	9d02      	ldr	r5, [sp, #8]
 801d6a2:	9304      	str	r3, [sp, #16]
 801d6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6a6:	eb03 0a02 	add.w	sl, r3, r2
 801d6aa:	9a03      	ldr	r2, [sp, #12]
 801d6ac:	9b03      	ldr	r3, [sp, #12]
 801d6ae:	4591      	cmp	r9, r2
 801d6b0:	bfc8      	it	gt
 801d6b2:	fa5f f982 	uxtbgt.w	r9, r2
 801d6b6:	ebc9 0303 	rsb	r3, r9, r3
 801d6ba:	f109 39ff 	add.w	r9, r9, #4294967295
 801d6be:	9303      	str	r3, [sp, #12]
 801d6c0:	b34f      	cbz	r7, 801d716 <_DrawBitmap+0x45e>
 801d6c2:	fa5f f989 	uxtb.w	r9, r9
 801d6c6:	9e04      	ldr	r6, [sp, #16]
 801d6c8:	f109 0801 	add.w	r8, r9, #1
 801d6cc:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 801d6d0:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801d6d4:	4631      	mov	r1, r6
 801d6d6:	ea4f 1394 	mov.w	r3, r4, lsr #6
 801d6da:	f106 0601 	add.w	r6, r6, #1
 801d6de:	4652      	mov	r2, sl
 801d6e0:	4638      	mov	r0, r7
 801d6e2:	d006      	beq.n	801d6f2 <_DrawBitmap+0x43a>
 801d6e4:	f85b e023 	ldr.w	lr, [fp, r3, lsl #2]
 801d6e8:	68bb      	ldr	r3, [r7, #8]
 801d6ea:	f8a5 e000 	strh.w	lr, [r5]
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	4798      	blx	r3
 801d6f2:	3502      	adds	r5, #2
 801d6f4:	00a4      	lsls	r4, r4, #2
 801d6f6:	4545      	cmp	r5, r8
 801d6f8:	b2e4      	uxtb	r4, r4
 801d6fa:	d1e9      	bne.n	801d6d0 <_DrawBitmap+0x418>
 801d6fc:	9b04      	ldr	r3, [sp, #16]
 801d6fe:	3301      	adds	r3, #1
 801d700:	444b      	add	r3, r9
 801d702:	9304      	str	r3, [sp, #16]
 801d704:	9b03      	ldr	r3, [sp, #12]
 801d706:	b1d3      	cbz	r3, 801d73e <_DrawBitmap+0x486>
 801d708:	9b05      	ldr	r3, [sp, #20]
 801d70a:	f04f 0904 	mov.w	r9, #4
 801d70e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801d712:	9305      	str	r3, [sp, #20]
 801d714:	e7c9      	b.n	801d6aa <_DrawBitmap+0x3f2>
 801d716:	fa5f f989 	uxtb.w	r9, r9
 801d71a:	f109 0101 	add.w	r1, r9, #1
 801d71e:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 801d722:	00a3      	lsls	r3, r4, #2
 801d724:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801d728:	ea4f 1294 	mov.w	r2, r4, lsr #6
 801d72c:	b2dc      	uxtb	r4, r3
 801d72e:	d002      	beq.n	801d736 <_DrawBitmap+0x47e>
 801d730:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 801d734:	802b      	strh	r3, [r5, #0]
 801d736:	3502      	adds	r5, #2
 801d738:	42a9      	cmp	r1, r5
 801d73a:	d1f2      	bne.n	801d722 <_DrawBitmap+0x46a>
 801d73c:	e7de      	b.n	801d6fc <_DrawBitmap+0x444>
 801d73e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d740:	46be      	mov	lr, r7
 801d742:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d744:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d748:	440a      	add	r2, r1
 801d74a:	9907      	ldr	r1, [sp, #28]
 801d74c:	3301      	adds	r3, #1
 801d74e:	9221      	str	r2, [sp, #132]	; 0x84
 801d750:	9a02      	ldr	r2, [sp, #8]
 801d752:	930a      	str	r3, [sp, #40]	; 0x28
 801d754:	440a      	add	r2, r1
 801d756:	9202      	str	r2, [sp, #8]
 801d758:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d75a:	429a      	cmp	r2, r3
 801d75c:	dc88      	bgt.n	801d670 <_DrawBitmap+0x3b8>
 801d75e:	e660      	b.n	801d422 <_DrawBitmap+0x16a>
 801d760:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d762:	46ba      	mov	sl, r7
 801d764:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d768:	440a      	add	r2, r1
 801d76a:	9907      	ldr	r1, [sp, #28]
 801d76c:	3301      	adds	r3, #1
 801d76e:	9221      	str	r2, [sp, #132]	; 0x84
 801d770:	9a02      	ldr	r2, [sp, #8]
 801d772:	930a      	str	r3, [sp, #40]	; 0x28
 801d774:	440a      	add	r2, r1
 801d776:	9202      	str	r2, [sp, #8]
 801d778:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d77a:	429a      	cmp	r2, r3
 801d77c:	f73f af76 	bgt.w	801d66c <_DrawBitmap+0x3b4>
 801d780:	46bb      	mov	fp, r7
 801d782:	46de      	mov	lr, fp
 801d784:	e64d      	b.n	801d422 <_DrawBitmap+0x16a>
 801d786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d788:	9e02      	ldr	r6, [sp, #8]
 801d78a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d78c:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 801d790:	42ab      	cmp	r3, r5
 801d792:	bfc8      	it	gt
 801d794:	b2eb      	uxtbgt	r3, r5
 801d796:	1e58      	subs	r0, r3, #1
 801d798:	1aed      	subs	r5, r5, r3
 801d79a:	1eb3      	subs	r3, r6, #2
 801d79c:	b2c0      	uxtb	r0, r0
 801d79e:	eb06 0140 	add.w	r1, r6, r0, lsl #1
 801d7a2:	09a2      	lsrs	r2, r4, #6
 801d7a4:	00a4      	lsls	r4, r4, #2
 801d7a6:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 801d7aa:	b2e4      	uxtb	r4, r4
 801d7ac:	f823 2f02 	strh.w	r2, [r3, #2]!
 801d7b0:	4299      	cmp	r1, r3
 801d7b2:	d1f6      	bne.n	801d7a2 <_DrawBitmap+0x4ea>
 801d7b4:	3001      	adds	r0, #1
 801d7b6:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801d7ba:	2d00      	cmp	r5, #0
 801d7bc:	d0c1      	beq.n	801d742 <_DrawBitmap+0x48a>
 801d7be:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 801d7c2:	2304      	movs	r3, #4
 801d7c4:	e7e4      	b.n	801d790 <_DrawBitmap+0x4d8>
 801d7c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d7c8:	9b02      	ldr	r3, [sp, #8]
 801d7ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d7cc:	460a      	mov	r2, r1
 801d7ce:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801d7d0:	4282      	cmp	r2, r0
 801d7d2:	bfc8      	it	gt
 801d7d4:	b2c2      	uxtbgt	r2, r0
 801d7d6:	1e51      	subs	r1, r2, #1
 801d7d8:	1a80      	subs	r0, r0, r2
 801d7da:	b2c9      	uxtb	r1, r1
 801d7dc:	3101      	adds	r1, #1
 801d7de:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 801d7e2:	00a2      	lsls	r2, r4, #2
 801d7e4:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801d7e8:	b2d4      	uxtb	r4, r2
 801d7ea:	d003      	beq.n	801d7f4 <_DrawBitmap+0x53c>
 801d7ec:	881a      	ldrh	r2, [r3, #0]
 801d7ee:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 801d7f2:	801a      	strh	r2, [r3, #0]
 801d7f4:	3302      	adds	r3, #2
 801d7f6:	428b      	cmp	r3, r1
 801d7f8:	d1f3      	bne.n	801d7e2 <_DrawBitmap+0x52a>
 801d7fa:	2800      	cmp	r0, #0
 801d7fc:	d0a1      	beq.n	801d742 <_DrawBitmap+0x48a>
 801d7fe:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 801d802:	2204      	movs	r2, #4
 801d804:	e7e4      	b.n	801d7d0 <_DrawBitmap+0x518>
 801d806:	9121      	str	r1, [sp, #132]	; 0x84
 801d808:	46ca      	mov	sl, r9
 801d80a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d80c:	930a      	str	r3, [sp, #40]	; 0x28
 801d80e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801d812:	f1c1 0302 	rsb	r3, r1, #2
 801d816:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 801d81a:	b2d9      	uxtb	r1, r3
 801d81c:	465f      	mov	r7, fp
 801d81e:	4613      	mov	r3, r2
 801d820:	9106      	str	r1, [sp, #24]
 801d822:	3302      	adds	r3, #2
 801d824:	46be      	mov	lr, r7
 801d826:	46cb      	mov	fp, r9
 801d828:	9302      	str	r3, [sp, #8]
 801d82a:	4b35      	ldr	r3, [pc, #212]	; (801d900 <_DrawBitmap+0x648>)
 801d82c:	9a02      	ldr	r2, [sp, #8]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f1a2 0802 	sub.w	r8, r2, #2
 801d834:	9903      	ldr	r1, [sp, #12]
 801d836:	7c1b      	ldrb	r3, [r3, #16]
 801d838:	f89b 2000 	ldrb.w	r2, [fp]
 801d83c:	f003 0303 	and.w	r3, r3, #3
 801d840:	408a      	lsls	r2, r1
 801d842:	2b01      	cmp	r3, #1
 801d844:	b2d4      	uxtb	r4, r2
 801d846:	f000 80cb 	beq.w	801d9e0 <_DrawBitmap+0x728>
 801d84a:	f0c0 8096 	bcc.w	801d97a <_DrawBitmap+0x6c2>
 801d84e:	2b02      	cmp	r3, #2
 801d850:	f040 8083 	bne.w	801d95a <_DrawBitmap+0x6a2>
 801d854:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d858:	440b      	add	r3, r1
 801d85a:	4619      	mov	r1, r3
 801d85c:	9305      	str	r3, [sp, #20]
 801d85e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d860:	2b00      	cmp	r3, #0
 801d862:	f000 80e1 	beq.w	801da28 <_DrawBitmap+0x770>
 801d866:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 801d86a:	f040 8202 	bne.w	801dc72 <_DrawBitmap+0x9ba>
 801d86e:	9b08      	ldr	r3, [sp, #32]
 801d870:	f10b 0601 	add.w	r6, fp, #1
 801d874:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d878:	1c59      	adds	r1, r3, #1
 801d87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d87c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d880:	3b01      	subs	r3, #1
 801d882:	2b01      	cmp	r3, #1
 801d884:	dd4c      	ble.n	801d920 <_DrawBitmap+0x668>
 801d886:	3b02      	subs	r3, #2
 801d888:	2f00      	cmp	r7, #0
 801d88a:	f000 80d1 	beq.w	801da30 <_DrawBitmap+0x778>
 801d88e:	9304      	str	r3, [sp, #16]
 801d890:	085b      	lsrs	r3, r3, #1
 801d892:	1c8a      	adds	r2, r1, #2
 801d894:	f108 0904 	add.w	r9, r8, #4
 801d898:	930c      	str	r3, [sp, #48]	; 0x30
 801d89a:	005b      	lsls	r3, r3, #1
 801d89c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801d8a0:	460d      	mov	r5, r1
 801d8a2:	930d      	str	r3, [sp, #52]	; 0x34
 801d8a4:	18d3      	adds	r3, r2, r3
 801d8a6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
 801d8aa:	920e      	str	r2, [sp, #56]	; 0x38
 801d8ac:	469b      	mov	fp, r3
 801d8ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d8b2:	e01a      	b.n	801d8ea <_DrawBitmap+0x632>
 801d8b4:	f85a e023 	ldr.w	lr, [sl, r3, lsl #2]
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	f829 ec04 	strh.w	lr, [r9, #-4]
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	4798      	blx	r3
 801d8c2:	f014 040f 	ands.w	r4, r4, #15
 801d8c6:	d009      	beq.n	801d8dc <_DrawBitmap+0x624>
 801d8c8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d8cc:	4642      	mov	r2, r8
 801d8ce:	1c69      	adds	r1, r5, #1
 801d8d0:	4638      	mov	r0, r7
 801d8d2:	f829 3c02 	strh.w	r3, [r9, #-2]
 801d8d6:	68bb      	ldr	r3, [r7, #8]
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	4798      	blx	r3
 801d8dc:	3502      	adds	r5, #2
 801d8de:	f109 0904 	add.w	r9, r9, #4
 801d8e2:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801d8e6:	455d      	cmp	r5, fp
 801d8e8:	d00c      	beq.n	801d904 <_DrawBitmap+0x64c>
 801d8ea:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801d8ee:	ea4f 1314 	mov.w	r3, r4, lsr #4
 801d8f2:	4629      	mov	r1, r5
 801d8f4:	4642      	mov	r2, r8
 801d8f6:	4638      	mov	r0, r7
 801d8f8:	d1dc      	bne.n	801d8b4 <_DrawBitmap+0x5fc>
 801d8fa:	2c00      	cmp	r4, #0
 801d8fc:	d0ee      	beq.n	801d8dc <_DrawBitmap+0x624>
 801d8fe:	e7e3      	b.n	801d8c8 <_DrawBitmap+0x610>
 801d900:	20000018 	.word	0x20000018
 801d904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d906:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d908:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d90a:	1c5a      	adds	r2, r3, #1
 801d90c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 801d910:	4401      	add	r1, r0
 801d912:	9804      	ldr	r0, [sp, #16]
 801d914:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 801d918:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801d91c:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 801d920:	b15b      	cbz	r3, 801d93a <_DrawBitmap+0x682>
 801d922:	0924      	lsrs	r4, r4, #4
 801d924:	d009      	beq.n	801d93a <_DrawBitmap+0x682>
 801d926:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d92a:	f8a8 3000 	strh.w	r3, [r8]
 801d92e:	b127      	cbz	r7, 801d93a <_DrawBitmap+0x682>
 801d930:	68bb      	ldr	r3, [r7, #8]
 801d932:	4638      	mov	r0, r7
 801d934:	9a05      	ldr	r2, [sp, #20]
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	4798      	blx	r3
 801d93a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d93c:	46be      	mov	lr, r7
 801d93e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d940:	9907      	ldr	r1, [sp, #28]
 801d942:	4493      	add	fp, r2
 801d944:	9a02      	ldr	r2, [sp, #8]
 801d946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d948:	440a      	add	r2, r1
 801d94a:	3301      	adds	r3, #1
 801d94c:	9202      	str	r2, [sp, #8]
 801d94e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d950:	930a      	str	r3, [sp, #40]	; 0x28
 801d952:	4293      	cmp	r3, r2
 801d954:	f6ff af69 	blt.w	801d82a <_DrawBitmap+0x572>
 801d958:	e563      	b.n	801d422 <_DrawBitmap+0x16a>
 801d95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d95c:	46d9      	mov	r9, fp
 801d95e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801d960:	3301      	adds	r3, #1
 801d962:	461a      	mov	r2, r3
 801d964:	930a      	str	r3, [sp, #40]	; 0x28
 801d966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d968:	428a      	cmp	r2, r1
 801d96a:	4499      	add	r9, r3
 801d96c:	9b07      	ldr	r3, [sp, #28]
 801d96e:	4443      	add	r3, r8
 801d970:	f6ff af57 	blt.w	801d822 <_DrawBitmap+0x56a>
 801d974:	46bb      	mov	fp, r7
 801d976:	46de      	mov	lr, fp
 801d978:	e553      	b.n	801d422 <_DrawBitmap+0x16a>
 801d97a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d050      	beq.n	801da22 <_DrawBitmap+0x76a>
 801d980:	0924      	lsrs	r4, r4, #4
 801d982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d984:	f10b 0201 	add.w	r2, fp, #1
 801d988:	1e5d      	subs	r5, r3, #1
 801d98a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d98e:	f8a8 3000 	strh.w	r3, [r8]
 801d992:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801d996:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801d99a:	2d01      	cmp	r5, #1
 801d99c:	dd18      	ble.n	801d9d0 <_DrawBitmap+0x718>
 801d99e:	106e      	asrs	r6, r5, #1
 801d9a0:	f108 0304 	add.w	r3, r8, #4
 801d9a4:	f005 0501 	and.w	r5, r5, #1
 801d9a8:	1990      	adds	r0, r2, r6
 801d9aa:	4684      	mov	ip, r0
 801d9ac:	0921      	lsrs	r1, r4, #4
 801d9ae:	f004 040f 	and.w	r4, r4, #15
 801d9b2:	3304      	adds	r3, #4
 801d9b4:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
 801d9b8:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801d9bc:	f823 0c08 	strh.w	r0, [r3, #-8]
 801d9c0:	f823 1c06 	strh.w	r1, [r3, #-6]
 801d9c4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 801d9c8:	4562      	cmp	r2, ip
 801d9ca:	d1ef      	bne.n	801d9ac <_DrawBitmap+0x6f4>
 801d9cc:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 801d9d0:	2d00      	cmp	r5, #0
 801d9d2:	d0b4      	beq.n	801d93e <_DrawBitmap+0x686>
 801d9d4:	0924      	lsrs	r4, r4, #4
 801d9d6:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801d9da:	f8a8 3000 	strh.w	r3, [r8]
 801d9de:	e7ae      	b.n	801d93e <_DrawBitmap+0x686>
 801d9e0:	9b06      	ldr	r3, [sp, #24]
 801d9e2:	4658      	mov	r0, fp
 801d9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d9e6:	428b      	cmp	r3, r1
 801d9e8:	bfc8      	it	gt
 801d9ea:	b2cb      	uxtbgt	r3, r1
 801d9ec:	1e5a      	subs	r2, r3, #1
 801d9ee:	1ac9      	subs	r1, r1, r3
 801d9f0:	b2d2      	uxtb	r2, r2
 801d9f2:	3201      	adds	r2, #1
 801d9f4:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 801d9f8:	0123      	lsls	r3, r4, #4
 801d9fa:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801d9fe:	b2dc      	uxtb	r4, r3
 801da00:	d005      	beq.n	801da0e <_DrawBitmap+0x756>
 801da02:	f8b8 3000 	ldrh.w	r3, [r8]
 801da06:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 801da0a:	f8a8 3000 	strh.w	r3, [r8]
 801da0e:	f108 0802 	add.w	r8, r8, #2
 801da12:	4590      	cmp	r8, r2
 801da14:	d1f0      	bne.n	801d9f8 <_DrawBitmap+0x740>
 801da16:	2900      	cmp	r1, #0
 801da18:	d091      	beq.n	801d93e <_DrawBitmap+0x686>
 801da1a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801da1e:	2302      	movs	r3, #2
 801da20:	e7e1      	b.n	801d9e6 <_DrawBitmap+0x72e>
 801da22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801da24:	465a      	mov	r2, fp
 801da26:	e7b8      	b.n	801d99a <_DrawBitmap+0x6e2>
 801da28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da2a:	465e      	mov	r6, fp
 801da2c:	9908      	ldr	r1, [sp, #32]
 801da2e:	e728      	b.n	801d882 <_DrawBitmap+0x5ca>
 801da30:	461a      	mov	r2, r3
 801da32:	9304      	str	r3, [sp, #16]
 801da34:	f108 0304 	add.w	r3, r8, #4
 801da38:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 801da3c:	f10e 0c01 	add.w	ip, lr, #1
 801da40:	eb06 000c 	add.w	r0, r6, ip
 801da44:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 801da48:	ea4f 1214 	mov.w	r2, r4, lsr #4
 801da4c:	d003      	beq.n	801da56 <_DrawBitmap+0x79e>
 801da4e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801da52:	f823 2c04 	strh.w	r2, [r3, #-4]
 801da56:	f014 040f 	ands.w	r4, r4, #15
 801da5a:	d003      	beq.n	801da64 <_DrawBitmap+0x7ac>
 801da5c:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
 801da60:	f823 2c02 	strh.w	r2, [r3, #-2]
 801da64:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 801da68:	3304      	adds	r3, #4
 801da6a:	42b0      	cmp	r0, r6
 801da6c:	d1ea      	bne.n	801da44 <_DrawBitmap+0x78c>
 801da6e:	3102      	adds	r1, #2
 801da70:	9b04      	ldr	r3, [sp, #16]
 801da72:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 801da76:	eba3 034e 	sub.w	r3, r3, lr, lsl #1
 801da7a:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 801da7e:	e74f      	b.n	801d920 <_DrawBitmap+0x668>
 801da80:	930a      	str	r3, [sp, #40]	; 0x28
 801da82:	460b      	mov	r3, r1
 801da84:	46ca      	mov	sl, r9
 801da86:	9202      	str	r2, [sp, #8]
 801da88:	3301      	adds	r3, #1
 801da8a:	9121      	str	r1, [sp, #132]	; 0x84
 801da8c:	930c      	str	r3, [sp, #48]	; 0x30
 801da8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801da90:	f1c3 0308 	rsb	r3, r3, #8
 801da94:	930e      	str	r3, [sp, #56]	; 0x38
 801da96:	4b92      	ldr	r3, [pc, #584]	; (801dce0 <_DrawBitmap+0xa28>)
 801da98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801da9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	440a      	add	r2, r1
 801daa0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801daa2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801daa4:	9204      	str	r2, [sp, #16]
 801daa6:	f7f5 f97f 	bl	8012da8 <GUI_ALLOC_LockH>
 801daaa:	4b8d      	ldr	r3, [pc, #564]	; (801dce0 <_DrawBitmap+0xa28>)
 801daac:	f104 38ff 	add.w	r8, r4, #4294967295
 801dab0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	498b      	ldr	r1, [pc, #556]	; (801dce4 <_DrawBitmap+0xa2c>)
 801dab8:	7c1b      	ldrb	r3, [r3, #16]
 801daba:	5c8c      	ldrb	r4, [r1, r2]
 801dabc:	f003 0303 	and.w	r3, r3, #3
 801dac0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801dac2:	9011      	str	r0, [sp, #68]	; 0x44
 801dac4:	2b02      	cmp	r3, #2
 801dac6:	fa44 f402 	asr.w	r4, r4, r2
 801daca:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801dace:	d072      	beq.n	801dbb6 <_DrawBitmap+0x8fe>
 801dad0:	2b03      	cmp	r3, #3
 801dad2:	d01f      	beq.n	801db14 <_DrawBitmap+0x85c>
 801dad4:	2b01      	cmp	r3, #1
 801dad6:	d01d      	beq.n	801db14 <_DrawBitmap+0x85c>
 801dad8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dada:	9e02      	ldr	r6, [sp, #8]
 801dadc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801dade:	42a8      	cmp	r0, r5
 801dae0:	4631      	mov	r1, r6
 801dae2:	bf28      	it	cs
 801dae4:	4628      	movcs	r0, r5
 801dae6:	1a2d      	subs	r5, r5, r0
 801dae8:	4602      	mov	r2, r0
 801daea:	f004 0301 	and.w	r3, r4, #1
 801daee:	3a01      	subs	r2, #1
 801daf0:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801daf4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 801daf8:	f821 3b02 	strh.w	r3, [r1], #2
 801dafc:	d1f5      	bne.n	801daea <_DrawBitmap+0x832>
 801dafe:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801db02:	2d00      	cmp	r5, #0
 801db04:	f43f ad8b 	beq.w	801d61e <_DrawBitmap+0x366>
 801db08:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 801db0c:	2008      	movs	r0, #8
 801db0e:	4a75      	ldr	r2, [pc, #468]	; (801dce4 <_DrawBitmap+0xa2c>)
 801db10:	5cd4      	ldrb	r4, [r2, r3]
 801db12:	e7e4      	b.n	801dade <_DrawBitmap+0x826>
 801db14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801db16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db18:	9205      	str	r2, [sp, #20]
 801db1a:	9a02      	ldr	r2, [sp, #8]
 801db1c:	691b      	ldr	r3, [r3, #16]
 801db1e:	9203      	str	r2, [sp, #12]
 801db20:	9a08      	ldr	r2, [sp, #32]
 801db22:	689b      	ldr	r3, [r3, #8]
 801db24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801db28:	9206      	str	r2, [sp, #24]
 801db2a:	4798      	blx	r3
 801db2c:	b283      	uxth	r3, r0
 801db2e:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801db32:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801db36:	469a      	mov	sl, r3
 801db38:	45c8      	cmp	r8, r9
 801db3a:	bf28      	it	cs
 801db3c:	46c8      	movcs	r8, r9
 801db3e:	ebc8 0909 	rsb	r9, r8, r9
 801db42:	f1bb 0f00 	cmp.w	fp, #0
 801db46:	f43f ad51 	beq.w	801d5ec <_DrawBitmap+0x334>
 801db4a:	4645      	mov	r5, r8
 801db4c:	9e03      	ldr	r6, [sp, #12]
 801db4e:	9f06      	ldr	r7, [sp, #24]
 801db50:	e005      	b.n	801db5e <_DrawBitmap+0x8a6>
 801db52:	3d01      	subs	r5, #1
 801db54:	f106 0602 	add.w	r6, r6, #2
 801db58:	f107 0701 	add.w	r7, r7, #1
 801db5c:	d016      	beq.n	801db8c <_DrawBitmap+0x8d4>
 801db5e:	f014 0f01 	tst.w	r4, #1
 801db62:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801db66:	d0f4      	beq.n	801db52 <_DrawBitmap+0x89a>
 801db68:	f8db 3008 	ldr.w	r3, [fp, #8]
 801db6c:	4639      	mov	r1, r7
 801db6e:	9a04      	ldr	r2, [sp, #16]
 801db70:	4658      	mov	r0, fp
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	3602      	adds	r6, #2
 801db76:	4798      	blx	r3
 801db78:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 801db7c:	3d01      	subs	r5, #1
 801db7e:	f107 0701 	add.w	r7, r7, #1
 801db82:	ea8a 0303 	eor.w	r3, sl, r3
 801db86:	f826 3c02 	strh.w	r3, [r6, #-2]
 801db8a:	d1e8      	bne.n	801db5e <_DrawBitmap+0x8a6>
 801db8c:	9b03      	ldr	r3, [sp, #12]
 801db8e:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 801db92:	9303      	str	r3, [sp, #12]
 801db94:	9b06      	ldr	r3, [sp, #24]
 801db96:	4443      	add	r3, r8
 801db98:	9306      	str	r3, [sp, #24]
 801db9a:	f1b9 0f00 	cmp.w	r9, #0
 801db9e:	f43f ad3c 	beq.w	801d61a <_DrawBitmap+0x362>
 801dba2:	9b05      	ldr	r3, [sp, #20]
 801dba4:	f04f 0808 	mov.w	r8, #8
 801dba8:	4a4e      	ldr	r2, [pc, #312]	; (801dce4 <_DrawBitmap+0xa2c>)
 801dbaa:	781b      	ldrb	r3, [r3, #0]
 801dbac:	5cd4      	ldrb	r4, [r2, r3]
 801dbae:	9b05      	ldr	r3, [sp, #20]
 801dbb0:	3301      	adds	r3, #1
 801dbb2:	9305      	str	r3, [sp, #20]
 801dbb4:	e7c0      	b.n	801db38 <_DrawBitmap+0x880>
 801dbb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801dbb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dbba:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801dbbe:	42bd      	cmp	r5, r7
 801dbc0:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbc4:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
 801dbc8:	4698      	mov	r8, r3
 801dbca:	bf28      	it	cs
 801dbcc:	463d      	movcs	r5, r7
 801dbce:	9e02      	ldr	r6, [sp, #8]
 801dbd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dbd4:	f8dd a010 	ldr.w	sl, [sp, #16]
 801dbd8:	1b7f      	subs	r7, r7, r5
 801dbda:	f1bb 0f00 	cmp.w	fp, #0
 801dbde:	d02b      	beq.n	801dc38 <_DrawBitmap+0x980>
 801dbe0:	b944      	cbnz	r4, 801dbf4 <_DrawBitmap+0x93c>
 801dbe2:	e036      	b.n	801dc52 <_DrawBitmap+0x99a>
 801dbe4:	3d01      	subs	r5, #1
 801dbe6:	f109 0901 	add.w	r9, r9, #1
 801dbea:	f106 0602 	add.w	r6, r6, #2
 801dbee:	d012      	beq.n	801dc16 <_DrawBitmap+0x95e>
 801dbf0:	0864      	lsrs	r4, r4, #1
 801dbf2:	d02e      	beq.n	801dc52 <_DrawBitmap+0x99a>
 801dbf4:	07e2      	lsls	r2, r4, #31
 801dbf6:	d5f5      	bpl.n	801dbe4 <_DrawBitmap+0x92c>
 801dbf8:	f8db 3008 	ldr.w	r3, [fp, #8]
 801dbfc:	4649      	mov	r1, r9
 801dbfe:	4652      	mov	r2, sl
 801dc00:	4658      	mov	r0, fp
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	f109 0901 	add.w	r9, r9, #1
 801dc08:	4798      	blx	r3
 801dc0a:	3d01      	subs	r5, #1
 801dc0c:	f8a6 8000 	strh.w	r8, [r6]
 801dc10:	f106 0602 	add.w	r6, r6, #2
 801dc14:	d1ec      	bne.n	801dbf0 <_DrawBitmap+0x938>
 801dc16:	2f00      	cmp	r7, #0
 801dc18:	f43f acff 	beq.w	801d61a <_DrawBitmap+0x362>
 801dc1c:	9a03      	ldr	r2, [sp, #12]
 801dc1e:	2508      	movs	r5, #8
 801dc20:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dc24:	42bd      	cmp	r5, r7
 801dc26:	9203      	str	r2, [sp, #12]
 801dc28:	bf28      	it	cs
 801dc2a:	463d      	movcs	r5, r7
 801dc2c:	4a2d      	ldr	r2, [pc, #180]	; (801dce4 <_DrawBitmap+0xa2c>)
 801dc2e:	1b7f      	subs	r7, r7, r5
 801dc30:	5cd4      	ldrb	r4, [r2, r3]
 801dc32:	f1bb 0f00 	cmp.w	fp, #0
 801dc36:	d1d3      	bne.n	801dbe0 <_DrawBitmap+0x928>
 801dc38:	b914      	cbnz	r4, 801dc40 <_DrawBitmap+0x988>
 801dc3a:	e00e      	b.n	801dc5a <_DrawBitmap+0x9a2>
 801dc3c:	0864      	lsrs	r4, r4, #1
 801dc3e:	d00c      	beq.n	801dc5a <_DrawBitmap+0x9a2>
 801dc40:	07e3      	lsls	r3, r4, #31
 801dc42:	f106 0602 	add.w	r6, r6, #2
 801dc46:	bf48      	it	mi
 801dc48:	f826 8c02 	strhmi.w	r8, [r6, #-2]
 801dc4c:	3d01      	subs	r5, #1
 801dc4e:	d1f5      	bne.n	801dc3c <_DrawBitmap+0x984>
 801dc50:	e7e1      	b.n	801dc16 <_DrawBitmap+0x95e>
 801dc52:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801dc56:	44a9      	add	r9, r5
 801dc58:	e7dd      	b.n	801dc16 <_DrawBitmap+0x95e>
 801dc5a:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801dc5e:	e7da      	b.n	801dc16 <_DrawBitmap+0x95e>
 801dc60:	4b21      	ldr	r3, [pc, #132]	; (801dce8 <_DrawBitmap+0xa30>)
 801dc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	9802      	ldr	r0, [sp, #8]
 801dc68:	4798      	blx	r3
 801dc6a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 801dc6e:	4658      	mov	r0, fp
 801dc70:	e468      	b.n	801d544 <_DrawBitmap+0x28c>
 801dc72:	0924      	lsrs	r4, r4, #4
 801dc74:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801dc78:	f8a8 3000 	strh.w	r3, [r8]
 801dc7c:	2f00      	cmp	r7, #0
 801dc7e:	f43f adf6 	beq.w	801d86e <_DrawBitmap+0x5b6>
 801dc82:	68bb      	ldr	r3, [r7, #8]
 801dc84:	460a      	mov	r2, r1
 801dc86:	4638      	mov	r0, r7
 801dc88:	9908      	ldr	r1, [sp, #32]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	4798      	blx	r3
 801dc8e:	e5ee      	b.n	801d86e <_DrawBitmap+0x5b6>
 801dc90:	9903      	ldr	r1, [sp, #12]
 801dc92:	9b02      	ldr	r3, [sp, #8]
 801dc94:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dc98:	b102      	cbz	r2, 801dc9c <_DrawBitmap+0x9e4>
 801dc9a:	801a      	strh	r2, [r3, #0]
 801dc9c:	3302      	adds	r3, #2
 801dc9e:	42b3      	cmp	r3, r6
 801dca0:	d1f8      	bne.n	801dc94 <_DrawBitmap+0x9dc>
 801dca2:	e44e      	b.n	801d542 <_DrawBitmap+0x28a>
 801dca4:	4b11      	ldr	r3, [pc, #68]	; (801dcec <_DrawBitmap+0xa34>)
 801dca6:	681c      	ldr	r4, [r3, #0]
 801dca8:	b16c      	cbz	r4, 801dcc6 <_DrawBitmap+0xa0e>
 801dcaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dcac:	9a07      	ldr	r2, [sp, #28]
 801dcae:	9301      	str	r3, [sp, #4]
 801dcb0:	9200      	str	r2, [sp, #0]
 801dcb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dcb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcb6:	9921      	ldr	r1, [sp, #132]	; 0x84
 801dcb8:	9802      	ldr	r0, [sp, #8]
 801dcba:	47a0      	blx	r4
 801dcbc:	f7ff bb86 	b.w	801d3cc <_DrawBitmap+0x114>
 801dcc0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dcc2:	f7ff bb7f 	b.w	801d3c4 <_DrawBitmap+0x10c>
 801dcc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	f77f ab7f 	ble.w	801d3cc <_DrawBitmap+0x114>
 801dcce:	f7ff bbc6 	b.w	801d45e <_DrawBitmap+0x1a6>
 801dcd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	f47f ab76 	bne.w	801d3c6 <_DrawBitmap+0x10e>
 801dcda:	f7ff bb77 	b.w	801d3cc <_DrawBitmap+0x114>
 801dcde:	bf00      	nop
 801dce0:	20000018 	.word	0x20000018
 801dce4:	0803473c 	.word	0x0803473c
 801dce8:	2000004c 	.word	0x2000004c
 801dcec:	200003dc 	.word	0x200003dc

0801dcf0 <_GetDevProp>:
 801dcf0:	2908      	cmp	r1, #8
 801dcf2:	d101      	bne.n	801dcf8 <_GetDevProp+0x8>
 801dcf4:	2010      	movs	r0, #16
 801dcf6:	4770      	bx	lr
 801dcf8:	6800      	ldr	r0, [r0, #0]
 801dcfa:	b110      	cbz	r0, 801dd02 <_GetDevProp+0x12>
 801dcfc:	68c3      	ldr	r3, [r0, #12]
 801dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd00:	4718      	bx	r3
 801dd02:	f04f 30ff 	mov.w	r0, #4294967295
 801dd06:	4770      	bx	lr

0801dd08 <_GetPixelIndex>:
 801dd08:	4b0e      	ldr	r3, [pc, #56]	; (801dd44 <_GetPixelIndex+0x3c>)
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	b570      	push	{r4, r5, r6, lr}
 801dd0e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801dd10:	b082      	sub	sp, #8
 801dd12:	460e      	mov	r6, r1
 801dd14:	4614      	mov	r4, r2
 801dd16:	f7f5 f847 	bl	8012da8 <GUI_ALLOC_LockH>
 801dd1a:	4605      	mov	r5, r0
 801dd1c:	a802      	add	r0, sp, #8
 801dd1e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 801dd22:	68eb      	ldr	r3, [r5, #12]
 801dd24:	1aa2      	subs	r2, r4, r2
 801dd26:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 801dd2a:	f840 5d04 	str.w	r5, [r0, #-4]!
 801dd2e:	fb03 f302 	mul.w	r3, r3, r2
 801dd32:	1b34      	subs	r4, r6, r4
 801dd34:	3318      	adds	r3, #24
 801dd36:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801dd3a:	f7f5 f849 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801dd3e:	5b28      	ldrh	r0, [r5, r4]
 801dd40:	b002      	add	sp, #8
 801dd42:	bd70      	pop	{r4, r5, r6, pc}
 801dd44:	20000018 	.word	0x20000018

0801dd48 <_SetPixelIndex>:
 801dd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd4c:	4c1b      	ldr	r4, [pc, #108]	; (801ddbc <_SetPixelIndex+0x74>)
 801dd4e:	4699      	mov	r9, r3
 801dd50:	b083      	sub	sp, #12
 801dd52:	460f      	mov	r7, r1
 801dd54:	6823      	ldr	r3, [r4, #0]
 801dd56:	4690      	mov	r8, r2
 801dd58:	ae02      	add	r6, sp, #8
 801dd5a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801dd5c:	f7f5 f824 	bl	8012da8 <GUI_ALLOC_LockH>
 801dd60:	6823      	ldr	r3, [r4, #0]
 801dd62:	9000      	str	r0, [sp, #0]
 801dd64:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801dd66:	f7f5 f81f 	bl	8012da8 <GUI_ALLOC_LockH>
 801dd6a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801dd6e:	68c1      	ldr	r1, [r0, #12]
 801dd70:	4605      	mov	r5, r0
 801dd72:	ebc2 0208 	rsb	r2, r2, r8
 801dd76:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801dd7a:	f846 0d04 	str.w	r0, [r6, #-4]!
 801dd7e:	4630      	mov	r0, r6
 801dd80:	fb01 f202 	mul.w	r2, r1, r2
 801dd84:	1b3c      	subs	r4, r7, r4
 801dd86:	3218      	adds	r2, #24
 801dd88:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801dd8c:	f7f5 f820 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801dd90:	9b00      	ldr	r3, [sp, #0]
 801dd92:	f825 9004 	strh.w	r9, [r5, r4]
 801dd96:	6958      	ldr	r0, [r3, #20]
 801dd98:	b150      	cbz	r0, 801ddb0 <_SetPixelIndex+0x68>
 801dd9a:	f7f5 f805 	bl	8012da8 <GUI_ALLOC_LockH>
 801dd9e:	9001      	str	r0, [sp, #4]
 801dda0:	6883      	ldr	r3, [r0, #8]
 801dda2:	4642      	mov	r2, r8
 801dda4:	4639      	mov	r1, r7
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	4798      	blx	r3
 801ddaa:	4630      	mov	r0, r6
 801ddac:	f7f5 f810 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ddb0:	4668      	mov	r0, sp
 801ddb2:	f7f5 f80d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ddb6:	b003      	add	sp, #12
 801ddb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ddbc:	20000018 	.word	0x20000018

0801ddc0 <_XorPixel>:
 801ddc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddc4:	4c1e      	ldr	r4, [pc, #120]	; (801de40 <_XorPixel+0x80>)
 801ddc6:	b083      	sub	sp, #12
 801ddc8:	4681      	mov	r9, r0
 801ddca:	460f      	mov	r7, r1
 801ddcc:	6823      	ldr	r3, [r4, #0]
 801ddce:	4690      	mov	r8, r2
 801ddd0:	ae02      	add	r6, sp, #8
 801ddd2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801ddd4:	f7f4 ffe8 	bl	8012da8 <GUI_ALLOC_LockH>
 801ddd8:	6823      	ldr	r3, [r4, #0]
 801ddda:	9000      	str	r0, [sp, #0]
 801dddc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801ddde:	f7f4 ffe3 	bl	8012da8 <GUI_ALLOC_LockH>
 801dde2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801dde6:	68c2      	ldr	r2, [r0, #12]
 801dde8:	4605      	mov	r5, r0
 801ddea:	ebc3 0308 	rsb	r3, r3, r8
 801ddee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ddf2:	f846 0d04 	str.w	r0, [r6, #-4]!
 801ddf6:	4630      	mov	r0, r6
 801ddf8:	fb02 f303 	mul.w	r3, r2, r3
 801ddfc:	1b3c      	subs	r4, r7, r4
 801ddfe:	3318      	adds	r3, #24
 801de00:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801de04:	f7f4 ffe4 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801de08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de0c:	689b      	ldr	r3, [r3, #8]
 801de0e:	4798      	blx	r3
 801de10:	5b2b      	ldrh	r3, [r5, r4]
 801de12:	9a00      	ldr	r2, [sp, #0]
 801de14:	4043      	eors	r3, r0
 801de16:	6950      	ldr	r0, [r2, #20]
 801de18:	532b      	strh	r3, [r5, r4]
 801de1a:	b150      	cbz	r0, 801de32 <_XorPixel+0x72>
 801de1c:	f7f4 ffc4 	bl	8012da8 <GUI_ALLOC_LockH>
 801de20:	9001      	str	r0, [sp, #4]
 801de22:	6883      	ldr	r3, [r0, #8]
 801de24:	4642      	mov	r2, r8
 801de26:	4639      	mov	r1, r7
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	4798      	blx	r3
 801de2c:	4630      	mov	r0, r6
 801de2e:	f7f4 ffcf 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801de32:	4668      	mov	r0, sp
 801de34:	f7f4 ffcc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801de38:	b003      	add	sp, #12
 801de3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de3e:	bf00      	nop
 801de40:	20000018 	.word	0x20000018

0801de44 <_FillRect>:
 801de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de48:	4f5a      	ldr	r7, [pc, #360]	; (801dfb4 <_FillRect+0x170>)
 801de4a:	4689      	mov	r9, r1
 801de4c:	4615      	mov	r5, r2
 801de4e:	b089      	sub	sp, #36	; 0x24
 801de50:	683a      	ldr	r2, [r7, #0]
 801de52:	ebc9 0303 	rsb	r3, r9, r3
 801de56:	4683      	mov	fp, r0
 801de58:	f10d 0820 	add.w	r8, sp, #32
 801de5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801de5e:	461c      	mov	r4, r3
 801de60:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801de62:	f8d1 a000 	ldr.w	sl, [r1]
 801de66:	1c66      	adds	r6, r4, #1
 801de68:	9305      	str	r3, [sp, #20]
 801de6a:	f7f4 ff9d 	bl	8012da8 <GUI_ALLOC_LockH>
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	9006      	str	r0, [sp, #24]
 801de72:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801de74:	f7f4 ff98 	bl	8012da8 <GUI_ALLOC_LockH>
 801de78:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801de7c:	68c2      	ldr	r2, [r0, #12]
 801de7e:	4601      	mov	r1, r0
 801de80:	1aeb      	subs	r3, r5, r3
 801de82:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801de86:	f848 0d04 	str.w	r0, [r8, #-4]!
 801de8a:	4640      	mov	r0, r8
 801de8c:	fb02 f303 	mul.w	r3, r2, r3
 801de90:	ebc4 0409 	rsb	r4, r4, r9
 801de94:	3318      	adds	r3, #24
 801de96:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801de9a:	18cc      	adds	r4, r1, r3
 801de9c:	f7f4 ff98 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801dea0:	9b06      	ldr	r3, [sp, #24]
 801dea2:	6958      	ldr	r0, [r3, #20]
 801dea4:	68db      	ldr	r3, [r3, #12]
 801dea6:	9302      	str	r3, [sp, #8]
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d16f      	bne.n	801df8c <_FillRect+0x148>
 801deac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801deae:	429d      	cmp	r5, r3
 801deb0:	dc5e      	bgt.n	801df70 <_FillRect+0x12c>
 801deb2:	fa1f f38a 	uxth.w	r3, sl
 801deb6:	9304      	str	r3, [sp, #16]
 801deb8:	683b      	ldr	r3, [r7, #0]
 801deba:	7c1b      	ldrb	r3, [r3, #16]
 801debc:	07db      	lsls	r3, r3, #31
 801debe:	d55d      	bpl.n	801df7c <_FillRect+0x138>
 801dec0:	f8db 3010 	ldr.w	r3, [fp, #16]
 801dec4:	689b      	ldr	r3, [r3, #8]
 801dec6:	4798      	blx	r3
 801dec8:	f3c4 0340 	ubfx	r3, r4, #1, #1
 801decc:	b280      	uxth	r0, r0
 801dece:	42b3      	cmp	r3, r6
 801ded0:	bf28      	it	cs
 801ded2:	4633      	movcs	r3, r6
 801ded4:	2e03      	cmp	r6, #3
 801ded6:	bf98      	it	ls
 801ded8:	4633      	movls	r3, r6
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d054      	beq.n	801df88 <_FillRect+0x144>
 801dede:	8822      	ldrh	r2, [r4, #0]
 801dee0:	46a4      	mov	ip, r4
 801dee2:	2b01      	cmp	r3, #1
 801dee4:	ea82 0200 	eor.w	r2, r2, r0
 801dee8:	f82c 2b02 	strh.w	r2, [ip], #2
 801deec:	d00c      	beq.n	801df08 <_FillRect+0xc4>
 801deee:	8862      	ldrh	r2, [r4, #2]
 801def0:	2b03      	cmp	r3, #3
 801def2:	f104 0c04 	add.w	ip, r4, #4
 801def6:	ea82 0200 	eor.w	r2, r2, r0
 801defa:	8062      	strh	r2, [r4, #2]
 801defc:	d104      	bne.n	801df08 <_FillRect+0xc4>
 801defe:	88a2      	ldrh	r2, [r4, #4]
 801df00:	f104 0c06 	add.w	ip, r4, #6
 801df04:	4042      	eors	r2, r0
 801df06:	80a2      	strh	r2, [r4, #4]
 801df08:	42b3      	cmp	r3, r6
 801df0a:	d02b      	beq.n	801df64 <_FillRect+0x120>
 801df0c:	ebc3 0a06 	rsb	sl, r3, r6
 801df10:	f1aa 0e02 	sub.w	lr, sl, #2
 801df14:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 801df18:	f10e 0e01 	add.w	lr, lr, #1
 801df1c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801df20:	9203      	str	r2, [sp, #12]
 801df22:	9a05      	ldr	r2, [sp, #20]
 801df24:	4293      	cmp	r3, r2
 801df26:	d018      	beq.n	801df5a <_FillRect+0x116>
 801df28:	f04f 0900 	mov.w	r9, #0
 801df2c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df30:	4649      	mov	r1, r9
 801df32:	f360 090f 	bfi	r9, r0, #0, #16
 801df36:	f1a3 0804 	sub.w	r8, r3, #4
 801df3a:	f360 491f 	bfi	r9, r0, #16, #16
 801df3e:	f858 2f04 	ldr.w	r2, [r8, #4]!
 801df42:	3101      	adds	r1, #1
 801df44:	ea89 0202 	eor.w	r2, r9, r2
 801df48:	458e      	cmp	lr, r1
 801df4a:	f843 2b04 	str.w	r2, [r3], #4
 801df4e:	d8f6      	bhi.n	801df3e <_FillRect+0xfa>
 801df50:	9a03      	ldr	r2, [sp, #12]
 801df52:	4592      	cmp	sl, r2
 801df54:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 801df58:	d004      	beq.n	801df64 <_FillRect+0x120>
 801df5a:	f8bc 3000 	ldrh.w	r3, [ip]
 801df5e:	4058      	eors	r0, r3
 801df60:	f8ac 0000 	strh.w	r0, [ip]
 801df64:	9b02      	ldr	r3, [sp, #8]
 801df66:	3501      	adds	r5, #1
 801df68:	441c      	add	r4, r3
 801df6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801df6c:	42ab      	cmp	r3, r5
 801df6e:	daa3      	bge.n	801deb8 <_FillRect+0x74>
 801df70:	a806      	add	r0, sp, #24
 801df72:	f7f4 ff2d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801df76:	b009      	add	sp, #36	; 0x24
 801df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df7c:	4632      	mov	r2, r6
 801df7e:	9904      	ldr	r1, [sp, #16]
 801df80:	4620      	mov	r0, r4
 801df82:	f7fb fd4b 	bl	8019a1c <GUI__memset16>
 801df86:	e7ed      	b.n	801df64 <_FillRect+0x120>
 801df88:	46a4      	mov	ip, r4
 801df8a:	e7bf      	b.n	801df0c <_FillRect+0xc8>
 801df8c:	f7f4 ff0c 	bl	8012da8 <GUI_ALLOC_LockH>
 801df90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801df92:	4649      	mov	r1, r9
 801df94:	462a      	mov	r2, r5
 801df96:	ebc5 0e03 	rsb	lr, r5, r3
 801df9a:	4633      	mov	r3, r6
 801df9c:	9007      	str	r0, [sp, #28]
 801df9e:	f10e 0e01 	add.w	lr, lr, #1
 801dfa2:	f8cd e000 	str.w	lr, [sp]
 801dfa6:	f000 fa89 	bl	801e4bc <GUI_USAGE_AddRect>
 801dfaa:	4640      	mov	r0, r8
 801dfac:	f7f4 ff10 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801dfb0:	e77c      	b.n	801deac <_FillRect+0x68>
 801dfb2:	bf00      	nop
 801dfb4:	20000018 	.word	0x20000018

0801dfb8 <_DrawHLine>:
 801dfb8:	b500      	push	{lr}
 801dfba:	b083      	sub	sp, #12
 801dfbc:	9200      	str	r2, [sp, #0]
 801dfbe:	f7ff ff41 	bl	801de44 <_FillRect>
 801dfc2:	b003      	add	sp, #12
 801dfc4:	f85d fb04 	ldr.w	pc, [sp], #4

0801dfc8 <_DrawVLine>:
 801dfc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dfcc:	4f37      	ldr	r7, [pc, #220]	; (801e0ac <_DrawVLine+0xe4>)
 801dfce:	4615      	mov	r5, r2
 801dfd0:	b085      	sub	sp, #20
 801dfd2:	4681      	mov	r9, r0
 801dfd4:	683a      	ldr	r2, [r7, #0]
 801dfd6:	461e      	mov	r6, r3
 801dfd8:	4688      	mov	r8, r1
 801dfda:	6e10      	ldr	r0, [r2, #96]	; 0x60
 801dfdc:	f7f4 fee4 	bl	8012da8 <GUI_ALLOC_LockH>
 801dfe0:	6943      	ldr	r3, [r0, #20]
 801dfe2:	9001      	str	r0, [sp, #4]
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d13d      	bne.n	801e066 <_DrawVLine+0x9e>
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	9002      	str	r0, [sp, #8]
 801dfee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801dff0:	f7f4 feda 	bl	8012da8 <GUI_ALLOC_LockH>
 801dff4:	4602      	mov	r2, r0
 801dff6:	a804      	add	r0, sp, #16
 801dff8:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 801dffc:	68d3      	ldr	r3, [r2, #12]
 801dffe:	1b2c      	subs	r4, r5, r4
 801e000:	f840 2d04 	str.w	r2, [r0, #-4]!
 801e004:	fb03 f304 	mul.w	r3, r3, r4
 801e008:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 801e00c:	3318      	adds	r3, #24
 801e00e:	ebc4 0408 	rsb	r4, r4, r8
 801e012:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e016:	18d4      	adds	r4, r2, r3
 801e018:	f7f4 feda 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e01c:	683b      	ldr	r3, [r7, #0]
 801e01e:	7c1a      	ldrb	r2, [r3, #16]
 801e020:	07d2      	lsls	r2, r2, #31
 801e022:	d423      	bmi.n	801e06c <_DrawVLine+0xa4>
 801e024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e026:	9802      	ldr	r0, [sp, #8]
 801e028:	9b01      	ldr	r3, [sp, #4]
 801e02a:	6812      	ldr	r2, [r2, #0]
 801e02c:	68df      	ldr	r7, [r3, #12]
 801e02e:	2800      	cmp	r0, #0
 801e030:	d034      	beq.n	801e09c <_DrawVLine+0xd4>
 801e032:	fa1f f982 	uxth.w	r9, r2
 801e036:	e000      	b.n	801e03a <_DrawVLine+0x72>
 801e038:	9802      	ldr	r0, [sp, #8]
 801e03a:	6883      	ldr	r3, [r0, #8]
 801e03c:	462a      	mov	r2, r5
 801e03e:	3501      	adds	r5, #1
 801e040:	4641      	mov	r1, r8
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	4798      	blx	r3
 801e046:	42ae      	cmp	r6, r5
 801e048:	f8a4 9000 	strh.w	r9, [r4]
 801e04c:	443c      	add	r4, r7
 801e04e:	daf3      	bge.n	801e038 <_DrawVLine+0x70>
 801e050:	a801      	add	r0, sp, #4
 801e052:	f7f4 febd 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e056:	9b02      	ldr	r3, [sp, #8]
 801e058:	b113      	cbz	r3, 801e060 <_DrawVLine+0x98>
 801e05a:	a802      	add	r0, sp, #8
 801e05c:	f7f4 feb8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e060:	b005      	add	sp, #20
 801e062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e066:	f7f4 fe9f 	bl	8012da8 <GUI_ALLOC_LockH>
 801e06a:	e7be      	b.n	801dfea <_DrawVLine+0x22>
 801e06c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e070:	689b      	ldr	r3, [r3, #8]
 801e072:	4798      	blx	r3
 801e074:	b287      	uxth	r7, r0
 801e076:	9b02      	ldr	r3, [sp, #8]
 801e078:	462a      	mov	r2, r5
 801e07a:	4641      	mov	r1, r8
 801e07c:	3501      	adds	r5, #1
 801e07e:	4618      	mov	r0, r3
 801e080:	b113      	cbz	r3, 801e088 <_DrawVLine+0xc0>
 801e082:	689b      	ldr	r3, [r3, #8]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	4798      	blx	r3
 801e088:	8823      	ldrh	r3, [r4, #0]
 801e08a:	42b5      	cmp	r5, r6
 801e08c:	9a01      	ldr	r2, [sp, #4]
 801e08e:	ea83 0307 	eor.w	r3, r3, r7
 801e092:	68d2      	ldr	r2, [r2, #12]
 801e094:	8023      	strh	r3, [r4, #0]
 801e096:	4414      	add	r4, r2
 801e098:	dded      	ble.n	801e076 <_DrawVLine+0xae>
 801e09a:	e7d9      	b.n	801e050 <_DrawVLine+0x88>
 801e09c:	1b73      	subs	r3, r6, r5
 801e09e:	b292      	uxth	r2, r2
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	3b01      	subs	r3, #1
 801e0a4:	8022      	strh	r2, [r4, #0]
 801e0a6:	443c      	add	r4, r7
 801e0a8:	d1fb      	bne.n	801e0a2 <_DrawVLine+0xda>
 801e0aa:	e7d1      	b.n	801e050 <_DrawVLine+0x88>
 801e0ac:	20000018 	.word	0x20000018

0801e0b0 <GUI_MEMDEV__SetAlphaCallback>:
 801e0b0:	4b01      	ldr	r3, [pc, #4]	; (801e0b8 <GUI_MEMDEV__SetAlphaCallback+0x8>)
 801e0b2:	6018      	str	r0, [r3, #0]
 801e0b4:	4770      	bx	lr
 801e0b6:	bf00      	nop
 801e0b8:	200003e0 	.word	0x200003e0

0801e0bc <GUI_MEMDEV_Draw>:
 801e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0c0:	b087      	sub	sp, #28
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	4692      	mov	sl, r2
 801e0c6:	461d      	mov	r5, r3
 801e0c8:	4689      	mov	r9, r1
 801e0ca:	f7fa fa6b 	bl	80185a4 <GUI_Lock>
 801e0ce:	4b57      	ldr	r3, [pc, #348]	; (801e22c <GUI_MEMDEV_Draw+0x170>)
 801e0d0:	681a      	ldr	r2, [r3, #0]
 801e0d2:	4b57      	ldr	r3, [pc, #348]	; (801e230 <GUI_MEMDEV_Draw+0x174>)
 801e0d4:	7c57      	ldrb	r7, [r2, #17]
 801e0d6:	57db      	ldrsb	r3, [r3, r7]
 801e0d8:	4638      	mov	r0, r7
 801e0da:	2b01      	cmp	r3, #1
 801e0dc:	f340 809a 	ble.w	801e214 <GUI_MEMDEV_Draw+0x158>
 801e0e0:	f7fc fdee 	bl	801acc0 <LCD_GetXSizeEx>
 801e0e4:	4606      	mov	r6, r0
 801e0e6:	4638      	mov	r0, r7
 801e0e8:	f7fc fdfa 	bl	801ace0 <LCD_GetYSizeEx>
 801e0ec:	4607      	mov	r7, r0
 801e0ee:	2c00      	cmp	r4, #0
 801e0f0:	f000 808d 	beq.w	801e20e <GUI_MEMDEV_Draw+0x152>
 801e0f4:	a905      	add	r1, sp, #20
 801e0f6:	a804      	add	r0, sp, #16
 801e0f8:	f7f5 fe24 	bl	8013d44 <GUI_GetOrg>
 801e0fc:	9a04      	ldr	r2, [sp, #16]
 801e0fe:	9b05      	ldr	r3, [sp, #20]
 801e100:	4416      	add	r6, r2
 801e102:	f9b4 2000 	ldrsh.w	r2, [r4]
 801e106:	441f      	add	r7, r3
 801e108:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801e10c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801e110:	3e01      	subs	r6, #1
 801e112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e116:	3f01      	subs	r7, #1
 801e118:	4611      	mov	r1, r2
 801e11a:	9202      	str	r2, [sp, #8]
 801e11c:	4618      	mov	r0, r3
 801e11e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e122:	9303      	str	r3, [sp, #12]
 801e124:	4296      	cmp	r6, r2
 801e126:	bfd4      	ite	le
 801e128:	ebc1 0106 	rsble	r1, r1, r6
 801e12c:	ebc1 0102 	rsbgt	r1, r1, r2
 801e130:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e134:	4602      	mov	r2, r0
 801e136:	460e      	mov	r6, r1
 801e138:	429f      	cmp	r7, r3
 801e13a:	bfd4      	ite	le
 801e13c:	ebc2 0207 	rsble	r2, r2, r7
 801e140:	ebc2 0203 	rsbgt	r2, r2, r3
 801e144:	3601      	adds	r6, #1
 801e146:	4617      	mov	r7, r2
 801e148:	3701      	adds	r7, #1
 801e14a:	b905      	cbnz	r5, 801e14e <GUI_MEMDEV_Draw+0x92>
 801e14c:	427d      	negs	r5, r7
 801e14e:	2e00      	cmp	r6, #0
 801e150:	dd4f      	ble.n	801e1f2 <GUI_MEMDEV_Draw+0x136>
 801e152:	2f00      	cmp	r7, #0
 801e154:	dd4d      	ble.n	801e1f2 <GUI_MEMDEV_Draw+0x136>
 801e156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e158:	4632      	mov	r2, r6
 801e15a:	9903      	ldr	r1, [sp, #12]
 801e15c:	9300      	str	r3, [sp, #0]
 801e15e:	462b      	mov	r3, r5
 801e160:	9802      	ldr	r0, [sp, #8]
 801e162:	f7fe fff7 	bl	801d154 <GUI_MEMDEV_CreateEx>
 801e166:	4680      	mov	r8, r0
 801e168:	2800      	cmp	r0, #0
 801e16a:	d048      	beq.n	801e1fe <GUI_MEMDEV_Draw+0x142>
 801e16c:	f000 f90e 	bl	801e38c <GUI_MEMDEV_GetYSize>
 801e170:	4287      	cmp	r7, r0
 801e172:	4606      	mov	r6, r0
 801e174:	d004      	beq.n	801e180 <GUI_MEMDEV_Draw+0xc4>
 801e176:	4b2d      	ldr	r3, [pc, #180]	; (801e22c <GUI_MEMDEV_Draw+0x170>)
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d151      	bne.n	801e224 <GUI_MEMDEV_Draw+0x168>
 801e180:	4640      	mov	r0, r8
 801e182:	463d      	mov	r5, r7
 801e184:	2400      	movs	r4, #0
 801e186:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801e234 <GUI_MEMDEV_Draw+0x178>
 801e18a:	f7ff f82b 	bl	801d1e4 <GUI_MEMDEV_Select>
 801e18e:	e00e      	b.n	801e1ae <GUI_MEMDEV_Draw+0xf2>
 801e190:	1bad      	subs	r5, r5, r6
 801e192:	b9ac      	cbnz	r4, 801e1c0 <GUI_MEMDEV_Draw+0x104>
 801e194:	4650      	mov	r0, sl
 801e196:	4434      	add	r4, r6
 801e198:	47c8      	blx	r9
 801e19a:	f8db 3000 	ldr.w	r3, [fp]
 801e19e:	20ff      	movs	r0, #255	; 0xff
 801e1a0:	b103      	cbz	r3, 801e1a4 <GUI_MEMDEV_Draw+0xe8>
 801e1a2:	4798      	blx	r3
 801e1a4:	4640      	mov	r0, r8
 801e1a6:	f7ff f84d 	bl	801d244 <GUI_MEMDEV_CopyToLCD>
 801e1aa:	42a7      	cmp	r7, r4
 801e1ac:	dd12      	ble.n	801e1d4 <GUI_MEMDEV_Draw+0x118>
 801e1ae:	42ae      	cmp	r6, r5
 801e1b0:	ddee      	ble.n	801e190 <GUI_MEMDEV_Draw+0xd4>
 801e1b2:	4629      	mov	r1, r5
 801e1b4:	4640      	mov	r0, r8
 801e1b6:	f000 f90b 	bl	801e3d0 <GUI_MEMDEV_ReduceYSize>
 801e1ba:	1bad      	subs	r5, r5, r6
 801e1bc:	2c00      	cmp	r4, #0
 801e1be:	d0e9      	beq.n	801e194 <GUI_MEMDEV_Draw+0xd8>
 801e1c0:	9b03      	ldr	r3, [sp, #12]
 801e1c2:	4640      	mov	r0, r8
 801e1c4:	9902      	ldr	r1, [sp, #8]
 801e1c6:	191a      	adds	r2, r3, r4
 801e1c8:	f000 f922 	bl	801e410 <GUI_MEMDEV_SetOrg>
 801e1cc:	4640      	mov	r0, r8
 801e1ce:	f000 f833 	bl	801e238 <GUI_MEMDEV_Clear>
 801e1d2:	e7df      	b.n	801e194 <GUI_MEMDEV_Draw+0xd8>
 801e1d4:	4640      	mov	r0, r8
 801e1d6:	f7fe ff93 	bl	801d100 <GUI_MEMDEV_Delete>
 801e1da:	2000      	movs	r0, #0
 801e1dc:	f7ff f802 	bl	801d1e4 <GUI_MEMDEV_Select>
 801e1e0:	42b7      	cmp	r7, r6
 801e1e2:	d006      	beq.n	801e1f2 <GUI_MEMDEV_Draw+0x136>
 801e1e4:	4b11      	ldr	r3, [pc, #68]	; (801e22c <GUI_MEMDEV_Draw+0x170>)
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801e1ea:	b110      	cbz	r0, 801e1f2 <GUI_MEMDEV_Draw+0x136>
 801e1ec:	2133      	movs	r1, #51	; 0x33
 801e1ee:	f003 ff61 	bl	80220b4 <WM__SendMessageNoPara>
 801e1f2:	f7fa f9cd 	bl	8018590 <GUI_Unlock>
 801e1f6:	2000      	movs	r0, #0
 801e1f8:	b007      	add	sp, #28
 801e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1fe:	4650      	mov	r0, sl
 801e200:	47c8      	blx	r9
 801e202:	f7fa f9c5 	bl	8018590 <GUI_Unlock>
 801e206:	2001      	movs	r0, #1
 801e208:	b007      	add	sp, #28
 801e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e20e:	9403      	str	r4, [sp, #12]
 801e210:	9402      	str	r4, [sp, #8]
 801e212:	e79a      	b.n	801e14a <GUI_MEMDEV_Draw+0x8e>
 801e214:	f7fc fd74 	bl	801ad00 <LCD_GetVXSizeEx>
 801e218:	4606      	mov	r6, r0
 801e21a:	4638      	mov	r0, r7
 801e21c:	f7fc fd80 	bl	801ad20 <LCD_GetVYSizeEx>
 801e220:	4607      	mov	r7, r0
 801e222:	e764      	b.n	801e0ee <GUI_MEMDEV_Draw+0x32>
 801e224:	2132      	movs	r1, #50	; 0x32
 801e226:	f003 ff45 	bl	80220b4 <WM__SendMessageNoPara>
 801e22a:	e7a9      	b.n	801e180 <GUI_MEMDEV_Draw+0xc4>
 801e22c:	20000018 	.word	0x20000018
 801e230:	20046780 	.word	0x20046780
 801e234:	200003e0 	.word	0x200003e0

0801e238 <GUI_MEMDEV_Clear>:
 801e238:	b510      	push	{r4, lr}
 801e23a:	b082      	sub	sp, #8
 801e23c:	b928      	cbnz	r0, 801e24a <GUI_MEMDEV_Clear+0x12>
 801e23e:	4b13      	ldr	r3, [pc, #76]	; (801e28c <GUI_MEMDEV_Clear+0x54>)
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e244:	b914      	cbnz	r4, 801e24c <GUI_MEMDEV_Clear+0x14>
 801e246:	b002      	add	sp, #8
 801e248:	bd10      	pop	{r4, pc}
 801e24a:	4604      	mov	r4, r0
 801e24c:	f7fa f9aa 	bl	80185a4 <GUI_Lock>
 801e250:	4620      	mov	r0, r4
 801e252:	f7f4 fda9 	bl	8012da8 <GUI_ALLOC_LockH>
 801e256:	ab02      	add	r3, sp, #8
 801e258:	6944      	ldr	r4, [r0, #20]
 801e25a:	f843 0d08 	str.w	r0, [r3, #-8]!
 801e25e:	4618      	mov	r0, r3
 801e260:	f7f4 fdb6 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e264:	b91c      	cbnz	r4, 801e26e <GUI_MEMDEV_Clear+0x36>
 801e266:	f7fa f993 	bl	8018590 <GUI_Unlock>
 801e26a:	b002      	add	sp, #8
 801e26c:	bd10      	pop	{r4, pc}
 801e26e:	4620      	mov	r0, r4
 801e270:	ac02      	add	r4, sp, #8
 801e272:	f7f4 fd99 	bl	8012da8 <GUI_ALLOC_LockH>
 801e276:	6882      	ldr	r2, [r0, #8]
 801e278:	f844 0d04 	str.w	r0, [r4, #-4]!
 801e27c:	6893      	ldr	r3, [r2, #8]
 801e27e:	4798      	blx	r3
 801e280:	4620      	mov	r0, r4
 801e282:	f7f4 fda5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e286:	f7fa f983 	bl	8018590 <GUI_Unlock>
 801e28a:	e7ee      	b.n	801e26a <GUI_MEMDEV_Clear+0x32>
 801e28c:	20000018 	.word	0x20000018

0801e290 <GUI_MEMDEV_GetDataPtr>:
 801e290:	b1a0      	cbz	r0, 801e2bc <GUI_MEMDEV_GetDataPtr+0x2c>
 801e292:	b510      	push	{r4, lr}
 801e294:	4604      	mov	r4, r0
 801e296:	b082      	sub	sp, #8
 801e298:	f7fa f984 	bl	80185a4 <GUI_Lock>
 801e29c:	4620      	mov	r0, r4
 801e29e:	f7f4 fd83 	bl	8012da8 <GUI_ALLOC_LockH>
 801e2a2:	ab02      	add	r3, sp, #8
 801e2a4:	f100 0418 	add.w	r4, r0, #24
 801e2a8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e2ac:	4618      	mov	r0, r3
 801e2ae:	f7f4 fd8f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e2b2:	f7fa f96d 	bl	8018590 <GUI_Unlock>
 801e2b6:	4620      	mov	r0, r4
 801e2b8:	b002      	add	sp, #8
 801e2ba:	bd10      	pop	{r4, pc}
 801e2bc:	4770      	bx	lr
 801e2be:	bf00      	nop

0801e2c0 <GUI_MEMDEV_GetXPos>:
 801e2c0:	b510      	push	{r4, lr}
 801e2c2:	4604      	mov	r4, r0
 801e2c4:	b082      	sub	sp, #8
 801e2c6:	f7fa f96d 	bl	80185a4 <GUI_Lock>
 801e2ca:	b17c      	cbz	r4, 801e2ec <GUI_MEMDEV_GetXPos+0x2c>
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	f7f4 fd6b 	bl	8012da8 <GUI_ALLOC_LockH>
 801e2d2:	ab02      	add	r3, sp, #8
 801e2d4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801e2d8:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e2dc:	4618      	mov	r0, r3
 801e2de:	f7f4 fd77 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e2e2:	f7fa f955 	bl	8018590 <GUI_Unlock>
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	b002      	add	sp, #8
 801e2ea:	bd10      	pop	{r4, pc}
 801e2ec:	4b04      	ldr	r3, [pc, #16]	; (801e300 <GUI_MEMDEV_GetXPos+0x40>)
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e2f2:	2c00      	cmp	r4, #0
 801e2f4:	d1ea      	bne.n	801e2cc <GUI_MEMDEV_GetXPos+0xc>
 801e2f6:	f7fa f94b 	bl	8018590 <GUI_Unlock>
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	b002      	add	sp, #8
 801e2fe:	bd10      	pop	{r4, pc}
 801e300:	20000018 	.word	0x20000018

0801e304 <GUI_MEMDEV_GetYPos>:
 801e304:	b510      	push	{r4, lr}
 801e306:	4604      	mov	r4, r0
 801e308:	b082      	sub	sp, #8
 801e30a:	f7fa f94b 	bl	80185a4 <GUI_Lock>
 801e30e:	b17c      	cbz	r4, 801e330 <GUI_MEMDEV_GetYPos+0x2c>
 801e310:	4620      	mov	r0, r4
 801e312:	f7f4 fd49 	bl	8012da8 <GUI_ALLOC_LockH>
 801e316:	ab02      	add	r3, sp, #8
 801e318:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801e31c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e320:	4618      	mov	r0, r3
 801e322:	f7f4 fd55 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e326:	f7fa f933 	bl	8018590 <GUI_Unlock>
 801e32a:	4620      	mov	r0, r4
 801e32c:	b002      	add	sp, #8
 801e32e:	bd10      	pop	{r4, pc}
 801e330:	4b04      	ldr	r3, [pc, #16]	; (801e344 <GUI_MEMDEV_GetYPos+0x40>)
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e336:	2c00      	cmp	r4, #0
 801e338:	d1ea      	bne.n	801e310 <GUI_MEMDEV_GetYPos+0xc>
 801e33a:	f7fa f929 	bl	8018590 <GUI_Unlock>
 801e33e:	4620      	mov	r0, r4
 801e340:	b002      	add	sp, #8
 801e342:	bd10      	pop	{r4, pc}
 801e344:	20000018 	.word	0x20000018

0801e348 <GUI_MEMDEV_GetXSize>:
 801e348:	b510      	push	{r4, lr}
 801e34a:	4604      	mov	r4, r0
 801e34c:	b082      	sub	sp, #8
 801e34e:	f7fa f929 	bl	80185a4 <GUI_Lock>
 801e352:	b17c      	cbz	r4, 801e374 <GUI_MEMDEV_GetXSize+0x2c>
 801e354:	4620      	mov	r0, r4
 801e356:	f7f4 fd27 	bl	8012da8 <GUI_ALLOC_LockH>
 801e35a:	ab02      	add	r3, sp, #8
 801e35c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 801e360:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e364:	4618      	mov	r0, r3
 801e366:	f7f4 fd33 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e36a:	f7fa f911 	bl	8018590 <GUI_Unlock>
 801e36e:	4620      	mov	r0, r4
 801e370:	b002      	add	sp, #8
 801e372:	bd10      	pop	{r4, pc}
 801e374:	4b04      	ldr	r3, [pc, #16]	; (801e388 <GUI_MEMDEV_GetXSize+0x40>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e37a:	2c00      	cmp	r4, #0
 801e37c:	d1ea      	bne.n	801e354 <GUI_MEMDEV_GetXSize+0xc>
 801e37e:	f7fa f907 	bl	8018590 <GUI_Unlock>
 801e382:	4620      	mov	r0, r4
 801e384:	b002      	add	sp, #8
 801e386:	bd10      	pop	{r4, pc}
 801e388:	20000018 	.word	0x20000018

0801e38c <GUI_MEMDEV_GetYSize>:
 801e38c:	b510      	push	{r4, lr}
 801e38e:	4604      	mov	r4, r0
 801e390:	b082      	sub	sp, #8
 801e392:	f7fa f907 	bl	80185a4 <GUI_Lock>
 801e396:	b17c      	cbz	r4, 801e3b8 <GUI_MEMDEV_GetYSize+0x2c>
 801e398:	4620      	mov	r0, r4
 801e39a:	f7f4 fd05 	bl	8012da8 <GUI_ALLOC_LockH>
 801e39e:	ab02      	add	r3, sp, #8
 801e3a0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801e3a4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801e3a8:	4618      	mov	r0, r3
 801e3aa:	f7f4 fd11 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e3ae:	f7fa f8ef 	bl	8018590 <GUI_Unlock>
 801e3b2:	4620      	mov	r0, r4
 801e3b4:	b002      	add	sp, #8
 801e3b6:	bd10      	pop	{r4, pc}
 801e3b8:	4b04      	ldr	r3, [pc, #16]	; (801e3cc <GUI_MEMDEV_GetYSize+0x40>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e3be:	2c00      	cmp	r4, #0
 801e3c0:	d1ea      	bne.n	801e398 <GUI_MEMDEV_GetYSize+0xc>
 801e3c2:	f7fa f8e5 	bl	8018590 <GUI_Unlock>
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	b002      	add	sp, #8
 801e3ca:	bd10      	pop	{r4, pc}
 801e3cc:	20000018 	.word	0x20000018

0801e3d0 <GUI_MEMDEV_ReduceYSize>:
 801e3d0:	b530      	push	{r4, r5, lr}
 801e3d2:	460d      	mov	r5, r1
 801e3d4:	b083      	sub	sp, #12
 801e3d6:	b928      	cbnz	r0, 801e3e4 <GUI_MEMDEV_ReduceYSize+0x14>
 801e3d8:	4b0c      	ldr	r3, [pc, #48]	; (801e40c <GUI_MEMDEV_ReduceYSize+0x3c>)
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e3de:	b914      	cbnz	r4, 801e3e6 <GUI_MEMDEV_ReduceYSize+0x16>
 801e3e0:	b003      	add	sp, #12
 801e3e2:	bd30      	pop	{r4, r5, pc}
 801e3e4:	4604      	mov	r4, r0
 801e3e6:	f7fa f8dd 	bl	80185a4 <GUI_Lock>
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f7f4 fcdc 	bl	8012da8 <GUI_ALLOC_LockH>
 801e3f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801e3f4:	9001      	str	r0, [sp, #4]
 801e3f6:	42ab      	cmp	r3, r5
 801e3f8:	bfc8      	it	gt
 801e3fa:	8145      	strhgt	r5, [r0, #10]
 801e3fc:	a801      	add	r0, sp, #4
 801e3fe:	f7f4 fce7 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e402:	f7fa f8c5 	bl	8018590 <GUI_Unlock>
 801e406:	b003      	add	sp, #12
 801e408:	bd30      	pop	{r4, r5, pc}
 801e40a:	bf00      	nop
 801e40c:	20000018 	.word	0x20000018

0801e410 <GUI_MEMDEV_SetOrg>:
 801e410:	b570      	push	{r4, r5, r6, lr}
 801e412:	460d      	mov	r5, r1
 801e414:	b082      	sub	sp, #8
 801e416:	4616      	mov	r6, r2
 801e418:	b928      	cbnz	r0, 801e426 <GUI_MEMDEV_SetOrg+0x16>
 801e41a:	4b1a      	ldr	r3, [pc, #104]	; (801e484 <GUI_MEMDEV_SetOrg+0x74>)
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801e420:	b914      	cbnz	r4, 801e428 <GUI_MEMDEV_SetOrg+0x18>
 801e422:	b002      	add	sp, #8
 801e424:	bd70      	pop	{r4, r5, r6, pc}
 801e426:	4604      	mov	r4, r0
 801e428:	b236      	sxth	r6, r6
 801e42a:	b22d      	sxth	r5, r5
 801e42c:	f7fa f8ba 	bl	80185a4 <GUI_Lock>
 801e430:	4620      	mov	r0, r4
 801e432:	f7f4 fcb9 	bl	8012da8 <GUI_ALLOC_LockH>
 801e436:	80c6      	strh	r6, [r0, #6]
 801e438:	8085      	strh	r5, [r0, #4]
 801e43a:	9000      	str	r0, [sp, #0]
 801e43c:	f7fc f914 	bl	801a668 <LCD_SetClipRectMax>
 801e440:	9b00      	ldr	r3, [sp, #0]
 801e442:	6958      	ldr	r0, [r3, #20]
 801e444:	b930      	cbnz	r0, 801e454 <GUI_MEMDEV_SetOrg+0x44>
 801e446:	4668      	mov	r0, sp
 801e448:	f7f4 fcc2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e44c:	f7fa f8a0 	bl	8018590 <GUI_Unlock>
 801e450:	b002      	add	sp, #8
 801e452:	bd70      	pop	{r4, r5, r6, pc}
 801e454:	f7f4 fca8 	bl	8012da8 <GUI_ALLOC_LockH>
 801e458:	9b00      	ldr	r3, [sp, #0]
 801e45a:	9001      	str	r0, [sp, #4]
 801e45c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e460:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801e464:	8082      	strh	r2, [r0, #4]
 801e466:	80c3      	strh	r3, [r0, #6]
 801e468:	b113      	cbz	r3, 801e470 <GUI_MEMDEV_SetOrg+0x60>
 801e46a:	b10a      	cbz	r2, 801e470 <GUI_MEMDEV_SetOrg+0x60>
 801e46c:	8005      	strh	r5, [r0, #0]
 801e46e:	8046      	strh	r6, [r0, #2]
 801e470:	a801      	add	r0, sp, #4
 801e472:	f7f4 fcad 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e476:	4668      	mov	r0, sp
 801e478:	f7f4 fcaa 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e47c:	f7fa f888 	bl	8018590 <GUI_Unlock>
 801e480:	e7e6      	b.n	801e450 <GUI_MEMDEV_SetOrg+0x40>
 801e482:	bf00      	nop
 801e484:	20000018 	.word	0x20000018

0801e488 <GUI_USAGE_DecUseCnt>:
 801e488:	b530      	push	{r4, r5, lr}
 801e48a:	4605      	mov	r5, r0
 801e48c:	b083      	sub	sp, #12
 801e48e:	f7fa f889 	bl	80185a4 <GUI_Lock>
 801e492:	4628      	mov	r0, r5
 801e494:	f7f4 fc88 	bl	8012da8 <GUI_ALLOC_LockH>
 801e498:	4603      	mov	r3, r0
 801e49a:	a802      	add	r0, sp, #8
 801e49c:	899c      	ldrh	r4, [r3, #12]
 801e49e:	f840 3d04 	str.w	r3, [r0, #-4]!
 801e4a2:	3c01      	subs	r4, #1
 801e4a4:	b224      	sxth	r4, r4
 801e4a6:	819c      	strh	r4, [r3, #12]
 801e4a8:	f7f4 fc92 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e4ac:	b914      	cbnz	r4, 801e4b4 <GUI_USAGE_DecUseCnt+0x2c>
 801e4ae:	4628      	mov	r0, r5
 801e4b0:	f7f4 fe12 	bl	80130d8 <GUI_ALLOC_Free>
 801e4b4:	f7fa f86c 	bl	8018590 <GUI_Unlock>
 801e4b8:	b003      	add	sp, #12
 801e4ba:	bd30      	pop	{r4, r5, pc}

0801e4bc <GUI_USAGE_AddRect>:
 801e4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4c0:	9c08      	ldr	r4, [sp, #32]
 801e4c2:	4605      	mov	r5, r0
 801e4c4:	4689      	mov	r9, r1
 801e4c6:	4698      	mov	r8, r3
 801e4c8:	68a9      	ldr	r1, [r5, #8]
 801e4ca:	4643      	mov	r3, r8
 801e4cc:	4628      	mov	r0, r5
 801e4ce:	1c56      	adds	r6, r2, #1
 801e4d0:	684f      	ldr	r7, [r1, #4]
 801e4d2:	4649      	mov	r1, r9
 801e4d4:	47b8      	blx	r7
 801e4d6:	3c01      	subs	r4, #1
 801e4d8:	4632      	mov	r2, r6
 801e4da:	d1f5      	bne.n	801e4c8 <GUI_USAGE_AddRect+0xc>
 801e4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e4e0 <GUI_USAGE_BM_AddPixel>:
 801e4e0:	b430      	push	{r4, r5}
 801e4e2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e4e6:	2580      	movs	r5, #128	; 0x80
 801e4e8:	6903      	ldr	r3, [r0, #16]
 801e4ea:	1b12      	subs	r2, r2, r4
 801e4ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e4f0:	fb03 f302 	mul.w	r3, r3, r2
 801e4f4:	1b09      	subs	r1, r1, r4
 801e4f6:	3314      	adds	r3, #20
 801e4f8:	f001 0207 	and.w	r2, r1, #7
 801e4fc:	eb03 01e1 	add.w	r1, r3, r1, asr #3
 801e500:	4115      	asrs	r5, r2
 801e502:	5c43      	ldrb	r3, [r0, r1]
 801e504:	432b      	orrs	r3, r5
 801e506:	bc30      	pop	{r4, r5}
 801e508:	5443      	strb	r3, [r0, r1]
 801e50a:	4770      	bx	lr

0801e50c <GUI_USAGE_BM_GetNextDirty>:
 801e50c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e510:	4293      	cmp	r3, r2
 801e512:	dd3b      	ble.n	801e58c <GUI_USAGE_BM_GetNextDirty+0x80>
 801e514:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e518:	b4f0      	push	{r4, r5, r6, r7}
 801e51a:	680d      	ldr	r5, [r1, #0]
 801e51c:	429d      	cmp	r5, r3
 801e51e:	da32      	bge.n	801e586 <GUI_USAGE_BM_GetNextDirty+0x7a>
 801e520:	10ee      	asrs	r6, r5, #3
 801e522:	6907      	ldr	r7, [r0, #16]
 801e524:	1e5c      	subs	r4, r3, #1
 801e526:	f005 0307 	and.w	r3, r5, #7
 801e52a:	fb07 6202 	mla	r2, r7, r2, r6
 801e52e:	ebc6 06e4 	rsb	r6, r6, r4, asr #3
 801e532:	3214      	adds	r2, #20
 801e534:	5c84      	ldrb	r4, [r0, r2]
 801e536:	3201      	adds	r2, #1
 801e538:	fa04 f303 	lsl.w	r3, r4, r3
 801e53c:	4410      	add	r0, r2
 801e53e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801e542:	d108      	bne.n	801e556 <GUI_USAGE_BM_GetNextDirty+0x4a>
 801e544:	b326      	cbz	r6, 801e590 <GUI_USAGE_BM_GetNextDirty+0x84>
 801e546:	3508      	adds	r5, #8
 801e548:	f810 3b01 	ldrb.w	r3, [r0], #1
 801e54c:	3e01      	subs	r6, #1
 801e54e:	f025 0507 	bic.w	r5, r5, #7
 801e552:	2b00      	cmp	r3, #0
 801e554:	d0f6      	beq.n	801e544 <GUI_USAGE_BM_GetNextDirty+0x38>
 801e556:	061c      	lsls	r4, r3, #24
 801e558:	d434      	bmi.n	801e5c4 <GUI_USAGE_BM_GetNextDirty+0xb8>
 801e55a:	005b      	lsls	r3, r3, #1
 801e55c:	3501      	adds	r5, #1
 801e55e:	b2db      	uxtb	r3, r3
 801e560:	061a      	lsls	r2, r3, #24
 801e562:	d5fa      	bpl.n	801e55a <GUI_USAGE_BM_GetNextDirty+0x4e>
 801e564:	065f      	lsls	r7, r3, #25
 801e566:	462a      	mov	r2, r5
 801e568:	d504      	bpl.n	801e574 <GUI_USAGE_BM_GetNextDirty+0x68>
 801e56a:	005b      	lsls	r3, r3, #1
 801e56c:	3201      	adds	r2, #1
 801e56e:	b2db      	uxtb	r3, r3
 801e570:	065c      	lsls	r4, r3, #25
 801e572:	d4fa      	bmi.n	801e56a <GUI_USAGE_BM_GetNextDirty+0x5e>
 801e574:	f002 0307 	and.w	r3, r2, #7
 801e578:	2b07      	cmp	r3, #7
 801e57a:	d00c      	beq.n	801e596 <GUI_USAGE_BM_GetNextDirty+0x8a>
 801e57c:	1b56      	subs	r6, r2, r5
 801e57e:	600d      	str	r5, [r1, #0]
 801e580:	1c70      	adds	r0, r6, #1
 801e582:	bcf0      	pop	{r4, r5, r6, r7}
 801e584:	4770      	bx	lr
 801e586:	2000      	movs	r0, #0
 801e588:	bcf0      	pop	{r4, r5, r6, r7}
 801e58a:	4770      	bx	lr
 801e58c:	2000      	movs	r0, #0
 801e58e:	4770      	bx	lr
 801e590:	4630      	mov	r0, r6
 801e592:	bcf0      	pop	{r4, r5, r6, r7}
 801e594:	4770      	bx	lr
 801e596:	2e00      	cmp	r6, #0
 801e598:	ddf0      	ble.n	801e57c <GUI_USAGE_BM_GetNextDirty+0x70>
 801e59a:	7804      	ldrb	r4, [r0, #0]
 801e59c:	1c47      	adds	r7, r0, #1
 801e59e:	2cff      	cmp	r4, #255	; 0xff
 801e5a0:	d10d      	bne.n	801e5be <GUI_USAGE_BM_GetNextDirty+0xb2>
 801e5a2:	1983      	adds	r3, r0, r6
 801e5a4:	e003      	b.n	801e5ae <GUI_USAGE_BM_GetNextDirty+0xa2>
 801e5a6:	f817 4b01 	ldrb.w	r4, [r7], #1
 801e5aa:	2cff      	cmp	r4, #255	; 0xff
 801e5ac:	d107      	bne.n	801e5be <GUI_USAGE_BM_GetNextDirty+0xb2>
 801e5ae:	42bb      	cmp	r3, r7
 801e5b0:	f102 0208 	add.w	r2, r2, #8
 801e5b4:	d1f7      	bne.n	801e5a6 <GUI_USAGE_BM_GetNextDirty+0x9a>
 801e5b6:	e7e1      	b.n	801e57c <GUI_USAGE_BM_GetNextDirty+0x70>
 801e5b8:	0064      	lsls	r4, r4, #1
 801e5ba:	3201      	adds	r2, #1
 801e5bc:	b2e4      	uxtb	r4, r4
 801e5be:	0623      	lsls	r3, r4, #24
 801e5c0:	d4fa      	bmi.n	801e5b8 <GUI_USAGE_BM_GetNextDirty+0xac>
 801e5c2:	e7db      	b.n	801e57c <GUI_USAGE_BM_GetNextDirty+0x70>
 801e5c4:	2bff      	cmp	r3, #255	; 0xff
 801e5c6:	d1cd      	bne.n	801e564 <GUI_USAGE_BM_GetNextDirty+0x58>
 801e5c8:	1dea      	adds	r2, r5, #7
 801e5ca:	e7d3      	b.n	801e574 <GUI_USAGE_BM_GetNextDirty+0x68>

0801e5cc <_GUI_USAGE_BM_Delete>:
 801e5cc:	f7f4 bd84 	b.w	80130d8 <GUI_ALLOC_Free>

0801e5d0 <GUI_USAGE_BM_Clear>:
 801e5d0:	4603      	mov	r3, r0
 801e5d2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801e5d6:	2100      	movs	r1, #0
 801e5d8:	3014      	adds	r0, #20
 801e5da:	691b      	ldr	r3, [r3, #16]
 801e5dc:	fb03 f202 	mul.w	r2, r3, r2
 801e5e0:	f006 bf02 	b.w	80253e8 <memset>

0801e5e4 <GUI_USAGE_BM_AddHLine>:
 801e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e5ea:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801e5ee:	1b0c      	subs	r4, r1, r4
 801e5f0:	42ac      	cmp	r4, r5
 801e5f2:	da2a      	bge.n	801e64a <GUI_USAGE_BM_AddHLine+0x66>
 801e5f4:	4423      	add	r3, r4
 801e5f6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801e5fa:	10e7      	asrs	r7, r4, #3
 801e5fc:	21ff      	movs	r1, #255	; 0xff
 801e5fe:	3b01      	subs	r3, #1
 801e600:	1b55      	subs	r5, r2, r5
 801e602:	6902      	ldr	r2, [r0, #16]
 801e604:	f004 0407 	and.w	r4, r4, #7
 801e608:	43de      	mvns	r6, r3
 801e60a:	fb02 7505 	mla	r5, r2, r5, r7
 801e60e:	fa41 f404 	asr.w	r4, r1, r4
 801e612:	f006 0607 	and.w	r6, r6, #7
 801e616:	ebd7 02e3 	rsbs	r2, r7, r3, asr #3
 801e61a:	f105 0514 	add.w	r5, r5, #20
 801e61e:	b2e4      	uxtb	r4, r4
 801e620:	fa01 f606 	lsl.w	r6, r1, r6
 801e624:	eb00 0e05 	add.w	lr, r0, r5
 801e628:	b2f6      	uxtb	r6, r6
 801e62a:	d00f      	beq.n	801e64c <GUI_USAGE_BM_AddHLine+0x68>
 801e62c:	5d43      	ldrb	r3, [r0, r5]
 801e62e:	3a01      	subs	r2, #1
 801e630:	f10e 0701 	add.w	r7, lr, #1
 801e634:	431c      	orrs	r4, r3
 801e636:	2a00      	cmp	r2, #0
 801e638:	5544      	strb	r4, [r0, r5]
 801e63a:	dd03      	ble.n	801e644 <GUI_USAGE_BM_AddHLine+0x60>
 801e63c:	4638      	mov	r0, r7
 801e63e:	4417      	add	r7, r2
 801e640:	f006 fed2 	bl	80253e8 <memset>
 801e644:	783c      	ldrb	r4, [r7, #0]
 801e646:	4334      	orrs	r4, r6
 801e648:	703c      	strb	r4, [r7, #0]
 801e64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e64c:	5d43      	ldrb	r3, [r0, r5]
 801e64e:	4034      	ands	r4, r6
 801e650:	431c      	orrs	r4, r3
 801e652:	5544      	strb	r4, [r0, r5]
 801e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e656:	bf00      	nop

0801e658 <GUI_USAGE_BM_Create>:
 801e658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e65c:	f102 040f 	add.w	r4, r2, #15
 801e660:	4680      	mov	r8, r0
 801e662:	b083      	sub	sp, #12
 801e664:	4691      	mov	r9, r2
 801e666:	1124      	asrs	r4, r4, #4
 801e668:	461e      	mov	r6, r3
 801e66a:	460f      	mov	r7, r1
 801e66c:	0064      	lsls	r4, r4, #1
 801e66e:	fb03 f004 	mul.w	r0, r3, r4
 801e672:	3014      	adds	r0, #20
 801e674:	f7f4 fd50 	bl	8013118 <GUI_ALLOC_AllocZero>
 801e678:	4605      	mov	r5, r0
 801e67a:	b1b8      	cbz	r0, 801e6ac <GUI_USAGE_BM_Create+0x54>
 801e67c:	f7f9 ff92 	bl	80185a4 <GUI_Lock>
 801e680:	4628      	mov	r0, r5
 801e682:	f7f4 fb91 	bl	8012da8 <GUI_ALLOC_LockH>
 801e686:	2301      	movs	r3, #1
 801e688:	4601      	mov	r1, r0
 801e68a:	4a0a      	ldr	r2, [pc, #40]	; (801e6b4 <GUI_USAGE_BM_Create+0x5c>)
 801e68c:	a802      	add	r0, sp, #8
 801e68e:	f8a1 9004 	strh.w	r9, [r1, #4]
 801e692:	f840 1d04 	str.w	r1, [r0, #-4]!
 801e696:	80ce      	strh	r6, [r1, #6]
 801e698:	610c      	str	r4, [r1, #16]
 801e69a:	f8a1 8000 	strh.w	r8, [r1]
 801e69e:	804f      	strh	r7, [r1, #2]
 801e6a0:	608a      	str	r2, [r1, #8]
 801e6a2:	818b      	strh	r3, [r1, #12]
 801e6a4:	f7f4 fb94 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e6a8:	f7f9 ff72 	bl	8018590 <GUI_Unlock>
 801e6ac:	4628      	mov	r0, r5
 801e6ae:	b003      	add	sp, #12
 801e6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6b4:	080346f4 	.word	0x080346f4

0801e6b8 <GUI_MEMDEV__WriteToActiveOpaque>:
 801e6b8:	b900      	cbnz	r0, 801e6bc <GUI_MEMDEV__WriteToActiveOpaque+0x4>
 801e6ba:	4770      	bx	lr
 801e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c0:	b0a3      	sub	sp, #140	; 0x8c
 801e6c2:	468b      	mov	fp, r1
 801e6c4:	4692      	mov	sl, r2
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	f7f4 fb6e 	bl	8012da8 <GUI_ALLOC_LockH>
 801e6cc:	ab22      	add	r3, sp, #136	; 0x88
 801e6ce:	6945      	ldr	r5, [r0, #20]
 801e6d0:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801e6d4:	4618      	mov	r0, r3
 801e6d6:	f7f4 fb7b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e6da:	4620      	mov	r0, r4
 801e6dc:	f7fe fcf4 	bl	801d0c8 <GUI_MEMDEV_GetBitsPerPixel>
 801e6e0:	2808      	cmp	r0, #8
 801e6e2:	4681      	mov	r9, r0
 801e6e4:	dd40      	ble.n	801e768 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801e6e6:	2d00      	cmp	r5, #0
 801e6e8:	d13e      	bne.n	801e768 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801e6ea:	4620      	mov	r0, r4
 801e6ec:	f7f4 fb5c 	bl	8012da8 <GUI_ALLOC_LockH>
 801e6f0:	aa22      	add	r2, sp, #136	; 0x88
 801e6f2:	4603      	mov	r3, r0
 801e6f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e6f8:	f842 0d10 	str.w	r0, [r2, #-16]!
 801e6fc:	4610      	mov	r0, r2
 801e6fe:	920d      	str	r2, [sp, #52]	; 0x34
 801e700:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801e704:	910a      	str	r1, [sp, #40]	; 0x28
 801e706:	9209      	str	r2, [sp, #36]	; 0x24
 801e708:	6819      	ldr	r1, [r3, #0]
 801e70a:	68da      	ldr	r2, [r3, #12]
 801e70c:	690e      	ldr	r6, [r1, #16]
 801e70e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e710:	920e      	str	r2, [sp, #56]	; 0x38
 801e712:	f7f4 fb5d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e716:	4892      	ldr	r0, [pc, #584]	; (801e960 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801e718:	4992      	ldr	r1, [pc, #584]	; (801e964 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>)
 801e71a:	6800      	ldr	r0, [r0, #0]
 801e71c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801e720:	7c40      	ldrb	r0, [r0, #17]
 801e722:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801e726:	690d      	ldr	r5, [r1, #16]
 801e728:	682b      	ldr	r3, [r5, #0]
 801e72a:	930c      	str	r3, [sp, #48]	; 0x30
 801e72c:	f7fc fb9a 	bl	801ae64 <GUI_GetBitsPerPixelEx>
 801e730:	2808      	cmp	r0, #8
 801e732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e734:	d914      	bls.n	801e760 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 801e736:	2810      	cmp	r0, #16
 801e738:	bf8b      	itete	hi
 801e73a:	2220      	movhi	r2, #32
 801e73c:	2210      	movls	r2, #16
 801e73e:	2704      	movhi	r7, #4
 801e740:	2702      	movls	r7, #2
 801e742:	920b      	str	r2, [sp, #44]	; 0x2c
 801e744:	42ae      	cmp	r6, r5
 801e746:	f000 82f8 	beq.w	801ed3a <GUI_MEMDEV__WriteToActiveOpaque+0x682>
 801e74a:	f1b9 0f20 	cmp.w	r9, #32
 801e74e:	f000 81b3 	beq.w	801eab8 <GUI_MEMDEV__WriteToActiveOpaque+0x400>
 801e752:	f1b9 0f10 	cmp.w	r9, #16
 801e756:	f000 8145 	beq.w	801e9e4 <GUI_MEMDEV__WriteToActiveOpaque+0x32c>
 801e75a:	b023      	add	sp, #140	; 0x8c
 801e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e760:	2208      	movs	r2, #8
 801e762:	2701      	movs	r7, #1
 801e764:	920b      	str	r2, [sp, #44]	; 0x2c
 801e766:	e7ed      	b.n	801e744 <GUI_MEMDEV__WriteToActiveOpaque+0x8c>
 801e768:	2100      	movs	r1, #0
 801e76a:	2301      	movs	r3, #1
 801e76c:	4620      	mov	r0, r4
 801e76e:	4e7c      	ldr	r6, [pc, #496]	; (801e960 <GUI_MEMDEV__WriteToActiveOpaque+0x2a8>)
 801e770:	9120      	str	r1, [sp, #128]	; 0x80
 801e772:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 801e776:	910b      	str	r1, [sp, #44]	; 0x2c
 801e778:	9321      	str	r3, [sp, #132]	; 0x84
 801e77a:	930a      	str	r3, [sp, #40]	; 0x28
 801e77c:	f7f4 fb14 	bl	8012da8 <GUI_ALLOC_LockH>
 801e780:	4607      	mov	r7, r0
 801e782:	6830      	ldr	r0, [r6, #0]
 801e784:	683a      	ldr	r2, [r7, #0]
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801e78c:	6912      	ldr	r2, [r2, #16]
 801e78e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e790:	9114      	str	r1, [sp, #80]	; 0x50
 801e792:	693b      	ldr	r3, [r7, #16]
 801e794:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801e798:	7c40      	ldrb	r0, [r0, #17]
 801e79a:	9309      	str	r3, [sp, #36]	; 0x24
 801e79c:	9116      	str	r1, [sp, #88]	; 0x58
 801e79e:	f848 7d14 	str.w	r7, [r8, #-20]!
 801e7a2:	6855      	ldr	r5, [r2, #4]
 801e7a4:	f8d7 9014 	ldr.w	r9, [r7, #20]
 801e7a8:	f7fc fb5c 	bl	801ae64 <GUI_GetBitsPerPixelEx>
 801e7ac:	6832      	ldr	r2, [r6, #0]
 801e7ae:	900e      	str	r0, [sp, #56]	; 0x38
 801e7b0:	7c50      	ldrb	r0, [r2, #17]
 801e7b2:	f7fc fb71 	bl	801ae98 <GUI_GetpfIndex2ColorEx>
 801e7b6:	4607      	mov	r7, r0
 801e7b8:	4640      	mov	r0, r8
 801e7ba:	f7f4 fb09 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7c2:	2a08      	cmp	r2, #8
 801e7c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e7c6:	f240 809d 	bls.w	801e904 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 801e7ca:	2a10      	cmp	r2, #16
 801e7cc:	4613      	mov	r3, r2
 801e7ce:	910a      	str	r1, [sp, #40]	; 0x28
 801e7d0:	bf8c      	ite	hi
 801e7d2:	2304      	movhi	r3, #4
 801e7d4:	2302      	movls	r3, #2
 801e7d6:	930c      	str	r3, [sp, #48]	; 0x30
 801e7d8:	42bd      	cmp	r5, r7
 801e7da:	f000 81c1 	beq.w	801eb60 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801e7de:	6833      	ldr	r3, [r6, #0]
 801e7e0:	7c58      	ldrb	r0, [r3, #17]
 801e7e2:	f7fc fb61 	bl	801aea8 <GUI_GetpfColor2IndexEx>
 801e7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e7e8:	4606      	mov	r6, r0
 801e7ea:	0098      	lsls	r0, r3, #2
 801e7ec:	f7f4 fac4 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 801e7f0:	9010      	str	r0, [sp, #64]	; 0x40
 801e7f2:	2800      	cmp	r0, #0
 801e7f4:	d0b1      	beq.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e7f6:	4620      	mov	r0, r4
 801e7f8:	f7ff fd4a 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 801e7fc:	4604      	mov	r4, r0
 801e7fe:	f1b9 0f00 	cmp.w	r9, #0
 801e802:	f000 8088 	beq.w	801e916 <GUI_MEMDEV__WriteToActiveOpaque+0x25e>
 801e806:	4648      	mov	r0, r9
 801e808:	f7f4 face 	bl	8012da8 <GUI_ALLOC_LockH>
 801e80c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e80e:	901e      	str	r0, [sp, #120]	; 0x78
 801e810:	2b00      	cmp	r3, #0
 801e812:	f340 81a1 	ble.w	801eb58 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801e816:	2300      	movs	r3, #0
 801e818:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e81c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e820:	930b      	str	r3, [sp, #44]	; 0x2c
 801e822:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e824:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801e828:	18e3      	adds	r3, r4, r3
 801e82a:	9315      	str	r3, [sp, #84]	; 0x54
 801e82c:	ab1f      	add	r3, sp, #124	; 0x7c
 801e82e:	4619      	mov	r1, r3
 801e830:	930f      	str	r3, [sp, #60]	; 0x3c
 801e832:	6883      	ldr	r3, [r0, #8]
 801e834:	2200      	movs	r2, #0
 801e836:	695b      	ldr	r3, [r3, #20]
 801e838:	921f      	str	r2, [sp, #124]	; 0x7c
 801e83a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e83c:	4798      	blx	r3
 801e83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e842:	4604      	mov	r4, r0
 801e844:	1a9b      	subs	r3, r3, r2
 801e846:	930e      	str	r3, [sp, #56]	; 0x38
 801e848:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e84a:	4283      	cmp	r3, r0
 801e84c:	f000 80f6 	beq.w	801ea3c <GUI_MEMDEV__WriteToActiveOpaque+0x384>
 801e850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e852:	2b01      	cmp	r3, #1
 801e854:	f000 8088 	beq.w	801e968 <GUI_MEMDEV__WriteToActiveOpaque+0x2b0>
 801e858:	2800      	cmp	r0, #0
 801e85a:	d042      	beq.n	801e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e85c:	ab1c      	add	r3, sp, #112	; 0x70
 801e85e:	9311      	str	r3, [sp, #68]	; 0x44
 801e860:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e862:	f7f4 faa1 	bl	8012da8 <GUI_ALLOC_LockH>
 801e866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e868:	4607      	mov	r7, r0
 801e86a:	901c      	str	r0, [sp, #112]	; 0x70
 801e86c:	2b08      	cmp	r3, #8
 801e86e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e870:	d965      	bls.n	801e93e <GUI_MEMDEV__WriteToActiveOpaque+0x286>
 801e872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e874:	46a3      	mov	fp, r4
 801e876:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e878:	4682      	mov	sl, r0
 801e87a:	fb02 1903 	mla	r9, r2, r3, r1
 801e87e:	f839 0b02 	ldrh.w	r0, [r9], #2
 801e882:	47a8      	blx	r5
 801e884:	47b0      	blx	r6
 801e886:	f1bb 0b01 	subs.w	fp, fp, #1
 801e88a:	f84a 0b04 	str.w	r0, [sl], #4
 801e88e:	d1f6      	bne.n	801e87e <GUI_MEMDEV__WriteToActiveOpaque+0x1c6>
 801e890:	f1b8 0f1f 	cmp.w	r8, #31
 801e894:	d804      	bhi.n	801e8a0 <GUI_MEMDEV__WriteToActiveOpaque+0x1e8>
 801e896:	4638      	mov	r0, r7
 801e898:	4642      	mov	r2, r8
 801e89a:	4621      	mov	r1, r4
 801e89c:	f7fa fd4a 	bl	8019334 <GUI__CompactPixelIndices>
 801e8a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e8a2:	2301      	movs	r3, #1
 801e8a4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e8a6:	4622      	mov	r2, r4
 801e8a8:	9105      	str	r1, [sp, #20]
 801e8aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8ac:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801e8ae:	4408      	add	r0, r1
 801e8b0:	2100      	movs	r1, #0
 801e8b2:	9301      	str	r3, [sp, #4]
 801e8b4:	9300      	str	r3, [sp, #0]
 801e8b6:	9103      	str	r1, [sp, #12]
 801e8b8:	f8cd 8008 	str.w	r8, [sp, #8]
 801e8bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e8be:	9704      	str	r7, [sp, #16]
 801e8c0:	f7fb fd4c 	bl	801a35c <LCD_DrawBitmap>
 801e8c4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e8c6:	f7f4 fa83 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801e8ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e8cc:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e8ce:	441c      	add	r4, r3
 801e8d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e8d2:	6883      	ldr	r3, [r0, #8]
 801e8d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e8d6:	941f      	str	r4, [sp, #124]	; 0x7c
 801e8d8:	695b      	ldr	r3, [r3, #20]
 801e8da:	4798      	blx	r3
 801e8dc:	4604      	mov	r4, r0
 801e8de:	2800      	cmp	r0, #0
 801e8e0:	d1be      	bne.n	801e860 <GUI_MEMDEV__WriteToActiveOpaque+0x1a8>
 801e8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e8e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8e8:	440a      	add	r2, r1
 801e8ea:	3301      	adds	r3, #1
 801e8ec:	9215      	str	r2, [sp, #84]	; 0x54
 801e8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801e8f2:	3201      	adds	r2, #1
 801e8f4:	920d      	str	r2, [sp, #52]	; 0x34
 801e8f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e8f8:	429a      	cmp	r2, r3
 801e8fa:	f000 812d 	beq.w	801eb58 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801e8fe:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e900:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e902:	e796      	b.n	801e832 <GUI_MEMDEV__WriteToActiveOpaque+0x17a>
 801e904:	2a01      	cmp	r2, #1
 801e906:	d103      	bne.n	801e910 <GUI_MEMDEV__WriteToActiveOpaque+0x258>
 801e908:	ab20      	add	r3, sp, #128	; 0x80
 801e90a:	920c      	str	r2, [sp, #48]	; 0x30
 801e90c:	930a      	str	r3, [sp, #40]	; 0x28
 801e90e:	e763      	b.n	801e7d8 <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801e910:	930c      	str	r3, [sp, #48]	; 0x30
 801e912:	910a      	str	r1, [sp, #40]	; 0x28
 801e914:	e760      	b.n	801e7d8 <GUI_MEMDEV__WriteToActiveOpaque+0x120>
 801e916:	2501      	movs	r5, #1
 801e918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e91a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e91c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e91e:	9305      	str	r3, [sp, #20]
 801e920:	9004      	str	r0, [sp, #16]
 801e922:	4658      	mov	r0, fp
 801e924:	9203      	str	r2, [sp, #12]
 801e926:	9102      	str	r1, [sp, #8]
 801e928:	4651      	mov	r1, sl
 801e92a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e92c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e92e:	9501      	str	r5, [sp, #4]
 801e930:	9500      	str	r5, [sp, #0]
 801e932:	f7fb fd13 	bl	801a35c <LCD_DrawBitmap>
 801e936:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e938:	f7f4 fbce 	bl	80130d8 <GUI_ALLOC_Free>
 801e93c:	e70d      	b.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e940:	46a2      	mov	sl, r4
 801e942:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e944:	4681      	mov	r9, r0
 801e946:	fb02 1b03 	mla	fp, r2, r3, r1
 801e94a:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e94e:	47a8      	blx	r5
 801e950:	47b0      	blx	r6
 801e952:	f1ba 0a01 	subs.w	sl, sl, #1
 801e956:	f849 0b04 	str.w	r0, [r9], #4
 801e95a:	d1f6      	bne.n	801e94a <GUI_MEMDEV__WriteToActiveOpaque+0x292>
 801e95c:	e798      	b.n	801e890 <GUI_MEMDEV__WriteToActiveOpaque+0x1d8>
 801e95e:	bf00      	nop
 801e960:	20000018 	.word	0x20000018
 801e964:	200467d0 	.word	0x200467d0
 801e968:	2800      	cmp	r0, #0
 801e96a:	d0ba      	beq.n	801e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e96c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 801e970:	9619      	str	r6, [sp, #100]	; 0x64
 801e972:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e974:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e976:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801e97a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 801e97e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 801e982:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801e986:	9517      	str	r5, [sp, #92]	; 0x5c
 801e988:	9211      	str	r2, [sp, #68]	; 0x44
 801e98a:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801e98e:	4622      	mov	r2, r4
 801e990:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e992:	2301      	movs	r3, #1
 801e994:	f00e 0007 	and.w	r0, lr, #7
 801e998:	4649      	mov	r1, r9
 801e99a:	9503      	str	r5, [sp, #12]
 801e99c:	2501      	movs	r5, #1
 801e99e:	9006      	str	r0, [sp, #24]
 801e9a0:	eb0a 000e 	add.w	r0, sl, lr
 801e9a4:	f1be 0f00 	cmp.w	lr, #0
 801e9a8:	9605      	str	r6, [sp, #20]
 801e9aa:	9502      	str	r5, [sp, #8]
 801e9ac:	bfb8      	it	lt
 801e9ae:	f10e 0e07 	addlt.w	lr, lr, #7
 801e9b2:	9501      	str	r5, [sp, #4]
 801e9b4:	9500      	str	r5, [sp, #0]
 801e9b6:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801e9ba:	f8cd e010 	str.w	lr, [sp, #16]
 801e9be:	f7fb fbbf 	bl	801a140 <LCD__DrawBitmap_1bpp>
 801e9c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e9c4:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e9c6:	463a      	mov	r2, r7
 801e9c8:	441c      	add	r4, r3
 801e9ca:	4659      	mov	r1, fp
 801e9cc:	6883      	ldr	r3, [r0, #8]
 801e9ce:	941f      	str	r4, [sp, #124]	; 0x7c
 801e9d0:	695b      	ldr	r3, [r3, #20]
 801e9d2:	4798      	blx	r3
 801e9d4:	4604      	mov	r4, r0
 801e9d6:	2800      	cmp	r0, #0
 801e9d8:	d1d7      	bne.n	801e98a <GUI_MEMDEV__WriteToActiveOpaque+0x2d2>
 801e9da:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801e9dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e9e0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801e9e2:	e77e      	b.n	801e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801e9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9e6:	fb03 f007 	mul.w	r0, r3, r7
 801e9ea:	f7f4 f9c5 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 801e9ee:	9010      	str	r0, [sp, #64]	; 0x40
 801e9f0:	2800      	cmp	r0, #0
 801e9f2:	f43f aeb2 	beq.w	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801e9f6:	f7f4 f9d7 	bl	8012da8 <GUI_ALLOC_LockH>
 801e9fa:	9020      	str	r0, [sp, #128]	; 0x80
 801e9fc:	4620      	mov	r0, r4
 801e9fe:	f7f4 f9d3 	bl	8012da8 <GUI_ALLOC_LockH>
 801ea02:	f100 0318 	add.w	r3, r0, #24
 801ea06:	901e      	str	r0, [sp, #120]	; 0x78
 801ea08:	930e      	str	r3, [sp, #56]	; 0x38
 801ea0a:	692b      	ldr	r3, [r5, #16]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	f000 81a6 	beq.w	801ed5e <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801ea12:	6973      	ldr	r3, [r6, #20]
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	f000 81a2 	beq.w	801ed5e <GUI_MEMDEV__WriteToActiveOpaque+0x6a6>
 801ea1a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801ea1e:	0080      	lsls	r0, r0, #2
 801ea20:	f7f4 f9aa 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 801ea24:	9011      	str	r0, [sp, #68]	; 0x44
 801ea26:	2800      	cmp	r0, #0
 801ea28:	f040 81ba 	bne.w	801eda0 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 801ea2c:	901f      	str	r0, [sp, #124]	; 0x7c
 801ea2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ea30:	f7f4 f9ce 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ea34:	a820      	add	r0, sp, #128	; 0x80
 801ea36:	f7f4 f9cb 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ea3a:	e77c      	b.n	801e936 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801ea3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ea3e:	f7f4 f9b3 	bl	8012da8 <GUI_ALLOC_LockH>
 801ea42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea44:	4681      	mov	r9, r0
 801ea46:	901c      	str	r0, [sp, #112]	; 0x70
 801ea48:	2b08      	cmp	r3, #8
 801ea4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ea4c:	4604      	mov	r4, r0
 801ea4e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801ea52:	d928      	bls.n	801eaa6 <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801ea54:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801ea58:	47a8      	blx	r5
 801ea5a:	47b0      	blx	r6
 801ea5c:	3f01      	subs	r7, #1
 801ea5e:	f844 0b04 	str.w	r0, [r4], #4
 801ea62:	d1f7      	bne.n	801ea54 <GUI_MEMDEV__WriteToActiveOpaque+0x39c>
 801ea64:	f1b8 0f1f 	cmp.w	r8, #31
 801ea68:	d804      	bhi.n	801ea74 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801ea6a:	4648      	mov	r0, r9
 801ea6c:	4642      	mov	r2, r8
 801ea6e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ea70:	f7fa fc60 	bl	8019334 <GUI__CompactPixelIndices>
 801ea74:	ab22      	add	r3, sp, #136	; 0x88
 801ea76:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ea78:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ea7a:	461a      	mov	r2, r3
 801ea7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea7e:	9305      	str	r3, [sp, #20]
 801ea80:	2300      	movs	r3, #0
 801ea82:	9303      	str	r3, [sp, #12]
 801ea84:	2301      	movs	r3, #1
 801ea86:	f852 ed18 	ldr.w	lr, [r2, #-24]!
 801ea8a:	f8cd 8008 	str.w	r8, [sp, #8]
 801ea8e:	4617      	mov	r7, r2
 801ea90:	9301      	str	r3, [sp, #4]
 801ea92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea94:	9300      	str	r3, [sp, #0]
 801ea96:	f8cd e010 	str.w	lr, [sp, #16]
 801ea9a:	f7fb fc5f 	bl	801a35c <LCD_DrawBitmap>
 801ea9e:	4638      	mov	r0, r7
 801eaa0:	f7f4 f996 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801eaa4:	e71d      	b.n	801e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 801eaa6:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801eaaa:	47a8      	blx	r5
 801eaac:	47b0      	blx	r6
 801eaae:	3f01      	subs	r7, #1
 801eab0:	f844 0b04 	str.w	r0, [r4], #4
 801eab4:	d1f7      	bne.n	801eaa6 <GUI_MEMDEV__WriteToActiveOpaque+0x3ee>
 801eab6:	e7d5      	b.n	801ea64 <GUI_MEMDEV__WriteToActiveOpaque+0x3ac>
 801eab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaba:	fb07 f003 	mul.w	r0, r7, r3
 801eabe:	f7f4 f95b 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 801eac2:	900e      	str	r0, [sp, #56]	; 0x38
 801eac4:	2800      	cmp	r0, #0
 801eac6:	f43f ae48 	beq.w	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801eaca:	f7f4 f96d 	bl	8012da8 <GUI_ALLOC_LockH>
 801eace:	9020      	str	r0, [sp, #128]	; 0x80
 801ead0:	4620      	mov	r0, r4
 801ead2:	f7f4 f969 	bl	8012da8 <GUI_ALLOC_LockH>
 801ead6:	901e      	str	r0, [sp, #120]	; 0x78
 801ead8:	692c      	ldr	r4, [r5, #16]
 801eada:	f100 0818 	add.w	r8, r0, #24
 801eade:	2c00      	cmp	r4, #0
 801eae0:	f000 80eb 	beq.w	801ecba <GUI_MEMDEV__WriteToActiveOpaque+0x602>
 801eae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eae6:	465c      	mov	r4, fp
 801eae8:	2601      	movs	r6, #1
 801eaea:	950a      	str	r5, [sp, #40]	; 0x28
 801eaec:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801eaf0:	4693      	mov	fp, r2
 801eaf2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801eaf6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801eafa:	e017      	b.n	801eb2c <GUI_MEMDEV__WriteToActiveOpaque+0x474>
 801eafc:	2f04      	cmp	r7, #4
 801eafe:	d021      	beq.n	801eb44 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 801eb00:	2f01      	cmp	r7, #1
 801eb02:	d015      	beq.n	801eb30 <GUI_MEMDEV__WriteToActiveOpaque+0x478>
 801eb04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb06:	2000      	movs	r0, #0
 801eb08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801eb0a:	4651      	mov	r1, sl
 801eb0c:	9302      	str	r3, [sp, #8]
 801eb0e:	2301      	movs	r3, #1
 801eb10:	9005      	str	r0, [sp, #20]
 801eb12:	465a      	mov	r2, fp
 801eb14:	9003      	str	r0, [sp, #12]
 801eb16:	4620      	mov	r0, r4
 801eb18:	9601      	str	r6, [sp, #4]
 801eb1a:	449a      	add	sl, r3
 801eb1c:	9600      	str	r6, [sp, #0]
 801eb1e:	9504      	str	r5, [sp, #16]
 801eb20:	f7fb fc1c 	bl	801a35c <LCD_DrawBitmap>
 801eb24:	f1b9 0901 	subs.w	r9, r9, #1
 801eb28:	f000 80e8 	beq.w	801ecfc <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801eb2c:	2f02      	cmp	r7, #2
 801eb2e:	d1e5      	bne.n	801eafc <GUI_MEMDEV__WriteToActiveOpaque+0x444>
 801eb30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eb32:	4640      	mov	r0, r8
 801eb34:	463b      	mov	r3, r7
 801eb36:	465a      	mov	r2, fp
 801eb38:	44a8      	add	r8, r5
 801eb3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eb3c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801eb3e:	692d      	ldr	r5, [r5, #16]
 801eb40:	47a8      	blx	r5
 801eb42:	e7df      	b.n	801eb04 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801eb44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb46:	4640      	mov	r0, r8
 801eb48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eb4a:	465a      	mov	r2, fp
 801eb4c:	4498      	add	r8, r3
 801eb4e:	9920      	ldr	r1, [sp, #128]	; 0x80
 801eb50:	463b      	mov	r3, r7
 801eb52:	692d      	ldr	r5, [r5, #16]
 801eb54:	47a8      	blx	r5
 801eb56:	e7d5      	b.n	801eb04 <GUI_MEMDEV__WriteToActiveOpaque+0x44c>
 801eb58:	a81e      	add	r0, sp, #120	; 0x78
 801eb5a:	f7f4 f939 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801eb5e:	e6ea      	b.n	801e936 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 801eb60:	4620      	mov	r0, r4
 801eb62:	f7ff fb95 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 801eb66:	4680      	mov	r8, r0
 801eb68:	f1b9 0f00 	cmp.w	r9, #0
 801eb6c:	f000 80d4 	beq.w	801ed18 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 801eb70:	4648      	mov	r0, r9
 801eb72:	f7f4 f919 	bl	8012da8 <GUI_ALLOC_LockH>
 801eb76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eb78:	901e      	str	r0, [sp, #120]	; 0x78
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	f340 80c8 	ble.w	801ed10 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801eb80:	2600      	movs	r6, #0
 801eb82:	ab1f      	add	r3, sp, #124	; 0x7c
 801eb84:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801eb88:	2501      	movs	r5, #1
 801eb8a:	46b1      	mov	r9, r6
 801eb8c:	46da      	mov	sl, fp
 801eb8e:	461f      	mov	r7, r3
 801eb90:	6883      	ldr	r3, [r0, #8]
 801eb92:	4632      	mov	r2, r6
 801eb94:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 801eb98:	4639      	mov	r1, r7
 801eb9a:	695b      	ldr	r3, [r3, #20]
 801eb9c:	4798      	blx	r3
 801eb9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eba0:	4604      	mov	r4, r0
 801eba2:	4283      	cmp	r3, r0
 801eba4:	d031      	beq.n	801ec0a <GUI_MEMDEV__WriteToActiveOpaque+0x552>
 801eba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eba8:	2b01      	cmp	r3, #1
 801ebaa:	d057      	beq.n	801ec5c <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 801ebac:	b320      	cbz	r0, 801ebf8 <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801ebae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ebb0:	960b      	str	r6, [sp, #44]	; 0x2c
 801ebb2:	eb03 0b06 	add.w	fp, r3, r6
 801ebb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ebb8:	2301      	movs	r3, #1
 801ebba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ebbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebbe:	fb01 8e00 	mla	lr, r1, r0, r8
 801ebc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ebc4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801ebc6:	4450      	add	r0, sl
 801ebc8:	9205      	str	r2, [sp, #20]
 801ebca:	4622      	mov	r2, r4
 801ebcc:	9103      	str	r1, [sp, #12]
 801ebce:	4659      	mov	r1, fp
 801ebd0:	f8cd e010 	str.w	lr, [sp, #16]
 801ebd4:	9602      	str	r6, [sp, #8]
 801ebd6:	9501      	str	r5, [sp, #4]
 801ebd8:	9500      	str	r5, [sp, #0]
 801ebda:	f7fb fbbf 	bl	801a35c <LCD_DrawBitmap>
 801ebde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ebe0:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ebe2:	4639      	mov	r1, r7
 801ebe4:	441c      	add	r4, r3
 801ebe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ebe8:	6883      	ldr	r3, [r0, #8]
 801ebea:	941f      	str	r4, [sp, #124]	; 0x7c
 801ebec:	695b      	ldr	r3, [r3, #20]
 801ebee:	4798      	blx	r3
 801ebf0:	4604      	mov	r4, r0
 801ebf2:	2800      	cmp	r0, #0
 801ebf4:	d1df      	bne.n	801ebb6 <GUI_MEMDEV__WriteToActiveOpaque+0x4fe>
 801ebf6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801ebf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ebfa:	3601      	adds	r6, #1
 801ebfc:	4498      	add	r8, r3
 801ebfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec00:	42b3      	cmp	r3, r6
 801ec02:	f340 8085 	ble.w	801ed10 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801ec06:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ec08:	e7c2      	b.n	801eb90 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 801ec0a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801ec0e:	46b3      	mov	fp, r6
 801ec10:	4698      	mov	r8, r3
 801ec12:	e000      	b.n	801ec16 <GUI_MEMDEV__WriteToActiveOpaque+0x55e>
 801ec14:	46a3      	mov	fp, r4
 801ec16:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ec18:	f10b 0401 	add.w	r4, fp, #1
 801ec1c:	4639      	mov	r1, r7
 801ec1e:	6883      	ldr	r3, [r0, #8]
 801ec20:	4622      	mov	r2, r4
 801ec22:	695b      	ldr	r3, [r3, #20]
 801ec24:	4798      	blx	r3
 801ec26:	4580      	cmp	r8, r0
 801ec28:	d0f4      	beq.n	801ec14 <GUI_MEMDEV__WriteToActiveOpaque+0x55c>
 801ec2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec2c:	ebc6 030b 	rsb	r3, r6, fp
 801ec30:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ec34:	4650      	mov	r0, sl
 801ec36:	9205      	str	r2, [sp, #20]
 801ec38:	3301      	adds	r3, #1
 801ec3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ec3c:	f8cd 8010 	str.w	r8, [sp, #16]
 801ec40:	1991      	adds	r1, r2, r6
 801ec42:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ec44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec46:	9603      	str	r6, [sp, #12]
 801ec48:	9202      	str	r2, [sp, #8]
 801ec4a:	9501      	str	r5, [sp, #4]
 801ec4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ec4e:	fb06 8803 	mla	r8, r6, r3, r8
 801ec52:	9500      	str	r5, [sp, #0]
 801ec54:	4626      	mov	r6, r4
 801ec56:	f7fb fb81 	bl	801a35c <LCD_DrawBitmap>
 801ec5a:	e7d0      	b.n	801ebfe <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801ec5c:	2800      	cmp	r0, #0
 801ec5e:	d0cb      	beq.n	801ebf8 <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 801ec60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec62:	960b      	str	r6, [sp, #44]	; 0x2c
 801ec64:	eb03 0b06 	add.w	fp, r3, r6
 801ec68:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801ec6c:	4622      	mov	r2, r4
 801ec6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ec70:	2301      	movs	r3, #1
 801ec72:	f00e 0007 	and.w	r0, lr, #7
 801ec76:	4659      	mov	r1, fp
 801ec78:	9605      	str	r6, [sp, #20]
 801ec7a:	9006      	str	r0, [sp, #24]
 801ec7c:	eb0a 000e 	add.w	r0, sl, lr
 801ec80:	f1be 0f00 	cmp.w	lr, #0
 801ec84:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ec86:	9502      	str	r5, [sp, #8]
 801ec88:	bfb8      	it	lt
 801ec8a:	f10e 0e07 	addlt.w	lr, lr, #7
 801ec8e:	9603      	str	r6, [sp, #12]
 801ec90:	9501      	str	r5, [sp, #4]
 801ec92:	eb08 0eee 	add.w	lr, r8, lr, asr #3
 801ec96:	9500      	str	r5, [sp, #0]
 801ec98:	f8cd e010 	str.w	lr, [sp, #16]
 801ec9c:	f7fb fa50 	bl	801a140 <LCD__DrawBitmap_1bpp>
 801eca0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801eca2:	981e      	ldr	r0, [sp, #120]	; 0x78
 801eca4:	4639      	mov	r1, r7
 801eca6:	441c      	add	r4, r3
 801eca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ecaa:	6883      	ldr	r3, [r0, #8]
 801ecac:	941f      	str	r4, [sp, #124]	; 0x7c
 801ecae:	695b      	ldr	r3, [r3, #20]
 801ecb0:	4798      	blx	r3
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	2800      	cmp	r0, #0
 801ecb6:	d1d7      	bne.n	801ec68 <GUI_MEMDEV__WriteToActiveOpaque+0x5b0>
 801ecb8:	e79d      	b.n	801ebf6 <GUI_MEMDEV__WriteToActiveOpaque+0x53e>
 801ecba:	46a1      	mov	r9, r4
 801ecbc:	2501      	movs	r5, #1
 801ecbe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ecc0:	2301      	movs	r3, #1
 801ecc2:	2f02      	cmp	r7, #2
 801ecc4:	4651      	mov	r1, sl
 801ecc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecc8:	4658      	mov	r0, fp
 801ecca:	eb0a 0e03 	add.w	lr, sl, r3
 801ecce:	f000 81a9 	beq.w	801f024 <GUI_MEMDEV__WriteToActiveOpaque+0x96c>
 801ecd2:	2f04      	cmp	r7, #4
 801ecd4:	f000 817d 	beq.w	801efd2 <GUI_MEMDEV__WriteToActiveOpaque+0x91a>
 801ecd8:	429f      	cmp	r7, r3
 801ecda:	f000 8152 	beq.w	801ef82 <GUI_MEMDEV__WriteToActiveOpaque+0x8ca>
 801ecde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ece0:	46f2      	mov	sl, lr
 801ece2:	f8cd 9014 	str.w	r9, [sp, #20]
 801ece6:	9402      	str	r4, [sp, #8]
 801ece8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801ecea:	f8cd 900c 	str.w	r9, [sp, #12]
 801ecee:	9501      	str	r5, [sp, #4]
 801ecf0:	9500      	str	r5, [sp, #0]
 801ecf2:	9404      	str	r4, [sp, #16]
 801ecf4:	f7fb fb32 	bl	801a35c <LCD_DrawBitmap>
 801ecf8:	3e01      	subs	r6, #1
 801ecfa:	d1e1      	bne.n	801ecc0 <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 801ecfc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ecfe:	f7f4 f867 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ed02:	a820      	add	r0, sp, #128	; 0x80
 801ed04:	f7f4 f864 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ed08:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ed0a:	f7f4 f9e5 	bl	80130d8 <GUI_ALLOC_Free>
 801ed0e:	e524      	b.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801ed10:	a81e      	add	r0, sp, #120	; 0x78
 801ed12:	f7f4 f85d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ed16:	e520      	b.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801ed18:	2401      	movs	r4, #1
 801ed1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed20:	9305      	str	r3, [sp, #20]
 801ed22:	9004      	str	r0, [sp, #16]
 801ed24:	4658      	mov	r0, fp
 801ed26:	9203      	str	r2, [sp, #12]
 801ed28:	9102      	str	r1, [sp, #8]
 801ed2a:	4651      	mov	r1, sl
 801ed2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ed2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed30:	9401      	str	r4, [sp, #4]
 801ed32:	9400      	str	r4, [sp, #0]
 801ed34:	f7fb fb12 	bl	801a35c <LCD_DrawBitmap>
 801ed38:	e50f      	b.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801ed3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed3c:	2401      	movs	r4, #1
 801ed3e:	3318      	adds	r3, #24
 801ed40:	2500      	movs	r5, #0
 801ed42:	9203      	str	r2, [sp, #12]
 801ed44:	4651      	mov	r1, sl
 801ed46:	9304      	str	r3, [sp, #16]
 801ed48:	4658      	mov	r0, fp
 801ed4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed4c:	f8cd 9008 	str.w	r9, [sp, #8]
 801ed50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed52:	9505      	str	r5, [sp, #20]
 801ed54:	9401      	str	r4, [sp, #4]
 801ed56:	9400      	str	r4, [sp, #0]
 801ed58:	f7fb fb00 	bl	801a35c <LCD_DrawBitmap>
 801ed5c:	e4fd      	b.n	801e75a <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 801ed5e:	2501      	movs	r5, #1
 801ed60:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ed64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ed66:	2301      	movs	r3, #1
 801ed68:	2f02      	cmp	r7, #2
 801ed6a:	4651      	mov	r1, sl
 801ed6c:	464a      	mov	r2, r9
 801ed6e:	4658      	mov	r0, fp
 801ed70:	eb0a 0e03 	add.w	lr, sl, r3
 801ed74:	f000 80d4 	beq.w	801ef20 <GUI_MEMDEV__WriteToActiveOpaque+0x868>
 801ed78:	2f04      	cmp	r7, #4
 801ed7a:	f000 80a0 	beq.w	801eebe <GUI_MEMDEV__WriteToActiveOpaque+0x806>
 801ed7e:	429f      	cmp	r7, r3
 801ed80:	d06d      	beq.n	801ee5e <GUI_MEMDEV__WriteToActiveOpaque+0x7a6>
 801ed82:	2400      	movs	r4, #0
 801ed84:	9501      	str	r5, [sp, #4]
 801ed86:	9500      	str	r5, [sp, #0]
 801ed88:	46f2      	mov	sl, lr
 801ed8a:	9405      	str	r4, [sp, #20]
 801ed8c:	9403      	str	r4, [sp, #12]
 801ed8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed90:	9402      	str	r4, [sp, #8]
 801ed92:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801ed94:	9404      	str	r4, [sp, #16]
 801ed96:	f7fb fae1 	bl	801a35c <LCD_DrawBitmap>
 801ed9a:	3e01      	subs	r6, #1
 801ed9c:	d1e3      	bne.n	801ed66 <GUI_MEMDEV__WriteToActiveOpaque+0x6ae>
 801ed9e:	e646      	b.n	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801eda0:	f7f4 f802 	bl	8012da8 <GUI_ALLOC_LockH>
 801eda4:	901f      	str	r0, [sp, #124]	; 0x7c
 801eda6:	2800      	cmp	r0, #0
 801eda8:	f43f ae41 	beq.w	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801edac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801edae:	2401      	movs	r4, #1
 801edb0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801edb4:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801edb8:	4690      	mov	r8, r2
 801edba:	950c      	str	r5, [sp, #48]	; 0x30
 801edbc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801edc0:	46b1      	mov	r9, r6
 801edc2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801edc6:	e017      	b.n	801edf8 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 801edc8:	2f04      	cmp	r7, #4
 801edca:	d02e      	beq.n	801ee2a <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 801edcc:	2f01      	cmp	r7, #1
 801edce:	d028      	beq.n	801ee22 <GUI_MEMDEV__WriteToActiveOpaque+0x76a>
 801edd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801edd2:	2000      	movs	r0, #0
 801edd4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801edd6:	4651      	mov	r1, sl
 801edd8:	9302      	str	r3, [sp, #8]
 801edda:	2301      	movs	r3, #1
 801eddc:	9005      	str	r0, [sp, #20]
 801edde:	4642      	mov	r2, r8
 801ede0:	9003      	str	r0, [sp, #12]
 801ede2:	449a      	add	sl, r3
 801ede4:	9401      	str	r4, [sp, #4]
 801ede6:	9400      	str	r4, [sp, #0]
 801ede8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801edea:	9504      	str	r5, [sp, #16]
 801edec:	f7fb fab6 	bl	801a35c <LCD_DrawBitmap>
 801edf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edf2:	3b01      	subs	r3, #1
 801edf4:	9309      	str	r3, [sp, #36]	; 0x24
 801edf6:	d02b      	beq.n	801ee50 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 801edf8:	2f02      	cmp	r7, #2
 801edfa:	d1e5      	bne.n	801edc8 <GUI_MEMDEV__WriteToActiveOpaque+0x710>
 801edfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801edfe:	461e      	mov	r6, r3
 801ee00:	463b      	mov	r3, r7
 801ee02:	4642      	mov	r2, r8
 801ee04:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ee06:	4658      	mov	r0, fp
 801ee08:	f8d9 5014 	ldr.w	r5, [r9, #20]
 801ee0c:	47a8      	blx	r5
 801ee0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ee10:	4631      	mov	r1, r6
 801ee12:	463b      	mov	r3, r7
 801ee14:	44ab      	add	fp, r5
 801ee16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee18:	4642      	mov	r2, r8
 801ee1a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ee1c:	692d      	ldr	r5, [r5, #16]
 801ee1e:	47a8      	blx	r5
 801ee20:	e7d6      	b.n	801edd0 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801ee22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee24:	461e      	mov	r6, r3
 801ee26:	2302      	movs	r3, #2
 801ee28:	e7eb      	b.n	801ee02 <GUI_MEMDEV__WriteToActiveOpaque+0x74a>
 801ee2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ee2c:	4642      	mov	r2, r8
 801ee2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ee30:	4658      	mov	r0, fp
 801ee32:	461d      	mov	r5, r3
 801ee34:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801ee36:	2302      	movs	r3, #2
 801ee38:	44b3      	add	fp, r6
 801ee3a:	f8d9 6014 	ldr.w	r6, [r9, #20]
 801ee3e:	47b0      	blx	r6
 801ee40:	4629      	mov	r1, r5
 801ee42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee44:	463b      	mov	r3, r7
 801ee46:	4642      	mov	r2, r8
 801ee48:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ee4a:	692d      	ldr	r5, [r5, #16]
 801ee4c:	47a8      	blx	r5
 801ee4e:	e7bf      	b.n	801edd0 <GUI_MEMDEV__WriteToActiveOpaque+0x718>
 801ee50:	a81f      	add	r0, sp, #124	; 0x7c
 801ee52:	f7f3 ffbd 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ee56:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee58:	f7f4 f93e 	bl	80130d8 <GUI_ALLOC_Free>
 801ee5c:	e5e7      	b.n	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801ee5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee60:	4644      	mov	r4, r8
 801ee62:	9609      	str	r6, [sp, #36]	; 0x24
 801ee64:	005d      	lsls	r5, r3, #1
 801ee66:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ee68:	950c      	str	r5, [sp, #48]	; 0x30
 801ee6a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ee6c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801ee70:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ee74:	f838 0b02 	ldrh.w	r0, [r8], #2
 801ee78:	47a0      	blx	r4
 801ee7a:	47b0      	blx	r6
 801ee7c:	f1b9 0901 	subs.w	r9, r9, #1
 801ee80:	f805 0b01 	strb.w	r0, [r5], #1
 801ee84:	d1f6      	bne.n	801ee74 <GUI_MEMDEV__WriteToActiveOpaque+0x7bc>
 801ee86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ee88:	2301      	movs	r3, #1
 801ee8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee8c:	4651      	mov	r1, sl
 801ee8e:	46ae      	mov	lr, r5
 801ee90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee92:	9002      	str	r0, [sp, #8]
 801ee94:	4658      	mov	r0, fp
 801ee96:	44ae      	add	lr, r5
 801ee98:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ee9a:	f8cd 9014 	str.w	r9, [sp, #20]
 801ee9e:	449a      	add	sl, r3
 801eea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eea2:	f8cd 900c 	str.w	r9, [sp, #12]
 801eea6:	9701      	str	r7, [sp, #4]
 801eea8:	9700      	str	r7, [sp, #0]
 801eeaa:	9504      	str	r5, [sp, #16]
 801eeac:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801eeb0:	f7fb fa54 	bl	801a35c <LCD_DrawBitmap>
 801eeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeb6:	3b01      	subs	r3, #1
 801eeb8:	9309      	str	r3, [sp, #36]	; 0x24
 801eeba:	d1d6      	bne.n	801ee6a <GUI_MEMDEV__WriteToActiveOpaque+0x7b2>
 801eebc:	e5b7      	b.n	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801eebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eec0:	2501      	movs	r5, #1
 801eec2:	9609      	str	r6, [sp, #36]	; 0x24
 801eec4:	4644      	mov	r4, r8
 801eec6:	005e      	lsls	r6, r3, #1
 801eec8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801eeca:	960c      	str	r6, [sp, #48]	; 0x30
 801eecc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801eece:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801eed2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801eed6:	f838 0b02 	ldrh.w	r0, [r8], #2
 801eeda:	47a0      	blx	r4
 801eedc:	47b8      	blx	r7
 801eede:	f1b9 0901 	subs.w	r9, r9, #1
 801eee2:	f846 0b04 	str.w	r0, [r6], #4
 801eee6:	d1f6      	bne.n	801eed6 <GUI_MEMDEV__WriteToActiveOpaque+0x81e>
 801eee8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801eeea:	2301      	movs	r3, #1
 801eeec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eeee:	4651      	mov	r1, sl
 801eef0:	46b6      	mov	lr, r6
 801eef2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801eef4:	9002      	str	r0, [sp, #8]
 801eef6:	4658      	mov	r0, fp
 801eef8:	44b6      	add	lr, r6
 801eefa:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801eefc:	f8cd 9014 	str.w	r9, [sp, #20]
 801ef00:	449a      	add	sl, r3
 801ef02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ef04:	f8cd 900c 	str.w	r9, [sp, #12]
 801ef08:	9501      	str	r5, [sp, #4]
 801ef0a:	9500      	str	r5, [sp, #0]
 801ef0c:	9604      	str	r6, [sp, #16]
 801ef0e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801ef12:	f7fb fa23 	bl	801a35c <LCD_DrawBitmap>
 801ef16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef18:	3b01      	subs	r3, #1
 801ef1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef1c:	d1d6      	bne.n	801eecc <GUI_MEMDEV__WriteToActiveOpaque+0x814>
 801ef1e:	e586      	b.n	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801ef20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef22:	2501      	movs	r5, #1
 801ef24:	9609      	str	r6, [sp, #36]	; 0x24
 801ef26:	4644      	mov	r4, r8
 801ef28:	005e      	lsls	r6, r3, #1
 801ef2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ef2c:	960c      	str	r6, [sp, #48]	; 0x30
 801ef2e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801ef30:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801ef34:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ef38:	f838 0b02 	ldrh.w	r0, [r8], #2
 801ef3c:	47a0      	blx	r4
 801ef3e:	47b8      	blx	r7
 801ef40:	f1b9 0901 	subs.w	r9, r9, #1
 801ef44:	f826 0b02 	strh.w	r0, [r6], #2
 801ef48:	d1f6      	bne.n	801ef38 <GUI_MEMDEV__WriteToActiveOpaque+0x880>
 801ef4a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ef4c:	2301      	movs	r3, #1
 801ef4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ef50:	4651      	mov	r1, sl
 801ef52:	46b6      	mov	lr, r6
 801ef54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ef56:	9002      	str	r0, [sp, #8]
 801ef58:	4658      	mov	r0, fp
 801ef5a:	44b6      	add	lr, r6
 801ef5c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801ef5e:	f8cd 9014 	str.w	r9, [sp, #20]
 801ef62:	449a      	add	sl, r3
 801ef64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ef66:	f8cd 900c 	str.w	r9, [sp, #12]
 801ef6a:	9501      	str	r5, [sp, #4]
 801ef6c:	9500      	str	r5, [sp, #0]
 801ef6e:	9604      	str	r6, [sp, #16]
 801ef70:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 801ef74:	f7fb f9f2 	bl	801a35c <LCD_DrawBitmap>
 801ef78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef7a:	3b01      	subs	r3, #1
 801ef7c:	9309      	str	r3, [sp, #36]	; 0x24
 801ef7e:	d1d6      	bne.n	801ef2e <GUI_MEMDEV__WriteToActiveOpaque+0x876>
 801ef80:	e555      	b.n	801ea2e <GUI_MEMDEV__WriteToActiveOpaque+0x376>
 801ef82:	0095      	lsls	r5, r2, #2
 801ef84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ef86:	9609      	str	r6, [sp, #36]	; 0x24
 801ef88:	950c      	str	r5, [sp, #48]	; 0x30
 801ef8a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ef8c:	4646      	mov	r6, r8
 801ef8e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ef92:	f856 0b04 	ldr.w	r0, [r6], #4
 801ef96:	47a0      	blx	r4
 801ef98:	f1b9 0901 	subs.w	r9, r9, #1
 801ef9c:	f805 0b01 	strb.w	r0, [r5], #1
 801efa0:	d1f7      	bne.n	801ef92 <GUI_MEMDEV__WriteToActiveOpaque+0x8da>
 801efa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801efa4:	2301      	movs	r3, #1
 801efa6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801efa8:	4651      	mov	r1, sl
 801efaa:	9002      	str	r0, [sp, #8]
 801efac:	4658      	mov	r0, fp
 801efae:	f8cd 9014 	str.w	r9, [sp, #20]
 801efb2:	449a      	add	sl, r3
 801efb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801efb6:	f8cd 900c 	str.w	r9, [sp, #12]
 801efba:	9701      	str	r7, [sp, #4]
 801efbc:	9700      	str	r7, [sp, #0]
 801efbe:	9604      	str	r6, [sp, #16]
 801efc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801efc2:	f7fb f9cb 	bl	801a35c <LCD_DrawBitmap>
 801efc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efc8:	44a8      	add	r8, r5
 801efca:	3b01      	subs	r3, #1
 801efcc:	9309      	str	r3, [sp, #36]	; 0x24
 801efce:	d1dc      	bne.n	801ef8a <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 801efd0:	e694      	b.n	801ecfc <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801efd2:	9609      	str	r6, [sp, #36]	; 0x24
 801efd4:	2501      	movs	r5, #1
 801efd6:	0096      	lsls	r6, r2, #2
 801efd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801efda:	960c      	str	r6, [sp, #48]	; 0x30
 801efdc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801efde:	4647      	mov	r7, r8
 801efe0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801efe4:	f857 0b04 	ldr.w	r0, [r7], #4
 801efe8:	47a0      	blx	r4
 801efea:	f1b9 0901 	subs.w	r9, r9, #1
 801efee:	f846 0b04 	str.w	r0, [r6], #4
 801eff2:	d1f7      	bne.n	801efe4 <GUI_MEMDEV__WriteToActiveOpaque+0x92c>
 801eff4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eff6:	2301      	movs	r3, #1
 801eff8:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801effa:	4651      	mov	r1, sl
 801effc:	9002      	str	r0, [sp, #8]
 801effe:	4658      	mov	r0, fp
 801f000:	f8cd 9014 	str.w	r9, [sp, #20]
 801f004:	449a      	add	sl, r3
 801f006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f008:	f8cd 900c 	str.w	r9, [sp, #12]
 801f00c:	9501      	str	r5, [sp, #4]
 801f00e:	9500      	str	r5, [sp, #0]
 801f010:	9704      	str	r7, [sp, #16]
 801f012:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f014:	f7fb f9a2 	bl	801a35c <LCD_DrawBitmap>
 801f018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f01a:	44b0      	add	r8, r6
 801f01c:	3b01      	subs	r3, #1
 801f01e:	9309      	str	r3, [sp, #36]	; 0x24
 801f020:	d1dc      	bne.n	801efdc <GUI_MEMDEV__WriteToActiveOpaque+0x924>
 801f022:	e66b      	b.n	801ecfc <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801f024:	9609      	str	r6, [sp, #36]	; 0x24
 801f026:	2501      	movs	r5, #1
 801f028:	0096      	lsls	r6, r2, #2
 801f02a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f02c:	960c      	str	r6, [sp, #48]	; 0x30
 801f02e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801f030:	4647      	mov	r7, r8
 801f032:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801f036:	f857 0b04 	ldr.w	r0, [r7], #4
 801f03a:	47a0      	blx	r4
 801f03c:	f1b9 0901 	subs.w	r9, r9, #1
 801f040:	f826 0b02 	strh.w	r0, [r6], #2
 801f044:	d1f7      	bne.n	801f036 <GUI_MEMDEV__WriteToActiveOpaque+0x97e>
 801f046:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f048:	2301      	movs	r3, #1
 801f04a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f04c:	4651      	mov	r1, sl
 801f04e:	9002      	str	r0, [sp, #8]
 801f050:	4658      	mov	r0, fp
 801f052:	f8cd 9014 	str.w	r9, [sp, #20]
 801f056:	449a      	add	sl, r3
 801f058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f05a:	f8cd 900c 	str.w	r9, [sp, #12]
 801f05e:	9501      	str	r5, [sp, #4]
 801f060:	9500      	str	r5, [sp, #0]
 801f062:	9704      	str	r7, [sp, #16]
 801f064:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f066:	f7fb f979 	bl	801a35c <LCD_DrawBitmap>
 801f06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f06c:	44b0      	add	r8, r6
 801f06e:	3b01      	subs	r3, #1
 801f070:	9309      	str	r3, [sp, #36]	; 0x24
 801f072:	d1dc      	bne.n	801f02e <GUI_MEMDEV__WriteToActiveOpaque+0x976>
 801f074:	e642      	b.n	801ecfc <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 801f076:	bf00      	nop

0801f078 <_OnExit>:
 801f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f07c:	2400      	movs	r4, #0
 801f07e:	4e18      	ldr	r6, [pc, #96]	; (801f0e0 <_OnExit+0x68>)
 801f080:	4d18      	ldr	r5, [pc, #96]	; (801f0e4 <_OnExit+0x6c>)
 801f082:	2218      	movs	r2, #24
 801f084:	6034      	str	r4, [r6, #0]
 801f086:	4621      	mov	r1, r4
 801f088:	602c      	str	r4, [r5, #0]
 801f08a:	4f17      	ldr	r7, [pc, #92]	; (801f0e8 <_OnExit+0x70>)
 801f08c:	4e17      	ldr	r6, [pc, #92]	; (801f0ec <_OnExit+0x74>)
 801f08e:	4d18      	ldr	r5, [pc, #96]	; (801f0f0 <_OnExit+0x78>)
 801f090:	4b18      	ldr	r3, [pc, #96]	; (801f0f4 <_OnExit+0x7c>)
 801f092:	603c      	str	r4, [r7, #0]
 801f094:	6034      	str	r4, [r6, #0]
 801f096:	f103 000c 	add.w	r0, r3, #12
 801f09a:	602c      	str	r4, [r5, #0]
 801f09c:	4f16      	ldr	r7, [pc, #88]	; (801f0f8 <_OnExit+0x80>)
 801f09e:	4d17      	ldr	r5, [pc, #92]	; (801f0fc <_OnExit+0x84>)
 801f0a0:	4e17      	ldr	r6, [pc, #92]	; (801f100 <_OnExit+0x88>)
 801f0a2:	603c      	str	r4, [r7, #0]
 801f0a4:	6034      	str	r4, [r6, #0]
 801f0a6:	6074      	str	r4, [r6, #4]
 801f0a8:	607c      	str	r4, [r7, #4]
 801f0aa:	682e      	ldr	r6, [r5, #0]
 801f0ac:	701c      	strb	r4, [r3, #0]
 801f0ae:	605c      	str	r4, [r3, #4]
 801f0b0:	609c      	str	r4, [r3, #8]
 801f0b2:	47b0      	blx	r6
 801f0b4:	4b13      	ldr	r3, [pc, #76]	; (801f104 <_OnExit+0x8c>)
 801f0b6:	4621      	mov	r1, r4
 801f0b8:	4813      	ldr	r0, [pc, #76]	; (801f108 <_OnExit+0x90>)
 801f0ba:	2210      	movs	r2, #16
 801f0bc:	601c      	str	r4, [r3, #0]
 801f0be:	6004      	str	r4, [r0, #0]
 801f0c0:	605c      	str	r4, [r3, #4]
 801f0c2:	4812      	ldr	r0, [pc, #72]	; (801f10c <_OnExit+0x94>)
 801f0c4:	682b      	ldr	r3, [r5, #0]
 801f0c6:	4798      	blx	r3
 801f0c8:	682b      	ldr	r3, [r5, #0]
 801f0ca:	4621      	mov	r1, r4
 801f0cc:	2210      	movs	r2, #16
 801f0ce:	4810      	ldr	r0, [pc, #64]	; (801f110 <_OnExit+0x98>)
 801f0d0:	4798      	blx	r3
 801f0d2:	682b      	ldr	r3, [r5, #0]
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	2210      	movs	r2, #16
 801f0d8:	480e      	ldr	r0, [pc, #56]	; (801f114 <_OnExit+0x9c>)
 801f0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f0de:	4718      	bx	r3
 801f0e0:	20046838 	.word	0x20046838
 801f0e4:	2004684c 	.word	0x2004684c
 801f0e8:	200467f8 	.word	0x200467f8
 801f0ec:	2004682c 	.word	0x2004682c
 801f0f0:	2004683c 	.word	0x2004683c
 801f0f4:	200003e4 	.word	0x200003e4
 801f0f8:	2004680c 	.word	0x2004680c
 801f0fc:	20000050 	.word	0x20000050
 801f100:	20046840 	.word	0x20046840
 801f104:	200467fc 	.word	0x200467fc
 801f108:	20046808 	.word	0x20046808
 801f10c:	20046870 	.word	0x20046870
 801f110:	20046860 	.word	0x20046860
 801f114:	20046850 	.word	0x20046850

0801f118 <_Findy1>:
 801f118:	2800      	cmp	r0, #0
 801f11a:	d063      	beq.n	801f1e4 <_Findy1+0xcc>
 801f11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f11e:	460e      	mov	r6, r1
 801f120:	b085      	sub	sp, #20
 801f122:	4617      	mov	r7, r2
 801f124:	4604      	mov	r4, r0
 801f126:	4620      	mov	r0, r4
 801f128:	f7f3 fe3e 	bl	8012da8 <GUI_ALLOC_LockH>
 801f12c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801f12e:	9001      	str	r0, [sp, #4]
 801f130:	07a2      	lsls	r2, r4, #30
 801f132:	d524      	bpl.n	801f17e <_Findy1+0x66>
 801f134:	ad02      	add	r5, sp, #8
 801f136:	2f00      	cmp	r7, #0
 801f138:	d03f      	beq.n	801f1ba <_Findy1+0xa2>
 801f13a:	4601      	mov	r1, r0
 801f13c:	463a      	mov	r2, r7
 801f13e:	4628      	mov	r0, r5
 801f140:	f7fa fc00 	bl	8019944 <GUI__IntersectRects>
 801f144:	4629      	mov	r1, r5
 801f146:	4630      	mov	r0, r6
 801f148:	f7f4 ff32 	bl	8013fb0 <GUI_RectsIntersect>
 801f14c:	b368      	cbz	r0, 801f1aa <_Findy1+0x92>
 801f14e:	07e3      	lsls	r3, r4, #31
 801f150:	9801      	ldr	r0, [sp, #4]
 801f152:	d41c      	bmi.n	801f18e <_Findy1+0x76>
 801f154:	2f00      	cmp	r7, #0
 801f156:	d042      	beq.n	801f1de <_Findy1+0xc6>
 801f158:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801f15c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f160:	4293      	cmp	r3, r2
 801f162:	bfb8      	it	lt
 801f164:	4613      	movlt	r3, r2
 801f166:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 801f16a:	4293      	cmp	r3, r2
 801f16c:	dd29      	ble.n	801f1c2 <_Findy1+0xaa>
 801f16e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f172:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801f176:	429a      	cmp	r2, r3
 801f178:	db01      	blt.n	801f17e <_Findy1+0x66>
 801f17a:	3b01      	subs	r3, #1
 801f17c:	80f3      	strh	r3, [r6, #6]
 801f17e:	6a04      	ldr	r4, [r0, #32]
 801f180:	a801      	add	r0, sp, #4
 801f182:	f7f3 fe25 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f186:	2c00      	cmp	r4, #0
 801f188:	d1cd      	bne.n	801f126 <_Findy1+0xe>
 801f18a:	b005      	add	sp, #20
 801f18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f18e:	69c4      	ldr	r4, [r0, #28]
 801f190:	2c00      	cmp	r4, #0
 801f192:	d0f4      	beq.n	801f17e <_Findy1+0x66>
 801f194:	4620      	mov	r0, r4
 801f196:	462a      	mov	r2, r5
 801f198:	4631      	mov	r1, r6
 801f19a:	f7ff ffbd 	bl	801f118 <_Findy1>
 801f19e:	4620      	mov	r0, r4
 801f1a0:	f7f3 fdf8 	bl	8012d94 <GUI_ALLOC_h2p>
 801f1a4:	6a04      	ldr	r4, [r0, #32]
 801f1a6:	2c00      	cmp	r4, #0
 801f1a8:	d1f4      	bne.n	801f194 <_Findy1+0x7c>
 801f1aa:	9801      	ldr	r0, [sp, #4]
 801f1ac:	6a04      	ldr	r4, [r0, #32]
 801f1ae:	a801      	add	r0, sp, #4
 801f1b0:	f7f3 fe0e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f1b4:	2c00      	cmp	r4, #0
 801f1b6:	d1b6      	bne.n	801f126 <_Findy1+0xe>
 801f1b8:	e7e7      	b.n	801f18a <_Findy1+0x72>
 801f1ba:	c803      	ldmia	r0, {r0, r1}
 801f1bc:	e885 0003 	stmia.w	r5, {r0, r1}
 801f1c0:	e7c0      	b.n	801f144 <_Findy1+0x2c>
 801f1c2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f1c6:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801f1ca:	429a      	cmp	r2, r3
 801f1cc:	ddd7      	ble.n	801f17e <_Findy1+0x66>
 801f1ce:	6a04      	ldr	r4, [r0, #32]
 801f1d0:	a801      	add	r0, sp, #4
 801f1d2:	80f3      	strh	r3, [r6, #6]
 801f1d4:	f7f3 fdfc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f1d8:	2c00      	cmp	r4, #0
 801f1da:	d1a4      	bne.n	801f126 <_Findy1+0xe>
 801f1dc:	e7d5      	b.n	801f18a <_Findy1+0x72>
 801f1de:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f1e2:	e7c0      	b.n	801f166 <_Findy1+0x4e>
 801f1e4:	4770      	bx	lr
 801f1e6:	bf00      	nop

0801f1e8 <_Findx0>:
 801f1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1ec:	4604      	mov	r4, r0
 801f1ee:	b084      	sub	sp, #16
 801f1f0:	2800      	cmp	r0, #0
 801f1f2:	d049      	beq.n	801f288 <_Findx0+0xa0>
 801f1f4:	460f      	mov	r7, r1
 801f1f6:	4690      	mov	r8, r2
 801f1f8:	2600      	movs	r6, #0
 801f1fa:	e00c      	b.n	801f216 <_Findx0+0x2e>
 801f1fc:	07e3      	lsls	r3, r4, #31
 801f1fe:	d42f      	bmi.n	801f260 <_Findx0+0x78>
 801f200:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f204:	2601      	movs	r6, #1
 801f206:	9801      	ldr	r0, [sp, #4]
 801f208:	4433      	add	r3, r6
 801f20a:	803b      	strh	r3, [r7, #0]
 801f20c:	6a04      	ldr	r4, [r0, #32]
 801f20e:	a801      	add	r0, sp, #4
 801f210:	f7f3 fdde 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f214:	b1e4      	cbz	r4, 801f250 <_Findx0+0x68>
 801f216:	4620      	mov	r0, r4
 801f218:	f7f3 fdc6 	bl	8012da8 <GUI_ALLOC_LockH>
 801f21c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801f21e:	9001      	str	r0, [sp, #4]
 801f220:	07a2      	lsls	r2, r4, #30
 801f222:	d5f3      	bpl.n	801f20c <_Findx0+0x24>
 801f224:	ad02      	add	r5, sp, #8
 801f226:	f1b8 0f00 	cmp.w	r8, #0
 801f22a:	d015      	beq.n	801f258 <_Findx0+0x70>
 801f22c:	4601      	mov	r1, r0
 801f22e:	4642      	mov	r2, r8
 801f230:	4628      	mov	r0, r5
 801f232:	f7fa fb87 	bl	8019944 <GUI__IntersectRects>
 801f236:	4629      	mov	r1, r5
 801f238:	4638      	mov	r0, r7
 801f23a:	f7f4 feb9 	bl	8013fb0 <GUI_RectsIntersect>
 801f23e:	2800      	cmp	r0, #0
 801f240:	d1dc      	bne.n	801f1fc <_Findx0+0x14>
 801f242:	9801      	ldr	r0, [sp, #4]
 801f244:	6a04      	ldr	r4, [r0, #32]
 801f246:	a801      	add	r0, sp, #4
 801f248:	f7f3 fdc2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f24c:	2c00      	cmp	r4, #0
 801f24e:	d1e2      	bne.n	801f216 <_Findx0+0x2e>
 801f250:	4630      	mov	r0, r6
 801f252:	b004      	add	sp, #16
 801f254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f258:	c803      	ldmia	r0, {r0, r1}
 801f25a:	e885 0003 	stmia.w	r5, {r0, r1}
 801f25e:	e7ea      	b.n	801f236 <_Findx0+0x4e>
 801f260:	9801      	ldr	r0, [sp, #4]
 801f262:	69c4      	ldr	r4, [r0, #28]
 801f264:	2c00      	cmp	r4, #0
 801f266:	d0d1      	beq.n	801f20c <_Findx0+0x24>
 801f268:	462a      	mov	r2, r5
 801f26a:	4639      	mov	r1, r7
 801f26c:	4620      	mov	r0, r4
 801f26e:	f7ff ffbb 	bl	801f1e8 <_Findx0>
 801f272:	2800      	cmp	r0, #0
 801f274:	4620      	mov	r0, r4
 801f276:	bf18      	it	ne
 801f278:	2601      	movne	r6, #1
 801f27a:	f7f3 fd8b 	bl	8012d94 <GUI_ALLOC_h2p>
 801f27e:	6a04      	ldr	r4, [r0, #32]
 801f280:	2c00      	cmp	r4, #0
 801f282:	d1f1      	bne.n	801f268 <_Findx0+0x80>
 801f284:	9801      	ldr	r0, [sp, #4]
 801f286:	e7dd      	b.n	801f244 <_Findx0+0x5c>
 801f288:	4606      	mov	r6, r0
 801f28a:	e7e1      	b.n	801f250 <_Findx0+0x68>

0801f28c <_Findx1>:
 801f28c:	2800      	cmp	r0, #0
 801f28e:	d043      	beq.n	801f318 <_Findx1+0x8c>
 801f290:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f292:	460e      	mov	r6, r1
 801f294:	b085      	sub	sp, #20
 801f296:	4617      	mov	r7, r2
 801f298:	4604      	mov	r4, r0
 801f29a:	e00b      	b.n	801f2b4 <_Findx1+0x28>
 801f29c:	07e3      	lsls	r3, r4, #31
 801f29e:	d42a      	bmi.n	801f2f6 <_Findx1+0x6a>
 801f2a0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f2a4:	9801      	ldr	r0, [sp, #4]
 801f2a6:	3b01      	subs	r3, #1
 801f2a8:	80b3      	strh	r3, [r6, #4]
 801f2aa:	6a04      	ldr	r4, [r0, #32]
 801f2ac:	a801      	add	r0, sp, #4
 801f2ae:	f7f3 fd8f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f2b2:	b1d4      	cbz	r4, 801f2ea <_Findx1+0x5e>
 801f2b4:	4620      	mov	r0, r4
 801f2b6:	f7f3 fd77 	bl	8012da8 <GUI_ALLOC_LockH>
 801f2ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801f2bc:	9001      	str	r0, [sp, #4]
 801f2be:	07a2      	lsls	r2, r4, #30
 801f2c0:	d5f3      	bpl.n	801f2aa <_Findx1+0x1e>
 801f2c2:	ad02      	add	r5, sp, #8
 801f2c4:	b19f      	cbz	r7, 801f2ee <_Findx1+0x62>
 801f2c6:	4601      	mov	r1, r0
 801f2c8:	463a      	mov	r2, r7
 801f2ca:	4628      	mov	r0, r5
 801f2cc:	f7fa fb3a 	bl	8019944 <GUI__IntersectRects>
 801f2d0:	4629      	mov	r1, r5
 801f2d2:	4630      	mov	r0, r6
 801f2d4:	f7f4 fe6c 	bl	8013fb0 <GUI_RectsIntersect>
 801f2d8:	2800      	cmp	r0, #0
 801f2da:	d1df      	bne.n	801f29c <_Findx1+0x10>
 801f2dc:	9801      	ldr	r0, [sp, #4]
 801f2de:	6a04      	ldr	r4, [r0, #32]
 801f2e0:	a801      	add	r0, sp, #4
 801f2e2:	f7f3 fd75 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f2e6:	2c00      	cmp	r4, #0
 801f2e8:	d1e4      	bne.n	801f2b4 <_Findx1+0x28>
 801f2ea:	b005      	add	sp, #20
 801f2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2ee:	c803      	ldmia	r0, {r0, r1}
 801f2f0:	e885 0003 	stmia.w	r5, {r0, r1}
 801f2f4:	e7ec      	b.n	801f2d0 <_Findx1+0x44>
 801f2f6:	9801      	ldr	r0, [sp, #4]
 801f2f8:	69c4      	ldr	r4, [r0, #28]
 801f2fa:	2c00      	cmp	r4, #0
 801f2fc:	d0d5      	beq.n	801f2aa <_Findx1+0x1e>
 801f2fe:	4620      	mov	r0, r4
 801f300:	462a      	mov	r2, r5
 801f302:	4631      	mov	r1, r6
 801f304:	f7ff ffc2 	bl	801f28c <_Findx1>
 801f308:	4620      	mov	r0, r4
 801f30a:	f7f3 fd43 	bl	8012d94 <GUI_ALLOC_h2p>
 801f30e:	6a04      	ldr	r4, [r0, #32]
 801f310:	2c00      	cmp	r4, #0
 801f312:	d1f4      	bne.n	801f2fe <_Findx1+0x72>
 801f314:	9801      	ldr	r0, [sp, #4]
 801f316:	e7e2      	b.n	801f2de <_Findx1+0x52>
 801f318:	4770      	bx	lr
 801f31a:	bf00      	nop

0801f31c <_Paint1Trans>:
 801f31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f320:	4d2a      	ldr	r5, [pc, #168]	; (801f3cc <_Paint1Trans+0xb0>)
 801f322:	b083      	sub	sp, #12
 801f324:	4606      	mov	r6, r0
 801f326:	682b      	ldr	r3, [r5, #0]
 801f328:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f32a:	f7f3 fd3d 	bl	8012da8 <GUI_ALLOC_LockH>
 801f32e:	9000      	str	r0, [sp, #0]
 801f330:	4630      	mov	r0, r6
 801f332:	f7f3 fd39 	bl	8012da8 <GUI_ALLOC_LockH>
 801f336:	9b00      	ldr	r3, [sp, #0]
 801f338:	4601      	mov	r1, r0
 801f33a:	9001      	str	r0, [sp, #4]
 801f33c:	f103 0008 	add.w	r0, r3, #8
 801f340:	f7f4 fe36 	bl	8013fb0 <GUI_RectsIntersect>
 801f344:	b950      	cbnz	r0, 801f35c <_Paint1Trans+0x40>
 801f346:	4604      	mov	r4, r0
 801f348:	4668      	mov	r0, sp
 801f34a:	f7f3 fd41 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f34e:	a801      	add	r0, sp, #4
 801f350:	f7f3 fd3e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f354:	4620      	mov	r0, r4
 801f356:	b003      	add	sp, #12
 801f358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f35c:	af02      	add	r7, sp, #8
 801f35e:	9901      	ldr	r1, [sp, #4]
 801f360:	682b      	ldr	r3, [r5, #0]
 801f362:	2401      	movs	r4, #1
 801f364:	f857 2d08 	ldr.w	r2, [r7, #-8]!
 801f368:	f101 0008 	add.w	r0, r1, #8
 801f36c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801f370:	3208      	adds	r2, #8
 801f372:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801f376:	f7fa fae5 	bl	8019944 <GUI__IntersectRects>
 801f37a:	4638      	mov	r0, r7
 801f37c:	f7f3 fd28 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f380:	a802      	add	r0, sp, #8
 801f382:	682b      	ldr	r3, [r5, #0]
 801f384:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801f388:	4f11      	ldr	r7, [pc, #68]	; (801f3d0 <_Paint1Trans+0xb4>)
 801f38a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f38e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801f392:	64d9      	str	r1, [r3, #76]	; 0x4c
 801f394:	651a      	str	r2, [r3, #80]	; 0x50
 801f396:	603e      	str	r6, [r7, #0]
 801f398:	f7f3 fd1a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f39c:	4630      	mov	r0, r6
 801f39e:	f7f3 fcf9 	bl	8012d94 <GUI_ALLOC_h2p>
 801f3a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801f3a4:	4b0b      	ldr	r3, [pc, #44]	; (801f3d4 <_Paint1Trans+0xb8>)
 801f3a6:	4630      	mov	r0, r6
 801f3a8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801f3ac:	4a0a      	ldr	r2, [pc, #40]	; (801f3d8 <_Paint1Trans+0xbc>)
 801f3ae:	bf08      	it	eq
 801f3b0:	4613      	moveq	r3, r2
 801f3b2:	4798      	blx	r3
 801f3b4:	682b      	ldr	r3, [r5, #0]
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 801f3be:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 801f3c2:	603a      	str	r2, [r7, #0]
 801f3c4:	b003      	add	sp, #12
 801f3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f3ca:	bf00      	nop
 801f3cc:	20000018 	.word	0x20000018
 801f3d0:	200467f8 	.word	0x200467f8
 801f3d4:	08023c7d 	.word	0x08023c7d
 801f3d8:	08020ced 	.word	0x08020ced

0801f3dc <_PaintTransChildren>:
 801f3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e0:	b082      	sub	sp, #8
 801f3e2:	4606      	mov	r6, r0
 801f3e4:	f7f3 fce0 	bl	8012da8 <GUI_ALLOC_LockH>
 801f3e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f3ea:	9001      	str	r0, [sp, #4]
 801f3ec:	079b      	lsls	r3, r3, #30
 801f3ee:	d524      	bpl.n	801f43a <_PaintTransChildren+0x5e>
 801f3f0:	69c4      	ldr	r4, [r0, #28]
 801f3f2:	b314      	cbz	r4, 801f43a <_PaintTransChildren+0x5e>
 801f3f4:	ad01      	add	r5, sp, #4
 801f3f6:	e004      	b.n	801f402 <_PaintTransChildren+0x26>
 801f3f8:	6a0c      	ldr	r4, [r1, #32]
 801f3fa:	4668      	mov	r0, sp
 801f3fc:	f7f3 fce8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f400:	b1ac      	cbz	r4, 801f42e <_PaintTransChildren+0x52>
 801f402:	4620      	mov	r0, r4
 801f404:	f7f3 fcd0 	bl	8012da8 <GUI_ALLOC_LockH>
 801f408:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f40a:	4601      	mov	r1, r0
 801f40c:	9000      	str	r0, [sp, #0]
 801f40e:	f003 0303 	and.w	r3, r3, #3
 801f412:	2b03      	cmp	r3, #3
 801f414:	d1f0      	bne.n	801f3f8 <_PaintTransChildren+0x1c>
 801f416:	9901      	ldr	r1, [sp, #4]
 801f418:	3108      	adds	r1, #8
 801f41a:	f7f4 fdc9 	bl	8013fb0 <GUI_RectsIntersect>
 801f41e:	b998      	cbnz	r0, 801f448 <_PaintTransChildren+0x6c>
 801f420:	9900      	ldr	r1, [sp, #0]
 801f422:	4668      	mov	r0, sp
 801f424:	6a0c      	ldr	r4, [r1, #32]
 801f426:	f7f3 fcd3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f42a:	2c00      	cmp	r4, #0
 801f42c:	d1e9      	bne.n	801f402 <_PaintTransChildren+0x26>
 801f42e:	4628      	mov	r0, r5
 801f430:	f7f3 fcce 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f434:	b002      	add	sp, #8
 801f436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f43a:	ad01      	add	r5, sp, #4
 801f43c:	4628      	mov	r0, r5
 801f43e:	f7f3 fcc7 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f442:	b002      	add	sp, #8
 801f444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f448:	9b01      	ldr	r3, [sp, #4]
 801f44a:	4628      	mov	r0, r5
 801f44c:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 801f450:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 801f454:	f9b3 800c 	ldrsh.w	r8, [r3, #12]
 801f458:	f9b3 700e 	ldrsh.w	r7, [r3, #14]
 801f45c:	f7f3 fcb8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f460:	4668      	mov	r0, sp
 801f462:	f7f3 fcb5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f466:	4620      	mov	r0, r4
 801f468:	f7ff ff58 	bl	801f31c <_Paint1Trans>
 801f46c:	b988      	cbnz	r0, 801f492 <_PaintTransChildren+0xb6>
 801f46e:	4630      	mov	r0, r6
 801f470:	f7f3 fc9a 	bl	8012da8 <GUI_ALLOC_LockH>
 801f474:	9001      	str	r0, [sp, #4]
 801f476:	4620      	mov	r0, r4
 801f478:	f7f3 fc96 	bl	8012da8 <GUI_ALLOC_LockH>
 801f47c:	9b01      	ldr	r3, [sp, #4]
 801f47e:	9000      	str	r0, [sp, #0]
 801f480:	4601      	mov	r1, r0
 801f482:	f8a3 a008 	strh.w	sl, [r3, #8]
 801f486:	f8a3 900a 	strh.w	r9, [r3, #10]
 801f48a:	f8a3 800c 	strh.w	r8, [r3, #12]
 801f48e:	81df      	strh	r7, [r3, #14]
 801f490:	e7b2      	b.n	801f3f8 <_PaintTransChildren+0x1c>
 801f492:	4620      	mov	r0, r4
 801f494:	f7f3 fc7e 	bl	8012d94 <GUI_ALLOC_h2p>
 801f498:	9000      	str	r0, [sp, #0]
 801f49a:	4620      	mov	r0, r4
 801f49c:	f7ff ff9e 	bl	801f3dc <_PaintTransChildren>
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f7f3 fc77 	bl	8012d94 <GUI_ALLOC_h2p>
 801f4a6:	9000      	str	r0, [sp, #0]
 801f4a8:	4630      	mov	r0, r6
 801f4aa:	f7f3 fc73 	bl	8012d94 <GUI_ALLOC_h2p>
 801f4ae:	9001      	str	r0, [sp, #4]
 801f4b0:	e7dd      	b.n	801f46e <_PaintTransChildren+0x92>
 801f4b2:	bf00      	nop

0801f4b4 <_Findx0.constprop.10>:
 801f4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4b6:	4604      	mov	r4, r0
 801f4b8:	b085      	sub	sp, #20
 801f4ba:	2800      	cmp	r0, #0
 801f4bc:	d03e      	beq.n	801f53c <_Findx0.constprop.10+0x88>
 801f4be:	460f      	mov	r7, r1
 801f4c0:	2600      	movs	r6, #0
 801f4c2:	ad02      	add	r5, sp, #8
 801f4c4:	e00c      	b.n	801f4e0 <_Findx0.constprop.10+0x2c>
 801f4c6:	07e3      	lsls	r3, r4, #31
 801f4c8:	d424      	bmi.n	801f514 <_Findx0.constprop.10+0x60>
 801f4ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f4ce:	2601      	movs	r6, #1
 801f4d0:	9801      	ldr	r0, [sp, #4]
 801f4d2:	4433      	add	r3, r6
 801f4d4:	803b      	strh	r3, [r7, #0]
 801f4d6:	6a04      	ldr	r4, [r0, #32]
 801f4d8:	a801      	add	r0, sp, #4
 801f4da:	f7f3 fc79 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f4de:	b1b4      	cbz	r4, 801f50e <_Findx0.constprop.10+0x5a>
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	f7f3 fc61 	bl	8012da8 <GUI_ALLOC_LockH>
 801f4e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801f4e8:	9001      	str	r0, [sp, #4]
 801f4ea:	07a2      	lsls	r2, r4, #30
 801f4ec:	d5f3      	bpl.n	801f4d6 <_Findx0.constprop.10+0x22>
 801f4ee:	c803      	ldmia	r0, {r0, r1}
 801f4f0:	e885 0003 	stmia.w	r5, {r0, r1}
 801f4f4:	4629      	mov	r1, r5
 801f4f6:	4638      	mov	r0, r7
 801f4f8:	f7f4 fd5a 	bl	8013fb0 <GUI_RectsIntersect>
 801f4fc:	2800      	cmp	r0, #0
 801f4fe:	d1e2      	bne.n	801f4c6 <_Findx0.constprop.10+0x12>
 801f500:	9801      	ldr	r0, [sp, #4]
 801f502:	6a04      	ldr	r4, [r0, #32]
 801f504:	a801      	add	r0, sp, #4
 801f506:	f7f3 fc63 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f50a:	2c00      	cmp	r4, #0
 801f50c:	d1e8      	bne.n	801f4e0 <_Findx0.constprop.10+0x2c>
 801f50e:	4630      	mov	r0, r6
 801f510:	b005      	add	sp, #20
 801f512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f514:	9801      	ldr	r0, [sp, #4]
 801f516:	69c4      	ldr	r4, [r0, #28]
 801f518:	2c00      	cmp	r4, #0
 801f51a:	d0dc      	beq.n	801f4d6 <_Findx0.constprop.10+0x22>
 801f51c:	462a      	mov	r2, r5
 801f51e:	4639      	mov	r1, r7
 801f520:	4620      	mov	r0, r4
 801f522:	f7ff fe61 	bl	801f1e8 <_Findx0>
 801f526:	2800      	cmp	r0, #0
 801f528:	4620      	mov	r0, r4
 801f52a:	bf18      	it	ne
 801f52c:	2601      	movne	r6, #1
 801f52e:	f7f3 fc31 	bl	8012d94 <GUI_ALLOC_h2p>
 801f532:	6a04      	ldr	r4, [r0, #32]
 801f534:	2c00      	cmp	r4, #0
 801f536:	d1f1      	bne.n	801f51c <_Findx0.constprop.10+0x68>
 801f538:	9801      	ldr	r0, [sp, #4]
 801f53a:	e7e2      	b.n	801f502 <_Findx0.constprop.10+0x4e>
 801f53c:	4606      	mov	r6, r0
 801f53e:	e7e6      	b.n	801f50e <_Findx0.constprop.10+0x5a>

0801f540 <_Findy1.constprop.11>:
 801f540:	2800      	cmp	r0, #0
 801f542:	d050      	beq.n	801f5e6 <_Findy1.constprop.11+0xa6>
 801f544:	b570      	push	{r4, r5, r6, lr}
 801f546:	b084      	sub	sp, #16
 801f548:	460e      	mov	r6, r1
 801f54a:	4604      	mov	r4, r0
 801f54c:	ad02      	add	r5, sp, #8
 801f54e:	4620      	mov	r0, r4
 801f550:	f7f3 fc2a 	bl	8012da8 <GUI_ALLOC_LockH>
 801f554:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801f556:	9001      	str	r0, [sp, #4]
 801f558:	07a2      	lsls	r2, r4, #30
 801f55a:	d518      	bpl.n	801f58e <_Findy1.constprop.11+0x4e>
 801f55c:	c803      	ldmia	r0, {r0, r1}
 801f55e:	e885 0003 	stmia.w	r5, {r0, r1}
 801f562:	4629      	mov	r1, r5
 801f564:	4630      	mov	r0, r6
 801f566:	f7f4 fd23 	bl	8013fb0 <GUI_RectsIntersect>
 801f56a:	b330      	cbz	r0, 801f5ba <_Findy1.constprop.11+0x7a>
 801f56c:	07e3      	lsls	r3, r4, #31
 801f56e:	9801      	ldr	r0, [sp, #4]
 801f570:	d415      	bmi.n	801f59e <_Findy1.constprop.11+0x5e>
 801f572:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801f576:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f57a:	429a      	cmp	r2, r3
 801f57c:	dd25      	ble.n	801f5ca <_Findy1.constprop.11+0x8a>
 801f57e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f582:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801f586:	429a      	cmp	r2, r3
 801f588:	db01      	blt.n	801f58e <_Findy1.constprop.11+0x4e>
 801f58a:	3b01      	subs	r3, #1
 801f58c:	80f3      	strh	r3, [r6, #6]
 801f58e:	6a04      	ldr	r4, [r0, #32]
 801f590:	a801      	add	r0, sp, #4
 801f592:	f7f3 fc1d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f596:	2c00      	cmp	r4, #0
 801f598:	d1d9      	bne.n	801f54e <_Findy1.constprop.11+0xe>
 801f59a:	b004      	add	sp, #16
 801f59c:	bd70      	pop	{r4, r5, r6, pc}
 801f59e:	69c4      	ldr	r4, [r0, #28]
 801f5a0:	2c00      	cmp	r4, #0
 801f5a2:	d0f4      	beq.n	801f58e <_Findy1.constprop.11+0x4e>
 801f5a4:	4620      	mov	r0, r4
 801f5a6:	462a      	mov	r2, r5
 801f5a8:	4631      	mov	r1, r6
 801f5aa:	f7ff fdb5 	bl	801f118 <_Findy1>
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	f7f3 fbf0 	bl	8012d94 <GUI_ALLOC_h2p>
 801f5b4:	6a04      	ldr	r4, [r0, #32]
 801f5b6:	2c00      	cmp	r4, #0
 801f5b8:	d1f4      	bne.n	801f5a4 <_Findy1.constprop.11+0x64>
 801f5ba:	9801      	ldr	r0, [sp, #4]
 801f5bc:	6a04      	ldr	r4, [r0, #32]
 801f5be:	a801      	add	r0, sp, #4
 801f5c0:	f7f3 fc06 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f5c4:	2c00      	cmp	r4, #0
 801f5c6:	d1c2      	bne.n	801f54e <_Findy1.constprop.11+0xe>
 801f5c8:	e7e7      	b.n	801f59a <_Findy1.constprop.11+0x5a>
 801f5ca:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f5ce:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801f5d2:	429a      	cmp	r2, r3
 801f5d4:	dddb      	ble.n	801f58e <_Findy1.constprop.11+0x4e>
 801f5d6:	6a04      	ldr	r4, [r0, #32]
 801f5d8:	a801      	add	r0, sp, #4
 801f5da:	80f3      	strh	r3, [r6, #6]
 801f5dc:	f7f3 fbf8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f5e0:	2c00      	cmp	r4, #0
 801f5e2:	d1b4      	bne.n	801f54e <_Findy1.constprop.11+0xe>
 801f5e4:	e7d9      	b.n	801f59a <_Findy1.constprop.11+0x5a>
 801f5e6:	4770      	bx	lr

0801f5e8 <WM__PaintWinAndOverlays>:
 801f5e8:	b530      	push	{r4, r5, lr}
 801f5ea:	b083      	sub	sp, #12
 801f5ec:	4604      	mov	r4, r0
 801f5ee:	f7f3 fbdb 	bl	8012da8 <GUI_ALLOC_LockH>
 801f5f2:	f640 0301 	movw	r3, #2049	; 0x801
 801f5f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801f5f8:	9001      	str	r0, [sp, #4]
 801f5fa:	4013      	ands	r3, r2
 801f5fc:	2b01      	cmp	r3, #1
 801f5fe:	d00e      	beq.n	801f61e <WM__PaintWinAndOverlays+0x36>
 801f600:	a801      	add	r0, sp, #4
 801f602:	f7f3 fbe5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f606:	4620      	mov	r0, r4
 801f608:	f7f3 fbc4 	bl	8012d94 <GUI_ALLOC_h2p>
 801f60c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801f60e:	4b1b      	ldr	r3, [pc, #108]	; (801f67c <WM__PaintWinAndOverlays+0x94>)
 801f610:	4620      	mov	r0, r4
 801f612:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 801f616:	4a1a      	ldr	r2, [pc, #104]	; (801f680 <WM__PaintWinAndOverlays+0x98>)
 801f618:	bf08      	it	eq
 801f61a:	4613      	moveq	r3, r2
 801f61c:	4798      	blx	r3
 801f61e:	4b19      	ldr	r3, [pc, #100]	; (801f684 <WM__PaintWinAndOverlays+0x9c>)
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	b90b      	cbnz	r3, 801f628 <WM__PaintWinAndOverlays+0x40>
 801f624:	b003      	add	sp, #12
 801f626:	bd30      	pop	{r4, r5, pc}
 801f628:	4620      	mov	r0, r4
 801f62a:	f7ff fed7 	bl	801f3dc <_PaintTransChildren>
 801f62e:	4620      	mov	r0, r4
 801f630:	f7f3 fbb0 	bl	8012d94 <GUI_ALLOC_h2p>
 801f634:	6985      	ldr	r5, [r0, #24]
 801f636:	6a04      	ldr	r4, [r0, #32]
 801f638:	2d00      	cmp	r5, #0
 801f63a:	d0f3      	beq.n	801f624 <WM__PaintWinAndOverlays+0x3c>
 801f63c:	b184      	cbz	r4, 801f660 <WM__PaintWinAndOverlays+0x78>
 801f63e:	4620      	mov	r0, r4
 801f640:	f7f3 fba8 	bl	8012d94 <GUI_ALLOC_h2p>
 801f644:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f646:	f003 0303 	and.w	r3, r3, #3
 801f64a:	2b03      	cmp	r3, #3
 801f64c:	d011      	beq.n	801f672 <WM__PaintWinAndOverlays+0x8a>
 801f64e:	4620      	mov	r0, r4
 801f650:	f7ff fec4 	bl	801f3dc <_PaintTransChildren>
 801f654:	4620      	mov	r0, r4
 801f656:	f7f3 fb9d 	bl	8012d94 <GUI_ALLOC_h2p>
 801f65a:	6a04      	ldr	r4, [r0, #32]
 801f65c:	2c00      	cmp	r4, #0
 801f65e:	d1ee      	bne.n	801f63e <WM__PaintWinAndOverlays+0x56>
 801f660:	4628      	mov	r0, r5
 801f662:	f7f3 fb97 	bl	8012d94 <GUI_ALLOC_h2p>
 801f666:	6985      	ldr	r5, [r0, #24]
 801f668:	6a04      	ldr	r4, [r0, #32]
 801f66a:	2d00      	cmp	r5, #0
 801f66c:	d1e6      	bne.n	801f63c <WM__PaintWinAndOverlays+0x54>
 801f66e:	b003      	add	sp, #12
 801f670:	bd30      	pop	{r4, r5, pc}
 801f672:	4620      	mov	r0, r4
 801f674:	f7ff fe52 	bl	801f31c <_Paint1Trans>
 801f678:	e7e9      	b.n	801f64e <WM__PaintWinAndOverlays+0x66>
 801f67a:	bf00      	nop
 801f67c:	08023c7d 	.word	0x08023c7d
 801f680:	08020ced 	.word	0x08020ced
 801f684:	2004684c 	.word	0x2004684c

0801f688 <_cbPaintMemDev>:
 801f688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f68c:	4d19      	ldr	r5, [pc, #100]	; (801f6f4 <_cbPaintMemDev+0x6c>)
 801f68e:	b082      	sub	sp, #8
 801f690:	4682      	mov	sl, r0
 801f692:	682b      	ldr	r3, [r5, #0]
 801f694:	ac02      	add	r4, sp, #8
 801f696:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f698:	f7f3 fb86 	bl	8012da8 <GUI_ALLOC_LockH>
 801f69c:	682b      	ldr	r3, [r5, #0]
 801f69e:	f100 0208 	add.w	r2, r0, #8
 801f6a2:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801f6a6:	3308      	adds	r3, #8
 801f6a8:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 801f6ac:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801f6b0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 801f6b4:	f844 0d04 	str.w	r0, [r4, #-4]!
 801f6b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f6bc:	e882 0003 	stmia.w	r2, {r0, r1}
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	f7f3 fb85 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f6c6:	f8da 0000 	ldr.w	r0, [sl]
 801f6ca:	f7ff ff8d 	bl	801f5e8 <WM__PaintWinAndOverlays>
 801f6ce:	682b      	ldr	r3, [r5, #0]
 801f6d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f6d2:	f7f3 fb69 	bl	8012da8 <GUI_ALLOC_LockH>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	4620      	mov	r0, r4
 801f6da:	f8a3 9008 	strh.w	r9, [r3, #8]
 801f6de:	f8a3 800a 	strh.w	r8, [r3, #10]
 801f6e2:	819f      	strh	r7, [r3, #12]
 801f6e4:	81de      	strh	r6, [r3, #14]
 801f6e6:	9301      	str	r3, [sp, #4]
 801f6e8:	f7f3 fb72 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f6ec:	b002      	add	sp, #8
 801f6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6f2:	bf00      	nop
 801f6f4:	20000018 	.word	0x20000018

0801f6f8 <_Invalidate1Abs>:
 801f6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6fa:	b085      	sub	sp, #20
 801f6fc:	4616      	mov	r6, r2
 801f6fe:	460c      	mov	r4, r1
 801f700:	4605      	mov	r5, r0
 801f702:	f7f3 fb47 	bl	8012d94 <GUI_ALLOC_h2p>
 801f706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f708:	9001      	str	r0, [sp, #4]
 801f70a:	079a      	lsls	r2, r3, #30
 801f70c:	d505      	bpl.n	801f71a <_Invalidate1Abs+0x22>
 801f70e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f712:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f716:	4291      	cmp	r1, r2
 801f718:	da01      	bge.n	801f71e <_Invalidate1Abs+0x26>
 801f71a:	b005      	add	sp, #20
 801f71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f71e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801f722:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f726:	4291      	cmp	r1, r2
 801f728:	dcf7      	bgt.n	801f71a <_Invalidate1Abs+0x22>
 801f72a:	f640 0201 	movw	r2, #2049	; 0x801
 801f72e:	401a      	ands	r2, r3
 801f730:	2a01      	cmp	r2, #1
 801f732:	d0f2      	beq.n	801f71a <_Invalidate1Abs+0x22>
 801f734:	4628      	mov	r0, r5
 801f736:	af02      	add	r7, sp, #8
 801f738:	f7f3 fb36 	bl	8012da8 <GUI_ALLOC_LockH>
 801f73c:	4603      	mov	r3, r0
 801f73e:	4621      	mov	r1, r4
 801f740:	4638      	mov	r0, r7
 801f742:	461a      	mov	r2, r3
 801f744:	9301      	str	r3, [sp, #4]
 801f746:	f7fa f8fd 	bl	8019944 <GUI__IntersectRects>
 801f74a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801f74e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f752:	429a      	cmp	r2, r3
 801f754:	dc2e      	bgt.n	801f7b4 <_Invalidate1Abs+0xbc>
 801f756:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801f75a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f75e:	429a      	cmp	r2, r3
 801f760:	dc28      	bgt.n	801f7b4 <_Invalidate1Abs+0xbc>
 801f762:	9a01      	ldr	r2, [sp, #4]
 801f764:	f244 0320 	movw	r3, #16416	; 0x4020
 801f768:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801f76a:	400b      	ands	r3, r1
 801f76c:	bb3b      	cbnz	r3, 801f7be <_Invalidate1Abs+0xc6>
 801f76e:	4c18      	ldr	r4, [pc, #96]	; (801f7d0 <_Invalidate1Abs+0xd8>)
 801f770:	430e      	orrs	r6, r1
 801f772:	f102 0e08 	add.w	lr, r2, #8
 801f776:	8823      	ldrh	r3, [r4, #0]
 801f778:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f77c:	3301      	adds	r3, #1
 801f77e:	e88e 0003 	stmia.w	lr, {r0, r1}
 801f782:	8023      	strh	r3, [r4, #0]
 801f784:	6296      	str	r6, [r2, #40]	; 0x28
 801f786:	e000      	b.n	801f78a <_Invalidate1Abs+0x92>
 801f788:	461d      	mov	r5, r3
 801f78a:	4628      	mov	r0, r5
 801f78c:	f7f3 fb02 	bl	8012d94 <GUI_ALLOC_h2p>
 801f790:	6983      	ldr	r3, [r0, #24]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d1f8      	bne.n	801f788 <_Invalidate1Abs+0x90>
 801f796:	4b0f      	ldr	r3, [pc, #60]	; (801f7d4 <_Invalidate1Abs+0xdc>)
 801f798:	681a      	ldr	r2, [r3, #0]
 801f79a:	4295      	cmp	r5, r2
 801f79c:	d016      	beq.n	801f7cc <_Invalidate1Abs+0xd4>
 801f79e:	685b      	ldr	r3, [r3, #4]
 801f7a0:	42ab      	cmp	r3, r5
 801f7a2:	bf0c      	ite	eq
 801f7a4:	2302      	moveq	r3, #2
 801f7a6:	2300      	movne	r3, #0
 801f7a8:	4a0b      	ldr	r2, [pc, #44]	; (801f7d8 <_Invalidate1Abs+0xe0>)
 801f7aa:	6811      	ldr	r1, [r2, #0]
 801f7ac:	430b      	orrs	r3, r1
 801f7ae:	6013      	str	r3, [r2, #0]
 801f7b0:	f7f9 fb8e 	bl	8018ed0 <GUI_SignalEvent>
 801f7b4:	a801      	add	r0, sp, #4
 801f7b6:	f7f3 fb0b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f7ba:	b005      	add	sp, #20
 801f7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7be:	f102 0108 	add.w	r1, r2, #8
 801f7c2:	463a      	mov	r2, r7
 801f7c4:	4608      	mov	r0, r1
 801f7c6:	f7f4 faeb 	bl	8013da0 <GUI_MergeRect>
 801f7ca:	e7f3      	b.n	801f7b4 <_Invalidate1Abs+0xbc>
 801f7cc:	2301      	movs	r3, #1
 801f7ce:	e7eb      	b.n	801f7a8 <_Invalidate1Abs+0xb0>
 801f7d0:	20046814 	.word	0x20046814
 801f7d4:	200467fc 	.word	0x200467fc
 801f7d8:	20046824 	.word	0x20046824

0801f7dc <WM__ActivateClipRect>:
 801f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7e0:	4f45      	ldr	r7, [pc, #276]	; (801f8f8 <WM__ActivateClipRect+0x11c>)
 801f7e2:	b086      	sub	sp, #24
 801f7e4:	683b      	ldr	r3, [r7, #0]
 801f7e6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801f7ea:	2a00      	cmp	r2, #0
 801f7ec:	d139      	bne.n	801f862 <WM__ActivateClipRect+0x86>
 801f7ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801f7f0:	ae02      	add	r6, sp, #8
 801f7f2:	f7f3 fad9 	bl	8012da8 <GUI_ALLOC_LockH>
 801f7f6:	9000      	str	r0, [sp, #0]
 801f7f8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801f8fc <WM__ActivateClipRect+0x120>
 801f7fc:	c803      	ldmia	r0, {r0, r1}
 801f7fe:	e886 0003 	stmia.w	r6, {r0, r1}
 801f802:	4668      	mov	r0, sp
 801f804:	f7f3 fae4 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f808:	f8d8 4000 	ldr.w	r4, [r8]
 801f80c:	2c00      	cmp	r4, #0
 801f80e:	d150      	bne.n	801f8b2 <WM__ActivateClipRect+0xd6>
 801f810:	683f      	ldr	r7, [r7, #0]
 801f812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f814:	2a00      	cmp	r2, #0
 801f816:	d067      	beq.n	801f8e8 <WM__ActivateClipRect+0x10c>
 801f818:	ad04      	add	r5, sp, #16
 801f81a:	6810      	ldr	r0, [r2, #0]
 801f81c:	6851      	ldr	r1, [r2, #4]
 801f81e:	462b      	mov	r3, r5
 801f820:	f8d8 4000 	ldr.w	r4, [r8]
 801f824:	c303      	stmia	r3!, {r0, r1}
 801f826:	b1d4      	cbz	r4, 801f85e <WM__ActivateClipRect+0x82>
 801f828:	4620      	mov	r0, r4
 801f82a:	ac06      	add	r4, sp, #24
 801f82c:	f7f3 fabc 	bl	8012da8 <GUI_ALLOC_LockH>
 801f830:	4603      	mov	r3, r0
 801f832:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f836:	4628      	mov	r0, r5
 801f838:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f83c:	f844 3d14 	str.w	r3, [r4, #-20]!
 801f840:	f7f4 fadc 	bl	8013dfc <GUI_MoveRect>
 801f844:	4620      	mov	r0, r4
 801f846:	f7f3 fac3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f84a:	4628      	mov	r0, r5
 801f84c:	4631      	mov	r1, r6
 801f84e:	f7fa f85b 	bl	8019908 <GUI__IntersectRect>
 801f852:	4628      	mov	r0, r5
 801f854:	f004 f9f8 	bl	8023c48 <LCD_SetClipRectEx>
 801f858:	b006      	add	sp, #24
 801f85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f85e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 801f860:	e7e2      	b.n	801f828 <WM__ActivateClipRect+0x4c>
 801f862:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801f864:	2900      	cmp	r1, #0
 801f866:	d043      	beq.n	801f8f0 <WM__ActivateClipRect+0x114>
 801f868:	ad04      	add	r5, sp, #16
 801f86a:	4c24      	ldr	r4, [pc, #144]	; (801f8fc <WM__ActivateClipRect+0x120>)
 801f86c:	6808      	ldr	r0, [r1, #0]
 801f86e:	462a      	mov	r2, r5
 801f870:	6849      	ldr	r1, [r1, #4]
 801f872:	6824      	ldr	r4, [r4, #0]
 801f874:	c203      	stmia	r2!, {r0, r1}
 801f876:	b1d4      	cbz	r4, 801f8ae <WM__ActivateClipRect+0xd2>
 801f878:	4620      	mov	r0, r4
 801f87a:	ac06      	add	r4, sp, #24
 801f87c:	f7f3 fa94 	bl	8012da8 <GUI_ALLOC_LockH>
 801f880:	4603      	mov	r3, r0
 801f882:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801f886:	4628      	mov	r0, r5
 801f888:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f88c:	f844 3d10 	str.w	r3, [r4, #-16]!
 801f890:	f7f4 fab4 	bl	8013dfc <GUI_MoveRect>
 801f894:	4620      	mov	r0, r4
 801f896:	f7f3 fa9b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f89a:	4919      	ldr	r1, [pc, #100]	; (801f900 <WM__ActivateClipRect+0x124>)
 801f89c:	4628      	mov	r0, r5
 801f89e:	f7fa f833 	bl	8019908 <GUI__IntersectRect>
 801f8a2:	4628      	mov	r0, r5
 801f8a4:	f004 f9d0 	bl	8023c48 <LCD_SetClipRectEx>
 801f8a8:	b006      	add	sp, #24
 801f8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8ae:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 801f8b0:	e7e2      	b.n	801f878 <WM__ActivateClipRect+0x9c>
 801f8b2:	ad04      	add	r5, sp, #16
 801f8b4:	e007      	b.n	801f8c6 <WM__ActivateClipRect+0xea>
 801f8b6:	f7fa f827 	bl	8019908 <GUI__IntersectRect>
 801f8ba:	9b04      	ldr	r3, [sp, #16]
 801f8bc:	4628      	mov	r0, r5
 801f8be:	699c      	ldr	r4, [r3, #24]
 801f8c0:	b17c      	cbz	r4, 801f8e2 <WM__ActivateClipRect+0x106>
 801f8c2:	f7f3 fa85 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f8c6:	4620      	mov	r0, r4
 801f8c8:	f7f3 fa6e 	bl	8012da8 <GUI_ALLOC_LockH>
 801f8cc:	4603      	mov	r3, r0
 801f8ce:	4630      	mov	r0, r6
 801f8d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f8d2:	4619      	mov	r1, r3
 801f8d4:	9304      	str	r3, [sp, #16]
 801f8d6:	0793      	lsls	r3, r2, #30
 801f8d8:	d4ed      	bmi.n	801f8b6 <WM__ActivateClipRect+0xda>
 801f8da:	4628      	mov	r0, r5
 801f8dc:	f7f3 fa78 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f8e0:	e796      	b.n	801f810 <WM__ActivateClipRect+0x34>
 801f8e2:	f7f3 fa75 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f8e6:	e793      	b.n	801f810 <WM__ActivateClipRect+0x34>
 801f8e8:	4630      	mov	r0, r6
 801f8ea:	f004 f9ad 	bl	8023c48 <LCD_SetClipRectEx>
 801f8ee:	e7b3      	b.n	801f858 <WM__ActivateClipRect+0x7c>
 801f8f0:	4803      	ldr	r0, [pc, #12]	; (801f900 <WM__ActivateClipRect+0x124>)
 801f8f2:	f004 f9a9 	bl	8023c48 <LCD_SetClipRectEx>
 801f8f6:	e7af      	b.n	801f858 <WM__ActivateClipRect+0x7c>
 801f8f8:	20000018 	.word	0x20000018
 801f8fc:	200467f8 	.word	0x200467f8
 801f900:	200003f8 	.word	0x200003f8

0801f904 <WM__InsertWindowIntoList>:
 801f904:	b901      	cbnz	r1, 801f908 <WM__InsertWindowIntoList+0x4>
 801f906:	4770      	bx	lr
 801f908:	b570      	push	{r4, r5, r6, lr}
 801f90a:	b084      	sub	sp, #16
 801f90c:	460c      	mov	r4, r1
 801f90e:	4605      	mov	r5, r0
 801f910:	f7f3 fa4a 	bl	8012da8 <GUI_ALLOC_LockH>
 801f914:	2200      	movs	r2, #0
 801f916:	4603      	mov	r3, r0
 801f918:	4620      	mov	r0, r4
 801f91a:	619c      	str	r4, [r3, #24]
 801f91c:	621a      	str	r2, [r3, #32]
 801f91e:	9301      	str	r3, [sp, #4]
 801f920:	f7f3 fa42 	bl	8012da8 <GUI_ALLOC_LockH>
 801f924:	69c4      	ldr	r4, [r0, #28]
 801f926:	9002      	str	r0, [sp, #8]
 801f928:	b32c      	cbz	r4, 801f976 <WM__InsertWindowIntoList+0x72>
 801f92a:	9b01      	ldr	r3, [sp, #4]
 801f92c:	4620      	mov	r0, r4
 801f92e:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801f930:	f7f3 fa3a 	bl	8012da8 <GUI_ALLOC_LockH>
 801f934:	9003      	str	r0, [sp, #12]
 801f936:	f006 0608 	and.w	r6, r6, #8
 801f93a:	bb2e      	cbnz	r6, 801f988 <WM__InsertWindowIntoList+0x84>
 801f93c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f93e:	071a      	lsls	r2, r3, #28
 801f940:	d43c      	bmi.n	801f9bc <WM__InsertWindowIntoList+0xb8>
 801f942:	a802      	add	r0, sp, #8
 801f944:	f7f3 fa44 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f948:	a803      	add	r0, sp, #12
 801f94a:	f7f3 fa41 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f94e:	4620      	mov	r0, r4
 801f950:	f7f3 fa20 	bl	8012d94 <GUI_ALLOC_h2p>
 801f954:	e005      	b.n	801f962 <WM__InsertWindowIntoList+0x5e>
 801f956:	4620      	mov	r0, r4
 801f958:	f7f3 fa1c 	bl	8012d94 <GUI_ALLOC_h2p>
 801f95c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801f95e:	071b      	lsls	r3, r3, #28
 801f960:	d427      	bmi.n	801f9b2 <WM__InsertWindowIntoList+0xae>
 801f962:	6a04      	ldr	r4, [r0, #32]
 801f964:	9003      	str	r0, [sp, #12]
 801f966:	2c00      	cmp	r4, #0
 801f968:	d1f5      	bne.n	801f956 <WM__InsertWindowIntoList+0x52>
 801f96a:	6205      	str	r5, [r0, #32]
 801f96c:	a801      	add	r0, sp, #4
 801f96e:	f7f3 fa2f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f972:	b004      	add	sp, #16
 801f974:	bd70      	pop	{r4, r5, r6, pc}
 801f976:	61c5      	str	r5, [r0, #28]
 801f978:	a801      	add	r0, sp, #4
 801f97a:	f7f3 fa29 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f97e:	a802      	add	r0, sp, #8
 801f980:	f7f3 fa26 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f984:	b004      	add	sp, #16
 801f986:	bd70      	pop	{r4, r5, r6, pc}
 801f988:	a802      	add	r0, sp, #8
 801f98a:	f7f3 fa21 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f98e:	a803      	add	r0, sp, #12
 801f990:	f7f3 fa1e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f994:	4620      	mov	r0, r4
 801f996:	f7f3 f9fd 	bl	8012d94 <GUI_ALLOC_h2p>
 801f99a:	6a02      	ldr	r2, [r0, #32]
 801f99c:	9003      	str	r0, [sp, #12]
 801f99e:	2a00      	cmp	r2, #0
 801f9a0:	d0e3      	beq.n	801f96a <WM__InsertWindowIntoList+0x66>
 801f9a2:	4610      	mov	r0, r2
 801f9a4:	f7f3 f9f6 	bl	8012d94 <GUI_ALLOC_h2p>
 801f9a8:	6a02      	ldr	r2, [r0, #32]
 801f9aa:	9003      	str	r0, [sp, #12]
 801f9ac:	2a00      	cmp	r2, #0
 801f9ae:	d1f8      	bne.n	801f9a2 <WM__InsertWindowIntoList+0x9e>
 801f9b0:	e7db      	b.n	801f96a <WM__InsertWindowIntoList+0x66>
 801f9b2:	9a03      	ldr	r2, [sp, #12]
 801f9b4:	9b01      	ldr	r3, [sp, #4]
 801f9b6:	6215      	str	r5, [r2, #32]
 801f9b8:	621c      	str	r4, [r3, #32]
 801f9ba:	e7d7      	b.n	801f96c <WM__InsertWindowIntoList+0x68>
 801f9bc:	9a01      	ldr	r2, [sp, #4]
 801f9be:	a801      	add	r0, sp, #4
 801f9c0:	9b02      	ldr	r3, [sp, #8]
 801f9c2:	6214      	str	r4, [r2, #32]
 801f9c4:	61dd      	str	r5, [r3, #28]
 801f9c6:	f7f3 fa03 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f9ca:	a802      	add	r0, sp, #8
 801f9cc:	f7f3 fa00 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f9d0:	a803      	add	r0, sp, #12
 801f9d2:	f7f3 f9fd 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801f9d6:	e7d5      	b.n	801f984 <WM__InsertWindowIntoList+0x80>

0801f9d8 <WM__IsWindow>:
 801f9d8:	4b09      	ldr	r3, [pc, #36]	; (801fa00 <WM__IsWindow+0x28>)
 801f9da:	b510      	push	{r4, lr}
 801f9dc:	4604      	mov	r4, r0
 801f9de:	6818      	ldr	r0, [r3, #0]
 801f9e0:	b148      	cbz	r0, 801f9f6 <WM__IsWindow+0x1e>
 801f9e2:	42a0      	cmp	r0, r4
 801f9e4:	d102      	bne.n	801f9ec <WM__IsWindow+0x14>
 801f9e6:	e008      	b.n	801f9fa <WM__IsWindow+0x22>
 801f9e8:	4284      	cmp	r4, r0
 801f9ea:	d006      	beq.n	801f9fa <WM__IsWindow+0x22>
 801f9ec:	f7f3 f9d2 	bl	8012d94 <GUI_ALLOC_h2p>
 801f9f0:	6940      	ldr	r0, [r0, #20]
 801f9f2:	2800      	cmp	r0, #0
 801f9f4:	d1f8      	bne.n	801f9e8 <WM__IsWindow+0x10>
 801f9f6:	2000      	movs	r0, #0
 801f9f8:	bd10      	pop	{r4, pc}
 801f9fa:	2001      	movs	r0, #1
 801f9fc:	bd10      	pop	{r4, pc}
 801f9fe:	bf00      	nop
 801fa00:	20046818 	.word	0x20046818

0801fa04 <WM__InvalidateDrawAndDescs>:
 801fa04:	b900      	cbnz	r0, 801fa08 <WM__InvalidateDrawAndDescs+0x4>
 801fa06:	4770      	bx	lr
 801fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa0c:	b08f      	sub	sp, #60	; 0x3c
 801fa0e:	4604      	mov	r4, r0
 801fa10:	f7f3 f9ca 	bl	8012da8 <GUI_ALLOC_LockH>
 801fa14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fa16:	9005      	str	r0, [sp, #20]
 801fa18:	079a      	lsls	r2, r3, #30
 801fa1a:	f140 813c 	bpl.w	801fc96 <WM__InvalidateDrawAndDescs+0x292>
 801fa1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fa20:	b140      	cbz	r0, 801fa34 <WM__InvalidateDrawAndDescs+0x30>
 801fa22:	4ba0      	ldr	r3, [pc, #640]	; (801fca4 <WM__InvalidateDrawAndDescs+0x2a0>)
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	429c      	cmp	r4, r3
 801fa28:	d004      	beq.n	801fa34 <WM__InvalidateDrawAndDescs+0x30>
 801fa2a:	f7fd fb69 	bl	801d100 <GUI_MEMDEV_Delete>
 801fa2e:	9b05      	ldr	r3, [sp, #20]
 801fa30:	2200      	movs	r2, #0
 801fa32:	625a      	str	r2, [r3, #36]	; 0x24
 801fa34:	4620      	mov	r0, r4
 801fa36:	f001 fcfb 	bl	8021430 <WM_GetFirstChild>
 801fa3a:	9003      	str	r0, [sp, #12]
 801fa3c:	2800      	cmp	r0, #0
 801fa3e:	f000 812a 	beq.w	801fc96 <WM__InvalidateDrawAndDescs+0x292>
 801fa42:	f8df 8260 	ldr.w	r8, [pc, #608]	; 801fca4 <WM__InvalidateDrawAndDescs+0x2a0>
 801fa46:	9803      	ldr	r0, [sp, #12]
 801fa48:	f7f3 f9ae 	bl	8012da8 <GUI_ALLOC_LockH>
 801fa4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fa4e:	9006      	str	r0, [sp, #24]
 801fa50:	079b      	lsls	r3, r3, #30
 801fa52:	f140 8115 	bpl.w	801fc80 <WM__InvalidateDrawAndDescs+0x27c>
 801fa56:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fa58:	b148      	cbz	r0, 801fa6e <WM__InvalidateDrawAndDescs+0x6a>
 801fa5a:	f8d8 3000 	ldr.w	r3, [r8]
 801fa5e:	9a03      	ldr	r2, [sp, #12]
 801fa60:	4293      	cmp	r3, r2
 801fa62:	d004      	beq.n	801fa6e <WM__InvalidateDrawAndDescs+0x6a>
 801fa64:	f7fd fb4c 	bl	801d100 <GUI_MEMDEV_Delete>
 801fa68:	9b06      	ldr	r3, [sp, #24]
 801fa6a:	2200      	movs	r2, #0
 801fa6c:	625a      	str	r2, [r3, #36]	; 0x24
 801fa6e:	9803      	ldr	r0, [sp, #12]
 801fa70:	f001 fcde 	bl	8021430 <WM_GetFirstChild>
 801fa74:	9002      	str	r0, [sp, #8]
 801fa76:	2800      	cmp	r0, #0
 801fa78:	f000 8102 	beq.w	801fc80 <WM__InvalidateDrawAndDescs+0x27c>
 801fa7c:	9802      	ldr	r0, [sp, #8]
 801fa7e:	f7f3 f993 	bl	8012da8 <GUI_ALLOC_LockH>
 801fa82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fa84:	9007      	str	r0, [sp, #28]
 801fa86:	079f      	lsls	r7, r3, #30
 801fa88:	f140 80ef 	bpl.w	801fc6a <WM__InvalidateDrawAndDescs+0x266>
 801fa8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fa8e:	b148      	cbz	r0, 801faa4 <WM__InvalidateDrawAndDescs+0xa0>
 801fa90:	f8d8 3000 	ldr.w	r3, [r8]
 801fa94:	9a02      	ldr	r2, [sp, #8]
 801fa96:	4293      	cmp	r3, r2
 801fa98:	d004      	beq.n	801faa4 <WM__InvalidateDrawAndDescs+0xa0>
 801fa9a:	f7fd fb31 	bl	801d100 <GUI_MEMDEV_Delete>
 801fa9e:	9b07      	ldr	r3, [sp, #28]
 801faa0:	2200      	movs	r2, #0
 801faa2:	625a      	str	r2, [r3, #36]	; 0x24
 801faa4:	9802      	ldr	r0, [sp, #8]
 801faa6:	f001 fcc3 	bl	8021430 <WM_GetFirstChild>
 801faaa:	4683      	mov	fp, r0
 801faac:	2800      	cmp	r0, #0
 801faae:	f000 80dc 	beq.w	801fc6a <WM__InvalidateDrawAndDescs+0x266>
 801fab2:	4658      	mov	r0, fp
 801fab4:	f7f3 f978 	bl	8012da8 <GUI_ALLOC_LockH>
 801fab8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801faba:	9008      	str	r0, [sp, #32]
 801fabc:	079e      	lsls	r6, r3, #30
 801fabe:	f140 80c8 	bpl.w	801fc52 <WM__InvalidateDrawAndDescs+0x24e>
 801fac2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fac4:	b140      	cbz	r0, 801fad8 <WM__InvalidateDrawAndDescs+0xd4>
 801fac6:	f8d8 3000 	ldr.w	r3, [r8]
 801faca:	455b      	cmp	r3, fp
 801facc:	d004      	beq.n	801fad8 <WM__InvalidateDrawAndDescs+0xd4>
 801face:	f7fd fb17 	bl	801d100 <GUI_MEMDEV_Delete>
 801fad2:	9b08      	ldr	r3, [sp, #32]
 801fad4:	2200      	movs	r2, #0
 801fad6:	625a      	str	r2, [r3, #36]	; 0x24
 801fad8:	4658      	mov	r0, fp
 801fada:	f001 fca9 	bl	8021430 <WM_GetFirstChild>
 801fade:	4682      	mov	sl, r0
 801fae0:	2800      	cmp	r0, #0
 801fae2:	f000 80b6 	beq.w	801fc52 <WM__InvalidateDrawAndDescs+0x24e>
 801fae6:	4650      	mov	r0, sl
 801fae8:	f7f3 f95e 	bl	8012da8 <GUI_ALLOC_LockH>
 801faec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801faee:	9009      	str	r0, [sp, #36]	; 0x24
 801faf0:	079d      	lsls	r5, r3, #30
 801faf2:	f140 80a2 	bpl.w	801fc3a <WM__InvalidateDrawAndDescs+0x236>
 801faf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801faf8:	b140      	cbz	r0, 801fb0c <WM__InvalidateDrawAndDescs+0x108>
 801fafa:	f8d8 3000 	ldr.w	r3, [r8]
 801fafe:	4553      	cmp	r3, sl
 801fb00:	d004      	beq.n	801fb0c <WM__InvalidateDrawAndDescs+0x108>
 801fb02:	f7fd fafd 	bl	801d100 <GUI_MEMDEV_Delete>
 801fb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb08:	2200      	movs	r2, #0
 801fb0a:	625a      	str	r2, [r3, #36]	; 0x24
 801fb0c:	4650      	mov	r0, sl
 801fb0e:	f001 fc8f 	bl	8021430 <WM_GetFirstChild>
 801fb12:	9001      	str	r0, [sp, #4]
 801fb14:	2800      	cmp	r0, #0
 801fb16:	f000 8090 	beq.w	801fc3a <WM__InvalidateDrawAndDescs+0x236>
 801fb1a:	9801      	ldr	r0, [sp, #4]
 801fb1c:	f7f3 f944 	bl	8012da8 <GUI_ALLOC_LockH>
 801fb20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fb22:	900a      	str	r0, [sp, #40]	; 0x28
 801fb24:	079c      	lsls	r4, r3, #30
 801fb26:	d57d      	bpl.n	801fc24 <WM__InvalidateDrawAndDescs+0x220>
 801fb28:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fb2a:	b148      	cbz	r0, 801fb40 <WM__InvalidateDrawAndDescs+0x13c>
 801fb2c:	f8d8 3000 	ldr.w	r3, [r8]
 801fb30:	9a01      	ldr	r2, [sp, #4]
 801fb32:	4293      	cmp	r3, r2
 801fb34:	d004      	beq.n	801fb40 <WM__InvalidateDrawAndDescs+0x13c>
 801fb36:	f7fd fae3 	bl	801d100 <GUI_MEMDEV_Delete>
 801fb3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	625a      	str	r2, [r3, #36]	; 0x24
 801fb40:	9801      	ldr	r0, [sp, #4]
 801fb42:	f001 fc75 	bl	8021430 <WM_GetFirstChild>
 801fb46:	4606      	mov	r6, r0
 801fb48:	2800      	cmp	r0, #0
 801fb4a:	d06b      	beq.n	801fc24 <WM__InvalidateDrawAndDescs+0x220>
 801fb4c:	4630      	mov	r0, r6
 801fb4e:	f7f3 f92b 	bl	8012da8 <GUI_ALLOC_LockH>
 801fb52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fb54:	900b      	str	r0, [sp, #44]	; 0x2c
 801fb56:	0799      	lsls	r1, r3, #30
 801fb58:	d55b      	bpl.n	801fc12 <WM__InvalidateDrawAndDescs+0x20e>
 801fb5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fb5c:	b140      	cbz	r0, 801fb70 <WM__InvalidateDrawAndDescs+0x16c>
 801fb5e:	f8d8 3000 	ldr.w	r3, [r8]
 801fb62:	42b3      	cmp	r3, r6
 801fb64:	d004      	beq.n	801fb70 <WM__InvalidateDrawAndDescs+0x16c>
 801fb66:	f7fd facb 	bl	801d100 <GUI_MEMDEV_Delete>
 801fb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb6c:	2200      	movs	r2, #0
 801fb6e:	625a      	str	r2, [r3, #36]	; 0x24
 801fb70:	4630      	mov	r0, r6
 801fb72:	f001 fc5d 	bl	8021430 <WM_GetFirstChild>
 801fb76:	4605      	mov	r5, r0
 801fb78:	2800      	cmp	r0, #0
 801fb7a:	d04a      	beq.n	801fc12 <WM__InvalidateDrawAndDescs+0x20e>
 801fb7c:	4628      	mov	r0, r5
 801fb7e:	f7f3 f913 	bl	8012da8 <GUI_ALLOC_LockH>
 801fb82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fb84:	900c      	str	r0, [sp, #48]	; 0x30
 801fb86:	079a      	lsls	r2, r3, #30
 801fb88:	d53a      	bpl.n	801fc00 <WM__InvalidateDrawAndDescs+0x1fc>
 801fb8a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fb8c:	b140      	cbz	r0, 801fba0 <WM__InvalidateDrawAndDescs+0x19c>
 801fb8e:	f8d8 3000 	ldr.w	r3, [r8]
 801fb92:	42ab      	cmp	r3, r5
 801fb94:	d004      	beq.n	801fba0 <WM__InvalidateDrawAndDescs+0x19c>
 801fb96:	f7fd fab3 	bl	801d100 <GUI_MEMDEV_Delete>
 801fb9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	625a      	str	r2, [r3, #36]	; 0x24
 801fba0:	4628      	mov	r0, r5
 801fba2:	f001 fc45 	bl	8021430 <WM_GetFirstChild>
 801fba6:	4604      	mov	r4, r0
 801fba8:	b350      	cbz	r0, 801fc00 <WM__InvalidateDrawAndDescs+0x1fc>
 801fbaa:	f04f 0900 	mov.w	r9, #0
 801fbae:	4620      	mov	r0, r4
 801fbb0:	f7f3 f8fa 	bl	8012da8 <GUI_ALLOC_LockH>
 801fbb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fbb6:	900d      	str	r0, [sp, #52]	; 0x34
 801fbb8:	079b      	lsls	r3, r3, #30
 801fbba:	d518      	bpl.n	801fbee <WM__InvalidateDrawAndDescs+0x1ea>
 801fbbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fbbe:	b140      	cbz	r0, 801fbd2 <WM__InvalidateDrawAndDescs+0x1ce>
 801fbc0:	f8d8 3000 	ldr.w	r3, [r8]
 801fbc4:	42a3      	cmp	r3, r4
 801fbc6:	d004      	beq.n	801fbd2 <WM__InvalidateDrawAndDescs+0x1ce>
 801fbc8:	f7fd fa9a 	bl	801d100 <GUI_MEMDEV_Delete>
 801fbcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbce:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 801fbd2:	4620      	mov	r0, r4
 801fbd4:	f001 fc2c 	bl	8021430 <WM_GetFirstChild>
 801fbd8:	4607      	mov	r7, r0
 801fbda:	b140      	cbz	r0, 801fbee <WM__InvalidateDrawAndDescs+0x1ea>
 801fbdc:	4638      	mov	r0, r7
 801fbde:	f7ff ff11 	bl	801fa04 <WM__InvalidateDrawAndDescs>
 801fbe2:	4638      	mov	r0, r7
 801fbe4:	f7f3 f8d6 	bl	8012d94 <GUI_ALLOC_h2p>
 801fbe8:	6a07      	ldr	r7, [r0, #32]
 801fbea:	2f00      	cmp	r7, #0
 801fbec:	d1f6      	bne.n	801fbdc <WM__InvalidateDrawAndDescs+0x1d8>
 801fbee:	a80d      	add	r0, sp, #52	; 0x34
 801fbf0:	f7f3 f8ee 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f7f3 f8cd 	bl	8012d94 <GUI_ALLOC_h2p>
 801fbfa:	6a04      	ldr	r4, [r0, #32]
 801fbfc:	2c00      	cmp	r4, #0
 801fbfe:	d1d6      	bne.n	801fbae <WM__InvalidateDrawAndDescs+0x1aa>
 801fc00:	a80c      	add	r0, sp, #48	; 0x30
 801fc02:	f7f3 f8e5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc06:	4628      	mov	r0, r5
 801fc08:	f7f3 f8c4 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc0c:	6a05      	ldr	r5, [r0, #32]
 801fc0e:	2d00      	cmp	r5, #0
 801fc10:	d1b4      	bne.n	801fb7c <WM__InvalidateDrawAndDescs+0x178>
 801fc12:	a80b      	add	r0, sp, #44	; 0x2c
 801fc14:	f7f3 f8dc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc18:	4630      	mov	r0, r6
 801fc1a:	f7f3 f8bb 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc1e:	6a06      	ldr	r6, [r0, #32]
 801fc20:	2e00      	cmp	r6, #0
 801fc22:	d193      	bne.n	801fb4c <WM__InvalidateDrawAndDescs+0x148>
 801fc24:	a80a      	add	r0, sp, #40	; 0x28
 801fc26:	f7f3 f8d3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc2a:	9801      	ldr	r0, [sp, #4]
 801fc2c:	f7f3 f8b2 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc30:	6a03      	ldr	r3, [r0, #32]
 801fc32:	9301      	str	r3, [sp, #4]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	f47f af70 	bne.w	801fb1a <WM__InvalidateDrawAndDescs+0x116>
 801fc3a:	a809      	add	r0, sp, #36	; 0x24
 801fc3c:	f7f3 f8c8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc40:	4650      	mov	r0, sl
 801fc42:	f7f3 f8a7 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc46:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801fc4a:	f1ba 0f00 	cmp.w	sl, #0
 801fc4e:	f47f af4a 	bne.w	801fae6 <WM__InvalidateDrawAndDescs+0xe2>
 801fc52:	a808      	add	r0, sp, #32
 801fc54:	f7f3 f8bc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc58:	4658      	mov	r0, fp
 801fc5a:	f7f3 f89b 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc5e:	f8d0 b020 	ldr.w	fp, [r0, #32]
 801fc62:	f1bb 0f00 	cmp.w	fp, #0
 801fc66:	f47f af24 	bne.w	801fab2 <WM__InvalidateDrawAndDescs+0xae>
 801fc6a:	a807      	add	r0, sp, #28
 801fc6c:	f7f3 f8b0 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc70:	9802      	ldr	r0, [sp, #8]
 801fc72:	f7f3 f88f 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc76:	6a03      	ldr	r3, [r0, #32]
 801fc78:	9302      	str	r3, [sp, #8]
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	f47f aefe 	bne.w	801fa7c <WM__InvalidateDrawAndDescs+0x78>
 801fc80:	a806      	add	r0, sp, #24
 801fc82:	f7f3 f8a5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc86:	9803      	ldr	r0, [sp, #12]
 801fc88:	f7f3 f884 	bl	8012d94 <GUI_ALLOC_h2p>
 801fc8c:	6a03      	ldr	r3, [r0, #32]
 801fc8e:	9303      	str	r3, [sp, #12]
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	f47f aed8 	bne.w	801fa46 <WM__InvalidateDrawAndDescs+0x42>
 801fc96:	a805      	add	r0, sp, #20
 801fc98:	f7f3 f89a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fc9c:	b00f      	add	sp, #60	; 0x3c
 801fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fca2:	bf00      	nop
 801fca4:	20046848 	.word	0x20046848

0801fca8 <WM_InvalidateWindowAndDescsEx>:
 801fca8:	b900      	cbnz	r0, 801fcac <WM_InvalidateWindowAndDescsEx+0x4>
 801fcaa:	4770      	bx	lr
 801fcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb0:	b0a1      	sub	sp, #132	; 0x84
 801fcb2:	4604      	mov	r4, r0
 801fcb4:	460d      	mov	r5, r1
 801fcb6:	9201      	str	r2, [sp, #4]
 801fcb8:	f7f3 f876 	bl	8012da8 <GUI_ALLOC_LockH>
 801fcbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fcbe:	9005      	str	r0, [sp, #20]
 801fcc0:	079a      	lsls	r2, r3, #30
 801fcc2:	f140 8156 	bpl.w	801ff72 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801fcc6:	4602      	mov	r2, r0
 801fcc8:	4629      	mov	r1, r5
 801fcca:	a80e      	add	r0, sp, #56	; 0x38
 801fccc:	f7f9 fe3a 	bl	8019944 <GUI__IntersectRects>
 801fcd0:	2800      	cmp	r0, #0
 801fcd2:	f000 814e 	beq.w	801ff72 <WM_InvalidateWindowAndDescsEx+0x2ca>
 801fcd6:	a805      	add	r0, sp, #20
 801fcd8:	f7f3 f87a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fcdc:	4620      	mov	r0, r4
 801fcde:	9a01      	ldr	r2, [sp, #4]
 801fce0:	a90e      	add	r1, sp, #56	; 0x38
 801fce2:	f7ff fd09 	bl	801f6f8 <_Invalidate1Abs>
 801fce6:	4620      	mov	r0, r4
 801fce8:	f001 fba2 	bl	8021430 <WM_GetFirstChild>
 801fcec:	4604      	mov	r4, r0
 801fcee:	2800      	cmp	r0, #0
 801fcf0:	f000 8142 	beq.w	801ff78 <WM_InvalidateWindowAndDescsEx+0x2d0>
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	f7f3 f857 	bl	8012da8 <GUI_ALLOC_LockH>
 801fcfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fcfc:	9006      	str	r0, [sp, #24]
 801fcfe:	079b      	lsls	r3, r3, #30
 801fd00:	f140 813d 	bpl.w	801ff7e <WM_InvalidateWindowAndDescsEx+0x2d6>
 801fd04:	4602      	mov	r2, r0
 801fd06:	a90e      	add	r1, sp, #56	; 0x38
 801fd08:	a810      	add	r0, sp, #64	; 0x40
 801fd0a:	f7f9 fe1b 	bl	8019944 <GUI__IntersectRects>
 801fd0e:	2800      	cmp	r0, #0
 801fd10:	f000 8135 	beq.w	801ff7e <WM_InvalidateWindowAndDescsEx+0x2d6>
 801fd14:	a806      	add	r0, sp, #24
 801fd16:	f7f3 f85b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fd1a:	9a01      	ldr	r2, [sp, #4]
 801fd1c:	a910      	add	r1, sp, #64	; 0x40
 801fd1e:	4620      	mov	r0, r4
 801fd20:	f7ff fcea 	bl	801f6f8 <_Invalidate1Abs>
 801fd24:	4620      	mov	r0, r4
 801fd26:	f001 fb83 	bl	8021430 <WM_GetFirstChild>
 801fd2a:	4605      	mov	r5, r0
 801fd2c:	2800      	cmp	r0, #0
 801fd2e:	f000 8118 	beq.w	801ff62 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801fd32:	9402      	str	r4, [sp, #8]
 801fd34:	4628      	mov	r0, r5
 801fd36:	f7f3 f837 	bl	8012da8 <GUI_ALLOC_LockH>
 801fd3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fd3c:	9007      	str	r0, [sp, #28]
 801fd3e:	079f      	lsls	r7, r3, #30
 801fd40:	f140 8121 	bpl.w	801ff86 <WM_InvalidateWindowAndDescsEx+0x2de>
 801fd44:	4602      	mov	r2, r0
 801fd46:	a910      	add	r1, sp, #64	; 0x40
 801fd48:	a812      	add	r0, sp, #72	; 0x48
 801fd4a:	f7f9 fdfb 	bl	8019944 <GUI__IntersectRects>
 801fd4e:	2800      	cmp	r0, #0
 801fd50:	f000 8119 	beq.w	801ff86 <WM_InvalidateWindowAndDescsEx+0x2de>
 801fd54:	a807      	add	r0, sp, #28
 801fd56:	f7f3 f83b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fd5a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801fd5e:	4628      	mov	r0, r5
 801fd60:	a912      	add	r1, sp, #72	; 0x48
 801fd62:	4652      	mov	r2, sl
 801fd64:	f7ff fcc8 	bl	801f6f8 <_Invalidate1Abs>
 801fd68:	4628      	mov	r0, r5
 801fd6a:	f001 fb61 	bl	8021430 <WM_GetFirstChild>
 801fd6e:	2800      	cmp	r0, #0
 801fd70:	f000 80ef 	beq.w	801ff52 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801fd74:	9503      	str	r5, [sp, #12]
 801fd76:	4605      	mov	r5, r0
 801fd78:	4628      	mov	r0, r5
 801fd7a:	f7f3 f815 	bl	8012da8 <GUI_ALLOC_LockH>
 801fd7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fd80:	9008      	str	r0, [sp, #32]
 801fd82:	079e      	lsls	r6, r3, #30
 801fd84:	f140 8103 	bpl.w	801ff8e <WM_InvalidateWindowAndDescsEx+0x2e6>
 801fd88:	4602      	mov	r2, r0
 801fd8a:	a912      	add	r1, sp, #72	; 0x48
 801fd8c:	a814      	add	r0, sp, #80	; 0x50
 801fd8e:	f7f9 fdd9 	bl	8019944 <GUI__IntersectRects>
 801fd92:	2800      	cmp	r0, #0
 801fd94:	f000 80fb 	beq.w	801ff8e <WM_InvalidateWindowAndDescsEx+0x2e6>
 801fd98:	a808      	add	r0, sp, #32
 801fd9a:	f7f3 f819 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fd9e:	4628      	mov	r0, r5
 801fda0:	4652      	mov	r2, sl
 801fda2:	a914      	add	r1, sp, #80	; 0x50
 801fda4:	f7ff fca8 	bl	801f6f8 <_Invalidate1Abs>
 801fda8:	4628      	mov	r0, r5
 801fdaa:	f001 fb41 	bl	8021430 <WM_GetFirstChild>
 801fdae:	2800      	cmp	r0, #0
 801fdb0:	f000 80c7 	beq.w	801ff42 <WM_InvalidateWindowAndDescsEx+0x29a>
 801fdb4:	46ab      	mov	fp, r5
 801fdb6:	4680      	mov	r8, r0
 801fdb8:	4640      	mov	r0, r8
 801fdba:	f7f2 fff5 	bl	8012da8 <GUI_ALLOC_LockH>
 801fdbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fdc0:	9009      	str	r0, [sp, #36]	; 0x24
 801fdc2:	079d      	lsls	r5, r3, #30
 801fdc4:	f140 80e7 	bpl.w	801ff96 <WM_InvalidateWindowAndDescsEx+0x2ee>
 801fdc8:	4602      	mov	r2, r0
 801fdca:	a914      	add	r1, sp, #80	; 0x50
 801fdcc:	a816      	add	r0, sp, #88	; 0x58
 801fdce:	f7f9 fdb9 	bl	8019944 <GUI__IntersectRects>
 801fdd2:	2800      	cmp	r0, #0
 801fdd4:	f000 80df 	beq.w	801ff96 <WM_InvalidateWindowAndDescsEx+0x2ee>
 801fdd8:	a809      	add	r0, sp, #36	; 0x24
 801fdda:	f7f2 fff9 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fdde:	4640      	mov	r0, r8
 801fde0:	4652      	mov	r2, sl
 801fde2:	a916      	add	r1, sp, #88	; 0x58
 801fde4:	f7ff fc88 	bl	801f6f8 <_Invalidate1Abs>
 801fde8:	4640      	mov	r0, r8
 801fdea:	f001 fb21 	bl	8021430 <WM_GetFirstChild>
 801fdee:	2800      	cmp	r0, #0
 801fdf0:	f000 809d 	beq.w	801ff2e <WM_InvalidateWindowAndDescsEx+0x286>
 801fdf4:	4681      	mov	r9, r0
 801fdf6:	4648      	mov	r0, r9
 801fdf8:	f7f2 ffd6 	bl	8012da8 <GUI_ALLOC_LockH>
 801fdfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fdfe:	900a      	str	r0, [sp, #40]	; 0x28
 801fe00:	079c      	lsls	r4, r3, #30
 801fe02:	f140 80d5 	bpl.w	801ffb0 <WM_InvalidateWindowAndDescsEx+0x308>
 801fe06:	4602      	mov	r2, r0
 801fe08:	a916      	add	r1, sp, #88	; 0x58
 801fe0a:	a818      	add	r0, sp, #96	; 0x60
 801fe0c:	f7f9 fd9a 	bl	8019944 <GUI__IntersectRects>
 801fe10:	2800      	cmp	r0, #0
 801fe12:	f000 80cd 	beq.w	801ffb0 <WM_InvalidateWindowAndDescsEx+0x308>
 801fe16:	a80a      	add	r0, sp, #40	; 0x28
 801fe18:	f7f2 ffda 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fe1c:	4652      	mov	r2, sl
 801fe1e:	a918      	add	r1, sp, #96	; 0x60
 801fe20:	4648      	mov	r0, r9
 801fe22:	f7ff fc69 	bl	801f6f8 <_Invalidate1Abs>
 801fe26:	4648      	mov	r0, r9
 801fe28:	f001 fb02 	bl	8021430 <WM_GetFirstChild>
 801fe2c:	4605      	mov	r5, r0
 801fe2e:	2800      	cmp	r0, #0
 801fe30:	d074      	beq.n	801ff1c <WM_InvalidateWindowAndDescsEx+0x274>
 801fe32:	4628      	mov	r0, r5
 801fe34:	f7f2 ffb8 	bl	8012da8 <GUI_ALLOC_LockH>
 801fe38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fe3a:	900b      	str	r0, [sp, #44]	; 0x2c
 801fe3c:	0799      	lsls	r1, r3, #30
 801fe3e:	f140 80c4 	bpl.w	801ffca <WM_InvalidateWindowAndDescsEx+0x322>
 801fe42:	4602      	mov	r2, r0
 801fe44:	a918      	add	r1, sp, #96	; 0x60
 801fe46:	a81a      	add	r0, sp, #104	; 0x68
 801fe48:	f7f9 fd7c 	bl	8019944 <GUI__IntersectRects>
 801fe4c:	2800      	cmp	r0, #0
 801fe4e:	f000 80bc 	beq.w	801ffca <WM_InvalidateWindowAndDescsEx+0x322>
 801fe52:	a80b      	add	r0, sp, #44	; 0x2c
 801fe54:	f7f2 ffbc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fe58:	4652      	mov	r2, sl
 801fe5a:	a91a      	add	r1, sp, #104	; 0x68
 801fe5c:	4628      	mov	r0, r5
 801fe5e:	f7ff fc4b 	bl	801f6f8 <_Invalidate1Abs>
 801fe62:	4628      	mov	r0, r5
 801fe64:	f001 fae4 	bl	8021430 <WM_GetFirstChild>
 801fe68:	4606      	mov	r6, r0
 801fe6a:	2800      	cmp	r0, #0
 801fe6c:	d050      	beq.n	801ff10 <WM_InvalidateWindowAndDescsEx+0x268>
 801fe6e:	4630      	mov	r0, r6
 801fe70:	f7f2 ff9a 	bl	8012da8 <GUI_ALLOC_LockH>
 801fe74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801fe76:	900c      	str	r0, [sp, #48]	; 0x30
 801fe78:	079a      	lsls	r2, r3, #30
 801fe7a:	f140 80b1 	bpl.w	801ffe0 <WM_InvalidateWindowAndDescsEx+0x338>
 801fe7e:	4602      	mov	r2, r0
 801fe80:	a91a      	add	r1, sp, #104	; 0x68
 801fe82:	a81c      	add	r0, sp, #112	; 0x70
 801fe84:	f7f9 fd5e 	bl	8019944 <GUI__IntersectRects>
 801fe88:	2800      	cmp	r0, #0
 801fe8a:	f000 80a9 	beq.w	801ffe0 <WM_InvalidateWindowAndDescsEx+0x338>
 801fe8e:	a80c      	add	r0, sp, #48	; 0x30
 801fe90:	f7f2 ff9e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fe94:	4652      	mov	r2, sl
 801fe96:	a91c      	add	r1, sp, #112	; 0x70
 801fe98:	4630      	mov	r0, r6
 801fe9a:	f7ff fc2d 	bl	801f6f8 <_Invalidate1Abs>
 801fe9e:	4630      	mov	r0, r6
 801fea0:	f001 fac6 	bl	8021430 <WM_GetFirstChild>
 801fea4:	4607      	mov	r7, r0
 801fea6:	b368      	cbz	r0, 801ff04 <WM_InvalidateWindowAndDescsEx+0x25c>
 801fea8:	4638      	mov	r0, r7
 801feaa:	f7f2 ff7d 	bl	8012da8 <GUI_ALLOC_LockH>
 801feae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801feb0:	900d      	str	r0, [sp, #52]	; 0x34
 801feb2:	079b      	lsls	r3, r3, #30
 801feb4:	f140 809f 	bpl.w	801fff6 <WM_InvalidateWindowAndDescsEx+0x34e>
 801feb8:	4602      	mov	r2, r0
 801feba:	a91c      	add	r1, sp, #112	; 0x70
 801febc:	a81e      	add	r0, sp, #120	; 0x78
 801febe:	f7f9 fd41 	bl	8019944 <GUI__IntersectRects>
 801fec2:	2800      	cmp	r0, #0
 801fec4:	f000 8097 	beq.w	801fff6 <WM_InvalidateWindowAndDescsEx+0x34e>
 801fec8:	a80d      	add	r0, sp, #52	; 0x34
 801feca:	f7f2 ff81 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fece:	4652      	mov	r2, sl
 801fed0:	a91e      	add	r1, sp, #120	; 0x78
 801fed2:	4638      	mov	r0, r7
 801fed4:	f7ff fc10 	bl	801f6f8 <_Invalidate1Abs>
 801fed8:	4638      	mov	r0, r7
 801feda:	f001 faa9 	bl	8021430 <WM_GetFirstChild>
 801fede:	4604      	mov	r4, r0
 801fee0:	b150      	cbz	r0, 801fef8 <WM_InvalidateWindowAndDescsEx+0x250>
 801fee2:	4620      	mov	r0, r4
 801fee4:	4652      	mov	r2, sl
 801fee6:	a91e      	add	r1, sp, #120	; 0x78
 801fee8:	f7ff fede 	bl	801fca8 <WM_InvalidateWindowAndDescsEx>
 801feec:	4620      	mov	r0, r4
 801feee:	f7f2 ff51 	bl	8012d94 <GUI_ALLOC_h2p>
 801fef2:	6a04      	ldr	r4, [r0, #32]
 801fef4:	2c00      	cmp	r4, #0
 801fef6:	d1f4      	bne.n	801fee2 <WM_InvalidateWindowAndDescsEx+0x23a>
 801fef8:	4638      	mov	r0, r7
 801fefa:	f7f2 ff4b 	bl	8012d94 <GUI_ALLOC_h2p>
 801fefe:	6a07      	ldr	r7, [r0, #32]
 801ff00:	2f00      	cmp	r7, #0
 801ff02:	d1d1      	bne.n	801fea8 <WM_InvalidateWindowAndDescsEx+0x200>
 801ff04:	4630      	mov	r0, r6
 801ff06:	f7f2 ff45 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff0a:	6a06      	ldr	r6, [r0, #32]
 801ff0c:	2e00      	cmp	r6, #0
 801ff0e:	d1ae      	bne.n	801fe6e <WM_InvalidateWindowAndDescsEx+0x1c6>
 801ff10:	4628      	mov	r0, r5
 801ff12:	f7f2 ff3f 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff16:	6a05      	ldr	r5, [r0, #32]
 801ff18:	2d00      	cmp	r5, #0
 801ff1a:	d18a      	bne.n	801fe32 <WM_InvalidateWindowAndDescsEx+0x18a>
 801ff1c:	4648      	mov	r0, r9
 801ff1e:	f7f2 ff39 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff22:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801ff26:	f1b9 0f00 	cmp.w	r9, #0
 801ff2a:	f47f af64 	bne.w	801fdf6 <WM_InvalidateWindowAndDescsEx+0x14e>
 801ff2e:	4640      	mov	r0, r8
 801ff30:	f7f2 ff30 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff34:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801ff38:	f1b8 0f00 	cmp.w	r8, #0
 801ff3c:	f47f af3c 	bne.w	801fdb8 <WM_InvalidateWindowAndDescsEx+0x110>
 801ff40:	465d      	mov	r5, fp
 801ff42:	4628      	mov	r0, r5
 801ff44:	f7f2 ff26 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff48:	6a05      	ldr	r5, [r0, #32]
 801ff4a:	2d00      	cmp	r5, #0
 801ff4c:	f47f af14 	bne.w	801fd78 <WM_InvalidateWindowAndDescsEx+0xd0>
 801ff50:	9d03      	ldr	r5, [sp, #12]
 801ff52:	4628      	mov	r0, r5
 801ff54:	f7f2 ff1e 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff58:	6a05      	ldr	r5, [r0, #32]
 801ff5a:	2d00      	cmp	r5, #0
 801ff5c:	f47f aeea 	bne.w	801fd34 <WM_InvalidateWindowAndDescsEx+0x8c>
 801ff60:	9c02      	ldr	r4, [sp, #8]
 801ff62:	4620      	mov	r0, r4
 801ff64:	f7f2 ff16 	bl	8012d94 <GUI_ALLOC_h2p>
 801ff68:	6a04      	ldr	r4, [r0, #32]
 801ff6a:	2c00      	cmp	r4, #0
 801ff6c:	f47f aec2 	bne.w	801fcf4 <WM_InvalidateWindowAndDescsEx+0x4c>
 801ff70:	e002      	b.n	801ff78 <WM_InvalidateWindowAndDescsEx+0x2d0>
 801ff72:	a805      	add	r0, sp, #20
 801ff74:	f7f2 ff2c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ff78:	b021      	add	sp, #132	; 0x84
 801ff7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff7e:	a806      	add	r0, sp, #24
 801ff80:	f7f2 ff26 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ff84:	e7ed      	b.n	801ff62 <WM_InvalidateWindowAndDescsEx+0x2ba>
 801ff86:	a807      	add	r0, sp, #28
 801ff88:	f7f2 ff22 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ff8c:	e7e1      	b.n	801ff52 <WM_InvalidateWindowAndDescsEx+0x2aa>
 801ff8e:	a808      	add	r0, sp, #32
 801ff90:	f7f2 ff1e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ff94:	e7d5      	b.n	801ff42 <WM_InvalidateWindowAndDescsEx+0x29a>
 801ff96:	a809      	add	r0, sp, #36	; 0x24
 801ff98:	f7f2 ff1a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ff9c:	4640      	mov	r0, r8
 801ff9e:	f7f2 fef9 	bl	8012d94 <GUI_ALLOC_h2p>
 801ffa2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801ffa6:	f1b8 0f00 	cmp.w	r8, #0
 801ffaa:	f47f af05 	bne.w	801fdb8 <WM_InvalidateWindowAndDescsEx+0x110>
 801ffae:	e7c7      	b.n	801ff40 <WM_InvalidateWindowAndDescsEx+0x298>
 801ffb0:	a80a      	add	r0, sp, #40	; 0x28
 801ffb2:	f7f2 ff0d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ffb6:	4648      	mov	r0, r9
 801ffb8:	f7f2 feec 	bl	8012d94 <GUI_ALLOC_h2p>
 801ffbc:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801ffc0:	f1b9 0f00 	cmp.w	r9, #0
 801ffc4:	f47f af17 	bne.w	801fdf6 <WM_InvalidateWindowAndDescsEx+0x14e>
 801ffc8:	e7b1      	b.n	801ff2e <WM_InvalidateWindowAndDescsEx+0x286>
 801ffca:	a80b      	add	r0, sp, #44	; 0x2c
 801ffcc:	f7f2 ff00 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ffd0:	4628      	mov	r0, r5
 801ffd2:	f7f2 fedf 	bl	8012d94 <GUI_ALLOC_h2p>
 801ffd6:	6a05      	ldr	r5, [r0, #32]
 801ffd8:	2d00      	cmp	r5, #0
 801ffda:	f47f af2a 	bne.w	801fe32 <WM_InvalidateWindowAndDescsEx+0x18a>
 801ffde:	e79d      	b.n	801ff1c <WM_InvalidateWindowAndDescsEx+0x274>
 801ffe0:	a80c      	add	r0, sp, #48	; 0x30
 801ffe2:	f7f2 fef5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801ffe6:	4630      	mov	r0, r6
 801ffe8:	f7f2 fed4 	bl	8012d94 <GUI_ALLOC_h2p>
 801ffec:	6a06      	ldr	r6, [r0, #32]
 801ffee:	2e00      	cmp	r6, #0
 801fff0:	f47f af3d 	bne.w	801fe6e <WM_InvalidateWindowAndDescsEx+0x1c6>
 801fff4:	e78c      	b.n	801ff10 <WM_InvalidateWindowAndDescsEx+0x268>
 801fff6:	a80d      	add	r0, sp, #52	; 0x34
 801fff8:	f7f2 feea 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 801fffc:	4638      	mov	r0, r7
 801fffe:	f7f2 fec9 	bl	8012d94 <GUI_ALLOC_h2p>
 8020002:	6a07      	ldr	r7, [r0, #32]
 8020004:	2f00      	cmp	r7, #0
 8020006:	f47f af4f 	bne.w	801fea8 <WM_InvalidateWindowAndDescsEx+0x200>
 802000a:	e77b      	b.n	801ff04 <WM_InvalidateWindowAndDescsEx+0x25c>

0802000c <WM__InvalidateRect>:
 802000c:	b901      	cbnz	r1, 8020010 <WM__InvalidateRect+0x4>
 802000e:	4770      	bx	lr
 8020010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020014:	4605      	mov	r5, r0
 8020016:	b086      	sub	sp, #24
 8020018:	4608      	mov	r0, r1
 802001a:	460c      	mov	r4, r1
 802001c:	461e      	mov	r6, r3
 802001e:	4617      	mov	r7, r2
 8020020:	f7f2 fec2 	bl	8012da8 <GUI_ALLOC_LockH>
 8020024:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8020028:	9000      	str	r0, [sp, #0]
 802002a:	f018 0f02 	tst.w	r8, #2
 802002e:	d041      	beq.n	80200b4 <WM__InvalidateRect+0xa8>
 8020030:	4602      	mov	r2, r0
 8020032:	4629      	mov	r1, r5
 8020034:	a802      	add	r0, sp, #8
 8020036:	f7f9 fc85 	bl	8019944 <GUI__IntersectRects>
 802003a:	2800      	cmp	r0, #0
 802003c:	d03a      	beq.n	80200b4 <WM__InvalidateRect+0xa8>
 802003e:	f640 0301 	movw	r3, #2049	; 0x801
 8020042:	ea08 0303 	and.w	r3, r8, r3
 8020046:	2b01      	cmp	r3, #1
 8020048:	d044      	beq.n	80200d4 <WM__InvalidateRect+0xc8>
 802004a:	4620      	mov	r0, r4
 802004c:	4632      	mov	r2, r6
 802004e:	a902      	add	r1, sp, #8
 8020050:	f7ff fb52 	bl	801f6f8 <_Invalidate1Abs>
 8020054:	9b00      	ldr	r3, [sp, #0]
 8020056:	69dc      	ldr	r4, [r3, #28]
 8020058:	42bc      	cmp	r4, r7
 802005a:	d02b      	beq.n	80200b4 <WM__InvalidateRect+0xa8>
 802005c:	b354      	cbz	r4, 80200b4 <WM__InvalidateRect+0xa8>
 802005e:	4620      	mov	r0, r4
 8020060:	f7f2 fea2 	bl	8012da8 <GUI_ALLOC_LockH>
 8020064:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020066:	9001      	str	r0, [sp, #4]
 8020068:	079b      	lsls	r3, r3, #30
 802006a:	d529      	bpl.n	80200c0 <WM__InvalidateRect+0xb4>
 802006c:	4602      	mov	r2, r0
 802006e:	a902      	add	r1, sp, #8
 8020070:	a804      	add	r0, sp, #16
 8020072:	f7f9 fc67 	bl	8019944 <GUI__IntersectRects>
 8020076:	b318      	cbz	r0, 80200c0 <WM__InvalidateRect+0xb4>
 8020078:	a801      	add	r0, sp, #4
 802007a:	f7f2 fea9 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802007e:	4632      	mov	r2, r6
 8020080:	a904      	add	r1, sp, #16
 8020082:	4620      	mov	r0, r4
 8020084:	f7ff fb38 	bl	801f6f8 <_Invalidate1Abs>
 8020088:	4620      	mov	r0, r4
 802008a:	f001 f9d1 	bl	8021430 <WM_GetFirstChild>
 802008e:	4605      	mov	r5, r0
 8020090:	b150      	cbz	r0, 80200a8 <WM__InvalidateRect+0x9c>
 8020092:	4628      	mov	r0, r5
 8020094:	4632      	mov	r2, r6
 8020096:	a904      	add	r1, sp, #16
 8020098:	f7ff fe06 	bl	801fca8 <WM_InvalidateWindowAndDescsEx>
 802009c:	4628      	mov	r0, r5
 802009e:	f7f2 fe79 	bl	8012d94 <GUI_ALLOC_h2p>
 80200a2:	6a05      	ldr	r5, [r0, #32]
 80200a4:	2d00      	cmp	r5, #0
 80200a6:	d1f4      	bne.n	8020092 <WM__InvalidateRect+0x86>
 80200a8:	4620      	mov	r0, r4
 80200aa:	f7f2 fe73 	bl	8012d94 <GUI_ALLOC_h2p>
 80200ae:	6a04      	ldr	r4, [r0, #32]
 80200b0:	42a7      	cmp	r7, r4
 80200b2:	d1d3      	bne.n	802005c <WM__InvalidateRect+0x50>
 80200b4:	4668      	mov	r0, sp
 80200b6:	f7f2 fe8b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80200ba:	b006      	add	sp, #24
 80200bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200c0:	a801      	add	r0, sp, #4
 80200c2:	f7f2 fe85 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80200c6:	4620      	mov	r0, r4
 80200c8:	f7f2 fe64 	bl	8012d94 <GUI_ALLOC_h2p>
 80200cc:	6a04      	ldr	r4, [r0, #32]
 80200ce:	42a7      	cmp	r7, r4
 80200d0:	d1c4      	bne.n	802005c <WM__InvalidateRect+0x50>
 80200d2:	e7ef      	b.n	80200b4 <WM__InvalidateRect+0xa8>
 80200d4:	9900      	ldr	r1, [sp, #0]
 80200d6:	4633      	mov	r3, r6
 80200d8:	a802      	add	r0, sp, #8
 80200da:	6a0a      	ldr	r2, [r1, #32]
 80200dc:	6989      	ldr	r1, [r1, #24]
 80200de:	f7ff ff95 	bl	802000c <WM__InvalidateRect>
 80200e2:	e7b7      	b.n	8020054 <WM__InvalidateRect+0x48>

080200e4 <WM_InvalidateRect.part.2>:
 80200e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200e8:	4607      	mov	r7, r0
 80200ea:	b086      	sub	sp, #24
 80200ec:	460c      	mov	r4, r1
 80200ee:	f7f8 fa59 	bl	80185a4 <GUI_Lock>
 80200f2:	4638      	mov	r0, r7
 80200f4:	f7f2 fe58 	bl	8012da8 <GUI_ALLOC_LockH>
 80200f8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80200fc:	9000      	str	r0, [sp, #0]
 80200fe:	f018 0f02 	tst.w	r8, #2
 8020102:	d02f      	beq.n	8020164 <WM_InvalidateRect.part.2+0x80>
 8020104:	ae04      	add	r6, sp, #16
 8020106:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 802010a:	c803      	ldmia	r0, {r0, r1}
 802010c:	e886 0003 	stmia.w	r6, {r0, r1}
 8020110:	d145      	bne.n	802019e <WM_InvalidateRect.part.2+0xba>
 8020112:	b17c      	cbz	r4, 8020134 <WM_InvalidateRect.part.2+0x50>
 8020114:	6820      	ldr	r0, [r4, #0]
 8020116:	ab02      	add	r3, sp, #8
 8020118:	6861      	ldr	r1, [r4, #4]
 802011a:	9c00      	ldr	r4, [sp, #0]
 802011c:	c303      	stmia	r3!, {r0, r1}
 802011e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020122:	a802      	add	r0, sp, #8
 8020124:	f9b4 1000 	ldrsh.w	r1, [r4]
 8020128:	f7f3 fe68 	bl	8013dfc <GUI_MoveRect>
 802012c:	a902      	add	r1, sp, #8
 802012e:	4630      	mov	r0, r6
 8020130:	f7f9 fbea 	bl	8019908 <GUI__IntersectRect>
 8020134:	463d      	mov	r5, r7
 8020136:	e008      	b.n	802014a <WM_InvalidateRect.part.2+0x66>
 8020138:	f7f9 fbe6 	bl	8019908 <GUI__IntersectRect>
 802013c:	9b01      	ldr	r3, [sp, #4]
 802013e:	a801      	add	r0, sp, #4
 8020140:	699c      	ldr	r4, [r3, #24]
 8020142:	b1bc      	cbz	r4, 8020174 <WM_InvalidateRect.part.2+0x90>
 8020144:	4625      	mov	r5, r4
 8020146:	f7f2 fe43 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802014a:	4628      	mov	r0, r5
 802014c:	f7f2 fe2c 	bl	8012da8 <GUI_ALLOC_LockH>
 8020150:	4603      	mov	r3, r0
 8020152:	4630      	mov	r0, r6
 8020154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020156:	4619      	mov	r1, r3
 8020158:	9301      	str	r3, [sp, #4]
 802015a:	0793      	lsls	r3, r2, #30
 802015c:	d4ec      	bmi.n	8020138 <WM_InvalidateRect.part.2+0x54>
 802015e:	a801      	add	r0, sp, #4
 8020160:	f7f2 fe36 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020164:	4668      	mov	r0, sp
 8020166:	f7f2 fe33 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802016a:	f7f8 fa11 	bl	8018590 <GUI_Unlock>
 802016e:	b006      	add	sp, #24
 8020170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020174:	f7f2 fe2c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020178:	4b10      	ldr	r3, [pc, #64]	; (80201bc <WM_InvalidateRect.part.2+0xd8>)
 802017a:	681a      	ldr	r2, [r3, #0]
 802017c:	42aa      	cmp	r2, r5
 802017e:	d002      	beq.n	8020186 <WM_InvalidateRect.part.2+0xa2>
 8020180:	685b      	ldr	r3, [r3, #4]
 8020182:	429d      	cmp	r5, r3
 8020184:	d1ee      	bne.n	8020164 <WM_InvalidateRect.part.2+0x80>
 8020186:	f640 0301 	movw	r3, #2049	; 0x801
 802018a:	ea08 0303 	and.w	r3, r8, r3
 802018e:	2b01      	cmp	r3, #1
 8020190:	d00b      	beq.n	80201aa <WM_InvalidateRect.part.2+0xc6>
 8020192:	4631      	mov	r1, r6
 8020194:	4638      	mov	r0, r7
 8020196:	2220      	movs	r2, #32
 8020198:	f7ff faae 	bl	801f6f8 <_Invalidate1Abs>
 802019c:	e7e2      	b.n	8020164 <WM_InvalidateRect.part.2+0x80>
 802019e:	4638      	mov	r0, r7
 80201a0:	f7ff fc30 	bl	801fa04 <WM__InvalidateDrawAndDescs>
 80201a4:	2c00      	cmp	r4, #0
 80201a6:	d1b5      	bne.n	8020114 <WM_InvalidateRect.part.2+0x30>
 80201a8:	e7c4      	b.n	8020134 <WM_InvalidateRect.part.2+0x50>
 80201aa:	9900      	ldr	r1, [sp, #0]
 80201ac:	4630      	mov	r0, r6
 80201ae:	2320      	movs	r3, #32
 80201b0:	6a0a      	ldr	r2, [r1, #32]
 80201b2:	6989      	ldr	r1, [r1, #24]
 80201b4:	f7ff ff2a 	bl	802000c <WM__InvalidateRect>
 80201b8:	e7d4      	b.n	8020164 <WM_InvalidateRect.part.2+0x80>
 80201ba:	bf00      	nop
 80201bc:	200467fc 	.word	0x200467fc

080201c0 <_cbBackWin>:
 80201c0:	6803      	ldr	r3, [r0, #0]
 80201c2:	2b0e      	cmp	r3, #14
 80201c4:	d034      	beq.n	8020230 <_cbBackWin+0x70>
 80201c6:	2b0f      	cmp	r3, #15
 80201c8:	b510      	push	{r4, lr}
 80201ca:	4604      	mov	r4, r0
 80201cc:	d116      	bne.n	80201fc <_cbBackWin+0x3c>
 80201ce:	4a26      	ldr	r2, [pc, #152]	; (8020268 <_cbBackWin+0xa8>)
 80201d0:	6843      	ldr	r3, [r0, #4]
 80201d2:	6811      	ldr	r1, [r2, #0]
 80201d4:	428b      	cmp	r3, r1
 80201d6:	d045      	beq.n	8020264 <_cbBackWin+0xa4>
 80201d8:	6852      	ldr	r2, [r2, #4]
 80201da:	4293      	cmp	r3, r2
 80201dc:	bf14      	ite	ne
 80201de:	f04f 33ff 	movne.w	r3, #4294967295
 80201e2:	2301      	moveq	r3, #1
 80201e4:	4921      	ldr	r1, [pc, #132]	; (802026c <_cbBackWin+0xac>)
 80201e6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80201ea:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80201ee:	4290      	cmp	r0, r2
 80201f0:	d01b      	beq.n	802022a <_cbBackWin+0x6a>
 80201f2:	f7f3 ff1d 	bl	8014030 <GUI_SetBkColor>
 80201f6:	f7f4 f85b 	bl	80142b0 <GUI_Clear>
 80201fa:	6823      	ldr	r3, [r4, #0]
 80201fc:	3b0e      	subs	r3, #14
 80201fe:	6860      	ldr	r0, [r4, #4]
 8020200:	2b1a      	cmp	r3, #26
 8020202:	d812      	bhi.n	802022a <_cbBackWin+0x6a>
 8020204:	e8df f003 	tbb	[pc, r3]
 8020208:	11111119 	.word	0x11111119
 802020c:	110e1111 	.word	0x110e1111
 8020210:	11111e11 	.word	0x11111e11
 8020214:	11111111 	.word	0x11111111
 8020218:	11111111 	.word	0x11111111
 802021c:	11111120 	.word	0x11111120
 8020220:	1111      	.short	0x1111
 8020222:	24          	.byte	0x24
 8020223:	00          	.byte	0x00
 8020224:	68e1      	ldr	r1, [r4, #12]
 8020226:	f002 f811 	bl	802224c <WM__GetClientRectEx>
 802022a:	2300      	movs	r3, #0
 802022c:	60e3      	str	r3, [r4, #12]
 802022e:	bd10      	pop	{r4, pc}
 8020230:	68c3      	ldr	r3, [r0, #12]
 8020232:	685a      	ldr	r2, [r3, #4]
 8020234:	2a01      	cmp	r2, #1
 8020236:	d012      	beq.n	802025e <_cbBackWin+0x9e>
 8020238:	4770      	bx	lr
 802023a:	4621      	mov	r1, r4
 802023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020240:	f001 b9a6 	b.w	8021590 <WM_SendToParent>
 8020244:	60e0      	str	r0, [r4, #12]
 8020246:	bd10      	pop	{r4, pc}
 8020248:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 802024c:	60e3      	str	r3, [r4, #12]
 802024e:	bd10      	pop	{r4, pc}
 8020250:	2800      	cmp	r0, #0
 8020252:	d0ec      	beq.n	802022e <_cbBackWin+0x6e>
 8020254:	2100      	movs	r1, #0
 8020256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802025a:	f7ff bf43 	b.w	80200e4 <WM_InvalidateRect.part.2>
 802025e:	6818      	ldr	r0, [r3, #0]
 8020260:	f7f6 be4e 	b.w	8016f00 <GUI_StoreKey>
 8020264:	2300      	movs	r3, #0
 8020266:	e7bd      	b.n	80201e4 <_cbBackWin+0x24>
 8020268:	200467fc 	.word	0x200467fc
 802026c:	20046830 	.word	0x20046830

08020270 <WM_DeleteWindow.part.3>:
 8020270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020274:	4e84      	ldr	r6, [pc, #528]	; (8020488 <WM_DeleteWindow.part.3+0x218>)
 8020276:	b086      	sub	sp, #24
 8020278:	4604      	mov	r4, r0
 802027a:	f7f8 f993 	bl	80185a4 <GUI_Lock>
 802027e:	6830      	ldr	r0, [r6, #0]
 8020280:	b148      	cbz	r0, 8020296 <WM_DeleteWindow.part.3+0x26>
 8020282:	42a0      	cmp	r0, r4
 8020284:	d102      	bne.n	802028c <WM_DeleteWindow.part.3+0x1c>
 8020286:	e00b      	b.n	80202a0 <WM_DeleteWindow.part.3+0x30>
 8020288:	4284      	cmp	r4, r0
 802028a:	d009      	beq.n	80202a0 <WM_DeleteWindow.part.3+0x30>
 802028c:	f7f2 fd82 	bl	8012d94 <GUI_ALLOC_h2p>
 8020290:	6940      	ldr	r0, [r0, #20]
 8020292:	2800      	cmp	r0, #0
 8020294:	d1f8      	bne.n	8020288 <WM_DeleteWindow.part.3+0x18>
 8020296:	f7f8 f97b 	bl	8018590 <GUI_Unlock>
 802029a:	b006      	add	sp, #24
 802029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202a0:	4625      	mov	r5, r4
 80202a2:	e000      	b.n	80202a6 <WM_DeleteWindow.part.3+0x36>
 80202a4:	461d      	mov	r5, r3
 80202a6:	4628      	mov	r0, r5
 80202a8:	f7f2 fd74 	bl	8012d94 <GUI_ALLOC_h2p>
 80202ac:	6983      	ldr	r3, [r0, #24]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d1f8      	bne.n	80202a4 <WM_DeleteWindow.part.3+0x34>
 80202b2:	4f76      	ldr	r7, [pc, #472]	; (802048c <WM_DeleteWindow.part.3+0x21c>)
 80202b4:	683a      	ldr	r2, [r7, #0]
 80202b6:	4295      	cmp	r5, r2
 80202b8:	f000 80de 	beq.w	8020478 <WM_DeleteWindow.part.3+0x208>
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	429d      	cmp	r5, r3
 80202c0:	bf14      	ite	ne
 80202c2:	f04f 35ff 	movne.w	r5, #4294967295
 80202c6:	2501      	moveq	r5, #1
 80202c8:	230b      	movs	r3, #11
 80202ca:	f10d 0818 	add.w	r8, sp, #24
 80202ce:	4620      	mov	r0, r4
 80202d0:	9403      	str	r4, [sp, #12]
 80202d2:	f848 3d10 	str.w	r3, [r8, #-16]!
 80202d6:	4641      	mov	r1, r8
 80202d8:	f001 feaa 	bl	8022030 <WM__SendMessage>
 80202dc:	4620      	mov	r0, r4
 80202de:	f001 fb41 	bl	8021964 <WM__DeleteAssocTimer>
 80202e2:	4620      	mov	r0, r4
 80202e4:	f7f2 fd60 	bl	8012da8 <GUI_ALLOC_LockH>
 80202e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80202ea:	9001      	str	r0, [sp, #4]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	f040 80a2 	bne.w	8020436 <WM_DeleteWindow.part.3+0x1c6>
 80202f2:	4b67      	ldr	r3, [pc, #412]	; (8020490 <WM_DeleteWindow.part.3+0x220>)
 80202f4:	2100      	movs	r1, #0
 80202f6:	4a67      	ldr	r2, [pc, #412]	; (8020494 <WM_DeleteWindow.part.3+0x224>)
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	4867      	ldr	r0, [pc, #412]	; (8020498 <WM_DeleteWindow.part.3+0x228>)
 80202fc:	6081      	str	r1, [r0, #8]
 80202fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020302:	4284      	cmp	r4, r0
 8020304:	bf08      	it	eq
 8020306:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 802030a:	4a64      	ldr	r2, [pc, #400]	; (802049c <WM_DeleteWindow.part.3+0x22c>)
 802030c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8020310:	428c      	cmp	r4, r1
 8020312:	f000 8094 	beq.w	802043e <WM_DeleteWindow.part.3+0x1ce>
 8020316:	4b62      	ldr	r3, [pc, #392]	; (80204a0 <WM_DeleteWindow.part.3+0x230>)
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	b153      	cbz	r3, 8020332 <WM_DeleteWindow.part.3+0xc2>
 802031c:	2100      	movs	r1, #0
 802031e:	e001      	b.n	8020324 <WM_DeleteWindow.part.3+0xb4>
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	b133      	cbz	r3, 8020332 <WM_DeleteWindow.part.3+0xc2>
 8020324:	685a      	ldr	r2, [r3, #4]
 8020326:	4294      	cmp	r4, r2
 8020328:	d1fa      	bne.n	8020320 <WM_DeleteWindow.part.3+0xb0>
 802032a:	6059      	str	r1, [r3, #4]
 802032c:	681b      	ldr	r3, [r3, #0]
 802032e:	2b00      	cmp	r3, #0
 8020330:	d1f8      	bne.n	8020324 <WM_DeleteWindow.part.3+0xb4>
 8020332:	4620      	mov	r0, r4
 8020334:	2107      	movs	r1, #7
 8020336:	f001 f8cb 	bl	80214d0 <WM_NotifyParent>
 802033a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802033e:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8020342:	2800      	cmp	r0, #0
 8020344:	d15d      	bne.n	8020402 <WM_DeleteWindow.part.3+0x192>
 8020346:	4620      	mov	r0, r4
 8020348:	f7f2 fd2e 	bl	8012da8 <GUI_ALLOC_LockH>
 802034c:	6981      	ldr	r1, [r0, #24]
 802034e:	9002      	str	r0, [sp, #8]
 8020350:	2900      	cmp	r1, #0
 8020352:	d162      	bne.n	802041a <WM_DeleteWindow.part.3+0x1aa>
 8020354:	4640      	mov	r0, r8
 8020356:	f7f2 fd3b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802035a:	6830      	ldr	r0, [r6, #0]
 802035c:	b158      	cbz	r0, 8020376 <WM_DeleteWindow.part.3+0x106>
 802035e:	f7f2 fd19 	bl	8012d94 <GUI_ALLOC_h2p>
 8020362:	4680      	mov	r8, r0
 8020364:	6940      	ldr	r0, [r0, #20]
 8020366:	4284      	cmp	r4, r0
 8020368:	d1f8      	bne.n	802035c <WM_DeleteWindow.part.3+0xec>
 802036a:	4620      	mov	r0, r4
 802036c:	f7f2 fd12 	bl	8012d94 <GUI_ALLOC_h2p>
 8020370:	6943      	ldr	r3, [r0, #20]
 8020372:	f8c8 3014 	str.w	r3, [r8, #20]
 8020376:	9b01      	ldr	r3, [sp, #4]
 8020378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802037a:	07d9      	lsls	r1, r3, #31
 802037c:	d503      	bpl.n	8020386 <WM_DeleteWindow.part.3+0x116>
 802037e:	4949      	ldr	r1, [pc, #292]	; (80204a4 <WM_DeleteWindow.part.3+0x234>)
 8020380:	680a      	ldr	r2, [r1, #0]
 8020382:	3a01      	subs	r2, #1
 8020384:	600a      	str	r2, [r1, #0]
 8020386:	069a      	lsls	r2, r3, #26
 8020388:	d442      	bmi.n	8020410 <WM_DeleteWindow.part.3+0x1a0>
 802038a:	a801      	add	r0, sp, #4
 802038c:	f7f2 fd20 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020390:	4a45      	ldr	r2, [pc, #276]	; (80204a8 <WM_DeleteWindow.part.3+0x238>)
 8020392:	4620      	mov	r0, r4
 8020394:	8813      	ldrh	r3, [r2, #0]
 8020396:	3b01      	subs	r3, #1
 8020398:	8013      	strh	r3, [r2, #0]
 802039a:	f7f2 fe9d 	bl	80130d8 <GUI_ALLOC_Free>
 802039e:	1c6b      	adds	r3, r5, #1
 80203a0:	f43f af79 	beq.w	8020296 <WM_DeleteWindow.part.3+0x26>
 80203a4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80203a8:	f7f8 f8fc 	bl	80185a4 <GUI_Lock>
 80203ac:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80204b0 <WM_DeleteWindow.part.3+0x240>
 80203b0:	f8d8 3000 	ldr.w	r3, [r8]
 80203b4:	b905      	cbnz	r5, 80203b8 <WM_DeleteWindow.part.3+0x148>
 80203b6:	6835      	ldr	r5, [r6, #0]
 80203b8:	649d      	str	r5, [r3, #72]	; 0x48
 80203ba:	462c      	mov	r4, r5
 80203bc:	e000      	b.n	80203c0 <WM_DeleteWindow.part.3+0x150>
 80203be:	461c      	mov	r4, r3
 80203c0:	4620      	mov	r0, r4
 80203c2:	f7f2 fce7 	bl	8012d94 <GUI_ALLOC_h2p>
 80203c6:	6983      	ldr	r3, [r0, #24]
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	d1f8      	bne.n	80203be <WM_DeleteWindow.part.3+0x14e>
 80203cc:	6839      	ldr	r1, [r7, #0]
 80203ce:	4a2f      	ldr	r2, [pc, #188]	; (802048c <WM_DeleteWindow.part.3+0x21c>)
 80203d0:	428c      	cmp	r4, r1
 80203d2:	d053      	beq.n	802047c <WM_DeleteWindow.part.3+0x20c>
 80203d4:	6853      	ldr	r3, [r2, #4]
 80203d6:	429c      	cmp	r4, r3
 80203d8:	d054      	beq.n	8020484 <WM_DeleteWindow.part.3+0x214>
 80203da:	f7fa f945 	bl	801a668 <LCD_SetClipRectMax>
 80203de:	4628      	mov	r0, r5
 80203e0:	f7f2 fcd8 	bl	8012d94 <GUI_ALLOC_h2p>
 80203e4:	f8d8 3000 	ldr.w	r3, [r8]
 80203e8:	f9b0 1000 	ldrsh.w	r1, [r0]
 80203ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80203f0:	64d9      	str	r1, [r3, #76]	; 0x4c
 80203f2:	651a      	str	r2, [r3, #80]	; 0x50
 80203f4:	f7f8 f8cc 	bl	8018590 <GUI_Unlock>
 80203f8:	f7f8 f8ca 	bl	8018590 <GUI_Unlock>
 80203fc:	b006      	add	sp, #24
 80203fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020402:	f7ff ff35 	bl	8020270 <WM_DeleteWindow.part.3>
 8020406:	f8d9 001c 	ldr.w	r0, [r9, #28]
 802040a:	2800      	cmp	r0, #0
 802040c:	d199      	bne.n	8020342 <WM_DeleteWindow.part.3+0xd2>
 802040e:	e79a      	b.n	8020346 <WM_DeleteWindow.part.3+0xd6>
 8020410:	4a26      	ldr	r2, [pc, #152]	; (80204ac <WM_DeleteWindow.part.3+0x23c>)
 8020412:	8813      	ldrh	r3, [r2, #0]
 8020414:	3b01      	subs	r3, #1
 8020416:	8013      	strh	r3, [r2, #0]
 8020418:	e7b7      	b.n	802038a <WM_DeleteWindow.part.3+0x11a>
 802041a:	6a02      	ldr	r2, [r0, #32]
 802041c:	2320      	movs	r3, #32
 802041e:	f7ff fdf5 	bl	802000c <WM__InvalidateRect>
 8020422:	4620      	mov	r0, r4
 8020424:	f7f2 fcb6 	bl	8012d94 <GUI_ALLOC_h2p>
 8020428:	4681      	mov	r9, r0
 802042a:	6980      	ldr	r0, [r0, #24]
 802042c:	b958      	cbnz	r0, 8020446 <WM_DeleteWindow.part.3+0x1d6>
 802042e:	9b02      	ldr	r3, [sp, #8]
 8020430:	2200      	movs	r2, #0
 8020432:	619a      	str	r2, [r3, #24]
 8020434:	e78e      	b.n	8020354 <WM_DeleteWindow.part.3+0xe4>
 8020436:	4618      	mov	r0, r3
 8020438:	f7fc fe62 	bl	801d100 <GUI_MEMDEV_Delete>
 802043c:	e759      	b.n	80202f2 <WM_DeleteWindow.part.3+0x82>
 802043e:	2100      	movs	r1, #0
 8020440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8020444:	e767      	b.n	8020316 <WM_DeleteWindow.part.3+0xa6>
 8020446:	f7f2 fca5 	bl	8012d94 <GUI_ALLOC_h2p>
 802044a:	69c3      	ldr	r3, [r0, #28]
 802044c:	4682      	mov	sl, r0
 802044e:	429c      	cmp	r4, r3
 8020450:	d00b      	beq.n	802046a <WM_DeleteWindow.part.3+0x1fa>
 8020452:	2b00      	cmp	r3, #0
 8020454:	d0eb      	beq.n	802042e <WM_DeleteWindow.part.3+0x1be>
 8020456:	4618      	mov	r0, r3
 8020458:	f7f2 fc9c 	bl	8012d94 <GUI_ALLOC_h2p>
 802045c:	6a03      	ldr	r3, [r0, #32]
 802045e:	429c      	cmp	r4, r3
 8020460:	d1f7      	bne.n	8020452 <WM_DeleteWindow.part.3+0x1e2>
 8020462:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8020466:	6203      	str	r3, [r0, #32]
 8020468:	e7e1      	b.n	802042e <WM_DeleteWindow.part.3+0x1be>
 802046a:	4620      	mov	r0, r4
 802046c:	f7f2 fc92 	bl	8012d94 <GUI_ALLOC_h2p>
 8020470:	6a03      	ldr	r3, [r0, #32]
 8020472:	f8ca 301c 	str.w	r3, [sl, #28]
 8020476:	e7da      	b.n	802042e <WM_DeleteWindow.part.3+0x1be>
 8020478:	461d      	mov	r5, r3
 802047a:	e725      	b.n	80202c8 <WM_DeleteWindow.part.3+0x58>
 802047c:	4618      	mov	r0, r3
 802047e:	f7f6 fe85 	bl	801718c <GUI_SelectLayer>
 8020482:	e7aa      	b.n	80203da <WM_DeleteWindow.part.3+0x16a>
 8020484:	2001      	movs	r0, #1
 8020486:	e7fa      	b.n	802047e <WM_DeleteWindow.part.3+0x20e>
 8020488:	20046818 	.word	0x20046818
 802048c:	200467fc 	.word	0x200467fc
 8020490:	2004681c 	.word	0x2004681c
 8020494:	2004680c 	.word	0x2004680c
 8020498:	200003e4 	.word	0x200003e4
 802049c:	20046840 	.word	0x20046840
 80204a0:	20046838 	.word	0x20046838
 80204a4:	2004684c 	.word	0x2004684c
 80204a8:	200467f4 	.word	0x200467f4
 80204ac:	20046814 	.word	0x20046814
 80204b0:	20000018 	.word	0x20000018

080204b4 <_Exec1Input>:
 80204b4:	b570      	push	{r4, r5, r6, lr}
 80204b6:	4e1f      	ldr	r6, [pc, #124]	; (8020534 <_Exec1Input+0x80>)
 80204b8:	b082      	sub	sp, #8
 80204ba:	6873      	ldr	r3, [r6, #4]
 80204bc:	b9cb      	cbnz	r3, 80204f2 <_Exec1Input+0x3e>
 80204be:	4b1e      	ldr	r3, [pc, #120]	; (8020538 <_Exec1Input+0x84>)
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	b103      	cbz	r3, 80204c6 <_Exec1Input+0x12>
 80204c4:	4798      	blx	r3
 80204c6:	4b1d      	ldr	r3, [pc, #116]	; (802053c <_Exec1Input+0x88>)
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	b10b      	cbz	r3, 80204d0 <_Exec1Input+0x1c>
 80204cc:	4798      	blx	r3
 80204ce:	b968      	cbnz	r0, 80204ec <_Exec1Input+0x38>
 80204d0:	4b1b      	ldr	r3, [pc, #108]	; (8020540 <_Exec1Input+0x8c>)
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80204d8:	b908      	cbnz	r0, 80204de <_Exec1Input+0x2a>
 80204da:	b002      	add	sp, #8
 80204dc:	bd70      	pop	{r4, r5, r6, pc}
 80204de:	f7f6 fd17 	bl	8016f10 <GUI_PollKeyMsg>
 80204e2:	3000      	adds	r0, #0
 80204e4:	bf18      	it	ne
 80204e6:	2001      	movne	r0, #1
 80204e8:	b002      	add	sp, #8
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	2001      	movs	r0, #1
 80204ee:	b002      	add	sp, #8
 80204f0:	bd70      	pop	{r4, r5, r6, pc}
 80204f2:	f7f8 f857 	bl	80185a4 <GUI_Lock>
 80204f6:	4b13      	ldr	r3, [pc, #76]	; (8020544 <_Exec1Input+0x90>)
 80204f8:	681c      	ldr	r4, [r3, #0]
 80204fa:	b18c      	cbz	r4, 8020520 <_Exec1Input+0x6c>
 80204fc:	4620      	mov	r0, r4
 80204fe:	f7f2 fc53 	bl	8012da8 <GUI_ALLOC_LockH>
 8020502:	4603      	mov	r3, r0
 8020504:	a801      	add	r0, sp, #4
 8020506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020508:	9301      	str	r3, [sp, #4]
 802050a:	0412      	lsls	r2, r2, #16
 802050c:	d50d      	bpl.n	802052a <_Exec1Input+0x76>
 802050e:	695d      	ldr	r5, [r3, #20]
 8020510:	f7f2 fc5e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020514:	4620      	mov	r0, r4
 8020516:	462c      	mov	r4, r5
 8020518:	f7ff feaa 	bl	8020270 <WM_DeleteWindow.part.3>
 802051c:	2c00      	cmp	r4, #0
 802051e:	d1ed      	bne.n	80204fc <_Exec1Input+0x48>
 8020520:	2300      	movs	r3, #0
 8020522:	6073      	str	r3, [r6, #4]
 8020524:	f7f8 f834 	bl	8018590 <GUI_Unlock>
 8020528:	e7c9      	b.n	80204be <_Exec1Input+0xa>
 802052a:	a801      	add	r0, sp, #4
 802052c:	695c      	ldr	r4, [r3, #20]
 802052e:	f7f2 fc4f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020532:	e7e2      	b.n	80204fa <_Exec1Input+0x46>
 8020534:	200003e4 	.word	0x200003e4
 8020538:	20046804 	.word	0x20046804
 802053c:	200467dc 	.word	0x200467dc
 8020540:	20000018 	.word	0x20000018
 8020544:	20046818 	.word	0x20046818

08020548 <WM__InvalidateParent>:
 8020548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802054c:	4605      	mov	r5, r0
 802054e:	b086      	sub	sp, #24
 8020550:	4608      	mov	r0, r1
 8020552:	460c      	mov	r4, r1
 8020554:	4617      	mov	r7, r2
 8020556:	f7f2 fc1d 	bl	8012d94 <GUI_ALLOC_h2p>
 802055a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802055c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8020560:	bf14      	ite	ne
 8020562:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 8020566:	2620      	moveq	r6, #32
 8020568:	b914      	cbnz	r4, 8020570 <WM__InvalidateParent+0x28>
 802056a:	b006      	add	sp, #24
 802056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020570:	4620      	mov	r0, r4
 8020572:	f7f2 fc19 	bl	8012da8 <GUI_ALLOC_LockH>
 8020576:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 802057a:	9000      	str	r0, [sp, #0]
 802057c:	f018 0f02 	tst.w	r8, #2
 8020580:	d043      	beq.n	802060a <WM__InvalidateParent+0xc2>
 8020582:	4602      	mov	r2, r0
 8020584:	4629      	mov	r1, r5
 8020586:	a802      	add	r0, sp, #8
 8020588:	f7f9 f9dc 	bl	8019944 <GUI__IntersectRects>
 802058c:	2800      	cmp	r0, #0
 802058e:	d03c      	beq.n	802060a <WM__InvalidateParent+0xc2>
 8020590:	f640 0301 	movw	r3, #2049	; 0x801
 8020594:	ea08 0303 	and.w	r3, r8, r3
 8020598:	2b01      	cmp	r3, #1
 802059a:	d040      	beq.n	802061e <WM__InvalidateParent+0xd6>
 802059c:	4620      	mov	r0, r4
 802059e:	4632      	mov	r2, r6
 80205a0:	a902      	add	r1, sp, #8
 80205a2:	f7ff f8a9 	bl	801f6f8 <_Invalidate1Abs>
 80205a6:	9b00      	ldr	r3, [sp, #0]
 80205a8:	69dc      	ldr	r4, [r3, #28]
 80205aa:	b374      	cbz	r4, 802060a <WM__InvalidateParent+0xc2>
 80205ac:	42a7      	cmp	r7, r4
 80205ae:	d02c      	beq.n	802060a <WM__InvalidateParent+0xc2>
 80205b0:	4620      	mov	r0, r4
 80205b2:	f7f2 fbf9 	bl	8012da8 <GUI_ALLOC_LockH>
 80205b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80205b8:	9001      	str	r0, [sp, #4]
 80205ba:	079b      	lsls	r3, r3, #30
 80205bc:	d52b      	bpl.n	8020616 <WM__InvalidateParent+0xce>
 80205be:	4602      	mov	r2, r0
 80205c0:	a902      	add	r1, sp, #8
 80205c2:	a804      	add	r0, sp, #16
 80205c4:	f7f9 f9be 	bl	8019944 <GUI__IntersectRects>
 80205c8:	b328      	cbz	r0, 8020616 <WM__InvalidateParent+0xce>
 80205ca:	a801      	add	r0, sp, #4
 80205cc:	f7f2 fc00 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80205d0:	4632      	mov	r2, r6
 80205d2:	a904      	add	r1, sp, #16
 80205d4:	4620      	mov	r0, r4
 80205d6:	f7ff f88f 	bl	801f6f8 <_Invalidate1Abs>
 80205da:	4620      	mov	r0, r4
 80205dc:	f000 ff28 	bl	8021430 <WM_GetFirstChild>
 80205e0:	4605      	mov	r5, r0
 80205e2:	b150      	cbz	r0, 80205fa <WM__InvalidateParent+0xb2>
 80205e4:	4628      	mov	r0, r5
 80205e6:	4632      	mov	r2, r6
 80205e8:	a904      	add	r1, sp, #16
 80205ea:	f7ff fb5d 	bl	801fca8 <WM_InvalidateWindowAndDescsEx>
 80205ee:	4628      	mov	r0, r5
 80205f0:	f7f2 fbd0 	bl	8012d94 <GUI_ALLOC_h2p>
 80205f4:	6a05      	ldr	r5, [r0, #32]
 80205f6:	2d00      	cmp	r5, #0
 80205f8:	d1f4      	bne.n	80205e4 <WM__InvalidateParent+0x9c>
 80205fa:	4620      	mov	r0, r4
 80205fc:	f7f2 fbca 	bl	8012d94 <GUI_ALLOC_h2p>
 8020600:	6a04      	ldr	r4, [r0, #32]
 8020602:	42a7      	cmp	r7, r4
 8020604:	d001      	beq.n	802060a <WM__InvalidateParent+0xc2>
 8020606:	2c00      	cmp	r4, #0
 8020608:	d1d2      	bne.n	80205b0 <WM__InvalidateParent+0x68>
 802060a:	4668      	mov	r0, sp
 802060c:	f7f2 fbe0 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020610:	b006      	add	sp, #24
 8020612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020616:	a801      	add	r0, sp, #4
 8020618:	f7f2 fbda 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802061c:	e7ed      	b.n	80205fa <WM__InvalidateParent+0xb2>
 802061e:	9900      	ldr	r1, [sp, #0]
 8020620:	4633      	mov	r3, r6
 8020622:	a802      	add	r0, sp, #8
 8020624:	6a0a      	ldr	r2, [r1, #32]
 8020626:	6989      	ldr	r1, [r1, #24]
 8020628:	f7ff fcf0 	bl	802000c <WM__InvalidateRect>
 802062c:	e7bb      	b.n	80205a6 <WM__InvalidateParent+0x5e>
 802062e:	bf00      	nop

08020630 <WM__InvalidateRectEx>:
 8020630:	b901      	cbnz	r1, 8020634 <WM__InvalidateRectEx+0x4>
 8020632:	4770      	bx	lr
 8020634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020636:	4605      	mov	r5, r0
 8020638:	b087      	sub	sp, #28
 802063a:	4608      	mov	r0, r1
 802063c:	4616      	mov	r6, r2
 802063e:	460c      	mov	r4, r1
 8020640:	f7f2 fbb2 	bl	8012da8 <GUI_ALLOC_LockH>
 8020644:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8020646:	9000      	str	r0, [sp, #0]
 8020648:	07ba      	lsls	r2, r7, #30
 802064a:	d542      	bpl.n	80206d2 <WM__InvalidateRectEx+0xa2>
 802064c:	4602      	mov	r2, r0
 802064e:	4629      	mov	r1, r5
 8020650:	a802      	add	r0, sp, #8
 8020652:	f7f9 f977 	bl	8019944 <GUI__IntersectRects>
 8020656:	2800      	cmp	r0, #0
 8020658:	d03b      	beq.n	80206d2 <WM__InvalidateRectEx+0xa2>
 802065a:	f640 0301 	movw	r3, #2049	; 0x801
 802065e:	403b      	ands	r3, r7
 8020660:	2b01      	cmp	r3, #1
 8020662:	d03f      	beq.n	80206e4 <WM__InvalidateRectEx+0xb4>
 8020664:	4620      	mov	r0, r4
 8020666:	2220      	movs	r2, #32
 8020668:	a902      	add	r1, sp, #8
 802066a:	f7ff f845 	bl	801f6f8 <_Invalidate1Abs>
 802066e:	9b00      	ldr	r3, [sp, #0]
 8020670:	69dc      	ldr	r4, [r3, #28]
 8020672:	b374      	cbz	r4, 80206d2 <WM__InvalidateRectEx+0xa2>
 8020674:	42a6      	cmp	r6, r4
 8020676:	d02c      	beq.n	80206d2 <WM__InvalidateRectEx+0xa2>
 8020678:	4620      	mov	r0, r4
 802067a:	f7f2 fb95 	bl	8012da8 <GUI_ALLOC_LockH>
 802067e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020680:	9001      	str	r0, [sp, #4]
 8020682:	079b      	lsls	r3, r3, #30
 8020684:	d52a      	bpl.n	80206dc <WM__InvalidateRectEx+0xac>
 8020686:	4602      	mov	r2, r0
 8020688:	a902      	add	r1, sp, #8
 802068a:	a804      	add	r0, sp, #16
 802068c:	f7f9 f95a 	bl	8019944 <GUI__IntersectRects>
 8020690:	b320      	cbz	r0, 80206dc <WM__InvalidateRectEx+0xac>
 8020692:	a801      	add	r0, sp, #4
 8020694:	f7f2 fb9c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020698:	2220      	movs	r2, #32
 802069a:	a904      	add	r1, sp, #16
 802069c:	4620      	mov	r0, r4
 802069e:	f7ff f82b 	bl	801f6f8 <_Invalidate1Abs>
 80206a2:	4620      	mov	r0, r4
 80206a4:	f000 fec4 	bl	8021430 <WM_GetFirstChild>
 80206a8:	4605      	mov	r5, r0
 80206aa:	b150      	cbz	r0, 80206c2 <WM__InvalidateRectEx+0x92>
 80206ac:	4628      	mov	r0, r5
 80206ae:	2220      	movs	r2, #32
 80206b0:	a904      	add	r1, sp, #16
 80206b2:	f7ff faf9 	bl	801fca8 <WM_InvalidateWindowAndDescsEx>
 80206b6:	4628      	mov	r0, r5
 80206b8:	f7f2 fb6c 	bl	8012d94 <GUI_ALLOC_h2p>
 80206bc:	6a05      	ldr	r5, [r0, #32]
 80206be:	2d00      	cmp	r5, #0
 80206c0:	d1f4      	bne.n	80206ac <WM__InvalidateRectEx+0x7c>
 80206c2:	4620      	mov	r0, r4
 80206c4:	f7f2 fb66 	bl	8012d94 <GUI_ALLOC_h2p>
 80206c8:	6a04      	ldr	r4, [r0, #32]
 80206ca:	42a6      	cmp	r6, r4
 80206cc:	d001      	beq.n	80206d2 <WM__InvalidateRectEx+0xa2>
 80206ce:	2c00      	cmp	r4, #0
 80206d0:	d1d2      	bne.n	8020678 <WM__InvalidateRectEx+0x48>
 80206d2:	4668      	mov	r0, sp
 80206d4:	f7f2 fb7c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80206d8:	b007      	add	sp, #28
 80206da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206dc:	a801      	add	r0, sp, #4
 80206de:	f7f2 fb77 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80206e2:	e7ee      	b.n	80206c2 <WM__InvalidateRectEx+0x92>
 80206e4:	9900      	ldr	r1, [sp, #0]
 80206e6:	2320      	movs	r3, #32
 80206e8:	a802      	add	r0, sp, #8
 80206ea:	6a0a      	ldr	r2, [r1, #32]
 80206ec:	6989      	ldr	r1, [r1, #24]
 80206ee:	f7ff fc8d 	bl	802000c <WM__InvalidateRect>
 80206f2:	e7bc      	b.n	802066e <WM__InvalidateRectEx+0x3e>

080206f4 <WM__SendMsgNoData>:
 80206f4:	b500      	push	{lr}
 80206f6:	b085      	sub	sp, #20
 80206f8:	ab04      	add	r3, sp, #16
 80206fa:	9001      	str	r0, [sp, #4]
 80206fc:	f843 1d10 	str.w	r1, [r3, #-16]!
 8020700:	4619      	mov	r1, r3
 8020702:	f001 fc95 	bl	8022030 <WM__SendMessage>
 8020706:	b005      	add	sp, #20
 8020708:	f85d fb04 	ldr.w	pc, [sp], #4

0802070c <WM__GetClientRectWin>:
 802070c:	2300      	movs	r3, #0
 802070e:	8882      	ldrh	r2, [r0, #4]
 8020710:	b430      	push	{r4, r5}
 8020712:	800b      	strh	r3, [r1, #0]
 8020714:	804b      	strh	r3, [r1, #2]
 8020716:	8805      	ldrh	r5, [r0, #0]
 8020718:	8844      	ldrh	r4, [r0, #2]
 802071a:	88c3      	ldrh	r3, [r0, #6]
 802071c:	1b52      	subs	r2, r2, r5
 802071e:	1b1b      	subs	r3, r3, r4
 8020720:	808a      	strh	r2, [r1, #4]
 8020722:	80cb      	strh	r3, [r1, #6]
 8020724:	bc30      	pop	{r4, r5}
 8020726:	4770      	bx	lr

08020728 <WM_CreateWindowAsChild>:
 8020728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802072c:	b087      	sub	sp, #28
 802072e:	461e      	mov	r6, r3
 8020730:	4681      	mov	r9, r0
 8020732:	468a      	mov	sl, r1
 8020734:	4615      	mov	r5, r2
 8020736:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 802073a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802073c:	f7f7 ff32 	bl	80185a4 <GUI_Lock>
 8020740:	4b68      	ldr	r3, [pc, #416]	; (80208e4 <WM_CreateWindowAsChild+0x1bc>)
 8020742:	681f      	ldr	r7, [r3, #0]
 8020744:	f1b8 0f00 	cmp.w	r8, #0
 8020748:	d10f      	bne.n	802076a <WM_CreateWindowAsChild+0x42>
 802074a:	4b67      	ldr	r3, [pc, #412]	; (80208e8 <WM_CreateWindowAsChild+0x1c0>)
 802074c:	881b      	ldrh	r3, [r3, #0]
 802074e:	2b00      	cmp	r3, #0
 8020750:	d16c      	bne.n	802082c <WM_CreateWindowAsChild+0x104>
 8020752:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8020756:	f7f2 fcdf 	bl	8013118 <GUI_ALLOC_AllocZero>
 802075a:	4604      	mov	r4, r0
 802075c:	bb30      	cbnz	r0, 80207ac <WM_CreateWindowAsChild+0x84>
 802075e:	f7f7 ff17 	bl	8018590 <GUI_Unlock>
 8020762:	4620      	mov	r0, r4
 8020764:	b007      	add	sp, #28
 8020766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802076a:	f1b8 3fff 	cmp.w	r8, #4294967295
 802076e:	d068      	beq.n	8020842 <WM_CreateWindowAsChild+0x11a>
 8020770:	4640      	mov	r0, r8
 8020772:	f7f2 fb19 	bl	8012da8 <GUI_ALLOC_LockH>
 8020776:	f9b0 2000 	ldrsh.w	r2, [r0]
 802077a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802077e:	4491      	add	r9, r2
 8020780:	9001      	str	r0, [sp, #4]
 8020782:	449a      	add	sl, r3
 8020784:	b91d      	cbnz	r5, 802078e <WM_CreateWindowAsChild+0x66>
 8020786:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 802078a:	1aad      	subs	r5, r5, r2
 802078c:	3501      	adds	r5, #1
 802078e:	b91e      	cbnz	r6, 8020798 <WM_CreateWindowAsChild+0x70>
 8020790:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8020794:	1af6      	subs	r6, r6, r3
 8020796:	3601      	adds	r6, #1
 8020798:	a801      	add	r0, sp, #4
 802079a:	f7f2 fb19 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802079e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80207a2:	f7f2 fcb9 	bl	8013118 <GUI_ALLOC_AllocZero>
 80207a6:	4604      	mov	r4, r0
 80207a8:	2800      	cmp	r0, #0
 80207aa:	d0d8      	beq.n	802075e <WM_CreateWindowAsChild+0x36>
 80207ac:	4a4e      	ldr	r2, [pc, #312]	; (80208e8 <WM_CreateWindowAsChild+0x1c0>)
 80207ae:	444d      	add	r5, r9
 80207b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80207b2:	4456      	add	r6, sl
 80207b4:	f10d 0b18 	add.w	fp, sp, #24
 80207b8:	3d01      	subs	r5, #1
 80207ba:	431f      	orrs	r7, r3
 80207bc:	8813      	ldrh	r3, [r2, #0]
 80207be:	3e01      	subs	r6, #1
 80207c0:	3301      	adds	r3, #1
 80207c2:	8013      	strh	r3, [r2, #0]
 80207c4:	f7f2 faf0 	bl	8012da8 <GUI_ALLOC_LockH>
 80207c8:	4a48      	ldr	r2, [pc, #288]	; (80208ec <WM_CreateWindowAsChild+0x1c4>)
 80207ca:	4603      	mov	r3, r0
 80207cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80207ce:	403a      	ands	r2, r7
 80207d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80207d2:	f84b 3d18 	str.w	r3, [fp, #-24]!
 80207d6:	430a      	orrs	r2, r1
 80207d8:	6118      	str	r0, [r3, #16]
 80207da:	809d      	strh	r5, [r3, #4]
 80207dc:	4658      	mov	r0, fp
 80207de:	80de      	strh	r6, [r3, #6]
 80207e0:	f8a3 9000 	strh.w	r9, [r3]
 80207e4:	f8a3 a002 	strh.w	sl, [r3, #2]
 80207e8:	629a      	str	r2, [r3, #40]	; 0x28
 80207ea:	f7f2 faf1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80207ee:	4b40      	ldr	r3, [pc, #256]	; (80208f0 <WM_CreateWindowAsChild+0x1c8>)
 80207f0:	6818      	ldr	r0, [r3, #0]
 80207f2:	2800      	cmp	r0, #0
 80207f4:	d157      	bne.n	80208a6 <WM_CreateWindowAsChild+0x17e>
 80207f6:	601c      	str	r4, [r3, #0]
 80207f8:	4641      	mov	r1, r8
 80207fa:	4620      	mov	r0, r4
 80207fc:	f7ff f882 	bl	801f904 <WM__InsertWindowIntoList>
 8020800:	06ba      	lsls	r2, r7, #26
 8020802:	d42c      	bmi.n	802085e <WM_CreateWindowAsChild+0x136>
 8020804:	07f8      	lsls	r0, r7, #31
 8020806:	d41f      	bmi.n	8020848 <WM_CreateWindowAsChild+0x120>
 8020808:	0679      	lsls	r1, r7, #25
 802080a:	d424      	bmi.n	8020856 <WM_CreateWindowAsChild+0x12e>
 802080c:	07bb      	lsls	r3, r7, #30
 802080e:	d458      	bmi.n	80208c2 <WM_CreateWindowAsChild+0x19a>
 8020810:	2301      	movs	r3, #1
 8020812:	a906      	add	r1, sp, #24
 8020814:	4620      	mov	r0, r4
 8020816:	9403      	str	r4, [sp, #12]
 8020818:	f841 3d10 	str.w	r3, [r1, #-16]!
 802081c:	f001 fc08 	bl	8022030 <WM__SendMessage>
 8020820:	f7f7 feb6 	bl	8018590 <GUI_Unlock>
 8020824:	4620      	mov	r0, r4
 8020826:	b007      	add	sp, #28
 8020828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802082c:	4a31      	ldr	r2, [pc, #196]	; (80208f4 <WM_CreateWindowAsChild+0x1cc>)
 802082e:	4b32      	ldr	r3, [pc, #200]	; (80208f8 <WM_CreateWindowAsChild+0x1d0>)
 8020830:	6812      	ldr	r2, [r2, #0]
 8020832:	7c52      	ldrb	r2, [r2, #17]
 8020834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020838:	1c5a      	adds	r2, r3, #1
 802083a:	2a01      	cmp	r2, #1
 802083c:	d989      	bls.n	8020752 <WM_CreateWindowAsChild+0x2a>
 802083e:	4698      	mov	r8, r3
 8020840:	e796      	b.n	8020770 <WM_CreateWindowAsChild+0x48>
 8020842:	f04f 0800 	mov.w	r8, #0
 8020846:	e784      	b.n	8020752 <WM_CreateWindowAsChild+0x2a>
 8020848:	4a2c      	ldr	r2, [pc, #176]	; (80208fc <WM_CreateWindowAsChild+0x1d4>)
 802084a:	0679      	lsls	r1, r7, #25
 802084c:	6813      	ldr	r3, [r2, #0]
 802084e:	f103 0301 	add.w	r3, r3, #1
 8020852:	6013      	str	r3, [r2, #0]
 8020854:	d5da      	bpl.n	802080c <WM_CreateWindowAsChild+0xe4>
 8020856:	4620      	mov	r0, r4
 8020858:	f000 fd96 	bl	8021388 <WM_BringToBottom>
 802085c:	e7d6      	b.n	802080c <WM_CreateWindowAsChild+0xe4>
 802085e:	4e25      	ldr	r6, [pc, #148]	; (80208f4 <WM_CreateWindowAsChild+0x1cc>)
 8020860:	f7f7 fea0 	bl	80185a4 <GUI_Lock>
 8020864:	4625      	mov	r5, r4
 8020866:	6833      	ldr	r3, [r6, #0]
 8020868:	649c      	str	r4, [r3, #72]	; 0x48
 802086a:	e000      	b.n	802086e <WM_CreateWindowAsChild+0x146>
 802086c:	4605      	mov	r5, r0
 802086e:	4628      	mov	r0, r5
 8020870:	f7f2 fa90 	bl	8012d94 <GUI_ALLOC_h2p>
 8020874:	6980      	ldr	r0, [r0, #24]
 8020876:	2800      	cmp	r0, #0
 8020878:	d1f8      	bne.n	802086c <WM_CreateWindowAsChild+0x144>
 802087a:	4b1f      	ldr	r3, [pc, #124]	; (80208f8 <WM_CreateWindowAsChild+0x1d0>)
 802087c:	681a      	ldr	r2, [r3, #0]
 802087e:	4295      	cmp	r5, r2
 8020880:	d01c      	beq.n	80208bc <WM_CreateWindowAsChild+0x194>
 8020882:	685b      	ldr	r3, [r3, #4]
 8020884:	429d      	cmp	r5, r3
 8020886:	d018      	beq.n	80208ba <WM_CreateWindowAsChild+0x192>
 8020888:	f7f9 feee 	bl	801a668 <LCD_SetClipRectMax>
 802088c:	4620      	mov	r0, r4
 802088e:	f7f2 fa81 	bl	8012d94 <GUI_ALLOC_h2p>
 8020892:	6833      	ldr	r3, [r6, #0]
 8020894:	f9b0 1000 	ldrsh.w	r1, [r0]
 8020898:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 802089c:	64d9      	str	r1, [r3, #76]	; 0x4c
 802089e:	651a      	str	r2, [r3, #80]	; 0x50
 80208a0:	f7f7 fe76 	bl	8018590 <GUI_Unlock>
 80208a4:	e7ae      	b.n	8020804 <WM_CreateWindowAsChild+0xdc>
 80208a6:	f7f2 fa75 	bl	8012d94 <GUI_ALLOC_h2p>
 80208aa:	4605      	mov	r5, r0
 80208ac:	4620      	mov	r0, r4
 80208ae:	f7f2 fa71 	bl	8012d94 <GUI_ALLOC_h2p>
 80208b2:	696b      	ldr	r3, [r5, #20]
 80208b4:	6143      	str	r3, [r0, #20]
 80208b6:	616c      	str	r4, [r5, #20]
 80208b8:	e79e      	b.n	80207f8 <WM_CreateWindowAsChild+0xd0>
 80208ba:	2001      	movs	r0, #1
 80208bc:	f7f6 fc66 	bl	801718c <GUI_SelectLayer>
 80208c0:	e7e2      	b.n	8020888 <WM_CreateWindowAsChild+0x160>
 80208c2:	4620      	mov	r0, r4
 80208c4:	f7f2 fa70 	bl	8012da8 <GUI_ALLOC_LockH>
 80208c8:	4603      	mov	r3, r0
 80208ca:	4658      	mov	r0, fp
 80208cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80208ce:	9300      	str	r3, [sp, #0]
 80208d0:	f042 0202 	orr.w	r2, r2, #2
 80208d4:	629a      	str	r2, [r3, #40]	; 0x28
 80208d6:	f7f2 fa7b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80208da:	2100      	movs	r1, #0
 80208dc:	4620      	mov	r0, r4
 80208de:	f7ff fc01 	bl	80200e4 <WM_InvalidateRect.part.2>
 80208e2:	e795      	b.n	8020810 <WM_CreateWindowAsChild+0xe8>
 80208e4:	2004682c 	.word	0x2004682c
 80208e8:	200467f4 	.word	0x200467f4
 80208ec:	003f3f9f 	.word	0x003f3f9f
 80208f0:	20046818 	.word	0x20046818
 80208f4:	20000018 	.word	0x20000018
 80208f8:	200467fc 	.word	0x200467fc
 80208fc:	2004684c 	.word	0x2004684c

08020900 <WM__GetNextIVR>:
 8020900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020904:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8020b50 <WM__GetNextIVR+0x250>
 8020908:	b087      	sub	sp, #28
 802090a:	f8d8 3000 	ldr.w	r3, [r8]
 802090e:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8020912:	b130      	cbz	r0, 8020922 <WM__GetNextIVR+0x22>
 8020914:	4e8d      	ldr	r6, [pc, #564]	; (8020b4c <WM__GetNextIVR+0x24c>)
 8020916:	6a33      	ldr	r3, [r6, #32]
 8020918:	2b01      	cmp	r3, #1
 802091a:	dd05      	ble.n	8020928 <WM__GetNextIVR+0x28>
 802091c:	3b01      	subs	r3, #1
 802091e:	2000      	movs	r0, #0
 8020920:	6233      	str	r3, [r6, #32]
 8020922:	b007      	add	sp, #28
 8020924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020928:	69f3      	ldr	r3, [r6, #28]
 802092a:	f106 0714 	add.w	r7, r6, #20
 802092e:	ad02      	add	r5, sp, #8
 8020930:	3301      	adds	r3, #1
 8020932:	e897 0003 	ldmia.w	r7, {r0, r1}
 8020936:	61f3      	str	r3, [r6, #28]
 8020938:	e885 0003 	stmia.w	r5, {r0, r1}
 802093c:	b96b      	cbnz	r3, 802095a <WM__GetNextIVR+0x5a>
 802093e:	68f2      	ldr	r2, [r6, #12]
 8020940:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8020944:	9202      	str	r2, [sp, #8]
 8020946:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 802094a:	4c80      	ldr	r4, [pc, #512]	; (8020b4c <WM__GetNextIVR+0x24c>)
 802094c:	429a      	cmp	r2, r3
 802094e:	da1a      	bge.n	8020986 <WM__GetNextIVR+0x86>
 8020950:	6a33      	ldr	r3, [r6, #32]
 8020952:	2000      	movs	r0, #0
 8020954:	3b01      	subs	r3, #1
 8020956:	6233      	str	r3, [r6, #32]
 8020958:	e7e3      	b.n	8020922 <WM__GetNextIVR+0x22>
 802095a:	8b32      	ldrh	r2, [r6, #24]
 802095c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8020960:	3201      	adds	r2, #1
 8020962:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8020966:	b212      	sxth	r2, r2
 8020968:	f8ad 300a 	strh.w	r3, [sp, #10]
 802096c:	4291      	cmp	r1, r2
 802096e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8020972:	dae8      	bge.n	8020946 <WM__GetNextIVR+0x46>
 8020974:	8b73      	ldrh	r3, [r6, #26]
 8020976:	89b2      	ldrh	r2, [r6, #12]
 8020978:	3301      	adds	r3, #1
 802097a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802097e:	b21b      	sxth	r3, r3
 8020980:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020984:	e7df      	b.n	8020946 <WM__GetNextIVR+0x46>
 8020986:	f8d8 3000 	ldr.w	r3, [r8]
 802098a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8020b50 <WM__GetNextIVR+0x250>
 802098e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8020990:	f7f2 fa0a 	bl	8012da8 <GUI_ALLOC_LockH>
 8020994:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020998:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802099c:	4602      	mov	r2, r0
 802099e:	9000      	str	r0, [sp, #0]
 80209a0:	4299      	cmp	r1, r3
 80209a2:	f000 80bb 	beq.w	8020b1c <WM__GetNextIVR+0x21c>
 80209a6:	f8d8 2000 	ldr.w	r2, [r8]
 80209aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80209ae:	6c90      	ldr	r0, [r2, #72]	; 0x48
 80209b0:	b910      	cbnz	r0, 80209b8 <WM__GetNextIVR+0xb8>
 80209b2:	e00d      	b.n	80209d0 <WM__GetNextIVR+0xd0>
 80209b4:	69a0      	ldr	r0, [r4, #24]
 80209b6:	b158      	cbz	r0, 80209d0 <WM__GetNextIVR+0xd0>
 80209b8:	f7f2 f9ec 	bl	8012d94 <GUI_ALLOC_h2p>
 80209bc:	4629      	mov	r1, r5
 80209be:	4604      	mov	r4, r0
 80209c0:	6a00      	ldr	r0, [r0, #32]
 80209c2:	f7fe fd77 	bl	801f4b4 <_Findx0.constprop.10>
 80209c6:	2800      	cmp	r0, #0
 80209c8:	d0f4      	beq.n	80209b4 <WM__GetNextIVR+0xb4>
 80209ca:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80209ce:	e7ea      	b.n	80209a6 <WM__GetNextIVR+0xa6>
 80209d0:	9b00      	ldr	r3, [sp, #0]
 80209d2:	4629      	mov	r1, r5
 80209d4:	69d8      	ldr	r0, [r3, #28]
 80209d6:	f7fe fd6d 	bl	801f4b4 <_Findx0.constprop.10>
 80209da:	2800      	cmp	r0, #0
 80209dc:	d1f5      	bne.n	80209ca <WM__GetNextIVR+0xca>
 80209de:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 80209e2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80209e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80209ea:	429a      	cmp	r2, r3
 80209ec:	f300 808e 	bgt.w	8020b0c <WM__GetNextIVR+0x20c>
 80209f0:	f8d8 3000 	ldr.w	r3, [r8]
 80209f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80209f6:	2800      	cmp	r0, #0
 80209f8:	d02f      	beq.n	8020a5a <WM__GetNextIVR+0x15a>
 80209fa:	f10d 0810 	add.w	r8, sp, #16
 80209fe:	f7f2 f9c9 	bl	8012d94 <GUI_ALLOC_h2p>
 8020a02:	6a04      	ldr	r4, [r0, #32]
 8020a04:	4681      	mov	r9, r0
 8020a06:	b96c      	cbnz	r4, 8020a24 <WM__GetNextIVR+0x124>
 8020a08:	e023      	b.n	8020a52 <WM__GetNextIVR+0x152>
 8020a0a:	07e1      	lsls	r1, r4, #31
 8020a0c:	d44c      	bmi.n	8020aa8 <WM__GetNextIVR+0x1a8>
 8020a0e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020a12:	9801      	ldr	r0, [sp, #4]
 8020a14:	3b01      	subs	r3, #1
 8020a16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020a1a:	6a04      	ldr	r4, [r0, #32]
 8020a1c:	a801      	add	r0, sp, #4
 8020a1e:	f7f2 f9d7 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020a22:	b1b4      	cbz	r4, 8020a52 <WM__GetNextIVR+0x152>
 8020a24:	4620      	mov	r0, r4
 8020a26:	f7f2 f9bf 	bl	8012da8 <GUI_ALLOC_LockH>
 8020a2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8020a2c:	9001      	str	r0, [sp, #4]
 8020a2e:	07a3      	lsls	r3, r4, #30
 8020a30:	d5f3      	bpl.n	8020a1a <WM__GetNextIVR+0x11a>
 8020a32:	c803      	ldmia	r0, {r0, r1}
 8020a34:	e888 0003 	stmia.w	r8, {r0, r1}
 8020a38:	4641      	mov	r1, r8
 8020a3a:	4628      	mov	r0, r5
 8020a3c:	f7f3 fab8 	bl	8013fb0 <GUI_RectsIntersect>
 8020a40:	2800      	cmp	r0, #0
 8020a42:	d1e2      	bne.n	8020a0a <WM__GetNextIVR+0x10a>
 8020a44:	9801      	ldr	r0, [sp, #4]
 8020a46:	6a04      	ldr	r4, [r0, #32]
 8020a48:	a801      	add	r0, sp, #4
 8020a4a:	f7f2 f9c1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020a4e:	2c00      	cmp	r4, #0
 8020a50:	d1e8      	bne.n	8020a24 <WM__GetNextIVR+0x124>
 8020a52:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8020a56:	2800      	cmp	r0, #0
 8020a58:	d1d1      	bne.n	80209fe <WM__GetNextIVR+0xfe>
 8020a5a:	9b00      	ldr	r3, [sp, #0]
 8020a5c:	69dc      	ldr	r4, [r3, #28]
 8020a5e:	2c00      	cmp	r4, #0
 8020a60:	d043      	beq.n	8020aea <WM__GetNextIVR+0x1ea>
 8020a62:	f10d 0810 	add.w	r8, sp, #16
 8020a66:	e00d      	b.n	8020a84 <WM__GetNextIVR+0x184>
 8020a68:	07e3      	lsls	r3, r4, #31
 8020a6a:	d42e      	bmi.n	8020aca <WM__GetNextIVR+0x1ca>
 8020a6c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020a70:	9801      	ldr	r0, [sp, #4]
 8020a72:	3b01      	subs	r3, #1
 8020a74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020a78:	6a04      	ldr	r4, [r0, #32]
 8020a7a:	a801      	add	r0, sp, #4
 8020a7c:	f7f2 f9a8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020a80:	2c00      	cmp	r4, #0
 8020a82:	d032      	beq.n	8020aea <WM__GetNextIVR+0x1ea>
 8020a84:	4620      	mov	r0, r4
 8020a86:	f7f2 f98f 	bl	8012da8 <GUI_ALLOC_LockH>
 8020a8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8020a8c:	9001      	str	r0, [sp, #4]
 8020a8e:	07a2      	lsls	r2, r4, #30
 8020a90:	d5f2      	bpl.n	8020a78 <WM__GetNextIVR+0x178>
 8020a92:	c803      	ldmia	r0, {r0, r1}
 8020a94:	e888 0003 	stmia.w	r8, {r0, r1}
 8020a98:	4641      	mov	r1, r8
 8020a9a:	4628      	mov	r0, r5
 8020a9c:	f7f3 fa88 	bl	8013fb0 <GUI_RectsIntersect>
 8020aa0:	2800      	cmp	r0, #0
 8020aa2:	d1e1      	bne.n	8020a68 <WM__GetNextIVR+0x168>
 8020aa4:	9801      	ldr	r0, [sp, #4]
 8020aa6:	e7e7      	b.n	8020a78 <WM__GetNextIVR+0x178>
 8020aa8:	9801      	ldr	r0, [sp, #4]
 8020aaa:	69c4      	ldr	r4, [r0, #28]
 8020aac:	2c00      	cmp	r4, #0
 8020aae:	d0b4      	beq.n	8020a1a <WM__GetNextIVR+0x11a>
 8020ab0:	4620      	mov	r0, r4
 8020ab2:	4642      	mov	r2, r8
 8020ab4:	4629      	mov	r1, r5
 8020ab6:	f7fe fbe9 	bl	801f28c <_Findx1>
 8020aba:	4620      	mov	r0, r4
 8020abc:	f7f2 f96a 	bl	8012d94 <GUI_ALLOC_h2p>
 8020ac0:	6a04      	ldr	r4, [r0, #32]
 8020ac2:	2c00      	cmp	r4, #0
 8020ac4:	d1f4      	bne.n	8020ab0 <WM__GetNextIVR+0x1b0>
 8020ac6:	9801      	ldr	r0, [sp, #4]
 8020ac8:	e7bd      	b.n	8020a46 <WM__GetNextIVR+0x146>
 8020aca:	9801      	ldr	r0, [sp, #4]
 8020acc:	69c4      	ldr	r4, [r0, #28]
 8020ace:	2c00      	cmp	r4, #0
 8020ad0:	d0d2      	beq.n	8020a78 <WM__GetNextIVR+0x178>
 8020ad2:	4620      	mov	r0, r4
 8020ad4:	4642      	mov	r2, r8
 8020ad6:	4629      	mov	r1, r5
 8020ad8:	f7fe fbd8 	bl	801f28c <_Findx1>
 8020adc:	4620      	mov	r0, r4
 8020ade:	f7f2 f959 	bl	8012d94 <GUI_ALLOC_h2p>
 8020ae2:	6a04      	ldr	r4, [r0, #32]
 8020ae4:	2c00      	cmp	r4, #0
 8020ae6:	d1f4      	bne.n	8020ad2 <WM__GetNextIVR+0x1d2>
 8020ae8:	e7dc      	b.n	8020aa4 <WM__GetNextIVR+0x1a4>
 8020aea:	4668      	mov	r0, sp
 8020aec:	f7f2 f970 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020af0:	69f2      	ldr	r2, [r6, #28]
 8020af2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8020af6:	429a      	cmp	r2, r3
 8020af8:	f73f af2a 	bgt.w	8020950 <WM__GetNextIVR+0x50>
 8020afc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020b00:	e887 0003 	stmia.w	r7, {r0, r1}
 8020b04:	f7fe fe6a 	bl	801f7dc <WM__ActivateClipRect>
 8020b08:	2001      	movs	r0, #1
 8020b0a:	e70a      	b.n	8020922 <WM__GetNextIVR+0x22>
 8020b0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020b10:	e887 0003 	stmia.w	r7, {r0, r1}
 8020b14:	4668      	mov	r0, sp
 8020b16:	f7f2 f95b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020b1a:	e72b      	b.n	8020974 <WM__GetNextIVR+0x74>
 8020b1c:	f8d9 1000 	ldr.w	r1, [r9]
 8020b20:	6923      	ldr	r3, [r4, #16]
 8020b22:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8020b24:	9303      	str	r3, [sp, #12]
 8020b26:	b150      	cbz	r0, 8020b3e <WM__GetNextIVR+0x23e>
 8020b28:	f7f2 f934 	bl	8012d94 <GUI_ALLOC_h2p>
 8020b2c:	4604      	mov	r4, r0
 8020b2e:	4629      	mov	r1, r5
 8020b30:	6a00      	ldr	r0, [r0, #32]
 8020b32:	f7fe fd05 	bl	801f540 <_Findy1.constprop.11>
 8020b36:	69a0      	ldr	r0, [r4, #24]
 8020b38:	2800      	cmp	r0, #0
 8020b3a:	d1f5      	bne.n	8020b28 <WM__GetNextIVR+0x228>
 8020b3c:	9a00      	ldr	r2, [sp, #0]
 8020b3e:	69d0      	ldr	r0, [r2, #28]
 8020b40:	4629      	mov	r1, r5
 8020b42:	f7fe fcfd 	bl	801f540 <_Findy1.constprop.11>
 8020b46:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020b4a:	e72c      	b.n	80209a6 <WM__GetNextIVR+0xa6>
 8020b4c:	200003e4 	.word	0x200003e4
 8020b50:	20000018 	.word	0x20000018

08020b54 <WM__InitIVRSearch>:
 8020b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b58:	4c5e      	ldr	r4, [pc, #376]	; (8020cd4 <WM__InitIVRSearch+0x180>)
 8020b5a:	b089      	sub	sp, #36	; 0x24
 8020b5c:	6822      	ldr	r2, [r4, #0]
 8020b5e:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8020b62:	b14b      	cbz	r3, 8020b78 <WM__InitIVRSearch+0x24>
 8020b64:	4d5c      	ldr	r5, [pc, #368]	; (8020cd8 <WM__InitIVRSearch+0x184>)
 8020b66:	6a2b      	ldr	r3, [r5, #32]
 8020b68:	3301      	adds	r3, #1
 8020b6a:	2b01      	cmp	r3, #1
 8020b6c:	622b      	str	r3, [r5, #32]
 8020b6e:	dd09      	ble.n	8020b84 <WM__InitIVRSearch+0x30>
 8020b70:	2001      	movs	r0, #1
 8020b72:	b009      	add	sp, #36	; 0x24
 8020b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b78:	f7fe fe30 	bl	801f7dc <WM__ActivateClipRect>
 8020b7c:	2001      	movs	r0, #1
 8020b7e:	b009      	add	sp, #36	; 0x24
 8020b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b84:	4607      	mov	r7, r0
 8020b86:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8020b88:	f7f2 f90e 	bl	8012da8 <GUI_ALLOC_LockH>
 8020b8c:	4b53      	ldr	r3, [pc, #332]	; (8020cdc <WM__InitIVRSearch+0x188>)
 8020b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8020b92:	9001      	str	r0, [sp, #4]
 8020b94:	781b      	ldrb	r3, [r3, #0]
 8020b96:	61ea      	str	r2, [r5, #28]
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	d061      	beq.n	8020c60 <WM__InitIVRSearch+0x10c>
 8020b9c:	3008      	adds	r0, #8
 8020b9e:	ae04      	add	r6, sp, #16
 8020ba0:	c803      	ldmia	r0, {r0, r1}
 8020ba2:	e886 0003 	stmia.w	r6, {r0, r1}
 8020ba6:	b11f      	cbz	r7, 8020bb0 <WM__InitIVRSearch+0x5c>
 8020ba8:	4639      	mov	r1, r7
 8020baa:	4630      	mov	r0, r6
 8020bac:	f7f8 feac 	bl	8019908 <GUI__IntersectRect>
 8020bb0:	6823      	ldr	r3, [r4, #0]
 8020bb2:	4f4b      	ldr	r7, [pc, #300]	; (8020ce0 <WM__InitIVRSearch+0x18c>)
 8020bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020bb6:	2a00      	cmp	r2, #0
 8020bb8:	f000 8087 	beq.w	8020cca <WM__InitIVRSearch+0x176>
 8020bbc:	6810      	ldr	r0, [r2, #0]
 8020bbe:	ab06      	add	r3, sp, #24
 8020bc0:	6851      	ldr	r1, [r2, #4]
 8020bc2:	f10d 0808 	add.w	r8, sp, #8
 8020bc6:	683a      	ldr	r2, [r7, #0]
 8020bc8:	c303      	stmia	r3!, {r0, r1}
 8020bca:	9b01      	ldr	r3, [sp, #4]
 8020bcc:	9302      	str	r3, [sp, #8]
 8020bce:	2a00      	cmp	r2, #0
 8020bd0:	d160      	bne.n	8020c94 <WM__InitIVRSearch+0x140>
 8020bd2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020bd6:	a806      	add	r0, sp, #24
 8020bd8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020bdc:	f7f3 f90e 	bl	8013dfc <GUI_MoveRect>
 8020be0:	4630      	mov	r0, r6
 8020be2:	a906      	add	r1, sp, #24
 8020be4:	f7f8 fe90 	bl	8019908 <GUI__IntersectRect>
 8020be8:	4640      	mov	r0, r8
 8020bea:	f7f2 f8f1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020bee:	f8d7 9000 	ldr.w	r9, [r7]
 8020bf2:	f10d 080c 	add.w	r8, sp, #12
 8020bf6:	f1b9 0f00 	cmp.w	r9, #0
 8020bfa:	d126      	bne.n	8020c4a <WM__InitIVRSearch+0xf6>
 8020bfc:	6823      	ldr	r3, [r4, #0]
 8020bfe:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8020c00:	e008      	b.n	8020c14 <WM__InitIVRSearch+0xc0>
 8020c02:	f7f8 fe81 	bl	8019908 <GUI__IntersectRect>
 8020c06:	9b03      	ldr	r3, [sp, #12]
 8020c08:	4640      	mov	r0, r8
 8020c0a:	699c      	ldr	r4, [r3, #24]
 8020c0c:	b38c      	cbz	r4, 8020c72 <WM__InitIVRSearch+0x11e>
 8020c0e:	4627      	mov	r7, r4
 8020c10:	f7f2 f8de 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020c14:	4638      	mov	r0, r7
 8020c16:	f7f2 f8c7 	bl	8012da8 <GUI_ALLOC_LockH>
 8020c1a:	4603      	mov	r3, r0
 8020c1c:	4630      	mov	r0, r6
 8020c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020c20:	4619      	mov	r1, r3
 8020c22:	9303      	str	r3, [sp, #12]
 8020c24:	0793      	lsls	r3, r2, #30
 8020c26:	d4ec      	bmi.n	8020c02 <WM__InitIVRSearch+0xae>
 8020c28:	4640      	mov	r0, r8
 8020c2a:	f7f2 f8d1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020c2e:	6a2b      	ldr	r3, [r5, #32]
 8020c30:	2000      	movs	r0, #0
 8020c32:	3b01      	subs	r3, #1
 8020c34:	622b      	str	r3, [r5, #32]
 8020c36:	e79c      	b.n	8020b72 <WM__InitIVRSearch+0x1e>
 8020c38:	f7f8 fe66 	bl	8019908 <GUI__IntersectRect>
 8020c3c:	9b03      	ldr	r3, [sp, #12]
 8020c3e:	4640      	mov	r0, r8
 8020c40:	699f      	ldr	r7, [r3, #24]
 8020c42:	b387      	cbz	r7, 8020ca6 <WM__InitIVRSearch+0x152>
 8020c44:	46b9      	mov	r9, r7
 8020c46:	f7f2 f8c3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020c4a:	4648      	mov	r0, r9
 8020c4c:	f7f2 f8ac 	bl	8012da8 <GUI_ALLOC_LockH>
 8020c50:	4603      	mov	r3, r0
 8020c52:	4630      	mov	r0, r6
 8020c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020c56:	4619      	mov	r1, r3
 8020c58:	9303      	str	r3, [sp, #12]
 8020c5a:	0792      	lsls	r2, r2, #30
 8020c5c:	d5e4      	bpl.n	8020c28 <WM__InitIVRSearch+0xd4>
 8020c5e:	e7eb      	b.n	8020c38 <WM__InitIVRSearch+0xe4>
 8020c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020c62:	f013 0602 	ands.w	r6, r3, #2
 8020c66:	d028      	beq.n	8020cba <WM__InitIVRSearch+0x166>
 8020c68:	ae04      	add	r6, sp, #16
 8020c6a:	c803      	ldmia	r0, {r0, r1}
 8020c6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8020c70:	e799      	b.n	8020ba6 <WM__InitIVRSearch+0x52>
 8020c72:	f7f2 f8ad 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020c76:	4b1b      	ldr	r3, [pc, #108]	; (8020ce4 <WM__InitIVRSearch+0x190>)
 8020c78:	681a      	ldr	r2, [r3, #0]
 8020c7a:	4297      	cmp	r7, r2
 8020c7c:	d002      	beq.n	8020c84 <WM__InitIVRSearch+0x130>
 8020c7e:	685b      	ldr	r3, [r3, #4]
 8020c80:	429f      	cmp	r7, r3
 8020c82:	d1d4      	bne.n	8020c2e <WM__InitIVRSearch+0xda>
 8020c84:	4b18      	ldr	r3, [pc, #96]	; (8020ce8 <WM__InitIVRSearch+0x194>)
 8020c86:	e896 0003 	ldmia.w	r6, {r0, r1}
 8020c8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8020c8e:	f7ff fe37 	bl	8020900 <WM__GetNextIVR>
 8020c92:	e76e      	b.n	8020b72 <WM__InitIVRSearch+0x1e>
 8020c94:	4640      	mov	r0, r8
 8020c96:	f7f2 f89b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020c9a:	6838      	ldr	r0, [r7, #0]
 8020c9c:	f7f2 f884 	bl	8012da8 <GUI_ALLOC_LockH>
 8020ca0:	4603      	mov	r3, r0
 8020ca2:	9002      	str	r0, [sp, #8]
 8020ca4:	e795      	b.n	8020bd2 <WM__InitIVRSearch+0x7e>
 8020ca6:	f7f2 f893 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020caa:	4b0e      	ldr	r3, [pc, #56]	; (8020ce4 <WM__InitIVRSearch+0x190>)
 8020cac:	681a      	ldr	r2, [r3, #0]
 8020cae:	4591      	cmp	r9, r2
 8020cb0:	d0a4      	beq.n	8020bfc <WM__InitIVRSearch+0xa8>
 8020cb2:	685b      	ldr	r3, [r3, #4]
 8020cb4:	4599      	cmp	r9, r3
 8020cb6:	d0a1      	beq.n	8020bfc <WM__InitIVRSearch+0xa8>
 8020cb8:	e7b9      	b.n	8020c2e <WM__InitIVRSearch+0xda>
 8020cba:	6a2b      	ldr	r3, [r5, #32]
 8020cbc:	a801      	add	r0, sp, #4
 8020cbe:	3b01      	subs	r3, #1
 8020cc0:	622b      	str	r3, [r5, #32]
 8020cc2:	f7f2 f885 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020cc6:	4630      	mov	r0, r6
 8020cc8:	e753      	b.n	8020b72 <WM__InitIVRSearch+0x1e>
 8020cca:	a801      	add	r0, sp, #4
 8020ccc:	f7f2 f880 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020cd0:	e78d      	b.n	8020bee <WM__InitIVRSearch+0x9a>
 8020cd2:	bf00      	nop
 8020cd4:	20000018 	.word	0x20000018
 8020cd8:	200003e4 	.word	0x200003e4
 8020cdc:	20046828 	.word	0x20046828
 8020ce0:	200467f8 	.word	0x200467f8
 8020ce4:	200467fc 	.word	0x200467fc
 8020ce8:	200003f0 	.word	0x200003f0

08020cec <WM__Paint1>:
 8020cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020cf0:	b089      	sub	sp, #36	; 0x24
 8020cf2:	4606      	mov	r6, r0
 8020cf4:	f7f2 f858 	bl	8012da8 <GUI_ALLOC_LockH>
 8020cf8:	f100 0308 	add.w	r3, r0, #8
 8020cfc:	6907      	ldr	r7, [r0, #16]
 8020cfe:	ac02      	add	r4, sp, #8
 8020d00:	9001      	str	r0, [sp, #4]
 8020d02:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8020d04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020d08:	e884 0003 	stmia.w	r4, {r0, r1}
 8020d0c:	a801      	add	r0, sp, #4
 8020d0e:	f7f2 f85f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020d12:	b10f      	cbz	r7, 8020d18 <WM__Paint1+0x2c>
 8020d14:	07ab      	lsls	r3, r5, #30
 8020d16:	d402      	bmi.n	8020d1e <WM__Paint1+0x32>
 8020d18:	b009      	add	sp, #36	; 0x24
 8020d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d1e:	4f1f      	ldr	r7, [pc, #124]	; (8020d9c <WM__Paint1+0xb0>)
 8020d20:	212e      	movs	r1, #46	; 0x2e
 8020d22:	4630      	mov	r0, r6
 8020d24:	f000 fc26 	bl	8021574 <WM_SendMessageNoPara>
 8020d28:	783b      	ldrb	r3, [r7, #0]
 8020d2a:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 8020d2e:	f103 0301 	add.w	r3, r3, #1
 8020d32:	703b      	strb	r3, [r7, #0]
 8020d34:	d119      	bne.n	8020d6a <WM__Paint1+0x7e>
 8020d36:	4620      	mov	r0, r4
 8020d38:	f7ff ff0c 	bl	8020b54 <WM__InitIVRSearch>
 8020d3c:	b318      	cbz	r0, 8020d86 <WM__Paint1+0x9a>
 8020d3e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8020da0 <WM__Paint1+0xb4>
 8020d42:	f04f 080f 	mov.w	r8, #15
 8020d46:	9605      	str	r6, [sp, #20]
 8020d48:	f8cd 8010 	str.w	r8, [sp, #16]
 8020d4c:	9407      	str	r4, [sp, #28]
 8020d4e:	f7f3 f987 	bl	8014060 <GL_SetDefault>
 8020d52:	f8d9 3000 	ldr.w	r3, [r9]
 8020d56:	a904      	add	r1, sp, #16
 8020d58:	4630      	mov	r0, r6
 8020d5a:	645d      	str	r5, [r3, #68]	; 0x44
 8020d5c:	f001 f968 	bl	8022030 <WM__SendMessage>
 8020d60:	f7ff fdce 	bl	8020900 <WM__GetNextIVR>
 8020d64:	2800      	cmp	r0, #0
 8020d66:	d1ee      	bne.n	8020d46 <WM__Paint1+0x5a>
 8020d68:	e00d      	b.n	8020d86 <WM__Paint1+0x9a>
 8020d6a:	230f      	movs	r3, #15
 8020d6c:	9605      	str	r6, [sp, #20]
 8020d6e:	9407      	str	r4, [sp, #28]
 8020d70:	9304      	str	r3, [sp, #16]
 8020d72:	f7f3 f975 	bl	8014060 <GL_SetDefault>
 8020d76:	4b0a      	ldr	r3, [pc, #40]	; (8020da0 <WM__Paint1+0xb4>)
 8020d78:	2200      	movs	r2, #0
 8020d7a:	a904      	add	r1, sp, #16
 8020d7c:	4630      	mov	r0, r6
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	645a      	str	r2, [r3, #68]	; 0x44
 8020d82:	f001 f955 	bl	8022030 <WM__SendMessage>
 8020d86:	783b      	ldrb	r3, [r7, #0]
 8020d88:	4630      	mov	r0, r6
 8020d8a:	212f      	movs	r1, #47	; 0x2f
 8020d8c:	3b01      	subs	r3, #1
 8020d8e:	703b      	strb	r3, [r7, #0]
 8020d90:	f000 fbf0 	bl	8021574 <WM_SendMessageNoPara>
 8020d94:	b009      	add	sp, #36	; 0x24
 8020d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d9a:	bf00      	nop
 8020d9c:	20046828 	.word	0x20046828
 8020da0:	20000018 	.word	0x20000018

08020da4 <WM_Exec>:
 8020da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da8:	b0ab      	sub	sp, #172	; 0xac
 8020daa:	f7f7 fbfb 	bl	80185a4 <GUI_Lock>
 8020dae:	4b99      	ldr	r3, [pc, #612]	; (8021014 <WM_Exec+0x270>)
 8020db0:	681b      	ldr	r3, [r3, #0]
 8020db2:	b103      	cbz	r3, 8020db6 <WM_Exec+0x12>
 8020db4:	4798      	blx	r3
 8020db6:	2300      	movs	r3, #0
 8020db8:	461c      	mov	r4, r3
 8020dba:	e000      	b.n	8020dbe <WM_Exec+0x1a>
 8020dbc:	2401      	movs	r4, #1
 8020dbe:	f7ff fb79 	bl	80204b4 <_Exec1Input>
 8020dc2:	2800      	cmp	r0, #0
 8020dc4:	d1fa      	bne.n	8020dbc <WM_Exec+0x18>
 8020dc6:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8021024 <WM_Exec+0x280>
 8020dca:	9406      	str	r4, [sp, #24]
 8020dcc:	f8da 3000 	ldr.w	r3, [sl]
 8020dd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8020dd4:	b123      	cbz	r3, 8020de0 <WM_Exec+0x3c>
 8020dd6:	4b90      	ldr	r3, [pc, #576]	; (8021018 <WM_Exec+0x274>)
 8020dd8:	881b      	ldrh	r3, [r3, #0]
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	f040 8096 	bne.w	8020f0c <WM_Exec+0x168>
 8020de0:	9307      	str	r3, [sp, #28]
 8020de2:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8021030 <WM_Exec+0x28c>
 8020de6:	f7f7 fbd3 	bl	8018590 <GUI_Unlock>
 8020dea:	e020      	b.n	8020e2e <WM_Exec+0x8a>
 8020dec:	4618      	mov	r0, r3
 8020dee:	9305      	str	r3, [sp, #20]
 8020df0:	4b8a      	ldr	r3, [pc, #552]	; (802101c <WM_Exec+0x278>)
 8020df2:	681e      	ldr	r6, [r3, #0]
 8020df4:	f7f3 f8fa 	bl	8013fec <GUI_SaveContext_W>
 8020df8:	6823      	ldr	r3, [r4, #0]
 8020dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020dfe:	9203      	str	r2, [sp, #12]
 8020e00:	9304      	str	r3, [sp, #16]
 8020e02:	2e00      	cmp	r6, #0
 8020e04:	d132      	bne.n	8020e6c <WM_Exec+0xc8>
 8020e06:	4b86      	ldr	r3, [pc, #536]	; (8021020 <WM_Exec+0x27c>)
 8020e08:	9803      	ldr	r0, [sp, #12]
 8020e0a:	609e      	str	r6, [r3, #8]
 8020e0c:	f7f3 f91c 	bl	8014048 <GUI_SetColor>
 8020e10:	9804      	ldr	r0, [sp, #16]
 8020e12:	f7f3 f90d 	bl	8014030 <GUI_SetBkColor>
 8020e16:	9805      	ldr	r0, [sp, #20]
 8020e18:	f7f3 f8f2 	bl	8014000 <GUI_RestoreContext>
 8020e1c:	f7f7 fbb8 	bl	8018590 <GUI_Unlock>
 8020e20:	f8b8 3000 	ldrh.w	r3, [r8]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	f000 80d0 	beq.w	8020fca <WM_Exec+0x226>
 8020e2a:	2301      	movs	r3, #1
 8020e2c:	9306      	str	r3, [sp, #24]
 8020e2e:	f8da 3000 	ldr.w	r3, [sl]
 8020e32:	4c7c      	ldr	r4, [pc, #496]	; (8021024 <WM_Exec+0x280>)
 8020e34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	f000 80c6 	beq.w	8020fca <WM_Exec+0x226>
 8020e3e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8021018 <WM_Exec+0x274>
 8020e42:	f8b8 3000 	ldrh.w	r3, [r8]
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	f000 80bf 	beq.w	8020fca <WM_Exec+0x226>
 8020e4c:	f7f7 fbaa 	bl	80185a4 <GUI_Lock>
 8020e50:	4b73      	ldr	r3, [pc, #460]	; (8021020 <WM_Exec+0x27c>)
 8020e52:	689e      	ldr	r6, [r3, #8]
 8020e54:	ab0d      	add	r3, sp, #52	; 0x34
 8020e56:	2e00      	cmp	r6, #0
 8020e58:	d0c8      	beq.n	8020dec <WM_Exec+0x48>
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	9305      	str	r3, [sp, #20]
 8020e5e:	f7f3 f8c5 	bl	8013fec <GUI_SaveContext_W>
 8020e62:	6823      	ldr	r3, [r4, #0]
 8020e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020e68:	9203      	str	r2, [sp, #12]
 8020e6a:	9304      	str	r3, [sp, #16]
 8020e6c:	ad0b      	add	r5, sp, #44	; 0x2c
 8020e6e:	4630      	mov	r0, r6
 8020e70:	9608      	str	r6, [sp, #32]
 8020e72:	f7f1 ff99 	bl	8012da8 <GUI_ALLOC_LockH>
 8020e76:	f100 0308 	add.w	r3, r0, #8
 8020e7a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020e7c:	9009      	str	r0, [sp, #36]	; 0x24
 8020e7e:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8020e82:	4617      	mov	r7, r2
 8020e84:	6904      	ldr	r4, [r0, #16]
 8020e86:	9202      	str	r2, [sp, #8]
 8020e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8020e90:	a809      	add	r0, sp, #36	; 0x24
 8020e92:	f7f1 ff9d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020e96:	f244 0320 	movw	r3, #16416	; 0x4020
 8020e9a:	403b      	ands	r3, r7
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d03e      	beq.n	8020f1e <WM_Exec+0x17a>
 8020ea0:	b1d4      	cbz	r4, 8020ed8 <WM_Exec+0x134>
 8020ea2:	9c08      	ldr	r4, [sp, #32]
 8020ea4:	e009      	b.n	8020eba <WM_Exec+0x116>
 8020ea6:	f7f8 fd2f 	bl	8019908 <GUI__IntersectRect>
 8020eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eac:	a80a      	add	r0, sp, #40	; 0x28
 8020eae:	699f      	ldr	r7, [r3, #24]
 8020eb0:	2f00      	cmp	r7, #0
 8020eb2:	d03b      	beq.n	8020f2c <WM_Exec+0x188>
 8020eb4:	463c      	mov	r4, r7
 8020eb6:	f7f1 ff8b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020eba:	4620      	mov	r0, r4
 8020ebc:	f7f1 ff74 	bl	8012da8 <GUI_ALLOC_LockH>
 8020ec0:	4602      	mov	r2, r0
 8020ec2:	4628      	mov	r0, r5
 8020ec4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8020ec6:	4611      	mov	r1, r2
 8020ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8020eca:	f013 0302 	ands.w	r3, r3, #2
 8020ece:	d1ea      	bne.n	8020ea6 <WM_Exec+0x102>
 8020ed0:	a80a      	add	r0, sp, #40	; 0x28
 8020ed2:	461c      	mov	r4, r3
 8020ed4:	f7f1 ff7c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020ed8:	9808      	ldr	r0, [sp, #32]
 8020eda:	f7f1 ff65 	bl	8012da8 <GUI_ALLOC_LockH>
 8020ede:	4b52      	ldr	r3, [pc, #328]	; (8021028 <WM_Exec+0x284>)
 8020ee0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8020ee2:	9009      	str	r0, [sp, #36]	; 0x24
 8020ee4:	4013      	ands	r3, r2
 8020ee6:	0492      	lsls	r2, r2, #18
 8020ee8:	bf48      	it	mi
 8020eea:	f043 0304 	orrmi.w	r3, r3, #4
 8020eee:	6283      	str	r3, [r0, #40]	; 0x28
 8020ef0:	a809      	add	r0, sp, #36	; 0x24
 8020ef2:	f7f1 ff6d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020ef6:	f8b8 3000 	ldrh.w	r3, [r8]
 8020efa:	3b01      	subs	r3, #1
 8020efc:	f8a8 3000 	strh.w	r3, [r8]
 8020f00:	b16c      	cbz	r4, 8020f1e <WM_Exec+0x17a>
 8020f02:	4630      	mov	r0, r6
 8020f04:	f7f1 ff46 	bl	8012d94 <GUI_ALLOC_h2p>
 8020f08:	6946      	ldr	r6, [r0, #20]
 8020f0a:	e77c      	b.n	8020e06 <WM_Exec+0x62>
 8020f0c:	4b47      	ldr	r3, [pc, #284]	; (802102c <WM_Exec+0x288>)
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d07a      	beq.n	802100a <WM_Exec+0x266>
 8020f14:	2201      	movs	r2, #1
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	9207      	str	r2, [sp, #28]
 8020f1a:	4798      	blx	r3
 8020f1c:	e761      	b.n	8020de2 <WM_Exec+0x3e>
 8020f1e:	4630      	mov	r0, r6
 8020f20:	f7f1 ff38 	bl	8012d94 <GUI_ALLOC_h2p>
 8020f24:	6946      	ldr	r6, [r0, #20]
 8020f26:	2e00      	cmp	r6, #0
 8020f28:	d1a1      	bne.n	8020e6e <WM_Exec+0xca>
 8020f2a:	e76c      	b.n	8020e06 <WM_Exec+0x62>
 8020f2c:	f7f1 ff50 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8020f30:	f8db 2000 	ldr.w	r2, [fp]
 8020f34:	42a2      	cmp	r2, r4
 8020f36:	d005      	beq.n	8020f44 <WM_Exec+0x1a0>
 8020f38:	4b3d      	ldr	r3, [pc, #244]	; (8021030 <WM_Exec+0x28c>)
 8020f3a:	685a      	ldr	r2, [r3, #4]
 8020f3c:	4294      	cmp	r4, r2
 8020f3e:	d001      	beq.n	8020f44 <WM_Exec+0x1a0>
 8020f40:	463c      	mov	r4, r7
 8020f42:	e7c9      	b.n	8020ed8 <WM_Exec+0x134>
 8020f44:	9c08      	ldr	r4, [sp, #32]
 8020f46:	f7f7 fb2d 	bl	80185a4 <GUI_Lock>
 8020f4a:	f8da 3000 	ldr.w	r3, [sl]
 8020f4e:	b90c      	cbnz	r4, 8020f54 <WM_Exec+0x1b0>
 8020f50:	4a32      	ldr	r2, [pc, #200]	; (802101c <WM_Exec+0x278>)
 8020f52:	6814      	ldr	r4, [r2, #0]
 8020f54:	649c      	str	r4, [r3, #72]	; 0x48
 8020f56:	4627      	mov	r7, r4
 8020f58:	e000      	b.n	8020f5c <WM_Exec+0x1b8>
 8020f5a:	461f      	mov	r7, r3
 8020f5c:	4638      	mov	r0, r7
 8020f5e:	f7f1 ff19 	bl	8012d94 <GUI_ALLOC_h2p>
 8020f62:	6983      	ldr	r3, [r0, #24]
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d1f8      	bne.n	8020f5a <WM_Exec+0x1b6>
 8020f68:	f8db 1000 	ldr.w	r1, [fp]
 8020f6c:	428f      	cmp	r7, r1
 8020f6e:	d042      	beq.n	8020ff6 <WM_Exec+0x252>
 8020f70:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020f74:	429f      	cmp	r7, r3
 8020f76:	d03a      	beq.n	8020fee <WM_Exec+0x24a>
 8020f78:	f7f9 fb76 	bl	801a668 <LCD_SetClipRectMax>
 8020f7c:	4620      	mov	r0, r4
 8020f7e:	f7f1 ff09 	bl	8012d94 <GUI_ALLOC_h2p>
 8020f82:	f8da 3000 	ldr.w	r3, [sl]
 8020f86:	f9b0 1000 	ldrsh.w	r1, [r0]
 8020f8a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020f8e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8020f90:	651a      	str	r2, [r3, #80]	; 0x50
 8020f92:	f7f7 fafd 	bl	8018590 <GUI_Unlock>
 8020f96:	9a02      	ldr	r2, [sp, #8]
 8020f98:	0751      	lsls	r1, r2, #29
 8020f9a:	d511      	bpl.n	8020fc0 <WM_Exec+0x21c>
 8020f9c:	f1b9 0f00 	cmp.w	r9, #0
 8020fa0:	d00c      	beq.n	8020fbc <WM_Exec+0x218>
 8020fa2:	f002 0301 	and.w	r3, r2, #1
 8020fa6:	f083 0301 	eor.w	r3, r3, #1
 8020faa:	9300      	str	r3, [sp, #0]
 8020fac:	2300      	movs	r3, #0
 8020fae:	aa08      	add	r2, sp, #32
 8020fb0:	4920      	ldr	r1, [pc, #128]	; (8021034 <WM_Exec+0x290>)
 8020fb2:	4628      	mov	r0, r5
 8020fb4:	461c      	mov	r4, r3
 8020fb6:	f7fd f881 	bl	801e0bc <GUI_MEMDEV_Draw>
 8020fba:	e78d      	b.n	8020ed8 <WM_Exec+0x134>
 8020fbc:	2301      	movs	r3, #1
 8020fbe:	e7f4      	b.n	8020faa <WM_Exec+0x206>
 8020fc0:	9808      	ldr	r0, [sp, #32]
 8020fc2:	2401      	movs	r4, #1
 8020fc4:	f7fe fb10 	bl	801f5e8 <WM__PaintWinAndOverlays>
 8020fc8:	e786      	b.n	8020ed8 <WM_Exec+0x134>
 8020fca:	f7f7 faeb 	bl	80185a4 <GUI_Lock>
 8020fce:	9b07      	ldr	r3, [sp, #28]
 8020fd0:	b13b      	cbz	r3, 8020fe2 <WM_Exec+0x23e>
 8020fd2:	4b16      	ldr	r3, [pc, #88]	; (802102c <WM_Exec+0x288>)
 8020fd4:	6818      	ldr	r0, [r3, #0]
 8020fd6:	b180      	cbz	r0, 8020ffa <WM_Exec+0x256>
 8020fd8:	6843      	ldr	r3, [r0, #4]
 8020fda:	4798      	blx	r3
 8020fdc:	4b16      	ldr	r3, [pc, #88]	; (8021038 <WM_Exec+0x294>)
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	f7f7 fad5 	bl	8018590 <GUI_Unlock>
 8020fe6:	9806      	ldr	r0, [sp, #24]
 8020fe8:	b02b      	add	sp, #172	; 0xac
 8020fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fee:	2001      	movs	r0, #1
 8020ff0:	f7f6 f8cc 	bl	801718c <GUI_SelectLayer>
 8020ff4:	e7c0      	b.n	8020f78 <WM_Exec+0x1d4>
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	e7fa      	b.n	8020ff0 <WM_Exec+0x24c>
 8020ffa:	f002 fdab 	bl	8023b54 <GUI__ManageCache>
 8020ffe:	f7f7 fac7 	bl	8018590 <GUI_Unlock>
 8021002:	9806      	ldr	r0, [sp, #24]
 8021004:	b02b      	add	sp, #172	; 0xac
 8021006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802100a:	2001      	movs	r0, #1
 802100c:	9007      	str	r0, [sp, #28]
 802100e:	f002 fda1 	bl	8023b54 <GUI__ManageCache>
 8021012:	e6e6      	b.n	8020de2 <WM_Exec+0x3e>
 8021014:	20046808 	.word	0x20046808
 8021018:	20046814 	.word	0x20046814
 802101c:	20046818 	.word	0x20046818
 8021020:	200003e4 	.word	0x200003e4
 8021024:	20000018 	.word	0x20000018
 8021028:	ffffbfdf 	.word	0xffffbfdf
 802102c:	2004683c 	.word	0x2004683c
 8021030:	200467fc 	.word	0x200467fc
 8021034:	0801f689 	.word	0x0801f689
 8021038:	20046824 	.word	0x20046824

0802103c <WM_Activate>:
 802103c:	4b02      	ldr	r3, [pc, #8]	; (8021048 <WM_Activate+0xc>)
 802103e:	2201      	movs	r2, #1
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8021046:	4770      	bx	lr
 8021048:	20000018 	.word	0x20000018

0802104c <WM_Deactivate>:
 802104c:	b508      	push	{r3, lr}
 802104e:	4b06      	ldr	r3, [pc, #24]	; (8021068 <WM_Deactivate+0x1c>)
 8021050:	2200      	movs	r2, #0
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8021058:	f7f7 faa4 	bl	80185a4 <GUI_Lock>
 802105c:	f7f9 fb04 	bl	801a668 <LCD_SetClipRectMax>
 8021060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021064:	f7f7 ba94 	b.w	8018590 <GUI_Unlock>
 8021068:	20000018 	.word	0x20000018

0802106c <WM_DefaultProc>:
 802106c:	6803      	ldr	r3, [r0, #0]
 802106e:	3b0e      	subs	r3, #14
 8021070:	b510      	push	{r4, lr}
 8021072:	4604      	mov	r4, r0
 8021074:	6840      	ldr	r0, [r0, #4]
 8021076:	2b1a      	cmp	r3, #26
 8021078:	d812      	bhi.n	80210a0 <WM_DefaultProc+0x34>
 802107a:	e8df f003 	tbb	[pc, r3]
 802107e:	111b      	.short	0x111b
 8021080:	11111111 	.word	0x11111111
 8021084:	2011110e 	.word	0x2011110e
 8021088:	11111111 	.word	0x11111111
 802108c:	11111111 	.word	0x11111111
 8021090:	11221111 	.word	0x11221111
 8021094:	11111111 	.word	0x11111111
 8021098:	14          	.byte	0x14
 8021099:	00          	.byte	0x00
 802109a:	68e1      	ldr	r1, [r4, #12]
 802109c:	f001 f8d6 	bl	802224c <WM__GetClientRectEx>
 80210a0:	2300      	movs	r3, #0
 80210a2:	60e3      	str	r3, [r4, #12]
 80210a4:	bd10      	pop	{r4, pc}
 80210a6:	2800      	cmp	r0, #0
 80210a8:	d0fc      	beq.n	80210a4 <WM_DefaultProc+0x38>
 80210aa:	2100      	movs	r1, #0
 80210ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210b0:	f7ff b818 	b.w	80200e4 <WM_InvalidateRect.part.2>
 80210b4:	4621      	mov	r1, r4
 80210b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210ba:	f000 ba69 	b.w	8021590 <WM_SendToParent>
 80210be:	60e0      	str	r0, [r4, #12]
 80210c0:	bd10      	pop	{r4, pc}
 80210c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80210c6:	60e3      	str	r3, [r4, #12]
 80210c8:	bd10      	pop	{r4, pc}
 80210ca:	bf00      	nop

080210cc <WM_Init>:
 80210cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d0:	4d45      	ldr	r5, [pc, #276]	; (80211e8 <WM_Init+0x11c>)
 80210d2:	b085      	sub	sp, #20
 80210d4:	782b      	ldrb	r3, [r5, #0]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d17a      	bne.n	80211d0 <WM_Init+0x104>
 80210da:	4f44      	ldr	r7, [pc, #272]	; (80211ec <WM_Init+0x120>)
 80210dc:	461c      	mov	r4, r3
 80210de:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8021220 <WM_Init+0x154>
 80210e2:	469a      	mov	sl, r3
 80210e4:	6838      	ldr	r0, [r7, #0]
 80210e6:	4942      	ldr	r1, [pc, #264]	; (80211f0 <WM_Init+0x124>)
 80210e8:	4a42      	ldr	r2, [pc, #264]	; (80211f4 <WM_Init+0x128>)
 80210ea:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8021214 <WM_Init+0x148>
 80210ee:	4e42      	ldr	r6, [pc, #264]	; (80211f8 <WM_Init+0x12c>)
 80210f0:	f8df b130 	ldr.w	fp, [pc, #304]	; 8021224 <WM_Init+0x158>
 80210f4:	60ab      	str	r3, [r5, #8]
 80210f6:	6443      	str	r3, [r0, #68]	; 0x44
 80210f8:	f8c9 3000 	str.w	r3, [r9]
 80210fc:	800b      	strh	r3, [r1, #0]
 80210fe:	8013      	strh	r3, [r2, #0]
 8021100:	4620      	mov	r0, r4
 8021102:	f7f3 fa57 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8021106:	f643 73ff 	movw	r3, #16383	; 0x3fff
 802110a:	2100      	movs	r1, #0
 802110c:	f04f 0c02 	mov.w	ip, #2
 8021110:	f04f 3eff 	mov.w	lr, #4294967295
 8021114:	461a      	mov	r2, r3
 8021116:	b188      	cbz	r0, 802113c <WM_Init+0x70>
 8021118:	f8cd a00c 	str.w	sl, [sp, #12]
 802111c:	4608      	mov	r0, r1
 802111e:	9602      	str	r6, [sp, #8]
 8021120:	f8cd c004 	str.w	ip, [sp, #4]
 8021124:	f8cd e000 	str.w	lr, [sp]
 8021128:	f7ff fafe 	bl	8020728 <WM_CreateWindowAsChild>
 802112c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8021130:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 8021134:	f84b 2024 	str.w	r2, [fp, r4, lsl #2]
 8021138:	2800      	cmp	r0, #0
 802113a:	d150      	bne.n	80211de <WM_Init+0x112>
 802113c:	3401      	adds	r4, #1
 802113e:	2c02      	cmp	r4, #2
 8021140:	d1de      	bne.n	8021100 <WM_Init+0x34>
 8021142:	482e      	ldr	r0, [pc, #184]	; (80211fc <WM_Init+0x130>)
 8021144:	f001 f85c 	bl	8022200 <WM__AddCriticalHandle>
 8021148:	482d      	ldr	r0, [pc, #180]	; (8021200 <WM_Init+0x134>)
 802114a:	f001 f859 	bl	8022200 <WM__AddCriticalHandle>
 802114e:	482d      	ldr	r0, [pc, #180]	; (8021204 <WM_Init+0x138>)
 8021150:	f001 f856 	bl	8022200 <WM__AddCriticalHandle>
 8021154:	482c      	ldr	r0, [pc, #176]	; (8021208 <WM_Init+0x13c>)
 8021156:	f001 f853 	bl	8022200 <WM__AddCriticalHandle>
 802115a:	482c      	ldr	r0, [pc, #176]	; (802120c <WM_Init+0x140>)
 802115c:	f001 f850 	bl	8022200 <WM__AddCriticalHandle>
 8021160:	482b      	ldr	r0, [pc, #172]	; (8021210 <WM_Init+0x144>)
 8021162:	f001 f84d 	bl	8022200 <WM__AddCriticalHandle>
 8021166:	f8d8 6000 	ldr.w	r6, [r8]
 802116a:	f7f7 fa1b 	bl	80185a4 <GUI_Lock>
 802116e:	683b      	ldr	r3, [r7, #0]
 8021170:	b90e      	cbnz	r6, 8021176 <WM_Init+0xaa>
 8021172:	f8d9 6000 	ldr.w	r6, [r9]
 8021176:	649e      	str	r6, [r3, #72]	; 0x48
 8021178:	4634      	mov	r4, r6
 802117a:	e000      	b.n	802117e <WM_Init+0xb2>
 802117c:	4604      	mov	r4, r0
 802117e:	4620      	mov	r0, r4
 8021180:	f7f1 fe08 	bl	8012d94 <GUI_ALLOC_h2p>
 8021184:	6980      	ldr	r0, [r0, #24]
 8021186:	2800      	cmp	r0, #0
 8021188:	d1f8      	bne.n	802117c <WM_Init+0xb0>
 802118a:	f8d8 3000 	ldr.w	r3, [r8]
 802118e:	4a21      	ldr	r2, [pc, #132]	; (8021214 <WM_Init+0x148>)
 8021190:	429c      	cmp	r4, r3
 8021192:	d021      	beq.n	80211d8 <WM_Init+0x10c>
 8021194:	6853      	ldr	r3, [r2, #4]
 8021196:	429c      	cmp	r4, r3
 8021198:	d01d      	beq.n	80211d6 <WM_Init+0x10a>
 802119a:	f7f9 fa65 	bl	801a668 <LCD_SetClipRectMax>
 802119e:	4630      	mov	r0, r6
 80211a0:	f7f1 fdf8 	bl	8012d94 <GUI_ALLOC_h2p>
 80211a4:	683b      	ldr	r3, [r7, #0]
 80211a6:	f9b0 1000 	ldrsh.w	r1, [r0]
 80211aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80211ae:	64d9      	str	r1, [r3, #76]	; 0x4c
 80211b0:	651a      	str	r2, [r3, #80]	; 0x50
 80211b2:	f7f7 f9ed 	bl	8018590 <GUI_Unlock>
 80211b6:	2301      	movs	r3, #1
 80211b8:	6839      	ldr	r1, [r7, #0]
 80211ba:	4a17      	ldr	r2, [pc, #92]	; (8021218 <WM_Init+0x14c>)
 80211bc:	4817      	ldr	r0, [pc, #92]	; (802121c <WM_Init+0x150>)
 80211be:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 80211c2:	702b      	strb	r3, [r5, #0]
 80211c4:	626a      	str	r2, [r5, #36]	; 0x24
 80211c6:	b005      	add	sp, #20
 80211c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211cc:	f7f3 b9b4 	b.w	8014538 <GUI__RegisterExit>
 80211d0:	b005      	add	sp, #20
 80211d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211d6:	2001      	movs	r0, #1
 80211d8:	f7f5 ffd8 	bl	801718c <GUI_SelectLayer>
 80211dc:	e7dd      	b.n	802119a <WM_Init+0xce>
 80211de:	2100      	movs	r1, #0
 80211e0:	f7fe ff80 	bl	80200e4 <WM_InvalidateRect.part.2>
 80211e4:	e7aa      	b.n	802113c <WM_Init+0x70>
 80211e6:	bf00      	nop
 80211e8:	200003e4 	.word	0x200003e4
 80211ec:	20000018 	.word	0x20000018
 80211f0:	20046814 	.word	0x20046814
 80211f4:	200467f4 	.word	0x200467f4
 80211f8:	080201c1 	.word	0x080201c1
 80211fc:	20046870 	.word	0x20046870
 8021200:	20046860 	.word	0x20046860
 8021204:	20046850 	.word	0x20046850
 8021208:	20046878 	.word	0x20046878
 802120c:	20046868 	.word	0x20046868
 8021210:	20046858 	.word	0x20046858
 8021214:	200467fc 	.word	0x200467fc
 8021218:	0801f079 	.word	0x0801f079
 802121c:	20000408 	.word	0x20000408
 8021220:	20046818 	.word	0x20046818
 8021224:	20046830 	.word	0x20046830

08021228 <WM_ResizeWindow.part.11>:
 8021228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802122c:	4606      	mov	r6, r0
 802122e:	b08a      	sub	sp, #40	; 0x28
 8021230:	4688      	mov	r8, r1
 8021232:	4617      	mov	r7, r2
 8021234:	f7f7 f9b6 	bl	80185a4 <GUI_Lock>
 8021238:	4630      	mov	r0, r6
 802123a:	f7f1 fdb5 	bl	8012da8 <GUI_ALLOC_LockH>
 802123e:	ac04      	add	r4, sp, #16
 8021240:	4603      	mov	r3, r0
 8021242:	ad06      	add	r5, sp, #24
 8021244:	9003      	str	r0, [sp, #12]
 8021246:	c803      	ldmia	r0, {r0, r1}
 8021248:	e884 0003 	stmia.w	r4, {r0, r1}
 802124c:	e885 0003 	stmia.w	r5, {r0, r1}
 8021250:	f1b8 0f00 	cmp.w	r8, #0
 8021254:	d009      	beq.n	802126a <WM_ResizeWindow.part.11+0x42>
 8021256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021258:	f402 7220 	and.w	r2, r2, #640	; 0x280
 802125c:	2a80      	cmp	r2, #128	; 0x80
 802125e:	d056      	beq.n	802130e <WM_ResizeWindow.part.11+0xe6>
 8021260:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8021264:	4490      	add	r8, r2
 8021266:	f8ad 801c 	strh.w	r8, [sp, #28]
 802126a:	b157      	cbz	r7, 8021282 <WM_ResizeWindow.part.11+0x5a>
 802126c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802126e:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8021272:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8021276:	d051      	beq.n	802131c <WM_ResizeWindow.part.11+0xf4>
 8021278:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802127c:	4417      	add	r7, r2
 802127e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8021282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021284:	03d1      	lsls	r1, r2, #15
 8021286:	d43c      	bmi.n	8021302 <WM_ResizeWindow.part.11+0xda>
 8021288:	0792      	lsls	r2, r2, #30
 802128a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802128e:	e883 0003 	stmia.w	r3, {r0, r1}
 8021292:	d50b      	bpl.n	80212ac <WM_ResizeWindow.part.11+0x84>
 8021294:	462a      	mov	r2, r5
 8021296:	4621      	mov	r1, r4
 8021298:	a808      	add	r0, sp, #32
 802129a:	f7f2 fd81 	bl	8013da0 <GUI_MergeRect>
 802129e:	9b03      	ldr	r3, [sp, #12]
 80212a0:	a808      	add	r0, sp, #32
 80212a2:	6a1a      	ldr	r2, [r3, #32]
 80212a4:	6999      	ldr	r1, [r3, #24]
 80212a6:	f7ff f9c3 	bl	8020630 <WM__InvalidateRectEx>
 80212aa:	9b03      	ldr	r3, [sp, #12]
 80212ac:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 80212b0:	4618      	mov	r0, r3
 80212b2:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 80212b6:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80212ba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80212be:	1b14      	subs	r4, r2, r4
 80212c0:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 80212c4:	1acb      	subs	r3, r1, r3
 80212c6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80212ca:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 80212ce:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80212d2:	1aba      	subs	r2, r7, r2
 80212d4:	9400      	str	r4, [sp, #0]
 80212d6:	ac0a      	add	r4, sp, #40	; 0x28
 80212d8:	1a69      	subs	r1, r5, r1
 80212da:	f000 feff 	bl	80220dc <WM__UpdateChildPositions>
 80212de:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 80212e2:	f101 0008 	add.w	r0, r1, #8
 80212e6:	f7f8 fb0f 	bl	8019908 <GUI__IntersectRect>
 80212ea:	2105      	movs	r1, #5
 80212ec:	4630      	mov	r0, r6
 80212ee:	f7ff fa01 	bl	80206f4 <WM__SendMsgNoData>
 80212f2:	4620      	mov	r0, r4
 80212f4:	f7f1 fd6c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80212f8:	f7f7 f94a 	bl	8018590 <GUI_Unlock>
 80212fc:	b00a      	add	sp, #40	; 0x28
 80212fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021302:	4630      	mov	r0, r6
 8021304:	f7fe fb7e 	bl	801fa04 <WM__InvalidateDrawAndDescs>
 8021308:	9b03      	ldr	r3, [sp, #12]
 802130a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802130c:	e7bc      	b.n	8021288 <WM_ResizeWindow.part.11+0x60>
 802130e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8021312:	ebc8 0802 	rsb	r8, r8, r2
 8021316:	f8ad 8018 	strh.w	r8, [sp, #24]
 802131a:	e7a6      	b.n	802126a <WM_ResizeWindow.part.11+0x42>
 802131c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021320:	1bd7      	subs	r7, r2, r7
 8021322:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021326:	e7ac      	b.n	8021282 <WM_ResizeWindow.part.11+0x5a>

08021328 <WM_GetClientRect>:
 8021328:	b538      	push	{r3, r4, r5, lr}
 802132a:	4605      	mov	r5, r0
 802132c:	f7f7 f93a 	bl	80185a4 <GUI_Lock>
 8021330:	4b08      	ldr	r3, [pc, #32]	; (8021354 <WM_GetClientRect+0x2c>)
 8021332:	681c      	ldr	r4, [r3, #0]
 8021334:	b914      	cbnz	r4, 802133c <WM_GetClientRect+0x14>
 8021336:	4b08      	ldr	r3, [pc, #32]	; (8021358 <WM_GetClientRect+0x30>)
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 802133c:	f7f7 f932 	bl	80185a4 <GUI_Lock>
 8021340:	4629      	mov	r1, r5
 8021342:	4620      	mov	r0, r4
 8021344:	f000 ff82 	bl	802224c <WM__GetClientRectEx>
 8021348:	f7f7 f922 	bl	8018590 <GUI_Unlock>
 802134c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021350:	f7f7 b91e 	b.w	8018590 <GUI_Unlock>
 8021354:	200467f8 	.word	0x200467f8
 8021358:	20000018 	.word	0x20000018

0802135c <WM_GetDesktopWindow>:
 802135c:	4a03      	ldr	r2, [pc, #12]	; (802136c <WM_GetDesktopWindow+0x10>)
 802135e:	4b04      	ldr	r3, [pc, #16]	; (8021370 <WM_GetDesktopWindow+0x14>)
 8021360:	6812      	ldr	r2, [r2, #0]
 8021362:	7c52      	ldrb	r2, [r2, #17]
 8021364:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021368:	4770      	bx	lr
 802136a:	bf00      	nop
 802136c:	20000018 	.word	0x20000018
 8021370:	200467fc 	.word	0x200467fc

08021374 <WM_GetDesktopWindowEx>:
 8021374:	2801      	cmp	r0, #1
 8021376:	d901      	bls.n	802137c <WM_GetDesktopWindowEx+0x8>
 8021378:	2000      	movs	r0, #0
 802137a:	4770      	bx	lr
 802137c:	4b01      	ldr	r3, [pc, #4]	; (8021384 <WM_GetDesktopWindowEx+0x10>)
 802137e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8021382:	4770      	bx	lr
 8021384:	200467fc 	.word	0x200467fc

08021388 <WM_BringToBottom>:
 8021388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802138c:	4604      	mov	r4, r0
 802138e:	b087      	sub	sp, #28
 8021390:	f7f7 f908 	bl	80185a4 <GUI_Lock>
 8021394:	b924      	cbnz	r4, 80213a0 <WM_BringToBottom+0x18>
 8021396:	f7f7 f8fb 	bl	8018590 <GUI_Unlock>
 802139a:	b007      	add	sp, #28
 802139c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80213a0:	4620      	mov	r0, r4
 80213a2:	ad04      	add	r5, sp, #16
 80213a4:	f7f1 fd00 	bl	8012da8 <GUI_ALLOC_LockH>
 80213a8:	9001      	str	r0, [sp, #4]
 80213aa:	6a07      	ldr	r7, [r0, #32]
 80213ac:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80213b0:	c803      	ldmia	r0, {r0, r1}
 80213b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80213b6:	a801      	add	r0, sp, #4
 80213b8:	f7f1 fd0a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80213bc:	4620      	mov	r0, r4
 80213be:	f000 fe01 	bl	8021fc4 <WM__GetPrevSibling>
 80213c2:	4606      	mov	r6, r0
 80213c4:	2800      	cmp	r0, #0
 80213c6:	d0e6      	beq.n	8021396 <WM_BringToBottom+0xe>
 80213c8:	f7f7 f8ec 	bl	80185a4 <GUI_Lock>
 80213cc:	4620      	mov	r0, r4
 80213ce:	f7f1 fce1 	bl	8012d94 <GUI_ALLOC_h2p>
 80213d2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80213d6:	f7f7 f8db 	bl	8018590 <GUI_Unlock>
 80213da:	f018 0f02 	tst.w	r8, #2
 80213de:	d120      	bne.n	8021422 <WM_BringToBottom+0x9a>
 80213e0:	4620      	mov	r0, r4
 80213e2:	f7f1 fce1 	bl	8012da8 <GUI_ALLOC_LockH>
 80213e6:	9001      	str	r0, [sp, #4]
 80213e8:	4648      	mov	r0, r9
 80213ea:	f7f1 fcdd 	bl	8012da8 <GUI_ALLOC_LockH>
 80213ee:	9003      	str	r0, [sp, #12]
 80213f0:	4630      	mov	r0, r6
 80213f2:	f7f1 fcd9 	bl	8012da8 <GUI_ALLOC_LockH>
 80213f6:	9a03      	ldr	r2, [sp, #12]
 80213f8:	4603      	mov	r3, r0
 80213fa:	9901      	ldr	r1, [sp, #4]
 80213fc:	69d5      	ldr	r5, [r2, #28]
 80213fe:	a801      	add	r0, sp, #4
 8021400:	621f      	str	r7, [r3, #32]
 8021402:	620d      	str	r5, [r1, #32]
 8021404:	61d4      	str	r4, [r2, #28]
 8021406:	9302      	str	r3, [sp, #8]
 8021408:	f7f1 fce2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802140c:	a803      	add	r0, sp, #12
 802140e:	f7f1 fcdf 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021412:	a802      	add	r0, sp, #8
 8021414:	f7f1 fcdc 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021418:	f7f7 f8ba 	bl	8018590 <GUI_Unlock>
 802141c:	b007      	add	sp, #28
 802141e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021422:	4628      	mov	r0, r5
 8021424:	463a      	mov	r2, r7
 8021426:	4649      	mov	r1, r9
 8021428:	f7ff f902 	bl	8020630 <WM__InvalidateRectEx>
 802142c:	e7d8      	b.n	80213e0 <WM_BringToBottom+0x58>
 802142e:	bf00      	nop

08021430 <WM_GetFirstChild>:
 8021430:	b510      	push	{r4, lr}
 8021432:	4604      	mov	r4, r0
 8021434:	b138      	cbz	r0, 8021446 <WM_GetFirstChild+0x16>
 8021436:	f7f7 f8b5 	bl	80185a4 <GUI_Lock>
 802143a:	4620      	mov	r0, r4
 802143c:	f7f1 fcaa 	bl	8012d94 <GUI_ALLOC_h2p>
 8021440:	69c4      	ldr	r4, [r0, #28]
 8021442:	f7f7 f8a5 	bl	8018590 <GUI_Unlock>
 8021446:	4620      	mov	r0, r4
 8021448:	bd10      	pop	{r4, pc}
 802144a:	bf00      	nop

0802144c <WM_GetWindowOrgX>:
 802144c:	b510      	push	{r4, lr}
 802144e:	4604      	mov	r4, r0
 8021450:	b140      	cbz	r0, 8021464 <WM_GetWindowOrgX+0x18>
 8021452:	f7f7 f8a7 	bl	80185a4 <GUI_Lock>
 8021456:	4620      	mov	r0, r4
 8021458:	f7f1 fc9c 	bl	8012d94 <GUI_ALLOC_h2p>
 802145c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8021460:	f7f7 f896 	bl	8018590 <GUI_Unlock>
 8021464:	4620      	mov	r0, r4
 8021466:	bd10      	pop	{r4, pc}

08021468 <WM_GetParent>:
 8021468:	b510      	push	{r4, lr}
 802146a:	4604      	mov	r4, r0
 802146c:	b138      	cbz	r0, 802147e <WM_GetParent+0x16>
 802146e:	f7f7 f899 	bl	80185a4 <GUI_Lock>
 8021472:	4620      	mov	r0, r4
 8021474:	f7f1 fc8e 	bl	8012d94 <GUI_ALLOC_h2p>
 8021478:	6984      	ldr	r4, [r0, #24]
 802147a:	f7f7 f889 	bl	8018590 <GUI_Unlock>
 802147e:	4620      	mov	r0, r4
 8021480:	bd10      	pop	{r4, pc}
 8021482:	bf00      	nop

08021484 <WM_GetWindowRect>:
 8021484:	b510      	push	{r4, lr}
 8021486:	4604      	mov	r4, r0
 8021488:	f7f7 f88c 	bl	80185a4 <GUI_Lock>
 802148c:	b144      	cbz	r4, 80214a0 <WM_GetWindowRect+0x1c>
 802148e:	4b08      	ldr	r3, [pc, #32]	; (80214b0 <WM_GetWindowRect+0x2c>)
 8021490:	6818      	ldr	r0, [r3, #0]
 8021492:	b148      	cbz	r0, 80214a8 <WM_GetWindowRect+0x24>
 8021494:	f7f1 fc7e 	bl	8012d94 <GUI_ALLOC_h2p>
 8021498:	4603      	mov	r3, r0
 802149a:	cb03      	ldmia	r3!, {r0, r1}
 802149c:	6020      	str	r0, [r4, #0]
 802149e:	6061      	str	r1, [r4, #4]
 80214a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214a4:	f7f7 b874 	b.w	8018590 <GUI_Unlock>
 80214a8:	4b02      	ldr	r3, [pc, #8]	; (80214b4 <WM_GetWindowRect+0x30>)
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80214ae:	e7f1      	b.n	8021494 <WM_GetWindowRect+0x10>
 80214b0:	200467f8 	.word	0x200467f8
 80214b4:	20000018 	.word	0x20000018

080214b8 <WM_IsWindow>:
 80214b8:	b510      	push	{r4, lr}
 80214ba:	4604      	mov	r4, r0
 80214bc:	f7f7 f872 	bl	80185a4 <GUI_Lock>
 80214c0:	4620      	mov	r0, r4
 80214c2:	f7fe fa89 	bl	801f9d8 <WM__IsWindow>
 80214c6:	4604      	mov	r4, r0
 80214c8:	f7f7 f862 	bl	8018590 <GUI_Unlock>
 80214cc:	4620      	mov	r0, r4
 80214ce:	bd10      	pop	{r4, pc}

080214d0 <WM_NotifyParent>:
 80214d0:	b530      	push	{r4, r5, lr}
 80214d2:	2326      	movs	r3, #38	; 0x26
 80214d4:	b085      	sub	sp, #20
 80214d6:	4604      	mov	r4, r0
 80214d8:	9103      	str	r1, [sp, #12]
 80214da:	9300      	str	r3, [sp, #0]
 80214dc:	f7f7 f862 	bl	80185a4 <GUI_Lock>
 80214e0:	b91c      	cbnz	r4, 80214ea <WM_NotifyParent+0x1a>
 80214e2:	f7f7 f855 	bl	8018590 <GUI_Unlock>
 80214e6:	b005      	add	sp, #20
 80214e8:	bd30      	pop	{r4, r5, pc}
 80214ea:	f7f7 f85b 	bl	80185a4 <GUI_Lock>
 80214ee:	4620      	mov	r0, r4
 80214f0:	f7f1 fc50 	bl	8012d94 <GUI_ALLOC_h2p>
 80214f4:	6985      	ldr	r5, [r0, #24]
 80214f6:	f7f7 f84b 	bl	8018590 <GUI_Unlock>
 80214fa:	2d00      	cmp	r5, #0
 80214fc:	d0f1      	beq.n	80214e2 <WM_NotifyParent+0x12>
 80214fe:	4628      	mov	r0, r5
 8021500:	4669      	mov	r1, sp
 8021502:	9402      	str	r4, [sp, #8]
 8021504:	f000 fd94 	bl	8022030 <WM__SendMessage>
 8021508:	f7f7 f842 	bl	8018590 <GUI_Unlock>
 802150c:	b005      	add	sp, #20
 802150e:	bd30      	pop	{r4, r5, pc}

08021510 <WM_OnKey>:
 8021510:	b530      	push	{r4, r5, lr}
 8021512:	b087      	sub	sp, #28
 8021514:	4604      	mov	r4, r0
 8021516:	460d      	mov	r5, r1
 8021518:	f7f7 f844 	bl	80185a4 <GUI_Lock>
 802151c:	4a0d      	ldr	r2, [pc, #52]	; (8021554 <WM_OnKey+0x44>)
 802151e:	4b0e      	ldr	r3, [pc, #56]	; (8021558 <WM_OnKey+0x48>)
 8021520:	6812      	ldr	r2, [r2, #0]
 8021522:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021526:	b928      	cbnz	r0, 8021534 <WM_OnKey+0x24>
 8021528:	4604      	mov	r4, r0
 802152a:	f7f7 f831 	bl	8018590 <GUI_Unlock>
 802152e:	4620      	mov	r0, r4
 8021530:	b007      	add	sp, #28
 8021532:	bd30      	pop	{r4, r5, pc}
 8021534:	230e      	movs	r3, #14
 8021536:	9400      	str	r4, [sp, #0]
 8021538:	2401      	movs	r4, #1
 802153a:	a902      	add	r1, sp, #8
 802153c:	9302      	str	r3, [sp, #8]
 802153e:	9501      	str	r5, [sp, #4]
 8021540:	f8cd d014 	str.w	sp, [sp, #20]
 8021544:	f000 fd74 	bl	8022030 <WM__SendMessage>
 8021548:	f7f7 f822 	bl	8018590 <GUI_Unlock>
 802154c:	4620      	mov	r0, r4
 802154e:	b007      	add	sp, #28
 8021550:	bd30      	pop	{r4, r5, pc}
 8021552:	bf00      	nop
 8021554:	2004681c 	.word	0x2004681c
 8021558:	2004680c 	.word	0x2004680c

0802155c <WM_ResizeWindow>:
 802155c:	b500      	push	{lr}
 802155e:	ea51 0e02 	orrs.w	lr, r1, r2
 8021562:	d000      	beq.n	8021566 <WM_ResizeWindow+0xa>
 8021564:	b908      	cbnz	r0, 802156a <WM_ResizeWindow+0xe>
 8021566:	f85d fb04 	ldr.w	pc, [sp], #4
 802156a:	f85d eb04 	ldr.w	lr, [sp], #4
 802156e:	f7ff be5b 	b.w	8021228 <WM_ResizeWindow.part.11>
 8021572:	bf00      	nop

08021574 <WM_SendMessageNoPara>:
 8021574:	b538      	push	{r3, r4, r5, lr}
 8021576:	4604      	mov	r4, r0
 8021578:	460d      	mov	r5, r1
 802157a:	f7f7 f813 	bl	80185a4 <GUI_Lock>
 802157e:	4629      	mov	r1, r5
 8021580:	4620      	mov	r0, r4
 8021582:	f000 fd97 	bl	80220b4 <WM__SendMessageNoPara>
 8021586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802158a:	f7f7 b801 	b.w	8018590 <GUI_Unlock>
 802158e:	bf00      	nop

08021590 <WM_SendToParent>:
 8021590:	b1e1      	cbz	r1, 80215cc <WM_SendToParent+0x3c>
 8021592:	b570      	push	{r4, r5, r6, lr}
 8021594:	4605      	mov	r5, r0
 8021596:	460c      	mov	r4, r1
 8021598:	f7f7 f804 	bl	80185a4 <GUI_Lock>
 802159c:	b91d      	cbnz	r5, 80215a6 <WM_SendToParent+0x16>
 802159e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80215a2:	f7f6 bff5 	b.w	8018590 <GUI_Unlock>
 80215a6:	f7f6 fffd 	bl	80185a4 <GUI_Lock>
 80215aa:	4628      	mov	r0, r5
 80215ac:	f7f1 fbf2 	bl	8012d94 <GUI_ALLOC_h2p>
 80215b0:	6986      	ldr	r6, [r0, #24]
 80215b2:	f7f6 ffed 	bl	8018590 <GUI_Unlock>
 80215b6:	2e00      	cmp	r6, #0
 80215b8:	d0f1      	beq.n	802159e <WM_SendToParent+0xe>
 80215ba:	60a5      	str	r5, [r4, #8]
 80215bc:	4621      	mov	r1, r4
 80215be:	4630      	mov	r0, r6
 80215c0:	f000 fd36 	bl	8022030 <WM__SendMessage>
 80215c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80215c8:	f7f6 bfe2 	b.w	8018590 <GUI_Unlock>
 80215cc:	4770      	bx	lr
 80215ce:	bf00      	nop

080215d0 <WM_SetSize>:
 80215d0:	b900      	cbnz	r0, 80215d4 <WM_SetSize+0x4>
 80215d2:	4770      	bx	lr
 80215d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215d8:	4604      	mov	r4, r0
 80215da:	b082      	sub	sp, #8
 80215dc:	4617      	mov	r7, r2
 80215de:	4688      	mov	r8, r1
 80215e0:	f7f6 ffe0 	bl	80185a4 <GUI_Lock>
 80215e4:	4620      	mov	r0, r4
 80215e6:	f7f1 fbdf 	bl	8012da8 <GUI_ALLOC_LockH>
 80215ea:	f9b0 1000 	ldrsh.w	r1, [r0]
 80215ee:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 80215f2:	f10d 0e08 	add.w	lr, sp, #8
 80215f6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80215fa:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80215fe:	1aeb      	subs	r3, r5, r3
 8021600:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8021604:	1a76      	subs	r6, r6, r1
 8021606:	4670      	mov	r0, lr
 8021608:	3301      	adds	r3, #1
 802160a:	1c75      	adds	r5, r6, #1
 802160c:	1afe      	subs	r6, r7, r3
 802160e:	f7f1 fbdf 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021612:	ebc5 0508 	rsb	r5, r5, r8
 8021616:	ea55 0306 	orrs.w	r3, r5, r6
 802161a:	d104      	bne.n	8021626 <WM_SetSize+0x56>
 802161c:	f7f6 ffb8 	bl	8018590 <GUI_Unlock>
 8021620:	b002      	add	sp, #8
 8021622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021626:	4632      	mov	r2, r6
 8021628:	4629      	mov	r1, r5
 802162a:	4620      	mov	r0, r4
 802162c:	f7ff fdfc 	bl	8021228 <WM_ResizeWindow.part.11>
 8021630:	e7f4      	b.n	802161c <WM_SetSize+0x4c>
 8021632:	bf00      	nop

08021634 <WM_SetUserClipRect>:
 8021634:	b538      	push	{r3, r4, r5, lr}
 8021636:	4605      	mov	r5, r0
 8021638:	f7f6 ffb4 	bl	80185a4 <GUI_Lock>
 802163c:	4b04      	ldr	r3, [pc, #16]	; (8021650 <WM_SetUserClipRect+0x1c>)
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8021642:	645d      	str	r5, [r3, #68]	; 0x44
 8021644:	f7fe f8ca 	bl	801f7dc <WM__ActivateClipRect>
 8021648:	f7f6 ffa2 	bl	8018590 <GUI_Unlock>
 802164c:	4620      	mov	r0, r4
 802164e:	bd38      	pop	{r3, r4, r5, pc}
 8021650:	20000018 	.word	0x20000018

08021654 <_MoveDescendents>:
 8021654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021658:	2300      	movs	r3, #0
 802165a:	b0b5      	sub	sp, #212	; 0xd4
 802165c:	931d      	str	r3, [sp, #116]	; 0x74
 802165e:	9006      	str	r0, [sp, #24]
 8021660:	931c      	str	r3, [sp, #112]	; 0x70
 8021662:	931e      	str	r3, [sp, #120]	; 0x78
 8021664:	931f      	str	r3, [sp, #124]	; 0x7c
 8021666:	2800      	cmp	r0, #0
 8021668:	f000 811c 	beq.w	80218a4 <_MoveDescendents+0x250>
 802166c:	468a      	mov	sl, r1
 802166e:	4691      	mov	r9, r2
 8021670:	f04f 0b03 	mov.w	fp, #3
 8021674:	9806      	ldr	r0, [sp, #24]
 8021676:	f7f1 fb97 	bl	8012da8 <GUI_ALLOC_LockH>
 802167a:	464a      	mov	r2, r9
 802167c:	4651      	mov	r1, sl
 802167e:	900a      	str	r0, [sp, #40]	; 0x28
 8021680:	f7f2 fbbc 	bl	8013dfc <GUI_MoveRect>
 8021684:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021686:	464a      	mov	r2, r9
 8021688:	4651      	mov	r1, sl
 802168a:	3008      	adds	r0, #8
 802168c:	f7f2 fbb6 	bl	8013dfc <GUI_MoveRect>
 8021690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021692:	a80a      	add	r0, sp, #40	; 0x28
 8021694:	69da      	ldr	r2, [r3, #28]
 8021696:	6a1b      	ldr	r3, [r3, #32]
 8021698:	4614      	mov	r4, r2
 802169a:	9205      	str	r2, [sp, #20]
 802169c:	9307      	str	r3, [sp, #28]
 802169e:	f7f1 fb97 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80216a2:	2300      	movs	r3, #0
 80216a4:	9320      	str	r3, [sp, #128]	; 0x80
 80216a6:	9321      	str	r3, [sp, #132]	; 0x84
 80216a8:	9322      	str	r3, [sp, #136]	; 0x88
 80216aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80216ac:	2c00      	cmp	r4, #0
 80216ae:	f000 80e7 	beq.w	8021880 <_MoveDescendents+0x22c>
 80216b2:	9805      	ldr	r0, [sp, #20]
 80216b4:	f7f1 fb78 	bl	8012da8 <GUI_ALLOC_LockH>
 80216b8:	464a      	mov	r2, r9
 80216ba:	4651      	mov	r1, sl
 80216bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80216be:	f7f2 fb9d 	bl	8013dfc <GUI_MoveRect>
 80216c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80216c4:	464a      	mov	r2, r9
 80216c6:	4651      	mov	r1, sl
 80216c8:	3008      	adds	r0, #8
 80216ca:	f7f2 fb97 	bl	8013dfc <GUI_MoveRect>
 80216ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80216d0:	a80b      	add	r0, sp, #44	; 0x2c
 80216d2:	69da      	ldr	r2, [r3, #28]
 80216d4:	6a1b      	ldr	r3, [r3, #32]
 80216d6:	4614      	mov	r4, r2
 80216d8:	9204      	str	r2, [sp, #16]
 80216da:	9308      	str	r3, [sp, #32]
 80216dc:	f7f1 fb78 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80216e0:	2300      	movs	r3, #0
 80216e2:	9324      	str	r3, [sp, #144]	; 0x90
 80216e4:	9325      	str	r3, [sp, #148]	; 0x94
 80216e6:	9326      	str	r3, [sp, #152]	; 0x98
 80216e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80216ea:	2c00      	cmp	r4, #0
 80216ec:	f000 80b6 	beq.w	802185c <_MoveDescendents+0x208>
 80216f0:	9804      	ldr	r0, [sp, #16]
 80216f2:	f7f1 fb59 	bl	8012da8 <GUI_ALLOC_LockH>
 80216f6:	464a      	mov	r2, r9
 80216f8:	4651      	mov	r1, sl
 80216fa:	900c      	str	r0, [sp, #48]	; 0x30
 80216fc:	f7f2 fb7e 	bl	8013dfc <GUI_MoveRect>
 8021700:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021702:	464a      	mov	r2, r9
 8021704:	4651      	mov	r1, sl
 8021706:	3008      	adds	r0, #8
 8021708:	f7f2 fb78 	bl	8013dfc <GUI_MoveRect>
 802170c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802170e:	a80c      	add	r0, sp, #48	; 0x30
 8021710:	69da      	ldr	r2, [r3, #28]
 8021712:	6a1b      	ldr	r3, [r3, #32]
 8021714:	4614      	mov	r4, r2
 8021716:	9202      	str	r2, [sp, #8]
 8021718:	9309      	str	r3, [sp, #36]	; 0x24
 802171a:	f7f1 fb59 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802171e:	2300      	movs	r3, #0
 8021720:	9328      	str	r3, [sp, #160]	; 0xa0
 8021722:	9329      	str	r3, [sp, #164]	; 0xa4
 8021724:	932a      	str	r3, [sp, #168]	; 0xa8
 8021726:	932b      	str	r3, [sp, #172]	; 0xac
 8021728:	2c00      	cmp	r4, #0
 802172a:	f000 8085 	beq.w	8021838 <_MoveDescendents+0x1e4>
 802172e:	4654      	mov	r4, sl
 8021730:	464d      	mov	r5, r9
 8021732:	9802      	ldr	r0, [sp, #8]
 8021734:	f7f1 fb38 	bl	8012da8 <GUI_ALLOC_LockH>
 8021738:	462a      	mov	r2, r5
 802173a:	4621      	mov	r1, r4
 802173c:	900d      	str	r0, [sp, #52]	; 0x34
 802173e:	f7f2 fb5d 	bl	8013dfc <GUI_MoveRect>
 8021742:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021744:	462a      	mov	r2, r5
 8021746:	4621      	mov	r1, r4
 8021748:	3008      	adds	r0, #8
 802174a:	f7f2 fb57 	bl	8013dfc <GUI_MoveRect>
 802174e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021750:	a80d      	add	r0, sp, #52	; 0x34
 8021752:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8021756:	6a1b      	ldr	r3, [r3, #32]
 8021758:	9303      	str	r3, [sp, #12]
 802175a:	f7f1 fb39 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802175e:	2300      	movs	r3, #0
 8021760:	932c      	str	r3, [sp, #176]	; 0xb0
 8021762:	932d      	str	r3, [sp, #180]	; 0xb4
 8021764:	932e      	str	r3, [sp, #184]	; 0xb8
 8021766:	932f      	str	r3, [sp, #188]	; 0xbc
 8021768:	f1b9 0f00 	cmp.w	r9, #0
 802176c:	d052      	beq.n	8021814 <_MoveDescendents+0x1c0>
 802176e:	9301      	str	r3, [sp, #4]
 8021770:	4648      	mov	r0, r9
 8021772:	f7f1 fb19 	bl	8012da8 <GUI_ALLOC_LockH>
 8021776:	462a      	mov	r2, r5
 8021778:	4621      	mov	r1, r4
 802177a:	900e      	str	r0, [sp, #56]	; 0x38
 802177c:	f7f2 fb3e 	bl	8013dfc <GUI_MoveRect>
 8021780:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021782:	462a      	mov	r2, r5
 8021784:	4621      	mov	r1, r4
 8021786:	3008      	adds	r0, #8
 8021788:	f7f2 fb38 	bl	8013dfc <GUI_MoveRect>
 802178c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802178e:	a80e      	add	r0, sp, #56	; 0x38
 8021790:	69de      	ldr	r6, [r3, #28]
 8021792:	6a1b      	ldr	r3, [r3, #32]
 8021794:	9300      	str	r3, [sp, #0]
 8021796:	f7f1 fb1b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802179a:	9b01      	ldr	r3, [sp, #4]
 802179c:	9330      	str	r3, [sp, #192]	; 0xc0
 802179e:	9331      	str	r3, [sp, #196]	; 0xc4
 80217a0:	9332      	str	r3, [sp, #200]	; 0xc8
 80217a2:	9333      	str	r3, [sp, #204]	; 0xcc
 80217a4:	b33e      	cbz	r6, 80217f6 <_MoveDescendents+0x1a2>
 80217a6:	af1a      	add	r7, sp, #104	; 0x68
 80217a8:	4630      	mov	r0, r6
 80217aa:	f7f1 fafd 	bl	8012da8 <GUI_ALLOC_LockH>
 80217ae:	462a      	mov	r2, r5
 80217b0:	4621      	mov	r1, r4
 80217b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80217b4:	f7f2 fb22 	bl	8013dfc <GUI_MoveRect>
 80217b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80217ba:	462a      	mov	r2, r5
 80217bc:	4621      	mov	r1, r4
 80217be:	3008      	adds	r0, #8
 80217c0:	f7f2 fb1c 	bl	8013dfc <GUI_MoveRect>
 80217c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80217c6:	a80f      	add	r0, sp, #60	; 0x3c
 80217c8:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 80217cc:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80217d0:	f7f1 fafe 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80217d4:	4621      	mov	r1, r4
 80217d6:	4650      	mov	r0, sl
 80217d8:	462a      	mov	r2, r5
 80217da:	f7ff ff3b 	bl	8021654 <_MoveDescendents>
 80217de:	4630      	mov	r0, r6
 80217e0:	4646      	mov	r6, r8
 80217e2:	a930      	add	r1, sp, #192	; 0xc0
 80217e4:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 80217e8:	9733      	str	r7, [sp, #204]	; 0xcc
 80217ea:	941a      	str	r4, [sp, #104]	; 0x68
 80217ec:	951b      	str	r5, [sp, #108]	; 0x6c
 80217ee:	f000 fc1f 	bl	8022030 <WM__SendMessage>
 80217f2:	2e00      	cmp	r6, #0
 80217f4:	d1d8      	bne.n	80217a8 <_MoveDescendents+0x154>
 80217f6:	4648      	mov	r0, r9
 80217f8:	ab18      	add	r3, sp, #96	; 0x60
 80217fa:	f8dd 9000 	ldr.w	r9, [sp]
 80217fe:	a92c      	add	r1, sp, #176	; 0xb0
 8021800:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 8021804:	932f      	str	r3, [sp, #188]	; 0xbc
 8021806:	9418      	str	r4, [sp, #96]	; 0x60
 8021808:	9519      	str	r5, [sp, #100]	; 0x64
 802180a:	f000 fc11 	bl	8022030 <WM__SendMessage>
 802180e:	f1b9 0f00 	cmp.w	r9, #0
 8021812:	d1ad      	bne.n	8021770 <_MoveDescendents+0x11c>
 8021814:	9b03      	ldr	r3, [sp, #12]
 8021816:	a928      	add	r1, sp, #160	; 0xa0
 8021818:	9802      	ldr	r0, [sp, #8]
 802181a:	461e      	mov	r6, r3
 802181c:	9302      	str	r3, [sp, #8]
 802181e:	ab16      	add	r3, sp, #88	; 0x58
 8021820:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 8021824:	9416      	str	r4, [sp, #88]	; 0x58
 8021826:	932b      	str	r3, [sp, #172]	; 0xac
 8021828:	9517      	str	r5, [sp, #92]	; 0x5c
 802182a:	f000 fc01 	bl	8022030 <WM__SendMessage>
 802182e:	2e00      	cmp	r6, #0
 8021830:	f47f af7f 	bne.w	8021732 <_MoveDescendents+0xde>
 8021834:	46a2      	mov	sl, r4
 8021836:	46a9      	mov	r9, r5
 8021838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802183a:	a924      	add	r1, sp, #144	; 0x90
 802183c:	9804      	ldr	r0, [sp, #16]
 802183e:	461c      	mov	r4, r3
 8021840:	9304      	str	r3, [sp, #16]
 8021842:	ab14      	add	r3, sp, #80	; 0x50
 8021844:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 8021848:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 802184c:	9327      	str	r3, [sp, #156]	; 0x9c
 802184e:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8021852:	f000 fbed 	bl	8022030 <WM__SendMessage>
 8021856:	2c00      	cmp	r4, #0
 8021858:	f47f af4a 	bne.w	80216f0 <_MoveDescendents+0x9c>
 802185c:	9b08      	ldr	r3, [sp, #32]
 802185e:	a920      	add	r1, sp, #128	; 0x80
 8021860:	9805      	ldr	r0, [sp, #20]
 8021862:	461c      	mov	r4, r3
 8021864:	9305      	str	r3, [sp, #20]
 8021866:	ab12      	add	r3, sp, #72	; 0x48
 8021868:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 802186c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8021870:	9323      	str	r3, [sp, #140]	; 0x8c
 8021872:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8021876:	f000 fbdb 	bl	8022030 <WM__SendMessage>
 802187a:	2c00      	cmp	r4, #0
 802187c:	f47f af19 	bne.w	80216b2 <_MoveDescendents+0x5e>
 8021880:	2303      	movs	r3, #3
 8021882:	9806      	ldr	r0, [sp, #24]
 8021884:	a91c      	add	r1, sp, #112	; 0x70
 8021886:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 802188a:	931c      	str	r3, [sp, #112]	; 0x70
 802188c:	9b07      	ldr	r3, [sp, #28]
 802188e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8021892:	461c      	mov	r4, r3
 8021894:	9306      	str	r3, [sp, #24]
 8021896:	ab10      	add	r3, sp, #64	; 0x40
 8021898:	931f      	str	r3, [sp, #124]	; 0x7c
 802189a:	f000 fbc9 	bl	8022030 <WM__SendMessage>
 802189e:	2c00      	cmp	r4, #0
 80218a0:	f47f aee8 	bne.w	8021674 <_MoveDescendents+0x20>
 80218a4:	b035      	add	sp, #212	; 0xd4
 80218a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218aa:	bf00      	nop

080218ac <WM_MoveWindow>:
 80218ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80218b0:	b08b      	sub	sp, #44	; 0x2c
 80218b2:	4604      	mov	r4, r0
 80218b4:	460d      	mov	r5, r1
 80218b6:	4616      	mov	r6, r2
 80218b8:	f7f6 fe74 	bl	80185a4 <GUI_Lock>
 80218bc:	2300      	movs	r3, #0
 80218be:	9307      	str	r3, [sp, #28]
 80218c0:	9306      	str	r3, [sp, #24]
 80218c2:	9308      	str	r3, [sp, #32]
 80218c4:	9309      	str	r3, [sp, #36]	; 0x24
 80218c6:	b10c      	cbz	r4, 80218cc <WM_MoveWindow+0x20>
 80218c8:	b92d      	cbnz	r5, 80218d6 <WM_MoveWindow+0x2a>
 80218ca:	b926      	cbnz	r6, 80218d6 <WM_MoveWindow+0x2a>
 80218cc:	f7f6 fe60 	bl	8018590 <GUI_Unlock>
 80218d0:	b00b      	add	sp, #44	; 0x2c
 80218d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80218d6:	4620      	mov	r0, r4
 80218d8:	f10d 0808 	add.w	r8, sp, #8
 80218dc:	f7f1 fa64 	bl	8012da8 <GUI_ALLOC_LockH>
 80218e0:	4603      	mov	r3, r0
 80218e2:	9001      	str	r0, [sp, #4]
 80218e4:	4632      	mov	r2, r6
 80218e6:	af0a      	add	r7, sp, #40	; 0x28
 80218e8:	c803      	ldmia	r0, {r0, r1}
 80218ea:	e888 0003 	stmia.w	r8, {r0, r1}
 80218ee:	4618      	mov	r0, r3
 80218f0:	4629      	mov	r1, r5
 80218f2:	f7f2 fa83 	bl	8013dfc <GUI_MoveRect>
 80218f6:	9801      	ldr	r0, [sp, #4]
 80218f8:	4632      	mov	r2, r6
 80218fa:	4629      	mov	r1, r5
 80218fc:	3008      	adds	r0, #8
 80218fe:	f7f2 fa7d 	bl	8013dfc <GUI_MoveRect>
 8021902:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8021906:	f8d3 901c 	ldr.w	r9, [r3, #28]
 802190a:	4638      	mov	r0, r7
 802190c:	f7f1 fa60 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021910:	4632      	mov	r2, r6
 8021912:	4629      	mov	r1, r5
 8021914:	4648      	mov	r0, r9
 8021916:	f7ff fe9d 	bl	8021654 <_MoveDescendents>
 802191a:	4620      	mov	r0, r4
 802191c:	f7f1 fa44 	bl	8012da8 <GUI_ALLOC_LockH>
 8021920:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8021922:	9001      	str	r0, [sp, #4]
 8021924:	0792      	lsls	r2, r2, #30
 8021926:	d501      	bpl.n	802192c <WM_MoveWindow+0x80>
 8021928:	6981      	ldr	r1, [r0, #24]
 802192a:	b989      	cbnz	r1, 8021950 <WM_MoveWindow+0xa4>
 802192c:	4638      	mov	r0, r7
 802192e:	f7f1 fa4f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021932:	2203      	movs	r2, #3
 8021934:	ab04      	add	r3, sp, #16
 8021936:	a906      	add	r1, sp, #24
 8021938:	4620      	mov	r0, r4
 802193a:	9206      	str	r2, [sp, #24]
 802193c:	9309      	str	r3, [sp, #36]	; 0x24
 802193e:	9504      	str	r5, [sp, #16]
 8021940:	9605      	str	r6, [sp, #20]
 8021942:	f000 fb75 	bl	8022030 <WM__SendMessage>
 8021946:	f7f6 fe23 	bl	8018590 <GUI_Unlock>
 802194a:	b00b      	add	sp, #44	; 0x2c
 802194c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021950:	6a02      	ldr	r2, [r0, #32]
 8021952:	f7fe fdf9 	bl	8020548 <WM__InvalidateParent>
 8021956:	9b01      	ldr	r3, [sp, #4]
 8021958:	4640      	mov	r0, r8
 802195a:	6a1a      	ldr	r2, [r3, #32]
 802195c:	6999      	ldr	r1, [r3, #24]
 802195e:	f7fe fdf3 	bl	8020548 <WM__InvalidateParent>
 8021962:	e7e3      	b.n	802192c <WM_MoveWindow+0x80>

08021964 <WM__DeleteAssocTimer>:
 8021964:	b570      	push	{r4, r5, r6, lr}
 8021966:	b082      	sub	sp, #8
 8021968:	4605      	mov	r5, r0
 802196a:	f7f6 fe1b 	bl	80185a4 <GUI_Lock>
 802196e:	4668      	mov	r0, sp
 8021970:	f002 f830 	bl	80239d4 <GUI_TIMER__GetFirstTimer>
 8021974:	b178      	cbz	r0, 8021996 <WM__DeleteAssocTimer+0x32>
 8021976:	4604      	mov	r4, r0
 8021978:	2101      	movs	r1, #1
 802197a:	4620      	mov	r0, r4
 802197c:	f002 f8cc 	bl	8023b18 <GUI_TIMER_GetFlag>
 8021980:	9b00      	ldr	r3, [sp, #0]
 8021982:	4602      	mov	r2, r0
 8021984:	4669      	mov	r1, sp
 8021986:	4620      	mov	r0, r4
 8021988:	b103      	cbz	r3, 802198c <WM__DeleteAssocTimer+0x28>
 802198a:	b942      	cbnz	r2, 802199e <WM__DeleteAssocTimer+0x3a>
 802198c:	f002 f83a 	bl	8023a04 <GUI_TIMER__GetNextTimerLin>
 8021990:	4604      	mov	r4, r0
 8021992:	2c00      	cmp	r4, #0
 8021994:	d1f0      	bne.n	8021978 <WM__DeleteAssocTimer+0x14>
 8021996:	f7f6 fdfb 	bl	8018590 <GUI_Unlock>
 802199a:	b002      	add	sp, #8
 802199c:	bd70      	pop	{r4, r5, r6, pc}
 802199e:	4618      	mov	r0, r3
 80219a0:	f7f1 f9f8 	bl	8012d94 <GUI_ALLOC_h2p>
 80219a4:	6843      	ldr	r3, [r0, #4]
 80219a6:	4669      	mov	r1, sp
 80219a8:	4620      	mov	r0, r4
 80219aa:	42ab      	cmp	r3, r5
 80219ac:	d1ee      	bne.n	802198c <WM__DeleteAssocTimer+0x28>
 80219ae:	9e00      	ldr	r6, [sp, #0]
 80219b0:	f002 f828 	bl	8023a04 <GUI_TIMER__GetNextTimerLin>
 80219b4:	4604      	mov	r4, r0
 80219b6:	2e00      	cmp	r6, #0
 80219b8:	d0eb      	beq.n	8021992 <WM__DeleteAssocTimer+0x2e>
 80219ba:	f7f6 fdf3 	bl	80185a4 <GUI_Lock>
 80219be:	4630      	mov	r0, r6
 80219c0:	f7f1 f9f2 	bl	8012da8 <GUI_ALLOC_LockH>
 80219c4:	4603      	mov	r3, r0
 80219c6:	6800      	ldr	r0, [r0, #0]
 80219c8:	9301      	str	r3, [sp, #4]
 80219ca:	f002 f83b 	bl	8023a44 <GUI_TIMER_Delete>
 80219ce:	a801      	add	r0, sp, #4
 80219d0:	f7f1 f9fe 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80219d4:	4630      	mov	r0, r6
 80219d6:	f7f1 fb7f 	bl	80130d8 <GUI_ALLOC_Free>
 80219da:	f7f6 fdd9 	bl	8018590 <GUI_Unlock>
 80219de:	2c00      	cmp	r4, #0
 80219e0:	d1ca      	bne.n	8021978 <WM__DeleteAssocTimer+0x14>
 80219e2:	e7d8      	b.n	8021996 <WM__DeleteAssocTimer+0x32>

080219e4 <WM__SendTouchMessage>:
 80219e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219e6:	68cc      	ldr	r4, [r1, #12]
 80219e8:	b087      	sub	sp, #28
 80219ea:	460d      	mov	r5, r1
 80219ec:	4607      	mov	r7, r0
 80219ee:	b18c      	cbz	r4, 8021a14 <WM__SendTouchMessage+0x30>
 80219f0:	f7f1 f9da 	bl	8012da8 <GUI_ALLOC_LockH>
 80219f4:	6822      	ldr	r2, [r4, #0]
 80219f6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80219fa:	a906      	add	r1, sp, #24
 80219fc:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8021a00:	1ad2      	subs	r2, r2, r3
 8021a02:	6863      	ldr	r3, [r4, #4]
 8021a04:	f841 0d14 	str.w	r0, [r1, #-20]!
 8021a08:	4608      	mov	r0, r1
 8021a0a:	1b9b      	subs	r3, r3, r6
 8021a0c:	e884 000c 	stmia.w	r4, {r2, r3}
 8021a10:	f7f1 f9de 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021a14:	ae02      	add	r6, sp, #8
 8021a16:	f04f 0e0d 	mov.w	lr, #13
 8021a1a:	463c      	mov	r4, r7
 8021a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021a20:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8021a24:	9704      	str	r7, [sp, #16]
 8021a26:	f8cd e008 	str.w	lr, [sp, #8]
 8021a2a:	4620      	mov	r0, r4
 8021a2c:	f7ff fd44 	bl	80214b8 <WM_IsWindow>
 8021a30:	b170      	cbz	r0, 8021a50 <WM__SendTouchMessage+0x6c>
 8021a32:	4620      	mov	r0, r4
 8021a34:	f7ff fd18 	bl	8021468 <WM_GetParent>
 8021a38:	4604      	mov	r4, r0
 8021a3a:	2800      	cmp	r0, #0
 8021a3c:	d0f5      	beq.n	8021a2a <WM__SendTouchMessage+0x46>
 8021a3e:	4631      	mov	r1, r6
 8021a40:	9505      	str	r5, [sp, #20]
 8021a42:	f000 fb13 	bl	802206c <WM__SendMessageIfEnabled>
 8021a46:	4620      	mov	r0, r4
 8021a48:	f7ff fd36 	bl	80214b8 <WM_IsWindow>
 8021a4c:	2800      	cmp	r0, #0
 8021a4e:	d1f0      	bne.n	8021a32 <WM__SendTouchMessage+0x4e>
 8021a50:	4629      	mov	r1, r5
 8021a52:	4638      	mov	r0, r7
 8021a54:	f000 fb0a 	bl	802206c <WM__SendMessageIfEnabled>
 8021a58:	b007      	add	sp, #28
 8021a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021a5c <WM_HandlePID>:
 8021a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a60:	b099      	sub	sp, #100	; 0x64
 8021a62:	2300      	movs	r3, #0
 8021a64:	ac08      	add	r4, sp, #32
 8021a66:	9308      	str	r3, [sp, #32]
 8021a68:	6063      	str	r3, [r4, #4]
 8021a6a:	60a3      	str	r3, [r4, #8]
 8021a6c:	f001 fb82 	bl	8023174 <GUI_PID_IsEmpty>
 8021a70:	b120      	cbz	r0, 8021a7c <WM_HandlePID+0x20>
 8021a72:	2700      	movs	r7, #0
 8021a74:	4638      	mov	r0, r7
 8021a76:	b019      	add	sp, #100	; 0x64
 8021a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a7c:	ae0b      	add	r6, sp, #44	; 0x2c
 8021a7e:	4607      	mov	r7, r0
 8021a80:	4630      	mov	r0, r6
 8021a82:	f001 fac5 	bl	8023010 <GUI_PID_GetState>
 8021a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a88:	3301      	adds	r3, #1
 8021a8a:	f000 80a2 	beq.w	8021bd2 <WM_HandlePID+0x176>
 8021a8e:	4db9      	ldr	r5, [pc, #740]	; (8021d74 <WM_HandlePID+0x318>)
 8021a90:	f7f6 fd88 	bl	80185a4 <GUI_Lock>
 8021a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	f2c0 8115 	blt.w	8021cc6 <WM_HandlePID+0x26a>
 8021a9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a9e:	2a00      	cmp	r2, #0
 8021aa0:	db09      	blt.n	8021ab6 <WM_HandlePID+0x5a>
 8021aa2:	48b5      	ldr	r0, [pc, #724]	; (8021d78 <WM_HandlePID+0x31c>)
 8021aa4:	49b5      	ldr	r1, [pc, #724]	; (8021d7c <WM_HandlePID+0x320>)
 8021aa6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8021aaa:	f9b1 1000 	ldrsh.w	r1, [r1]
 8021aae:	4403      	add	r3, r0
 8021ab0:	440a      	add	r2, r1
 8021ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021ab4:	920c      	str	r2, [sp, #48]	; 0x30
 8021ab6:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 8021aba:	2801      	cmp	r0, #1
 8021abc:	bf8c      	ite	hi
 8021abe:	6828      	ldrhi	r0, [r5, #0]
 8021ac0:	6028      	strls	r0, [r5, #0]
 8021ac2:	f7f2 fd77 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8021ac6:	2800      	cmp	r0, #0
 8021ac8:	d07d      	beq.n	8021bc6 <WM_HandlePID+0x16a>
 8021aca:	aa04      	add	r2, sp, #16
 8021acc:	a903      	add	r1, sp, #12
 8021ace:	6828      	ldr	r0, [r5, #0]
 8021ad0:	f7f5 fb48 	bl	8017164 <GUI_GetLayerPosEx>
 8021ad4:	a806      	add	r0, sp, #24
 8021ad6:	f000 fb93 	bl	8022200 <WM__AddCriticalHandle>
 8021ada:	682b      	ldr	r3, [r5, #0]
 8021adc:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8021d8c <WM_HandlePID+0x330>
 8021ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021ae6:	9803      	ldr	r0, [sp, #12]
 8021ae8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8021aec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021aee:	1a10      	subs	r0, r2, r0
 8021af0:	9f04      	ldr	r7, [sp, #16]
 8021af2:	691a      	ldr	r2, [r3, #16]
 8021af4:	1bc9      	subs	r1, r1, r7
 8021af6:	900b      	str	r0, [sp, #44]	; 0x2c
 8021af8:	4290      	cmp	r0, r2
 8021afa:	910c      	str	r1, [sp, #48]	; 0x30
 8021afc:	d103      	bne.n	8021b06 <WM_HandlePID+0xaa>
 8021afe:	695a      	ldr	r2, [r3, #20]
 8021b00:	4291      	cmp	r1, r2
 8021b02:	f000 8158 	beq.w	8021db6 <WM_HandlePID+0x35a>
 8021b06:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8021b0a:	f001 fa2f 	bl	8022f6c <GUI_CURSOR_SetPositionEx>
 8021b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8021b12:	b113      	cbz	r3, 8021b1a <WM_HandlePID+0xbe>
 8021b14:	2100      	movs	r1, #0
 8021b16:	4630      	mov	r0, r6
 8021b18:	4798      	blx	r3
 8021b1a:	4b99      	ldr	r3, [pc, #612]	; (8021d80 <WM_HandlePID+0x324>)
 8021b1c:	682a      	ldr	r2, [r5, #0]
 8021b1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021b22:	2800      	cmp	r0, #0
 8021b24:	f000 813a 	beq.w	8021d9c <WM_HandlePID+0x340>
 8021b28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021b2c:	9007      	str	r0, [sp, #28]
 8021b2e:	b113      	cbz	r3, 8021b36 <WM_HandlePID+0xda>
 8021b30:	9907      	ldr	r1, [sp, #28]
 8021b32:	4630      	mov	r0, r6
 8021b34:	4798      	blx	r3
 8021b36:	682b      	ldr	r3, [r5, #0]
 8021b38:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8021d94 <WM_HandlePID+0x338>
 8021b3c:	00db      	lsls	r3, r3, #3
 8021b3e:	4f8d      	ldr	r7, [pc, #564]	; (8021d74 <WM_HandlePID+0x318>)
 8021b40:	eb09 0103 	add.w	r1, r9, r3
 8021b44:	684a      	ldr	r2, [r1, #4]
 8021b46:	9807      	ldr	r0, [sp, #28]
 8021b48:	4282      	cmp	r2, r0
 8021b4a:	d002      	beq.n	8021b52 <WM_HandlePID+0xf6>
 8021b4c:	2a00      	cmp	r2, #0
 8021b4e:	f040 80cc 	bne.w	8021cea <WM_HandlePID+0x28e>
 8021b52:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021b56:	f1ba 0f00 	cmp.w	sl, #0
 8021b5a:	d04c      	beq.n	8021bf6 <WM_HandlePID+0x19a>
 8021b5c:	4b89      	ldr	r3, [pc, #548]	; (8021d84 <WM_HandlePID+0x328>)
 8021b5e:	681b      	ldr	r3, [r3, #0]
 8021b60:	2b00      	cmp	r3, #0
 8021b62:	db07      	blt.n	8021b74 <WM_HandlePID+0x118>
 8021b64:	4a88      	ldr	r2, [pc, #544]	; (8021d88 <WM_HandlePID+0x32c>)
 8021b66:	4650      	mov	r0, sl
 8021b68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021b6c:	f000 fa44 	bl	8021ff8 <WM__IsAncestor>
 8021b70:	2800      	cmp	r0, #0
 8021b72:	d040      	beq.n	8021bf6 <WM_HandlePID+0x19a>
 8021b74:	682a      	ldr	r2, [r5, #0]
 8021b76:	4650      	mov	r0, sl
 8021b78:	f8df b214 	ldr.w	fp, [pc, #532]	; 8021d90 <WM_HandlePID+0x334>
 8021b7c:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8021b80:	6851      	ldr	r1, [r2, #4]
 8021b82:	f000 fa39 	bl	8021ff8 <WM__IsAncestor>
 8021b86:	682f      	ldr	r7, [r5, #0]
 8021b88:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021b8c:	eb0b 030e 	add.w	r3, fp, lr
 8021b90:	685a      	ldr	r2, [r3, #4]
 8021b92:	685b      	ldr	r3, [r3, #4]
 8021b94:	2a00      	cmp	r2, #0
 8021b96:	bf18      	it	ne
 8021b98:	459a      	cmpne	sl, r3
 8021b9a:	d02e      	beq.n	8021bfa <WM_HandlePID+0x19e>
 8021b9c:	bb68      	cbnz	r0, 8021bfa <WM_HandlePID+0x19e>
 8021b9e:	f04f 0900 	mov.w	r9, #0
 8021ba2:	007b      	lsls	r3, r7, #1
 8021ba4:	443b      	add	r3, r7
 8021ba6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8021baa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021bae:	f108 0810 	add.w	r8, r8, #16
 8021bb2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8021bb6:	4639      	mov	r1, r7
 8021bb8:	4630      	mov	r0, r6
 8021bba:	f002 f95b 	bl	8023e74 <WM_PID__SetPrevState>
 8021bbe:	a806      	add	r0, sp, #24
 8021bc0:	464f      	mov	r7, r9
 8021bc2:	f000 fb25 	bl	8022210 <WM__RemoveCriticalHandle>
 8021bc6:	f7f6 fce3 	bl	8018590 <GUI_Unlock>
 8021bca:	4638      	mov	r0, r7
 8021bcc:	b019      	add	sp, #100	; 0x64
 8021bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021bd4:	4d67      	ldr	r5, [pc, #412]	; (8021d74 <WM_HandlePID+0x318>)
 8021bd6:	3301      	adds	r3, #1
 8021bd8:	f47f af5a 	bne.w	8021a90 <WM_HandlePID+0x34>
 8021bdc:	682b      	ldr	r3, [r5, #0]
 8021bde:	4a6b      	ldr	r2, [pc, #428]	; (8021d8c <WM_HandlePID+0x330>)
 8021be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021be4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8021be8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021bec:	7e1b      	ldrb	r3, [r3, #24]
 8021bee:	428b      	cmp	r3, r1
 8021bf0:	f47f af4e 	bne.w	8021a90 <WM_HandlePID+0x34>
 8021bf4:	e73d      	b.n	8021a72 <WM_HandlePID+0x16>
 8021bf6:	682f      	ldr	r7, [r5, #0]
 8021bf8:	e7d1      	b.n	8021b9e <WM_HandlePID+0x142>
 8021bfa:	007b      	lsls	r3, r7, #1
 8021bfc:	44f1      	add	r9, lr
 8021bfe:	9907      	ldr	r1, [sp, #28]
 8021c00:	19da      	adds	r2, r3, r7
 8021c02:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021c06:	f8c9 1004 	str.w	r1, [r9, #4]
 8021c0a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8021c0e:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8021d8c <WM_HandlePID+0x330>
 8021c12:	f892 9018 	ldrb.w	r9, [r2, #24]
 8021c16:	45e1      	cmp	r9, ip
 8021c18:	d003      	beq.n	8021c22 <WM_HandlePID+0x1c6>
 8021c1a:	9a07      	ldr	r2, [sp, #28]
 8021c1c:	2a00      	cmp	r2, #0
 8021c1e:	f040 80d3 	bne.w	8021dc8 <WM_HandlePID+0x36c>
 8021c22:	ea59 0a0c 	orrs.w	sl, r9, ip
 8021c26:	f000 80be 	beq.w	8021da6 <WM_HandlePID+0x34a>
 8021c2a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8021d98 <WM_HandlePID+0x33c>
 8021c2e:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021c32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021c36:	eb09 020e 	add.w	r2, r9, lr
 8021c3a:	9114      	str	r1, [sp, #80]	; 0x50
 8021c3c:	6850      	ldr	r0, [r2, #4]
 8021c3e:	9907      	ldr	r1, [sp, #28]
 8021c40:	4288      	cmp	r0, r1
 8021c42:	d020      	beq.n	8021c86 <WM_HandlePID+0x22a>
 8021c44:	6852      	ldr	r2, [r2, #4]
 8021c46:	b1f2      	cbz	r2, 8021c86 <WM_HandlePID+0x22a>
 8021c48:	f1bc 0f00 	cmp.w	ip, #0
 8021c4c:	f040 8154 	bne.w	8021ef8 <WM_HandlePID+0x49c>
 8021c50:	443b      	add	r3, r7
 8021c52:	4622      	mov	r2, r4
 8021c54:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
 8021c58:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8021c5c:	6919      	ldr	r1, [r3, #16]
 8021c5e:	695b      	ldr	r3, [r3, #20]
 8021c60:	9108      	str	r1, [sp, #32]
 8021c62:	9309      	str	r3, [sp, #36]	; 0x24
 8021c64:	44ce      	add	lr, r9
 8021c66:	a914      	add	r1, sp, #80	; 0x50
 8021c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8021c6a:	f8de 0004 	ldr.w	r0, [lr, #4]
 8021c6e:	f7ff feb9 	bl	80219e4 <WM__SendTouchMessage>
 8021c72:	682f      	ldr	r7, [r5, #0]
 8021c74:	2100      	movs	r1, #0
 8021c76:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021c7a:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021c7e:	007b      	lsls	r3, r7, #1
 8021c80:	eb09 020e 	add.w	r2, r9, lr
 8021c84:	6051      	str	r1, [r2, #4]
 8021c86:	19da      	adds	r2, r3, r7
 8021c88:	9907      	ldr	r1, [sp, #28]
 8021c8a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8021c8e:	f882 c018 	strb.w	ip, [r2, #24]
 8021c92:	2900      	cmp	r1, #0
 8021c94:	f000 808c 	beq.w	8021db0 <WM_HandlePID+0x354>
 8021c98:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021ca0:	f1bc 0f00 	cmp.w	ip, #0
 8021ca4:	f000 8107 	beq.w	8021eb6 <WM_HandlePID+0x45a>
 8021ca8:	44f1      	add	r9, lr
 8021caa:	9b07      	ldr	r3, [sp, #28]
 8021cac:	f8c9 3004 	str.w	r3, [r9, #4]
 8021cb0:	9807      	ldr	r0, [sp, #28]
 8021cb2:	a914      	add	r1, sp, #80	; 0x50
 8021cb4:	9417      	str	r4, [sp, #92]	; 0x5c
 8021cb6:	f04f 0901 	mov.w	r9, #1
 8021cba:	f7ff fe93 	bl	80219e4 <WM__SendTouchMessage>
 8021cbe:	682f      	ldr	r7, [r5, #0]
 8021cc0:	fa07 f309 	lsl.w	r3, r7, r9
 8021cc4:	e76e      	b.n	8021ba4 <WM_HandlePID+0x148>
 8021cc6:	3301      	adds	r3, #1
 8021cc8:	f47f aef5 	bne.w	8021ab6 <WM_HandlePID+0x5a>
 8021ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cce:	3301      	adds	r3, #1
 8021cd0:	f47f aef1 	bne.w	8021ab6 <WM_HandlePID+0x5a>
 8021cd4:	682b      	ldr	r3, [r5, #0]
 8021cd6:	4a2d      	ldr	r2, [pc, #180]	; (8021d8c <WM_HandlePID+0x330>)
 8021cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021cdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ce0:	691a      	ldr	r2, [r3, #16]
 8021ce2:	695b      	ldr	r3, [r3, #20]
 8021ce4:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8021ce8:	e6e5      	b.n	8021ab6 <WM_HandlePID+0x5a>
 8021cea:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8021cee:	f1ba 0f00 	cmp.w	sl, #0
 8021cf2:	f43f af2e 	beq.w	8021b52 <WM_HandlePID+0xf6>
 8021cf6:	4a23      	ldr	r2, [pc, #140]	; (8021d84 <WM_HandlePID+0x328>)
 8021cf8:	6812      	ldr	r2, [r2, #0]
 8021cfa:	2a00      	cmp	r2, #0
 8021cfc:	db0a      	blt.n	8021d14 <WM_HandlePID+0x2b8>
 8021cfe:	4b22      	ldr	r3, [pc, #136]	; (8021d88 <WM_HandlePID+0x32c>)
 8021d00:	4650      	mov	r0, sl
 8021d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021d06:	f000 f977 	bl	8021ff8 <WM__IsAncestor>
 8021d0a:	2800      	cmp	r0, #0
 8021d0c:	f43f af21 	beq.w	8021b52 <WM_HandlePID+0xf6>
 8021d10:	683b      	ldr	r3, [r7, #0]
 8021d12:	00db      	lsls	r3, r3, #3
 8021d14:	4f1e      	ldr	r7, [pc, #120]	; (8021d90 <WM_HandlePID+0x334>)
 8021d16:	4650      	mov	r0, sl
 8021d18:	443b      	add	r3, r7
 8021d1a:	6859      	ldr	r1, [r3, #4]
 8021d1c:	f000 f96c 	bl	8021ff8 <WM__IsAncestor>
 8021d20:	682b      	ldr	r3, [r5, #0]
 8021d22:	00db      	lsls	r3, r3, #3
 8021d24:	441f      	add	r7, r3
 8021d26:	6879      	ldr	r1, [r7, #4]
 8021d28:	687a      	ldr	r2, [r7, #4]
 8021d2a:	4592      	cmp	sl, r2
 8021d2c:	bf18      	it	ne
 8021d2e:	2900      	cmpne	r1, #0
 8021d30:	d002      	beq.n	8021d38 <WM_HandlePID+0x2dc>
 8021d32:	2800      	cmp	r0, #0
 8021d34:	f43f af0d 	beq.w	8021b52 <WM_HandlePID+0xf6>
 8021d38:	444b      	add	r3, r9
 8021d3a:	4f16      	ldr	r7, [pc, #88]	; (8021d94 <WM_HandlePID+0x338>)
 8021d3c:	6858      	ldr	r0, [r3, #4]
 8021d3e:	f000 f96d 	bl	802201c <WM__IsEnabled>
 8021d42:	2800      	cmp	r0, #0
 8021d44:	f43f af05 	beq.w	8021b52 <WM_HandlePID+0xf6>
 8021d48:	682b      	ldr	r3, [r5, #0]
 8021d4a:	2212      	movs	r2, #18
 8021d4c:	9417      	str	r4, [sp, #92]	; 0x5c
 8021d4e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8021d52:	9214      	str	r2, [sp, #80]	; 0x50
 8021d54:	685b      	ldr	r3, [r3, #4]
 8021d56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021d5e:	4618      	mov	r0, r3
 8021d60:	a914      	add	r1, sp, #80	; 0x50
 8021d62:	f7ff fe3f 	bl	80219e4 <WM__SendTouchMessage>
 8021d66:	682b      	ldr	r3, [r5, #0]
 8021d68:	2200      	movs	r2, #0
 8021d6a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8021d6e:	605a      	str	r2, [r3, #4]
 8021d70:	e6ef      	b.n	8021b52 <WM_HandlePID+0xf6>
 8021d72:	bf00      	nop
 8021d74:	2004681c 	.word	0x2004681c
 8021d78:	200467a8 	.word	0x200467a8
 8021d7c:	20046798 	.word	0x20046798
 8021d80:	20046840 	.word	0x20046840
 8021d84:	20000088 	.word	0x20000088
 8021d88:	200467fc 	.word	0x200467fc
 8021d8c:	20000414 	.word	0x20000414
 8021d90:	20046870 	.word	0x20046870
 8021d94:	20046850 	.word	0x20046850
 8021d98:	20046860 	.word	0x20046860
 8021d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021d9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021da0:	f002 fa48 	bl	8024234 <WM_Screen2hWin>
 8021da4:	e6c0      	b.n	8021b28 <WM_HandlePID+0xcc>
 8021da6:	9807      	ldr	r0, [sp, #28]
 8021da8:	2800      	cmp	r0, #0
 8021daa:	d17b      	bne.n	8021ea4 <WM_HandlePID+0x448>
 8021dac:	4681      	mov	r9, r0
 8021dae:	e6f9      	b.n	8021ba4 <WM_HandlePID+0x148>
 8021db0:	f04f 0901 	mov.w	r9, #1
 8021db4:	e6f6      	b.n	8021ba4 <WM_HandlePID+0x148>
 8021db6:	7e1a      	ldrb	r2, [r3, #24]
 8021db8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8021dbc:	429a      	cmp	r2, r3
 8021dbe:	f47f aea2 	bne.w	8021b06 <WM_HandlePID+0xaa>
 8021dc2:	f04f 0900 	mov.w	r9, #0
 8021dc6:	e6fa      	b.n	8021bbe <WM_HandlePID+0x162>
 8021dc8:	9807      	ldr	r0, [sp, #28]
 8021dca:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8021dce:	f7f0 ffeb 	bl	8012da8 <GUI_ALLOC_LockH>
 8021dd2:	682b      	ldr	r3, [r5, #0]
 8021dd4:	4607      	mov	r7, r0
 8021dd6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021dda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021de0:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8021de4:	a805      	add	r0, sp, #20
 8021de6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8021dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021dec:	9705      	str	r7, [sp, #20]
 8021dee:	7e1b      	ldrb	r3, [r3, #24]
 8021df0:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8021df4:	f9b7 e000 	ldrsh.w	lr, [r7]
 8021df8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021dfc:	ebce 0101 	rsb	r1, lr, r1
 8021e00:	1ad2      	subs	r2, r2, r3
 8021e02:	9111      	str	r1, [sp, #68]	; 0x44
 8021e04:	9212      	str	r2, [sp, #72]	; 0x48
 8021e06:	f7f0 ffe3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8021e0a:	f8d5 e000 	ldr.w	lr, [r5]
 8021e0e:	aa11      	add	r2, sp, #68	; 0x44
 8021e10:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8021e14:	f04f 0c11 	mov.w	ip, #17
 8021e18:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8021e1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8021e1e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8021e22:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8021e26:	f103 0210 	add.w	r2, r3, #16
 8021e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8021e2c:	761f      	strb	r7, [r3, #24]
 8021e2e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8021e32:	4f52      	ldr	r7, [pc, #328]	; (8021f7c <WM_HandlePID+0x520>)
 8021e34:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	d045      	beq.n	8021ec8 <WM_HandlePID+0x46c>
 8021e3c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8021f88 <WM_HandlePID+0x52c>
 8021e40:	a914      	add	r1, sp, #80	; 0x50
 8021e42:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 8021e46:	f8de b004 	ldr.w	fp, [lr, #4]
 8021e4a:	9b07      	ldr	r3, [sp, #28]
 8021e4c:	f8ce 3004 	str.w	r3, [lr, #4]
 8021e50:	f8de 3004 	ldr.w	r3, [lr, #4]
 8021e54:	9807      	ldr	r0, [sp, #28]
 8021e56:	9300      	str	r3, [sp, #0]
 8021e58:	f000 f908 	bl	802206c <WM__SendMessageIfEnabled>
 8021e5c:	683f      	ldr	r7, [r7, #0]
 8021e5e:	9b00      	ldr	r3, [sp, #0]
 8021e60:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021e64:	eb09 020e 	add.w	r2, r9, lr
 8021e68:	6852      	ldr	r2, [r2, #4]
 8021e6a:	4293      	cmp	r3, r2
 8021e6c:	d003      	beq.n	8021e76 <WM_HandlePID+0x41a>
 8021e6e:	44ce      	add	lr, r9
 8021e70:	f8de 3004 	ldr.w	r3, [lr, #4]
 8021e74:	9307      	str	r3, [sp, #28]
 8021e76:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8021e7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8021e7e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8021e82:	3310      	adds	r3, #16
 8021e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021e88:	f1bb 0f00 	cmp.w	fp, #0
 8021e8c:	d136      	bne.n	8021efc <WM_HandlePID+0x4a0>
 8021e8e:	682f      	ldr	r7, [r5, #0]
 8021e90:	493b      	ldr	r1, [pc, #236]	; (8021f80 <WM_HandlePID+0x524>)
 8021e92:	007b      	lsls	r3, r7, #1
 8021e94:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021e98:	19da      	adds	r2, r3, r7
 8021e9a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021e9e:	f892 9018 	ldrb.w	r9, [r2, #24]
 8021ea2:	e6be      	b.n	8021c22 <WM_HandlePID+0x1c6>
 8021ea4:	9807      	ldr	r0, [sp, #28]
 8021ea6:	f000 f8b9 	bl	802201c <WM__IsEnabled>
 8021eaa:	2800      	cmp	r0, #0
 8021eac:	d135      	bne.n	8021f1a <WM_HandlePID+0x4be>
 8021eae:	682f      	ldr	r7, [r5, #0]
 8021eb0:	4681      	mov	r9, r0
 8021eb2:	007b      	lsls	r3, r7, #1
 8021eb4:	e676      	b.n	8021ba4 <WM_HandlePID+0x148>
 8021eb6:	4b33      	ldr	r3, [pc, #204]	; (8021f84 <WM_HandlePID+0x528>)
 8021eb8:	781b      	ldrb	r3, [r3, #0]
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d13d      	bne.n	8021f3a <WM_HandlePID+0x4de>
 8021ebe:	44f1      	add	r9, lr
 8021ec0:	2300      	movs	r3, #0
 8021ec2:	f8c9 3004 	str.w	r3, [r9, #4]
 8021ec6:	e6f3      	b.n	8021cb0 <WM_HandlePID+0x254>
 8021ec8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8021f88 <WM_HandlePID+0x52c>
 8021ecc:	a914      	add	r1, sp, #80	; 0x50
 8021ece:	9301      	str	r3, [sp, #4]
 8021ed0:	eb09 0ece 	add.w	lr, r9, lr, lsl #3
 8021ed4:	f8de 2004 	ldr.w	r2, [lr, #4]
 8021ed8:	9807      	ldr	r0, [sp, #28]
 8021eda:	9200      	str	r2, [sp, #0]
 8021edc:	f000 f8c6 	bl	802206c <WM__SendMessageIfEnabled>
 8021ee0:	683f      	ldr	r7, [r7, #0]
 8021ee2:	9a00      	ldr	r2, [sp, #0]
 8021ee4:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021ee8:	9b01      	ldr	r3, [sp, #4]
 8021eea:	eb09 010e 	add.w	r1, r9, lr
 8021eee:	6849      	ldr	r1, [r1, #4]
 8021ef0:	4291      	cmp	r1, r2
 8021ef2:	d033      	beq.n	8021f5c <WM_HandlePID+0x500>
 8021ef4:	469b      	mov	fp, r3
 8021ef6:	e7ba      	b.n	8021e6e <WM_HandlePID+0x412>
 8021ef8:	2200      	movs	r2, #0
 8021efa:	e6b3      	b.n	8021c64 <WM_HandlePID+0x208>
 8021efc:	4658      	mov	r0, fp
 8021efe:	f7ff fadb 	bl	80214b8 <WM_IsWindow>
 8021f02:	682f      	ldr	r7, [r5, #0]
 8021f04:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021f08:	007b      	lsls	r3, r7, #1
 8021f0a:	b9e0      	cbnz	r0, 8021f46 <WM_HandlePID+0x4ea>
 8021f0c:	19da      	adds	r2, r3, r7
 8021f0e:	491c      	ldr	r1, [pc, #112]	; (8021f80 <WM_HandlePID+0x524>)
 8021f10:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021f14:	f892 9018 	ldrb.w	r9, [r2, #24]
 8021f18:	e683      	b.n	8021c22 <WM_HandlePID+0x1c6>
 8021f1a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021f1e:	9f07      	ldr	r7, [sp, #28]
 8021f20:	2310      	movs	r3, #16
 8021f22:	9417      	str	r4, [sp, #92]	; 0x5c
 8021f24:	46d1      	mov	r9, sl
 8021f26:	9314      	str	r3, [sp, #80]	; 0x50
 8021f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021f2c:	4638      	mov	r0, r7
 8021f2e:	a914      	add	r1, sp, #80	; 0x50
 8021f30:	f7ff fd58 	bl	80219e4 <WM__SendTouchMessage>
 8021f34:	682f      	ldr	r7, [r5, #0]
 8021f36:	007b      	lsls	r3, r7, #1
 8021f38:	e634      	b.n	8021ba4 <WM_HandlePID+0x148>
 8021f3a:	f002 f991 	bl	8024260 <WM_ReleaseCapture>
 8021f3e:	682f      	ldr	r7, [r5, #0]
 8021f40:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
 8021f44:	e7bb      	b.n	8021ebe <WM_HandlePID+0x462>
 8021f46:	19da      	adds	r2, r3, r7
 8021f48:	490d      	ldr	r1, [pc, #52]	; (8021f80 <WM_HandlePID+0x524>)
 8021f4a:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 8021f4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8021f52:	f8c9 b004 	str.w	fp, [r9, #4]
 8021f56:	f892 9018 	ldrb.w	r9, [r2, #24]
 8021f5a:	e662      	b.n	8021c22 <WM_HandlePID+0x1c6>
 8021f5c:	007b      	lsls	r3, r7, #1
 8021f5e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021f62:	19da      	adds	r2, r3, r7
 8021f64:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8021f68:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8021f6c:	f10b 0e10 	add.w	lr, fp, #16
 8021f70:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8021f74:	f89b 9018 	ldrb.w	r9, [fp, #24]
 8021f78:	e653      	b.n	8021c22 <WM_HandlePID+0x1c6>
 8021f7a:	bf00      	nop
 8021f7c:	2004681c 	.word	0x2004681c
 8021f80:	20000414 	.word	0x20000414
 8021f84:	20046820 	.word	0x20046820
 8021f88:	20046860 	.word	0x20046860

08021f8c <WM__GetOrgX_AA>:
 8021f8c:	4b05      	ldr	r3, [pc, #20]	; (8021fa4 <WM__GetOrgX_AA+0x18>)
 8021f8e:	681b      	ldr	r3, [r3, #0]
 8021f90:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8021f94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8021f96:	b11a      	cbz	r2, 8021fa0 <WM__GetOrgX_AA+0x14>
 8021f98:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8021f9c:	fb03 f000 	mul.w	r0, r3, r0
 8021fa0:	4770      	bx	lr
 8021fa2:	bf00      	nop
 8021fa4:	20000018 	.word	0x20000018

08021fa8 <WM__GetOrgY_AA>:
 8021fa8:	4b05      	ldr	r3, [pc, #20]	; (8021fc0 <WM__GetOrgY_AA+0x18>)
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8021fb0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8021fb2:	b11a      	cbz	r2, 8021fbc <WM__GetOrgY_AA+0x14>
 8021fb4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8021fb8:	fb03 f000 	mul.w	r0, r3, r0
 8021fbc:	4770      	bx	lr
 8021fbe:	bf00      	nop
 8021fc0:	20000018 	.word	0x20000018

08021fc4 <WM__GetPrevSibling>:
 8021fc4:	b538      	push	{r3, r4, r5, lr}
 8021fc6:	4605      	mov	r5, r0
 8021fc8:	f7ff fa4e 	bl	8021468 <WM_GetParent>
 8021fcc:	b910      	cbnz	r0, 8021fd4 <WM__GetPrevSibling+0x10>
 8021fce:	2400      	movs	r4, #0
 8021fd0:	4620      	mov	r0, r4
 8021fd2:	bd38      	pop	{r3, r4, r5, pc}
 8021fd4:	f7f0 fede 	bl	8012d94 <GUI_ALLOC_h2p>
 8021fd8:	69c4      	ldr	r4, [r0, #28]
 8021fda:	e000      	b.n	8021fde <WM__GetPrevSibling+0x1a>
 8021fdc:	461c      	mov	r4, r3
 8021fde:	42ac      	cmp	r4, r5
 8021fe0:	4620      	mov	r0, r4
 8021fe2:	d0f4      	beq.n	8021fce <WM__GetPrevSibling+0xa>
 8021fe4:	2c00      	cmp	r4, #0
 8021fe6:	d0f2      	beq.n	8021fce <WM__GetPrevSibling+0xa>
 8021fe8:	f7f0 fed4 	bl	8012d94 <GUI_ALLOC_h2p>
 8021fec:	6a03      	ldr	r3, [r0, #32]
 8021fee:	429d      	cmp	r5, r3
 8021ff0:	d1f4      	bne.n	8021fdc <WM__GetPrevSibling+0x18>
 8021ff2:	4620      	mov	r0, r4
 8021ff4:	bd38      	pop	{r3, r4, r5, pc}
 8021ff6:	bf00      	nop

08021ff8 <WM__IsAncestor>:
 8021ff8:	b168      	cbz	r0, 8022016 <WM__IsAncestor+0x1e>
 8021ffa:	b510      	push	{r4, lr}
 8021ffc:	460c      	mov	r4, r1
 8021ffe:	b131      	cbz	r1, 802200e <WM__IsAncestor+0x16>
 8022000:	f7f0 fec8 	bl	8012d94 <GUI_ALLOC_h2p>
 8022004:	6980      	ldr	r0, [r0, #24]
 8022006:	4284      	cmp	r4, r0
 8022008:	d003      	beq.n	8022012 <WM__IsAncestor+0x1a>
 802200a:	2800      	cmp	r0, #0
 802200c:	d1f8      	bne.n	8022000 <WM__IsAncestor+0x8>
 802200e:	2000      	movs	r0, #0
 8022010:	bd10      	pop	{r4, pc}
 8022012:	2001      	movs	r0, #1
 8022014:	bd10      	pop	{r4, pc}
 8022016:	2000      	movs	r0, #0
 8022018:	4770      	bx	lr
 802201a:	bf00      	nop

0802201c <WM__IsEnabled>:
 802201c:	b508      	push	{r3, lr}
 802201e:	f7f0 feb9 	bl	8012d94 <GUI_ALLOC_h2p>
 8022022:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8022024:	f080 0010 	eor.w	r0, r0, #16
 8022028:	f3c0 1000 	ubfx	r0, r0, #4, #1
 802202c:	bd08      	pop	{r3, pc}
 802202e:	bf00      	nop

08022030 <WM__SendMessage>:
 8022030:	b570      	push	{r4, r5, r6, lr}
 8022032:	4c0d      	ldr	r4, [pc, #52]	; (8022068 <WM__SendMessage+0x38>)
 8022034:	6822      	ldr	r2, [r4, #0]
 8022036:	2a13      	cmp	r2, #19
 8022038:	dd00      	ble.n	802203c <WM__SendMessage+0xc>
 802203a:	bd70      	pop	{r4, r5, r6, pc}
 802203c:	4606      	mov	r6, r0
 802203e:	460d      	mov	r5, r1
 8022040:	f7f0 fea8 	bl	8012d94 <GUI_ALLOC_h2p>
 8022044:	6902      	ldr	r2, [r0, #16]
 8022046:	606e      	str	r6, [r5, #4]
 8022048:	b142      	cbz	r2, 802205c <WM__SendMessage+0x2c>
 802204a:	6823      	ldr	r3, [r4, #0]
 802204c:	4628      	mov	r0, r5
 802204e:	3301      	adds	r3, #1
 8022050:	6023      	str	r3, [r4, #0]
 8022052:	4790      	blx	r2
 8022054:	6823      	ldr	r3, [r4, #0]
 8022056:	3b01      	subs	r3, #1
 8022058:	6023      	str	r3, [r4, #0]
 802205a:	bd70      	pop	{r4, r5, r6, pc}
 802205c:	4628      	mov	r0, r5
 802205e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022062:	f7ff b803 	b.w	802106c <WM_DefaultProc>
 8022066:	bf00      	nop
 8022068:	2000043c 	.word	0x2000043c

0802206c <WM__SendMessageIfEnabled>:
 802206c:	b570      	push	{r4, r5, r6, lr}
 802206e:	460e      	mov	r6, r1
 8022070:	4605      	mov	r5, r0
 8022072:	f7f0 fe8f 	bl	8012d94 <GUI_ALLOC_h2p>
 8022076:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8022078:	06db      	lsls	r3, r3, #27
 802207a:	d403      	bmi.n	8022084 <WM__SendMessageIfEnabled+0x18>
 802207c:	4c0c      	ldr	r4, [pc, #48]	; (80220b0 <WM__SendMessageIfEnabled+0x44>)
 802207e:	6823      	ldr	r3, [r4, #0]
 8022080:	2b13      	cmp	r3, #19
 8022082:	dd00      	ble.n	8022086 <WM__SendMessageIfEnabled+0x1a>
 8022084:	bd70      	pop	{r4, r5, r6, pc}
 8022086:	4628      	mov	r0, r5
 8022088:	f7f0 fe84 	bl	8012d94 <GUI_ALLOC_h2p>
 802208c:	6902      	ldr	r2, [r0, #16]
 802208e:	6075      	str	r5, [r6, #4]
 8022090:	b142      	cbz	r2, 80220a4 <WM__SendMessageIfEnabled+0x38>
 8022092:	6823      	ldr	r3, [r4, #0]
 8022094:	4630      	mov	r0, r6
 8022096:	3301      	adds	r3, #1
 8022098:	6023      	str	r3, [r4, #0]
 802209a:	4790      	blx	r2
 802209c:	6823      	ldr	r3, [r4, #0]
 802209e:	3b01      	subs	r3, #1
 80220a0:	6023      	str	r3, [r4, #0]
 80220a2:	bd70      	pop	{r4, r5, r6, pc}
 80220a4:	4630      	mov	r0, r6
 80220a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80220aa:	f7fe bfdf 	b.w	802106c <WM_DefaultProc>
 80220ae:	bf00      	nop
 80220b0:	2000043c 	.word	0x2000043c

080220b4 <WM__SendMessageNoPara>:
 80220b4:	b530      	push	{r4, r5, lr}
 80220b6:	2300      	movs	r3, #0
 80220b8:	b085      	sub	sp, #20
 80220ba:	460c      	mov	r4, r1
 80220bc:	4605      	mov	r5, r0
 80220be:	9301      	str	r3, [sp, #4]
 80220c0:	9300      	str	r3, [sp, #0]
 80220c2:	9302      	str	r3, [sp, #8]
 80220c4:	9303      	str	r3, [sp, #12]
 80220c6:	f7f0 fe65 	bl	8012d94 <GUI_ALLOC_h2p>
 80220ca:	6903      	ldr	r3, [r0, #16]
 80220cc:	b11b      	cbz	r3, 80220d6 <WM__SendMessageNoPara+0x22>
 80220ce:	9501      	str	r5, [sp, #4]
 80220d0:	4668      	mov	r0, sp
 80220d2:	9400      	str	r4, [sp, #0]
 80220d4:	4798      	blx	r3
 80220d6:	b005      	add	sp, #20
 80220d8:	bd30      	pop	{r4, r5, pc}
 80220da:	bf00      	nop

080220dc <WM__UpdateChildPositions>:
 80220dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220e0:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80220e4:	b08b      	sub	sp, #44	; 0x2c
 80220e6:	f1bb 0f00 	cmp.w	fp, #0
 80220ea:	f000 8086 	beq.w	80221fa <WM__UpdateChildPositions+0x11e>
 80220ee:	9307      	str	r3, [sp, #28]
 80220f0:	b29b      	uxth	r3, r3
 80220f2:	9201      	str	r2, [sp, #4]
 80220f4:	9303      	str	r3, [sp, #12]
 80220f6:	b28b      	uxth	r3, r1
 80220f8:	9106      	str	r1, [sp, #24]
 80220fa:	9304      	str	r3, [sp, #16]
 80220fc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8022100:	9305      	str	r3, [sp, #20]
 8022102:	e035      	b.n	8022170 <WM__UpdateChildPositions+0x94>
 8022104:	9906      	ldr	r1, [sp, #24]
 8022106:	1877      	adds	r7, r6, r1
 8022108:	9907      	ldr	r1, [sp, #28]
 802210a:	185d      	adds	r5, r3, r1
 802210c:	b23f      	sxth	r7, r7
 802210e:	b22d      	sxth	r5, r5
 8022110:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8022114:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8022118:	d048      	beq.n	80221ac <WM__UpdateChildPositions+0xd0>
 802211a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 802211e:	d15f      	bne.n	80221e0 <WM__UpdateChildPositions+0x104>
 8022120:	9a01      	ldr	r2, [sp, #4]
 8022122:	eb0a 0802 	add.w	r8, sl, r2
 8022126:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022128:	eb09 0402 	add.w	r4, r9, r2
 802212c:	fa0f f888 	sxth.w	r8, r8
 8022130:	b224      	sxth	r4, r4
 8022132:	42b7      	cmp	r7, r6
 8022134:	ebca 0208 	rsb	r2, sl, r8
 8022138:	eba7 0106 	sub.w	r1, r7, r6
 802213c:	d144      	bne.n	80221c8 <WM__UpdateChildPositions+0xec>
 802213e:	2a00      	cmp	r2, #0
 8022140:	d142      	bne.n	80221c8 <WM__UpdateChildPositions+0xec>
 8022142:	1bed      	subs	r5, r5, r7
 8022144:	1b9e      	subs	r6, r3, r6
 8022146:	ebc8 0404 	rsb	r4, r8, r4
 802214a:	ebca 0909 	rsb	r9, sl, r9
 802214e:	42b5      	cmp	r5, r6
 8022150:	eba5 0106 	sub.w	r1, r5, r6
 8022154:	ebc9 0204 	rsb	r2, r9, r4
 8022158:	d14b      	bne.n	80221f2 <WM__UpdateChildPositions+0x116>
 802215a:	2a00      	cmp	r2, #0
 802215c:	d149      	bne.n	80221f2 <WM__UpdateChildPositions+0x116>
 802215e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022160:	a809      	add	r0, sp, #36	; 0x24
 8022162:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8022166:	f7f0 fe33 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802216a:	f1bb 0f00 	cmp.w	fp, #0
 802216e:	d044      	beq.n	80221fa <WM__UpdateChildPositions+0x11e>
 8022170:	4658      	mov	r0, fp
 8022172:	f7f0 fe19 	bl	8012da8 <GUI_ALLOC_LockH>
 8022176:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8022178:	9009      	str	r0, [sp, #36]	; 0x24
 802217a:	f402 7120 	and.w	r1, r2, #640	; 0x280
 802217e:	f9b0 6000 	ldrsh.w	r6, [r0]
 8022182:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8022186:	2980      	cmp	r1, #128	; 0x80
 8022188:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802218c:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8022190:	d020      	beq.n	80221d4 <WM__UpdateChildPositions+0xf8>
 8022192:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 8022196:	d0b5      	beq.n	8022104 <WM__UpdateChildPositions+0x28>
 8022198:	9904      	ldr	r1, [sp, #16]
 802219a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 802219e:	198f      	adds	r7, r1, r6
 80221a0:	18cd      	adds	r5, r1, r3
 80221a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80221a6:	b23f      	sxth	r7, r7
 80221a8:	b22d      	sxth	r5, r5
 80221aa:	d1b6      	bne.n	802211a <WM__UpdateChildPositions+0x3e>
 80221ac:	9905      	ldr	r1, [sp, #20]
 80221ae:	42b7      	cmp	r7, r6
 80221b0:	eb01 080a 	add.w	r8, r1, sl
 80221b4:	eb01 0409 	add.w	r4, r1, r9
 80221b8:	eba7 0106 	sub.w	r1, r7, r6
 80221bc:	fa0f f888 	sxth.w	r8, r8
 80221c0:	b224      	sxth	r4, r4
 80221c2:	ebca 0208 	rsb	r2, sl, r8
 80221c6:	d0ba      	beq.n	802213e <WM__UpdateChildPositions+0x62>
 80221c8:	4658      	mov	r0, fp
 80221ca:	9302      	str	r3, [sp, #8]
 80221cc:	f7ff fb6e 	bl	80218ac <WM_MoveWindow>
 80221d0:	9b02      	ldr	r3, [sp, #8]
 80221d2:	e7b6      	b.n	8022142 <WM__UpdateChildPositions+0x66>
 80221d4:	9903      	ldr	r1, [sp, #12]
 80221d6:	198f      	adds	r7, r1, r6
 80221d8:	18cd      	adds	r5, r1, r3
 80221da:	b23f      	sxth	r7, r7
 80221dc:	b22d      	sxth	r5, r5
 80221de:	e797      	b.n	8022110 <WM__UpdateChildPositions+0x34>
 80221e0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80221e4:	eb01 080a 	add.w	r8, r1, sl
 80221e8:	4449      	add	r1, r9
 80221ea:	fa0f f888 	sxth.w	r8, r8
 80221ee:	b20c      	sxth	r4, r1
 80221f0:	e79f      	b.n	8022132 <WM__UpdateChildPositions+0x56>
 80221f2:	4658      	mov	r0, fp
 80221f4:	f7ff f9b2 	bl	802155c <WM_ResizeWindow>
 80221f8:	e7b1      	b.n	802215e <WM__UpdateChildPositions+0x82>
 80221fa:	b00b      	add	sp, #44	; 0x2c
 80221fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022200 <WM__AddCriticalHandle>:
 8022200:	4b02      	ldr	r3, [pc, #8]	; (802220c <WM__AddCriticalHandle+0xc>)
 8022202:	681a      	ldr	r2, [r3, #0]
 8022204:	6002      	str	r2, [r0, #0]
 8022206:	6018      	str	r0, [r3, #0]
 8022208:	4770      	bx	lr
 802220a:	bf00      	nop
 802220c:	20046838 	.word	0x20046838

08022210 <WM__RemoveCriticalHandle>:
 8022210:	b410      	push	{r4}
 8022212:	4c0d      	ldr	r4, [pc, #52]	; (8022248 <WM__RemoveCriticalHandle+0x38>)
 8022214:	6821      	ldr	r1, [r4, #0]
 8022216:	b151      	cbz	r1, 802222e <WM__RemoveCriticalHandle+0x1e>
 8022218:	4281      	cmp	r1, r0
 802221a:	d011      	beq.n	8022240 <WM__RemoveCriticalHandle+0x30>
 802221c:	680b      	ldr	r3, [r1, #0]
 802221e:	b133      	cbz	r3, 802222e <WM__RemoveCriticalHandle+0x1e>
 8022220:	4298      	cmp	r0, r3
 8022222:	d007      	beq.n	8022234 <WM__RemoveCriticalHandle+0x24>
 8022224:	681a      	ldr	r2, [r3, #0]
 8022226:	4619      	mov	r1, r3
 8022228:	4613      	mov	r3, r2
 802222a:	2a00      	cmp	r2, #0
 802222c:	d1f8      	bne.n	8022220 <WM__RemoveCriticalHandle+0x10>
 802222e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022232:	4770      	bx	lr
 8022234:	b129      	cbz	r1, 8022242 <WM__RemoveCriticalHandle+0x32>
 8022236:	6803      	ldr	r3, [r0, #0]
 8022238:	f85d 4b04 	ldr.w	r4, [sp], #4
 802223c:	600b      	str	r3, [r1, #0]
 802223e:	4770      	bx	lr
 8022240:	460b      	mov	r3, r1
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	6023      	str	r3, [r4, #0]
 8022246:	e7f2      	b.n	802222e <WM__RemoveCriticalHandle+0x1e>
 8022248:	20046838 	.word	0x20046838

0802224c <WM__GetClientRectEx>:
 802224c:	b180      	cbz	r0, 8022270 <WM__GetClientRectEx+0x24>
 802224e:	b179      	cbz	r1, 8022270 <WM__GetClientRectEx+0x24>
 8022250:	b530      	push	{r4, r5, lr}
 8022252:	b083      	sub	sp, #12
 8022254:	460c      	mov	r4, r1
 8022256:	f7f0 fda7 	bl	8012da8 <GUI_ALLOC_LockH>
 802225a:	ad02      	add	r5, sp, #8
 802225c:	4621      	mov	r1, r4
 802225e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8022262:	f7fe fa53 	bl	802070c <WM__GetClientRectWin>
 8022266:	4628      	mov	r0, r5
 8022268:	f7f0 fdb2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802226c:	b003      	add	sp, #12
 802226e:	bd30      	pop	{r4, r5, pc}
 8022270:	4770      	bx	lr
 8022272:	bf00      	nop

08022274 <_Color2Index_16>:
 8022274:	b4f0      	push	{r4, r5, r6, r7}
 8022276:	f3c0 2407 	ubfx	r4, r0, #8, #8
 802227a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802227e:	b2c0      	uxtb	r0, r0
 8022280:	1c65      	adds	r5, r4, #1
 8022282:	1c56      	adds	r6, r2, #1
 8022284:	1c47      	adds	r7, r0, #1
 8022286:	4613      	mov	r3, r2
 8022288:	2d54      	cmp	r5, #84	; 0x54
 802228a:	bf94      	ite	ls
 802228c:	2500      	movls	r5, #0
 802228e:	2501      	movhi	r5, #1
 8022290:	2e54      	cmp	r6, #84	; 0x54
 8022292:	ea4f 0185 	mov.w	r1, r5, lsl #2
 8022296:	bf94      	ite	ls
 8022298:	2600      	movls	r6, #0
 802229a:	2601      	movhi	r6, #1
 802229c:	2f54      	cmp	r7, #84	; 0x54
 802229e:	eb06 0205 	add.w	r2, r6, r5
 80222a2:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 80222a6:	bf94      	ite	ls
 80222a8:	2700      	movls	r7, #0
 80222aa:	2701      	movhi	r7, #1
 80222ac:	4335      	orrs	r5, r6
 80222ae:	443a      	add	r2, r7
 80222b0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80222b4:	d103      	bne.n	80222be <_Color2Index_16+0x4a>
 80222b6:	b917      	cbnz	r7, 80222be <_Color2Index_16+0x4a>
 80222b8:	4608      	mov	r0, r1
 80222ba:	bcf0      	pop	{r4, r5, r6, r7}
 80222bc:	4770      	bx	lr
 80222be:	4423      	add	r3, r4
 80222c0:	ebc2 1582 	rsb	r5, r2, r2, lsl #6
 80222c4:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
 80222c8:	4403      	add	r3, r0
 80222ca:	1958      	adds	r0, r3, r5
 80222cc:	fbb0 f2f2 	udiv	r2, r0, r2
 80222d0:	eb01 0152 	add.w	r1, r1, r2, lsr #1
 80222d4:	bcf0      	pop	{r4, r5, r6, r7}
 80222d6:	4608      	mov	r0, r1
 80222d8:	4770      	bx	lr
 80222da:	bf00      	nop

080222dc <_Index2Color_16>:
 80222dc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80222e0:	b4f0      	push	{r4, r5, r6, r7}
 80222e2:	ea00 0103 	and.w	r1, r0, r3
 80222e6:	f3c0 0680 	ubfx	r6, r0, #2, #1
 80222ea:	f3c0 0540 	ubfx	r5, r0, #1, #1
 80222ee:	ea00 0706 	and.w	r7, r0, r6
 80222f2:	01ca      	lsls	r2, r1, #7
 80222f4:	4028      	ands	r0, r5
 80222f6:	1a52      	subs	r2, r2, r1
 80222f8:	01fc      	lsls	r4, r7, #7
 80222fa:	01c1      	lsls	r1, r0, #7
 80222fc:	1be4      	subs	r4, r4, r7
 80222fe:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 8022302:	1a08      	subs	r0, r1, r0
 8022304:	eb04 12c6 	add.w	r2, r4, r6, lsl #7
 8022308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 802230c:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 8022310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022314:	bcf0      	pop	{r4, r5, r6, r7}
 8022316:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 802231a:	4770      	bx	lr

0802231c <_GetIndexMask_16>:
 802231c:	200f      	movs	r0, #15
 802231e:	4770      	bx	lr

08022320 <_GetIndexMask_0>:
 8022320:	b508      	push	{r3, lr}
 8022322:	f7f8 fd89 	bl	801ae38 <LCD_GetNumColors>
 8022326:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802232a:	d014      	beq.n	8022356 <_GetIndexMask_0+0x36>
 802232c:	287f      	cmp	r0, #127	; 0x7f
 802232e:	d80e      	bhi.n	802234e <_GetIndexMask_0+0x2e>
 8022330:	283f      	cmp	r0, #63	; 0x3f
 8022332:	d812      	bhi.n	802235a <_GetIndexMask_0+0x3a>
 8022334:	281f      	cmp	r0, #31
 8022336:	d80c      	bhi.n	8022352 <_GetIndexMask_0+0x32>
 8022338:	280f      	cmp	r0, #15
 802233a:	d810      	bhi.n	802235e <_GetIndexMask_0+0x3e>
 802233c:	2807      	cmp	r0, #7
 802233e:	d812      	bhi.n	8022366 <_GetIndexMask_0+0x46>
 8022340:	2803      	cmp	r0, #3
 8022342:	d80e      	bhi.n	8022362 <_GetIndexMask_0+0x42>
 8022344:	2801      	cmp	r0, #1
 8022346:	bf94      	ite	ls
 8022348:	2000      	movls	r0, #0
 802234a:	2001      	movhi	r0, #1
 802234c:	bd08      	pop	{r3, pc}
 802234e:	207f      	movs	r0, #127	; 0x7f
 8022350:	bd08      	pop	{r3, pc}
 8022352:	201f      	movs	r0, #31
 8022354:	bd08      	pop	{r3, pc}
 8022356:	20ff      	movs	r0, #255	; 0xff
 8022358:	bd08      	pop	{r3, pc}
 802235a:	203f      	movs	r0, #63	; 0x3f
 802235c:	bd08      	pop	{r3, pc}
 802235e:	200f      	movs	r0, #15
 8022360:	bd08      	pop	{r3, pc}
 8022362:	2003      	movs	r0, #3
 8022364:	bd08      	pop	{r3, pc}
 8022366:	2007      	movs	r0, #7
 8022368:	bd08      	pop	{r3, pc}
 802236a:	bf00      	nop

0802236c <_Index2Color_0>:
 802236c:	b538      	push	{r3, r4, r5, lr}
 802236e:	4604      	mov	r4, r0
 8022370:	f7f8 fd62 	bl	801ae38 <LCD_GetNumColors>
 8022374:	4605      	mov	r5, r0
 8022376:	f7f8 fd7f 	bl	801ae78 <LCD_GetPalette>
 802237a:	b120      	cbz	r0, 8022386 <_Index2Color_0+0x1a>
 802237c:	42a5      	cmp	r5, r4
 802237e:	d902      	bls.n	8022386 <_Index2Color_0+0x1a>
 8022380:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8022384:	bd38      	pop	{r3, r4, r5, pc}
 8022386:	2000      	movs	r0, #0
 8022388:	bd38      	pop	{r3, r4, r5, pc}
 802238a:	bf00      	nop

0802238c <_Color2Index_0>:
 802238c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022390:	4606      	mov	r6, r0
 8022392:	f7f8 fd51 	bl	801ae38 <LCD_GetNumColors>
 8022396:	4607      	mov	r7, r0
 8022398:	f7f8 fd6e 	bl	801ae78 <LCD_GetPalette>
 802239c:	b158      	cbz	r0, 80223b6 <_Color2Index_0+0x2a>
 802239e:	f1a0 0804 	sub.w	r8, r0, #4
 80223a2:	2000      	movs	r0, #0
 80223a4:	4643      	mov	r3, r8
 80223a6:	e002      	b.n	80223ae <_Color2Index_0+0x22>
 80223a8:	3001      	adds	r0, #1
 80223aa:	4287      	cmp	r7, r0
 80223ac:	dd05      	ble.n	80223ba <_Color2Index_0+0x2e>
 80223ae:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80223b2:	42b2      	cmp	r2, r6
 80223b4:	d1f8      	bne.n	80223a8 <_Color2Index_0+0x1c>
 80223b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80223ba:	2400      	movs	r4, #0
 80223bc:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 80223c0:	4625      	mov	r5, r4
 80223c2:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80223c6:	4630      	mov	r0, r6
 80223c8:	f7f1 fc5a 	bl	8013c80 <GUI_CalcColorDist>
 80223cc:	4581      	cmp	r9, r0
 80223ce:	d901      	bls.n	80223d4 <_Color2Index_0+0x48>
 80223d0:	4681      	mov	r9, r0
 80223d2:	462c      	mov	r4, r5
 80223d4:	3501      	adds	r5, #1
 80223d6:	42af      	cmp	r7, r5
 80223d8:	dcf3      	bgt.n	80223c2 <_Color2Index_0+0x36>
 80223da:	4620      	mov	r0, r4
 80223dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080223e0 <_DrawArc.isra.0.constprop.1>:
 80223e0:	ee07 2a90 	vmov	s15, r2
 80223e4:	4ab6      	ldr	r2, [pc, #728]	; (80226c0 <_DrawArc.isra.0.constprop.1+0x2e0>)
 80223e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80223ea:	6812      	ldr	r2, [r2, #0]
 80223ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223f0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80223f4:	4682      	mov	sl, r0
 80223f6:	460f      	mov	r7, r1
 80223f8:	fb04 f603 	mul.w	r6, r4, r3
 80223fc:	ed2d 8b0a 	vpush	{d8-d12}
 8022400:	7e13      	ldrb	r3, [r2, #24]
 8022402:	b083      	sub	sp, #12
 8022404:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8022408:	4630      	mov	r0, r6
 802240a:	ee07 3a90 	vmov	s15, r3
 802240e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022414:	fb04 f405 	mul.w	r4, r4, r5
 8022418:	eeb0 ca69 	vmov.f32	s24, s19
 802241c:	eee7 9a87 	vfma.f32	s19, s15, s14
 8022420:	eea7 cac7 	vfms.f32	s24, s15, s14
 8022424:	f7f7 fbcc 	bl	8019bc0 <GUI__SinHQ>
 8022428:	ee09 0a10 	vmov	s18, r0
 802242c:	4620      	mov	r0, r4
 802242e:	f7f7 fbc7 	bl	8019bc0 <GUI__SinHQ>
 8022432:	ee08 0a90 	vmov	s17, r0
 8022436:	4630      	mov	r0, r6
 8022438:	f7f7 fc18 	bl	8019c6c <GUI__CosHQ>
 802243c:	ee08 0a10 	vmov	s16, r0
 8022440:	4620      	mov	r0, r4
 8022442:	f7f7 fc13 	bl	8019c6c <GUI__CosHQ>
 8022446:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 802244a:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 802244e:	ee07 0a10 	vmov	s14, r0
 8022452:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 8022456:	ee6c 5a06 	vmul.f32	s11, s24, s12
 802245a:	ee29 6a86 	vmul.f32	s12, s19, s12
 802245e:	ee6c 4a26 	vmul.f32	s9, s24, s13
 8022462:	eebd aae5 	vcvt.s32.f32	s20, s11
 8022466:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 802246a:	eefd aae4 	vcvt.s32.f32	s21, s9
 802246e:	ee1a 3a10 	vmov	r3, s20
 8022472:	ee69 6aa6 	vmul.f32	s13, s19, s13
 8022476:	ee2c 5a27 	vmul.f32	s10, s24, s15
 802247a:	141b      	asrs	r3, r3, #16
 802247c:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8022480:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8022484:	ee0a 3a10 	vmov	s20, r3
 8022488:	ee16 3a10 	vmov	r3, s12
 802248c:	eefd bac5 	vcvt.s32.f32	s23, s10
 8022490:	141b      	asrs	r3, r3, #16
 8022492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802249a:	ee08 3a10 	vmov	s16, r3
 802249e:	ee1a 3a90 	vmov	r3, s21
 80224a2:	ee6c 5a07 	vmul.f32	s11, s24, s14
 80224a6:	141b      	asrs	r3, r3, #16
 80224a8:	ee29 7a87 	vmul.f32	s14, s19, s14
 80224ac:	ee2c ca0c 	vmul.f32	s24, s24, s24
 80224b0:	ee0a 3a90 	vmov	s21, r3
 80224b4:	ee16 3a90 	vmov	r3, s13
 80224b8:	eebd bae5 	vcvt.s32.f32	s22, s11
 80224bc:	141b      	asrs	r3, r3, #16
 80224be:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80224c2:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80224c6:	ee08 3a90 	vmov	s17, r3
 80224ca:	ee1b 3a90 	vmov	r3, s23
 80224ce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80224d2:	141b      	asrs	r3, r3, #16
 80224d4:	ee1a 0a10 	vmov	r0, s20
 80224d8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80224dc:	ee0b 3a90 	vmov	s23, r3
 80224e0:	ee17 3a90 	vmov	r3, s15
 80224e4:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80224e8:	141b      	asrs	r3, r3, #16
 80224ea:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80224ee:	eef8 baeb 	vcvt.f32.s32	s23, s23
 80224f2:	ee09 3a10 	vmov	s18, r3
 80224f6:	ee1b 3a10 	vmov	r3, s22
 80224fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80224fe:	141b      	asrs	r3, r3, #16
 8022500:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8022504:	ee0b 3a10 	vmov	s22, r3
 8022508:	ee17 3a10 	vmov	r3, s14
 802250c:	ee17 8a90 	vmov	r8, s15
 8022510:	141b      	asrs	r3, r3, #16
 8022512:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8022516:	ee07 3a10 	vmov	s14, r3
 802251a:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 802251e:	eebc 7acc 	vcvt.u32.f32	s14, s24
 8022522:	ee17 9a10 	vmov	r9, s14
 8022526:	f7dd ffdf 	bl	80004e8 <__aeabi_f2d>
 802252a:	ec41 0b10 	vmov	d0, r0, r1
 802252e:	f003 fbd3 	bl	8025cd8 <ceil>
 8022532:	ec51 0b10 	vmov	r0, r1, d0
 8022536:	f7de fadb 	bl	8000af0 <__aeabi_d2iz>
 802253a:	4683      	mov	fp, r0
 802253c:	ee18 0a90 	vmov	r0, s17
 8022540:	f7dd ffd2 	bl	80004e8 <__aeabi_f2d>
 8022544:	ec41 0b10 	vmov	d0, r0, r1
 8022548:	f003 fc4a 	bl	8025de0 <floor>
 802254c:	ec51 0b10 	vmov	r0, r1, d0
 8022550:	f7de face 	bl	8000af0 <__aeabi_d2iz>
 8022554:	4b5a      	ldr	r3, [pc, #360]	; (80226c0 <_DrawArc.isra.0.constprop.1+0x2e0>)
 8022556:	4606      	mov	r6, r0
 8022558:	6819      	ldr	r1, [r3, #0]
 802255a:	694b      	ldr	r3, [r1, #20]
 802255c:	b133      	cbz	r3, 802256c <_DrawArc.isra.0.constprop.1+0x18c>
 802255e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022560:	2a01      	cmp	r2, #1
 8022562:	f000 809f 	beq.w	80226a4 <_DrawArc.isra.0.constprop.1+0x2c4>
 8022566:	3201      	adds	r2, #1
 8022568:	f000 808f 	beq.w	802268a <_DrawArc.isra.0.constprop.1+0x2aa>
 802256c:	45b3      	cmp	fp, r6
 802256e:	f300 8087 	bgt.w	8022680 <_DrawArc.isra.0.constprop.1+0x2a0>
 8022572:	ee78 7a4a 	vsub.f32	s15, s16, s20
 8022576:	fb06 f006 	mul.w	r0, r6, r6
 802257a:	ee39 6a6b 	vsub.f32	s12, s18, s23
 802257e:	2400      	movs	r4, #0
 8022580:	ee39 7acb 	vsub.f32	s14, s19, s22
 8022584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022586:	ee78 6aea 	vsub.f32	s13, s17, s21
 802258a:	4581      	cmp	r9, r0
 802258c:	ee86 ca27 	vdiv.f32	s24, s12, s15
 8022590:	fb06 7703 	mla	r7, r6, r3, r7
 8022594:	4625      	mov	r5, r4
 8022596:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 802259a:	eec7 9a26 	vdiv.f32	s19, s14, s13
 802259e:	edcd 7a01 	vstr	s15, [sp, #4]
 80225a2:	d95c      	bls.n	802265e <_DrawArc.isra.0.constprop.1+0x27e>
 80225a4:	ebc0 0e09 	rsb	lr, r0, r9
 80225a8:	e000      	b.n	80225ac <_DrawArc.isra.0.constprop.1+0x1cc>
 80225aa:	461d      	mov	r5, r3
 80225ac:	1c6b      	adds	r3, r5, #1
 80225ae:	fb03 f203 	mul.w	r2, r3, r3
 80225b2:	4596      	cmp	lr, r2
 80225b4:	d8f9      	bhi.n	80225aa <_DrawArc.isra.0.constprop.1+0x1ca>
 80225b6:	4580      	cmp	r8, r0
 80225b8:	d955      	bls.n	8022666 <_DrawArc.isra.0.constprop.1+0x286>
 80225ba:	ebc0 0008 	rsb	r0, r0, r8
 80225be:	e000      	b.n	80225c2 <_DrawArc.isra.0.constprop.1+0x1e2>
 80225c0:	461c      	mov	r4, r3
 80225c2:	1c63      	adds	r3, r4, #1
 80225c4:	fb03 f203 	mul.w	r2, r3, r3
 80225c8:	4290      	cmp	r0, r2
 80225ca:	d8f9      	bhi.n	80225c0 <_DrawArc.isra.0.constprop.1+0x1e0>
 80225cc:	3c01      	subs	r4, #1
 80225ce:	ee07 6a90 	vmov	s15, r6
 80225d2:	9b01      	ldr	r3, [sp, #4]
 80225d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80225d8:	429c      	cmp	r4, r3
 80225da:	bfa8      	it	ge
 80225dc:	461c      	movge	r4, r3
 80225de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80225e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225e6:	dd43      	ble.n	8022670 <_DrawArc.isra.0.constprop.1+0x290>
 80225e8:	eeb4 aa48 	vcmp.f32	s20, s16
 80225ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225f0:	d043      	beq.n	802267a <_DrawArc.isra.0.constprop.1+0x29a>
 80225f2:	ee37 7aca 	vsub.f32	s14, s15, s20
 80225f6:	eef0 6a6b 	vmov.f32	s13, s23
 80225fa:	eeec 6a07 	vfma.f32	s13, s24, s14
 80225fe:	eeb0 7a66 	vmov.f32	s14, s13
 8022602:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8022606:	ee17 0a10 	vmov	r0, s14
 802260a:	eef4 aae7 	vcmpe.f32	s21, s15
 802260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022612:	d52b      	bpl.n	802266c <_DrawArc.isra.0.constprop.1+0x28c>
 8022614:	eef4 aa68 	vcmp.f32	s21, s17
 8022618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802261c:	d02a      	beq.n	8022674 <_DrawArc.isra.0.constprop.1+0x294>
 802261e:	ee77 7aea 	vsub.f32	s15, s15, s21
 8022622:	eeb0 7a4b 	vmov.f32	s14, s22
 8022626:	eea9 7aa7 	vfma.f32	s14, s19, s15
 802262a:	eef0 7a47 	vmov.f32	s15, s14
 802262e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022632:	ee17 2a90 	vmov	r2, s15
 8022636:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8022638:	3e01      	subs	r6, #1
 802263a:	4639      	mov	r1, r7
 802263c:	ebc2 020a 	rsb	r2, r2, sl
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	ebc0 000a 	rsb	r0, r0, sl
 8022646:	4798      	blx	r3
 8022648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802264a:	455e      	cmp	r6, fp
 802264c:	eba7 0703 	sub.w	r7, r7, r3
 8022650:	db16      	blt.n	8022680 <_DrawArc.isra.0.constprop.1+0x2a0>
 8022652:	fb06 f006 	mul.w	r0, r6, r6
 8022656:	4b1a      	ldr	r3, [pc, #104]	; (80226c0 <_DrawArc.isra.0.constprop.1+0x2e0>)
 8022658:	4581      	cmp	r9, r0
 802265a:	6819      	ldr	r1, [r3, #0]
 802265c:	d8a2      	bhi.n	80225a4 <_DrawArc.isra.0.constprop.1+0x1c4>
 802265e:	4580      	cmp	r8, r0
 8022660:	f04f 0500 	mov.w	r5, #0
 8022664:	d8a9      	bhi.n	80225ba <_DrawArc.isra.0.constprop.1+0x1da>
 8022666:	f04f 34ff 	mov.w	r4, #4294967295
 802266a:	e7b0      	b.n	80225ce <_DrawArc.isra.0.constprop.1+0x1ee>
 802266c:	462a      	mov	r2, r5
 802266e:	e7e2      	b.n	8022636 <_DrawArc.isra.0.constprop.1+0x256>
 8022670:	4620      	mov	r0, r4
 8022672:	e7ca      	b.n	802260a <_DrawArc.isra.0.constprop.1+0x22a>
 8022674:	eef0 7a68 	vmov.f32	s15, s17
 8022678:	e7d9      	b.n	802262e <_DrawArc.isra.0.constprop.1+0x24e>
 802267a:	eeb0 7a48 	vmov.f32	s14, s16
 802267e:	e7c0      	b.n	8022602 <_DrawArc.isra.0.constprop.1+0x222>
 8022680:	b003      	add	sp, #12
 8022682:	ecbd 8b0a 	vpop	{d8-d12}
 8022686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802268a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802268e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022692:	1bd2      	subs	r2, r2, r7
 8022694:	1bdb      	subs	r3, r3, r7
 8022696:	4593      	cmp	fp, r2
 8022698:	bfa8      	it	ge
 802269a:	4693      	movge	fp, r2
 802269c:	4298      	cmp	r0, r3
 802269e:	bfb8      	it	lt
 80226a0:	461e      	movlt	r6, r3
 80226a2:	e763      	b.n	802256c <_DrawArc.isra.0.constprop.1+0x18c>
 80226a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80226a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80226ac:	1bd2      	subs	r2, r2, r7
 80226ae:	1bdb      	subs	r3, r3, r7
 80226b0:	4290      	cmp	r0, r2
 80226b2:	bfa8      	it	ge
 80226b4:	4616      	movge	r6, r2
 80226b6:	459b      	cmp	fp, r3
 80226b8:	bfb8      	it	lt
 80226ba:	469b      	movlt	fp, r3
 80226bc:	e756      	b.n	802256c <_DrawArc.isra.0.constprop.1+0x18c>
 80226be:	bf00      	nop
 80226c0:	20000018 	.word	0x20000018

080226c4 <_DrawArc.isra.0.constprop.2>:
 80226c4:	ee07 2a90 	vmov	s15, r2
 80226c8:	4ab5      	ldr	r2, [pc, #724]	; (80229a0 <_DrawArc.isra.0.constprop.2+0x2dc>)
 80226ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80226ce:	6812      	ldr	r2, [r2, #0]
 80226d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80226d8:	4682      	mov	sl, r0
 80226da:	460f      	mov	r7, r1
 80226dc:	fb04 f603 	mul.w	r6, r4, r3
 80226e0:	ed2d 8b0a 	vpush	{d8-d12}
 80226e4:	7e13      	ldrb	r3, [r2, #24]
 80226e6:	b083      	sub	sp, #12
 80226e8:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80226ec:	4630      	mov	r0, r6
 80226ee:	ee07 3a90 	vmov	s15, r3
 80226f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80226f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80226f8:	fb04 f405 	mul.w	r4, r4, r5
 80226fc:	eeb0 ca69 	vmov.f32	s24, s19
 8022700:	eee7 9a87 	vfma.f32	s19, s15, s14
 8022704:	eea7 cac7 	vfms.f32	s24, s15, s14
 8022708:	f7f7 fa5a 	bl	8019bc0 <GUI__SinHQ>
 802270c:	ee09 0a10 	vmov	s18, r0
 8022710:	4620      	mov	r0, r4
 8022712:	f7f7 fa55 	bl	8019bc0 <GUI__SinHQ>
 8022716:	ee08 0a90 	vmov	s17, r0
 802271a:	4630      	mov	r0, r6
 802271c:	f7f7 faa6 	bl	8019c6c <GUI__CosHQ>
 8022720:	ee08 0a10 	vmov	s16, r0
 8022724:	4620      	mov	r0, r4
 8022726:	f7f7 faa1 	bl	8019c6c <GUI__CosHQ>
 802272a:	eeb8 6ac9 	vcvt.f32.s32	s12, s18
 802272e:	eef8 6ae8 	vcvt.f32.s32	s13, s17
 8022732:	ee07 0a10 	vmov	s14, r0
 8022736:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 802273a:	ee6c 5a06 	vmul.f32	s11, s24, s12
 802273e:	ee29 6a86 	vmul.f32	s12, s19, s12
 8022742:	ee6c 4a26 	vmul.f32	s9, s24, s13
 8022746:	eebd aae5 	vcvt.s32.f32	s20, s11
 802274a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 802274e:	eefd aae4 	vcvt.s32.f32	s21, s9
 8022752:	ee1a 3a10 	vmov	r3, s20
 8022756:	ee69 6aa6 	vmul.f32	s13, s19, s13
 802275a:	ee2c 5a27 	vmul.f32	s10, s24, s15
 802275e:	141b      	asrs	r3, r3, #16
 8022760:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8022764:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8022768:	ee0a 3a10 	vmov	s20, r3
 802276c:	ee16 3a10 	vmov	r3, s12
 8022770:	eefd bac5 	vcvt.s32.f32	s23, s10
 8022774:	141b      	asrs	r3, r3, #16
 8022776:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802277a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802277e:	ee08 3a10 	vmov	s16, r3
 8022782:	ee1a 3a90 	vmov	r3, s21
 8022786:	ee6c 5a07 	vmul.f32	s11, s24, s14
 802278a:	141b      	asrs	r3, r3, #16
 802278c:	ee29 7a87 	vmul.f32	s14, s19, s14
 8022790:	ee2c ca0c 	vmul.f32	s24, s24, s24
 8022794:	ee0a 3a90 	vmov	s21, r3
 8022798:	ee16 3a90 	vmov	r3, s13
 802279c:	eebd bae5 	vcvt.s32.f32	s22, s11
 80227a0:	141b      	asrs	r3, r3, #16
 80227a2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80227a6:	eeb8 aaca 	vcvt.f32.s32	s20, s20
 80227aa:	ee08 3a90 	vmov	s17, r3
 80227ae:	ee1b 3a90 	vmov	r3, s23
 80227b2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80227b6:	141b      	asrs	r3, r3, #16
 80227b8:	ee1a 0a10 	vmov	r0, s20
 80227bc:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80227c0:	ee0b 3a90 	vmov	s23, r3
 80227c4:	ee17 3a90 	vmov	r3, s15
 80227c8:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80227cc:	141b      	asrs	r3, r3, #16
 80227ce:	eef8 aaea 	vcvt.f32.s32	s21, s21
 80227d2:	eef8 baeb 	vcvt.f32.s32	s23, s23
 80227d6:	ee09 3a10 	vmov	s18, r3
 80227da:	ee1b 3a10 	vmov	r3, s22
 80227de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80227e2:	141b      	asrs	r3, r3, #16
 80227e4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80227e8:	ee0b 3a10 	vmov	s22, r3
 80227ec:	ee17 3a10 	vmov	r3, s14
 80227f0:	ee17 8a90 	vmov	r8, s15
 80227f4:	141b      	asrs	r3, r3, #16
 80227f6:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 80227fa:	ee07 3a10 	vmov	s14, r3
 80227fe:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 8022802:	eebc 7acc 	vcvt.u32.f32	s14, s24
 8022806:	ee17 9a10 	vmov	r9, s14
 802280a:	f7dd fe6d 	bl	80004e8 <__aeabi_f2d>
 802280e:	ec41 0b10 	vmov	d0, r0, r1
 8022812:	f003 fa61 	bl	8025cd8 <ceil>
 8022816:	ec51 0b10 	vmov	r0, r1, d0
 802281a:	f7de f969 	bl	8000af0 <__aeabi_d2iz>
 802281e:	4683      	mov	fp, r0
 8022820:	ee18 0a90 	vmov	r0, s17
 8022824:	f7dd fe60 	bl	80004e8 <__aeabi_f2d>
 8022828:	ec41 0b10 	vmov	d0, r0, r1
 802282c:	f003 fad8 	bl	8025de0 <floor>
 8022830:	ec51 0b10 	vmov	r0, r1, d0
 8022834:	f7de f95c 	bl	8000af0 <__aeabi_d2iz>
 8022838:	4b59      	ldr	r3, [pc, #356]	; (80229a0 <_DrawArc.isra.0.constprop.2+0x2dc>)
 802283a:	4606      	mov	r6, r0
 802283c:	6819      	ldr	r1, [r3, #0]
 802283e:	694b      	ldr	r3, [r1, #20]
 8022840:	b133      	cbz	r3, 8022850 <_DrawArc.isra.0.constprop.2+0x18c>
 8022842:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022844:	2a01      	cmp	r2, #1
 8022846:	f000 809d 	beq.w	8022984 <_DrawArc.isra.0.constprop.2+0x2c0>
 802284a:	3201      	adds	r2, #1
 802284c:	f000 808d 	beq.w	802296a <_DrawArc.isra.0.constprop.2+0x2a6>
 8022850:	45b3      	cmp	fp, r6
 8022852:	f300 8085 	bgt.w	8022960 <_DrawArc.isra.0.constprop.2+0x29c>
 8022856:	ee78 7a4a 	vsub.f32	s15, s16, s20
 802285a:	fb06 f006 	mul.w	r0, r6, r6
 802285e:	ee39 6a6b 	vsub.f32	s12, s18, s23
 8022862:	2400      	movs	r4, #0
 8022864:	ee39 7acb 	vsub.f32	s14, s19, s22
 8022868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802286a:	ee78 6aea 	vsub.f32	s13, s17, s21
 802286e:	4581      	cmp	r9, r0
 8022870:	ee86 ca27 	vdiv.f32	s24, s12, s15
 8022874:	fb06 7703 	mla	r7, r6, r3, r7
 8022878:	4625      	mov	r5, r4
 802287a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 802287e:	eec7 9a26 	vdiv.f32	s19, s14, s13
 8022882:	edcd 7a01 	vstr	s15, [sp, #4]
 8022886:	d95a      	bls.n	802293e <_DrawArc.isra.0.constprop.2+0x27a>
 8022888:	ebc0 0e09 	rsb	lr, r0, r9
 802288c:	e000      	b.n	8022890 <_DrawArc.isra.0.constprop.2+0x1cc>
 802288e:	461d      	mov	r5, r3
 8022890:	1c6b      	adds	r3, r5, #1
 8022892:	fb03 f203 	mul.w	r2, r3, r3
 8022896:	4596      	cmp	lr, r2
 8022898:	d8f9      	bhi.n	802288e <_DrawArc.isra.0.constprop.2+0x1ca>
 802289a:	4580      	cmp	r8, r0
 802289c:	d953      	bls.n	8022946 <_DrawArc.isra.0.constprop.2+0x282>
 802289e:	ebc0 0008 	rsb	r0, r0, r8
 80228a2:	e000      	b.n	80228a6 <_DrawArc.isra.0.constprop.2+0x1e2>
 80228a4:	461c      	mov	r4, r3
 80228a6:	1c63      	adds	r3, r4, #1
 80228a8:	fb03 f203 	mul.w	r2, r3, r3
 80228ac:	4290      	cmp	r0, r2
 80228ae:	d8f9      	bhi.n	80228a4 <_DrawArc.isra.0.constprop.2+0x1e0>
 80228b0:	3c01      	subs	r4, #1
 80228b2:	ee07 6a90 	vmov	s15, r6
 80228b6:	9b01      	ldr	r3, [sp, #4]
 80228b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80228bc:	429c      	cmp	r4, r3
 80228be:	bfa8      	it	ge
 80228c0:	461c      	movge	r4, r3
 80228c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80228c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228ca:	dd41      	ble.n	8022950 <_DrawArc.isra.0.constprop.2+0x28c>
 80228cc:	eeb4 aa48 	vcmp.f32	s20, s16
 80228d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228d4:	d041      	beq.n	802295a <_DrawArc.isra.0.constprop.2+0x296>
 80228d6:	ee37 7aca 	vsub.f32	s14, s15, s20
 80228da:	eef0 6a6b 	vmov.f32	s13, s23
 80228de:	eeec 6a07 	vfma.f32	s13, s24, s14
 80228e2:	eeb0 7a66 	vmov.f32	s14, s13
 80228e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80228ea:	ee17 2a10 	vmov	r2, s14
 80228ee:	eef4 aae7 	vcmpe.f32	s21, s15
 80228f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228f6:	d529      	bpl.n	802294c <_DrawArc.isra.0.constprop.2+0x288>
 80228f8:	eef4 aa68 	vcmp.f32	s21, s17
 80228fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022900:	d028      	beq.n	8022954 <_DrawArc.isra.0.constprop.2+0x290>
 8022902:	ee77 7aea 	vsub.f32	s15, s15, s21
 8022906:	eeb0 7a4b 	vmov.f32	s14, s22
 802290a:	eea9 7aa7 	vfma.f32	s14, s19, s15
 802290e:	eef0 7a47 	vmov.f32	s15, s14
 8022912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022916:	ee17 0a90 	vmov	r0, s15
 802291a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802291c:	3e01      	subs	r6, #1
 802291e:	4639      	mov	r1, r7
 8022920:	4452      	add	r2, sl
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	4450      	add	r0, sl
 8022926:	4798      	blx	r3
 8022928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802292a:	455e      	cmp	r6, fp
 802292c:	eba7 0703 	sub.w	r7, r7, r3
 8022930:	db16      	blt.n	8022960 <_DrawArc.isra.0.constprop.2+0x29c>
 8022932:	fb06 f006 	mul.w	r0, r6, r6
 8022936:	4b1a      	ldr	r3, [pc, #104]	; (80229a0 <_DrawArc.isra.0.constprop.2+0x2dc>)
 8022938:	4581      	cmp	r9, r0
 802293a:	6819      	ldr	r1, [r3, #0]
 802293c:	d8a4      	bhi.n	8022888 <_DrawArc.isra.0.constprop.2+0x1c4>
 802293e:	4580      	cmp	r8, r0
 8022940:	f04f 0500 	mov.w	r5, #0
 8022944:	d8ab      	bhi.n	802289e <_DrawArc.isra.0.constprop.2+0x1da>
 8022946:	f04f 34ff 	mov.w	r4, #4294967295
 802294a:	e7b2      	b.n	80228b2 <_DrawArc.isra.0.constprop.2+0x1ee>
 802294c:	4628      	mov	r0, r5
 802294e:	e7e4      	b.n	802291a <_DrawArc.isra.0.constprop.2+0x256>
 8022950:	4622      	mov	r2, r4
 8022952:	e7cc      	b.n	80228ee <_DrawArc.isra.0.constprop.2+0x22a>
 8022954:	eef0 7a68 	vmov.f32	s15, s17
 8022958:	e7db      	b.n	8022912 <_DrawArc.isra.0.constprop.2+0x24e>
 802295a:	eeb0 7a48 	vmov.f32	s14, s16
 802295e:	e7c2      	b.n	80228e6 <_DrawArc.isra.0.constprop.2+0x222>
 8022960:	b003      	add	sp, #12
 8022962:	ecbd 8b0a 	vpop	{d8-d12}
 8022966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802296a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802296e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022972:	1bd2      	subs	r2, r2, r7
 8022974:	1bdb      	subs	r3, r3, r7
 8022976:	4593      	cmp	fp, r2
 8022978:	bfa8      	it	ge
 802297a:	4693      	movge	fp, r2
 802297c:	4298      	cmp	r0, r3
 802297e:	bfb8      	it	lt
 8022980:	461e      	movlt	r6, r3
 8022982:	e765      	b.n	8022850 <_DrawArc.isra.0.constprop.2+0x18c>
 8022984:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8022988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802298c:	1bd2      	subs	r2, r2, r7
 802298e:	1bdb      	subs	r3, r3, r7
 8022990:	4290      	cmp	r0, r2
 8022992:	bfa8      	it	ge
 8022994:	4616      	movge	r6, r2
 8022996:	459b      	cmp	fp, r3
 8022998:	bfb8      	it	lt
 802299a:	469b      	movlt	fp, r3
 802299c:	e758      	b.n	8022850 <_DrawArc.isra.0.constprop.2+0x18c>
 802299e:	bf00      	nop
 80229a0:	20000018 	.word	0x20000018

080229a4 <GL_DrawArc>:
 80229a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229a8:	b083      	sub	sp, #12
 80229aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80229ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229ae:	f506 74b4 	add.w	r4, r6, #360	; 0x168
 80229b2:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 80229b6:	db79      	blt.n	8022aac <GL_DrawArc+0x108>
 80229b8:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 80229bc:	18e5      	adds	r5, r4, r3
 80229be:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 80229c2:	eba5 0506 	sub.w	r5, r5, r6
 80229c6:	daf7      	bge.n	80229b8 <GL_DrawArc+0x14>
 80229c8:	2d00      	cmp	r5, #0
 80229ca:	dd6c      	ble.n	8022aa6 <GL_DrawArc+0x102>
 80229cc:	4692      	mov	sl, r2
 80229ce:	4689      	mov	r9, r1
 80229d0:	4680      	mov	r8, r0
 80229d2:	f5a5 7787 	sub.w	r7, r5, #270	; 0x10e
 80229d6:	f1a5 06b4 	sub.w	r6, r5, #180	; 0xb4
 80229da:	f04f 3bff 	mov.w	fp, #4294967295
 80229de:	e04c      	b.n	8022a7a <GL_DrawArc+0xd6>
 80229e0:	2c59      	cmp	r4, #89	; 0x59
 80229e2:	dc11      	bgt.n	8022a08 <GL_DrawArc+0x64>
 80229e4:	2b5a      	cmp	r3, #90	; 0x5a
 80229e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80229ea:	f8cd b004 	str.w	fp, [sp, #4]
 80229ee:	4652      	mov	r2, sl
 80229f0:	bfa8      	it	ge
 80229f2:	235a      	movge	r3, #90	; 0x5a
 80229f4:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 80229f8:	4649      	mov	r1, r9
 80229fa:	4640      	mov	r0, r8
 80229fc:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8022a00:	f8cd e000 	str.w	lr, [sp]
 8022a04:	f7ff fcec 	bl	80223e0 <_DrawArc.isra.0.constprop.1>
 8022a08:	2e00      	cmp	r6, #0
 8022a0a:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 8022a0e:	dd4a      	ble.n	8022aa6 <GL_DrawArc+0x102>
 8022a10:	2c59      	cmp	r4, #89	; 0x59
 8022a12:	dc0f      	bgt.n	8022a34 <GL_DrawArc+0x90>
 8022a14:	2e5a      	cmp	r6, #90	; 0x5a
 8022a16:	4631      	mov	r1, r6
 8022a18:	f04f 0301 	mov.w	r3, #1
 8022a1c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022a20:	bfa8      	it	ge
 8022a22:	215a      	movge	r1, #90	; 0x5a
 8022a24:	4652      	mov	r2, sl
 8022a26:	9301      	str	r3, [sp, #4]
 8022a28:	4640      	mov	r0, r8
 8022a2a:	9100      	str	r1, [sp, #0]
 8022a2c:	4623      	mov	r3, r4
 8022a2e:	4649      	mov	r1, r9
 8022a30:	f7ff fcd6 	bl	80223e0 <_DrawArc.isra.0.constprop.1>
 8022a34:	2f00      	cmp	r7, #0
 8022a36:	f1a4 045a 	sub.w	r4, r4, #90	; 0x5a
 8022a3a:	dd34      	ble.n	8022aa6 <GL_DrawArc+0x102>
 8022a3c:	2c59      	cmp	r4, #89	; 0x59
 8022a3e:	dc13      	bgt.n	8022a68 <GL_DrawArc+0xc4>
 8022a40:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022a44:	2f5a      	cmp	r7, #90	; 0x5a
 8022a46:	463b      	mov	r3, r7
 8022a48:	f04f 0201 	mov.w	r2, #1
 8022a4c:	bfa8      	it	ge
 8022a4e:	235a      	movge	r3, #90	; 0x5a
 8022a50:	f1c4 0e5a 	rsb	lr, r4, #90	; 0x5a
 8022a54:	9201      	str	r2, [sp, #4]
 8022a56:	4649      	mov	r1, r9
 8022a58:	4652      	mov	r2, sl
 8022a5a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8022a5e:	4640      	mov	r0, r8
 8022a60:	f8cd e000 	str.w	lr, [sp]
 8022a64:	f7ff fe2e 	bl	80226c4 <_DrawArc.isra.0.constprop.2>
 8022a68:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8022a6c:	3c5a      	subs	r4, #90	; 0x5a
 8022a6e:	f5a7 77b4 	sub.w	r7, r7, #360	; 0x168
 8022a72:	f5a6 76b4 	sub.w	r6, r6, #360	; 0x168
 8022a76:	2d00      	cmp	r5, #0
 8022a78:	dd15      	ble.n	8022aa6 <GL_DrawArc+0x102>
 8022a7a:	2c59      	cmp	r4, #89	; 0x59
 8022a7c:	dc0e      	bgt.n	8022a9c <GL_DrawArc+0xf8>
 8022a7e:	2d5a      	cmp	r5, #90	; 0x5a
 8022a80:	4629      	mov	r1, r5
 8022a82:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022a86:	f8cd b004 	str.w	fp, [sp, #4]
 8022a8a:	bfa8      	it	ge
 8022a8c:	215a      	movge	r1, #90	; 0x5a
 8022a8e:	4652      	mov	r2, sl
 8022a90:	4623      	mov	r3, r4
 8022a92:	4640      	mov	r0, r8
 8022a94:	9100      	str	r1, [sp, #0]
 8022a96:	4649      	mov	r1, r9
 8022a98:	f7ff fe14 	bl	80226c4 <_DrawArc.isra.0.constprop.2>
 8022a9c:	f1a5 035a 	sub.w	r3, r5, #90	; 0x5a
 8022aa0:	3c5a      	subs	r4, #90	; 0x5a
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	dc9c      	bgt.n	80229e0 <GL_DrawArc+0x3c>
 8022aa6:	b003      	add	sp, #12
 8022aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022aac:	f503 75b4 	add.w	r5, r3, #360	; 0x168
 8022ab0:	e78a      	b.n	80229c8 <GL_DrawArc+0x24>
 8022ab2:	bf00      	nop

08022ab4 <GUI_GetYAdjust>:
 8022ab4:	b510      	push	{r4, lr}
 8022ab6:	f7f5 fd75 	bl	80185a4 <GUI_Lock>
 8022aba:	4b0f      	ldr	r3, [pc, #60]	; (8022af8 <GUI_GetYAdjust+0x44>)
 8022abc:	681a      	ldr	r2, [r3, #0]
 8022abe:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8022ac0:	f003 030c 	and.w	r3, r3, #12
 8022ac4:	2b08      	cmp	r3, #8
 8022ac6:	d008      	beq.n	8022ada <GUI_GetYAdjust+0x26>
 8022ac8:	2b0c      	cmp	r3, #12
 8022aca:	d006      	beq.n	8022ada <GUI_GetYAdjust+0x26>
 8022acc:	2b04      	cmp	r3, #4
 8022ace:	d00b      	beq.n	8022ae8 <GUI_GetYAdjust+0x34>
 8022ad0:	2400      	movs	r4, #0
 8022ad2:	f7f5 fd5d 	bl	8018590 <GUI_Unlock>
 8022ad6:	4620      	mov	r0, r4
 8022ad8:	bd10      	pop	{r4, pc}
 8022ada:	69d3      	ldr	r3, [r2, #28]
 8022adc:	7e1c      	ldrb	r4, [r3, #24]
 8022ade:	f7f5 fd57 	bl	8018590 <GUI_Unlock>
 8022ae2:	0864      	lsrs	r4, r4, #1
 8022ae4:	4620      	mov	r0, r4
 8022ae6:	bd10      	pop	{r4, pc}
 8022ae8:	69d3      	ldr	r3, [r2, #28]
 8022aea:	7e1c      	ldrb	r4, [r3, #24]
 8022aec:	f7f5 fd50 	bl	8018590 <GUI_Unlock>
 8022af0:	3c01      	subs	r4, #1
 8022af2:	4620      	mov	r0, r4
 8022af4:	bd10      	pop	{r4, pc}
 8022af6:	bf00      	nop
 8022af8:	20000018 	.word	0x20000018

08022afc <GUI_GetFontDistY>:
 8022afc:	b510      	push	{r4, lr}
 8022afe:	f7f5 fd51 	bl	80185a4 <GUI_Lock>
 8022b02:	4b04      	ldr	r3, [pc, #16]	; (8022b14 <GUI_GetFontDistY+0x18>)
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	69db      	ldr	r3, [r3, #28]
 8022b08:	7e5c      	ldrb	r4, [r3, #25]
 8022b0a:	f7f5 fd41 	bl	8018590 <GUI_Unlock>
 8022b0e:	4620      	mov	r0, r4
 8022b10:	bd10      	pop	{r4, pc}
 8022b12:	bf00      	nop
 8022b14:	20000018 	.word	0x20000018

08022b18 <GUI_GetCharDistX>:
 8022b18:	b510      	push	{r4, lr}
 8022b1a:	4604      	mov	r4, r0
 8022b1c:	f7f5 fd42 	bl	80185a4 <GUI_Lock>
 8022b20:	4b05      	ldr	r3, [pc, #20]	; (8022b38 <GUI_GetCharDistX+0x20>)
 8022b22:	2100      	movs	r1, #0
 8022b24:	4620      	mov	r0, r4
 8022b26:	681b      	ldr	r3, [r3, #0]
 8022b28:	69db      	ldr	r3, [r3, #28]
 8022b2a:	685b      	ldr	r3, [r3, #4]
 8022b2c:	4798      	blx	r3
 8022b2e:	4604      	mov	r4, r0
 8022b30:	f7f5 fd2e 	bl	8018590 <GUI_Unlock>
 8022b34:	4620      	mov	r0, r4
 8022b36:	bd10      	pop	{r4, pc}
 8022b38:	20000018 	.word	0x20000018

08022b3c <GUI_GetCharDistXEx>:
 8022b3c:	b538      	push	{r3, r4, r5, lr}
 8022b3e:	4604      	mov	r4, r0
 8022b40:	460d      	mov	r5, r1
 8022b42:	f7f5 fd2f 	bl	80185a4 <GUI_Lock>
 8022b46:	4b06      	ldr	r3, [pc, #24]	; (8022b60 <GUI_GetCharDistXEx+0x24>)
 8022b48:	4629      	mov	r1, r5
 8022b4a:	4620      	mov	r0, r4
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	69db      	ldr	r3, [r3, #28]
 8022b50:	685b      	ldr	r3, [r3, #4]
 8022b52:	4798      	blx	r3
 8022b54:	4604      	mov	r4, r0
 8022b56:	f7f5 fd1b 	bl	8018590 <GUI_Unlock>
 8022b5a:	4620      	mov	r0, r4
 8022b5c:	bd38      	pop	{r3, r4, r5, pc}
 8022b5e:	bf00      	nop
 8022b60:	20000018 	.word	0x20000018

08022b64 <_Log2VisBuffered>:
 8022b64:	4770      	bx	lr
 8022b66:	bf00      	nop

08022b68 <_DispLine>:
 8022b68:	b570      	push	{r4, r5, r6, lr}
 8022b6a:	b082      	sub	sp, #8
 8022b6c:	4d21      	ldr	r5, [pc, #132]	; (8022bf4 <_DispLine+0x8c>)
 8022b6e:	4c22      	ldr	r4, [pc, #136]	; (8022bf8 <_DispLine+0x90>)
 8022b70:	4616      	mov	r6, r2
 8022b72:	ab02      	add	r3, sp, #8
 8022b74:	9001      	str	r0, [sp, #4]
 8022b76:	f843 1d08 	str.w	r1, [r3, #-8]!
 8022b7a:	4619      	mov	r1, r3
 8022b7c:	682b      	ldr	r3, [r5, #0]
 8022b7e:	4798      	blx	r3
 8022b80:	6823      	ldr	r3, [r4, #0]
 8022b82:	9001      	str	r0, [sp, #4]
 8022b84:	6958      	ldr	r0, [r3, #20]
 8022b86:	b118      	cbz	r0, 8022b90 <_DispLine+0x28>
 8022b88:	4631      	mov	r1, r6
 8022b8a:	f7f1 fa11 	bl	8013fb0 <GUI_RectsIntersect>
 8022b8e:	b1a8      	cbz	r0, 8022bbc <_DispLine+0x54>
 8022b90:	2001      	movs	r0, #1
 8022b92:	f000 ffdf 	bl	8023b54 <GUI__ManageCache>
 8022b96:	6822      	ldr	r2, [r4, #0]
 8022b98:	69d3      	ldr	r3, [r2, #28]
 8022b9a:	695b      	ldr	r3, [r3, #20]
 8022b9c:	b1ab      	cbz	r3, 8022bca <_DispLine+0x62>
 8022b9e:	4c17      	ldr	r4, [pc, #92]	; (8022bfc <_DispLine+0x94>)
 8022ba0:	6821      	ldr	r1, [r4, #0]
 8022ba2:	b169      	cbz	r1, 8022bc0 <_DispLine+0x58>
 8022ba4:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8022ba8:	689b      	ldr	r3, [r3, #8]
 8022baa:	9801      	ldr	r0, [sp, #4]
 8022bac:	9900      	ldr	r1, [sp, #0]
 8022bae:	4798      	blx	r3
 8022bb0:	4628      	mov	r0, r5
 8022bb2:	6823      	ldr	r3, [r4, #0]
 8022bb4:	4798      	blx	r3
 8022bb6:	2000      	movs	r0, #0
 8022bb8:	f000 ffcc 	bl	8023b54 <GUI__ManageCache>
 8022bbc:	b002      	add	sp, #8
 8022bbe:	bd70      	pop	{r4, r5, r6, pc}
 8022bc0:	689b      	ldr	r3, [r3, #8]
 8022bc2:	9900      	ldr	r1, [sp, #0]
 8022bc4:	9801      	ldr	r0, [sp, #4]
 8022bc6:	4798      	blx	r3
 8022bc8:	e7f5      	b.n	8022bb6 <_DispLine+0x4e>
 8022bca:	4d0d      	ldr	r5, [pc, #52]	; (8022c00 <_DispLine+0x98>)
 8022bcc:	9b00      	ldr	r3, [sp, #0]
 8022bce:	a801      	add	r0, sp, #4
 8022bd0:	3b01      	subs	r3, #1
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	9300      	str	r3, [sp, #0]
 8022bd6:	dbee      	blt.n	8022bb6 <_DispLine+0x4e>
 8022bd8:	f7f5 fdfe 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8022bdc:	6823      	ldr	r3, [r4, #0]
 8022bde:	4606      	mov	r6, r0
 8022be0:	69db      	ldr	r3, [r3, #28]
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	4798      	blx	r3
 8022be6:	682b      	ldr	r3, [r5, #0]
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d0ef      	beq.n	8022bcc <_DispLine+0x64>
 8022bec:	4630      	mov	r0, r6
 8022bee:	4798      	blx	r3
 8022bf0:	e7ec      	b.n	8022bcc <_DispLine+0x64>
 8022bf2:	bf00      	nop
 8022bf4:	2000008c 	.word	0x2000008c
 8022bf8:	20000018 	.word	0x20000018
 8022bfc:	200467a0 	.word	0x200467a0
 8022c00:	200467ac 	.word	0x200467ac

08022c04 <GUI__GetLineNumChars>:
 8022c04:	b530      	push	{r4, r5, lr}
 8022c06:	b083      	sub	sp, #12
 8022c08:	9001      	str	r0, [sp, #4]
 8022c0a:	b1e0      	cbz	r0, 8022c46 <GUI__GetLineNumChars+0x42>
 8022c0c:	4b10      	ldr	r3, [pc, #64]	; (8022c50 <GUI__GetLineNumChars+0x4c>)
 8022c0e:	460d      	mov	r5, r1
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	69db      	ldr	r3, [r3, #28]
 8022c14:	695b      	ldr	r3, [r3, #20]
 8022c16:	b123      	cbz	r3, 8022c22 <GUI__GetLineNumChars+0x1e>
 8022c18:	685b      	ldr	r3, [r3, #4]
 8022c1a:	b113      	cbz	r3, 8022c22 <GUI__GetLineNumChars+0x1e>
 8022c1c:	4798      	blx	r3
 8022c1e:	b003      	add	sp, #12
 8022c20:	bd30      	pop	{r4, r5, pc}
 8022c22:	2d00      	cmp	r5, #0
 8022c24:	dd11      	ble.n	8022c4a <GUI__GetLineNumChars+0x46>
 8022c26:	2400      	movs	r4, #0
 8022c28:	a801      	add	r0, sp, #4
 8022c2a:	f7f5 fdd5 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8022c2e:	b138      	cbz	r0, 8022c40 <GUI__GetLineNumChars+0x3c>
 8022c30:	280a      	cmp	r0, #10
 8022c32:	d005      	beq.n	8022c40 <GUI__GetLineNumChars+0x3c>
 8022c34:	3401      	adds	r4, #1
 8022c36:	42a5      	cmp	r5, r4
 8022c38:	d1f6      	bne.n	8022c28 <GUI__GetLineNumChars+0x24>
 8022c3a:	4628      	mov	r0, r5
 8022c3c:	b003      	add	sp, #12
 8022c3e:	bd30      	pop	{r4, r5, pc}
 8022c40:	4620      	mov	r0, r4
 8022c42:	b003      	add	sp, #12
 8022c44:	bd30      	pop	{r4, r5, pc}
 8022c46:	b003      	add	sp, #12
 8022c48:	bd30      	pop	{r4, r5, pc}
 8022c4a:	2000      	movs	r0, #0
 8022c4c:	e7e7      	b.n	8022c1e <GUI__GetLineNumChars+0x1a>
 8022c4e:	bf00      	nop
 8022c50:	20000018 	.word	0x20000018

08022c54 <GUI__GetLineDistX>:
 8022c54:	b570      	push	{r4, r5, r6, lr}
 8022c56:	b084      	sub	sp, #16
 8022c58:	4a1c      	ldr	r2, [pc, #112]	; (8022ccc <GUI__GetLineDistX+0x78>)
 8022c5a:	ab04      	add	r3, sp, #16
 8022c5c:	9001      	str	r0, [sp, #4]
 8022c5e:	f843 1d10 	str.w	r1, [r3, #-16]!
 8022c62:	4619      	mov	r1, r3
 8022c64:	6813      	ldr	r3, [r2, #0]
 8022c66:	4798      	blx	r3
 8022c68:	9001      	str	r0, [sp, #4]
 8022c6a:	b350      	cbz	r0, 8022cc2 <GUI__GetLineDistX+0x6e>
 8022c6c:	4b18      	ldr	r3, [pc, #96]	; (8022cd0 <GUI__GetLineDistX+0x7c>)
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	69db      	ldr	r3, [r3, #28]
 8022c72:	695b      	ldr	r3, [r3, #20]
 8022c74:	b12b      	cbz	r3, 8022c82 <GUI__GetLineDistX+0x2e>
 8022c76:	681b      	ldr	r3, [r3, #0]
 8022c78:	b11b      	cbz	r3, 8022c82 <GUI__GetLineDistX+0x2e>
 8022c7a:	9900      	ldr	r1, [sp, #0]
 8022c7c:	4798      	blx	r3
 8022c7e:	b004      	add	sp, #16
 8022c80:	bd70      	pop	{r4, r5, r6, pc}
 8022c82:	9b00      	ldr	r3, [sp, #0]
 8022c84:	3b01      	subs	r3, #1
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	9300      	str	r3, [sp, #0]
 8022c8a:	db1c      	blt.n	8022cc6 <GUI__GetLineDistX+0x72>
 8022c8c:	2400      	movs	r4, #0
 8022c8e:	a801      	add	r0, sp, #4
 8022c90:	f7f5 fda2 	bl	80187d8 <GUI_UC__GetCharCodeInc>
 8022c94:	4605      	mov	r5, r0
 8022c96:	f7ff ff3f 	bl	8022b18 <GUI_GetCharDistX>
 8022c9a:	9b00      	ldr	r3, [sp, #0]
 8022c9c:	4404      	add	r4, r0
 8022c9e:	3b01      	subs	r3, #1
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	9300      	str	r3, [sp, #0]
 8022ca4:	daf3      	bge.n	8022c8e <GUI__GetLineDistX+0x3a>
 8022ca6:	2600      	movs	r6, #0
 8022ca8:	a904      	add	r1, sp, #16
 8022caa:	4628      	mov	r0, r5
 8022cac:	f841 6d04 	str.w	r6, [r1, #-4]!
 8022cb0:	f7ff ff44 	bl	8022b3c <GUI_GetCharDistXEx>
 8022cb4:	9b03      	ldr	r3, [sp, #12]
 8022cb6:	4298      	cmp	r0, r3
 8022cb8:	bfb8      	it	lt
 8022cba:	1a1e      	sublt	r6, r3, r0
 8022cbc:	1930      	adds	r0, r6, r4
 8022cbe:	b004      	add	sp, #16
 8022cc0:	bd70      	pop	{r4, r5, r6, pc}
 8022cc2:	b004      	add	sp, #16
 8022cc4:	bd70      	pop	{r4, r5, r6, pc}
 8022cc6:	2500      	movs	r5, #0
 8022cc8:	462c      	mov	r4, r5
 8022cca:	e7ec      	b.n	8022ca6 <GUI__GetLineDistX+0x52>
 8022ccc:	2000008c 	.word	0x2000008c
 8022cd0:	20000018 	.word	0x20000018

08022cd4 <GUI__DispLine>:
 8022cd4:	4b2e      	ldr	r3, [pc, #184]	; (8022d90 <GUI__DispLine+0xbc>)
 8022cd6:	681b      	ldr	r3, [r3, #0]
 8022cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cdc:	4604      	mov	r4, r0
 8022cde:	b082      	sub	sp, #8
 8022ce0:	460d      	mov	r5, r1
 8022ce2:	b183      	cbz	r3, 8022d06 <GUI__DispLine+0x32>
 8022ce4:	2000      	movs	r0, #0
 8022ce6:	f7fd ff35 	bl	8020b54 <WM__InitIVRSearch>
 8022cea:	b148      	cbz	r0, 8022d00 <GUI__DispLine+0x2c>
 8022cec:	466e      	mov	r6, sp
 8022cee:	4632      	mov	r2, r6
 8022cf0:	4629      	mov	r1, r5
 8022cf2:	4620      	mov	r0, r4
 8022cf4:	f7ff ff38 	bl	8022b68 <_DispLine>
 8022cf8:	f7fd fe02 	bl	8020900 <WM__GetNextIVR>
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	d1f6      	bne.n	8022cee <GUI__DispLine+0x1a>
 8022d00:	b002      	add	sp, #8
 8022d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d06:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8022d94 <GUI__DispLine+0xc0>
 8022d0a:	466b      	mov	r3, sp
 8022d0c:	6810      	ldr	r0, [r2, #0]
 8022d0e:	466e      	mov	r6, sp
 8022d10:	f8d8 7000 	ldr.w	r7, [r8]
 8022d14:	6851      	ldr	r1, [r2, #4]
 8022d16:	f8b7 c04c 	ldrh.w	ip, [r7, #76]	; 0x4c
 8022d1a:	f8b7 e050 	ldrh.w	lr, [r7, #80]	; 0x50
 8022d1e:	c303      	stmia	r3!, {r0, r1}
 8022d20:	f8bd 7000 	ldrh.w	r7, [sp]
 8022d24:	4668      	mov	r0, sp
 8022d26:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022d2a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022d2e:	4467      	add	r7, ip
 8022d30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8022d34:	4461      	add	r1, ip
 8022d36:	4472      	add	r2, lr
 8022d38:	f8ad 7000 	strh.w	r7, [sp]
 8022d3c:	4473      	add	r3, lr
 8022d3e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8022d42:	f8ad 2002 	strh.w	r2, [sp, #2]
 8022d46:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022d4a:	f7fd ff03 	bl	8020b54 <WM__InitIVRSearch>
 8022d4e:	b960      	cbnz	r0, 8022d6a <GUI__DispLine+0x96>
 8022d50:	f8d8 3000 	ldr.w	r3, [r8]
 8022d54:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8022d56:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8022d58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8022d5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8022d5c:	1b09      	subs	r1, r1, r4
 8022d5e:	1a12      	subs	r2, r2, r0
 8022d60:	8459      	strh	r1, [r3, #34]	; 0x22
 8022d62:	849a      	strh	r2, [r3, #36]	; 0x24
 8022d64:	b002      	add	sp, #8
 8022d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8022d6e:	4632      	mov	r2, r6
 8022d70:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8022d74:	4629      	mov	r1, r5
 8022d76:	f8bd 7000 	ldrh.w	r7, [sp]
 8022d7a:	8498      	strh	r0, [r3, #36]	; 0x24
 8022d7c:	4620      	mov	r0, r4
 8022d7e:	845f      	strh	r7, [r3, #34]	; 0x22
 8022d80:	f7ff fef2 	bl	8022b68 <_DispLine>
 8022d84:	f7fd fdbc 	bl	8020900 <WM__GetNextIVR>
 8022d88:	2800      	cmp	r0, #0
 8022d8a:	d1ee      	bne.n	8022d6a <GUI__DispLine+0x96>
 8022d8c:	e7e0      	b.n	8022d50 <GUI__DispLine+0x7c>
 8022d8e:	bf00      	nop
 8022d90:	2004678c 	.word	0x2004678c
 8022d94:	20000018 	.word	0x20000018

08022d98 <GUIMONO_DispChar>:
 8022d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d9c:	4e5c      	ldr	r6, [pc, #368]	; (8022f10 <GUIMONO_DispChar+0x178>)
 8022d9e:	b08d      	sub	sp, #52	; 0x34
 8022da0:	6833      	ldr	r3, [r6, #0]
 8022da2:	69da      	ldr	r2, [r3, #28]
 8022da4:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 8022da8:	69d4      	ldr	r4, [r2, #28]
 8022daa:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 8022dae:	4583      	cmp	fp, r0
 8022db0:	f200 8097 	bhi.w	8022ee2 <GUIMONO_DispChar+0x14a>
 8022db4:	89e1      	ldrh	r1, [r4, #14]
 8022db6:	4281      	cmp	r1, r0
 8022db8:	f0c0 8093 	bcc.w	8022ee2 <GUIMONO_DispChar+0x14a>
 8022dbc:	6821      	ldr	r1, [r4, #0]
 8022dbe:	ebcb 0b00 	rsb	fp, fp, r0
 8022dc2:	9108      	str	r1, [sp, #32]
 8022dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8022dc8:	910a      	str	r1, [sp, #40]	; 0x28
 8022dca:	f1bb 3fff 	cmp.w	fp, #4294967295
 8022dce:	f000 8082 	beq.w	8022ed6 <GUIMONO_DispChar+0x13e>
 8022dd2:	f892 8018 	ldrb.w	r8, [r2, #24]
 8022dd6:	7ca2      	ldrb	r2, [r4, #18]
 8022dd8:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 8022ddc:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 8022de0:	fb18 f302 	smulbb	r3, r8, r2
 8022de4:	4608      	mov	r0, r1
 8022de6:	9107      	str	r1, [sp, #28]
 8022de8:	461f      	mov	r7, r3
 8022dea:	f894 a010 	ldrb.w	sl, [r4, #16]
 8022dee:	f7f7 f8ef 	bl	8019fd0 <LCD_SetDrawMode>
 8022df2:	f8d6 e000 	ldr.w	lr, [r6]
 8022df6:	9908      	ldr	r1, [sp, #32]
 8022df8:	4643      	mov	r3, r8
 8022dfa:	f8de c038 	ldr.w	ip, [lr, #56]	; 0x38
 8022dfe:	4652      	mov	r2, sl
 8022e00:	9009      	str	r0, [sp, #36]	; 0x24
 8022e02:	fb07 100b 	mla	r0, r7, fp, r1
 8022e06:	f8de e01c 	ldr.w	lr, [lr, #28]
 8022e0a:	970b      	str	r7, [sp, #44]	; 0x2c
 8022e0c:	2701      	movs	r7, #1
 8022e0e:	9004      	str	r0, [sp, #16]
 8022e10:	4649      	mov	r1, r9
 8022e12:	f8cd c014 	str.w	ip, [sp, #20]
 8022e16:	4628      	mov	r0, r5
 8022e18:	f894 c012 	ldrb.w	ip, [r4, #18]
 8022e1c:	9702      	str	r7, [sp, #8]
 8022e1e:	f8cd c00c 	str.w	ip, [sp, #12]
 8022e22:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8022e26:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8022f10 <GUIMONO_DispChar+0x178>
 8022e2a:	f8cd c004 	str.w	ip, [sp, #4]
 8022e2e:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8022e32:	f8cd e000 	str.w	lr, [sp]
 8022e36:	f7f7 fa91 	bl	801a35c <LCD_DrawBitmap>
 8022e3a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022e3c:	1c7b      	adds	r3, r7, #1
 8022e3e:	d025      	beq.n	8022e8c <GUIMONO_DispChar+0xf4>
 8022e40:	9907      	ldr	r1, [sp, #28]
 8022e42:	f041 0002 	orr.w	r0, r1, #2
 8022e46:	f7f7 f8c3 	bl	8019fd0 <LCD_SetDrawMode>
 8022e4a:	f8db 1000 	ldr.w	r1, [fp]
 8022e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022e50:	4643      	mov	r3, r8
 8022e52:	9808      	ldr	r0, [sp, #32]
 8022e54:	f8d1 c038 	ldr.w	ip, [r1, #56]	; 0x38
 8022e58:	fb02 0007 	mla	r0, r2, r7, r0
 8022e5c:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8022e60:	2701      	movs	r7, #1
 8022e62:	f8cd c014 	str.w	ip, [sp, #20]
 8022e66:	9004      	str	r0, [sp, #16]
 8022e68:	4652      	mov	r2, sl
 8022e6a:	f894 c012 	ldrb.w	ip, [r4, #18]
 8022e6e:	4649      	mov	r1, r9
 8022e70:	9702      	str	r7, [sp, #8]
 8022e72:	4628      	mov	r0, r5
 8022e74:	f8cd c00c 	str.w	ip, [sp, #12]
 8022e78:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8022e7c:	f8cd c004 	str.w	ip, [sp, #4]
 8022e80:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8022e84:	f8cd e000 	str.w	lr, [sp]
 8022e88:	f7f7 fa68 	bl	801a35c <LCD_DrawBitmap>
 8022e8c:	6833      	ldr	r3, [r6, #0]
 8022e8e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8022f10 <GUIMONO_DispChar+0x178>
 8022e92:	69db      	ldr	r3, [r3, #28]
 8022e94:	7e5a      	ldrb	r2, [r3, #25]
 8022e96:	7e1b      	ldrb	r3, [r3, #24]
 8022e98:	429a      	cmp	r2, r3
 8022e9a:	d915      	bls.n	8022ec8 <GUIMONO_DispChar+0x130>
 8022e9c:	9b07      	ldr	r3, [sp, #28]
 8022e9e:	2b02      	cmp	r3, #2
 8022ea0:	d012      	beq.n	8022ec8 <GUIMONO_DispChar+0x130>
 8022ea2:	f083 0004 	eor.w	r0, r3, #4
 8022ea6:	f7f7 f893 	bl	8019fd0 <LCD_SetDrawMode>
 8022eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8022eae:	4628      	mov	r0, r5
 8022eb0:	69db      	ldr	r3, [r3, #28]
 8022eb2:	7e1f      	ldrb	r7, [r3, #24]
 8022eb4:	7ed9      	ldrb	r1, [r3, #27]
 8022eb6:	7e9a      	ldrb	r2, [r3, #26]
 8022eb8:	7e5b      	ldrb	r3, [r3, #25]
 8022eba:	fb07 9101 	mla	r1, r7, r1, r9
 8022ebe:	fb0a 5202 	mla	r2, sl, r2, r5
 8022ec2:	444b      	add	r3, r9
 8022ec4:	f7f7 f90c 	bl	801a0e0 <LCD_FillRect>
 8022ec8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8022ecc:	f7f7 f880 	bl	8019fd0 <LCD_SetDrawMode>
 8022ed0:	6833      	ldr	r3, [r6, #0]
 8022ed2:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 8022ed6:	7c62      	ldrb	r2, [r4, #17]
 8022ed8:	4415      	add	r5, r2
 8022eda:	845d      	strh	r5, [r3, #34]	; 0x22
 8022edc:	b00d      	add	sp, #52	; 0x34
 8022ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ee2:	68a1      	ldr	r1, [r4, #8]
 8022ee4:	2900      	cmp	r1, #0
 8022ee6:	d0f6      	beq.n	8022ed6 <GUIMONO_DispChar+0x13e>
 8022ee8:	880f      	ldrh	r7, [r1, #0]
 8022eea:	42b8      	cmp	r0, r7
 8022eec:	d3f3      	bcc.n	8022ed6 <GUIMONO_DispChar+0x13e>
 8022eee:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 8022ef2:	4586      	cmp	lr, r0
 8022ef4:	d3ef      	bcc.n	8022ed6 <GUIMONO_DispChar+0x13e>
 8022ef6:	1bc0      	subs	r0, r0, r7
 8022ef8:	6849      	ldr	r1, [r1, #4]
 8022efa:	6867      	ldr	r7, [r4, #4]
 8022efc:	b280      	uxth	r0, r0
 8022efe:	9708      	str	r7, [sp, #32]
 8022f00:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 8022f04:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 8022f08:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8022f0c:	910a      	str	r1, [sp, #40]	; 0x28
 8022f0e:	e75c      	b.n	8022dca <GUIMONO_DispChar+0x32>
 8022f10:	20000018 	.word	0x20000018

08022f14 <GUIMONO_GetCharDistX>:
 8022f14:	4b04      	ldr	r3, [pc, #16]	; (8022f28 <GUIMONO_GetCharDistX+0x14>)
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	69db      	ldr	r3, [r3, #28]
 8022f1a:	69db      	ldr	r3, [r3, #28]
 8022f1c:	b109      	cbz	r1, 8022f22 <GUIMONO_GetCharDistX+0xe>
 8022f1e:	7c1a      	ldrb	r2, [r3, #16]
 8022f20:	600a      	str	r2, [r1, #0]
 8022f22:	7c58      	ldrb	r0, [r3, #17]
 8022f24:	4770      	bx	lr
 8022f26:	bf00      	nop
 8022f28:	20000018 	.word	0x20000018

08022f2c <GUIMONO_GetFontInfo>:
 8022f2c:	2302      	movs	r3, #2
 8022f2e:	800b      	strh	r3, [r1, #0]
 8022f30:	4770      	bx	lr
 8022f32:	bf00      	nop

08022f34 <GUIMONO_IsInFont>:
 8022f34:	69c3      	ldr	r3, [r0, #28]
 8022f36:	899a      	ldrh	r2, [r3, #12]
 8022f38:	428a      	cmp	r2, r1
 8022f3a:	d802      	bhi.n	8022f42 <GUIMONO_IsInFont+0xe>
 8022f3c:	89da      	ldrh	r2, [r3, #14]
 8022f3e:	428a      	cmp	r2, r1
 8022f40:	d211      	bcs.n	8022f66 <GUIMONO_IsInFont+0x32>
 8022f42:	6898      	ldr	r0, [r3, #8]
 8022f44:	b118      	cbz	r0, 8022f4e <GUIMONO_IsInFont+0x1a>
 8022f46:	8803      	ldrh	r3, [r0, #0]
 8022f48:	4299      	cmp	r1, r3
 8022f4a:	d201      	bcs.n	8022f50 <GUIMONO_IsInFont+0x1c>
 8022f4c:	2000      	movs	r0, #0
 8022f4e:	4770      	bx	lr
 8022f50:	8842      	ldrh	r2, [r0, #2]
 8022f52:	428a      	cmp	r2, r1
 8022f54:	d3fa      	bcc.n	8022f4c <GUIMONO_IsInFont+0x18>
 8022f56:	1ac9      	subs	r1, r1, r3
 8022f58:	6843      	ldr	r3, [r0, #4]
 8022f5a:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8022f5e:	43c0      	mvns	r0, r0
 8022f60:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8022f64:	4770      	bx	lr
 8022f66:	2001      	movs	r0, #1
 8022f68:	4770      	bx	lr
 8022f6a:	bf00      	nop

08022f6c <GUI_CURSOR_SetPositionEx>:
 8022f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f70:	4614      	mov	r4, r2
 8022f72:	4606      	mov	r6, r0
 8022f74:	4688      	mov	r8, r1
 8022f76:	f7f5 fb15 	bl	80185a4 <GUI_Lock>
 8022f7a:	4620      	mov	r0, r4
 8022f7c:	f7f4 f8e8 	bl	8017150 <GUI_GetCursorLayer>
 8022f80:	b9e8      	cbnz	r0, 8022fbe <GUI_CURSOR_SetPositionEx+0x52>
 8022f82:	00a7      	lsls	r7, r4, #2
 8022f84:	4d1b      	ldr	r5, [pc, #108]	; (8022ff4 <GUI_CURSOR_SetPositionEx+0x88>)
 8022f86:	193b      	adds	r3, r7, r4
 8022f88:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022f8c:	68da      	ldr	r2, [r3, #12]
 8022f8e:	42b2      	cmp	r2, r6
 8022f90:	d106      	bne.n	8022fa0 <GUI_CURSOR_SetPositionEx+0x34>
 8022f92:	691b      	ldr	r3, [r3, #16]
 8022f94:	4543      	cmp	r3, r8
 8022f96:	d103      	bne.n	8022fa0 <GUI_CURSOR_SetPositionEx+0x34>
 8022f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f9c:	f7f5 baf8 	b.w	8018590 <GUI_Unlock>
 8022fa0:	193b      	adds	r3, r7, r4
 8022fa2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022fa6:	6958      	ldr	r0, [r3, #20]
 8022fa8:	b9d0      	cbnz	r0, 8022fe0 <GUI_CURSOR_SetPositionEx+0x74>
 8022faa:	443c      	add	r4, r7
 8022fac:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8022fb0:	60e6      	str	r6, [r4, #12]
 8022fb2:	f8c4 8010 	str.w	r8, [r4, #16]
 8022fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022fba:	f7f5 bae9 	b.w	8018590 <GUI_Unlock>
 8022fbe:	4b0d      	ldr	r3, [pc, #52]	; (8022ff4 <GUI_CURSOR_SetPositionEx+0x88>)
 8022fc0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8022fc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022fc8:	6863      	ldr	r3, [r4, #4]
 8022fca:	689a      	ldr	r2, [r3, #8]
 8022fcc:	6859      	ldr	r1, [r3, #4]
 8022fce:	ebc2 0208 	rsb	r2, r2, r8
 8022fd2:	1a71      	subs	r1, r6, r1
 8022fd4:	f7f4 f8fa 	bl	80171cc <GUI_SetLayerPosEx>
 8022fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022fdc:	f7f5 bad8 	b.w	8018590 <GUI_Unlock>
 8022fe0:	685b      	ldr	r3, [r3, #4]
 8022fe2:	689a      	ldr	r2, [r3, #8]
 8022fe4:	6859      	ldr	r1, [r3, #4]
 8022fe6:	ebc2 0208 	rsb	r2, r2, r8
 8022fea:	1a71      	subs	r1, r6, r1
 8022fec:	f000 f9d4 	bl	8023398 <GUI_SPRITE_SetPosition>
 8022ff0:	e7db      	b.n	8022faa <GUI_CURSOR_SetPositionEx+0x3e>
 8022ff2:	bf00      	nop
 8022ff4:	20000440 	.word	0x20000440

08022ff8 <_OnExit>:
 8022ff8:	4b03      	ldr	r3, [pc, #12]	; (8023008 <_OnExit+0x10>)
 8022ffa:	2200      	movs	r2, #0
 8022ffc:	4903      	ldr	r1, [pc, #12]	; (802300c <_OnExit+0x14>)
 8022ffe:	649a      	str	r2, [r3, #72]	; 0x48
 8023000:	600b      	str	r3, [r1, #0]
 8023002:	604b      	str	r3, [r1, #4]
 8023004:	64da      	str	r2, [r3, #76]	; 0x4c
 8023006:	4770      	bx	lr
 8023008:	2000048c 	.word	0x2000048c
 802300c:	20000090 	.word	0x20000090

08023010 <GUI_PID_GetState>:
 8023010:	b470      	push	{r4, r5, r6}
 8023012:	4d12      	ldr	r5, [pc, #72]	; (802305c <GUI_PID_GetState+0x4c>)
 8023014:	4604      	mov	r4, r0
 8023016:	682b      	ldr	r3, [r5, #0]
 8023018:	686a      	ldr	r2, [r5, #4]
 802301a:	4293      	cmp	r3, r2
 802301c:	d00f      	beq.n	802303e <GUI_PID_GetState+0x2e>
 802301e:	4e10      	ldr	r6, [pc, #64]	; (8023060 <GUI_PID_GetState+0x50>)
 8023020:	42b3      	cmp	r3, r6
 8023022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023026:	bf14      	ite	ne
 8023028:	330c      	addne	r3, #12
 802302a:	3b3c      	subeq	r3, #60	; 0x3c
 802302c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023030:	602b      	str	r3, [r5, #0]
 8023032:	7a20      	ldrb	r0, [r4, #8]
 8023034:	3000      	adds	r0, #0
 8023036:	bc70      	pop	{r4, r5, r6}
 8023038:	bf18      	it	ne
 802303a:	2001      	movne	r0, #1
 802303c:	4770      	bx	lr
 802303e:	4a09      	ldr	r2, [pc, #36]	; (8023064 <GUI_PID_GetState+0x54>)
 8023040:	4293      	cmp	r3, r2
 8023042:	d004      	beq.n	802304e <GUI_PID_GetState+0x3e>
 8023044:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8023048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802304c:	e7f1      	b.n	8023032 <GUI_PID_GetState+0x22>
 802304e:	333c      	adds	r3, #60	; 0x3c
 8023050:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8023058:	e7eb      	b.n	8023032 <GUI_PID_GetState+0x22>
 802305a:	bf00      	nop
 802305c:	20000090 	.word	0x20000090
 8023060:	200004c8 	.word	0x200004c8
 8023064:	2000048c 	.word	0x2000048c

08023068 <GUI_PID_StoreState>:
 8023068:	b5f0      	push	{r4, r5, r6, r7, lr}
 802306a:	4e3c      	ldr	r6, [pc, #240]	; (802315c <GUI_PID_StoreState+0xf4>)
 802306c:	b085      	sub	sp, #20
 802306e:	4604      	mov	r4, r0
 8023070:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8023072:	2b00      	cmp	r3, #0
 8023074:	d055      	beq.n	8023122 <GUI_PID_StoreState+0xba>
 8023076:	4a3a      	ldr	r2, [pc, #232]	; (8023160 <GUI_PID_StoreState+0xf8>)
 8023078:	ad01      	add	r5, sp, #4
 802307a:	493a      	ldr	r1, [pc, #232]	; (8023164 <GUI_PID_StoreState+0xfc>)
 802307c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 802307e:	6011      	str	r1, [r2, #0]
 8023080:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8023084:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8023088:	b10b      	cbz	r3, 802308e <GUI_PID_StoreState+0x26>
 802308a:	4628      	mov	r0, r5
 802308c:	4798      	blx	r3
 802308e:	4f36      	ldr	r7, [pc, #216]	; (8023168 <GUI_PID_StoreState+0x100>)
 8023090:	683c      	ldr	r4, [r7, #0]
 8023092:	687b      	ldr	r3, [r7, #4]
 8023094:	429c      	cmp	r4, r3
 8023096:	d032      	beq.n	80230fe <GUI_PID_StoreState+0x96>
 8023098:	42b3      	cmp	r3, r6
 802309a:	4a30      	ldr	r2, [pc, #192]	; (802315c <GUI_PID_StoreState+0xf4>)
 802309c:	d032      	beq.n	8023104 <GUI_PID_StoreState+0x9c>
 802309e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80230a2:	f1a3 010c 	sub.w	r1, r3, #12
 80230a6:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 80230aa:	468c      	mov	ip, r1
 80230ac:	4586      	cmp	lr, r0
 80230ae:	d135      	bne.n	802311c <GUI_PID_StoreState+0xb4>
 80230b0:	428c      	cmp	r4, r1
 80230b2:	d033      	beq.n	802311c <GUI_PID_StoreState+0xb4>
 80230b4:	4291      	cmp	r1, r2
 80230b6:	d03b      	beq.n	8023130 <GUI_PID_StoreState+0xc8>
 80230b8:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 80230bc:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80230c0:	4282      	cmp	r2, r0
 80230c2:	d03d      	beq.n	8023140 <GUI_PID_StoreState+0xd8>
 80230c4:	4573      	cmp	r3, lr
 80230c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80230ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80230ce:	d00b      	beq.n	80230e8 <GUI_PID_StoreState+0x80>
 80230d0:	330c      	adds	r3, #12
 80230d2:	429c      	cmp	r4, r3
 80230d4:	607b      	str	r3, [r7, #4]
 80230d6:	d00b      	beq.n	80230f0 <GUI_PID_StoreState+0x88>
 80230d8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80230da:	b10b      	cbz	r3, 80230e0 <GUI_PID_StoreState+0x78>
 80230dc:	4628      	mov	r0, r5
 80230de:	4798      	blx	r3
 80230e0:	f7f5 fef6 	bl	8018ed0 <GUI_SignalEvent>
 80230e4:	b005      	add	sp, #20
 80230e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230e8:	4b1c      	ldr	r3, [pc, #112]	; (802315c <GUI_PID_StoreState+0xf4>)
 80230ea:	429c      	cmp	r4, r3
 80230ec:	607b      	str	r3, [r7, #4]
 80230ee:	d1f3      	bne.n	80230d8 <GUI_PID_StoreState+0x70>
 80230f0:	4b1e      	ldr	r3, [pc, #120]	; (802316c <GUI_PID_StoreState+0x104>)
 80230f2:	429c      	cmp	r4, r3
 80230f4:	bf14      	ite	ne
 80230f6:	340c      	addne	r4, #12
 80230f8:	3c3c      	subeq	r4, #60	; 0x3c
 80230fa:	603c      	str	r4, [r7, #0]
 80230fc:	e7ec      	b.n	80230d8 <GUI_PID_StoreState+0x70>
 80230fe:	f8df e06c 	ldr.w	lr, [pc, #108]	; 802316c <GUI_PID_StoreState+0x104>
 8023102:	e7df      	b.n	80230c4 <GUI_PID_StoreState+0x5c>
 8023104:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8023108:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 802310c:	4282      	cmp	r2, r0
 802310e:	d11d      	bne.n	802314c <GUI_PID_StoreState+0xe4>
 8023110:	f106 0e3c 	add.w	lr, r6, #60	; 0x3c
 8023114:	4574      	cmp	r4, lr
 8023116:	d019      	beq.n	802314c <GUI_PID_StoreState+0xe4>
 8023118:	4671      	mov	r1, lr
 802311a:	e7cf      	b.n	80230bc <GUI_PID_StoreState+0x54>
 802311c:	f102 0e3c 	add.w	lr, r2, #60	; 0x3c
 8023120:	e7d0      	b.n	80230c4 <GUI_PID_StoreState+0x5c>
 8023122:	4b13      	ldr	r3, [pc, #76]	; (8023170 <GUI_PID_StoreState+0x108>)
 8023124:	4630      	mov	r0, r6
 8023126:	f840 3f50 	str.w	r3, [r0, #80]!
 802312a:	f7f1 fa05 	bl	8014538 <GUI__RegisterExit>
 802312e:	e7a2      	b.n	8023076 <GUI_PID_StoreState+0xe>
 8023130:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 8023134:	f101 0e3c 	add.w	lr, r1, #60	; 0x3c
 8023138:	4282      	cmp	r2, r0
 802313a:	d1c3      	bne.n	80230c4 <GUI_PID_StoreState+0x5c>
 802313c:	4663      	mov	r3, ip
 802313e:	e7c1      	b.n	80230c4 <GUI_PID_StoreState+0x5c>
 8023140:	42b3      	cmp	r3, r6
 8023142:	d008      	beq.n	8023156 <GUI_PID_StoreState+0xee>
 8023144:	f1a3 0c0c 	sub.w	ip, r3, #12
 8023148:	4663      	mov	r3, ip
 802314a:	e7bb      	b.n	80230c4 <GUI_PID_StoreState+0x5c>
 802314c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8023150:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8023154:	e7bc      	b.n	80230d0 <GUI_PID_StoreState+0x68>
 8023156:	4b05      	ldr	r3, [pc, #20]	; (802316c <GUI_PID_StoreState+0x104>)
 8023158:	e7b4      	b.n	80230c4 <GUI_PID_StoreState+0x5c>
 802315a:	bf00      	nop
 802315c:	2000048c 	.word	0x2000048c
 8023160:	200467dc 	.word	0x200467dc
 8023164:	08021a5d 	.word	0x08021a5d
 8023168:	20000090 	.word	0x20000090
 802316c:	200004c8 	.word	0x200004c8
 8023170:	08022ff9 	.word	0x08022ff9

08023174 <GUI_PID_IsEmpty>:
 8023174:	4b03      	ldr	r3, [pc, #12]	; (8023184 <GUI_PID_IsEmpty+0x10>)
 8023176:	cb09      	ldmia	r3, {r0, r3}
 8023178:	1ac0      	subs	r0, r0, r3
 802317a:	fab0 f080 	clz	r0, r0
 802317e:	0940      	lsrs	r0, r0, #5
 8023180:	4770      	bx	lr
 8023182:	bf00      	nop
 8023184:	20000090 	.word	0x20000090

08023188 <_CreateBuffer.isra.4>:
 8023188:	680b      	ldr	r3, [r1, #0]
 802318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802318e:	4680      	mov	r8, r0
 8023190:	8818      	ldrh	r0, [r3, #0]
 8023192:	460e      	mov	r6, r1
 8023194:	4615      	mov	r5, r2
 8023196:	300d      	adds	r0, #13
 8023198:	0080      	lsls	r0, r0, #2
 802319a:	f7ef fded 	bl	8012d78 <GUI_ALLOC_AllocNoInit>
 802319e:	2800      	cmp	r0, #0
 80231a0:	d03d      	beq.n	802321e <_CreateBuffer.isra.4+0x96>
 80231a2:	4607      	mov	r7, r0
 80231a4:	f7ef fe00 	bl	8012da8 <GUI_ALLOC_LockH>
 80231a8:	f8d8 3000 	ldr.w	r3, [r8]
 80231ac:	4604      	mov	r4, r0
 80231ae:	6998      	ldr	r0, [r3, #24]
 80231b0:	f7f1 fa00 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 80231b4:	2800      	cmp	r0, #0
 80231b6:	d032      	beq.n	802321e <_CreateBuffer.isra.4+0x96>
 80231b8:	68c3      	ldr	r3, [r0, #12]
 80231ba:	2108      	movs	r1, #8
 80231bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80231be:	4798      	blx	r3
 80231c0:	2802      	cmp	r0, #2
 80231c2:	dc22      	bgt.n	802320a <_CreateBuffer.isra.4+0x82>
 80231c4:	2301      	movs	r3, #1
 80231c6:	61a0      	str	r0, [r4, #24]
 80231c8:	6832      	ldr	r2, [r6, #0]
 80231ca:	6123      	str	r3, [r4, #16]
 80231cc:	8812      	ldrh	r2, [r2, #0]
 80231ce:	fb02 f303 	mul.w	r3, r2, r3
 80231d2:	61e2      	str	r2, [r4, #28]
 80231d4:	6163      	str	r3, [r4, #20]
 80231d6:	f7ef fe15 	bl	8012e04 <GUI_ALLOC_GetMaxSize>
 80231da:	6963      	ldr	r3, [r4, #20]
 80231dc:	2200      	movs	r2, #0
 80231de:	60a7      	str	r7, [r4, #8]
 80231e0:	4298      	cmp	r0, r3
 80231e2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80231e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80231ea:	bfb8      	it	lt
 80231ec:	6160      	strlt	r0, [r4, #20]
 80231ee:	2d01      	cmp	r5, #1
 80231f0:	6023      	str	r3, [r4, #0]
 80231f2:	60e2      	str	r2, [r4, #12]
 80231f4:	d018      	beq.n	8023228 <_CreateBuffer.isra.4+0xa0>
 80231f6:	69e1      	ldr	r1, [r4, #28]
 80231f8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80231fc:	4620      	mov	r0, r4
 80231fe:	440a      	add	r2, r1
 8023200:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023204:	6063      	str	r3, [r4, #4]
 8023206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802320a:	2804      	cmp	r0, #4
 802320c:	dd0a      	ble.n	8023224 <_CreateBuffer.isra.4+0x9c>
 802320e:	2808      	cmp	r0, #8
 8023210:	dd0e      	ble.n	8023230 <_CreateBuffer.isra.4+0xa8>
 8023212:	2810      	cmp	r0, #16
 8023214:	dd0e      	ble.n	8023234 <_CreateBuffer.isra.4+0xac>
 8023216:	2220      	movs	r2, #32
 8023218:	2304      	movs	r3, #4
 802321a:	61a2      	str	r2, [r4, #24]
 802321c:	e7d4      	b.n	80231c8 <_CreateBuffer.isra.4+0x40>
 802321e:	2000      	movs	r0, #0
 8023220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023224:	2004      	movs	r0, #4
 8023226:	e7cd      	b.n	80231c4 <_CreateBuffer.isra.4+0x3c>
 8023228:	6063      	str	r3, [r4, #4]
 802322a:	4620      	mov	r0, r4
 802322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023230:	2008      	movs	r0, #8
 8023232:	e7c7      	b.n	80231c4 <_CreateBuffer.isra.4+0x3c>
 8023234:	2210      	movs	r2, #16
 8023236:	2302      	movs	r3, #2
 8023238:	61a2      	str	r2, [r4, #24]
 802323a:	e7c5      	b.n	80231c8 <_CreateBuffer.isra.4+0x40>

0802323c <_SetBkIndexBuffered>:
 802323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023240:	b087      	sub	sp, #28
 8023242:	4617      	mov	r7, r2
 8023244:	460d      	mov	r5, r1
 8023246:	4606      	mov	r6, r0
 8023248:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802324a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802324c:	428a      	cmp	r2, r1
 802324e:	d045      	beq.n	80232dc <_SetBkIndexBuffered+0xa0>
 8023250:	68e1      	ldr	r1, [r4, #12]
 8023252:	b399      	cbz	r1, 80232bc <_SetBkIndexBuffered+0x80>
 8023254:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8023258:	2a01      	cmp	r2, #1
 802325a:	d051      	beq.n	8023300 <_SetBkIndexBuffered+0xc4>
 802325c:	69e0      	ldr	r0, [r4, #28]
 802325e:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 8023262:	6822      	ldr	r2, [r4, #0]
 8023264:	4486      	add	lr, r0
 8023266:	6860      	ldr	r0, [r4, #4]
 8023268:	f8d4 8020 	ldr.w	r8, [r4, #32]
 802326c:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8023270:	f100 0a04 	add.w	sl, r0, #4
 8023274:	6062      	str	r2, [r4, #4]
 8023276:	f8d3 9000 	ldr.w	r9, [r3]
 802327a:	f1b9 0f00 	cmp.w	r9, #0
 802327e:	d01e      	beq.n	80232be <_SetBkIndexBuffered+0x82>
 8023280:	69a2      	ldr	r2, [r4, #24]
 8023282:	4650      	mov	r0, sl
 8023284:	f7f6 f856 	bl	8019334 <GUI__CompactPixelIndices>
 8023288:	f8d4 b014 	ldr.w	fp, [r4, #20]
 802328c:	2300      	movs	r3, #0
 802328e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8023292:	69a2      	ldr	r2, [r4, #24]
 8023294:	f04f 0c01 	mov.w	ip, #1
 8023298:	f8cd a00c 	str.w	sl, [sp, #12]
 802329c:	4641      	mov	r1, r8
 802329e:	9305      	str	r3, [sp, #20]
 80232a0:	4648      	mov	r0, r9
 80232a2:	9304      	str	r3, [sp, #16]
 80232a4:	68e3      	ldr	r3, [r4, #12]
 80232a6:	f8cd b008 	str.w	fp, [sp, #8]
 80232aa:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80232ae:	9201      	str	r2, [sp, #4]
 80232b0:	f8cd c000 	str.w	ip, [sp]
 80232b4:	4642      	mov	r2, r8
 80232b6:	f8de 8004 	ldr.w	r8, [lr, #4]
 80232ba:	47c0      	blx	r8
 80232bc:	6862      	ldr	r2, [r4, #4]
 80232be:	6017      	str	r7, [r2, #0]
 80232c0:	2301      	movs	r3, #1
 80232c2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80232c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80232ca:	6062      	str	r2, [r4, #4]
 80232cc:	62a6      	str	r6, [r4, #40]	; 0x28
 80232ce:	62e5      	str	r5, [r4, #44]	; 0x2c
 80232d0:	60e3      	str	r3, [r4, #12]
 80232d2:	6226      	str	r6, [r4, #32]
 80232d4:	6265      	str	r5, [r4, #36]	; 0x24
 80232d6:	b007      	add	sp, #28
 80232d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232dc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80232e0:	6a22      	ldr	r2, [r4, #32]
 80232e2:	440a      	add	r2, r1
 80232e4:	4282      	cmp	r2, r0
 80232e6:	d1b3      	bne.n	8023250 <_SetBkIndexBuffered+0x14>
 80232e8:	6862      	ldr	r2, [r4, #4]
 80232ea:	68e1      	ldr	r1, [r4, #12]
 80232ec:	6017      	str	r7, [r2, #0]
 80232ee:	f994 0030 	ldrsb.w	r0, [r4, #48]	; 0x30
 80232f2:	1c4b      	adds	r3, r1, #1
 80232f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80232f8:	6062      	str	r2, [r4, #4]
 80232fa:	2900      	cmp	r1, #0
 80232fc:	d1e8      	bne.n	80232d0 <_SetBkIndexBuffered+0x94>
 80232fe:	e7e5      	b.n	80232cc <_SetBkIndexBuffered+0x90>
 8023300:	f8d4 a000 	ldr.w	sl, [r4]
 8023304:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8023308:	4652      	mov	r2, sl
 802330a:	e7b3      	b.n	8023274 <_SetBkIndexBuffered+0x38>

0802330c <_ReleaseBuffer.isra.7>:
 802330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802330e:	b089      	sub	sp, #36	; 0x24
 8023310:	460c      	mov	r4, r1
 8023312:	9107      	str	r1, [sp, #28]
 8023314:	68c9      	ldr	r1, [r1, #12]
 8023316:	2900      	cmp	r1, #0
 8023318:	d02c      	beq.n	8023374 <_ReleaseBuffer.isra.7+0x68>
 802331a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 802331e:	2b01      	cmp	r3, #1
 8023320:	d031      	beq.n	8023386 <_ReleaseBuffer.isra.7+0x7a>
 8023322:	69e5      	ldr	r5, [r4, #28]
 8023324:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8023328:	6823      	ldr	r3, [r4, #0]
 802332a:	442a      	add	r2, r5
 802332c:	6865      	ldr	r5, [r4, #4]
 802332e:	6a27      	ldr	r7, [r4, #32]
 8023330:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023334:	3504      	adds	r5, #4
 8023336:	6063      	str	r3, [r4, #4]
 8023338:	6806      	ldr	r6, [r0, #0]
 802333a:	2e00      	cmp	r6, #0
 802333c:	d02a      	beq.n	8023394 <_ReleaseBuffer.isra.7+0x88>
 802333e:	69a2      	ldr	r2, [r4, #24]
 8023340:	4628      	mov	r0, r5
 8023342:	f7f5 fff7 	bl	8019334 <GUI__CompactPixelIndices>
 8023346:	2000      	movs	r0, #0
 8023348:	68e3      	ldr	r3, [r4, #12]
 802334a:	4639      	mov	r1, r7
 802334c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802334e:	f04f 0e01 	mov.w	lr, #1
 8023352:	68f7      	ldr	r7, [r6, #12]
 8023354:	9005      	str	r0, [sp, #20]
 8023356:	9004      	str	r0, [sp, #16]
 8023358:	4630      	mov	r0, r6
 802335a:	9503      	str	r5, [sp, #12]
 802335c:	6965      	ldr	r5, [r4, #20]
 802335e:	9502      	str	r5, [sp, #8]
 8023360:	69a5      	ldr	r5, [r4, #24]
 8023362:	f8cd e000 	str.w	lr, [sp]
 8023366:	9501      	str	r5, [sp, #4]
 8023368:	687d      	ldr	r5, [r7, #4]
 802336a:	47a8      	blx	r5
 802336c:	9b07      	ldr	r3, [sp, #28]
 802336e:	2200      	movs	r2, #0
 8023370:	60e2      	str	r2, [r4, #12]
 8023372:	461c      	mov	r4, r3
 8023374:	68a4      	ldr	r4, [r4, #8]
 8023376:	a807      	add	r0, sp, #28
 8023378:	f7ef fd2a 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802337c:	4620      	mov	r0, r4
 802337e:	f7ef feab 	bl	80130d8 <GUI_ALLOC_Free>
 8023382:	b009      	add	sp, #36	; 0x24
 8023384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023386:	6825      	ldr	r5, [r4, #0]
 8023388:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 802338a:	462b      	mov	r3, r5
 802338c:	6063      	str	r3, [r4, #4]
 802338e:	6806      	ldr	r6, [r0, #0]
 8023390:	2e00      	cmp	r6, #0
 8023392:	d1d4      	bne.n	802333e <_ReleaseBuffer.isra.7+0x32>
 8023394:	4623      	mov	r3, r4
 8023396:	e7ea      	b.n	802336e <_ReleaseBuffer.isra.7+0x62>

08023398 <GUI_SPRITE_SetPosition>:
 8023398:	b900      	cbnz	r0, 802339c <GUI_SPRITE_SetPosition+0x4>
 802339a:	4770      	bx	lr
 802339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a0:	4604      	mov	r4, r0
 80233a2:	b0ab      	sub	sp, #172	; 0xac
 80233a4:	460d      	mov	r5, r1
 80233a6:	4616      	mov	r6, r2
 80233a8:	921c      	str	r2, [sp, #112]	; 0x70
 80233aa:	911b      	str	r1, [sp, #108]	; 0x6c
 80233ac:	f7f5 f8fa 	bl	80185a4 <GUI_Lock>
 80233b0:	4620      	mov	r0, r4
 80233b2:	f7ef fcf9 	bl	8012da8 <GUI_ALLOC_LockH>
 80233b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80233ba:	6804      	ldr	r4, [r0, #0]
 80233bc:	429d      	cmp	r5, r3
 80233be:	9027      	str	r0, [sp, #156]	; 0x9c
 80233c0:	9411      	str	r4, [sp, #68]	; 0x44
 80233c2:	f000 815a 	beq.w	802367a <GUI_SPRITE_SetPosition+0x2e2>
 80233c6:	2000      	movs	r0, #0
 80233c8:	f7f9 ff0c 	bl	801d1e4 <GUI_MEMDEV_Select>
 80233cc:	4bae      	ldr	r3, [pc, #696]	; (8023688 <GUI_SPRITE_SetPosition+0x2f0>)
 80233ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80233d0:	681b      	ldr	r3, [r3, #0]
 80233d2:	6992      	ldr	r2, [r2, #24]
 80233d4:	7c59      	ldrb	r1, [r3, #17]
 80233d6:	901f      	str	r0, [sp, #124]	; 0x7c
 80233d8:	4608      	mov	r0, r1
 80233da:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80233dc:	9219      	str	r2, [sp, #100]	; 0x64
 80233de:	4282      	cmp	r2, r0
 80233e0:	9120      	str	r1, [sp, #128]	; 0x80
 80233e2:	bf18      	it	ne
 80233e4:	745a      	strbne	r2, [r3, #17]
 80233e6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80233ea:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80233ee:	4619      	mov	r1, r3
 80233f0:	9307      	str	r3, [sp, #28]
 80233f2:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80233f6:	4610      	mov	r0, r2
 80233f8:	9212      	str	r2, [sp, #72]	; 0x48
 80233fa:	1a5b      	subs	r3, r3, r1
 80233fc:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8023400:	461c      	mov	r4, r3
 8023402:	1a12      	subs	r2, r2, r0
 8023404:	9308      	str	r3, [sp, #32]
 8023406:	4616      	mov	r6, r2
 8023408:	9213      	str	r2, [sp, #76]	; 0x4c
 802340a:	4622      	mov	r2, r4
 802340c:	8a2b      	ldrh	r3, [r5, #16]
 802340e:	3201      	adds	r2, #1
 8023410:	079b      	lsls	r3, r3, #30
 8023412:	921a      	str	r2, [sp, #104]	; 0x68
 8023414:	4632      	mov	r2, r6
 8023416:	f102 0201 	add.w	r2, r2, #1
 802341a:	921d      	str	r2, [sp, #116]	; 0x74
 802341c:	f140 810e 	bpl.w	802363c <GUI_SPRITE_SetPosition+0x2a4>
 8023420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023422:	696a      	ldr	r2, [r5, #20]
 8023424:	1a5b      	subs	r3, r3, r1
 8023426:	9203      	str	r2, [sp, #12]
 8023428:	2b00      	cmp	r3, #0
 802342a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802342c:	9314      	str	r3, [sp, #80]	; 0x50
 802342e:	eba2 0400 	sub.w	r4, r2, r0
 8023432:	f340 81a7 	ble.w	8023784 <GUI_SPRITE_SetPosition+0x3ec>
 8023436:	9309      	str	r3, [sp, #36]	; 0x24
 8023438:	f04f 0b01 	mov.w	fp, #1
 802343c:	2300      	movs	r3, #0
 802343e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8023442:	9310      	str	r3, [sp, #64]	; 0x40
 8023444:	2c00      	cmp	r4, #0
 8023446:	f340 81a8 	ble.w	802379a <GUI_SPRITE_SetPosition+0x402>
 802344a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802344c:	f04f 0a00 	mov.w	sl, #0
 8023450:	9417      	str	r4, [sp, #92]	; 0x5c
 8023452:	9316      	str	r3, [sp, #88]	; 0x58
 8023454:	2301      	movs	r3, #1
 8023456:	9315      	str	r3, [sp, #84]	; 0x54
 8023458:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802345a:	4b8c      	ldr	r3, [pc, #560]	; (802368c <GUI_SPRITE_SetPosition+0x2f4>)
 802345c:	69b0      	ldr	r0, [r6, #24]
 802345e:	561b      	ldrsb	r3, [r3, r0]
 8023460:	2b01      	cmp	r3, #1
 8023462:	f340 8189 	ble.w	8023778 <GUI_SPRITE_SetPosition+0x3e0>
 8023466:	2300      	movs	r3, #0
 8023468:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 802346c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 8023470:	f7f7 fc26 	bl	801acc0 <LCD_GetXSizeEx>
 8023474:	1e43      	subs	r3, r0, #1
 8023476:	69b0      	ldr	r0, [r6, #24]
 8023478:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 802347c:	f7f7 fc30 	bl	801ace0 <LCD_GetYSizeEx>
 8023480:	3801      	subs	r0, #1
 8023482:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 8023486:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023488:	465a      	mov	r2, fp
 802348a:	f100 0114 	add.w	r1, r0, #20
 802348e:	f7ff fe7b 	bl	8023188 <_CreateBuffer.isra.4>
 8023492:	9021      	str	r0, [sp, #132]	; 0x84
 8023494:	2800      	cmp	r0, #0
 8023496:	f000 80d0 	beq.w	802363a <GUI_SPRITE_SetPosition+0x2a2>
 802349a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802349c:	465a      	mov	r2, fp
 802349e:	f100 0114 	add.w	r1, r0, #20
 80234a2:	f7ff fe71 	bl	8023188 <_CreateBuffer.isra.4>
 80234a6:	9023      	str	r0, [sp, #140]	; 0x8c
 80234a8:	2800      	cmp	r0, #0
 80234aa:	f000 80c1 	beq.w	8023630 <GUI_SPRITE_SetPosition+0x298>
 80234ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80234b0:	68d8      	ldr	r0, [r3, #12]
 80234b2:	2800      	cmp	r0, #0
 80234b4:	f040 8181 	bne.w	80237ba <GUI_SPRITE_SetPosition+0x422>
 80234b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80234ba:	4552      	cmp	r2, sl
 80234bc:	f000 80b4 	beq.w	8023628 <GUI_SPRITE_SetPosition+0x290>
 80234c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80234c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80234c4:	009a      	lsls	r2, r3, #2
 80234c6:	f8cd 9010 	str.w	r9, [sp, #16]
 80234ca:	fb0a 1303 	mla	r3, sl, r3, r1
 80234ce:	ebc4 010a 	rsb	r1, r4, sl
 80234d2:	46d9      	mov	r9, fp
 80234d4:	9022      	str	r0, [sp, #136]	; 0x88
 80234d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80234da:	910d      	str	r1, [sp, #52]	; 0x34
 80234dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80234de:	930e      	str	r3, [sp, #56]	; 0x38
 80234e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80234e2:	fb01 f202 	mul.w	r2, r1, r2
 80234e6:	4423      	add	r3, r4
 80234e8:	921e      	str	r2, [sp, #120]	; 0x78
 80234ea:	9318      	str	r3, [sp, #96]	; 0x60
 80234ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80234f0:	46d3      	mov	fp, sl
 80234f2:	9305      	str	r3, [sp, #20]
 80234f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80234f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80234f8:	455b      	cmp	r3, fp
 80234fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80234fc:	bfcc      	ite	gt
 80234fe:	2300      	movgt	r3, #0
 8023500:	2301      	movle	r3, #1
 8023502:	455a      	cmp	r2, fp
 8023504:	bfb8      	it	lt
 8023506:	2300      	movlt	r3, #0
 8023508:	930b      	str	r3, [sp, #44]	; 0x2c
 802350a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802350c:	445b      	add	r3, fp
 802350e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023510:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023512:	445b      	add	r3, fp
 8023514:	930a      	str	r3, [sp, #40]	; 0x28
 8023516:	9b04      	ldr	r3, [sp, #16]
 8023518:	461a      	mov	r2, r3
 802351a:	42a2      	cmp	r2, r4
 802351c:	d075      	beq.n	802360a <GUI_SPRITE_SetPosition+0x272>
 802351e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8023520:	9b07      	ldr	r3, [sp, #28]
 8023522:	ebc0 0a04 	rsb	sl, r0, r4
 8023526:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023528:	4403      	add	r3, r0
 802352a:	930c      	str	r3, [sp, #48]	; 0x30
 802352c:	465a      	mov	r2, fp
 802352e:	4621      	mov	r1, r4
 8023530:	9803      	ldr	r0, [sp, #12]
 8023532:	f7f0 fca3 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 8023536:	0e03      	lsrs	r3, r0, #24
 8023538:	4606      	mov	r6, r0
 802353a:	d05f      	beq.n	80235fc <GUI_SPRITE_SetPosition+0x264>
 802353c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802353e:	9a08      	ldr	r2, [sp, #32]
 8023540:	42a3      	cmp	r3, r4
 8023542:	9907      	ldr	r1, [sp, #28]
 8023544:	bfcc      	ite	gt
 8023546:	2300      	movgt	r3, #0
 8023548:	2301      	movle	r3, #1
 802354a:	42a2      	cmp	r2, r4
 802354c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802354e:	4421      	add	r1, r4
 8023550:	eb02 0704 	add.w	r7, r2, r4
 8023554:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8023558:	bfb8      	it	lt
 802355a:	2300      	movlt	r3, #0
 802355c:	9106      	str	r1, [sp, #24]
 802355e:	42ba      	cmp	r2, r7
 8023560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023562:	ea03 0301 	and.w	r3, r3, r1
 8023566:	dc0d      	bgt.n	8023584 <GUI_SPRITE_SetPosition+0x1ec>
 8023568:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802356c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802356e:	4282      	cmp	r2, r0
 8023570:	dc08      	bgt.n	8023584 <GUI_SPRITE_SetPosition+0x1ec>
 8023572:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8023576:	42ba      	cmp	r2, r7
 8023578:	db04      	blt.n	8023584 <GUI_SPRITE_SetPosition+0x1ec>
 802357a:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 802357e:	4282      	cmp	r2, r0
 8023580:	f280 80a9 	bge.w	80236d6 <GUI_SPRITE_SetPosition+0x33e>
 8023584:	f04f 0800 	mov.w	r8, #0
 8023588:	2b00      	cmp	r3, #0
 802358a:	f000 8085 	beq.w	8023698 <GUI_SPRITE_SetPosition+0x300>
 802358e:	f1ba 0f00 	cmp.w	sl, #0
 8023592:	db09      	blt.n	80235a8 <GUI_SPRITE_SetPosition+0x210>
 8023594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023596:	2b00      	cmp	r3, #0
 8023598:	db06      	blt.n	80235a8 <GUI_SPRITE_SetPosition+0x210>
 802359a:	461a      	mov	r2, r3
 802359c:	4651      	mov	r1, sl
 802359e:	9803      	ldr	r0, [sp, #12]
 80235a0:	f7f0 fc6c 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 80235a4:	0e03      	lsrs	r3, r0, #24
 80235a6:	d077      	beq.n	8023698 <GUI_SPRITE_SetPosition+0x300>
 80235a8:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 80235ac:	429f      	cmp	r7, r3
 80235ae:	db23      	blt.n	80235f8 <GUI_SPRITE_SetPosition+0x260>
 80235b0:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 80235b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80235b6:	4283      	cmp	r3, r0
 80235b8:	dc1e      	bgt.n	80235f8 <GUI_SPRITE_SetPosition+0x260>
 80235ba:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 80235be:	42bb      	cmp	r3, r7
 80235c0:	db1a      	blt.n	80235f8 <GUI_SPRITE_SetPosition+0x260>
 80235c2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 80235c6:	4283      	cmp	r3, r0
 80235c8:	db16      	blt.n	80235f8 <GUI_SPRITE_SetPosition+0x260>
 80235ca:	4630      	mov	r0, r6
 80235cc:	4b30      	ldr	r3, [pc, #192]	; (8023690 <GUI_SPRITE_SetPosition+0x2f8>)
 80235ce:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80235d0:	22ff      	movs	r2, #255	; 0xff
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 80235d8:	4798      	blx	r3
 80235da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80235dc:	4b2d      	ldr	r3, [pc, #180]	; (8023694 <GUI_SPRITE_SetPosition+0x2fc>)
 80235de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80235e2:	691b      	ldr	r3, [r3, #16]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	4798      	blx	r3
 80235e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80235ea:	4602      	mov	r2, r0
 80235ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80235ee:	9300      	str	r3, [sp, #0]
 80235f0:	4638      	mov	r0, r7
 80235f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80235f4:	f7ff fe22 	bl	802323c <_SetBkIndexBuffered>
 80235f8:	f8c5 8020 	str.w	r8, [r5, #32]
 80235fc:	9b05      	ldr	r3, [sp, #20]
 80235fe:	444c      	add	r4, r9
 8023600:	44ca      	add	sl, r9
 8023602:	441d      	add	r5, r3
 8023604:	9b04      	ldr	r3, [sp, #16]
 8023606:	42a3      	cmp	r3, r4
 8023608:	d190      	bne.n	802352c <GUI_SPRITE_SetPosition+0x194>
 802360a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802360c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802360e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023610:	440b      	add	r3, r1
 8023612:	4493      	add	fp, r2
 8023614:	930e      	str	r3, [sp, #56]	; 0x38
 8023616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023618:	4619      	mov	r1, r3
 802361a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802361c:	4411      	add	r1, r2
 802361e:	455b      	cmp	r3, fp
 8023620:	910d      	str	r1, [sp, #52]	; 0x34
 8023622:	f47f af67 	bne.w	80234f4 <GUI_SPRITE_SetPosition+0x15c>
 8023626:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023628:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802362a:	6818      	ldr	r0, [r3, #0]
 802362c:	f7ff fe6e 	bl	802330c <_ReleaseBuffer.isra.7>
 8023630:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023632:	9921      	ldr	r1, [sp, #132]	; 0x84
 8023634:	6818      	ldr	r0, [r3, #0]
 8023636:	f7ff fe69 	bl	802330c <_ReleaseBuffer.isra.7>
 802363a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802363c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 802363e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023640:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023642:	440b      	add	r3, r1
 8023644:	80a9      	strh	r1, [r5, #4]
 8023646:	1e42      	subs	r2, r0, #1
 8023648:	991d      	ldr	r1, [sp, #116]	; 0x74
 802364a:	3b01      	subs	r3, #1
 802364c:	80e8      	strh	r0, [r5, #6]
 802364e:	440a      	add	r2, r1
 8023650:	812b      	strh	r3, [r5, #8]
 8023652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023654:	816a      	strh	r2, [r5, #10]
 8023656:	4619      	mov	r1, r3
 8023658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802365a:	4291      	cmp	r1, r2
 802365c:	d002      	beq.n	8023664 <GUI_SPRITE_SetPosition+0x2cc>
 802365e:	4b0a      	ldr	r3, [pc, #40]	; (8023688 <GUI_SPRITE_SetPosition+0x2f0>)
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	745a      	strb	r2, [r3, #17]
 8023664:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023666:	f7f9 fdbd 	bl	801d1e4 <GUI_MEMDEV_Select>
 802366a:	a827      	add	r0, sp, #156	; 0x9c
 802366c:	f7ef fbb0 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023670:	f7f4 ff8e 	bl	8018590 <GUI_Unlock>
 8023674:	b02b      	add	sp, #172	; 0xac
 8023676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802367a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802367e:	429e      	cmp	r6, r3
 8023680:	f47f aea1 	bne.w	80233c6 <GUI_SPRITE_SetPosition+0x2e>
 8023684:	e7f1      	b.n	802366a <GUI_SPRITE_SetPosition+0x2d2>
 8023686:	bf00      	nop
 8023688:	20000018 	.word	0x20000018
 802368c:	20046780 	.word	0x20046780
 8023690:	20000044 	.word	0x20000044
 8023694:	200467d0 	.word	0x200467d0
 8023698:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802369c:	9a06      	ldr	r2, [sp, #24]
 802369e:	4293      	cmp	r3, r2
 80236a0:	dc84      	bgt.n	80235ac <GUI_SPRITE_SetPosition+0x214>
 80236a2:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 80236a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80236a8:	4282      	cmp	r2, r0
 80236aa:	f73f af7f 	bgt.w	80235ac <GUI_SPRITE_SetPosition+0x214>
 80236ae:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80236b2:	9906      	ldr	r1, [sp, #24]
 80236b4:	428a      	cmp	r2, r1
 80236b6:	f6ff af79 	blt.w	80235ac <GUI_SPRITE_SetPosition+0x214>
 80236ba:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 80236be:	4601      	mov	r1, r0
 80236c0:	4282      	cmp	r2, r0
 80236c2:	f6ff af73 	blt.w	80235ac <GUI_SPRITE_SetPosition+0x214>
 80236c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80236c8:	6a2a      	ldr	r2, [r5, #32]
 80236ca:	9806      	ldr	r0, [sp, #24]
 80236cc:	9300      	str	r3, [sp, #0]
 80236ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80236d0:	f7ff fdb4 	bl	802323c <_SetBkIndexBuffered>
 80236d4:	e768      	b.n	80235a8 <GUI_SPRITE_SetPosition+0x210>
 80236d6:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
 80236da:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80236de:	42ba      	cmp	r2, r7
 80236e0:	dc2f      	bgt.n	8023742 <GUI_SPRITE_SetPosition+0x3aa>
 80236e2:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
 80236e6:	42b9      	cmp	r1, r7
 80236e8:	db2b      	blt.n	8023742 <GUI_SPRITE_SetPosition+0x3aa>
 80236ea:	f9b8 e006 	ldrsh.w	lr, [r8, #6]
 80236ee:	4601      	mov	r1, r0
 80236f0:	4586      	cmp	lr, r0
 80236f2:	dc26      	bgt.n	8023742 <GUI_SPRITE_SetPosition+0x3aa>
 80236f4:	f9b8 000a 	ldrsh.w	r0, [r8, #10]
 80236f8:	4288      	cmp	r0, r1
 80236fa:	db22      	blt.n	8023742 <GUI_SPRITE_SetPosition+0x3aa>
 80236fc:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8023700:	b1f8      	cbz	r0, 8023742 <GUI_SPRITE_SetPosition+0x3aa>
 8023702:	9325      	str	r3, [sp, #148]	; 0x94
 8023704:	1abb      	subs	r3, r7, r2
 8023706:	4619      	mov	r1, r3
 8023708:	9322      	str	r3, [sp, #136]	; 0x88
 802370a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802370c:	ebce 0303 	rsb	r3, lr, r3
 8023710:	461a      	mov	r2, r3
 8023712:	9324      	str	r3, [sp, #144]	; 0x90
 8023714:	f7f0 fbb2 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 8023718:	0e03      	lsrs	r3, r0, #24
 802371a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802371c:	d011      	beq.n	8023742 <GUI_SPRITE_SetPosition+0x3aa>
 802371e:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8023722:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
 8023726:	1a52      	subs	r2, r2, r1
 8023728:	9924      	ldr	r1, [sp, #144]	; 0x90
 802372a:	fb02 1201 	mla	r2, r2, r1, r1
 802372e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023730:	440a      	add	r2, r1
 8023732:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8023736:	f8d8 2020 	ldr.w	r2, [r8, #32]
 802373a:	f042 407f 	orr.w	r0, r2, #4278190080	; 0xff000000
 802373e:	4690      	mov	r8, r2
 8023740:	e00f      	b.n	8023762 <GUI_SPRITE_SetPosition+0x3ca>
 8023742:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023744:	6810      	ldr	r0, [r2, #0]
 8023746:	2800      	cmp	r0, #0
 8023748:	d033      	beq.n	80237b2 <GUI_SPRITE_SetPosition+0x41a>
 802374a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 802374e:	4639      	mov	r1, r7
 8023750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023752:	f8de 8014 	ldr.w	r8, [lr, #20]
 8023756:	9322      	str	r3, [sp, #136]	; 0x88
 8023758:	47c0      	blx	r8
 802375a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802375c:	4680      	mov	r8, r0
 802375e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023762:	9324      	str	r3, [sp, #144]	; 0x90
 8023764:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023766:	4b9a      	ldr	r3, [pc, #616]	; (80239d0 <GUI_SPRITE_SetPosition+0x638>)
 8023768:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802376c:	6912      	ldr	r2, [r2, #16]
 802376e:	6852      	ldr	r2, [r2, #4]
 8023770:	4790      	blx	r2
 8023772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023774:	9022      	str	r0, [sp, #136]	; 0x88
 8023776:	e707      	b.n	8023588 <GUI_SPRITE_SetPosition+0x1f0>
 8023778:	68f3      	ldr	r3, [r6, #12]
 802377a:	4630      	mov	r0, r6
 802377c:	a928      	add	r1, sp, #160	; 0xa0
 802377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023780:	4798      	blx	r3
 8023782:	e680      	b.n	8023486 <GUI_SPRITE_SetPosition+0xee>
 8023784:	2200      	movs	r2, #0
 8023786:	9b08      	ldr	r3, [sp, #32]
 8023788:	f04f 39ff 	mov.w	r9, #4294967295
 802378c:	9209      	str	r2, [sp, #36]	; 0x24
 802378e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023790:	46cb      	mov	fp, r9
 8023792:	9310      	str	r3, [sp, #64]	; 0x40
 8023794:	4413      	add	r3, r2
 8023796:	9308      	str	r3, [sp, #32]
 8023798:	e654      	b.n	8023444 <GUI_SPRITE_SetPosition+0xac>
 802379a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802379c:	2200      	movs	r2, #0
 802379e:	f04f 33ff 	mov.w	r3, #4294967295
 80237a2:	9217      	str	r2, [sp, #92]	; 0x5c
 80237a4:	460a      	mov	r2, r1
 80237a6:	9316      	str	r3, [sp, #88]	; 0x58
 80237a8:	468a      	mov	sl, r1
 80237aa:	4422      	add	r2, r4
 80237ac:	9315      	str	r3, [sp, #84]	; 0x54
 80237ae:	9213      	str	r2, [sp, #76]	; 0x4c
 80237b0:	e652      	b.n	8023458 <GUI_SPRITE_SetPosition+0xc0>
 80237b2:	4680      	mov	r8, r0
 80237b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80237b8:	e7d3      	b.n	8023762 <GUI_SPRITE_SetPosition+0x3ca>
 80237ba:	f7ef faf5 	bl	8012da8 <GUI_ALLOC_LockH>
 80237be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80237c0:	9026      	str	r0, [sp, #152]	; 0x98
 80237c2:	4553      	cmp	r3, sl
 80237c4:	f000 8099 	beq.w	80238fa <GUI_SPRITE_SetPosition+0x562>
 80237c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80237ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80237cc:	009a      	lsls	r2, r3, #2
 80237ce:	f8cd 9010 	str.w	r9, [sp, #16]
 80237d2:	fb0a 1303 	mla	r3, sl, r3, r1
 80237d6:	ebc4 010a 	rsb	r1, r4, sl
 80237da:	46d9      	mov	r9, fp
 80237dc:	910d      	str	r1, [sp, #52]	; 0x34
 80237de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80237e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80237e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80237e6:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80237ea:	4421      	add	r1, r4
 80237ec:	46d3      	mov	fp, sl
 80237ee:	9305      	str	r3, [sp, #20]
 80237f0:	9118      	str	r1, [sp, #96]	; 0x60
 80237f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80237f4:	9b07      	ldr	r3, [sp, #28]
 80237f6:	fb01 f202 	mul.w	r2, r1, r2
 80237fa:	9222      	str	r2, [sp, #136]	; 0x88
 80237fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80237fe:	4413      	add	r3, r2
 8023800:	930c      	str	r3, [sp, #48]	; 0x30
 8023802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023804:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023806:	455b      	cmp	r3, fp
 8023808:	bfcc      	ite	gt
 802380a:	2300      	movgt	r3, #0
 802380c:	2301      	movle	r3, #1
 802380e:	455a      	cmp	r2, fp
 8023810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023812:	bfb8      	it	lt
 8023814:	2300      	movlt	r3, #0
 8023816:	930b      	str	r3, [sp, #44]	; 0x2c
 8023818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802381a:	445b      	add	r3, fp
 802381c:	931e      	str	r3, [sp, #120]	; 0x78
 802381e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023820:	445b      	add	r3, fp
 8023822:	930a      	str	r3, [sp, #40]	; 0x28
 8023824:	9b04      	ldr	r3, [sp, #16]
 8023826:	4293      	cmp	r3, r2
 8023828:	d05a      	beq.n	80238e0 <GUI_SPRITE_SetPosition+0x548>
 802382a:	4614      	mov	r4, r2
 802382c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802382e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023830:	ebc2 0a04 	rsb	sl, r2, r4
 8023834:	465a      	mov	r2, fp
 8023836:	4621      	mov	r1, r4
 8023838:	9803      	ldr	r0, [sp, #12]
 802383a:	f7f0 fb1f 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 802383e:	4606      	mov	r6, r0
 8023840:	2800      	cmp	r0, #0
 8023842:	d046      	beq.n	80238d2 <GUI_SPRITE_SetPosition+0x53a>
 8023844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023846:	9a08      	ldr	r2, [sp, #32]
 8023848:	42a3      	cmp	r3, r4
 802384a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802384c:	bfcc      	ite	gt
 802384e:	2300      	movgt	r3, #0
 8023850:	2301      	movle	r3, #1
 8023852:	42a2      	cmp	r2, r4
 8023854:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8023858:	bfb8      	it	lt
 802385a:	2300      	movlt	r3, #0
 802385c:	461f      	mov	r7, r3
 802385e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023860:	eb03 0804 	add.w	r8, r3, r4
 8023864:	9b07      	ldr	r3, [sp, #28]
 8023866:	400f      	ands	r7, r1
 8023868:	4542      	cmp	r2, r8
 802386a:	4423      	add	r3, r4
 802386c:	dc0c      	bgt.n	8023888 <GUI_SPRITE_SetPosition+0x4f0>
 802386e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 8023872:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023874:	4282      	cmp	r2, r0
 8023876:	dc07      	bgt.n	8023888 <GUI_SPRITE_SetPosition+0x4f0>
 8023878:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 802387c:	4542      	cmp	r2, r8
 802387e:	db03      	blt.n	8023888 <GUI_SPRITE_SetPosition+0x4f0>
 8023880:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 8023884:	4282      	cmp	r2, r0
 8023886:	da57      	bge.n	8023938 <GUI_SPRITE_SetPosition+0x5a0>
 8023888:	2200      	movs	r2, #0
 802388a:	9206      	str	r2, [sp, #24]
 802388c:	2f00      	cmp	r7, #0
 802388e:	d039      	beq.n	8023904 <GUI_SPRITE_SetPosition+0x56c>
 8023890:	f1ba 0f00 	cmp.w	sl, #0
 8023894:	930e      	str	r3, [sp, #56]	; 0x38
 8023896:	db09      	blt.n	80238ac <GUI_SPRITE_SetPosition+0x514>
 8023898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802389a:	2b00      	cmp	r3, #0
 802389c:	db06      	blt.n	80238ac <GUI_SPRITE_SetPosition+0x514>
 802389e:	461a      	mov	r2, r3
 80238a0:	4651      	mov	r1, sl
 80238a2:	9803      	ldr	r0, [sp, #12]
 80238a4:	f7f0 faea 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 80238a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238aa:	b358      	cbz	r0, 8023904 <GUI_SPRITE_SetPosition+0x56c>
 80238ac:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 80238b0:	4590      	cmp	r8, r2
 80238b2:	db0c      	blt.n	80238ce <GUI_SPRITE_SetPosition+0x536>
 80238b4:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 80238b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80238ba:	428b      	cmp	r3, r1
 80238bc:	dc07      	bgt.n	80238ce <GUI_SPRITE_SetPosition+0x536>
 80238be:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 80238c2:	4543      	cmp	r3, r8
 80238c4:	db03      	blt.n	80238ce <GUI_SPRITE_SetPosition+0x536>
 80238c6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 80238ca:	428b      	cmp	r3, r1
 80238cc:	da57      	bge.n	802397e <GUI_SPRITE_SetPosition+0x5e6>
 80238ce:	9b06      	ldr	r3, [sp, #24]
 80238d0:	622b      	str	r3, [r5, #32]
 80238d2:	9b05      	ldr	r3, [sp, #20]
 80238d4:	444c      	add	r4, r9
 80238d6:	44ca      	add	sl, r9
 80238d8:	441d      	add	r5, r3
 80238da:	9b04      	ldr	r3, [sp, #16]
 80238dc:	429c      	cmp	r4, r3
 80238de:	d1a9      	bne.n	8023834 <GUI_SPRITE_SetPosition+0x49c>
 80238e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80238e2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80238e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80238e6:	440b      	add	r3, r1
 80238e8:	4493      	add	fp, r2
 80238ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80238ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80238ee:	4619      	mov	r1, r3
 80238f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80238f2:	4411      	add	r1, r2
 80238f4:	459b      	cmp	fp, r3
 80238f6:	910d      	str	r1, [sp, #52]	; 0x34
 80238f8:	d183      	bne.n	8023802 <GUI_SPRITE_SetPosition+0x46a>
 80238fa:	a826      	add	r0, sp, #152	; 0x98
 80238fc:	f7ef fa68 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023900:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023902:	e691      	b.n	8023628 <GUI_SPRITE_SetPosition+0x290>
 8023904:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 8023908:	429a      	cmp	r2, r3
 802390a:	dcd1      	bgt.n	80238b0 <GUI_SPRITE_SetPosition+0x518>
 802390c:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 8023910:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8023912:	42b9      	cmp	r1, r7
 8023914:	dccc      	bgt.n	80238b0 <GUI_SPRITE_SetPosition+0x518>
 8023916:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
 802391a:	4299      	cmp	r1, r3
 802391c:	dbc8      	blt.n	80238b0 <GUI_SPRITE_SetPosition+0x518>
 802391e:	f9bd 10a6 	ldrsh.w	r1, [sp, #166]	; 0xa6
 8023922:	42b9      	cmp	r1, r7
 8023924:	dbc4      	blt.n	80238b0 <GUI_SPRITE_SetPosition+0x518>
 8023926:	4618      	mov	r0, r3
 8023928:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802392a:	6a2a      	ldr	r2, [r5, #32]
 802392c:	4639      	mov	r1, r7
 802392e:	9300      	str	r3, [sp, #0]
 8023930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023932:	f7ff fc83 	bl	802323c <_SetBkIndexBuffered>
 8023936:	e7b9      	b.n	80238ac <GUI_SPRITE_SetPosition+0x514>
 8023938:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802393a:	9206      	str	r2, [sp, #24]
 802393c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8023940:	4542      	cmp	r2, r8
 8023942:	dc0d      	bgt.n	8023960 <GUI_SPRITE_SetPosition+0x5c8>
 8023944:	9806      	ldr	r0, [sp, #24]
 8023946:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 802394a:	4541      	cmp	r1, r8
 802394c:	db08      	blt.n	8023960 <GUI_SPRITE_SetPosition+0x5c8>
 802394e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8023952:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023954:	458e      	cmp	lr, r1
 8023956:	dc03      	bgt.n	8023960 <GUI_SPRITE_SetPosition+0x5c8>
 8023958:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 802395c:	4288      	cmp	r0, r1
 802395e:	da18      	bge.n	8023992 <GUI_SPRITE_SetPosition+0x5fa>
 8023960:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023962:	6810      	ldr	r0, [r2, #0]
 8023964:	2800      	cmp	r0, #0
 8023966:	d08f      	beq.n	8023888 <GUI_SPRITE_SetPosition+0x4f0>
 8023968:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 802396c:	4641      	mov	r1, r8
 802396e:	930e      	str	r3, [sp, #56]	; 0x38
 8023970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023972:	f8de 3014 	ldr.w	r3, [lr, #20]
 8023976:	4798      	blx	r3
 8023978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802397a:	9006      	str	r0, [sp, #24]
 802397c:	e786      	b.n	802388c <GUI_SPRITE_SetPosition+0x4f4>
 802397e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023980:	4640      	mov	r0, r8
 8023982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023984:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8023988:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802398a:	9600      	str	r6, [sp, #0]
 802398c:	f7ff fc56 	bl	802323c <_SetBkIndexBuffered>
 8023990:	e79d      	b.n	80238ce <GUI_SPRITE_SetPosition+0x536>
 8023992:	9325      	str	r3, [sp, #148]	; 0x94
 8023994:	ebc2 0308 	rsb	r3, r2, r8
 8023998:	ebce 0201 	rsb	r2, lr, r1
 802399c:	9906      	ldr	r1, [sp, #24]
 802399e:	930e      	str	r3, [sp, #56]	; 0x38
 80239a0:	6948      	ldr	r0, [r1, #20]
 80239a2:	4619      	mov	r1, r3
 80239a4:	9224      	str	r2, [sp, #144]	; 0x90
 80239a6:	f7f0 fa69 	bl	8013e7c <GUI_GetBitmapPixelIndex>
 80239aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80239ac:	2800      	cmp	r0, #0
 80239ae:	d0d7      	beq.n	8023960 <GUI_SPRITE_SetPosition+0x5c8>
 80239b0:	9806      	ldr	r0, [sp, #24]
 80239b2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80239b6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80239ba:	1a52      	subs	r2, r2, r1
 80239bc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80239be:	fb02 1201 	mla	r2, r2, r1, r1
 80239c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80239c4:	440a      	add	r2, r1
 80239c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80239ca:	6a12      	ldr	r2, [r2, #32]
 80239cc:	9206      	str	r2, [sp, #24]
 80239ce:	e75d      	b.n	802388c <GUI_SPRITE_SetPosition+0x4f4>
 80239d0:	200467d0 	.word	0x200467d0

080239d4 <GUI_TIMER__GetFirstTimer>:
 80239d4:	4a0a      	ldr	r2, [pc, #40]	; (8023a00 <GUI_TIMER__GetFirstTimer+0x2c>)
 80239d6:	2300      	movs	r3, #0
 80239d8:	b530      	push	{r4, r5, lr}
 80239da:	6814      	ldr	r4, [r2, #0]
 80239dc:	b083      	sub	sp, #12
 80239de:	6003      	str	r3, [r0, #0]
 80239e0:	b15c      	cbz	r4, 80239fa <GUI_TIMER__GetFirstTimer+0x26>
 80239e2:	4605      	mov	r5, r0
 80239e4:	4620      	mov	r0, r4
 80239e6:	f7ef f9df 	bl	8012da8 <GUI_ALLOC_LockH>
 80239ea:	ab02      	add	r3, sp, #8
 80239ec:	6902      	ldr	r2, [r0, #16]
 80239ee:	f843 0d04 	str.w	r0, [r3, #-4]!
 80239f2:	4618      	mov	r0, r3
 80239f4:	602a      	str	r2, [r5, #0]
 80239f6:	f7ef f9eb 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80239fa:	4620      	mov	r0, r4
 80239fc:	b003      	add	sp, #12
 80239fe:	bd30      	pop	{r4, r5, pc}
 8023a00:	200004e4 	.word	0x200004e4

08023a04 <GUI_TIMER__GetNextTimerLin>:
 8023a04:	2300      	movs	r3, #0
 8023a06:	b570      	push	{r4, r5, r6, lr}
 8023a08:	600b      	str	r3, [r1, #0]
 8023a0a:	b082      	sub	sp, #8
 8023a0c:	b918      	cbnz	r0, 8023a16 <GUI_TIMER__GetNextTimerLin+0x12>
 8023a0e:	4604      	mov	r4, r0
 8023a10:	4620      	mov	r0, r4
 8023a12:	b002      	add	sp, #8
 8023a14:	bd70      	pop	{r4, r5, r6, pc}
 8023a16:	460d      	mov	r5, r1
 8023a18:	f7ef f9c6 	bl	8012da8 <GUI_ALLOC_LockH>
 8023a1c:	6884      	ldr	r4, [r0, #8]
 8023a1e:	ae01      	add	r6, sp, #4
 8023a20:	9001      	str	r0, [sp, #4]
 8023a22:	b92c      	cbnz	r4, 8023a30 <GUI_TIMER__GetNextTimerLin+0x2c>
 8023a24:	4630      	mov	r0, r6
 8023a26:	f7ef f9d3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023a2a:	4620      	mov	r0, r4
 8023a2c:	b002      	add	sp, #8
 8023a2e:	bd70      	pop	{r4, r5, r6, pc}
 8023a30:	4630      	mov	r0, r6
 8023a32:	f7ef f9cd 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023a36:	4620      	mov	r0, r4
 8023a38:	f7ef f9b6 	bl	8012da8 <GUI_ALLOC_LockH>
 8023a3c:	6903      	ldr	r3, [r0, #16]
 8023a3e:	9001      	str	r0, [sp, #4]
 8023a40:	602b      	str	r3, [r5, #0]
 8023a42:	e7ef      	b.n	8023a24 <GUI_TIMER__GetNextTimerLin+0x20>

08023a44 <GUI_TIMER_Delete>:
 8023a44:	b900      	cbnz	r0, 8023a48 <GUI_TIMER_Delete+0x4>
 8023a46:	4770      	bx	lr
 8023a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a4c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8023b14 <GUI_TIMER_Delete+0xd0>
 8023a50:	b082      	sub	sp, #8
 8023a52:	4605      	mov	r5, r0
 8023a54:	f7f4 fda6 	bl	80185a4 <GUI_Lock>
 8023a58:	f8d8 4000 	ldr.w	r4, [r8]
 8023a5c:	42a5      	cmp	r5, r4
 8023a5e:	d044      	beq.n	8023aea <GUI_TIMER_Delete+0xa6>
 8023a60:	466e      	mov	r6, sp
 8023a62:	b91c      	cbnz	r4, 8023a6c <GUI_TIMER_Delete+0x28>
 8023a64:	e019      	b.n	8023a9a <GUI_TIMER_Delete+0x56>
 8023a66:	f7ef f9b3 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023a6a:	b1b4      	cbz	r4, 8023a9a <GUI_TIMER_Delete+0x56>
 8023a6c:	4620      	mov	r0, r4
 8023a6e:	f7ef f99b 	bl	8012da8 <GUI_ALLOC_LockH>
 8023a72:	4603      	mov	r3, r0
 8023a74:	4630      	mov	r0, r6
 8023a76:	689c      	ldr	r4, [r3, #8]
 8023a78:	9300      	str	r3, [sp, #0]
 8023a7a:	42a5      	cmp	r5, r4
 8023a7c:	d1f3      	bne.n	8023a66 <GUI_TIMER_Delete+0x22>
 8023a7e:	4628      	mov	r0, r5
 8023a80:	f7ef f992 	bl	8012da8 <GUI_ALLOC_LockH>
 8023a84:	4603      	mov	r3, r0
 8023a86:	9a00      	ldr	r2, [sp, #0]
 8023a88:	a801      	add	r0, sp, #4
 8023a8a:	6899      	ldr	r1, [r3, #8]
 8023a8c:	9301      	str	r3, [sp, #4]
 8023a8e:	6091      	str	r1, [r2, #8]
 8023a90:	f7ef f99e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023a94:	4630      	mov	r0, r6
 8023a96:	f7ef f99b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023a9a:	4628      	mov	r0, r5
 8023a9c:	f7ef f984 	bl	8012da8 <GUI_ALLOC_LockH>
 8023aa0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8023aa4:	9000      	str	r0, [sp, #0]
 8023aa6:	42a5      	cmp	r5, r4
 8023aa8:	4b1a      	ldr	r3, [pc, #104]	; (8023b14 <GUI_TIMER_Delete+0xd0>)
 8023aaa:	d02c      	beq.n	8023b06 <GUI_TIMER_Delete+0xc2>
 8023aac:	b194      	cbz	r4, 8023ad4 <GUI_TIMER_Delete+0x90>
 8023aae:	af01      	add	r7, sp, #4
 8023ab0:	e002      	b.n	8023ab8 <GUI_TIMER_Delete+0x74>
 8023ab2:	f7ef f98d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023ab6:	b16c      	cbz	r4, 8023ad4 <GUI_TIMER_Delete+0x90>
 8023ab8:	4620      	mov	r0, r4
 8023aba:	f7ef f975 	bl	8012da8 <GUI_ALLOC_LockH>
 8023abe:	4603      	mov	r3, r0
 8023ac0:	4638      	mov	r0, r7
 8023ac2:	685c      	ldr	r4, [r3, #4]
 8023ac4:	9301      	str	r3, [sp, #4]
 8023ac6:	42a5      	cmp	r5, r4
 8023ac8:	d1f3      	bne.n	8023ab2 <GUI_TIMER_Delete+0x6e>
 8023aca:	9a00      	ldr	r2, [sp, #0]
 8023acc:	6852      	ldr	r2, [r2, #4]
 8023ace:	605a      	str	r2, [r3, #4]
 8023ad0:	f7ef f97e 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023ad4:	4630      	mov	r0, r6
 8023ad6:	f7ef f97b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023ada:	4628      	mov	r0, r5
 8023adc:	f7ef fafc 	bl	80130d8 <GUI_ALLOC_Free>
 8023ae0:	f7f4 fd56 	bl	8018590 <GUI_Unlock>
 8023ae4:	b002      	add	sp, #8
 8023ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023aea:	af02      	add	r7, sp, #8
 8023aec:	4628      	mov	r0, r5
 8023aee:	f7ef f95b 	bl	8012da8 <GUI_ALLOC_LockH>
 8023af2:	6883      	ldr	r3, [r0, #8]
 8023af4:	f847 0d04 	str.w	r0, [r7, #-4]!
 8023af8:	4638      	mov	r0, r7
 8023afa:	466e      	mov	r6, sp
 8023afc:	f8c8 3000 	str.w	r3, [r8]
 8023b00:	f7ef f966 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023b04:	e7c9      	b.n	8023a9a <GUI_TIMER_Delete+0x56>
 8023b06:	6842      	ldr	r2, [r0, #4]
 8023b08:	4630      	mov	r0, r6
 8023b0a:	605a      	str	r2, [r3, #4]
 8023b0c:	f7ef f960 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023b10:	e7e3      	b.n	8023ada <GUI_TIMER_Delete+0x96>
 8023b12:	bf00      	nop
 8023b14:	200004e4 	.word	0x200004e4

08023b18 <GUI_TIMER_GetFlag>:
 8023b18:	b530      	push	{r4, r5, lr}
 8023b1a:	b083      	sub	sp, #12
 8023b1c:	b918      	cbnz	r0, 8023b26 <GUI_TIMER_GetFlag+0xe>
 8023b1e:	2401      	movs	r4, #1
 8023b20:	4620      	mov	r0, r4
 8023b22:	b003      	add	sp, #12
 8023b24:	bd30      	pop	{r4, r5, pc}
 8023b26:	4604      	mov	r4, r0
 8023b28:	460d      	mov	r5, r1
 8023b2a:	f7f4 fd3b 	bl	80185a4 <GUI_Lock>
 8023b2e:	4620      	mov	r0, r4
 8023b30:	f7ef f93a 	bl	8012da8 <GUI_ALLOC_LockH>
 8023b34:	8982      	ldrh	r2, [r0, #12]
 8023b36:	ab02      	add	r3, sp, #8
 8023b38:	422a      	tst	r2, r5
 8023b3a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8023b3e:	4618      	mov	r0, r3
 8023b40:	bf14      	ite	ne
 8023b42:	2401      	movne	r4, #1
 8023b44:	2400      	moveq	r4, #0
 8023b46:	f7ef f943 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023b4a:	f7f4 fd21 	bl	8018590 <GUI_Unlock>
 8023b4e:	4620      	mov	r0, r4
 8023b50:	b003      	add	sp, #12
 8023b52:	bd30      	pop	{r4, r5, pc}

08023b54 <GUI__ManageCache>:
 8023b54:	4b3a      	ldr	r3, [pc, #232]	; (8023c40 <GUI__ManageCache+0xec>)
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b5c:	7c5d      	ldrb	r5, [r3, #17]
 8023b5e:	b082      	sub	sp, #8
 8023b60:	2d01      	cmp	r5, #1
 8023b62:	dd03      	ble.n	8023b6c <GUI__ManageCache+0x18>
 8023b64:	2001      	movs	r0, #1
 8023b66:	b002      	add	sp, #8
 8023b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b6c:	4e35      	ldr	r6, [pc, #212]	; (8023c44 <GUI__ManageCache+0xf0>)
 8023b6e:	4604      	mov	r4, r0
 8023b70:	6873      	ldr	r3, [r6, #4]
 8023b72:	b113      	cbz	r3, 8023b7a <GUI__ManageCache+0x26>
 8023b74:	4601      	mov	r1, r0
 8023b76:	4628      	mov	r0, r5
 8023b78:	4798      	blx	r3
 8023b7a:	2c01      	cmp	r4, #1
 8023b7c:	d027      	beq.n	8023bce <GUI__ManageCache+0x7a>
 8023b7e:	2c02      	cmp	r4, #2
 8023b80:	d00f      	beq.n	8023ba2 <GUI__ManageCache+0x4e>
 8023b82:	2c00      	cmp	r4, #0
 8023b84:	d1ee      	bne.n	8023b64 <GUI__ManageCache+0x10>
 8023b86:	00ac      	lsls	r4, r5, #2
 8023b88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023c44 <GUI__ManageCache+0xf0>
 8023b8c:	1937      	adds	r7, r6, r4
 8023b8e:	68bb      	ldr	r3, [r7, #8]
 8023b90:	2b01      	cmp	r3, #1
 8023b92:	d03a      	beq.n	8023c0a <GUI__ManageCache+0xb6>
 8023b94:	2001      	movs	r0, #1
 8023b96:	4426      	add	r6, r4
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	bf18      	it	ne
 8023b9c:	3b01      	subne	r3, #1
 8023b9e:	60b3      	str	r3, [r6, #8]
 8023ba0:	e7e1      	b.n	8023b66 <GUI__ManageCache+0x12>
 8023ba2:	4628      	mov	r0, r5
 8023ba4:	f7f0 fd06 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8023ba8:	9001      	str	r0, [sp, #4]
 8023baa:	2800      	cmp	r0, #0
 8023bac:	d0da      	beq.n	8023b64 <GUI__ManageCache+0x10>
 8023bae:	68c3      	ldr	r3, [r0, #12]
 8023bb0:	210d      	movs	r1, #13
 8023bb2:	a801      	add	r0, sp, #4
 8023bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bb6:	4798      	blx	r3
 8023bb8:	4604      	mov	r4, r0
 8023bba:	2800      	cmp	r0, #0
 8023bbc:	d0d2      	beq.n	8023b64 <GUI__ManageCache+0x10>
 8023bbe:	6833      	ldr	r3, [r6, #0]
 8023bc0:	b103      	cbz	r3, 8023bc4 <GUI__ManageCache+0x70>
 8023bc2:	4798      	blx	r3
 8023bc4:	2102      	movs	r1, #2
 8023bc6:	9801      	ldr	r0, [sp, #4]
 8023bc8:	47a0      	blx	r4
 8023bca:	2000      	movs	r0, #0
 8023bcc:	e7cb      	b.n	8023b66 <GUI__ManageCache+0x12>
 8023bce:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8023bd2:	68b7      	ldr	r7, [r6, #8]
 8023bd4:	b11f      	cbz	r7, 8023bde <GUI__ManageCache+0x8a>
 8023bd6:	3701      	adds	r7, #1
 8023bd8:	4620      	mov	r0, r4
 8023bda:	60b7      	str	r7, [r6, #8]
 8023bdc:	e7c3      	b.n	8023b66 <GUI__ManageCache+0x12>
 8023bde:	4628      	mov	r0, r5
 8023be0:	f7f0 fce8 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8023be4:	9001      	str	r0, [sp, #4]
 8023be6:	2800      	cmp	r0, #0
 8023be8:	d0bc      	beq.n	8023b64 <GUI__ManageCache+0x10>
 8023bea:	68c3      	ldr	r3, [r0, #12]
 8023bec:	210d      	movs	r1, #13
 8023bee:	a801      	add	r0, sp, #4
 8023bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023bf2:	4798      	blx	r3
 8023bf4:	4603      	mov	r3, r0
 8023bf6:	2800      	cmp	r0, #0
 8023bf8:	d0b4      	beq.n	8023b64 <GUI__ManageCache+0x10>
 8023bfa:	4621      	mov	r1, r4
 8023bfc:	9801      	ldr	r0, [sp, #4]
 8023bfe:	4798      	blx	r3
 8023c00:	68b3      	ldr	r3, [r6, #8]
 8023c02:	4638      	mov	r0, r7
 8023c04:	3301      	adds	r3, #1
 8023c06:	60b3      	str	r3, [r6, #8]
 8023c08:	e7ad      	b.n	8023b66 <GUI__ManageCache+0x12>
 8023c0a:	4628      	mov	r0, r5
 8023c0c:	f7f0 fcd2 	bl	80145b4 <GUI_DEVICE__GetpDriver>
 8023c10:	9001      	str	r0, [sp, #4]
 8023c12:	b188      	cbz	r0, 8023c38 <GUI__ManageCache+0xe4>
 8023c14:	68c3      	ldr	r3, [r0, #12]
 8023c16:	210d      	movs	r1, #13
 8023c18:	a801      	add	r0, sp, #4
 8023c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c1c:	4798      	blx	r3
 8023c1e:	4605      	mov	r5, r0
 8023c20:	b150      	cbz	r0, 8023c38 <GUI__ManageCache+0xe4>
 8023c22:	f8d8 3000 	ldr.w	r3, [r8]
 8023c26:	b103      	cbz	r3, 8023c2a <GUI__ManageCache+0xd6>
 8023c28:	4798      	blx	r3
 8023c2a:	2100      	movs	r1, #0
 8023c2c:	9801      	ldr	r0, [sp, #4]
 8023c2e:	47a8      	blx	r5
 8023c30:	1933      	adds	r3, r6, r4
 8023c32:	2000      	movs	r0, #0
 8023c34:	689b      	ldr	r3, [r3, #8]
 8023c36:	e7ae      	b.n	8023b96 <GUI__ManageCache+0x42>
 8023c38:	68bb      	ldr	r3, [r7, #8]
 8023c3a:	2001      	movs	r0, #1
 8023c3c:	e7ab      	b.n	8023b96 <GUI__ManageCache+0x42>
 8023c3e:	bf00      	nop
 8023c40:	20000018 	.word	0x20000018
 8023c44:	200004f8 	.word	0x200004f8

08023c48 <LCD_SetClipRectEx>:
 8023c48:	b530      	push	{r4, r5, lr}
 8023c4a:	4c0a      	ldr	r4, [pc, #40]	; (8023c74 <LCD_SetClipRectEx+0x2c>)
 8023c4c:	4605      	mov	r5, r0
 8023c4e:	4b0a      	ldr	r3, [pc, #40]	; (8023c78 <LCD_SetClipRectEx+0x30>)
 8023c50:	b083      	sub	sp, #12
 8023c52:	6822      	ldr	r2, [r4, #0]
 8023c54:	4669      	mov	r1, sp
 8023c56:	7c52      	ldrb	r2, [r2, #17]
 8023c58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023c5c:	68c3      	ldr	r3, [r0, #12]
 8023c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c60:	4798      	blx	r3
 8023c62:	6820      	ldr	r0, [r4, #0]
 8023c64:	466a      	mov	r2, sp
 8023c66:	4629      	mov	r1, r5
 8023c68:	3008      	adds	r0, #8
 8023c6a:	f7f5 fe6b 	bl	8019944 <GUI__IntersectRects>
 8023c6e:	b003      	add	sp, #12
 8023c70:	bd30      	pop	{r4, r5, pc}
 8023c72:	bf00      	nop
 8023c74:	20000018 	.word	0x20000018
 8023c78:	200467d0 	.word	0x200467d0

08023c7c <GUI_MEMDEV_Paint1Static>:
 8023c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c80:	4680      	mov	r8, r0
 8023c82:	b087      	sub	sp, #28
 8023c84:	2700      	movs	r7, #0
 8023c86:	e058      	b.n	8023d3a <GUI_MEMDEV_Paint1Static+0xbe>
 8023c88:	2e00      	cmp	r6, #0
 8023c8a:	d17e      	bne.n	8023d8a <GUI_MEMDEV_Paint1Static+0x10e>
 8023c8c:	f7fd fb66 	bl	802135c <WM_GetDesktopWindow>
 8023c90:	4580      	cmp	r8, r0
 8023c92:	f000 809a 	beq.w	8023dca <GUI_MEMDEV_Paint1Static+0x14e>
 8023c96:	4b58      	ldr	r3, [pc, #352]	; (8023df8 <GUI_MEMDEV_Paint1Static+0x17c>)
 8023c98:	2601      	movs	r6, #1
 8023c9a:	4649      	mov	r1, r9
 8023c9c:	4622      	mov	r2, r4
 8023c9e:	9302      	str	r3, [sp, #8]
 8023ca0:	4658      	mov	r0, fp
 8023ca2:	4b56      	ldr	r3, [pc, #344]	; (8023dfc <GUI_MEMDEV_Paint1Static+0x180>)
 8023ca4:	9600      	str	r6, [sp, #0]
 8023ca6:	9301      	str	r3, [sp, #4]
 8023ca8:	462b      	mov	r3, r5
 8023caa:	f7f9 f971 	bl	801cf90 <GUI_MEMDEV__CreateFixed>
 8023cae:	4681      	mov	r9, r0
 8023cb0:	4640      	mov	r0, r8
 8023cb2:	f7ef f879 	bl	8012da8 <GUI_ALLOC_LockH>
 8023cb6:	4603      	mov	r3, r0
 8023cb8:	9005      	str	r0, [sp, #20]
 8023cba:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
 8023cbe:	f1b9 0f00 	cmp.w	r9, #0
 8023cc2:	d079      	beq.n	8023db8 <GUI_MEMDEV_Paint1Static+0x13c>
 8023cc4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8023cc6:	a805      	add	r0, sp, #20
 8023cc8:	f8df b140 	ldr.w	fp, [pc, #320]	; 8023e0c <GUI_MEMDEV_Paint1Static+0x190>
 8023ccc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8023cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8023cd2:	f7ef f87d 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023cd6:	4648      	mov	r0, r9
 8023cd8:	f7f9 fa84 	bl	801d1e4 <GUI_MEMDEV_Select>
 8023cdc:	4682      	mov	sl, r0
 8023cde:	4630      	mov	r0, r6
 8023ce0:	4e47      	ldr	r6, [pc, #284]	; (8023e00 <GUI_MEMDEV_Paint1Static+0x184>)
 8023ce2:	f7f4 fc0b 	bl	80184fc <GUI__AlphaPreserveTrans>
 8023ce6:	4648      	mov	r0, r9
 8023ce8:	f7fa fad2 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 8023cec:	4b45      	ldr	r3, [pc, #276]	; (8023e04 <GUI_MEMDEV_Paint1Static+0x188>)
 8023cee:	fb05 f204 	mul.w	r2, r5, r4
 8023cf2:	4c45      	ldr	r4, [pc, #276]	; (8023e08 <GUI_MEMDEV_Paint1Static+0x18c>)
 8023cf4:	7819      	ldrb	r1, [r3, #0]
 8023cf6:	0092      	lsls	r2, r2, #2
 8023cf8:	6835      	ldr	r5, [r6, #0]
 8023cfa:	47a8      	blx	r5
 8023cfc:	4640      	mov	r0, r8
 8023cfe:	6825      	ldr	r5, [r4, #0]
 8023d00:	f8cb 8000 	str.w	r8, [fp]
 8023d04:	f7fd fba2 	bl	802144c <WM_GetWindowOrgX>
 8023d08:	6020      	str	r0, [r4, #0]
 8023d0a:	4640      	mov	r0, r8
 8023d0c:	f7fc ffee 	bl	8020cec <WM__Paint1>
 8023d10:	2200      	movs	r2, #0
 8023d12:	6025      	str	r5, [r4, #0]
 8023d14:	4610      	mov	r0, r2
 8023d16:	f8cb 2000 	str.w	r2, [fp]
 8023d1a:	f7f4 fbef 	bl	80184fc <GUI__AlphaPreserveTrans>
 8023d1e:	4650      	mov	r0, sl
 8023d20:	f7f9 fa60 	bl	801d1e4 <GUI_MEMDEV_Select>
 8023d24:	4640      	mov	r0, r8
 8023d26:	f7ef f835 	bl	8012d94 <GUI_ALLOC_h2p>
 8023d2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8023d2c:	fab0 f380 	clz	r3, r0
 8023d30:	095b      	lsrs	r3, r3, #5
 8023d32:	3701      	adds	r7, #1
 8023d34:	2f04      	cmp	r7, #4
 8023d36:	dc22      	bgt.n	8023d7e <GUI_MEMDEV_Paint1Static+0x102>
 8023d38:	b30b      	cbz	r3, 8023d7e <GUI_MEMDEV_Paint1Static+0x102>
 8023d3a:	4640      	mov	r0, r8
 8023d3c:	f7ef f834 	bl	8012da8 <GUI_ALLOC_LockH>
 8023d40:	4603      	mov	r3, r0
 8023d42:	a805      	add	r0, sp, #20
 8023d44:	f9b3 b000 	ldrsh.w	fp, [r3]
 8023d48:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 8023d4c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8023d50:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8023d54:	ebcb 0404 	rsb	r4, fp, r4
 8023d58:	9305      	str	r3, [sp, #20]
 8023d5a:	ebc9 0505 	rsb	r5, r9, r5
 8023d5e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8023d60:	3401      	adds	r4, #1
 8023d62:	f7ef f835 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023d66:	3501      	adds	r5, #1
 8023d68:	2d00      	cmp	r5, #0
 8023d6a:	bfc8      	it	gt
 8023d6c:	2c00      	cmpgt	r4, #0
 8023d6e:	bfd4      	ite	le
 8023d70:	2301      	movle	r3, #1
 8023d72:	2300      	movgt	r3, #0
 8023d74:	dc88      	bgt.n	8023c88 <GUI_MEMDEV_Paint1Static+0xc>
 8023d76:	3701      	adds	r7, #1
 8023d78:	2000      	movs	r0, #0
 8023d7a:	2f04      	cmp	r7, #4
 8023d7c:	dddc      	ble.n	8023d38 <GUI_MEMDEV_Paint1Static+0xbc>
 8023d7e:	b108      	cbz	r0, 8023d84 <GUI_MEMDEV_Paint1Static+0x108>
 8023d80:	f000 f846 	bl	8023e10 <GUI_MEMDEV_Write>
 8023d84:	b007      	add	sp, #28
 8023d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d8a:	4630      	mov	r0, r6
 8023d8c:	f7ef f80c 	bl	8012da8 <GUI_ALLOC_LockH>
 8023d90:	4603      	mov	r3, r0
 8023d92:	a806      	add	r0, sp, #24
 8023d94:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8023d98:	f840 3d08 	str.w	r3, [r0, #-8]!
 8023d9c:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 8023da0:	f7ef f816 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023da4:	45a9      	cmp	r9, r5
 8023da6:	d101      	bne.n	8023dac <GUI_MEMDEV_Paint1Static+0x130>
 8023da8:	45a3      	cmp	fp, r4
 8023daa:	d0bb      	beq.n	8023d24 <GUI_MEMDEV_Paint1Static+0xa8>
 8023dac:	464a      	mov	r2, r9
 8023dae:	4659      	mov	r1, fp
 8023db0:	4630      	mov	r0, r6
 8023db2:	f7fa fb2d 	bl	801e410 <GUI_MEMDEV_SetOrg>
 8023db6:	e7b5      	b.n	8023d24 <GUI_MEMDEV_Paint1Static+0xa8>
 8023db8:	a805      	add	r0, sp, #20
 8023dba:	f7ef f809 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023dbe:	4640      	mov	r0, r8
 8023dc0:	f7fc ff94 	bl	8020cec <WM__Paint1>
 8023dc4:	4633      	mov	r3, r6
 8023dc6:	4648      	mov	r0, r9
 8023dc8:	e7b3      	b.n	8023d32 <GUI_MEMDEV_Paint1Static+0xb6>
 8023dca:	f7f7 f809 	bl	801ade0 <LCD_GetXSize>
 8023dce:	4606      	mov	r6, r0
 8023dd0:	f7f7 f81c 	bl	801ae0c <LCD_GetYSize>
 8023dd4:	42b4      	cmp	r4, r6
 8023dd6:	dc02      	bgt.n	8023dde <GUI_MEMDEV_Paint1Static+0x162>
 8023dd8:	4285      	cmp	r5, r0
 8023dda:	f77f af5c 	ble.w	8023c96 <GUI_MEMDEV_Paint1Static+0x1a>
 8023dde:	42b4      	cmp	r4, r6
 8023de0:	bfa8      	it	ge
 8023de2:	4634      	movge	r4, r6
 8023de4:	4285      	cmp	r5, r0
 8023de6:	bfa8      	it	ge
 8023de8:	4605      	movge	r5, r0
 8023dea:	4621      	mov	r1, r4
 8023dec:	4640      	mov	r0, r8
 8023dee:	462a      	mov	r2, r5
 8023df0:	f7fd fbee 	bl	80215d0 <WM_SetSize>
 8023df4:	e74f      	b.n	8023c96 <GUI_MEMDEV_Paint1Static+0x1a>
 8023df6:	bf00      	nop
 8023df8:	080271dc 	.word	0x080271dc
 8023dfc:	0803483c 	.word	0x0803483c
 8023e00:	20000050 	.word	0x20000050
 8023e04:	20000510 	.word	0x20000510
 8023e08:	20046790 	.word	0x20046790
 8023e0c:	20046848 	.word	0x20046848

08023e10 <GUI_MEMDEV_Write>:
 8023e10:	b900      	cbnz	r0, 8023e14 <GUI_MEMDEV_Write+0x4>
 8023e12:	4770      	bx	lr
 8023e14:	b570      	push	{r4, r5, r6, lr}
 8023e16:	4604      	mov	r4, r0
 8023e18:	b084      	sub	sp, #16
 8023e1a:	f7f4 fbc3 	bl	80185a4 <GUI_Lock>
 8023e1e:	4620      	mov	r0, r4
 8023e20:	f7ee ffc2 	bl	8012da8 <GUI_ALLOC_LockH>
 8023e24:	4601      	mov	r1, r0
 8023e26:	a801      	add	r0, sp, #4
 8023e28:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8023e2c:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 8023e30:	890a      	ldrh	r2, [r1, #8]
 8023e32:	894b      	ldrh	r3, [r1, #10]
 8023e34:	4432      	add	r2, r6
 8023e36:	9101      	str	r1, [sp, #4]
 8023e38:	442b      	add	r3, r5
 8023e3a:	f8ad 6008 	strh.w	r6, [sp, #8]
 8023e3e:	3a01      	subs	r2, #1
 8023e40:	f8ad 500a 	strh.w	r5, [sp, #10]
 8023e44:	3b01      	subs	r3, #1
 8023e46:	f8ad 200c 	strh.w	r2, [sp, #12]
 8023e4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e4e:	f7ee ffbf 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8023e52:	a802      	add	r0, sp, #8
 8023e54:	f7fc fe7e 	bl	8020b54 <WM__InitIVRSearch>
 8023e58:	b140      	cbz	r0, 8023e6c <GUI_MEMDEV_Write+0x5c>
 8023e5a:	462a      	mov	r2, r5
 8023e5c:	4631      	mov	r1, r6
 8023e5e:	4620      	mov	r0, r4
 8023e60:	f7f9 f878 	bl	801cf54 <GUI_MEMDEV__WriteToActiveAt>
 8023e64:	f7fc fd4c 	bl	8020900 <WM__GetNextIVR>
 8023e68:	2800      	cmp	r0, #0
 8023e6a:	d1f6      	bne.n	8023e5a <GUI_MEMDEV_Write+0x4a>
 8023e6c:	f7f4 fb90 	bl	8018590 <GUI_Unlock>
 8023e70:	b004      	add	sp, #16
 8023e72:	bd70      	pop	{r4, r5, r6, pc}

08023e74 <WM_PID__SetPrevState>:
 8023e74:	b410      	push	{r4}
 8023e76:	4b05      	ldr	r3, [pc, #20]	; (8023e8c <WM_PID__SetPrevState+0x18>)
 8023e78:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8023e7c:	c807      	ldmia	r0, {r0, r1, r2}
 8023e7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023e82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023e8a:	4770      	bx	lr
 8023e8c:	20000514 	.word	0x20000514

08023e90 <_Screen2hWin>:
 8023e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e94:	4606      	mov	r6, r0
 8023e96:	b091      	sub	sp, #68	; 0x44
 8023e98:	b910      	cbnz	r0, 8023ea0 <_Screen2hWin+0x10>
 8023e9a:	b011      	add	sp, #68	; 0x44
 8023e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ea0:	4699      	mov	r9, r3
 8023ea2:	460d      	mov	r5, r1
 8023ea4:	4690      	mov	r8, r2
 8023ea6:	f7ee ff7f 	bl	8012da8 <GUI_ALLOC_LockH>
 8023eaa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023eac:	9007      	str	r0, [sp, #28]
 8023eae:	079c      	lsls	r4, r3, #30
 8023eb0:	f140 81b5 	bpl.w	802421e <_Screen2hWin+0x38e>
 8023eb4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023eb8:	4598      	cmp	r8, r3
 8023eba:	f2c0 81b0 	blt.w	802421e <_Screen2hWin+0x38e>
 8023ebe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023ec2:	4598      	cmp	r8, r3
 8023ec4:	f300 81ab 	bgt.w	802421e <_Screen2hWin+0x38e>
 8023ec8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023ecc:	4599      	cmp	r9, r3
 8023ece:	f2c0 81a6 	blt.w	802421e <_Screen2hWin+0x38e>
 8023ed2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023ed6:	4599      	cmp	r9, r3
 8023ed8:	f300 81a1 	bgt.w	802421e <_Screen2hWin+0x38e>
 8023edc:	69c3      	ldr	r3, [r0, #28]
 8023ede:	9303      	str	r3, [sp, #12]
 8023ee0:	2b00      	cmp	r3, #0
 8023ee2:	f000 818d 	beq.w	8024200 <_Screen2hWin+0x370>
 8023ee6:	42ab      	cmp	r3, r5
 8023ee8:	f000 818a 	beq.w	8024200 <_Screen2hWin+0x370>
 8023eec:	9803      	ldr	r0, [sp, #12]
 8023eee:	f7ee ff5b 	bl	8012da8 <GUI_ALLOC_LockH>
 8023ef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023ef4:	9008      	str	r0, [sp, #32]
 8023ef6:	0799      	lsls	r1, r3, #30
 8023ef8:	f140 8176 	bpl.w	80241e8 <_Screen2hWin+0x358>
 8023efc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023f00:	4598      	cmp	r8, r3
 8023f02:	f2c0 8171 	blt.w	80241e8 <_Screen2hWin+0x358>
 8023f06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023f0a:	4598      	cmp	r8, r3
 8023f0c:	f300 816c 	bgt.w	80241e8 <_Screen2hWin+0x358>
 8023f10:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023f14:	4599      	cmp	r9, r3
 8023f16:	f2c0 8167 	blt.w	80241e8 <_Screen2hWin+0x358>
 8023f1a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023f1e:	4599      	cmp	r9, r3
 8023f20:	f300 8162 	bgt.w	80241e8 <_Screen2hWin+0x358>
 8023f24:	69c3      	ldr	r3, [r0, #28]
 8023f26:	9304      	str	r3, [sp, #16]
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	f000 817d 	beq.w	8024228 <_Screen2hWin+0x398>
 8023f2e:	429d      	cmp	r5, r3
 8023f30:	f000 817a 	beq.w	8024228 <_Screen2hWin+0x398>
 8023f34:	9e03      	ldr	r6, [sp, #12]
 8023f36:	9804      	ldr	r0, [sp, #16]
 8023f38:	f7ee ff36 	bl	8012da8 <GUI_ALLOC_LockH>
 8023f3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023f3e:	9009      	str	r0, [sp, #36]	; 0x24
 8023f40:	079a      	lsls	r2, r3, #30
 8023f42:	f140 8145 	bpl.w	80241d0 <_Screen2hWin+0x340>
 8023f46:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023f4a:	4598      	cmp	r8, r3
 8023f4c:	f2c0 8140 	blt.w	80241d0 <_Screen2hWin+0x340>
 8023f50:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023f54:	4598      	cmp	r8, r3
 8023f56:	f300 813b 	bgt.w	80241d0 <_Screen2hWin+0x340>
 8023f5a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023f5e:	4599      	cmp	r9, r3
 8023f60:	f2c0 8136 	blt.w	80241d0 <_Screen2hWin+0x340>
 8023f64:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023f68:	4599      	cmp	r9, r3
 8023f6a:	f300 8131 	bgt.w	80241d0 <_Screen2hWin+0x340>
 8023f6e:	69c3      	ldr	r3, [r0, #28]
 8023f70:	9305      	str	r3, [sp, #20]
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	f000 815c 	beq.w	8024230 <_Screen2hWin+0x3a0>
 8023f78:	429d      	cmp	r5, r3
 8023f7a:	f000 8159 	beq.w	8024230 <_Screen2hWin+0x3a0>
 8023f7e:	9e04      	ldr	r6, [sp, #16]
 8023f80:	9805      	ldr	r0, [sp, #20]
 8023f82:	f7ee ff11 	bl	8012da8 <GUI_ALLOC_LockH>
 8023f86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023f88:	900a      	str	r0, [sp, #40]	; 0x28
 8023f8a:	079b      	lsls	r3, r3, #30
 8023f8c:	f140 8114 	bpl.w	80241b8 <_Screen2hWin+0x328>
 8023f90:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023f94:	4598      	cmp	r8, r3
 8023f96:	f2c0 810f 	blt.w	80241b8 <_Screen2hWin+0x328>
 8023f9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023f9e:	4598      	cmp	r8, r3
 8023fa0:	f300 810a 	bgt.w	80241b8 <_Screen2hWin+0x328>
 8023fa4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023fa8:	4599      	cmp	r9, r3
 8023faa:	f2c0 8105 	blt.w	80241b8 <_Screen2hWin+0x328>
 8023fae:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023fb2:	4599      	cmp	r9, r3
 8023fb4:	f300 8100 	bgt.w	80241b8 <_Screen2hWin+0x328>
 8023fb8:	69c3      	ldr	r3, [r0, #28]
 8023fba:	9302      	str	r3, [sp, #8]
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	f000 8135 	beq.w	802422c <_Screen2hWin+0x39c>
 8023fc2:	429d      	cmp	r5, r3
 8023fc4:	f000 8132 	beq.w	802422c <_Screen2hWin+0x39c>
 8023fc8:	9e05      	ldr	r6, [sp, #20]
 8023fca:	9802      	ldr	r0, [sp, #8]
 8023fcc:	f7ee feec 	bl	8012da8 <GUI_ALLOC_LockH>
 8023fd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8023fd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8023fd4:	079f      	lsls	r7, r3, #30
 8023fd6:	f140 80e3 	bpl.w	80241a0 <_Screen2hWin+0x310>
 8023fda:	f9b0 3000 	ldrsh.w	r3, [r0]
 8023fde:	4598      	cmp	r8, r3
 8023fe0:	f2c0 80de 	blt.w	80241a0 <_Screen2hWin+0x310>
 8023fe4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8023fe8:	4598      	cmp	r8, r3
 8023fea:	f300 80d9 	bgt.w	80241a0 <_Screen2hWin+0x310>
 8023fee:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8023ff2:	4599      	cmp	r9, r3
 8023ff4:	f2c0 80d4 	blt.w	80241a0 <_Screen2hWin+0x310>
 8023ff8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8023ffc:	4599      	cmp	r9, r3
 8023ffe:	f300 80cf 	bgt.w	80241a0 <_Screen2hWin+0x310>
 8024002:	69c3      	ldr	r3, [r0, #28]
 8024004:	9301      	str	r3, [sp, #4]
 8024006:	2b00      	cmp	r3, #0
 8024008:	f000 8107 	beq.w	802421a <_Screen2hWin+0x38a>
 802400c:	429d      	cmp	r5, r3
 802400e:	f000 8104 	beq.w	802421a <_Screen2hWin+0x38a>
 8024012:	9e02      	ldr	r6, [sp, #8]
 8024014:	9801      	ldr	r0, [sp, #4]
 8024016:	f7ee fec7 	bl	8012da8 <GUI_ALLOC_LockH>
 802401a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802401c:	900c      	str	r0, [sp, #48]	; 0x30
 802401e:	079c      	lsls	r4, r3, #30
 8024020:	f140 80b2 	bpl.w	8024188 <_Screen2hWin+0x2f8>
 8024024:	f9b0 3000 	ldrsh.w	r3, [r0]
 8024028:	4598      	cmp	r8, r3
 802402a:	f2c0 80ad 	blt.w	8024188 <_Screen2hWin+0x2f8>
 802402e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8024032:	4598      	cmp	r8, r3
 8024034:	f300 80a8 	bgt.w	8024188 <_Screen2hWin+0x2f8>
 8024038:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802403c:	4599      	cmp	r9, r3
 802403e:	f2c0 80a3 	blt.w	8024188 <_Screen2hWin+0x2f8>
 8024042:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8024046:	4599      	cmp	r9, r3
 8024048:	f300 809e 	bgt.w	8024188 <_Screen2hWin+0x2f8>
 802404c:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8024050:	455d      	cmp	r5, fp
 8024052:	f000 80e0 	beq.w	8024216 <_Screen2hWin+0x386>
 8024056:	f1bb 0f00 	cmp.w	fp, #0
 802405a:	f000 80dc 	beq.w	8024216 <_Screen2hWin+0x386>
 802405e:	9e01      	ldr	r6, [sp, #4]
 8024060:	4658      	mov	r0, fp
 8024062:	f7ee fea1 	bl	8012da8 <GUI_ALLOC_LockH>
 8024066:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8024068:	900d      	str	r0, [sp, #52]	; 0x34
 802406a:	0799      	lsls	r1, r3, #30
 802406c:	d57e      	bpl.n	802416c <_Screen2hWin+0x2dc>
 802406e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8024072:	4598      	cmp	r8, r3
 8024074:	db7a      	blt.n	802416c <_Screen2hWin+0x2dc>
 8024076:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802407a:	4598      	cmp	r8, r3
 802407c:	dc76      	bgt.n	802416c <_Screen2hWin+0x2dc>
 802407e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024082:	4599      	cmp	r9, r3
 8024084:	db72      	blt.n	802416c <_Screen2hWin+0x2dc>
 8024086:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802408a:	4599      	cmp	r9, r3
 802408c:	dc6e      	bgt.n	802416c <_Screen2hWin+0x2dc>
 802408e:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8024092:	4555      	cmp	r5, sl
 8024094:	f000 80bd 	beq.w	8024212 <_Screen2hWin+0x382>
 8024098:	f1ba 0f00 	cmp.w	sl, #0
 802409c:	f000 80b9 	beq.w	8024212 <_Screen2hWin+0x382>
 80240a0:	465e      	mov	r6, fp
 80240a2:	4650      	mov	r0, sl
 80240a4:	f7ee fe80 	bl	8012da8 <GUI_ALLOC_LockH>
 80240a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80240aa:	900e      	str	r0, [sp, #56]	; 0x38
 80240ac:	079a      	lsls	r2, r3, #30
 80240ae:	d550      	bpl.n	8024152 <_Screen2hWin+0x2c2>
 80240b0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80240b4:	4598      	cmp	r8, r3
 80240b6:	db4c      	blt.n	8024152 <_Screen2hWin+0x2c2>
 80240b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80240bc:	4598      	cmp	r8, r3
 80240be:	dc48      	bgt.n	8024152 <_Screen2hWin+0x2c2>
 80240c0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80240c4:	4599      	cmp	r9, r3
 80240c6:	db44      	blt.n	8024152 <_Screen2hWin+0x2c2>
 80240c8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80240cc:	4599      	cmp	r9, r3
 80240ce:	dc40      	bgt.n	8024152 <_Screen2hWin+0x2c2>
 80240d0:	69c7      	ldr	r7, [r0, #28]
 80240d2:	42bd      	cmp	r5, r7
 80240d4:	f000 809b 	beq.w	802420e <_Screen2hWin+0x37e>
 80240d8:	2f00      	cmp	r7, #0
 80240da:	f000 8098 	beq.w	802420e <_Screen2hWin+0x37e>
 80240de:	4656      	mov	r6, sl
 80240e0:	4638      	mov	r0, r7
 80240e2:	f7ee fe61 	bl	8012da8 <GUI_ALLOC_LockH>
 80240e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80240e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80240ea:	079b      	lsls	r3, r3, #30
 80240ec:	d527      	bpl.n	802413e <_Screen2hWin+0x2ae>
 80240ee:	f9b0 3000 	ldrsh.w	r3, [r0]
 80240f2:	4598      	cmp	r8, r3
 80240f4:	db23      	blt.n	802413e <_Screen2hWin+0x2ae>
 80240f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80240fa:	4598      	cmp	r8, r3
 80240fc:	dc1f      	bgt.n	802413e <_Screen2hWin+0x2ae>
 80240fe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024102:	4599      	cmp	r9, r3
 8024104:	db1b      	blt.n	802413e <_Screen2hWin+0x2ae>
 8024106:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802410a:	4599      	cmp	r9, r3
 802410c:	dc17      	bgt.n	802413e <_Screen2hWin+0x2ae>
 802410e:	69c4      	ldr	r4, [r0, #28]
 8024110:	42a5      	cmp	r5, r4
 8024112:	d07a      	beq.n	802420a <_Screen2hWin+0x37a>
 8024114:	2c00      	cmp	r4, #0
 8024116:	d078      	beq.n	802420a <_Screen2hWin+0x37a>
 8024118:	463e      	mov	r6, r7
 802411a:	e001      	b.n	8024120 <_Screen2hWin+0x290>
 802411c:	42a5      	cmp	r5, r4
 802411e:	d00e      	beq.n	802413e <_Screen2hWin+0x2ae>
 8024120:	464b      	mov	r3, r9
 8024122:	4642      	mov	r2, r8
 8024124:	4629      	mov	r1, r5
 8024126:	4620      	mov	r0, r4
 8024128:	f7ff feb2 	bl	8023e90 <_Screen2hWin>
 802412c:	2800      	cmp	r0, #0
 802412e:	bf18      	it	ne
 8024130:	4606      	movne	r6, r0
 8024132:	4620      	mov	r0, r4
 8024134:	f7ee fe2e 	bl	8012d94 <GUI_ALLOC_h2p>
 8024138:	6a04      	ldr	r4, [r0, #32]
 802413a:	2c00      	cmp	r4, #0
 802413c:	d1ee      	bne.n	802411c <_Screen2hWin+0x28c>
 802413e:	a80f      	add	r0, sp, #60	; 0x3c
 8024140:	f7ee fe46 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024144:	4638      	mov	r0, r7
 8024146:	f7ee fe25 	bl	8012d94 <GUI_ALLOC_h2p>
 802414a:	6a07      	ldr	r7, [r0, #32]
 802414c:	b10f      	cbz	r7, 8024152 <_Screen2hWin+0x2c2>
 802414e:	42bd      	cmp	r5, r7
 8024150:	d1c6      	bne.n	80240e0 <_Screen2hWin+0x250>
 8024152:	a80e      	add	r0, sp, #56	; 0x38
 8024154:	f7ee fe3c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024158:	4650      	mov	r0, sl
 802415a:	f7ee fe1b 	bl	8012d94 <GUI_ALLOC_h2p>
 802415e:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8024162:	f1ba 0f00 	cmp.w	sl, #0
 8024166:	d001      	beq.n	802416c <_Screen2hWin+0x2dc>
 8024168:	4555      	cmp	r5, sl
 802416a:	d19a      	bne.n	80240a2 <_Screen2hWin+0x212>
 802416c:	a80d      	add	r0, sp, #52	; 0x34
 802416e:	f7ee fe2f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024172:	4658      	mov	r0, fp
 8024174:	f7ee fe0e 	bl	8012d94 <GUI_ALLOC_h2p>
 8024178:	f8d0 b020 	ldr.w	fp, [r0, #32]
 802417c:	f1bb 0f00 	cmp.w	fp, #0
 8024180:	d002      	beq.n	8024188 <_Screen2hWin+0x2f8>
 8024182:	455d      	cmp	r5, fp
 8024184:	f47f af6c 	bne.w	8024060 <_Screen2hWin+0x1d0>
 8024188:	a80c      	add	r0, sp, #48	; 0x30
 802418a:	f7ee fe21 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802418e:	9801      	ldr	r0, [sp, #4]
 8024190:	f7ee fe00 	bl	8012d94 <GUI_ALLOC_h2p>
 8024194:	6a03      	ldr	r3, [r0, #32]
 8024196:	9301      	str	r3, [sp, #4]
 8024198:	b113      	cbz	r3, 80241a0 <_Screen2hWin+0x310>
 802419a:	429d      	cmp	r5, r3
 802419c:	f47f af3a 	bne.w	8024014 <_Screen2hWin+0x184>
 80241a0:	a80b      	add	r0, sp, #44	; 0x2c
 80241a2:	f7ee fe15 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80241a6:	9802      	ldr	r0, [sp, #8]
 80241a8:	f7ee fdf4 	bl	8012d94 <GUI_ALLOC_h2p>
 80241ac:	6a03      	ldr	r3, [r0, #32]
 80241ae:	9302      	str	r3, [sp, #8]
 80241b0:	b113      	cbz	r3, 80241b8 <_Screen2hWin+0x328>
 80241b2:	429d      	cmp	r5, r3
 80241b4:	f47f af09 	bne.w	8023fca <_Screen2hWin+0x13a>
 80241b8:	a80a      	add	r0, sp, #40	; 0x28
 80241ba:	f7ee fe09 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80241be:	9805      	ldr	r0, [sp, #20]
 80241c0:	f7ee fde8 	bl	8012d94 <GUI_ALLOC_h2p>
 80241c4:	6a03      	ldr	r3, [r0, #32]
 80241c6:	9305      	str	r3, [sp, #20]
 80241c8:	b113      	cbz	r3, 80241d0 <_Screen2hWin+0x340>
 80241ca:	429d      	cmp	r5, r3
 80241cc:	f47f aed8 	bne.w	8023f80 <_Screen2hWin+0xf0>
 80241d0:	a809      	add	r0, sp, #36	; 0x24
 80241d2:	f7ee fdfd 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80241d6:	9804      	ldr	r0, [sp, #16]
 80241d8:	f7ee fddc 	bl	8012d94 <GUI_ALLOC_h2p>
 80241dc:	6a03      	ldr	r3, [r0, #32]
 80241de:	9304      	str	r3, [sp, #16]
 80241e0:	b113      	cbz	r3, 80241e8 <_Screen2hWin+0x358>
 80241e2:	429d      	cmp	r5, r3
 80241e4:	f47f aea7 	bne.w	8023f36 <_Screen2hWin+0xa6>
 80241e8:	a808      	add	r0, sp, #32
 80241ea:	f7ee fdf1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80241ee:	9803      	ldr	r0, [sp, #12]
 80241f0:	f7ee fdd0 	bl	8012d94 <GUI_ALLOC_h2p>
 80241f4:	6a03      	ldr	r3, [r0, #32]
 80241f6:	9303      	str	r3, [sp, #12]
 80241f8:	b113      	cbz	r3, 8024200 <_Screen2hWin+0x370>
 80241fa:	429d      	cmp	r5, r3
 80241fc:	f47f ae76 	bne.w	8023eec <_Screen2hWin+0x5c>
 8024200:	a807      	add	r0, sp, #28
 8024202:	f7ee fde5 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024206:	4630      	mov	r0, r6
 8024208:	e647      	b.n	8023e9a <_Screen2hWin+0xa>
 802420a:	463e      	mov	r6, r7
 802420c:	e797      	b.n	802413e <_Screen2hWin+0x2ae>
 802420e:	4656      	mov	r6, sl
 8024210:	e79f      	b.n	8024152 <_Screen2hWin+0x2c2>
 8024212:	465e      	mov	r6, fp
 8024214:	e7aa      	b.n	802416c <_Screen2hWin+0x2dc>
 8024216:	9e01      	ldr	r6, [sp, #4]
 8024218:	e7b6      	b.n	8024188 <_Screen2hWin+0x2f8>
 802421a:	9e02      	ldr	r6, [sp, #8]
 802421c:	e7c0      	b.n	80241a0 <_Screen2hWin+0x310>
 802421e:	a807      	add	r0, sp, #28
 8024220:	f7ee fdd6 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024224:	2000      	movs	r0, #0
 8024226:	e638      	b.n	8023e9a <_Screen2hWin+0xa>
 8024228:	9e03      	ldr	r6, [sp, #12]
 802422a:	e7dd      	b.n	80241e8 <_Screen2hWin+0x358>
 802422c:	9e05      	ldr	r6, [sp, #20]
 802422e:	e7c3      	b.n	80241b8 <_Screen2hWin+0x328>
 8024230:	9e04      	ldr	r6, [sp, #16]
 8024232:	e7cd      	b.n	80241d0 <_Screen2hWin+0x340>

08024234 <WM_Screen2hWin>:
 8024234:	b538      	push	{r3, r4, r5, lr}
 8024236:	460d      	mov	r5, r1
 8024238:	4604      	mov	r4, r0
 802423a:	f7f4 f9b3 	bl	80185a4 <GUI_Lock>
 802423e:	4b07      	ldr	r3, [pc, #28]	; (802425c <WM_Screen2hWin+0x28>)
 8024240:	6818      	ldr	r0, [r3, #0]
 8024242:	f7fd f897 	bl	8021374 <WM_GetDesktopWindowEx>
 8024246:	4622      	mov	r2, r4
 8024248:	462b      	mov	r3, r5
 802424a:	2100      	movs	r1, #0
 802424c:	f7ff fe20 	bl	8023e90 <_Screen2hWin>
 8024250:	4604      	mov	r4, r0
 8024252:	f7f4 f99d 	bl	8018590 <GUI_Unlock>
 8024256:	4620      	mov	r0, r4
 8024258:	bd38      	pop	{r3, r4, r5, pc}
 802425a:	bf00      	nop
 802425c:	2004681c 	.word	0x2004681c

08024260 <WM_ReleaseCapture>:
 8024260:	b530      	push	{r4, r5, lr}
 8024262:	4d0b      	ldr	r5, [pc, #44]	; (8024290 <WM_ReleaseCapture+0x30>)
 8024264:	b085      	sub	sp, #20
 8024266:	f7f4 f99d 	bl	80185a4 <GUI_Lock>
 802426a:	4c0a      	ldr	r4, [pc, #40]	; (8024294 <WM_ReleaseCapture+0x34>)
 802426c:	682b      	ldr	r3, [r5, #0]
 802426e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8024272:	b148      	cbz	r0, 8024288 <WM_ReleaseCapture+0x28>
 8024274:	2318      	movs	r3, #24
 8024276:	a904      	add	r1, sp, #16
 8024278:	f841 3d10 	str.w	r3, [r1, #-16]!
 802427c:	f7fd fed8 	bl	8022030 <WM__SendMessage>
 8024280:	682b      	ldr	r3, [r5, #0]
 8024282:	2200      	movs	r2, #0
 8024284:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8024288:	f7f4 f982 	bl	8018590 <GUI_Unlock>
 802428c:	b005      	add	sp, #20
 802428e:	bd30      	pop	{r4, r5, pc}
 8024290:	2004681c 	.word	0x2004681c
 8024294:	20046840 	.word	0x20046840

08024298 <_GetDevData>:
 8024298:	2901      	cmp	r1, #1
 802429a:	4802      	ldr	r0, [pc, #8]	; (80242a4 <_GetDevData+0xc>)
 802429c:	bf18      	it	ne
 802429e:	2000      	movne	r0, #0
 80242a0:	4770      	bx	lr
 80242a2:	bf00      	nop
 80242a4:	0803483c 	.word	0x0803483c

080242a8 <_GetDevFunc>:
 80242a8:	2916      	cmp	r1, #22
 80242aa:	4802      	ldr	r0, [pc, #8]	; (80242b4 <_GetDevFunc+0xc>)
 80242ac:	bf18      	it	ne
 80242ae:	2000      	movne	r0, #0
 80242b0:	4770      	bx	lr
 80242b2:	bf00      	nop
 80242b4:	08025179 	.word	0x08025179

080242b8 <_GetDevProp>:
 80242b8:	2908      	cmp	r1, #8
 80242ba:	bf0c      	ite	eq
 80242bc:	2020      	moveq	r0, #32
 80242be:	2000      	movne	r0, #0
 80242c0:	4770      	bx	lr
 80242c2:	bf00      	nop

080242c4 <_SetOrg>:
 80242c4:	6800      	ldr	r0, [r0, #0]
 80242c6:	68c3      	ldr	r3, [r0, #12]
 80242c8:	6a1b      	ldr	r3, [r3, #32]
 80242ca:	4718      	bx	r3

080242cc <_GetRect>:
 80242cc:	b570      	push	{r4, r5, r6, lr}
 80242ce:	b082      	sub	sp, #8
 80242d0:	6880      	ldr	r0, [r0, #8]
 80242d2:	460d      	mov	r5, r1
 80242d4:	f7ee fd68 	bl	8012da8 <GUI_ALLOC_LockH>
 80242d8:	4602      	mov	r2, r0
 80242da:	a802      	add	r0, sp, #8
 80242dc:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 80242e0:	8914      	ldrh	r4, [r2, #8]
 80242e2:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 80242e6:	8953      	ldrh	r3, [r2, #10]
 80242e8:	4434      	add	r4, r6
 80242ea:	802e      	strh	r6, [r5, #0]
 80242ec:	440b      	add	r3, r1
 80242ee:	3c01      	subs	r4, #1
 80242f0:	8069      	strh	r1, [r5, #2]
 80242f2:	3b01      	subs	r3, #1
 80242f4:	80ac      	strh	r4, [r5, #4]
 80242f6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80242fa:	80eb      	strh	r3, [r5, #6]
 80242fc:	f7ee fd68 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024300:	b002      	add	sp, #8
 8024302:	bd70      	pop	{r4, r5, r6, pc}

08024304 <_DrawBitmap>:
 8024304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024308:	4ca9      	ldr	r4, [pc, #676]	; (80245b0 <_DrawBitmap+0x2ac>)
 802430a:	b093      	sub	sp, #76	; 0x4c
 802430c:	6825      	ldr	r5, [r4, #0]
 802430e:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8024312:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8024314:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024316:	b916      	cbnz	r6, 802431e <_DrawBitmap+0x1a>
 8024318:	b013      	add	sp, #76	; 0x4c
 802431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802431e:	4607      	mov	r7, r0
 8024320:	4630      	mov	r0, r6
 8024322:	9208      	str	r2, [sp, #32]
 8024324:	460c      	mov	r4, r1
 8024326:	9303      	str	r3, [sp, #12]
 8024328:	f7ee fd3e 	bl	8012da8 <GUI_ALLOC_LockH>
 802432c:	6942      	ldr	r2, [r0, #20]
 802432e:	900f      	str	r0, [sp, #60]	; 0x3c
 8024330:	2a00      	cmp	r2, #0
 8024332:	f040 80d6 	bne.w	80244e2 <_DrawBitmap+0x1de>
 8024336:	4603      	mov	r3, r0
 8024338:	4610      	mov	r0, r2
 802433a:	68db      	ldr	r3, [r3, #12]
 802433c:	9010      	str	r0, [sp, #64]	; 0x40
 802433e:	a80f      	add	r0, sp, #60	; 0x3c
 8024340:	9304      	str	r3, [sp, #16]
 8024342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024344:	18e3      	adds	r3, r4, r3
 8024346:	9305      	str	r3, [sp, #20]
 8024348:	f7ee fd42 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802434c:	4b98      	ldr	r3, [pc, #608]	; (80245b0 <_DrawBitmap+0x2ac>)
 802434e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024350:	681b      	ldr	r3, [r3, #0]
 8024352:	b120      	cbz	r0, 802435e <_DrawBitmap+0x5a>
 8024354:	7c1a      	ldrb	r2, [r3, #16]
 8024356:	4c96      	ldr	r4, [pc, #600]	; (80245b0 <_DrawBitmap+0x2ac>)
 8024358:	0796      	lsls	r6, r2, #30
 802435a:	f140 8099 	bpl.w	8024490 <_DrawBitmap+0x18c>
 802435e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024360:	f7ee fd22 	bl	8012da8 <GUI_ALLOC_LockH>
 8024364:	4604      	mov	r4, r0
 8024366:	9908      	ldr	r1, [sp, #32]
 8024368:	a812      	add	r0, sp, #72	; 0x48
 802436a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 802436e:	68e3      	ldr	r3, [r4, #12]
 8024370:	1a8a      	subs	r2, r1, r2
 8024372:	9905      	ldr	r1, [sp, #20]
 8024374:	f840 4d04 	str.w	r4, [r0, #-4]!
 8024378:	fb03 f302 	mul.w	r3, r3, r2
 802437c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8024380:	3318      	adds	r3, #24
 8024382:	1a8a      	subs	r2, r1, r2
 8024384:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024388:	18e3      	adds	r3, r4, r3
 802438a:	9302      	str	r3, [sp, #8]
 802438c:	f7ee fd20 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024390:	2d17      	cmp	r5, #23
 8024392:	dd4e      	ble.n	8024432 <_DrawBitmap+0x12e>
 8024394:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024396:	2b00      	cmp	r3, #0
 8024398:	dd41      	ble.n	802441e <_DrawBitmap+0x11a>
 802439a:	9b03      	ldr	r3, [sp, #12]
 802439c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80243a0:	009b      	lsls	r3, r3, #2
 80243a2:	9707      	str	r7, [sp, #28]
 80243a4:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80245bc <_DrawBitmap+0x2b8>
 80243a8:	9308      	str	r3, [sp, #32]
 80243aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80243ac:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80243ae:	4443      	add	r3, r8
 80243b0:	9306      	str	r3, [sp, #24]
 80243b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80243b4:	b128      	cbz	r0, 80243c2 <_DrawBitmap+0xbe>
 80243b6:	6881      	ldr	r1, [r0, #8]
 80243b8:	4642      	mov	r2, r8
 80243ba:	9b03      	ldr	r3, [sp, #12]
 80243bc:	684c      	ldr	r4, [r1, #4]
 80243be:	9905      	ldr	r1, [sp, #20]
 80243c0:	47a0      	blx	r4
 80243c2:	9b07      	ldr	r3, [sp, #28]
 80243c4:	691b      	ldr	r3, [r3, #16]
 80243c6:	68da      	ldr	r2, [r3, #12]
 80243c8:	2a00      	cmp	r2, #0
 80243ca:	f040 8083 	bne.w	80244d4 <_DrawBitmap+0x1d0>
 80243ce:	685b      	ldr	r3, [r3, #4]
 80243d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80243d4:	4798      	blx	r3
 80243d6:	463e      	mov	r6, r7
 80243d8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80243dc:	0e04      	lsrs	r4, r0, #24
 80243de:	9d03      	ldr	r5, [sp, #12]
 80243e0:	971f      	str	r7, [sp, #124]	; 0x7c
 80243e2:	4633      	mov	r3, r6
 80243e4:	2700      	movs	r7, #0
 80243e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80243ea:	ebb4 6f12 	cmp.w	r4, r2, lsr #24
 80243ee:	d058      	beq.n	80244a2 <_DrawBitmap+0x19e>
 80243f0:	2f00      	cmp	r7, #0
 80243f2:	d159      	bne.n	80244a8 <_DrawBitmap+0x1a4>
 80243f4:	6830      	ldr	r0, [r6, #0]
 80243f6:	0e02      	lsrs	r2, r0, #24
 80243f8:	d164      	bne.n	80244c4 <_DrawBitmap+0x1c0>
 80243fa:	3d01      	subs	r5, #1
 80243fc:	f10a 0a04 	add.w	sl, sl, #4
 8024400:	3604      	adds	r6, #4
 8024402:	2d00      	cmp	r5, #0
 8024404:	d1ed      	bne.n	80243e2 <_DrawBitmap+0xde>
 8024406:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8024408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802440a:	f108 0801 	add.w	r8, r8, #1
 802440e:	9a04      	ldr	r2, [sp, #16]
 8024410:	441f      	add	r7, r3
 8024412:	9b02      	ldr	r3, [sp, #8]
 8024414:	4413      	add	r3, r2
 8024416:	9302      	str	r3, [sp, #8]
 8024418:	9b06      	ldr	r3, [sp, #24]
 802441a:	4598      	cmp	r8, r3
 802441c:	d1c9      	bne.n	80243b2 <_DrawBitmap+0xae>
 802441e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024420:	2b00      	cmp	r3, #0
 8024422:	f43f af79 	beq.w	8024318 <_DrawBitmap+0x14>
 8024426:	a810      	add	r0, sp, #64	; 0x40
 8024428:	f7ee fcd2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 802442c:	b013      	add	sp, #76	; 0x4c
 802442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024432:	2d10      	cmp	r5, #16
 8024434:	d05a      	beq.n	80244ec <_DrawBitmap+0x1e8>
 8024436:	2d08      	cmp	r5, #8
 8024438:	f000 80c2 	beq.w	80245c0 <_DrawBitmap+0x2bc>
 802443c:	4b5d      	ldr	r3, [pc, #372]	; (80245b4 <_DrawBitmap+0x2b0>)
 802443e:	f1ba 0f00 	cmp.w	sl, #0
 8024442:	bf08      	it	eq
 8024444:	469a      	moveq	sl, r3
 8024446:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024448:	2b00      	cmp	r3, #0
 802444a:	f340 80a9 	ble.w	80245a0 <_DrawBitmap+0x29c>
 802444e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024450:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024452:	009b      	lsls	r3, r3, #2
 8024454:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024456:	0052      	lsls	r2, r2, #1
 8024458:	930a      	str	r3, [sp, #40]	; 0x28
 802445a:	2300      	movs	r3, #0
 802445c:	920c      	str	r2, [sp, #48]	; 0x30
 802445e:	9a02      	ldr	r2, [sp, #8]
 8024460:	2d02      	cmp	r5, #2
 8024462:	f000 8339 	beq.w	8024ad8 <_DrawBitmap+0x7d4>
 8024466:	2d04      	cmp	r5, #4
 8024468:	f000 81f0 	beq.w	802484c <_DrawBitmap+0x548>
 802446c:	2d01      	cmp	r5, #1
 802446e:	f000 812c 	beq.w	80246ca <_DrawBitmap+0x3c6>
 8024472:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024474:	3301      	adds	r3, #1
 8024476:	4401      	add	r1, r0
 8024478:	9804      	ldr	r0, [sp, #16]
 802447a:	4402      	add	r2, r0
 802447c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802447e:	4298      	cmp	r0, r3
 8024480:	dcee      	bgt.n	8024460 <_DrawBitmap+0x15c>
 8024482:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8024486:	46de      	mov	lr, fp
 8024488:	f1be 0f00 	cmp.w	lr, #0
 802448c:	d1cb      	bne.n	8024426 <_DrawBitmap+0x122>
 802448e:	e743      	b.n	8024318 <_DrawBitmap+0x14>
 8024490:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8024492:	9a08      	ldr	r2, [sp, #32]
 8024494:	9300      	str	r3, [sp, #0]
 8024496:	9905      	ldr	r1, [sp, #20]
 8024498:	9b03      	ldr	r3, [sp, #12]
 802449a:	f7fa f80f 	bl	801e4bc <GUI_USAGE_AddRect>
 802449e:	6823      	ldr	r3, [r4, #0]
 80244a0:	e75d      	b.n	802435e <_DrawBitmap+0x5a>
 80244a2:	3701      	adds	r7, #1
 80244a4:	42af      	cmp	r7, r5
 80244a6:	d19e      	bne.n	80243e6 <_DrawBitmap+0xe2>
 80244a8:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80244ac:	1bed      	subs	r5, r5, r7
 80244ae:	4631      	mov	r1, r6
 80244b0:	4650      	mov	r0, sl
 80244b2:	f8d9 3000 	ldr.w	r3, [r9]
 80244b6:	465a      	mov	r2, fp
 80244b8:	445e      	add	r6, fp
 80244ba:	4798      	blx	r3
 80244bc:	44da      	add	sl, fp
 80244be:	2d00      	cmp	r5, #0
 80244c0:	d18f      	bne.n	80243e2 <_DrawBitmap+0xde>
 80244c2:	e7a0      	b.n	8024406 <_DrawBitmap+0x102>
 80244c4:	4b3c      	ldr	r3, [pc, #240]	; (80245b8 <_DrawBitmap+0x2b4>)
 80244c6:	f8da 1000 	ldr.w	r1, [sl]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	4798      	blx	r3
 80244ce:	f8ca 0000 	str.w	r0, [sl]
 80244d2:	e792      	b.n	80243fa <_DrawBitmap+0xf6>
 80244d4:	f8d9 3000 	ldr.w	r3, [r9]
 80244d8:	4639      	mov	r1, r7
 80244da:	9a08      	ldr	r2, [sp, #32]
 80244dc:	9802      	ldr	r0, [sp, #8]
 80244de:	4798      	blx	r3
 80244e0:	e792      	b.n	8024408 <_DrawBitmap+0x104>
 80244e2:	4610      	mov	r0, r2
 80244e4:	f7ee fc60 	bl	8012da8 <GUI_ALLOC_LockH>
 80244e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80244ea:	e726      	b.n	802433a <_DrawBitmap+0x36>
 80244ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	dd95      	ble.n	802441e <_DrawBitmap+0x11a>
 80244f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80244f4:	f8dd a020 	ldr.w	sl, [sp, #32]
 80244f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80244fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80244fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8024500:	4453      	add	r3, sl
 8024502:	9306      	str	r3, [sp, #24]
 8024504:	b356      	cbz	r6, 802455c <_DrawBitmap+0x258>
 8024506:	68b0      	ldr	r0, [r6, #8]
 8024508:	4652      	mov	r2, sl
 802450a:	9d03      	ldr	r5, [sp, #12]
 802450c:	46d9      	mov	r9, fp
 802450e:	6844      	ldr	r4, [r0, #4]
 8024510:	4630      	mov	r0, r6
 8024512:	462b      	mov	r3, r5
 8024514:	9905      	ldr	r1, [sp, #20]
 8024516:	47a0      	blx	r4
 8024518:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802451c:	9c05      	ldr	r4, [sp, #20]
 802451e:	693b      	ldr	r3, [r7, #16]
 8024520:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8024524:	685b      	ldr	r3, [r3, #4]
 8024526:	4798      	blx	r3
 8024528:	68b3      	ldr	r3, [r6, #8]
 802452a:	4621      	mov	r1, r4
 802452c:	f848 0b04 	str.w	r0, [r8], #4
 8024530:	4652      	mov	r2, sl
 8024532:	681b      	ldr	r3, [r3, #0]
 8024534:	4630      	mov	r0, r6
 8024536:	3401      	adds	r4, #1
 8024538:	4798      	blx	r3
 802453a:	3d01      	subs	r5, #1
 802453c:	d1ef      	bne.n	802451e <_DrawBitmap+0x21a>
 802453e:	9b02      	ldr	r3, [sp, #8]
 8024540:	f10a 0a01 	add.w	sl, sl, #1
 8024544:	9a04      	ldr	r2, [sp, #16]
 8024546:	4413      	add	r3, r2
 8024548:	9302      	str	r3, [sp, #8]
 802454a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802454c:	449b      	add	fp, r3
 802454e:	9b06      	ldr	r3, [sp, #24]
 8024550:	459a      	cmp	sl, r3
 8024552:	f43f af64 	beq.w	802441e <_DrawBitmap+0x11a>
 8024556:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8024558:	2e00      	cmp	r6, #0
 802455a:	d1d4      	bne.n	8024506 <_DrawBitmap+0x202>
 802455c:	465e      	mov	r6, fp
 802455e:	9d02      	ldr	r5, [sp, #8]
 8024560:	9c03      	ldr	r4, [sp, #12]
 8024562:	693b      	ldr	r3, [r7, #16]
 8024564:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8024568:	685b      	ldr	r3, [r3, #4]
 802456a:	4798      	blx	r3
 802456c:	3c01      	subs	r4, #1
 802456e:	f845 0b04 	str.w	r0, [r5], #4
 8024572:	d1f6      	bne.n	8024562 <_DrawBitmap+0x25e>
 8024574:	e7e3      	b.n	802453e <_DrawBitmap+0x23a>
 8024576:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 802457a:	9b06      	ldr	r3, [sp, #24]
 802457c:	a80f      	add	r0, sp, #60	; 0x3c
 802457e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024580:	3301      	adds	r3, #1
 8024582:	461c      	mov	r4, r3
 8024584:	9306      	str	r3, [sp, #24]
 8024586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024588:	4413      	add	r3, r2
 802458a:	9a04      	ldr	r2, [sp, #16]
 802458c:	931f      	str	r3, [sp, #124]	; 0x7c
 802458e:	9b02      	ldr	r3, [sp, #8]
 8024590:	4413      	add	r3, r2
 8024592:	9302      	str	r3, [sp, #8]
 8024594:	f7ee fc1c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024598:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802459a:	4294      	cmp	r4, r2
 802459c:	f2c0 809e 	blt.w	80246dc <_DrawBitmap+0x3d8>
 80245a0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80245a4:	f1be 0f00 	cmp.w	lr, #0
 80245a8:	f47f af3d 	bne.w	8024426 <_DrawBitmap+0x122>
 80245ac:	e6b4      	b.n	8024318 <_DrawBitmap+0x14>
 80245ae:	bf00      	nop
 80245b0:	20000018 	.word	0x20000018
 80245b4:	08034870 	.word	0x08034870
 80245b8:	20000044 	.word	0x20000044
 80245bc:	2000004c 	.word	0x2000004c
 80245c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	f340 8369 	ble.w	8024c9a <_DrawBitmap+0x996>
 80245c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80245ca:	9a03      	ldr	r2, [sp, #12]
 80245cc:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80245d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80245d4:	189c      	adds	r4, r3, r2
 80245d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80245d8:	4658      	mov	r0, fp
 80245da:	465d      	mov	r5, fp
 80245dc:	444b      	add	r3, r9
 80245de:	9306      	str	r3, [sp, #24]
 80245e0:	4b98      	ldr	r3, [pc, #608]	; (8024844 <_DrawBitmap+0x540>)
 80245e2:	681b      	ldr	r3, [r3, #0]
 80245e4:	7c1b      	ldrb	r3, [r3, #16]
 80245e6:	f1ba 0f00 	cmp.w	sl, #0
 80245ea:	d03f      	beq.n	802466c <_DrawBitmap+0x368>
 80245ec:	f013 0303 	ands.w	r3, r3, #3
 80245f0:	d031      	beq.n	8024656 <_DrawBitmap+0x352>
 80245f2:	2b02      	cmp	r3, #2
 80245f4:	d11c      	bne.n	8024630 <_DrawBitmap+0x32c>
 80245f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80245f8:	2d00      	cmp	r5, #0
 80245fa:	d05a      	beq.n	80246b2 <_DrawBitmap+0x3ae>
 80245fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8024600:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8024604:	9f03      	ldr	r7, [sp, #12]
 8024606:	9e05      	ldr	r6, [sp, #20]
 8024608:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802460c:	4631      	mov	r1, r6
 802460e:	464a      	mov	r2, r9
 8024610:	3601      	adds	r6, #1
 8024612:	4628      	mov	r0, r5
 8024614:	b133      	cbz	r3, 8024624 <_DrawBitmap+0x320>
 8024616:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802461a:	f8c8 3000 	str.w	r3, [r8]
 802461e:	68ab      	ldr	r3, [r5, #8]
 8024620:	681b      	ldr	r3, [r3, #0]
 8024622:	4798      	blx	r3
 8024624:	3f01      	subs	r7, #1
 8024626:	f108 0804 	add.w	r8, r8, #4
 802462a:	d1ed      	bne.n	8024608 <_DrawBitmap+0x304>
 802462c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802462e:	4628      	mov	r0, r5
 8024630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024632:	f109 0901 	add.w	r9, r9, #1
 8024636:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8024638:	4413      	add	r3, r2
 802463a:	9a04      	ldr	r2, [sp, #16]
 802463c:	931f      	str	r3, [sp, #124]	; 0x7c
 802463e:	9b02      	ldr	r3, [sp, #8]
 8024640:	4413      	add	r3, r2
 8024642:	9302      	str	r3, [sp, #8]
 8024644:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024646:	441c      	add	r4, r3
 8024648:	9b06      	ldr	r3, [sp, #24]
 802464a:	454b      	cmp	r3, r9
 802464c:	d1c8      	bne.n	80245e0 <_DrawBitmap+0x2dc>
 802464e:	2800      	cmp	r0, #0
 8024650:	f47f aee9 	bne.w	8024426 <_DrawBitmap+0x122>
 8024654:	e660      	b.n	8024318 <_DrawBitmap+0x14>
 8024656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024658:	9a02      	ldr	r2, [sp, #8]
 802465a:	f813 1b01 	ldrb.w	r1, [r3], #1
 802465e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8024662:	429c      	cmp	r4, r3
 8024664:	f842 1b04 	str.w	r1, [r2], #4
 8024668:	d1f7      	bne.n	802465a <_DrawBitmap+0x356>
 802466a:	e7e1      	b.n	8024630 <_DrawBitmap+0x32c>
 802466c:	f013 0303 	ands.w	r3, r3, #3
 8024670:	f000 830a 	beq.w	8024c88 <_DrawBitmap+0x984>
 8024674:	2b02      	cmp	r3, #2
 8024676:	d1db      	bne.n	8024630 <_DrawBitmap+0x32c>
 8024678:	2d00      	cmp	r5, #0
 802467a:	f000 8314 	beq.w	8024ca6 <_DrawBitmap+0x9a2>
 802467e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024680:	9f02      	ldr	r7, [sp, #8]
 8024682:	f103 38ff 	add.w	r8, r3, #4294967295
 8024686:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802468a:	9e05      	ldr	r6, [sp, #20]
 802468c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8024690:	4631      	mov	r1, r6
 8024692:	464a      	mov	r2, r9
 8024694:	3601      	adds	r6, #1
 8024696:	4628      	mov	r0, r5
 8024698:	b12b      	cbz	r3, 80246a6 <_DrawBitmap+0x3a2>
 802469a:	f8d5 e008 	ldr.w	lr, [r5, #8]
 802469e:	603b      	str	r3, [r7, #0]
 80246a0:	f8de 3000 	ldr.w	r3, [lr]
 80246a4:	4798      	blx	r3
 80246a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80246aa:	f107 0704 	add.w	r7, r7, #4
 80246ae:	d1ed      	bne.n	802468c <_DrawBitmap+0x388>
 80246b0:	e7bc      	b.n	802462c <_DrawBitmap+0x328>
 80246b2:	9a02      	ldr	r2, [sp, #8]
 80246b4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80246b8:	b111      	cbz	r1, 80246c0 <_DrawBitmap+0x3bc>
 80246ba:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80246be:	6011      	str	r1, [r2, #0]
 80246c0:	42a3      	cmp	r3, r4
 80246c2:	f102 0204 	add.w	r2, r2, #4
 80246c6:	d1f5      	bne.n	80246b4 <_DrawBitmap+0x3b0>
 80246c8:	e7b1      	b.n	802462e <_DrawBitmap+0x32a>
 80246ca:	9306      	str	r3, [sp, #24]
 80246cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80246ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8024848 <_DrawBitmap+0x544>
 80246d2:	f1c3 0308 	rsb	r3, r3, #8
 80246d6:	9202      	str	r2, [sp, #8]
 80246d8:	911f      	str	r1, [sp, #124]	; 0x7c
 80246da:	930a      	str	r3, [sp, #40]	; 0x28
 80246dc:	4b59      	ldr	r3, [pc, #356]	; (8024844 <_DrawBitmap+0x540>)
 80246de:	681b      	ldr	r3, [r3, #0]
 80246e0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80246e2:	f7ee fb61 	bl	8012da8 <GUI_ALLOC_LockH>
 80246e6:	4b57      	ldr	r3, [pc, #348]	; (8024844 <_DrawBitmap+0x540>)
 80246e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	7812      	ldrb	r2, [r2, #0]
 80246ee:	7c1b      	ldrb	r3, [r3, #16]
 80246f0:	f819 4002 	ldrb.w	r4, [r9, r2]
 80246f4:	f003 0303 	and.w	r3, r3, #3
 80246f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80246fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80246fc:	2b02      	cmp	r3, #2
 80246fe:	fa44 f402 	asr.w	r4, r4, r2
 8024702:	d048      	beq.n	8024796 <_DrawBitmap+0x492>
 8024704:	2b03      	cmp	r3, #3
 8024706:	d020      	beq.n	802474a <_DrawBitmap+0x446>
 8024708:	2b01      	cmp	r3, #1
 802470a:	d01e      	beq.n	802474a <_DrawBitmap+0x446>
 802470c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802470e:	9e02      	ldr	r6, [sp, #8]
 8024710:	9d03      	ldr	r5, [sp, #12]
 8024712:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8024714:	42a8      	cmp	r0, r5
 8024716:	4631      	mov	r1, r6
 8024718:	bf28      	it	cs
 802471a:	4628      	movcs	r0, r5
 802471c:	1a2d      	subs	r5, r5, r0
 802471e:	4602      	mov	r2, r0
 8024720:	f004 0301 	and.w	r3, r4, #1
 8024724:	3a01      	subs	r2, #1
 8024726:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802472a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802472e:	f841 3b04 	str.w	r3, [r1], #4
 8024732:	d1f5      	bne.n	8024720 <_DrawBitmap+0x41c>
 8024734:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8024738:	2d00      	cmp	r5, #0
 802473a:	f43f af1e 	beq.w	802457a <_DrawBitmap+0x276>
 802473e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8024742:	2008      	movs	r0, #8
 8024744:	f819 4003 	ldrb.w	r4, [r9, r3]
 8024748:	e7e4      	b.n	8024714 <_DrawBitmap+0x410>
 802474a:	6803      	ldr	r3, [r0, #0]
 802474c:	691b      	ldr	r3, [r3, #16]
 802474e:	689b      	ldr	r3, [r3, #8]
 8024750:	4798      	blx	r3
 8024752:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024754:	9f02      	ldr	r7, [sp, #8]
 8024756:	9e03      	ldr	r6, [sp, #12]
 8024758:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 802475c:	42b5      	cmp	r5, r6
 802475e:	463a      	mov	r2, r7
 8024760:	bf28      	it	cs
 8024762:	4635      	movcs	r5, r6
 8024764:	1b76      	subs	r6, r6, r5
 8024766:	462b      	mov	r3, r5
 8024768:	f014 0f01 	tst.w	r4, #1
 802476c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8024770:	d002      	beq.n	8024778 <_DrawBitmap+0x474>
 8024772:	6811      	ldr	r1, [r2, #0]
 8024774:	4041      	eors	r1, r0
 8024776:	6011      	str	r1, [r2, #0]
 8024778:	3b01      	subs	r3, #1
 802477a:	f102 0204 	add.w	r2, r2, #4
 802477e:	d1f3      	bne.n	8024768 <_DrawBitmap+0x464>
 8024780:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8024784:	2e00      	cmp	r6, #0
 8024786:	f43f aef8 	beq.w	802457a <_DrawBitmap+0x276>
 802478a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 802478e:	2508      	movs	r5, #8
 8024790:	f819 4003 	ldrb.w	r4, [r9, r3]
 8024794:	e7e2      	b.n	802475c <_DrawBitmap+0x458>
 8024796:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024798:	f8da 3004 	ldr.w	r3, [sl, #4]
 802479c:	9209      	str	r2, [sp, #36]	; 0x24
 802479e:	9908      	ldr	r1, [sp, #32]
 80247a0:	9a06      	ldr	r2, [sp, #24]
 80247a2:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 80247a6:	469a      	mov	sl, r3
 80247a8:	440a      	add	r2, r1
 80247aa:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80247ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80247b0:	9e02      	ldr	r6, [sp, #8]
 80247b2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80247b6:	9f05      	ldr	r7, [sp, #20]
 80247b8:	9207      	str	r2, [sp, #28]
 80247ba:	4545      	cmp	r5, r8
 80247bc:	bf28      	it	cs
 80247be:	4645      	movcs	r5, r8
 80247c0:	ebc5 0808 	rsb	r8, r5, r8
 80247c4:	f1bb 0f00 	cmp.w	fp, #0
 80247c8:	d029      	beq.n	802481e <_DrawBitmap+0x51a>
 80247ca:	b944      	cbnz	r4, 80247de <_DrawBitmap+0x4da>
 80247cc:	e023      	b.n	8024816 <_DrawBitmap+0x512>
 80247ce:	3d01      	subs	r5, #1
 80247d0:	f107 0701 	add.w	r7, r7, #1
 80247d4:	f106 0604 	add.w	r6, r6, #4
 80247d8:	d011      	beq.n	80247fe <_DrawBitmap+0x4fa>
 80247da:	0864      	lsrs	r4, r4, #1
 80247dc:	d01b      	beq.n	8024816 <_DrawBitmap+0x512>
 80247de:	07e1      	lsls	r1, r4, #31
 80247e0:	d5f5      	bpl.n	80247ce <_DrawBitmap+0x4ca>
 80247e2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80247e6:	4639      	mov	r1, r7
 80247e8:	9a07      	ldr	r2, [sp, #28]
 80247ea:	4658      	mov	r0, fp
 80247ec:	681b      	ldr	r3, [r3, #0]
 80247ee:	3701      	adds	r7, #1
 80247f0:	4798      	blx	r3
 80247f2:	3d01      	subs	r5, #1
 80247f4:	f8c6 a000 	str.w	sl, [r6]
 80247f8:	f106 0604 	add.w	r6, r6, #4
 80247fc:	d1ed      	bne.n	80247da <_DrawBitmap+0x4d6>
 80247fe:	f1b8 0f00 	cmp.w	r8, #0
 8024802:	f43f aeb8 	beq.w	8024576 <_DrawBitmap+0x272>
 8024806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024808:	2508      	movs	r5, #8
 802480a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802480e:	9209      	str	r2, [sp, #36]	; 0x24
 8024810:	f819 4003 	ldrb.w	r4, [r9, r3]
 8024814:	e7d1      	b.n	80247ba <_DrawBitmap+0x4b6>
 8024816:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 802481a:	442f      	add	r7, r5
 802481c:	e7ef      	b.n	80247fe <_DrawBitmap+0x4fa>
 802481e:	b174      	cbz	r4, 802483e <_DrawBitmap+0x53a>
 8024820:	4653      	mov	r3, sl
 8024822:	e001      	b.n	8024828 <_DrawBitmap+0x524>
 8024824:	0864      	lsrs	r4, r4, #1
 8024826:	d009      	beq.n	802483c <_DrawBitmap+0x538>
 8024828:	07e2      	lsls	r2, r4, #31
 802482a:	f106 0604 	add.w	r6, r6, #4
 802482e:	bf48      	it	mi
 8024830:	f846 3c04 	strmi.w	r3, [r6, #-4]
 8024834:	3d01      	subs	r5, #1
 8024836:	d1f5      	bne.n	8024824 <_DrawBitmap+0x520>
 8024838:	469a      	mov	sl, r3
 802483a:	e7e0      	b.n	80247fe <_DrawBitmap+0x4fa>
 802483c:	469a      	mov	sl, r3
 802483e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8024842:	e7dc      	b.n	80247fe <_DrawBitmap+0x4fa>
 8024844:	20000018 	.word	0x20000018
 8024848:	0803473c 	.word	0x0803473c
 802484c:	911f      	str	r1, [sp, #124]	; 0x7c
 802484e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8024850:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8024854:	9306      	str	r3, [sp, #24]
 8024856:	f1c1 0302 	rsb	r3, r1, #2
 802485a:	46d8      	mov	r8, fp
 802485c:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8024860:	b2d9      	uxtb	r1, r3
 8024862:	4613      	mov	r3, r2
 8024864:	910b      	str	r1, [sp, #44]	; 0x2c
 8024866:	3304      	adds	r3, #4
 8024868:	46c6      	mov	lr, r8
 802486a:	4645      	mov	r5, r8
 802486c:	9307      	str	r3, [sp, #28]
 802486e:	4b99      	ldr	r3, [pc, #612]	; (8024ad4 <_DrawBitmap+0x7d0>)
 8024870:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024872:	681a      	ldr	r2, [r3, #0]
 8024874:	9b07      	ldr	r3, [sp, #28]
 8024876:	7c12      	ldrb	r2, [r2, #16]
 8024878:	f1a3 0904 	sub.w	r9, r3, #4
 802487c:	f89b 3000 	ldrb.w	r3, [fp]
 8024880:	f002 0203 	and.w	r2, r2, #3
 8024884:	408b      	lsls	r3, r1
 8024886:	2a01      	cmp	r2, #1
 8024888:	b2dc      	uxtb	r4, r3
 802488a:	f000 80d4 	beq.w	8024a36 <_DrawBitmap+0x732>
 802488e:	f0c0 80a0 	bcc.w	80249d2 <_DrawBitmap+0x6ce>
 8024892:	2a02      	cmp	r2, #2
 8024894:	d15c      	bne.n	8024950 <_DrawBitmap+0x64c>
 8024896:	9908      	ldr	r1, [sp, #32]
 8024898:	9a06      	ldr	r2, [sp, #24]
 802489a:	440a      	add	r2, r1
 802489c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802489e:	9209      	str	r2, [sp, #36]	; 0x24
 80248a0:	2900      	cmp	r1, #0
 80248a2:	f000 8112 	beq.w	8024aca <_DrawBitmap+0x7c6>
 80248a6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80248aa:	d00a      	beq.n	80248c2 <_DrawBitmap+0x5be>
 80248ac:	0924      	lsrs	r4, r4, #4
 80248ae:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80248b2:	f8c9 3000 	str.w	r3, [r9]
 80248b6:	b125      	cbz	r5, 80248c2 <_DrawBitmap+0x5be>
 80248b8:	68ab      	ldr	r3, [r5, #8]
 80248ba:	4628      	mov	r0, r5
 80248bc:	9905      	ldr	r1, [sp, #20]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	4798      	blx	r3
 80248c2:	9b05      	ldr	r3, [sp, #20]
 80248c4:	f10b 0701 	add.w	r7, fp, #1
 80248c8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80248cc:	3301      	adds	r3, #1
 80248ce:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80248d2:	9302      	str	r3, [sp, #8]
 80248d4:	9b03      	ldr	r3, [sp, #12]
 80248d6:	1e5e      	subs	r6, r3, #1
 80248d8:	2e01      	cmp	r6, #1
 80248da:	dd58      	ble.n	802498e <_DrawBitmap+0x68a>
 80248dc:	2d00      	cmp	r5, #0
 80248de:	f000 80ce 	beq.w	8024a7e <_DrawBitmap+0x77a>
 80248e2:	4632      	mov	r2, r6
 80248e4:	9b02      	ldr	r3, [sp, #8]
 80248e6:	f109 0808 	add.w	r8, r9, #8
 80248ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80248ee:	960d      	str	r6, [sp, #52]	; 0x34
 80248f0:	4691      	mov	r9, r2
 80248f2:	461e      	mov	r6, r3
 80248f4:	e01d      	b.n	8024932 <_DrawBitmap+0x62e>
 80248f6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80248fa:	f848 3c08 	str.w	r3, [r8, #-8]
 80248fe:	68ab      	ldr	r3, [r5, #8]
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	4798      	blx	r3
 8024904:	f014 040f 	ands.w	r4, r4, #15
 8024908:	d009      	beq.n	802491e <_DrawBitmap+0x61a>
 802490a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802490e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024910:	f848 3c04 	str.w	r3, [r8, #-4]
 8024914:	68ab      	ldr	r3, [r5, #8]
 8024916:	1c71      	adds	r1, r6, #1
 8024918:	4628      	mov	r0, r5
 802491a:	681b      	ldr	r3, [r3, #0]
 802491c:	4798      	blx	r3
 802491e:	f1a9 0902 	sub.w	r9, r9, #2
 8024922:	3602      	adds	r6, #2
 8024924:	f108 0808 	add.w	r8, r8, #8
 8024928:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 802492c:	f1b9 0f01 	cmp.w	r9, #1
 8024930:	dd1e      	ble.n	8024970 <_DrawBitmap+0x66c>
 8024932:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8024936:	ea4f 1314 	mov.w	r3, r4, lsr #4
 802493a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802493c:	4631      	mov	r1, r6
 802493e:	4628      	mov	r0, r5
 8024940:	d1d9      	bne.n	80248f6 <_DrawBitmap+0x5f2>
 8024942:	2c00      	cmp	r4, #0
 8024944:	d0eb      	beq.n	802491e <_DrawBitmap+0x61a>
 8024946:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802494a:	f848 3c04 	str.w	r3, [r8, #-4]
 802494e:	e7e1      	b.n	8024914 <_DrawBitmap+0x610>
 8024950:	9b06      	ldr	r3, [sp, #24]
 8024952:	46a8      	mov	r8, r5
 8024954:	991c      	ldr	r1, [sp, #112]	; 0x70
 8024956:	3301      	adds	r3, #1
 8024958:	461a      	mov	r2, r3
 802495a:	9306      	str	r3, [sp, #24]
 802495c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802495e:	428a      	cmp	r2, r1
 8024960:	449b      	add	fp, r3
 8024962:	9b04      	ldr	r3, [sp, #16]
 8024964:	444b      	add	r3, r9
 8024966:	f6ff af7e 	blt.w	8024866 <_DrawBitmap+0x562>
 802496a:	46ab      	mov	fp, r5
 802496c:	46de      	mov	lr, fp
 802496e:	e58b      	b.n	8024488 <_DrawBitmap+0x184>
 8024970:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024972:	9902      	ldr	r1, [sp, #8]
 8024974:	3e02      	subs	r6, #2
 8024976:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802497a:	3102      	adds	r1, #2
 802497c:	0873      	lsrs	r3, r6, #1
 802497e:	1c5a      	adds	r2, r3, #1
 8024980:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8024984:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 8024988:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 802498c:	9102      	str	r1, [sp, #8]
 802498e:	b166      	cbz	r6, 80249aa <_DrawBitmap+0x6a6>
 8024990:	0924      	lsrs	r4, r4, #4
 8024992:	d00a      	beq.n	80249aa <_DrawBitmap+0x6a6>
 8024994:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8024998:	f8c9 3000 	str.w	r3, [r9]
 802499c:	b12d      	cbz	r5, 80249aa <_DrawBitmap+0x6a6>
 802499e:	68ab      	ldr	r3, [r5, #8]
 80249a0:	4628      	mov	r0, r5
 80249a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80249a4:	9902      	ldr	r1, [sp, #8]
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	4798      	blx	r3
 80249aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80249ac:	46ae      	mov	lr, r5
 80249ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80249b0:	9904      	ldr	r1, [sp, #16]
 80249b2:	4493      	add	fp, r2
 80249b4:	9a07      	ldr	r2, [sp, #28]
 80249b6:	9b06      	ldr	r3, [sp, #24]
 80249b8:	440a      	add	r2, r1
 80249ba:	3301      	adds	r3, #1
 80249bc:	9207      	str	r2, [sp, #28]
 80249be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80249c0:	9306      	str	r3, [sp, #24]
 80249c2:	4293      	cmp	r3, r2
 80249c4:	f6ff af53 	blt.w	802486e <_DrawBitmap+0x56a>
 80249c8:	f1be 0f00 	cmp.w	lr, #0
 80249cc:	f47f ad2b 	bne.w	8024426 <_DrawBitmap+0x122>
 80249d0:	e4a2      	b.n	8024318 <_DrawBitmap+0x14>
 80249d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	d04f      	beq.n	8024a78 <_DrawBitmap+0x774>
 80249d8:	0924      	lsrs	r4, r4, #4
 80249da:	9b03      	ldr	r3, [sp, #12]
 80249dc:	f10b 0201 	add.w	r2, fp, #1
 80249e0:	1e59      	subs	r1, r3, #1
 80249e2:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80249e6:	f8c9 3000 	str.w	r3, [r9]
 80249ea:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80249ee:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80249f2:	2901      	cmp	r1, #1
 80249f4:	dd17      	ble.n	8024a26 <_DrawBitmap+0x722>
 80249f6:	104f      	asrs	r7, r1, #1
 80249f8:	f109 0308 	add.w	r3, r9, #8
 80249fc:	f001 0101 	and.w	r1, r1, #1
 8024a00:	19d6      	adds	r6, r2, r7
 8024a02:	0920      	lsrs	r0, r4, #4
 8024a04:	f004 040f 	and.w	r4, r4, #15
 8024a08:	3308      	adds	r3, #8
 8024a0a:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8024a0e:	f843 0c10 	str.w	r0, [r3, #-16]
 8024a12:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8024a16:	f843 0c0c 	str.w	r0, [r3, #-12]
 8024a1a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8024a1e:	42b2      	cmp	r2, r6
 8024a20:	d1ef      	bne.n	8024a02 <_DrawBitmap+0x6fe>
 8024a22:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 8024a26:	2900      	cmp	r1, #0
 8024a28:	d0c1      	beq.n	80249ae <_DrawBitmap+0x6aa>
 8024a2a:	0924      	lsrs	r4, r4, #4
 8024a2c:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8024a30:	f8c9 3000 	str.w	r3, [r9]
 8024a34:	e7bb      	b.n	80249ae <_DrawBitmap+0x6aa>
 8024a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a38:	4658      	mov	r0, fp
 8024a3a:	9903      	ldr	r1, [sp, #12]
 8024a3c:	428b      	cmp	r3, r1
 8024a3e:	bfc8      	it	gt
 8024a40:	b2cb      	uxtbgt	r3, r1
 8024a42:	1e5a      	subs	r2, r3, #1
 8024a44:	1ac9      	subs	r1, r1, r3
 8024a46:	b2d2      	uxtb	r2, r2
 8024a48:	3201      	adds	r2, #1
 8024a4a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8024a4e:	0123      	lsls	r3, r4, #4
 8024a50:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8024a54:	b2dc      	uxtb	r4, r3
 8024a56:	d005      	beq.n	8024a64 <_DrawBitmap+0x760>
 8024a58:	f8d9 3000 	ldr.w	r3, [r9]
 8024a5c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8024a60:	f8c9 3000 	str.w	r3, [r9]
 8024a64:	f109 0904 	add.w	r9, r9, #4
 8024a68:	4591      	cmp	r9, r2
 8024a6a:	d1f0      	bne.n	8024a4e <_DrawBitmap+0x74a>
 8024a6c:	2900      	cmp	r1, #0
 8024a6e:	d09e      	beq.n	80249ae <_DrawBitmap+0x6aa>
 8024a70:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8024a74:	2302      	movs	r3, #2
 8024a76:	e7e1      	b.n	8024a3c <_DrawBitmap+0x738>
 8024a78:	9903      	ldr	r1, [sp, #12]
 8024a7a:	465a      	mov	r2, fp
 8024a7c:	e7b9      	b.n	80249f2 <_DrawBitmap+0x6ee>
 8024a7e:	3e02      	subs	r6, #2
 8024a80:	f109 0308 	add.w	r3, r9, #8
 8024a84:	0872      	lsrs	r2, r6, #1
 8024a86:	1c51      	adds	r1, r2, #1
 8024a88:	4694      	mov	ip, r2
 8024a8a:	1878      	adds	r0, r7, r1
 8024a8c:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8024a90:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 8024a94:	d003      	beq.n	8024a9e <_DrawBitmap+0x79a>
 8024a96:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8024a9a:	f843 2c08 	str.w	r2, [r3, #-8]
 8024a9e:	f014 040f 	ands.w	r4, r4, #15
 8024aa2:	d003      	beq.n	8024aac <_DrawBitmap+0x7a8>
 8024aa4:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 8024aa8:	f843 4c04 	str.w	r4, [r3, #-4]
 8024aac:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8024ab0:	3308      	adds	r3, #8
 8024ab2:	42b8      	cmp	r0, r7
 8024ab4:	d1ea      	bne.n	8024a8c <_DrawBitmap+0x788>
 8024ab6:	9b02      	ldr	r3, [sp, #8]
 8024ab8:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 8024abc:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 8024ac0:	3302      	adds	r3, #2
 8024ac2:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8024ac6:	9302      	str	r3, [sp, #8]
 8024ac8:	e761      	b.n	802498e <_DrawBitmap+0x68a>
 8024aca:	9b05      	ldr	r3, [sp, #20]
 8024acc:	465f      	mov	r7, fp
 8024ace:	9e03      	ldr	r6, [sp, #12]
 8024ad0:	9302      	str	r3, [sp, #8]
 8024ad2:	e701      	b.n	80248d8 <_DrawBitmap+0x5d4>
 8024ad4:	20000018 	.word	0x20000018
 8024ad8:	9306      	str	r3, [sp, #24]
 8024ada:	46d0      	mov	r8, sl
 8024adc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024ade:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8024ae2:	f1c3 0304 	rsb	r3, r3, #4
 8024ae6:	9202      	str	r2, [sp, #8]
 8024ae8:	911f      	str	r1, [sp, #124]	; 0x7c
 8024aea:	b2db      	uxtb	r3, r3
 8024aec:	930b      	str	r3, [sp, #44]	; 0x2c
 8024aee:	46de      	mov	lr, fp
 8024af0:	465f      	mov	r7, fp
 8024af2:	4b72      	ldr	r3, [pc, #456]	; (8024cbc <_DrawBitmap+0x9b8>)
 8024af4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024af6:	681b      	ldr	r3, [r3, #0]
 8024af8:	7814      	ldrb	r4, [r2, #0]
 8024afa:	7c1b      	ldrb	r3, [r3, #16]
 8024afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024afe:	f003 0303 	and.w	r3, r3, #3
 8024b02:	4094      	lsls	r4, r2
 8024b04:	2b01      	cmp	r3, #1
 8024b06:	b2e4      	uxtb	r4, r4
 8024b08:	f000 809f 	beq.w	8024c4a <_DrawBitmap+0x946>
 8024b0c:	d37d      	bcc.n	8024c0a <_DrawBitmap+0x906>
 8024b0e:	2b02      	cmp	r3, #2
 8024b10:	d169      	bne.n	8024be6 <_DrawBitmap+0x8e2>
 8024b12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024b14:	9906      	ldr	r1, [sp, #24]
 8024b16:	9209      	str	r2, [sp, #36]	; 0x24
 8024b18:	9a05      	ldr	r2, [sp, #20]
 8024b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b1c:	9207      	str	r2, [sp, #28]
 8024b1e:	9a08      	ldr	r2, [sp, #32]
 8024b20:	9d02      	ldr	r5, [sp, #8]
 8024b22:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8024b26:	eb02 0b01 	add.w	fp, r2, r1
 8024b2a:	4553      	cmp	r3, sl
 8024b2c:	bfc8      	it	gt
 8024b2e:	fa5f f38a 	uxtbgt.w	r3, sl
 8024b32:	ebc3 0a0a 	rsb	sl, r3, sl
 8024b36:	3b01      	subs	r3, #1
 8024b38:	b34f      	cbz	r7, 8024b8e <_DrawBitmap+0x88a>
 8024b3a:	b2db      	uxtb	r3, r3
 8024b3c:	9e07      	ldr	r6, [sp, #28]
 8024b3e:	f103 0901 	add.w	r9, r3, #1
 8024b42:	930a      	str	r3, [sp, #40]	; 0x28
 8024b44:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8024b48:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8024b4c:	4631      	mov	r1, r6
 8024b4e:	ea4f 1394 	mov.w	r3, r4, lsr #6
 8024b52:	f106 0601 	add.w	r6, r6, #1
 8024b56:	465a      	mov	r2, fp
 8024b58:	4638      	mov	r0, r7
 8024b5a:	d005      	beq.n	8024b68 <_DrawBitmap+0x864>
 8024b5c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8024b60:	602b      	str	r3, [r5, #0]
 8024b62:	68bb      	ldr	r3, [r7, #8]
 8024b64:	681b      	ldr	r3, [r3, #0]
 8024b66:	4798      	blx	r3
 8024b68:	3504      	adds	r5, #4
 8024b6a:	00a4      	lsls	r4, r4, #2
 8024b6c:	454d      	cmp	r5, r9
 8024b6e:	b2e4      	uxtb	r4, r4
 8024b70:	d1ea      	bne.n	8024b48 <_DrawBitmap+0x844>
 8024b72:	9b07      	ldr	r3, [sp, #28]
 8024b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024b76:	3301      	adds	r3, #1
 8024b78:	441a      	add	r2, r3
 8024b7a:	9207      	str	r2, [sp, #28]
 8024b7c:	f1ba 0f00 	cmp.w	sl, #0
 8024b80:	d01b      	beq.n	8024bba <_DrawBitmap+0x8b6>
 8024b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b84:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8024b88:	9309      	str	r3, [sp, #36]	; 0x24
 8024b8a:	2304      	movs	r3, #4
 8024b8c:	e7cd      	b.n	8024b2a <_DrawBitmap+0x826>
 8024b8e:	b2da      	uxtb	r2, r3
 8024b90:	1c50      	adds	r0, r2, #1
 8024b92:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8024b96:	00a3      	lsls	r3, r4, #2
 8024b98:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8024b9c:	ea4f 1194 	mov.w	r1, r4, lsr #6
 8024ba0:	b2dc      	uxtb	r4, r3
 8024ba2:	d002      	beq.n	8024baa <_DrawBitmap+0x8a6>
 8024ba4:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8024ba8:	602b      	str	r3, [r5, #0]
 8024baa:	3504      	adds	r5, #4
 8024bac:	42a8      	cmp	r0, r5
 8024bae:	d1f2      	bne.n	8024b96 <_DrawBitmap+0x892>
 8024bb0:	9b07      	ldr	r3, [sp, #28]
 8024bb2:	3301      	adds	r3, #1
 8024bb4:	18d3      	adds	r3, r2, r3
 8024bb6:	9307      	str	r3, [sp, #28]
 8024bb8:	e7e0      	b.n	8024b7c <_DrawBitmap+0x878>
 8024bba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024bbc:	46be      	mov	lr, r7
 8024bbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024bc0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024bc2:	9b06      	ldr	r3, [sp, #24]
 8024bc4:	440a      	add	r2, r1
 8024bc6:	9904      	ldr	r1, [sp, #16]
 8024bc8:	3301      	adds	r3, #1
 8024bca:	921f      	str	r2, [sp, #124]	; 0x7c
 8024bcc:	9a02      	ldr	r2, [sp, #8]
 8024bce:	9306      	str	r3, [sp, #24]
 8024bd0:	440a      	add	r2, r1
 8024bd2:	9202      	str	r2, [sp, #8]
 8024bd4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024bd6:	429a      	cmp	r2, r3
 8024bd8:	dc8b      	bgt.n	8024af2 <_DrawBitmap+0x7ee>
 8024bda:	f1be 0f00 	cmp.w	lr, #0
 8024bde:	f47f ac22 	bne.w	8024426 <_DrawBitmap+0x122>
 8024be2:	f7ff bb99 	b.w	8024318 <_DrawBitmap+0x14>
 8024be6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024be8:	46bb      	mov	fp, r7
 8024bea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024bec:	9b06      	ldr	r3, [sp, #24]
 8024bee:	440a      	add	r2, r1
 8024bf0:	9904      	ldr	r1, [sp, #16]
 8024bf2:	3301      	adds	r3, #1
 8024bf4:	921f      	str	r2, [sp, #124]	; 0x7c
 8024bf6:	9a02      	ldr	r2, [sp, #8]
 8024bf8:	9306      	str	r3, [sp, #24]
 8024bfa:	440a      	add	r2, r1
 8024bfc:	9202      	str	r2, [sp, #8]
 8024bfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024c00:	429a      	cmp	r2, r3
 8024c02:	f73f af74 	bgt.w	8024aee <_DrawBitmap+0x7ea>
 8024c06:	46de      	mov	lr, fp
 8024c08:	e43e      	b.n	8024488 <_DrawBitmap+0x184>
 8024c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c0c:	9e02      	ldr	r6, [sp, #8]
 8024c0e:	9d03      	ldr	r5, [sp, #12]
 8024c10:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 8024c14:	42ab      	cmp	r3, r5
 8024c16:	bfc8      	it	gt
 8024c18:	b2eb      	uxtbgt	r3, r5
 8024c1a:	1e58      	subs	r0, r3, #1
 8024c1c:	1aed      	subs	r5, r5, r3
 8024c1e:	1f33      	subs	r3, r6, #4
 8024c20:	b2c0      	uxtb	r0, r0
 8024c22:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 8024c26:	09a2      	lsrs	r2, r4, #6
 8024c28:	00a4      	lsls	r4, r4, #2
 8024c2a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8024c2e:	b2e4      	uxtb	r4, r4
 8024c30:	f843 2f04 	str.w	r2, [r3, #4]!
 8024c34:	428b      	cmp	r3, r1
 8024c36:	d1f6      	bne.n	8024c26 <_DrawBitmap+0x922>
 8024c38:	3001      	adds	r0, #1
 8024c3a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8024c3e:	2d00      	cmp	r5, #0
 8024c40:	d0bd      	beq.n	8024bbe <_DrawBitmap+0x8ba>
 8024c42:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8024c46:	2304      	movs	r3, #4
 8024c48:	e7e4      	b.n	8024c14 <_DrawBitmap+0x910>
 8024c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024c4c:	9b02      	ldr	r3, [sp, #8]
 8024c4e:	9803      	ldr	r0, [sp, #12]
 8024c50:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8024c52:	4282      	cmp	r2, r0
 8024c54:	bfc8      	it	gt
 8024c56:	b2c2      	uxtbgt	r2, r0
 8024c58:	1e51      	subs	r1, r2, #1
 8024c5a:	1a80      	subs	r0, r0, r2
 8024c5c:	b2c9      	uxtb	r1, r1
 8024c5e:	3101      	adds	r1, #1
 8024c60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8024c64:	00a2      	lsls	r2, r4, #2
 8024c66:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8024c6a:	b2d4      	uxtb	r4, r2
 8024c6c:	d003      	beq.n	8024c76 <_DrawBitmap+0x972>
 8024c6e:	681a      	ldr	r2, [r3, #0]
 8024c70:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8024c74:	601a      	str	r2, [r3, #0]
 8024c76:	3304      	adds	r3, #4
 8024c78:	428b      	cmp	r3, r1
 8024c7a:	d1f3      	bne.n	8024c64 <_DrawBitmap+0x960>
 8024c7c:	2800      	cmp	r0, #0
 8024c7e:	d09e      	beq.n	8024bbe <_DrawBitmap+0x8ba>
 8024c80:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8024c84:	2204      	movs	r2, #4
 8024c86:	e7e4      	b.n	8024c52 <_DrawBitmap+0x94e>
 8024c88:	4b0d      	ldr	r3, [pc, #52]	; (8024cc0 <_DrawBitmap+0x9bc>)
 8024c8a:	9a03      	ldr	r2, [sp, #12]
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024c90:	9802      	ldr	r0, [sp, #8]
 8024c92:	4798      	blx	r3
 8024c94:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c96:	4628      	mov	r0, r5
 8024c98:	e4ca      	b.n	8024630 <_DrawBitmap+0x32c>
 8024c9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024c9c:	2800      	cmp	r0, #0
 8024c9e:	f47f abc2 	bne.w	8024426 <_DrawBitmap+0x122>
 8024ca2:	f7ff bb39 	b.w	8024318 <_DrawBitmap+0x14>
 8024ca6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024ca8:	9b02      	ldr	r3, [sp, #8]
 8024caa:	f812 1b01 	ldrb.w	r1, [r2], #1
 8024cae:	b101      	cbz	r1, 8024cb2 <_DrawBitmap+0x9ae>
 8024cb0:	6019      	str	r1, [r3, #0]
 8024cb2:	42a2      	cmp	r2, r4
 8024cb4:	f103 0304 	add.w	r3, r3, #4
 8024cb8:	d1f7      	bne.n	8024caa <_DrawBitmap+0x9a6>
 8024cba:	e4b8      	b.n	802462e <_DrawBitmap+0x32a>
 8024cbc:	20000018 	.word	0x20000018
 8024cc0:	2000004c 	.word	0x2000004c

08024cc4 <_GetPixelIndex>:
 8024cc4:	4b0e      	ldr	r3, [pc, #56]	; (8024d00 <_GetPixelIndex+0x3c>)
 8024cc6:	681b      	ldr	r3, [r3, #0]
 8024cc8:	b570      	push	{r4, r5, r6, lr}
 8024cca:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024ccc:	b082      	sub	sp, #8
 8024cce:	460e      	mov	r6, r1
 8024cd0:	4614      	mov	r4, r2
 8024cd2:	f7ee f869 	bl	8012da8 <GUI_ALLOC_LockH>
 8024cd6:	4605      	mov	r5, r0
 8024cd8:	a802      	add	r0, sp, #8
 8024cda:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8024cde:	68eb      	ldr	r3, [r5, #12]
 8024ce0:	1aa2      	subs	r2, r4, r2
 8024ce2:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8024ce6:	f840 5d04 	str.w	r5, [r0, #-4]!
 8024cea:	fb03 f302 	mul.w	r3, r3, r2
 8024cee:	1b34      	subs	r4, r6, r4
 8024cf0:	3318      	adds	r3, #24
 8024cf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024cf6:	f7ee f86b 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024cfa:	5928      	ldr	r0, [r5, r4]
 8024cfc:	b002      	add	sp, #8
 8024cfe:	bd70      	pop	{r4, r5, r6, pc}
 8024d00:	20000018 	.word	0x20000018

08024d04 <_SetPixelIndex>:
 8024d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024d08:	4c1b      	ldr	r4, [pc, #108]	; (8024d78 <_SetPixelIndex+0x74>)
 8024d0a:	4699      	mov	r9, r3
 8024d0c:	b083      	sub	sp, #12
 8024d0e:	460f      	mov	r7, r1
 8024d10:	6823      	ldr	r3, [r4, #0]
 8024d12:	4690      	mov	r8, r2
 8024d14:	ae02      	add	r6, sp, #8
 8024d16:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024d18:	f7ee f846 	bl	8012da8 <GUI_ALLOC_LockH>
 8024d1c:	6823      	ldr	r3, [r4, #0]
 8024d1e:	9000      	str	r0, [sp, #0]
 8024d20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024d22:	f7ee f841 	bl	8012da8 <GUI_ALLOC_LockH>
 8024d26:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024d2a:	68c1      	ldr	r1, [r0, #12]
 8024d2c:	4605      	mov	r5, r0
 8024d2e:	ebc2 0208 	rsb	r2, r2, r8
 8024d32:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8024d36:	f846 0d04 	str.w	r0, [r6, #-4]!
 8024d3a:	4630      	mov	r0, r6
 8024d3c:	fb01 f202 	mul.w	r2, r1, r2
 8024d40:	1b3c      	subs	r4, r7, r4
 8024d42:	3218      	adds	r2, #24
 8024d44:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8024d48:	f7ee f842 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024d4c:	9b00      	ldr	r3, [sp, #0]
 8024d4e:	f845 9004 	str.w	r9, [r5, r4]
 8024d52:	6958      	ldr	r0, [r3, #20]
 8024d54:	b150      	cbz	r0, 8024d6c <_SetPixelIndex+0x68>
 8024d56:	f7ee f827 	bl	8012da8 <GUI_ALLOC_LockH>
 8024d5a:	9001      	str	r0, [sp, #4]
 8024d5c:	6883      	ldr	r3, [r0, #8]
 8024d5e:	4642      	mov	r2, r8
 8024d60:	4639      	mov	r1, r7
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	4798      	blx	r3
 8024d66:	4630      	mov	r0, r6
 8024d68:	f7ee f832 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024d6c:	4668      	mov	r0, sp
 8024d6e:	f7ee f82f 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024d72:	b003      	add	sp, #12
 8024d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024d78:	20000018 	.word	0x20000018

08024d7c <_XorPixel>:
 8024d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d80:	4c1e      	ldr	r4, [pc, #120]	; (8024dfc <_XorPixel+0x80>)
 8024d82:	b082      	sub	sp, #8
 8024d84:	460f      	mov	r7, r1
 8024d86:	4690      	mov	r8, r2
 8024d88:	6823      	ldr	r3, [r4, #0]
 8024d8a:	ae02      	add	r6, sp, #8
 8024d8c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024d8e:	f7ee f80b 	bl	8012da8 <GUI_ALLOC_LockH>
 8024d92:	6823      	ldr	r3, [r4, #0]
 8024d94:	9000      	str	r0, [sp, #0]
 8024d96:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024d98:	f7ee f806 	bl	8012da8 <GUI_ALLOC_LockH>
 8024d9c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8024da0:	68c2      	ldr	r2, [r0, #12]
 8024da2:	4605      	mov	r5, r0
 8024da4:	ebc3 0308 	rsb	r3, r3, r8
 8024da8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8024dac:	f846 0d04 	str.w	r0, [r6, #-4]!
 8024db0:	4630      	mov	r0, r6
 8024db2:	fb02 f303 	mul.w	r3, r2, r3
 8024db6:	1b3c      	subs	r4, r7, r4
 8024db8:	3318      	adds	r3, #24
 8024dba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024dbe:	f7ee f807 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024dc2:	9b00      	ldr	r3, [sp, #0]
 8024dc4:	681b      	ldr	r3, [r3, #0]
 8024dc6:	691b      	ldr	r3, [r3, #16]
 8024dc8:	689b      	ldr	r3, [r3, #8]
 8024dca:	4798      	blx	r3
 8024dcc:	592b      	ldr	r3, [r5, r4]
 8024dce:	9a00      	ldr	r2, [sp, #0]
 8024dd0:	4058      	eors	r0, r3
 8024dd2:	5128      	str	r0, [r5, r4]
 8024dd4:	6950      	ldr	r0, [r2, #20]
 8024dd6:	b150      	cbz	r0, 8024dee <_XorPixel+0x72>
 8024dd8:	f7ed ffe6 	bl	8012da8 <GUI_ALLOC_LockH>
 8024ddc:	9001      	str	r0, [sp, #4]
 8024dde:	6883      	ldr	r3, [r0, #8]
 8024de0:	4642      	mov	r2, r8
 8024de2:	4639      	mov	r1, r7
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	4798      	blx	r3
 8024de8:	4630      	mov	r0, r6
 8024dea:	f7ed fff1 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024dee:	4668      	mov	r0, sp
 8024df0:	f7ed ffee 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024df4:	b002      	add	sp, #8
 8024df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024dfa:	bf00      	nop
 8024dfc:	20000018 	.word	0x20000018

08024e00 <_FillRect>:
 8024e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e04:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8024ee8 <_FillRect+0xe8>
 8024e08:	461f      	mov	r7, r3
 8024e0a:	b087      	sub	sp, #28
 8024e0c:	460c      	mov	r4, r1
 8024e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8024e12:	4616      	mov	r6, r2
 8024e14:	9103      	str	r1, [sp, #12]
 8024e16:	f10d 0b18 	add.w	fp, sp, #24
 8024e1a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024e1c:	1b3f      	subs	r7, r7, r4
 8024e1e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8024e22:	f7ed ffc1 	bl	8012da8 <GUI_ALLOC_LockH>
 8024e26:	f8d8 3000 	ldr.w	r3, [r8]
 8024e2a:	3701      	adds	r7, #1
 8024e2c:	9004      	str	r0, [sp, #16]
 8024e2e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024e30:	f7ed ffba 	bl	8012da8 <GUI_ALLOC_LockH>
 8024e34:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8024e38:	68c1      	ldr	r1, [r0, #12]
 8024e3a:	4603      	mov	r3, r0
 8024e3c:	1ab2      	subs	r2, r6, r2
 8024e3e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8024e42:	f84b 0d04 	str.w	r0, [fp, #-4]!
 8024e46:	4658      	mov	r0, fp
 8024e48:	fb01 f202 	mul.w	r2, r1, r2
 8024e4c:	1b65      	subs	r5, r4, r5
 8024e4e:	3218      	adds	r2, #24
 8024e50:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8024e54:	189d      	adds	r5, r3, r2
 8024e56:	f7ed ffbb 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024e5a:	9b04      	ldr	r3, [sp, #16]
 8024e5c:	f8d8 2000 	ldr.w	r2, [r8]
 8024e60:	6958      	ldr	r0, [r3, #20]
 8024e62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8024e64:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8024e68:	6814      	ldr	r4, [r2, #0]
 8024e6a:	bb58      	cbnz	r0, 8024ec4 <_FillRect+0xc4>
 8024e6c:	454e      	cmp	r6, r9
 8024e6e:	dc10      	bgt.n	8024e92 <_FillRect+0x92>
 8024e70:	f8d8 3000 	ldr.w	r3, [r8]
 8024e74:	7c1b      	ldrb	r3, [r3, #16]
 8024e76:	07db      	lsls	r3, r3, #31
 8024e78:	d411      	bmi.n	8024e9e <_FillRect+0x9e>
 8024e7a:	2f00      	cmp	r7, #0
 8024e7c:	dd05      	ble.n	8024e8a <_FillRect+0x8a>
 8024e7e:	463b      	mov	r3, r7
 8024e80:	462a      	mov	r2, r5
 8024e82:	3b01      	subs	r3, #1
 8024e84:	f842 4b04 	str.w	r4, [r2], #4
 8024e88:	d1fb      	bne.n	8024e82 <_FillRect+0x82>
 8024e8a:	3601      	adds	r6, #1
 8024e8c:	4455      	add	r5, sl
 8024e8e:	45b1      	cmp	r9, r6
 8024e90:	daee      	bge.n	8024e70 <_FillRect+0x70>
 8024e92:	a804      	add	r0, sp, #16
 8024e94:	f7ed ff9c 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024e98:	b007      	add	sp, #28
 8024e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e9e:	9b04      	ldr	r3, [sp, #16]
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	691b      	ldr	r3, [r3, #16]
 8024ea4:	689b      	ldr	r3, [r3, #8]
 8024ea6:	4798      	blx	r3
 8024ea8:	4629      	mov	r1, r5
 8024eaa:	463a      	mov	r2, r7
 8024eac:	680b      	ldr	r3, [r1, #0]
 8024eae:	3a01      	subs	r2, #1
 8024eb0:	ea83 0300 	eor.w	r3, r3, r0
 8024eb4:	f841 3b04 	str.w	r3, [r1], #4
 8024eb8:	d1f8      	bne.n	8024eac <_FillRect+0xac>
 8024eba:	3601      	adds	r6, #1
 8024ebc:	4455      	add	r5, sl
 8024ebe:	45b1      	cmp	r9, r6
 8024ec0:	dad6      	bge.n	8024e70 <_FillRect+0x70>
 8024ec2:	e7e6      	b.n	8024e92 <_FillRect+0x92>
 8024ec4:	f7ed ff70 	bl	8012da8 <GUI_ALLOC_LockH>
 8024ec8:	ebc6 0e09 	rsb	lr, r6, r9
 8024ecc:	9903      	ldr	r1, [sp, #12]
 8024ece:	463b      	mov	r3, r7
 8024ed0:	f10e 0e01 	add.w	lr, lr, #1
 8024ed4:	4632      	mov	r2, r6
 8024ed6:	9005      	str	r0, [sp, #20]
 8024ed8:	f8cd e000 	str.w	lr, [sp]
 8024edc:	f7f9 faee 	bl	801e4bc <GUI_USAGE_AddRect>
 8024ee0:	4658      	mov	r0, fp
 8024ee2:	f7ed ff75 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024ee6:	e7c1      	b.n	8024e6c <_FillRect+0x6c>
 8024ee8:	20000018 	.word	0x20000018

08024eec <_DrawHLine>:
 8024eec:	b500      	push	{lr}
 8024eee:	b083      	sub	sp, #12
 8024ef0:	9200      	str	r2, [sp, #0]
 8024ef2:	f7ff ff85 	bl	8024e00 <_FillRect>
 8024ef6:	b003      	add	sp, #12
 8024ef8:	f85d fb04 	ldr.w	pc, [sp], #4

08024efc <_DrawVLine>:
 8024efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024f00:	4f36      	ldr	r7, [pc, #216]	; (8024fdc <_DrawVLine+0xe0>)
 8024f02:	461e      	mov	r6, r3
 8024f04:	b085      	sub	sp, #20
 8024f06:	4689      	mov	r9, r1
 8024f08:	683b      	ldr	r3, [r7, #0]
 8024f0a:	4615      	mov	r5, r2
 8024f0c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024f0e:	f7ed ff4b 	bl	8012da8 <GUI_ALLOC_LockH>
 8024f12:	6943      	ldr	r3, [r0, #20]
 8024f14:	9001      	str	r0, [sp, #4]
 8024f16:	4618      	mov	r0, r3
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d13b      	bne.n	8024f94 <_DrawVLine+0x98>
 8024f1c:	683b      	ldr	r3, [r7, #0]
 8024f1e:	9002      	str	r0, [sp, #8]
 8024f20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8024f22:	f7ed ff41 	bl	8012da8 <GUI_ALLOC_LockH>
 8024f26:	4602      	mov	r2, r0
 8024f28:	a804      	add	r0, sp, #16
 8024f2a:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8024f2e:	68d3      	ldr	r3, [r2, #12]
 8024f30:	1b2c      	subs	r4, r5, r4
 8024f32:	f840 2d04 	str.w	r2, [r0, #-4]!
 8024f36:	fb03 f304 	mul.w	r3, r3, r4
 8024f3a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8024f3e:	3318      	adds	r3, #24
 8024f40:	ebc4 0409 	rsb	r4, r4, r9
 8024f44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024f48:	18d4      	adds	r4, r2, r3
 8024f4a:	f7ed ff41 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024f4e:	683b      	ldr	r3, [r7, #0]
 8024f50:	9901      	ldr	r1, [sp, #4]
 8024f52:	7c1a      	ldrb	r2, [r3, #16]
 8024f54:	07d2      	lsls	r2, r2, #31
 8024f56:	d420      	bmi.n	8024f9a <_DrawVLine+0x9e>
 8024f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024f5a:	9802      	ldr	r0, [sp, #8]
 8024f5c:	f8d3 8000 	ldr.w	r8, [r3]
 8024f60:	68cf      	ldr	r7, [r1, #12]
 8024f62:	b908      	cbnz	r0, 8024f68 <_DrawVLine+0x6c>
 8024f64:	e031      	b.n	8024fca <_DrawVLine+0xce>
 8024f66:	9802      	ldr	r0, [sp, #8]
 8024f68:	6883      	ldr	r3, [r0, #8]
 8024f6a:	462a      	mov	r2, r5
 8024f6c:	3501      	adds	r5, #1
 8024f6e:	4649      	mov	r1, r9
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	4798      	blx	r3
 8024f74:	42ae      	cmp	r6, r5
 8024f76:	f8c4 8000 	str.w	r8, [r4]
 8024f7a:	443c      	add	r4, r7
 8024f7c:	daf3      	bge.n	8024f66 <_DrawVLine+0x6a>
 8024f7e:	a801      	add	r0, sp, #4
 8024f80:	f7ed ff26 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024f84:	9b02      	ldr	r3, [sp, #8]
 8024f86:	b113      	cbz	r3, 8024f8e <_DrawVLine+0x92>
 8024f88:	a802      	add	r0, sp, #8
 8024f8a:	f7ed ff21 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8024f8e:	b005      	add	sp, #20
 8024f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024f94:	f7ed ff08 	bl	8012da8 <GUI_ALLOC_LockH>
 8024f98:	e7c0      	b.n	8024f1c <_DrawVLine+0x20>
 8024f9a:	680b      	ldr	r3, [r1, #0]
 8024f9c:	691b      	ldr	r3, [r3, #16]
 8024f9e:	689b      	ldr	r3, [r3, #8]
 8024fa0:	4798      	blx	r3
 8024fa2:	4607      	mov	r7, r0
 8024fa4:	9b02      	ldr	r3, [sp, #8]
 8024fa6:	462a      	mov	r2, r5
 8024fa8:	4649      	mov	r1, r9
 8024faa:	3501      	adds	r5, #1
 8024fac:	4618      	mov	r0, r3
 8024fae:	b113      	cbz	r3, 8024fb6 <_DrawVLine+0xba>
 8024fb0:	689b      	ldr	r3, [r3, #8]
 8024fb2:	681b      	ldr	r3, [r3, #0]
 8024fb4:	4798      	blx	r3
 8024fb6:	6823      	ldr	r3, [r4, #0]
 8024fb8:	42b5      	cmp	r5, r6
 8024fba:	9a01      	ldr	r2, [sp, #4]
 8024fbc:	ea83 0307 	eor.w	r3, r3, r7
 8024fc0:	68d2      	ldr	r2, [r2, #12]
 8024fc2:	6023      	str	r3, [r4, #0]
 8024fc4:	4414      	add	r4, r2
 8024fc6:	dded      	ble.n	8024fa4 <_DrawVLine+0xa8>
 8024fc8:	e7d9      	b.n	8024f7e <_DrawVLine+0x82>
 8024fca:	1b73      	subs	r3, r6, r5
 8024fcc:	3301      	adds	r3, #1
 8024fce:	3b01      	subs	r3, #1
 8024fd0:	f8c4 8000 	str.w	r8, [r4]
 8024fd4:	443c      	add	r4, r7
 8024fd6:	d1fa      	bne.n	8024fce <_DrawVLine+0xd2>
 8024fd8:	e7d1      	b.n	8024f7e <_DrawVLine+0x82>
 8024fda:	bf00      	nop
 8024fdc:	20000018 	.word	0x20000018

08024fe0 <_WriteToActiveAlpha>:
 8024fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fe4:	b091      	sub	sp, #68	; 0x44
 8024fe6:	4688      	mov	r8, r1
 8024fe8:	4614      	mov	r4, r2
 8024fea:	469a      	mov	sl, r3
 8024fec:	9008      	str	r0, [sp, #32]
 8024fee:	f7ed fedb 	bl	8012da8 <GUI_ALLOC_LockH>
 8024ff2:	4603      	mov	r3, r0
 8024ff4:	a810      	add	r0, sp, #64	; 0x40
 8024ff6:	4d5d      	ldr	r5, [pc, #372]	; (802516c <_WriteToActiveAlpha+0x18c>)
 8024ff8:	681a      	ldr	r2, [r3, #0]
 8024ffa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8024ffe:	6912      	ldr	r2, [r2, #16]
 8025000:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 8025004:	6852      	ldr	r2, [r2, #4]
 8025006:	9207      	str	r2, [sp, #28]
 8025008:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802500c:	9206      	str	r2, [sp, #24]
 802500e:	f7ed fedf 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8025012:	682a      	ldr	r2, [r5, #0]
 8025014:	2108      	movs	r1, #8
 8025016:	4b56      	ldr	r3, [pc, #344]	; (8025170 <_WriteToActiveAlpha+0x190>)
 8025018:	7c52      	ldrb	r2, [r2, #17]
 802501a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802501e:	68c3      	ldr	r3, [r0, #12]
 8025020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025022:	4798      	blx	r3
 8025024:	2817      	cmp	r0, #23
 8025026:	d810      	bhi.n	802504a <_WriteToActiveAlpha+0x6a>
 8025028:	2803      	cmp	r0, #3
 802502a:	4606      	mov	r6, r0
 802502c:	bf08      	it	eq
 802502e:	2608      	moveq	r6, #8
 8025030:	f8da 3004 	ldr.w	r3, [sl, #4]
 8025034:	2000      	movs	r0, #0
 8025036:	9309      	str	r3, [sp, #36]	; 0x24
 8025038:	f8da 3000 	ldr.w	r3, [sl]
 802503c:	930c      	str	r3, [sp, #48]	; 0x30
 802503e:	f7f4 f917 	bl	8019270 <GUI__AllocAlphaBuffer>
 8025042:	b120      	cbz	r0, 802504e <_WriteToActiveAlpha+0x6e>
 8025044:	b011      	add	sp, #68	; 0x44
 8025046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802504a:	2620      	movs	r6, #32
 802504c:	e7f0      	b.n	8025030 <_WriteToActiveAlpha+0x50>
 802504e:	9906      	ldr	r1, [sp, #24]
 8025050:	682a      	ldr	r2, [r5, #0]
 8025052:	460b      	mov	r3, r1
 8025054:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 8025058:	4443      	add	r3, r8
 802505a:	3b01      	subs	r3, #1
 802505c:	1b5d      	subs	r5, r3, r5
 802505e:	2d00      	cmp	r5, #0
 8025060:	dd7d      	ble.n	802515e <_WriteToActiveAlpha+0x17e>
 8025062:	1b4d      	subs	r5, r1, r5
 8025064:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8025068:	4543      	cmp	r3, r8
 802506a:	dc73      	bgt.n	8025154 <_WriteToActiveAlpha+0x174>
 802506c:	2100      	movs	r1, #0
 802506e:	2d00      	cmp	r5, #0
 8025070:	dde8      	ble.n	8025044 <_WriteToActiveAlpha+0x64>
 8025072:	eb09 0304 	add.w	r3, r9, r4
 8025076:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 802507a:	3b01      	subs	r3, #1
 802507c:	1a1b      	subs	r3, r3, r0
 802507e:	2b00      	cmp	r3, #0
 8025080:	bfc8      	it	gt
 8025082:	ebc3 0909 	rsbgt	r9, r3, r9
 8025086:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 802508a:	42a3      	cmp	r3, r4
 802508c:	dc69      	bgt.n	8025162 <_WriteToActiveAlpha+0x182>
 802508e:	2700      	movs	r7, #0
 8025090:	f1b9 0f00 	cmp.w	r9, #0
 8025094:	ddd6      	ble.n	8025044 <_WriteToActiveAlpha+0x64>
 8025096:	9b06      	ldr	r3, [sp, #24]
 8025098:	46b3      	mov	fp, r6
 802509a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 802509e:	fb07 1703 	mla	r7, r7, r3, r1
 80250a2:	eb04 0309 	add.w	r3, r4, r9
 80250a6:	00bf      	lsls	r7, r7, #2
 80250a8:	930a      	str	r3, [sp, #40]	; 0x28
 80250aa:	e020      	b.n	80250ee <_WriteToActiveAlpha+0x10e>
 80250ac:	2304      	movs	r3, #4
 80250ae:	9a06      	ldr	r2, [sp, #24]
 80250b0:	4631      	mov	r1, r6
 80250b2:	4630      	mov	r0, r6
 80250b4:	47c8      	blx	r9
 80250b6:	f04f 0e01 	mov.w	lr, #1
 80250ba:	2300      	movs	r3, #0
 80250bc:	2100      	movs	r1, #0
 80250be:	462a      	mov	r2, r5
 80250c0:	9305      	str	r3, [sp, #20]
 80250c2:	4640      	mov	r0, r8
 80250c4:	4673      	mov	r3, lr
 80250c6:	9103      	str	r1, [sp, #12]
 80250c8:	9604      	str	r6, [sp, #16]
 80250ca:	4621      	mov	r1, r4
 80250cc:	f8cd b008 	str.w	fp, [sp, #8]
 80250d0:	eb04 090e 	add.w	r9, r4, lr
 80250d4:	f8cd e004 	str.w	lr, [sp, #4]
 80250d8:	f8cd e000 	str.w	lr, [sp]
 80250dc:	9c06      	ldr	r4, [sp, #24]
 80250de:	f7f5 f93d 	bl	801a35c <LCD_DrawBitmap>
 80250e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250e4:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80250e8:	454b      	cmp	r3, r9
 80250ea:	d0ab      	beq.n	8025044 <_WriteToActiveAlpha+0x64>
 80250ec:	464c      	mov	r4, r9
 80250ee:	9808      	ldr	r0, [sp, #32]
 80250f0:	f7f9 f8ce 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 80250f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80250f6:	19c2      	adds	r2, r0, r7
 80250f8:	4621      	mov	r1, r4
 80250fa:	9301      	str	r3, [sp, #4]
 80250fc:	4640      	mov	r0, r8
 80250fe:	9b07      	ldr	r3, [sp, #28]
 8025100:	9300      	str	r3, [sp, #0]
 8025102:	462b      	mov	r3, r5
 8025104:	f7f3 ff76 	bl	8018ff4 <GUI__DoAlphaBlending>
 8025108:	4606      	mov	r6, r0
 802510a:	2800      	cmp	r0, #0
 802510c:	d09a      	beq.n	8025044 <_WriteToActiveAlpha+0x64>
 802510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025110:	461a      	mov	r2, r3
 8025112:	4b18      	ldr	r3, [pc, #96]	; (8025174 <_WriteToActiveAlpha+0x194>)
 8025114:	429a      	cmp	r2, r3
 8025116:	d0ce      	beq.n	80250b6 <_WriteToActiveAlpha+0xd6>
 8025118:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 802511c:	465a      	mov	r2, fp
 802511e:	4629      	mov	r1, r5
 8025120:	464b      	mov	r3, r9
 8025122:	f7f4 f9db 	bl	80194dc <GUI__CompactPixelIndicesEx>
 8025126:	2800      	cmp	r0, #0
 8025128:	d1c5      	bne.n	80250b6 <_WriteToActiveAlpha+0xd6>
 802512a:	f8d9 9010 	ldr.w	r9, [r9, #16]
 802512e:	f1b9 0f00 	cmp.w	r9, #0
 8025132:	d1bb      	bne.n	80250ac <_WriteToActiveAlpha+0xcc>
 8025134:	950d      	str	r5, [sp, #52]	; 0x34
 8025136:	46a2      	mov	sl, r4
 8025138:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802513c:	4635      	mov	r5, r6
 802513e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025140:	6828      	ldr	r0, [r5, #0]
 8025142:	47a0      	blx	r4
 8025144:	f1b9 0901 	subs.w	r9, r9, #1
 8025148:	f845 0b04 	str.w	r0, [r5], #4
 802514c:	d1f8      	bne.n	8025140 <_WriteToActiveAlpha+0x160>
 802514e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025150:	4654      	mov	r4, sl
 8025152:	e7b0      	b.n	80250b6 <_WriteToActiveAlpha+0xd6>
 8025154:	ebc8 0103 	rsb	r1, r8, r3
 8025158:	4698      	mov	r8, r3
 802515a:	1a6d      	subs	r5, r5, r1
 802515c:	e787      	b.n	802506e <_WriteToActiveAlpha+0x8e>
 802515e:	460d      	mov	r5, r1
 8025160:	e780      	b.n	8025064 <_WriteToActiveAlpha+0x84>
 8025162:	1b1f      	subs	r7, r3, r4
 8025164:	461c      	mov	r4, r3
 8025166:	ebc7 0909 	rsb	r9, r7, r9
 802516a:	e791      	b.n	8025090 <_WriteToActiveAlpha+0xb0>
 802516c:	20000018 	.word	0x20000018
 8025170:	200467d0 	.word	0x200467d0
 8025174:	08012131 	.word	0x08012131

08025178 <GUI_MEMDEV__WriteToActiveAlpha>:
 8025178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802517c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8025300 <GUI_MEMDEV__WriteToActiveAlpha+0x188>
 8025180:	b08b      	sub	sp, #44	; 0x2c
 8025182:	4b5d      	ldr	r3, [pc, #372]	; (80252f8 <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 8025184:	f8d9 c000 	ldr.w	ip, [r9]
 8025188:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8025304 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>
 802518c:	f89c e011 	ldrb.w	lr, [ip, #17]
 8025190:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 8025194:	f8d8 3000 	ldr.w	r3, [r8]
 8025198:	f8d4 e010 	ldr.w	lr, [r4, #16]
 802519c:	2b00      	cmp	r3, #0
 802519e:	f000 80a6 	beq.w	80252ee <GUI_MEMDEV__WriteToActiveAlpha+0x176>
 80251a2:	4616      	mov	r6, r2
 80251a4:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 80251a8:	4607      	mov	r7, r0
 80251aa:	460d      	mov	r5, r1
 80251ac:	2a00      	cmp	r2, #0
 80251ae:	d075      	beq.n	802529c <GUI_MEMDEV__WriteToActiveAlpha+0x124>
 80251b0:	68e2      	ldr	r2, [r4, #12]
 80251b2:	6812      	ldr	r2, [r2, #0]
 80251b4:	2a07      	cmp	r2, #7
 80251b6:	d078      	beq.n	80252aa <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 80251b8:	4a50      	ldr	r2, [pc, #320]	; (80252fc <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 80251ba:	ebc2 020e 	rsb	r2, r2, lr
 80251be:	fab2 f282 	clz	r2, r2
 80251c2:	0952      	lsrs	r2, r2, #5
 80251c4:	2a00      	cmp	r2, #0
 80251c6:	d070      	beq.n	80252aa <GUI_MEMDEV__WriteToActiveAlpha+0x132>
 80251c8:	4638      	mov	r0, r7
 80251ca:	f7ed fded 	bl	8012da8 <GUI_ALLOC_LockH>
 80251ce:	4603      	mov	r3, r0
 80251d0:	a80a      	add	r0, sp, #40	; 0x28
 80251d2:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 80251d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80251da:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 80251de:	eb0b 0405 	add.w	r4, fp, r5
 80251e2:	68db      	ldr	r3, [r3, #12]
 80251e4:	3c01      	subs	r4, #1
 80251e6:	9305      	str	r3, [sp, #20]
 80251e8:	f7ed fdf2 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 80251ec:	f8d9 1000 	ldr.w	r1, [r9]
 80251f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80251f4:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 80251f8:	1ae4      	subs	r4, r4, r3
 80251fa:	2c00      	cmp	r4, #0
 80251fc:	bfcc      	ite	gt
 80251fe:	ebc4 040b 	rsbgt	r4, r4, fp
 8025202:	465c      	movle	r4, fp
 8025204:	4285      	cmp	r5, r0
 8025206:	db5e      	blt.n	80252c6 <GUI_MEMDEV__WriteToActiveAlpha+0x14e>
 8025208:	2300      	movs	r3, #0
 802520a:	2c00      	cmp	r4, #0
 802520c:	dd43      	ble.n	8025296 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 802520e:	eb0a 0006 	add.w	r0, sl, r6
 8025212:	f9b1 e00e 	ldrsh.w	lr, [r1, #14]
 8025216:	3801      	subs	r0, #1
 8025218:	ebce 0000 	rsb	r0, lr, r0
 802521c:	2800      	cmp	r0, #0
 802521e:	bfc8      	it	gt
 8025220:	ebc0 0a0a 	rsbgt	sl, r0, sl
 8025224:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8025228:	42b0      	cmp	r0, r6
 802522a:	dc47      	bgt.n	80252bc <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 802522c:	2100      	movs	r1, #0
 802522e:	f1ba 0f00 	cmp.w	sl, #0
 8025232:	9307      	str	r3, [sp, #28]
 8025234:	9106      	str	r1, [sp, #24]
 8025236:	dd2e      	ble.n	8025296 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8025238:	4638      	mov	r0, r7
 802523a:	f7f9 f829 	bl	801e290 <GUI_MEMDEV_GetDataPtr>
 802523e:	9b07      	ldr	r3, [sp, #28]
 8025240:	f8d9 2000 	ldr.w	r2, [r9]
 8025244:	9906      	ldr	r1, [sp, #24]
 8025246:	fb01 310b 	mla	r1, r1, fp, r3
 802524a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 802524c:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 8025250:	2b00      	cmp	r3, #0
 8025252:	d03c      	beq.n	80252ce <GUI_MEMDEV__WriteToActiveAlpha+0x156>
 8025254:	4618      	mov	r0, r3
 8025256:	f7ed fda7 	bl	8012da8 <GUI_ALLOC_LockH>
 802525a:	4602      	mov	r2, r0
 802525c:	a80a      	add	r0, sp, #40	; 0x28
 802525e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8025262:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8025266:	1a6d      	subs	r5, r5, r1
 8025268:	f840 2d04 	str.w	r2, [r0, #-4]!
 802526c:	1af3      	subs	r3, r6, r3
 802526e:	00a9      	lsls	r1, r5, #2
 8025270:	68d5      	ldr	r5, [r2, #12]
 8025272:	f101 0618 	add.w	r6, r1, #24
 8025276:	fb05 6603 	mla	r6, r5, r3, r6
 802527a:	4416      	add	r6, r2
 802527c:	f7ed fda8 	bl	8012dd0 <GUI_ALLOC_UnlockH>
 8025280:	b14e      	cbz	r6, 8025296 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 8025282:	9b05      	ldr	r3, [sp, #20]
 8025284:	4622      	mov	r2, r4
 8025286:	9500      	str	r5, [sp, #0]
 8025288:	4639      	mov	r1, r7
 802528a:	9301      	str	r3, [sp, #4]
 802528c:	4630      	mov	r0, r6
 802528e:	4653      	mov	r3, sl
 8025290:	f8d8 4000 	ldr.w	r4, [r8]
 8025294:	47a0      	blx	r4
 8025296:	b00b      	add	sp, #44	; 0x2c
 8025298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802529c:	68e2      	ldr	r2, [r4, #12]
 802529e:	6812      	ldr	r2, [r2, #0]
 80252a0:	fab2 f282 	clz	r2, r2
 80252a4:	0952      	lsrs	r2, r2, #5
 80252a6:	2a00      	cmp	r2, #0
 80252a8:	d18e      	bne.n	80251c8 <GUI_MEMDEV__WriteToActiveAlpha+0x50>
 80252aa:	4673      	mov	r3, lr
 80252ac:	4632      	mov	r2, r6
 80252ae:	4629      	mov	r1, r5
 80252b0:	4638      	mov	r0, r7
 80252b2:	f7ff fe95 	bl	8024fe0 <_WriteToActiveAlpha>
 80252b6:	b00b      	add	sp, #44	; 0x2c
 80252b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252bc:	1b81      	subs	r1, r0, r6
 80252be:	4606      	mov	r6, r0
 80252c0:	ebc1 0a0a 	rsb	sl, r1, sl
 80252c4:	e7b3      	b.n	802522e <GUI_MEMDEV__WriteToActiveAlpha+0xb6>
 80252c6:	1b43      	subs	r3, r0, r5
 80252c8:	4605      	mov	r5, r0
 80252ca:	1ae4      	subs	r4, r4, r3
 80252cc:	e79d      	b.n	802520a <GUI_MEMDEV__WriteToActiveAlpha+0x92>
 80252ce:	7c50      	ldrb	r0, [r2, #17]
 80252d0:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80252d4:	f8df e030 	ldr.w	lr, [pc, #48]	; 8025308 <GUI_MEMDEV__WriteToActiveAlpha+0x190>
 80252d8:	463b      	mov	r3, r7
 80252da:	9202      	str	r2, [sp, #8]
 80252dc:	4629      	mov	r1, r5
 80252de:	f8cd a004 	str.w	sl, [sp, #4]
 80252e2:	4632      	mov	r2, r6
 80252e4:	9400      	str	r4, [sp, #0]
 80252e6:	f8de 4000 	ldr.w	r4, [lr]
 80252ea:	47a0      	blx	r4
 80252ec:	e7d3      	b.n	8025296 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 80252ee:	4673      	mov	r3, lr
 80252f0:	f7ff fe76 	bl	8024fe0 <_WriteToActiveAlpha>
 80252f4:	e7cf      	b.n	8025296 <GUI_MEMDEV__WriteToActiveAlpha+0x11e>
 80252f6:	bf00      	nop
 80252f8:	200467d0 	.word	0x200467d0
 80252fc:	080271dc 	.word	0x080271dc
 8025300:	20000018 	.word	0x20000018
 8025304:	200467ec 	.word	0x200467ec
 8025308:	200467e8 	.word	0x200467e8

0802530c <__errno>:
 802530c:	4b01      	ldr	r3, [pc, #4]	; (8025314 <__errno+0x8>)
 802530e:	6818      	ldr	r0, [r3, #0]
 8025310:	4770      	bx	lr
 8025312:	bf00      	nop
 8025314:	200000f8 	.word	0x200000f8

08025318 <__libc_init_array>:
 8025318:	b570      	push	{r4, r5, r6, lr}
 802531a:	4e0d      	ldr	r6, [pc, #52]	; (8025350 <__libc_init_array+0x38>)
 802531c:	4c0d      	ldr	r4, [pc, #52]	; (8025354 <__libc_init_array+0x3c>)
 802531e:	1ba4      	subs	r4, r4, r6
 8025320:	10a4      	asrs	r4, r4, #2
 8025322:	2500      	movs	r5, #0
 8025324:	42a5      	cmp	r5, r4
 8025326:	d109      	bne.n	802533c <__libc_init_array+0x24>
 8025328:	4e0b      	ldr	r6, [pc, #44]	; (8025358 <__libc_init_array+0x40>)
 802532a:	4c0c      	ldr	r4, [pc, #48]	; (802535c <__libc_init_array+0x44>)
 802532c:	f001 fea8 	bl	8027080 <_init>
 8025330:	1ba4      	subs	r4, r4, r6
 8025332:	10a4      	asrs	r4, r4, #2
 8025334:	2500      	movs	r5, #0
 8025336:	42a5      	cmp	r5, r4
 8025338:	d105      	bne.n	8025346 <__libc_init_array+0x2e>
 802533a:	bd70      	pop	{r4, r5, r6, pc}
 802533c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025340:	4798      	blx	r3
 8025342:	3501      	adds	r5, #1
 8025344:	e7ee      	b.n	8025324 <__libc_init_array+0xc>
 8025346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802534a:	4798      	blx	r3
 802534c:	3501      	adds	r5, #1
 802534e:	e7f2      	b.n	8025336 <__libc_init_array+0x1e>
 8025350:	080353f8 	.word	0x080353f8
 8025354:	080353f8 	.word	0x080353f8
 8025358:	080353f8 	.word	0x080353f8
 802535c:	080353fc 	.word	0x080353fc

08025360 <malloc>:
 8025360:	4b02      	ldr	r3, [pc, #8]	; (802536c <malloc+0xc>)
 8025362:	4601      	mov	r1, r0
 8025364:	6818      	ldr	r0, [r3, #0]
 8025366:	f000 b895 	b.w	8025494 <_malloc_r>
 802536a:	bf00      	nop
 802536c:	200000f8 	.word	0x200000f8

08025370 <free>:
 8025370:	4b02      	ldr	r3, [pc, #8]	; (802537c <free+0xc>)
 8025372:	4601      	mov	r1, r0
 8025374:	6818      	ldr	r0, [r3, #0]
 8025376:	f000 b83f 	b.w	80253f8 <_free_r>
 802537a:	bf00      	nop
 802537c:	200000f8 	.word	0x200000f8

08025380 <memcmp>:
 8025380:	b510      	push	{r4, lr}
 8025382:	3901      	subs	r1, #1
 8025384:	4402      	add	r2, r0
 8025386:	4290      	cmp	r0, r2
 8025388:	d101      	bne.n	802538e <memcmp+0xe>
 802538a:	2000      	movs	r0, #0
 802538c:	bd10      	pop	{r4, pc}
 802538e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8025392:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025396:	42a3      	cmp	r3, r4
 8025398:	d0f5      	beq.n	8025386 <memcmp+0x6>
 802539a:	1b18      	subs	r0, r3, r4
 802539c:	bd10      	pop	{r4, pc}

0802539e <memcpy>:
 802539e:	b510      	push	{r4, lr}
 80253a0:	1e43      	subs	r3, r0, #1
 80253a2:	440a      	add	r2, r1
 80253a4:	4291      	cmp	r1, r2
 80253a6:	d100      	bne.n	80253aa <memcpy+0xc>
 80253a8:	bd10      	pop	{r4, pc}
 80253aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80253b2:	e7f7      	b.n	80253a4 <memcpy+0x6>

080253b4 <memmove>:
 80253b4:	4288      	cmp	r0, r1
 80253b6:	b510      	push	{r4, lr}
 80253b8:	eb01 0302 	add.w	r3, r1, r2
 80253bc:	d803      	bhi.n	80253c6 <memmove+0x12>
 80253be:	1e42      	subs	r2, r0, #1
 80253c0:	4299      	cmp	r1, r3
 80253c2:	d10c      	bne.n	80253de <memmove+0x2a>
 80253c4:	bd10      	pop	{r4, pc}
 80253c6:	4298      	cmp	r0, r3
 80253c8:	d2f9      	bcs.n	80253be <memmove+0xa>
 80253ca:	1881      	adds	r1, r0, r2
 80253cc:	1ad2      	subs	r2, r2, r3
 80253ce:	42d3      	cmn	r3, r2
 80253d0:	d100      	bne.n	80253d4 <memmove+0x20>
 80253d2:	bd10      	pop	{r4, pc}
 80253d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80253d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80253dc:	e7f7      	b.n	80253ce <memmove+0x1a>
 80253de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80253e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80253e6:	e7eb      	b.n	80253c0 <memmove+0xc>

080253e8 <memset>:
 80253e8:	4402      	add	r2, r0
 80253ea:	4603      	mov	r3, r0
 80253ec:	4293      	cmp	r3, r2
 80253ee:	d100      	bne.n	80253f2 <memset+0xa>
 80253f0:	4770      	bx	lr
 80253f2:	f803 1b01 	strb.w	r1, [r3], #1
 80253f6:	e7f9      	b.n	80253ec <memset+0x4>

080253f8 <_free_r>:
 80253f8:	b538      	push	{r3, r4, r5, lr}
 80253fa:	4605      	mov	r5, r0
 80253fc:	2900      	cmp	r1, #0
 80253fe:	d045      	beq.n	802548c <_free_r+0x94>
 8025400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025404:	1f0c      	subs	r4, r1, #4
 8025406:	2b00      	cmp	r3, #0
 8025408:	bfb8      	it	lt
 802540a:	18e4      	addlt	r4, r4, r3
 802540c:	f000 fbb4 	bl	8025b78 <__malloc_lock>
 8025410:	4a1f      	ldr	r2, [pc, #124]	; (8025490 <_free_r+0x98>)
 8025412:	6813      	ldr	r3, [r2, #0]
 8025414:	4610      	mov	r0, r2
 8025416:	b933      	cbnz	r3, 8025426 <_free_r+0x2e>
 8025418:	6063      	str	r3, [r4, #4]
 802541a:	6014      	str	r4, [r2, #0]
 802541c:	4628      	mov	r0, r5
 802541e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025422:	f000 bbaa 	b.w	8025b7a <__malloc_unlock>
 8025426:	42a3      	cmp	r3, r4
 8025428:	d90c      	bls.n	8025444 <_free_r+0x4c>
 802542a:	6821      	ldr	r1, [r4, #0]
 802542c:	1862      	adds	r2, r4, r1
 802542e:	4293      	cmp	r3, r2
 8025430:	bf04      	itt	eq
 8025432:	681a      	ldreq	r2, [r3, #0]
 8025434:	685b      	ldreq	r3, [r3, #4]
 8025436:	6063      	str	r3, [r4, #4]
 8025438:	bf04      	itt	eq
 802543a:	1852      	addeq	r2, r2, r1
 802543c:	6022      	streq	r2, [r4, #0]
 802543e:	6004      	str	r4, [r0, #0]
 8025440:	e7ec      	b.n	802541c <_free_r+0x24>
 8025442:	4613      	mov	r3, r2
 8025444:	685a      	ldr	r2, [r3, #4]
 8025446:	b10a      	cbz	r2, 802544c <_free_r+0x54>
 8025448:	42a2      	cmp	r2, r4
 802544a:	d9fa      	bls.n	8025442 <_free_r+0x4a>
 802544c:	6819      	ldr	r1, [r3, #0]
 802544e:	1858      	adds	r0, r3, r1
 8025450:	42a0      	cmp	r0, r4
 8025452:	d10b      	bne.n	802546c <_free_r+0x74>
 8025454:	6820      	ldr	r0, [r4, #0]
 8025456:	4401      	add	r1, r0
 8025458:	1858      	adds	r0, r3, r1
 802545a:	4282      	cmp	r2, r0
 802545c:	6019      	str	r1, [r3, #0]
 802545e:	d1dd      	bne.n	802541c <_free_r+0x24>
 8025460:	6810      	ldr	r0, [r2, #0]
 8025462:	6852      	ldr	r2, [r2, #4]
 8025464:	605a      	str	r2, [r3, #4]
 8025466:	4401      	add	r1, r0
 8025468:	6019      	str	r1, [r3, #0]
 802546a:	e7d7      	b.n	802541c <_free_r+0x24>
 802546c:	d902      	bls.n	8025474 <_free_r+0x7c>
 802546e:	230c      	movs	r3, #12
 8025470:	602b      	str	r3, [r5, #0]
 8025472:	e7d3      	b.n	802541c <_free_r+0x24>
 8025474:	6820      	ldr	r0, [r4, #0]
 8025476:	1821      	adds	r1, r4, r0
 8025478:	428a      	cmp	r2, r1
 802547a:	bf04      	itt	eq
 802547c:	6811      	ldreq	r1, [r2, #0]
 802547e:	6852      	ldreq	r2, [r2, #4]
 8025480:	6062      	str	r2, [r4, #4]
 8025482:	bf04      	itt	eq
 8025484:	1809      	addeq	r1, r1, r0
 8025486:	6021      	streq	r1, [r4, #0]
 8025488:	605c      	str	r4, [r3, #4]
 802548a:	e7c7      	b.n	802541c <_free_r+0x24>
 802548c:	bd38      	pop	{r3, r4, r5, pc}
 802548e:	bf00      	nop
 8025490:	200453d0 	.word	0x200453d0

08025494 <_malloc_r>:
 8025494:	b570      	push	{r4, r5, r6, lr}
 8025496:	1ccd      	adds	r5, r1, #3
 8025498:	f025 0503 	bic.w	r5, r5, #3
 802549c:	3508      	adds	r5, #8
 802549e:	2d0c      	cmp	r5, #12
 80254a0:	bf38      	it	cc
 80254a2:	250c      	movcc	r5, #12
 80254a4:	2d00      	cmp	r5, #0
 80254a6:	4606      	mov	r6, r0
 80254a8:	db01      	blt.n	80254ae <_malloc_r+0x1a>
 80254aa:	42a9      	cmp	r1, r5
 80254ac:	d903      	bls.n	80254b6 <_malloc_r+0x22>
 80254ae:	230c      	movs	r3, #12
 80254b0:	6033      	str	r3, [r6, #0]
 80254b2:	2000      	movs	r0, #0
 80254b4:	bd70      	pop	{r4, r5, r6, pc}
 80254b6:	f000 fb5f 	bl	8025b78 <__malloc_lock>
 80254ba:	4a23      	ldr	r2, [pc, #140]	; (8025548 <_malloc_r+0xb4>)
 80254bc:	6814      	ldr	r4, [r2, #0]
 80254be:	4621      	mov	r1, r4
 80254c0:	b991      	cbnz	r1, 80254e8 <_malloc_r+0x54>
 80254c2:	4c22      	ldr	r4, [pc, #136]	; (802554c <_malloc_r+0xb8>)
 80254c4:	6823      	ldr	r3, [r4, #0]
 80254c6:	b91b      	cbnz	r3, 80254d0 <_malloc_r+0x3c>
 80254c8:	4630      	mov	r0, r6
 80254ca:	f000 f8a5 	bl	8025618 <_sbrk_r>
 80254ce:	6020      	str	r0, [r4, #0]
 80254d0:	4629      	mov	r1, r5
 80254d2:	4630      	mov	r0, r6
 80254d4:	f000 f8a0 	bl	8025618 <_sbrk_r>
 80254d8:	1c43      	adds	r3, r0, #1
 80254da:	d126      	bne.n	802552a <_malloc_r+0x96>
 80254dc:	230c      	movs	r3, #12
 80254de:	6033      	str	r3, [r6, #0]
 80254e0:	4630      	mov	r0, r6
 80254e2:	f000 fb4a 	bl	8025b7a <__malloc_unlock>
 80254e6:	e7e4      	b.n	80254b2 <_malloc_r+0x1e>
 80254e8:	680b      	ldr	r3, [r1, #0]
 80254ea:	1b5b      	subs	r3, r3, r5
 80254ec:	d41a      	bmi.n	8025524 <_malloc_r+0x90>
 80254ee:	2b0b      	cmp	r3, #11
 80254f0:	d90f      	bls.n	8025512 <_malloc_r+0x7e>
 80254f2:	600b      	str	r3, [r1, #0]
 80254f4:	50cd      	str	r5, [r1, r3]
 80254f6:	18cc      	adds	r4, r1, r3
 80254f8:	4630      	mov	r0, r6
 80254fa:	f000 fb3e 	bl	8025b7a <__malloc_unlock>
 80254fe:	f104 000b 	add.w	r0, r4, #11
 8025502:	1d23      	adds	r3, r4, #4
 8025504:	f020 0007 	bic.w	r0, r0, #7
 8025508:	1ac3      	subs	r3, r0, r3
 802550a:	d01b      	beq.n	8025544 <_malloc_r+0xb0>
 802550c:	425a      	negs	r2, r3
 802550e:	50e2      	str	r2, [r4, r3]
 8025510:	bd70      	pop	{r4, r5, r6, pc}
 8025512:	428c      	cmp	r4, r1
 8025514:	bf0d      	iteet	eq
 8025516:	6863      	ldreq	r3, [r4, #4]
 8025518:	684b      	ldrne	r3, [r1, #4]
 802551a:	6063      	strne	r3, [r4, #4]
 802551c:	6013      	streq	r3, [r2, #0]
 802551e:	bf18      	it	ne
 8025520:	460c      	movne	r4, r1
 8025522:	e7e9      	b.n	80254f8 <_malloc_r+0x64>
 8025524:	460c      	mov	r4, r1
 8025526:	6849      	ldr	r1, [r1, #4]
 8025528:	e7ca      	b.n	80254c0 <_malloc_r+0x2c>
 802552a:	1cc4      	adds	r4, r0, #3
 802552c:	f024 0403 	bic.w	r4, r4, #3
 8025530:	42a0      	cmp	r0, r4
 8025532:	d005      	beq.n	8025540 <_malloc_r+0xac>
 8025534:	1a21      	subs	r1, r4, r0
 8025536:	4630      	mov	r0, r6
 8025538:	f000 f86e 	bl	8025618 <_sbrk_r>
 802553c:	3001      	adds	r0, #1
 802553e:	d0cd      	beq.n	80254dc <_malloc_r+0x48>
 8025540:	6025      	str	r5, [r4, #0]
 8025542:	e7d9      	b.n	80254f8 <_malloc_r+0x64>
 8025544:	bd70      	pop	{r4, r5, r6, pc}
 8025546:	bf00      	nop
 8025548:	200453d0 	.word	0x200453d0
 802554c:	200453d4 	.word	0x200453d4

08025550 <_puts_r>:
 8025550:	b570      	push	{r4, r5, r6, lr}
 8025552:	460e      	mov	r6, r1
 8025554:	4605      	mov	r5, r0
 8025556:	b118      	cbz	r0, 8025560 <_puts_r+0x10>
 8025558:	6983      	ldr	r3, [r0, #24]
 802555a:	b90b      	cbnz	r3, 8025560 <_puts_r+0x10>
 802555c:	f000 fa1e 	bl	802599c <__sinit>
 8025560:	69ab      	ldr	r3, [r5, #24]
 8025562:	68ac      	ldr	r4, [r5, #8]
 8025564:	b913      	cbnz	r3, 802556c <_puts_r+0x1c>
 8025566:	4628      	mov	r0, r5
 8025568:	f000 fa18 	bl	802599c <__sinit>
 802556c:	4b23      	ldr	r3, [pc, #140]	; (80255fc <_puts_r+0xac>)
 802556e:	429c      	cmp	r4, r3
 8025570:	d117      	bne.n	80255a2 <_puts_r+0x52>
 8025572:	686c      	ldr	r4, [r5, #4]
 8025574:	89a3      	ldrh	r3, [r4, #12]
 8025576:	071b      	lsls	r3, r3, #28
 8025578:	d51d      	bpl.n	80255b6 <_puts_r+0x66>
 802557a:	6923      	ldr	r3, [r4, #16]
 802557c:	b1db      	cbz	r3, 80255b6 <_puts_r+0x66>
 802557e:	3e01      	subs	r6, #1
 8025580:	68a3      	ldr	r3, [r4, #8]
 8025582:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025586:	3b01      	subs	r3, #1
 8025588:	60a3      	str	r3, [r4, #8]
 802558a:	b9e9      	cbnz	r1, 80255c8 <_puts_r+0x78>
 802558c:	2b00      	cmp	r3, #0
 802558e:	da2e      	bge.n	80255ee <_puts_r+0x9e>
 8025590:	4622      	mov	r2, r4
 8025592:	210a      	movs	r1, #10
 8025594:	4628      	mov	r0, r5
 8025596:	f000 f84f 	bl	8025638 <__swbuf_r>
 802559a:	3001      	adds	r0, #1
 802559c:	d011      	beq.n	80255c2 <_puts_r+0x72>
 802559e:	200a      	movs	r0, #10
 80255a0:	bd70      	pop	{r4, r5, r6, pc}
 80255a2:	4b17      	ldr	r3, [pc, #92]	; (8025600 <_puts_r+0xb0>)
 80255a4:	429c      	cmp	r4, r3
 80255a6:	d101      	bne.n	80255ac <_puts_r+0x5c>
 80255a8:	68ac      	ldr	r4, [r5, #8]
 80255aa:	e7e3      	b.n	8025574 <_puts_r+0x24>
 80255ac:	4b15      	ldr	r3, [pc, #84]	; (8025604 <_puts_r+0xb4>)
 80255ae:	429c      	cmp	r4, r3
 80255b0:	bf08      	it	eq
 80255b2:	68ec      	ldreq	r4, [r5, #12]
 80255b4:	e7de      	b.n	8025574 <_puts_r+0x24>
 80255b6:	4621      	mov	r1, r4
 80255b8:	4628      	mov	r0, r5
 80255ba:	f000 f88f 	bl	80256dc <__swsetup_r>
 80255be:	2800      	cmp	r0, #0
 80255c0:	d0dd      	beq.n	802557e <_puts_r+0x2e>
 80255c2:	f04f 30ff 	mov.w	r0, #4294967295
 80255c6:	bd70      	pop	{r4, r5, r6, pc}
 80255c8:	2b00      	cmp	r3, #0
 80255ca:	da04      	bge.n	80255d6 <_puts_r+0x86>
 80255cc:	69a2      	ldr	r2, [r4, #24]
 80255ce:	4293      	cmp	r3, r2
 80255d0:	db06      	blt.n	80255e0 <_puts_r+0x90>
 80255d2:	290a      	cmp	r1, #10
 80255d4:	d004      	beq.n	80255e0 <_puts_r+0x90>
 80255d6:	6823      	ldr	r3, [r4, #0]
 80255d8:	1c5a      	adds	r2, r3, #1
 80255da:	6022      	str	r2, [r4, #0]
 80255dc:	7019      	strb	r1, [r3, #0]
 80255de:	e7cf      	b.n	8025580 <_puts_r+0x30>
 80255e0:	4622      	mov	r2, r4
 80255e2:	4628      	mov	r0, r5
 80255e4:	f000 f828 	bl	8025638 <__swbuf_r>
 80255e8:	3001      	adds	r0, #1
 80255ea:	d1c9      	bne.n	8025580 <_puts_r+0x30>
 80255ec:	e7e9      	b.n	80255c2 <_puts_r+0x72>
 80255ee:	6823      	ldr	r3, [r4, #0]
 80255f0:	200a      	movs	r0, #10
 80255f2:	1c5a      	adds	r2, r3, #1
 80255f4:	6022      	str	r2, [r4, #0]
 80255f6:	7018      	strb	r0, [r3, #0]
 80255f8:	bd70      	pop	{r4, r5, r6, pc}
 80255fa:	bf00      	nop
 80255fc:	080351d0 	.word	0x080351d0
 8025600:	080351f0 	.word	0x080351f0
 8025604:	080351b0 	.word	0x080351b0

08025608 <puts>:
 8025608:	4b02      	ldr	r3, [pc, #8]	; (8025614 <puts+0xc>)
 802560a:	4601      	mov	r1, r0
 802560c:	6818      	ldr	r0, [r3, #0]
 802560e:	f7ff bf9f 	b.w	8025550 <_puts_r>
 8025612:	bf00      	nop
 8025614:	200000f8 	.word	0x200000f8

08025618 <_sbrk_r>:
 8025618:	b538      	push	{r3, r4, r5, lr}
 802561a:	4c06      	ldr	r4, [pc, #24]	; (8025634 <_sbrk_r+0x1c>)
 802561c:	2300      	movs	r3, #0
 802561e:	4605      	mov	r5, r0
 8025620:	4608      	mov	r0, r1
 8025622:	6023      	str	r3, [r4, #0]
 8025624:	f7db fcfa 	bl	800101c <_sbrk>
 8025628:	1c43      	adds	r3, r0, #1
 802562a:	d102      	bne.n	8025632 <_sbrk_r+0x1a>
 802562c:	6823      	ldr	r3, [r4, #0]
 802562e:	b103      	cbz	r3, 8025632 <_sbrk_r+0x1a>
 8025630:	602b      	str	r3, [r5, #0]
 8025632:	bd38      	pop	{r3, r4, r5, pc}
 8025634:	20046880 	.word	0x20046880

08025638 <__swbuf_r>:
 8025638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802563a:	460e      	mov	r6, r1
 802563c:	4614      	mov	r4, r2
 802563e:	4605      	mov	r5, r0
 8025640:	b118      	cbz	r0, 802564a <__swbuf_r+0x12>
 8025642:	6983      	ldr	r3, [r0, #24]
 8025644:	b90b      	cbnz	r3, 802564a <__swbuf_r+0x12>
 8025646:	f000 f9a9 	bl	802599c <__sinit>
 802564a:	4b21      	ldr	r3, [pc, #132]	; (80256d0 <__swbuf_r+0x98>)
 802564c:	429c      	cmp	r4, r3
 802564e:	d12a      	bne.n	80256a6 <__swbuf_r+0x6e>
 8025650:	686c      	ldr	r4, [r5, #4]
 8025652:	69a3      	ldr	r3, [r4, #24]
 8025654:	60a3      	str	r3, [r4, #8]
 8025656:	89a3      	ldrh	r3, [r4, #12]
 8025658:	071a      	lsls	r2, r3, #28
 802565a:	d52e      	bpl.n	80256ba <__swbuf_r+0x82>
 802565c:	6923      	ldr	r3, [r4, #16]
 802565e:	b363      	cbz	r3, 80256ba <__swbuf_r+0x82>
 8025660:	6923      	ldr	r3, [r4, #16]
 8025662:	6820      	ldr	r0, [r4, #0]
 8025664:	1ac0      	subs	r0, r0, r3
 8025666:	6963      	ldr	r3, [r4, #20]
 8025668:	b2f6      	uxtb	r6, r6
 802566a:	4298      	cmp	r0, r3
 802566c:	4637      	mov	r7, r6
 802566e:	db04      	blt.n	802567a <__swbuf_r+0x42>
 8025670:	4621      	mov	r1, r4
 8025672:	4628      	mov	r0, r5
 8025674:	f000 f928 	bl	80258c8 <_fflush_r>
 8025678:	bb28      	cbnz	r0, 80256c6 <__swbuf_r+0x8e>
 802567a:	68a3      	ldr	r3, [r4, #8]
 802567c:	3b01      	subs	r3, #1
 802567e:	60a3      	str	r3, [r4, #8]
 8025680:	6823      	ldr	r3, [r4, #0]
 8025682:	1c5a      	adds	r2, r3, #1
 8025684:	6022      	str	r2, [r4, #0]
 8025686:	701e      	strb	r6, [r3, #0]
 8025688:	6963      	ldr	r3, [r4, #20]
 802568a:	3001      	adds	r0, #1
 802568c:	4298      	cmp	r0, r3
 802568e:	d004      	beq.n	802569a <__swbuf_r+0x62>
 8025690:	89a3      	ldrh	r3, [r4, #12]
 8025692:	07db      	lsls	r3, r3, #31
 8025694:	d519      	bpl.n	80256ca <__swbuf_r+0x92>
 8025696:	2e0a      	cmp	r6, #10
 8025698:	d117      	bne.n	80256ca <__swbuf_r+0x92>
 802569a:	4621      	mov	r1, r4
 802569c:	4628      	mov	r0, r5
 802569e:	f000 f913 	bl	80258c8 <_fflush_r>
 80256a2:	b190      	cbz	r0, 80256ca <__swbuf_r+0x92>
 80256a4:	e00f      	b.n	80256c6 <__swbuf_r+0x8e>
 80256a6:	4b0b      	ldr	r3, [pc, #44]	; (80256d4 <__swbuf_r+0x9c>)
 80256a8:	429c      	cmp	r4, r3
 80256aa:	d101      	bne.n	80256b0 <__swbuf_r+0x78>
 80256ac:	68ac      	ldr	r4, [r5, #8]
 80256ae:	e7d0      	b.n	8025652 <__swbuf_r+0x1a>
 80256b0:	4b09      	ldr	r3, [pc, #36]	; (80256d8 <__swbuf_r+0xa0>)
 80256b2:	429c      	cmp	r4, r3
 80256b4:	bf08      	it	eq
 80256b6:	68ec      	ldreq	r4, [r5, #12]
 80256b8:	e7cb      	b.n	8025652 <__swbuf_r+0x1a>
 80256ba:	4621      	mov	r1, r4
 80256bc:	4628      	mov	r0, r5
 80256be:	f000 f80d 	bl	80256dc <__swsetup_r>
 80256c2:	2800      	cmp	r0, #0
 80256c4:	d0cc      	beq.n	8025660 <__swbuf_r+0x28>
 80256c6:	f04f 37ff 	mov.w	r7, #4294967295
 80256ca:	4638      	mov	r0, r7
 80256cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256ce:	bf00      	nop
 80256d0:	080351d0 	.word	0x080351d0
 80256d4:	080351f0 	.word	0x080351f0
 80256d8:	080351b0 	.word	0x080351b0

080256dc <__swsetup_r>:
 80256dc:	4b32      	ldr	r3, [pc, #200]	; (80257a8 <__swsetup_r+0xcc>)
 80256de:	b570      	push	{r4, r5, r6, lr}
 80256e0:	681d      	ldr	r5, [r3, #0]
 80256e2:	4606      	mov	r6, r0
 80256e4:	460c      	mov	r4, r1
 80256e6:	b125      	cbz	r5, 80256f2 <__swsetup_r+0x16>
 80256e8:	69ab      	ldr	r3, [r5, #24]
 80256ea:	b913      	cbnz	r3, 80256f2 <__swsetup_r+0x16>
 80256ec:	4628      	mov	r0, r5
 80256ee:	f000 f955 	bl	802599c <__sinit>
 80256f2:	4b2e      	ldr	r3, [pc, #184]	; (80257ac <__swsetup_r+0xd0>)
 80256f4:	429c      	cmp	r4, r3
 80256f6:	d10f      	bne.n	8025718 <__swsetup_r+0x3c>
 80256f8:	686c      	ldr	r4, [r5, #4]
 80256fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256fe:	b29a      	uxth	r2, r3
 8025700:	0715      	lsls	r5, r2, #28
 8025702:	d42c      	bmi.n	802575e <__swsetup_r+0x82>
 8025704:	06d0      	lsls	r0, r2, #27
 8025706:	d411      	bmi.n	802572c <__swsetup_r+0x50>
 8025708:	2209      	movs	r2, #9
 802570a:	6032      	str	r2, [r6, #0]
 802570c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025710:	81a3      	strh	r3, [r4, #12]
 8025712:	f04f 30ff 	mov.w	r0, #4294967295
 8025716:	bd70      	pop	{r4, r5, r6, pc}
 8025718:	4b25      	ldr	r3, [pc, #148]	; (80257b0 <__swsetup_r+0xd4>)
 802571a:	429c      	cmp	r4, r3
 802571c:	d101      	bne.n	8025722 <__swsetup_r+0x46>
 802571e:	68ac      	ldr	r4, [r5, #8]
 8025720:	e7eb      	b.n	80256fa <__swsetup_r+0x1e>
 8025722:	4b24      	ldr	r3, [pc, #144]	; (80257b4 <__swsetup_r+0xd8>)
 8025724:	429c      	cmp	r4, r3
 8025726:	bf08      	it	eq
 8025728:	68ec      	ldreq	r4, [r5, #12]
 802572a:	e7e6      	b.n	80256fa <__swsetup_r+0x1e>
 802572c:	0751      	lsls	r1, r2, #29
 802572e:	d512      	bpl.n	8025756 <__swsetup_r+0x7a>
 8025730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025732:	b141      	cbz	r1, 8025746 <__swsetup_r+0x6a>
 8025734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025738:	4299      	cmp	r1, r3
 802573a:	d002      	beq.n	8025742 <__swsetup_r+0x66>
 802573c:	4630      	mov	r0, r6
 802573e:	f7ff fe5b 	bl	80253f8 <_free_r>
 8025742:	2300      	movs	r3, #0
 8025744:	6363      	str	r3, [r4, #52]	; 0x34
 8025746:	89a3      	ldrh	r3, [r4, #12]
 8025748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802574c:	81a3      	strh	r3, [r4, #12]
 802574e:	2300      	movs	r3, #0
 8025750:	6063      	str	r3, [r4, #4]
 8025752:	6923      	ldr	r3, [r4, #16]
 8025754:	6023      	str	r3, [r4, #0]
 8025756:	89a3      	ldrh	r3, [r4, #12]
 8025758:	f043 0308 	orr.w	r3, r3, #8
 802575c:	81a3      	strh	r3, [r4, #12]
 802575e:	6923      	ldr	r3, [r4, #16]
 8025760:	b94b      	cbnz	r3, 8025776 <__swsetup_r+0x9a>
 8025762:	89a3      	ldrh	r3, [r4, #12]
 8025764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802576c:	d003      	beq.n	8025776 <__swsetup_r+0x9a>
 802576e:	4621      	mov	r1, r4
 8025770:	4630      	mov	r0, r6
 8025772:	f000 f9c1 	bl	8025af8 <__smakebuf_r>
 8025776:	89a2      	ldrh	r2, [r4, #12]
 8025778:	f012 0301 	ands.w	r3, r2, #1
 802577c:	d00c      	beq.n	8025798 <__swsetup_r+0xbc>
 802577e:	2300      	movs	r3, #0
 8025780:	60a3      	str	r3, [r4, #8]
 8025782:	6963      	ldr	r3, [r4, #20]
 8025784:	425b      	negs	r3, r3
 8025786:	61a3      	str	r3, [r4, #24]
 8025788:	6923      	ldr	r3, [r4, #16]
 802578a:	b953      	cbnz	r3, 80257a2 <__swsetup_r+0xc6>
 802578c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025790:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025794:	d1ba      	bne.n	802570c <__swsetup_r+0x30>
 8025796:	bd70      	pop	{r4, r5, r6, pc}
 8025798:	0792      	lsls	r2, r2, #30
 802579a:	bf58      	it	pl
 802579c:	6963      	ldrpl	r3, [r4, #20]
 802579e:	60a3      	str	r3, [r4, #8]
 80257a0:	e7f2      	b.n	8025788 <__swsetup_r+0xac>
 80257a2:	2000      	movs	r0, #0
 80257a4:	e7f7      	b.n	8025796 <__swsetup_r+0xba>
 80257a6:	bf00      	nop
 80257a8:	200000f8 	.word	0x200000f8
 80257ac:	080351d0 	.word	0x080351d0
 80257b0:	080351f0 	.word	0x080351f0
 80257b4:	080351b0 	.word	0x080351b0

080257b8 <__sflush_r>:
 80257b8:	898a      	ldrh	r2, [r1, #12]
 80257ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80257be:	4605      	mov	r5, r0
 80257c0:	0710      	lsls	r0, r2, #28
 80257c2:	460c      	mov	r4, r1
 80257c4:	d45a      	bmi.n	802587c <__sflush_r+0xc4>
 80257c6:	684b      	ldr	r3, [r1, #4]
 80257c8:	2b00      	cmp	r3, #0
 80257ca:	dc05      	bgt.n	80257d8 <__sflush_r+0x20>
 80257cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80257ce:	2b00      	cmp	r3, #0
 80257d0:	dc02      	bgt.n	80257d8 <__sflush_r+0x20>
 80257d2:	2000      	movs	r0, #0
 80257d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80257da:	2e00      	cmp	r6, #0
 80257dc:	d0f9      	beq.n	80257d2 <__sflush_r+0x1a>
 80257de:	2300      	movs	r3, #0
 80257e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80257e4:	682f      	ldr	r7, [r5, #0]
 80257e6:	602b      	str	r3, [r5, #0]
 80257e8:	d033      	beq.n	8025852 <__sflush_r+0x9a>
 80257ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80257ec:	89a3      	ldrh	r3, [r4, #12]
 80257ee:	075a      	lsls	r2, r3, #29
 80257f0:	d505      	bpl.n	80257fe <__sflush_r+0x46>
 80257f2:	6863      	ldr	r3, [r4, #4]
 80257f4:	1ac0      	subs	r0, r0, r3
 80257f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80257f8:	b10b      	cbz	r3, 80257fe <__sflush_r+0x46>
 80257fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80257fc:	1ac0      	subs	r0, r0, r3
 80257fe:	2300      	movs	r3, #0
 8025800:	4602      	mov	r2, r0
 8025802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025804:	6a21      	ldr	r1, [r4, #32]
 8025806:	4628      	mov	r0, r5
 8025808:	47b0      	blx	r6
 802580a:	1c43      	adds	r3, r0, #1
 802580c:	89a3      	ldrh	r3, [r4, #12]
 802580e:	d106      	bne.n	802581e <__sflush_r+0x66>
 8025810:	6829      	ldr	r1, [r5, #0]
 8025812:	291d      	cmp	r1, #29
 8025814:	d84b      	bhi.n	80258ae <__sflush_r+0xf6>
 8025816:	4a2b      	ldr	r2, [pc, #172]	; (80258c4 <__sflush_r+0x10c>)
 8025818:	40ca      	lsrs	r2, r1
 802581a:	07d6      	lsls	r6, r2, #31
 802581c:	d547      	bpl.n	80258ae <__sflush_r+0xf6>
 802581e:	2200      	movs	r2, #0
 8025820:	6062      	str	r2, [r4, #4]
 8025822:	04d9      	lsls	r1, r3, #19
 8025824:	6922      	ldr	r2, [r4, #16]
 8025826:	6022      	str	r2, [r4, #0]
 8025828:	d504      	bpl.n	8025834 <__sflush_r+0x7c>
 802582a:	1c42      	adds	r2, r0, #1
 802582c:	d101      	bne.n	8025832 <__sflush_r+0x7a>
 802582e:	682b      	ldr	r3, [r5, #0]
 8025830:	b903      	cbnz	r3, 8025834 <__sflush_r+0x7c>
 8025832:	6560      	str	r0, [r4, #84]	; 0x54
 8025834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025836:	602f      	str	r7, [r5, #0]
 8025838:	2900      	cmp	r1, #0
 802583a:	d0ca      	beq.n	80257d2 <__sflush_r+0x1a>
 802583c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025840:	4299      	cmp	r1, r3
 8025842:	d002      	beq.n	802584a <__sflush_r+0x92>
 8025844:	4628      	mov	r0, r5
 8025846:	f7ff fdd7 	bl	80253f8 <_free_r>
 802584a:	2000      	movs	r0, #0
 802584c:	6360      	str	r0, [r4, #52]	; 0x34
 802584e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025852:	6a21      	ldr	r1, [r4, #32]
 8025854:	2301      	movs	r3, #1
 8025856:	4628      	mov	r0, r5
 8025858:	47b0      	blx	r6
 802585a:	1c41      	adds	r1, r0, #1
 802585c:	d1c6      	bne.n	80257ec <__sflush_r+0x34>
 802585e:	682b      	ldr	r3, [r5, #0]
 8025860:	2b00      	cmp	r3, #0
 8025862:	d0c3      	beq.n	80257ec <__sflush_r+0x34>
 8025864:	2b1d      	cmp	r3, #29
 8025866:	d001      	beq.n	802586c <__sflush_r+0xb4>
 8025868:	2b16      	cmp	r3, #22
 802586a:	d101      	bne.n	8025870 <__sflush_r+0xb8>
 802586c:	602f      	str	r7, [r5, #0]
 802586e:	e7b0      	b.n	80257d2 <__sflush_r+0x1a>
 8025870:	89a3      	ldrh	r3, [r4, #12]
 8025872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025876:	81a3      	strh	r3, [r4, #12]
 8025878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802587c:	690f      	ldr	r7, [r1, #16]
 802587e:	2f00      	cmp	r7, #0
 8025880:	d0a7      	beq.n	80257d2 <__sflush_r+0x1a>
 8025882:	0793      	lsls	r3, r2, #30
 8025884:	680e      	ldr	r6, [r1, #0]
 8025886:	bf08      	it	eq
 8025888:	694b      	ldreq	r3, [r1, #20]
 802588a:	600f      	str	r7, [r1, #0]
 802588c:	bf18      	it	ne
 802588e:	2300      	movne	r3, #0
 8025890:	eba6 0807 	sub.w	r8, r6, r7
 8025894:	608b      	str	r3, [r1, #8]
 8025896:	f1b8 0f00 	cmp.w	r8, #0
 802589a:	dd9a      	ble.n	80257d2 <__sflush_r+0x1a>
 802589c:	4643      	mov	r3, r8
 802589e:	463a      	mov	r2, r7
 80258a0:	6a21      	ldr	r1, [r4, #32]
 80258a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80258a4:	4628      	mov	r0, r5
 80258a6:	47b0      	blx	r6
 80258a8:	2800      	cmp	r0, #0
 80258aa:	dc07      	bgt.n	80258bc <__sflush_r+0x104>
 80258ac:	89a3      	ldrh	r3, [r4, #12]
 80258ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80258b2:	81a3      	strh	r3, [r4, #12]
 80258b4:	f04f 30ff 	mov.w	r0, #4294967295
 80258b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80258bc:	4407      	add	r7, r0
 80258be:	eba8 0800 	sub.w	r8, r8, r0
 80258c2:	e7e8      	b.n	8025896 <__sflush_r+0xde>
 80258c4:	20400001 	.word	0x20400001

080258c8 <_fflush_r>:
 80258c8:	b538      	push	{r3, r4, r5, lr}
 80258ca:	690b      	ldr	r3, [r1, #16]
 80258cc:	4605      	mov	r5, r0
 80258ce:	460c      	mov	r4, r1
 80258d0:	b1db      	cbz	r3, 802590a <_fflush_r+0x42>
 80258d2:	b118      	cbz	r0, 80258dc <_fflush_r+0x14>
 80258d4:	6983      	ldr	r3, [r0, #24]
 80258d6:	b90b      	cbnz	r3, 80258dc <_fflush_r+0x14>
 80258d8:	f000 f860 	bl	802599c <__sinit>
 80258dc:	4b0c      	ldr	r3, [pc, #48]	; (8025910 <_fflush_r+0x48>)
 80258de:	429c      	cmp	r4, r3
 80258e0:	d109      	bne.n	80258f6 <_fflush_r+0x2e>
 80258e2:	686c      	ldr	r4, [r5, #4]
 80258e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80258e8:	b17b      	cbz	r3, 802590a <_fflush_r+0x42>
 80258ea:	4621      	mov	r1, r4
 80258ec:	4628      	mov	r0, r5
 80258ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80258f2:	f7ff bf61 	b.w	80257b8 <__sflush_r>
 80258f6:	4b07      	ldr	r3, [pc, #28]	; (8025914 <_fflush_r+0x4c>)
 80258f8:	429c      	cmp	r4, r3
 80258fa:	d101      	bne.n	8025900 <_fflush_r+0x38>
 80258fc:	68ac      	ldr	r4, [r5, #8]
 80258fe:	e7f1      	b.n	80258e4 <_fflush_r+0x1c>
 8025900:	4b05      	ldr	r3, [pc, #20]	; (8025918 <_fflush_r+0x50>)
 8025902:	429c      	cmp	r4, r3
 8025904:	bf08      	it	eq
 8025906:	68ec      	ldreq	r4, [r5, #12]
 8025908:	e7ec      	b.n	80258e4 <_fflush_r+0x1c>
 802590a:	2000      	movs	r0, #0
 802590c:	bd38      	pop	{r3, r4, r5, pc}
 802590e:	bf00      	nop
 8025910:	080351d0 	.word	0x080351d0
 8025914:	080351f0 	.word	0x080351f0
 8025918:	080351b0 	.word	0x080351b0

0802591c <_cleanup_r>:
 802591c:	4901      	ldr	r1, [pc, #4]	; (8025924 <_cleanup_r+0x8>)
 802591e:	f000 b8a9 	b.w	8025a74 <_fwalk_reent>
 8025922:	bf00      	nop
 8025924:	080258c9 	.word	0x080258c9

08025928 <std.isra.0>:
 8025928:	2300      	movs	r3, #0
 802592a:	b510      	push	{r4, lr}
 802592c:	4604      	mov	r4, r0
 802592e:	6003      	str	r3, [r0, #0]
 8025930:	6043      	str	r3, [r0, #4]
 8025932:	6083      	str	r3, [r0, #8]
 8025934:	8181      	strh	r1, [r0, #12]
 8025936:	6643      	str	r3, [r0, #100]	; 0x64
 8025938:	81c2      	strh	r2, [r0, #14]
 802593a:	6103      	str	r3, [r0, #16]
 802593c:	6143      	str	r3, [r0, #20]
 802593e:	6183      	str	r3, [r0, #24]
 8025940:	4619      	mov	r1, r3
 8025942:	2208      	movs	r2, #8
 8025944:	305c      	adds	r0, #92	; 0x5c
 8025946:	f7ff fd4f 	bl	80253e8 <memset>
 802594a:	4b05      	ldr	r3, [pc, #20]	; (8025960 <std.isra.0+0x38>)
 802594c:	6263      	str	r3, [r4, #36]	; 0x24
 802594e:	4b05      	ldr	r3, [pc, #20]	; (8025964 <std.isra.0+0x3c>)
 8025950:	62a3      	str	r3, [r4, #40]	; 0x28
 8025952:	4b05      	ldr	r3, [pc, #20]	; (8025968 <std.isra.0+0x40>)
 8025954:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025956:	4b05      	ldr	r3, [pc, #20]	; (802596c <std.isra.0+0x44>)
 8025958:	6224      	str	r4, [r4, #32]
 802595a:	6323      	str	r3, [r4, #48]	; 0x30
 802595c:	bd10      	pop	{r4, pc}
 802595e:	bf00      	nop
 8025960:	08025b7d 	.word	0x08025b7d
 8025964:	08025b9f 	.word	0x08025b9f
 8025968:	08025bd7 	.word	0x08025bd7
 802596c:	08025bfb 	.word	0x08025bfb

08025970 <__sfmoreglue>:
 8025970:	b570      	push	{r4, r5, r6, lr}
 8025972:	1e4a      	subs	r2, r1, #1
 8025974:	2568      	movs	r5, #104	; 0x68
 8025976:	4355      	muls	r5, r2
 8025978:	460e      	mov	r6, r1
 802597a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802597e:	f7ff fd89 	bl	8025494 <_malloc_r>
 8025982:	4604      	mov	r4, r0
 8025984:	b140      	cbz	r0, 8025998 <__sfmoreglue+0x28>
 8025986:	2100      	movs	r1, #0
 8025988:	e880 0042 	stmia.w	r0, {r1, r6}
 802598c:	300c      	adds	r0, #12
 802598e:	60a0      	str	r0, [r4, #8]
 8025990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025994:	f7ff fd28 	bl	80253e8 <memset>
 8025998:	4620      	mov	r0, r4
 802599a:	bd70      	pop	{r4, r5, r6, pc}

0802599c <__sinit>:
 802599c:	6983      	ldr	r3, [r0, #24]
 802599e:	b510      	push	{r4, lr}
 80259a0:	4604      	mov	r4, r0
 80259a2:	bb33      	cbnz	r3, 80259f2 <__sinit+0x56>
 80259a4:	6483      	str	r3, [r0, #72]	; 0x48
 80259a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80259a8:	6503      	str	r3, [r0, #80]	; 0x50
 80259aa:	4b12      	ldr	r3, [pc, #72]	; (80259f4 <__sinit+0x58>)
 80259ac:	4a12      	ldr	r2, [pc, #72]	; (80259f8 <__sinit+0x5c>)
 80259ae:	681b      	ldr	r3, [r3, #0]
 80259b0:	6282      	str	r2, [r0, #40]	; 0x28
 80259b2:	4298      	cmp	r0, r3
 80259b4:	bf04      	itt	eq
 80259b6:	2301      	moveq	r3, #1
 80259b8:	6183      	streq	r3, [r0, #24]
 80259ba:	f000 f81f 	bl	80259fc <__sfp>
 80259be:	6060      	str	r0, [r4, #4]
 80259c0:	4620      	mov	r0, r4
 80259c2:	f000 f81b 	bl	80259fc <__sfp>
 80259c6:	60a0      	str	r0, [r4, #8]
 80259c8:	4620      	mov	r0, r4
 80259ca:	f000 f817 	bl	80259fc <__sfp>
 80259ce:	2200      	movs	r2, #0
 80259d0:	60e0      	str	r0, [r4, #12]
 80259d2:	2104      	movs	r1, #4
 80259d4:	6860      	ldr	r0, [r4, #4]
 80259d6:	f7ff ffa7 	bl	8025928 <std.isra.0>
 80259da:	2201      	movs	r2, #1
 80259dc:	2109      	movs	r1, #9
 80259de:	68a0      	ldr	r0, [r4, #8]
 80259e0:	f7ff ffa2 	bl	8025928 <std.isra.0>
 80259e4:	2202      	movs	r2, #2
 80259e6:	2112      	movs	r1, #18
 80259e8:	68e0      	ldr	r0, [r4, #12]
 80259ea:	f7ff ff9d 	bl	8025928 <std.isra.0>
 80259ee:	2301      	movs	r3, #1
 80259f0:	61a3      	str	r3, [r4, #24]
 80259f2:	bd10      	pop	{r4, pc}
 80259f4:	080351ac 	.word	0x080351ac
 80259f8:	0802591d 	.word	0x0802591d

080259fc <__sfp>:
 80259fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80259fe:	4b1c      	ldr	r3, [pc, #112]	; (8025a70 <__sfp+0x74>)
 8025a00:	681e      	ldr	r6, [r3, #0]
 8025a02:	69b3      	ldr	r3, [r6, #24]
 8025a04:	4607      	mov	r7, r0
 8025a06:	b913      	cbnz	r3, 8025a0e <__sfp+0x12>
 8025a08:	4630      	mov	r0, r6
 8025a0a:	f7ff ffc7 	bl	802599c <__sinit>
 8025a0e:	3648      	adds	r6, #72	; 0x48
 8025a10:	68b4      	ldr	r4, [r6, #8]
 8025a12:	6873      	ldr	r3, [r6, #4]
 8025a14:	3b01      	subs	r3, #1
 8025a16:	d503      	bpl.n	8025a20 <__sfp+0x24>
 8025a18:	6833      	ldr	r3, [r6, #0]
 8025a1a:	b133      	cbz	r3, 8025a2a <__sfp+0x2e>
 8025a1c:	6836      	ldr	r6, [r6, #0]
 8025a1e:	e7f7      	b.n	8025a10 <__sfp+0x14>
 8025a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025a24:	b16d      	cbz	r5, 8025a42 <__sfp+0x46>
 8025a26:	3468      	adds	r4, #104	; 0x68
 8025a28:	e7f4      	b.n	8025a14 <__sfp+0x18>
 8025a2a:	2104      	movs	r1, #4
 8025a2c:	4638      	mov	r0, r7
 8025a2e:	f7ff ff9f 	bl	8025970 <__sfmoreglue>
 8025a32:	6030      	str	r0, [r6, #0]
 8025a34:	2800      	cmp	r0, #0
 8025a36:	d1f1      	bne.n	8025a1c <__sfp+0x20>
 8025a38:	230c      	movs	r3, #12
 8025a3a:	603b      	str	r3, [r7, #0]
 8025a3c:	4604      	mov	r4, r0
 8025a3e:	4620      	mov	r0, r4
 8025a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025a46:	81e3      	strh	r3, [r4, #14]
 8025a48:	2301      	movs	r3, #1
 8025a4a:	81a3      	strh	r3, [r4, #12]
 8025a4c:	6665      	str	r5, [r4, #100]	; 0x64
 8025a4e:	6025      	str	r5, [r4, #0]
 8025a50:	60a5      	str	r5, [r4, #8]
 8025a52:	6065      	str	r5, [r4, #4]
 8025a54:	6125      	str	r5, [r4, #16]
 8025a56:	6165      	str	r5, [r4, #20]
 8025a58:	61a5      	str	r5, [r4, #24]
 8025a5a:	2208      	movs	r2, #8
 8025a5c:	4629      	mov	r1, r5
 8025a5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025a62:	f7ff fcc1 	bl	80253e8 <memset>
 8025a66:	6365      	str	r5, [r4, #52]	; 0x34
 8025a68:	63a5      	str	r5, [r4, #56]	; 0x38
 8025a6a:	64a5      	str	r5, [r4, #72]	; 0x48
 8025a6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8025a6e:	e7e6      	b.n	8025a3e <__sfp+0x42>
 8025a70:	080351ac 	.word	0x080351ac

08025a74 <_fwalk_reent>:
 8025a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a78:	4680      	mov	r8, r0
 8025a7a:	4689      	mov	r9, r1
 8025a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025a80:	2600      	movs	r6, #0
 8025a82:	b914      	cbnz	r4, 8025a8a <_fwalk_reent+0x16>
 8025a84:	4630      	mov	r0, r6
 8025a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a8a:	68a5      	ldr	r5, [r4, #8]
 8025a8c:	6867      	ldr	r7, [r4, #4]
 8025a8e:	3f01      	subs	r7, #1
 8025a90:	d501      	bpl.n	8025a96 <_fwalk_reent+0x22>
 8025a92:	6824      	ldr	r4, [r4, #0]
 8025a94:	e7f5      	b.n	8025a82 <_fwalk_reent+0xe>
 8025a96:	89ab      	ldrh	r3, [r5, #12]
 8025a98:	2b01      	cmp	r3, #1
 8025a9a:	d907      	bls.n	8025aac <_fwalk_reent+0x38>
 8025a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025aa0:	3301      	adds	r3, #1
 8025aa2:	d003      	beq.n	8025aac <_fwalk_reent+0x38>
 8025aa4:	4629      	mov	r1, r5
 8025aa6:	4640      	mov	r0, r8
 8025aa8:	47c8      	blx	r9
 8025aaa:	4306      	orrs	r6, r0
 8025aac:	3568      	adds	r5, #104	; 0x68
 8025aae:	e7ee      	b.n	8025a8e <_fwalk_reent+0x1a>

08025ab0 <__swhatbuf_r>:
 8025ab0:	b570      	push	{r4, r5, r6, lr}
 8025ab2:	460e      	mov	r6, r1
 8025ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025ab8:	2900      	cmp	r1, #0
 8025aba:	b090      	sub	sp, #64	; 0x40
 8025abc:	4614      	mov	r4, r2
 8025abe:	461d      	mov	r5, r3
 8025ac0:	da07      	bge.n	8025ad2 <__swhatbuf_r+0x22>
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	602b      	str	r3, [r5, #0]
 8025ac6:	89b3      	ldrh	r3, [r6, #12]
 8025ac8:	061a      	lsls	r2, r3, #24
 8025aca:	d410      	bmi.n	8025aee <__swhatbuf_r+0x3e>
 8025acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025ad0:	e00e      	b.n	8025af0 <__swhatbuf_r+0x40>
 8025ad2:	aa01      	add	r2, sp, #4
 8025ad4:	f000 f8b8 	bl	8025c48 <_fstat_r>
 8025ad8:	2800      	cmp	r0, #0
 8025ada:	dbf2      	blt.n	8025ac2 <__swhatbuf_r+0x12>
 8025adc:	9a02      	ldr	r2, [sp, #8]
 8025ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025ae6:	425a      	negs	r2, r3
 8025ae8:	415a      	adcs	r2, r3
 8025aea:	602a      	str	r2, [r5, #0]
 8025aec:	e7ee      	b.n	8025acc <__swhatbuf_r+0x1c>
 8025aee:	2340      	movs	r3, #64	; 0x40
 8025af0:	2000      	movs	r0, #0
 8025af2:	6023      	str	r3, [r4, #0]
 8025af4:	b010      	add	sp, #64	; 0x40
 8025af6:	bd70      	pop	{r4, r5, r6, pc}

08025af8 <__smakebuf_r>:
 8025af8:	898b      	ldrh	r3, [r1, #12]
 8025afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025afc:	079d      	lsls	r5, r3, #30
 8025afe:	4606      	mov	r6, r0
 8025b00:	460c      	mov	r4, r1
 8025b02:	d507      	bpl.n	8025b14 <__smakebuf_r+0x1c>
 8025b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025b08:	6023      	str	r3, [r4, #0]
 8025b0a:	6123      	str	r3, [r4, #16]
 8025b0c:	2301      	movs	r3, #1
 8025b0e:	6163      	str	r3, [r4, #20]
 8025b10:	b002      	add	sp, #8
 8025b12:	bd70      	pop	{r4, r5, r6, pc}
 8025b14:	ab01      	add	r3, sp, #4
 8025b16:	466a      	mov	r2, sp
 8025b18:	f7ff ffca 	bl	8025ab0 <__swhatbuf_r>
 8025b1c:	9900      	ldr	r1, [sp, #0]
 8025b1e:	4605      	mov	r5, r0
 8025b20:	4630      	mov	r0, r6
 8025b22:	f7ff fcb7 	bl	8025494 <_malloc_r>
 8025b26:	b948      	cbnz	r0, 8025b3c <__smakebuf_r+0x44>
 8025b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b2c:	059a      	lsls	r2, r3, #22
 8025b2e:	d4ef      	bmi.n	8025b10 <__smakebuf_r+0x18>
 8025b30:	f023 0303 	bic.w	r3, r3, #3
 8025b34:	f043 0302 	orr.w	r3, r3, #2
 8025b38:	81a3      	strh	r3, [r4, #12]
 8025b3a:	e7e3      	b.n	8025b04 <__smakebuf_r+0xc>
 8025b3c:	4b0d      	ldr	r3, [pc, #52]	; (8025b74 <__smakebuf_r+0x7c>)
 8025b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8025b40:	89a3      	ldrh	r3, [r4, #12]
 8025b42:	6020      	str	r0, [r4, #0]
 8025b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025b48:	81a3      	strh	r3, [r4, #12]
 8025b4a:	9b00      	ldr	r3, [sp, #0]
 8025b4c:	6163      	str	r3, [r4, #20]
 8025b4e:	9b01      	ldr	r3, [sp, #4]
 8025b50:	6120      	str	r0, [r4, #16]
 8025b52:	b15b      	cbz	r3, 8025b6c <__smakebuf_r+0x74>
 8025b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b58:	4630      	mov	r0, r6
 8025b5a:	f000 f887 	bl	8025c6c <_isatty_r>
 8025b5e:	b128      	cbz	r0, 8025b6c <__smakebuf_r+0x74>
 8025b60:	89a3      	ldrh	r3, [r4, #12]
 8025b62:	f023 0303 	bic.w	r3, r3, #3
 8025b66:	f043 0301 	orr.w	r3, r3, #1
 8025b6a:	81a3      	strh	r3, [r4, #12]
 8025b6c:	89a3      	ldrh	r3, [r4, #12]
 8025b6e:	431d      	orrs	r5, r3
 8025b70:	81a5      	strh	r5, [r4, #12]
 8025b72:	e7cd      	b.n	8025b10 <__smakebuf_r+0x18>
 8025b74:	0802591d 	.word	0x0802591d

08025b78 <__malloc_lock>:
 8025b78:	4770      	bx	lr

08025b7a <__malloc_unlock>:
 8025b7a:	4770      	bx	lr

08025b7c <__sread>:
 8025b7c:	b510      	push	{r4, lr}
 8025b7e:	460c      	mov	r4, r1
 8025b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b84:	f000 f894 	bl	8025cb0 <_read_r>
 8025b88:	2800      	cmp	r0, #0
 8025b8a:	bfab      	itete	ge
 8025b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8025b90:	181b      	addge	r3, r3, r0
 8025b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025b96:	bfac      	ite	ge
 8025b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8025b9a:	81a3      	strhlt	r3, [r4, #12]
 8025b9c:	bd10      	pop	{r4, pc}

08025b9e <__swrite>:
 8025b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ba2:	461f      	mov	r7, r3
 8025ba4:	898b      	ldrh	r3, [r1, #12]
 8025ba6:	05db      	lsls	r3, r3, #23
 8025ba8:	4605      	mov	r5, r0
 8025baa:	460c      	mov	r4, r1
 8025bac:	4616      	mov	r6, r2
 8025bae:	d505      	bpl.n	8025bbc <__swrite+0x1e>
 8025bb0:	2302      	movs	r3, #2
 8025bb2:	2200      	movs	r2, #0
 8025bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bb8:	f000 f868 	bl	8025c8c <_lseek_r>
 8025bbc:	89a3      	ldrh	r3, [r4, #12]
 8025bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025bc6:	81a3      	strh	r3, [r4, #12]
 8025bc8:	4632      	mov	r2, r6
 8025bca:	463b      	mov	r3, r7
 8025bcc:	4628      	mov	r0, r5
 8025bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025bd2:	f000 b817 	b.w	8025c04 <_write_r>

08025bd6 <__sseek>:
 8025bd6:	b510      	push	{r4, lr}
 8025bd8:	460c      	mov	r4, r1
 8025bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bde:	f000 f855 	bl	8025c8c <_lseek_r>
 8025be2:	1c43      	adds	r3, r0, #1
 8025be4:	89a3      	ldrh	r3, [r4, #12]
 8025be6:	bf15      	itete	ne
 8025be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8025bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025bf2:	81a3      	strheq	r3, [r4, #12]
 8025bf4:	bf18      	it	ne
 8025bf6:	81a3      	strhne	r3, [r4, #12]
 8025bf8:	bd10      	pop	{r4, pc}

08025bfa <__sclose>:
 8025bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025bfe:	f000 b813 	b.w	8025c28 <_close_r>
	...

08025c04 <_write_r>:
 8025c04:	b538      	push	{r3, r4, r5, lr}
 8025c06:	4c07      	ldr	r4, [pc, #28]	; (8025c24 <_write_r+0x20>)
 8025c08:	4605      	mov	r5, r0
 8025c0a:	4608      	mov	r0, r1
 8025c0c:	4611      	mov	r1, r2
 8025c0e:	2200      	movs	r2, #0
 8025c10:	6022      	str	r2, [r4, #0]
 8025c12:	461a      	mov	r2, r3
 8025c14:	f7db f9f3 	bl	8000ffe <_write>
 8025c18:	1c43      	adds	r3, r0, #1
 8025c1a:	d102      	bne.n	8025c22 <_write_r+0x1e>
 8025c1c:	6823      	ldr	r3, [r4, #0]
 8025c1e:	b103      	cbz	r3, 8025c22 <_write_r+0x1e>
 8025c20:	602b      	str	r3, [r5, #0]
 8025c22:	bd38      	pop	{r3, r4, r5, pc}
 8025c24:	20046880 	.word	0x20046880

08025c28 <_close_r>:
 8025c28:	b538      	push	{r3, r4, r5, lr}
 8025c2a:	4c06      	ldr	r4, [pc, #24]	; (8025c44 <_close_r+0x1c>)
 8025c2c:	2300      	movs	r3, #0
 8025c2e:	4605      	mov	r5, r0
 8025c30:	4608      	mov	r0, r1
 8025c32:	6023      	str	r3, [r4, #0]
 8025c34:	f7db fa0c 	bl	8001050 <_close>
 8025c38:	1c43      	adds	r3, r0, #1
 8025c3a:	d102      	bne.n	8025c42 <_close_r+0x1a>
 8025c3c:	6823      	ldr	r3, [r4, #0]
 8025c3e:	b103      	cbz	r3, 8025c42 <_close_r+0x1a>
 8025c40:	602b      	str	r3, [r5, #0]
 8025c42:	bd38      	pop	{r3, r4, r5, pc}
 8025c44:	20046880 	.word	0x20046880

08025c48 <_fstat_r>:
 8025c48:	b538      	push	{r3, r4, r5, lr}
 8025c4a:	4c07      	ldr	r4, [pc, #28]	; (8025c68 <_fstat_r+0x20>)
 8025c4c:	2300      	movs	r3, #0
 8025c4e:	4605      	mov	r5, r0
 8025c50:	4608      	mov	r0, r1
 8025c52:	4611      	mov	r1, r2
 8025c54:	6023      	str	r3, [r4, #0]
 8025c56:	f7db f9fe 	bl	8001056 <_fstat>
 8025c5a:	1c43      	adds	r3, r0, #1
 8025c5c:	d102      	bne.n	8025c64 <_fstat_r+0x1c>
 8025c5e:	6823      	ldr	r3, [r4, #0]
 8025c60:	b103      	cbz	r3, 8025c64 <_fstat_r+0x1c>
 8025c62:	602b      	str	r3, [r5, #0]
 8025c64:	bd38      	pop	{r3, r4, r5, pc}
 8025c66:	bf00      	nop
 8025c68:	20046880 	.word	0x20046880

08025c6c <_isatty_r>:
 8025c6c:	b538      	push	{r3, r4, r5, lr}
 8025c6e:	4c06      	ldr	r4, [pc, #24]	; (8025c88 <_isatty_r+0x1c>)
 8025c70:	2300      	movs	r3, #0
 8025c72:	4605      	mov	r5, r0
 8025c74:	4608      	mov	r0, r1
 8025c76:	6023      	str	r3, [r4, #0]
 8025c78:	f7db f9f2 	bl	8001060 <_isatty>
 8025c7c:	1c43      	adds	r3, r0, #1
 8025c7e:	d102      	bne.n	8025c86 <_isatty_r+0x1a>
 8025c80:	6823      	ldr	r3, [r4, #0]
 8025c82:	b103      	cbz	r3, 8025c86 <_isatty_r+0x1a>
 8025c84:	602b      	str	r3, [r5, #0]
 8025c86:	bd38      	pop	{r3, r4, r5, pc}
 8025c88:	20046880 	.word	0x20046880

08025c8c <_lseek_r>:
 8025c8c:	b538      	push	{r3, r4, r5, lr}
 8025c8e:	4c07      	ldr	r4, [pc, #28]	; (8025cac <_lseek_r+0x20>)
 8025c90:	4605      	mov	r5, r0
 8025c92:	4608      	mov	r0, r1
 8025c94:	4611      	mov	r1, r2
 8025c96:	2200      	movs	r2, #0
 8025c98:	6022      	str	r2, [r4, #0]
 8025c9a:	461a      	mov	r2, r3
 8025c9c:	f7db f9e2 	bl	8001064 <_lseek>
 8025ca0:	1c43      	adds	r3, r0, #1
 8025ca2:	d102      	bne.n	8025caa <_lseek_r+0x1e>
 8025ca4:	6823      	ldr	r3, [r4, #0]
 8025ca6:	b103      	cbz	r3, 8025caa <_lseek_r+0x1e>
 8025ca8:	602b      	str	r3, [r5, #0]
 8025caa:	bd38      	pop	{r3, r4, r5, pc}
 8025cac:	20046880 	.word	0x20046880

08025cb0 <_read_r>:
 8025cb0:	b538      	push	{r3, r4, r5, lr}
 8025cb2:	4c07      	ldr	r4, [pc, #28]	; (8025cd0 <_read_r+0x20>)
 8025cb4:	4605      	mov	r5, r0
 8025cb6:	4608      	mov	r0, r1
 8025cb8:	4611      	mov	r1, r2
 8025cba:	2200      	movs	r2, #0
 8025cbc:	6022      	str	r2, [r4, #0]
 8025cbe:	461a      	mov	r2, r3
 8025cc0:	f7db f98f 	bl	8000fe2 <_read>
 8025cc4:	1c43      	adds	r3, r0, #1
 8025cc6:	d102      	bne.n	8025cce <_read_r+0x1e>
 8025cc8:	6823      	ldr	r3, [r4, #0]
 8025cca:	b103      	cbz	r3, 8025cce <_read_r+0x1e>
 8025ccc:	602b      	str	r3, [r5, #0]
 8025cce:	bd38      	pop	{r3, r4, r5, pc}
 8025cd0:	20046880 	.word	0x20046880
 8025cd4:	00000000 	.word	0x00000000

08025cd8 <ceil>:
 8025cd8:	ec51 0b10 	vmov	r0, r1, d0
 8025cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ce0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025ce4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025ce8:	2e13      	cmp	r6, #19
 8025cea:	ee10 8a10 	vmov	r8, s0
 8025cee:	460c      	mov	r4, r1
 8025cf0:	ee10 5a10 	vmov	r5, s0
 8025cf4:	dc31      	bgt.n	8025d5a <ceil+0x82>
 8025cf6:	2e00      	cmp	r6, #0
 8025cf8:	da13      	bge.n	8025d22 <ceil+0x4a>
 8025cfa:	a335      	add	r3, pc, #212	; (adr r3, 8025dd0 <ceil+0xf8>)
 8025cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d00:	f7da fa94 	bl	800022c <__adddf3>
 8025d04:	2200      	movs	r2, #0
 8025d06:	2300      	movs	r3, #0
 8025d08:	f7da fed2 	bl	8000ab0 <__aeabi_dcmpgt>
 8025d0c:	b130      	cbz	r0, 8025d1c <ceil+0x44>
 8025d0e:	2c00      	cmp	r4, #0
 8025d10:	db56      	blt.n	8025dc0 <ceil+0xe8>
 8025d12:	ea54 0408 	orrs.w	r4, r4, r8
 8025d16:	d057      	beq.n	8025dc8 <ceil+0xf0>
 8025d18:	4c2f      	ldr	r4, [pc, #188]	; (8025dd8 <ceil+0x100>)
 8025d1a:	2500      	movs	r5, #0
 8025d1c:	4621      	mov	r1, r4
 8025d1e:	4628      	mov	r0, r5
 8025d20:	e025      	b.n	8025d6e <ceil+0x96>
 8025d22:	4f2e      	ldr	r7, [pc, #184]	; (8025ddc <ceil+0x104>)
 8025d24:	4137      	asrs	r7, r6
 8025d26:	ea01 0307 	and.w	r3, r1, r7
 8025d2a:	4303      	orrs	r3, r0
 8025d2c:	d01f      	beq.n	8025d6e <ceil+0x96>
 8025d2e:	a328      	add	r3, pc, #160	; (adr r3, 8025dd0 <ceil+0xf8>)
 8025d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d34:	f7da fa7a 	bl	800022c <__adddf3>
 8025d38:	2200      	movs	r2, #0
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	f7da feb8 	bl	8000ab0 <__aeabi_dcmpgt>
 8025d40:	2800      	cmp	r0, #0
 8025d42:	d0eb      	beq.n	8025d1c <ceil+0x44>
 8025d44:	2c00      	cmp	r4, #0
 8025d46:	bfc2      	ittt	gt
 8025d48:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8025d4c:	fa43 f606 	asrgt.w	r6, r3, r6
 8025d50:	19a4      	addgt	r4, r4, r6
 8025d52:	ea24 0407 	bic.w	r4, r4, r7
 8025d56:	2500      	movs	r5, #0
 8025d58:	e7e0      	b.n	8025d1c <ceil+0x44>
 8025d5a:	2e33      	cmp	r6, #51	; 0x33
 8025d5c:	dd0b      	ble.n	8025d76 <ceil+0x9e>
 8025d5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025d62:	d104      	bne.n	8025d6e <ceil+0x96>
 8025d64:	ee10 2a10 	vmov	r2, s0
 8025d68:	460b      	mov	r3, r1
 8025d6a:	f7da fa5f 	bl	800022c <__adddf3>
 8025d6e:	ec41 0b10 	vmov	d0, r0, r1
 8025d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025d76:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8025d7e:	fa23 f707 	lsr.w	r7, r3, r7
 8025d82:	4238      	tst	r0, r7
 8025d84:	d0f3      	beq.n	8025d6e <ceil+0x96>
 8025d86:	a312      	add	r3, pc, #72	; (adr r3, 8025dd0 <ceil+0xf8>)
 8025d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d8c:	f7da fa4e 	bl	800022c <__adddf3>
 8025d90:	2200      	movs	r2, #0
 8025d92:	2300      	movs	r3, #0
 8025d94:	f7da fe8c 	bl	8000ab0 <__aeabi_dcmpgt>
 8025d98:	2800      	cmp	r0, #0
 8025d9a:	d0bf      	beq.n	8025d1c <ceil+0x44>
 8025d9c:	2c00      	cmp	r4, #0
 8025d9e:	dd02      	ble.n	8025da6 <ceil+0xce>
 8025da0:	2e14      	cmp	r6, #20
 8025da2:	d103      	bne.n	8025dac <ceil+0xd4>
 8025da4:	3401      	adds	r4, #1
 8025da6:	ea25 0507 	bic.w	r5, r5, r7
 8025daa:	e7b7      	b.n	8025d1c <ceil+0x44>
 8025dac:	2301      	movs	r3, #1
 8025dae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025db2:	fa03 f606 	lsl.w	r6, r3, r6
 8025db6:	4435      	add	r5, r6
 8025db8:	45a8      	cmp	r8, r5
 8025dba:	bf88      	it	hi
 8025dbc:	18e4      	addhi	r4, r4, r3
 8025dbe:	e7f2      	b.n	8025da6 <ceil+0xce>
 8025dc0:	2500      	movs	r5, #0
 8025dc2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8025dc6:	e7a9      	b.n	8025d1c <ceil+0x44>
 8025dc8:	4625      	mov	r5, r4
 8025dca:	e7a7      	b.n	8025d1c <ceil+0x44>
 8025dcc:	f3af 8000 	nop.w
 8025dd0:	8800759c 	.word	0x8800759c
 8025dd4:	7e37e43c 	.word	0x7e37e43c
 8025dd8:	3ff00000 	.word	0x3ff00000
 8025ddc:	000fffff 	.word	0x000fffff

08025de0 <floor>:
 8025de0:	ec51 0b10 	vmov	r0, r1, d0
 8025de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025de8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025dec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025df0:	2e13      	cmp	r6, #19
 8025df2:	ee10 8a10 	vmov	r8, s0
 8025df6:	460c      	mov	r4, r1
 8025df8:	ee10 5a10 	vmov	r5, s0
 8025dfc:	dc35      	bgt.n	8025e6a <floor+0x8a>
 8025dfe:	2e00      	cmp	r6, #0
 8025e00:	da17      	bge.n	8025e32 <floor+0x52>
 8025e02:	a335      	add	r3, pc, #212	; (adr r3, 8025ed8 <floor+0xf8>)
 8025e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e08:	f7da fa10 	bl	800022c <__adddf3>
 8025e0c:	2200      	movs	r2, #0
 8025e0e:	2300      	movs	r3, #0
 8025e10:	f7da fe4e 	bl	8000ab0 <__aeabi_dcmpgt>
 8025e14:	b150      	cbz	r0, 8025e2c <floor+0x4c>
 8025e16:	2c00      	cmp	r4, #0
 8025e18:	da5a      	bge.n	8025ed0 <floor+0xf0>
 8025e1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025e1e:	ea53 0308 	orrs.w	r3, r3, r8
 8025e22:	4b2f      	ldr	r3, [pc, #188]	; (8025ee0 <floor+0x100>)
 8025e24:	f04f 0500 	mov.w	r5, #0
 8025e28:	bf18      	it	ne
 8025e2a:	461c      	movne	r4, r3
 8025e2c:	4621      	mov	r1, r4
 8025e2e:	4628      	mov	r0, r5
 8025e30:	e025      	b.n	8025e7e <floor+0x9e>
 8025e32:	4f2c      	ldr	r7, [pc, #176]	; (8025ee4 <floor+0x104>)
 8025e34:	4137      	asrs	r7, r6
 8025e36:	ea01 0307 	and.w	r3, r1, r7
 8025e3a:	4303      	orrs	r3, r0
 8025e3c:	d01f      	beq.n	8025e7e <floor+0x9e>
 8025e3e:	a326      	add	r3, pc, #152	; (adr r3, 8025ed8 <floor+0xf8>)
 8025e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e44:	f7da f9f2 	bl	800022c <__adddf3>
 8025e48:	2200      	movs	r2, #0
 8025e4a:	2300      	movs	r3, #0
 8025e4c:	f7da fe30 	bl	8000ab0 <__aeabi_dcmpgt>
 8025e50:	2800      	cmp	r0, #0
 8025e52:	d0eb      	beq.n	8025e2c <floor+0x4c>
 8025e54:	2c00      	cmp	r4, #0
 8025e56:	bfbe      	ittt	lt
 8025e58:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025e5c:	fa43 f606 	asrlt.w	r6, r3, r6
 8025e60:	19a4      	addlt	r4, r4, r6
 8025e62:	ea24 0407 	bic.w	r4, r4, r7
 8025e66:	2500      	movs	r5, #0
 8025e68:	e7e0      	b.n	8025e2c <floor+0x4c>
 8025e6a:	2e33      	cmp	r6, #51	; 0x33
 8025e6c:	dd0b      	ble.n	8025e86 <floor+0xa6>
 8025e6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025e72:	d104      	bne.n	8025e7e <floor+0x9e>
 8025e74:	ee10 2a10 	vmov	r2, s0
 8025e78:	460b      	mov	r3, r1
 8025e7a:	f7da f9d7 	bl	800022c <__adddf3>
 8025e7e:	ec41 0b10 	vmov	d0, r0, r1
 8025e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e86:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8025e8e:	fa23 f707 	lsr.w	r7, r3, r7
 8025e92:	4238      	tst	r0, r7
 8025e94:	d0f3      	beq.n	8025e7e <floor+0x9e>
 8025e96:	a310      	add	r3, pc, #64	; (adr r3, 8025ed8 <floor+0xf8>)
 8025e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e9c:	f7da f9c6 	bl	800022c <__adddf3>
 8025ea0:	2200      	movs	r2, #0
 8025ea2:	2300      	movs	r3, #0
 8025ea4:	f7da fe04 	bl	8000ab0 <__aeabi_dcmpgt>
 8025ea8:	2800      	cmp	r0, #0
 8025eaa:	d0bf      	beq.n	8025e2c <floor+0x4c>
 8025eac:	2c00      	cmp	r4, #0
 8025eae:	da02      	bge.n	8025eb6 <floor+0xd6>
 8025eb0:	2e14      	cmp	r6, #20
 8025eb2:	d103      	bne.n	8025ebc <floor+0xdc>
 8025eb4:	3401      	adds	r4, #1
 8025eb6:	ea25 0507 	bic.w	r5, r5, r7
 8025eba:	e7b7      	b.n	8025e2c <floor+0x4c>
 8025ebc:	2301      	movs	r3, #1
 8025ebe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025ec2:	fa03 f606 	lsl.w	r6, r3, r6
 8025ec6:	4435      	add	r5, r6
 8025ec8:	45a8      	cmp	r8, r5
 8025eca:	bf88      	it	hi
 8025ecc:	18e4      	addhi	r4, r4, r3
 8025ece:	e7f2      	b.n	8025eb6 <floor+0xd6>
 8025ed0:	2500      	movs	r5, #0
 8025ed2:	462c      	mov	r4, r5
 8025ed4:	e7aa      	b.n	8025e2c <floor+0x4c>
 8025ed6:	bf00      	nop
 8025ed8:	8800759c 	.word	0x8800759c
 8025edc:	7e37e43c 	.word	0x7e37e43c
 8025ee0:	bff00000 	.word	0xbff00000
 8025ee4:	000fffff 	.word	0x000fffff

08025ee8 <sin>:
 8025ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025eea:	ec51 0b10 	vmov	r0, r1, d0
 8025eee:	4a20      	ldr	r2, [pc, #128]	; (8025f70 <sin+0x88>)
 8025ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025ef4:	4293      	cmp	r3, r2
 8025ef6:	dc07      	bgt.n	8025f08 <sin+0x20>
 8025ef8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8025f68 <sin+0x80>
 8025efc:	2000      	movs	r0, #0
 8025efe:	f000 ff73 	bl	8026de8 <__kernel_sin>
 8025f02:	ec51 0b10 	vmov	r0, r1, d0
 8025f06:	e007      	b.n	8025f18 <sin+0x30>
 8025f08:	4a1a      	ldr	r2, [pc, #104]	; (8025f74 <sin+0x8c>)
 8025f0a:	4293      	cmp	r3, r2
 8025f0c:	dd09      	ble.n	8025f22 <sin+0x3a>
 8025f0e:	ee10 2a10 	vmov	r2, s0
 8025f12:	460b      	mov	r3, r1
 8025f14:	f7da f988 	bl	8000228 <__aeabi_dsub>
 8025f18:	ec41 0b10 	vmov	d0, r0, r1
 8025f1c:	b005      	add	sp, #20
 8025f1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8025f22:	4668      	mov	r0, sp
 8025f24:	f000 f884 	bl	8026030 <__ieee754_rem_pio2>
 8025f28:	f000 0003 	and.w	r0, r0, #3
 8025f2c:	2801      	cmp	r0, #1
 8025f2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8025f32:	ed9d 0b00 	vldr	d0, [sp]
 8025f36:	d004      	beq.n	8025f42 <sin+0x5a>
 8025f38:	2802      	cmp	r0, #2
 8025f3a:	d005      	beq.n	8025f48 <sin+0x60>
 8025f3c:	b970      	cbnz	r0, 8025f5c <sin+0x74>
 8025f3e:	2001      	movs	r0, #1
 8025f40:	e7dd      	b.n	8025efe <sin+0x16>
 8025f42:	f000 fb19 	bl	8026578 <__kernel_cos>
 8025f46:	e7dc      	b.n	8025f02 <sin+0x1a>
 8025f48:	2001      	movs	r0, #1
 8025f4a:	f000 ff4d 	bl	8026de8 <__kernel_sin>
 8025f4e:	ec53 2b10 	vmov	r2, r3, d0
 8025f52:	ee10 0a10 	vmov	r0, s0
 8025f56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8025f5a:	e7dd      	b.n	8025f18 <sin+0x30>
 8025f5c:	f000 fb0c 	bl	8026578 <__kernel_cos>
 8025f60:	e7f5      	b.n	8025f4e <sin+0x66>
 8025f62:	bf00      	nop
 8025f64:	f3af 8000 	nop.w
	...
 8025f70:	3fe921fb 	.word	0x3fe921fb
 8025f74:	7fefffff 	.word	0x7fefffff

08025f78 <sqrt>:
 8025f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f7c:	ed2d 8b02 	vpush	{d8}
 8025f80:	b08b      	sub	sp, #44	; 0x2c
 8025f82:	ec55 4b10 	vmov	r4, r5, d0
 8025f86:	f000 fa45 	bl	8026414 <__ieee754_sqrt>
 8025f8a:	4b26      	ldr	r3, [pc, #152]	; (8026024 <sqrt+0xac>)
 8025f8c:	eeb0 8a40 	vmov.f32	s16, s0
 8025f90:	eef0 8a60 	vmov.f32	s17, s1
 8025f94:	f993 6000 	ldrsb.w	r6, [r3]
 8025f98:	1c73      	adds	r3, r6, #1
 8025f9a:	d02a      	beq.n	8025ff2 <sqrt+0x7a>
 8025f9c:	4622      	mov	r2, r4
 8025f9e:	462b      	mov	r3, r5
 8025fa0:	4620      	mov	r0, r4
 8025fa2:	4629      	mov	r1, r5
 8025fa4:	f7da fd8e 	bl	8000ac4 <__aeabi_dcmpun>
 8025fa8:	4607      	mov	r7, r0
 8025faa:	bb10      	cbnz	r0, 8025ff2 <sqrt+0x7a>
 8025fac:	f04f 0800 	mov.w	r8, #0
 8025fb0:	f04f 0900 	mov.w	r9, #0
 8025fb4:	4642      	mov	r2, r8
 8025fb6:	464b      	mov	r3, r9
 8025fb8:	4620      	mov	r0, r4
 8025fba:	4629      	mov	r1, r5
 8025fbc:	f7da fd5a 	bl	8000a74 <__aeabi_dcmplt>
 8025fc0:	b1b8      	cbz	r0, 8025ff2 <sqrt+0x7a>
 8025fc2:	2301      	movs	r3, #1
 8025fc4:	9300      	str	r3, [sp, #0]
 8025fc6:	4b18      	ldr	r3, [pc, #96]	; (8026028 <sqrt+0xb0>)
 8025fc8:	9301      	str	r3, [sp, #4]
 8025fca:	9708      	str	r7, [sp, #32]
 8025fcc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025fd0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025fd4:	b9b6      	cbnz	r6, 8026004 <sqrt+0x8c>
 8025fd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8025fda:	4668      	mov	r0, sp
 8025fdc:	f000 ffc5 	bl	8026f6a <matherr>
 8025fe0:	b1d0      	cbz	r0, 8026018 <sqrt+0xa0>
 8025fe2:	9b08      	ldr	r3, [sp, #32]
 8025fe4:	b11b      	cbz	r3, 8025fee <sqrt+0x76>
 8025fe6:	f7ff f991 	bl	802530c <__errno>
 8025fea:	9b08      	ldr	r3, [sp, #32]
 8025fec:	6003      	str	r3, [r0, #0]
 8025fee:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8025ff6:	eef0 0a68 	vmov.f32	s1, s17
 8025ffa:	b00b      	add	sp, #44	; 0x2c
 8025ffc:	ecbd 8b02 	vpop	{d8}
 8026000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026004:	4642      	mov	r2, r8
 8026006:	464b      	mov	r3, r9
 8026008:	4640      	mov	r0, r8
 802600a:	4649      	mov	r1, r9
 802600c:	f7da fbea 	bl	80007e4 <__aeabi_ddiv>
 8026010:	2e02      	cmp	r6, #2
 8026012:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026016:	d1e0      	bne.n	8025fda <sqrt+0x62>
 8026018:	f7ff f978 	bl	802530c <__errno>
 802601c:	2321      	movs	r3, #33	; 0x21
 802601e:	6003      	str	r3, [r0, #0]
 8026020:	e7df      	b.n	8025fe2 <sqrt+0x6a>
 8026022:	bf00      	nop
 8026024:	2000015c 	.word	0x2000015c
 8026028:	08035210 	.word	0x08035210
 802602c:	00000000 	.word	0x00000000

08026030 <__ieee754_rem_pio2>:
 8026030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026034:	ec57 6b10 	vmov	r6, r7, d0
 8026038:	4bc3      	ldr	r3, [pc, #780]	; (8026348 <__ieee754_rem_pio2+0x318>)
 802603a:	b08d      	sub	sp, #52	; 0x34
 802603c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8026040:	4598      	cmp	r8, r3
 8026042:	4604      	mov	r4, r0
 8026044:	9704      	str	r7, [sp, #16]
 8026046:	dc07      	bgt.n	8026058 <__ieee754_rem_pio2+0x28>
 8026048:	2200      	movs	r2, #0
 802604a:	2300      	movs	r3, #0
 802604c:	ed84 0b00 	vstr	d0, [r4]
 8026050:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8026054:	2500      	movs	r5, #0
 8026056:	e027      	b.n	80260a8 <__ieee754_rem_pio2+0x78>
 8026058:	4bbc      	ldr	r3, [pc, #752]	; (802634c <__ieee754_rem_pio2+0x31c>)
 802605a:	4598      	cmp	r8, r3
 802605c:	dc75      	bgt.n	802614a <__ieee754_rem_pio2+0x11a>
 802605e:	9b04      	ldr	r3, [sp, #16]
 8026060:	4dbb      	ldr	r5, [pc, #748]	; (8026350 <__ieee754_rem_pio2+0x320>)
 8026062:	2b00      	cmp	r3, #0
 8026064:	ee10 0a10 	vmov	r0, s0
 8026068:	a3a9      	add	r3, pc, #676	; (adr r3, 8026310 <__ieee754_rem_pio2+0x2e0>)
 802606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802606e:	4639      	mov	r1, r7
 8026070:	dd36      	ble.n	80260e0 <__ieee754_rem_pio2+0xb0>
 8026072:	f7da f8d9 	bl	8000228 <__aeabi_dsub>
 8026076:	45a8      	cmp	r8, r5
 8026078:	4606      	mov	r6, r0
 802607a:	460f      	mov	r7, r1
 802607c:	d018      	beq.n	80260b0 <__ieee754_rem_pio2+0x80>
 802607e:	a3a6      	add	r3, pc, #664	; (adr r3, 8026318 <__ieee754_rem_pio2+0x2e8>)
 8026080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026084:	f7da f8d0 	bl	8000228 <__aeabi_dsub>
 8026088:	4602      	mov	r2, r0
 802608a:	460b      	mov	r3, r1
 802608c:	e9c4 2300 	strd	r2, r3, [r4]
 8026090:	4630      	mov	r0, r6
 8026092:	4639      	mov	r1, r7
 8026094:	f7da f8c8 	bl	8000228 <__aeabi_dsub>
 8026098:	a39f      	add	r3, pc, #636	; (adr r3, 8026318 <__ieee754_rem_pio2+0x2e8>)
 802609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802609e:	f7da f8c3 	bl	8000228 <__aeabi_dsub>
 80260a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80260a6:	2501      	movs	r5, #1
 80260a8:	4628      	mov	r0, r5
 80260aa:	b00d      	add	sp, #52	; 0x34
 80260ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260b0:	a39b      	add	r3, pc, #620	; (adr r3, 8026320 <__ieee754_rem_pio2+0x2f0>)
 80260b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260b6:	f7da f8b7 	bl	8000228 <__aeabi_dsub>
 80260ba:	a39b      	add	r3, pc, #620	; (adr r3, 8026328 <__ieee754_rem_pio2+0x2f8>)
 80260bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260c0:	4606      	mov	r6, r0
 80260c2:	460f      	mov	r7, r1
 80260c4:	f7da f8b0 	bl	8000228 <__aeabi_dsub>
 80260c8:	4602      	mov	r2, r0
 80260ca:	460b      	mov	r3, r1
 80260cc:	e9c4 2300 	strd	r2, r3, [r4]
 80260d0:	4630      	mov	r0, r6
 80260d2:	4639      	mov	r1, r7
 80260d4:	f7da f8a8 	bl	8000228 <__aeabi_dsub>
 80260d8:	a393      	add	r3, pc, #588	; (adr r3, 8026328 <__ieee754_rem_pio2+0x2f8>)
 80260da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260de:	e7de      	b.n	802609e <__ieee754_rem_pio2+0x6e>
 80260e0:	f7da f8a4 	bl	800022c <__adddf3>
 80260e4:	45a8      	cmp	r8, r5
 80260e6:	4606      	mov	r6, r0
 80260e8:	460f      	mov	r7, r1
 80260ea:	d016      	beq.n	802611a <__ieee754_rem_pio2+0xea>
 80260ec:	a38a      	add	r3, pc, #552	; (adr r3, 8026318 <__ieee754_rem_pio2+0x2e8>)
 80260ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260f2:	f7da f89b 	bl	800022c <__adddf3>
 80260f6:	4602      	mov	r2, r0
 80260f8:	460b      	mov	r3, r1
 80260fa:	e9c4 2300 	strd	r2, r3, [r4]
 80260fe:	4630      	mov	r0, r6
 8026100:	4639      	mov	r1, r7
 8026102:	f7da f891 	bl	8000228 <__aeabi_dsub>
 8026106:	a384      	add	r3, pc, #528	; (adr r3, 8026318 <__ieee754_rem_pio2+0x2e8>)
 8026108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802610c:	f7da f88e 	bl	800022c <__adddf3>
 8026110:	f04f 35ff 	mov.w	r5, #4294967295
 8026114:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8026118:	e7c6      	b.n	80260a8 <__ieee754_rem_pio2+0x78>
 802611a:	a381      	add	r3, pc, #516	; (adr r3, 8026320 <__ieee754_rem_pio2+0x2f0>)
 802611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026120:	f7da f884 	bl	800022c <__adddf3>
 8026124:	a380      	add	r3, pc, #512	; (adr r3, 8026328 <__ieee754_rem_pio2+0x2f8>)
 8026126:	e9d3 2300 	ldrd	r2, r3, [r3]
 802612a:	4606      	mov	r6, r0
 802612c:	460f      	mov	r7, r1
 802612e:	f7da f87d 	bl	800022c <__adddf3>
 8026132:	4602      	mov	r2, r0
 8026134:	460b      	mov	r3, r1
 8026136:	e9c4 2300 	strd	r2, r3, [r4]
 802613a:	4630      	mov	r0, r6
 802613c:	4639      	mov	r1, r7
 802613e:	f7da f873 	bl	8000228 <__aeabi_dsub>
 8026142:	a379      	add	r3, pc, #484	; (adr r3, 8026328 <__ieee754_rem_pio2+0x2f8>)
 8026144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026148:	e7e0      	b.n	802610c <__ieee754_rem_pio2+0xdc>
 802614a:	4b82      	ldr	r3, [pc, #520]	; (8026354 <__ieee754_rem_pio2+0x324>)
 802614c:	4598      	cmp	r8, r3
 802614e:	f300 80d0 	bgt.w	80262f2 <__ieee754_rem_pio2+0x2c2>
 8026152:	f000 ff03 	bl	8026f5c <fabs>
 8026156:	ec57 6b10 	vmov	r6, r7, d0
 802615a:	ee10 0a10 	vmov	r0, s0
 802615e:	a374      	add	r3, pc, #464	; (adr r3, 8026330 <__ieee754_rem_pio2+0x300>)
 8026160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026164:	4639      	mov	r1, r7
 8026166:	f7da fa13 	bl	8000590 <__aeabi_dmul>
 802616a:	2200      	movs	r2, #0
 802616c:	4b7a      	ldr	r3, [pc, #488]	; (8026358 <__ieee754_rem_pio2+0x328>)
 802616e:	f7da f85d 	bl	800022c <__adddf3>
 8026172:	f7da fcbd 	bl	8000af0 <__aeabi_d2iz>
 8026176:	4605      	mov	r5, r0
 8026178:	f7da f9a4 	bl	80004c4 <__aeabi_i2d>
 802617c:	a364      	add	r3, pc, #400	; (adr r3, 8026310 <__ieee754_rem_pio2+0x2e0>)
 802617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026186:	f7da fa03 	bl	8000590 <__aeabi_dmul>
 802618a:	4602      	mov	r2, r0
 802618c:	460b      	mov	r3, r1
 802618e:	4630      	mov	r0, r6
 8026190:	4639      	mov	r1, r7
 8026192:	f7da f849 	bl	8000228 <__aeabi_dsub>
 8026196:	a360      	add	r3, pc, #384	; (adr r3, 8026318 <__ieee754_rem_pio2+0x2e8>)
 8026198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802619c:	4682      	mov	sl, r0
 802619e:	468b      	mov	fp, r1
 80261a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80261a4:	f7da f9f4 	bl	8000590 <__aeabi_dmul>
 80261a8:	2d1f      	cmp	r5, #31
 80261aa:	4606      	mov	r6, r0
 80261ac:	460f      	mov	r7, r1
 80261ae:	dc2a      	bgt.n	8026206 <__ieee754_rem_pio2+0x1d6>
 80261b0:	1e6a      	subs	r2, r5, #1
 80261b2:	4b6a      	ldr	r3, [pc, #424]	; (802635c <__ieee754_rem_pio2+0x32c>)
 80261b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80261b8:	4598      	cmp	r8, r3
 80261ba:	d024      	beq.n	8026206 <__ieee754_rem_pio2+0x1d6>
 80261bc:	4632      	mov	r2, r6
 80261be:	463b      	mov	r3, r7
 80261c0:	4650      	mov	r0, sl
 80261c2:	4659      	mov	r1, fp
 80261c4:	f7da f830 	bl	8000228 <__aeabi_dsub>
 80261c8:	e9c4 0100 	strd	r0, r1, [r4]
 80261cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80261d0:	4650      	mov	r0, sl
 80261d2:	4642      	mov	r2, r8
 80261d4:	464b      	mov	r3, r9
 80261d6:	4659      	mov	r1, fp
 80261d8:	f7da f826 	bl	8000228 <__aeabi_dsub>
 80261dc:	463b      	mov	r3, r7
 80261de:	4632      	mov	r2, r6
 80261e0:	f7da f822 	bl	8000228 <__aeabi_dsub>
 80261e4:	9b04      	ldr	r3, [sp, #16]
 80261e6:	2b00      	cmp	r3, #0
 80261e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80261ec:	f6bf af5c 	bge.w	80260a8 <__ieee754_rem_pio2+0x78>
 80261f0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80261f4:	6063      	str	r3, [r4, #4]
 80261f6:	f8c4 8000 	str.w	r8, [r4]
 80261fa:	60a0      	str	r0, [r4, #8]
 80261fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026200:	60e3      	str	r3, [r4, #12]
 8026202:	426d      	negs	r5, r5
 8026204:	e750      	b.n	80260a8 <__ieee754_rem_pio2+0x78>
 8026206:	4632      	mov	r2, r6
 8026208:	463b      	mov	r3, r7
 802620a:	4650      	mov	r0, sl
 802620c:	4659      	mov	r1, fp
 802620e:	f7da f80b 	bl	8000228 <__aeabi_dsub>
 8026212:	ea4f 5228 	mov.w	r2, r8, asr #20
 8026216:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802621a:	1ad3      	subs	r3, r2, r3
 802621c:	2b10      	cmp	r3, #16
 802621e:	e9c4 0100 	strd	r0, r1, [r4]
 8026222:	9205      	str	r2, [sp, #20]
 8026224:	ddd2      	ble.n	80261cc <__ieee754_rem_pio2+0x19c>
 8026226:	a33e      	add	r3, pc, #248	; (adr r3, 8026320 <__ieee754_rem_pio2+0x2f0>)
 8026228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802622c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026230:	f7da f9ae 	bl	8000590 <__aeabi_dmul>
 8026234:	4606      	mov	r6, r0
 8026236:	460f      	mov	r7, r1
 8026238:	4602      	mov	r2, r0
 802623a:	460b      	mov	r3, r1
 802623c:	4650      	mov	r0, sl
 802623e:	4659      	mov	r1, fp
 8026240:	f7d9 fff2 	bl	8000228 <__aeabi_dsub>
 8026244:	4602      	mov	r2, r0
 8026246:	460b      	mov	r3, r1
 8026248:	4680      	mov	r8, r0
 802624a:	4689      	mov	r9, r1
 802624c:	4650      	mov	r0, sl
 802624e:	4659      	mov	r1, fp
 8026250:	f7d9 ffea 	bl	8000228 <__aeabi_dsub>
 8026254:	4632      	mov	r2, r6
 8026256:	463b      	mov	r3, r7
 8026258:	f7d9 ffe6 	bl	8000228 <__aeabi_dsub>
 802625c:	a332      	add	r3, pc, #200	; (adr r3, 8026328 <__ieee754_rem_pio2+0x2f8>)
 802625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026262:	4606      	mov	r6, r0
 8026264:	460f      	mov	r7, r1
 8026266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802626a:	f7da f991 	bl	8000590 <__aeabi_dmul>
 802626e:	4632      	mov	r2, r6
 8026270:	463b      	mov	r3, r7
 8026272:	f7d9 ffd9 	bl	8000228 <__aeabi_dsub>
 8026276:	4602      	mov	r2, r0
 8026278:	460b      	mov	r3, r1
 802627a:	4606      	mov	r6, r0
 802627c:	460f      	mov	r7, r1
 802627e:	4640      	mov	r0, r8
 8026280:	4649      	mov	r1, r9
 8026282:	f7d9 ffd1 	bl	8000228 <__aeabi_dsub>
 8026286:	9a05      	ldr	r2, [sp, #20]
 8026288:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802628c:	1ad3      	subs	r3, r2, r3
 802628e:	2b31      	cmp	r3, #49	; 0x31
 8026290:	e9c4 0100 	strd	r0, r1, [r4]
 8026294:	dd2a      	ble.n	80262ec <__ieee754_rem_pio2+0x2bc>
 8026296:	a328      	add	r3, pc, #160	; (adr r3, 8026338 <__ieee754_rem_pio2+0x308>)
 8026298:	e9d3 2300 	ldrd	r2, r3, [r3]
 802629c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80262a0:	f7da f976 	bl	8000590 <__aeabi_dmul>
 80262a4:	4606      	mov	r6, r0
 80262a6:	460f      	mov	r7, r1
 80262a8:	4602      	mov	r2, r0
 80262aa:	460b      	mov	r3, r1
 80262ac:	4640      	mov	r0, r8
 80262ae:	4649      	mov	r1, r9
 80262b0:	f7d9 ffba 	bl	8000228 <__aeabi_dsub>
 80262b4:	4602      	mov	r2, r0
 80262b6:	460b      	mov	r3, r1
 80262b8:	4682      	mov	sl, r0
 80262ba:	468b      	mov	fp, r1
 80262bc:	4640      	mov	r0, r8
 80262be:	4649      	mov	r1, r9
 80262c0:	f7d9 ffb2 	bl	8000228 <__aeabi_dsub>
 80262c4:	4632      	mov	r2, r6
 80262c6:	463b      	mov	r3, r7
 80262c8:	f7d9 ffae 	bl	8000228 <__aeabi_dsub>
 80262cc:	a31c      	add	r3, pc, #112	; (adr r3, 8026340 <__ieee754_rem_pio2+0x310>)
 80262ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262d2:	4606      	mov	r6, r0
 80262d4:	460f      	mov	r7, r1
 80262d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80262da:	f7da f959 	bl	8000590 <__aeabi_dmul>
 80262de:	4632      	mov	r2, r6
 80262e0:	463b      	mov	r3, r7
 80262e2:	f7d9 ffa1 	bl	8000228 <__aeabi_dsub>
 80262e6:	4606      	mov	r6, r0
 80262e8:	460f      	mov	r7, r1
 80262ea:	e767      	b.n	80261bc <__ieee754_rem_pio2+0x18c>
 80262ec:	46c2      	mov	sl, r8
 80262ee:	46cb      	mov	fp, r9
 80262f0:	e76c      	b.n	80261cc <__ieee754_rem_pio2+0x19c>
 80262f2:	4b1b      	ldr	r3, [pc, #108]	; (8026360 <__ieee754_rem_pio2+0x330>)
 80262f4:	4598      	cmp	r8, r3
 80262f6:	dd35      	ble.n	8026364 <__ieee754_rem_pio2+0x334>
 80262f8:	ee10 2a10 	vmov	r2, s0
 80262fc:	463b      	mov	r3, r7
 80262fe:	4630      	mov	r0, r6
 8026300:	4639      	mov	r1, r7
 8026302:	f7d9 ff91 	bl	8000228 <__aeabi_dsub>
 8026306:	e9c4 0102 	strd	r0, r1, [r4, #8]
 802630a:	e9c4 0100 	strd	r0, r1, [r4]
 802630e:	e6a1      	b.n	8026054 <__ieee754_rem_pio2+0x24>
 8026310:	54400000 	.word	0x54400000
 8026314:	3ff921fb 	.word	0x3ff921fb
 8026318:	1a626331 	.word	0x1a626331
 802631c:	3dd0b461 	.word	0x3dd0b461
 8026320:	1a600000 	.word	0x1a600000
 8026324:	3dd0b461 	.word	0x3dd0b461
 8026328:	2e037073 	.word	0x2e037073
 802632c:	3ba3198a 	.word	0x3ba3198a
 8026330:	6dc9c883 	.word	0x6dc9c883
 8026334:	3fe45f30 	.word	0x3fe45f30
 8026338:	2e000000 	.word	0x2e000000
 802633c:	3ba3198a 	.word	0x3ba3198a
 8026340:	252049c1 	.word	0x252049c1
 8026344:	397b839a 	.word	0x397b839a
 8026348:	3fe921fb 	.word	0x3fe921fb
 802634c:	4002d97b 	.word	0x4002d97b
 8026350:	3ff921fb 	.word	0x3ff921fb
 8026354:	413921fb 	.word	0x413921fb
 8026358:	3fe00000 	.word	0x3fe00000
 802635c:	08035218 	.word	0x08035218
 8026360:	7fefffff 	.word	0x7fefffff
 8026364:	ea4f 5528 	mov.w	r5, r8, asr #20
 8026368:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 802636c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8026370:	4630      	mov	r0, r6
 8026372:	460f      	mov	r7, r1
 8026374:	f7da fbbc 	bl	8000af0 <__aeabi_d2iz>
 8026378:	f7da f8a4 	bl	80004c4 <__aeabi_i2d>
 802637c:	4602      	mov	r2, r0
 802637e:	460b      	mov	r3, r1
 8026380:	4630      	mov	r0, r6
 8026382:	4639      	mov	r1, r7
 8026384:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8026388:	f7d9 ff4e 	bl	8000228 <__aeabi_dsub>
 802638c:	2200      	movs	r2, #0
 802638e:	4b1f      	ldr	r3, [pc, #124]	; (802640c <__ieee754_rem_pio2+0x3dc>)
 8026390:	f7da f8fe 	bl	8000590 <__aeabi_dmul>
 8026394:	460f      	mov	r7, r1
 8026396:	4606      	mov	r6, r0
 8026398:	f7da fbaa 	bl	8000af0 <__aeabi_d2iz>
 802639c:	f7da f892 	bl	80004c4 <__aeabi_i2d>
 80263a0:	4602      	mov	r2, r0
 80263a2:	460b      	mov	r3, r1
 80263a4:	4630      	mov	r0, r6
 80263a6:	4639      	mov	r1, r7
 80263a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80263ac:	f7d9 ff3c 	bl	8000228 <__aeabi_dsub>
 80263b0:	2200      	movs	r2, #0
 80263b2:	4b16      	ldr	r3, [pc, #88]	; (802640c <__ieee754_rem_pio2+0x3dc>)
 80263b4:	f7da f8ec 	bl	8000590 <__aeabi_dmul>
 80263b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80263bc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80263c0:	f04f 0803 	mov.w	r8, #3
 80263c4:	2600      	movs	r6, #0
 80263c6:	2700      	movs	r7, #0
 80263c8:	4632      	mov	r2, r6
 80263ca:	463b      	mov	r3, r7
 80263cc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80263d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80263d4:	f7da fb44 	bl	8000a60 <__aeabi_dcmpeq>
 80263d8:	b9b0      	cbnz	r0, 8026408 <__ieee754_rem_pio2+0x3d8>
 80263da:	4b0d      	ldr	r3, [pc, #52]	; (8026410 <__ieee754_rem_pio2+0x3e0>)
 80263dc:	9301      	str	r3, [sp, #4]
 80263de:	2302      	movs	r3, #2
 80263e0:	9300      	str	r3, [sp, #0]
 80263e2:	462a      	mov	r2, r5
 80263e4:	4643      	mov	r3, r8
 80263e6:	4621      	mov	r1, r4
 80263e8:	a806      	add	r0, sp, #24
 80263ea:	f000 f9ad 	bl	8026748 <__kernel_rem_pio2>
 80263ee:	9b04      	ldr	r3, [sp, #16]
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	4605      	mov	r5, r0
 80263f4:	f6bf ae58 	bge.w	80260a8 <__ieee754_rem_pio2+0x78>
 80263f8:	6863      	ldr	r3, [r4, #4]
 80263fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80263fe:	6063      	str	r3, [r4, #4]
 8026400:	68e3      	ldr	r3, [r4, #12]
 8026402:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026406:	e6fb      	b.n	8026200 <__ieee754_rem_pio2+0x1d0>
 8026408:	46d0      	mov	r8, sl
 802640a:	e7dd      	b.n	80263c8 <__ieee754_rem_pio2+0x398>
 802640c:	41700000 	.word	0x41700000
 8026410:	08035298 	.word	0x08035298

08026414 <__ieee754_sqrt>:
 8026414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026418:	ec55 4b10 	vmov	r4, r5, d0
 802641c:	4e54      	ldr	r6, [pc, #336]	; (8026570 <__ieee754_sqrt+0x15c>)
 802641e:	43ae      	bics	r6, r5
 8026420:	ee10 0a10 	vmov	r0, s0
 8026424:	462b      	mov	r3, r5
 8026426:	462a      	mov	r2, r5
 8026428:	4621      	mov	r1, r4
 802642a:	d113      	bne.n	8026454 <__ieee754_sqrt+0x40>
 802642c:	ee10 2a10 	vmov	r2, s0
 8026430:	462b      	mov	r3, r5
 8026432:	ee10 0a10 	vmov	r0, s0
 8026436:	4629      	mov	r1, r5
 8026438:	f7da f8aa 	bl	8000590 <__aeabi_dmul>
 802643c:	4602      	mov	r2, r0
 802643e:	460b      	mov	r3, r1
 8026440:	4620      	mov	r0, r4
 8026442:	4629      	mov	r1, r5
 8026444:	f7d9 fef2 	bl	800022c <__adddf3>
 8026448:	4604      	mov	r4, r0
 802644a:	460d      	mov	r5, r1
 802644c:	ec45 4b10 	vmov	d0, r4, r5
 8026450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026454:	2d00      	cmp	r5, #0
 8026456:	dc10      	bgt.n	802647a <__ieee754_sqrt+0x66>
 8026458:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802645c:	4330      	orrs	r0, r6
 802645e:	d0f5      	beq.n	802644c <__ieee754_sqrt+0x38>
 8026460:	b15d      	cbz	r5, 802647a <__ieee754_sqrt+0x66>
 8026462:	ee10 2a10 	vmov	r2, s0
 8026466:	462b      	mov	r3, r5
 8026468:	4620      	mov	r0, r4
 802646a:	4629      	mov	r1, r5
 802646c:	f7d9 fedc 	bl	8000228 <__aeabi_dsub>
 8026470:	4602      	mov	r2, r0
 8026472:	460b      	mov	r3, r1
 8026474:	f7da f9b6 	bl	80007e4 <__aeabi_ddiv>
 8026478:	e7e6      	b.n	8026448 <__ieee754_sqrt+0x34>
 802647a:	151b      	asrs	r3, r3, #20
 802647c:	d10c      	bne.n	8026498 <__ieee754_sqrt+0x84>
 802647e:	2a00      	cmp	r2, #0
 8026480:	d06d      	beq.n	802655e <__ieee754_sqrt+0x14a>
 8026482:	2000      	movs	r0, #0
 8026484:	02d6      	lsls	r6, r2, #11
 8026486:	d56e      	bpl.n	8026566 <__ieee754_sqrt+0x152>
 8026488:	1e44      	subs	r4, r0, #1
 802648a:	1b1b      	subs	r3, r3, r4
 802648c:	f1c0 0420 	rsb	r4, r0, #32
 8026490:	fa21 f404 	lsr.w	r4, r1, r4
 8026494:	4322      	orrs	r2, r4
 8026496:	4081      	lsls	r1, r0
 8026498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802649c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80264a0:	07dd      	lsls	r5, r3, #31
 80264a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80264a6:	bf42      	ittt	mi
 80264a8:	0052      	lslmi	r2, r2, #1
 80264aa:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80264ae:	0049      	lslmi	r1, r1, #1
 80264b0:	1058      	asrs	r0, r3, #1
 80264b2:	2500      	movs	r5, #0
 80264b4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80264b8:	441a      	add	r2, r3
 80264ba:	0049      	lsls	r1, r1, #1
 80264bc:	2316      	movs	r3, #22
 80264be:	462c      	mov	r4, r5
 80264c0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80264c4:	19a7      	adds	r7, r4, r6
 80264c6:	4297      	cmp	r7, r2
 80264c8:	bfde      	ittt	le
 80264ca:	1bd2      	suble	r2, r2, r7
 80264cc:	19bc      	addle	r4, r7, r6
 80264ce:	19ad      	addle	r5, r5, r6
 80264d0:	0052      	lsls	r2, r2, #1
 80264d2:	3b01      	subs	r3, #1
 80264d4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80264d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80264dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80264e0:	d1f0      	bne.n	80264c4 <__ieee754_sqrt+0xb0>
 80264e2:	f04f 0e20 	mov.w	lr, #32
 80264e6:	469c      	mov	ip, r3
 80264e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80264ec:	42a2      	cmp	r2, r4
 80264ee:	eb06 070c 	add.w	r7, r6, ip
 80264f2:	dc02      	bgt.n	80264fa <__ieee754_sqrt+0xe6>
 80264f4:	d112      	bne.n	802651c <__ieee754_sqrt+0x108>
 80264f6:	428f      	cmp	r7, r1
 80264f8:	d810      	bhi.n	802651c <__ieee754_sqrt+0x108>
 80264fa:	2f00      	cmp	r7, #0
 80264fc:	eb07 0c06 	add.w	ip, r7, r6
 8026500:	da34      	bge.n	802656c <__ieee754_sqrt+0x158>
 8026502:	f1bc 0f00 	cmp.w	ip, #0
 8026506:	db31      	blt.n	802656c <__ieee754_sqrt+0x158>
 8026508:	f104 0801 	add.w	r8, r4, #1
 802650c:	1b12      	subs	r2, r2, r4
 802650e:	428f      	cmp	r7, r1
 8026510:	bf88      	it	hi
 8026512:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8026516:	1bc9      	subs	r1, r1, r7
 8026518:	4433      	add	r3, r6
 802651a:	4644      	mov	r4, r8
 802651c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8026520:	f1be 0e01 	subs.w	lr, lr, #1
 8026524:	443a      	add	r2, r7
 8026526:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802652a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802652e:	d1dd      	bne.n	80264ec <__ieee754_sqrt+0xd8>
 8026530:	430a      	orrs	r2, r1
 8026532:	d006      	beq.n	8026542 <__ieee754_sqrt+0x12e>
 8026534:	1c5c      	adds	r4, r3, #1
 8026536:	bf13      	iteet	ne
 8026538:	3301      	addne	r3, #1
 802653a:	3501      	addeq	r5, #1
 802653c:	4673      	moveq	r3, lr
 802653e:	f023 0301 	bicne.w	r3, r3, #1
 8026542:	106a      	asrs	r2, r5, #1
 8026544:	085b      	lsrs	r3, r3, #1
 8026546:	07e9      	lsls	r1, r5, #31
 8026548:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802654c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8026550:	bf48      	it	mi
 8026552:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8026556:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 802655a:	461c      	mov	r4, r3
 802655c:	e776      	b.n	802644c <__ieee754_sqrt+0x38>
 802655e:	0aca      	lsrs	r2, r1, #11
 8026560:	3b15      	subs	r3, #21
 8026562:	0549      	lsls	r1, r1, #21
 8026564:	e78b      	b.n	802647e <__ieee754_sqrt+0x6a>
 8026566:	0052      	lsls	r2, r2, #1
 8026568:	3001      	adds	r0, #1
 802656a:	e78b      	b.n	8026484 <__ieee754_sqrt+0x70>
 802656c:	46a0      	mov	r8, r4
 802656e:	e7cd      	b.n	802650c <__ieee754_sqrt+0xf8>
 8026570:	7ff00000 	.word	0x7ff00000
 8026574:	00000000 	.word	0x00000000

08026578 <__kernel_cos>:
 8026578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802657c:	ec59 8b10 	vmov	r8, r9, d0
 8026580:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8026584:	b085      	sub	sp, #20
 8026586:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 802658a:	ed8d 1b00 	vstr	d1, [sp]
 802658e:	da07      	bge.n	80265a0 <__kernel_cos+0x28>
 8026590:	ee10 0a10 	vmov	r0, s0
 8026594:	4649      	mov	r1, r9
 8026596:	f7da faab 	bl	8000af0 <__aeabi_d2iz>
 802659a:	2800      	cmp	r0, #0
 802659c:	f000 80aa 	beq.w	80266f4 <__kernel_cos+0x17c>
 80265a0:	4642      	mov	r2, r8
 80265a2:	464b      	mov	r3, r9
 80265a4:	4640      	mov	r0, r8
 80265a6:	4649      	mov	r1, r9
 80265a8:	f7d9 fff2 	bl	8000590 <__aeabi_dmul>
 80265ac:	a359      	add	r3, pc, #356	; (adr r3, 8026714 <__kernel_cos+0x19c>)
 80265ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265b2:	4604      	mov	r4, r0
 80265b4:	460d      	mov	r5, r1
 80265b6:	f7d9 ffeb 	bl	8000590 <__aeabi_dmul>
 80265ba:	a358      	add	r3, pc, #352	; (adr r3, 802671c <__kernel_cos+0x1a4>)
 80265bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265c0:	f7d9 fe34 	bl	800022c <__adddf3>
 80265c4:	4622      	mov	r2, r4
 80265c6:	462b      	mov	r3, r5
 80265c8:	f7d9 ffe2 	bl	8000590 <__aeabi_dmul>
 80265cc:	a355      	add	r3, pc, #340	; (adr r3, 8026724 <__kernel_cos+0x1ac>)
 80265ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265d2:	f7d9 fe29 	bl	8000228 <__aeabi_dsub>
 80265d6:	4622      	mov	r2, r4
 80265d8:	462b      	mov	r3, r5
 80265da:	f7d9 ffd9 	bl	8000590 <__aeabi_dmul>
 80265de:	a353      	add	r3, pc, #332	; (adr r3, 802672c <__kernel_cos+0x1b4>)
 80265e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265e4:	f7d9 fe22 	bl	800022c <__adddf3>
 80265e8:	4622      	mov	r2, r4
 80265ea:	462b      	mov	r3, r5
 80265ec:	f7d9 ffd0 	bl	8000590 <__aeabi_dmul>
 80265f0:	a350      	add	r3, pc, #320	; (adr r3, 8026734 <__kernel_cos+0x1bc>)
 80265f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265f6:	f7d9 fe17 	bl	8000228 <__aeabi_dsub>
 80265fa:	4622      	mov	r2, r4
 80265fc:	462b      	mov	r3, r5
 80265fe:	f7d9 ffc7 	bl	8000590 <__aeabi_dmul>
 8026602:	a34e      	add	r3, pc, #312	; (adr r3, 802673c <__kernel_cos+0x1c4>)
 8026604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026608:	f7d9 fe10 	bl	800022c <__adddf3>
 802660c:	462b      	mov	r3, r5
 802660e:	4622      	mov	r2, r4
 8026610:	f7d9 ffbe 	bl	8000590 <__aeabi_dmul>
 8026614:	4b3a      	ldr	r3, [pc, #232]	; (8026700 <__kernel_cos+0x188>)
 8026616:	429f      	cmp	r7, r3
 8026618:	4682      	mov	sl, r0
 802661a:	468b      	mov	fp, r1
 802661c:	dc2c      	bgt.n	8026678 <__kernel_cos+0x100>
 802661e:	2200      	movs	r2, #0
 8026620:	4b38      	ldr	r3, [pc, #224]	; (8026704 <__kernel_cos+0x18c>)
 8026622:	4620      	mov	r0, r4
 8026624:	4629      	mov	r1, r5
 8026626:	f7d9 ffb3 	bl	8000590 <__aeabi_dmul>
 802662a:	4652      	mov	r2, sl
 802662c:	4606      	mov	r6, r0
 802662e:	460f      	mov	r7, r1
 8026630:	465b      	mov	r3, fp
 8026632:	4620      	mov	r0, r4
 8026634:	4629      	mov	r1, r5
 8026636:	f7d9 ffab 	bl	8000590 <__aeabi_dmul>
 802663a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802663e:	4604      	mov	r4, r0
 8026640:	460d      	mov	r5, r1
 8026642:	4640      	mov	r0, r8
 8026644:	4649      	mov	r1, r9
 8026646:	f7d9 ffa3 	bl	8000590 <__aeabi_dmul>
 802664a:	4602      	mov	r2, r0
 802664c:	460b      	mov	r3, r1
 802664e:	4620      	mov	r0, r4
 8026650:	4629      	mov	r1, r5
 8026652:	f7d9 fde9 	bl	8000228 <__aeabi_dsub>
 8026656:	4602      	mov	r2, r0
 8026658:	460b      	mov	r3, r1
 802665a:	4630      	mov	r0, r6
 802665c:	4639      	mov	r1, r7
 802665e:	f7d9 fde3 	bl	8000228 <__aeabi_dsub>
 8026662:	460b      	mov	r3, r1
 8026664:	4928      	ldr	r1, [pc, #160]	; (8026708 <__kernel_cos+0x190>)
 8026666:	4602      	mov	r2, r0
 8026668:	2000      	movs	r0, #0
 802666a:	f7d9 fddd 	bl	8000228 <__aeabi_dsub>
 802666e:	ec41 0b10 	vmov	d0, r0, r1
 8026672:	b005      	add	sp, #20
 8026674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026678:	4b24      	ldr	r3, [pc, #144]	; (802670c <__kernel_cos+0x194>)
 802667a:	4923      	ldr	r1, [pc, #140]	; (8026708 <__kernel_cos+0x190>)
 802667c:	429f      	cmp	r7, r3
 802667e:	bfd7      	itett	le
 8026680:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8026684:	4f22      	ldrgt	r7, [pc, #136]	; (8026710 <__kernel_cos+0x198>)
 8026686:	2200      	movle	r2, #0
 8026688:	4616      	movle	r6, r2
 802668a:	bfd4      	ite	le
 802668c:	461f      	movle	r7, r3
 802668e:	2600      	movgt	r6, #0
 8026690:	4632      	mov	r2, r6
 8026692:	463b      	mov	r3, r7
 8026694:	2000      	movs	r0, #0
 8026696:	f7d9 fdc7 	bl	8000228 <__aeabi_dsub>
 802669a:	2200      	movs	r2, #0
 802669c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80266a0:	4b18      	ldr	r3, [pc, #96]	; (8026704 <__kernel_cos+0x18c>)
 80266a2:	4620      	mov	r0, r4
 80266a4:	4629      	mov	r1, r5
 80266a6:	f7d9 ff73 	bl	8000590 <__aeabi_dmul>
 80266aa:	4632      	mov	r2, r6
 80266ac:	463b      	mov	r3, r7
 80266ae:	f7d9 fdbb 	bl	8000228 <__aeabi_dsub>
 80266b2:	4652      	mov	r2, sl
 80266b4:	4606      	mov	r6, r0
 80266b6:	460f      	mov	r7, r1
 80266b8:	465b      	mov	r3, fp
 80266ba:	4620      	mov	r0, r4
 80266bc:	4629      	mov	r1, r5
 80266be:	f7d9 ff67 	bl	8000590 <__aeabi_dmul>
 80266c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80266c6:	4604      	mov	r4, r0
 80266c8:	460d      	mov	r5, r1
 80266ca:	4640      	mov	r0, r8
 80266cc:	4649      	mov	r1, r9
 80266ce:	f7d9 ff5f 	bl	8000590 <__aeabi_dmul>
 80266d2:	4602      	mov	r2, r0
 80266d4:	460b      	mov	r3, r1
 80266d6:	4620      	mov	r0, r4
 80266d8:	4629      	mov	r1, r5
 80266da:	f7d9 fda5 	bl	8000228 <__aeabi_dsub>
 80266de:	4602      	mov	r2, r0
 80266e0:	460b      	mov	r3, r1
 80266e2:	4630      	mov	r0, r6
 80266e4:	4639      	mov	r1, r7
 80266e6:	f7d9 fd9f 	bl	8000228 <__aeabi_dsub>
 80266ea:	4602      	mov	r2, r0
 80266ec:	460b      	mov	r3, r1
 80266ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80266f2:	e7ba      	b.n	802666a <__kernel_cos+0xf2>
 80266f4:	2000      	movs	r0, #0
 80266f6:	4904      	ldr	r1, [pc, #16]	; (8026708 <__kernel_cos+0x190>)
 80266f8:	e7b9      	b.n	802666e <__kernel_cos+0xf6>
 80266fa:	bf00      	nop
 80266fc:	f3af 8000 	nop.w
 8026700:	3fd33332 	.word	0x3fd33332
 8026704:	3fe00000 	.word	0x3fe00000
 8026708:	3ff00000 	.word	0x3ff00000
 802670c:	3fe90000 	.word	0x3fe90000
 8026710:	3fd20000 	.word	0x3fd20000
 8026714:	be8838d4 	.word	0xbe8838d4
 8026718:	bda8fae9 	.word	0xbda8fae9
 802671c:	bdb4b1c4 	.word	0xbdb4b1c4
 8026720:	3e21ee9e 	.word	0x3e21ee9e
 8026724:	809c52ad 	.word	0x809c52ad
 8026728:	3e927e4f 	.word	0x3e927e4f
 802672c:	19cb1590 	.word	0x19cb1590
 8026730:	3efa01a0 	.word	0x3efa01a0
 8026734:	16c15177 	.word	0x16c15177
 8026738:	3f56c16c 	.word	0x3f56c16c
 802673c:	5555554c 	.word	0x5555554c
 8026740:	3fa55555 	.word	0x3fa55555
 8026744:	00000000 	.word	0x00000000

08026748 <__kernel_rem_pio2>:
 8026748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802674c:	ed2d 8b02 	vpush	{d8}
 8026750:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8026754:	1ed4      	subs	r4, r2, #3
 8026756:	9306      	str	r3, [sp, #24]
 8026758:	9102      	str	r1, [sp, #8]
 802675a:	4bc3      	ldr	r3, [pc, #780]	; (8026a68 <__kernel_rem_pio2+0x320>)
 802675c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 802675e:	9009      	str	r0, [sp, #36]	; 0x24
 8026760:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8026764:	9300      	str	r3, [sp, #0]
 8026766:	9b06      	ldr	r3, [sp, #24]
 8026768:	3b01      	subs	r3, #1
 802676a:	9304      	str	r3, [sp, #16]
 802676c:	2318      	movs	r3, #24
 802676e:	fb94 f4f3 	sdiv	r4, r4, r3
 8026772:	f06f 0317 	mvn.w	r3, #23
 8026776:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802677a:	fb04 3303 	mla	r3, r4, r3, r3
 802677e:	eb03 0a02 	add.w	sl, r3, r2
 8026782:	9b00      	ldr	r3, [sp, #0]
 8026784:	9a04      	ldr	r2, [sp, #16]
 8026786:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8026a58 <__kernel_rem_pio2+0x310>
 802678a:	eb03 0802 	add.w	r8, r3, r2
 802678e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8026790:	1aa7      	subs	r7, r4, r2
 8026792:	ae20      	add	r6, sp, #128	; 0x80
 8026794:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8026798:	2500      	movs	r5, #0
 802679a:	4545      	cmp	r5, r8
 802679c:	dd13      	ble.n	80267c6 <__kernel_rem_pio2+0x7e>
 802679e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8026a58 <__kernel_rem_pio2+0x310>
 80267a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80267a6:	2600      	movs	r6, #0
 80267a8:	9b00      	ldr	r3, [sp, #0]
 80267aa:	429e      	cmp	r6, r3
 80267ac:	dc32      	bgt.n	8026814 <__kernel_rem_pio2+0xcc>
 80267ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267b0:	9303      	str	r3, [sp, #12]
 80267b2:	9b06      	ldr	r3, [sp, #24]
 80267b4:	199d      	adds	r5, r3, r6
 80267b6:	ab20      	add	r3, sp, #128	; 0x80
 80267b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80267bc:	9308      	str	r3, [sp, #32]
 80267be:	ec59 8b18 	vmov	r8, r9, d8
 80267c2:	2700      	movs	r7, #0
 80267c4:	e01f      	b.n	8026806 <__kernel_rem_pio2+0xbe>
 80267c6:	42ef      	cmn	r7, r5
 80267c8:	d407      	bmi.n	80267da <__kernel_rem_pio2+0x92>
 80267ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80267ce:	f7d9 fe79 	bl	80004c4 <__aeabi_i2d>
 80267d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80267d6:	3501      	adds	r5, #1
 80267d8:	e7df      	b.n	802679a <__kernel_rem_pio2+0x52>
 80267da:	ec51 0b18 	vmov	r0, r1, d8
 80267de:	e7f8      	b.n	80267d2 <__kernel_rem_pio2+0x8a>
 80267e0:	9908      	ldr	r1, [sp, #32]
 80267e2:	9d03      	ldr	r5, [sp, #12]
 80267e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80267e8:	9108      	str	r1, [sp, #32]
 80267ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80267ee:	9503      	str	r5, [sp, #12]
 80267f0:	f7d9 fece 	bl	8000590 <__aeabi_dmul>
 80267f4:	4602      	mov	r2, r0
 80267f6:	460b      	mov	r3, r1
 80267f8:	4640      	mov	r0, r8
 80267fa:	4649      	mov	r1, r9
 80267fc:	f7d9 fd16 	bl	800022c <__adddf3>
 8026800:	3701      	adds	r7, #1
 8026802:	4680      	mov	r8, r0
 8026804:	4689      	mov	r9, r1
 8026806:	9b04      	ldr	r3, [sp, #16]
 8026808:	429f      	cmp	r7, r3
 802680a:	dde9      	ble.n	80267e0 <__kernel_rem_pio2+0x98>
 802680c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8026810:	3601      	adds	r6, #1
 8026812:	e7c9      	b.n	80267a8 <__kernel_rem_pio2+0x60>
 8026814:	9b00      	ldr	r3, [sp, #0]
 8026816:	9f00      	ldr	r7, [sp, #0]
 8026818:	aa0c      	add	r2, sp, #48	; 0x30
 802681a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802681e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026820:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8026822:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8026826:	930a      	str	r3, [sp, #40]	; 0x28
 8026828:	ab98      	add	r3, sp, #608	; 0x260
 802682a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 802682e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8026832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026836:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 802683a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802683e:	9308      	str	r3, [sp, #32]
 8026840:	9a08      	ldr	r2, [sp, #32]
 8026842:	ab98      	add	r3, sp, #608	; 0x260
 8026844:	4413      	add	r3, r2
 8026846:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 802684a:	2600      	movs	r6, #0
 802684c:	1bbb      	subs	r3, r7, r6
 802684e:	2b00      	cmp	r3, #0
 8026850:	dc77      	bgt.n	8026942 <__kernel_rem_pio2+0x1fa>
 8026852:	ec49 8b10 	vmov	d0, r8, r9
 8026856:	4650      	mov	r0, sl
 8026858:	f000 fb8a 	bl	8026f70 <scalbn>
 802685c:	ec55 4b10 	vmov	r4, r5, d0
 8026860:	2200      	movs	r2, #0
 8026862:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8026866:	ee10 0a10 	vmov	r0, s0
 802686a:	4629      	mov	r1, r5
 802686c:	f7d9 fe90 	bl	8000590 <__aeabi_dmul>
 8026870:	ec41 0b10 	vmov	d0, r0, r1
 8026874:	f7ff fab4 	bl	8025de0 <floor>
 8026878:	2200      	movs	r2, #0
 802687a:	ec51 0b10 	vmov	r0, r1, d0
 802687e:	4b7b      	ldr	r3, [pc, #492]	; (8026a6c <__kernel_rem_pio2+0x324>)
 8026880:	f7d9 fe86 	bl	8000590 <__aeabi_dmul>
 8026884:	4602      	mov	r2, r0
 8026886:	460b      	mov	r3, r1
 8026888:	4620      	mov	r0, r4
 802688a:	4629      	mov	r1, r5
 802688c:	f7d9 fccc 	bl	8000228 <__aeabi_dsub>
 8026890:	460d      	mov	r5, r1
 8026892:	4604      	mov	r4, r0
 8026894:	f7da f92c 	bl	8000af0 <__aeabi_d2iz>
 8026898:	9003      	str	r0, [sp, #12]
 802689a:	f7d9 fe13 	bl	80004c4 <__aeabi_i2d>
 802689e:	4602      	mov	r2, r0
 80268a0:	460b      	mov	r3, r1
 80268a2:	4620      	mov	r0, r4
 80268a4:	4629      	mov	r1, r5
 80268a6:	f7d9 fcbf 	bl	8000228 <__aeabi_dsub>
 80268aa:	f1ba 0f00 	cmp.w	sl, #0
 80268ae:	4680      	mov	r8, r0
 80268b0:	4689      	mov	r9, r1
 80268b2:	dd6b      	ble.n	802698c <__kernel_rem_pio2+0x244>
 80268b4:	1e7a      	subs	r2, r7, #1
 80268b6:	ab0c      	add	r3, sp, #48	; 0x30
 80268b8:	f1ca 0118 	rsb	r1, sl, #24
 80268bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80268c0:	9c03      	ldr	r4, [sp, #12]
 80268c2:	fa40 f301 	asr.w	r3, r0, r1
 80268c6:	441c      	add	r4, r3
 80268c8:	408b      	lsls	r3, r1
 80268ca:	1ac0      	subs	r0, r0, r3
 80268cc:	ab0c      	add	r3, sp, #48	; 0x30
 80268ce:	9403      	str	r4, [sp, #12]
 80268d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80268d4:	f1ca 0317 	rsb	r3, sl, #23
 80268d8:	fa40 fb03 	asr.w	fp, r0, r3
 80268dc:	f1bb 0f00 	cmp.w	fp, #0
 80268e0:	dd62      	ble.n	80269a8 <__kernel_rem_pio2+0x260>
 80268e2:	9b03      	ldr	r3, [sp, #12]
 80268e4:	2200      	movs	r2, #0
 80268e6:	3301      	adds	r3, #1
 80268e8:	9303      	str	r3, [sp, #12]
 80268ea:	4614      	mov	r4, r2
 80268ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80268f0:	4297      	cmp	r7, r2
 80268f2:	f300 8089 	bgt.w	8026a08 <__kernel_rem_pio2+0x2c0>
 80268f6:	f1ba 0f00 	cmp.w	sl, #0
 80268fa:	dd07      	ble.n	802690c <__kernel_rem_pio2+0x1c4>
 80268fc:	f1ba 0f01 	cmp.w	sl, #1
 8026900:	f000 8096 	beq.w	8026a30 <__kernel_rem_pio2+0x2e8>
 8026904:	f1ba 0f02 	cmp.w	sl, #2
 8026908:	f000 809c 	beq.w	8026a44 <__kernel_rem_pio2+0x2fc>
 802690c:	f1bb 0f02 	cmp.w	fp, #2
 8026910:	d14a      	bne.n	80269a8 <__kernel_rem_pio2+0x260>
 8026912:	4642      	mov	r2, r8
 8026914:	464b      	mov	r3, r9
 8026916:	2000      	movs	r0, #0
 8026918:	4955      	ldr	r1, [pc, #340]	; (8026a70 <__kernel_rem_pio2+0x328>)
 802691a:	f7d9 fc85 	bl	8000228 <__aeabi_dsub>
 802691e:	4680      	mov	r8, r0
 8026920:	4689      	mov	r9, r1
 8026922:	2c00      	cmp	r4, #0
 8026924:	d040      	beq.n	80269a8 <__kernel_rem_pio2+0x260>
 8026926:	4650      	mov	r0, sl
 8026928:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8026a60 <__kernel_rem_pio2+0x318>
 802692c:	f000 fb20 	bl	8026f70 <scalbn>
 8026930:	4640      	mov	r0, r8
 8026932:	4649      	mov	r1, r9
 8026934:	ec53 2b10 	vmov	r2, r3, d0
 8026938:	f7d9 fc76 	bl	8000228 <__aeabi_dsub>
 802693c:	4680      	mov	r8, r0
 802693e:	4689      	mov	r9, r1
 8026940:	e032      	b.n	80269a8 <__kernel_rem_pio2+0x260>
 8026942:	2200      	movs	r2, #0
 8026944:	4b4b      	ldr	r3, [pc, #300]	; (8026a74 <__kernel_rem_pio2+0x32c>)
 8026946:	4640      	mov	r0, r8
 8026948:	4649      	mov	r1, r9
 802694a:	f7d9 fe21 	bl	8000590 <__aeabi_dmul>
 802694e:	f7da f8cf 	bl	8000af0 <__aeabi_d2iz>
 8026952:	f7d9 fdb7 	bl	80004c4 <__aeabi_i2d>
 8026956:	2200      	movs	r2, #0
 8026958:	4b47      	ldr	r3, [pc, #284]	; (8026a78 <__kernel_rem_pio2+0x330>)
 802695a:	4604      	mov	r4, r0
 802695c:	460d      	mov	r5, r1
 802695e:	f7d9 fe17 	bl	8000590 <__aeabi_dmul>
 8026962:	4602      	mov	r2, r0
 8026964:	460b      	mov	r3, r1
 8026966:	4640      	mov	r0, r8
 8026968:	4649      	mov	r1, r9
 802696a:	f7d9 fc5d 	bl	8000228 <__aeabi_dsub>
 802696e:	f7da f8bf 	bl	8000af0 <__aeabi_d2iz>
 8026972:	ab0c      	add	r3, sp, #48	; 0x30
 8026974:	4629      	mov	r1, r5
 8026976:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 802697a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802697e:	4620      	mov	r0, r4
 8026980:	f7d9 fc54 	bl	800022c <__adddf3>
 8026984:	3601      	adds	r6, #1
 8026986:	4680      	mov	r8, r0
 8026988:	4689      	mov	r9, r1
 802698a:	e75f      	b.n	802684c <__kernel_rem_pio2+0x104>
 802698c:	d106      	bne.n	802699c <__kernel_rem_pio2+0x254>
 802698e:	1e7b      	subs	r3, r7, #1
 8026990:	aa0c      	add	r2, sp, #48	; 0x30
 8026992:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8026996:	ea4f 5be0 	mov.w	fp, r0, asr #23
 802699a:	e79f      	b.n	80268dc <__kernel_rem_pio2+0x194>
 802699c:	2200      	movs	r2, #0
 802699e:	4b37      	ldr	r3, [pc, #220]	; (8026a7c <__kernel_rem_pio2+0x334>)
 80269a0:	f7da f87c 	bl	8000a9c <__aeabi_dcmpge>
 80269a4:	bb68      	cbnz	r0, 8026a02 <__kernel_rem_pio2+0x2ba>
 80269a6:	4683      	mov	fp, r0
 80269a8:	2200      	movs	r2, #0
 80269aa:	2300      	movs	r3, #0
 80269ac:	4640      	mov	r0, r8
 80269ae:	4649      	mov	r1, r9
 80269b0:	f7da f856 	bl	8000a60 <__aeabi_dcmpeq>
 80269b4:	2800      	cmp	r0, #0
 80269b6:	f000 80c1 	beq.w	8026b3c <__kernel_rem_pio2+0x3f4>
 80269ba:	1e7c      	subs	r4, r7, #1
 80269bc:	4623      	mov	r3, r4
 80269be:	2200      	movs	r2, #0
 80269c0:	9900      	ldr	r1, [sp, #0]
 80269c2:	428b      	cmp	r3, r1
 80269c4:	da5c      	bge.n	8026a80 <__kernel_rem_pio2+0x338>
 80269c6:	2a00      	cmp	r2, #0
 80269c8:	f040 808b 	bne.w	8026ae2 <__kernel_rem_pio2+0x39a>
 80269cc:	2401      	movs	r4, #1
 80269ce:	f06f 0203 	mvn.w	r2, #3
 80269d2:	fb02 f304 	mul.w	r3, r2, r4
 80269d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80269d8:	58cb      	ldr	r3, [r1, r3]
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d056      	beq.n	8026a8c <__kernel_rem_pio2+0x344>
 80269de:	9b08      	ldr	r3, [sp, #32]
 80269e0:	aa98      	add	r2, sp, #608	; 0x260
 80269e2:	4413      	add	r3, r2
 80269e4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80269e8:	9b06      	ldr	r3, [sp, #24]
 80269ea:	19dd      	adds	r5, r3, r7
 80269ec:	ab20      	add	r3, sp, #128	; 0x80
 80269ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80269f2:	19e3      	adds	r3, r4, r7
 80269f4:	1c7e      	adds	r6, r7, #1
 80269f6:	9303      	str	r3, [sp, #12]
 80269f8:	9b03      	ldr	r3, [sp, #12]
 80269fa:	429e      	cmp	r6, r3
 80269fc:	dd48      	ble.n	8026a90 <__kernel_rem_pio2+0x348>
 80269fe:	461f      	mov	r7, r3
 8026a00:	e712      	b.n	8026828 <__kernel_rem_pio2+0xe0>
 8026a02:	f04f 0b02 	mov.w	fp, #2
 8026a06:	e76c      	b.n	80268e2 <__kernel_rem_pio2+0x19a>
 8026a08:	ab0c      	add	r3, sp, #48	; 0x30
 8026a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026a0e:	b94c      	cbnz	r4, 8026a24 <__kernel_rem_pio2+0x2dc>
 8026a10:	b12b      	cbz	r3, 8026a1e <__kernel_rem_pio2+0x2d6>
 8026a12:	a80c      	add	r0, sp, #48	; 0x30
 8026a14:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8026a18:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8026a1c:	2301      	movs	r3, #1
 8026a1e:	3201      	adds	r2, #1
 8026a20:	461c      	mov	r4, r3
 8026a22:	e765      	b.n	80268f0 <__kernel_rem_pio2+0x1a8>
 8026a24:	a80c      	add	r0, sp, #48	; 0x30
 8026a26:	1acb      	subs	r3, r1, r3
 8026a28:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8026a2c:	4623      	mov	r3, r4
 8026a2e:	e7f6      	b.n	8026a1e <__kernel_rem_pio2+0x2d6>
 8026a30:	1e7a      	subs	r2, r7, #1
 8026a32:	ab0c      	add	r3, sp, #48	; 0x30
 8026a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026a38:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8026a3c:	a90c      	add	r1, sp, #48	; 0x30
 8026a3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8026a42:	e763      	b.n	802690c <__kernel_rem_pio2+0x1c4>
 8026a44:	1e7a      	subs	r2, r7, #1
 8026a46:	ab0c      	add	r3, sp, #48	; 0x30
 8026a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8026a4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8026a50:	e7f4      	b.n	8026a3c <__kernel_rem_pio2+0x2f4>
 8026a52:	bf00      	nop
 8026a54:	f3af 8000 	nop.w
	...
 8026a64:	3ff00000 	.word	0x3ff00000
 8026a68:	080353e0 	.word	0x080353e0
 8026a6c:	40200000 	.word	0x40200000
 8026a70:	3ff00000 	.word	0x3ff00000
 8026a74:	3e700000 	.word	0x3e700000
 8026a78:	41700000 	.word	0x41700000
 8026a7c:	3fe00000 	.word	0x3fe00000
 8026a80:	a90c      	add	r1, sp, #48	; 0x30
 8026a82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8026a86:	3b01      	subs	r3, #1
 8026a88:	430a      	orrs	r2, r1
 8026a8a:	e799      	b.n	80269c0 <__kernel_rem_pio2+0x278>
 8026a8c:	3401      	adds	r4, #1
 8026a8e:	e7a0      	b.n	80269d2 <__kernel_rem_pio2+0x28a>
 8026a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8026a96:	f7d9 fd15 	bl	80004c4 <__aeabi_i2d>
 8026a9a:	e8e5 0102 	strd	r0, r1, [r5], #8
 8026a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026aa0:	9508      	str	r5, [sp, #32]
 8026aa2:	461c      	mov	r4, r3
 8026aa4:	2700      	movs	r7, #0
 8026aa6:	f04f 0800 	mov.w	r8, #0
 8026aaa:	f04f 0900 	mov.w	r9, #0
 8026aae:	9b04      	ldr	r3, [sp, #16]
 8026ab0:	429f      	cmp	r7, r3
 8026ab2:	dd03      	ble.n	8026abc <__kernel_rem_pio2+0x374>
 8026ab4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8026ab8:	3601      	adds	r6, #1
 8026aba:	e79d      	b.n	80269f8 <__kernel_rem_pio2+0x2b0>
 8026abc:	9908      	ldr	r1, [sp, #32]
 8026abe:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8026ac2:	9108      	str	r1, [sp, #32]
 8026ac4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8026ac8:	f7d9 fd62 	bl	8000590 <__aeabi_dmul>
 8026acc:	4602      	mov	r2, r0
 8026ace:	460b      	mov	r3, r1
 8026ad0:	4640      	mov	r0, r8
 8026ad2:	4649      	mov	r1, r9
 8026ad4:	f7d9 fbaa 	bl	800022c <__adddf3>
 8026ad8:	3701      	adds	r7, #1
 8026ada:	4680      	mov	r8, r0
 8026adc:	4689      	mov	r9, r1
 8026ade:	e7e6      	b.n	8026aae <__kernel_rem_pio2+0x366>
 8026ae0:	3c01      	subs	r4, #1
 8026ae2:	ab0c      	add	r3, sp, #48	; 0x30
 8026ae4:	f1aa 0a18 	sub.w	sl, sl, #24
 8026ae8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8026aec:	2b00      	cmp	r3, #0
 8026aee:	d0f7      	beq.n	8026ae0 <__kernel_rem_pio2+0x398>
 8026af0:	4650      	mov	r0, sl
 8026af2:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8026dc8 <__kernel_rem_pio2+0x680>
 8026af6:	f000 fa3b 	bl	8026f70 <scalbn>
 8026afa:	00e5      	lsls	r5, r4, #3
 8026afc:	ab98      	add	r3, sp, #608	; 0x260
 8026afe:	eb03 0905 	add.w	r9, r3, r5
 8026b02:	ec57 6b10 	vmov	r6, r7, d0
 8026b06:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8026b0a:	46a0      	mov	r8, r4
 8026b0c:	f1b8 0f00 	cmp.w	r8, #0
 8026b10:	da4d      	bge.n	8026bae <__kernel_rem_pio2+0x466>
 8026b12:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8026dd0 <__kernel_rem_pio2+0x688>
 8026b16:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8026b1a:	2300      	movs	r3, #0
 8026b1c:	9304      	str	r3, [sp, #16]
 8026b1e:	4657      	mov	r7, sl
 8026b20:	9b04      	ldr	r3, [sp, #16]
 8026b22:	ebb4 0903 	subs.w	r9, r4, r3
 8026b26:	d476      	bmi.n	8026c16 <__kernel_rem_pio2+0x4ce>
 8026b28:	4bab      	ldr	r3, [pc, #684]	; (8026dd8 <__kernel_rem_pio2+0x690>)
 8026b2a:	461e      	mov	r6, r3
 8026b2c:	ab70      	add	r3, sp, #448	; 0x1c0
 8026b2e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8026b32:	ed8d 8b06 	vstr	d8, [sp, #24]
 8026b36:	f04f 0800 	mov.w	r8, #0
 8026b3a:	e05e      	b.n	8026bfa <__kernel_rem_pio2+0x4b2>
 8026b3c:	f1ca 0000 	rsb	r0, sl, #0
 8026b40:	ec49 8b10 	vmov	d0, r8, r9
 8026b44:	f000 fa14 	bl	8026f70 <scalbn>
 8026b48:	ec55 4b10 	vmov	r4, r5, d0
 8026b4c:	2200      	movs	r2, #0
 8026b4e:	4ba3      	ldr	r3, [pc, #652]	; (8026ddc <__kernel_rem_pio2+0x694>)
 8026b50:	ee10 0a10 	vmov	r0, s0
 8026b54:	4629      	mov	r1, r5
 8026b56:	f7d9 ffa1 	bl	8000a9c <__aeabi_dcmpge>
 8026b5a:	b1f8      	cbz	r0, 8026b9c <__kernel_rem_pio2+0x454>
 8026b5c:	2200      	movs	r2, #0
 8026b5e:	4ba0      	ldr	r3, [pc, #640]	; (8026de0 <__kernel_rem_pio2+0x698>)
 8026b60:	4620      	mov	r0, r4
 8026b62:	4629      	mov	r1, r5
 8026b64:	f7d9 fd14 	bl	8000590 <__aeabi_dmul>
 8026b68:	f7d9 ffc2 	bl	8000af0 <__aeabi_d2iz>
 8026b6c:	4606      	mov	r6, r0
 8026b6e:	f7d9 fca9 	bl	80004c4 <__aeabi_i2d>
 8026b72:	2200      	movs	r2, #0
 8026b74:	4b99      	ldr	r3, [pc, #612]	; (8026ddc <__kernel_rem_pio2+0x694>)
 8026b76:	f7d9 fd0b 	bl	8000590 <__aeabi_dmul>
 8026b7a:	460b      	mov	r3, r1
 8026b7c:	4602      	mov	r2, r0
 8026b7e:	4629      	mov	r1, r5
 8026b80:	4620      	mov	r0, r4
 8026b82:	f7d9 fb51 	bl	8000228 <__aeabi_dsub>
 8026b86:	f7d9 ffb3 	bl	8000af0 <__aeabi_d2iz>
 8026b8a:	1c7c      	adds	r4, r7, #1
 8026b8c:	ab0c      	add	r3, sp, #48	; 0x30
 8026b8e:	f10a 0a18 	add.w	sl, sl, #24
 8026b92:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8026b96:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8026b9a:	e7a9      	b.n	8026af0 <__kernel_rem_pio2+0x3a8>
 8026b9c:	4620      	mov	r0, r4
 8026b9e:	4629      	mov	r1, r5
 8026ba0:	f7d9 ffa6 	bl	8000af0 <__aeabi_d2iz>
 8026ba4:	ab0c      	add	r3, sp, #48	; 0x30
 8026ba6:	463c      	mov	r4, r7
 8026ba8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8026bac:	e7a0      	b.n	8026af0 <__kernel_rem_pio2+0x3a8>
 8026bae:	ab0c      	add	r3, sp, #48	; 0x30
 8026bb0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8026bb4:	f7d9 fc86 	bl	80004c4 <__aeabi_i2d>
 8026bb8:	4632      	mov	r2, r6
 8026bba:	463b      	mov	r3, r7
 8026bbc:	f7d9 fce8 	bl	8000590 <__aeabi_dmul>
 8026bc0:	2200      	movs	r2, #0
 8026bc2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8026bc6:	4b86      	ldr	r3, [pc, #536]	; (8026de0 <__kernel_rem_pio2+0x698>)
 8026bc8:	4630      	mov	r0, r6
 8026bca:	4639      	mov	r1, r7
 8026bcc:	f7d9 fce0 	bl	8000590 <__aeabi_dmul>
 8026bd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8026bd4:	4606      	mov	r6, r0
 8026bd6:	460f      	mov	r7, r1
 8026bd8:	e798      	b.n	8026b0c <__kernel_rem_pio2+0x3c4>
 8026bda:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8026bde:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8026be2:	f7d9 fcd5 	bl	8000590 <__aeabi_dmul>
 8026be6:	4602      	mov	r2, r0
 8026be8:	460b      	mov	r3, r1
 8026bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8026bee:	f7d9 fb1d 	bl	800022c <__adddf3>
 8026bf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8026bf6:	f108 0801 	add.w	r8, r8, #1
 8026bfa:	9b00      	ldr	r3, [sp, #0]
 8026bfc:	4598      	cmp	r8, r3
 8026bfe:	dc02      	bgt.n	8026c06 <__kernel_rem_pio2+0x4be>
 8026c00:	9b04      	ldr	r3, [sp, #16]
 8026c02:	4598      	cmp	r8, r3
 8026c04:	dde9      	ble.n	8026bda <__kernel_rem_pio2+0x492>
 8026c06:	9b04      	ldr	r3, [sp, #16]
 8026c08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8026c0c:	3301      	adds	r3, #1
 8026c0e:	ecaa 7b02 	vstmia	sl!, {d7}
 8026c12:	9304      	str	r3, [sp, #16]
 8026c14:	e784      	b.n	8026b20 <__kernel_rem_pio2+0x3d8>
 8026c16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8026c18:	2b03      	cmp	r3, #3
 8026c1a:	d85d      	bhi.n	8026cd8 <__kernel_rem_pio2+0x590>
 8026c1c:	e8df f003 	tbb	[pc, r3]
 8026c20:	0226264b 	.word	0x0226264b
 8026c24:	ab98      	add	r3, sp, #608	; 0x260
 8026c26:	441d      	add	r5, r3
 8026c28:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8026c2c:	462e      	mov	r6, r5
 8026c2e:	46a2      	mov	sl, r4
 8026c30:	f1ba 0f00 	cmp.w	sl, #0
 8026c34:	dc6e      	bgt.n	8026d14 <__kernel_rem_pio2+0x5cc>
 8026c36:	462e      	mov	r6, r5
 8026c38:	46a2      	mov	sl, r4
 8026c3a:	f1ba 0f01 	cmp.w	sl, #1
 8026c3e:	f300 808a 	bgt.w	8026d56 <__kernel_rem_pio2+0x60e>
 8026c42:	2000      	movs	r0, #0
 8026c44:	2100      	movs	r1, #0
 8026c46:	2c01      	cmp	r4, #1
 8026c48:	f300 80a6 	bgt.w	8026d98 <__kernel_rem_pio2+0x650>
 8026c4c:	f1bb 0f00 	cmp.w	fp, #0
 8026c50:	f040 80a8 	bne.w	8026da4 <__kernel_rem_pio2+0x65c>
 8026c54:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8026c58:	9c02      	ldr	r4, [sp, #8]
 8026c5a:	e9c4 2300 	strd	r2, r3, [r4]
 8026c5e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8026c62:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8026c66:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8026c6a:	e035      	b.n	8026cd8 <__kernel_rem_pio2+0x590>
 8026c6c:	3508      	adds	r5, #8
 8026c6e:	ab48      	add	r3, sp, #288	; 0x120
 8026c70:	441d      	add	r5, r3
 8026c72:	4626      	mov	r6, r4
 8026c74:	2000      	movs	r0, #0
 8026c76:	2100      	movs	r1, #0
 8026c78:	2e00      	cmp	r6, #0
 8026c7a:	da3c      	bge.n	8026cf6 <__kernel_rem_pio2+0x5ae>
 8026c7c:	f1bb 0f00 	cmp.w	fp, #0
 8026c80:	d03f      	beq.n	8026d02 <__kernel_rem_pio2+0x5ba>
 8026c82:	4602      	mov	r2, r0
 8026c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026c88:	9d02      	ldr	r5, [sp, #8]
 8026c8a:	e9c5 2300 	strd	r2, r3, [r5]
 8026c8e:	4602      	mov	r2, r0
 8026c90:	460b      	mov	r3, r1
 8026c92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8026c96:	f7d9 fac7 	bl	8000228 <__aeabi_dsub>
 8026c9a:	ae4a      	add	r6, sp, #296	; 0x128
 8026c9c:	2501      	movs	r5, #1
 8026c9e:	42ac      	cmp	r4, r5
 8026ca0:	da32      	bge.n	8026d08 <__kernel_rem_pio2+0x5c0>
 8026ca2:	f1bb 0f00 	cmp.w	fp, #0
 8026ca6:	d002      	beq.n	8026cae <__kernel_rem_pio2+0x566>
 8026ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026cac:	4619      	mov	r1, r3
 8026cae:	9b02      	ldr	r3, [sp, #8]
 8026cb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8026cb4:	e010      	b.n	8026cd8 <__kernel_rem_pio2+0x590>
 8026cb6:	ab98      	add	r3, sp, #608	; 0x260
 8026cb8:	441d      	add	r5, r3
 8026cba:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8026cbe:	2000      	movs	r0, #0
 8026cc0:	2100      	movs	r1, #0
 8026cc2:	2c00      	cmp	r4, #0
 8026cc4:	da11      	bge.n	8026cea <__kernel_rem_pio2+0x5a2>
 8026cc6:	f1bb 0f00 	cmp.w	fp, #0
 8026cca:	d002      	beq.n	8026cd2 <__kernel_rem_pio2+0x58a>
 8026ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026cd0:	4619      	mov	r1, r3
 8026cd2:	9b02      	ldr	r3, [sp, #8]
 8026cd4:	e9c3 0100 	strd	r0, r1, [r3]
 8026cd8:	9b03      	ldr	r3, [sp, #12]
 8026cda:	f003 0007 	and.w	r0, r3, #7
 8026cde:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8026ce2:	ecbd 8b02 	vpop	{d8}
 8026ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8026cee:	f7d9 fa9d 	bl	800022c <__adddf3>
 8026cf2:	3c01      	subs	r4, #1
 8026cf4:	e7e5      	b.n	8026cc2 <__kernel_rem_pio2+0x57a>
 8026cf6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8026cfa:	f7d9 fa97 	bl	800022c <__adddf3>
 8026cfe:	3e01      	subs	r6, #1
 8026d00:	e7ba      	b.n	8026c78 <__kernel_rem_pio2+0x530>
 8026d02:	4602      	mov	r2, r0
 8026d04:	460b      	mov	r3, r1
 8026d06:	e7bf      	b.n	8026c88 <__kernel_rem_pio2+0x540>
 8026d08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8026d0c:	f7d9 fa8e 	bl	800022c <__adddf3>
 8026d10:	3501      	adds	r5, #1
 8026d12:	e7c4      	b.n	8026c9e <__kernel_rem_pio2+0x556>
 8026d14:	ed16 7b02 	vldr	d7, [r6, #-8]
 8026d18:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8026d1c:	ec53 2b17 	vmov	r2, r3, d7
 8026d20:	4640      	mov	r0, r8
 8026d22:	4649      	mov	r1, r9
 8026d24:	ed8d 7b00 	vstr	d7, [sp]
 8026d28:	f7d9 fa80 	bl	800022c <__adddf3>
 8026d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026d30:	4602      	mov	r2, r0
 8026d32:	460b      	mov	r3, r1
 8026d34:	4640      	mov	r0, r8
 8026d36:	4649      	mov	r1, r9
 8026d38:	f7d9 fa76 	bl	8000228 <__aeabi_dsub>
 8026d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026d40:	f7d9 fa74 	bl	800022c <__adddf3>
 8026d44:	ed9d 7b04 	vldr	d7, [sp, #16]
 8026d48:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8026d4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026d50:	ed06 7b02 	vstr	d7, [r6, #-8]
 8026d54:	e76c      	b.n	8026c30 <__kernel_rem_pio2+0x4e8>
 8026d56:	ed16 7b02 	vldr	d7, [r6, #-8]
 8026d5a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8026d5e:	ec53 2b17 	vmov	r2, r3, d7
 8026d62:	4640      	mov	r0, r8
 8026d64:	4649      	mov	r1, r9
 8026d66:	ed8d 7b00 	vstr	d7, [sp]
 8026d6a:	f7d9 fa5f 	bl	800022c <__adddf3>
 8026d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026d72:	4602      	mov	r2, r0
 8026d74:	460b      	mov	r3, r1
 8026d76:	4640      	mov	r0, r8
 8026d78:	4649      	mov	r1, r9
 8026d7a:	f7d9 fa55 	bl	8000228 <__aeabi_dsub>
 8026d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026d82:	f7d9 fa53 	bl	800022c <__adddf3>
 8026d86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8026d8a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8026d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026d92:	ed06 7b02 	vstr	d7, [r6, #-8]
 8026d96:	e750      	b.n	8026c3a <__kernel_rem_pio2+0x4f2>
 8026d98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8026d9c:	f7d9 fa46 	bl	800022c <__adddf3>
 8026da0:	3c01      	subs	r4, #1
 8026da2:	e750      	b.n	8026c46 <__kernel_rem_pio2+0x4fe>
 8026da4:	9a02      	ldr	r2, [sp, #8]
 8026da6:	683b      	ldr	r3, [r7, #0]
 8026da8:	6013      	str	r3, [r2, #0]
 8026daa:	687b      	ldr	r3, [r7, #4]
 8026dac:	6110      	str	r0, [r2, #16]
 8026dae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026db2:	6053      	str	r3, [r2, #4]
 8026db4:	68bb      	ldr	r3, [r7, #8]
 8026db6:	6093      	str	r3, [r2, #8]
 8026db8:	68fb      	ldr	r3, [r7, #12]
 8026dba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026dbe:	60d3      	str	r3, [r2, #12]
 8026dc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026dc4:	6153      	str	r3, [r2, #20]
 8026dc6:	e787      	b.n	8026cd8 <__kernel_rem_pio2+0x590>
 8026dc8:	00000000 	.word	0x00000000
 8026dcc:	3ff00000 	.word	0x3ff00000
	...
 8026dd8:	080353a0 	.word	0x080353a0
 8026ddc:	41700000 	.word	0x41700000
 8026de0:	3e700000 	.word	0x3e700000
 8026de4:	00000000 	.word	0x00000000

08026de8 <__kernel_sin>:
 8026de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dec:	ec55 4b10 	vmov	r4, r5, d0
 8026df0:	b085      	sub	sp, #20
 8026df2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026df6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8026dfa:	ed8d 1b00 	vstr	d1, [sp]
 8026dfe:	9002      	str	r0, [sp, #8]
 8026e00:	da06      	bge.n	8026e10 <__kernel_sin+0x28>
 8026e02:	ee10 0a10 	vmov	r0, s0
 8026e06:	4629      	mov	r1, r5
 8026e08:	f7d9 fe72 	bl	8000af0 <__aeabi_d2iz>
 8026e0c:	2800      	cmp	r0, #0
 8026e0e:	d051      	beq.n	8026eb4 <__kernel_sin+0xcc>
 8026e10:	4622      	mov	r2, r4
 8026e12:	462b      	mov	r3, r5
 8026e14:	4620      	mov	r0, r4
 8026e16:	4629      	mov	r1, r5
 8026e18:	f7d9 fbba 	bl	8000590 <__aeabi_dmul>
 8026e1c:	4682      	mov	sl, r0
 8026e1e:	468b      	mov	fp, r1
 8026e20:	4602      	mov	r2, r0
 8026e22:	460b      	mov	r3, r1
 8026e24:	4620      	mov	r0, r4
 8026e26:	4629      	mov	r1, r5
 8026e28:	f7d9 fbb2 	bl	8000590 <__aeabi_dmul>
 8026e2c:	a341      	add	r3, pc, #260	; (adr r3, 8026f34 <__kernel_sin+0x14c>)
 8026e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e32:	4680      	mov	r8, r0
 8026e34:	4689      	mov	r9, r1
 8026e36:	4650      	mov	r0, sl
 8026e38:	4659      	mov	r1, fp
 8026e3a:	f7d9 fba9 	bl	8000590 <__aeabi_dmul>
 8026e3e:	a33f      	add	r3, pc, #252	; (adr r3, 8026f3c <__kernel_sin+0x154>)
 8026e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e44:	f7d9 f9f0 	bl	8000228 <__aeabi_dsub>
 8026e48:	4652      	mov	r2, sl
 8026e4a:	465b      	mov	r3, fp
 8026e4c:	f7d9 fba0 	bl	8000590 <__aeabi_dmul>
 8026e50:	a33c      	add	r3, pc, #240	; (adr r3, 8026f44 <__kernel_sin+0x15c>)
 8026e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e56:	f7d9 f9e9 	bl	800022c <__adddf3>
 8026e5a:	4652      	mov	r2, sl
 8026e5c:	465b      	mov	r3, fp
 8026e5e:	f7d9 fb97 	bl	8000590 <__aeabi_dmul>
 8026e62:	a33a      	add	r3, pc, #232	; (adr r3, 8026f4c <__kernel_sin+0x164>)
 8026e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e68:	f7d9 f9de 	bl	8000228 <__aeabi_dsub>
 8026e6c:	4652      	mov	r2, sl
 8026e6e:	465b      	mov	r3, fp
 8026e70:	f7d9 fb8e 	bl	8000590 <__aeabi_dmul>
 8026e74:	a337      	add	r3, pc, #220	; (adr r3, 8026f54 <__kernel_sin+0x16c>)
 8026e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e7a:	f7d9 f9d7 	bl	800022c <__adddf3>
 8026e7e:	9b02      	ldr	r3, [sp, #8]
 8026e80:	4606      	mov	r6, r0
 8026e82:	460f      	mov	r7, r1
 8026e84:	b9db      	cbnz	r3, 8026ebe <__kernel_sin+0xd6>
 8026e86:	4602      	mov	r2, r0
 8026e88:	460b      	mov	r3, r1
 8026e8a:	4650      	mov	r0, sl
 8026e8c:	4659      	mov	r1, fp
 8026e8e:	f7d9 fb7f 	bl	8000590 <__aeabi_dmul>
 8026e92:	a325      	add	r3, pc, #148	; (adr r3, 8026f28 <__kernel_sin+0x140>)
 8026e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e98:	f7d9 f9c6 	bl	8000228 <__aeabi_dsub>
 8026e9c:	4642      	mov	r2, r8
 8026e9e:	464b      	mov	r3, r9
 8026ea0:	f7d9 fb76 	bl	8000590 <__aeabi_dmul>
 8026ea4:	4602      	mov	r2, r0
 8026ea6:	460b      	mov	r3, r1
 8026ea8:	4620      	mov	r0, r4
 8026eaa:	4629      	mov	r1, r5
 8026eac:	f7d9 f9be 	bl	800022c <__adddf3>
 8026eb0:	4604      	mov	r4, r0
 8026eb2:	460d      	mov	r5, r1
 8026eb4:	ec45 4b10 	vmov	d0, r4, r5
 8026eb8:	b005      	add	sp, #20
 8026eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ebe:	2200      	movs	r2, #0
 8026ec0:	4b1b      	ldr	r3, [pc, #108]	; (8026f30 <__kernel_sin+0x148>)
 8026ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026ec6:	f7d9 fb63 	bl	8000590 <__aeabi_dmul>
 8026eca:	4632      	mov	r2, r6
 8026ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026ed0:	463b      	mov	r3, r7
 8026ed2:	4640      	mov	r0, r8
 8026ed4:	4649      	mov	r1, r9
 8026ed6:	f7d9 fb5b 	bl	8000590 <__aeabi_dmul>
 8026eda:	4602      	mov	r2, r0
 8026edc:	460b      	mov	r3, r1
 8026ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026ee2:	f7d9 f9a1 	bl	8000228 <__aeabi_dsub>
 8026ee6:	4652      	mov	r2, sl
 8026ee8:	465b      	mov	r3, fp
 8026eea:	f7d9 fb51 	bl	8000590 <__aeabi_dmul>
 8026eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026ef2:	f7d9 f999 	bl	8000228 <__aeabi_dsub>
 8026ef6:	a30c      	add	r3, pc, #48	; (adr r3, 8026f28 <__kernel_sin+0x140>)
 8026ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026efc:	4606      	mov	r6, r0
 8026efe:	460f      	mov	r7, r1
 8026f00:	4640      	mov	r0, r8
 8026f02:	4649      	mov	r1, r9
 8026f04:	f7d9 fb44 	bl	8000590 <__aeabi_dmul>
 8026f08:	4602      	mov	r2, r0
 8026f0a:	460b      	mov	r3, r1
 8026f0c:	4630      	mov	r0, r6
 8026f0e:	4639      	mov	r1, r7
 8026f10:	f7d9 f98c 	bl	800022c <__adddf3>
 8026f14:	4602      	mov	r2, r0
 8026f16:	460b      	mov	r3, r1
 8026f18:	4620      	mov	r0, r4
 8026f1a:	4629      	mov	r1, r5
 8026f1c:	f7d9 f984 	bl	8000228 <__aeabi_dsub>
 8026f20:	e7c6      	b.n	8026eb0 <__kernel_sin+0xc8>
 8026f22:	bf00      	nop
 8026f24:	f3af 8000 	nop.w
 8026f28:	55555549 	.word	0x55555549
 8026f2c:	3fc55555 	.word	0x3fc55555
 8026f30:	3fe00000 	.word	0x3fe00000
 8026f34:	5acfd57c 	.word	0x5acfd57c
 8026f38:	3de5d93a 	.word	0x3de5d93a
 8026f3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8026f40:	3e5ae5e6 	.word	0x3e5ae5e6
 8026f44:	57b1fe7d 	.word	0x57b1fe7d
 8026f48:	3ec71de3 	.word	0x3ec71de3
 8026f4c:	19c161d5 	.word	0x19c161d5
 8026f50:	3f2a01a0 	.word	0x3f2a01a0
 8026f54:	1110f8a6 	.word	0x1110f8a6
 8026f58:	3f811111 	.word	0x3f811111

08026f5c <fabs>:
 8026f5c:	ec53 2b10 	vmov	r2, r3, d0
 8026f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026f64:	ec43 2b10 	vmov	d0, r2, r3
 8026f68:	4770      	bx	lr

08026f6a <matherr>:
 8026f6a:	2000      	movs	r0, #0
 8026f6c:	4770      	bx	lr
	...

08026f70 <scalbn>:
 8026f70:	b570      	push	{r4, r5, r6, lr}
 8026f72:	ec55 4b10 	vmov	r4, r5, d0
 8026f76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8026f7a:	4606      	mov	r6, r0
 8026f7c:	462b      	mov	r3, r5
 8026f7e:	b9b2      	cbnz	r2, 8026fae <scalbn+0x3e>
 8026f80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026f84:	4323      	orrs	r3, r4
 8026f86:	d03c      	beq.n	8027002 <scalbn+0x92>
 8026f88:	2200      	movs	r2, #0
 8026f8a:	4b33      	ldr	r3, [pc, #204]	; (8027058 <scalbn+0xe8>)
 8026f8c:	4629      	mov	r1, r5
 8026f8e:	ee10 0a10 	vmov	r0, s0
 8026f92:	f7d9 fafd 	bl	8000590 <__aeabi_dmul>
 8026f96:	4a31      	ldr	r2, [pc, #196]	; (802705c <scalbn+0xec>)
 8026f98:	4296      	cmp	r6, r2
 8026f9a:	4604      	mov	r4, r0
 8026f9c:	460d      	mov	r5, r1
 8026f9e:	460b      	mov	r3, r1
 8026fa0:	da13      	bge.n	8026fca <scalbn+0x5a>
 8026fa2:	a329      	add	r3, pc, #164	; (adr r3, 8027048 <scalbn+0xd8>)
 8026fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fa8:	f7d9 faf2 	bl	8000590 <__aeabi_dmul>
 8026fac:	e00a      	b.n	8026fc4 <scalbn+0x54>
 8026fae:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8026fb2:	428a      	cmp	r2, r1
 8026fb4:	d10c      	bne.n	8026fd0 <scalbn+0x60>
 8026fb6:	ee10 2a10 	vmov	r2, s0
 8026fba:	462b      	mov	r3, r5
 8026fbc:	4620      	mov	r0, r4
 8026fbe:	4629      	mov	r1, r5
 8026fc0:	f7d9 f934 	bl	800022c <__adddf3>
 8026fc4:	4604      	mov	r4, r0
 8026fc6:	460d      	mov	r5, r1
 8026fc8:	e01b      	b.n	8027002 <scalbn+0x92>
 8026fca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8026fce:	3a36      	subs	r2, #54	; 0x36
 8026fd0:	4432      	add	r2, r6
 8026fd2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8026fd6:	428a      	cmp	r2, r1
 8026fd8:	dd0b      	ble.n	8026ff2 <scalbn+0x82>
 8026fda:	ec45 4b11 	vmov	d1, r4, r5
 8026fde:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8027050 <scalbn+0xe0>
 8026fe2:	f000 f83f 	bl	8027064 <copysign>
 8026fe6:	a31a      	add	r3, pc, #104	; (adr r3, 8027050 <scalbn+0xe0>)
 8026fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fec:	ec51 0b10 	vmov	r0, r1, d0
 8026ff0:	e7da      	b.n	8026fa8 <scalbn+0x38>
 8026ff2:	2a00      	cmp	r2, #0
 8026ff4:	dd08      	ble.n	8027008 <scalbn+0x98>
 8026ff6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8026ffa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8026ffe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027002:	ec45 4b10 	vmov	d0, r4, r5
 8027006:	bd70      	pop	{r4, r5, r6, pc}
 8027008:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802700c:	da0d      	bge.n	802702a <scalbn+0xba>
 802700e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8027012:	429e      	cmp	r6, r3
 8027014:	ec45 4b11 	vmov	d1, r4, r5
 8027018:	dce1      	bgt.n	8026fde <scalbn+0x6e>
 802701a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8027048 <scalbn+0xd8>
 802701e:	f000 f821 	bl	8027064 <copysign>
 8027022:	a309      	add	r3, pc, #36	; (adr r3, 8027048 <scalbn+0xd8>)
 8027024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027028:	e7e0      	b.n	8026fec <scalbn+0x7c>
 802702a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802702e:	3236      	adds	r2, #54	; 0x36
 8027030:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8027034:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8027038:	4620      	mov	r0, r4
 802703a:	4629      	mov	r1, r5
 802703c:	2200      	movs	r2, #0
 802703e:	4b08      	ldr	r3, [pc, #32]	; (8027060 <scalbn+0xf0>)
 8027040:	e7b2      	b.n	8026fa8 <scalbn+0x38>
 8027042:	bf00      	nop
 8027044:	f3af 8000 	nop.w
 8027048:	c2f8f359 	.word	0xc2f8f359
 802704c:	01a56e1f 	.word	0x01a56e1f
 8027050:	8800759c 	.word	0x8800759c
 8027054:	7e37e43c 	.word	0x7e37e43c
 8027058:	43500000 	.word	0x43500000
 802705c:	ffff3cb0 	.word	0xffff3cb0
 8027060:	3c900000 	.word	0x3c900000

08027064 <copysign>:
 8027064:	ec53 2b10 	vmov	r2, r3, d0
 8027068:	ee11 0a90 	vmov	r0, s3
 802706c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8027070:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8027074:	ea41 0300 	orr.w	r3, r1, r0
 8027078:	ec43 2b10 	vmov	d0, r2, r3
 802707c:	4770      	bx	lr
	...

08027080 <_init>:
 8027080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027082:	bf00      	nop
 8027084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027086:	bc08      	pop	{r3}
 8027088:	469e      	mov	lr, r3
 802708a:	4770      	bx	lr

0802708c <_fini>:
 802708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802708e:	bf00      	nop
 8027090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027092:	bc08      	pop	{r3}
 8027094:	469e      	mov	lr, r3
 8027096:	4770      	bx	lr
